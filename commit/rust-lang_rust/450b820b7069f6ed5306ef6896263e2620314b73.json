{"sha": "450b820b7069f6ed5306ef6896263e2620314b73", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ1MGI4MjBiNzA2OWY2ZWQ1MzA2ZWY2ODk2MjYzZTI2MjAzMTRiNzM=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2019-11-24T13:05:25Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-11-24T13:05:25Z"}, "message": "Merge #2384\n\n2384: Nicer API for attrs r=matklad a=matklad\n\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "1d4d51e200305e5adee78b28a0f86343d3bab0fd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1d4d51e200305e5adee78b28a0f86343d3bab0fd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/450b820b7069f6ed5306ef6896263e2620314b73", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJd2oAVCRBK7hj4Ov3rIwAAdHIIAKOHJBCbFLUzo1LuhBn5EP8g\nooEVICQT+MX8J3AD5luCOp9J5+dW/vNY/bMPe6WhGwBsp1lsmuynsJcKgp8ex33a\nCnHtufdueshdsQGqCcHCD38nGZ9EinYIGk2OxWfl+tuN9zS3a/y7pTjxEt01MHpD\nUAtock7VSN87RKljpoEUU/CIayWzQWjzYiiKGio/bCwM9Ec+gHInY4vIEJ11pPAe\nGG/K53ocWbBj4/N1pounsSaZGEL1hFH7zs0HqWW0j66Xk9sqlT+KpkyxapAQ+vEd\ndyKYOcMewE/jIrbWDFU7K3PR+KF6fQo15t5WP0WUSwKNBDu0QucWRKHDHcTd+iA=\n=EIGd\n-----END PGP SIGNATURE-----\n", "payload": "tree 1d4d51e200305e5adee78b28a0f86343d3bab0fd\nparent 982a32aca317deb91ae03346cbc7880bd7d4429b\nparent 4b74fb1d896ce5a1c8c4c4bf73ad2940fb86abc5\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1574600725 +0000\ncommitter GitHub <noreply@github.com> 1574600725 +0000\n\nMerge #2384\n\n2384: Nicer API for attrs r=matklad a=matklad\n\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/450b820b7069f6ed5306ef6896263e2620314b73", "html_url": "https://github.com/rust-lang/rust/commit/450b820b7069f6ed5306ef6896263e2620314b73", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/450b820b7069f6ed5306ef6896263e2620314b73/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "982a32aca317deb91ae03346cbc7880bd7d4429b", "url": "https://api.github.com/repos/rust-lang/rust/commits/982a32aca317deb91ae03346cbc7880bd7d4429b", "html_url": "https://github.com/rust-lang/rust/commit/982a32aca317deb91ae03346cbc7880bd7d4429b"}, {"sha": "4b74fb1d896ce5a1c8c4c4bf73ad2940fb86abc5", "url": "https://api.github.com/repos/rust-lang/rust/commits/4b74fb1d896ce5a1c8c4c4bf73ad2940fb86abc5", "html_url": "https://github.com/rust-lang/rust/commit/4b74fb1d896ce5a1c8c4c4bf73ad2940fb86abc5"}], "stats": {"total": 247, "additions": 130, "deletions": 117}, "files": [{"sha": "905bb5bcba0cf592fcf74fbcf2a309e112c36d38", "filename": "crates/ra_hir/src/code_model.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/450b820b7069f6ed5306ef6896263e2620314b73/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/450b820b7069f6ed5306ef6896263e2620314b73/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model.rs?ref=450b820b7069f6ed5306ef6896263e2620314b73", "patch": "@@ -734,7 +734,7 @@ pub struct Static {\n \n impl Static {\n     pub fn module(self, db: &impl DefDatabase) -> Module {\n-        Module { id: self.id.module(db) }\n+        Module { id: self.id.lookup(db).module(db) }\n     }\n \n     pub fn krate(self, db: &impl DefDatabase) -> Option<Crate> {"}, {"sha": "b9d21bdd72ed2fe39127561dee58e2a3a50d27dd", "filename": "crates/ra_hir/src/code_model/src.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/450b820b7069f6ed5306ef6896263e2620314b73/crates%2Fra_hir%2Fsrc%2Fcode_model%2Fsrc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/450b820b7069f6ed5306ef6896263e2620314b73/crates%2Fra_hir%2Fsrc%2Fcode_model%2Fsrc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model%2Fsrc.rs?ref=450b820b7069f6ed5306ef6896263e2620314b73", "patch": "@@ -88,7 +88,7 @@ impl HasSource for Const {\n impl HasSource for Static {\n     type Ast = ast::StaticDef;\n     fn source(self, db: &impl DefDatabase) -> Source<ast::StaticDef> {\n-        self.id.source(db)\n+        self.id.lookup(db).source(db)\n     }\n }\n impl HasSource for Trait {"}, {"sha": "f506bba705ffea3b3cc4fcd9593d1b7e5903323a", "filename": "crates/ra_hir/src/from_source.rs", "status": "modified", "additions": 16, "deletions": 3, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/450b820b7069f6ed5306ef6896263e2620314b73/crates%2Fra_hir%2Fsrc%2Ffrom_source.rs", "raw_url": "https://github.com/rust-lang/rust/raw/450b820b7069f6ed5306ef6896263e2620314b73/crates%2Fra_hir%2Fsrc%2Ffrom_source.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Ffrom_source.rs?ref=450b820b7069f6ed5306ef6896263e2620314b73", "patch": "@@ -104,10 +104,21 @@ impl FromSource for Const {\n impl FromSource for Static {\n     type Ast = ast::StaticDef;\n     fn from_source(db: &(impl DefDatabase + AstDatabase), src: Source<Self::Ast>) -> Option<Self> {\n-        let id = from_source(db, src)?;\n-        Some(Static { id })\n+        let module = match Container::find(db, src.as_ref().map(|it| it.syntax()))? {\n+            Container::Module(it) => it,\n+            Container::Trait(_) | Container::ImplBlock(_) => return None,\n+        };\n+        module\n+            .declarations(db)\n+            .into_iter()\n+            .filter_map(|it| match it {\n+                ModuleDef::Static(it) => Some(it),\n+                _ => None,\n+            })\n+            .find(|it| same_source(&it.source(db), &src))\n     }\n }\n+\n impl FromSource for TypeAlias {\n     type Ast = ast::TypeAliasDef;\n     fn from_source(db: &(impl DefDatabase + AstDatabase), src: Source<Self::Ast>) -> Option<Self> {\n@@ -271,7 +282,9 @@ where\n     let module_src = ModuleSource::from_child_node(db, src.as_ref().map(|it| it.syntax()));\n     let module = Module::from_definition(db, Source::new(src.file_id, module_src))?;\n     let ctx = LocationCtx::new(db, module.id, src.file_id);\n-    Some(DEF::from_ast(ctx, &src.value))\n+    let items = db.ast_id_map(src.file_id);\n+    let item_id = items.ast_id(&src.value);\n+    Some(DEF::from_ast_id(ctx, item_id))\n }\n \n enum Container {"}, {"sha": "cfc4bd3260e07df76a70268084de8508321b8dcd", "filename": "crates/ra_hir/src/source_binder.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/450b820b7069f6ed5306ef6896263e2620314b73/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/450b820b7069f6ed5306ef6896263e2620314b73/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs?ref=450b820b7069f6ed5306ef6896263e2620314b73", "patch": "@@ -11,7 +11,7 @@ use hir_def::{\n     expr::{ExprId, PatId},\n     path::known,\n     resolver::{self, resolver_for_scope, HasResolver, Resolver, TypeNs, ValueNs},\n-    DefWithBodyId, LocationCtx,\n+    DefWithBodyId,\n };\n use hir_expand::{\n     name::AsName, AstId, HirFileId, MacroCallId, MacroCallLoc, MacroFileKind, Source,\n@@ -28,8 +28,8 @@ use crate::{\n     expr::{BodySourceMap, ExprScopes, ScopeId},\n     ty::method_resolution::{self, implements_trait},\n     Adt, AssocItem, Const, DefWithBody, Either, Enum, EnumVariant, FromSource, Function,\n-    GenericParam, HasBody, Local, MacroDef, Module, Name, Path, ScopeDef, Static, Struct, Trait,\n-    Ty, TypeAlias,\n+    GenericParam, HasBody, Local, MacroDef, Name, Path, ScopeDef, Static, Struct, Trait, Ty,\n+    TypeAlias,\n };\n \n fn try_get_resolver_for_node(db: &impl HirDatabase, node: Source<&SyntaxNode>) -> Option<Resolver> {\n@@ -68,16 +68,12 @@ fn def_with_body_from_child_node(\n     db: &impl HirDatabase,\n     child: Source<&SyntaxNode>,\n ) -> Option<DefWithBody> {\n-    let module_source = crate::ModuleSource::from_child_node(db, child);\n-    let module = Module::from_definition(db, Source::new(child.file_id, module_source))?;\n-    let ctx = LocationCtx::new(db, module.id, child.file_id);\n-\n     child.value.ancestors().find_map(|node| {\n         match_ast! {\n             match node {\n                 ast::FnDef(def)  => { return Function::from_source(db, child.with_value(def)).map(DefWithBody::from); },\n                 ast::ConstDef(def) => { return Const::from_source(db, child.with_value(def)).map(DefWithBody::from); },\n-                ast::StaticDef(def) => { Some(Static { id: ctx.to_def(&def) }.into()) },\n+                ast::StaticDef(def) => { return Static::from_source(db, child.with_value(def)).map(DefWithBody::from); },\n                 _ => { None },\n             }\n         }"}, {"sha": "3209c66bd0e544c9d4810b7df7bd3aac31ce2547", "filename": "crates/ra_hir/src/ty/tests.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/450b820b7069f6ed5306ef6896263e2620314b73/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/450b820b7069f6ed5306ef6896263e2620314b73/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs?ref=450b820b7069f6ed5306ef6896263e2620314b73", "patch": "@@ -2550,8 +2550,6 @@ fn test() {\n     [233; 246) 'GLOBAL_STATIC': u32\n     [256; 257) 'w': u32\n     [260; 277) 'GLOBAL...IC_MUT': u32\n-    [118; 120) '99': u32\n-    [161; 163) '99': u32\n     \"###\n     );\n }"}, {"sha": "53456fc08508a57a27a65589adce88dc02a5f3eb", "filename": "crates/ra_hir_def/src/attr.rs", "status": "modified", "additions": 50, "deletions": 58, "changes": 108, "blob_url": "https://github.com/rust-lang/rust/blob/450b820b7069f6ed5306ef6896263e2620314b73/crates%2Fra_hir_def%2Fsrc%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/450b820b7069f6ed5306ef6896263e2620314b73/crates%2Fra_hir_def%2Fsrc%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fattr.rs?ref=450b820b7069f6ed5306ef6896263e2620314b73", "patch": "@@ -2,9 +2,8 @@\n \n use std::{ops, sync::Arc};\n \n-use hir_expand::{either::Either, hygiene::Hygiene, AstId};\n+use hir_expand::{either::Either, hygiene::Hygiene, AstId, Source};\n use mbe::ast_to_token_tree;\n-use ra_cfg::CfgOptions;\n use ra_syntax::{\n     ast::{self, AstNode, AttrsOwner},\n     SmolStr,\n@@ -40,50 +39,53 @@ impl Attrs {\n                     Some(it) => it,\n                     None => return Attrs::default(),\n                 };\n-                let hygiene = Hygiene::new(db, src.file_id);\n-                Attr::from_attrs_owner(&src.value, &hygiene)\n+                Attrs::from_attrs_owner(db, src.as_ref().map(|it| it as &dyn AttrsOwner))\n             }\n             AttrDefId::StructFieldId(it) => {\n                 let src = it.parent.child_source(db);\n                 match &src.value[it.local_id] {\n                     Either::A(_tuple) => Attrs::default(),\n-                    Either::B(record) => {\n-                        let hygiene = Hygiene::new(db, src.file_id);\n-                        Attr::from_attrs_owner(record, &hygiene)\n-                    }\n+                    Either::B(record) => Attrs::from_attrs_owner(db, src.with_value(record)),\n                 }\n             }\n-            AttrDefId::EnumVariantId(it) => {\n-                let src = it.parent.child_source(db);\n-                let hygiene = Hygiene::new(db, src.file_id);\n-                Attr::from_attrs_owner(&src.value[it.local_id], &hygiene)\n+            AttrDefId::EnumVariantId(var_id) => {\n+                let src = var_id.parent.child_source(db);\n+                let src = src.as_ref().map(|it| &it[var_id.local_id]);\n+                Attrs::from_attrs_owner(db, src.map(|it| it as &dyn AttrsOwner))\n             }\n             AttrDefId::AdtId(it) => match it {\n                 AdtId::StructId(it) => attrs_from_ast(it.0.lookup_intern(db).ast_id, db),\n                 AdtId::EnumId(it) => attrs_from_ast(it.lookup_intern(db).ast_id, db),\n                 AdtId::UnionId(it) => attrs_from_ast(it.0.lookup_intern(db).ast_id, db),\n             },\n-            AttrDefId::StaticId(it) => attrs_from_ast(it.lookup_intern(db).ast_id, db),\n             AttrDefId::TraitId(it) => attrs_from_ast(it.lookup_intern(db).ast_id, db),\n             AttrDefId::MacroDefId(it) => attrs_from_ast(it.ast_id, db),\n             AttrDefId::ImplId(it) => attrs_from_ast(it.lookup_intern(db).ast_id, db),\n             AttrDefId::ConstId(it) => attrs_from_loc(it.lookup(db), db),\n+            AttrDefId::StaticId(it) => attrs_from_loc(it.lookup(db), db),\n             AttrDefId::FunctionId(it) => attrs_from_loc(it.lookup(db), db),\n             AttrDefId::TypeAliasId(it) => attrs_from_loc(it.lookup(db), db),\n         }\n     }\n \n-    pub fn has_atom(&self, atom: &str) -> bool {\n-        self.iter().any(|it| it.is_simple_atom(atom))\n+    fn from_attrs_owner(db: &impl DefDatabase, owner: Source<&dyn AttrsOwner>) -> Attrs {\n+        let hygiene = Hygiene::new(db, owner.file_id);\n+        Attrs::new(owner.value, &hygiene)\n     }\n \n-    pub fn find_string_value(&self, key: &str) -> Option<SmolStr> {\n-        self.iter().filter(|attr| attr.is_simple_atom(key)).find_map(|attr| {\n-            match attr.input.as_ref()? {\n-                AttrInput::Literal(it) => Some(it.clone()),\n-                _ => None,\n-            }\n-        })\n+    pub(crate) fn new(owner: &dyn AttrsOwner, hygiene: &Hygiene) -> Attrs {\n+        let mut attrs = owner.attrs().peekable();\n+        let entries = if attrs.peek().is_none() {\n+            // Avoid heap allocation\n+            None\n+        } else {\n+            Some(attrs.flat_map(|ast| Attr::from_src(ast, hygiene)).collect())\n+        };\n+        Attrs { entries }\n+    }\n+\n+    pub fn by_key(&self, key: &'static str) -> AttrQuery<'_> {\n+        AttrQuery { attrs: self, key }\n     }\n }\n \n@@ -100,7 +102,7 @@ pub enum AttrInput {\n }\n \n impl Attr {\n-    pub(crate) fn from_src(ast: ast::Attr, hygiene: &Hygiene) -> Option<Attr> {\n+    fn from_src(ast: ast::Attr, hygiene: &Hygiene) -> Option<Attr> {\n         let path = Path::from_src(ast.path()?, hygiene)?;\n         let input = match ast.input() {\n             None => None,\n@@ -116,46 +118,37 @@ impl Attr {\n \n         Some(Attr { path, input })\n     }\n+}\n \n-    pub fn from_attrs_owner(owner: &dyn AttrsOwner, hygiene: &Hygiene) -> Attrs {\n-        let mut attrs = owner.attrs().peekable();\n-        let entries = if attrs.peek().is_none() {\n-            // Avoid heap allocation\n-            None\n-        } else {\n-            Some(attrs.flat_map(|ast| Attr::from_src(ast, hygiene)).collect())\n-        };\n-        Attrs { entries }\n-    }\n+pub struct AttrQuery<'a> {\n+    attrs: &'a Attrs,\n+    key: &'static str,\n+}\n \n-    pub fn is_simple_atom(&self, name: &str) -> bool {\n-        // FIXME: Avoid cloning\n-        self.path.as_ident().map_or(false, |s| s.to_string() == name)\n+impl<'a> AttrQuery<'a> {\n+    pub fn tt_values(self) -> impl Iterator<Item = &'a Subtree> {\n+        self.attrs().filter_map(|attr| match attr.input.as_ref()? {\n+            AttrInput::TokenTree(it) => Some(it),\n+            _ => None,\n+        })\n     }\n \n-    // FIXME: handle cfg_attr :-)\n-    pub fn as_cfg(&self) -> Option<&Subtree> {\n-        if !self.is_simple_atom(\"cfg\") {\n-            return None;\n-        }\n-        match &self.input {\n-            Some(AttrInput::TokenTree(subtree)) => Some(subtree),\n+    pub fn string_value(self) -> Option<&'a SmolStr> {\n+        self.attrs().find_map(|attr| match attr.input.as_ref()? {\n+            AttrInput::Literal(it) => Some(it),\n             _ => None,\n-        }\n+        })\n     }\n \n-    pub fn as_path(&self) -> Option<&SmolStr> {\n-        if !self.is_simple_atom(\"path\") {\n-            return None;\n-        }\n-        match &self.input {\n-            Some(AttrInput::Literal(it)) => Some(it),\n-            _ => None,\n-        }\n+    pub fn exists(self) -> bool {\n+        self.attrs().next().is_some()\n     }\n \n-    pub fn is_cfg_enabled(&self, cfg_options: &CfgOptions) -> Option<bool> {\n-        cfg_options.is_cfg_enabled(self.as_cfg()?)\n+    fn attrs(self) -> impl Iterator<Item = &'a Attr> {\n+        let key = self.key;\n+        self.attrs\n+            .iter()\n+            .filter(move |attr| attr.path.as_ident().map_or(false, |s| s.to_string() == key))\n     }\n }\n \n@@ -164,8 +157,8 @@ where\n     N: ast::AttrsOwner,\n     D: DefDatabase,\n {\n-    let hygiene = Hygiene::new(db, src.file_id());\n-    Attr::from_attrs_owner(&src.to_node(db), &hygiene)\n+    let src = Source::new(src.file_id(), src.to_node(db));\n+    Attrs::from_attrs_owner(db, src.as_ref().map(|it| it as &dyn AttrsOwner))\n }\n \n fn attrs_from_loc<T, D>(node: T, db: &D) -> Attrs\n@@ -175,6 +168,5 @@ where\n     D: DefDatabase,\n {\n     let src = node.source(db);\n-    let hygiene = Hygiene::new(db, src.file_id);\n-    Attr::from_attrs_owner(&src.value, &hygiene)\n+    Attrs::from_attrs_owner(db, src.as_ref().map(|it| it as &dyn AttrsOwner))\n }"}, {"sha": "1589085b53fb850482855a1c7558e97d216b05f5", "filename": "crates/ra_hir_def/src/body.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/450b820b7069f6ed5306ef6896263e2620314b73/crates%2Fra_hir_def%2Fsrc%2Fbody.rs", "raw_url": "https://github.com/rust-lang/rust/raw/450b820b7069f6ed5306ef6896263e2620314b73/crates%2Fra_hir_def%2Fsrc%2Fbody.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fbody.rs?ref=450b820b7069f6ed5306ef6896263e2620314b73", "patch": "@@ -17,7 +17,7 @@ use crate::{\n     expr::{Expr, ExprId, Pat, PatId},\n     nameres::CrateDefMap,\n     path::Path,\n-    AstItemDef, DefWithBodyId, HasModule, HasSource, Lookup, ModuleId,\n+    DefWithBodyId, HasModule, HasSource, Lookup, ModuleId,\n };\n \n pub struct Expander {\n@@ -160,6 +160,7 @@ impl Body {\n                 (src.file_id, c.module(db), src.value.body())\n             }\n             DefWithBodyId::StaticId(s) => {\n+                let s = s.lookup(db);\n                 let src = s.source(db);\n                 (src.file_id, s.module(db), src.value.body())\n             }"}, {"sha": "81a8ec18db1b38cb7254a25b061c792a0a9f67ee", "filename": "crates/ra_hir_def/src/data.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/450b820b7069f6ed5306ef6896263e2620314b73/crates%2Fra_hir_def%2Fsrc%2Fdata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/450b820b7069f6ed5306ef6896263e2620314b73/crates%2Fra_hir_def%2Fsrc%2Fdata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fdata.rs?ref=450b820b7069f6ed5306ef6896263e2620314b73", "patch": "@@ -204,7 +204,7 @@ impl ConstData {\n     }\n \n     pub(crate) fn static_data_query(db: &impl DefDatabase, konst: StaticId) -> Arc<ConstData> {\n-        let node = konst.source(db).value;\n+        let node = konst.lookup(db).source(db).value;\n         const_data_for(&node)\n     }\n }"}, {"sha": "32adb11bdc4d39e3f6103e7f213b402283878ef7", "filename": "crates/ra_hir_def/src/db.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/450b820b7069f6ed5306ef6896263e2620314b73/crates%2Fra_hir_def%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/450b820b7069f6ed5306ef6896263e2620314b73/crates%2Fra_hir_def%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fdb.rs?ref=450b820b7069f6ed5306ef6896263e2620314b73", "patch": "@@ -18,7 +18,8 @@ use crate::{\n         CrateDefMap,\n     },\n     AttrDefId, ConstId, ConstLoc, DefWithBodyId, EnumId, FunctionId, FunctionLoc, GenericDefId,\n-    ImplId, ItemLoc, ModuleId, StaticId, StructOrUnionId, TraitId, TypeAliasId, TypeAliasLoc,\n+    ImplId, ItemLoc, ModuleId, StaticId, StaticLoc, StructOrUnionId, TraitId, TypeAliasId,\n+    TypeAliasLoc,\n };\n \n #[salsa::query_group(InternDatabaseStorage)]\n@@ -32,7 +33,7 @@ pub trait InternDatabase: SourceDatabase {\n     #[salsa::interned]\n     fn intern_const(&self, loc: ConstLoc) -> ConstId;\n     #[salsa::interned]\n-    fn intern_static(&self, loc: ItemLoc<ast::StaticDef>) -> StaticId;\n+    fn intern_static(&self, loc: StaticLoc) -> StaticId;\n     #[salsa::interned]\n     fn intern_trait(&self, loc: ItemLoc<ast::TraitDef>) -> TraitId;\n     #[salsa::interned]"}, {"sha": "225511428871e15a03877734c23f76f601c71775", "filename": "crates/ra_hir_def/src/docs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/450b820b7069f6ed5306ef6896263e2620314b73/crates%2Fra_hir_def%2Fsrc%2Fdocs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/450b820b7069f6ed5306ef6896263e2620314b73/crates%2Fra_hir_def%2Fsrc%2Fdocs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fdocs.rs?ref=450b820b7069f6ed5306ef6896263e2620314b73", "patch": "@@ -52,10 +52,10 @@ impl Documentation {\n                 let src = it.parent.child_source(db);\n                 docs_from_ast(&src.value[it.local_id])\n             }\n-            AttrDefId::StaticId(it) => docs_from_ast(&it.source(db).value),\n             AttrDefId::TraitId(it) => docs_from_ast(&it.source(db).value),\n             AttrDefId::MacroDefId(it) => docs_from_ast(&it.ast_id.to_node(db)),\n             AttrDefId::ConstId(it) => docs_from_ast(&it.lookup(db).source(db).value),\n+            AttrDefId::StaticId(it) => docs_from_ast(&it.lookup(db).source(db).value),\n             AttrDefId::FunctionId(it) => docs_from_ast(&it.lookup(db).source(db).value),\n             AttrDefId::TypeAliasId(it) => docs_from_ast(&it.lookup(db).source(db).value),\n             AttrDefId::ImplId(_) => None,"}, {"sha": "3b9fb0328563225e1a72e1310872c78b9dd1ab99", "filename": "crates/ra_hir_def/src/lang_item.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/450b820b7069f6ed5306ef6896263e2620314b73/crates%2Fra_hir_def%2Fsrc%2Flang_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/450b820b7069f6ed5306ef6896263e2620314b73/crates%2Fra_hir_def%2Fsrc%2Flang_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Flang_item.rs?ref=450b820b7069f6ed5306ef6896263e2620314b73", "patch": "@@ -113,8 +113,8 @@ impl LangItems {\n         T: Into<AttrDefId> + Copy,\n     {\n         let attrs = db.attrs(item.into());\n-        if let Some(lang_item_name) = attrs.find_string_value(\"lang\") {\n-            self.items.entry(lang_item_name).or_insert_with(|| constructor(item));\n+        if let Some(lang_item_name) = attrs.by_key(\"lang\").string_value() {\n+            self.items.entry(lang_item_name.clone()).or_insert_with(|| constructor(item));\n         }\n     }\n }"}, {"sha": "f60feb5fa9feaa73c537185714aa267fb6e4338f", "filename": "crates/ra_hir_def/src/lib.rs", "status": "modified", "additions": 32, "deletions": 20, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/450b820b7069f6ed5306ef6896263e2620314b73/crates%2Fra_hir_def%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/450b820b7069f6ed5306ef6896263e2620314b73/crates%2Fra_hir_def%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Flib.rs?ref=450b820b7069f6ed5306ef6896263e2620314b73", "patch": "@@ -94,25 +94,10 @@ impl<'a, DB> LocationCtx<&'a DB> {\n     }\n }\n \n-impl<'a, DB: AstDatabase + InternDatabase> LocationCtx<&'a DB> {\n-    pub fn to_def<N, DEF>(self, ast: &N) -> DEF\n-    where\n-        N: AstNode,\n-        DEF: AstItemDef<N>,\n-    {\n-        DEF::from_ast(self, ast)\n-    }\n-}\n-\n pub trait AstItemDef<N: AstNode>: salsa::InternKey + Clone {\n     fn intern(db: &impl InternDatabase, loc: ItemLoc<N>) -> Self;\n     fn lookup_intern(self, db: &impl InternDatabase) -> ItemLoc<N>;\n \n-    fn from_ast(ctx: LocationCtx<&(impl AstDatabase + InternDatabase)>, ast: &N) -> Self {\n-        let items = ctx.db.ast_id_map(ctx.file_id);\n-        let item_id = items.ast_id(ast);\n-        Self::from_ast_id(ctx, item_id)\n-    }\n     fn from_ast_id(ctx: LocationCtx<&impl InternDatabase>, ast_id: FileAstId<N>) -> Self {\n         let loc = ItemLoc { module: ctx.module, ast_id: AstId::new(ctx.file_id, ast_id) };\n         Self::intern(ctx.db, loc)\n@@ -245,12 +230,24 @@ impl Lookup for ConstId {\n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n pub struct StaticId(salsa::InternId);\n impl_intern_key!(StaticId);\n-impl AstItemDef<ast::StaticDef> for StaticId {\n-    fn intern(db: &impl InternDatabase, loc: ItemLoc<ast::StaticDef>) -> Self {\n-        db.intern_static(loc)\n+\n+#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n+pub struct StaticLoc {\n+    pub container: ModuleId,\n+    pub ast_id: AstId<ast::StaticDef>,\n+}\n+\n+impl Intern for StaticLoc {\n+    type ID = StaticId;\n+    fn intern(self, db: &impl db::DefDatabase) -> StaticId {\n+        db.intern_static(self)\n     }\n-    fn lookup_intern(self, db: &impl InternDatabase) -> ItemLoc<ast::StaticDef> {\n-        db.lookup_intern_static(self)\n+}\n+\n+impl Lookup for StaticId {\n+    type Data = StaticLoc;\n+    fn lookup(&self, db: &impl db::DefDatabase) -> StaticLoc {\n+        db.lookup_intern_static(*self)\n     }\n }\n \n@@ -481,6 +478,12 @@ impl HasModule for ConstLoc {\n     }\n }\n \n+impl HasModule for StaticLoc {\n+    fn module(&self, _db: &impl db::DefDatabase) -> ModuleId {\n+        self.container\n+    }\n+}\n+\n pub trait HasSource {\n     type Value;\n     fn source(&self, db: &impl db::DefDatabase) -> Source<Self::Value>;\n@@ -513,6 +516,15 @@ impl HasSource for ConstLoc {\n     }\n }\n \n+impl HasSource for StaticLoc {\n+    type Value = ast::StaticDef;\n+\n+    fn source(&self, db: &impl db::DefDatabase) -> Source<ast::StaticDef> {\n+        let node = self.ast_id.to_node(db);\n+        Source::new(self.ast_id.file_id(), node)\n+    }\n+}\n+\n pub trait HasChildSource {\n     type ChildId;\n     type Value;"}, {"sha": "7a5f90327900fe59d27f586e82771566ddbf9b6b", "filename": "crates/ra_hir_def/src/nameres/collector.rs", "status": "modified", "additions": 13, "deletions": 10, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/450b820b7069f6ed5306ef6896263e2620314b73/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/450b820b7069f6ed5306ef6896263e2620314b73/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs?ref=450b820b7069f6ed5306ef6896263e2620314b73", "patch": "@@ -7,7 +7,7 @@ use hir_expand::{\n };\n use ra_cfg::CfgOptions;\n use ra_db::{CrateId, FileId};\n-use ra_syntax::{ast, SmolStr};\n+use ra_syntax::ast;\n use rustc_hash::{FxHashMap, FxHashSet};\n use test_utils::tested_by;\n \n@@ -21,7 +21,7 @@ use crate::{\n     path::{Path, PathKind},\n     per_ns::PerNs,\n     AdtId, AstId, AstItemDef, ConstLoc, ContainerId, EnumId, EnumVariantId, FunctionLoc, ImplId,\n-    Intern, LocalImportId, LocalModuleId, LocationCtx, ModuleDefId, ModuleId, StaticId, StructId,\n+    Intern, LocalImportId, LocalModuleId, LocationCtx, ModuleDefId, ModuleId, StaticLoc, StructId,\n     StructOrUnionId, TraitId, TypeAliasLoc, UnionId,\n };\n \n@@ -599,8 +599,8 @@ where\n     }\n \n     fn collect_module(&mut self, module: &raw::ModuleData, attrs: &Attrs) {\n-        let path_attr = self.path_attr(attrs);\n-        let is_macro_use = attrs.has_atom(\"macro_use\");\n+        let path_attr = attrs.by_key(\"path\").string_value();\n+        let is_macro_use = attrs.by_key(\"macro_use\").exists();\n         match module {\n             // inline module, just recurse\n             raw::ModuleData::Definition { name, items, ast_id } => {\n@@ -715,7 +715,10 @@ where\n                 PerNs::values(def.into())\n             }\n             raw::DefKind::Static(ast_id) => {\n-                PerNs::values(StaticId::from_ast_id(ctx, ast_id).into())\n+                let def = StaticLoc { container: module, ast_id: AstId::new(self.file_id, ast_id) }\n+                    .intern(self.def_collector.db);\n+\n+                PerNs::values(def.into())\n             }\n             raw::DefKind::Trait(ast_id) => PerNs::types(TraitId::from_ast_id(ctx, ast_id).into()),\n             raw::DefKind::TypeAlias(ast_id) => {\n@@ -793,11 +796,11 @@ where\n     }\n \n     fn is_cfg_enabled(&self, attrs: &Attrs) -> bool {\n-        attrs.iter().all(|attr| attr.is_cfg_enabled(&self.def_collector.cfg_options) != Some(false))\n-    }\n-\n-    fn path_attr<'a>(&self, attrs: &'a Attrs) -> Option<&'a SmolStr> {\n-        attrs.iter().find_map(|attr| attr.as_path())\n+        // FIXME: handle cfg_attr :-)\n+        attrs\n+            .by_key(\"cfg\")\n+            .tt_values()\n+            .all(|tt| self.def_collector.cfg_options.is_cfg_enabled(tt) != Some(false))\n     }\n }\n "}, {"sha": "19857875381d99091d92913759023719e517dd59", "filename": "crates/ra_hir_def/src/nameres/raw.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/450b820b7069f6ed5306ef6896263e2620314b73/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/450b820b7069f6ed5306ef6896263e2620314b73/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fraw.rs?ref=450b820b7069f6ed5306ef6896263e2620314b73", "patch": "@@ -17,10 +17,7 @@ use ra_syntax::{\n use test_utils::tested_by;\n \n use crate::{\n-    attr::{Attr, Attrs},\n-    db::DefDatabase,\n-    path::Path,\n-    FileAstId, HirFileId, LocalImportId, Source,\n+    attr::Attrs, db::DefDatabase, path::Path, FileAstId, HirFileId, LocalImportId, Source,\n };\n \n /// `RawItems` is a set of top-level items in a file (except for impls).\n@@ -407,6 +404,6 @@ impl RawItemsCollector {\n     }\n \n     fn parse_attrs(&self, item: &impl ast::AttrsOwner) -> Attrs {\n-        Attr::from_attrs_owner(item, &self.hygiene)\n+        Attrs::new(item, &self.hygiene)\n     }\n }"}, {"sha": "4ff0a091b83f791af6aaeea0c1d1c35213cc0315", "filename": "crates/ra_hir_def/src/resolver.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/450b820b7069f6ed5306ef6896263e2620314b73/crates%2Fra_hir_def%2Fsrc%2Fresolver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/450b820b7069f6ed5306ef6896263e2620314b73/crates%2Fra_hir_def%2Fsrc%2Fresolver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fresolver.rs?ref=450b820b7069f6ed5306ef6896263e2620314b73", "patch": "@@ -540,7 +540,7 @@ impl HasResolver for ConstId {\n \n impl HasResolver for StaticId {\n     fn resolver(self, db: &impl DefDatabase) -> Resolver {\n-        self.module(db).resolver(db)\n+        self.lookup(db).container.resolver(db)\n     }\n }\n "}, {"sha": "bac3f7582fdb94195466256e52867d939dc90e17", "filename": "crates/ra_ide_api/src/completion/presentation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/450b820b7069f6ed5306ef6896263e2620314b73/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fpresentation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/450b820b7069f6ed5306ef6896263e2620314b73/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fpresentation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fpresentation.rs?ref=450b820b7069f6ed5306ef6896263e2620314b73", "patch": "@@ -288,7 +288,7 @@ impl Completions {\n }\n \n fn is_deprecated(node: impl HasAttrs, db: &impl HirDatabase) -> bool {\n-    node.attrs(db).has_atom(\"deprecated\")\n+    node.attrs(db).by_key(\"deprecated\").exists()\n }\n \n fn has_non_default_type_params(def: hir::GenericDef, db: &db::RootDatabase) -> bool {"}]}