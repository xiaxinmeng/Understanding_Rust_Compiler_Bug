{"sha": "698b956a9fca9688632d617dd6d73cae834237a3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY5OGI5NTZhOWZjYTk2ODg2MzJkNjE3ZGQ2ZDczY2FlODM0MjM3YTM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-05-03T08:06:08Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-05-03T08:06:08Z"}, "message": "Auto merge of #50391 - nnethercote:escape_unicode, r=eddyb\n\nUse escape_default() for strings in LitKind::token().\n\nThis avoids converting every char to \\u{...} form, which bloats the\nresulting strings unnecessarily. It also provides consistency with the\nexisting escape_default() calls in LitKind::token() used for raw\nstring literals, char literals, and raw byte char literals.\n\nThere are two benefits from this change.\n\n- Compilation is faster. Most of the rustc-perf benchmarks see a\n  non-trivial speedup, particularly for incremental rebuilds, with the\n  best speedup over 13%, and multiple others over 10%.\n\n- Generated rlibs are smaller. An extreme example is libfutures.rlib,\n  which shrinks from 2073306 bytes to 1765927 bytes, a 15% reduction.\n\nr? @jseyfried\n\n<details><summary>Here are full numbers for all the rustc-perf runs where the improvement was > 1%.</summary>\n\n```\nregex-check\n\tavg: -11.1%\tmin: -13.4%\tmax: -5.5%\nfutures-check\n\tavg: -7.6%\tmin: -11.4%\tmax: -3.5%\nfutures-opt\n\tavg: -6.3%\tmin: -10.3%\tmax: -2.3%\nfutures\n\tavg: -6.6%\tmin: -10.3%\tmax: -2.8%\nregex-opt\n\tavg: -4.7%\tmin: -10.2%\tmax: -0.4%\nregex\n\tavg: -5.3%\tmin: -10.2%\tmax: -1.2%\nhyper-check\n\tavg: -4.8%\tmin: -6.6%\tmax: -2.7%\nencoding-check\n\tavg: -4.1%\tmin: -5.5%\tmax: -2.5%\nissue-46449-check\n\tavg: -4.7%\tmin: -5.2%\tmax: -4.1%\nclap-rs-check\n\tavg: -2.9%\tmin: -5.2%\tmax: -1.1%\nhyper\n\tavg: -3.0%\tmin: -5.1%\tmax: -0.8%\nparser-check\n\tavg: -4.2%\tmin: -4.9%\tmax: -3.2%\nhyper-opt\n\tavg: -2.6%\tmin: -4.9%\tmax: -0.3%\nencoding-opt\n\tavg: -2.3%\tmin: -4.6%\tmax: -0.5%\nencoding\n\tavg: -2.5%\tmin: -4.4%\tmax: -0.6%\nissue-46449\n\tavg: -2.3%\tmin: -4.4%\tmax: -1.8%\nissue-46449-opt\n\tavg: -1.7%\tmin: -4.3%\tmax: -0.9%\nclap-rs-opt\n\tavg: -1.6%\tmin: -4.2%\tmax: -0.2%\nserde-check\n\tavg: -1.4%\tmin: -4.1%\tmax: -0.2%\nclap-rs\n\tavg: -1.6%\tmin: -3.9%\tmax: -0.7%\nunify-linearly-check\n\tavg: -3.2%\tmin: -3.7%\tmax: -2.7%\nserde\n\tavg: -1.1%\tmin: -3.5%\tmax: -0.1%\nregression-31157-check\n\tavg: -2.6%\tmin: -3.4%\tmax: -1.6%\nhelloworld-check\n\tavg: -2.5%\tmin: -3.4%\tmax: -0.6%\nserde-opt\n\tavg: -1.3%\tmin: -3.3%\tmax: -0.5%\ntokio-webpush-simple-check\n\tavg: -2.4%\tmin: -3.2%\tmax: -1.8%\npiston-image-check\n\tavg: -1.7%\tmin: -3.2%\tmax: -0.9%\ndeeply-nested-opt\n\tavg: -1.5%\tmin: -3.0%\tmax: -0.6%\ndeeply-nested-check\n\tavg: -1.9%\tmin: -2.9%\tmax: -0.4%\ndeeply-nested\n\tavg: -1.9%\tmin: -2.9%\tmax: -1.2%\nsyn-check\n\tavg: -1.8%\tmin: -2.8%\tmax: -0.6%\ncoercions\n\tavg: -0.5%\tmin: -2.8%\tmax: 0.4%\nsyn-opt\n\tavg: -0.9%\tmin: -2.4%\tmax: -0.1%\nsyn\n\tavg: -1.1%\tmin: -2.2%\tmax: -0.3%\nparser-opt\n\tavg: -1.9%\tmin: -2.1%\tmax: -1.6%\nparser\n\tavg: -1.9%\tmin: -2.1%\tmax: -1.6%\nstyle-servo-check\n\tavg: -1.3%\tmin: -2.0%\tmax: -0.8%\nregression-31157-opt\n\tavg: -0.8%\tmin: -2.0%\tmax: 0.0%\npiston-image\n\tavg: -0.7%\tmin: -1.8%\tmax: -0.2%\npiston-image-opt\n\tavg: -0.6%\tmin: -1.8%\tmax: -0.0%\nregression-31157\n\tavg: -1.0%\tmin: -1.7%\tmax: -0.3%\nhtml5ever-opt\n\tavg: -0.6%\tmin: -1.5%\tmax: -0.1%\nunify-linearly-opt\n\tavg: -1.3%\tmin: -1.5%\tmax: -1.1%\nunify-linearly\n\tavg: -1.3%\tmin: -1.4%\tmax: -1.2%\ntokio-webpush-simple-opt\n\tavg: -0.4%\tmin: -1.2%\tmax: -0.0%\nhelloworld-opt\n\tavg: -1.0%\tmin: -1.1%\tmax: -0.6%\nhelloworld\n\tavg: -1.0%\tmin: -1.1%\tmax: -0.7%\ninflate-opt\n\tavg: -0.3%\tmin: -1.1%\tmax: 0.1%\nhtml5ever-check\n\tavg: -0.6%\tmin: -1.0%\tmax: -0.3%\ninflate-check\n\tavg: -0.3%\tmin: -1.0%\tmax: -0.1%\n```\n\n</details>", "tree": {"sha": "74c308475e876bf7ab6babdaa7dab59f63b1e118", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/74c308475e876bf7ab6babdaa7dab59f63b1e118"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/698b956a9fca9688632d617dd6d73cae834237a3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/698b956a9fca9688632d617dd6d73cae834237a3", "html_url": "https://github.com/rust-lang/rust/commit/698b956a9fca9688632d617dd6d73cae834237a3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/698b956a9fca9688632d617dd6d73cae834237a3/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "427c5487493fbd5e96e81b7d3ba54784e0805df7", "url": "https://api.github.com/repos/rust-lang/rust/commits/427c5487493fbd5e96e81b7d3ba54784e0805df7", "html_url": "https://github.com/rust-lang/rust/commit/427c5487493fbd5e96e81b7d3ba54784e0805df7"}, {"sha": "7a56360ecef1dca261110281e78385fc8f14b154", "url": "https://api.github.com/repos/rust-lang/rust/commits/7a56360ecef1dca261110281e78385fc8f14b154", "html_url": "https://github.com/rust-lang/rust/commit/7a56360ecef1dca261110281e78385fc8f14b154"}], "stats": {"total": 16, "additions": 5, "deletions": 11}, "files": [{"sha": "b5461d61dd4f6e15fd3aa85fb3037603b8654469", "filename": "src/libsyntax/attr.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/698b956a9fca9688632d617dd6d73cae834237a3/src%2Flibsyntax%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/698b956a9fca9688632d617dd6d73cae834237a3/src%2Flibsyntax%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr.rs?ref=698b956a9fca9688632d617dd6d73cae834237a3", "patch": "@@ -1252,10 +1252,7 @@ impl LitKind {\n \n         match *self {\n             LitKind::Str(string, ast::StrStyle::Cooked) => {\n-                let mut escaped = String::new();\n-                for ch in string.as_str().chars() {\n-                    escaped.extend(ch.escape_unicode());\n-                }\n+                let escaped = string.as_str().escape_default();\n                 Token::Literal(token::Lit::Str_(Symbol::intern(&escaped)), None)\n             }\n             LitKind::Str(string, ast::StrStyle::Raw(n)) => {"}, {"sha": "f148aaf7267eec9dc581fdfc025d8f2884df44b6", "filename": "src/libsyntax/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/698b956a9fca9688632d617dd6d73cae834237a3/src%2Flibsyntax%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/698b956a9fca9688632d617dd6d73cae834237a3/src%2Flibsyntax%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Flib.rs?ref=698b956a9fca9688632d617dd6d73cae834237a3", "patch": "@@ -25,6 +25,7 @@\n #![feature(non_exhaustive)]\n #![feature(const_atomic_usize_new)]\n #![feature(rustc_attrs)]\n+#![feature(str_escape)]\n \n #![recursion_limit=\"256\"]\n "}, {"sha": "f252020bc31698836dc454794a6a8588288a8327", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/698b956a9fca9688632d617dd6d73cae834237a3/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/698b956a9fca9688632d617dd6d73cae834237a3/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=698b956a9fca9688632d617dd6d73cae834237a3", "patch": "@@ -298,14 +298,10 @@ pub fn char_lit(lit: &str, diag: Option<(Span, &Handler)>) -> (char, isize) {\n     }\n }\n \n-pub fn escape_default(s: &str) -> String {\n-    s.chars().map(char::escape_default).flat_map(|x| x).collect()\n-}\n-\n /// Parse a string representing a string literal into its final form. Does\n /// unescaping.\n pub fn str_lit(lit: &str, diag: Option<(Span, &Handler)>) -> String {\n-    debug!(\"parse_str_lit: given {}\", escape_default(lit));\n+    debug!(\"str_lit: given {}\", lit.escape_default());\n     let mut res = String::with_capacity(lit.len());\n \n     let error = |i| format!(\"lexer should have rejected {} at {}\", lit, i);\n@@ -374,7 +370,7 @@ pub fn str_lit(lit: &str, diag: Option<(Span, &Handler)>) -> String {\n /// Parse a string representing a raw string literal into its final form. The\n /// only operation this does is convert embedded CRLF into a single LF.\n pub fn raw_str_lit(lit: &str) -> String {\n-    debug!(\"raw_str_lit: given {}\", escape_default(lit));\n+    debug!(\"raw_str_lit: given {}\", lit.escape_default());\n     let mut res = String::with_capacity(lit.len());\n \n     let mut chars = lit.chars().peekable();"}, {"sha": "27c5a14ff0e8b4ee06b7e37a1cc7e9796a7d7acf", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/698b956a9fca9688632d617dd6d73cae834237a3/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/698b956a9fca9688632d617dd6d73cae834237a3/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=698b956a9fca9688632d617dd6d73cae834237a3", "patch": "@@ -656,7 +656,7 @@ pub trait PrintState<'a> {\n                     style: ast::StrStyle) -> io::Result<()> {\n         let st = match style {\n             ast::StrStyle::Cooked => {\n-                (format!(\"\\\"{}\\\"\", parse::escape_default(st)))\n+                (format!(\"\\\"{}\\\"\", st.escape_default()))\n             }\n             ast::StrStyle::Raw(n) => {\n                 (format!(\"r{delim}\\\"{string}\\\"{delim}\","}]}