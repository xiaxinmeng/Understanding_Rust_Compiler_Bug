{"sha": "430c0d1d95475f5edb066da53c3b2174d6223d80", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQzMGMwZDFkOTU0NzVmNWVkYjA2NmRhNTNjM2IyMTc0ZDYyMjNkODA=", "commit": {"author": {"name": "Oli Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2021-03-19T11:46:27Z"}, "committer": {"name": "Oli Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2021-03-19T11:46:27Z"}, "message": "Do not ICE on ty::Error as an error must already have been reported", "tree": {"sha": "8cde5e436bd8c234cf4642a1221e3072825b3b47", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8cde5e436bd8c234cf4642a1221e3072825b3b47"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/430c0d1d95475f5edb066da53c3b2174d6223d80", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/430c0d1d95475f5edb066da53c3b2174d6223d80", "html_url": "https://github.com/rust-lang/rust/commit/430c0d1d95475f5edb066da53c3b2174d6223d80", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/430c0d1d95475f5edb066da53c3b2174d6223d80/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0464f638af99a7c0876e9b8f96db5bbf917e3fe2", "url": "https://api.github.com/repos/rust-lang/rust/commits/0464f638af99a7c0876e9b8f96db5bbf917e3fe2", "html_url": "https://github.com/rust-lang/rust/commit/0464f638af99a7c0876e9b8f96db5bbf917e3fe2"}], "stats": {"total": 49, "additions": 44, "deletions": 5}, "files": [{"sha": "b41bf70e88eec973cc32c59958ae1f5a6d107e57", "filename": "compiler/rustc_middle/src/ty/relate.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/430c0d1d95475f5edb066da53c3b2174d6223d80/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/430c0d1d95475f5edb066da53c3b2174d6223d80/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs?ref=430c0d1d95475f5edb066da53c3b2174d6223d80", "patch": "@@ -10,6 +10,7 @@ use crate::ty::subst::{GenericArg, GenericArgKind, SubstsRef};\n use crate::ty::{self, Ty, TyCtxt, TypeFoldable};\n use rustc_hir as ast;\n use rustc_hir::def_id::DefId;\n+use rustc_span::DUMMY_SP;\n use rustc_target::spec::abi;\n use std::iter;\n \n@@ -499,11 +500,14 @@ pub fn super_relate_consts<R: TypeRelation<'tcx>>(\n \n     // FIXME(oli-obk): once const generics can have generic types, this assertion\n     // will likely get triggered. Move to `normalize_erasing_regions` at that point.\n-    assert_eq!(\n-        tcx.erase_regions(a.ty),\n-        tcx.erase_regions(b.ty),\n-        \"cannot relate constants of different types\"\n-    );\n+    let a_ty = tcx.erase_regions(a.ty);\n+    let b_ty = tcx.erase_regions(b.ty);\n+    if a_ty != b_ty {\n+        relation.tcx().sess.delay_span_bug(\n+            DUMMY_SP,\n+            &format!(\"cannot relate constants of different types: {} != {}\", a_ty, b_ty),\n+        );\n+    }\n \n     let eagerly_eval = |x: &'tcx ty::Const<'tcx>| x.eval(tcx, relation.param_env());\n     let a = eagerly_eval(a);"}, {"sha": "5933701808b3ef1418f54d413eff491e3203c9a1", "filename": "src/test/ui/const-generics/type_not_in_scope.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/430c0d1d95475f5edb066da53c3b2174d6223d80/src%2Ftest%2Fui%2Fconst-generics%2Ftype_not_in_scope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/430c0d1d95475f5edb066da53c3b2174d6223d80/src%2Ftest%2Fui%2Fconst-generics%2Ftype_not_in_scope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Ftype_not_in_scope.rs?ref=430c0d1d95475f5edb066da53c3b2174d6223d80", "patch": "@@ -0,0 +1,11 @@\n+impl X {\n+    //~^ ERROR cannot find type\n+    fn getn<const N: usize>() -> [u8; N] {\n+        getn::<N>()\n+    }\n+}\n+fn getn<const N: cfg_attr>() -> [u8; N] {}\n+//~^ ERROR expected type, found built-in attribute `cfg_attr`\n+//~| ERROR mismatched types\n+\n+fn main() {}"}, {"sha": "16796acb3d2855a7d62ec7e3ed3d74ed6b5b3582", "filename": "src/test/ui/const-generics/type_not_in_scope.stderr", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/430c0d1d95475f5edb066da53c3b2174d6223d80/src%2Ftest%2Fui%2Fconst-generics%2Ftype_not_in_scope.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/430c0d1d95475f5edb066da53c3b2174d6223d80/src%2Ftest%2Fui%2Fconst-generics%2Ftype_not_in_scope.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Ftype_not_in_scope.stderr?ref=430c0d1d95475f5edb066da53c3b2174d6223d80", "patch": "@@ -0,0 +1,24 @@\n+error[E0412]: cannot find type `X` in this scope\n+  --> $DIR/type_not_in_scope.rs:1:6\n+   |\n+LL | impl X {\n+   |      ^ not found in this scope\n+\n+error[E0573]: expected type, found built-in attribute `cfg_attr`\n+  --> $DIR/type_not_in_scope.rs:7:18\n+   |\n+LL | fn getn<const N: cfg_attr>() -> [u8; N] {}\n+   |                  ^^^^^^^^ not a type\n+\n+error[E0308]: mismatched types\n+  --> $DIR/type_not_in_scope.rs:7:33\n+   |\n+LL | fn getn<const N: cfg_attr>() -> [u8; N] {}\n+   |    ----                         ^^^^^^^ expected array `[u8; N]`, found `()`\n+   |    |\n+   |    implicitly returns `()` as its body has no tail or `return` expression\n+\n+error: aborting due to 3 previous errors\n+\n+Some errors have detailed explanations: E0308, E0412, E0573.\n+For more information about an error, try `rustc --explain E0308`."}]}