{"sha": "0fa5c0f4faf6f3b87159d343f485bbe460549b57", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBmYTVjMGY0ZmFmNmYzYjg3MTU5ZDM0M2Y0ODViYmU0NjA1NDliNTc=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-11-14T13:31:42Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-11-14T13:31:42Z"}, "message": "Rustup to rustc 1.32.0-nightly (9fefb6766 2018-11-13)", "tree": {"sha": "d441f66bd8ea64511b75d6e63dd6057f1ac3ff94", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d441f66bd8ea64511b75d6e63dd6057f1ac3ff94"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0fa5c0f4faf6f3b87159d343f485bbe460549b57", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0fa5c0f4faf6f3b87159d343f485bbe460549b57", "html_url": "https://github.com/rust-lang/rust/commit/0fa5c0f4faf6f3b87159d343f485bbe460549b57", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0fa5c0f4faf6f3b87159d343f485bbe460549b57/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "72c34be9752050c1ebacf319d908b98bf2984aa4", "url": "https://api.github.com/repos/rust-lang/rust/commits/72c34be9752050c1ebacf319d908b98bf2984aa4", "html_url": "https://github.com/rust-lang/rust/commit/72c34be9752050c1ebacf319d908b98bf2984aa4"}], "stats": {"total": 18, "additions": 9, "deletions": 9}, "files": [{"sha": "40955f2cd3d0e9e231de9c2e4d14703e79189b62", "filename": "src/base.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0fa5c0f4faf6f3b87159d343f485bbe460549b57/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fa5c0f4faf6f3b87159d343f485bbe460549b57/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=0fa5c0f4faf6f3b87159d343f485bbe460549b57", "patch": "@@ -373,7 +373,7 @@ fn trans_stmt<'a, 'tcx: 'a>(\n                     if *variant_index != dataful_variant {\n                         let niche = place.place_field(fx, mir::Field::new(0));\n                         //let niche_llty = niche.layout.immediate_llvm_type(bx.cx);\n-                        let niche_value = ((variant_index - *niche_variants.start()) as u128)\n+                        let niche_value = ((variant_index.as_u32() - niche_variants.start().as_u32()) as u128)\n                             .wrapping_add(niche_start);\n                         // FIXME(eddyb) Check the actual primitive type here.\n                         let niche_llval = if niche_value == 0 {\n@@ -683,7 +683,7 @@ pub fn trans_get_discriminant<'a, 'tcx: 'a>(\n     }\n     match layout.variants {\n         layout::Variants::Single { index } => {\n-            let discr_val = layout.ty.ty_adt_def().map_or(index as u128, |def| {\n+            let discr_val = layout.ty.ty_adt_def().map_or(index.as_u32() as u128, |def| {\n                 def.discriminant_for_variant(fx.tcx, index).val\n             });\n             return CValue::const_val(fx, dest_layout.ty, discr_val as u64 as i64);\n@@ -720,29 +720,29 @@ pub fn trans_get_discriminant<'a, 'tcx: 'a>(\n                 let if_true = fx\n                     .bcx\n                     .ins()\n-                    .iconst(dest_clif_ty, *niche_variants.start() as u64 as i64);\n+                    .iconst(dest_clif_ty, niche_variants.start().as_u32() as i64);\n                 let if_false = fx\n                     .bcx\n                     .ins()\n-                    .iconst(dest_clif_ty, dataful_variant as u64 as i64);\n+                    .iconst(dest_clif_ty, dataful_variant.as_u32() as i64);\n                 let val = fx.bcx.ins().select(b, if_true, if_false);\n                 return CValue::ByVal(val, dest_layout);\n             } else {\n                 // Rebase from niche values to discriminant values.\n-                let delta = niche_start.wrapping_sub(*niche_variants.start() as u128);\n+                let delta = niche_start.wrapping_sub(niche_variants.start().as_u32() as u128);\n                 let delta = fx.bcx.ins().iconst(niche_llty, delta as u64 as i64);\n                 let lldiscr = fx.bcx.ins().isub(lldiscr, delta);\n                 let b = fx.bcx.ins().icmp_imm(\n                     IntCC::UnsignedLessThanOrEqual,\n                     lldiscr,\n-                    *niche_variants.end() as u64 as i64,\n+                    niche_variants.end().as_u32() as i64,\n                 );\n                 let if_true =\n                     clif_intcast(fx, lldiscr, fx.clif_type(dest_layout.ty).unwrap(), false);\n                 let if_false = fx\n                     .bcx\n                     .ins()\n-                    .iconst(dest_clif_ty, dataful_variant as u64 as i64);\n+                    .iconst(dest_clif_ty, dataful_variant.as_u32() as i64);\n                 let val = fx.bcx.ins().select(b, if_true, if_false);\n                 return CValue::ByVal(val, dest_layout);\n             }"}, {"sha": "77376182756a53a098d45a1625a05e0c15eccad9", "filename": "src/common.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0fa5c0f4faf6f3b87159d343f485bbe460549b57/src%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fa5c0f4faf6f3b87159d343f485bbe460549b57/src%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcommon.rs?ref=0fa5c0f4faf6f3b87159d343f485bbe460549b57", "patch": "@@ -561,7 +561,7 @@ impl<'a, 'tcx: 'a> CPlace<'tcx> {\n         }\n     }\n \n-    pub fn downcast_variant(self, fx: &FunctionCx<'a, 'tcx, impl Backend>, variant: usize) -> Self {\n+    pub fn downcast_variant(self, fx: &FunctionCx<'a, 'tcx, impl Backend>, variant: VariantIdx) -> Self {\n         let layout = self.layout().for_variant(fx, variant);\n         self.unchecked_cast_to(layout)\n     }"}, {"sha": "b4d7d0e2f46d23766c6652ad2bd1e37807997ae5", "filename": "src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0fa5c0f4faf6f3b87159d343f485bbe460549b57/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fa5c0f4faf6f3b87159d343f485bbe460549b57/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=0fa5c0f4faf6f3b87159d343f485bbe460549b57", "patch": "@@ -96,7 +96,7 @@ mod prelude {\n         config::{CrateType, Lto},\n         Session,\n     };\n-    pub use rustc::ty::layout::{self, Abi, LayoutOf, Scalar, Size, TyLayout};\n+    pub use rustc::ty::layout::{self, Abi, LayoutOf, Scalar, Size, TyLayout, VariantIdx};\n     pub use rustc::ty::{\n         self, subst::Substs, FnSig, Instance, InstanceDef, ParamEnv, PolyFnSig, Ty, TyCtxt,\n         TypeAndMut, TypeFoldable,"}]}