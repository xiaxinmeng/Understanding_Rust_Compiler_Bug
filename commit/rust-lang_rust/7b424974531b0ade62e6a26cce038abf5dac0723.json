{"sha": "7b424974531b0ade62e6a26cce038abf5dac0723", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdiNDI0OTc0NTMxYjBhZGU2MmU2YTI2Y2NlMDM4YWJmNWRhYzA3MjM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-12-16T11:01:58Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-12-16T11:01:58Z"}, "message": "auto merge of #10995 : thestinger/rust/fast_move_iter, r=huonw\n\nCloses #10976\r\n\r\nTaken from https://github.com/thestinger/rust-core/commit/863fbaaa125f1bb290e28cbf22236406cf0aebcf, so it will be easily updated to the better vector representation too.", "tree": {"sha": "48416b5436364549781be59987f217ed7a437390", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/48416b5436364549781be59987f217ed7a437390"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7b424974531b0ade62e6a26cce038abf5dac0723", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7b424974531b0ade62e6a26cce038abf5dac0723", "html_url": "https://github.com/rust-lang/rust/commit/7b424974531b0ade62e6a26cce038abf5dac0723", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7b424974531b0ade62e6a26cce038abf5dac0723/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e7b0e0adbbb9f41f79592822ffe1e5834222a96b", "url": "https://api.github.com/repos/rust-lang/rust/commits/e7b0e0adbbb9f41f79592822ffe1e5834222a96b", "html_url": "https://github.com/rust-lang/rust/commit/e7b0e0adbbb9f41f79592822ffe1e5834222a96b"}, {"sha": "e3b168dab34b7fc765aebda301e4a0aeaf556f67", "url": "https://api.github.com/repos/rust-lang/rust/commits/e3b168dab34b7fc765aebda301e4a0aeaf556f67", "html_url": "https://github.com/rust-lang/rust/commit/e3b168dab34b7fc765aebda301e4a0aeaf556f67"}], "stats": {"total": 97, "additions": 47, "deletions": 50}, "files": [{"sha": "b5d5b8a6149bdd9085261eac8b736aaafddf4be0", "filename": "src/libstd/hashmap.rs", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/7b424974531b0ade62e6a26cce038abf5dac0723/src%2Flibstd%2Fhashmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b424974531b0ade62e6a26cce038abf5dac0723/src%2Flibstd%2Fhashmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fhashmap.rs?ref=7b424974531b0ade62e6a26cce038abf5dac0723", "patch": "@@ -157,8 +157,7 @@ impl<K:Hash + Eq,V> HashMap<K, V> {\n                                   vec::from_fn(new_capacity, |_| None));\n \n         self.size = 0;\n-        // move_rev_iter is more efficient\n-        for bucket in old_buckets.move_rev_iter() {\n+        for bucket in old_buckets.move_iter() {\n             self.insert_opt_bucket(bucket);\n         }\n     }\n@@ -477,8 +476,7 @@ impl<K: Hash + Eq, V> HashMap<K, V> {\n     /// pair out of the map in arbitrary order. The map cannot be used after\n     /// calling this.\n     pub fn move_iter(self) -> HashMapMoveIterator<K, V> {\n-        // `move_rev_iter` is more efficient than `move_iter` for vectors\n-        HashMapMoveIterator {iter: self.buckets.move_rev_iter()}\n+        HashMapMoveIterator {iter: self.buckets.move_iter()}\n     }\n }\n \n@@ -532,7 +530,7 @@ pub struct HashMapMutIterator<'a, K, V> {\n \n /// HashMap move iterator\n pub struct HashMapMoveIterator<K, V> {\n-    priv iter: vec::MoveRevIterator<Option<Bucket<K, V>>>,\n+    priv iter: vec::MoveIterator<Option<Bucket<K, V>>>,\n }\n \n /// HashSet iterator\n@@ -543,7 +541,7 @@ pub struct HashSetIterator<'a, K> {\n \n /// HashSet move iterator\n pub struct HashSetMoveIterator<K> {\n-    priv iter: vec::MoveRevIterator<Option<Bucket<K, ()>>>,\n+    priv iter: vec::MoveIterator<Option<Bucket<K, ()>>>,\n }\n \n impl<'a, K, V> Iterator<(&'a K, &'a V)> for HashMapIterator<'a, K, V> {\n@@ -729,8 +727,7 @@ impl<T:Hash + Eq> HashSet<T> {\n     /// of the set in arbitrary order. The set cannot be used after calling\n     /// this.\n     pub fn move_iter(self) -> HashSetMoveIterator<T> {\n-        // `move_rev_iter` is more efficient than `move_iter` for vectors\n-        HashSetMoveIterator {iter: self.map.buckets.move_rev_iter()}\n+        HashSetMoveIterator {iter: self.map.buckets.move_iter()}\n     }\n \n     /// Visit the values representing the difference"}, {"sha": "dd926305cc514d52f0099f10e000d95b8f2fda63", "filename": "src/libstd/vec.rs", "status": "modified", "additions": 42, "deletions": 42, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/7b424974531b0ade62e6a26cce038abf5dac0723/src%2Flibstd%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b424974531b0ade62e6a26cce038abf5dac0723/src%2Flibstd%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fvec.rs?ref=7b424974531b0ade62e6a26cce038abf5dac0723", "patch": "@@ -102,20 +102,21 @@ There are a number of free functions that create or take vectors, for example:\n #[warn(non_camel_case_types)];\n \n use cast;\n+use ops::Drop;\n use clone::{Clone, DeepClone};\n use container::{Container, Mutable};\n use cmp::{Eq, TotalOrd, Ordering, Less, Equal, Greater};\n use cmp;\n use default::Default;\n use iter::*;\n-use libc::c_void;\n+use libc::{c_char, c_void};\n use num::{Integer, CheckedAdd, Saturating};\n use option::{None, Option, Some};\n use ptr::to_unsafe_ptr;\n use ptr;\n use ptr::RawPtr;\n-use rt::global_heap::malloc_raw;\n-use rt::global_heap::realloc_raw;\n+use rt::global_heap::{malloc_raw, realloc_raw, exchange_free};\n+use rt::local_heap::local_free;\n use mem;\n use mem::size_of;\n use uint;\n@@ -1325,9 +1326,6 @@ pub trait OwnedVector<T> {\n     /// value out of the vector (from start to end). The vector cannot\n     /// be used after calling this.\n     ///\n-    /// Note that this performs O(n) swaps, and so `move_rev_iter`\n-    /// (which just calls `pop` repeatedly) is more efficient.\n-    ///\n     /// # Examples\n     ///\n     /// ```rust\n@@ -1339,8 +1337,7 @@ pub trait OwnedVector<T> {\n     /// ```\n     fn move_iter(self) -> MoveIterator<T>;\n     /// Creates a consuming iterator that moves out of the vector in\n-    /// reverse order. Also see `move_iter`, however note that this\n-    /// is more efficient.\n+    /// reverse order.\n     fn move_rev_iter(self) -> MoveRevIterator<T>;\n \n     /**\n@@ -1469,11 +1466,18 @@ pub trait OwnedVector<T> {\n }\n \n impl<T> OwnedVector<T> for ~[T] {\n+    #[inline]\n     fn move_iter(self) -> MoveIterator<T> {\n-        MoveIterator { v: self, idx: 0 }\n+        unsafe {\n+            let iter = cast::transmute(self.iter());\n+            let ptr = cast::transmute(self);\n+            MoveIterator { allocation: ptr, iter: iter }\n+        }\n     }\n+\n+    #[inline]\n     fn move_rev_iter(self) -> MoveRevIterator<T> {\n-        MoveRevIterator { v: self }\n+        self.move_iter().invert()\n     }\n \n     fn reserve(&mut self, n: uint) {\n@@ -2660,58 +2664,54 @@ impl<'a, T> DoubleEndedIterator<&'a mut [T]> for MutChunkIter<'a, T> {\n }\n \n /// An iterator that moves out of a vector.\n-#[deriving(Clone)]\n pub struct MoveIterator<T> {\n-    priv v: ~[T],\n-    priv idx: uint,\n+    priv allocation: *mut u8, // the block of memory allocated for the vector\n+    priv iter: VecIterator<'static, T>\n }\n \n impl<T> Iterator<T> for MoveIterator<T> {\n     #[inline]\n     fn next(&mut self) -> Option<T> {\n-        // this is peculiar, but is required for safety with respect\n-        // to dtors. It traverses the first half of the vec, and\n-        // removes them by swapping them with the last element (and\n-        // popping), which results in the second half in reverse\n-        // order, and so these can just be pop'd off. That is,\n-        //\n-        // [1,2,3,4,5] => 1, [5,2,3,4] => 2, [5,4,3] => 3, [5,4] => 4,\n-        // [5] -> 5, []\n-        let l = self.v.len();\n-        if self.idx < l {\n-            self.v.swap(self.idx, l - 1);\n-            self.idx += 1;\n+        unsafe {\n+            self.iter.next().map(|x| ptr::read_ptr(x))\n         }\n-\n-        self.v.pop_opt()\n     }\n \n     #[inline]\n     fn size_hint(&self) -> (uint, Option<uint>) {\n-        let l = self.v.len();\n-        (l, Some(l))\n+        self.iter.size_hint()\n     }\n }\n \n-/// An iterator that moves out of a vector in reverse order.\n-#[deriving(Clone)]\n-pub struct MoveRevIterator<T> {\n-    priv v: ~[T]\n-}\n-\n-impl<T> Iterator<T> for MoveRevIterator<T> {\n+impl<T> DoubleEndedIterator<T> for MoveIterator<T> {\n     #[inline]\n-    fn next(&mut self) -> Option<T> {\n-        self.v.pop_opt()\n+    fn next_back(&mut self) -> Option<T> {\n+        unsafe {\n+            self.iter.next_back().map(|x| ptr::read_ptr(x))\n+        }\n     }\n+}\n \n-    #[inline]\n-    fn size_hint(&self) -> (uint, Option<uint>) {\n-        let l = self.v.len();\n-        (l, Some(l))\n+#[unsafe_destructor]\n+impl<T> Drop for MoveIterator<T> {\n+    fn drop(&mut self) {\n+        unsafe {\n+            // destroy the remaining elements\n+            for x in self.iter {\n+                ptr::read_ptr(x);\n+            }\n+            if owns_managed::<T>() {\n+                local_free(self.allocation as *u8 as *c_char)\n+            } else {\n+                exchange_free(self.allocation as *u8 as *c_char)\n+            }\n+        }\n     }\n }\n \n+/// An iterator that moves out of a vector in reverse order.\n+pub type MoveRevIterator<T> = Invert<MoveIterator<T>>;\n+\n impl<A> FromIterator<A> for ~[A] {\n     fn from_iterator<T: Iterator<A>>(iterator: &mut T) -> ~[A] {\n         let (lower, _) = iterator.size_hint();"}]}