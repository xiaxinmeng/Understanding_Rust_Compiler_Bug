{"sha": "3d7677d91ad9ef0602af227b41831fa2c46e0547", "node_id": "C_kwDOAAsO6NoAKDNkNzY3N2Q5MWFkOWVmMDYwMmFmMjI3YjQxODMxZmEyYzQ2ZTA1NDc", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-01-17T19:21:28Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-01-17T19:21:28Z"}, "message": "Rollup merge of #106970 - kylematsuda:earlybinder-item-bounds, r=lcnr\n\nSwitch to `EarlyBinder` for `item_bounds` query\n\nPart of the work to finish #105779 (also see https://github.com/rust-lang/types-team/issues/78).\n\nSeveral queries `X` have a `bound_X` variant that wraps the output in `EarlyBinder`. This adds `EarlyBinder` to the return type of the `item_bounds` query and removes `bound_item_bounds`.\n\nr? `@lcnr`", "tree": {"sha": "9324ad1e4091b9fd2324632f2dae9a23918eaa96", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9324ad1e4091b9fd2324632f2dae9a23918eaa96"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3d7677d91ad9ef0602af227b41831fa2c46e0547", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjxvU4CRBK7hj4Ov3rIwAAjEkIACxOxGW1jxxDJg3NCyzSiF5P\nPSRGc9L6LfTWyzd+0g79FLY589ygB3205OWbe4YdqZwriQ5dOj5BdOAUfgLzH6wg\na+iLroVqmazGthBcMMiZb4FkvFZGLWcVUQBy9zjigmrg6SGxEoLf/z3Tg6gyWS6i\nvAMlKX0SgYpRWiZ7ougQ4FlqTMDCwxbsmHdUSR13GruSNs8cJ4T1E4EmxWWnV2NQ\n8OAbLrLnJhvR+g44iuBzvV5s3P1X6hw5r4n4bY90UCJMu2D42FAkf2BM0PrM+bTh\n3YO5qHe+/pWpB5vb1QdHe6xrQTUFXGGcAM/XHlJ7bHZTMxXl9ONHsHuiFLgsp1w=\n=Qqu4\n-----END PGP SIGNATURE-----\n", "payload": "tree 9324ad1e4091b9fd2324632f2dae9a23918eaa96\nparent 28081833c61459a510c4303914ae713035e183fb\nparent f193effcaf421da090a463a49968b7bac849db2f\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1673983288 +0100\ncommitter GitHub <noreply@github.com> 1673983288 +0100\n\nRollup merge of #106970 - kylematsuda:earlybinder-item-bounds, r=lcnr\n\nSwitch to `EarlyBinder` for `item_bounds` query\n\nPart of the work to finish #105779 (also see https://github.com/rust-lang/types-team/issues/78).\n\nSeveral queries `X` have a `bound_X` variant that wraps the output in `EarlyBinder`. This adds `EarlyBinder` to the return type of the `item_bounds` query and removes `bound_item_bounds`.\n\nr? `@lcnr`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3d7677d91ad9ef0602af227b41831fa2c46e0547", "html_url": "https://github.com/rust-lang/rust/commit/3d7677d91ad9ef0602af227b41831fa2c46e0547", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3d7677d91ad9ef0602af227b41831fa2c46e0547/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "28081833c61459a510c4303914ae713035e183fb", "url": "https://api.github.com/repos/rust-lang/rust/commits/28081833c61459a510c4303914ae713035e183fb", "html_url": "https://github.com/rust-lang/rust/commit/28081833c61459a510c4303914ae713035e183fb"}, {"sha": "f193effcaf421da090a463a49968b7bac849db2f", "url": "https://api.github.com/repos/rust-lang/rust/commits/f193effcaf421da090a463a49968b7bac849db2f", "html_url": "https://github.com/rust-lang/rust/commit/f193effcaf421da090a463a49968b7bac849db2f"}], "stats": {"total": 36, "additions": 16, "deletions": 20}, "files": [{"sha": "8d479f1c3e335f37e6b6d8dab2d5fdf083055d8a", "filename": "compiler/rustc_hir_analysis/src/collect/item_bounds.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3d7677d91ad9ef0602af227b41831fa2c46e0547/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fitem_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d7677d91ad9ef0602af227b41831fa2c46e0547/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fitem_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fitem_bounds.rs?ref=3d7677d91ad9ef0602af227b41831fa2c46e0547", "patch": "@@ -99,12 +99,16 @@ pub(super) fn explicit_item_bounds(\n     }\n }\n \n-pub(super) fn item_bounds(tcx: TyCtxt<'_>, def_id: DefId) -> &'_ ty::List<ty::Predicate<'_>> {\n-    tcx.mk_predicates(\n+pub(super) fn item_bounds(\n+    tcx: TyCtxt<'_>,\n+    def_id: DefId,\n+) -> ty::EarlyBinder<&'_ ty::List<ty::Predicate<'_>>> {\n+    let bounds = tcx.mk_predicates(\n         util::elaborate_predicates(\n             tcx,\n             tcx.explicit_item_bounds(def_id).iter().map(|&(bound, _span)| bound),\n         )\n         .map(|obligation| obligation.predicate),\n-    )\n+    );\n+    ty::EarlyBinder(bounds)\n }"}, {"sha": "56695a87b7c058df976e6836dcbdea6d60531e90", "filename": "compiler/rustc_infer/src/infer/outlives/verify.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3d7677d91ad9ef0602af227b41831fa2c46e0547/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fverify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d7677d91ad9ef0602af227b41831fa2c46e0547/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fverify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fverify.rs?ref=3d7677d91ad9ef0602af227b41831fa2c46e0547", "patch": "@@ -298,7 +298,7 @@ impl<'cx, 'tcx> VerifyBoundCx<'cx, 'tcx> {\n         substs: SubstsRef<'tcx>,\n     ) -> impl Iterator<Item = ty::Region<'tcx>> {\n         let tcx = self.tcx;\n-        let bounds = tcx.bound_item_bounds(def_id);\n+        let bounds = tcx.item_bounds(def_id);\n         trace!(\"{:#?}\", bounds.0);\n         bounds\n             .subst_iter(tcx, substs)"}, {"sha": "0ec6f481af1ffaf5642fabda3ce80cf9351921d1", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3d7677d91ad9ef0602af227b41831fa2c46e0547/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d7677d91ad9ef0602af227b41831fa2c46e0547/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=3d7677d91ad9ef0602af227b41831fa2c46e0547", "patch": "@@ -272,7 +272,7 @@ rustc_queries! {\n     /// ```\n     ///\n     /// Bounds from the parent (e.g. with nested impl trait) are not included.\n-    query item_bounds(key: DefId) -> &'tcx ty::List<ty::Predicate<'tcx>> {\n+    query item_bounds(key: DefId) -> ty::EarlyBinder<&'tcx ty::List<ty::Predicate<'tcx>>> {\n         desc { |tcx| \"elaborating item bounds for `{}`\", tcx.def_path_str(key) }\n     }\n "}, {"sha": "d0d1dcc584f1b4f8a6222c6b9574b4e8ad7e13b4", "filename": "compiler/rustc_middle/src/ty/util.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/3d7677d91ad9ef0602af227b41831fa2c46e0547/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d7677d91ad9ef0602af227b41831fa2c46e0547/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs?ref=3d7677d91ad9ef0602af227b41831fa2c46e0547", "patch": "@@ -659,13 +659,6 @@ impl<'tcx> TyCtxt<'tcx> {\n         ty::EarlyBinder(self.explicit_item_bounds(def_id))\n     }\n \n-    pub fn bound_item_bounds(\n-        self,\n-        def_id: DefId,\n-    ) -> ty::EarlyBinder<&'tcx ty::List<ty::Predicate<'tcx>>> {\n-        ty::EarlyBinder(self.item_bounds(def_id))\n-    }\n-\n     pub fn bound_impl_subject(self, def_id: DefId) -> ty::EarlyBinder<ty::ImplSubject<'tcx>> {\n         ty::EarlyBinder(self.impl_subject(def_id))\n     }"}, {"sha": "195bbe92f8b3ad2b24facfc07348960438c8d3f5", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3d7677d91ad9ef0602af227b41831fa2c46e0547/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d7677d91ad9ef0602af227b41831fa2c46e0547/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=3d7677d91ad9ef0602af227b41831fa2c46e0547", "patch": "@@ -1123,7 +1123,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                     Some((DefIdOrName::DefId(def_id), fn_sig.output(), fn_sig.inputs().map_bound(|inputs| &inputs[1..])))\n                 }\n                 ty::Alias(ty::Opaque, ty::AliasTy { def_id, substs, .. }) => {\n-                    self.tcx.bound_item_bounds(def_id).subst(self.tcx, substs).iter().find_map(|pred| {\n+                    self.tcx.item_bounds(def_id).subst(self.tcx, substs).iter().find_map(|pred| {\n                         if let ty::PredicateKind::Clause(ty::Clause::Projection(proj)) = pred.kind().skip_binder()\n                         && Some(proj.projection_ty.def_id) == self.tcx.lang_items().fn_once_output()\n                         // args tuple will always be substs[1]"}, {"sha": "fbc7eccedc88392d11f036ff43459322537836f6", "filename": "compiler/rustc_trait_selection/src/traits/project.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3d7677d91ad9ef0602af227b41831fa2c46e0547/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d7677d91ad9ef0602af227b41831fa2c46e0547/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs?ref=3d7677d91ad9ef0602af227b41831fa2c46e0547", "patch": "@@ -1375,7 +1375,7 @@ fn assemble_candidates_from_trait_def<'cx, 'tcx>(\n     // Check whether the self-type is itself a projection.\n     // If so, extract what we know from the trait and try to come up with a good answer.\n     let bounds = match *obligation.predicate.self_ty().kind() {\n-        ty::Alias(_, ref data) => tcx.bound_item_bounds(data.def_id).subst(tcx, data.substs),\n+        ty::Alias(_, ref data) => tcx.item_bounds(data.def_id).subst(tcx, data.substs),\n         ty::Infer(ty::TyVar(_)) => {\n             // If the self-type is an inference variable, then it MAY wind up\n             // being a projected type, so induce an ambiguity."}, {"sha": "82a59831be30aec5ff9791487cec5b72f6df7ca6", "filename": "compiler/rustc_trait_selection/src/traits/select/confirmation.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3d7677d91ad9ef0602af227b41831fa2c46e0547/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d7677d91ad9ef0602af227b41831fa2c46e0547/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs?ref=3d7677d91ad9ef0602af227b41831fa2c46e0547", "patch": "@@ -160,8 +160,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             _ => bug!(\"projection candidate for unexpected type: {:?}\", placeholder_self_ty),\n         };\n \n-        let candidate_predicate =\n-            tcx.bound_item_bounds(def_id).map_bound(|i| i[idx]).subst(tcx, substs);\n+        let candidate_predicate = tcx.item_bounds(def_id).map_bound(|i| i[idx]).subst(tcx, substs);\n         let candidate = candidate_predicate\n             .to_opt_poly_trait_pred()\n             .expect(\"projection candidate is not a trait predicate\")\n@@ -510,7 +509,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             // This maybe belongs in wf, but that can't (doesn't) handle\n             // higher-ranked things.\n             // Prevent, e.g., `dyn Iterator<Item = str>`.\n-            for bound in self.tcx().bound_item_bounds(assoc_type).transpose_iter() {\n+            for bound in self.tcx().item_bounds(assoc_type).transpose_iter() {\n                 let subst_bound =\n                     if defs.count() == 0 {\n                         bound.subst(tcx, trait_predicate.trait_ref.substs)"}, {"sha": "f90da95d51668b56cfbb582cbae2231ef6db371f", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3d7677d91ad9ef0602af227b41831fa2c46e0547/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d7677d91ad9ef0602af227b41831fa2c46e0547/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=3d7677d91ad9ef0602af227b41831fa2c46e0547", "patch": "@@ -1604,7 +1604,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 );\n             }\n         };\n-        let bounds = tcx.bound_item_bounds(def_id).subst(tcx, substs);\n+        let bounds = tcx.item_bounds(def_id).subst(tcx, substs);\n \n         // The bounds returned by `item_bounds` may contain duplicates after\n         // normalization, so try to deduplicate when possible to avoid"}, {"sha": "99fba4fe741a1c398c234a1d1a7b53b010221ab1", "filename": "src/tools/clippy/clippy_utils/src/ty.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3d7677d91ad9ef0602af227b41831fa2c46e0547/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d7677d91ad9ef0602af227b41831fa2c46e0547/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fty.rs?ref=3d7677d91ad9ef0602af227b41831fa2c46e0547", "patch": "@@ -647,8 +647,8 @@ pub fn ty_sig<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'tcx>) -> Option<ExprFnSig<'t\n             Some(ExprFnSig::Closure(decl, subs.as_closure().sig()))\n         },\n         ty::FnDef(id, subs) => Some(ExprFnSig::Sig(cx.tcx.bound_fn_sig(id).subst(cx.tcx, subs), Some(id))),\n-        ty::Alias(ty::Opaque, ty::AliasTy { def_id, .. }) => {\n-            sig_from_bounds(cx, ty, cx.tcx.item_bounds(def_id), cx.tcx.opt_parent(def_id))\n+        ty::Alias(ty::Opaque, ty::AliasTy { def_id, substs, .. }) => {\n+            sig_from_bounds(cx, ty, cx.tcx.item_bounds(def_id).subst(cx.tcx, substs), cx.tcx.opt_parent(def_id))\n         },\n         ty::FnPtr(sig) => Some(ExprFnSig::Sig(sig, None)),\n         ty::Dynamic(bounds, _, _) => {"}]}