{"sha": "473f916d836cc662c5bdbb0d40af9fb4678fab9e", "node_id": "C_kwDOAAsO6NoAKDQ3M2Y5MTZkODM2Y2M2NjJjNWJkYmIwZDQwYWY5ZmI0Njc4ZmFiOWU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-03T20:02:30Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-03T20:02:30Z"}, "message": "Auto merge of #111153 - Dylan-DPC:rollup-0pq0hh3, r=Dylan-DPC\n\nRollup of 11 pull requests\n\nSuccessful merges:\n\n - #107978 (Correctly convert an NT path to a Win32 path in `read_link`)\n - #110436 (Support loading version information from xz tarballs)\n - #110791 (Implement negative bounds for internal testing purposes)\n - #110874 (Adjust obligation cause code for `find_and_report_unsatisfied_index_impl`)\n - #110908 (resolve: One more attempt to simplify `module_children`)\n - #110943 (interpret: fail more gracefully on uninit unsized locals)\n - #111062 (Don't bail out early when checking invalid `repr` attr)\n - #111069 (remove pointless `FIXME` in `bootstrap::download`)\n - #111086 (Remove `MemEncoder`)\n - #111097 (Avoid ICEing miri on layout query cycles)\n - #111112 (Add some triagebot notifications for nnethercote.)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "481cdfed5453e25afbf102e9b4a420688711da61", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/481cdfed5453e25afbf102e9b4a420688711da61"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/473f916d836cc662c5bdbb0d40af9fb4678fab9e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/473f916d836cc662c5bdbb0d40af9fb4678fab9e", "html_url": "https://github.com/rust-lang/rust/commit/473f916d836cc662c5bdbb0d40af9fb4678fab9e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/473f916d836cc662c5bdbb0d40af9fb4678fab9e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9b99ff76b28605ad2e2c49e369721ae400e6a665", "url": "https://api.github.com/repos/rust-lang/rust/commits/9b99ff76b28605ad2e2c49e369721ae400e6a665", "html_url": "https://github.com/rust-lang/rust/commit/9b99ff76b28605ad2e2c49e369721ae400e6a665"}, {"sha": "b5bbe68fbb6da7f36314ef2f241914227ab72f0e", "url": "https://api.github.com/repos/rust-lang/rust/commits/b5bbe68fbb6da7f36314ef2f241914227ab72f0e", "html_url": "https://github.com/rust-lang/rust/commit/b5bbe68fbb6da7f36314ef2f241914227ab72f0e"}], "stats": {"total": 1425, "additions": 846, "deletions": 579}, "files": [{"sha": "0b0182472aad5bda0fbcbb67f29b10cce77ff8b4", "filename": "Cargo.lock", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/473f916d836cc662c5bdbb0d40af9fb4678fab9e/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/473f916d836cc662c5bdbb0d40af9fb4678fab9e/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=473f916d836cc662c5bdbb0d40af9fb4678fab9e", "patch": "@@ -297,6 +297,7 @@ dependencies = [\n  \"sha2\",\n  \"tar\",\n  \"toml\",\n+ \"xz2\",\n ]\n \n [[package]]\n@@ -2060,9 +2061,9 @@ dependencies = [\n \n [[package]]\n name = \"lzma-sys\"\n-version = \"0.1.16\"\n+version = \"0.1.20\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"f24f76ec44a8ac23a31915d6e326bca17ce88da03096f1ff194925dc714dac99\"\n+checksum = \"5fda04ab3764e6cde78b9974eec4f779acaba7c4e84b36eca3cf77c581b85d27\"\n dependencies = [\n  \"cc\",\n  \"libc\",\n@@ -4059,6 +4060,7 @@ dependencies = [\n  \"indexmap\",\n  \"rustc_macros\",\n  \"smallvec\",\n+ \"tempfile\",\n  \"thin-vec\",\n ]\n \n@@ -5658,9 +5660,9 @@ dependencies = [\n \n [[package]]\n name = \"xz2\"\n-version = \"0.1.6\"\n+version = \"0.1.7\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"c179869f34fc7c01830d3ce7ea2086bc3a07e0d35289b667d0a8bf910258926c\"\n+checksum = \"388c44dc09d76f1536602ead6d325eb532f5c122f17782bd57fb47baeeb767e2\"\n dependencies = [\n  \"lzma-sys\",\n ]"}, {"sha": "b5dba0713bfa07cc2b76d4023b6decfb7473badd", "filename": "compiler/rustc_ast/src/ast.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/473f916d836cc662c5bdbb0d40af9fb4678fab9e/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/473f916d836cc662c5bdbb0d40af9fb4678fab9e/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fast.rs?ref=473f916d836cc662c5bdbb0d40af9fb4678fab9e", "patch": "@@ -287,12 +287,20 @@ pub enum TraitBoundModifier {\n     /// No modifiers\n     None,\n \n+    /// `!Trait`\n+    Negative,\n+\n     /// `?Trait`\n     Maybe,\n \n     /// `~const Trait`\n     MaybeConst,\n \n+    /// `~const !Trait`\n+    //\n+    // This parses but will be rejected during AST validation.\n+    MaybeConstNegative,\n+\n     /// `~const ?Trait`\n     //\n     // This parses but will be rejected during AST validation.\n@@ -2446,6 +2454,16 @@ impl fmt::Debug for ImplPolarity {\n     }\n }\n \n+#[derive(Copy, Clone, PartialEq, Encodable, Decodable, HashStable_Generic)]\n+pub enum BoundPolarity {\n+    /// `Type: Trait`\n+    Positive,\n+    /// `Type: !Trait`\n+    Negative(Span),\n+    /// `Type: ?Trait`\n+    Maybe(Span),\n+}\n+\n #[derive(Clone, Encodable, Decodable, Debug)]\n pub enum FnRetTy {\n     /// Returns type is not specified."}, {"sha": "4100efb6eb330a2aceea99a53536c9b00f6cc189", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/473f916d836cc662c5bdbb0d40af9fb4678fab9e/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/473f916d836cc662c5bdbb0d40af9fb4678fab9e/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=473f916d836cc662c5bdbb0d40af9fb4678fab9e", "patch": "@@ -1368,13 +1368,17 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                         this.arena.alloc_from_iter(bounds.iter().filter_map(|bound| match bound {\n                             GenericBound::Trait(\n                                 ty,\n-                                TraitBoundModifier::None | TraitBoundModifier::MaybeConst,\n+                                TraitBoundModifier::None\n+                                | TraitBoundModifier::MaybeConst\n+                                | TraitBoundModifier::Negative,\n                             ) => Some(this.lower_poly_trait_ref(ty, itctx)),\n                             // `~const ?Bound` will cause an error during AST validation\n                             // anyways, so treat it like `?Bound` as compilation proceeds.\n                             GenericBound::Trait(\n                                 _,\n-                                TraitBoundModifier::Maybe | TraitBoundModifier::MaybeConstMaybe,\n+                                TraitBoundModifier::Maybe\n+                                | TraitBoundModifier::MaybeConstMaybe\n+                                | TraitBoundModifier::MaybeConstNegative,\n                             ) => None,\n                             GenericBound::Outlives(lifetime) => {\n                                 if lifetime_bound.is_none() {\n@@ -2421,11 +2425,20 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n             TraitBoundModifier::None => hir::TraitBoundModifier::None,\n             TraitBoundModifier::MaybeConst => hir::TraitBoundModifier::MaybeConst,\n \n+            TraitBoundModifier::Negative => {\n+                if self.tcx.features().negative_bounds {\n+                    hir::TraitBoundModifier::Negative\n+                } else {\n+                    hir::TraitBoundModifier::None\n+                }\n+            }\n+\n             // `MaybeConstMaybe` will cause an error during AST validation, but we need to pick a\n             // placeholder for compilation to proceed.\n             TraitBoundModifier::MaybeConstMaybe | TraitBoundModifier::Maybe => {\n                 hir::TraitBoundModifier::Maybe\n             }\n+            TraitBoundModifier::MaybeConstNegative => hir::TraitBoundModifier::MaybeConst,\n         }\n     }\n "}, {"sha": "2f413789e7704630e13c4ad316d104a3554d3d9c", "filename": "compiler/rustc_ast_passes/messages.ftl", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/473f916d836cc662c5bdbb0d40af9fb4678fab9e/compiler%2Frustc_ast_passes%2Fmessages.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/473f916d836cc662c5bdbb0d40af9fb4678fab9e/compiler%2Frustc_ast_passes%2Fmessages.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fmessages.ftl?ref=473f916d836cc662c5bdbb0d40af9fb4678fab9e", "patch": "@@ -206,7 +206,7 @@ ast_passes_tilde_const_disallowed = `~const` is not allowed here\n     .closure = closures cannot have `~const` trait bounds\n     .function = this function is not `const`, so it cannot have `~const` trait bounds\n \n-ast_passes_optional_const_exclusive = `~const` and `?` are mutually exclusive\n+ast_passes_optional_const_exclusive = `~const` and `{$modifier}` are mutually exclusive\n \n ast_passes_const_and_async = functions cannot be both `const` and `async`\n     .const = `const` because of this\n@@ -235,3 +235,9 @@ ast_passes_incompatible_features = `{$f1}` and `{$f2}` are incompatible, using t\n     .help = remove one of these features\n \n ast_passes_show_span = {$msg}\n+\n+ast_passes_negative_bound_not_supported =\n+    negative bounds are not supported\n+\n+ast_passes_constraint_on_negative_bound =\n+    associated type constraints not allowed on negative bounds"}, {"sha": "bf43bbdbbeebae89abbf4c687b25c046f17767f3", "filename": "compiler/rustc_ast_passes/src/ast_validation.rs", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/473f916d836cc662c5bdbb0d40af9fb4678fab9e/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/473f916d836cc662c5bdbb0d40af9fb4678fab9e/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs?ref=473f916d836cc662c5bdbb0d40af9fb4678fab9e", "patch": "@@ -1168,12 +1168,27 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n                     });\n                 }\n                 (_, TraitBoundModifier::MaybeConstMaybe) => {\n-                    self.err_handler().emit_err(errors::OptionalConstExclusive {span: bound.span()});\n+                    self.err_handler().emit_err(errors::OptionalConstExclusive {span: bound.span(), modifier: \"?\" });\n+                }\n+                (_, TraitBoundModifier::MaybeConstNegative) => {\n+                    self.err_handler().emit_err(errors::OptionalConstExclusive {span: bound.span(), modifier: \"!\" });\n                 }\n                 _ => {}\n             }\n         }\n \n+        // Negative trait bounds are not allowed to have associated constraints\n+        if let GenericBound::Trait(trait_ref, TraitBoundModifier::Negative) = bound\n+            && let Some(segment) = trait_ref.trait_ref.path.segments.last()\n+            && let Some(ast::GenericArgs::AngleBracketed(args)) = segment.args.as_deref()\n+        {\n+            for arg in &args.args {\n+                if let ast::AngleBracketedArg::Constraint(constraint) = arg {\n+                    self.err_handler().emit_err(errors::ConstraintOnNegativeBound { span: constraint.span });\n+                }\n+            }\n+        }\n+\n         visit::walk_param_bound(self, bound)\n     }\n "}, {"sha": "82fe2a21d0876910bcb72fc82e951cb8715a5bfd", "filename": "compiler/rustc_ast_passes/src/errors.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/473f916d836cc662c5bdbb0d40af9fb4678fab9e/compiler%2Frustc_ast_passes%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/473f916d836cc662c5bdbb0d40af9fb4678fab9e/compiler%2Frustc_ast_passes%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Ferrors.rs?ref=473f916d836cc662c5bdbb0d40af9fb4678fab9e", "patch": "@@ -567,6 +567,7 @@ pub enum TildeConstReason {\n pub struct OptionalConstExclusive {\n     #[primary_span]\n     pub span: Span,\n+    pub modifier: &'static str,\n }\n \n #[derive(Diagnostic)]\n@@ -693,3 +694,17 @@ pub struct ShowSpan {\n     pub span: Span,\n     pub msg: &'static str,\n }\n+\n+#[derive(Diagnostic)]\n+#[diag(ast_passes_negative_bound_not_supported)]\n+pub struct NegativeBoundUnsupported {\n+    #[primary_span]\n+    pub span: Span,\n+}\n+\n+#[derive(Diagnostic)]\n+#[diag(ast_passes_constraint_on_negative_bound)]\n+pub struct ConstraintOnNegativeBound {\n+    #[primary_span]\n+    pub span: Span,\n+}"}, {"sha": "a46fe9e898fc6bf5f33089091bc7f9110042d73d", "filename": "compiler/rustc_ast_passes/src/feature_gate.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/473f916d836cc662c5bdbb0d40af9fb4678fab9e/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/473f916d836cc662c5bdbb0d40af9fb4678fab9e/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs?ref=473f916d836cc662c5bdbb0d40af9fb4678fab9e", "patch": "@@ -603,6 +603,12 @@ pub fn check_crate(krate: &ast::Crate, sess: &Session) {\n     gate_all!(dyn_star, \"`dyn*` trait objects are experimental\");\n     gate_all!(const_closures, \"const closures are experimental\");\n \n+    if !visitor.features.negative_bounds {\n+        for &span in spans.get(&sym::negative_bounds).iter().copied().flatten() {\n+            sess.emit_err(errors::NegativeBoundUnsupported { span });\n+        }\n+    }\n+\n     // All uses of `gate_all!` below this point were added in #65742,\n     // and subsequently disabled (with the non-early gating readded).\n     // We emit an early future-incompatible warning for these."}, {"sha": "ae346510ccc8220340de68a5b95b9fb248c16f62", "filename": "compiler/rustc_ast_pretty/src/pprust/state.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/473f916d836cc662c5bdbb0d40af9fb4678fab9e/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/473f916d836cc662c5bdbb0d40af9fb4678fab9e/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs?ref=473f916d836cc662c5bdbb0d40af9fb4678fab9e", "patch": "@@ -1570,12 +1570,19 @@ impl<'a> State<'a> {\n                 GenericBound::Trait(tref, modifier) => {\n                     match modifier {\n                         TraitBoundModifier::None => {}\n+                        TraitBoundModifier::Negative => {\n+                            self.word(\"!\");\n+                        }\n                         TraitBoundModifier::Maybe => {\n                             self.word(\"?\");\n                         }\n                         TraitBoundModifier::MaybeConst => {\n                             self.word_space(\"~const\");\n                         }\n+                        TraitBoundModifier::MaybeConstNegative => {\n+                            self.word_space(\"~const\");\n+                            self.word(\"!\");\n+                        }\n                         TraitBoundModifier::MaybeConstMaybe => {\n                             self.word_space(\"~const\");\n                             self.word(\"?\");"}, {"sha": "c3cc17c255b465435c4ef28a6350bea554b7733c", "filename": "compiler/rustc_codegen_ssa/src/lib.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/473f916d836cc662c5bdbb0d40af9fb4678fab9e/compiler%2Frustc_codegen_ssa%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/473f916d836cc662c5bdbb0d40af9fb4678fab9e/compiler%2Frustc_codegen_ssa%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Flib.rs?ref=473f916d836cc662c5bdbb0d40af9fb4678fab9e", "patch": "@@ -31,14 +31,15 @@ use rustc_middle::dep_graph::WorkProduct;\n use rustc_middle::middle::dependency_format::Dependencies;\n use rustc_middle::middle::exported_symbols::SymbolExportKind;\n use rustc_middle::ty::query::{ExternProviders, Providers};\n-use rustc_serialize::opaque::{MemDecoder, MemEncoder};\n+use rustc_serialize::opaque::{FileEncoder, MemDecoder};\n use rustc_serialize::{Decodable, Decoder, Encodable, Encoder};\n use rustc_session::config::{CrateType, OutputFilenames, OutputType, RUST_CGU_EXT};\n use rustc_session::cstore::{self, CrateSource};\n use rustc_session::utils::NativeLibKind;\n use rustc_span::symbol::Symbol;\n use rustc_span::DebuggerVisualizerFile;\n use std::collections::BTreeSet;\n+use std::io;\n use std::path::{Path, PathBuf};\n \n pub mod back;\n@@ -215,8 +216,11 @@ const RLINK_MAGIC: &[u8] = b\"rustlink\";\n const RUSTC_VERSION: Option<&str> = option_env!(\"CFG_VERSION\");\n \n impl CodegenResults {\n-    pub fn serialize_rlink(codegen_results: &CodegenResults) -> Vec<u8> {\n-        let mut encoder = MemEncoder::new();\n+    pub fn serialize_rlink(\n+        rlink_file: &Path,\n+        codegen_results: &CodegenResults,\n+    ) -> Result<usize, io::Error> {\n+        let mut encoder = FileEncoder::new(rlink_file)?;\n         encoder.emit_raw_bytes(RLINK_MAGIC);\n         // `emit_raw_bytes` is used to make sure that the version representation does not depend on\n         // Encoder's inner representation of `u32`."}, {"sha": "b10f2e9f862dbc513714a580c0e08b157d1c3c91", "filename": "compiler/rustc_const_eval/src/const_eval/valtrees.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/473f916d836cc662c5bdbb0d40af9fb4678fab9e/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fvaltrees.rs", "raw_url": "https://github.com/rust-lang/rust/raw/473f916d836cc662c5bdbb0d40af9fb4678fab9e/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fvaltrees.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fvaltrees.rs?ref=473f916d836cc662c5bdbb0d40af9fb4678fab9e", "patch": "@@ -337,7 +337,7 @@ fn valtree_into_mplace<'tcx>(\n \n     match ty.kind() {\n         ty::FnDef(_, _) => {\n-            ecx.write_immediate(Immediate::Uninit, &place.into()).unwrap();\n+            // Zero-sized type, nothing to do.\n         }\n         ty::Bool | ty::Int(_) | ty::Uint(_) | ty::Float(_) | ty::Char => {\n             let scalar_int = valtree.unwrap_leaf();"}, {"sha": "a7f66071fe2bbd07a06e9144f21a8196a9d6d1c3", "filename": "compiler/rustc_const_eval/src/interpret/operand.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/473f916d836cc662c5bdbb0d40af9fb4678fab9e/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/473f916d836cc662c5bdbb0d40af9fb4678fab9e/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperand.rs?ref=473f916d836cc662c5bdbb0d40af9fb4678fab9e", "patch": "@@ -245,6 +245,12 @@ impl<'tcx, Prov: Provenance> ImmTy<'tcx, Prov> {\n impl<'tcx, Prov: Provenance> OpTy<'tcx, Prov> {\n     pub fn len(&self, cx: &impl HasDataLayout) -> InterpResult<'tcx, u64> {\n         if self.layout.is_unsized() {\n+            if matches!(self.op, Operand::Immediate(Immediate::Uninit)) {\n+                // Uninit unsized places shouldn't occur. In the interpreter we have them\n+                // temporarily for unsized arguments before their value is put in; in ConstProp they\n+                // remain uninit and this code can actually be reached.\n+                throw_inval!(UninitUnsizedLocal);\n+            }\n             // There are no unsized immediates.\n             self.assert_mem_place().len(cx)\n         } else {"}, {"sha": "294ed18a239f57194f8ad4ad152b6aaa91647917", "filename": "compiler/rustc_feature/src/active.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/473f916d836cc662c5bdbb0d40af9fb4678fab9e/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/473f916d836cc662c5bdbb0d40af9fb4678fab9e/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Factive.rs?ref=473f916d836cc662c5bdbb0d40af9fb4678fab9e", "patch": "@@ -164,6 +164,8 @@ declare_features! (\n     (active, link_cfg, \"1.14.0\", None, None),\n     /// Allows the `multiple_supertrait_upcastable` lint.\n     (active, multiple_supertrait_upcastable, \"1.69.0\", None, None),\n+    /// Allow negative trait bounds. This is an internal-only feature for testing the trait solver!\n+    (incomplete, negative_bounds, \"CURRENT_RUSTC_VERSION\", None, None),\n     /// Allows using `#[omit_gdb_pretty_printer_section]`.\n     (active, omit_gdb_pretty_printer_section, \"1.5.0\", None, None),\n     /// Allows using `#[prelude_import]` on glob `use` items."}, {"sha": "38cd5865cc3266218a16dd82fbaf526ef1b153a5", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/473f916d836cc662c5bdbb0d40af9fb4678fab9e/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/473f916d836cc662c5bdbb0d40af9fb4678fab9e/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=473f916d836cc662c5bdbb0d40af9fb4678fab9e", "patch": "@@ -435,6 +435,7 @@ pub enum GenericArgsParentheses {\n #[derive(Copy, Clone, PartialEq, Eq, Hash, Debug, HashStable_Generic)]\n pub enum TraitBoundModifier {\n     None,\n+    Negative,\n     Maybe,\n     MaybeConst,\n }"}, {"sha": "a6114e27030d35bc5e87b528c5647e0258752d40", "filename": "compiler/rustc_hir_analysis/src/astconv/mod.rs", "status": "modified", "additions": 29, "deletions": 5, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/473f916d836cc662c5bdbb0d40af9fb4678fab9e/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/473f916d836cc662c5bdbb0d40af9fb4678fab9e/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs?ref=473f916d836cc662c5bdbb0d40af9fb4678fab9e", "patch": "@@ -665,6 +665,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         span: Span,\n         binding_span: Option<Span>,\n         constness: ty::BoundConstness,\n+        polarity: ty::ImplPolarity,\n         bounds: &mut Bounds<'tcx>,\n         speculative: bool,\n         trait_ref_span: Span,\n@@ -696,10 +697,20 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n             ty::Binder::bind_with_vars(tcx.mk_trait_ref(trait_def_id, substs), bound_vars);\n \n         debug!(?poly_trait_ref, ?assoc_bindings);\n-        bounds.push_trait_bound(tcx, poly_trait_ref, span, constness);\n+        bounds.push_trait_bound(tcx, poly_trait_ref, span, constness, polarity);\n \n         let mut dup_bindings = FxHashMap::default();\n         for binding in &assoc_bindings {\n+            // Don't register additional associated type bounds for negative bounds,\n+            // since we should have emitten an error for them earlier, and they will\n+            // not be well-formed!\n+            if polarity == ty::ImplPolarity::Negative {\n+                self.tcx()\n+                    .sess\n+                    .delay_span_bug(binding.span, \"negative trait bounds should not have bindings\");\n+                continue;\n+            }\n+\n             // Specify type to assert that error was already reported in `Err` case.\n             let _: Result<_, ErrorGuaranteed> = self.add_predicates_for_ast_type_binding(\n                 hir_id,\n@@ -711,6 +722,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                 binding_span.unwrap_or(binding.span),\n                 constness,\n                 only_self_bounds,\n+                polarity,\n             );\n             // Okay to ignore `Err` because of `ErrorGuaranteed` (see above).\n         }\n@@ -743,6 +755,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         trait_ref: &hir::TraitRef<'_>,\n         span: Span,\n         constness: ty::BoundConstness,\n+        polarity: ty::ImplPolarity,\n         self_ty: Ty<'tcx>,\n         bounds: &mut Bounds<'tcx>,\n         speculative: bool,\n@@ -764,6 +777,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n             span,\n             binding_span,\n             constness,\n+            polarity,\n             bounds,\n             speculative,\n             trait_ref_span,\n@@ -799,6 +813,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n             span,\n             binding_span,\n             constness,\n+            ty::ImplPolarity::Positive,\n             bounds,\n             speculative,\n             trait_ref_span,\n@@ -961,16 +976,23 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         for ast_bound in ast_bounds {\n             match ast_bound {\n                 hir::GenericBound::Trait(poly_trait_ref, modifier) => {\n-                    let constness = match modifier {\n-                        hir::TraitBoundModifier::MaybeConst => ty::BoundConstness::ConstIfConst,\n-                        hir::TraitBoundModifier::None => ty::BoundConstness::NotConst,\n+                    let (constness, polarity) = match modifier {\n+                        hir::TraitBoundModifier::MaybeConst => {\n+                            (ty::BoundConstness::ConstIfConst, ty::ImplPolarity::Positive)\n+                        }\n+                        hir::TraitBoundModifier::None => {\n+                            (ty::BoundConstness::NotConst, ty::ImplPolarity::Positive)\n+                        }\n+                        hir::TraitBoundModifier::Negative => {\n+                            (ty::BoundConstness::NotConst, ty::ImplPolarity::Negative)\n+                        }\n                         hir::TraitBoundModifier::Maybe => continue,\n                     };\n-\n                     let _ = self.instantiate_poly_trait_ref(\n                         &poly_trait_ref.trait_ref,\n                         poly_trait_ref.span,\n                         constness,\n+                        polarity,\n                         param_ty,\n                         bounds,\n                         false,\n@@ -1088,6 +1110,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         path_span: Span,\n         constness: ty::BoundConstness,\n         only_self_bounds: OnlySelfBounds,\n+        polarity: ty::ImplPolarity,\n     ) -> Result<(), ErrorGuaranteed> {\n         // Given something like `U: SomeTrait<T = X>`, we want to produce a\n         // predicate like `<U as SomeTrait>::T = X`. This is somewhat\n@@ -1438,6 +1461,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                 &trait_bound.trait_ref,\n                 trait_bound.span,\n                 ty::BoundConstness::NotConst,\n+                ty::ImplPolarity::Positive,\n                 dummy_self,\n                 &mut bounds,\n                 false,"}, {"sha": "7156fea8f896c6c3143e54996730f3e904d11aca", "filename": "compiler/rustc_hir_analysis/src/bounds.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/473f916d836cc662c5bdbb0d40af9fb4678fab9e/compiler%2Frustc_hir_analysis%2Fsrc%2Fbounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/473f916d836cc662c5bdbb0d40af9fb4678fab9e/compiler%2Frustc_hir_analysis%2Fsrc%2Fbounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fbounds.rs?ref=473f916d836cc662c5bdbb0d40af9fb4678fab9e", "patch": "@@ -42,8 +42,14 @@ impl<'tcx> Bounds<'tcx> {\n         trait_ref: ty::PolyTraitRef<'tcx>,\n         span: Span,\n         constness: ty::BoundConstness,\n+        polarity: ty::ImplPolarity,\n     ) {\n-        self.predicates.push((trait_ref.with_constness(constness).to_predicate(tcx), span));\n+        self.predicates.push((\n+            trait_ref\n+                .map_bound(|trait_ref| ty::TraitPredicate { trait_ref, constness, polarity })\n+                .to_predicate(tcx),\n+            span,\n+        ));\n     }\n \n     pub fn push_projection_bound("}, {"sha": "3fe34f23aef421023b76408fa3c5be48c2dce625", "filename": "compiler/rustc_hir_analysis/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/473f916d836cc662c5bdbb0d40af9fb4678fab9e/compiler%2Frustc_hir_analysis%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/473f916d836cc662c5bdbb0d40af9fb4678fab9e/compiler%2Frustc_hir_analysis%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Flib.rs?ref=473f916d836cc662c5bdbb0d40af9fb4678fab9e", "patch": "@@ -528,6 +528,7 @@ pub fn hir_trait_to_predicates<'tcx>(\n         hir_trait,\n         DUMMY_SP,\n         ty::BoundConstness::NotConst,\n+        ty::ImplPolarity::Positive,\n         self_ty,\n         &mut bounds,\n         true,"}, {"sha": "047d8a82bfc3f63a7ce776989e450888a0bd2a2b", "filename": "compiler/rustc_hir_typeck/src/expr.rs", "status": "modified", "additions": 16, "deletions": 9, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/473f916d836cc662c5bdbb0d40af9fb4678fab9e/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/473f916d836cc662c5bdbb0d40af9fb4678fab9e/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr.rs?ref=473f916d836cc662c5bdbb0d40af9fb4678fab9e", "patch": "@@ -2822,7 +2822,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     // but has nested obligations which are unsatisfied.\n                     for (base_t, _) in self.autoderef(base.span, base_t).silence_errors() {\n                         if let Some((_, index_ty, element_ty)) =\n-                            self.find_and_report_unsatisfied_index_impl(expr.hir_id, base, base_t)\n+                            self.find_and_report_unsatisfied_index_impl(base, base_t)\n                         {\n                             self.demand_coerce(idx, idx_t, index_ty, None, AllowTwoPhase::No);\n                             return element_ty;\n@@ -2881,7 +2881,6 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     /// predicates cause this to be, so that the user can add them to fix their code.\n     fn find_and_report_unsatisfied_index_impl(\n         &self,\n-        index_expr_hir_id: HirId,\n         base_expr: &hir::Expr<'_>,\n         base_ty: Ty<'tcx>,\n     ) -> Option<(ErrorGuaranteed, Ty<'tcx>, Ty<'tcx>)> {\n@@ -2914,13 +2913,21 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             // in the first place.\n             ocx.register_obligations(traits::predicates_for_generics(\n                 |idx, span| {\n-                    traits::ObligationCause::new(\n-                        base_expr.span,\n-                        self.body_id,\n-                        if span.is_dummy() {\n-                            traits::ExprItemObligation(impl_def_id, index_expr_hir_id, idx)\n-                        } else {\n-                            traits::ExprBindingObligation(impl_def_id, span, index_expr_hir_id, idx)\n+                    cause.clone().derived_cause(\n+                        ty::Binder::dummy(ty::TraitPredicate {\n+                            trait_ref: impl_trait_ref,\n+                            polarity: ty::ImplPolarity::Positive,\n+                            constness: ty::BoundConstness::NotConst,\n+                        }),\n+                        |derived| {\n+                            traits::ImplDerivedObligation(Box::new(\n+                                traits::ImplDerivedObligationCause {\n+                                    derived,\n+                                    impl_or_alias_def_id: impl_def_id,\n+                                    impl_def_predicate_index: Some(idx),\n+                                    span,\n+                                },\n+                            ))\n                         },\n                     )\n                 },"}, {"sha": "f54e5e5e56ffc007defd6c315b1ef2ea1224a8c4", "filename": "compiler/rustc_infer/src/traits/util.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/473f916d836cc662c5bdbb0d40af9fb4678fab9e/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/473f916d836cc662c5bdbb0d40af9fb4678fab9e/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Futil.rs?ref=473f916d836cc662c5bdbb0d40af9fb4678fab9e", "patch": "@@ -200,6 +200,10 @@ impl<'tcx, O: Elaboratable<'tcx>> Elaborator<'tcx, O> {\n         let bound_predicate = elaboratable.predicate().kind();\n         match bound_predicate.skip_binder() {\n             ty::PredicateKind::Clause(ty::Clause::Trait(data)) => {\n+                // Negative trait bounds do not imply any supertrait bounds\n+                if data.polarity == ty::ImplPolarity::Negative {\n+                    return;\n+                }\n                 // Get predicates implied by the trait, or only super predicates if we only care about self predicates.\n                 let predicates = if self.only_self {\n                     tcx.super_predicates_of(data.def_id())"}, {"sha": "6483d51a0b9a99b9ec3b338d1bed6f7ec0bb32e4", "filename": "compiler/rustc_interface/src/queries.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/473f916d836cc662c5bdbb0d40af9fb4678fab9e/compiler%2Frustc_interface%2Fsrc%2Fqueries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/473f916d836cc662c5bdbb0d40af9fb4678fab9e/compiler%2Frustc_interface%2Fsrc%2Fqueries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fqueries.rs?ref=473f916d836cc662c5bdbb0d40af9fb4678fab9e", "patch": "@@ -368,9 +368,8 @@ impl Linker {\n         }\n \n         if sess.opts.unstable_opts.no_link {\n-            let encoded = CodegenResults::serialize_rlink(&codegen_results);\n             let rlink_file = self.prepare_outputs.with_extension(config::RLINK_EXT);\n-            std::fs::write(&rlink_file, encoded)\n+            CodegenResults::serialize_rlink(&rlink_file, &codegen_results)\n                 .map_err(|error| sess.emit_fatal(FailedWritingFile { path: &rlink_file, error }))?;\n             return Ok(());\n         }"}, {"sha": "3253d0a90574455512b9d61b7e99847057d1a1b9", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/473f916d836cc662c5bdbb0d40af9fb4678fab9e/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/473f916d836cc662c5bdbb0d40af9fb4678fab9e/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=473f916d836cc662c5bdbb0d40af9fb4678fab9e", "patch": "@@ -1364,9 +1364,9 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n         record!(self.tables.params_in_repr[def_id] <- params_in_repr);\n \n         if adt_def.is_enum() {\n-            let module_children = tcx.module_children_non_reexports(local_def_id);\n+            let module_children = tcx.module_children_local(local_def_id);\n             record_array!(self.tables.module_children_non_reexports[def_id] <-\n-                module_children.iter().map(|def_id| def_id.local_def_index));\n+                module_children.iter().map(|child| child.res.def_id().index));\n         } else {\n             // For non-enum, there is only one variant, and its def_id is the adt's.\n             debug_assert_eq!(adt_def.variants().len(), 1);\n@@ -1412,12 +1412,14 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n             // Encode this here because we don't do it in encode_def_ids.\n             record!(self.tables.expn_that_defined[def_id] <- tcx.expn_that_defined(local_def_id));\n         } else {\n-            let non_reexports = tcx.module_children_non_reexports(local_def_id);\n+            let module_children = tcx.module_children_local(local_def_id);\n+\n             record_array!(self.tables.module_children_non_reexports[def_id] <-\n-                non_reexports.iter().map(|def_id| def_id.local_def_index));\n+                module_children.iter().filter(|child| child.reexport_chain.is_empty())\n+                    .map(|child| child.res.def_id().index));\n \n             record_defaulted_array!(self.tables.module_children_reexports[def_id] <-\n-                tcx.module_children_reexports(local_def_id));\n+                module_children.iter().filter(|child| !child.reexport_chain.is_empty()));\n         }\n     }\n \n@@ -1676,9 +1678,9 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n             hir::ItemKind::Trait(..) => {\n                 record!(self.tables.trait_def[def_id] <- self.tcx.trait_def(def_id));\n \n-                let module_children = tcx.module_children_non_reexports(item.owner_id.def_id);\n+                let module_children = tcx.module_children_local(item.owner_id.def_id);\n                 record_array!(self.tables.module_children_non_reexports[def_id] <-\n-                    module_children.iter().map(|def_id| def_id.local_def_index));\n+                    module_children.iter().map(|child| child.res.def_id().index));\n \n                 let associated_item_def_ids = self.tcx.associated_item_def_ids(def_id);\n                 record_associated_item_def_ids(self, associated_item_def_ids);"}, {"sha": "84f6b7f934dc325bf3101c8a8bef35a8e7dea6c3", "filename": "compiler/rustc_metadata/src/rmeta/mod.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/473f916d836cc662c5bdbb0d40af9fb4678fab9e/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/473f916d836cc662c5bdbb0d40af9fb4678fab9e/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs?ref=473f916d836cc662c5bdbb0d40af9fb4678fab9e", "patch": "@@ -357,10 +357,16 @@ define_tables! {\n     associated_types_for_impl_traits_in_associated_fn: Table<DefIndex, LazyArray<DefId>>,\n     opt_rpitit_info: Table<DefIndex, Option<LazyValue<ty::ImplTraitInTraitData>>>,\n     unused_generic_params: Table<DefIndex, UnusedGenericParams>,\n+    // Reexported names are not associated with individual `DefId`s,\n+    // e.g. a glob import can introduce a lot of names, all with the same `DefId`.\n+    // That's why the encoded list needs to contain `ModChild` structures describing all the names\n+    // individually instead of `DefId`s.\n     module_children_reexports: Table<DefIndex, LazyArray<ModChild>>,\n \n - optional:\n     attributes: Table<DefIndex, LazyArray<ast::Attribute>>,\n+    // For non-reexported names in a module every name is associated with a separate `DefId`,\n+    // so we can take their names, visibilities etc from other encoded tables.\n     module_children_non_reexports: Table<DefIndex, LazyArray<DefIndex>>,\n     associated_item_or_field_def_ids: Table<DefIndex, LazyArray<DefIndex>>,\n     opt_def_kind: Table<DefIndex, DefKind>,"}, {"sha": "c6bbf2ef0cdb5bfdf986e7849e4e496149d60ba6", "filename": "compiler/rustc_middle/messages.ftl", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/473f916d836cc662c5bdbb0d40af9fb4678fab9e/compiler%2Frustc_middle%2Fmessages.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/473f916d836cc662c5bdbb0d40af9fb4678fab9e/compiler%2Frustc_middle%2Fmessages.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fmessages.ftl?ref=473f916d836cc662c5bdbb0d40af9fb4678fab9e", "patch": "@@ -32,6 +32,9 @@ middle_values_too_big =\n middle_cannot_be_normalized =\n     unable to determine layout for `{$ty}` because `{$failure_ty}` cannot be normalized\n \n+middle_cycle =\n+    a cycle occurred during layout computation\n+\n middle_strict_coherence_needs_negative_coherence =\n     to use `strict_coherence` on this trait, the `with_negative_coherence` feature must be enabled\n     .label = due to this attribute"}, {"sha": "e45284ca506554ce1b282595cc7f90b6a1729968", "filename": "compiler/rustc_middle/src/mir/interpret/error.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/473f916d836cc662c5bdbb0d40af9fb4678fab9e/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/473f916d836cc662c5bdbb0d40af9fb4678fab9e/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Ferror.rs?ref=473f916d836cc662c5bdbb0d40af9fb4678fab9e", "patch": "@@ -134,6 +134,9 @@ pub enum InvalidProgramInfo<'tcx> {\n     FnAbiAdjustForForeignAbi(call::AdjustForForeignAbiError),\n     /// SizeOf of unsized type was requested.\n     SizeOfUnsizedType(Ty<'tcx>),\n+    /// An unsized local was accessed without having been initialized.\n+    /// This is not meaningful as we can't even have backing memory for such locals.\n+    UninitUnsizedLocal,\n }\n \n impl fmt::Display for InvalidProgramInfo<'_> {\n@@ -150,6 +153,7 @@ impl fmt::Display for InvalidProgramInfo<'_> {\n             Layout(ref err) => write!(f, \"{err}\"),\n             FnAbiAdjustForForeignAbi(ref err) => write!(f, \"{err}\"),\n             SizeOfUnsizedType(ty) => write!(f, \"size_of called on unsized type `{ty}`\"),\n+            UninitUnsizedLocal => write!(f, \"unsized local is used while uninitialized\"),\n         }\n     }\n }"}, {"sha": "bf78b379986d8768f3eeb67795b9365bcc41221a", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 6, "deletions": 15, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/473f916d836cc662c5bdbb0d40af9fb4678fab9e/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/473f916d836cc662c5bdbb0d40af9fb4678fab9e/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=473f916d836cc662c5bdbb0d40af9fb4678fab9e", "patch": "@@ -2414,26 +2414,17 @@ impl<'tcx> TyCtxt<'tcx> {\n         }\n     }\n \n-    /// Named module children from all items except `use` and `extern crate` imports.\n-    ///\n-    /// In addition to regular items this list also includes struct or variant constructors, and\n+    /// Named module children from all kinds of items, including imports.\n+    /// In addition to regular items this list also includes struct and variant constructors, and\n     /// items inside `extern {}` blocks because all of them introduce names into parent module.\n-    /// For non-reexported children every such name is associated with a separate `DefId`.\n     ///\n     /// Module here is understood in name resolution sense - it can be a `mod` item,\n     /// or a crate root, or an enum, or a trait.\n-    pub fn module_children_non_reexports(self, def_id: LocalDefId) -> &'tcx [LocalDefId] {\n-        self.resolutions(()).module_children_non_reexports.get(&def_id).map_or(&[], |v| &v[..])\n-    }\n-\n-    /// Named module children from `use` and `extern crate` imports.\n     ///\n-    /// Reexported names are not associated with individual `DefId`s,\n-    /// e.g. a glob import can introduce a lot of names, all with the same `DefId`.\n-    /// That's why the list needs to contain `ModChild` structures describing all the names\n-    /// individually instead of `DefId`s.\n-    pub fn module_children_reexports(self, def_id: LocalDefId) -> &'tcx [ModChild] {\n-        self.resolutions(()).module_children_reexports.get(&def_id).map_or(&[], |v| &v[..])\n+    /// This is not a query, making it a query causes perf regressions\n+    /// (probably due to hashing spans in `ModChild`ren).\n+    pub fn module_children_local(self, def_id: LocalDefId) -> &'tcx [ModChild] {\n+        self.resolutions(()).module_children.get(&def_id).map_or(&[], |v| &v[..])\n     }\n }\n "}, {"sha": "f2a2e67cf82dcbda5304da72f36f586540cddf13", "filename": "compiler/rustc_middle/src/ty/layout.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/473f916d836cc662c5bdbb0d40af9fb4678fab9e/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/473f916d836cc662c5bdbb0d40af9fb4678fab9e/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs?ref=473f916d836cc662c5bdbb0d40af9fb4678fab9e", "patch": "@@ -210,6 +210,7 @@ pub enum LayoutError<'tcx> {\n     Unknown(Ty<'tcx>),\n     SizeOverflow(Ty<'tcx>),\n     NormalizationFailure(Ty<'tcx>, NormalizationError<'tcx>),\n+    Cycle,\n }\n \n impl IntoDiagnostic<'_, !> for LayoutError<'_> {\n@@ -230,6 +231,9 @@ impl IntoDiagnostic<'_, !> for LayoutError<'_> {\n                 diag.set_arg(\"failure_ty\", e.get_type_for_failure());\n                 diag.set_primary_message(fluent::middle_cannot_be_normalized);\n             }\n+            LayoutError::Cycle => {\n+                diag.set_primary_message(fluent::middle_cycle);\n+            }\n         }\n         diag\n     }\n@@ -250,6 +254,7 @@ impl<'tcx> fmt::Display for LayoutError<'tcx> {\n                 t,\n                 e.get_type_for_failure()\n             ),\n+            LayoutError::Cycle => write!(f, \"a cycle occurred during layout computation\"),\n         }\n     }\n }"}, {"sha": "8986defacc7ba30699b8e55d44616ac262f26883", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/473f916d836cc662c5bdbb0d40af9fb4678fab9e/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/473f916d836cc662c5bdbb0d40af9fb4678fab9e/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=473f916d836cc662c5bdbb0d40af9fb4678fab9e", "patch": "@@ -165,8 +165,7 @@ pub struct ResolverGlobalCtxt {\n     pub effective_visibilities: EffectiveVisibilities,\n     pub extern_crate_map: FxHashMap<LocalDefId, CrateNum>,\n     pub maybe_unused_trait_imports: FxIndexSet<LocalDefId>,\n-    pub module_children_non_reexports: LocalDefIdMap<Vec<LocalDefId>>,\n-    pub module_children_reexports: LocalDefIdMap<Vec<ModChild>>,\n+    pub module_children: LocalDefIdMap<Vec<ModChild>>,\n     pub glob_map: FxHashMap<LocalDefId, FxHashSet<Symbol>>,\n     pub main_def: Option<MainDefinition>,\n     pub trait_impls: FxIndexMap<DefId, Vec<LocalDefId>>,"}, {"sha": "6ac9f95045069d4bc58027a6c864da71b8436f59", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/473f916d836cc662c5bdbb0d40af9fb4678fab9e/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/473f916d836cc662c5bdbb0d40af9fb4678fab9e/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=473f916d836cc662c5bdbb0d40af9fb4678fab9e", "patch": "@@ -2816,6 +2816,9 @@ define_print_and_forward_display! {\n         if let ty::BoundConstness::ConstIfConst = self.constness && cx.tcx().features().const_trait_impl {\n             p!(\"~const \");\n         }\n+        if let ty::ImplPolarity::Negative = self.polarity {\n+            p!(\"!\");\n+        }\n         p!(print(self.trait_ref.print_only_trait_path()))\n     }\n "}, {"sha": "c62c33d4dfc1894633378deca54b7aecb65adeff", "filename": "compiler/rustc_middle/src/values.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/473f916d836cc662c5bdbb0d40af9fb4678fab9e/compiler%2Frustc_middle%2Fsrc%2Fvalues.rs", "raw_url": "https://github.com/rust-lang/rust/raw/473f916d836cc662c5bdbb0d40af9fb4678fab9e/compiler%2Frustc_middle%2Fsrc%2Fvalues.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fvalues.rs?ref=473f916d836cc662c5bdbb0d40af9fb4678fab9e", "patch": "@@ -106,6 +106,12 @@ impl<'tcx> Value<TyCtxt<'tcx>, DepKind> for ty::EarlyBinder<ty::Binder<'_, ty::F\n     }\n }\n \n+impl<'tcx, T> Value<TyCtxt<'tcx>, DepKind> for Result<T, ty::layout::LayoutError<'_>> {\n+    fn from_cycle_error(_tcx: TyCtxt<'tcx>, _cycle: &[QueryInfo<DepKind>]) -> Self {\n+        Err(ty::layout::LayoutError::Cycle)\n+    }\n+}\n+\n // item_and_field_ids should form a cycle where each field contains the\n // type in the next element in the list\n pub fn recursive_type_error("}, {"sha": "cd296dca133f544587d334e5831e98540b7a17ee", "filename": "compiler/rustc_parse/messages.ftl", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/473f916d836cc662c5bdbb0d40af9fb4678fab9e/compiler%2Frustc_parse%2Fmessages.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/473f916d836cc662c5bdbb0d40af9fb4678fab9e/compiler%2Frustc_parse%2Fmessages.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fmessages.ftl?ref=473f916d836cc662c5bdbb0d40af9fb4678fab9e", "patch": "@@ -615,13 +615,6 @@ parse_invalid_dyn_keyword = invalid `dyn` keyword\n     .help = `dyn` is only needed at the start of a trait `+`-separated list\n     .suggestion = remove this keyword\n \n-parse_negative_bounds_not_supported = negative bounds are not supported\n-    .label = negative bounds are not supported\n-    .suggestion = {$num_bounds ->\n-            [one] remove the bound\n-           *[other] remove the bounds\n-        }\n-\n parse_help_set_edition_cargo = set `edition = \"{$edition}\"` in `Cargo.toml`\n parse_help_set_edition_standalone = pass `--edition {$edition}` to `rustc`\n parse_note_edition_guide = for more on editions, read https://doc.rust-lang.org/edition-guide\n@@ -772,7 +765,8 @@ parse_assoc_lifetime = associated lifetimes are not supported\n \n parse_tilde_const_lifetime = `~const` may only modify trait bounds, not lifetime bounds\n \n-parse_maybe_lifetime = `?` may only modify trait bounds, not lifetime bounds\n+parse_modifier_lifetime = `{$sigil}` may only modify trait bounds, not lifetime bounds\n+    .suggestion = remove the `{$sigil}`\n \n parse_parenthesized_lifetime = parenthesized lifetime bounds are not supported\n     .suggestion = remove the parentheses"}, {"sha": "010a13aefa42033be37e5fc610090a9d9153e14a", "filename": "compiler/rustc_parse/src/errors.rs", "status": "modified", "additions": 4, "deletions": 27, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/473f916d836cc662c5bdbb0d40af9fb4678fab9e/compiler%2Frustc_parse%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/473f916d836cc662c5bdbb0d40af9fb4678fab9e/compiler%2Frustc_parse%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Ferrors.rs?ref=473f916d836cc662c5bdbb0d40af9fb4678fab9e", "patch": "@@ -2280,31 +2280,6 @@ pub(crate) struct InvalidDynKeyword {\n     pub span: Span,\n }\n \n-#[derive(Diagnostic)]\n-#[diag(parse_negative_bounds_not_supported)]\n-pub(crate) struct NegativeBoundsNotSupported {\n-    #[primary_span]\n-    pub negative_bounds: Vec<Span>,\n-    #[label]\n-    pub last_span: Span,\n-    #[subdiagnostic]\n-    pub sub: Option<NegativeBoundsNotSupportedSugg>,\n-}\n-\n-#[derive(Subdiagnostic)]\n-#[suggestion(\n-    parse_suggestion,\n-    style = \"tool-only\",\n-    code = \"{fixed}\",\n-    applicability = \"machine-applicable\"\n-)]\n-pub(crate) struct NegativeBoundsNotSupportedSugg {\n-    #[primary_span]\n-    pub bound_list: Span,\n-    pub num_bounds: usize,\n-    pub fixed: String,\n-}\n-\n #[derive(Subdiagnostic)]\n pub enum HelpUseLatestEdition {\n     #[help(parse_help_set_edition_cargo)]\n@@ -2412,10 +2387,12 @@ pub(crate) struct TildeConstLifetime {\n }\n \n #[derive(Diagnostic)]\n-#[diag(parse_maybe_lifetime)]\n-pub(crate) struct MaybeLifetime {\n+#[diag(parse_modifier_lifetime)]\n+pub(crate) struct ModifierLifetime {\n     #[primary_span]\n+    #[suggestion(style = \"tool-only\", applicability = \"maybe-incorrect\", code = \"\")]\n     pub span: Span,\n+    pub sigil: &'static str,\n }\n \n #[derive(Diagnostic)]"}, {"sha": "36883bd2172116585ea9ec4f74d5f6080ccd25e1", "filename": "compiler/rustc_parse/src/parser/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/473f916d836cc662c5bdbb0d40af9fb4678fab9e/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/473f916d836cc662c5bdbb0d40af9fb4678fab9e/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs?ref=473f916d836cc662c5bdbb0d40af9fb4678fab9e", "patch": "@@ -1284,7 +1284,7 @@ impl<'a> Parser<'a> {\n         }\n \n         self.bump(); // `+`\n-        let bounds = self.parse_generic_bounds(None)?;\n+        let bounds = self.parse_generic_bounds()?;\n         let sum_span = ty.span.to(self.prev_token.span);\n \n         let sub = match &ty.kind {"}, {"sha": "e6d0f9fbc76d8702606940b621d55105d2bf4fda", "filename": "compiler/rustc_parse/src/parser/generics.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/473f916d836cc662c5bdbb0d40af9fb4678fab9e/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/473f916d836cc662c5bdbb0d40af9fb4678fab9e/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fgenerics.rs?ref=473f916d836cc662c5bdbb0d40af9fb4678fab9e", "patch": "@@ -78,7 +78,7 @@ impl<'a> Parser<'a> {\n                 }\n                 self.restore_snapshot(snapshot);\n             }\n-            self.parse_generic_bounds(colon_span)?\n+            self.parse_generic_bounds()?\n         } else {\n             Vec::new()\n         };\n@@ -419,7 +419,7 @@ impl<'a> Parser<'a> {\n         // or with mandatory equality sign and the second type.\n         let ty = self.parse_ty_for_where_clause()?;\n         if self.eat(&token::Colon) {\n-            let bounds = self.parse_generic_bounds(Some(self.prev_token.span))?;\n+            let bounds = self.parse_generic_bounds()?;\n             Ok(ast::WherePredicate::BoundPredicate(ast::WhereBoundPredicate {\n                 span: lo.to(self.prev_token.span),\n                 bound_generic_params: lifetime_defs,"}, {"sha": "6ca88200dc51b7a44f8dde1dc1a14fcd66f0e0d1", "filename": "compiler/rustc_parse/src/parser/item.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/473f916d836cc662c5bdbb0d40af9fb4678fab9e/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/473f916d836cc662c5bdbb0d40af9fb4678fab9e/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs?ref=473f916d836cc662c5bdbb0d40af9fb4678fab9e", "patch": "@@ -788,11 +788,7 @@ impl<'a> Parser<'a> {\n         // Parse optional colon and supertrait bounds.\n         let had_colon = self.eat(&token::Colon);\n         let span_at_colon = self.prev_token.span;\n-        let bounds = if had_colon {\n-            self.parse_generic_bounds(Some(self.prev_token.span))?\n-        } else {\n-            Vec::new()\n-        };\n+        let bounds = if had_colon { self.parse_generic_bounds()? } else { Vec::new() };\n \n         let span_before_eq = self.prev_token.span;\n         if self.eat(&token::Eq) {\n@@ -802,7 +798,7 @@ impl<'a> Parser<'a> {\n                 self.sess.emit_err(errors::BoundsNotAllowedOnTraitAliases { span });\n             }\n \n-            let bounds = self.parse_generic_bounds(None)?;\n+            let bounds = self.parse_generic_bounds()?;\n             generics.where_clause = self.parse_where_clause()?;\n             self.expect_semi()?;\n \n@@ -883,7 +879,7 @@ impl<'a> Parser<'a> {\n \n         // Parse optional colon and param bounds.\n         let bounds =\n-            if self.eat(&token::Colon) { self.parse_generic_bounds(None)? } else { Vec::new() };\n+            if self.eat(&token::Colon) { self.parse_generic_bounds()? } else { Vec::new() };\n         let before_where_clause = self.parse_where_clause()?;\n \n         let ty = if self.eat(&token::Eq) { Some(self.parse_ty()?) } else { None };"}, {"sha": "feb7e829caf685d5b24e98657d91e880959d11f0", "filename": "compiler/rustc_parse/src/parser/path.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/473f916d836cc662c5bdbb0d40af9fb4678fab9e/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/473f916d836cc662c5bdbb0d40af9fb4678fab9e/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpath.rs?ref=473f916d836cc662c5bdbb0d40af9fb4678fab9e", "patch": "@@ -606,7 +606,7 @@ impl<'a> Parser<'a> {\n                     let kind = if self.eat(&token::Colon) {\n                         // Parse associated type constraint bound.\n \n-                        let bounds = self.parse_generic_bounds(Some(self.prev_token.span))?;\n+                        let bounds = self.parse_generic_bounds()?;\n                         AssocConstraintKind::Bound { bounds }\n                     } else if self.eat(&token::Eq) {\n                         self.parse_assoc_equality_term(ident, self.prev_token.span)?"}, {"sha": "a29b696aea83c5a86615c6c1e2bc527399b09981", "filename": "compiler/rustc_parse/src/parser/ty.rs", "status": "modified", "additions": 46, "deletions": 79, "changes": 125, "blob_url": "https://github.com/rust-lang/rust/blob/473f916d836cc662c5bdbb0d40af9fb4678fab9e/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/473f916d836cc662c5bdbb0d40af9fb4678fab9e/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fty.rs?ref=473f916d836cc662c5bdbb0d40af9fb4678fab9e", "patch": "@@ -3,8 +3,7 @@ use super::{Parser, PathStyle, TokenType};\n use crate::errors::{\n     self, DynAfterMut, ExpectedFnPathFoundFnKeyword, ExpectedMutOrConstInRawPointerType,\n     FnPointerCannotBeAsync, FnPointerCannotBeConst, FnPtrWithGenerics, FnPtrWithGenericsSugg,\n-    InvalidDynKeyword, LifetimeAfterMut, NeedPlusAfterTraitObjectLifetime,\n-    NegativeBoundsNotSupported, NegativeBoundsNotSupportedSugg, NestedCVariadicType,\n+    InvalidDynKeyword, LifetimeAfterMut, NeedPlusAfterTraitObjectLifetime, NestedCVariadicType,\n     ReturnTypesUseThinArrow,\n };\n use crate::{maybe_recover_from_interpolated_ty_qpath, maybe_whole};\n@@ -14,31 +13,34 @@ use rustc_ast::ptr::P;\n use rustc_ast::token::{self, Delimiter, Token, TokenKind};\n use rustc_ast::util::case::Case;\n use rustc_ast::{\n-    self as ast, BareFnTy, FnRetTy, GenericBound, GenericBounds, GenericParam, Generics, Lifetime,\n-    MacCall, MutTy, Mutability, PolyTraitRef, TraitBoundModifier, TraitObjectSyntax, Ty, TyKind,\n+    self as ast, BareFnTy, BoundPolarity, FnRetTy, GenericBound, GenericBounds, GenericParam,\n+    Generics, Lifetime, MacCall, MutTy, Mutability, PolyTraitRef, TraitBoundModifier,\n+    TraitObjectSyntax, Ty, TyKind,\n };\n use rustc_errors::{Applicability, PResult};\n use rustc_span::source_map::Span;\n use rustc_span::symbol::{kw, sym, Ident};\n use rustc_span::Symbol;\n use thin_vec::{thin_vec, ThinVec};\n \n-/// Any `?` or `~const` modifiers that appear at the start of a bound.\n+/// Any `?`, `!`, or `~const` modifiers that appear at the start of a bound.\n struct BoundModifiers {\n     /// `?Trait`.\n-    maybe: Option<Span>,\n+    bound_polarity: BoundPolarity,\n \n     /// `~const Trait`.\n     maybe_const: Option<Span>,\n }\n \n impl BoundModifiers {\n     fn to_trait_bound_modifier(&self) -> TraitBoundModifier {\n-        match (self.maybe, self.maybe_const) {\n-            (None, None) => TraitBoundModifier::None,\n-            (Some(_), None) => TraitBoundModifier::Maybe,\n-            (None, Some(_)) => TraitBoundModifier::MaybeConst,\n-            (Some(_), Some(_)) => TraitBoundModifier::MaybeConstMaybe,\n+        match (self.bound_polarity, self.maybe_const) {\n+            (BoundPolarity::Positive, None) => TraitBoundModifier::None,\n+            (BoundPolarity::Negative(_), None) => TraitBoundModifier::Negative,\n+            (BoundPolarity::Maybe(_), None) => TraitBoundModifier::Maybe,\n+            (BoundPolarity::Positive, Some(_)) => TraitBoundModifier::MaybeConst,\n+            (BoundPolarity::Negative(_), Some(_)) => TraitBoundModifier::MaybeConstNegative,\n+            (BoundPolarity::Maybe(_), Some(_)) => TraitBoundModifier::MaybeConstMaybe,\n         }\n     }\n }\n@@ -368,7 +370,7 @@ impl<'a> Parser<'a> {\n \n     fn parse_bare_trait_object(&mut self, lo: Span, allow_plus: AllowPlus) -> PResult<'a, TyKind> {\n         let lt_no_plus = self.check_lifetime() && !self.look_ahead(1, |t| t.is_like_plus());\n-        let bounds = self.parse_generic_bounds_common(allow_plus, None)?;\n+        let bounds = self.parse_generic_bounds_common(allow_plus)?;\n         if lt_no_plus {\n             self.sess.emit_err(NeedPlusAfterTraitObjectLifetime { span: lo });\n         }\n@@ -395,7 +397,7 @@ impl<'a> Parser<'a> {\n     ) -> PResult<'a, TyKind> {\n         if plus {\n             self.eat_plus(); // `+`, or `+=` gets split and `+` is discarded\n-            bounds.append(&mut self.parse_generic_bounds(Some(self.prev_token.span))?);\n+            bounds.append(&mut self.parse_generic_bounds()?);\n         }\n         Ok(TyKind::TraitObject(bounds, TraitObjectSyntax::None))\n     }\n@@ -598,7 +600,7 @@ impl<'a> Parser<'a> {\n                 }\n             })\n         }\n-        let bounds = self.parse_generic_bounds(None)?;\n+        let bounds = self.parse_generic_bounds()?;\n         *impl_dyn_multi = bounds.len() > 1 || self.prev_token.kind == TokenKind::BinOp(token::Plus);\n         Ok(TyKind::ImplTrait(ast::DUMMY_NODE_ID, bounds))\n     }\n@@ -629,7 +631,7 @@ impl<'a> Parser<'a> {\n         };\n \n         // Always parse bounds greedily for better error recovery.\n-        let bounds = self.parse_generic_bounds(None)?;\n+        let bounds = self.parse_generic_bounds()?;\n         *impl_dyn_multi = bounds.len() > 1 || self.prev_token.kind == TokenKind::BinOp(token::Plus);\n         Ok(TyKind::TraitObject(bounds, syntax))\n     }\n@@ -660,23 +662,15 @@ impl<'a> Parser<'a> {\n         }\n     }\n \n-    pub(super) fn parse_generic_bounds(\n-        &mut self,\n-        colon_span: Option<Span>,\n-    ) -> PResult<'a, GenericBounds> {\n-        self.parse_generic_bounds_common(AllowPlus::Yes, colon_span)\n+    pub(super) fn parse_generic_bounds(&mut self) -> PResult<'a, GenericBounds> {\n+        self.parse_generic_bounds_common(AllowPlus::Yes)\n     }\n \n     /// Parses bounds of a type parameter `BOUND + BOUND + ...`, possibly with trailing `+`.\n     ///\n     /// See `parse_generic_bound` for the `BOUND` grammar.\n-    fn parse_generic_bounds_common(\n-        &mut self,\n-        allow_plus: AllowPlus,\n-        colon_span: Option<Span>,\n-    ) -> PResult<'a, GenericBounds> {\n+    fn parse_generic_bounds_common(&mut self, allow_plus: AllowPlus) -> PResult<'a, GenericBounds> {\n         let mut bounds = Vec::new();\n-        let mut negative_bounds = Vec::new();\n \n         // In addition to looping while we find generic bounds:\n         // We continue even if we find a keyword. This is necessary for error recovery on,\n@@ -693,75 +687,35 @@ impl<'a> Parser<'a> {\n                 self.sess.emit_err(InvalidDynKeyword { span: self.token.span });\n                 self.bump();\n             }\n-            match self.parse_generic_bound()? {\n-                Ok(bound) => bounds.push(bound),\n-                Err(neg_sp) => negative_bounds.push(neg_sp),\n-            }\n+            bounds.push(self.parse_generic_bound()?);\n             if allow_plus == AllowPlus::No || !self.eat_plus() {\n                 break;\n             }\n         }\n \n-        if !negative_bounds.is_empty() {\n-            self.error_negative_bounds(colon_span, &bounds, negative_bounds);\n-        }\n-\n         Ok(bounds)\n     }\n \n     /// Can the current token begin a bound?\n     fn can_begin_bound(&mut self) -> bool {\n         // This needs to be synchronized with `TokenKind::can_begin_bound`.\n         self.check_path()\n-        || self.check_lifetime()\n-        || self.check(&token::Not) // Used for error reporting only.\n-        || self.check(&token::Question)\n-        || self.check(&token::Tilde)\n-        || self.check_keyword(kw::For)\n-        || self.check(&token::OpenDelim(Delimiter::Parenthesis))\n-    }\n-\n-    fn error_negative_bounds(\n-        &self,\n-        colon_span: Option<Span>,\n-        bounds: &[GenericBound],\n-        negative_bounds: Vec<Span>,\n-    ) {\n-        let sub = if let Some(bound_list) = colon_span {\n-            let bound_list = bound_list.to(self.prev_token.span);\n-            let mut new_bound_list = String::new();\n-            if !bounds.is_empty() {\n-                let mut snippets = bounds.iter().map(|bound| self.span_to_snippet(bound.span()));\n-                while let Some(Ok(snippet)) = snippets.next() {\n-                    new_bound_list.push_str(\" + \");\n-                    new_bound_list.push_str(&snippet);\n-                }\n-                new_bound_list = new_bound_list.replacen(\" +\", \":\", 1);\n-            }\n-\n-            Some(NegativeBoundsNotSupportedSugg {\n-                bound_list,\n-                num_bounds: negative_bounds.len(),\n-                fixed: new_bound_list,\n-            })\n-        } else {\n-            None\n-        };\n-\n-        let last_span = *negative_bounds.last().expect(\"no negative bounds, but still error?\");\n-        self.sess.emit_err(NegativeBoundsNotSupported { negative_bounds, last_span, sub });\n+            || self.check_lifetime()\n+            || self.check(&token::Not)\n+            || self.check(&token::Question)\n+            || self.check(&token::Tilde)\n+            || self.check_keyword(kw::For)\n+            || self.check(&token::OpenDelim(Delimiter::Parenthesis))\n     }\n \n     /// Parses a bound according to the grammar:\n     /// ```ebnf\n     /// BOUND = TY_BOUND | LT_BOUND\n     /// ```\n-    fn parse_generic_bound(&mut self) -> PResult<'a, Result<GenericBound, Span>> {\n-        let anchor_lo = self.prev_token.span;\n+    fn parse_generic_bound(&mut self) -> PResult<'a, GenericBound> {\n         let lo = self.token.span;\n         let has_parens = self.eat(&token::OpenDelim(Delimiter::Parenthesis));\n         let inner_lo = self.token.span;\n-        let is_negative = self.eat(&token::Not);\n \n         let modifiers = self.parse_ty_bound_modifiers()?;\n         let bound = if self.token.is_lifetime() {\n@@ -771,7 +725,7 @@ impl<'a> Parser<'a> {\n             self.parse_generic_ty_bound(lo, has_parens, modifiers)?\n         };\n \n-        Ok(if is_negative { Err(anchor_lo.to(self.prev_token.span)) } else { Ok(bound) })\n+        Ok(bound)\n     }\n \n     /// Parses a lifetime (\"outlives\") bound, e.g. `'a`, according to:\n@@ -799,8 +753,14 @@ impl<'a> Parser<'a> {\n             self.sess.emit_err(errors::TildeConstLifetime { span });\n         }\n \n-        if let Some(span) = modifiers.maybe {\n-            self.sess.emit_err(errors::MaybeLifetime { span });\n+        match modifiers.bound_polarity {\n+            BoundPolarity::Positive => {}\n+            BoundPolarity::Negative(span) => {\n+                self.sess.emit_err(errors::ModifierLifetime { span, sigil: \"!\" });\n+            }\n+            BoundPolarity::Maybe(span) => {\n+                self.sess.emit_err(errors::ModifierLifetime { span, sigil: \"?\" });\n+            }\n         }\n     }\n \n@@ -843,9 +803,16 @@ impl<'a> Parser<'a> {\n             None\n         };\n \n-        let maybe = self.eat(&token::Question).then_some(self.prev_token.span);\n+        let bound_polarity = if self.eat(&token::Question) {\n+            BoundPolarity::Maybe(self.prev_token.span)\n+        } else if self.eat(&token::Not) {\n+            self.sess.gated_spans.gate(sym::negative_bounds, self.prev_token.span);\n+            BoundPolarity::Negative(self.prev_token.span)\n+        } else {\n+            BoundPolarity::Positive\n+        };\n \n-        Ok(BoundModifiers { maybe, maybe_const })\n+        Ok(BoundModifiers { bound_polarity, maybe_const })\n     }\n \n     /// Parses a type bound according to:"}, {"sha": "06aa2737915263c7d82b1fead7a43fceb2b39d97", "filename": "compiler/rustc_passes/src/check_attr.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/473f916d836cc662c5bdbb0d40af9fb4678fab9e/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/473f916d836cc662c5bdbb0d40af9fb4678fab9e/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs?ref=473f916d836cc662c5bdbb0d40af9fb4678fab9e", "patch": "@@ -101,12 +101,11 @@ impl CheckAttrVisitor<'_> {\n         item: Option<ItemLike<'_>>,\n     ) {\n         let mut doc_aliases = FxHashMap::default();\n-        let mut is_valid = true;\n         let mut specified_inline = None;\n         let mut seen = FxHashMap::default();\n         let attrs = self.tcx.hir().attrs(hir_id);\n         for attr in attrs {\n-            let attr_is_valid = match attr.name_or_empty() {\n+            match attr.name_or_empty() {\n                 sym::do_not_recommend => self.check_do_not_recommend(attr.span, target),\n                 sym::inline => self.check_inline(hir_id, attr, span, target),\n                 sym::no_coverage => self.check_no_coverage(hir_id, attr, span, target),\n@@ -188,7 +187,6 @@ impl CheckAttrVisitor<'_> {\n                 sym::link_ordinal => self.check_link_ordinal(&attr, span, target),\n                 _ => true,\n             };\n-            is_valid &= attr_is_valid;\n \n             // lint-only checks\n             match attr.name_or_empty() {\n@@ -255,10 +253,6 @@ impl CheckAttrVisitor<'_> {\n             self.check_unused_attribute(hir_id, attr)\n         }\n \n-        if !is_valid {\n-            return;\n-        }\n-\n         self.check_repr(attrs, span, target, item, hir_id);\n         self.check_used(attrs, target);\n     }"}, {"sha": "7e60870fef0ffb5bbc3c2a45408db2cdbacdf1cf", "filename": "compiler/rustc_privacy/src/lib.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/473f916d836cc662c5bdbb0d40af9fb4678fab9e/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/473f916d836cc662c5bdbb0d40af9fb4678fab9e/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_privacy%2Fsrc%2Flib.rs?ref=473f916d836cc662c5bdbb0d40af9fb4678fab9e", "patch": "@@ -515,9 +515,11 @@ impl<'tcx> EmbargoVisitor<'tcx> {\n             let vis = self.tcx.local_visibility(item_id.owner_id.def_id);\n             self.update_macro_reachable_def(item_id.owner_id.def_id, def_kind, vis, defining_mod);\n         }\n-        for export in self.tcx.module_children_reexports(module_def_id) {\n-            if export.vis.is_accessible_from(defining_mod, self.tcx)\n-                && let Res::Def(def_kind, def_id) = export.res\n+        for child in self.tcx.module_children_local(module_def_id) {\n+            // FIXME: Use module children for the logic above too.\n+            if !child.reexport_chain.is_empty()\n+                && child.vis.is_accessible_from(defining_mod, self.tcx)\n+                && let Res::Def(def_kind, def_id) = child.res\n                 && let Some(def_id) = def_id.as_local() {\n                 let vis = self.tcx.local_visibility(def_id);\n                 self.update_macro_reachable_def(def_id, def_kind, vis, defining_mod);"}, {"sha": "9e4429507b1c8abdfe9d4cd43ec66a6a1090c309", "filename": "compiler/rustc_resolve/src/imports.rs", "status": "modified", "additions": 6, "deletions": 13, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/473f916d836cc662c5bdbb0d40af9fb4678fab9e/compiler%2Frustc_resolve%2Fsrc%2Fimports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/473f916d836cc662c5bdbb0d40af9fb4678fab9e/compiler%2Frustc_resolve%2Fsrc%2Fimports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fimports.rs?ref=473f916d836cc662c5bdbb0d40af9fb4678fab9e", "patch": "@@ -1261,32 +1261,25 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n         *module.globs.borrow_mut() = Vec::new();\n \n         if let Some(def_id) = module.opt_def_id() {\n-            let mut non_reexports = Vec::new();\n-            let mut reexports = Vec::new();\n+            let mut children = Vec::new();\n \n             module.for_each_child(self, |this, ident, _, binding| {\n                 let res = binding.res().expect_non_local();\n-                if !binding.is_import() {\n-                    non_reexports.push(res.def_id().expect_local());\n-                } else if res != def::Res::Err && !binding.is_ambiguity() {\n+                if res != def::Res::Err && !binding.is_ambiguity() {\n                     let mut reexport_chain = SmallVec::new();\n                     let mut next_binding = binding;\n                     while let NameBindingKind::Import { binding, import, .. } = next_binding.kind {\n                         reexport_chain.push(import.simplify(this));\n                         next_binding = binding;\n                     }\n \n-                    reexports.push(ModChild { ident, res, vis: binding.vis, reexport_chain });\n+                    children.push(ModChild { ident, res, vis: binding.vis, reexport_chain });\n                 }\n             });\n \n-            // Should be fine because this code is only called for local modules.\n-            let def_id = def_id.expect_local();\n-            if !non_reexports.is_empty() {\n-                self.module_children_non_reexports.insert(def_id, non_reexports);\n-            }\n-            if !reexports.is_empty() {\n-                self.module_children_reexports.insert(def_id, reexports);\n+            if !children.is_empty() {\n+                // Should be fine because this code is only called for local modules.\n+                self.module_children.insert(def_id.expect_local(), children);\n             }\n         }\n     }"}, {"sha": "e46463579fe4500e83969b53b59bf0e98688e92c", "filename": "compiler/rustc_resolve/src/lib.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/473f916d836cc662c5bdbb0d40af9fb4678fab9e/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/473f916d836cc662c5bdbb0d40af9fb4678fab9e/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flib.rs?ref=473f916d836cc662c5bdbb0d40af9fb4678fab9e", "patch": "@@ -909,8 +909,7 @@ pub struct Resolver<'a, 'tcx> {\n \n     /// `CrateNum` resolutions of `extern crate` items.\n     extern_crate_map: FxHashMap<LocalDefId, CrateNum>,\n-    module_children_non_reexports: LocalDefIdMap<Vec<LocalDefId>>,\n-    module_children_reexports: LocalDefIdMap<Vec<ModChild>>,\n+    module_children: LocalDefIdMap<Vec<ModChild>>,\n     trait_map: NodeMap<Vec<TraitCandidate>>,\n \n     /// A map from nodes to anonymous modules.\n@@ -1260,8 +1259,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n             lifetimes_res_map: Default::default(),\n             extra_lifetime_params_map: Default::default(),\n             extern_crate_map: Default::default(),\n-            module_children_non_reexports: Default::default(),\n-            module_children_reexports: Default::default(),\n+            module_children: Default::default(),\n             trait_map: NodeMap::default(),\n             underscore_disambiguator: 0,\n             empty_module,\n@@ -1399,8 +1397,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n             has_pub_restricted,\n             effective_visibilities,\n             extern_crate_map,\n-            module_children_non_reexports: self.module_children_non_reexports,\n-            module_children_reexports: self.module_children_reexports,\n+            module_children: self.module_children,\n             glob_map,\n             maybe_unused_trait_imports,\n             main_def,"}, {"sha": "6046780685ad8eaeb40e1aa13d5352468f1934fc", "filename": "compiler/rustc_serialize/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/473f916d836cc662c5bdbb0d40af9fb4678fab9e/compiler%2Frustc_serialize%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/473f916d836cc662c5bdbb0d40af9fb4678fab9e/compiler%2Frustc_serialize%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_serialize%2FCargo.toml?ref=473f916d836cc662c5bdbb0d40af9fb4678fab9e", "patch": "@@ -10,3 +10,4 @@ thin-vec = \"0.2.12\"\n \n [dev-dependencies]\n rustc_macros = { path = \"../rustc_macros\" }\n+tempfile = \"3.2\""}, {"sha": "a2ec318df6d83cab3c371dac7c055e94f63c8ba5", "filename": "compiler/rustc_serialize/src/opaque.rs", "status": "modified", "additions": 4, "deletions": 125, "changes": 129, "blob_url": "https://github.com/rust-lang/rust/blob/473f916d836cc662c5bdbb0d40af9fb4678fab9e/compiler%2Frustc_serialize%2Fsrc%2Fopaque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/473f916d836cc662c5bdbb0d40af9fb4678fab9e/compiler%2Frustc_serialize%2Fsrc%2Fopaque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_serialize%2Fsrc%2Fopaque.rs?ref=473f916d836cc662c5bdbb0d40af9fb4678fab9e", "patch": "@@ -12,118 +12,14 @@ use std::ptr;\n // Encoder\n // -----------------------------------------------------------------------------\n \n-pub struct MemEncoder {\n-    pub data: Vec<u8>,\n-}\n-\n-impl MemEncoder {\n-    pub fn new() -> MemEncoder {\n-        MemEncoder { data: vec![] }\n-    }\n-\n-    #[inline]\n-    pub fn position(&self) -> usize {\n-        self.data.len()\n-    }\n-\n-    pub fn finish(self) -> Vec<u8> {\n-        self.data\n-    }\n-}\n-\n-macro_rules! write_leb128 {\n-    ($enc:expr, $value:expr, $int_ty:ty, $fun:ident) => {{\n-        const MAX_ENCODED_LEN: usize = $crate::leb128::max_leb128_len::<$int_ty>();\n-        let old_len = $enc.data.len();\n-\n-        if MAX_ENCODED_LEN > $enc.data.capacity() - old_len {\n-            $enc.data.reserve(MAX_ENCODED_LEN);\n-        }\n-\n-        // SAFETY: The above check and `reserve` ensures that there is enough\n-        // room to write the encoded value to the vector's internal buffer.\n-        unsafe {\n-            let buf = &mut *($enc.data.as_mut_ptr().add(old_len)\n-                as *mut [MaybeUninit<u8>; MAX_ENCODED_LEN]);\n-            let encoded = leb128::$fun(buf, $value);\n-            $enc.data.set_len(old_len + encoded.len());\n-        }\n-    }};\n-}\n-\n-impl Encoder for MemEncoder {\n-    #[inline]\n-    fn emit_usize(&mut self, v: usize) {\n-        write_leb128!(self, v, usize, write_usize_leb128)\n-    }\n-\n-    #[inline]\n-    fn emit_u128(&mut self, v: u128) {\n-        write_leb128!(self, v, u128, write_u128_leb128);\n-    }\n-\n-    #[inline]\n-    fn emit_u64(&mut self, v: u64) {\n-        write_leb128!(self, v, u64, write_u64_leb128);\n-    }\n-\n-    #[inline]\n-    fn emit_u32(&mut self, v: u32) {\n-        write_leb128!(self, v, u32, write_u32_leb128);\n-    }\n-\n-    #[inline]\n-    fn emit_u16(&mut self, v: u16) {\n-        self.data.extend_from_slice(&v.to_le_bytes());\n-    }\n-\n-    #[inline]\n-    fn emit_u8(&mut self, v: u8) {\n-        self.data.push(v);\n-    }\n-\n-    #[inline]\n-    fn emit_isize(&mut self, v: isize) {\n-        write_leb128!(self, v, isize, write_isize_leb128)\n-    }\n-\n-    #[inline]\n-    fn emit_i128(&mut self, v: i128) {\n-        write_leb128!(self, v, i128, write_i128_leb128)\n-    }\n-\n-    #[inline]\n-    fn emit_i64(&mut self, v: i64) {\n-        write_leb128!(self, v, i64, write_i64_leb128)\n-    }\n-\n-    #[inline]\n-    fn emit_i32(&mut self, v: i32) {\n-        write_leb128!(self, v, i32, write_i32_leb128)\n-    }\n-\n-    #[inline]\n-    fn emit_i16(&mut self, v: i16) {\n-        self.data.extend_from_slice(&v.to_le_bytes());\n-    }\n-\n-    #[inline]\n-    fn emit_raw_bytes(&mut self, s: &[u8]) {\n-        self.data.extend_from_slice(s);\n-    }\n-}\n-\n pub type FileEncodeResult = Result<usize, io::Error>;\n \n /// `FileEncoder` encodes data to file via fixed-size buffer.\n ///\n-/// When encoding large amounts of data to a file, using `FileEncoder` may be\n-/// preferred over using `MemEncoder` to encode to a `Vec`, and then writing the\n-/// `Vec` to file, as the latter uses as much memory as there is encoded data,\n-/// while the former uses the fixed amount of memory allocated to the buffer.\n-/// `FileEncoder` also has the advantage of not needing to reallocate as data\n-/// is appended to it, but the disadvantage of requiring more error handling,\n-/// which has some runtime overhead.\n+/// There used to be a `MemEncoder` type that encoded all the data into a\n+/// `Vec`. `FileEncoder` is better because its memory use is determined by the\n+/// size of the buffer, rather than the full length of the encoded data, and\n+/// because it doesn't need to reallocate memory along the way.\n pub struct FileEncoder {\n     /// The input buffer. For adequate performance, we need more control over\n     /// buffering than `BufWriter` offers. If `BufWriter` ever offers a raw\n@@ -645,13 +541,6 @@ impl<'a> Decoder for MemDecoder<'a> {\n \n // Specialize encoding byte slices. This specialization also applies to encoding `Vec<u8>`s, etc.,\n // since the default implementations call `encode` on their slices internally.\n-impl Encodable<MemEncoder> for [u8] {\n-    fn encode(&self, e: &mut MemEncoder) {\n-        Encoder::emit_usize(e, self.len());\n-        e.emit_raw_bytes(self);\n-    }\n-}\n-\n impl Encodable<FileEncoder> for [u8] {\n     fn encode(&self, e: &mut FileEncoder) {\n         Encoder::emit_usize(e, self.len());\n@@ -675,16 +564,6 @@ impl IntEncodedWithFixedSize {\n     pub const ENCODED_SIZE: usize = 8;\n }\n \n-impl Encodable<MemEncoder> for IntEncodedWithFixedSize {\n-    #[inline]\n-    fn encode(&self, e: &mut MemEncoder) {\n-        let _start_pos = e.position();\n-        e.emit_raw_bytes(&self.0.to_le_bytes());\n-        let _end_pos = e.position();\n-        debug_assert_eq!((_end_pos - _start_pos), IntEncodedWithFixedSize::ENCODED_SIZE);\n-    }\n-}\n-\n impl Encodable<FileEncoder> for IntEncodedWithFixedSize {\n     #[inline]\n     fn encode(&self, e: &mut FileEncoder) {"}, {"sha": "861091688bb2dd6c14910260fd273934187b76f2", "filename": "compiler/rustc_serialize/tests/opaque.rs", "status": "modified", "additions": 49, "deletions": 7, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/473f916d836cc662c5bdbb0d40af9fb4678fab9e/compiler%2Frustc_serialize%2Ftests%2Fopaque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/473f916d836cc662c5bdbb0d40af9fb4678fab9e/compiler%2Frustc_serialize%2Ftests%2Fopaque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_serialize%2Ftests%2Fopaque.rs?ref=473f916d836cc662c5bdbb0d40af9fb4678fab9e", "patch": "@@ -1,9 +1,10 @@\n #![allow(rustc::internal)]\n \n use rustc_macros::{Decodable, Encodable};\n-use rustc_serialize::opaque::{MemDecoder, MemEncoder};\n+use rustc_serialize::opaque::{MemDecoder, FileEncoder};\n use rustc_serialize::{Decodable, Encodable};\n use std::fmt::Debug;\n+use std::fs;\n \n #[derive(PartialEq, Clone, Debug, Encodable, Decodable)]\n struct Struct {\n@@ -27,18 +28,21 @@ struct Struct {\n }\n \n fn check_round_trip<\n-    T: Encodable<MemEncoder> + for<'a> Decodable<MemDecoder<'a>> + PartialEq + Debug,\n+    T: Encodable<FileEncoder> + for<'a> Decodable<MemDecoder<'a>> + PartialEq + Debug,\n >(\n     values: Vec<T>,\n ) {\n-    let mut encoder = MemEncoder::new();\n+    let tmpfile = tempfile::NamedTempFile::new().unwrap();\n+    let tmpfile = tmpfile.path();\n+\n+    let mut encoder = FileEncoder::new(&tmpfile).unwrap();\n     for value in &values {\n         Encodable::encode(value, &mut encoder);\n     }\n+    encoder.finish().unwrap();\n \n-    let data = encoder.finish();\n+    let data = fs::read(&tmpfile).unwrap();\n     let mut decoder = MemDecoder::new(&data[..], 0);\n-\n     for value in values {\n         let decoded = Decodable::decode(&mut decoder);\n         assert_eq!(value, decoded);\n@@ -61,7 +65,7 @@ fn test_u8() {\n \n #[test]\n fn test_u16() {\n-    for i in u16::MIN..u16::MAX {\n+    for i in [u16::MIN, 111, 3333, 55555, u16::MAX] {\n         check_round_trip(vec![1, 2, 3, i, i, i]);\n     }\n }\n@@ -92,7 +96,7 @@ fn test_i8() {\n \n #[test]\n fn test_i16() {\n-    for i in i16::MIN..i16::MAX {\n+    for i in [i16::MIN, -100, 0, 101, i16::MAX] {\n         check_round_trip(vec![-1, 2, -3, i, i, i, 2]);\n     }\n }\n@@ -251,3 +255,41 @@ fn test_tuples() {\n     check_round_trip(vec![(1234567isize, 100000000000000u64, 99999999999999i64)]);\n     check_round_trip(vec![(String::new(), \"some string\".to_string())]);\n }\n+\n+#[test]\n+fn test_unit_like_struct() {\n+    #[derive(Encodable, Decodable, PartialEq, Debug)]\n+    struct UnitLikeStruct;\n+\n+    check_round_trip(vec![UnitLikeStruct]);\n+}\n+\n+#[test]\n+fn test_box() {\n+    #[derive(Encodable, Decodable, PartialEq, Debug)]\n+    struct A {\n+        foo: Box<[bool]>,\n+    }\n+\n+    let obj = A { foo: Box::new([true, false]) };\n+    check_round_trip(vec![obj]);\n+}\n+\n+#[test]\n+fn test_cell() {\n+    use std::cell::{Cell, RefCell};\n+\n+    #[derive(Encodable, Decodable, PartialEq, Debug)]\n+    struct A {\n+        baz: isize,\n+    }\n+\n+    #[derive(Encodable, Decodable, PartialEq, Debug)]\n+    struct B {\n+        foo: Cell<bool>,\n+        bar: RefCell<A>,\n+    }\n+\n+    let obj = B { foo: Cell::new(true), bar: RefCell::new(A { baz: 2 }) };\n+    check_round_trip(vec![obj]);\n+}"}, {"sha": "714d10f234107308477391c30da41c921e29c76a", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/473f916d836cc662c5bdbb0d40af9fb4678fab9e/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/473f916d836cc662c5bdbb0d40af9fb4678fab9e/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=473f916d836cc662c5bdbb0d40af9fb4678fab9e", "patch": "@@ -984,6 +984,7 @@ symbols! {\n         needs_panic_runtime,\n         neg,\n         negate_unsigned,\n+        negative_bounds,\n         negative_impls,\n         neon,\n         never,"}, {"sha": "3e9e497672aa1758fec7525c459f2673fce6f81a", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/473f916d836cc662c5bdbb0d40af9fb4678fab9e/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/473f916d836cc662c5bdbb0d40af9fb4678fab9e/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=473f916d836cc662c5bdbb0d40af9fb4678fab9e", "patch": "@@ -530,6 +530,10 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n         associated_ty: Option<(&'static str, Ty<'tcx>)>,\n         mut body_id: LocalDefId,\n     ) {\n+        if trait_pred.skip_binder().polarity == ty::ImplPolarity::Negative {\n+            return;\n+        }\n+\n         let trait_pred = self.resolve_numeric_literals_with_default(trait_pred);\n \n         let self_ty = trait_pred.skip_binder().self_ty();"}, {"sha": "a8864f47ef0369c8c80732b90787d1d14cb8b41d", "filename": "compiler/rustc_trait_selection/src/traits/select/candidate_assembly.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/473f916d836cc662c5bdbb0d40af9fb4678fab9e/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/473f916d836cc662c5bdbb0d40af9fb4678fab9e/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs?ref=473f916d836cc662c5bdbb0d40af9fb4678fab9e", "patch": "@@ -57,6 +57,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         if obligation.polarity() == ty::ImplPolarity::Negative {\n             self.assemble_candidates_for_trait_alias(obligation, &mut candidates);\n             self.assemble_candidates_from_impls(obligation, &mut candidates);\n+            self.assemble_candidates_from_caller_bounds(stack, &mut candidates)?;\n         } else {\n             self.assemble_candidates_for_trait_alias(obligation, &mut candidates);\n \n@@ -187,6 +188,10 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n \n         // Keep only those bounds which may apply, and propagate overflow if it occurs.\n         for bound in matching_bounds {\n+            if bound.skip_binder().polarity != stack.obligation.predicate.skip_binder().polarity {\n+                continue;\n+            }\n+\n             // FIXME(oli-obk): it is suspicious that we are dropping the constness and\n             // polarity here.\n             let wc = self.where_clause_may_apply(stack, bound.map_bound(|t| t.trait_ref))?;"}, {"sha": "0590e02d84ac04038cbcbca38e078ec7c89fd351", "filename": "compiler/rustc_trait_selection/src/traits/wf.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/473f916d836cc662c5bdbb0d40af9fb4678fab9e/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/473f916d836cc662c5bdbb0d40af9fb4678fab9e/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs?ref=473f916d836cc662c5bdbb0d40af9fb4678fab9e", "patch": "@@ -328,6 +328,13 @@ impl<'tcx> WfPredicates<'tcx> {\n         let tcx = self.tcx;\n         let trait_ref = &trait_pred.trait_ref;\n \n+        // Negative trait predicates don't require supertraits to hold, just\n+        // that their substs are WF.\n+        if trait_pred.polarity == ty::ImplPolarity::Negative {\n+            self.compute_negative_trait_pred(trait_ref);\n+            return;\n+        }\n+\n         // if the trait predicate is not const, the wf obligations should not be const as well.\n         let obligations = if trait_pred.constness == ty::BoundConstness::NotConst {\n             self.nominal_obligations_without_const(trait_ref.def_id, trait_ref.substs)\n@@ -393,6 +400,14 @@ impl<'tcx> WfPredicates<'tcx> {\n         );\n     }\n \n+    // Compute the obligations that are required for `trait_ref` to be WF,\n+    // given that it is a *negative* trait predicate.\n+    fn compute_negative_trait_pred(&mut self, trait_ref: &ty::TraitRef<'tcx>) {\n+        for arg in trait_ref.substs {\n+            self.compute(arg);\n+        }\n+    }\n+\n     /// Pushes the obligations required for `trait_ref::Item` to be WF\n     /// into `self.out`.\n     fn compute_projection(&mut self, data: ty::AliasTy<'tcx>) {"}, {"sha": "a8a0b9f122d66ac60d99fbe1bf082b7eea36612e", "filename": "library/std/src/fs/tests.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/473f916d836cc662c5bdbb0d40af9fb4678fab9e/library%2Fstd%2Fsrc%2Ffs%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/473f916d836cc662c5bdbb0d40af9fb4678fab9e/library%2Fstd%2Fsrc%2Ffs%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Ffs%2Ftests.rs?ref=473f916d836cc662c5bdbb0d40af9fb4678fab9e", "patch": "@@ -919,6 +919,7 @@ fn symlink_noexist() {\n \n #[test]\n fn read_link() {\n+    let tmpdir = tmpdir();\n     if cfg!(windows) {\n         // directory symlink\n         assert_eq!(check!(fs::read_link(r\"C:\\Users\\All Users\")), Path::new(r\"C:\\ProgramData\"));\n@@ -933,8 +934,11 @@ fn read_link() {\n                 Path::new(r\"C:\\Users\")\n             );\n         }\n+        // Check that readlink works with non-drive paths on Windows.\n+        let link = tmpdir.join(\"link_unc\");\n+        check!(symlink_dir(r\"\\\\localhost\\c$\\\", &link));\n+        assert_eq!(check!(fs::read_link(&link)), Path::new(r\"\\\\localhost\\c$\\\"));\n     }\n-    let tmpdir = tmpdir();\n     let link = tmpdir.join(\"link\");\n     if !got_symlink_permission(&tmpdir) {\n         return;"}, {"sha": "5bfd8b52ed08dbc7fa24d1f52d60f1dccb441d73", "filename": "library/std/src/sys/windows/args.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/473f916d836cc662c5bdbb0d40af9fb4678fab9e/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fargs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/473f916d836cc662c5bdbb0d40af9fb4678fab9e/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fargs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fargs.rs?ref=473f916d836cc662c5bdbb0d40af9fb4678fab9e", "patch": "@@ -313,6 +313,9 @@ pub(crate) fn make_bat_command_line(\n ///\n /// This is necessary because cmd.exe does not support verbatim paths.\n pub(crate) fn to_user_path(path: &Path) -> io::Result<Vec<u16>> {\n+    from_wide_to_user_path(to_u16s(path)?)\n+}\n+pub(crate) fn from_wide_to_user_path(mut path: Vec<u16>) -> io::Result<Vec<u16>> {\n     use crate::ptr;\n     use crate::sys::windows::fill_utf16_buf;\n \n@@ -325,8 +328,6 @@ pub(crate) fn to_user_path(path: &Path) -> io::Result<Vec<u16>> {\n     const N: u16 = b'N' as _;\n     const C: u16 = b'C' as _;\n \n-    let mut path = to_u16s(path)?;\n-\n     // Early return if the path is too long to remove the verbatim prefix.\n     const LEGACY_MAX_PATH: usize = 260;\n     if path.len() > LEGACY_MAX_PATH {"}, {"sha": "fe052c8281b504723acfd02b5e034bf33d4a4024", "filename": "library/std/src/sys/windows/fs.rs", "status": "modified", "additions": 18, "deletions": 11, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/473f916d836cc662c5bdbb0d40af9fb4678fab9e/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/473f916d836cc662c5bdbb0d40af9fb4678fab9e/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Ffs.rs?ref=473f916d836cc662c5bdbb0d40af9fb4678fab9e", "patch": "@@ -477,7 +477,7 @@ impl File {\n     fn reparse_point(\n         &self,\n         space: &mut Align8<[MaybeUninit<u8>]>,\n-    ) -> io::Result<(c::DWORD, *const c::REPARSE_DATA_BUFFER)> {\n+    ) -> io::Result<(c::DWORD, *mut c::REPARSE_DATA_BUFFER)> {\n         unsafe {\n             let mut bytes = 0;\n             cvt({\n@@ -496,7 +496,7 @@ impl File {\n                 )\n             })?;\n             const _: () = assert!(core::mem::align_of::<c::REPARSE_DATA_BUFFER>() <= 8);\n-            Ok((bytes, space.0.as_ptr().cast::<c::REPARSE_DATA_BUFFER>()))\n+            Ok((bytes, space.0.as_mut_ptr().cast::<c::REPARSE_DATA_BUFFER>()))\n         }\n     }\n \n@@ -506,22 +506,22 @@ impl File {\n         unsafe {\n             let (path_buffer, subst_off, subst_len, relative) = match (*buf).ReparseTag {\n                 c::IO_REPARSE_TAG_SYMLINK => {\n-                    let info: *const c::SYMBOLIC_LINK_REPARSE_BUFFER =\n-                        ptr::addr_of!((*buf).rest).cast();\n+                    let info: *mut c::SYMBOLIC_LINK_REPARSE_BUFFER =\n+                        ptr::addr_of_mut!((*buf).rest).cast();\n                     assert!(info.is_aligned());\n                     (\n-                        ptr::addr_of!((*info).PathBuffer).cast::<u16>(),\n+                        ptr::addr_of_mut!((*info).PathBuffer).cast::<u16>(),\n                         (*info).SubstituteNameOffset / 2,\n                         (*info).SubstituteNameLength / 2,\n                         (*info).Flags & c::SYMLINK_FLAG_RELATIVE != 0,\n                     )\n                 }\n                 c::IO_REPARSE_TAG_MOUNT_POINT => {\n-                    let info: *const c::MOUNT_POINT_REPARSE_BUFFER =\n-                        ptr::addr_of!((*buf).rest).cast();\n+                    let info: *mut c::MOUNT_POINT_REPARSE_BUFFER =\n+                        ptr::addr_of_mut!((*buf).rest).cast();\n                     assert!(info.is_aligned());\n                     (\n-                        ptr::addr_of!((*info).PathBuffer).cast::<u16>(),\n+                        ptr::addr_of_mut!((*info).PathBuffer).cast::<u16>(),\n                         (*info).SubstituteNameOffset / 2,\n                         (*info).SubstituteNameLength / 2,\n                         false,\n@@ -535,13 +535,20 @@ impl File {\n                 }\n             };\n             let subst_ptr = path_buffer.add(subst_off.into());\n-            let mut subst = slice::from_raw_parts(subst_ptr, subst_len as usize);\n+            let subst = slice::from_raw_parts_mut(subst_ptr, subst_len as usize);\n             // Absolute paths start with an NT internal namespace prefix `\\??\\`\n             // We should not let it leak through.\n             if !relative && subst.starts_with(&[92u16, 63u16, 63u16, 92u16]) {\n-                subst = &subst[4..];\n+                // Turn `\\??\\` into `\\\\?\\` (a verbatim path).\n+                subst[1] = b'\\\\' as u16;\n+                // Attempt to convert to a more user-friendly path.\n+                let user = super::args::from_wide_to_user_path(\n+                    subst.iter().copied().chain([0]).collect(),\n+                )?;\n+                Ok(PathBuf::from(OsString::from_wide(&user.strip_suffix(&[0]).unwrap_or(&user))))\n+            } else {\n+                Ok(PathBuf::from(OsString::from_wide(subst)))\n             }\n-            Ok(PathBuf::from(OsString::from_wide(subst)))\n         }\n     }\n "}, {"sha": "3e82a381a1b2d34c2d6bfa23edd813127623e34f", "filename": "src/bootstrap/download.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/473f916d836cc662c5bdbb0d40af9fb4678fab9e/src%2Fbootstrap%2Fdownload.rs", "raw_url": "https://github.com/rust-lang/rust/raw/473f916d836cc662c5bdbb0d40af9fb4678fab9e/src%2Fbootstrap%2Fdownload.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdownload.rs?ref=473f916d836cc662c5bdbb0d40af9fb4678fab9e", "patch": "@@ -427,7 +427,6 @@ impl Config {\n \n     fn download_toolchain(\n         &self,\n-        // FIXME(ozkanonur) use CompilerMetadata instead of `version: &str`\n         version: &str,\n         sysroot: &str,\n         stamp_key: &str,"}, {"sha": "951f54e93663cc2b2dc13f037e2eeebfdb32664b", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/473f916d836cc662c5bdbb0d40af9fb4678fab9e/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/473f916d836cc662c5bdbb0d40af9fb4678fab9e/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=473f916d836cc662c5bdbb0d40af9fb4678fab9e", "patch": "@@ -152,8 +152,9 @@ pub(crate) fn try_inline_glob(\n             // reexported by the glob, e.g. because they are shadowed by something else.\n             let reexports = cx\n                 .tcx\n-                .module_children_reexports(current_mod)\n+                .module_children_local(current_mod)\n                 .iter()\n+                .filter(|child| !child.reexport_chain.is_empty())\n                 .filter_map(|child| child.res.opt_def_id())\n                 .collect();\n             let mut items = build_module_items(cx, did, visited, inlined_names, Some(&reexports));"}, {"sha": "f9a46e33f9a8c86fce5b7a69e5cc11336d5cafd6", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/473f916d836cc662c5bdbb0d40af9fb4678fab9e/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/473f916d836cc662c5bdbb0d40af9fb4678fab9e/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=473f916d836cc662c5bdbb0d40af9fb4678fab9e", "patch": "@@ -2089,9 +2089,9 @@ pub(crate) fn reexport_chain<'tcx>(\n     import_def_id: LocalDefId,\n     target_def_id: LocalDefId,\n ) -> &'tcx [Reexport] {\n-    for child in tcx.module_children_reexports(tcx.local_parent(import_def_id)) {\n+    for child in tcx.module_children_local(tcx.local_parent(import_def_id)) {\n         if child.res.opt_def_id() == Some(target_def_id.to_def_id())\n-            && child.reexport_chain[0].id() == Some(import_def_id.to_def_id())\n+            && child.reexport_chain.first().and_then(|r| r.id()) == Some(import_def_id.to_def_id())\n         {\n             return &child.reexport_chain;\n         }"}, {"sha": "1c6810bdaf9be1b4077ba11ee7b092a8ed0518c0", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/473f916d836cc662c5bdbb0d40af9fb4678fab9e/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/473f916d836cc662c5bdbb0d40af9fb4678fab9e/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=473f916d836cc662c5bdbb0d40af9fb4678fab9e", "patch": "@@ -439,6 +439,7 @@ impl clean::GenericBound {\n                 let modifier_str = match modifier {\n                     hir::TraitBoundModifier::None => \"\",\n                     hir::TraitBoundModifier::Maybe => \"?\",\n+                    hir::TraitBoundModifier::Negative => \"!\",\n                     // ~const is experimental; do not display those bounds in rustdoc\n                     hir::TraitBoundModifier::MaybeConst => \"\",\n                 };"}, {"sha": "20e09a548058ddcf536ef07e6bf35f116d2f39eb", "filename": "src/librustdoc/html/templates/type_layout.html", "status": "modified", "additions": 49, "deletions": 44, "changes": 93, "blob_url": "https://github.com/rust-lang/rust/blob/473f916d836cc662c5bdbb0d40af9fb4678fab9e/src%2Flibrustdoc%2Fhtml%2Ftemplates%2Ftype_layout.html", "raw_url": "https://github.com/rust-lang/rust/raw/473f916d836cc662c5bdbb0d40af9fb4678fab9e/src%2Flibrustdoc%2Fhtml%2Ftemplates%2Ftype_layout.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Ftemplates%2Ftype_layout.html?ref=473f916d836cc662c5bdbb0d40af9fb4678fab9e", "patch": "@@ -1,53 +1,58 @@\n-<h2 id=\"layout\" class=\"small-section-header\">  {# #}\n+<h2 id=\"layout\" class=\"small-section-header\"> {# #}\n     Layout<a href=\"#layout\" class=\"anchor\">\u00a7</a> {# #}\n </h2> {# #}\n <div class=\"docblock\"> {# #}\n     {% match type_layout_size %}\n-        {% when Ok(type_layout_size) %}\n-            <div class=\"warning\"> {# #}\n-                <p> {# #}\n-                    <strong>Note:</strong> Most layout information is <strong>completely {#+ #}\n-                    unstable</strong> and may even differ between compilations. {#+ #}\n-                    The only exception is types with certain <code>repr(...)</code> {#+ #}\n-                    attributes. Please see the Rust Reference\u2019s {#+ #}\n-                    <a href=\"https://doc.rust-lang.org/reference/type-layout.html\">\u201cType Layout\u201d</a> {#+ #}\n-                    chapter for details on type layout guarantees. {# #}\n-                </p> {# #}\n-            </div> {# #}\n-            <p><strong>Size:</strong> {{ type_layout_size|safe }}</p> {# #}\n-            {% if !variants.is_empty() %}\n-                <p> {# #}\n-                    <strong>Size for each variant:</strong> {# #}\n-                </p> {# #}\n-                <ul> {# #}\n-                    {% for (name, layout_size) in variants %}\n-                        <li> {# #}\n-                            <code>{{ name }}</code>: {#+ #}\n-                            {{ layout_size|safe }}\n-                        </li> {# #}\n-                    {% endfor %}\n-                </ul> {# #}\n-            {% endif %}\n-        {# This kind of layout error can occur with valid code, e.g. if you try to\n-           get the layout of a generic type such as `Vec<T>`. #}\n+    {% when Ok(type_layout_size) %}\n+    <div class=\"warning\"> {# #}\n+        <p> {# #}\n+            <strong>Note:</strong> Most layout information is <strong>completely {#+ #}\n+                unstable</strong> and may even differ between compilations. {#+ #}\n+            The only exception is types with certain <code>repr(...)</code> {#+ #}\n+            attributes. Please see the Rust Reference\u2019s {#+ #}\n+            <a href=\"https://doc.rust-lang.org/reference/type-layout.html\">\u201cType Layout\u201d</a> {#+ #}\n+            chapter for details on type layout guarantees. {# #}\n+        </p> {# #}\n+    </div> {# #}\n+    <p><strong>Size:</strong> {{ type_layout_size|safe }}</p> {# #}\n+    {% if !variants.is_empty() %}\n+    <p> {# #}\n+        <strong>Size for each variant:</strong> {# #}\n+    </p> {# #}\n+    <ul> {# #}\n+        {% for (name, layout_size) in variants %}\n+        <li> {# #}\n+            <code>{{ name }}</code>: {#+ #}\n+            {{ layout_size|safe }}\n+        </li> {# #}\n+        {% endfor %}\n+    </ul> {# #}\n+    {% endif %}\n+    {# This kind of layout error can occur with valid code, e.g. if you try to\n+    get the layout of a generic type such as `Vec<T>`. #}\n         {% when Err(LayoutError::Unknown(_)) %}\n-            <p> {# #}\n-                <strong>Note:</strong> Unable to compute type layout, {#+ #}\n-                possibly due to this type having generic parameters. {#+ #}\n-                Layout can only be computed for concrete, fully-instantiated types. {# #}\n-            </p> {# #}\n+        <p> {# #}\n+            <strong>Note:</strong> Unable to compute type layout, {#+ #}\n+            possibly due to this type having generic parameters. {#+ #}\n+            Layout can only be computed for concrete, fully-instantiated types. {# #}\n+        </p> {# #}\n         {# This kind of error probably can't happen with valid code, but we don't\n-           want to panic and prevent the docs from building, so we just let the\n-           user know that we couldn't compute the layout. #}\n+        want to panic and prevent the docs from building, so we just let the\n+        user know that we couldn't compute the layout. #}\n         {% when Err(LayoutError::SizeOverflow(_)) %}\n-            <p> {# #}\n-                <strong>Note:</strong> Encountered an error during type layout; {#+ #}\n-                the type was too big. {# #}\n-            </p> {# #}\n+        <p> {# #}\n+            <strong>Note:</strong> Encountered an error during type layout; {#+ #}\n+            the type was too big. {# #}\n+        </p> {# #}\n         {% when Err(LayoutError::NormalizationFailure(_, _)) %}\n-            <p> {# #}\n-                <strong>Note:</strong> Encountered an error during type layout; {#+ #}\n-                the type failed to be normalized. {# #}\n-            </p> {# #}\n-    {% endmatch %}\n+        <p> {# #}\n+            <strong>Note:</strong> Encountered an error during type layout; {#+ #}\n+            the type failed to be normalized. {# #}\n+        </p> {# #}\n+        {% when Err(LayoutError::Cycle) %}\n+        <p> {# #}\n+            <strong>Note:</strong> Encountered an error during type layout; {#+ #}\n+            the type's layout depended on the type's layout itself. {# #}\n+        </p> {# #}\n+        {% endmatch %}\n </div> {# #}"}, {"sha": "b5bebb7059380cf453cf15e719411c9c1187cb5b", "filename": "src/librustdoc/json/conversions.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/473f916d836cc662c5bdbb0d40af9fb4678fab9e/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/473f916d836cc662c5bdbb0d40af9fb4678fab9e/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fjson%2Fconversions.rs?ref=473f916d836cc662c5bdbb0d40af9fb4678fab9e", "patch": "@@ -533,6 +533,10 @@ pub(crate) fn from_trait_bound_modifier(\n         None => TraitBoundModifier::None,\n         Maybe => TraitBoundModifier::Maybe,\n         MaybeConst => TraitBoundModifier::MaybeConst,\n+        // FIXME(negative-bounds): This bound should be rendered negative, but\n+        // since that's experimental, maybe let's not add it to the rustdoc json\n+        // API just now...\n+        Negative => TraitBoundModifier::None,\n     }\n }\n "}, {"sha": "841c7a78b2d4f22b1cc898f0de42af403413017f", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/473f916d836cc662c5bdbb0d40af9fb4678fab9e/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/473f916d836cc662c5bdbb0d40af9fb4678fab9e/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=473f916d836cc662c5bdbb0d40af9fb4678fab9e", "patch": "@@ -136,14 +136,15 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n         // is declared but also a reexport of itself producing two exports of the same\n         // macro in the same module.\n         let mut inserted = FxHashSet::default();\n-        for export in self.cx.tcx.module_children_reexports(CRATE_DEF_ID) {\n-            if let Res::Def(DefKind::Macro(_), def_id) = export.res &&\n+        for child in self.cx.tcx.module_children_local(CRATE_DEF_ID) {\n+            if !child.reexport_chain.is_empty() &&\n+                let Res::Def(DefKind::Macro(_), def_id) = child.res &&\n                 let Some(local_def_id) = def_id.as_local() &&\n                 self.cx.tcx.has_attr(def_id, sym::macro_export) &&\n                 inserted.insert(def_id)\n             {\n-                    let item = self.cx.tcx.hir().expect_item(local_def_id);\n-                    top_level_module.items.insert((local_def_id, Some(item.ident.name)), (item, None, None));\n+                let item = self.cx.tcx.hir().expect_item(local_def_id);\n+                top_level_module.items.insert((local_def_id, Some(item.ident.name)), (item, None, None));\n             }\n         }\n "}, {"sha": "6c3b5bb00a3475e2bec5d1b7a75beade6623c776", "filename": "src/tools/build-manifest/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/473f916d836cc662c5bdbb0d40af9fb4678fab9e/src%2Ftools%2Fbuild-manifest%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/473f916d836cc662c5bdbb0d40af9fb4678fab9e/src%2Ftools%2Fbuild-manifest%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fbuild-manifest%2FCargo.toml?ref=473f916d836cc662c5bdbb0d40af9fb4678fab9e", "patch": "@@ -9,6 +9,7 @@ serde = { version = \"1.0\", features = [\"derive\"] }\n serde_json = \"1.0\"\n anyhow = \"1.0.32\"\n flate2 = \"1.0.16\"\n+xz2 = \"0.1.7\"\n tar = \"0.4.29\"\n sha2 = \"0.10.1\"\n rayon = \"1.5.1\""}, {"sha": "7a4c15d01eadc219dfdb570c83eb8952715320a7", "filename": "src/tools/build-manifest/src/versions.rs", "status": "modified", "additions": 25, "deletions": 3, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/473f916d836cc662c5bdbb0d40af9fb4678fab9e/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fversions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/473f916d836cc662c5bdbb0d40af9fb4678fab9e/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fversions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fversions.rs?ref=473f916d836cc662c5bdbb0d40af9fb4678fab9e", "patch": "@@ -5,6 +5,7 @@ use std::fs::File;\n use std::io::Read;\n use std::path::{Path, PathBuf};\n use tar::Archive;\n+use xz2::read::XzDecoder;\n \n const DEFAULT_TARGET: &str = \"x86_64-unknown-linux-gnu\";\n \n@@ -175,9 +176,23 @@ impl Versions {\n     }\n \n     fn load_version_from_tarball(&mut self, package: &PkgType) -> Result<VersionInfo, Error> {\n-        let tarball_name = self.tarball_name(package, DEFAULT_TARGET)?;\n-        let tarball = self.dist_path.join(tarball_name);\n+        for ext in [\"xz\", \"gz\"] {\n+            let info =\n+                self.load_version_from_tarball_inner(&self.dist_path.join(self.archive_name(\n+                    package,\n+                    DEFAULT_TARGET,\n+                    &format!(\"tar.{}\", ext),\n+                )?))?;\n+            if info.present {\n+                return Ok(info);\n+            }\n+        }\n+\n+        // If neither tarball is present, we fallback to returning the non-present info.\n+        Ok(VersionInfo::default())\n+    }\n \n+    fn load_version_from_tarball_inner(&mut self, tarball: &Path) -> Result<VersionInfo, Error> {\n         let file = match File::open(&tarball) {\n             Ok(file) => file,\n             Err(err) if err.kind() == std::io::ErrorKind::NotFound => {\n@@ -187,7 +202,14 @@ impl Versions {\n             }\n             Err(err) => return Err(err.into()),\n         };\n-        let mut tar = Archive::new(GzDecoder::new(file));\n+        let mut tar: Archive<Box<dyn std::io::Read>> =\n+            Archive::new(if tarball.extension().map_or(false, |e| e == \"gz\") {\n+                Box::new(GzDecoder::new(file))\n+            } else if tarball.extension().map_or(false, |e| e == \"xz\") {\n+                Box::new(XzDecoder::new(file))\n+            } else {\n+                unimplemented!(\"tarball extension not recognized: {}\", tarball.display())\n+            });\n \n         let mut version = None;\n         let mut git_commit = None;"}, {"sha": "d050310bd805ccb2a4700cc8033b7a449fd9e58f", "filename": "src/tools/miri/tests/fail/layout_cycle.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/473f916d836cc662c5bdbb0d40af9fb4678fab9e/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Flayout_cycle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/473f916d836cc662c5bdbb0d40af9fb4678fab9e/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Flayout_cycle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Flayout_cycle.rs?ref=473f916d836cc662c5bdbb0d40af9fb4678fab9e", "patch": "@@ -0,0 +1,28 @@\n+//@error-pattern: a cycle occurred during layout computation\n+//~^ ERROR: cycle detected when computing layout of\n+\n+use std::mem;\n+\n+pub struct S<T: Tr> {\n+    pub f: <T as Tr>::I,\n+}\n+\n+pub trait Tr {\n+    type I: Tr;\n+}\n+\n+impl<T: Tr> Tr for S<T> {\n+    type I = S<S<T>>;\n+}\n+\n+impl Tr for () {\n+    type I = ();\n+}\n+\n+fn foo<T: Tr>() -> usize {\n+    mem::size_of::<S<T>>()\n+}\n+\n+fn main() {\n+    println!(\"{}\", foo::<S<()>>());\n+}"}, {"sha": "62b7d5fb77d12f3141a50952d6d64e67ed6fb521", "filename": "src/tools/miri/tests/fail/layout_cycle.stderr", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/473f916d836cc662c5bdbb0d40af9fb4678fab9e/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Flayout_cycle.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/473f916d836cc662c5bdbb0d40af9fb4678fab9e/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Flayout_cycle.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Flayout_cycle.stderr?ref=473f916d836cc662c5bdbb0d40af9fb4678fab9e", "patch": "@@ -0,0 +1,28 @@\n+error[E0391]: cycle detected when computing layout of `S<S<()>>`\n+   |\n+   = note: ...which requires computing layout of `<S<()> as Tr>::I`...\n+   = note: ...which again requires computing layout of `S<S<()>>`, completing the cycle\n+\n+error: post-monomorphization error: a cycle occurred during layout computation\n+  --> RUSTLIB/core/src/mem/mod.rs:LL:CC\n+   |\n+LL |     intrinsics::size_of::<T>()\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ a cycle occurred during layout computation\n+   |\n+   = note: inside `std::mem::size_of::<S<S<()>>>` at RUSTLIB/core/src/mem/mod.rs:LL:CC\n+note: inside `foo::<S<()>>`\n+  --> $DIR/layout_cycle.rs:LL:CC\n+   |\n+LL |     mem::size_of::<S<T>>()\n+   |     ^^^^^^^^^^^^^^^^^^^^^^\n+note: inside `main`\n+  --> $DIR/layout_cycle.rs:LL:CC\n+   |\n+LL |     println!(\"{}\", foo::<S<()>>());\n+   |                    ^^^^^^^^^^^^^^\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0391`."}, {"sha": "f548388ed8ba278b65f7e3686cecfa161334b775", "filename": "src/tools/rustfmt/src/types.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/473f916d836cc662c5bdbb0d40af9fb4678fab9e/src%2Ftools%2Frustfmt%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/473f916d836cc662c5bdbb0d40af9fb4678fab9e/src%2Ftools%2Frustfmt%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Fsrc%2Ftypes.rs?ref=473f916d836cc662c5bdbb0d40af9fb4678fab9e", "patch": "@@ -552,6 +552,12 @@ impl Rewrite for ast::GenericBound {\n                     ast::TraitBoundModifier::MaybeConstMaybe => poly_trait_ref\n                         .rewrite(context, shape.offset_left(8)?)\n                         .map(|s| format!(\"~const ?{}\", s)),\n+                    ast::TraitBoundModifier::Negative => poly_trait_ref\n+                        .rewrite(context, shape.offset_left(1)?)\n+                        .map(|s| format!(\"!{}\", s)),\n+                    ast::TraitBoundModifier::MaybeConstNegative => poly_trait_ref\n+                        .rewrite(context, shape.offset_left(8)?)\n+                        .map(|s| format!(\"~const !{}\", s)),\n                 };\n                 rewrite.map(|s| if has_paren { format!(\"({})\", s) } else { s })\n             }"}, {"sha": "4fb35cccf6684e5ecc840d94bcbd8ca14363a61f", "filename": "src/tools/rustfmt/tests/target/negative-bounds.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/473f916d836cc662c5bdbb0d40af9fb4678fab9e/src%2Ftools%2Frustfmt%2Ftests%2Ftarget%2Fnegative-bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/473f916d836cc662c5bdbb0d40af9fb4678fab9e/src%2Ftools%2Frustfmt%2Ftests%2Ftarget%2Fnegative-bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Ftests%2Ftarget%2Fnegative-bounds.rs?ref=473f916d836cc662c5bdbb0d40af9fb4678fab9e", "patch": "@@ -0,0 +1,11 @@\n+fn negative()\n+where\n+    i32: !Copy,\n+{\n+}\n+\n+fn maybe_const_negative()\n+where\n+    i32: ~const !Copy,\n+{\n+}"}, {"sha": "1c376f59e5174a4d82654d5724de868e39e933e9", "filename": "tests/ui-fulldeps/deriving-encodable-decodable-box.rs", "status": "removed", "additions": 0, "deletions": 34, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/9b99ff76b28605ad2e2c49e369721ae400e6a665/tests%2Fui-fulldeps%2Fderiving-encodable-decodable-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b99ff76b28605ad2e2c49e369721ae400e6a665/tests%2Fui-fulldeps%2Fderiving-encodable-decodable-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-fulldeps%2Fderiving-encodable-decodable-box.rs?ref=9b99ff76b28605ad2e2c49e369721ae400e6a665", "patch": "@@ -1,34 +0,0 @@\n-// run-pass\n-\n-#![allow(unused_imports)]\n-#![feature(rustc_private)]\n-\n-extern crate rustc_macros;\n-extern crate rustc_serialize;\n-\n-// Necessary to pull in object code as the rest of the rustc crates are shipped only as rmeta\n-// files.\n-#[allow(unused_extern_crates)]\n-extern crate rustc_driver;\n-\n-use rustc_macros::{Decodable, Encodable};\n-use rustc_serialize::opaque::{MemDecoder, MemEncoder};\n-use rustc_serialize::{Decodable, Encodable, Encoder};\n-\n-#[derive(Encodable, Decodable)]\n-struct A {\n-    foo: Box<[bool]>,\n-}\n-\n-fn main() {\n-    let obj = A { foo: Box::new([true, false]) };\n-\n-    let mut encoder = MemEncoder::new();\n-    obj.encode(&mut encoder);\n-    let data = encoder.finish();\n-\n-    let mut decoder = MemDecoder::new(&data, 0);\n-    let obj2 = A::decode(&mut decoder);\n-\n-    assert_eq!(obj.foo, obj2.foo);\n-}"}, {"sha": "844d40f2ecd6a4590500b18a1727df21d8dbbca9", "filename": "tests/ui-fulldeps/deriving-encodable-decodable-cell-refcell.rs", "status": "removed", "additions": 0, "deletions": 44, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/9b99ff76b28605ad2e2c49e369721ae400e6a665/tests%2Fui-fulldeps%2Fderiving-encodable-decodable-cell-refcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b99ff76b28605ad2e2c49e369721ae400e6a665/tests%2Fui-fulldeps%2Fderiving-encodable-decodable-cell-refcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-fulldeps%2Fderiving-encodable-decodable-cell-refcell.rs?ref=9b99ff76b28605ad2e2c49e369721ae400e6a665", "patch": "@@ -1,44 +0,0 @@\n-// run-pass\n-\n-#![allow(unused_imports)]\n-// This briefly tests the capability of `Cell` and `RefCell` to implement the\n-// `Encodable` and `Decodable` traits via `#[derive(Encodable, Decodable)]`\n-#![feature(rustc_private)]\n-\n-extern crate rustc_macros;\n-extern crate rustc_serialize;\n-\n-// Necessary to pull in object code as the rest of the rustc crates are shipped only as rmeta\n-// files.\n-#[allow(unused_extern_crates)]\n-extern crate rustc_driver;\n-\n-use rustc_macros::{Decodable, Encodable};\n-use rustc_serialize::opaque::{MemDecoder, MemEncoder};\n-use rustc_serialize::{Decodable, Encodable, Encoder};\n-use std::cell::{Cell, RefCell};\n-\n-#[derive(Encodable, Decodable)]\n-struct A {\n-    baz: isize,\n-}\n-\n-#[derive(Encodable, Decodable)]\n-struct B {\n-    foo: Cell<bool>,\n-    bar: RefCell<A>,\n-}\n-\n-fn main() {\n-    let obj = B { foo: Cell::new(true), bar: RefCell::new(A { baz: 2 }) };\n-\n-    let mut encoder = MemEncoder::new();\n-    obj.encode(&mut encoder);\n-    let data = encoder.finish();\n-\n-    let mut decoder = MemDecoder::new(&data, 0);\n-    let obj2 = B::decode(&mut decoder);\n-\n-    assert_eq!(obj.foo.get(), obj2.foo.get());\n-    assert_eq!(obj.bar.borrow().baz, obj2.bar.borrow().baz);\n-}"}, {"sha": "309b5c4a03d57c3b3f0e1e95561720dc60129936", "filename": "tests/ui-fulldeps/issue-14021.rs", "status": "removed", "additions": 0, "deletions": 33, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/9b99ff76b28605ad2e2c49e369721ae400e6a665/tests%2Fui-fulldeps%2Fissue-14021.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b99ff76b28605ad2e2c49e369721ae400e6a665/tests%2Fui-fulldeps%2Fissue-14021.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-fulldeps%2Fissue-14021.rs?ref=9b99ff76b28605ad2e2c49e369721ae400e6a665", "patch": "@@ -1,33 +0,0 @@\n-// run-pass\n-\n-#![allow(unused_mut)]\n-#![allow(unused_imports)]\n-#![feature(rustc_private)]\n-\n-extern crate rustc_macros;\n-extern crate rustc_serialize;\n-\n-// Necessary to pull in object code as the rest of the rustc crates are shipped only as rmeta\n-// files.\n-#[allow(unused_extern_crates)]\n-extern crate rustc_driver;\n-\n-use rustc_macros::{Decodable, Encodable};\n-use rustc_serialize::opaque::{MemDecoder, MemEncoder};\n-use rustc_serialize::{Decodable, Encodable, Encoder};\n-\n-#[derive(Encodable, Decodable, PartialEq, Debug)]\n-struct UnitLikeStruct;\n-\n-pub fn main() {\n-    let obj = UnitLikeStruct;\n-\n-    let mut encoder = MemEncoder::new();\n-    obj.encode(&mut encoder);\n-    let data = encoder.finish();\n-\n-    let mut decoder = MemDecoder::new(&data, 0);\n-    let obj2 = UnitLikeStruct::decode(&mut decoder);\n-\n-    assert_eq!(obj, obj2);\n-}"}, {"sha": "5bffe0206294d80718fdba1d52d1f8cfe11f3ec3", "filename": "tests/ui/const_prop/const-prop-ice.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/473f916d836cc662c5bdbb0d40af9fb4678fab9e/tests%2Fui%2Fconst_prop%2Fconst-prop-ice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/473f916d836cc662c5bdbb0d40af9fb4678fab9e/tests%2Fui%2Fconst_prop%2Fconst-prop-ice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst_prop%2Fconst-prop-ice.rs?ref=473f916d836cc662c5bdbb0d40af9fb4678fab9e", "previous_filename": "tests/ui/consts/const-prop-ice.rs"}, {"sha": "3bcf2b2de7bd7c01472e4b50a4d5216baec66f85", "filename": "tests/ui/const_prop/const-prop-ice.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/473f916d836cc662c5bdbb0d40af9fb4678fab9e/tests%2Fui%2Fconst_prop%2Fconst-prop-ice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/473f916d836cc662c5bdbb0d40af9fb4678fab9e/tests%2Fui%2Fconst_prop%2Fconst-prop-ice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst_prop%2Fconst-prop-ice.stderr?ref=473f916d836cc662c5bdbb0d40af9fb4678fab9e", "previous_filename": "tests/ui/consts/const-prop-ice.stderr"}, {"sha": "d533e394c06fb5cab82cfe774d70b7c7b5d76909", "filename": "tests/ui/const_prop/const-prop-ice2.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/473f916d836cc662c5bdbb0d40af9fb4678fab9e/tests%2Fui%2Fconst_prop%2Fconst-prop-ice2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/473f916d836cc662c5bdbb0d40af9fb4678fab9e/tests%2Fui%2Fconst_prop%2Fconst-prop-ice2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst_prop%2Fconst-prop-ice2.rs?ref=473f916d836cc662c5bdbb0d40af9fb4678fab9e", "previous_filename": "tests/ui/consts/const-prop-ice2.rs"}, {"sha": "2b65ffc2db76058ae536c38470a1ad66a69bf435", "filename": "tests/ui/const_prop/const-prop-ice2.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/473f916d836cc662c5bdbb0d40af9fb4678fab9e/tests%2Fui%2Fconst_prop%2Fconst-prop-ice2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/473f916d836cc662c5bdbb0d40af9fb4678fab9e/tests%2Fui%2Fconst_prop%2Fconst-prop-ice2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst_prop%2Fconst-prop-ice2.stderr?ref=473f916d836cc662c5bdbb0d40af9fb4678fab9e", "previous_filename": "tests/ui/consts/const-prop-ice2.stderr"}, {"sha": "8ab011661e3c51af2f08a12bde127abd558025b4", "filename": "tests/ui/const_prop/const-prop-ice3.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/473f916d836cc662c5bdbb0d40af9fb4678fab9e/tests%2Fui%2Fconst_prop%2Fconst-prop-ice3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/473f916d836cc662c5bdbb0d40af9fb4678fab9e/tests%2Fui%2Fconst_prop%2Fconst-prop-ice3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst_prop%2Fconst-prop-ice3.rs?ref=473f916d836cc662c5bdbb0d40af9fb4678fab9e", "previous_filename": "tests/ui/consts/const-prop-ice3.rs"}, {"sha": "8cc5b98250b5ae63aab41b3a90248a7dc582db89", "filename": "tests/ui/const_prop/const-prop-overflowing-casts.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/473f916d836cc662c5bdbb0d40af9fb4678fab9e/tests%2Fui%2Fconst_prop%2Fconst-prop-overflowing-casts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/473f916d836cc662c5bdbb0d40af9fb4678fab9e/tests%2Fui%2Fconst_prop%2Fconst-prop-overflowing-casts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst_prop%2Fconst-prop-overflowing-casts.rs?ref=473f916d836cc662c5bdbb0d40af9fb4678fab9e", "previous_filename": "tests/ui/consts/const-prop-overflowing-casts.rs"}, {"sha": "21426205955be0320855c54db072ddb1d7c881ad", "filename": "tests/ui/const_prop/const-prop-read-static-in-const.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/473f916d836cc662c5bdbb0d40af9fb4678fab9e/tests%2Fui%2Fconst_prop%2Fconst-prop-read-static-in-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/473f916d836cc662c5bdbb0d40af9fb4678fab9e/tests%2Fui%2Fconst_prop%2Fconst-prop-read-static-in-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst_prop%2Fconst-prop-read-static-in-const.rs?ref=473f916d836cc662c5bdbb0d40af9fb4678fab9e", "previous_filename": "tests/ui/consts/const-prop-read-static-in-const.rs"}, {"sha": "793da628587708c289a85c9cc1669a0320f16fdd", "filename": "tests/ui/const_prop/const-prop-read-static-in-const.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/473f916d836cc662c5bdbb0d40af9fb4678fab9e/tests%2Fui%2Fconst_prop%2Fconst-prop-read-static-in-const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/473f916d836cc662c5bdbb0d40af9fb4678fab9e/tests%2Fui%2Fconst_prop%2Fconst-prop-read-static-in-const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst_prop%2Fconst-prop-read-static-in-const.stderr?ref=473f916d836cc662c5bdbb0d40af9fb4678fab9e", "previous_filename": "tests/ui/consts/const-prop-read-static-in-const.stderr"}, {"sha": "c725b3238ea64bad3f7c774b5f12f8aedb47c59c", "filename": "tests/ui/const_prop/unsized-local-ice.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/473f916d836cc662c5bdbb0d40af9fb4678fab9e/tests%2Fui%2Fconst_prop%2Funsized-local-ice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/473f916d836cc662c5bdbb0d40af9fb4678fab9e/tests%2Fui%2Fconst_prop%2Funsized-local-ice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst_prop%2Funsized-local-ice.rs?ref=473f916d836cc662c5bdbb0d40af9fb4678fab9e", "patch": "@@ -0,0 +1,9 @@\n+// build-pass\n+//! Regression test for <https://github.com/rust-lang/rust/issues/68538>.\n+#![feature(unsized_fn_params)]\n+\n+pub fn take_unsized_slice(s: [u8]) {\n+    s[0];\n+}\n+\n+fn main() {}"}, {"sha": "533cb0ce5bcc5af0a0dc79fecdda430a05a491a2", "filename": "tests/ui/feature-gates/feature-gate-negative_bounds.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/473f916d836cc662c5bdbb0d40af9fb4678fab9e/tests%2Fui%2Ffeature-gates%2Ffeature-gate-negative_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/473f916d836cc662c5bdbb0d40af9fb4678fab9e/tests%2Fui%2Ffeature-gates%2Ffeature-gate-negative_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffeature-gates%2Ffeature-gate-negative_bounds.rs?ref=473f916d836cc662c5bdbb0d40af9fb4678fab9e", "patch": "@@ -0,0 +1,4 @@\n+fn test<T: !Copy>() {}\n+//~^ ERROR negative bounds are not supported\n+\n+fn main() {}"}, {"sha": "ae010fdf3f848d1763d931c44da69b763dfd5122", "filename": "tests/ui/feature-gates/feature-gate-negative_bounds.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/473f916d836cc662c5bdbb0d40af9fb4678fab9e/tests%2Fui%2Ffeature-gates%2Ffeature-gate-negative_bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/473f916d836cc662c5bdbb0d40af9fb4678fab9e/tests%2Fui%2Ffeature-gates%2Ffeature-gate-negative_bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffeature-gates%2Ffeature-gate-negative_bounds.stderr?ref=473f916d836cc662c5bdbb0d40af9fb4678fab9e", "patch": "@@ -0,0 +1,8 @@\n+error: negative bounds are not supported\n+  --> $DIR/feature-gate-negative_bounds.rs:1:12\n+   |\n+LL | fn test<T: !Copy>() {}\n+   |            ^\n+\n+error: aborting due to previous error\n+"}, {"sha": "6aef35f0bb96a541de387ff6ff38f3e8eccac1b9", "filename": "tests/ui/issues/issue-58857.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/473f916d836cc662c5bdbb0d40af9fb4678fab9e/tests%2Fui%2Fissues%2Fissue-58857.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/473f916d836cc662c5bdbb0d40af9fb4678fab9e/tests%2Fui%2Fissues%2Fissue-58857.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-58857.stderr?ref=473f916d836cc662c5bdbb0d40af9fb4678fab9e", "patch": "@@ -1,8 +1,8 @@\n error: negative bounds are not supported\n-  --> $DIR/issue-58857.rs:4:7\n+  --> $DIR/issue-58857.rs:4:9\n    |\n LL | impl<A: !Valid> Conj<A>{}\n-   |       ^^^^^^^^ negative bounds are not supported\n+   |         ^\n \n error: aborting due to previous error\n "}, {"sha": "ed885ae14356633e0043e1fd0fa7ed1ff9c5e622", "filename": "tests/ui/parser/issues/issue-33418.fixed", "status": "removed", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/9b99ff76b28605ad2e2c49e369721ae400e6a665/tests%2Fui%2Fparser%2Fissues%2Fissue-33418.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/9b99ff76b28605ad2e2c49e369721ae400e6a665/tests%2Fui%2Fparser%2Fissues%2Fissue-33418.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fparser%2Fissues%2Fissue-33418.fixed?ref=9b99ff76b28605ad2e2c49e369721ae400e6a665", "patch": "@@ -1,19 +0,0 @@\n-// run-rustfix\n-\n-trait Tr {}\n-//~^ ERROR negative bounds are not supported\n-trait Tr2: SuperA {}\n-//~^ ERROR negative bounds are not supported\n-trait Tr3: SuperB {}\n-//~^ ERROR negative bounds are not supported\n-trait Tr4: SuperB + SuperD {}\n-//~^ ERROR negative bounds are not supported\n-trait Tr5 {}\n-//~^ ERROR negative bounds are not supported\n-\n-trait SuperA {}\n-trait SuperB {}\n-trait SuperC {}\n-trait SuperD {}\n-\n-fn main() {}"}, {"sha": "4ebd5871e53cabeace4d5391b44db1783c3972e5", "filename": "tests/ui/parser/issues/issue-33418.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/473f916d836cc662c5bdbb0d40af9fb4678fab9e/tests%2Fui%2Fparser%2Fissues%2Fissue-33418.rs", "raw_url": "https://github.com/rust-lang/rust/raw/473f916d836cc662c5bdbb0d40af9fb4678fab9e/tests%2Fui%2Fparser%2Fissues%2Fissue-33418.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fparser%2Fissues%2Fissue-33418.rs?ref=473f916d836cc662c5bdbb0d40af9fb4678fab9e", "patch": "@@ -1,16 +1,16 @@\n-// run-rustfix\n-\n trait Tr: !SuperA {}\n //~^ ERROR negative bounds are not supported\n trait Tr2: SuperA + !SuperB {}\n //~^ ERROR negative bounds are not supported\n trait Tr3: !SuperA + SuperB {}\n //~^ ERROR negative bounds are not supported\n trait Tr4: !SuperA + SuperB\n-    + !SuperC + SuperD {}\n+//~^ ERROR negative bounds are not supported\n++ !SuperC + SuperD {}\n //~^ ERROR negative bounds are not supported\n trait Tr5: !SuperA\n-    + !SuperB {}\n+//~^ ERROR negative bounds are not supported\n++ !SuperB {}\n //~^ ERROR negative bounds are not supported\n \n trait SuperA {}"}, {"sha": "b111bcfd24093a0acb951b23fe12250407e1cb16", "filename": "tests/ui/parser/issues/issue-33418.stderr", "status": "modified", "additions": 23, "deletions": 15, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/473f916d836cc662c5bdbb0d40af9fb4678fab9e/tests%2Fui%2Fparser%2Fissues%2Fissue-33418.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/473f916d836cc662c5bdbb0d40af9fb4678fab9e/tests%2Fui%2Fparser%2Fissues%2Fissue-33418.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fparser%2Fissues%2Fissue-33418.stderr?ref=473f916d836cc662c5bdbb0d40af9fb4678fab9e", "patch": "@@ -1,36 +1,44 @@\n error: negative bounds are not supported\n-  --> $DIR/issue-33418.rs:3:9\n+  --> $DIR/issue-33418.rs:1:11\n    |\n LL | trait Tr: !SuperA {}\n-   |         ^^^^^^^^^ negative bounds are not supported\n+   |           ^\n \n error: negative bounds are not supported\n-  --> $DIR/issue-33418.rs:5:19\n+  --> $DIR/issue-33418.rs:3:21\n    |\n LL | trait Tr2: SuperA + !SuperB {}\n-   |                   ^^^^^^^^^ negative bounds are not supported\n+   |                     ^\n \n error: negative bounds are not supported\n-  --> $DIR/issue-33418.rs:7:10\n+  --> $DIR/issue-33418.rs:5:12\n    |\n LL | trait Tr3: !SuperA + SuperB {}\n-   |          ^^^^^^^^^ negative bounds are not supported\n+   |            ^\n \n error: negative bounds are not supported\n-  --> $DIR/issue-33418.rs:9:10\n+  --> $DIR/issue-33418.rs:7:12\n    |\n LL | trait Tr4: !SuperA + SuperB\n-   |          ^^^^^^^^^\n-LL |     + !SuperC + SuperD {}\n-   |     ^^^^^^^^^ negative bounds are not supported\n+   |            ^\n \n error: negative bounds are not supported\n-  --> $DIR/issue-33418.rs:12:10\n+  --> $DIR/issue-33418.rs:9:3\n+   |\n+LL | + !SuperC + SuperD {}\n+   |   ^\n+\n+error: negative bounds are not supported\n+  --> $DIR/issue-33418.rs:11:12\n    |\n LL | trait Tr5: !SuperA\n-   |          ^^^^^^^^^\n-LL |     + !SuperB {}\n-   |     ^^^^^^^^^ negative bounds are not supported\n+   |            ^\n+\n+error: negative bounds are not supported\n+  --> $DIR/issue-33418.rs:13:3\n+   |\n+LL | + !SuperB {}\n+   |   ^\n \n-error: aborting due to 5 previous errors\n+error: aborting due to 7 previous errors\n "}, {"sha": "2c42f9731743e573588738aada1ff21915c1f60d", "filename": "tests/ui/parser/issues/issue-67146-negative-outlives-bound-syntactic-fail.fixed", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/473f916d836cc662c5bdbb0d40af9fb4678fab9e/tests%2Fui%2Fparser%2Fissues%2Fissue-67146-negative-outlives-bound-syntactic-fail.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/473f916d836cc662c5bdbb0d40af9fb4678fab9e/tests%2Fui%2Fparser%2Fissues%2Fissue-67146-negative-outlives-bound-syntactic-fail.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fparser%2Fissues%2Fissue-67146-negative-outlives-bound-syntactic-fail.fixed?ref=473f916d836cc662c5bdbb0d40af9fb4678fab9e", "patch": "@@ -6,9 +6,12 @@\n \n fn main() {}\n \n-pub fn f1<T>() {}\n+pub fn f1<T: 'static>() {}\n //~^ ERROR negative bounds are not supported\n-pub fn f2<'a, T: Ord>() {}\n+//~| ERROR `!` may only modify trait bounds, not lifetime bound\n+pub fn f2<'a, T: Ord + 'a>() {}\n //~^ ERROR negative bounds are not supported\n-pub fn f3<'a, T: Ord>() {}\n+//~| ERROR `!` may only modify trait bounds, not lifetime bound\n+pub fn f3<'a, T: 'a + Ord>() {}\n //~^ ERROR negative bounds are not supported\n+//~| ERROR `!` may only modify trait bounds, not lifetime bound"}, {"sha": "e510efaae5ba2ee10d0f648b461bfc8f18e1fe39", "filename": "tests/ui/parser/issues/issue-67146-negative-outlives-bound-syntactic-fail.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/473f916d836cc662c5bdbb0d40af9fb4678fab9e/tests%2Fui%2Fparser%2Fissues%2Fissue-67146-negative-outlives-bound-syntactic-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/473f916d836cc662c5bdbb0d40af9fb4678fab9e/tests%2Fui%2Fparser%2Fissues%2Fissue-67146-negative-outlives-bound-syntactic-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fparser%2Fissues%2Fissue-67146-negative-outlives-bound-syntactic-fail.rs?ref=473f916d836cc662c5bdbb0d40af9fb4678fab9e", "patch": "@@ -8,7 +8,10 @@ fn main() {}\n \n pub fn f1<T: !'static>() {}\n //~^ ERROR negative bounds are not supported\n+//~| ERROR `!` may only modify trait bounds, not lifetime bound\n pub fn f2<'a, T: Ord + !'a>() {}\n //~^ ERROR negative bounds are not supported\n+//~| ERROR `!` may only modify trait bounds, not lifetime bound\n pub fn f3<'a, T: !'a + Ord>() {}\n //~^ ERROR negative bounds are not supported\n+//~| ERROR `!` may only modify trait bounds, not lifetime bound"}, {"sha": "91fe02db3a606626fee1587fc1107b97f1ce6082", "filename": "tests/ui/parser/issues/issue-67146-negative-outlives-bound-syntactic-fail.stderr", "status": "modified", "additions": 25, "deletions": 7, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/473f916d836cc662c5bdbb0d40af9fb4678fab9e/tests%2Fui%2Fparser%2Fissues%2Fissue-67146-negative-outlives-bound-syntactic-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/473f916d836cc662c5bdbb0d40af9fb4678fab9e/tests%2Fui%2Fparser%2Fissues%2Fissue-67146-negative-outlives-bound-syntactic-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fparser%2Fissues%2Fissue-67146-negative-outlives-bound-syntactic-fail.stderr?ref=473f916d836cc662c5bdbb0d40af9fb4678fab9e", "patch": "@@ -1,20 +1,38 @@\n+error: `!` may only modify trait bounds, not lifetime bounds\n+  --> $DIR/issue-67146-negative-outlives-bound-syntactic-fail.rs:9:14\n+   |\n+LL | pub fn f1<T: !'static>() {}\n+   |              ^\n+\n+error: `!` may only modify trait bounds, not lifetime bounds\n+  --> $DIR/issue-67146-negative-outlives-bound-syntactic-fail.rs:12:24\n+   |\n+LL | pub fn f2<'a, T: Ord + !'a>() {}\n+   |                        ^\n+\n+error: `!` may only modify trait bounds, not lifetime bounds\n+  --> $DIR/issue-67146-negative-outlives-bound-syntactic-fail.rs:15:18\n+   |\n+LL | pub fn f3<'a, T: !'a + Ord>() {}\n+   |                  ^\n+\n error: negative bounds are not supported\n-  --> $DIR/issue-67146-negative-outlives-bound-syntactic-fail.rs:9:12\n+  --> $DIR/issue-67146-negative-outlives-bound-syntactic-fail.rs:9:14\n    |\n LL | pub fn f1<T: !'static>() {}\n-   |            ^^^^^^^^^^ negative bounds are not supported\n+   |              ^\n \n error: negative bounds are not supported\n-  --> $DIR/issue-67146-negative-outlives-bound-syntactic-fail.rs:11:22\n+  --> $DIR/issue-67146-negative-outlives-bound-syntactic-fail.rs:12:24\n    |\n LL | pub fn f2<'a, T: Ord + !'a>() {}\n-   |                      ^^^^^ negative bounds are not supported\n+   |                        ^\n \n error: negative bounds are not supported\n-  --> $DIR/issue-67146-negative-outlives-bound-syntactic-fail.rs:13:16\n+  --> $DIR/issue-67146-negative-outlives-bound-syntactic-fail.rs:15:18\n    |\n LL | pub fn f3<'a, T: !'a + Ord>() {}\n-   |                ^^^^^ negative bounds are not supported\n+   |                  ^\n \n-error: aborting due to 3 previous errors\n+error: aborting due to 6 previous errors\n "}, {"sha": "785ffb1e0f4cbf03312c0e1b3158a2999150d009", "filename": "tests/ui/repr/invalid_repr_list_help.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/473f916d836cc662c5bdbb0d40af9fb4678fab9e/tests%2Fui%2Frepr%2Finvalid_repr_list_help.rs", "raw_url": "https://github.com/rust-lang/rust/raw/473f916d836cc662c5bdbb0d40af9fb4678fab9e/tests%2Fui%2Frepr%2Finvalid_repr_list_help.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frepr%2Finvalid_repr_list_help.rs?ref=473f916d836cc662c5bdbb0d40af9fb4678fab9e", "patch": "@@ -15,3 +15,8 @@ pub struct OwO3 {\n pub enum OwO4 {\n     UwU = 1,\n }\n+\n+#[repr(uwu)] //~ERROR: unrecognized representation hint\n+#[doc(owo)]  //~WARN: unknown `doc` attribute\n+             //~^ WARN: this was previously\n+pub struct Owo5;"}, {"sha": "48a6af3dd4c11ce518180faad53e2bd77861a13a", "filename": "tests/ui/repr/invalid_repr_list_help.stderr", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/473f916d836cc662c5bdbb0d40af9fb4678fab9e/tests%2Fui%2Frepr%2Finvalid_repr_list_help.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/473f916d836cc662c5bdbb0d40af9fb4678fab9e/tests%2Fui%2Frepr%2Finvalid_repr_list_help.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frepr%2Finvalid_repr_list_help.stderr?ref=473f916d836cc662c5bdbb0d40af9fb4678fab9e", "patch": "@@ -30,6 +30,24 @@ LL | #[repr(uwu, u8)]\n    |\n    = help: valid reprs are `C`, `align`, `packed`, `transparent`, `simd`, `i8`, `u8`, `i16`, `u16`, `i32`, `u32`, `i64`, `u64`, `i128`, `u128`, `isize`, `usize`\n \n-error: aborting due to 4 previous errors\n+warning: unknown `doc` attribute `owo`\n+  --> $DIR/invalid_repr_list_help.rs:20:7\n+   |\n+LL | #[doc(owo)]\n+   |       ^^^\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #82730 <https://github.com/rust-lang/rust/issues/82730>\n+   = note: `#[warn(invalid_doc_attributes)]` on by default\n+\n+error[E0552]: unrecognized representation hint\n+  --> $DIR/invalid_repr_list_help.rs:19:8\n+   |\n+LL | #[repr(uwu)]\n+   |        ^^^\n+   |\n+   = help: valid reprs are `C`, `align`, `packed`, `transparent`, `simd`, `i8`, `u8`, `i16`, `u16`, `i32`, `u32`, `i64`, `u64`, `i128`, `u128`, `isize`, `usize`\n+\n+error: aborting due to 5 previous errors; 1 warning emitted\n \n For more information about this error, try `rustc --explain E0552`."}, {"sha": "bc1a0ef1708378e75ae27d86e997b149c47076c8", "filename": "tests/ui/traits/negative-bounds/associated-constraints.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/473f916d836cc662c5bdbb0d40af9fb4678fab9e/tests%2Fui%2Ftraits%2Fnegative-bounds%2Fassociated-constraints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/473f916d836cc662c5bdbb0d40af9fb4678fab9e/tests%2Fui%2Ftraits%2Fnegative-bounds%2Fassociated-constraints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fnegative-bounds%2Fassociated-constraints.rs?ref=473f916d836cc662c5bdbb0d40af9fb4678fab9e", "patch": "@@ -0,0 +1,20 @@\n+#![feature(negative_bounds, associated_type_bounds)]\n+//~^ WARN the feature `negative_bounds` is incomplete and may not be safe to use and/or cause compiler crashes\n+\n+trait Trait {\n+    type Assoc;\n+}\n+\n+fn test<T: !Trait<Assoc = i32>>() {}\n+//~^ ERROR associated type constraints not allowed on negative bounds\n+\n+fn test2<T>() where T: !Trait<Assoc = i32> {}\n+//~^ ERROR associated type constraints not allowed on negative bounds\n+\n+fn test3<T: !Trait<Assoc: Send>>() {}\n+//~^ ERROR associated type constraints not allowed on negative bounds\n+\n+fn test4<T>() where T: !Trait<Assoc: Send> {}\n+//~^ ERROR associated type constraints not allowed on negative bounds\n+\n+fn main() {}"}, {"sha": "335ac7e5ad903f6c702eb3cc2a41e1e4f18459b4", "filename": "tests/ui/traits/negative-bounds/associated-constraints.stderr", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/473f916d836cc662c5bdbb0d40af9fb4678fab9e/tests%2Fui%2Ftraits%2Fnegative-bounds%2Fassociated-constraints.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/473f916d836cc662c5bdbb0d40af9fb4678fab9e/tests%2Fui%2Ftraits%2Fnegative-bounds%2Fassociated-constraints.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fnegative-bounds%2Fassociated-constraints.stderr?ref=473f916d836cc662c5bdbb0d40af9fb4678fab9e", "patch": "@@ -0,0 +1,34 @@\n+error: associated type constraints not allowed on negative bounds\n+  --> $DIR/associated-constraints.rs:8:19\n+   |\n+LL | fn test<T: !Trait<Assoc = i32>>() {}\n+   |                   ^^^^^^^^^^^\n+\n+error: associated type constraints not allowed on negative bounds\n+  --> $DIR/associated-constraints.rs:11:31\n+   |\n+LL | fn test2<T>() where T: !Trait<Assoc = i32> {}\n+   |                               ^^^^^^^^^^^\n+\n+error: associated type constraints not allowed on negative bounds\n+  --> $DIR/associated-constraints.rs:14:20\n+   |\n+LL | fn test3<T: !Trait<Assoc: Send>>() {}\n+   |                    ^^^^^^^^^^^\n+\n+error: associated type constraints not allowed on negative bounds\n+  --> $DIR/associated-constraints.rs:17:31\n+   |\n+LL | fn test4<T>() where T: !Trait<Assoc: Send> {}\n+   |                               ^^^^^^^^^^^\n+\n+warning: the feature `negative_bounds` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/associated-constraints.rs:1:12\n+   |\n+LL | #![feature(negative_bounds, associated_type_bounds)]\n+   |            ^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+\n+error: aborting due to 4 previous errors; 1 warning emitted\n+"}, {"sha": "f6d1d5169c4fc51e3cd407b1ce88dc8a55cd396c", "filename": "tests/ui/traits/negative-bounds/simple.rs", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/473f916d836cc662c5bdbb0d40af9fb4678fab9e/tests%2Fui%2Ftraits%2Fnegative-bounds%2Fsimple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/473f916d836cc662c5bdbb0d40af9fb4678fab9e/tests%2Fui%2Ftraits%2Fnegative-bounds%2Fsimple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fnegative-bounds%2Fsimple.rs?ref=473f916d836cc662c5bdbb0d40af9fb4678fab9e", "patch": "@@ -0,0 +1,42 @@\n+#![feature(negative_bounds, negative_impls)]\n+//~^ WARN the feature `negative_bounds` is incomplete and may not be safe to use and/or cause compiler crashes\n+\n+fn not_copy<T: !Copy>() {}\n+\n+fn neg_param_env<T: !Copy>() {\n+    not_copy::<T>();\n+}\n+\n+fn pos_param_env<T: Copy>() {\n+    not_copy::<T>();\n+    //~^ ERROR the trait bound `T: !Copy` is not satisfied\n+}\n+\n+fn unknown<T>() {\n+    not_copy::<T>();\n+    //~^ ERROR the trait bound `T: !Copy` is not satisfied\n+}\n+\n+struct NotCopyable;\n+impl !Copy for NotCopyable {}\n+\n+fn neg_impl() {\n+    not_copy::<NotCopyable>();\n+}\n+\n+#[derive(Copy, Clone)]\n+struct Copyable;\n+\n+fn pos_impl() {\n+    not_copy::<Copyable>();\n+    //~^ ERROR the trait bound `Copyable: !Copy` is not satisfied\n+}\n+\n+struct NotNecessarilyCopyable;\n+\n+fn unknown_impl() {\n+    not_copy::<NotNecessarilyCopyable>();\n+    //~^ ERROR the trait bound `NotNecessarilyCopyable: !Copy` is not satisfied\n+}\n+\n+fn main() {}"}, {"sha": "a3cab41a2ce0f247d7a3ed03bb0ca0571a69fff8", "filename": "tests/ui/traits/negative-bounds/simple.stderr", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/473f916d836cc662c5bdbb0d40af9fb4678fab9e/tests%2Fui%2Ftraits%2Fnegative-bounds%2Fsimple.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/473f916d836cc662c5bdbb0d40af9fb4678fab9e/tests%2Fui%2Ftraits%2Fnegative-bounds%2Fsimple.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fnegative-bounds%2Fsimple.stderr?ref=473f916d836cc662c5bdbb0d40af9fb4678fab9e", "patch": "@@ -0,0 +1,70 @@\n+warning: the feature `negative_bounds` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/simple.rs:1:12\n+   |\n+LL | #![feature(negative_bounds, negative_impls)]\n+   |            ^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+\n+error[E0277]: the trait bound `T: !Copy` is not satisfied\n+  --> $DIR/simple.rs:11:16\n+   |\n+LL |     not_copy::<T>();\n+   |                ^ the trait `!Copy` is not implemented for `T`\n+   |\n+note: required by a bound in `not_copy`\n+  --> $DIR/simple.rs:4:16\n+   |\n+LL | fn not_copy<T: !Copy>() {}\n+   |                ^^^^^ required by this bound in `not_copy`\n+\n+error[E0277]: the trait bound `T: !Copy` is not satisfied\n+  --> $DIR/simple.rs:16:16\n+   |\n+LL |     not_copy::<T>();\n+   |                ^ the trait `!Copy` is not implemented for `T`\n+   |\n+note: required by a bound in `not_copy`\n+  --> $DIR/simple.rs:4:16\n+   |\n+LL | fn not_copy<T: !Copy>() {}\n+   |                ^^^^^ required by this bound in `not_copy`\n+\n+error[E0277]: the trait bound `Copyable: !Copy` is not satisfied\n+  --> $DIR/simple.rs:31:16\n+   |\n+LL |     not_copy::<Copyable>();\n+   |                ^^^^^^^^ the trait `!Copy` is not implemented for `Copyable`\n+   |\n+   = help: the trait `Copy` is implemented for `Copyable`\n+note: required by a bound in `not_copy`\n+  --> $DIR/simple.rs:4:16\n+   |\n+LL | fn not_copy<T: !Copy>() {}\n+   |                ^^^^^ required by this bound in `not_copy`\n+help: consider annotating `Copyable` with `#[derive(Copy)]`\n+   |\n+LL + #[derive(Copy)]\n+LL | struct Copyable;\n+   |\n+\n+error[E0277]: the trait bound `NotNecessarilyCopyable: !Copy` is not satisfied\n+  --> $DIR/simple.rs:38:16\n+   |\n+LL |     not_copy::<NotNecessarilyCopyable>();\n+   |                ^^^^^^^^^^^^^^^^^^^^^^ the trait `!Copy` is not implemented for `NotNecessarilyCopyable`\n+   |\n+note: required by a bound in `not_copy`\n+  --> $DIR/simple.rs:4:16\n+   |\n+LL | fn not_copy<T: !Copy>() {}\n+   |                ^^^^^ required by this bound in `not_copy`\n+help: consider annotating `NotNecessarilyCopyable` with `#[derive(Copy)]`\n+   |\n+LL + #[derive(Copy)]\n+LL | struct NotNecessarilyCopyable;\n+   |\n+\n+error: aborting due to 4 previous errors; 1 warning emitted\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "cdb23372c4ba5c4e273e603997395c33de64b02c", "filename": "tests/ui/typeck/bad-index-due-to-nested.stderr", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/473f916d836cc662c5bdbb0d40af9fb4678fab9e/tests%2Fui%2Ftypeck%2Fbad-index-due-to-nested.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/473f916d836cc662c5bdbb0d40af9fb4678fab9e/tests%2Fui%2Ftypeck%2Fbad-index-due-to-nested.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftypeck%2Fbad-index-due-to-nested.stderr?ref=473f916d836cc662c5bdbb0d40af9fb4678fab9e", "patch": "@@ -4,11 +4,14 @@ error[E0277]: the trait bound `K: Hash` is not satisfied\n LL |     map[k]\n    |     ^^^ the trait `Hash` is not implemented for `K`\n    |\n-note: required by a bound in `<HashMap<K, V> as Index<&K>>`\n-  --> $DIR/bad-index-due-to-nested.rs:9:8\n+note: required for `HashMap<K, V>` to implement `Index<&K>`\n+  --> $DIR/bad-index-due-to-nested.rs:7:12\n    |\n+LL | impl<K, V> Index<&K> for HashMap<K, V>\n+   |            ^^^^^^^^^     ^^^^^^^^^^^^^\n+LL | where\n LL |     K: Hash,\n-   |        ^^^^ required by this bound in `<HashMap<K, V> as Index<&K>>`\n+   |        ---- unsatisfied trait bound introduced here\n help: consider restricting type parameter `K`\n    |\n LL | fn index<'a, K: std::hash::Hash, V>(map: &'a HashMap<K, V>, k: K) -> &'a V {\n@@ -20,11 +23,14 @@ error[E0277]: the trait bound `V: Copy` is not satisfied\n LL |     map[k]\n    |     ^^^ the trait `Copy` is not implemented for `V`\n    |\n-note: required by a bound in `<HashMap<K, V> as Index<&K>>`\n-  --> $DIR/bad-index-due-to-nested.rs:10:8\n+note: required for `HashMap<K, V>` to implement `Index<&K>`\n+  --> $DIR/bad-index-due-to-nested.rs:7:12\n    |\n+LL | impl<K, V> Index<&K> for HashMap<K, V>\n+   |            ^^^^^^^^^     ^^^^^^^^^^^^^\n+...\n LL |     V: Copy,\n-   |        ^^^^ required by this bound in `<HashMap<K, V> as Index<&K>>`\n+   |        ---- unsatisfied trait bound introduced here\n help: consider restricting type parameter `V`\n    |\n LL | fn index<'a, K, V: std::marker::Copy>(map: &'a HashMap<K, V>, k: K) -> &'a V {"}, {"sha": "54c8b2060c52666d67f875914ff2242624a98590", "filename": "triagebot.toml", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/473f916d836cc662c5bdbb0d40af9fb4678fab9e/triagebot.toml", "raw_url": "https://github.com/rust-lang/rust/raw/473f916d836cc662c5bdbb0d40af9fb4678fab9e/triagebot.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/triagebot.toml?ref=473f916d836cc662c5bdbb0d40af9fb4678fab9e", "patch": "@@ -475,10 +475,10 @@ cc = [\"@rust-lang/style\"]\n \n [mentions.\"Cargo.lock\"]\n message = \"\"\"\n-These commits modify the `Cargo.lock` file. Random changes to `Cargo.lock` can be introduced when switching branches and rebasing PRs.\n-This was probably unintentional and should be reverted before this PR is merged.\n+These commits modify the `Cargo.lock` file. Unintentional changes to `Cargo.lock` can be introduced when switching branches and rebasing PRs.\n \n-If this was intentional then you can ignore this comment.\n+If this was unintentional then you should revert the changes before this PR is merged.\n+Otherwise, you can ignore this comment.\n \"\"\"\n \n [mentions.\"src/tools/x\"]\n@@ -489,6 +489,14 @@ message = \"This PR changes src/bootstrap/defaults/config.compiler.toml. If appro\n [mentions.\"src/bootstrap/defaults/config.codegen.toml\"]\n message = \"This PR changes src/bootstrap/defaults/config.codegen.toml. If appropriate, please also update `config.compiler.toml` so the defaults are in sync.\"\n \n+[mentions.\"tests/ui/deriving/deriving-all-codegen.stdout\"]\n+message = \"Changes to the code generated for builtin derived traits.\"\n+cc = [\"@nnethercote\"]\n+\n+[mentions.\"tests/ui/stats/hir-stats.stderr\"]\n+message = \"Changes to the size of AST and/or HIR nodes.\"\n+cc = [\"@nnethercote\"]\n+\n [assign]\n warn_non_default_branch = true\n contributing_url = \"https://rustc-dev-guide.rust-lang.org/getting-started.html\""}]}