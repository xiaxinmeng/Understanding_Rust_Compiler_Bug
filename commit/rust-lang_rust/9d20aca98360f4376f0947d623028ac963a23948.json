{"sha": "9d20aca98360f4376f0947d623028ac963a23948", "node_id": "C_kwDOAAsO6NoAKDlkMjBhY2E5ODM2MGY0Mzc2ZjA5NDdkNjIzMDI4YWM5NjNhMjM5NDg", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-11-06T19:46:55Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-11-13T14:06:51Z"}, "message": "Store a LocalDefId in hir::Variant & hir::Field.", "tree": {"sha": "9b9933ef9504f2c730f3423e859bb0f2a93fdf41", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9b9933ef9504f2c730f3423e859bb0f2a93fdf41"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9d20aca98360f4376f0947d623028ac963a23948", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9d20aca98360f4376f0947d623028ac963a23948", "html_url": "https://github.com/rust-lang/rust/commit/9d20aca98360f4376f0947d623028ac963a23948", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9d20aca98360f4376f0947d623028ac963a23948/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "607d0c2a14c4f5f6c7341f8879c9bc80414f5080", "url": "https://api.github.com/repos/rust-lang/rust/commits/607d0c2a14c4f5f6c7341f8879c9bc80414f5080", "html_url": "https://github.com/rust-lang/rust/commit/607d0c2a14c4f5f6c7341f8879c9bc80414f5080"}], "stats": {"total": 271, "additions": 122, "deletions": 149}, "files": [{"sha": "3a0e5f55ec1e48b3422242b3e240e65ad8fd3941", "filename": "compiler/rustc_ast_lowering/src/index.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9d20aca98360f4376f0947d623028ac963a23948/compiler%2Frustc_ast_lowering%2Fsrc%2Findex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d20aca98360f4376f0947d623028ac963a23948/compiler%2Frustc_ast_lowering%2Fsrc%2Findex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Findex.rs?ref=9d20aca98360f4376f0947d623028ac963a23948", "patch": "@@ -307,8 +307,8 @@ impl<'a, 'hir> Visitor<'hir> for NodeCollector<'a, 'hir> {\n     }\n \n     fn visit_variant(&mut self, v: &'hir Variant<'hir>) {\n-        self.insert(v.span, v.id, Node::Variant(v));\n-        self.with_parent(v.id, |this| {\n+        self.insert(v.span, v.hir_id, Node::Variant(v));\n+        self.with_parent(v.hir_id, |this| {\n             // Register the constructor of this variant.\n             if let Some(ctor_hir_id) = v.data.ctor_hir_id() {\n                 this.insert(v.span, ctor_hir_id, Node::Ctor(&v.data));"}, {"sha": "756f35e901d9d204dc0477cbb498c6862c345e6d", "filename": "compiler/rustc_ast_lowering/src/item.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/9d20aca98360f4376f0947d623028ac963a23948/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d20aca98360f4376f0947d623028ac963a23948/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs?ref=9d20aca98360f4376f0947d623028ac963a23948", "patch": "@@ -709,11 +709,12 @@ impl<'hir> LoweringContext<'_, 'hir> {\n     }\n \n     fn lower_variant(&mut self, v: &Variant) -> hir::Variant<'hir> {\n-        let id = self.lower_node_id(v.id);\n-        self.lower_attrs(id, &v.attrs);\n+        let hir_id = self.lower_node_id(v.id);\n+        self.lower_attrs(hir_id, &v.attrs);\n         hir::Variant {\n-            id,\n-            data: self.lower_variant_data(id, &v.data),\n+            hir_id,\n+            def_id: self.local_def_id(v.id),\n+            data: self.lower_variant_data(hir_id, &v.data),\n             disr_expr: v.disr_expr.as_ref().map(|e| self.lower_anon_const(e)),\n             ident: self.lower_ident(v.ident),\n             span: self.lower_span(v.span),\n@@ -739,12 +740,13 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                         fields.iter().enumerate().map(|f| self.lower_field_def(f)),\n                     ),\n                     ctor_id,\n+                    self.local_def_id(id),\n                 )\n             }\n             VariantData::Unit(id) => {\n                 let ctor_id = self.lower_node_id(id);\n                 self.alias_attrs(ctor_id, parent_id);\n-                hir::VariantData::Unit(ctor_id)\n+                hir::VariantData::Unit(ctor_id, self.local_def_id(id))\n             }\n         }\n     }\n@@ -767,6 +769,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         hir::FieldDef {\n             span: self.lower_span(f.span),\n             hir_id,\n+            def_id: self.local_def_id(f.id),\n             ident: match f.ident {\n                 Some(ident) => self.lower_ident(ident),\n                 // FIXME(jseyfried): positional field hygiene."}, {"sha": "7d8b859a6b4077a76edb6330f132624b832b8f65", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 15, "deletions": 5, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/9d20aca98360f4376f0947d623028ac963a23948/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d20aca98360f4376f0947d623028ac963a23948/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=9d20aca98360f4376f0947d623028ac963a23948", "patch": "@@ -2801,7 +2801,8 @@ pub struct Variant<'hir> {\n     /// Name of the variant.\n     pub ident: Ident,\n     /// Id of the variant (not the constructor, see `VariantData::ctor_hir_id()`).\n-    pub id: HirId,\n+    pub hir_id: HirId,\n+    pub def_id: LocalDefId,\n     /// Fields and constructor id of the variant.\n     pub data: VariantData<'hir>,\n     /// Explicit discriminant (e.g., `Foo = 1`).\n@@ -2868,6 +2869,7 @@ pub struct FieldDef<'hir> {\n     pub vis_span: Span,\n     pub ident: Ident,\n     pub hir_id: HirId,\n+    pub def_id: LocalDefId,\n     pub ty: &'hir Ty<'hir>,\n }\n \n@@ -2889,11 +2891,11 @@ pub enum VariantData<'hir> {\n     /// A tuple variant.\n     ///\n     /// E.g., `Bar(..)` as in `enum Foo { Bar(..) }`.\n-    Tuple(&'hir [FieldDef<'hir>], HirId),\n+    Tuple(&'hir [FieldDef<'hir>], HirId, LocalDefId),\n     /// A unit variant.\n     ///\n     /// E.g., `Bar = ..` as in `enum Foo { Bar = .. }`.\n-    Unit(HirId),\n+    Unit(HirId, LocalDefId),\n }\n \n impl<'hir> VariantData<'hir> {\n@@ -2905,11 +2907,19 @@ impl<'hir> VariantData<'hir> {\n         }\n     }\n \n+    /// Return the `LocalDefId` of this variant's constructor, if it has one.\n+    pub fn ctor_def_id(&self) -> Option<LocalDefId> {\n+        match *self {\n+            VariantData::Struct(_, _) => None,\n+            VariantData::Tuple(_, _, def_id) | VariantData::Unit(_, def_id) => Some(def_id),\n+        }\n+    }\n+\n     /// Return the `HirId` of this variant's constructor, if it has one.\n     pub fn ctor_hir_id(&self) -> Option<HirId> {\n         match *self {\n             VariantData::Struct(_, _) => None,\n-            VariantData::Tuple(_, hir_id) | VariantData::Unit(hir_id) => Some(hir_id),\n+            VariantData::Tuple(_, hir_id, _) | VariantData::Unit(hir_id, _) => Some(hir_id),\n         }\n     }\n }\n@@ -3535,7 +3545,7 @@ impl<'hir> Node<'hir> {\n     /// Get the fields for the tuple-constructor,\n     /// if this node is a tuple constructor, otherwise None\n     pub fn tuple_fields(&self) -> Option<&'hir [FieldDef<'hir>]> {\n-        if let Node::Ctor(&VariantData::Tuple(fields, _)) = self { Some(fields) } else { None }\n+        if let Node::Ctor(&VariantData::Tuple(fields, _, _)) = self { Some(fields) } else { None }\n     }\n }\n "}, {"sha": "48db93fde9d4c8b82c3e89128d9ddad00ca2107f", "filename": "compiler/rustc_hir/src/intravisit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d20aca98360f4376f0947d623028ac963a23948/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d20aca98360f4376f0947d623028ac963a23948/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs?ref=9d20aca98360f4376f0947d623028ac963a23948", "patch": "@@ -1085,7 +1085,7 @@ pub fn walk_enum_def<'v, V: Visitor<'v>>(\n \n pub fn walk_variant<'v, V: Visitor<'v>>(visitor: &mut V, variant: &'v Variant<'v>) {\n     visitor.visit_ident(variant.ident);\n-    visitor.visit_id(variant.id);\n+    visitor.visit_id(variant.hir_id);\n     visitor.visit_variant_data(&variant.data);\n     walk_list!(visitor, visit_anon_const, &variant.disr_expr);\n }"}, {"sha": "2f64a88f03afee960de39d40c1ecdab032e55fd3", "filename": "compiler/rustc_hir_analysis/src/collect.rs", "status": "modified", "additions": 16, "deletions": 26, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/9d20aca98360f4376f0947d623028ac963a23948/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d20aca98360f4376f0947d623028ac963a23948/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect.rs?ref=9d20aca98360f4376f0947d623028ac963a23948", "patch": "@@ -633,14 +633,12 @@ fn convert_item(tcx: TyCtxt<'_>, item_id: hir::ItemId) {\n             tcx.ensure().predicates_of(def_id);\n \n             for f in struct_def.fields() {\n-                let def_id = tcx.hir().local_def_id(f.hir_id);\n-                tcx.ensure().generics_of(def_id);\n-                tcx.ensure().type_of(def_id);\n-                tcx.ensure().predicates_of(def_id);\n+                tcx.ensure().generics_of(f.def_id);\n+                tcx.ensure().type_of(f.def_id);\n+                tcx.ensure().predicates_of(f.def_id);\n             }\n \n-            if let Some(ctor_hir_id) = struct_def.ctor_hir_id() {\n-                let ctor_def_id = tcx.hir().local_def_id(ctor_hir_id);\n+            if let Some(ctor_def_id) = struct_def.ctor_def_id() {\n                 convert_variant_ctor(tcx, ctor_def_id);\n             }\n         }\n@@ -817,7 +815,6 @@ fn convert_variant(\n         .fields()\n         .iter()\n         .map(|f| {\n-            let fid = tcx.hir().local_def_id(f.hir_id);\n             let dup_span = seen_fields.get(&f.ident.normalize_to_macros_2_0()).cloned();\n             if let Some(prev_span) = dup_span {\n                 tcx.sess.emit_err(errors::FieldAlreadyDeclared {\n@@ -829,7 +826,11 @@ fn convert_variant(\n                 seen_fields.insert(f.ident.normalize_to_macros_2_0(), f.span);\n             }\n \n-            ty::FieldDef { did: fid.to_def_id(), name: f.ident.name, vis: tcx.visibility(fid) }\n+            ty::FieldDef {\n+                did: f.def_id.to_def_id(),\n+                name: f.ident.name,\n+                vis: tcx.visibility(f.def_id),\n+            }\n         })\n         .collect();\n     let recovered = match def {\n@@ -870,10 +871,6 @@ fn adt_def<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> ty::AdtDef<'tcx> {\n                 .variants\n                 .iter()\n                 .map(|v| {\n-                    let variant_did = Some(tcx.hir().local_def_id(v.id));\n-                    let ctor_did =\n-                        v.data.ctor_hir_id().map(|hir_id| tcx.hir().local_def_id(hir_id));\n-\n                     let discr = if let Some(ref e) = v.disr_expr {\n                         distance_from_explicit = 0;\n                         ty::VariantDiscr::Explicit(e.def_id.to_def_id())\n@@ -884,8 +881,8 @@ fn adt_def<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> ty::AdtDef<'tcx> {\n \n                     convert_variant(\n                         tcx,\n-                        variant_did,\n-                        ctor_did,\n+                        Some(v.def_id),\n+                        v.data.ctor_def_id(),\n                         v.ident,\n                         discr,\n                         &v.data,\n@@ -898,13 +895,10 @@ fn adt_def<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> ty::AdtDef<'tcx> {\n             (AdtKind::Enum, variants)\n         }\n         ItemKind::Struct(ref def, _) => {\n-            let variant_did = None::<LocalDefId>;\n-            let ctor_did = def.ctor_hir_id().map(|hir_id| tcx.hir().local_def_id(hir_id));\n-\n             let variants = std::iter::once(convert_variant(\n                 tcx,\n-                variant_did,\n-                ctor_did,\n+                None,\n+                def.ctor_def_id(),\n                 item.ident,\n                 ty::VariantDiscr::Relative(0),\n                 def,\n@@ -916,13 +910,10 @@ fn adt_def<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> ty::AdtDef<'tcx> {\n             (AdtKind::Struct, variants)\n         }\n         ItemKind::Union(ref def, _) => {\n-            let variant_did = None;\n-            let ctor_did = def.ctor_hir_id().map(|hir_id| tcx.hir().local_def_id(hir_id));\n-\n             let variants = std::iter::once(convert_variant(\n                 tcx,\n-                variant_did,\n-                ctor_did,\n+                None,\n+                def.ctor_def_id(),\n                 item.ident,\n                 ty::VariantDiscr::Relative(0),\n                 def,\n@@ -1182,8 +1173,7 @@ fn fn_sig(tcx: TyCtxt<'_>, def_id: DefId) -> ty::PolyFnSig<'_> {\n \n         Ctor(data) | Variant(hir::Variant { data, .. }) if data.ctor_hir_id().is_some() => {\n             let ty = tcx.type_of(tcx.hir().get_parent_item(hir_id));\n-            let inputs =\n-                data.fields().iter().map(|f| tcx.type_of(tcx.hir().local_def_id(f.hir_id)));\n+            let inputs = data.fields().iter().map(|f| tcx.type_of(f.def_id));\n             ty::Binder::dummy(tcx.mk_fn_sig(\n                 inputs,\n                 ty,"}, {"sha": "d70ec94f5b61ff5a53e151b915493b191c3867f1", "filename": "compiler/rustc_hir_pretty/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d20aca98360f4376f0947d623028ac963a23948/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d20aca98360f4376f0947d623028ac963a23948/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs?ref=9d20aca98360f4376f0947d623028ac963a23948", "patch": "@@ -754,7 +754,7 @@ impl<'a> State<'a> {\n         for v in variants {\n             self.space_if_not_bol();\n             self.maybe_print_comment(v.span.lo());\n-            self.print_outer_attributes(self.attrs(v.id));\n+            self.print_outer_attributes(self.attrs(v.hir_id));\n             self.ibox(INDENT_UNIT);\n             self.print_variant(v);\n             self.word(\",\");"}, {"sha": "e35bba09d4b154e73435aeb37fa7437f04413c7f", "filename": "compiler/rustc_lint/src/builtin.rs", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/9d20aca98360f4376f0947d623028ac963a23948/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d20aca98360f4376f0947d623028ac963a23948/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs?ref=9d20aca98360f4376f0947d623028ac963a23948", "patch": "@@ -185,9 +185,8 @@ impl<'tcx> LateLintPass<'tcx> for BoxPointers {\n         // If it's a struct, we also have to check the fields' types\n         match it.kind {\n             hir::ItemKind::Struct(ref struct_def, _) | hir::ItemKind::Union(ref struct_def, _) => {\n-                for struct_field in struct_def.fields() {\n-                    let def_id = cx.tcx.hir().local_def_id(struct_field.hir_id);\n-                    self.check_heap_type(cx, struct_field.span, cx.tcx.type_of(def_id));\n+                for field in struct_def.fields() {\n+                    self.check_heap_type(cx, field.span, cx.tcx.type_of(field.def_id));\n                 }\n             }\n             _ => (),\n@@ -673,13 +672,12 @@ impl<'tcx> LateLintPass<'tcx> for MissingDoc {\n \n     fn check_field_def(&mut self, cx: &LateContext<'_>, sf: &hir::FieldDef<'_>) {\n         if !sf.is_positional() {\n-            let def_id = cx.tcx.hir().local_def_id(sf.hir_id);\n-            self.check_missing_docs_attrs(cx, def_id, \"a\", \"struct field\")\n+            self.check_missing_docs_attrs(cx, sf.def_id, \"a\", \"struct field\")\n         }\n     }\n \n     fn check_variant(&mut self, cx: &LateContext<'_>, v: &hir::Variant<'_>) {\n-        self.check_missing_docs_attrs(cx, cx.tcx.hir().local_def_id(v.id), \"a\", \"variant\");\n+        self.check_missing_docs_attrs(cx, v.def_id, \"a\", \"variant\");\n     }\n }\n \n@@ -1424,11 +1422,10 @@ impl<'tcx> LateLintPass<'tcx> for UnreachablePub {\n \n     fn check_field_def(&mut self, cx: &LateContext<'_>, field: &hir::FieldDef<'_>) {\n         let map = cx.tcx.hir();\n-        let def_id = map.local_def_id(field.hir_id);\n         if matches!(map.get(map.get_parent_node(field.hir_id)), Node::Variant(_)) {\n             return;\n         }\n-        self.perform_lint(cx, \"field\", def_id, field.vis_span, false);\n+        self.perform_lint(cx, \"field\", field.def_id, field.vis_span, false);\n     }\n \n     fn check_impl_item(&mut self, cx: &LateContext<'_>, impl_item: &hir::ImplItem<'_>) {"}, {"sha": "f484e31ba15088489840cd6c982a96d1784d33d1", "filename": "compiler/rustc_lint/src/late.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d20aca98360f4376f0947d623028ac963a23948/compiler%2Frustc_lint%2Fsrc%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d20aca98360f4376f0947d623028ac963a23948/compiler%2Frustc_lint%2Fsrc%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flate.rs?ref=9d20aca98360f4376f0947d623028ac963a23948", "patch": "@@ -205,7 +205,7 @@ impl<'tcx, T: LateLintPass<'tcx>> hir_visit::Visitor<'tcx> for LateContextAndPas\n     }\n \n     fn visit_variant(&mut self, v: &'tcx hir::Variant<'tcx>) {\n-        self.with_lint_attrs(v.id, |cx| {\n+        self.with_lint_attrs(v.hir_id, |cx| {\n             lint_callback!(cx, check_variant, v);\n             hir_visit::walk_variant(cx, v);\n         })"}, {"sha": "847c356b83c0b3c5519771560e2b1f9a7d0d8e4a", "filename": "compiler/rustc_lint/src/levels.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9d20aca98360f4376f0947d623028ac963a23948/compiler%2Frustc_lint%2Fsrc%2Flevels.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d20aca98360f4376f0947d623028ac963a23948/compiler%2Frustc_lint%2Fsrc%2Flevels.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flevels.rs?ref=9d20aca98360f4376f0947d623028ac963a23948", "patch": "@@ -320,7 +320,7 @@ impl<'tcx> Visitor<'tcx> for LintLevelsBuilder<'_, LintLevelQueryMap<'tcx>> {\n     }\n \n     fn visit_variant(&mut self, v: &'tcx hir::Variant<'tcx>) {\n-        self.add_id(v.id);\n+        self.add_id(v.hir_id);\n         intravisit::walk_variant(self, v);\n     }\n \n@@ -392,7 +392,7 @@ impl<'tcx> Visitor<'tcx> for LintLevelsBuilder<'_, QueryMapExpectationsWrapper<'\n     }\n \n     fn visit_variant(&mut self, v: &'tcx hir::Variant<'tcx>) {\n-        self.add_id(v.id);\n+        self.add_id(v.hir_id);\n         intravisit::walk_variant(self, v);\n     }\n "}, {"sha": "e09ac968b603e7d7c4f2e4dd2b70a9826452edfa", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9d20aca98360f4376f0947d623028ac963a23948/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d20aca98360f4376f0947d623028ac963a23948/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=9d20aca98360f4376f0947d623028ac963a23948", "patch": "@@ -1558,9 +1558,7 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n                 // Encode def_ids for each field and method\n                 // for methods, write all the stuff get_trait_method\n                 // needs to know\n-                let ctor = struct_def\n-                    .ctor_hir_id()\n-                    .map(|ctor_hir_id| self.tcx.hir().local_def_id(ctor_hir_id).local_def_index);\n+                let ctor = struct_def.ctor_def_id().map(|ctor_def_id| ctor_def_id.local_def_index);\n \n                 let variant = adt_def.non_enum_variant();\n                 record!(self.tables.variant_data[def_id] <- VariantData {\n@@ -1685,8 +1683,7 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n             hir::ItemKind::Struct(ref struct_def, _) => {\n                 let def = self.tcx.adt_def(item.owner_id.to_def_id());\n                 // If the struct has a constructor, encode it.\n-                if let Some(ctor_hir_id) = struct_def.ctor_hir_id() {\n-                    let ctor_def_id = self.tcx.hir().local_def_id(ctor_hir_id);\n+                if let Some(ctor_def_id) = struct_def.ctor_def_id() {\n                     self.encode_struct_ctor(def, ctor_def_id.to_def_id());\n                 }\n             }"}, {"sha": "012bf602f0fc23b0a7248309b5b5b2545e6fddd8", "filename": "compiler/rustc_mir_transform/src/lib.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9d20aca98360f4376f0947d623028ac963a23948/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d20aca98360f4376f0947d623028ac963a23948/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs?ref=9d20aca98360f4376f0947d623028ac963a23948", "patch": "@@ -217,19 +217,18 @@ fn mir_keys(tcx: TyCtxt<'_>, (): ()) -> FxIndexSet<LocalDefId> {\n \n     // Additionally, tuple struct/variant constructors have MIR, but\n     // they don't have a BodyId, so we need to build them separately.\n-    struct GatherCtors<'a, 'tcx> {\n-        tcx: TyCtxt<'tcx>,\n+    struct GatherCtors<'a> {\n         set: &'a mut FxIndexSet<LocalDefId>,\n     }\n-    impl<'tcx> Visitor<'tcx> for GatherCtors<'_, 'tcx> {\n+    impl<'tcx> Visitor<'tcx> for GatherCtors<'_> {\n         fn visit_variant_data(&mut self, v: &'tcx hir::VariantData<'tcx>) {\n-            if let hir::VariantData::Tuple(_, hir_id) = *v {\n-                self.set.insert(self.tcx.hir().local_def_id(hir_id));\n+            if let hir::VariantData::Tuple(_, _, def_id) = *v {\n+                self.set.insert(def_id);\n             }\n             intravisit::walk_struct_def(self, v)\n         }\n     }\n-    tcx.hir().visit_all_item_likes_in_crate(&mut GatherCtors { tcx, set: &mut set });\n+    tcx.hir().visit_all_item_likes_in_crate(&mut GatherCtors { set: &mut set });\n \n     set\n }"}, {"sha": "6b8cd0713732d34f0eb52dce3b2ff0a2ff32fd51", "filename": "compiler/rustc_passes/src/check_attr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d20aca98360f4376f0947d623028ac963a23948/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d20aca98360f4376f0947d623028ac963a23948/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs?ref=9d20aca98360f4376f0947d623028ac963a23948", "patch": "@@ -2137,7 +2137,7 @@ impl<'tcx> Visitor<'tcx> for CheckAttrVisitor<'tcx> {\n     }\n \n     fn visit_variant(&mut self, variant: &'tcx hir::Variant<'tcx>) {\n-        self.check_attributes(variant.id, variant.span, Target::Variant, None);\n+        self.check_attributes(variant.hir_id, variant.span, Target::Variant, None);\n         intravisit::walk_variant(self, variant)\n     }\n "}, {"sha": "d4722234a8f1e05e2c1b8e3a3a65620649ca3fdd", "filename": "compiler/rustc_passes/src/dead.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9d20aca98360f4376f0947d623028ac963a23948/compiler%2Frustc_passes%2Fsrc%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d20aca98360f4376f0947d623028ac963a23948/compiler%2Frustc_passes%2Fsrc%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fdead.rs?ref=9d20aca98360f4376f0947d623028ac963a23948", "patch": "@@ -362,7 +362,7 @@ impl<'tcx> Visitor<'tcx> for MarkSymbolVisitor<'tcx> {\n         let has_repr_c = self.repr_has_repr_c;\n         let has_repr_simd = self.repr_has_repr_simd;\n         let live_fields = def.fields().iter().filter_map(|f| {\n-            let def_id = tcx.hir().local_def_id(f.hir_id);\n+            let def_id = f.def_id;\n             if has_repr_c || (f.is_positional() && has_repr_simd) {\n                 return Some(def_id);\n             }\n@@ -522,17 +522,13 @@ fn check_item<'tcx>(\n         DefKind::Enum => {\n             let item = tcx.hir().item(id);\n             if let hir::ItemKind::Enum(ref enum_def, _) = item.kind {\n-                let hir = tcx.hir();\n                 if allow_dead_code {\n-                    worklist.extend(\n-                        enum_def.variants.iter().map(|variant| hir.local_def_id(variant.id)),\n-                    );\n+                    worklist.extend(enum_def.variants.iter().map(|variant| variant.def_id));\n                 }\n \n                 for variant in enum_def.variants {\n-                    if let Some(ctor_hir_id) = variant.data.ctor_hir_id() {\n-                        struct_constructors\n-                            .insert(hir.local_def_id(ctor_hir_id), hir.local_def_id(variant.id));\n+                    if let Some(ctor_def_id) = variant.data.ctor_def_id() {\n+                        struct_constructors.insert(ctor_def_id, variant.def_id);\n                     }\n                 }\n             }"}, {"sha": "99efed0b7fb46be15f9d92585c159c7ccf05b7fa", "filename": "compiler/rustc_passes/src/lang_items.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d20aca98360f4376f0947d623028ac963a23948/compiler%2Frustc_passes%2Fsrc%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d20aca98360f4376f0947d623028ac963a23948/compiler%2Frustc_passes%2Fsrc%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Flang_items.rs?ref=9d20aca98360f4376f0947d623028ac963a23948", "patch": "@@ -219,7 +219,7 @@ fn get_lang_items(tcx: TyCtxt<'_>, (): ()) -> LanguageItems {\n             let item = tcx.hir().item(id);\n             if let hir::ItemKind::Enum(def, ..) = &item.kind {\n                 for variant in def.variants {\n-                    collector.check_for_lang(Target::Variant, variant.id);\n+                    collector.check_for_lang(Target::Variant, variant.hir_id);\n                 }\n             }\n         }"}, {"sha": "75834b11a2f58e992931f6a250f98f3d85e0bb94", "filename": "compiler/rustc_passes/src/stability.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/9d20aca98360f4376f0947d623028ac963a23948/compiler%2Frustc_passes%2Fsrc%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d20aca98360f4376f0947d623028ac963a23948/compiler%2Frustc_passes%2Fsrc%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fstability.rs?ref=9d20aca98360f4376f0947d623028ac963a23948", "patch": "@@ -358,9 +358,9 @@ impl<'a, 'tcx> Visitor<'tcx> for Annotator<'a, 'tcx> {\n                 const_stab_inherit = InheritConstStability::Yes;\n             }\n             hir::ItemKind::Struct(ref sd, _) => {\n-                if let Some(ctor_hir_id) = sd.ctor_hir_id() {\n+                if let Some(ctor_def_id) = sd.ctor_def_id() {\n                     self.annotate(\n-                        self.tcx.hir().local_def_id(ctor_hir_id),\n+                        ctor_def_id,\n                         i.span,\n                         None,\n                         AnnotationKind::Required,\n@@ -435,17 +435,17 @@ impl<'a, 'tcx> Visitor<'tcx> for Annotator<'a, 'tcx> {\n \n     fn visit_variant(&mut self, var: &'tcx Variant<'tcx>) {\n         self.annotate(\n-            self.tcx.hir().local_def_id(var.id),\n+            var.def_id,\n             var.span,\n             None,\n             AnnotationKind::Required,\n             InheritDeprecation::Yes,\n             InheritConstStability::No,\n             InheritStability::Yes,\n             |v| {\n-                if let Some(ctor_hir_id) = var.data.ctor_hir_id() {\n+                if let Some(ctor_def_id) = var.data.ctor_def_id() {\n                     v.annotate(\n-                        v.tcx.hir().local_def_id(ctor_hir_id),\n+                        ctor_def_id,\n                         var.span,\n                         None,\n                         AnnotationKind::Required,\n@@ -463,7 +463,7 @@ impl<'a, 'tcx> Visitor<'tcx> for Annotator<'a, 'tcx> {\n \n     fn visit_field_def(&mut self, s: &'tcx FieldDef<'tcx>) {\n         self.annotate(\n-            self.tcx.hir().local_def_id(s.hir_id),\n+            s.def_id,\n             s.span,\n             None,\n             AnnotationKind::Required,\n@@ -593,15 +593,15 @@ impl<'tcx> Visitor<'tcx> for MissingStabilityAnnotations<'tcx> {\n     }\n \n     fn visit_variant(&mut self, var: &'tcx Variant<'tcx>) {\n-        self.check_missing_stability(self.tcx.hir().local_def_id(var.id), var.span);\n-        if let Some(ctor_hir_id) = var.data.ctor_hir_id() {\n-            self.check_missing_stability(self.tcx.hir().local_def_id(ctor_hir_id), var.span);\n+        self.check_missing_stability(var.def_id, var.span);\n+        if let Some(ctor_def_id) = var.data.ctor_def_id() {\n+            self.check_missing_stability(ctor_def_id, var.span);\n         }\n         intravisit::walk_variant(self, var);\n     }\n \n     fn visit_field_def(&mut self, s: &'tcx FieldDef<'tcx>) {\n-        self.check_missing_stability(self.tcx.hir().local_def_id(s.hir_id), s.span);\n+        self.check_missing_stability(s.def_id, s.span);\n         intravisit::walk_field_def(self, s);\n     }\n "}, {"sha": "1d9ae539b60dd997a86dcf7809f06270564b2063", "filename": "compiler/rustc_privacy/src/lib.rs", "status": "modified", "additions": 26, "deletions": 45, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/9d20aca98360f4376f0947d623028ac963a23948/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d20aca98360f4376f0947d623028ac963a23948/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_privacy%2Fsrc%2Flib.rs?ref=9d20aca98360f4376f0947d623028ac963a23948", "patch": "@@ -419,11 +419,6 @@ impl<'tcx> EmbargoVisitor<'tcx> {\n         self.effective_visibilities.public_at_level(def_id)\n     }\n \n-    fn update_with_hir_id(&mut self, hir_id: hir::HirId, level: Option<Level>) -> Option<Level> {\n-        let def_id = self.tcx.hir().local_def_id(hir_id);\n-        self.update(def_id, level)\n-    }\n-\n     /// Updates node level and returns the updated level.\n     fn update(&mut self, def_id: LocalDefId, level: Option<Level>) -> Option<Level> {\n         let old_level = self.get(def_id);\n@@ -573,10 +568,9 @@ impl<'tcx> EmbargoVisitor<'tcx> {\n                     | hir::ItemKind::Union(ref struct_def, _) = item.kind\n                     {\n                         for field in struct_def.fields() {\n-                            let def_id = self.tcx.hir().local_def_id(field.hir_id);\n-                            let field_vis = self.tcx.local_visibility(def_id);\n+                            let field_vis = self.tcx.local_visibility(field.def_id);\n                             if field_vis.is_accessible_from(module, self.tcx) {\n-                                self.reach(def_id, level).ty();\n+                                self.reach(field.def_id, level).ty();\n                             }\n                         }\n                     } else {\n@@ -641,12 +635,12 @@ impl<'tcx> Visitor<'tcx> for EmbargoVisitor<'tcx> {\n         match item.kind {\n             hir::ItemKind::Enum(ref def, _) => {\n                 for variant in def.variants {\n-                    let variant_level = self.update_with_hir_id(variant.id, item_level);\n-                    if let Some(ctor_hir_id) = variant.data.ctor_hir_id() {\n-                        self.update_with_hir_id(ctor_hir_id, item_level);\n+                    let variant_level = self.update(variant.def_id, item_level);\n+                    if let Some(ctor_def_id) = variant.data.ctor_def_id() {\n+                        self.update(ctor_def_id, item_level);\n                     }\n                     for field in variant.data.fields() {\n-                        self.update_with_hir_id(field.hir_id, variant_level);\n+                        self.update(field.def_id, variant_level);\n                     }\n                 }\n             }\n@@ -665,14 +659,13 @@ impl<'tcx> Visitor<'tcx> for EmbargoVisitor<'tcx> {\n                 }\n             }\n             hir::ItemKind::Struct(ref def, _) | hir::ItemKind::Union(ref def, _) => {\n-                if let Some(ctor_hir_id) = def.ctor_hir_id() {\n-                    self.update_with_hir_id(ctor_hir_id, item_level);\n+                if let Some(ctor_def_id) = def.ctor_def_id() {\n+                    self.update(ctor_def_id, item_level);\n                 }\n                 for field in def.fields() {\n-                    let def_id = self.tcx.hir().local_def_id(field.hir_id);\n-                    let vis = self.tcx.visibility(def_id);\n+                    let vis = self.tcx.visibility(field.def_id);\n                     if vis.is_public() {\n-                        self.update_with_hir_id(field.hir_id, item_level);\n+                        self.update(field.def_id, item_level);\n                     }\n                 }\n             }\n@@ -782,18 +775,16 @@ impl<'tcx> Visitor<'tcx> for EmbargoVisitor<'tcx> {\n                     self.reach(item.owner_id.def_id, item_level).generics().predicates();\n                 }\n                 for variant in def.variants {\n-                    let variant_level = self.get(self.tcx.hir().local_def_id(variant.id));\n+                    let variant_level = self.get(variant.def_id);\n                     if variant_level.is_some() {\n                         for field in variant.data.fields() {\n-                            self.reach(self.tcx.hir().local_def_id(field.hir_id), variant_level)\n-                                .ty();\n+                            self.reach(field.def_id, variant_level).ty();\n                         }\n                         // Corner case: if the variant is reachable, but its\n                         // enum is not, make the enum reachable as well.\n                         self.reach(item.owner_id.def_id, variant_level).ty();\n                     }\n-                    if let Some(hir_id) = variant.data.ctor_hir_id() {\n-                        let ctor_def_id = self.tcx.hir().local_def_id(hir_id);\n+                    if let Some(ctor_def_id) = variant.data.ctor_def_id() {\n                         let ctor_level = self.get(ctor_def_id);\n                         if ctor_level.is_some() {\n                             self.reach(item.owner_id.def_id, ctor_level).ty();\n@@ -818,15 +809,13 @@ impl<'tcx> Visitor<'tcx> for EmbargoVisitor<'tcx> {\n                 if item_level.is_some() {\n                     self.reach(item.owner_id.def_id, item_level).generics().predicates();\n                     for field in struct_def.fields() {\n-                        let def_id = self.tcx.hir().local_def_id(field.hir_id);\n-                        let field_level = self.get(def_id);\n+                        let field_level = self.get(field.def_id);\n                         if field_level.is_some() {\n-                            self.reach(def_id, field_level).ty();\n+                            self.reach(field.def_id, field_level).ty();\n                         }\n                     }\n                 }\n-                if let Some(hir_id) = struct_def.ctor_hir_id() {\n-                    let ctor_def_id = self.tcx.hir().local_def_id(hir_id);\n+                if let Some(ctor_def_id) = struct_def.ctor_def_id() {\n                     let ctor_level = self.get(ctor_def_id);\n                     if ctor_level.is_some() {\n                         self.reach(item.owner_id.def_id, ctor_level).ty();\n@@ -957,26 +946,21 @@ impl<'tcx, 'a> Visitor<'tcx> for TestReachabilityVisitor<'tcx, 'a> {\n         match item.kind {\n             hir::ItemKind::Enum(ref def, _) => {\n                 for variant in def.variants.iter() {\n-                    let variant_id = self.tcx.hir().local_def_id(variant.id);\n-                    self.effective_visibility_diagnostic(variant_id);\n-                    if let Some(ctor_hir_id) = variant.data.ctor_hir_id() {\n-                        let ctor_def_id = self.tcx.hir().local_def_id(ctor_hir_id);\n+                    self.effective_visibility_diagnostic(variant.def_id);\n+                    if let Some(ctor_def_id) = variant.data.ctor_def_id() {\n                         self.effective_visibility_diagnostic(ctor_def_id);\n                     }\n                     for field in variant.data.fields() {\n-                        let def_id = self.tcx.hir().local_def_id(field.hir_id);\n-                        self.effective_visibility_diagnostic(def_id);\n+                        self.effective_visibility_diagnostic(field.def_id);\n                     }\n                 }\n             }\n             hir::ItemKind::Struct(ref def, _) | hir::ItemKind::Union(ref def, _) => {\n-                if let Some(ctor_hir_id) = def.ctor_hir_id() {\n-                    let ctor_def_id = self.tcx.hir().local_def_id(ctor_hir_id);\n+                if let Some(ctor_def_id) = def.ctor_def_id() {\n                     self.effective_visibility_diagnostic(ctor_def_id);\n                 }\n                 for field in def.fields() {\n-                    let def_id = self.tcx.hir().local_def_id(field.hir_id);\n-                    self.effective_visibility_diagnostic(def_id);\n+                    self.effective_visibility_diagnostic(field.def_id);\n                 }\n             }\n             _ => {}\n@@ -1719,16 +1703,15 @@ impl<'a, 'tcx> Visitor<'tcx> for ObsoleteVisiblePrivateTypesVisitor<'a, 'tcx> {\n     }\n \n     fn visit_variant(&mut self, v: &'tcx hir::Variant<'tcx>) {\n-        if self.effective_visibilities.is_reachable(self.tcx.hir().local_def_id(v.id)) {\n+        if self.effective_visibilities.is_reachable(v.def_id) {\n             self.in_variant = true;\n             intravisit::walk_variant(self, v);\n             self.in_variant = false;\n         }\n     }\n \n     fn visit_field_def(&mut self, s: &'tcx hir::FieldDef<'tcx>) {\n-        let def_id = self.tcx.hir().local_def_id(s.hir_id);\n-        let vis = self.tcx.visibility(def_id);\n+        let vis = self.tcx.visibility(s.def_id);\n         if vis.is_public() || self.in_variant {\n             intravisit::walk_field_def(self, s);\n         }\n@@ -1982,8 +1965,7 @@ impl<'tcx> PrivateItemsInPublicInterfacesChecker<'tcx> {\n \n                     for variant in def.variants {\n                         for field in variant.data.fields() {\n-                            self.check(self.tcx.hir().local_def_id(field.hir_id), item_visibility)\n-                                .ty();\n+                            self.check(field.def_id, item_visibility).ty();\n                         }\n                     }\n                 }\n@@ -2010,9 +1992,8 @@ impl<'tcx> PrivateItemsInPublicInterfacesChecker<'tcx> {\n                     self.check(item.owner_id.def_id, item_visibility).generics().predicates();\n \n                     for field in struct_def.fields() {\n-                        let def_id = tcx.hir().local_def_id(field.hir_id);\n-                        let field_visibility = tcx.local_visibility(def_id);\n-                        self.check(def_id, min(item_visibility, field_visibility, tcx)).ty();\n+                        let field_visibility = tcx.local_visibility(field.def_id);\n+                        self.check(field.def_id, min(item_visibility, field_visibility, tcx)).ty();\n                     }\n                 }\n             }"}, {"sha": "0e579379ec8ea680fd8e08c1d64d7a9a945d3b27", "filename": "compiler/rustc_save_analysis/src/dump_visitor.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9d20aca98360f4376f0947d623028ac963a23948/compiler%2Frustc_save_analysis%2Fsrc%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d20aca98360f4376f0947d623028ac963a23948/compiler%2Frustc_save_analysis%2Fsrc%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_save_analysis%2Fsrc%2Fdump_visitor.rs?ref=9d20aca98360f4376f0947d623028ac963a23948", "patch": "@@ -527,9 +527,9 @@ impl<'tcx> DumpVisitor<'tcx> {\n                     let value = format!(\"{}::{} {{ {} }}\", enum_data.name, name, fields_str);\n                     if !self.span.filter_generated(name_span) {\n                         let span = self.span_from_span(name_span);\n-                        let id = id_from_hir_id(variant.id, &self.save_ctxt);\n+                        let id = id_from_hir_id(variant.hir_id, &self.save_ctxt);\n                         let parent = Some(id_from_def_id(item.owner_id.to_def_id()));\n-                        let attrs = self.tcx.hir().attrs(variant.id);\n+                        let attrs = self.tcx.hir().attrs(variant.hir_id);\n \n                         self.dumper.dump_def(\n                             &access,\n@@ -552,7 +552,7 @@ impl<'tcx> DumpVisitor<'tcx> {\n                 }\n                 ref v => {\n                     let mut value = format!(\"{}::{}\", enum_data.name, name);\n-                    if let hir::VariantData::Tuple(fields, _) = v {\n+                    if let hir::VariantData::Tuple(fields, _, _) = v {\n                         value.push('(');\n                         value.push_str(\n                             &fields\n@@ -565,9 +565,9 @@ impl<'tcx> DumpVisitor<'tcx> {\n                     }\n                     if !self.span.filter_generated(name_span) {\n                         let span = self.span_from_span(name_span);\n-                        let id = id_from_hir_id(variant.id, &self.save_ctxt);\n+                        let id = id_from_hir_id(variant.hir_id, &self.save_ctxt);\n                         let parent = Some(id_from_def_id(item.owner_id.to_def_id()));\n-                        let attrs = self.tcx.hir().attrs(variant.id);\n+                        let attrs = self.tcx.hir().attrs(variant.hir_id);\n \n                         self.dumper.dump_def(\n                             &access,\n@@ -591,7 +591,7 @@ impl<'tcx> DumpVisitor<'tcx> {\n             }\n \n             for field in variant.data.fields() {\n-                self.process_struct_field_def(field, variant.id);\n+                self.process_struct_field_def(field, variant.hir_id);\n                 self.visit_ty(field.ty);\n             }\n         }"}, {"sha": "ffe8edf69b7ad5aebcc5ec59f70c76ccc9f44c4c", "filename": "compiler/rustc_save_analysis/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d20aca98360f4376f0947d623028ac963a23948/compiler%2Frustc_save_analysis%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d20aca98360f4376f0947d623028ac963a23948/compiler%2Frustc_save_analysis%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_save_analysis%2Fsrc%2Flib.rs?ref=9d20aca98360f4376f0947d623028ac963a23948", "patch": "@@ -319,7 +319,7 @@ impl<'tcx> SaveContext<'tcx> {\n                     qualname,\n                     value,\n                     parent: None,\n-                    children: def.variants.iter().map(|v| id_from_hir_id(v.id, self)).collect(),\n+                    children: def.variants.iter().map(|v| id_from_hir_id(v.hir_id, self)).collect(),\n                     decl_id: None,\n                     docs: self.docs_for_attrs(attrs),\n                     sig: sig::item_signature(item, self),"}, {"sha": "9fcba3e46f1d8dd27f89af77eb0a59f46193e296", "filename": "compiler/rustc_save_analysis/src/sig.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9d20aca98360f4376f0947d623028ac963a23948/compiler%2Frustc_save_analysis%2Fsrc%2Fsig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d20aca98360f4376f0947d623028ac963a23948/compiler%2Frustc_save_analysis%2Fsrc%2Fsig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_save_analysis%2Fsrc%2Fsig.rs?ref=9d20aca98360f4376f0947d623028ac963a23948", "patch": "@@ -693,7 +693,7 @@ impl<'hir> Sig for hir::Variant<'hir> {\n                 text.push('}');\n                 Ok(Signature { text, defs, refs })\n             }\n-            hir::VariantData::Tuple(fields, id) => {\n+            hir::VariantData::Tuple(fields, id, _) => {\n                 let name_def = SigElement {\n                     id: id_from_hir_id(id, scx),\n                     start: offset,\n@@ -712,7 +712,7 @@ impl<'hir> Sig for hir::Variant<'hir> {\n                 text.push(')');\n                 Ok(Signature { text, defs, refs })\n             }\n-            hir::VariantData::Unit(id) => {\n+            hir::VariantData::Unit(id, _) => {\n                 let name_def = SigElement {\n                     id: id_from_hir_id(id, scx),\n                     start: offset,"}, {"sha": "7ccfaec9e8b0f0b43862734ea37854c2a6ec79f5", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d20aca98360f4376f0947d623028ac963a23948/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d20aca98360f4376f0947d623028ac963a23948/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=9d20aca98360f4376f0947d623028ac963a23948", "patch": "@@ -2045,7 +2045,7 @@ fn clean_maybe_renamed_item<'tcx>(\n \n fn clean_variant<'tcx>(variant: &hir::Variant<'tcx>, cx: &mut DocContext<'tcx>) -> Item {\n     let kind = VariantItem(clean_variant_data(&variant.data, &variant.disr_expr, cx));\n-    Item::from_hir_id_and_parts(variant.id, Some(variant.ident.name), kind, cx)\n+    Item::from_hir_id_and_parts(variant.hir_id, Some(variant.ident.name), kind, cx)\n }\n \n fn clean_impl<'tcx>("}, {"sha": "cb50c3ae829daa502b53469452f17d2310deb3aa", "filename": "src/librustdoc/doctest.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d20aca98360f4376f0947d623028ac963a23948/src%2Flibrustdoc%2Fdoctest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d20aca98360f4376f0947d623028ac963a23948/src%2Flibrustdoc%2Fdoctest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoctest.rs?ref=9d20aca98360f4376f0947d623028ac963a23948", "patch": "@@ -1293,7 +1293,7 @@ impl<'a, 'hir, 'tcx> intravisit::Visitor<'hir> for HirCollector<'a, 'hir, 'tcx>\n     }\n \n     fn visit_variant(&mut self, v: &'hir hir::Variant<'_>) {\n-        self.visit_testable(v.ident.to_string(), v.id, v.span, |this| {\n+        self.visit_testable(v.ident.to_string(), v.hir_id, v.span, |this| {\n             intravisit::walk_variant(this, v);\n         });\n     }"}, {"sha": "02b22789608691fed717a4f8cfc59a37a79a0a22", "filename": "src/librustdoc/passes/calculate_doc_coverage.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9d20aca98360f4376f0947d623028ac963a23948/src%2Flibrustdoc%2Fpasses%2Fcalculate_doc_coverage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d20aca98360f4376f0947d623028ac963a23948/src%2Flibrustdoc%2Fpasses%2Fcalculate_doc_coverage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcalculate_doc_coverage.rs?ref=9d20aca98360f4376f0947d623028ac963a23948", "patch": "@@ -244,10 +244,10 @@ impl<'a, 'b> DocVisitor for CoverageCalculator<'a, 'b> {\n                         matches!(\n                             node,\n                             hir::Node::Variant(hir::Variant {\n-                                data: hir::VariantData::Tuple(_, _),\n+                                data: hir::VariantData::Tuple(_, _, _),\n                                 ..\n                             }) | hir::Node::Item(hir::Item {\n-                                kind: hir::ItemKind::Struct(hir::VariantData::Tuple(_, _), _),\n+                                kind: hir::ItemKind::Struct(hir::VariantData::Tuple(_, _, _), _),\n                                 ..\n                             })\n                         )"}, {"sha": "9cadd59c3dc9e60aebdd4dd6db892cb932bca88b", "filename": "src/test/ui/stats/hir-stats.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9d20aca98360f4376f0947d623028ac963a23948/src%2Ftest%2Fui%2Fstats%2Fhir-stats.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9d20aca98360f4376f0947d623028ac963a23948/src%2Ftest%2Fui%2Fstats%2Fhir-stats.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstats%2Fhir-stats.stderr?ref=9d20aca98360f4376f0947d623028ac963a23948", "patch": "@@ -140,7 +140,7 @@ hir-stats GenericArg               128 ( 1.4%)             4            32\n hir-stats - Type                      32 ( 0.3%)             1\n hir-stats - Lifetime                  96 ( 1.0%)             3\n hir-stats GenericArgs              144 ( 1.6%)             3            48\n-hir-stats Variant                  160 ( 1.7%)             2            80\n+hir-stats Variant                  176 ( 1.9%)             2            88\n hir-stats GenericBound             192 ( 2.1%)             4            48\n hir-stats - Trait                    192 ( 2.1%)             4\n hir-stats WherePredicate           192 ( 2.1%)             3            64\n@@ -152,7 +152,7 @@ hir-stats - Struct                    72 ( 0.8%)             1\n hir-stats - Binding                  216 ( 2.4%)             3\n hir-stats GenericParam             400 ( 4.4%)             5            80\n hir-stats Generics                 560 ( 6.1%)            10            56\n-hir-stats Ty                       720 ( 7.9%)            15            48\n+hir-stats Ty                       720 ( 7.8%)            15            48\n hir-stats - Ptr                       48 ( 0.5%)             1\n hir-stats - Rptr                      48 ( 0.5%)             1\n hir-stats - Path                     624 ( 6.8%)            13\n@@ -171,8 +171,8 @@ hir-stats - ForeignMod                80 ( 0.9%)             1\n hir-stats - Impl                      80 ( 0.9%)             1\n hir-stats - Fn                       160 ( 1.7%)             2\n hir-stats - Use                      400 ( 4.4%)             5\n-hir-stats Path                   1_280 (14.0%)            32            40\n-hir-stats PathSegment            1_920 (21.0%)            40            48\n+hir-stats Path                   1_280 (13.9%)            32            40\n+hir-stats PathSegment            1_920 (20.9%)            40            48\n hir-stats ----------------------------------------------------------------\n-hir-stats Total                  9_160\n+hir-stats Total                  9_176\n hir-stats"}, {"sha": "4877cee0cc1ea8ea8bc3b575cb38272e84a94b17", "filename": "src/tools/clippy/clippy_lints/src/manual_non_exhaustive.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9d20aca98360f4376f0947d623028ac963a23948/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmanual_non_exhaustive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d20aca98360f4376f0947d623028ac963a23948/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmanual_non_exhaustive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmanual_non_exhaustive.rs?ref=9d20aca98360f4376f0947d623028ac963a23948", "patch": "@@ -157,10 +157,10 @@ impl<'tcx> LateLintPass<'tcx> for ManualNonExhaustiveEnum {\n             && def.variants.len() > 1\n         {\n             let mut iter = def.variants.iter().filter_map(|v| {\n-                let id = cx.tcx.hir().local_def_id(v.id);\n-                (matches!(v.data, hir::VariantData::Unit(_))\n+                let id = cx.tcx.hir().local_def_id(v.hir_id);\n+                (matches!(v.data, hir::VariantData::Unit(..))\n                     && v.ident.as_str().starts_with('_')\n-                    && is_doc_hidden(cx.tcx.hir().attrs(v.id)))\n+                    && is_doc_hidden(cx.tcx.hir().attrs(v.hir_id)))\n                 .then_some((id, v.span))\n             });\n             if let Some((id, span)) = iter.next()"}, {"sha": "6fd100762b49dd7caacd956f9b6596f050d053db", "filename": "src/tools/clippy/clippy_lints/src/missing_doc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d20aca98360f4376f0947d623028ac963a23948/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmissing_doc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d20aca98360f4376f0947d623028ac963a23948/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmissing_doc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmissing_doc.rs?ref=9d20aca98360f4376f0947d623028ac963a23948", "patch": "@@ -199,7 +199,7 @@ impl<'tcx> LateLintPass<'tcx> for MissingDoc {\n     }\n \n     fn check_variant(&mut self, cx: &LateContext<'tcx>, v: &'tcx hir::Variant<'_>) {\n-        let attrs = cx.tcx.hir().attrs(v.id);\n+        let attrs = cx.tcx.hir().attrs(v.hir_id);\n         if !is_from_proc_macro(cx, v) {\n             self.check_missing_docs_attrs(cx, attrs, v.span, \"a\", \"variant\");\n         }"}]}