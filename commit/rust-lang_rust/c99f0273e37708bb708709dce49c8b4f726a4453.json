{"sha": "c99f0273e37708bb708709dce49c8b4f726a4453", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM5OWYwMjczZTM3NzA4YmI3MDg3MDlkY2U0OWM4YjRmNzI2YTQ0NTM=", "commit": {"author": {"name": "Jeffrey Yasskin", "email": "jyasskin@gmail.com", "date": "2010-07-21T06:31:34Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@pobox.com", "date": "2010-07-21T17:11:35Z"}, "message": "Make sure debug locations are propagated to every new block created by making\nthem an argument to new_block.  gdb should do a good job of single-stepping\nLLVM-compiled rust programs by rust line number now.", "tree": {"sha": "636279488ed79a4a280a42bdd600711ffcf07f6b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/636279488ed79a4a280a42bdd600711ffcf07f6b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c99f0273e37708bb708709dce49c8b4f726a4453", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c99f0273e37708bb708709dce49c8b4f726a4453", "html_url": "https://github.com/rust-lang/rust/commit/c99f0273e37708bb708709dce49c8b4f726a4453", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c99f0273e37708bb708709dce49c8b4f726a4453/comments", "author": {"login": "jyasskin", "id": 83420, "node_id": "MDQ6VXNlcjgzNDIw", "avatar_url": "https://avatars.githubusercontent.com/u/83420?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyasskin", "html_url": "https://github.com/jyasskin", "followers_url": "https://api.github.com/users/jyasskin/followers", "following_url": "https://api.github.com/users/jyasskin/following{/other_user}", "gists_url": "https://api.github.com/users/jyasskin/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyasskin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyasskin/subscriptions", "organizations_url": "https://api.github.com/users/jyasskin/orgs", "repos_url": "https://api.github.com/users/jyasskin/repos", "events_url": "https://api.github.com/users/jyasskin/events{/privacy}", "received_events_url": "https://api.github.com/users/jyasskin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "215060b72b71db9c7ca5810fcf6ebce3d4b04ea3", "url": "https://api.github.com/repos/rust-lang/rust/commits/215060b72b71db9c7ca5810fcf6ebce3d4b04ea3", "html_url": "https://github.com/rust-lang/rust/commit/215060b72b71db9c7ca5810fcf6ebce3d4b04ea3"}], "stats": {"total": 66, "additions": 47, "deletions": 19}, "files": [{"sha": "383c5bff11d0cc70a093c45cb930e5f32330e9db", "filename": "src/boot/llvm/lltrans.ml", "status": "modified", "additions": 47, "deletions": 19, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/c99f0273e37708bb708709dce49c8b4f726a4453/src%2Fboot%2Fllvm%2Flltrans.ml", "raw_url": "https://github.com/rust-lang/rust/raw/c99f0273e37708bb708709dce49c8b4f726a4453/src%2Fboot%2Fllvm%2Flltrans.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fllvm%2Flltrans.ml?ref=c99f0273e37708bb708709dce49c8b4f726a4453", "patch": "@@ -10,6 +10,18 @@ let log cx = Session.log \"trans\"\n   cx.Semant.ctxt_sess.Session.sess_log_out\n ;;\n \n+(* Returns a new LLVM IRBuilder positioned at the end of llblock.  If\n+   debug_loc isn't None, the IRBuilder's debug location is set to its\n+   contents, which should be a DILocation mdnode.  (See\n+   http://llvm.org/docs/SourceLevelDebugging.html, or get it from an existing\n+   llbuilder with Llvm.current_debug_location.) *)\n+let llbuilder_at_end_with_debug_loc\n+    (llctx:Llvm.llcontext) (llblock:Llvm.llbasicblock)\n+    (debug_loc:Llvm.llvalue option) =\n+  let llbuilder = Llvm.builder_at_end llctx llblock in\n+    may (Llvm.set_current_debug_location llbuilder) debug_loc;\n+    llbuilder\n+\n let trans_crate\n     (sem_cx:Semant.ctxt)\n     (llctx:Llvm.llcontext)\n@@ -93,17 +105,22 @@ let trans_crate\n     md_node [| const_i32 line; const_i32 col; scope; const_i32 0 |]\n   in\n \n+  let di_location_from_id (scope:Llvm.llvalue) (id:node_id)\n+      : Llvm.llvalue option =\n+    match Session.get_span sess id with\n+        None -> None\n+      | Some {lo=(_, line, col)} ->\n+          Some (di_location line col scope)\n+  in\n+\n   (* Sets the 'llbuilder's current location (which it attaches to all\n      instructions) to the location of the start of the 'id' node within\n      'scope', usually a subprogram or lexical block. *)\n   let set_debug_location\n       (llbuilder:Llvm.llbuilder) (scope:Llvm.llvalue) (id:node_id)\n       : unit =\n-    match Session.get_span sess id with\n-        None -> ()\n-      | Some {lo=(_, line, col)} ->\n-          Llvm.set_current_debug_location llbuilder\n-            (di_location line col scope)\n+    may (Llvm.set_current_debug_location llbuilder)\n+      (di_location_from_id scope id)\n   in\n \n   (* Translation of our node_ids into LLVM identifiers, which are strings. *)\n@@ -445,9 +462,10 @@ let trans_crate\n     let llty = trans_slot None slot in\n     let ty = Semant.slot_ty slot in\n \n-    let new_block klass =\n+    let new_block klass debug_loc =\n       let llblock = Llvm.append_block llctx (anon_llid klass) llfn in\n-      let llbuilder = Llvm.builder_at_end llctx llblock in\n+      let llbuilder =\n+        llbuilder_at_end_with_debug_loc llctx llblock debug_loc in\n         (llblock, llbuilder)\n     in\n \n@@ -460,8 +478,9 @@ let trans_crate\n       let test =\n         Llvm.build_icmp Llvm.Icmp.Ne null ptr (anon_llid \"nullp\") llbuilder\n       in\n-      let (llthen, llthen_builder) = new_block \"then\" in\n-      let (llnext, llnext_builder) = new_block \"next\" in\n+      let debug_loc = Llvm.current_debug_location llbuilder in\n+      let (llthen, llthen_builder) = new_block \"then\" debug_loc in\n+      let (llnext, llnext_builder) = new_block \"next\" debug_loc in\n         ignore (Llvm.build_cond_br test llthen llnext llbuilder);\n         let llthen_builder = inner ptr llthen_builder in\n           ignore (Llvm.build_br llnext llthen_builder);\n@@ -483,8 +502,9 @@ let trans_crate\n         Llvm.build_icmp Llvm.Icmp.Eq\n           rc (imm 0L) (anon_llid \"zerop\") llbuilder\n       in\n-      let (llthen, llthen_builder) = new_block \"then\" in\n-      let (llnext, llnext_builder) = new_block \"next\" in\n+      let debug_loc = Llvm.current_debug_location llbuilder in\n+      let (llthen, llthen_builder) = new_block \"then\" debug_loc in\n+      let (llnext, llnext_builder) = new_block \"next\" debug_loc in\n         ignore (Llvm.build_cond_br test llthen llnext llbuilder);\n         let llthen_builder = inner ptr llthen_builder in\n           ignore (Llvm.build_br llnext llthen_builder);\n@@ -588,16 +608,18 @@ let trans_crate\n      * a little trickery here to wrangle the statement sequence into LLVM's\n      * format. *)\n \n-    let new_block id_opt klass =\n+    let new_block id_opt klass debug_loc =\n       let llblock = Llvm.append_block llctx (node_llid id_opt klass) llfn in\n-      let llbuilder = Llvm.builder_at_end llctx llblock in\n-      (llblock, llbuilder)\n+      let llbuilder =\n+        llbuilder_at_end_with_debug_loc llctx llblock debug_loc in\n+        (llblock, llbuilder)\n     in\n \n     (* Build up the slot-to-llvalue mapping, allocating space along the\n      * way. *)\n     let slot_to_llvalue = Hashtbl.create 0 in\n-    let (_, llinitbuilder) = new_block None \"init\" in\n+    let (_, llinitbuilder) =\n+      new_block None \"init\" (di_location_from_id llsubprogram fn_id) in\n \n     (* Allocate space for arguments (needed because arguments are lvalues in\n      * Rust), and store them in the slot-to-llvalue mapping. *)\n@@ -885,7 +907,9 @@ let trans_crate\n \n               | Ast.STMT_if sif ->\n                   let llexpr = trans_expr sif.Ast.if_test in\n-                  let (llnext, llnextbuilder) = new_block None \"next\" in\n+                  let (llnext, llnextbuilder) =\n+                    new_block None \"next\"\n+                      (Llvm.current_debug_location llbuilder) in\n                   let branch_to_next llbuilder' _ =\n                     ignore (Llvm.build_br llnext llbuilder')\n                   in\n@@ -931,10 +955,13 @@ let trans_crate\n \n               | Ast.STMT_check_expr expr ->\n                   let llexpr = trans_expr expr in\n-                  let (llfail, llfailbuilder) = new_block None \"fail\" in\n+                  let debug_loc = Llvm.current_debug_location llbuilder in\n+                  let (llfail, llfailbuilder) =\n+                    new_block None \"fail\" debug_loc in\n                   let reason = Fmt.fmt_to_str Ast.fmt_expr expr in\n                   trans_fail llfailbuilder lltask reason head.id;\n-                  let (llok, llokbuilder) = new_block None \"ok\" in\n+                  let (llok, llokbuilder) =\n+                    new_block None \"ok\" debug_loc in\n                   ignore (Llvm.build_cond_br llexpr llok llfail llbuilder);\n                   trans_tail_with_builder llokbuilder\n \n@@ -966,7 +993,8 @@ let trans_crate\n         ({ node = (stmts:Ast.stmt array); id = id }:Ast.block)\n         (terminate:Llvm.llbuilder -> node_id -> unit)\n         : Llvm.llbasicblock =\n-      let (llblock, llbuilder) = new_block (Some id) \"bb\" in\n+      let (llblock, llbuilder) =\n+        new_block (Some id) \"bb\" (di_location_from_id llsubprogram id) in\n         trans_stmts id llbuilder (Array.to_list stmts) terminate;\n         llblock\n     in"}]}