{"sha": "ac21100f32be00c2b80982fa6faf31c0bfaf2c5f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFjMjExMDBmMzJiZTAwYzJiODA5ODJmYTZmYWYzMWMwYmZhZjJjNWY=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-04-11T15:12:17Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-04-11T15:12:17Z"}, "message": "Use Expander for cfg handling in impls", "tree": {"sha": "78298e7bf93e851aa9aa17fe97d4dc1f35569287", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/78298e7bf93e851aa9aa17fe97d4dc1f35569287"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ac21100f32be00c2b80982fa6faf31c0bfaf2c5f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ac21100f32be00c2b80982fa6faf31c0bfaf2c5f", "html_url": "https://github.com/rust-lang/rust/commit/ac21100f32be00c2b80982fa6faf31c0bfaf2c5f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ac21100f32be00c2b80982fa6faf31c0bfaf2c5f/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e9519e103573e22ea0b461c81edd8cfc001e6a50", "url": "https://api.github.com/repos/rust-lang/rust/commits/e9519e103573e22ea0b461c81edd8cfc001e6a50", "html_url": "https://github.com/rust-lang/rust/commit/e9519e103573e22ea0b461c81edd8cfc001e6a50"}], "stats": {"total": 27, "additions": 14, "deletions": 13}, "files": [{"sha": "446af9d9bb729b69f341391eea29959a43b194ac", "filename": "crates/ra_hir_def/src/data.rs", "status": "modified", "additions": 14, "deletions": 13, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/ac21100f32be00c2b80982fa6faf31c0bfaf2c5f/crates%2Fra_hir_def%2Fsrc%2Fdata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac21100f32be00c2b80982fa6faf31c0bfaf2c5f/crates%2Fra_hir_def%2Fsrc%2Fdata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fdata.rs?ref=ac21100f32be00c2b80982fa6faf31c0bfaf2c5f", "patch": "@@ -219,7 +219,13 @@ impl ImplData {\n \n         if let Some(item_list) = src.value.item_list() {\n             let mut expander = Expander::new(db, impl_loc.ast_id.file_id, module_id);\n-            items.extend(collect_impl_items(db, item_list.impl_items(), src.file_id, id));\n+            items.extend(collect_impl_items(\n+                db,\n+                &mut expander,\n+                item_list.impl_items(),\n+                src.file_id,\n+                id,\n+            ));\n             items.extend(collect_impl_items_in_macros(\n                 db,\n                 &mut expander,\n@@ -300,6 +306,7 @@ fn collect_impl_items_in_macro(\n         let items: InFile<ast::MacroItems> = expander.to_source(items);\n         let mut res = collect_impl_items(\n             db,\n+            expander,\n             items.value.items().filter_map(|it| ImplItem::cast(it.syntax().clone())),\n             items.file_id,\n             id,\n@@ -319,32 +326,26 @@ fn collect_impl_items_in_macro(\n \n fn collect_impl_items(\n     db: &dyn DefDatabase,\n+    expander: &mut Expander,\n     impl_items: impl Iterator<Item = ImplItem>,\n     file_id: crate::HirFileId,\n     id: ImplId,\n ) -> Vec<AssocItemId> {\n     let items = db.ast_id_map(file_id);\n-    let crate_graph = db.crate_graph();\n-    let module_id = id.lookup(db).container.module(db);\n \n     impl_items\n         .filter_map(|item_node| match item_node {\n             ast::ImplItem::FnDef(it) => {\n+                let attrs = expander.parse_attrs(&it);\n+                if !expander.check_cfg(&attrs) {\n+                    return None;\n+                }\n                 let def = FunctionLoc {\n                     container: AssocContainerId::ImplId(id),\n                     ast_id: AstId::new(file_id, items.ast_id(&it)),\n                 }\n                 .intern(db);\n-\n-                if !db\n-                    .function_data(def)\n-                    .attrs\n-                    .is_cfg_enabled(&crate_graph[module_id.krate].cfg_options)\n-                {\n-                    None\n-                } else {\n-                    Some(def.into())\n-                }\n+                Some(def.into())\n             }\n             ast::ImplItem::ConstDef(it) => {\n                 let def = ConstLoc {"}]}