{"sha": "7e66a96d586f2f0e25088ef19b455ea56c8aca17", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdlNjZhOTZkNTg2ZjJmMGUyNTA4OGVmMTliNDU1ZWE1NmM4YWNhMTc=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2019-06-03T21:39:52Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2019-07-02T16:15:19Z"}, "message": "introduce `QueryRegionConstraints` struct (no-op)", "tree": {"sha": "e9de9bba6de780cf603395231a2727e09da302a9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e9de9bba6de780cf603395231a2727e09da302a9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7e66a96d586f2f0e25088ef19b455ea56c8aca17", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7e66a96d586f2f0e25088ef19b455ea56c8aca17", "html_url": "https://github.com/rust-lang/rust/commit/7e66a96d586f2f0e25088ef19b455ea56c8aca17", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7e66a96d586f2f0e25088ef19b455ea56c8aca17/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fd5f7673a76306265dbcdb2fa640fab877b9374a", "url": "https://api.github.com/repos/rust-lang/rust/commits/fd5f7673a76306265dbcdb2fa640fab877b9374a", "html_url": "https://github.com/rust-lang/rust/commit/fd5f7673a76306265dbcdb2fa640fab877b9374a"}], "stats": {"total": 39, "additions": 30, "deletions": 9}, "files": [{"sha": "9c616edba9f97b649d32418aa3197992ffb0beff", "filename": "src/librustc/infer/canonical/mod.rs", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/7e66a96d586f2f0e25088ef19b455ea56c8aca17/src%2Flibrustc%2Finfer%2Fcanonical%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e66a96d586f2f0e25088ef19b455ea56c8aca17/src%2Flibrustc%2Finfer%2Fcanonical%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fcanonical%2Fmod.rs?ref=7e66a96d586f2f0e25088ef19b455ea56c8aca17", "patch": "@@ -189,11 +189,16 @@ pub enum CanonicalTyVarKind {\n #[derive(Clone, Debug, HashStable)]\n pub struct QueryResponse<'tcx, R> {\n     pub var_values: CanonicalVarValues<'tcx>,\n-    pub region_constraints: Vec<QueryOutlivesConstraint<'tcx>>,\n+    pub region_constraints: QueryRegionConstraints<'tcx>,\n     pub certainty: Certainty,\n     pub value: R,\n }\n \n+#[derive(Clone, Debug, Default, HashStable)]\n+pub struct QueryRegionConstraints<'tcx> {\n+    outlives: Vec<QueryOutlivesConstraint<'tcx>>,\n+}\n+\n pub type Canonicalized<'tcx, V> = Canonical<'tcx, V>;\n \n pub type CanonicalizedQueryResponse<'tcx, T> =\n@@ -540,6 +545,19 @@ BraceStructLiftImpl! {\n     } where R: Lift<'tcx>\n }\n \n+BraceStructTypeFoldableImpl! {\n+    impl<'tcx> TypeFoldable<'tcx> for QueryRegionConstraints<'tcx> {\n+        outlives\n+    }\n+}\n+\n+BraceStructLiftImpl! {\n+    impl<'a, 'tcx> Lift<'tcx> for QueryRegionConstraints<'a> {\n+        type Lifted = QueryRegionConstraints<'tcx>;\n+        outlives\n+    }\n+}\n+\n impl<'tcx> Index<BoundVar> for CanonicalVarValues<'tcx> {\n     type Output = Kind<'tcx>;\n "}, {"sha": "acaed18939774dff6173bc44076a0d63db32e506", "filename": "src/librustc/infer/canonical/query_response.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7e66a96d586f2f0e25088ef19b455ea56c8aca17/src%2Flibrustc%2Finfer%2Fcanonical%2Fquery_response.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e66a96d586f2f0e25088ef19b455ea56c8aca17/src%2Flibrustc%2Finfer%2Fcanonical%2Fquery_response.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fcanonical%2Fquery_response.rs?ref=7e66a96d586f2f0e25088ef19b455ea56c8aca17", "patch": "@@ -11,7 +11,7 @@ use crate::arena::ArenaAllocatable;\n use crate::infer::canonical::substitute::substitute_value;\n use crate::infer::canonical::{\n     Canonical, CanonicalVarValues, CanonicalizedQueryResponse, Certainty,\n-    OriginalQueryValues, QueryOutlivesConstraint, QueryResponse,\n+    OriginalQueryValues, QueryRegionConstraints, QueryOutlivesConstraint, QueryResponse,\n };\n use crate::infer::region_constraints::{Constraint, RegionConstraintData};\n use crate::infer::InferCtxtBuilder;\n@@ -132,7 +132,7 @@ impl<'cx, 'tcx> InferCtxt<'cx, 'tcx> {\n     {\n         self.canonicalize_response(&QueryResponse {\n             var_values: inference_vars,\n-            region_constraints: vec![],\n+            region_constraints: QueryRegionConstraints::default(),\n             certainty: Certainty::Proven, // Ambiguities are OK!\n             value: answer,\n         })\n@@ -173,7 +173,7 @@ impl<'cx, 'tcx> InferCtxt<'cx, 'tcx> {\n         debug!(\"ambig_errors = {:#?}\", ambig_errors);\n \n         let region_obligations = self.take_registered_region_obligations();\n-        let region_constraints = self.with_region_constraints(|region_constraints| {\n+        let outlives_constraints = self.with_region_constraints(|region_constraints| {\n             make_query_outlives(\n                 tcx,\n                 region_obligations\n@@ -191,7 +191,9 @@ impl<'cx, 'tcx> InferCtxt<'cx, 'tcx> {\n \n         Ok(QueryResponse {\n             var_values: inference_vars,\n-            region_constraints,\n+            region_constraints: QueryRegionConstraints {\n+                outlives: outlives_constraints,\n+            },\n             certainty,\n             value: answer,\n         })\n@@ -225,7 +227,7 @@ impl<'cx, 'tcx> InferCtxt<'cx, 'tcx> {\n         obligations.extend(self.query_outlives_constraints_into_obligations(\n             cause,\n             param_env,\n-            &query_response.value.region_constraints,\n+            &query_response.value.region_constraints.outlives,\n             &result_subst,\n         ));\n \n@@ -334,7 +336,7 @@ impl<'cx, 'tcx> InferCtxt<'cx, 'tcx> {\n \n         // ...also include the other query region constraints from the query.\n         output_query_outlives_constraints.extend(\n-            query_response.value.region_constraints.iter().filter_map(|r_c| {\n+            query_response.value.region_constraints.outlives.iter().filter_map(|r_c| {\n                 let r_c = substitute_value(self.tcx, &result_subst, r_c);\n \n                 // Screen out `'a: 'a` cases -- we skip the binder here but"}, {"sha": "5c23ad4a4edfbd361fb8d1259402834e7cc88b72", "filename": "src/librustc_traits/chalk_context/mod.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7e66a96d586f2f0e25088ef19b455ea56c8aca17/src%2Flibrustc_traits%2Fchalk_context%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e66a96d586f2f0e25088ef19b455ea56c8aca17/src%2Flibrustc_traits%2Fchalk_context%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Fchalk_context%2Fmod.rs?ref=7e66a96d586f2f0e25088ef19b455ea56c8aca17", "patch": "@@ -17,6 +17,7 @@ use rustc::infer::canonical::{\n     CanonicalVarValues,\n     OriginalQueryValues,\n     QueryResponse,\n+    QueryRegionConstraints,\n     Certainty,\n };\n use rustc::traits::{\n@@ -151,14 +152,14 @@ impl context::AggregateOps<ChalkArenas<'tcx>> for ChalkContext<'tcx> {\n         let solution = constrained_subst.unchecked_map(|cs| match ambiguous {\n             true => QueryResponse {\n                 var_values: cs.subst.make_identity(self.tcx),\n-                region_constraints: Vec::new(),\n+                region_constraints: QueryRegionConstraints::default(),\n                 certainty: Certainty::Ambiguous,\n                 value: (),\n             },\n \n             false => QueryResponse {\n                 var_values: cs.subst,\n-                region_constraints: Vec::new(),\n+                region_constraints: QueryRegionConstraints::default(),\n \n                 // FIXME: restore this later once we get better at handling regions\n                 // region_constraints: cs.constraints"}]}