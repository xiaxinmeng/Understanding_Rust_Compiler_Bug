{"sha": "72bfe618fa06ba09fa898c1fd818b8d5886c6035", "node_id": "C_kwDOAAsO6NoAKDcyYmZlNjE4ZmEwNmJhMDlmYTg5OGMxZmQ4MThiOGQ1ODg2YzYwMzU", "commit": {"author": {"name": "Nika Layzell", "email": "nika@thelayzells.com", "date": "2021-06-29T02:30:55Z"}, "committer": {"name": "Nika Layzell", "email": "nika@thelayzells.com", "date": "2022-06-27T02:20:33Z"}, "message": "proc_macro: stop using a remote object handle for Punct\n\nThis greatly reduces round-trips to fetch relevant extra information about the\ntoken in proc macro code, and avoids RPC messages to create Punct tokens.", "tree": {"sha": "e311d2500a3fe71085727da2c2dc5eaebc831e79", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e311d2500a3fe71085727da2c2dc5eaebc831e79"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/72bfe618fa06ba09fa898c1fd818b8d5886c6035", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/72bfe618fa06ba09fa898c1fd818b8d5886c6035", "html_url": "https://github.com/rust-lang/rust/commit/72bfe618fa06ba09fa898c1fd818b8d5886c6035", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/72bfe618fa06ba09fa898c1fd818b8d5886c6035/comments", "author": {"login": "mystor", "id": 1261662, "node_id": "MDQ6VXNlcjEyNjE2NjI=", "avatar_url": "https://avatars.githubusercontent.com/u/1261662?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mystor", "html_url": "https://github.com/mystor", "followers_url": "https://api.github.com/users/mystor/followers", "following_url": "https://api.github.com/users/mystor/following{/other_user}", "gists_url": "https://api.github.com/users/mystor/gists{/gist_id}", "starred_url": "https://api.github.com/users/mystor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mystor/subscriptions", "organizations_url": "https://api.github.com/users/mystor/orgs", "repos_url": "https://api.github.com/users/mystor/repos", "events_url": "https://api.github.com/users/mystor/events{/privacy}", "received_events_url": "https://api.github.com/users/mystor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mystor", "id": 1261662, "node_id": "MDQ6VXNlcjEyNjE2NjI=", "avatar_url": "https://avatars.githubusercontent.com/u/1261662?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mystor", "html_url": "https://github.com/mystor", "followers_url": "https://api.github.com/users/mystor/followers", "following_url": "https://api.github.com/users/mystor/following{/other_user}", "gists_url": "https://api.github.com/users/mystor/gists{/gist_id}", "starred_url": "https://api.github.com/users/mystor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mystor/subscriptions", "organizations_url": "https://api.github.com/users/mystor/orgs", "repos_url": "https://api.github.com/users/mystor/repos", "events_url": "https://api.github.com/users/mystor/events{/privacy}", "received_events_url": "https://api.github.com/users/mystor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3b0d4813ab461ec81eab8980bb884691c97c5a35", "url": "https://api.github.com/repos/rust-lang/rust/commits/3b0d4813ab461ec81eab8980bb884691c97c5a35", "html_url": "https://github.com/rust-lang/rust/commit/3b0d4813ab461ec81eab8980bb884691c97c5a35"}], "stats": {"total": 144, "additions": 49, "deletions": 95}, "files": [{"sha": "12d7338c39b1f570d21a4cfdcf3a1f4e084956c5", "filename": "compiler/rustc_expand/src/proc_macro_server.rs", "status": "modified", "additions": 16, "deletions": 60, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/72bfe618fa06ba09fa898c1fd818b8d5886c6035/compiler%2Frustc_expand%2Fsrc%2Fproc_macro_server.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72bfe618fa06ba09fa898c1fd818b8d5886c6035/compiler%2Frustc_expand%2Fsrc%2Fproc_macro_server.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fproc_macro_server.rs?ref=72bfe618fa06ba09fa898c1fd818b8d5886c6035", "patch": "@@ -14,8 +14,8 @@ use rustc_span::def_id::CrateNum;\n use rustc_span::symbol::{self, kw, sym, Symbol};\n use rustc_span::{BytePos, FileName, Pos, SourceFile, Span};\n \n-use pm::bridge::{server, ExpnGlobals, TokenTree};\n-use pm::{Delimiter, Level, LineColumn, Spacing};\n+use pm::bridge::{server, ExpnGlobals, Punct, TokenTree};\n+use pm::{Delimiter, Level, LineColumn};\n use std::ops::Bound;\n use std::{ascii, panic};\n \n@@ -50,7 +50,7 @@ impl ToInternal<token::Delimiter> for Delimiter {\n }\n \n impl FromInternal<(TreeAndSpacing, &'_ mut Vec<Self>, &mut Rustc<'_, '_>)>\n-    for TokenTree<Group, Punct, Ident, Literal>\n+    for TokenTree<Span, Group, Ident, Literal>\n {\n     fn from_internal(\n         ((tree, spacing), stack, rustc): (TreeAndSpacing, &mut Vec<Self>, &mut Rustc<'_, '_>),\n@@ -79,16 +79,16 @@ impl FromInternal<(TreeAndSpacing, &'_ mut Vec<Self>, &mut Rustc<'_, '_>)>\n         }\n         macro_rules! op {\n             ($a:expr) => {\n-                tt!(Punct::new($a, joint))\n+                tt!(Punct { ch: $a, joint })\n             };\n             ($a:expr, $b:expr) => {{\n-                stack.push(tt!(Punct::new($b, joint)));\n-                tt!(Punct::new($a, true))\n+                stack.push(tt!(Punct { ch: $b, joint }));\n+                tt!(Punct { ch: $a, joint: true })\n             }};\n             ($a:expr, $b:expr, $c:expr) => {{\n-                stack.push(tt!(Punct::new($c, joint)));\n-                stack.push(tt!(Punct::new($b, true)));\n-                tt!(Punct::new($a, true))\n+                stack.push(tt!(Punct { ch: $c, joint }));\n+                stack.push(tt!(Punct { ch: $b, joint: true }));\n+                tt!(Punct { ch: $a, joint: true })\n             }};\n         }\n \n@@ -146,7 +146,7 @@ impl FromInternal<(TreeAndSpacing, &'_ mut Vec<Self>, &mut Rustc<'_, '_>)>\n             Lifetime(name) => {\n                 let ident = symbol::Ident::new(name, span).without_first_quote();\n                 stack.push(tt!(Ident::new(rustc.sess(), ident.name, false)));\n-                tt!(Punct::new('\\'', true))\n+                tt!(Punct { ch: '\\'', joint: true })\n             }\n             Literal(lit) => tt!(Literal { lit }),\n             DocComment(_, attr_style, data) => {\n@@ -169,9 +169,9 @@ impl FromInternal<(TreeAndSpacing, &'_ mut Vec<Self>, &mut Rustc<'_, '_>)>\n                     flatten: false,\n                 }));\n                 if attr_style == ast::AttrStyle::Inner {\n-                    stack.push(tt!(Punct::new('!', false)));\n+                    stack.push(tt!(Punct { ch: '!', joint: false }));\n                 }\n-                tt!(Punct::new('#', false))\n+                tt!(Punct { ch: '#', joint: false })\n             }\n \n             Interpolated(nt) if let NtIdent(ident, is_raw) = *nt => {\n@@ -192,7 +192,7 @@ impl FromInternal<(TreeAndSpacing, &'_ mut Vec<Self>, &mut Rustc<'_, '_>)>\n     }\n }\n \n-impl ToInternal<TokenStream> for TokenTree<Group, Punct, Ident, Literal> {\n+impl ToInternal<TokenStream> for TokenTree<Span, Group, Ident, Literal> {\n     fn to_internal(self) -> TokenStream {\n         use rustc_ast::token::*;\n \n@@ -288,27 +288,6 @@ pub struct Group {\n     flatten: bool,\n }\n \n-#[derive(Copy, Clone, PartialEq, Eq, Hash)]\n-pub struct Punct {\n-    ch: char,\n-    // NB. not using `Spacing` here because it doesn't implement `Hash`.\n-    joint: bool,\n-    span: Span,\n-}\n-\n-impl Punct {\n-    fn new(ch: char, joint: bool, span: Span) -> Punct {\n-        const LEGAL_CHARS: &[char] = &[\n-            '=', '<', '>', '!', '~', '+', '-', '*', '/', '%', '^', '&', '|', '@', '.', ',', ';',\n-            ':', '#', '$', '?', '\\'',\n-        ];\n-        if !LEGAL_CHARS.contains(&ch) {\n-            panic!(\"unsupported character `{:?}`\", ch)\n-        }\n-        Punct { ch, joint, span }\n-    }\n-}\n-\n #[derive(Copy, Clone, PartialEq, Eq, Hash)]\n pub struct Ident {\n     sym: Symbol,\n@@ -378,7 +357,6 @@ impl server::Types for Rustc<'_, '_> {\n     type FreeFunctions = FreeFunctions;\n     type TokenStream = TokenStream;\n     type Group = Group;\n-    type Punct = Punct;\n     type Ident = Ident;\n     type Literal = Literal;\n     type SourceFile = Lrc<SourceFile>;\n@@ -471,15 +449,15 @@ impl server::TokenStream for Rustc<'_, '_> {\n \n     fn from_token_tree(\n         &mut self,\n-        tree: TokenTree<Self::Group, Self::Punct, Self::Ident, Self::Literal>,\n+        tree: TokenTree<Self::Span, Self::Group, Self::Ident, Self::Literal>,\n     ) -> Self::TokenStream {\n         tree.to_internal()\n     }\n \n     fn concat_trees(\n         &mut self,\n         base: Option<Self::TokenStream>,\n-        trees: Vec<TokenTree<Self::Group, Self::Punct, Self::Ident, Self::Literal>>,\n+        trees: Vec<TokenTree<Self::Span, Self::Group, Self::Ident, Self::Literal>>,\n     ) -> Self::TokenStream {\n         let mut builder = tokenstream::TokenStreamBuilder::new();\n         if let Some(base) = base {\n@@ -509,7 +487,7 @@ impl server::TokenStream for Rustc<'_, '_> {\n     fn into_trees(\n         &mut self,\n         stream: Self::TokenStream,\n-    ) -> Vec<TokenTree<Self::Group, Self::Punct, Self::Ident, Self::Literal>> {\n+    ) -> Vec<TokenTree<Self::Span, Self::Group, Self::Ident, Self::Literal>> {\n         // FIXME: This is a raw port of the previous approach (which had a\n         // `TokenStreamIter` server-side object with a single `next` method),\n         // and can probably be optimized (for bulk conversion).\n@@ -577,28 +555,6 @@ impl server::Group for Rustc<'_, '_> {\n     }\n }\n \n-impl server::Punct for Rustc<'_, '_> {\n-    fn new(&mut self, ch: char, spacing: Spacing) -> Self::Punct {\n-        Punct::new(ch, spacing == Spacing::Joint, self.call_site)\n-    }\n-\n-    fn as_char(&mut self, punct: Self::Punct) -> char {\n-        punct.ch\n-    }\n-\n-    fn spacing(&mut self, punct: Self::Punct) -> Spacing {\n-        if punct.joint { Spacing::Joint } else { Spacing::Alone }\n-    }\n-\n-    fn span(&mut self, punct: Self::Punct) -> Self::Span {\n-        punct.span\n-    }\n-\n-    fn with_span(&mut self, punct: Self::Punct, span: Self::Span) -> Self::Punct {\n-        Punct { span, ..punct }\n-    }\n-}\n-\n impl server::Ident for Rustc<'_, '_> {\n     fn new(&mut self, string: &str, span: Self::Span, is_raw: bool) -> Self::Ident {\n         Ident::new(self.sess(), Symbol::intern(string), is_raw, span)"}, {"sha": "e42427c30fea3977679745829aea9b149d8737ff", "filename": "library/proc_macro/src/bridge/client.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/72bfe618fa06ba09fa898c1fd818b8d5886c6035/library%2Fproc_macro%2Fsrc%2Fbridge%2Fclient.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72bfe618fa06ba09fa898c1fd818b8d5886c6035/library%2Fproc_macro%2Fsrc%2Fbridge%2Fclient.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fproc_macro%2Fsrc%2Fbridge%2Fclient.rs?ref=72bfe618fa06ba09fa898c1fd818b8d5886c6035", "patch": "@@ -182,7 +182,6 @@ define_handles! {\n     Diagnostic,\n \n     'interned:\n-    Punct,\n     Ident,\n     Span,\n }"}, {"sha": "4c081396c6fb5cb7997f391221006281bdbb5d15", "filename": "library/proc_macro/src/bridge/mod.rs", "status": "modified", "additions": 15, "deletions": 13, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/72bfe618fa06ba09fa898c1fd818b8d5886c6035/library%2Fproc_macro%2Fsrc%2Fbridge%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72bfe618fa06ba09fa898c1fd818b8d5886c6035/library%2Fproc_macro%2Fsrc%2Fbridge%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fproc_macro%2Fsrc%2Fbridge%2Fmod.rs?ref=72bfe618fa06ba09fa898c1fd818b8d5886c6035", "patch": "@@ -65,19 +65,19 @@ macro_rules! with_api {\n                 fn from_str(src: &str) -> $S::TokenStream;\n                 fn to_string($self: &$S::TokenStream) -> String;\n                 fn from_token_tree(\n-                    tree: TokenTree<$S::Group, $S::Punct, $S::Ident, $S::Literal>,\n+                    tree: TokenTree<$S::Span, $S::Group, $S::Ident, $S::Literal>,\n                 ) -> $S::TokenStream;\n                 fn concat_trees(\n                     base: Option<$S::TokenStream>,\n-                    trees: Vec<TokenTree<$S::Group, $S::Punct, $S::Ident, $S::Literal>>,\n+                    trees: Vec<TokenTree<$S::Span, $S::Group, $S::Ident, $S::Literal>>,\n                 ) -> $S::TokenStream;\n                 fn concat_streams(\n                     base: Option<$S::TokenStream>,\n                     streams: Vec<$S::TokenStream>,\n                 ) -> $S::TokenStream;\n                 fn into_trees(\n                     $self: $S::TokenStream\n-                ) -> Vec<TokenTree<$S::Group, $S::Punct, $S::Ident, $S::Literal>>;\n+                ) -> Vec<TokenTree<$S::Span, $S::Group, $S::Ident, $S::Literal>>;\n             },\n             Group {\n                 fn drop($self: $S::Group);\n@@ -90,13 +90,6 @@ macro_rules! with_api {\n                 fn span_close($self: &$S::Group) -> $S::Span;\n                 fn set_span($self: &mut $S::Group, span: $S::Span);\n             },\n-            Punct {\n-                fn new(ch: char, spacing: Spacing) -> $S::Punct;\n-                fn as_char($self: $S::Punct) -> char;\n-                fn spacing($self: $S::Punct) -> Spacing;\n-                fn span($self: $S::Punct) -> $S::Span;\n-                fn with_span($self: $S::Punct, span: $S::Span) -> $S::Punct;\n-            },\n             Ident {\n                 fn new(string: &str, span: $S::Span, is_raw: bool) -> $S::Ident;\n                 fn span($self: $S::Ident) -> $S::Span;\n@@ -449,15 +442,24 @@ compound_traits!(\n );\n \n #[derive(Clone)]\n-pub enum TokenTree<G, P, I, L> {\n+pub struct Punct<S> {\n+    pub ch: char,\n+    pub joint: bool,\n+    pub span: S,\n+}\n+\n+compound_traits!(struct Punct<Sp> { ch, joint, span });\n+\n+#[derive(Clone)]\n+pub enum TokenTree<S, G, I, L> {\n     Group(G),\n-    Punct(P),\n+    Punct(Punct<S>),\n     Ident(I),\n     Literal(L),\n }\n \n compound_traits!(\n-    enum TokenTree<G, P, I, L> {\n+    enum TokenTree<Sp, G, I, L> {\n         Group(tt),\n         Punct(tt),\n         Ident(tt),"}, {"sha": "d30b60d189f32b4201fca8f0dcb6e26816b54e1e", "filename": "library/proc_macro/src/bridge/server.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/72bfe618fa06ba09fa898c1fd818b8d5886c6035/library%2Fproc_macro%2Fsrc%2Fbridge%2Fserver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72bfe618fa06ba09fa898c1fd818b8d5886c6035/library%2Fproc_macro%2Fsrc%2Fbridge%2Fserver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fproc_macro%2Fsrc%2Fbridge%2Fserver.rs?ref=72bfe618fa06ba09fa898c1fd818b8d5886c6035", "patch": "@@ -9,7 +9,6 @@ pub trait Types {\n     type FreeFunctions: 'static;\n     type TokenStream: 'static + Clone;\n     type Group: 'static + Clone;\n-    type Punct: 'static + Copy + Eq + Hash;\n     type Ident: 'static + Copy + Eq + Hash;\n     type Literal: 'static + Clone;\n     type SourceFile: 'static + Clone;"}, {"sha": "05f45e5a38fd854ca62db41518f1115e4d7deb5e", "filename": "library/proc_macro/src/lib.rs", "status": "modified", "additions": 17, "deletions": 19, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/72bfe618fa06ba09fa898c1fd818b8d5886c6035/library%2Fproc_macro%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72bfe618fa06ba09fa898c1fd818b8d5886c6035/library%2Fproc_macro%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fproc_macro%2Fsrc%2Flib.rs?ref=72bfe618fa06ba09fa898c1fd818b8d5886c6035", "patch": "@@ -212,8 +212,8 @@ pub use quote::{quote, quote_span};\n fn tree_to_bridge_tree(\n     tree: TokenTree,\n ) -> bridge::TokenTree<\n+    bridge::client::Span,\n     bridge::client::Group,\n-    bridge::client::Punct,\n     bridge::client::Ident,\n     bridge::client::Literal,\n > {\n@@ -238,8 +238,8 @@ impl From<TokenTree> for TokenStream {\n struct ConcatTreesHelper {\n     trees: Vec<\n         bridge::TokenTree<\n+            bridge::client::Span,\n             bridge::client::Group,\n-            bridge::client::Punct,\n             bridge::client::Ident,\n             bridge::client::Literal,\n         >,\n@@ -365,8 +365,8 @@ pub mod token_stream {\n     pub struct IntoIter(\n         std::vec::IntoIter<\n             bridge::TokenTree<\n+                bridge::client::Span,\n                 bridge::client::Group,\n-                bridge::client::Punct,\n                 bridge::client::Ident,\n                 bridge::client::Literal,\n             >,\n@@ -925,7 +925,7 @@ impl fmt::Debug for Group {\n /// forms of `Spacing` returned.\n #[stable(feature = \"proc_macro_lib2\", since = \"1.29.0\")]\n #[derive(Clone)]\n-pub struct Punct(bridge::client::Punct);\n+pub struct Punct(bridge::Punct<bridge::client::Span>);\n \n #[stable(feature = \"proc_macro_lib2\", since = \"1.29.0\")]\n impl !Send for Punct {}\n@@ -958,13 +958,20 @@ impl Punct {\n     /// which can be further configured with the `set_span` method below.\n     #[stable(feature = \"proc_macro_lib2\", since = \"1.29.0\")]\n     pub fn new(ch: char, spacing: Spacing) -> Punct {\n-        Punct(bridge::client::Punct::new(ch, spacing))\n+        const LEGAL_CHARS: &[char] = &[\n+            '=', '<', '>', '!', '~', '+', '-', '*', '/', '%', '^', '&', '|', '@', '.', ',', ';',\n+            ':', '#', '$', '?', '\\'',\n+        ];\n+        if !LEGAL_CHARS.contains(&ch) {\n+            panic!(\"unsupported character `{:?}`\", ch);\n+        }\n+        Punct(bridge::Punct { ch, joint: spacing == Spacing::Joint, span: Span::call_site().0 })\n     }\n \n     /// Returns the value of this punctuation character as `char`.\n     #[stable(feature = \"proc_macro_lib2\", since = \"1.29.0\")]\n     pub fn as_char(&self) -> char {\n-        self.0.as_char()\n+        self.0.ch\n     }\n \n     /// Returns the spacing of this punctuation character, indicating whether it's immediately\n@@ -973,28 +980,19 @@ impl Punct {\n     /// (`Alone`) so the operator has certainly ended.\n     #[stable(feature = \"proc_macro_lib2\", since = \"1.29.0\")]\n     pub fn spacing(&self) -> Spacing {\n-        self.0.spacing()\n+        if self.0.joint { Spacing::Joint } else { Spacing::Alone }\n     }\n \n     /// Returns the span for this punctuation character.\n     #[stable(feature = \"proc_macro_lib2\", since = \"1.29.0\")]\n     pub fn span(&self) -> Span {\n-        Span(self.0.span())\n+        Span(self.0.span)\n     }\n \n     /// Configure the span for this punctuation character.\n     #[stable(feature = \"proc_macro_lib2\", since = \"1.29.0\")]\n     pub fn set_span(&mut self, span: Span) {\n-        self.0 = self.0.with_span(span.0);\n-    }\n-}\n-\n-// N.B., the bridge only provides `to_string`, implement `fmt::Display`\n-// based on it (the reverse of the usual relationship between the two).\n-#[stable(feature = \"proc_macro_lib\", since = \"1.15.0\")]\n-impl ToString for Punct {\n-    fn to_string(&self) -> String {\n-        TokenStream::from(TokenTree::from(self.clone())).to_string()\n+        self.0.span = span.0;\n     }\n }\n \n@@ -1003,7 +1001,7 @@ impl ToString for Punct {\n #[stable(feature = \"proc_macro_lib2\", since = \"1.29.0\")]\n impl fmt::Display for Punct {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        f.write_str(&self.to_string())\n+        write!(f, \"{}\", self.as_char())\n     }\n }\n "}, {"sha": "ecbb6ebf55b9a4ba5cb9294dd6ba47db7b823194", "filename": "src/test/ui/proc-macro/invalid-punct-ident-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72bfe618fa06ba09fa898c1fd818b8d5886c6035/src%2Ftest%2Fui%2Fproc-macro%2Finvalid-punct-ident-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72bfe618fa06ba09fa898c1fd818b8d5886c6035/src%2Ftest%2Fui%2Fproc-macro%2Finvalid-punct-ident-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Finvalid-punct-ident-1.rs?ref=72bfe618fa06ba09fa898c1fd818b8d5886c6035", "patch": "@@ -2,7 +2,7 @@\n // rustc-env:RUST_BACKTRACE=0\n \n // FIXME https://github.com/rust-lang/rust/issues/59998\n-// normalize-stderr-test \"thread.*panicked.*proc_macro_server.rs.*\\n\" -> \"\"\n+// normalize-stderr-test \"thread.*panicked.*proc_macro.*lib.rs.*\\n\" -> \"\"\n // normalize-stderr-test \"note:.*RUST_BACKTRACE=1.*\\n\" -> \"\"\n // normalize-stderr-test \"\\nerror: internal compiler error.*\\n\\n\" -> \"\"\n // normalize-stderr-test \"note:.*unexpectedly panicked.*\\n\\n\" -> \"\""}]}