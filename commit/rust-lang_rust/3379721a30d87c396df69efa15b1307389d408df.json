{"sha": "3379721a30d87c396df69efa15b1307389d408df", "node_id": "C_kwDOAAsO6NoAKDMzNzk3MjFhMzBkODdjMzk2ZGY2OWVmYTE1YjEzMDczODlkNDA4ZGY", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2021-11-20T09:21:16Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-11-20T09:21:16Z"}, "message": "Rollup merge of #91021 - compiler-errors:print_future_output, r=estebank\n\nElaborate `Future::Output` when printing opaque `impl Future` type\n\nI would love to see the `Output =` type when printing type errors involving opaque `impl Future`.\n\n[Test code](https://play.rust-lang.org/?version=stable&mode=debug&edition=2021&gist=a800b481edd31575fbcaf5771a9c3678)\n\nBefore (cut relevant part of output):\n```\nnote: while checking the return type of the `async fn`\n --> /home/michael/test.rs:5:19\n  |\n5 | async fn bar() -> usize {\n  |                   ^^^^^ checked the `Output` of this `async fn`, found opaque type\n  = note:     expected type `usize`\n          found opaque type `impl Future`\n```\n\nAfter:\n```\nnote: while checking the return type of the `async fn`\n --> /home/michael/test.rs:5:19\n  |\n5 | async fn bar() -> usize {\n  |                   ^^^^^ checked the `Output` of this `async fn`, found opaque type\n  = note:     expected type `usize`\n          found opaque type `impl Future<Output = usize>`\n```\n\nNote the \"found opaque type `impl Future<Output = usize>`\" in the new output.\n\n----\n\nQuestions:\n1. We skip printing the output type when it's a projection, since I have been seeing some types like `impl Future<Output = <[static generator@/home/michael/test.rs:2:11: 2:21] as Generator<ResumeTy>>::Return>` which are not particularly helpful and leak implementation detail.\n    * Am I able to normalize this type within `rustc_middle::ty::print::pretty`? Alternatively, can we normalize it when creating the diagnostic? Otherwise, I'm fine with skipping it and falling back to the old output.\n    * Should I suppress any other types? I didn't encounter anything other than this generator projection type.\n2. Not sure what the formatting of this should be. Do I include spaces in `Output = `?", "tree": {"sha": "1f6d1eda299714e7603c2407eb24481ce0ac3215", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1f6d1eda299714e7603c2407eb24481ce0ac3215"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3379721a30d87c396df69efa15b1307389d408df", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhmL4MCRBK7hj4Ov3rIwAA7TIIAIBQtK4RrJ2Df7ruzYgqBqt9\nUTUXD7u6ehgs+fcIM3ANwByWvcoFiVf3KXW/UMVNuTU3rb+yBPnInE+PgUTnISqa\nsBWF7v/Sk6ejfe5KNzrAZF+u1Q2dx5OH56SSDSo/HLLiCMrpZQXuxrxY+DEQ3JPm\nXtNpwXfvLsVn+hxuTK4NM6JfD29Ram7n3q0y6eaGtkE0XOs8Rr6rlF+XEEKSaCB4\nATeszwPZwMn/e9Ig5zGwu1VRVcPalre28f/OxT0kltRGGEqRvrwFq897y75dY4+p\nQQNFhpYeoE3xHdl7KibSI6/OlA/JeSBj5YMbcbrPkdI8wliZX40uJFmEn/W5Htg=\n=SCgw\n-----END PGP SIGNATURE-----\n", "payload": "tree 1f6d1eda299714e7603c2407eb24481ce0ac3215\nparent 59c9c66bc019bec1c21dd5ac9b74b6b4a3468403\nparent f6392a16142425cdb7520440583262ffb374b0d5\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1637400076 +0100\ncommitter GitHub <noreply@github.com> 1637400076 +0100\n\nRollup merge of #91021 - compiler-errors:print_future_output, r=estebank\n\nElaborate `Future::Output` when printing opaque `impl Future` type\n\nI would love to see the `Output =` type when printing type errors involving opaque `impl Future`.\n\n[Test code](https://play.rust-lang.org/?version=stable&mode=debug&edition=2021&gist=a800b481edd31575fbcaf5771a9c3678)\n\nBefore (cut relevant part of output):\n```\nnote: while checking the return type of the `async fn`\n --> /home/michael/test.rs:5:19\n  |\n5 | async fn bar() -> usize {\n  |                   ^^^^^ checked the `Output` of this `async fn`, found opaque type\n  = note:     expected type `usize`\n          found opaque type `impl Future`\n```\n\nAfter:\n```\nnote: while checking the return type of the `async fn`\n --> /home/michael/test.rs:5:19\n  |\n5 | async fn bar() -> usize {\n  |                   ^^^^^ checked the `Output` of this `async fn`, found opaque type\n  = note:     expected type `usize`\n          found opaque type `impl Future<Output = usize>`\n```\n\nNote the \"found opaque type `impl Future<Output = usize>`\" in the new output.\n\n----\n\nQuestions:\n1. We skip printing the output type when it's a projection, since I have been seeing some types like `impl Future<Output = <[static generator@/home/michael/test.rs:2:11: 2:21] as Generator<ResumeTy>>::Return>` which are not particularly helpful and leak implementation detail.\n    * Am I able to normalize this type within `rustc_middle::ty::print::pretty`? Alternatively, can we normalize it when creating the diagnostic? Otherwise, I'm fine with skipping it and falling back to the old output.\n    * Should I suppress any other types? I didn't encounter anything other than this generator projection type.\n2. Not sure what the formatting of this should be. Do I include spaces in `Output = `?\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3379721a30d87c396df69efa15b1307389d408df", "html_url": "https://github.com/rust-lang/rust/commit/3379721a30d87c396df69efa15b1307389d408df", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3379721a30d87c396df69efa15b1307389d408df/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "59c9c66bc019bec1c21dd5ac9b74b6b4a3468403", "url": "https://api.github.com/repos/rust-lang/rust/commits/59c9c66bc019bec1c21dd5ac9b74b6b4a3468403", "html_url": "https://github.com/rust-lang/rust/commit/59c9c66bc019bec1c21dd5ac9b74b6b4a3468403"}, {"sha": "f6392a16142425cdb7520440583262ffb374b0d5", "url": "https://api.github.com/repos/rust-lang/rust/commits/f6392a16142425cdb7520440583262ffb374b0d5", "html_url": "https://github.com/rust-lang/rust/commit/f6392a16142425cdb7520440583262ffb374b0d5"}], "stats": {"total": 194, "additions": 119, "deletions": 75}, "files": [{"sha": "c8e898c6849575d3b4e3e91b1d679fd6b146537b", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 55, "deletions": 11, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/3379721a30d87c396df69efa15b1307389d408df/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3379721a30d87c396df69efa15b1307389d408df/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=3379721a30d87c396df69efa15b1307389d408df", "patch": "@@ -649,30 +649,74 @@ pub trait PrettyPrinter<'tcx>:\n \n                     let mut first = true;\n                     let mut is_sized = false;\n+                    let mut is_future = false;\n+                    let mut future_output_ty = None;\n+\n                     p!(\"impl\");\n                     for (predicate, _) in bounds {\n                         let predicate = predicate.subst(self.tcx(), substs);\n                         let bound_predicate = predicate.kind();\n-                        if let ty::PredicateKind::Trait(pred) = bound_predicate.skip_binder() {\n-                            let trait_ref = bound_predicate.rebind(pred.trait_ref);\n-                            // Don't print +Sized, but rather +?Sized if absent.\n-                            if Some(trait_ref.def_id()) == self.tcx().lang_items().sized_trait() {\n-                                is_sized = true;\n-                                continue;\n+\n+                        match bound_predicate.skip_binder() {\n+                            ty::PredicateKind::Projection(projection_predicate) => {\n+                                let Some(future_trait) = self.tcx().lang_items().future_trait() else { continue };\n+                                let future_output_def_id =\n+                                    self.tcx().associated_item_def_ids(future_trait)[0];\n+\n+                                if projection_predicate.projection_ty.item_def_id\n+                                    == future_output_def_id\n+                                {\n+                                    // We don't account for multiple `Future::Output = Ty` contraints.\n+                                    is_future = true;\n+                                    future_output_ty = Some(projection_predicate.ty);\n+                                }\n                             }\n+                            ty::PredicateKind::Trait(pred) => {\n+                                let trait_ref = bound_predicate.rebind(pred.trait_ref);\n+                                // Don't print +Sized, but rather +?Sized if absent.\n+                                if Some(trait_ref.def_id()) == self.tcx().lang_items().sized_trait()\n+                                {\n+                                    is_sized = true;\n+                                    continue;\n+                                }\n \n-                            p!(\n-                                write(\"{}\", if first { \" \" } else { \"+\" }),\n-                                print(trait_ref.print_only_trait_path())\n-                            );\n-                            first = false;\n+                                if Some(trait_ref.def_id())\n+                                    == self.tcx().lang_items().future_trait()\n+                                {\n+                                    is_future = true;\n+                                    continue;\n+                                }\n+\n+                                p!(\n+                                    write(\"{}\", if first { \" \" } else { \"+\" }),\n+                                    print(trait_ref.print_only_trait_path())\n+                                );\n+\n+                                first = false;\n+                            }\n+                            _ => {}\n                         }\n                     }\n+\n+                    if is_future {\n+                        p!(write(\"{}Future\", if first { \" \" } else { \"+\" }));\n+                        first = false;\n+\n+                        if let Some(future_output_ty) = future_output_ty {\n+                            // Don't print projection types, which we (unfortunately) see often\n+                            // in the error outputs involving async blocks.\n+                            if !matches!(future_output_ty.kind(), ty::Projection(_)) {\n+                                p!(\"<Output = \", print(future_output_ty), \">\");\n+                            }\n+                        }\n+                    }\n+\n                     if !is_sized {\n                         p!(write(\"{}?Sized\", if first { \" \" } else { \"+\" }));\n                     } else if first {\n                         p!(\" Sized\");\n                     }\n+\n                     Ok(self)\n                 });\n             }"}, {"sha": "bf7ab148e23df0a8ad0a5727e410ab53b47d3d93", "filename": "src/test/ui/async-await/async-fn-nonsend.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3379721a30d87c396df69efa15b1307389d408df/src%2Ftest%2Fui%2Fasync-await%2Fasync-fn-nonsend.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3379721a30d87c396df69efa15b1307389d408df/src%2Ftest%2Fui%2Fasync-await%2Fasync-fn-nonsend.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fasync-fn-nonsend.stderr?ref=3379721a30d87c396df69efa15b1307389d408df", "patch": "@@ -4,7 +4,7 @@ error: future cannot be sent between threads safely\n LL |     assert_send(local_dropped_before_await());\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ future returned by `local_dropped_before_await` is not `Send`\n    |\n-   = help: within `impl Future`, the trait `Send` is not implemented for `Rc<()>`\n+   = help: within `impl Future<Output = ()>`, the trait `Send` is not implemented for `Rc<()>`\n note: future is not `Send` as this value is used across an await\n   --> $DIR/async-fn-nonsend.rs:24:5\n    |\n@@ -27,7 +27,7 @@ error: future cannot be sent between threads safely\n LL |     assert_send(non_send_temporary_in_match());\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ future returned by `non_send_temporary_in_match` is not `Send`\n    |\n-   = help: within `impl Future`, the trait `Send` is not implemented for `Rc<()>`\n+   = help: within `impl Future<Output = ()>`, the trait `Send` is not implemented for `Rc<()>`\n note: future is not `Send` as this value is used across an await\n   --> $DIR/async-fn-nonsend.rs:33:20\n    |"}, {"sha": "289a567209c4958ea5c50ca1b82c336d478eb423", "filename": "src/test/ui/async-await/dont-suggest-missing-await.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3379721a30d87c396df69efa15b1307389d408df/src%2Ftest%2Fui%2Fasync-await%2Fdont-suggest-missing-await.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3379721a30d87c396df69efa15b1307389d408df/src%2Ftest%2Fui%2Fasync-await%2Fdont-suggest-missing-await.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fdont-suggest-missing-await.stderr?ref=3379721a30d87c396df69efa15b1307389d408df", "patch": "@@ -10,7 +10,7 @@ note: while checking the return type of the `async fn`\n LL | async fn make_u32() -> u32 {\n    |                        ^^^ checked the `Output` of this `async fn`, found opaque type\n    = note:     expected type `u32`\n-           found opaque type `impl Future`\n+           found opaque type `impl Future<Output = u32>`\n help: consider `await`ing on the `Future`\n    |\n LL |         take_u32(x.await)"}, {"sha": "79834ed7ec1a8fb08d64c5cbdbba08c9a13536ad", "filename": "src/test/ui/async-await/generator-desc.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3379721a30d87c396df69efa15b1307389d408df/src%2Ftest%2Fui%2Fasync-await%2Fgenerator-desc.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3379721a30d87c396df69efa15b1307389d408df/src%2Ftest%2Fui%2Fasync-await%2Fgenerator-desc.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fgenerator-desc.stderr?ref=3379721a30d87c396df69efa15b1307389d408df", "patch": "@@ -25,8 +25,8 @@ note: while checking the return type of the `async fn`\n    |\n LL | async fn two() {}\n    |                ^ checked the `Output` of this `async fn`, found opaque type\n-   = note: expected opaque type `impl Future` (opaque type at <$DIR/generator-desc.rs:5:16>)\n-              found opaque type `impl Future` (opaque type at <$DIR/generator-desc.rs:6:16>)\n+   = note: expected opaque type `impl Future<Output = ()>` (opaque type at <$DIR/generator-desc.rs:5:16>)\n+              found opaque type `impl Future<Output = ()>` (opaque type at <$DIR/generator-desc.rs:6:16>)\n    = help: consider `await`ing on both `Future`s\n    = note: distinct uses of `impl Trait` result in different opaque types\n "}, {"sha": "a35baf1694cacbb8405c0935de2ade5521512cb8", "filename": "src/test/ui/async-await/issue-61076.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3379721a30d87c396df69efa15b1307389d408df/src%2Ftest%2Fui%2Fasync-await%2Fissue-61076.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3379721a30d87c396df69efa15b1307389d408df/src%2Ftest%2Fui%2Fasync-await%2Fissue-61076.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-61076.rs?ref=3379721a30d87c396df69efa15b1307389d408df", "patch": "@@ -40,8 +40,8 @@ async fn foo() -> Result<(), ()> {\n \n async fn bar() -> Result<(), ()> {\n     foo()?; //~ ERROR the `?` operator can only be applied to values that implement `Try`\n-    //~^ NOTE the `?` operator cannot be applied to type `impl Future`\n-    //~| HELP the trait `Try` is not implemented for `impl Future`\n+    //~^ NOTE the `?` operator cannot be applied to type `impl Future<Output = Result<(), ()>>`\n+    //~| HELP the trait `Try` is not implemented for `impl Future<Output = Result<(), ()>>`\n     //~| NOTE required by `branch`\n     //~| HELP consider `await`ing on the `Future`\n     //~| NOTE in this expansion of desugaring of operator `?`\n@@ -84,7 +84,7 @@ async fn baz() -> Result<(), ()> {\n     //~| NOTE field not available in `impl Future`\n \n     struct_().method(); //~ ERROR no method named\n-    //~^ NOTE method not found in `impl Future`\n+    //~^ NOTE method not found in `impl Future<Output = Struct>`\n     //~| HELP consider `await`ing on the `Future`\n     Ok(())\n }\n@@ -93,7 +93,7 @@ async fn match_() {\n     match tuple() { //~ HELP consider `await`ing on the `Future`\n         Tuple(_) => {} //~ ERROR mismatched types\n         //~^ NOTE expected opaque type, found struct `Tuple`\n-        //~| NOTE expected opaque type `impl Future`\n+        //~| NOTE expected opaque type `impl Future<Output = Tuple>`\n     }\n }\n "}, {"sha": "9878ea2ae693b19af8ff68102d47b00bd3b58fec", "filename": "src/test/ui/async-await/issue-61076.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/3379721a30d87c396df69efa15b1307389d408df/src%2Ftest%2Fui%2Fasync-await%2Fissue-61076.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3379721a30d87c396df69efa15b1307389d408df/src%2Ftest%2Fui%2Fasync-await%2Fissue-61076.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-61076.stderr?ref=3379721a30d87c396df69efa15b1307389d408df", "patch": "@@ -2,9 +2,9 @@ error[E0277]: the `?` operator can only be applied to values that implement `Try\n   --> $DIR/issue-61076.rs:42:5\n    |\n LL |     foo()?;\n-   |     ^^^^^^ the `?` operator cannot be applied to type `impl Future`\n+   |     ^^^^^^ the `?` operator cannot be applied to type `impl Future<Output = Result<(), ()>>`\n    |\n-   = help: the trait `Try` is not implemented for `impl Future`\n+   = help: the trait `Try` is not implemented for `impl Future<Output = Result<(), ()>>`\n note: required by `branch`\n   --> $SRC_DIR/core/src/ops/try_trait.rs:LL:COL\n    |\n@@ -32,7 +32,7 @@ help: consider `await`ing on the `Future`\n LL |     t.await?;\n    |      ++++++\n \n-error[E0609]: no field `0` on type `impl Future`\n+error[E0609]: no field `0` on type `impl Future<Output = Tuple>`\n   --> $DIR/issue-61076.rs:78:26\n    |\n LL |     let _: i32 = tuple().0;\n@@ -43,7 +43,7 @@ help: consider `await`ing on the `Future` and access the field of its `Output`\n LL |     let _: i32 = tuple().await.0;\n    |                         ++++++\n \n-error[E0609]: no field `a` on type `impl Future`\n+error[E0609]: no field `a` on type `impl Future<Output = Struct>`\n   --> $DIR/issue-61076.rs:82:28\n    |\n LL |     let _: i32 = struct_().a;\n@@ -54,11 +54,11 @@ help: consider `await`ing on the `Future` and access the field of its `Output`\n LL |     let _: i32 = struct_().await.a;\n    |                           ++++++\n \n-error[E0599]: no method named `method` found for opaque type `impl Future` in the current scope\n+error[E0599]: no method named `method` found for opaque type `impl Future<Output = Struct>` in the current scope\n   --> $DIR/issue-61076.rs:86:15\n    |\n LL |     struct_().method();\n-   |               ^^^^^^ method not found in `impl Future`\n+   |               ^^^^^^ method not found in `impl Future<Output = Struct>`\n    |\n help: consider `await`ing on the `Future` and calling the method on its `Output`\n    |\n@@ -76,7 +76,7 @@ note: while checking the return type of the `async fn`\n    |\n LL | async fn tuple() -> Tuple {\n    |                     ^^^^^ checked the `Output` of this `async fn`, expected opaque type\n-   = note: expected opaque type `impl Future`\n+   = note: expected opaque type `impl Future<Output = Tuple>`\n                    found struct `Tuple`\n help: consider `await`ing on the `Future`\n    |"}, {"sha": "010611fae438142f9173817ac4c8e3ae099d941e", "filename": "src/test/ui/async-await/issue-64130-1-sync.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3379721a30d87c396df69efa15b1307389d408df/src%2Ftest%2Fui%2Fasync-await%2Fissue-64130-1-sync.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3379721a30d87c396df69efa15b1307389d408df/src%2Ftest%2Fui%2Fasync-await%2Fissue-64130-1-sync.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-64130-1-sync.stderr?ref=3379721a30d87c396df69efa15b1307389d408df", "patch": "@@ -4,7 +4,7 @@ error: future cannot be shared between threads safely\n LL |     is_sync(bar());\n    |             ^^^^^ future returned by `bar` is not `Sync`\n    |\n-   = help: within `impl Future`, the trait `Sync` is not implemented for `Foo`\n+   = help: within `impl Future<Output = ()>`, the trait `Sync` is not implemented for `Foo`\n note: future is not `Sync` as this value is used across an await\n   --> $DIR/issue-64130-1-sync.rs:15:5\n    |"}, {"sha": "bb598b53594e9991f72c34fdcd271ad3a66adb9c", "filename": "src/test/ui/async-await/issue-64130-2-send.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3379721a30d87c396df69efa15b1307389d408df/src%2Ftest%2Fui%2Fasync-await%2Fissue-64130-2-send.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3379721a30d87c396df69efa15b1307389d408df/src%2Ftest%2Fui%2Fasync-await%2Fissue-64130-2-send.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-64130-2-send.stderr?ref=3379721a30d87c396df69efa15b1307389d408df", "patch": "@@ -4,7 +4,7 @@ error: future cannot be sent between threads safely\n LL |     is_send(bar());\n    |             ^^^^^ future returned by `bar` is not `Send`\n    |\n-   = help: within `impl Future`, the trait `Send` is not implemented for `Foo`\n+   = help: within `impl Future<Output = ()>`, the trait `Send` is not implemented for `Foo`\n note: future is not `Send` as this value is used across an await\n   --> $DIR/issue-64130-2-send.rs:15:5\n    |"}, {"sha": "52801c35ba3d34794f968efc74119fa6f30aeba8", "filename": "src/test/ui/async-await/issue-64130-3-other.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3379721a30d87c396df69efa15b1307389d408df/src%2Ftest%2Fui%2Fasync-await%2Fissue-64130-3-other.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3379721a30d87c396df69efa15b1307389d408df/src%2Ftest%2Fui%2Fasync-await%2Fissue-64130-3-other.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-64130-3-other.rs?ref=3379721a30d87c396df69efa15b1307389d408df", "patch": "@@ -5,22 +5,22 @@\n // This tests the the unspecialized async-await-specific error when futures don't implement an\n // auto trait (which is not Send or Sync) due to some type that was captured.\n \n-auto trait Qux { }\n+auto trait Qux {}\n \n struct Foo;\n \n impl !Qux for Foo {}\n \n-fn is_qux<T: Qux>(t: T) { }\n+fn is_qux<T: Qux>(t: T) {}\n \n async fn bar() {\n     let x = Foo;\n     baz().await;\n }\n \n-async fn baz() { }\n+async fn baz() {}\n \n fn main() {\n     is_qux(bar());\n-    //~^ ERROR the trait bound `Foo: Qux` is not satisfied in `impl Future`\n+    //~^ ERROR the trait bound `Foo: Qux` is not satisfied in `impl Future<Output = ()>`\n }"}, {"sha": "4de7929e1814969fcdc03127327e1899f53ec614", "filename": "src/test/ui/async-await/issue-64130-3-other.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3379721a30d87c396df69efa15b1307389d408df/src%2Ftest%2Fui%2Fasync-await%2Fissue-64130-3-other.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3379721a30d87c396df69efa15b1307389d408df/src%2Ftest%2Fui%2Fasync-await%2Fissue-64130-3-other.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-64130-3-other.stderr?ref=3379721a30d87c396df69efa15b1307389d408df", "patch": "@@ -1,11 +1,11 @@\n-error[E0277]: the trait bound `Foo: Qux` is not satisfied in `impl Future`\n+error[E0277]: the trait bound `Foo: Qux` is not satisfied in `impl Future<Output = ()>`\n   --> $DIR/issue-64130-3-other.rs:24:12\n    |\n LL | async fn bar() {\n-   |                - within this `impl Future`\n+   |                - within this `impl Future<Output = ()>`\n ...\n LL |     is_qux(bar());\n-   |            ^^^^^ within `impl Future`, the trait `Qux` is not implemented for `Foo`\n+   |            ^^^^^ within `impl Future<Output = ()>`, the trait `Qux` is not implemented for `Foo`\n    |\n note: future does not implement `Qux` as this value is used across an await\n   --> $DIR/issue-64130-3-other.rs:18:5\n@@ -19,7 +19,7 @@ LL | }\n note: required by a bound in `is_qux`\n   --> $DIR/issue-64130-3-other.rs:14:14\n    |\n-LL | fn is_qux<T: Qux>(t: T) { }\n+LL | fn is_qux<T: Qux>(t: T) {}\n    |              ^^^ required by this bound in `is_qux`\n \n error: aborting due to previous error"}, {"sha": "8eedb3597330e0ff8676586333b5bc05e72a7cba", "filename": "src/test/ui/async-await/issue-64130-non-send-future-diags.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3379721a30d87c396df69efa15b1307389d408df/src%2Ftest%2Fui%2Fasync-await%2Fissue-64130-non-send-future-diags.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3379721a30d87c396df69efa15b1307389d408df/src%2Ftest%2Fui%2Fasync-await%2Fissue-64130-non-send-future-diags.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-64130-non-send-future-diags.stderr?ref=3379721a30d87c396df69efa15b1307389d408df", "patch": "@@ -4,7 +4,7 @@ error: future cannot be sent between threads safely\n LL |     is_send(foo());\n    |             ^^^^^ future returned by `foo` is not `Send`\n    |\n-   = help: within `impl Future`, the trait `Send` is not implemented for `MutexGuard<'_, u32>`\n+   = help: within `impl Future<Output = ()>`, the trait `Send` is not implemented for `MutexGuard<'_, u32>`\n note: future is not `Send` as this value is used across an await\n   --> $DIR/issue-64130-non-send-future-diags.rs:17:5\n    |"}, {"sha": "9682a7055e93c4fd16fdd7748c7e87d1853553ea", "filename": "src/test/ui/async-await/issue-68112.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3379721a30d87c396df69efa15b1307389d408df/src%2Ftest%2Fui%2Fasync-await%2Fissue-68112.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3379721a30d87c396df69efa15b1307389d408df/src%2Ftest%2Fui%2Fasync-await%2Fissue-68112.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-68112.stderr?ref=3379721a30d87c396df69efa15b1307389d408df", "patch": "@@ -9,7 +9,7 @@ note: future is not `Send` as it awaits another future which is not `Send`\n   --> $DIR/issue-68112.rs:31:17\n    |\n LL |         let _ = non_send_fut.await;\n-   |                 ^^^^^^^^^^^^ await occurs here on type `impl Future`, which is not `Send`\n+   |                 ^^^^^^^^^^^^ await occurs here on type `impl Future<Output = Arc<RefCell<i32>>>`, which is not `Send`\n note: required by a bound in `require_send`\n   --> $DIR/issue-68112.rs:11:25\n    |\n@@ -27,7 +27,7 @@ note: future is not `Send` as it awaits another future which is not `Send`\n   --> $DIR/issue-68112.rs:40:17\n    |\n LL |         let _ = make_non_send_future1().await;\n-   |                 ^^^^^^^^^^^^^^^^^^^^^^^ await occurs here on type `impl Future`, which is not `Send`\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^ await occurs here on type `impl Future<Output = Arc<RefCell<i32>>>`, which is not `Send`\n note: required by a bound in `require_send`\n   --> $DIR/issue-68112.rs:11:25\n    |\n@@ -45,9 +45,9 @@ LL |     require_send(send_fut);\n    = note: required because it appears within the type `[static generator@$DIR/issue-68112.rs:47:31: 47:36]`\n    = note: required because it appears within the type `from_generator::GenFuture<[static generator@$DIR/issue-68112.rs:47:31: 47:36]>`\n    = note: required because it appears within the type `impl Future`\n-   = note: required because it appears within the type `impl Future`\n-   = note: required because it appears within the type `impl Future`\n-   = note: required because it appears within the type `{ResumeTy, impl Future, (), i32, Ready<i32>}`\n+   = note: required because it appears within the type `impl Future<Output = Arc<RefCell<i32>>>`\n+   = note: required because it appears within the type `impl Future<Output = Arc<RefCell<i32>>>`\n+   = note: required because it appears within the type `{ResumeTy, impl Future<Output = Arc<RefCell<i32>>>, (), i32, Ready<i32>}`\n    = note: required because it appears within the type `[static generator@$DIR/issue-68112.rs:55:26: 59:6]`\n    = note: required because it appears within the type `from_generator::GenFuture<[static generator@$DIR/issue-68112.rs:55:26: 59:6]>`\n    = note: required because it appears within the type `impl Future`"}, {"sha": "dddea12162a0be604b3f88e744c00135e0408605", "filename": "src/test/ui/async-await/issue-71137.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3379721a30d87c396df69efa15b1307389d408df/src%2Ftest%2Fui%2Fasync-await%2Fissue-71137.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3379721a30d87c396df69efa15b1307389d408df/src%2Ftest%2Fui%2Fasync-await%2Fissue-71137.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-71137.stderr?ref=3379721a30d87c396df69efa15b1307389d408df", "patch": "@@ -4,7 +4,7 @@ error: future cannot be sent between threads safely\n LL |   fake_spawn(wrong_mutex());\n    |              ^^^^^^^^^^^^^ future returned by `wrong_mutex` is not `Send`\n    |\n-   = help: within `impl Future`, the trait `Send` is not implemented for `MutexGuard<'_, i32>`\n+   = help: within `impl Future<Output = ()>`, the trait `Send` is not implemented for `MutexGuard<'_, i32>`\n note: future is not `Send` as this value is used across an await\n   --> $DIR/issue-71137.rs:14:5\n    |"}, {"sha": "4427014ae3bf93c406d669f372f6bb7195a3c712", "filename": "src/test/ui/async-await/issue-74497-lifetime-in-opaque.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3379721a30d87c396df69efa15b1307389d408df/src%2Ftest%2Fui%2Fasync-await%2Fissue-74497-lifetime-in-opaque.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3379721a30d87c396df69efa15b1307389d408df/src%2Ftest%2Fui%2Fasync-await%2Fissue-74497-lifetime-in-opaque.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-74497-lifetime-in-opaque.stderr?ref=3379721a30d87c396df69efa15b1307389d408df", "patch": "@@ -4,7 +4,7 @@ error: lifetime may not live long enough\n LL |     let _ = foo(|x| bar(x));\n    |                  -- ^^^^^^ returning this value requires that `'1` must outlive `'2`\n    |                  ||\n-   |                  |return type of closure `impl Future` contains a lifetime `'2`\n+   |                  |return type of closure `impl Future<Output = ()>` contains a lifetime `'2`\n    |                  has type `&'1 u8`\n \n error: aborting due to previous error"}, {"sha": "7b6084c49a0f87bf0f932d28d064688c3c0b990a", "filename": "src/test/ui/async-await/issue-84841.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3379721a30d87c396df69efa15b1307389d408df/src%2Ftest%2Fui%2Fasync-await%2Fissue-84841.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3379721a30d87c396df69efa15b1307389d408df/src%2Ftest%2Fui%2Fasync-await%2Fissue-84841.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-84841.stderr?ref=3379721a30d87c396df69efa15b1307389d408df", "patch": "@@ -2,9 +2,9 @@ error[E0277]: the `?` operator can only be applied to values that implement `Try\n   --> $DIR/issue-84841.rs:9:5\n    |\n LL |     test()?;\n-   |     ^^^^^^^ the `?` operator cannot be applied to type `impl Future`\n+   |     ^^^^^^^ the `?` operator cannot be applied to type `impl Future<Output = ()>`\n    |\n-   = help: the trait `Try` is not implemented for `impl Future`\n+   = help: the trait `Try` is not implemented for `impl Future<Output = ()>`\n note: required by `branch`\n   --> $SRC_DIR/core/src/ops/try_trait.rs:LL:COL\n    |"}, {"sha": "0aa0d5d7ccdde9c30840aaf7f6239a26d456412b", "filename": "src/test/ui/async-await/issues/issue-67893.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3379721a30d87c396df69efa15b1307389d408df/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-67893.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3379721a30d87c396df69efa15b1307389d408df/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-67893.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-67893.stderr?ref=3379721a30d87c396df69efa15b1307389d408df", "patch": "@@ -4,7 +4,7 @@ error: generator cannot be sent between threads safely\n LL |     g(issue_67893::run())\n    |       ^^^^^^^^^^^^^^^^^^ generator is not `Send`\n    |\n-   = help: within `impl Future`, the trait `Send` is not implemented for `MutexGuard<'_, ()>`\n+   = help: within `impl Future<Output = ()>`, the trait `Send` is not implemented for `MutexGuard<'_, ()>`\n note: required by a bound in `g`\n   --> $DIR/issue-67893.rs:6:14\n    |"}, {"sha": "d951c8ed094e703dd42041e9903a17a50fe2b580", "filename": "src/test/ui/async-await/suggest-missing-await-closure.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3379721a30d87c396df69efa15b1307389d408df/src%2Ftest%2Fui%2Fasync-await%2Fsuggest-missing-await-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3379721a30d87c396df69efa15b1307389d408df/src%2Ftest%2Fui%2Fasync-await%2Fsuggest-missing-await-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fsuggest-missing-await-closure.stderr?ref=3379721a30d87c396df69efa15b1307389d408df", "patch": "@@ -10,7 +10,7 @@ note: while checking the return type of the `async fn`\n LL | async fn make_u32() -> u32 {\n    |                        ^^^ checked the `Output` of this `async fn`, found opaque type\n    = note:     expected type `u32`\n-           found opaque type `impl Future`\n+           found opaque type `impl Future<Output = u32>`\n help: consider `await`ing on the `Future`\n    |\n LL |         take_u32(x.await)"}, {"sha": "bea50b3bfc036e2f0ce74947b0b783cffa5a0002", "filename": "src/test/ui/async-await/suggest-missing-await.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/3379721a30d87c396df69efa15b1307389d408df/src%2Ftest%2Fui%2Fasync-await%2Fsuggest-missing-await.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3379721a30d87c396df69efa15b1307389d408df/src%2Ftest%2Fui%2Fasync-await%2Fsuggest-missing-await.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fsuggest-missing-await.stderr?ref=3379721a30d87c396df69efa15b1307389d408df", "patch": "@@ -10,7 +10,7 @@ note: while checking the return type of the `async fn`\n LL | async fn make_u32() -> u32 {\n    |                        ^^^ checked the `Output` of this `async fn`, found opaque type\n    = note:     expected type `u32`\n-           found opaque type `impl Future`\n+           found opaque type `impl Future<Output = u32>`\n help: consider `await`ing on the `Future`\n    |\n LL |     take_u32(x.await)\n@@ -28,7 +28,7 @@ note: while checking the return type of the `async fn`\n LL | async fn dummy() {}\n    |                  ^ checked the `Output` of this `async fn`, found opaque type\n    = note: expected unit type `()`\n-            found opaque type `impl Future`\n+            found opaque type `impl Future<Output = ()>`\n help: consider `await`ing on the `Future`\n    |\n LL |     dummy().await\n@@ -53,7 +53,7 @@ LL | |\n LL | |     };\n    | |_____- `if` and `else` have incompatible types\n    |\n-   = note:   expected type `impl Future`\n+   = note:   expected type `impl Future<Output = ()>`\n            found unit type `()`\n help: consider `await`ing on the `Future`\n    |\n@@ -66,9 +66,9 @@ error[E0308]: `match` arms have incompatible types\n LL |       let _x = match 0usize {\n    |  ______________-\n LL | |         0 => dummy(),\n-   | |              ------- this is found to be of type `impl Future`\n+   | |              ------- this is found to be of type `impl Future<Output = ()>`\n LL | |         1 => dummy(),\n-   | |              ------- this is found to be of type `impl Future`\n+   | |              ------- this is found to be of type `impl Future<Output = ()>`\n LL | |         2 => dummy().await,\n    | |              ^^^^^^^^^^^^^ expected opaque type, found `()`\n LL | |\n@@ -80,7 +80,7 @@ note: while checking the return type of the `async fn`\n    |\n LL | async fn dummy() {}\n    |                  ^ checked the `Output` of this `async fn`, expected opaque type\n-   = note: expected opaque type `impl Future`\n+   = note: expected opaque type `impl Future<Output = ()>`\n                 found unit type `()`\n help: consider `await`ing on the `Future`\n    |\n@@ -99,7 +99,7 @@ note: while checking the return type of the `async fn`\n    |\n LL | async fn dummy() {}\n    |                  ^ checked the `Output` of this `async fn`, expected opaque type\n-   = note: expected opaque type `impl Future`\n+   = note: expected opaque type `impl Future<Output = ()>`\n                 found unit type `()`\n help: consider `await`ing on the `Future`\n    |"}, {"sha": "86bde9a0cddab967e843d72c87f133d05165caef", "filename": "src/test/ui/impl-trait/issues/issue-78722.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3379721a30d87c396df69efa15b1307389d408df/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-78722.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3379721a30d87c396df69efa15b1307389d408df/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-78722.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-78722.stderr?ref=3379721a30d87c396df69efa15b1307389d408df", "patch": "@@ -14,8 +14,8 @@ LL |         let f: F = async { 1 };\n LL | pub const fn from_generator<T>(gen: T) -> impl Future<Output = T::Return>\n    |                                           ------------------------------- the found opaque type\n    |\n-   = note: expected opaque type `impl Future` (opaque type at <$DIR/issue-78722.rs:5:10>)\n-              found opaque type `impl Future` (opaque type at <$SRC_DIR/core/src/future/mod.rs:LL:COL>)\n+   = note: expected opaque type `impl Future<Output = u8>`\n+              found opaque type `impl Future`\n    = note: distinct uses of `impl Trait` result in different opaque types\n \n error: aborting due to previous error"}, {"sha": "75c60a0ea2a393e1ede0460d46c4c6a528c27048", "filename": "src/test/ui/parser/fn-header-semantic-fail.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3379721a30d87c396df69efa15b1307389d408df/src%2Ftest%2Fui%2Fparser%2Ffn-header-semantic-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3379721a30d87c396df69efa15b1307389d408df/src%2Ftest%2Fui%2Fparser%2Ffn-header-semantic-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Ffn-header-semantic-fail.stderr?ref=3379721a30d87c396df69efa15b1307389d408df", "patch": "@@ -194,7 +194,7 @@ LL |         async fn ft1() {}\n    |\n    = note: while checking the return type of the `async fn`\n    = note: expected fn pointer `fn()`\n-              found fn pointer `fn() -> impl Future`\n+              found fn pointer `fn() -> impl Future<Output = ()>`\n \n error[E0053]: method `ft5` has an incompatible type for trait\n   --> $DIR/fn-header-semantic-fail.rs:33:48\n@@ -210,7 +210,7 @@ LL |         const async unsafe extern \"C\" fn ft5() {}\n    |\n    = note: while checking the return type of the `async fn`\n    = note: expected fn pointer `unsafe extern \"C\" fn()`\n-              found fn pointer `unsafe extern \"C\" fn() -> impl Future`\n+              found fn pointer `unsafe extern \"C\" fn() -> impl Future<Output = ()>`\n \n error: aborting due to 20 previous errors\n "}, {"sha": "50446bb659b0c5822c57891d822e64113d718446", "filename": "src/test/ui/resolve/issue-70736-async-fn-no-body-def-collector.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3379721a30d87c396df69efa15b1307389d408df/src%2Ftest%2Fui%2Fresolve%2Fissue-70736-async-fn-no-body-def-collector.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3379721a30d87c396df69efa15b1307389d408df/src%2Ftest%2Fui%2Fresolve%2Fissue-70736-async-fn-no-body-def-collector.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-70736-async-fn-no-body-def-collector.stderr?ref=3379721a30d87c396df69efa15b1307389d408df", "patch": "@@ -58,7 +58,7 @@ LL |     async fn associated();\n    |\n    = note: while checking the return type of the `async fn`\n    = note: expected fn pointer `fn()`\n-              found fn pointer `fn() -> impl Future`\n+              found fn pointer `fn() -> impl Future<Output = ()>`\n \n error: aborting due to 6 previous errors\n "}, {"sha": "4759ebea0e9b700b388174f043deca50807296d3", "filename": "src/test/ui/suggestions/async-fn-ctor-passed-as-arg-where-it-should-have-been-called.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3379721a30d87c396df69efa15b1307389d408df/src%2Ftest%2Fui%2Fsuggestions%2Fasync-fn-ctor-passed-as-arg-where-it-should-have-been-called.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3379721a30d87c396df69efa15b1307389d408df/src%2Ftest%2Fui%2Fsuggestions%2Fasync-fn-ctor-passed-as-arg-where-it-should-have-been-called.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fasync-fn-ctor-passed-as-arg-where-it-should-have-been-called.stderr?ref=3379721a30d87c396df69efa15b1307389d408df", "patch": "@@ -1,15 +1,15 @@\n-error[E0277]: `fn() -> impl Future {foo}` is not a future\n+error[E0277]: `fn() -> impl Future<Output = ()> {foo}` is not a future\n   --> $DIR/async-fn-ctor-passed-as-arg-where-it-should-have-been-called.rs:10:9\n    |\n LL | async fn foo() {}\n    |          --- consider calling this function\n ...\n LL |     bar(foo);\n-   |     --- ^^^ `fn() -> impl Future {foo}` is not a future\n+   |     --- ^^^ `fn() -> impl Future<Output = ()> {foo}` is not a future\n    |     |\n    |     required by a bound introduced by this call\n    |\n-   = help: the trait `Future` is not implemented for `fn() -> impl Future {foo}`\n+   = help: the trait `Future` is not implemented for `fn() -> impl Future<Output = ()> {foo}`\n note: required by a bound in `bar`\n   --> $DIR/async-fn-ctor-passed-as-arg-where-it-should-have-been-called.rs:7:16\n    |"}, {"sha": "cb47d589bee5cde47d690600d94430fb3083d246", "filename": "src/test/ui/suggestions/issue-72766.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3379721a30d87c396df69efa15b1307389d408df/src%2Ftest%2Fui%2Fsuggestions%2Fissue-72766.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3379721a30d87c396df69efa15b1307389d408df/src%2Ftest%2Fui%2Fsuggestions%2Fissue-72766.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-72766.stderr?ref=3379721a30d87c396df69efa15b1307389d408df", "patch": "@@ -2,9 +2,9 @@ error[E0277]: the `?` operator can only be applied to values that implement `Try\n   --> $DIR/issue-72766.rs:14:5\n    |\n LL |     SadGirl {}.call()?;\n-   |     ^^^^^^^^^^^^^^^^^^ the `?` operator cannot be applied to type `impl Future`\n+   |     ^^^^^^^^^^^^^^^^^^ the `?` operator cannot be applied to type `impl Future<Output = Result<(), ()>>`\n    |\n-   = help: the trait `Try` is not implemented for `impl Future`\n+   = help: the trait `Try` is not implemented for `impl Future<Output = Result<(), ()>>`\n note: required by `branch`\n   --> $SRC_DIR/core/src/ops/try_trait.rs:LL:COL\n    |"}, {"sha": "0b1c41b837f6a9d334104ce46d87d1531c9bd48b", "filename": "src/test/ui/suggestions/issue-81839.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3379721a30d87c396df69efa15b1307389d408df/src%2Ftest%2Fui%2Fsuggestions%2Fissue-81839.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3379721a30d87c396df69efa15b1307389d408df/src%2Ftest%2Fui%2Fsuggestions%2Fissue-81839.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-81839.stderr?ref=3379721a30d87c396df69efa15b1307389d408df", "patch": "@@ -20,7 +20,7 @@ note: while checking the return type of the `async fn`\n LL |     pub async fn answer_str(&self, _s: &str) -> Test {\n    |                                                 ^^^^ checked the `Output` of this `async fn`, found opaque type\n    = note:     expected type `()`\n-           found opaque type `impl Future`\n+           found opaque type `impl Future<Output = Test>`\n \n error: aborting due to previous error\n "}, {"sha": "6aa93a24d2f04badad96d70142113ee6b07a00f6", "filename": "src/test/ui/suggestions/match-prev-arm-needing-semi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3379721a30d87c396df69efa15b1307389d408df/src%2Ftest%2Fui%2Fsuggestions%2Fmatch-prev-arm-needing-semi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3379721a30d87c396df69efa15b1307389d408df/src%2Ftest%2Fui%2Fsuggestions%2Fmatch-prev-arm-needing-semi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fmatch-prev-arm-needing-semi.rs?ref=3379721a30d87c396df69efa15b1307389d408df", "patch": "@@ -55,7 +55,7 @@ async fn async_different_futures() {\n         //~| HELP consider `await`ing on both `Future`s\n         false => async_dummy2(), //~ ERROR `match` arms have incompatible types\n         //~^ NOTE expected opaque type, found a different opaque type\n-        //~| NOTE expected type `impl Future`\n+        //~| NOTE expected type `impl Future<Output = ()>`\n         //~| NOTE distinct uses of `impl Trait` result in different opaque types\n     };\n }"}, {"sha": "b55c51b92809a35f5d9e020a6d0db9ee332d5afa", "filename": "src/test/ui/suggestions/match-prev-arm-needing-semi.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3379721a30d87c396df69efa15b1307389d408df/src%2Ftest%2Fui%2Fsuggestions%2Fmatch-prev-arm-needing-semi.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3379721a30d87c396df69efa15b1307389d408df/src%2Ftest%2Fui%2Fsuggestions%2Fmatch-prev-arm-needing-semi.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fmatch-prev-arm-needing-semi.stderr?ref=3379721a30d87c396df69efa15b1307389d408df", "patch": "@@ -21,7 +21,7 @@ note: while checking the return type of the `async fn`\n LL | async fn async_dummy() {}\n    |                        ^ checked the `Output` of this `async fn`, found opaque type\n    = note:     expected type `()`\n-           found opaque type `impl Future`\n+           found opaque type `impl Future<Output = ()>`\n help: consider `await`ing on the `Future`\n    |\n LL |         false => async_dummy().await,\n@@ -55,7 +55,7 @@ note: while checking the return type of the `async fn`\n LL | async fn async_dummy2() {}\n    |                         ^ checked the `Output` of this `async fn`, found opaque type\n    = note:     expected type `()`\n-           found opaque type `impl Future`\n+           found opaque type `impl Future<Output = ()>`\n help: consider `await`ing on the `Future`\n    |\n LL |         false => async_dummy2().await,\n@@ -74,7 +74,7 @@ error[E0308]: `match` arms have incompatible types\n LL |       let _ = match true {\n    |  _____________-\n LL | |         true => async_dummy(),\n-   | |                 ------------- this is found to be of type `impl Future`\n+   | |                 ------------- this is found to be of type `impl Future<Output = ()>`\n LL | |\n LL | |         false => async_dummy2(),\n    | |                  ^^^^^^^^^^^^^^ expected opaque type, found a different opaque type\n@@ -88,8 +88,8 @@ note: while checking the return type of the `async fn`\n    |\n LL | async fn async_dummy2() {}\n    |                         ^ checked the `Output` of this `async fn`, found opaque type\n-   = note:     expected type `impl Future` (opaque type at <$DIR/match-prev-arm-needing-semi.rs:16:24>)\n-           found opaque type `impl Future` (opaque type at <$DIR/match-prev-arm-needing-semi.rs:19:25>)\n+   = note:     expected type `impl Future<Output = ()>` (opaque type at <$DIR/match-prev-arm-needing-semi.rs:16:24>)\n+           found opaque type `impl Future<Output = ()>` (opaque type at <$DIR/match-prev-arm-needing-semi.rs:19:25>)\n    = note: distinct uses of `impl Trait` result in different opaque types\n help: consider `await`ing on both `Future`s\n    |"}, {"sha": "e065e0aaa8e0622480eef0c1d5d679d706a8ce28", "filename": "src/test/ui/suggestions/opaque-type-error.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3379721a30d87c396df69efa15b1307389d408df/src%2Ftest%2Fui%2Fsuggestions%2Fopaque-type-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3379721a30d87c396df69efa15b1307389d408df/src%2Ftest%2Fui%2Fsuggestions%2Fopaque-type-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fopaque-type-error.stderr?ref=3379721a30d87c396df69efa15b1307389d408df", "patch": "@@ -13,8 +13,8 @@ LL | |         thing_two()\n LL | |     }.await\n    | |_____- `if` and `else` have incompatible types\n    |\n-   = note:     expected type `impl Future` (opaque type at <$DIR/opaque-type-error.rs:8:19>)\n-           found opaque type `impl Future` (opaque type at <$DIR/opaque-type-error.rs:12:19>)\n+   = note:     expected type `impl Future<Output = Result<(), ()>>` (opaque type at <$DIR/opaque-type-error.rs:8:19>)\n+           found opaque type `impl Future<Output = Result<(), ()>>` (opaque type at <$DIR/opaque-type-error.rs:12:19>)\n    = note: distinct uses of `impl Trait` result in different opaque types\n help: consider `await`ing on both `Future`s\n    |"}]}