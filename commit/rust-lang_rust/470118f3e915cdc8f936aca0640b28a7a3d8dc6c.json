{"sha": "470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ3MDExOGYzZTkxNWNkYzhmOTM2YWNhMDY0MGIyOGE3YTNkOGRjNmM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-01-04T04:50:56Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-01-04T04:50:56Z"}, "message": "auto merge of #20504 : japaric/rust/derive-self, r=alexcrichton\n\nI put the sed scripts in the commits, in case this needs a \"rebase\".", "tree": {"sha": "47f99908d999aa612a4cd44932dcdc3b3a1a966a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/47f99908d999aa612a4cd44932dcdc3b3a1a966a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "html_url": "https://github.com/rust-lang/rust/commit/470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c6c786671d692d7b13c2e5c68a53001327b4b125", "url": "https://api.github.com/repos/rust-lang/rust/commits/c6c786671d692d7b13c2e5c68a53001327b4b125", "html_url": "https://github.com/rust-lang/rust/commit/c6c786671d692d7b13c2e5c68a53001327b4b125"}, {"sha": "351409a62287c7993bc680d9dfcfa13cba9c9c0c", "url": "https://api.github.com/repos/rust-lang/rust/commits/351409a62287c7993bc680d9dfcfa13cba9c9c0c", "html_url": "https://github.com/rust-lang/rust/commit/351409a62287c7993bc680d9dfcfa13cba9c9c0c"}], "stats": {"total": 2832, "additions": 1416, "deletions": 1416}, "files": [{"sha": "202a87fcdc9e7516406af1dd48639b954314ad19", "filename": "src/compiletest/common.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Fcompiletest%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Fcompiletest%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fcommon.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -13,7 +13,7 @@ use std::fmt;\n use std::str::FromStr;\n use regex::Regex;\n \n-#[deriving(Clone, PartialEq)]\n+#[derive(Clone, PartialEq)]\n pub enum Mode {\n     CompileFail,\n     RunFail,\n@@ -59,7 +59,7 @@ impl fmt::Show for Mode {\n     }\n }\n \n-#[deriving(Clone)]\n+#[derive(Clone)]\n pub struct Config {\n     // The library paths required for running the compiler\n     pub compile_lib_path: String,"}, {"sha": "f330bb3143eaba2a29c7af5892c2da410209b7b7", "filename": "src/compiletest/errors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Fcompiletest%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Fcompiletest%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Ferrors.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -30,7 +30,7 @@ pub struct ExpectedError {\n pub static EXPECTED_PATTERN : &'static str =\n     r\"//~(?P<follow>\\|)?(?P<adjusts>\\^*)\\s*(?P<kind>\\S*)\\s*(?P<msg>.*)\";\n \n-#[deriving(PartialEq, Show)]\n+#[derive(PartialEq, Show)]\n enum WhichLine { ThisLine, FollowPrevious(uint), AdjustBackward(uint) }\n \n // Load any test directives embedded in the file"}, {"sha": "56e1736196ece3ea57a105b61dfdad25f6a59d09", "filename": "src/grammar/verify.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Fgrammar%2Fverify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Fgrammar%2Fverify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fgrammar%2Fverify.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -26,7 +26,7 @@ use std::io::File;\n \n use syntax::parse;\n use syntax::parse::lexer;\n-use rustc::session::{mod, config};\n+use rustc::session::{self, config};\n \n use syntax::ast;\n use syntax::ast::Name;"}, {"sha": "0a81418334674597bb9da33c02674bbdc5ad352d", "filename": "src/liballoc/arc.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Fliballoc%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Fliballoc%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Farc.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -71,7 +71,7 @@ use core::atomic;\n use core::atomic::Ordering::{Relaxed, Release, Acquire, SeqCst};\n use core::borrow::BorrowFrom;\n use core::clone::Clone;\n-use core::fmt::{mod, Show};\n+use core::fmt::{self, Show};\n use core::cmp::{Eq, Ord, PartialEq, PartialOrd, Ordering};\n use core::default::Default;\n use core::kinds::{Sync, Send};\n@@ -81,7 +81,7 @@ use core::nonzero::NonZero;\n use core::ops::{Drop, Deref};\n use core::option::Option;\n use core::option::Option::{Some, None};\n-use core::ptr::{mod, PtrExt};\n+use core::ptr::{self, PtrExt};\n use heap::deallocate;\n \n /// An atomically reference counted wrapper for shared state.\n@@ -800,6 +800,6 @@ mod tests {\n     }\n \n     // Make sure deriving works with Arc<T>\n-    #[deriving(Eq, Ord, PartialEq, PartialOrd, Clone, Show, Default)]\n+    #[derive(Eq, Ord, PartialEq, PartialOrd, Clone, Show, Default)]\n     struct Foo { inner: Arc<int> }\n }"}, {"sha": "362f6c66b599d4b28bc16736197b75effe312376", "filename": "src/liballoc/boxed.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Fliballoc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Fliballoc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fboxed.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -17,7 +17,7 @@ use core::clone::Clone;\n use core::cmp::{PartialEq, PartialOrd, Eq, Ord, Ordering};\n use core::default::Default;\n use core::fmt;\n-use core::hash::{mod, Hash};\n+use core::hash::{self, Hash};\n use core::kinds::Sized;\n use core::mem;\n use core::option::Option;"}, {"sha": "c4b455aff5c53cea59eecc9ff87489e29bb1d731", "filename": "src/liballoc/rc.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Fliballoc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Fliballoc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Frc.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -147,14 +147,14 @@ use core::clone::Clone;\n use core::cmp::{PartialEq, PartialOrd, Eq, Ord, Ordering};\n use core::default::Default;\n use core::fmt;\n-use core::hash::{mod, Hash};\n+use core::hash::{self, Hash};\n use core::kinds::marker;\n use core::mem::{transmute, min_align_of, size_of, forget};\n use core::nonzero::NonZero;\n use core::ops::{Deref, Drop};\n use core::option::Option;\n use core::option::Option::{Some, None};\n-use core::ptr::{mod, PtrExt};\n+use core::ptr::{self, PtrExt};\n use core::result::Result;\n use core::result::Result::{Ok, Err};\n \n@@ -264,7 +264,7 @@ pub fn is_unique<T>(rc: &Rc<T>) -> bool {\n /// # Example\n ///\n /// ```\n-/// use std::rc::{mod, Rc};\n+/// use std::rc::{self, Rc};\n ///\n /// let x = Rc::new(3u);\n /// assert_eq!(rc::try_unwrap(x), Ok(3u));\n@@ -298,7 +298,7 @@ pub fn try_unwrap<T>(rc: Rc<T>) -> Result<T, Rc<T>> {\n /// # Example\n ///\n /// ```\n-/// use std::rc::{mod, Rc};\n+/// use std::rc::{self, Rc};\n ///\n /// let mut x = Rc::new(3u);\n /// *rc::get_mut(&mut x).unwrap() = 4u;"}, {"sha": "423c16bfee8e8f376c106e6cbe23acbb80d2227f", "filename": "src/libarena/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibarena%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibarena%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibarena%2Flib.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -46,7 +46,7 @@ use std::rt::heap::{allocate, deallocate};\n // The way arena uses arrays is really deeply awful. The arrays are\n // allocated, and have capacities reserved, but the fill for the array\n // will always stay at 0.\n-#[deriving(Clone, PartialEq)]\n+#[derive(Clone, PartialEq)]\n struct Chunk {\n     data: Rc<RefCell<Vec<u8>>>,\n     fill: Cell<uint>,"}, {"sha": "4a550e5ce277d5eb7b1f8267bb567f9a72b02e6d", "filename": "src/libcollections/binary_heap.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibcollections%2Fbinary_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibcollections%2Fbinary_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbinary_heap.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -30,7 +30,7 @@\n //! use std::collections::BinaryHeap;\n //! use std::uint;\n //!\n-//! #[deriving(Copy, Eq, PartialEq)]\n+//! #[derive(Copy, Eq, PartialEq)]\n //! struct State {\n //!     cost: uint,\n //!     position: uint,\n@@ -157,12 +157,12 @@ use core::mem::{zeroed, replace, swap};\n use core::ptr;\n \n use slice;\n-use vec::{mod, Vec};\n+use vec::{self, Vec};\n \n /// A priority queue implemented with a binary heap.\n ///\n /// This will be a max-heap.\n-#[deriving(Clone)]\n+#[derive(Clone)]\n #[stable]\n pub struct BinaryHeap<T> {\n     data: Vec<T>,\n@@ -565,7 +565,7 @@ pub struct Iter <'a, T: 'a> {\n     iter: slice::Iter<'a, T>,\n }\n \n-// FIXME(#19839) Remove in favor of `#[deriving(Clone)]`\n+// FIXME(#19839) Remove in favor of `#[derive(Clone)]`\n impl<'a, T> Clone for Iter<'a, T> {\n     fn clone(&self) -> Iter<'a, T> {\n         Iter { iter: self.iter.clone() }"}, {"sha": "9f005a327b17cd2c11efad5508ce14cbbb5ff334", "filename": "src/libcollections/bit.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibcollections%2Fbit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibcollections%2Fbit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbit.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -89,7 +89,7 @@ use core::fmt;\n use core::hash;\n use core::iter::RandomAccessIterator;\n use core::iter::{Chain, Enumerate, Repeat, Skip, Take, repeat, Cloned};\n-use core::iter::{mod, FromIterator};\n+use core::iter::{self, FromIterator};\n use core::num::Int;\n use core::ops::Index;\n use core::slice;\n@@ -1040,7 +1040,7 @@ impl cmp::Eq for Bitv {}\n \n /// An iterator for `Bitv`.\n #[stable]\n-#[deriving(Clone)]\n+#[derive(Clone)]\n pub struct Iter<'a> {\n     bitv: &'a Bitv,\n     next_idx: uint,\n@@ -1139,7 +1139,7 @@ impl<'a> RandomAccessIterator for Iter<'a> {\n /// let bv: Bitv = s.into_bitv();\n /// assert!(bv[3]);\n /// ```\n-#[deriving(Clone)]\n+#[derive(Clone)]\n #[stable]\n pub struct BitvSet {\n     bitv: Bitv,\n@@ -1784,15 +1784,15 @@ impl<S: hash::Writer> hash::Hash<S> for BitvSet {\n }\n \n /// An iterator for `BitvSet`.\n-#[deriving(Clone)]\n+#[derive(Clone)]\n #[stable]\n pub struct SetIter<'a> {\n     set: &'a BitvSet,\n     next_idx: uint\n }\n \n /// An iterator combining two `BitvSet` iterators.\n-#[deriving(Clone)]\n+#[derive(Clone)]\n struct TwoBitPositions<'a> {\n     set: &'a BitvSet,\n     other: &'a BitvSet,"}, {"sha": "159f5723193944eb2dd086e4c312b42c90986860", "filename": "src/libcollections/btree/map.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbtree%2Fmap.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -33,9 +33,9 @@ use ring_buf::RingBuf;\n use self::Continuation::{Continue, Finished};\n use self::StackOp::*;\n use super::node::ForceResult::{Leaf, Internal};\n-use super::node::TraversalItem::{mod, Elem, Edge};\n+use super::node::TraversalItem::{self, Elem, Edge};\n use super::node::{Traversal, MutTraversal, MoveTraversal};\n-use super::node::{mod, Node, Found, GoDown};\n+use super::node::{self, Node, Found, GoDown};\n \n // FIXME(conventions): implement bounded iterators\n \n@@ -81,7 +81,7 @@ use super::node::{mod, Node, Found, GoDown};\n /// force this degenerate behaviour to occur on every operation. While the total amount of work\n /// done on each operation isn't *catastrophic*, and *is* still bounded by O(B log<sub>B</sub>n),\n /// it is certainly much slower when it does.\n-#[deriving(Clone)]\n+#[derive(Clone)]\n #[stable]\n pub struct BTreeMap<K, V> {\n     root: Node<K, V>,\n@@ -505,7 +505,7 @@ mod stack {\n     use core::mem;\n     use core::ops::{Deref, DerefMut};\n     use super::BTreeMap;\n-    use super::super::node::{mod, Node, Fit, Split, Internal, Leaf};\n+    use super::super::node::{self, Node, Fit, Split, Internal, Leaf};\n     use super::super::node::handle;\n     use vec::Vec;\n "}, {"sha": "1f719da590b349b8e772e26d4ef924e9008d0759", "filename": "src/libcollections/btree/node.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibcollections%2Fbtree%2Fnode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibcollections%2Fbtree%2Fnode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbtree%2Fnode.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -496,7 +496,7 @@ impl<K: Clone, V: Clone> Clone for Node<K, V> {\n ///     println!(\"Uninitialized memory: {}\", handle.into_kv());\n /// }\n /// ```\n-#[deriving(Copy)]\n+#[derive(Copy)]\n pub struct Handle<NodeRef, Type, NodeType> {\n     node: NodeRef,\n     index: uint"}, {"sha": "0406edcdd32e7ac622bbb277544f63120df93e93", "filename": "src/libcollections/btree/set.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibcollections%2Fbtree%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibcollections%2Fbtree%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbtree%2Fset.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -14,7 +14,7 @@\n use core::prelude::*;\n \n use core::borrow::BorrowFrom;\n-use core::cmp::Ordering::{mod, Less, Greater, Equal};\n+use core::cmp::Ordering::{self, Less, Greater, Equal};\n use core::default::Default;\n use core::fmt::Show;\n use core::fmt;\n@@ -30,7 +30,7 @@ use btree_map::{BTreeMap, Keys};\n ///\n /// See BTreeMap's documentation for a detailed discussion of this collection's performance\n /// benefits and drawbacks.\n-#[deriving(Clone, Hash, PartialEq, Eq, Ord, PartialOrd)]\n+#[derive(Clone, Hash, PartialEq, Eq, Ord, PartialOrd)]\n #[stable]\n pub struct BTreeSet<T>{\n     map: BTreeMap<T, ()>,"}, {"sha": "6d7e6778ec9894b0d7bfef5034f9dbee54dd01ce", "filename": "src/libcollections/dlist.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibcollections%2Fdlist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibcollections%2Fdlist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fdlist.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -26,7 +26,7 @@ use core::cmp::Ordering;\n use core::default::Default;\n use core::fmt;\n use core::hash::{Writer, Hash};\n-use core::iter::{mod, FromIterator};\n+use core::iter::{self, FromIterator};\n use core::mem;\n use core::ptr;\n \n@@ -84,7 +84,7 @@ pub struct IterMut<'a, T:'a> {\n }\n \n /// An iterator over mutable references to the items of a `DList`.\n-#[deriving(Clone)]\n+#[derive(Clone)]\n #[stable]\n pub struct IntoIter<T> {\n     list: DList<T>"}, {"sha": "324e0cb2b7ba93a226f8e6c607fbe290ca368f3d", "filename": "src/libcollections/enum_set.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibcollections%2Fenum_set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibcollections%2Fenum_set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fenum_set.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -21,7 +21,7 @@ use core::ops::{Sub, BitOr, BitAnd, BitXor};\n \n // FIXME(contentions): implement union family of methods? (general design may be wrong here)\n \n-#[deriving(Clone, PartialEq, Eq, PartialOrd, Ord, Hash)]\n+#[derive(Clone, PartialEq, Eq, PartialOrd, Ord, Hash)]\n /// A specialized set implementation to use enum types.\n pub struct EnumSet<E> {\n     // We must maintain the invariant that no bits are set\n@@ -223,7 +223,7 @@ pub struct Iter<E> {\n     bits: uint,\n }\n \n-// FIXME(#19839) Remove in favor of `#[deriving(Clone)]`\n+// FIXME(#19839) Remove in favor of `#[derive(Clone)]`\n impl<E> Clone for Iter<E> {\n     fn clone(&self) -> Iter<E> {\n         Iter {\n@@ -287,7 +287,7 @@ mod test {\n \n     use super::{EnumSet, CLike};\n \n-    #[deriving(Copy, PartialEq, Show)]\n+    #[derive(Copy, PartialEq, Show)]\n     #[repr(uint)]\n     enum Foo {\n         A, B, C\n@@ -491,7 +491,7 @@ mod test {\n     #[should_fail]\n     fn test_overflow() {\n         #[allow(dead_code)]\n-        #[deriving(Copy)]\n+        #[derive(Copy)]\n         #[repr(uint)]\n         enum Bar {\n             V00, V01, V02, V03, V04, V05, V06, V07, V08, V09,"}, {"sha": "77f41a2b0a7e55624f9acd89ed54245c83a9f8b0", "filename": "src/libcollections/ring_buf.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibcollections%2Fring_buf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibcollections%2Fring_buf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fring_buf.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -17,7 +17,7 @@ use core::prelude::*;\n use core::cmp::Ordering;\n use core::default::Default;\n use core::fmt;\n-use core::iter::{mod, FromIterator, RandomAccessIterator};\n+use core::iter::{self, FromIterator, RandomAccessIterator};\n use core::kinds::marker;\n use core::mem;\n use core::num::{Int, UnsignedInt};\n@@ -1139,7 +1139,7 @@ pub struct Iter<'a, T:'a> {\n     head: uint\n }\n \n-// FIXME(#19839) Remove in favor of `#[deriving(Clone)]`\n+// FIXME(#19839) Remove in favor of `#[derive(Clone)]`\n impl<'a, T> Clone for Iter<'a, T> {\n     fn clone(&self) -> Iter<'a, T> {\n         Iter {\n@@ -1674,21 +1674,21 @@ mod tests {\n         })\n     }\n \n-    #[deriving(Clone, PartialEq, Show)]\n+    #[derive(Clone, PartialEq, Show)]\n     enum Taggy {\n         One(int),\n         Two(int, int),\n         Three(int, int, int),\n     }\n \n-    #[deriving(Clone, PartialEq, Show)]\n+    #[derive(Clone, PartialEq, Show)]\n     enum Taggypar<T> {\n         Onepar(int),\n         Twopar(int, int),\n         Threepar(int, int, int),\n     }\n \n-    #[deriving(Clone, PartialEq, Show)]\n+    #[derive(Clone, PartialEq, Show)]\n     struct RecCy {\n         x: int,\n         y: int,"}, {"sha": "510be24befd1c5bb0a26c9fc7fd08ad1b896cd50", "filename": "src/libcollections/slice.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibcollections%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibcollections%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fslice.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -90,15 +90,15 @@\n use alloc::boxed::Box;\n use core::borrow::{BorrowFrom, BorrowFromMut, ToOwned};\n use core::clone::Clone;\n-use core::cmp::Ordering::{mod, Greater, Less};\n-use core::cmp::{mod, Ord, PartialEq};\n+use core::cmp::Ordering::{self, Greater, Less};\n+use core::cmp::{self, Ord, PartialEq};\n use core::iter::{Iterator, IteratorExt, IteratorCloneExt};\n use core::iter::{range, range_step, MultiplicativeIterator};\n use core::kinds::Sized;\n use core::mem::size_of;\n use core::mem;\n use core::ops::{FnMut, SliceMut};\n-use core::option::Option::{mod, Some, None};\n+use core::option::Option::{self, Some, None};\n use core::ptr::PtrExt;\n use core::ptr;\n use core::result::Result;\n@@ -1083,7 +1083,7 @@ impl<T: Clone, V: AsSlice<T>> SliceConcatExt<T, Vec<T>> for [V] {\n /// The last generated swap is always (0, 1), and it returns the\n /// sequence to its initial order.\n #[experimental]\n-#[deriving(Clone)]\n+#[derive(Clone)]\n pub struct ElementSwaps {\n     sdir: Vec<SizeDirection>,\n     /// If `true`, emit the last swap that returns the sequence to initial\n@@ -1130,11 +1130,11 @@ impl<T: Clone> ToOwned<Vec<T>> for [T] {\n // Iterators\n ////////////////////////////////////////////////////////////////////////////////\n \n-#[deriving(Copy, Clone)]\n+#[derive(Copy, Clone)]\n enum Direction { Pos, Neg }\n \n /// An `Index` and `Direction` together.\n-#[deriving(Copy, Clone)]\n+#[derive(Copy, Clone)]\n struct SizeDirection {\n     size: uint,\n     dir: Direction,\n@@ -2709,7 +2709,7 @@ mod tests {\n         assert!(values == [2, 3, 5, 6, 7]);\n     }\n \n-    #[deriving(Clone, PartialEq)]\n+    #[derive(Clone, PartialEq)]\n     struct Foo;\n \n     #[test]"}, {"sha": "fe85d4a5a9307b81440e0ffdeeb086e1dd126438", "filename": "src/libcollections/str.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibcollections%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibcollections%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstr.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -64,10 +64,10 @@ use core::default::Default;\n use core::fmt;\n use core::hash;\n use core::iter::AdditiveIterator;\n-use core::iter::{mod, range, Iterator, IteratorExt};\n+use core::iter::{self, range, Iterator, IteratorExt};\n use core::kinds::Sized;\n use core::ops;\n-use core::option::Option::{mod, Some, None};\n+use core::option::Option::{self, Some, None};\n use core::slice::AsSlice;\n use core::str as core_str;\n use unicode::str::{UnicodeStr, Utf16Encoder};\n@@ -165,15 +165,15 @@ fn canonical_sort(comb: &mut [(char, u8)]) {\n     }\n }\n \n-#[deriving(Clone)]\n+#[derive(Clone)]\n enum DecompositionType {\n     Canonical,\n     Compatible\n }\n \n /// External iterator for a string's decomposition's characters.\n /// Use with the `std::iter` module.\n-#[deriving(Clone)]\n+#[derive(Clone)]\n pub struct Decompositions<'a> {\n     kind: DecompositionType,\n     iter: Chars<'a>,\n@@ -252,7 +252,7 @@ impl<'a> Iterator for Decompositions<'a> {\n     }\n }\n \n-#[deriving(Clone)]\n+#[derive(Clone)]\n enum RecompositionState {\n     Composing,\n     Purging,\n@@ -261,7 +261,7 @@ enum RecompositionState {\n \n /// External iterator for a string's recomposition's characters.\n /// Use with the `std::iter` module.\n-#[deriving(Clone)]\n+#[derive(Clone)]\n pub struct Recompositions<'a> {\n     iter: Decompositions<'a>,\n     state: RecompositionState,\n@@ -356,7 +356,7 @@ impl<'a> Iterator for Recompositions<'a> {\n \n /// External iterator for a string's UTF16 codeunits.\n /// Use with the `std::iter` module.\n-#[deriving(Clone)]\n+#[derive(Clone)]\n pub struct Utf16Units<'a> {\n     encoder: Utf16Encoder<Chars<'a>>\n }"}, {"sha": "0cd3770d39136e721e660d9d7774a467ecd5bc2a", "filename": "src/libcollections/string.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibcollections%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibcollections%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstring.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -23,17 +23,17 @@ use core::fmt;\n use core::hash;\n use core::iter::FromIterator;\n use core::mem;\n-use core::ops::{mod, Deref, Add};\n+use core::ops::{self, Deref, Add};\n use core::ptr;\n use core::raw::Slice as RawSlice;\n use unicode::str as unicode_str;\n use unicode::str::Utf16Item;\n \n-use str::{mod, CharRange, FromStr, Utf8Error};\n+use str::{self, CharRange, FromStr, Utf8Error};\n use vec::{DerefVec, Vec, as_vec};\n \n /// A growable string stored as a UTF-8 encoded buffer.\n-#[deriving(Clone, PartialOrd, Eq, Ord)]\n+#[derive(Clone, PartialOrd, Eq, Ord)]\n #[stable]\n pub struct String {\n     vec: Vec<u8>,"}, {"sha": "04bdd04bfaacf7d9769e77a48676ec450e3667b2", "filename": "src/libcollections/vec.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibcollections%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibcollections%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -53,7 +53,7 @@ use core::cmp::max;\n use core::cmp::{Equiv, Ordering};\n use core::default::Default;\n use core::fmt;\n-use core::hash::{mod, Hash};\n+use core::hash::{self, Hash};\n use core::iter::{repeat, FromIterator};\n use core::kinds::marker::{ContravariantLifetime, InvariantType};\n use core::mem;\n@@ -795,7 +795,7 @@ impl<T> Vec<T> {\n     /// let w = v.map_in_place(|i| i + 3);\n     /// assert_eq!(w.as_slice(), [3, 4, 5].as_slice());\n     ///\n-    /// #[deriving(PartialEq, Show)]\n+    /// #[derive(PartialEq, Show)]\n     /// struct Newtype(u8);\n     /// let bytes = vec![0x11, 0x22];\n     /// let newtyped_bytes = bytes.map_in_place(|x| Newtype(x));\n@@ -2276,7 +2276,7 @@ mod tests {\n     #[test]\n     fn test_map_in_place_zero_sized() {\n         let v = vec![(), ()];\n-        #[deriving(PartialEq, Show)]\n+        #[derive(PartialEq, Show)]\n         struct ZeroSized;\n         assert_eq!(v.map_in_place(|_| ZeroSized), [ZeroSized, ZeroSized]);\n     }\n@@ -2286,11 +2286,11 @@ mod tests {\n         use std::sync::atomic;\n         use std::sync::atomic::AtomicUint;\n \n-        #[deriving(Clone, PartialEq, Show)]\n+        #[derive(Clone, PartialEq, Show)]\n         struct Nothing;\n         impl Drop for Nothing { fn drop(&mut self) { } }\n \n-        #[deriving(Clone, PartialEq, Show)]\n+        #[derive(Clone, PartialEq, Show)]\n         struct ZeroSized;\n         impl Drop for ZeroSized {\n             fn drop(&mut self) {"}, {"sha": "b9c1a6a43f972c411e948b86c6498f95bf1b9c6c", "filename": "src/libcollections/vec_map.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibcollections%2Fvec_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibcollections%2Fvec_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec_map.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -673,7 +673,7 @@ pub struct Iter<'a, V:'a> {\n     iter: slice::Iter<'a, Option<V>>\n }\n \n-// FIXME(#19839) Remove in favor of `#[deriving(Clone)]`\n+// FIXME(#19839) Remove in favor of `#[derive(Clone)]`\n impl<'a, V> Clone for Iter<'a, V> {\n     fn clone(&self) -> Iter<'a, V> {\n         Iter {\n@@ -705,7 +705,7 @@ pub struct Keys<'a, V: 'a> {\n     iter: Map<(uint, &'a V), uint, Iter<'a, V>, fn((uint, &'a V)) -> uint>\n }\n \n-// FIXME(#19839) Remove in favor of `#[deriving(Clone)]`\n+// FIXME(#19839) Remove in favor of `#[derive(Clone)]`\n impl<'a, V> Clone for Keys<'a, V> {\n     fn clone(&self) -> Keys<'a, V> {\n         Keys {\n@@ -720,7 +720,7 @@ pub struct Values<'a, V: 'a> {\n     iter: Map<(uint, &'a V), &'a V, Iter<'a, V>, fn((uint, &'a V)) -> &'a V>\n }\n \n-// FIXME(#19839) Remove in favor of `#[deriving(Clone)]`\n+// FIXME(#19839) Remove in favor of `#[derive(Clone)]`\n impl<'a, V> Clone for Values<'a, V> {\n     fn clone(&self) -> Values<'a, V> {\n         Values {"}, {"sha": "5d3bcb19ae8675fa9e7e9b12e18b91b35e3b44f4", "filename": "src/libcore/atomic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibcore%2Fatomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibcore%2Fatomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fatomic.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -62,7 +62,7 @@ unsafe impl<T> Sync for AtomicPtr<T> {}\n /// Rust's memory orderings are [the same as\n /// C++'s](http://gcc.gnu.org/wiki/Atomic/GCCMM/AtomicSync).\n #[stable]\n-#[deriving(Copy)]\n+#[derive(Copy)]\n pub enum Ordering {\n     /// No ordering constraints, only atomic operations.\n     #[stable]"}, {"sha": "3bd200d38d715520f530d22904222cbca6700e38", "filename": "src/libcore/char.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibcore%2Fchar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibcore%2Fchar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fchar.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -430,13 +430,13 @@ impl Char for char {\n \n /// An iterator over the characters that represent a `char`, as escaped by\n /// Rust's unicode escaping rules.\n-#[deriving(Clone)]\n+#[derive(Clone)]\n pub struct EscapeUnicode {\n     c: char,\n     state: EscapeUnicodeState\n }\n \n-#[deriving(Clone)]\n+#[derive(Clone)]\n enum EscapeUnicodeState {\n     Backslash,\n     Type,\n@@ -490,12 +490,12 @@ impl Iterator for EscapeUnicode {\n \n /// An iterator over the characters that represent a `char`, escaped\n /// for maximum portability.\n-#[deriving(Clone)]\n+#[derive(Clone)]\n pub struct EscapeDefault {\n     state: EscapeDefaultState\n }\n \n-#[deriving(Clone)]\n+#[derive(Clone)]\n enum EscapeDefaultState {\n     Backslash(char),\n     Char(char),"}, {"sha": "6b52d1817e9c4c0c33e7f213bf7f22d87a8c6d15", "filename": "src/libcore/cmp.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibcore%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibcore%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcmp.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -44,7 +44,7 @@\n use self::Ordering::*;\n \n use kinds::Sized;\n-use option::Option::{mod, Some, None};\n+use option::Option::{self, Some, None};\n \n /// Trait for equality comparisons which are [partial equivalence relations](\n /// http://en.wikipedia.org/wiki/Partial_equivalence_relation).\n@@ -104,7 +104,7 @@ pub trait Eq for Sized?: PartialEq<Self> {\n }\n \n /// An ordering is, e.g, a result of a comparison between two values.\n-#[deriving(Clone, Copy, PartialEq, Show)]\n+#[derive(Clone, Copy, PartialEq, Show)]\n #[stable]\n pub enum Ordering {\n     /// An ordering where a compared value is less [than another]."}, {"sha": "8d4ecf7224339c64d8e1368389e0e18d61a22c31", "filename": "src/libcore/default.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibcore%2Fdefault.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibcore%2Fdefault.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fdefault.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -26,7 +26,7 @@\n //! ```\n //! use std::default::Default;\n //!\n-//! #[deriving(Default)]\n+//! #[derive(Default)]\n //! struct SomeOptions {\n //!     foo: int,\n //!     bar: f32,\n@@ -54,7 +54,7 @@\n //!     fn default() -> Kind { Kind::A }\n //! }\n //!\n-//! #[deriving(Default)]\n+//! #[derive(Default)]\n //! struct SomeOptions {\n //!     foo: int,\n //!     bar: f32,\n@@ -71,7 +71,7 @@\n //!\n //! ```\n //! # use std::default::Default;\n-//! # #[deriving(Default)]\n+//! # #[derive(Default)]\n //! # struct SomeOptions {\n //! #     foo: int,\n //! #     bar: f32,\n@@ -86,12 +86,12 @@\n /// A trait that types which have a useful default value should implement.\n ///\n /// A struct can derive default implementations of `Default` for basic types using\n-/// `#[deriving(Default)]`.\n+/// `#[derive(Default)]`.\n ///\n /// # Examples\n ///\n /// ```\n-/// #[deriving(Default)]\n+/// #[derive(Default)]\n /// struct SomeOptions {\n ///     foo: int,\n ///     bar: f32,"}, {"sha": "9e62226220c0ee84970da6e8273d8774f8fd018f", "filename": "src/libcore/fmt/float.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibcore%2Ffmt%2Ffloat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibcore%2Ffmt%2Ffloat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Ffloat.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -22,8 +22,8 @@ use num::{cast, Float, ToPrimitive};\n use num::FpCategory as Fp;\n use ops::FnOnce;\n use result::Result::Ok;\n-use slice::{mod, SliceExt};\n-use str::{mod, StrExt};\n+use slice::{self, SliceExt};\n+use str::{self, StrExt};\n \n /// A flag that specifies whether to use exponential (scientific) notation.\n pub enum ExponentFormat {"}, {"sha": "f49f87ff329f06ec39730882c8ccba7efe5c8fc1", "filename": "src/libcore/fmt/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibcore%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibcore%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fmod.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -24,7 +24,7 @@ use result::Result::{Ok, Err};\n use result;\n use slice::SliceExt;\n use slice;\n-use str::{mod, StrExt, Utf8Error};\n+use str::{self, StrExt, Utf8Error};\n \n pub use self::num::radix;\n pub use self::num::Radix;\n@@ -44,7 +44,7 @@ pub type Result = result::Result<(), Error>;\n /// occurred. Any extra information must be arranged to be transmitted through\n /// some other means.\n #[experimental = \"core and I/O reconciliation may alter this definition\"]\n-#[deriving(Copy)]\n+#[derive(Copy)]\n pub struct Error;\n \n /// A collection of methods that are required to format a message into a stream.\n@@ -122,7 +122,7 @@ enum Void {}\n /// compile time it is ensured that the function and the value have the correct\n /// types, and then this struct is used to canonicalize arguments to one type.\n #[experimental = \"implementation detail of the `format_args!` macro\"]\n-#[deriving(Copy)]\n+#[derive(Copy)]\n pub struct Argument<'a> {\n     value: &'a Void,\n     formatter: fn(&Void, &mut Formatter) -> Result,\n@@ -199,7 +199,7 @@ impl<'a> Arguments<'a> {\n /// macro validates the format string at compile-time so usage of the `write`\n /// and `format` functions can be safely performed.\n #[stable]\n-#[deriving(Copy)]\n+#[derive(Copy)]\n pub struct Arguments<'a> {\n     // Format string pieces to print.\n     pieces: &'a [&'a str],"}, {"sha": "e0724fc2da5f5dc4536357efe6587d77397a08e8", "filename": "src/libcore/fmt/num.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibcore%2Ffmt%2Fnum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibcore%2Ffmt%2Fnum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fnum.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -67,23 +67,23 @@ trait GenericRadix {\n }\n \n /// A binary (base 2) radix\n-#[deriving(Clone, PartialEq)]\n+#[derive(Clone, PartialEq)]\n struct Binary;\n \n /// An octal (base 8) radix\n-#[deriving(Clone, PartialEq)]\n+#[derive(Clone, PartialEq)]\n struct Octal;\n \n /// A decimal (base 10) radix\n-#[deriving(Clone, PartialEq)]\n+#[derive(Clone, PartialEq)]\n struct Decimal;\n \n /// A hexadecimal (base 16) radix, formatted with lower-case characters\n-#[deriving(Clone, PartialEq)]\n+#[derive(Clone, PartialEq)]\n struct LowerHex;\n \n /// A hexadecimal (base 16) radix, formatted with upper-case characters\n-#[deriving(Clone, PartialEq)]\n+#[derive(Clone, PartialEq)]\n pub struct UpperHex;\n \n macro_rules! radix {\n@@ -110,7 +110,7 @@ radix! { UpperHex, 16, \"0x\", x @  0 ...  9 => b'0' + x,\n                              x @ 10 ... 15 => b'A' + (x - 10) }\n \n /// A radix with in the range of `2..36`.\n-#[deriving(Clone, Copy, PartialEq)]\n+#[derive(Clone, Copy, PartialEq)]\n #[unstable = \"may be renamed or move to a different module\"]\n pub struct Radix {\n     base: u8,\n@@ -136,7 +136,7 @@ impl GenericRadix for Radix {\n \n /// A helper type for formatting radixes.\n #[unstable = \"may be renamed or move to a different module\"]\n-#[deriving(Copy)]\n+#[derive(Copy)]\n pub struct RadixFmt<T, R>(T, R);\n \n /// Constructs a radix formatter in the range of `2..36`."}, {"sha": "6dbda3d84459ef88aa6461d7e4e611ba8c394144", "filename": "src/libcore/fmt/rt.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibcore%2Ffmt%2Frt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibcore%2Ffmt%2Frt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Frt.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -22,14 +22,14 @@ pub use self::Position::*;\n pub use self::Flag::*;\n \n #[doc(hidden)]\n-#[deriving(Copy)]\n+#[derive(Copy)]\n pub struct Argument<'a> {\n     pub position: Position,\n     pub format: FormatSpec,\n }\n \n #[doc(hidden)]\n-#[deriving(Copy)]\n+#[derive(Copy)]\n pub struct FormatSpec {\n     pub fill: char,\n     pub align: Alignment,\n@@ -39,7 +39,7 @@ pub struct FormatSpec {\n }\n \n /// Possible alignments that can be requested as part of a formatting directive.\n-#[deriving(Copy, PartialEq)]\n+#[derive(Copy, PartialEq)]\n pub enum Alignment {\n     /// Indication that contents should be left-aligned.\n     AlignLeft,\n@@ -52,13 +52,13 @@ pub enum Alignment {\n }\n \n #[doc(hidden)]\n-#[deriving(Copy)]\n+#[derive(Copy)]\n pub enum Count {\n     CountIs(uint), CountIsParam(uint), CountIsNextParam, CountImplied,\n }\n \n #[doc(hidden)]\n-#[deriving(Copy)]\n+#[derive(Copy)]\n pub enum Position {\n     ArgumentNext, ArgumentIs(uint)\n }\n@@ -68,7 +68,7 @@ pub enum Position {\n /// These flags are discovered through the `flags` field of the `Formatter`\n /// structure. The flag in that structure is a union of these flags into a\n /// `uint` where each flag's discriminant is the corresponding bit.\n-#[deriving(Copy)]\n+#[derive(Copy)]\n pub enum Flag {\n     /// A flag which enables number formatting to always print the sign of a\n     /// number."}, {"sha": "b0a5ec9fe12ed5caf7650cf5ac4eb0c1034d90b6", "filename": "src/libcore/hash/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibcore%2Fhash%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibcore%2Fhash%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fhash%2Fmod.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -11,15 +11,15 @@\n //! Generic hashing support.\n //!\n //! This module provides a generic way to compute the hash of a value. The\n-//! simplest way to make a type hashable is to use `#[deriving(Hash)]`:\n+//! simplest way to make a type hashable is to use `#[derive(Hash)]`:\n //!\n //! # Examples\n //!\n //! ```rust\n //! use std::hash;\n //! use std::hash::Hash;\n //!\n-//! #[deriving(Hash)]\n+//! #[derive(Hash)]\n //! struct Person {\n //!     id: uint,\n //!     name: String,"}, {"sha": "f9da0493f3edb0761629e65a3d32169aecae7b44", "filename": "src/libcore/hash/sip.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibcore%2Fhash%2Fsip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibcore%2Fhash%2Fsip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fhash%2Fsip.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -30,7 +30,7 @@ use default::Default;\n use super::{Hash, Hasher, Writer};\n \n /// `SipState` computes a SipHash 2-4 hash over a stream of bytes.\n-#[deriving(Copy)]\n+#[derive(Copy)]\n pub struct SipState {\n     k0: u64,\n     k1: u64,\n@@ -213,7 +213,7 @@ impl Default for SipState {\n }\n \n /// `SipHasher` computes the SipHash algorithm from a stream of bytes.\n-#[deriving(Clone)]\n+#[derive(Clone)]\n #[allow(missing_copy_implementations)]\n pub struct SipHasher {\n     k0: u64,"}, {"sha": "7e1359d5c12013cbe2be42332571d970c69034c7", "filename": "src/libcore/intrinsics.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibcore%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibcore%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fintrinsics.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -45,7 +45,7 @@\n pub type GlueFn = extern \"Rust\" fn(*const i8);\n \n #[lang=\"ty_desc\"]\n-#[deriving(Copy)]\n+#[derive(Copy)]\n pub struct TyDesc {\n     // sizeof(T)\n     pub size: uint,\n@@ -545,7 +545,7 @@ extern \"rust-intrinsic\" {\n /// `TypeId` represents a globally unique identifier for a type\n #[lang=\"type_id\"] // This needs to be kept in lockstep with the code in trans/intrinsic.rs and\n                   // middle/lang_items.rs\n-#[deriving(Clone, Copy, PartialEq, Eq, Show)]\n+#[derive(Clone, Copy, PartialEq, Eq, Show)]\n pub struct TypeId {\n     t: u64,\n }"}, {"sha": "b409b79cbf5055262638b1a861faa30246932609", "filename": "src/libcore/iter.rs", "status": "modified", "additions": 26, "deletions": 26, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibcore%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibcore%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -885,7 +885,7 @@ impl<A, B, I, F> ExactSizeIterator for Map<A, B, I, F> where\n impl<A, B> ExactSizeIterator for Zip<A, B> where A: ExactSizeIterator, B: ExactSizeIterator {}\n \n /// An double-ended iterator with the direction inverted\n-#[deriving(Clone)]\n+#[derive(Clone)]\n #[must_use = \"iterator adaptors are lazy and do nothing unless consumed\"]\n #[stable]\n pub struct Rev<T> {\n@@ -1153,7 +1153,7 @@ impl<T, I> IteratorOrdExt<T> for I where I: Iterator<Item=T>, T: Ord {\n }\n \n /// `MinMaxResult` is an enum returned by `min_max`. See `IteratorOrdExt::min_max` for more detail.\n-#[deriving(Clone, PartialEq, Show)]\n+#[derive(Clone, PartialEq, Show)]\n #[unstable = \"waiting on namespaced enum conventions\"]\n pub enum MinMaxResult<T> {\n     /// Empty iterator\n@@ -1176,7 +1176,7 @@ impl<T: Clone> MinMaxResult<T> {\n     /// # Example\n     ///\n     /// ```rust\n-    /// use std::iter::MinMaxResult::{mod, NoElements, OneElement, MinMax};\n+    /// use std::iter::MinMaxResult::{self, NoElements, OneElement, MinMax};\n     ///\n     /// let r: MinMaxResult<int> = NoElements;\n     /// assert_eq!(r.into_option(), None);\n@@ -1280,7 +1280,7 @@ impl<I> CloneIteratorExt for I where I: Iterator + Clone {\n }\n \n /// An iterator that repeats endlessly\n-#[deriving(Clone, Copy)]\n+#[derive(Clone, Copy)]\n #[must_use = \"iterator adaptors are lazy and do nothing unless consumed\"]\n #[stable]\n pub struct Cycle<I> {\n@@ -1338,7 +1338,7 @@ impl<I> RandomAccessIterator for Cycle<I> where\n }\n \n /// An iterator that strings two iterators together\n-#[deriving(Clone)]\n+#[derive(Clone)]\n #[must_use = \"iterator adaptors are lazy and do nothing unless consumed\"]\n #[stable]\n pub struct Chain<A, B> {\n@@ -1418,7 +1418,7 @@ impl<T, A, B> RandomAccessIterator for Chain<A, B> where\n }\n \n /// An iterator that iterates two other iterators simultaneously\n-#[deriving(Clone)]\n+#[derive(Clone)]\n #[must_use = \"iterator adaptors are lazy and do nothing unless consumed\"]\n #[stable]\n pub struct Zip<A, B> {\n@@ -1517,7 +1517,7 @@ pub struct Map<A, B, I: Iterator<Item=A>, F: FnMut(A) -> B> {\n     f: F,\n }\n \n-// FIXME(#19839) Remove in favor of `#[deriving(Clone)]`\n+// FIXME(#19839) Remove in favor of `#[derive(Clone)]`\n #[stable]\n impl<A, B, I, F> Clone for Map<A, B, I, F> where\n     I: Clone + Iterator<Item=A>,\n@@ -1594,7 +1594,7 @@ pub struct Filter<A, I, P> where I: Iterator<Item=A>, P: FnMut(&A) -> bool {\n     predicate: P,\n }\n \n-// FIXME(#19839) Remove in favor of `#[deriving(Clone)]`\n+// FIXME(#19839) Remove in favor of `#[derive(Clone)]`\n #[stable]\n impl<A, I, P> Clone for Filter<A, I, P> where\n     I: Clone + Iterator<Item=A>,\n@@ -1655,7 +1655,7 @@ pub struct FilterMap<A, B, I, F> where I: Iterator<Item=A>, F: FnMut(A) -> Optio\n     f: F,\n }\n \n-// FIXME(#19839) Remove in favor of `#[deriving(Clone)]`\n+// FIXME(#19839) Remove in favor of `#[derive(Clone)]`\n #[stable]\n impl<A, B, I, F> Clone for FilterMap<A, B, I, F> where\n     I: Clone + Iterator<Item=A>,\n@@ -1712,7 +1712,7 @@ impl<A, B, I, F> DoubleEndedIterator for FilterMap<A, B, I, F> where\n }\n \n /// An iterator that yields the current count and the element during iteration\n-#[deriving(Clone)]\n+#[derive(Clone)]\n #[must_use = \"iterator adaptors are lazy and do nothing unless consumed\"]\n #[stable]\n pub struct Enumerate<I> {\n@@ -1775,7 +1775,7 @@ impl<I> RandomAccessIterator for Enumerate<I> where I: RandomAccessIterator {\n /// An iterator with a `peek()` that returns an optional reference to the next element.\n #[must_use = \"iterator adaptors are lazy and do nothing unless consumed\"]\n #[stable]\n-#[deriving(Copy)]\n+#[derive(Copy)]\n pub struct Peekable<T, I> where I: Iterator<Item=T> {\n     iter: I,\n     peeked: Option<T>,\n@@ -1837,7 +1837,7 @@ pub struct SkipWhile<A, I, P> where I: Iterator<Item=A>, P: FnMut(&A) -> bool {\n     predicate: P,\n }\n \n-// FIXME(#19839) Remove in favor of `#[deriving(Clone)]`\n+// FIXME(#19839) Remove in favor of `#[derive(Clone)]`\n #[stable]\n impl<A, I, P> Clone for SkipWhile<A, I, P> where\n     I: Clone + Iterator<Item=A>,\n@@ -1883,7 +1883,7 @@ pub struct TakeWhile<A, I, P> where I: Iterator<Item=A>, P: FnMut(&A) -> bool {\n     predicate: P,\n }\n \n-// FIXME(#19839) Remove in favor of `#[deriving(Clone)]`\n+// FIXME(#19839) Remove in favor of `#[derive(Clone)]`\n #[stable]\n impl<A, I, P> Clone for TakeWhile<A, I, P> where\n     I: Clone + Iterator<Item=A>,\n@@ -1929,7 +1929,7 @@ impl<A, I, P> Iterator for TakeWhile<A, I, P> where I: Iterator<Item=A>, P: FnMu\n }\n \n /// An iterator that skips over `n` elements of `iter`.\n-#[deriving(Clone)]\n+#[derive(Clone)]\n #[must_use = \"iterator adaptors are lazy and do nothing unless consumed\"]\n #[stable]\n pub struct Skip<I> {\n@@ -1999,7 +1999,7 @@ impl<I> RandomAccessIterator for Skip<I> where I: RandomAccessIterator{\n }\n \n /// An iterator that only iterates over the first `n` iterations of `iter`.\n-#[deriving(Clone)]\n+#[derive(Clone)]\n #[must_use = \"iterator adaptors are lazy and do nothing unless consumed\"]\n #[stable]\n pub struct Take<I> {\n@@ -2065,7 +2065,7 @@ pub struct Scan<A, B, I, St, F> where I: Iterator, F: FnMut(&mut St, A) -> Optio\n     pub state: St,\n }\n \n-// FIXME(#19839) Remove in favor of `#[deriving(Clone)]`\n+// FIXME(#19839) Remove in favor of `#[derive(Clone)]`\n #[stable]\n impl<A, B, I, St, F> Clone for Scan<A, B, I, St, F> where\n     I: Clone + Iterator<Item=A>,\n@@ -2116,7 +2116,7 @@ pub struct FlatMap<A, B, I, U, F> where\n     backiter: Option<U>,\n }\n \n-// FIXME(#19839) Remove in favor of `#[deriving(Clone)]`\n+// FIXME(#19839) Remove in favor of `#[derive(Clone)]`\n #[stable]\n impl<A, B, I, U, F> Clone for FlatMap<A, B, I, U, F> where\n     I: Clone + Iterator<Item=A>,\n@@ -2193,7 +2193,7 @@ impl<A, B, I, U, F> DoubleEndedIterator for FlatMap<A, B, I, U, F> where\n \n /// An iterator that yields `None` forever after the underlying iterator\n /// yields `None` once.\n-#[deriving(Clone)]\n+#[derive(Clone)]\n #[must_use = \"iterator adaptors are lazy and do nothing unless consumed\"]\n #[stable]\n pub struct Fuse<I> {\n@@ -2281,7 +2281,7 @@ pub struct Inspect<A, I, F> where I: Iterator<Item=A>, F: FnMut(&A) {\n     f: F,\n }\n \n-// FIXME(#19839) Remove in favor of `#[deriving(Clone)]`\n+// FIXME(#19839) Remove in favor of `#[derive(Clone)]`\n #[stable]\n impl<A, I, F> Clone for Inspect<A, I, F> where\n     I: Clone + Iterator<Item=A>,\n@@ -2391,7 +2391,7 @@ pub struct Unfold<A, St, F> where F: FnMut(&mut St) -> Option<A> {\n     pub state: St,\n }\n \n-// FIXME(#19839) Remove in favor of `#[deriving(Clone)]`\n+// FIXME(#19839) Remove in favor of `#[derive(Clone)]`\n #[stable]\n impl<A, St, F> Clone for Unfold<A, St, F> where\n     F: Clone + FnMut(&mut St) -> Option<A>,\n@@ -2436,7 +2436,7 @@ impl<A, St, F> Iterator for Unfold<A, St, F> where F: FnMut(&mut St) -> Option<A\n \n /// An infinite iterator starting at `start` and advancing by `step` with each\n /// iteration\n-#[deriving(Clone, Copy)]\n+#[derive(Clone, Copy)]\n #[unstable = \"may be renamed\"]\n pub struct Counter<A> {\n     /// The current state the counter is at (next value to be yielded)\n@@ -2470,7 +2470,7 @@ impl<A: Add<Output=A> + Clone> Iterator for Counter<A> {\n }\n \n /// An iterator over the range [start, stop)\n-#[deriving(Clone, Copy)]\n+#[derive(Clone, Copy)]\n #[unstable = \"may be refactored due to numerics reform or ops reform\"]\n pub struct Range<A> {\n     state: A,\n@@ -2565,7 +2565,7 @@ impl<A: Int + ToPrimitive> DoubleEndedIterator for Range<A> {\n }\n \n /// An iterator over the range [start, stop]\n-#[deriving(Clone)]\n+#[derive(Clone)]\n #[unstable = \"may be refactored due to numerics reform or ops reform\"]\n pub struct RangeInclusive<A> {\n     range: Range<A>,\n@@ -2635,7 +2635,7 @@ impl<A: Int + ToPrimitive> DoubleEndedIterator for RangeInclusive<A> {\n }\n \n /// An iterator over the range [start, stop) by `step`. It handles overflow by stopping.\n-#[deriving(Clone)]\n+#[derive(Clone)]\n #[unstable = \"may be refactored due to numerics reform or ops reform\"]\n pub struct RangeStep<A> {\n     state: A,\n@@ -2672,7 +2672,7 @@ impl<A: Int> Iterator for RangeStep<A> {\n }\n \n /// An iterator over the range [start, stop] by `step`. It handles overflow by stopping.\n-#[deriving(Clone)]\n+#[derive(Clone)]\n #[unstable = \"may be refactored due to numerics reform or ops reform\"]\n pub struct RangeStepInclusive<A> {\n     state: A,\n@@ -2775,7 +2775,7 @@ step_impl_no_between!(u64 i64);\n \n \n /// An iterator that repeats an element endlessly\n-#[deriving(Clone)]\n+#[derive(Clone)]\n #[stable]\n pub struct Repeat<A> {\n     element: A"}, {"sha": "e50aaef5f09f3de77ebfb3d0a10a39a84fecddfc", "filename": "src/libcore/kinds.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibcore%2Fkinds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibcore%2Fkinds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fkinds.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -132,7 +132,7 @@ pub mod marker {\n     /// (for example, `S<&'static int>` is a subtype of `S<&'a int>`\n     /// for some lifetime `'a`, but not the other way around).\n     #[lang=\"covariant_type\"]\n-    #[deriving(PartialEq, Eq, PartialOrd, Ord)]\n+    #[derive(PartialEq, Eq, PartialOrd, Ord)]\n     pub struct CovariantType<Sized? T>;\n \n     impl<Sized? T> Copy for CovariantType<T> {}\n@@ -180,7 +180,7 @@ pub mod marker {\n     /// function requires arguments of type `T`, it must also accept\n     /// arguments of type `U`, hence such a conversion is safe.\n     #[lang=\"contravariant_type\"]\n-    #[deriving(PartialEq, Eq, PartialOrd, Ord)]\n+    #[derive(PartialEq, Eq, PartialOrd, Ord)]\n     pub struct ContravariantType<Sized? T>;\n \n     impl<Sized? T> Copy for ContravariantType<T> {}\n@@ -210,7 +210,7 @@ pub mod marker {\n     /// never written, but in fact `Cell` uses unsafe code to achieve\n     /// interior mutability.\n     #[lang=\"invariant_type\"]\n-    #[deriving(PartialEq, Eq, PartialOrd, Ord)]\n+    #[derive(PartialEq, Eq, PartialOrd, Ord)]\n     pub struct InvariantType<Sized? T>;\n \n     impl<Sized? T> Copy for InvariantType<T> {}\n@@ -235,7 +235,7 @@ pub mod marker {\n     /// For more information about variance, refer to this Wikipedia\n     /// article <http://en.wikipedia.org/wiki/Variance_%28computer_science%29>.\n     #[lang=\"covariant_lifetime\"]\n-    #[deriving(Clone, Copy, PartialEq, Eq, PartialOrd, Ord)]\n+    #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord)]\n     pub struct CovariantLifetime<'a>;\n \n     /// As `ContravariantType`, but for lifetime parameters. Using\n@@ -251,7 +251,7 @@ pub mod marker {\n     /// For more information about variance, refer to this Wikipedia\n     /// article <http://en.wikipedia.org/wiki/Variance_%28computer_science%29>.\n     #[lang=\"contravariant_lifetime\"]\n-    #[deriving(Clone, Copy, PartialEq, Eq, PartialOrd, Ord)]\n+    #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord)]\n     pub struct ContravariantLifetime<'a>;\n \n     /// As `InvariantType`, but for lifetime parameters. Using\n@@ -262,36 +262,36 @@ pub mod marker {\n     /// and this pointer is itself stored in an inherently mutable\n     /// location (such as a `Cell`).\n     #[lang=\"invariant_lifetime\"]\n-    #[deriving(Clone, Copy, PartialEq, Eq, PartialOrd, Ord)]\n+    #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord)]\n     pub struct InvariantLifetime<'a>;\n \n     /// A type which is considered \"not sendable\", meaning that it cannot\n     /// be safely sent between tasks, even if it is owned. This is\n     /// typically embedded in other types, such as `Gc`, to ensure that\n     /// their instances remain thread-local.\n     #[lang=\"no_send_bound\"]\n-    #[deriving(Clone, Copy, PartialEq, Eq, PartialOrd, Ord)]\n+    #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord)]\n     pub struct NoSend;\n \n     /// A type which is considered \"not POD\", meaning that it is not\n     /// implicitly copyable. This is typically embedded in other types to\n     /// ensure that they are never copied, even if they lack a destructor.\n     #[lang=\"no_copy_bound\"]\n-    #[deriving(Clone, PartialEq, Eq, PartialOrd, Ord)]\n+    #[derive(Clone, PartialEq, Eq, PartialOrd, Ord)]\n     #[allow(missing_copy_implementations)]\n     pub struct NoCopy;\n \n     /// A type which is considered \"not sync\", meaning that\n     /// its contents are not threadsafe, hence they cannot be\n     /// shared between tasks.\n     #[lang=\"no_sync_bound\"]\n-    #[deriving(Clone, Copy, PartialEq, Eq, PartialOrd, Ord)]\n+    #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord)]\n     pub struct NoSync;\n \n     /// A type which is considered managed by the GC. This is typically\n     /// embedded in other types.\n     #[lang=\"managed_bound\"]\n-    #[deriving(Clone, PartialEq, Eq, PartialOrd, Ord)]\n+    #[derive(Clone, PartialEq, Eq, PartialOrd, Ord)]\n     #[allow(missing_copy_implementations)]\n     pub struct Managed;\n }"}, {"sha": "087404da624348ce48d40c3fff7fdb7bf42f51b3", "filename": "src/libcore/nonzero.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibcore%2Fnonzero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibcore%2Fnonzero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnonzero.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -31,7 +31,7 @@ unsafe impl Zeroable for u64 {}\n /// A wrapper type for raw pointers and integers that will never be\n /// NULL or 0 that might allow certain optimizations.\n #[lang=\"non_zero\"]\n-#[deriving(Copy, Clone, Eq, PartialEq, Ord, PartialOrd, Show)]\n+#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd, Show)]\n #[experimental]\n pub struct NonZero<T: Zeroable>(T);\n "}, {"sha": "4793efbe02ac3ce50edd3d0d311b95bbb4a21df8", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -1218,7 +1218,7 @@ impl_num_cast! { f32,   to_f32 }\n impl_num_cast! { f64,   to_f64 }\n \n /// Used for representing the classification of floating point numbers\n-#[deriving(Copy, PartialEq, Show)]\n+#[derive(Copy, PartialEq, Show)]\n #[unstable = \"may be renamed\"]\n pub enum FpCategory {\n     /// \"Not a Number\", often obtained by dividing by zero"}, {"sha": "2a7df5db5c900a13c3a94805f20e890114d3d785", "filename": "src/libcore/ops.rs", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibcore%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibcore%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -29,7 +29,7 @@\n //!\n //! use std::ops::{Add, Sub};\n //!\n-//! #[deriving(Show)]\n+//! #[derive(Show)]\n //! struct Point {\n //!     x: int,\n //!     y: int\n@@ -62,7 +62,7 @@\n use clone::Clone;\n use iter::{Step, Iterator,DoubleEndedIterator,ExactSizeIterator};\n use kinds::Sized;\n-use option::Option::{mod, Some, None};\n+use option::Option::{self, Some, None};\n \n /// The `Drop` trait is used to run some code when a value goes out of scope. This\n /// is sometimes called a 'destructor'.\n@@ -103,7 +103,7 @@ pub trait Drop {\n ///\n /// use std::ops::Add;\n ///\n-/// #[deriving(Copy)]\n+/// #[derive(Copy)]\n /// struct Foo;\n ///\n /// impl Add for Foo {\n@@ -152,7 +152,7 @@ add_impl! { uint u8 u16 u32 u64 int i8 i16 i32 i64 f32 f64 }\n ///\n /// use std::ops::Sub;\n ///\n-/// #[deriving(Copy)]\n+/// #[derive(Copy)]\n /// struct Foo;\n ///\n /// impl Sub for Foo {\n@@ -201,7 +201,7 @@ sub_impl! { uint u8 u16 u32 u64 int i8 i16 i32 i64 f32 f64 }\n ///\n /// use std::ops::Mul;\n ///\n-/// #[deriving(Copy)]\n+/// #[derive(Copy)]\n /// struct Foo;\n ///\n /// impl Mul for Foo {\n@@ -250,7 +250,7 @@ mul_impl! { uint u8 u16 u32 u64 int i8 i16 i32 i64 f32 f64 }\n ///\n /// use std::ops::Div;\n ///\n-/// #[deriving(Copy)]\n+/// #[derive(Copy)]\n /// struct Foo;\n ///\n /// impl Div for Foo {\n@@ -299,7 +299,7 @@ div_impl! { uint u8 u16 u32 u64 int i8 i16 i32 i64 f32 f64 }\n ///\n /// use std::ops::Rem;\n ///\n-/// #[deriving(Copy)]\n+/// #[derive(Copy)]\n /// struct Foo;\n ///\n /// impl Rem for Foo {\n@@ -482,7 +482,7 @@ not_impl! { bool uint u8 u16 u32 u64 int i8 i16 i32 i64 }\n ///\n /// use std::ops::BitAnd;\n ///\n-/// #[deriving(Copy)]\n+/// #[derive(Copy)]\n /// struct Foo;\n ///\n /// impl BitAnd for Foo {\n@@ -531,7 +531,7 @@ bitand_impl! { bool uint u8 u16 u32 u64 int i8 i16 i32 i64 }\n ///\n /// use std::ops::BitOr;\n ///\n-/// #[deriving(Copy)]\n+/// #[derive(Copy)]\n /// struct Foo;\n ///\n /// impl BitOr for Foo {\n@@ -580,7 +580,7 @@ bitor_impl! { bool uint u8 u16 u32 u64 int i8 i16 i32 i64 }\n ///\n /// use std::ops::BitXor;\n ///\n-/// #[deriving(Copy)]\n+/// #[derive(Copy)]\n /// struct Foo;\n ///\n /// impl BitXor for Foo {\n@@ -629,7 +629,7 @@ bitxor_impl! { bool uint u8 u16 u32 u64 int i8 i16 i32 i64 }\n ///\n /// use std::ops::Shl;\n ///\n-/// #[deriving(Copy)]\n+/// #[derive(Copy)]\n /// struct Foo;\n ///\n /// impl Shl<Foo> for Foo {\n@@ -680,7 +680,7 @@ shl_impl! { uint u8 u16 u32 u64 int i8 i16 i32 i64 }\n ///\n /// use std::ops::Shr;\n ///\n-/// #[deriving(Copy)]\n+/// #[derive(Copy)]\n /// struct Foo;\n ///\n /// impl Shr<Foo> for Foo {\n@@ -739,7 +739,7 @@ pub trait Index<Sized? Index, Sized? Result> for Sized? {\n ///\n /// use std::ops::Index;\n ///\n-/// #[deriving(Copy)]\n+/// #[derive(Copy)]\n /// struct Foo;\n ///\n /// impl Index<Foo> for Foo {\n@@ -786,7 +786,7 @@ pub trait IndexMut<Sized? Index, Sized? Result> for Sized? {\n ///\n /// use std::ops::IndexMut;\n ///\n-/// #[deriving(Copy)]\n+/// #[derive(Copy)]\n /// struct Foo;\n ///\n /// impl IndexMut<Foo> for Foo {\n@@ -822,7 +822,7 @@ pub trait IndexMut<Sized? Index> for Sized? {\n /// ```ignore\n /// use std::ops::Slice;\n ///\n-/// #[deriving(Copy)]\n+/// #[derive(Copy)]\n /// struct Foo;\n ///\n /// impl Slice<Foo, Foo> for Foo {\n@@ -871,7 +871,7 @@ pub trait Slice<Sized? Idx, Sized? Result> for Sized? {\n /// ```ignore\n /// use std::ops::SliceMut;\n ///\n-/// #[deriving(Copy)]\n+/// #[derive(Copy)]\n /// struct Foo;\n ///\n /// impl SliceMut<Foo, Foo> for Foo {\n@@ -911,12 +911,12 @@ pub trait SliceMut<Sized? Idx, Sized? Result> for Sized? {\n \n \n /// An unbounded range.\n-#[deriving(Copy)]\n+#[derive(Copy)]\n #[lang=\"full_range\"]\n pub struct FullRange;\n \n /// A (half-open) range which is bounded at both ends.\n-#[deriving(Copy)]\n+#[derive(Copy)]\n #[lang=\"range\"]\n pub struct Range<Idx> {\n     /// The lower bound of the range (inclusive).\n@@ -966,7 +966,7 @@ impl<Idx: Clone + Step> DoubleEndedIterator for Range<Idx> {\n impl<Idx: Clone + Step> ExactSizeIterator for Range<Idx> {}\n \n /// A range which is only bounded below.\n-#[deriving(Copy)]\n+#[derive(Copy)]\n #[lang=\"range_from\"]\n pub struct RangeFrom<Idx> {\n     /// The lower bound of the range (inclusive).\n@@ -986,7 +986,7 @@ impl<Idx: Clone + Step> Iterator for RangeFrom<Idx> {\n }\n \n /// A range which is only bounded above.\n-#[deriving(Copy)]\n+#[derive(Copy)]\n #[lang=\"range_to\"]\n pub struct RangeTo<Idx> {\n     /// The upper bound of the range (exclusive)."}, {"sha": "a9a1857ec97bf3764f91da9751ce60675447600d", "filename": "src/libcore/option.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibcore%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibcore%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Foption.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -163,7 +163,7 @@ use ops::{Deref, FnOnce};\n // which basically means it must be `Option`.\n \n /// The `Option` type.\n-#[deriving(Clone, Copy, PartialEq, PartialOrd, Eq, Ord, Show, Hash)]\n+#[derive(Clone, Copy, PartialEq, PartialOrd, Eq, Ord, Show, Hash)]\n #[stable]\n pub enum Option<T> {\n     /// No value\n@@ -772,7 +772,7 @@ impl<T> Default for Option<T> {\n // The Option Iterators\n /////////////////////////////////////////////////////////////////////////////\n \n-#[deriving(Clone)]\n+#[derive(Clone)]\n struct Item<A> {\n     opt: Option<A>\n }"}, {"sha": "64f13a8f123a8a634f227205cd24cf0d02c3c577", "filename": "src/libcore/prelude.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibcore%2Fprelude.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibcore%2Fprelude.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fprelude.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -45,8 +45,8 @@ pub use iter::{Extend, IteratorExt};\n pub use iter::{Iterator, DoubleEndedIterator};\n pub use iter::{IteratorCloneExt, CloneIteratorExt};\n pub use iter::{IteratorOrdExt, ExactSizeIterator};\n-pub use option::Option::{mod, Some, None};\n+pub use option::Option::{self, Some, None};\n pub use ptr::{PtrExt, MutPtrExt};\n-pub use result::Result::{mod, Ok, Err};\n+pub use result::Result::{self, Ok, Err};\n pub use slice::{AsSlice, SliceExt};\n pub use str::{Str, StrExt};"}, {"sha": "9aed78d0737cd8da6d5a6f084d840bac5881a267", "filename": "src/libcore/ptr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibcore%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibcore%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -91,11 +91,11 @@\n use mem;\n use clone::Clone;\n use intrinsics;\n-use option::Option::{mod, Some, None};\n+use option::Option::{self, Some, None};\n use kinds::{Send, Sized, Sync};\n \n use cmp::{PartialEq, Eq, Ord, PartialOrd, Equiv};\n-use cmp::Ordering::{mod, Less, Equal, Greater};\n+use cmp::Ordering::{self, Less, Equal, Greater};\n \n // FIXME #19649: instrinsic docs don't render, so these have no docs :(\n "}, {"sha": "3bef1d153637796e710920c34e84083eac39c9e6", "filename": "src/libcore/raw.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibcore%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibcore%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fraw.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -33,7 +33,7 @@ impl<T> Copy for Slice<T> {}\n \n /// The representation of a Rust closure\n #[repr(C)]\n-#[deriving(Copy)]\n+#[derive(Copy)]\n pub struct Closure {\n     pub code: *mut (),\n     pub env: *mut (),\n@@ -44,7 +44,7 @@ pub struct Closure {\n /// This struct does not have a `Repr` implementation\n /// because there is no way to refer to all trait objects generically.\n #[repr(C)]\n-#[deriving(Copy)]\n+#[derive(Copy)]\n pub struct TraitObject {\n     pub data: *mut (),\n     pub vtable: *mut (),"}, {"sha": "7135faaa76516aa257ab14ea37f4cf44eeb179a9", "filename": "src/libcore/result.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibcore%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibcore%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fresult.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -30,7 +30,7 @@\n //! defined and used like so:\n //!\n //! ```\n-//! #[deriving(Show)]\n+//! #[derive(Show)]\n //! enum Version { Version1, Version2 }\n //!\n //! fn parse_version(header: &[u8]) -> Result<Version, &'static str> {\n@@ -236,14 +236,14 @@ use clone::Clone;\n use fmt::Show;\n use iter::{Iterator, IteratorExt, DoubleEndedIterator, FromIterator, ExactSizeIterator};\n use ops::{FnMut, FnOnce};\n-use option::Option::{mod, None, Some};\n+use option::Option::{self, None, Some};\n use slice::AsSlice;\n use slice;\n \n /// `Result` is a type that represents either success (`Ok`) or failure (`Err`).\n ///\n /// See the [`std::result`](index.html) module documentation for details.\n-#[deriving(Clone, Copy, PartialEq, PartialOrd, Eq, Ord, Show, Hash)]\n+#[derive(Clone, Copy, PartialEq, PartialOrd, Eq, Ord, Show, Hash)]\n #[must_use]\n #[stable]\n pub enum Result<T, E> {"}, {"sha": "66b29bab98c24326c96967b6b5c1c5cf448e3d4c", "filename": "src/libcore/simd.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibcore%2Fsimd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibcore%2Fsimd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fsimd.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -39,7 +39,7 @@\n \n #[experimental]\n #[simd]\n-#[deriving(Copy, Show)]\n+#[derive(Copy, Show)]\n #[repr(C)]\n pub struct i8x16(pub i8, pub i8, pub i8, pub i8,\n                  pub i8, pub i8, pub i8, pub i8,\n@@ -48,26 +48,26 @@ pub struct i8x16(pub i8, pub i8, pub i8, pub i8,\n \n #[experimental]\n #[simd]\n-#[deriving(Copy, Show)]\n+#[derive(Copy, Show)]\n #[repr(C)]\n pub struct i16x8(pub i16, pub i16, pub i16, pub i16,\n                  pub i16, pub i16, pub i16, pub i16);\n \n #[experimental]\n #[simd]\n-#[deriving(Copy, Show)]\n+#[derive(Copy, Show)]\n #[repr(C)]\n pub struct i32x4(pub i32, pub i32, pub i32, pub i32);\n \n #[experimental]\n #[simd]\n-#[deriving(Copy, Show)]\n+#[derive(Copy, Show)]\n #[repr(C)]\n pub struct i64x2(pub i64, pub i64);\n \n #[experimental]\n #[simd]\n-#[deriving(Copy, Show)]\n+#[derive(Copy, Show)]\n #[repr(C)]\n pub struct u8x16(pub u8, pub u8, pub u8, pub u8,\n                  pub u8, pub u8, pub u8, pub u8,\n@@ -76,31 +76,31 @@ pub struct u8x16(pub u8, pub u8, pub u8, pub u8,\n \n #[experimental]\n #[simd]\n-#[deriving(Copy, Show)]\n+#[derive(Copy, Show)]\n #[repr(C)]\n pub struct u16x8(pub u16, pub u16, pub u16, pub u16,\n                  pub u16, pub u16, pub u16, pub u16);\n \n #[experimental]\n #[simd]\n-#[deriving(Copy, Show)]\n+#[derive(Copy, Show)]\n #[repr(C)]\n pub struct u32x4(pub u32, pub u32, pub u32, pub u32);\n \n #[experimental]\n #[simd]\n-#[deriving(Copy, Show)]\n+#[derive(Copy, Show)]\n #[repr(C)]\n pub struct u64x2(pub u64, pub u64);\n \n #[experimental]\n #[simd]\n-#[deriving(Copy, Show)]\n+#[derive(Copy, Show)]\n #[repr(C)]\n pub struct f32x4(pub f32, pub f32, pub f32, pub f32);\n \n #[experimental]\n #[simd]\n-#[deriving(Copy, Show)]\n+#[derive(Copy, Show)]\n #[repr(C)]\n pub struct f64x2(pub f64, pub f64);"}, {"sha": "fd4bc4a141357d477e0389787be8ec8b6af30d24", "filename": "src/libcore/slice.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibcore%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibcore%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -43,7 +43,7 @@ use default::Default;\n use iter::*;\n use kinds::Copy;\n use num::Int;\n-use ops::{FnMut, mod};\n+use ops::{FnMut, self};\n use option::Option;\n use option::Option::{None, Some};\n use result::Result;\n@@ -907,7 +907,7 @@ pub struct Split<'a, T:'a, P> where P: FnMut(&T) -> bool {\n     finished: bool\n }\n \n-// FIXME(#19839) Remove in favor of `#[deriving(Clone)]`\n+// FIXME(#19839) Remove in favor of `#[derive(Clone)]`\n #[stable]\n impl<'a, T, P> Clone for Split<'a, T, P> where P: Clone + FnMut(&T) -> bool {\n     fn clone(&self) -> Split<'a, T, P> {\n@@ -1133,7 +1133,7 @@ forward_iterator! { SplitNMut: T, &'a mut [T] }\n forward_iterator! { RSplitNMut: T, &'a mut [T] }\n \n /// An iterator over overlapping subslices of length `size`.\n-#[deriving(Clone)]\n+#[derive(Clone)]\n #[experimental = \"needs review\"]\n pub struct Windows<'a, T:'a> {\n     v: &'a [T],\n@@ -1170,7 +1170,7 @@ impl<'a, T> Iterator for Windows<'a, T> {\n ///\n /// When the slice len is not evenly divided by the chunk size, the last slice\n /// of the iteration will be the remainder.\n-#[deriving(Clone)]\n+#[derive(Clone)]\n #[experimental = \"needs review\"]\n pub struct Chunks<'a, T:'a> {\n     v: &'a [T],"}, {"sha": "07662c567e389443f49a864504e0edea35fcffe4", "filename": "src/libcore/str/mod.rs", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibcore%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibcore%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fmod.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -18,7 +18,7 @@\n \n use self::Searcher::{Naive, TwoWay, TwoWayLong};\n \n-use cmp::{mod, Eq};\n+use cmp::{self, Eq};\n use default::Default;\n use iter::range;\n use iter::ExactSizeIterator;\n@@ -27,11 +27,11 @@ use kinds::Sized;\n use mem;\n use num::Int;\n use ops::{Fn, FnMut};\n-use option::Option::{mod, None, Some};\n+use option::Option::{self, None, Some};\n use ptr::PtrExt;\n use raw::{Repr, Slice};\n-use result::Result::{mod, Ok, Err};\n-use slice::{mod, SliceExt};\n+use result::Result::{self, Ok, Err};\n+use slice::{self, SliceExt};\n use uint;\n \n macro_rules! delegate_iter {\n@@ -147,7 +147,7 @@ Section: Creating a string\n */\n \n /// Errors which can occur when attempting to interpret a byte slice as a `str`.\n-#[deriving(Copy, Eq, PartialEq, Clone)]\n+#[derive(Copy, Eq, PartialEq, Clone)]\n pub enum Utf8Error {\n     /// An invalid byte was detected at the byte offset given.\n     ///\n@@ -252,7 +252,7 @@ Section: Iterators\n /// Iterator for the char (representing *Unicode Scalar Values*) of a string\n ///\n /// Created with the method `.chars()`.\n-#[deriving(Clone, Copy)]\n+#[derive(Clone, Copy)]\n pub struct Chars<'a> {\n     iter: slice::Iter<'a, u8>\n }\n@@ -361,7 +361,7 @@ impl<'a> DoubleEndedIterator for Chars<'a> {\n \n /// External iterator for a string's characters and their byte offsets.\n /// Use with the `std::iter` module.\n-#[deriving(Clone)]\n+#[derive(Clone)]\n pub struct CharIndices<'a> {\n     front_offset: uint,\n     iter: Chars<'a>,\n@@ -409,13 +409,13 @@ impl<'a> DoubleEndedIterator for CharIndices<'a> {\n ///\n /// Created with `StrExt::bytes`\n #[stable]\n-#[deriving(Clone)]\n+#[derive(Clone)]\n pub struct Bytes<'a>(Map<&'a u8, u8, slice::Iter<'a, u8>, BytesDeref>);\n delegate_iter!{exact u8 in Bytes<'a>}\n \n /// A temporary fn new type that ensures that the `Bytes` iterator\n /// is cloneable.\n-#[deriving(Copy, Clone)]\n+#[derive(Copy, Clone)]\n struct BytesDeref;\n \n impl<'a> Fn(&'a u8) -> u8 for BytesDeref {\n@@ -426,7 +426,7 @@ impl<'a> Fn(&'a u8) -> u8 for BytesDeref {\n }\n \n /// An iterator over the substrings of a string, separated by `sep`.\n-#[deriving(Clone)]\n+#[derive(Clone)]\n #[deprecated = \"Type is now named `Split` or `SplitTerminator`\"]\n pub struct CharSplits<'a, Sep> {\n     /// The slice remaining to be iterated\n@@ -440,7 +440,7 @@ pub struct CharSplits<'a, Sep> {\n \n /// An iterator over the substrings of a string, separated by `sep`,\n /// splitting at most `count` times.\n-#[deriving(Clone)]\n+#[derive(Clone)]\n #[deprecated = \"Type is now named `SplitN` or `RSplitN`\"]\n pub struct CharSplitsN<'a, Sep> {\n     iter: CharSplits<'a, Sep>,\n@@ -564,7 +564,7 @@ impl<'a, Sep: CharEq> Iterator for CharSplitsN<'a, Sep> {\n \n /// The internal state of an iterator that searches for matches of a substring\n /// within a larger string using naive search\n-#[deriving(Clone)]\n+#[derive(Clone)]\n struct NaiveSearcher {\n     position: uint\n }\n@@ -590,7 +590,7 @@ impl NaiveSearcher {\n \n /// The internal state of an iterator that searches for matches of a substring\n /// within a larger string using two-way search\n-#[deriving(Clone)]\n+#[derive(Clone)]\n struct TwoWaySearcher {\n     // constants\n     crit_pos: uint,\n@@ -827,7 +827,7 @@ impl TwoWaySearcher {\n \n /// The internal state of an iterator that searches for matches of a substring\n /// within a larger string using a dynamically chosen search algorithm\n-#[deriving(Clone)]\n+#[derive(Clone)]\n enum Searcher {\n     Naive(NaiveSearcher),\n     TwoWay(TwoWaySearcher),\n@@ -855,7 +855,7 @@ impl Searcher {\n \n /// An iterator over the start and end indices of the matches of a\n /// substring within a larger string\n-#[deriving(Clone)]\n+#[derive(Clone)]\n pub struct MatchIndices<'a> {\n     // constants\n     haystack: &'a str,\n@@ -865,7 +865,7 @@ pub struct MatchIndices<'a> {\n \n /// An iterator over the substrings of a string separated by a given\n /// search string\n-#[deriving(Clone)]\n+#[derive(Clone)]\n #[unstable = \"Type might get removed\"]\n pub struct SplitStr<'a> {\n     it: MatchIndices<'a>,\n@@ -1073,7 +1073,7 @@ pub fn utf8_char_width(b: u8) -> uint {\n /// Struct that contains a `char` and the index of the first byte of\n /// the next `char` in a string.  This can be used as a data structure\n /// for iterating over the UTF-8 bytes of a string.\n-#[deriving(Copy)]\n+#[derive(Copy)]\n #[unstable = \"naming is uncertain with container conventions\"]\n pub struct CharRange {\n     /// Current `char`\n@@ -1249,25 +1249,25 @@ impl<'a, Sized? S> Str for &'a S where S: Str {\n }\n \n /// Return type of `StrExt::split`\n-#[deriving(Clone)]\n+#[derive(Clone)]\n #[stable]\n pub struct Split<'a, P>(CharSplits<'a, P>);\n delegate_iter!{pattern &'a str in Split<'a, P>}\n \n /// Return type of `StrExt::split_terminator`\n-#[deriving(Clone)]\n+#[derive(Clone)]\n #[unstable = \"might get removed in favour of a constructor method on Split\"]\n pub struct SplitTerminator<'a, P>(CharSplits<'a, P>);\n delegate_iter!{pattern &'a str in SplitTerminator<'a, P>}\n \n /// Return type of `StrExt::splitn`\n-#[deriving(Clone)]\n+#[derive(Clone)]\n #[stable]\n pub struct SplitN<'a, P>(CharSplitsN<'a, P>);\n delegate_iter!{pattern forward &'a str in SplitN<'a, P>}\n \n /// Return type of `StrExt::rsplitn`\n-#[deriving(Clone)]\n+#[derive(Clone)]\n #[stable]\n pub struct RSplitN<'a, P>(CharSplitsN<'a, P>);\n delegate_iter!{pattern forward &'a str in RSplitN<'a, P>}"}, {"sha": "9b0471bfad9365b4d506e7d916679f72329df2a6", "filename": "src/libcoretest/any.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibcoretest%2Fany.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibcoretest%2Fany.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Fany.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -11,7 +11,7 @@ use core::any::*;\n use test::Bencher;\n use test;\n \n-#[deriving(PartialEq, Show)]\n+#[derive(PartialEq, Show)]\n struct Test;\n \n static TEST: &'static str = \"Test\";"}, {"sha": "a4d89bf301ec61127e531e7d362cd07163d76a8f", "filename": "src/libfmt_macros/lib.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibfmt_macros%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibfmt_macros%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibfmt_macros%2Flib.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -37,7 +37,7 @@ use std::string;\n \n /// A piece is a portion of the format string which represents the next part\n /// to emit. These are emitted as a stream by the `Parser` class.\n-#[deriving(Copy, PartialEq)]\n+#[derive(Copy, PartialEq)]\n pub enum Piece<'a> {\n     /// A literal string which should directly be emitted\n     String(&'a str),\n@@ -47,7 +47,7 @@ pub enum Piece<'a> {\n }\n \n /// Representation of an argument specification.\n-#[deriving(Copy, PartialEq)]\n+#[derive(Copy, PartialEq)]\n pub struct Argument<'a> {\n     /// Where to find this argument\n     pub position: Position<'a>,\n@@ -56,7 +56,7 @@ pub struct Argument<'a> {\n }\n \n /// Specification for the formatting of an argument in the format string.\n-#[deriving(Copy, PartialEq)]\n+#[derive(Copy, PartialEq)]\n pub struct FormatSpec<'a> {\n     /// Optionally specified character to fill alignment with\n     pub fill: Option<char>,\n@@ -75,7 +75,7 @@ pub struct FormatSpec<'a> {\n }\n \n /// Enum describing where an argument for a format can be located.\n-#[deriving(Copy, PartialEq)]\n+#[derive(Copy, PartialEq)]\n pub enum Position<'a> {\n     /// The argument will be in the next position. This is the default.\n     ArgumentNext,\n@@ -86,7 +86,7 @@ pub enum Position<'a> {\n }\n \n /// Enum of alignments which are supported.\n-#[deriving(Copy, PartialEq)]\n+#[derive(Copy, PartialEq)]\n pub enum Alignment {\n     /// The value will be aligned to the left.\n     AlignLeft,\n@@ -100,7 +100,7 @@ pub enum Alignment {\n \n /// Various flags which can be applied to format strings. The meaning of these\n /// flags is defined by the formatters themselves.\n-#[deriving(Copy, PartialEq)]\n+#[derive(Copy, PartialEq)]\n pub enum Flag {\n     /// A `+` will be used to denote positive numbers.\n     FlagSignPlus,\n@@ -116,7 +116,7 @@ pub enum Flag {\n \n /// A count is used for the precision and width parameters of an integer, and\n /// can reference either an argument or a literal integer.\n-#[deriving(Copy, PartialEq)]\n+#[derive(Copy, PartialEq)]\n pub enum Count<'a> {\n     /// The count is specified explicitly.\n     CountIs(uint),"}, {"sha": "2063654077f15c0998e106a6b49fee30899408ed", "filename": "src/libgetopts/lib.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibgetopts%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibgetopts%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgetopts%2Flib.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -105,7 +105,7 @@ use std::iter::repeat;\n use std::result;\n \n /// Name of an option. Either a string or a single char.\n-#[deriving(Clone, PartialEq, Eq)]\n+#[derive(Clone, PartialEq, Eq)]\n pub enum Name {\n     /// A string representing the long name of an option.\n     /// For example: \"help\"\n@@ -116,7 +116,7 @@ pub enum Name {\n }\n \n /// Describes whether an option has an argument.\n-#[deriving(Clone, Copy, PartialEq, Eq)]\n+#[derive(Clone, Copy, PartialEq, Eq)]\n pub enum HasArg {\n     /// The option requires an argument.\n     Yes,\n@@ -127,7 +127,7 @@ pub enum HasArg {\n }\n \n /// Describes how often an option may occur.\n-#[deriving(Clone, Copy, PartialEq, Eq)]\n+#[derive(Clone, Copy, PartialEq, Eq)]\n pub enum Occur {\n     /// The option occurs once.\n     Req,\n@@ -138,7 +138,7 @@ pub enum Occur {\n }\n \n /// A description of a possible option.\n-#[deriving(Clone, PartialEq, Eq)]\n+#[derive(Clone, PartialEq, Eq)]\n pub struct Opt {\n     /// Name of the option\n     pub name: Name,\n@@ -152,7 +152,7 @@ pub struct Opt {\n \n /// One group of options, e.g., both `-h` and `--help`, along with\n /// their shared description and properties.\n-#[deriving(Clone, PartialEq, Eq)]\n+#[derive(Clone, PartialEq, Eq)]\n pub struct OptGroup {\n     /// Short name of the option, e.g. `h` for a `-h` option\n     pub short_name: String,\n@@ -169,15 +169,15 @@ pub struct OptGroup {\n }\n \n /// Describes whether an option is given at all or has a value.\n-#[deriving(Clone, PartialEq, Eq)]\n+#[derive(Clone, PartialEq, Eq)]\n enum Optval {\n     Val(String),\n     Given,\n }\n \n /// The result of checking command line arguments. Contains a vector\n /// of matches and a vector of free strings.\n-#[deriving(Clone, PartialEq, Eq)]\n+#[derive(Clone, PartialEq, Eq)]\n pub struct Matches {\n     /// Options that matched\n     opts: Vec<Opt>,\n@@ -190,7 +190,7 @@ pub struct Matches {\n /// The type returned when the command line does not conform to the\n /// expected format. Use the `Show` implementation to output detailed\n /// information.\n-#[deriving(Clone, PartialEq, Eq)]\n+#[derive(Clone, PartialEq, Eq)]\n pub enum Fail {\n     /// The option requires an argument but none was passed.\n     ArgumentMissing(String),\n@@ -205,7 +205,7 @@ pub enum Fail {\n }\n \n /// The type of failure that occurred.\n-#[deriving(Copy, PartialEq, Eq)]\n+#[derive(Copy, PartialEq, Eq)]\n #[allow(missing_docs)]\n pub enum FailType {\n     ArgumentMissing_,\n@@ -827,18 +827,18 @@ pub fn short_usage(program_name: &str, opts: &[OptGroup]) -> String {\n     line\n }\n \n-#[deriving(Copy)]\n+#[derive(Copy)]\n enum SplitWithinState {\n     A,  // leading whitespace, initial state\n     B,  // words\n     C,  // internal and trailing whitespace\n }\n-#[deriving(Copy)]\n+#[derive(Copy)]\n enum Whitespace {\n     Ws, // current char is whitespace\n     Cr  // current char is not whitespace\n }\n-#[deriving(Copy)]\n+#[derive(Copy)]\n enum LengthLimit {\n     UnderLim, // current char makes current substring still fit in limit\n     OverLim   // current char makes current substring no longer fit in limit"}, {"sha": "e5a8db54eab05c3f699cab4fd51ef0c7053ba597", "filename": "src/libgraphviz/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibgraphviz%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibgraphviz%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgraphviz%2Flib.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -517,7 +517,7 @@ pub trait GraphWalk<'a, N, E> {\n     fn target(&'a self, edge: &E) -> N;\n }\n \n-#[deriving(Copy, PartialEq, Eq, Show)]\n+#[derive(Copy, PartialEq, Eq, Show)]\n pub enum RenderOption {\n     NoEdgeLabels,\n     NoNodeLabels,"}, {"sha": "e3f02146a75f437bbd8ef411106ca509c52f07be", "filename": "src/liblibc/lib.rs", "status": "modified", "additions": 115, "deletions": 115, "changes": 230, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Fliblibc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Fliblibc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliblibc%2Flib.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -386,7 +386,7 @@ pub mod types {\n                 pub type pthread_t = c_ulong;\n \n                 #[repr(C)]\n-                #[deriving(Copy)] pub struct glob_t {\n+                #[derive(Copy)] pub struct glob_t {\n                     pub gl_pathc: size_t,\n                     pub gl_pathv: *mut *mut c_char,\n                     pub gl_offs:  size_t,\n@@ -399,18 +399,18 @@ pub mod types {\n                 }\n \n                 #[repr(C)]\n-                #[deriving(Copy)] pub struct timeval {\n+                #[derive(Copy)] pub struct timeval {\n                     pub tv_sec: time_t,\n                     pub tv_usec: suseconds_t,\n                 }\n \n                 #[repr(C)]\n-                #[deriving(Copy)] pub struct timespec {\n+                #[derive(Copy)] pub struct timespec {\n                     pub tv_sec: time_t,\n                     pub tv_nsec: c_long,\n                 }\n \n-                #[deriving(Copy)] pub enum timezone {}\n+                #[derive(Copy)] pub enum timezone {}\n \n                 pub type sighandler_t = size_t;\n             }\n@@ -423,51 +423,51 @@ pub mod types {\n                 pub type in_port_t = u16;\n                 pub type in_addr_t = u32;\n                 #[repr(C)]\n-                #[deriving(Copy)] pub struct sockaddr {\n+                #[derive(Copy)] pub struct sockaddr {\n                     pub sa_family: sa_family_t,\n                     pub sa_data: [u8; 14],\n                 }\n                 #[repr(C)]\n-                #[deriving(Copy)] pub struct sockaddr_storage {\n+                #[derive(Copy)] pub struct sockaddr_storage {\n                     pub ss_family: sa_family_t,\n                     pub __ss_align: i64,\n                     pub __ss_pad2: [u8; 112],\n                 }\n                 #[repr(C)]\n-                #[deriving(Copy)] pub struct sockaddr_in {\n+                #[derive(Copy)] pub struct sockaddr_in {\n                     pub sin_family: sa_family_t,\n                     pub sin_port: in_port_t,\n                     pub sin_addr: in_addr,\n                     pub sin_zero: [u8; 8],\n                 }\n                 #[repr(C)]\n-                #[deriving(Copy)] pub struct in_addr {\n+                #[derive(Copy)] pub struct in_addr {\n                     pub s_addr: in_addr_t,\n                 }\n                 #[repr(C)]\n-                #[deriving(Copy)] pub struct sockaddr_in6 {\n+                #[derive(Copy)] pub struct sockaddr_in6 {\n                     pub sin6_family: sa_family_t,\n                     pub sin6_port: in_port_t,\n                     pub sin6_flowinfo: u32,\n                     pub sin6_addr: in6_addr,\n                     pub sin6_scope_id: u32,\n                 }\n                 #[repr(C)]\n-                #[deriving(Copy)] pub struct in6_addr {\n+                #[derive(Copy)] pub struct in6_addr {\n                     pub s6_addr: [u16; 8]\n                 }\n                 #[repr(C)]\n-                #[deriving(Copy)] pub struct ip_mreq {\n+                #[derive(Copy)] pub struct ip_mreq {\n                     pub imr_multiaddr: in_addr,\n                     pub imr_interface: in_addr,\n                 }\n                 #[repr(C)]\n-                #[deriving(Copy)] pub struct ip6_mreq {\n+                #[derive(Copy)] pub struct ip6_mreq {\n                     pub ipv6mr_multiaddr: in6_addr,\n                     pub ipv6mr_interface: c_uint,\n                 }\n                 #[repr(C)]\n-                #[deriving(Copy)] pub struct addrinfo {\n+                #[derive(Copy)] pub struct addrinfo {\n                     pub ai_flags: c_int,\n                     pub ai_family: c_int,\n                     pub ai_socktype: c_int,\n@@ -489,13 +489,13 @@ pub mod types {\n                     pub ai_next: *mut addrinfo,\n                 }\n                 #[repr(C)]\n-                #[deriving(Copy)] pub struct sockaddr_un {\n+                #[derive(Copy)] pub struct sockaddr_un {\n                     pub sun_family: sa_family_t,\n                     pub sun_path: [c_char; 108]\n                 }\n \n                 #[repr(C)]\n-                #[deriving(Copy)] pub struct ifaddrs {\n+                #[derive(Copy)] pub struct ifaddrs {\n                     pub ifa_next: *mut ifaddrs,\n                     pub ifa_name: *mut c_char,\n                     pub ifa_flags: c_uint,\n@@ -578,7 +578,7 @@ pub mod types {\n                 pub type blkcnt_t = i32;\n \n                 #[repr(C)]\n-                #[deriving(Copy)] pub struct stat {\n+                #[derive(Copy)] pub struct stat {\n                     pub st_dev: dev_t,\n                     pub __pad1: c_short,\n                     pub st_ino: ino_t,\n@@ -602,13 +602,13 @@ pub mod types {\n                 }\n \n                 #[repr(C)]\n-                #[deriving(Copy)] pub struct utimbuf {\n+                #[derive(Copy)] pub struct utimbuf {\n                     pub actime: time_t,\n                     pub modtime: time_t,\n                 }\n \n                 #[repr(C)]\n-                #[deriving(Copy)] pub struct pthread_attr_t {\n+                #[derive(Copy)] pub struct pthread_attr_t {\n                     pub __size: [u32; 9]\n                 }\n             }\n@@ -623,7 +623,7 @@ pub mod types {\n                 pub type blkcnt_t = u32;\n \n                 #[repr(C)]\n-                #[deriving(Copy)] pub struct stat {\n+                #[derive(Copy)] pub struct stat {\n                     pub st_dev: c_ulonglong,\n                     pub __pad0: [c_uchar; 4],\n                     pub __st_ino: ino_t,\n@@ -646,13 +646,13 @@ pub mod types {\n                 }\n \n                 #[repr(C)]\n-                #[deriving(Copy)] pub struct utimbuf {\n+                #[derive(Copy)] pub struct utimbuf {\n                     pub actime: time_t,\n                     pub modtime: time_t,\n                 }\n \n                 #[repr(C)]\n-                #[deriving(Copy)] pub struct pthread_attr_t {\n+                #[derive(Copy)] pub struct pthread_attr_t {\n                     pub __size: [u32; 9]\n                 }\n             }\n@@ -668,7 +668,7 @@ pub mod types {\n                 pub type blkcnt_t = i32;\n \n                 #[repr(C)]\n-                #[deriving(Copy)] pub struct stat {\n+                #[derive(Copy)] pub struct stat {\n                     pub st_dev: c_ulong,\n                     pub st_pad1: [c_long; 3],\n                     pub st_ino: ino_t,\n@@ -692,13 +692,13 @@ pub mod types {\n                 }\n \n                 #[repr(C)]\n-                #[deriving(Copy)] pub struct utimbuf {\n+                #[derive(Copy)] pub struct utimbuf {\n                     pub actime: time_t,\n                     pub modtime: time_t,\n                 }\n \n                 #[repr(C)]\n-                #[deriving(Copy)] pub struct pthread_attr_t {\n+                #[derive(Copy)] pub struct pthread_attr_t {\n                     pub __size: [u32; 9]\n                 }\n             }\n@@ -707,7 +707,7 @@ pub mod types {\n             pub mod extra {\n                 use types::os::arch::c95::{c_ushort, c_int, c_uchar};\n                 #[repr(C)]\n-                #[deriving(Copy)] pub struct sockaddr_ll {\n+                #[derive(Copy)] pub struct sockaddr_ll {\n                     pub sll_family: c_ushort,\n                     pub sll_protocol: c_ushort,\n                     pub sll_ifindex: c_int,\n@@ -779,7 +779,7 @@ pub mod types {\n                 pub type blkcnt_t = i64;\n \n                 #[repr(C)]\n-                #[deriving(Copy)] pub struct stat {\n+                #[derive(Copy)] pub struct stat {\n                     pub st_dev: dev_t,\n                     pub st_ino: ino_t,\n                     pub st_nlink: nlink_t,\n@@ -801,13 +801,13 @@ pub mod types {\n                 }\n \n                 #[repr(C)]\n-                #[deriving(Copy)] pub struct utimbuf {\n+                #[derive(Copy)] pub struct utimbuf {\n                     pub actime: time_t,\n                     pub modtime: time_t,\n                 }\n \n                 #[repr(C)]\n-                #[deriving(Copy)] pub struct pthread_attr_t {\n+                #[derive(Copy)] pub struct pthread_attr_t {\n                     pub __size: [u64; 7]\n                 }\n             }\n@@ -823,7 +823,7 @@ pub mod types {\n                 pub type blkcnt_t = i64;\n \n                 #[repr(C)]\n-                #[deriving(Copy)] pub struct stat {\n+                #[derive(Copy)] pub struct stat {\n                     pub st_dev: dev_t,\n                     pub st_ino: ino_t,\n                     pub st_mode: mode_t,\n@@ -846,13 +846,13 @@ pub mod types {\n                 }\n \n                 #[repr(C)]\n-                #[deriving(Copy)] pub struct utimbuf {\n+                #[derive(Copy)] pub struct utimbuf {\n                     pub actime: time_t,\n                     pub modtime: time_t,\n                 }\n \n                 #[repr(C)]\n-                #[deriving(Copy)] pub struct pthread_attr_t {\n+                #[derive(Copy)] pub struct pthread_attr_t {\n                     pub __size: [u64; 8]\n                 }\n             }\n@@ -862,7 +862,7 @@ pub mod types {\n             }\n             pub mod extra {\n                 use types::os::arch::c95::{c_ushort, c_int, c_uchar};\n-                #[deriving(Copy)] pub struct sockaddr_ll {\n+                #[derive(Copy)] pub struct sockaddr_ll {\n                     pub sll_family: c_ushort,\n                     pub sll_protocol: c_ushort,\n                     pub sll_ifindex: c_int,\n@@ -888,7 +888,7 @@ pub mod types {\n                 pub type pthread_t = uintptr_t;\n \n                 #[repr(C)]\n-                #[deriving(Copy)] pub struct glob_t {\n+                #[derive(Copy)] pub struct glob_t {\n                     pub gl_pathc:  size_t,\n                     pub __unused1: size_t,\n                     pub gl_offs:   size_t,\n@@ -905,18 +905,18 @@ pub mod types {\n                 }\n \n                 #[repr(C)]\n-                #[deriving(Copy)] pub struct timeval {\n+                #[derive(Copy)] pub struct timeval {\n                     pub tv_sec: time_t,\n                     pub tv_usec: suseconds_t,\n                 }\n \n                 #[repr(C)]\n-                #[deriving(Copy)] pub struct timespec {\n+                #[derive(Copy)] pub struct timespec {\n                     pub tv_sec: time_t,\n                     pub tv_nsec: c_long,\n                 }\n \n-                #[deriving(Copy)] pub enum timezone {}\n+                #[derive(Copy)] pub enum timezone {}\n \n                 pub type sighandler_t = size_t;\n             }\n@@ -929,33 +929,33 @@ pub mod types {\n                 pub type in_port_t = u16;\n                 pub type in_addr_t = u32;\n                 #[repr(C)]\n-                #[deriving(Copy)] pub struct sockaddr {\n+                #[derive(Copy)] pub struct sockaddr {\n                     pub sa_len: u8,\n                     pub sa_family: sa_family_t,\n                     pub sa_data: [u8; 14],\n                 }\n                 #[repr(C)]\n-                #[deriving(Copy)] pub struct sockaddr_storage {\n+                #[derive(Copy)] pub struct sockaddr_storage {\n                     pub ss_len: u8,\n                     pub ss_family: sa_family_t,\n                     pub __ss_pad1: [u8; 6],\n                     pub __ss_align: i64,\n                     pub __ss_pad2: [u8; 112],\n                 }\n                 #[repr(C)]\n-                #[deriving(Copy)] pub struct sockaddr_in {\n+                #[derive(Copy)] pub struct sockaddr_in {\n                     pub sin_len: u8,\n                     pub sin_family: sa_family_t,\n                     pub sin_port: in_port_t,\n                     pub sin_addr: in_addr,\n                     pub sin_zero: [u8; 8],\n                 }\n                 #[repr(C)]\n-                #[deriving(Copy)] pub struct in_addr {\n+                #[derive(Copy)] pub struct in_addr {\n                     pub s_addr: in_addr_t,\n                 }\n                 #[repr(C)]\n-                #[deriving(Copy)] pub struct sockaddr_in6 {\n+                #[derive(Copy)] pub struct sockaddr_in6 {\n                     pub sin6_len: u8,\n                     pub sin6_family: sa_family_t,\n                     pub sin6_port: in_port_t,\n@@ -964,21 +964,21 @@ pub mod types {\n                     pub sin6_scope_id: u32,\n                 }\n                 #[repr(C)]\n-                #[deriving(Copy)] pub struct in6_addr {\n+                #[derive(Copy)] pub struct in6_addr {\n                     pub s6_addr: [u16; 8]\n                 }\n                 #[repr(C)]\n-                #[deriving(Copy)] pub struct ip_mreq {\n+                #[derive(Copy)] pub struct ip_mreq {\n                     pub imr_multiaddr: in_addr,\n                     pub imr_interface: in_addr,\n                 }\n                 #[repr(C)]\n-                #[deriving(Copy)] pub struct ip6_mreq {\n+                #[derive(Copy)] pub struct ip6_mreq {\n                     pub ipv6mr_multiaddr: in6_addr,\n                     pub ipv6mr_interface: c_uint,\n                 }\n                 #[repr(C)]\n-                #[deriving(Copy)] pub struct addrinfo {\n+                #[derive(Copy)] pub struct addrinfo {\n                     pub ai_flags: c_int,\n                     pub ai_family: c_int,\n                     pub ai_socktype: c_int,\n@@ -989,13 +989,13 @@ pub mod types {\n                     pub ai_next: *mut addrinfo,\n                 }\n                 #[repr(C)]\n-                #[deriving(Copy)] pub struct sockaddr_un {\n+                #[derive(Copy)] pub struct sockaddr_un {\n                     pub sun_len: u8,\n                     pub sun_family: sa_family_t,\n                     pub sun_path: [c_char; 104]\n                 }\n                 #[repr(C)]\n-                #[deriving(Copy)] pub struct ifaddrs {\n+                #[derive(Copy)] pub struct ifaddrs {\n                     pub ifa_next: *mut ifaddrs,\n                     pub ifa_name: *mut c_char,\n                     pub ifa_flags: c_uint,\n@@ -1062,7 +1062,7 @@ pub mod types {\n                 pub type blkcnt_t = i64;\n                 pub type fflags_t = u32;\n                 #[repr(C)]\n-                #[deriving(Copy)] pub struct stat {\n+                #[derive(Copy)] pub struct stat {\n                     pub st_dev: dev_t,\n                     pub st_ino: ino_t,\n                     pub st_mode: mode_t,\n@@ -1088,7 +1088,7 @@ pub mod types {\n                 }\n \n                 #[repr(C)]\n-                #[deriving(Copy)] pub struct utimbuf {\n+                #[derive(Copy)] pub struct utimbuf {\n                     pub actime: time_t,\n                     pub modtime: time_t,\n                 }\n@@ -1116,7 +1116,7 @@ pub mod types {\n                 pub type pthread_t = uintptr_t;\n \n                 #[repr(C)]\n-                #[deriving(Copy)] pub struct glob_t {\n+                #[derive(Copy)] pub struct glob_t {\n                     pub gl_pathc:  size_t,\n                     pub __unused1: size_t,\n                     pub gl_offs:   size_t,\n@@ -1133,18 +1133,18 @@ pub mod types {\n                 }\n \n                 #[repr(C)]\n-                #[deriving(Copy)] pub struct timeval {\n+                #[derive(Copy)] pub struct timeval {\n                     pub tv_sec: time_t,\n                     pub tv_usec: suseconds_t,\n                 }\n \n                 #[repr(C)]\n-                #[deriving(Copy)] pub struct timespec {\n+                #[derive(Copy)] pub struct timespec {\n                     pub tv_sec: time_t,\n                     pub tv_nsec: c_long,\n                 }\n \n-                #[deriving(Copy)] pub enum timezone {}\n+                #[derive(Copy)] pub enum timezone {}\n \n                 pub type sighandler_t = size_t;\n             }\n@@ -1157,33 +1157,33 @@ pub mod types {\n                 pub type in_port_t = u16;\n                 pub type in_addr_t = u32;\n                 #[repr(C)]\n-                #[deriving(Copy)] pub struct sockaddr {\n+                #[derive(Copy)] pub struct sockaddr {\n                     pub sa_len: u8,\n                     pub sa_family: sa_family_t,\n                     pub sa_data: [u8; 14],\n                 }\n                 #[repr(C)]\n-                #[deriving(Copy)] pub struct sockaddr_storage {\n+                #[derive(Copy)] pub struct sockaddr_storage {\n                     pub ss_len: u8,\n                     pub ss_family: sa_family_t,\n                     pub __ss_pad1: [u8; 6],\n                     pub __ss_align: i64,\n                     pub __ss_pad2: [u8; 112],\n                 }\n                 #[repr(C)]\n-                #[deriving(Copy)] pub struct sockaddr_in {\n+                #[derive(Copy)] pub struct sockaddr_in {\n                     pub sin_len: u8,\n                     pub sin_family: sa_family_t,\n                     pub sin_port: in_port_t,\n                     pub sin_addr: in_addr,\n                     pub sin_zero: [u8; 8],\n                 }\n                 #[repr(C)]\n-                #[deriving(Copy)] pub struct in_addr {\n+                #[derive(Copy)] pub struct in_addr {\n                     pub s_addr: in_addr_t,\n                 }\n                 #[repr(C)]\n-                #[deriving(Copy)] pub struct sockaddr_in6 {\n+                #[derive(Copy)] pub struct sockaddr_in6 {\n                     pub sin6_len: u8,\n                     pub sin6_family: sa_family_t,\n                     pub sin6_port: in_port_t,\n@@ -1192,21 +1192,21 @@ pub mod types {\n                     pub sin6_scope_id: u32,\n                 }\n                 #[repr(C)]\n-                #[deriving(Copy)] pub struct in6_addr {\n+                #[derive(Copy)] pub struct in6_addr {\n                     pub s6_addr: [u16; 8]\n                 }\n                 #[repr(C)]\n-                #[deriving(Copy)] pub struct ip_mreq {\n+                #[derive(Copy)] pub struct ip_mreq {\n                     pub imr_multiaddr: in_addr,\n                     pub imr_interface: in_addr,\n                 }\n                 #[repr(C)]\n-                #[deriving(Copy)] pub struct ip6_mreq {\n+                #[derive(Copy)] pub struct ip6_mreq {\n                     pub ipv6mr_multiaddr: in6_addr,\n                     pub ipv6mr_interface: c_uint,\n                 }\n                 #[repr(C)]\n-                #[deriving(Copy)] pub struct addrinfo {\n+                #[derive(Copy)] pub struct addrinfo {\n                     pub ai_flags: c_int,\n                     pub ai_family: c_int,\n                     pub ai_socktype: c_int,\n@@ -1217,13 +1217,13 @@ pub mod types {\n                     pub ai_next: *mut addrinfo,\n                 }\n                 #[repr(C)]\n-                #[deriving(Copy)] pub struct sockaddr_un {\n+                #[derive(Copy)] pub struct sockaddr_un {\n                     pub sun_len: u8,\n                     pub sun_family: sa_family_t,\n                     pub sun_path: [c_char; 104]\n                 }\n                 #[repr(C)]\n-                #[deriving(Copy)] pub struct ifaddrs {\n+                #[derive(Copy)] pub struct ifaddrs {\n                     pub ifa_next: *mut ifaddrs,\n                     pub ifa_name: *mut c_char,\n                     pub ifa_flags: c_uint,\n@@ -1291,7 +1291,7 @@ pub mod types {\n                 pub type fflags_t = u32;\n \n                 #[repr(C)]\n-                #[deriving(Copy)] pub struct stat {\n+                #[derive(Copy)] pub struct stat {\n                     pub st_ino: ino_t,\n                     pub st_nlink: nlink_t,\n                     pub st_dev: dev_t,\n@@ -1316,7 +1316,7 @@ pub mod types {\n                     pub st_qspare2: int64_t,\n                 }\n                 #[repr(C)]\n-                #[deriving(Copy)] pub struct utimbuf {\n+                #[derive(Copy)] pub struct utimbuf {\n                     pub actime: time_t,\n                     pub modtime: time_t,\n                 }\n@@ -1343,7 +1343,7 @@ pub mod types {\n                 // pub Note: this is the struct called stat64 in Windows. Not stat,\n                 // nor stati64.\n                 #[repr(C)]\n-                #[deriving(Copy)] pub struct stat {\n+                #[derive(Copy)] pub struct stat {\n                     pub st_dev: dev_t,\n                     pub st_ino: ino_t,\n                     pub st_mode: u16,\n@@ -1359,24 +1359,24 @@ pub mod types {\n \n                 // note that this is called utimbuf64 in Windows\n                 #[repr(C)]\n-                #[deriving(Copy)] pub struct utimbuf {\n+                #[derive(Copy)] pub struct utimbuf {\n                     pub actime: time64_t,\n                     pub modtime: time64_t,\n                 }\n \n                 #[repr(C)]\n-                #[deriving(Copy)] pub struct timeval {\n+                #[derive(Copy)] pub struct timeval {\n                     pub tv_sec: c_long,\n                     pub tv_usec: c_long,\n                 }\n \n                 #[repr(C)]\n-                #[deriving(Copy)] pub struct timespec {\n+                #[derive(Copy)] pub struct timespec {\n                     pub tv_sec: time_t,\n                     pub tv_nsec: c_long,\n                 }\n \n-                #[deriving(Copy)] pub enum timezone {}\n+                #[derive(Copy)] pub enum timezone {}\n             }\n \n             pub mod bsd44 {\n@@ -1389,52 +1389,52 @@ pub mod types {\n                 pub type in_port_t = u16;\n                 pub type in_addr_t = u32;\n                 #[repr(C)]\n-                #[deriving(Copy)] pub struct sockaddr {\n+                #[derive(Copy)] pub struct sockaddr {\n                     pub sa_family: sa_family_t,\n                     pub sa_data: [u8; 14],\n                 }\n                 #[repr(C)]\n-                #[deriving(Copy)] pub struct sockaddr_storage {\n+                #[derive(Copy)] pub struct sockaddr_storage {\n                     pub ss_family: sa_family_t,\n                     pub __ss_pad1: [u8; 6],\n                     pub __ss_align: i64,\n                     pub __ss_pad2: [u8; 112],\n                 }\n                 #[repr(C)]\n-                #[deriving(Copy)] pub struct sockaddr_in {\n+                #[derive(Copy)] pub struct sockaddr_in {\n                     pub sin_family: sa_family_t,\n                     pub sin_port: in_port_t,\n                     pub sin_addr: in_addr,\n                     pub sin_zero: [u8; 8],\n                 }\n                 #[repr(C)]\n-                #[deriving(Copy)] pub struct in_addr {\n+                #[derive(Copy)] pub struct in_addr {\n                     pub s_addr: in_addr_t,\n                 }\n                 #[repr(C)]\n-                #[deriving(Copy)] pub struct sockaddr_in6 {\n+                #[derive(Copy)] pub struct sockaddr_in6 {\n                     pub sin6_family: sa_family_t,\n                     pub sin6_port: in_port_t,\n                     pub sin6_flowinfo: u32,\n                     pub sin6_addr: in6_addr,\n                     pub sin6_scope_id: u32,\n                 }\n                 #[repr(C)]\n-                #[deriving(Copy)] pub struct in6_addr {\n+                #[derive(Copy)] pub struct in6_addr {\n                     pub s6_addr: [u16; 8]\n                 }\n                 #[repr(C)]\n-                #[deriving(Copy)] pub struct ip_mreq {\n+                #[derive(Copy)] pub struct ip_mreq {\n                     pub imr_multiaddr: in_addr,\n                     pub imr_interface: in_addr,\n                 }\n                 #[repr(C)]\n-                #[deriving(Copy)] pub struct ip6_mreq {\n+                #[derive(Copy)] pub struct ip6_mreq {\n                     pub ipv6mr_multiaddr: in6_addr,\n                     pub ipv6mr_interface: c_uint,\n                 }\n                 #[repr(C)]\n-                #[deriving(Copy)] pub struct addrinfo {\n+                #[derive(Copy)] pub struct addrinfo {\n                     pub ai_flags: c_int,\n                     pub ai_family: c_int,\n                     pub ai_socktype: c_int,\n@@ -1445,7 +1445,7 @@ pub mod types {\n                     pub ai_next: *mut addrinfo,\n                 }\n                 #[repr(C)]\n-                #[deriving(Copy)] pub struct sockaddr_un {\n+                #[derive(Copy)] pub struct sockaddr_un {\n                     pub sun_family: sa_family_t,\n                     pub sun_path: [c_char; 108]\n                 }\n@@ -1573,7 +1573,7 @@ pub mod types {\n                 pub type LPCH = *mut CHAR;\n \n                 #[repr(C)]\n-                #[deriving(Copy)] pub struct SECURITY_ATTRIBUTES {\n+                #[derive(Copy)] pub struct SECURITY_ATTRIBUTES {\n                     pub nLength: DWORD,\n                     pub lpSecurityDescriptor: LPVOID,\n                     pub bInheritHandle: BOOL,\n@@ -1597,7 +1597,7 @@ pub mod types {\n                 pub type int64 = i64;\n \n                 #[repr(C)]\n-                #[deriving(Copy)] pub struct STARTUPINFO {\n+                #[derive(Copy)] pub struct STARTUPINFO {\n                     pub cb: DWORD,\n                     pub lpReserved: LPWSTR,\n                     pub lpDesktop: LPWSTR,\n@@ -1620,7 +1620,7 @@ pub mod types {\n                 pub type LPSTARTUPINFO = *mut STARTUPINFO;\n \n                 #[repr(C)]\n-                #[deriving(Copy)] pub struct PROCESS_INFORMATION {\n+                #[derive(Copy)] pub struct PROCESS_INFORMATION {\n                     pub hProcess: HANDLE,\n                     pub hThread: HANDLE,\n                     pub dwProcessId: DWORD,\n@@ -1629,7 +1629,7 @@ pub mod types {\n                 pub type LPPROCESS_INFORMATION = *mut PROCESS_INFORMATION;\n \n                 #[repr(C)]\n-                #[deriving(Copy)] pub struct SYSTEM_INFO {\n+                #[derive(Copy)] pub struct SYSTEM_INFO {\n                     pub wProcessorArchitecture: WORD,\n                     pub wReserved: WORD,\n                     pub dwPageSize: DWORD,\n@@ -1645,7 +1645,7 @@ pub mod types {\n                 pub type LPSYSTEM_INFO = *mut SYSTEM_INFO;\n \n                 #[repr(C)]\n-                #[deriving(Copy)] pub struct MEMORY_BASIC_INFORMATION {\n+                #[derive(Copy)] pub struct MEMORY_BASIC_INFORMATION {\n                     pub BaseAddress: LPVOID,\n                     pub AllocationBase: LPVOID,\n                     pub AllocationProtect: DWORD,\n@@ -1657,7 +1657,7 @@ pub mod types {\n                 pub type LPMEMORY_BASIC_INFORMATION = *mut MEMORY_BASIC_INFORMATION;\n \n                 #[repr(C)]\n-                #[deriving(Copy)] pub struct OVERLAPPED {\n+                #[derive(Copy)] pub struct OVERLAPPED {\n                     pub Internal: *mut c_ulong,\n                     pub InternalHigh: *mut c_ulong,\n                     pub Offset: DWORD,\n@@ -1668,31 +1668,31 @@ pub mod types {\n                 pub type LPOVERLAPPED = *mut OVERLAPPED;\n \n                 #[repr(C)]\n-                #[deriving(Copy)] pub struct FILETIME {\n+                #[derive(Copy)] pub struct FILETIME {\n                     pub dwLowDateTime: DWORD,\n                     pub dwHighDateTime: DWORD,\n                 }\n \n                 pub type LPFILETIME = *mut FILETIME;\n \n                 #[repr(C)]\n-                #[deriving(Copy)] pub struct GUID {\n+                #[derive(Copy)] pub struct GUID {\n                     pub Data1: DWORD,\n                     pub Data2: WORD,\n                     pub Data3: WORD,\n                     pub Data4: [BYTE; 8],\n                 }\n \n                 #[repr(C)]\n-                #[deriving(Copy)] pub struct WSAPROTOCOLCHAIN {\n+                #[derive(Copy)] pub struct WSAPROTOCOLCHAIN {\n                     pub ChainLen: c_int,\n                     pub ChainEntries: [DWORD; MAX_PROTOCOL_CHAIN as uint],\n                 }\n \n                 pub type LPWSAPROTOCOLCHAIN = *mut WSAPROTOCOLCHAIN;\n \n                 #[repr(C)]\n-                #[deriving(Copy)] pub struct WSAPROTOCOL_INFO {\n+                #[derive(Copy)] pub struct WSAPROTOCOL_INFO {\n                     pub dwServiceFlags1: DWORD,\n                     pub dwServiceFlags2: DWORD,\n                     pub dwServiceFlags3: DWORD,\n@@ -1720,7 +1720,7 @@ pub mod types {\n                 pub type GROUP = c_uint;\n \n                 #[repr(C)]\n-                #[deriving(Copy)] pub struct WIN32_FIND_DATAW {\n+                #[derive(Copy)] pub struct WIN32_FIND_DATAW {\n                     pub dwFileAttributes: DWORD,\n                     pub ftCreationTime: FILETIME,\n                     pub ftLastAccessTime: FILETIME,\n@@ -1750,7 +1750,7 @@ pub mod types {\n                 pub type pthread_t = uintptr_t;\n \n                 #[repr(C)]\n-                #[deriving(Copy)] pub struct glob_t {\n+                #[derive(Copy)] pub struct glob_t {\n                     pub gl_pathc:  size_t,\n                     pub __unused1: c_int,\n                     pub gl_offs:   size_t,\n@@ -1767,18 +1767,18 @@ pub mod types {\n                 }\n \n                 #[repr(C)]\n-                #[deriving(Copy)] pub struct timeval {\n+                #[derive(Copy)] pub struct timeval {\n                     pub tv_sec: time_t,\n                     pub tv_usec: suseconds_t,\n                 }\n \n                 #[repr(C)]\n-                #[deriving(Copy)] pub struct timespec {\n+                #[derive(Copy)] pub struct timespec {\n                     pub tv_sec: time_t,\n                     pub tv_nsec: c_long,\n                 }\n \n-                #[deriving(Copy)] pub enum timezone {}\n+                #[derive(Copy)] pub enum timezone {}\n \n                 pub type sighandler_t = size_t;\n             }\n@@ -1792,14 +1792,14 @@ pub mod types {\n                 pub type in_port_t = u16;\n                 pub type in_addr_t = u32;\n                 #[repr(C)]\n-                #[deriving(Copy)] pub struct sockaddr {\n+                #[derive(Copy)] pub struct sockaddr {\n                     pub sa_len: u8,\n                     pub sa_family: sa_family_t,\n                     pub sa_data: [u8; 14],\n                 }\n \n                 #[repr(C)]\n-                #[deriving(Copy)] pub struct sockaddr_storage {\n+                #[derive(Copy)] pub struct sockaddr_storage {\n                     pub ss_len: u8,\n                     pub ss_family: sa_family_t,\n                     pub __ss_pad1: [u8; 6],\n@@ -1808,7 +1808,7 @@ pub mod types {\n                 }\n \n                 #[repr(C)]\n-                #[deriving(Copy)] pub struct sockaddr_in {\n+                #[derive(Copy)] pub struct sockaddr_in {\n                     pub sin_len: u8,\n                     pub sin_family: sa_family_t,\n                     pub sin_port: in_port_t,\n@@ -1817,12 +1817,12 @@ pub mod types {\n                 }\n \n                 #[repr(C)]\n-                #[deriving(Copy)] pub struct in_addr {\n+                #[derive(Copy)] pub struct in_addr {\n                     pub s_addr: in_addr_t,\n                 }\n \n                 #[repr(C)]\n-                #[deriving(Copy)] pub struct sockaddr_in6 {\n+                #[derive(Copy)] pub struct sockaddr_in6 {\n                     pub sin6_len: u8,\n                     pub sin6_family: sa_family_t,\n                     pub sin6_port: in_port_t,\n@@ -1832,24 +1832,24 @@ pub mod types {\n                 }\n \n                 #[repr(C)]\n-                #[deriving(Copy)] pub struct in6_addr {\n+                #[derive(Copy)] pub struct in6_addr {\n                     pub s6_addr: [u16; 8]\n                 }\n \n                 #[repr(C)]\n-                #[deriving(Copy)] pub struct ip_mreq {\n+                #[derive(Copy)] pub struct ip_mreq {\n                     pub imr_multiaddr: in_addr,\n                     pub imr_interface: in_addr,\n                 }\n \n                 #[repr(C)]\n-                #[deriving(Copy)] pub struct ip6_mreq {\n+                #[derive(Copy)] pub struct ip6_mreq {\n                     pub ipv6mr_multiaddr: in6_addr,\n                     pub ipv6mr_interface: c_uint,\n                 }\n \n                 #[repr(C)]\n-                #[deriving(Copy)] pub struct addrinfo {\n+                #[derive(Copy)] pub struct addrinfo {\n                     pub ai_flags: c_int,\n                     pub ai_family: c_int,\n                     pub ai_socktype: c_int,\n@@ -1861,14 +1861,14 @@ pub mod types {\n                 }\n \n                 #[repr(C)]\n-                #[deriving(Copy)] pub struct sockaddr_un {\n+                #[derive(Copy)] pub struct sockaddr_un {\n                     pub sun_len: u8,\n                     pub sun_family: sa_family_t,\n                     pub sun_path: [c_char; 104]\n                 }\n \n                 #[repr(C)]\n-                #[deriving(Copy)] pub struct ifaddrs {\n+                #[derive(Copy)] pub struct ifaddrs {\n                     pub ifa_next: *mut ifaddrs,\n                     pub ifa_name: *mut c_char,\n                     pub ifa_flags: c_uint,\n@@ -1931,7 +1931,7 @@ pub mod types {\n                 pub type blkcnt_t = i32;\n \n                 #[repr(C)]\n-                #[deriving(Copy)] pub struct stat {\n+                #[derive(Copy)] pub struct stat {\n                     pub st_dev: dev_t,\n                     pub st_mode: mode_t,\n                     pub st_nlink: nlink_t,\n@@ -1957,13 +1957,13 @@ pub mod types {\n                 }\n \n                 #[repr(C)]\n-                #[deriving(Copy)] pub struct utimbuf {\n+                #[derive(Copy)] pub struct utimbuf {\n                     pub actime: time_t,\n                     pub modtime: time_t,\n                 }\n \n                 #[repr(C)]\n-                #[deriving(Copy)] pub struct pthread_attr_t {\n+                #[derive(Copy)] pub struct pthread_attr_t {\n                     pub __sig: c_long,\n                     pub __opaque: [c_char; 36]\n                 }\n@@ -1974,7 +1974,7 @@ pub mod types {\n             }\n             pub mod extra {\n                 #[repr(C)]\n-                #[deriving(Copy)] pub struct mach_timebase_info {\n+                #[derive(Copy)] pub struct mach_timebase_info {\n                     pub numer: u32,\n                     pub denom: u32,\n                 }\n@@ -2035,7 +2035,7 @@ pub mod types {\n                 pub type blkcnt_t = i32;\n \n                 #[repr(C)]\n-                #[deriving(Copy)] pub struct stat {\n+                #[derive(Copy)] pub struct stat {\n                     pub st_dev: dev_t,\n                     pub st_mode: mode_t,\n                     pub st_nlink: nlink_t,\n@@ -2061,13 +2061,13 @@ pub mod types {\n                 }\n \n                 #[repr(C)]\n-                #[deriving(Copy)] pub struct utimbuf {\n+                #[derive(Copy)] pub struct utimbuf {\n                     pub actime: time_t,\n                     pub modtime: time_t,\n                 }\n \n                 #[repr(C)]\n-                #[deriving(Copy)] pub struct pthread_attr_t {\n+                #[derive(Copy)] pub struct pthread_attr_t {\n                     pub __sig: c_long,\n                     pub __opaque: [c_char; 56]\n                 }\n@@ -2078,7 +2078,7 @@ pub mod types {\n             }\n             pub mod extra {\n                 #[repr(C)]\n-                #[deriving(Copy)] pub struct mach_timebase_info {\n+                #[derive(Copy)] pub struct mach_timebase_info {\n                     pub numer: u32,\n                     pub denom: u32,\n                 }"}, {"sha": "8134503019c99ad9362232e9a47e892bb084a5c2", "filename": "src/liblog/directive.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Fliblog%2Fdirective.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Fliblog%2Fdirective.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliblog%2Fdirective.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -12,7 +12,7 @@ use regex::Regex;\n use std::ascii::AsciiExt;\n use std::cmp;\n \n-#[deriving(Show, Clone)]\n+#[derive(Show, Clone)]\n pub struct LogDirective {\n     pub name: Option<String>,\n     pub level: u32,"}, {"sha": "0508402ff19d8cd96f79b95bb5de8548d43516a2", "filename": "src/liblog/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Fliblog%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Fliblog%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliblog%2Flib.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -232,7 +232,7 @@ struct DefaultLogger {\n }\n \n /// Wraps the log level with fmt implementations.\n-#[deriving(Copy, PartialEq, PartialOrd)]\n+#[derive(Copy, PartialEq, PartialOrd)]\n pub struct LogLevel(pub u32);\n \n impl fmt::Show for LogLevel {\n@@ -319,7 +319,7 @@ pub fn set_logger(logger: Box<Logger + Send>) -> Option<Box<Logger + Send>> {\n \n /// A LogRecord is created by the logging macros, and passed as the only\n /// argument to Loggers.\n-#[deriving(Show)]\n+#[derive(Show)]\n pub struct LogRecord<'a> {\n \n     /// The module path of where the LogRecord originated.\n@@ -339,7 +339,7 @@ pub struct LogRecord<'a> {\n }\n \n #[doc(hidden)]\n-#[deriving(Copy)]\n+#[derive(Copy)]\n pub struct LogLocation {\n     pub module_path: &'static str,\n     pub file: &'static str,"}, {"sha": "0b1dd2e13b4718a78e2767dc42f10dc07a9e901a", "filename": "src/librand/chacha.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrand%2Fchacha.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrand%2Fchacha.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Fchacha.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -29,7 +29,7 @@ const CHACHA_ROUNDS: uint = 20; // Cryptographically secure from 8 upwards as of\n /// [1]: D. J. Bernstein, [*ChaCha, a variant of\n /// Salsa20*](http://cr.yp.to/chacha.html)\n \n-#[deriving(Copy)]\n+#[derive(Copy)]\n pub struct ChaChaRng {\n     buffer:  [u32; STATE_WORDS], // Internal buffer of output\n     state:   [u32; STATE_WORDS], // Initial state"}, {"sha": "580f8897885f6edb8d9be48b0f263d2048ffd29b", "filename": "src/librand/distributions/exponential.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrand%2Fdistributions%2Fexponential.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrand%2Fdistributions%2Fexponential.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Fdistributions%2Fexponential.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -29,7 +29,7 @@ use distributions::{ziggurat, ziggurat_tables, Sample, IndependentSample};\n /// Generate Normal Random\n /// Samples*](http://www.doornik.com/research/ziggurat.pdf). Nuffield\n /// College, Oxford\n-#[deriving(Copy)]\n+#[derive(Copy)]\n pub struct Exp1(pub f64);\n \n // This could be done via `-rng.gen::<f64>().ln()` but that is slower.\n@@ -67,7 +67,7 @@ impl Rand for Exp1 {\n /// let v = exp.ind_sample(&mut rand::thread_rng());\n /// println!(\"{} is from a Exp(2) distribution\", v);\n /// ```\n-#[deriving(Copy)]\n+#[derive(Copy)]\n pub struct Exp {\n     /// `lambda` stored as `1/lambda`, since this is what we scale by.\n     lambda_inverse: f64"}, {"sha": "e684fcf40f7b37d19dac4896bbeebb36dced8307", "filename": "src/librand/distributions/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrand%2Fdistributions%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrand%2Fdistributions%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Fdistributions%2Fmod.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -263,7 +263,7 @@ mod tests {\n     use {Rng, Rand};\n     use super::{RandSample, WeightedChoice, Weighted, Sample, IndependentSample};\n \n-    #[deriving(PartialEq, Show)]\n+    #[derive(PartialEq, Show)]\n     struct ConstRand(uint);\n     impl Rand for ConstRand {\n         fn rand<R: Rng>(_: &mut R) -> ConstRand {"}, {"sha": "2e1a433eb075e43ea932ef78f8e4e1a4a17ca897", "filename": "src/librand/distributions/normal.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrand%2Fdistributions%2Fnormal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrand%2Fdistributions%2Fnormal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Fdistributions%2Fnormal.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -28,7 +28,7 @@ use distributions::{ziggurat, ziggurat_tables, Sample, IndependentSample};\n /// Generate Normal Random\n /// Samples*](http://www.doornik.com/research/ziggurat.pdf). Nuffield\n /// College, Oxford\n-#[deriving(Copy)]\n+#[derive(Copy)]\n pub struct StandardNormal(pub f64);\n \n impl Rand for StandardNormal {\n@@ -84,7 +84,7 @@ impl Rand for StandardNormal {\n /// let v = normal.ind_sample(&mut rand::thread_rng());\n /// println!(\"{} is from a N(2, 9) distribution\", v)\n /// ```\n-#[deriving(Copy)]\n+#[derive(Copy)]\n pub struct Normal {\n     mean: f64,\n     std_dev: f64,\n@@ -132,7 +132,7 @@ impl IndependentSample<f64> for Normal {\n /// let v = log_normal.ind_sample(&mut rand::thread_rng());\n /// println!(\"{} is from an ln N(2, 9) distribution\", v)\n /// ```\n-#[deriving(Copy)]\n+#[derive(Copy)]\n pub struct LogNormal {\n     norm: Normal\n }"}, {"sha": "af90a0a308dc9bc76be5428e4fe439ec7f3cd768", "filename": "src/librand/isaac.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrand%2Fisaac.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrand%2Fisaac.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Fisaac.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -29,7 +29,7 @@ const RAND_SIZE_UINT: uint = 1 << (RAND_SIZE_LEN as uint);\n ///\n /// [1]: Bob Jenkins, [*ISAAC: A fast cryptographic random number\n /// generator*](http://www.burtleburtle.net/bob/rand/isaacafa.html)\n-#[deriving(Copy)]\n+#[derive(Copy)]\n pub struct IsaacRng {\n     cnt: u32,\n     rsl: [u32; RAND_SIZE_UINT],\n@@ -264,7 +264,7 @@ const RAND_SIZE_64: uint = 1 << RAND_SIZE_64_LEN;\n ///\n /// [1]: Bob Jenkins, [*ISAAC: A fast cryptographic random number\n /// generator*](http://www.burtleburtle.net/bob/rand/isaacafa.html)\n-#[deriving(Copy)]\n+#[derive(Copy)]\n pub struct Isaac64Rng {\n     cnt: uint,\n     rsl: [u64; RAND_SIZE_64],"}, {"sha": "795e8fab85692e6929ab623f7b8933c5cb65c080", "filename": "src/librand/reseeding.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrand%2Freseeding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrand%2Freseeding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Freseeding.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -133,7 +133,7 @@ pub trait Reseeder<R> {\n \n /// Reseed an RNG using a `Default` instance. This reseeds by\n /// replacing the RNG with the result of a `Default::default` call.\n-#[deriving(Copy)]\n+#[derive(Copy)]\n pub struct ReseedWithDefault;\n \n impl<R: Rng + Default> Reseeder<R> for ReseedWithDefault {"}, {"sha": "31fb504ba3d0115eb81f007bb7913d153fe221c7", "filename": "src/librbml/lib.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrbml%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrbml%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrbml%2Flib.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -41,7 +41,7 @@ use std::str;\n pub mod io;\n \n /// Common data structures\n-#[deriving(Clone, Copy)]\n+#[derive(Clone, Copy)]\n pub struct Doc<'a> {\n     pub data: &'a [u8],\n     pub start: uint,\n@@ -71,7 +71,7 @@ pub struct TaggedDoc<'a> {\n     pub doc: Doc<'a>,\n }\n \n-#[deriving(Copy, Show)]\n+#[derive(Copy, Show)]\n pub enum EbmlEncoderTag {\n     EsUint,     // 0\n     EsU64,      // 1\n@@ -105,7 +105,7 @@ pub enum EbmlEncoderTag {\n     EsLabel, // Used only when debugging\n }\n \n-#[deriving(Show)]\n+#[derive(Show)]\n pub enum Error {\n     IntTooBig(uint),\n     Expected(String),\n@@ -147,7 +147,7 @@ pub mod reader {\n         )\n     }\n \n-    #[deriving(Copy)]\n+    #[derive(Copy)]\n     pub struct Res {\n         pub val: uint,\n         pub next: uint"}, {"sha": "d29a7a425c1164d1825549f49a99305377d89a95", "filename": "src/libregex/compile.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibregex%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibregex%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibregex%2Fcompile.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -25,7 +25,7 @@ use parse::{\n \n type InstIdx = uint;\n \n-#[deriving(Show, Clone)]\n+#[derive(Show, Clone)]\n pub enum Inst {\n     // When a Match instruction is executed, the current thread is successful.\n     Match,\n@@ -78,7 +78,7 @@ pub enum Inst {\n /// All of the data in a compiled expression is wrapped in \"MaybeStatic\" or\n /// \"MaybeOwned\" types so that a `Program` can be represented as static data.\n /// (This makes it convenient and efficient for use with the `regex!` macro.)\n-#[deriving(Clone)]\n+#[derive(Clone)]\n pub struct Program {\n     /// A sequence of instructions.\n     pub insts: Vec<Inst>,"}, {"sha": "07da86afcc9719834b50a60710c3d2104d628133", "filename": "src/libregex/parse.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibregex%2Fparse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibregex%2Fparse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibregex%2Fparse.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -52,7 +52,7 @@ impl fmt::Show for Error {\n ///\n /// Note that this representation prevents one from reproducing the regex as\n /// it was typed. (But it could be used to reproduce an equivalent regex.)\n-#[deriving(Show, Clone)]\n+#[derive(Show, Clone)]\n pub enum Ast {\n     Nothing,\n     Literal(char, Flags),\n@@ -69,14 +69,14 @@ pub enum Ast {\n     Rep(Box<Ast>, Repeater, Greed),\n }\n \n-#[deriving(Show, PartialEq, Clone)]\n+#[derive(Show, PartialEq, Clone)]\n pub enum Repeater {\n     ZeroOne,\n     ZeroMore,\n     OneMore,\n }\n \n-#[deriving(Copy, Show, Clone)]\n+#[derive(Copy, Show, Clone)]\n pub enum Greed {\n     Greedy,\n     Ungreedy,\n@@ -103,7 +103,7 @@ impl Greed {\n /// constructing an abstract syntax tree. Its central purpose is to facilitate\n /// parsing groups and alternations while also maintaining a stack of flag\n /// state.\n-#[deriving(Show)]\n+#[derive(Show)]\n enum BuildAst {\n     Expr(Ast),\n     Paren(Flags, uint, String), // '('"}, {"sha": "8edbf263d74003940f972adb4172d2d74257bd69", "filename": "src/libregex/re.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibregex%2Fre.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibregex%2Fre.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibregex%2Fre.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -104,7 +104,7 @@ pub fn is_match(regex: &str, text: &str) -> Result<bool, parse::Error> {\n /// makes it much faster when searching text.\n /// More details about the `regex!` macro can be found in the `regex` crate\n /// documentation.\n-#[deriving(Clone)]\n+#[derive(Clone)]\n pub enum Regex {\n     // The representation of `Regex` is exported to support the `regex!`\n     // syntax extension. Do not rely on it.\n@@ -117,7 +117,7 @@ pub enum Regex {\n     Native(ExNative),\n }\n \n-#[deriving(Clone)]\n+#[derive(Clone)]\n #[doc(hidden)]\n pub struct ExDynamic {\n     original: String,\n@@ -127,7 +127,7 @@ pub struct ExDynamic {\n }\n \n #[doc(hidden)]\n-#[deriving(Copy)]\n+#[derive(Copy)]\n pub struct ExNative {\n     #[doc(hidden)]\n     pub original: &'static str,\n@@ -540,7 +540,7 @@ impl Regex {\n \n }\n \n-#[deriving(Clone)]\n+#[derive(Clone)]\n pub enum NamesIter<'a> {\n     NamesIterNative(::std::slice::Iter<'a, Option<&'static str>>),\n     NamesIterDynamic(::std::slice::Iter<'a, Option<String>>)\n@@ -599,7 +599,7 @@ impl<F> Replacer for F where F: FnMut(&Captures) -> String {\n ///\n /// `'r` is the lifetime of the compiled expression and `'t` is the lifetime\n /// of the string being split.\n-#[deriving(Clone)]\n+#[derive(Clone)]\n pub struct RegexSplits<'r, 't> {\n     finder: FindMatches<'r, 't>,\n     last: uint,\n@@ -635,7 +635,7 @@ impl<'r, 't> Iterator for RegexSplits<'r, 't> {\n ///\n /// `'r` is the lifetime of the compiled expression and `'t` is the lifetime\n /// of the string being split.\n-#[deriving(Clone)]\n+#[derive(Clone)]\n pub struct RegexSplitsN<'r, 't> {\n     splits: RegexSplits<'r, 't>,\n     cur: uint,\n@@ -801,7 +801,7 @@ impl<'t> Captures<'t> {\n /// expression.\n ///\n /// `'t` is the lifetime of the matched text.\n-#[deriving(Clone)]\n+#[derive(Clone)]\n pub struct SubCaptures<'t> {\n     idx: uint,\n     caps: &'t Captures<'t>,\n@@ -826,7 +826,7 @@ impl<'t> Iterator for SubCaptures<'t> {\n /// Positions are byte indices in terms of the original string matched.\n ///\n /// `'t` is the lifetime of the matched text.\n-#[deriving(Clone)]\n+#[derive(Clone)]\n pub struct SubCapturesPos<'t> {\n     idx: uint,\n     caps: &'t Captures<'t>,\n@@ -852,7 +852,7 @@ impl<'t> Iterator for SubCapturesPos<'t> {\n ///\n /// `'r` is the lifetime of the compiled expression and `'t` is the lifetime\n /// of the matched string.\n-#[deriving(Clone)]\n+#[derive(Clone)]\n pub struct FindCaptures<'r, 't> {\n     re: &'r Regex,\n     search: &'t str,\n@@ -897,7 +897,7 @@ impl<'r, 't> Iterator for FindCaptures<'r, 't> {\n ///\n /// `'r` is the lifetime of the compiled expression and `'t` is the lifetime\n /// of the matched string.\n-#[deriving(Clone)]\n+#[derive(Clone)]\n pub struct FindMatches<'r, 't> {\n     re: &'r Regex,\n     search: &'t str,"}, {"sha": "914167019d20969fd01412b99ce643aaf52fc0c2", "filename": "src/libregex/vm.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibregex%2Fvm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibregex%2Fvm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibregex%2Fvm.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -37,7 +37,7 @@ pub use self::MatchKind::*;\n pub use self::StepState::*;\n \n use std::cmp;\n-use std::cmp::Ordering::{mod, Less, Equal, Greater};\n+use std::cmp::Ordering::{self, Less, Equal, Greater};\n use std::mem;\n use std::iter::repeat;\n use std::slice::SliceExt;\n@@ -52,7 +52,7 @@ use unicode::regex::PERLW;\n pub type CaptureLocs = Vec<Option<uint>>;\n \n /// Indicates the type of match to be performed by the VM.\n-#[deriving(Copy)]\n+#[derive(Copy)]\n pub enum MatchKind {\n     /// Only checks if a match exists or not. Does not return location.\n     Exists,\n@@ -97,7 +97,7 @@ struct Nfa<'r, 't> {\n \n /// Indicates the next action to take after a single non-empty instruction\n /// is processed.\n-#[deriving(Copy)]\n+#[derive(Copy)]\n pub enum StepState {\n     /// This is returned if and only if a Match instruction is reached and\n     /// we only care about the existence of a match. It instructs the VM to"}, {"sha": "8f03f8821285a47c24d951abb92d114d3d651beb", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 25, "deletions": 25, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -29,7 +29,7 @@ use self::MethodContext::*;\n use metadata::csearch;\n use middle::def::*;\n use middle::subst::Substs;\n-use middle::ty::{mod, Ty};\n+use middle::ty::{self, Ty};\n use middle::{def, pat_util, stability};\n use middle::const_eval::{eval_const_expr_partial, const_int, const_uint};\n use util::ppaux::{ty_to_string};\n@@ -43,21 +43,21 @@ use std::{i8, i16, i32, i64, u8, u16, u32, u64, f32, f64};\n \n use syntax::{abi, ast, ast_map};\n use syntax::ast_util::is_shift_binop;\n-use syntax::attr::{mod, AttrMetaMethods};\n+use syntax::attr::{self, AttrMetaMethods};\n use syntax::codemap::{Span, DUMMY_SP};\n use syntax::parse::token;\n use syntax::ast::{TyI, TyU, TyI8, TyU8, TyI16, TyU16, TyI32, TyU32, TyI64, TyU64};\n use syntax::ast_util;\n use syntax::ptr::P;\n-use syntax::visit::{mod, Visitor};\n+use syntax::visit::{self, Visitor};\n \n declare_lint! {\n     WHILE_TRUE,\n     Warn,\n     \"suggest using `loop { }` instead of `while true { }`\"\n }\n \n-#[deriving(Copy)]\n+#[derive(Copy)]\n pub struct WhileTrue;\n \n impl LintPass for WhileTrue {\n@@ -83,7 +83,7 @@ declare_lint! {\n     \"detects unnecessary type casts that can be removed\"\n }\n \n-#[deriving(Copy)]\n+#[derive(Copy)]\n pub struct UnusedCasts;\n \n impl LintPass for UnusedCasts {\n@@ -125,7 +125,7 @@ declare_lint! {\n     \"shift exceeds the type's number of bits\"\n }\n \n-#[deriving(Copy)]\n+#[derive(Copy)]\n pub struct TypeLimits {\n     /// Id of the last visited negated expression\n     negated_expr_id: ast::NodeId,\n@@ -442,7 +442,7 @@ impl<'a, 'tcx, 'v> Visitor<'v> for ImproperCTypesVisitor<'a, 'tcx> {\n     }\n }\n \n-#[deriving(Copy)]\n+#[derive(Copy)]\n pub struct ImproperCTypes;\n \n impl LintPass for ImproperCTypes {\n@@ -485,7 +485,7 @@ declare_lint! {\n     \"use of owned (Box type) heap memory\"\n }\n \n-#[deriving(Copy)]\n+#[derive(Copy)]\n pub struct BoxPointers;\n \n impl BoxPointers {\n@@ -625,7 +625,7 @@ declare_lint! {\n     \"detects attributes that were not used by the compiler\"\n }\n \n-#[deriving(Copy)]\n+#[derive(Copy)]\n pub struct UnusedAttributes;\n \n impl LintPass for UnusedAttributes {\n@@ -709,7 +709,7 @@ declare_lint! {\n     \"path statements with no effect\"\n }\n \n-#[deriving(Copy)]\n+#[derive(Copy)]\n pub struct PathStatements;\n \n impl LintPass for PathStatements {\n@@ -743,7 +743,7 @@ declare_lint! {\n     \"unused result of an expression in a statement\"\n }\n \n-#[deriving(Copy)]\n+#[derive(Copy)]\n pub struct UnusedResults;\n \n impl LintPass for UnusedResults {\n@@ -811,7 +811,7 @@ declare_lint! {\n     \"types, variants, traits and type parameters should have camel case names\"\n }\n \n-#[deriving(Copy)]\n+#[derive(Copy)]\n pub struct NonCamelCaseTypes;\n \n impl NonCamelCaseTypes {\n@@ -884,7 +884,7 @@ impl LintPass for NonCamelCaseTypes {\n     }\n }\n \n-#[deriving(PartialEq)]\n+#[derive(PartialEq)]\n enum MethodContext {\n     TraitDefaultImpl,\n     TraitImpl,\n@@ -934,7 +934,7 @@ declare_lint! {\n     \"methods, functions, lifetime parameters and modules should have snake case names\"\n }\n \n-#[deriving(Copy)]\n+#[derive(Copy)]\n pub struct NonSnakeCase;\n \n impl NonSnakeCase {\n@@ -1047,7 +1047,7 @@ declare_lint! {\n     \"static constants should have uppercase identifiers\"\n }\n \n-#[deriving(Copy)]\n+#[derive(Copy)]\n pub struct NonUpperCaseGlobals;\n \n impl LintPass for NonUpperCaseGlobals {\n@@ -1100,7 +1100,7 @@ declare_lint! {\n     \"`if`, `match`, `while` and `return` do not need parentheses\"\n }\n \n-#[deriving(Copy)]\n+#[derive(Copy)]\n pub struct UnusedParens;\n \n impl UnusedParens {\n@@ -1194,7 +1194,7 @@ declare_lint! {\n     \"unnecessary braces around an imported item\"\n }\n \n-#[deriving(Copy)]\n+#[derive(Copy)]\n pub struct UnusedImportBraces;\n \n impl LintPass for UnusedImportBraces {\n@@ -1233,7 +1233,7 @@ declare_lint! {\n     \"using `Struct { x: x }` instead of `Struct { x }`\"\n }\n \n-#[deriving(Copy)]\n+#[derive(Copy)]\n pub struct NonShorthandFieldPatterns;\n \n impl LintPass for NonShorthandFieldPatterns {\n@@ -1266,7 +1266,7 @@ declare_lint! {\n     \"unnecessary use of an `unsafe` block\"\n }\n \n-#[deriving(Copy)]\n+#[derive(Copy)]\n pub struct UnusedUnsafe;\n \n impl LintPass for UnusedUnsafe {\n@@ -1291,7 +1291,7 @@ declare_lint! {\n     \"usage of an `unsafe` block\"\n }\n \n-#[deriving(Copy)]\n+#[derive(Copy)]\n pub struct UnsafeBlocks;\n \n impl LintPass for UnsafeBlocks {\n@@ -1315,7 +1315,7 @@ declare_lint! {\n     \"detect mut variables which don't need to be mutable\"\n }\n \n-#[deriving(Copy)]\n+#[derive(Copy)]\n pub struct UnusedMut;\n \n impl UnusedMut {\n@@ -1384,7 +1384,7 @@ declare_lint! {\n     \"detects unnecessary allocations that can be eliminated\"\n }\n \n-#[deriving(Copy)]\n+#[derive(Copy)]\n pub struct UnusedAllocation;\n \n impl LintPass for UnusedAllocation {\n@@ -1575,7 +1575,7 @@ impl LintPass for MissingDoc {\n     }\n }\n \n-#[deriving(Copy)]\n+#[derive(Copy)]\n pub struct MissingCopyImplementations;\n \n impl LintPass for MissingCopyImplementations {\n@@ -1646,7 +1646,7 @@ declare_lint! {\n \n /// Checks for use of items with `#[deprecated]`, `#[experimental]` and\n /// `#[unstable]` attributes, or no stability attribute.\n-#[deriving(Copy)]\n+#[derive(Copy)]\n pub struct Stability;\n \n impl Stability {\n@@ -1857,7 +1857,7 @@ declare_lint!{\n \n /// Does nothing as a lint pass, but registers some `Lint`s\n /// which are used by other parts of the compiler.\n-#[deriving(Copy)]\n+#[derive(Copy)]\n pub struct HardwiredLints;\n \n impl LintPass for HardwiredLints {"}, {"sha": "69e5b4889c28837ab5169d956a944e0df09a3c7d", "filename": "src/librustc/lint/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc%2Flint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc%2Flint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fcontext.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -26,7 +26,7 @@\n use self::TargetLint::*;\n \n use middle::privacy::ExportedItems;\n-use middle::ty::{mod, Ty};\n+use middle::ty::{self, Ty};\n use session::{early_error, Session};\n use lint::{Level, LevelSource, Lint, LintId, LintArray, LintPass, LintPassObject};\n use lint::{Default, CommandLine, Node, Allow, Warn, Deny, Forbid};"}, {"sha": "461a67ba93793cbe7d62124c67480afbe15316cd", "filename": "src/librustc/lint/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc%2Flint%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc%2Flint%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fmod.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -42,7 +42,7 @@ use syntax::ast;\n pub use lint::context::{Context, LintStore, raw_emit_lint, check_crate, gather_attrs};\n \n /// Specification of a single lint.\n-#[deriving(Copy)]\n+#[derive(Copy)]\n pub struct Lint {\n     /// A string identifier for the lint.\n     ///\n@@ -174,7 +174,7 @@ pub trait LintPass {\n pub type LintPassObject = Box<LintPass + 'static>;\n \n /// Identifies a lint known to the compiler.\n-#[deriving(Clone, Copy)]\n+#[derive(Clone, Copy)]\n pub struct LintId {\n     // Identity is based on pointer equality of this field.\n     lint: &'static Lint,\n@@ -210,7 +210,7 @@ impl LintId {\n }\n \n /// Setting for how to handle a lint.\n-#[deriving(Clone, Copy, PartialEq, PartialOrd, Eq, Ord)]\n+#[derive(Clone, Copy, PartialEq, PartialOrd, Eq, Ord)]\n pub enum Level {\n     Allow, Warn, Deny, Forbid\n }\n@@ -239,7 +239,7 @@ impl Level {\n }\n \n /// How a lint level was set.\n-#[deriving(Clone, Copy, PartialEq, Eq)]\n+#[derive(Clone, Copy, PartialEq, Eq)]\n pub enum LintSource {\n     /// Lint is at the default level as declared\n     /// in rustc or a plugin."}, {"sha": "cc21243b81d8db45c00ddb877f86e2edd69967dd", "filename": "src/librustc/metadata/common.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc%2Fmetadata%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc%2Fmetadata%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcommon.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -113,7 +113,7 @@ pub const tag_items_data_item_reexport_def_id: uint = 0x39;\n pub const tag_items_data_item_reexport_name: uint = 0x3a;\n \n // used to encode crate_ctxt side tables\n-#[deriving(Copy, PartialEq)]\n+#[derive(Copy, PartialEq)]\n #[repr(uint)]\n pub enum astencode_tag { // Reserves 0x40 -- 0x5f\n     tag_ast = 0x40,\n@@ -219,7 +219,7 @@ pub const tag_items_data_item_stability: uint = 0x92;\n \n pub const tag_items_data_item_repr: uint = 0x93;\n \n-#[deriving(Clone, Show)]\n+#[derive(Clone, Show)]\n pub struct LinkMeta {\n     pub crate_name: String,\n     pub crate_hash: Svh,"}, {"sha": "1401a7d4a1a6ee564181a98153ee048d5875c3ad", "filename": "src/librustc/metadata/csearch.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc%2Fmetadata%2Fcsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc%2Fmetadata%2Fcsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcsearch.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -32,7 +32,7 @@ use syntax::parse::token;\n \n use std::collections::hash_map::HashMap;\n \n-#[deriving(Copy)]\n+#[derive(Copy)]\n pub struct MethodInfo {\n     pub name: ast::Name,\n     pub def_id: ast::DefId,"}, {"sha": "2f4acaca4de4d3eda8f5f1223da3182d9bd89f15", "filename": "src/librustc/metadata/cstore.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc%2Fmetadata%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc%2Fmetadata%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcstore.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -48,13 +48,13 @@ pub struct crate_metadata {\n     pub span: Span,\n }\n \n-#[deriving(Copy, Show, PartialEq, Clone)]\n+#[derive(Copy, Show, PartialEq, Clone)]\n pub enum LinkagePreference {\n     RequireDynamic,\n     RequireStatic,\n }\n \n-#[deriving(Copy, Clone, PartialEq, FromPrimitive)]\n+#[derive(Copy, Clone, PartialEq, FromPrimitive)]\n pub enum NativeLibraryKind {\n     NativeStatic,    // native static library (.a archive)\n     NativeFramework, // OSX-specific\n@@ -63,7 +63,7 @@ pub enum NativeLibraryKind {\n \n // Where a crate came from on the local filesystem. One of these two options\n // must be non-None.\n-#[deriving(PartialEq, Clone)]\n+#[derive(PartialEq, Clone)]\n pub struct CrateSource {\n     pub dylib: Option<Path>,\n     pub rlib: Option<Path>,"}, {"sha": "97f5228f0330b5ca98a988d15215ff433e47052d", "filename": "src/librustc/metadata/decoder.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fdecoder.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -29,7 +29,7 @@ use middle::def;\n use middle::lang_items;\n use middle::subst;\n use middle::ty::{ImplContainer, TraitContainer};\n-use middle::ty::{mod, Ty};\n+use middle::ty::{self, Ty};\n use middle::astencode::vtable_decoder_helpers;\n \n use std::collections::HashMap;\n@@ -111,7 +111,7 @@ fn lookup_item<'a>(item_id: ast::NodeId, data: &'a [u8]) -> rbml::Doc<'a> {\n     find_item(item_id, items)\n }\n \n-#[deriving(PartialEq)]\n+#[derive(PartialEq)]\n enum Family {\n     ImmStatic,             // c\n     MutStatic,             // b\n@@ -471,7 +471,7 @@ pub fn get_symbol(data: &[u8], id: ast::NodeId) -> String {\n }\n \n // Something that a name can resolve to.\n-#[deriving(Copy, Clone, Show)]\n+#[derive(Copy, Clone, Show)]\n pub enum DefLike {\n     DlDef(def::Def),\n     DlImpl(ast::DefId),\n@@ -1173,7 +1173,7 @@ pub fn get_crate_attributes(data: &[u8]) -> Vec<ast::Attribute> {\n     get_attributes(rbml::Doc::new(data))\n }\n \n-#[deriving(Clone)]\n+#[derive(Clone)]\n pub struct CrateDep {\n     pub cnum: ast::CrateNum,\n     pub name: String,"}, {"sha": "75b9a18063e2821f9e37372b376ea51734973c91", "filename": "src/librustc/metadata/encoder.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fencoder.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -23,7 +23,7 @@ use metadata::decoder;\n use metadata::tyencode;\n use middle::def;\n use middle::ty::{lookup_item_type};\n-use middle::ty::{mod, Ty};\n+use middle::ty::{self, Ty};\n use middle::stability;\n use util::nodemap::{FnvHashMap, NodeMap, NodeSet};\n \n@@ -32,7 +32,7 @@ use std::cell::RefCell;\n use std::hash::Hash;\n use std::hash;\n use syntax::abi;\n-use syntax::ast::{mod, DefId, NodeId};\n+use syntax::ast::{self, DefId, NodeId};\n use syntax::ast_map::{PathElem, PathElems};\n use syntax::ast_map;\n use syntax::ast_util::*;\n@@ -98,7 +98,7 @@ pub fn encode_def_id(rbml_w: &mut Encoder, id: DefId) {\n     rbml_w.wr_tagged_str(tag_def_id, def_to_string(id)[]);\n }\n \n-#[deriving(Clone)]\n+#[derive(Clone)]\n struct entry<T> {\n     val: T,\n     pos: u64"}, {"sha": "29625d0a6afac63c8a34ba609fe4aaa6d5d30405", "filename": "src/librustc/metadata/filesearch.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc%2Fmetadata%2Ffilesearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc%2Fmetadata%2Ffilesearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ffilesearch.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -20,7 +20,7 @@ use std::os;\n use util::fs as myfs;\n use session::search_paths::{SearchPaths, PathKind};\n \n-#[deriving(Copy)]\n+#[derive(Copy)]\n pub enum FileMatch {\n     FileMatches,\n     FileDoesntMatch,"}, {"sha": "80b13aac89fc8f2feb1aaa4293d7e143323d2d0e", "filename": "src/librustc/metadata/tydecode.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc%2Fmetadata%2Ftydecode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc%2Fmetadata%2Ftydecode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ftydecode.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -21,7 +21,7 @@ pub use self::DefIdSource::*;\n use middle::region;\n use middle::subst;\n use middle::subst::VecPerParamSpace;\n-use middle::ty::{mod, AsPredicate, Ty};\n+use middle::ty::{self, AsPredicate, Ty};\n \n use std::rc::Rc;\n use std::str;\n@@ -43,7 +43,7 @@ use syntax::parse::token;\n // def-id will depend on where it originated from.  Therefore, the conversion\n // function is given an indicator of the source of the def-id.  See\n // astencode.rs for more information.\n-#[deriving(Copy, Show)]\n+#[derive(Copy, Show)]\n pub enum DefIdSource {\n     // Identifies a struct, trait, enum, etc.\n     NominalType,"}, {"sha": "5f0f51ce9033d3b4f9a5ecfda313839e0dfa9423", "filename": "src/librustc/metadata/tyencode.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc%2Fmetadata%2Ftyencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc%2Fmetadata%2Ftyencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ftyencode.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -19,7 +19,7 @@ use middle::region;\n use middle::subst;\n use middle::subst::VecPerParamSpace;\n use middle::ty::ParamTy;\n-use middle::ty::{mod, Ty};\n+use middle::ty::{self, Ty};\n use util::nodemap::FnvHashMap;\n \n use syntax::abi::Abi;"}, {"sha": "b2ad77467276f8e38fa676a2424bfd34cd2a0096", "filename": "src/librustc/middle/astconv_util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc%2Fmiddle%2Fastconv_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc%2Fmiddle%2Fastconv_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fastconv_util.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -15,7 +15,7 @@\n  */\n \n use middle::def;\n-use middle::ty::{mod, Ty};\n+use middle::ty::{self, Ty};\n use syntax::ast;\n use util::ppaux::Repr;\n "}, {"sha": "e4d407d66a2ee91db813b8ff572303e0bc668425", "filename": "src/librustc/middle/astencode.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fastencode.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -26,7 +26,7 @@ use metadata::tyencode;\n use middle::mem_categorization::Typer;\n use middle::subst;\n use middle::subst::VecPerParamSpace;\n-use middle::ty::{mod, Ty, MethodCall, MethodCallee, MethodOrigin};\n+use middle::ty::{self, Ty, MethodCall, MethodCallee, MethodOrigin};\n use util::ppaux::ty_to_string;\n \n use syntax::{ast, ast_map, ast_util, codemap, fold};"}, {"sha": "ff5175ffdcfb2a3cc73021c9c835cd21db691ec8", "filename": "src/librustc/middle/cfg/construct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc%2Fmiddle%2Fcfg%2Fconstruct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc%2Fmiddle%2Fcfg%2Fconstruct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcfg%2Fconstruct.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -26,7 +26,7 @@ struct CFGBuilder<'a, 'tcx: 'a> {\n     loop_scopes: Vec<LoopScope>,\n }\n \n-#[deriving(Copy)]\n+#[derive(Copy)]\n struct LoopScope {\n     loop_id: ast::NodeId,     // id of loop/while node\n     continue_index: CFGIndex, // where to go on a `loop`"}, {"sha": "0ca146a295e139a95712377578205699febcae97", "filename": "src/librustc/middle/cfg/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc%2Fmiddle%2Fcfg%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc%2Fmiddle%2Fcfg%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcfg%2Fmod.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -26,7 +26,7 @@ pub struct CFG {\n     pub exit: CFGIndex,\n }\n \n-#[deriving(Copy)]\n+#[derive(Copy)]\n pub struct CFGNodeData {\n     pub id: ast::NodeId\n }"}, {"sha": "e68a9fb50efd0f6e5ed0d3ae82660a7f6cc7ce81", "filename": "src/librustc/middle/check_loop.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc%2Fmiddle%2Fcheck_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc%2Fmiddle%2Fcheck_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_loop.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -16,12 +16,12 @@ use syntax::codemap::Span;\n use syntax::visit::Visitor;\n use syntax::visit;\n \n-#[deriving(Clone, Copy, PartialEq)]\n+#[derive(Clone, Copy, PartialEq)]\n enum Context {\n     Normal, Loop, Closure\n }\n \n-#[deriving(Copy)]\n+#[derive(Copy)]\n struct CheckLoopVisitor<'a> {\n     sess: &'a Session,\n     cx: Context"}, {"sha": "2d9284846acf349060192a44454f7945c536ad9b", "filename": "src/librustc/middle/check_match.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -27,14 +27,14 @@ use std::fmt;\n use std::iter::{range_inclusive, AdditiveIterator, FromIterator, repeat};\n use std::num::Float;\n use std::slice;\n-use syntax::ast::{mod, DUMMY_NODE_ID, NodeId, Pat};\n+use syntax::ast::{self, DUMMY_NODE_ID, NodeId, Pat};\n use syntax::ast_util::walk_pat;\n use syntax::codemap::{Span, Spanned, DUMMY_SP};\n use syntax::fold::{Folder, noop_fold_pat};\n use syntax::print::pprust::pat_to_string;\n use syntax::parse::token;\n use syntax::ptr::P;\n-use syntax::visit::{mod, Visitor, FnKind};\n+use syntax::visit::{self, Visitor, FnKind};\n use util::ppaux::ty_to_string;\n \n pub const DUMMY_WILD_PAT: &'static Pat = &Pat {\n@@ -102,7 +102,7 @@ pub struct MatchCheckCtxt<'a, 'tcx: 'a> {\n     pub param_env: ParameterEnvironment<'a, 'tcx>,\n }\n \n-#[deriving(Clone, PartialEq)]\n+#[derive(Clone, PartialEq)]\n pub enum Constructor {\n     /// The constructor of all patterns that don't vary by constructor,\n     /// e.g. struct patterns and fixed-length arrays.\n@@ -119,14 +119,14 @@ pub enum Constructor {\n     SliceWithSubslice(uint, uint)\n }\n \n-#[deriving(Clone, PartialEq)]\n+#[derive(Clone, PartialEq)]\n enum Usefulness {\n     Useful,\n     UsefulWithWitness(Vec<P<Pat>>),\n     NotUseful\n }\n \n-#[deriving(Copy)]\n+#[derive(Copy)]\n enum WitnessPreference {\n     ConstructWitness,\n     LeaveOutWitness"}, {"sha": "df51cb7e6bc4b3078c83cb9300640aea1d5be434", "filename": "src/librustc/middle/check_static.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc%2Fmiddle%2Fcheck_static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc%2Fmiddle%2Fcheck_static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_static.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -39,7 +39,7 @@ use syntax::visit::Visitor;\n use syntax::codemap::Span;\n use syntax::visit;\n \n-#[deriving(Copy, Eq, PartialEq)]\n+#[derive(Copy, Eq, PartialEq)]\n enum Mode {\n     InConstant,\n     InStatic,"}, {"sha": "a62b134c48e71d9a1547bb398adffca87641f8d2", "filename": "src/librustc/middle/const_eval.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -17,14 +17,14 @@ pub use self::constness::*;\n use metadata::csearch;\n use middle::{astencode, def};\n use middle::pat_util::def_to_path;\n-use middle::ty::{mod};\n+use middle::ty::{self};\n use middle::astconv_util::{ast_ty_to_prim_ty};\n use util::nodemap::DefIdMap;\n \n-use syntax::ast::{mod, Expr};\n+use syntax::ast::{self, Expr};\n use syntax::parse::token::InternedString;\n use syntax::ptr::P;\n-use syntax::visit::{mod, Visitor};\n+use syntax::visit::{self, Visitor};\n use syntax::{ast_map, ast_util, codemap};\n \n use std::collections::hash_map::Entry::Vacant;\n@@ -62,7 +62,7 @@ use std::rc::Rc;\n //   - Non-constants: everything else.\n //\n \n-#[deriving(Copy)]\n+#[derive(Copy)]\n pub enum constness {\n     integral_const,\n     general_const,\n@@ -294,7 +294,7 @@ pub fn process_crate(tcx: &ty::ctxt) {\n \n // FIXME (#33): this doesn't handle big integer/float literals correctly\n // (nor does the rest of our literal handling).\n-#[deriving(Clone, PartialEq)]\n+#[derive(Clone, PartialEq)]\n pub enum const_val {\n     const_float(f64),\n     const_int(i64),"}, {"sha": "e78b8047f695867ad51e875c90e4cb8a358addd0", "filename": "src/librustc/middle/dataflow.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc%2Fmiddle%2Fdataflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc%2Fmiddle%2Fdataflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdataflow.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -28,13 +28,13 @@ use syntax::visit;\n use syntax::print::{pp, pprust};\n use util::nodemap::NodeMap;\n \n-#[deriving(Copy, Show)]\n+#[derive(Copy, Show)]\n pub enum EntryOrExit {\n     Entry,\n     Exit,\n }\n \n-#[deriving(Clone)]\n+#[derive(Clone)]\n pub struct DataFlowContext<'a, 'tcx: 'a, O> {\n     tcx: &'a ty::ctxt<'tcx>,\n "}, {"sha": "5a2085bee24c5f483997f7fa9cf105648a2dec86", "filename": "src/librustc/middle/dead.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc%2Fmiddle%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc%2Fmiddle%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdead.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -19,8 +19,8 @@ use util::nodemap::NodeSet;\n use std::collections::HashSet;\n use syntax::{ast, ast_map, codemap};\n use syntax::ast_util::{local_def, is_local, PostExpansionMethod};\n-use syntax::attr::{mod, AttrMetaMethods};\n-use syntax::visit::{mod, Visitor};\n+use syntax::attr::{self, AttrMetaMethods};\n+use syntax::visit::{self, Visitor};\n \n // Any local node that may call something in its body block should be\n // explored. For example, if it's a live NodeItem that is a"}, {"sha": "2e4aa787e844b723e56b683c33c575a212d12294", "filename": "src/librustc/middle/def.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc%2Fmiddle%2Fdef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc%2Fmiddle%2Fdef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdef.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -20,7 +20,7 @@ use syntax::ast_util::local_def;\n \n use std::cell::RefCell;\n \n-#[deriving(Clone, Copy, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n+#[derive(Clone, Copy, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n pub enum Def {\n     DefFn(ast::DefId, bool /* is_ctor */),\n     DefStaticMethod(/* method */ ast::DefId, MethodProvenance),\n@@ -68,19 +68,19 @@ pub type DefMap = RefCell<NodeMap<Def>>;\n // within.\n pub type ExportMap = NodeMap<Vec<Export>>;\n \n-#[deriving(Copy)]\n+#[derive(Copy)]\n pub struct Export {\n     pub name: ast::Name,    // The name of the target.\n     pub def_id: ast::DefId, // The definition of the target.\n }\n \n-#[deriving(Clone, Copy, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n+#[derive(Clone, Copy, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n pub enum MethodProvenance {\n     FromTrait(ast::DefId),\n     FromImpl(ast::DefId),\n }\n \n-#[deriving(Clone, Copy, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n+#[derive(Clone, Copy, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n pub enum TyParamProvenance {\n     FromSelf(ast::DefId),\n     FromParam(ast::DefId),\n@@ -106,7 +106,7 @@ impl TyParamProvenance {\n     }\n }\n \n-#[deriving(Clone, Copy, Eq, PartialEq)]\n+#[derive(Clone, Copy, Eq, PartialEq)]\n pub enum TraitItemKind {\n     NonstaticMethodTraitItemKind,\n     StaticMethodTraitItemKind,"}, {"sha": "1075263e7512de7b34eb77aa71a339f01a24f5ef", "filename": "src/librustc/middle/effect.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc%2Fmiddle%2Feffect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc%2Fmiddle%2Feffect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Feffect.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -13,7 +13,7 @@\n use self::UnsafeContext::*;\n \n use middle::def;\n-use middle::ty::{mod, Ty};\n+use middle::ty::{self, Ty};\n use middle::ty::MethodCall;\n use util::ppaux;\n \n@@ -23,7 +23,7 @@ use syntax::codemap::Span;\n use syntax::visit;\n use syntax::visit::Visitor;\n \n-#[deriving(Copy, PartialEq)]\n+#[derive(Copy, PartialEq)]\n enum UnsafeContext {\n     SafeContext,\n     UnsafeFn,"}, {"sha": "5b786ec99224723bb254790390f25dd904ee096b", "filename": "src/librustc/middle/expr_use_visitor.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -23,7 +23,7 @@ use self::OverloadedCallType::*;\n use middle::{def, region, pat_util};\n use middle::mem_categorization as mc;\n use middle::mem_categorization::Typer;\n-use middle::ty::{mod};\n+use middle::ty::{self};\n use middle::ty::{MethodCall, MethodObject, MethodTraitObject};\n use middle::ty::{MethodOrigin, MethodParam, MethodTypeParam};\n use middle::ty::{MethodStatic, MethodStaticUnboxedClosure};\n@@ -95,7 +95,7 @@ pub trait Delegate<'tcx> {\n               mode: MutateMode);\n }\n \n-#[deriving(Copy, PartialEq, Show)]\n+#[derive(Copy, PartialEq, Show)]\n pub enum LoanCause {\n     ClosureCapture(Span),\n     AddrOf,\n@@ -107,28 +107,28 @@ pub enum LoanCause {\n     MatchDiscriminant\n }\n \n-#[deriving(Copy, PartialEq, Show)]\n+#[derive(Copy, PartialEq, Show)]\n pub enum ConsumeMode {\n     Copy,                // reference to x where x has a type that copies\n     Move(MoveReason),    // reference to x where x has a type that moves\n }\n \n-#[deriving(Copy, PartialEq, Show)]\n+#[derive(Copy, PartialEq, Show)]\n pub enum MoveReason {\n     DirectRefMove,\n     PatBindingMove,\n     CaptureMove,\n }\n \n-#[deriving(Copy, PartialEq, Show)]\n+#[derive(Copy, PartialEq, Show)]\n pub enum MatchMode {\n     NonBindingMatch,\n     BorrowingMatch,\n     CopyingMatch,\n     MovingMatch,\n }\n \n-#[deriving(PartialEq,Show)]\n+#[derive(PartialEq,Show)]\n enum TrackMatchMode<T> {\n     Unknown,\n     Definite(MatchMode),\n@@ -197,14 +197,14 @@ impl<T> TrackMatchMode<T> {\n     }\n }\n \n-#[deriving(Copy, PartialEq, Show)]\n+#[derive(Copy, PartialEq, Show)]\n pub enum MutateMode {\n     Init,\n     JustWrite,    // x = y\n     WriteAndRead, // x += y\n }\n \n-#[deriving(Copy)]\n+#[derive(Copy)]\n enum OverloadedCallType {\n     FnOverloadedCall,\n     FnMutOverloadedCall,"}, {"sha": "d42817bce9302a911584a95118aaf5905862bc69", "filename": "src/librustc/middle/fast_reject.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc%2Fmiddle%2Ffast_reject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc%2Fmiddle%2Ffast_reject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ffast_reject.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -8,13 +8,13 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use middle::ty::{mod, Ty};\n+use middle::ty::{self, Ty};\n use syntax::ast;\n \n use self::SimplifiedType::*;\n \n /// See `simplify_type\n-#[deriving(Clone, Copy, PartialEq, Eq, Hash)]\n+#[derive(Clone, Copy, PartialEq, Eq, Hash)]\n pub enum SimplifiedType {\n     BoolSimplifiedType,\n     CharSimplifiedType,"}, {"sha": "52b6af76081702d86109131490dffbe85bb69bdc", "filename": "src/librustc/middle/graph.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc%2Fmiddle%2Fgraph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc%2Fmiddle%2Fgraph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fgraph.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -61,18 +61,18 @@ impl<E: Show> Show for Edge<E> {\n     }\n }\n \n-#[deriving(Clone, Copy, PartialEq, Show)]\n+#[derive(Clone, Copy, PartialEq, Show)]\n pub struct NodeIndex(pub uint);\n #[allow(non_upper_case_globals)]\n pub const InvalidNodeIndex: NodeIndex = NodeIndex(uint::MAX);\n \n-#[deriving(Copy, PartialEq, Show)]\n+#[derive(Copy, PartialEq, Show)]\n pub struct EdgeIndex(pub uint);\n #[allow(non_upper_case_globals)]\n pub const InvalidEdgeIndex: EdgeIndex = EdgeIndex(uint::MAX);\n \n // Use a private field here to guarantee no more instances are created:\n-#[deriving(Copy, Show)]\n+#[derive(Copy, Show)]\n pub struct Direction { repr: uint }\n #[allow(non_upper_case_globals)]\n pub const Outgoing: Direction = Direction { repr: 0 };"}, {"sha": "f6f62e035900e0ea9ae06a4a3fbbfa962e539a10", "filename": "src/librustc/middle/infer/coercion.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc%2Fmiddle%2Finfer%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc%2Fmiddle%2Finfer%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Fcoercion.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -67,7 +67,7 @@ use super::sub::Sub;\n use middle::subst;\n use middle::ty::{AutoPtr, AutoDerefRef, AdjustDerefRef, AutoUnsize, AutoUnsafe};\n use middle::ty::{mt};\n-use middle::ty::{mod, Ty};\n+use middle::ty::{self, Ty};\n use util::ppaux;\n use util::ppaux::Repr;\n "}, {"sha": "29507058761154952096e908b058d2d19de6a4e2", "filename": "src/librustc/middle/infer/combine.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc%2Fmiddle%2Finfer%2Fcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc%2Fmiddle%2Finfer%2Fcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Fcombine.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -46,7 +46,7 @@ use middle::subst::{ErasedRegions, NonerasedRegions, Substs};\n use middle::ty::{FloatVar, FnSig, IntVar, TyVar};\n use middle::ty::{IntType, UintType};\n use middle::ty::{BuiltinBounds};\n-use middle::ty::{mod, Ty};\n+use middle::ty::{self, Ty};\n use middle::ty_fold;\n use middle::ty_fold::{TypeFoldable};\n use util::ppaux::Repr;\n@@ -447,7 +447,7 @@ impl<'tcx> Combineable<'tcx> for ty::FnSig<'tcx> {\n     }\n }\n \n-#[deriving(Clone)]\n+#[derive(Clone)]\n pub struct CombineFields<'a, 'tcx: 'a> {\n     pub infcx: &'a InferCtxt<'a, 'tcx>,\n     pub a_is_expected: bool,"}, {"sha": "f6ac746156700d6efef3c2b6568243be838626a1", "filename": "src/librustc/middle/infer/equate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc%2Fmiddle%2Finfer%2Fequate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc%2Fmiddle%2Finfer%2Fequate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Fequate.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n use middle::ty::{BuiltinBounds};\n-use middle::ty::{mod, Ty};\n+use middle::ty::{self, Ty};\n use middle::ty::TyVar;\n use middle::infer::combine::*;\n use middle::infer::{cres};"}, {"sha": "7ff585087f508eb3e12635a51f08b6f2fdc5c109", "filename": "src/librustc/middle/infer/error_reporting.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc%2Fmiddle%2Finfer%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc%2Fmiddle%2Finfer%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Ferror_reporting.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -74,7 +74,7 @@ use std::collections::HashSet;\n use middle::def;\n use middle::infer;\n use middle::subst;\n-use middle::ty::{mod, Ty};\n+use middle::ty::{self, Ty};\n use middle::ty::{Region, ReFree};\n use std::cell::{Cell, RefCell};\n use std::char::from_u32;"}, {"sha": "0ae4a3d851e7ffaf341760b7ddc561bf0ee671b7", "filename": "src/librustc/middle/infer/freshen.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc%2Fmiddle%2Finfer%2Ffreshen.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc%2Fmiddle%2Finfer%2Ffreshen.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Ffreshen.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -30,11 +30,11 @@\n //! variable only once, and it does so as soon as it can, so it is reasonable to ask what the type\n //! inferencer knows \"so far\".\n \n-use middle::ty::{mod, Ty};\n+use middle::ty::{self, Ty};\n use middle::ty_fold;\n use middle::ty_fold::TypeFoldable;\n use middle::ty_fold::TypeFolder;\n-use std::collections::hash_map::{mod, Entry};\n+use std::collections::hash_map::{self, Entry};\n \n use super::InferCtxt;\n use super::unify::InferCtxtMethodsForSimplyUnifiableTypes;"}, {"sha": "2683d00b858c17c248e53f9153ba61505c89c90c", "filename": "src/librustc/middle/infer/glb.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc%2Fmiddle%2Finfer%2Fglb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc%2Fmiddle%2Finfer%2Fglb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Fglb.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -18,7 +18,7 @@ use super::{cres, InferCtxt};\n use super::{TypeTrace, Subtype};\n \n use middle::ty::{BuiltinBounds};\n-use middle::ty::{mod, Ty};\n+use middle::ty::{self, Ty};\n use syntax::ast::{Many, Once, MutImmutable, MutMutable};\n use syntax::ast::{Onceness, Unsafety};\n use util::ppaux::mt_to_string;"}, {"sha": "bf0a9cfbea66dae686571b73e9b335329d613ca5", "filename": "src/librustc/middle/infer/higher_ranked/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc%2Fmiddle%2Finfer%2Fhigher_ranked%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc%2Fmiddle%2Finfer%2Fhigher_ranked%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Fhigher_ranked%2Fmod.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -14,8 +14,8 @@\n use super::{CombinedSnapshot, cres, InferCtxt, HigherRankedType, SkolemizationMap};\n use super::combine::{Combine, Combineable};\n \n-use middle::ty::{mod, Binder};\n-use middle::ty_fold::{mod, TypeFoldable};\n+use middle::ty::{self, Binder};\n+use middle::ty_fold::{self, TypeFoldable};\n use syntax::codemap::Span;\n use util::nodemap::{FnvHashMap, FnvHashSet};\n use util::ppaux::Repr;"}, {"sha": "121e5405f26dc79c0595c91f5c71018082a54705", "filename": "src/librustc/middle/infer/lattice.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc%2Fmiddle%2Finfer%2Flattice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc%2Fmiddle%2Finfer%2Flattice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Flattice.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -35,7 +35,7 @@ use super::glb::Glb;\n use super::lub::Lub;\n \n use middle::ty::{TyVar};\n-use middle::ty::{mod, Ty};\n+use middle::ty::{self, Ty};\n use util::ppaux::Repr;\n \n pub trait LatticeDir<'tcx> {"}, {"sha": "e4cab0f88990de8c942b2372ce17b567cf737d88", "filename": "src/librustc/middle/infer/lub.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc%2Fmiddle%2Finfer%2Flub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc%2Fmiddle%2Finfer%2Flub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Flub.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -18,7 +18,7 @@ use super::{cres, InferCtxt};\n use super::{TypeTrace, Subtype};\n \n use middle::ty::{BuiltinBounds};\n-use middle::ty::{mod, Ty};\n+use middle::ty::{self, Ty};\n use syntax::ast::{Many, Once};\n use syntax::ast::{Onceness, Unsafety};\n use syntax::ast::{MutMutable, MutImmutable};"}, {"sha": "e1401898f7a79582985ff1a1ccd667ca9785f4c2", "filename": "src/librustc/middle/infer/mod.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc%2Fmiddle%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc%2Fmiddle%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Fmod.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -25,7 +25,7 @@ use middle::subst;\n use middle::subst::Substs;\n use middle::ty::{TyVid, IntVid, FloatVid, RegionVid, UnconstrainedNumeric};\n use middle::ty::replace_late_bound_regions;\n-use middle::ty::{mod, Ty};\n+use middle::ty::{self, Ty};\n use middle::ty_fold::{TypeFolder, TypeFoldable};\n use std::cell::{RefCell};\n use std::rc::Rc;\n@@ -97,7 +97,7 @@ pub type SkolemizationMap = FnvHashMap<ty::BoundRegion,ty::Region>;\n /// Why did we require that the two types be related?\n ///\n /// See `error_reporting.rs` for more details\n-#[deriving(Clone, Copy, Show)]\n+#[derive(Clone, Copy, Show)]\n pub enum TypeOrigin {\n     // Not yet categorized in a better way\n     Misc(Span),\n@@ -135,7 +135,7 @@ pub enum TypeOrigin {\n }\n \n /// See `error_reporting.rs` for more details\n-#[deriving(Clone, Show)]\n+#[derive(Clone, Show)]\n pub enum ValuePairs<'tcx> {\n     Types(ty::expected_found<Ty<'tcx>>),\n     TraitRefs(ty::expected_found<Rc<ty::TraitRef<'tcx>>>),\n@@ -146,7 +146,7 @@ pub enum ValuePairs<'tcx> {\n /// encounter an error or subtyping constraint.\n ///\n /// See `error_reporting.rs` for more details.\n-#[deriving(Clone, Show)]\n+#[derive(Clone, Show)]\n pub struct TypeTrace<'tcx> {\n     origin: TypeOrigin,\n     values: ValuePairs<'tcx>,\n@@ -155,7 +155,7 @@ pub struct TypeTrace<'tcx> {\n /// The origin of a `r1 <= r2` constraint.\n ///\n /// See `error_reporting.rs` for more details\n-#[deriving(Clone, Show)]\n+#[derive(Clone, Show)]\n pub enum SubregionOrigin<'tcx> {\n     // Arose from a subtyping relation\n     Subtype(TypeTrace<'tcx>),\n@@ -224,7 +224,7 @@ pub enum SubregionOrigin<'tcx> {\n }\n \n /// Times when we replace late-bound regions with variables:\n-#[deriving(Clone, Copy, Show)]\n+#[derive(Clone, Copy, Show)]\n pub enum LateBoundRegionConversionTime {\n     /// when a fn is called\n     FnCall,\n@@ -239,7 +239,7 @@ pub enum LateBoundRegionConversionTime {\n /// Reasons to create a region inference variable\n ///\n /// See `error_reporting.rs` for more details\n-#[deriving(Clone, Show)]\n+#[derive(Clone, Show)]\n pub enum RegionVariableOrigin<'tcx> {\n     // Region variables created for ill-categorized reasons,\n     // mostly indicates places in need of refactoring\n@@ -272,7 +272,7 @@ pub enum RegionVariableOrigin<'tcx> {\n     BoundRegionInCoherence(ast::Name),\n }\n \n-#[deriving(Copy, Show)]\n+#[derive(Copy, Show)]\n pub enum fixup_err {\n     unresolved_int_ty(IntVid),\n     unresolved_float_ty(FloatVid),"}, {"sha": "7bc4bf1f4fe28db62b3cab5b288d7438b2df48ae", "filename": "src/librustc/middle/infer/region_inference/graphviz.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc%2Fmiddle%2Finfer%2Fregion_inference%2Fgraphviz.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc%2Fmiddle%2Finfer%2Fregion_inference%2Fgraphviz.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Fregion_inference%2Fgraphviz.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -27,7 +27,7 @@ use util::nodemap::{FnvHashMap, FnvHashSet};\n use util::ppaux::Repr;\n \n use std::collections::hash_map::Entry::Vacant;\n-use std::io::{mod, File};\n+use std::io::{self, File};\n use std::os;\n use std::sync::atomic;\n use syntax::ast;\n@@ -121,7 +121,7 @@ struct ConstraintGraph<'a, 'tcx: 'a> {\n     node_ids: FnvHashMap<Node, uint>,\n }\n \n-#[deriving(Clone, Hash, PartialEq, Eq, Show)]\n+#[derive(Clone, Hash, PartialEq, Eq, Show)]\n enum Node {\n     RegionVid(ty::RegionVid),\n     Region(ty::Region),"}, {"sha": "f0ee63c08e8b60a86f1cd6a7c5a354d37536133f", "filename": "src/librustc/middle/infer/region_inference/mod.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc%2Fmiddle%2Finfer%2Fregion_inference%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc%2Fmiddle%2Finfer%2Fregion_inference%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Fregion_inference%2Fmod.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -33,7 +33,7 @@ use util::nodemap::{FnvHashMap, FnvHashSet};\n use util::ppaux::Repr;\n \n use std::cell::{Cell, RefCell};\n-use std::cmp::Ordering::{mod, Less, Greater, Equal};\n+use std::cmp::Ordering::{self, Less, Greater, Equal};\n use std::iter::repeat;\n use std::u32;\n use syntax::ast;\n@@ -42,7 +42,7 @@ mod doc;\n mod graphviz;\n \n // A constraint that influences the inference process.\n-#[deriving(Clone, Copy, PartialEq, Eq, Hash, Show)]\n+#[derive(Clone, Copy, PartialEq, Eq, Hash, Show)]\n pub enum Constraint {\n     // One region variable is subregion of another\n     ConstrainVarSubVar(RegionVid, RegionVid),\n@@ -69,13 +69,13 @@ pub enum Verify<'tcx> {\n     VerifyParamBound(ty::ParamTy, SubregionOrigin<'tcx>, Region, Vec<Region>),\n }\n \n-#[deriving(Copy, PartialEq, Eq, Hash)]\n+#[derive(Copy, PartialEq, Eq, Hash)]\n pub struct TwoRegions {\n     a: Region,\n     b: Region,\n }\n \n-#[deriving(Copy, PartialEq)]\n+#[derive(Copy, PartialEq)]\n pub enum UndoLogEntry {\n     OpenSnapshot,\n     CommitedSnapshot,\n@@ -86,12 +86,12 @@ pub enum UndoLogEntry {\n     AddCombination(CombineMapType, TwoRegions)\n }\n \n-#[deriving(Copy, PartialEq)]\n+#[derive(Copy, PartialEq)]\n pub enum CombineMapType {\n     Lub, Glb\n }\n \n-#[deriving(Clone, Show)]\n+#[derive(Clone, Show)]\n pub enum RegionResolutionError<'tcx> {\n     /// `ConcreteFailure(o, a, b)`:\n     ///\n@@ -143,7 +143,7 @@ pub enum RegionResolutionError<'tcx> {\n /// ```\n /// would report an error because we expect 'a and 'b to match, and so we group\n /// 'a and 'b together inside a SameRegions struct\n-#[deriving(Clone, Show)]\n+#[derive(Clone, Show)]\n pub struct SameRegions {\n     pub scope_id: ast::NodeId,\n     pub regions: Vec<BoundRegion>\n@@ -217,7 +217,7 @@ pub struct RegionVarBindings<'a, 'tcx: 'a> {\n     values: RefCell<Option<Vec<VarValue>>>,\n }\n \n-#[deriving(Show)]\n+#[derive(Show)]\n #[allow(missing_copy_implementations)]\n pub struct RegionSnapshot {\n     length: uint,\n@@ -937,10 +937,10 @@ impl<'a, 'tcx> RegionVarBindings<'a, 'tcx> {\n \n // ______________________________________________________________________\n \n-#[deriving(Copy, PartialEq, Show)]\n+#[derive(Copy, PartialEq, Show)]\n enum Classification { Expanding, Contracting }\n \n-#[deriving(Copy)]\n+#[derive(Copy)]\n pub enum VarValue { NoValue, Value(Region), ErrorValue }\n \n struct VarData {"}, {"sha": "3ed866d4aba8f6a59e3cf21f272a228f405b8b10", "filename": "src/librustc/middle/infer/resolve.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc%2Fmiddle%2Finfer%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc%2Fmiddle%2Finfer%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Fresolve.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -9,8 +9,8 @@\n // except according to those terms.\n \n use super::{InferCtxt, fixup_err, fres, unresolved_ty, unresolved_int_ty, unresolved_float_ty};\n-use middle::ty::{mod, Ty};\n-use middle::ty_fold::{mod, TypeFoldable};\n+use middle::ty::{self, Ty};\n+use middle::ty_fold::{self, TypeFoldable};\n use util::ppaux::Repr;\n \n ///////////////////////////////////////////////////////////////////////////"}, {"sha": "4f8364fa44a95cf669ac26510ff7958f8105011f", "filename": "src/librustc/middle/infer/sub.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc%2Fmiddle%2Finfer%2Fsub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc%2Fmiddle%2Finfer%2Fsub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Fsub.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -19,7 +19,7 @@ use super::{TypeTrace, Subtype};\n use super::type_variable::{SubtypeOf, SupertypeOf};\n \n use middle::ty::{BuiltinBounds};\n-use middle::ty::{mod, Ty};\n+use middle::ty::{self, Ty};\n use middle::ty::TyVar;\n use util::ppaux::{Repr};\n "}, {"sha": "2aacc863f54c9ea1780193f4d1fc96f60dd0bb6d", "filename": "src/librustc/middle/infer/type_variable.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc%2Fmiddle%2Finfer%2Ftype_variable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc%2Fmiddle%2Finfer%2Ftype_variable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Ftype_variable.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -12,7 +12,7 @@ pub use self::RelationDir::*;\n use self::TypeVariableValue::*;\n use self::UndoEntry::*;\n \n-use middle::ty::{mod, Ty};\n+use middle::ty::{self, Ty};\n use std::cmp::min;\n use std::mem;\n use std::u32;\n@@ -46,7 +46,7 @@ struct Delegate;\n \n type Relation = (RelationDir, ty::TyVid);\n \n-#[deriving(Copy, PartialEq, Show)]\n+#[derive(Copy, PartialEq, Show)]\n pub enum RelationDir {\n     SubtypeOf, SupertypeOf, EqTo\n }"}, {"sha": "73da96445934c53e51da700b17e5483b47a2cc8b", "filename": "src/librustc/middle/infer/unify.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc%2Fmiddle%2Finfer%2Funify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc%2Fmiddle%2Finfer%2Funify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Funify.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -13,7 +13,7 @@ pub use self::VarValue::*;\n use std::kinds::marker;\n \n use middle::ty::{expected_found, IntVarValue};\n-use middle::ty::{mod, Ty};\n+use middle::ty::{self, Ty};\n use middle::infer::{uok, ures};\n use middle::infer::InferCtxt;\n use std::cell::RefCell;\n@@ -62,7 +62,7 @@ pub trait UnifyValue<'tcx> : Clone + Repr<'tcx> + PartialEq {\n /// to keep the DAG relatively balanced, which helps keep the running\n /// time of the algorithm under control. For more information, see\n /// <http://en.wikipedia.org/wiki/Disjoint-set_data_structure>.\n-#[deriving(PartialEq,Clone)]\n+#[derive(PartialEq,Clone)]\n pub enum VarValue<K,V> {\n     Redirect(K),\n     Root(V, uint),\n@@ -90,7 +90,7 @@ pub struct Node<K,V> {\n     pub rank: uint,\n }\n \n-#[deriving(Copy)]\n+#[derive(Copy)]\n pub struct Delegate;\n \n // We can't use V:LatticeValue, much as I would like to,"}, {"sha": "e3763689ef41a46f3995257b906979a4f2ef7ecd", "filename": "src/librustc/middle/intrinsicck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc%2Fmiddle%2Fintrinsicck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc%2Fmiddle%2Fintrinsicck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fintrinsicck.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -12,7 +12,7 @@ use metadata::csearch;\n use middle::def::DefFn;\n use middle::subst::{Subst, Substs, EnumeratedItems};\n use middle::ty::{TransmuteRestriction, ctxt, ty_bare_fn};\n-use middle::ty::{mod, Ty};\n+use middle::ty::{self, Ty};\n use util::ppaux::Repr;\n \n use syntax::abi::RustIntrinsic;"}, {"sha": "bbb11b9f93bbdde2f3e805ed32210c8dcc021b7f", "filename": "src/librustc/middle/lang_items.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flang_items.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -46,7 +46,7 @@ macro_rules! lets_do_this {\n         $( $variant:ident, $name:expr, $method:ident; )*\n     ) => {\n \n-#[deriving(Copy, FromPrimitive, PartialEq, Eq, Hash)]\n+#[derive(Copy, FromPrimitive, PartialEq, Eq, Hash)]\n pub enum LangItem {\n     $($variant),*\n }"}, {"sha": "75d5b4fd7f932dcefec592aeb3c832b87e696357", "filename": "src/librustc/middle/liveness.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fliveness.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -120,13 +120,13 @@ use util::nodemap::NodeMap;\n use std::{fmt, io, uint};\n use std::rc::Rc;\n use std::iter::repeat;\n-use syntax::ast::{mod, NodeId, Expr};\n+use syntax::ast::{self, NodeId, Expr};\n use syntax::codemap::{BytePos, original_sp, Span};\n-use syntax::parse::token::{mod, special_idents};\n+use syntax::parse::token::{self, special_idents};\n use syntax::print::pprust::{expr_to_string, block_to_string};\n use syntax::ptr::P;\n use syntax::ast_util;\n-use syntax::visit::{mod, Visitor, FnKind};\n+use syntax::visit::{self, Visitor, FnKind};\n \n /// For use with `propagate_through_loop`.\n enum LoopKind<'a> {\n@@ -138,10 +138,10 @@ enum LoopKind<'a> {\n     ForLoop(&'a ast::Pat),\n }\n \n-#[deriving(Copy, PartialEq)]\n+#[derive(Copy, PartialEq)]\n struct Variable(uint);\n \n-#[deriving(Copy, PartialEq)]\n+#[derive(Copy, PartialEq)]\n struct LiveNode(uint);\n \n impl Variable {\n@@ -158,7 +158,7 @@ impl Clone for LiveNode {\n     }\n }\n \n-#[deriving(Copy, PartialEq, Show)]\n+#[derive(Copy, PartialEq, Show)]\n enum LiveNodeKind {\n     FreeVarNode(Span),\n     ExprNode(Span),\n@@ -244,13 +244,13 @@ struct CaptureInfo {\n     var_nid: NodeId\n }\n \n-#[deriving(Copy, Show)]\n+#[derive(Copy, Show)]\n struct LocalInfo {\n     id: NodeId,\n     ident: ast::Ident\n }\n \n-#[deriving(Copy, Show)]\n+#[derive(Copy, Show)]\n enum VarKind {\n     Arg(NodeId, ast::Ident),\n     Local(LocalInfo),\n@@ -529,7 +529,7 @@ fn visit_expr(ir: &mut IrMaps, expr: &Expr) {\n // Actually we compute just a bit more than just liveness, but we use\n // the same basic propagation framework in all cases.\n \n-#[deriving(Clone, Copy)]\n+#[derive(Clone, Copy)]\n struct Users {\n     reader: LiveNode,\n     writer: LiveNode,\n@@ -544,7 +544,7 @@ fn invalid_users() -> Users {\n     }\n }\n \n-#[deriving(Copy)]\n+#[derive(Copy)]\n struct Specials {\n     exit_ln: LiveNode,\n     fallthrough_ln: LiveNode,"}, {"sha": "8325cebf1ed75e80403aeb4339244855232b3947", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -73,7 +73,7 @@ pub use self::categorization::*;\n \n use middle::def;\n use middle::region;\n-use middle::ty::{mod, Ty};\n+use middle::ty::{self, Ty};\n use util::nodemap::{NodeMap};\n use util::ppaux::{Repr};\n \n@@ -87,7 +87,7 @@ use syntax::parse::token;\n use std::cell::RefCell;\n use std::rc::Rc;\n \n-#[deriving(Clone, PartialEq, Show)]\n+#[derive(Clone, PartialEq, Show)]\n pub enum categorization<'tcx> {\n     cat_rvalue(ty::Region),                    // temporary val, argument is its scope\n     cat_static_item,\n@@ -101,7 +101,7 @@ pub enum categorization<'tcx> {\n }\n \n // Represents any kind of upvar\n-#[deriving(Clone, Copy, PartialEq, Show)]\n+#[derive(Clone, Copy, PartialEq, Show)]\n pub struct Upvar {\n     pub id: ty::UpvarId,\n     // Unboxed closure kinds are used even for old-style closures for simplicity\n@@ -111,7 +111,7 @@ pub struct Upvar {\n }\n \n // different kinds of pointers:\n-#[deriving(Clone, Copy, PartialEq, Eq, Hash, Show)]\n+#[derive(Clone, Copy, PartialEq, Eq, Hash, Show)]\n pub enum PointerKind {\n     Unique,\n     BorrowedPtr(ty::BorrowKind, ty::Region),\n@@ -121,25 +121,25 @@ pub enum PointerKind {\n \n // We use the term \"interior\" to mean \"something reachable from the\n // base without a pointer dereference\", e.g. a field\n-#[deriving(Clone, Copy, PartialEq, Eq, Hash, Show)]\n+#[derive(Clone, Copy, PartialEq, Eq, Hash, Show)]\n pub enum InteriorKind {\n     InteriorField(FieldName),\n     InteriorElement(ElementKind),\n }\n \n-#[deriving(Clone, Copy, PartialEq, Eq, Hash, Show)]\n+#[derive(Clone, Copy, PartialEq, Eq, Hash, Show)]\n pub enum FieldName {\n     NamedField(ast::Name),\n     PositionalField(uint)\n }\n \n-#[deriving(Clone, Copy, PartialEq, Eq, Hash, Show)]\n+#[derive(Clone, Copy, PartialEq, Eq, Hash, Show)]\n pub enum ElementKind {\n     VecElement,\n     OtherElement,\n }\n \n-#[deriving(Clone, Copy, PartialEq, Eq, Hash, Show)]\n+#[derive(Clone, Copy, PartialEq, Eq, Hash, Show)]\n pub enum MutabilityCategory {\n     McImmutable, // Immutable.\n     McDeclared,  // Directly declared as mutable.\n@@ -151,7 +151,7 @@ pub enum MutabilityCategory {\n // Upvar categorization can generate a variable number of nested\n // derefs.  The note allows detecting them without deep pattern\n // matching on the categorization.\n-#[deriving(Clone, Copy, PartialEq, Show)]\n+#[derive(Clone, Copy, PartialEq, Show)]\n pub enum Note {\n     NoteClosureEnv(ty::UpvarId), // Deref through closure env\n     NoteUpvarRef(ty::UpvarId),   // Deref through by-ref upvar\n@@ -172,7 +172,7 @@ pub enum Note {\n // dereference, but its type is the type *before* the dereference\n // (`@T`). So use `cmt.ty` to find the type of the value in a consistent\n // fashion. For more details, see the method `cat_pattern`\n-#[deriving(Clone, PartialEq, Show)]\n+#[derive(Clone, PartialEq, Show)]\n pub struct cmt_<'tcx> {\n     pub id: ast::NodeId,           // id of expr/pat producing this value\n     pub span: Span,                // span of same expr/pat\n@@ -186,7 +186,7 @@ pub type cmt<'tcx> = Rc<cmt_<'tcx>>;\n \n // We pun on *T to mean both actual deref of a ptr as well\n // as accessing of components:\n-#[deriving(Copy)]\n+#[derive(Copy)]\n pub enum deref_kind {\n     deref_ptr(PointerKind),\n     deref_interior(InteriorKind),\n@@ -1296,13 +1296,13 @@ impl<'t,'tcx,TYPER:Typer<'tcx>> MemCategorizationContext<'t,TYPER> {\n     }\n }\n \n-#[deriving(Copy)]\n+#[derive(Copy)]\n pub enum InteriorSafety {\n     InteriorUnsafe,\n     InteriorSafe\n }\n \n-#[deriving(Copy)]\n+#[derive(Copy)]\n pub enum AliasableReason {\n     AliasableBorrowed,\n     AliasableClosure(ast::NodeId), // Aliasable due to capture Fn closure env"}, {"sha": "e6665699b7b7bd7ca06a68dba0413ce469e3fba9", "filename": "src/librustc/middle/privacy.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc%2Fmiddle%2Fprivacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc%2Fmiddle%2Fprivacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fprivacy.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -21,7 +21,7 @@ use std::mem::replace;\n \n use metadata::csearch;\n use middle::def;\n-use middle::ty::{mod, Ty};\n+use middle::ty::{self, Ty};\n use middle::ty::{MethodCall, MethodMap, MethodOrigin, MethodParam, MethodTypeParam};\n use middle::ty::{MethodStatic, MethodStaticUnboxedClosure, MethodObject, MethodTraitObject};\n use util::nodemap::{DefIdSet, NodeMap, NodeSet};\n@@ -30,7 +30,7 @@ use syntax::{ast, ast_map};\n use syntax::ast_util::{is_local, local_def, PostExpansionMethod};\n use syntax::codemap::Span;\n use syntax::parse::token;\n-use syntax::visit::{mod, Visitor};\n+use syntax::visit::{self, Visitor};\n \n type Context<'a, 'tcx> = (&'a MethodMap<'tcx>, &'a def::ExportMap);\n \n@@ -49,7 +49,7 @@ pub type PublicItems = NodeSet;\n // FIXME: dox\n pub type LastPrivateMap = NodeMap<LastPrivate>;\n \n-#[deriving(Copy, Show)]\n+#[derive(Copy, Show)]\n pub enum LastPrivate {\n     LastMod(PrivateDep),\n     // `use` directives (imports) can refer to two separate definitions in the\n@@ -63,14 +63,14 @@ pub enum LastPrivate {\n                type_used: ImportUse},\n }\n \n-#[deriving(Copy, Show)]\n+#[derive(Copy, Show)]\n pub enum PrivateDep {\n     AllPublic,\n     DependsOn(ast::DefId),\n }\n \n // How an import is used.\n-#[deriving(Copy, PartialEq, Show)]\n+#[derive(Copy, PartialEq, Show)]\n pub enum ImportUse {\n     Unused,       // The import is not used.\n     Used,         // The import is used."}, {"sha": "68e257bc0c5ec3079aacf457fa253bbad9e62024", "filename": "src/librustc/middle/region.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc%2Fmiddle%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc%2Fmiddle%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fregion.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -17,7 +17,7 @@\n //! `middle/typeck/infer/region_inference.rs`\n \n use session::Session;\n-use middle::ty::{mod, Ty, FreeRegion};\n+use middle::ty::{self, Ty, FreeRegion};\n use util::nodemap::{FnvHashMap, FnvHashSet, NodeMap};\n use util::common::can_reach;\n \n@@ -36,7 +36,7 @@ use syntax::visit::{Visitor, FnKind};\n /// placate the same deriving in `ty::FreeRegion`, but we may want to\n /// actually attach a more meaningful ordering to scopes than the one\n /// generated via deriving here.\n-#[deriving(Clone, PartialEq, PartialOrd, Eq, Ord, Hash, RustcEncodable,\n+#[derive(Clone, PartialEq, PartialOrd, Eq, Ord, Hash, RustcEncodable,\n            RustcDecodable, Show, Copy)]\n pub enum CodeExtent {\n     Misc(ast::NodeId)\n@@ -116,7 +116,7 @@ pub struct RegionMaps {\n     terminating_scopes: RefCell<FnvHashSet<CodeExtent>>,\n }\n \n-#[deriving(Copy)]\n+#[derive(Copy)]\n pub struct Context {\n     var_parent: Option<ast::NodeId>,\n "}, {"sha": "5eb033a01bd5862bd361b36b67d14201a42d38ff", "filename": "src/librustc/middle/resolve_lifetime.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -19,7 +19,7 @@ pub use self::DefRegion::*;\n use self::ScopeChain::*;\n \n use session::Session;\n-use middle::def::{mod, DefMap};\n+use middle::def::{self, DefMap};\n use middle::region;\n use middle::subst;\n use middle::ty;\n@@ -33,7 +33,7 @@ use syntax::visit;\n use syntax::visit::Visitor;\n use util::nodemap::NodeMap;\n \n-#[deriving(Clone, Copy, PartialEq, Eq, Hash, RustcEncodable, RustcDecodable, Show)]\n+#[derive(Clone, Copy, PartialEq, Eq, Hash, RustcEncodable, RustcDecodable, Show)]\n pub enum DefRegion {\n     DefStaticRegion,\n     DefEarlyBoundRegion(/* space */ subst::ParamSpace,"}, {"sha": "cd29ce28ac174f6aa15563fea3fe657694b74747", "filename": "src/librustc/middle/subst.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc%2Fmiddle%2Fsubst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc%2Fmiddle%2Fsubst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fsubst.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -13,8 +13,8 @@\n pub use self::ParamSpace::*;\n pub use self::RegionSubsts::*;\n \n-use middle::ty::{mod, Ty};\n-use middle::ty_fold::{mod, TypeFoldable, TypeFolder};\n+use middle::ty::{self, Ty};\n+use middle::ty_fold::{self, TypeFoldable, TypeFolder};\n use util::ppaux::Repr;\n \n use std::fmt;\n@@ -28,7 +28,7 @@ use syntax::codemap::{Span, DUMMY_SP};\n /// identify each in-scope parameter by an *index* and a *parameter\n /// space* (which indices where the parameter is defined; see\n /// `ParamSpace`).\n-#[deriving(Clone, PartialEq, Eq, Hash, Show)]\n+#[derive(Clone, PartialEq, Eq, Hash, Show)]\n pub struct Substs<'tcx> {\n     pub types: VecPerParamSpace<Ty<'tcx>>,\n     pub regions: RegionSubsts,\n@@ -37,7 +37,7 @@ pub struct Substs<'tcx> {\n /// Represents the values to use when substituting lifetime parameters.\n /// If the value is `ErasedRegions`, then this subst is occurring during\n /// trans, and all region parameters will be replaced with `ty::ReStatic`.\n-#[deriving(Clone, PartialEq, Eq, Hash, Show)]\n+#[derive(Clone, PartialEq, Eq, Hash, Show)]\n pub enum RegionSubsts {\n     ErasedRegions,\n     NonerasedRegions(VecPerParamSpace<ty::Region>)\n@@ -179,7 +179,7 @@ impl RegionSubsts {\n ///////////////////////////////////////////////////////////////////////////\n // ParamSpace\n \n-#[deriving(PartialOrd, Ord, PartialEq, Eq, Copy,\n+#[derive(PartialOrd, Ord, PartialEq, Eq, Copy,\n            Clone, Hash, RustcEncodable, RustcDecodable, Show)]\n pub enum ParamSpace {\n     TypeSpace,  // Type parameters attached to a type definition, trait, or impl\n@@ -213,7 +213,7 @@ impl ParamSpace {\n /// Vector of things sorted by param space. Used to keep\n /// the set of things declared on the type, self, or method\n /// distinct.\n-#[deriving(PartialEq, Eq, Clone, Hash, RustcEncodable, RustcDecodable)]\n+#[derive(PartialEq, Eq, Clone, Hash, RustcEncodable, RustcDecodable)]\n pub struct VecPerParamSpace<T> {\n     // This was originally represented as a tuple with one Vec<T> for\n     // each variant of ParamSpace, and that remains the abstraction\n@@ -468,7 +468,7 @@ impl<T> VecPerParamSpace<T> {\n     }\n }\n \n-#[deriving(Clone)]\n+#[derive(Clone)]\n pub struct EnumeratedItems<'a,T:'a> {\n     vec: &'a VecPerParamSpace<T>,\n     space_index: uint,"}, {"sha": "e6805cddae05aab1c9a26432c422ada8424a194d", "filename": "src/librustc/middle/traits/coherence.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc%2Fmiddle%2Ftraits%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc%2Fmiddle%2Ftraits%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Fcoherence.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -15,7 +15,7 @@ use super::{Obligation, ObligationCause};\n use super::util;\n \n use middle::subst::Subst;\n-use middle::ty::{mod, Ty};\n+use middle::ty::{self, Ty};\n use middle::infer::InferCtxt;\n use std::collections::HashSet;\n use std::rc::Rc;"}, {"sha": "59322fcc632e8296e99b07853cb94553ccf07c9d", "filename": "src/librustc/middle/traits/error_reporting.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc%2Fmiddle%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc%2Fmiddle%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Ferror_reporting.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -19,7 +19,7 @@ use super::{\n };\n \n use middle::infer::InferCtxt;\n-use middle::ty::{mod, AsPredicate, ReferencesError, ToPolyTraitRef};\n+use middle::ty::{self, AsPredicate, ReferencesError, ToPolyTraitRef};\n use syntax::codemap::Span;\n use util::ppaux::{Repr, UserString};\n "}, {"sha": "8bb7012fb075cbaed45fd423712f064e5de2dbdd", "filename": "src/librustc/middle/traits/fulfill.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc%2Fmiddle%2Ftraits%2Ffulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc%2Fmiddle%2Ftraits%2Ffulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Ffulfill.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -10,7 +10,7 @@\n \n use middle::infer::{InferCtxt};\n use middle::mem_categorization::Typer;\n-use middle::ty::{mod, RegionEscape, Ty};\n+use middle::ty::{self, RegionEscape, Ty};\n use std::collections::HashSet;\n use std::collections::hash_map::Entry::{Occupied, Vacant};\n use std::default::Default;"}, {"sha": "ce926fd8d10de3b1a6be0e54d0f4b2f611aa0867", "filename": "src/librustc/middle/traits/mod.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc%2Fmiddle%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc%2Fmiddle%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Fmod.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -17,7 +17,7 @@ pub use self::ObligationCauseCode::*;\n \n use middle::mem_categorization::Typer;\n use middle::subst;\n-use middle::ty::{mod, Ty};\n+use middle::ty::{self, Ty};\n use middle::infer::InferCtxt;\n use std::slice::Iter;\n use std::rc::Rc;\n@@ -63,7 +63,7 @@ mod util;\n /// either identifying an `impl` (e.g., `impl Eq for int`) that\n /// provides the required vtable, or else finding a bound that is in\n /// scope. The eventual result is usually a `Selection` (defined below).\n-#[deriving(Clone)]\n+#[derive(Clone)]\n pub struct Obligation<'tcx, T> {\n     pub cause: ObligationCause<'tcx>,\n     pub recursion_depth: uint,\n@@ -74,7 +74,7 @@ pub type PredicateObligation<'tcx> = Obligation<'tcx, ty::Predicate<'tcx>>;\n pub type TraitObligation<'tcx> = Obligation<'tcx, ty::PolyTraitPredicate<'tcx>>;\n \n /// Why did we incur this obligation? Used for error reporting.\n-#[deriving(Clone)]\n+#[derive(Clone)]\n pub struct ObligationCause<'tcx> {\n     pub span: Span,\n \n@@ -89,7 +89,7 @@ pub struct ObligationCause<'tcx> {\n     pub code: ObligationCauseCode<'tcx>\n }\n \n-#[deriving(Clone)]\n+#[derive(Clone)]\n pub enum ObligationCauseCode<'tcx> {\n     /// Not well classified or should be obvious from span.\n     MiscObligation,\n@@ -126,7 +126,7 @@ pub enum ObligationCauseCode<'tcx> {\n     ImplDerivedObligation(DerivedObligationCause<'tcx>),\n }\n \n-#[deriving(Clone)]\n+#[derive(Clone)]\n pub struct DerivedObligationCause<'tcx> {\n     /// The trait reference of the parent obligation that led to the\n     /// current obligation. Note that only trait obligations lead to\n@@ -144,7 +144,7 @@ pub type TraitObligations<'tcx> = subst::VecPerParamSpace<TraitObligation<'tcx>>\n \n pub type Selection<'tcx> = Vtable<'tcx, PredicateObligation<'tcx>>;\n \n-#[deriving(Clone,Show)]\n+#[derive(Clone,Show)]\n pub enum SelectionError<'tcx> {\n     Unimplemented,\n     Overflow,\n@@ -158,7 +158,7 @@ pub struct FulfillmentError<'tcx> {\n     pub code: FulfillmentErrorCode<'tcx>\n }\n \n-#[deriving(Clone)]\n+#[derive(Clone)]\n pub enum FulfillmentErrorCode<'tcx> {\n     CodeSelectionError(SelectionError<'tcx>),\n     CodeProjectionError(MismatchedProjectionTypes<'tcx>),\n@@ -212,7 +212,7 @@ pub type SelectionResult<'tcx, T> = Result<Option<T>, SelectionError<'tcx>>;\n /// ### The type parameter `N`\n ///\n /// See explanation on `VtableImplData`.\n-#[deriving(Show,Clone)]\n+#[derive(Show,Clone)]\n pub enum Vtable<'tcx, N> {\n     /// Vtable identifying a particular impl.\n     VtableImpl(VtableImplData<'tcx, N>),\n@@ -247,21 +247,21 @@ pub enum Vtable<'tcx, N> {\n /// is `Obligation`, as one might expect. During trans, however, this\n /// is `()`, because trans only requires a shallow resolution of an\n /// impl, and nested obligations are satisfied later.\n-#[deriving(Clone)]\n+#[derive(Clone)]\n pub struct VtableImplData<'tcx, N> {\n     pub impl_def_id: ast::DefId,\n     pub substs: subst::Substs<'tcx>,\n     pub nested: subst::VecPerParamSpace<N>\n }\n \n-#[deriving(Show,Clone)]\n+#[derive(Show,Clone)]\n pub struct VtableBuiltinData<N> {\n     pub nested: subst::VecPerParamSpace<N>\n }\n \n /// A vtable for some object-safe trait `Foo` automatically derived\n /// for the object type `Foo`.\n-#[deriving(PartialEq,Eq,Clone)]\n+#[derive(PartialEq,Eq,Clone)]\n pub struct VtableObjectData<'tcx> {\n     pub object_ty: Ty<'tcx>,\n }"}, {"sha": "8880cb7ce733f7ff3124df4c1e5342311ecdb667", "filename": "src/librustc/middle/traits/object_safety.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc%2Fmiddle%2Ftraits%2Fobject_safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc%2Fmiddle%2Ftraits%2Fobject_safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Fobject_safety.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -20,9 +20,9 @@\n use super::supertraits;\n use super::elaborate_predicates;\n \n-use middle::subst::{mod, SelfSpace};\n+use middle::subst::{self, SelfSpace};\n use middle::traits;\n-use middle::ty::{mod, Ty};\n+use middle::ty::{self, Ty};\n use std::rc::Rc;\n use syntax::ast;\n use util::ppaux::Repr;\n@@ -36,7 +36,7 @@ pub enum ObjectSafetyViolation<'tcx> {\n }\n \n /// Reasons a method might not be object-safe.\n-#[deriving(Copy,Clone,Show)]\n+#[derive(Copy,Clone,Show)]\n pub enum MethodViolationCode {\n     /// e.g., `fn(self)`\n     ByValueSelf,"}, {"sha": "d5b41d238062890f21d32306e03e2036b4868d8d", "filename": "src/librustc/middle/traits/project.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc%2Fmiddle%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc%2Fmiddle%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Fproject.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -21,9 +21,9 @@ use super::VtableImplData;\n \n use middle::infer;\n use middle::subst::Subst;\n-use middle::ty::{mod, AsPredicate, ReferencesError, RegionEscape,\n+use middle::ty::{self, AsPredicate, ReferencesError, RegionEscape,\n                  HasProjectionTypes, ToPolyTraitRef, Ty};\n-use middle::ty_fold::{mod, TypeFoldable, TypeFolder};\n+use middle::ty_fold::{self, TypeFoldable, TypeFolder};\n use std::rc::Rc;\n use util::ppaux::Repr;\n \n@@ -45,7 +45,7 @@ pub enum ProjectionTyError<'tcx> {\n     TraitSelectionError(SelectionError<'tcx>),\n }\n \n-#[deriving(Clone)]\n+#[derive(Clone)]\n pub struct MismatchedProjectionTypes<'tcx> {\n     pub err: ty::type_err<'tcx>\n }"}, {"sha": "f499cf61301aa9be5d96fc5570e7434aff99b44e", "filename": "src/librustc/middle/traits/select.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -33,7 +33,7 @@ use super::{util};\n use middle::fast_reject;\n use middle::mem_categorization::Typer;\n use middle::subst::{Subst, Substs, TypeSpace, VecPerParamSpace};\n-use middle::ty::{mod, AsPredicate, RegionEscape, ToPolyTraitRef, Ty};\n+use middle::ty::{self, AsPredicate, RegionEscape, ToPolyTraitRef, Ty};\n use middle::infer;\n use middle::infer::{InferCtxt, TypeFreshener};\n use middle::ty_fold::TypeFoldable;\n@@ -83,7 +83,7 @@ struct TraitObligationStack<'prev, 'tcx: 'prev> {\n     previous: Option<&'prev TraitObligationStack<'prev, 'tcx>>\n }\n \n-#[deriving(Clone)]\n+#[derive(Clone)]\n pub struct SelectionCache<'tcx> {\n     hashmap: RefCell<HashMap<Rc<ty::TraitRef<'tcx>>,\n                              SelectionResult<'tcx, SelectionCandidate<'tcx>>>>,\n@@ -95,7 +95,7 @@ pub enum MethodMatchResult {\n     MethodDidNotMatch,\n }\n \n-#[deriving(Copy, Show)]\n+#[derive(Copy, Show)]\n pub enum MethodMatchedData {\n     // In the case of a precise match, we don't really need to store\n     // how the match was found. So don't.\n@@ -130,7 +130,7 @@ pub enum MethodMatchedData {\n /// matching where clause. Part of the reason for this is that where\n /// clauses can give additional information (like, the types of output\n /// parameters) that would have to be inferred from the impl.\n-#[deriving(PartialEq,Eq,Show,Clone)]\n+#[derive(PartialEq,Eq,Show,Clone)]\n enum SelectionCandidate<'tcx> {\n     BuiltinCandidate(ty::BuiltinBound),\n     ParamCandidate(ty::PolyTraitRef<'tcx>),\n@@ -171,7 +171,7 @@ enum BuiltinBoundConditions<'tcx> {\n     AmbiguousBuiltin\n }\n \n-#[deriving(Show)]\n+#[derive(Show)]\n enum EvaluationResult<'tcx> {\n     EvaluatedToOk,\n     EvaluatedToAmbig,"}, {"sha": "ab8888f9a33ebd83dce4a5aa6a5164a7ede28a49", "filename": "src/librustc/middle/traits/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc%2Fmiddle%2Ftraits%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc%2Fmiddle%2Ftraits%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Futil.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -10,7 +10,7 @@\n \n use middle::subst::{Substs, VecPerParamSpace};\n use middle::infer::InferCtxt;\n-use middle::ty::{mod, Ty, AsPredicate, ToPolyTraitRef};\n+use middle::ty::{self, Ty, AsPredicate, ToPolyTraitRef};\n use std::collections::HashSet;\n use std::fmt;\n use std::rc::Rc;"}, {"sha": "d168e84a01ccdb514bdf310f2f4b06c8c99559fe", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 91, "deletions": 91, "changes": 182, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -46,7 +46,7 @@ use lint;\n use metadata::csearch;\n use middle;\n use middle::const_eval;\n-use middle::def::{mod, DefMap, ExportMap};\n+use middle::def::{self, DefMap, ExportMap};\n use middle::dependency_format;\n use middle::lang_items::{FnTraitLangItem, FnMutTraitLangItem};\n use middle::lang_items::{FnOnceTraitLangItem, TyDescStructLangItem};\n@@ -55,10 +55,10 @@ use middle::region;\n use middle::resolve_lifetime;\n use middle::infer;\n use middle::stability;\n-use middle::subst::{mod, Subst, Substs, VecPerParamSpace};\n+use middle::subst::{self, Subst, Substs, VecPerParamSpace};\n use middle::traits;\n use middle::ty;\n-use middle::ty_fold::{mod, TypeFoldable, TypeFolder};\n+use middle::ty_fold::{self, TypeFoldable, TypeFolder};\n use middle::ty_walk::TypeWalker;\n use util::ppaux::{note_and_explain_region, bound_region_ptr_to_string};\n use util::ppaux::{trait_store_to_string, ty_to_string};\n@@ -70,8 +70,8 @@ use util::nodemap::{FnvHashMap};\n use arena::TypedArena;\n use std::borrow::BorrowFrom;\n use std::cell::{Cell, RefCell};\n-use std::cmp::{mod, Ordering};\n-use std::fmt::{mod, Show};\n+use std::cmp::{self, Ordering};\n+use std::fmt::{self, Show};\n use std::hash::{Hash, sip, Writer};\n use std::mem;\n use std::ops;\n@@ -84,10 +84,10 @@ use syntax::ast::{CrateNum, DefId, Ident, ItemTrait, LOCAL_CRATE};\n use syntax::ast::{MutImmutable, MutMutable, Name, NamedField, NodeId};\n use syntax::ast::{Onceness, StmtExpr, StmtSemi, StructField, UnnamedField};\n use syntax::ast::{Visibility};\n-use syntax::ast_util::{mod, is_local, lit_is_str, local_def, PostExpansionMethod};\n-use syntax::attr::{mod, AttrMetaMethods};\n+use syntax::ast_util::{self, is_local, lit_is_str, local_def, PostExpansionMethod};\n+use syntax::attr::{self, AttrMetaMethods};\n use syntax::codemap::Span;\n-use syntax::parse::token::{mod, InternedString, special_idents};\n+use syntax::parse::token::{self, InternedString, special_idents};\n use syntax::{ast, ast_map};\n \n pub type Disr = u64;\n@@ -108,13 +108,13 @@ pub struct CrateAnalysis<'tcx> {\n     pub glob_map: Option<GlobMap>,\n }\n \n-#[deriving(Copy, PartialEq, Eq, Hash)]\n+#[derive(Copy, PartialEq, Eq, Hash)]\n pub struct field<'tcx> {\n     pub name: ast::Name,\n     pub mt: mt<'tcx>\n }\n \n-#[deriving(Clone, Copy, Show)]\n+#[derive(Clone, Copy, Show)]\n pub enum ImplOrTraitItemContainer {\n     TraitContainer(ast::DefId),\n     ImplContainer(ast::DefId),\n@@ -129,7 +129,7 @@ impl ImplOrTraitItemContainer {\n     }\n }\n \n-#[deriving(Clone, Show)]\n+#[derive(Clone, Show)]\n pub enum ImplOrTraitItem<'tcx> {\n     MethodTraitItem(Rc<Method<'tcx>>),\n     TypeTraitItem(Rc<AssociatedType>),\n@@ -174,7 +174,7 @@ impl<'tcx> ImplOrTraitItem<'tcx> {\n     }\n }\n \n-#[deriving(Clone, Copy, Show)]\n+#[derive(Clone, Copy, Show)]\n pub enum ImplOrTraitItemId {\n     MethodTraitItemId(ast::DefId),\n     TypeTraitItemId(ast::DefId),\n@@ -189,7 +189,7 @@ impl ImplOrTraitItemId {\n     }\n }\n \n-#[deriving(Clone, Show)]\n+#[derive(Clone, Show)]\n pub struct Method<'tcx> {\n     pub name: ast::Name,\n     pub generics: ty::Generics<'tcx>,\n@@ -233,29 +233,29 @@ impl<'tcx> Method<'tcx> {\n     }\n }\n \n-#[deriving(Clone, Copy, Show)]\n+#[derive(Clone, Copy, Show)]\n pub struct AssociatedType {\n     pub name: ast::Name,\n     pub vis: ast::Visibility,\n     pub def_id: ast::DefId,\n     pub container: ImplOrTraitItemContainer,\n }\n \n-#[deriving(Clone, Copy, PartialEq, Eq, Hash, Show)]\n+#[derive(Clone, Copy, PartialEq, Eq, Hash, Show)]\n pub struct mt<'tcx> {\n     pub ty: Ty<'tcx>,\n     pub mutbl: ast::Mutability,\n }\n \n-#[deriving(Clone, Copy, PartialEq, Eq, Hash, RustcEncodable, RustcDecodable, Show)]\n+#[derive(Clone, Copy, PartialEq, Eq, Hash, RustcEncodable, RustcDecodable, Show)]\n pub enum TraitStore {\n     /// Box<Trait>\n     UniqTraitStore,\n     /// &Trait and &mut Trait\n     RegionTraitStore(Region, ast::Mutability),\n }\n \n-#[deriving(Clone, Copy, Show)]\n+#[derive(Clone, Copy, Show)]\n pub struct field_ty {\n     pub name: Name,\n     pub id: DefId,\n@@ -265,41 +265,41 @@ pub struct field_ty {\n \n // Contains information needed to resolve types and (in the future) look up\n // the types of AST nodes.\n-#[deriving(Copy, PartialEq, Eq, Hash)]\n+#[derive(Copy, PartialEq, Eq, Hash)]\n pub struct creader_cache_key {\n     pub cnum: CrateNum,\n     pub pos: uint,\n     pub len: uint\n }\n \n-#[deriving(Copy)]\n+#[derive(Copy)]\n pub enum ast_ty_to_ty_cache_entry<'tcx> {\n     atttce_unresolved,  /* not resolved yet */\n     atttce_resolved(Ty<'tcx>)  /* resolved to a type, irrespective of region */\n }\n \n-#[deriving(Clone, PartialEq, RustcDecodable, RustcEncodable)]\n+#[derive(Clone, PartialEq, RustcDecodable, RustcEncodable)]\n pub struct ItemVariances {\n     pub types: VecPerParamSpace<Variance>,\n     pub regions: VecPerParamSpace<Variance>,\n }\n \n-#[deriving(Clone, PartialEq, RustcDecodable, RustcEncodable, Show, Copy)]\n+#[derive(Clone, PartialEq, RustcDecodable, RustcEncodable, Show, Copy)]\n pub enum Variance {\n     Covariant,      // T<A> <: T<B> iff A <: B -- e.g., function return type\n     Invariant,      // T<A> <: T<B> iff B == A -- e.g., type of mutable cell\n     Contravariant,  // T<A> <: T<B> iff B <: A -- e.g., function param type\n     Bivariant,      // T<A> <: T<B>            -- e.g., unused type parameter\n }\n \n-#[deriving(Clone, Show)]\n+#[derive(Clone, Show)]\n pub enum AutoAdjustment<'tcx> {\n     AdjustAddEnv(ast::DefId, ty::TraitStore),\n     AdjustReifyFnPointer(ast::DefId), // go from a fn-item type to a fn-pointer type\n     AdjustDerefRef(AutoDerefRef<'tcx>)\n }\n \n-#[deriving(Clone, PartialEq, Show)]\n+#[derive(Clone, PartialEq, Show)]\n pub enum UnsizeKind<'tcx> {\n     // [T, ..n] -> [T], the uint field is n.\n     UnsizeLength(uint),\n@@ -309,13 +309,13 @@ pub enum UnsizeKind<'tcx> {\n     UnsizeVtable(TyTrait<'tcx>, /* the self type of the trait */ Ty<'tcx>)\n }\n \n-#[deriving(Clone, Show)]\n+#[derive(Clone, Show)]\n pub struct AutoDerefRef<'tcx> {\n     pub autoderefs: uint,\n     pub autoref: Option<AutoRef<'tcx>>\n }\n \n-#[deriving(Clone, PartialEq, Show)]\n+#[derive(Clone, PartialEq, Show)]\n pub enum AutoRef<'tcx> {\n     /// Convert from T to &T\n     /// The third field allows us to wrap other AutoRef adjustments.\n@@ -432,13 +432,13 @@ pub fn type_of_adjust<'tcx>(cx: &ctxt<'tcx>, adj: &AutoAdjustment<'tcx>) -> Opti\n     }\n }\n \n-#[deriving(Clone, Copy, RustcEncodable, RustcDecodable, PartialEq, PartialOrd, Show)]\n+#[derive(Clone, Copy, RustcEncodable, RustcDecodable, PartialEq, PartialOrd, Show)]\n pub struct param_index {\n     pub space: subst::ParamSpace,\n     pub index: uint\n }\n \n-#[deriving(Clone, Show)]\n+#[derive(Clone, Show)]\n pub enum MethodOrigin<'tcx> {\n     // fully statically resolved method\n     MethodStatic(ast::DefId),\n@@ -456,7 +456,7 @@ pub enum MethodOrigin<'tcx> {\n \n // details for a method invoked with a receiver whose type is a type parameter\n // with a bounded trait.\n-#[deriving(Clone, Show)]\n+#[derive(Clone, Show)]\n pub struct MethodParam<'tcx> {\n     // the precise trait reference that occurs as a bound -- this may\n     // be a supertrait of what the user actually typed. Note that it\n@@ -469,7 +469,7 @@ pub struct MethodParam<'tcx> {\n }\n \n // details for a method invoked with a receiver whose type is an object\n-#[deriving(Clone, Show)]\n+#[derive(Clone, Show)]\n pub struct MethodObject<'tcx> {\n     // the (super)trait containing the method to be invoked\n     pub trait_ref: Rc<ty::TraitRef<'tcx>>,\n@@ -487,7 +487,7 @@ pub struct MethodObject<'tcx> {\n     pub real_index: uint,\n }\n \n-#[deriving(Clone)]\n+#[derive(Clone)]\n pub struct MethodCallee<'tcx> {\n     pub origin: MethodOrigin<'tcx>,\n     pub ty: Ty<'tcx>,\n@@ -506,13 +506,13 @@ pub struct MethodCallee<'tcx> {\n /// needed to add to the side tables. Thus to disambiguate\n /// we also keep track of whether there's an adjustment in\n /// our key.\n-#[deriving(Clone, Copy, PartialEq, Eq, Hash, Show)]\n+#[derive(Clone, Copy, PartialEq, Eq, Hash, Show)]\n pub struct MethodCall {\n     pub expr_id: ast::NodeId,\n     pub adjustment: ExprAdjustment\n }\n \n-#[deriving(Clone, PartialEq, Eq, Hash, Show, RustcEncodable, RustcDecodable, Copy)]\n+#[derive(Clone, PartialEq, Eq, Hash, Show, RustcEncodable, RustcDecodable, Copy)]\n pub enum ExprAdjustment {\n     NoAdjustment,\n     AutoDeref(uint),\n@@ -551,7 +551,7 @@ pub type vtable_param_res<'tcx> = Vec<vtable_origin<'tcx>>;\n // Resolutions for bounds of all parameters, left to right, for a given path.\n pub type vtable_res<'tcx> = VecPerParamSpace<vtable_param_res<'tcx>>;\n \n-#[deriving(Clone)]\n+#[derive(Clone)]\n pub enum vtable_origin<'tcx> {\n     /*\n       Statically known vtable. def_id gives the impl item\n@@ -596,7 +596,7 @@ pub type ObjectCastMap<'tcx> = RefCell<NodeMap<ty::PolyTraitRef<'tcx>>>;\n /// will push one or more such restriction into the\n /// `transmute_restrictions` vector during `intrinsicck`. They are\n /// then checked during `trans` by the fn `check_intrinsics`.\n-#[deriving(Copy)]\n+#[derive(Copy)]\n pub struct TransmuteRestriction<'tcx> {\n     /// The span whence the restriction comes.\n     pub span: Span,\n@@ -858,7 +858,7 @@ macro_rules! sty_debug_print {\n         // variable names.\n         mod inner {\n             use middle::ty;\n-            #[deriving(Copy)]\n+            #[derive(Copy)]\n             struct DebugStat {\n                 total: uint,\n                 region_infer: uint,\n@@ -926,7 +926,7 @@ impl<'tcx> ctxt<'tcx> {\n     }\n }\n \n-#[deriving(Show)]\n+#[derive(Show)]\n pub struct TyS<'tcx> {\n     pub sty: sty<'tcx>,\n     pub flags: TypeFlags,\n@@ -1032,14 +1032,14 @@ pub fn type_escapes_depth(ty: Ty, depth: u32) -> bool {\n     ty.region_depth > depth\n }\n \n-#[deriving(Clone, PartialEq, Eq, Hash, Show)]\n+#[derive(Clone, PartialEq, Eq, Hash, Show)]\n pub struct BareFnTy<'tcx> {\n     pub unsafety: ast::Unsafety,\n     pub abi: abi::Abi,\n     pub sig: PolyFnSig<'tcx>,\n }\n \n-#[deriving(Clone, PartialEq, Eq, Hash, Show)]\n+#[derive(Clone, PartialEq, Eq, Hash, Show)]\n pub struct ClosureTy<'tcx> {\n     pub unsafety: ast::Unsafety,\n     pub onceness: ast::Onceness,\n@@ -1049,7 +1049,7 @@ pub struct ClosureTy<'tcx> {\n     pub abi: abi::Abi,\n }\n \n-#[deriving(Clone, Copy, PartialEq, Eq, Hash)]\n+#[derive(Clone, Copy, PartialEq, Eq, Hash)]\n pub enum FnOutput<'tcx> {\n     FnConverging(Ty<'tcx>),\n     FnDiverging\n@@ -1070,7 +1070,7 @@ impl<'tcx> FnOutput<'tcx> {\n /// - `inputs` is the list of arguments and their modes.\n /// - `output` is the return type.\n /// - `variadic` indicates whether this is a varidic function. (only true for foreign fns)\n-#[deriving(Clone, PartialEq, Eq, Hash)]\n+#[derive(Clone, PartialEq, Eq, Hash)]\n pub struct FnSig<'tcx> {\n     pub inputs: Vec<Ty<'tcx>>,\n     pub output: FnOutput<'tcx>,\n@@ -1079,7 +1079,7 @@ pub struct FnSig<'tcx> {\n \n pub type PolyFnSig<'tcx> = Binder<FnSig<'tcx>>;\n \n-#[deriving(Clone, Copy, PartialEq, Eq, Hash, Show)]\n+#[derive(Clone, Copy, PartialEq, Eq, Hash, Show)]\n pub struct ParamTy {\n     pub space: subst::ParamSpace,\n     pub idx: u32,\n@@ -1125,15 +1125,15 @@ pub struct ParamTy {\n /// is the outer fn.\n ///\n /// [dbi]: http://en.wikipedia.org/wiki/De_Bruijn_index\n-#[deriving(Clone, PartialEq, Eq, Hash, RustcEncodable, RustcDecodable, Show, Copy)]\n+#[derive(Clone, PartialEq, Eq, Hash, RustcEncodable, RustcDecodable, Show, Copy)]\n pub struct DebruijnIndex {\n     // We maintain the invariant that this is never 0. So 1 indicates\n     // the innermost binder. To ensure this, create with `DebruijnIndex::new`.\n     pub depth: u32,\n }\n \n /// Representation of regions:\n-#[deriving(Clone, PartialEq, Eq, Hash, RustcEncodable, RustcDecodable, Show, Copy)]\n+#[derive(Clone, PartialEq, Eq, Hash, RustcEncodable, RustcDecodable, Show, Copy)]\n pub enum Region {\n     // Region bound in a type or fn declaration which will be\n     // substituted 'early' -- that is, at the same time when type\n@@ -1174,13 +1174,13 @@ pub enum Region {\n /// Upvars do not get their own node-id. Instead, we use the pair of\n /// the original var id (that is, the root variable that is referenced\n /// by the upvar) and the id of the closure expression.\n-#[deriving(Clone, Copy, PartialEq, Eq, Hash, Show)]\n+#[derive(Clone, Copy, PartialEq, Eq, Hash, Show)]\n pub struct UpvarId {\n     pub var_id: ast::NodeId,\n     pub closure_expr_id: ast::NodeId,\n }\n \n-#[deriving(Clone, PartialEq, Eq, Hash, Show, RustcEncodable, RustcDecodable, Copy)]\n+#[derive(Clone, PartialEq, Eq, Hash, Show, RustcEncodable, RustcDecodable, Copy)]\n pub enum BorrowKind {\n     /// Data must be immutable and is aliasable.\n     ImmBorrow,\n@@ -1273,7 +1273,7 @@ pub enum BorrowKind {\n /// - Through mutation, the borrowed upvars can actually escape\n ///   the closure, so sometimes it is necessary for them to be larger\n ///   than the closure lifetime itself.\n-#[deriving(PartialEq, Clone, RustcEncodable, RustcDecodable, Show, Copy)]\n+#[derive(PartialEq, Clone, RustcEncodable, RustcDecodable, Show, Copy)]\n pub struct UpvarBorrow {\n     pub kind: BorrowKind,\n     pub region: ty::Region,\n@@ -1298,7 +1298,7 @@ impl Region {\n     }\n }\n \n-#[deriving(Clone, PartialEq, PartialOrd, Eq, Ord, Hash,\n+#[derive(Clone, PartialEq, PartialOrd, Eq, Ord, Hash,\n            RustcEncodable, RustcDecodable, Show, Copy)]\n /// A \"free\" region `fr` can be interpreted as \"some region\n /// at least as big as the scope `fr.scope`\".\n@@ -1307,7 +1307,7 @@ pub struct FreeRegion {\n     pub bound_region: BoundRegion\n }\n \n-#[deriving(Clone, PartialEq, PartialOrd, Eq, Ord, Hash,\n+#[derive(Clone, PartialEq, PartialOrd, Eq, Ord, Hash,\n            RustcEncodable, RustcDecodable, Show, Copy)]\n pub enum BoundRegion {\n     /// An anonymous region parameter for a given fn (&T)\n@@ -1329,7 +1329,7 @@ pub enum BoundRegion {\n \n // NB: If you change this, you'll probably want to change the corresponding\n // AST structure in libsyntax/ast.rs as well.\n-#[deriving(Clone, PartialEq, Eq, Hash, Show)]\n+#[derive(Clone, PartialEq, Eq, Hash, Show)]\n pub enum sty<'tcx> {\n     ty_bool,\n     ty_char,\n@@ -1377,7 +1377,7 @@ pub enum sty<'tcx> {\n             // on non-useful type error messages)\n }\n \n-#[deriving(Clone, PartialEq, Eq, Hash, Show)]\n+#[derive(Clone, PartialEq, Eq, Hash, Show)]\n pub struct TyTrait<'tcx> {\n     pub principal: ty::PolyTraitRef<'tcx>,\n     pub bounds: ExistentialBounds<'tcx>,\n@@ -1449,7 +1449,7 @@ impl<'tcx> TyTrait<'tcx> {\n /// Note that a `TraitRef` introduces a level of region binding, to\n /// account for higher-ranked trait bounds like `T : for<'a> Foo<&'a\n /// U>` or higher-ranked object types.\n-#[deriving(Clone, PartialEq, Eq, Hash, Show)]\n+#[derive(Clone, PartialEq, Eq, Hash, Show)]\n pub struct TraitRef<'tcx> {\n     pub def_id: DefId,\n     pub substs: &'tcx Substs<'tcx>,\n@@ -1487,31 +1487,31 @@ impl<'tcx> PolyTraitRef<'tcx> {\n /// erase, or otherwise \"discharge\" these bound reons, we change the\n /// type from `Binder<T>` to just `T` (see\n /// e.g. `liberate_late_bound_regions`).\n-#[deriving(Clone, PartialEq, Eq, Hash, Show)]\n+#[derive(Clone, PartialEq, Eq, Hash, Show)]\n pub struct Binder<T>(pub T);\n \n-#[deriving(Clone, Copy, PartialEq)]\n+#[derive(Clone, Copy, PartialEq)]\n pub enum IntVarValue {\n     IntType(ast::IntTy),\n     UintType(ast::UintTy),\n }\n \n-#[deriving(Clone, Copy, Show)]\n+#[derive(Clone, Copy, Show)]\n pub enum terr_vstore_kind {\n     terr_vec,\n     terr_str,\n     terr_fn,\n     terr_trait\n }\n \n-#[deriving(Clone, Copy, Show)]\n+#[derive(Clone, Copy, Show)]\n pub struct expected_found<T> {\n     pub expected: T,\n     pub found: T\n }\n \n // Data structures used in type unification\n-#[deriving(Clone, Copy, Show)]\n+#[derive(Clone, Copy, Show)]\n pub enum type_err<'tcx> {\n     terr_mismatch,\n     terr_unsafety_mismatch(expected_found<ast::Unsafety>),\n@@ -1548,7 +1548,7 @@ pub enum type_err<'tcx> {\n \n /// Bounds suitable for a named type parameter like `A` in `fn foo<A>`\n /// as well as the existential type parameter in an object type.\n-#[deriving(PartialEq, Eq, Hash, Clone, Show)]\n+#[derive(PartialEq, Eq, Hash, Clone, Show)]\n pub struct ParamBounds<'tcx> {\n     pub region_bounds: Vec<ty::Region>,\n     pub builtin_bounds: BuiltinBounds,\n@@ -1561,7 +1561,7 @@ pub struct ParamBounds<'tcx> {\n /// major difference between this case and `ParamBounds` is that\n /// general purpose trait bounds are omitted and there must be\n /// *exactly one* region.\n-#[deriving(PartialEq, Eq, Hash, Clone, Show)]\n+#[derive(PartialEq, Eq, Hash, Clone, Show)]\n pub struct ExistentialBounds<'tcx> {\n     pub region_bound: ty::Region,\n     pub builtin_bounds: BuiltinBounds,\n@@ -1570,7 +1570,7 @@ pub struct ExistentialBounds<'tcx> {\n \n pub type BuiltinBounds = EnumSet<BuiltinBound>;\n \n-#[deriving(Clone, RustcEncodable, PartialEq, Eq, RustcDecodable, Hash,\n+#[derive(Clone, RustcEncodable, PartialEq, Eq, RustcDecodable, Hash,\n            Show, Copy)]\n #[repr(uint)]\n pub enum BuiltinBound {\n@@ -1608,27 +1608,27 @@ impl CLike for BuiltinBound {\n     }\n }\n \n-#[deriving(Clone, Copy, PartialEq, Eq, Hash)]\n+#[derive(Clone, Copy, PartialEq, Eq, Hash)]\n pub struct TyVid {\n     pub index: u32\n }\n \n-#[deriving(Clone, Copy, PartialEq, Eq, Hash)]\n+#[derive(Clone, Copy, PartialEq, Eq, Hash)]\n pub struct IntVid {\n     pub index: u32\n }\n \n-#[deriving(Clone, Copy, PartialEq, Eq, Hash)]\n+#[derive(Clone, Copy, PartialEq, Eq, Hash)]\n pub struct FloatVid {\n     pub index: u32\n }\n \n-#[deriving(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Copy)]\n+#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Copy)]\n pub struct RegionVid {\n     pub index: u32\n }\n \n-#[deriving(Clone, Copy, PartialEq, Eq, Hash)]\n+#[derive(Clone, Copy, PartialEq, Eq, Hash)]\n pub enum InferTy {\n     TyVar(TyVid),\n     IntVar(IntVid),\n@@ -1645,15 +1645,15 @@ pub enum InferTy {\n     FreshIntTy(u32),\n }\n \n-#[deriving(Clone, RustcEncodable, RustcDecodable, PartialEq, Eq, Hash, Show, Copy)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, PartialEq, Eq, Hash, Show, Copy)]\n pub enum UnconstrainedNumeric {\n     UnconstrainedFloat,\n     UnconstrainedInt,\n     Neither,\n }\n \n \n-#[deriving(Clone, RustcEncodable, RustcDecodable, Eq, Hash, Show, Copy)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, Eq, Hash, Show, Copy)]\n pub enum InferRegion {\n     ReVar(RegionVid),\n     ReSkolemized(u32, BoundRegion)\n@@ -1728,7 +1728,7 @@ impl fmt::Show for IntVarValue {\n     }\n }\n \n-#[deriving(Clone, Show)]\n+#[derive(Clone, Show)]\n pub struct TypeParameterDef<'tcx> {\n     pub name: ast::Name,\n     pub def_id: ast::DefId,\n@@ -1738,7 +1738,7 @@ pub struct TypeParameterDef<'tcx> {\n     pub default: Option<Ty<'tcx>>,\n }\n \n-#[deriving(RustcEncodable, RustcDecodable, Clone, Show)]\n+#[derive(RustcEncodable, RustcDecodable, Clone, Show)]\n pub struct RegionParameterDef {\n     pub name: ast::Name,\n     pub def_id: ast::DefId,\n@@ -1755,7 +1755,7 @@ impl RegionParameterDef {\n \n /// Information about the formal type/lifetime parameters associated\n /// with an item or method. Analogous to ast::Generics.\n-#[deriving(Clone, Show)]\n+#[derive(Clone, Show)]\n pub struct Generics<'tcx> {\n     pub types: VecPerParamSpace<TypeParameterDef<'tcx>>,\n     pub regions: VecPerParamSpace<RegionParameterDef>,\n@@ -1787,7 +1787,7 @@ impl<'tcx> Generics<'tcx> {\n     }\n }\n \n-#[deriving(Clone, PartialEq, Eq, Hash, Show)]\n+#[derive(Clone, PartialEq, Eq, Hash, Show)]\n pub enum Predicate<'tcx> {\n     /// Corresponds to `where Foo : Bar<A,B,C>`. `Foo` here would be\n     /// the `Self` type of the trait reference and `A`, `B`, and `C`\n@@ -1808,7 +1808,7 @@ pub enum Predicate<'tcx> {\n     Projection(PolyProjectionPredicate<'tcx>),\n }\n \n-#[deriving(Clone, PartialEq, Eq, Hash, Show)]\n+#[derive(Clone, PartialEq, Eq, Hash, Show)]\n pub struct TraitPredicate<'tcx> {\n     pub trait_ref: Rc<TraitRef<'tcx>>\n }\n@@ -1834,11 +1834,11 @@ impl<'tcx> PolyTraitPredicate<'tcx> {\n     }\n }\n \n-#[deriving(Clone, PartialEq, Eq, Hash, Show)]\n+#[derive(Clone, PartialEq, Eq, Hash, Show)]\n pub struct EquatePredicate<'tcx>(pub Ty<'tcx>, pub Ty<'tcx>); // `0 == 1`\n pub type PolyEquatePredicate<'tcx> = ty::Binder<EquatePredicate<'tcx>>;\n \n-#[deriving(Clone, PartialEq, Eq, Hash, Show)]\n+#[derive(Clone, PartialEq, Eq, Hash, Show)]\n pub struct OutlivesPredicate<A,B>(pub A, pub B); // `A : B`\n pub type PolyOutlivesPredicate<A,B> = ty::Binder<OutlivesPredicate<A,B>>;\n pub type PolyRegionOutlivesPredicate = PolyOutlivesPredicate<ty::Region, ty::Region>;\n@@ -1856,7 +1856,7 @@ pub type PolyTypeOutlivesPredicate<'tcx> = PolyOutlivesPredicate<Ty<'tcx>, ty::R\n /// equality between arbitrary types. Processing an instance of Form\n /// #2 eventually yields one of these `ProjectionPredicate`\n /// instances to normalize the LHS.\n-#[deriving(Clone, PartialEq, Eq, Hash, Show)]\n+#[derive(Clone, PartialEq, Eq, Hash, Show)]\n pub struct ProjectionPredicate<'tcx> {\n     pub projection_ty: ProjectionTy<'tcx>,\n     pub ty: Ty<'tcx>,\n@@ -1872,7 +1872,7 @@ impl<'tcx> PolyProjectionPredicate<'tcx> {\n \n /// Represents the projection of an associated type. In explicit UFCS\n /// form this would be written `<T as Trait<..>>::N`.\n-#[deriving(Clone, PartialEq, Eq, Hash, Show)]\n+#[derive(Clone, PartialEq, Eq, Hash, Show)]\n pub struct ProjectionTy<'tcx> {\n     /// The trait reference `T as Trait<..>`.\n     pub trait_ref: Rc<ty::TraitRef<'tcx>>,\n@@ -2008,7 +2008,7 @@ impl<'tcx> Predicate<'tcx> {\n /// `[[], [U:Bar<T>]]`.  Now if there were some particular reference\n /// like `Foo<int,uint>`, then the `GenericBounds` would be `[[],\n /// [uint:Bar<int>]]`.\n-#[deriving(Clone, Show)]\n+#[derive(Clone, Show)]\n pub struct GenericBounds<'tcx> {\n     pub predicates: VecPerParamSpace<Predicate<'tcx>>,\n }\n@@ -2057,7 +2057,7 @@ impl<'tcx> TraitRef<'tcx> {\n /// bound lifetime parameters are replaced with free ones, but in the\n /// future I hope to refine the representation of types so as to make\n /// more distinctions clearer.\n-#[deriving(Clone)]\n+#[derive(Clone)]\n pub struct ParameterEnvironment<'a, 'tcx:'a> {\n     pub tcx: &'a ctxt<'tcx>,\n \n@@ -2205,7 +2205,7 @@ impl<'a, 'tcx> ParameterEnvironment<'a, 'tcx> {\n /// stray references in a comment or something). We try to reserve the\n /// \"poly\" prefix to refer to higher-ranked things, as in\n /// `PolyTraitRef`.\n-#[deriving(Clone, Show)]\n+#[derive(Clone, Show)]\n pub struct TypeScheme<'tcx> {\n     pub generics: Generics<'tcx>,\n     pub ty: Ty<'tcx>\n@@ -2234,21 +2234,21 @@ pub struct TraitDef<'tcx> {\n \n /// Records the substitutions used to translate the polytype for an\n /// item into the monotype of an item reference.\n-#[deriving(Clone)]\n+#[derive(Clone)]\n pub struct ItemSubsts<'tcx> {\n     pub substs: Substs<'tcx>,\n }\n \n /// Records information about each unboxed closure.\n-#[deriving(Clone)]\n+#[derive(Clone)]\n pub struct UnboxedClosure<'tcx> {\n     /// The type of the unboxed closure.\n     pub closure_type: ClosureTy<'tcx>,\n     /// The kind of unboxed closure this is.\n     pub kind: UnboxedClosureKind,\n }\n \n-#[deriving(Clone, Copy, PartialEq, Eq, Show)]\n+#[derive(Clone, Copy, PartialEq, Eq, Show)]\n pub enum UnboxedClosureKind {\n     FnUnboxedClosureKind,\n     FnMutUnboxedClosureKind,\n@@ -3129,7 +3129,7 @@ pub fn type_is_floating_point(ty: Ty) -> bool {\n /// The reason we compute type contents and not kinds is that it is\n /// easier for me (nmatsakis) to think about what is contained within\n /// a type than to think about what is *not* contained within a type.\n-#[deriving(Clone, Copy)]\n+#[derive(Clone, Copy)]\n pub struct TypeContents {\n     pub bits: u64\n }\n@@ -3733,7 +3733,7 @@ pub fn is_instantiable<'tcx>(cx: &ctxt<'tcx>, r_ty: Ty<'tcx>) -> bool {\n ///\n /// The ordering of the cases is significant. They are sorted so that cmp::max\n /// will keep the \"more erroneous\" of two values.\n-#[deriving(Copy, PartialOrd, Ord, Eq, PartialEq, Show)]\n+#[derive(Copy, PartialOrd, Ord, Eq, PartialEq, Show)]\n pub enum Representability {\n     Representable,\n     ContainsRecursive,\n@@ -4505,7 +4505,7 @@ pub fn expr_is_lval(tcx: &ctxt, e: &ast::Expr) -> bool {\n /// two kinds of rvalues is an artifact of trans which reflects how we will\n /// generate code for that kind of expression.  See trans/expr.rs for more\n /// information.\n-#[deriving(Copy)]\n+#[derive(Copy)]\n pub enum ExprKind {\n     LvalueExpr,\n     RvalueDpsExpr,\n@@ -5091,7 +5091,7 @@ pub fn associated_type_parameter_index(cx: &ctxt,\n     cx.sess.bug(\"couldn't find associated type parameter index\")\n }\n \n-#[deriving(Copy, PartialEq, Eq)]\n+#[derive(Copy, PartialEq, Eq)]\n pub struct AssociatedTypeInfo {\n     pub def_id: ast::DefId,\n     pub index: uint,\n@@ -5186,7 +5186,7 @@ pub fn ty_to_def_id(ty: Ty) -> Option<ast::DefId> {\n }\n \n // Enum information\n-#[deriving(Clone)]\n+#[derive(Clone)]\n pub struct VariantInfo<'tcx> {\n     pub args: Vec<Ty<'tcx>>,\n     pub arg_names: Option<Vec<ast::Ident>>,\n@@ -5277,7 +5277,7 @@ pub fn item_path_str(cx: &ctxt, id: ast::DefId) -> String {\n     with_path(cx, id, |path| ast_map::path_to_string(path)).to_string()\n }\n \n-#[deriving(Copy)]\n+#[derive(Copy)]\n pub enum DtorKind {\n     NoDtor,\n     TraitDtor(DefId, bool)\n@@ -5712,7 +5712,7 @@ pub fn tup_fields<'tcx>(v: &[Ty<'tcx>]) -> Vec<field<'tcx>> {\n     }).collect()\n }\n \n-#[deriving(Copy, Clone)]\n+#[derive(Copy, Clone)]\n pub struct UnboxedClosureUpvar<'tcx> {\n     pub def: def::Def,\n     pub span: Span,\n@@ -6643,7 +6643,7 @@ impl<'a,'tcx> UnboxedClosureTyper<'tcx> for ty::ParameterEnvironment<'a,'tcx> {\n \n \n /// The category of explicit self.\n-#[deriving(Clone, Copy, Eq, PartialEq, Show)]\n+#[derive(Clone, Copy, Eq, PartialEq, Show)]\n pub enum ExplicitSelfCategory {\n     StaticExplicitSelfCategory,\n     ByValueExplicitSelfCategory,\n@@ -6712,7 +6712,7 @@ pub fn accumulate_lifetimes_in_type(accumulator: &mut Vec<ty::Region>,\n }\n \n /// A free variable referred to in a function.\n-#[deriving(Copy, RustcEncodable, RustcDecodable)]\n+#[derive(Copy, RustcEncodable, RustcDecodable)]\n pub struct Freevar {\n     /// The variable being accessed free.\n     pub def: def::Def,\n@@ -6989,7 +6989,7 @@ pub fn make_substs_for_receiver_types<'tcx>(tcx: &ty::ctxt<'tcx>,\n     trait_ref.substs.clone().with_method(meth_tps, meth_regions)\n }\n \n-#[deriving(Copy)]\n+#[derive(Copy)]\n pub enum CopyImplementationError {\n     FieldDoesNotImplementCopy(ast::Name),\n     VariantDoesNotImplementCopy(ast::Name),"}, {"sha": "9a66b98ee5841918d35c091111febeafdf91ed09", "filename": "src/librustc/middle/ty_fold.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc%2Fmiddle%2Fty_fold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc%2Fmiddle%2Fty_fold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty_fold.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -36,7 +36,7 @@\n \n use middle::subst;\n use middle::subst::VecPerParamSpace;\n-use middle::ty::{mod, Ty};\n+use middle::ty::{self, Ty};\n use middle::traits;\n use std::rc::Rc;\n use syntax::owned_slice::OwnedSlice;"}, {"sha": "6070a4208f663709a3d0d3ae03eafea13cd1edea", "filename": "src/librustc/middle/ty_walk.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc%2Fmiddle%2Fty_walk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc%2Fmiddle%2Fty_walk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty_walk.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -10,7 +10,7 @@\n \n //! An iterator over the type substructure.\n \n-use middle::ty::{mod, Ty};\n+use middle::ty::{self, Ty};\n use std::iter::Iterator;\n \n pub struct TypeWalker<'tcx> {"}, {"sha": "01bd114474c9e4edd64c6d0705aef7078598e216", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -46,22 +46,22 @@ pub struct Config {\n     pub uint_type: UintTy,\n }\n \n-#[deriving(Clone, Copy, PartialEq)]\n+#[derive(Clone, Copy, PartialEq)]\n pub enum OptLevel {\n     No, // -O0\n     Less, // -O1\n     Default, // -O2\n     Aggressive // -O3\n }\n \n-#[deriving(Clone, Copy, PartialEq)]\n+#[derive(Clone, Copy, PartialEq)]\n pub enum DebugInfoLevel {\n     NoDebugInfo,\n     LimitedDebugInfo,\n     FullDebugInfo,\n }\n \n-#[deriving(Clone, Copy, PartialEq, PartialOrd, Ord, Eq)]\n+#[derive(Clone, Copy, PartialEq, PartialOrd, Ord, Eq)]\n pub enum OutputType {\n     OutputTypeBitcode,\n     OutputTypeAssembly,\n@@ -71,7 +71,7 @@ pub enum OutputType {\n     OutputTypeDepInfo,\n }\n \n-#[deriving(Clone)]\n+#[derive(Clone)]\n pub struct Options {\n     // The crate config requested for the session, which may be combined\n     // with additional crate configurations during the compile process\n@@ -113,7 +113,7 @@ pub struct Options {\n     pub alt_std_name: Option<String>\n }\n \n-#[deriving(Clone, PartialEq, Eq)]\n+#[derive(Clone, PartialEq, Eq)]\n #[allow(missing_copy_implementations)]\n pub enum PrintRequest {\n     FileNames,\n@@ -137,7 +137,7 @@ impl Input {\n     }\n }\n \n-#[deriving(Clone)]\n+#[derive(Clone)]\n pub struct OutputFilenames {\n     pub out_directory: Path,\n     pub out_filestem: String,\n@@ -222,14 +222,14 @@ pub fn basic_options() -> Options {\n // users can have their own entry\n // functions that don't start a\n // scheduler\n-#[deriving(Copy, PartialEq)]\n+#[derive(Copy, PartialEq)]\n pub enum EntryFnType {\n     EntryMain,\n     EntryStart,\n     EntryNone,\n }\n \n-#[deriving(Copy, PartialEq, PartialOrd, Clone, Ord, Eq, Hash)]\n+#[derive(Copy, PartialEq, PartialOrd, Clone, Ord, Eq, Hash)]\n pub enum CrateType {\n     CrateTypeExecutable,\n     CrateTypeDylib,\n@@ -337,7 +337,7 @@ pub fn debugging_opts_map() -> Vec<(&'static str, &'static str, u64)> {\n     ]\n }\n \n-#[deriving(Clone)]\n+#[derive(Clone)]\n pub enum Passes {\n     SomePasses(Vec<String>),\n     AllPasses,\n@@ -365,7 +365,7 @@ impl Passes {\n macro_rules! cgoptions {\n     ($($opt:ident : $t:ty = ($init:expr, $parse:ident, $desc:expr)),* ,) =>\n (\n-    #[deriving(Clone)]\n+    #[derive(Clone)]\n     pub struct CodegenOptions { $(pub $opt: $t),* }\n \n     pub fn basic_codegen_options() -> CodegenOptions {\n@@ -674,10 +674,10 @@ pub fn optgroups() -> Vec<getopts::OptGroup> {\n         .collect()\n }\n \n-#[deriving(Copy, Clone, PartialEq, Eq, Show)]\n+#[derive(Copy, Clone, PartialEq, Eq, Show)]\n pub enum OptionStability { Stable, Unstable }\n \n-#[deriving(Clone, PartialEq, Eq)]\n+#[derive(Clone, PartialEq, Eq)]\n pub struct RustcOptGroup {\n     pub opt_group: getopts::OptGroup,\n     pub stability: OptionStability,"}, {"sha": "770e8d73ec7614f70ceb16982a5bdd7f9838f72a", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -17,7 +17,7 @@ use util::nodemap::NodeMap;\n \n use syntax::ast::NodeId;\n use syntax::codemap::Span;\n-use syntax::diagnostic::{mod, Emitter};\n+use syntax::diagnostic::{self, Emitter};\n use syntax::diagnostics;\n use syntax::feature_gate;\n use syntax::parse;"}, {"sha": "9bff54352179ec0c0d4785539a63b68825bbe986", "filename": "src/librustc/session/search_paths.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc%2Fsession%2Fsearch_paths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc%2Fsession%2Fsearch_paths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fsearch_paths.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -10,7 +10,7 @@\n \n use std::slice;\n \n-#[deriving(Clone)]\n+#[derive(Clone)]\n pub struct SearchPaths {\n     paths: Vec<(PathKind, Path)>,\n }\n@@ -20,7 +20,7 @@ pub struct Iter<'a> {\n     iter: slice::Iter<'a, (PathKind, Path)>,\n }\n \n-#[deriving(Eq, PartialEq, Clone, Copy)]\n+#[derive(Eq, PartialEq, Clone, Copy)]\n pub enum PathKind {\n     Native,\n     Crate,"}, {"sha": "7d2a8509cb5106e1ad14dcc7ae41cb21c97e0ad5", "filename": "src/librustc/util/common.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc%2Futil%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc%2Futil%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fcommon.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -23,7 +23,7 @@ use syntax::visit::Visitor;\n \n // Useful type to use with `Result<>` indicate that an error has already\n // been reported to the user, so no need to continue checking.\n-#[deriving(Clone, Copy, Show)]\n+#[derive(Clone, Copy, Show)]\n pub struct ErrorReported;\n \n pub fn time<T, U, F>(do_it: bool, what: &str, u: U, f: F) -> T where"}, {"sha": "0da01cd358953581a9d9172fd09ff35104cc64fe", "filename": "src/librustc/util/nodemap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc%2Futil%2Fnodemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc%2Futil%2Fnodemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fnodemap.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -68,7 +68,7 @@ pub mod DefIdSet {\n ///\n /// This uses FNV hashing, as described here:\n /// http://en.wikipedia.org/wiki/Fowler%E2%80%93Noll%E2%80%93Vo_hash_function\n-#[deriving(Clone, Copy, Default)]\n+#[derive(Clone, Copy, Default)]\n pub struct FnvHasher;\n \n #[allow(missing_copy_implementations)]"}, {"sha": "11820c908eebabdfafeec559da595af8ba46ecf2", "filename": "src/librustc/util/snapshot_vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc%2Futil%2Fsnapshot_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc%2Futil%2Fsnapshot_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fsnapshot_vec.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -22,7 +22,7 @@ use self::UndoLog::*;\n \n use std::mem;\n \n-#[deriving(PartialEq)]\n+#[derive(PartialEq)]\n pub enum UndoLog<T,U> {\n     /// Indicates where a snapshot started.\n     OpenSnapshot,"}, {"sha": "2ae88aa4476f7e24f8db8ddb0cf294fc9554ed4f", "filename": "src/librustc_back/svh.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc_back%2Fsvh.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc_back%2Fsvh.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Fsvh.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -53,7 +53,7 @@ use std::iter::range_step;\n use syntax::ast;\n use syntax::visit;\n \n-#[deriving(Clone, PartialEq)]\n+#[derive(Clone, PartialEq)]\n pub struct Svh {\n     hash: String,\n }\n@@ -172,7 +172,7 @@ mod svh_visitor {\n     // This enum represents the different potential bits of code the\n     // visitor could encounter that could affect the ABI for the crate,\n     // and assigns each a distinct tag to feed into the hash computation.\n-    #[deriving(Hash)]\n+    #[derive(Hash)]\n     enum SawAbiComponent<'a> {\n \n         // FIXME (#14132): should we include (some function of)\n@@ -220,7 +220,7 @@ mod svh_visitor {\n     /// because the SVH is just a developer convenience; there is no\n     /// guarantee of collision-freedom, hash collisions are just\n     /// (hopefully) unlikely.)\n-    #[deriving(Hash)]\n+    #[derive(Hash)]\n     pub enum SawExprComponent<'a> {\n \n         SawExprLoop(Option<token::InternedString>),\n@@ -299,7 +299,7 @@ mod svh_visitor {\n     }\n \n     /// SawStmtComponent is analogous to SawExprComponent, but for statements.\n-    #[deriving(Hash)]\n+    #[derive(Hash)]\n     pub enum SawStmtComponent {\n         SawStmtDecl,\n         SawStmtExpr,"}, {"sha": "d53f97c3a04233c3949561d88ca38784f7645dae", "filename": "src/librustc_back/target/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc_back%2Ftarget%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc_back%2Ftarget%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fmod.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -77,7 +77,7 @@ mod x86_64_unknown_linux_gnu;\n /// Everything `rustc` knows about how to compile for a specific target.\n ///\n /// Every field here must be specified, and has no default value.\n-#[deriving(Clone, Show)]\n+#[derive(Clone, Show)]\n pub struct Target {\n     /// [Data layout](http://llvm.org/docs/LangRef.html#data-layout) to pass to LLVM.\n     pub data_layout: String,\n@@ -100,7 +100,7 @@ pub struct Target {\n ///\n /// This has an implementation of `Default`, see each field for what the default is. In general,\n /// these try to take \"minimal defaults\" that don't assume anything about the runtime they run in.\n-#[deriving(Clone, Show)]\n+#[derive(Clone, Show)]\n pub struct TargetOptions {\n     /// Linker to invoke. Defaults to \"cc\".\n     pub linker: String,"}, {"sha": "cb77519671cf57fd315243a576777e5e47da752f", "filename": "src/librustc_borrowck/borrowck/check_loans.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc_borrowck%2Fborrowck%2Fcheck_loans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc_borrowck%2Fborrowck%2Fcheck_loans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fcheck_loans.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -213,7 +213,7 @@ pub fn check_loans<'a, 'b, 'c, 'tcx>(bccx: &BorrowckCtxt<'a, 'tcx>,\n     }\n }\n \n-#[deriving(PartialEq)]\n+#[derive(PartialEq)]\n enum UseError<'tcx> {\n     UseOk,\n     UseWhileBorrowed(/*loan*/Rc<LoanPath<'tcx>>, /*loan*/Span)"}, {"sha": "0d86811af9f49cfc6e471b694dd766c005adbd1c", "filename": "src/librustc_borrowck/borrowck/fragments.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc_borrowck%2Fborrowck%2Ffragments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc_borrowck%2Fborrowck%2Ffragments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Ffragments.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -30,7 +30,7 @@ use syntax::ast_map;\n use syntax::attr::AttrMetaMethods;\n use syntax::codemap::Span;\n \n-#[deriving(PartialEq, Eq, PartialOrd, Ord)]\n+#[derive(PartialEq, Eq, PartialOrd, Ord)]\n enum Fragment {\n     // This represents the path described by the move path index\n     Just(MovePathIndex),"}, {"sha": "95c5d9415a1250f8a194ade562d0ac85e9928109", "filename": "src/librustc_borrowck/borrowck/gather_loans/move_error.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmove_error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmove_error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmove_error.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -53,7 +53,7 @@ impl<'tcx> MoveError<'tcx> {\n     }\n }\n \n-#[deriving(Clone)]\n+#[derive(Clone)]\n pub struct MoveSpanAndPath {\n     pub span: codemap::Span,\n     pub ident: ast::Ident"}, {"sha": "c55444c84aadd02d59dd84a92b17cbe50b8b1488", "filename": "src/librustc_borrowck/borrowck/gather_loans/restrictions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Frestrictions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Frestrictions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Frestrictions.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -21,7 +21,7 @@ use syntax::codemap::Span;\n \n use std::rc::Rc;\n \n-#[deriving(Show)]\n+#[derive(Show)]\n pub enum RestrictionResult<'tcx> {\n     Safe,\n     SafeIf(Rc<LoanPath<'tcx>>, Vec<Rc<LoanPath<'tcx>>>)"}, {"sha": "75545634b40cf689a72597e9d339ba37e6bdadf0", "filename": "src/librustc_borrowck/borrowck/mod.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -25,7 +25,7 @@ use rustc::middle::dataflow::DataFlowOperator;\n use rustc::middle::expr_use_visitor as euv;\n use rustc::middle::mem_categorization as mc;\n use rustc::middle::region;\n-use rustc::middle::ty::{mod, Ty};\n+use rustc::middle::ty::{self, Ty};\n use rustc::util::ppaux::{note_and_explain_region, Repr, UserString};\n use std::rc::Rc;\n use std::string::String;\n@@ -56,7 +56,7 @@ pub mod gather_loans;\n \n pub mod move_data;\n \n-#[deriving(Clone, Copy)]\n+#[derive(Clone, Copy)]\n pub struct LoanDataFlowOperator;\n \n pub type LoanDataFlow<'a, 'tcx> = DataFlowContext<'a, 'tcx, LoanDataFlowOperator>;\n@@ -287,7 +287,7 @@ impl<'tcx> Loan<'tcx> {\n     }\n }\n \n-#[deriving(Eq, Hash, Show)]\n+#[derive(Eq, Hash, Show)]\n pub struct LoanPath<'tcx> {\n     kind: LoanPathKind<'tcx>,\n     ty: ty::Ty<'tcx>,\n@@ -302,7 +302,7 @@ impl<'tcx> PartialEq for LoanPath<'tcx> {\n     }\n }\n \n-#[deriving(PartialEq, Eq, Hash, Show)]\n+#[derive(PartialEq, Eq, Hash, Show)]\n pub enum LoanPathKind<'tcx> {\n     LpVar(ast::NodeId),                         // `x` in doc.rs\n     LpUpvar(ty::UpvarId),                       // `x` captured by-value into closure\n@@ -323,7 +323,7 @@ impl<'tcx> LoanPath<'tcx> {\n //     b2b39e8700e37ad32b486b9a8409b50a8a53aa51#commitcomment-7892003\n static DOWNCAST_PRINTED_OPERATOR : &'static str = \" as \";\n \n-#[deriving(Copy, PartialEq, Eq, Hash, Show)]\n+#[derive(Copy, PartialEq, Eq, Hash, Show)]\n pub enum LoanPathElem {\n     LpDeref(mc::PointerKind),    // `*LV` in doc.rs\n     LpInterior(mc::InteriorKind) // `LV.f` in doc.rs\n@@ -472,7 +472,7 @@ pub fn opt_loan_path<'tcx>(cmt: &mc::cmt<'tcx>) -> Option<Rc<LoanPath<'tcx>>> {\n // Errors\n \n // Errors that can occur\n-#[deriving(PartialEq)]\n+#[derive(PartialEq)]\n #[allow(missing_copy_implementations)]\n pub enum bckerr_code {\n     err_mutbl,\n@@ -482,21 +482,21 @@ pub enum bckerr_code {\n \n // Combination of an error code and the categorization of the expression\n // that caused it\n-#[deriving(PartialEq)]\n+#[derive(PartialEq)]\n pub struct BckError<'tcx> {\n     span: Span,\n     cause: euv::LoanCause,\n     cmt: mc::cmt<'tcx>,\n     code: bckerr_code\n }\n \n-#[deriving(Copy)]\n+#[derive(Copy)]\n pub enum AliasableViolationKind {\n     MutabilityViolation,\n     BorrowViolation(euv::LoanCause)\n }\n \n-#[deriving(Copy, Show)]\n+#[derive(Copy, Show)]\n pub enum MovedValueUseKind {\n     MovedInUse,\n     MovedInCapture,"}, {"sha": "b49164f0c25476aa46c9333841e775ff2117a059", "filename": "src/librustc_borrowck/borrowck/move_data.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc_borrowck%2Fborrowck%2Fmove_data.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc_borrowck%2Fborrowck%2Fmove_data.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmove_data.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -76,7 +76,7 @@ pub struct FlowedMoveData<'a, 'tcx: 'a> {\n }\n \n /// Index into `MoveData.paths`, used like a pointer\n-#[deriving(Copy, PartialEq, Eq, PartialOrd, Ord, Show)]\n+#[derive(Copy, PartialEq, Eq, PartialOrd, Ord, Show)]\n pub struct MovePathIndex(uint);\n \n impl MovePathIndex {\n@@ -96,7 +96,7 @@ static InvalidMovePathIndex: MovePathIndex =\n     MovePathIndex(uint::MAX);\n \n /// Index into `MoveData.moves`, used like a pointer\n-#[deriving(Copy, PartialEq)]\n+#[derive(Copy, PartialEq)]\n pub struct MoveIndex(uint);\n \n impl MoveIndex {\n@@ -128,15 +128,15 @@ pub struct MovePath<'tcx> {\n     pub next_sibling: MovePathIndex,\n }\n \n-#[deriving(Copy, PartialEq, Show)]\n+#[derive(Copy, PartialEq, Show)]\n pub enum MoveKind {\n     Declared,   // When declared, variables start out \"moved\".\n     MoveExpr,   // Expression or binding that moves a variable\n     MovePat,    // By-move binding\n     Captured    // Closure creation that moves a value\n }\n \n-#[deriving(Copy)]\n+#[derive(Copy)]\n pub struct Move {\n     /// Path being moved.\n     pub path: MovePathIndex,\n@@ -151,7 +151,7 @@ pub struct Move {\n     pub next_move: MoveIndex\n }\n \n-#[deriving(Copy)]\n+#[derive(Copy)]\n pub struct Assignment {\n     /// Path being assigned.\n     pub path: MovePathIndex,\n@@ -163,7 +163,7 @@ pub struct Assignment {\n     pub span: Span,\n }\n \n-#[deriving(Copy)]\n+#[derive(Copy)]\n pub struct VariantMatch {\n     /// downcast to the variant.\n     pub path: MovePathIndex,\n@@ -178,12 +178,12 @@ pub struct VariantMatch {\n     pub mode: euv::MatchMode\n }\n \n-#[deriving(Clone, Copy)]\n+#[derive(Clone, Copy)]\n pub struct MoveDataFlowOperator;\n \n pub type MoveDataFlow<'a, 'tcx> = DataFlowContext<'a, 'tcx, MoveDataFlowOperator>;\n \n-#[deriving(Clone, Copy)]\n+#[derive(Clone, Copy)]\n pub struct AssignDataFlowOperator;\n \n pub type AssignDataFlow<'a, 'tcx> = DataFlowContext<'a, 'tcx, AssignDataFlowOperator>;"}, {"sha": "388cbf2f18b7ca142f01cb482cd8d80ae28827d5", "filename": "src/librustc_borrowck/graphviz.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc_borrowck%2Fgraphviz.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc_borrowck%2Fgraphviz.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fgraphviz.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -26,7 +26,7 @@ use rustc::middle::dataflow;\n use std::rc::Rc;\n use std::borrow::IntoCow;\n \n-#[deriving(Show, Copy)]\n+#[derive(Show, Copy)]\n pub enum Variant {\n     Loans,\n     Moves,"}, {"sha": "1455aa3c99bb3680403e7a33897672319d1187cf", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n use rustc::session::Session;\n-use rustc::session::config::{mod, Input, OutputFilenames};\n+use rustc::session::config::{self, Input, OutputFilenames};\n use rustc::session::search_paths::PathKind;\n use rustc::lint;\n use rustc::metadata::creader;"}, {"sha": "d972229e7c75b25f08e3cbf9aadd73b66357f64c", "filename": "src/librustc_driver/pretty.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc_driver%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc_driver%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fpretty.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -23,25 +23,25 @@ use rustc::middle::ty;\n use rustc::middle::cfg;\n use rustc::middle::cfg::graphviz::LabelledCFG;\n use rustc::session::Session;\n-use rustc::session::config::{mod, Input};\n+use rustc::session::config::{self, Input};\n use rustc::util::ppaux;\n use rustc_borrowck as borrowck;\n use rustc_borrowck::graphviz as borrowck_dot;\n \n use syntax::ast;\n-use syntax::ast_map::{mod, blocks, NodePrinter};\n+use syntax::ast_map::{self, blocks, NodePrinter};\n use syntax::codemap;\n-use syntax::fold::{mod, Folder};\n+use syntax::fold::{self, Folder};\n use syntax::print::{pp, pprust};\n use syntax::ptr::P;\n \n use graphviz as dot;\n \n-use std::io::{mod, MemReader};\n+use std::io::{self, MemReader};\n use std::option;\n use std::str::FromStr;\n \n-#[deriving(Copy, PartialEq, Show)]\n+#[derive(Copy, PartialEq, Show)]\n pub enum PpSourceMode {\n     PpmNormal,\n     PpmEveryBodyLoops,\n@@ -52,7 +52,7 @@ pub enum PpSourceMode {\n     PpmExpandedHygiene,\n }\n \n-#[deriving(Copy, PartialEq, Show)]\n+#[derive(Copy, PartialEq, Show)]\n pub enum PpMode {\n     PpmSource(PpSourceMode),\n     PpmFlowGraph,\n@@ -323,7 +323,7 @@ fn gather_flowgraph_variants(sess: &Session) -> Vec<borrowck_dot::Variant> {\n     variants\n }\n \n-#[deriving(Clone, Show)]\n+#[derive(Clone, Show)]\n pub enum UserIdentifiedItem {\n     ItemViaNode(ast::NodeId),\n     ItemViaPath(Vec<String>),"}, {"sha": "ab41ade576a5898c4dd3f3dda73a54ff672974d4", "filename": "src/librustc_driver/test.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc_driver%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc_driver%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Ftest.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -15,19 +15,19 @@ use diagnostic::Emitter;\n use driver;\n use rustc_resolve as resolve;\n use rustc_typeck::middle::lang_items;\n-use rustc_typeck::middle::region::{mod, CodeExtent};\n+use rustc_typeck::middle::region::{self, CodeExtent};\n use rustc_typeck::middle::resolve_lifetime;\n use rustc_typeck::middle::stability;\n use rustc_typeck::middle::subst;\n use rustc_typeck::middle::subst::Subst;\n-use rustc_typeck::middle::ty::{mod, Ty};\n+use rustc_typeck::middle::ty::{self, Ty};\n use rustc_typeck::middle::infer::combine::Combine;\n use rustc_typeck::middle::infer;\n use rustc_typeck::middle::infer::lub::Lub;\n use rustc_typeck::middle::infer::glb::Glb;\n use rustc_typeck::middle::infer::sub::Sub;\n use rustc_typeck::util::ppaux::{ty_to_string, Repr, UserString};\n-use rustc::session::{mod,config};\n+use rustc::session::{self,config};\n use syntax::{abi, ast, ast_map};\n use syntax::codemap;\n use syntax::codemap::{Span, CodeMap, DUMMY_SP};"}, {"sha": "464f9f98e7ffccae02061d41c445edf02cdac77c", "filename": "src/librustc_llvm/diagnostic.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc_llvm%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc_llvm%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Fdiagnostic.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -17,7 +17,7 @@ use libc::c_char;\n \n use {ValueRef, TwineRef, DebugLocRef, DiagnosticInfoRef};\n \n-#[deriving(Copy)]\n+#[derive(Copy)]\n pub enum OptimizationDiagnosticKind {\n     OptimizationRemark,\n     OptimizationMissed,\n@@ -68,7 +68,7 @@ impl OptimizationDiagnostic {\n     }\n }\n \n-#[deriving(Copy)]\n+#[derive(Copy)]\n pub enum Diagnostic {\n     Optimization(OptimizationDiagnostic),\n "}, {"sha": "2ec5f37634afb35474c708bae64d1e8e9538d023", "filename": "src/librustc_llvm/lib.rs", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc_llvm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc_llvm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Flib.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -68,7 +68,7 @@ pub const False: Bool = 0 as Bool;\n \n // Consts for the LLVM CallConv type, pre-cast to uint.\n \n-#[deriving(Copy, PartialEq)]\n+#[derive(Copy, PartialEq)]\n pub enum CallConv {\n     CCallConv = 0,\n     FastCallConv = 8,\n@@ -78,7 +78,7 @@ pub enum CallConv {\n     X86_64_Win64 = 79,\n }\n \n-#[deriving(Copy)]\n+#[derive(Copy)]\n pub enum Visibility {\n     LLVMDefaultVisibility = 0,\n     HiddenVisibility = 1,\n@@ -89,7 +89,7 @@ pub enum Visibility {\n // DLLExportLinkage, GhostLinkage and LinkOnceODRAutoHideLinkage.\n // LinkerPrivateLinkage and LinkerPrivateWeakLinkage are not included either;\n // they've been removed in upstream LLVM commit r203866.\n-#[deriving(Copy)]\n+#[derive(Copy)]\n pub enum Linkage {\n     ExternalLinkage = 0,\n     AvailableExternallyLinkage = 1,\n@@ -105,7 +105,7 @@ pub enum Linkage {\n }\n \n #[repr(C)]\n-#[deriving(Copy, Show)]\n+#[derive(Copy, Show)]\n pub enum DiagnosticSeverity {\n     Error,\n     Warning,\n@@ -146,7 +146,7 @@ bitflags! {\n \n \n #[repr(u64)]\n-#[deriving(Copy)]\n+#[derive(Copy)]\n pub enum OtherAttribute {\n     // The following are not really exposed in\n     // the LLVM c api so instead to add these\n@@ -167,13 +167,13 @@ pub enum OtherAttribute {\n     NonNullAttribute = 1 << 44,\n }\n \n-#[deriving(Copy)]\n+#[derive(Copy)]\n pub enum SpecialAttribute {\n     DereferenceableAttribute(u64)\n }\n \n #[repr(C)]\n-#[deriving(Copy)]\n+#[derive(Copy)]\n pub enum AttributeSet {\n     ReturnIndex = 0,\n     FunctionIndex = !0\n@@ -265,7 +265,7 @@ impl AttrBuilder {\n }\n \n // enum for the LLVM IntPredicate type\n-#[deriving(Copy)]\n+#[derive(Copy)]\n pub enum IntPredicate {\n     IntEQ = 32,\n     IntNE = 33,\n@@ -280,7 +280,7 @@ pub enum IntPredicate {\n }\n \n // enum for the LLVM RealPredicate type\n-#[deriving(Copy)]\n+#[derive(Copy)]\n pub enum RealPredicate {\n     RealPredicateFalse = 0,\n     RealOEQ = 1,\n@@ -302,7 +302,7 @@ pub enum RealPredicate {\n \n // The LLVM TypeKind type - must stay in sync with the def of\n // LLVMTypeKind in llvm/include/llvm-c/Core.h\n-#[deriving(Copy, PartialEq)]\n+#[derive(Copy, PartialEq)]\n #[repr(C)]\n pub enum TypeKind {\n     Void      = 0,\n@@ -324,7 +324,7 @@ pub enum TypeKind {\n }\n \n #[repr(C)]\n-#[deriving(Copy)]\n+#[derive(Copy)]\n pub enum AtomicBinOp {\n     AtomicXchg = 0,\n     AtomicAdd  = 1,\n@@ -340,7 +340,7 @@ pub enum AtomicBinOp {\n }\n \n #[repr(C)]\n-#[deriving(Copy)]\n+#[derive(Copy)]\n pub enum AtomicOrdering {\n     NotAtomic = 0,\n     Unordered = 1,\n@@ -354,13 +354,13 @@ pub enum AtomicOrdering {\n \n // Consts for the LLVMCodeGenFileType type (in include/llvm/c/TargetMachine.h)\n #[repr(C)]\n-#[deriving(Copy)]\n+#[derive(Copy)]\n pub enum FileType {\n     AssemblyFileType = 0,\n     ObjectFileType = 1\n }\n \n-#[deriving(Copy)]\n+#[derive(Copy)]\n pub enum MetadataType {\n     MD_dbg = 0,\n     MD_tbaa = 1,\n@@ -371,13 +371,13 @@ pub enum MetadataType {\n }\n \n // Inline Asm Dialect\n-#[deriving(Copy)]\n+#[derive(Copy)]\n pub enum AsmDialect {\n     AD_ATT   = 0,\n     AD_Intel = 1\n }\n \n-#[deriving(Copy, PartialEq, Clone)]\n+#[derive(Copy, PartialEq, Clone)]\n #[repr(C)]\n pub enum CodeGenOptLevel {\n     CodeGenLevelNone = 0,\n@@ -386,7 +386,7 @@ pub enum CodeGenOptLevel {\n     CodeGenLevelAggressive = 3,\n }\n \n-#[deriving(Copy, PartialEq)]\n+#[derive(Copy, PartialEq)]\n #[repr(C)]\n pub enum RelocMode {\n     RelocDefault = 0,\n@@ -396,7 +396,7 @@ pub enum RelocMode {\n }\n \n #[repr(C)]\n-#[deriving(Copy)]\n+#[derive(Copy)]\n pub enum CodeGenModel {\n     CodeModelDefault = 0,\n     CodeModelJITDefault = 1,\n@@ -407,7 +407,7 @@ pub enum CodeGenModel {\n }\n \n #[repr(C)]\n-#[deriving(Copy)]\n+#[derive(Copy)]\n pub enum DiagnosticKind {\n     DK_InlineAsm = 0,\n     DK_StackSize,\n@@ -513,7 +513,7 @@ pub mod debuginfo {\n     pub type DIArray = DIDescriptor;\n     pub type DISubrange = DIDescriptor;\n \n-    #[deriving(Copy)]\n+    #[derive(Copy)]\n     pub enum DIDescriptorFlags {\n       FlagPrivate            = 1 << 0,\n       FlagProtected          = 1 << 1,"}, {"sha": "d7c1a4fe17b2fa200509dad0332536fcde2eb1fd", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -15,13 +15,13 @@\n \n use {DefModifiers, PUBLIC, IMPORTABLE};\n use ImportDirective;\n-use ImportDirectiveSubclass::{mod, SingleImport, GlobImport};\n+use ImportDirectiveSubclass::{self, SingleImport, GlobImport};\n use ImportResolution;\n use Module;\n use ModuleKind::*;\n use Namespace::{TypeNS, ValueNS};\n use NameBindings;\n-use ParentLink::{mod, ModuleParentLink, BlockParentLink};\n+use ParentLink::{self, ModuleParentLink, BlockParentLink};\n use Resolver;\n use RibKind::*;\n use Shadowable;\n@@ -55,19 +55,19 @@ use syntax::ast::{ViewItemUse, ViewPathGlob, ViewPathList, ViewPathSimple};\n use syntax::ast::{Visibility};\n use syntax::ast::TyPath;\n use syntax::ast;\n-use syntax::ast_util::{mod, PostExpansionMethod, local_def};\n+use syntax::ast_util::{self, PostExpansionMethod, local_def};\n use syntax::attr::AttrMetaMethods;\n-use syntax::parse::token::{mod, special_idents};\n+use syntax::parse::token::{self, special_idents};\n use syntax::codemap::{Span, DUMMY_SP};\n-use syntax::visit::{mod, Visitor};\n+use syntax::visit::{self, Visitor};\n \n use std::mem::replace;\n use std::ops::{Deref, DerefMut};\n use std::rc::Rc;\n \n // Specifies how duplicates should be handled when adding a child item if\n // another item exists with the same name in some namespace.\n-#[deriving(Copy, PartialEq)]\n+#[derive(Copy, PartialEq)]\n enum DuplicateCheckingMode {\n     ForbidDuplicateModules,\n     ForbidDuplicateTypesAndModules,\n@@ -76,7 +76,7 @@ enum DuplicateCheckingMode {\n     OverwriteDuplicates\n }\n \n-#[deriving(Copy, PartialEq)]\n+#[derive(Copy, PartialEq)]\n enum NamespaceError {\n     NoError,\n     ModuleError,"}, {"sha": "26b1058d18341781742acd22b0f7f12934e1391c", "filename": "src/librustc_resolve/check_unused.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc_resolve%2Fcheck_unused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc_resolve%2Fcheck_unused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fcheck_unused.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -28,7 +28,7 @@ use syntax::ast;\n use syntax::ast::{ViewItem, ViewItemExternCrate, ViewItemUse};\n use syntax::ast::{ViewPathGlob, ViewPathList, ViewPathSimple};\n use syntax::codemap::{Span, DUMMY_SP};\n-use syntax::visit::{mod, Visitor};\n+use syntax::visit::{self, Visitor};\n \n struct UnusedImportCheckVisitor<'a, 'b:'a, 'tcx:'b> {\n     resolver: &'a mut Resolver<'b, 'tcx>"}, {"sha": "3be7aa294f17a759ae795ec02a5d0e630747382c", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 27, "deletions": 27, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -81,10 +81,10 @@ use syntax::ast_map;\n use syntax::ast_util::{PostExpansionMethod, local_def, walk_pat};\n use syntax::attr::AttrMetaMethods;\n use syntax::ext::mtwt;\n-use syntax::parse::token::{mod, special_names, special_idents};\n+use syntax::parse::token::{self, special_names, special_idents};\n use syntax::codemap::{Span, Pos};\n use syntax::owned_slice::OwnedSlice;\n-use syntax::visit::{mod, Visitor};\n+use syntax::visit::{self, Visitor};\n \n use std::collections::{HashMap, HashSet};\n use std::collections::hash_map::Entry::{Occupied, Vacant};\n@@ -98,7 +98,7 @@ mod check_unused;\n mod record_exports;\n mod build_reduced_graph;\n \n-#[deriving(Copy)]\n+#[derive(Copy)]\n struct BindingInfo {\n     span: Span,\n     binding_mode: BindingMode,\n@@ -107,14 +107,14 @@ struct BindingInfo {\n // Map from the name in a pattern to its binding mode.\n type BindingMap = HashMap<Name, BindingInfo>;\n \n-#[deriving(Copy, PartialEq)]\n+#[derive(Copy, PartialEq)]\n enum PatternBindingMode {\n     RefutableMode,\n     LocalIrrefutableMode,\n     ArgumentIrrefutableMode,\n }\n \n-#[deriving(Copy, PartialEq, Eq, Hash, Show)]\n+#[derive(Copy, PartialEq, Eq, Hash, Show)]\n enum Namespace {\n     TypeNS,\n     ValueNS\n@@ -123,7 +123,7 @@ enum Namespace {\n /// A NamespaceResult represents the result of resolving an import in\n /// a particular namespace. The result is either definitely-resolved,\n /// definitely- unresolved, or unknown.\n-#[deriving(Clone)]\n+#[derive(Clone)]\n enum NamespaceResult {\n     /// Means that resolve hasn't gathered enough information yet to determine\n     /// whether the name is bound in this namespace. (That is, it hasn't\n@@ -180,7 +180,7 @@ impl<'a, 'v, 'tcx> Visitor<'v> for Resolver<'a, 'tcx> {\n }\n \n /// Contains data for specific types of import directives.\n-#[deriving(Copy,Show)]\n+#[derive(Copy,Show)]\n enum ImportDirectiveSubclass {\n     SingleImport(Name /* target */, Name /* source */),\n     GlobImport\n@@ -209,7 +209,7 @@ enum FallbackSuggestion {\n     TraitMethod(String),\n }\n \n-#[deriving(Copy)]\n+#[derive(Copy)]\n enum TypeParameters<'a> {\n     NoTypeParameters,\n     HasTypeParameters(\n@@ -229,7 +229,7 @@ enum TypeParameters<'a> {\n \n // The rib kind controls the translation of local\n // definitions (`DefLocal`) to upvars (`DefUpvar`).\n-#[deriving(Copy, Show)]\n+#[derive(Copy, Show)]\n enum RibKind {\n     // No translation needs to be applied.\n     NormalRibKind,\n@@ -253,13 +253,13 @@ enum RibKind {\n }\n \n // Methods can be required or provided. RequiredMethod methods only occur in traits.\n-#[deriving(Copy, Show)]\n+#[derive(Copy, Show)]\n enum MethodSort {\n     RequiredMethod,\n     ProvidedMethod(NodeId)\n }\n \n-#[deriving(Copy)]\n+#[derive(Copy)]\n enum UseLexicalScopeFlag {\n     DontUseLexicalScope,\n     UseLexicalScope\n@@ -270,7 +270,7 @@ enum ModulePrefixResult {\n     PrefixFound(Rc<Module>, uint)\n }\n \n-#[deriving(Copy, PartialEq)]\n+#[derive(Copy, PartialEq)]\n enum NameSearchType {\n     /// We're doing a name search in order to resolve a `use` directive.\n     ImportSearch,\n@@ -280,15 +280,15 @@ enum NameSearchType {\n     PathSearch,\n }\n \n-#[deriving(Copy)]\n+#[derive(Copy)]\n enum BareIdentifierPatternResolution {\n     FoundStructOrEnumVariant(Def, LastPrivate),\n     FoundConst(Def, LastPrivate),\n     BareIdentifierPatternUnresolved\n }\n \n /// One local scope.\n-#[deriving(Show)]\n+#[derive(Show)]\n struct Rib {\n     bindings: HashMap<Name, DefLike>,\n     kind: RibKind,\n@@ -304,14 +304,14 @@ impl Rib {\n }\n \n /// Whether an import can be shadowed by another import.\n-#[deriving(Show,PartialEq,Clone,Copy)]\n+#[derive(Show,PartialEq,Clone,Copy)]\n enum Shadowable {\n     Always,\n     Never\n }\n \n /// One import directive.\n-#[deriving(Show)]\n+#[derive(Show)]\n struct ImportDirective {\n     module_path: Vec<Name>,\n     subclass: ImportDirectiveSubclass,\n@@ -341,7 +341,7 @@ impl ImportDirective {\n }\n \n /// The item that an import resolves to.\n-#[deriving(Clone,Show)]\n+#[derive(Clone,Show)]\n struct Target {\n     target_module: Rc<Module>,\n     bindings: Rc<NameBindings>,\n@@ -362,7 +362,7 @@ impl Target {\n }\n \n /// An ImportResolution represents a particular `use` directive.\n-#[deriving(Show)]\n+#[derive(Show)]\n struct ImportResolution {\n     /// Whether this resolution came from a `use` or a `pub use`. Note that this\n     /// should *not* be used whenever resolution is being performed, this is\n@@ -442,15 +442,15 @@ impl ImportResolution {\n }\n \n /// The link from a module up to its nearest parent node.\n-#[deriving(Clone,Show)]\n+#[derive(Clone,Show)]\n enum ParentLink {\n     NoParentLink,\n     ModuleParentLink(Weak<Module>, Name),\n     BlockParentLink(Weak<Module>, NodeId)\n }\n \n /// The type of module this is.\n-#[deriving(Copy, PartialEq, Show)]\n+#[derive(Copy, PartialEq, Show)]\n enum ModuleKind {\n     NormalModuleKind,\n     TraitModuleKind,\n@@ -542,15 +542,15 @@ impl fmt::Show for Module {\n }\n \n bitflags! {\n-    #[deriving(Show)]\n+    #[derive(Show)]\n     flags DefModifiers: u8 {\n         const PUBLIC            = 0b0000_0001,\n         const IMPORTABLE        = 0b0000_0010,\n     }\n }\n \n // Records a possibly-private type definition.\n-#[deriving(Clone,Show)]\n+#[derive(Clone,Show)]\n struct TypeNsDef {\n     modifiers: DefModifiers, // see note in ImportResolution about how to use this\n     module_def: Option<Rc<Module>>,\n@@ -559,7 +559,7 @@ struct TypeNsDef {\n }\n \n // Records a possibly-private value definition.\n-#[deriving(Clone, Copy, Show)]\n+#[derive(Clone, Copy, Show)]\n struct ValueNsDef {\n     modifiers: DefModifiers, // see note in ImportResolution about how to use this\n     def: Def,\n@@ -568,14 +568,14 @@ struct ValueNsDef {\n \n // Records the definitions (at most one for each namespace) that a name is\n // bound to.\n-#[deriving(Show)]\n+#[derive(Show)]\n struct NameBindings {\n     type_def: RefCell<Option<TypeNsDef>>,   //< Meaning in type namespace.\n     value_def: RefCell<Option<ValueNsDef>>, //< Meaning in value namespace.\n }\n \n /// Ways in which a trait can be referenced\n-#[deriving(Copy)]\n+#[derive(Copy)]\n enum TraitReferenceType {\n     TraitImplementation,             // impl SomeTrait for T { ... }\n     TraitDerivation,                 // trait T : SomeTrait { ... }\n@@ -904,7 +904,7 @@ struct Resolver<'a, 'tcx:'a> {\n     used_crates: HashSet<CrateNum>,\n }\n \n-#[deriving(PartialEq)]\n+#[derive(PartialEq)]\n enum FallbackChecks {\n     Everything,\n     OnlyTraitAndStatics\n@@ -4834,7 +4834,7 @@ pub struct CrateMap {\n     pub glob_map: Option<GlobMap>\n }\n \n-#[deriving(PartialEq,Copy)]\n+#[derive(PartialEq,Copy)]\n pub enum MakeGlobMap {\n     Yes,\n     No"}, {"sha": "84fd3c936719b7a94eeddd572d54a19516981631", "filename": "src/librustc_resolve/record_exports.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc_resolve%2Frecord_exports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc_resolve%2Frecord_exports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Frecord_exports.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -19,7 +19,7 @@\n // processing.\n \n use {Module, NameBindings, Resolver};\n-use Namespace::{mod, TypeNS, ValueNS};\n+use Namespace::{self, TypeNS, ValueNS};\n \n use build_reduced_graph;\n "}, {"sha": "8fbeadc55b38751cb58cf4de42319cf466de8c1b", "filename": "src/librustc_trans/back/link.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc_trans%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc_trans%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Flink.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -22,7 +22,7 @@ use metadata::common::LinkMeta;\n use metadata::{encoder, cstore, filesearch, csearch, creader};\n use metadata::filesearch::FileDoesntMatch;\n use trans::{CrateContext, CrateTranslation, gensym_name};\n-use middle::ty::{mod, Ty};\n+use middle::ty::{self, Ty};\n use util::common::time;\n use util::ppaux;\n use util::sha2::{Digest, Sha256};"}, {"sha": "c6488ec6638a3efe83d1a199c0d87277c592d5c0", "filename": "src/librustc_trans/back/lto.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc_trans%2Fback%2Flto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc_trans%2Fback%2Flto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Flto.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -10,7 +10,7 @@\n \n use super::link;\n use super::write;\n-use rustc::session::{mod, config};\n+use rustc::session::{self, config};\n use llvm;\n use llvm::archive_ro::ArchiveRO;\n use llvm::{ModuleRef, TargetMachineRef, True, False};"}, {"sha": "33011d9e35c106b959033561f4c63b88e7fed919", "filename": "src/librustc_trans/back/write.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Fwrite.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -34,7 +34,7 @@ use std::sync::mpsc::channel;\n use std::thread;\n use libc::{c_uint, c_int, c_void};\n \n-#[deriving(Clone, Copy, PartialEq, PartialOrd, Ord, Eq)]\n+#[derive(Clone, Copy, PartialEq, PartialOrd, Ord, Eq)]\n pub enum OutputType {\n     OutputTypeBitcode,\n     OutputTypeAssembly,\n@@ -86,7 +86,7 @@ struct Diagnostic {\n // We use an Arc instead of just returning a list of diagnostics from the\n // child task because we need to make sure that the messages are seen even\n // if the child task panics (for example, when `fatal` is called).\n-#[deriving(Clone)]\n+#[derive(Clone)]\n struct SharedEmitter {\n     buffer: Arc<Mutex<Vec<Diagnostic>>>,\n }\n@@ -256,7 +256,7 @@ fn create_target_machine(sess: &Session) -> TargetMachineRef {\n \n \n /// Module-specific configuration for `optimize_and_codegen`.\n-#[deriving(Clone)]\n+#[derive(Clone)]\n struct ModuleConfig {\n     /// LLVM TargetMachine to use for codegen.\n     tm: TargetMachineRef,"}, {"sha": "55bdff819101182f7145c6b24b2f4ecc801e68f4", "filename": "src/librustc_trans/save/mod.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc_trans%2Fsave%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc_trans%2Fsave%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fsave%2Fmod.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -30,20 +30,20 @@\n use session::Session;\n \n use middle::def;\n-use middle::ty::{mod, Ty};\n+use middle::ty::{self, Ty};\n \n use std::cell::Cell;\n-use std::io::{mod, File, fs};\n+use std::io::{self, File, fs};\n use std::os;\n \n-use syntax::ast_util::{mod, PostExpansionMethod};\n-use syntax::ast::{mod, NodeId, DefId};\n+use syntax::ast_util::{self, PostExpansionMethod};\n+use syntax::ast::{self, NodeId, DefId};\n use syntax::ast_map::NodeItem;\n use syntax::attr;\n use syntax::codemap::*;\n-use syntax::parse::token::{mod, get_ident, keywords};\n+use syntax::parse::token::{self, get_ident, keywords};\n use syntax::owned_slice::OwnedSlice;\n-use syntax::visit::{mod, Visitor};\n+use syntax::visit::{self, Visitor};\n use syntax::print::pprust::{path_to_string,ty_to_string};\n use syntax::ptr::P;\n "}, {"sha": "679a8d2d07bc88acf3533b5b30cd03646936b9a1", "filename": "src/librustc_trans/save/recorder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc_trans%2Fsave%2Frecorder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc_trans%2Fsave%2Frecorder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fsave%2Frecorder.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -61,7 +61,7 @@ macro_rules! svec {\n     })\n }\n \n-#[deriving(Copy,Show)]\n+#[derive(Copy,Show)]\n pub enum Row {\n     Variable,\n     Enum,"}, {"sha": "14c6475c87df9199c9425c1a8a33353da8dcfba5", "filename": "src/librustc_trans/save/span_utils.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc_trans%2Fsave%2Fspan_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc_trans%2Fsave%2Fspan_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fsave%2Fspan_utils.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -21,7 +21,7 @@ use syntax::parse::lexer::{Reader,StringReader};\n use syntax::parse::token;\n use syntax::parse::token::{keywords, Token};\n \n-#[deriving(Clone)]\n+#[derive(Clone)]\n pub struct SpanUtils<'a> {\n     pub sess: &'a Session,\n     pub err_count: Cell<int>,"}, {"sha": "50cbe664b90798d07853a7b8a7647e02fcaca572", "filename": "src/librustc_trans/trans/_match.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc_trans%2Ftrans%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc_trans%2Ftrans%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2F_match.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -193,7 +193,7 @@ use llvm::{ValueRef, BasicBlockRef};\n use middle::check_match::StaticInliner;\n use middle::check_match;\n use middle::const_eval;\n-use middle::def::{mod, DefMap};\n+use middle::def::{self, DefMap};\n use middle::expr_use_visitor as euv;\n use middle::lang_items::StrEqFnLangItem;\n use middle::mem_categorization as mc;\n@@ -204,15 +204,15 @@ use trans::build::{AddCase, And, BitCast, Br, CondBr, GEPi, InBoundsGEP, Load};\n use trans::build::{Mul, Not, Store, Sub, add_comment};\n use trans::build;\n use trans::callee;\n-use trans::cleanup::{mod, CleanupMethods};\n+use trans::cleanup::{self, CleanupMethods};\n use trans::common::*;\n use trans::consts;\n use trans::datum::*;\n-use trans::expr::{mod, Dest};\n+use trans::expr::{self, Dest};\n use trans::tvec;\n use trans::type_of;\n use trans::debuginfo;\n-use middle::ty::{mod, Ty};\n+use middle::ty::{self, Ty};\n use session::config::FullDebugInfo;\n use util::common::indenter;\n use util::nodemap::FnvHashMap;\n@@ -227,7 +227,7 @@ use syntax::codemap::Span;\n use syntax::fold::Folder;\n use syntax::ptr::P;\n \n-#[deriving(Copy, Show)]\n+#[derive(Copy, Show)]\n struct ConstantExpr<'a>(&'a ast::Expr);\n \n impl<'a> ConstantExpr<'a> {\n@@ -242,7 +242,7 @@ impl<'a> ConstantExpr<'a> {\n }\n \n // An option identifying a branch (either a literal, an enum variant or a range)\n-#[deriving(Show)]\n+#[derive(Show)]\n enum Opt<'a, 'tcx> {\n     ConstantValue(ConstantExpr<'a>),\n     ConstantRange(ConstantExpr<'a>, ConstantExpr<'a>),\n@@ -298,7 +298,7 @@ impl<'a, 'tcx> Opt<'a, 'tcx> {\n     }\n }\n \n-#[deriving(Copy, PartialEq)]\n+#[derive(Copy, PartialEq)]\n pub enum BranchKind {\n     NoBranch,\n     Single,\n@@ -313,7 +313,7 @@ pub enum OptResult<'blk, 'tcx: 'blk> {\n     LowerBound(Result<'blk, 'tcx>)\n }\n \n-#[deriving(Clone, Copy)]\n+#[derive(Clone, Copy)]\n pub enum TransBindingMode {\n     TrByCopy(/* llbinding */ ValueRef),\n     TrByMove,\n@@ -327,7 +327,7 @@ pub enum TransBindingMode {\n /// - `trmode` is the trans binding mode\n /// - `id` is the node id of the binding\n /// - `ty` is the Rust type of the binding\n-#[deriving(Clone, Copy)]\n+#[derive(Clone, Copy)]\n pub struct BindingInfo<'tcx> {\n     pub llmatch: ValueRef,\n     pub trmode: TransBindingMode,"}, {"sha": "223df5d3a57855dc6e366e875515e4b442b452a7", "filename": "src/librustc_trans/trans/adt.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc_trans%2Ftrans%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc_trans%2Ftrans%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fadt.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -61,7 +61,7 @@ use trans::datum;\n use trans::machine;\n use trans::type_::Type;\n use trans::type_of;\n-use middle::ty::{mod, Ty, UnboxedClosureTyper};\n+use middle::ty::{self, Ty, UnboxedClosureTyper};\n use middle::ty::Disr;\n use syntax::ast;\n use syntax::attr;\n@@ -71,7 +71,7 @@ use util::ppaux::ty_to_string;\n type Hint = attr::ReprAttr;\n \n /// Representations.\n-#[deriving(Eq, PartialEq, Show)]\n+#[derive(Eq, PartialEq, Show)]\n pub enum Repr<'tcx> {\n     /// C-like enums; basically an int.\n     CEnum(IntType, Disr, Disr), // discriminant range (signedness based on the IntType)\n@@ -116,7 +116,7 @@ pub enum Repr<'tcx> {\n }\n \n /// For structs, and struct-like parts of anything fancier.\n-#[deriving(Eq, PartialEq, Show)]\n+#[derive(Eq, PartialEq, Show)]\n pub struct Struct<'tcx> {\n     // If the struct is DST, then the size and alignment do not take into\n     // account the unsized fields of the struct.\n@@ -469,7 +469,7 @@ fn mk_struct<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n     }\n }\n \n-#[deriving(Show)]\n+#[derive(Show)]\n struct IntBounds {\n     slo: i64,\n     shi: i64,"}, {"sha": "58cb2ebd2566c6990e92f66456cea71e30575d2d", "filename": "src/librustc_trans/trans/base.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fbase.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -43,8 +43,8 @@ use middle::lang_items::{LangItem, ExchangeMallocFnLangItem, StartFnLangItem};\n use middle::subst;\n use middle::weak_lang_items;\n use middle::subst::{Subst, Substs};\n-use middle::ty::{mod, Ty, UnboxedClosureTyper};\n-use session::config::{mod, NoDebugInfo, FullDebugInfo};\n+use middle::ty::{self, Ty, UnboxedClosureTyper};\n+use session::config::{self, NoDebugInfo, FullDebugInfo};\n use session::Session;\n use trans::_match;\n use trans::adt;\n@@ -547,7 +547,7 @@ pub fn maybe_name_value(cx: &CrateContext, v: ValueRef, s: &str) {\n \n \n // Used only for creating scalar comparison glue.\n-#[deriving(Copy)]\n+#[derive(Copy)]\n pub enum scalar_type { nil_type, signed_int, unsigned_int, floating_point, }\n \n pub fn compare_scalar_types<'blk, 'tcx>(cx: Block<'blk, 'tcx>,\n@@ -1784,7 +1784,7 @@ pub fn build_return_block<'blk, 'tcx>(fcx: &FunctionContext<'blk, 'tcx>,\n     }\n }\n \n-#[deriving(Clone, Copy, Eq, PartialEq)]\n+#[derive(Clone, Copy, Eq, PartialEq)]\n pub enum IsUnboxedClosureFlag {\n     NotUnboxedClosure,\n     IsUnboxedClosure,\n@@ -2206,7 +2206,7 @@ pub fn llvm_linkage_by_name(name: &str) -> Option<Linkage> {\n \n \n /// Enum describing the origin of an LLVM `Value`, for linkage purposes.\n-#[deriving(Copy)]\n+#[derive(Copy)]\n pub enum ValueOrigin {\n     /// The LLVM `Value` is in this context because the corresponding item was\n     /// assigned to the current compilation unit."}, {"sha": "d3ff432b5e41860f78368853928a8428eeb3d412", "filename": "src/librustc_trans/trans/basic_block.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc_trans%2Ftrans%2Fbasic_block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc_trans%2Ftrans%2Fbasic_block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fbasic_block.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -13,7 +13,7 @@ use llvm::{BasicBlockRef};\n use trans::value::{Users, Value};\n use std::iter::{Filter, Map};\n \n-#[deriving(Copy)]\n+#[derive(Copy)]\n pub struct BasicBlock(pub BasicBlockRef);\n \n pub type Preds = Map<"}, {"sha": "0e38dd0e5b5967d424a7b7ffc2253835b9db1b73", "filename": "src/librustc_trans/trans/cabi.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc_trans%2Ftrans%2Fcabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc_trans%2Ftrans%2Fcabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcabi.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -21,7 +21,7 @@ use trans::cabi_aarch64;\n use trans::cabi_mips;\n use trans::type_::Type;\n \n-#[deriving(Clone, Copy, PartialEq)]\n+#[derive(Clone, Copy, PartialEq)]\n pub enum ArgKind {\n     /// Pass the argument directly using the normal converted\n     /// LLVM type or by coercing to another specified type\n@@ -36,7 +36,7 @@ pub enum ArgKind {\n /// should be passed to or returned from a function\n ///\n /// This is borrowed from clang's ABIInfo.h\n-#[deriving(Clone, Copy)]\n+#[derive(Clone, Copy)]\n pub struct ArgType {\n     pub kind: ArgKind,\n     /// Original LLVM type"}, {"sha": "f59d152fa473cf5b88a8a4e1f63626ba341225e8", "filename": "src/librustc_trans/trans/cabi_x86_64.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc_trans%2Ftrans%2Fcabi_x86_64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc_trans%2Ftrans%2Fcabi_x86_64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcabi_x86_64.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -25,7 +25,7 @@ use trans::type_::Type;\n use std::cmp;\n use std::iter::repeat;\n \n-#[deriving(Clone, Copy, PartialEq)]\n+#[derive(Clone, Copy, PartialEq)]\n enum RegClass {\n     NoClass,\n     Int,"}, {"sha": "f001786bec4e96be9d8a0454d0fd2dbb51047d1e", "filename": "src/librustc_trans/trans/callee.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc_trans%2Ftrans%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc_trans%2Ftrans%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcallee.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -48,7 +48,7 @@ use trans::meth;\n use trans::monomorphize;\n use trans::type_::Type;\n use trans::type_of;\n-use middle::ty::{mod, Ty};\n+use middle::ty::{self, Ty};\n use middle::ty::MethodCall;\n use util::ppaux::Repr;\n use util::ppaux::ty_to_string;\n@@ -58,7 +58,7 @@ use syntax::ast;\n use syntax::ast_map;\n use syntax::ptr::P;\n \n-#[deriving(Copy)]\n+#[derive(Copy)]\n pub struct MethodData {\n     pub llfn: ValueRef,\n     pub llself: ValueRef,\n@@ -1052,7 +1052,7 @@ pub fn trans_args<'a, 'blk, 'tcx>(cx: Block<'blk, 'tcx>,\n     bcx\n }\n \n-#[deriving(Copy)]\n+#[derive(Copy)]\n pub enum AutorefArg {\n     DontAutorefArg,\n     DoAutorefArg(ast::NodeId)"}, {"sha": "59ba56bbbc857cd5871e20ab57e459db285368c9", "filename": "src/librustc_trans/trans/cleanup.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc_trans%2Ftrans%2Fcleanup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc_trans%2Ftrans%2Fcleanup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcleanup.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -27,7 +27,7 @@ use trans::glue;\n // Temporary due to slicing syntax hacks (KILLME)\n //use middle::region;\n use trans::type_::Type;\n-use middle::ty::{mod, Ty};\n+use middle::ty::{self, Ty};\n use std::fmt;\n use syntax::ast;\n use util::ppaux::Repr;\n@@ -51,7 +51,7 @@ pub struct CleanupScope<'blk, 'tcx: 'blk> {\n     cached_landing_pad: Option<BasicBlockRef>,\n }\n \n-#[deriving(Copy, Show)]\n+#[derive(Copy, Show)]\n pub struct CustomScopeIndex {\n     index: uint\n }\n@@ -82,14 +82,14 @@ impl<'blk, 'tcx: 'blk> fmt::Show for CleanupScopeKind<'blk, 'tcx> {\n     }\n }\n \n-#[deriving(Copy, PartialEq, Show)]\n+#[derive(Copy, PartialEq, Show)]\n pub enum EarlyExitLabel {\n     UnwindExit,\n     ReturnExit,\n     LoopExit(ast::NodeId, uint)\n }\n \n-#[deriving(Copy)]\n+#[derive(Copy)]\n pub struct CachedEarlyExit {\n     label: EarlyExitLabel,\n     cleanup_block: BasicBlockRef,\n@@ -107,7 +107,7 @@ pub trait Cleanup<'tcx> {\n \n pub type CleanupObj<'tcx> = Box<Cleanup<'tcx>+'tcx>;\n \n-#[deriving(Copy, Show)]\n+#[derive(Copy, Show)]\n pub enum ScopeId {\n     AstScope(ast::NodeId),\n     CustomScope(CustomScopeIndex)\n@@ -871,7 +871,7 @@ impl EarlyExitLabel {\n ///////////////////////////////////////////////////////////////////////////\n // Cleanup types\n \n-#[deriving(Copy)]\n+#[derive(Copy)]\n pub struct DropValue<'tcx> {\n     is_immediate: bool,\n     must_unwind: bool,\n@@ -909,12 +909,12 @@ impl<'tcx> Cleanup<'tcx> for DropValue<'tcx> {\n     }\n }\n \n-#[deriving(Copy, Show)]\n+#[derive(Copy, Show)]\n pub enum Heap {\n     HeapExchange\n }\n \n-#[deriving(Copy)]\n+#[derive(Copy)]\n pub struct FreeValue<'tcx> {\n     ptr: ValueRef,\n     heap: Heap,\n@@ -948,7 +948,7 @@ impl<'tcx> Cleanup<'tcx> for FreeValue<'tcx> {\n     }\n }\n \n-#[deriving(Copy)]\n+#[derive(Copy)]\n pub struct FreeSlice {\n     ptr: ValueRef,\n     size: ValueRef,\n@@ -983,7 +983,7 @@ impl<'tcx> Cleanup<'tcx> for FreeSlice {\n     }\n }\n \n-#[deriving(Copy)]\n+#[derive(Copy)]\n pub struct LifetimeEnd {\n     ptr: ValueRef,\n }"}, {"sha": "cb5302f7234f91a7932461f41ebd74272fc1dd19", "filename": "src/librustc_trans/trans/closure.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc_trans%2Ftrans%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc_trans%2Ftrans%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fclosure.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -22,10 +22,10 @@ use trans::common::*;\n use trans::datum::{Datum, DatumBlock, Expr, Lvalue, rvalue_scratch_datum};\n use trans::debuginfo;\n use trans::expr;\n-use trans::monomorphize::{mod, MonoId};\n+use trans::monomorphize::{self, MonoId};\n use trans::type_of::*;\n use trans::type_::Type;\n-use middle::ty::{mod, Ty, UnboxedClosureTyper};\n+use middle::ty::{self, Ty, UnboxedClosureTyper};\n use middle::subst::{Substs};\n use session::config::FullDebugInfo;\n use util::ppaux::Repr;\n@@ -101,7 +101,7 @@ use syntax::ast_util;\n //\n // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n \n-#[deriving(Copy)]\n+#[derive(Copy)]\n pub struct EnvValue<'tcx> {\n     action: ast::CaptureClause,\n     datum: Datum<'tcx, Lvalue>\n@@ -348,7 +348,7 @@ fn fill_fn_pair(bcx: Block, pair: ValueRef, llfn: ValueRef, llenvptr: ValueRef)\n     Store(bcx, llenvptr, GEPi(bcx, pair, &[0u, abi::FAT_PTR_EXTRA]));\n }\n \n-#[deriving(PartialEq)]\n+#[derive(PartialEq)]\n pub enum ClosureKind<'tcx> {\n     NotClosure,\n     // See load_environment."}, {"sha": "87a1862186a4d1d7814d0df3840ca46a1cf4cfd6", "filename": "src/librustc_trans/trans/common.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc_trans%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc_trans%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcommon.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -24,7 +24,7 @@ use middle::infer;\n use middle::lang_items::LangItem;\n use middle::mem_categorization as mc;\n use middle::region;\n-use middle::subst::{mod, Subst, Substs};\n+use middle::subst::{self, Subst, Substs};\n use trans::base;\n use trans::build;\n use trans::cleanup;\n@@ -35,7 +35,7 @@ use trans::monomorphize;\n use trans::type_::Type;\n use trans::type_of;\n use middle::traits;\n-use middle::ty::{mod, HasProjectionTypes, Ty};\n+use middle::ty::{self, HasProjectionTypes, Ty};\n use middle::ty_fold;\n use middle::ty_fold::{TypeFolder, TypeFoldable};\n use util::ppaux::Repr;\n@@ -220,7 +220,7 @@ pub fn gensym_name(name: &str) -> PathElem {\n     PathName(token::gensym(format!(\"{}:{}\", name, num)[]))\n }\n \n-#[deriving(Copy)]\n+#[derive(Copy)]\n pub struct tydesc_info<'tcx> {\n     pub ty: Ty<'tcx>,\n     pub tydesc: ValueRef,\n@@ -255,7 +255,7 @@ pub struct tydesc_info<'tcx> {\n  *\n  */\n \n-#[deriving(Copy)]\n+#[derive(Copy)]\n pub struct NodeInfo {\n     pub id: ast::NodeId,\n     pub span: Span,\n@@ -1086,7 +1086,7 @@ pub fn drain_fulfillment_cx<'a,'tcx,T>(span: Span,\n }\n \n // Key used to lookup values supplied for type parameters in an expr.\n-#[deriving(Copy, PartialEq, Show)]\n+#[derive(Copy, PartialEq, Show)]\n pub enum ExprOrMethodCall {\n     // Type parameters for a path like `None::<int>`\n     ExprId(ast::NodeId),"}, {"sha": "4f8554195e56954ec0fd2d30b6ba0a8b0e108ad4", "filename": "src/librustc_trans/trans/consts.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc_trans%2Ftrans%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc_trans%2Ftrans%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fconsts.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -17,11 +17,11 @@ use llvm::{IntEQ, IntNE, IntUGT, IntUGE, IntULT, IntULE, IntSGT, IntSGE, IntSLT,\n use metadata::csearch;\n use middle::{const_eval, def};\n use trans::{adt, closure, consts, debuginfo, expr, inline, machine};\n-use trans::base::{mod, push_ctxt};\n+use trans::base::{self, push_ctxt};\n use trans::common::*;\n use trans::type_::Type;\n use trans::type_of;\n-use middle::ty::{mod, Ty};\n+use middle::ty::{self, Ty};\n use util::ppaux::{Repr, ty_to_string};\n \n use std::c_str::ToCStr;"}, {"sha": "e5a0e2e9234d5ed1b022736dabc0f7e57abe243e", "filename": "src/librustc_trans/trans/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc_trans%2Ftrans%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc_trans%2Ftrans%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcontext.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -22,7 +22,7 @@ use trans::common::{ExternMap,tydesc_info,BuilderRef_res};\n use trans::debuginfo;\n use trans::monomorphize::MonoId;\n use trans::type_::{Type, TypeNames};\n-use middle::ty::{mod, Ty};\n+use middle::ty::{self, Ty};\n use session::config::NoDebugInfo;\n use session::Session;\n use util::ppaux::Repr;"}, {"sha": "d73b3f6b4e420e9ab27b9f153942dafad1129148", "filename": "src/librustc_trans/trans/datum.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc_trans%2Ftrans%2Fdatum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc_trans%2Ftrans%2Fdatum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fdatum.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -23,7 +23,7 @@ use trans::cleanup::CleanupMethods;\n use trans::expr;\n use trans::tvec;\n use trans::type_of;\n-use middle::ty::{mod, Ty};\n+use middle::ty::{self, Ty};\n use util::ppaux::{ty_to_string};\n \n use std::fmt;\n@@ -34,7 +34,7 @@ use syntax::codemap::DUMMY_SP;\n /// describes where the value is stored, what Rust type the value has,\n /// whether it is addressed by reference, and so forth. Please refer\n /// the section on datums in `doc.rs` for more details.\n-#[deriving(Clone, Copy)]\n+#[derive(Clone, Copy)]\n pub struct Datum<'tcx, K> {\n     /// The llvm value.  This is either a pointer to the Rust value or\n     /// the value itself, depending on `kind` below.\n@@ -52,7 +52,7 @@ pub struct DatumBlock<'blk, 'tcx: 'blk, K> {\n     pub datum: Datum<'tcx, K>,\n }\n \n-#[deriving(Show)]\n+#[derive(Show)]\n pub enum Expr {\n     /// a fresh value that was produced and which has no cleanup yet\n     /// because it has not yet \"landed\" into its permanent home\n@@ -64,10 +64,10 @@ pub enum Expr {\n     LvalueExpr,\n }\n \n-#[deriving(Clone, Copy, Show)]\n+#[derive(Clone, Copy, Show)]\n pub struct Lvalue;\n \n-#[deriving(Show)]\n+#[derive(Show)]\n pub struct Rvalue {\n     pub mode: RvalueMode\n }\n@@ -83,7 +83,7 @@ impl Drop for Rvalue {\n     fn drop(&mut self) { }\n }\n \n-#[deriving(Copy, PartialEq, Eq, Hash, Show)]\n+#[derive(Copy, PartialEq, Eq, Hash, Show)]\n pub enum RvalueMode {\n     /// `val` is a pointer to the actual value (and thus has type *T)\n     ByRef,"}, {"sha": "916fcbfe13ef77df022583d3acf82788b4ee20ee", "filename": "src/librustc_trans/trans/debuginfo.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -194,15 +194,15 @@ use llvm;\n use llvm::{ModuleRef, ContextRef, ValueRef};\n use llvm::debuginfo::*;\n use metadata::csearch;\n-use middle::subst::{mod, Substs};\n-use trans::{mod, adt, machine, type_of};\n+use middle::subst::{self, Substs};\n+use trans::{self, adt, machine, type_of};\n use trans::common::*;\n use trans::_match::{BindingInfo, TrByCopy, TrByMove, TrByRef};\n use trans::monomorphize;\n use trans::type_::Type;\n-use middle::ty::{mod, Ty, UnboxedClosureTyper};\n+use middle::ty::{self, Ty, UnboxedClosureTyper};\n use middle::pat_util;\n-use session::config::{mod, FullDebugInfo, LimitedDebugInfo, NoDebugInfo};\n+use session::config::{self, FullDebugInfo, LimitedDebugInfo, NoDebugInfo};\n use util::nodemap::{DefIdMap, NodeMap, FnvHashMap, FnvHashSet};\n use util::ppaux;\n \n@@ -215,7 +215,7 @@ use syntax::util::interner::Interner;\n use syntax::codemap::{Span, Pos};\n use syntax::{ast, codemap, ast_util, ast_map, attr};\n use syntax::ast_util::PostExpansionMethod;\n-use syntax::parse::token::{mod, special_idents};\n+use syntax::parse::token::{self, special_idents};\n \n const DW_LANG_RUST: c_uint = 0x9000;\n \n@@ -248,7 +248,7 @@ const FLAGS_NONE: c_uint = 0;\n //  Public Interface of debuginfo module\n //=-----------------------------------------------------------------------------\n \n-#[deriving(Copy, Show, Hash, Eq, PartialEq, Clone)]\n+#[derive(Copy, Show, Hash, Eq, PartialEq, Clone)]\n struct UniqueTypeId(ast::Name);\n \n // The TypeMap is where the CrateDebugContext holds the type metadata nodes\n@@ -2380,7 +2380,7 @@ impl<'tcx> VariantMemberDescriptionFactory<'tcx> {\n     }\n }\n \n-#[deriving(Copy)]\n+#[derive(Copy)]\n enum EnumDiscriminantInfo {\n     RegularDiscriminant(DIType),\n     OptimizedDiscriminant,\n@@ -3107,7 +3107,7 @@ impl MetadataCreationResult {\n     }\n }\n \n-#[deriving(Copy, PartialEq)]\n+#[derive(Copy, PartialEq)]\n enum DebugLocation {\n     KnownLocation { scope: DIScope, line: uint, col: uint },\n     UnknownLocation"}, {"sha": "c525e6fcfe36ac0fe39225d89ea9188e906e6c2b", "filename": "src/librustc_trans/trans/expr.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -36,14 +36,14 @@ pub use self::Dest::*;\n use self::lazy_binop_ty::*;\n \n use back::abi;\n-use llvm::{mod, ValueRef};\n+use llvm::{self, ValueRef};\n use middle::def;\n use middle::mem_categorization::Typer;\n-use middle::subst::{mod, Substs};\n+use middle::subst::{self, Substs};\n use trans::{_match, adt, asm, base, callee, closure, consts, controlflow};\n use trans::base::*;\n use trans::build::*;\n-use trans::cleanup::{mod, CleanupMethods};\n+use trans::cleanup::{self, CleanupMethods};\n use trans::common::*;\n use trans::datum::*;\n use trans::debuginfo;\n@@ -56,7 +56,7 @@ use trans::type_of;\n use middle::ty::{struct_fields, tup_fields};\n use middle::ty::{AdjustDerefRef, AdjustReifyFnPointer, AdjustAddEnv, AutoUnsafe};\n use middle::ty::{AutoPtr};\n-use middle::ty::{mod, Ty};\n+use middle::ty::{self, Ty};\n use middle::ty::MethodCall;\n use util::common::indenter;\n use util::ppaux::Repr;\n@@ -75,7 +75,7 @@ use std::iter::repeat;\n // These are passed around by the code generating functions to track the\n // destination of a computation's value.\n \n-#[deriving(Copy, PartialEq)]\n+#[derive(Copy, PartialEq)]\n pub enum Dest {\n     SaveIn(ValueRef),\n     Ignore,\n@@ -1978,7 +1978,7 @@ fn float_cast(bcx: Block,\n     } else { llsrc };\n }\n \n-#[deriving(Copy, PartialEq, Show)]\n+#[derive(Copy, PartialEq, Show)]\n pub enum cast_kind {\n     cast_pointer,\n     cast_integral,"}, {"sha": "a4cfec791d8172e5fa32385e83eac4fa7f98cdd3", "filename": "src/librustc_trans/trans/foreign.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc_trans%2Ftrans%2Fforeign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc_trans%2Ftrans%2Fforeign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fforeign.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -23,7 +23,7 @@ use trans::monomorphize;\n use trans::type_::Type;\n use trans::type_of::*;\n use trans::type_of;\n-use middle::ty::{mod, Ty};\n+use middle::ty::{self, Ty};\n use middle::subst::{Substs};\n use std::cmp;\n use std::c_str::ToCStr;"}, {"sha": "0ff53a1af7118190f82f8f630224815677a14ec5", "filename": "src/librustc_trans/trans/glue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc_trans%2Ftrans%2Fglue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc_trans%2Ftrans%2Fglue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fglue.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -34,7 +34,7 @@ use trans::machine::*;\n use trans::tvec;\n use trans::type_::Type;\n use trans::type_of::{type_of, sizing_type_of, align_of};\n-use middle::ty::{mod, Ty};\n+use middle::ty::{self, Ty};\n use util::ppaux::{ty_to_short_str, Repr};\n use util::ppaux;\n "}, {"sha": "6e716538911818bc971e6370f2901b03460c02f7", "filename": "src/librustc_trans/trans/intrinsic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc_trans%2Ftrans%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc_trans%2Ftrans%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fintrinsic.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -28,7 +28,7 @@ use trans::type_of;\n use trans::machine;\n use trans::machine::llsize_of;\n use trans::type_::Type;\n-use middle::ty::{mod, Ty};\n+use middle::ty::{self, Ty};\n use syntax::abi::RustIntrinsic;\n use syntax::ast;\n use syntax::parse::token;"}, {"sha": "ca17f3558aef29a53fe6c8c7469663c4618ee28d", "filename": "src/librustc_trans/trans/meth.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc_trans%2Ftrans%2Fmeth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc_trans%2Ftrans%2Fmeth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fmeth.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -11,7 +11,7 @@\n use arena::TypedArena;\n use back::abi;\n use back::link;\n-use llvm::{mod, ValueRef, get_param};\n+use llvm::{self, ValueRef, get_param};\n use metadata::csearch;\n use middle::subst::{Subst, Substs};\n use middle::subst::VecPerParamSpace;\n@@ -30,7 +30,7 @@ use trans::glue;\n use trans::machine;\n use trans::type_::Type;\n use trans::type_of::*;\n-use middle::ty::{mod, Ty};\n+use middle::ty::{self, Ty};\n use middle::ty::MethodCall;\n use util::ppaux::Repr;\n "}, {"sha": "72c4def15a215d69018908b3d5e23f785568b7fb", "filename": "src/librustc_trans/trans/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc_trans%2Ftrans%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc_trans%2Ftrans%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fmod.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -55,7 +55,7 @@ mod basic_block;\n mod llrepr;\n mod cleanup;\n \n-#[deriving(Copy)]\n+#[derive(Copy)]\n pub struct ModuleTranslation {\n     pub llcx: ContextRef,\n     pub llmod: ModuleRef,"}, {"sha": "51a6bc3bfd5dedd3773c8e6c19c10217bce4812e", "filename": "src/librustc_trans/trans/monomorphize.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc_trans%2Ftrans%2Fmonomorphize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc_trans%2Ftrans%2Fmonomorphize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fmonomorphize.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -23,7 +23,7 @@ use trans::base::{trans_fn, decl_internal_rust_fn};\n use trans::base;\n use trans::common::*;\n use trans::foreign;\n-use middle::ty::{mod, HasProjectionTypes, Ty};\n+use middle::ty::{self, HasProjectionTypes, Ty};\n use util::ppaux::Repr;\n \n use syntax::abi;\n@@ -286,7 +286,7 @@ pub fn monomorphic_fn<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n     (lldecl, true)\n }\n \n-#[deriving(PartialEq, Eq, Hash, Show)]\n+#[derive(PartialEq, Eq, Hash, Show)]\n pub struct MonoId<'tcx> {\n     pub def: ast::DefId,\n     pub params: subst::VecPerParamSpace<Ty<'tcx>>"}, {"sha": "f8d0d4f5c7bf00903c8f28fe780a3efb0608ab23", "filename": "src/librustc_trans/trans/tvec.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc_trans%2Ftrans%2Ftvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc_trans%2Ftrans%2Ftvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Ftvec.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -27,7 +27,7 @@ use trans::machine;\n use trans::machine::{nonzero_llsize_of, llsize_of_alloc};\n use trans::type_::Type;\n use trans::type_of;\n-use middle::ty::{mod, Ty};\n+use middle::ty::{self, Ty};\n use util::ppaux::ty_to_string;\n \n use syntax::ast;\n@@ -89,7 +89,7 @@ pub fn make_drop_glue_unboxed<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n     })\n }\n \n-#[deriving(Copy)]\n+#[derive(Copy)]\n pub struct VecTypes<'tcx> {\n     pub unit_ty: Ty<'tcx>,\n     pub llunit_ty: Type,"}, {"sha": "5b76f5bb8270e77b12f76f81cf664a3cb8aec423", "filename": "src/librustc_trans/trans/type_.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc_trans%2Ftrans%2Ftype_.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc_trans%2Ftrans%2Ftype_.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Ftype_.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -26,7 +26,7 @@ use std::iter::repeat;\n \n use libc::c_uint;\n \n-#[deriving(Clone, Copy, PartialEq, Show)]\n+#[derive(Clone, Copy, PartialEq, Show)]\n #[repr(C)]\n pub struct Type {\n     rf: TypeRef"}, {"sha": "fbbf2ac80d51e278fca7df3504fe0d16417188f6", "filename": "src/librustc_trans/trans/type_of.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc_trans%2Ftrans%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc_trans%2Ftrans%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Ftype_of.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -17,7 +17,7 @@ use trans::adt;\n use trans::common::*;\n use trans::foreign;\n use trans::machine;\n-use middle::ty::{mod, Ty};\n+use middle::ty::{self, Ty};\n use util::ppaux;\n use util::ppaux::Repr;\n \n@@ -446,7 +446,7 @@ pub fn align_of<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>, t: Ty<'tcx>)\n }\n \n // Want refinements! (Or case classes, I guess\n-#[deriving(Copy)]\n+#[derive(Copy)]\n pub enum named_ty {\n     a_struct,\n     an_enum,"}, {"sha": "b6fd2eb57be27c7b8a953b21faef93363038c665", "filename": "src/librustc_trans/trans/value.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc_trans%2Ftrans%2Fvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc_trans%2Ftrans%2Fvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fvalue.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -14,7 +14,7 @@ use trans::basic_block::BasicBlock;\n use trans::common::Block;\n use libc::c_uint;\n \n-#[deriving(Copy)]\n+#[derive(Copy)]\n pub struct Value(pub ValueRef);\n \n macro_rules! opt_val { ($e:expr) => (\n@@ -125,7 +125,7 @@ impl Value {\n }\n \n /// Wrapper for LLVM UseRef\n-#[deriving(Copy)]\n+#[derive(Copy)]\n pub struct Use(UseRef);\n \n impl Use {"}, {"sha": "1d62733875e0047da75a52697bbd8b4107d09f89", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -53,13 +53,13 @@ use middle::def;\n use middle::resolve_lifetime as rl;\n use middle::subst::{FnSpace, TypeSpace, SelfSpace, Subst, Substs};\n use middle::subst::{VecPerParamSpace};\n-use middle::ty::{mod, RegionEscape, Ty};\n-use rscope::{mod, UnelidableRscope, RegionScope, SpecificRscope,\n+use middle::ty::{self, RegionEscape, Ty};\n+use rscope::{self, UnelidableRscope, RegionScope, SpecificRscope,\n              ShiftedRscope, BindingRscope};\n use TypeAndSubsts;\n use util::common::ErrorReported;\n use util::nodemap::DefIdMap;\n-use util::ppaux::{mod, Repr, UserString};\n+use util::ppaux::{self, Repr, UserString};\n \n use std::rc::Rc;\n use std::iter::{repeat, AdditiveIterator};"}, {"sha": "d8b410abf84492056bb9d57b9790eb5531cba866", "filename": "src/librustc_typeck/check/_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2F_match.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -12,7 +12,7 @@ use middle::def;\n use middle::infer;\n use middle::pat_util::{PatIdMap, pat_id_map, pat_is_binding, pat_is_const};\n use middle::subst::{Substs};\n-use middle::ty::{mod, Ty};\n+use middle::ty::{self, Ty};\n use check::{check_expr, check_expr_has_type, check_expr_with_expectation};\n use check::{check_expr_coercable_to_type, demand, FnCtxt, Expectation};\n use check::{instantiate_path, structurally_resolved_type, valid_range_bounds};"}, {"sha": "26b6d4e0296cd4765fc86f9e3e0dbfc344d8e4cf", "filename": "src/librustc_typeck/check/assoc.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc_typeck%2Fcheck%2Fassoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc_typeck%2Fcheck%2Fassoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fassoc.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -9,9 +9,9 @@\n // except according to those terms.\n \n use middle::infer::InferCtxt;\n-use middle::traits::{mod, FulfillmentContext, Normalized, MiscObligation,\n+use middle::traits::{self, FulfillmentContext, Normalized, MiscObligation,\n                      SelectionContext, ObligationCause};\n-use middle::ty::{mod, HasProjectionTypes};\n+use middle::ty::{self, HasProjectionTypes};\n use middle::ty_fold::{TypeFoldable, TypeFolder};\n use syntax::ast;\n use syntax::codemap::Span;"}, {"sha": "db84f1dce975110459fe775e623f1f7c19b17c71", "filename": "src/librustc_typeck/check/closure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -16,7 +16,7 @@ use astconv;\n use middle::infer;\n use middle::region::CodeExtent;\n use middle::subst;\n-use middle::ty::{mod, ToPolyTraitRef, Ty};\n+use middle::ty::{self, ToPolyTraitRef, Ty};\n use rscope::RegionScope;\n use syntax::abi;\n use syntax::ast;"}, {"sha": "5b586bb0b669a2503468444881436e886b75605c", "filename": "src/librustc_typeck/check/demand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -10,7 +10,7 @@\n \n \n use check::FnCtxt;\n-use middle::ty::{mod, Ty};\n+use middle::ty::{self, Ty};\n use middle::infer;\n \n use std::result::Result::{Err, Ok};"}, {"sha": "54d2378256d3a7fef70a78cdcc7456fe4e0f6eec", "filename": "src/librustc_typeck/check/method/confirm.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -10,11 +10,11 @@\n \n use super::probe;\n \n-use check::{mod, FnCtxt, NoPreference, PreferMutLvalue, callee, demand};\n+use check::{self, FnCtxt, NoPreference, PreferMutLvalue, callee, demand};\n use middle::mem_categorization::Typer;\n-use middle::subst::{mod};\n+use middle::subst::{self};\n use middle::traits;\n-use middle::ty::{mod, Ty};\n+use middle::ty::{self, Ty};\n use middle::ty::{MethodCall, MethodCallee, MethodObject, MethodOrigin,\n                  MethodParam, MethodStatic, MethodTraitObject, MethodTypeParam};\n use middle::ty_fold::TypeFoldable;"}, {"sha": "ad43dd84ef6b29180eebc31e181bc04f924764fa", "filename": "src/librustc_typeck/check/method/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -45,7 +45,7 @@ pub enum MethodError {\n \n // A pared down enum describing just the places from which a method\n // candidate can arise. Used for error reporting only.\n-#[deriving(Copy, PartialOrd, Ord, PartialEq, Eq)]\n+#[derive(Copy, PartialOrd, Ord, PartialEq, Eq)]\n pub enum CandidateSource {\n     ImplSource(ast::DefId),\n     TraitSource(/* trait id */ ast::DefId),"}, {"sha": "8adb592633f5edd7070252727e7d573d6f8aa594", "filename": "src/librustc_typeck/check/method/probe.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -18,7 +18,7 @@ use middle::fast_reject;\n use middle::subst;\n use middle::subst::Subst;\n use middle::traits;\n-use middle::ty::{mod, Ty, ToPolyTraitRef};\n+use middle::ty::{self, Ty, ToPolyTraitRef};\n use middle::ty_fold::TypeFoldable;\n use middle::infer;\n use middle::infer::InferCtxt;\n@@ -70,7 +70,7 @@ pub struct Pick<'tcx> {\n     pub kind: PickKind<'tcx>,\n }\n \n-#[deriving(Clone,Show)]\n+#[derive(Clone,Show)]\n pub enum PickKind<'tcx> {\n     InherentImplPick(/* Impl */ ast::DefId),\n     ObjectPick(/* Trait */ ast::DefId, /* method_num */ uint, /* real_index */ uint),\n@@ -85,7 +85,7 @@ pub type PickResult<'tcx> = Result<Pick<'tcx>, MethodError>;\n // difference is that it doesn't embed any regions or other\n // specifics. The \"confirmation\" step recreates those details as\n // needed.\n-#[deriving(Clone,Show)]\n+#[derive(Clone,Show)]\n pub enum PickAdjustment {\n     // Indicates that the source expression should be autoderef'd N times\n     //"}, {"sha": "e6ae5f0a447d30c779298e248918756092d98790", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -81,20 +81,20 @@ pub use self::Expectation::*;\n use self::IsBinopAssignment::*;\n use self::TupleArgumentsFlag::*;\n \n-use astconv::{mod, ast_region_to_region, ast_ty_to_ty, AstConv};\n+use astconv::{self, ast_region_to_region, ast_ty_to_ty, AstConv};\n use check::_match::pat_ctxt;\n use middle::{const_eval, def};\n use middle::infer;\n use middle::lang_items::IteratorItem;\n use middle::mem_categorization as mc;\n use middle::mem_categorization::McResult;\n-use middle::pat_util::{mod, pat_id_map};\n+use middle::pat_util::{self, pat_id_map};\n use middle::region::CodeExtent;\n-use middle::subst::{mod, Subst, Substs, VecPerParamSpace, ParamSpace};\n+use middle::subst::{self, Subst, Substs, VecPerParamSpace, ParamSpace};\n use middle::traits;\n use middle::ty::{FnSig, VariantInfo, TypeScheme};\n use middle::ty::{Disr, ParamTy, ParameterEnvironment};\n-use middle::ty::{mod, HasProjectionTypes, RegionEscape, Ty};\n+use middle::ty::{self, HasProjectionTypes, RegionEscape, Ty};\n use middle::ty::liberate_late_bound_regions;\n use middle::ty::{MethodCall, MethodCallee, MethodMap, ObjectCastMap};\n use middle::ty_fold::{TypeFolder, TypeFoldable};\n@@ -105,22 +105,22 @@ use TypeAndSubsts;\n use middle::lang_items::TypeIdLangItem;\n use lint;\n use util::common::{block_query, indenter, loop_query};\n-use util::ppaux::{mod, UserString, Repr};\n+use util::ppaux::{self, UserString, Repr};\n use util::nodemap::{DefIdMap, FnvHashMap, NodeMap};\n \n use std::cell::{Cell, Ref, RefCell};\n use std::mem::replace;\n use std::rc::Rc;\n use std::iter::repeat;\n-use syntax::{mod, abi, attr};\n-use syntax::ast::{mod, ProvidedMethod, RequiredMethod, TypeTraitItem, DefId};\n-use syntax::ast_util::{mod, local_def, PostExpansionMethod};\n-use syntax::codemap::{mod, Span};\n+use syntax::{self, abi, attr};\n+use syntax::ast::{self, ProvidedMethod, RequiredMethod, TypeTraitItem, DefId};\n+use syntax::ast_util::{self, local_def, PostExpansionMethod};\n+use syntax::codemap::{self, Span};\n use syntax::owned_slice::OwnedSlice;\n use syntax::parse::token;\n use syntax::print::pprust;\n use syntax::ptr::P;\n-use syntax::visit::{mod, Visitor};\n+use syntax::visit::{self, Visitor};\n \n mod assoc;\n pub mod _match;\n@@ -170,7 +170,7 @@ pub struct Inherited<'a, 'tcx: 'a> {\n \n /// When type-checking an expression, we propagate downward\n /// whatever type hint we are able in the form of an `Expectation`.\n-#[deriving(Copy)]\n+#[derive(Copy)]\n enum Expectation<'tcx> {\n     /// We know nothing about what type this expression should have.\n     NoExpectation,\n@@ -221,7 +221,7 @@ impl<'tcx> Expectation<'tcx> {\n     }\n }\n \n-#[deriving(Copy, Clone)]\n+#[derive(Copy, Clone)]\n pub struct UnsafetyState {\n     pub def: ast::NodeId,\n     pub unsafety: ast::Unsafety,\n@@ -257,13 +257,13 @@ impl UnsafetyState {\n /// Whether `check_binop` is part of an assignment or not.\n /// Used to know whether we allow user overloads and to print\n /// better messages on error.\n-#[deriving(PartialEq)]\n+#[derive(PartialEq)]\n enum IsBinopAssignment{\n     SimpleBinop,\n     BinopAssignment,\n }\n \n-#[deriving(Clone)]\n+#[derive(Clone)]\n pub struct FnCtxt<'a, 'tcx: 'a> {\n     body_id: ast::NodeId,\n \n@@ -2218,7 +2218,7 @@ impl<'a, 'tcx> RegionScope for FnCtxt<'a, 'tcx> {\n     }\n }\n \n-#[deriving(Copy, Show, PartialEq, Eq)]\n+#[derive(Copy, Show, PartialEq, Eq)]\n pub enum LvaluePreference {\n     PreferMutLvalue,\n     NoPreference\n@@ -3058,7 +3058,7 @@ pub fn lookup_tup_field_ty<'tcx>(tcx: &ty::ctxt<'tcx>,\n \n // Controls whether the arguments are automatically referenced. This is useful\n // for overloaded binary and unary operators.\n-#[deriving(Copy, PartialEq)]\n+#[derive(Copy, PartialEq)]\n pub enum AutorefArgs {\n     Yes,\n     No,\n@@ -3080,7 +3080,7 @@ pub enum AutorefArgs {\n /// Instead of:\n ///\n ///     f((1, 2));\n-#[deriving(Clone, Eq, PartialEq)]\n+#[derive(Clone, Eq, PartialEq)]\n enum TupleArgumentsFlag {\n     DontTupleArguments,\n     TupleArguments,"}, {"sha": "b5ddb528c2f2f405589c33c16207c3a9ead7c722", "filename": "src/librustc_typeck/check/regionck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -91,7 +91,7 @@ use middle::mem_categorization as mc;\n use middle::region::CodeExtent;\n use middle::traits;\n use middle::ty::{ReScope};\n-use middle::ty::{mod, Ty, MethodCall};\n+use middle::ty::{self, Ty, MethodCall};\n use middle::infer;\n use middle::pat_util;\n use util::ppaux::{ty_to_string, Repr};"}, {"sha": "66cf077d4c21fbc9925cbc33b1b4d3233775d3f1", "filename": "src/librustc_typeck/check/regionmanip.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc_typeck%2Fcheck%2Fregionmanip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc_typeck%2Fcheck%2Fregionmanip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fregionmanip.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -13,7 +13,7 @@\n pub use self::WfConstraint::*;\n \n use middle::subst::{ParamSpace, Subst, Substs};\n-use middle::ty::{mod, Ty};\n+use middle::ty::{self, Ty};\n use middle::ty_fold::{TypeFolder};\n \n use syntax::ast;"}, {"sha": "1fdb68854c01fd4a7b76ba3284e61ff6f8d277b6", "filename": "src/librustc_typeck/check/upvar.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -44,11 +44,11 @@ use super::FnCtxt;\n \n use middle::expr_use_visitor as euv;\n use middle::mem_categorization as mc;\n-use middle::ty::{mod};\n+use middle::ty::{self};\n use middle::infer::{InferCtxt, UpvarRegion};\n use syntax::ast;\n use syntax::codemap::Span;\n-use syntax::visit::{mod, Visitor};\n+use syntax::visit::{self, Visitor};\n use util::ppaux::Repr;\n \n ///////////////////////////////////////////////////////////////////////////"}, {"sha": "87ede24226bdba8d653b8452e2f30b5f8d0da6b9", "filename": "src/librustc_typeck/check/vtable.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc_typeck%2Fcheck%2Fvtable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc_typeck%2Fcheck%2Fvtable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fvtable.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -9,10 +9,10 @@\n // except according to those terms.\n \n use check::{FnCtxt, structurally_resolved_type};\n-use middle::traits::{mod, ObjectSafetyViolation, MethodViolationCode};\n+use middle::traits::{self, ObjectSafetyViolation, MethodViolationCode};\n use middle::traits::{Obligation, ObligationCause};\n use middle::traits::report_fulfillment_errors;\n-use middle::ty::{mod, Ty, AsPredicate};\n+use middle::ty::{self, Ty, AsPredicate};\n use middle::infer;\n use syntax::ast;\n use syntax::codemap::Span;"}, {"sha": "704025f38ce0d726c5454830bdf487a827a0e77b", "filename": "src/librustc_typeck/check/wf.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc_typeck%2Fcheck%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc_typeck%2Fcheck%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwf.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -14,7 +14,7 @@ use CrateCtxt;\n use middle::region;\n use middle::subst;\n use middle::traits;\n-use middle::ty::{mod, Ty};\n+use middle::ty::{self, Ty};\n use middle::ty::liberate_late_bound_regions;\n use middle::ty_fold::{TypeFolder, TypeFoldable, super_fold_ty};\n use util::ppaux::Repr;"}, {"sha": "4154937b3fdcd2b77b4cd561889e4ff5b101d260", "filename": "src/librustc_typeck/check/writeback.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -16,7 +16,7 @@ use self::ResolveReason::*;\n use astconv::AstConv;\n use check::FnCtxt;\n use middle::pat_util;\n-use middle::ty::{mod, Ty, MethodCall, MethodCallee};\n+use middle::ty::{self, Ty, MethodCall, MethodCallee};\n use middle::ty_fold::{TypeFolder,TypeFoldable};\n use middle::infer;\n use write_substs_to_tcx;\n@@ -329,7 +329,7 @@ impl<'cx, 'tcx> WritebackCx<'cx, 'tcx> {\n ///////////////////////////////////////////////////////////////////////////\n // Resolution reason.\n \n-#[deriving(Copy)]\n+#[derive(Copy)]\n enum ResolveReason {\n     ResolvingExpr(Span),\n     ResolvingLocal(Span),"}, {"sha": "45b248dac9353e7dee18a721b6bd653ec2a555d5", "filename": "src/librustc_typeck/coherence/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -18,7 +18,7 @@\n \n use metadata::csearch::{each_impl, get_impl_trait};\n use metadata::csearch;\n-use middle::subst::{mod, Subst};\n+use middle::subst::{self, Subst};\n use middle::ty::RegionEscape;\n use middle::ty::{ImplContainer, ImplOrTraitItemId, MethodTraitItemId};\n use middle::ty::{ParameterEnvironment, TypeTraitItemId, lookup_item_type};"}, {"sha": "f618a79e27de791a63fb7ec2bca4431c3b046364", "filename": "src/librustc_typeck/coherence/overlap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc_typeck%2Fcoherence%2Foverlap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc_typeck%2Fcoherence%2Foverlap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Foverlap.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -13,7 +13,7 @@\n \n use middle::traits;\n use middle::ty;\n-use middle::infer::{mod, new_infer_ctxt};\n+use middle::infer::{self, new_infer_ctxt};\n use syntax::ast::{DefId};\n use syntax::ast::{LOCAL_CRATE};\n use syntax::ast;"}, {"sha": "009f1e50e9b4b535c16dde3631cbb9f175a4a6d9", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -29,16 +29,16 @@ bounds for each parameter.  Type parameters themselves are represented\n as `ty_param()` instances.\n \n */\n-use astconv::{mod, AstConv, ty_of_arg, ast_ty_to_ty, ast_region_to_region};\n+use astconv::{self, AstConv, ty_of_arg, ast_ty_to_ty, ast_region_to_region};\n use metadata::csearch;\n use middle::lang_items::SizedTraitLangItem;\n use middle::region;\n use middle::resolve_lifetime;\n use middle::subst;\n use middle::subst::{Substs};\n use middle::ty::{AsPredicate, ImplContainer, ImplOrTraitItemContainer, TraitContainer};\n-use middle::ty::{mod, RegionEscape, Ty, TypeScheme};\n-use middle::ty_fold::{mod, TypeFolder, TypeFoldable};\n+use middle::ty::{self, RegionEscape, Ty, TypeScheme};\n+use middle::ty_fold::{self, TypeFolder, TypeFoldable};\n use middle::infer;\n use rscope::*;\n use {CrateCtxt, no_params, write_ty_to_tcx};"}, {"sha": "48f9b129719719bedc2dc22ab2a4613aaa782c1a", "filename": "src/librustc_typeck/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc_typeck%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc_typeck%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Flib.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -93,7 +93,7 @@ use middle::def;\n use middle::infer;\n use middle::subst;\n use middle::subst::VecPerParamSpace;\n-use middle::ty::{mod, Ty};\n+use middle::ty::{self, Ty};\n use session::config;\n use util::common::time;\n use util::ppaux::Repr;"}, {"sha": "b2d7d88cb11bfa5f5bb033b03853738feb4f8dbe", "filename": "src/librustc_typeck/rscope.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc_typeck%2Frscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc_typeck%2Frscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Frscope.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -37,7 +37,7 @@ pub trait RegionScope {\n \n // A scope in which all regions must be explicitly named. This is used\n // for types that appear in structs and so on.\n-#[deriving(Copy)]\n+#[derive(Copy)]\n pub struct ExplicitRscope;\n \n impl RegionScope for ExplicitRscope {"}, {"sha": "6bef7e713af28b2bd0df4bad7ea94143580c8954", "filename": "src/librustc_typeck/variance.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc_typeck%2Fvariance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustc_typeck%2Fvariance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fvariance.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -196,7 +196,7 @@ use arena::Arena;\n use middle::resolve_lifetime as rl;\n use middle::subst;\n use middle::subst::{ParamSpace, FnSpace, TypeSpace, SelfSpace, VecPerParamSpace};\n-use middle::ty::{mod, Ty};\n+use middle::ty::{self, Ty};\n use std::fmt;\n use std::rc::Rc;\n use std::iter::repeat;\n@@ -230,10 +230,10 @@ pub fn infer_variance(tcx: &ty::ctxt) {\n \n type VarianceTermPtr<'a> = &'a VarianceTerm<'a>;\n \n-#[deriving(Copy, Show)]\n+#[derive(Copy, Show)]\n struct InferredIndex(uint);\n \n-#[deriving(Copy)]\n+#[derive(Copy)]\n enum VarianceTerm<'a> {\n     ConstantTerm(ty::Variance),\n     TransformTerm(VarianceTermPtr<'a>, VarianceTermPtr<'a>),\n@@ -266,7 +266,7 @@ struct TermsContext<'a, 'tcx: 'a> {\n     inferred_infos: Vec<InferredInfo<'a>> ,\n }\n \n-#[deriving(Copy, Show, PartialEq)]\n+#[derive(Copy, Show, PartialEq)]\n enum ParamKind {\n     TypeParam,\n     RegionParam\n@@ -423,7 +423,7 @@ struct ConstraintContext<'a, 'tcx: 'a> {\n \n /// Declares that the variable `decl_id` appears in a location with\n /// variance `variance`.\n-#[deriving(Copy)]\n+#[derive(Copy)]\n struct Constraint<'a> {\n     inferred: InferredIndex,\n     variance: &'a VarianceTerm<'a>,"}, {"sha": "3f5b0eaee124f1dfef3c32644f89ba01ce92f7b8", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 52, "deletions": 52, "changes": 104, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -34,15 +34,15 @@ use syntax::ast_util::PostExpansionMethod;\n use syntax::attr;\n use syntax::attr::{AttributeMethods, AttrMetaMethods};\n use syntax::codemap::{DUMMY_SP, Pos, Spanned};\n-use syntax::parse::token::{mod, InternedString, special_idents};\n+use syntax::parse::token::{self, InternedString, special_idents};\n use syntax::ptr::P;\n \n use rustc_trans::back::link;\n use rustc::metadata::cstore;\n use rustc::metadata::csearch;\n use rustc::metadata::decoder;\n use rustc::middle::def;\n-use rustc::middle::subst::{mod, ParamSpace, VecPerParamSpace};\n+use rustc::middle::subst::{self, ParamSpace, VecPerParamSpace};\n use rustc::middle::ty;\n use rustc::middle::stability;\n use rustc::session::config;\n@@ -111,7 +111,7 @@ impl<T: Clean<U>, U> Clean<Vec<U>> for syntax::owned_slice::OwnedSlice<T> {\n     }\n }\n \n-#[deriving(Clone, RustcEncodable, RustcDecodable)]\n+#[derive(Clone, RustcEncodable, RustcDecodable)]\n pub struct Crate {\n     pub name: String,\n     pub src: FsPath,\n@@ -193,7 +193,7 @@ impl<'a, 'tcx> Clean<Crate> for visit_ast::RustdocVisitor<'a, 'tcx> {\n     }\n }\n \n-#[deriving(Clone, RustcEncodable, RustcDecodable)]\n+#[derive(Clone, RustcEncodable, RustcDecodable)]\n pub struct ExternalCrate {\n     pub name: String,\n     pub attrs: Vec<Attribute>,\n@@ -226,7 +226,7 @@ impl Clean<ExternalCrate> for cstore::crate_metadata {\n /// Anything with a source location and set of attributes and, optionally, a\n /// name. That is, anything that can be documented. This doesn't correspond\n /// directly to the AST's concept of an item; it's a strict superset.\n-#[deriving(Clone, RustcEncodable, RustcDecodable)]\n+#[derive(Clone, RustcEncodable, RustcDecodable)]\n pub struct Item {\n     /// Stringified span\n     pub source: Span,\n@@ -302,7 +302,7 @@ impl Item {\n     }\n }\n \n-#[deriving(Clone, RustcEncodable, RustcDecodable)]\n+#[derive(Clone, RustcEncodable, RustcDecodable)]\n pub enum ItemEnum {\n     StructItem(Struct),\n     EnumItem(Enum),\n@@ -331,7 +331,7 @@ pub enum ItemEnum {\n     AssociatedTypeItem(TyParam),\n }\n \n-#[deriving(Clone, RustcEncodable, RustcDecodable)]\n+#[derive(Clone, RustcEncodable, RustcDecodable)]\n pub struct Module {\n     pub items: Vec<Item>,\n     pub is_crate: bool,\n@@ -398,7 +398,7 @@ impl Clean<Item> for doctree::Module {\n     }\n }\n \n-#[deriving(Clone, RustcEncodable, RustcDecodable, PartialEq)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, PartialEq)]\n pub enum Attribute {\n     Word(String),\n     List(String, Vec<Attribute> ),\n@@ -451,7 +451,7 @@ impl<'a> attr::AttrMetaMethods for &'a Attribute {\n     fn meta_item_list(&self) -> Option<&[P<ast::MetaItem>]> { None }\n }\n \n-#[deriving(Clone, RustcEncodable, RustcDecodable, PartialEq)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, PartialEq)]\n pub struct TyParam {\n     pub name: String,\n     pub did: ast::DefId,\n@@ -484,7 +484,7 @@ impl<'tcx> Clean<TyParam> for ty::TypeParameterDef<'tcx> {\n     }\n }\n \n-#[deriving(Clone, RustcEncodable, RustcDecodable, PartialEq)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, PartialEq)]\n pub enum TyParamBound {\n     RegionBound(Lifetime),\n     TraitBound(PolyTrait, ast::TraitBoundModifier)\n@@ -675,7 +675,7 @@ impl<'tcx> Clean<Option<Vec<TyParamBound>>> for subst::Substs<'tcx> {\n     }\n }\n \n-#[deriving(Clone, RustcEncodable, RustcDecodable, PartialEq)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, PartialEq)]\n pub struct Lifetime(String);\n \n impl Lifetime {\n@@ -725,7 +725,7 @@ impl Clean<Option<Lifetime>> for ty::Region {\n     }\n }\n \n-#[deriving(Clone, RustcEncodable, RustcDecodable, PartialEq)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, PartialEq)]\n pub enum WherePredicate {\n     BoundPredicate { ty: Type, bounds: Vec<TyParamBound> },\n     RegionPredicate { lifetime: Lifetime, bounds: Vec<Lifetime>},\n@@ -758,7 +758,7 @@ impl Clean<WherePredicate> for ast::WherePredicate {\n }\n \n // maybe use a Generic enum and use ~[Generic]?\n-#[deriving(Clone, RustcEncodable, RustcDecodable, PartialEq)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, PartialEq)]\n pub struct Generics {\n     pub lifetimes: Vec<Lifetime>,\n     pub type_params: Vec<TyParam>,\n@@ -786,7 +786,7 @@ impl<'a, 'tcx> Clean<Generics> for (&'a ty::Generics<'tcx>, subst::ParamSpace) {\n     }\n }\n \n-#[deriving(Clone, RustcEncodable, RustcDecodable)]\n+#[derive(Clone, RustcEncodable, RustcDecodable)]\n pub struct Method {\n     pub generics: Generics,\n     pub self_: SelfTy,\n@@ -825,7 +825,7 @@ impl Clean<Item> for ast::Method {\n     }\n }\n \n-#[deriving(Clone, RustcEncodable, RustcDecodable)]\n+#[derive(Clone, RustcEncodable, RustcDecodable)]\n pub struct TyMethod {\n     pub unsafety: ast::Unsafety,\n     pub decl: FnDecl,\n@@ -863,7 +863,7 @@ impl Clean<Item> for ast::TypeMethod {\n     }\n }\n \n-#[deriving(Clone, RustcEncodable, RustcDecodable, PartialEq)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, PartialEq)]\n pub enum SelfTy {\n     SelfStatic,\n     SelfValue,\n@@ -884,7 +884,7 @@ impl Clean<SelfTy> for ast::ExplicitSelf_ {\n     }\n }\n \n-#[deriving(Clone, RustcEncodable, RustcDecodable)]\n+#[derive(Clone, RustcEncodable, RustcDecodable)]\n pub struct Function {\n     pub decl: FnDecl,\n     pub generics: Generics,\n@@ -909,7 +909,7 @@ impl Clean<Item> for doctree::Function {\n     }\n }\n \n-#[deriving(Clone, RustcEncodable, RustcDecodable, PartialEq)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, PartialEq)]\n pub struct ClosureDecl {\n     pub lifetimes: Vec<Lifetime>,\n     pub decl: FnDecl,\n@@ -930,14 +930,14 @@ impl Clean<ClosureDecl> for ast::ClosureTy {\n     }\n }\n \n-#[deriving(Clone, RustcEncodable, RustcDecodable, PartialEq)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, PartialEq)]\n pub struct FnDecl {\n     pub inputs: Arguments,\n     pub output: FunctionRetTy,\n     pub attrs: Vec<Attribute>,\n }\n \n-#[deriving(Clone, RustcEncodable, RustcDecodable, PartialEq)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, PartialEq)]\n pub struct Arguments {\n     pub values: Vec<Argument>,\n }\n@@ -990,7 +990,7 @@ impl<'a, 'tcx> Clean<FnDecl> for (ast::DefId, &'a ty::PolyFnSig<'tcx>) {\n     }\n }\n \n-#[deriving(Clone, RustcEncodable, RustcDecodable, PartialEq)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, PartialEq)]\n pub struct Argument {\n     pub type_: Type,\n     pub name: String,\n@@ -1007,7 +1007,7 @@ impl Clean<Argument> for ast::Arg {\n     }\n }\n \n-#[deriving(Clone, RustcEncodable, RustcDecodable, PartialEq)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, PartialEq)]\n pub enum FunctionRetTy {\n     Return(Type),\n     NoReturn\n@@ -1022,7 +1022,7 @@ impl Clean<FunctionRetTy> for ast::FunctionRetTy {\n     }\n }\n \n-#[deriving(Clone, RustcEncodable, RustcDecodable)]\n+#[derive(Clone, RustcEncodable, RustcDecodable)]\n pub struct Trait {\n     pub unsafety: ast::Unsafety,\n     pub items: Vec<TraitMethod>,\n@@ -1066,7 +1066,7 @@ impl Clean<PolyTrait> for ast::PolyTraitRef {\n \n /// An item belonging to a trait, whether a method or associated. Could be named\n /// TraitItem except that's already taken by an exported enum variant.\n-#[deriving(Clone, RustcEncodable, RustcDecodable)]\n+#[derive(Clone, RustcEncodable, RustcDecodable)]\n pub enum TraitMethod {\n     RequiredMethod(Item),\n     ProvidedMethod(Item),\n@@ -1111,7 +1111,7 @@ impl Clean<TraitMethod> for ast::TraitItem {\n     }\n }\n \n-#[deriving(Clone, RustcEncodable, RustcDecodable)]\n+#[derive(Clone, RustcEncodable, RustcDecodable)]\n pub enum ImplMethod {\n     MethodImplItem(Item),\n     TypeImplItem(Item),\n@@ -1182,7 +1182,7 @@ impl<'tcx> Clean<Item> for ty::ImplOrTraitItem<'tcx> {\n }\n \n /// A trait reference, which may have higher ranked lifetimes.\n-#[deriving(Clone, RustcEncodable, RustcDecodable, PartialEq)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, PartialEq)]\n pub struct PolyTrait {\n     pub trait_: Type,\n     pub lifetimes: Vec<Lifetime>\n@@ -1191,7 +1191,7 @@ pub struct PolyTrait {\n /// A representation of a Type suitable for hyperlinking purposes. Ideally one can get the original\n /// type out of the AST/ty::ctxt given one of these, if more information is needed. Most importantly\n /// it does not preserve mutability or boxes.\n-#[deriving(Clone, RustcEncodable, RustcDecodable, PartialEq)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, PartialEq)]\n pub enum Type {\n     /// structs/enums/traits (anything that'd be an ast::TyPath)\n     ResolvedPath {\n@@ -1237,7 +1237,7 @@ pub enum Type {\n     PolyTraitRef(Vec<TyParamBound>),\n }\n \n-#[deriving(Clone, RustcEncodable, RustcDecodable, PartialEq, Eq, Hash, Copy)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, PartialEq, Eq, Hash, Copy)]\n pub enum PrimitiveType {\n     Int, I8, I16, I32, I64,\n     Uint, U8, U16, U32, U64,\n@@ -1249,7 +1249,7 @@ pub enum PrimitiveType {\n     PrimitiveTuple,\n }\n \n-#[deriving(Clone, RustcEncodable, RustcDecodable, Copy)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, Copy)]\n pub enum TypeKind {\n     TypeEnum,\n     TypeFunction,\n@@ -1505,7 +1505,7 @@ impl Clean<Type> for ast::QPath {\n     }\n }\n \n-#[deriving(Clone, RustcEncodable, RustcDecodable)]\n+#[derive(Clone, RustcEncodable, RustcDecodable)]\n pub enum StructField {\n     HiddenStructField, // inserted later by strip passes\n     TypedStructField(Type),\n@@ -1564,7 +1564,7 @@ impl Clean<Option<Visibility>> for ast::Visibility {\n     }\n }\n \n-#[deriving(Clone, RustcEncodable, RustcDecodable)]\n+#[derive(Clone, RustcEncodable, RustcDecodable)]\n pub struct Struct {\n     pub struct_type: doctree::StructType,\n     pub generics: Generics,\n@@ -1594,7 +1594,7 @@ impl Clean<Item> for doctree::Struct {\n /// This is a more limited form of the standard Struct, different in that\n /// it lacks the things most items have (name, id, parameterization). Found\n /// only as a variant in an enum.\n-#[deriving(Clone, RustcEncodable, RustcDecodable)]\n+#[derive(Clone, RustcEncodable, RustcDecodable)]\n pub struct VariantStruct {\n     pub struct_type: doctree::StructType,\n     pub fields: Vec<Item>,\n@@ -1611,7 +1611,7 @@ impl Clean<VariantStruct> for syntax::ast::StructDef {\n     }\n }\n \n-#[deriving(Clone, RustcEncodable, RustcDecodable)]\n+#[derive(Clone, RustcEncodable, RustcDecodable)]\n pub struct Enum {\n     pub variants: Vec<Item>,\n     pub generics: Generics,\n@@ -1636,7 +1636,7 @@ impl Clean<Item> for doctree::Enum {\n     }\n }\n \n-#[deriving(Clone, RustcEncodable, RustcDecodable)]\n+#[derive(Clone, RustcEncodable, RustcDecodable)]\n pub struct Variant {\n     pub kind: VariantKind,\n }\n@@ -1704,7 +1704,7 @@ impl<'tcx> Clean<Item> for ty::VariantInfo<'tcx> {\n     }\n }\n \n-#[deriving(Clone, RustcEncodable, RustcDecodable)]\n+#[derive(Clone, RustcEncodable, RustcDecodable)]\n pub enum VariantKind {\n     CLikeVariant,\n     TupleVariant(Vec<Type>),\n@@ -1726,7 +1726,7 @@ impl Clean<VariantKind> for ast::VariantKind {\n     }\n }\n \n-#[deriving(Clone, RustcEncodable, RustcDecodable, Show)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, Show)]\n pub struct Span {\n     pub filename: String,\n     pub loline: uint,\n@@ -1761,7 +1761,7 @@ impl Clean<Span> for syntax::codemap::Span {\n     }\n }\n \n-#[deriving(Clone, RustcEncodable, RustcDecodable, PartialEq)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, PartialEq)]\n pub struct Path {\n     pub global: bool,\n     pub segments: Vec<PathSegment>,\n@@ -1776,7 +1776,7 @@ impl Clean<Path> for ast::Path {\n     }\n }\n \n-#[deriving(Clone, RustcEncodable, RustcDecodable, PartialEq)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, PartialEq)]\n pub enum PathParameters {\n     AngleBracketed {\n         lifetimes: Vec<Lifetime>,\n@@ -1808,7 +1808,7 @@ impl Clean<PathParameters> for ast::PathParameters {\n     }\n }\n \n-#[deriving(Clone, RustcEncodable, RustcDecodable, PartialEq)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, PartialEq)]\n pub struct PathSegment {\n     pub name: String,\n     pub params: PathParameters\n@@ -1849,7 +1849,7 @@ impl Clean<String> for ast::Name {\n     }\n }\n \n-#[deriving(Clone, RustcEncodable, RustcDecodable)]\n+#[derive(Clone, RustcEncodable, RustcDecodable)]\n pub struct Typedef {\n     pub type_: Type,\n     pub generics: Generics,\n@@ -1872,7 +1872,7 @@ impl Clean<Item> for doctree::Typedef {\n     }\n }\n \n-#[deriving(Clone, RustcEncodable, RustcDecodable, PartialEq)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, PartialEq)]\n pub struct BareFunctionDecl {\n     pub unsafety: ast::Unsafety,\n     pub generics: Generics,\n@@ -1895,7 +1895,7 @@ impl Clean<BareFunctionDecl> for ast::BareFnTy {\n     }\n }\n \n-#[deriving(Clone, RustcEncodable, RustcDecodable, Show)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, Show)]\n pub struct Static {\n     pub type_: Type,\n     pub mutability: Mutability,\n@@ -1924,7 +1924,7 @@ impl Clean<Item> for doctree::Static {\n     }\n }\n \n-#[deriving(Clone, RustcEncodable, RustcDecodable, Show)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, Show)]\n pub struct Constant {\n     pub type_: Type,\n     pub expr: String,\n@@ -1947,7 +1947,7 @@ impl Clean<Item> for doctree::Constant {\n     }\n }\n \n-#[deriving(Show, Clone, RustcEncodable, RustcDecodable, PartialEq, Copy)]\n+#[derive(Show, Clone, RustcEncodable, RustcDecodable, PartialEq, Copy)]\n pub enum Mutability {\n     Mutable,\n     Immutable,\n@@ -1962,7 +1962,7 @@ impl Clean<Mutability> for ast::Mutability {\n     }\n }\n \n-#[deriving(Clone, RustcEncodable, RustcDecodable)]\n+#[derive(Clone, RustcEncodable, RustcDecodable)]\n pub struct Impl {\n     pub generics: Generics,\n     pub trait_: Option<Type>,\n@@ -2000,7 +2000,7 @@ impl Clean<Item> for doctree::Impl {\n     }\n }\n \n-#[deriving(Clone, RustcEncodable, RustcDecodable)]\n+#[derive(Clone, RustcEncodable, RustcDecodable)]\n pub struct ViewItem {\n     pub inner: ViewItemInner,\n }\n@@ -2066,7 +2066,7 @@ impl Clean<Vec<Item>> for ast::ViewItem {\n     }\n }\n \n-#[deriving(Clone, RustcEncodable, RustcDecodable)]\n+#[derive(Clone, RustcEncodable, RustcDecodable)]\n pub enum ViewItemInner {\n     ExternCrate(String, Option<String>, ast::NodeId),\n     Import(ViewPath)\n@@ -2089,7 +2089,7 @@ impl Clean<ViewItemInner> for ast::ViewItem_ {\n     }\n }\n \n-#[deriving(Clone, RustcEncodable, RustcDecodable)]\n+#[derive(Clone, RustcEncodable, RustcDecodable)]\n pub enum ViewPath {\n     // use source as str;\n     SimpleImport(String, ImportSource),\n@@ -2099,7 +2099,7 @@ pub enum ViewPath {\n     ImportList(ImportSource, Vec<ViewListIdent>),\n }\n \n-#[deriving(Clone, RustcEncodable, RustcDecodable)]\n+#[derive(Clone, RustcEncodable, RustcDecodable)]\n pub struct ImportSource {\n     pub path: Path,\n     pub did: Option<ast::DefId>,\n@@ -2120,7 +2120,7 @@ impl Clean<ViewPath> for ast::ViewPath {\n     }\n }\n \n-#[deriving(Clone, RustcEncodable, RustcDecodable)]\n+#[derive(Clone, RustcEncodable, RustcDecodable)]\n pub struct ViewListIdent {\n     pub name: String,\n     pub source: Option<ast::DefId>,\n@@ -2335,7 +2335,7 @@ fn resolve_def(cx: &DocContext, id: ast::NodeId) -> Option<ast::DefId> {\n     })\n }\n \n-#[deriving(Clone, RustcEncodable, RustcDecodable)]\n+#[derive(Clone, RustcEncodable, RustcDecodable)]\n pub struct Macro {\n     pub source: String,\n }\n@@ -2356,7 +2356,7 @@ impl Clean<Item> for doctree::Macro {\n     }\n }\n \n-#[deriving(Clone, RustcEncodable, RustcDecodable)]\n+#[derive(Clone, RustcEncodable, RustcDecodable)]\n pub struct Stability {\n     pub level: attr::StabilityLevel,\n     pub text: String"}, {"sha": "a69437f7a669ca6b4526a3647c4d3992bfdb3667", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -10,7 +10,7 @@\n pub use self::MaybeTyped::*;\n \n use rustc_driver::driver;\n-use rustc::session::{mod, config};\n+use rustc::session::{self, config};\n use rustc::session::search_paths::SearchPaths;\n use rustc::middle::{privacy, ty};\n use rustc::lint;"}, {"sha": "d05e15ff2513258016a9b37d394c919766677e37", "filename": "src/librustdoc/doctree.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustdoc%2Fdoctree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustdoc%2Fdoctree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoctree.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -70,7 +70,7 @@ impl Module {\n     }\n }\n \n-#[deriving(Show, Clone, RustcEncodable, RustcDecodable, Copy)]\n+#[derive(Show, Clone, RustcEncodable, RustcDecodable, Copy)]\n pub enum StructType {\n     /// A normal struct\n     Plain,\n@@ -143,7 +143,7 @@ pub struct Typedef {\n     pub stab: Option<attr::Stability>,\n }\n \n-#[deriving(Show)]\n+#[derive(Show)]\n pub struct Static {\n     pub type_: P<ast::Ty>,\n     pub mutability: ast::Mutability,"}, {"sha": "157d2580ad971f8f34c9f7695e9646c6da713d76", "filename": "src/librustdoc/externalfiles.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustdoc%2Fexternalfiles.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustdoc%2Fexternalfiles.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fexternalfiles.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -10,7 +10,7 @@\n \n use std::{io, str};\n \n-#[deriving(Clone)]\n+#[derive(Clone)]\n pub struct ExternalHtml{\n     pub in_header: String,\n     pub before_content: String,"}, {"sha": "9004d11b5bccfb2ffe910a633cbb099fbe332735", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -29,19 +29,19 @@ use html::render::{cache, CURRENT_LOCATION_KEY};\n \n /// Helper to render an optional visibility with a space after it (if the\n /// visibility is preset)\n-#[deriving(Copy)]\n+#[derive(Copy)]\n pub struct VisSpace(pub Option<ast::Visibility>);\n /// Similarly to VisSpace, this structure is used to render a function style with a\n /// space after it.\n-#[deriving(Copy)]\n+#[derive(Copy)]\n pub struct UnsafetySpace(pub ast::Unsafety);\n /// Wrapper struct for properly emitting a method declaration.\n pub struct Method<'a>(pub &'a clean::SelfTy, pub &'a clean::FnDecl);\n /// Similar to VisSpace, but used for mutability\n-#[deriving(Copy)]\n+#[derive(Copy)]\n pub struct MutableSpace(pub clean::Mutability);\n /// Similar to VisSpace, but used for mutability\n-#[deriving(Copy)]\n+#[derive(Copy)]\n pub struct RawMutableSpace(pub clean::Mutability);\n /// Wrapper struct for properly emitting the stability level.\n pub struct Stability<'a>(pub &'a Option<clean::Stability>);"}, {"sha": "3efaf5d491442525a5a9a6fc43b744528dbb6345", "filename": "src/librustdoc/html/item_type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustdoc%2Fhtml%2Fitem_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustdoc%2Fhtml%2Fitem_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fitem_type.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -19,7 +19,7 @@ use clean;\n /// discriminants. JavaScript then is used to decode them into the original value.\n /// Consequently, every change to this type should be synchronized to\n /// the `itemTypes` mapping table in `static/main.js`.\n-#[deriving(Copy, PartialEq, Clone)]\n+#[derive(Copy, PartialEq, Clone)]\n pub enum ItemType {\n     Module          = 0,\n     Struct          = 1,"}, {"sha": "d47c6010be0baa666042a89cc8f1161b2351e375", "filename": "src/librustdoc/html/layout.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustdoc%2Fhtml%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustdoc%2Fhtml%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Flayout.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -13,7 +13,7 @@ use std::io;\n \n use externalfiles::ExternalHtml;\n \n-#[deriving(Clone)]\n+#[derive(Clone)]\n pub struct Layout {\n     pub logo: String,\n     pub favicon: String,"}, {"sha": "9d003eca27f3dd11ad067352adb3f048b85b0ac9", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -373,7 +373,7 @@ pub fn find_testable_code(doc: &str, tests: &mut ::test::Collector) {\n     }\n }\n \n-#[deriving(Eq, PartialEq, Clone, Show)]\n+#[derive(Eq, PartialEq, Clone, Show)]\n struct LangString {\n     should_fail: bool,\n     no_run: bool,"}, {"sha": "338b9b3e0eba417c07efb5a046d3edb13f01d414", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -35,7 +35,7 @@\n pub use self::ExternalLocation::*;\n \n use std::cell::RefCell;\n-use std::cmp::Ordering::{mod, Less, Greater, Equal};\n+use std::cmp::Ordering::{self, Less, Greater, Equal};\n use std::collections::hash_map::Entry::{Occupied, Vacant};\n use std::collections::{HashMap, HashSet};\n use std::default::Default;\n@@ -74,7 +74,7 @@ use stability_summary;\n /// It is intended that this context is a lightweight object which can be fairly\n /// easily cloned because it is cloned per work-job (about once per item in the\n /// rustdoc tree).\n-#[deriving(Clone)]\n+#[derive(Clone)]\n pub struct Context {\n     /// Current hierarchy of components leading down to what's currently being\n     /// rendered\n@@ -129,7 +129,7 @@ pub struct Implementor {\n }\n \n /// Metadata about implementations for a type.\n-#[deriving(Clone)]\n+#[derive(Clone)]\n pub struct Impl {\n     pub impl_: clean::Impl,\n     pub dox: Option<String>,\n@@ -145,7 +145,7 @@ pub struct Impl {\n /// to be a fairly large and expensive structure to clone. Instead this adheres\n /// to `Send` so it may be stored in a `Arc` instance and shared among the various\n /// rendering tasks.\n-#[deriving(Default)]\n+#[derive(Default)]\n pub struct Cache {\n     /// Mapping of typaram ids to the name of the type parameter. This is used\n     /// when pretty-printing a type (so pretty printing doesn't have to\n@@ -225,7 +225,7 @@ struct Source<'a>(&'a str);\n // Helper structs for rendering items/sidebars and carrying along contextual\n // information\n \n-#[deriving(Copy)]\n+#[derive(Copy)]\n struct Item<'a> {\n     cx: &'a Context,\n     item: &'a clean::Item,"}, {"sha": "71313ea90b8ae4a42021483072e0bd315bc31e62", "filename": "src/librustdoc/html/toc.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustdoc%2Fhtml%2Ftoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustdoc%2Fhtml%2Ftoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Ftoc.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -14,7 +14,7 @@ use std::fmt;\n use std::string::String;\n \n /// A (recursive) table of contents\n-#[deriving(PartialEq)]\n+#[derive(PartialEq)]\n pub struct Toc {\n     /// The levels are strictly decreasing, i.e.\n     ///\n@@ -38,7 +38,7 @@ impl Toc {\n     }\n }\n \n-#[deriving(PartialEq)]\n+#[derive(PartialEq)]\n pub struct TocEntry {\n     level: u32,\n     sec_number: String,\n@@ -48,7 +48,7 @@ pub struct TocEntry {\n }\n \n /// Progressive construction of a table of contents.\n-#[deriving(PartialEq)]\n+#[derive(PartialEq)]\n pub struct TocBuilder {\n     top_level: Toc,\n     /// The current hierarchy of parent headings, the levels are"}, {"sha": "125bc21d79d067dc99f17903f953c88ebe638a21", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -44,7 +44,7 @@ use std::io;\n use std::rc::Rc;\n use externalfiles::ExternalHtml;\n use serialize::Decodable;\n-use serialize::json::{mod, Json};\n+use serialize::json::{self, Json};\n use rustc::session::search_paths::SearchPaths;\n \n // reexported from `clean` so it can be easily updated with the mod itself"}, {"sha": "690a5d19367ed9ac00c12e64ac012fa3864c225a", "filename": "src/librustdoc/stability_summary.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustdoc%2Fstability_summary.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustdoc%2Fstability_summary.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fstability_summary.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -26,9 +26,9 @@ use clean::{TypeTraitItem, ViewItemItem, PrimitiveItem, Stability};\n \n use html::render::cache;\n \n-#[deriving(Zero, RustcEncodable, RustcDecodable, PartialEq, Eq)]\n+#[derive(Zero, RustcEncodable, RustcDecodable, PartialEq, Eq)]\n /// The counts for each stability level.\n-#[deriving(Copy)]\n+#[derive(Copy)]\n pub struct Counts {\n     pub deprecated: uint,\n     pub experimental: uint,\n@@ -76,7 +76,7 @@ impl Counts {\n     }\n }\n \n-#[deriving(RustcEncodable, RustcDecodable, PartialEq, Eq)]\n+#[derive(RustcEncodable, RustcDecodable, PartialEq, Eq)]\n /// A summarized module, which includes total counts and summarized children\n /// modules.\n pub struct ModuleSummary {"}, {"sha": "bded371e5002d2858f15a1a7431f92a4bd436fc2", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -20,7 +20,7 @@ use std::thunk::Thunk;\n \n use std::collections::{HashSet, HashMap};\n use testing;\n-use rustc::session::{mod, config};\n+use rustc::session::{self, config};\n use rustc::session::search_paths::{SearchPaths, PathKind};\n use rustc_driver::driver;\n use syntax::ast;"}, {"sha": "52d5a1a3af52f985fa340a87e127250ce69ec226", "filename": "src/libserialize/base64.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibserialize%2Fbase64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibserialize%2Fbase64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fbase64.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -19,7 +19,7 @@ use std::fmt;\n use std::error;\n \n /// Available encoding character sets\n-#[deriving(Copy)]\n+#[derive(Copy)]\n pub enum CharacterSet {\n     /// The standard character set (uses `+` and `/`)\n     Standard,\n@@ -28,7 +28,7 @@ pub enum CharacterSet {\n }\n \n /// Available newline types\n-#[deriving(Copy)]\n+#[derive(Copy)]\n pub enum Newline {\n     /// A linefeed (i.e. Unix-style newline)\n     LF,\n@@ -37,7 +37,7 @@ pub enum Newline {\n }\n \n /// Contains configuration parameters for `to_base64`.\n-#[deriving(Copy)]\n+#[derive(Copy)]\n pub struct Config {\n     /// Character set to use\n     pub char_set: CharacterSet,\n@@ -177,7 +177,7 @@ pub trait FromBase64 for Sized? {\n }\n \n /// Errors that can occur when decoding a base64 encoded string\n-#[deriving(Copy)]\n+#[derive(Copy)]\n pub enum FromBase64Error {\n     /// The input contained a character not part of the base64 format\n     InvalidBase64Byte(u8, uint),"}, {"sha": "c915ddaaa9c041cf2866aac617d7632f8a6ac135", "filename": "src/libserialize/hex.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibserialize%2Fhex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibserialize%2Fhex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fhex.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -61,7 +61,7 @@ pub trait FromHex for Sized? {\n }\n \n /// Errors that can occur when decoding a hex encoded string\n-#[deriving(Copy)]\n+#[derive(Copy)]\n pub enum FromHexError {\n     /// The input contained a character not part of the hex format\n     InvalidHexCharacter(char, uint),"}, {"sha": "73f986a97ef4978db7b9f929a972913864b2a0ca", "filename": "src/libserialize/json.rs", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibserialize%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibserialize%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fjson.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -60,7 +60,7 @@\n //! To be able to encode a piece of data, it must implement the `serialize::RustcEncodable` trait.\n //! To be able to decode a piece of data, it must implement the `serialize::RustcDecodable` trait.\n //! The Rust compiler provides an annotation to automatically generate the code for these traits:\n-//! `#[deriving(RustcDecodable, RustcEncodable)]`\n+//! `#[derive(RustcDecodable, RustcEncodable)]`\n //!\n //! The JSON API provides an enum `json::Json` and a trait `ToJson` to encode objects.\n //! The `ToJson` trait provides a `to_json` method to convert an object into a `json::Json` value.\n@@ -82,7 +82,7 @@\n //! use serialize::json;\n //!\n //! // Automatically generate `Decodable` and `Encodable` trait implementations\n-//! #[deriving(RustcDecodable, RustcEncodable)]\n+//! #[derive(RustcDecodable, RustcEncodable)]\n //! pub struct TestStruct  {\n //!     data_int: u8,\n //!     data_str: String,\n@@ -114,7 +114,7 @@\n //! ```notrust\n //! // FIXME(#19470): this cannot be ```rust``` because it fails orphan checking at the moment\n //! extern crate serialize;\n-//! use serialize::json::{mod, ToJson, Json};\n+//! use serialize::json::{self, ToJson, Json};\n //!\n //! // A custom data structure\n //! struct ComplexNum {\n@@ -130,7 +130,7 @@\n //! }\n //!\n //! // Only generate `RustcEncodable` trait implementation\n-//! #[deriving(Encodable)]\n+//! #[derive(Encodable)]\n //! pub struct ComplexNumRecord {\n //!     uid: u8,\n //!     dsc: String,\n@@ -155,10 +155,10 @@\n //! // FIXME(#19470): this cannot be ```rust``` because it fails orphan checking at the moment\n //! extern crate serialize;\n //! use std::collections::BTreeMap;\n-//! use serialize::json::{mod, Json, ToJson};\n+//! use serialize::json::{self, Json, ToJson};\n //!\n //! // Only generate `Decodable` trait implementation\n-//! #[deriving(Decodable)]\n+//! #[derive(Decodable)]\n //! pub struct TestStruct {\n //!     data_int: u8,\n //!     data_str: String,\n@@ -215,7 +215,7 @@ use unicode::str::Utf16Item;\n use Encodable;\n \n /// Represents a json value\n-#[deriving(Clone, PartialEq, PartialOrd)]\n+#[derive(Clone, PartialEq, PartialOrd)]\n pub enum Json {\n     I64(i64),\n     U64(u64),\n@@ -236,7 +236,7 @@ pub struct AsJson<'a, T: 'a> { inner: &'a T }\n pub struct AsPrettyJson<'a, T: 'a> { inner: &'a T, indent: Option<uint> }\n \n /// The errors that can arise while parsing a JSON stream.\n-#[deriving(Clone, Copy, PartialEq)]\n+#[derive(Clone, Copy, PartialEq)]\n pub enum ErrorCode {\n     InvalidSyntax,\n     InvalidNumber,\n@@ -257,7 +257,7 @@ pub enum ErrorCode {\n     NotUtf8,\n }\n \n-#[deriving(Clone, Copy, PartialEq, Show)]\n+#[derive(Clone, Copy, PartialEq, Show)]\n pub enum ParserError {\n     /// msg, line, col\n     SyntaxError(ErrorCode, uint, uint),\n@@ -267,7 +267,7 @@ pub enum ParserError {\n // Builder and Parser have the same errors.\n pub type BuilderError = ParserError;\n \n-#[deriving(Clone, PartialEq, Show)]\n+#[derive(Clone, PartialEq, Show)]\n pub enum DecoderError {\n     ParseError(ParserError),\n     ExpectedError(string::String, string::String),\n@@ -1164,7 +1164,7 @@ impl ops::Index<uint> for Json {\n }\n \n /// The output of the streaming parser.\n-#[deriving(PartialEq, Clone, Show)]\n+#[derive(PartialEq, Clone, Show)]\n pub enum JsonEvent {\n     ObjectStart,\n     ObjectEnd,\n@@ -1179,7 +1179,7 @@ pub enum JsonEvent {\n     Error(ParserError),\n }\n \n-#[deriving(PartialEq, Show)]\n+#[derive(PartialEq, Show)]\n enum ParserState {\n     // Parse a value in an array, true means first element.\n     ParseArray(bool),\n@@ -1208,15 +1208,15 @@ pub struct Stack {\n /// StackElements compose a Stack.\n /// For example, Key(\"foo\"), Key(\"bar\"), Index(3) and Key(\"x\") are the\n /// StackElements compositing the stack that represents foo.bar[3].x\n-#[deriving(PartialEq, Clone, Show)]\n+#[derive(PartialEq, Clone, Show)]\n pub enum StackElement<'l> {\n     Index(u32),\n     Key(&'l str),\n }\n \n // Internally, Key elements are stored as indices in a buffer to avoid\n // allocating a string for every member of an object.\n-#[deriving(PartialEq, Clone, Show)]\n+#[derive(PartialEq, Clone, Show)]\n enum InternalStackElement {\n     InternalIndex(u32),\n     InternalKey(u16, u16), // start, size\n@@ -2534,7 +2534,7 @@ mod tests {\n     use std::num::Float;\n     use std::string;\n \n-    #[deriving(RustcDecodable, Eq, PartialEq, Show)]\n+    #[derive(RustcDecodable, Eq, PartialEq, Show)]\n     struct OptionData {\n         opt: Option<uint>,\n     }\n@@ -2561,20 +2561,20 @@ mod tests {\n                                 ExpectedError(\"Number\".to_string(), \"false\".to_string()));\n     }\n \n-    #[deriving(PartialEq, RustcEncodable, RustcDecodable, Show)]\n+    #[derive(PartialEq, RustcEncodable, RustcDecodable, Show)]\n     enum Animal {\n         Dog,\n         Frog(string::String, int)\n     }\n \n-    #[deriving(PartialEq, RustcEncodable, RustcDecodable, Show)]\n+    #[derive(PartialEq, RustcEncodable, RustcDecodable, Show)]\n     struct Inner {\n         a: (),\n         b: uint,\n         c: Vec<string::String>,\n     }\n \n-    #[deriving(PartialEq, RustcEncodable, RustcDecodable, Show)]\n+    #[derive(PartialEq, RustcEncodable, RustcDecodable, Show)]\n     struct Outer {\n         inner: Vec<Inner>,\n     }\n@@ -3093,7 +3093,7 @@ mod tests {\n         );\n     }\n \n-    #[deriving(RustcDecodable)]\n+    #[derive(RustcDecodable)]\n     struct FloatStruct {\n         f: f64,\n         a: Vec<f64>\n@@ -3142,15 +3142,15 @@ mod tests {\n             Err(SyntaxError(EOFWhileParsingObject, 3u, 8u)));\n     }\n \n-    #[deriving(RustcDecodable)]\n+    #[derive(RustcDecodable)]\n     #[allow(dead_code)]\n     struct DecodeStruct {\n         x: f64,\n         y: bool,\n         z: string::String,\n         w: Vec<DecodeStruct>\n     }\n-    #[deriving(RustcDecodable)]\n+    #[derive(RustcDecodable)]\n     enum DecodeEnum {\n         A(f64),\n         B(string::String)"}, {"sha": "65cbce08543cc3c84e118f0a4b2fb7ecec1917c6", "filename": "src/libstd/bitflags.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibstd%2Fbitflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibstd%2Fbitflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fbitflags.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -121,7 +121,7 @@ macro_rules! bitflags {\n     ($(#[$attr:meta])* flags $BitFlags:ident: $T:ty {\n         $($(#[$Flag_attr:meta])* const $Flag:ident = $value:expr),+\n     }) => {\n-        #[deriving(Copy, PartialEq, Eq, Clone, PartialOrd, Ord, Hash)]\n+        #[derive(Copy, PartialEq, Eq, Clone, PartialOrd, Ord, Hash)]\n         $(#[$attr])*\n         pub struct $BitFlags {\n             bits: $T,"}, {"sha": "4fb4f220c592a0aef6471abb7c2d36fcd4a7a573", "filename": "src/libstd/c_str.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibstd%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibstd%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fc_str.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -77,7 +77,7 @@ use fmt;\n use hash;\n use mem;\n use ptr;\n-use slice::{mod, IntSliceExt};\n+use slice::{self, IntSliceExt};\n use str;\n use string::String;\n use core::kinds::marker;\n@@ -498,7 +498,7 @@ fn check_for_null(v: &[u8], buf: *mut libc::c_char) {\n ///\n /// Use with the `std::iter` module.\n #[allow(raw_pointer_deriving)]\n-#[deriving(Clone)]\n+#[derive(Clone)]\n pub struct CChars<'a> {\n     ptr: *const libc::c_char,\n     marker: marker::ContravariantLifetime<'a>,"}, {"sha": "c63484396d211a3db2e0f6a603636736b9c22c95", "filename": "src/libstd/collections/hash/map.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -18,11 +18,11 @@ use borrow::BorrowFrom;\n use clone::Clone;\n use cmp::{max, Eq, Equiv, PartialEq};\n use default::Default;\n-use fmt::{mod, Show};\n+use fmt::{self, Show};\n use hash::{Hash, Hasher, RandomSipHasher};\n-use iter::{mod, Iterator, IteratorExt, FromIterator, Extend, Map};\n+use iter::{self, Iterator, IteratorExt, FromIterator, Extend, Map};\n use kinds::Sized;\n-use mem::{mod, replace};\n+use mem::{self, replace};\n use num::{Int, UnsignedInt};\n use ops::{Deref, FnMut, Index, IndexMut};\n use option::Option;\n@@ -31,7 +31,7 @@ use result::Result;\n use result::Result::{Ok, Err};\n \n use super::table::{\n-    mod,\n+    self,\n     Bucket,\n     EmptyBucket,\n     FullBucket,\n@@ -52,7 +52,7 @@ pub const INITIAL_CAPACITY: uint = 1 << INITIAL_LOG2_CAP; // 2^5\n /// This behavior is characterized by the following condition:\n ///\n /// - if size > 0.909 * capacity: grow the map\n-#[deriving(Clone)]\n+#[derive(Clone)]\n struct DefaultResizePolicy;\n \n impl DefaultResizePolicy {\n@@ -215,7 +215,7 @@ fn test_resize_policy() {\n /// overridden with one of the constructors.\n ///\n /// It is required that the keys implement the `Eq` and `Hash` traits, although\n-/// this can frequently be achieved by using `#[deriving(Eq, Hash)]`.\n+/// this can frequently be achieved by using `#[derive(Eq, Hash)]`.\n ///\n /// Relevant papers/articles:\n ///\n@@ -270,7 +270,7 @@ fn test_resize_policy() {\n /// ```\n /// use std::collections::HashMap;\n ///\n-/// #[deriving(Hash, Eq, PartialEq, Show)]\n+/// #[derive(Hash, Eq, PartialEq, Show)]\n /// struct Viking {\n ///     name: String,\n ///     country: String,\n@@ -295,7 +295,7 @@ fn test_resize_policy() {\n ///     println!(\"{} has {} hp\", viking, health);\n /// }\n /// ```\n-#[deriving(Clone)]\n+#[derive(Clone)]\n #[stable]\n pub struct HashMap<K, V, H = RandomSipHasher> {\n     // All hashes are keyed on these values, to prevent hash collision attacks.\n@@ -1356,7 +1356,7 @@ pub struct Iter<'a, K: 'a, V: 'a> {\n     inner: table::Iter<'a, K, V>\n }\n \n-// FIXME(#19839) Remove in favor of `#[deriving(Clone)]`\n+// FIXME(#19839) Remove in favor of `#[derive(Clone)]`\n impl<'a, K, V> Clone for Iter<'a, K, V> {\n     fn clone(&self) -> Iter<'a, K, V> {\n         Iter {\n@@ -1388,7 +1388,7 @@ pub struct Keys<'a, K: 'a, V: 'a> {\n     inner: Map<(&'a K, &'a V), &'a K, Iter<'a, K, V>, fn((&'a K, &'a V)) -> &'a K>\n }\n \n-// FIXME(#19839) Remove in favor of `#[deriving(Clone)]`\n+// FIXME(#19839) Remove in favor of `#[derive(Clone)]`\n impl<'a, K, V> Clone for Keys<'a, K, V> {\n     fn clone(&self) -> Keys<'a, K, V> {\n         Keys {\n@@ -1403,7 +1403,7 @@ pub struct Values<'a, K: 'a, V: 'a> {\n     inner: Map<(&'a K, &'a V), &'a V, Iter<'a, K, V>, fn((&'a K, &'a V)) -> &'a V>\n }\n \n-// FIXME(#19839) Remove in favor of `#[deriving(Clone)]`\n+// FIXME(#19839) Remove in favor of `#[derive(Clone)]`\n impl<'a, K, V> Clone for Values<'a, K, V> {\n     fn clone(&self) -> Values<'a, K, V> {\n         Values {\n@@ -1622,7 +1622,7 @@ mod test_map {\n \n     thread_local! { static DROP_VECTOR: RefCell<Vec<int>> = RefCell::new(Vec::new()) }\n \n-    #[deriving(Hash, PartialEq, Eq)]\n+    #[derive(Hash, PartialEq, Eq)]\n     struct Dropable {\n         k: uint\n     }"}, {"sha": "28c78ca3a913715315bb1a081516f7d980e74c78", "filename": "src/libstd/collections/hash/set.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -20,10 +20,10 @@ use fmt;\n use hash::{Hash, Hasher, RandomSipHasher};\n use iter::{Iterator, IteratorExt, IteratorCloneExt, FromIterator, Map, Chain, Extend};\n use ops::{BitOr, BitAnd, BitXor, Sub};\n-use option::Option::{Some, None, mod};\n+use option::Option::{Some, None, self};\n use result::Result::{Ok, Err};\n \n-use super::map::{mod, HashMap, Keys, INITIAL_CAPACITY};\n+use super::map::{self, HashMap, Keys, INITIAL_CAPACITY};\n \n // Future Optimization (FIXME!)\n // =============================\n@@ -71,7 +71,7 @@ use super::map::{mod, HashMap, Keys, INITIAL_CAPACITY};\n ///\n /// ```\n /// use std::collections::HashSet;\n-/// #[deriving(Hash, Eq, PartialEq, Show)]\n+/// #[derive(Hash, Eq, PartialEq, Show)]\n /// struct Viking<'a> {\n ///     name: &'a str,\n ///     power: uint,\n@@ -89,7 +89,7 @@ use super::map::{mod, HashMap, Keys, INITIAL_CAPACITY};\n ///     println!(\"{}\", x);\n /// }\n /// ```\n-#[deriving(Clone)]\n+#[derive(Clone)]\n #[stable]\n pub struct HashSet<T, H = RandomSipHasher> {\n     map: HashMap<T, (), H>"}, {"sha": "7c87094805deec7b08a281da3c4ac2e7c7283626", "filename": "src/libstd/collections/hash/table.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibstd%2Fcollections%2Fhash%2Ftable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibstd%2Fcollections%2Fhash%2Ftable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Ftable.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -124,7 +124,7 @@ struct GapThenFull<K, V, M> {\n \n /// A hash that is not zero, since we use a hash of zero to represent empty\n /// buckets.\n-#[deriving(PartialEq, Copy)]\n+#[derive(PartialEq, Copy)]\n pub struct SafeHash {\n     hash: u64,\n }\n@@ -718,7 +718,7 @@ struct RawBuckets<'a, K, V> {\n     marker: marker::ContravariantLifetime<'a>,\n }\n \n-// FIXME(#19839) Remove in favor of `#[deriving(Clone)]`\n+// FIXME(#19839) Remove in favor of `#[derive(Clone)]`\n impl<'a, K, V> Clone for RawBuckets<'a, K, V> {\n     fn clone(&self) -> RawBuckets<'a, K, V> {\n         RawBuckets {\n@@ -791,7 +791,7 @@ pub struct Iter<'a, K: 'a, V: 'a> {\n     elems_left: uint,\n }\n \n-// FIXME(#19839) Remove in favor of `#[deriving(Clone)]`\n+// FIXME(#19839) Remove in favor of `#[derive(Clone)]`\n impl<'a, K, V> Clone for Iter<'a, K, V> {\n     fn clone(&self) -> Iter<'a, K, V> {\n         Iter {"}, {"sha": "de3d75ffb324202c49001b202a2eee40b852c4a1", "filename": "src/libstd/dynamic_lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibstd%2Fdynamic_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibstd%2Fdynamic_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fdynamic_lib.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -252,7 +252,7 @@ pub mod dl {\n         dlclose(handle as *mut libc::c_void); ()\n     }\n \n-    #[deriving(Copy)]\n+    #[derive(Copy)]\n     pub enum Rtld {\n         Lazy = 1,\n         Now = 2,"}, {"sha": "cdd0e9bf76f86dfa91f1ca536d80810b2c10ff31", "filename": "src/libstd/hash.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibstd%2Fhash.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibstd%2Fhash.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fhash.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -11,15 +11,15 @@\n //! Generic hashing support.\n //!\n //! This module provides a generic way to compute the hash of a value. The\n-//! simplest way to make a type hashable is to use `#[deriving(Hash)]`:\n+//! simplest way to make a type hashable is to use `#[derive(Hash)]`:\n //!\n //! # Example\n //!\n //! ```rust\n //! use std::hash;\n //! use std::hash::Hash;\n //!\n-//! #[deriving(Hash)]\n+//! #[derive(Hash)]\n //! struct Person {\n //!     id: uint,\n //!     name: String,\n@@ -70,7 +70,7 @@ use rand;\n \n /// `RandomSipHasher` computes the SipHash algorithm from a stream of bytes\n /// initialized with random keys.\n-#[deriving(Clone)]\n+#[derive(Clone)]\n pub struct RandomSipHasher {\n     hasher: sip::SipHasher,\n }"}, {"sha": "d97f4a7bc34b6796d57e0dd81849fb0d89032597", "filename": "src/libstd/io/buffered.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibstd%2Fio%2Fbuffered.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibstd%2Fio%2Fbuffered.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fbuffered.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -413,7 +413,7 @@ mod test {\n     /// A type, free to create, primarily intended for benchmarking creation of\n     /// wrappers that, just for construction, don't need a Reader/Writer that\n     /// does anything useful. Is equivalent to `/dev/null` in semantics.\n-    #[deriving(Clone,PartialEq,PartialOrd)]\n+    #[derive(Clone,PartialEq,PartialOrd)]\n     pub struct NullStream;\n \n     impl Reader for NullStream {"}, {"sha": "5cb79d41db940a9ceb2b6325af1cd0c17aab5beb", "filename": "src/libstd/io/fs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibstd%2Fio%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibstd%2Fio%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Ffs.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -558,7 +558,7 @@ pub fn walk_dir(path: &Path) -> IoResult<Directories> {\n }\n \n /// An iterator that walks over a directory\n-#[deriving(Clone)]\n+#[derive(Clone)]\n pub struct Directories {\n     stack: Vec<Path>,\n }"}, {"sha": "1615541e37d4163f111c3d1c8af184b240d97c3c", "filename": "src/libstd/io/mem.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibstd%2Fio%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibstd%2Fio%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmem.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -19,7 +19,7 @@ use option::Option::None;\n use result::Result::{Err, Ok};\n use io;\n use io::{Reader, Writer, Seek, Buffer, IoError, SeekStyle, IoResult};\n-use slice::{mod, AsSlice, SliceExt};\n+use slice::{self, AsSlice, SliceExt};\n use vec::Vec;\n \n const BUF_CAPACITY: uint = 128;\n@@ -65,7 +65,7 @@ impl Writer for Vec<u8> {\n /// assert_eq!(w.into_inner(), vec!(0, 1, 2));\n /// ```\n #[deprecated = \"use the Vec<u8> Writer implementation directly\"]\n-#[deriving(Clone)]\n+#[derive(Clone)]\n pub struct MemWriter {\n     buf: Vec<u8>,\n }"}, {"sha": "590231dcd827c15e87035fb5b18764e7a3d332dc", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -301,7 +301,7 @@ pub type IoResult<T> = Result<T, IoError>;\n /// # FIXME\n ///\n /// Is something like this sufficient? It's kind of archaic\n-#[deriving(PartialEq, Eq, Clone)]\n+#[derive(PartialEq, Eq, Clone)]\n pub struct IoError {\n     /// An enumeration which can be matched against for determining the flavor\n     /// of error.\n@@ -368,7 +368,7 @@ impl FromError<IoError> for Box<Error> {\n }\n \n /// A list specifying general categories of I/O error.\n-#[deriving(Copy, PartialEq, Eq, Clone, Show)]\n+#[derive(Copy, PartialEq, Eq, Clone, Show)]\n pub enum IoErrorKind {\n     /// Any I/O error not part of this list.\n     OtherIoError,\n@@ -1565,7 +1565,7 @@ impl<T: Buffer> BufferPrelude for T {\n \n /// When seeking, the resulting cursor is offset from a base by the offset given\n /// to the `seek` function. The base used is specified by this enumeration.\n-#[deriving(Copy)]\n+#[derive(Copy)]\n pub enum SeekStyle {\n     /// Seek from the beginning of the stream\n     SeekSet,\n@@ -1690,7 +1690,7 @@ pub fn standard_error(kind: IoErrorKind) -> IoError {\n /// A mode specifies how a file should be opened or created. These modes are\n /// passed to `File::open_mode` and are used to control where the file is\n /// positioned when it is initially opened.\n-#[deriving(Copy, Clone, PartialEq, Eq)]\n+#[derive(Copy, Clone, PartialEq, Eq)]\n pub enum FileMode {\n     /// Opens a file positioned at the beginning.\n     Open,\n@@ -1702,7 +1702,7 @@ pub enum FileMode {\n \n /// Access permissions with which the file should be opened. `File`s\n /// opened with `Read` will return an error if written to.\n-#[deriving(Copy, Clone, PartialEq, Eq)]\n+#[derive(Copy, Clone, PartialEq, Eq)]\n pub enum FileAccess {\n     /// Read-only access, requests to write will result in an error\n     Read,\n@@ -1713,7 +1713,7 @@ pub enum FileAccess {\n }\n \n /// Different kinds of files which can be identified by a call to stat\n-#[deriving(Copy, PartialEq, Show, Hash, Clone)]\n+#[derive(Copy, PartialEq, Show, Hash, Clone)]\n pub enum FileType {\n     /// This is a normal file, corresponding to `S_IFREG`\n     RegularFile,\n@@ -1751,7 +1751,7 @@ pub enum FileType {\n /// println!(\"byte size: {}\", info.size);\n /// # }\n /// ```\n-#[deriving(Copy, Hash)]\n+#[derive(Copy, Hash)]\n pub struct FileStat {\n     /// The size of the file, in bytes\n     pub size: u64,\n@@ -1790,7 +1790,7 @@ pub struct FileStat {\n /// structure. This information is not necessarily platform independent, and may\n /// have different meanings or no meaning at all on some platforms.\n #[unstable]\n-#[deriving(Copy, Hash)]\n+#[derive(Copy, Hash)]\n pub struct UnstableFileStat {\n     /// The ID of the device containing the file.\n     pub device: u64,\n@@ -1929,7 +1929,7 @@ mod tests {\n     use prelude::v1::{Ok, Vec, Buffer, SliceExt};\n     use uint;\n \n-    #[deriving(Clone, PartialEq, Show)]\n+    #[derive(Clone, PartialEq, Show)]\n     enum BadReaderBehavior {\n         GoodBehavior(uint),\n         BadBehavior(uint)"}, {"sha": "24d45dcd65275a5a7531d34048ee3db7a6c21150", "filename": "src/libstd/io/net/addrinfo.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibstd%2Fio%2Fnet%2Faddrinfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibstd%2Fio%2Fnet%2Faddrinfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fnet%2Faddrinfo.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -29,7 +29,7 @@ use sys;\n use vec::Vec;\n \n /// Hints to the types of sockets that are desired when looking up hosts\n-#[deriving(Copy)]\n+#[derive(Copy)]\n pub enum SocketType {\n     Stream, Datagram, Raw\n }\n@@ -38,7 +38,7 @@ pub enum SocketType {\n /// to manipulate how a query is performed.\n ///\n /// The meaning of each of these flags can be found with `man -s 3 getaddrinfo`\n-#[deriving(Copy)]\n+#[derive(Copy)]\n pub enum Flag {\n     AddrConfig,\n     All,\n@@ -51,7 +51,7 @@ pub enum Flag {\n \n /// A transport protocol associated with either a hint or a return value of\n /// `lookup`\n-#[deriving(Copy)]\n+#[derive(Copy)]\n pub enum Protocol {\n     TCP, UDP\n }\n@@ -61,15 +61,15 @@ pub enum Protocol {\n ///\n /// For details on these fields, see their corresponding definitions via\n /// `man -s 3 getaddrinfo`\n-#[deriving(Copy)]\n+#[derive(Copy)]\n pub struct Hint {\n     pub family: uint,\n     pub socktype: Option<SocketType>,\n     pub protocol: Option<Protocol>,\n     pub flags: uint,\n }\n \n-#[deriving(Copy)]\n+#[derive(Copy)]\n pub struct Info {\n     pub address: SocketAddr,\n     pub family: uint,"}, {"sha": "52b589b5f24a7f50762895dfcfa5d5eb724cf1fc", "filename": "src/libstd/io/net/ip.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibstd%2Fio%2Fnet%2Fip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibstd%2Fio%2Fnet%2Fip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fnet%2Fip.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -18,7 +18,7 @@\n pub use self::IpAddr::*;\n \n use fmt;\n-use io::{mod, IoResult, IoError};\n+use io::{self, IoResult, IoError};\n use io::net;\n use iter::{Iterator, IteratorExt};\n use ops::FnOnce;\n@@ -31,7 +31,7 @@ use vec::Vec;\n \n pub type Port = u16;\n \n-#[deriving(Copy, PartialEq, Eq, Clone, Hash)]\n+#[derive(Copy, PartialEq, Eq, Clone, Hash)]\n pub enum IpAddr {\n     Ipv4Addr(u8, u8, u8, u8),\n     Ipv6Addr(u16, u16, u16, u16, u16, u16, u16, u16)\n@@ -62,7 +62,7 @@ impl fmt::Show for IpAddr {\n     }\n }\n \n-#[deriving(Copy, PartialEq, Eq, Clone, Hash)]\n+#[derive(Copy, PartialEq, Eq, Clone, Hash)]\n pub struct SocketAddr {\n     pub ip: IpAddr,\n     pub port: Port,"}, {"sha": "5886c9cc3e287cce773223efc80ef48546860fb6", "filename": "src/libstd/io/process.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibstd%2Fio%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibstd%2Fio%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fprocess.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -97,12 +97,12 @@ pub struct Process {\n /// A representation of environment variable name\n /// It compares case-insensitive on Windows and case-sensitive everywhere else.\n #[cfg(not(windows))]\n-#[deriving(PartialEq, Eq, Hash, Clone, Show)]\n+#[derive(PartialEq, Eq, Hash, Clone, Show)]\n struct EnvKey(CString);\n \n #[doc(hidden)]\n #[cfg(windows)]\n-#[deriving(Eq, Clone, Show)]\n+#[derive(Eq, Clone, Show)]\n struct EnvKey(CString);\n \n #[cfg(windows)]\n@@ -168,7 +168,7 @@ pub type EnvMap = HashMap<EnvKey, CString>;\n ///\n /// let output = process.stdout.as_mut().unwrap().read_to_end();\n /// ```\n-#[deriving(Clone)]\n+#[derive(Clone)]\n pub struct Command {\n     // The internal data for the builder. Documented by the builder\n     // methods below, and serialized into rt::rtio::ProcessConfig.\n@@ -450,7 +450,7 @@ impl sys::process::ProcessConfig<EnvKey, CString> for Command {\n }\n \n /// The output of a finished process.\n-#[deriving(PartialEq, Eq, Clone)]\n+#[derive(PartialEq, Eq, Clone)]\n pub struct ProcessOutput {\n     /// The status (exit code) of the process.\n     pub status: ProcessExit,\n@@ -461,7 +461,7 @@ pub struct ProcessOutput {\n }\n \n /// Describes what to do with a standard io stream for a child process.\n-#[deriving(Clone, Copy)]\n+#[derive(Clone, Copy)]\n pub enum StdioContainer {\n     /// This stream will be ignored. This is the equivalent of attaching the\n     /// stream to `/dev/null`\n@@ -483,7 +483,7 @@ pub enum StdioContainer {\n \n /// Describes the result of a process after it has terminated.\n /// Note that Windows have no signals, so the result is usually ExitStatus.\n-#[deriving(PartialEq, Eq, Clone, Copy)]\n+#[derive(PartialEq, Eq, Clone, Copy)]\n pub enum ProcessExit {\n     /// Normal termination with an exit status.\n     ExitStatus(int),"}, {"sha": "f571bed3ba2264c58893bd7a1db5ef9207ae8ebd", "filename": "src/libstd/io/stdio.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibstd%2Fio%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibstd%2Fio%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fstdio.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -104,7 +104,7 @@ unsafe impl Send for RaceBox {}\n unsafe impl Sync for RaceBox {}\n \n /// A synchronized wrapper around a buffered reader from stdin\n-#[deriving(Clone)]\n+#[derive(Clone)]\n pub struct StdinReader {\n     inner: Arc<Mutex<RaceBox>>,\n }"}, {"sha": "1381ad17ea2aae3b821625dbc1e03afbdbd7e08b", "filename": "src/libstd/io/util.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibstd%2Fio%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibstd%2Fio%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Futil.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -81,7 +81,7 @@ impl<R: Buffer> Buffer for LimitReader<R> {\n }\n \n /// A `Writer` which ignores bytes written to it, like /dev/null.\n-#[deriving(Copy)]\n+#[derive(Copy)]\n pub struct NullWriter;\n \n impl Writer for NullWriter {\n@@ -90,7 +90,7 @@ impl Writer for NullWriter {\n }\n \n /// A `Reader` which returns an infinite stream of 0 bytes, like /dev/zero.\n-#[deriving(Copy)]\n+#[derive(Copy)]\n pub struct ZeroReader;\n \n impl Reader for ZeroReader {\n@@ -111,7 +111,7 @@ impl Buffer for ZeroReader {\n }\n \n /// A `Reader` which is always at EOF, like /dev/null.\n-#[deriving(Copy)]\n+#[derive(Copy)]\n pub struct NullReader;\n \n impl Reader for NullReader {\n@@ -163,7 +163,7 @@ impl Writer for MultiWriter {\n \n /// A `Reader` which chains input from multiple `Reader`s, reading each to\n /// completion before moving onto the next.\n-#[deriving(Clone)]\n+#[derive(Clone)]\n pub struct ChainedReader<I, R> {\n     readers: I,\n     cur_reader: Option<R>,\n@@ -247,7 +247,7 @@ pub fn copy<R: Reader, W: Writer>(r: &mut R, w: &mut W) -> io::IoResult<()> {\n }\n \n /// An adaptor converting an `Iterator<u8>` to a `Reader`.\n-#[deriving(Clone)]\n+#[derive(Clone)]\n pub struct IterReader<T> {\n     iter: T,\n }"}, {"sha": "8f21fb0b8b97ddcaf76018c19b2a8a2f49192a3b", "filename": "src/libstd/num/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibstd%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibstd%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fmod.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -727,7 +727,7 @@ mod tests {\n     test_checked_next_power_of_two! { test_checked_next_power_of_two_u64, u64 }\n     test_checked_next_power_of_two! { test_checked_next_power_of_two_uint, uint }\n \n-    #[deriving(PartialEq, Show)]\n+    #[derive(PartialEq, Show)]\n     struct Value { x: int }\n \n     impl ToPrimitive for Value {"}, {"sha": "20dd70f0faab2ff756a6a3c8c757731ab77cdc9d", "filename": "src/libstd/num/strconv.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibstd%2Fnum%2Fstrconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibstd%2Fnum%2Fstrconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fstrconv.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -16,8 +16,8 @@ use self::ExponentFormat::*;\n use self::SignificantDigits::*;\n use self::SignFormat::*;\n \n-use char::{mod, Char};\n-use num::{mod, Int, Float, ToPrimitive};\n+use char::{self, Char};\n+use num::{self, Int, Float, ToPrimitive};\n use num::FpCategory as Fp;\n use ops::FnMut;\n use slice::SliceExt;\n@@ -26,7 +26,7 @@ use string::String;\n use vec::Vec;\n \n /// A flag that specifies whether to use exponential (scientific) notation.\n-#[deriving(Copy)]\n+#[derive(Copy)]\n pub enum ExponentFormat {\n     /// Do not use exponential notation.\n     ExpNone,\n@@ -41,7 +41,7 @@ pub enum ExponentFormat {\n \n /// The number of digits used for emitting the fractional part of a number, if\n /// any.\n-#[deriving(Copy)]\n+#[derive(Copy)]\n pub enum SignificantDigits {\n     /// All calculable digits will be printed.\n     ///\n@@ -58,7 +58,7 @@ pub enum SignificantDigits {\n }\n \n /// How to emit the sign of a number.\n-#[deriving(Copy)]\n+#[derive(Copy)]\n pub enum SignFormat {\n     /// No sign will be printed. The exponent sign will also be emitted.\n     SignNone,"}, {"sha": "771c808ab8a7a784f227fc02fefa8e1ef589f803", "filename": "src/libstd/os.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibstd%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibstd%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -361,7 +361,7 @@ pub fn join_paths<T: BytesContainer>(paths: &[T]) -> Result<Vec<u8>, &'static st\n }\n \n /// A low-level OS in-memory pipe.\n-#[deriving(Copy)]\n+#[derive(Copy)]\n pub struct Pipe {\n     /// A file descriptor representing the reading end of the pipe. Data written\n     /// on the `out` file descriptor can be read from this file descriptor.\n@@ -862,7 +862,7 @@ pub enum MapOption {\n impl Copy for MapOption {}\n \n /// Possible errors when creating a map.\n-#[deriving(Copy)]\n+#[derive(Copy)]\n pub enum MapError {\n     /// # The following are POSIX-specific\n     ///"}, {"sha": "ae82e201cb8555793b4f33efd2366c98fecfad5e", "filename": "src/libstd/path/posix.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibstd%2Fpath%2Fposix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibstd%2Fpath%2Fposix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath%2Fposix.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -35,7 +35,7 @@ pub type StrComponents<'a> =\n     Map<&'a [u8], Option<&'a str>, Components<'a>, fn(&[u8]) -> Option<&str>>;\n \n /// Represents a POSIX file path\n-#[deriving(Clone)]\n+#[derive(Clone)]\n pub struct Path {\n     repr: Vec<u8>, // assumed to never be empty or contain NULs\n     sepidx: Option<uint> // index of the final separator in repr\n@@ -450,10 +450,10 @@ mod tests {\n \n     use clone::Clone;\n     use iter::IteratorExt;\n-    use option::Option::{mod, Some, None};\n+    use option::Option::{self, Some, None};\n     use path::GenericPath;\n     use slice::{AsSlice, SliceExt};\n-    use str::{mod, Str, StrExt};\n+    use str::{self, Str, StrExt};\n     use string::ToString;\n     use vec::Vec;\n "}, {"sha": "aae8d6cadefb22935ae2e876548392cf11593b7e", "filename": "src/libstd/path/windows.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibstd%2Fpath%2Fwindows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibstd%2Fpath%2Fwindows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath%2Fwindows.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -78,7 +78,7 @@ pub type Components<'a> =\n //\n // The only error condition imposed here is valid utf-8. All other invalid paths are simply\n // preserved by the data structure; let the Windows API error out on them.\n-#[deriving(Clone)]\n+#[derive(Clone)]\n pub struct Path {\n     repr: String, // assumed to never be empty\n     prefix: Option<PathPrefix>,\n@@ -969,7 +969,7 @@ pub fn is_sep_byte_verbatim(u: &u8) -> bool {\n }\n \n /// Prefix types for Path\n-#[deriving(Copy, PartialEq, Clone, Show)]\n+#[derive(Copy, PartialEq, Clone, Show)]\n pub enum PathPrefix {\n     /// Prefix `\\\\?\\`, uint is the length of the following component\n     VerbatimPrefix(uint),\n@@ -1125,7 +1125,7 @@ mod tests {\n \n     use clone::Clone;\n     use iter::IteratorExt;\n-    use option::Option::{mod, Some, None};\n+    use option::Option::{self, Some, None};\n     use path::GenericPath;\n     use slice::{AsSlice, SliceExt};\n     use str::Str;"}, {"sha": "a122cb81b8c423ed169d9259079b490ed3668f82", "filename": "src/libstd/prelude/v1.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibstd%2Fprelude%2Fv1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibstd%2Fprelude%2Fv1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprelude%2Fv1.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -30,9 +30,9 @@\n #[stable] #[doc(no_inline)] pub use iter::ExactSizeIterator;\n #[stable] #[doc(no_inline)] pub use iter::{Iterator, IteratorExt, Extend};\n #[stable] #[doc(no_inline)] pub use iter::{IteratorCloneExt, IteratorOrdExt};\n-#[stable] #[doc(no_inline)] pub use option::Option::{mod, Some, None};\n+#[stable] #[doc(no_inline)] pub use option::Option::{self, Some, None};\n #[stable] #[doc(no_inline)] pub use ptr::{PtrExt, MutPtrExt};\n-#[stable] #[doc(no_inline)] pub use result::Result::{mod, Ok, Err};\n+#[stable] #[doc(no_inline)] pub use result::Result::{self, Ok, Err};\n #[stable] #[doc(no_inline)] pub use slice::AsSlice;\n #[stable] #[doc(no_inline)] pub use slice::{SliceExt, SliceConcatExt};\n #[stable] #[doc(no_inline)] pub use str::{Str, StrExt};"}, {"sha": "55063f1393f7435584946a1b274a226944558d48", "filename": "src/libstd/rand/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibstd%2Frand%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibstd%2Frand%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand%2Fmod.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -245,7 +245,7 @@ pub mod reader;\n \n /// The standard RNG. This is designed to be efficient on the current\n /// platform.\n-#[deriving(Copy)]\n+#[derive(Copy)]\n pub struct StdRng {\n     rng: IsaacWordRng,\n }"}, {"sha": "7cc39d7d972485977c23d9e3870f6b5b2bdd48fe", "filename": "src/libstd/rt/libunwind.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibstd%2Frt%2Flibunwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibstd%2Frt%2Flibunwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Flibunwind.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -25,7 +25,7 @@ use libc;\n \n #[cfg(any(not(target_arch = \"arm\"), target_os = \"ios\"))]\n #[repr(C)]\n-#[deriving(Copy)]\n+#[derive(Copy)]\n pub enum _Unwind_Action {\n     _UA_SEARCH_PHASE = 1,\n     _UA_CLEANUP_PHASE = 2,"}, {"sha": "2b0639c570537f09a6cdb39a6ca8c8f7f580c0b1", "filename": "src/libstd/rt/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibstd%2Frt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibstd%2Frt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fmod.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -66,7 +66,7 @@ fn lang_start(main: *const u8, argc: int, argv: *const *const u8) -> int {\n     use mem;\n     use os;\n     use rt;\n-    use sys_common::thread_info::{mod, NewThread};\n+    use sys_common::thread_info::{self, NewThread};\n     use sys_common;\n     use thread::Thread;\n "}, {"sha": "99f791df474f4cb3f416a6705c5c4c230e21165d", "filename": "src/libstd/rt/unwind.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibstd%2Frt%2Funwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibstd%2Frt%2Funwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Funwind.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -396,7 +396,7 @@ pub mod eabi {\n     pub struct DISPATCHER_CONTEXT;\n \n     #[repr(C)]\n-    #[deriving(Copy)]\n+    #[derive(Copy)]\n     pub enum EXCEPTION_DISPOSITION {\n         ExceptionContinueExecution,\n         ExceptionContinueSearch,"}, {"sha": "d6cf35ee3cd909345be9e2ee9bbac38fb039d2df", "filename": "src/libstd/rt/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibstd%2Frt%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibstd%2Frt%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Futil.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -15,7 +15,7 @@ use prelude::v1::*;\n use cmp;\n use fmt;\n use intrinsics;\n-use libc::{mod, uintptr_t};\n+use libc::{self, uintptr_t};\n use os;\n use slice;\n use str;"}, {"sha": "3652b45ce973b38a5954727006b253152c48ebe4", "filename": "src/libstd/sync/atomic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibstd%2Fsync%2Fatomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibstd%2Fsync%2Fatomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fatomic.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -104,7 +104,7 @@ pub use core::atomic::{AtomicBool, AtomicInt, AtomicUint, AtomicPtr};\n pub use core::atomic::{INIT_ATOMIC_BOOL, INIT_ATOMIC_INT, INIT_ATOMIC_UINT};\n pub use core::atomic::{ATOMIC_BOOL_INIT, ATOMIC_INT_INIT, ATOMIC_UINT_INIT};\n pub use core::atomic::fence;\n-pub use core::atomic::Ordering::{mod, Relaxed, Release, Acquire, AcqRel, SeqCst};\n+pub use core::atomic::Ordering::{self, Relaxed, Release, Acquire, AcqRel, SeqCst};\n \n /// An atomic, nullable unique pointer\n ///"}, {"sha": "28c36922ca6f88d347554244bc41b1b3e0afab5a", "filename": "src/libstd/sync/condvar.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibstd%2Fsync%2Fcondvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibstd%2Fsync%2Fcondvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fcondvar.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -10,8 +10,8 @@\n \n use prelude::v1::*;\n \n-use sync::atomic::{mod, AtomicUint};\n-use sync::poison::{mod, LockResult};\n+use sync::atomic::{self, AtomicUint};\n+use sync::poison::{self, LockResult};\n use sys_common::condvar as sys;\n use sys_common::mutex as sys_mutex;\n use time::Duration;"}, {"sha": "faff5f09f81e118c2928585f94654a8471842427", "filename": "src/libstd/sync/mpsc/blocking.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibstd%2Fsync%2Fmpsc%2Fblocking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibstd%2Fsync%2Fmpsc%2Fblocking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fblocking.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -26,7 +26,7 @@ struct Inner {\n unsafe impl Send for Inner {}\n unsafe impl Sync for Inner {}\n \n-#[deriving(Clone)]\n+#[derive(Clone)]\n pub struct SignalToken {\n     inner: Arc<Inner>,\n }"}, {"sha": "de1724cbc4e89fbaf3f3c2255d1c0cdb9c950537", "filename": "src/libstd/sync/mpsc/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -379,21 +379,21 @@ pub struct SyncSender<T> {\n /// A `send` operation can only fail if the receiving end of a channel is\n /// disconnected, implying that the data could never be received. The error\n /// contains the data being sent as a payload so it can be recovered.\n-#[deriving(PartialEq, Eq)]\n+#[derive(PartialEq, Eq)]\n #[stable]\n pub struct SendError<T>(pub T);\n \n /// An error returned from the `recv` function on a `Receiver`.\n ///\n /// The `recv` operation can only fail if the sending half of a channel is\n /// disconnected, implying that no further messages will ever be received.\n-#[deriving(PartialEq, Eq, Clone, Copy)]\n+#[derive(PartialEq, Eq, Clone, Copy)]\n #[stable]\n pub struct RecvError;\n \n /// This enumeration is the list of the possible reasons that try_recv could not\n /// return data when called.\n-#[deriving(PartialEq, Clone, Copy)]\n+#[derive(PartialEq, Clone, Copy)]\n #[stable]\n pub enum TryRecvError {\n     /// This channel is currently empty, but the sender(s) have not yet\n@@ -409,7 +409,7 @@ pub enum TryRecvError {\n \n /// This enumeration is the list of the possible error outcomes for the\n /// `SyncSender::try_send` method.\n-#[deriving(PartialEq, Clone)]\n+#[derive(PartialEq, Clone)]\n #[stable]\n pub enum TrySendError<T> {\n     /// The data could not be sent on the channel because it would require that"}, {"sha": "2811f403c6c3d0b2e4035e956e14c1a0281ffe09", "filename": "src/libstd/sync/mpsc/oneshot.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibstd%2Fsync%2Fmpsc%2Foneshot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibstd%2Fsync%2Fmpsc%2Foneshot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Foneshot.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -40,7 +40,7 @@ use self::MyUpgrade::*;\n use core::prelude::*;\n \n use sync::mpsc::Receiver;\n-use sync::mpsc::blocking::{mod, SignalToken};\n+use sync::mpsc::blocking::{self, SignalToken};\n use core::mem;\n use sync::atomic;\n "}, {"sha": "16adbf5aa4f69a24f6905ddeec193aa676b6feec", "filename": "src/libstd/sync/mpsc/select.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibstd%2Fsync%2Fmpsc%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibstd%2Fsync%2Fmpsc%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fselect.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -62,7 +62,7 @@ use core::mem;\n use core::uint;\n \n use sync::mpsc::{Receiver, RecvError};\n-use sync::mpsc::blocking::{mod, SignalToken};\n+use sync::mpsc::blocking::{self, SignalToken};\n \n /// The \"receiver set\" of the select interface. This structure is used to manage\n /// a set of receivers which are being selected over.\n@@ -94,7 +94,7 @@ pub struct Handle<'rx, T:'rx> {\n struct Packets { cur: *mut Handle<'static, ()> }\n \n #[doc(hidden)]\n-#[deriving(PartialEq)]\n+#[derive(PartialEq)]\n pub enum StartResult {\n     Installed,\n     Abort,"}, {"sha": "cadac8e62724ecc5147048e16d62f037fd7ad24d", "filename": "src/libstd/sync/mpsc/shared.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibstd%2Fsync%2Fmpsc%2Fshared.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibstd%2Fsync%2Fmpsc%2Fshared.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fshared.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -27,7 +27,7 @@ use core::int;\n \n use sync::{atomic, Mutex, MutexGuard};\n use sync::mpsc::mpsc_queue as mpsc;\n-use sync::mpsc::blocking::{mod, SignalToken};\n+use sync::mpsc::blocking::{self, SignalToken};\n use sync::mpsc::select::StartResult;\n use sync::mpsc::select::StartResult::*;\n use thread::Thread;"}, {"sha": "c526e6acb8f15f90787c689a983c4484e18426f9", "filename": "src/libstd/sync/mpsc/stream.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibstd%2Fsync%2Fmpsc%2Fstream.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibstd%2Fsync%2Fmpsc%2Fstream.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fstream.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -28,7 +28,7 @@ use core::cmp;\n use core::int;\n use thread::Thread;\n \n-use sync::mpsc::blocking::{mod, SignalToken};\n+use sync::mpsc::blocking::{self, SignalToken};\n use sync::mpsc::spsc_queue as spsc;\n use sync::mpsc::Receiver;\n use sync::atomic;"}, {"sha": "0eee10898bcbb1d134a7b2f786374d59863c0e96", "filename": "src/libstd/sync/mpsc/sync.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibstd%2Fsync%2Fmpsc%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibstd%2Fsync%2Fmpsc%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fsync.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -42,8 +42,8 @@ use vec::Vec;\n use core::mem;\n \n use sync::{atomic, Mutex, MutexGuard};\n-use sync::mpsc::blocking::{mod, WaitToken, SignalToken};\n-use sync::mpsc::select::StartResult::{mod, Installed, Abort};\n+use sync::mpsc::blocking::{self, WaitToken, SignalToken};\n+use sync::mpsc::select::StartResult::{self, Installed, Abort};\n \n pub struct Packet<T> {\n     /// Only field outside of the mutex. Just done for kicks, but mainly because\n@@ -103,7 +103,7 @@ struct Buffer<T> {\n     size: uint,\n }\n \n-#[deriving(Show)]\n+#[derive(Show)]\n pub enum Failure {\n     Empty,\n     Disconnected,"}, {"sha": "b158bd69c7b506addc9ecd1df5fdf4d8e82a58ea", "filename": "src/libstd/sync/mutex.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibstd%2Fsync%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibstd%2Fsync%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmutex.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -13,7 +13,7 @@ use prelude::v1::*;\n use cell::UnsafeCell;\n use kinds::marker;\n use ops::{Deref, DerefMut};\n-use sync::poison::{mod, TryLockError, TryLockResult, LockResult};\n+use sync::poison::{self, TryLockError, TryLockResult, LockResult};\n use sys_common::mutex as sys;\n \n /// A mutual exclusion primitive useful for protecting shared data"}, {"sha": "b2367ff8352fbb8d30f62b7f59080b93eb3bd9cb", "filename": "src/libstd/sync/rwlock.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibstd%2Fsync%2Frwlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibstd%2Fsync%2Frwlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Frwlock.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -13,7 +13,7 @@ use prelude::v1::*;\n use cell::UnsafeCell;\n use kinds::marker;\n use ops::{Deref, DerefMut};\n-use sync::poison::{mod, LockResult, TryLockError, TryLockResult};\n+use sync::poison::{self, LockResult, TryLockError, TryLockResult};\n use sys_common::rwlock as sys;\n \n /// A reader-writer lock\n@@ -362,7 +362,7 @@ impl<'a, T> Drop for RWLockWriteGuard<'a, T> {\n mod tests {\n     use prelude::v1::*;\n \n-    use rand::{mod, Rng};\n+    use rand::{self, Rng};\n     use sync::mpsc::channel;\n     use thread::Thread;\n     use sync::{Arc, RWLock, StaticRWLock, RWLOCK_INIT};"}, {"sha": "32fa6ec590335d3695062fd31bbf84a43e64e5fc", "filename": "src/libstd/sys/common/condvar.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibstd%2Fsys%2Fcommon%2Fcondvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibstd%2Fsys%2Fcommon%2Fcondvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcommon%2Fcondvar.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n use time::Duration;\n-use sys_common::mutex::{mod, Mutex};\n+use sys_common::mutex::{self, Mutex};\n use sys::condvar as imp;\n \n /// An OS-based condition variable."}, {"sha": "a441e55a732b01049a187df94b611ce36e8edafe", "filename": "src/libstd/sys/common/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibstd%2Fsys%2Fcommon%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibstd%2Fsys%2Fcommon%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcommon%2Fmod.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -11,7 +11,7 @@\n #![allow(missing_docs)]\n #![allow(dead_code)]\n \n-use io::{mod, IoError, IoResult};\n+use io::{self, IoError, IoResult};\n use prelude::v1::*;\n use sys::{last_error, retry};\n use c_str::CString;"}, {"sha": "3f67b284f688794d2611944e327463d0fce373c3", "filename": "src/libstd/sys/common/net.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibstd%2Fsys%2Fcommon%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibstd%2Fsys%2Fcommon%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcommon%2Fnet.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -16,22 +16,22 @@ use c_str::ToCStr;\n use io::net::addrinfo;\n use io::net::ip::{SocketAddr, IpAddr, Ipv4Addr, Ipv6Addr};\n use io::{IoResult, IoError};\n-use libc::{mod, c_char, c_int};\n+use libc::{self, c_char, c_int};\n use c_str::CString;\n use mem;\n use num::Int;\n-use ptr::{mod, null, null_mut};\n-use sys::{mod, retry, c, sock_t, last_error, last_net_error, last_gai_error, close_sock,\n+use ptr::{self, null, null_mut};\n+use sys::{self, retry, c, sock_t, last_error, last_net_error, last_gai_error, close_sock,\n           wrlen, msglen_t, os, wouldblock, set_nonblocking, timer, ms_to_timeval,\n           decode_error_detailed};\n use sync::{Arc, Mutex, MutexGuard};\n-use sys_common::{mod, keep_going, short_write, timeout};\n+use sys_common::{self, keep_going, short_write, timeout};\n use cmp;\n use io;\n \n // FIXME: move uses of Arc and deadline tracking to std::io\n \n-#[deriving(Show)]\n+#[derive(Show)]\n pub enum SocketStatus {\n     Readable,\n     Writable,"}, {"sha": "158fd3a8382a21bbe3e62b687818077ba1e564c0", "filename": "src/libstd/sys/common/thread_local.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibstd%2Fsys%2Fcommon%2Fthread_local.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibstd%2Fsys%2Fcommon%2Fthread_local.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcommon%2Fthread_local.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -58,7 +58,7 @@\n \n use prelude::v1::*;\n \n-use sync::atomic::{mod, AtomicUint};\n+use sync::atomic::{self, AtomicUint};\n use sync::{Mutex, Once, ONCE_INIT};\n \n use sys::thread_local as imp;"}, {"sha": "5b261ea6b9e58a85e9c5a94bc6da6ae4304ff890", "filename": "src/libstd/sys/unix/backtrace.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibstd%2Fsys%2Funix%2Fbacktrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibstd%2Fsys%2Funix%2Fbacktrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fbacktrace.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -87,7 +87,7 @@ use c_str::CString;\n use io::{IoResult, Writer};\n use libc;\n use mem;\n-use option::Option::{mod, Some, None};\n+use option::Option::{self, Some, None};\n use result::Result::{Ok, Err};\n use sync::{StaticMutex, MUTEX_INIT};\n "}, {"sha": "3aa4825f3be99375abbc6478af4884b4446962cb", "filename": "src/libstd/sys/unix/condvar.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibstd%2Fsys%2Funix%2Fcondvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibstd%2Fsys%2Funix%2Fcondvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fcondvar.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -10,7 +10,7 @@\n \n use cell::UnsafeCell;\n use libc;\n-use sys::mutex::{mod, Mutex};\n+use sys::mutex::{self, Mutex};\n use sys::sync as ffi;\n use time::Duration;\n "}, {"sha": "b49ace8e2f8d83509a13525f0744f7d206d1d28d", "filename": "src/libstd/sys/unix/fs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibstd%2Fsys%2Funix%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibstd%2Fsys%2Funix%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Ffs.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -17,7 +17,7 @@ use io::{FilePermission, Write, UnstableFileStat, Open, FileAccess, FileMode};\n use io::{IoResult, FileStat, SeekStyle};\n use io::{Read, Truncate, SeekCur, SeekSet, ReadWrite, SeekEnd, Append};\n use io;\n-use libc::{mod, c_int, c_void};\n+use libc::{self, c_int, c_void};\n use mem;\n use sys::retry;\n use sys_common::{keep_going, eof, mkerr_libc};"}, {"sha": "ea0d230e8b210c751d80df67a093e7f25f146dd5", "filename": "src/libstd/sys/unix/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibstd%2Fsys%2Funix%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibstd%2Fsys%2Funix%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fmod.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -20,7 +20,7 @@ extern crate libc;\n use num;\n use num::{Int, SignedInt};\n use prelude::v1::*;\n-use io::{mod, IoResult, IoError};\n+use io::{self, IoResult, IoError};\n use sys_common::mkerr_libc;\n \n macro_rules! helper_init { (static $name:ident: Helper<$m:ty>) => ("}, {"sha": "690574301d7dcebac289556fd6acc83e217eb47a", "filename": "src/libstd/sys/unix/os.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibstd%2Fsys%2Funix%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibstd%2Fsys%2Funix%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fos.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -16,7 +16,7 @@ use c_str::ToCStr;\n use error::{FromError, Error};\n use fmt;\n use io::{IoError, IoResult};\n-use libc::{mod, c_int, c_char, c_void};\n+use libc::{self, c_int, c_char, c_void};\n use os;\n use path::{BytesContainer};\n use ptr;"}, {"sha": "fcbfb383d3cc865295d18800bb5390d6415ff4a3", "filename": "src/libstd/sys/unix/pipe.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibstd%2Fsys%2Funix%2Fpipe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibstd%2Fsys%2Funix%2Fpipe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fpipe.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -14,9 +14,9 @@ use libc;\n use c_str::CString;\n use mem;\n use sync::{atomic, Arc, Mutex};\n-use io::{mod, IoResult, IoError};\n+use io::{self, IoResult, IoError};\n \n-use sys::{mod, timer, retry, c, set_nonblocking, wouldblock};\n+use sys::{self, timer, retry, c, set_nonblocking, wouldblock};\n use sys::fs::{fd_t, FileDesc};\n use sys_common::net::*;\n use sys_common::net::SocketStatus::*;"}, {"sha": "b73919fe2a2cc5b063b65624bea6c1a467b734dd", "filename": "src/libstd/sys/unix/process.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibstd%2Fsys%2Funix%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibstd%2Fsys%2Funix%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fprocess.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -15,15 +15,15 @@ use c_str::{CString, ToCStr};\n use collections;\n use hash::Hash;\n use io::process::{ProcessExit, ExitStatus, ExitSignal};\n-use io::{mod, IoResult, IoError, EndOfFile};\n-use libc::{mod, pid_t, c_void, c_int};\n+use io::{self, IoResult, IoError, EndOfFile};\n+use libc::{self, pid_t, c_void, c_int};\n use mem;\n use os;\n use path::BytesContainer;\n use ptr;\n use sync::mpsc::{channel, Sender, Receiver};\n use sys::fs::FileDesc;\n-use sys::{mod, retry, c, wouldblock, set_nonblocking, ms_to_timeval};\n+use sys::{self, retry, c, wouldblock, set_nonblocking, ms_to_timeval};\n use sys_common::helper_thread::Helper;\n use sys_common::{AsInner, mkerr_libc, timeout};\n "}, {"sha": "bee3d440a16c2bab6bf2c6539e7a271214650525", "filename": "src/libstd/sys/unix/tty.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibstd%2Fsys%2Funix%2Ftty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibstd%2Fsys%2Funix%2Ftty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Ftty.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -11,8 +11,8 @@\n use prelude::v1::*;\n \n use sys::fs::FileDesc;\n-use libc::{mod, c_int};\n-use io::{mod, IoResult, IoError};\n+use libc::{self, c_int};\n+use io::{self, IoResult, IoError};\n use sys_common;\n \n pub struct TTY {"}, {"sha": "291a8024cfccec76080f25deccdac04b98463501", "filename": "src/libstd/sys/windows/condvar.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibstd%2Fsys%2Fwindows%2Fcondvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibstd%2Fsys%2Fwindows%2Fcondvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fcondvar.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -9,9 +9,9 @@\n // except according to those terms.\n \n use cell::UnsafeCell;\n-use libc::{mod, DWORD};\n+use libc::{self, DWORD};\n use os;\n-use sys::mutex::{mod, Mutex};\n+use sys::mutex::{self, Mutex};\n use sys::sync as ffi;\n use time::Duration;\n "}, {"sha": "9a9423006568020e2d83e73fae538d8fd4c944b7", "filename": "src/libstd/sys/windows/fs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibstd%2Fsys%2Fwindows%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibstd%2Fsys%2Fwindows%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Ffs.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -11,7 +11,7 @@\n //! Blocking Windows-based file I/O\n \n use alloc::arc::Arc;\n-use libc::{mod, c_int};\n+use libc::{self, c_int};\n \n use c_str::CString;\n use mem;"}, {"sha": "a9fb2c682276715b3eadb2ad52057da118415082", "filename": "src/libstd/sys/windows/helper_signal.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibstd%2Fsys%2Fwindows%2Fhelper_signal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibstd%2Fsys%2Fwindows%2Fhelper_signal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fhelper_signal.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use libc::{mod, BOOL, LPCSTR, HANDLE, LPSECURITY_ATTRIBUTES, CloseHandle};\n+use libc::{self, BOOL, LPCSTR, HANDLE, LPSECURITY_ATTRIBUTES, CloseHandle};\n use ptr;\n \n pub type signal = HANDLE;"}, {"sha": "0e706c3cc6a57881794fd782fbfbaf75463a096a", "filename": "src/libstd/sys/windows/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibstd%2Fsys%2Fwindows%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibstd%2Fsys%2Fwindows%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fmod.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -22,7 +22,7 @@ use prelude::v1::*;\n \n use num;\n use mem;\n-use io::{mod, IoResult, IoError};\n+use io::{self, IoResult, IoError};\n use sync::{Once, ONCE_INIT};\n \n macro_rules! helper_init { (static $name:ident: Helper<$m:ty>) => ("}, {"sha": "f561e0121b3e611d46de08483433bda95883bfa5", "filename": "src/libstd/sys/windows/mutex.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibstd%2Fsys%2Fwindows%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibstd%2Fsys%2Fwindows%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fmutex.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -11,7 +11,7 @@\n use prelude::v1::*;\n \n use sync::atomic;\n-use alloc::{mod, heap};\n+use alloc::{self, heap};\n \n use libc::DWORD;\n use sys::sync as ffi;"}, {"sha": "0edae75a9ce64ad37316526ce6c2521e3d482b92", "filename": "src/libstd/sys/windows/pipe.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibstd%2Fsys%2Fwindows%2Fpipe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibstd%2Fsys%2Fwindows%2Fpipe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fpipe.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -91,9 +91,9 @@ use c_str::CString;\n use mem;\n use ptr;\n use sync::{atomic, Arc, Mutex};\n-use io::{mod, IoError, IoResult};\n+use io::{self, IoError, IoResult};\n \n-use sys_common::{mod, eof};\n+use sys_common::{self, eof};\n \n use super::{c, os, timer, to_utf16, decode_error_detailed};\n "}, {"sha": "81e8f974a12238abf9fad4e13d79571078cc050f", "filename": "src/libstd/sys/windows/process.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibstd%2Fsys%2Fwindows%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibstd%2Fsys%2Fwindows%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fprocess.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -24,7 +24,7 @@ use hash::Hash;\n use io::{IoResult, IoError};\n \n use sys::fs;\n-use sys::{mod, retry, c, wouldblock, set_nonblocking, ms_to_timeval, timer};\n+use sys::{self, retry, c, wouldblock, set_nonblocking, ms_to_timeval, timer};\n use sys::fs::FileDesc;\n use sys_common::helper_thread::Helper;\n use sys_common::{AsInner, mkerr_libc, timeout};"}, {"sha": "1c8ec2a80a7e405c480cbfb136ff137a3176b512", "filename": "src/libstd/sys/windows/tcp.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibstd%2Fsys%2Fwindows%2Ftcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibstd%2Fsys%2Fwindows%2Ftcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Ftcp.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -17,8 +17,8 @@ use prelude::v1::*;\n use super::{last_error, last_net_error, retry, sock_t};\n use sync::{Arc, atomic};\n use sys::fs::FileDesc;\n-use sys::{mod, c, set_nonblocking, wouldblock, timer};\n-use sys_common::{mod, timeout, eof, net};\n+use sys::{self, c, set_nonblocking, wouldblock, timer};\n+use sys_common::{self, timeout, eof, net};\n \n pub use sys_common::net::TcpStream;\n "}, {"sha": "4305f7743b56411e8224572f97a8e7bec6c7516c", "filename": "src/libstd/sys/windows/tty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibstd%2Fsys%2Fwindows%2Ftty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibstd%2Fsys%2Fwindows%2Ftty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Ftty.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -27,7 +27,7 @@\n \n use prelude::v1::*;\n \n-use io::{mod, IoError, IoResult, MemReader};\n+use io::{self, IoError, IoResult, MemReader};\n use iter::repeat;\n use libc::types::os::arch::extra::LPCVOID;\n use libc::{c_int, HANDLE, LPDWORD, DWORD, LPVOID};"}, {"sha": "9c8a5fc239ce3bd7350f6c998bc204d48a12b893", "filename": "src/libstd/thread.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibstd%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibstd%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -131,12 +131,12 @@ use cell::UnsafeCell;\n use clone::Clone;\n use kinds::{Send, Sync};\n use ops::{Drop, FnOnce};\n-use option::Option::{mod, Some, None};\n+use option::Option::{self, Some, None};\n use result::Result::{Err, Ok};\n use sync::{Mutex, Condvar, Arc};\n use str::Str;\n use string::String;\n-use rt::{mod, unwind};\n+use rt::{self, unwind};\n use io::{Writer, stdio};\n use thunk::Thunk;\n \n@@ -291,7 +291,7 @@ struct Inner {\n \n unsafe impl Sync for Inner {}\n \n-#[deriving(Clone)]\n+#[derive(Clone)]\n /// A handle to a thread.\n pub struct Thread {\n     inner: Arc<Inner>,"}, {"sha": "d3b4fab96810bce9de4500ef8a9d32e912e6a6db", "filename": "src/libstd/thread_local/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibstd%2Fthread_local%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibstd%2Fthread_local%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread_local%2Fmod.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -219,7 +219,7 @@ macro_rules! __thread_local_inner {\n \n /// Indicator of the state of a thread local storage key.\n #[unstable = \"state querying was recently added\"]\n-#[deriving(Eq, PartialEq, Copy)]\n+#[derive(Eq, PartialEq, Copy)]\n pub enum State {\n     /// All keys are in this state whenever a thread starts. Keys will\n     /// transition to the `Valid` state once the first call to `with` happens"}, {"sha": "d48b0342b3bf72c5b3c40cef10eb1ede1eb799d5", "filename": "src/libstd/time/duration.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibstd%2Ftime%2Fduration.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibstd%2Ftime%2Fduration.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftime%2Fduration.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -46,7 +46,7 @@ macro_rules! try_opt {\n \n /// ISO 8601 time duration with nanosecond precision.\n /// This also allows for the negative duration; see individual methods for details.\n-#[deriving(Clone, Copy, PartialEq, Eq, PartialOrd, Ord)]\n+#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord)]\n pub struct Duration {\n     secs: i64,\n     nanos: i32, // Always 0 <= nanos < NANOS_PER_SEC"}, {"sha": "c366ced58b2a8c5d067bf51461b58ff1ab2545f3", "filename": "src/libsyntax/abi.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibsyntax%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibsyntax%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fabi.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -15,7 +15,7 @@ pub use self::AbiArchitecture::*;\n \n use std::fmt;\n \n-#[deriving(Copy, PartialEq)]\n+#[derive(Copy, PartialEq)]\n pub enum Os {\n     OsWindows,\n     OsMacos,\n@@ -26,7 +26,7 @@ pub enum Os {\n     OsDragonfly,\n }\n \n-#[deriving(PartialEq, Eq, Hash, RustcEncodable, RustcDecodable, Clone, Copy)]\n+#[derive(PartialEq, Eq, Hash, RustcEncodable, RustcDecodable, Clone, Copy)]\n pub enum Abi {\n     // NB: This ordering MUST match the AbiDatas array below.\n     // (This is ensured by the test indices_are_correct().)\n@@ -47,7 +47,7 @@ pub enum Abi {\n }\n \n #[allow(non_camel_case_types)]\n-#[deriving(Copy, PartialEq)]\n+#[derive(Copy, PartialEq)]\n pub enum Architecture {\n     X86,\n     X86_64,\n@@ -56,15 +56,15 @@ pub enum Architecture {\n     Mipsel\n }\n \n-#[deriving(Copy)]\n+#[derive(Copy)]\n pub struct AbiData {\n     abi: Abi,\n \n     // Name of this ABI as we like it called.\n     name: &'static str,\n }\n \n-#[deriving(Copy)]\n+#[derive(Copy)]\n pub enum AbiArchitecture {\n     /// Not a real ABI (e.g., intrinsic)\n     RustArch,"}, {"sha": "01f66f3bbd060b2658bf6533d6c8a7cea59a5162", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 104, "deletions": 104, "changes": 208, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -79,7 +79,7 @@ use serialize::{Encodable, Decodable, Encoder, Decoder};\n /// table) and a SyntaxContext to track renaming and\n /// macro expansion per Flatt et al., \"Macros\n /// That Work Together\"\n-#[deriving(Clone, Copy, Hash, PartialOrd, Eq, Ord)]\n+#[derive(Clone, Copy, Hash, PartialOrd, Eq, Ord)]\n pub struct Ident {\n     pub name: Name,\n     pub ctxt: SyntaxContext\n@@ -157,7 +157,7 @@ pub const ILLEGAL_CTXT : SyntaxContext = 1;\n \n /// A name is a part of an identifier, representing a string or gensym. It's\n /// the result of interning.\n-#[deriving(Eq, Ord, PartialEq, PartialOrd, Hash,\n+#[derive(Eq, Ord, PartialEq, PartialOrd, Hash,\n            RustcEncodable, RustcDecodable, Clone, Copy)]\n pub struct Name(pub u32);\n \n@@ -197,15 +197,15 @@ impl<D: Decoder<E>, E> Decodable<D, E> for Ident {\n /// Function name (not all functions have names)\n pub type FnIdent = Option<Ident>;\n \n-#[deriving(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash,\n+#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash,\n            Show, Copy)]\n pub struct Lifetime {\n     pub id: NodeId,\n     pub span: Span,\n     pub name: Name\n }\n \n-#[deriving(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n+#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n pub struct LifetimeDef {\n     pub lifetime: Lifetime,\n     pub bounds: Vec<Lifetime>\n@@ -214,7 +214,7 @@ pub struct LifetimeDef {\n /// A \"Path\" is essentially Rust's notion of a name; for instance:\n /// std::cmp::PartialEq  .  It's represented as a sequence of identifiers,\n /// along with a bunch of supporting information.\n-#[deriving(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n+#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n pub struct Path {\n     pub span: Span,\n     /// A `::foo` path, is relative to the crate root rather than current\n@@ -226,7 +226,7 @@ pub struct Path {\n \n /// A segment of a path: an identifier, an optional lifetime, and a set of\n /// types.\n-#[deriving(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n+#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n pub struct PathSegment {\n     /// The identifier portion of this path segment.\n     pub identifier: Ident,\n@@ -239,7 +239,7 @@ pub struct PathSegment {\n     pub parameters: PathParameters,\n }\n \n-#[deriving(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n+#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n pub enum PathParameters {\n     AngleBracketedParameters(AngleBracketedParameterData),\n     ParenthesizedParameters(ParenthesizedParameterData),\n@@ -317,7 +317,7 @@ impl PathParameters {\n }\n \n /// A path like `Foo<'a, T>`\n-#[deriving(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n+#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n pub struct AngleBracketedParameterData {\n     /// The lifetime parameters for this path segment.\n     pub lifetimes: Vec<Lifetime>,\n@@ -335,7 +335,7 @@ impl AngleBracketedParameterData {\n }\n \n /// A path like `Foo(A,B) -> C`\n-#[deriving(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n+#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n pub struct ParenthesizedParameterData {\n     /// `(A,B)`\n     pub inputs: Vec<P<Ty>>,\n@@ -348,7 +348,7 @@ pub type CrateNum = u32;\n \n pub type NodeId = u32;\n \n-#[deriving(Clone, Eq, Ord, PartialOrd, PartialEq, RustcEncodable,\n+#[derive(Clone, Eq, Ord, PartialOrd, PartialEq, RustcEncodable,\n            RustcDecodable, Hash, Show, Copy)]\n pub struct DefId {\n     pub krate: CrateNum,\n@@ -369,23 +369,23 @@ pub const DUMMY_NODE_ID: NodeId = -1;\n /// typeck::collect::compute_bounds matches these against\n /// the \"special\" built-in traits (see middle::lang_items) and\n /// detects Copy, Send and Sync.\n-#[deriving(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n+#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n pub enum TyParamBound {\n     TraitTyParamBound(PolyTraitRef, TraitBoundModifier),\n     RegionTyParamBound(Lifetime)\n }\n \n /// A modifier on a bound, currently this is only used for `?Sized`, where the\n /// modifier is `Maybe`. Negative bounds should also be handled here.\n-#[deriving(Copy, Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n+#[derive(Copy, Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n pub enum TraitBoundModifier {\n     None,\n     Maybe,\n }\n \n pub type TyParamBounds = OwnedSlice<TyParamBound>;\n \n-#[deriving(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n+#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n pub struct TyParam {\n     pub ident: Ident,\n     pub id: NodeId,\n@@ -396,7 +396,7 @@ pub struct TyParam {\n \n /// Represents lifetimes and type parameters attached to a declaration\n /// of a function, enum, trait, etc.\n-#[deriving(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n+#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n pub struct Generics {\n     pub lifetimes: Vec<LifetimeDef>,\n     pub ty_params: OwnedSlice<TyParam>,\n@@ -415,34 +415,34 @@ impl Generics {\n     }\n }\n \n-#[deriving(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n+#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n pub struct WhereClause {\n     pub id: NodeId,\n     pub predicates: Vec<WherePredicate>,\n }\n \n-#[deriving(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n+#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n pub enum WherePredicate {\n     BoundPredicate(WhereBoundPredicate),\n     RegionPredicate(WhereRegionPredicate),\n     EqPredicate(WhereEqPredicate)\n }\n \n-#[deriving(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n+#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n pub struct WhereBoundPredicate {\n     pub span: Span,\n     pub bounded_ty: P<Ty>,\n     pub bounds: OwnedSlice<TyParamBound>,\n }\n \n-#[deriving(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n+#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n pub struct WhereRegionPredicate {\n     pub span: Span,\n     pub lifetime: Lifetime,\n     pub bounds: Vec<Lifetime>,\n }\n \n-#[deriving(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n+#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n pub struct WhereEqPredicate {\n     pub id: NodeId,\n     pub span: Span,\n@@ -454,7 +454,7 @@ pub struct WhereEqPredicate {\n /// used to drive conditional compilation\n pub type CrateConfig = Vec<P<MetaItem>> ;\n \n-#[deriving(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n+#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n pub struct Crate {\n     pub module: Mod,\n     pub attrs: Vec<Attribute>,\n@@ -465,7 +465,7 @@ pub struct Crate {\n \n pub type MetaItem = Spanned<MetaItem_>;\n \n-#[deriving(Clone, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n+#[derive(Clone, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n pub enum MetaItem_ {\n     MetaWord(InternedString),\n     MetaList(InternedString, Vec<P<MetaItem>>),\n@@ -497,7 +497,7 @@ impl PartialEq for MetaItem_ {\n     }\n }\n \n-#[deriving(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n+#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n pub struct Block {\n     pub view_items: Vec<ViewItem>,\n     pub stmts: Vec<P<Stmt>>,\n@@ -507,27 +507,27 @@ pub struct Block {\n     pub span: Span,\n }\n \n-#[deriving(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n+#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n pub struct Pat {\n     pub id: NodeId,\n     pub node: Pat_,\n     pub span: Span,\n }\n \n-#[deriving(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n+#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n pub struct FieldPat {\n     pub ident: Ident,\n     pub pat: P<Pat>,\n     pub is_shorthand: bool,\n }\n \n-#[deriving(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show, Copy)]\n+#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show, Copy)]\n pub enum BindingMode {\n     BindByRef(Mutability),\n     BindByValue(Mutability),\n }\n \n-#[deriving(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show, Copy)]\n+#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show, Copy)]\n pub enum PatWildKind {\n     /// Represents the wildcard pattern `_`\n     PatWildSingle,\n@@ -536,7 +536,7 @@ pub enum PatWildKind {\n     PatWildMulti,\n }\n \n-#[deriving(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n+#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n pub enum Pat_ {\n     /// Represents a wildcard pattern (either `_` or `..`)\n     PatWild(PatWildKind),\n@@ -565,13 +565,13 @@ pub enum Pat_ {\n     PatMac(Mac),\n }\n \n-#[deriving(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show, Copy)]\n+#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show, Copy)]\n pub enum Mutability {\n     MutMutable,\n     MutImmutable,\n }\n \n-#[deriving(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show, Copy)]\n+#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show, Copy)]\n pub enum BinOp {\n     BiAdd,\n     BiSub,\n@@ -593,7 +593,7 @@ pub enum BinOp {\n     BiGt,\n }\n \n-#[deriving(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show, Copy)]\n+#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show, Copy)]\n pub enum UnOp {\n     UnUniq,\n     UnDeref,\n@@ -603,7 +603,7 @@ pub enum UnOp {\n \n pub type Stmt = Spanned<Stmt_>;\n \n-#[deriving(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n+#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n pub enum Stmt_ {\n     /// Could be an item or a local (let) binding:\n     StmtDecl(P<Decl>, NodeId),\n@@ -617,7 +617,7 @@ pub enum Stmt_ {\n     StmtMac(P<Mac>, MacStmtStyle),\n }\n \n-#[deriving(Clone, Copy, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n+#[derive(Clone, Copy, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n pub enum MacStmtStyle {\n     /// The macro statement had a trailing semicolon, e.g. `foo! { ... };`\n     /// `foo!(...);`, `foo![...];`\n@@ -632,7 +632,7 @@ pub enum MacStmtStyle {\n \n /// Where a local declaration came from: either a true `let ... =\n /// ...;`, or one desugared from the pattern of a for loop.\n-#[deriving(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show, Copy)]\n+#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show, Copy)]\n pub enum LocalSource {\n     LocalLet,\n     LocalFor,\n@@ -641,7 +641,7 @@ pub enum LocalSource {\n // FIXME (pending discussion of #1697, #2178...): local should really be\n // a refinement on pat.\n /// Local represents a `let` statement, e.g., `let <pat>:<ty> = <expr>;`\n-#[deriving(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n+#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n pub struct Local {\n     pub pat: P<Pat>,\n     pub ty: Option<P<Ty>>,\n@@ -653,7 +653,7 @@ pub struct Local {\n \n pub type Decl = Spanned<Decl_>;\n \n-#[deriving(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n+#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n pub enum Decl_ {\n     /// A local (let) binding:\n     DeclLocal(P<Local>),\n@@ -662,15 +662,15 @@ pub enum Decl_ {\n }\n \n /// represents one arm of a 'match'\n-#[deriving(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n+#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n pub struct Arm {\n     pub attrs: Vec<Attribute>,\n     pub pats: Vec<P<Pat>>,\n     pub guard: Option<P<Expr>>,\n     pub body: P<Expr>,\n }\n \n-#[deriving(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n+#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n pub struct Field {\n     pub ident: SpannedIdent,\n     pub expr: P<Expr>,\n@@ -679,26 +679,26 @@ pub struct Field {\n \n pub type SpannedIdent = Spanned<Ident>;\n \n-#[deriving(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show, Copy)]\n+#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show, Copy)]\n pub enum BlockCheckMode {\n     DefaultBlock,\n     UnsafeBlock(UnsafeSource),\n }\n \n-#[deriving(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show, Copy)]\n+#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show, Copy)]\n pub enum UnsafeSource {\n     CompilerGenerated,\n     UserProvided,\n }\n \n-#[deriving(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n+#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n pub struct Expr {\n     pub id: NodeId,\n     pub node: Expr_,\n     pub span: Span,\n }\n \n-#[deriving(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n+#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n pub enum Expr_ {\n     /// First expr is the place; second expr is the value.\n     ExprBox(Option<P<Expr>>, P<Expr>),\n@@ -760,28 +760,28 @@ pub enum Expr_ {\n ///     <Vec<T> as SomeTrait>::SomeAssociatedItem\n ///      ^~~~~     ^~~~~~~~~   ^~~~~~~~~~~~~~~~~~\n ///      self_type  trait_name  item_name\n-#[deriving(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n+#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n pub struct QPath {\n     pub self_type: P<Ty>,\n     pub trait_ref: P<TraitRef>,\n     pub item_name: Ident, // FIXME(#20301) -- should use Name\n }\n \n-#[deriving(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show, Copy)]\n+#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show, Copy)]\n pub enum MatchSource {\n     Normal,\n     IfLetDesugar { contains_else_clause: bool },\n     WhileLetDesugar,\n }\n \n-#[deriving(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show, Copy)]\n+#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show, Copy)]\n pub enum CaptureClause {\n     CaptureByValue,\n     CaptureByRef,\n }\n \n /// A delimited sequence of token trees\n-#[deriving(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n+#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n pub struct Delimited {\n     /// The type of delimiter\n     pub delim: token::DelimToken,\n@@ -816,7 +816,7 @@ impl Delimited {\n }\n \n /// A sequence of token treesee\n-#[deriving(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n+#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n pub struct SequenceRepetition {\n     /// The sequence of token trees\n     pub tts: Vec<TokenTree>,\n@@ -830,7 +830,7 @@ pub struct SequenceRepetition {\n \n /// A Kleene-style [repetition operator](http://en.wikipedia.org/wiki/Kleene_star)\n /// for token sequences.\n-#[deriving(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show, Copy)]\n+#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show, Copy)]\n pub enum KleeneOp {\n     ZeroOrMore,\n     OneOrMore,\n@@ -848,7 +848,7 @@ pub enum KleeneOp {\n ///\n /// The RHS of an MBE macro is the only place `SubstNt`s are substituted.\n /// Nothing special happens to misnamed or misplaced `SubstNt`s.\n-#[deriving(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n+#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n #[doc=\"For macro invocations; parsing is delegated to the macro\"]\n pub enum TokenTree {\n     /// A single token\n@@ -938,22 +938,22 @@ pub type Mac = Spanned<Mac_>;\n /// is being invoked, and the vector of token-trees contains the source\n /// of the macro invocation.\n /// There's only one flavor, now, so this could presumably be simplified.\n-#[deriving(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n+#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n pub enum Mac_ {\n     // NB: the additional ident for a macro_rules-style macro is actually\n     // stored in the enclosing item. Oog.\n     MacInvocTT(Path, Vec<TokenTree> , SyntaxContext),   // new macro-invocation\n }\n \n-#[deriving(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show, Copy)]\n+#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show, Copy)]\n pub enum StrStyle {\n     CookedStr,\n     RawStr(uint)\n }\n \n pub type Lit = Spanned<Lit_>;\n \n-#[deriving(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show, Copy)]\n+#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show, Copy)]\n pub enum Sign {\n     Minus,\n     Plus\n@@ -969,7 +969,7 @@ impl<T> Sign where T: Int {\n     }\n }\n \n-#[deriving(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show, Copy)]\n+#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show, Copy)]\n pub enum LitIntType {\n     SignedIntLit(IntTy, Sign),\n     UnsignedIntLit(UintTy),\n@@ -986,7 +986,7 @@ impl LitIntType {\n     }\n }\n \n-#[deriving(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n+#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n pub enum Lit_ {\n     LitStr(InternedString, StrStyle),\n     LitBinary(Rc<Vec<u8> >),\n@@ -1000,13 +1000,13 @@ pub enum Lit_ {\n \n // NB: If you change this, you'll probably want to change the corresponding\n // type structure in middle/ty.rs as well.\n-#[deriving(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n+#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n pub struct MutTy {\n     pub ty: P<Ty>,\n     pub mutbl: Mutability,\n }\n \n-#[deriving(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n+#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n pub struct TypeField {\n     pub ident: Ident,\n     pub mt: MutTy,\n@@ -1015,7 +1015,7 @@ pub struct TypeField {\n \n /// Represents a required method in a trait declaration,\n /// one without a default implementation\n-#[deriving(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n+#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n pub struct TypeMethod {\n     pub ident: Ident,\n     pub attrs: Vec<Attribute>,\n@@ -1033,26 +1033,26 @@ pub struct TypeMethod {\n /// a default implementation A trait method is either required (meaning it\n /// doesn't have an implementation, just a signature) or provided (meaning it\n /// has a default implementation).\n-#[deriving(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n+#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n pub enum TraitItem {\n     RequiredMethod(TypeMethod),\n     ProvidedMethod(P<Method>),\n     TypeTraitItem(P<AssociatedType>),\n }\n \n-#[deriving(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n+#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n pub enum ImplItem {\n     MethodImplItem(P<Method>),\n     TypeImplItem(P<Typedef>),\n }\n \n-#[deriving(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n+#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n pub struct AssociatedType {\n     pub attrs: Vec<Attribute>,\n     pub ty_param: TyParam,\n }\n \n-#[deriving(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n+#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n pub struct Typedef {\n     pub id: NodeId,\n     pub span: Span,\n@@ -1062,7 +1062,7 @@ pub struct Typedef {\n     pub typ: P<Ty>,\n }\n \n-#[deriving(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Copy)]\n+#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Copy)]\n pub enum IntTy {\n     TyI,\n     TyI8,\n@@ -1087,7 +1087,7 @@ impl IntTy {\n     }\n }\n \n-#[deriving(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Copy)]\n+#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Copy)]\n pub enum UintTy {\n     TyU,\n     TyU8,\n@@ -1112,7 +1112,7 @@ impl fmt::Show for UintTy {\n     }\n }\n \n-#[deriving(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Copy)]\n+#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Copy)]\n pub enum FloatTy {\n     TyF32,\n     TyF64,\n@@ -1133,7 +1133,7 @@ impl FloatTy {\n }\n \n // Bind a type to an associated type: `A=Foo`.\n-#[deriving(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n+#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n pub struct TypeBinding {\n     pub id: NodeId,\n     pub ident: Ident,\n@@ -1143,15 +1143,15 @@ pub struct TypeBinding {\n \n \n // NB PartialEq method appears below.\n-#[deriving(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n+#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n pub struct Ty {\n     pub id: NodeId,\n     pub node: Ty_,\n     pub span: Span,\n }\n \n /// Not represented directly in the AST, referred to by name through a ty_path.\n-#[deriving(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show, Copy)]\n+#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show, Copy)]\n pub enum PrimTy {\n     TyInt(IntTy),\n     TyUint(UintTy),\n@@ -1161,7 +1161,7 @@ pub enum PrimTy {\n     TyChar\n }\n \n-#[deriving(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Copy)]\n+#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Copy)]\n pub enum Onceness {\n     Once,\n     Many\n@@ -1177,7 +1177,7 @@ impl fmt::Show for Onceness {\n }\n \n /// Represents the type of a closure\n-#[deriving(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n+#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n pub struct ClosureTy {\n     pub lifetimes: Vec<LifetimeDef>,\n     pub unsafety: Unsafety,\n@@ -1186,15 +1186,15 @@ pub struct ClosureTy {\n     pub bounds: TyParamBounds,\n }\n \n-#[deriving(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n+#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n pub struct BareFnTy {\n     pub unsafety: Unsafety,\n     pub abi: Abi,\n     pub lifetimes: Vec<LifetimeDef>,\n     pub decl: P<FnDecl>\n }\n \n-#[deriving(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n+#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n /// The different kinds of types recognized by the compiler\n pub enum Ty_ {\n     TyVec(P<Ty>),\n@@ -1229,13 +1229,13 @@ pub enum Ty_ {\n     TyInfer,\n }\n \n-#[deriving(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show, Copy)]\n+#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show, Copy)]\n pub enum AsmDialect {\n     AsmAtt,\n     AsmIntel\n }\n \n-#[deriving(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n+#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n pub struct InlineAsm {\n     pub asm: InternedString,\n     pub asm_str_style: StrStyle,\n@@ -1249,7 +1249,7 @@ pub struct InlineAsm {\n }\n \n /// represents an argument in a function header\n-#[deriving(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n+#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n pub struct Arg {\n     pub ty: P<Ty>,\n     pub pat: P<Pat>,\n@@ -1277,14 +1277,14 @@ impl Arg {\n }\n \n /// represents the header (not the body) of a function declaration\n-#[deriving(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n+#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n pub struct FnDecl {\n     pub inputs: Vec<Arg>,\n     pub output: FunctionRetTy,\n     pub variadic: bool\n }\n \n-#[deriving(Copy, Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash)]\n+#[derive(Copy, Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash)]\n pub enum Unsafety {\n     Unsafe,\n     Normal,\n@@ -1299,7 +1299,7 @@ impl fmt::Show for Unsafety {\n     }\n }\n \n-#[deriving(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n+#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n pub enum FunctionRetTy {\n     /// Functions with return type ! that always\n     /// raise an error or exit (i.e. never return to the caller)\n@@ -1318,7 +1318,7 @@ impl FunctionRetTy {\n }\n \n /// Represents the kind of 'self' associated with a method\n-#[deriving(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n+#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n pub enum ExplicitSelf_ {\n     /// No self\n     SelfStatic,\n@@ -1332,15 +1332,15 @@ pub enum ExplicitSelf_ {\n \n pub type ExplicitSelf = Spanned<ExplicitSelf_>;\n \n-#[deriving(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n+#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n pub struct Method {\n     pub attrs: Vec<Attribute>,\n     pub id: NodeId,\n     pub span: Span,\n     pub node: Method_,\n }\n \n-#[deriving(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n+#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n pub enum Method_ {\n     /// Represents a method declaration\n     MethDecl(Ident,\n@@ -1355,7 +1355,7 @@ pub enum Method_ {\n     MethMac(Mac),\n }\n \n-#[deriving(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n+#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n pub struct Mod {\n     /// A span from the first token past `{` to the last token until `}`.\n     /// For `mod foo;`, the inner span ranges from the first token\n@@ -1365,31 +1365,31 @@ pub struct Mod {\n     pub items: Vec<P<Item>>,\n }\n \n-#[deriving(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n+#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n pub struct ForeignMod {\n     pub abi: Abi,\n     pub view_items: Vec<ViewItem>,\n     pub items: Vec<P<ForeignItem>>,\n }\n \n-#[deriving(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n+#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n pub struct VariantArg {\n     pub ty: P<Ty>,\n     pub id: NodeId,\n }\n \n-#[deriving(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n+#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n pub enum VariantKind {\n     TupleVariantKind(Vec<VariantArg>),\n     StructVariantKind(P<StructDef>),\n }\n \n-#[deriving(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n+#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n pub struct EnumDef {\n     pub variants: Vec<P<Variant>>,\n }\n \n-#[deriving(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n+#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n pub struct Variant_ {\n     pub name: Ident,\n     pub attrs: Vec<Attribute>,\n@@ -1401,7 +1401,7 @@ pub struct Variant_ {\n \n pub type Variant = Spanned<Variant_>;\n \n-#[deriving(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show, Copy)]\n+#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show, Copy)]\n pub enum PathListItem_ {\n     PathListIdent { name: Ident, id: NodeId },\n     PathListMod { id: NodeId }\n@@ -1419,7 +1419,7 @@ pub type PathListItem = Spanned<PathListItem_>;\n \n pub type ViewPath = Spanned<ViewPath_>;\n \n-#[deriving(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n+#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n pub enum ViewPath_ {\n \n     /// `foo::bar::baz as quux`\n@@ -1436,15 +1436,15 @@ pub enum ViewPath_ {\n     ViewPathList(Path, Vec<PathListItem> , NodeId)\n }\n \n-#[deriving(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n+#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n pub struct ViewItem {\n     pub node: ViewItem_,\n     pub attrs: Vec<Attribute>,\n     pub vis: Visibility,\n     pub span: Span,\n }\n \n-#[deriving(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n+#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n pub enum ViewItem_ {\n     /// Ident: name used to refer to this crate in the code\n     /// optional (InternedString,StrStyle): if present, this is a location\n@@ -1460,17 +1460,17 @@ pub type Attribute = Spanned<Attribute_>;\n /// Distinguishes between Attributes that decorate items and Attributes that\n /// are contained as statements within items. These two cases need to be\n /// distinguished for pretty-printing.\n-#[deriving(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show, Copy)]\n+#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show, Copy)]\n pub enum AttrStyle {\n     AttrOuter,\n     AttrInner,\n }\n \n-#[deriving(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show, Copy)]\n+#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show, Copy)]\n pub struct AttrId(pub uint);\n \n /// Doc-comments are promoted to attributes that have is_sugared_doc = true\n-#[deriving(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n+#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n pub struct Attribute_ {\n     pub id: AttrId,\n     pub style: AttrStyle,\n@@ -1483,13 +1483,13 @@ pub struct Attribute_ {\n /// that the ref_id is for. The impl_id maps to the \"self type\" of this impl.\n /// If this impl is an ItemImpl, the impl_id is redundant (it could be the\n /// same as the impl's node id).\n-#[deriving(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n+#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n pub struct TraitRef {\n     pub path: Path,\n     pub ref_id: NodeId,\n }\n \n-#[deriving(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n+#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n pub struct PolyTraitRef {\n     /// The `'a` in `<'a> Foo<&'a T>`\n     pub bound_lifetimes: Vec<LifetimeDef>,\n@@ -1498,7 +1498,7 @@ pub struct PolyTraitRef {\n     pub trait_ref: TraitRef,\n }\n \n-#[deriving(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show, Copy)]\n+#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show, Copy)]\n pub enum Visibility {\n     Public,\n     Inherited,\n@@ -1513,7 +1513,7 @@ impl Visibility {\n     }\n }\n \n-#[deriving(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n+#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n pub struct StructField_ {\n     pub kind: StructFieldKind,\n     pub id: NodeId,\n@@ -1532,7 +1532,7 @@ impl StructField_ {\n \n pub type StructField = Spanned<StructField_>;\n \n-#[deriving(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show, Copy)]\n+#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show, Copy)]\n pub enum StructFieldKind {\n     NamedField(Ident, Visibility),\n     /// Element of a tuple-like struct\n@@ -1548,7 +1548,7 @@ impl StructFieldKind {\n     }\n }\n \n-#[deriving(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n+#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n pub struct StructDef {\n     /// Fields, not including ctor\n     pub fields: Vec<StructField>,\n@@ -1561,7 +1561,7 @@ pub struct StructDef {\n   FIXME (#3300): Should allow items to be anonymous. Right now\n   we just use dummy names for anon items.\n  */\n-#[deriving(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n+#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n pub struct Item {\n     pub ident: Ident,\n     pub attrs: Vec<Attribute>,\n@@ -1571,7 +1571,7 @@ pub struct Item {\n     pub span: Span,\n }\n \n-#[deriving(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n+#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n pub enum Item_ {\n     ItemStatic(P<Ty>, Mutability, P<Expr>),\n     ItemConst(P<Ty>, P<Expr>),\n@@ -1613,7 +1613,7 @@ impl Item_ {\n     }\n }\n \n-#[deriving(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n+#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n pub struct ForeignItem {\n     pub ident: Ident,\n     pub attrs: Vec<Attribute>,\n@@ -1623,7 +1623,7 @@ pub struct ForeignItem {\n     pub vis: Visibility,\n }\n \n-#[deriving(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n+#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n pub enum ForeignItem_ {\n     ForeignItemFn(P<FnDecl>, Generics),\n     ForeignItemStatic(P<Ty>, /* is_mutbl */ bool),\n@@ -1638,7 +1638,7 @@ impl ForeignItem_ {\n     }\n }\n \n-#[deriving(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show, Copy)]\n+#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show, Copy)]\n pub enum UnboxedClosureKind {\n     FnUnboxedClosureKind,\n     FnMutUnboxedClosureKind,\n@@ -1648,7 +1648,7 @@ pub enum UnboxedClosureKind {\n /// The data we save and restore about an inlined item or method.  This is not\n /// part of the AST that we parse from a file, but it becomes part of the tree\n /// that we trans.\n-#[deriving(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n+#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n pub enum InlinedItem {\n     IIItem(P<Item>),\n     IITraitItem(DefId /* impl id */, TraitItem),"}, {"sha": "53787d71eef800c72d23d424bf1f95c145486ed5", "filename": "src/libsyntax/ast_map/blocks.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibsyntax%2Fast_map%2Fblocks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibsyntax%2Fast_map%2Fblocks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_map%2Fblocks.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -41,7 +41,7 @@ use visit;\n ///   - The default implementation for a trait method.\n ///\n /// To construct one, use the `Code::from_node` function.\n-#[deriving(Copy)]\n+#[derive(Copy)]\n pub struct FnLikeNode<'a> { node: ast_map::Node<'a> }\n \n /// MaybeFnLike wraps a method that indicates if an object\n@@ -81,7 +81,7 @@ impl MaybeFnLike for ast::Expr {\n /// Carries either an FnLikeNode or a Block, as these are the two\n /// constructs that correspond to \"code\" (as in, something from which\n /// we can construct a control-flow graph).\n-#[deriving(Copy)]\n+#[derive(Copy)]\n pub enum Code<'a> {\n     FnLikeCode(FnLikeNode<'a>),\n     BlockCode(&'a Block),"}, {"sha": "c5dbd194e3e5fae3f47ae1512153fae4f977fb7d", "filename": "src/libsyntax/ast_map/mod.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibsyntax%2Fast_map%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibsyntax%2Fast_map%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_map%2Fmod.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -20,19 +20,19 @@ use fold::Folder;\n use parse::token;\n use print::pprust;\n use ptr::P;\n-use visit::{mod, Visitor};\n+use visit::{self, Visitor};\n \n use arena::TypedArena;\n use std::cell::RefCell;\n use std::fmt;\n use std::io::IoResult;\n-use std::iter::{mod, repeat};\n+use std::iter::{self, repeat};\n use std::mem;\n use std::slice;\n \n pub mod blocks;\n \n-#[deriving(Clone, Copy, PartialEq)]\n+#[derive(Clone, Copy, PartialEq)]\n pub enum PathElem {\n     PathMod(Name),\n     PathName(Name)\n@@ -53,7 +53,7 @@ impl fmt::Show for PathElem {\n     }\n }\n \n-#[deriving(Clone)]\n+#[derive(Clone)]\n struct LinkedPathNode<'a> {\n     node: PathElem,\n     next: LinkedPath<'a>,\n@@ -76,7 +76,7 @@ impl<'a> Iterator for LinkedPath<'a> {\n }\n \n // HACK(eddyb) move this into libstd (value wrapper for slice::Iter).\n-#[deriving(Clone)]\n+#[derive(Clone)]\n pub struct Values<'a, T:'a>(pub slice::Iter<'a, T>);\n \n impl<'a, T: Copy> Iterator for Values<'a, T> {\n@@ -104,7 +104,7 @@ pub fn path_to_string<PI: Iterator<Item=PathElem>>(path: PI) -> String {\n     }).to_string()\n }\n \n-#[deriving(Copy, Show)]\n+#[derive(Copy, Show)]\n pub enum Node<'ast> {\n     NodeItem(&'ast Item),\n     NodeForeignItem(&'ast ForeignItem),\n@@ -126,7 +126,7 @@ pub enum Node<'ast> {\n \n /// Represents an entry and its parent Node ID\n /// The odd layout is to bring down the total size.\n-#[deriving(Copy, Show)]\n+#[derive(Copy, Show)]\n enum MapEntry<'ast> {\n     /// Placeholder for holes in the map.\n     NotPresent,\n@@ -157,7 +157,7 @@ impl<'ast> Clone for MapEntry<'ast> {\n     }\n }\n \n-#[deriving(Show)]\n+#[derive(Show)]\n struct InlinedParent {\n     path: Vec<PathElem>,\n     ii: InlinedItem"}, {"sha": "4026da6cf8e478ed48e90eeb026f1b2ca3111133", "filename": "src/libsyntax/ast_util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibsyntax%2Fast_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibsyntax%2Fast_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_util.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -343,7 +343,7 @@ pub fn empty_generics() -> Generics {\n // ______________________________________________________________________\n // Enumerating the IDs which appear in an AST\n \n-#[deriving(RustcEncodable, RustcDecodable, Show, Copy)]\n+#[derive(RustcEncodable, RustcDecodable, Show, Copy)]\n pub struct IdRange {\n     pub min: NodeId,\n     pub max: NodeId,"}, {"sha": "43e23f26e930e8155d7cc8b634cbb3a18eefce57", "filename": "src/libsyntax/attr.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibsyntax%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibsyntax%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -277,7 +277,7 @@ pub fn find_crate_name(attrs: &[Attribute]) -> Option<InternedString> {\n     first_attr_value_str_by_name(attrs, \"crate_name\")\n }\n \n-#[deriving(Copy, PartialEq)]\n+#[derive(Copy, PartialEq)]\n pub enum InlineAttr {\n     InlineNone,\n     InlineHint,\n@@ -340,14 +340,14 @@ pub fn cfg_matches(diagnostic: &SpanHandler, cfgs: &[P<MetaItem>], cfg: &ast::Me\n }\n \n /// Represents the #[deprecated=\"foo\"] and friends attributes.\n-#[deriving(RustcEncodable,RustcDecodable,Clone,Show)]\n+#[derive(RustcEncodable,RustcDecodable,Clone,Show)]\n pub struct Stability {\n     pub level: StabilityLevel,\n     pub text: Option<InternedString>\n }\n \n /// The available stability levels.\n-#[deriving(RustcEncodable,RustcDecodable,PartialEq,PartialOrd,Clone,Show,Copy)]\n+#[derive(RustcEncodable,RustcDecodable,PartialEq,PartialOrd,Clone,Show,Copy)]\n pub enum StabilityLevel {\n     Deprecated,\n     Experimental,\n@@ -463,7 +463,7 @@ fn int_type_of_word(s: &str) -> Option<IntType> {\n     }\n }\n \n-#[deriving(PartialEq, Show, RustcEncodable, RustcDecodable, Copy)]\n+#[derive(PartialEq, Show, RustcEncodable, RustcDecodable, Copy)]\n pub enum ReprAttr {\n     ReprAny,\n     ReprInt(Span, IntType),\n@@ -482,7 +482,7 @@ impl ReprAttr {\n     }\n }\n \n-#[deriving(Eq, Hash, PartialEq, Show, RustcEncodable, RustcDecodable, Copy)]\n+#[derive(Eq, Hash, PartialEq, Show, RustcEncodable, RustcDecodable, Copy)]\n pub enum IntType {\n     SignedInt(ast::IntTy),\n     UnsignedInt(ast::UintTy)"}, {"sha": "2c7bbcb6faf723cd50bf5d2de675049b518a4ee7", "filename": "src/libsyntax/codemap.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibsyntax%2Fcodemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibsyntax%2Fcodemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fcodemap.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -36,13 +36,13 @@ pub trait Pos {\n \n /// A byte offset. Keep this small (currently 32-bits), as AST contains\n /// a lot of them.\n-#[deriving(Clone, Copy, PartialEq, Eq, Hash, PartialOrd, Show)]\n+#[derive(Clone, Copy, PartialEq, Eq, Hash, PartialOrd, Show)]\n pub struct BytePos(pub u32);\n \n /// A character offset. Because of multibyte utf8 characters, a byte offset\n /// is not equivalent to a character offset. The CodeMap will convert BytePos\n /// values to CharPos values as necessary.\n-#[deriving(Copy, PartialEq, Hash, PartialOrd, Show)]\n+#[derive(Copy, PartialEq, Hash, PartialOrd, Show)]\n pub struct CharPos(pub uint);\n \n // FIXME: Lots of boilerplate in these impls, but so far my attempts to fix\n@@ -94,7 +94,7 @@ impl Sub for CharPos {\n /// are *absolute* positions from the beginning of the codemap, not positions\n /// relative to FileMaps. Methods on the CodeMap can be used to relate spans back\n /// to the original source.\n-#[deriving(Clone, Copy, Show, Hash)]\n+#[derive(Clone, Copy, Show, Hash)]\n pub struct Span {\n     pub lo: BytePos,\n     pub hi: BytePos,\n@@ -105,7 +105,7 @@ pub struct Span {\n \n pub const DUMMY_SP: Span = Span { lo: BytePos(0), hi: BytePos(0), expn_id: NO_EXPANSION };\n \n-#[deriving(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show, Copy)]\n+#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show, Copy)]\n pub struct Spanned<T> {\n     pub node: T,\n     pub span: Span,\n@@ -188,15 +188,15 @@ pub struct FileMapAndLine { pub fm: Rc<FileMap>, pub line: uint }\n pub struct FileMapAndBytePos { pub fm: Rc<FileMap>, pub pos: BytePos }\n \n /// The syntax with which a macro was invoked.\n-#[deriving(Clone, Copy, Hash, Show)]\n+#[derive(Clone, Copy, Hash, Show)]\n pub enum MacroFormat {\n-    /// e.g. #[deriving(...)] <item>\n+    /// e.g. #[derive(...)] <item>\n     MacroAttribute,\n     /// e.g. `format!()`\n     MacroBang\n }\n \n-#[deriving(Clone, Hash, Show)]\n+#[derive(Clone, Hash, Show)]\n pub struct NameAndSpan {\n     /// The name of the macro that was invoked to create the thing\n     /// with this Span.\n@@ -210,7 +210,7 @@ pub struct NameAndSpan {\n }\n \n /// Extra information for tracking macro expansion of spans\n-#[deriving(Hash, Show)]\n+#[derive(Hash, Show)]\n pub struct ExpnInfo {\n     /// The location of the actual macro invocation, e.g. `let x =\n     /// foo!();`\n@@ -231,7 +231,7 @@ pub struct ExpnInfo {\n     pub callee: NameAndSpan\n }\n \n-#[deriving(PartialEq, Eq, Clone, Show, Hash, RustcEncodable, RustcDecodable, Copy)]\n+#[derive(PartialEq, Eq, Clone, Show, Hash, RustcEncodable, RustcDecodable, Copy)]\n pub struct ExpnId(u32);\n \n pub const NO_EXPANSION: ExpnId = ExpnId(-1);\n@@ -255,7 +255,7 @@ pub struct FileLines {\n }\n \n /// Identifies an offset of a multi-byte character in a FileMap\n-#[deriving(Copy)]\n+#[derive(Copy)]\n pub struct MultiByteChar {\n     /// The absolute offset of the character in the CodeMap\n     pub pos: BytePos,"}, {"sha": "c19c06c3155876d3e0d8d3a3e593c2564e3b0d4d", "filename": "src/libsyntax/diagnostic.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibsyntax%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibsyntax%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fdiagnostic.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -28,7 +28,7 @@ use term;\n /// maximum number of lines we will print for each error; arbitrary.\n static MAX_LINES: uint = 6u;\n \n-#[deriving(Clone, Copy)]\n+#[derive(Clone, Copy)]\n pub enum RenderSpan {\n     /// A FullSpan renders with both with an initial line for the\n     /// message, prefixed by file:linenum, followed by a summary of\n@@ -54,7 +54,7 @@ impl RenderSpan {\n     }\n }\n \n-#[deriving(Clone, Copy)]\n+#[derive(Clone, Copy)]\n pub enum ColorConfig {\n     Auto,\n     Always,\n@@ -71,12 +71,12 @@ pub trait Emitter {\n /// This structure is used to signify that a task has panicked with a fatal error\n /// from the diagnostics. You can use this with the `Any` trait to figure out\n /// how a rustc task died (if so desired).\n-#[deriving(Copy)]\n+#[derive(Copy)]\n pub struct FatalError;\n \n /// Signifies that the compiler died with an explicit call to `.bug`\n /// or `.span_bug` rather than a failed assertion, etc.\n-#[deriving(Copy)]\n+#[derive(Copy)]\n pub struct ExplicitBug;\n \n /// A span-handler is like a handler but also\n@@ -222,7 +222,7 @@ pub fn mk_handler(e: Box<Emitter + Send>) -> Handler {\n     }\n }\n \n-#[deriving(Copy, PartialEq, Clone)]\n+#[derive(Copy, PartialEq, Clone)]\n pub enum Level {\n     Bug,\n     Fatal,"}, {"sha": "91cc8a24622054ceeb29af05662c51e0eea16ab2", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -233,7 +233,7 @@ impl MacResult for MacItems {\n \n /// Fill-in macro expansion result, to allow compilation to continue\n /// after hitting errors.\n-#[deriving(Copy)]\n+#[derive(Copy)]\n pub struct DummyResult {\n     expr_only: bool,\n     span: Span\n@@ -311,7 +311,7 @@ pub enum SyntaxExtension {\n     /// A syntax extension that is attached to an item and creates new items\n     /// based upon it.\n     ///\n-    /// `#[deriving(...)]` is an `ItemDecorator`.\n+    /// `#[derive(...)]` is an `ItemDecorator`.\n     Decorator(Box<ItemDecorator + 'static>),\n \n     /// A syntax extension that is attached to an item and modifies it"}, {"sha": "7a67fab820de518b8e88e96bc9fe8d5e1e57ed7b", "filename": "src/libsyntax/ext/deriving/cmp/eq.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Feq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Feq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Feq.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use ast::{MetaItem, Item, Expr, mod};\n+use ast::{MetaItem, Item, Expr, self};\n use codemap::Span;\n use ext::base::ExtCtxt;\n use ext::build::AstBuilder;"}, {"sha": "c02416bfbea3a6a7be9aa3bb3a6acee938d4149e", "filename": "src/libsyntax/ext/deriving/cmp/ord.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ford.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ford.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ford.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -83,7 +83,7 @@ pub fn expand_deriving_ord<F>(cx: &mut ExtCtxt,\n     trait_def.expand(cx, mitem, item, push)\n }\n \n-#[deriving(Copy)]\n+#[derive(Copy)]\n pub enum OrderingOp {\n     PartialCmpOp, LtOp, LeOp, GtOp, GeOp,\n }"}, {"sha": "882136cb86259b411c7840b6a15f3de2eeb5f8aa", "filename": "src/libsyntax/ext/deriving/decodable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibsyntax%2Fext%2Fderiving%2Fdecodable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibsyntax%2Fext%2Fderiving%2Fdecodable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fdecodable.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-//! The compiler code necessary for `#[deriving(Decodable)]`. See encodable.rs for more.\n+//! The compiler code necessary for `#[derive(Decodable)]`. See encodable.rs for more.\n \n use ast;\n use ast::{MetaItem, Item, Expr, MutMutable};"}, {"sha": "b2c929123d586b6f56478c2bf73e3c790fc6d185", "filename": "src/libsyntax/ext/deriving/encodable.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibsyntax%2Fext%2Fderiving%2Fencodable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibsyntax%2Fext%2Fderiving%2Fencodable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fencodable.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -8,14 +8,14 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-//! The compiler code necessary to implement the `#[deriving(Encodable)]`\n+//! The compiler code necessary to implement the `#[derive(Encodable)]`\n //! (and `Decodable`, in decodable.rs) extension.  The idea here is that\n-//! type-defining items may be tagged with `#[deriving(Encodable, Decodable)]`.\n+//! type-defining items may be tagged with `#[derive(Encodable, Decodable)]`.\n //!\n //! For example, a type like:\n //!\n //! ```ignore\n-//! #[deriving(Encodable, Decodable)]\n+//! #[derive(Encodable, Decodable)]\n //! struct Node { id: uint }\n //! ```\n //!\n@@ -49,7 +49,7 @@\n //! references other non-built-in types.  A type definition like:\n //!\n //! ```ignore\n-//! #[deriving(Encodable, Decodable)]\n+//! #[derive(Encodable, Decodable)]\n //! struct Spanned<T> { node: T, span: Span }\n //! ```\n //!"}, {"sha": "8863de8757bf7ffb22abddccbb66b71301a59235", "filename": "src/libsyntax/ext/deriving/generic/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric%2Fmod.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -196,7 +196,7 @@ use attr;\n use attr::AttrMetaMethods;\n use ext::base::ExtCtxt;\n use ext::build::AstBuilder;\n-use codemap::{mod, DUMMY_SP};\n+use codemap::{self, DUMMY_SP};\n use codemap::Span;\n use fold::MoveMap;\n use owned_slice::OwnedSlice;\n@@ -1174,7 +1174,7 @@ impl<'a> MethodDef<'a> {\n     }\n }\n \n-#[deriving(PartialEq)] // dogfooding!\n+#[derive(PartialEq)] // dogfooding!\n enum StructType {\n     Unknown, Record, Tuple\n }"}, {"sha": "a236fa33eb1fe5aac72e8dbed0665130d1610338", "filename": "src/libsyntax/ext/deriving/generic/ty.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric%2Fty.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -24,7 +24,7 @@ use parse::token::special_idents;\n use ptr::P;\n \n /// The types of pointers\n-#[deriving(Clone)]\n+#[derive(Clone)]\n pub enum PtrTy<'a> {\n     /// &'lifetime mut\n     Borrowed(Option<&'a str>, ast::Mutability),\n@@ -34,7 +34,7 @@ pub enum PtrTy<'a> {\n \n /// A path, e.g. `::std::option::Option::<int>` (global). Has support\n /// for type parameters and a lifetime.\n-#[deriving(Clone)]\n+#[derive(Clone)]\n pub struct Path<'a> {\n     pub path: Vec<&'a str> ,\n     pub lifetime: Option<&'a str>,\n@@ -85,7 +85,7 @@ impl<'a> Path<'a> {\n }\n \n /// A type. Supports pointers, Self, and literals\n-#[deriving(Clone)]\n+#[derive(Clone)]\n pub enum Ty<'a> {\n     Self,\n     /// &/Box/ Ty\n@@ -217,7 +217,7 @@ fn mk_generics(lifetimes: Vec<ast::LifetimeDef>, ty_params: Vec<ast::TyParam>)\n }\n \n /// Lifetimes and bounds on type parameters\n-#[deriving(Clone)]\n+#[derive(Clone)]\n pub struct LifetimeBounds<'a> {\n     pub lifetimes: Vec<(&'a str, Vec<&'a str>)>,\n     pub bounds: Vec<(&'a str, Vec<Path<'a>>)>,"}, {"sha": "9ff42d85cfbb8ea6e63bc33c252548bc45049dd6", "filename": "src/libsyntax/ext/deriving/hash.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibsyntax%2Fext%2Fderiving%2Fhash.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibsyntax%2Fext%2Fderiving%2Fhash.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fhash.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -99,7 +99,7 @@ fn hash_substructure(cx: &mut ExtCtxt, trait_span: Span, substr: &Substructure)\n     }\n \n     if stmts.len() == 0 {\n-        cx.span_bug(trait_span, \"#[deriving(Hash)] needs at least one field\");\n+        cx.span_bug(trait_span, \"#[derive(Hash)] needs at least one field\");\n     }\n \n     cx.expr_block(cx.block(trait_span, stmts, None))"}, {"sha": "0513c75cf57dae41a18394c4903ee0d20ad65899", "filename": "src/libsyntax/ext/deriving/show.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibsyntax%2Fext%2Fderiving%2Fshow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibsyntax%2Fext%2Fderiving%2Fshow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fshow.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -67,7 +67,7 @@ fn show_substructure(cx: &mut ExtCtxt, span: Span,\n         Struct(_) => substr.type_ident,\n         EnumMatching(_, v, _) => v.node.name,\n         EnumNonMatchingCollapsed(..) | StaticStruct(..) | StaticEnum(..) => {\n-            cx.span_bug(span, \"nonsensical .fields in `#[deriving(Show)]`\")\n+            cx.span_bug(span, \"nonsensical .fields in `#[derive(Show)]`\")\n         }\n     };\n "}, {"sha": "e65ecc19ea1bbc7a44a63dc5bda0d53260824bec", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -802,7 +802,7 @@ fn expand_arm(arm: ast::Arm, fld: &mut MacroExpander) -> ast::Arm {\n /// A visitor that extracts the PatIdent (binding) paths\n /// from a given thingy and puts them in a mutable\n /// array\n-#[deriving(Clone)]\n+#[derive(Clone)]\n struct PatIdentFinder {\n     ident_accumulator: Vec<ast::Ident>\n }\n@@ -1320,7 +1320,7 @@ mod test {\n     // a visitor that extracts the paths\n     // from a given thingy and puts them in a mutable\n     // array (passed in to the traversal)\n-    #[deriving(Clone)]\n+    #[derive(Clone)]\n     struct PathExprFinderContext {\n         path_accumulator: Vec<ast::Path> ,\n     }"}, {"sha": "1f39555f4962c3217bc1dd8525ed1bedb4400b53", "filename": "src/libsyntax/ext/format.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibsyntax%2Fext%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibsyntax%2Fext%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fformat.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -24,7 +24,7 @@ use ptr::P;\n use std::collections::HashMap;\n use std::iter::repeat;\n \n-#[deriving(PartialEq)]\n+#[derive(PartialEq)]\n enum ArgumentType {\n     Known(String),\n     Unsigned"}, {"sha": "bac82494f28aaca0780d8f9b24ceba31fe5bf1ee", "filename": "src/libsyntax/ext/mtwt.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibsyntax%2Fext%2Fmtwt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibsyntax%2Fext%2Fmtwt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fmtwt.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -39,7 +39,7 @@ pub struct SCTable {\n     rename_memo: RefCell<HashMap<(SyntaxContext,Ident,Name),SyntaxContext>>,\n }\n \n-#[deriving(PartialEq, RustcEncodable, RustcDecodable, Hash, Show, Copy)]\n+#[derive(PartialEq, RustcEncodable, RustcDecodable, Hash, Show, Copy)]\n pub enum SyntaxContext_ {\n     EmptyCtxt,\n     Mark (Mrk,SyntaxContext),\n@@ -312,7 +312,7 @@ mod tests {\n \n     // because of the SCTable, I now need a tidy way of\n     // creating syntax objects. Sigh.\n-    #[deriving(Clone, PartialEq, Show)]\n+    #[derive(Clone, PartialEq, Show)]\n     enum TestSC {\n         M(Mrk),\n         R(Ident,Name)"}, {"sha": "69e473055e8e45a7be41e6dcf1fd4ddedd2c9efe", "filename": "src/libsyntax/ext/tt/macro_parser.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -103,7 +103,7 @@ use std::collections::hash_map::Entry::{Vacant, Occupied};\n // To avoid costly uniqueness checks, we require that `MatchSeq` always has\n // a nonempty body.\n \n-#[deriving(Clone)]\n+#[derive(Clone)]\n enum TokenTreeOrTokenTreeVec {\n     Tt(ast::TokenTree),\n     TtSeq(Rc<Vec<ast::TokenTree>>),\n@@ -126,13 +126,13 @@ impl TokenTreeOrTokenTreeVec {\n }\n \n /// an unzipping of `TokenTree`s\n-#[deriving(Clone)]\n+#[derive(Clone)]\n struct MatcherTtFrame {\n     elts: TokenTreeOrTokenTreeVec,\n     idx: uint,\n }\n \n-#[deriving(Clone)]\n+#[derive(Clone)]\n pub struct MatcherPos {\n     stack: Vec<MatcherTtFrame>,\n     top_elts: TokenTreeOrTokenTreeVec,"}, {"sha": "86e81ede8b0fe3a480b391d4f5477b0a05fa7de9", "filename": "src/libsyntax/ext/tt/transcribe.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibsyntax%2Fext%2Ftt%2Ftranscribe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibsyntax%2Fext%2Ftt%2Ftranscribe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Ftranscribe.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -24,15 +24,15 @@ use std::ops::Add;\n use std::collections::HashMap;\n \n ///an unzipping of `TokenTree`s\n-#[deriving(Clone)]\n+#[derive(Clone)]\n struct TtFrame {\n     forest: TokenTree,\n     idx: uint,\n     dotdotdoted: bool,\n     sep: Option<Token>,\n }\n \n-#[deriving(Clone)]\n+#[derive(Clone)]\n pub struct TtReader<'a> {\n     pub sp_diag: &'a SpanHandler,\n     /// the unzipped tree:\n@@ -99,7 +99,7 @@ fn lookup_cur_matched(r: &TtReader, name: Ident) -> Option<Rc<NamedMatch>> {\n     matched_opt.map(|s| lookup_cur_matched_by_matched(r, s))\n }\n \n-#[deriving(Clone)]\n+#[derive(Clone)]\n enum LockstepIterSize {\n     LisUnconstrained,\n     LisConstraint(uint, Ident),"}, {"sha": "f75873ac1c0f79d1c0cbaa3de741b0727ed5a654", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470118f3e915cdc8f936aca0640b28a7a3d8dc6c/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "patch": "@@ -107,7 +107,7 @@ enum Status {\n }\n \n /// A set of features to be used by later passes.\n-#[deriving(Copy)]\n+#[derive(Copy)]\n pub struct Features {\n     pub default_type_params: bool,\n     pub unboxed_closures: bool,"}]}