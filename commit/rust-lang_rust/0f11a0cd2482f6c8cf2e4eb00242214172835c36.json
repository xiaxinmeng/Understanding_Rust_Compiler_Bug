{"sha": "0f11a0cd2482f6c8cf2e4eb00242214172835c36", "node_id": "C_kwDOAAsO6NoAKDBmMTFhMGNkMjQ4MmY2YzhjZjJlNGViMDAyNDIyMTQxNzI4MzVjMzY", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2022-07-20T15:58:48Z"}, "committer": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2022-08-04T14:26:51Z"}, "message": "Add captures flag to capture or not while lowering", "tree": {"sha": "e9f8a4b8142bd06bc799cf7163b87d1da3abd5c7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e9f8a4b8142bd06bc799cf7163b87d1da3abd5c7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0f11a0cd2482f6c8cf2e4eb00242214172835c36", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEF0ntrgrd9qf9uuThgTGiTgx5768FAmLr1ysACgkQgTGiTgx5\n768uYw//f1irK+0tceM/lC8LKahhaYYPcL7X7j3QCFbMKJ4oOpDRl1lvrUts3kL0\n6BbwDOxhBNiVOrjROqA/5P2ddHyBOZifE2g0ELrhX1VA3hqdR+a5hs1N1noiF9Om\nn8Ei1PIzIv+JOUwP4krInqD3PKfAoPoXPWx2j1QblwM/OKg1XjzukuBf2rYWpDpm\nsJqhnPEMtsTxU0FfiFTq6uRplcT4pe5B9YCAVjbu3Bz7BBYx5AZIE59PmePEtWDq\nAwNzi7P4rbahzFkk0wkrPXCt4UJ6eVbV2FOZ0TctmtvPWj12b+Bct/vQqd/FcVZR\ntJXZRutb7EMDWF4V4OgrWXyly9GikDrBMC0onwAFLATpD2r0vBDxH4Z2mLZzfGK+\nyzOIogwwahWSPxsiGJMYfFwKwMxezIh3aXwjdb6Veox9MyuN2GiSdAXuTWSNQCDr\nsBZdFxOTVYAqMIaGDCS+WA/AIUC9ZOwNWsc/mKiWRKFgzeY+Q5zo9jvsCMBD0nAk\nkLRjP3CTfzs9iYGrXh2bD+j7qvyTv8X5Ho0JHzLDVKVm+9sewGgaHA6cqKD0fOgf\nWOtodEb4vYPs66aEDSHr+sP/6EldHwPhY0BVnrCg9xG6q/zBmJXFQWm1UEH3n69B\ntXhJpWdWNsEIxWcqIUaU4dgXMMIGoAoM2a4vHxe6b2OCFg+v/Ic=\n=nmgD\n-----END PGP SIGNATURE-----", "payload": "tree e9f8a4b8142bd06bc799cf7163b87d1da3abd5c7\nparent b14c9571fa93c863f822a37942cdcd339f46d108\nauthor Santiago Pastorino <spastorino@gmail.com> 1658332728 -0300\ncommitter Santiago Pastorino <spastorino@gmail.com> 1659623211 -0300\n\nAdd captures flag to capture or not while lowering\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0f11a0cd2482f6c8cf2e4eb00242214172835c36", "html_url": "https://github.com/rust-lang/rust/commit/0f11a0cd2482f6c8cf2e4eb00242214172835c36", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0f11a0cd2482f6c8cf2e4eb00242214172835c36/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b14c9571fa93c863f822a37942cdcd339f46d108", "url": "https://api.github.com/repos/rust-lang/rust/commits/b14c9571fa93c863f822a37942cdcd339f46d108", "html_url": "https://github.com/rust-lang/rust/commit/b14c9571fa93c863f822a37942cdcd339f46d108"}], "stats": {"total": 322, "additions": 211, "deletions": 111}, "files": [{"sha": "7d74007d1cb26ff609b611e13182f1f41669857b", "filename": "compiler/rustc_ast_lowering/src/asm.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0f11a0cd2482f6c8cf2e4eb00242214172835c36/compiler%2Frustc_ast_lowering%2Fsrc%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f11a0cd2482f6c8cf2e4eb00242214172835c36/compiler%2Frustc_ast_lowering%2Fsrc%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fasm.rs?ref=0f11a0cd2482f6c8cf2e4eb00242214172835c36", "patch": "@@ -234,6 +234,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                                 &sym.path,\n                                 ParamMode::Optional,\n                                 ImplTraitContext::Disallowed(ImplTraitPosition::Path),\n+                                true,\n                             );\n                             hir::InlineAsmOperand::SymStatic { path, def_id }\n                         } else {"}, {"sha": "d51393d88c032aed3c3b4c4c21fce5867fa89a76", "filename": "compiler/rustc_ast_lowering/src/block.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0f11a0cd2482f6c8cf2e4eb00242214172835c36/compiler%2Frustc_ast_lowering%2Fsrc%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f11a0cd2482f6c8cf2e4eb00242214172835c36/compiler%2Frustc_ast_lowering%2Fsrc%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fblock.rs?ref=0f11a0cd2482f6c8cf2e4eb00242214172835c36", "patch": "@@ -84,10 +84,9 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n     }\n \n     fn lower_local(&mut self, l: &Local) -> &'hir hir::Local<'hir> {\n-        let ty = l\n-            .ty\n-            .as_ref()\n-            .map(|t| self.lower_ty(t, ImplTraitContext::Disallowed(ImplTraitPosition::Variable)));\n+        let ty = l.ty.as_ref().map(|t| {\n+            self.lower_ty(t, ImplTraitContext::Disallowed(ImplTraitPosition::Variable), true)\n+        });\n         let init = l.kind.init().map(|init| self.lower_expr(init));\n         let hir_id = self.lower_node_id(l.id);\n         let pat = self.lower_pat(&l.pat);"}, {"sha": "b41140072418d719cc15ff665e4d8238024217e9", "filename": "compiler/rustc_ast_lowering/src/expr.rs", "status": "modified", "additions": 21, "deletions": 7, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/0f11a0cd2482f6c8cf2e4eb00242214172835c36/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f11a0cd2482f6c8cf2e4eb00242214172835c36/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs?ref=0f11a0cd2482f6c8cf2e4eb00242214172835c36", "patch": "@@ -69,6 +69,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                         ParamMode::Optional,\n                         ParenthesizedGenericArgs::Err,\n                         ImplTraitContext::Disallowed(ImplTraitPosition::Path),\n+                        true,\n                     ));\n                     let args = self.lower_exprs(args);\n                     hir::ExprKind::MethodCall(hir_seg, args, self.lower_span(span))\n@@ -89,14 +90,20 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 }\n                 ExprKind::Cast(ref expr, ref ty) => {\n                     let expr = self.lower_expr(expr);\n-                    let ty =\n-                        self.lower_ty(ty, ImplTraitContext::Disallowed(ImplTraitPosition::Type));\n+                    let ty = self.lower_ty(\n+                        ty,\n+                        ImplTraitContext::Disallowed(ImplTraitPosition::Type),\n+                        true,\n+                    );\n                     hir::ExprKind::Cast(expr, ty)\n                 }\n                 ExprKind::Type(ref expr, ref ty) => {\n                     let expr = self.lower_expr(expr);\n-                    let ty =\n-                        self.lower_ty(ty, ImplTraitContext::Disallowed(ImplTraitPosition::Type));\n+                    let ty = self.lower_ty(\n+                        ty,\n+                        ImplTraitContext::Disallowed(ImplTraitPosition::Type),\n+                        true,\n+                    );\n                     hir::ExprKind::Type(expr, ty)\n                 }\n                 ExprKind::AddrOf(k, m, ref ohs) => {\n@@ -226,6 +233,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                         path,\n                         ParamMode::Optional,\n                         ImplTraitContext::Disallowed(ImplTraitPosition::Path),\n+                        true,\n                     );\n                     hir::ExprKind::Path(qpath)\n                 }\n@@ -264,6 +272,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                             &se.path,\n                             ParamMode::Optional,\n                             ImplTraitContext::Disallowed(ImplTraitPosition::Path),\n+                            true,\n                         )),\n                         self.arena\n                             .alloc_from_iter(se.fields.iter().map(|x| self.lower_expr_field(x))),\n@@ -561,9 +570,11 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         body: impl FnOnce(&mut Self) -> hir::Expr<'hir>,\n     ) -> hir::ExprKind<'hir> {\n         let output = match ret_ty {\n-            Some(ty) => hir::FnRetTy::Return(\n-                self.lower_ty(&ty, ImplTraitContext::Disallowed(ImplTraitPosition::AsyncBlock)),\n-            ),\n+            Some(ty) => hir::FnRetTy::Return(self.lower_ty(\n+                &ty,\n+                ImplTraitContext::Disallowed(ImplTraitPosition::AsyncBlock),\n+                true,\n+            )),\n             None => hir::FnRetTy::DefaultReturn(self.lower_span(span)),\n         };\n \n@@ -1167,6 +1178,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                         path,\n                         ParamMode::Optional,\n                         ImplTraitContext::Disallowed(ImplTraitPosition::Path),\n+                        true,\n                     );\n                     // Destructure like a tuple struct.\n                     let tuple_struct_pat =\n@@ -1183,6 +1195,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                         path,\n                         ParamMode::Optional,\n                         ImplTraitContext::Disallowed(ImplTraitPosition::Path),\n+                        true,\n                     );\n                     // Destructure like a unit struct.\n                     let unit_struct_pat = hir::PatKind::Path(qpath);\n@@ -1207,6 +1220,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                     &se.path,\n                     ParamMode::Optional,\n                     ImplTraitContext::Disallowed(ImplTraitPosition::Path),\n+                    true,\n                 );\n                 let fields_omitted = match &se.rest {\n                     StructRest::Base(e) => {"}, {"sha": "134876c2086f72ffd06406311782f1d16e3bdfe4", "filename": "compiler/rustc_ast_lowering/src/item.rs", "status": "modified", "additions": 49, "deletions": 20, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/0f11a0cd2482f6c8cf2e4eb00242214172835c36/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f11a0cd2482f6c8cf2e4eb00242214172835c36/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs?ref=0f11a0cd2482f6c8cf2e4eb00242214172835c36", "patch": "@@ -308,7 +308,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                     &generics,\n                     id,\n                     ImplTraitContext::Disallowed(ImplTraitPosition::Generic),\n-                    |this| this.lower_ty(ty, ImplTraitContext::TypeAliasesOpaqueTy),\n+                    |this| this.lower_ty(ty, ImplTraitContext::TypeAliasesOpaqueTy, true),\n                 );\n                 hir::ItemKind::TyAlias(ty, generics)\n             }\n@@ -386,11 +386,15 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                             this.lower_trait_ref(\n                                 trait_ref,\n                                 ImplTraitContext::Disallowed(ImplTraitPosition::Trait),\n+                                true,\n                             )\n                         });\n \n-                        let lowered_ty = this\n-                            .lower_ty(ty, ImplTraitContext::Disallowed(ImplTraitPosition::Type));\n+                        let lowered_ty = this.lower_ty(\n+                            ty,\n+                            ImplTraitContext::Disallowed(ImplTraitPosition::Type),\n+                            true,\n+                        );\n \n                         (trait_ref, lowered_ty)\n                     });\n@@ -434,6 +438,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                         let bounds = this.lower_param_bounds(\n                             bounds,\n                             ImplTraitContext::Disallowed(ImplTraitPosition::Bound),\n+                            true,\n                         );\n                         let items = this.arena.alloc_from_iter(\n                             items.iter().map(|item| this.lower_trait_item_ref(item)),\n@@ -453,6 +458,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                         this.lower_param_bounds(\n                             bounds,\n                             ImplTraitContext::Disallowed(ImplTraitPosition::Bound),\n+                            true,\n                         )\n                     },\n                 );\n@@ -475,7 +481,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         span: Span,\n         body: Option<&Expr>,\n     ) -> (&'hir hir::Ty<'hir>, hir::BodyId) {\n-        let ty = self.lower_ty(ty, ImplTraitContext::Disallowed(ImplTraitPosition::Type));\n+        let ty = self.lower_ty(ty, ImplTraitContext::Disallowed(ImplTraitPosition::Type), true);\n         (ty, self.lower_const_body(span, body))\n     }\n \n@@ -661,8 +667,11 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                     hir::ForeignItemKind::Fn(fn_dec, fn_args, generics)\n                 }\n                 ForeignItemKind::Static(ref t, m, _) => {\n-                    let ty =\n-                        self.lower_ty(t, ImplTraitContext::Disallowed(ImplTraitPosition::Type));\n+                    let ty = self.lower_ty(\n+                        t,\n+                        ImplTraitContext::Disallowed(ImplTraitPosition::Type),\n+                        true,\n+                    );\n                     hir::ForeignItemKind::Static(ty, m)\n                 }\n                 ForeignItemKind::TyAlias(..) => hir::ForeignItemKind::Type,\n@@ -731,10 +740,11 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 path,\n                 ParamMode::ExplicitNamed, // no `'_` in declarations (Issue #61124)\n                 ImplTraitContext::Disallowed(ImplTraitPosition::Path),\n+                true,\n             );\n             self.arena.alloc(t)\n         } else {\n-            self.lower_ty(&f.ty, ImplTraitContext::Disallowed(ImplTraitPosition::Type))\n+            self.lower_ty(&f.ty, ImplTraitContext::Disallowed(ImplTraitPosition::Type), true)\n         };\n         let hir_id = self.lower_node_id(f.id);\n         self.lower_attrs(hir_id, &f.attrs);\n@@ -757,7 +767,8 @@ impl<'hir> LoweringContext<'_, 'hir> {\n \n         let (generics, kind, has_default) = match i.kind {\n             AssocItemKind::Const(_, ref ty, ref default) => {\n-                let ty = self.lower_ty(ty, ImplTraitContext::Disallowed(ImplTraitPosition::Type));\n+                let ty =\n+                    self.lower_ty(ty, ImplTraitContext::Disallowed(ImplTraitPosition::Type), true);\n                 let body = default.as_ref().map(|x| self.lower_const_body(i.span, Some(x)));\n                 (hir::Generics::empty(), hir::TraitItemKind::Const(ty, body), body.is_some())\n             }\n@@ -795,12 +806,17 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                     ImplTraitContext::Disallowed(ImplTraitPosition::Generic),\n                     |this| {\n                         let ty = ty.as_ref().map(|x| {\n-                            this.lower_ty(x, ImplTraitContext::Disallowed(ImplTraitPosition::Type))\n+                            this.lower_ty(\n+                                x,\n+                                ImplTraitContext::Disallowed(ImplTraitPosition::Type),\n+                                true,\n+                            )\n                         });\n                         hir::TraitItemKind::Type(\n                             this.lower_param_bounds(\n                                 bounds,\n                                 ImplTraitContext::Disallowed(ImplTraitPosition::Generic),\n+                                true,\n                             ),\n                             ty,\n                         )\n@@ -853,7 +869,8 @@ impl<'hir> LoweringContext<'_, 'hir> {\n \n         let (generics, kind) = match &i.kind {\n             AssocItemKind::Const(_, ty, expr) => {\n-                let ty = self.lower_ty(ty, ImplTraitContext::Disallowed(ImplTraitPosition::Type));\n+                let ty =\n+                    self.lower_ty(ty, ImplTraitContext::Disallowed(ImplTraitPosition::Type), true);\n                 (\n                     hir::Generics::empty(),\n                     hir::ImplItemKind::Const(ty, self.lower_const_body(i.span, expr.as_deref())),\n@@ -887,7 +904,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                             hir::ImplItemKind::TyAlias(ty)\n                         }\n                         Some(ty) => {\n-                            let ty = this.lower_ty(ty, ImplTraitContext::TypeAliasesOpaqueTy);\n+                            let ty = this.lower_ty(ty, ImplTraitContext::TypeAliasesOpaqueTy, true);\n                             hir::ImplItemKind::TyAlias(ty)\n                         }\n                     },\n@@ -1412,7 +1429,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n             return None;\n         }\n \n-        let bounds = self.lower_param_bounds(bounds, itctx);\n+        let bounds = self.lower_param_bounds(bounds, itctx, true);\n \n         let ident = self.lower_ident(ident);\n         let param_span = ident.span;\n@@ -1458,7 +1475,8 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                     panic!(\"Missing resolution for lifetime {:?} at {:?}\", id, ident.span)\n                 });\n                 let lt_id = self.next_node_id();\n-                let lifetime = self.new_named_lifetime_with_res(lt_id, ident_span, ident, res);\n+                let lifetime =\n+                    self.new_named_lifetime_with_res(lt_id, ident_span, ident, res, true);\n                 Some(hir::WherePredicate::RegionPredicate(hir::WhereRegionPredicate {\n                     lifetime,\n                     span,\n@@ -1478,12 +1496,16 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 span,\n             }) => hir::WherePredicate::BoundPredicate(hir::WhereBoundPredicate {\n                 bound_generic_params: self.lower_generic_params(bound_generic_params),\n-                bounded_ty: self\n-                    .lower_ty(bounded_ty, ImplTraitContext::Disallowed(ImplTraitPosition::Type)),\n+                bounded_ty: self.lower_ty(\n+                    bounded_ty,\n+                    ImplTraitContext::Disallowed(ImplTraitPosition::Type),\n+                    true,\n+                ),\n                 bounds: self.arena.alloc_from_iter(bounds.iter().map(|bound| {\n                     self.lower_param_bound(\n                         bound,\n                         ImplTraitContext::Disallowed(ImplTraitPosition::Bound),\n+                        true,\n                     )\n                 })),\n                 span: self.lower_span(span),\n@@ -1495,20 +1517,27 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 span,\n             }) => hir::WherePredicate::RegionPredicate(hir::WhereRegionPredicate {\n                 span: self.lower_span(span),\n-                lifetime: self.lower_lifetime(lifetime),\n+                lifetime: self.lower_lifetime(lifetime, true),\n                 bounds: self.lower_param_bounds(\n                     bounds,\n                     ImplTraitContext::Disallowed(ImplTraitPosition::Bound),\n+                    true,\n                 ),\n                 in_where_clause: true,\n             }),\n             WherePredicate::EqPredicate(WhereEqPredicate { id, ref lhs_ty, ref rhs_ty, span }) => {\n                 hir::WherePredicate::EqPredicate(hir::WhereEqPredicate {\n                     hir_id: self.lower_node_id(id),\n-                    lhs_ty: self\n-                        .lower_ty(lhs_ty, ImplTraitContext::Disallowed(ImplTraitPosition::Type)),\n-                    rhs_ty: self\n-                        .lower_ty(rhs_ty, ImplTraitContext::Disallowed(ImplTraitPosition::Type)),\n+                    lhs_ty: self.lower_ty(\n+                        lhs_ty,\n+                        ImplTraitContext::Disallowed(ImplTraitPosition::Type),\n+                        true,\n+                    ),\n+                    rhs_ty: self.lower_ty(\n+                        rhs_ty,\n+                        ImplTraitContext::Disallowed(ImplTraitPosition::Type),\n+                        true,\n+                    ),\n                     span: self.lower_span(span),\n                 })\n             }"}, {"sha": "2749af72b68fd508427d3ff12dbbd38946a61de6", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 109, "deletions": 71, "changes": 180, "blob_url": "https://github.com/rust-lang/rust/blob/0f11a0cd2482f6c8cf2e4eb00242214172835c36/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f11a0cd2482f6c8cf2e4eb00242214172835c36/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=0f11a0cd2482f6c8cf2e4eb00242214172835c36", "patch": "@@ -957,7 +957,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         let kind = match constraint.kind {\n             AssocConstraintKind::Equality { ref term } => {\n                 let term = match term {\n-                    Term::Ty(ref ty) => self.lower_ty(ty, itctx).into(),\n+                    Term::Ty(ref ty) => self.lower_ty(ty, itctx, true).into(),\n                     Term::Const(ref c) => self.lower_anon_const(c).into(),\n                 };\n                 hir::TypeBindingKind::Equality { term }\n@@ -1022,14 +1022,15 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                                 tokens: None,\n                             },\n                             itctx,\n+                            true,\n                         );\n \n                         hir::TypeBindingKind::Equality { term: ty.into() }\n                     })\n                 } else {\n                     // Desugar `AssocTy: Bounds` into a type binding where the\n                     // later desugars into a trait predicate.\n-                    let bounds = self.lower_param_bounds(bounds, itctx);\n+                    let bounds = self.lower_param_bounds(bounds, itctx, true);\n \n                     hir::TypeBindingKind::Constraint { bounds }\n                 }\n@@ -1088,7 +1089,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         itctx: ImplTraitContext,\n     ) -> hir::GenericArg<'hir> {\n         match arg {\n-            ast::GenericArg::Lifetime(lt) => GenericArg::Lifetime(self.lower_lifetime(&lt)),\n+            ast::GenericArg::Lifetime(lt) => GenericArg::Lifetime(self.lower_lifetime(&lt, true)),\n             ast::GenericArg::Type(ty) => {\n                 match ty.kind {\n                     TyKind::Infer if self.tcx.features().generic_arg_infer => {\n@@ -1137,7 +1138,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                     }\n                     _ => {}\n                 }\n-                GenericArg::Type(self.lower_ty_direct(&ty, itctx))\n+                GenericArg::Type(self.lower_ty_direct(&ty, itctx, true))\n             }\n             ast::GenericArg::Const(ct) => GenericArg::Const(ConstArg {\n                 value: self.lower_anon_const(&ct),\n@@ -1147,8 +1148,8 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n     }\n \n     #[instrument(level = \"debug\", skip(self))]\n-    fn lower_ty(&mut self, t: &Ty, itctx: ImplTraitContext) -> &'hir hir::Ty<'hir> {\n-        self.arena.alloc(self.lower_ty_direct(t, itctx))\n+    fn lower_ty(&mut self, t: &Ty, itctx: ImplTraitContext, captures: bool) -> &'hir hir::Ty<'hir> {\n+        self.arena.alloc(self.lower_ty_direct(t, itctx, captures))\n     }\n \n     fn lower_path_ty(\n@@ -1158,6 +1159,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         path: &Path,\n         param_mode: ParamMode,\n         itctx: ImplTraitContext,\n+        captures: bool,\n     ) -> hir::Ty<'hir> {\n         // Check whether we should interpret this as a bare trait object.\n         // This check mirrors the one in late resolution.  We only introduce this special case in\n@@ -1177,6 +1179,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                         span: t.span\n                     },\n                     itctx,\n+                    captures,\n                 );\n                 let bounds = this.arena.alloc_from_iter([bound]);\n                 let lifetime_bound = this.elided_dyn_bound(t.span);\n@@ -1187,7 +1190,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         }\n \n         let id = self.lower_node_id(t.id);\n-        let qpath = self.lower_qpath(t.id, qself, path, param_mode, itctx);\n+        let qpath = self.lower_qpath(t.id, qself, path, param_mode, itctx, true);\n         self.ty_path(id, t.span, qpath)\n     }\n \n@@ -1199,11 +1202,16 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         self.ty(span, hir::TyKind::Tup(tys))\n     }\n \n-    fn lower_ty_direct(&mut self, t: &Ty, itctx: ImplTraitContext) -> hir::Ty<'hir> {\n+    fn lower_ty_direct(\n+        &mut self,\n+        t: &Ty,\n+        itctx: ImplTraitContext,\n+        captures: bool,\n+    ) -> hir::Ty<'hir> {\n         let kind = match t.kind {\n             TyKind::Infer => hir::TyKind::Infer,\n             TyKind::Err => hir::TyKind::Err,\n-            TyKind::Slice(ref ty) => hir::TyKind::Slice(self.lower_ty(ty, itctx)),\n+            TyKind::Slice(ref ty) => hir::TyKind::Slice(self.lower_ty(ty, itctx, captures)),\n             TyKind::Ptr(ref mt) => hir::TyKind::Ptr(self.lower_mt(mt, itctx)),\n             TyKind::Rptr(ref region, ref mt) => {\n                 let region = region.unwrap_or_else(|| {\n@@ -1218,7 +1226,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                     let span = self.tcx.sess.source_map().next_point(t.span.shrink_to_lo());\n                     Lifetime { ident: Ident::new(kw::UnderscoreLifetime, span), id }\n                 });\n-                let lifetime = self.lower_lifetime(&region);\n+                let lifetime = self.lower_lifetime(&region, captures);\n                 hir::TyKind::Rptr(lifetime, self.lower_mt(mt, itctx))\n             }\n             TyKind::BareFn(ref f) => {\n@@ -1233,14 +1241,16 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                 })\n             }\n             TyKind::Never => hir::TyKind::Never,\n-            TyKind::Tup(ref tys) => hir::TyKind::Tup(\n-                self.arena.alloc_from_iter(tys.iter().map(|ty| self.lower_ty_direct(ty, itctx))),\n-            ),\n+            TyKind::Tup(ref tys) => {\n+                hir::TyKind::Tup(self.arena.alloc_from_iter(\n+                    tys.iter().map(|ty| self.lower_ty_direct(ty, itctx, captures)),\n+                ))\n+            }\n             TyKind::Paren(ref ty) => {\n-                return self.lower_ty_direct(ty, itctx);\n+                return self.lower_ty_direct(ty, itctx, captures);\n             }\n             TyKind::Path(ref qself, ref path) => {\n-                return self.lower_path_ty(t, qself, path, ParamMode::Explicit, itctx);\n+                return self.lower_path_ty(t, qself, path, ParamMode::Explicit, itctx, captures);\n             }\n             TyKind::ImplicitSelf => {\n                 let res = self.expect_full_res(t.id);\n@@ -1256,9 +1266,10 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                     }),\n                 ))\n             }\n-            TyKind::Array(ref ty, ref length) => {\n-                hir::TyKind::Array(self.lower_ty(ty, itctx), self.lower_array_length(length))\n-            }\n+            TyKind::Array(ref ty, ref length) => hir::TyKind::Array(\n+                self.lower_ty(ty, itctx, captures),\n+                self.lower_array_length(length),\n+            ),\n             TyKind::Typeof(ref expr) => hir::TyKind::Typeof(self.lower_anon_const(expr)),\n             TyKind::TraitObject(ref bounds, kind) => {\n                 let mut lifetime_bound = None;\n@@ -1269,7 +1280,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                                 GenericBound::Trait(\n                                     ref ty,\n                                     TraitBoundModifier::None | TraitBoundModifier::MaybeConst,\n-                                ) => Some(this.lower_poly_trait_ref(ty, itctx)),\n+                                ) => Some(this.lower_poly_trait_ref(ty, itctx, captures)),\n                                 // `~const ?Bound` will cause an error during AST validation\n                                 // anyways, so treat it like `?Bound` as compilation proceeds.\n                                 GenericBound::Trait(\n@@ -1278,7 +1289,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                                 ) => None,\n                                 GenericBound::Outlives(ref lifetime) => {\n                                     if lifetime_bound.is_none() {\n-                                        lifetime_bound = Some(this.lower_lifetime(lifetime));\n+                                        lifetime_bound = Some(this.lower_lifetime(lifetime, true));\n                                     }\n                                     None\n                                 }\n@@ -1295,15 +1306,15 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                 match itctx {\n                     ImplTraitContext::ReturnPositionOpaqueTy { origin } => self\n                         .lower_opaque_impl_trait(span, origin, def_node_id, |this| {\n-                            this.lower_param_bounds(bounds, itctx)\n+                            this.lower_param_bounds(bounds, itctx, true)\n                         }),\n                     ImplTraitContext::TypeAliasesOpaqueTy => {\n                         let nested_itctx = ImplTraitContext::TypeAliasesOpaqueTy;\n                         self.lower_opaque_impl_trait(\n                             span,\n                             hir::OpaqueTyOrigin::TyAlias,\n                             def_node_id,\n-                            |this| this.lower_param_bounds(bounds, nested_itctx),\n+                            |this| this.lower_param_bounds(bounds, nested_itctx, true),\n                         )\n                     }\n                     ImplTraitContext::Universal => {\n@@ -1417,7 +1428,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n             |(_, (span, _, p_name, res))| {\n                 let id = self.next_node_id();\n                 let ident = Ident::new(p_name.ident().name, span);\n-                let l = self.new_named_lifetime_with_res(id, span, ident, res);\n+                let l = self.new_named_lifetime_with_res(id, span, ident, res, true);\n                 hir::GenericArg::Lifetime(l)\n             },\n         ));\n@@ -1495,7 +1506,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         }\n         let inputs = self.arena.alloc_from_iter(inputs.iter().map(|param| {\n             if fn_node_id.is_some() {\n-                self.lower_ty_direct(&param.ty, ImplTraitContext::Universal)\n+                self.lower_ty_direct(&param.ty, ImplTraitContext::Universal, true)\n             } else {\n                 self.lower_ty_direct(\n                     &param.ty,\n@@ -1509,6 +1520,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                         FnDeclKind::Trait => ImplTraitPosition::TraitParam,\n                         FnDeclKind::Impl => ImplTraitPosition::ImplParam,\n                     }),\n+                    true,\n                 )\n             }\n         }));\n@@ -1540,7 +1552,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                             FnDeclKind::Impl => ImplTraitPosition::ImplReturn,\n                         }),\n                     };\n-                    hir::FnRetTy::Return(self.lower_ty(ty, context))\n+                    hir::FnRetTy::Return(self.lower_ty(ty, context, true))\n                 }\n                 FnRetTy::Default(span) => hir::FnRetTy::DefaultReturn(self.lower_span(span)),\n             }\n@@ -1746,7 +1758,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n             self.arena.alloc_from_iter(captures.into_iter().map(|(_, (span, _, p_name, res))| {\n                 let id = self.next_node_id();\n                 let ident = Ident::new(p_name.ident().name, span);\n-                let l = self.new_named_lifetime_with_res(id, span, ident, res);\n+                let l = self.new_named_lifetime_with_res(id, span, ident, res, true);\n                 hir::GenericArg::Lifetime(l)\n             }));\n \n@@ -1776,7 +1788,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                 let context = ImplTraitContext::ReturnPositionOpaqueTy {\n                     origin: hir::OpaqueTyOrigin::FnReturn(fn_def_id),\n                 };\n-                self.lower_ty(ty, context)\n+                self.lower_ty(ty, context, true)\n             }\n             FnRetTy::Default(ret_ty_span) => self.arena.alloc(self.ty_tup(*ret_ty_span, &[])),\n         };\n@@ -1803,23 +1815,24 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         &mut self,\n         tpb: &GenericBound,\n         itctx: ImplTraitContext,\n+        captures: bool,\n     ) -> hir::GenericBound<'hir> {\n         match tpb {\n             GenericBound::Trait(p, modifier) => hir::GenericBound::Trait(\n-                self.lower_poly_trait_ref(p, itctx),\n+                self.lower_poly_trait_ref(p, itctx, captures),\n                 self.lower_trait_bound_modifier(*modifier),\n             ),\n             GenericBound::Outlives(lifetime) => {\n-                hir::GenericBound::Outlives(self.lower_lifetime(lifetime))\n+                hir::GenericBound::Outlives(self.lower_lifetime(lifetime, captures))\n             }\n         }\n     }\n \n-    fn lower_lifetime(&mut self, l: &Lifetime) -> hir::Lifetime {\n+    fn lower_lifetime(&mut self, l: &Lifetime, captures: bool) -> hir::Lifetime {\n         let span = self.lower_span(l.ident.span);\n         let ident = self.lower_ident(l.ident);\n         let res = self.resolver.get_lifetime_res(l.id).unwrap_or(LifetimeRes::Error);\n-        self.new_named_lifetime_with_res(l.id, span, ident, res)\n+        self.new_named_lifetime_with_res(l.id, span, ident, res, captures)\n     }\n \n     #[tracing::instrument(level = \"debug\", skip(self))]\n@@ -1829,55 +1842,60 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         span: Span,\n         ident: Ident,\n         res: LifetimeRes,\n+        captures: bool,\n     ) -> hir::Lifetime {\n         debug!(?self.captured_lifetimes);\n         let name = match res {\n             LifetimeRes::Param { mut param, binder } => {\n                 let p_name = ParamName::Plain(ident);\n-                if let Some(mut captured_lifetimes) = self.captured_lifetimes.take() {\n-                    if !captured_lifetimes.binders_to_ignore.contains(&binder) {\n-                        match captured_lifetimes.captures.entry(param) {\n-                            Entry::Occupied(o) => param = self.local_def_id(o.get().1),\n-                            Entry::Vacant(v) => {\n-                                let p_id = self.next_node_id();\n-                                let p_def_id = self.create_def(\n-                                    captured_lifetimes.parent_def_id,\n-                                    p_id,\n-                                    DefPathData::LifetimeNs(p_name.ident().name),\n-                                );\n-\n-                                v.insert((span, p_id, p_name, res));\n-                                param = p_def_id;\n+                if captures {\n+                    if let Some(mut captured_lifetimes) = self.captured_lifetimes.take() {\n+                        if !captured_lifetimes.binders_to_ignore.contains(&binder) {\n+                            match captured_lifetimes.captures.entry(param) {\n+                                Entry::Occupied(o) => param = self.local_def_id(o.get().1),\n+                                Entry::Vacant(v) => {\n+                                    let p_id = self.next_node_id();\n+                                    let p_def_id = self.create_def(\n+                                        captured_lifetimes.parent_def_id,\n+                                        p_id,\n+                                        DefPathData::LifetimeNs(p_name.ident().name),\n+                                    );\n+\n+                                    v.insert((span, p_id, p_name, res));\n+                                    param = p_def_id;\n+                                }\n                             }\n                         }\n-                    }\n \n-                    self.captured_lifetimes = Some(captured_lifetimes);\n+                        self.captured_lifetimes = Some(captured_lifetimes);\n+                    }\n                 }\n                 hir::LifetimeName::Param(param, p_name)\n             }\n             LifetimeRes::Fresh { param, binder } => {\n                 debug_assert_eq!(ident.name, kw::UnderscoreLifetime);\n                 let mut param = self.local_def_id(param);\n-                if let Some(mut captured_lifetimes) = self.captured_lifetimes.take() {\n-                    if !captured_lifetimes.binders_to_ignore.contains(&binder) {\n-                        match captured_lifetimes.captures.entry(param) {\n-                            Entry::Occupied(o) => param = self.local_def_id(o.get().1),\n-                            Entry::Vacant(v) => {\n-                                let p_id = self.next_node_id();\n-                                let p_def_id = self.create_def(\n-                                    captured_lifetimes.parent_def_id,\n-                                    p_id,\n-                                    DefPathData::LifetimeNs(kw::UnderscoreLifetime),\n-                                );\n-\n-                                v.insert((span, p_id, ParamName::Fresh, res));\n-                                param = p_def_id;\n+                if captures {\n+                    if let Some(mut captured_lifetimes) = self.captured_lifetimes.take() {\n+                        if !captured_lifetimes.binders_to_ignore.contains(&binder) {\n+                            match captured_lifetimes.captures.entry(param) {\n+                                Entry::Occupied(o) => param = self.local_def_id(o.get().1),\n+                                Entry::Vacant(v) => {\n+                                    let p_id = self.next_node_id();\n+                                    let p_def_id = self.create_def(\n+                                        captured_lifetimes.parent_def_id,\n+                                        p_id,\n+                                        DefPathData::LifetimeNs(kw::UnderscoreLifetime),\n+                                    );\n+\n+                                    v.insert((span, p_id, ParamName::Fresh, res));\n+                                    param = p_def_id;\n+                                }\n                             }\n                         }\n-                    }\n \n-                    self.captured_lifetimes = Some(captured_lifetimes);\n+                        self.captured_lifetimes = Some(captured_lifetimes);\n+                    }\n                 }\n                 hir::LifetimeName::Param(param, ParamName::Fresh)\n             }\n@@ -1941,15 +1959,20 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n             GenericParamKind::Type { ref default, .. } => {\n                 let kind = hir::GenericParamKind::Type {\n                     default: default.as_ref().map(|x| {\n-                        self.lower_ty(x, ImplTraitContext::Disallowed(ImplTraitPosition::Type))\n+                        self.lower_ty(\n+                            x,\n+                            ImplTraitContext::Disallowed(ImplTraitPosition::Type),\n+                            true,\n+                        )\n                     }),\n                     synthetic: false,\n                 };\n \n                 (hir::ParamName::Plain(self.lower_ident(param.ident)), kind)\n             }\n             GenericParamKind::Const { ref ty, kw_span: _, ref default } => {\n-                let ty = self.lower_ty(&ty, ImplTraitContext::Disallowed(ImplTraitPosition::Type));\n+                let ty =\n+                    self.lower_ty(&ty, ImplTraitContext::Disallowed(ImplTraitPosition::Type), true);\n                 let default = default.as_ref().map(|def| self.lower_anon_const(def));\n                 (\n                     hir::ParamName::Plain(self.lower_ident(param.ident)),\n@@ -1959,8 +1982,20 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         }\n     }\n \n-    fn lower_trait_ref(&mut self, p: &TraitRef, itctx: ImplTraitContext) -> hir::TraitRef<'hir> {\n-        let path = match self.lower_qpath(p.ref_id, &None, &p.path, ParamMode::Explicit, itctx) {\n+    fn lower_trait_ref(\n+        &mut self,\n+        p: &TraitRef,\n+        itctx: ImplTraitContext,\n+        captures: bool,\n+    ) -> hir::TraitRef<'hir> {\n+        let path = match self.lower_qpath(\n+            p.ref_id,\n+            &None,\n+            &p.path,\n+            ParamMode::Explicit,\n+            itctx,\n+            captures,\n+        ) {\n             hir::QPath::Resolved(None, path) => path,\n             qpath => panic!(\"lower_trait_ref: unexpected QPath `{:?}`\", qpath),\n         };\n@@ -1972,35 +2007,38 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         &mut self,\n         p: &PolyTraitRef,\n         itctx: ImplTraitContext,\n+        captures: bool,\n     ) -> hir::PolyTraitRef<'hir> {\n         self.with_lifetime_binder(\n             p.trait_ref.ref_id,\n             &p.bound_generic_params,\n             |this, bound_generic_params| {\n-                let trait_ref = this.lower_trait_ref(&p.trait_ref, itctx);\n+                let trait_ref = this.lower_trait_ref(&p.trait_ref, itctx, captures);\n                 hir::PolyTraitRef { bound_generic_params, trait_ref, span: this.lower_span(p.span) }\n             },\n         )\n     }\n \n     fn lower_mt(&mut self, mt: &MutTy, itctx: ImplTraitContext) -> hir::MutTy<'hir> {\n-        hir::MutTy { ty: self.lower_ty(&mt.ty, itctx), mutbl: mt.mutbl }\n+        hir::MutTy { ty: self.lower_ty(&mt.ty, itctx, true), mutbl: mt.mutbl }\n     }\n \n     fn lower_param_bounds(\n         &mut self,\n         bounds: &[GenericBound],\n         itctx: ImplTraitContext,\n+        captures: bool,\n     ) -> hir::GenericBounds<'hir> {\n-        self.arena.alloc_from_iter(self.lower_param_bounds_mut(bounds, itctx))\n+        self.arena.alloc_from_iter(self.lower_param_bounds_mut(bounds, itctx, captures))\n     }\n \n     fn lower_param_bounds_mut<'s>(\n         &'s mut self,\n         bounds: &'s [GenericBound],\n         itctx: ImplTraitContext,\n+        captures: bool,\n     ) -> impl Iterator<Item = hir::GenericBound<'hir>> + Captures<'s> + Captures<'a> {\n-        bounds.iter().map(move |bound| self.lower_param_bound(bound, itctx))\n+        bounds.iter().map(move |bound| self.lower_param_bound(bound, itctx, captures))\n     }\n \n     fn lower_generic_and_bounds("}, {"sha": "b995b1b649d397a555edf02f54019650e9aa0c10", "filename": "compiler/rustc_ast_lowering/src/pat.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0f11a0cd2482f6c8cf2e4eb00242214172835c36/compiler%2Frustc_ast_lowering%2Fsrc%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f11a0cd2482f6c8cf2e4eb00242214172835c36/compiler%2Frustc_ast_lowering%2Fsrc%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fpat.rs?ref=0f11a0cd2482f6c8cf2e4eb00242214172835c36", "patch": "@@ -36,6 +36,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                             path,\n                             ParamMode::Optional,\n                             ImplTraitContext::Disallowed(ImplTraitPosition::Path),\n+                            true,\n                         );\n                         let (pats, ddpos) = self.lower_pat_tuple(pats, \"tuple struct\");\n                         break hir::PatKind::TupleStruct(qpath, pats, ddpos);\n@@ -52,6 +53,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                             path,\n                             ParamMode::Optional,\n                             ImplTraitContext::Disallowed(ImplTraitPosition::Path),\n+                            true,\n                         );\n                         break hir::PatKind::Path(qpath);\n                     }\n@@ -62,6 +64,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                             path,\n                             ParamMode::Optional,\n                             ImplTraitContext::Disallowed(ImplTraitPosition::Path),\n+                            true,\n                         );\n \n                         let fs = self.arena.alloc_from_iter(fields.iter().map(|f| hir::PatField {"}, {"sha": "02e5816593cbdd45a70fd621da2aa1672b91eb70", "filename": "compiler/rustc_ast_lowering/src/path.rs", "status": "modified", "additions": 25, "deletions": 9, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/0f11a0cd2482f6c8cf2e4eb00242214172835c36/compiler%2Frustc_ast_lowering%2Fsrc%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f11a0cd2482f6c8cf2e4eb00242214172835c36/compiler%2Frustc_ast_lowering%2Fsrc%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fpath.rs?ref=0f11a0cd2482f6c8cf2e4eb00242214172835c36", "patch": "@@ -24,9 +24,10 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         p: &Path,\n         param_mode: ParamMode,\n         itctx: ImplTraitContext,\n+        captures: bool,\n     ) -> hir::QPath<'hir> {\n         let qself_position = qself.as_ref().map(|q| q.position);\n-        let qself = qself.as_ref().map(|q| self.lower_ty(&q.ty, itctx));\n+        let qself = qself.as_ref().map(|q| self.lower_ty(&q.ty, itctx, captures));\n \n         let partial_res =\n             self.resolver.get_partial_res(id).unwrap_or_else(|| PartialRes::new(Res::Err));\n@@ -72,6 +73,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                         param_mode,\n                         parenthesized_generic_args,\n                         itctx,\n+                        captures,\n                     )\n                 },\n             )),\n@@ -118,6 +120,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                 param_mode,\n                 ParenthesizedGenericArgs::Err,\n                 itctx,\n+                captures,\n             ));\n             let qpath = hir::QPath::TypeRelative(ty, hir_segment);\n \n@@ -158,6 +161,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                     param_mode,\n                     ParenthesizedGenericArgs::Err,\n                     ImplTraitContext::Disallowed(ImplTraitPosition::Path),\n+                    true,\n                 )\n             })),\n             span: self.lower_span(p.span),\n@@ -182,6 +186,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         param_mode: ParamMode,\n         parenthesized_generic_args: ParenthesizedGenericArgs,\n         itctx: ImplTraitContext,\n+        captures: bool,\n     ) -> hir::PathSegment<'hir> {\n         debug!(\"path_span: {:?}, lower_path_segment(segment: {:?})\", path_span, segment,);\n         let (mut generic_args, infer_args) = if let Some(ref generic_args) = segment.args {\n@@ -254,6 +259,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                 segment.id,\n                 segment.ident.span,\n                 &mut generic_args,\n+                captures,\n             );\n         }\n \n@@ -283,6 +289,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         segment_id: NodeId,\n         segment_ident_span: Span,\n         generic_args: &mut GenericArgsCtor<'hir>,\n+        captures: bool,\n     ) {\n         let (start, end) = match self.resolver.get_lifetime_res(segment_id) {\n             Some(LifetimeRes::ElidedAnchor { start, end }) => (start, end),\n@@ -311,10 +318,13 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n             0,\n             (start.as_u32()..end.as_u32()).map(|i| {\n                 let id = NodeId::from_u32(i);\n-                let l = self.lower_lifetime(&Lifetime {\n-                    id,\n-                    ident: Ident::new(kw::UnderscoreLifetime, elided_lifetime_span),\n-                });\n+                let l = self.lower_lifetime(\n+                    &Lifetime {\n+                        id,\n+                        ident: Ident::new(kw::UnderscoreLifetime, elided_lifetime_span),\n+                    },\n+                    captures,\n+                );\n                 GenericArg::Lifetime(l)\n             }),\n         );\n@@ -358,12 +368,18 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         // we generally don't permit such things (see #51008).\n         let ParenthesizedArgs { span, inputs, inputs_span, output } = data;\n         let inputs = self.arena.alloc_from_iter(inputs.iter().map(|ty| {\n-            self.lower_ty_direct(ty, ImplTraitContext::Disallowed(ImplTraitPosition::FnTraitParam))\n+            self.lower_ty_direct(\n+                ty,\n+                ImplTraitContext::Disallowed(ImplTraitPosition::FnTraitParam),\n+                true,\n+            )\n         }));\n         let output_ty = match output {\n-            FnRetTy::Ty(ty) => {\n-                self.lower_ty(&ty, ImplTraitContext::Disallowed(ImplTraitPosition::FnTraitReturn))\n-            }\n+            FnRetTy::Ty(ty) => self.lower_ty(\n+                &ty,\n+                ImplTraitContext::Disallowed(ImplTraitPosition::FnTraitReturn),\n+                true,\n+            ),\n             FnRetTy::Default(_) => self.arena.alloc(self.ty_tup(*span, &[])),\n         };\n         let args = smallvec![GenericArg::Type(self.ty_tup(*inputs_span, inputs))];"}]}