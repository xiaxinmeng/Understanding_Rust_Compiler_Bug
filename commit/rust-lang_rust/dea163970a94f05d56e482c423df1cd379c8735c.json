{"sha": "dea163970a94f05d56e482c423df1cd379c8735c", "node_id": "C_kwDOAAsO6NoAKGRlYTE2Mzk3MGE5NGYwNWQ1NmU0ODJjNDIzZGYxY2QzNzljODczNWM", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-08-22T07:20:56Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-08-22T07:20:56Z"}, "message": "Auto merge of #12965 - DesmondWillowbrook:assoc-method-dimming, r=Veykril\n\nfeat: make trait assoc items become inactive due to cfg\n\nfixes #12394", "tree": {"sha": "b8d2db03565072077af4dfc9fcc3ccb7e2f5cd7b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b8d2db03565072077af4dfc9fcc3ccb7e2f5cd7b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dea163970a94f05d56e482c423df1cd379c8735c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dea163970a94f05d56e482c423df1cd379c8735c", "html_url": "https://github.com/rust-lang/rust/commit/dea163970a94f05d56e482c423df1cd379c8735c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dea163970a94f05d56e482c423df1cd379c8735c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f27f4a9b558b3a37b41b44a607fcc531b639e304", "url": "https://api.github.com/repos/rust-lang/rust/commits/f27f4a9b558b3a37b41b44a607fcc531b639e304", "html_url": "https://github.com/rust-lang/rust/commit/f27f4a9b558b3a37b41b44a607fcc531b639e304"}, {"sha": "23c00ed50d327918b0f9fb59345ed87cfe7584a9", "url": "https://api.github.com/repos/rust-lang/rust/commits/23c00ed50d327918b0f9fb59345ed87cfe7584a9", "html_url": "https://github.com/rust-lang/rust/commit/23c00ed50d327918b0f9fb59345ed87cfe7584a9"}], "stats": {"total": 97, "additions": 75, "deletions": 22}, "files": [{"sha": "631ae3cf11fa7e0fc9ddc2d57843ac383d1d6e65", "filename": "crates/hir-def/src/data.rs", "status": "modified", "additions": 53, "deletions": 17, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/dea163970a94f05d56e482c423df1cd379c8735c/crates%2Fhir-def%2Fsrc%2Fdata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dea163970a94f05d56e482c423df1cd379c8735c/crates%2Fhir-def%2Fsrc%2Fdata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fdata.rs?ref=dea163970a94f05d56e482c423df1cd379c8735c", "patch": "@@ -2,7 +2,7 @@\n \n use std::sync::Arc;\n \n-use hir_expand::{name::Name, AstId, ExpandResult, HirFileId, MacroCallId, MacroDefKind};\n+use hir_expand::{name::Name, AstId, ExpandResult, HirFileId, InFile, MacroCallId, MacroDefKind};\n use smallvec::SmallVec;\n use syntax::ast;\n \n@@ -12,7 +12,10 @@ use crate::{\n     db::DefDatabase,\n     intern::Interned,\n     item_tree::{self, AssocItem, FnFlags, ItemTree, ItemTreeId, ModItem, Param, TreeId},\n-    nameres::{attr_resolution::ResolvedAttr, proc_macro::ProcMacroKind, DefMap},\n+    nameres::{\n+        attr_resolution::ResolvedAttr, diagnostics::DefDiagnostic, proc_macro::ProcMacroKind,\n+        DefMap,\n+    },\n     type_ref::{TraitRef, TypeBound, TypeRef},\n     visibility::RawVisibility,\n     AssocItemId, AstIdWithPath, ConstId, ConstLoc, FunctionId, FunctionLoc, HasModule, ImplId,\n@@ -210,6 +213,13 @@ pub struct TraitData {\n \n impl TraitData {\n     pub(crate) fn trait_data_query(db: &dyn DefDatabase, tr: TraitId) -> Arc<TraitData> {\n+        db.trait_data_with_diagnostics(tr).0\n+    }\n+\n+    pub(crate) fn trait_data_with_diagnostics_query(\n+        db: &dyn DefDatabase,\n+        tr: TraitId,\n+    ) -> (Arc<TraitData>, Arc<Vec<DefDiagnostic>>) {\n         let tr_loc @ ItemLoc { container: module_id, id: tree_id } = tr.lookup(db);\n         let item_tree = tree_id.item_tree(db);\n         let tr_def = &item_tree[tree_id.value];\n@@ -229,17 +239,20 @@ impl TraitData {\n         let mut collector =\n             AssocItemCollector::new(db, module_id, tree_id.file_id(), ItemContainerId::TraitId(tr));\n         collector.collect(&item_tree, tree_id.tree_id(), &tr_def.items);\n-        let (items, attribute_calls) = collector.finish();\n-\n-        Arc::new(TraitData {\n-            name,\n-            attribute_calls,\n-            items,\n-            is_auto,\n-            is_unsafe,\n-            visibility,\n-            skip_array_during_method_dispatch,\n-        })\n+        let (items, attribute_calls, diagnostics) = collector.finish();\n+\n+        (\n+            Arc::new(TraitData {\n+                name,\n+                attribute_calls,\n+                items,\n+                is_auto,\n+                is_unsafe,\n+                visibility,\n+                skip_array_during_method_dispatch,\n+            }),\n+            Arc::new(diagnostics),\n+        )\n     }\n \n     pub fn associated_types(&self) -> impl Iterator<Item = TypeAliasId> + '_ {\n@@ -280,7 +293,14 @@ pub struct ImplData {\n \n impl ImplData {\n     pub(crate) fn impl_data_query(db: &dyn DefDatabase, id: ImplId) -> Arc<ImplData> {\n-        let _p = profile::span(\"impl_data_query\");\n+        db.impl_data_with_diagnostics(id).0\n+    }\n+\n+    pub(crate) fn impl_data_with_diagnostics_query(\n+        db: &dyn DefDatabase,\n+        id: ImplId,\n+    ) -> (Arc<ImplData>, Arc<Vec<DefDiagnostic>>) {\n+        let _p = profile::span(\"impl_data_with_diagnostics_query\");\n         let ItemLoc { container: module_id, id: tree_id } = id.lookup(db);\n \n         let item_tree = tree_id.item_tree(db);\n@@ -293,10 +313,13 @@ impl ImplData {\n             AssocItemCollector::new(db, module_id, tree_id.file_id(), ItemContainerId::ImplId(id));\n         collector.collect(&item_tree, tree_id.tree_id(), &impl_def.items);\n \n-        let (items, attribute_calls) = collector.finish();\n+        let (items, attribute_calls, diagnostics) = collector.finish();\n         let items = items.into_iter().map(|(_, item)| item).collect();\n \n-        Arc::new(ImplData { target_trait, self_ty, items, is_negative, attribute_calls })\n+        (\n+            Arc::new(ImplData { target_trait, self_ty, items, is_negative, attribute_calls }),\n+            Arc::new(diagnostics),\n+        )\n     }\n \n     pub fn attribute_calls(&self) -> impl Iterator<Item = (AstId<ast::Item>, MacroCallId)> + '_ {\n@@ -437,6 +460,7 @@ struct AssocItemCollector<'a> {\n     db: &'a dyn DefDatabase,\n     module_id: ModuleId,\n     def_map: Arc<DefMap>,\n+    inactive_diagnostics: Vec<DefDiagnostic>,\n     container: ItemContainerId,\n     expander: Expander,\n \n@@ -459,15 +483,21 @@ impl<'a> AssocItemCollector<'a> {\n             expander: Expander::new(db, file_id, module_id),\n             items: Vec::new(),\n             attr_calls: Vec::new(),\n+            inactive_diagnostics: Vec::new(),\n         }\n     }\n \n     fn finish(\n         self,\n-    ) -> (Vec<(Name, AssocItemId)>, Option<Box<Vec<(AstId<ast::Item>, MacroCallId)>>>) {\n+    ) -> (\n+        Vec<(Name, AssocItemId)>,\n+        Option<Box<Vec<(AstId<ast::Item>, MacroCallId)>>>,\n+        Vec<DefDiagnostic>,\n+    ) {\n         (\n             self.items,\n             if self.attr_calls.is_empty() { None } else { Some(Box::new(self.attr_calls)) },\n+            self.inactive_diagnostics,\n         )\n     }\n \n@@ -479,6 +509,12 @@ impl<'a> AssocItemCollector<'a> {\n         'items: for &item in assoc_items {\n             let attrs = item_tree.attrs(self.db, self.module_id.krate, ModItem::from(item).into());\n             if !attrs.is_cfg_enabled(self.expander.cfg_options()) {\n+                self.inactive_diagnostics.push(DefDiagnostic::unconfigured_code(\n+                    self.module_id.local_id,\n+                    InFile::new(self.expander.current_file_id(), item.ast_id(&item_tree).upcast()),\n+                    attrs.cfg().unwrap(),\n+                    self.expander.cfg_options().clone(),\n+                ));\n                 continue;\n             }\n "}, {"sha": "40b2f734b7117192afa1fb51b52de20be9a250c8", "filename": "crates/hir-def/src/db.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/dea163970a94f05d56e482c423df1cd379c8735c/crates%2Fhir-def%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dea163970a94f05d56e482c423df1cd379c8735c/crates%2Fhir-def%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fdb.rs?ref=dea163970a94f05d56e482c423df1cd379c8735c", "patch": "@@ -20,7 +20,7 @@ use crate::{\n     intern::Interned,\n     item_tree::{AttrOwner, ItemTree},\n     lang_item::{LangItemTarget, LangItems},\n-    nameres::DefMap,\n+    nameres::{diagnostics::DefDiagnostic, DefMap},\n     visibility::{self, Visibility},\n     AttrDefId, BlockId, BlockLoc, ConstId, ConstLoc, DefWithBodyId, EnumId, EnumLoc, ExternBlockId,\n     ExternBlockLoc, FunctionId, FunctionLoc, GenericDefId, ImplId, ImplLoc, LocalEnumVariantId,\n@@ -106,9 +106,16 @@ pub trait DefDatabase: InternDatabase + AstDatabase + Upcast<dyn AstDatabase> {\n     #[salsa::invoke(ImplData::impl_data_query)]\n     fn impl_data(&self, e: ImplId) -> Arc<ImplData>;\n \n+    #[salsa::invoke(ImplData::impl_data_with_diagnostics_query)]\n+    fn impl_data_with_diagnostics(&self, e: ImplId) -> (Arc<ImplData>, Arc<Vec<DefDiagnostic>>);\n+\n     #[salsa::invoke(TraitData::trait_data_query)]\n     fn trait_data(&self, e: TraitId) -> Arc<TraitData>;\n \n+    #[salsa::invoke(TraitData::trait_data_with_diagnostics_query)]\n+    fn trait_data_with_diagnostics(&self, tr: TraitId)\n+        -> (Arc<TraitData>, Arc<Vec<DefDiagnostic>>);\n+\n     #[salsa::invoke(TypeAliasData::type_alias_data_query)]\n     fn type_alias_data(&self, e: TypeAliasId) -> Arc<TypeAliasData>;\n "}, {"sha": "ed7e920fd2b83a00ac28b69fca443dc6723a83d1", "filename": "crates/hir-def/src/nameres/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dea163970a94f05d56e482c423df1cd379c8735c/crates%2Fhir-def%2Fsrc%2Fnameres%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dea163970a94f05d56e482c423df1cd379c8735c/crates%2Fhir-def%2Fsrc%2Fnameres%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fnameres%2Fdiagnostics.rs?ref=dea163970a94f05d56e482c423df1cd379c8735c", "patch": "@@ -73,7 +73,7 @@ impl DefDiagnostic {\n         Self { in_module: container, kind: DefDiagnosticKind::UnresolvedImport { id, index } }\n     }\n \n-    pub(super) fn unconfigured_code(\n+    pub fn unconfigured_code(\n         container: LocalModuleId,\n         ast: AstId<ast::Item>,\n         cfg: CfgExpr,"}, {"sha": "6dccf2ed20b8e8e6dc00534678e42e7a558de526", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/dea163970a94f05d56e482c423df1cd379c8735c/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dea163970a94f05d56e482c423df1cd379c8735c/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=dea163970a94f05d56e482c423df1cd379c8735c", "patch": "@@ -511,6 +511,7 @@ impl Module {\n             .collect()\n     }\n \n+    /// Fills `acc` with the module's diagnostics.\n     pub fn diagnostics(self, db: &dyn HirDatabase, acc: &mut Vec<AnyDiagnostic>) {\n         let _p = profile::span(\"Module::diagnostics\").detail(|| {\n             format!(\"{:?}\", self.name(db).map_or(\"<unknown>\".into(), |name| name.to_string()))\n@@ -531,11 +532,21 @@ impl Module {\n                         m.diagnostics(db, acc)\n                     }\n                 }\n+                ModuleDef::Trait(t) => {\n+                    for diag in db.trait_data_with_diagnostics(t.id).1.iter() {\n+                        emit_def_diagnostic(db, acc, diag);\n+                    }\n+                    acc.extend(decl.diagnostics(db))\n+                }\n                 _ => acc.extend(decl.diagnostics(db)),\n             }\n         }\n \n         for impl_def in self.impl_defs(db) {\n+            for diag in db.impl_data_with_diagnostics(impl_def.id).1.iter() {\n+                emit_def_diagnostic(db, acc, diag);\n+            }\n+\n             for item in impl_def.items(db) {\n                 let def: DefWithBody = match item {\n                     AssocItem::Function(it) => it.into(),"}, {"sha": "04918891b254ca4a45f7cd12ef8187fc60d9c2c2", "filename": "crates/ide-diagnostics/src/handlers/inactive_code.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/dea163970a94f05d56e482c423df1cd379c8735c/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Finactive_code.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dea163970a94f05d56e482c423df1cd379c8735c/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Finactive_code.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Finactive_code.rs?ref=dea163970a94f05d56e482c423df1cd379c8735c", "patch": "@@ -106,18 +106,17 @@ fn f() {\n \n     #[test]\n     fn inactive_assoc_item() {\n-        // FIXME these currently don't work, hence the *\n         check(\n             r#\"\n struct Foo;\n impl Foo {\n     #[cfg(any())] pub fn f() {}\n-  //*************************** weak: code is inactive due to #[cfg] directives\n+  //^^^^^^^^^^^^^^^^^^^^^^^^^^^ weak: code is inactive due to #[cfg] directives\n }\n \n trait Bar {\n     #[cfg(any())] pub fn f() {}\n-  //*************************** weak: code is inactive due to #[cfg] directives\n+  //^^^^^^^^^^^^^^^^^^^^^^^^^^^ weak: code is inactive due to #[cfg] directives\n }\n \"#,\n         );"}]}