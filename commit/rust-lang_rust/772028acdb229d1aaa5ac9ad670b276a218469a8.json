{"sha": "772028acdb229d1aaa5ac9ad670b276a218469a8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc3MjAyOGFjZGIyMjlkMWFhYTVhYzlhZDY3MGIyNzZhMjE4NDY5YTg=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-03-12T22:41:11Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-03-12T22:41:11Z"}, "message": "doc: Add some info about native mods and crust functions", "tree": {"sha": "e277d9750a1f00f8435b2cb3d8fc33b77816c129", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e277d9750a1f00f8435b2cb3d8fc33b77816c129"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/772028acdb229d1aaa5ac9ad670b276a218469a8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/772028acdb229d1aaa5ac9ad670b276a218469a8", "html_url": "https://github.com/rust-lang/rust/commit/772028acdb229d1aaa5ac9ad670b276a218469a8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/772028acdb229d1aaa5ac9ad670b276a218469a8/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "db77c38fc9048e5467ab85d1855110f894d380f4", "url": "https://api.github.com/repos/rust-lang/rust/commits/db77c38fc9048e5467ab85d1855110f894d380f4", "html_url": "https://github.com/rust-lang/rust/commit/db77c38fc9048e5467ab85d1855110f894d380f4"}], "stats": {"total": 80, "additions": 79, "deletions": 1}, "files": [{"sha": "0572287c69232646980a1bb4281a6845e2e39d20", "filename": "doc/rust.md", "status": "modified", "additions": 79, "deletions": 1, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/772028acdb229d1aaa5ac9ad670b276a218469a8/doc%2Frust.md", "raw_url": "https://github.com/rust-lang/rust/raw/772028acdb229d1aaa5ac9ad670b276a218469a8/doc%2Frust.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Frust.md?ref=772028acdb229d1aaa5ac9ad670b276a218469a8", "patch": "@@ -563,7 +563,7 @@ of [attributes](#attributes) attached to it.\n \n ~~~~~~~~ {.ebnf .gram}\n item : mod_item | fn_item | type_item | enum_item\n-     | res_item | iface_item | impl_item ;\n+     | res_item | iface_item | impl_item | native_mod_item ;\n ~~~~~~~~\n \n An _item_ is a component of a crate; some module items can be defined in crate\n@@ -1015,6 +1015,29 @@ Similarly, [interface](#interfaces) bounds can be specified for type\n parameters to allow methods of that interface to be called on values\n of that type.\n \n+#### Crust functions\n+\n+Crust functions are part of Rust's foreign function interface,\n+providing the opposite functionality to [native modules](#native-modules).\n+Whereas native modules allow Rust code to call foreign\n+code, crust functions allow foreign code to call Rust code. They are\n+defined the same as any other Rust function, except that they are\n+prepended with the `crust` keyword.\n+\n+~~~\n+crust fn new_vec() -> [int] { [] }\n+~~~\n+\n+Crust functions may not be called from Rust code, but their value\n+may be taken as an unsafe `u8` pointer.\n+\n+~~~\n+let fptr: *u8 = new_vec;\n+~~~\n+\n+The primary motivation of crust functions is to create callbacks\n+for native functions that expect to receive function pointers.\n+\n ### Type definitions\n \n A _type definition_ defines a new name for an existing [type](#types). Type\n@@ -1222,6 +1245,61 @@ impl of seq<bool> for u32 {\n }\n ~~~~\n \n+### Native modules\n+\n+~~~ {.ebnf .gram}\n+native_mod_item : \"native mod\" ident '{' native_mod '} ;\n+native_mod : [ native_fn ] * ;\n+~~~\n+\n+Native modules form the basis for Rust's foreign function interface. A native\n+module describes functions in external, non-Rust libraries. Functions within\n+native modules are declared the same as other Rust functions, with the exception\n+that they may not have a body and are instead terminated by a semi-colon.\n+\n+~~~\n+native mod c {\n+    fn fopen(filename: *c_char, mod: *c_char) -> *FILE;\n+}\n+~~~\n+\n+Functions within native modules may be called by Rust code as it would any\n+normal function and the Rust compiler will automatically translate between\n+the Rust ABI and the native ABI.\n+\n+The name of the native module has special meaning to the Rust compiler in\n+that it will treat the module name as the name of a library to link to,\n+performing the linking as appropriate for the target platform. The name\n+given for the native module will be transformed in a platform-specific\n+way to determine the name of the library. For example, on Linux the name\n+of the native module is prefixed with 'lib' and suffixed with '.so', so\n+the native mod 'rustrt' would be linked to a library named 'librustrt.so'.\n+\n+A number of [attributes](#attributes) control the behavior of native mods.\n+\n+By default native mods assume that the library they are calling use\n+the standard C \"cdecl\" ABI. Other ABI's may be specified using the `abi`\n+attribute as in\n+\n+~~~\n+// Interface to the Windows API\n+#[abi = \"stdcall\"]\n+native mod kernel32 { }\n+~~~\n+\n+The `link_name` attribute allows the default library naming behavior to\n+be overriden by explicitly specifying the name of the library.\n+\n+~~~\n+#[link_name = \"crypto\"]\n+native mod mycrypto { }\n+~~~\n+\n+The `nolink` attribute tells the Rust compiler not to perform any linking\n+for the native module. This is particularly useful for creating native\n+mods for libc, which tends to not follow standard library naming conventions\n+and is linked to all Rust programs anyway.\n+\n ## Attributes\n \n ~~~~~~~~{.ebnf .gram}"}]}