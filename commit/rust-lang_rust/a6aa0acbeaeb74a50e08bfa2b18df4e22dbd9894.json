{"sha": "a6aa0acbeaeb74a50e08bfa2b18df4e22dbd9894", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE2YWEwYWNiZWFlYjc0YTUwZTA4YmZhMmIxOGRmNGUyMmRiZDk4OTQ=", "commit": {"author": {"name": "Michael Wright", "email": "mikerite@lavabit.com", "date": "2020-12-13T04:32:41Z"}, "committer": {"name": "Michael Wright", "email": "mikerite@lavabit.com", "date": "2020-12-13T04:32:41Z"}, "message": "Fix dogfood errors", "tree": {"sha": "caf331a12ccfcc1db57e09b28b37180dbfcc454a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/caf331a12ccfcc1db57e09b28b37180dbfcc454a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a6aa0acbeaeb74a50e08bfa2b18df4e22dbd9894", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a6aa0acbeaeb74a50e08bfa2b18df4e22dbd9894", "html_url": "https://github.com/rust-lang/rust/commit/a6aa0acbeaeb74a50e08bfa2b18df4e22dbd9894", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a6aa0acbeaeb74a50e08bfa2b18df4e22dbd9894/comments", "author": null, "committer": null, "parents": [{"sha": "3af09b8cf1229fb05a549a13b144aca6b60784c7", "url": "https://api.github.com/repos/rust-lang/rust/commits/3af09b8cf1229fb05a549a13b144aca6b60784c7", "html_url": "https://github.com/rust-lang/rust/commit/3af09b8cf1229fb05a549a13b144aca6b60784c7"}], "stats": {"total": 23, "additions": 13, "deletions": 10}, "files": [{"sha": "b97d97ea1a5ef140eb6bfa2aa6d103c76fa3eb30", "filename": "clippy_lints/src/manual_ok_or.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a6aa0acbeaeb74a50e08bfa2b18df4e22dbd9894/clippy_lints%2Fsrc%2Fmanual_ok_or.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6aa0acbeaeb74a50e08bfa2b18df4e22dbd9894/clippy_lints%2Fsrc%2Fmanual_ok_or.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmanual_ok_or.rs?ref=a6aa0acbeaeb74a50e08bfa2b18df4e22dbd9894", "patch": "@@ -8,6 +8,7 @@ use rustc_lint::LintContext;\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::lint::in_external_macro;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n+use rustc_span::symbol::sym;\n \n declare_clippy_lint! {\n     /// **What it does:**\n@@ -51,7 +52,7 @@ impl LateLintPass<'_> for ManualOkOr {\n             if args.len() == 3;\n             let method_receiver = &args[0];\n             let ty = cx.typeck_results().expr_ty(method_receiver);\n-            if is_type_diagnostic_item(cx, ty, sym!(option_type));\n+            if is_type_diagnostic_item(cx, ty, sym::option_type);\n             let or_expr = &args[1];\n             if is_ok_wrapping(cx, &args[2]);\n             if let ExprKind::Call(Expr { kind: ExprKind::Path(err_path), .. }, &[ref err_arg]) = or_expr.kind;"}, {"sha": "c5eab2a97fe0346fc2ad2e4f50ce5bbd1b3c1108", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a6aa0acbeaeb74a50e08bfa2b18df4e22dbd9894/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6aa0acbeaeb74a50e08bfa2b18df4e22dbd9894/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=a6aa0acbeaeb74a50e08bfa2b18df4e22dbd9894", "patch": "@@ -1568,7 +1568,7 @@ impl<'tcx> LateLintPass<'tcx> for Methods {\n                 lint_expect_fun_call(cx, expr, *method_span, &method_call.ident.as_str(), args);\n \n                 let self_ty = cx.typeck_results().expr_ty_adjusted(&args[0]);\n-                if args.len() == 1 && method_call.ident.name == sym!(clone) {\n+                if args.len() == 1 && method_call.ident.name == sym::clone {\n                     lint_clone_on_copy(cx, expr, &args[0], self_ty);\n                     lint_clone_on_ref_ptr(cx, expr, &args[0]);\n                 }\n@@ -1592,7 +1592,7 @@ impl<'tcx> LateLintPass<'tcx> for Methods {\n                             }\n                         }\n                     },\n-                    ty::Ref(..) if method_call.ident.name == sym!(into_iter) => {\n+                    ty::Ref(..) if method_call.ident.name == sym::into_iter => {\n                         lint_into_iter(cx, expr, self_ty, *method_span);\n                     },\n                     _ => (),\n@@ -2638,9 +2638,9 @@ fn lint_unwrap(cx: &LateContext<'_>, expr: &hir::Expr<'_>, unwrap_args: &[hir::E\n fn lint_expect(cx: &LateContext<'_>, expr: &hir::Expr<'_>, expect_args: &[hir::Expr<'_>]) {\n     let obj_ty = cx.typeck_results().expr_ty(&expect_args[0]).peel_refs();\n \n-    let mess = if is_type_diagnostic_item(cx, obj_ty, sym!(option_type)) {\n+    let mess = if is_type_diagnostic_item(cx, obj_ty, sym::option_type) {\n         Some((EXPECT_USED, \"an Option\", \"None\"))\n-    } else if is_type_diagnostic_item(cx, obj_ty, sym!(result_type)) {\n+    } else if is_type_diagnostic_item(cx, obj_ty, sym::result_type) {\n         Some((EXPECT_USED, \"a Result\", \"Err\"))\n     } else {\n         None\n@@ -3133,7 +3133,7 @@ fn lint_search_is_some<'tcx>(\n     else if search_method == \"find\" {\n         let is_string_or_str_slice = |e| {\n             let self_ty = cx.typeck_results().expr_ty(e).peel_refs();\n-            if is_type_diagnostic_item(cx, self_ty, sym!(string_type)) {\n+            if is_type_diagnostic_item(cx, self_ty, sym::string_type) {\n                 true\n             } else {\n                 *self_ty.kind() == ty::Str"}, {"sha": "803ebada54b790cd2f172e3455cc6f3123e5347d", "filename": "clippy_lints/src/ref_option_ref.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a6aa0acbeaeb74a50e08bfa2b18df4e22dbd9894/clippy_lints%2Fsrc%2Fref_option_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6aa0acbeaeb74a50e08bfa2b18df4e22dbd9894/clippy_lints%2Fsrc%2Fref_option_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fref_option_ref.rs?ref=a6aa0acbeaeb74a50e08bfa2b18df4e22dbd9894", "patch": "@@ -2,6 +2,7 @@ use crate::utils::{last_path_segment, snippet, span_lint_and_sugg};\n use rustc_hir::{GenericArg, Mutability, Ty, TyKind};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n+use rustc_span::symbol::sym;\n \n use if_chain::if_chain;\n use rustc_errors::Applicability;\n@@ -41,7 +42,7 @@ impl<'tcx> LateLintPass<'tcx> for RefOptionRef {\n             if let Some(res) = last.res;\n             if let Some(def_id) = res.opt_def_id();\n \n-            if cx.tcx.is_diagnostic_item(sym!(option_type), def_id);\n+            if cx.tcx.is_diagnostic_item(sym::option_type, def_id);\n             if let Some(ref params) = last_path_segment(qpath).args ;\n             if !params.parenthesized;\n             if let Some(inner_ty) = params.args.iter().find_map(|arg| match arg {"}, {"sha": "31dd5965473d3e9c0affb5c1f2a627de8cda1ff8", "filename": "clippy_lints/src/strings.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a6aa0acbeaeb74a50e08bfa2b18df4e22dbd9894/clippy_lints%2Fsrc%2Fstrings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6aa0acbeaeb74a50e08bfa2b18df4e22dbd9894/clippy_lints%2Fsrc%2Fstrings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fstrings.rs?ref=a6aa0acbeaeb74a50e08bfa2b18df4e22dbd9894", "patch": "@@ -372,7 +372,7 @@ impl LateLintPass<'_> for StringToString {\n             if let ExprKind::MethodCall(path, _, args, _) = &expr.kind;\n             if path.ident.name == sym!(to_string);\n             let ty = cx.typeck_results().expr_ty(&args[0]);\n-            if is_type_diagnostic_item(cx, ty, sym!(string_type));\n+            if is_type_diagnostic_item(cx, ty, sym::string_type);\n             then {\n                 span_lint_and_help(\n                     cx,"}, {"sha": "5b9a80f92db69963ec0256e8c8e404549d9f1a87", "filename": "clippy_lints/src/unnecessary_wraps.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a6aa0acbeaeb74a50e08bfa2b18df4e22dbd9894/clippy_lints%2Fsrc%2Funnecessary_wraps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6aa0acbeaeb74a50e08bfa2b18df4e22dbd9894/clippy_lints%2Fsrc%2Funnecessary_wraps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funnecessary_wraps.rs?ref=a6aa0acbeaeb74a50e08bfa2b18df4e22dbd9894", "patch": "@@ -9,6 +9,7 @@ use rustc_hir::{Body, ExprKind, FnDecl, HirId, ItemKind, Node};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::ty::subst::GenericArgKind;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n+use rustc_span::symbol::sym;\n use rustc_span::Span;\n \n declare_clippy_lint! {\n@@ -82,9 +83,9 @@ impl<'tcx> LateLintPass<'tcx> for UnnecessaryWraps {\n             }\n         }\n \n-        let (return_type, path) = if is_type_diagnostic_item(cx, return_ty(cx, hir_id), sym!(option_type)) {\n+        let (return_type, path) = if is_type_diagnostic_item(cx, return_ty(cx, hir_id), sym::option_type) {\n             (\"Option\", &paths::OPTION_SOME)\n-        } else if is_type_diagnostic_item(cx, return_ty(cx, hir_id), sym!(result_type)) {\n+        } else if is_type_diagnostic_item(cx, return_ty(cx, hir_id), sym::result_type) {\n             (\"Result\", &paths::RESULT_OK)\n         } else {\n             return;"}]}