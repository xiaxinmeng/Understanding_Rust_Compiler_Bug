{"sha": "52cc6fde4b73a3013ce2185052f9492ae3728367", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUyY2M2ZmRlNGI3M2EzMDEzY2UyMTg1MDUyZjk0OTJhZTM3MjgzNjc=", "commit": {"author": {"name": "Sebastian Dr\u00f6ge", "email": "sebastian@centricular.com", "date": "2018-10-18T15:48:02Z"}, "committer": {"name": "Sebastian Dr\u00f6ge", "email": "sebastian@centricular.com", "date": "2018-10-18T15:51:56Z"}, "message": "Stabilize slice::rchunks(), rchunks_mut(), rchunks_exact(), rchunk_exact_mut()\n\nFixes #55177", "tree": {"sha": "6b50bb0a8a0fc590b6f61b48268730cf9efe047b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6b50bb0a8a0fc590b6f61b48268730cf9efe047b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/52cc6fde4b73a3013ce2185052f9492ae3728367", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/52cc6fde4b73a3013ce2185052f9492ae3728367", "html_url": "https://github.com/rust-lang/rust/commit/52cc6fde4b73a3013ce2185052f9492ae3728367", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/52cc6fde4b73a3013ce2185052f9492ae3728367/comments", "author": {"login": "sdroege", "id": 301846, "node_id": "MDQ6VXNlcjMwMTg0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/301846?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sdroege", "html_url": "https://github.com/sdroege", "followers_url": "https://api.github.com/users/sdroege/followers", "following_url": "https://api.github.com/users/sdroege/following{/other_user}", "gists_url": "https://api.github.com/users/sdroege/gists{/gist_id}", "starred_url": "https://api.github.com/users/sdroege/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sdroege/subscriptions", "organizations_url": "https://api.github.com/users/sdroege/orgs", "repos_url": "https://api.github.com/users/sdroege/repos", "events_url": "https://api.github.com/users/sdroege/events{/privacy}", "received_events_url": "https://api.github.com/users/sdroege/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sdroege", "id": 301846, "node_id": "MDQ6VXNlcjMwMTg0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/301846?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sdroege", "html_url": "https://github.com/sdroege", "followers_url": "https://api.github.com/users/sdroege/followers", "following_url": "https://api.github.com/users/sdroege/following{/other_user}", "gists_url": "https://api.github.com/users/sdroege/gists{/gist_id}", "starred_url": "https://api.github.com/users/sdroege/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sdroege/subscriptions", "organizations_url": "https://api.github.com/users/sdroege/orgs", "repos_url": "https://api.github.com/users/sdroege/repos", "events_url": "https://api.github.com/users/sdroege/events{/privacy}", "received_events_url": "https://api.github.com/users/sdroege/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b08ca2958e1b92c67c3ac0e76455f51742b95d23", "url": "https://api.github.com/repos/rust-lang/rust/commits/b08ca2958e1b92c67c3ac0e76455f51742b95d23", "html_url": "https://github.com/rust-lang/rust/commit/b08ca2958e1b92c67c3ac0e76455f51742b95d23"}], "stats": {"total": 77, "additions": 33, "deletions": 44}, "files": [{"sha": "84ca7c4fec9e5d4f154b4fe98a6aaea545887844", "filename": "src/liballoc/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/52cc6fde4b73a3013ce2185052f9492ae3728367/src%2Fliballoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52cc6fde4b73a3013ce2185052f9492ae3728367/src%2Fliballoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Flib.rs?ref=52cc6fde4b73a3013ce2185052f9492ae3728367", "patch": "@@ -119,7 +119,6 @@\n #![feature(const_vec_new)]\n #![feature(slice_partition_dedup)]\n #![feature(maybe_uninit)]\n-#![feature(rchunks)]\n \n // Allow testing this library\n "}, {"sha": "1eaff7410ea6b2e5fda3e6871b144bfd34704479", "filename": "src/liballoc/slice.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/52cc6fde4b73a3013ce2185052f9492ae3728367/src%2Fliballoc%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52cc6fde4b73a3013ce2185052f9492ae3728367/src%2Fliballoc%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fslice.rs?ref=52cc6fde4b73a3013ce2185052f9492ae3728367", "patch": "@@ -125,7 +125,7 @@ pub use core::slice::{from_ref, from_mut};\n pub use core::slice::SliceIndex;\n #[stable(feature = \"chunks_exact\", since = \"1.31.0\")]\n pub use core::slice::{ChunksExact, ChunksExactMut};\n-#[unstable(feature = \"rchunks\", issue = \"55177\")]\n+#[stable(feature = \"rchunks\", since = \"1.31.0\")]\n pub use core::slice::{RChunks, RChunksMut, RChunksExact, RChunksExactMut};\n \n ////////////////////////////////////////////////////////////////////////////////"}, {"sha": "6d1cfb10859d4bc4ee433c9247c66dbcbad1c088", "filename": "src/liballoc/tests/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/52cc6fde4b73a3013ce2185052f9492ae3728367/src%2Fliballoc%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52cc6fde4b73a3013ce2185052f9492ae3728367/src%2Fliballoc%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Flib.rs?ref=52cc6fde4b73a3013ce2185052f9492ae3728367", "patch": "@@ -19,7 +19,6 @@\n #![feature(str_escape)]\n #![feature(try_reserve)]\n #![feature(unboxed_closures)]\n-#![feature(rchunks)]\n #![feature(repeat_generic_slice)]\n \n extern crate alloc_system;"}, {"sha": "8a6b212020b4e4a0d74f661d675a604bafce40b1", "filename": "src/libcore/slice/mod.rs", "status": "modified", "additions": 32, "deletions": 40, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/52cc6fde4b73a3013ce2185052f9492ae3728367/src%2Flibcore%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52cc6fde4b73a3013ce2185052f9492ae3728367/src%2Flibcore%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice%2Fmod.rs?ref=52cc6fde4b73a3013ce2185052f9492ae3728367", "patch": "@@ -795,8 +795,6 @@ impl<T> [T] {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(rchunks)]\n-    ///\n     /// let slice = ['l', 'o', 'r', 'e', 'm'];\n     /// let mut iter = slice.rchunks(2);\n     /// assert_eq!(iter.next().unwrap(), &['e', 'm']);\n@@ -807,7 +805,7 @@ impl<T> [T] {\n     ///\n     /// [`rchunks_exact`]: #method.rchunks_exact\n     /// [`chunks`]: #method.chunks\n-    #[unstable(feature = \"rchunks\", issue = \"55177\")]\n+    #[stable(feature = \"rchunks\", since = \"1.31.0\")]\n     #[inline]\n     pub fn rchunks(&self, chunk_size: usize) -> RChunks<T> {\n         assert!(chunk_size != 0);\n@@ -831,8 +829,6 @@ impl<T> [T] {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(rchunks)]\n-    ///\n     /// let v = &mut [0, 0, 0, 0, 0];\n     /// let mut count = 1;\n     ///\n@@ -847,7 +843,7 @@ impl<T> [T] {\n     ///\n     /// [`rchunks_exact_mut`]: #method.rchunks_exact_mut\n     /// [`chunks_mut`]: #method.chunks_mut\n-    #[unstable(feature = \"rchunks\", issue = \"55177\")]\n+    #[stable(feature = \"rchunks\", since = \"1.31.0\")]\n     #[inline]\n     pub fn rchunks_mut(&mut self, chunk_size: usize) -> RChunksMut<T> {\n         assert!(chunk_size != 0);\n@@ -875,8 +871,6 @@ impl<T> [T] {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(rchunks)]\n-    ///\n     /// let slice = ['l', 'o', 'r', 'e', 'm'];\n     /// let mut iter = slice.rchunks_exact(2);\n     /// assert_eq!(iter.next().unwrap(), &['e', 'm']);\n@@ -887,7 +881,7 @@ impl<T> [T] {\n     ///\n     /// [`rchunks`]: #method.rchunks\n     /// [`chunks_exact`]: #method.chunks_exact\n-    #[unstable(feature = \"rchunks\", issue = \"55177\")]\n+    #[stable(feature = \"rchunks\", since = \"1.31.0\")]\n     #[inline]\n     pub fn rchunks_exact(&self, chunk_size: usize) -> RChunksExact<T> {\n         assert!(chunk_size != 0);\n@@ -917,8 +911,6 @@ impl<T> [T] {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(rchunks)]\n-    ///\n     /// let v = &mut [0, 0, 0, 0, 0];\n     /// let mut count = 1;\n     ///\n@@ -933,7 +925,7 @@ impl<T> [T] {\n     ///\n     /// [`rchunks_mut`]: #method.rchunks_mut\n     /// [`chunks_exact_mut`]: #method.chunks_exact_mut\n-    #[unstable(feature = \"rchunks\", issue = \"55177\")]\n+    #[stable(feature = \"rchunks\", since = \"1.31.0\")]\n     #[inline]\n     pub fn rchunks_exact_mut(&mut self, chunk_size: usize) -> RChunksExactMut<T> {\n         assert!(chunk_size != 0);\n@@ -4256,14 +4248,14 @@ unsafe impl<'a, T> TrustedRandomAccess for ChunksExactMut<'a, T> {\n /// [`rchunks`]: ../../std/primitive.slice.html#method.rchunks\n /// [slices]: ../../std/primitive.slice.html\n #[derive(Debug)]\n-#[unstable(feature = \"rchunks\", issue = \"55177\")]\n+#[stable(feature = \"rchunks\", since = \"1.31.0\")]\n pub struct RChunks<'a, T:'a> {\n     v: &'a [T],\n     chunk_size: usize\n }\n \n // FIXME(#26925) Remove in favor of `#[derive(Clone)]`\n-#[unstable(feature = \"rchunks\", issue = \"55177\")]\n+#[stable(feature = \"rchunks\", since = \"1.31.0\")]\n impl<'a, T> Clone for RChunks<'a, T> {\n     fn clone(&self) -> RChunks<'a, T> {\n         RChunks {\n@@ -4273,7 +4265,7 @@ impl<'a, T> Clone for RChunks<'a, T> {\n     }\n }\n \n-#[unstable(feature = \"rchunks\", issue = \"55177\")]\n+#[stable(feature = \"rchunks\", since = \"1.31.0\")]\n impl<'a, T> Iterator for RChunks<'a, T> {\n     type Item = &'a [T];\n \n@@ -4337,7 +4329,7 @@ impl<'a, T> Iterator for RChunks<'a, T> {\n     }\n }\n \n-#[unstable(feature = \"rchunks\", issue = \"55177\")]\n+#[stable(feature = \"rchunks\", since = \"1.31.0\")]\n impl<'a, T> DoubleEndedIterator for RChunks<'a, T> {\n     #[inline]\n     fn next_back(&mut self) -> Option<&'a [T]> {\n@@ -4353,17 +4345,17 @@ impl<'a, T> DoubleEndedIterator for RChunks<'a, T> {\n     }\n }\n \n-#[unstable(feature = \"rchunks\", issue = \"55177\")]\n+#[stable(feature = \"rchunks\", since = \"1.31.0\")]\n impl<'a, T> ExactSizeIterator for RChunks<'a, T> {}\n \n #[unstable(feature = \"trusted_len\", issue = \"37572\")]\n unsafe impl<'a, T> TrustedLen for RChunks<'a, T> {}\n \n-#[unstable(feature = \"rchunks\", issue = \"55177\")]\n+#[stable(feature = \"rchunks\", since = \"1.31.0\")]\n impl<'a, T> FusedIterator for RChunks<'a, T> {}\n \n #[doc(hidden)]\n-#[unstable(feature = \"rchunks\", issue = \"55177\")]\n+#[stable(feature = \"rchunks\", since = \"1.31.0\")]\n unsafe impl<'a, T> TrustedRandomAccess for RChunks<'a, T> {\n     unsafe fn get_unchecked(&mut self, i: usize) -> &'a [T] {\n         let end = self.v.len() - i * self.chunk_size;\n@@ -4387,13 +4379,13 @@ unsafe impl<'a, T> TrustedRandomAccess for RChunks<'a, T> {\n /// [`rchunks_mut`]: ../../std/primitive.slice.html#method.rchunks_mut\n /// [slices]: ../../std/primitive.slice.html\n #[derive(Debug)]\n-#[unstable(feature = \"rchunks\", issue = \"55177\")]\n+#[stable(feature = \"rchunks\", since = \"1.31.0\")]\n pub struct RChunksMut<'a, T:'a> {\n     v: &'a mut [T],\n     chunk_size: usize\n }\n \n-#[unstable(feature = \"rchunks\", issue = \"55177\")]\n+#[stable(feature = \"rchunks\", since = \"1.31.0\")]\n impl<'a, T> Iterator for RChunksMut<'a, T> {\n     type Item = &'a mut [T];\n \n@@ -4461,7 +4453,7 @@ impl<'a, T> Iterator for RChunksMut<'a, T> {\n     }\n }\n \n-#[unstable(feature = \"rchunks\", issue = \"55177\")]\n+#[stable(feature = \"rchunks\", since = \"1.31.0\")]\n impl<'a, T> DoubleEndedIterator for RChunksMut<'a, T> {\n     #[inline]\n     fn next_back(&mut self) -> Option<&'a mut [T]> {\n@@ -4478,17 +4470,17 @@ impl<'a, T> DoubleEndedIterator for RChunksMut<'a, T> {\n     }\n }\n \n-#[unstable(feature = \"rchunks\", issue = \"55177\")]\n+#[stable(feature = \"rchunks\", since = \"1.31.0\")]\n impl<'a, T> ExactSizeIterator for RChunksMut<'a, T> {}\n \n #[unstable(feature = \"trusted_len\", issue = \"37572\")]\n unsafe impl<'a, T> TrustedLen for RChunksMut<'a, T> {}\n \n-#[unstable(feature = \"rchunks\", issue = \"55177\")]\n+#[stable(feature = \"rchunks\", since = \"1.31.0\")]\n impl<'a, T> FusedIterator for RChunksMut<'a, T> {}\n \n #[doc(hidden)]\n-#[unstable(feature = \"rchunks\", issue = \"55177\")]\n+#[stable(feature = \"rchunks\", since = \"1.31.0\")]\n unsafe impl<'a, T> TrustedRandomAccess for RChunksMut<'a, T> {\n     unsafe fn get_unchecked(&mut self, i: usize) -> &'a mut [T] {\n         let end = self.v.len() - i * self.chunk_size;\n@@ -4514,25 +4506,25 @@ unsafe impl<'a, T> TrustedRandomAccess for RChunksMut<'a, T> {\n /// [`remainder`]: ../../std/slice/struct.ChunksExact.html#method.remainder\n /// [slices]: ../../std/primitive.slice.html\n #[derive(Debug)]\n-#[unstable(feature = \"rchunks\", issue = \"55177\")]\n+#[stable(feature = \"rchunks\", since = \"1.31.0\")]\n pub struct RChunksExact<'a, T:'a> {\n     v: &'a [T],\n     rem: &'a [T],\n     chunk_size: usize\n }\n \n-#[unstable(feature = \"rchunks\", issue = \"55177\")]\n impl<'a, T> RChunksExact<'a, T> {\n     /// Return the remainder of the original slice that is not going to be\n     /// returned by the iterator. The returned slice has at most `chunk_size-1`\n     /// elements.\n+    #[stable(feature = \"rchunks\", since = \"1.31.0\")]\n     pub fn remainder(&self) -> &'a [T] {\n         self.rem\n     }\n }\n \n // FIXME(#26925) Remove in favor of `#[derive(Clone)]`\n-#[unstable(feature = \"rchunks\", issue = \"55177\")]\n+#[stable(feature = \"rchunks\", since = \"1.31.0\")]\n impl<'a, T> Clone for RChunksExact<'a, T> {\n     fn clone(&self) -> RChunksExact<'a, T> {\n         RChunksExact {\n@@ -4543,7 +4535,7 @@ impl<'a, T> Clone for RChunksExact<'a, T> {\n     }\n }\n \n-#[unstable(feature = \"rchunks\", issue = \"55177\")]\n+#[stable(feature = \"rchunks\", since = \"1.31.0\")]\n impl<'a, T> Iterator for RChunksExact<'a, T> {\n     type Item = &'a [T];\n \n@@ -4588,7 +4580,7 @@ impl<'a, T> Iterator for RChunksExact<'a, T> {\n     }\n }\n \n-#[unstable(feature = \"rchunks\", issue = \"55177\")]\n+#[stable(feature = \"rchunks\", since = \"1.31.0\")]\n impl<'a, T> DoubleEndedIterator for RChunksExact<'a, T> {\n     #[inline]\n     fn next_back(&mut self) -> Option<&'a [T]> {\n@@ -4602,7 +4594,7 @@ impl<'a, T> DoubleEndedIterator for RChunksExact<'a, T> {\n     }\n }\n \n-#[unstable(feature = \"rchunks\", issue = \"55177\")]\n+#[stable(feature = \"rchunks\", since = \"1.31.0\")]\n impl<'a, T> ExactSizeIterator for RChunksExact<'a, T> {\n     fn is_empty(&self) -> bool {\n         self.v.is_empty()\n@@ -4612,11 +4604,11 @@ impl<'a, T> ExactSizeIterator for RChunksExact<'a, T> {\n #[unstable(feature = \"trusted_len\", issue = \"37572\")]\n unsafe impl<'a, T> TrustedLen for RChunksExact<'a, T> {}\n \n-#[unstable(feature = \"rchunks\", issue = \"55177\")]\n+#[stable(feature = \"rchunks\", since = \"1.31.0\")]\n impl<'a, T> FusedIterator for RChunksExact<'a, T> {}\n \n #[doc(hidden)]\n-#[unstable(feature = \"rchunks\", issue = \"55177\")]\n+#[stable(feature = \"rchunks\", since = \"1.31.0\")]\n unsafe impl<'a, T> TrustedRandomAccess for RChunksExact<'a, T> {\n     unsafe fn get_unchecked(&mut self, i: usize) -> &'a [T] {\n         let end = self.v.len() - i * self.chunk_size;\n@@ -4639,24 +4631,24 @@ unsafe impl<'a, T> TrustedRandomAccess for RChunksExact<'a, T> {\n /// [`into_remainder`]: ../../std/slice/struct.ChunksExactMut.html#method.into_remainder\n /// [slices]: ../../std/primitive.slice.html\n #[derive(Debug)]\n-#[unstable(feature = \"rchunks\", issue = \"55177\")]\n+#[stable(feature = \"rchunks\", since = \"1.31.0\")]\n pub struct RChunksExactMut<'a, T:'a> {\n     v: &'a mut [T],\n     rem: &'a mut [T],\n     chunk_size: usize\n }\n \n-#[unstable(feature = \"rchunks\", issue = \"55177\")]\n impl<'a, T> RChunksExactMut<'a, T> {\n     /// Return the remainder of the original slice that is not going to be\n     /// returned by the iterator. The returned slice has at most `chunk_size-1`\n     /// elements.\n+    #[stable(feature = \"rchunks\", since = \"1.31.0\")]\n     pub fn into_remainder(self) -> &'a mut [T] {\n         self.rem\n     }\n }\n \n-#[unstable(feature = \"rchunks\", issue = \"55177\")]\n+#[stable(feature = \"rchunks\", since = \"1.31.0\")]\n impl<'a, T> Iterator for RChunksExactMut<'a, T> {\n     type Item = &'a mut [T];\n \n@@ -4705,7 +4697,7 @@ impl<'a, T> Iterator for RChunksExactMut<'a, T> {\n     }\n }\n \n-#[unstable(feature = \"rchunks\", issue = \"55177\")]\n+#[stable(feature = \"rchunks\", since = \"1.31.0\")]\n impl<'a, T> DoubleEndedIterator for RChunksExactMut<'a, T> {\n     #[inline]\n     fn next_back(&mut self) -> Option<&'a mut [T]> {\n@@ -4720,7 +4712,7 @@ impl<'a, T> DoubleEndedIterator for RChunksExactMut<'a, T> {\n     }\n }\n \n-#[unstable(feature = \"rchunks\", issue = \"55177\")]\n+#[stable(feature = \"rchunks\", since = \"1.31.0\")]\n impl<'a, T> ExactSizeIterator for RChunksExactMut<'a, T> {\n     fn is_empty(&self) -> bool {\n         self.v.is_empty()\n@@ -4730,11 +4722,11 @@ impl<'a, T> ExactSizeIterator for RChunksExactMut<'a, T> {\n #[unstable(feature = \"trusted_len\", issue = \"37572\")]\n unsafe impl<'a, T> TrustedLen for RChunksExactMut<'a, T> {}\n \n-#[unstable(feature = \"rchunks\", issue = \"55177\")]\n+#[stable(feature = \"rchunks\", since = \"1.31.0\")]\n impl<'a, T> FusedIterator for RChunksExactMut<'a, T> {}\n \n #[doc(hidden)]\n-#[unstable(feature = \"rchunks\", issue = \"55177\")]\n+#[stable(feature = \"rchunks\", since = \"1.31.0\")]\n unsafe impl<'a, T> TrustedRandomAccess for RChunksExactMut<'a, T> {\n     unsafe fn get_unchecked(&mut self, i: usize) -> &'a mut [T] {\n         let end = self.v.len() - i * self.chunk_size;"}, {"sha": "965bd545eed591665b90be854ec0fab7c0fe9c1b", "filename": "src/libcore/tests/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/52cc6fde4b73a3013ce2185052f9492ae3728367/src%2Flibcore%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52cc6fde4b73a3013ce2185052f9492ae3728367/src%2Flibcore%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Flib.rs?ref=52cc6fde4b73a3013ce2185052f9492ae3728367", "patch": "@@ -34,7 +34,6 @@\n #![feature(trusted_len)]\n #![feature(try_from)]\n #![feature(try_trait)]\n-#![feature(rchunks)]\n #![feature(align_offset)]\n #![feature(reverse_bits)]\n #![feature(inner_deref)]"}]}