{"sha": "43a9d50a74096c73f268f0600f6b1287a1cee880", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQzYTlkNTBhNzQwOTZjNzNmMjY4ZjA2MDBmNmIxMjg3YTFjZWU4ODA=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2011-12-29T17:49:33Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2012-01-03T21:13:52Z"}, "message": "new tests", "tree": {"sha": "fbfe3bef3ef14aea39f7d0ff7f455ea9e3e46001", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fbfe3bef3ef14aea39f7d0ff7f455ea9e3e46001"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/43a9d50a74096c73f268f0600f6b1287a1cee880", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/43a9d50a74096c73f268f0600f6b1287a1cee880", "html_url": "https://github.com/rust-lang/rust/commit/43a9d50a74096c73f268f0600f6b1287a1cee880", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/43a9d50a74096c73f268f0600f6b1287a1cee880/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "de383bcfedc5ac67c6a27c51f1a8226f5a9bdcd0", "url": "https://api.github.com/repos/rust-lang/rust/commits/de383bcfedc5ac67c6a27c51f1a8226f5a9bdcd0", "html_url": "https://github.com/rust-lang/rust/commit/de383bcfedc5ac67c6a27c51f1a8226f5a9bdcd0"}], "stats": {"total": 126, "additions": 126, "deletions": 0}, "files": [{"sha": "53187408af112291ad0b39dd3aec3275200b17c9", "filename": "src/test/run-pass/block-arg-as-stmt.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/43a9d50a74096c73f268f0600f6b1287a1cee880/src%2Ftest%2Frun-pass%2Fblock-arg-as-stmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43a9d50a74096c73f268f0600f6b1287a1cee880/src%2Ftest%2Frun-pass%2Fblock-arg-as-stmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fblock-arg-as-stmt.rs?ref=43a9d50a74096c73f268f0600f6b1287a1cee880", "patch": "@@ -0,0 +1,25 @@\n+\n+fn compute1() -> float {\n+    let v = [0f, 1f, 2f, 3f];\n+\n+    // Here the \"-10f\" parses as a second\n+    // statement in tail position:\n+    vec::foldl(0f, v) { |x, y| x + y } - 10f\n+}\n+\n+fn compute2() -> float {\n+    let v = [0f, 1f, 2f, 3f];\n+\n+    // Here the ret makes this explicit:\n+    ret vec::foldl(0f, v) { |x, y| x + y } - 10f;\n+}\n+\n+fn main() {\n+    let x = compute1();\n+    log(debug, x);\n+    assert(x == -10f);\n+\n+    let y = compute2();\n+    log(debug, y);\n+    assert(y == -4f);\n+}"}, {"sha": "a8e763e96a68c9239f5bdeaf17d9bad4e12ee7f5", "filename": "src/test/run-pass/block-arg-can-be-followed-by-binop.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/43a9d50a74096c73f268f0600f6b1287a1cee880/src%2Ftest%2Frun-pass%2Fblock-arg-can-be-followed-by-binop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43a9d50a74096c73f268f0600f6b1287a1cee880/src%2Ftest%2Frun-pass%2Fblock-arg-can-be-followed-by-binop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fblock-arg-can-be-followed-by-binop.rs?ref=43a9d50a74096c73f268f0600f6b1287a1cee880", "patch": "@@ -0,0 +1,8 @@\n+fn main() {\n+    let v = [-1f, 0f, 1f, 2f, 3f];\n+\n+    // Trailing expressions require parentheses:\n+    let y = vec::foldl(0f, v) { |x, y| x + y } + 10f;\n+\n+    assert y == 15f;\n+}"}, {"sha": "8fd7974051254be084488dde778eaaee5cc516e9", "filename": "src/test/run-pass/block-arg-can-be-followed-by-block-arg.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/43a9d50a74096c73f268f0600f6b1287a1cee880/src%2Ftest%2Frun-pass%2Fblock-arg-can-be-followed-by-block-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43a9d50a74096c73f268f0600f6b1287a1cee880/src%2Ftest%2Frun-pass%2Fblock-arg-can-be-followed-by-block-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fblock-arg-can-be-followed-by-block-arg.rs?ref=43a9d50a74096c73f268f0600f6b1287a1cee880", "patch": "@@ -0,0 +1,6 @@\n+fn main() {\n+    fn f(i: block() -> uint) -> uint { i() }\n+    let v = [-1f, 0f, 1f, 2f, 3f];\n+    let z = vec::foldl(f, v) { |x, _y| x } { || 22u };\n+    assert z == 22u;\n+}"}, {"sha": "b570a8bdd82b02b181d5b269b0581449d4b0903d", "filename": "src/test/run-pass/block-arg-can-be-followed-by-call.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/43a9d50a74096c73f268f0600f6b1287a1cee880/src%2Ftest%2Frun-pass%2Fblock-arg-can-be-followed-by-call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43a9d50a74096c73f268f0600f6b1287a1cee880/src%2Ftest%2Frun-pass%2Fblock-arg-can-be-followed-by-call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fblock-arg-can-be-followed-by-call.rs?ref=43a9d50a74096c73f268f0600f6b1287a1cee880", "patch": "@@ -0,0 +1,6 @@\n+fn main() {\n+    fn f(i: uint) -> uint { i }\n+    let v = [-1f, 0f, 1f, 2f, 3f];\n+    let z = vec::foldl(f, v) { |x, _y| x } (22u);\n+    assert z == 22u;\n+}"}, {"sha": "205c9144833a620b17ac912e2253cba601dbb531", "filename": "src/test/run-pass/block-arg-in-parentheses.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/43a9d50a74096c73f268f0600f6b1287a1cee880/src%2Ftest%2Frun-pass%2Fblock-arg-in-parentheses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43a9d50a74096c73f268f0600f6b1287a1cee880/src%2Ftest%2Frun-pass%2Fblock-arg-in-parentheses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fblock-arg-in-parentheses.rs?ref=43a9d50a74096c73f268f0600f6b1287a1cee880", "patch": "@@ -0,0 +1,23 @@\n+// xfail-test\n+\n+// FIXME: Parser doesn't distinguish expression in parentheses (as in\n+// this example) from one that is not!  It is somewhat of a pain to\n+// fix this though there are no theoretical difficulties.  We could\n+// either add paren to the AST (better for pretty-print, I suppose) or\n+// modify the parser to track whether the expression in question is\n+// parenthesized.  I did the latter once and it was a bit of pain but\n+// not terribly difficult.  We could also the decision as to whether\n+// something is an \"expression with a value\" down into the\n+// parse_expr() codepath, where we *know* if there are parentheses or\n+// not, but we'd probably have to be a bit more careful then with\n+// clearing the top-level restrction flag (which we ought to do\n+// anyhow!)\n+\n+fn main() {\n+    let v = [1f, 2f, 3f];\n+    let w =\n+        if true { (vec::any(v) { |e| float::nonnegative(e) }) }\n+        else { false };\n+    assert w;\n+}\n+"}, {"sha": "d48331b3c71cc8bbb5a47a9bcbe0e107c7629ec5", "filename": "src/test/run-pass/block-arg-in-ternary.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/43a9d50a74096c73f268f0600f6b1287a1cee880/src%2Ftest%2Frun-pass%2Fblock-arg-in-ternary.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43a9d50a74096c73f268f0600f6b1287a1cee880/src%2Ftest%2Frun-pass%2Fblock-arg-in-ternary.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fblock-arg-in-ternary.rs?ref=43a9d50a74096c73f268f0600f6b1287a1cee880", "patch": "@@ -0,0 +1,6 @@\n+// Allow block arguments with ternary... why not, no chance of ambig.\n+fn main() {\n+    let v = [-1f, 1f];\n+    let foo = vec::any(v) { |e| float::negative(e) } ? true : false;\n+    assert foo;\n+}"}, {"sha": "6fa2ed5b0f3c46869e0ecf330131d73fd70918cf", "filename": "src/test/run-pass/block-arg.rs", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/43a9d50a74096c73f268f0600f6b1287a1cee880/src%2Ftest%2Frun-pass%2Fblock-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43a9d50a74096c73f268f0600f6b1287a1cee880/src%2Ftest%2Frun-pass%2Fblock-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fblock-arg.rs?ref=43a9d50a74096c73f268f0600f6b1287a1cee880", "patch": "@@ -0,0 +1,52 @@\n+// Check usage and precedence of block arguments in expressions:\n+fn main() {\n+    let v = [-1f, 0f, 1f, 2f, 3f];\n+\n+    // Statement form does not require parentheses:\n+    vec::iter(v) { |i|\n+        log(info, i);\n+    }\n+\n+    // Usable at all:\n+    let any_negative = vec::any(v) { |e| float::negative(e) };\n+    assert any_negative;\n+\n+    // Higher precedence than assignments:\n+    any_negative = vec::any(v) { |e| float::negative(e) };\n+    assert any_negative;\n+\n+    // Higher precedence than unary operations:\n+    let abs_v = vec::map(v) { |e| float::abs(e) };\n+    assert vec::all(abs_v) { |e| float::nonnegative(e) };\n+    assert !vec::any(abs_v) { |e| float::negative(e) };\n+\n+    // Usable in funny statement-like forms:\n+    if !vec::any(v) { |e| float::positive(e) } {\n+        assert false;\n+    }\n+    alt vec::all(v) { |e| float::negative(e) } {\n+        true { fail \"incorrect answer.\"; }\n+        false { }\n+    }\n+    alt 3 {\n+      _ when vec::any(v) { |e| float::negative(e) } {\n+      }\n+      _ {\n+        fail \"wrong answer.\";\n+      }\n+    }\n+\n+\n+    // Lower precedence than binary operations:\n+    let w = vec::foldl(0f, v, { |x, y| x + y }) + 10f;\n+    let y = vec::foldl(0f, v) { |x, y| x + y } + 10f;\n+    let z = 10f + vec::foldl(0f, v) { |x, y| x + y };\n+    assert w == y;\n+    assert y == z;\n+\n+    // They are not allowed as the tail of a block without parentheses:\n+    let w =\n+      if true { vec::any(abs_v, { |e| float::nonnegative(e) }) }\n+      else { false };\n+    assert w;\n+}"}]}