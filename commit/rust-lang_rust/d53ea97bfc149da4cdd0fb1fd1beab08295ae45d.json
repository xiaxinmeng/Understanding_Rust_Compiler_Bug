{"sha": "d53ea97bfc149da4cdd0fb1fd1beab08295ae45d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ1M2VhOTdiZmMxNDlkYTRjZGQwZmIxZmQxYmVhYjA4Mjk1YWU0NWQ=", "commit": {"author": {"name": "Gavin Baker", "email": "gavinb@antonym.org", "date": "2016-08-30T01:04:55Z"}, "committer": {"name": "Gavin Baker", "email": "gavinb@antonym.org", "date": "2016-09-05T13:07:50Z"}, "message": "E0516 Update error format #36108\n- fixes #36108\n- part of #35233", "tree": {"sha": "cd3232ce918b311f4e4bbb93af3ef47f90f3ef79", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cd3232ce918b311f4e4bbb93af3ef47f90f3ef79"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d53ea97bfc149da4cdd0fb1fd1beab08295ae45d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d53ea97bfc149da4cdd0fb1fd1beab08295ae45d", "html_url": "https://github.com/rust-lang/rust/commit/d53ea97bfc149da4cdd0fb1fd1beab08295ae45d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d53ea97bfc149da4cdd0fb1fd1beab08295ae45d/comments", "author": {"login": "gavinb", "id": 158326, "node_id": "MDQ6VXNlcjE1ODMyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/158326?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gavinb", "html_url": "https://github.com/gavinb", "followers_url": "https://api.github.com/users/gavinb/followers", "following_url": "https://api.github.com/users/gavinb/following{/other_user}", "gists_url": "https://api.github.com/users/gavinb/gists{/gist_id}", "starred_url": "https://api.github.com/users/gavinb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gavinb/subscriptions", "organizations_url": "https://api.github.com/users/gavinb/orgs", "repos_url": "https://api.github.com/users/gavinb/repos", "events_url": "https://api.github.com/users/gavinb/events{/privacy}", "received_events_url": "https://api.github.com/users/gavinb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "gavinb", "id": 158326, "node_id": "MDQ6VXNlcjE1ODMyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/158326?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gavinb", "html_url": "https://github.com/gavinb", "followers_url": "https://api.github.com/users/gavinb/followers", "following_url": "https://api.github.com/users/gavinb/following{/other_user}", "gists_url": "https://api.github.com/users/gavinb/gists{/gist_id}", "starred_url": "https://api.github.com/users/gavinb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gavinb/subscriptions", "organizations_url": "https://api.github.com/users/gavinb/orgs", "repos_url": "https://api.github.com/users/gavinb/repos", "events_url": "https://api.github.com/users/gavinb/events{/privacy}", "received_events_url": "https://api.github.com/users/gavinb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2dbf600d159a5c65b53419f1669834d1f81496a7", "url": "https://api.github.com/repos/rust-lang/rust/commits/2dbf600d159a5c65b53419f1669834d1f81496a7", "html_url": "https://github.com/rust-lang/rust/commit/2dbf600d159a5c65b53419f1669834d1f81496a7"}], "stats": {"total": 26, "additions": 18, "deletions": 8}, "files": [{"sha": "6997b5d770226b433540af2d9330abee66b090d9", "filename": "src/librustc/hir/check_attr.rs", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/d53ea97bfc149da4cdd0fb1fd1beab08295ae45d/src%2Flibrustc%2Fhir%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d53ea97bfc149da4cdd0fb1fd1beab08295ae45d/src%2Flibrustc%2Fhir%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fcheck_attr.rs?ref=d53ea97bfc149da4cdd0fb1fd1beab08295ae45d", "patch": "@@ -56,18 +56,21 @@ impl<'a> CheckAttrVisitor<'a> {\n \n         let mut conflicting_reprs = 0;\n         for word in words {\n+\n             let name = match word.name() {\n                 Some(word) => word,\n                 None => continue,\n             };\n \n-            let message = match &*name {\n+            let word: &str = &word.name();\n+            let (message, label) = match word {\n                 \"C\" => {\n                     conflicting_reprs += 1;\n                     if target != Target::Struct &&\n                             target != Target::Union &&\n                             target != Target::Enum {\n-                        \"attribute should be applied to struct, enum or union\"\n+                                (\"attribute should be applied to struct, enum or union\",\n+                                 \"a struct, enum or union\")\n                     } else {\n                         continue\n                     }\n@@ -85,7 +88,8 @@ impl<'a> CheckAttrVisitor<'a> {\n                 \"simd\" => {\n                     conflicting_reprs += 1;\n                     if target != Target::Struct {\n-                        \"attribute should be applied to struct\"\n+                        (\"attribute should be applied to struct\",\n+                         \"a struct\")\n                     } else {\n                         continue\n                     }\n@@ -95,15 +99,17 @@ impl<'a> CheckAttrVisitor<'a> {\n                 \"isize\" | \"usize\" => {\n                     conflicting_reprs += 1;\n                     if target != Target::Enum {\n-                        \"attribute should be applied to enum\"\n+                        (\"attribute should be applied to enum\",\n+                         \"an enum\")\n                     } else {\n                         continue\n                     }\n                 }\n                 _ => continue,\n             };\n-\n-            span_err!(self.sess, attr.span, E0517, \"{}\", message);\n+            struct_span_err!(self.sess, attr.span, E0517, \"{}\", message)\n+                .span_label(attr.span, &format!(\"requires {}\", label))\n+                .emit();\n         }\n         if conflicting_reprs > 1 {\n             span_warn!(self.sess, attr.span, E0566,"}, {"sha": "334b7a5063a3a0902383479c94ccf927a62b1487", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d53ea97bfc149da4cdd0fb1fd1beab08295ae45d/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d53ea97bfc149da4cdd0fb1fd1beab08295ae45d/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=d53ea97bfc149da4cdd0fb1fd1beab08295ae45d", "patch": "@@ -1769,8 +1769,11 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n                 }\n             }\n             hir::TyTypeof(ref _e) => {\n-                span_err!(tcx.sess, ast_ty.span, E0516,\n-                      \"`typeof` is a reserved keyword but unimplemented\");\n+                struct_span_err!(tcx.sess, ast_ty.span, E0516,\n+                                 \"`typeof` is a reserved keyword but unimplemented\")\n+                    .span_label(ast_ty.span, &format!(\"reserved keyword\"))\n+                    .emit();\n+\n                 tcx.types.err\n             }\n             hir::TyInfer => {"}, {"sha": "be2b89c5f396eb05f943c50ac6ed11bd76b6c9a8", "filename": "src/test/compile-fail/E0516.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d53ea97bfc149da4cdd0fb1fd1beab08295ae45d/src%2Ftest%2Fcompile-fail%2FE0516.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d53ea97bfc149da4cdd0fb1fd1beab08295ae45d/src%2Ftest%2Fcompile-fail%2FE0516.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0516.rs?ref=d53ea97bfc149da4cdd0fb1fd1beab08295ae45d", "patch": "@@ -10,4 +10,5 @@\n \n fn main() {\n     let x: typeof(92) = 92; //~ ERROR E0516\n+                            //~| reserved keyword\n }"}]}