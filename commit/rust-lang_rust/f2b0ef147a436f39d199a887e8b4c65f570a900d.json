{"sha": "f2b0ef147a436f39d199a887e8b4c65f570a900d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYyYjBlZjE0N2E0MzZmMzlkMTk5YTg4N2U4YjRjNjVmNTcwYTkwMGQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-04-20T08:57:48Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-04-20T08:57:48Z"}, "message": "auto merge of #5970 : huonw/rust/core-sys-size_of-val, r=pcwalton\n\nThis allows one to write\r\n```rust\r\nlet x = function_with_complicated_return_type();\r\nlet size = size_of_val(&x);\r\n```\r\ninstead of \r\n```rust\r\nlet x = function_with_complicated_return_type();\r\nlet size = size_of::<ComplicatedReturnType<Foo, Bar>>();\r\n```", "tree": {"sha": "8c33c049aefa9856464f453b4fd4d43b5fd75b54", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8c33c049aefa9856464f453b4fd4d43b5fd75b54"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f2b0ef147a436f39d199a887e8b4c65f570a900d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f2b0ef147a436f39d199a887e8b4c65f570a900d", "html_url": "https://github.com/rust-lang/rust/commit/f2b0ef147a436f39d199a887e8b4c65f570a900d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f2b0ef147a436f39d199a887e8b4c65f570a900d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4ff701b7db609cabe59832d47779832a16627b5f", "url": "https://api.github.com/repos/rust-lang/rust/commits/4ff701b7db609cabe59832d47779832a16627b5f", "html_url": "https://github.com/rust-lang/rust/commit/4ff701b7db609cabe59832d47779832a16627b5f"}, {"sha": "5c2e9b29f10694ad76dcb6b88e95243a44813c05", "url": "https://api.github.com/repos/rust-lang/rust/commits/5c2e9b29f10694ad76dcb6b88e95243a44813c05", "html_url": "https://github.com/rust-lang/rust/commit/5c2e9b29f10694ad76dcb6b88e95243a44813c05"}], "stats": {"total": 58, "additions": 57, "deletions": 1}, "files": [{"sha": "c4ec83aa17662850995431fb814421166ac78703", "filename": "src/libcore/sys.rs", "status": "modified", "additions": 57, "deletions": 1, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/f2b0ef147a436f39d199a887e8b4c65f570a900d/src%2Flibcore%2Fsys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2b0ef147a436f39d199a887e8b4c65f570a900d/src%2Flibcore%2Fsys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fsys.rs?ref=f2b0ef147a436f39d199a887e8b4c65f570a900d", "patch": "@@ -83,12 +83,24 @@ pub fn get_type_desc<T>() -> *TypeDesc {\n     unsafe { rusti::get_tydesc::<T>() as *TypeDesc }\n }\n \n+/// Returns a pointer to a type descriptor.\n+#[inline(always)]\n+pub fn get_type_desc_val<T>(_val: &T) -> *TypeDesc {\n+    get_type_desc::<T>()\n+}\n+\n /// Returns the size of a type\n #[inline(always)]\n pub fn size_of<T>() -> uint {\n     unsafe { rusti::size_of::<T>() }\n }\n \n+/// Returns the size of the type that `_val` points to\n+#[inline(always)]\n+pub fn size_of_val<T>(_val: &T) -> uint {\n+    size_of::<T>()\n+}\n+\n /**\n  * Returns the size of a type, or 1 if the actual size is zero.\n  *\n@@ -100,6 +112,13 @@ pub fn nonzero_size_of<T>() -> uint {\n     if s == 0 { 1 } else { s }\n }\n \n+/// Returns the size of the type of the value that `_val` points to\n+#[inline(always)]\n+pub fn nonzero_size_of_val<T>(_val: &T) -> uint {\n+    nonzero_size_of::<T>()\n+}\n+\n+\n /**\n  * Returns the ABI-required minimum alignment of a type\n  *\n@@ -111,12 +130,26 @@ pub fn min_align_of<T>() -> uint {\n     unsafe { rusti::min_align_of::<T>() }\n }\n \n+/// Returns the ABI-required minimum alignment of the type of the value that\n+/// `_val` points to\n+#[inline(always)]\n+pub fn min_align_of_val<T>(_val: &T) -> uint {\n+    min_align_of::<T>()\n+}\n+\n /// Returns the preferred alignment of a type\n #[inline(always)]\n pub fn pref_align_of<T>() -> uint {\n     unsafe { rusti::pref_align_of::<T>() }\n }\n \n+/// Returns the preferred alignment of the type of the value that\n+/// `_val` points to\n+#[inline(always)]\n+pub fn pref_align_of_val<T>(_val: &T) -> uint {\n+    pref_align_of::<T>()\n+}\n+\n /// Returns the refcount of a shared box (as just before calling this)\n #[inline(always)]\n pub fn refcount<T>(t: @T) -> uint {\n@@ -162,7 +195,7 @@ pub fn fail_assert(msg: &str, file: &str, line: uint) -> ! {\n #[cfg(test)]\n mod tests {\n     use cast;\n-    use sys::{Closure, pref_align_of, size_of, nonzero_size_of};\n+    use sys::*;\n \n     #[test]\n     fn size_of_basic() {\n@@ -188,6 +221,14 @@ mod tests {\n         assert!(size_of::<*uint>() == 8u);\n     }\n \n+    #[test]\n+    fn size_of_val_basic() {\n+        assert_eq!(size_of_val(&1u8), 1);\n+        assert_eq!(size_of_val(&1u16), 2);\n+        assert_eq!(size_of_val(&1u32), 4);\n+        assert_eq!(size_of_val(&1u64), 8);\n+    }\n+\n     #[test]\n     fn nonzero_size_of_basic() {\n         type Z = [i8, ..0];\n@@ -196,6 +237,14 @@ mod tests {\n         assert!(nonzero_size_of::<uint>() == size_of::<uint>());\n     }\n \n+    #[test]\n+    fn nonzero_size_of_val_basic() {\n+        let z = [0u8, ..0];\n+        assert_eq!(size_of_val(&z), 0u);\n+        assert_eq!(nonzero_size_of_val(&z), 1u);\n+        assert_eq!(nonzero_size_of_val(&1u), size_of_val(&1u));\n+    }\n+\n     #[test]\n     fn align_of_basic() {\n         assert!(pref_align_of::<u8>() == 1u);\n@@ -219,6 +268,13 @@ mod tests {\n         assert!(pref_align_of::<*uint>() == 8u);\n     }\n \n+    #[test]\n+    fn align_of_val_basic() {\n+        assert_eq!(pref_align_of_val(&1u8), 1u);\n+        assert_eq!(pref_align_of_val(&1u16), 2u);\n+        assert_eq!(pref_align_of_val(&1u32), 4u);\n+    }\n+\n     #[test]\n     fn synthesize_closure() {\n         unsafe {"}]}