{"sha": "6d97c4177c1b3f158246eaedccf99442876e5ee2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZkOTdjNDE3N2MxYjNmMTU4MjQ2ZWFlZGNjZjk5NDQyODc2ZTVlZTI=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-09-30T02:21:12Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-09-30T02:21:12Z"}, "message": "docs: Begin rewriting the task tutorial", "tree": {"sha": "e29f9b1c774436ff0e6914c6c3641b602e860232", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e29f9b1c774436ff0e6914c6c3641b602e860232"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6d97c4177c1b3f158246eaedccf99442876e5ee2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6d97c4177c1b3f158246eaedccf99442876e5ee2", "html_url": "https://github.com/rust-lang/rust/commit/6d97c4177c1b3f158246eaedccf99442876e5ee2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6d97c4177c1b3f158246eaedccf99442876e5ee2/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "affa3880debc91adde71e78345c30ce2044f8cef", "url": "https://api.github.com/repos/rust-lang/rust/commits/affa3880debc91adde71e78345c30ce2044f8cef", "html_url": "https://github.com/rust-lang/rust/commit/affa3880debc91adde71e78345c30ce2044f8cef"}], "stats": {"total": 71, "additions": 62, "deletions": 9}, "files": [{"sha": "d160b92f6feaf8e6e1ab5c5ba1c683f3bd793e93", "filename": "doc/tutorial-tasks.md", "status": "modified", "additions": 62, "deletions": 9, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/6d97c4177c1b3f158246eaedccf99442876e5ee2/doc%2Ftutorial-tasks.md", "raw_url": "https://github.com/rust-lang/rust/raw/6d97c4177c1b3f158246eaedccf99442876e5ee2/doc%2Ftutorial-tasks.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Ftutorial-tasks.md?ref=6d97c4177c1b3f158246eaedccf99442876e5ee2", "patch": "@@ -2,15 +2,68 @@\n \n # Introduction\n \n-Rust supports a system of lightweight tasks, similar to what is found\n-in Erlang or other actor systems. Rust tasks communicate via messages\n-and do not share data. However, it is possible to send data without\n-copying it by making use of [the exchange heap](#unique-boxes), which\n-allow the sending task to release ownership of a value, so that the\n-receiving task can keep on using it.\n-\n-> ***Note:*** As Rust evolves, we expect the task API to grow and\n-> change somewhat.  The tutorial documents the API as it exists today.\n+Rust supports concurrency and parallelism through lightweight tasks.\n+Rust tasks are significantly cheaper to create than traditional\n+threads, with a typical 32-bit system able to run hundreds of\n+thousands simultaneously. Tasks in Rust are what are often referred to\n+as _green threads_, cooperatively scheduled by the Rust runtime onto a\n+small number of operating system threads.\n+\n+Tasks provide failure isolation and recovery. When an exception occurs\n+in rust code (either by calling `fail` explicitly or by otherwise performing\n+an invalid operation) the entire task is destroyed - there is no way\n+to `catch` an exception as in other languages. Instead tasks may monitor\n+each other to detect when failure has occurred.\n+\n+Rust tasks have dynamically sized stacks. When a task is first created\n+it starts off with a small amount of stack (in the hundreds to\n+low thousands of bytes, depending on plattform), and more stack is\n+added as needed. A Rust task will never run off the end of the stack as\n+is possible in many other languages, but they do have a stack budget,\n+and if a Rust task exceeds its stack budget then it will fail safely.\n+\n+Tasks make use of Rust's type system to provide strong memory safety\n+guarantees, disallowing shared mutable state. Communication between\n+tasks is facilitated by the transfer of _owned_ data through the\n+global _exchange heap_.\n+\n+This tutorial will explain the basics of tasks and communication in Rust,\n+explore some typical patterns in concurrent Rust code, and finally\n+discuss some of the more exotic synchronization types in the standard\n+library.\n+\n+# A note about the libraries\n+\n+While Rust's type system provides the building blocks needed for safe\n+and efficient tasks, all of the task functionality itself is implemented\n+in the core and standard libraries, which are still under development\n+and do not always present a nice programming interface.\n+\n+In particular, there are currently two independent modules that provide\n+a message passing interface to Rust code: `core::comm` and `core::pipes`.\n+`core::comm` is an older, less efficient system that is being phased out\n+in favor of `pipes`. At some point the existing `core::comm` API will\n+be romoved and the user-facing portions of `core::pipes` will be moved\n+to `core::comm`. In this tutorial we will discuss `pipes` and ignore\n+the `comm` API.\n+\n+For your reference, these are the standard modules involved in Rust\n+concurrency at the moment.\n+\n+* [`core::task`] - All code relating to tasks and task scheduling\n+* [`core::comm`] - The deprecated message passing API\n+* [`core::pipes`] - The new message passing infrastructure and API\n+* [`std::comm`] - Higher level messaging types based on `core::pipes`\n+* [`std::sync`] - More exotic synchronization tools, including locks \n+* [`std::arc`] - The ARC type, for safely sharing immutable data\n+\n+[`core::task`]: core/task.html\n+[`core::comm`]: core/comm.html\n+[`core::pipes`]: core/pipes.html\n+[`std::comm`]: std/comm.html\n+[`std::sync`]: std/sync.html\n+[`std::arc`]: std/arc.html\n+\n \n # Spawning a task\n "}]}