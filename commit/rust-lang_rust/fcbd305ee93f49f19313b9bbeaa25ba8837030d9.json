{"sha": "fcbd305ee93f49f19313b9bbeaa25ba8837030d9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZjYmQzMDVlZTkzZjQ5ZjE5MzEzYjliYmVhYTI1YmE4ODM3MDMwZDk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-01-15T21:13:35Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-01-15T21:13:35Z"}, "message": "Auto merge of #80602 - tgnottingham:cratemetadata_you_aint_special, r=michaelwoerister\n\nRemove DepKind::CrateMetadata and pre-allocation of DepNodes\n\nRemove much of the special-case handling around crate metadata\ndependency tracking by replacing `DepKind::CrateMetadata` and the\npre-allocation of corresponding `DepNodes` with on-demand invocation\nof the `crate_hash` query.", "tree": {"sha": "fa9333b641b83e9cf23929c2b37f09b50b78a5f2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fa9333b641b83e9cf23929c2b37f09b50b78a5f2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fcbd305ee93f49f19313b9bbeaa25ba8837030d9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fcbd305ee93f49f19313b9bbeaa25ba8837030d9", "html_url": "https://github.com/rust-lang/rust/commit/fcbd305ee93f49f19313b9bbeaa25ba8837030d9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fcbd305ee93f49f19313b9bbeaa25ba8837030d9/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bc39d4d9c514e5fdb40a5782e6ca08924f979c35", "url": "https://api.github.com/repos/rust-lang/rust/commits/bc39d4d9c514e5fdb40a5782e6ca08924f979c35", "html_url": "https://github.com/rust-lang/rust/commit/bc39d4d9c514e5fdb40a5782e6ca08924f979c35"}, {"sha": "8e7cbc28a65df0e979b6052db7f4f8d26fecd9d9", "url": "https://api.github.com/repos/rust-lang/rust/commits/8e7cbc28a65df0e979b6052db7f4f8d26fecd9d9", "html_url": "https://github.com/rust-lang/rust/commit/8e7cbc28a65df0e979b6052db7f4f8d26fecd9d9"}], "stats": {"total": 122, "additions": 15, "deletions": 107}, "files": [{"sha": "95456c07b10aaaa2308de79d753fc716e3b16afc", "filename": "compiler/rustc_incremental/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fcbd305ee93f49f19313b9bbeaa25ba8837030d9/compiler%2Frustc_incremental%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcbd305ee93f49f19313b9bbeaa25ba8837030d9/compiler%2Frustc_incremental%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_incremental%2Fsrc%2Flib.rs?ref=fcbd305ee93f49f19313b9bbeaa25ba8837030d9", "patch": "@@ -17,7 +17,6 @@ mod persist;\n pub use assert_dep_graph::assert_dep_graph;\n pub use persist::copy_cgu_workproduct_to_incr_comp_cache_dir;\n pub use persist::delete_workproduct_files;\n-pub use persist::dep_graph_tcx_init;\n pub use persist::finalize_session_directory;\n pub use persist::garbage_collect_session_directories;\n pub use persist::in_incr_comp_dir;"}, {"sha": "0add0c5aa268ed23f060a0877b25229f2a473ca4", "filename": "compiler/rustc_incremental/src/persist/load.rs", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/fcbd305ee93f49f19313b9bbeaa25ba8837030d9/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Fload.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcbd305ee93f49f19313b9bbeaa25ba8837030d9/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Fload.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Fload.rs?ref=fcbd305ee93f49f19313b9bbeaa25ba8837030d9", "patch": "@@ -4,7 +4,6 @@ use rustc_data_structures::fx::FxHashMap;\n use rustc_hir::definitions::Definitions;\n use rustc_middle::dep_graph::{PreviousDepGraph, SerializedDepGraph, WorkProduct, WorkProductId};\n use rustc_middle::ty::query::OnDiskCache;\n-use rustc_middle::ty::TyCtxt;\n use rustc_serialize::opaque::Decoder;\n use rustc_serialize::Decodable as RustcDecodable;\n use rustc_session::Session;\n@@ -15,14 +14,6 @@ use super::file_format;\n use super::fs::*;\n use super::work_product;\n \n-pub fn dep_graph_tcx_init(tcx: TyCtxt<'_>) {\n-    if !tcx.dep_graph.is_fully_enabled() {\n-        return;\n-    }\n-\n-    tcx.allocate_metadata_dep_nodes();\n-}\n-\n type WorkProductMap = FxHashMap<WorkProductId, WorkProduct>;\n \n pub enum LoadResult<T> {"}, {"sha": "8821b34b50212d758607017cb5faa0cf31f53f26", "filename": "compiler/rustc_incremental/src/persist/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fcbd305ee93f49f19313b9bbeaa25ba8837030d9/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcbd305ee93f49f19313b9bbeaa25ba8837030d9/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Fmod.rs?ref=fcbd305ee93f49f19313b9bbeaa25ba8837030d9", "patch": "@@ -15,7 +15,6 @@ pub use fs::garbage_collect_session_directories;\n pub use fs::in_incr_comp_dir;\n pub use fs::in_incr_comp_dir_sess;\n pub use fs::prepare_session_directory;\n-pub use load::dep_graph_tcx_init;\n pub use load::load_query_result_cache;\n pub use load::LoadResult;\n pub use load::{load_dep_graph, DepGraphFuture};"}, {"sha": "ead2512d3b2a54eb4f56ac936896c9db0a988512", "filename": "compiler/rustc_interface/src/passes.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fcbd305ee93f49f19313b9bbeaa25ba8837030d9/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcbd305ee93f49f19313b9bbeaa25ba8837030d9/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs?ref=fcbd305ee93f49f19313b9bbeaa25ba8837030d9", "patch": "@@ -797,12 +797,6 @@ pub fn create_global_ctxt<'tcx>(\n         })\n     });\n \n-    // Do some initialization of the DepGraph that can only be done with the tcx available.\n-    let icx = ty::tls::ImplicitCtxt::new(&gcx);\n-    ty::tls::enter_context(&icx, |_| {\n-        icx.tcx.sess.time(\"dep_graph_tcx_init\", || rustc_incremental::dep_graph_tcx_init(icx.tcx));\n-    });\n-\n     QueryContext(gcx)\n }\n "}, {"sha": "115569fc60d9f27ece00a524a82f3ef4d5f62032", "filename": "compiler/rustc_metadata/src/rmeta/decoder.rs", "status": "modified", "additions": 1, "deletions": 33, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/fcbd305ee93f49f19313b9bbeaa25ba8837030d9/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcbd305ee93f49f19313b9bbeaa25ba8837030d9/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs?ref=fcbd305ee93f49f19313b9bbeaa25ba8837030d9", "patch": "@@ -10,7 +10,7 @@ use rustc_data_structures::captures::Captures;\n use rustc_data_structures::fingerprint::{Fingerprint, FingerprintDecoder};\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::svh::Svh;\n-use rustc_data_structures::sync::{AtomicCell, Lock, LockGuard, Lrc, OnceCell};\n+use rustc_data_structures::sync::{Lock, LockGuard, Lrc, OnceCell};\n use rustc_data_structures::unhash::UnhashMap;\n use rustc_errors::ErrorReported;\n use rustc_expand::base::{SyntaxExtension, SyntaxExtensionKind};\n@@ -21,7 +21,6 @@ use rustc_hir::def_id::{CrateNum, DefId, DefIndex, CRATE_DEF_INDEX, LOCAL_CRATE}\n use rustc_hir::definitions::{DefKey, DefPath, DefPathData, DefPathHash};\n use rustc_hir::lang_items;\n use rustc_index::vec::{Idx, IndexVec};\n-use rustc_middle::dep_graph::{self, DepNode, DepNodeExt, DepNodeIndex};\n use rustc_middle::hir::exports::Export;\n use rustc_middle::middle::cstore::{CrateSource, ExternCrate};\n use rustc_middle::middle::cstore::{ForeignModule, LinkagePreference, NativeLib};\n@@ -84,11 +83,6 @@ crate struct CrateMetadata {\n     def_path_hash_map: OnceCell<UnhashMap<DefPathHash, DefIndex>>,\n     /// Used for decoding interpret::AllocIds in a cached & thread-safe manner.\n     alloc_decoding_state: AllocDecodingState,\n-    /// The `DepNodeIndex` of the `DepNode` representing this upstream crate.\n-    /// It is initialized on the first access in `get_crate_dep_node_index()`.\n-    /// Do not access the value directly, as it might not have been initialized yet.\n-    /// The field must always be initialized to `DepNodeIndex::INVALID`.\n-    dep_node_index: AtomicCell<DepNodeIndex>,\n     /// Caches decoded `DefKey`s.\n     def_key_cache: Lock<FxHashMap<DefIndex, DefKey>>,\n     /// Caches decoded `DefPathHash`es.\n@@ -1611,31 +1605,6 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n         self.def_path_hash_unlocked(index, &mut def_path_hashes)\n     }\n \n-    /// Get the `DepNodeIndex` corresponding this crate. The result of this\n-    /// method is cached in the `dep_node_index` field.\n-    fn get_crate_dep_node_index(&self, tcx: TyCtxt<'tcx>) -> DepNodeIndex {\n-        let mut dep_node_index = self.dep_node_index.load();\n-\n-        if unlikely!(dep_node_index == DepNodeIndex::INVALID) {\n-            // We have not cached the DepNodeIndex for this upstream crate yet,\n-            // so use the dep-graph to find it out and cache it.\n-            // Note that multiple threads can enter this block concurrently.\n-            // That is fine because the DepNodeIndex remains constant\n-            // throughout the whole compilation session, and multiple stores\n-            // would always write the same value.\n-\n-            let def_path_hash = self.def_path_hash(CRATE_DEF_INDEX);\n-            let dep_node =\n-                DepNode::from_def_path_hash(def_path_hash, dep_graph::DepKind::CrateMetadata);\n-\n-            dep_node_index = tcx.dep_graph.dep_node_index_of(&dep_node);\n-            assert!(dep_node_index != DepNodeIndex::INVALID);\n-            self.dep_node_index.store(dep_node_index);\n-        }\n-\n-        dep_node_index\n-    }\n-\n     /// Imports the source_map from an external crate into the source_map of the crate\n     /// currently being compiled (the \"local crate\").\n     ///\n@@ -1852,7 +1821,6 @@ impl CrateMetadata {\n             source_map_import_info: OnceCell::new(),\n             def_path_hash_map: Default::default(),\n             alloc_decoding_state,\n-            dep_node_index: AtomicCell::new(DepNodeIndex::INVALID),\n             cnum,\n             cnum_map,\n             dependencies,"}, {"sha": "17ce4a5f9520e817c60e22f5f6736bf704233856", "filename": "compiler/rustc_metadata/src/rmeta/decoder/cstore_impl.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/fcbd305ee93f49f19313b9bbeaa25ba8837030d9/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcbd305ee93f49f19313b9bbeaa25ba8837030d9/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs?ref=fcbd305ee93f49f19313b9bbeaa25ba8837030d9", "patch": "@@ -44,13 +44,16 @@ macro_rules! provide {\n                 let ($def_id, $other) = def_id_arg.into_args();\n                 assert!(!$def_id.is_local());\n \n-                let $cdata = CStore::from_tcx($tcx).get_crate_data($def_id.krate);\n-\n-                if $tcx.dep_graph.is_fully_enabled() {\n-                    let crate_dep_node_index = $cdata.get_crate_dep_node_index($tcx);\n-                    $tcx.dep_graph.read_index(crate_dep_node_index);\n+                // External query providers call `crate_hash` in order to register a dependency\n+                // on the crate metadata. The exception is `crate_hash` itself, which obviously\n+                // doesn't need to do this (and can't, as it would cause a query cycle).\n+                use rustc_middle::dep_graph::DepKind;\n+                if DepKind::$name != DepKind::crate_hash && $tcx.dep_graph.is_fully_enabled() {\n+                    $tcx.ensure().crate_hash($def_id.krate);\n                 }\n \n+                let $cdata = CStore::from_tcx($tcx).get_crate_data($def_id.krate);\n+\n                 $compute\n             })*\n "}, {"sha": "62f2874af0493036f1a6b0a8e4b5aec19820609d", "filename": "compiler/rustc_middle/src/dep_graph/dep_node.rs", "status": "modified", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/fcbd305ee93f49f19313b9bbeaa25ba8837030d9/compiler%2Frustc_middle%2Fsrc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcbd305ee93f49f19313b9bbeaa25ba8837030d9/compiler%2Frustc_middle%2Fsrc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fdep_graph%2Fdep_node.rs?ref=fcbd305ee93f49f19313b9bbeaa25ba8837030d9", "patch": "@@ -207,17 +207,6 @@ pub mod dep_kind {\n         try_load_from_on_disk_cache: |_, _| {},\n     };\n \n-    // Represents metadata from an extern crate.\n-    pub const CrateMetadata: DepKindStruct = DepKindStruct {\n-        has_params: true,\n-        is_anon: false,\n-        is_eval_always: true,\n-\n-        can_reconstruct_query_key: || true,\n-        force_from_dep_node: |_, dep_node| bug!(\"force_from_dep_node: encountered {:?}\", dep_node),\n-        try_load_from_on_disk_cache: |_, _| {},\n-    };\n-\n     pub const TraitSelect: DepKindStruct = DepKindStruct {\n         has_params: false,\n         is_anon: true,\n@@ -353,9 +342,6 @@ rustc_dep_node_append!([define_dep_nodes!][ <'tcx>\n     // We use this for most things when incr. comp. is turned off.\n     [] Null,\n \n-    // Represents metadata from an extern crate.\n-    [eval_always] CrateMetadata(CrateNum),\n-\n     [anon] TraitSelect,\n \n     // WARNING: if `Symbol` is changed, make sure you update `make_compile_codegen_unit` below."}, {"sha": "b88ffa2bb734700003dfab6cbb38ad7bad51a12c", "filename": "compiler/rustc_middle/src/dep_graph/mod.rs", "status": "modified", "additions": 2, "deletions": 13, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/fcbd305ee93f49f19313b9bbeaa25ba8837030d9/compiler%2Frustc_middle%2Fsrc%2Fdep_graph%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcbd305ee93f49f19313b9bbeaa25ba8837030d9/compiler%2Frustc_middle%2Fsrc%2Fdep_graph%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fdep_graph%2Fmod.rs?ref=fcbd305ee93f49f19313b9bbeaa25ba8837030d9", "patch": "@@ -116,20 +116,9 @@ impl<'tcx> DepContext for TyCtxt<'tcx> {\n         // be removed. https://github.com/rust-lang/rust/issues/62649 is one such\n         // bug that must be fixed before removing this.\n         match dep_node.kind {\n-            DepKind::hir_owner | DepKind::hir_owner_nodes | DepKind::CrateMetadata => {\n+            DepKind::hir_owner | DepKind::hir_owner_nodes => {\n                 if let Some(def_id) = dep_node.extract_def_id(*self) {\n-                    if def_id_corresponds_to_hir_dep_node(*self, def_id.expect_local()) {\n-                        if dep_node.kind == DepKind::CrateMetadata {\n-                            // The `DefPath` has corresponding node,\n-                            // and that node should have been marked\n-                            // either red or green in `data.colors`.\n-                            bug!(\n-                                \"DepNode {:?} should have been \\\n-                             pre-marked as red or green but wasn't.\",\n-                                dep_node\n-                            );\n-                        }\n-                    } else {\n+                    if !def_id_corresponds_to_hir_dep_node(*self, def_id.expect_local()) {\n                         // This `DefPath` does not have a\n                         // corresponding `DepNode` (e.g. a\n                         // struct field), and the ` DefPath`"}, {"sha": "9770e67f2d25a8b2bb5ef3153db52be6e8d103e9", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fcbd305ee93f49f19313b9bbeaa25ba8837030d9/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcbd305ee93f49f19313b9bbeaa25ba8837030d9/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=fcbd305ee93f49f19313b9bbeaa25ba8837030d9", "patch": "@@ -1240,6 +1240,8 @@ rustc_queries! {\n             eval_always\n             desc { \"looking up the disambiguator a crate\" }\n         }\n+        // The macro which defines `rustc_metadata::provide_extern` depends on this query's name.\n+        // Changing the name should cause a compiler error, but in case that changes, be aware.\n         query crate_hash(_: CrateNum) -> Svh {\n             eval_always\n             desc { \"looking up the hash a crate\" }"}, {"sha": "a355242f5ce67e31401190c8c15eedac9dd6295e", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 2, "deletions": 25, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/fcbd305ee93f49f19313b9bbeaa25ba8837030d9/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcbd305ee93f49f19313b9bbeaa25ba8837030d9/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=fcbd305ee93f49f19313b9bbeaa25ba8837030d9", "patch": "@@ -1,7 +1,7 @@\n //! Type context book-keeping.\n \n use crate::arena::Arena;\n-use crate::dep_graph::{self, DepGraph, DepKind, DepNode, DepNodeExt};\n+use crate::dep_graph::DepGraph;\n use crate::hir::exports::ExportMap;\n use crate::ich::{NodeIdHashingMode, StableHashingContext};\n use crate::infer::canonical::{Canonical, CanonicalVarInfo, CanonicalVarInfos};\n@@ -37,8 +37,7 @@ use rustc_data_structures::sync::{self, Lock, Lrc, WorkerLocal};\n use rustc_errors::ErrorReported;\n use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Res};\n-use rustc_hir::def_id::{CrateNum, DefId, DefIdMap, LocalDefId};\n-use rustc_hir::def_id::{CRATE_DEF_INDEX, LOCAL_CRATE};\n+use rustc_hir::def_id::{CrateNum, DefId, DefIdMap, LocalDefId, LOCAL_CRATE};\n use rustc_hir::definitions::Definitions;\n use rustc_hir::intravisit::Visitor;\n use rustc_hir::lang_items::LangItem;\n@@ -1315,28 +1314,6 @@ impl<'tcx> TyCtxt<'tcx> {\n         StableHashingContext::ignore_spans(self.sess, krate, self.definitions, &*self.cstore)\n     }\n \n-    // This method makes sure that we have a DepNode and a Fingerprint for\n-    // every upstream crate. It needs to be called once right after the tcx is\n-    // created.\n-    // With full-fledged red/green, the method will probably become unnecessary\n-    // as this will be done on-demand.\n-    pub fn allocate_metadata_dep_nodes(self) {\n-        // We cannot use the query versions of crates() and crate_hash(), since\n-        // those would need the DepNodes that we are allocating here.\n-        for cnum in self.cstore.crates_untracked() {\n-            let def_path_hash = self.def_path_hash(DefId { krate: cnum, index: CRATE_DEF_INDEX });\n-            let dep_node = DepNode::from_def_path_hash(def_path_hash, DepKind::CrateMetadata);\n-            let crate_hash = self.cstore.crate_hash_untracked(cnum);\n-            self.dep_graph.with_task(\n-                dep_node,\n-                self,\n-                crate_hash,\n-                |_, x| x, // No transformation needed\n-                dep_graph::hash_result,\n-            );\n-        }\n-    }\n-\n     pub fn serialize_query_result_cache(self, encoder: &mut FileEncoder) -> FileEncodeResult {\n         self.queries.on_disk_cache.as_ref().map_or(Ok(()), |c| c.serialize(self, encoder))\n     }"}]}