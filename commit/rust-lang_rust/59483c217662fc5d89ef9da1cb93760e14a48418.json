{"sha": "59483c217662fc5d89ef9da1cb93760e14a48418", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU5NDgzYzIxNzY2MmZjNWQ4OWVmOWRhMWNiOTM3NjBlMTRhNDg0MTg=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-10-17T00:44:12Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-10-17T00:44:12Z"}, "message": "Merge #6260\n\n6260: xshell r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "cf93fa6a4f3d18e8be27acf56ee85927fd6f66c7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cf93fa6a4f3d18e8be27acf56ee85927fd6f66c7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/59483c217662fc5d89ef9da1cb93760e14a48418", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfij5cCRBK7hj4Ov3rIwAAdHIIAEhNCeEQv0yKiNdocg5jTatj\ni2NceYt+vjmIgnpMbHgoEOwhfmIDIMMKWg9jagvAxMuSSK6Nd38m+v317NTvdHPI\naCCG3aQPu47STBDkawJrY0Y6ux7BkHmiyCivbCuD105elUR2MJ6Uhc59QpXQOL5Y\njfGxMCAQKZA8cmnGQJh0sTWjoZ94zhX15cgLHWzyoj6zk1/rzIUCIe03pePCsN+j\nniUqCl8AGlPuL+f16YhL3D8bd4qYrqKJZ4xuT/Nm0vQleZAu5zNi1elXJB+bE3BQ\nX2UZtdVu1TLrFug03ug1GnoX/CCb9siUtvMAjohyk1QBwtQ2XHE8o8AY3gc2O6M=\n=GyCd\n-----END PGP SIGNATURE-----\n", "payload": "tree cf93fa6a4f3d18e8be27acf56ee85927fd6f66c7\nparent f0412da4a2c06e50030d13e37002d0440fc7cded\nparent 49a90d4c31148a6533d9ee9a288f42b454b2f421\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1602895452 +0000\ncommitter GitHub <noreply@github.com> 1602895452 +0000\n\nMerge #6260\n\n6260: xshell r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/59483c217662fc5d89ef9da1cb93760e14a48418", "html_url": "https://github.com/rust-lang/rust/commit/59483c217662fc5d89ef9da1cb93760e14a48418", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/59483c217662fc5d89ef9da1cb93760e14a48418/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f0412da4a2c06e50030d13e37002d0440fc7cded", "url": "https://api.github.com/repos/rust-lang/rust/commits/f0412da4a2c06e50030d13e37002d0440fc7cded", "html_url": "https://github.com/rust-lang/rust/commit/f0412da4a2c06e50030d13e37002d0440fc7cded"}, {"sha": "49a90d4c31148a6533d9ee9a288f42b454b2f421", "url": "https://api.github.com/repos/rust-lang/rust/commits/49a90d4c31148a6533d9ee9a288f42b454b2f421", "html_url": "https://github.com/rust-lang/rust/commit/49a90d4c31148a6533d9ee9a288f42b454b2f421"}], "stats": {"total": 506, "additions": 181, "deletions": 325}, "files": [{"sha": "7a77ed7222fd9fa5b9e83131808447844ceaf60e", "filename": "Cargo.lock", "status": "modified", "additions": 16, "deletions": 7, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/59483c217662fc5d89ef9da1cb93760e14a48418/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/59483c217662fc5d89ef9da1cb93760e14a48418/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=59483c217662fc5d89ef9da1cb93760e14a48418", "patch": "@@ -421,12 +421,6 @@ dependencies = [\n  \"toolchain\",\n ]\n \n-[[package]]\n-name = \"fs-err\"\n-version = \"2.5.0\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"bcd1163ae48bda72a20ae26d66a04d3094135cadab911cff418ae5e33f253431\"\n-\n [[package]]\n name = \"fsevent\"\n version = \"2.0.2\"\n@@ -1920,17 +1914,32 @@ dependencies = [\n  \"winapi-build\",\n ]\n \n+[[package]]\n+name = \"xshell\"\n+version = \"0.1.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"1f7f756f2faab73adb00db44db716598ab2c9e4bce4a875c053022291bd3cab4\"\n+dependencies = [\n+ \"xshell-macros\",\n+]\n+\n+[[package]]\n+name = \"xshell-macros\"\n+version = \"0.1.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"51b020c2f3132b34067e2f6ebc58f0f210624898713a8186b8cdb75d3b8c3001\"\n+\n [[package]]\n name = \"xtask\"\n version = \"0.1.0\"\n dependencies = [\n  \"anyhow\",\n  \"flate2\",\n- \"fs-err\",\n  \"pico-args\",\n  \"proc-macro2\",\n  \"quote\",\n  \"ungrammar\",\n  \"walkdir\",\n  \"write-json\",\n+ \"xshell\",\n ]"}, {"sha": "2ef956485597b252064250d0b3322ba9bf89e0b3", "filename": "xtask/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/59483c217662fc5d89ef9da1cb93760e14a48418/xtask%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/59483c217662fc5d89ef9da1cb93760e14a48418/xtask%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2FCargo.toml?ref=59483c217662fc5d89ef9da1cb93760e14a48418", "patch": "@@ -18,5 +18,5 @@ quote = \"1.0.2\"\n ungrammar = \"1.1.3\"\n walkdir = \"2.3.1\"\n write-json =  \"0.1.0\"\n-fs-err = \"2.3\"\n+xshell = \"0.1\"\n # Avoid adding more dependencies to this crate"}, {"sha": "3ee4c1adf42a3dcd3707f6ec17abce7bd6f0df66", "filename": "xtask/src/codegen.rs", "status": "modified", "additions": 8, "deletions": 11, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/59483c217662fc5d89ef9da1cb93760e14a48418/xtask%2Fsrc%2Fcodegen.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59483c217662fc5d89ef9da1cb93760e14a48418/xtask%2Fsrc%2Fcodegen.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fcodegen.rs?ref=59483c217662fc5d89ef9da1cb93760e14a48418", "patch": "@@ -15,12 +15,9 @@ use std::{\n     fmt, mem,\n     path::{Path, PathBuf},\n };\n+use xshell::{cmd, pushenv, read_file, write_file};\n \n-use crate::{\n-    ensure_rustfmt,\n-    not_bash::{fs2, pushenv, run},\n-    project_root, Result,\n-};\n+use crate::{ensure_rustfmt, project_root, Result};\n \n pub use self::{\n     gen_assists_docs::{generate_assists_docs, generate_assists_tests},\n@@ -57,7 +54,7 @@ impl CodegenCmd {\n /// A helper to update file on disk if it has changed.\n /// With verify = false,\n fn update(path: &Path, contents: &str, mode: Mode) -> Result<()> {\n-    match fs2::read_to_string(path) {\n+    match read_file(path) {\n         Ok(old_contents) if normalize(&old_contents) == normalize(contents) => {\n             return Ok(());\n         }\n@@ -67,7 +64,7 @@ fn update(path: &Path, contents: &str, mode: Mode) -> Result<()> {\n         anyhow::bail!(\"`{}` is not up-to-date\", path.display());\n     }\n     eprintln!(\"updating {}\", path.display());\n-    fs2::write(path, contents)?;\n+    write_file(path, contents)?;\n     return Ok(());\n \n     fn normalize(s: &str) -> String {\n@@ -80,10 +77,10 @@ const PREAMBLE: &str = \"Generated file, do not edit by hand, see `xtask/src/code\n fn reformat(text: &str) -> Result<String> {\n     let _e = pushenv(\"RUSTUP_TOOLCHAIN\", \"stable\");\n     ensure_rustfmt()?;\n-    let stdout = run!(\n-        \"rustfmt --config-path {} --config fn_single_line=true\", project_root().join(\"rustfmt.toml\").display();\n-        <text.as_bytes()\n-    )?;\n+    let rustfmt_toml = project_root().join(\"rustfmt.toml\");\n+    let stdout = cmd!(\"rustfmt --config-path {rustfmt_toml} --config fn_single_line=true\")\n+        .stdin(text)\n+        .read()?;\n     Ok(format!(\"//! {}\\n\\n{}\\n\", PREAMBLE, stdout))\n }\n "}, {"sha": "3cf15ce021741804f5e91aebb1bdcb0b7763e736", "filename": "xtask/src/codegen/gen_features.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/59483c217662fc5d89ef9da1cb93760e14a48418/xtask%2Fsrc%2Fcodegen%2Fgen_features.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59483c217662fc5d89ef9da1cb93760e14a48418/xtask%2Fsrc%2Fcodegen%2Fgen_features.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fcodegen%2Fgen_features.rs?ref=59483c217662fc5d89ef9da1cb93760e14a48418", "patch": "@@ -3,15 +3,13 @@ use std::path::{Path, PathBuf};\n \n use quote::quote;\n use walkdir::WalkDir;\n+use xshell::{cmd, read_file};\n \n-use crate::{\n-    codegen::{project_root, reformat, update, Mode, Result},\n-    not_bash::{fs2, run},\n-};\n+use crate::codegen::{project_root, reformat, update, Mode, Result};\n \n pub fn generate_features(mode: Mode) -> Result<()> {\n     if !Path::new(\"./target/rust\").exists() {\n-        run!(\"git clone https://github.com/rust-lang/rust ./target/rust\")?;\n+        cmd!(\"git clone https://github.com/rust-lang/rust ./target/rust\").run()?;\n     }\n \n     let contents = generate_descriptor(\"./target/rust/src/doc/unstable-book/src\".into())?;\n@@ -34,7 +32,7 @@ fn generate_descriptor(src_dir: PathBuf) -> Result<String> {\n         .map(|entry| {\n             let path = entry.path();\n             let feature_ident = path.file_stem().unwrap().to_str().unwrap().replace(\"-\", \"_\");\n-            let doc = fs2::read_to_string(path).unwrap();\n+            let doc = read_file(path).unwrap();\n \n             quote! { LintCompletion { label: #feature_ident, description: #doc } }\n         });"}, {"sha": "9e15a5a4c9fa11b0be23081d81313ced9ba53f47", "filename": "xtask/src/dist.rs", "status": "modified", "additions": 14, "deletions": 19, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/59483c217662fc5d89ef9da1cb93760e14a48418/xtask%2Fsrc%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59483c217662fc5d89ef9da1cb93760e14a48418/xtask%2Fsrc%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fdist.rs?ref=59483c217662fc5d89ef9da1cb93760e14a48418", "patch": "@@ -1,4 +1,3 @@\n-use flate2::{write::GzEncoder, Compression};\n use std::{\n     env,\n     fs::File,\n@@ -7,11 +6,10 @@ use std::{\n };\n \n use anyhow::Result;\n+use flate2::{write::GzEncoder, Compression};\n+use xshell::{cmd, cp, mkdir_p, pushd, read_file, rm_rf, write_file};\n \n-use crate::{\n-    not_bash::{date_iso, fs2, pushd, rm_rf, run},\n-    project_root,\n-};\n+use crate::{date_iso, project_root};\n \n pub struct DistCmd {\n     pub nightly: bool,\n@@ -22,7 +20,7 @@ impl DistCmd {\n     pub fn run(self) -> Result<()> {\n         let dist = project_root().join(\"dist\");\n         rm_rf(&dist)?;\n-        fs2::create_dir_all(&dist)?;\n+        mkdir_p(&dist)?;\n \n         if let Some(version) = self.client_version {\n             let release_tag = if self.nightly { \"nightly\".to_string() } else { date_iso()? };\n@@ -34,7 +32,7 @@ impl DistCmd {\n }\n \n fn dist_client(version: &str, release_tag: &str) -> Result<()> {\n-    let _d = pushd(\"./editors/code\");\n+    let _d = pushd(\"./editors/code\")?;\n     let nightly = release_tag == \"nightly\";\n \n     let mut patch = Patch::new(\"./package.json\")?;\n@@ -54,20 +52,16 @@ fn dist_client(version: &str, release_tag: &str) -> Result<()> {\n     }\n     patch.commit()?;\n \n-    run!(\"npm ci\")?;\n-    run!(\"npx vsce package -o ../../dist/rust-analyzer.vsix\")?;\n+    cmd!(\"npm ci\").run()?;\n+    cmd!(\"npx vsce package -o ../../dist/rust-analyzer.vsix\").run()?;\n     Ok(())\n }\n \n fn dist_server() -> Result<()> {\n     if cfg!(target_os = \"linux\") {\n         env::set_var(\"CC\", \"clang\");\n-        run!(\n-            \"cargo build --manifest-path ./crates/rust-analyzer/Cargo.toml --bin rust-analyzer --release\"\n-        )?;\n-    } else {\n-        run!(\"cargo build --manifest-path ./crates/rust-analyzer/Cargo.toml --bin rust-analyzer --release\")?;\n     }\n+    cmd!(\"cargo build --manifest-path ./crates/rust-analyzer/Cargo.toml --bin rust-analyzer --release\").run()?;\n \n     let (src, dst) = if cfg!(target_os = \"linux\") {\n         (\"./target/release/rust-analyzer\", \"./dist/rust-analyzer-linux\")\n@@ -82,7 +76,7 @@ fn dist_server() -> Result<()> {\n     let src = Path::new(src);\n     let dst = Path::new(dst);\n \n-    fs2::copy(&src, &dst)?;\n+    cp(&src, &dst)?;\n     gzip(&src, &dst.with_extension(\"gz\"))?;\n \n     Ok(())\n@@ -105,7 +99,7 @@ struct Patch {\n impl Patch {\n     fn new(path: impl Into<PathBuf>) -> Result<Patch> {\n         let path = path.into();\n-        let contents = fs2::read_to_string(&path)?;\n+        let contents = read_file(&path)?;\n         Ok(Patch { path, original_contents: contents.clone(), contents })\n     }\n \n@@ -115,13 +109,14 @@ impl Patch {\n         self\n     }\n \n-    fn commit(&self) -> io::Result<()> {\n-        fs2::write(&self.path, &self.contents)\n+    fn commit(&self) -> Result<()> {\n+        write_file(&self.path, &self.contents)?;\n+        Ok(())\n     }\n }\n \n impl Drop for Patch {\n     fn drop(&mut self) {\n-        fs2::write(&self.path, &self.original_contents).unwrap();\n+        write_file(&self.path, &self.original_contents).unwrap();\n     }\n }"}, {"sha": "789e9f27bfa126cafe2e7435e93f7c7c92896074", "filename": "xtask/src/install.rs", "status": "modified", "additions": 24, "deletions": 22, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/59483c217662fc5d89ef9da1cb93760e14a48418/xtask%2Fsrc%2Finstall.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59483c217662fc5d89ef9da1cb93760e14a48418/xtask%2Fsrc%2Finstall.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Finstall.rs?ref=59483c217662fc5d89ef9da1cb93760e14a48418", "patch": "@@ -3,8 +3,7 @@\n use std::{env, path::PathBuf, str};\n \n use anyhow::{bail, format_err, Context, Result};\n-\n-use crate::not_bash::{pushd, run};\n+use xshell::{cmd, pushd};\n \n // Latest stable, feel free to send a PR if this lags behind.\n const REQUIRED_RUST_VERSION: u32 = 47;\n@@ -76,7 +75,7 @@ fn fix_path_for_mac() -> Result<()> {\n }\n \n fn install_client(ClientOpt::VsCode: ClientOpt) -> Result<()> {\n-    let _dir = pushd(\"./editors/code\");\n+    let _dir = pushd(\"./editors/code\")?;\n \n     let find_code = |f: fn(&str) -> bool| -> Result<&'static str> {\n         [\"code\", \"code-insiders\", \"codium\", \"code-oss\"]\n@@ -89,24 +88,25 @@ fn install_client(ClientOpt::VsCode: ClientOpt) -> Result<()> {\n     };\n \n     let installed_extensions = if cfg!(unix) {\n-        run!(\"npm --version\").context(\"`npm` is required to build the VS Code plugin\")?;\n-        run!(\"npm install\")?;\n+        cmd!(\"npm --version\").run().context(\"`npm` is required to build the VS Code plugin\")?;\n+        cmd!(\"npm install\").run()?;\n \n-        run!(\"npm run package --scripts-prepend-node-path\")?;\n+        cmd!(\"npm run package --scripts-prepend-node-path\").run()?;\n \n-        let code = find_code(|bin| run!(\"{} --version\", bin).is_ok())?;\n-        run!(\"{} --install-extension rust-analyzer.vsix --force\", code)?;\n-        run!(\"{} --list-extensions\", code; echo = false)?\n+        let code = find_code(|bin| cmd!(\"{bin} --version\").read().is_ok())?;\n+        cmd!(\"{code} --install-extension rust-analyzer.vsix --force\").run()?;\n+        cmd!(\"{code} --list-extensions\").read()?\n     } else {\n-        run!(\"cmd.exe /c npm --version\")\n+        cmd!(\"cmd.exe /c npm --version\")\n+            .run()\n             .context(\"`npm` is required to build the VS Code plugin\")?;\n-        run!(\"cmd.exe /c npm install\")?;\n+        cmd!(\"cmd.exe /c npm install\").run()?;\n \n-        run!(\"cmd.exe /c npm run package\")?;\n+        cmd!(\"cmd.exe /c npm run package\").run()?;\n \n-        let code = find_code(|bin| run!(\"cmd.exe /c {}.cmd --version\", bin).is_ok())?;\n-        run!(r\"cmd.exe /c {}.cmd --install-extension rust-analyzer.vsix --force\", code)?;\n-        run!(\"cmd.exe /c {}.cmd --list-extensions\", code; echo = false)?\n+        let code = find_code(|bin| cmd!(\"cmd.exe /c {bin}.cmd --version\").read().is_ok())?;\n+        cmd!(\"cmd.exe /c {code}.cmd --install-extension rust-analyzer.vsix --force\").run()?;\n+        cmd!(\"cmd.exe /c {code}.cmd --list-extensions\").read()?\n     };\n \n     if !installed_extensions.contains(\"rust-analyzer\") {\n@@ -122,7 +122,7 @@ fn install_client(ClientOpt::VsCode: ClientOpt) -> Result<()> {\n \n fn install_server(opts: ServerOpt) -> Result<()> {\n     let mut old_rust = false;\n-    if let Ok(stdout) = run!(\"cargo --version\") {\n+    if let Ok(stdout) = cmd!(\"cargo --version\").read() {\n         if !check_version(&stdout, REQUIRED_RUST_VERSION) {\n             old_rust = true;\n         }\n@@ -134,12 +134,13 @@ fn install_server(opts: ServerOpt) -> Result<()> {\n             REQUIRED_RUST_VERSION,\n         )\n     }\n-\n-    let malloc_feature = match opts.malloc {\n-        Malloc::System => \"\",\n-        Malloc::Mimalloc => \"--features mimalloc\",\n+    let features = match opts.malloc {\n+        Malloc::System => &[][..],\n+        Malloc::Mimalloc => &[\"--features\", \"mimalloc\"],\n     };\n-    let res = run!(\"cargo install --path crates/rust-analyzer --locked --force {}\", malloc_feature);\n+\n+    let cmd = cmd!(\"cargo install --path crates/rust-analyzer --locked --force {features...}\");\n+    let res = cmd.run();\n \n     if res.is_err() && old_rust {\n         eprintln!(\n@@ -148,7 +149,8 @@ fn install_server(opts: ServerOpt) -> Result<()> {\n         );\n     }\n \n-    res.map(drop)\n+    res?;\n+    Ok(())\n }\n \n fn check_version(version_output: &str, min_minor_version: u32) -> bool {"}, {"sha": "babec2dbd000f66f1f7b51edf67d15f71474b763", "filename": "xtask/src/lib.rs", "status": "modified", "additions": 28, "deletions": 24, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/59483c217662fc5d89ef9da1cb93760e14a48418/xtask%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59483c217662fc5d89ef9da1cb93760e14a48418/xtask%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Flib.rs?ref=59483c217662fc5d89ef9da1cb93760e14a48418", "patch": "@@ -2,7 +2,6 @@\n //!\n //! See https://github.com/matklad/cargo-xtask/\n \n-pub mod not_bash;\n pub mod codegen;\n mod ast_src;\n \n@@ -19,11 +18,9 @@ use std::{\n };\n \n use walkdir::{DirEntry, WalkDir};\n+use xshell::{cmd, pushd, pushenv};\n \n-use crate::{\n-    codegen::Mode,\n-    not_bash::{pushd, pushenv},\n-};\n+use crate::codegen::Mode;\n \n pub use anyhow::{bail, Context as _, Result};\n \n@@ -53,18 +50,19 @@ pub fn rust_files(path: &Path) -> impl Iterator<Item = PathBuf> {\n }\n \n pub fn run_rustfmt(mode: Mode) -> Result<()> {\n-    let _dir = pushd(project_root());\n+    let _dir = pushd(project_root())?;\n     let _e = pushenv(\"RUSTUP_TOOLCHAIN\", \"stable\");\n     ensure_rustfmt()?;\n-    match mode {\n-        Mode::Overwrite => run!(\"cargo fmt\"),\n-        Mode::Verify => run!(\"cargo fmt -- --check\"),\n-    }?;\n+    let check = match mode {\n+        Mode::Overwrite => &[][..],\n+        Mode::Verify => &[\"--\", \"--check\"],\n+    };\n+    cmd!(\"cargo fmt {check...}\").run()?;\n     Ok(())\n }\n \n fn ensure_rustfmt() -> Result<()> {\n-    let out = run!(\"rustfmt --version\")?;\n+    let out = cmd!(\"rustfmt --version\").read()?;\n     if !out.contains(\"stable\") {\n         bail!(\n             \"Failed to run rustfmt from toolchain 'stable'. \\\n@@ -75,40 +73,46 @@ fn ensure_rustfmt() -> Result<()> {\n }\n \n pub fn run_clippy() -> Result<()> {\n-    if run!(\"cargo clippy --version\").is_err() {\n+    if cmd!(\"cargo clippy --version\").read().is_err() {\n         bail!(\n             \"Failed run cargo clippy. \\\n             Please run `rustup component add clippy` to install it.\",\n         )\n     }\n \n-    let allowed_lints = [\n-        \"clippy::collapsible_if\",\n-        \"clippy::needless_pass_by_value\",\n-        \"clippy::nonminimal_bool\",\n-        \"clippy::redundant_pattern_matching\",\n-    ];\n-    run!(\"cargo clippy --all-features --all-targets -- -A {}\", allowed_lints.join(\" -A \"))?;\n+    let allowed_lints = \"\n+        -A clippy::collapsible_if\n+        -A clippy::needless_pass_by_value\n+        -A clippy::nonminimal_bool\n+        -A clippy::redundant_pattern_matching\n+    \"\n+    .split_ascii_whitespace();\n+    cmd!(\"cargo clippy --all-features --all-targets -- {allowed_lints...}\").run()?;\n     Ok(())\n }\n \n pub fn run_fuzzer() -> Result<()> {\n-    let _d = pushd(\"./crates/syntax\");\n+    let _d = pushd(\"./crates/syntax\")?;\n     let _e = pushenv(\"RUSTUP_TOOLCHAIN\", \"nightly\");\n-    if run!(\"cargo fuzz --help\").is_err() {\n-        run!(\"cargo install cargo-fuzz\")?;\n+    if cmd!(\"cargo fuzz --help\").read().is_err() {\n+        cmd!(\"cargo install cargo-fuzz\").run()?;\n     };\n \n     // Expecting nightly rustc\n-    let out = run!(\"rustc --version\")?;\n+    let out = cmd!(\"rustc --version\").read()?;\n     if !out.contains(\"nightly\") {\n         bail!(\"fuzz tests require nightly rustc\")\n     }\n \n-    run!(\"cargo fuzz run parser\")?;\n+    cmd!(\"cargo fuzz run parser\").run()?;\n     Ok(())\n }\n \n+fn date_iso() -> Result<String> {\n+    let res = cmd!(\"date --iso --utc\").read()?;\n+    Ok(res)\n+}\n+\n fn is_release_tag(tag: &str) -> bool {\n     tag.len() == \"2020-02-24\".len() && tag.starts_with(|c: char| c.is_ascii_digit())\n }"}, {"sha": "97e5dcd4e5bf7904bc0c2e7309ca5c7f029357e0", "filename": "xtask/src/main.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/59483c217662fc5d89ef9da1cb93760e14a48418/xtask%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59483c217662fc5d89ef9da1cb93760e14a48418/xtask%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fmain.rs?ref=59483c217662fc5d89ef9da1cb93760e14a48418", "patch": "@@ -12,12 +12,12 @@ use std::env;\n \n use codegen::CodegenCmd;\n use pico_args::Arguments;\n+use xshell::pushd;\n use xtask::{\n     codegen::{self, Mode},\n     dist::DistCmd,\n     install::{ClientOpt, InstallCmd, Malloc, ServerOpt},\n     metrics::MetricsCmd,\n-    not_bash::pushd,\n     pre_cache::PreCacheCmd,\n     pre_commit, project_root,\n     release::{PromoteCmd, ReleaseCmd},\n@@ -29,7 +29,7 @@ fn main() -> Result<()> {\n         return pre_commit::run_hook();\n     }\n \n-    let _d = pushd(project_root());\n+    let _d = pushd(project_root())?;\n \n     let mut args = Arguments::from_env();\n     let subcommand = args.subcommand()?.unwrap_or_default();"}, {"sha": "e0d1aaf97ded10d4fa71ffaaf6df44a614627660", "filename": "xtask/src/metrics.rs", "status": "modified", "additions": 21, "deletions": 18, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/59483c217662fc5d89ef9da1cb93760e14a48418/xtask%2Fsrc%2Fmetrics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59483c217662fc5d89ef9da1cb93760e14a48418/xtask%2Fsrc%2Fmetrics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fmetrics.rs?ref=59483c217662fc5d89ef9da1cb93760e14a48418", "patch": "@@ -7,8 +7,7 @@ use std::{\n };\n \n use anyhow::{bail, format_err, Result};\n-\n-use crate::not_bash::{fs2, pushd, pushenv, rm_rf, run};\n+use xshell::{cmd, mkdir_p, pushd, pushenv, read_file, rm_rf};\n \n type Unit = String;\n \n@@ -23,12 +22,13 @@ impl MetricsCmd {\n             rm_rf(\"./target/release\")?;\n         }\n         if !Path::new(\"./target/rustc-perf\").exists() {\n-            fs2::create_dir_all(\"./target/rustc-perf\")?;\n-            run!(\"git clone https://github.com/rust-lang/rustc-perf.git ./target/rustc-perf\")?;\n+            mkdir_p(\"./target/rustc-perf\")?;\n+            cmd!(\"git clone https://github.com/rust-lang/rustc-perf.git ./target/rustc-perf\")\n+                .run()?;\n         }\n         {\n-            let _d = pushd(\"./target/rustc-perf\");\n-            run!(\"git reset --hard 1d9288b0da7febf2599917da1b57dc241a1af033\")?;\n+            let _d = pushd(\"./target/rustc-perf\")?;\n+            cmd!(\"git reset --hard 1d9288b0da7febf2599917da1b57dc241a1af033\").run()?;\n         }\n \n         let _env = pushenv(\"RA_METRICS\", \"1\");\n@@ -39,17 +39,20 @@ impl MetricsCmd {\n         metrics.measure_analysis_stats(\"webrender\")?;\n \n         if !self.dry_run {\n-            let _d = pushd(\"target\");\n+            let _d = pushd(\"target\")?;\n             let metrics_token = env::var(\"METRICS_TOKEN\").unwrap();\n-            let repo = format!(\"https://{}@github.com/rust-analyzer/metrics.git\", metrics_token);\n-            run!(\"git clone --depth 1 {}\", repo)?;\n-            let _d = pushd(\"metrics\");\n+            cmd!(\n+                \"git clone --depth 1 https://{metrics_token}@github.com/rust-analyzer/metrics.git\"\n+            )\n+            .run()?;\n+            let _d = pushd(\"metrics\")?;\n \n             let mut file = std::fs::OpenOptions::new().append(true).open(\"metrics.json\")?;\n             writeln!(file, \"{}\", metrics.json())?;\n-            run!(\"git add .\")?;\n-            run!(\"git -c user.name=Bot -c user.email=dummy@example.com commit --message \ud83d\udcc8\")?;\n-            run!(\"git push origin master\")?;\n+            cmd!(\"git add .\").run()?;\n+            cmd!(\"git -c user.name=Bot -c user.email=dummy@example.com commit --message \ud83d\udcc8\")\n+                .run()?;\n+            cmd!(\"git push origin master\").run()?;\n         }\n         eprintln!(\"{:#?}\", metrics);\n         Ok(())\n@@ -59,10 +62,10 @@ impl MetricsCmd {\n impl Metrics {\n     fn measure_build(&mut self) -> Result<()> {\n         eprintln!(\"\\nMeasuring build\");\n-        run!(\"cargo fetch\")?;\n+        cmd!(\"cargo fetch\").run()?;\n \n         let time = Instant::now();\n-        run!(\"cargo build --release --package rust-analyzer --bin rust-analyzer\")?;\n+        cmd!(\"cargo build --release --package rust-analyzer --bin rust-analyzer\").run()?;\n         let time = time.elapsed();\n         self.report(\"build\", time.as_millis() as u64, \"ms\".into());\n         Ok(())\n@@ -78,7 +81,7 @@ impl Metrics {\n     }\n     fn measure_analysis_stats_path(&mut self, name: &str, path: &str) -> Result<()> {\n         eprintln!(\"\\nMeasuring analysis-stats/{}\", name);\n-        let output = run!(\"./target/release/rust-analyzer analysis-stats --quiet {}\", path)?;\n+        let output = cmd!(\"./target/release/rust-analyzer analysis-stats --quiet {path}\").read()?;\n         for (metric, value, unit) in parse_metrics(&output) {\n             self.report(&format!(\"analysis-stats/{}/{}\", name, metric), value, unit.into());\n         }\n@@ -118,7 +121,7 @@ impl Metrics {\n     fn new() -> Result<Metrics> {\n         let host = Host::new()?;\n         let timestamp = SystemTime::now();\n-        let revision = run!(\"git rev-parse HEAD\")?;\n+        let revision = cmd!(\"git rev-parse HEAD\").read()?;\n         Ok(Metrics { host, timestamp, revision, metrics: BTreeMap::new() })\n     }\n \n@@ -160,7 +163,7 @@ impl Host {\n         return Ok(Host { os, cpu, mem });\n \n         fn read_field<'a>(path: &str, field: &str) -> Result<String> {\n-            let text = fs2::read_to_string(path)?;\n+            let text = read_file(path)?;\n \n             let line = text\n                 .lines()"}, {"sha": "038898993ac046cea756fefa0851b02d379d19ab", "filename": "xtask/src/not_bash.rs", "status": "removed", "additions": 0, "deletions": 169, "changes": 169, "blob_url": "https://github.com/rust-lang/rust/blob/f0412da4a2c06e50030d13e37002d0440fc7cded/xtask%2Fsrc%2Fnot_bash.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0412da4a2c06e50030d13e37002d0440fc7cded/xtask%2Fsrc%2Fnot_bash.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fnot_bash.rs?ref=f0412da4a2c06e50030d13e37002d0440fc7cded", "patch": "@@ -1,169 +0,0 @@\n-//! A bad shell -- small cross platform module for writing glue code\n-\n-use std::{\n-    cell::RefCell,\n-    env,\n-    ffi::OsString,\n-    io::{self, Write},\n-    path::{Path, PathBuf},\n-    process::{Command, Stdio},\n-};\n-\n-use anyhow::{bail, Context, Result};\n-\n-pub use fs_err as fs2;\n-\n-#[macro_export]\n-macro_rules! run {\n-    ($($expr:expr),*) => {\n-        run!($($expr),*; echo = true)\n-    };\n-    ($($expr:expr),* ; echo = $echo:expr) => {\n-        $crate::not_bash::run_process(format!($($expr),*), $echo, None)\n-    };\n-    ($($expr:expr),* ;  <$stdin:expr) => {\n-        $crate::not_bash::run_process(format!($($expr),*), false, Some($stdin))\n-    };\n-}\n-pub use crate::run;\n-\n-pub struct Pushd {\n-    _p: (),\n-}\n-\n-pub fn pushd(path: impl Into<PathBuf>) -> Pushd {\n-    Env::with(|env| env.pushd(path.into()));\n-    Pushd { _p: () }\n-}\n-\n-impl Drop for Pushd {\n-    fn drop(&mut self) {\n-        Env::with(|env| env.popd())\n-    }\n-}\n-\n-pub struct Pushenv {\n-    _p: (),\n-}\n-\n-pub fn pushenv(var: &str, value: &str) -> Pushenv {\n-    Env::with(|env| env.pushenv(var.into(), value.into()));\n-    Pushenv { _p: () }\n-}\n-\n-impl Drop for Pushenv {\n-    fn drop(&mut self) {\n-        Env::with(|env| env.popenv())\n-    }\n-}\n-\n-pub fn rm_rf(path: impl AsRef<Path>) -> io::Result<()> {\n-    let path = path.as_ref();\n-    if !path.exists() {\n-        return Ok(());\n-    }\n-    if path.is_file() {\n-        fs2::remove_file(path)\n-    } else {\n-        fs2::remove_dir_all(path)\n-    }\n-}\n-\n-#[doc(hidden)]\n-pub fn run_process(cmd: String, echo: bool, stdin: Option<&[u8]>) -> Result<String> {\n-    run_process_inner(&cmd, echo, stdin).with_context(|| format!(\"process `{}` failed\", cmd))\n-}\n-\n-pub fn date_iso() -> Result<String> {\n-    run!(\"date --iso --utc\")\n-}\n-\n-fn run_process_inner(cmd: &str, echo: bool, stdin: Option<&[u8]>) -> Result<String> {\n-    let mut args = shelx(cmd);\n-    let binary = args.remove(0);\n-    let current_dir = Env::with(|it| it.cwd().to_path_buf());\n-\n-    if echo {\n-        println!(\"> {}\", cmd)\n-    }\n-\n-    let mut command = Command::new(binary);\n-    command.args(args).current_dir(current_dir).stderr(Stdio::inherit());\n-    let output = match stdin {\n-        None => command.stdin(Stdio::null()).output(),\n-        Some(stdin) => {\n-            command.stdin(Stdio::piped()).stdout(Stdio::piped());\n-            let mut process = command.spawn()?;\n-            process.stdin.take().unwrap().write_all(stdin)?;\n-            process.wait_with_output()\n-        }\n-    }?;\n-    let stdout = String::from_utf8(output.stdout)?;\n-\n-    if echo {\n-        print!(\"{}\", stdout)\n-    }\n-\n-    if !output.status.success() {\n-        bail!(\"{}\", output.status)\n-    }\n-\n-    Ok(stdout.trim().to_string())\n-}\n-\n-// FIXME: some real shell lexing here\n-fn shelx(cmd: &str) -> Vec<String> {\n-    let mut res = Vec::new();\n-    for (string_piece, in_quotes) in cmd.split('\\'').zip([false, true].iter().copied().cycle()) {\n-        if in_quotes {\n-            res.push(string_piece.to_string())\n-        } else {\n-            if !string_piece.is_empty() {\n-                res.extend(string_piece.split_ascii_whitespace().map(|it| it.to_string()))\n-            }\n-        }\n-    }\n-    res\n-}\n-\n-struct Env {\n-    pushd_stack: Vec<PathBuf>,\n-    pushenv_stack: Vec<(OsString, Option<OsString>)>,\n-}\n-\n-impl Env {\n-    fn with<F: FnOnce(&mut Env) -> T, T>(f: F) -> T {\n-        thread_local! {\n-            static ENV: RefCell<Env> = RefCell::new(Env {\n-                pushd_stack: vec![env::current_dir().unwrap()],\n-                pushenv_stack: vec![],\n-            });\n-        }\n-        ENV.with(|it| f(&mut *it.borrow_mut()))\n-    }\n-\n-    fn pushd(&mut self, dir: PathBuf) {\n-        let dir = self.cwd().join(dir);\n-        self.pushd_stack.push(dir);\n-        env::set_current_dir(self.cwd())\n-            .unwrap_or_else(|err| panic!(\"Failed to set cwd to {}: {}\", self.cwd().display(), err));\n-    }\n-    fn popd(&mut self) {\n-        self.pushd_stack.pop().unwrap();\n-        env::set_current_dir(self.cwd()).unwrap();\n-    }\n-    fn pushenv(&mut self, var: OsString, value: OsString) {\n-        self.pushenv_stack.push((var.clone(), env::var_os(&var)));\n-        env::set_var(var, value)\n-    }\n-    fn popenv(&mut self) {\n-        let (var, value) = self.pushenv_stack.pop().unwrap();\n-        match value {\n-            None => env::remove_var(var),\n-            Some(value) => env::set_var(var, value),\n-        }\n-    }\n-    fn cwd(&self) -> &Path {\n-        self.pushd_stack.last().unwrap()\n-    }\n-}"}, {"sha": "569f88f68f030cf15dfe5865c0c4a95f19d98ee9", "filename": "xtask/src/pre_cache.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/59483c217662fc5d89ef9da1cb93760e14a48418/xtask%2Fsrc%2Fpre_cache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59483c217662fc5d89ef9da1cb93760e14a48418/xtask%2Fsrc%2Fpre_cache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fpre_cache.rs?ref=59483c217662fc5d89ef9da1cb93760e14a48418", "patch": "@@ -4,8 +4,7 @@ use std::{\n };\n \n use anyhow::Result;\n-\n-use crate::not_bash::{fs2, rm_rf};\n+use xshell::rm_rf;\n \n pub struct PreCacheCmd;\n \n@@ -26,7 +25,7 @@ impl PreCacheCmd {\n             }\n         }\n \n-        fs2::remove_file(\"./target/.rustc_info.json\")?;\n+        rm_rf(\"./target/.rustc_info.json\")?;\n \n         let to_delete = read_dir(\"./crates\", FileType::is_dir)?\n             .into_iter()"}, {"sha": "8f2dbea19a0c7071ac504c85c37ca5746f4ee3bb", "filename": "xtask/src/pre_commit.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/59483c217662fc5d89ef9da1cb93760e14a48418/xtask%2Fsrc%2Fpre_commit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59483c217662fc5d89ef9da1cb93760e14a48418/xtask%2Fsrc%2Fpre_commit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fpre_commit.rs?ref=59483c217662fc5d89ef9da1cb93760e14a48418", "patch": "@@ -3,19 +3,21 @@\n use std::{fs, path::PathBuf};\n \n use anyhow::{bail, Result};\n+use xshell::cmd;\n \n-use crate::{not_bash::run, project_root, run_rustfmt, Mode};\n+use crate::{project_root, run_rustfmt, Mode};\n \n // FIXME: if there are changed `.ts` files, also reformat TypeScript (by\n // shelling out to `npm fmt`).\n pub fn run_hook() -> Result<()> {\n     run_rustfmt(Mode::Overwrite)?;\n \n-    let diff = run!(\"git diff --diff-filter=MAR --name-only --cached\")?;\n+    let diff = cmd!(\"git diff --diff-filter=MAR --name-only --cached\").read()?;\n \n     let root = project_root();\n     for line in diff.lines() {\n-        run!(\"git update-index --add {}\", root.join(line).display())?;\n+        let file = root.join(line);\n+        cmd!(\"git update-index --add {file}\").run()?;\n     }\n \n     Ok(())"}, {"sha": "14fc1f0ddf47b4dcfe6c2b17c22759bd667fa4f5", "filename": "xtask/src/release.rs", "status": "modified", "additions": 28, "deletions": 32, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/59483c217662fc5d89ef9da1cb93760e14a48418/xtask%2Fsrc%2Frelease.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59483c217662fc5d89ef9da1cb93760e14a48418/xtask%2Fsrc%2Frelease.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Frelease.rs?ref=59483c217662fc5d89ef9da1cb93760e14a48418", "patch": "@@ -1,8 +1,6 @@\n-use crate::{\n-    codegen, is_release_tag,\n-    not_bash::{date_iso, fs2, pushd, run},\n-    project_root, Mode, Result,\n-};\n+use xshell::{cmd, cp, pushd, read_dir, write_file};\n+\n+use crate::{codegen, date_iso, is_release_tag, project_root, Mode, Result};\n \n pub struct ReleaseCmd {\n     pub dry_run: bool,\n@@ -11,10 +9,10 @@ pub struct ReleaseCmd {\n impl ReleaseCmd {\n     pub fn run(self) -> Result<()> {\n         if !self.dry_run {\n-            run!(\"git switch release\")?;\n-            run!(\"git fetch upstream --tags --force\")?;\n-            run!(\"git reset --hard tags/nightly\")?;\n-            run!(\"git push\")?;\n+            cmd!(\"git switch release\").run()?;\n+            cmd!(\"git fetch upstream --tags --force\").run()?;\n+            cmd!(\"git reset --hard tags/nightly\").run()?;\n+            cmd!(\"git push\").run()?;\n         }\n         codegen::generate_assists_docs(Mode::Overwrite)?;\n         codegen::generate_feature_docs(Mode::Overwrite)?;\n@@ -23,8 +21,8 @@ impl ReleaseCmd {\n         let changelog_dir = website_root.join(\"./thisweek/_posts\");\n \n         let today = date_iso()?;\n-        let commit = run!(\"git rev-parse HEAD\")?;\n-        let changelog_n = fs2::read_dir(changelog_dir.as_path())?.count();\n+        let commit = cmd!(\"git rev-parse HEAD\").read()?;\n+        let changelog_n = read_dir(changelog_dir.as_path())?.len();\n \n         let contents = format!(\n             \"\\\n@@ -52,20 +50,20 @@ https://github.com/sponsors/rust-analyzer[GitHub Sponsors].\n         );\n \n         let path = changelog_dir.join(format!(\"{}-changelog-{}.adoc\", today, changelog_n));\n-        fs2::write(&path, &contents)?;\n+        write_file(&path, &contents)?;\n \n         for &adoc in [\"manual.adoc\", \"generated_features.adoc\", \"generated_assists.adoc\"].iter() {\n             let src = project_root().join(\"./docs/user/\").join(adoc);\n             let dst = website_root.join(adoc);\n-            fs2::copy(src, dst)?;\n+            cp(src, dst)?;\n         }\n \n-        let tags = run!(\"git tag --list\"; echo = false)?;\n+        let tags = cmd!(\"git tag --list\").read()?;\n         let prev_tag = tags.lines().filter(|line| is_release_tag(line)).last().unwrap();\n \n-        let git_log = run!(\"git log {}..HEAD --merges --reverse\", prev_tag; echo = false)?;\n+        let git_log = cmd!(\"git log {prev_tag}..HEAD --merges --reverse\").read()?;\n         let git_log_dst = website_root.join(\"git.log\");\n-        fs2::write(git_log_dst, &git_log)?;\n+        write_file(git_log_dst, &git_log)?;\n \n         Ok(())\n     }\n@@ -77,27 +75,25 @@ pub struct PromoteCmd {\n \n impl PromoteCmd {\n     pub fn run(self) -> Result<()> {\n-        let _dir = pushd(\"../rust-rust-analyzer\");\n-        run!(\"git switch master\")?;\n-        run!(\"git fetch upstream\")?;\n-        run!(\"git reset --hard upstream/master\")?;\n-        run!(\"git submodule update --recursive\")?;\n+        let _dir = pushd(\"../rust-rust-analyzer\")?;\n+        cmd!(\"git switch master\").run()?;\n+        cmd!(\"git fetch upstream\").run()?;\n+        cmd!(\"git reset --hard upstream/master\").run()?;\n+        cmd!(\"git submodule update --recursive\").run()?;\n \n         let branch = format!(\"rust-analyzer-{}\", date_iso()?);\n-        run!(\"git switch -c {}\", branch)?;\n+        cmd!(\"git switch -c {branch}\").run()?;\n         {\n-            let _dir = pushd(\"src/tools/rust-analyzer\");\n-            run!(\"git fetch origin\")?;\n-            run!(\"git reset --hard origin/release\")?;\n+            let _dir = pushd(\"src/tools/rust-analyzer\")?;\n+            cmd!(\"git fetch origin\").run()?;\n+            cmd!(\"git reset --hard origin/release\").run()?;\n         }\n-        run!(\"git add src/tools/rust-analyzer\")?;\n-        run!(\"git commit -m':arrow_up: rust-analyzer'\")?;\n+        cmd!(\"git add src/tools/rust-analyzer\").run()?;\n+        cmd!(\"git commit -m':arrow_up: rust-analyzer'\").run()?;\n         if !self.dry_run {\n-            run!(\"git push\")?;\n-            run!(\n-                \"xdg-open https://github.com/matklad/rust/pull/new/{}?body=r%3F%20%40ghost\",\n-                branch\n-            )?;\n+            cmd!(\"git push\").run()?;\n+            cmd!(\"xdg-open https://github.com/matklad/rust/pull/new/{branch}?body=r%3F%20%40ghost\")\n+                .run()?;\n         }\n         Ok(())\n     }"}, {"sha": "d335adb72b3ff45085c4e51bf77eb2213dffe620", "filename": "xtask/tests/tidy.rs", "status": "modified", "additions": 28, "deletions": 8, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/59483c217662fc5d89ef9da1cb93760e14a48418/xtask%2Ftests%2Ftidy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59483c217662fc5d89ef9da1cb93760e14a48418/xtask%2Ftests%2Ftidy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Ftests%2Ftidy.rs?ref=59483c217662fc5d89ef9da1cb93760e14a48418", "patch": "@@ -3,9 +3,9 @@ use std::{\n     path::{Path, PathBuf},\n };\n \n+use xshell::{cmd, read_file};\n use xtask::{\n     codegen::{self, Mode},\n-    not_bash::{fs2, run},\n     project_root, run_rustfmt, rust_files,\n };\n \n@@ -48,14 +48,13 @@ fn smoke_test_docs_generation() {\n fn check_lsp_extensions_docs() {\n     let expected_hash = {\n         let lsp_ext_rs =\n-            fs2::read_to_string(project_root().join(\"crates/rust-analyzer/src/lsp_ext.rs\"))\n-                .unwrap();\n+            read_file(project_root().join(\"crates/rust-analyzer/src/lsp_ext.rs\")).unwrap();\n         stable_hash(lsp_ext_rs.as_str())\n     };\n \n     let actual_hash = {\n         let lsp_extensions_md =\n-            fs2::read_to_string(project_root().join(\"docs/dev/lsp-extensions.md\")).unwrap();\n+            read_file(project_root().join(\"docs/dev/lsp-extensions.md\")).unwrap();\n         let text = lsp_extensions_md\n             .lines()\n             .find_map(|line| line.strip_prefix(\"lsp_ext.rs hash:\"))\n@@ -83,7 +82,7 @@ Please adjust docs/dev/lsp-extensions.md.\n fn rust_files_are_tidy() {\n     let mut tidy_docs = TidyDocs::default();\n     for path in rust_files(&project_root().join(\"crates\")) {\n-        let text = fs2::read_to_string(&path).unwrap();\n+        let text = read_file(&path).unwrap();\n         check_todo(&path, &text);\n         check_trailing_ws(&path, &text);\n         deny_clippy(&path, &text);\n@@ -94,8 +93,10 @@ fn rust_files_are_tidy() {\n \n #[test]\n fn check_merge_commits() {\n-    let stdout = run!(\"git rev-list --merges --invert-grep --author 'bors\\\\[bot\\\\]' HEAD~19..\"; echo = false)\n-        .unwrap();\n+    let stdout =\n+        dbg!(cmd!(\"git rev-list --merges --invert-grep --author 'bors\\\\[bot\\\\]' HEAD~19..\"))\n+            .read()\n+            .unwrap();\n     if !stdout.is_empty() {\n         panic!(\n             \"\n@@ -168,7 +169,7 @@ Zlib OR Apache-2.0 OR MIT\n     .filter(|it| !it.is_empty())\n     .collect::<Vec<_>>();\n \n-    let meta = run!(\"cargo metadata --format-version 1\"; echo = false).unwrap();\n+    let meta = cmd!(\"cargo metadata --format-version 1\").read().unwrap();\n     let mut licenses = meta\n         .split(|c| c == ',' || c == '{' || c == '}')\n         .filter(|it| it.contains(r#\"\"license\"\"#))\n@@ -177,6 +178,25 @@ Zlib OR Apache-2.0 OR MIT\n         .collect::<Vec<_>>();\n     licenses.sort();\n     licenses.dedup();\n+    if licenses != expected {\n+        let mut diff = String::new();\n+\n+        diff += &format!(\"New Licenses:\\n\");\n+        for &l in licenses.iter() {\n+            if !expected.contains(&l) {\n+                diff += &format!(\"  {}\\n\", l)\n+            }\n+        }\n+\n+        diff += &format!(\"\\nMissing Licenses:\\n\");\n+        for &l in expected.iter() {\n+            if !licenses.contains(&l) {\n+                diff += &format!(\"  {}\\n\", l)\n+            }\n+        }\n+\n+        panic!(\"different set of licenses!\\n{}\", diff);\n+    }\n     assert_eq!(licenses, expected);\n }\n "}]}