{"sha": "c0b2411f06a417266baaac2f0ea431138da33bf3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMwYjI0MTFmMDZhNDE3MjY2YmFhYWMyZjBlYTQzMTEzOGRhMzNiZjM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-10-18T10:32:01Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-10-18T10:32:01Z"}, "message": "Auto merge of #4657 - Licenser:additional-restrictions, r=flip1995\n\nAdditional restrictions\n\nAdd restriction lints for `panic!`, `unreachable!`, `todo!` and `.expect(...)`\n\nchangelog: Add 5 new `restriction` lints: `panic`, `unreachable`, `todo`, `option_expect_used`, `result_expect_used`", "tree": {"sha": "a5a35a8721abc043808d97a2415d9e7409aa6c69", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a5a35a8721abc043808d97a2415d9e7409aa6c69"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c0b2411f06a417266baaac2f0ea431138da33bf3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c0b2411f06a417266baaac2f0ea431138da33bf3", "html_url": "https://github.com/rust-lang/rust/commit/c0b2411f06a417266baaac2f0ea431138da33bf3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c0b2411f06a417266baaac2f0ea431138da33bf3/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ee6fc1bead1d81dfce866e23d4c5a88770e40cf3", "url": "https://api.github.com/repos/rust-lang/rust/commits/ee6fc1bead1d81dfce866e23d4c5a88770e40cf3", "html_url": "https://github.com/rust-lang/rust/commit/ee6fc1bead1d81dfce866e23d4c5a88770e40cf3"}, {"sha": "7f454d8d06279663a330cfc4c9248056c402acd1", "url": "https://api.github.com/repos/rust-lang/rust/commits/7f454d8d06279663a330cfc4c9248056c402acd1", "html_url": "https://github.com/rust-lang/rust/commit/7f454d8d06279663a330cfc4c9248056c402acd1"}], "stats": {"total": 381, "additions": 342, "deletions": 39}, "files": [{"sha": "ef21695cbab1c8de217365a52500cca767c4a27b", "filename": "CHANGELOG.md", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c0b2411f06a417266baaac2f0ea431138da33bf3/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/c0b2411f06a417266baaac2f0ea431138da33bf3/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=c0b2411f06a417266baaac2f0ea431138da33bf3", "patch": "@@ -1129,6 +1129,7 @@ Released 2018-09-13\n [`ok_expect`]: https://rust-lang.github.io/rust-clippy/master/index.html#ok_expect\n [`op_ref`]: https://rust-lang.github.io/rust-clippy/master/index.html#op_ref\n [`option_and_then_some`]: https://rust-lang.github.io/rust-clippy/master/index.html#option_and_then_some\n+[`option_expect_used`]: https://rust-lang.github.io/rust-clippy/master/index.html#option_expect_used\n [`option_map_or_none`]: https://rust-lang.github.io/rust-clippy/master/index.html#option_map_or_none\n [`option_map_unit_fn`]: https://rust-lang.github.io/rust-clippy/master/index.html#option_map_unit_fn\n [`option_map_unwrap_or`]: https://rust-lang.github.io/rust-clippy/master/index.html#option_map_unwrap_or\n@@ -1138,6 +1139,7 @@ Released 2018-09-13\n [`or_fun_call`]: https://rust-lang.github.io/rust-clippy/master/index.html#or_fun_call\n [`out_of_bounds_indexing`]: https://rust-lang.github.io/rust-clippy/master/index.html#out_of_bounds_indexing\n [`overflow_check_conditional`]: https://rust-lang.github.io/rust-clippy/master/index.html#overflow_check_conditional\n+[`panic`]: https://rust-lang.github.io/rust-clippy/master/index.html#panic\n [`panic_params`]: https://rust-lang.github.io/rust-clippy/master/index.html#panic_params\n [`panicking_unwrap`]: https://rust-lang.github.io/rust-clippy/master/index.html#panicking_unwrap\n [`partialeq_ne_impl`]: https://rust-lang.github.io/rust-clippy/master/index.html#partialeq_ne_impl\n@@ -1167,6 +1169,7 @@ Released 2018-09-13\n [`ref_in_deref`]: https://rust-lang.github.io/rust-clippy/master/index.html#ref_in_deref\n [`regex_macro`]: https://rust-lang.github.io/rust-clippy/master/index.html#regex_macro\n [`replace_consts`]: https://rust-lang.github.io/rust-clippy/master/index.html#replace_consts\n+[`result_expect_used`]: https://rust-lang.github.io/rust-clippy/master/index.html#result_expect_used\n [`result_map_unit_fn`]: https://rust-lang.github.io/rust-clippy/master/index.html#result_map_unit_fn\n [`result_map_unwrap_or_else`]: https://rust-lang.github.io/rust-clippy/master/index.html#result_map_unwrap_or_else\n [`result_unwrap_used`]: https://rust-lang.github.io/rust-clippy/master/index.html#result_unwrap_used\n@@ -1198,6 +1201,7 @@ Released 2018-09-13\n [`suspicious_unary_op_formatting`]: https://rust-lang.github.io/rust-clippy/master/index.html#suspicious_unary_op_formatting\n [`temporary_assignment`]: https://rust-lang.github.io/rust-clippy/master/index.html#temporary_assignment\n [`temporary_cstring_as_ptr`]: https://rust-lang.github.io/rust-clippy/master/index.html#temporary_cstring_as_ptr\n+[`todo`]: https://rust-lang.github.io/rust-clippy/master/index.html#todo\n [`too_many_arguments`]: https://rust-lang.github.io/rust-clippy/master/index.html#too_many_arguments\n [`too_many_lines`]: https://rust-lang.github.io/rust-clippy/master/index.html#too_many_lines\n [`toplevel_ref_arg`]: https://rust-lang.github.io/rust-clippy/master/index.html#toplevel_ref_arg\n@@ -1227,6 +1231,7 @@ Released 2018-09-13\n [`unnecessary_unwrap`]: https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_unwrap\n [`unneeded_field_pattern`]: https://rust-lang.github.io/rust-clippy/master/index.html#unneeded_field_pattern\n [`unneeded_wildcard_pattern`]: https://rust-lang.github.io/rust-clippy/master/index.html#unneeded_wildcard_pattern\n+[`unreachable`]: https://rust-lang.github.io/rust-clippy/master/index.html#unreachable\n [`unreadable_literal`]: https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal\n [`unsafe_removed_from_name`]: https://rust-lang.github.io/rust-clippy/master/index.html#unsafe_removed_from_name\n [`unsafe_vector_initialization`]: https://rust-lang.github.io/rust-clippy/master/index.html#unsafe_vector_initialization"}, {"sha": "41b8b4199ec5d3203997092d991919072572244a", "filename": "README.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c0b2411f06a417266baaac2f0ea431138da33bf3/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/c0b2411f06a417266baaac2f0ea431138da33bf3/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=c0b2411f06a417266baaac2f0ea431138da33bf3", "patch": "@@ -6,7 +6,7 @@\n \n A collection of lints to catch common mistakes and improve your [Rust](https://github.com/rust-lang/rust) code.\n \n-[There are 326 lints included in this crate!](https://rust-lang.github.io/rust-clippy/master/index.html)\n+[There are 331 lints included in this crate!](https://rust-lang.github.io/rust-clippy/master/index.html)\n \n We have a bunch of lint categories to allow you to choose how much Clippy is supposed to ~~annoy~~ help you:\n "}, {"sha": "bff1952cce77956bd6b3f04759ad6d073c08662f", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c0b2411f06a417266baaac2f0ea431138da33bf3/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0b2411f06a417266baaac2f0ea431138da33bf3/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=c0b2411f06a417266baaac2f0ea431138da33bf3", "patch": "@@ -625,13 +625,18 @@ pub fn register_plugins(reg: &mut rustc_driver::plugin::Registry<'_>, conf: &Con\n         mem_forget::MEM_FORGET,\n         methods::CLONE_ON_REF_PTR,\n         methods::GET_UNWRAP,\n+        methods::OPTION_EXPECT_USED,\n         methods::OPTION_UNWRAP_USED,\n+        methods::RESULT_EXPECT_USED,\n         methods::RESULT_UNWRAP_USED,\n         methods::WRONG_PUB_SELF_CONVENTION,\n         misc::FLOAT_CMP_CONST,\n         missing_doc::MISSING_DOCS_IN_PRIVATE_ITEMS,\n         missing_inline::MISSING_INLINE_IN_PUBLIC_ITEMS,\n+        panic_unimplemented::PANIC,\n+        panic_unimplemented::TODO,\n         panic_unimplemented::UNIMPLEMENTED,\n+        panic_unimplemented::UNREACHABLE,\n         shadow::SHADOW_REUSE,\n         shadow::SHADOW_SAME,\n         strings::STRING_ADD,"}, {"sha": "74538164f8e9250171e84387f713725bc667eb35", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 88, "deletions": 1, "changes": 89, "blob_url": "https://github.com/rust-lang/rust/blob/c0b2411f06a417266baaac2f0ea431138da33bf3/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0b2411f06a417266baaac2f0ea431138da33bf3/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=c0b2411f06a417266baaac2f0ea431138da33bf3", "patch": "@@ -73,7 +73,7 @@ declare_clippy_lint! {\n     /// **Known problems:** None.\n     ///\n     /// **Example:**\n-    /// Using unwrap on an `Option`:\n+    /// Using unwrap on an `Result`:\n     ///\n     /// ```rust\n     /// let res: Result<usize, ()> = Ok(1);\n@@ -91,6 +91,65 @@ declare_clippy_lint! {\n     \"using `Result.unwrap()`, which might be better handled\"\n }\n \n+declare_clippy_lint! {\n+    /// **What it does:** Checks for `.expect()` calls on `Option`s.\n+    ///\n+    /// **Why is this bad?** Usually it is better to handle the `None` case. Still,\n+    ///  for a lot of quick-and-dirty code, `expect` is a good choice, which is why\n+    ///  this lint is `Allow` by default.\n+    ///\n+    /// **Known problems:** None.\n+    ///\n+    /// **Example:**\n+    ///\n+    /// Using expect on an `Option`:\n+    ///\n+    /// ```rust\n+    /// let opt = Some(1);\n+    /// opt.expect(\"one\");\n+    /// ```\n+    ///\n+    /// Better:\n+    ///\n+    /// ```ignore\n+    /// let opt = Some(1);\n+    /// opt?;\n+    /// # Some::<()>(())\n+    /// ```\n+    pub OPTION_EXPECT_USED,\n+    restriction,\n+    \"using `Option.expect()`, which might be better handled\"\n+}\n+\n+declare_clippy_lint! {\n+    /// **What it does:** Checks for `.expect()` calls on `Result`s.\n+    ///\n+    /// **Why is this bad?** `result.expect()` will let the thread panic on `Err`\n+    /// values. Normally, you want to implement more sophisticated error handling,\n+    /// and propagate errors upwards with `try!`.\n+    ///\n+    /// **Known problems:** None.\n+    ///\n+    /// **Example:**\n+    /// Using expect on an `Result`:\n+    ///\n+    /// ```rust\n+    /// let res: Result<usize, ()> = Ok(1);\n+    /// res.expect(\"one\");\n+    /// ```\n+    ///\n+    /// Better:\n+    ///\n+    /// ```\n+    /// let res: Result<usize, ()> = Ok(1);\n+    /// res?;\n+    /// # Ok::<(), ()>(())\n+    /// ```\n+    pub RESULT_EXPECT_USED,\n+    restriction,\n+    \"using `Result.expect()`, which might be better handled\"\n+}\n+\n declare_clippy_lint! {\n     /// **What it does:** Checks for methods that should live in a trait\n     /// implementation of a `std` trait (see [llogiq's blog\n@@ -1037,6 +1096,8 @@ declare_clippy_lint! {\n declare_lint_pass!(Methods => [\n     OPTION_UNWRAP_USED,\n     RESULT_UNWRAP_USED,\n+    OPTION_EXPECT_USED,\n+    RESULT_EXPECT_USED,\n     SHOULD_IMPLEMENT_TRAIT,\n     WRONG_SELF_CONVENTION,\n     WRONG_PUB_SELF_CONVENTION,\n@@ -1095,6 +1156,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Methods {\n             [\"unwrap\", \"get_mut\"] => lint_get_unwrap(cx, expr, arg_lists[1], true),\n             [\"unwrap\", ..] => lint_unwrap(cx, expr, arg_lists[0]),\n             [\"expect\", \"ok\"] => lint_ok_expect(cx, expr, arg_lists[1]),\n+            [\"expect\", ..] => lint_expect(cx, expr, arg_lists[0]),\n             [\"unwrap_or\", \"map\"] => option_map_unwrap_or::lint(cx, expr, arg_lists[1], arg_lists[0]),\n             [\"unwrap_or_else\", \"map\"] => lint_map_unwrap_or_else(cx, expr, arg_lists[1], arg_lists[0]),\n             [\"map_or\", ..] => lint_map_or_none(cx, expr, arg_lists[0]),\n@@ -2063,6 +2125,31 @@ fn lint_unwrap(cx: &LateContext<'_, '_>, expr: &hir::Expr, unwrap_args: &[hir::E\n     }\n }\n \n+/// lint use of `expect()` for `Option`s and `Result`s\n+fn lint_expect(cx: &LateContext<'_, '_>, expr: &hir::Expr, expect_args: &[hir::Expr]) {\n+    let obj_ty = walk_ptrs_ty(cx.tables.expr_ty(&expect_args[0]));\n+\n+    let mess = if match_type(cx, obj_ty, &paths::OPTION) {\n+        Some((OPTION_EXPECT_USED, \"an Option\", \"None\"))\n+    } else if match_type(cx, obj_ty, &paths::RESULT) {\n+        Some((RESULT_EXPECT_USED, \"a Result\", \"Err\"))\n+    } else {\n+        None\n+    };\n+\n+    if let Some((lint, kind, none_value)) = mess {\n+        span_lint(\n+            cx,\n+            lint,\n+            expr.span,\n+            &format!(\n+                \"used expect() on {} value. If this value is an {} it will panic\",\n+                kind, none_value\n+            ),\n+        );\n+    }\n+}\n+\n /// lint use of `ok().expect()` for `Result`s\n fn lint_ok_expect(cx: &LateContext<'_, '_>, expr: &hir::Expr, ok_args: &[hir::Expr]) {\n     if_chain! {"}, {"sha": "87ef5f9034c8f4fc41e8d8c6e0cde645005a933c", "filename": "clippy_lints/src/panic_unimplemented.rs", "status": "modified", "additions": 61, "deletions": 2, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/c0b2411f06a417266baaac2f0ea431138da33bf3/clippy_lints%2Fsrc%2Fpanic_unimplemented.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0b2411f06a417266baaac2f0ea431138da33bf3/clippy_lints%2Fsrc%2Fpanic_unimplemented.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fpanic_unimplemented.rs?ref=c0b2411f06a417266baaac2f0ea431138da33bf3", "patch": "@@ -25,6 +25,22 @@ declare_clippy_lint! {\n     \"missing parameters in `panic!` calls\"\n }\n \n+declare_clippy_lint! {\n+    /// **What it does:** Checks for usage of `panic!`.\n+    ///\n+    /// **Why is this bad?** `panic!` will stop the execution of the executable\n+    ///\n+    /// **Known problems:** None.\n+    ///\n+    /// **Example:**\n+    /// ```no_run\n+    /// panic!(\"even with a good reason\");\n+    /// ```\n+    pub PANIC,\n+    restriction,\n+    \"usage of the `panic!` macro\"\n+}\n+\n declare_clippy_lint! {\n     /// **What it does:** Checks for usage of `unimplemented!`.\n     ///\n@@ -41,7 +57,39 @@ declare_clippy_lint! {\n     \"`unimplemented!` should not be present in production code\"\n }\n \n-declare_lint_pass!(PanicUnimplemented => [PANIC_PARAMS, UNIMPLEMENTED]);\n+declare_clippy_lint! {\n+    /// **What it does:** Checks for usage of `todo!`.\n+    ///\n+    /// **Why is this bad?** This macro should not be present in production code\n+    ///\n+    /// **Known problems:** None.\n+    ///\n+    /// **Example:**\n+    /// ```no_run\n+    /// todo!();\n+    /// ```\n+    pub TODO,\n+    restriction,\n+    \"`todo!` should not be present in production code\"\n+}\n+\n+declare_clippy_lint! {\n+    /// **What it does:** Checks for usage of `unreachable!`.\n+    ///\n+    /// **Why is this bad?** This macro can cause code to panic\n+    ///\n+    /// **Known problems:** None.\n+    ///\n+    /// **Example:**\n+    /// ```no_run\n+    /// unreachable!();\n+    /// ```\n+    pub UNREACHABLE,\n+    restriction,\n+    \"`unreachable!` should not be present in production code\"\n+}\n+\n+declare_lint_pass!(PanicUnimplemented => [PANIC_PARAMS, UNIMPLEMENTED, UNREACHABLE, TODO, PANIC]);\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for PanicUnimplemented {\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr) {\n@@ -55,7 +103,18 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for PanicUnimplemented {\n                     let span = get_outer_span(expr);\n                     span_lint(cx, UNIMPLEMENTED, span,\n                               \"`unimplemented` should not be present in production code\");\n-                } else {\n+                } else if is_expn_of(expr.span, \"todo\").is_some() {\n+                    let span = get_outer_span(expr);\n+                    span_lint(cx, TODO, span,\n+                              \"`todo` should not be present in production code\");\n+                } else if is_expn_of(expr.span, \"unreachable\").is_some() {\n+                    let span = get_outer_span(expr);\n+                    span_lint(cx, UNREACHABLE, span,\n+                              \"`unreachable` should not be present in production code\");\n+                } else if is_expn_of(expr.span, \"panic\").is_some() {\n+                    let span = get_outer_span(expr);\n+                    span_lint(cx, PANIC, span,\n+                              \"`panic` should not be present in production code\");\n                     match_panic(params, expr, cx);\n                 }\n             }"}, {"sha": "f44ef226847f3b15e3d23f13b19793b1bb61292a", "filename": "src/lintlist/mod.rs", "status": "modified", "additions": 36, "deletions": 1, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/c0b2411f06a417266baaac2f0ea431138da33bf3/src%2Flintlist%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0b2411f06a417266baaac2f0ea431138da33bf3/src%2Flintlist%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flintlist%2Fmod.rs?ref=c0b2411f06a417266baaac2f0ea431138da33bf3", "patch": "@@ -6,7 +6,7 @@ pub use lint::Lint;\n pub use lint::LINT_LEVELS;\n \n // begin lint list, do not remove this comment, it\u2019s used in `update_lints`\n-pub const ALL_LINTS: [Lint; 326] = [\n+pub const ALL_LINTS: [Lint; 331] = [\n     Lint {\n         name: \"absurd_extreme_comparisons\",\n         group: \"correctness\",\n@@ -1393,6 +1393,13 @@ pub const ALL_LINTS: [Lint; 326] = [\n         deprecation: None,\n         module: \"methods\",\n     },\n+    Lint {\n+        name: \"option_expect_used\",\n+        group: \"restriction\",\n+        desc: \"using `Option.expect()`, which might be better handled\",\n+        deprecation: None,\n+        module: \"methods\",\n+    },\n     Lint {\n         name: \"option_map_or_none\",\n         group: \"style\",\n@@ -1456,6 +1463,13 @@ pub const ALL_LINTS: [Lint; 326] = [\n         deprecation: None,\n         module: \"overflow_check_conditional\",\n     },\n+    Lint {\n+        name: \"panic\",\n+        group: \"restriction\",\n+        desc: \"usage of the `panic!` macro\",\n+        deprecation: None,\n+        module: \"panic_unimplemented\",\n+    },\n     Lint {\n         name: \"panic_params\",\n         group: \"style\",\n@@ -1652,6 +1666,13 @@ pub const ALL_LINTS: [Lint; 326] = [\n         deprecation: None,\n         module: \"replace_consts\",\n     },\n+    Lint {\n+        name: \"result_expect_used\",\n+        group: \"restriction\",\n+        desc: \"using `Result.expect()`, which might be better handled\",\n+        deprecation: None,\n+        module: \"methods\",\n+    },\n     Lint {\n         name: \"result_map_unit_fn\",\n         group: \"complexity\",\n@@ -1848,6 +1869,13 @@ pub const ALL_LINTS: [Lint; 326] = [\n         deprecation: None,\n         module: \"methods\",\n     },\n+    Lint {\n+        name: \"todo\",\n+        group: \"restriction\",\n+        desc: \"`todo!` should not be present in production code\",\n+        deprecation: None,\n+        module: \"panic_unimplemented\",\n+    },\n     Lint {\n         name: \"too_many_arguments\",\n         group: \"complexity\",\n@@ -2051,6 +2079,13 @@ pub const ALL_LINTS: [Lint; 326] = [\n         deprecation: None,\n         module: \"misc_early\",\n     },\n+    Lint {\n+        name: \"unreachable\",\n+        group: \"restriction\",\n+        desc: \"`unreachable!` should not be present in production code\",\n+        deprecation: None,\n+        module: \"panic_unimplemented\",\n+    },\n     Lint {\n         name: \"unreadable_literal\",\n         group: \"style\","}, {"sha": "0bd4252c49aa5e9e77f675f37df8f82aa0ae1251", "filename": "tests/ui/expect.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c0b2411f06a417266baaac2f0ea431138da33bf3/tests%2Fui%2Fexpect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0b2411f06a417266baaac2f0ea431138da33bf3/tests%2Fui%2Fexpect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fexpect.rs?ref=c0b2411f06a417266baaac2f0ea431138da33bf3", "patch": "@@ -0,0 +1,16 @@\n+#![warn(clippy::option_expect_used, clippy::result_expect_used)]\n+\n+fn expect_option() {\n+    let opt = Some(0);\n+    let _ = opt.expect(\"\");\n+}\n+\n+fn expect_result() {\n+    let res: Result<u8, ()> = Ok(0);\n+    let _ = res.expect(\"\");\n+}\n+\n+fn main() {\n+    expect_option();\n+    expect_result();\n+}"}, {"sha": "4f954f611a69f2034bb051b9ad7448119155b8d8", "filename": "tests/ui/expect.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/c0b2411f06a417266baaac2f0ea431138da33bf3/tests%2Fui%2Fexpect.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c0b2411f06a417266baaac2f0ea431138da33bf3/tests%2Fui%2Fexpect.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fexpect.stderr?ref=c0b2411f06a417266baaac2f0ea431138da33bf3", "patch": "@@ -0,0 +1,18 @@\n+error: used expect() on an Option value. If this value is an None it will panic\n+  --> $DIR/expect.rs:5:13\n+   |\n+LL |     let _ = opt.expect(\"\");\n+   |             ^^^^^^^^^^^^^^\n+   |\n+   = note: `-D clippy::option-expect-used` implied by `-D warnings`\n+\n+error: used expect() on a Result value. If this value is an Err it will panic\n+  --> $DIR/expect.rs:10:13\n+   |\n+LL |     let _ = res.expect(\"\");\n+   |             ^^^^^^^^^^^^^^\n+   |\n+   = note: `-D clippy::result-expect-used` implied by `-D warnings`\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "847a0f0f3395c04ee1a4c10c291c938615ae9f37", "filename": "tests/ui/methods.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c0b2411f06a417266baaac2f0ea431138da33bf3/tests%2Fui%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0b2411f06a417266baaac2f0ea431138da33bf3/tests%2Fui%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmethods.rs?ref=c0b2411f06a417266baaac2f0ea431138da33bf3", "patch": "@@ -1,7 +1,7 @@\n // aux-build:option_helpers.rs\n // compile-flags: --edition 2018\n \n-#![warn(clippy::all, clippy::pedantic, clippy::option_unwrap_used)]\n+#![warn(clippy::all, clippy::pedantic)]\n #![allow(\n     clippy::blacklisted_name,\n     clippy::default_trait_access,\n@@ -301,8 +301,8 @@ fn search_is_some() {\n     let _ = foo.rposition().is_some();\n }\n \n-#[allow(clippy::similar_names)]\n fn main() {\n-    let opt = Some(0);\n-    let _ = opt.unwrap();\n+    option_methods();\n+    filter_next();\n+    search_is_some();\n }"}, {"sha": "af7bd4a6a9d9b5bc7060748ea00385e005e4ec54", "filename": "tests/ui/methods.stderr", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c0b2411f06a417266baaac2f0ea431138da33bf3/tests%2Fui%2Fmethods.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c0b2411f06a417266baaac2f0ea431138da33bf3/tests%2Fui%2Fmethods.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmethods.stderr?ref=c0b2411f06a417266baaac2f0ea431138da33bf3", "patch": "@@ -206,13 +206,5 @@ LL | |                                }\n LL | |                    ).is_some();\n    | |______________________________^\n \n-error: used unwrap() on an Option value. If you don't want to handle the None case gracefully, consider using expect() to provide a better panic message\n-  --> $DIR/methods.rs:307:13\n-   |\n-LL |     let _ = opt.unwrap();\n-   |             ^^^^^^^^^^^^\n-   |\n-   = note: `-D clippy::option-unwrap-used` implied by `-D warnings`\n-\n-error: aborting due to 24 previous errors\n+error: aborting due to 23 previous errors\n "}, {"sha": "6e004aa9a924ffff0d7160eec504a5140051c4b0", "filename": "tests/ui/panic.rs", "status": "renamed", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c0b2411f06a417266baaac2f0ea431138da33bf3/tests%2Fui%2Fpanic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0b2411f06a417266baaac2f0ea431138da33bf3/tests%2Fui%2Fpanic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fpanic.rs?ref=c0b2411f06a417266baaac2f0ea431138da33bf3", "patch": "@@ -1,4 +1,4 @@\n-#![warn(clippy::panic_params, clippy::unimplemented)]\n+#![warn(clippy::panic_params)]\n #![allow(clippy::assertions_on_constants)]\n fn missing() {\n     if true {\n@@ -50,12 +50,6 @@ fn ok_escaped() {\n     panic!(\"{case }}\");\n }\n \n-fn unimplemented() {\n-    let a = 2;\n-    unimplemented!();\n-    let b = a + 2;\n-}\n-\n fn main() {\n     missing();\n     ok_single();\n@@ -64,5 +58,4 @@ fn main() {\n     ok_inner();\n     ok_nomsg();\n     ok_escaped();\n-    unimplemented();\n }", "previous_filename": "tests/ui/panic_unimplemented.rs"}, {"sha": "1f8ff8ccf55750577675303eb2bcec693119bdda", "filename": "tests/ui/panic.stderr", "status": "renamed", "additions": 5, "deletions": 13, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/c0b2411f06a417266baaac2f0ea431138da33bf3/tests%2Fui%2Fpanic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c0b2411f06a417266baaac2f0ea431138da33bf3/tests%2Fui%2Fpanic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fpanic.stderr?ref=c0b2411f06a417266baaac2f0ea431138da33bf3", "patch": "@@ -1,36 +1,28 @@\n error: you probably are missing some parameter in your format string\n-  --> $DIR/panic_unimplemented.rs:5:16\n+  --> $DIR/panic.rs:5:16\n    |\n LL |         panic!(\"{}\");\n    |                ^^^^\n    |\n    = note: `-D clippy::panic-params` implied by `-D warnings`\n \n error: you probably are missing some parameter in your format string\n-  --> $DIR/panic_unimplemented.rs:7:16\n+  --> $DIR/panic.rs:7:16\n    |\n LL |         panic!(\"{:?}\");\n    |                ^^^^^^\n \n error: you probably are missing some parameter in your format string\n-  --> $DIR/panic_unimplemented.rs:9:23\n+  --> $DIR/panic.rs:9:23\n    |\n LL |         assert!(true, \"here be missing values: {}\");\n    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: you probably are missing some parameter in your format string\n-  --> $DIR/panic_unimplemented.rs:12:12\n+  --> $DIR/panic.rs:12:12\n    |\n LL |     panic!(\"{{{this}}}\");\n    |            ^^^^^^^^^^^^\n \n-error: `unimplemented` should not be present in production code\n-  --> $DIR/panic_unimplemented.rs:55:5\n-   |\n-LL |     unimplemented!();\n-   |     ^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `-D clippy::unimplemented` implied by `-D warnings`\n-\n-error: aborting due to 5 previous errors\n+error: aborting due to 4 previous errors\n ", "previous_filename": "tests/ui/panic_unimplemented.stderr"}, {"sha": "dabb695368dba2b485cdc7de2b26defb1cdee55e", "filename": "tests/ui/panicking_macros.rs", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/c0b2411f06a417266baaac2f0ea431138da33bf3/tests%2Fui%2Fpanicking_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0b2411f06a417266baaac2f0ea431138da33bf3/tests%2Fui%2Fpanicking_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fpanicking_macros.rs?ref=c0b2411f06a417266baaac2f0ea431138da33bf3", "patch": "@@ -0,0 +1,33 @@\n+#![warn(clippy::unimplemented, clippy::unreachable, clippy::todo, clippy::panic)]\n+#![allow(clippy::assertions_on_constants)]\n+\n+fn panic() {\n+    let a = 2;\n+    panic!();\n+    let b = a + 2;\n+}\n+\n+fn todo() {\n+    let a = 2;\n+    todo!();\n+    let b = a + 2;\n+}\n+\n+fn unimplemented() {\n+    let a = 2;\n+    unimplemented!();\n+    let b = a + 2;\n+}\n+\n+fn unreachable() {\n+    let a = 2;\n+    unreachable!();\n+    let b = a + 2;\n+}\n+\n+fn main() {\n+    panic();\n+    todo();\n+    unimplemented();\n+    unreachable();\n+}"}, {"sha": "72319bc7e45846014e6ad49e6669a7cf194e4e8a", "filename": "tests/ui/panicking_macros.stderr", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/c0b2411f06a417266baaac2f0ea431138da33bf3/tests%2Fui%2Fpanicking_macros.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c0b2411f06a417266baaac2f0ea431138da33bf3/tests%2Fui%2Fpanicking_macros.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fpanicking_macros.stderr?ref=c0b2411f06a417266baaac2f0ea431138da33bf3", "patch": "@@ -0,0 +1,34 @@\n+error: `panic` should not be present in production code\n+  --> $DIR/panicking_macros.rs:6:5\n+   |\n+LL |     panic!();\n+   |     ^^^^^^^^^\n+   |\n+   = note: `-D clippy::panic` implied by `-D warnings`\n+\n+error: `todo` should not be present in production code\n+  --> $DIR/panicking_macros.rs:12:5\n+   |\n+LL |     todo!();\n+   |     ^^^^^^^^\n+   |\n+   = note: `-D clippy::todo` implied by `-D warnings`\n+\n+error: `unimplemented` should not be present in production code\n+  --> $DIR/panicking_macros.rs:18:5\n+   |\n+LL |     unimplemented!();\n+   |     ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `-D clippy::unimplemented` implied by `-D warnings`\n+\n+error: `unreachable` should not be present in production code\n+  --> $DIR/panicking_macros.rs:24:5\n+   |\n+LL |     unreachable!();\n+   |     ^^^^^^^^^^^^^^^\n+   |\n+   = note: `-D clippy::unreachable` implied by `-D warnings`\n+\n+error: aborting due to 4 previous errors\n+"}, {"sha": "fcd1fcd14d48f67590a89b0c33848af7d96f5dd9", "filename": "tests/ui/unwrap.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c0b2411f06a417266baaac2f0ea431138da33bf3/tests%2Fui%2Funwrap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0b2411f06a417266baaac2f0ea431138da33bf3/tests%2Fui%2Funwrap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funwrap.rs?ref=c0b2411f06a417266baaac2f0ea431138da33bf3", "patch": "@@ -0,0 +1,16 @@\n+#![warn(clippy::option_unwrap_used, clippy::result_unwrap_used)]\n+\n+fn unwrap_option() {\n+    let opt = Some(0);\n+    let _ = opt.unwrap();\n+}\n+\n+fn unwrap_result() {\n+    let res: Result<u8, ()> = Ok(0);\n+    let _ = res.unwrap();\n+}\n+\n+fn main() {\n+    unwrap_option();\n+    unwrap_result();\n+}"}, {"sha": "cde3ceffd9d362e1541f3938a1ee4be2e019d45a", "filename": "tests/ui/unwrap.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/c0b2411f06a417266baaac2f0ea431138da33bf3/tests%2Fui%2Funwrap.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c0b2411f06a417266baaac2f0ea431138da33bf3/tests%2Fui%2Funwrap.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funwrap.stderr?ref=c0b2411f06a417266baaac2f0ea431138da33bf3", "patch": "@@ -0,0 +1,18 @@\n+error: used unwrap() on an Option value. If you don't want to handle the None case gracefully, consider using expect() to provide a better panic message\n+  --> $DIR/unwrap.rs:5:13\n+   |\n+LL |     let _ = opt.unwrap();\n+   |             ^^^^^^^^^^^^\n+   |\n+   = note: `-D clippy::option-unwrap-used` implied by `-D warnings`\n+\n+error: used unwrap() on a Result value. If you don't want to handle the Err case gracefully, consider using expect() to provide a better panic message\n+  --> $DIR/unwrap.rs:10:13\n+   |\n+LL |     let _ = res.unwrap();\n+   |             ^^^^^^^^^^^^\n+   |\n+   = note: `-D clippy::result-unwrap-used` implied by `-D warnings`\n+\n+error: aborting due to 2 previous errors\n+"}]}