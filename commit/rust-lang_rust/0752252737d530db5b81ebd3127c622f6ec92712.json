{"sha": "0752252737d530db5b81ebd3127c622f6ec92712", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA3NTIyNTI3MzdkNTMwZGI1YjgxZWJkMzEyN2M2MjJmNmVjOTI3MTI=", "commit": {"author": {"name": "Josh Matthews", "email": "josh@joshmatthews.net", "date": "2011-12-03T21:07:28Z"}, "committer": {"name": "Josh Matthews", "email": "josh@joshmatthews.net", "date": "2011-12-19T04:44:21Z"}, "message": "Use proper size and alignment of types for debuginfo.", "tree": {"sha": "2815868b073819d758278fc5849ab6b2c8d62039", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2815868b073819d758278fc5849ab6b2c8d62039"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0752252737d530db5b81ebd3127c622f6ec92712", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0752252737d530db5b81ebd3127c622f6ec92712", "html_url": "https://github.com/rust-lang/rust/commit/0752252737d530db5b81ebd3127c622f6ec92712", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0752252737d530db5b81ebd3127c622f6ec92712/comments", "author": {"login": "jdm", "id": 27658, "node_id": "MDQ6VXNlcjI3NjU4", "avatar_url": "https://avatars.githubusercontent.com/u/27658?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jdm", "html_url": "https://github.com/jdm", "followers_url": "https://api.github.com/users/jdm/followers", "following_url": "https://api.github.com/users/jdm/following{/other_user}", "gists_url": "https://api.github.com/users/jdm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jdm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jdm/subscriptions", "organizations_url": "https://api.github.com/users/jdm/orgs", "repos_url": "https://api.github.com/users/jdm/repos", "events_url": "https://api.github.com/users/jdm/events{/privacy}", "received_events_url": "https://api.github.com/users/jdm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jdm", "id": 27658, "node_id": "MDQ6VXNlcjI3NjU4", "avatar_url": "https://avatars.githubusercontent.com/u/27658?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jdm", "html_url": "https://github.com/jdm", "followers_url": "https://api.github.com/users/jdm/followers", "following_url": "https://api.github.com/users/jdm/following{/other_user}", "gists_url": "https://api.github.com/users/jdm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jdm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jdm/subscriptions", "organizations_url": "https://api.github.com/users/jdm/orgs", "repos_url": "https://api.github.com/users/jdm/repos", "events_url": "https://api.github.com/users/jdm/events{/privacy}", "received_events_url": "https://api.github.com/users/jdm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1da4b3b987f4d6be09dafa23e63978a36f677b00", "url": "https://api.github.com/repos/rust-lang/rust/commits/1da4b3b987f4d6be09dafa23e63978a36f677b00", "html_url": "https://github.com/rust-lang/rust/commit/1da4b3b987f4d6be09dafa23e63978a36f677b00"}], "stats": {"total": 43, "additions": 23, "deletions": 20}, "files": [{"sha": "1b83353119d935766a2a99a06593eda2cee2503a", "filename": "src/comp/middle/debuginfo.rs", "status": "modified", "additions": 23, "deletions": 20, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/0752252737d530db5b81ebd3127c622f6ec92712/src%2Fcomp%2Fmiddle%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0752252737d530db5b81ebd3127c622f6ec92712/src%2Fcomp%2Fmiddle%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fdebuginfo.rs?ref=0752252737d530db5b81ebd3127c622f6ec92712", "patch": "@@ -1,4 +1,4 @@\n-import std::{vec, str, option, unsafe, fs};\n+import std::{vec, str, option, unsafe, fs, sys};\n import std::map::hashmap;\n import lib::llvm::llvm;\n import lib::llvm::llvm::ValueRef;\n@@ -221,24 +221,27 @@ fn get_ty_metadata(cx: @crate_ctxt, t: ty::t, ty: @ast::ty) -> @metadata<tydesc_\n       option::some(md) { ret md; }\n       option::none. {}\n     }\n-    let (name, size, encoding) = alt ty.node {\n-      ast::ty_bool. { (\"bool\", 1, DW_ATE_boolean) }\n-      ast::ty_int. { (\"int\", 32, DW_ATE_signed) } //XXX machine-dependent?\n-      ast::ty_uint. { (\"uint\", 32, DW_ATE_unsigned) } //XXX machine-dependent?\n-      ast::ty_float. { (\"float\", 32, DW_ATE_float) } //XXX machine-dependent?\n+    fn size_and_align_of<T>() -> (int, int) {\n+        (sys::size_of::<T>() as int, sys::align_of::<T>() as int)\n+    }\n+    let (name, (size, align), encoding) = alt ty.node {\n+      ast::ty_bool. {(\"bool\", size_and_align_of::<bool>(), DW_ATE_boolean)}\n+      ast::ty_int. {(\"int\", size_and_align_of::<int>(), DW_ATE_signed)}\n+      ast::ty_uint. {(\"uint\", size_and_align_of::<uint>(), DW_ATE_unsigned)}\n+      ast::ty_float. {(\"float\", size_and_align_of::<float>(), DW_ATE_float)}\n       ast::ty_machine(m) { alt m {\n-        ast::ty_i8. { (\"i8\", 1, DW_ATE_signed_char) }\n-        ast::ty_i16. { (\"i16\", 16, DW_ATE_signed) }\n-        ast::ty_i32. { (\"i32\", 32, DW_ATE_signed) }\n-        ast::ty_i64. { (\"i64\", 64, DW_ATE_signed) }\n-        ast::ty_u8. { (\"u8\", 8, DW_ATE_unsigned_char) }\n-        ast::ty_u16. { (\"u16\", 16, DW_ATE_unsigned) }\n-        ast::ty_u32. { (\"u32\", 32, DW_ATE_unsigned) }\n-        ast::ty_u64. { (\"u64\", 64, DW_ATE_unsigned) }\n-        ast::ty_f32. { (\"f32\", 32, DW_ATE_float) }\n-        ast::ty_f64. { (\"f64\", 64, DW_ATE_float) }\n+        ast::ty_i8. {(\"i8\", size_and_align_of::<i8>(), DW_ATE_signed_char)}\n+        ast::ty_i16. {(\"i16\", size_and_align_of::<i16>(), DW_ATE_signed)}\n+        ast::ty_i32. {(\"i32\", size_and_align_of::<i32>(), DW_ATE_signed)}\n+        ast::ty_i64. {(\"i64\", size_and_align_of::<i64>(), DW_ATE_signed)}\n+        ast::ty_u8. {(\"u8\", size_and_align_of::<u8>(), DW_ATE_unsigned_char)}\n+        ast::ty_u16. {(\"u16\", size_and_align_of::<u16>(), DW_ATE_unsigned)}\n+        ast::ty_u32. {(\"u32\", size_and_align_of::<u32>(), DW_ATE_unsigned)}\n+        ast::ty_u64. {(\"u64\", size_and_align_of::<u64>(), DW_ATE_unsigned)}\n+        ast::ty_f32. {(\"f32\", size_and_align_of::<f32>(), DW_ATE_float)}\n+        ast::ty_f64. {(\"f64\", size_and_align_of::<f64>(), DW_ATE_float)}\n       } }\n-      ast::ty_char. { (\"char\", 32, DW_ATE_unsigned) }\n+      ast::ty_char. {(\"char\", size_and_align_of::<char>(), DW_ATE_unsigned)}\n     };\n     let fname = filename_from_span(cx, ty.span);\n     let file_node = get_file_metadata(cx, fname);\n@@ -247,9 +250,9 @@ fn get_ty_metadata(cx: @crate_ctxt, t: ty::t, ty: @ast::ty) -> @metadata<tydesc_\n                   cu_node.node,\n                   llstr(name),\n                   file_node.node,\n-                  lli32(0), //XXX basic types only\n-                  lli64(size),\n-                  lli64(32), //XXX alignment?\n+                  lli32(0), //XXX source line\n+                  lli64(size * 8),  // size in bits\n+                  lli64(align * 8), // alignment in bits\n                   lli64(0), //XXX offset?\n                   lli32(0), //XXX flags?\n                   lli32(encoding)];"}]}