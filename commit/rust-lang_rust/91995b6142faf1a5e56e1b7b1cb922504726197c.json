{"sha": "91995b6142faf1a5e56e1b7b1cb922504726197c", "node_id": "C_kwDOAAsO6NoAKDkxOTk1YjYxNDJmYWYxYTVlNTZlMWI3YjFjYjkyMjUwNDcyNjE5N2M", "commit": {"author": {"name": "Expyron", "email": "5100376+Expyron@users.noreply.github.com", "date": "2022-04-07T07:57:58Z"}, "committer": {"name": "Caleb Cartwright", "email": "calebcartwright@users.noreply.github.com", "date": "2022-04-07T22:24:03Z"}, "message": "Replace `structopt` dependency by `clap`", "tree": {"sha": "1cc9a048806ce19ff56d728eefdd1cdaf9ee34a3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1cc9a048806ce19ff56d728eefdd1cdaf9ee34a3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/91995b6142faf1a5e56e1b7b1cb922504726197c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/91995b6142faf1a5e56e1b7b1cb922504726197c", "html_url": "https://github.com/rust-lang/rust/commit/91995b6142faf1a5e56e1b7b1cb922504726197c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/91995b6142faf1a5e56e1b7b1cb922504726197c/comments", "author": {"login": "Expyron", "id": 5100376, "node_id": "MDQ6VXNlcjUxMDAzNzY=", "avatar_url": "https://avatars.githubusercontent.com/u/5100376?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Expyron", "html_url": "https://github.com/Expyron", "followers_url": "https://api.github.com/users/Expyron/followers", "following_url": "https://api.github.com/users/Expyron/following{/other_user}", "gists_url": "https://api.github.com/users/Expyron/gists{/gist_id}", "starred_url": "https://api.github.com/users/Expyron/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Expyron/subscriptions", "organizations_url": "https://api.github.com/users/Expyron/orgs", "repos_url": "https://api.github.com/users/Expyron/repos", "events_url": "https://api.github.com/users/Expyron/events{/privacy}", "received_events_url": "https://api.github.com/users/Expyron/received_events", "type": "User", "site_admin": false}, "committer": {"login": "calebcartwright", "id": 13042488, "node_id": "MDQ6VXNlcjEzMDQyNDg4", "avatar_url": "https://avatars.githubusercontent.com/u/13042488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebcartwright", "html_url": "https://github.com/calebcartwright", "followers_url": "https://api.github.com/users/calebcartwright/followers", "following_url": "https://api.github.com/users/calebcartwright/following{/other_user}", "gists_url": "https://api.github.com/users/calebcartwright/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebcartwright/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebcartwright/subscriptions", "organizations_url": "https://api.github.com/users/calebcartwright/orgs", "repos_url": "https://api.github.com/users/calebcartwright/repos", "events_url": "https://api.github.com/users/calebcartwright/events{/privacy}", "received_events_url": "https://api.github.com/users/calebcartwright/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7d6ca7c35c275ab7a6a50d290babe874cb8e3fc7", "url": "https://api.github.com/repos/rust-lang/rust/commits/7d6ca7c35c275ab7a6a50d290babe874cb8e3fc7", "html_url": "https://github.com/rust-lang/rust/commit/7d6ca7c35c275ab7a6a50d290babe874cb8e3fc7"}], "stats": {"total": 249, "additions": 130, "deletions": 119}, "files": [{"sha": "4eaaee74cf96a61e4a7c91c36d75491f3635889f", "filename": "Cargo.lock", "status": "modified", "additions": 64, "deletions": 63, "changes": 127, "blob_url": "https://github.com/rust-lang/rust/blob/91995b6142faf1a5e56e1b7b1cb922504726197c/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/91995b6142faf1a5e56e1b7b1cb922504726197c/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=91995b6142faf1a5e56e1b7b1cb922504726197c", "patch": "@@ -21,15 +21,6 @@ dependencies = [\n  \"yansi-term\",\n ]\n \n-[[package]]\n-name = \"ansi_term\"\n-version = \"0.12.1\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"d52a9bb7ec0cf484c551830a7ce27bd20d67eac647e1befb56b0be4ee39a55d2\"\n-dependencies = [\n- \"winapi\",\n-]\n-\n [[package]]\n name = \"anyhow\"\n version = \"1.0.56\"\n@@ -47,6 +38,12 @@ dependencies = [\n  \"winapi\",\n ]\n \n+[[package]]\n+name = \"autocfg\"\n+version = \"1.1.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"d468802bab17cbc0cc575e9b053f41e72aa36bfa6b7f55e3529ffa43161b97fa\"\n+\n [[package]]\n name = \"bitflags\"\n version = \"1.3.2\"\n@@ -110,17 +107,32 @@ checksum = \"baf1de4339761588bc0619e3cbc0120ee582ebb74b53b4efbf79117bd2da40fd\"\n \n [[package]]\n name = \"clap\"\n-version = \"2.34.0\"\n+version = \"3.1.8\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"a0610544180c38b88101fecf2dd634b174a62eef6946f84dfc6a7127512b381c\"\n+checksum = \"71c47df61d9e16dc010b55dba1952a57d8c215dbb533fd13cdd13369aac73b1c\"\n dependencies = [\n- \"ansi_term\",\n  \"atty\",\n  \"bitflags\",\n+ \"clap_derive\",\n+ \"indexmap\",\n+ \"lazy_static\",\n+ \"os_str_bytes\",\n  \"strsim\",\n+ \"termcolor\",\n  \"textwrap\",\n- \"unicode-width\",\n- \"vec_map\",\n+]\n+\n+[[package]]\n+name = \"clap_derive\"\n+version = \"3.1.7\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"a3aab4734e083b809aaf5794e14e756d1c798d2c69c7f7de7a09a2f5214993c1\"\n+dependencies = [\n+ \"heck\",\n+ \"proc-macro-error\",\n+ \"proc-macro2\",\n+ \"quote\",\n+ \"syn\",\n ]\n \n [[package]]\n@@ -249,14 +261,17 @@ dependencies = [\n  \"regex\",\n ]\n \n+[[package]]\n+name = \"hashbrown\"\n+version = \"0.11.2\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"ab5ef0d4909ef3724cc8cce6ccc8572c5c817592e9285f5464f8e86f8bd3726e\"\n+\n [[package]]\n name = \"heck\"\n-version = \"0.3.3\"\n+version = \"0.4.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"6d621efb26863f0e9924c6ac577e8275e5e6b77455db64ffa6c65c904e9e132c\"\n-dependencies = [\n- \"unicode-segmentation\",\n-]\n+checksum = \"2540771e65fc8cb83cd6e8a237f70c319bd5c29f78ed1084ba5d50eeac86f7f9\"\n \n [[package]]\n name = \"hermit-abi\"\n@@ -291,6 +306,16 @@ dependencies = [\n  \"winapi-util\",\n ]\n \n+[[package]]\n+name = \"indexmap\"\n+version = \"1.8.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"0f647032dfaa1f8b6dc29bd3edb7bbef4861b8b8007ebb118d6db284fd59f6ee\"\n+dependencies = [\n+ \"autocfg\",\n+ \"hashbrown\",\n+]\n+\n [[package]]\n name = \"itertools\"\n version = \"0.10.3\"\n@@ -314,9 +339,9 @@ checksum = \"e2abad23fbc42b3700f2f279844dc832adb2b2eb069b2df918f455c4e18cc646\"\n \n [[package]]\n name = \"libc\"\n-version = \"0.2.121\"\n+version = \"0.2.122\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"efaa7b300f3b5fe8eb6bf21ce3895e1751d9665086af2d64b42f19701015ff4f\"\n+checksum = \"ec647867e2bf0772e28c8bcde4f0d19a9216916e890543b5a03ed8ef27b8f259\"\n \n [[package]]\n name = \"libm\"\n@@ -345,6 +370,15 @@ version = \"1.10.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"87f3e037eac156d1775da914196f0f37741a274155e34a0b7e427c35d2a2ecb9\"\n \n+[[package]]\n+name = \"os_str_bytes\"\n+version = \"6.0.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"8e22443d1643a904602595ba1cd8f7d896afe56d26712531c5ff73a15b2fbf64\"\n+dependencies = [\n+ \"memchr\",\n+]\n+\n [[package]]\n name = \"packed_simd_2\"\n version = \"0.3.7\"\n@@ -381,9 +415,9 @@ dependencies = [\n \n [[package]]\n name = \"proc-macro2\"\n-version = \"1.0.36\"\n+version = \"1.0.37\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"c7342d5883fbccae1cc37a2353b09c87c9b0f3afd73f5fb9bba687a1f733b029\"\n+checksum = \"ec757218438d5fda206afc041538b2f6d889286160d649a86a24d37e1235afd1\"\n dependencies = [\n  \"unicode-xid\",\n ]\n@@ -457,6 +491,7 @@ dependencies = [\n  \"anyhow\",\n  \"bytecount\",\n  \"cargo_metadata\",\n+ \"clap\",\n  \"derive-new\",\n  \"diff\",\n  \"dirs\",\n@@ -471,7 +506,6 @@ dependencies = [\n  \"rustfmt-config_proc_macro\",\n  \"serde\",\n  \"serde_json\",\n- \"structopt\",\n  \"term\",\n  \"thiserror\",\n  \"toml\",\n@@ -543,39 +577,15 @@ dependencies = [\n \n [[package]]\n name = \"strsim\"\n-version = \"0.8.0\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"8ea5119cdb4c55b55d432abb513a0429384878c15dde60cc77b1c99de1a95a6a\"\n-\n-[[package]]\n-name = \"structopt\"\n-version = \"0.3.26\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"0c6b5c64445ba8094a6ab0c3cd2ad323e07171012d9c98b0b15651daf1787a10\"\n-dependencies = [\n- \"clap\",\n- \"lazy_static\",\n- \"structopt-derive\",\n-]\n-\n-[[package]]\n-name = \"structopt-derive\"\n-version = \"0.4.18\"\n+version = \"0.10.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"dcb5ae327f9cc13b68763b5749770cb9e048a99bd9dfdfa58d0cf05d5f64afe0\"\n-dependencies = [\n- \"heck\",\n- \"proc-macro-error\",\n- \"proc-macro2\",\n- \"quote\",\n- \"syn\",\n-]\n+checksum = \"73473c0e59e6d5812c5dfe2a064a6444949f089e20eec9a2e5506596494e4623\"\n \n [[package]]\n name = \"syn\"\n-version = \"1.0.90\"\n+version = \"1.0.91\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"704df27628939572cd88d33f171cd6f896f4eaca85252c6e0a72d8d8287ee86f\"\n+checksum = \"b683b2b825c8eef438b77c36a06dc262294da3d5a5813fac20da149241dcd44d\"\n dependencies = [\n  \"proc-macro2\",\n  \"quote\",\n@@ -604,12 +614,9 @@ dependencies = [\n \n [[package]]\n name = \"textwrap\"\n-version = \"0.11.0\"\n+version = \"0.15.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"d326610f408c7a4eb6f51c37c330e496b08506c9457c9d34287ecc38809fb060\"\n-dependencies = [\n- \"unicode-width\",\n-]\n+checksum = \"b1141d4d61095b28419e22cb0bbf02755f5e54e0526f97f1e3d1d160e60885fb\"\n \n [[package]]\n name = \"thiserror\"\n@@ -673,12 +680,6 @@ version = \"0.1.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"39ec24b3121d976906ece63c9daad25b85969647682eee313cb5779fdd69e14e\"\n \n-[[package]]\n-name = \"vec_map\"\n-version = \"0.8.2\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"f1bddf1187be692e79c5ffeab891132dfb0f236ed36a43c7ed39f1165ee20191\"\n-\n [[package]]\n name = \"version_check\"\n version = \"0.9.4\""}, {"sha": "0be9723bc4dcf776c4f2b6545822d45d7507d110", "filename": "Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/91995b6142faf1a5e56e1b7b1cb922504726197c/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/91995b6142faf1a5e56e1b7b1cb922504726197c/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=91995b6142faf1a5e56e1b7b1cb922504726197c", "patch": "@@ -37,6 +37,7 @@ annotate-snippets = { version = \"0.9\", features = [\"color\"] }\n anyhow = \"1.0\"\n bytecount = \"0.6\"\n cargo_metadata = \"0.14\"\n+clap = { version = \"3.1\", features = [\"derive\"] }\n derive-new = \"0.5\"\n diff = \"0.1\"\n dirs = \"4.0\"\n@@ -49,7 +50,6 @@ log = \"0.4\"\n regex = \"1.5\"\n serde = { version = \"1.0\", features = [\"derive\"] }\n serde_json = \"1.0\"\n-structopt = \"0.3\"\n term = \"0.7\"\n thiserror = \"1.0\"\n toml = \"0.5\""}, {"sha": "3542536f29b6160f4cb376171f7724d829b3b8c6", "filename": "src/cargo-fmt/main.rs", "status": "modified", "additions": 19, "deletions": 14, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/91995b6142faf1a5e56e1b7b1cb922504726197c/src%2Fcargo-fmt%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91995b6142faf1a5e56e1b7b1cb922504726197c/src%2Fcargo-fmt%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcargo-fmt%2Fmain.rs?ref=91995b6142faf1a5e56e1b7b1cb922504726197c", "patch": "@@ -15,54 +15,59 @@ use std::path::{Path, PathBuf};\n use std::process::Command;\n use std::str;\n \n-use structopt::StructOpt;\n+use clap::{CommandFactory, Parser};\n \n #[path = \"test/mod.rs\"]\n #[cfg(test)]\n mod cargo_fmt_tests;\n \n-#[derive(StructOpt, Debug)]\n-#[structopt(\n+#[derive(Parser)]\n+#[clap(\n     bin_name = \"cargo fmt\",\n     about = \"This utility formats all bin and lib files of \\\n              the current crate using rustfmt.\"\n )]\n pub struct Opts {\n     /// No output printed to stdout\n-    #[structopt(short = \"q\", long = \"quiet\")]\n+    #[clap(short = 'q', long = \"quiet\")]\n     quiet: bool,\n \n     /// Use verbose output\n-    #[structopt(short = \"v\", long = \"verbose\")]\n+    #[clap(short = 'v', long = \"verbose\")]\n     verbose: bool,\n \n     /// Print rustfmt version and exit\n-    #[structopt(long = \"version\")]\n+    #[clap(long = \"version\")]\n     version: bool,\n \n     /// Specify package to format\n-    #[structopt(short = \"p\", long = \"package\", value_name = \"package\")]\n+    #[clap(\n+        short = 'p',\n+        long = \"package\",\n+        value_name = \"package\",\n+        multiple_values = true\n+    )]\n     packages: Vec<String>,\n \n     /// Specify path to Cargo.toml\n-    #[structopt(long = \"manifest-path\", value_name = \"manifest-path\")]\n+    #[clap(long = \"manifest-path\", value_name = \"manifest-path\")]\n     manifest_path: Option<String>,\n \n     /// Specify message-format: short|json|human\n-    #[structopt(long = \"message-format\", value_name = \"message-format\")]\n+    #[clap(long = \"message-format\", value_name = \"message-format\")]\n     message_format: Option<String>,\n \n     /// Options passed to rustfmt\n     // 'raw = true' to make `--` explicit.\n-    #[structopt(name = \"rustfmt_options\", raw(true))]\n+    #[clap(name = \"rustfmt_options\", raw(true))]\n     rustfmt_options: Vec<String>,\n \n     /// Format all packages, and also their local path-based dependencies\n-    #[structopt(long = \"all\")]\n+    #[clap(long = \"all\")]\n     format_all: bool,\n \n     /// Run rustfmt in check mode\n-    #[structopt(long = \"check\")]\n+    #[clap(long = \"check\")]\n     check: bool,\n }\n \n@@ -87,7 +92,7 @@ fn execute() -> i32 {\n         }\n     });\n \n-    let opts = Opts::from_iter(args);\n+    let opts = Opts::parse_from(args);\n \n     let verbosity = match (opts.verbose, opts.quiet) {\n         (false, false) => Verbosity::Normal,\n@@ -204,7 +209,7 @@ fn convert_message_format_to_rustfmt_args(\n \n fn print_usage_to_stderr(reason: &str) {\n     eprintln!(\"{}\", reason);\n-    let app = Opts::clap();\n+    let app = Opts::command();\n     app.after_help(\"\")\n         .write_help(&mut io::stderr())\n         .expect(\"failed to write to stderr\");"}, {"sha": "56e52fbabb68b4876308b011d955a6de71c78c49", "filename": "src/cargo-fmt/test/mod.rs", "status": "modified", "additions": 23, "deletions": 19, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/91995b6142faf1a5e56e1b7b1cb922504726197c/src%2Fcargo-fmt%2Ftest%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91995b6142faf1a5e56e1b7b1cb922504726197c/src%2Fcargo-fmt%2Ftest%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcargo-fmt%2Ftest%2Fmod.rs?ref=91995b6142faf1a5e56e1b7b1cb922504726197c", "patch": "@@ -6,7 +6,7 @@ mod targets;\n #[test]\n fn default_options() {\n     let empty: Vec<String> = vec![];\n-    let o = Opts::from_iter(&empty);\n+    let o = Opts::parse_from(&empty);\n     assert_eq!(false, o.quiet);\n     assert_eq!(false, o.verbose);\n     assert_eq!(false, o.version);\n@@ -20,7 +20,7 @@ fn default_options() {\n \n #[test]\n fn good_options() {\n-    let o = Opts::from_iter(&[\n+    let o = Opts::parse_from(&[\n         \"test\",\n         \"-q\",\n         \"-p\",\n@@ -47,38 +47,38 @@ fn good_options() {\n #[test]\n fn unexpected_option() {\n     assert!(\n-        Opts::clap()\n-            .get_matches_from_safe(&[\"test\", \"unexpected\"])\n+        Opts::command()\n+            .try_get_matches_from(&[\"test\", \"unexpected\"])\n             .is_err()\n     );\n }\n \n #[test]\n fn unexpected_flag() {\n     assert!(\n-        Opts::clap()\n-            .get_matches_from_safe(&[\"test\", \"--flag\"])\n+        Opts::command()\n+            .try_get_matches_from(&[\"test\", \"--flag\"])\n             .is_err()\n     );\n }\n \n #[test]\n fn mandatory_separator() {\n     assert!(\n-        Opts::clap()\n-            .get_matches_from_safe(&[\"test\", \"--emit\"])\n+        Opts::command()\n+            .try_get_matches_from(&[\"test\", \"--emit\"])\n             .is_err()\n     );\n     assert!(\n-        !Opts::clap()\n-            .get_matches_from_safe(&[\"test\", \"--\", \"--emit\"])\n+        !Opts::command()\n+            .try_get_matches_from(&[\"test\", \"--\", \"--emit\"])\n             .is_err()\n     );\n }\n \n #[test]\n fn multiple_packages_one_by_one() {\n-    let o = Opts::from_iter(&[\n+    let o = Opts::parse_from(&[\n         \"test\",\n         \"-p\",\n         \"package1\",\n@@ -92,7 +92,7 @@ fn multiple_packages_one_by_one() {\n \n #[test]\n fn multiple_packages_grouped() {\n-    let o = Opts::from_iter(&[\n+    let o = Opts::parse_from(&[\n         \"test\",\n         \"--package\",\n         \"package1\",\n@@ -106,32 +106,36 @@ fn multiple_packages_grouped() {\n \n #[test]\n fn empty_packages_1() {\n-    assert!(Opts::clap().get_matches_from_safe(&[\"test\", \"-p\"]).is_err());\n+    assert!(\n+        Opts::command()\n+            .try_get_matches_from(&[\"test\", \"-p\"])\n+            .is_err()\n+    );\n }\n \n #[test]\n fn empty_packages_2() {\n     assert!(\n-        Opts::clap()\n-            .get_matches_from_safe(&[\"test\", \"-p\", \"--\", \"--check\"])\n+        Opts::command()\n+            .try_get_matches_from(&[\"test\", \"-p\", \"--\", \"--check\"])\n             .is_err()\n     );\n }\n \n #[test]\n fn empty_packages_3() {\n     assert!(\n-        Opts::clap()\n-            .get_matches_from_safe(&[\"test\", \"-p\", \"--verbose\"])\n+        Opts::command()\n+            .try_get_matches_from(&[\"test\", \"-p\", \"--verbose\"])\n             .is_err()\n     );\n }\n \n #[test]\n fn empty_packages_4() {\n     assert!(\n-        Opts::clap()\n-            .get_matches_from_safe(&[\"test\", \"-p\", \"--check\"])\n+        Opts::command()\n+            .try_get_matches_from(&[\"test\", \"-p\", \"--check\"])\n             .is_err()\n     );\n }"}, {"sha": "f6b739e1c2a370b50697591d2b845b13faed86ba", "filename": "src/format-diff/main.rs", "status": "modified", "additions": 23, "deletions": 22, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/91995b6142faf1a5e56e1b7b1cb922504726197c/src%2Fformat-diff%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91995b6142faf1a5e56e1b7b1cb922504726197c/src%2Fformat-diff%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fformat-diff%2Fmain.rs?ref=91995b6142faf1a5e56e1b7b1cb922504726197c", "patch": "@@ -19,8 +19,7 @@ use std::process;\n \n use regex::Regex;\n \n-use structopt::clap::AppSettings;\n-use structopt::StructOpt;\n+use clap::{CommandFactory, Parser};\n \n /// The default pattern of files to format.\n ///\n@@ -37,25 +36,25 @@ enum FormatDiffError {\n     IoError(#[from] io::Error),\n }\n \n-#[derive(StructOpt, Debug)]\n-#[structopt(\n+#[derive(Parser, Debug)]\n+#[clap(\n     name = \"rustfmt-format-diff\",\n-    setting = AppSettings::DisableVersion,\n-    setting = AppSettings::NextLineHelp\n+    disable_version_flag = true,\n+    next_line_help = true\n )]\n pub struct Opts {\n     /// Skip the smallest prefix containing NUMBER slashes\n-    #[structopt(\n-        short = \"p\",\n+    #[clap(\n+        short = 'p',\n         long = \"skip-prefix\",\n         value_name = \"NUMBER\",\n         default_value = \"0\"\n     )]\n     skip_prefix: u32,\n \n     /// Custom pattern selecting file paths to reformat\n-    #[structopt(\n-        short = \"f\",\n+    #[clap(\n+        short = 'f',\n         long = \"filter\",\n         value_name = \"PATTERN\",\n         default_value = DEFAULT_PATTERN\n@@ -65,10 +64,12 @@ pub struct Opts {\n \n fn main() {\n     env_logger::Builder::from_env(\"RUSTFMT_LOG\").init();\n-    let opts = Opts::from_args();\n+    let opts = Opts::parse();\n     if let Err(e) = run(opts) {\n         println!(\"{}\", e);\n-        Opts::clap().print_help().expect(\"cannot write to stdout\");\n+        Opts::command()\n+            .print_help()\n+            .expect(\"cannot write to stdout\");\n         process::exit(1);\n     }\n }\n@@ -230,50 +231,50 @@ mod cmd_line_tests {\n     #[test]\n     fn default_options() {\n         let empty: Vec<String> = vec![];\n-        let o = Opts::from_iter(&empty);\n+        let o = Opts::parse_from(&empty);\n         assert_eq!(DEFAULT_PATTERN, o.filter);\n         assert_eq!(0, o.skip_prefix);\n     }\n \n     #[test]\n     fn good_options() {\n-        let o = Opts::from_iter(&[\"test\", \"-p\", \"10\", \"-f\", r\".*\\.hs\"]);\n+        let o = Opts::parse_from(&[\"test\", \"-p\", \"10\", \"-f\", r\".*\\.hs\"]);\n         assert_eq!(r\".*\\.hs\", o.filter);\n         assert_eq!(10, o.skip_prefix);\n     }\n \n     #[test]\n     fn unexpected_option() {\n         assert!(\n-            Opts::clap()\n-                .get_matches_from_safe(&[\"test\", \"unexpected\"])\n+            Opts::command()\n+                .try_get_matches_from(&[\"test\", \"unexpected\"])\n                 .is_err()\n         );\n     }\n \n     #[test]\n     fn unexpected_flag() {\n         assert!(\n-            Opts::clap()\n-                .get_matches_from_safe(&[\"test\", \"--flag\"])\n+            Opts::command()\n+                .try_get_matches_from(&[\"test\", \"--flag\"])\n                 .is_err()\n         );\n     }\n \n     #[test]\n     fn overridden_option() {\n         assert!(\n-            Opts::clap()\n-                .get_matches_from_safe(&[\"test\", \"-p\", \"10\", \"-p\", \"20\"])\n+            Opts::command()\n+                .try_get_matches_from(&[\"test\", \"-p\", \"10\", \"-p\", \"20\"])\n                 .is_err()\n         );\n     }\n \n     #[test]\n     fn negative_filter() {\n         assert!(\n-            Opts::clap()\n-                .get_matches_from_safe(&[\"test\", \"-p\", \"-1\"])\n+            Opts::command()\n+                .try_get_matches_from(&[\"test\", \"-p\", \"-1\"])\n                 .is_err()\n         );\n     }"}]}