{"sha": "be2fa70c1604f4383463fa4e64cd9f4567ff47e8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJlMmZhNzBjMTYwNGY0MzgzNDYzZmE0ZTY0Y2Q5ZjQ1NjdmZjQ3ZTg=", "commit": {"author": {"name": "knight42", "email": "knight42@mail.ustc.edu.cn", "date": "2016-09-08T10:54:45Z"}, "committer": {"name": "knight42", "email": "knight42@mail.ustc.edu.cn", "date": "2016-09-13T02:16:31Z"}, "message": "Implement std::str::replacen", "tree": {"sha": "f0ac8a915e3c5b516f987bcdaa7e2fa216603eea", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f0ac8a915e3c5b516f987bcdaa7e2fa216603eea"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/be2fa70c1604f4383463fa4e64cd9f4567ff47e8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/be2fa70c1604f4383463fa4e64cd9f4567ff47e8", "html_url": "https://github.com/rust-lang/rust/commit/be2fa70c1604f4383463fa4e64cd9f4567ff47e8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/be2fa70c1604f4383463fa4e64cd9f4567ff47e8/comments", "author": null, "committer": null, "parents": [{"sha": "5531c314a2855aec368e811da6fcd9e98365af51", "url": "https://api.github.com/repos/rust-lang/rust/commits/5531c314a2855aec368e811da6fcd9e98365af51", "html_url": "https://github.com/rust-lang/rust/commit/5531c314a2855aec368e811da6fcd9e98365af51"}], "stats": {"total": 43, "additions": 43, "deletions": 0}, "files": [{"sha": "6a6b450e518632ff0b0666e594290d239bf077f7", "filename": "src/libcollections/str.rs", "status": "modified", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/be2fa70c1604f4383463fa4e64cd9f4567ff47e8/src%2Flibcollections%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be2fa70c1604f4383463fa4e64cd9f4567ff47e8/src%2Flibcollections%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstr.rs?ref=be2fa70c1604f4383463fa4e64cd9f4567ff47e8", "patch": "@@ -1594,6 +1594,49 @@ impl str {\n         result\n     }\n \n+    /// Replaces first N matches of a pattern with another string.\n+    ///\n+    /// `replacen` creates a new [`String`], and copies the data from this string slice into it.\n+    /// While doing so, it attempts to find matches of a pattern. If it finds any, it\n+    /// replaces them with the replacement string slice at most `N` times.\n+    ///\n+    /// [`String`]: string/struct.String.html\n+    ///\n+    /// # Examples\n+    ///\n+    /// Basic usage:\n+    ///\n+    /// ```\n+    /// # #![feature(str_replacen)]\n+    /// let s = \"foo foo 123 foo\";\n+    /// assert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\n+    /// assert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\n+    /// assert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n+    /// ```\n+    ///\n+    /// When the pattern doesn't match:\n+    ///\n+    /// ```\n+    /// # #![feature(str_replacen)]\n+    /// let s = \"this is old\";\n+    /// assert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n+    /// ```\n+    #[unstable(feature = \"str_replacen\",\n+               issue = \"36436\",\n+               reason = \"only need to replace first N matches\")]\n+    pub fn replacen<'a, P: Pattern<'a>>(&'a self, pat: P, to: &str, count: usize) -> String {\n+        // Hope to reduce the times of re-allocation\n+        let mut result = String::with_capacity(32);\n+        let mut last_end = 0;\n+        for (start, part) in self.match_indices(pat).take(count) {\n+            result.push_str(unsafe { self.slice_unchecked(last_end, start) });\n+            result.push_str(to);\n+            last_end = start + part.len();\n+        }\n+        result.push_str(unsafe { self.slice_unchecked(last_end, self.len()) });\n+        result\n+    }\n+\n     /// Returns the lowercase equivalent of this string slice, as a new [`String`].\n     ///\n     /// 'Lowercase' is defined according to the terms of the Unicode Derived Core Property"}]}