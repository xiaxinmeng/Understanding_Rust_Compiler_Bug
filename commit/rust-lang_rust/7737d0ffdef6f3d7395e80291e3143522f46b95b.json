{"sha": "7737d0ffdef6f3d7395e80291e3143522f46b95b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc3MzdkMGZmZGVmNmYzZDczOTVlODAyOTFlMzE0MzUyMmY0NmI5NWI=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-01-31T05:43:33Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-02-13T14:16:29Z"}, "message": "parser: unify item list parsing.\n\nas a consequence, `trait X { #![attr] }` becomes legal.", "tree": {"sha": "0cbebb6e1132f81e11d6771f52bb38b9d9618be1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0cbebb6e1132f81e11d6771f52bb38b9d9618be1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7737d0ffdef6f3d7395e80291e3143522f46b95b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7737d0ffdef6f3d7395e80291e3143522f46b95b", "html_url": "https://github.com/rust-lang/rust/commit/7737d0ffdef6f3d7395e80291e3143522f46b95b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7737d0ffdef6f3d7395e80291e3143522f46b95b/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9fed2d587c9d9f28003e23255b863897bd22a8b2", "url": "https://api.github.com/repos/rust-lang/rust/commits/9fed2d587c9d9f28003e23255b863897bd22a8b2", "html_url": "https://github.com/rust-lang/rust/commit/9fed2d587c9d9f28003e23255b863897bd22a8b2"}], "stats": {"total": 151, "additions": 80, "deletions": 71}, "files": [{"sha": "75938470b6fca7b248eae93d4106e7b9897f32af", "filename": "src/librustc_ast_pretty/pprust.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7737d0ffdef6f3d7395e80291e3143522f46b95b/src%2Flibrustc_ast_pretty%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7737d0ffdef6f3d7395e80291e3143522f46b95b/src%2Flibrustc_ast_pretty%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_pretty%2Fpprust.rs?ref=7737d0ffdef6f3d7395e80291e3143522f46b95b", "patch": "@@ -1269,6 +1269,7 @@ impl<'a> State<'a> {\n                 self.print_where_clause(&generics.where_clause);\n                 self.s.word(\" \");\n                 self.bopen();\n+                self.print_inner_attributes(&item.attrs);\n                 for trait_item in trait_items {\n                     self.print_assoc_item(trait_item);\n                 }"}, {"sha": "0968e92c20314aab68c90efcf45e77a03b27b9a7", "filename": "src/librustc_expand/expand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7737d0ffdef6f3d7395e80291e3143522f46b95b/src%2Flibrustc_expand%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7737d0ffdef6f3d7395e80291e3143522f46b95b/src%2Flibrustc_expand%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Fexpand.rs?ref=7737d0ffdef6f3d7395e80291e3143522f46b95b", "patch": "@@ -867,7 +867,7 @@ pub fn parse_ast_fragment<'a>(\n         AstFragmentKind::ForeignItems => {\n             let mut items = SmallVec::new();\n             while this.token != token::Eof {\n-                items.push(this.parse_foreign_item()?);\n+                items.push(this.parse_foreign_item(&mut false)?);\n             }\n             AstFragment::ForeignItems(items)\n         }"}, {"sha": "f4ca84b005b840e2f67668a1a0d70cada475030f", "filename": "src/librustc_parse/parser/item.rs", "status": "modified", "additions": 46, "deletions": 56, "changes": 102, "blob_url": "https://github.com/rust-lang/rust/blob/7737d0ffdef6f3d7395e80291e3143522f46b95b/src%2Flibrustc_parse%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7737d0ffdef6f3d7395e80291e3143522f46b95b/src%2Flibrustc_parse%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fitem.rs?ref=7737d0ffdef6f3d7395e80291e3143522f46b95b", "patch": "@@ -515,7 +515,7 @@ impl<'a> Parser<'a> {\n \n         generics.where_clause = self.parse_where_clause()?;\n \n-        let (impl_items, attrs) = self.parse_impl_body()?;\n+        let (impl_items, attrs) = self.parse_item_list(|p, at_end| p.parse_impl_item(at_end))?;\n \n         let item_kind = match ty_second {\n             Some(ty_second) => {\n@@ -571,15 +571,21 @@ impl<'a> Parser<'a> {\n         Ok((Ident::invalid(), item_kind, Some(attrs)))\n     }\n \n-    fn parse_impl_body(&mut self) -> PResult<'a, (Vec<P<AssocItem>>, Vec<Attribute>)> {\n+    fn parse_item_list<T>(\n+        &mut self,\n+        mut parse_item: impl FnMut(&mut Parser<'a>, &mut bool) -> PResult<'a, T>,\n+    ) -> PResult<'a, (Vec<T>, Vec<Attribute>)> {\n         self.expect(&token::OpenDelim(token::Brace))?;\n         let attrs = self.parse_inner_attributes()?;\n \n-        let mut impl_items = Vec::new();\n+        let mut items = Vec::new();\n         while !self.eat(&token::CloseDelim(token::Brace)) {\n+            if self.recover_doc_comment_before_brace() {\n+                continue;\n+            }\n             let mut at_end = false;\n-            match self.parse_impl_item(&mut at_end) {\n-                Ok(impl_item) => impl_items.push(impl_item),\n+            match parse_item(self, &mut at_end) {\n+                Ok(item) => items.push(item),\n                 Err(mut err) => {\n                     err.emit();\n                     if !at_end {\n@@ -589,7 +595,30 @@ impl<'a> Parser<'a> {\n                 }\n             }\n         }\n-        Ok((impl_items, attrs))\n+        Ok((items, attrs))\n+    }\n+\n+    /// Recover on a doc comment before `}`.\n+    fn recover_doc_comment_before_brace(&mut self) -> bool {\n+        if let token::DocComment(_) = self.token.kind {\n+            if self.look_ahead(1, |tok| tok == &token::CloseDelim(token::Brace)) {\n+                struct_span_err!(\n+                    self.diagnostic(),\n+                    self.token.span,\n+                    E0584,\n+                    \"found a documentation comment that doesn't document anything\",\n+                )\n+                .span_label(self.token.span, \"this doc comment doesn't document anything\")\n+                .help(\n+                    \"doc comments must come before what they document, maybe a \\\n+                    comment was intended with `//`?\",\n+                )\n+                .emit();\n+                self.bump();\n+                return true;\n+            }\n+        }\n+        false\n     }\n \n     /// Parses defaultness (i.e., `default` or nothing).\n@@ -660,39 +689,8 @@ impl<'a> Parser<'a> {\n         } else {\n             // It's a normal trait.\n             tps.where_clause = self.parse_where_clause()?;\n-            self.expect(&token::OpenDelim(token::Brace))?;\n-            let mut trait_items = vec![];\n-            while !self.eat(&token::CloseDelim(token::Brace)) {\n-                if let token::DocComment(_) = self.token.kind {\n-                    if self.look_ahead(1, |tok| tok == &token::CloseDelim(token::Brace)) {\n-                        struct_span_err!(\n-                            self.diagnostic(),\n-                            self.token.span,\n-                            E0584,\n-                            \"found a documentation comment that doesn't document anything\",\n-                        )\n-                        .help(\n-                            \"doc comments must come before what they document, maybe a \\\n-                            comment was intended with `//`?\",\n-                        )\n-                        .emit();\n-                        self.bump();\n-                        continue;\n-                    }\n-                }\n-                let mut at_end = false;\n-                match self.parse_trait_item(&mut at_end) {\n-                    Ok(item) => trait_items.push(item),\n-                    Err(mut e) => {\n-                        e.emit();\n-                        if !at_end {\n-                            self.consume_block(token::Brace, ConsumeClosingDelim::Yes);\n-                            break;\n-                        }\n-                    }\n-                }\n-            }\n-            Ok((ident, ItemKind::Trait(is_auto, unsafety, tps, bounds, trait_items), None))\n+            let (items, attrs) = self.parse_item_list(|p, at_end| p.parse_trait_item(at_end))?;\n+            Ok((ident, ItemKind::Trait(is_auto, unsafety, tps, bounds, items), Some(attrs)))\n         }\n     }\n \n@@ -942,26 +940,18 @@ impl<'a> Parser<'a> {\n         &mut self,\n         lo: Span,\n         abi: Option<StrLit>,\n-        visibility: Visibility,\n+        vis: Visibility,\n         mut attrs: Vec<Attribute>,\n     ) -> PResult<'a, P<Item>> {\n-        self.expect(&token::OpenDelim(token::Brace))?;\n-\n-        attrs.extend(self.parse_inner_attributes()?);\n-\n-        let mut foreign_items = vec![];\n-        while !self.eat(&token::CloseDelim(token::Brace)) {\n-            foreign_items.push(self.parse_foreign_item()?);\n-        }\n-\n-        let prev_span = self.prev_span;\n-        let m = ast::ForeignMod { abi, items: foreign_items };\n-        let invalid = Ident::invalid();\n-        Ok(self.mk_item(lo.to(prev_span), invalid, ItemKind::ForeignMod(m), visibility, attrs))\n+        let (items, iattrs) = self.parse_item_list(|p, at_end| p.parse_foreign_item(at_end))?;\n+        attrs.extend(iattrs);\n+        let span = lo.to(self.prev_span);\n+        let m = ast::ForeignMod { abi, items };\n+        Ok(self.mk_item(span, Ident::invalid(), ItemKind::ForeignMod(m), vis, attrs))\n     }\n \n     /// Parses a foreign item (one in an `extern { ... }` block).\n-    pub fn parse_foreign_item(&mut self) -> PResult<'a, P<ForeignItem>> {\n+    pub fn parse_foreign_item(&mut self, at_end: &mut bool) -> PResult<'a, P<ForeignItem>> {\n         maybe_whole!(self, NtForeignItem, |ni| ni);\n \n         let mut attrs = self.parse_outer_attributes()?;\n@@ -973,7 +963,7 @@ impl<'a> Parser<'a> {\n             self.parse_item_foreign_type()?\n         } else if self.check_fn_front_matter() {\n             // FOREIGN FUNCTION ITEM\n-            let (ident, sig, generics, body) = self.parse_fn(&mut false, &mut attrs, |_| true)?;\n+            let (ident, sig, generics, body) = self.parse_fn(at_end, &mut attrs, |_| true)?;\n             (ident, ForeignItemKind::Fn(sig, generics, body))\n         } else if self.is_static_global() {\n             // FOREIGN STATIC ITEM\n@@ -991,7 +981,7 @@ impl<'a> Parser<'a> {\n                 )\n                 .emit();\n             self.parse_item_foreign_static()?\n-        } else if let Some(mac) = self.parse_assoc_macro_invoc(\"extern\", Some(&vis), &mut false)? {\n+        } else if let Some(mac) = self.parse_assoc_macro_invoc(\"extern\", Some(&vis), at_end)? {\n             (Ident::invalid(), ForeignItemKind::Macro(mac))\n         } else {\n             if !attrs.is_empty() {"}, {"sha": "bb4fb1459bd64597037bb9afad15ac31bb73bec0", "filename": "src/test/pretty/trait-inner-attr.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7737d0ffdef6f3d7395e80291e3143522f46b95b/src%2Ftest%2Fpretty%2Ftrait-inner-attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7737d0ffdef6f3d7395e80291e3143522f46b95b/src%2Ftest%2Fpretty%2Ftrait-inner-attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Ftrait-inner-attr.rs?ref=7737d0ffdef6f3d7395e80291e3143522f46b95b", "patch": "@@ -0,0 +1,7 @@\n+// pp-exact\n+\n+trait Foo {\n+    #![allow(bar)]\n+}\n+\n+fn main() { }"}, {"sha": "ea899dca7b221d453848bee5712b39131f189e49", "filename": "src/test/ui/parser/attrs-after-extern-mod.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7737d0ffdef6f3d7395e80291e3143522f46b95b/src%2Ftest%2Fui%2Fparser%2Fattrs-after-extern-mod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7737d0ffdef6f3d7395e80291e3143522f46b95b/src%2Ftest%2Fui%2Fparser%2Fattrs-after-extern-mod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fattrs-after-extern-mod.rs?ref=7737d0ffdef6f3d7395e80291e3143522f46b95b", "patch": "@@ -1,13 +1,7 @@\n-// Constants (static variables) can be used to match in patterns, but mutable\n-// statics cannot. This ensures that there's some form of error if this is\n-// attempted.\n+// Make sure there's an error when given `extern { ... #[attr] }`.\n \n-extern crate libc;\n+fn main() {}\n \n extern {\n-    static mut rust_dbg_static_mut: libc::c_int;\n-    pub fn rust_dbg_static_mut_check_four();\n     #[cfg(stage37)] //~ ERROR expected item after attributes\n }\n-\n-pub fn main() {}"}, {"sha": "a02e738a2c38e1232ff610d7c83dcc79cb49ad45", "filename": "src/test/ui/parser/attrs-after-extern-mod.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7737d0ffdef6f3d7395e80291e3143522f46b95b/src%2Ftest%2Fui%2Fparser%2Fattrs-after-extern-mod.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7737d0ffdef6f3d7395e80291e3143522f46b95b/src%2Ftest%2Fui%2Fparser%2Fattrs-after-extern-mod.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fattrs-after-extern-mod.stderr?ref=7737d0ffdef6f3d7395e80291e3143522f46b95b", "patch": "@@ -1,5 +1,5 @@\n error: expected item after attributes\n-  --> $DIR/attrs-after-extern-mod.rs:10:19\n+  --> $DIR/attrs-after-extern-mod.rs:6:19\n    |\n LL |     #[cfg(stage37)]\n    |                   ^"}, {"sha": "040206b80ffd05d1b6be8a863c981e0557044b64", "filename": "src/test/ui/parser/doc-before-extern-rbrace.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7737d0ffdef6f3d7395e80291e3143522f46b95b/src%2Ftest%2Fui%2Fparser%2Fdoc-before-extern-rbrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7737d0ffdef6f3d7395e80291e3143522f46b95b/src%2Ftest%2Fui%2Fparser%2Fdoc-before-extern-rbrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fdoc-before-extern-rbrace.rs?ref=7737d0ffdef6f3d7395e80291e3143522f46b95b", "patch": "@@ -1,4 +1,6 @@\n+fn main() {}\n+\n extern {\n     /// hi\n-    //~^ ERROR expected item after doc comment\n+    //~^ ERROR found a documentation comment that doesn't document anything\n }"}, {"sha": "0edceb268a7f5a37dff21b7fe900b0cf5f1e7464", "filename": "src/test/ui/parser/doc-before-extern-rbrace.stderr", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7737d0ffdef6f3d7395e80291e3143522f46b95b/src%2Ftest%2Fui%2Fparser%2Fdoc-before-extern-rbrace.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7737d0ffdef6f3d7395e80291e3143522f46b95b/src%2Ftest%2Fui%2Fparser%2Fdoc-before-extern-rbrace.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fdoc-before-extern-rbrace.stderr?ref=7737d0ffdef6f3d7395e80291e3143522f46b95b", "patch": "@@ -1,8 +1,11 @@\n-error: expected item after doc comment\n-  --> $DIR/doc-before-extern-rbrace.rs:2:5\n+error[E0584]: found a documentation comment that doesn't document anything\n+  --> $DIR/doc-before-extern-rbrace.rs:4:5\n    |\n LL |     /// hi\n    |     ^^^^^^ this doc comment doesn't document anything\n+   |\n+   = help: doc comments must come before what they document, maybe a comment was intended with `//`?\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0584`."}, {"sha": "246255a0a46751f2d25f6df6dd48e07fcbd63f64", "filename": "src/test/ui/parser/doc-inside-trait-item.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7737d0ffdef6f3d7395e80291e3143522f46b95b/src%2Ftest%2Fui%2Fparser%2Fdoc-inside-trait-item.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7737d0ffdef6f3d7395e80291e3143522f46b95b/src%2Ftest%2Fui%2Fparser%2Fdoc-inside-trait-item.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fdoc-inside-trait-item.stderr?ref=7737d0ffdef6f3d7395e80291e3143522f46b95b", "patch": "@@ -2,7 +2,7 @@ error[E0584]: found a documentation comment that doesn't document anything\n   --> $DIR/doc-inside-trait-item.rs:3:5\n    |\n LL |     /// empty doc\n-   |     ^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^ this doc comment doesn't document anything\n    |\n    = help: doc comments must come before what they document, maybe a comment was intended with `//`?\n "}, {"sha": "edbf508ecdb76884b8479fb8b1d66bb6e9cbe864", "filename": "src/test/ui/parser/duplicate-visibility.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7737d0ffdef6f3d7395e80291e3143522f46b95b/src%2Ftest%2Fui%2Fparser%2Fduplicate-visibility.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7737d0ffdef6f3d7395e80291e3143522f46b95b/src%2Ftest%2Fui%2Fparser%2Fduplicate-visibility.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fduplicate-visibility.rs?ref=7737d0ffdef6f3d7395e80291e3143522f46b95b", "patch": "@@ -1,4 +1,7 @@\n // error-pattern: expected one of `(`, `async`, `const`, `extern`, `fn`\n+\n+fn main() {}\n+\n extern {\n     pub pub fn foo();\n }"}, {"sha": "92cf3487969437814199951cd916529db4eb65b7", "filename": "src/test/ui/parser/duplicate-visibility.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7737d0ffdef6f3d7395e80291e3143522f46b95b/src%2Ftest%2Fui%2Fparser%2Fduplicate-visibility.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7737d0ffdef6f3d7395e80291e3143522f46b95b/src%2Ftest%2Fui%2Fparser%2Fduplicate-visibility.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fduplicate-visibility.stderr?ref=7737d0ffdef6f3d7395e80291e3143522f46b95b", "patch": "@@ -1,5 +1,5 @@\n error: expected one of `(`, `async`, `const`, `extern`, `fn`, `static`, `type`, or `unsafe`, found keyword `pub`\n-  --> $DIR/duplicate-visibility.rs:3:9\n+  --> $DIR/duplicate-visibility.rs:6:9\n    |\n LL |     pub pub fn foo();\n    |         ^^^ expected one of 8 possible tokens"}, {"sha": "8dba6b362cdfaf4f5d2c161b01f01f2da8a0fe47", "filename": "src/test/ui/parser/inner-attr-in-trait-def.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/7737d0ffdef6f3d7395e80291e3143522f46b95b/src%2Ftest%2Fui%2Fparser%2Finner-attr-in-trait-def.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7737d0ffdef6f3d7395e80291e3143522f46b95b/src%2Ftest%2Fui%2Fparser%2Finner-attr-in-trait-def.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Finner-attr-in-trait-def.rs?ref=7737d0ffdef6f3d7395e80291e3143522f46b95b", "patch": "@@ -0,0 +1,9 @@\n+// check-pass\n+\n+#![deny(non_camel_case_types)]\n+\n+fn main() {}\n+\n+trait foo_bar {\n+    #![allow(non_camel_case_types)]\n+}"}]}