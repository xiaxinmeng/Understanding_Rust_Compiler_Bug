{"sha": "670efd5720b31e235c8e97f49f612e685db97b93", "node_id": "C_kwDOAAsO6NoAKDY3MGVmZDU3MjBiMzFlMjM1YzhlOTdmNDlmNjEyZTY4NWRiOTdiOTM", "commit": {"author": {"name": "Jason Newcomb", "email": "jsnewcomb@pm.me", "date": "2022-04-13T14:13:39Z"}, "committer": {"name": "Jason Newcomb", "email": "jsnewcomb@pm.me", "date": "2022-08-08T01:55:08Z"}, "message": "Don't lint `default_trait_access` in proc-macro expansions", "tree": {"sha": "0f90d350633182c21ad807447e39eadd64bd29fa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0f90d350633182c21ad807447e39eadd64bd29fa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/670efd5720b31e235c8e97f49f612e685db97b93", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/670efd5720b31e235c8e97f49f612e685db97b93", "html_url": "https://github.com/rust-lang/rust/commit/670efd5720b31e235c8e97f49f612e685db97b93", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/670efd5720b31e235c8e97f49f612e685db97b93/comments", "author": {"login": "Jarcho", "id": 7761774, "node_id": "MDQ6VXNlcjc3NjE3NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7761774?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jarcho", "html_url": "https://github.com/Jarcho", "followers_url": "https://api.github.com/users/Jarcho/followers", "following_url": "https://api.github.com/users/Jarcho/following{/other_user}", "gists_url": "https://api.github.com/users/Jarcho/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jarcho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jarcho/subscriptions", "organizations_url": "https://api.github.com/users/Jarcho/orgs", "repos_url": "https://api.github.com/users/Jarcho/repos", "events_url": "https://api.github.com/users/Jarcho/events{/privacy}", "received_events_url": "https://api.github.com/users/Jarcho/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Jarcho", "id": 7761774, "node_id": "MDQ6VXNlcjc3NjE3NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7761774?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jarcho", "html_url": "https://github.com/Jarcho", "followers_url": "https://api.github.com/users/Jarcho/followers", "following_url": "https://api.github.com/users/Jarcho/following{/other_user}", "gists_url": "https://api.github.com/users/Jarcho/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jarcho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jarcho/subscriptions", "organizations_url": "https://api.github.com/users/Jarcho/orgs", "repos_url": "https://api.github.com/users/Jarcho/repos", "events_url": "https://api.github.com/users/Jarcho/events{/privacy}", "received_events_url": "https://api.github.com/users/Jarcho/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4ae582ef88adbdcd3a01686a7a61120efd7a208b", "url": "https://api.github.com/repos/rust-lang/rust/commits/4ae582ef88adbdcd3a01686a7a61120efd7a208b", "html_url": "https://github.com/rust-lang/rust/commit/4ae582ef88adbdcd3a01686a7a61120efd7a208b"}], "stats": {"total": 43, "additions": 29, "deletions": 14}, "files": [{"sha": "74f7df611778ec32d61d9a056f23dccd727756ec", "filename": "clippy_lints/src/default.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/670efd5720b31e235c8e97f49f612e685db97b93/clippy_lints%2Fsrc%2Fdefault.rs", "raw_url": "https://github.com/rust-lang/rust/raw/670efd5720b31e235c8e97f49f612e685db97b93/clippy_lints%2Fsrc%2Fdefault.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdefault.rs?ref=670efd5720b31e235c8e97f49f612e685db97b93", "patch": "@@ -1,7 +1,9 @@\n use clippy_utils::diagnostics::{span_lint_and_note, span_lint_and_sugg};\n use clippy_utils::source::snippet_with_macro_callsite;\n use clippy_utils::ty::{has_drop, is_copy};\n-use clippy_utils::{any_parent_is_automatically_derived, contains_name, get_parent_expr, match_def_path, paths};\n+use clippy_utils::{\n+    any_parent_is_automatically_derived, contains_name, get_parent_expr, is_from_proc_macro, match_def_path, paths,\n+};\n use if_chain::if_chain;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_errors::Applicability;\n@@ -94,6 +96,7 @@ impl<'tcx> LateLintPass<'tcx> for Default {\n             if let QPath::Resolved(None, _path) = qpath;\n             let expr_ty = cx.typeck_results().expr_ty(expr);\n             if let ty::Adt(def, ..) = expr_ty.kind();\n+            if !is_from_proc_macro(cx, expr);\n             then {\n                 // TODO: Work out a way to put \"whatever the imported way of referencing\n                 // this type in this file\" rather than a fully-qualified type."}, {"sha": "f546a788c5d39a6120c5ef1ee4e44fb7b44230f8", "filename": "clippy_utils/src/check_proc_macro.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/670efd5720b31e235c8e97f49f612e685db97b93/clippy_utils%2Fsrc%2Fcheck_proc_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/670efd5720b31e235c8e97f49f612e685db97b93/clippy_utils%2Fsrc%2Fcheck_proc_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fcheck_proc_macro.rs?ref=670efd5720b31e235c8e97f49f612e685db97b93", "patch": "@@ -16,7 +16,7 @@ use rustc_ast::ast::{IntTy, LitIntType, LitKind, StrStyle, UintTy};\n use rustc_hir::{\n     Block, BlockCheckMode, Closure, Destination, Expr, ExprKind, FieldDef, FnHeader, Impl, ImplItem, ImplItemKind,\n     IsAuto, Item, ItemKind, LoopSource, MatchSource, QPath, TraitItem, TraitItemKind, UnOp, UnsafeSource, Unsafety,\n-    Variant, VariantData, VisibilityKind, YieldSource,\n+    Variant, VariantData, YieldSource,\n };\n use rustc_lint::{LateContext, LintContext};\n use rustc_middle::ty::TyCtxt;\n@@ -196,7 +196,7 @@ fn item_search_pat(item: &Item<'_>) -> (Pat, Pat) {\n         ItemKind::Impl(_) => (Pat::Str(\"impl\"), Pat::Str(\"}\")),\n         _ => return (Pat::Str(\"\"), Pat::Str(\"\")),\n     };\n-    if matches!(item.vis.node, VisibilityKind::Inherited) {\n+    if item.vis_span.is_empty() {\n         (start_pat, end_pat)\n     } else {\n         (Pat::Str(\"pub\"), end_pat)\n@@ -217,15 +217,15 @@ fn impl_item_search_pat(item: &ImplItem<'_>) -> (Pat, Pat) {\n         ImplItemKind::TyAlias(..) => (Pat::Str(\"type\"), Pat::Str(\";\")),\n         ImplItemKind::Fn(sig, ..) => (fn_header_search_pat(sig.header), Pat::Str(\"\")),\n     };\n-    if matches!(item.vis.node, VisibilityKind::Inherited) {\n+    if item.vis_span.is_empty() {\n         (start_pat, end_pat)\n     } else {\n         (Pat::Str(\"pub\"), end_pat)\n     }\n }\n \n fn field_def_search_pat(def: &FieldDef<'_>) -> (Pat, Pat) {\n-    if matches!(def.vis.node, VisibilityKind::Inherited) {\n+    if def.vis_span.is_empty() {\n         if def.is_positional() {\n             (Pat::Str(\"\"), Pat::Str(\"\"))\n         } else {"}, {"sha": "fce66eb175963ee4b78247e85e5d12545567dbcb", "filename": "tests/ui/default_trait_access.fixed", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/670efd5720b31e235c8e97f49f612e685db97b93/tests%2Fui%2Fdefault_trait_access.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/670efd5720b31e235c8e97f49f612e685db97b93/tests%2Fui%2Fdefault_trait_access.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdefault_trait_access.fixed?ref=670efd5720b31e235c8e97f49f612e685db97b93", "patch": "@@ -1,8 +1,12 @@\n // run-rustfix\n+// aux-build: proc_macro_with_span.rs\n \n #![allow(unused_imports, dead_code)]\n #![deny(clippy::default_trait_access)]\n \n+extern crate proc_macro_with_span;\n+\n+use proc_macro_with_span::with_span;\n use std::default;\n use std::default::Default as D2;\n use std::string;\n@@ -51,6 +55,8 @@ fn main() {\n         ..Default::default()\n     };\n \n+    let _s21: String = with_span!(s Default::default());\n+\n     println!(\n         \"[{}] [{}] [{}] [{}] [{}] [{}] [{}] [{}] [{}] [{:?}] [{:?}] [{:?}] [{:?}] [{:?}] [{:?}] [{:?}] [{:?}] [{:?}] [{:?}] [{:?}]\",\n         s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19, s20,"}, {"sha": "3e8e898b7bc61aa8311ae64e29059105747af577", "filename": "tests/ui/default_trait_access.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/670efd5720b31e235c8e97f49f612e685db97b93/tests%2Fui%2Fdefault_trait_access.rs", "raw_url": "https://github.com/rust-lang/rust/raw/670efd5720b31e235c8e97f49f612e685db97b93/tests%2Fui%2Fdefault_trait_access.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdefault_trait_access.rs?ref=670efd5720b31e235c8e97f49f612e685db97b93", "patch": "@@ -1,8 +1,12 @@\n // run-rustfix\n+// aux-build: proc_macro_with_span.rs\n \n #![allow(unused_imports, dead_code)]\n #![deny(clippy::default_trait_access)]\n \n+extern crate proc_macro_with_span;\n+\n+use proc_macro_with_span::with_span;\n use std::default;\n use std::default::Default as D2;\n use std::string;\n@@ -51,6 +55,8 @@ fn main() {\n         ..Default::default()\n     };\n \n+    let _s21: String = with_span!(s Default::default());\n+\n     println!(\n         \"[{}] [{}] [{}] [{}] [{}] [{}] [{}] [{}] [{}] [{:?}] [{:?}] [{:?}] [{:?}] [{:?}] [{:?}] [{:?}] [{:?}] [{:?}] [{:?}] [{:?}]\",\n         s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19, s20,"}, {"sha": "3493de37a55be55beb0d9d736bd2ea6a882581c2", "filename": "tests/ui/default_trait_access.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/670efd5720b31e235c8e97f49f612e685db97b93/tests%2Fui%2Fdefault_trait_access.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/670efd5720b31e235c8e97f49f612e685db97b93/tests%2Fui%2Fdefault_trait_access.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdefault_trait_access.stderr?ref=670efd5720b31e235c8e97f49f612e685db97b93", "patch": "@@ -1,53 +1,53 @@\n error: calling `std::string::String::default()` is more clear than this expression\n-  --> $DIR/default_trait_access.rs:11:22\n+  --> $DIR/default_trait_access.rs:15:22\n    |\n LL |     let s1: String = Default::default();\n    |                      ^^^^^^^^^^^^^^^^^^ help: try: `std::string::String::default()`\n    |\n note: the lint level is defined here\n-  --> $DIR/default_trait_access.rs:4:9\n+  --> $DIR/default_trait_access.rs:5:9\n    |\n LL | #![deny(clippy::default_trait_access)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: calling `std::string::String::default()` is more clear than this expression\n-  --> $DIR/default_trait_access.rs:15:22\n+  --> $DIR/default_trait_access.rs:19:22\n    |\n LL |     let s3: String = D2::default();\n    |                      ^^^^^^^^^^^^^ help: try: `std::string::String::default()`\n \n error: calling `std::string::String::default()` is more clear than this expression\n-  --> $DIR/default_trait_access.rs:17:22\n+  --> $DIR/default_trait_access.rs:21:22\n    |\n LL |     let s4: String = std::default::Default::default();\n    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::string::String::default()`\n \n error: calling `std::string::String::default()` is more clear than this expression\n-  --> $DIR/default_trait_access.rs:21:22\n+  --> $DIR/default_trait_access.rs:25:22\n    |\n LL |     let s6: String = default::Default::default();\n    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::string::String::default()`\n \n error: calling `GenericDerivedDefault::default()` is more clear than this expression\n-  --> $DIR/default_trait_access.rs:31:46\n+  --> $DIR/default_trait_access.rs:35:46\n    |\n LL |     let s11: GenericDerivedDefault<String> = Default::default();\n    |                                              ^^^^^^^^^^^^^^^^^^ help: try: `GenericDerivedDefault::default()`\n \n error: calling `TupleDerivedDefault::default()` is more clear than this expression\n-  --> $DIR/default_trait_access.rs:37:36\n+  --> $DIR/default_trait_access.rs:41:36\n    |\n LL |     let s14: TupleDerivedDefault = Default::default();\n    |                                    ^^^^^^^^^^^^^^^^^^ help: try: `TupleDerivedDefault::default()`\n \n error: calling `ArrayDerivedDefault::default()` is more clear than this expression\n-  --> $DIR/default_trait_access.rs:39:36\n+  --> $DIR/default_trait_access.rs:43:36\n    |\n LL |     let s15: ArrayDerivedDefault = Default::default();\n    |                                    ^^^^^^^^^^^^^^^^^^ help: try: `ArrayDerivedDefault::default()`\n \n error: calling `TupleStructDerivedDefault::default()` is more clear than this expression\n-  --> $DIR/default_trait_access.rs:43:42\n+  --> $DIR/default_trait_access.rs:47:42\n    |\n LL |     let s17: TupleStructDerivedDefault = Default::default();\n    |                                          ^^^^^^^^^^^^^^^^^^ help: try: `TupleStructDerivedDefault::default()`"}]}