{"sha": "6b3cf63bf568cab4f8e05ea483ad97d5ea0e2eec", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZiM2NmNjNiZjU2OGNhYjRmOGUwNWVhNDgzYWQ5N2Q1ZWEwZTJlZWM=", "commit": {"author": {"name": "flip1995", "email": "hello@philkrones.com", "date": "2020-05-22T12:45:51Z"}, "committer": {"name": "flip1995", "email": "hello@philkrones.com", "date": "2020-05-22T12:45:51Z"}, "message": "Fix dogfood fallout", "tree": {"sha": "7a9ea07db0eb39ca68b6e4db9d2af98c2a74f3d1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7a9ea07db0eb39ca68b6e4db9d2af98c2a74f3d1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6b3cf63bf568cab4f8e05ea483ad97d5ea0e2eec", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEqv54U47RUUXZfOLnLO/Nsn7QvnkFAl7HyX8ACgkQLO/Nsn7Q\nvnnorRAAntay1M5HBZ5EJeLWMZTyL49bGyz0rIxKvliuZbhahYFK75pOVbvUeELM\n0iylqwKxhCv/fNzTuGSqexgR+wG253IqQgkOv+ouddUkiGsZRJYNl7Ec4B3GDBoh\nndGoRF26RoRjWf6TtLhSv8J7QettyExJ5rYOqi1jQ9yuidjVP0U9Nwg+wf8VnBd6\nhDDMBQU7s+9yS1NeoapOKtQhKdU+WsFHt9mSWlRdwavpeIrNK5qa0DscSAEMp/nf\nbP2MgYsHtOZLnRPAgqQt/rxO7yuDUgft5Eg8NsGWbMm+skSKMFm38YLQCge0W18o\nl7zybPNsNmFC47MJFwzpqjDTMQzHTX/CuSiW7D2l3lt54qD6EPiysT2AUFZJ54hy\n0uShn54u/OvWZa1lpdQTkoIb8JFrcq0g32pj1huA3yhrBi4ftRKzxoSiTM7IK1ca\n4T5kzN3Gx8nwgxNNZyYDvvFgjWLlWXrJsKX/SXdME0s69aRjU9avtWtxhirPuNzp\nK62T//98PkdCjL/H8WTcMk6j83KowuXzkBfy13bY8znOUbgzr6w58qx8f87ooOYI\nQF4sUnqLLO1no4tVRzUJhYf7tAfq/UPOC3Y//PLTNw7gbw/u+oHatEYJW5rnWoDo\n4IhyzBpIuJCv9VdHaZ+7hc2eFWY04QLXVRHGGRHSVCUDoRwpf7Q=\n=i+RS\n-----END PGP SIGNATURE-----", "payload": "tree 7a9ea07db0eb39ca68b6e4db9d2af98c2a74f3d1\nparent c00268d984b80e408f56b5d8180e2f1a80100c91\nauthor flip1995 <hello@philkrones.com> 1590151551 +0200\ncommitter flip1995 <hello@philkrones.com> 1590151551 +0200\n\nFix dogfood fallout\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6b3cf63bf568cab4f8e05ea483ad97d5ea0e2eec", "html_url": "https://github.com/rust-lang/rust/commit/6b3cf63bf568cab4f8e05ea483ad97d5ea0e2eec", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6b3cf63bf568cab4f8e05ea483ad97d5ea0e2eec/comments", "author": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c00268d984b80e408f56b5d8180e2f1a80100c91", "url": "https://api.github.com/repos/rust-lang/rust/commits/c00268d984b80e408f56b5d8180e2f1a80100c91", "html_url": "https://github.com/rust-lang/rust/commit/c00268d984b80e408f56b5d8180e2f1a80100c91"}], "stats": {"total": 19, "additions": 8, "deletions": 11}, "files": [{"sha": "32b3b7f7947f695eca2b3d4df94c8cd64f238ddc", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 8, "deletions": 11, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/6b3cf63bf568cab4f8e05ea483ad97d5ea0e2eec/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b3cf63bf568cab4f8e05ea483ad97d5ea0e2eec/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=6b3cf63bf568cab4f8e05ea483ad97d5ea0e2eec", "patch": "@@ -1496,17 +1496,14 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Methods {\n             if let ty::Opaque(def_id, _) = ret_ty.kind {\n                 // one of the associated types must be Self\n                 for predicate in cx.tcx.predicates_of(def_id).predicates {\n-                    match predicate.0.kind() {\n-                        ty::PredicateKind::Projection(poly_projection_predicate) => {\n-                            let binder = poly_projection_predicate.ty();\n-                            let associated_type = binder.skip_binder();\n-\n-                            // walk the associated type and check for Self\n-                            if contains_self_ty(associated_type) {\n-                                return;\n-                            }\n-                        },\n-                        _ => {},\n+                    if let ty::PredicateKind::Projection(poly_projection_predicate) = predicate.0.kind() {\n+                        let binder = poly_projection_predicate.ty();\n+                        let associated_type = binder.skip_binder();\n+\n+                        // walk the associated type and check for Self\n+                        if contains_self_ty(associated_type) {\n+                            return;\n+                        }\n                     }\n                 }\n             }"}]}