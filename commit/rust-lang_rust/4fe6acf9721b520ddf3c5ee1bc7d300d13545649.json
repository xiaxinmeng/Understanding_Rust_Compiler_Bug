{"sha": "4fe6acf9721b520ddf3c5ee1bc7d300d13545649", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRmZTZhY2Y5NzIxYjUyMGRkZjNjNWVlMWJjN2QzMDBkMTM1NDU2NDk=", "commit": {"author": {"name": "gnzlbg", "email": "gonzalobg88@gmail.com", "date": "2018-03-15T15:36:02Z"}, "committer": {"name": "gnzlbg", "email": "gonzalobg88@gmail.com", "date": "2018-03-15T15:36:02Z"}, "message": "add compile fail tests", "tree": {"sha": "9d9bb3712ac0a3fb9c34224b37bcb38f7e5f10ce", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9d9bb3712ac0a3fb9c34224b37bcb38f7e5f10ce"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4fe6acf9721b520ddf3c5ee1bc7d300d13545649", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4fe6acf9721b520ddf3c5ee1bc7d300d13545649", "html_url": "https://github.com/rust-lang/rust/commit/4fe6acf9721b520ddf3c5ee1bc7d300d13545649", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4fe6acf9721b520ddf3c5ee1bc7d300d13545649/comments", "author": {"login": "gnzlbg", "id": 904614, "node_id": "MDQ6VXNlcjkwNDYxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/904614?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gnzlbg", "html_url": "https://github.com/gnzlbg", "followers_url": "https://api.github.com/users/gnzlbg/followers", "following_url": "https://api.github.com/users/gnzlbg/following{/other_user}", "gists_url": "https://api.github.com/users/gnzlbg/gists{/gist_id}", "starred_url": "https://api.github.com/users/gnzlbg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gnzlbg/subscriptions", "organizations_url": "https://api.github.com/users/gnzlbg/orgs", "repos_url": "https://api.github.com/users/gnzlbg/repos", "events_url": "https://api.github.com/users/gnzlbg/events{/privacy}", "received_events_url": "https://api.github.com/users/gnzlbg/received_events", "type": "User", "site_admin": false}, "committer": {"login": "gnzlbg", "id": 904614, "node_id": "MDQ6VXNlcjkwNDYxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/904614?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gnzlbg", "html_url": "https://github.com/gnzlbg", "followers_url": "https://api.github.com/users/gnzlbg/followers", "following_url": "https://api.github.com/users/gnzlbg/following{/other_user}", "gists_url": "https://api.github.com/users/gnzlbg/gists{/gist_id}", "starred_url": "https://api.github.com/users/gnzlbg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gnzlbg/subscriptions", "organizations_url": "https://api.github.com/users/gnzlbg/orgs", "repos_url": "https://api.github.com/users/gnzlbg/repos", "events_url": "https://api.github.com/users/gnzlbg/events{/privacy}", "received_events_url": "https://api.github.com/users/gnzlbg/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8478fa2007a2d2a9de21d88ebed13f16b6330393", "url": "https://api.github.com/repos/rust-lang/rust/commits/8478fa2007a2d2a9de21d88ebed13f16b6330393", "html_url": "https://github.com/rust-lang/rust/commit/8478fa2007a2d2a9de21d88ebed13f16b6330393"}], "stats": {"total": 126, "additions": 125, "deletions": 1}, "files": [{"sha": "c0cdd212770623bf6ff827776db7ff55b0d84e68", "filename": "src/librustc_llvm/ffi.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4fe6acf9721b520ddf3c5ee1bc7d300d13545649/src%2Flibrustc_llvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fe6acf9721b520ddf3c5ee1bc7d300d13545649/src%2Flibrustc_llvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Fffi.rs?ref=4fe6acf9721b520ddf3c5ee1bc7d300d13545649", "patch": "@@ -621,6 +621,7 @@ extern \"C\" {\n     pub fn LLVMConstIntGetSExtValue(ConstantVal: ValueRef) -> c_longlong;\n     pub fn LLVMRustConstInt128Get(ConstantVal: ValueRef, SExt: bool,\n                                   high: *mut u64, low: *mut u64) -> bool;\n+    pub fn LLVMConstRealGetDouble (ConstantVal: ValueRef, losesInfo: *mut Bool) -> f64;\n \n \n     // Operations on composite constants\n@@ -1607,6 +1608,7 @@ extern \"C\" {\n     pub fn LLVMRustWriteValueToString(value_ref: ValueRef, s: RustStringRef);\n \n     pub fn LLVMIsAConstantInt(value_ref: ValueRef) -> ValueRef;\n+    pub fn LLVMIsAConstantFP(value_ref: ValueRef) -> ValueRef;\n \n     pub fn LLVMRustPassKind(Pass: PassRef) -> PassKind;\n     pub fn LLVMRustFindAndCreatePass(Pass: *const c_char) -> PassRef;"}, {"sha": "a2c2fad68f6bda4fa0feaae67aeb819b0488f24b", "filename": "src/librustc_trans/common.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/4fe6acf9721b520ddf3c5ee1bc7d300d13545649/src%2Flibrustc_trans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fe6acf9721b520ddf3c5ee1bc7d300d13545649/src%2Flibrustc_trans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcommon.rs?ref=4fe6acf9721b520ddf3c5ee1bc7d300d13545649", "patch": "@@ -270,6 +270,19 @@ pub fn const_get_elt(v: ValueRef, idx: u64) -> ValueRef {\n     }\n }\n \n+pub fn const_get_real(v: ValueRef) -> Option<(f64, bool)> {\n+    unsafe {\n+        if is_const_real(v) {\n+            let mut loses_info: llvm::Bool = ::std::mem::uninitialized();\n+            let r = llvm::LLVMConstRealGetDouble(v, &mut loses_info as *mut llvm::Bool);\n+            let loses_info = if loses_info == 1 { true } else { false };\n+            Some((r, loses_info))\n+        } else {\n+            None\n+        }\n+    }\n+}\n+\n pub fn const_to_uint(v: ValueRef) -> u64 {\n     unsafe {\n         llvm::LLVMConstIntGetZExtValue(v)\n@@ -282,6 +295,13 @@ pub fn is_const_integral(v: ValueRef) -> bool {\n     }\n }\n \n+pub fn is_const_real(v: ValueRef) -> bool {\n+    unsafe {\n+        !llvm::LLVMIsAConstantFP(v).is_null()\n+    }\n+}\n+\n+\n #[inline]\n fn hi_lo_to_u128(lo: u64, hi: u64) -> u128 {\n     ((hi as u128) << 64) | (lo as u128)"}, {"sha": "f1ecad2067b205f952e91d0a99b273d4bebda275", "filename": "src/librustc_trans/intrinsic.rs", "status": "modified", "additions": 27, "deletions": 1, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/4fe6acf9721b520ddf3c5ee1bc7d300d13545649/src%2Flibrustc_trans%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fe6acf9721b520ddf3c5ee1bc7d300d13545649/src%2Flibrustc_trans%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fintrinsic.rs?ref=4fe6acf9721b520ddf3c5ee1bc7d300d13545649", "patch": "@@ -1174,7 +1174,25 @@ fn generic_simd_intrinsic<'a, 'tcx>(\n                     ty::TyFloat(f) => {\n                         // ordered arithmetic reductions take an accumulator\n                         let acc = if $ordered {\n-                            args[1].immediate()\n+                            let acc = args[1].immediate();\n+                            // FIXME: https://bugs.llvm.org/show_bug.cgi?id=36734\n+                            // * if the accumulator of the fadd isn't 0, incorrect\n+                            //   code is generated\n+                            // * if the accumulator of the fmul isn't 1, incorrect\n+                            //   code is generated\n+                            match const_get_real(acc) {\n+                                None => return_error!(\"accumulator of {} is not a constant\", $name),\n+                                Some((v, loses_info)) => {\n+                                    if $name.contains(\"mul\") && v != 1.0_f64 {\n+                                        return_error!(\"accumulator of {} is not 1.0\", $name);\n+                                    } else if $name.contains(\"add\") && v != 0.0_f64 {\n+                                        return_error!(\"accumulator of {} is not 0.0\", $name);\n+                                    } else if loses_info {\n+                                        return_error!(\"accumulator of {} loses information\", $name);\n+                                    }\n+                                }\n+                            }\n+                            acc\n                         } else {\n                             // unordered arithmetic reductions do not:\n                             match f.bit_width() {\n@@ -1248,6 +1266,14 @@ unsupported {} from `{}` with element `{}` of size `{}` to `{}`\"#,\n                              in_elem, in_ty, ret_ty);\n                     args[0].immediate()\n                 } else {\n+                    match in_elem.sty {\n+                        ty::TyInt(_) | ty::TyUint(_) => {},\n+                        _ => {\n+                            return_error!(\"unsupported {} from `{}` with element `{}` to `{}`\",\n+                                          $name, in_ty, in_elem, ret_ty)\n+                        }\n+                    }\n+\n                     // boolean reductions operate on vectors of i1s:\n                     let i1 = Type::i1(bx.cx);\n                     let i1xn = Type::vector(&i1, in_len as u64);"}, {"sha": "b4c069eb10f5cc787abfeed58fc883e28a181b7f", "filename": "src/test/compile-fail/simd-intrinsic-generic-reduction.rs", "status": "added", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/4fe6acf9721b520ddf3c5ee1bc7d300d13545649/src%2Ftest%2Fcompile-fail%2Fsimd-intrinsic-generic-reduction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fe6acf9721b520ddf3c5ee1bc7d300d13545649/src%2Ftest%2Fcompile-fail%2Fsimd-intrinsic-generic-reduction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fsimd-intrinsic-generic-reduction.rs?ref=4fe6acf9721b520ddf3c5ee1bc7d300d13545649", "patch": "@@ -0,0 +1,76 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(repr_simd, platform_intrinsics)]\n+#![allow(non_camel_case_types)]\n+\n+#[repr(simd)]\n+#[derive(Copy, Clone)]\n+pub struct f32x4(pub f32, pub f32, pub f32, pub f32);\n+\n+#[repr(simd)]\n+#[derive(Copy, Clone)]\n+pub struct u32x4(pub u32, pub u32, pub u32, pub u32);\n+\n+\n+extern \"platform-intrinsic\" {\n+    fn simd_reduce_add_ordered<T, U>(x: T, y: U) -> U;\n+    fn simd_reduce_mul_ordered<T, U>(x: T, y: U) -> U;\n+    fn simd_reduce_and<T, U>(x: T) -> U;\n+    fn simd_reduce_or<T, U>(x: T) -> U;\n+    fn simd_reduce_xor<T, U>(x: T) -> U;\n+    fn simd_reduce_all<T>(x: T) -> bool;\n+    fn simd_reduce_any<T>(x: T) -> bool;\n+}\n+\n+fn main() {\n+    let x = u32x4(0, 0, 0, 0);\n+    let z = f32x4(0.0, 0.0, 0.0, 0.0);\n+\n+    unsafe {\n+        simd_reduce_add_ordered(z, 0_f32);\n+        simd_reduce_mul_ordered(z, 1_f32);\n+\n+        simd_reduce_add_ordered(z, 2_f32);\n+        //~^ ERROR accumulator of simd_reduce_add_ordered is not 0.0\n+        simd_reduce_mul_ordered(z, 3_f32);\n+        //~^ ERROR accumulator of simd_reduce_mul_ordered is not 1.0\n+\n+        let _: f32 = simd_reduce_and(x);\n+        //~^ ERROR expected return type `u32` (element of input `u32x4`), found `f32`\n+        let _: f32 = simd_reduce_or(x);\n+        //~^ ERROR expected return type `u32` (element of input `u32x4`), found `f32`\n+        let _: f32 = simd_reduce_xor(x);\n+        //~^ ERROR expected return type `u32` (element of input `u32x4`), found `f32`\n+\n+        let _: f32 = simd_reduce_and(z);\n+        //~^ ERROR unsupported simd_reduce_and from `f32x4` with element `f32` to `f32`\n+        let _: f32 = simd_reduce_or(z);\n+        //~^ ERROR unsupported simd_reduce_or from `f32x4` with element `f32` to `f32`\n+        let _: f32 = simd_reduce_xor(z);\n+        //~^ ERROR unsupported simd_reduce_xor from `f32x4` with element `f32` to `f32`\n+\n+        let _: bool = simd_reduce_all(z);\n+        //~^ ERROR unsupported simd_reduce_all from `f32x4` with element `f32` to `bool`\n+        let _: bool = simd_reduce_any(z);\n+        //~^ ERROR unsupported simd_reduce_any from `f32x4` with element `f32` to `bool`\n+\n+        foo(0_f32);\n+    }\n+}\n+\n+#[inline(never)]\n+unsafe fn foo(x: f32) {\n+    let z = f32x4(0.0, 0.0, 0.0, 0.0);\n+    simd_reduce_add_ordered(z, x);\n+    //~^ ERROR accumulator of simd_reduce_add_ordered is not a constant\n+    simd_reduce_mul_ordered(z, x);\n+    //~^ ERROR accumulator of simd_reduce_mul_ordered is not a constant\n+}"}]}