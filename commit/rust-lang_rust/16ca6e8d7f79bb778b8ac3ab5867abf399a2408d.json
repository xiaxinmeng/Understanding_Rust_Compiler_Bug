{"sha": "16ca6e8d7f79bb778b8ac3ab5867abf399a2408d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE2Y2E2ZThkN2Y3OWJiNzc4YjhhYzNhYjU4NjdhYmYzOTlhMjQwOGQ=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2012-03-22T15:02:34Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2012-03-23T09:49:47Z"}, "message": "Change vector append to no longer rely on an intrinsic\n\nIssue #1981", "tree": {"sha": "d3cd2195c95f377c0be47bc59b75737b1298341f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d3cd2195c95f377c0be47bc59b75737b1298341f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/16ca6e8d7f79bb778b8ac3ab5867abf399a2408d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/16ca6e8d7f79bb778b8ac3ab5867abf399a2408d", "html_url": "https://github.com/rust-lang/rust/commit/16ca6e8d7f79bb778b8ac3ab5867abf399a2408d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/16ca6e8d7f79bb778b8ac3ab5867abf399a2408d/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0545e4a9200a9c971f8b5f95aa9a439ea0c20116", "url": "https://api.github.com/repos/rust-lang/rust/commits/0545e4a9200a9c971f8b5f95aa9a439ea0c20116", "html_url": "https://github.com/rust-lang/rust/commit/0545e4a9200a9c971f8b5f95aa9a439ea0c20116"}], "stats": {"total": 40, "additions": 27, "deletions": 13}, "files": [{"sha": "b2153a5b035ec564e6c7763ed69accfe3887c2fb", "filename": "src/rustc/middle/trans/tvec.rs", "status": "modified", "additions": 27, "deletions": 13, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/16ca6e8d7f79bb778b8ac3ab5867abf399a2408d/src%2Frustc%2Fmiddle%2Ftrans%2Ftvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16ca6e8d7f79bb778b8ac3ab5867abf399a2408d/src%2Frustc%2Fmiddle%2Ftrans%2Ftvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Ftvec.rs?ref=16ca6e8d7f79bb778b8ac3ab5867abf399a2408d", "patch": "@@ -14,6 +14,12 @@ fn get_fill(bcx: block, vptr: ValueRef) -> ValueRef {\n     let _icx = bcx.insn_ctxt(\"tvec::get_fill\");\n     Load(bcx, GEPi(bcx, vptr, [0, abi::vec_elt_fill]))\n }\n+fn set_fill(bcx: block, vptr: ValueRef, fill: ValueRef) {\n+    Store(bcx, fill, GEPi(bcx, vptr, [0, abi::vec_elt_fill]));\n+}\n+fn get_alloc(bcx: block, vptr: ValueRef) -> ValueRef {\n+    Load(bcx, GEPi(bcx, vptr, [0, abi::vec_elt_alloc]))\n+}\n fn get_dataptr(bcx: block, vptr: ValueRef, unit_ty: TypeRef)\n     -> ValueRef {\n     let _icx = bcx.insn_ctxt(\"tvec::get_dataptr\");\n@@ -185,21 +191,29 @@ fn trans_append_literal(bcx: block, vptrptr: ValueRef, vec_ty: ty::t,\n     let _icx = bcx.insn_ctxt(\"tvec::trans_append_literal\");\n     let mut bcx = bcx, ccx = bcx.ccx();\n     let elt_ty = ty::sequence_element_type(bcx.tcx(), vec_ty);\n-    let mut ti = none;\n-    let td = get_tydesc(ccx, elt_ty, ti);\n-    base::lazily_emit_tydesc_glue(ccx, abi::tydesc_field_take_glue, ti);\n-    let opaque_v = PointerCast(bcx, vptrptr,\n-                               T_ptr(T_ptr(ccx.opaque_vec_type)));\n+    let elt_llty = type_of::type_of(ccx, elt_ty);\n+    let elt_sz = shape::llsize_of(ccx, elt_llty);\n+    let scratch = base::alloca(bcx, elt_llty);\n     for val in vals {\n-        let {bcx: e_bcx, val: elt} = base::trans_temp_expr(bcx, val);\n-        bcx = e_bcx;\n-        let r = base::spill_if_immediate(bcx, elt, elt_ty);\n-        let spilled = r.val;\n-        bcx = r.bcx;\n-        Call(bcx, bcx.ccx().upcalls.vec_push,\n-             [opaque_v, td, PointerCast(bcx, spilled, T_ptr(T_i8()))]);\n+        bcx = base::trans_expr_save_in(bcx, val, scratch);\n+        let vptr = Load(bcx, vptrptr);\n+        let old_fill = get_fill(bcx, vptr);\n+        let new_fill = Add(bcx, old_fill, elt_sz);\n+        let do_grow = ICmp(bcx, lib::llvm::IntUGT, new_fill,\n+                           get_alloc(bcx, vptr));\n+        bcx = base::with_cond(bcx, do_grow) {|bcx|\n+            let pt = PointerCast(bcx, vptrptr,\n+                                 T_ptr(T_ptr(ccx.opaque_vec_type)));\n+            Call(bcx, ccx.upcalls.vec_grow, [pt, new_fill]);\n+            bcx\n+        };\n+        let vptr = Load(bcx, vptrptr);\n+        set_fill(bcx, vptr, new_fill);\n+        let targetptr = pointer_add(bcx, get_dataptr(bcx, vptr, elt_llty),\n+                                    old_fill);\n+        bcx = call_memmove(bcx, targetptr, scratch, elt_sz).bcx;\n     }\n-    ret bcx;\n+    bcx\n }\n \n fn trans_add(bcx: block, vec_ty: ty::t, lhs: ValueRef,"}]}