{"sha": "5bc82c0b944dc6c8ed12372b4f79d1a8e3fb0cbd", "node_id": "C_kwDOAAsO6NoAKDViYzgyYzBiOTQ0ZGM2YzhlZDEyMzcyYjRmNzlkMWE4ZTNmYjBjYmQ", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-06-15T23:49:06Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-06-15T23:49:06Z"}, "message": "Auto merge of #98152 - JohnTitor:rollup-osr17j6, r=JohnTitor\n\nRollup of 7 pull requests\n\nSuccessful merges:\n\n - #97202 (os str capacity documentation)\n - #97964 (Fix suggestions for `&a: T` parameters)\n - #98053 (Fix generic impl rustdoc json output)\n - #98059 (Inline `const_eval_select`)\n - #98092 (Fix sidebar items expand collapse)\n - #98119 (Refactor path segment parameter error)\n - #98135 (Add regression test for #93775)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "56f6696279b4d10e418837838e862ae0735c89f8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/56f6696279b4d10e418837838e862ae0735c89f8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5bc82c0b944dc6c8ed12372b4f79d1a8e3fb0cbd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5bc82c0b944dc6c8ed12372b4f79d1a8e3fb0cbd", "html_url": "https://github.com/rust-lang/rust/commit/5bc82c0b944dc6c8ed12372b4f79d1a8e3fb0cbd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5bc82c0b944dc6c8ed12372b4f79d1a8e3fb0cbd/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b31f9cc22bcd720b37ddf927afe378108a5b9a54", "url": "https://api.github.com/repos/rust-lang/rust/commits/b31f9cc22bcd720b37ddf927afe378108a5b9a54", "html_url": "https://github.com/rust-lang/rust/commit/b31f9cc22bcd720b37ddf927afe378108a5b9a54"}, {"sha": "4ab704e12b5009190f4d78b2d29bb3fbaf10b3ff", "url": "https://api.github.com/repos/rust-lang/rust/commits/4ab704e12b5009190f4d78b2d29bb3fbaf10b3ff", "html_url": "https://github.com/rust-lang/rust/commit/4ab704e12b5009190f4d78b2d29bb3fbaf10b3ff"}], "stats": {"total": 840, "additions": 697, "deletions": 143}, "files": [{"sha": "5d56b0ffe8de9e63e86f70d29203dc60e7277284", "filename": "compiler/rustc_ast_lowering/src/path.rs", "status": "modified", "additions": 26, "deletions": 19, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/5bc82c0b944dc6c8ed12372b4f79d1a8e3fb0cbd/compiler%2Frustc_ast_lowering%2Fsrc%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bc82c0b944dc6c8ed12372b4f79d1a8e3fb0cbd/compiler%2Frustc_ast_lowering%2Fsrc%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fpath.rs?ref=5bc82c0b944dc6c8ed12372b4f79d1a8e3fb0cbd", "patch": "@@ -196,25 +196,32 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                     ParenthesizedGenericArgs::Err => {\n                         let mut err = struct_span_err!(self.sess, data.span, E0214, \"{}\", msg);\n                         err.span_label(data.span, \"only `Fn` traits may use parentheses\");\n-                        if let Ok(snippet) = self.sess.source_map().span_to_snippet(data.span) {\n-                            // Do not suggest going from `Trait()` to `Trait<>`\n-                            if !data.inputs.is_empty() {\n-                                // Suggest replacing `(` and `)` with `<` and `>`\n-                                // The snippet may be missing the closing `)`, skip that case\n-                                if snippet.ends_with(')') {\n-                                    if let Some(split) = snippet.find('(') {\n-                                        let trait_name = &snippet[0..split];\n-                                        let args = &snippet[split + 1..snippet.len() - 1];\n-                                        err.span_suggestion(\n-                                            data.span,\n-                                            \"use angle brackets instead\",\n-                                            format!(\"{}<{}>\", trait_name, args),\n-                                            Applicability::MaybeIncorrect,\n-                                        );\n-                                    }\n-                                }\n-                            }\n-                        };\n+                        // Suggest replacing parentheses with angle brackets `Trait(params...)` to `Trait<params...>`\n+                        if !data.inputs.is_empty() {\n+                            // Start of the span to the 1st character of 1st argument\n+                            let open_param = data.inputs_span.shrink_to_lo().to(data\n+                                .inputs\n+                                .first()\n+                                .unwrap()\n+                                .span\n+                                .shrink_to_lo());\n+                            // Last character position of last argument to the end of the span\n+                            let close_param = data\n+                                .inputs\n+                                .last()\n+                                .unwrap()\n+                                .span\n+                                .shrink_to_hi()\n+                                .to(data.inputs_span.shrink_to_hi());\n+                            err.multipart_suggestion(\n+                                &format!(\"use angle brackets instead\",),\n+                                vec![\n+                                    (open_param, String::from(\"<\")),\n+                                    (close_param, String::from(\">\")),\n+                                ],\n+                                Applicability::MaybeIncorrect,\n+                            );\n+                        }\n                         err.emit();\n                         (\n                             self.lower_angle_bracketed_parameter_data("}, {"sha": "f45b94bcdff45b58a53c41cfa96944d933fea10a", "filename": "compiler/rustc_typeck/src/check/pat.rs", "status": "modified", "additions": 31, "deletions": 28, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/5bc82c0b944dc6c8ed12372b4f79d1a8e3fb0cbd/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bc82c0b944dc6c8ed12372b4f79d1a8e3fb0cbd/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fpat.rs?ref=5bc82c0b944dc6c8ed12372b4f79d1a8e3fb0cbd", "patch": "@@ -649,39 +649,41 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         }\n     }\n \n-    fn borrow_pat_suggestion(\n-        &self,\n-        err: &mut Diagnostic,\n-        pat: &Pat<'_>,\n-        inner: &Pat<'_>,\n-        expected: Ty<'tcx>,\n-    ) {\n+    // Precondition: pat is a Ref(_) pattern\n+    fn borrow_pat_suggestion(&self, err: &mut Diagnostic, pat: &Pat<'_>) {\n         let tcx = self.tcx;\n-        if let PatKind::Binding(..) = inner.kind {\n+        if let PatKind::Ref(inner, mutbl) = pat.kind\n+        && let PatKind::Binding(_, _, binding, ..) = inner.kind {\n             let binding_parent_id = tcx.hir().get_parent_node(pat.hir_id);\n             let binding_parent = tcx.hir().get(binding_parent_id);\n-            debug!(\"inner {:?} pat {:?} parent {:?}\", inner, pat, binding_parent);\n+            debug!(?inner, ?pat, ?binding_parent);\n+\n+            let mutability = match mutbl {\n+                ast::Mutability::Mut => \"mut\",\n+                ast::Mutability::Not => \"\",\n+            };\n+\n             match binding_parent {\n-                hir::Node::Param(hir::Param { span, .. })\n-                    if let Ok(snippet) = tcx.sess.source_map().span_to_snippet(inner.span) =>\n-                {\n-                    err.span_suggestion(\n-                        *span,\n-                        &format!(\"did you mean `{snippet}`\"),\n-                        format!(\" &{expected}\"),\n-                        Applicability::MachineApplicable,\n+                // Check that there is explicit type (ie this is not a closure param with inferred type)\n+                // so we don't suggest moving something to the type that does not exist\n+                hir::Node::Param(hir::Param { ty_span, .. }) if binding.span != *ty_span => {\n+                    err.multipart_suggestion_verbose(\n+                        format!(\"to take parameter `{binding}` by reference, move `&{mutability}` to the type\"),\n+                        vec![\n+                            (pat.span.until(inner.span), \"\".to_owned()),\n+                            (ty_span.shrink_to_lo(), format!(\"&{}\", mutbl.prefix_str())),\n+                        ],\n+                        Applicability::MachineApplicable\n                     );\n                 }\n-                hir::Node::Arm(_) | hir::Node::Pat(_) => {\n+                hir::Node::Param(_) | hir::Node::Arm(_) | hir::Node::Pat(_) => {\n                     // rely on match ergonomics or it might be nested `&&pat`\n-                    if let Ok(snippet) = tcx.sess.source_map().span_to_snippet(inner.span) {\n-                        err.span_suggestion(\n-                            pat.span,\n-                            \"you can probably remove the explicit borrow\",\n-                            snippet,\n-                            Applicability::MaybeIncorrect,\n-                        );\n-                    }\n+                    err.span_suggestion_verbose(\n+                        pat.span.until(inner.span),\n+                        format!(\"consider removing `&{mutability}` from the pattern\"),\n+                        \"\",\n+                        Applicability::MaybeIncorrect,\n+                    );\n                 }\n                 _ => {} // don't provide suggestions in other cases #55175\n             }\n@@ -1836,6 +1838,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         box_ty\n     }\n \n+    // Precondition: Pat is Ref(inner)\n     fn check_pat_ref(\n         &self,\n         pat: &'tcx Pat<'tcx>,\n@@ -1853,7 +1856,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n             // Take region, inner-type from expected type if we can,\n             // to avoid creating needless variables. This also helps with\n-            // the bad  interactions of the given hack detailed in (note_1).\n+            // the bad interactions of the given hack detailed in (note_1).\n             debug!(\"check_pat_ref: expected={:?}\", expected);\n             match *expected.kind() {\n                 ty::Ref(_, r_ty, r_mutbl) if r_mutbl == mutbl => (expected, r_ty),\n@@ -1869,7 +1872,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     // Look for a case like `fn foo(&foo: u32)` and suggest\n                     // `fn foo(foo: &u32)`\n                     if let Some(mut err) = err {\n-                        self.borrow_pat_suggestion(&mut err, pat, inner, expected);\n+                        self.borrow_pat_suggestion(&mut err, pat);\n                         err.emit();\n                     }\n                     (rptr_ty, inner_ty)"}, {"sha": "43ba2dc28749005629bd7d413dbc5127ccac671a", "filename": "library/core/src/intrinsics.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5bc82c0b944dc6c8ed12372b4f79d1a8e3fb0cbd/library%2Fcore%2Fsrc%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bc82c0b944dc6c8ed12372b4f79d1a8e3fb0cbd/library%2Fcore%2Fsrc%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fintrinsics.rs?ref=5bc82c0b944dc6c8ed12372b4f79d1a8e3fb0cbd", "patch": "@@ -2363,6 +2363,7 @@ pub const unsafe fn write_bytes<T>(dst: *mut T, val: u8, count: usize) {\n #[rustc_const_unstable(feature = \"const_eval_select\", issue = \"none\")]\n #[lang = \"const_eval_select\"]\n #[rustc_do_not_const_check]\n+#[inline]\n pub const unsafe fn const_eval_select<ARG, F, G, RET>(\n     arg: ARG,\n     _called_in_const: F,"}, {"sha": "1212ff6f74ac3ed226b7782dc495b3d7188b0931", "filename": "library/std/src/ffi/os_str.rs", "status": "modified", "additions": 32, "deletions": 2, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/5bc82c0b944dc6c8ed12372b4f79d1a8e3fb0cbd/library%2Fstd%2Fsrc%2Fffi%2Fos_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bc82c0b944dc6c8ed12372b4f79d1a8e3fb0cbd/library%2Fstd%2Fsrc%2Fffi%2Fos_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fffi%2Fos_str.rs?ref=5bc82c0b944dc6c8ed12372b4f79d1a8e3fb0cbd", "patch": "@@ -45,6 +45,22 @@ use crate::sys_common::{AsInner, FromInner, IntoInner};\n /// values, encoded in a less-strict variant of UTF-8. This is useful to\n /// understand when handling capacity and length values.\n ///\n+/// # Capacity of `OsString`\n+///\n+/// Capacity uses units of UTF-8 bytes for OS strings which were created from valid unicode, and\n+/// uses units of bytes in an unspecified encoding for other contents. On a given target, all\n+/// `OsString` and `OsStr` values use the same units for capacity, so the following will work:\n+/// ```\n+/// use std::ffi::{OsStr, OsString};\n+///\n+/// fn concat_os_strings(a: &OsStr, b: &OsStr) -> OsString {\n+///     let mut ret = OsString::with_capacity(a.len() + b.len()); // This will allocate\n+///     ret.push(a); // This will not allocate further\n+///     ret.push(b); // This will not allocate further\n+///     ret\n+/// }\n+/// ```\n+///\n /// # Creating an `OsString`\n ///\n /// **From a Rust string**: `OsString` implements\n@@ -186,7 +202,7 @@ impl OsString {\n     /// OS strings without reallocating. If `capacity` is 0, the string will not\n     /// allocate.\n     ///\n-    /// See main `OsString` documentation information about encoding.\n+    /// See the main `OsString` documentation information about encoding and capacity units.\n     ///\n     /// # Examples\n     ///\n@@ -229,7 +245,7 @@ impl OsString {\n \n     /// Returns the capacity this `OsString` can hold without reallocating.\n     ///\n-    /// See `OsString` introduction for information about encoding.\n+    /// See the main `OsString` documentation information about encoding and capacity units.\n     ///\n     /// # Examples\n     ///\n@@ -251,6 +267,8 @@ impl OsString {\n     ///\n     /// The collection may reserve more space to avoid frequent reallocations.\n     ///\n+    /// See the main `OsString` documentation information about encoding and capacity units.\n+    ///\n     /// # Examples\n     ///\n     /// ```\n@@ -272,6 +290,8 @@ impl OsString {\n     /// greater than or equal to `self.len() + additional`. Does nothing if\n     /// capacity is already sufficient.\n     ///\n+    /// See the main `OsString` documentation information about encoding and capacity units.\n+    ///\n     /// # Errors\n     ///\n     /// If the capacity overflows, or the allocator reports a failure, then an error\n@@ -313,6 +333,8 @@ impl OsString {\n     ///\n     /// [`reserve`]: OsString::reserve\n     ///\n+    /// See the main `OsString` documentation information about encoding and capacity units.\n+    ///\n     /// # Examples\n     ///\n     /// ```\n@@ -340,6 +362,8 @@ impl OsString {\n     ///\n     /// [`try_reserve`]: OsString::try_reserve\n     ///\n+    /// See the main `OsString` documentation information about encoding and capacity units.\n+    ///\n     /// # Errors\n     ///\n     /// If the capacity overflows, or the allocator reports a failure, then an error\n@@ -373,6 +397,8 @@ impl OsString {\n \n     /// Shrinks the capacity of the `OsString` to match its length.\n     ///\n+    /// See the main `OsString` documentation information about encoding and capacity units.\n+    ///\n     /// # Examples\n     ///\n     /// ```\n@@ -399,6 +425,8 @@ impl OsString {\n     ///\n     /// If the current capacity is less than the lower limit, this is a no-op.\n     ///\n+    /// See the main `OsString` documentation information about encoding and capacity units.\n+    ///\n     /// # Examples\n     ///\n     /// ```\n@@ -773,6 +801,8 @@ impl OsStr {\n     /// This number is simply useful for passing to other methods, like\n     /// [`OsString::with_capacity`] to avoid reallocations.\n     ///\n+    /// See the main `OsString` documentation information about encoding and capacity units.\n+    ///\n     /// # Examples\n     ///\n     /// ```"}, {"sha": "14d8a942977d60d9af9665c628a81185666a7b26", "filename": "src/librustdoc/html/static/js/source-script.js", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5bc82c0b944dc6c8ed12372b4f79d1a8e3fb0cbd/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsource-script.js", "raw_url": "https://github.com/rust-lang/rust/raw/5bc82c0b944dc6c8ed12372b4f79d1a8e3fb0cbd/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsource-script.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsource-script.js?ref=5bc82c0b944dc6c8ed12372b4f79d1a8e3fb0cbd", "patch": "@@ -32,10 +32,10 @@ function createDirEntry(elem, parent, fullPath, currentFile, hasFoundFile) {\n     fullPath += elem[\"name\"] + \"/\";\n \n     name.onclick = () => {\n-        if (hasClass(this, \"expand\")) {\n-            removeClass(this, \"expand\");\n+        if (hasClass(name, \"expand\")) {\n+            removeClass(name, \"expand\");\n         } else {\n-            addClass(this, \"expand\");\n+            addClass(name, \"expand\");\n         }\n     };\n     name.innerText = elem[\"name\"];"}, {"sha": "0964b757e74f5cbd9966aa8937200782ccc8df0b", "filename": "src/librustdoc/json/mod.rs", "status": "modified", "additions": 43, "deletions": 10, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/5bc82c0b944dc6c8ed12372b4f79d1a8e3fb0cbd/src%2Flibrustdoc%2Fjson%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bc82c0b944dc6c8ed12372b4f79d1a8e3fb0cbd/src%2Flibrustdoc%2Fjson%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fjson%2Fmod.rs?ref=5bc82c0b944dc6c8ed12372b4f79d1a8e3fb0cbd", "patch": "@@ -181,15 +181,44 @@ impl<'tcx> FormatRenderer<'tcx> for JsonRenderer<'tcx> {\n         let name = item.name;\n         let item_id = item.item_id;\n         if let Some(mut new_item) = self.convert_item(item) {\n-            if let types::ItemEnum::Trait(ref mut t) = new_item.inner {\n-                t.implementations = self.get_trait_implementors(item_id.expect_def_id())\n-            } else if let types::ItemEnum::Struct(ref mut s) = new_item.inner {\n-                s.impls = self.get_impls(item_id.expect_def_id())\n-            } else if let types::ItemEnum::Enum(ref mut e) = new_item.inner {\n-                e.impls = self.get_impls(item_id.expect_def_id())\n-            } else if let types::ItemEnum::Union(ref mut u) = new_item.inner {\n-                u.impls = self.get_impls(item_id.expect_def_id())\n-            }\n+            let can_be_ignored = match new_item.inner {\n+                types::ItemEnum::Trait(ref mut t) => {\n+                    t.implementations = self.get_trait_implementors(item_id.expect_def_id());\n+                    false\n+                }\n+                types::ItemEnum::Struct(ref mut s) => {\n+                    s.impls = self.get_impls(item_id.expect_def_id());\n+                    false\n+                }\n+                types::ItemEnum::Enum(ref mut e) => {\n+                    e.impls = self.get_impls(item_id.expect_def_id());\n+                    false\n+                }\n+                types::ItemEnum::Union(ref mut u) => {\n+                    u.impls = self.get_impls(item_id.expect_def_id());\n+                    false\n+                }\n+\n+                types::ItemEnum::Method(_)\n+                | types::ItemEnum::AssocConst { .. }\n+                | types::ItemEnum::AssocType { .. } => true,\n+                types::ItemEnum::Module(_)\n+                | types::ItemEnum::ExternCrate { .. }\n+                | types::ItemEnum::Import(_)\n+                | types::ItemEnum::StructField(_)\n+                | types::ItemEnum::Variant(_)\n+                | types::ItemEnum::Function(_)\n+                | types::ItemEnum::TraitAlias(_)\n+                | types::ItemEnum::Impl(_)\n+                | types::ItemEnum::Typedef(_)\n+                | types::ItemEnum::OpaqueTy(_)\n+                | types::ItemEnum::Constant(_)\n+                | types::ItemEnum::Static(_)\n+                | types::ItemEnum::ForeignType\n+                | types::ItemEnum::Macro(_)\n+                | types::ItemEnum::ProcMacro(_)\n+                | types::ItemEnum::PrimitiveType(_) => false,\n+            };\n             let removed = self\n                 .index\n                 .borrow_mut()\n@@ -199,7 +228,11 @@ impl<'tcx> FormatRenderer<'tcx> for JsonRenderer<'tcx> {\n             // to make sure the items are unique. The main place this happens is when an item, is\n             // reexported in more than one place. See `rustdoc-json/reexport/in_root_and_mod`\n             if let Some(old_item) = removed {\n-                assert_eq!(old_item, new_item);\n+                // In case of generic implementations (like `impl<T> Trait for T {}`), all the\n+                // inner items will be duplicated so we can ignore if they are slightly different.\n+                if !can_be_ignored {\n+                    assert_eq!(old_item, new_item);\n+                }\n             }\n         }\n "}, {"sha": "188b2605f0f135b29de20472db35d4121201e8cf", "filename": "src/test/rustdoc-gui/source-code-page.goml", "status": "modified", "additions": 24, "deletions": 1, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/5bc82c0b944dc6c8ed12372b4f79d1a8e3fb0cbd/src%2Ftest%2Frustdoc-gui%2Fsource-code-page.goml", "raw_url": "https://github.com/rust-lang/rust/raw/5bc82c0b944dc6c8ed12372b4f79d1a8e3fb0cbd/src%2Ftest%2Frustdoc-gui%2Fsource-code-page.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fsource-code-page.goml?ref=5bc82c0b944dc6c8ed12372b4f79d1a8e3fb0cbd", "patch": "@@ -1,4 +1,4 @@\n-// Checks that the interactions with the source code pages are workined as expected.\n+// Checks that the interactions with the source code pages are working as expected.\n goto: file://|DOC_PATH|/src/test_docs/lib.rs.html\n // Check that we can click on the line number.\n click: \".line-numbers > span:nth-child(4)\" // This is the span for line 4.\n@@ -27,3 +27,26 @@ assert-position: (\"//*[@id='1']\", {\"x\": 104, \"y\": 103})\n // We click on the left of the \"1\" span but still in the \"line-number\" `<pre>`.\n click: (103, 103)\n assert-document-property: ({\"URL\": \"/lib.rs.html\"}, ENDS_WITH)\n+\n+// Checking the source code sidebar.\n+\n+// First we \"open\" it.\n+click: \"#sidebar-toggle\"\n+assert: \".sidebar.expanded\"\n+\n+// We check that the first entry of the sidebar is collapsed (which, for whatever reason,\n+// is number 2 and not 1...).\n+assert-attribute: (\"#source-sidebar .name:nth-child(2)\", {\"class\": \"name\"})\n+assert-text: (\"#source-sidebar .name:nth-child(2)\", \"implementors\")\n+// We also check its children are hidden too.\n+assert-css: (\"#source-sidebar .name:nth-child(2) + .children\", {\"display\": \"none\"})\n+// We now click on it.\n+click: \"#source-sidebar .name:nth-child(2)\"\n+assert-attribute: (\"#source-sidebar .name:nth-child(2)\", {\"class\": \"name expand\"})\n+// Checking that its children are displayed as well.\n+assert-css: (\"#source-sidebar .name:nth-child(2) + .children\", {\"display\": \"block\"})\n+\n+// And now we collapse it again.\n+click: \"#source-sidebar .name:nth-child(2)\"\n+assert-attribute: (\"#source-sidebar .name:nth-child(2)\", {\"class\": \"name\"})\n+assert-css: (\"#source-sidebar .name:nth-child(2) + .children\", {\"display\": \"none\"})"}, {"sha": "ac68ba578b6fb9dab8eec78d8674a3885a4a67ab", "filename": "src/test/rustdoc-json/generic_impl.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/5bc82c0b944dc6c8ed12372b4f79d1a8e3fb0cbd/src%2Ftest%2Frustdoc-json%2Fgeneric_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bc82c0b944dc6c8ed12372b4f79d1a8e3fb0cbd/src%2Ftest%2Frustdoc-json%2Fgeneric_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Fgeneric_impl.rs?ref=5bc82c0b944dc6c8ed12372b4f79d1a8e3fb0cbd", "patch": "@@ -0,0 +1,24 @@\n+// Regression test for <https://github.com/rust-lang/rust/issues/97986>.\n+\n+// @has generic_impl.json\n+// @has - \"$.index[*][?(@.name=='f')]\"\n+// @has - \"$.index[*][?(@.name=='AssocTy')]\"\n+// @has - \"$.index[*][?(@.name=='AssocConst')]\"\n+\n+pub mod m {\n+    pub struct S;\n+}\n+\n+pub trait F {\n+    type AssocTy;\n+    const AssocConst: usize;\n+    fn f() -> m::S;\n+}\n+\n+impl<T> F for T {\n+    type AssocTy = u32;\n+    const AssocConst: usize = 0;\n+    fn f() -> m::S {\n+        m::S\n+    }\n+}"}, {"sha": "7a007b732de8e001adbc937dd0a8cccc53e74ac1", "filename": "src/test/ui/associated-consts/issue-93775.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/5bc82c0b944dc6c8ed12372b4f79d1a8e3fb0cbd/src%2Ftest%2Fui%2Fassociated-consts%2Fissue-93775.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bc82c0b944dc6c8ed12372b4f79d1a8e3fb0cbd/src%2Ftest%2Fui%2Fassociated-consts%2Fissue-93775.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-consts%2Fissue-93775.rs?ref=5bc82c0b944dc6c8ed12372b4f79d1a8e3fb0cbd", "patch": "@@ -0,0 +1,29 @@\n+// build-pass\n+// ignore-tidy-linelength\n+\n+// Regression for #93775, needs build-pass to test it.\n+\n+#![recursion_limit = \"1000\"]\n+\n+use std::marker::PhantomData;\n+\n+struct Z;\n+struct S<T>(PhantomData<T>);\n+\n+type Nestedn+\n+trait AsNum {\n+    const NUM: u32;\n+}\n+\n+impl AsNum for Z {\n+    const NUM: u32 = 0;\n+}\n+\n+impl<T: AsNum> AsNum for S<T> {\n+    const NUM: u32 = T::NUM + 1;\n+}\n+\n+fn main() {\n+    let _ = Nested::NUM;\n+}"}, {"sha": "1291517928e3de1f853b48472f56dd91aee726ea", "filename": "src/test/ui/destructure-trait-ref.stderr", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5bc82c0b944dc6c8ed12372b4f79d1a8e3fb0cbd/src%2Ftest%2Fui%2Fdestructure-trait-ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5bc82c0b944dc6c8ed12372b4f79d1a8e3fb0cbd/src%2Ftest%2Fui%2Fdestructure-trait-ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdestructure-trait-ref.stderr?ref=5bc82c0b944dc6c8ed12372b4f79d1a8e3fb0cbd", "patch": "@@ -23,10 +23,14 @@ LL |     let &&x = &1isize as &dyn T;\n    |          ^^   ----------------- this expression has type `&dyn T`\n    |          |\n    |          expected trait object `dyn T`, found reference\n-   |          help: you can probably remove the explicit borrow: `x`\n    |\n    = note: expected trait object `dyn T`\n                  found reference `&_`\n+help: consider removing `&` from the pattern\n+   |\n+LL -     let &&x = &1isize as &dyn T;\n+LL +     let &x = &1isize as &dyn T;\n+   | \n \n error[E0308]: mismatched types\n   --> $DIR/destructure-trait-ref.rs:36:11\n@@ -35,10 +39,14 @@ LL |     let &&&x = &(&1isize as &dyn T);\n    |           ^^   -------------------- this expression has type `&&dyn T`\n    |           |\n    |           expected trait object `dyn T`, found reference\n-   |           help: you can probably remove the explicit borrow: `x`\n    |\n    = note: expected trait object `dyn T`\n                  found reference `&_`\n+help: consider removing `&` from the pattern\n+   |\n+LL -     let &&&x = &(&1isize as &dyn T);\n+LL +     let &&x = &(&1isize as &dyn T);\n+   | \n \n error[E0308]: mismatched types\n   --> $DIR/destructure-trait-ref.rs:40:13"}, {"sha": "e0179aac27fb39f6482f5126387a9524b5fc2359", "filename": "src/test/ui/error-codes/E0214.stderr", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5bc82c0b944dc6c8ed12372b4f79d1a8e3fb0cbd/src%2Ftest%2Fui%2Ferror-codes%2FE0214.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5bc82c0b944dc6c8ed12372b4f79d1a8e3fb0cbd/src%2Ftest%2Fui%2Ferror-codes%2FE0214.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0214.stderr?ref=5bc82c0b944dc6c8ed12372b4f79d1a8e3fb0cbd", "patch": "@@ -2,10 +2,12 @@ error[E0214]: parenthesized type parameters may only be used with a `Fn` trait\n   --> $DIR/E0214.rs:2:12\n    |\n LL |     let v: Vec(&str) = vec![\"foo\"];\n-   |            ^^^^^^^^^\n-   |            |\n-   |            only `Fn` traits may use parentheses\n-   |            help: use angle brackets instead: `Vec<&str>`\n+   |            ^^^^^^^^^ only `Fn` traits may use parentheses\n+   |\n+help: use angle brackets instead\n+   |\n+LL |     let v: Vec<&str> = vec![\"foo\"];\n+   |               ~    ~\n \n error: aborting due to previous error\n "}, {"sha": "1a91f5e04dbceb46e3831dbff8dbf5fa0bfb0d8c", "filename": "src/test/ui/issues/issue-23589.stderr", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5bc82c0b944dc6c8ed12372b4f79d1a8e3fb0cbd/src%2Ftest%2Fui%2Fissues%2Fissue-23589.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5bc82c0b944dc6c8ed12372b4f79d1a8e3fb0cbd/src%2Ftest%2Fui%2Fissues%2Fissue-23589.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-23589.stderr?ref=5bc82c0b944dc6c8ed12372b4f79d1a8e3fb0cbd", "patch": "@@ -2,10 +2,12 @@ error[E0214]: parenthesized type parameters may only be used with a `Fn` trait\n   --> $DIR/issue-23589.rs:2:12\n    |\n LL |     let v: Vec(&str) = vec!['1', '2'];\n-   |            ^^^^^^^^^\n-   |            |\n-   |            only `Fn` traits may use parentheses\n-   |            help: use angle brackets instead: `Vec<&str>`\n+   |            ^^^^^^^^^ only `Fn` traits may use parentheses\n+   |\n+help: use angle brackets instead\n+   |\n+LL |     let v: Vec<&str> = vec!['1', '2'];\n+   |               ~    ~\n \n error[E0308]: mismatched types\n   --> $DIR/issue-23589.rs:2:29"}, {"sha": "c4316bfdd18dcc8c5f72e6f1fbd9c1a54d0e98ff", "filename": "src/test/ui/mismatched_types/issue-38371-unfixable.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5bc82c0b944dc6c8ed12372b4f79d1a8e3fb0cbd/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-38371-unfixable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bc82c0b944dc6c8ed12372b4f79d1a8e3fb0cbd/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-38371-unfixable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-38371-unfixable.rs?ref=5bc82c0b944dc6c8ed12372b4f79d1a8e3fb0cbd", "patch": "@@ -0,0 +1,5 @@\n+fn ugh(&[bar]: &u32) {} //~ ERROR expected an array or slice\n+\n+fn bgh(&&bar: u32) {} //~ ERROR mismatched types\n+\n+fn main() {}"}, {"sha": "3c5e765abfbe2eefc9537f5818963b81d4cb4576", "filename": "src/test/ui/mismatched_types/issue-38371-unfixable.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/5bc82c0b944dc6c8ed12372b4f79d1a8e3fb0cbd/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-38371-unfixable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5bc82c0b944dc6c8ed12372b4f79d1a8e3fb0cbd/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-38371-unfixable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-38371-unfixable.stderr?ref=5bc82c0b944dc6c8ed12372b4f79d1a8e3fb0cbd", "patch": "@@ -0,0 +1,21 @@\n+error[E0529]: expected an array or slice, found `u32`\n+  --> $DIR/issue-38371-unfixable.rs:1:9\n+   |\n+LL | fn ugh(&[bar]: &u32) {}\n+   |         ^^^^^ pattern cannot match with input type `u32`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/issue-38371-unfixable.rs:3:8\n+   |\n+LL | fn bgh(&&bar: u32) {}\n+   |        ^^^^^  --- expected due to this\n+   |        |\n+   |        expected `u32`, found reference\n+   |\n+   = note:   expected type `u32`\n+           found reference `&_`\n+\n+error: aborting due to 2 previous errors\n+\n+Some errors have detailed explanations: E0308, E0529.\n+For more information about an error, try `rustc --explain E0308`."}, {"sha": "0e20835bef05f91e3e29d56c32550271a6f3f2d4", "filename": "src/test/ui/mismatched_types/issue-38371.fixed", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/5bc82c0b944dc6c8ed12372b4f79d1a8e3fb0cbd/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-38371.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/5bc82c0b944dc6c8ed12372b4f79d1a8e3fb0cbd/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-38371.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-38371.fixed?ref=5bc82c0b944dc6c8ed12372b4f79d1a8e3fb0cbd", "patch": "@@ -0,0 +1,18 @@\n+// run-rustfix\n+// see also issue-38371-unfixable.rs\n+#![allow(dead_code)]\n+\n+#[derive(Copy, Clone)]\n+struct Foo {}\n+\n+fn foo(_a: &Foo) {} //~ ERROR mismatched types\n+\n+fn bar(_a: Foo) {}\n+\n+fn qux(_a: &Foo) {}\n+\n+fn zar(&_a: &Foo) {}\n+\n+fn agh(&_a: &u32) {} //~ ERROR mismatched types\n+\n+fn main() {}"}, {"sha": "fb9e4c173e7a8518a4642360a1572f4da4f05ea1", "filename": "src/test/ui/mismatched_types/issue-38371.rs", "status": "modified", "additions": 10, "deletions": 19, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/5bc82c0b944dc6c8ed12372b4f79d1a8e3fb0cbd/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-38371.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bc82c0b944dc6c8ed12372b4f79d1a8e3fb0cbd/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-38371.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-38371.rs?ref=5bc82c0b944dc6c8ed12372b4f79d1a8e3fb0cbd", "patch": "@@ -1,27 +1,18 @@\n-struct Foo {\n-}\n+// run-rustfix\n+// see also issue-38371-unfixable.rs\n+#![allow(dead_code)]\n \n-fn foo(&foo: Foo) { //~ ERROR mismatched types\n-}\n+#[derive(Copy, Clone)]\n+struct Foo {}\n \n-fn bar(foo: Foo) {\n-}\n+fn foo(&_a: Foo) {} //~ ERROR mismatched types\n \n-fn qux(foo: &Foo) {\n-}\n+fn bar(_a: Foo) {}\n \n-fn zar(&foo: &Foo) {\n-}\n+fn qux(_a: &Foo) {}\n \n-// The somewhat unexpected help message in this case is courtesy of\n-// match_default_bindings.\n-fn agh(&&bar: &u32) { //~ ERROR mismatched types\n-}\n+fn zar(&_a: &Foo) {}\n \n-fn bgh(&&bar: u32) { //~ ERROR mismatched types\n-}\n-\n-fn ugh(&[bar]: &u32) { //~ ERROR expected an array or slice\n-}\n+fn agh(&&_a: &u32) {} //~ ERROR mismatched types\n \n fn main() {}"}, {"sha": "003f17cda1553877cd066d694b6d0b061a212374", "filename": "src/test/ui/mismatched_types/issue-38371.stderr", "status": "modified", "additions": 18, "deletions": 29, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/5bc82c0b944dc6c8ed12372b4f79d1a8e3fb0cbd/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-38371.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5bc82c0b944dc6c8ed12372b4f79d1a8e3fb0cbd/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-38371.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-38371.stderr?ref=5bc82c0b944dc6c8ed12372b4f79d1a8e3fb0cbd", "patch": "@@ -1,46 +1,35 @@\n error[E0308]: mismatched types\n-  --> $DIR/issue-38371.rs:4:8\n+  --> $DIR/issue-38371.rs:8:8\n    |\n-LL | fn foo(&foo: Foo) {\n-   |        ^^^^-----\n-   |        |     |\n-   |        |     expected due to this\n+LL | fn foo(&_a: Foo) {}\n+   |        ^^^  --- expected due to this\n+   |        |\n    |        expected struct `Foo`, found reference\n-   |        help: did you mean `foo`: `&Foo`\n    |\n    = note: expected struct `Foo`\n            found reference `&_`\n+help: to take parameter `_a` by reference, move `&` to the type\n+   |\n+LL - fn foo(&_a: Foo) {}\n+LL + fn foo(_a: &Foo) {}\n+   | \n \n error[E0308]: mismatched types\n-  --> $DIR/issue-38371.rs:18:9\n+  --> $DIR/issue-38371.rs:16:9\n    |\n-LL | fn agh(&&bar: &u32) {\n-   |         ^^^^  ---- expected due to this\n+LL | fn agh(&&_a: &u32) {}\n+   |         ^^^  ---- expected due to this\n    |         |\n    |         expected `u32`, found reference\n-   |         help: you can probably remove the explicit borrow: `bar`\n-   |\n-   = note:   expected type `u32`\n-           found reference `&_`\n-\n-error[E0308]: mismatched types\n-  --> $DIR/issue-38371.rs:21:8\n-   |\n-LL | fn bgh(&&bar: u32) {\n-   |        ^^^^^  --- expected due to this\n-   |        |\n-   |        expected `u32`, found reference\n    |\n    = note:   expected type `u32`\n            found reference `&_`\n-\n-error[E0529]: expected an array or slice, found `u32`\n-  --> $DIR/issue-38371.rs:24:9\n+help: consider removing `&` from the pattern\n    |\n-LL | fn ugh(&[bar]: &u32) {\n-   |         ^^^^^ pattern cannot match with input type `u32`\n+LL - fn agh(&&_a: &u32) {}\n+LL + fn agh(&_a: &u32) {}\n+   | \n \n-error: aborting due to 4 previous errors\n+error: aborting due to 2 previous errors\n \n-Some errors have detailed explanations: E0308, E0529.\n-For more information about an error, try `rustc --explain E0308`.\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "ab8483eef49fa270f70f7b2c5fe734e880326ad0", "filename": "src/test/ui/mismatched_types/ref-pat-suggestions.fixed", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/5bc82c0b944dc6c8ed12372b4f79d1a8e3fb0cbd/src%2Ftest%2Fui%2Fmismatched_types%2Fref-pat-suggestions.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/5bc82c0b944dc6c8ed12372b4f79d1a8e3fb0cbd/src%2Ftest%2Fui%2Fmismatched_types%2Fref-pat-suggestions.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fref-pat-suggestions.fixed?ref=5bc82c0b944dc6c8ed12372b4f79d1a8e3fb0cbd", "patch": "@@ -0,0 +1,24 @@\n+// run-rustfix\n+\n+fn _f0(_a: &u32) {} //~ ERROR mismatched types\n+fn _f1(_a: &mut u32) {} //~ ERROR mismatched types\n+fn _f2(&_a: &u32) {} //~ ERROR mismatched types\n+fn _f3(&mut _a: &mut u32) {} //~ ERROR mismatched types\n+fn _f4(&_a: &u32) {} //~ ERROR mismatched types\n+fn _f5(&mut _a: &mut u32) {} //~ ERROR mismatched types\n+\n+fn main() {\n+    let _: fn(u32) = |_a| (); //~ ERROR mismatched types\n+    let _: fn(u32) = |_a| (); //~ ERROR mismatched types\n+    let _: fn(&u32) = |&_a| (); //~ ERROR mismatched types\n+    let _: fn(&mut u32) = |&mut _a| (); //~ ERROR mismatched types\n+    let _: fn(&u32) = |&_a| (); //~ ERROR mismatched types\n+    let _: fn(&mut u32) = |&mut _a| (); //~ ERROR mismatched types\n+\n+    let _ = |_a: &u32| (); //~ ERROR mismatched types\n+    let _ = |_a: &mut u32| (); //~ ERROR mismatched types\n+    let _ = |&_a: &u32| (); //~ ERROR mismatched types\n+    let _ = |&mut _a: &mut u32| (); //~ ERROR mismatched types\n+    let _ = |&_a: &u32| (); //~ ERROR mismatched types\n+    let _ = |&mut _a: &mut u32| (); //~ ERROR mismatched types\n+}"}, {"sha": "7e55539aa3d1bdcf546a9dc3dd72c5e40a6b3533", "filename": "src/test/ui/mismatched_types/ref-pat-suggestions.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/5bc82c0b944dc6c8ed12372b4f79d1a8e3fb0cbd/src%2Ftest%2Fui%2Fmismatched_types%2Fref-pat-suggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bc82c0b944dc6c8ed12372b4f79d1a8e3fb0cbd/src%2Ftest%2Fui%2Fmismatched_types%2Fref-pat-suggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fref-pat-suggestions.rs?ref=5bc82c0b944dc6c8ed12372b4f79d1a8e3fb0cbd", "patch": "@@ -0,0 +1,24 @@\n+// run-rustfix\n+\n+fn _f0(&_a: u32) {} //~ ERROR mismatched types\n+fn _f1(&mut _a: u32) {} //~ ERROR mismatched types\n+fn _f2(&&_a: &u32) {} //~ ERROR mismatched types\n+fn _f3(&mut &_a: &mut u32) {} //~ ERROR mismatched types\n+fn _f4(&&mut _a: &u32) {} //~ ERROR mismatched types\n+fn _f5(&mut &mut _a: &mut u32) {} //~ ERROR mismatched types\n+\n+fn main() {\n+    let _: fn(u32) = |&_a| (); //~ ERROR mismatched types\n+    let _: fn(u32) = |&mut _a| (); //~ ERROR mismatched types\n+    let _: fn(&u32) = |&&_a| (); //~ ERROR mismatched types\n+    let _: fn(&mut u32) = |&mut &_a| (); //~ ERROR mismatched types\n+    let _: fn(&u32) = |&&mut _a| (); //~ ERROR mismatched types\n+    let _: fn(&mut u32) = |&mut &mut _a| (); //~ ERROR mismatched types\n+\n+    let _ = |&_a: u32| (); //~ ERROR mismatched types\n+    let _ = |&mut _a: u32| (); //~ ERROR mismatched types\n+    let _ = |&&_a: &u32| (); //~ ERROR mismatched types\n+    let _ = |&mut &_a: &mut u32| (); //~ ERROR mismatched types\n+    let _ = |&&mut _a: &u32| (); //~ ERROR mismatched types\n+    let _ = |&mut &mut _a: &mut u32| (); //~ ERROR mismatched types\n+}"}, {"sha": "0516bad49abf31dcc6b9ca71095b4bc4eda28a5e", "filename": "src/test/ui/mismatched_types/ref-pat-suggestions.stderr", "status": "added", "additions": 297, "deletions": 0, "changes": 297, "blob_url": "https://github.com/rust-lang/rust/blob/5bc82c0b944dc6c8ed12372b4f79d1a8e3fb0cbd/src%2Ftest%2Fui%2Fmismatched_types%2Fref-pat-suggestions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5bc82c0b944dc6c8ed12372b4f79d1a8e3fb0cbd/src%2Ftest%2Fui%2Fmismatched_types%2Fref-pat-suggestions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fref-pat-suggestions.stderr?ref=5bc82c0b944dc6c8ed12372b4f79d1a8e3fb0cbd", "patch": "@@ -0,0 +1,297 @@\n+error[E0308]: mismatched types\n+  --> $DIR/ref-pat-suggestions.rs:3:8\n+   |\n+LL | fn _f0(&_a: u32) {}\n+   |        ^^^  --- expected due to this\n+   |        |\n+   |        expected `u32`, found reference\n+   |\n+   = note:   expected type `u32`\n+           found reference `&_`\n+help: to take parameter `_a` by reference, move `&` to the type\n+   |\n+LL - fn _f0(&_a: u32) {}\n+LL + fn _f0(_a: &u32) {}\n+   | \n+\n+error[E0308]: mismatched types\n+  --> $DIR/ref-pat-suggestions.rs:4:8\n+   |\n+LL | fn _f1(&mut _a: u32) {}\n+   |        ^^^^^^^  --- expected due to this\n+   |        |\n+   |        expected `u32`, found `&mut _`\n+   |\n+   = note:           expected type `u32`\n+           found mutable reference `&mut _`\n+help: to take parameter `_a` by reference, move `&mut` to the type\n+   |\n+LL - fn _f1(&mut _a: u32) {}\n+LL + fn _f1(_a: &mut u32) {}\n+   | \n+\n+error[E0308]: mismatched types\n+  --> $DIR/ref-pat-suggestions.rs:5:9\n+   |\n+LL | fn _f2(&&_a: &u32) {}\n+   |         ^^^  ---- expected due to this\n+   |         |\n+   |         expected `u32`, found reference\n+   |\n+   = note:   expected type `u32`\n+           found reference `&_`\n+help: consider removing `&` from the pattern\n+   |\n+LL - fn _f2(&&_a: &u32) {}\n+LL + fn _f2(&_a: &u32) {}\n+   | \n+\n+error[E0308]: mismatched types\n+  --> $DIR/ref-pat-suggestions.rs:6:13\n+   |\n+LL | fn _f3(&mut &_a: &mut u32) {}\n+   |             ^^^  -------- expected due to this\n+   |             |\n+   |             expected `u32`, found reference\n+   |\n+   = note:   expected type `u32`\n+           found reference `&_`\n+help: consider removing `&` from the pattern\n+   |\n+LL - fn _f3(&mut &_a: &mut u32) {}\n+LL + fn _f3(&mut _a: &mut u32) {}\n+   | \n+\n+error[E0308]: mismatched types\n+  --> $DIR/ref-pat-suggestions.rs:7:9\n+   |\n+LL | fn _f4(&&mut _a: &u32) {}\n+   |         ^^^^^^^  ---- expected due to this\n+   |         |\n+   |         expected `u32`, found `&mut _`\n+   |\n+   = note:           expected type `u32`\n+           found mutable reference `&mut _`\n+help: consider removing `&mut` from the pattern\n+   |\n+LL - fn _f4(&&mut _a: &u32) {}\n+LL + fn _f4(&_a: &u32) {}\n+   | \n+\n+error[E0308]: mismatched types\n+  --> $DIR/ref-pat-suggestions.rs:8:13\n+   |\n+LL | fn _f5(&mut &mut _a: &mut u32) {}\n+   |             ^^^^^^^  -------- expected due to this\n+   |             |\n+   |             expected `u32`, found `&mut _`\n+   |\n+   = note:           expected type `u32`\n+           found mutable reference `&mut _`\n+help: consider removing `&mut` from the pattern\n+   |\n+LL - fn _f5(&mut &mut _a: &mut u32) {}\n+LL + fn _f5(&mut _a: &mut u32) {}\n+   | \n+\n+error[E0308]: mismatched types\n+  --> $DIR/ref-pat-suggestions.rs:11:23\n+   |\n+LL |     let _: fn(u32) = |&_a| ();\n+   |                       ^--\n+   |                       ||\n+   |                       |expected due to this\n+   |                       expected `u32`, found reference\n+   |\n+   = note:   expected type `u32`\n+           found reference `&_`\n+help: consider removing `&` from the pattern\n+   |\n+LL -     let _: fn(u32) = |&_a| ();\n+LL +     let _: fn(u32) = |_a| ();\n+   | \n+\n+error[E0308]: mismatched types\n+  --> $DIR/ref-pat-suggestions.rs:12:23\n+   |\n+LL |     let _: fn(u32) = |&mut _a| ();\n+   |                       ^^^^^--\n+   |                       |    |\n+   |                       |    expected due to this\n+   |                       expected `u32`, found `&mut _`\n+   |\n+   = note:           expected type `u32`\n+           found mutable reference `&mut _`\n+help: consider removing `&mut` from the pattern\n+   |\n+LL -     let _: fn(u32) = |&mut _a| ();\n+LL +     let _: fn(u32) = |_a| ();\n+   | \n+\n+error[E0308]: mismatched types\n+  --> $DIR/ref-pat-suggestions.rs:13:25\n+   |\n+LL |     let _: fn(&u32) = |&&_a| ();\n+   |                         ^--\n+   |                         ||\n+   |                         |expected due to this\n+   |                         expected `u32`, found reference\n+   |\n+   = note:   expected type `u32`\n+           found reference `&_`\n+help: consider removing `&` from the pattern\n+   |\n+LL -     let _: fn(&u32) = |&&_a| ();\n+LL +     let _: fn(&u32) = |&_a| ();\n+   | \n+\n+error[E0308]: mismatched types\n+  --> $DIR/ref-pat-suggestions.rs:14:33\n+   |\n+LL |     let _: fn(&mut u32) = |&mut &_a| ();\n+   |                                 ^--\n+   |                                 ||\n+   |                                 |expected due to this\n+   |                                 expected `u32`, found reference\n+   |\n+   = note:   expected type `u32`\n+           found reference `&_`\n+help: consider removing `&` from the pattern\n+   |\n+LL -     let _: fn(&mut u32) = |&mut &_a| ();\n+LL +     let _: fn(&mut u32) = |&mut _a| ();\n+   | \n+\n+error[E0308]: mismatched types\n+  --> $DIR/ref-pat-suggestions.rs:15:25\n+   |\n+LL |     let _: fn(&u32) = |&&mut _a| ();\n+   |                         ^^^^^--\n+   |                         |    |\n+   |                         |    expected due to this\n+   |                         expected `u32`, found `&mut _`\n+   |\n+   = note:           expected type `u32`\n+           found mutable reference `&mut _`\n+help: consider removing `&mut` from the pattern\n+   |\n+LL -     let _: fn(&u32) = |&&mut _a| ();\n+LL +     let _: fn(&u32) = |&_a| ();\n+   | \n+\n+error[E0308]: mismatched types\n+  --> $DIR/ref-pat-suggestions.rs:16:33\n+   |\n+LL |     let _: fn(&mut u32) = |&mut &mut _a| ();\n+   |                                 ^^^^^--\n+   |                                 |    |\n+   |                                 |    expected due to this\n+   |                                 expected `u32`, found `&mut _`\n+   |\n+   = note:           expected type `u32`\n+           found mutable reference `&mut _`\n+help: consider removing `&mut` from the pattern\n+   |\n+LL -     let _: fn(&mut u32) = |&mut &mut _a| ();\n+LL +     let _: fn(&mut u32) = |&mut _a| ();\n+   | \n+\n+error[E0308]: mismatched types\n+  --> $DIR/ref-pat-suggestions.rs:18:14\n+   |\n+LL |     let _ = |&_a: u32| ();\n+   |              ^^^  --- expected due to this\n+   |              |\n+   |              expected `u32`, found reference\n+   |\n+   = note:   expected type `u32`\n+           found reference `&_`\n+help: to take parameter `_a` by reference, move `&` to the type\n+   |\n+LL -     let _ = |&_a: u32| ();\n+LL +     let _ = |_a: &u32| ();\n+   | \n+\n+error[E0308]: mismatched types\n+  --> $DIR/ref-pat-suggestions.rs:19:14\n+   |\n+LL |     let _ = |&mut _a: u32| ();\n+   |              ^^^^^^^  --- expected due to this\n+   |              |\n+   |              expected `u32`, found `&mut _`\n+   |\n+   = note:           expected type `u32`\n+           found mutable reference `&mut _`\n+help: to take parameter `_a` by reference, move `&mut` to the type\n+   |\n+LL -     let _ = |&mut _a: u32| ();\n+LL +     let _ = |_a: &mut u32| ();\n+   | \n+\n+error[E0308]: mismatched types\n+  --> $DIR/ref-pat-suggestions.rs:20:15\n+   |\n+LL |     let _ = |&&_a: &u32| ();\n+   |               ^^^  ---- expected due to this\n+   |               |\n+   |               expected `u32`, found reference\n+   |\n+   = note:   expected type `u32`\n+           found reference `&_`\n+help: consider removing `&` from the pattern\n+   |\n+LL -     let _ = |&&_a: &u32| ();\n+LL +     let _ = |&_a: &u32| ();\n+   | \n+\n+error[E0308]: mismatched types\n+  --> $DIR/ref-pat-suggestions.rs:21:19\n+   |\n+LL |     let _ = |&mut &_a: &mut u32| ();\n+   |                   ^^^  -------- expected due to this\n+   |                   |\n+   |                   expected `u32`, found reference\n+   |\n+   = note:   expected type `u32`\n+           found reference `&_`\n+help: consider removing `&` from the pattern\n+   |\n+LL -     let _ = |&mut &_a: &mut u32| ();\n+LL +     let _ = |&mut _a: &mut u32| ();\n+   | \n+\n+error[E0308]: mismatched types\n+  --> $DIR/ref-pat-suggestions.rs:22:15\n+   |\n+LL |     let _ = |&&mut _a: &u32| ();\n+   |               ^^^^^^^  ---- expected due to this\n+   |               |\n+   |               expected `u32`, found `&mut _`\n+   |\n+   = note:           expected type `u32`\n+           found mutable reference `&mut _`\n+help: consider removing `&mut` from the pattern\n+   |\n+LL -     let _ = |&&mut _a: &u32| ();\n+LL +     let _ = |&_a: &u32| ();\n+   | \n+\n+error[E0308]: mismatched types\n+  --> $DIR/ref-pat-suggestions.rs:23:19\n+   |\n+LL |     let _ = |&mut &mut _a: &mut u32| ();\n+   |                   ^^^^^^^  -------- expected due to this\n+   |                   |\n+   |                   expected `u32`, found `&mut _`\n+   |\n+   = note:           expected type `u32`\n+           found mutable reference `&mut _`\n+help: consider removing `&mut` from the pattern\n+   |\n+LL -     let _ = |&mut &mut _a: &mut u32| ();\n+LL +     let _ = |&mut _a: &mut u32| ();\n+   | \n+\n+error: aborting due to 18 previous errors\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "886d815d70bea52b2f75fd1917c8210c0b277203", "filename": "src/test/ui/pattern/for-loop-bad-item.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5bc82c0b944dc6c8ed12372b4f79d1a8e3fb0cbd/src%2Ftest%2Fui%2Fpattern%2Ffor-loop-bad-item.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5bc82c0b944dc6c8ed12372b4f79d1a8e3fb0cbd/src%2Ftest%2Fui%2Fpattern%2Ffor-loop-bad-item.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Ffor-loop-bad-item.stderr?ref=5bc82c0b944dc6c8ed12372b4f79d1a8e3fb0cbd", "patch": "@@ -5,10 +5,14 @@ LL |     for ((_, _), (&mut c, _)) in &mut map {\n    |                   ^^^^^^         -------- this is an iterator with items of type `(&(char, char), &mut (char, char))`\n    |                   |\n    |                   expected `char`, found `&mut _`\n-   |                   help: you can probably remove the explicit borrow: `c`\n    |\n    = note:           expected type `char`\n            found mutable reference `&mut _`\n+help: consider removing `&mut` from the pattern\n+   |\n+LL -     for ((_, _), (&mut c, _)) in &mut map {\n+LL +     for ((_, _), (c, _)) in &mut map {\n+   | \n \n error[E0308]: mismatched types\n   --> $DIR/for-loop-bad-item.rs:14:14"}, {"sha": "fe2464b3b8115e65a851fd4e53cd3fb43cf38b30", "filename": "src/test/ui/proc-macro/issue-66286.stderr", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5bc82c0b944dc6c8ed12372b4f79d1a8e3fb0cbd/src%2Ftest%2Fui%2Fproc-macro%2Fissue-66286.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5bc82c0b944dc6c8ed12372b4f79d1a8e3fb0cbd/src%2Ftest%2Fui%2Fproc-macro%2Fissue-66286.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fissue-66286.stderr?ref=5bc82c0b944dc6c8ed12372b4f79d1a8e3fb0cbd", "patch": "@@ -2,10 +2,12 @@ error[E0214]: parenthesized type parameters may only be used with a `Fn` trait\n   --> $DIR/issue-66286.rs:8:22\n    |\n LL | pub extern fn foo(_: Vec(u32)) -> u32 {\n-   |                      ^^^^^^^^\n-   |                      |\n-   |                      only `Fn` traits may use parentheses\n-   |                      help: use angle brackets instead: `Vec<u32>`\n+   |                      ^^^^^^^^ only `Fn` traits may use parentheses\n+   |\n+help: use angle brackets instead\n+   |\n+LL | pub extern fn foo(_: Vec<u32>) -> u32 {\n+   |                         ~   ~\n \n error: aborting due to previous error\n "}, {"sha": "2bf072ef52175eb46a2b95de658956ccbe54ee52", "filename": "src/test/ui/suggestions/let-binding-init-expr-as-ty.stderr", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5bc82c0b944dc6c8ed12372b4f79d1a8e3fb0cbd/src%2Ftest%2Fui%2Fsuggestions%2Flet-binding-init-expr-as-ty.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5bc82c0b944dc6c8ed12372b4f79d1a8e3fb0cbd/src%2Ftest%2Fui%2Fsuggestions%2Flet-binding-init-expr-as-ty.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Flet-binding-init-expr-as-ty.stderr?ref=5bc82c0b944dc6c8ed12372b4f79d1a8e3fb0cbd", "patch": "@@ -10,10 +10,12 @@ error[E0214]: parenthesized type parameters may only be used with a `Fn` trait\n   --> $DIR/let-binding-init-expr-as-ty.rs:2:19\n    |\n LL |     let foo: i32::from_be(num);\n-   |                   ^^^^^^^^^^^^\n-   |                   |\n-   |                   only `Fn` traits may use parentheses\n-   |                   help: use angle brackets instead: `from_be<num>`\n+   |                   ^^^^^^^^^^^^ only `Fn` traits may use parentheses\n+   |\n+help: use angle brackets instead\n+   |\n+LL |     let foo: i32::from_be<num>;\n+   |                          ~   ~\n \n error[E0223]: ambiguous associated type\n   --> $DIR/let-binding-init-expr-as-ty.rs:2:14"}, {"sha": "a9342f9fc309d5cfc7aa07c201e3fa18312631af", "filename": "src/test/ui/suggestions/match-ergonomics.stderr", "status": "modified", "additions": 17, "deletions": 9, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/5bc82c0b944dc6c8ed12372b4f79d1a8e3fb0cbd/src%2Ftest%2Fui%2Fsuggestions%2Fmatch-ergonomics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5bc82c0b944dc6c8ed12372b4f79d1a8e3fb0cbd/src%2Ftest%2Fui%2Fsuggestions%2Fmatch-ergonomics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fmatch-ergonomics.stderr?ref=5bc82c0b944dc6c8ed12372b4f79d1a8e3fb0cbd", "patch": "@@ -4,13 +4,15 @@ error[E0308]: mismatched types\n LL |     match &x[..] {\n    |           ------ this expression has type `&[i32]`\n LL |         [&v] => {},\n-   |          ^^\n-   |          |\n-   |          expected `i32`, found reference\n-   |          help: you can probably remove the explicit borrow: `v`\n+   |          ^^ expected `i32`, found reference\n    |\n    = note:   expected type `i32`\n            found reference `&_`\n+help: consider removing `&` from the pattern\n+   |\n+LL -         [&v] => {},\n+LL +         [v] => {},\n+   | \n \n error[E0529]: expected an array or slice, found `Vec<i32>`\n   --> $DIR/match-ergonomics.rs:8:9\n@@ -34,13 +36,15 @@ error[E0308]: mismatched types\n LL |     match y {\n    |           - this expression has type `i32`\n LL |         &v => {},\n-   |         ^^\n-   |         |\n-   |         expected `i32`, found reference\n-   |         help: you can probably remove the explicit borrow: `v`\n+   |         ^^ expected `i32`, found reference\n    |\n    = note:   expected type `i32`\n            found reference `&_`\n+help: consider removing `&` from the pattern\n+   |\n+LL -         &v => {},\n+LL +         v => {},\n+   | \n \n error[E0308]: mismatched types\n   --> $DIR/match-ergonomics.rs:40:13\n@@ -49,10 +53,14 @@ LL |     if let [&v] = &x[..] {}\n    |             ^^    ------ this expression has type `&[i32]`\n    |             |\n    |             expected `i32`, found reference\n-   |             help: you can probably remove the explicit borrow: `v`\n    |\n    = note:   expected type `i32`\n            found reference `&_`\n+help: consider removing `&` from the pattern\n+   |\n+LL -     if let [&v] = &x[..] {}\n+LL +     if let [v] = &x[..] {}\n+   | \n \n error: aborting due to 5 previous errors\n "}, {"sha": "71c357865fed92e25dc235b2e74566723339a805", "filename": "src/test/ui/type/issue-91268.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5bc82c0b944dc6c8ed12372b4f79d1a8e3fb0cbd/src%2Ftest%2Fui%2Ftype%2Fissue-91268.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5bc82c0b944dc6c8ed12372b4f79d1a8e3fb0cbd/src%2Ftest%2Fui%2Ftype%2Fissue-91268.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Fissue-91268.stderr?ref=5bc82c0b944dc6c8ed12372b4f79d1a8e3fb0cbd", "patch": "@@ -29,6 +29,11 @@ error[E0214]: parenthesized type parameters may only be used with a `Fn` trait\n    |\n LL |     0: u8(\u0163\n    |        ^^^^ only `Fn` traits may use parentheses\n+   |\n+help: use angle brackets instead\n+   |\n+LL |     0: u8<\u0163>\n+   |          ~ +\n \n error[E0109]: type arguments are not allowed on this type\n   --> $DIR/issue-91268.rs:9:11"}, {"sha": "4df404e8198fa32c07a38a1656a1a562c9038f09", "filename": "src/test/ui/unboxed-closures/unboxed-closure-sugar-used-on-struct-3.stderr", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5bc82c0b944dc6c8ed12372b4f79d1a8e3fb0cbd/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-used-on-struct-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5bc82c0b944dc6c8ed12372b4f79d1a8e3fb0cbd/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-used-on-struct-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-used-on-struct-3.stderr?ref=5bc82c0b944dc6c8ed12372b4f79d1a8e3fb0cbd", "patch": "@@ -2,10 +2,12 @@ error[E0214]: parenthesized type parameters may only be used with a `Fn` trait\n   --> $DIR/unboxed-closure-sugar-used-on-struct-3.rs:14:13\n    |\n LL |     let b = Bar::(isize, usize)::new(); // OK too (for the parser)\n-   |             ^^^^^^^^^^^^^^^^^^^\n-   |             |\n-   |             only `Fn` traits may use parentheses\n-   |             help: use angle brackets instead: `Bar::<isize, usize>`\n+   |             ^^^^^^^^^^^^^^^^^^^ only `Fn` traits may use parentheses\n+   |\n+help: use angle brackets instead\n+   |\n+LL |     let b = Bar::<isize, usize>::new(); // OK too (for the parser)\n+   |                  ~            ~\n \n error: aborting due to previous error\n "}]}