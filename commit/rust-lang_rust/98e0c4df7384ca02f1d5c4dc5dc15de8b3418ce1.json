{"sha": "98e0c4df7384ca02f1d5c4dc5dc15de8b3418ce1", "node_id": "C_kwDOAAsO6NoAKDk4ZTBjNGRmNzM4NGNhMDJmMWQ1YzRkYzVkYzE1ZGU4YjM0MThjZTE", "commit": {"author": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2022-08-18T07:43:10Z"}, "committer": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2022-10-09T13:07:21Z"}, "message": "fix `for_loop_over_fallibles` lint docs", "tree": {"sha": "dd10c6e71252918dd9e35dce436ee924f1f9a23a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dd10c6e71252918dd9e35dce436ee924f1f9a23a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/98e0c4df7384ca02f1d5c4dc5dc15de8b3418ce1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/98e0c4df7384ca02f1d5c4dc5dc15de8b3418ce1", "html_url": "https://github.com/rust-lang/rust/commit/98e0c4df7384ca02f1d5c4dc5dc15de8b3418ce1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/98e0c4df7384ca02f1d5c4dc5dc15de8b3418ce1/comments", "author": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6766113c873688c64d480069a35c1c64d07c71bd", "url": "https://api.github.com/repos/rust-lang/rust/commits/6766113c873688c64d480069a35c1c64d07c71bd", "html_url": "https://github.com/rust-lang/rust/commit/6766113c873688c64d480069a35c1c64d07c71bd"}], "stats": {"total": 32, "additions": 10, "deletions": 22}, "files": [{"sha": "2253546b5d3577ea5f3529e70ee9cbb78641ac3b", "filename": "compiler/rustc_lint/src/for_loop_over_fallibles.rs", "status": "modified", "additions": 10, "deletions": 22, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/98e0c4df7384ca02f1d5c4dc5dc15de8b3418ce1/compiler%2Frustc_lint%2Fsrc%2Ffor_loop_over_fallibles.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98e0c4df7384ca02f1d5c4dc5dc15de8b3418ce1/compiler%2Frustc_lint%2Fsrc%2Ffor_loop_over_fallibles.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Ffor_loop_over_fallibles.rs?ref=98e0c4df7384ca02f1d5c4dc5dc15de8b3418ce1", "patch": "@@ -10,7 +10,16 @@ use rustc_span::{sym, Span};\n use rustc_trait_selection::traits::TraitEngineExt;\n \n declare_lint! {\n-    /// Checks for `for` loops over `Option` or `Result` values.\n+    /// The `for_loop_over_fallibles` lint checks for `for` loops over `Option` or `Result` values.\n+    ///\n+    /// ### Example\n+    ///\n+    /// ```rust\n+    /// let opt = Some(1);\n+    /// for x in opt { /* ... */}\n+    /// ```\n+    ///\n+    /// {{produces}}\n     ///\n     /// ### Explanation\n     ///\n@@ -25,27 +34,6 @@ declare_lint! {\n     /// The \"intended\" use of `IntoIterator` implementations for `Option` and `Result` is passing them to\n     /// generic code that expects something implementing `IntoIterator`. For example using `.chain(option)`\n     /// to optionally add a value to an iterator.\n-    ///\n-    /// ### Example\n-    ///\n-    /// ```rust\n-    /// # let opt = Some(1);\n-    /// # let res: Result<i32, std::io::Error> = Ok(1);\n-    /// # let recv = || None::<i32>;\n-    /// for x in opt { /* ... */}\n-    /// for x in res { /* ... */ }\n-    /// for x in recv() { /* ... */ }\n-    /// ```\n-    ///\n-    /// Use instead:\n-    /// ```rust\n-    /// # let opt = Some(1);\n-    /// # let res: Result<i32, std::io::Error> = Ok(1);\n-    /// # let recv = || None::<i32>;\n-    /// if let Some(x) = opt { /* ... */}\n-    /// if let Ok(x) = res { /* ... */ }\n-    /// while let Some(x) = recv() { /* ... */ }\n-    /// ```\n     pub FOR_LOOP_OVER_FALLIBLES,\n     Warn,\n     \"for-looping over an `Option` or a `Result`, which is more clearly expressed as an `if let`\""}]}