{"sha": "1ec80f65fbc5b16e2b9238ee9888ca242bbb7c5e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFlYzgwZjY1ZmJjNWIxNmUyYjkyMzhlZTk4ODhjYTI0MmJiYjdjNWU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-05-19T23:22:50Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-05-19T23:22:50Z"}, "message": "Auto merge of #33103 - ranma42:escape-unicode-last, r=alexcrichton\n\nImplement `last` for `EscapeUnicode`\n\nThe implementation is quite trivial as the last character is always `'{'`.\nAs a side-effect it also improves the implementation of `last` for `EscapeUnicode`.\n\nPart of #24214, split from #31049.\n\nMaybe this (and the other changes that I will split from #31049) should wait for a test like `ed_iterator_specializations` to be added. Would it be sufficient to do the same for each possible escape length?", "tree": {"sha": "cf3c74593a16043515f6b5524bc16a5aae78d516", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cf3c74593a16043515f6b5524bc16a5aae78d516"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1ec80f65fbc5b16e2b9238ee9888ca242bbb7c5e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1ec80f65fbc5b16e2b9238ee9888ca242bbb7c5e", "html_url": "https://github.com/rust-lang/rust/commit/1ec80f65fbc5b16e2b9238ee9888ca242bbb7c5e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1ec80f65fbc5b16e2b9238ee9888ca242bbb7c5e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "764ef92ae7a26cbb9c2121de3812a0a17739f65f", "url": "https://api.github.com/repos/rust-lang/rust/commits/764ef92ae7a26cbb9c2121de3812a0a17739f65f", "html_url": "https://github.com/rust-lang/rust/commit/764ef92ae7a26cbb9c2121de3812a0a17739f65f"}, {"sha": "8169fa2fe84b6e3944f7362d3e73ba763a2da1d9", "url": "https://api.github.com/repos/rust-lang/rust/commits/8169fa2fe84b6e3944f7362d3e73ba763a2da1d9", "html_url": "https://github.com/rust-lang/rust/commit/8169fa2fe84b6e3944f7362d3e73ba763a2da1d9"}], "stats": {"total": 45, "additions": 45, "deletions": 0}, "files": [{"sha": "65b9a27bb68e2a47da6b7b375a125221d9de1f5a", "filename": "src/libcore/char.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1ec80f65fbc5b16e2b9238ee9888ca242bbb7c5e/src%2Flibcore%2Fchar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ec80f65fbc5b16e2b9238ee9888ca242bbb7c5e/src%2Flibcore%2Fchar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fchar.rs?ref=1ec80f65fbc5b16e2b9238ee9888ca242bbb7c5e", "patch": "@@ -471,6 +471,18 @@ impl Iterator for EscapeUnicode {\n         let n = n + self.hex_digit_idx;\n         (n, Some(n))\n     }\n+\n+    fn last(self) -> Option<char> {\n+        match self.state {\n+            EscapeUnicodeState::Done => None,\n+\n+            EscapeUnicodeState::RightBrace |\n+            EscapeUnicodeState::Value |\n+            EscapeUnicodeState::LeftBrace |\n+            EscapeUnicodeState::Type |\n+            EscapeUnicodeState::Backslash => Some('}'),\n+        }\n+    }\n }\n \n /// An iterator that yields the literal escape code of a `char`."}, {"sha": "e959e71daf73ff9c9d3d099743f899ac1bcf7753", "filename": "src/libcoretest/char.rs", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/1ec80f65fbc5b16e2b9238ee9888ca242bbb7c5e/src%2Flibcoretest%2Fchar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ec80f65fbc5b16e2b9238ee9888ca242bbb7c5e/src%2Flibcoretest%2Fchar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Fchar.rs?ref=1ec80f65fbc5b16e2b9238ee9888ca242bbb7c5e", "patch": "@@ -262,4 +262,37 @@ fn ed_iterator_specializations() {\n     assert_eq!('\\''.escape_default().last(), Some('\\''));\n }\n \n+#[test]\n+fn eu_iterator_specializations() {\n+    fn check(c: char) {\n+        let len = c.escape_unicode().count();\n+\n+        // Check OoB\n+        assert_eq!(c.escape_unicode().nth(len), None);\n+\n+        // For all possible in-bound offsets\n+        let mut iter = c.escape_unicode();\n+        for offset in 0..len {\n+            // Check last\n+            assert_eq!(iter.clone().last(), Some('}'));\n \n+            // Check counting\n+            assert_eq!(iter.clone().count(), len - offset);\n+\n+            // Check nth\n+            assert_eq!(c.escape_unicode().nth(offset), iter.next());\n+        }\n+\n+        // Check post-last\n+        assert_eq!(iter.clone().last(), None);\n+        assert_eq!(iter.clone().count(), 0);\n+    }\n+\n+    check('\\u{0}');\n+    check('\\u{1}');\n+    check('\\u{12}');\n+    check('\\u{123}');\n+    check('\\u{1234}');\n+    check('\\u{12340}');\n+    check('\\u{10FFFF}');\n+}"}]}