{"sha": "9217f6dcf73ee9dd9fae8888ed33ada96ec49110", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkyMTdmNmRjZjczZWU5ZGQ5ZmFlODg4OGVkMzNhZGE5NmVjNDkxMTA=", "commit": {"author": {"name": "mahdi-frms", "email": "mahdif1380@outlook.com", "date": "2021-08-09T14:51:15Z"}, "committer": {"name": "mahdi-frms", "email": "mahdif1380@outlook.com", "date": "2021-08-09T16:36:24Z"}, "message": "method gen assist usable in all of expression", "tree": {"sha": "857d838e420b4f744825ecc5a5105aec7f0c6449", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/857d838e420b4f744825ecc5a5105aec7f0c6449"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9217f6dcf73ee9dd9fae8888ed33ada96ec49110", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9217f6dcf73ee9dd9fae8888ed33ada96ec49110", "html_url": "https://github.com/rust-lang/rust/commit/9217f6dcf73ee9dd9fae8888ed33ada96ec49110", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9217f6dcf73ee9dd9fae8888ed33ada96ec49110/comments", "author": {"login": "mahdifrmz", "id": 62165556, "node_id": "MDQ6VXNlcjYyMTY1NTU2", "avatar_url": "https://avatars.githubusercontent.com/u/62165556?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mahdifrmz", "html_url": "https://github.com/mahdifrmz", "followers_url": "https://api.github.com/users/mahdifrmz/followers", "following_url": "https://api.github.com/users/mahdifrmz/following{/other_user}", "gists_url": "https://api.github.com/users/mahdifrmz/gists{/gist_id}", "starred_url": "https://api.github.com/users/mahdifrmz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mahdifrmz/subscriptions", "organizations_url": "https://api.github.com/users/mahdifrmz/orgs", "repos_url": "https://api.github.com/users/mahdifrmz/repos", "events_url": "https://api.github.com/users/mahdifrmz/events{/privacy}", "received_events_url": "https://api.github.com/users/mahdifrmz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mahdifrmz", "id": 62165556, "node_id": "MDQ6VXNlcjYyMTY1NTU2", "avatar_url": "https://avatars.githubusercontent.com/u/62165556?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mahdifrmz", "html_url": "https://github.com/mahdifrmz", "followers_url": "https://api.github.com/users/mahdifrmz/followers", "following_url": "https://api.github.com/users/mahdifrmz/following{/other_user}", "gists_url": "https://api.github.com/users/mahdifrmz/gists{/gist_id}", "starred_url": "https://api.github.com/users/mahdifrmz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mahdifrmz/subscriptions", "organizations_url": "https://api.github.com/users/mahdifrmz/orgs", "repos_url": "https://api.github.com/users/mahdifrmz/repos", "events_url": "https://api.github.com/users/mahdifrmz/events{/privacy}", "received_events_url": "https://api.github.com/users/mahdifrmz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "311dc5b04f0c41358714a88e097bbf2735deeb99", "url": "https://api.github.com/repos/rust-lang/rust/commits/311dc5b04f0c41358714a88e097bbf2735deeb99", "html_url": "https://github.com/rust-lang/rust/commit/311dc5b04f0c41358714a88e097bbf2735deeb99"}], "stats": {"total": 34, "additions": 33, "deletions": 1}, "files": [{"sha": "39756611dd55a108deb49cd9b53a8d64283b1b31", "filename": "crates/ide_assists/src/handlers/generate_function.rs", "status": "modified", "additions": 33, "deletions": 1, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/9217f6dcf73ee9dd9fae8888ed33ada96ec49110/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_function.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9217f6dcf73ee9dd9fae8888ed33ada96ec49110/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_function.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_function.rs?ref=9217f6dcf73ee9dd9fae8888ed33ada96ec49110", "patch": "@@ -101,8 +101,10 @@ pub(crate) fn generate_function(acc: &mut Assists, ctx: &AssistContext) -> Optio\n }\n \n pub(crate) fn generate_method(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n-    let fn_name: ast::NameRef = ctx.find_node_at_offset()?;\n     let call: ast::MethodCallExpr = ctx.find_node_at_offset()?;\n+    let fn_name: ast::NameRef = ast::NameRef::cast(\n+        call.syntax().children().find(|child| child.kind() == SyntaxKind::NAME_REF)?,\n+    )?;\n     let ty = ctx.sema.type_of_expr(&call.receiver()?)?.original().strip_references().as_adt()?;\n \n     let current_module =\n@@ -1498,6 +1500,36 @@ mod s {\n impl S {\n \n \n+fn bar(&self) ${0:-> ()} {\n+    todo!()\n+}\n+}\n+\n+\",\n+        )\n+    }\n+\n+    #[test]\n+    fn create_method_with_cursor_anywhere_on_call_expresion() {\n+        check_assist(\n+            generate_method,\n+            r\"\n+struct S;\n+\n+fn foo() {\n+    $0S.bar();\n+}\n+\n+\",\n+            r\"\n+struct S;\n+\n+fn foo() {\n+    S.bar();\n+}\n+impl S {\n+\n+\n fn bar(&self) ${0:-> ()} {\n     todo!()\n }"}]}