{"sha": "a24edb9bcef35b7ac540c6906f1c8672aa603b0d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEyNGVkYjliY2VmMzViN2FjNTQwYzY5MDZmMWM4NjcyYWE2MDNiMGQ=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2017-11-16T12:14:22Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2017-11-20T08:17:27Z"}, "message": "Add structured suggestions for trait imports", "tree": {"sha": "14a3b50f0bc8b70d1dacdaf84fe414f25504c6d5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/14a3b50f0bc8b70d1dacdaf84fe414f25504c6d5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a24edb9bcef35b7ac540c6906f1c8672aa603b0d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEYFTdM4NKd7XQft77pp+NIls619kFAloSj5cACgkQpp+NIls6\n19npng/+NGAa27PlBe9q+pYA9M6cDWpGkIl7Fetm/dtUzufsqna/doEVikT9a98s\nUEsSRnK6jp+S8iQ/hHiCI3CPnz3OAXwMpauu3xxi75AxJHWF/vmlUwlgNAKhM9BP\nWvabTGYpoHrYPVwJzZu/D6mEFemkyqFfXLUeoCFHvFkvjyP2Y3hbC+aR+HeGFqnv\n3K939psrlsFuAcksEiF1cDWLRPEUPWxHhjncuwZqtIyWn0BYWVU9cjw7afKEEFSq\nrtyqIbT5m+PdA7zSdNScjsbPZRtolGQAUbqq5GmHVOD0JAHUN4DAYMTd0mYSlzgt\nAgzXZVPG+/Od6DyCsDmjrp0pMSNBXXv3RqsFkaxPDyaReyq5SH5TMzTxJE3hRfdc\nhQxLzTmyb60fyGT08YyVSEwDy3O0wNr3G7OarzIegIsEnVo2laLw+k173jMot6w4\nG2dE5h1U5EAF5TIwSdTPZKuHR+PSLJULSRXYiWQksWqr1B8OEkNP07EJ244Rg0m/\nOzYMPQgnzdxF0p+NuzZBC/Ag5riAlBLvxiCrfXwVicHIZowf1wwwoevBZN69mTIM\nJUQpWvRaZx+MFxV33Eumq4m6WYypQriirzp4mCmNAISiyFD9BmYQowyjbCrTL32C\nCgadx7ZM3HYow+yFTHN/LuvGDwolnh6YRi+qU3p6B5vHN4iVQrE=\n=e3SU\n-----END PGP SIGNATURE-----", "payload": "tree 14a3b50f0bc8b70d1dacdaf84fe414f25504c6d5\nparent ef94d5c1f18f067ab035ea3f1e85e7b5867ea2a4\nauthor Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1510834462 +0100\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1511165847 +0100\n\nAdd structured suggestions for trait imports\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a24edb9bcef35b7ac540c6906f1c8672aa603b0d", "html_url": "https://github.com/rust-lang/rust/commit/a24edb9bcef35b7ac540c6906f1c8672aa603b0d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a24edb9bcef35b7ac540c6906f1c8672aa603b0d/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ef94d5c1f18f067ab035ea3f1e85e7b5867ea2a4", "url": "https://api.github.com/repos/rust-lang/rust/commits/ef94d5c1f18f067ab035ea3f1e85e7b5867ea2a4", "html_url": "https://github.com/rust-lang/rust/commit/ef94d5c1f18f067ab035ea3f1e85e7b5867ea2a4"}], "stats": {"total": 204, "additions": 166, "deletions": 38}, "files": [{"sha": "5da795ddd1e355cb16366144d5c09a9da2dd56ae", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 14, "deletions": 7, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/a24edb9bcef35b7ac540c6906f1c8672aa603b0d/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a24edb9bcef35b7ac540c6906f1c8672aa603b0d/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=a24edb9bcef35b7ac540c6906f1c8672aa603b0d", "patch": "@@ -588,6 +588,18 @@ struct UsePlacementFinder {\n     found_use: bool,\n }\n \n+impl UsePlacementFinder {\n+    fn check(krate: &Crate, target_module: NodeId) -> (Option<Span>, bool) {\n+        let mut finder = UsePlacementFinder {\n+            target_module,\n+            span: None,\n+            found_use: false,\n+        };\n+        visit::walk_crate(&mut finder, krate);\n+        (finder.span, finder.found_use)\n+    }\n+}\n+\n impl<'tcx> Visitor<'tcx> for UsePlacementFinder {\n     fn visit_mod(\n         &mut self,\n@@ -3588,14 +3600,9 @@ impl<'a> Resolver<'a> {\n \n     fn report_with_use_injections(&mut self, krate: &Crate) {\n         for UseError { mut err, candidates, node_id, better } in self.use_injections.drain(..) {\n-            let mut finder = UsePlacementFinder {\n-                target_module: node_id,\n-                span: None,\n-                found_use: false,\n-            };\n-            visit::walk_crate(&mut finder, krate);\n+            let (span, found_use) = UsePlacementFinder::check(krate, node_id);\n             if !candidates.is_empty() {\n-                show_candidates(&mut err, finder.span, &candidates, better, finder.found_use);\n+                show_candidates(&mut err, span, &candidates, better, found_use);\n             }\n             err.emit();\n         }"}, {"sha": "50e996dd9546ecaf3d8cc752dbae8ea103ee6476", "filename": "src/librustc_typeck/check/method/suggest.rs", "status": "modified", "additions": 108, "deletions": 9, "changes": 117, "blob_url": "https://github.com/rust-lang/rust/blob/a24edb9bcef35b7ac540c6906f1c8672aa603b0d/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a24edb9bcef35b7ac540c6906f1c8672aa603b0d/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs?ref=a24edb9bcef35b7ac540c6906f1c8672aa603b0d", "patch": "@@ -340,16 +340,35 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                               err: &mut DiagnosticBuilder,\n                               mut msg: String,\n                               candidates: Vec<DefId>) {\n-        let limit = if candidates.len() == 5 { 5 } else { 4 };\n-        for (i, trait_did) in candidates.iter().take(limit).enumerate() {\n-            msg.push_str(&format!(\"\\ncandidate #{}: `use {};`\",\n-                                    i + 1,\n-                                    self.tcx.item_path_str(*trait_did)));\n-        }\n-        if candidates.len() > limit {\n-            msg.push_str(&format!(\"\\nand {} others\", candidates.len() - limit));\n+        let module_did = self.tcx.hir.get_module_parent(self.body_id);\n+        let module_id = self.tcx.hir.as_local_node_id(module_did).unwrap();\n+        let krate = self.tcx.hir.krate();\n+        let (span, found_use) = UsePlacementFinder::check(self.tcx, krate, module_id);\n+        if let Some(span) = span {\n+            let path_strings = candidates.iter().map(|did| {\n+                // produce an additional newline to separate the new use statement\n+                // from the directly following item.\n+                let additional_newline = if found_use {\n+                    \"\"\n+                } else {\n+                    \"\\n\"\n+                };\n+                format!(\"use {};\\n{}\", self.tcx.item_path_str(*did), additional_newline)\n+            }).collect();\n+\n+            err.span_suggestions(span, &msg, path_strings);\n+        } else {\n+            let limit = if candidates.len() == 5 { 5 } else { 4 };\n+            for (i, trait_did) in candidates.iter().take(limit).enumerate() {\n+                msg.push_str(&format!(\"\\ncandidate #{}: `use {};`\",\n+                                        i + 1,\n+                                        self.tcx.item_path_str(*trait_did)));\n+            }\n+            if candidates.len() > limit {\n+                msg.push_str(&format!(\"\\nand {} others\", candidates.len() - limit));\n+            }\n+            err.note(&msg[..]);\n         }\n-        err.note(&msg[..]);\n     }\n \n     fn suggest_valid_traits(&self,\n@@ -604,3 +623,83 @@ impl<'a> Iterator for AllTraits<'a> {\n         })\n     }\n }\n+\n+\n+struct UsePlacementFinder<'a, 'tcx: 'a, 'gcx: 'tcx> {\n+    target_module: ast::NodeId,\n+    span: Option<Span>,\n+    found_use: bool,\n+    tcx: TyCtxt<'a, 'gcx, 'tcx>\n+}\n+\n+impl<'a, 'tcx, 'gcx> UsePlacementFinder<'a, 'tcx, 'gcx> {\n+    fn check(\n+        tcx: TyCtxt<'a, 'gcx, 'tcx>,\n+        krate: &'tcx hir::Crate,\n+        target_module: ast::NodeId,\n+    ) -> (Option<Span>, bool) {\n+        let mut finder = UsePlacementFinder {\n+            target_module,\n+            span: None,\n+            found_use: false,\n+            tcx,\n+        };\n+        hir::intravisit::walk_crate(&mut finder, krate);\n+        (finder.span, finder.found_use)\n+    }\n+}\n+\n+impl<'a, 'tcx, 'gcx> hir::intravisit::Visitor<'tcx> for UsePlacementFinder<'a, 'tcx, 'gcx> {\n+    fn visit_mod(\n+        &mut self,\n+        module: &'tcx hir::Mod,\n+        _: Span,\n+        node_id: ast::NodeId,\n+    ) {\n+        if self.span.is_some() {\n+            return;\n+        }\n+        if node_id != self.target_module {\n+            hir::intravisit::walk_mod(self, module, node_id);\n+            return;\n+        }\n+        // find a use statement\n+        for item_id in &module.item_ids {\n+            let item = self.tcx.hir.expect_item(item_id.id);\n+            match item.node {\n+                hir::ItemUse(..) => {\n+                    // don't suggest placing a use before the prelude\n+                    // import or other generated ones\n+                    if item.span.ctxt().outer().expn_info().is_none() {\n+                        self.span = Some(item.span.with_hi(item.span.lo()));\n+                        self.found_use = true;\n+                        return;\n+                    }\n+                },\n+                // don't place use before extern crate\n+                hir::ItemExternCrate(_) => {}\n+                // but place them before the first other item\n+                _ => if self.span.map_or(true, |span| item.span < span ) {\n+                    if item.span.ctxt().outer().expn_info().is_none() {\n+                        // don't insert between attributes and an item\n+                        if item.attrs.is_empty() {\n+                            self.span = Some(item.span.with_hi(item.span.lo()));\n+                        } else {\n+                            // find the first attribute on the item\n+                            for attr in &item.attrs {\n+                                if self.span.map_or(true, |span| attr.span < span) {\n+                                    self.span = Some(attr.span.with_hi(attr.span.lo()));\n+                                }\n+                            }\n+                        }\n+                    }\n+                },\n+            }\n+        }\n+    }\n+    fn nested_visit_map<'this>(\n+        &'this mut self\n+    ) -> hir::intravisit::NestedVisitorMap<'this, 'tcx> {\n+        hir::intravisit::NestedVisitorMap::None\n+    }\n+}"}, {"sha": "793e1c6668337b274f7f7d3021f36eb28d7b9d90", "filename": "src/test/ui/impl-trait/no-method-suggested-traits.stderr", "status": "modified", "additions": 36, "deletions": 18, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/a24edb9bcef35b7ac540c6906f1c8672aa603b0d/src%2Ftest%2Fui%2Fimpl-trait%2Fno-method-suggested-traits.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a24edb9bcef35b7ac540c6906f1c8672aa603b0d/src%2Ftest%2Fui%2Fimpl-trait%2Fno-method-suggested-traits.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fno-method-suggested-traits.stderr?ref=a24edb9bcef35b7ac540c6906f1c8672aa603b0d", "patch": "@@ -5,11 +5,16 @@ error[E0599]: no method named `method` found for type `u32` in the current scope\n    |          ^^^^^^\n    |\n    = help: items from traits can only be used if the trait is in scope\n-   = note: the following traits are implemented but not in scope, perhaps add a `use` for one of them:\n-           candidate #1: `use foo::Bar;`\n-           candidate #2: `use no_method_suggested_traits::foo::PubPub;`\n-           candidate #3: `use no_method_suggested_traits::qux::PrivPub;`\n-           candidate #4: `use no_method_suggested_traits::Reexported;`\n+help: the following traits are implemented but not in scope, perhaps add a `use` for one of them:\n+   |\n+14 | use foo::Bar;\n+   |\n+14 | use no_method_suggested_traits::foo::PubPub;\n+   |\n+14 | use no_method_suggested_traits::qux::PrivPub;\n+   |\n+14 | use no_method_suggested_traits::Reexported;\n+   |\n \n error[E0599]: no method named `method` found for type `std::rc::Rc<&mut std::boxed::Box<&u32>>` in the current scope\n   --> $DIR/no-method-suggested-traits.rs:38:44\n@@ -18,11 +23,16 @@ error[E0599]: no method named `method` found for type `std::rc::Rc<&mut std::box\n    |                                            ^^^^^^\n    |\n    = help: items from traits can only be used if the trait is in scope\n-   = note: the following traits are implemented but not in scope, perhaps add a `use` for one of them:\n-           candidate #1: `use foo::Bar;`\n-           candidate #2: `use no_method_suggested_traits::foo::PubPub;`\n-           candidate #3: `use no_method_suggested_traits::qux::PrivPub;`\n-           candidate #4: `use no_method_suggested_traits::Reexported;`\n+help: the following traits are implemented but not in scope, perhaps add a `use` for one of them:\n+   |\n+14 | use foo::Bar;\n+   |\n+14 | use no_method_suggested_traits::foo::PubPub;\n+   |\n+14 | use no_method_suggested_traits::qux::PrivPub;\n+   |\n+14 | use no_method_suggested_traits::Reexported;\n+   |\n \n error[E0599]: no method named `method` found for type `char` in the current scope\n   --> $DIR/no-method-suggested-traits.rs:44:9\n@@ -31,8 +41,10 @@ error[E0599]: no method named `method` found for type `char` in the current scop\n    |         ^^^^^^\n    |\n    = help: items from traits can only be used if the trait is in scope\n-   = note: the following trait is implemented but not in scope, perhaps add a `use` for it:\n-           candidate #1: `use foo::Bar;`\n+help: the following trait is implemented but not in scope, perhaps add a `use` for it:\n+   |\n+14 | use foo::Bar;\n+   |\n \n error[E0599]: no method named `method` found for type `std::rc::Rc<&mut std::boxed::Box<&char>>` in the current scope\n   --> $DIR/no-method-suggested-traits.rs:48:43\n@@ -41,8 +53,10 @@ error[E0599]: no method named `method` found for type `std::rc::Rc<&mut std::box\n    |                                           ^^^^^^\n    |\n    = help: items from traits can only be used if the trait is in scope\n-   = note: the following trait is implemented but not in scope, perhaps add a `use` for it:\n-           candidate #1: `use foo::Bar;`\n+help: the following trait is implemented but not in scope, perhaps add a `use` for it:\n+   |\n+14 | use foo::Bar;\n+   |\n \n error[E0599]: no method named `method` found for type `i32` in the current scope\n   --> $DIR/no-method-suggested-traits.rs:53:10\n@@ -51,8 +65,10 @@ error[E0599]: no method named `method` found for type `i32` in the current scope\n    |          ^^^^^^\n    |\n    = help: items from traits can only be used if the trait is in scope\n-   = note: the following trait is implemented but not in scope, perhaps add a `use` for it:\n-           candidate #1: `use no_method_suggested_traits::foo::PubPub;`\n+help: the following trait is implemented but not in scope, perhaps add a `use` for it:\n+   |\n+14 | use no_method_suggested_traits::foo::PubPub;\n+   |\n \n error[E0599]: no method named `method` found for type `std::rc::Rc<&mut std::boxed::Box<&i32>>` in the current scope\n   --> $DIR/no-method-suggested-traits.rs:57:44\n@@ -61,8 +77,10 @@ error[E0599]: no method named `method` found for type `std::rc::Rc<&mut std::box\n    |                                            ^^^^^^\n    |\n    = help: items from traits can only be used if the trait is in scope\n-   = note: the following trait is implemented but not in scope, perhaps add a `use` for it:\n-           candidate #1: `use no_method_suggested_traits::foo::PubPub;`\n+help: the following trait is implemented but not in scope, perhaps add a `use` for it:\n+   |\n+14 | use no_method_suggested_traits::foo::PubPub;\n+   |\n \n error[E0599]: no method named `method` found for type `Foo` in the current scope\n   --> $DIR/no-method-suggested-traits.rs:62:9"}, {"sha": "84bdbe3c6975af23aa246ef7a2f42547c7485a2d", "filename": "src/test/ui/issue-35976.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a24edb9bcef35b7ac540c6906f1c8672aa603b0d/src%2Ftest%2Fui%2Fissue-35976.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a24edb9bcef35b7ac540c6906f1c8672aa603b0d/src%2Ftest%2Fui%2Fissue-35976.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-35976.stderr?ref=a24edb9bcef35b7ac540c6906f1c8672aa603b0d", "patch": "@@ -4,8 +4,10 @@ error: the `wait` method cannot be invoked on a trait object\n 24 |     arg.wait();\n    |         ^^^^\n    |\n-   = note: another candidate was found in the following trait, perhaps add a `use` for it:\n-           candidate #1: `use private::Future;`\n+help: another candidate was found in the following trait, perhaps add a `use` for it:\n+   |\n+11 | use private::Future;\n+   |\n \n error: aborting due to previous error\n "}, {"sha": "549c84b9b032539e8449da59ec585af3ae740223", "filename": "src/test/ui/trait-method-private.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a24edb9bcef35b7ac540c6906f1c8672aa603b0d/src%2Ftest%2Fui%2Ftrait-method-private.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a24edb9bcef35b7ac540c6906f1c8672aa603b0d/src%2Ftest%2Fui%2Ftrait-method-private.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftrait-method-private.stderr?ref=a24edb9bcef35b7ac540c6906f1c8672aa603b0d", "patch": "@@ -5,8 +5,10 @@ error[E0624]: method `method` is private\n    |         ^^^^^^\n    |\n    = help: items from traits can only be used if the trait is in scope\n-   = note: the following trait is implemented but not in scope, perhaps add a `use` for it:\n-           candidate #1: `use inner::Bar;`\n+help: the following trait is implemented but not in scope, perhaps add a `use` for it:\n+   |\n+11 | use inner::Bar;\n+   |\n \n error: aborting due to previous error\n "}]}