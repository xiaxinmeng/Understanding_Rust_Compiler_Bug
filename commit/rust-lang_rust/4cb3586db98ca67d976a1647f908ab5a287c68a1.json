{"sha": "4cb3586db98ca67d976a1647f908ab5a287c68a1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRjYjM1ODZkYjk4Y2E2N2Q5NzZhMTY0N2Y5MDhhYjVhMjg3YzY4YTE=", "commit": {"author": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2019-07-23T16:51:15Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-07-23T16:51:15Z"}, "message": "Rollup merge of #62851 - matklad:unescape, r=petrochenkov\n\nmove unescape module to rustc_lexer\n\nIt makes sense to keep the definition of escape sequences closer to the lexer itself, and it is also a bit of code that I would like to share with rust-analyzer.\n\nr? @petrochenkov", "tree": {"sha": "5edf2bf325a48398fe525d7251d7fa33c8b7bddb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5edf2bf325a48398fe525d7251d7fa33c8b7bddb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4cb3586db98ca67d976a1647f908ab5a287c68a1", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdNzsDCRBK7hj4Ov3rIwAAdHIIAEs97kVMFxk0I28pmb7wDOVA\n+evSK92FXt2HmAAgYmQMaEfMmmVUuXm2LMPz9VAaPyQnIzgTo6pbxodfckqdWB/q\ngt7BEcaTUcky5kBmVy62V3Orjny0ijW3HRsoQrsDVIXmfewjtcgrc4S0nri1ws9F\nrUpPeokmNietU1AKbz4HlAX3CpoLZ9dM3G6yge2BueDqiEs/oostI5gXJE+D4oLb\n5ZrSJ43ogYRBbIYdOeymZ4E0htiNvoSbfgQpbSZOl8E1LfPCaHQHH5zBgAJAON1T\nozWTcetXwIHAj6nxTdQZVVlGUuz9lCYeDztf+ynfd1SKoaqQmEsaw47wKGPNjmM=\n=18xv\n-----END PGP SIGNATURE-----\n", "payload": "tree 5edf2bf325a48398fe525d7251d7fa33c8b7bddb\nparent 8afc53c195413c3bc785d134db79751434efd707\nparent e63fe150bfbce632dd7ff0a656a4180557128e4f\nauthor Mark Rousskov <mark.simulacrum@gmail.com> 1563900675 -0400\ncommitter GitHub <noreply@github.com> 1563900675 -0400\n\nRollup merge of #62851 - matklad:unescape, r=petrochenkov\n\nmove unescape module to rustc_lexer\n\nIt makes sense to keep the definition of escape sequences closer to the lexer itself, and it is also a bit of code that I would like to share with rust-analyzer.\n\nr? @petrochenkov\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4cb3586db98ca67d976a1647f908ab5a287c68a1", "html_url": "https://github.com/rust-lang/rust/commit/4cb3586db98ca67d976a1647f908ab5a287c68a1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4cb3586db98ca67d976a1647f908ab5a287c68a1/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8afc53c195413c3bc785d134db79751434efd707", "url": "https://api.github.com/repos/rust-lang/rust/commits/8afc53c195413c3bc785d134db79751434efd707", "html_url": "https://github.com/rust-lang/rust/commit/8afc53c195413c3bc785d134db79751434efd707"}, {"sha": "e63fe150bfbce632dd7ff0a656a4180557128e4f", "url": "https://api.github.com/repos/rust-lang/rust/commits/e63fe150bfbce632dd7ff0a656a4180557128e4f", "html_url": "https://github.com/rust-lang/rust/commit/e63fe150bfbce632dd7ff0a656a4180557128e4f"}], "stats": {"total": 35, "additions": 17, "deletions": 18}, "files": [{"sha": "12e095b8bd5955c03e28cb0a6f4a0014c05af3a9", "filename": "src/librustc_lexer/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4cb3586db98ca67d976a1647f908ab5a287c68a1/src%2Flibrustc_lexer%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cb3586db98ca67d976a1647f908ab5a287c68a1/src%2Flibrustc_lexer%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lexer%2Fsrc%2Flib.rs?ref=4cb3586db98ca67d976a1647f908ab5a287c68a1", "patch": "@@ -4,6 +4,7 @@\n #![cfg_attr(not(feature = \"unicode-xid\"), feature(unicode_internals))]\n \n mod cursor;\n+pub mod unescape;\n \n use crate::cursor::{Cursor, EOF_CHAR};\n "}, {"sha": "70085df9948ebb8ad6ff44ca2965476e970945a9", "filename": "src/librustc_lexer/src/unescape.rs", "status": "renamed", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/4cb3586db98ca67d976a1647f908ab5a287c68a1/src%2Flibrustc_lexer%2Fsrc%2Funescape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cb3586db98ca67d976a1647f908ab5a287c68a1/src%2Flibrustc_lexer%2Fsrc%2Funescape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lexer%2Fsrc%2Funescape.rs?ref=4cb3586db98ca67d976a1647f908ab5a287c68a1", "patch": "@@ -5,7 +5,7 @@ use std::str::Chars;\n use std::ops::Range;\n \n #[derive(Debug, PartialEq, Eq)]\n-pub(crate) enum EscapeError {\n+pub enum EscapeError {\n     ZeroChars,\n     MoreThanOneChar,\n \n@@ -35,22 +35,22 @@ pub(crate) enum EscapeError {\n \n /// Takes a contents of a char literal (without quotes), and returns an\n /// unescaped char or an error\n-pub(crate) fn unescape_char(literal_text: &str) -> Result<char, (usize, EscapeError)> {\n+pub fn unescape_char(literal_text: &str) -> Result<char, (usize, EscapeError)> {\n     let mut chars = literal_text.chars();\n     unescape_char_or_byte(&mut chars, Mode::Char)\n         .map_err(|err| (literal_text.len() - chars.as_str().len(), err))\n }\n \n /// Takes a contents of a string literal (without quotes) and produces a\n /// sequence of escaped characters or errors.\n-pub(crate) fn unescape_str<F>(literal_text: &str, callback: &mut F)\n+pub fn unescape_str<F>(literal_text: &str, callback: &mut F)\n where\n     F: FnMut(Range<usize>, Result<char, EscapeError>),\n {\n     unescape_str_or_byte_str(literal_text, Mode::Str, callback)\n }\n \n-pub(crate) fn unescape_byte(literal_text: &str) -> Result<u8, (usize, EscapeError)> {\n+pub fn unescape_byte(literal_text: &str) -> Result<u8, (usize, EscapeError)> {\n     let mut chars = literal_text.chars();\n     unescape_char_or_byte(&mut chars, Mode::Byte)\n         .map(byte_from_char)\n@@ -59,7 +59,7 @@ pub(crate) fn unescape_byte(literal_text: &str) -> Result<u8, (usize, EscapeErro\n \n /// Takes a contents of a string literal (without quotes) and produces a\n /// sequence of escaped characters or errors.\n-pub(crate) fn unescape_byte_str<F>(literal_text: &str, callback: &mut F)\n+pub fn unescape_byte_str<F>(literal_text: &str, callback: &mut F)\n where\n     F: FnMut(Range<usize>, Result<u8, EscapeError>),\n {\n@@ -72,7 +72,7 @@ where\n /// sequence of characters or errors.\n /// NOTE: Raw strings do not perform any explicit character escaping, here we\n /// only translate CRLF to LF and produce errors on bare CR.\n-pub(crate) fn unescape_raw_str<F>(literal_text: &str, callback: &mut F)\n+pub fn unescape_raw_str<F>(literal_text: &str, callback: &mut F)\n where\n     F: FnMut(Range<usize>, Result<char, EscapeError>),\n {\n@@ -83,7 +83,7 @@ where\n /// sequence of characters or errors.\n /// NOTE: Raw strings do not perform any explicit character escaping, here we\n /// only translate CRLF to LF and produce errors on bare CR.\n-pub(crate) fn unescape_raw_byte_str<F>(literal_text: &str, callback: &mut F)\n+pub fn unescape_raw_byte_str<F>(literal_text: &str, callback: &mut F)\n where\n     F: FnMut(Range<usize>, Result<u8, EscapeError>),\n {\n@@ -93,26 +93,26 @@ where\n }\n \n #[derive(Debug, Clone, Copy)]\n-pub(crate) enum Mode {\n+pub enum Mode {\n     Char,\n     Str,\n     Byte,\n     ByteStr,\n }\n \n impl Mode {\n-    fn in_single_quotes(self) -> bool {\n+    pub fn in_single_quotes(self) -> bool {\n         match self {\n             Mode::Char | Mode::Byte => true,\n             Mode::Str | Mode::ByteStr => false,\n         }\n     }\n \n-    pub(crate) fn in_double_quotes(self) -> bool {\n+    pub fn in_double_quotes(self) -> bool {\n         !self.in_single_quotes()\n     }\n \n-    pub(crate) fn is_bytes(self) -> bool {\n+    pub fn is_bytes(self) -> bool {\n         match self {\n             Mode::Byte | Mode::ByteStr => true,\n             Mode::Char | Mode::Str => false,", "previous_filename": "src/libsyntax/parse/unescape.rs"}, {"sha": "b97801a50d4721cbc6c9c88f5976388c9e9ed435", "filename": "src/libsyntax/parse/lexer/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cb3586db98ca67d976a1647f908ab5a287c68a1/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cb3586db98ca67d976a1647f908ab5a287c68a1/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs?ref=4cb3586db98ca67d976a1647f908ab5a287c68a1", "patch": "@@ -1,12 +1,12 @@\n use crate::parse::ParseSess;\n use crate::parse::token::{self, Token, TokenKind};\n use crate::symbol::{sym, Symbol};\n-use crate::parse::unescape;\n use crate::parse::unescape_error_reporting::{emit_unescape_error, push_escaped_char};\n \n use errors::{FatalError, Diagnostic, DiagnosticBuilder};\n use syntax_pos::{BytePos, Pos, Span, NO_EXPANSION};\n use rustc_lexer::Base;\n+use rustc_lexer::unescape;\n \n use std::borrow::Cow;\n use std::char;"}, {"sha": "6409acba573ad33a43b9b0f49a2ec426807da896", "filename": "src/libsyntax/parse/literal.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4cb3586db98ca67d976a1647f908ab5a287c68a1/src%2Flibsyntax%2Fparse%2Fliteral.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cb3586db98ca67d976a1647f908ab5a287c68a1/src%2Flibsyntax%2Fparse%2Fliteral.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fliteral.rs?ref=4cb3586db98ca67d976a1647f908ab5a287c68a1", "patch": "@@ -4,9 +4,6 @@ use crate::ast::{self, Lit, LitKind};\n use crate::parse::parser::Parser;\n use crate::parse::PResult;\n use crate::parse::token::{self, Token, TokenKind};\n-use crate::parse::unescape::{unescape_char, unescape_byte};\n-use crate::parse::unescape::{unescape_str, unescape_byte_str};\n-use crate::parse::unescape::{unescape_raw_str, unescape_raw_byte_str};\n use crate::print::pprust;\n use crate::symbol::{kw, sym, Symbol};\n use crate::tokenstream::{TokenStream, TokenTree};\n@@ -15,6 +12,9 @@ use errors::{Applicability, Handler};\n use log::debug;\n use rustc_data_structures::sync::Lrc;\n use syntax_pos::Span;\n+use rustc_lexer::unescape::{unescape_char, unescape_byte};\n+use rustc_lexer::unescape::{unescape_str, unescape_byte_str};\n+use rustc_lexer::unescape::{unescape_raw_str, unescape_raw_byte_str};\n \n use std::ascii;\n "}, {"sha": "225065c1cf11f84a7886bb1df712f74b3b4971df", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4cb3586db98ca67d976a1647f908ab5a287c68a1/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cb3586db98ca67d976a1647f908ab5a287c68a1/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=4cb3586db98ca67d976a1647f908ab5a287c68a1", "patch": "@@ -32,7 +32,6 @@ pub mod token;\n crate mod classify;\n crate mod diagnostics;\n crate mod literal;\n-crate mod unescape;\n crate mod unescape_error_reporting;\n \n /// Info about a parsing session."}, {"sha": "bc3ee8620e06835f96c150c122347b4553c97016", "filename": "src/libsyntax/parse/unescape_error_reporting.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4cb3586db98ca67d976a1647f908ab5a287c68a1/src%2Flibsyntax%2Fparse%2Funescape_error_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cb3586db98ca67d976a1647f908ab5a287c68a1/src%2Flibsyntax%2Fparse%2Funescape_error_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Funescape_error_reporting.rs?ref=4cb3586db98ca67d976a1647f908ab5a287c68a1", "patch": "@@ -3,12 +3,11 @@\n use std::ops::Range;\n use std::iter::once;\n \n+use rustc_lexer::unescape::{EscapeError, Mode};\n use syntax_pos::{Span, BytePos};\n \n use crate::errors::{Handler, Applicability};\n \n-use super::unescape::{EscapeError, Mode};\n-\n pub(crate) fn emit_unescape_error(\n     handler: &Handler,\n     // interior part of the literal, without quotes"}]}