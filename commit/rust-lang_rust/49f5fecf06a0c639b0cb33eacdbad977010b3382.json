{"sha": "49f5fecf06a0c639b0cb33eacdbad977010b3382", "node_id": "C_kwDOAAsO6NoAKDQ5ZjVmZWNmMDZhMGM2MzliMGNiMzNlYWNkYmFkOTc3MDEwYjMzODI", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-10-09T11:18:53Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-10-09T11:18:53Z"}, "message": "internal: move test", "tree": {"sha": "ac2eea15c727fac04965beeea26aa07d47988068", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ac2eea15c727fac04965beeea26aa07d47988068"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/49f5fecf06a0c639b0cb33eacdbad977010b3382", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/49f5fecf06a0c639b0cb33eacdbad977010b3382", "html_url": "https://github.com/rust-lang/rust/commit/49f5fecf06a0c639b0cb33eacdbad977010b3382", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/49f5fecf06a0c639b0cb33eacdbad977010b3382/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "78ca43ef3df5b015ec615a267cd0777401cf6ad3", "url": "https://api.github.com/repos/rust-lang/rust/commits/78ca43ef3df5b015ec615a267cd0777401cf6ad3", "html_url": "https://github.com/rust-lang/rust/commit/78ca43ef3df5b015ec615a267cd0777401cf6ad3"}], "stats": {"total": 60, "additions": 49, "deletions": 11}, "files": [{"sha": "c00795d34b1fe78cc159524f7db7173a3552918c", "filename": "crates/hir_def/src/macro_expansion_tests.rs", "status": "modified", "additions": 49, "deletions": 3, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/49f5fecf06a0c639b0cb33eacdbad977010b3382/crates%2Fhir_def%2Fsrc%2Fmacro_expansion_tests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49f5fecf06a0c639b0cb33eacdbad977010b3382/crates%2Fhir_def%2Fsrc%2Fmacro_expansion_tests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fmacro_expansion_tests.rs?ref=49f5fecf06a0c639b0cb33eacdbad977010b3382", "patch": "@@ -9,13 +9,17 @@\n //! write unit-tests (in fact, we used to do that), but that makes tests brittle\n //! and harder to understand.\n \n-use std::ops::Range;\n+use std::{iter, ops::Range};\n \n use base_db::{fixture::WithFixture, SourceDatabase};\n use expect_test::{expect, Expect};\n use hir_expand::{db::AstDatabase, InFile, MacroFile};\n use stdx::format_to;\n-use syntax::{ast, AstNode};\n+use syntax::{\n+    ast, AstNode,\n+    SyntaxKind::{self, IDENT},\n+    SyntaxNode, T,\n+};\n \n use crate::{\n     db::DefDatabase, nameres::ModuleSource, resolver::HasResolver, test_db::TestDB, AsMacroCall,\n@@ -58,7 +62,8 @@ fn check(ra_fixture: &str, expect: Expect) {\n             format_to!(expn_text, \"/* error: {} */\", err);\n         }\n         if let Some((parse, _token_map)) = exp.value {\n-            format_to!(expn_text, \"{}\", parse.syntax_node());\n+            let pp = pretty_print_macro_expansion(parse.syntax_node());\n+            format_to!(expn_text, \"{}\", pp);\n         }\n         let range = call.syntax().text_range();\n         let range: Range<usize> = range.into();\n@@ -68,6 +73,29 @@ fn check(ra_fixture: &str, expect: Expect) {\n     expect.assert_eq(&expanded_text);\n }\n \n+fn pretty_print_macro_expansion(expn: SyntaxNode) -> String {\n+    let mut res = String::new();\n+    let mut prev_kind = SyntaxKind::EOF;\n+    for token in iter::successors(expn.first_token(), |t| t.next_token()) {\n+        let curr_kind = token.kind();\n+        let needs_space = match (prev_kind, curr_kind) {\n+            _ if prev_kind.is_trivia() || curr_kind.is_trivia() => false,\n+            (T![=], _) | (_, T![=]) => true,\n+            (IDENT, IDENT) => true,\n+            (IDENT, _) => curr_kind.is_keyword(),\n+            (_, IDENT) => prev_kind.is_keyword(),\n+            _ => false,\n+        };\n+\n+        if needs_space {\n+            res.push(' ')\n+        }\n+        prev_kind = curr_kind;\n+        format_to!(res, \"{}\", token)\n+    }\n+    res\n+}\n+\n #[test]\n fn wrong_nesting_level() {\n     check(\n@@ -105,3 +133,21 @@ fn f() { let _ = /* error: could not convert tokens */; }\n \"#]],\n     )\n }\n+\n+#[test]\n+fn round_trips_compound_tokens() {\n+    check(\n+        r#\"\n+macro_rules! m {\n+    () => { type qual: ::T = qual::T; }\n+}\n+m!();\n+\"#,\n+        expect![[r#\"\n+macro_rules! m {\n+    () => { type qual: ::T = qual::T; }\n+}\n+type qual: ::T = qual::T;\n+        \"#]],\n+    )\n+}"}, {"sha": "037881cef6e051d549c996f87dc61b4b5db3db57", "filename": "crates/mbe/src/syntax_bridge.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/49f5fecf06a0c639b0cb33eacdbad977010b3382/crates%2Fmbe%2Fsrc%2Fsyntax_bridge.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49f5fecf06a0c639b0cb33eacdbad977010b3382/crates%2Fmbe%2Fsrc%2Fsyntax_bridge.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fmbe%2Fsrc%2Fsyntax_bridge.rs?ref=49f5fecf06a0c639b0cb33eacdbad977010b3382", "patch": "@@ -822,14 +822,6 @@ mod tests {\n         assert_eq!(tt.delimiter_kind(), Some(tt::DelimiterKind::Brace));\n     }\n \n-    #[test]\n-    fn test_token_tree_multi_char_punct() {\n-        let source_file = ast::SourceFile::parse(\"struct Foo { a: x::Y }\").ok().unwrap();\n-        let struct_def = source_file.syntax().descendants().find_map(ast::Struct::cast).unwrap();\n-        let tt = syntax_node_to_token_tree(struct_def.syntax()).0;\n-        token_tree_to_syntax_node(&tt, ParserEntryPoint::Item).unwrap();\n-    }\n-\n     #[test]\n     fn test_missing_closing_delim() {\n         let source_file = ast::SourceFile::parse(\"m!(x\").tree();"}]}