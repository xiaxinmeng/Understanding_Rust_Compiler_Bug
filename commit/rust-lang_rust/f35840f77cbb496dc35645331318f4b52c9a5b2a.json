{"sha": "f35840f77cbb496dc35645331318f4b52c9a5b2a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYzNTg0MGY3N2NiYjQ5NmRjMzU2NDUzMzEzMThmNGI1MmM5YTViMmE=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-12-30T07:17:32Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-12-30T12:50:20Z"}, "message": "Pass the span of `<init>` in `let <pat> = <init>;`\nwhen type checking `<pat>`.", "tree": {"sha": "42683216e51f715832a2b336200dba0c8991bb37", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/42683216e51f715832a2b336200dba0c8991bb37"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f35840f77cbb496dc35645331318f4b52c9a5b2a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f35840f77cbb496dc35645331318f4b52c9a5b2a", "html_url": "https://github.com/rust-lang/rust/commit/f35840f77cbb496dc35645331318f4b52c9a5b2a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f35840f77cbb496dc35645331318f4b52c9a5b2a/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6137ad49e45713c7bdd3703814829d6362bf1dd1", "url": "https://api.github.com/repos/rust-lang/rust/commits/6137ad49e45713c7bdd3703814829d6362bf1dd1", "html_url": "https://github.com/rust-lang/rust/commit/6137ad49e45713c7bdd3703814829d6362bf1dd1"}], "stats": {"total": 35, "additions": 19, "deletions": 16}, "files": [{"sha": "583a0409fb9f41bee6444db4fa4205456eeb519b", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f35840f77cbb496dc35645331318f4b52c9a5b2a/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f35840f77cbb496dc35645331318f4b52c9a5b2a/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=f35840f77cbb496dc35645331318f4b52c9a5b2a", "patch": "@@ -4275,17 +4275,17 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     }\n \n     pub fn check_decl_local(&self, local: &'tcx hir::Local<'tcx>) {\n-        let t = self.local_ty(local.span, local.hir_id).decl_ty;\n-        self.write_ty(local.hir_id, t);\n+        let ty = self.local_ty(local.span, local.hir_id).decl_ty;\n+        self.write_ty(local.hir_id, ty);\n \n         if let Some(ref init) = local.init {\n             let init_ty = self.check_decl_initializer(local, &init);\n-            self.overwrite_local_ty_if_err(local, t, init_ty);\n+            self.overwrite_local_ty_if_err(local, ty, init_ty);\n         }\n \n-        self.check_pat_top(&local.pat, t, None);\n+        self.check_pat_top(&local.pat, ty, local.init.map(|init| init.span));\n         let pat_ty = self.node_ty(local.pat.hir_id);\n-        self.overwrite_local_ty_if_err(local, t, pat_ty);\n+        self.overwrite_local_ty_if_err(local, ty, pat_ty);\n     }\n \n     fn overwrite_local_ty_if_err("}, {"sha": "b18a7ac75a282cb2a2b0af6c3f0ef49ad95ff2fd", "filename": "src/librustc_typeck/check/pat.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f35840f77cbb496dc35645331318f4b52c9a5b2a/src%2Flibrustc_typeck%2Fcheck%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f35840f77cbb496dc35645331318f4b52c9a5b2a/src%2Flibrustc_typeck%2Fcheck%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fpat.rs?ref=f35840f77cbb496dc35645331318f4b52c9a5b2a", "patch": "@@ -59,14 +59,9 @@ impl<'tcx> FnCtxt<'_, 'tcx> {\n }\n \n impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n-    pub fn check_pat_top(\n-        &self,\n-        pat: &'tcx Pat<'tcx>,\n-        expected: Ty<'tcx>,\n-        discrim_span: Option<Span>,\n-    ) {\n+    pub fn check_pat_top(&self, pat: &'tcx Pat<'tcx>, expected: Ty<'tcx>, span: Option<Span>) {\n         let def_bm = BindingMode::BindByValue(hir::Mutability::Not);\n-        self.check_pat(pat, expected, def_bm, discrim_span);\n+        self.check_pat(pat, expected, def_bm, span);\n     }\n \n     /// `discrim_span` argument having a `Span` indicates that this pattern is part of a match"}, {"sha": "cf155f428c6a0606769b9918a0f194719319ee2b", "filename": "src/test/ui/issues/issue-14541.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f35840f77cbb496dc35645331318f4b52c9a5b2a/src%2Ftest%2Fui%2Fissues%2Fissue-14541.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f35840f77cbb496dc35645331318f4b52c9a5b2a/src%2Ftest%2Fui%2Fissues%2Fissue-14541.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-14541.stderr?ref=f35840f77cbb496dc35645331318f4b52c9a5b2a", "patch": "@@ -2,7 +2,9 @@ error[E0308]: mismatched types\n   --> $DIR/issue-14541.rs:5:9\n    |\n LL |     let Vec3 { y: _, z: _ } = v;\n-   |         ^^^^^^^^^^^^^^^^^^^ expected struct `Vec2`, found struct `Vec3`\n+   |         ^^^^^^^^^^^^^^^^^^^   - this expression has type `Vec2`\n+   |         |\n+   |         expected struct `Vec2`, found struct `Vec3`\n \n error: aborting due to previous error\n "}, {"sha": "03eb93821b5f22ee345de89e8ea3def019d1b1cc", "filename": "src/test/ui/issues/issue-16338.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f35840f77cbb496dc35645331318f4b52c9a5b2a/src%2Ftest%2Fui%2Fissues%2Fissue-16338.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f35840f77cbb496dc35645331318f4b52c9a5b2a/src%2Ftest%2Fui%2Fissues%2Fissue-16338.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-16338.stderr?ref=f35840f77cbb496dc35645331318f4b52c9a5b2a", "patch": "@@ -2,7 +2,9 @@ error[E0308]: mismatched types\n   --> $DIR/issue-16338.rs:7:9\n    |\n LL |     let Slice { data: data, len: len } = \"foo\";\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `str`, found struct `Slice`\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^   ----- this expression has type `str`\n+   |         |\n+   |         expected `str`, found struct `Slice`\n    |\n    = note: expected type `str`\n             found struct `Slice<_>`"}, {"sha": "361369e68bc0869238375f4c2747ea4e9cca7499", "filename": "src/test/ui/issues/issue-37026.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f35840f77cbb496dc35645331318f4b52c9a5b2a/src%2Ftest%2Fui%2Fissues%2Fissue-37026.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f35840f77cbb496dc35645331318f4b52c9a5b2a/src%2Ftest%2Fui%2Fissues%2Fissue-37026.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-37026.stderr?ref=f35840f77cbb496dc35645331318f4b52c9a5b2a", "patch": "@@ -8,7 +8,9 @@ error[E0308]: mismatched types\n   --> $DIR/issue-37026.rs:7:9\n    |\n LL |     let empty_struct::XEmpty6(..) = ();\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^ expected `()`, found struct `empty_struct::XEmpty6`\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^   -- this expression has type `()`\n+   |         |\n+   |         expected `()`, found struct `empty_struct::XEmpty6`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "6e8ea6bf618f2fdb1a86ba90a83c755a3135326f", "filename": "src/test/ui/issues/issue-67037-pat-tup-scrut-ty-diff-less-fields.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f35840f77cbb496dc35645331318f4b52c9a5b2a/src%2Ftest%2Fui%2Fissues%2Fissue-67037-pat-tup-scrut-ty-diff-less-fields.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f35840f77cbb496dc35645331318f4b52c9a5b2a/src%2Ftest%2Fui%2Fissues%2Fissue-67037-pat-tup-scrut-ty-diff-less-fields.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-67037-pat-tup-scrut-ty-diff-less-fields.stderr?ref=f35840f77cbb496dc35645331318f4b52c9a5b2a", "patch": "@@ -2,7 +2,9 @@ error[E0308]: mismatched types\n   --> $DIR/issue-67037-pat-tup-scrut-ty-diff-less-fields.rs:19:9\n    |\n LL |     let P() = U {};\n-   |         ^^^ expected struct `U`, found struct `P`\n+   |         ^^^   ---- this expression has type `U`\n+   |         |\n+   |         expected struct `U`, found struct `P`\n    |\n    = note: expected struct `U`\n               found struct `P<_>`"}]}