{"sha": "4a02ae9636d57dd4b5b93e5d2688f9eec5de39e9", "node_id": "C_kwDOAAsO6NoAKDRhMDJhZTk2MzZkNTdkZDRiNWI5M2U1ZDI2ODhmOWVlYzVkZTM5ZTk", "commit": {"author": {"name": "kyoto7250", "email": "50972773+kyoto7250@users.noreply.github.com", "date": "2022-06-18T09:29:39Z"}, "committer": {"name": "kyoto7250", "email": "50972773+kyoto7250@users.noreply.github.com", "date": "2022-06-18T09:29:39Z"}, "message": "cargo dev fmt", "tree": {"sha": "3fd2de35acd580f662b694a27be09bdfcf84a5ed", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3fd2de35acd580f662b694a27be09bdfcf84a5ed"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4a02ae9636d57dd4b5b93e5d2688f9eec5de39e9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4a02ae9636d57dd4b5b93e5d2688f9eec5de39e9", "html_url": "https://github.com/rust-lang/rust/commit/4a02ae9636d57dd4b5b93e5d2688f9eec5de39e9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4a02ae9636d57dd4b5b93e5d2688f9eec5de39e9/comments", "author": {"login": "kyoto7250", "id": 50972773, "node_id": "MDQ6VXNlcjUwOTcyNzcz", "avatar_url": "https://avatars.githubusercontent.com/u/50972773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kyoto7250", "html_url": "https://github.com/kyoto7250", "followers_url": "https://api.github.com/users/kyoto7250/followers", "following_url": "https://api.github.com/users/kyoto7250/following{/other_user}", "gists_url": "https://api.github.com/users/kyoto7250/gists{/gist_id}", "starred_url": "https://api.github.com/users/kyoto7250/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kyoto7250/subscriptions", "organizations_url": "https://api.github.com/users/kyoto7250/orgs", "repos_url": "https://api.github.com/users/kyoto7250/repos", "events_url": "https://api.github.com/users/kyoto7250/events{/privacy}", "received_events_url": "https://api.github.com/users/kyoto7250/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kyoto7250", "id": 50972773, "node_id": "MDQ6VXNlcjUwOTcyNzcz", "avatar_url": "https://avatars.githubusercontent.com/u/50972773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kyoto7250", "html_url": "https://github.com/kyoto7250", "followers_url": "https://api.github.com/users/kyoto7250/followers", "following_url": "https://api.github.com/users/kyoto7250/following{/other_user}", "gists_url": "https://api.github.com/users/kyoto7250/gists{/gist_id}", "starred_url": "https://api.github.com/users/kyoto7250/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kyoto7250/subscriptions", "organizations_url": "https://api.github.com/users/kyoto7250/orgs", "repos_url": "https://api.github.com/users/kyoto7250/repos", "events_url": "https://api.github.com/users/kyoto7250/events{/privacy}", "received_events_url": "https://api.github.com/users/kyoto7250/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "040d45e41253aeb6f8efbf3f07f737ea1fb961df", "url": "https://api.github.com/repos/rust-lang/rust/commits/040d45e41253aeb6f8efbf3f07f737ea1fb961df", "html_url": "https://github.com/rust-lang/rust/commit/040d45e41253aeb6f8efbf3f07f737ea1fb961df"}], "stats": {"total": 19, "additions": 6, "deletions": 13}, "files": [{"sha": "1deff9684a140abedbe5d1da5facb0f7bba1486f", "filename": "clippy_lints/src/copies.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4a02ae9636d57dd4b5b93e5d2688f9eec5de39e9/clippy_lints%2Fsrc%2Fcopies.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a02ae9636d57dd4b5b93e5d2688f9eec5de39e9/clippy_lints%2Fsrc%2Fcopies.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcopies.rs?ref=4a02ae9636d57dd4b5b93e5d2688f9eec5de39e9", "patch": "@@ -195,10 +195,7 @@ fn lint_if_same_then_else(cx: &LateContext<'_>, conds: &[&Expr<'_>], blocks: &[&\n         .array_windows::<2>()\n         .enumerate()\n         .fold(true, |all_eq, (i, &[lhs, rhs])| {\n-            if eq.eq_block(lhs, rhs)\n-                && !contains_let(conds[i])\n-                && conds.get(i + 1).map_or(true, |e| !contains_let(e))\n-            {\n+            if eq.eq_block(lhs, rhs) && !contains_let(conds[i]) && conds.get(i + 1).map_or(true, |e| !contains_let(e)) {\n                 span_lint_and_note(\n                     cx,\n                     IF_SAME_THEN_ELSE,\n@@ -368,10 +365,6 @@ fn eq_stmts(\n         .all(|b| get_stmt(b).map_or(false, |s| eq.eq_stmt(s, stmt)))\n }\n \n-\n-\n-\n-\n fn scan_block_for_eq(cx: &LateContext<'_>, _conds: &[&Expr<'_>], block: &Block<'_>, blocks: &[&Block<'_>]) -> BlockEq {\n     let mut eq = SpanlessEq::new(cx);\n     let mut eq = eq.inter_expr();"}, {"sha": "97a15108d0c367c093e797425797549ca1992316", "filename": "clippy_utils/src/hir_utils.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4a02ae9636d57dd4b5b93e5d2688f9eec5de39e9/clippy_utils%2Fsrc%2Fhir_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a02ae9636d57dd4b5b93e5d2688f9eec5de39e9/clippy_utils%2Fsrc%2Fhir_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fhir_utils.rs?ref=4a02ae9636d57dd4b5b93e5d2688f9eec5de39e9", "patch": "@@ -1,6 +1,6 @@\n use crate::consts::constant_simple;\n-use crate::source::snippet_opt;\n use crate::macros::macro_backtrace;\n+use crate::source::snippet_opt;\n use rustc_ast::ast::InlineAsmTemplatePiece;\n use rustc_data_structures::fx::FxHasher;\n use rustc_hir::def::Res;\n@@ -88,12 +88,12 @@ impl<'a, 'tcx> SpanlessEq<'a, 'tcx> {\n     }\n \n     fn cannot_be_compared_block(&mut self, block: &Block<'_>) -> bool {\n-        if block.stmts.first().map_or(false, |stmt|\n+        if block.stmts.first().map_or(false, |stmt| {\n             matches!(\n                 stmt.kind,\n                 StmtKind::Semi(semi_expr) if self.should_ignore(semi_expr)\n             )\n-        ) {\n+        }) {\n             return true;\n         }\n \n@@ -107,12 +107,12 @@ impl<'a, 'tcx> SpanlessEq<'a, 'tcx> {\n     }\n \n     fn should_ignore(&mut self, expr: &Expr<'_>) -> bool {\n-        if macro_backtrace(expr.span).last().map_or(false, |macro_call|\n+        if macro_backtrace(expr.span).last().map_or(false, |macro_call| {\n             matches!(\n                 &self.cx.tcx.get_diagnostic_name(macro_call.def_id),\n                 Some(sym::todo_macro | sym::unimplemented_macro)\n             )\n-        ) {\n+        }) {\n             return true;\n         }\n "}]}