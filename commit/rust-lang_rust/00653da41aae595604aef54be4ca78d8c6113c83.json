{"sha": "00653da41aae595604aef54be4ca78d8c6113c83", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAwNjUzZGE0MWFhZTU5NTYwNGFlZjU0YmU0Y2E3OGQ4YzYxMTNjODM=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-07-18T02:43:15Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-07-18T02:43:15Z"}, "message": "Rollup merge of #27071 - AlisdairO:diagnostics, r=Manishearth\n\nAdded some detailed diagnostics for E0364 and E0365.", "tree": {"sha": "88de082442a8409a954418e90142c1804b809fd1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/88de082442a8409a954418e90142c1804b809fd1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/00653da41aae595604aef54be4ca78d8c6113c83", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/00653da41aae595604aef54be4ca78d8c6113c83", "html_url": "https://github.com/rust-lang/rust/commit/00653da41aae595604aef54be4ca78d8c6113c83", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/00653da41aae595604aef54be4ca78d8c6113c83/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1cf11cc04ea87355f829b0203a92e6548f8c49d4", "url": "https://api.github.com/repos/rust-lang/rust/commits/1cf11cc04ea87355f829b0203a92e6548f8c49d4", "html_url": "https://github.com/rust-lang/rust/commit/1cf11cc04ea87355f829b0203a92e6548f8c49d4"}, {"sha": "94b1ca8448a2bcf25091bfb182ddac29b3b1f2a1", "url": "https://api.github.com/repos/rust-lang/rust/commits/94b1ca8448a2bcf25091bfb182ddac29b3b1f2a1", "html_url": "https://github.com/rust-lang/rust/commit/94b1ca8448a2bcf25091bfb182ddac29b3b1f2a1"}], "stats": {"total": 73, "additions": 69, "deletions": 4}, "files": [{"sha": "c7125c38aa9707cbbd512bd90ebbc9a42c4f9f1c", "filename": "src/librustc_resolve/diagnostics.rs", "status": "modified", "additions": 58, "deletions": 2, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/00653da41aae595604aef54be4ca78d8c6113c83/src%2Flibrustc_resolve%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00653da41aae595604aef54be4ca78d8c6113c83/src%2Flibrustc_resolve%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fdiagnostics.rs?ref=00653da41aae595604aef54be4ca78d8c6113c83", "patch": "@@ -197,6 +197,64 @@ See the Types section of the reference for more information about the primitive\n types:\n \n http://doc.rust-lang.org/reference.html#types\n+\"##,\n+\n+E0364: r##\"\n+Private items cannot be publicly re-exported.  This error indicates that\n+you attempted to `pub use` a type or value that was not itself public.\n+\n+Here is an example that demonstrates the error:\n+\n+```\n+mod foo {\n+    const X: u32 = 1;\n+}\n+pub use foo::X;\n+```\n+\n+The solution to this problem is to ensure that the items that you are\n+re-exporting are themselves marked with `pub`:\n+\n+```\n+mod foo {\n+    pub const X: u32 = 1;\n+}\n+pub use foo::X;\n+```\n+\n+See the 'Use Declarations' section of the reference for more information\n+on this topic:\n+\n+http://doc.rust-lang.org/reference.html#use-declarations\n+\"##,\n+\n+E0365: r##\"\n+Private modules cannot be publicly re-exported.  This error indicates\n+that you attempted to `pub use` a module that was not itself public.\n+\n+Here is an example that demonstrates the error:\n+\n+```\n+mod foo {\n+    pub const X: u32 = 1;\n+}\n+pub use foo as foo2;\n+\n+```\n+The solution to this problem is to ensure that the module that you are\n+re-exporting is itself marked with `pub`:\n+\n+```\n+pub mod foo {\n+    pub const X: u32 = 1;\n+}\n+pub use foo as foo2;\n+```\n+\n+See the 'Use Declarations' section of the reference for more information\n+on this topic:\n+\n+http://doc.rust-lang.org/reference.html#use-declarations\n \"##\n \n }\n@@ -208,8 +266,6 @@ register_diagnostics! {\n     E0254, // import conflicts with imported crate in this module\n     E0257,\n     E0258,\n-    E0364, // item is private\n-    E0365, // item is private\n     E0401, // can't use type parameters from outer function\n     E0402, // cannot use an outer type parameter in this context\n     E0403, // the name `{}` is already used"}, {"sha": "c876d28f0de40f93bad92037e15ec783700a42b2", "filename": "src/librustc_resolve/resolve_imports.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/00653da41aae595604aef54be4ca78d8c6113c83/src%2Flibrustc_resolve%2Fresolve_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00653da41aae595604aef54be4ca78d8c6113c83/src%2Flibrustc_resolve%2Fresolve_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fresolve_imports.rs?ref=00653da41aae595604aef54be4ca78d8c6113c83", "patch": "@@ -434,8 +434,13 @@ impl<'a, 'b:'a, 'tcx:'b> ImportResolver<'a, 'b, 'tcx> {\n                     value_result = BoundResult(target_module.clone(),\n                                                (*child_name_bindings).clone());\n                     if directive.is_public && !child_name_bindings.is_public(ValueNS) {\n-                        let msg = format!(\"`{}` is private\", source);\n+                        let msg = format!(\"`{}` is private, and cannot be reexported\",\n+                                          token::get_name(source));\n+                        let note_msg =\n+                            format!(\"Consider marking `{}` as `pub` in the imported module\",\n+                                    token::get_name(source));\n                         span_err!(self.resolver.session, directive.span, E0364, \"{}\", &msg);\n+                        self.resolver.session.span_note(directive.span, &note_msg);\n                         pub_err = true;\n                     }\n                 }\n@@ -444,8 +449,12 @@ impl<'a, 'b:'a, 'tcx:'b> ImportResolver<'a, 'b, 'tcx> {\n                     type_result = BoundResult(target_module.clone(),\n                                               (*child_name_bindings).clone());\n                     if !pub_err && directive.is_public && !child_name_bindings.is_public(TypeNS) {\n-                        let msg = format!(\"`{}` is private\", source);\n+                        let msg = format!(\"`{}` is private, and cannot be reexported\",\n+                                          token::get_name(source));\n+                        let note_msg = format!(\"Consider declaring module {} as `pub mod`\",\n+                                               token::get_name(source));\n                         span_err!(self.resolver.session, directive.span, E0365, \"{}\", &msg);\n+                        self.resolver.session.span_note(directive.span, &note_msg);\n                     }\n                 }\n             }"}]}