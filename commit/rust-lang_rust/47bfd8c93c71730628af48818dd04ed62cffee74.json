{"sha": "47bfd8c93c71730628af48818dd04ed62cffee74", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ3YmZkOGM5M2M3MTczMDYyOGFmNDg4MThkZDA0ZWQ2MmNmZmVlNzQ=", "commit": {"author": {"name": "Florian Hahn", "email": "flo@fhahn.com", "date": "2016-01-27T09:47:33Z"}, "committer": {"name": "Florian Hahn", "email": "flo@fhahn.com", "date": "2016-01-27T09:47:33Z"}, "message": "Turn interpolated_or_expr_span into a function", "tree": {"sha": "e9bd48f6a095f82845df7897aaf01b0f5ef32694", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e9bd48f6a095f82845df7897aaf01b0f5ef32694"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/47bfd8c93c71730628af48818dd04ed62cffee74", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/47bfd8c93c71730628af48818dd04ed62cffee74", "html_url": "https://github.com/rust-lang/rust/commit/47bfd8c93c71730628af48818dd04ed62cffee74", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/47bfd8c93c71730628af48818dd04ed62cffee74/comments", "author": {"login": "fhahn", "id": 450489, "node_id": "MDQ6VXNlcjQ1MDQ4OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/450489?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fhahn", "html_url": "https://github.com/fhahn", "followers_url": "https://api.github.com/users/fhahn/followers", "following_url": "https://api.github.com/users/fhahn/following{/other_user}", "gists_url": "https://api.github.com/users/fhahn/gists{/gist_id}", "starred_url": "https://api.github.com/users/fhahn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fhahn/subscriptions", "organizations_url": "https://api.github.com/users/fhahn/orgs", "repos_url": "https://api.github.com/users/fhahn/repos", "events_url": "https://api.github.com/users/fhahn/events{/privacy}", "received_events_url": "https://api.github.com/users/fhahn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fhahn", "id": 450489, "node_id": "MDQ6VXNlcjQ1MDQ4OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/450489?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fhahn", "html_url": "https://github.com/fhahn", "followers_url": "https://api.github.com/users/fhahn/followers", "following_url": "https://api.github.com/users/fhahn/following{/other_user}", "gists_url": "https://api.github.com/users/fhahn/gists{/gist_id}", "starred_url": "https://api.github.com/users/fhahn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fhahn/subscriptions", "organizations_url": "https://api.github.com/users/fhahn/orgs", "repos_url": "https://api.github.com/users/fhahn/repos", "events_url": "https://api.github.com/users/fhahn/events{/privacy}", "received_events_url": "https://api.github.com/users/fhahn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9d8c64b9966a2e6fe6b022491eb3fb7bb81ec292", "url": "https://api.github.com/repos/rust-lang/rust/commits/9d8c64b9966a2e6fe6b022491eb3fb7bb81ec292", "html_url": "https://github.com/rust-lang/rust/commit/9d8c64b9966a2e6fe6b022491eb3fb7bb81ec292"}], "stats": {"total": 52, "additions": 24, "deletions": 28}, "files": [{"sha": "24a71e019f03223ed16b580130ac077d740e4576", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 24, "deletions": 28, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/47bfd8c93c71730628af48818dd04ed62cffee74/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47bfd8c93c71730628af48818dd04ed62cffee74/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=47bfd8c93c71730628af48818dd04ed62cffee74", "patch": "@@ -233,23 +233,6 @@ macro_rules! maybe_whole {\n     )\n }\n \n-/// Uses $parse_expr to parse an expression and returns the span of the interpolated\n-/// token or the span of the parsed expression, if it was not interpolated\n-macro_rules! interpolated_or_expr_span {\n-    ($p:expr, $parse_expr:expr) => {\n-        {\n-            let is_interpolated = $p.token.is_interpolated();\n-            $parse_expr.map(|e| {\n-                if is_interpolated {\n-                    ($p.last_span, e)\n-                } else {\n-                    (e.span, e)\n-                }\n-            })\n-        }\n-    }\n-}\n-\n fn maybe_append(mut lhs: Vec<Attribute>, rhs: Option<Vec<Attribute>>)\n                 -> Vec<Attribute> {\n     if let Some(ref attrs) = rhs {\n@@ -558,6 +541,18 @@ impl<'a> Parser<'a> {\n         self.commit_stmt(&[edible], &[])\n     }\n \n+    /// returns the span of expr, if it was not interpolated or the span of the interpolated token\n+    fn interpolated_or_expr_span(&self, expr: PResult<'a, P<Expr>>) -> PResult<'a, (Span, P<Expr>)> {\n+        let is_interpolated = self.token.is_interpolated();\n+        expr.map(|e| {\n+            if is_interpolated {\n+                (self.last_span, e)\n+            } else {\n+                (e.span, e)\n+            }\n+        })\n+    }\n+\n     pub fn parse_ident(&mut self) -> PResult<'a, ast::Ident> {\n         self.check_strict_keywords();\n         self.check_reserved_keywords();\n@@ -2339,7 +2334,8 @@ impl<'a> Parser<'a> {\n                                   -> PResult<'a, P<Expr>> {\n         let attrs = try!(self.parse_or_use_outer_attributes(already_parsed_attrs));\n \n-        let (span, b) = try!(interpolated_or_expr_span!(self, self.parse_bottom_expr()));\n+        let b = self.parse_bottom_expr();\n+        let (span, b) = try!(self.interpolated_or_expr_span(b));\n         self.parse_dot_or_call_expr_with(b, span.lo, attrs)\n     }\n \n@@ -2725,30 +2721,30 @@ impl<'a> Parser<'a> {\n         let ex = match self.token {\n             token::Not => {\n                 self.bump();\n-                let (span, e) = try!(interpolated_or_expr_span!(self,\n-                                                           self.parse_prefix_expr(None)));\n+                let e = self.parse_prefix_expr(None);\n+                let (span, e) = try!(self.interpolated_or_expr_span(e));\n                 hi = span.hi;\n                 self.mk_unary(UnNot, e)\n             }\n             token::BinOp(token::Minus) => {\n                 self.bump();\n-                let (span, e) = try!(interpolated_or_expr_span!(self,\n-                                                           self.parse_prefix_expr(None)));\n+                let e = self.parse_prefix_expr(None);\n+                let (span, e) = try!(self.interpolated_or_expr_span(e));\n                 hi = span.hi;\n                 self.mk_unary(UnNeg, e)\n             }\n             token::BinOp(token::Star) => {\n                 self.bump();\n-                let (span, e) = try!(interpolated_or_expr_span!(self,\n-                                                           self.parse_prefix_expr(None)));\n+                let e = self.parse_prefix_expr(None);\n+                let (span, e) = try!(self.interpolated_or_expr_span(e));\n                 hi = span.hi;\n                 self.mk_unary(UnDeref, e)\n             }\n             token::BinOp(token::And) | token::AndAnd => {\n                 try!(self.expect_and());\n                 let m = try!(self.parse_mutability());\n-                let (span, e) = try!(interpolated_or_expr_span!(self,\n-                                                           self.parse_prefix_expr(None)));\n+                let e = self.parse_prefix_expr(None);\n+                let (span, e) = try!(self.interpolated_or_expr_span(e));\n                 hi = span.hi;\n                 ExprAddrOf(m, e)\n             }\n@@ -2767,8 +2763,8 @@ impl<'a> Parser<'a> {\n             }\n             token::Ident(..) if self.token.is_keyword(keywords::Box) => {\n                 self.bump();\n-                let (span, e) = try!(interpolated_or_expr_span!(self,\n-                                                           self.parse_prefix_expr(None)));\n+                let e = self.parse_prefix_expr(None);\n+                let (span, e) = try!(self.interpolated_or_expr_span(e));\n                 hi = span.hi;\n                 ExprBox(e)\n             }"}]}