{"sha": "3888487ca8af25047351542dbf37b90e0029e230", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM4ODg0ODdjYThhZjI1MDQ3MzUxNTQyZGJmMzdiOTBlMDAyOWUyMzA=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-11-20T13:25:00Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-11-20T13:40:25Z"}, "message": "Remove duplicate tests", "tree": {"sha": "5f3bda13836eea505b876628130330439a5676b8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5f3bda13836eea505b876628130330439a5676b8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3888487ca8af25047351542dbf37b90e0029e230", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3888487ca8af25047351542dbf37b90e0029e230", "html_url": "https://github.com/rust-lang/rust/commit/3888487ca8af25047351542dbf37b90e0029e230", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3888487ca8af25047351542dbf37b90e0029e230/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3d56e3d85516fe9061aea84571ac88c3322a687c", "url": "https://api.github.com/repos/rust-lang/rust/commits/3d56e3d85516fe9061aea84571ac88c3322a687c", "html_url": "https://github.com/rust-lang/rust/commit/3d56e3d85516fe9061aea84571ac88c3322a687c"}], "stats": {"total": 132, "additions": 0, "deletions": 132}, "files": [{"sha": "d58496049e21a9125d479f5ff72e73df9da18f1d", "filename": "crates/ra_ide_api/src/references/rename.rs", "status": "modified", "additions": 0, "deletions": 132, "changes": 132, "blob_url": "https://github.com/rust-lang/rust/blob/3888487ca8af25047351542dbf37b90e0029e230/crates%2Fra_ide_api%2Fsrc%2Freferences%2Frename.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3888487ca8af25047351542dbf37b90e0029e230/crates%2Fra_ide_api%2Fsrc%2Freferences%2Frename.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Freferences%2Frename.rs?ref=3888487ca8af25047351542dbf37b90e0029e230", "patch": "@@ -121,140 +121,8 @@ mod tests {\n \n     use crate::{\n         mock_analysis::analysis_and_position, mock_analysis::single_file_with_position, FileId,\n-        ReferenceSearchResult,\n     };\n \n-    #[test]\n-    fn test_find_all_refs_for_local() {\n-        let code = r#\"\n-    fn main() {\n-        let mut i = 1;\n-        let j = 1;\n-        i = i<|> + j;\n-\n-        {\n-            i = 0;\n-        }\n-\n-        i = 5;\n-    }\"#;\n-\n-        let refs = get_all_refs(code);\n-        assert_eq!(refs.len(), 5);\n-    }\n-\n-    #[test]\n-    fn test_find_all_refs_for_param_inside() {\n-        let code = r#\"\n-    fn foo(i : u32) -> u32 {\n-        i<|>\n-    }\"#;\n-\n-        let refs = get_all_refs(code);\n-        assert_eq!(refs.len(), 2);\n-    }\n-\n-    #[test]\n-    fn test_find_all_refs_for_fn_param() {\n-        let code = r#\"\n-    fn foo(i<|> : u32) -> u32 {\n-        i\n-    }\"#;\n-\n-        let refs = get_all_refs(code);\n-        assert_eq!(refs.len(), 2);\n-    }\n-\n-    #[test]\n-    fn test_find_all_refs_field_name() {\n-        let code = r#\"\n-            //- /lib.rs\n-            struct Foo {\n-                pub spam<|>: u32,\n-            }\n-\n-            fn main(s: Foo) {\n-                let f = s.spam;\n-            }\n-        \"#;\n-\n-        let refs = get_all_refs(code);\n-        assert_eq!(refs.len(), 2);\n-    }\n-\n-    #[test]\n-    fn test_find_all_refs_impl_item_name() {\n-        let code = r#\"\n-            //- /lib.rs\n-            struct Foo;\n-            impl Foo {\n-                fn f<|>(&self) {  }\n-            }\n-        \"#;\n-\n-        let refs = get_all_refs(code);\n-        assert_eq!(refs.len(), 1);\n-    }\n-\n-    #[test]\n-    fn test_find_all_refs_enum_var_name() {\n-        let code = r#\"\n-            //- /lib.rs\n-            enum Foo {\n-                A,\n-                B<|>,\n-                C,\n-            }\n-        \"#;\n-\n-        let refs = get_all_refs(code);\n-        assert_eq!(refs.len(), 1);\n-    }\n-\n-    #[test]\n-    fn test_find_all_refs_modules() {\n-        let code = r#\"\n-            //- /lib.rs\n-            pub mod foo;\n-            pub mod bar;\n-\n-            fn f() {\n-                let i = foo::Foo { n: 5 };\n-            }\n-\n-            //- /foo.rs\n-            use crate::bar;\n-\n-            pub struct Foo {\n-                pub n: u32,\n-            }\n-\n-            fn f() {\n-                let i = bar::Bar { n: 5 };\n-            }\n-\n-            //- /bar.rs\n-            use crate::foo;\n-\n-            pub struct Bar {\n-                pub n: u32,\n-            }\n-\n-            fn f() {\n-                let i = foo::Foo<|> { n: 5 };\n-            }\n-        \"#;\n-\n-        let (analysis, pos) = analysis_and_position(code);\n-        let refs = analysis.find_all_refs(pos, None).unwrap().unwrap();\n-        assert_eq!(refs.len(), 3);\n-    }\n-\n-    fn get_all_refs(text: &str) -> ReferenceSearchResult {\n-        let (analysis, position) = single_file_with_position(text);\n-        analysis.find_all_refs(position, None).unwrap().unwrap()\n-    }\n-\n     #[test]\n     fn test_rename_for_local() {\n         test_rename("}]}