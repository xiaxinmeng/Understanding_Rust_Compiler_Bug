{"sha": "34a1e3dc9a1649b5552d3221c558e6791b709336", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM0YTFlM2RjOWExNjQ5YjU1NTJkMzIyMWM1NThlNjc5MWI3MDkzMzY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-10-19T04:21:22Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-10-19T04:21:22Z"}, "message": "auto merge of #9938 : alexcrichton/rust/fmtdox, r=huonw\n\nCloses #9865\r\nCloses #9808", "tree": {"sha": "9163de8deddd05870fbaa41593ccd35470bb2225", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9163de8deddd05870fbaa41593ccd35470bb2225"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/34a1e3dc9a1649b5552d3221c558e6791b709336", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/34a1e3dc9a1649b5552d3221c558e6791b709336", "html_url": "https://github.com/rust-lang/rust/commit/34a1e3dc9a1649b5552d3221c558e6791b709336", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/34a1e3dc9a1649b5552d3221c558e6791b709336/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3a7337ff17fda6480f55a0613c68b75c14b475ca", "url": "https://api.github.com/repos/rust-lang/rust/commits/3a7337ff17fda6480f55a0613c68b75c14b475ca", "html_url": "https://github.com/rust-lang/rust/commit/3a7337ff17fda6480f55a0613c68b75c14b475ca"}, {"sha": "7a8324d3e84c53c7d480de1ed9b84e616f0e7c4d", "url": "https://api.github.com/repos/rust-lang/rust/commits/7a8324d3e84c53c7d480de1ed9b84e616f0e7c4d", "html_url": "https://github.com/rust-lang/rust/commit/7a8324d3e84c53c7d480de1ed9b84e616f0e7c4d"}], "stats": {"total": 51, "additions": 48, "deletions": 3}, "files": [{"sha": "20fc44169d03d10c3bcaf44822a07b1c2b96c8d3", "filename": "src/libstd/fmt/mod.rs", "status": "modified", "additions": 48, "deletions": 3, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/34a1e3dc9a1649b5552d3221c558e6791b709336/src%2Flibstd%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34a1e3dc9a1649b5552d3221c558e6791b709336/src%2Flibstd%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffmt%2Fmod.rs?ref=34a1e3dc9a1649b5552d3221c558e6791b709336", "patch": "@@ -147,12 +147,14 @@ The current mapping of types to traits is:\n * `p` => Pointer\n * `t` => Binary\n * `f` => Float\n+* `` (nothing) => Default\n \n What this means is that any type of argument which implements the\n `std::fmt::Binary` trait can then be formatted with `{:t}`. Implementations are\n provided for these traits for a number of primitive types by the standard\n-library as well. Again, the default formatting type (if no other is specified)\n-is `?` which is defined for all types by default.\n+library as well. If no format is specified (as in `{}` or `{:6}`), then the\n+format trait used is the `Default` trait. This is one of the more commonly\n+implemented traits when formatting a custom type.\n \n When implementing a format trait for your own time, you will have to implement a\n method of the signature:\n@@ -166,7 +168,50 @@ emit output into the `f.buf` stream. It is up to each format trait\n implementation to correctly adhere to the requested formatting parameters. The\n values of these parameters will be listed in the fields of the `Formatter`\n struct. In order to help with this, the `Formatter` struct also provides some\n-helper methods.\n+helper methods. An example of implementing the formatting traits would look\n+like:\n+\n+```rust\n+use std::fmt;\n+use std::f64;\n+\n+struct Vector2D {\n+    x: int,\n+    y: int,\n+}\n+\n+impl fmt::Default for Vector2D {\n+    fn fmt(obj: &Vector2D, f: &mut fmt::Formatter) {\n+        // The `f.buf` value is of the type `&mut io::Writer`, which is what th\n+        // write! macro is expecting. Note that this formatting ignores the\n+        // various flags provided to format strings.\n+        write!(f.buf, \"({}, {})\", obj.x, obj.y)\n+    }\n+}\n+\n+// Different traits allow different forms of output of a type. The meaning of\n+// this format is to print the magnitude of a vector.\n+impl fmt::Binary for Vector2D {\n+    fn fmt(obj: &Vector2D, f: &mut fmt::Formatter) {\n+        let magnitude = (obj.x * obj.x + obj.y * obj.y) as f64;\n+        let magnitude = magnitude.sqrt();\n+\n+        // Respect the formatting flags by using the helper method\n+        // `pad_integral` on the Formatter object. See the method documentation\n+        // for details, and the function `pad` can be used to pad strings.\n+        let decimals = f.precision.unwrap_or(3);\n+        let string = f64::to_str_exact(magnitude, decimals);\n+        f.pad_integral(string.as_bytes(), \"\", true);\n+    }\n+}\n+\n+fn main() {\n+    let myvector = Vector2D { x: 3, y: 4 };\n+\n+    println!(\"{}\", myvector);       // => \"(3, 4)\"\n+    println!(\"{:10.3t}\", myvector); // => \"     5.000\"\n+}\n+```\n \n ### Related macros\n "}]}