{"sha": "5e77e784f006e36c06252d9beccbd7893eddac73", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVlNzdlNzg0ZjAwNmUzNmMwNjI1MmQ5YmVjY2JkNzg5M2VkZGFjNzM=", "commit": {"author": {"name": "Roy Frostig", "email": "rfrostig@mozilla.com", "date": "2010-08-27T20:27:28Z"}, "committer": {"name": "Roy Frostig", "email": "rfrostig@mozilla.com", "date": "2010-08-27T20:29:53Z"}, "message": "Have alt-pattern drop the slots it initializes when binding slot patterns.  Add a testcase for this as well.", "tree": {"sha": "6bfd1a030a7d5c38cc07c88df4efa9874ffb2b70", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6bfd1a030a7d5c38cc07c88df4efa9874ffb2b70"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5e77e784f006e36c06252d9beccbd7893eddac73", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5e77e784f006e36c06252d9beccbd7893eddac73", "html_url": "https://github.com/rust-lang/rust/commit/5e77e784f006e36c06252d9beccbd7893eddac73", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5e77e784f006e36c06252d9beccbd7893eddac73/comments", "author": {"login": "froystig", "id": 123903, "node_id": "MDQ6VXNlcjEyMzkwMw==", "avatar_url": "https://avatars.githubusercontent.com/u/123903?v=4", "gravatar_id": "", "url": "https://api.github.com/users/froystig", "html_url": "https://github.com/froystig", "followers_url": "https://api.github.com/users/froystig/followers", "following_url": "https://api.github.com/users/froystig/following{/other_user}", "gists_url": "https://api.github.com/users/froystig/gists{/gist_id}", "starred_url": "https://api.github.com/users/froystig/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/froystig/subscriptions", "organizations_url": "https://api.github.com/users/froystig/orgs", "repos_url": "https://api.github.com/users/froystig/repos", "events_url": "https://api.github.com/users/froystig/events{/privacy}", "received_events_url": "https://api.github.com/users/froystig/received_events", "type": "User", "site_admin": false}, "committer": {"login": "froystig", "id": 123903, "node_id": "MDQ6VXNlcjEyMzkwMw==", "avatar_url": "https://avatars.githubusercontent.com/u/123903?v=4", "gravatar_id": "", "url": "https://api.github.com/users/froystig", "html_url": "https://github.com/froystig", "followers_url": "https://api.github.com/users/froystig/followers", "following_url": "https://api.github.com/users/froystig/following{/other_user}", "gists_url": "https://api.github.com/users/froystig/gists{/gist_id}", "starred_url": "https://api.github.com/users/froystig/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/froystig/subscriptions", "organizations_url": "https://api.github.com/users/froystig/orgs", "repos_url": "https://api.github.com/users/froystig/repos", "events_url": "https://api.github.com/users/froystig/events{/privacy}", "received_events_url": "https://api.github.com/users/froystig/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1428b59a19610d838d7849c7ac518c40281fddd1", "url": "https://api.github.com/repos/rust-lang/rust/commits/1428b59a19610d838d7849c7ac518c40281fddd1", "html_url": "https://github.com/rust-lang/rust/commit/1428b59a19610d838d7849c7ac518c40281fddd1"}], "stats": {"total": 65, "additions": 55, "deletions": 10}, "files": [{"sha": "62fe0beec85fe2d8d3bbce06445870d3aa7703cd", "filename": "src/Makefile", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5e77e784f006e36c06252d9beccbd7893eddac73/src%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/5e77e784f006e36c06252d9beccbd7893eddac73/src%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FMakefile?ref=5e77e784f006e36c06252d9beccbd7893eddac73", "patch": "@@ -425,6 +425,7 @@ TEST_XFAILS_LLVM := $(TASK_XFAILS) \\\n                     $(addprefix test/run-pass/, \\\n                       arith-1.rs \\\n                       acyclic-unwind.rs \\\n+                      alt-pattern-drop.rs \\\n                       alt-pattern-simple.rs \\\n                       alt-tag.rs \\\n                       append-units.rs \\"}, {"sha": "edb8629437e8c474d395a66a172bd73e99067ab0", "filename": "src/boot/me/trans.ml", "status": "modified", "additions": 35, "deletions": 10, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/5e77e784f006e36c06252d9beccbd7893eddac73/src%2Fboot%2Fme%2Ftrans.ml", "raw_url": "https://github.com/rust-lang/rust/raw/5e77e784f006e36c06252d9beccbd7893eddac73/src%2Fboot%2Fme%2Ftrans.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fme%2Ftrans.ml?ref=5e77e784f006e36c06252d9beccbd7893eddac73", "patch": "@@ -4138,12 +4138,24 @@ let trans_visitor\n \n     let trans_arm arm : quad_idx =\n       let (pat, block) = arm.node in\n-        (* Translates the pattern and returns the addresses of the branch\n-         * instructions, which are taken if the match fails. *)\n-      let rec trans_pat pat src_cell src_ty =\n+\n+      (* Translates the pattern and returns the following pair.\n+       *\n+       *   fst: The addresses of the branch instructions that are taken if\n+       *        the match fails.\n+       *   snd: The (cell, slot) pairs of any slots bound and initialized\n+       *        in PAT_slot pattern leaves.\n+       *)\n+      let rec trans_pat\n+          (pat:Ast.pat)\n+          (src_cell:Il.cell)\n+          (src_ty:Ast.ty)\n+          : (quad_idx list) * ((Il.cell * Ast.slot) list) =\n+\n         match pat with\n             Ast.PAT_lit lit ->\n-              trans_compare_simple Il.JNE (trans_lit lit) (Il.Cell src_cell)\n+              (trans_compare_simple Il.JNE (trans_lit lit) (Il.Cell src_cell),\n+               [])\n \n           | Ast.PAT_tag (lval, pats) ->\n               let tag_name = tag_ctor_name_to_tag_name (lval_to_name lval) in\n@@ -4173,16 +4185,19 @@ let trans_visitor\n \n               let tup_cell:Il.cell = get_variant_ptr union_cell tag_number in\n \n-              let trans_elem_pat i elem_pat : quad_idx list =\n+              let trans_elem_pat i elem_pat\n+                  : (quad_idx list) * ((Il.cell * Ast.slot) list) =\n                 let elem_cell =\n                   get_element_ptr_dyn_in_current_frame tup_cell i\n                 in\n                 let elem_ty = ty_tup.(i) in\n                   trans_pat elem_pat elem_cell elem_ty\n               in\n \n-              let elem_jumps = Array.mapi trans_elem_pat pats in\n-                next_jumps @ (List.concat (Array.to_list elem_jumps))\n+              let (elem_jumps, bindings) =\n+                List.split (Array.to_list (Array.mapi trans_elem_pat pats))\n+              in\n+                (next_jumps @ (List.concat elem_jumps), List.concat bindings)\n \n           | Ast.PAT_slot (dst, _) ->\n               let dst_slot = get_slot cx dst.id in\n@@ -4191,14 +4206,24 @@ let trans_visitor\n                   (get_ty_params_of_current_frame())\n                   CLONE_none dst_cell dst_slot\n                   src_cell src_ty;\n-                []                (* irrefutable *)\n+                ([], [(dst_cell, dst_slot)])   (* irrefutable *)\n \n-          | Ast.PAT_wild -> []    (* irrefutable *)\n+          | Ast.PAT_wild -> ([], [])           (* irrefutable *)\n       in\n \n       let (lval_cell, lval_ty) = trans_lval at.Ast.alt_tag_lval in\n-      let next_jumps = trans_pat pat lval_cell lval_ty in\n+      let (next_jumps, bindings) = trans_pat pat lval_cell lval_ty in\n         trans_block block;\n+\n+        (* Drop any slots we initialized in the leaf slot bindings of\n+         * this arm's pattern.\n+         *\n+         * FIXME: Is `None` really correct to pass as the curr_iso?\n+         *)\n+        List.iter\n+          (fun (cell, slot) -> drop_slot_in_current_frame cell slot None)\n+          bindings;\n+\n         let last_jump = mark() in\n           emit (Il.jmp Il.JMP Il.CodeNone);\n           List.iter patch next_jumps;"}, {"sha": "d1f1440f0797f4692881121d2f005a47c8194af3", "filename": "src/test/run-pass/alt-pattern-drop.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/5e77e784f006e36c06252d9beccbd7893eddac73/src%2Ftest%2Frun-pass%2Falt-pattern-drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e77e784f006e36c06252d9beccbd7893eddac73/src%2Ftest%2Frun-pass%2Falt-pattern-drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Falt-pattern-drop.rs?ref=5e77e784f006e36c06252d9beccbd7893eddac73", "patch": "@@ -0,0 +1,19 @@\n+// -*- rust -*-\n+\n+use std;\n+import std._str;\n+\n+type t = tag(make_t(str), clam());\n+\n+fn main() {\n+  let str s = \"hi\";     // ref up\n+  let t x = make_t(s);  // ref up\n+\n+  alt (x) {\n+    case (make_t(y)) { log y; }  // ref up and ref down\n+    case (_) { log \"?\"; }\n+  }\n+\n+  log _str.refcount(s);\n+  check (_str.refcount(s) == 2u);\n+}"}]}