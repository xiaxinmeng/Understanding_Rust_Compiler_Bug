{"sha": "90a6954327bb4f018eab155f43299d4bf67abe41", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkwYTY5NTQzMjdiYjRmMDE4ZWFiMTU1ZjQzMjk5ZDRiZjY3YWJlNDE=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2018-08-04T01:23:21Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2018-08-11T20:08:24Z"}, "message": "Emit error for pattern arguments in trait methods\n\nThe error and check for this already existed, but the parser didn't try to parse trait method arguments as patterns, so the error was never emitted. This surfaces the error, so we get better errors than simple parse errors.", "tree": {"sha": "fcea45cfe932db552ea2f5db5c553d15eabd0b5f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fcea45cfe932db552ea2f5db5c553d15eabd0b5f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/90a6954327bb4f018eab155f43299d4bf67abe41", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/90a6954327bb4f018eab155f43299d4bf67abe41", "html_url": "https://github.com/rust-lang/rust/commit/90a6954327bb4f018eab155f43299d4bf67abe41", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/90a6954327bb4f018eab155f43299d4bf67abe41/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a77dfcc79fe3e7e1a10ae4dccfd4b2e5e0e49195", "url": "https://api.github.com/repos/rust-lang/rust/commits/a77dfcc79fe3e7e1a10ae4dccfd4b2e5e0e49195", "html_url": "https://github.com/rust-lang/rust/commit/a77dfcc79fe3e7e1a10ae4dccfd4b2e5e0e49195"}], "stats": {"total": 92, "additions": 71, "deletions": 21}, "files": [{"sha": "b78f2ca676d2fdb1d9180069506e589e27c041d5", "filename": "src/librustc_passes/diagnostics.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/90a6954327bb4f018eab155f43299d4bf67abe41/src%2Flibrustc_passes%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90a6954327bb4f018eab155f43299d4bf67abe41/src%2Flibrustc_passes%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fdiagnostics.rs?ref=90a6954327bb4f018eab155f43299d4bf67abe41", "patch": "@@ -261,6 +261,19 @@ let result = loop { // ok!\n ```\n \"##,\n \n+E0642: r##\"\n+Trait methods currently cannot take patterns as arguments.\n+\n+Example of erroneous code:\n+\n+```compile_fail,E0642\n+trait Foo {\n+    fn foo((x, y): (i32, i32)); // error: patterns aren't allowed\n+                                // in methods without bodies\n+}\n+```\n+\"##,\n+\n E0695: r##\"\n A `break` statement without a label appeared inside a labeled block.\n \n@@ -306,7 +319,6 @@ register_diagnostics! {\n     E0561, // patterns aren't allowed in function pointer types\n     E0567, // auto traits can not have generic parameters\n     E0568, // auto traits can not have super traits\n-    E0642, // patterns aren't allowed in methods without bodies\n     E0666, // nested `impl Trait` is illegal\n     E0667, // `impl Trait` in projections\n     E0696, // `continue` pointing to a labeled block"}, {"sha": "76035a73d1a15a57457eb3323585983c9bd5d30a", "filename": "src/libsyntax/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/90a6954327bb4f018eab155f43299d4bf67abe41/src%2Flibsyntax%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90a6954327bb4f018eab155f43299d4bf67abe41/src%2Flibsyntax%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Flib.rs?ref=90a6954327bb4f018eab155f43299d4bf67abe41", "patch": "@@ -26,6 +26,7 @@\n #![feature(slice_sort_by_cached_key)]\n #![feature(str_escape)]\n #![feature(unicode_internals)]\n+#![feature(catch_expr)]\n \n #![recursion_limit=\"256\"]\n "}, {"sha": "5a2fd5f0145fc0ea21ad23899b2922ab9b3aca61", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 33, "deletions": 20, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/90a6954327bb4f018eab155f43299d4bf67abe41/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90a6954327bb4f018eab155f43299d4bf67abe41/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=90a6954327bb4f018eab155f43299d4bf67abe41", "patch": "@@ -1371,7 +1371,7 @@ impl<'a> Parser<'a> {\n             let ident = self.parse_ident()?;\n             let mut generics = self.parse_generics()?;\n \n-            let d = self.parse_fn_decl_with_self(|p: &mut Parser<'a>|{\n+            let d = self.parse_fn_decl_with_self(|p: &mut Parser<'a>| {\n                 // This is somewhat dubious; We don't want to allow\n                 // argument names to be left off if there is a\n                 // definition...\n@@ -1744,30 +1744,43 @@ impl<'a> Parser<'a> {\n     fn parse_arg_general(&mut self, require_name: bool) -> PResult<'a, Arg> {\n         maybe_whole!(self, NtArg, |x| x);\n \n-        let (pat, ty) = if require_name || self.is_named_argument() {\n-            debug!(\"parse_arg_general parse_pat (require_name:{})\",\n-                   require_name);\n-            let pat = self.parse_pat()?;\n+        let parser_snapshot_before_pat = self.clone();\n \n+        // We're going to try parsing the argument as a pattern (even if it's not\n+        // allowed, such as for trait methods without bodies). This way we can provide\n+        // better errors to the user.\n+        let pat_arg: PResult<'a, (P<Pat>, P<Ty>)> = do catch {\n+            let pat = self.parse_pat()?;\n             self.expect(&token::Colon)?;\n             (pat, self.parse_ty()?)\n-        } else {\n-            debug!(\"parse_arg_general ident_to_pat\");\n-            let ident = Ident::new(keywords::Invalid.name(), self.prev_span);\n-            let ty = self.parse_ty()?;\n-            let pat = P(Pat {\n-                id: ast::DUMMY_NODE_ID,\n-                node: PatKind::Ident(BindingMode::ByValue(Mutability::Immutable), ident, None),\n-                span: ty.span,\n-            });\n-            (pat, ty)\n         };\n \n-        Ok(Arg {\n-            ty,\n-            pat,\n-            id: ast::DUMMY_NODE_ID,\n-        })\n+        let is_named_argument = self.is_named_argument();\n+        match pat_arg {\n+            Ok((pat, ty)) => {\n+                Ok(Arg { ty, pat, id: ast::DUMMY_NODE_ID })\n+            }\n+            Err(mut err) => {\n+                if require_name || is_named_argument {\n+                    Err(err)\n+                } else {\n+                    err.cancel();\n+                    // Recover from attempting to parse the argument as a pattern. This means\n+                    // the type is alone, with no name, e.g. `fn foo(u32)`.\n+                    mem::replace(self, parser_snapshot_before_pat);\n+                    debug!(\"parse_arg_general ident_to_pat\");\n+                    let ident = Ident::new(keywords::Invalid.name(), self.prev_span);\n+                    let ty = self.parse_ty()?;\n+                    let pat = P(Pat {\n+                        id: ast::DUMMY_NODE_ID,\n+                        node: PatKind::Ident(\n+                            BindingMode::ByValue(Mutability::Immutable), ident, None),\n+                        span: ty.span,\n+                    });\n+                    Ok(Arg { ty, pat, id: ast::DUMMY_NODE_ID })\n+                }\n+            }\n+        }\n     }\n \n     /// Parse a single function argument"}, {"sha": "a09846cb3a1e87e47ce325f0aae2398c1f1f1bfd", "filename": "src/test/ui/E0642.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/90a6954327bb4f018eab155f43299d4bf67abe41/src%2Ftest%2Fui%2FE0642.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90a6954327bb4f018eab155f43299d4bf67abe41/src%2Ftest%2Fui%2FE0642.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2FE0642.rs?ref=90a6954327bb4f018eab155f43299d4bf67abe41", "patch": "@@ -0,0 +1,15 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+trait Foo {\n+    fn foo((x, y): (i32, i32)); //~ ERROR patterns aren't allowed in methods without bodies\n+}\n+\n+fn main() {}"}, {"sha": "edc430d578ba90b239d361fe510bf5d7d8ab9d30", "filename": "src/test/ui/E0642.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/90a6954327bb4f018eab155f43299d4bf67abe41/src%2Ftest%2Fui%2FE0642.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/90a6954327bb4f018eab155f43299d4bf67abe41/src%2Ftest%2Fui%2FE0642.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2FE0642.stderr?ref=90a6954327bb4f018eab155f43299d4bf67abe41", "patch": "@@ -0,0 +1,9 @@\n+error[E0642]: patterns aren't allowed in methods without bodies\n+  --> $DIR/E0642.rs:12:12\n+   |\n+LL |     fn foo((x, y): (i32, i32)); //~ ERROR patterns aren't allowed in methods without bodies\n+   |            ^^^^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0642`."}]}