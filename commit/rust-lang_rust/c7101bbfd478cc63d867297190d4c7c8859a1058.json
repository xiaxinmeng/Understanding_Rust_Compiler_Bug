{"sha": "c7101bbfd478cc63d867297190d4c7c8859a1058", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM3MTAxYmJmZDQ3OGNjNjNkODY3Mjk3MTkwZDRjN2M4ODU5YTEwNTg=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-01-02T11:20:32Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-01-02T11:20:32Z"}, "message": "Some cleanup of abi.rs", "tree": {"sha": "2a9f4592e4939fcdab1e8ae6e52d78d262dd945e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2a9f4592e4939fcdab1e8ae6e52d78d262dd945e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c7101bbfd478cc63d867297190d4c7c8859a1058", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c7101bbfd478cc63d867297190d4c7c8859a1058", "html_url": "https://github.com/rust-lang/rust/commit/c7101bbfd478cc63d867297190d4c7c8859a1058", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c7101bbfd478cc63d867297190d4c7c8859a1058/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "33a9cdfe85a627b7b74b46522b42401235fa86d8", "url": "https://api.github.com/repos/rust-lang/rust/commits/33a9cdfe85a627b7b74b46522b42401235fa86d8", "html_url": "https://github.com/rust-lang/rust/commit/33a9cdfe85a627b7b74b46522b42401235fa86d8"}], "stats": {"total": 68, "additions": 35, "deletions": 33}, "files": [{"sha": "118b950085ff674c1c7142bc5e171dd2b4688934", "filename": "ripgrep", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/ripgrep?ref=c7101bbfd478cc63d867297190d4c7c8859a1058", "patch": "@@ -0,0 +1 @@\n+Subproject commit 118b950085ff674c1c7142bc5e171dd2b4688934"}, {"sha": "50daf0090574fe5a65cb9f29feb513dc6c094a99", "filename": "src/abi.rs", "status": "modified", "additions": 26, "deletions": 22, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/c7101bbfd478cc63d867297190d4c7c8859a1058/src%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7101bbfd478cc63d867297190d4c7c8859a1058/src%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fabi.rs?ref=c7101bbfd478cc63d867297190d4c7c8859a1058", "patch": "@@ -71,14 +71,10 @@ fn adjust_arg_for_abi<'a, 'tcx: 'a>(\n     }\n }\n \n-fn clif_sig_from_fn_ty<'a, 'tcx: 'a>(\n+fn clif_sig_from_fn_sig<'a, 'tcx: 'a>(\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-    fn_ty: Ty<'tcx>,\n+    sig: FnSig<'tcx>,\n ) -> Signature {\n-    let sig = ty_fn_sig(tcx, fn_ty);\n-    if sig.variadic {\n-        unimpl!(\"Variadic function are not yet supported\");\n-    }\n     let (call_conv, inputs, output): (CallConv, Vec<Ty>, Ty) = match sig.abi {\n         Abi::Rust => (CallConv::SystemV, sig.inputs().to_vec(), sig.output()),\n         Abi::C => (CallConv::SystemV, sig.inputs().to_vec(), sig.output()),\n@@ -181,22 +177,30 @@ pub fn get_function_name_and_sig<'a, 'tcx>(\n ) -> (String, Signature) {\n     assert!(!inst.substs.needs_infer() && !inst.substs.has_param_types());\n     let fn_ty = inst.ty(tcx);\n-    let sig = clif_sig_from_fn_ty(tcx, fn_ty);\n+    let fn_sig = ty_fn_sig(tcx, fn_ty);\n+    if fn_sig.variadic {\n+        unimpl!(\"Variadic functions are not yet supported\");\n+    }\n+    let sig = clif_sig_from_fn_sig(tcx, fn_sig);\n     (tcx.symbol_name(inst).as_str().to_string(), sig)\n }\n \n-impl<'a, 'tcx: 'a, B: Backend + 'a> FunctionCx<'a, 'tcx, B> {\n-    /// Instance must be monomorphized\n-    pub fn get_function_id(&mut self, inst: Instance<'tcx>) -> FuncId {\n-        let (name, sig) = get_function_name_and_sig(self.tcx, inst);\n-        self.module\n-            .declare_function(&name, Linkage::Import, &sig)\n-            .unwrap()\n-    }\n+/// Instance must be monomorphized\n+pub fn import_function<'a, 'tcx: 'a>(\n+    tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+    module: &mut Module<impl Backend>,\n+    inst: Instance<'tcx>,\n+) -> FuncId {\n+    let (name, sig) = get_function_name_and_sig(tcx, inst);\n+    module\n+        .declare_function(&name, Linkage::Import, &sig)\n+        .unwrap()\n+}\n \n+impl<'a, 'tcx: 'a, B: Backend + 'a> FunctionCx<'a, 'tcx, B> {\n     /// Instance must be monomorphized\n     pub fn get_function_ref(&mut self, inst: Instance<'tcx>) -> FuncRef {\n-        let func_id = self.get_function_id(inst);\n+        let func_id = import_function(self.tcx, self.module, inst);\n         let func_ref = self.module\n             .declare_func_in_func(func_id, &mut self.bcx.func);\n \n@@ -574,11 +578,11 @@ pub fn codegen_call_inner<'a, 'tcx: 'a>(\n     args: Vec<CValue<'tcx>>,\n     ret_place: Option<CPlace<'tcx>>,\n ) {\n-    let sig = ty_fn_sig(fx.tcx, fn_ty);\n+    let fn_sig = ty_fn_sig(fx.tcx, fn_ty);\n \n-    let ret_layout = fx.layout_of(sig.output());\n+    let ret_layout = fx.layout_of(fn_sig.output());\n \n-    let output_pass_mode = get_pass_mode(fx.tcx, sig.abi, sig.output(), true);\n+    let output_pass_mode = get_pass_mode(fx.tcx, fn_sig.abi, fn_sig.output(), true);\n     let return_ptr = match output_pass_mode {\n         PassMode::NoPass => None,\n         PassMode::ByRef => match ret_place {\n@@ -614,7 +618,7 @@ pub fn codegen_call_inner<'a, 'tcx: 'a>(\n                 None\n             };\n \n-            args.get(0).map(|arg| adjust_arg_for_abi(fx, sig, *arg))\n+            args.get(0).map(|arg| adjust_arg_for_abi(fx, fn_sig, *arg))\n         }\n         .into_iter()\n     };\n@@ -625,12 +629,12 @@ pub fn codegen_call_inner<'a, 'tcx: 'a>(\n         .chain(\n             args.into_iter()\n                 .skip(1)\n-                .map(|arg| adjust_arg_for_abi(fx, sig, arg)),\n+                .map(|arg| adjust_arg_for_abi(fx, fn_sig, arg)),\n         )\n         .collect::<Vec<_>>();\n \n-    let sig = fx.bcx.import_signature(clif_sig_from_fn_ty(fx.tcx, fn_ty));\n     let call_inst = if let Some(func_ref) = func_ref {\n+        let sig = fx.bcx.import_signature(clif_sig_from_fn_sig(fx.tcx, fn_sig));\n         fx.bcx.ins().call_indirect(sig, func_ref, &call_args)\n     } else {\n         let func_ref = fx.get_function_ref(instance.expect(\"non-indirect call on non-FnDef type\"));"}, {"sha": "56900a4fa020cd78679df568509a37176c9136f1", "filename": "src/constant.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c7101bbfd478cc63d867297190d4c7c8859a1058/src%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7101bbfd478cc63d867297190d4c7c8859a1058/src%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconstant.rs?ref=c7101bbfd478cc63d867297190d4c7c8859a1058", "patch": "@@ -254,10 +254,7 @@ fn define_all_allocs<'a, 'tcx: 'a, B: Backend + 'a>(\n \n             let data_id = match tcx.alloc_map.lock().get(reloc).unwrap() {\n                 AllocKind::Function(instance) => {\n-                    let (func_name, sig) = crate::abi::get_function_name_and_sig(tcx, instance);\n-                    let func_id = module\n-                        .declare_function(&func_name, Linkage::Import, &sig)\n-                        .unwrap();\n+                    let func_id = crate::abi::import_function(tcx, module, instance);\n                     let local_func_id = module.declare_func_in_data(func_id, &mut data_ctx);\n                     data_ctx.write_function_addr(reloc_offset as u32, local_func_id);\n                     continue;"}, {"sha": "ab0422e211b20829755a3afc46612d354b0396d7", "filename": "src/main_shim.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c7101bbfd478cc63d867297190d4c7c8859a1058/src%2Fmain_shim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7101bbfd478cc63d867297190d4c7c8859a1058/src%2Fmain_shim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmain_shim.rs?ref=c7101bbfd478cc63d867297190d4c7c8859a1058", "patch": "@@ -81,11 +81,7 @@ pub fn maybe_create_entry_wrapper<'a, 'tcx: 'a>(\n                     tcx.intern_substs(&[main_ret_ty.into()]),\n                 )\n                 .unwrap();\n-\n-                let (start_name, start_sig) = get_function_name_and_sig(tcx, start_instance);\n-                let start_func_id = m\n-                    .declare_function(&start_name, Linkage::Import, &start_sig)\n-                    .unwrap();\n+                let start_func_id = import_function(tcx, m, start_instance);\n \n                 let main_val = bcx\n                     .ins()"}, {"sha": "2944330fbe606a66563990486ca9bb37696468bf", "filename": "src/vtable.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c7101bbfd478cc63d867297190d4c7c8859a1058/src%2Fvtable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7101bbfd478cc63d867297190d4c7c8859a1058/src%2Fvtable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvtable.rs?ref=c7101bbfd478cc63d867297190d4c7c8859a1058", "patch": "@@ -73,7 +73,9 @@ fn build_vtable<'a, 'tcx: 'a>(\n     let tcx = fx.tcx;\n     let usize_size = fx.layout_of(fx.tcx.types.usize).size.bytes() as usize;\n \n-    let drop_in_place_fn = fx.get_function_id(\n+    let drop_in_place_fn = import_function(\n+        tcx,\n+        fx.module,\n         crate::rustc_mir::monomorphize::resolve_drop_in_place(tcx, ty),\n     );\n \n@@ -83,7 +85,9 @@ fn build_vtable<'a, 'tcx: 'a>(\n     let methods = tcx.vtable_methods(trait_ref);\n     let methods = methods.iter().cloned().map(|opt_mth| {\n         opt_mth.map_or(None, |(def_id, substs)| {\n-            Some(fx.get_function_id(\n+            Some(import_function(\n+                tcx,\n+                fx.module,\n                 Instance::resolve(tcx, ParamEnv::reveal_all(), def_id, substs).unwrap(),\n             ))\n         })"}]}