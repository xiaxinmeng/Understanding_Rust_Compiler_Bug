{"sha": "df72570b58824e9a2bc9ec48c36e0c708412797b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRmNzI1NzBiNTg4MjRlOWEyYmM5ZWM0OGMzNmUwYzcwODQxMjc5N2I=", "commit": {"author": {"name": "Maximilian Roos", "email": "m@maxroos.com", "date": "2018-08-28T04:33:51Z"}, "committer": {"name": "Maximilian Roos", "email": "m@maxroos.com", "date": "2018-08-28T04:33:51Z"}, "message": "set of clippy changes", "tree": {"sha": "7143968cf714a3c2cbcce4483be1657b51eaaf8a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7143968cf714a3c2cbcce4483be1657b51eaaf8a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/df72570b58824e9a2bc9ec48c36e0c708412797b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEj6KCL6bSss5r72KTMjLyi+2mb80FAluE0LAACgkQMjLyi+2m\nb80laQ//W8mNW3bOfv6MR30wLuPPIEQzjXOZ6qG9GIWs/3KB3lyROtywFL3IwjAx\nWdq+wylKqRHlotAqFECuftD0FkkkcYaQIs41JT3oNWABdctMd4oaVP6ng50twFZE\nvGJhR9RG2oDPVORVqLY7yRvw+NWmWXFQ9U37FSK+aQ/XkeLSIpEl7U3y6iVJxINS\n0NxilTLnjwNxQcxIWydSjTf6hPpqB2suWMGLIOlVLvw73umO6xx5IPAa2/yEIJPE\n1NlexnyNaYIUZijEc38GEvuhlaLmsAuD9y7wRFVXVjTvnmfEb/2JlxcxCnXIzbgG\nYBhkBNEjrWbfMHAmelZErI440vgvw9xP7+6CBIQqe0RkHqxI1JbLOiYftSY5z3UO\noAkxnsB6yHYSB5i0hxHhAg29cDZea3lDfhlui/EkbECqcVkbGUybuKR9Qrij54tp\nJURc7RRJBwwdSA/v5/A0tpwjAdJR5cPt1o9icu8GHQXNPxPJ5YPa/0Loq8ERc2/O\nM+hjBbCZJPmASk48cML8guagxnP+/saepa5XvEWtGyKSPSyG4w1HH2mAtqmp+4/0\nam87HdeLkcCSCM45is5ENpAUaGRfMjRGL/fT1fUdy8eOKP/udmPa+5QZDGN1fLjH\ncbWsjO2DJ6QjZ57HpwV9zv5bMdQYkxfASfVsjQPVjb/FPoRQ8gA=\n=E+xY\n-----END PGP SIGNATURE-----", "payload": "tree 7143968cf714a3c2cbcce4483be1657b51eaaf8a\nparent c4d845f998b507718a362416abee05eb0c135dc9\nauthor Maximilian Roos <m@maxroos.com> 1535430831 -0400\ncommitter Maximilian Roos <m@maxroos.com> 1535430831 -0400\n\nset of clippy changes\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/df72570b58824e9a2bc9ec48c36e0c708412797b", "html_url": "https://github.com/rust-lang/rust/commit/df72570b58824e9a2bc9ec48c36e0c708412797b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/df72570b58824e9a2bc9ec48c36e0c708412797b/comments", "author": {"login": "max-sixty", "id": 5635139, "node_id": "MDQ6VXNlcjU2MzUxMzk=", "avatar_url": "https://avatars.githubusercontent.com/u/5635139?v=4", "gravatar_id": "", "url": "https://api.github.com/users/max-sixty", "html_url": "https://github.com/max-sixty", "followers_url": "https://api.github.com/users/max-sixty/followers", "following_url": "https://api.github.com/users/max-sixty/following{/other_user}", "gists_url": "https://api.github.com/users/max-sixty/gists{/gist_id}", "starred_url": "https://api.github.com/users/max-sixty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/max-sixty/subscriptions", "organizations_url": "https://api.github.com/users/max-sixty/orgs", "repos_url": "https://api.github.com/users/max-sixty/repos", "events_url": "https://api.github.com/users/max-sixty/events{/privacy}", "received_events_url": "https://api.github.com/users/max-sixty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "max-sixty", "id": 5635139, "node_id": "MDQ6VXNlcjU2MzUxMzk=", "avatar_url": "https://avatars.githubusercontent.com/u/5635139?v=4", "gravatar_id": "", "url": "https://api.github.com/users/max-sixty", "html_url": "https://github.com/max-sixty", "followers_url": "https://api.github.com/users/max-sixty/followers", "following_url": "https://api.github.com/users/max-sixty/following{/other_user}", "gists_url": "https://api.github.com/users/max-sixty/gists{/gist_id}", "starred_url": "https://api.github.com/users/max-sixty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/max-sixty/subscriptions", "organizations_url": "https://api.github.com/users/max-sixty/orgs", "repos_url": "https://api.github.com/users/max-sixty/repos", "events_url": "https://api.github.com/users/max-sixty/events{/privacy}", "received_events_url": "https://api.github.com/users/max-sixty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c4d845f998b507718a362416abee05eb0c135dc9", "url": "https://api.github.com/repos/rust-lang/rust/commits/c4d845f998b507718a362416abee05eb0c135dc9", "html_url": "https://github.com/rust-lang/rust/commit/c4d845f998b507718a362416abee05eb0c135dc9"}], "stats": {"total": 40, "additions": 19, "deletions": 21}, "files": [{"sha": "e3c6201d3c4c3d53679fc220785e9517e38cb5f6", "filename": "src/comment.rs", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/df72570b58824e9a2bc9ec48c36e0c708412797b/src%2Fcomment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df72570b58824e9a2bc9ec48c36e0c708412797b/src%2Fcomment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomment.rs?ref=df72570b58824e9a2bc9ec48c36e0c708412797b", "patch": "@@ -525,7 +525,7 @@ fn rewrite_comment_inner(\n \n const RUSTFMT_CUSTOM_COMMENT_PREFIX: &str = \"//#### \";\n \n-fn hide_sharp_behind_comment<'a>(s: &'a str) -> Cow<'a, str> {\n+fn hide_sharp_behind_comment(s: &str) -> Cow<str> {\n     if s.trim_left().starts_with(\"# \") {\n         Cow::from(format!(\"{}{}\", RUSTFMT_CUSTOM_COMMENT_PREFIX, s))\n     } else {\n@@ -823,20 +823,20 @@ pub enum FullCodeCharKind {\n }\n \n impl FullCodeCharKind {\n-    pub fn is_comment(&self) -> bool {\n-        match *self {\n+    pub fn is_comment(self) -> bool {\n+        match self {\n             FullCodeCharKind::StartComment\n             | FullCodeCharKind::InComment\n             | FullCodeCharKind::EndComment => true,\n             _ => false,\n         }\n     }\n \n-    pub fn is_string(&self) -> bool {\n-        *self == FullCodeCharKind::InString\n+    pub fn is_string(self) -> bool {\n+        self == FullCodeCharKind::InString\n     }\n \n-    fn to_codecharkind(&self) -> CodeCharKind {\n+    fn to_codecharkind(self) -> CodeCharKind {\n         if self.is_comment() {\n             CodeCharKind::Comment\n         } else {\n@@ -987,9 +987,7 @@ impl<'a> Iterator for LineClasses<'a> {\n     type Item = (FullCodeCharKind, String);\n \n     fn next(&mut self) -> Option<Self::Item> {\n-        if self.base.peek().is_none() {\n-            return None;\n-        }\n+        self.base.peek()?;\n \n         let mut line = String::new();\n \n@@ -1174,7 +1172,7 @@ pub fn filter_normal_code(code: &str) -> String {\n         }\n         _ => (),\n     });\n-    if !code.ends_with(\"\\n\") && buffer.ends_with(\"\\n\") {\n+    if !code.ends_with('\\n') && buffer.ends_with('\\n') {\n         buffer.pop();\n     }\n     buffer"}, {"sha": "bf9cd8597321f65d2ff70be31d0187959243703b", "filename": "src/config/config_type.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/df72570b58824e9a2bc9ec48c36e0c708412797b/src%2Fconfig%2Fconfig_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df72570b58824e9a2bc9ec48c36e0c708412797b/src%2Fconfig%2Fconfig_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig%2Fconfig_type.rs?ref=df72570b58824e9a2bc9ec48c36e0c708412797b", "patch": "@@ -175,11 +175,11 @@ macro_rules! create_config {\n             }\n             )+\n \n-            pub fn set<'a>(&'a mut self) -> ConfigSetter<'a> {\n+            pub fn set(&mut self) -> ConfigSetter {\n                 ConfigSetter(self)\n             }\n \n-            pub fn was_set<'a>(&'a self) -> ConfigWasSet<'a> {\n+            pub fn was_set(&self) -> ConfigWasSet {\n                 ConfigWasSet(self)\n             }\n "}, {"sha": "61496e21642415c125cec3c583a51c89e3e92250", "filename": "src/config/lists.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/df72570b58824e9a2bc9ec48c36e0c708412797b/src%2Fconfig%2Flists.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df72570b58824e9a2bc9ec48c36e0c708412797b/src%2Fconfig%2Flists.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig%2Flists.rs?ref=df72570b58824e9a2bc9ec48c36e0c708412797b", "patch": "@@ -80,12 +80,12 @@ pub enum SeparatorPlace {\n impl_enum_serialize_and_deserialize!(SeparatorPlace, Front, Back);\n \n impl SeparatorPlace {\n-    pub fn is_front(&self) -> bool {\n-        *self == SeparatorPlace::Front\n+    pub fn is_front(self) -> bool {\n+        self == SeparatorPlace::Front\n     }\n \n-    pub fn is_back(&self) -> bool {\n-        *self == SeparatorPlace::Back\n+    pub fn is_back(self) -> bool {\n+        self == SeparatorPlace::Back\n     }\n \n     pub fn from_tactic("}, {"sha": "8867c6f2283236d42b1a5ba90aa84ec850744000", "filename": "src/lists.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/df72570b58824e9a2bc9ec48c36e0c708412797b/src%2Flists.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df72570b58824e9a2bc9ec48c36e0c708412797b/src%2Flists.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flists.rs?ref=df72570b58824e9a2bc9ec48c36e0c708412797b", "patch": "@@ -209,8 +209,8 @@ pub enum Separator {\n }\n \n impl Separator {\n-    pub fn len(&self) -> usize {\n-        match *self {\n+    pub fn len(self) -> usize {\n+        match self {\n             // 2 = `, `\n             Separator::Comma => 2,\n             // 3 = ` | `"}, {"sha": "931aaff17655a2a27cf39a207e7c5ac532512fd0", "filename": "src/matches.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df72570b58824e9a2bc9ec48c36e0c708412797b/src%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df72570b58824e9a2bc9ec48c36e0c708412797b/src%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmatches.rs?ref=df72570b58824e9a2bc9ec48c36e0c708412797b", "patch": "@@ -289,7 +289,7 @@ fn rewrite_match_pattern(\n         guard,\n         shape,\n         trimmed_last_line_width(&pats_str),\n-        pats_str.contains(\"\\n\"),\n+        pats_str.contains('\\n'),\n     )?;\n \n     Some(format!(\"{}{}\", pats_str, guard_str))"}, {"sha": "9a9c9831f4017baf8714a3dd9d031918f9ee6c94", "filename": "src/overflow.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df72570b58824e9a2bc9ec48c36e0c708412797b/src%2Foverflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df72570b58824e9a2bc9ec48c36e0c708412797b/src%2Foverflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Foverflow.rs?ref=df72570b58824e9a2bc9ec48c36e0c708412797b", "patch": "@@ -223,7 +223,7 @@ impl<'a, T: 'a + Rewrite + ToExpr + Spanned> Context<'a, T> {\n         // 1 = \"(\"\n         let combine_arg_with_callee = self.items.len() == 1\n             && self.items[0].to_expr().is_some()\n-            && self.ident.len() + 1 <= self.context.config.tab_spaces();\n+            && self.ident.len() < self.context.config.tab_spaces();\n         let overflow_last = combine_arg_with_callee || can_be_overflowed(self.context, self.items);\n \n         // Replace the last item with its first line to see if it fits with"}, {"sha": "3ab639a1ac34ab530d20030910b0e42a2030717e", "filename": "src/types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df72570b58824e9a2bc9ec48c36e0c708412797b/src%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df72570b58824e9a2bc9ec48c36e0c708412797b/src%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftypes.rs?ref=df72570b58824e9a2bc9ec48c36e0c708412797b", "patch": "@@ -520,7 +520,7 @@ impl Rewrite for ast::GenericBounds {\n         }\n \n         let span = mk_sp(self.get(0)?.span().lo(), self.last()?.span().hi());\n-        let has_paren = context.snippet(span).starts_with(\"(\");\n+        let has_paren = context.snippet(span).starts_with('(');\n         let bounds_shape = if has_paren {\n             shape.offset_left(1)?.sub_width(1)?\n         } else {"}]}