{"sha": "9ff95e29b3ae9e3de405680ddb6557da72cc25f7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlmZjk1ZTI5YjNhZTllM2RlNDA1NjgwZGRiNjU1N2RhNzJjYzI1Zjc=", "commit": {"author": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-10-01T19:36:06Z"}, "committer": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-10-01T19:36:41Z"}, "message": "Demode ebml, ebml2, json, par", "tree": {"sha": "3180820a3a95265c8e6de5f2d5369633fca8ca83", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3180820a3a95265c8e6de5f2d5369633fca8ca83"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9ff95e29b3ae9e3de405680ddb6557da72cc25f7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9ff95e29b3ae9e3de405680ddb6557da72cc25f7", "html_url": "https://github.com/rust-lang/rust/commit/9ff95e29b3ae9e3de405680ddb6557da72cc25f7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9ff95e29b3ae9e3de405680ddb6557da72cc25f7/comments", "author": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "committer": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "314805d3aed2f534448e06bc9e4bff6007a0ef35", "url": "https://api.github.com/repos/rust-lang/rust/commits/314805d3aed2f534448e06bc9e4bff6007a0ef35", "html_url": "https://github.com/rust-lang/rust/commit/314805d3aed2f534448e06bc9e4bff6007a0ef35"}], "stats": {"total": 40, "additions": 20, "deletions": 20}, "files": [{"sha": "b88142e95028bcf2462be943e02acc31cc1c1594", "filename": "src/libstd/ebml.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9ff95e29b3ae9e3de405680ddb6557da72cc25f7/src%2Flibstd%2Febml.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ff95e29b3ae9e3de405680ddb6557da72cc25f7/src%2Flibstd%2Febml.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Febml.rs?ref=9ff95e29b3ae9e3de405680ddb6557da72cc25f7", "patch": "@@ -292,7 +292,7 @@ impl Writer {\n         self.writer.write(b);\n     }\n \n-    fn wr_str(s: ~str) {\n+    fn wr_str(s: &str) {\n         debug!(\"Write str: %?\", s);\n         self.writer.write(str::to_bytes(s));\n     }\n@@ -418,7 +418,7 @@ fn ebml_deserializer(d: ebml::Doc) -> EbmlDeserializer {\n }\n \n priv impl EbmlDeserializer {\n-    fn _check_label(lbl: ~str) {\n+    fn _check_label(lbl: &str) {\n         if self.pos < self.parent.end {\n             let {tag: r_tag, doc: r_doc} =\n                 ebml::doc_at(self.parent.data, self.pos);\n@@ -516,7 +516,7 @@ impl EbmlDeserializer: serialization::Deserializer {\n     fn read_str() -> ~str { ebml::doc_as_str(self.next_doc(EsStr)) }\n \n     // Compound types:\n-    fn read_enum<T>(name: ~str, f: fn() -> T) -> T {\n+    fn read_enum<T>(name: &str, f: fn() -> T) -> T {\n         debug!(\"read_enum(%s)\", name);\n         self._check_label(name);\n         self.push_doc(self.next_doc(EsEnum), f)\n@@ -565,7 +565,7 @@ impl EbmlDeserializer: serialization::Deserializer {\n         f()\n     }\n \n-    fn read_rec_field<T>(f_name: ~str, f_idx: uint, f: fn() -> T) -> T {\n+    fn read_rec_field<T>(f_name: &str, f_idx: uint, f: fn() -> T) -> T {\n         debug!(\"read_rec_field(%s, idx=%u)\", f_name, f_idx);\n         self._check_label(f_name);\n         f()"}, {"sha": "1065376036825b0780f542a34698e82942872cba", "filename": "src/libstd/ebml2.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9ff95e29b3ae9e3de405680ddb6557da72cc25f7/src%2Flibstd%2Febml2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ff95e29b3ae9e3de405680ddb6557da72cc25f7/src%2Flibstd%2Febml2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Febml2.rs?ref=9ff95e29b3ae9e3de405680ddb6557da72cc25f7", "patch": "@@ -301,7 +301,7 @@ impl Serializer {\n         self.writer.write(b);\n     }\n \n-    fn wr_str(s: ~str) {\n+    fn wr_str(s: &str) {\n         debug!(\"Write str: %?\", s);\n         self.writer.write(str::to_bytes(s));\n     }\n@@ -429,7 +429,7 @@ fn Deserializer(d: Doc) -> Deserializer {\n }\n \n priv impl Deserializer {\n-    fn _check_label(lbl: ~str) {\n+    fn _check_label(lbl: &str) {\n         if self.pos < self.parent.end {\n             let TaggedDoc { tag: r_tag, doc: r_doc } =\n                 doc_at(self.parent.data, self.pos);\n@@ -528,7 +528,7 @@ impl Deserializer: serialization2::Deserializer {\n     fn read_str(&self) -> ~str { doc_as_str(self.next_doc(EsStr)) }\n \n     // Compound types:\n-    fn read_enum<T>(&self, name: ~str, f: fn() -> T) -> T {\n+    fn read_enum<T>(&self, name: &str, f: fn() -> T) -> T {\n         debug!(\"read_enum(%s)\", name);\n         self._check_label(name);\n         self.push_doc(self.next_doc(EsEnum), f)\n@@ -577,7 +577,7 @@ impl Deserializer: serialization2::Deserializer {\n         f()\n     }\n \n-    fn read_rec_field<T>(&self, f_name: ~str, f_idx: uint,\n+    fn read_rec_field<T>(&self, f_name: &str, f_idx: uint,\n                          f: fn() -> T) -> T {\n         debug!(\"read_rec_field(%s, idx=%u)\", f_name, f_idx);\n         self._check_label(f_name);"}, {"sha": "c8d9e3c246320da6cb802f31fa7d8ec3506e4619", "filename": "src/libstd/json.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9ff95e29b3ae9e3de405680ddb6557da72cc25f7/src%2Flibstd%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ff95e29b3ae9e3de405680ddb6557da72cc25f7/src%2Flibstd%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fjson.rs?ref=9ff95e29b3ae9e3de405680ddb6557da72cc25f7", "patch": "@@ -378,7 +378,7 @@ priv impl Parser {\n         while char::is_whitespace(self.ch) { self.bump(); }\n     }\n \n-    fn parse_ident(ident: ~str, +value: Json) -> Result<Json, Error> {\n+    fn parse_ident(ident: &str, +value: Json) -> Result<Json, Error> {\n         if str::all(ident, |c| c == self.next_char()) {\n             self.bump();\n             Ok(move value)\n@@ -747,7 +747,7 @@ pub impl Deserializer: serialization2::Deserializer {\n         }\n     }\n \n-    fn read_enum<T>(&self, name: ~str, f: fn() -> T) -> T {\n+    fn read_enum<T>(&self, name: &str, f: fn() -> T) -> T {\n         debug!(\"read_enum(%s)\", name);\n         if name != ~\"option\" { fail ~\"only supports the option enum\" }\n         f()\n@@ -810,7 +810,7 @@ pub impl Deserializer: serialization2::Deserializer {\n         value\n     }\n \n-    fn read_rec_field<T>(&self, f_name: ~str, f_idx: uint,\n+    fn read_rec_field<T>(&self, f_name: &str, f_idx: uint,\n                          f: fn() -> T) -> T {\n         debug!(\"read_rec_field(%s, idx=%u)\", f_name, f_idx);\n         let top = self.peek();\n@@ -819,7 +819,7 @@ pub impl Deserializer: serialization2::Deserializer {\n                 // FIXME(#3148) This hint should not be necessary.\n                 let obj: &self/~Object = obj;\n \n-                match obj.find_ref(&f_name) {\n+                match obj.find_ref(&(f_name.to_unique())) {\n                     None => fail fmt!(\"no such field: %s\", f_name),\n                     Some(json) => {\n                         self.stack.push(json);"}, {"sha": "65e41dba5d83c06f5ff1ede0a5a6dc41a15c116e", "filename": "src/libstd/par.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9ff95e29b3ae9e3de405680ddb6557da72cc25f7/src%2Flibstd%2Fpar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ff95e29b3ae9e3de405680ddb6557da72cc25f7/src%2Flibstd%2Fpar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpar.rs?ref=9ff95e29b3ae9e3de405680ddb6557da72cc25f7", "patch": "@@ -72,7 +72,7 @@ fn map_slices<A: Copy Send, B: Copy Send>(\n }\n \n /// A parallel version of map.\n-pub fn map<A: Copy Send, B: Copy Send>(xs: &[A], f: fn~((&A)) -> B) -> ~[B] {\n+pub fn map<A: Copy Send, B: Copy Send>(xs: &[A], +f: fn~((&A)) -> B) -> ~[B] {\n     vec::concat(map_slices(xs, || {\n         fn~(_base: uint, slice : &[A], copy f) -> ~[B] {\n             vec::map(slice, |x| f(x))\n@@ -82,7 +82,7 @@ pub fn map<A: Copy Send, B: Copy Send>(xs: &[A], f: fn~((&A)) -> B) -> ~[B] {\n \n /// A parallel version of mapi.\n pub fn mapi<A: Copy Send, B: Copy Send>(xs: &[A],\n-                                    f: fn~(uint, (&A)) -> B) -> ~[B] {\n+                                    +f: fn~(uint, (&A)) -> B) -> ~[B] {\n     let slices = map_slices(xs, || {\n         fn~(base: uint, slice : &[A], copy f) -> ~[B] {\n             vec::mapi(slice, |i, x| {\n@@ -119,7 +119,7 @@ pub fn mapi_factory<A: Copy Send, B: Copy Send>(\n }\n \n /// Returns true if the function holds for all elements in the vector.\n-pub fn alli<A: Copy Send>(xs: &[A], f: fn~(uint, (&A)) -> bool) -> bool {\n+pub fn alli<A: Copy Send>(xs: &[A], +f: fn~(uint, (&A)) -> bool) -> bool {\n     do vec::all(map_slices(xs, || {\n         fn~(base: uint, slice : &[A], copy f) -> bool {\n             vec::alli(slice, |i, x| {\n@@ -130,7 +130,7 @@ pub fn alli<A: Copy Send>(xs: &[A], f: fn~(uint, (&A)) -> bool) -> bool {\n }\n \n /// Returns true if the function holds for any elements in the vector.\n-pub fn any<A: Copy Send>(xs: &[A], f: fn~(&(A)) -> bool) -> bool {\n+pub fn any<A: Copy Send>(xs: &[A], +f: fn~(&(A)) -> bool) -> bool {\n     do vec::any(map_slices(xs, || {\n         fn~(_base : uint, slice: &[A], copy f) -> bool {\n             vec::any(slice, |x| f(x))"}, {"sha": "7cf7779f13df7b80cf3cf7c82a0f112487412680", "filename": "src/libstd/serialization.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9ff95e29b3ae9e3de405680ddb6557da72cc25f7/src%2Flibstd%2Fserialization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ff95e29b3ae9e3de405680ddb6557da72cc25f7/src%2Flibstd%2Fserialization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fserialization.rs?ref=9ff95e29b3ae9e3de405680ddb6557da72cc25f7", "patch": "@@ -63,15 +63,15 @@ trait Deserializer {\n     fn read_float() -> float;\n \n     // Compound types:\n-    fn read_enum<T>(name: ~str, f: fn() -> T) -> T;\n+    fn read_enum<T>(name: &str, f: fn() -> T) -> T;\n     fn read_enum_variant<T>(f: fn(uint) -> T) -> T;\n     fn read_enum_variant_arg<T>(idx: uint, f: fn() -> T) -> T;\n     fn read_vec<T>(f: fn(uint) -> T) -> T;\n     fn read_vec_elt<T>(idx: uint, f: fn() -> T) -> T;\n     fn read_box<T>(f: fn() -> T) -> T;\n     fn read_uniq<T>(f: fn() -> T) -> T;\n     fn read_rec<T>(f: fn() -> T) -> T;\n-    fn read_rec_field<T>(f_name: ~str, f_idx: uint, f: fn() -> T) -> T;\n+    fn read_rec_field<T>(f_name: &str, f_idx: uint, f: fn() -> T) -> T;\n     fn read_tup<T>(sz: uint, f: fn() -> T) -> T;\n     fn read_tup_elt<T>(idx: uint, f: fn() -> T) -> T;\n }"}, {"sha": "9cceccf42c6ff989b064c633a91f0348fca19646", "filename": "src/libstd/serialization2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9ff95e29b3ae9e3de405680ddb6557da72cc25f7/src%2Flibstd%2Fserialization2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ff95e29b3ae9e3de405680ddb6557da72cc25f7/src%2Flibstd%2Fserialization2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fserialization2.rs?ref=9ff95e29b3ae9e3de405680ddb6557da72cc25f7", "patch": "@@ -60,15 +60,15 @@ pub trait Deserializer {\n     fn read_str(&self) -> ~str;\n \n     // Compound types:\n-    fn read_enum<T>(&self, name: ~str, f: fn() -> T) -> T;\n+    fn read_enum<T>(&self, name: &str, f: fn() -> T) -> T;\n     fn read_enum_variant<T>(&self, f: fn(uint) -> T) -> T;\n     fn read_enum_variant_arg<T>(&self, idx: uint, f: fn() -> T) -> T;\n     fn read_vec<T>(&self, f: fn(uint) -> T) -> T;\n     fn read_vec_elt<T>(&self, idx: uint, f: fn() -> T) -> T;\n     fn read_box<T>(&self, f: fn() -> T) -> T;\n     fn read_uniq<T>(&self, f: fn() -> T) -> T;\n     fn read_rec<T>(&self, f: fn() -> T) -> T;\n-    fn read_rec_field<T>(&self, f_name: ~str, f_idx: uint, f: fn() -> T) -> T;\n+    fn read_rec_field<T>(&self, f_name: &str, f_idx: uint, f: fn() -> T) -> T;\n     fn read_tup<T>(&self, sz: uint, f: fn() -> T) -> T;\n     fn read_tup_elt<T>(&self, idx: uint, f: fn() -> T) -> T;\n }"}]}