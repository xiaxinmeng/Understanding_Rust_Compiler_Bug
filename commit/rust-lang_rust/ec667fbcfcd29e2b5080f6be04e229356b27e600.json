{"sha": "ec667fbcfcd29e2b5080f6be04e229356b27e600", "node_id": "C_kwDOAAsO6NoAKGVjNjY3ZmJjZmNkMjllMmI1MDgwZjZiZTA0ZTIyOTM1NmIyN2U2MDA", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-04-04T04:48:36Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-04-04T04:48:36Z"}, "message": "Auto merge of #95031 - compiler-errors:param-env-cache, r=Aaron1011\n\nDo not use `ParamEnv::and` when building a cache key from a param-env and trait eval candidate\n\nDo not use `ParamEnv::and` to cache a param-env with a selection/evaluation candidate.\n\nThis is because if the param-env is `RevealAll` mode, and the candidate looks global (i.e. it has erased regions, which can show up when we normalize a projection type under a binder<sup>1</sup>), then when we use `ParamEnv::and` to pair the candidate and the param-env for use as a cache key, we will throw away the param-env's caller bounds, and we'll end up caching a candidate that we inferred from the param-env with a empty param-env, which may cause cache-hit later when we have an empty param-env, and possibly mess with normalization like we see in the referenced issue during codegen.\n\nNot sure how to trigger this with a more structured test, but changing `check-pass` to `build-pass` triggers the case that https://github.com/rust-lang/rust/issues/94903 detected.\n\n<sup>1.</sup> That is, we will replace the late-bound region with a placeholder, which gets canonicalized and turned into an infererence variable, which gets erased during region freshening right before we cache the result. Sorry, it's quite a few steps.\n\nFixes #94903\nr? `@Aaron1011` (or reassign as you see fit)", "tree": {"sha": "62623f8ee1b49cfade05b2d78728bf6f988f654f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/62623f8ee1b49cfade05b2d78728bf6f988f654f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ec667fbcfcd29e2b5080f6be04e229356b27e600", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ec667fbcfcd29e2b5080f6be04e229356b27e600", "html_url": "https://github.com/rust-lang/rust/commit/ec667fbcfcd29e2b5080f6be04e229356b27e600", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ec667fbcfcd29e2b5080f6be04e229356b27e600/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ac4b3450ede3e5f694f78b991496fd30846c5932", "url": "https://api.github.com/repos/rust-lang/rust/commits/ac4b3450ede3e5f694f78b991496fd30846c5932", "html_url": "https://github.com/rust-lang/rust/commit/ac4b3450ede3e5f694f78b991496fd30846c5932"}, {"sha": "8588f798029758c4d412757ff5d31c79ce5c02bf", "url": "https://api.github.com/repos/rust-lang/rust/commits/8588f798029758c4d412757ff5d31c79ce5c02bf", "html_url": "https://github.com/rust-lang/rust/commit/8588f798029758c4d412757ff5d31c79ce5c02bf"}], "stats": {"total": 32, "additions": 20, "deletions": 12}, "files": [{"sha": "ffa70cddbd59c8174ce036f79bb36d997d50dc55", "filename": "compiler/rustc_middle/src/traits/select.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/ec667fbcfcd29e2b5080f6be04e229356b27e600/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec667fbcfcd29e2b5080f6be04e229356b27e600/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fselect.rs?ref=ec667fbcfcd29e2b5080f6be04e229356b27e600", "patch": "@@ -13,12 +13,19 @@ use rustc_hir::def_id::DefId;\n use rustc_query_system::cache::Cache;\n \n pub type SelectionCache<'tcx> = Cache<\n-    ty::ParamEnvAnd<'tcx, ty::TraitPredicate<'tcx>>,\n+    // This cache does not use `ParamEnvAnd` in its keys because `ParamEnv::and` can replace\n+    // caller bounds with an empty list if the `TraitPredicate` looks global, which may happen\n+    // after erasing lifetimes from the predicate.\n+    (ty::ParamEnv<'tcx>, ty::TraitPredicate<'tcx>),\n     SelectionResult<'tcx, SelectionCandidate<'tcx>>,\n >;\n \n-pub type EvaluationCache<'tcx> =\n-    Cache<ty::ParamEnvAnd<'tcx, ty::PolyTraitPredicate<'tcx>>, EvaluationResult>;\n+pub type EvaluationCache<'tcx> = Cache<\n+    // See above: this cache does not use `ParamEnvAnd` in its keys due to sometimes incorrectly\n+    // caching with the wrong `ParamEnv`.\n+    (ty::ParamEnv<'tcx>, ty::PolyTraitPredicate<'tcx>),\n+    EvaluationResult,\n+>;\n \n /// The selection process begins by considering all impls, where\n /// clauses, and so forth that might resolve an obligation. Sometimes"}, {"sha": "e69bf6eca90ef04baaf42a32c16f8c3fd1ad48c5", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/ec667fbcfcd29e2b5080f6be04e229356b27e600/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec667fbcfcd29e2b5080f6be04e229356b27e600/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=ec667fbcfcd29e2b5080f6be04e229356b27e600", "patch": "@@ -1025,11 +1025,11 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n \n         let tcx = self.tcx();\n         if self.can_use_global_caches(param_env) {\n-            if let Some(res) = tcx.evaluation_cache.get(&param_env.and(trait_pred), tcx) {\n+            if let Some(res) = tcx.evaluation_cache.get(&(param_env, trait_pred), tcx) {\n                 return Some(res);\n             }\n         }\n-        self.infcx.evaluation_cache.get(&param_env.and(trait_pred), tcx)\n+        self.infcx.evaluation_cache.get(&(param_env, trait_pred), tcx)\n     }\n \n     fn insert_evaluation_cache(\n@@ -1060,13 +1060,13 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 // FIXME: Due to #50507 this overwrites the different values\n                 // This should be changed to use HashMapExt::insert_same\n                 // when that is fixed\n-                self.tcx().evaluation_cache.insert(param_env.and(trait_pred), dep_node, result);\n+                self.tcx().evaluation_cache.insert((param_env, trait_pred), dep_node, result);\n                 return;\n             }\n         }\n \n         debug!(?trait_pred, ?result, \"insert_evaluation_cache\");\n-        self.infcx.evaluation_cache.insert(param_env.and(trait_pred), dep_node, result);\n+        self.infcx.evaluation_cache.insert((param_env, trait_pred), dep_node, result);\n     }\n \n     /// For various reasons, it's possible for a subobligation\n@@ -1275,11 +1275,11 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         pred.remap_constness(tcx, &mut param_env);\n \n         if self.can_use_global_caches(param_env) {\n-            if let Some(res) = tcx.selection_cache.get(&param_env.and(pred), tcx) {\n+            if let Some(res) = tcx.selection_cache.get(&(param_env, pred), tcx) {\n                 return Some(res);\n             }\n         }\n-        self.infcx.selection_cache.get(&param_env.and(pred), tcx)\n+        self.infcx.selection_cache.get(&(param_env, pred), tcx)\n     }\n \n     /// Determines whether can we safely cache the result\n@@ -1340,14 +1340,14 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 if !candidate.needs_infer() {\n                     debug!(?pred, ?candidate, \"insert_candidate_cache global\");\n                     // This may overwrite the cache with the same value.\n-                    tcx.selection_cache.insert(param_env.and(pred), dep_node, candidate);\n+                    tcx.selection_cache.insert((param_env, pred), dep_node, candidate);\n                     return;\n                 }\n             }\n         }\n \n         debug!(?pred, ?candidate, \"insert_candidate_cache local\");\n-        self.infcx.selection_cache.insert(param_env.and(pred), dep_node, candidate);\n+        self.infcx.selection_cache.insert((param_env, pred), dep_node, candidate);\n     }\n \n     /// Matches a predicate against the bounds of its self type."}, {"sha": "00a866f220b2e8a512e223dbeb0c2a762448edb2", "filename": "src/test/ui/higher-rank-trait-bounds/normalize-under-binder/issue-80706.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ec667fbcfcd29e2b5080f6be04e229356b27e600/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fnormalize-under-binder%2Fissue-80706.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec667fbcfcd29e2b5080f6be04e229356b27e600/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fnormalize-under-binder%2Fissue-80706.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fnormalize-under-binder%2Fissue-80706.rs?ref=ec667fbcfcd29e2b5080f6be04e229356b27e600", "patch": "@@ -1,4 +1,4 @@\n-// check-pass\n+// build-pass\n // edition:2018\n \n type BoxFuture<T> = std::pin::Pin<Box<dyn std::future::Future<Output=T>>>;\n@@ -65,6 +65,7 @@ async fn run<S>(dep: &str)\n where\n     S: Storage,\n     for<'a> SaveUser<'a>: StorageRequest<S>,\n+    for<'a> SaveUser<'a>: StorageRequestReturnType,\n {\n     User { dep }.save().await;\n }"}]}