{"sha": "7a46a4f2197c6ff1026d2bd81480165ad0b43bbc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdhNDZhNGYyMTk3YzZmZjEwMjZkMmJkODE0ODAxNjVhZDBiNDNiYmM=", "commit": {"author": {"name": "jumbatm", "email": "30644300+jumbatm@users.noreply.github.com", "date": "2020-12-22T14:26:04Z"}, "committer": {"name": "jumbatm", "email": "30644300+jumbatm@users.noreply.github.com", "date": "2021-01-11T17:31:01Z"}, "message": "Remove unnecessary allocation.", "tree": {"sha": "0fe6d5d64a256c5ed0e2ef874bd9a29535474fb0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0fe6d5d64a256c5ed0e2ef874bd9a29535474fb0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7a46a4f2197c6ff1026d2bd81480165ad0b43bbc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7a46a4f2197c6ff1026d2bd81480165ad0b43bbc", "html_url": "https://github.com/rust-lang/rust/commit/7a46a4f2197c6ff1026d2bd81480165ad0b43bbc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7a46a4f2197c6ff1026d2bd81480165ad0b43bbc/comments", "author": {"login": "jumbatm", "id": 30644300, "node_id": "MDQ6VXNlcjMwNjQ0MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/30644300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jumbatm", "html_url": "https://github.com/jumbatm", "followers_url": "https://api.github.com/users/jumbatm/followers", "following_url": "https://api.github.com/users/jumbatm/following{/other_user}", "gists_url": "https://api.github.com/users/jumbatm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jumbatm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jumbatm/subscriptions", "organizations_url": "https://api.github.com/users/jumbatm/orgs", "repos_url": "https://api.github.com/users/jumbatm/repos", "events_url": "https://api.github.com/users/jumbatm/events{/privacy}", "received_events_url": "https://api.github.com/users/jumbatm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jumbatm", "id": 30644300, "node_id": "MDQ6VXNlcjMwNjQ0MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/30644300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jumbatm", "html_url": "https://github.com/jumbatm", "followers_url": "https://api.github.com/users/jumbatm/followers", "following_url": "https://api.github.com/users/jumbatm/following{/other_user}", "gists_url": "https://api.github.com/users/jumbatm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jumbatm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jumbatm/subscriptions", "organizations_url": "https://api.github.com/users/jumbatm/orgs", "repos_url": "https://api.github.com/users/jumbatm/repos", "events_url": "https://api.github.com/users/jumbatm/events{/privacy}", "received_events_url": "https://api.github.com/users/jumbatm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "15c64a181b93584572f568a4c135a0fdb2870eb6", "url": "https://api.github.com/repos/rust-lang/rust/commits/15c64a181b93584572f568a4c135a0fdb2870eb6", "html_url": "https://github.com/rust-lang/rust/commit/15c64a181b93584572f568a4c135a0fdb2870eb6"}], "stats": {"total": 8, "additions": 4, "deletions": 4}, "files": [{"sha": "131d783ce4e2cdc1abed0a7f196e3f1a82642b1a", "filename": "compiler/rustc_lint/src/builtin.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7a46a4f2197c6ff1026d2bd81480165ad0b43bbc/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a46a4f2197c6ff1026d2bd81480165ad0b43bbc/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs?ref=7a46a4f2197c6ff1026d2bd81480165ad0b43bbc", "patch": "@@ -2630,14 +2630,14 @@ impl ClashingExternDeclarations {\n         let local_did = tcx.hir().local_def_id(fi.hir_id);\n         let did = local_did.to_def_id();\n         let instance = Instance::new(did, ty::List::identity_for_item(tcx, did));\n-        let name = tcx.symbol_name(instance).name.to_string();\n-        if self.seen_decls.contains_key(&name) {\n+        let name = tcx.symbol_name(instance).name;\n+        if let Some(&hir_id) = self.seen_decls.get(name) {\n             // Avoid updating the map with the new entry when we do find a collision. We want to\n             // make sure we're always pointing to the first definition as the previous declaration.\n             // This lets us avoid emitting \"knock-on\" diagnostics.\n-            Some(*self.seen_decls.get(&name).unwrap())\n+            Some(hir_id)\n         } else {\n-            self.seen_decls.insert(name, hid)\n+            self.seen_decls.insert(name.to_owned(), hid)\n         }\n     }\n "}]}