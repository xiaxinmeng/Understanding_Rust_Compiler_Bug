{"sha": "5bf185b4995975a98bdf1855a0da01bb29ec202d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjViZjE4NWI0OTk1OTc1YTk4YmRmMTg1NWEwZGEwMWJiMjllYzIwMmQ=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-03-05T21:20:57Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-03-05T22:00:44Z"}, "message": "Port fsync, waitpid and remove_file to core::{os,libc}.", "tree": {"sha": "3e5a7a770fc54ca6da8ef997cff0e130d3b082d1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3e5a7a770fc54ca6da8ef997cff0e130d3b082d1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5bf185b4995975a98bdf1855a0da01bb29ec202d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5bf185b4995975a98bdf1855a0da01bb29ec202d", "html_url": "https://github.com/rust-lang/rust/commit/5bf185b4995975a98bdf1855a0da01bb29ec202d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5bf185b4995975a98bdf1855a0da01bb29ec202d/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "faccd4ac92cd5785c89f646eeccb042f35161066", "url": "https://api.github.com/repos/rust-lang/rust/commits/faccd4ac92cd5785c89f646eeccb042f35161066", "html_url": "https://github.com/rust-lang/rust/commit/faccd4ac92cd5785c89f646eeccb042f35161066"}], "stats": {"total": 122, "additions": 121, "deletions": 1}, "files": [{"sha": "fceb1f9f086156c26cbee74e211ed612c4fae365", "filename": "src/libcore/libc.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/5bf185b4995975a98bdf1855a0da01bb29ec202d/src%2Flibcore%2Flibc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bf185b4995975a98bdf1855a0da01bb29ec202d/src%2Flibcore%2Flibc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flibc.rs?ref=5bf185b4995975a98bdf1855a0da01bb29ec202d", "patch": "@@ -1018,11 +1018,23 @@ mod funcs {\n             fn readlink(path: *c_char, buf: *mutable c_char,\n                         bufsz: size_t) -> ssize_t;\n \n+            fn fsync(fd: c_int) -> c_int;\n+\n+            #[cfg(target_os = \"linux\")]\n+            fn fdatasync(fd: c_int) -> c_int;\n+\n             fn setenv(name: *c_char, val: *c_char,\n                       overwrite: c_int) -> c_int;\n             fn unsetenv(name: *c_char) -> c_int;\n             fn putenv(string: *c_char) -> c_int;\n         }\n+\n+        #[nolink]\n+        #[abi = \"cdecl\"]\n+        native mod wait {\n+            fn waitpid(pid: pid_t, status: *mutable c_int,\n+                       options: c_int) -> pid_t;\n+        }\n     }\n \n     #[cfg(target_os = \"win32\")]\n@@ -1098,9 +1110,17 @@ mod funcs {\n             fn CreateDirectoryA(lpPathName: LPCSTR,\n                                 lpSecurityAttributes:\n                                 LPSECURITY_ATTRIBUTES) -> BOOL;\n+            fn DeleteFileA(lpPathName: LPCSTR) -> BOOL;\n             fn RemoveDirectoryA(lpPathName: LPCSTR) -> BOOL;\n             fn SetCurrentDirectoryA(lpPathName: LPCSTR) -> BOOL;\n         }\n+\n+        #[abi = \"cdecl\"]\n+        #[nolink]\n+        native mod msvcrt {\n+            #[link_name = \"_commit\"]\n+            fn commit(fd: c_int) -> c_int;\n+        }\n     }\n }\n "}, {"sha": "c57b4420b67cb1c75bed688a5480919fc5d8a703", "filename": "src/libcore/os.rs", "status": "modified", "additions": 101, "deletions": 1, "changes": 102, "blob_url": "https://github.com/rust-lang/rust/blob/5bf185b4995975a98bdf1855a0da01bb29ec202d/src%2Flibcore%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bf185b4995975a98bdf1855a0da01bb29ec202d/src%2Flibcore%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fos.rs?ref=5bf185b4995975a98bdf1855a0da01bb29ec202d", "patch": "@@ -14,7 +14,7 @@\n // facts of which OS the user is on -- they should be given the opportunity\n // to write OS-ignorant code by default.\n \n-import libc::{c_char, c_void, c_int, c_uint, size_t, mode_t, FILE};\n+import libc::{c_char, c_void, c_int, c_uint, size_t, mode_t, pid_t, FILE};\n import libc::{close, fclose};\n \n import getcwd = rustrt::rust_getcwd;\n@@ -32,6 +32,7 @@ native mod rustrt {\n     fn rust_path_is_dir(path: str::sbuf) -> c_int;\n     fn rust_path_exists(path: str::sbuf) -> c_int;\n     fn rust_list_files(path: str) -> [str];\n+    fn rust_process_wait(handle: c_int) -> c_int;\n }\n \n \n@@ -96,6 +97,77 @@ fn fdopen(fd: c_int) -> *FILE {\n }\n \n \n+// fsync related\n+\n+enum fsync_level {\n+    // whatever fsync does on that platform\n+    fsync,\n+\n+    // fdatasync on linux, similiar or more on other platforms\n+    fdatasync,\n+\n+    // full fsync\n+    //\n+    // You must additionally sync the parent directory as well!\n+    fullfsync,\n+}\n+\n+#[cfg(target_os = \"win32\")]\n+fn fsync_fd(fd: c_int, _level: fsync_level) -> c_int {\n+    import libc::funcs::extra::msvcrt::*;\n+    ret commit(fd);\n+}\n+\n+#[cfg(target_os = \"linux\")]\n+fn fsync_fd(fd: c_int, level: fsync_level) -> c_int {\n+    import libc::funcs::posix01::unistd::*;\n+    alt level {\n+      fsync | fullfsync { ret fsync(fd); }\n+      fdatasync { ret fdatasync(fd); }\n+    }\n+}\n+\n+#[cfg(target_os = \"macos\")]\n+fn fsync_fd(fd: c_int, level: fsync_level) -> c_int {\n+    import libc::consts::os::extra::*;\n+    import libc::funcs::posix88::fcntl::*;\n+    import libc::funcs::posix01::unistd::*;\n+    alt level {\n+      fsync { ret fsync(fd); }\n+      _ {\n+        // According to man fnctl, the ok retval is only specified to be !=-1\n+        if (fcntl(F_FULLFSYNC as c_int, fd) == -1 as c_int)\n+            { ret -1 as c_int; }\n+        else\n+            { ret 0 as c_int; }\n+      }\n+    }\n+}\n+\n+#[cfg(target_os = \"freebsd\")]\n+fn fsync_fd(fd: c_int, _l: fsync_level) -> c_int {\n+    import libc::funcs::posix01::unistd::*;\n+    ret fsync(fd);\n+}\n+\n+\n+#[cfg(target_os = \"win32\")]\n+fn waitpid(pid: pid_t) -> c_int {\n+    ret rustrt::rust_process_wait(pid);\n+}\n+\n+#[cfg(target_os = \"linux\")]\n+#[cfg(target_os = \"freebsd\")]\n+#[cfg(target_os = \"macos\")]\n+fn waitpid(pid: pid_t) -> c_int {\n+    import libc::funcs::posix01::wait::*;\n+    let status = 0 as c_int;\n+\n+    assert (waitpid(pid, ptr::mut_addr_of(status),\n+                    0 as c_int) != (-1 as c_int));\n+    ret status;\n+}\n+\n \n #[cfg(target_os = \"linux\")]\n #[cfg(target_os = \"freebsd\")]\n@@ -406,6 +478,34 @@ fn change_dir(p: path) -> bool {\n     }\n }\n \n+/*\n+Function: remove_file\n+\n+Deletes an existing file.\n+*/\n+fn remove_file(p: path) -> bool {\n+    ret unlink(p);\n+\n+    #[cfg(target_os = \"win32\")]\n+    fn unlink(p: path) -> bool {\n+        // FIXME: remove imports when export globs work properly.\n+        import libc::funcs::extra::kernel32;\n+        import libc::types::os::arch::extra::*;\n+        ret as_c_charp(p) {|buf|\n+            kernel32::DeleteFileA(buf) != (0 as BOOL)\n+        };\n+    }\n+\n+    #[cfg(target_os = \"linux\")]\n+    #[cfg(target_os = \"macos\")]\n+    #[cfg(target_os = \"freebsd\")]\n+    fn unlink(p: path) -> bool {\n+        ret as_c_charp(p) {|buf|\n+            libc::unlink(buf) == (0 as c_int)\n+        };\n+    }\n+}\n+\n \n \n #[cfg(target_os = \"macos\")]"}]}