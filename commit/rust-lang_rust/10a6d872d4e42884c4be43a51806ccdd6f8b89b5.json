{"sha": "10a6d872d4e42884c4be43a51806ccdd6f8b89b5", "node_id": "C_kwDOAAsO6NoAKDEwYTZkODcyZDRlNDI4ODRjNGJlNDNhNTE4MDZjY2RkNmY4Yjg5YjU", "commit": {"author": {"name": "Alex Macleod", "email": "alex@macleod.io", "date": "2022-03-30T17:44:04Z"}, "committer": {"name": "Alex Macleod", "email": "alex@macleod.io", "date": "2022-03-30T17:44:04Z"}, "message": "Handle relative paths in module_files lints", "tree": {"sha": "32379a3aff38f32c96985fcc18700145a42edf2d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/32379a3aff38f32c96985fcc18700145a42edf2d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/10a6d872d4e42884c4be43a51806ccdd6f8b89b5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/10a6d872d4e42884c4be43a51806ccdd6f8b89b5", "html_url": "https://github.com/rust-lang/rust/commit/10a6d872d4e42884c4be43a51806ccdd6f8b89b5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/10a6d872d4e42884c4be43a51806ccdd6f8b89b5/comments", "author": {"login": "Alexendoo", "id": 1830331, "node_id": "MDQ6VXNlcjE4MzAzMzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1830331?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Alexendoo", "html_url": "https://github.com/Alexendoo", "followers_url": "https://api.github.com/users/Alexendoo/followers", "following_url": "https://api.github.com/users/Alexendoo/following{/other_user}", "gists_url": "https://api.github.com/users/Alexendoo/gists{/gist_id}", "starred_url": "https://api.github.com/users/Alexendoo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Alexendoo/subscriptions", "organizations_url": "https://api.github.com/users/Alexendoo/orgs", "repos_url": "https://api.github.com/users/Alexendoo/repos", "events_url": "https://api.github.com/users/Alexendoo/events{/privacy}", "received_events_url": "https://api.github.com/users/Alexendoo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Alexendoo", "id": 1830331, "node_id": "MDQ6VXNlcjE4MzAzMzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1830331?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Alexendoo", "html_url": "https://github.com/Alexendoo", "followers_url": "https://api.github.com/users/Alexendoo/followers", "following_url": "https://api.github.com/users/Alexendoo/following{/other_user}", "gists_url": "https://api.github.com/users/Alexendoo/gists{/gist_id}", "starred_url": "https://api.github.com/users/Alexendoo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Alexendoo/subscriptions", "organizations_url": "https://api.github.com/users/Alexendoo/orgs", "repos_url": "https://api.github.com/users/Alexendoo/repos", "events_url": "https://api.github.com/users/Alexendoo/events{/privacy}", "received_events_url": "https://api.github.com/users/Alexendoo/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fe7254ff6f9ed485fe3d8b31c97c0beac1102d12", "url": "https://api.github.com/repos/rust-lang/rust/commits/fe7254ff6f9ed485fe3d8b31c97c0beac1102d12", "html_url": "https://github.com/rust-lang/rust/commit/fe7254ff6f9ed485fe3d8b31c97c0beac1102d12"}], "stats": {"total": 74, "additions": 30, "deletions": 44}, "files": [{"sha": "39c44ad6e2cb47ab3e11fe17fe9809abb767a357", "filename": "clippy_lints/src/module_style.rs", "status": "modified", "additions": 24, "deletions": 38, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/10a6d872d4e42884c4be43a51806ccdd6f8b89b5/clippy_lints%2Fsrc%2Fmodule_style.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10a6d872d4e42884c4be43a51806ccdd6f8b89b5/clippy_lints%2Fsrc%2Fmodule_style.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmodule_style.rs?ref=10a6d872d4e42884c4be43a51806ccdd6f8b89b5", "patch": "@@ -1,13 +1,10 @@\n-use std::{\n-    ffi::OsString,\n-    path::{Component, Path},\n-};\n-\n use rustc_ast::ast;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_lint::{EarlyContext, EarlyLintPass, Level, LintContext};\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::{FileName, RealFileName, SourceFile, Span, SyntaxContext};\n+use std::ffi::OsStr;\n+use std::path::{Component, Path};\n \n declare_clippy_lint! {\n     /// ### What it does\n@@ -82,11 +79,7 @@ impl EarlyLintPass for ModStyle {\n \n         let files = cx.sess().source_map().files();\n \n-        let trim_to_src = if let RealFileName::LocalPath(p) = &cx.sess().opts.working_dir {\n-            p.to_string_lossy()\n-        } else {\n-            return;\n-        };\n+        let RealFileName::LocalPath(trim_to_src) = &cx.sess().opts.working_dir else { return };\n \n         // `folder_segments` is all unique folder path segments `path/to/foo.rs` gives\n         // `[path, to]` but not foo\n@@ -97,26 +90,27 @@ impl EarlyLintPass for ModStyle {\n         // `{ foo => path/to/foo.rs, .. }\n         let mut file_map = FxHashMap::default();\n         for file in files.iter() {\n-            match &file.name {\n-                FileName::Real(RealFileName::LocalPath(lp))\n-                    if lp.to_string_lossy().starts_with(trim_to_src.as_ref()) =>\n-                {\n-                    let p = lp.to_string_lossy();\n-                    let path = Path::new(p.trim_start_matches(trim_to_src.as_ref()));\n-                    if let Some(stem) = path.file_stem() {\n-                        file_map.insert(stem.to_os_string(), (file, path.to_owned()));\n-                    }\n-                    process_paths_for_mod_files(path, &mut folder_segments, &mut mod_folders);\n-                    check_self_named_mod_exists(cx, path, file);\n-                },\n-                _ => {},\n+            if let FileName::Real(RealFileName::LocalPath(lp)) = &file.name {\n+                let path = if lp.is_relative() {\n+                    lp\n+                } else if let Ok(relative) = lp.strip_prefix(trim_to_src) {\n+                    relative\n+                } else {\n+                    continue;\n+                };\n+\n+                if let Some(stem) = path.file_stem() {\n+                    file_map.insert(stem, (file, path));\n+                }\n+                process_paths_for_mod_files(path, &mut folder_segments, &mut mod_folders);\n+                check_self_named_mod_exists(cx, path, file);\n             }\n         }\n \n         for folder in &folder_segments {\n             if !mod_folders.contains(folder) {\n                 if let Some((file, path)) = file_map.get(folder) {\n-                    let mut correct = path.clone();\n+                    let mut correct = path.to_path_buf();\n                     correct.pop();\n                     correct.push(folder);\n                     correct.push(\"mod.rs\");\n@@ -138,25 +132,17 @@ impl EarlyLintPass for ModStyle {\n \n /// For each `path` we add each folder component to `folder_segments` and if the file name\n /// is `mod.rs` we add it's parent folder to `mod_folders`.\n-fn process_paths_for_mod_files(\n-    path: &Path,\n-    folder_segments: &mut FxHashSet<OsString>,\n-    mod_folders: &mut FxHashSet<OsString>,\n+fn process_paths_for_mod_files<'a>(\n+    path: &'a Path,\n+    folder_segments: &mut FxHashSet<&'a OsStr>,\n+    mod_folders: &mut FxHashSet<&'a OsStr>,\n ) {\n     let mut comp = path.components().rev().peekable();\n     let _ = comp.next();\n     if path.ends_with(\"mod.rs\") {\n-        mod_folders.insert(comp.peek().map(|c| c.as_os_str().to_owned()).unwrap_or_default());\n+        mod_folders.insert(comp.peek().map(|c| c.as_os_str()).unwrap_or_default());\n     }\n-    let folders = comp\n-        .filter_map(|c| {\n-            if let Component::Normal(s) = c {\n-                Some(s.to_os_string())\n-            } else {\n-                None\n-            }\n-        })\n-        .collect::<Vec<_>>();\n+    let folders = comp.filter_map(|c| if let Component::Normal(s) = c { Some(s) } else { None });\n     folder_segments.extend(folders);\n }\n "}, {"sha": "e2010e9981315a748fbdbebc0a902bfa479766cb", "filename": "tests/ui-cargo/module_style/fail_mod/src/main.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/10a6d872d4e42884c4be43a51806ccdd6f8b89b5/tests%2Fui-cargo%2Fmodule_style%2Ffail_mod%2Fsrc%2Fmain.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/10a6d872d4e42884c4be43a51806ccdd6f8b89b5/tests%2Fui-cargo%2Fmodule_style%2Ffail_mod%2Fsrc%2Fmain.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-cargo%2Fmodule_style%2Ffail_mod%2Fsrc%2Fmain.stderr?ref=10a6d872d4e42884c4be43a51806ccdd6f8b89b5", "patch": "@@ -1,19 +1,19 @@\n-error: `mod.rs` files are required, found `/bad/inner.rs`\n+error: `mod.rs` files are required, found `bad/inner.rs`\n   --> $DIR/bad/inner.rs:1:1\n    |\n LL | pub mod stuff;\n    | ^\n    |\n    = note: `-D clippy::self-named-module-files` implied by `-D warnings`\n-   = help: move `/bad/inner.rs` to `/bad/inner/mod.rs`\n+   = help: move `bad/inner.rs` to `bad/inner/mod.rs`\n \n-error: `mod.rs` files are required, found `/bad/inner/stuff.rs`\n+error: `mod.rs` files are required, found `bad/inner/stuff.rs`\n   --> $DIR/bad/inner/stuff.rs:1:1\n    |\n LL | pub mod most;\n    | ^\n    |\n-   = help: move `/bad/inner/stuff.rs` to `/bad/inner/stuff/mod.rs`\n+   = help: move `bad/inner/stuff.rs` to `bad/inner/stuff/mod.rs`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "f91940209383ff66d330c58df0e1ea54ca3d83b4", "filename": "tests/ui-cargo/module_style/fail_no_mod/src/main.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/10a6d872d4e42884c4be43a51806ccdd6f8b89b5/tests%2Fui-cargo%2Fmodule_style%2Ffail_no_mod%2Fsrc%2Fmain.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/10a6d872d4e42884c4be43a51806ccdd6f8b89b5/tests%2Fui-cargo%2Fmodule_style%2Ffail_no_mod%2Fsrc%2Fmain.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-cargo%2Fmodule_style%2Ffail_no_mod%2Fsrc%2Fmain.stderr?ref=10a6d872d4e42884c4be43a51806ccdd6f8b89b5", "patch": "@@ -1,11 +1,11 @@\n-error: `mod.rs` files are not allowed, found `/bad/mod.rs`\n+error: `mod.rs` files are not allowed, found `bad/mod.rs`\n   --> $DIR/bad/mod.rs:1:1\n    |\n LL | pub struct Thing;\n    | ^\n    |\n    = note: `-D clippy::mod-module-files` implied by `-D warnings`\n-   = help: move `/bad/mod.rs` to `/bad.rs`\n+   = help: move `bad/mod.rs` to `bad.rs`\n \n error: aborting due to previous error\n "}]}