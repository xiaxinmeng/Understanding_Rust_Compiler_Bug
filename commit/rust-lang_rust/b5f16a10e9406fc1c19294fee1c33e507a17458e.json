{"sha": "b5f16a10e9406fc1c19294fee1c33e507a17458e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI1ZjE2YTEwZTk0MDZmYzFjMTkyOTRmZWUxYzMzZTUwN2ExNzQ1OGU=", "commit": {"author": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2017-03-06T21:06:30Z"}, "committer": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2017-03-14T09:02:55Z"}, "message": "Replace Utf8Error::resume_from with Utf8Error::error_len\n\nTheir relationship is:\n\n* `resume_from = error_len.map(|l| l + valid_up_to)`\n* error_len is always one of None, Some(1), Some(2), or Some(3).\n\nWhen I started using resume_from I almost always ended up subtracting\nvalid_up_to to obtain error_len.\nTherefore the latter is what should be provided in the first place.", "tree": {"sha": "64a3688eb665f235e80fe2687c1087af93909693", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/64a3688eb665f235e80fe2687c1087af93909693"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b5f16a10e9406fc1c19294fee1c33e507a17458e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b5f16a10e9406fc1c19294fee1c33e507a17458e", "html_url": "https://github.com/rust-lang/rust/commit/b5f16a10e9406fc1c19294fee1c33e507a17458e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b5f16a10e9406fc1c19294fee1c33e507a17458e/comments", "author": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "182044248ca2aa569844a25e73f90e5bc2fd05d3", "url": "https://api.github.com/repos/rust-lang/rust/commits/182044248ca2aa569844a25e73f90e5bc2fd05d3", "html_url": "https://github.com/rust-lang/rust/commit/182044248ca2aa569844a25e73f90e5bc2fd05d3"}], "stats": {"total": 54, "additions": 28, "deletions": 26}, "files": [{"sha": "98d0b1c8e156594ab4a72570f7ac4cc033ebf56b", "filename": "src/libcollectionstest/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b5f16a10e9406fc1c19294fee1c33e507a17458e/src%2Flibcollectionstest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5f16a10e9406fc1c19294fee1c33e507a17458e/src%2Flibcollectionstest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollectionstest%2Flib.rs?ref=b5f16a10e9406fc1c19294fee1c33e507a17458e", "patch": "@@ -28,7 +28,7 @@\n #![feature(test)]\n #![feature(unboxed_closures)]\n #![feature(unicode)]\n-#![feature(utf8_error_resume_from)]\n+#![feature(utf8_error_error_len)]\n \n extern crate collections;\n extern crate test;"}, {"sha": "c9b7104fec4f0072d2256f2b0de70153fd4648a9", "filename": "src/libcollectionstest/str.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/b5f16a10e9406fc1c19294fee1c33e507a17458e/src%2Flibcollectionstest%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5f16a10e9406fc1c19294fee1c33e507a17458e/src%2Flibcollectionstest%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollectionstest%2Fstr.rs?ref=b5f16a10e9406fc1c19294fee1c33e507a17458e", "patch": "@@ -543,31 +543,31 @@ fn from_utf8_mostly_ascii() {\n #[test]\n fn from_utf8_error() {\n     macro_rules! test {\n-        ($input: expr, $expected_valid_up_to: expr, $expected_resume_from: expr) => {\n+        ($input: expr, $expected_valid_up_to: expr, $expected_error_len: expr) => {\n             let error = from_utf8($input).unwrap_err();\n             assert_eq!(error.valid_up_to(), $expected_valid_up_to);\n-            assert_eq!(error.resume_from(), $expected_resume_from);\n+            assert_eq!(error.error_len(), $expected_error_len);\n         }\n     }\n-    test!(b\"A\\xC3\\xA9 \\xFF \", 4, Some(5));\n-    test!(b\"A\\xC3\\xA9 \\x80 \", 4, Some(5));\n-    test!(b\"A\\xC3\\xA9 \\xC1 \", 4, Some(5));\n-    test!(b\"A\\xC3\\xA9 \\xC1\", 4, Some(5));\n+    test!(b\"A\\xC3\\xA9 \\xFF \", 4, Some(1));\n+    test!(b\"A\\xC3\\xA9 \\x80 \", 4, Some(1));\n+    test!(b\"A\\xC3\\xA9 \\xC1 \", 4, Some(1));\n+    test!(b\"A\\xC3\\xA9 \\xC1\", 4, Some(1));\n     test!(b\"A\\xC3\\xA9 \\xC2\", 4, None);\n-    test!(b\"A\\xC3\\xA9 \\xC2 \", 4, Some(5));\n-    test!(b\"A\\xC3\\xA9 \\xC2\\xC0\", 4, Some(5));\n+    test!(b\"A\\xC3\\xA9 \\xC2 \", 4, Some(1));\n+    test!(b\"A\\xC3\\xA9 \\xC2\\xC0\", 4, Some(1));\n     test!(b\"A\\xC3\\xA9 \\xE0\", 4, None);\n-    test!(b\"A\\xC3\\xA9 \\xE0\\x9F\", 4, Some(5));\n+    test!(b\"A\\xC3\\xA9 \\xE0\\x9F\", 4, Some(1));\n     test!(b\"A\\xC3\\xA9 \\xE0\\xA0\", 4, None);\n-    test!(b\"A\\xC3\\xA9 \\xE0\\xA0\\xC0\", 4, Some(6));\n-    test!(b\"A\\xC3\\xA9 \\xE0\\xA0 \", 4, Some(6));\n-    test!(b\"A\\xC3\\xA9 \\xED\\xA0\\x80 \", 4, Some(5));\n+    test!(b\"A\\xC3\\xA9 \\xE0\\xA0\\xC0\", 4, Some(2));\n+    test!(b\"A\\xC3\\xA9 \\xE0\\xA0 \", 4, Some(2));\n+    test!(b\"A\\xC3\\xA9 \\xED\\xA0\\x80 \", 4, Some(1));\n     test!(b\"A\\xC3\\xA9 \\xF1\", 4, None);\n     test!(b\"A\\xC3\\xA9 \\xF1\\x80\", 4, None);\n     test!(b\"A\\xC3\\xA9 \\xF1\\x80\\x80\", 4, None);\n-    test!(b\"A\\xC3\\xA9 \\xF1 \", 4, Some(5));\n-    test!(b\"A\\xC3\\xA9 \\xF1\\x80 \", 4, Some(6));\n-    test!(b\"A\\xC3\\xA9 \\xF1\\x80\\x80 \", 4, Some(7));\n+    test!(b\"A\\xC3\\xA9 \\xF1 \", 4, Some(1));\n+    test!(b\"A\\xC3\\xA9 \\xF1\\x80 \", 4, Some(2));\n+    test!(b\"A\\xC3\\xA9 \\xF1\\x80\\x80 \", 4, Some(3));\n }\n \n #[test]"}, {"sha": "63b12932c3d62fafbdbd7639b24e9b62c0b5ab59", "filename": "src/libcore/str/mod.rs", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/b5f16a10e9406fc1c19294fee1c33e507a17458e/src%2Flibcore%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5f16a10e9406fc1c19294fee1c33e507a17458e/src%2Flibcore%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fmod.rs?ref=b5f16a10e9406fc1c19294fee1c33e507a17458e", "patch": "@@ -125,7 +125,7 @@ Section: Creating a string\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Utf8Error {\n     valid_up_to: usize,\n-    invalid_length: Option<u8>,\n+    error_len: Option<u8>,\n }\n \n impl Utf8Error {\n@@ -161,12 +161,14 @@ impl Utf8Error {\n     ///   If a byte stream (such as a file or a network socket) is being decoded incrementally,\n     ///   this could be a valid `char` whose UTF-8 byte sequence is spanning multiple chunks.\n     ///\n-    /// * `Some(index)`: an unexpected byte was encountered.\n-    ///   The index provided is where decoding should resume\n+    /// * `Some(len)`: an unexpected byte was encountered.\n+    ///   The length provided is that of the invalid byte sequence\n+    ///   that starts at the index given by `valid_up_to()`.\n+    ///   Decoding should resume after that sequence\n     ///   (after inserting a U+FFFD REPLACEMENT CHARACTER) in case of lossy decoding.\n-    #[unstable(feature = \"utf8_error_resume_from\", reason =\"new\", issue = \"0\")]\n-    pub fn resume_from(&self) -> Option<usize> {\n-        self.invalid_length.map(|l| self.valid_up_to + l as usize)\n+    #[unstable(feature = \"utf8_error_error_len\", reason =\"new\", issue = \"0\")]\n+    pub fn error_len(&self) -> Option<usize> {\n+        self.error_len.map(|len| len as usize)\n     }\n }\n \n@@ -316,9 +318,9 @@ pub unsafe fn from_utf8_unchecked(v: &[u8]) -> &str {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl fmt::Display for Utf8Error {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        if let Some(invalid_length) = self.invalid_length {\n+        if let Some(error_len) = self.error_len {\n             write!(f, \"invalid utf-8 sequence of {} bytes from index {}\",\n-                   invalid_length, self.valid_up_to)\n+                   error_len, self.valid_up_to)\n         } else {\n             write!(f, \"incomplete utf-8 byte sequence from index {}\", self.valid_up_to)\n         }\n@@ -1263,10 +1265,10 @@ fn run_utf8_validation(v: &[u8]) -> Result<(), Utf8Error> {\n     while index < len {\n         let old_offset = index;\n         macro_rules! err {\n-            ($invalid_length: expr) => {\n+            ($error_len: expr) => {\n                 return Err(Utf8Error {\n                     valid_up_to: old_offset,\n-                    invalid_length: $invalid_length,\n+                    error_len: $error_len,\n                 })\n             }\n         }"}]}