{"sha": "7e5d22447264fe8cd5e89326f31bb6f0db3f885b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdlNWQyMjQ0NzI2NGZlOGNkNWU4OTMyNmYzMWJiNmYwZGIzZjg4NWI=", "commit": {"author": {"name": "csmoe", "email": "35686186+csmoe@users.noreply.github.com", "date": "2018-07-11T14:56:44Z"}, "committer": {"name": "Oliver Schneider", "email": "github35764891676564198441@oli-obk.de", "date": "2018-07-16T13:09:17Z"}, "message": "ForeignItemKind", "tree": {"sha": "96387a6bfb48cdf6d0db36675da47d2037fd1b0b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/96387a6bfb48cdf6d0db36675da47d2037fd1b0b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7e5d22447264fe8cd5e89326f31bb6f0db3f885b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7e5d22447264fe8cd5e89326f31bb6f0db3f885b", "html_url": "https://github.com/rust-lang/rust/commit/7e5d22447264fe8cd5e89326f31bb6f0db3f885b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7e5d22447264fe8cd5e89326f31bb6f0db3f885b/comments", "author": {"login": "csmoe", "id": 35686186, "node_id": "MDQ6VXNlcjM1Njg2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/35686186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/csmoe", "html_url": "https://github.com/csmoe", "followers_url": "https://api.github.com/users/csmoe/followers", "following_url": "https://api.github.com/users/csmoe/following{/other_user}", "gists_url": "https://api.github.com/users/csmoe/gists{/gist_id}", "starred_url": "https://api.github.com/users/csmoe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/csmoe/subscriptions", "organizations_url": "https://api.github.com/users/csmoe/orgs", "repos_url": "https://api.github.com/users/csmoe/repos", "events_url": "https://api.github.com/users/csmoe/events{/privacy}", "received_events_url": "https://api.github.com/users/csmoe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f12eca47e09dc0aa7420e51c090a22cd72f44159", "url": "https://api.github.com/repos/rust-lang/rust/commits/f12eca47e09dc0aa7420e51c090a22cd72f44159", "html_url": "https://github.com/rust-lang/rust/commit/f12eca47e09dc0aa7420e51c090a22cd72f44159"}], "stats": {"total": 121, "additions": 60, "deletions": 61}, "files": [{"sha": "401beeb6d20546affc590b1f8b9b0b8e9501ed17", "filename": "src/librustc/hir/intravisit.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7e5d22447264fe8cd5e89326f31bb6f0db3f885b/src%2Flibrustc%2Fhir%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e5d22447264fe8cd5e89326f31bb6f0db3f885b/src%2Flibrustc%2Fhir%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fintravisit.rs?ref=7e5d22447264fe8cd5e89326f31bb6f0db3f885b", "patch": "@@ -710,15 +710,15 @@ pub fn walk_foreign_item<'v, V: Visitor<'v>>(visitor: &mut V, foreign_item: &'v\n     visitor.visit_name(foreign_item.span, foreign_item.name);\n \n     match foreign_item.node {\n-        ForeignItemFn(ref function_declaration, ref param_names, ref generics) => {\n+        ForeignItemKind::Fn(ref function_declaration, ref param_names, ref generics) => {\n             visitor.visit_generics(generics);\n             visitor.visit_fn_decl(function_declaration);\n             for &param_name in param_names {\n                 visitor.visit_ident(param_name);\n             }\n         }\n-        ForeignItemStatic(ref typ, _) => visitor.visit_ty(typ),\n-        ForeignItemType => (),\n+        ForeignItemKind::Static(ref typ, _) => visitor.visit_ty(typ),\n+        ForeignItemKind::Type => (),\n     }\n \n     walk_list!(visitor, visit_attribute, &foreign_item.attrs);"}, {"sha": "d1cc061fdfd2929b1aafe1bab47e90b768ba6db6", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7e5d22447264fe8cd5e89326f31bb6f0db3f885b/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e5d22447264fe8cd5e89326f31bb6f0db3f885b/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=7e5d22447264fe8cd5e89326f31bb6f0db3f885b", "patch": "@@ -3230,12 +3230,12 @@ impl<'a> LoweringContext<'a> {\n                         },\n                     );\n \n-                    hir::ForeignItemFn(fn_dec, fn_args, generics)\n+                    hir::ForeignItemKind::Fn(fn_dec, fn_args, generics)\n                 }\n                 ForeignItemKind::Static(ref t, m) => {\n-                    hir::ForeignItemStatic(self.lower_ty(t, ImplTraitContext::Disallowed), m)\n+                    hir::ForeignItemKind::Static(self.lower_ty(t, ImplTraitContext::Disallowed), m)\n                 }\n-                ForeignItemKind::Ty => hir::ForeignItemType,\n+                ForeignItemKind::Ty => hir::ForeignItemKind::Type,\n                 ForeignItemKind::Macro(_) => panic!(\"shouldn't exist here\"),\n             },\n             vis: self.lower_visibility(&i.vis, None),"}, {"sha": "d9ee77dbe24f7afc3c5f0ce5816c76c7f4158361", "filename": "src/librustc/hir/map/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7e5d22447264fe8cd5e89326f31bb6f0db3f885b/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e5d22447264fe8cd5e89326f31bb6f0db3f885b/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs?ref=7e5d22447264fe8cd5e89326f31bb6f0db3f885b", "patch": "@@ -451,9 +451,9 @@ impl<'hir> Map<'hir> {\n             NodeForeignItem(item) => {\n                 let def_id = self.local_def_id(item.id);\n                 match item.node {\n-                    ForeignItemFn(..) => Some(Def::Fn(def_id)),\n-                    ForeignItemStatic(_, m) => Some(Def::Static(def_id, m)),\n-                    ForeignItemType => Some(Def::TyForeign(def_id)),\n+                    ForeignItemKind::Fn(..) => Some(Def::Fn(def_id)),\n+                    ForeignItemKind::Static(_, m) => Some(Def::Static(def_id, m)),\n+                    ForeignItemKind::Type => Some(Def::TyForeign(def_id)),\n                 }\n             }\n             NodeTraitItem(item) => {"}, {"sha": "ac7a9b4257a01d912d731227e5ad26ddc9bd1f81", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/7e5d22447264fe8cd5e89326f31bb6f0db3f885b/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e5d22447264fe8cd5e89326f31bb6f0db3f885b/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=7e5d22447264fe8cd5e89326f31bb6f0db3f885b", "patch": "@@ -13,7 +13,6 @@\n pub use self::BlockCheckMode::*;\n pub use self::CaptureClause::*;\n pub use self::FunctionRetTy::*;\n-pub use self::ForeignItem_::*;\n pub use self::Item_::*;\n pub use self::Mutability::*;\n pub use self::PrimTy::*;\n@@ -2192,30 +2191,30 @@ pub enum AssociatedItemKind {\n pub struct ForeignItem {\n     pub name: Name,\n     pub attrs: HirVec<Attribute>,\n-    pub node: ForeignItem_,\n+    pub node: ForeignItemKind,\n     pub id: NodeId,\n     pub span: Span,\n     pub vis: Visibility,\n }\n \n /// An item within an `extern` block\n #[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n-pub enum ForeignItem_ {\n+pub enum ForeignItemKind {\n     /// A foreign function\n-    ForeignItemFn(P<FnDecl>, HirVec<Ident>, Generics),\n+    Fn(P<FnDecl>, HirVec<Ident>, Generics),\n     /// A foreign static item (`static ext: u8`), with optional mutability\n     /// (the boolean is true when mutable)\n-    ForeignItemStatic(P<Ty>, bool),\n+    Static(P<Ty>, bool),\n     /// A foreign type\n-    ForeignItemType,\n+    Type,\n }\n \n-impl ForeignItem_ {\n+impl ForeignItemKind {\n     pub fn descriptive_variant(&self) -> &str {\n         match *self {\n-            ForeignItemFn(..) => \"foreign function\",\n-            ForeignItemStatic(..) => \"foreign static item\",\n-            ForeignItemType => \"foreign type\",\n+            ForeignItemKind::Fn(..) => \"foreign function\",\n+            ForeignItemKind::Static(..) => \"foreign static item\",\n+            ForeignItemKind::Type => \"foreign type\",\n         }\n     }\n }"}, {"sha": "9d211535063db4bfb23caec1fe1bd5d8d1197ccf", "filename": "src/librustc/hir/print.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7e5d22447264fe8cd5e89326f31bb6f0db3f885b/src%2Flibrustc%2Fhir%2Fprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e5d22447264fe8cd5e89326f31bb6f0db3f885b/src%2Flibrustc%2Fhir%2Fprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fprint.rs?ref=7e5d22447264fe8cd5e89326f31bb6f0db3f885b", "patch": "@@ -447,7 +447,7 @@ impl<'a> State<'a> {\n         self.maybe_print_comment(item.span.lo())?;\n         self.print_outer_attributes(&item.attrs)?;\n         match item.node {\n-            hir::ForeignItemFn(ref decl, ref arg_names, ref generics) => {\n+            hir::ForeignItemKind::Fn(ref decl, ref arg_names, ref generics) => {\n                 self.head(\"\")?;\n                 self.print_fn(decl,\n                               hir::FnHeader {\n@@ -465,7 +465,7 @@ impl<'a> State<'a> {\n                 self.s.word(\";\")?;\n                 self.end() // end the outer fn box\n             }\n-            hir::ForeignItemStatic(ref t, m) => {\n+            hir::ForeignItemKind::Static(ref t, m) => {\n                 self.head(&visibility_qualified(&item.vis, \"static\"))?;\n                 if m {\n                     self.word_space(\"mut\")?;\n@@ -477,7 +477,7 @@ impl<'a> State<'a> {\n                 self.end()?; // end the head-ibox\n                 self.end() // end the outer cbox\n             }\n-            hir::ForeignItemType => {\n+            hir::ForeignItemKind::Type => {\n                 self.head(&visibility_qualified(&item.vis, \"type\"))?;\n                 self.print_name(item.name)?;\n                 self.s.word(\";\")?;"}, {"sha": "d00f96834ab4dc92dda0ab3282b254d7b3c441a1", "filename": "src/librustc/ich/impls_hir.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7e5d22447264fe8cd5e89326f31bb6f0db3f885b/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e5d22447264fe8cd5e89326f31bb6f0db3f885b/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_hir.rs?ref=7e5d22447264fe8cd5e89326f31bb6f0db3f885b", "patch": "@@ -909,10 +909,10 @@ impl_stable_hash_for!(struct hir::ForeignItem {\n     vis\n });\n \n-impl_stable_hash_for!(enum hir::ForeignItem_ {\n-    ForeignItemFn(fn_decl, arg_names, generics),\n-    ForeignItemStatic(ty, is_mutbl),\n-    ForeignItemType\n+impl_stable_hash_for!(enum hir::ForeignItemKind {\n+    Fn(fn_decl, arg_names, generics),\n+    Static(ty, is_mutbl),\n+    Type\n });\n \n impl_stable_hash_for!(enum hir::StmtKind {"}, {"sha": "40dd51cf5b993eeea1c6d8daf8fb987609dac9ab", "filename": "src/librustc/middle/resolve_lifetime.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7e5d22447264fe8cd5e89326f31bb6f0db3f885b/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e5d22447264fe8cd5e89326f31bb6f0db3f885b/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs?ref=7e5d22447264fe8cd5e89326f31bb6f0db3f885b", "patch": "@@ -550,15 +550,15 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n \n     fn visit_foreign_item(&mut self, item: &'tcx hir::ForeignItem) {\n         match item.node {\n-            hir::ForeignItemFn(ref decl, _, ref generics) => {\n+            hir::ForeignItemKind::Fn(ref decl, _, ref generics) => {\n                 self.visit_early_late(None, decl, generics, |this| {\n                     intravisit::walk_foreign_item(this, item);\n                 })\n             }\n-            hir::ForeignItemStatic(..) => {\n+            hir::ForeignItemKind::Static(..) => {\n                 intravisit::walk_foreign_item(self, item);\n             }\n-            hir::ForeignItemType => {\n+            hir::ForeignItemKind::Type => {\n                 intravisit::walk_foreign_item(self, item);\n             }\n         }"}, {"sha": "d12cce5ac4d9a19fabec23c62589656d1602855a", "filename": "src/librustc/ty/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7e5d22447264fe8cd5e89326f31bb6f0db3f885b/src%2Flibrustc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e5d22447264fe8cd5e89326f31bb6f0db3f885b/src%2Flibrustc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Futil.rs?ref=7e5d22447264fe8cd5e89326f31bb6f0db3f885b", "patch": "@@ -608,7 +608,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n                     node: hir::ItemStatic(_, mutbl, _), ..\n                 }) => Some(mutbl),\n                 Node::NodeForeignItem(&hir::ForeignItem {\n-                    node: hir::ForeignItemStatic(_, is_mutbl), ..\n+                    node: hir::ForeignItemKind::Static(_, is_mutbl), ..\n                 }) =>\n                     Some(if is_mutbl {\n                         hir::Mutability::MutMutable"}, {"sha": "81e51e59d92427f14e4bcede896fc8356f1bb861", "filename": "src/librustc_codegen_llvm/consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7e5d22447264fe8cd5e89326f31bb6f0db3f885b/src%2Flibrustc_codegen_llvm%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e5d22447264fe8cd5e89326f31bb6f0db3f885b/src%2Flibrustc_codegen_llvm%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fconsts.rs?ref=7e5d22447264fe8cd5e89326f31bb6f0db3f885b", "patch": "@@ -143,7 +143,7 @@ pub fn get_static(cx: &CodegenCx, def_id: DefId) -> ValueRef {\n             }\n \n             hir_map::NodeForeignItem(&hir::ForeignItem {\n-                ref attrs, span, node: hir::ForeignItemStatic(..), ..\n+                ref attrs, span, node: hir::ForeignItemKind::Static(..), ..\n             }) => {\n                 let g = if let Some(linkage) = cx.tcx.codegen_fn_attrs(def_id).linkage {\n                     // If this is a static with a linkage specified, then we need to handle"}, {"sha": "30cf9288c8057b3968b73370fc0fa3f3cdb4bc1b", "filename": "src/librustc_lint/types.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7e5d22447264fe8cd5e89326f31bb6f0db3f885b/src%2Flibrustc_lint%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e5d22447264fe8cd5e89326f31bb6f0db3f885b/src%2Flibrustc_lint%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Ftypes.rs?ref=7e5d22447264fe8cd5e89326f31bb6f0db3f885b", "patch": "@@ -786,13 +786,13 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for ImproperCTypes {\n             if nmod.abi != Abi::RustIntrinsic && nmod.abi != Abi::PlatformIntrinsic {\n                 for ni in &nmod.items {\n                     match ni.node {\n-                        hir::ForeignItemFn(ref decl, _, _) => {\n+                        hir::ForeignItemKind::Fn(ref decl, _, _) => {\n                             vis.check_foreign_fn(ni.id, decl);\n                         }\n-                        hir::ForeignItemStatic(ref ty, _) => {\n+                        hir::ForeignItemKind::Static(ref ty, _) => {\n                             vis.check_foreign_static(ni.id, ty.span);\n                         }\n-                        hir::ForeignItemType => ()\n+                        hir::ForeignItemKind::Type => ()\n                     }\n                 }\n             }"}, {"sha": "25bd2d09704c56beb1f04f7a6e92df256c823bf8", "filename": "src/librustc_metadata/encoder.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7e5d22447264fe8cd5e89326f31bb6f0db3f885b/src%2Flibrustc_metadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e5d22447264fe8cd5e89326f31bb6f0db3f885b/src%2Flibrustc_metadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fencoder.rs?ref=7e5d22447264fe8cd5e89326f31bb6f0db3f885b", "patch": "@@ -1561,17 +1561,17 @@ impl<'a, 'b: 'a, 'tcx: 'b> IsolatedEncoder<'a, 'b, 'tcx> {\n         debug!(\"IsolatedEncoder::encode_info_for_foreign_item({:?})\", def_id);\n \n         let kind = match nitem.node {\n-            hir::ForeignItemFn(_, ref names, _) => {\n+            hir::ForeignItemKind::Fn(_, ref names, _) => {\n                 let data = FnData {\n                     constness: hir::Constness::NotConst,\n                     arg_names: self.encode_fn_arg_names(names),\n                     sig: self.lazy(&tcx.fn_sig(def_id)),\n                 };\n                 EntryKind::ForeignFn(self.lazy(&data))\n             }\n-            hir::ForeignItemStatic(_, true) => EntryKind::ForeignMutStatic,\n-            hir::ForeignItemStatic(_, false) => EntryKind::ForeignImmStatic,\n-            hir::ForeignItemType => EntryKind::ForeignType,\n+            hir::ForeignItemKind::Static(_, true) => EntryKind::ForeignMutStatic,\n+            hir::ForeignItemKind::Static(_, false) => EntryKind::ForeignImmStatic,\n+            hir::ForeignItemKind::Type => EntryKind::ForeignType,\n         };\n \n         Entry {\n@@ -1586,7 +1586,7 @@ impl<'a, 'b: 'a, 'tcx: 'b> IsolatedEncoder<'a, 'b, 'tcx> {\n             ty: Some(self.encode_item_type(def_id)),\n             inherent_impls: LazySeq::empty(),\n             variances: match nitem.node {\n-                hir::ForeignItemFn(..) => self.encode_variances_of(def_id),\n+                hir::ForeignItemKind::Fn(..) => self.encode_variances_of(def_id),\n                 _ => LazySeq::empty(),\n             },\n             generics: Some(self.encode_generics(def_id)),"}, {"sha": "e26bf1b4f77cd0e05750275700c15f3647634a42", "filename": "src/librustc_typeck/check/intrinsic.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7e5d22447264fe8cd5e89326f31bb6f0db3f885b/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e5d22447264fe8cd5e89326f31bb6f0db3f885b/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs?ref=7e5d22447264fe8cd5e89326f31bb6f0db3f885b", "patch": "@@ -35,7 +35,7 @@ fn equate_intrinsic_type<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     let def_id = tcx.hir.local_def_id(it.id);\n \n     match it.node {\n-        hir::ForeignItemFn(..) => {}\n+        hir::ForeignItemKind::Fn(..) => {}\n         _ => {\n             struct_span_err!(tcx.sess, it.span, E0622,\n                              \"intrinsic must be a function\")\n@@ -48,7 +48,7 @@ fn equate_intrinsic_type<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     let i_n_tps = tcx.generics_of(def_id).own_counts().types;\n     if i_n_tps != n_tps {\n         let span = match it.node {\n-            hir::ForeignItemFn(_, _, ref generics) => generics.span,\n+            hir::ForeignItemKind::Fn(_, _, ref generics) => generics.span,\n             _ => bug!()\n         };\n "}, {"sha": "4aa11526acd508af0f85071708ac7d56421f9be4", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7e5d22447264fe8cd5e89326f31bb6f0db3f885b/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e5d22447264fe8cd5e89326f31bb6f0db3f885b/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=7e5d22447264fe8cd5e89326f31bb6f0db3f885b", "patch": "@@ -1340,7 +1340,7 @@ pub fn check_item_type<'a,'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, it: &'tcx hir::Item\n                     err.emit();\n                 }\n \n-                if let hir::ForeignItemFn(ref fn_decl, _, _) = item.node {\n+                if let hir::ForeignItemKind::Fn(ref fn_decl, _, _) = item.node {\n                     require_c_abi_if_variadic(tcx, fn_decl, m.abi, item.span);\n                 }\n             }"}, {"sha": "e9f3cae080cb75de7679c9071d9416a7676d38f3", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/7e5d22447264fe8cd5e89326f31bb6f0db3f885b/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e5d22447264fe8cd5e89326f31bb6f0db3f885b/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=7e5d22447264fe8cd5e89326f31bb6f0db3f885b", "patch": "@@ -287,7 +287,7 @@ fn type_param_predicates<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n \n         NodeForeignItem(item) => {\n             match item.node {\n-                ForeignItemFn(_, _, ref generics) => generics,\n+                ForeignItemKind::Fn(_, _, ref generics) => generics,\n                 _ => return result\n             }\n         }\n@@ -375,7 +375,7 @@ fn convert_item<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, item_id: ast::NodeId) {\n                 tcx.generics_of(def_id);\n                 tcx.type_of(def_id);\n                 tcx.predicates_of(def_id);\n-                if let hir::ForeignItemFn(..) = item.node {\n+                if let hir::ForeignItemKind::Fn(..) = item.node {\n                     tcx.fn_sig(def_id);\n                 }\n             }\n@@ -774,7 +774,7 @@ fn has_late_bound_regions<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n             _ => None,\n         },\n         hir_map::NodeForeignItem(item) => match item.node {\n-            hir::ForeignItemFn(ref fn_decl, _, ref generics) =>\n+            hir::ForeignItemKind::Fn(ref fn_decl, _, ref generics) =>\n                 has_late_bound_regions(tcx, generics, fn_decl),\n             _ => None,\n         },\n@@ -869,9 +869,9 @@ fn generics_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n \n         NodeForeignItem(item) => {\n             match item.node {\n-                ForeignItemStatic(..) => &no_generics,\n-                ForeignItemFn(_, _, ref generics) => generics,\n-                ForeignItemType => &no_generics,\n+                ForeignItemKind::Static(..) => &no_generics,\n+                ForeignItemKind::Fn(_, _, ref generics) => generics,\n+                ForeignItemKind::Type => &no_generics,\n             }\n         }\n \n@@ -1080,12 +1080,12 @@ fn type_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n \n         NodeForeignItem(foreign_item) => {\n             match foreign_item.node {\n-                ForeignItemFn(..) => {\n+                ForeignItemKind::Fn(..) => {\n                     let substs = Substs::identity_for_item(tcx, def_id);\n                     tcx.mk_fn_def(def_id, substs)\n                 }\n-                ForeignItemStatic(ref t, _) => icx.to_ty(t),\n-                ForeignItemType => tcx.mk_foreign(def_id),\n+                ForeignItemKind::Static(ref t, _) => icx.to_ty(t),\n+                ForeignItemKind::Type => tcx.mk_foreign(def_id),\n             }\n         }\n \n@@ -1169,7 +1169,7 @@ fn fn_sig<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n             AstConv::ty_of_fn(&icx, header.unsafety, header.abi, decl)\n         }\n \n-        NodeForeignItem(&hir::ForeignItem { node: ForeignItemFn(ref fn_decl, _, _), .. }) => {\n+        NodeForeignItem(&hir::ForeignItem { node: ForeignItemKind::Fn(ref fn_decl, _, _), .. }) => {\n             let abi = tcx.hir.get_foreign_abi(node_id);\n             compute_sig_of_foreign_fn_decl(tcx, def_id, fn_decl, abi)\n         }\n@@ -1412,9 +1412,9 @@ fn explicit_predicates_of<'a, 'tcx>(\n \n         NodeForeignItem(item) => {\n             match item.node {\n-                ForeignItemStatic(..) => &no_generics,\n-                ForeignItemFn(_, _, ref generics) => generics,\n-                ForeignItemType => &no_generics,\n+                ForeignItemKind::Static(..) => &no_generics,\n+                ForeignItemKind::Fn(_, _, ref generics) => generics,\n+                ForeignItemKind::Type => &no_generics,\n             }\n         }\n "}, {"sha": "b346dffdb462b612834ec8ff4e978937d43ea1bd", "filename": "src/librustc_typeck/variance/constraints.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7e5d22447264fe8cd5e89326f31bb6f0db3f885b/src%2Flibrustc_typeck%2Fvariance%2Fconstraints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e5d22447264fe8cd5e89326f31bb6f0db3f885b/src%2Flibrustc_typeck%2Fvariance%2Fconstraints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fvariance%2Fconstraints.rs?ref=7e5d22447264fe8cd5e89326f31bb6f0db3f885b", "patch": "@@ -105,7 +105,7 @@ impl<'a, 'tcx, 'v> ItemLikeVisitor<'v> for ConstraintContext<'a, 'tcx> {\n \n             hir::ItemForeignMod(ref foreign_mod) => {\n                 for foreign_item in &foreign_mod.items {\n-                    if let hir::ForeignItemFn(..) = foreign_item.node {\n+                    if let hir::ForeignItemKind::Fn(..) = foreign_item.node {\n                         self.visit_node_helper(foreign_item.id);\n                     }\n                 }"}, {"sha": "29c7ee757ca70c89f0cd7b9ae10dfe6bc6981f08", "filename": "src/librustc_typeck/variance/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7e5d22447264fe8cd5e89326f31bb6f0db3f885b/src%2Flibrustc_typeck%2Fvariance%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e5d22447264fe8cd5e89326f31bb6f0db3f885b/src%2Flibrustc_typeck%2Fvariance%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fvariance%2Fmod.rs?ref=7e5d22447264fe8cd5e89326f31bb6f0db3f885b", "patch": "@@ -83,7 +83,7 @@ fn variances_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, item_def_id: DefId)\n         },\n \n         hir::map::NodeForeignItem(item) => match item.node {\n-            hir::ForeignItemFn(..) => {}\n+            hir::ForeignItemKind::Fn(..) => {}\n \n             _ => unsupported()\n         },"}, {"sha": "1de7bf57422042394ec00f7b7cfef619582b66cf", "filename": "src/librustc_typeck/variance/terms.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7e5d22447264fe8cd5e89326f31bb6f0db3f885b/src%2Flibrustc_typeck%2Fvariance%2Fterms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e5d22447264fe8cd5e89326f31bb6f0db3f885b/src%2Flibrustc_typeck%2Fvariance%2Fterms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fvariance%2Fterms.rs?ref=7e5d22447264fe8cd5e89326f31bb6f0db3f885b", "patch": "@@ -167,7 +167,7 @@ impl<'a, 'tcx, 'v> ItemLikeVisitor<'v> for TermsContext<'a, 'tcx> {\n \n             hir::ItemForeignMod(ref foreign_mod) => {\n                 for foreign_item in &foreign_mod.items {\n-                    if let hir::ForeignItemFn(..) = foreign_item.node {\n+                    if let hir::ForeignItemKind::Fn(..) = foreign_item.node {\n                         self.add_inferreds_for_item(foreign_item.id);\n                     }\n                 }"}, {"sha": "021dc6d3418a9be6e67d1fcffdbc2bb7543241ef", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7e5d22447264fe8cd5e89326f31bb6f0db3f885b/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e5d22447264fe8cd5e89326f31bb6f0db3f885b/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=7e5d22447264fe8cd5e89326f31bb6f0db3f885b", "patch": "@@ -4018,7 +4018,7 @@ impl Clean<Vec<Item>> for hir::ForeignMod {\n impl Clean<Item> for hir::ForeignItem {\n     fn clean(&self, cx: &DocContext) -> Item {\n         let inner = match self.node {\n-            hir::ForeignItemFn(ref decl, ref names, ref generics) => {\n+            hir::ForeignItemKind::Fn(ref decl, ref names, ref generics) => {\n                 let (generics, decl) = enter_impl_trait(cx, || {\n                     (generics.clean(cx), (&**decl, &names[..]).clean(cx))\n                 });\n@@ -4033,14 +4033,14 @@ impl Clean<Item> for hir::ForeignItem {\n                     },\n                 })\n             }\n-            hir::ForeignItemStatic(ref ty, mutbl) => {\n+            hir::ForeignItemKind::Static(ref ty, mutbl) => {\n                 ForeignStaticItem(Static {\n                     type_: ty.clean(cx),\n                     mutability: if mutbl {Mutable} else {Immutable},\n                     expr: \"\".to_string(),\n                 })\n             }\n-            hir::ForeignItemType => {\n+            hir::ForeignItemKind::Type => {\n                 ForeignTypeItem\n             }\n         };"}]}