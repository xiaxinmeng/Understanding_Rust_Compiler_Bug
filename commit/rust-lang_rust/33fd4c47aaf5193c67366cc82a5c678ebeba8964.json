{"sha": "33fd4c47aaf5193c67366cc82a5c678ebeba8964", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMzZmQ0YzQ3YWFmNTE5M2M2NzM2NmNjODJhNWM2NzhlYmViYTg5NjQ=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-03-27T15:42:28Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-03-27T15:42:28Z"}, "message": "Use 16bit simd indices", "tree": {"sha": "072c5bfa154c2298c4c21b8dde578b1c9769b4dc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/072c5bfa154c2298c4c21b8dde578b1c9769b4dc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/33fd4c47aaf5193c67366cc82a5c678ebeba8964", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/33fd4c47aaf5193c67366cc82a5c678ebeba8964", "html_url": "https://github.com/rust-lang/rust/commit/33fd4c47aaf5193c67366cc82a5c678ebeba8964", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/33fd4c47aaf5193c67366cc82a5c678ebeba8964/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d2c5b4be68850b86621e66b80c244cbeb425953d", "url": "https://api.github.com/repos/rust-lang/rust/commits/d2c5b4be68850b86621e66b80c244cbeb425953d", "html_url": "https://github.com/rust-lang/rust/commit/d2c5b4be68850b86621e66b80c244cbeb425953d"}], "stats": {"total": 36, "additions": 18, "deletions": 18}, "files": [{"sha": "2034d95cdacaaeaaab87c7bdf00acf80bead6c74", "filename": "src/intrinsics/mod.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/33fd4c47aaf5193c67366cc82a5c678ebeba8964/src%2Fintrinsics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33fd4c47aaf5193c67366cc82a5c678ebeba8964/src%2Fintrinsics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsics%2Fmod.rs?ref=33fd4c47aaf5193c67366cc82a5c678ebeba8964", "patch": "@@ -141,10 +141,10 @@ macro atomic_minmax($fx:expr, $cc:expr, <$T:ident> ($ptr:ident, $src:ident) -> $\n fn lane_type_and_count<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     layout: TyLayout<'tcx>,\n-) -> (TyLayout<'tcx>, u32) {\n+) -> (TyLayout<'tcx>, u16) {\n     assert!(layout.ty.is_simd());\n     let lane_count = match layout.fields {\n-        layout::FieldPlacement::Array { stride: _, count } => u32::try_from(count).unwrap(),\n+        layout::FieldPlacement::Array { stride: _, count } => u16::try_from(count).unwrap(),\n         _ => unreachable!(\"lane_type_and_count({:?})\", layout),\n     };\n     let lane_layout = layout.field(&ty::layout::LayoutCx {\n@@ -264,19 +264,19 @@ macro simd_cmp {\n \n             $ret.write_cvalue($fx, CValue::by_val(val, $ret.layout()));\n         } else {\n-        simd_pair_for_each_lane(\n-            $fx,\n-            $x,\n-            $y,\n-            $ret,\n-            |fx, lane_layout, res_lane_layout, x_lane, y_lane| {\n-                let res_lane = match lane_layout.ty.kind {\n-                    ty::Uint(_) | ty::Int(_) => codegen_icmp(fx, IntCC::$cc, x_lane, y_lane),\n-                    _ => unreachable!(\"{:?}\", lane_layout.ty),\n-                };\n-                bool_to_zero_or_max_uint(fx, res_lane_layout, res_lane)\n-            },\n-        );\n+            simd_pair_for_each_lane(\n+                $fx,\n+                $x,\n+                $y,\n+                $ret,\n+                |fx, lane_layout, res_lane_layout, x_lane, y_lane| {\n+                    let res_lane = match lane_layout.ty.kind {\n+                        ty::Uint(_) | ty::Int(_) => codegen_icmp(fx, IntCC::$cc, x_lane, y_lane),\n+                        _ => unreachable!(\"{:?}\", lane_layout.ty),\n+                    };\n+                    bool_to_zero_or_max_uint(fx, res_lane_layout, res_lane)\n+                },\n+            );\n         }\n     },\n     ($fx:expr, $cc_u:ident|$cc_s:ident($x:ident, $y:ident) -> $ret:ident) => {"}, {"sha": "d5c618a604ddbe4ba746c714d35867e163d70da4", "filename": "src/intrinsics/simd.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/33fd4c47aaf5193c67366cc82a5c678ebeba8964/src%2Fintrinsics%2Fsimd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33fd4c47aaf5193c67366cc82a5c678ebeba8964/src%2Fintrinsics%2Fsimd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsics%2Fsimd.rs?ref=33fd4c47aaf5193c67366cc82a5c678ebeba8964", "patch": "@@ -53,7 +53,7 @@ pub(super) fn codegen_simd_intrinsic_call<'tcx>(\n \n         // simd_shuffle32<T, U>(x: T, y: T, idx: [u32; 32]) -> U\n         _ if intrinsic.starts_with(\"simd_shuffle\"), (c x, c y, o idx) {\n-            let n: u32 = intrinsic[\"simd_shuffle\".len()..].parse().unwrap();\n+            let n: u16 = intrinsic[\"simd_shuffle\".len()..].parse().unwrap();\n \n             assert_eq!(x.layout(), y.layout());\n             let layout = x.layout();\n@@ -85,8 +85,8 @@ pub(super) fn codegen_simd_intrinsic_call<'tcx>(\n                         fx.tcx.data_layout.endian,\n                         &idx_bytes[4*i.. 4*i + 4],\n                     ).expect(\"read_target_uint\");\n-                    u32::try_from(idx).expect(\"try_from u32\")\n-                }).collect::<Vec<u32>>()\n+                    u16::try_from(idx).expect(\"try_from u32\")\n+                }).collect::<Vec<u16>>()\n             };\n \n             for &idx in &indexes {"}]}