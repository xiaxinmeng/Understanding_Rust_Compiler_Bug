{"sha": "dadc71704106a39aeba9e50f4103416bcaa453ff", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRhZGM3MTcwNDEwNmEzOWFlYmE5ZTUwZjQxMDM0MTZiY2FhNDUzZmY=", "commit": {"author": {"name": "Alisdair Owens", "email": "awo101@zepler.net", "date": "2015-07-21T11:03:21Z"}, "committer": {"name": "Alisdair Owens", "email": "awo101@zepler.net", "date": "2015-08-08T19:17:03Z"}, "message": "add long diagnostics for E0382", "tree": {"sha": "f2d9c88098b2f8ae583a076f123c9ed1447c64b6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f2d9c88098b2f8ae583a076f123c9ed1447c64b6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dadc71704106a39aeba9e50f4103416bcaa453ff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dadc71704106a39aeba9e50f4103416bcaa453ff", "html_url": "https://github.com/rust-lang/rust/commit/dadc71704106a39aeba9e50f4103416bcaa453ff", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dadc71704106a39aeba9e50f4103416bcaa453ff/comments", "author": {"login": "AlisdairO", "id": 6296622, "node_id": "MDQ6VXNlcjYyOTY2MjI=", "avatar_url": "https://avatars.githubusercontent.com/u/6296622?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AlisdairO", "html_url": "https://github.com/AlisdairO", "followers_url": "https://api.github.com/users/AlisdairO/followers", "following_url": "https://api.github.com/users/AlisdairO/following{/other_user}", "gists_url": "https://api.github.com/users/AlisdairO/gists{/gist_id}", "starred_url": "https://api.github.com/users/AlisdairO/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AlisdairO/subscriptions", "organizations_url": "https://api.github.com/users/AlisdairO/orgs", "repos_url": "https://api.github.com/users/AlisdairO/repos", "events_url": "https://api.github.com/users/AlisdairO/events{/privacy}", "received_events_url": "https://api.github.com/users/AlisdairO/received_events", "type": "User", "site_admin": false}, "committer": {"login": "AlisdairO", "id": 6296622, "node_id": "MDQ6VXNlcjYyOTY2MjI=", "avatar_url": "https://avatars.githubusercontent.com/u/6296622?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AlisdairO", "html_url": "https://github.com/AlisdairO", "followers_url": "https://api.github.com/users/AlisdairO/followers", "following_url": "https://api.github.com/users/AlisdairO/following{/other_user}", "gists_url": "https://api.github.com/users/AlisdairO/gists{/gist_id}", "starred_url": "https://api.github.com/users/AlisdairO/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AlisdairO/subscriptions", "organizations_url": "https://api.github.com/users/AlisdairO/orgs", "repos_url": "https://api.github.com/users/AlisdairO/repos", "events_url": "https://api.github.com/users/AlisdairO/events{/privacy}", "received_events_url": "https://api.github.com/users/AlisdairO/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "920cf4b4b2cc9a061b14c49c8dcd0af4e4e19845", "url": "https://api.github.com/repos/rust-lang/rust/commits/920cf4b4b2cc9a061b14c49c8dcd0af4e4e19845", "html_url": "https://github.com/rust-lang/rust/commit/920cf4b4b2cc9a061b14c49c8dcd0af4e4e19845"}], "stats": {"total": 64, "additions": 63, "deletions": 1}, "files": [{"sha": "66865fcd97a90cfa8cac28cccff82410755883ad", "filename": "src/librustc_borrowck/diagnostics.rs", "status": "modified", "additions": 63, "deletions": 1, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/dadc71704106a39aeba9e50f4103416bcaa453ff/src%2Flibrustc_borrowck%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dadc71704106a39aeba9e50f4103416bcaa453ff/src%2Flibrustc_borrowck%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fdiagnostics.rs?ref=dadc71704106a39aeba9e50f4103416bcaa453ff", "patch": "@@ -75,6 +75,69 @@ To fix this, ensure that any declared variables are initialized before being\n used.\n \"##,\n \n+E0382: r##\"\n+This error occurs when an attempt is made to use a variable after its contents\n+have been moved elsewhere. For example:\n+\n+```\n+struct MyStruct { s: u32 }\n+\n+fn main() {\n+    let mut x = MyStruct{ s: 5u32 };\n+    let y = x;\n+    x.s = 6;\n+    println!(\"{}\", x.s);\n+}\n+```\n+\n+Since `MyStruct` is a type that is not marked `Copy`, the data gets moved out\n+of `x` when we set `y`. This is fundamental to Rust's ownership system: outside\n+of workarounds like `Rc`, a value cannot be owned by more than one variable.\n+\n+If we own the type, the easiest way to address this problem is to implement\n+`Copy` and `Clone` on it, as shown below. This allows `y` to copy the\n+information in `x`, while leaving the original version owned by `x`. Subsequent\n+changes to `x` will not be reflected when accessing `y`.\n+\n+```\n+#[derive(Copy, Clone)]\n+struct MyStruct { s: u32 }\n+\n+fn main() {\n+    let mut x = MyStruct{ s: 5u32 };\n+    let y = x;\n+    x.s = 6;\n+    println!(\"{}\", x.s);\n+}\n+```\n+\n+Alternatively, if we don't control the struct's definition, or mutable shared\n+ownership is truly required, we can use `Rc` and `RefCell`:\n+\n+```\n+use std::cell::RefCell;\n+use std::rc::Rc;\n+\n+struct MyStruct { s: u32 }\n+\n+fn main() {\n+    let mut x = Rc::new(RefCell::new(MyStruct{ s: 5u32 }));\n+    let y = x.clone();\n+    x.borrow_mut().s = 6;\n+    println!(\"{}\", x.borrow.s);\n+}\n+```\n+\n+With this approach, x and y share ownership of the data via the `Rc` (reference\n+count type). `RefCell` essentially performs runtime borrow checking: ensuring\n+that at most one writer or multiple readers can access the data at any one time.\n+\n+If you wish to learn more about ownership in Rust, start with the chapter in the\n+Book:\n+\n+https://doc.rust-lang.org/book/ownership.html\n+\"##,\n+\n E0384: r##\"\n This error occurs when an attempt is made to reassign an immutable variable.\n For example:\n@@ -100,7 +163,6 @@ fn main(){\n }\n \n register_diagnostics! {\n-    E0382, // use of partially/collaterally moved value\n     E0383, // partial reinitialization of uninitialized structure\n     E0385, // {} in an aliasable location\n     E0386, // {} in an immutable container"}]}