{"sha": "886f1f87f7fa7d5700d29eaa4763a90bc57b08f2", "node_id": "C_kwDOAAsO6NoAKDg4NmYxZjg3ZjdmYTdkNTcwMGQyOWVhYTQ3NjNhOTBiYzU3YjA4ZjI", "commit": {"author": {"name": "Chris Palmer", "email": "chris@noncombatant.org", "date": "2021-10-20T03:23:34Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-10-20T03:23:34Z"}, "message": "Fix minor typos", "tree": {"sha": "3728a9a5723c8b5da61524ea7349b5383c03d0b9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3728a9a5723c8b5da61524ea7349b5383c03d0b9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/886f1f87f7fa7d5700d29eaa4763a90bc57b08f2", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhb4u2CRBK7hj4Ov3rIwAAKNoIABqG0TuukqSvIe+88rcha8Id\npteB3uZI6FMk/c28qhKdqH3anLQi5809dtGYoc2bF5+zCMTbFVaCGJVgXA8TVpBl\nXIbT39jSeQJpqJfqyOrci5YQ2qnr6oDZ2YXHMZoArsBj0jaVxlJpxbpTpXGBZe/j\nB8wBkRsTI1bSrT6qRBCQUvBPe7ttT5y1fxwSAmVbIoQRLyuoDcwdKX08Cpy5JFBC\nTiA2zi1gU8qUDxUWRmxbcwZ4jlUlkD9mIaS++psUuzH/sXqLS+1+noO1hKzrus4+\nve63hKfCccTdLB16a3BspS0fvEKTHSC4smZuIzpckZi415FdZu/2JpWE3K5iGhg=\n=Zu5n\n-----END PGP SIGNATURE-----\n", "payload": "tree 3728a9a5723c8b5da61524ea7349b5383c03d0b9\nparent 42983a28ab3c70728da7a9b932b667c978dd898d\nauthor Chris Palmer <chris@noncombatant.org> 1634700214 -0700\ncommitter GitHub <noreply@github.com> 1634700214 -0700\n\nFix minor typos"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/886f1f87f7fa7d5700d29eaa4763a90bc57b08f2", "html_url": "https://github.com/rust-lang/rust/commit/886f1f87f7fa7d5700d29eaa4763a90bc57b08f2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/886f1f87f7fa7d5700d29eaa4763a90bc57b08f2/comments", "author": null, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "42983a28ab3c70728da7a9b932b667c978dd898d", "url": "https://api.github.com/repos/rust-lang/rust/commits/42983a28ab3c70728da7a9b932b667c978dd898d", "html_url": "https://github.com/rust-lang/rust/commit/42983a28ab3c70728da7a9b932b667c978dd898d"}], "stats": {"total": 4, "additions": 2, "deletions": 2}, "files": [{"sha": "bd7234522e1fec2f73d130aa6b8b1e7102de3a0c", "filename": "src/doc/unstable-book/src/library-features/asm.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/886f1f87f7fa7d5700d29eaa4763a90bc57b08f2/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fasm.md", "raw_url": "https://github.com/rust-lang/rust/raw/886f1f87f7fa7d5700d29eaa4763a90bc57b08f2/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fasm.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fasm.md?ref=886f1f87f7fa7d5700d29eaa4763a90bc57b08f2", "patch": "@@ -66,7 +66,7 @@ assert_eq!(x, 5);\n This will write the value `5` into the `u64` variable `x`.\n You can see that the string literal we use to specify instructions is actually a template string.\n It is governed by the same rules as Rust [format strings][format-syntax].\n-The arguments that are inserted into the template however look a bit different then you may\n+The arguments that are inserted into the template however look a bit different than you may\n be familiar with. First we need to specify if the variable is an input or an output of the\n inline assembly. In this case it is an output. We declared this by writing `out`.\n We also need to specify in what kind of register the assembly expects the variable.\n@@ -106,7 +106,7 @@ code.\n Second, we can see that inputs are declared by writing `in` instead of `out`.\n \n Third, one of our operands has a type we haven't seen yet, `const`.\n-This tells the compiler to expand this argument to value directly inside the assembly template.\n+This tells the compiler to expand this argument to a value directly inside the assembly template.\n This is only possible for constants and literals.\n \n Fourth, we can see that we can specify an argument number, or name as in any format string."}]}