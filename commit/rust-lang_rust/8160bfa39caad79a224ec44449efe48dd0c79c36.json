{"sha": "8160bfa39caad79a224ec44449efe48dd0c79c36", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgxNjBiZmEzOWNhYWQ3OWEyMjRlYzQ0NDQ5ZWZlNDhkZDBjNzljMzY=", "commit": {"author": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-10-05T06:49:21Z"}, "committer": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-10-05T06:49:21Z"}, "message": "query_name_of_opt_const_arg -> query_name_opt_const_arg", "tree": {"sha": "3b175b2401cd7493a7ec324c99294d575ed3f04d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3b175b2401cd7493a7ec324c99294d575ed3f04d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8160bfa39caad79a224ec44449efe48dd0c79c36", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8160bfa39caad79a224ec44449efe48dd0c79c36", "html_url": "https://github.com/rust-lang/rust/commit/8160bfa39caad79a224ec44449efe48dd0c79c36", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8160bfa39caad79a224ec44449efe48dd0c79c36/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "536674fb69ea161f50f68f3fdb65950feffd92a4", "url": "https://api.github.com/repos/rust-lang/rust/commits/536674fb69ea161f50f68f3fdb65950feffd92a4", "html_url": "https://github.com/rust-lang/rust/commit/536674fb69ea161f50f68f3fdb65950feffd92a4"}], "stats": {"total": 20, "additions": 10, "deletions": 10}, "files": [{"sha": "b5cdd7edb8dbabfaf10fe9c7452fec58f7f68fb2", "filename": "compiler/rustc_middle/src/mir/query.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8160bfa39caad79a224ec44449efe48dd0c79c36/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8160bfa39caad79a224ec44449efe48dd0c79c36/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fquery.rs?ref=8160bfa39caad79a224ec44449efe48dd0c79c36", "patch": "@@ -438,7 +438,7 @@ impl<'tcx> TyCtxt<'tcx> {\n     }\n \n     #[inline]\n-    pub fn promoted_mir_of_opt_const_arg(\n+    pub fn promoted_mir_opt_const_arg(\n         self,\n         def: ty::WithOptConstParam<DefId>,\n     ) -> &'tcx IndexVec<Promoted, Body<'tcx>> {\n@@ -450,7 +450,7 @@ impl<'tcx> TyCtxt<'tcx> {\n     }\n \n     #[inline]\n-    pub fn optimized_mir_of_opt_const_arg(\n+    pub fn optimized_mir_opt_const_arg(\n         self,\n         def: ty::WithOptConstParam<DefId>,\n     ) -> &'tcx Body<'tcx> {\n@@ -462,7 +462,7 @@ impl<'tcx> TyCtxt<'tcx> {\n     }\n \n     #[inline]\n-    pub fn mir_abstract_const_of_opt_const_arg(\n+    pub fn mir_abstract_const_opt_const_arg(\n         self,\n         def: ty::WithOptConstParam<DefId>,\n     ) -> Result<Option<&'tcx [abstract_const::Node<'tcx>]>, ErrorReported> {"}, {"sha": "ff78d43ef2a92231aa441f11d10ef4c6d535126b", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8160bfa39caad79a224ec44449efe48dd0c79c36/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8160bfa39caad79a224ec44449efe48dd0c79c36/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=8160bfa39caad79a224ec44449efe48dd0c79c36", "patch": "@@ -2953,7 +2953,7 @@ impl<'tcx> TyCtxt<'tcx> {\n     /// Returns the possibly-auto-generated MIR of a `(DefId, Subst)` pair.\n     pub fn instance_mir(self, instance: ty::InstanceDef<'tcx>) -> &'tcx Body<'tcx> {\n         match instance {\n-            ty::InstanceDef::Item(def) => self.optimized_mir_of_opt_const_arg(def),\n+            ty::InstanceDef::Item(def) => self.optimized_mir_opt_const_arg(def),\n             ty::InstanceDef::VtableShim(..)\n             | ty::InstanceDef::ReifyShim(..)\n             | ty::InstanceDef::Intrinsic(..)"}, {"sha": "6ef73b04238d4d00cd88587a1c54b9df26b0092e", "filename": "compiler/rustc_mir/src/const_eval/eval_queries.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8160bfa39caad79a224ec44449efe48dd0c79c36/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Feval_queries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8160bfa39caad79a224ec44449efe48dd0c79c36/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Feval_queries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Feval_queries.rs?ref=8160bfa39caad79a224ec44449efe48dd0c79c36", "patch": "@@ -343,7 +343,7 @@ pub fn eval_to_allocation_raw_provider<'tcx>(\n                     // deny-by-default lint\n                     _ => {\n                         if let Some(p) = cid.promoted {\n-                            let span = tcx.promoted_mir_of_opt_const_arg(def.to_global())[p].span;\n+                            let span = tcx.promoted_mir_opt_const_arg(def.to_global())[p].span;\n                             if let err_inval!(ReferencedConstant) = err.error {\n                                 Err(err.report_as_error(\n                                     tcx.at(span),"}, {"sha": "ec1195d3703b449586750767eb3b6c49fcce718d", "filename": "compiler/rustc_mir/src/interpret/eval_context.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8160bfa39caad79a224ec44449efe48dd0c79c36/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8160bfa39caad79a224ec44449efe48dd0c79c36/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Feval_context.rs?ref=8160bfa39caad79a224ec44449efe48dd0c79c36", "patch": "@@ -477,12 +477,12 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         }\n         trace!(\"load mir(instance={:?}, promoted={:?})\", instance, promoted);\n         if let Some(promoted) = promoted {\n-            return Ok(&self.tcx.promoted_mir_of_opt_const_arg(def)[promoted]);\n+            return Ok(&self.tcx.promoted_mir_opt_const_arg(def)[promoted]);\n         }\n         match instance {\n             ty::InstanceDef::Item(def) => {\n                 if self.tcx.is_mir_available(def.did) {\n-                    Ok(self.tcx.optimized_mir_of_opt_const_arg(def))\n+                    Ok(self.tcx.optimized_mir_opt_const_arg(def))\n                 } else {\n                     throw_unsup!(NoMirFor(def.did))\n                 }"}, {"sha": "79c56af4f67fb4a92b6712246431d4ab67912f5c", "filename": "compiler/rustc_mir/src/transform/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8160bfa39caad79a224ec44449efe48dd0c79c36/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8160bfa39caad79a224ec44449efe48dd0c79c36/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fmod.rs?ref=8160bfa39caad79a224ec44449efe48dd0c79c36", "patch": "@@ -332,7 +332,7 @@ fn mir_promoted(\n     // this point, before we steal the mir-const result.\n     // Also this means promotion can rely on all const checks having been done.\n     let _ = tcx.mir_const_qualif_opt_const_arg(def);\n-    let _ = tcx.mir_abstract_const_of_opt_const_arg(def.to_global());\n+    let _ = tcx.mir_abstract_const_opt_const_arg(def.to_global());\n     let mut body = tcx.mir_const(def).steal();\n \n     let mut required_consts = Vec::new();"}, {"sha": "1e1eb16faf407a8efb1b57aa464b0bfeb3bec572", "filename": "compiler/rustc_trait_selection/src/traits/const_evaluatable.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8160bfa39caad79a224ec44449efe48dd0c79c36/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8160bfa39caad79a224ec44449efe48dd0c79c36/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs?ref=8160bfa39caad79a224ec44449efe48dd0c79c36", "patch": "@@ -147,7 +147,7 @@ pub fn is_const_evaluatable<'cx, 'tcx>(\n     if concrete.is_ok() && substs.has_param_types_or_consts() {\n         match infcx.tcx.def_kind(def.did) {\n             DefKind::AnonConst => {\n-                let mir_body = infcx.tcx.optimized_mir_of_opt_const_arg(def);\n+                let mir_body = infcx.tcx.optimized_mir_opt_const_arg(def);\n \n                 if mir_body.is_polymorphic {\n                     future_compat_lint();\n@@ -208,7 +208,7 @@ impl AbstractConst<'tcx> {\n         def: ty::WithOptConstParam<DefId>,\n         substs: SubstsRef<'tcx>,\n     ) -> Result<Option<AbstractConst<'tcx>>, ErrorReported> {\n-        let inner = tcx.mir_abstract_const_of_opt_const_arg(def)?;\n+        let inner = tcx.mir_abstract_const_opt_const_arg(def)?;\n         Ok(inner.map(|inner| AbstractConst { inner, substs }))\n     }\n "}]}