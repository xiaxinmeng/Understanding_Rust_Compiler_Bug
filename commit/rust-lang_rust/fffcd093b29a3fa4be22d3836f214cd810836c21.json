{"sha": "fffcd093b29a3fa4be22d3836f214cd810836c21", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZmZmNkMDkzYjI5YTNmYTRiZTIyZDM4MzZmMjE0Y2Q4MTA4MzZjMjE=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2018-10-02T10:41:40Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2018-10-02T10:49:27Z"}, "message": "relicensing: Remove fn_to_numeric_cast, fn_to_numeric_cast_with_truncation\n\nThis removes the code added in https://github.com/rust-lang-nursery/rust-clippy/pull/2814", "tree": {"sha": "0283408e0951be913271765f6de48a02e82d0d35", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0283408e0951be913271765f6de48a02e82d0d35"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fffcd093b29a3fa4be22d3836f214cd810836c21", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fffcd093b29a3fa4be22d3836f214cd810836c21", "html_url": "https://github.com/rust-lang/rust/commit/fffcd093b29a3fa4be22d3836f214cd810836c21", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fffcd093b29a3fa4be22d3836f214cd810836c21/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "902aca70bda2716d08f4e08ae12084803f8bee78", "url": "https://api.github.com/repos/rust-lang/rust/commits/902aca70bda2716d08f4e08ae12084803f8bee78", "html_url": "https://github.com/rust-lang/rust/commit/902aca70bda2716d08f4e08ae12084803f8bee78"}], "stats": {"total": 159, "additions": 0, "deletions": 159}, "files": [{"sha": "19564dbf9bee5ac23bcd24e934fe82eb57b311f3", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fffcd093b29a3fa4be22d3836f214cd810836c21/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fffcd093b29a3fa4be22d3836f214cd810836c21/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=fffcd093b29a3fa4be22d3836f214cd810836c21", "patch": "@@ -697,8 +697,6 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry<'_>, conf: &Conf) {\n         types::CAST_LOSSLESS,\n         types::CAST_PTR_ALIGNMENT,\n         types::CHAR_LIT_AS_U8,\n-        types::FN_TO_NUMERIC_CAST,\n-        types::FN_TO_NUMERIC_CAST_WITH_TRUNCATION,\n         types::IMPLICIT_HASHER,\n         types::LET_UNIT_VALUE,\n         types::OPTION_OPTION,\n@@ -791,7 +789,6 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry<'_>, conf: &Conf) {\n         returns::LET_AND_RETURN,\n         returns::NEEDLESS_RETURN,\n         strings::STRING_LIT_AS_BYTES,\n-        types::FN_TO_NUMERIC_CAST,\n         types::IMPLICIT_HASHER,\n         types::LET_UNIT_VALUE,\n         unsafe_removed_from_name::UNSAFE_REMOVED_FROM_NAME,\n@@ -921,7 +918,6 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry<'_>, conf: &Conf) {\n         transmute::WRONG_TRANSMUTE,\n         types::ABSURD_EXTREME_COMPARISONS,\n         types::CAST_PTR_ALIGNMENT,\n-        types::FN_TO_NUMERIC_CAST_WITH_TRUNCATION,\n         types::UNIT_CMP,\n         unicode::ZERO_WIDTH_SPACE,\n         unused_io_amount::UNUSED_IO_AMOUNT,"}, {"sha": "b98a0f882420cd736d0f4e5ab3db477473a4a8ec", "filename": "clippy_lints/src/types.rs", "status": "modified", "additions": 0, "deletions": 67, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/fffcd093b29a3fa4be22d3836f214cd810836c21/clippy_lints%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fffcd093b29a3fa4be22d3836f214cd810836c21/clippy_lints%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes.rs?ref=fffcd093b29a3fa4be22d3836f214cd810836c21", "patch": "@@ -700,40 +700,6 @@ declare_clippy_lint! {\n     \"cast to the same type, e.g. `x as i32` where `x: i32`\"\n }\n \n-/// **What it does:** Checks for casts of a function pointer to a numeric type not enough to store address.\n-///\n-/// **Why is this bad?** Casting a function pointer to not eligible type could truncate the address value.\n-///\n-/// **Known problems:** None.\n-///\n-/// **Example:**\n-/// ```rust\n-/// fn test_fn() -> i16;\n-/// let _ = test_fn as i32\n-/// ```\n-declare_clippy_lint! {\n-    pub FN_TO_NUMERIC_CAST_WITH_TRUNCATION,\n-    correctness,\n-    \"cast function pointer to the numeric type with value truncation\"\n-}\n-\n-/// **What it does:** Checks for casts of a function pointer to a numeric type except `usize`.\n-///\n-/// **Why is this bad?** Casting a function pointer to something other than `usize` is not a good style.\n-///\n-/// **Known problems:** None.\n-///\n-/// **Example:**\n-/// ```rust\n-/// fn test_fn() -> i16;\n-/// let _ = test_fn as i128\n-/// ```\n-declare_clippy_lint! {\n-    pub FN_TO_NUMERIC_CAST,\n-    style,\n-    \"cast function pointer to the numeric type\"\n-}\n-\n /// **What it does:** Checks for casts from a less-strictly-aligned pointer to a\n /// more-strictly-aligned pointer\n ///\n@@ -947,8 +913,6 @@ impl LintPass for CastPass {\n             CAST_LOSSLESS,\n             UNNECESSARY_CAST,\n             CAST_PTR_ALIGNMENT,\n-            FN_TO_NUMERIC_CAST,\n-            FN_TO_NUMERIC_CAST_WITH_TRUNCATION,\n         )\n     }\n }\n@@ -1033,37 +997,6 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for CastPass {\n                 }\n             }\n \n-            match &cast_from.sty {\n-                ty::FnDef(..) |\n-                ty::FnPtr(..) => {\n-                    if cast_to.is_numeric() && cast_to.sty != ty::Uint(UintTy::Usize){\n-                        let to_nbits = int_ty_to_nbits(cast_to, cx.tcx);\n-                        let pointer_nbits = cx.tcx.data_layout.pointer_size.bits();\n-                        if to_nbits < pointer_nbits || (to_nbits == pointer_nbits && cast_to.is_signed()) {\n-                            span_lint_and_sugg(\n-                                cx,\n-                                FN_TO_NUMERIC_CAST_WITH_TRUNCATION,\n-                                expr.span,\n-                                &format!(\"casting a `{}` to `{}` may truncate the function address value.\", cast_from, cast_to),\n-                                \"if you need the address of the function, consider\",\n-                                format!(\"{} as usize\", &snippet(cx, ex.span, \"x\"))\n-                            );\n-                        } else {\n-                            span_lint_and_sugg(\n-                                cx,\n-                                FN_TO_NUMERIC_CAST,\n-                                expr.span,\n-                                &format!(\"casting a `{}` to `{}` is bad style.\", cast_from, cast_to),\n-                                \"if you need the address of the function, consider\",\n-                                format!(\"{} as usize\", &snippet(cx, ex.span, \"x\"))\n-                            );\n-\n-                        };\n-                    }\n-                }\n-                _ => ()\n-            }\n-\n             if_chain!{\n                 if let ty::RawPtr(from_ptr_ty) = &cast_from.sty;\n                 if let ty::RawPtr(to_ptr_ty) = &cast_to.sty;"}, {"sha": "8387586c3e94a9ad30ab697a01d1d1c05b2dde93", "filename": "tests/ui/types_fn_to_int.rs", "status": "removed", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/902aca70bda2716d08f4e08ae12084803f8bee78/tests%2Fui%2Ftypes_fn_to_int.rs", "raw_url": "https://github.com/rust-lang/rust/raw/902aca70bda2716d08f4e08ae12084803f8bee78/tests%2Fui%2Ftypes_fn_to_int.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftypes_fn_to_int.rs?ref=902aca70bda2716d08f4e08ae12084803f8bee78", "patch": "@@ -1,22 +0,0 @@\n-enum Foo {\n-    A(usize),\n-    B\n-}\n-\n-fn bar() -> i32 {\n-    0i32\n-}\n-\n-fn main() {\n-    let x = Foo::A;\n-    let _y = x as i32;\n-    let _y1 = Foo::A as i32;\n-    let _y = x as u32;\n-    let _z = bar as u32;\n-    let _y = bar as i64;\n-    let _y = bar as u64;\n-    let _z = Foo::A as i128;\n-    let _z = Foo::A as u128;\n-    let _z = bar as i128;\n-    let _z = bar as u128;\n-}"}, {"sha": "a06809b9bfd6d1a7fe3e033a39b6c689d38dee77", "filename": "tests/ui/types_fn_to_int.stderr", "status": "removed", "additions": 0, "deletions": 66, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/902aca70bda2716d08f4e08ae12084803f8bee78/tests%2Fui%2Ftypes_fn_to_int.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/902aca70bda2716d08f4e08ae12084803f8bee78/tests%2Fui%2Ftypes_fn_to_int.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftypes_fn_to_int.stderr?ref=902aca70bda2716d08f4e08ae12084803f8bee78", "patch": "@@ -1,66 +0,0 @@\n-error: casting a `fn(usize) -> Foo {Foo::A}` to `i32` may truncate the function address value.\n-  --> $DIR/types_fn_to_int.rs:12:14\n-   |\n-12 |     let _y = x as i32;\n-   |              ^^^^^^^^ help: if you need the address of the function, consider: `x as usize`\n-   |\n-   = note: #[deny(clippy::fn_to_numeric_cast_with_truncation)] on by default\n-\n-error: casting a `fn(usize) -> Foo {Foo::A}` to `i32` may truncate the function address value.\n-  --> $DIR/types_fn_to_int.rs:13:15\n-   |\n-13 |     let _y1 = Foo::A as i32;\n-   |               ^^^^^^^^^^^^^ help: if you need the address of the function, consider: `Foo::A as usize`\n-\n-error: casting a `fn(usize) -> Foo {Foo::A}` to `u32` may truncate the function address value.\n-  --> $DIR/types_fn_to_int.rs:14:14\n-   |\n-14 |     let _y = x as u32;\n-   |              ^^^^^^^^ help: if you need the address of the function, consider: `x as usize`\n-\n-error: casting a `fn() -> i32 {bar}` to `u32` may truncate the function address value.\n-  --> $DIR/types_fn_to_int.rs:15:14\n-   |\n-15 |     let _z = bar as u32;\n-   |              ^^^^^^^^^^ help: if you need the address of the function, consider: `bar as usize`\n-\n-error: casting a `fn() -> i32 {bar}` to `i64` may truncate the function address value.\n-  --> $DIR/types_fn_to_int.rs:16:14\n-   |\n-16 |     let _y = bar as i64;\n-   |              ^^^^^^^^^^ help: if you need the address of the function, consider: `bar as usize`\n-\n-error: casting a `fn() -> i32 {bar}` to `u64` is bad style.\n-  --> $DIR/types_fn_to_int.rs:17:14\n-   |\n-17 |     let _y = bar as u64;\n-   |              ^^^^^^^^^^ help: if you need the address of the function, consider: `bar as usize`\n-   |\n-   = note: `-D clippy::fn-to-numeric-cast` implied by `-D warnings`\n-\n-error: casting a `fn(usize) -> Foo {Foo::A}` to `i128` is bad style.\n-  --> $DIR/types_fn_to_int.rs:18:14\n-   |\n-18 |     let _z = Foo::A as i128;\n-   |              ^^^^^^^^^^^^^^ help: if you need the address of the function, consider: `Foo::A as usize`\n-\n-error: casting a `fn(usize) -> Foo {Foo::A}` to `u128` is bad style.\n-  --> $DIR/types_fn_to_int.rs:19:14\n-   |\n-19 |     let _z = Foo::A as u128;\n-   |              ^^^^^^^^^^^^^^ help: if you need the address of the function, consider: `Foo::A as usize`\n-\n-error: casting a `fn() -> i32 {bar}` to `i128` is bad style.\n-  --> $DIR/types_fn_to_int.rs:20:14\n-   |\n-20 |     let _z = bar as i128;\n-   |              ^^^^^^^^^^^ help: if you need the address of the function, consider: `bar as usize`\n-\n-error: casting a `fn() -> i32 {bar}` to `u128` is bad style.\n-  --> $DIR/types_fn_to_int.rs:21:14\n-   |\n-21 |     let _z = bar as u128;\n-   |              ^^^^^^^^^^^ help: if you need the address of the function, consider: `bar as usize`\n-\n-error: aborting due to 10 previous errors\n-"}]}