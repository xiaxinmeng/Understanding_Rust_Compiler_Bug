{"sha": "b4edda98495a672e472d9510399d6a2f680a0f26", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI0ZWRkYTk4NDk1YTY3MmU0NzJkOTUxMDM5OWQ2YTJmNjgwYTBmMjY=", "commit": {"author": {"name": "marmeladema", "email": "xademax@gmail.com", "date": "2020-04-12T18:20:07Z"}, "committer": {"name": "marmeladema", "email": "xademax@gmail.com", "date": "2020-04-12T20:01:55Z"}, "message": "Remove usage of `DUMMY_HIR_ID` in `CheckLoopVisitor`", "tree": {"sha": "659a7cb62a704e81d578ab59841e547980f5ed6f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/659a7cb62a704e81d578ab59841e547980f5ed6f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b4edda98495a672e472d9510399d6a2f680a0f26", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b4edda98495a672e472d9510399d6a2f680a0f26", "html_url": "https://github.com/rust-lang/rust/commit/b4edda98495a672e472d9510399d6a2f680a0f26", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b4edda98495a672e472d9510399d6a2f680a0f26/comments", "author": {"login": "marmeladema", "id": 1629419, "node_id": "MDQ6VXNlcjE2Mjk0MTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1629419?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marmeladema", "html_url": "https://github.com/marmeladema", "followers_url": "https://api.github.com/users/marmeladema/followers", "following_url": "https://api.github.com/users/marmeladema/following{/other_user}", "gists_url": "https://api.github.com/users/marmeladema/gists{/gist_id}", "starred_url": "https://api.github.com/users/marmeladema/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marmeladema/subscriptions", "organizations_url": "https://api.github.com/users/marmeladema/orgs", "repos_url": "https://api.github.com/users/marmeladema/repos", "events_url": "https://api.github.com/users/marmeladema/events{/privacy}", "received_events_url": "https://api.github.com/users/marmeladema/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marmeladema", "id": 1629419, "node_id": "MDQ6VXNlcjE2Mjk0MTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1629419?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marmeladema", "html_url": "https://github.com/marmeladema", "followers_url": "https://api.github.com/users/marmeladema/followers", "following_url": "https://api.github.com/users/marmeladema/following{/other_user}", "gists_url": "https://api.github.com/users/marmeladema/gists{/gist_id}", "starred_url": "https://api.github.com/users/marmeladema/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marmeladema/subscriptions", "organizations_url": "https://api.github.com/users/marmeladema/orgs", "repos_url": "https://api.github.com/users/marmeladema/repos", "events_url": "https://api.github.com/users/marmeladema/events{/privacy}", "received_events_url": "https://api.github.com/users/marmeladema/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "812854cdd313c0644534ce50b22d2a1c4fbe4957", "url": "https://api.github.com/repos/rust-lang/rust/commits/812854cdd313c0644534ce50b22d2a1c4fbe4957", "html_url": "https://github.com/rust-lang/rust/commit/812854cdd313c0644534ce50b22d2a1c4fbe4957"}], "stats": {"total": 16, "additions": 8, "deletions": 8}, "files": [{"sha": "23a605bef0cd322c8059a6ef27abde18e15cfc32", "filename": "src/librustc_passes/loops.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b4edda98495a672e472d9510399d6a2f680a0f26/src%2Flibrustc_passes%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4edda98495a672e472d9510399d6a2f680a0f26/src%2Flibrustc_passes%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Floops.rs?ref=b4edda98495a672e472d9510399d6a2f680a0f26", "patch": "@@ -77,31 +77,31 @@ impl<'a, 'hir> Visitor<'hir> for CheckLoopVisitor<'a, 'hir> {\n                 }\n \n                 let loop_id = match label.target_id {\n-                    Ok(loop_id) => loop_id,\n-                    Err(hir::LoopIdError::OutsideLoopScope) => hir::DUMMY_HIR_ID,\n+                    Ok(loop_id) => Some(loop_id),\n+                    Err(hir::LoopIdError::OutsideLoopScope) => None,\n                     Err(hir::LoopIdError::UnlabeledCfInWhileCondition) => {\n                         self.emit_unlabled_cf_in_while_condition(e.span, \"break\");\n-                        hir::DUMMY_HIR_ID\n+                        None\n                     }\n-                    Err(hir::LoopIdError::UnresolvedLabel) => hir::DUMMY_HIR_ID,\n+                    Err(hir::LoopIdError::UnresolvedLabel) => None,\n                 };\n \n-                if loop_id != hir::DUMMY_HIR_ID {\n+                if let Some(loop_id) = loop_id {\n                     if let Node::Block(_) = self.hir_map.find(loop_id).unwrap() {\n                         return;\n                     }\n                 }\n \n                 if opt_expr.is_some() {\n-                    let loop_kind = if loop_id == hir::DUMMY_HIR_ID {\n-                        None\n-                    } else {\n+                    let loop_kind = if let Some(loop_id) = loop_id {\n                         Some(match self.hir_map.expect_expr(loop_id).kind {\n                             hir::ExprKind::Loop(_, _, source) => source,\n                             ref r => {\n                                 span_bug!(e.span, \"break label resolved to a non-loop: {:?}\", r)\n                             }\n                         })\n+                    } else {\n+                        None\n                     };\n                     match loop_kind {\n                         None | Some(hir::LoopSource::Loop) => (),"}]}