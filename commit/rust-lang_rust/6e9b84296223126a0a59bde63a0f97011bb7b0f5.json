{"sha": "6e9b84296223126a0a59bde63a0f97011bb7b0f5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZlOWI4NDI5NjIyMzEyNmEwYTU5YmRlNjNhMGY5NzAxMWJiN2IwZjU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-11-10T19:58:14Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-11-10T19:58:14Z"}, "message": "Auto merge of #55650 - nikic:funnel-shift, r=nagisa\n\nImplement rotate using funnel shift on LLVM >= 7\n\nImplement the rotate_left and rotate_right operations using\nllvm.fshl and llvm.fshr if they are available (LLVM >= 7).\n\nOriginally I wanted to expose the funnel_shift_left and\nfunnel_shift_right intrinsics and implement rotate_left and\nrotate_right on top of them. However, emulation of funnel\nshifts requires emitting a conditional to check for zero shift\namount, which is not necessary for rotates. I was uncomfortable\ndoing that here, as I don't want to rely on LLVM to optimize\naway that conditional (and for variable rotates, I'm not sure it\ncan). We should revisit that question when we raise our minimum\nversion requirement to LLVM 7 and don't need emulation code\nanymore.\n\nFixes #52457.", "tree": {"sha": "5c9fdd5de3e7e7c4f1d1b82344deaa9d1ae5c53e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5c9fdd5de3e7e7c4f1d1b82344deaa9d1ae5c53e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6e9b84296223126a0a59bde63a0f97011bb7b0f5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6e9b84296223126a0a59bde63a0f97011bb7b0f5", "html_url": "https://github.com/rust-lang/rust/commit/6e9b84296223126a0a59bde63a0f97011bb7b0f5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6e9b84296223126a0a59bde63a0f97011bb7b0f5/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "42959a24a14e86804b81a3f8f8ecf78c367f370f", "url": "https://api.github.com/repos/rust-lang/rust/commits/42959a24a14e86804b81a3f8f8ecf78c367f370f", "html_url": "https://github.com/rust-lang/rust/commit/42959a24a14e86804b81a3f8f8ecf78c367f370f"}, {"sha": "4c40ff6a2472124cd061721463f329184ca76fa3", "url": "https://api.github.com/repos/rust-lang/rust/commits/4c40ff6a2472124cd061721463f329184ca76fa3", "html_url": "https://github.com/rust-lang/rust/commit/4c40ff6a2472124cd061721463f329184ca76fa3"}], "stats": {"total": 101, "additions": 93, "deletions": 8}, "files": [{"sha": "7ed6e4a8f51eb1ea2e3913c7b0cf4d5f5daff44e", "filename": "src/libcore/intrinsics.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/6e9b84296223126a0a59bde63a0f97011bb7b0f5/src%2Flibcore%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e9b84296223126a0a59bde63a0f97011bb7b0f5/src%2Flibcore%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fintrinsics.rs?ref=6e9b84296223126a0a59bde63a0f97011bb7b0f5", "patch": "@@ -1465,6 +1465,20 @@ extern \"rust-intrinsic\" {\n     /// y < 0 or y >= N, where N is the width of T in bits.\n     pub fn unchecked_shr<T>(x: T, y: T) -> T;\n \n+    /// Performs rotate left.\n+    /// The stabilized versions of this intrinsic are available on the integer\n+    /// primitives via the `rotate_left` method. For example,\n+    /// [`std::u32::rotate_left`](../../std/primitive.u32.html#method.rotate_left)\n+    #[cfg(not(stage0))]\n+    pub fn rotate_left<T>(x: T, y: T) -> T;\n+\n+    /// Performs rotate right.\n+    /// The stabilized versions of this intrinsic are available on the integer\n+    /// primitives via the `rotate_right` method. For example,\n+    /// [`std::u32::rotate_right`](../../std/primitive.u32.html#method.rotate_right)\n+    #[cfg(not(stage0))]\n+    pub fn rotate_right<T>(x: T, y: T) -> T;\n+\n     /// Returns (a + b) mod 2<sup>N</sup>, where N is the width of T in bits.\n     /// The stabilized versions of this intrinsic are available on the integer\n     /// primitives via the `wrapping_add` method. For example,"}, {"sha": "090147c9fe4fa7ad06ba004eb2b86c3afd3864cb", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/6e9b84296223126a0a59bde63a0f97011bb7b0f5/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e9b84296223126a0a59bde63a0f97011bb7b0f5/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=6e9b84296223126a0a59bde63a0f97011bb7b0f5", "patch": "@@ -2301,7 +2301,12 @@ assert_eq!(n.rotate_left(\", $rot, \"), m);\n             #[rustc_const_unstable(feature = \"const_int_rotate\")]\n             #[inline]\n             pub const fn rotate_left(self, n: u32) -> Self {\n-                (self << (n % $BITS)) | (self >> (($BITS - (n % $BITS)) % $BITS))\n+                #[cfg(not(stage0))] {\n+                    unsafe { intrinsics::rotate_left(self, n as $SelfT) }\n+                }\n+                #[cfg(stage0)] {\n+                    (self << (n % $BITS)) | (self >> (($BITS - (n % $BITS)) % $BITS))\n+                }\n             }\n         }\n \n@@ -2326,7 +2331,12 @@ assert_eq!(n.rotate_right(\", $rot, \"), m);\n             #[rustc_const_unstable(feature = \"const_int_rotate\")]\n             #[inline]\n             pub const fn rotate_right(self, n: u32) -> Self {\n-                (self >> (n % $BITS)) | (self << (($BITS - (n % $BITS)) % $BITS))\n+                #[cfg(not(stage0))] {\n+                    unsafe { intrinsics::rotate_right(self, n as $SelfT) }\n+                }\n+                #[cfg(stage0)] {\n+                    (self >> (n % $BITS)) | (self << (($BITS - (n % $BITS)) % $BITS))\n+                }\n             }\n         }\n "}, {"sha": "81d615b5ad70a3505ba53819730a29fa6d1227f6", "filename": "src/librustc_codegen_llvm/context.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6e9b84296223126a0a59bde63a0f97011bb7b0f5/src%2Flibrustc_codegen_llvm%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e9b84296223126a0a59bde63a0f97011bb7b0f5/src%2Flibrustc_codegen_llvm%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fcontext.rs?ref=6e9b84296223126a0a59bde63a0f97011bb7b0f5", "patch": "@@ -720,6 +720,18 @@ fn declare_intrinsic(cx: &CodegenCx<'ll, '_>, key: &str) -> Option<&'ll Value> {\n     ifn!(\"llvm.bitreverse.i64\", fn(t_i64) -> t_i64);\n     ifn!(\"llvm.bitreverse.i128\", fn(t_i128) -> t_i128);\n \n+    ifn!(\"llvm.fshl.i8\", fn(t_i8, t_i8, t_i8) -> t_i8);\n+    ifn!(\"llvm.fshl.i16\", fn(t_i16, t_i16, t_i16) -> t_i16);\n+    ifn!(\"llvm.fshl.i32\", fn(t_i32, t_i32, t_i32) -> t_i32);\n+    ifn!(\"llvm.fshl.i64\", fn(t_i64, t_i64, t_i64) -> t_i64);\n+    ifn!(\"llvm.fshl.i128\", fn(t_i128, t_i128, t_i128) -> t_i128);\n+\n+    ifn!(\"llvm.fshr.i8\", fn(t_i8, t_i8, t_i8) -> t_i8);\n+    ifn!(\"llvm.fshr.i16\", fn(t_i16, t_i16, t_i16) -> t_i16);\n+    ifn!(\"llvm.fshr.i32\", fn(t_i32, t_i32, t_i32) -> t_i32);\n+    ifn!(\"llvm.fshr.i64\", fn(t_i64, t_i64, t_i64) -> t_i64);\n+    ifn!(\"llvm.fshr.i128\", fn(t_i128, t_i128, t_i128) -> t_i128);\n+\n     ifn!(\"llvm.sadd.with.overflow.i8\", fn(t_i8, t_i8) -> mk_struct!{t_i8, i1});\n     ifn!(\"llvm.sadd.with.overflow.i16\", fn(t_i16, t_i16) -> mk_struct!{t_i16, i1});\n     ifn!(\"llvm.sadd.with.overflow.i32\", fn(t_i32, t_i32) -> mk_struct!{t_i32, i1});"}, {"sha": "00f06645930c25209560492b8421f7f042bcdfb2", "filename": "src/librustc_codegen_llvm/debuginfo/metadata.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6e9b84296223126a0a59bde63a0f97011bb7b0f5/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e9b84296223126a0a59bde63a0f97011bb7b0f5/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs?ref=6e9b84296223126a0a59bde63a0f97011bb7b0f5", "patch": "@@ -23,6 +23,7 @@ use value::Value;\n use llvm;\n use llvm::debuginfo::{DIType, DIFile, DIScope, DIDescriptor,\n                       DICompositeType, DILexicalBlock, DIFlags};\n+use llvm_util;\n \n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc::hir::CodegenFnAttrFlags;\n@@ -1169,9 +1170,8 @@ fn prepare_union_metadata(\n fn use_enum_fallback(cx: &CodegenCx) -> bool {\n     // On MSVC we have to use the fallback mode, because LLVM doesn't\n     // lower variant parts to PDB.\n-    return cx.sess().target.target.options.is_like_msvc || unsafe {\n-        llvm::LLVMRustVersionMajor() < 7\n-    };\n+    return cx.sess().target.target.options.is_like_msvc\n+        || llvm_util::get_major_version() < 7;\n }\n \n // Describes the members of an enum value: An enum is described as a union of"}, {"sha": "a5f90149f4ac47293715041893956d31d8c5bae2", "filename": "src/librustc_codegen_llvm/intrinsic.rs", "status": "modified", "additions": 24, "deletions": 1, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/6e9b84296223126a0a59bde63a0f97011bb7b0f5/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e9b84296223126a0a59bde63a0f97011bb7b0f5/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs?ref=6e9b84296223126a0a59bde63a0f97011bb7b0f5", "patch": "@@ -13,6 +13,7 @@\n use attributes;\n use intrinsics::{self, Intrinsic};\n use llvm::{self, TypeKind};\n+use llvm_util;\n use abi::{Abi, FnType, LlvmType, PassMode};\n use mir::place::PlaceRef;\n use mir::operand::{OperandRef, OperandValue};\n@@ -284,7 +285,8 @@ pub fn codegen_intrinsic_call(\n         \"ctlz\" | \"ctlz_nonzero\" | \"cttz\" | \"cttz_nonzero\" | \"ctpop\" | \"bswap\" |\n         \"bitreverse\" | \"add_with_overflow\" | \"sub_with_overflow\" |\n         \"mul_with_overflow\" | \"overflowing_add\" | \"overflowing_sub\" | \"overflowing_mul\" |\n-        \"unchecked_div\" | \"unchecked_rem\" | \"unchecked_shl\" | \"unchecked_shr\" | \"exact_div\" => {\n+        \"unchecked_div\" | \"unchecked_rem\" | \"unchecked_shl\" | \"unchecked_shr\" | \"exact_div\" |\n+        \"rotate_left\" | \"rotate_right\" => {\n             let ty = arg_tys[0];\n             match int_type_width_signed(ty, cx) {\n                 Some((width, signed)) =>\n@@ -363,6 +365,27 @@ pub fn codegen_intrinsic_call(\n                             } else {\n                                 bx.lshr(args[0].immediate(), args[1].immediate())\n                             },\n+                        \"rotate_left\" | \"rotate_right\" => {\n+                            let is_left = name == \"rotate_left\";\n+                            let val = args[0].immediate();\n+                            let raw_shift = args[1].immediate();\n+                            if llvm_util::get_major_version() >= 7 {\n+                                // rotate = funnel shift with first two args the same\n+                                let llvm_name = &format!(\"llvm.fsh{}.i{}\",\n+                                                         if is_left { 'l' } else { 'r' }, width);\n+                                let llfn = cx.get_intrinsic(llvm_name);\n+                                bx.call(llfn, &[val, val, raw_shift], None)\n+                            } else {\n+                                // rotate_left: (X << (S % BW)) | (X >> ((BW - S) % BW))\n+                                // rotate_right: (X << ((BW - S) % BW)) | (X >> (S % BW))\n+                                let width = C_uint(Type::ix(cx, width), width);\n+                                let shift = bx.urem(raw_shift, width);\n+                                let inv_shift = bx.urem(bx.sub(width, raw_shift), width);\n+                                let shift1 = bx.shl(val, if is_left { shift } else { inv_shift });\n+                                let shift2 = bx.lshr(val, if !is_left { shift } else { inv_shift });\n+                                bx.or(shift1, shift2)\n+                            }\n+                        },\n                         _ => bug!(),\n                     },\n                 None => {"}, {"sha": "eaa599e0cd0fa67f8382eda55fe7575f9aadf9ad", "filename": "src/librustc_codegen_llvm/llvm_util.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6e9b84296223126a0a59bde63a0f97011bb7b0f5/src%2Flibrustc_codegen_llvm%2Fllvm_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e9b84296223126a0a59bde63a0f97011bb7b0f5/src%2Flibrustc_codegen_llvm%2Fllvm_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fllvm_util.rs?ref=6e9b84296223126a0a59bde63a0f97011bb7b0f5", "patch": "@@ -257,6 +257,10 @@ pub fn print_version() {\n     }\n }\n \n+pub fn get_major_version() -> u32 {\n+    unsafe { llvm::LLVMRustVersionMajor() }\n+}\n+\n pub fn print_passes() {\n     // Can be called without initializing LLVM\n     unsafe { llvm::LLVMRustPrintPasses(); }"}, {"sha": "e5b25ea068b3b7fd463c7fabc7afd987a7cd3a0b", "filename": "src/librustc_codegen_llvm/mir/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6e9b84296223126a0a59bde63a0f97011bb7b0f5/src%2Flibrustc_codegen_llvm%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e9b84296223126a0a59bde63a0f97011bb7b0f5/src%2Flibrustc_codegen_llvm%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fmir%2Fmod.rs?ref=6e9b84296223126a0a59bde63a0f97011bb7b0f5", "patch": "@@ -12,6 +12,7 @@ use common::{C_i32, C_null};\n use libc::c_uint;\n use llvm::{self, BasicBlock};\n use llvm::debuginfo::DIScope;\n+use llvm_util;\n use rustc::ty::{self, Ty, TypeFoldable, UpvarSubsts};\n use rustc::ty::layout::{LayoutOf, TyLayout};\n use rustc::mir::{self, Mir};\n@@ -612,7 +613,7 @@ fn arg_local_refs(\n             // doesn't actually strip the offset when splitting the closure\n             // environment into its components so it ends up out of bounds.\n             // (cuviper) It seems to be fine without the alloca on LLVM 6 and later.\n-            let env_alloca = !env_ref && unsafe { llvm::LLVMRustVersionMajor() < 6 };\n+            let env_alloca = !env_ref && llvm_util::get_major_version() < 6;\n             let env_ptr = if env_alloca {\n                 let scratch = PlaceRef::alloca(bx,\n                     bx.cx.layout_of(tcx.mk_mut_ptr(arg.layout.ty)),"}, {"sha": "3eb3d7600fd31600819df3ff5efda1c006131fa0", "filename": "src/librustc_mir/interpret/intrinsics.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/6e9b84296223126a0a59bde63a0f97011bb7b0f5/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e9b84296223126a0a59bde63a0f97011bb7b0f5/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs?ref=6e9b84296223126a0a59bde63a0f97011bb7b0f5", "patch": "@@ -150,6 +150,24 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M>\n                 }\n                 self.write_scalar(val, dest)?;\n             }\n+            \"rotate_left\" | \"rotate_right\" => {\n+                // rotate_left: (X << (S % BW)) | (X >> ((BW - S) % BW))\n+                // rotate_right: (X << ((BW - S) % BW)) | (X >> (S % BW))\n+                let layout = self.layout_of(substs.type_at(0))?;\n+                let val_bits = self.read_scalar(args[0])?.to_bits(layout.size)?;\n+                let raw_shift_bits = self.read_scalar(args[1])?.to_bits(layout.size)?;\n+                let width_bits = layout.size.bits() as u128;\n+                let shift_bits = raw_shift_bits % width_bits;\n+                let inv_shift_bits = (width_bits - raw_shift_bits) % width_bits;\n+                let result_bits = if intrinsic_name == \"rotate_left\" {\n+                    (val_bits << shift_bits) | (val_bits >> inv_shift_bits)\n+                } else {\n+                    (val_bits >> shift_bits) | (val_bits << inv_shift_bits)\n+                };\n+                let truncated_bits = self.truncate(result_bits, layout);\n+                let result = Scalar::from_uint(truncated_bits, layout.size);\n+                self.write_scalar(result, dest)?;\n+            }\n             \"transmute\" => {\n                 self.copy_op_transmute(args[0], dest)?;\n             }"}, {"sha": "03497be03087b4fbafa495ca41cf9279cf694949", "filename": "src/librustc_mir/transform/qualify_consts.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6e9b84296223126a0a59bde63a0f97011bb7b0f5/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e9b84296223126a0a59bde63a0f97011bb7b0f5/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs?ref=6e9b84296223126a0a59bde63a0f97011bb7b0f5", "patch": "@@ -869,6 +869,8 @@ impl<'a, 'tcx> Visitor<'tcx> for Qualifier<'a, 'tcx, 'tcx> {\n                             | \"overflowing_mul\"\n                             | \"unchecked_shl\"\n                             | \"unchecked_shr\"\n+                            | \"rotate_left\"\n+                            | \"rotate_right\"\n                             | \"add_with_overflow\"\n                             | \"sub_with_overflow\"\n                             | \"mul_with_overflow\""}, {"sha": "84967aaf72f5797cf034129985d507d607760554", "filename": "src/librustc_typeck/check/intrinsic.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6e9b84296223126a0a59bde63a0f97011bb7b0f5/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e9b84296223126a0a59bde63a0f97011bb7b0f5/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs?ref=6e9b84296223126a0a59bde63a0f97011bb7b0f5", "patch": "@@ -292,7 +292,8 @@ pub fn check_intrinsic_type<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n \n             \"unchecked_div\" | \"unchecked_rem\" | \"exact_div\" =>\n                 (1, vec![param(0), param(0)], param(0)),\n-            \"unchecked_shl\" | \"unchecked_shr\" =>\n+            \"unchecked_shl\" | \"unchecked_shr\" |\n+            \"rotate_left\" | \"rotate_right\" =>\n                 (1, vec![param(0), param(0)], param(0)),\n \n             \"overflowing_add\" | \"overflowing_sub\" | \"overflowing_mul\" =>"}]}