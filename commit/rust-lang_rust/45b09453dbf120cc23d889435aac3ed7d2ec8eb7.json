{"sha": "45b09453dbf120cc23d889435aac3ed7d2ec8eb7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ1YjA5NDUzZGJmMTIwY2MyM2Q4ODk0MzVhYWMzZWQ3ZDJlYzhlYjc=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-05-09T21:56:18Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-05-09T21:56:18Z"}, "message": "Rollup merge of #60676 - davidtwco:issue-60674, r=cramertj\n\nFix async desugaring providing wrong input to procedural macros.\n\nFixes #60674.\n\nThis PR fixes a minor oversight introduced by #60535 where unused `mut` binding modes were removed from the arguments to an `async fn` (as they were added to the statement that we insert into the closure body). However, this meant that the input to procedural macros was incorrect. This removes that and instead fixes the `unused_mut` error that it avoided.\n\nr? @cramertj\ncc @taiki-e", "tree": {"sha": "67af0001a1a6863dba991d2b1ebe7592cd9c40c4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/67af0001a1a6863dba991d2b1ebe7592cd9c40c4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/45b09453dbf120cc23d889435aac3ed7d2ec8eb7", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJc1KIDCRBK7hj4Ov3rIwAAdHIIAA6n8OhL4J+sYj6QEII3m7YD\nNLqevaXP2GyWZKEgalpLS49XUJNdUl2Nb/t7U3RxzwJCubdzuU0zLHC1rRjU8j8B\nKUhng1OVlclelODhnM6DJHsdjcoSwMfAULvYh1EJ/0aRYP07x9gZc9aNMxVnxB4C\n3ya65ayJFzRusc54HPzjv2KHwBkoqi6RX4p+cKfB86BbnDgVJ9ZNoE1gHO5ITQbk\n5S1MKpulAz07jhOWSAbR6vZ/WNADfoQ1hkQSv1l+obcIwl1j/L6kv5Nr21dpztWI\nAkGHFzQbcNNib2mqVxlQzenMkWUPZB+k6TTVi7Q4V/stLOht/WOgek+cRMw+PX8=\n=bmbD\n-----END PGP SIGNATURE-----\n", "payload": "tree 67af0001a1a6863dba991d2b1ebe7592cd9c40c4\nparent f6df1f6c30b469cb9e65c5453a0efa03cbb6005e\nparent d5e04067cb23df91070fea1a01aa6417afa714ed\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1557438978 +0200\ncommitter GitHub <noreply@github.com> 1557438978 +0200\n\nRollup merge of #60676 - davidtwco:issue-60674, r=cramertj\n\nFix async desugaring providing wrong input to procedural macros.\n\nFixes #60674.\n\nThis PR fixes a minor oversight introduced by #60535 where unused `mut` binding modes were removed from the arguments to an `async fn` (as they were added to the statement that we insert into the closure body). However, this meant that the input to procedural macros was incorrect. This removes that and instead fixes the `unused_mut` error that it avoided.\n\nr? @cramertj\ncc @taiki-e\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/45b09453dbf120cc23d889435aac3ed7d2ec8eb7", "html_url": "https://github.com/rust-lang/rust/commit/45b09453dbf120cc23d889435aac3ed7d2ec8eb7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/45b09453dbf120cc23d889435aac3ed7d2ec8eb7/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f6df1f6c30b469cb9e65c5453a0efa03cbb6005e", "url": "https://api.github.com/repos/rust-lang/rust/commits/f6df1f6c30b469cb9e65c5453a0efa03cbb6005e", "html_url": "https://github.com/rust-lang/rust/commit/f6df1f6c30b469cb9e65c5453a0efa03cbb6005e"}, {"sha": "d5e04067cb23df91070fea1a01aa6417afa714ed", "url": "https://api.github.com/repos/rust-lang/rust/commits/d5e04067cb23df91070fea1a01aa6417afa714ed", "html_url": "https://github.com/rust-lang/rust/commit/d5e04067cb23df91070fea1a01aa6417afa714ed"}], "stats": {"total": 119, "additions": 76, "deletions": 43}, "files": [{"sha": "4d5707560b0480539ff52b5dfcbae8a0eae521b9", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 11, "deletions": 33, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/45b09453dbf120cc23d889435aac3ed7d2ec8eb7/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45b09453dbf120cc23d889435aac3ed7d2ec8eb7/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=45b09453dbf120cc23d889435aac3ed7d2ec8eb7", "patch": "@@ -50,7 +50,6 @@ use errors::Applicability;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_data_structures::indexed_vec::IndexVec;\n use rustc_data_structures::thin_vec::ThinVec;\n-use rustc_data_structures::sync::Lrc;\n \n use std::collections::{BTreeSet, BTreeMap};\n use std::mem;\n@@ -59,10 +58,10 @@ use syntax::attr;\n use syntax::ast;\n use syntax::ast::*;\n use syntax::errors;\n-use syntax::ext::hygiene::{Mark, SyntaxContext};\n+use syntax::ext::hygiene::Mark;\n use syntax::print::pprust;\n use syntax::ptr::P;\n-use syntax::source_map::{self, respan, CompilerDesugaringKind, Spanned};\n+use syntax::source_map::{respan, CompilerDesugaringKind, Spanned};\n use syntax::std_inject;\n use syntax::symbol::{keywords, Symbol};\n use syntax::tokenstream::{TokenStream, TokenTree};\n@@ -854,27 +853,6 @@ impl<'a> LoweringContext<'a> {\n         Ident::with_empty_ctxt(Symbol::gensym(s))\n     }\n \n-    /// Reuses the span but adds information like the kind of the desugaring and features that are\n-    /// allowed inside this span.\n-    fn mark_span_with_reason(\n-        &self,\n-        reason: CompilerDesugaringKind,\n-        span: Span,\n-        allow_internal_unstable: Option<Lrc<[Symbol]>>,\n-    ) -> Span {\n-        let mark = Mark::fresh(Mark::root());\n-        mark.set_expn_info(source_map::ExpnInfo {\n-            call_site: span,\n-            def_site: Some(span),\n-            format: source_map::CompilerDesugaring(reason),\n-            allow_internal_unstable,\n-            allow_internal_unsafe: false,\n-            local_inner_macros: false,\n-            edition: source_map::hygiene::default_edition(),\n-        });\n-        span.with_ctxt(SyntaxContext::empty().apply_mark(mark))\n-    }\n-\n     fn with_anonymous_lifetime_mode<R>(\n         &mut self,\n         anonymous_lifetime_mode: AnonymousLifetimeMode,\n@@ -1162,7 +1140,7 @@ impl<'a> LoweringContext<'a> {\n             attrs: ThinVec::new(),\n         };\n \n-        let unstable_span = self.mark_span_with_reason(\n+        let unstable_span = self.sess.source_map().mark_span_with_reason(\n             CompilerDesugaringKind::Async,\n             span,\n             Some(vec![\n@@ -1569,7 +1547,7 @@ impl<'a> LoweringContext<'a> {\n         // desugaring that explicitly states that we don't want to track that.\n         // Not tracking it makes lints in rustc and clippy very fragile as\n         // frequently opened issues show.\n-        let exist_ty_span = self.mark_span_with_reason(\n+        let exist_ty_span = self.sess.source_map().mark_span_with_reason(\n             CompilerDesugaringKind::ExistentialReturnType,\n             span,\n             None,\n@@ -2443,7 +2421,7 @@ impl<'a> LoweringContext<'a> {\n     ) -> hir::FunctionRetTy {\n         let span = output.span();\n \n-        let exist_ty_span = self.mark_span_with_reason(\n+        let exist_ty_span = self.sess.source_map().mark_span_with_reason(\n             CompilerDesugaringKind::Async,\n             span,\n             None,\n@@ -4179,7 +4157,7 @@ impl<'a> LoweringContext<'a> {\n             }),\n             ExprKind::TryBlock(ref body) => {\n                 self.with_catch_scope(body.id, |this| {\n-                    let unstable_span = this.mark_span_with_reason(\n+                    let unstable_span = this.sess.source_map().mark_span_with_reason(\n                         CompilerDesugaringKind::TryBlock,\n                         body.span,\n                         Some(vec![\n@@ -4612,7 +4590,7 @@ impl<'a> LoweringContext<'a> {\n                 // expand <head>\n                 let mut head = self.lower_expr(head);\n                 let head_sp = head.span;\n-                let desugared_span = self.mark_span_with_reason(\n+                let desugared_span = self.sess.source_map().mark_span_with_reason(\n                     CompilerDesugaringKind::ForLoop,\n                     head_sp,\n                     None,\n@@ -4773,15 +4751,15 @@ impl<'a> LoweringContext<'a> {\n                 //                 return Try::from_error(From::from(err)),\n                 // }\n \n-                let unstable_span = self.mark_span_with_reason(\n+                let unstable_span = self.sess.source_map().mark_span_with_reason(\n                     CompilerDesugaringKind::QuestionMark,\n                     e.span,\n                     Some(vec![\n                         Symbol::intern(\"try_trait\")\n                     ].into()),\n                 );\n                 let try_span = self.sess.source_map().end_point(e.span);\n-                let try_span = self.mark_span_with_reason(\n+                let try_span = self.sess.source_map().mark_span_with_reason(\n                     CompilerDesugaringKind::QuestionMark,\n                     try_span,\n                     Some(vec![\n@@ -5566,12 +5544,12 @@ impl<'a> LoweringContext<'a> {\n             );\n             self.sess.abort_if_errors();\n         }\n-        let span = self.mark_span_with_reason(\n+        let span = self.sess.source_map().mark_span_with_reason(\n             CompilerDesugaringKind::Await,\n             await_span,\n             None,\n         );\n-        let gen_future_span = self.mark_span_with_reason(\n+        let gen_future_span = self.sess.source_map().mark_span_with_reason(\n             CompilerDesugaringKind::Await,\n             await_span,\n             Some(vec![Symbol::intern(\"gen_future\")].into()),"}, {"sha": "d97d1e2f0f4eec67407b05b72b662bd39dd8e6c8", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 17, "deletions": 10, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/45b09453dbf120cc23d889435aac3ed7d2ec8eb7/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45b09453dbf120cc23d889435aac3ed7d2ec8eb7/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=45b09453dbf120cc23d889435aac3ed7d2ec8eb7", "patch": "@@ -50,7 +50,10 @@ use crate::symbol::{Symbol, keywords};\n \n use errors::{Applicability, DiagnosticBuilder, DiagnosticId, FatalError};\n use rustc_target::spec::abi::{self, Abi};\n-use syntax_pos::{Span, MultiSpan, BytePos, FileName};\n+use syntax_pos::{\n+    Span, MultiSpan, BytePos, FileName,\n+    hygiene::CompilerDesugaringKind,\n+};\n use log::{debug, trace};\n \n use std::borrow::Cow;\n@@ -8772,6 +8775,10 @@ impl<'a> Parser<'a> {\n     /// The arguments of the function are replaced in HIR lowering with the arguments created by\n     /// this function and the statements created here are inserted at the top of the closure body.\n     fn construct_async_arguments(&mut self, asyncness: &mut Spanned<IsAsync>, decl: &mut FnDecl) {\n+        // FIXME(davidtwco): This function should really live in the HIR lowering but because\n+        // the types constructed here need to be used in parts of resolve so that the correct\n+        // locals are considered upvars, it is currently easier for it to live here in the parser,\n+        // where it can be constructed once.\n         if let IsAsync::Async { ref mut arguments, .. } = asyncness.node {\n             for (index, input) in decl.inputs.iter_mut().enumerate() {\n                 let id = ast::DUMMY_NODE_ID;\n@@ -8786,6 +8793,15 @@ impl<'a> Parser<'a> {\n                 // statement.\n                 let (binding_mode, ident, is_simple_pattern) = match input.pat.node {\n                     PatKind::Ident(binding_mode @ BindingMode::ByValue(_), ident, _) => {\n+                        // Simple patterns like this don't have a generated argument, but they are\n+                        // moved into the closure with a statement, so any `mut` bindings on the\n+                        // argument will be unused. This binding mode can't be removed, because\n+                        // this would affect the input to procedural macros, but they can have\n+                        // their span marked as being the result of a compiler desugaring so\n+                        // that they aren't linted against.\n+                        input.pat.span = self.sess.source_map().mark_span_with_reason(\n+                            CompilerDesugaringKind::Async, span, None);\n+\n                         (binding_mode, ident, true)\n                     }\n                     _ => (BindingMode::ByValue(Mutability::Mutable), ident, false),\n@@ -8855,15 +8871,6 @@ impl<'a> Parser<'a> {\n                     })\n                 };\n \n-                // Remove mutability from arguments. If this is not a simple pattern,\n-                // those arguments are replaced by `__argN`, so there is no need to do this.\n-                if let PatKind::Ident(BindingMode::ByValue(mutability @ Mutability::Mutable), ..) =\n-                    &mut input.pat.node\n-                {\n-                    assert!(is_simple_pattern);\n-                    *mutability = Mutability::Immutable;\n-                }\n-\n                 let move_stmt = Stmt { id, node: StmtKind::Local(P(move_local)), span };\n                 arguments.push(AsyncArgument { ident, arg, pat_stmt, move_stmt });\n             }"}, {"sha": "215618bd09ca375538e98701de332977dad45e3d", "filename": "src/libsyntax/source_map.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/45b09453dbf120cc23d889435aac3ed7d2ec8eb7/src%2Flibsyntax%2Fsource_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45b09453dbf120cc23d889435aac3ed7d2ec8eb7/src%2Flibsyntax%2Fsource_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fsource_map.rs?ref=45b09453dbf120cc23d889435aac3ed7d2ec8eb7", "patch": "@@ -930,6 +930,27 @@ impl SourceMap {\n \n         None\n     }\n+\n+    /// Reuses the span but adds information like the kind of the desugaring and features that are\n+    /// allowed inside this span.\n+    pub fn mark_span_with_reason(\n+        &self,\n+        reason: hygiene::CompilerDesugaringKind,\n+        span: Span,\n+        allow_internal_unstable: Option<Lrc<[symbol::Symbol]>>,\n+    ) -> Span {\n+        let mark = Mark::fresh(Mark::root());\n+        mark.set_expn_info(ExpnInfo {\n+            call_site: span,\n+            def_site: Some(span),\n+            format: CompilerDesugaring(reason),\n+            allow_internal_unstable,\n+            allow_internal_unsafe: false,\n+            local_inner_macros: false,\n+            edition: hygiene::default_edition(),\n+        });\n+        span.with_ctxt(SyntaxContext::empty().apply_mark(mark))\n+    }\n }\n \n impl SourceMapper for SourceMap {"}, {"sha": "680c6e55e5668decc40438ef77b98e1cedec4ecd", "filename": "src/test/ui/async-await/auxiliary/issue-60674.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/45b09453dbf120cc23d889435aac3ed7d2ec8eb7/src%2Ftest%2Fui%2Fasync-await%2Fauxiliary%2Fissue-60674.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45b09453dbf120cc23d889435aac3ed7d2ec8eb7/src%2Ftest%2Fui%2Fasync-await%2Fauxiliary%2Fissue-60674.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fauxiliary%2Fissue-60674.rs?ref=45b09453dbf120cc23d889435aac3ed7d2ec8eb7", "patch": "@@ -0,0 +1,12 @@\n+// force-host\n+// no-prefer-dynamic\n+#![crate_type = \"proc-macro\"]\n+\n+extern crate proc_macro;\n+use proc_macro::TokenStream;\n+\n+#[proc_macro_attribute]\n+pub fn attr(_args: TokenStream, input: TokenStream) -> TokenStream {\n+    println!(\"{}\", input);\n+    TokenStream::new()\n+}"}, {"sha": "37e356e5baf483a45d538e0fbe6abd5eddade587", "filename": "src/test/ui/async-await/issue-60674.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/45b09453dbf120cc23d889435aac3ed7d2ec8eb7/src%2Ftest%2Fui%2Fasync-await%2Fissue-60674.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45b09453dbf120cc23d889435aac3ed7d2ec8eb7/src%2Ftest%2Fui%2Fasync-await%2Fissue-60674.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-60674.rs?ref=45b09453dbf120cc23d889435aac3ed7d2ec8eb7", "patch": "@@ -0,0 +1,14 @@\n+// aux-build:issue-60674.rs\n+// compile-pass\n+// edition:2018\n+#![feature(async_await)]\n+\n+// This is a regression test that ensures that `mut` patterns are not lost when provided as input\n+// to a proc macro.\n+\n+extern crate issue_60674;\n+\n+#[issue_60674::attr]\n+async fn f(mut x: u8) {}\n+\n+fn main() {}"}, {"sha": "a93944db1c5916e81dfc8d4494bcf2ead9648eab", "filename": "src/test/ui/async-await/issue-60674.stdout", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/45b09453dbf120cc23d889435aac3ed7d2ec8eb7/src%2Ftest%2Fui%2Fasync-await%2Fissue-60674.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/45b09453dbf120cc23d889435aac3ed7d2ec8eb7/src%2Ftest%2Fui%2Fasync-await%2Fissue-60674.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-60674.stdout?ref=45b09453dbf120cc23d889435aac3ed7d2ec8eb7", "patch": "@@ -0,0 +1 @@\n+async fn f(mut x: u8) { }"}]}