{"sha": "8fa306a0adb9ef3677bfad9bbd21bb620d4dc5b5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhmYTMwNmEwYWRiOWVmMzY3N2JmYWQ5YmJkMjFiYjYyMGQ0ZGM1YjU=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-12-01T00:29:28Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-12-01T05:10:17Z"}, "message": "librustc: Implement tuple struct constants. r=brson", "tree": {"sha": "9dbd795ade2753a72726d1720a11f8bb97cbdf87", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9dbd795ade2753a72726d1720a11f8bb97cbdf87"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8fa306a0adb9ef3677bfad9bbd21bb620d4dc5b5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8fa306a0adb9ef3677bfad9bbd21bb620d4dc5b5", "html_url": "https://github.com/rust-lang/rust/commit/8fa306a0adb9ef3677bfad9bbd21bb620d4dc5b5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8fa306a0adb9ef3677bfad9bbd21bb620d4dc5b5/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5b5a0df7ee46f4c465eb479a4ceb4a61d621bf5d", "url": "https://api.github.com/repos/rust-lang/rust/commits/5b5a0df7ee46f4c465eb479a4ceb4a61d621bf5d", "html_url": "https://github.com/rust-lang/rust/commit/5b5a0df7ee46f4c465eb479a4ceb4a61d621bf5d"}], "stats": {"total": 57, "additions": 51, "deletions": 6}, "files": [{"sha": "77197a1db0d588e1cdab4abe168c95772b13d75d", "filename": "src/librustc/middle/check_const.rs", "status": "modified", "additions": 22, "deletions": 5, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/8fa306a0adb9ef3677bfad9bbd21bb620d4dc5b5/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fa306a0adb9ef3677bfad9bbd21bb620d4dc5b5/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs?ref=8fa306a0adb9ef3677bfad9bbd21bb620d4dc5b5", "patch": "@@ -95,19 +95,36 @@ fn check_expr(sess: Session, def_map: resolve::DefMap,\n             match def_map.find(e.id) {\n               Some(def_const(def_id)) |\n                 Some(def_fn(def_id, _)) |\n-                Some(def_variant(_, def_id)) => {\n+                Some(def_variant(_, def_id)) |\n+                Some(def_class(def_id)) => {\n                 if !ast_util::is_local(def_id) {\n                     sess.span_err(\n                         e.span, ~\"paths in constants may only refer to \\\n-                                 crate-local constants or functions\");\n+                                 crate-local constants, functions, or \\\n+                                 structs\");\n                 }\n               }\n-              _ => {\n+              Some(def) => {\n+                debug!(\"(checking const) found bad def: %?\", def);\n                 sess.span_err(\n                     e.span,\n-                    ~\"paths in constants may only refer to \\\n-                      constants or functions\");\n+                    fmt!(\"paths in constants may only refer to \\\n+                          constants or functions\"));\n               }\n+              None => {\n+                sess.span_bug(e.span, ~\"unbound path in const?!\");\n+              }\n+            }\n+          }\n+          expr_call(callee, _, false) => {\n+            match def_map.find(callee.id) {\n+                Some(def_class(*)) => {}    // OK.\n+                _ => {\n+                    sess.span_err(\n+                        e.span,\n+                        ~\"function calls in constants are limited to \\\n+                          structure constructors\");\n+                }\n             }\n           }\n           expr_paren(e) => { check_expr(sess, def_map, method_map,"}, {"sha": "e2466c1c4c654a40d0091db38b6fc2a84e90ebe6", "filename": "src/librustc/middle/trans/consts.rs", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/8fa306a0adb9ef3677bfad9bbd21bb620d4dc5b5/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fa306a0adb9ef3677bfad9bbd21bb620d4dc5b5/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs?ref=8fa306a0adb9ef3677bfad9bbd21bb620d4dc5b5", "patch": "@@ -416,7 +416,22 @@ fn const_expr(cx: @crate_ctxt, e: @ast::expr) -> ValueRef {\n             }\n         }\n       }\n-        ast::expr_paren(e) => { return const_expr(cx, e); }\n+      ast::expr_call(callee, args, _) => {\n+        match cx.tcx.def_map.find(callee.id) {\n+            Some(ast::def_class(def_id)) => {\n+                let ety = ty::expr_ty(cx.tcx, e);\n+                let llty = type_of::type_of(cx, ety);\n+                let llstructbody = C_struct(args.map(|a| const_expr(cx, *a)));\n+                if ty::ty_dtor(cx.tcx, def_id).is_present() {\n+                    C_named_struct(llty, ~[ llstructbody, C_u8(0) ])\n+                } else {\n+                    C_named_struct(llty, ~[ llstructbody ])\n+                }\n+            }\n+            _ => cx.sess.span_bug(e.span, ~\"expected a struct def\")\n+        }\n+      }\n+      ast::expr_paren(e) => { return const_expr(cx, e); }\n       _ => cx.sess.span_bug(e.span,\n             ~\"bad constant expression type in consts::const_expr\")\n     };"}, {"sha": "d10d490740be2b88b9f7661d12b589e5bc9c8876", "filename": "src/test/run-pass/const-tuple-struct.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/8fa306a0adb9ef3677bfad9bbd21bb620d4dc5b5/src%2Ftest%2Frun-pass%2Fconst-tuple-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fa306a0adb9ef3677bfad9bbd21bb620d4dc5b5/src%2Ftest%2Frun-pass%2Fconst-tuple-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-tuple-struct.rs?ref=8fa306a0adb9ef3677bfad9bbd21bb620d4dc5b5", "patch": "@@ -0,0 +1,13 @@\n+struct Bar(int, int);\n+\n+const X: Bar = Bar(1, 2);\n+\n+fn main() {\n+    match X {\n+        Bar(x, y) => {\n+            assert x == 1;\n+            assert y == 2;\n+        }\n+    }\n+}\n+"}]}