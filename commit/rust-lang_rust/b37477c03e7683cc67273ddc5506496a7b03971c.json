{"sha": "b37477c03e7683cc67273ddc5506496a7b03971c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIzNzQ3N2MwM2U3NjgzY2M2NzI3M2RkYzU1MDY0OTZhN2IwMzk3MWM=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2016-02-04T19:16:32Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2016-02-10T17:28:49Z"}, "message": "std: Implement CommandExt::exec\n\nThis commit implements the `exec` function proposed in [RFC 1359][rfc] which is\na function on the `CommandExt` trait to execute all parts of a `Command::spawn`\nwithout the `fork` on Unix. More details on the function itself can be found in\nthe comments in the commit.\n\n[rfc]: https://github.com/rust-lang/rfcs/pull/1359\n\ncc #31398", "tree": {"sha": "703095c3ab93f0de9be7ee7d40898a7221f21c40", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/703095c3ab93f0de9be7ee7d40898a7221f21c40"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b37477c03e7683cc67273ddc5506496a7b03971c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b37477c03e7683cc67273ddc5506496a7b03971c", "html_url": "https://github.com/rust-lang/rust/commit/b37477c03e7683cc67273ddc5506496a7b03971c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b37477c03e7683cc67273ddc5506496a7b03971c/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d15db1d392c9126ed5cc766753f08540c08a3626", "url": "https://api.github.com/repos/rust-lang/rust/commits/d15db1d392c9126ed5cc766753f08540c08a3626", "html_url": "https://github.com/rust-lang/rust/commit/d15db1d392c9126ed5cc766753f08540c08a3626"}], "stats": {"total": 114, "additions": 112, "deletions": 2}, "files": [{"sha": "fa19a2620bacffcd83a0a9fd4460a099cbf54551", "filename": "src/libstd/sys/unix/ext/process.rs", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/b37477c03e7683cc67273ddc5506496a7b03971c/src%2Flibstd%2Fsys%2Funix%2Fext%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b37477c03e7683cc67273ddc5506496a7b03971c/src%2Flibstd%2Fsys%2Funix%2Fext%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fext%2Fprocess.rs?ref=b37477c03e7683cc67273ddc5506496a7b03971c", "patch": "@@ -75,6 +75,28 @@ pub trait CommandExt {\n     #[unstable(feature = \"process_exec\", issue = \"31398\")]\n     fn before_exec<F>(&mut self, f: F) -> &mut process::Command\n         where F: FnMut() -> io::Result<()> + Send + Sync + 'static;\n+\n+    /// Performs all the required setup by this `Command`, followed by calling\n+    /// the `execvp` syscall.\n+    ///\n+    /// On success this function will not return, and otherwise it will return\n+    /// an error indicating why the exec (or another part of the setup of the\n+    /// `Command`) failed.\n+    ///\n+    /// This function, unlike `spawn`, will **not** `fork` the process to create\n+    /// a new child. Like spawn, however, the default behavior for the stdio\n+    /// descriptors will be to inherited from the current process.\n+    ///\n+    /// # Notes\n+    ///\n+    /// The process may be in a \"broken state\" if this function returns in\n+    /// error. For example the working directory, environment variables, signal\n+    /// handling settings, various user/group information, or aspects of stdio\n+    /// file descriptors may have changed. If a \"transactional spawn\" is\n+    /// required to gracefully handle errors it is recommended to use the\n+    /// cross-platform `spawn` instead.\n+    #[unstable(feature = \"process_exec\", issue = \"31398\")]\n+    fn exec(&mut self) -> io::Error;\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -100,6 +122,10 @@ impl CommandExt for process::Command {\n         self.as_inner_mut().before_exec(Box::new(f));\n         self\n     }\n+\n+    fn exec(&mut self) -> io::Error {\n+        self.as_inner_mut().exec(sys::process::Stdio::Inherit)\n+    }\n }\n \n /// Unix-specific extensions to `std::process::ExitStatus`"}, {"sha": "60785f376423f7750d2c9cacd83d26080bb88269", "filename": "src/libstd/sys/unix/process.rs", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b37477c03e7683cc67273ddc5506496a7b03971c/src%2Flibstd%2Fsys%2Funix%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b37477c03e7683cc67273ddc5506496a7b03971c/src%2Flibstd%2Fsys%2Funix%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fprocess.rs?ref=b37477c03e7683cc67273ddc5506496a7b03971c", "patch": "@@ -230,7 +230,7 @@ impl Command {\n             match try!(cvt(libc::fork())) {\n                 0 => {\n                     drop(input);\n-                    let err = self.exec(theirs);\n+                    let err = self.do_exec(theirs);\n                     let errno = err.raw_os_error().unwrap_or(libc::EINVAL) as u32;\n                     let bytes = [\n                         (errno >> 24) as u8,\n@@ -290,6 +290,18 @@ impl Command {\n         }\n     }\n \n+    pub fn exec(&mut self, default: Stdio) -> io::Error {\n+        if self.saw_nul {\n+            return io::Error::new(ErrorKind::InvalidInput,\n+                                  \"nul byte found in provided data\")\n+        }\n+\n+        match self.setup_io(default) {\n+            Ok((_, theirs)) => unsafe { self.do_exec(theirs) },\n+            Err(e) => e,\n+        }\n+    }\n+\n     // And at this point we've reached a special time in the life of the\n     // child. The child must now be considered hamstrung and unable to\n     // do anything other than syscalls really. Consider the following\n@@ -320,7 +332,7 @@ impl Command {\n     // allocation). Instead we just close it manually. This will never\n     // have the drop glue anyway because this code never returns (the\n     // child will either exec() or invoke libc::exit)\n-    unsafe fn exec(&mut self, stdio: ChildPipes) -> io::Error {\n+    unsafe fn do_exec(&mut self, stdio: ChildPipes) -> io::Error {\n         macro_rules! try {\n             ($e:expr) => (match $e {\n                 Ok(e) => e,"}, {"sha": "039245bfd08ba9eceb748a625d4298901f9802fe", "filename": "src/test/run-pass/command-exec.rs", "status": "added", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/b37477c03e7683cc67273ddc5506496a7b03971c/src%2Ftest%2Frun-pass%2Fcommand-exec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b37477c03e7683cc67273ddc5506496a7b03971c/src%2Ftest%2Frun-pass%2Fcommand-exec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcommand-exec.rs?ref=b37477c03e7683cc67273ddc5506496a7b03971c", "patch": "@@ -0,0 +1,72 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// ignore-windows - this is a unix-specific test\n+// ignore-pretty\n+\n+#![feature(process_exec)]\n+\n+use std::env;\n+use std::os::unix::process::CommandExt;\n+use std::process::Command;\n+\n+fn main() {\n+    let mut args = env::args();\n+    let me = args.next().unwrap();\n+\n+    if let Some(arg) = args.next() {\n+        match &arg[..] {\n+            \"test1\" => println!(\"passed\"),\n+\n+            \"exec-test1\" => {\n+                let err = Command::new(&me).arg(\"test1\").exec();\n+                panic!(\"failed to spawn: {}\", err);\n+            }\n+\n+            \"exec-test2\" => {\n+                Command::new(\"/path/to/nowhere\").exec();\n+                println!(\"passed\");\n+            }\n+\n+            \"exec-test3\" => {\n+                Command::new(&me).arg(\"bad\\0\").exec();\n+                println!(\"passed\");\n+            }\n+\n+            \"exec-test4\" => {\n+                Command::new(&me).current_dir(\"/path/to/nowhere\").exec();\n+                println!(\"passed\");\n+            }\n+\n+            _ => panic!(\"unknown argument: {}\", arg),\n+        }\n+        return\n+    }\n+\n+    let output = Command::new(&me).arg(\"exec-test1\").output().unwrap();\n+    assert!(output.status.success());\n+    assert!(output.stderr.is_empty());\n+    assert_eq!(output.stdout, b\"passed\\n\");\n+\n+    let output = Command::new(&me).arg(\"exec-test2\").output().unwrap();\n+    assert!(output.status.success());\n+    assert!(output.stderr.is_empty());\n+    assert_eq!(output.stdout, b\"passed\\n\");\n+\n+    let output = Command::new(&me).arg(\"exec-test3\").output().unwrap();\n+    assert!(output.status.success());\n+    assert!(output.stderr.is_empty());\n+    assert_eq!(output.stdout, b\"passed\\n\");\n+\n+    let output = Command::new(&me).arg(\"exec-test4\").output().unwrap();\n+    assert!(output.status.success());\n+    assert!(output.stderr.is_empty());\n+    assert_eq!(output.stdout, b\"passed\\n\");\n+}"}]}