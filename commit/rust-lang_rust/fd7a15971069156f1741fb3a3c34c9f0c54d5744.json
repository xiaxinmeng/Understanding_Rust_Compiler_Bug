{"sha": "fd7a15971069156f1741fb3a3c34c9f0c54d5744", "node_id": "C_kwDOAAsO6NoAKGZkN2ExNTk3MTA2OTE1NmYxNzQxZmIzYTNjMzRjOWYwYzU0ZDU3NDQ", "commit": {"author": {"name": "nils", "email": "48135649+Nilstrieb@users.noreply.github.com", "date": "2022-12-19T09:31:55Z"}, "committer": {"name": "Nilstrieb", "email": "48135649+Nilstrieb@users.noreply.github.com", "date": "2023-01-05T18:01:12Z"}, "message": "Fix `uninlined_format_args` for some compiler crates\n\nConvert all the crates that have had their diagnostic migration\ncompleted (except save_analysis because that will be deleted soon and\napfloat because of the licensing problem).", "tree": {"sha": "e081208c1b2c12edf14fa3be5905ac29aac2a41d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e081208c1b2c12edf14fa3be5905ac29aac2a41d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fd7a15971069156f1741fb3a3c34c9f0c54d5744", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fd7a15971069156f1741fb3a3c34c9f0c54d5744", "html_url": "https://github.com/rust-lang/rust/commit/fd7a15971069156f1741fb3a3c34c9f0c54d5744", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fd7a15971069156f1741fb3a3c34c9f0c54d5744/comments", "author": {"login": "Nilstrieb", "id": 48135649, "node_id": "MDQ6VXNlcjQ4MTM1NjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/48135649?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nilstrieb", "html_url": "https://github.com/Nilstrieb", "followers_url": "https://api.github.com/users/Nilstrieb/followers", "following_url": "https://api.github.com/users/Nilstrieb/following{/other_user}", "gists_url": "https://api.github.com/users/Nilstrieb/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nilstrieb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nilstrieb/subscriptions", "organizations_url": "https://api.github.com/users/Nilstrieb/orgs", "repos_url": "https://api.github.com/users/Nilstrieb/repos", "events_url": "https://api.github.com/users/Nilstrieb/events{/privacy}", "received_events_url": "https://api.github.com/users/Nilstrieb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Nilstrieb", "id": 48135649, "node_id": "MDQ6VXNlcjQ4MTM1NjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/48135649?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nilstrieb", "html_url": "https://github.com/Nilstrieb", "followers_url": "https://api.github.com/users/Nilstrieb/followers", "following_url": "https://api.github.com/users/Nilstrieb/following{/other_user}", "gists_url": "https://api.github.com/users/Nilstrieb/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nilstrieb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nilstrieb/subscriptions", "organizations_url": "https://api.github.com/users/Nilstrieb/orgs", "repos_url": "https://api.github.com/users/Nilstrieb/repos", "events_url": "https://api.github.com/users/Nilstrieb/events{/privacy}", "received_events_url": "https://api.github.com/users/Nilstrieb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1d284af117716473e1a35cc0d91c170e44e3fc6e", "url": "https://api.github.com/repos/rust-lang/rust/commits/1d284af117716473e1a35cc0d91c170e44e3fc6e", "html_url": "https://github.com/rust-lang/rust/commit/1d284af117716473e1a35cc0d91c170e44e3fc6e"}], "stats": {"total": 616, "additions": 287, "deletions": 329}, "files": [{"sha": "e656fb3740bbdf74a9301cd233a65208980886d8", "filename": "compiler/rustc_ast/src/ast.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fd7a15971069156f1741fb3a3c34c9f0c54d5744/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd7a15971069156f1741fb3a3c34c9f0c54d5744/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fast.rs?ref=fd7a15971069156f1741fb3a3c34c9f0c54d5744", "patch": "@@ -2170,10 +2170,10 @@ impl fmt::Display for InlineAsmTemplatePiece {\n                 Ok(())\n             }\n             Self::Placeholder { operand_idx, modifier: Some(modifier), .. } => {\n-                write!(f, \"{{{}:{}}}\", operand_idx, modifier)\n+                write!(f, \"{{{operand_idx}:{modifier}}}\")\n             }\n             Self::Placeholder { operand_idx, modifier: None, .. } => {\n-                write!(f, \"{{{}}}\", operand_idx)\n+                write!(f, \"{{{operand_idx}}}\")\n             }\n         }\n     }\n@@ -2185,7 +2185,7 @@ impl InlineAsmTemplatePiece {\n         use fmt::Write;\n         let mut out = String::new();\n         for p in s.iter() {\n-            let _ = write!(out, \"{}\", p);\n+            let _ = write!(out, \"{p}\");\n         }\n         out\n     }"}, {"sha": "4dc9c30a2c807a2050c8fb72638cb2b3e4a4d2a8", "filename": "compiler/rustc_ast/src/ast_traits.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fd7a15971069156f1741fb3a3c34c9f0c54d5744/compiler%2Frustc_ast%2Fsrc%2Fast_traits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd7a15971069156f1741fb3a3c34c9f0c54d5744/compiler%2Frustc_ast%2Fsrc%2Fast_traits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fast_traits.rs?ref=fd7a15971069156f1741fb3a3c34c9f0c54d5744", "patch": "@@ -214,15 +214,15 @@ impl HasTokens for Attribute {\n         match &self.kind {\n             AttrKind::Normal(normal) => normal.tokens.as_ref(),\n             kind @ AttrKind::DocComment(..) => {\n-                panic!(\"Called tokens on doc comment attr {:?}\", kind)\n+                panic!(\"Called tokens on doc comment attr {kind:?}\")\n             }\n         }\n     }\n     fn tokens_mut(&mut self) -> Option<&mut Option<LazyAttrTokenStream>> {\n         Some(match &mut self.kind {\n             AttrKind::Normal(normal) => &mut normal.tokens,\n             kind @ AttrKind::DocComment(..) => {\n-                panic!(\"Called tokens_mut on doc comment attr {:?}\", kind)\n+                panic!(\"Called tokens_mut on doc comment attr {kind:?}\")\n             }\n         })\n     }"}, {"sha": "c6b6207b3186e85442b1c388c221b6974b0306b3", "filename": "compiler/rustc_ast/src/attr/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fd7a15971069156f1741fb3a3c34c9f0c54d5744/compiler%2Frustc_ast%2Fsrc%2Fattr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd7a15971069156f1741fb3a3c34c9f0c54d5744/compiler%2Frustc_ast%2Fsrc%2Fattr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fattr%2Fmod.rs?ref=fd7a15971069156f1741fb3a3c34c9f0c54d5744", "patch": "@@ -310,7 +310,7 @@ impl Attribute {\n             AttrKind::Normal(normal) => normal\n                 .tokens\n                 .as_ref()\n-                .unwrap_or_else(|| panic!(\"attribute is missing tokens: {:?}\", self))\n+                .unwrap_or_else(|| panic!(\"attribute is missing tokens: {self:?}\"))\n                 .to_attr_token_stream()\n                 .to_tokenstream(),\n             &AttrKind::DocComment(comment_kind, data) => TokenStream::new(vec![TokenTree::Token("}, {"sha": "35939496348988af0e5d3c7f2aaac62120978490", "filename": "compiler/rustc_ast/src/expand/allocator.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fd7a15971069156f1741fb3a3c34c9f0c54d5744/compiler%2Frustc_ast%2Fsrc%2Fexpand%2Fallocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd7a15971069156f1741fb3a3c34c9f0c54d5744/compiler%2Frustc_ast%2Fsrc%2Fexpand%2Fallocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fexpand%2Fallocator.rs?ref=fd7a15971069156f1741fb3a3c34c9f0c54d5744", "patch": "@@ -9,8 +9,8 @@ pub enum AllocatorKind {\n impl AllocatorKind {\n     pub fn fn_name(&self, base: Symbol) -> String {\n         match *self {\n-            AllocatorKind::Global => format!(\"__rg_{}\", base),\n-            AllocatorKind::Default => format!(\"__rdl_{}\", base),\n+            AllocatorKind::Global => format!(\"__rg_{base}\"),\n+            AllocatorKind::Default => format!(\"__rdl_{base}\"),\n         }\n     }\n }"}, {"sha": "f947ae4d05732f341632abeddcc61af32c7fb07c", "filename": "compiler/rustc_ast/src/token.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/fd7a15971069156f1741fb3a3c34c9f0c54d5744/compiler%2Frustc_ast%2Fsrc%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd7a15971069156f1741fb3a3c34c9f0c54d5744/compiler%2Frustc_ast%2Fsrc%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Ftoken.rs?ref=fd7a15971069156f1741fb3a3c34c9f0c54d5744", "patch": "@@ -125,27 +125,27 @@ impl fmt::Display for Lit {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         let Lit { kind, symbol, suffix } = *self;\n         match kind {\n-            Byte => write!(f, \"b'{}'\", symbol)?,\n-            Char => write!(f, \"'{}'\", symbol)?,\n-            Str => write!(f, \"\\\"{}\\\"\", symbol)?,\n+            Byte => write!(f, \"b'{symbol}'\")?,\n+            Char => write!(f, \"'{symbol}'\")?,\n+            Str => write!(f, \"\\\"{symbol}\\\"\")?,\n             StrRaw(n) => write!(\n                 f,\n                 \"r{delim}\\\"{string}\\\"{delim}\",\n                 delim = \"#\".repeat(n as usize),\n                 string = symbol\n             )?,\n-            ByteStr => write!(f, \"b\\\"{}\\\"\", symbol)?,\n+            ByteStr => write!(f, \"b\\\"{symbol}\\\"\")?,\n             ByteStrRaw(n) => write!(\n                 f,\n                 \"br{delim}\\\"{string}\\\"{delim}\",\n                 delim = \"#\".repeat(n as usize),\n                 string = symbol\n             )?,\n-            Integer | Float | Bool | Err => write!(f, \"{}\", symbol)?,\n+            Integer | Float | Bool | Err => write!(f, \"{symbol}\")?,\n         }\n \n         if let Some(suffix) = suffix {\n-            write!(f, \"{}\", suffix)?;\n+            write!(f, \"{suffix}\")?;\n         }\n \n         Ok(())\n@@ -756,7 +756,7 @@ impl Token {\n                 _ => return None,\n             },\n             SingleQuote => match joint.kind {\n-                Ident(name, false) => Lifetime(Symbol::intern(&format!(\"'{}\", name))),\n+                Ident(name, false) => Lifetime(Symbol::intern(&format!(\"'{name}\"))),\n                 _ => return None,\n             },\n "}, {"sha": "fabd43a1618a4387fa8af8680fe8a52f17af90d1", "filename": "compiler/rustc_ast/src/tokenstream.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fd7a15971069156f1741fb3a3c34c9f0c54d5744/compiler%2Frustc_ast%2Fsrc%2Ftokenstream.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd7a15971069156f1741fb3a3c34c9f0c54d5744/compiler%2Frustc_ast%2Fsrc%2Ftokenstream.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Ftokenstream.rs?ref=fd7a15971069156f1741fb3a3c34c9f0c54d5744", "patch": "@@ -258,8 +258,7 @@ impl AttrTokenStream {\n \n                         assert!(\n                             found,\n-                            \"Failed to find trailing delimited group in: {:?}\",\n-                            target_tokens\n+                            \"Failed to find trailing delimited group in: {target_tokens:?}\"\n                         );\n                     }\n                     let mut flat: SmallVec<[_; 1]> = SmallVec::new();"}, {"sha": "74b842ac96eacd935fe92d2eeae6f22cb2c45927", "filename": "compiler/rustc_ast/src/util/literal.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fd7a15971069156f1741fb3a3c34c9f0c54d5744/compiler%2Frustc_ast%2Fsrc%2Futil%2Fliteral.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd7a15971069156f1741fb3a3c34c9f0c54d5744/compiler%2Frustc_ast%2Fsrc%2Futil%2Fliteral.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Futil%2Fliteral.rs?ref=fd7a15971069156f1741fb3a3c34c9f0c54d5744", "patch": "@@ -168,7 +168,7 @@ impl fmt::Display for LitKind {\n         match *self {\n             LitKind::Byte(b) => {\n                 let b: String = ascii::escape_default(b).map(Into::<char>::into).collect();\n-                write!(f, \"b'{}'\", b)?;\n+                write!(f, \"b'{b}'\")?;\n             }\n             LitKind::Char(ch) => write!(f, \"'{}'\", escape_char_symbol(ch))?,\n             LitKind::Str(sym, StrStyle::Cooked) => write!(f, \"\\\"{}\\\"\", escape_string_symbol(sym))?,\n@@ -192,15 +192,15 @@ impl fmt::Display for LitKind {\n                 )?;\n             }\n             LitKind::Int(n, ty) => {\n-                write!(f, \"{}\", n)?;\n+                write!(f, \"{n}\")?;\n                 match ty {\n                     ast::LitIntType::Unsigned(ty) => write!(f, \"{}\", ty.name())?,\n                     ast::LitIntType::Signed(ty) => write!(f, \"{}\", ty.name())?,\n                     ast::LitIntType::Unsuffixed => {}\n                 }\n             }\n             LitKind::Float(symbol, ty) => {\n-                write!(f, \"{}\", symbol)?;\n+                write!(f, \"{symbol}\")?;\n                 match ty {\n                     ast::LitFloatType::Suffixed(ty) => write!(f, \"{}\", ty.name())?,\n                     ast::LitFloatType::Unsuffixed => {}"}, {"sha": "941d3179587ebea510fc29bd4049f26212eb75c9", "filename": "compiler/rustc_ast_lowering/src/asm.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fd7a15971069156f1741fb3a3c34c9f0c54d5744/compiler%2Frustc_ast_lowering%2Fsrc%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd7a15971069156f1741fb3a3c34c9f0c54d5744/compiler%2Frustc_ast_lowering%2Fsrc%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fasm.rs?ref=fd7a15971069156f1741fb3a3c34c9f0c54d5744", "patch": "@@ -104,7 +104,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                     Err(supported_abis) => {\n                         let mut abis = format!(\"`{}`\", supported_abis[0]);\n                         for m in &supported_abis[1..] {\n-                            let _ = write!(abis, \", `{}`\", m);\n+                            let _ = write!(abis, \", `{m}`\");\n                         }\n                         self.tcx.sess.emit_err(InvalidAbiClobberAbi {\n                             abi_span: *abi_span,\n@@ -262,7 +262,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                             let sub = if !valid_modifiers.is_empty() {\n                                 let mut mods = format!(\"`{}`\", valid_modifiers[0]);\n                                 for m in &valid_modifiers[1..] {\n-                                    let _ = write!(mods, \", `{}`\", m);\n+                                    let _ = write!(mods, \", `{m}`\");\n                                 }\n                                 InvalidAsmTemplateModifierRegClassSub::SupportModifier {\n                                     class_name: class.name(),"}, {"sha": "ea30bed5ace4f208584812a885da055d96f98c42", "filename": "compiler/rustc_ast_lowering/src/item.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fd7a15971069156f1741fb3a3c34c9f0c54d5744/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd7a15971069156f1741fb3a3c34c9f0c54d5744/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs?ref=fd7a15971069156f1741fb3a3c34c9f0c54d5744", "patch": "@@ -1051,7 +1051,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                     }\n                     _ => {\n                         // Replace the ident for bindings that aren't simple.\n-                        let name = format!(\"__arg{}\", index);\n+                        let name = format!(\"__arg{index}\");\n                         let ident = Ident::from_str(&name);\n \n                         (ident, false)"}, {"sha": "2e135aafb1e0f36856dce96b87ab3251424a6a50", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fd7a15971069156f1741fb3a3c34c9f0c54d5744/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd7a15971069156f1741fb3a3c34c9f0c54d5744/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=fd7a15971069156f1741fb3a3c34c9f0c54d5744", "patch": "@@ -296,7 +296,7 @@ impl std::fmt::Display for ImplTraitPosition {\n             ImplTraitPosition::ImplReturn => \"`impl` method return\",\n         };\n \n-        write!(f, \"{}\", name)\n+        write!(f, \"{name}\")\n     }\n }\n \n@@ -503,7 +503,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n \n     fn orig_local_def_id(&self, node: NodeId) -> LocalDefId {\n         self.orig_opt_local_def_id(node)\n-            .unwrap_or_else(|| panic!(\"no entry for node id: `{:?}`\", node))\n+            .unwrap_or_else(|| panic!(\"no entry for node id: `{node:?}`\"))\n     }\n \n     /// Given the id of some node in the AST, finds the `LocalDefId` associated with it by the name\n@@ -524,7 +524,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n     }\n \n     fn local_def_id(&self, node: NodeId) -> LocalDefId {\n-        self.opt_local_def_id(node).unwrap_or_else(|| panic!(\"no entry for node id: `{:?}`\", node))\n+        self.opt_local_def_id(node).unwrap_or_else(|| panic!(\"no entry for node id: `{node:?}`\"))\n     }\n \n     /// Get the previously recorded `to` local def id given the `from` local def id, obtained using\n@@ -2197,7 +2197,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n     fn lower_trait_ref(&mut self, p: &TraitRef, itctx: &ImplTraitContext) -> hir::TraitRef<'hir> {\n         let path = match self.lower_qpath(p.ref_id, &None, &p.path, ParamMode::Explicit, itctx) {\n             hir::QPath::Resolved(None, path) => path,\n-            qpath => panic!(\"lower_trait_ref: unexpected QPath `{:?}`\", qpath),\n+            qpath => panic!(\"lower_trait_ref: unexpected QPath `{qpath:?}`\"),\n         };\n         hir::TraitRef { path, hir_ref_id: self.lower_node_id(p.ref_id) }\n     }"}, {"sha": "6a8064b0e874e84fc7731af56d705b41457d861d", "filename": "compiler/rustc_ast_pretty/src/pprust/state.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/fd7a15971069156f1741fb3a3c34c9f0c54d5744/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd7a15971069156f1741fb3a3c34c9f0c54d5744/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs?ref=fd7a15971069156f1741fb3a3c34c9f0c54d5744", "patch": "@@ -191,23 +191,23 @@ fn doc_comment_to_string(\n     data: Symbol,\n ) -> String {\n     match (comment_kind, attr_style) {\n-        (CommentKind::Line, ast::AttrStyle::Outer) => format!(\"///{}\", data),\n-        (CommentKind::Line, ast::AttrStyle::Inner) => format!(\"//!{}\", data),\n-        (CommentKind::Block, ast::AttrStyle::Outer) => format!(\"/**{}*/\", data),\n-        (CommentKind::Block, ast::AttrStyle::Inner) => format!(\"/*!{}*/\", data),\n+        (CommentKind::Line, ast::AttrStyle::Outer) => format!(\"///{data}\"),\n+        (CommentKind::Line, ast::AttrStyle::Inner) => format!(\"//!{data}\"),\n+        (CommentKind::Block, ast::AttrStyle::Outer) => format!(\"/**{data}*/\"),\n+        (CommentKind::Block, ast::AttrStyle::Inner) => format!(\"/*!{data}*/\"),\n     }\n }\n \n pub fn literal_to_string(lit: token::Lit) -> String {\n     let token::Lit { kind, symbol, suffix } = lit;\n     let mut out = match kind {\n-        token::Byte => format!(\"b'{}'\", symbol),\n-        token::Char => format!(\"'{}'\", symbol),\n-        token::Str => format!(\"\\\"{}\\\"\", symbol),\n+        token::Byte => format!(\"b'{symbol}'\"),\n+        token::Char => format!(\"'{symbol}'\"),\n+        token::Str => format!(\"\\\"{symbol}\\\"\"),\n         token::StrRaw(n) => {\n             format!(\"r{delim}\\\"{string}\\\"{delim}\", delim = \"#\".repeat(n as usize), string = symbol)\n         }\n-        token::ByteStr => format!(\"b\\\"{}\\\"\", symbol),\n+        token::ByteStr => format!(\"b\\\"{symbol}\\\"\"),\n         token::ByteStrRaw(n) => {\n             format!(\"br{delim}\\\"{string}\\\"{delim}\", delim = \"#\".repeat(n as usize), string = symbol)\n         }"}, {"sha": "bf2c73a66a2cbb435e605af1c68b9321c6ecbbaa", "filename": "compiler/rustc_ast_pretty/src/pprust/state/item.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fd7a15971069156f1741fb3a3c34c9f0c54d5744/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd7a15971069156f1741fb3a3c34c9f0c54d5744/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate%2Fitem.rs?ref=fd7a15971069156f1741fb3a3c34c9f0c54d5744", "patch": "@@ -411,9 +411,9 @@ impl<'a> State<'a> {\n             ast::VisibilityKind::Restricted { path, shorthand, .. } => {\n                 let path = Self::to_string(|s| s.print_path(path, false, 0));\n                 if *shorthand && (path == \"crate\" || path == \"self\" || path == \"super\") {\n-                    self.word_nbsp(format!(\"pub({})\", path))\n+                    self.word_nbsp(format!(\"pub({path})\"))\n                 } else {\n-                    self.word_nbsp(format!(\"pub(in {})\", path))\n+                    self.word_nbsp(format!(\"pub(in {path})\"))\n                 }\n             }\n             ast::VisibilityKind::Inherited => {}"}, {"sha": "40531c1c164f207609395f15cdfcaf1c14dab9d0", "filename": "compiler/rustc_attr/src/builtin.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fd7a15971069156f1741fb3a3c34c9f0c54d5744/compiler%2Frustc_attr%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd7a15971069156f1741fb3a3c34c9f0c54d5744/compiler%2Frustc_attr%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_attr%2Fsrc%2Fbuiltin.rs?ref=fd7a15971069156f1741fb3a3c34c9f0c54d5744", "patch": "@@ -619,7 +619,7 @@ fn try_gate_cfg(name: Symbol, span: Span, sess: &ParseSess, features: Option<&Fe\n fn gate_cfg(gated_cfg: &GatedCfg, cfg_span: Span, sess: &ParseSess, features: &Features) {\n     let (cfg, feature, has_feature) = gated_cfg;\n     if !has_feature(features) && !cfg_span.allows_unstable(*feature) {\n-        let explain = format!(\"`cfg({})` is experimental and subject to change\", cfg);\n+        let explain = format!(\"`cfg({cfg})` is experimental and subject to change\");\n         feature_err(sess, *feature, cfg_span, &explain).emit();\n     }\n }\n@@ -975,7 +975,7 @@ pub fn find_repr_attrs(sess: &Session, attr: &Attribute) -> Vec<ReprAttr> {\n }\n \n pub fn parse_repr_attr(sess: &Session, attr: &Attribute) -> Vec<ReprAttr> {\n-    assert!(attr.has_name(sym::repr), \"expected `#[repr(..)]`, found: {:?}\", attr);\n+    assert!(attr.has_name(sym::repr), \"expected `#[repr(..)]`, found: {attr:?}\");\n     use ReprAttr::*;\n     let mut acc = Vec::new();\n     let diagnostic = &sess.parse_sess.span_diagnostic;"}, {"sha": "3ba7a3c5336b247de22203ade044a36814d5fcbc", "filename": "compiler/rustc_attr/src/session_diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fd7a15971069156f1741fb3a3c34c9f0c54d5744/compiler%2Frustc_attr%2Fsrc%2Fsession_diagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd7a15971069156f1741fb3a3c34c9f0c54d5744/compiler%2Frustc_attr%2Fsrc%2Fsession_diagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_attr%2Fsrc%2Fsession_diagnostics.rs?ref=fd7a15971069156f1741fb3a3c34c9f0c54d5744", "patch": "@@ -51,7 +51,7 @@ pub(crate) struct UnknownMetaItem<'a> {\n // Manual implementation to be able to format `expected` items correctly.\n impl<'a> IntoDiagnostic<'a> for UnknownMetaItem<'_> {\n     fn into_diagnostic(self, handler: &'a Handler) -> DiagnosticBuilder<'a, ErrorGuaranteed> {\n-        let expected = self.expected.iter().map(|name| format!(\"`{}`\", name)).collect::<Vec<_>>();\n+        let expected = self.expected.iter().map(|name| format!(\"`{name}`\")).collect::<Vec<_>>();\n         let mut diag = handler.struct_span_err_with_code(\n             self.span,\n             fluent::attr_unknown_meta_item,"}, {"sha": "ea2a4388b92f00296193d9403601669f9b5379cc", "filename": "compiler/rustc_data_structures/src/graph/dominators/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fd7a15971069156f1741fb3a3c34c9f0c54d5744/compiler%2Frustc_data_structures%2Fsrc%2Fgraph%2Fdominators%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd7a15971069156f1741fb3a3c34c9f0c54d5744/compiler%2Frustc_data_structures%2Fsrc%2Fgraph%2Fdominators%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fgraph%2Fdominators%2Fmod.rs?ref=fd7a15971069156f1741fb3a3c34c9f0c54d5744", "patch": "@@ -277,12 +277,12 @@ impl<Node: Idx> Dominators<Node> {\n     }\n \n     pub fn immediate_dominator(&self, node: Node) -> Node {\n-        assert!(self.is_reachable(node), \"node {:?} is not reachable\", node);\n+        assert!(self.is_reachable(node), \"node {node:?} is not reachable\");\n         self.immediate_dominators[node].unwrap()\n     }\n \n     pub fn dominators(&self, node: Node) -> Iter<'_, Node> {\n-        assert!(self.is_reachable(node), \"node {:?} is not reachable\", node);\n+        assert!(self.is_reachable(node), \"node {node:?} is not reachable\");\n         Iter { dominators: self, node: Some(node) }\n     }\n "}, {"sha": "c8e66eb672cc29b6a7b4dc670ae9e4d49ce7d3db", "filename": "compiler/rustc_data_structures/src/graph/scc/mod.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/fd7a15971069156f1741fb3a3c34c9f0c54d5744/compiler%2Frustc_data_structures%2Fsrc%2Fgraph%2Fscc%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd7a15971069156f1741fb3a3c34c9f0c54d5744/compiler%2Frustc_data_structures%2Fsrc%2Fgraph%2Fscc%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fgraph%2Fscc%2Fmod.rs?ref=fd7a15971069156f1741fb3a3c34c9f0c54d5744", "patch": "@@ -233,10 +233,9 @@ where\n             .map(G::Node::new)\n             .map(|node| match this.start_walk_from(node) {\n                 WalkReturn::Complete { scc_index } => scc_index,\n-                WalkReturn::Cycle { min_depth } => panic!(\n-                    \"`start_walk_node({:?})` returned cycle with depth {:?}\",\n-                    node, min_depth\n-                ),\n+                WalkReturn::Cycle { min_depth } => {\n+                    panic!(\"`start_walk_node({node:?})` returned cycle with depth {min_depth:?}\")\n+                }\n             })\n             .collect();\n \n@@ -272,8 +271,7 @@ where\n             NodeState::NotVisited => return None,\n \n             NodeState::InCycleWith { parent } => panic!(\n-                \"`find_state` returned `InCycleWith({:?})`, which ought to be impossible\",\n-                parent\n+                \"`find_state` returned `InCycleWith({parent:?})`, which ought to be impossible\"\n             ),\n         })\n     }\n@@ -369,7 +367,7 @@ where\n                     previous_node = previous;\n                 }\n                 // Only InCycleWith nodes were added to the reverse linked list.\n-                other => panic!(\"Invalid previous link while compressing cycle: {:?}\", other),\n+                other => panic!(\"Invalid previous link while compressing cycle: {other:?}\"),\n             }\n \n             debug!(\"find_state: parent_state = {:?}\", node_state);\n@@ -394,7 +392,7 @@ where\n                 // NotVisited can not be part of a cycle since it should\n                 // have instead gotten explored.\n                 NodeState::NotVisited | NodeState::InCycleWith { .. } => {\n-                    panic!(\"invalid parent state: {:?}\", node_state)\n+                    panic!(\"invalid parent state: {node_state:?}\")\n                 }\n             }\n         }"}, {"sha": "4b6aa116520df9f91ab1f98800c6d374dd631a6a", "filename": "compiler/rustc_data_structures/src/obligation_forest/graphviz.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fd7a15971069156f1741fb3a3c34c9f0c54d5744/compiler%2Frustc_data_structures%2Fsrc%2Fobligation_forest%2Fgraphviz.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd7a15971069156f1741fb3a3c34c9f0c54d5744/compiler%2Frustc_data_structures%2Fsrc%2Fobligation_forest%2Fgraphviz.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fobligation_forest%2Fgraphviz.rs?ref=fd7a15971069156f1741fb3a3c34c9f0c54d5744", "patch": "@@ -30,7 +30,7 @@ impl<O: ForestObligation> ObligationForest<O> {\n \n         let counter = COUNTER.fetch_add(1, Ordering::AcqRel);\n \n-        let file_path = dir.as_ref().join(format!(\"{:010}_{}.gv\", counter, description));\n+        let file_path = dir.as_ref().join(format!(\"{counter:010}_{description}.gv\"));\n \n         let mut gv_file = BufWriter::new(File::create(file_path).unwrap());\n \n@@ -47,7 +47,7 @@ impl<'a, O: ForestObligation + 'a> dot::Labeller<'a> for &'a ObligationForest<O>\n     }\n \n     fn node_id(&self, index: &Self::Node) -> dot::Id<'_> {\n-        dot::Id::new(format!(\"obligation_{}\", index)).unwrap()\n+        dot::Id::new(format!(\"obligation_{index}\")).unwrap()\n     }\n \n     fn node_label(&self, index: &Self::Node) -> dot::LabelText<'_> {"}, {"sha": "393f173908128457c7f70f01c8eddbbc8240c7cf", "filename": "compiler/rustc_data_structures/src/profiling.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fd7a15971069156f1741fb3a3c34c9f0c54d5744/compiler%2Frustc_data_structures%2Fsrc%2Fprofiling.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd7a15971069156f1741fb3a3c34c9f0c54d5744/compiler%2Frustc_data_structures%2Fsrc%2Fprofiling.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fprofiling.rs?ref=fd7a15971069156f1741fb3a3c34c9f0c54d5744", "patch": "@@ -545,7 +545,7 @@ impl SelfProfiler {\n         // length can behave as a source of entropy for heap addresses, when\n         // ASLR is disabled and the heap is otherwise determinic.\n         let pid: u32 = process::id();\n-        let filename = format!(\"{}-{:07}.rustc_profile\", crate_name, pid);\n+        let filename = format!(\"{crate_name}-{pid:07}.rustc_profile\");\n         let path = output_directory.join(&filename);\n         let profiler =\n             Profiler::with_counter(&path, measureme::counters::Counter::by_name(counter_name)?)?;"}, {"sha": "719e4e3d97443c937381903fb23e8bbb29eaa58f", "filename": "compiler/rustc_data_structures/src/small_c_str.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fd7a15971069156f1741fb3a3c34c9f0c54d5744/compiler%2Frustc_data_structures%2Fsrc%2Fsmall_c_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd7a15971069156f1741fb3a3c34c9f0c54d5744/compiler%2Frustc_data_structures%2Fsrc%2Fsmall_c_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fsmall_c_str.rs?ref=fd7a15971069156f1741fb3a3c34c9f0c54d5744", "patch": "@@ -30,7 +30,7 @@ impl SmallCStr {\n             SmallVec::from_vec(data)\n         };\n         if let Err(e) = ffi::CStr::from_bytes_with_nul(&data) {\n-            panic!(\"The string \\\"{}\\\" cannot be converted into a CStr: {}\", s, e);\n+            panic!(\"The string \\\"{s}\\\" cannot be converted into a CStr: {e}\");\n         }\n         SmallCStr { data }\n     }\n@@ -39,7 +39,7 @@ impl SmallCStr {\n     pub fn new_with_nul(s: &str) -> SmallCStr {\n         let b = s.as_bytes();\n         if let Err(e) = ffi::CStr::from_bytes_with_nul(b) {\n-            panic!(\"The string \\\"{}\\\" cannot be converted into a CStr: {}\", s, e);\n+            panic!(\"The string \\\"{s}\\\" cannot be converted into a CStr: {e}\");\n         }\n         SmallCStr { data: SmallVec::from_slice(s.as_bytes()) }\n     }\n@@ -74,7 +74,7 @@ impl<'a> FromIterator<&'a str> for SmallCStr {\n             iter.into_iter().flat_map(|s| s.as_bytes()).copied().collect::<SmallVec<_>>();\n         data.push(0);\n         if let Err(e) = ffi::CStr::from_bytes_with_nul(&data) {\n-            panic!(\"The iterator {:?} cannot be converted into a CStr: {}\", data, e);\n+            panic!(\"The iterator {data:?} cannot be converted into a CStr: {e}\");\n         }\n         Self { data }\n     }"}, {"sha": "d1a99bcaeb75452a28b497c99f1bddddea8ecd3e", "filename": "compiler/rustc_data_structures/src/vec_map.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fd7a15971069156f1741fb3a3c34c9f0c54d5744/compiler%2Frustc_data_structures%2Fsrc%2Fvec_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd7a15971069156f1741fb3a3c34c9f0c54d5744/compiler%2Frustc_data_structures%2Fsrc%2Fvec_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fvec_map.rs?ref=fd7a15971069156f1741fb3a3c34c9f0c54d5744", "patch": "@@ -71,8 +71,7 @@ where\n         // This should return just one element, otherwise it's a bug\n         assert!(\n             filter.next().is_none(),\n-            \"Collection {:#?} should have just one matching element\",\n-            self\n+            \"Collection {self:#?} should have just one matching element\"\n         );\n         Some(value)\n     }"}, {"sha": "42c97cc6a9d7418be734945a66ed3009a5004337", "filename": "compiler/rustc_driver/src/args.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fd7a15971069156f1741fb3a3c34c9f0c54d5744/compiler%2Frustc_driver%2Fsrc%2Fargs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd7a15971069156f1741fb3a3c34c9f0c54d5744/compiler%2Frustc_driver%2Fsrc%2Fargs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_driver%2Fsrc%2Fargs.rs?ref=fd7a15971069156f1741fb3a3c34c9f0c54d5744", "patch": "@@ -25,7 +25,7 @@ pub fn arg_expand_all(at_args: &[String]) -> Vec<String> {\n             Ok(arg) => args.extend(arg),\n             Err(err) => rustc_session::early_error(\n                 rustc_session::config::ErrorOutputType::default(),\n-                &format!(\"Failed to load argument file: {}\", err),\n+                &format!(\"Failed to load argument file: {err}\"),\n             ),\n         }\n     }\n@@ -42,8 +42,8 @@ impl fmt::Display for Error {\n     fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n         match self {\n             Error::Utf8Error(None) => write!(fmt, \"Utf8 error\"),\n-            Error::Utf8Error(Some(path)) => write!(fmt, \"Utf8 error in {}\", path),\n-            Error::IOError(path, err) => write!(fmt, \"IO Error: {}: {}\", path, err),\n+            Error::Utf8Error(Some(path)) => write!(fmt, \"Utf8 error in {path}\"),\n+            Error::IOError(path, err) => write!(fmt, \"IO Error: {path}: {err}\"),\n         }\n     }\n }"}, {"sha": "3cbe0052359b332971a8e4638bc40821dc8c4b72", "filename": "compiler/rustc_driver/src/lib.rs", "status": "modified", "additions": 19, "deletions": 22, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/fd7a15971069156f1741fb3a3c34c9f0c54d5744/compiler%2Frustc_driver%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd7a15971069156f1741fb3a3c34c9f0c54d5744/compiler%2Frustc_driver%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_driver%2Fsrc%2Flib.rs?ref=fd7a15971069156f1741fb3a3c34c9f0c54d5744", "patch": "@@ -486,11 +486,8 @@ impl Compilation {\n \n fn handle_explain(registry: Registry, code: &str, output: ErrorOutputType) {\n     let upper_cased_code = code.to_ascii_uppercase();\n-    let normalised = if upper_cased_code.starts_with('E') {\n-        upper_cased_code\n-    } else {\n-        format!(\"E{0:0>4}\", code)\n-    };\n+    let normalised =\n+        if upper_cased_code.starts_with('E') { upper_cased_code } else { format!(\"E{code:0>4}\") };\n     match registry.try_find_description(&normalised) {\n         Ok(Some(description)) => {\n             let mut is_in_code_block = false;\n@@ -513,14 +510,14 @@ fn handle_explain(registry: Registry, code: &str, output: ErrorOutputType) {\n             if io::stdout().is_terminal() {\n                 show_content_with_pager(&text);\n             } else {\n-                print!(\"{}\", text);\n+                print!(\"{text}\");\n             }\n         }\n         Ok(None) => {\n-            early_error(output, &format!(\"no extended information for {}\", code));\n+            early_error(output, &format!(\"no extended information for {code}\"));\n         }\n         Err(InvalidErrorCode) => {\n-            early_error(output, &format!(\"{} is not a valid error code\", code));\n+            early_error(output, &format!(\"{code} is not a valid error code\"));\n         }\n     }\n }\n@@ -552,7 +549,7 @@ fn show_content_with_pager(content: &str) {\n     // If pager fails for whatever reason, we should still print the content\n     // to standard output\n     if fallback_to_println {\n-        print!(\"{}\", content);\n+        print!(\"{content}\");\n     }\n }\n \n@@ -672,7 +669,7 @@ fn print_crate_info(\n                 );\n                 let id = rustc_session::output::find_crate_name(sess, attrs, input);\n                 if *req == PrintRequest::CrateName {\n-                    println!(\"{}\", id);\n+                    println!(\"{id}\");\n                     continue;\n                 }\n                 let crate_types = collect_crate_types(sess, attrs);\n@@ -704,7 +701,7 @@ fn print_crate_info(\n                         }\n \n                         if let Some(value) = value {\n-                            Some(format!(\"{}=\\\"{}\\\"\", name, value))\n+                            Some(format!(\"{name}=\\\"{value}\\\"\"))\n                         } else {\n                             Some(name.to_string())\n                         }\n@@ -713,7 +710,7 @@ fn print_crate_info(\n \n                 cfgs.sort();\n                 for cfg in cfgs {\n-                    println!(\"{}\", cfg);\n+                    println!(\"{cfg}\");\n                 }\n             }\n             CallingConventions => {\n@@ -739,7 +736,7 @@ fn print_crate_info(\n                     let stable = sess.target.options.supported_split_debuginfo.contains(split);\n                     let unstable_ok = sess.unstable_options();\n                     if stable || unstable_ok {\n-                        println!(\"{}\", split);\n+                        println!(\"{split}\");\n                     }\n                 }\n             }\n@@ -776,14 +773,14 @@ pub fn version_at_macro_invocation(\n ) {\n     let verbose = matches.opt_present(\"verbose\");\n \n-    println!(\"{} {}\", binary, version);\n+    println!(\"{binary} {version}\");\n \n     if verbose {\n-        println!(\"binary: {}\", binary);\n-        println!(\"commit-hash: {}\", commit_hash);\n-        println!(\"commit-date: {}\", commit_date);\n+        println!(\"binary: {binary}\");\n+        println!(\"commit-hash: {commit_hash}\");\n+        println!(\"commit-date: {commit_date}\");\n         println!(\"host: {}\", config::host_triple());\n-        println!(\"release: {}\", release);\n+        println!(\"release: {release}\");\n \n         let debug_flags = matches.opt_strs(\"Z\");\n         let backend_name = debug_flags.iter().find_map(|x| x.strip_prefix(\"codegen-backend=\"));\n@@ -1037,7 +1034,7 @@ pub fn handle_options(args: &[String]) -> Option<getopts::Matches> {\n                 .map(|&(name, ..)| ('C', name))\n                 .chain(Z_OPTIONS.iter().map(|&(name, ..)| ('Z', name)))\n                 .find(|&(_, name)| *opt == name.replace('_', \"-\"))\n-                .map(|(flag, _)| format!(\"{}. Did you mean `-{} {}`?\", e, flag, opt)),\n+                .map(|(flag, _)| format!(\"{e}. Did you mean `-{flag} {opt}`?\")),\n             _ => None,\n         };\n         early_error(ErrorOutputType::default(), &msg.unwrap_or_else(|| e.to_string()));\n@@ -1148,7 +1145,7 @@ fn extra_compiler_flags() -> Option<(Vec<String>, bool)> {\n             } else {\n                 result.push(a.to_string());\n                 match ICE_REPORT_COMPILER_FLAGS_STRIP_VALUE.iter().find(|s| option == **s) {\n-                    Some(s) => result.push(format!(\"{}=[REDACTED]\", s)),\n+                    Some(s) => result.push(format!(\"{s}=[REDACTED]\")),\n                     None => result.push(content),\n                 }\n             }\n@@ -1246,7 +1243,7 @@ pub fn report_ice(info: &panic::PanicInfo<'_>, bug_report_url: &str) {\n \n     let mut xs: Vec<Cow<'static, str>> = vec![\n         \"the compiler unexpectedly panicked. this is a bug.\".into(),\n-        format!(\"we would appreciate a bug report: {}\", bug_report_url).into(),\n+        format!(\"we would appreciate a bug report: {bug_report_url}\").into(),\n         format!(\n             \"rustc {} running on {}\",\n             util::version_str!().unwrap_or(\"unknown_version\"),\n@@ -1379,7 +1376,7 @@ pub fn main() -> ! {\n                 arg.into_string().unwrap_or_else(|arg| {\n                     early_error(\n                         ErrorOutputType::default(),\n-                        &format!(\"argument {} is not valid Unicode: {:?}\", i, arg),\n+                        &format!(\"argument {i} is not valid Unicode: {arg:?}\"),\n                     )\n                 })\n             })"}, {"sha": "b2451bc730f79f7eb1ddea06cf54708d1dc24f52", "filename": "compiler/rustc_driver/src/pretty.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fd7a15971069156f1741fb3a3c34c9f0c54d5744/compiler%2Frustc_driver%2Fsrc%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd7a15971069156f1741fb3a3c34c9f0c54d5744/compiler%2Frustc_driver%2Fsrc%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_driver%2Fsrc%2Fpretty.rs?ref=fd7a15971069156f1741fb3a3c34c9f0c54d5744", "patch": "@@ -360,7 +360,7 @@ fn get_source(input: &Input, sess: &Session) -> (String, FileName) {\n \n fn write_or_print(out: &str, ofile: Option<&Path>, sess: &Session) {\n     match ofile {\n-        None => print!(\"{}\", out),\n+        None => print!(\"{out}\"),\n         Some(p) => {\n             if let Err(e) = std::fs::write(p, out) {\n                 sess.emit_fatal(UnprettyDumpFail {\n@@ -402,7 +402,7 @@ pub fn print_after_parsing(\n         }\n         AstTree(PpAstTreeMode::Normal) => {\n             debug!(\"pretty printing AST tree\");\n-            format!(\"{:#?}\", krate)\n+            format!(\"{krate:#?}\")\n         }\n         _ => unreachable!(),\n     };\n@@ -446,7 +446,7 @@ pub fn print_after_hir_lowering<'tcx>(\n \n         AstTree(PpAstTreeMode::Expanded) => {\n             debug!(\"pretty-printing expanded AST\");\n-            format!(\"{:#?}\", krate)\n+            format!(\"{krate:#?}\")\n         }\n \n         Hir(s) => call_with_pp_support_hir(&s, tcx, move |annotation, hir_map| {"}, {"sha": "ad85231860d2de31a33af07eaf7a67bb163eedb5", "filename": "compiler/rustc_feature/src/builtin_attrs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fd7a15971069156f1741fb3a3c34c9f0c54d5744/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd7a15971069156f1741fb3a3c34c9f0c54d5744/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs?ref=fd7a15971069156f1741fb3a3c34c9f0c54d5744", "patch": "@@ -70,7 +70,7 @@ impl std::fmt::Debug for AttributeGate {\n     fn fmt(&self, fmt: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         match *self {\n             Self::Gated(ref stab, name, expl, _) => {\n-                write!(fmt, \"Gated({:?}, {}, {})\", stab, name, expl)\n+                write!(fmt, \"Gated({stab:?}, {name}, {expl})\")\n             }\n             Self::Ungated => write!(fmt, \"Ungated\"),\n         }"}, {"sha": "8e2a13a6c0ab1deed02aecbd473868ad1b65cf4e", "filename": "compiler/rustc_feature/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fd7a15971069156f1741fb3a3c34c9f0c54d5744/compiler%2Frustc_feature%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd7a15971069156f1741fb3a3c34c9f0c54d5744/compiler%2Frustc_feature%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Flib.rs?ref=fd7a15971069156f1741fb3a3c34c9f0c54d5744", "patch": "@@ -120,7 +120,7 @@ fn find_lang_feature_issue(feature: Symbol) -> Option<NonZeroU32> {\n             .find(|t| t.name == feature);\n         match found {\n             Some(found) => found.issue,\n-            None => panic!(\"feature `{}` is not declared anywhere\", feature),\n+            None => panic!(\"feature `{feature}` is not declared anywhere\"),\n         }\n     }\n }"}, {"sha": "b70a55e89533524bf82f017529f7fb536d1811df", "filename": "compiler/rustc_graphviz/src/lib.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/fd7a15971069156f1741fb3a3c34c9f0c54d5744/compiler%2Frustc_graphviz%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd7a15971069156f1741fb3a3c34c9f0c54d5744/compiler%2Frustc_graphviz%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_graphviz%2Fsrc%2Flib.rs?ref=fd7a15971069156f1741fb3a3c34c9f0c54d5744", "patch": "@@ -516,7 +516,7 @@ impl<'a> LabelText<'a> {\n         match *self {\n             LabelStr(ref s) => format!(\"\\\"{}\\\"\", s.escape_default()),\n             EscStr(ref s) => format!(\"\\\"{}\\\"\", LabelText::escape_str(s)),\n-            HtmlStr(ref s) => format!(\"<{}>\", s),\n+            HtmlStr(ref s) => format!(\"<{s}>\"),\n         }\n     }\n \n@@ -622,7 +622,7 @@ where\n     if let Some(fontname) = options.iter().find_map(|option| {\n         if let RenderOption::Fontname(fontname) = option { Some(fontname) } else { None }\n     }) {\n-        font = format!(r#\"fontname=\"{}\"\"#, fontname);\n+        font = format!(r#\"fontname=\"{fontname}\"\"#);\n         graph_attrs.push(&font[..]);\n         content_attrs.push(&font[..]);\n     }\n@@ -635,8 +635,8 @@ where\n     if !(graph_attrs.is_empty() && content_attrs.is_empty()) {\n         writeln!(w, r#\"    graph[{}];\"#, graph_attrs.join(\" \"))?;\n         let content_attrs_str = content_attrs.join(\" \");\n-        writeln!(w, r#\"    node[{}];\"#, content_attrs_str)?;\n-        writeln!(w, r#\"    edge[{}];\"#, content_attrs_str)?;\n+        writeln!(w, r#\"    node[{content_attrs_str}];\"#)?;\n+        writeln!(w, r#\"    edge[{content_attrs_str}];\"#)?;\n     }\n \n     let mut text = Vec::new();\n@@ -649,7 +649,7 @@ where\n         write!(text, \"{}\", id.as_slice()).unwrap();\n \n         if !options.contains(&RenderOption::NoNodeLabels) {\n-            write!(text, \"[label={}]\", escaped).unwrap();\n+            write!(text, \"[label={escaped}]\").unwrap();\n         }\n \n         let style = g.node_style(n);\n@@ -678,7 +678,7 @@ where\n         write!(text, \"{} -> {}\", source_id.as_slice(), target_id.as_slice()).unwrap();\n \n         if !options.contains(&RenderOption::NoEdgeLabels) {\n-            write!(text, \"[label={}]\", escaped_label).unwrap();\n+            write!(text, \"[label={escaped_label}]\").unwrap();\n         }\n \n         let style = g.edge_style(e);"}, {"sha": "921039797869feca60ee20aee3677e578998b757", "filename": "compiler/rustc_hir/src/def.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fd7a15971069156f1741fb3a3c34c9f0c54d5744/compiler%2Frustc_hir%2Fsrc%2Fdef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd7a15971069156f1741fb3a3c34c9f0c54d5744/compiler%2Frustc_hir%2Fsrc%2Fdef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fdef.rs?ref=fd7a15971069156f1741fb3a3c34c9f0c54d5744", "patch": "@@ -597,8 +597,7 @@ impl<Id> Res<Id> {\n     where\n         Id: Debug,\n     {\n-        self.opt_def_id()\n-            .unwrap_or_else(|| panic!(\"attempted .def_id() on invalid res: {:?}\", self))\n+        self.opt_def_id().unwrap_or_else(|| panic!(\"attempted .def_id() on invalid res: {self:?}\"))\n     }\n \n     /// Return `Some(..)` with the `DefId` of this `Res` if it has a ID, else `None`."}, {"sha": "21cf214e47c50d13535d11c2847b5ed4bce82e2a", "filename": "compiler/rustc_hir/src/definitions.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/fd7a15971069156f1741fb3a3c34c9f0c54d5744/compiler%2Frustc_hir%2Fsrc%2Fdefinitions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd7a15971069156f1741fb3a3c34c9f0c54d5744/compiler%2Frustc_hir%2Fsrc%2Fdefinitions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fdefinitions.rs?ref=fd7a15971069156f1741fb3a3c34c9f0c54d5744", "patch": "@@ -53,9 +53,8 @@ impl DefPathTable {\n             //\n             // See the documentation for DefPathHash for more information.\n             panic!(\n-                \"found DefPathHash collision between {:?} and {:?}. \\\n-                    Compilation cannot continue.\",\n-                def_path1, def_path2\n+                \"found DefPathHash collision between {def_path1:?} and {def_path2:?}. \\\n+                    Compilation cannot continue.\"\n             );\n         }\n \n@@ -224,7 +223,7 @@ impl DefPath {\n         let mut s = String::with_capacity(self.data.len() * 16);\n \n         for component in &self.data {\n-            write!(s, \"::{}\", component).unwrap();\n+            write!(s, \"::{component}\").unwrap();\n         }\n \n         s\n@@ -240,7 +239,7 @@ impl DefPath {\n         for component in &self.data {\n             s.extend(opt_delimiter);\n             opt_delimiter = Some('-');\n-            write!(s, \"{}\", component).unwrap();\n+            write!(s, \"{component}\").unwrap();\n         }\n \n         s\n@@ -433,7 +432,7 @@ impl fmt::Display for DefPathData {\n         match self.name() {\n             DefPathDataName::Named(name) => f.write_str(name.as_str()),\n             // FIXME(#70334): this will generate legacy {{closure}}, {{impl}}, etc\n-            DefPathDataName::Anon { namespace } => write!(f, \"{{{{{}}}}}\", namespace),\n+            DefPathDataName::Anon { namespace } => write!(f, \"{{{{{namespace}}}}}\"),\n         }\n     }\n }"}, {"sha": "3b4add0cf4d40295f1de0d41e3cf8a7ee199fc76", "filename": "compiler/rustc_hir/src/hir_id.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fd7a15971069156f1741fb3a3c34c9f0c54d5744/compiler%2Frustc_hir%2Fsrc%2Fhir_id.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd7a15971069156f1741fb3a3c34c9f0c54d5744/compiler%2Frustc_hir%2Fsrc%2Fhir_id.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir_id.rs?ref=fd7a15971069156f1741fb3a3c34c9f0c54d5744", "patch": "@@ -119,7 +119,7 @@ impl HirId {\n \n impl fmt::Display for HirId {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        write!(f, \"{:?}\", self)\n+        write!(f, \"{self:?}\")\n     }\n }\n "}, {"sha": "3e3af8395a1119e65afb8a2286df07e9785e624b", "filename": "compiler/rustc_hir_pretty/src/lib.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fd7a15971069156f1741fb3a3c34c9f0c54d5744/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd7a15971069156f1741fb3a3c34c9f0c54d5744/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs?ref=fd7a15971069156f1741fb3a3c34c9f0c54d5744", "patch": "@@ -1268,15 +1268,15 @@ impl<'a> State<'a> {\n                 hir::InlineAsmOperand::In { reg, ref expr } => {\n                     s.word(\"in\");\n                     s.popen();\n-                    s.word(format!(\"{}\", reg));\n+                    s.word(format!(\"{reg}\"));\n                     s.pclose();\n                     s.space();\n                     s.print_expr(expr);\n                 }\n                 hir::InlineAsmOperand::Out { reg, late, ref expr } => {\n                     s.word(if late { \"lateout\" } else { \"out\" });\n                     s.popen();\n-                    s.word(format!(\"{}\", reg));\n+                    s.word(format!(\"{reg}\"));\n                     s.pclose();\n                     s.space();\n                     match expr {\n@@ -1287,15 +1287,15 @@ impl<'a> State<'a> {\n                 hir::InlineAsmOperand::InOut { reg, late, ref expr } => {\n                     s.word(if late { \"inlateout\" } else { \"inout\" });\n                     s.popen();\n-                    s.word(format!(\"{}\", reg));\n+                    s.word(format!(\"{reg}\"));\n                     s.pclose();\n                     s.space();\n                     s.print_expr(expr);\n                 }\n                 hir::InlineAsmOperand::SplitInOut { reg, late, ref in_expr, ref out_expr } => {\n                     s.word(if late { \"inlateout\" } else { \"inout\" });\n                     s.popen();\n-                    s.word(format!(\"{}\", reg));\n+                    s.word(format!(\"{reg}\"));\n                     s.pclose();\n                     s.space();\n                     s.print_expr(in_expr);"}, {"sha": "15179392c88cdb9166d901fa67b180bb19acec64", "filename": "compiler/rustc_index/src/bit_set.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fd7a15971069156f1741fb3a3c34c9f0c54d5744/compiler%2Frustc_index%2Fsrc%2Fbit_set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd7a15971069156f1741fb3a3c34c9f0c54d5744/compiler%2Frustc_index%2Fsrc%2Fbit_set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_index%2Fsrc%2Fbit_set.rs?ref=fd7a15971069156f1741fb3a3c34c9f0c54d5744", "patch": "@@ -1091,7 +1091,7 @@ impl<T: Idx> ToString for BitSet<T> {\n                 assert!(mask <= 0xFF);\n                 let byte = word & mask;\n \n-                result.push_str(&format!(\"{}{:02x}\", sep, byte));\n+                result.push_str(&format!(\"{sep}{byte:02x}\"));\n \n                 if remain <= 8 {\n                     break;"}, {"sha": "d809740c6ab31f8f332fc1689931bd3652dcd338", "filename": "compiler/rustc_index/src/interval.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/fd7a15971069156f1741fb3a3c34c9f0c54d5744/compiler%2Frustc_index%2Fsrc%2Finterval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd7a15971069156f1741fb3a3c34c9f0c54d5744/compiler%2Frustc_index%2Fsrc%2Finterval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_index%2Fsrc%2Finterval.rs?ref=fd7a15971069156f1741fb3a3c34c9f0c54d5744", "patch": "@@ -135,10 +135,7 @@ impl<I: Idx> IntervalSet<I> {\n         };\n         debug_assert!(\n             self.check_invariants(),\n-            \"wrong intervals after insert {:?}..={:?} to {:?}\",\n-            start,\n-            end,\n-            self\n+            \"wrong intervals after insert {start:?}..={end:?} to {self:?}\"\n         );\n         result\n     }"}, {"sha": "7f761b005edd0946ce8e406282fa529f899268a5", "filename": "compiler/rustc_interface/src/interface.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fd7a15971069156f1741fb3a3c34c9f0c54d5744/compiler%2Frustc_interface%2Fsrc%2Finterface.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd7a15971069156f1741fb3a3c34c9f0c54d5744/compiler%2Frustc_interface%2Fsrc%2Finterface.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Finterface.rs?ref=fd7a15971069156f1741fb3a3c34c9f0c54d5744", "patch": "@@ -90,8 +90,7 @@ pub fn parse_cfgspecs(cfgspecs: Vec<String>) -> FxHashSet<(String, Option<String\n             .into_iter()\n             .map(|s| {\n                 let sess = ParseSess::with_silent_emitter(Some(format!(\n-                    \"this error occurred on the command line: `--cfg={}`\",\n-                    s\n+                    \"this error occurred on the command line: `--cfg={s}`\"\n                 )));\n                 let filename = FileName::cfg_spec_source_code(&s);\n \n@@ -150,8 +149,7 @@ pub fn parse_check_cfg(specs: Vec<String>) -> CheckCfg {\n \n         'specs: for s in specs {\n             let sess = ParseSess::with_silent_emitter(Some(format!(\n-                \"this error occurred on the command line: `--check-cfg={}`\",\n-                s\n+                \"this error occurred on the command line: `--check-cfg={s}`\"\n             )));\n             let filename = FileName::cfg_spec_source_code(&s);\n "}, {"sha": "86d56385bc9630486eed68198343e07741555ae0", "filename": "compiler/rustc_interface/src/passes.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fd7a15971069156f1741fb3a3c34c9f0c54d5744/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd7a15971069156f1741fb3a3c34c9f0c54d5744/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs?ref=fd7a15971069156f1741fb3a3c34c9f0c54d5744", "patch": "@@ -620,7 +620,7 @@ fn write_out_deps(\n         // prevents `make` from spitting out an error if a file is later\n         // deleted. For more info see #28735\n         for path in files {\n-            writeln!(file, \"{}:\", path)?;\n+            writeln!(file, \"{path}:\")?;\n         }\n \n         // Emit special comments with information about accessed environment variables.\n@@ -633,9 +633,9 @@ fn write_out_deps(\n             envs.sort_unstable();\n             writeln!(file)?;\n             for (k, v) in envs {\n-                write!(file, \"# env-dep:{}\", k)?;\n+                write!(file, \"# env-dep:{k}\")?;\n                 if let Some(v) = v {\n-                    write!(file, \"={}\", v)?;\n+                    write!(file, \"={v}\")?;\n                 }\n                 writeln!(file)?;\n             }"}, {"sha": "02a7756c8d4532077cde69573a8c3e49c1b6ba76", "filename": "compiler/rustc_interface/src/util.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/fd7a15971069156f1741fb3a3c34c9f0c54d5744/compiler%2Frustc_interface%2Fsrc%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd7a15971069156f1741fb3a3c34c9f0c54d5744/compiler%2Frustc_interface%2Fsrc%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Futil.rs?ref=fd7a15971069156f1741fb3a3c34c9f0c54d5744", "patch": "@@ -205,13 +205,13 @@ pub(crate) fn run_in_thread_pool_with_globals<F: FnOnce() -> R + Send, R: Send>(\n \n fn load_backend_from_dylib(path: &Path) -> MakeBackendFn {\n     let lib = unsafe { Library::new(path) }.unwrap_or_else(|err| {\n-        let err = format!(\"couldn't load codegen backend {:?}: {}\", path, err);\n+        let err = format!(\"couldn't load codegen backend {path:?}: {err}\");\n         early_error(ErrorOutputType::default(), &err);\n     });\n \n     let backend_sym = unsafe { lib.get::<MakeBackendFn>(b\"__rustc_codegen_backend\") }\n         .unwrap_or_else(|e| {\n-            let err = format!(\"couldn't load codegen backend: {}\", e);\n+            let err = format!(\"couldn't load codegen backend: {e}\");\n             early_error(ErrorOutputType::default(), &err);\n         });\n \n@@ -304,8 +304,7 @@ fn get_codegen_sysroot(maybe_sysroot: &Option<PathBuf>, backend_name: &str) -> M\n             .join(\"\\n* \");\n         let err = format!(\n             \"failed to find a `codegen-backends` folder \\\n-                           in the sysroot candidates:\\n* {}\",\n-            candidates\n+                           in the sysroot candidates:\\n* {candidates}\"\n         );\n         early_error(ErrorOutputType::default(), &err);\n     });\n@@ -325,7 +324,7 @@ fn get_codegen_sysroot(maybe_sysroot: &Option<PathBuf>, backend_name: &str) -> M\n \n     let expected_names = &[\n         format!(\"rustc_codegen_{}-{}\", backend_name, env!(\"CFG_RELEASE\")),\n-        format!(\"rustc_codegen_{}\", backend_name),\n+        format!(\"rustc_codegen_{backend_name}\"),\n     ];\n     for entry in d.filter_map(|e| e.ok()) {\n         let path = entry.path();\n@@ -354,7 +353,7 @@ fn get_codegen_sysroot(maybe_sysroot: &Option<PathBuf>, backend_name: &str) -> M\n     match file {\n         Some(ref s) => load_backend_from_dylib(s),\n         None => {\n-            let err = format!(\"unsupported builtin codegen backend `{}`\", backend_name);\n+            let err = format!(\"unsupported builtin codegen backend `{backend_name}`\");\n             early_error(ErrorOutputType::default(), &err);\n         }\n     }\n@@ -389,7 +388,7 @@ pub(crate) fn check_attr_crate_type(\n                             BuiltinLintDiagnostics::UnknownCrateTypes(\n                                 span,\n                                 \"did you mean\".to_string(),\n-                                format!(\"\\\"{}\\\"\", candidate),\n+                                format!(\"\\\"{candidate}\\\"\"),\n                             ),\n                         );\n                     } else {"}, {"sha": "9fe59a1d8261b15a2871dddd3a9015ca5ef6e92c", "filename": "compiler/rustc_llvm/build.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/fd7a15971069156f1741fb3a3c34c9f0c54d5744/compiler%2Frustc_llvm%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd7a15971069156f1741fb3a3c34c9f0c54d5744/compiler%2Frustc_llvm%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_llvm%2Fbuild.rs?ref=fd7a15971069156f1741fb3a3c34c9f0c54d5744", "patch": "@@ -58,7 +58,7 @@ fn restore_library_path() {\n /// Supposed to be used for all variables except those set for build scripts by cargo\n /// <https://doc.rust-lang.org/cargo/reference/environment-variables.html#environment-variables-cargo-sets-for-build-scripts>\n fn tracked_env_var_os<K: AsRef<OsStr> + Display>(key: K) -> Option<OsString> {\n-    println!(\"cargo:rerun-if-env-changed={}\", key);\n+    println!(\"cargo:rerun-if-env-changed={key}\");\n     env::var_os(key)\n }\n \n@@ -84,7 +84,7 @@ fn output(cmd: &mut Command) -> String {\n     let output = match cmd.stderr(Stdio::inherit()).output() {\n         Ok(status) => status,\n         Err(e) => {\n-            println!(\"\\n\\nfailed to execute command: {:?}\\nerror: {}\\n\\n\", cmd, e);\n+            println!(\"\\n\\nfailed to execute command: {cmd:?}\\nerror: {e}\\n\\n\");\n             std::process::exit(1);\n         }\n     };\n@@ -100,7 +100,7 @@ fn output(cmd: &mut Command) -> String {\n \n fn main() {\n     for component in REQUIRED_COMPONENTS.iter().chain(OPTIONAL_COMPONENTS.iter()) {\n-        println!(\"cargo:rustc-check-cfg=values(llvm_component,\\\"{}\\\")\", component);\n+        println!(\"cargo:rustc-check-cfg=values(llvm_component,\\\"{component}\\\")\");\n     }\n \n     if tracked_env_var_os(\"RUST_CHECK\").is_some() {\n@@ -164,12 +164,12 @@ fn main() {\n \n     for component in REQUIRED_COMPONENTS {\n         if !components.contains(component) {\n-            panic!(\"require llvm component {} but wasn't found\", component);\n+            panic!(\"require llvm component {component} but wasn't found\");\n         }\n     }\n \n     for component in components.iter() {\n-        println!(\"cargo:rustc-cfg=llvm_component=\\\"{}\\\"\", component);\n+        println!(\"cargo:rustc-cfg=llvm_component=\\\"{component}\\\"\");\n     }\n \n     // Link in our own LLVM shims, compiled with the same flags as LLVM\n@@ -283,7 +283,7 @@ fn main() {\n         }\n \n         let kind = if name.starts_with(\"LLVM\") { llvm_kind } else { \"dylib\" };\n-        println!(\"cargo:rustc-link-lib={}={}\", kind, name);\n+        println!(\"cargo:rustc-link-lib={kind}={name}\");\n     }\n \n     // LLVM ldflags\n@@ -302,11 +302,11 @@ fn main() {\n                 println!(\"cargo:rustc-link-search=native={}\", stripped.replace(&host, &target));\n             }\n         } else if let Some(stripped) = lib.strip_prefix(\"-LIBPATH:\") {\n-            println!(\"cargo:rustc-link-search=native={}\", stripped);\n+            println!(\"cargo:rustc-link-search=native={stripped}\");\n         } else if let Some(stripped) = lib.strip_prefix(\"-l\") {\n-            println!(\"cargo:rustc-link-lib={}\", stripped);\n+            println!(\"cargo:rustc-link-lib={stripped}\");\n         } else if let Some(stripped) = lib.strip_prefix(\"-L\") {\n-            println!(\"cargo:rustc-link-search=native={}\", stripped);\n+            println!(\"cargo:rustc-link-search=native={stripped}\");\n         }\n     }\n \n@@ -318,9 +318,9 @@ fn main() {\n     if let Some(s) = llvm_linker_flags {\n         for lib in s.into_string().unwrap().split_whitespace() {\n             if let Some(stripped) = lib.strip_prefix(\"-l\") {\n-                println!(\"cargo:rustc-link-lib={}\", stripped);\n+                println!(\"cargo:rustc-link-lib={stripped}\");\n             } else if let Some(stripped) = lib.strip_prefix(\"-L\") {\n-                println!(\"cargo:rustc-link-search=native={}\", stripped);\n+                println!(\"cargo:rustc-link-search=native={stripped}\");\n             }\n         }\n     }\n@@ -359,14 +359,14 @@ fn main() {\n             let path = PathBuf::from(s);\n             println!(\"cargo:rustc-link-search=native={}\", path.parent().unwrap().display());\n             if target.contains(\"windows\") {\n-                println!(\"cargo:rustc-link-lib=static:-bundle={}\", stdcppname);\n+                println!(\"cargo:rustc-link-lib=static:-bundle={stdcppname}\");\n             } else {\n-                println!(\"cargo:rustc-link-lib=static={}\", stdcppname);\n+                println!(\"cargo:rustc-link-lib=static={stdcppname}\");\n             }\n         } else if cxxflags.contains(\"stdlib=libc++\") {\n             println!(\"cargo:rustc-link-lib=c++\");\n         } else {\n-            println!(\"cargo:rustc-link-lib={}\", stdcppname);\n+            println!(\"cargo:rustc-link-lib={stdcppname}\");\n         }\n     }\n "}, {"sha": "4cac88aff640e66dff6b89b5ac1feaca2f95bec7", "filename": "compiler/rustc_log/src/lib.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fd7a15971069156f1741fb3a3c34c9f0c54d5744/compiler%2Frustc_log%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd7a15971069156f1741fb3a3c34c9f0c54d5744/compiler%2Frustc_log%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_log%2Fsrc%2Flib.rs?ref=fd7a15971069156f1741fb3a3c34c9f0c54d5744", "patch": "@@ -114,8 +114,7 @@ impl Display for Error {\n         match self {\n             Error::InvalidColorValue(value) => write!(\n                 formatter,\n-                \"invalid log color value '{}': expected one of always, never, or auto\",\n-                value,\n+                \"invalid log color value '{value}': expected one of always, never, or auto\",\n             ),\n             Error::NonUnicodeColorValue => write!(\n                 formatter,"}, {"sha": "2d62d59316387695b2152d48a6e3ae45c9dad0c7", "filename": "compiler/rustc_macros/src/diagnostics/error.rs", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/fd7a15971069156f1741fb3a3c34c9f0c54d5744/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd7a15971069156f1741fb3a3c34c9f0c54d5744/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Ferror.rs?ref=fd7a15971069156f1741fb3a3c34c9f0c54d5744", "patch": "@@ -76,11 +76,11 @@ pub(crate) fn invalid_attr(attr: &Attribute, meta: &Meta) -> Diagnostic {\n     let span = attr.span().unwrap();\n     let path = path_to_string(&attr.path);\n     match meta {\n-        Meta::Path(_) => span_err(span, &format!(\"`#[{}]` is not a valid attribute\", path)),\n+        Meta::Path(_) => span_err(span, &format!(\"`#[{path}]` is not a valid attribute\")),\n         Meta::NameValue(_) => {\n-            span_err(span, &format!(\"`#[{} = ...]` is not a valid attribute\", path))\n+            span_err(span, &format!(\"`#[{path} = ...]` is not a valid attribute\"))\n         }\n-        Meta::List(_) => span_err(span, &format!(\"`#[{}(...)]` is not a valid attribute\", path)),\n+        Meta::List(_) => span_err(span, &format!(\"`#[{path}(...)]` is not a valid attribute\")),\n     }\n }\n \n@@ -107,21 +107,19 @@ pub(crate) fn invalid_nested_attr(attr: &Attribute, nested: &NestedMeta) -> Diag\n     let meta = match nested {\n         syn::NestedMeta::Meta(meta) => meta,\n         syn::NestedMeta::Lit(_) => {\n-            return span_err(span, &format!(\"`#[{}(\\\"...\\\")]` is not a valid attribute\", name));\n+            return span_err(span, &format!(\"`#[{name}(\\\"...\\\")]` is not a valid attribute\"));\n         }\n     };\n \n     let span = meta.span().unwrap();\n     let path = path_to_string(meta.path());\n     match meta {\n         Meta::NameValue(..) => {\n-            span_err(span, &format!(\"`#[{}({} = ...)]` is not a valid attribute\", name, path))\n-        }\n-        Meta::Path(..) => {\n-            span_err(span, &format!(\"`#[{}({})]` is not a valid attribute\", name, path))\n+            span_err(span, &format!(\"`#[{name}({path} = ...)]` is not a valid attribute\"))\n         }\n+        Meta::Path(..) => span_err(span, &format!(\"`#[{name}({path})]` is not a valid attribute\")),\n         Meta::List(..) => {\n-            span_err(span, &format!(\"`#[{}({}(...))]` is not a valid attribute\", name, path))\n+            span_err(span, &format!(\"`#[{name}({path}(...))]` is not a valid attribute\"))\n         }\n     }\n }"}, {"sha": "32338f9dfc5e3893c833eb754769309379b6f1e9", "filename": "compiler/rustc_macros/src/diagnostics/fluent.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fd7a15971069156f1741fb3a3c34c9f0c54d5744/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Ffluent.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd7a15971069156f1741fb3a3c34c9f0c54d5744/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Ffluent.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Ffluent.rs?ref=fd7a15971069156f1741fb3a3c34c9f0c54d5744", "patch": "@@ -178,7 +178,7 @@ pub(crate) fn fluent_messages(input: proc_macro::TokenStream) -> proc_macro::Tok\n                         opt: Default::default(),\n                     };\n                     let dl = DisplayList::from(snippet);\n-                    eprintln!(\"{}\\n\", dl);\n+                    eprintln!(\"{dl}\\n\");\n                 }\n                 continue;\n             }\n@@ -265,7 +265,7 @@ pub(crate) fn fluent_messages(input: proc_macro::TokenStream) -> proc_macro::Tok\n                         Diagnostic::spanned(\n                             path_span,\n                             Level::Error,\n-                            format!(\"overrides existing {}: `{}`\", kind, id),\n+                            format!(\"overrides existing {kind}: `{id}`\"),\n                         )\n                         .span_help(previous_defns[&id], \"previously defined in this resource\")\n                         .emit();"}, {"sha": "baffd3cec9c55394dfea79608bb7c3fe840e04c9", "filename": "compiler/rustc_macros/src/diagnostics/subdiagnostic.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fd7a15971069156f1741fb3a3c34c9f0c54d5744/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fsubdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd7a15971069156f1741fb3a3c34c9f0c54d5744/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fsubdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fsubdiagnostic.rs?ref=fd7a15971069156f1741fb3a3c34c9f0c54d5744", "patch": "@@ -198,8 +198,7 @@ impl<'parent, 'a> SubdiagnosticDeriveVariantBuilder<'parent, 'a> {\n                 throw_span_err!(\n                     attr.span().unwrap(),\n                     &format!(\n-                        \"diagnostic slug must be first argument of a `#[{}(...)]` attribute\",\n-                        name\n+                        \"diagnostic slug must be first argument of a `#[{name}(...)]` attribute\"\n                     )\n                 );\n             };"}, {"sha": "6f52a3de1b151ad26c833937addc22fd38753038", "filename": "compiler/rustc_macros/src/diagnostics/utils.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fd7a15971069156f1741fb3a3c34c9f0c54d5744/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd7a15971069156f1741fb3a3c34c9f0c54d5744/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Futils.rs?ref=fd7a15971069156f1741fb3a3c34c9f0c54d5744", "patch": "@@ -322,7 +322,7 @@ pub(crate) trait HasFieldMap {\n                 None => {\n                     span_err(\n                         span.unwrap(),\n-                        &format!(\"`{}` doesn't refer to a field on this type\", field),\n+                        &format!(\"`{field}` doesn't refer to a field on this type\"),\n                     )\n                     .emit();\n                     quote! {\n@@ -603,8 +603,7 @@ impl SubdiagnosticKind {\n                     if suggestion_kind != SuggestionKind::Normal {\n                         invalid_attr(attr, &meta)\n                             .help(format!(\n-                                r#\"Use `#[suggestion(..., style = \"{}\")]` instead\"#,\n-                                suggestion_kind\n+                                r#\"Use `#[suggestion(..., style = \"{suggestion_kind}\")]` instead\"#\n                             ))\n                             .emit();\n                     }\n@@ -621,8 +620,7 @@ impl SubdiagnosticKind {\n                     if suggestion_kind != SuggestionKind::Normal {\n                         invalid_attr(attr, &meta)\n                             .help(format!(\n-                                r#\"Use `#[multipart_suggestion(..., style = \"{}\")]` instead\"#,\n-                                suggestion_kind\n+                                r#\"Use `#[multipart_suggestion(..., style = \"{suggestion_kind}\")]` instead\"#\n                             ))\n                             .emit();\n                     }"}, {"sha": "89ea89cf502e5e4c2723be0c371b2794c2ff84db", "filename": "compiler/rustc_macros/src/newtype.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fd7a15971069156f1741fb3a3c34c9f0c54d5744/compiler%2Frustc_macros%2Fsrc%2Fnewtype.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd7a15971069156f1741fb3a3c34c9f0c54d5744/compiler%2Frustc_macros%2Fsrc%2Fnewtype.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Fnewtype.rs?ref=fd7a15971069156f1741fb3a3c34c9f0c54d5744", "patch": "@@ -41,7 +41,7 @@ impl Parse for Newtype {\n                     };\n \n                     if let Some(old) = max.replace(literal.lit) {\n-                        panic!(\"Specified multiple max: {:?}\", old);\n+                        panic!(\"Specified multiple max: {old:?}\");\n                     }\n \n                     false\n@@ -52,7 +52,7 @@ impl Parse for Newtype {\n                     };\n \n                     if let Some(old) = debug_format.replace(literal.lit) {\n-                        panic!(\"Specified multiple debug format options: {:?}\", old);\n+                        panic!(\"Specified multiple debug format options: {old:?}\");\n                     }\n \n                     false"}, {"sha": "08e42a8a08f92b469ec6f1c64258351c9d0a1889", "filename": "compiler/rustc_macros/src/query.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fd7a15971069156f1741fb3a3c34c9f0c54d5744/compiler%2Frustc_macros%2Fsrc%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd7a15971069156f1741fb3a3c34c9f0c54d5744/compiler%2Frustc_macros%2Fsrc%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Fquery.rs?ref=fd7a15971069156f1741fb3a3c34c9f0c54d5744", "patch": "@@ -239,7 +239,7 @@ fn doc_comment_from_desc(list: &Punctuated<Expr, token::Comma>) -> Result<Attrib\n             .unwrap();\n         },\n     );\n-    let doc_string = format!(\"[query description - consider adding a doc-comment!] {}\", doc_string);\n+    let doc_string = format!(\"[query description - consider adding a doc-comment!] {doc_string}\");\n     Ok(parse_quote! { #[doc = #doc_string] })\n }\n "}, {"sha": "04facbf657d225d0b7c3bb9bcf62b6acaaaab691", "filename": "compiler/rustc_macros/src/symbols.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fd7a15971069156f1741fb3a3c34c9f0c54d5744/compiler%2Frustc_macros%2Fsrc%2Fsymbols.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd7a15971069156f1741fb3a3c34c9f0c54d5744/compiler%2Frustc_macros%2Fsrc%2Fsymbols.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Fsymbols.rs?ref=fd7a15971069156f1741fb3a3c34c9f0c54d5744", "patch": "@@ -134,7 +134,7 @@ fn symbols_with_errors(input: TokenStream) -> (TokenStream, Vec<syn::Error>) {\n \n     let mut check_dup = |span: Span, str: &str, errors: &mut Errors| {\n         if let Some(prev_span) = keys.get(str) {\n-            errors.error(span, format!(\"Symbol `{}` is duplicated\", str));\n+            errors.error(span, format!(\"Symbol `{str}` is duplicated\"));\n             errors.error(*prev_span, \"location of previous definition\".to_string());\n         } else {\n             keys.insert(str.to_string(), span);\n@@ -144,8 +144,8 @@ fn symbols_with_errors(input: TokenStream) -> (TokenStream, Vec<syn::Error>) {\n     let mut check_order = |span: Span, str: &str, errors: &mut Errors| {\n         if let Some((prev_span, ref prev_str)) = prev_key {\n             if str < prev_str {\n-                errors.error(span, format!(\"Symbol `{}` must precede `{}`\", str, prev_str));\n-                errors.error(prev_span, format!(\"location of previous symbol `{}`\", prev_str));\n+                errors.error(span, format!(\"Symbol `{str}` must precede `{prev_str}`\"));\n+                errors.error(prev_span, format!(\"location of previous symbol `{prev_str}`\"));\n             }\n         }\n         prev_key = Some((span, str.to_string()));"}, {"sha": "653f2b39d3e74f646e22b01133ff4afe25f29bf4", "filename": "compiler/rustc_metadata/src/creader.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fd7a15971069156f1741fb3a3c34c9f0c54d5744/compiler%2Frustc_metadata%2Fsrc%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd7a15971069156f1741fb3a3c34c9f0c54d5744/compiler%2Frustc_metadata%2Fsrc%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Fcreader.rs?ref=fd7a15971069156f1741fb3a3c34c9f0c54d5744", "patch": "@@ -112,7 +112,7 @@ impl<'a> std::fmt::Debug for CrateDump<'a> {\n         writeln!(fmt, \"resolved crates:\")?;\n         for (cnum, data) in self.0.iter_crate_data() {\n             writeln!(fmt, \"  name: {}\", data.name())?;\n-            writeln!(fmt, \"  cnum: {}\", cnum)?;\n+            writeln!(fmt, \"  cnum: {cnum}\")?;\n             writeln!(fmt, \"  hash: {}\", data.hash())?;\n             writeln!(fmt, \"  reqd: {:?}\", data.dep_kind())?;\n             let CrateSource { dylib, rlib, rmeta } = data.source();\n@@ -150,7 +150,7 @@ impl CStore {\n     pub(crate) fn get_crate_data(&self, cnum: CrateNum) -> CrateMetadataRef<'_> {\n         let cdata = self.metas[cnum]\n             .as_ref()\n-            .unwrap_or_else(|| panic!(\"Failed to get crate data for {:?}\", cnum));\n+            .unwrap_or_else(|| panic!(\"Failed to get crate data for {cnum:?}\"));\n         CrateMetadataRef { cdata, cstore: self }\n     }\n "}, {"sha": "59869ee417377635ff55a3093aa64ebb3f2779ca", "filename": "compiler/rustc_metadata/src/native_libs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fd7a15971069156f1741fb3a3c34c9f0c54d5744/compiler%2Frustc_metadata%2Fsrc%2Fnative_libs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd7a15971069156f1741fb3a3c34c9f0c54d5744/compiler%2Frustc_metadata%2Fsrc%2Fnative_libs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Fnative_libs.rs?ref=fd7a15971069156f1741fb3a3c34c9f0c54d5744", "patch": "@@ -45,7 +45,7 @@ pub fn find_native_static_library(\n \n     for path in search_paths {\n         for (prefix, suffix) in &formats {\n-            let test = path.join(format!(\"{}{}{}\", prefix, name, suffix));\n+            let test = path.join(format!(\"{prefix}{name}{suffix}\"));\n             if test.exists() {\n                 return test;\n             }"}, {"sha": "143d8f2f1e18d1fca476640d18af792bcfecf2c1", "filename": "compiler/rustc_metadata/src/rmeta/decoder.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fd7a15971069156f1741fb3a3c34c9f0c54d5744/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd7a15971069156f1741fb3a3c34c9f0c54d5744/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs?ref=fd7a15971069156f1741fb3a3c34c9f0c54d5744", "patch": "@@ -462,7 +462,7 @@ impl<'a, 'tcx> Decodable<DecodeContext<'a, 'tcx>> for SyntaxContext {\n                 .root\n                 .syntax_contexts\n                 .get(cdata, id)\n-                .unwrap_or_else(|| panic!(\"Missing SyntaxContext {:?} for crate {:?}\", id, cname))\n+                .unwrap_or_else(|| panic!(\"Missing SyntaxContext {id:?} for crate {cname:?}\"))\n                 .decode((cdata, sess))\n         })\n     }\n@@ -806,7 +806,7 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n             .tables\n             .def_span\n             .get(self, index)\n-            .unwrap_or_else(|| panic!(\"Missing span for {:?}\", index))\n+            .unwrap_or_else(|| panic!(\"Missing span for {index:?}\"))\n             .decode((self, sess))\n     }\n \n@@ -1249,7 +1249,7 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n             .tables\n             .proc_macro_quoted_spans\n             .get(self, index)\n-            .unwrap_or_else(|| panic!(\"Missing proc macro quoted span: {:?}\", index))\n+            .unwrap_or_else(|| panic!(\"Missing proc macro quoted span: {index:?}\"))\n             .decode((self, sess))\n     }\n "}, {"sha": "cb451931dfe179d51047b73036f80a9f16c14865", "filename": "compiler/rustc_metadata/src/rmeta/decoder/cstore_impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fd7a15971069156f1741fb3a3c34c9f0c54d5744/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd7a15971069156f1741fb3a3c34c9f0c54d5744/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs?ref=fd7a15971069156f1741fb3a3c34c9f0c54d5744", "patch": "@@ -230,7 +230,7 @@ provide! { tcx, def_id, other, cdata,\n             .trait_impl_trait_tys\n             .get(cdata, def_id.index)\n             .map(|lazy| lazy.decode((cdata, tcx)))\n-            .process_decoded(tcx, || panic!(\"{:?} does not have trait_impl_trait_tys\", def_id)))\n+            .process_decoded(tcx, || panic!(\"{def_id:?} does not have trait_impl_trait_tys\")))\n      }\n \n     visibility => { cdata.get_visibility(def_id.index) }"}, {"sha": "a6133f1b417af89bea3b1526fcb2ad97edd164d0", "filename": "compiler/rustc_metadata/src/rmeta/def_path_hash_map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fd7a15971069156f1741fb3a3c34c9f0c54d5744/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdef_path_hash_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd7a15971069156f1741fb3a3c34c9f0c54d5744/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdef_path_hash_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdef_path_hash_map.rs?ref=fd7a15971069156f1741fb3a3c34c9f0c54d5744", "patch": "@@ -58,7 +58,7 @@ impl<'a, 'tcx> Decodable<DecodeContext<'a, 'tcx>> for DefPathHashMapRef<'static>\n         let _ = d.read_raw_bytes(len);\n \n         let inner = odht::HashTable::from_raw_bytes(o).unwrap_or_else(|e| {\n-            panic!(\"decode error: {}\", e);\n+            panic!(\"decode error: {e}\");\n         });\n         DefPathHashMapRef::OwnedFromMetadata(inner)\n     }"}, {"sha": "0d9f216700fb1fc825eb704e388ed849a11652ee", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 6, "deletions": 12, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/fd7a15971069156f1741fb3a3c34c9f0c54d5744/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd7a15971069156f1741fb3a3c34c9f0c54d5744/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=fd7a15971069156f1741fb3a3c34c9f0c54d5744", "patch": "@@ -145,7 +145,7 @@ impl<'a, 'tcx, I, T> Encodable<EncodeContext<'a, 'tcx>> for LazyTable<I, T> {\n impl<'a, 'tcx> Encodable<EncodeContext<'a, 'tcx>> for CrateNum {\n     fn encode(&self, s: &mut EncodeContext<'a, 'tcx>) {\n         if *self != LOCAL_CRATE && s.is_proc_macro {\n-            panic!(\"Attempted to encode non-local CrateNum {:?} for proc-macro crate\", self);\n+            panic!(\"Attempted to encode non-local CrateNum {self:?} for proc-macro crate\");\n         }\n         s.emit_u32(self.as_u32());\n     }\n@@ -276,7 +276,7 @@ impl<'a, 'tcx> Encodable<EncodeContext<'a, 'tcx>> for Span {\n                 // Introduce a new scope so that we drop the 'lock()' temporary\n                 match &*source_file.external_src.lock() {\n                     ExternalSource::Foreign { metadata_index, .. } => *metadata_index,\n-                    src => panic!(\"Unexpected external source {:?}\", src),\n+                    src => panic!(\"Unexpected external source {src:?}\"),\n                 }\n             };\n \n@@ -733,12 +733,9 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n             let prefix = \"meta-stats\";\n             let perc = |bytes| (bytes * 100) as f64 / total_bytes as f64;\n \n-            eprintln!(\"{} METADATA STATS\", prefix);\n+            eprintln!(\"{prefix} METADATA STATS\");\n             eprintln!(\"{} {:<23}{:>10}\", prefix, \"Section\", \"Size\");\n-            eprintln!(\n-                \"{} ----------------------------------------------------------------\",\n-                prefix\n-            );\n+            eprintln!(\"{prefix} ----------------------------------------------------------------\");\n             for (label, size) in stats {\n                 eprintln!(\n                     \"{} {:<23}{:>10} ({:4.1}%)\",\n@@ -748,18 +745,15 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n                     perc(size)\n                 );\n             }\n-            eprintln!(\n-                \"{} ----------------------------------------------------------------\",\n-                prefix\n-            );\n+            eprintln!(\"{prefix} ----------------------------------------------------------------\");\n             eprintln!(\n                 \"{} {:<23}{:>10} (of which {:.1}% are zero bytes)\",\n                 prefix,\n                 \"Total\",\n                 to_readable_str(total_bytes),\n                 perc(zero_bytes)\n             );\n-            eprintln!(\"{}\", prefix);\n+            eprintln!(\"{prefix}\");\n         }\n \n         root"}, {"sha": "490be166a91d9269926ed46249b010c04087ddaf", "filename": "compiler/rustc_mir_dataflow/src/framework/fmt.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fd7a15971069156f1741fb3a3c34c9f0c54d5744/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Ffmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd7a15971069156f1741fb3a3c34c9f0c54d5744/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Ffmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Ffmt.rs?ref=fd7a15971069156f1741fb3a3c34c9f0c54d5744", "patch": "@@ -143,7 +143,7 @@ where\n             \", \"\n         };\n \n-        write!(f, \"{}\", delim)?;\n+        write!(f, \"{delim}\")?;\n         idx.fmt_with(ctxt, f)?;\n         first = false;\n     }\n@@ -164,7 +164,7 @@ where\n             \", \"\n         };\n \n-        write!(f, \"{}\", delim)?;\n+        write!(f, \"{delim}\")?;\n         idx.fmt_with(ctxt, f)?;\n         first = false;\n     }"}, {"sha": "96c42894b697e77358f997e24e847342aaa76354", "filename": "compiler/rustc_mir_dataflow/src/framework/graphviz.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/fd7a15971069156f1741fb3a3c34c9f0c54d5744/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Fgraphviz.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd7a15971069156f1741fb3a3c34c9f0c54d5744/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Fgraphviz.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Fgraphviz.rs?ref=fd7a15971069156f1741fb3a3c34c9f0c54d5744", "patch": "@@ -71,7 +71,7 @@ where\n \n     fn graph_id(&self) -> dot::Id<'_> {\n         let name = graphviz_safe_def_name(self.body.source.def_id());\n-        dot::Id::new(format!(\"graph_for_def_id_{}\", name)).unwrap()\n+        dot::Id::new(format!(\"graph_for_def_id_{name}\")).unwrap()\n     }\n \n     fn node_id(&self, n: &Self::Node) -> dot::Id<'_> {\n@@ -190,7 +190,7 @@ where\n             \" cellpadding=\\\"3\\\"\",\n             \" sides=\\\"rb\\\"\",\n         );\n-        write!(w, r#\"<table{fmt}>\"#, fmt = table_fmt)?;\n+        write!(w, r#\"<table{table_fmt}>\"#)?;\n \n         // A + B: Block header\n         match self.style {\n@@ -372,7 +372,7 @@ where\n         write!(w, concat!(\"<tr>\", r#\"<td colspan=\"2\" {fmt}>MIR</td>\"#,), fmt = fmt,)?;\n \n         for name in state_column_names {\n-            write!(w, \"<td {fmt}>{name}</td>\", fmt = fmt, name = name)?;\n+            write!(w, \"<td {fmt}>{name}</td>\")?;\n         }\n \n         write!(w, \"</tr>\")\n@@ -394,18 +394,18 @@ where\n         };\n \n         for (i, statement) in body[block].statements.iter().enumerate() {\n-            let statement_str = format!(\"{:?}\", statement);\n-            let index_str = format!(\"{}\", i);\n+            let statement_str = format!(\"{statement:?}\");\n+            let index_str = format!(\"{i}\");\n \n             let after = next_in_dataflow_order(&mut afters);\n             let before = befores.as_mut().map(next_in_dataflow_order);\n \n             self.write_row(w, &index_str, &statement_str, |_this, w, fmt| {\n                 if let Some(before) = before {\n-                    write!(w, r#\"<td {fmt} align=\"left\">{diff}</td>\"#, fmt = fmt, diff = before)?;\n+                    write!(w, r#\"<td {fmt} align=\"left\">{before}</td>\"#)?;\n                 }\n \n-                write!(w, r#\"<td {fmt} align=\"left\">{diff}</td>\"#, fmt = fmt, diff = after)\n+                write!(w, r#\"<td {fmt} align=\"left\">{after}</td>\"#)\n             })?;\n         }\n \n@@ -421,10 +421,10 @@ where\n \n         self.write_row(w, \"T\", &terminator_str, |_this, w, fmt| {\n             if let Some(before) = before {\n-                write!(w, r#\"<td {fmt} align=\"left\">{diff}</td>\"#, fmt = fmt, diff = before)?;\n+                write!(w, r#\"<td {fmt} align=\"left\">{before}</td>\"#)?;\n             }\n \n-            write!(w, r#\"<td {fmt} align=\"left\">{diff}</td>\"#, fmt = fmt, diff = after)\n+            write!(w, r#\"<td {fmt} align=\"left\">{after}</td>\"#)\n         })\n     }\n "}, {"sha": "5f22a418de863bbca88665d1389490cbee8b6764", "filename": "compiler/rustc_mir_dataflow/src/move_paths/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fd7a15971069156f1741fb3a3c34c9f0c54d5744/compiler%2Frustc_mir_dataflow%2Fsrc%2Fmove_paths%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd7a15971069156f1741fb3a3c34c9f0c54d5744/compiler%2Frustc_mir_dataflow%2Fsrc%2Fmove_paths%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fmove_paths%2Fmod.rs?ref=fd7a15971069156f1741fb3a3c34c9f0c54d5744", "patch": "@@ -129,13 +129,13 @@ impl<'tcx> fmt::Debug for MovePath<'tcx> {\n     fn fmt(&self, w: &mut fmt::Formatter<'_>) -> fmt::Result {\n         write!(w, \"MovePath {{\")?;\n         if let Some(parent) = self.parent {\n-            write!(w, \" parent: {:?},\", parent)?;\n+            write!(w, \" parent: {parent:?},\")?;\n         }\n         if let Some(first_child) = self.first_child {\n-            write!(w, \" first_child: {:?},\", first_child)?;\n+            write!(w, \" first_child: {first_child:?},\")?;\n         }\n         if let Some(next_sibling) = self.next_sibling {\n-            write!(w, \" next_sibling: {:?}\", next_sibling)?;\n+            write!(w, \" next_sibling: {next_sibling:?}\")?;\n         }\n         write!(w, \" place: {:?} }}\", self.place)\n     }"}, {"sha": "0522c657939f5e100c7827dd319862ce3eedaf09", "filename": "compiler/rustc_mir_dataflow/src/value_analysis.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fd7a15971069156f1741fb3a3c34c9f0c54d5744/compiler%2Frustc_mir_dataflow%2Fsrc%2Fvalue_analysis.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd7a15971069156f1741fb3a3c34c9f0c54d5744/compiler%2Frustc_mir_dataflow%2Fsrc%2Fvalue_analysis.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fvalue_analysis.rs?ref=fd7a15971069156f1741fb3a3c34c9f0c54d5744", "patch": "@@ -920,7 +920,7 @@ fn debug_with_context<V: Debug + Eq>(\n ) -> std::fmt::Result {\n     for (local, place) in map.locals.iter_enumerated() {\n         if let Some(place) = place {\n-            debug_with_context_rec(*place, &format!(\"{:?}\", local), new, old, map, f)?;\n+            debug_with_context_rec(*place, &format!(\"{local:?}\"), new, old, map, f)?;\n         }\n     }\n     Ok(())"}, {"sha": "b573df4325051306236920cdbdc7f273e3a13395", "filename": "compiler/rustc_monomorphize/src/collector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fd7a15971069156f1741fb3a3c34c9f0c54d5744/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd7a15971069156f1741fb3a3c34c9f0c54d5744/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs?ref=fd7a15971069156f1741fb3a3c34c9f0c54d5744", "patch": "@@ -526,7 +526,7 @@ fn collect_items_rec<'tcx>(\n         let formatted_item = with_no_trimmed_paths!(starting_point.node.to_string());\n         tcx.sess.span_note_without_error(\n             starting_point.span,\n-            &format!(\"the above error was encountered while instantiating `{}`\", formatted_item),\n+            &format!(\"the above error was encountered while instantiating `{formatted_item}`\"),\n         );\n     }\n     inlining_map.lock_mut().record_accesses(starting_point.node, &neighbors.items);"}, {"sha": "aa3227cac2de4ac6dd09c269019a3ab5a915d208", "filename": "compiler/rustc_monomorphize/src/errors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fd7a15971069156f1741fb3a3c34c9f0c54d5744/compiler%2Frustc_monomorphize%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd7a15971069156f1741fb3a3c34c9f0c54d5744/compiler%2Frustc_monomorphize%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Ferrors.rs?ref=fd7a15971069156f1741fb3a3c34c9f0c54d5744", "patch": "@@ -50,7 +50,7 @@ impl IntoDiagnostic<'_> for UnusedGenericParams {\n             // FIXME: I can figure out how to do a label with a fluent string with a fixed message,\n             // or a label with a dynamic value in a hard-coded string, but I haven't figured out\n             // how to combine the two. \ud83d\ude22\n-            diag.span_label(span, format!(\"generic parameter `{}` is unused\", name));\n+            diag.span_label(span, format!(\"generic parameter `{name}` is unused\"));\n         }\n         diag\n     }"}, {"sha": "fd6bcad18983a334d5b3e59eb6af2e98f4d3bacb", "filename": "compiler/rustc_monomorphize/src/partitioning/mod.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/fd7a15971069156f1741fb3a3c34c9f0c54d5744/compiler%2Frustc_monomorphize%2Fsrc%2Fpartitioning%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd7a15971069156f1741fb3a3c34c9f0c54d5744/compiler%2Frustc_monomorphize%2Fsrc%2Fpartitioning%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Fpartitioning%2Fmod.rs?ref=fd7a15971069156f1741fb3a3c34c9f0c54d5744", "patch": "@@ -285,7 +285,7 @@ where\n         use std::fmt::Write;\n \n         let s = &mut String::new();\n-        let _ = writeln!(s, \"{}\", label);\n+        let _ = writeln!(s, \"{label}\");\n         for cgu in cgus {\n             let _ =\n                 writeln!(s, \"CodegenUnit {} estimated size {} :\", cgu.name(), cgu.size_estimate());\n@@ -355,9 +355,8 @@ fn collect_and_partition_mono_items(tcx: TyCtxt<'_>, (): ()) -> (&DefIdSet, &[Co\n             } else {\n                 if mode_string != \"lazy\" {\n                     let message = format!(\n-                        \"Unknown codegen-item collection mode '{}'. \\\n-                                           Falling back to 'lazy' mode.\",\n-                        mode_string\n+                        \"Unknown codegen-item collection mode '{mode_string}'. \\\n+                                           Falling back to 'lazy' mode.\"\n                     );\n                     tcx.sess.warn(&message);\n                 }\n@@ -470,7 +469,7 @@ fn collect_and_partition_mono_items(tcx: TyCtxt<'_>, (): ()) -> (&DefIdSet, &[Co\n         item_keys.sort();\n \n         for item in item_keys {\n-            println!(\"MONO_ITEM {}\", item);\n+            println!(\"MONO_ITEM {item}\");\n         }\n     }\n \n@@ -596,6 +595,6 @@ pub fn provide(providers: &mut Providers) {\n         let (_, all) = tcx.collect_and_partition_mono_items(());\n         all.iter()\n             .find(|cgu| cgu.name() == name)\n-            .unwrap_or_else(|| panic!(\"failed to find cgu with name {:?}\", name))\n+            .unwrap_or_else(|| panic!(\"failed to find cgu with name {name:?}\"))\n     };\n }"}, {"sha": "33e1f6ce3428e96559564a6c369c34ca3cc2d2c5", "filename": "compiler/rustc_monomorphize/src/util.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fd7a15971069156f1741fb3a3c34c9f0c54d5744/compiler%2Frustc_monomorphize%2Fsrc%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd7a15971069156f1741fb3a3c34c9f0c54d5744/compiler%2Frustc_monomorphize%2Fsrc%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Futil.rs?ref=fd7a15971069156f1741fb3a3c34c9f0c54d5744", "patch": "@@ -40,12 +40,12 @@ pub(crate) fn dump_closure_profile<'tcx>(tcx: TyCtxt<'tcx>, closure_instance: In\n         let new_size = tcx\n             .layout_of(param_env.and(after_feature_tys))\n             .map(|l| format!(\"{:?}\", l.size.bytes()))\n-            .unwrap_or_else(|e| format!(\"Failed {:?}\", e));\n+            .unwrap_or_else(|e| format!(\"Failed {e:?}\"));\n \n         let old_size = tcx\n             .layout_of(param_env.and(before_feature_tys))\n             .map(|l| format!(\"{:?}\", l.size.bytes()))\n-            .unwrap_or_else(|e| format!(\"Failed {:?}\", e));\n+            .unwrap_or_else(|e| format!(\"Failed {e:?}\"));\n \n         let closure_span = tcx.def_span(closure_def_id);\n         let src_file = tcx.sess.source_map().span_to_filename(closure_span);\n@@ -54,7 +54,7 @@ pub(crate) fn dump_closure_profile<'tcx>(tcx: TyCtxt<'tcx>, closure_instance: In\n             .source_map()\n             .span_to_lines(closure_span)\n             .map(|l| format!(\"{:?} {:?}\", l.lines.first(), l.lines.last()))\n-            .unwrap_or_else(|e| format!(\"{:?}\", e));\n+            .unwrap_or_else(|e| format!(\"{e:?}\"));\n \n         if let Err(e) = writeln!(\n             file,\n@@ -64,7 +64,7 @@ pub(crate) fn dump_closure_profile<'tcx>(tcx: TyCtxt<'tcx>, closure_instance: In\n             src_file.prefer_local(),\n             line_nos\n         ) {\n-            eprintln!(\"Error writing to file {}\", e)\n+            eprintln!(\"Error writing to file {e}\")\n         }\n     }\n }"}, {"sha": "1eb227503f24236971e95f3f978f19054b7d9796", "filename": "compiler/rustc_parse_format/src/lib.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fd7a15971069156f1741fb3a3c34c9f0c54d5744/compiler%2Frustc_parse_format%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd7a15971069156f1741fb3a3c34c9f0c54d5744/compiler%2Frustc_parse_format%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse_format%2Fsrc%2Flib.rs?ref=fd7a15971069156f1741fb3a3c34c9f0c54d5744", "patch": "@@ -447,7 +447,7 @@ impl<'a> Parser<'a> {\n                 Some(pos)\n             } else {\n                 let pos = self.to_span_index(pos);\n-                let description = format!(\"expected `'}}'`, found `{:?}`\", maybe);\n+                let description = format!(\"expected `'}}'`, found `{maybe:?}`\");\n                 let label = \"expected `}`\".to_owned();\n                 let (note, secondary_label) = if c == '}' {\n                     (\n@@ -471,12 +471,12 @@ impl<'a> Parser<'a> {\n                 None\n             }\n         } else {\n-            let description = format!(\"expected `{:?}` but string was terminated\", c);\n+            let description = format!(\"expected `{c:?}` but string was terminated\");\n             // point at closing `\"`\n             let pos = self.input.len() - if self.append_newline { 1 } else { 0 };\n             let pos = self.to_span_index(pos);\n             if c == '}' {\n-                let label = format!(\"expected `{:?}`\", c);\n+                let label = format!(\"expected `{c:?}`\");\n                 let (note, secondary_label) = if c == '}' {\n                     (\n                         Some(\n@@ -497,7 +497,7 @@ impl<'a> Parser<'a> {\n                     should_be_replaced_with_positional_argument: false,\n                 });\n             } else {\n-                self.err(description, format!(\"expected `{:?}`\", c), pos.to(pos));\n+                self.err(description, format!(\"expected `{c:?}`\"), pos.to(pos));\n             }\n             None\n         }"}, {"sha": "e337cf16f22b9213e56e2f649b21abed5d46de85", "filename": "compiler/rustc_privacy/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fd7a15971069156f1741fb3a3c34c9f0c54d5744/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd7a15971069156f1741fb3a3c34c9f0c54d5744/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_privacy%2Fsrc%2Flib.rs?ref=fd7a15971069156f1741fb3a3c34c9f0c54d5744", "patch": "@@ -915,7 +915,7 @@ impl<'tcx, 'a> TestReachabilityVisitor<'tcx, 'a> {\n                     if level != Level::Direct {\n                         error_msg.push_str(\", \");\n                     }\n-                    error_msg.push_str(&format!(\"{:?}: {}\", level, vis_str));\n+                    error_msg.push_str(&format!(\"{level:?}: {vis_str}\"));\n                 }\n             } else {\n                 error_msg.push_str(\"not in the table\");"}, {"sha": "70c481fb0ee2e0a48d0cb83ac13e85804e7bf157", "filename": "compiler/rustc_query_impl/src/on_disk_cache.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fd7a15971069156f1741fb3a3c34c9f0c54d5744/compiler%2Frustc_query_impl%2Fsrc%2Fon_disk_cache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd7a15971069156f1741fb3a3c34c9f0c54d5744/compiler%2Frustc_query_impl%2Fsrc%2Fon_disk_cache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2Fsrc%2Fon_disk_cache.rs?ref=fd7a15971069156f1741fb3a3c34c9f0c54d5744", "patch": "@@ -787,7 +787,7 @@ impl<'a, 'tcx> Decodable<CacheDecoder<'a, 'tcx>> for DefId {\n         // which means that the definition with this hash is guaranteed to\n         // still exist in the current compilation session.\n         d.tcx.def_path_hash_to_def_id(def_path_hash, &mut || {\n-            panic!(\"Failed to convert DefPathHash {:?}\", def_path_hash)\n+            panic!(\"Failed to convert DefPathHash {def_path_hash:?}\")\n         })\n     }\n }"}, {"sha": "6125ad4eff11835e9329ce36c20cdb7f1ce4db35", "filename": "compiler/rustc_query_impl/src/plumbing.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fd7a15971069156f1741fb3a3c34c9f0c54d5744/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd7a15971069156f1741fb3a3c34c9f0c54d5744/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs?ref=fd7a15971069156f1741fb3a3c34c9f0c54d5744", "patch": "@@ -321,7 +321,7 @@ pub(crate) fn create_query_frame<\n         ty::print::with_forced_impl_filename_line!(do_describe(tcx.tcx, key))\n     );\n     let description =\n-        if tcx.sess.verbose() { format!(\"{} [{:?}]\", description, name) } else { description };\n+        if tcx.sess.verbose() { format!(\"{description} [{name:?}]\") } else { description };\n     let span = if kind == dep_graph::DepKind::def_span {\n         // The `def_span` query is used to calculate `default_span`,\n         // so exit to avoid infinite recursion."}, {"sha": "4743170e9bfd8a450f2049e45699e1e4ff44baae", "filename": "compiler/rustc_query_impl/src/profiling_support.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fd7a15971069156f1741fb3a3c34c9f0c54d5744/compiler%2Frustc_query_impl%2Fsrc%2Fprofiling_support.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd7a15971069156f1741fb3a3c34c9f0c54d5744/compiler%2Frustc_query_impl%2Fsrc%2Fprofiling_support.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2Fsrc%2Fprofiling_support.rs?ref=fd7a15971069156f1741fb3a3c34c9f0c54d5744", "patch": "@@ -111,7 +111,7 @@ impl<T: Debug> IntoSelfProfilingString for T {\n         &self,\n         builder: &mut QueryKeyStringBuilder<'_, '_>,\n     ) -> StringId {\n-        let s = format!(\"{:?}\", self);\n+        let s = format!(\"{self:?}\");\n         builder.profiler.alloc_string(&s[..])\n     }\n }"}, {"sha": "c2c9600f5552cb4a4d7d872c477389ea6986352e", "filename": "compiler/rustc_query_system/src/dep_graph/debug.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fd7a15971069156f1741fb3a3c34c9f0c54d5744/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fdebug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd7a15971069156f1741fb3a3c34c9f0c54d5744/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fdebug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fdebug.rs?ref=fd7a15971069156f1741fb3a3c34c9f0c54d5744", "patch": "@@ -29,7 +29,7 @@ impl DepNodeFilter {\n \n     /// Tests whether `node` meets the filter, returning true if so.\n     pub fn test<K: DepKind>(&self, node: &DepNode<K>) -> bool {\n-        let debug_str = format!(\"{:?}\", node);\n+        let debug_str = format!(\"{node:?}\");\n         self.text.split('&').map(|s| s.trim()).all(|f| debug_str.contains(f))\n     }\n }\n@@ -46,7 +46,7 @@ impl<K: DepKind> EdgeFilter<K> {\n     pub fn new(test: &str) -> Result<EdgeFilter<K>, Box<dyn Error>> {\n         let parts: Vec<_> = test.split(\"->\").collect();\n         if parts.len() != 2 {\n-            Err(format!(\"expected a filter like `a&b -> c&d`, not `{}`\", test).into())\n+            Err(format!(\"expected a filter like `a&b -> c&d`, not `{test}`\").into())\n         } else {\n             Ok(EdgeFilter {\n                 source: DepNodeFilter::new(parts[0]),"}, {"sha": "9e1ca6ab515d846e1f444252dcc4a7ac2ac8120a", "filename": "compiler/rustc_query_system/src/dep_graph/dep_node.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fd7a15971069156f1741fb3a3c34c9f0c54d5744/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd7a15971069156f1741fb3a3c34c9f0c54d5744/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fdep_node.rs?ref=fd7a15971069156f1741fb3a3c34c9f0c54d5744", "patch": "@@ -120,7 +120,7 @@ pub trait DepNodeParams<Tcx: DepContext>: fmt::Debug + Sized {\n     }\n \n     fn to_debug_str(&self, _: Tcx) -> String {\n-        format!(\"{:?}\", self)\n+        format!(\"{self:?}\")\n     }\n \n     /// This method tries to recover the query key from the given `DepNode`,"}, {"sha": "53c9da15737183b0120bce2be2d1667e9bb364da", "filename": "compiler/rustc_query_system/src/dep_graph/graph.rs", "status": "modified", "additions": 9, "deletions": 13, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/fd7a15971069156f1741fb3a3c34c9f0c54d5744/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fgraph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd7a15971069156f1741fb3a3c34c9f0c54d5744/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fgraph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fgraph.rs?ref=fd7a15971069156f1741fb3a3c34c9f0c54d5744", "patch": "@@ -316,10 +316,8 @@ impl<K: DepKind> DepGraph<K> {\n         assert!(\n             !self.dep_node_exists(&key),\n             \"forcing query with already existing `DepNode`\\n\\\n-                 - query-key: {:?}\\n\\\n-                 - dep-node: {:?}\",\n-            arg,\n-            key\n+                 - query-key: {arg:?}\\n\\\n+                 - dep-node: {key:?}\"\n         );\n \n         let task_deps = if cx.dep_context().is_eval_always(key.kind) {\n@@ -365,8 +363,7 @@ impl<K: DepKind> DepGraph<K> {\n             debug_assert!(\n                 data.colors.get(prev_index).is_none(),\n                 \"DepGraph::with_task() - Duplicate DepNodeColor \\\n-                            insertion for {:?}\",\n-                key\n+                            insertion for {key:?}\"\n             );\n \n             data.colors.insert(prev_index, color);\n@@ -447,7 +444,7 @@ impl<K: DepKind> DepGraph<K> {\n                     TaskDepsRef::Allow(deps) => deps.lock(),\n                     TaskDepsRef::Ignore => return,\n                     TaskDepsRef::Forbid => {\n-                        panic!(\"Illegal read of: {:?}\", dep_node_index)\n+                        panic!(\"Illegal read of: {dep_node_index:?}\")\n                     }\n                 };\n                 let task_deps = &mut *task_deps;\n@@ -824,8 +821,7 @@ impl<K: DepKind> DepGraph<K> {\n         debug_assert!(\n             data.colors.get(prev_dep_node_index).is_none(),\n             \"DepGraph::try_mark_previous_green() - Duplicate DepNodeColor \\\n-                      insertion for {:?}\",\n-            dep_node\n+                      insertion for {dep_node:?}\"\n         );\n \n         if !side_effects.is_empty() {\n@@ -1164,7 +1160,7 @@ impl<K: DepKind> CurrentDepGraph<K> {\n             if let Some(fingerprint) = fingerprint {\n                 if fingerprint == prev_graph.fingerprint_by_index(prev_index) {\n                     if print_status {\n-                        eprintln!(\"[task::green] {:?}\", key);\n+                        eprintln!(\"[task::green] {key:?}\");\n                     }\n \n                     // This is a green node: it existed in the previous compilation,\n@@ -1186,7 +1182,7 @@ impl<K: DepKind> CurrentDepGraph<K> {\n                     (dep_node_index, Some((prev_index, DepNodeColor::Green(dep_node_index))))\n                 } else {\n                     if print_status {\n-                        eprintln!(\"[task::red] {:?}\", key);\n+                        eprintln!(\"[task::red] {key:?}\");\n                     }\n \n                     // This is a red node: it existed in the previous compilation, its query\n@@ -1209,7 +1205,7 @@ impl<K: DepKind> CurrentDepGraph<K> {\n                 }\n             } else {\n                 if print_status {\n-                    eprintln!(\"[task::unknown] {:?}\", key);\n+                    eprintln!(\"[task::unknown] {key:?}\");\n                 }\n \n                 // This is a red node, effectively: it existed in the previous compilation\n@@ -1234,7 +1230,7 @@ impl<K: DepKind> CurrentDepGraph<K> {\n             }\n         } else {\n             if print_status {\n-                eprintln!(\"[task::new] {:?}\", key);\n+                eprintln!(\"[task::new] {key:?}\");\n             }\n \n             let fingerprint = fingerprint.unwrap_or(Fingerprint::ZERO);"}, {"sha": "dfc1344f85c70cabbeb86f452cbd8abc704203dc", "filename": "compiler/rustc_query_system/src/dep_graph/serialized.rs", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/fd7a15971069156f1741fb3a3c34c9f0c54d5744/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fserialized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd7a15971069156f1741fb3a3c34c9f0c54d5744/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fserialized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fserialized.rs?ref=fd7a15971069156f1741fb3a3c34c9f0c54d5744", "patch": "@@ -270,25 +270,22 @@ impl<K: DepKind + Encodable<FileEncoder>> GraphEncoder<K> {\n \n             eprintln!(\"[incremental]\");\n             eprintln!(\"[incremental] DepGraph Statistics\");\n-            eprintln!(\"{}\", SEPARATOR);\n+            eprintln!(\"{SEPARATOR}\");\n             eprintln!(\"[incremental]\");\n             eprintln!(\"[incremental] Total Node Count: {}\", status.total_node_count);\n             eprintln!(\"[incremental] Total Edge Count: {}\", status.total_edge_count);\n \n             if cfg!(debug_assertions) {\n-                eprintln!(\"[incremental] Total Edge Reads: {}\", total_read_count);\n-                eprintln!(\n-                    \"[incremental] Total Duplicate Edge Reads: {}\",\n-                    total_duplicate_read_count\n-                );\n+                eprintln!(\"[incremental] Total Edge Reads: {total_read_count}\");\n+                eprintln!(\"[incremental] Total Duplicate Edge Reads: {total_duplicate_read_count}\");\n             }\n \n             eprintln!(\"[incremental]\");\n             eprintln!(\n                 \"[incremental]  {:<36}| {:<17}| {:<12}| {:<17}|\",\n                 \"Node Kind\", \"Node Frequency\", \"Node Count\", \"Avg. Edge Count\"\n             );\n-            eprintln!(\"{}\", SEPARATOR);\n+            eprintln!(\"{SEPARATOR}\");\n \n             for stat in stats {\n                 let node_kind_ratio =\n@@ -304,7 +301,7 @@ impl<K: DepKind + Encodable<FileEncoder>> GraphEncoder<K> {\n                 );\n             }\n \n-            eprintln!(\"{}\", SEPARATOR);\n+            eprintln!(\"{SEPARATOR}\");\n             eprintln!(\"[incremental]\");\n         }\n     }"}, {"sha": "b3b939eae88dce04c1e1efa8bb3a6bcc19a9910a", "filename": "compiler/rustc_query_system/src/query/plumbing.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/fd7a15971069156f1741fb3a3c34c9f0c54d5744/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd7a15971069156f1741fb3a3c34c9f0c54d5744/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fplumbing.rs?ref=fd7a15971069156f1741fb3a3c34c9f0c54d5744", "patch": "@@ -549,8 +549,7 @@ where\n         // can be forced from `DepNode`.\n         debug_assert!(\n             !qcx.dep_context().fingerprint_style(dep_node.kind).reconstructible(),\n-            \"missing on-disk cache entry for {:?}\",\n-            dep_node\n+            \"missing on-disk cache entry for {dep_node:?}\"\n         );\n     }\n \n@@ -589,8 +588,7 @@ where\n {\n     assert!(\n         tcx.dep_graph().is_green(dep_node),\n-        \"fingerprint for green query instance not loaded from cache: {:?}\",\n-        dep_node,\n+        \"fingerprint for green query instance not loaded from cache: {dep_node:?}\",\n     );\n \n     let new_hash = hash_result.map_or(Fingerprint::ZERO, |f| {\n@@ -669,16 +667,16 @@ fn incremental_verify_ich_failed(sess: &Session, dep_node: DebugArg<'_>, result:\n         sess.emit_err(crate::error::Reentrant);\n     } else {\n         let run_cmd = if let Some(crate_name) = &sess.opts.crate_name {\n-            format!(\"`cargo clean -p {}` or `cargo clean`\", crate_name)\n+            format!(\"`cargo clean -p {crate_name}` or `cargo clean`\")\n         } else {\n             \"`cargo clean`\".to_string()\n         };\n \n         sess.emit_err(crate::error::IncrementCompilation {\n             run_cmd,\n-            dep_node: format!(\"{:?}\", dep_node),\n+            dep_node: format!(\"{dep_node:?}\"),\n         });\n-        panic!(\"Found unstable fingerprints for {:?}: {:?}\", dep_node, result);\n+        panic!(\"Found unstable fingerprints for {dep_node:?}: {result:?}\");\n     }\n \n     INSIDE_VERIFY_PANIC.with(|in_panic| in_panic.set(old_in_panic));"}, {"sha": "7c5e1427d1ed72e9e7a8f45ad2c2e70cb8eef90e", "filename": "compiler/rustc_span/src/def_id.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fd7a15971069156f1741fb3a3c34c9f0c54d5744/compiler%2Frustc_span%2Fsrc%2Fdef_id.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd7a15971069156f1741fb3a3c34c9f0c54d5744/compiler%2Frustc_span%2Fsrc%2Fdef_id.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fdef_id.rs?ref=fd7a15971069156f1741fb3a3c34c9f0c54d5744", "patch": "@@ -303,7 +303,7 @@ impl DefId {\n         // i.e. don't use closures.\n         match self.as_local() {\n             Some(local_def_id) => local_def_id,\n-            None => panic!(\"DefId::expect_local: `{:?}` isn't local\", self),\n+            None => panic!(\"DefId::expect_local: `{self:?}` isn't local\"),\n         }\n     }\n "}, {"sha": "b43183916bca542bcf7a7092a0583ce75f339dbe", "filename": "compiler/rustc_span/src/edition.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fd7a15971069156f1741fb3a3c34c9f0c54d5744/compiler%2Frustc_span%2Fsrc%2Fedition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd7a15971069156f1741fb3a3c34c9f0c54d5744/compiler%2Frustc_span%2Fsrc%2Fedition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fedition.rs?ref=fd7a15971069156f1741fb3a3c34c9f0c54d5744", "patch": "@@ -44,7 +44,7 @@ impl fmt::Display for Edition {\n             Edition::Edition2021 => \"2021\",\n             Edition::Edition2024 => \"2024\",\n         };\n-        write!(f, \"{}\", s)\n+        write!(f, \"{s}\")\n     }\n }\n "}, {"sha": "a9a9a3fbf9d8061c54dbd6fc05d8894d0a339da7", "filename": "compiler/rustc_span/src/hygiene.rs", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/fd7a15971069156f1741fb3a3c34c9f0c54d5744/compiler%2Frustc_span%2Fsrc%2Fhygiene.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd7a15971069156f1741fb3a3c34c9f0c54d5744/compiler%2Frustc_span%2Fsrc%2Fhygiene.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fhygiene.rs?ref=fd7a15971069156f1741fb3a3c34c9f0c54d5744", "patch": "@@ -110,7 +110,7 @@ fn assert_default_hashing_controls<CTX: HashStableContext>(ctx: &CTX, msg: &str)\n         // Such configuration must not be used for metadata.\n         HashingControls { hash_spans }\n             if hash_spans == !ctx.unstable_opts_incremental_ignore_spans() => {}\n-        other => panic!(\"Attempted hashing of {msg} with non-default HashingControls: {:?}\", other),\n+        other => panic!(\"Attempted hashing of {msg} with non-default HashingControls: {other:?}\"),\n     }\n }\n \n@@ -629,7 +629,7 @@ pub fn update_dollar_crate_names(mut get_name: impl FnMut(SyntaxContext) -> Symb\n pub fn debug_hygiene_data(verbose: bool) -> String {\n     HygieneData::with(|data| {\n         if verbose {\n-            format!(\"{:#?}\", data)\n+            format!(\"{data:#?}\")\n         } else {\n             let mut s = String::from(\"Expansions:\");\n             let mut debug_expn_data = |(id, expn_data): (&ExpnId, &ExpnData)| {\n@@ -1067,9 +1067,9 @@ impl ExpnKind {\n         match *self {\n             ExpnKind::Root => kw::PathRoot.to_string(),\n             ExpnKind::Macro(macro_kind, name) => match macro_kind {\n-                MacroKind::Bang => format!(\"{}!\", name),\n-                MacroKind::Attr => format!(\"#[{}]\", name),\n-                MacroKind::Derive => format!(\"#[derive({})]\", name),\n+                MacroKind::Bang => format!(\"{name}!\"),\n+                MacroKind::Attr => format!(\"#[{name}]\"),\n+                MacroKind::Derive => format!(\"#[derive({name})]\"),\n             },\n             ExpnKind::AstPass(kind) => kind.descr().to_string(),\n             ExpnKind::Desugaring(kind) => format!(\"desugaring of {}\", kind.descr()),\n@@ -1466,11 +1466,7 @@ impl<D: Decoder> Decodable<D> for SyntaxContext {\n /// collisions are only possible between `ExpnId`s within the same crate.\n fn update_disambiguator(expn_data: &mut ExpnData, mut ctx: impl HashStableContext) -> ExpnHash {\n     // This disambiguator should not have been set yet.\n-    assert_eq!(\n-        expn_data.disambiguator, 0,\n-        \"Already set disambiguator for ExpnData: {:?}\",\n-        expn_data\n-    );\n+    assert_eq!(expn_data.disambiguator, 0, \"Already set disambiguator for ExpnData: {expn_data:?}\");\n     assert_default_hashing_controls(&ctx, \"ExpnData (disambiguator)\");\n     let mut expn_hash = expn_data.hash_expn(&mut ctx);\n "}, {"sha": "7e61f2f9f73c0a3d5c27ceb4eb3fe2d457558b5b", "filename": "compiler/rustc_span/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fd7a15971069156f1741fb3a3c34c9f0c54d5744/compiler%2Frustc_span%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd7a15971069156f1741fb3a3c34c9f0c54d5744/compiler%2Frustc_span%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Flib.rs?ref=fd7a15971069156f1741fb3a3c34c9f0c54d5744", "patch": "@@ -329,7 +329,7 @@ impl fmt::Display for FileNameDisplay<'_> {\n             ProcMacroSourceCode(_) => write!(fmt, \"<proc-macro source code>\"),\n             CfgSpec(_) => write!(fmt, \"<cfgspec>\"),\n             CliCrateAttr(_) => write!(fmt, \"<crate attribute>\"),\n-            Custom(ref s) => write!(fmt, \"<{}>\", s),\n+            Custom(ref s) => write!(fmt, \"<{s}>\"),\n             DocTest(ref path, _) => write!(fmt, \"{}\", path.display()),\n             InlineAsm(_) => write!(fmt, \"<inline asm>\"),\n         }\n@@ -1074,7 +1074,7 @@ impl NonNarrowChar {\n             0 => NonNarrowChar::ZeroWidth(pos),\n             2 => NonNarrowChar::Wide(pos),\n             4 => NonNarrowChar::Tab(pos),\n-            _ => panic!(\"width {} given for non-narrow character\", width),\n+            _ => panic!(\"width {width} given for non-narrow character\"),\n         }\n     }\n "}, {"sha": "0ab890b9f01217ca2693b0fd97e1af4488603589", "filename": "compiler/rustc_span/src/profiling.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fd7a15971069156f1741fb3a3c34c9f0c54d5744/compiler%2Frustc_span%2Fsrc%2Fprofiling.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd7a15971069156f1741fb3a3c34c9f0c54d5744/compiler%2Frustc_span%2Fsrc%2Fprofiling.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fprofiling.rs?ref=fd7a15971069156f1741fb3a3c34c9f0c54d5744", "patch": "@@ -27,7 +27,7 @@ impl SpannedEventArgRecorder for EventArgRecorder<'_> {\n             if let Some(source_map) = &*session_globals.source_map.borrow() {\n                 source_map.span_to_embeddable_string(span)\n             } else {\n-                format!(\"{:?}\", span)\n+                format!(\"{span:?}\")\n             }\n         });\n         self.record_arg(span_arg);"}, {"sha": "23ff6b333f0dd7626a397f3c1445e27a058e063e", "filename": "compiler/rustc_symbol_mangling/src/legacy.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fd7a15971069156f1741fb3a3c34c9f0c54d5744/compiler%2Frustc_symbol_mangling%2Fsrc%2Flegacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd7a15971069156f1741fb3a3c34c9f0c54d5744/compiler%2Frustc_symbol_mangling%2Fsrc%2Flegacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_symbol_mangling%2Fsrc%2Flegacy.rs?ref=fd7a15971069156f1741fb3a3c34c9f0c54d5744", "patch": "@@ -175,7 +175,7 @@ impl SymbolPath {\n     fn finish(mut self, hash: u64) -> String {\n         self.finalize_pending_component();\n         // E = end name-sequence\n-        let _ = write!(self.result, \"17h{:016x}E\", hash);\n+        let _ = write!(self.result, \"17h{hash:016x}E\");\n         self.result\n     }\n }\n@@ -227,7 +227,7 @@ impl<'tcx> Printer<'tcx> for &mut SymbolPrinter<'tcx> {\n                 self = self.print_type(ty)?;\n                 self.write_str(\"; \")?;\n                 if let Some(size) = size.kind().try_to_bits(self.tcx().data_layout.pointer_size) {\n-                    write!(self, \"{}\", size)?\n+                    write!(self, \"{size}\")?\n                 } else if let ty::ConstKind::Param(param) = size.kind() {\n                     self = param.print(self)?\n                 } else {"}, {"sha": "547a5907660236f130ce94ea3d7a2ace3536d30c", "filename": "compiler/rustc_symbol_mangling/src/lib.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fd7a15971069156f1741fb3a3c34c9f0c54d5744/compiler%2Frustc_symbol_mangling%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd7a15971069156f1741fb3a3c34c9f0c54d5744/compiler%2Frustc_symbol_mangling%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_symbol_mangling%2Fsrc%2Flib.rs?ref=fd7a15971069156f1741fb3a3c34c9f0c54d5744", "patch": "@@ -269,8 +269,7 @@ fn compute_symbol_name<'tcx>(\n \n     debug_assert!(\n         rustc_demangle::try_demangle(&symbol).is_ok(),\n-        \"compute_symbol_name: `{}` cannot be demangled\",\n-        symbol\n+        \"compute_symbol_name: `{symbol}` cannot be demangled\"\n     );\n \n     symbol"}, {"sha": "c6899f8f244ef929d536b951ef969a25093aae3e", "filename": "compiler/rustc_symbol_mangling/src/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fd7a15971069156f1741fb3a3c34c9f0c54d5744/compiler%2Frustc_symbol_mangling%2Fsrc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd7a15971069156f1741fb3a3c34c9f0c54d5744/compiler%2Frustc_symbol_mangling%2Fsrc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_symbol_mangling%2Fsrc%2Ftest.rs?ref=fd7a15971069156f1741fb3a3c34c9f0c54d5744", "patch": "@@ -74,7 +74,7 @@ impl SymbolNamesTest<'_> {\n                 tcx.sess.emit_err(TestOutput {\n                     span: attr.span,\n                     kind: Kind::DemanglingAlt,\n-                    content: format!(\"{:#}\", demangling),\n+                    content: format!(\"{demangling:#}\"),\n                 });\n             }\n         }"}, {"sha": "0759b95bd94c8f5e4d930f7d5f50224ef30e5611", "filename": "compiler/rustc_symbol_mangling/src/typeid/typeid_itanium_cxx_abi.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fd7a15971069156f1741fb3a3c34c9f0c54d5744/compiler%2Frustc_symbol_mangling%2Fsrc%2Ftypeid%2Ftypeid_itanium_cxx_abi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd7a15971069156f1741fb3a3c34c9f0c54d5744/compiler%2Frustc_symbol_mangling%2Fsrc%2Ftypeid%2Ftypeid_itanium_cxx_abi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_symbol_mangling%2Fsrc%2Ftypeid%2Ftypeid_itanium_cxx_abi.rs?ref=fd7a15971069156f1741fb3a3c34c9f0c54d5744", "patch": "@@ -126,11 +126,11 @@ fn encode_const<'tcx>(\n         if value < zero {\n             s.push('n')\n         };\n-        let _ = write!(s, \"{}\", value);\n+        let _ = write!(s, \"{value}\");\n     }\n \n     fn push_unsigned_value<T: Display>(s: &mut String, value: T) {\n-        let _ = write!(s, \"{}\", value);\n+        let _ = write!(s, \"{value}\");\n     }\n \n     if let Some(scalar_int) = c.kind().try_to_scalar_int() {"}, {"sha": "9e8117c6a8536bb3636a752e72279ff9e63541bd", "filename": "compiler/rustc_symbol_mangling/src/v0.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fd7a15971069156f1741fb3a3c34c9f0c54d5744/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd7a15971069156f1741fb3a3c34c9f0c54d5744/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs?ref=fd7a15971069156f1741fb3a3c34c9f0c54d5744", "patch": "@@ -609,7 +609,7 @@ impl<'tcx> Printer<'tcx> for &mut SymbolMangler<'tcx> {\n                     bits = val.unsigned_abs();\n                 }\n \n-                let _ = write!(self.out, \"{:x}_\", bits);\n+                let _ = write!(self.out, \"{bits:x}_\");\n             }\n \n             // FIXME(valtrees): Remove the special case for `str`\n@@ -637,7 +637,7 @@ impl<'tcx> Printer<'tcx> for &mut SymbolMangler<'tcx> {\n \n                                 // FIXME(eddyb) use a specialized hex-encoding loop.\n                                 for byte in s.bytes() {\n-                                    let _ = write!(self.out, \"{:02x}\", byte);\n+                                    let _ = write!(self.out, \"{byte:02x}\");\n                                 }\n \n                                 self.push(\"_\");"}, {"sha": "280924bca415b151100bccc38ef9a414d3dab06f", "filename": "compiler/rustc_target/src/abi/call/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fd7a15971069156f1741fb3a3c34c9f0c54d5744/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd7a15971069156f1741fb3a3c34c9f0c54d5744/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fmod.rs?ref=fd7a15971069156f1741fb3a3c34c9f0c54d5744", "patch": "@@ -177,12 +177,12 @@ impl Reg {\n                 17..=32 => dl.i32_align.abi,\n                 33..=64 => dl.i64_align.abi,\n                 65..=128 => dl.i128_align.abi,\n-                _ => panic!(\"unsupported integer: {:?}\", self),\n+                _ => panic!(\"unsupported integer: {self:?}\"),\n             },\n             RegKind::Float => match self.size.bits() {\n                 32 => dl.f32_align.abi,\n                 64 => dl.f64_align.abi,\n-                _ => panic!(\"unsupported float: {:?}\", self),\n+                _ => panic!(\"unsupported float: {self:?}\"),\n             },\n             RegKind::Vector => dl.vector_align(self.size).abi,\n         }\n@@ -642,7 +642,7 @@ impl fmt::Display for AdjustForForeignAbiError {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         match self {\n             Self::Unsupported { arch, abi } => {\n-                write!(f, \"target architecture {:?} does not support `extern {}` ABI\", arch, abi)\n+                write!(f, \"target architecture {arch:?} does not support `extern {abi}` ABI\")\n             }\n         }\n     }\n@@ -760,7 +760,7 @@ impl FromStr for Conv {\n             \"AmdGpuKernel\" => Ok(Conv::AmdGpuKernel),\n             \"AvrInterrupt\" => Ok(Conv::AvrInterrupt),\n             \"AvrNonBlockingInterrupt\" => Ok(Conv::AvrNonBlockingInterrupt),\n-            _ => Err(format!(\"'{}' is not a valid value for entry function call convetion.\", s)),\n+            _ => Err(format!(\"'{s}' is not a valid value for entry function call convetion.\")),\n         }\n     }\n }"}, {"sha": "28493c7700ffca27cb77fb5b0f0c5343ff5d6cc2", "filename": "compiler/rustc_target/src/asm/aarch64.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fd7a15971069156f1741fb3a3c34c9f0c54d5744/compiler%2Frustc_target%2Fsrc%2Fasm%2Faarch64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd7a15971069156f1741fb3a3c34c9f0c54d5744/compiler%2Frustc_target%2Fsrc%2Fasm%2Faarch64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fasm%2Faarch64.rs?ref=fd7a15971069156f1741fb3a3c34c9f0c54d5744", "patch": "@@ -195,6 +195,6 @@ impl AArch64InlineAsmReg {\n             (modifier.unwrap_or('v'), self as u32 - Self::v0 as u32)\n         };\n         assert!(index < 32);\n-        write!(out, \"{}{}\", prefix, index)\n+        write!(out, \"{prefix}{index}\")\n     }\n }"}, {"sha": "ec7429a306554c868c8d8f28ce804a9bb72904e6", "filename": "compiler/rustc_target/src/asm/arm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fd7a15971069156f1741fb3a3c34c9f0c54d5744/compiler%2Frustc_target%2Fsrc%2Fasm%2Farm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd7a15971069156f1741fb3a3c34c9f0c54d5744/compiler%2Frustc_target%2Fsrc%2Fasm%2Farm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fasm%2Farm.rs?ref=fd7a15971069156f1741fb3a3c34c9f0c54d5744", "patch": "@@ -249,7 +249,7 @@ impl ArmInlineAsmReg {\n             let index = self as u32 - Self::q0 as u32;\n             assert!(index < 16);\n             let index = index * 2 + (modifier == 'f') as u32;\n-            write!(out, \"d{}\", index)\n+            write!(out, \"d{index}\")\n         } else {\n             out.write_str(self.name())\n         }"}, {"sha": "7f01f33d39c6cace7bfcb13e9fccd35963ae45f1", "filename": "compiler/rustc_target/src/asm/mod.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/fd7a15971069156f1741fb3a3c34c9f0c54d5744/compiler%2Frustc_target%2Fsrc%2Fasm%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd7a15971069156f1741fb3a3c34c9f0c54d5744/compiler%2Frustc_target%2Fsrc%2Fasm%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fasm%2Fmod.rs?ref=fd7a15971069156f1741fb3a3c34c9f0c54d5744", "patch": "@@ -679,13 +679,13 @@ impl fmt::Display for InlineAsmType {\n             Self::I128 => f.write_str(\"i128\"),\n             Self::F32 => f.write_str(\"f32\"),\n             Self::F64 => f.write_str(\"f64\"),\n-            Self::VecI8(n) => write!(f, \"i8x{}\", n),\n-            Self::VecI16(n) => write!(f, \"i16x{}\", n),\n-            Self::VecI32(n) => write!(f, \"i32x{}\", n),\n-            Self::VecI64(n) => write!(f, \"i64x{}\", n),\n-            Self::VecI128(n) => write!(f, \"i128x{}\", n),\n-            Self::VecF32(n) => write!(f, \"f32x{}\", n),\n-            Self::VecF64(n) => write!(f, \"f64x{}\", n),\n+            Self::VecI8(n) => write!(f, \"i8x{n}\"),\n+            Self::VecI16(n) => write!(f, \"i16x{n}\"),\n+            Self::VecI32(n) => write!(f, \"i32x{n}\"),\n+            Self::VecI64(n) => write!(f, \"i64x{n}\"),\n+            Self::VecI128(n) => write!(f, \"i128x{n}\"),\n+            Self::VecF32(n) => write!(f, \"f32x{n}\"),\n+            Self::VecF64(n) => write!(f, \"f64x{n}\"),\n         }\n     }\n }"}, {"sha": "5eae07f141fc00b515cc8256cb6a7593fea3bbf3", "filename": "compiler/rustc_target/src/asm/x86.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/fd7a15971069156f1741fb3a3c34c9f0c54d5744/compiler%2Frustc_target%2Fsrc%2Fasm%2Fx86.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd7a15971069156f1741fb3a3c34c9f0c54d5744/compiler%2Frustc_target%2Fsrc%2Fasm%2Fx86.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fasm%2Fx86.rs?ref=fd7a15971069156f1741fb3a3c34c9f0c54d5744", "patch": "@@ -357,28 +357,28 @@ impl X86InlineAsmReg {\n         if self as u32 <= Self::dx as u32 {\n             let root = ['a', 'b', 'c', 'd'][self as usize - Self::ax as usize];\n             match modifier.unwrap_or(reg_default_modifier) {\n-                'l' => write!(out, \"{}l\", root),\n-                'h' => write!(out, \"{}h\", root),\n-                'x' => write!(out, \"{}x\", root),\n-                'e' => write!(out, \"e{}x\", root),\n-                'r' => write!(out, \"r{}x\", root),\n+                'l' => write!(out, \"{root}l\"),\n+                'h' => write!(out, \"{root}h\"),\n+                'x' => write!(out, \"{root}x\"),\n+                'e' => write!(out, \"e{root}x\"),\n+                'r' => write!(out, \"r{root}x\"),\n                 _ => unreachable!(),\n             }\n         } else if self as u32 <= Self::di as u32 {\n             let root = self.name();\n             match modifier.unwrap_or(reg_default_modifier) {\n-                'l' => write!(out, \"{}l\", root),\n-                'x' => write!(out, \"{}\", root),\n-                'e' => write!(out, \"e{}\", root),\n-                'r' => write!(out, \"r{}\", root),\n+                'l' => write!(out, \"{root}l\"),\n+                'x' => write!(out, \"{root}\"),\n+                'e' => write!(out, \"e{root}\"),\n+                'r' => write!(out, \"r{root}\"),\n                 _ => unreachable!(),\n             }\n         } else if self as u32 <= Self::r15 as u32 {\n             let root = self.name();\n             match modifier.unwrap_or(reg_default_modifier) {\n-                'l' => write!(out, \"{}b\", root),\n-                'x' => write!(out, \"{}w\", root),\n-                'e' => write!(out, \"{}d\", root),\n+                'l' => write!(out, \"{root}b\"),\n+                'x' => write!(out, \"{root}w\"),\n+                'e' => write!(out, \"{root}d\"),\n                 'r' => out.write_str(root),\n                 _ => unreachable!(),\n             }\n@@ -387,15 +387,15 @@ impl X86InlineAsmReg {\n         } else if self as u32 <= Self::xmm15 as u32 {\n             let prefix = modifier.unwrap_or('x');\n             let index = self as u32 - Self::xmm0 as u32;\n-            write!(out, \"{}{}\", prefix, index)\n+            write!(out, \"{prefix}{index}\")\n         } else if self as u32 <= Self::ymm15 as u32 {\n             let prefix = modifier.unwrap_or('y');\n             let index = self as u32 - Self::ymm0 as u32;\n-            write!(out, \"{}{}\", prefix, index)\n+            write!(out, \"{prefix}{index}\")\n         } else if self as u32 <= Self::zmm31 as u32 {\n             let prefix = modifier.unwrap_or('z');\n             let index = self as u32 - Self::zmm0 as u32;\n-            write!(out, \"{}{}\", prefix, index)\n+            write!(out, \"{prefix}{index}\")\n         } else {\n             out.write_str(self.name())\n         }"}, {"sha": "5c6dcc0aba9c354e8c3dc6ad8b398050935436c3", "filename": "compiler/rustc_target/src/spec/apple_base.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/fd7a15971069156f1741fb3a3c34c9f0c54d5744/compiler%2Frustc_target%2Fsrc%2Fspec%2Fapple_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd7a15971069156f1741fb3a3c34c9f0c54d5744/compiler%2Frustc_target%2Fsrc%2Fspec%2Fapple_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fapple_base.rs?ref=fd7a15971069156f1741fb3a3c34c9f0c54d5744", "patch": "@@ -76,7 +76,7 @@ impl Arch {\n \n fn pre_link_args(os: &'static str, arch: Arch, abi: &'static str) -> LinkArgs {\n     let platform_name: StaticCow<str> = match abi {\n-        \"sim\" => format!(\"{}-simulator\", os).into(),\n+        \"sim\" => format!(\"{os}-simulator\").into(),\n         \"macabi\" => \"mac-catalyst\".into(),\n         _ => os.into(),\n     };\n@@ -193,7 +193,7 @@ fn macos_deployment_target(arch: Arch) -> (u32, u32) {\n \n fn macos_lld_platform_version(arch: Arch) -> String {\n     let (major, minor) = macos_deployment_target(arch);\n-    format!(\"{}.{}\", major, minor)\n+    format!(\"{major}.{minor}\")\n }\n \n pub fn macos_llvm_target(arch: Arch) -> String {\n@@ -252,7 +252,7 @@ pub fn ios_llvm_target(arch: Arch) -> String {\n \n fn ios_lld_platform_version() -> String {\n     let (major, minor) = ios_deployment_target();\n-    format!(\"{}.{}\", major, minor)\n+    format!(\"{major}.{minor}\")\n }\n \n pub fn ios_sim_llvm_target(arch: Arch) -> String {\n@@ -266,7 +266,7 @@ fn tvos_deployment_target() -> (u32, u32) {\n \n fn tvos_lld_platform_version() -> String {\n     let (major, minor) = tvos_deployment_target();\n-    format!(\"{}.{}\", major, minor)\n+    format!(\"{major}.{minor}\")\n }\n \n fn watchos_deployment_target() -> (u32, u32) {\n@@ -275,7 +275,7 @@ fn watchos_deployment_target() -> (u32, u32) {\n \n fn watchos_lld_platform_version() -> String {\n     let (major, minor) = watchos_deployment_target();\n-    format!(\"{}.{}\", major, minor)\n+    format!(\"{major}.{minor}\")\n }\n \n pub fn watchos_sim_llvm_target(arch: Arch) -> String {"}, {"sha": "5bbd86bb5b9b12d9b312d446db815644c1d93193", "filename": "compiler/rustc_target/src/spec/mod.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/fd7a15971069156f1741fb3a3c34c9f0c54d5744/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd7a15971069156f1741fb3a3c34c9f0c54d5744/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs?ref=fd7a15971069156f1741fb3a3c34c9f0c54d5744", "patch": "@@ -840,7 +840,7 @@ impl fmt::Display for SanitizerSet {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         let mut first = true;\n         for s in *self {\n-            let name = s.as_str().unwrap_or_else(|| panic!(\"unrecognized sanitizer {:?}\", s));\n+            let name = s.as_str().unwrap_or_else(|| panic!(\"unrecognized sanitizer {s:?}\"));\n             if !first {\n                 f.write_str(\", \")?;\n             }\n@@ -2074,7 +2074,7 @@ impl Target {\n         let mut get_req_field = |name: &str| {\n             obj.remove(name)\n                 .and_then(|j| j.as_str().map(str::to_string))\n-                .ok_or_else(|| format!(\"Field {} in target specification is required\", name))\n+                .ok_or_else(|| format!(\"Field {name} in target specification is required\"))\n         };\n \n         let mut base = Target {\n@@ -2480,7 +2480,7 @@ impl Target {\n             if let Some(s) = fp.as_str() {\n                 base.frame_pointer = s\n                     .parse()\n-                    .map_err(|()| format!(\"'{}' is not a valid value for frame-pointer\", s))?;\n+                    .map_err(|()| format!(\"'{s}' is not a valid value for frame-pointer\"))?;\n             } else {\n                 incorrect_type.push(\"frame-pointer\".into())\n             }\n@@ -2672,7 +2672,7 @@ impl Target {\n                     return load_file(&p);\n                 }\n \n-                Err(format!(\"Could not find specification for target {:?}\", target_triple))\n+                Err(format!(\"Could not find specification for target {target_triple:?}\"))\n             }\n             TargetTriple::TargetJson { ref contents, .. } => {\n                 let obj = serde_json::from_str(contents).map_err(|e| e.to_string())?;\n@@ -2936,7 +2936,7 @@ impl TargetTriple {\n         let contents = std::fs::read_to_string(&canonicalized_path).map_err(|err| {\n             io::Error::new(\n                 io::ErrorKind::InvalidInput,\n-                format!(\"target path {:?} is not a valid file: {}\", canonicalized_path, err),\n+                format!(\"target path {canonicalized_path:?} is not a valid file: {err}\"),\n             )\n         })?;\n         let triple = canonicalized_path\n@@ -2971,7 +2971,7 @@ impl TargetTriple {\n                 let mut hasher = DefaultHasher::new();\n                 content.hash(&mut hasher);\n                 let hash = hasher.finish();\n-                format!(\"{}-{}\", triple, hash)\n+                format!(\"{triple}-{hash}\")\n             }\n         }\n     }"}, {"sha": "eaf72b7616c7160ee6d01ec9fd52e27c34e475e7", "filename": "compiler/rustc_target/src/spec/solid_base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fd7a15971069156f1741fb3a3c34c9f0c54d5744/compiler%2Frustc_target%2Fsrc%2Fspec%2Fsolid_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd7a15971069156f1741fb3a3c34c9f0c54d5744/compiler%2Frustc_target%2Fsrc%2Fspec%2Fsolid_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fsolid_base.rs?ref=fd7a15971069156f1741fb3a3c34c9f0c54d5744", "patch": "@@ -3,7 +3,7 @@ use crate::spec::TargetOptions;\n \n pub fn opts(kernel: &str) -> TargetOptions {\n     TargetOptions {\n-        os: format!(\"solid_{}\", kernel).into(),\n+        os: format!(\"solid_{kernel}\").into(),\n         vendor: \"kmc\".into(),\n         executables: false,\n         frame_pointer: FramePointer::NonLeaf,"}, {"sha": "481b56e111ea0a6d74099f0017f166fa7e5afad2", "filename": "compiler/rustc_traits/src/dropck_outlives.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fd7a15971069156f1741fb3a3c34c9f0c54d5744/compiler%2Frustc_traits%2Fsrc%2Fdropck_outlives.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd7a15971069156f1741fb3a3c34c9f0c54d5744/compiler%2Frustc_traits%2Fsrc%2Fdropck_outlives.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fdropck_outlives.rs?ref=fd7a15971069156f1741fb3a3c34c9f0c54d5744", "patch": "@@ -189,7 +189,7 @@ fn dtorck_constraint_for_ty<'tcx>(\n \n                 tcx.sess.delay_span_bug(\n                     span,\n-                    &format!(\"upvar_tys for closure not found. Expected capture information for closure {}\", ty,),\n+                    &format!(\"upvar_tys for closure not found. Expected capture information for closure {ty}\",),\n                 );\n                 return Err(NoSolution);\n             }\n@@ -231,7 +231,7 @@ fn dtorck_constraint_for_ty<'tcx>(\n                 // be fully resolved.\n                 tcx.sess.delay_span_bug(\n                     span,\n-                    &format!(\"upvar_tys for generator not found. Expected capture information for generator {}\", ty,),\n+                    &format!(\"upvar_tys for generator not found. Expected capture information for generator {ty}\",),\n                 );\n                 return Err(NoSolution);\n             }"}, {"sha": "5cad2c2ccb0f7f562f2ebd5efd43c3767736ee79", "filename": "compiler/rustc_traits/src/normalize_erasing_regions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fd7a15971069156f1741fb3a3c34c9f0c54d5744/compiler%2Frustc_traits%2Fsrc%2Fnormalize_erasing_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd7a15971069156f1741fb3a3c34c9f0c54d5744/compiler%2Frustc_traits%2Fsrc%2Fnormalize_erasing_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fnormalize_erasing_regions.rs?ref=fd7a15971069156f1741fb3a3c34c9f0c54d5744", "patch": "@@ -47,7 +47,7 @@ fn try_normalize_after_erasing_regions<'tcx, T: TypeFoldable<'tcx> + PartialEq +\n             // us a test case.\n             debug_assert_eq!(normalized_value, resolved_value);\n             let erased = infcx.tcx.erase_regions(resolved_value);\n-            debug_assert!(!erased.needs_infer(), \"{:?}\", erased);\n+            debug_assert!(!erased.needs_infer(), \"{erased:?}\");\n             Ok(erased)\n         }\n         Err(NoSolution) => Err(NoSolution),"}, {"sha": "f8d05bc89d26d1f96f826c1e3d3b838392e422e0", "filename": "compiler/rustc_transmute/src/layout/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fd7a15971069156f1741fb3a3c34c9f0c54d5744/compiler%2Frustc_transmute%2Fsrc%2Flayout%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd7a15971069156f1741fb3a3c34c9f0c54d5744/compiler%2Frustc_transmute%2Fsrc%2Flayout%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_transmute%2Fsrc%2Flayout%2Fmod.rs?ref=fd7a15971069156f1741fb3a3c34c9f0c54d5744", "patch": "@@ -24,7 +24,7 @@ impl fmt::Debug for Byte {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         match &self {\n             Self::Uninit => f.write_str(\"??u8\"),\n-            Self::Init(b) => write!(f, \"{:#04x}u8\", b),\n+            Self::Init(b) => write!(f, \"{b:#04x}u8\"),\n         }\n     }\n }"}, {"sha": "fed070408f3903033b3c9d86f0f2feac5dab3aa8", "filename": "compiler/rustc_type_ir/src/lib.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/fd7a15971069156f1741fb3a3c34c9f0c54d5744/compiler%2Frustc_type_ir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd7a15971069156f1741fb3a3c34c9f0c54d5744/compiler%2Frustc_type_ir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_type_ir%2Fsrc%2Flib.rs?ref=fd7a15971069156f1741fb3a3c34c9f0c54d5744", "patch": "@@ -718,9 +718,9 @@ impl fmt::Debug for InferTy {\n             TyVar(ref v) => v.fmt(f),\n             IntVar(ref v) => v.fmt(f),\n             FloatVar(ref v) => v.fmt(f),\n-            FreshTy(v) => write!(f, \"FreshTy({:?})\", v),\n-            FreshIntTy(v) => write!(f, \"FreshIntTy({:?})\", v),\n-            FreshFloatTy(v) => write!(f, \"FreshFloatTy({:?})\", v),\n+            FreshTy(v) => write!(f, \"FreshTy({v:?})\"),\n+            FreshIntTy(v) => write!(f, \"FreshIntTy({v:?})\"),\n+            FreshFloatTy(v) => write!(f, \"FreshFloatTy({v:?})\"),\n         }\n     }\n }\n@@ -743,9 +743,9 @@ impl fmt::Display for InferTy {\n             TyVar(_) => write!(f, \"_\"),\n             IntVar(_) => write!(f, \"{}\", \"{integer}\"),\n             FloatVar(_) => write!(f, \"{}\", \"{float}\"),\n-            FreshTy(v) => write!(f, \"FreshTy({})\", v),\n-            FreshIntTy(v) => write!(f, \"FreshIntTy({})\", v),\n-            FreshFloatTy(v) => write!(f, \"FreshFloatTy({})\", v),\n+            FreshTy(v) => write!(f, \"FreshTy({v})\"),\n+            FreshIntTy(v) => write!(f, \"FreshIntTy({v})\"),\n+            FreshFloatTy(v) => write!(f, \"FreshFloatTy({v})\"),\n         }\n     }\n }"}, {"sha": "b944cbd698d13598de404d3f6291718cb7259dfe", "filename": "compiler/rustc_type_ir/src/sty.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fd7a15971069156f1741fb3a3c34c9f0c54d5744/compiler%2Frustc_type_ir%2Fsrc%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd7a15971069156f1741fb3a3c34c9f0c54d5744/compiler%2Frustc_type_ir%2Fsrc%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_type_ir%2Fsrc%2Fsty.rs?ref=fd7a15971069156f1741fb3a3c34c9f0c54d5744", "patch": "@@ -1028,10 +1028,10 @@ impl<I: Interner> hash::Hash for RegionKind<I> {\n impl<I: Interner> fmt::Debug for RegionKind<I> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         match self {\n-            ReEarlyBound(data) => write!(f, \"ReEarlyBound({:?})\", data),\n+            ReEarlyBound(data) => write!(f, \"ReEarlyBound({data:?})\"),\n \n             ReLateBound(binder_id, bound_region) => {\n-                write!(f, \"ReLateBound({:?}, {:?})\", binder_id, bound_region)\n+                write!(f, \"ReLateBound({binder_id:?}, {bound_region:?})\")\n             }\n \n             ReFree(fr) => fr.fmt(f),\n@@ -1040,7 +1040,7 @@ impl<I: Interner> fmt::Debug for RegionKind<I> {\n \n             ReVar(vid) => vid.fmt(f),\n \n-            RePlaceholder(placeholder) => write!(f, \"RePlaceholder({:?})\", placeholder),\n+            RePlaceholder(placeholder) => write!(f, \"RePlaceholder({placeholder:?})\"),\n \n             ReErased => f.write_str(\"ReErased\"),\n         }"}]}