{"sha": "4756556748fe7fa247c02f36dc481c8eeae9908d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ3NTY1NTY3NDhmZTdmYTI0N2MwMmYzNmRjNDgxYzhlZWFlOTkwOGQ=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-05-23T07:38:39Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-05-23T07:43:02Z"}, "message": "rustc: Move new_def_hash to ast_util", "tree": {"sha": "a914d555843f7325f8d3120e262cedc914b17a81", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a914d555843f7325f8d3120e262cedc914b17a81"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4756556748fe7fa247c02f36dc481c8eeae9908d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4756556748fe7fa247c02f36dc481c8eeae9908d", "html_url": "https://github.com/rust-lang/rust/commit/4756556748fe7fa247c02f36dc481c8eeae9908d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4756556748fe7fa247c02f36dc481c8eeae9908d/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8ec467d521e6e39f80a0c74c049a5aa719a01dde", "url": "https://api.github.com/repos/rust-lang/rust/commits/8ec467d521e6e39f80a0c74c049a5aa719a01dde", "html_url": "https://github.com/rust-lang/rust/commit/8ec467d521e6e39f80a0c74c049a5aa719a01dde"}], "stats": {"total": 70, "additions": 35, "deletions": 35}, "files": [{"sha": "0357b5dbf872a693c7b4dc9f1af7e0f9ef57ddb9", "filename": "src/librustsyntax/ast_util.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/4756556748fe7fa247c02f36dc481c8eeae9908d/src%2Flibrustsyntax%2Fast_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4756556748fe7fa247c02f36dc481c8eeae9908d/src%2Flibrustsyntax%2Fast_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustsyntax%2Fast_util.rs?ref=4756556748fe7fa247c02f36dc481c8eeae9908d", "patch": "@@ -225,6 +225,23 @@ fn hash_ty(&&t: @ty) -> uint {\n     ret res;\n }\n \n+fn def_eq(a: ast::def_id, b: ast::def_id) -> bool {\n+    ret a.crate == b.crate && a.node == b.node;\n+}\n+\n+fn hash_def(d: ast::def_id) -> uint {\n+    let mut h = 5381u;\n+    h = (h << 5u) + h ^ (d.crate as uint);\n+    h = (h << 5u) + h ^ (d.node as uint);\n+    ret h;\n+}\n+\n+fn new_def_hash<V: copy>() -> std::map::hashmap<ast::def_id, V> {\n+    let hasher: std::map::hashfn<ast::def_id> = hash_def;\n+    let eqer: std::map::eqfn<ast::def_id> = def_eq;\n+    ret std::map::hashmap::<ast::def_id, V>(hasher, eqer);\n+}\n+\n fn hash_def_id(&&id: def_id) -> uint {\n     (id.crate as uint << 16u) + (id.node as uint)\n }"}, {"sha": "ceabf27d6228ae8f0b2b19e2a90ef5f6a168bad7", "filename": "src/rustc/metadata/cstore.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4756556748fe7fa247c02f36dc481c8eeae9908d/src%2Frustc%2Fmetadata%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4756556748fe7fa247c02f36dc481c8eeae9908d/src%2Frustc%2Fmetadata%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Fcstore.rs?ref=4756556748fe7fa247c02f36dc481c8eeae9908d", "patch": "@@ -4,6 +4,7 @@\n import std::map;\n import std::map::hashmap;\n import syntax::{ast, attr};\n+import syntax::ast_util::new_def_hash;\n import util::common::*;\n \n export cstore::{};"}, {"sha": "51109c1155a745b044347fdcd8df006e32b49982", "filename": "src/rustc/middle/region.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4756556748fe7fa247c02f36dc481c8eeae9908d/src%2Frustc%2Fmiddle%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4756556748fe7fa247c02f36dc481c8eeae9908d/src%2Frustc%2Fmiddle%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fregion.rs?ref=4756556748fe7fa247c02f36dc481c8eeae9908d", "patch": "@@ -137,7 +137,7 @@ import middle::ty;\n import syntax::{ast, visit};\n import syntax::codemap::span;\n import syntax::print::pprust;\n-import util::common::new_def_hash;\n+import syntax::ast_util::new_def_hash;\n \n import std::list;\n import std::list::list;"}, {"sha": "3c7133292687c90fe70a0817a926a16e0da26f45", "filename": "src/rustc/middle/resolve.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4756556748fe7fa247c02f36dc481c8eeae9908d/src%2Frustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4756556748fe7fa247c02f36dc481c8eeae9908d/src%2Frustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fresolve.rs?ref=4756556748fe7fa247c02f36dc481c8eeae9908d", "patch": "@@ -1,7 +1,7 @@\n import syntax::{ast, ast_util, codemap, ast_map};\n import syntax::ast::*;\n import ast::{ident, fn_ident, def, def_id, node_id};\n-import syntax::ast_util::{local_def, def_id_of_def,\n+import syntax::ast_util::{local_def, def_id_of_def, new_def_hash,\n                           class_item_ident, path_to_ident};\n import pat_util::*;\n \n@@ -73,10 +73,10 @@ type ext_hash = hashmap<{did: def_id, ident: str, ns: namespace}, def>;\n fn new_ext_hash() -> ext_hash {\n     type key = {did: def_id, ident: str, ns: namespace};\n     fn hash(v: key) -> uint {\n-        str::hash(v.ident) + util::common::hash_def(v.did) + v.ns as uint\n+        str::hash(v.ident) + ast_util::hash_def(v.did) + v.ns as uint\n     }\n     fn eq(v1: key, v2: key) -> bool {\n-        ret util::common::def_eq(v1.did, v2.did) &&\n+        ret ast_util::def_eq(v1.did, v2.did) &&\n             str::eq(v1.ident, v2.ident) && v1.ns == v2.ns;\n     }\n     std::map::hashmap(hash, {|a, b| a == b})"}, {"sha": "07cbc4a96bc0008e109b4c867db60529cd177f8e", "filename": "src/rustc/middle/trans/base.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4756556748fe7fa247c02f36dc481c8eeae9908d/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4756556748fe7fa247c02f36dc481c8eeae9908d/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=4756556748fe7fa247c02f36dc481c8eeae9908d", "patch": "@@ -5492,10 +5492,10 @@ fn trans_crate(sess: session::session, crate: @ast::crate, tcx: ty::ctxt,\n           discrims: ast_util::new_def_id_hash::<ValueRef>(),\n           discrim_symbols: int_hash::<str>(),\n           tydescs: ty::new_ty_hash(),\n-          external: util::common::new_def_hash(),\n+          external: ast_util::new_def_hash(),\n           monomorphized: map::hashmap(hash_mono_id, {|a, b| a == b}),\n           monomorphizing: ast_util::new_def_id_hash(),\n-          type_use_cache: util::common::new_def_hash(),\n+          type_use_cache: ast_util::new_def_hash(),\n           vtables: map::hashmap(hash_mono_id, {|a, b| a == b}),\n           const_cstr_cache: map::str_hash(),\n           module_data: str_hash::<ValueRef>(),"}, {"sha": "d5517dc5ee2136d3c20b42b283f559fb946d43a7", "filename": "src/rustc/middle/trans/shape.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4756556748fe7fa247c02f36dc481c8eeae9908d/src%2Frustc%2Fmiddle%2Ftrans%2Fshape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4756556748fe7fa247c02f36dc481c8eeae9908d/src%2Frustc%2Fmiddle%2Ftrans%2Fshape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fshape.rs?ref=4756556748fe7fa247c02f36dc481c8eeae9908d", "patch": "@@ -11,7 +11,7 @@ import back::abi;\n import middle::ty;\n import middle::ty::field;\n import syntax::ast;\n-import syntax::ast_util::dummy_sp;\n+import syntax::ast_util::{dummy_sp, new_def_hash};\n import syntax::util::interner;\n import util::common;\n import syntax::codemap::span;\n@@ -273,7 +273,7 @@ fn mk_ctxt(llmod: ModuleRef) -> ctxt {\n \n     ret {mut next_tag_id: 0u16,\n          pad: 0u16,\n-         tag_id_to_index: common::new_def_hash(),\n+         tag_id_to_index: new_def_hash(),\n          tag_order: dvec(),\n          resources: interner::mk(hash_res_info, {|a, b| a == b}),\n          llshapetablesty: llshapetablesty,"}, {"sha": "88a353f4cd8a747be4366810ba4ac7c0c1c69afb", "filename": "src/rustc/middle/tstate/collect_locals.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4756556748fe7fa247c02f36dc481c8eeae9908d/src%2Frustc%2Fmiddle%2Ftstate%2Fcollect_locals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4756556748fe7fa247c02f36dc481c8eeae9908d/src%2Frustc%2Fmiddle%2Ftstate%2Fcollect_locals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftstate%2Fcollect_locals.rs?ref=4756556748fe7fa247c02f36dc481c8eeae9908d", "patch": "@@ -3,7 +3,6 @@ import pat_util::*;\n import syntax::ast::*;\n import syntax::ast_util::*;\n import syntax::visit;\n-import util::common::new_def_hash;\n import syntax::codemap::span;\n import syntax::ast_util::respan;\n import driver::session::session;"}, {"sha": "3d1db2f6e6612a31858726c14e832341f5b738ac", "filename": "src/rustc/middle/tstate/pre_post_conditions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4756556748fe7fa247c02f36dc481c8eeae9908d/src%2Frustc%2Fmiddle%2Ftstate%2Fpre_post_conditions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4756556748fe7fa247c02f36dc481c8eeae9908d/src%2Frustc%2Fmiddle%2Ftstate%2Fpre_post_conditions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftstate%2Fpre_post_conditions.rs?ref=4756556748fe7fa247c02f36dc481c8eeae9908d", "patch": "@@ -9,7 +9,7 @@ import pat_util::*;\n import syntax::ast::*;\n import syntax::ast_util::*;\n import syntax::visit;\n-import util::common::{new_def_hash, log_expr, field_exprs,\n+import util::common::{log_expr, field_exprs,\n                       has_nonlocal_exits, log_stmt};\n import syntax::codemap::span;\n import driver::session::session;"}, {"sha": "84b4d4f65945518a26c864fe90dafa3f5cfb00ab", "filename": "src/rustc/middle/ty.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4756556748fe7fa247c02f36dc481c8eeae9908d/src%2Frustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4756556748fe7fa247c02f36dc481c8eeae9908d/src%2Frustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fty.rs?ref=4756556748fe7fa247c02f36dc481c8eeae9908d", "patch": "@@ -6,7 +6,8 @@ import session::session;\n import syntax::{ast, ast_map};\n import syntax::ast::*;\n import syntax::ast_util;\n-import syntax::ast_util::{is_local, local_def, split_class_items};\n+import syntax::ast_util::{is_local, local_def, split_class_items,\n+                          new_def_hash};\n import syntax::codemap::span;\n import metadata::csearch;\n import util::common::*;\n@@ -478,7 +479,7 @@ fn mk_ctxt(s: session::session, dm: resolve::def_map, amap: ast_map::map,\n       items: amap,\n       intrinsic_ifaces: map::str_hash(),\n       freevars: freevars,\n-      tcache: new_def_hash(),\n+      tcache: ast_util::new_def_hash(),\n       rcache: mk_rcache(),\n       short_names_cache: new_ty_hash(),\n       needs_drop_cache: new_ty_hash(),\n@@ -2524,7 +2525,7 @@ fn enum_variant_with_id(cx: ctxt, enum_id: ast::def_id,\n     let mut i = 0u;\n     while i < vec::len::<variant_info>(*variants) {\n         let variant = variants[i];\n-        if def_eq(variant.id, variant_id) { ret variant; }\n+        if ast_util::def_eq(variant.id, variant_id) { ret variant; }\n         i += 1u;\n     }\n     cx.sess.bug(\"enum_variant_with_id(): no variant exists with that ID\");"}, {"sha": "daab9eb33f182ad0d03e6aba0839f23d2ace1218", "filename": "src/rustc/util/common.rs", "status": "modified", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/4756556748fe7fa247c02f36dc481c8eeae9908d/src%2Frustc%2Futil%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4756556748fe7fa247c02f36dc481c8eeae9908d/src%2Frustc%2Futil%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Futil%2Fcommon.rs?ref=4756556748fe7fa247c02f36dc481c8eeae9908d", "patch": "@@ -25,23 +25,6 @@ fn indenter() -> _indenter {\n \n type flag = hashmap<str, ()>;\n \n-fn def_eq(a: ast::def_id, b: ast::def_id) -> bool {\n-    ret a.crate == b.crate && a.node == b.node;\n-}\n-\n-fn hash_def(d: ast::def_id) -> uint {\n-    let mut h = 5381u;\n-    h = (h << 5u) + h ^ (d.crate as uint);\n-    h = (h << 5u) + h ^ (d.node as uint);\n-    ret h;\n-}\n-\n-fn new_def_hash<V: copy>() -> std::map::hashmap<ast::def_id, V> {\n-    let hasher: std::map::hashfn<ast::def_id> = hash_def;\n-    let eqer: std::map::eqfn<ast::def_id> = def_eq;\n-    ret std::map::hashmap::<ast::def_id, V>(hasher, eqer);\n-}\n-\n fn field_expr(f: ast::field) -> @ast::expr { ret f.node.expr; }\n \n fn field_exprs(fields: [ast::field]) -> [@ast::expr] {"}, {"sha": "338c5d70f2875c9ac69d10deefe99472023fd718", "filename": "src/rustdoc/reexport_pass.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4756556748fe7fa247c02f36dc481c8eeae9908d/src%2Frustdoc%2Freexport_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4756556748fe7fa247c02f36dc481c8eeae9908d/src%2Frustdoc%2Freexport_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Freexport_pass.rs?ref=4756556748fe7fa247c02f36dc481c8eeae9908d", "patch": "@@ -5,7 +5,6 @@ import std::map::hashmap;\n import std::list;\n import syntax::ast;\n import syntax::ast_util;\n-import rustc::util::common;\n import syntax::ast_map;\n import syntax::visit;\n import syntax::codemap;\n@@ -69,7 +68,7 @@ fn from_assoc_list<K:copy, V:copy>(\n fn from_def_assoc_list<V:copy>(\n     list: [(ast::def_id, V)]\n ) -> map::hashmap<ast::def_id, V> {\n-    from_assoc_list(list, bind common::new_def_hash())\n+    from_assoc_list(list, bind ast_util::new_def_hash())\n }\n \n fn from_str_assoc_list<V:copy>(\n@@ -80,7 +79,7 @@ fn from_str_assoc_list<V:copy>(\n \n fn build_reexport_def_set(srv: astsrv::srv) -> def_set {\n     let assoc_list = astsrv::exec(srv) {|ctxt|\n-        let def_set = common::new_def_hash();\n+        let def_set = ast_util::new_def_hash();\n         for ctxt.exp_map.each {|_id, defs|\n             for defs.each {|def|\n                 if def.reexp {\n@@ -120,7 +119,7 @@ fn build_reexport_def_map(\n     let ctxt = {\n         srv: srv,\n         def_set: def_set,\n-        def_map: common::new_def_hash()\n+        def_map: ast_util::new_def_hash()\n     };\n \n     // FIXME: Do a parallel fold\n@@ -289,7 +288,7 @@ fn for_each_reexported_impl(\n }\n \n fn all_impls(m: ast::_mod) -> map::set<ast::def_id> {\n-    let all_impls = common::new_def_hash();\n+    let all_impls = ast_util::new_def_hash();\n     for m.items.each {|item|\n         alt item.node {\n           ast::item_impl(_, _, _, _, _) {"}]}