{"sha": "63940322792240a936d60e7fee062275891bf920", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYzOTQwMzIyNzkyMjQwYTkzNmQ2MGU3ZmVlMDYyMjc1ODkxYmY5MjA=", "commit": {"author": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2019-12-08T17:12:57Z"}, "committer": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2019-12-20T20:14:11Z"}, "message": "Correctly lower bounds on GATs", "tree": {"sha": "b58829096f269ae168b1f5eca9c1b25ca93646e7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b58829096f269ae168b1f5eca9c1b25ca93646e7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/63940322792240a936d60e7fee062275891bf920", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/63940322792240a936d60e7fee062275891bf920", "html_url": "https://github.com/rust-lang/rust/commit/63940322792240a936d60e7fee062275891bf920", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/63940322792240a936d60e7fee062275891bf920/comments", "author": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4b164f681dd5f7fd216c57b427ffa5d4b2c72e55", "url": "https://api.github.com/repos/rust-lang/rust/commits/4b164f681dd5f7fd216c57b427ffa5d4b2c72e55", "html_url": "https://github.com/rust-lang/rust/commit/4b164f681dd5f7fd216c57b427ffa5d4b2c72e55"}], "stats": {"total": 119, "additions": 100, "deletions": 19}, "files": [{"sha": "f25d2da13eea644e1849b3fb36119d0e3f2373f0", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 100, "deletions": 19, "changes": 119, "blob_url": "https://github.com/rust-lang/rust/blob/63940322792240a936d60e7fee062275891bf920/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63940322792240a936d60e7fee062275891bf920/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=63940322792240a936d60e7fee062275891bf920", "patch": "@@ -2300,25 +2300,7 @@ fn explicit_predicates_of(\n     // Add predicates from associated type bounds.\n     if let Some((self_trait_ref, trait_items)) = is_trait {\n         predicates.extend(trait_items.iter().flat_map(|trait_item_ref| {\n-            let trait_item = tcx.hir().trait_item(trait_item_ref.id);\n-            let bounds = match trait_item.kind {\n-                hir::TraitItemKind::Type(ref bounds, _) => bounds,\n-                _ => return Vec::new().into_iter()\n-            };\n-\n-            let assoc_ty =\n-                tcx.mk_projection(tcx.hir().local_def_id(trait_item.hir_id),\n-                    self_trait_ref.substs);\n-\n-            let bounds = AstConv::compute_bounds(\n-                &ItemCtxt::new(tcx, def_id),\n-                assoc_ty,\n-                bounds,\n-                SizedByDefault::Yes,\n-                trait_item.span,\n-            );\n-\n-            bounds.predicates(tcx, assoc_ty).into_iter()\n+            associated_item_predicates(tcx, def_id, self_trait_ref, trait_item_ref)\n         }))\n     }\n \n@@ -2352,6 +2334,105 @@ fn explicit_predicates_of(\n     result\n }\n \n+fn associated_item_predicates(\n+    tcx: TyCtxt<'tcx>,\n+    def_id: DefId,\n+    self_trait_ref: ty::TraitRef<'tcx>,\n+    trait_item_ref: &hir::TraitItemRef,\n+) -> Vec<(ty::Predicate<'tcx>, Span)> {\n+    let trait_item = tcx.hir().trait_item(trait_item_ref.id);\n+    let item_def_id = tcx.hir().local_def_id(trait_item_ref.id.hir_id);\n+    let bounds = match trait_item.kind {\n+        hir::TraitItemKind::Type(ref bounds, _) => bounds,\n+        _ => return Vec::new()\n+    };\n+\n+    let is_gat = !tcx.generics_of(item_def_id).params.is_empty();\n+\n+    let mut had_error = false;\n+\n+    let mut unimplemented_error = |arg_kind: &str| {\n+        if !had_error {\n+            tcx.sess.struct_span_err(\n+                trait_item.span,\n+                &format!(\"{}-generic associated types are not yet implemented\", arg_kind),\n+            )\n+                .note(\"for more information, see https://github.com/rust-lang/rust/issues/44265\")\n+                .emit();\n+            had_error = true;\n+        }\n+    };\n+\n+    let mk_bound_param = |param: &ty::GenericParamDef, _: &_| {\n+        match param.kind {\n+            ty::GenericParamDefKind::Lifetime => {\n+                tcx.mk_region(ty::RegionKind::ReLateBound(\n+                    ty::INNERMOST,\n+                    ty::BoundRegion::BrNamed(param.def_id, param.name)\n+                )).into()\n+            }\n+            // FIXME(generic_associated_types): Use bound types and constants\n+            // once they are handled by the trait system.\n+            ty::GenericParamDefKind::Type { .. } => {\n+                unimplemented_error(\"type\");\n+                tcx.types.err.into()\n+            }\n+            ty::GenericParamDefKind::Const => {\n+                unimplemented_error(\"const\");\n+                tcx.consts.err.into()\n+            }\n+        }\n+    };\n+\n+    let bound_substs = if is_gat {\n+        // Given:\n+        //\n+        // trait X<'a, B, const C: usize> {\n+        //     type T<'d, E, const F: usize>: Default;\n+        // }\n+        //\n+        // We need to create predicates on the trait:\n+        //\n+        // for<'d, E, const F: usize>\n+        // <Self as X<'a, B, const C: usize>>::T<'d, E, const F: usize>: Sized + Default\n+        //\n+        // We substitute escaping bound parameters for the generic\n+        // arguments to the associated type which are then bound by\n+        // the `Binder` around the the predicate.\n+        //\n+        // FIXME(generic_associated_types): Currently only lifetimes are handled.\n+        self_trait_ref.substs.extend_to(tcx, item_def_id, mk_bound_param)\n+    } else {\n+        self_trait_ref.substs\n+    };\n+\n+    let assoc_ty = tcx.mk_projection(\n+        tcx.hir().local_def_id(trait_item.hir_id),\n+        bound_substs,\n+    );\n+\n+    let bounds = AstConv::compute_bounds(\n+        &ItemCtxt::new(tcx, def_id),\n+        assoc_ty,\n+        bounds,\n+        SizedByDefault::Yes,\n+        trait_item.span,\n+    );\n+\n+    let predicates = bounds.predicates(tcx, assoc_ty);\n+\n+    if is_gat {\n+        // We use shifts to get the regions that we're substituting to\n+        // be bound by the binders in the `Predicate`s rather that\n+        // escaping.\n+        let shifted_in = ty::fold::shift_vars(tcx, &predicates, 1);\n+        let substituted = shifted_in.subst(tcx, bound_substs);\n+        ty::fold::shift_out_vars(tcx, &substituted, 1)\n+    } else {\n+        predicates\n+    }\n+}\n+\n /// Converts a specific `GenericBound` from the AST into a set of\n /// predicates that apply to the self type. A vector is returned\n /// because this can be anywhere from zero predicates (`T: ?Sized` adds no"}]}