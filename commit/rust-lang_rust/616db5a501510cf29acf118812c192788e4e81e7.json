{"sha": "616db5a501510cf29acf118812c192788e4e81e7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYxNmRiNWE1MDE1MTBjZjI5YWNmMTE4ODEyYzE5Mjc4OGU0ZTgxZTc=", "commit": {"author": {"name": "Tom Jakubowski", "email": "tom@crystae.net", "date": "2015-01-12T17:43:24Z"}, "committer": {"name": "Tom Jakubowski", "email": "tom@crystae.net", "date": "2015-01-12T17:43:24Z"}, "message": "rustdoc: Show type bindings on object types\n\nFix #20299", "tree": {"sha": "063bdb8d0b779774f5ec66851ac015bef45b442e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/063bdb8d0b779774f5ec66851ac015bef45b442e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/616db5a501510cf29acf118812c192788e4e81e7", "comment_count": 7, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/616db5a501510cf29acf118812c192788e4e81e7", "html_url": "https://github.com/rust-lang/rust/commit/616db5a501510cf29acf118812c192788e4e81e7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/616db5a501510cf29acf118812c192788e4e81e7/comments", "author": {"login": "tomjakubowski", "id": 667901, "node_id": "MDQ6VXNlcjY2NzkwMQ==", "avatar_url": "https://avatars.githubusercontent.com/u/667901?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tomjakubowski", "html_url": "https://github.com/tomjakubowski", "followers_url": "https://api.github.com/users/tomjakubowski/followers", "following_url": "https://api.github.com/users/tomjakubowski/following{/other_user}", "gists_url": "https://api.github.com/users/tomjakubowski/gists{/gist_id}", "starred_url": "https://api.github.com/users/tomjakubowski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tomjakubowski/subscriptions", "organizations_url": "https://api.github.com/users/tomjakubowski/orgs", "repos_url": "https://api.github.com/users/tomjakubowski/repos", "events_url": "https://api.github.com/users/tomjakubowski/events{/privacy}", "received_events_url": "https://api.github.com/users/tomjakubowski/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tomjakubowski", "id": 667901, "node_id": "MDQ6VXNlcjY2NzkwMQ==", "avatar_url": "https://avatars.githubusercontent.com/u/667901?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tomjakubowski", "html_url": "https://github.com/tomjakubowski", "followers_url": "https://api.github.com/users/tomjakubowski/followers", "following_url": "https://api.github.com/users/tomjakubowski/following{/other_user}", "gists_url": "https://api.github.com/users/tomjakubowski/gists{/gist_id}", "starred_url": "https://api.github.com/users/tomjakubowski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tomjakubowski/subscriptions", "organizations_url": "https://api.github.com/users/tomjakubowski/orgs", "repos_url": "https://api.github.com/users/tomjakubowski/repos", "events_url": "https://api.github.com/users/tomjakubowski/events{/privacy}", "received_events_url": "https://api.github.com/users/tomjakubowski/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "072a89642bae1a1aca96acda290dab1bcf318696", "url": "https://api.github.com/repos/rust-lang/rust/commits/072a89642bae1a1aca96acda290dab1bcf318696", "html_url": "https://github.com/rust-lang/rust/commit/072a89642bae1a1aca96acda290dab1bcf318696"}], "stats": {"total": 47, "additions": 27, "deletions": 20}, "files": [{"sha": "b65e1d1d664b4b5c67c35af05886b957d7d8a565", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 27, "deletions": 20, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/616db5a501510cf29acf118812c192788e4e81e7/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/616db5a501510cf29acf118812c192788e4e81e7/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=616db5a501510cf29acf118812c192788e4e81e7", "patch": "@@ -504,22 +504,28 @@ impl Clean<TyParamBound> for ast::TyParamBound {\n     }\n }\n \n-impl<'tcx> Clean<Vec<TyParamBound>> for ty::ExistentialBounds<'tcx> {\n-    fn clean(&self, cx: &DocContext) -> Vec<TyParamBound> {\n-        let mut vec = vec![];\n-        self.region_bound.clean(cx).map(|b| vec.push(RegionBound(b)));\n+impl<'tcx> Clean<(Vec<TyParamBound>, Vec<TypeBinding>)> for ty::ExistentialBounds<'tcx> {\n+    fn clean(&self, cx: &DocContext) -> (Vec<TyParamBound>, Vec<TypeBinding>) {\n+        let mut tp_bounds = vec![];\n+        self.region_bound.clean(cx).map(|b| tp_bounds.push(RegionBound(b)));\n         for bb in self.builtin_bounds.iter() {\n-            vec.push(bb.clean(cx));\n+            tp_bounds.push(bb.clean(cx));\n         }\n \n-        // FIXME(#20299) -- should do something with projection bounds\n+        let mut bindings = vec![];\n+        for &ty::Binder(ref pb) in self.projection_bounds.iter() {\n+            bindings.push(TypeBinding {\n+                name: pb.projection_ty.item_name.clean(cx),\n+                ty: pb.ty.clean(cx)\n+            });\n+        }\n \n-        vec\n+        (tp_bounds, bindings)\n     }\n }\n \n fn external_path_params(cx: &DocContext, trait_did: Option<ast::DefId>,\n-                        substs: &subst::Substs) -> PathParameters {\n+                        bindings: Vec<TypeBinding>, substs: &subst::Substs) -> PathParameters {\n     use rustc::middle::ty::sty;\n     let lifetimes = substs.regions().get_slice(subst::TypeSpace)\n                     .iter()\n@@ -537,7 +543,7 @@ fn external_path_params(cx: &DocContext, trait_did: Option<ast::DefId>,\n                     return PathParameters::AngleBracketed {\n                         lifetimes: lifetimes,\n                         types: types.clean(cx),\n-                        bindings: vec![]\n+                        bindings: bindings\n                     }\n                 }\n             };\n@@ -554,7 +560,7 @@ fn external_path_params(cx: &DocContext, trait_did: Option<ast::DefId>,\n             PathParameters::AngleBracketed {\n                 lifetimes: lifetimes,\n                 types: types.clean(cx),\n-                bindings: vec![] // FIXME(#20646)\n+                bindings: bindings\n             }\n         }\n     }\n@@ -563,12 +569,12 @@ fn external_path_params(cx: &DocContext, trait_did: Option<ast::DefId>,\n // trait_did should be set to a trait's DefId if called on a TraitRef, in order to sugar\n // from Fn<(A, B,), C> to Fn(A, B) -> C\n fn external_path(cx: &DocContext, name: &str, trait_did: Option<ast::DefId>,\n-                 substs: &subst::Substs) -> Path {\n+                 bindings: Vec<TypeBinding>, substs: &subst::Substs) -> Path {\n     Path {\n         global: false,\n         segments: vec![PathSegment {\n             name: name.to_string(),\n-            params: external_path_params(cx, trait_did, substs)\n+            params: external_path_params(cx, trait_did, bindings, substs)\n         }],\n     }\n }\n@@ -583,16 +589,16 @@ impl Clean<TyParamBound> for ty::BuiltinBound {\n         let (did, path) = match *self {\n             ty::BoundSend =>\n                 (tcx.lang_items.send_trait().unwrap(),\n-                 external_path(cx, \"Send\", None, &empty)),\n+                 external_path(cx, \"Send\", None, vec![], &empty)),\n             ty::BoundSized =>\n                 (tcx.lang_items.sized_trait().unwrap(),\n-                 external_path(cx, \"Sized\", None, &empty)),\n+                 external_path(cx, \"Sized\", None, vec![], &empty)),\n             ty::BoundCopy =>\n                 (tcx.lang_items.copy_trait().unwrap(),\n-                 external_path(cx, \"Copy\", None, &empty)),\n+                 external_path(cx, \"Copy\", None, vec![], &empty)),\n             ty::BoundSync =>\n                 (tcx.lang_items.sync_trait().unwrap(),\n-                 external_path(cx, \"Sync\", None, &empty)),\n+                 external_path(cx, \"Sync\", None, vec![], &empty)),\n         };\n         let fqn = csearch::get_item_path(tcx, did);\n         let fqn = fqn.into_iter().map(|i| i.to_string()).collect();\n@@ -619,7 +625,7 @@ impl<'tcx> Clean<TyParamBound> for ty::TraitRef<'tcx> {\n         let fqn = fqn.into_iter().map(|i| i.to_string())\n                      .collect::<Vec<String>>();\n         let path = external_path(cx, fqn.last().unwrap().as_slice(),\n-                                 Some(self.def_id), self.substs);\n+                                 Some(self.def_id), vec![], self.substs);\n         cx.external_paths.borrow_mut().as_mut().unwrap().insert(self.def_id,\n                                                             (fqn, TypeTrait));\n \n@@ -1558,7 +1564,7 @@ impl<'tcx> Clean<Type> for ty::Ty<'tcx> {\n                     _ => TypeEnum,\n                 };\n                 let path = external_path(cx, fqn.last().unwrap().to_string().as_slice(),\n-                                         None, substs);\n+                                         None, vec![], substs);\n                 cx.external_paths.borrow_mut().as_mut().unwrap().insert(did, (fqn, kind));\n                 ResolvedPath {\n                     path: path,\n@@ -1570,12 +1576,13 @@ impl<'tcx> Clean<Type> for ty::Ty<'tcx> {\n                 let did = principal.def_id();\n                 let fqn = csearch::get_item_path(cx.tcx(), did);\n                 let fqn: Vec<_> = fqn.into_iter().map(|i| i.to_string()).collect();\n+                let (typarams, bindings) = bounds.clean(cx);\n                 let path = external_path(cx, fqn.last().unwrap().to_string().as_slice(),\n-                                         Some(did), principal.substs());\n+                                         Some(did), bindings, principal.substs());\n                 cx.external_paths.borrow_mut().as_mut().unwrap().insert(did, (fqn, TypeTrait));\n                 ResolvedPath {\n                     path: path,\n-                    typarams: Some(bounds.clean(cx)),\n+                    typarams: Some(typarams),\n                     did: did,\n                 }\n             }"}]}