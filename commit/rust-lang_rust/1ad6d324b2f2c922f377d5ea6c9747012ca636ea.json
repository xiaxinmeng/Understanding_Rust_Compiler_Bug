{"sha": "1ad6d324b2f2c922f377d5ea6c9747012ca636ea", "node_id": "C_kwDOAAsO6NoAKDFhZDZkMzI0YjJmMmM5MjJmMzc3ZDVlYTZjOTc0NzAxMmNhNjM2ZWE", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-06-14T09:00:21Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-06-14T09:00:21Z"}, "message": "Auto merge of #12528 - Veykril:proc-diag, r=Veykril\n\nfix: Check for the correct proc-macro settings in missing proc-macro diagnostics", "tree": {"sha": "81a699a414a26b2ef43a6700f2707a8e6550f7a2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/81a699a414a26b2ef43a6700f2707a8e6550f7a2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1ad6d324b2f2c922f377d5ea6c9747012ca636ea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1ad6d324b2f2c922f377d5ea6c9747012ca636ea", "html_url": "https://github.com/rust-lang/rust/commit/1ad6d324b2f2c922f377d5ea6c9747012ca636ea", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1ad6d324b2f2c922f377d5ea6c9747012ca636ea/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7db73875ac0d9280ae93b14232249d9c1496583a", "url": "https://api.github.com/repos/rust-lang/rust/commits/7db73875ac0d9280ae93b14232249d9c1496583a", "html_url": "https://github.com/rust-lang/rust/commit/7db73875ac0d9280ae93b14232249d9c1496583a"}, {"sha": "325ceaef19df2ab6a21fd2ed3796607d85e0de4c", "url": "https://api.github.com/repos/rust-lang/rust/commits/325ceaef19df2ab6a21fd2ed3796607d85e0de4c", "html_url": "https://github.com/rust-lang/rust/commit/325ceaef19df2ab6a21fd2ed3796607d85e0de4c"}], "stats": {"total": 57, "additions": 40, "deletions": 17}, "files": [{"sha": "0c88d15b089e05857c2ad38ae52f1e1d7cffa36a", "filename": "crates/hir/src/diagnostics.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1ad6d324b2f2c922f377d5ea6c9747012ca636ea/crates%2Fhir%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ad6d324b2f2c922f377d5ea6c9747012ca636ea/crates%2Fhir%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fdiagnostics.rs?ref=1ad6d324b2f2c922f377d5ea6c9747012ca636ea", "patch": "@@ -9,7 +9,7 @@ use hir_def::path::ModPath;\n use hir_expand::{name::Name, HirFileId, InFile};\n use syntax::{ast, AstPtr, SyntaxNodePtr, TextRange};\n \n-use crate::Type;\n+use crate::{MacroKind, Type};\n \n macro_rules! diagnostics {\n     ($($diag:ident,)*) => {\n@@ -86,6 +86,7 @@ pub struct UnresolvedProcMacro {\n     /// to use instead.\n     pub precise_location: Option<TextRange>,\n     pub macro_name: Option<String>,\n+    pub kind: MacroKind,\n }\n \n #[derive(Debug, Clone, Eq, PartialEq)]"}, {"sha": "4620d0c03acc4dfcfee4274ee0dad622184646a5", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1ad6d324b2f2c922f377d5ea6c9747012ca636ea/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ad6d324b2f2c922f377d5ea6c9747012ca636ea/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=1ad6d324b2f2c922f377d5ea6c9747012ca636ea", "patch": "@@ -628,13 +628,14 @@ fn emit_def_diagnostic(db: &dyn HirDatabase, acc: &mut Vec<AnyDiagnostic>, diag:\n         }\n \n         DefDiagnosticKind::UnresolvedProcMacro { ast } => {\n-            let (node, precise_location, macro_name) = match ast {\n+            let (node, precise_location, macro_name, kind) = match ast {\n                 MacroCallKind::FnLike { ast_id, .. } => {\n                     let node = ast_id.to_node(db.upcast());\n                     (\n                         ast_id.with_value(SyntaxNodePtr::from(AstPtr::new(&node))),\n                         node.path().map(|it| it.syntax().text_range()),\n                         node.path().and_then(|it| it.segment()).map(|it| it.to_string()),\n+                        MacroKind::ProcMacro,\n                     )\n                 }\n                 MacroCallKind::Derive { ast_id, derive_attr_index, derive_index } => {\n@@ -665,6 +666,7 @@ fn emit_def_diagnostic(db: &dyn HirDatabase, acc: &mut Vec<AnyDiagnostic>, diag:\n                         ast_id.with_value(SyntaxNodePtr::from(AstPtr::new(&node))),\n                         token.as_ref().map(|tok| tok.text_range()),\n                         token.as_ref().map(ToString::to_string),\n+                        MacroKind::Derive,\n                     )\n                 }\n                 MacroCallKind::Attr { ast_id, invoc_attr_index, .. } => {\n@@ -683,10 +685,11 @@ fn emit_def_diagnostic(db: &dyn HirDatabase, acc: &mut Vec<AnyDiagnostic>, diag:\n                             .and_then(|seg| seg.name_ref())\n                             .as_ref()\n                             .map(ToString::to_string),\n+                        MacroKind::Attr,\n                     )\n                 }\n             };\n-            acc.push(UnresolvedProcMacro { node, precise_location, macro_name }.into());\n+            acc.push(UnresolvedProcMacro { node, precise_location, macro_name, kind }.into());\n         }\n \n         DefDiagnosticKind::UnresolvedMacroCall { ast, path } => {\n@@ -1159,6 +1162,7 @@ impl DefWithBody {\n                         node: node.clone().map(|it| it.into()),\n                         precise_location: None,\n                         macro_name: None,\n+                        kind: MacroKind::ProcMacro,\n                     }\n                     .into(),\n                 ),"}, {"sha": "37350a7aaf17038e0a807dc4bc46d66096d5c964", "filename": "crates/ide-diagnostics/src/handlers/unresolved_proc_macro.rs", "status": "modified", "additions": 22, "deletions": 7, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/1ad6d324b2f2c922f377d5ea6c9747012ca636ea/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Funresolved_proc_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ad6d324b2f2c922f377d5ea6c9747012ca636ea/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Funresolved_proc_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Funresolved_proc_macro.rs?ref=1ad6d324b2f2c922f377d5ea6c9747012ca636ea", "patch": "@@ -12,21 +12,36 @@ use crate::{Diagnostic, DiagnosticsContext, Severity};\n pub(crate) fn unresolved_proc_macro(\n     ctx: &DiagnosticsContext<'_>,\n     d: &hir::UnresolvedProcMacro,\n-    attr_proc_macros_enabled: bool,\n+    proc_macros_enabled: bool,\n+    proc_attr_macros_enabled: bool,\n ) -> Diagnostic {\n     // Use more accurate position if available.\n     let display_range = d\n         .precise_location\n         .unwrap_or_else(|| ctx.sema.diagnostics_display_range(d.node.clone()).range);\n+\n+    let config_enabled = match d.kind {\n+        hir::MacroKind::Attr => proc_macros_enabled && proc_attr_macros_enabled,\n+        _ => proc_macros_enabled,\n+    };\n+\n     let message = match &d.macro_name {\n         Some(name) => format!(\"proc macro `{}` not expanded\", name),\n         None => \"proc macro not expanded\".to_string(),\n     };\n-    let message = format!(\n-        \"{message}{}\",\n-        if attr_proc_macros_enabled { \"\" } else { \" (attribute macro expansion is disabled)\" }\n-    );\n+    let (message, severity) = if config_enabled {\n+        (message, Severity::Error)\n+    } else {\n+        let message = match d.kind {\n+            hir::MacroKind::Attr if proc_macros_enabled => {\n+                format!(\"{message}{}\", \" (attribute macro expansion is disabled)\")\n+            }\n+            _ => {\n+                format!(\"{message}{}\", \" (proc-macro expansion is disabled)\")\n+            }\n+        };\n+        (message, Severity::WeakWarning)\n+    };\n \n-    Diagnostic::new(\"unresolved-proc-macro\", message, display_range)\n-        .severity(if attr_proc_macros_enabled { Severity::Error } else { Severity::WeakWarning })\n+    Diagnostic::new(\"unresolved-proc-macro\", message, display_range).severity(severity)\n }"}, {"sha": "eeddd36fb53862279d803705b25df2eff36e4b68", "filename": "crates/ide-diagnostics/src/lib.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1ad6d324b2f2c922f377d5ea6c9747012ca636ea/crates%2Fide-diagnostics%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ad6d324b2f2c922f377d5ea6c9747012ca636ea/crates%2Fide-diagnostics%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-diagnostics%2Fsrc%2Flib.rs?ref=1ad6d324b2f2c922f377d5ea6c9747012ca636ea", "patch": "@@ -139,7 +139,8 @@ impl Default for ExprFillDefaultMode {\n \n #[derive(Default, Debug, Clone)]\n pub struct DiagnosticsConfig {\n-    pub attr_proc_macros_enabled: bool,\n+    pub proc_macros_enabled: bool,\n+    pub proc_attr_macros_enabled: bool,\n     pub disable_experimental: bool,\n     pub disabled: FxHashSet<String>,\n     pub expr_fill_default: ExprFillDefaultMode,\n@@ -205,7 +206,7 @@ pub fn diagnostics(\n             AnyDiagnostic::UnresolvedImport(d) => handlers::unresolved_import::unresolved_import(&ctx, &d),\n             AnyDiagnostic::UnresolvedMacroCall(d) => handlers::unresolved_macro_call::unresolved_macro_call(&ctx, &d),\n             AnyDiagnostic::UnresolvedModule(d) => handlers::unresolved_module::unresolved_module(&ctx, &d),\n-            AnyDiagnostic::UnresolvedProcMacro(d) => handlers::unresolved_proc_macro::unresolved_proc_macro(&ctx, &d, config.attr_proc_macros_enabled),\n+            AnyDiagnostic::UnresolvedProcMacro(d) => handlers::unresolved_proc_macro::unresolved_proc_macro(&ctx, &d, config.proc_macros_enabled, config.proc_attr_macros_enabled),\n             AnyDiagnostic::InvalidDeriveTarget(d) => handlers::invalid_derive_target::invalid_derive_target(&ctx, &d),\n \n             AnyDiagnostic::InactiveCode(d) => match handlers::inactive_code::inactive_code(&ctx, &d) {"}, {"sha": "eae5fc8d1707b9033b6d83dc67357ec31655f60d", "filename": "crates/ide/src/highlight_related.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1ad6d324b2f2c922f377d5ea6c9747012ca636ea/crates%2Fide%2Fsrc%2Fhighlight_related.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ad6d324b2f2c922f377d5ea6c9747012ca636ea/crates%2Fide%2Fsrc%2Fhighlight_related.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fhighlight_related.rs?ref=1ad6d324b2f2c922f377d5ea6c9747012ca636ea", "patch": "@@ -36,10 +36,11 @@ pub struct HighlightRelatedConfig {\n // Feature: Highlight Related\n //\n // Highlights constructs related to the thing under the cursor:\n-// - if on an identifier, highlights all references to that identifier in the current file\n-// - if on an `async` or `await token, highlights all yield points for that async context\n-// - if on a `return` or `fn` keyword, `?` character or `->` return type arrow, highlights all exit points for that context\n-// - if on a `break`, `loop`, `while` or `for` token, highlights all break points for that loop or block context\n+//\n+// . if on an identifier, highlights all references to that identifier in the current file\n+// . if on an `async` or `await token, highlights all yield points for that async context\n+// . if on a `return` or `fn` keyword, `?` character or `->` return type arrow, highlights all exit points for that context\n+// . if on a `break`, `loop`, `while` or `for` token, highlights all break points for that loop or block context\n //\n // Note: `?` and `->` do not currently trigger this behavior in the VSCode editor.\n pub(crate) fn highlight_related("}, {"sha": "e5ac10556d638c8e199f2c9d7efad0161f4e875d", "filename": "crates/rust-analyzer/src/config.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1ad6d324b2f2c922f377d5ea6c9747012ca636ea/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ad6d324b2f2c922f377d5ea6c9747012ca636ea/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs?ref=1ad6d324b2f2c922f377d5ea6c9747012ca636ea", "patch": "@@ -856,7 +856,8 @@ impl Config {\n \n     pub fn diagnostics(&self) -> DiagnosticsConfig {\n         DiagnosticsConfig {\n-            attr_proc_macros_enabled: self.expand_proc_attr_macros(),\n+            proc_attr_macros_enabled: self.expand_proc_attr_macros(),\n+            proc_macros_enabled: self.data.procMacro_enable,\n             disable_experimental: !self.data.diagnostics_experimental_enable,\n             disabled: self.data.diagnostics_disabled.clone(),\n             expr_fill_default: match self.data.assist_expressionFillDefault {"}]}