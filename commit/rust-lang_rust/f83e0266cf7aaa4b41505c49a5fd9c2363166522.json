{"sha": "f83e0266cf7aaa4b41505c49a5fd9c2363166522", "node_id": "C_kwDOAAsO6NoAKGY4M2UwMjY2Y2Y3YWFhNGI0MTUwNWM0OWE1ZmQ5YzIzNjMxNjY1MjI", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-10-03T20:22:18Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-10-03T20:22:18Z"}, "message": "Auto merge of #102632 - matthiaskrgr:rollup-h8s3zmo, r=matthiaskrgr\n\nRollup of 7 pull requests\n\nSuccessful merges:\n\n - #98218 (Document the conditional existence of `alloc::sync` and `alloc::task`.)\n - #99216 (docs: be less harsh in wording for Vec::from_raw_parts)\n - #99460 (docs: Improve AsRef / AsMut docs on blanket impls)\n - #100470 (Tweak `FpCategory` example order.)\n - #101040 (Fix `#[derive(Default)]` on a generic `#[default]` enum adding unnecessary `Default` bounds)\n - #101308 (introduce `{char, u8}::is_ascii_octdigit`)\n - #102486 (Add diagnostic struct for const eval error in `rustc_middle`)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "137e60b9c78868fa350088e998adfaae9a57c39d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/137e60b9c78868fa350088e998adfaae9a57c39d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f83e0266cf7aaa4b41505c49a5fd9c2363166522", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f83e0266cf7aaa4b41505c49a5fd9c2363166522", "html_url": "https://github.com/rust-lang/rust/commit/f83e0266cf7aaa4b41505c49a5fd9c2363166522", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f83e0266cf7aaa4b41505c49a5fd9c2363166522/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "092255976862c1f0121bb4446acd38336a860c4f", "url": "https://api.github.com/repos/rust-lang/rust/commits/092255976862c1f0121bb4446acd38336a860c4f", "html_url": "https://github.com/rust-lang/rust/commit/092255976862c1f0121bb4446acd38336a860c4f"}, {"sha": "1b9014f2733eb4fd76e2d7ee26a145b0eda02c16", "url": "https://api.github.com/repos/rust-lang/rust/commits/1b9014f2733eb4fd76e2d7ee26a145b0eda02c16", "html_url": "https://github.com/rust-lang/rust/commit/1b9014f2733eb4fd76e2d7ee26a145b0eda02c16"}], "stats": {"total": 484, "additions": 450, "deletions": 34}, "files": [{"sha": "7bd344467d03213130aa32ae46fad4f47875d853", "filename": "compiler/rustc_builtin_macros/src/deriving/bounds.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f83e0266cf7aaa4b41505c49a5fd9c2363166522/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fbounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f83e0266cf7aaa4b41505c49a5fd9c2363166522/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fbounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fbounds.rs?ref=f83e0266cf7aaa4b41505c49a5fd9c2363166522", "patch": "@@ -16,6 +16,7 @@ pub fn expand_deriving_copy(\n     let trait_def = TraitDef {\n         span,\n         path: path_std!(marker::Copy),\n+        skip_path_as_bound: false,\n         additional_bounds: Vec::new(),\n         generics: Bounds::empty(),\n         supports_unions: true,"}, {"sha": "fa8685f5f4e5650882fa957c2368faa80e0abc0e", "filename": "compiler/rustc_builtin_macros/src/deriving/clone.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f83e0266cf7aaa4b41505c49a5fd9c2363166522/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fclone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f83e0266cf7aaa4b41505c49a5fd9c2363166522/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fclone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fclone.rs?ref=f83e0266cf7aaa4b41505c49a5fd9c2363166522", "patch": "@@ -72,6 +72,7 @@ pub fn expand_deriving_clone(\n     let trait_def = TraitDef {\n         span,\n         path: path_std!(clone::Clone),\n+        skip_path_as_bound: false,\n         additional_bounds: bounds,\n         generics: Bounds::empty(),\n         supports_unions: true,"}, {"sha": "eab67b0d354cf7dd18be1b785c514c4debe47517", "filename": "compiler/rustc_builtin_macros/src/deriving/cmp/eq.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f83e0266cf7aaa4b41505c49a5fd9c2363166522/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fcmp%2Feq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f83e0266cf7aaa4b41505c49a5fd9c2363166522/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fcmp%2Feq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fcmp%2Feq.rs?ref=f83e0266cf7aaa4b41505c49a5fd9c2363166522", "patch": "@@ -25,6 +25,7 @@ pub fn expand_deriving_eq(\n     let trait_def = TraitDef {\n         span,\n         path: path_std!(cmp::Eq),\n+        skip_path_as_bound: false,\n         additional_bounds: Vec::new(),\n         generics: Bounds::empty(),\n         supports_unions: true,"}, {"sha": "7f117981a9a2fe73fdece52da04079838e815e0f", "filename": "compiler/rustc_builtin_macros/src/deriving/cmp/ord.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f83e0266cf7aaa4b41505c49a5fd9c2363166522/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fcmp%2Ford.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f83e0266cf7aaa4b41505c49a5fd9c2363166522/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fcmp%2Ford.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fcmp%2Ford.rs?ref=f83e0266cf7aaa4b41505c49a5fd9c2363166522", "patch": "@@ -19,6 +19,7 @@ pub fn expand_deriving_ord(\n     let trait_def = TraitDef {\n         span,\n         path: path_std!(cmp::Ord),\n+        skip_path_as_bound: false,\n         additional_bounds: Vec::new(),\n         generics: Bounds::empty(),\n         supports_unions: false,"}, {"sha": "236cbccaf9fee6286494c1bfc08173c01f04716f", "filename": "compiler/rustc_builtin_macros/src/deriving/cmp/partial_eq.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f83e0266cf7aaa4b41505c49a5fd9c2363166522/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fcmp%2Fpartial_eq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f83e0266cf7aaa4b41505c49a5fd9c2363166522/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fcmp%2Fpartial_eq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fcmp%2Fpartial_eq.rs?ref=f83e0266cf7aaa4b41505c49a5fd9c2363166522", "patch": "@@ -83,6 +83,7 @@ pub fn expand_deriving_partial_eq(\n     let trait_def = TraitDef {\n         span,\n         path: path_std!(cmp::PartialEq),\n+        skip_path_as_bound: false,\n         additional_bounds: Vec::new(),\n         generics: Bounds::empty(),\n         supports_unions: false,"}, {"sha": "4173403a1b84a4f4007d77aae5376ffc3e63a109", "filename": "compiler/rustc_builtin_macros/src/deriving/cmp/partial_ord.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f83e0266cf7aaa4b41505c49a5fd9c2363166522/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fcmp%2Fpartial_ord.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f83e0266cf7aaa4b41505c49a5fd9c2363166522/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fcmp%2Fpartial_ord.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fcmp%2Fpartial_ord.rs?ref=f83e0266cf7aaa4b41505c49a5fd9c2363166522", "patch": "@@ -37,6 +37,7 @@ pub fn expand_deriving_partial_ord(\n     let trait_def = TraitDef {\n         span,\n         path: path_std!(cmp::PartialOrd),\n+        skip_path_as_bound: false,\n         additional_bounds: vec![],\n         generics: Bounds::empty(),\n         supports_unions: false,"}, {"sha": "2cf614ed9476c9435b50d7aaced16f097bb3cc39", "filename": "compiler/rustc_builtin_macros/src/deriving/debug.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f83e0266cf7aaa4b41505c49a5fd9c2363166522/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fdebug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f83e0266cf7aaa4b41505c49a5fd9c2363166522/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fdebug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fdebug.rs?ref=f83e0266cf7aaa4b41505c49a5fd9c2363166522", "patch": "@@ -20,6 +20,7 @@ pub fn expand_deriving_debug(\n     let trait_def = TraitDef {\n         span,\n         path: path_std!(fmt::Debug),\n+        skip_path_as_bound: false,\n         additional_bounds: Vec::new(),\n         generics: Bounds::empty(),\n         supports_unions: false,"}, {"sha": "d669f616802feda4bf06d489b3eaf7966977dd1a", "filename": "compiler/rustc_builtin_macros/src/deriving/decodable.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f83e0266cf7aaa4b41505c49a5fd9c2363166522/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fdecodable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f83e0266cf7aaa4b41505c49a5fd9c2363166522/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fdecodable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fdecodable.rs?ref=f83e0266cf7aaa4b41505c49a5fd9c2363166522", "patch": "@@ -23,6 +23,7 @@ pub fn expand_deriving_rustc_decodable(\n     let trait_def = TraitDef {\n         span,\n         path: Path::new_(vec![krate, sym::Decodable], vec![], PathKind::Global),\n+        skip_path_as_bound: false,\n         additional_bounds: Vec::new(),\n         generics: Bounds::empty(),\n         supports_unions: false,"}, {"sha": "17df9fb279ad6b808e57840c5d417e1639d8a144", "filename": "compiler/rustc_builtin_macros/src/deriving/default.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/f83e0266cf7aaa4b41505c49a5fd9c2363166522/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fdefault.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f83e0266cf7aaa4b41505c49a5fd9c2363166522/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fdefault.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fdefault.rs?ref=f83e0266cf7aaa4b41505c49a5fd9c2363166522", "patch": "@@ -24,6 +24,7 @@ pub fn expand_deriving_default(\n     let trait_def = TraitDef {\n         span,\n         path: Path::new(vec![kw::Default, sym::Default]),\n+        skip_path_as_bound: has_a_default_variant(item),\n         additional_bounds: Vec::new(),\n         generics: Bounds::empty(),\n         supports_unions: false,\n@@ -262,3 +263,22 @@ impl<'a, 'b> rustc_ast::visit::Visitor<'a> for DetectNonVariantDefaultAttr<'a, '\n         }\n     }\n }\n+\n+fn has_a_default_variant(item: &Annotatable) -> bool {\n+    struct HasDefaultAttrOnVariant {\n+        found: bool,\n+    }\n+\n+    impl<'ast> rustc_ast::visit::Visitor<'ast> for HasDefaultAttrOnVariant {\n+        fn visit_variant(&mut self, v: &'ast rustc_ast::Variant) {\n+            if v.attrs.iter().any(|attr| attr.has_name(kw::Default)) {\n+                self.found = true;\n+            }\n+            // no need to subrecurse.\n+        }\n+    }\n+\n+    let mut visitor = HasDefaultAttrOnVariant { found: false };\n+    item.visit_with(&mut visitor);\n+    visitor.found\n+}"}, {"sha": "f83f58b97d38ffb3566af5ad883ca3984e69b2aa", "filename": "compiler/rustc_builtin_macros/src/deriving/encodable.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f83e0266cf7aaa4b41505c49a5fd9c2363166522/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fencodable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f83e0266cf7aaa4b41505c49a5fd9c2363166522/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fencodable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fencodable.rs?ref=f83e0266cf7aaa4b41505c49a5fd9c2363166522", "patch": "@@ -107,6 +107,7 @@ pub fn expand_deriving_rustc_encodable(\n     let trait_def = TraitDef {\n         span,\n         path: Path::new_(vec![krate, sym::Encodable], vec![], PathKind::Global),\n+        skip_path_as_bound: false,\n         additional_bounds: Vec::new(),\n         generics: Bounds::empty(),\n         supports_unions: false,"}, {"sha": "6fbd99b5c71c5c4c44726b3be09fe22cf19be683", "filename": "compiler/rustc_builtin_macros/src/deriving/generic/mod.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f83e0266cf7aaa4b41505c49a5fd9c2363166522/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f83e0266cf7aaa4b41505c49a5fd9c2363166522/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fgeneric%2Fmod.rs?ref=f83e0266cf7aaa4b41505c49a5fd9c2363166522", "patch": "@@ -174,6 +174,7 @@ use rustc_span::symbol::{kw, sym, Ident, Symbol};\n use rustc_span::Span;\n use std::cell::RefCell;\n use std::iter;\n+use std::ops::Not;\n use std::vec;\n use thin_vec::thin_vec;\n use ty::{Bounds, Path, Ref, Self_, Ty};\n@@ -187,6 +188,9 @@ pub struct TraitDef<'a> {\n     /// Path of the trait, including any type parameters\n     pub path: Path,\n \n+    /// Whether to skip adding the current trait as a bound to the type parameters of the type.\n+    pub skip_path_as_bound: bool,\n+\n     /// Additional bounds required of any type parameters of the type,\n     /// other than the current trait\n     pub additional_bounds: Vec<Ty>,\n@@ -596,7 +600,7 @@ impl<'a> TraitDef<'a> {\n                         cx.trait_bound(p.to_path(cx, self.span, type_ident, generics))\n                     }).chain(\n                         // require the current trait\n-                        iter::once(cx.trait_bound(trait_path.clone()))\n+                        self.skip_path_as_bound.not().then(|| cx.trait_bound(trait_path.clone()))\n                     ).chain(\n                         // also add in any bounds from the declaration\n                         param.bounds.iter().cloned()"}, {"sha": "6e9d5f08b9443dd22cc0ec40d828e6070306f405", "filename": "compiler/rustc_builtin_macros/src/deriving/hash.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f83e0266cf7aaa4b41505c49a5fd9c2363166522/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fhash.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f83e0266cf7aaa4b41505c49a5fd9c2363166522/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fhash.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fhash.rs?ref=f83e0266cf7aaa4b41505c49a5fd9c2363166522", "patch": "@@ -22,6 +22,7 @@ pub fn expand_deriving_hash(\n     let hash_trait_def = TraitDef {\n         span,\n         path,\n+        skip_path_as_bound: false,\n         additional_bounds: Vec::new(),\n         generics: Bounds::empty(),\n         supports_unions: false,"}, {"sha": "ca3c91ce24a1dfd6ba4f89287af6ca845e800751", "filename": "compiler/rustc_error_messages/locales/en-US/middle.ftl", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f83e0266cf7aaa4b41505c49a5fd9c2363166522/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fmiddle.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/f83e0266cf7aaa4b41505c49a5fd9c2363166522/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fmiddle.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fmiddle.ftl?ref=f83e0266cf7aaa4b41505c49a5fd9c2363166522", "patch": "@@ -15,3 +15,6 @@ middle_previous_use_here =\n middle_limit_invalid =\n     `limit` must be a non-negative integer\n     .label = {$error_str}\n+\n+middle_const_eval_non_int =\n+    constant evaluation of enum discriminant resulted in non-integer"}, {"sha": "e69cb546d15f66a17afd90188d10b1f475669135", "filename": "compiler/rustc_middle/src/error.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f83e0266cf7aaa4b41505c49a5fd9c2363166522/compiler%2Frustc_middle%2Fsrc%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f83e0266cf7aaa4b41505c49a5fd9c2363166522/compiler%2Frustc_middle%2Fsrc%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Ferror.rs?ref=f83e0266cf7aaa4b41505c49a5fd9c2363166522", "patch": "@@ -48,3 +48,10 @@ pub struct LimitInvalid<'a> {\n     pub value_span: Span,\n     pub error_str: &'a str,\n }\n+\n+#[derive(Diagnostic)]\n+#[diag(middle::const_eval_non_int)]\n+pub struct ConstEvalNonIntError {\n+    #[primary_span]\n+    pub span: Span,\n+}"}, {"sha": "3c485e264097044299558780c0f443ccb3f3f0db", "filename": "compiler/rustc_middle/src/ty/adt.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f83e0266cf7aaa4b41505c49a5fd9c2363166522/compiler%2Frustc_middle%2Fsrc%2Fty%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f83e0266cf7aaa4b41505c49a5fd9c2363166522/compiler%2Frustc_middle%2Fsrc%2Fty%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fadt.rs?ref=f83e0266cf7aaa4b41505c49a5fd9c2363166522", "patch": "@@ -458,11 +458,9 @@ impl<'tcx> AdtDef<'tcx> {\n                     Some(Discr { val: b, ty })\n                 } else {\n                     info!(\"invalid enum discriminant: {:#?}\", val);\n-                    crate::mir::interpret::struct_error(\n-                        tcx.at(tcx.def_span(expr_did)),\n-                        \"constant evaluation of enum discriminant resulted in non-integer\",\n-                    )\n-                    .emit();\n+                    tcx.sess.emit_err(crate::error::ConstEvalNonIntError {\n+                        span: tcx.def_span(expr_did),\n+                    });\n                     None\n                 }\n             }"}, {"sha": "df315dad8932405cd4f524d33a8113dfb21f36e7", "filename": "library/alloc/src/sync.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f83e0266cf7aaa4b41505c49a5fd9c2363166522/library%2Falloc%2Fsrc%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f83e0266cf7aaa4b41505c49a5fd9c2363166522/library%2Falloc%2Fsrc%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fsync.rs?ref=f83e0266cf7aaa4b41505c49a5fd9c2363166522", "patch": "@@ -3,6 +3,10 @@\n //! Thread-safe reference-counting pointers.\n //!\n //! See the [`Arc<T>`][Arc] documentation for more details.\n+//!\n+//! **Note**: This module is only available on platforms that support atomic\n+//! loads and stores of pointers. This may be detected at compile time using\n+//! `#[cfg(target_has_atomic = \"ptr\")]`.\n \n use core::any::Any;\n use core::borrow;\n@@ -82,6 +86,11 @@ macro_rules! acquire {\n /// [`Mutex`][mutex], [`RwLock`][rwlock], or one of the [`Atomic`][atomic]\n /// types.\n ///\n+/// **Note**: This type is only available on platforms that support atomic\n+/// loads and stores of pointers, which includes all platforms that support\n+/// the `std` crate but not all those which only support [`alloc`](crate).\n+/// This may be detected at compile time using `#[cfg(target_has_atomic = \"ptr\")]`.\n+///\n /// ## Thread Safety\n ///\n /// Unlike [`Rc<T>`], `Arc<T>` uses atomic operations for its reference"}, {"sha": "9d8e309a978d91e3245eeaf76268704cfcb0639f", "filename": "library/alloc/src/task.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f83e0266cf7aaa4b41505c49a5fd9c2363166522/library%2Falloc%2Fsrc%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f83e0266cf7aaa4b41505c49a5fd9c2363166522/library%2Falloc%2Fsrc%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Ftask.rs?ref=f83e0266cf7aaa4b41505c49a5fd9c2363166522", "patch": "@@ -1,5 +1,11 @@\n #![stable(feature = \"wake_trait\", since = \"1.51.0\")]\n+\n //! Types and Traits for working with asynchronous tasks.\n+//!\n+//! **Note**: This module is only available on platforms that support atomic\n+//! loads and stores of pointers. This may be detected at compile time using\n+//! `#[cfg(target_has_atomic = \"ptr\")]`.\n+\n use core::mem::ManuallyDrop;\n use core::task::{RawWaker, RawWakerVTable, Waker};\n "}, {"sha": "bb496f046431e54de7d6b6b62dc6087398f90f3a", "filename": "library/alloc/src/vec/mod.rs", "status": "modified", "additions": 73, "deletions": 8, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/f83e0266cf7aaa4b41505c49a5fd9c2363166522/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f83e0266cf7aaa4b41505c49a5fd9c2363166522/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs?ref=f83e0266cf7aaa4b41505c49a5fd9c2363166522", "patch": "@@ -483,15 +483,13 @@ impl<T> Vec<T> {\n         Self::with_capacity_in(capacity, Global)\n     }\n \n-    /// Creates a `Vec<T>` directly from the raw components of another vector.\n+    /// Creates a `Vec<T>` directly from a pointer, a capacity, and a length.\n     ///\n     /// # Safety\n     ///\n     /// This is highly unsafe, due to the number of invariants that aren't\n     /// checked:\n     ///\n-    /// * `ptr` needs to have been previously allocated via [`String`]/`Vec<T>`\n-    ///   (at least, it's highly likely to be incorrect if it wasn't).\n     /// * `T` needs to have the same alignment as what `ptr` was allocated with.\n     ///   (`T` having a less strict alignment is not sufficient, the alignment really\n     ///   needs to be equal to satisfy the [`dealloc`] requirement that memory must be\n@@ -500,6 +498,14 @@ impl<T> Vec<T> {\n     ///   to be the same size as the pointer was allocated with. (Because similar to\n     ///   alignment, [`dealloc`] must be called with the same layout `size`.)\n     /// * `length` needs to be less than or equal to `capacity`.\n+    /// * The first `length` values must be properly initialized values of type `T`.\n+    /// * `capacity` needs to be the capacity that the pointer was allocated with.\n+    /// * The allocated size in bytes must be no larger than `isize::MAX`.\n+    ///   See the safety documentation of [`pointer::offset`].\n+    ///\n+    /// These requirements are always upheld by any `ptr` that has been allocated\n+    /// via `Vec<T>`. Other allocation sources are allowed if the invariants are\n+    /// upheld.\n     ///\n     /// Violating these may cause problems like corrupting the allocator's\n     /// internal data structures. For example it is normally **not** safe\n@@ -551,6 +557,32 @@ impl<T> Vec<T> {\n     ///     assert_eq!(rebuilt, [4, 5, 6]);\n     /// }\n     /// ```\n+    ///\n+    /// Using memory that was allocated elsewhere:\n+    ///\n+    /// ```rust\n+    /// #![feature(allocator_api)]\n+    ///\n+    /// use std::alloc::{AllocError, Allocator, Global, Layout};\n+    ///\n+    /// fn main() {\n+    ///     let layout = Layout::array::<u32>(16).expect(\"overflow cannot happen\");\n+    ///\n+    ///     let vec = unsafe {\n+    ///         let mem = match Global.allocate(layout) {\n+    ///             Ok(mem) => mem.cast::<u32>().as_ptr(),\n+    ///             Err(AllocError) => return,\n+    ///         };\n+    ///\n+    ///         mem.write(1_000_000);\n+    ///\n+    ///         Vec::from_raw_parts_in(mem, 1, 16, Global)\n+    ///     };\n+    ///\n+    ///     assert_eq!(vec, &[1_000_000]);\n+    ///     assert_eq!(vec.capacity(), 16);\n+    /// }\n+    /// ```\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub unsafe fn from_raw_parts(ptr: *mut T, length: usize, capacity: usize) -> Self {\n@@ -641,21 +673,30 @@ impl<T, A: Allocator> Vec<T, A> {\n         Vec { buf: RawVec::with_capacity_in(capacity, alloc), len: 0 }\n     }\n \n-    /// Creates a `Vec<T, A>` directly from the raw components of another vector.\n+    /// Creates a `Vec<T, A>` directly from a pointer, a capacity, a length,\n+    /// and an allocator.\n     ///\n     /// # Safety\n     ///\n     /// This is highly unsafe, due to the number of invariants that aren't\n     /// checked:\n     ///\n-    /// * `ptr` needs to have been previously allocated via [`String`]/`Vec<T>`\n-    ///   (at least, it's highly likely to be incorrect if it wasn't).\n-    /// * `T` needs to have the same size and alignment as what `ptr` was allocated with.\n+    /// * `T` needs to have the same alignment as what `ptr` was allocated with.\n     ///   (`T` having a less strict alignment is not sufficient, the alignment really\n     ///   needs to be equal to satisfy the [`dealloc`] requirement that memory must be\n     ///   allocated and deallocated with the same layout.)\n+    /// * The size of `T` times the `capacity` (ie. the allocated size in bytes) needs\n+    ///   to be the same size as the pointer was allocated with. (Because similar to\n+    ///   alignment, [`dealloc`] must be called with the same layout `size`.)\n     /// * `length` needs to be less than or equal to `capacity`.\n-    /// * `capacity` needs to be the capacity that the pointer was allocated with.\n+    /// * The first `length` values must be properly initialized values of type `T`.\n+    /// * `capacity` needs to [*fit*] the layout size that the pointer was allocated with.\n+    /// * The allocated size in bytes must be no larger than `isize::MAX`.\n+    ///   See the safety documentation of [`pointer::offset`].\n+    ///\n+    /// These requirements are always upheld by any `ptr` that has been allocated\n+    /// via `Vec<T, A>`. Other allocation sources are allowed if the invariants are\n+    /// upheld.\n     ///\n     /// Violating these may cause problems like corrupting the allocator's\n     /// internal data structures. For example it is **not** safe\n@@ -673,6 +714,7 @@ impl<T, A: Allocator> Vec<T, A> {\n     ///\n     /// [`String`]: crate::string::String\n     /// [`dealloc`]: crate::alloc::GlobalAlloc::dealloc\n+    /// [*fit*]: crate::alloc::Allocator#memory-fitting\n     ///\n     /// # Examples\n     ///\n@@ -711,6 +753,29 @@ impl<T, A: Allocator> Vec<T, A> {\n     ///     assert_eq!(rebuilt, [4, 5, 6]);\n     /// }\n     /// ```\n+    ///\n+    /// Using memory that was allocated elsewhere:\n+    ///\n+    /// ```rust\n+    /// use std::alloc::{alloc, Layout};\n+    ///\n+    /// fn main() {\n+    ///     let layout = Layout::array::<u32>(16).expect(\"overflow cannot happen\");\n+    ///     let vec = unsafe {\n+    ///         let mem = alloc(layout).cast::<u32>();\n+    ///         if mem.is_null() {\n+    ///             return;\n+    ///         }\n+    ///\n+    ///         mem.write(1_000_000);\n+    ///\n+    ///         Vec::from_raw_parts(mem, 1, 16)\n+    ///     };\n+    ///\n+    ///     assert_eq!(vec, &[1_000_000]);\n+    ///     assert_eq!(vec.capacity(), 16);\n+    /// }\n+    /// ```\n     #[inline]\n     #[unstable(feature = \"allocator_api\", issue = \"32838\")]\n     pub unsafe fn from_raw_parts_in(ptr: *mut T, length: usize, capacity: usize, alloc: A) -> Self {"}, {"sha": "224bc9effe61e1eb3016c53af46af94a473be1b1", "filename": "library/core/src/char/methods.rs", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/f83e0266cf7aaa4b41505c49a5fd9c2363166522/library%2Fcore%2Fsrc%2Fchar%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f83e0266cf7aaa4b41505c49a5fd9c2363166522/library%2Fcore%2Fsrc%2Fchar%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fchar%2Fmethods.rs?ref=f83e0266cf7aaa4b41505c49a5fd9c2363166522", "patch": "@@ -1444,6 +1444,38 @@ impl char {\n         matches!(*self, '0'..='9')\n     }\n \n+    /// Checks if the value is an ASCII octal digit:\n+    /// U+0030 '0' ..= U+0037 '7'.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(is_ascii_octdigit)]\n+    ///\n+    /// let uppercase_a = 'A';\n+    /// let a = 'a';\n+    /// let zero = '0';\n+    /// let seven = '7';\n+    /// let nine = '9';\n+    /// let percent = '%';\n+    /// let lf = '\\n';\n+    ///\n+    /// assert!(!uppercase_a.is_ascii_octdigit());\n+    /// assert!(!a.is_ascii_octdigit());\n+    /// assert!(zero.is_ascii_octdigit());\n+    /// assert!(seven.is_ascii_octdigit());\n+    /// assert!(!nine.is_ascii_octdigit());\n+    /// assert!(!percent.is_ascii_octdigit());\n+    /// assert!(!lf.is_ascii_octdigit());\n+    /// ```\n+    #[must_use]\n+    #[unstable(feature = \"is_ascii_octdigit\", issue = \"101288\")]\n+    #[rustc_const_unstable(feature = \"is_ascii_octdigit\", issue = \"101288\")]\n+    #[inline]\n+    pub const fn is_ascii_octdigit(&self) -> bool {\n+        matches!(*self, '0'..='7')\n+    }\n+\n     /// Checks if the value is an ASCII hexadecimal digit:\n     ///\n     /// - U+0030 '0' ..= U+0039 '9', or"}, {"sha": "223695c2bec7b48b893358d455e0052e7a283cef", "filename": "library/core/src/convert/mod.rs", "status": "modified", "additions": 187, "deletions": 18, "changes": 205, "blob_url": "https://github.com/rust-lang/rust/blob/f83e0266cf7aaa4b41505c49a5fd9c2363166522/library%2Fcore%2Fsrc%2Fconvert%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f83e0266cf7aaa4b41505c49a5fd9c2363166522/library%2Fcore%2Fsrc%2Fconvert%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fconvert%2Fmod.rs?ref=f83e0266cf7aaa4b41505c49a5fd9c2363166522", "patch": "@@ -25,6 +25,7 @@\n //! # Generic Implementations\n //!\n //! - [`AsRef`] and [`AsMut`] auto-dereference if the inner type is a reference\n+//!   (but not generally for all [dereferenceable types][core::ops::Deref])\n //! - [`From`]`<U> for T` implies [`Into`]`<T> for U`\n //! - [`TryFrom`]`<U> for T` implies [`TryInto`]`<T> for U`\n //! - [`From`] and [`Into`] are reflexive, which means that all types can\n@@ -109,10 +110,12 @@ pub const fn identity<T>(x: T) -> T {\n /// If you need to do a costly conversion it is better to implement [`From`] with type\n /// `&T` or write a custom function.\n ///\n+/// # Relation to `Borrow`\n+///\n /// `AsRef` has the same signature as [`Borrow`], but [`Borrow`] is different in a few aspects:\n ///\n /// - Unlike `AsRef`, [`Borrow`] has a blanket impl for any `T`, and can be used to accept either\n-///   a reference or a value.\n+///   a reference or a value. (See also note on `AsRef`'s reflexibility below.)\n /// - [`Borrow`] also requires that [`Hash`], [`Eq`] and [`Ord`] for a borrowed value are\n ///   equivalent to those of the owned value. For this reason, if you want to\n ///   borrow only a single field of a struct you can implement `AsRef`, but not [`Borrow`].\n@@ -122,9 +125,66 @@ pub const fn identity<T>(x: T) -> T {\n ///\n /// # Generic Implementations\n ///\n-/// - `AsRef` auto-dereferences if the inner type is a reference or a mutable\n-///   reference (e.g.: `foo.as_ref()` will work the same if `foo` has type\n-///   `&mut Foo` or `&&mut Foo`)\n+/// `AsRef` auto-dereferences if the inner type is a reference or a mutable reference\n+/// (e.g.: `foo.as_ref()` will work the same if `foo` has type `&mut Foo` or `&&mut Foo`).\n+///\n+/// Note that due to historic reasons, the above currently does not hold generally for all\n+/// [dereferenceable types], e.g. `foo.as_ref()` will *not* work the same as\n+/// `Box::new(foo).as_ref()`. Instead, many smart pointers provide an `as_ref` implementation which\n+/// simply returns a reference to the [pointed-to value] (but do not perform a cheap\n+/// reference-to-reference conversion for that value). However, [`AsRef::as_ref`] should not be\n+/// used for the sole purpose of dereferencing; instead ['`Deref` coercion'] can be used:\n+///\n+/// [dereferenceable types]: core::ops::Deref\n+/// [pointed-to value]: core::ops::Deref::Target\n+/// ['`Deref` coercion']: core::ops::Deref#more-on-deref-coercion\n+///\n+/// ```\n+/// let x = Box::new(5i32);\n+/// // Avoid this:\n+/// // let y: &i32 = x.as_ref();\n+/// // Better just write:\n+/// let y: &i32 = &x;\n+/// ```\n+///\n+/// Types which implement [`Deref`] should consider implementing `AsRef<T>` as follows:\n+///\n+/// [`Deref`]: core::ops::Deref\n+///\n+/// ```\n+/// # use core::ops::Deref;\n+/// # struct SomeType;\n+/// # impl Deref for SomeType {\n+/// #     type Target = [u8];\n+/// #     fn deref(&self) -> &[u8] {\n+/// #         &[]\n+/// #     }\n+/// # }\n+/// impl<T> AsRef<T> for SomeType\n+/// where\n+///     T: ?Sized,\n+///     <SomeType as Deref>::Target: AsRef<T>,\n+/// {\n+///     fn as_ref(&self) -> &T {\n+///         self.deref().as_ref()\n+///     }\n+/// }\n+/// ```\n+///\n+/// # Reflexivity\n+///\n+/// Ideally, `AsRef` would be reflexive, i.e. there would be an `impl<T: ?Sized> AsRef<T> for T`\n+/// with [`as_ref`] simply returning its argument unchanged.\n+/// Such a blanket implementation is currently *not* provided due to technical restrictions of\n+/// Rust's type system (it would be overlapping with another existing blanket implementation for\n+/// `&T where T: AsRef<U>` which allows `AsRef` to auto-dereference, see \"Generic Implementations\"\n+/// above).\n+///\n+/// [`as_ref`]: AsRef::as_ref\n+///\n+/// A trivial implementation of `AsRef<T> for T` must be added explicitly for a particular type `T`\n+/// where needed or desired. Note, however, that not all types from `std` contain such an\n+/// implementation, and those cannot be added by external code due to orphan rules.\n ///\n /// # Examples\n ///\n@@ -172,29 +232,138 @@ pub trait AsRef<T: ?Sized> {\n ///\n /// # Generic Implementations\n ///\n-/// - `AsMut` auto-dereferences if the inner type is a mutable reference\n-///   (e.g.: `foo.as_mut()` will work the same if `foo` has type `&mut Foo`\n-///   or `&mut &mut Foo`)\n+/// `AsMut` auto-dereferences if the inner type is a mutable reference\n+/// (e.g.: `foo.as_mut()` will work the same if `foo` has type `&mut Foo` or `&mut &mut Foo`).\n+///\n+/// Note that due to historic reasons, the above currently does not hold generally for all\n+/// [mutably dereferenceable types], e.g. `foo.as_mut()` will *not* work the same as\n+/// `Box::new(foo).as_mut()`. Instead, many smart pointers provide an `as_mut` implementation which\n+/// simply returns a reference to the [pointed-to value] (but do not perform a cheap\n+/// reference-to-reference conversion for that value). However, [`AsMut::as_mut`] should not be\n+/// used for the sole purpose of mutable dereferencing; instead ['`Deref` coercion'] can be used:\n+///\n+/// [mutably dereferenceable types]: core::ops::DerefMut\n+/// [pointed-to value]: core::ops::Deref::Target\n+/// ['`Deref` coercion']: core::ops::DerefMut#more-on-deref-coercion\n+///\n+/// ```\n+/// let mut x = Box::new(5i32);\n+/// // Avoid this:\n+/// // let y: &mut i32 = x.as_mut();\n+/// // Better just write:\n+/// let y: &mut i32 = &mut x;\n+/// ```\n+///\n+/// Types which implement [`DerefMut`] should consider to add an implementation of `AsMut<T>` as\n+/// follows:\n+///\n+/// [`DerefMut`]: core::ops::DerefMut\n+///\n+/// ```\n+/// # use core::ops::{Deref, DerefMut};\n+/// # struct SomeType;\n+/// # impl Deref for SomeType {\n+/// #     type Target = [u8];\n+/// #     fn deref(&self) -> &[u8] {\n+/// #         &[]\n+/// #     }\n+/// # }\n+/// # impl DerefMut for SomeType {\n+/// #     fn deref_mut(&mut self) -> &mut [u8] {\n+/// #         &mut []\n+/// #     }\n+/// # }\n+/// impl<T> AsMut<T> for SomeType\n+/// where\n+///     <SomeType as Deref>::Target: AsMut<T>,\n+/// {\n+///     fn as_mut(&mut self) -> &mut T {\n+///         self.deref_mut().as_mut()\n+///     }\n+/// }\n+/// ```\n+///\n+/// # Reflexivity\n+///\n+/// Ideally, `AsMut` would be reflexive, i.e. there would be an `impl<T: ?Sized> AsMut<T> for T`\n+/// with [`as_mut`] simply returning its argument unchanged.\n+/// Such a blanket implementation is currently *not* provided due to technical restrictions of\n+/// Rust's type system (it would be overlapping with another existing blanket implementation for\n+/// `&mut T where T: AsMut<U>` which allows `AsMut` to auto-dereference, see \"Generic\n+/// Implementations\" above).\n+///\n+/// [`as_mut`]: AsMut::as_mut\n+///\n+/// A trivial implementation of `AsMut<T> for T` must be added explicitly for a particular type `T`\n+/// where needed or desired. Note, however, that not all types from `std` contain such an\n+/// implementation, and those cannot be added by external code due to orphan rules.\n ///\n /// # Examples\n ///\n-/// Using `AsMut` as trait bound for a generic function we can accept all mutable references\n-/// that can be converted to type `&mut T`. Because [`Box<T>`] implements `AsMut<T>` we can\n-/// write a function `add_one` that takes all arguments that can be converted to `&mut u64`.\n-/// Because [`Box<T>`] implements `AsMut<T>`, `add_one` accepts arguments of type\n-/// `&mut Box<u64>` as well:\n+/// Using `AsMut` as trait bound for a generic function, we can accept all mutable references that\n+/// can be converted to type `&mut T`. Unlike [dereference], which has a single [target type],\n+/// there can be multiple implementations of `AsMut` for a type. In particular, `Vec<T>` implements\n+/// both `AsMut<Vec<T>>` and `AsMut<[T]>`.\n+///\n+/// In the following, the example functions `caesar` and `null_terminate` provide a generic\n+/// interface which work with any type that can be converted by cheap mutable-to-mutable conversion\n+/// into a byte slice (`[u8]`) or byte vector (`Vec<u8>`), respectively.\n+///\n+/// [dereference]: core::ops::DerefMut\n+/// [target type]: core::ops::Deref::Target\n ///\n /// ```\n-/// fn add_one<T: AsMut<u64>>(num: &mut T) {\n-///     *num.as_mut() += 1;\n+/// struct Document {\n+///     info: String,\n+///     content: Vec<u8>,\n /// }\n ///\n-/// let mut boxed_num = Box::new(0);\n-/// add_one(&mut boxed_num);\n-/// assert_eq!(*boxed_num, 1);\n+/// impl<T: ?Sized> AsMut<T> for Document\n+/// where\n+///     Vec<u8>: AsMut<T>,\n+/// {\n+///     fn as_mut(&mut self) -> &mut T {\n+///         self.content.as_mut()\n+///     }\n+/// }\n+///\n+/// fn caesar<T: AsMut<[u8]>>(data: &mut T, key: u8) {\n+///     for byte in data.as_mut() {\n+///         *byte = byte.wrapping_add(key);\n+///     }\n+/// }\n+///\n+/// fn null_terminate<T: AsMut<Vec<u8>>>(data: &mut T) {\n+///     // Using a non-generic inner function, which contains most of the\n+///     // functionality, helps to minimize monomorphization overhead.\n+///     fn doit(data: &mut Vec<u8>) {\n+///         let len = data.len();\n+///         if len == 0 || data[len-1] != 0 {\n+///             data.push(0);\n+///         }\n+///     }\n+///     doit(data.as_mut());\n+/// }\n+///\n+/// fn main() {\n+///     let mut v: Vec<u8> = vec![1, 2, 3];\n+///     caesar(&mut v, 5);\n+///     assert_eq!(v, [6, 7, 8]);\n+///     null_terminate(&mut v);\n+///     assert_eq!(v, [6, 7, 8, 0]);\n+///     let mut doc = Document {\n+///         info: String::from(\"Example\"),\n+///         content: vec![17, 19, 8],\n+///     };\n+///     caesar(&mut doc, 1);\n+///     assert_eq!(doc.content, [18, 20, 9]);\n+///     null_terminate(&mut doc);\n+///     assert_eq!(doc.content, [18, 20, 9, 0]);\n+/// }\n /// ```\n ///\n-/// [`Box<T>`]: ../../std/boxed/struct.Box.html\n+/// Note, however, that APIs don't need to be generic. In many cases taking a `&mut [u8]` or\n+/// `&mut Vec<u8>`, for example, is the better choice (callers need to pass the correct type then).\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[cfg_attr(not(test), rustc_diagnostic_item = \"AsMut\")]\n #[const_trait]"}, {"sha": "ca02ae90fdeb2e2969734f017bbd628e05f0685a", "filename": "library/core/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f83e0266cf7aaa4b41505c49a5fd9c2363166522/library%2Fcore%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f83e0266cf7aaa4b41505c49a5fd9c2363166522/library%2Fcore%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Flib.rs?ref=f83e0266cf7aaa4b41505c49a5fd9c2363166522", "patch": "@@ -164,6 +164,7 @@\n #![feature(const_slice_index)]\n #![feature(const_is_char_boundary)]\n #![feature(const_cstr_methods)]\n+#![feature(is_ascii_octdigit)]\n //\n // Language features:\n #![feature(abi_unadjusted)]"}, {"sha": "311c5fa5b683419ffce434ee57c879bae8375964", "filename": "library/core/src/num/mod.rs", "status": "modified", "additions": 33, "deletions": 1, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/f83e0266cf7aaa4b41505c49a5fd9c2363166522/library%2Fcore%2Fsrc%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f83e0266cf7aaa4b41505c49a5fd9c2363166522/library%2Fcore%2Fsrc%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fmod.rs?ref=f83e0266cf7aaa4b41505c49a5fd9c2363166522", "patch": "@@ -622,6 +622,38 @@ impl u8 {\n         matches!(*self, b'0'..=b'9')\n     }\n \n+    /// Checks if the value is an ASCII octal digit:\n+    /// U+0030 '0' ..= U+0037 '7'.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(is_ascii_octdigit)]\n+    ///\n+    /// let uppercase_a = b'A';\n+    /// let a = b'a';\n+    /// let zero = b'0';\n+    /// let seven = b'7';\n+    /// let nine = b'9';\n+    /// let percent = b'%';\n+    /// let lf = b'\\n';\n+    ///\n+    /// assert!(!uppercase_a.is_ascii_octdigit());\n+    /// assert!(!a.is_ascii_octdigit());\n+    /// assert!(zero.is_ascii_octdigit());\n+    /// assert!(seven.is_ascii_octdigit());\n+    /// assert!(!nine.is_ascii_octdigit());\n+    /// assert!(!percent.is_ascii_octdigit());\n+    /// assert!(!lf.is_ascii_octdigit());\n+    /// ```\n+    #[must_use]\n+    #[unstable(feature = \"is_ascii_octdigit\", issue = \"101288\")]\n+    #[rustc_const_unstable(feature = \"is_ascii_octdigit\", issue = \"101288\")]\n+    #[inline]\n+    pub const fn is_ascii_octdigit(&self) -> bool {\n+        matches!(*self, b'0'..=b'7')\n+    }\n+\n     /// Checks if the value is an ASCII hexadecimal digit:\n     ///\n     /// - U+0030 '0' ..= U+0039 '9', or\n@@ -976,8 +1008,8 @@ impl usize {\n /// assert_eq!(num.classify(), FpCategory::Normal);\n /// assert_eq!(inf.classify(), FpCategory::Infinite);\n /// assert_eq!(zero.classify(), FpCategory::Zero);\n-/// assert_eq!(nan.classify(), FpCategory::Nan);\n /// assert_eq!(sub.classify(), FpCategory::Subnormal);\n+/// assert_eq!(nan.classify(), FpCategory::Nan);\n /// ```\n #[derive(Copy, Clone, PartialEq, Eq, Debug)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "f5f2dd047788539a0aa893ae1bc92ce39a8627f5", "filename": "library/core/tests/ascii.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/f83e0266cf7aaa4b41505c49a5fd9c2363166522/library%2Fcore%2Ftests%2Fascii.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f83e0266cf7aaa4b41505c49a5fd9c2363166522/library%2Fcore%2Ftests%2Fascii.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fascii.rs?ref=f83e0266cf7aaa4b41505c49a5fd9c2363166522", "patch": "@@ -251,6 +251,23 @@ fn test_is_ascii_digit() {\n     );\n }\n \n+#[test]\n+fn test_is_ascii_octdigit() {\n+    assert_all!(is_ascii_octdigit, \"\", \"01234567\");\n+    assert_none!(\n+        is_ascii_octdigit,\n+        \"abcdefghijklmnopqrstuvwxyz\",\n+        \"ABCDEFGHIJKLMNOQPRSTUVWXYZ\",\n+        \"!\\\"#$%&'()*+,-./:;<=>?@[\\\\]^_`{|}~\",\n+        \" \\t\\n\\x0c\\r\",\n+        \"\\x00\\x01\\x02\\x03\\x04\\x05\\x06\\x07\",\n+        \"\\x08\\x09\\x0a\\x0b\\x0c\\x0d\\x0e\\x0f\",\n+        \"\\x10\\x11\\x12\\x13\\x14\\x15\\x16\\x17\",\n+        \"\\x18\\x19\\x1a\\x1b\\x1c\\x1d\\x1e\\x1f\",\n+        \"\\x7f\",\n+    );\n+}\n+\n #[test]\n fn test_is_ascii_hexdigit() {\n     assert_all!(is_ascii_hexdigit, \"\", \"0123456789\", \"abcdefABCDEF\",);\n@@ -454,6 +471,7 @@ fn ascii_ctype_const() {\n         is_ascii_lowercase    => [true,  false, false, false, false];\n         is_ascii_alphanumeric => [true,  true,  true,  false, false];\n         is_ascii_digit        => [false, false, true,  false, false];\n+        is_ascii_octdigit     => [false, false, false, false, false];\n         is_ascii_hexdigit     => [true,  true,  true,  false, false];\n         is_ascii_punctuation  => [false, false, false, true,  false];\n         is_ascii_graphic      => [true,  true,  true,  true,  false];"}, {"sha": "ca0c7a54b3e24b70daa2559401a757f754bc41db", "filename": "library/core/tests/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f83e0266cf7aaa4b41505c49a5fd9c2363166522/library%2Fcore%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f83e0266cf7aaa4b41505c49a5fd9c2363166522/library%2Fcore%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Flib.rs?ref=f83e0266cf7aaa4b41505c49a5fd9c2363166522", "patch": "@@ -100,6 +100,7 @@\n #![feature(slice_flatten)]\n #![feature(provide_any)]\n #![feature(utf8_chunks)]\n+#![feature(is_ascii_octdigit)]\n #![deny(unsafe_op_in_unsafe_fn)]\n \n extern crate test;"}, {"sha": "1c7a501edc7055b30032b44f164c1e514bd15428", "filename": "src/test/ui/deriving/deriving-default-enum.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f83e0266cf7aaa4b41505c49a5fd9c2363166522/src%2Ftest%2Fui%2Fderiving%2Fderiving-default-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f83e0266cf7aaa4b41505c49a5fd9c2363166522/src%2Ftest%2Fui%2Fderiving%2Fderiving-default-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderiving%2Fderiving-default-enum.rs?ref=f83e0266cf7aaa4b41505c49a5fd9c2363166522", "patch": "@@ -12,6 +12,16 @@ enum Foo {\n     Beta(NotDefault),\n }\n \n+// #[default] on a generic enum does not add `Default` bounds to the type params.\n+#[derive(Default)]\n+enum MyOption<T> {\n+    #[default]\n+    None,\n+    #[allow(dead_code)]\n+    Some(T),\n+}\n+\n fn main() {\n     assert_eq!(Foo::default(), Foo::Alpha);\n+    assert!(matches!(MyOption::<NotDefault>::default(), MyOption::None));\n }"}, {"sha": "140cc5b0fd808fa21ec35ec19102744fed6dd7e0", "filename": "src/test/ui/macros/macros-nonfatal-errors.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/f83e0266cf7aaa4b41505c49a5fd9c2363166522/src%2Ftest%2Fui%2Fmacros%2Fmacros-nonfatal-errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f83e0266cf7aaa4b41505c49a5fd9c2363166522/src%2Ftest%2Fui%2Fmacros%2Fmacros-nonfatal-errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacros-nonfatal-errors.rs?ref=f83e0266cf7aaa4b41505c49a5fd9c2363166522", "patch": "@@ -116,3 +116,24 @@ fn main() {\n \n     trace_macros!(invalid); //~ ERROR\n }\n+\n+/// Check that `#[derive(Default)]` does use a `T : Default` bound when the\n+/// `#[default]` variant is `#[non_exhaustive]` (should this end up allowed).\n+const _: () = {\n+    #[derive(Default)]\n+    enum NonExhaustiveDefaultGeneric<T> {\n+        #[default]\n+        #[non_exhaustive]\n+        Foo, //~ ERROR default variant must be exhaustive\n+        Bar(T),\n+    }\n+\n+    fn assert_impls_default<T: Default>() {}\n+\n+    enum NotDefault {}\n+\n+    // Note: the `derive(Default)` currently bails early enough for trait-checking\n+    // not to happen. Should it bail late enough, or even pass, make sure to\n+    // assert that the following line fails.\n+    let _ = assert_impls_default::<NonExhaustiveDefaultGeneric<NotDefault>>;\n+};"}, {"sha": "d42f6c179b7ef1702cc267557def28279b7dba8e", "filename": "src/test/ui/macros/macros-nonfatal-errors.stderr", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f83e0266cf7aaa4b41505c49a5fd9c2363166522/src%2Ftest%2Fui%2Fmacros%2Fmacros-nonfatal-errors.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f83e0266cf7aaa4b41505c49a5fd9c2363166522/src%2Ftest%2Fui%2Fmacros%2Fmacros-nonfatal-errors.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacros-nonfatal-errors.stderr?ref=f83e0266cf7aaa4b41505c49a5fd9c2363166522", "patch": "@@ -215,11 +215,21 @@ error: trace_macros! accepts only `true` or `false`\n LL |     trace_macros!(invalid);\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n+error: default variant must be exhaustive\n+  --> $DIR/macros-nonfatal-errors.rs:127:9\n+   |\n+LL |         #[non_exhaustive]\n+   |         ----------------- declared `#[non_exhaustive]` here\n+LL |         Foo,\n+   |         ^^^\n+   |\n+   = help: consider a manual implementation of `Default`\n+\n error: cannot find macro `llvm_asm` in this scope\n   --> $DIR/macros-nonfatal-errors.rs:99:5\n    |\n LL |     llvm_asm!(invalid);\n    |     ^^^^^^^^\n \n-error: aborting due to 27 previous errors\n+error: aborting due to 28 previous errors\n "}]}