{"sha": "7506fe52696c5b3b628f173d74dc4a13b5ccc1f3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc1MDZmZTUyNjk2YzViM2I2MjhmMTczZDc0ZGM0YTEzYjVjY2MxZjM=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2014-12-31T04:25:18Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2015-01-02T10:05:22Z"}, "message": "Accept `derive` instead of `deriving`\n\n[breaking-change]\n\n`deriving is still accepted, but gives a deprecation warning", "tree": {"sha": "a40b9d733a7ff4640b253eb20c8b1e581521a441", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a40b9d733a7ff4640b253eb20c8b1e581521a441"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7506fe52696c5b3b628f173d74dc4a13b5ccc1f3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7506fe52696c5b3b628f173d74dc4a13b5ccc1f3", "html_url": "https://github.com/rust-lang/rust/commit/7506fe52696c5b3b628f173d74dc4a13b5ccc1f3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7506fe52696c5b3b628f173d74dc4a13b5ccc1f3/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f003b43823146d04f2efc9b0357f6dbae6ce9d0e", "url": "https://api.github.com/repos/rust-lang/rust/commits/f003b43823146d04f2efc9b0357f6dbae6ce9d0e", "html_url": "https://github.com/rust-lang/rust/commit/f003b43823146d04f2efc9b0357f6dbae6ce9d0e"}], "stats": {"total": 60, "additions": 36, "deletions": 24}, "files": [{"sha": "82aa40cb0ad79a8ffc2254708fb45ff4fa9334a4", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7506fe52696c5b3b628f173d74dc4a13b5ccc1f3/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7506fe52696c5b3b628f173d74dc4a13b5ccc1f3/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=7506fe52696c5b3b628f173d74dc4a13b5ccc1f3", "patch": "@@ -551,7 +551,7 @@ impl LintPass for BoxPointers {\n declare_lint! {\n     RAW_POINTER_DERIVING,\n     Warn,\n-    \"uses of #[deriving] with raw pointers are rarely correct\"\n+    \"uses of #[derive] with raw pointers are rarely correct\"\n }\n \n struct RawPtrDerivingVisitor<'a, 'tcx: 'a> {\n@@ -560,7 +560,7 @@ struct RawPtrDerivingVisitor<'a, 'tcx: 'a> {\n \n impl<'a, 'tcx, 'v> Visitor<'v> for RawPtrDerivingVisitor<'a, 'tcx> {\n     fn visit_ty(&mut self, ty: &ast::Ty) {\n-        static MSG: &'static str = \"use of `#[deriving]` with a raw pointer\";\n+        static MSG: &'static str = \"use of `#[derive]` with a raw pointer\";\n         if let ast::TyPtr(..) = ty.node {\n             self.cx.span_lint(RAW_POINTER_DERIVING, ty.span, MSG);\n         }"}, {"sha": "efb4867a016be02ba14721e4c6181b4a45216eba", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7506fe52696c5b3b628f173d74dc4a13b5ccc1f3/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7506fe52696c5b3b628f173d74dc4a13b5ccc1f3/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=7506fe52696c5b3b628f173d74dc4a13b5ccc1f3", "patch": "@@ -390,6 +390,8 @@ fn initial_syntax_expander_table(ecfg: &expand::ExpansionConfig) -> SyntaxEnv {\n     syntax_expanders.insert(intern(\"log_syntax\"),\n                             builtin_normal_expander(\n                                     ext::log_syntax::expand_syntax_ext));\n+    syntax_expanders.insert(intern(\"derive\"),\n+                            Decorator(box ext::deriving::expand_meta_derive));\n     syntax_expanders.insert(intern(\"deriving\"),\n                             Decorator(box ext::deriving::expand_meta_deriving));\n "}, {"sha": "acfb020fab67ee905559a1ed615c04bb23621b3c", "filename": "src/libsyntax/ext/deriving/generic/mod.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/7506fe52696c5b3b628f173d74dc4a13b5ccc1f3/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7506fe52696c5b3b628f173d74dc4a13b5ccc1f3/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric%2Fmod.rs?ref=7506fe52696c5b3b628f173d74dc4a13b5ccc1f3", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n //! Some code that abstracts away much of the boilerplate of writing\n-//! `deriving` instances for traits. Among other things it manages getting\n+//! `derive` instances for traits. Among other things it manages getting\n //! access to the fields of the 4 different sorts of structs and enum\n //! variants, as well as creating the method and impl ast instances.\n //!\n@@ -26,7 +26,7 @@\n //!   moment. (`TraitDef.additional_bounds`)\n //!\n //! Unsupported: FIXME #6257: calling methods on reference fields,\n-//! e.g. deriving Eq/Ord/Clone don't work on `struct A(&int)`,\n+//! e.g. derive Eq/Ord/Clone don't work on `struct A(&int)`,\n //! because of how the auto-dereferencing happens.\n //!\n //! The most important thing for implementers is the `Substructure` and\n@@ -209,7 +209,7 @@ use self::ty::{LifetimeBounds, Path, Ptr, PtrTy, Self, Ty};\n pub mod ty;\n \n pub struct TraitDef<'a> {\n-    /// The span for the current #[deriving(Foo)] header.\n+    /// The span for the current #[derive(Foo)] header.\n     pub span: Span,\n \n     pub attributes: Vec<ast::Attribute>,\n@@ -354,7 +354,7 @@ impl<'a> TraitDef<'a> {\n                                      generics)\n             }\n             _ => {\n-                cx.span_err(mitem.span, \"`deriving` may only be applied to structs and enums\");\n+                cx.span_err(mitem.span, \"`derive` may only be applied to structs and enums\");\n                 return;\n             }\n         };\n@@ -718,7 +718,7 @@ impl<'a> MethodDef<'a> {\n     }\n \n     /// ```\n-    /// #[deriving(PartialEq)]\n+    /// #[derive(PartialEq)]\n     /// struct A { x: int, y: int }\n     ///\n     /// // equivalent to:\n@@ -782,7 +782,7 @@ impl<'a> MethodDef<'a> {\n         } else {\n             cx.span_bug(trait_.span,\n                         \"no self arguments to non-static method in generic \\\n-                         `deriving`\")\n+                         `derive`\")\n         };\n \n         // body of the inner most destructuring match\n@@ -822,7 +822,7 @@ impl<'a> MethodDef<'a> {\n     }\n \n     /// ```\n-    /// #[deriving(PartialEq)]\n+    /// #[derive(PartialEq)]\n     /// enum A {\n     ///     A1,\n     ///     A2(int)\n@@ -1185,7 +1185,7 @@ impl<'a> TraitDef<'a> {\n                      cx: &mut ExtCtxt,\n                      mut to_set: Span) -> Span {\n         let trait_name = match self.path.path.last() {\n-            None => cx.span_bug(self.span, \"trait with empty path in generic `deriving`\"),\n+            None => cx.span_bug(self.span, \"trait with empty path in generic `derive`\"),\n             Some(name) => *name\n         };\n         to_set.expn_id = cx.codemap().record_expansion(codemap::ExpnInfo {\n@@ -1215,7 +1215,7 @@ impl<'a> TraitDef<'a> {\n         match (just_spans.is_empty(), named_idents.is_empty()) {\n             (false, false) => cx.span_bug(self.span,\n                                           \"a struct with named and unnamed \\\n-                                          fields in generic `deriving`\"),\n+                                          fields in generic `derive`\"),\n             // named fields\n             (_, false) => Named(named_idents),\n             // tuple structs (includes empty structs)\n@@ -1263,7 +1263,7 @@ impl<'a> TraitDef<'a> {\n                     None\n                 }\n                 _ => {\n-                    cx.span_bug(sp, \"a struct with named and unnamed fields in `deriving`\");\n+                    cx.span_bug(sp, \"a struct with named and unnamed fields in `derive`\");\n                 }\n             };\n             let ident = cx.ident_of(format!(\"{}_{}\", prefix, i)[]);\n@@ -1371,7 +1371,7 @@ pub fn cs_fold<F>(use_foldl: bool,\n             enum_nonmatch_f(cx, trait_span, (all_args[], tuple),\n                             substructure.nonself_args),\n         StaticEnum(..) | StaticStruct(..) => {\n-            cx.span_bug(trait_span, \"static function in `deriving`\")\n+            cx.span_bug(trait_span, \"static function in `derive`\")\n         }\n     }\n }\n@@ -1411,7 +1411,7 @@ pub fn cs_same_method<F>(f: F,\n             enum_nonmatch_f(cx, trait_span, (all_self_args[], tuple),\n                             substructure.nonself_args),\n         StaticEnum(..) | StaticStruct(..) => {\n-            cx.span_bug(trait_span, \"static function in `deriving`\")\n+            cx.span_bug(trait_span, \"static function in `derive`\")\n         }\n     }\n }"}, {"sha": "57d66f0e35524a376637d31e0ff45d0e42864c48", "filename": "src/libsyntax/ext/deriving/mod.rs", "status": "modified", "additions": 20, "deletions": 10, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/7506fe52696c5b3b628f173d74dc4a13b5ccc1f3/src%2Flibsyntax%2Fext%2Fderiving%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7506fe52696c5b3b628f173d74dc4a13b5ccc1f3/src%2Flibsyntax%2Fext%2Fderiving%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fmod.rs?ref=7506fe52696c5b3b628f173d74dc4a13b5ccc1f3", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-//! The compiler code necessary to implement the `#[deriving]` extensions.\n+//! The compiler code necessary to implement the `#[derive]` extensions.\n //!\n //! FIXME (#2810): hygiene. Search for \"__\" strings (in other files too). We also assume \"extra\" is\n //! the standard library, and \"std\" is the core library.\n@@ -45,16 +45,26 @@ pub fn expand_meta_deriving(cx: &mut ExtCtxt,\n                             _span: Span,\n                             mitem: &MetaItem,\n                             item: &Item,\n-                            mut push: Box<FnMut(P<Item>)>) {\n+                            push: Box<FnMut(P<Item>)>) {\n+    cx.span_warn(mitem.span, \"`deriving` is deprecated; use `derive`\");\n+\n+    expand_meta_derive(cx, _span, mitem, item, push)\n+}\n+\n+pub fn expand_meta_derive(cx: &mut ExtCtxt,\n+                          _span: Span,\n+                          mitem: &MetaItem,\n+                          item: &Item,\n+                          mut push: Box<FnMut(P<Item>)>) {\n     match mitem.node {\n         MetaNameValue(_, ref l) => {\n-            cx.span_err(l.span, \"unexpected value in `deriving`\");\n+            cx.span_err(l.span, \"unexpected value in `derive`\");\n         }\n         MetaWord(_) => {\n-            cx.span_warn(mitem.span, \"empty trait list in `deriving`\");\n+            cx.span_warn(mitem.span, \"empty trait list in `derive`\");\n         }\n         MetaList(_, ref titems) if titems.len() == 0 => {\n-            cx.span_warn(mitem.span, \"empty trait list in `deriving`\");\n+            cx.span_warn(mitem.span, \"empty trait list in `derive`\");\n         }\n         MetaList(_, ref titems) => {\n             for titem in titems.iter().rev() {\n@@ -78,15 +88,15 @@ pub fn expand_meta_deriving(cx: &mut ExtCtxt,\n                             }\n                             \"Encodable\" => {\n                                 cx.span_warn(titem.span,\n-                                             \"deriving(Encodable) is deprecated \\\n-                                              in favor of deriving(RustcEncodable)\");\n+                                             \"derive(Encodable) is deprecated \\\n+                                              in favor of derive(RustcEncodable)\");\n \n                                 expand!(encodable::expand_deriving_encodable)\n                             }\n                             \"Decodable\" => {\n                                 cx.span_warn(titem.span,\n-                                             \"deriving(Decodable) is deprecated \\\n-                                              in favor of deriving(RustcDecodable)\");\n+                                             \"derive(Decodable) is deprecated \\\n+                                              in favor of derive(RustcDecodable)\");\n \n                                 expand!(decodable::expand_deriving_decodable)\n                             }\n@@ -111,7 +121,7 @@ pub fn expand_meta_deriving(cx: &mut ExtCtxt,\n \n                             ref tname => {\n                                 cx.span_err(titem.span,\n-                                            format!(\"unknown `deriving` \\\n+                                            format!(\"unknown `derive` \\\n                                                      trait: `{}`\",\n                                                     *tname)[]);\n                             }"}]}