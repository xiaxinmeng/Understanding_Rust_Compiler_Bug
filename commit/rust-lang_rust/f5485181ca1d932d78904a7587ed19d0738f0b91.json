{"sha": "f5485181ca1d932d78904a7587ed19d0738f0b91", "node_id": "C_kwDOAAsO6NoAKGY1NDg1MTgxY2ExZDkzMmQ3ODkwNGE3NTg3ZWQxOWQwNzM4ZjBiOTE", "commit": {"author": {"name": "Ross MacArthur", "email": "ross@macarthur.io", "date": "2022-02-04T13:57:58Z"}, "committer": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2022-08-01T12:39:30Z"}, "message": "Use `array::IntoIter` for the `ArrayChunks` remainder", "tree": {"sha": "2cbb98a93e23b2014449b2fdd2400588642e98b9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2cbb98a93e23b2014449b2fdd2400588642e98b9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f5485181ca1d932d78904a7587ed19d0738f0b91", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f5485181ca1d932d78904a7587ed19d0738f0b91", "html_url": "https://github.com/rust-lang/rust/commit/f5485181ca1d932d78904a7587ed19d0738f0b91", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f5485181ca1d932d78904a7587ed19d0738f0b91/comments", "author": {"login": "rossmacarthur", "id": 17109887, "node_id": "MDQ6VXNlcjE3MTA5ODg3", "avatar_url": "https://avatars.githubusercontent.com/u/17109887?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rossmacarthur", "html_url": "https://github.com/rossmacarthur", "followers_url": "https://api.github.com/users/rossmacarthur/followers", "following_url": "https://api.github.com/users/rossmacarthur/following{/other_user}", "gists_url": "https://api.github.com/users/rossmacarthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/rossmacarthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rossmacarthur/subscriptions", "organizations_url": "https://api.github.com/users/rossmacarthur/orgs", "repos_url": "https://api.github.com/users/rossmacarthur/repos", "events_url": "https://api.github.com/users/rossmacarthur/events{/privacy}", "received_events_url": "https://api.github.com/users/rossmacarthur/received_events", "type": "User", "site_admin": false}, "committer": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ca3d1010bb5f8ed6b7897c1d85f794857e00caa4", "url": "https://api.github.com/repos/rust-lang/rust/commits/ca3d1010bb5f8ed6b7897c1d85f794857e00caa4", "html_url": "https://github.com/rust-lang/rust/commit/ca3d1010bb5f8ed6b7897c1d85f794857e00caa4"}], "stats": {"total": 138, "additions": 33, "deletions": 105}, "files": [{"sha": "459cd094cdca6b4537cc7124618382aa3d640914", "filename": "library/core/src/array/iter.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f5485181ca1d932d78904a7587ed19d0738f0b91/library%2Fcore%2Fsrc%2Farray%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5485181ca1d932d78904a7587ed19d0738f0b91/library%2Fcore%2Fsrc%2Farray%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Farray%2Fiter.rs?ref=f5485181ca1d932d78904a7587ed19d0738f0b91", "patch": "@@ -84,6 +84,16 @@ impl<T, const N: usize> IntoIter<T, N> {\n         IntoIterator::into_iter(array)\n     }\n \n+    /// Creates a new iterator from a partially initalized array.\n+    ///\n+    /// # Safety\n+    ///\n+    /// The caller must guarantee that all and only the `alive` elements of\n+    /// `data` are initialized.\n+    pub(crate) unsafe fn with_partial(data: [MaybeUninit<T>; N], alive: Range<usize>) -> Self {\n+        Self { data, alive }\n+    }\n+\n     /// Creates an iterator over the elements in a partially-initialized buffer.\n     ///\n     /// If you have a fully-initialized array, then use [`IntoIterator`]."}, {"sha": "2ec1284c39406ea6efa9d9ea6e0535a36ca3a7e9", "filename": "library/core/src/iter/adapters/array_chunks.rs", "status": "modified", "additions": 14, "deletions": 79, "changes": 93, "blob_url": "https://github.com/rust-lang/rust/blob/f5485181ca1d932d78904a7587ed19d0738f0b91/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Farray_chunks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5485181ca1d932d78904a7587ed19d0738f0b91/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Farray_chunks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Farray_chunks.rs?ref=f5485181ca1d932d78904a7587ed19d0738f0b91", "patch": "@@ -1,68 +1,10 @@\n+use crate::array;\n use crate::iter::{Fuse, FusedIterator, Iterator, TrustedLen};\n use crate::mem;\n use crate::mem::MaybeUninit;\n use crate::ops::{ControlFlow, Try};\n use crate::ptr;\n \n-#[derive(Debug)]\n-struct Remainder<T, const N: usize> {\n-    array: [MaybeUninit<T>; N],\n-    init: usize,\n-}\n-\n-impl<T, const N: usize> Remainder<T, N> {\n-    fn new() -> Self {\n-        Self { array: MaybeUninit::uninit_array(), init: 0 }\n-    }\n-\n-    unsafe fn with_init(array: [MaybeUninit<T>; N], init: usize) -> Self {\n-        Self { array, init }\n-    }\n-\n-    fn as_slice(&self) -> &[T] {\n-        debug_assert!(self.init <= N);\n-        // SAFETY: This raw slice will only contain the initialized objects\n-        // within the buffer.\n-        unsafe {\n-            let slice = self.array.get_unchecked(..self.init);\n-            MaybeUninit::slice_assume_init_ref(slice)\n-        }\n-    }\n-\n-    fn as_mut_slice(&mut self) -> &mut [T] {\n-        debug_assert!(self.init <= N);\n-        // SAFETY: This raw slice will only contain the initialized objects\n-        // within the buffer.\n-        unsafe {\n-            let slice = self.array.get_unchecked_mut(..self.init);\n-            MaybeUninit::slice_assume_init_mut(slice)\n-        }\n-    }\n-}\n-\n-impl<T, const N: usize> Clone for Remainder<T, N>\n-where\n-    T: Clone,\n-{\n-    fn clone(&self) -> Self {\n-        let mut new = Self::new();\n-        // SAFETY: The new array is the same size and `init` is always less than\n-        // or equal to `N`.\n-        let this = unsafe { new.array.get_unchecked_mut(..self.init) };\n-        MaybeUninit::write_slice_cloned(this, self.as_slice());\n-        new.init = self.init;\n-        new\n-    }\n-}\n-\n-impl<T, const N: usize> Drop for Remainder<T, N> {\n-    fn drop(&mut self) {\n-        // SAFETY: This raw slice will only contain the initialized objects\n-        // within the buffer.\n-        unsafe { ptr::drop_in_place(self.as_mut_slice()) }\n-    }\n-}\n-\n /// An iterator over `N` elements of the iterator at a time.\n ///\n /// The chunks do not overlap. If `N` does not divide the length of the\n@@ -75,7 +17,7 @@ impl<T, const N: usize> Drop for Remainder<T, N> {\n #[unstable(feature = \"iter_array_chunks\", reason = \"recently added\", issue = \"none\")]\n pub struct ArrayChunks<I: Iterator, const N: usize> {\n     iter: Fuse<I>,\n-    remainder: Remainder<I::Item, N>,\n+    remainder: Option<array::IntoIter<I::Item, N>>,\n }\n \n impl<I, const N: usize> ArrayChunks<I, N>\n@@ -84,25 +26,16 @@ where\n {\n     pub(in crate::iter) fn new(iter: I) -> Self {\n         assert!(N != 0, \"chunk size must be non-zero\");\n-        Self { iter: iter.fuse(), remainder: Remainder::new() }\n-    }\n-\n-    /// Returns a reference to the remaining elements of the original iterator\n-    /// that are not going to be returned by this iterator. The returned slice\n-    /// has at most `N-1` elements.\n-    #[unstable(feature = \"iter_array_chunks\", reason = \"recently added\", issue = \"none\")]\n-    #[inline]\n-    pub fn remainder(&self) -> &[I::Item] {\n-        self.remainder.as_slice()\n+        Self { iter: iter.fuse(), remainder: None }\n     }\n \n-    /// Returns a mutable reference to the remaining elements of the original\n-    /// iterator that are not going to be returned by this iterator. The\n-    /// returned slice has at most `N-1` elements.\n+    /// Returns an iterator over the remaining elements of the original iterator\n+    /// that are not going to be returned by this iterator. The returned\n+    /// iterator will yield at most `N-1` elements.\n     #[unstable(feature = \"iter_array_chunks\", reason = \"recently added\", issue = \"none\")]\n     #[inline]\n-    pub fn remainder_mut(&mut self) -> &mut [I::Item] {\n-        self.remainder.as_mut_slice()\n+    pub fn into_remainder(self) -> Option<array::IntoIter<I::Item, N>> {\n+        self.remainder\n     }\n }\n \n@@ -129,8 +62,10 @@ where\n                     if guard.init > 0 {\n                         let init = guard.init;\n                         mem::forget(guard);\n-                        // SAFETY: `array` was initialized with `init` elements.\n-                        self.remainder = unsafe { Remainder::with_init(array, init) };\n+                        self.remainder = {\n+                            // SAFETY: `array` was initialized with `init` elements.\n+                            Some(unsafe { array::IntoIter::with_partial(array, 0..init) })\n+                        };\n                     }\n                     return None;\n                 }\n@@ -189,7 +124,7 @@ where\n                     let init = guard.init;\n                     mem::forget(guard);\n                     // SAFETY: `array` was initialized with `init` elements.\n-                    self.remainder = unsafe { Remainder::with_init(array, init) };\n+                    self.remainder = Some(unsafe { array::IntoIter::with_partial(array, 0..init) });\n                 }\n                 R::from_output(o)\n             }\n@@ -370,7 +305,7 @@ where\n         // SAFETY: `array` was initialized with exactly `init` elements.\n         self.remainder = unsafe {\n             array.get_unchecked_mut(..init).reverse();\n-            Remainder::with_init(array, init)\n+            Some(array::IntoIter::with_partial(array, 0..init))\n         };\n         Some(())\n     }"}, {"sha": "d41cf78e00066383fdaf48e07756679c89896c32", "filename": "library/core/src/iter/traits/iterator.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f5485181ca1d932d78904a7587ed19d0738f0b91/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5485181ca1d932d78904a7587ed19d0738f0b91/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs?ref=f5485181ca1d932d78904a7587ed19d0738f0b91", "patch": "@@ -3319,7 +3319,9 @@ pub trait Iterator {\n     /// Returns an iterator over `N` elements of the iterator at a time.\n     ///\n     /// The chunks do not overlap. If `N` does not divide the length of the\n-    /// iterator, then the last up to `N-1` elements will be omitted.\n+    /// iterator, then the last up to `N-1` elements will be omitted and can be\n+    /// retrieved from the [`.into_remainder()`][ArrayChunks::into_remainder]\n+    /// function of the iterator.\n     ///\n     /// # Panics\n     ///\n@@ -3336,7 +3338,7 @@ pub trait Iterator {\n     /// assert_eq!(iter.next(), Some(['l', 'o']));\n     /// assert_eq!(iter.next(), Some(['r', 'e']));\n     /// assert_eq!(iter.next(), None);\n-    /// assert_eq!(iter.remainder(), &['m']);\n+    /// assert_eq!(iter.into_remainder().unwrap().as_slice(), &['m']);\n     /// ```\n     ///\n     /// ```"}, {"sha": "dbcfd4560289e03f4a88c16106ec66f2f4c1acaa", "filename": "library/core/tests/iter/adapters/array_chunks.rs", "status": "modified", "additions": 5, "deletions": 24, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/f5485181ca1d932d78904a7587ed19d0738f0b91/library%2Fcore%2Ftests%2Fiter%2Fadapters%2Farray_chunks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5485181ca1d932d78904a7587ed19d0738f0b91/library%2Fcore%2Ftests%2Fiter%2Fadapters%2Farray_chunks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fiter%2Fadapters%2Farray_chunks.rs?ref=f5485181ca1d932d78904a7587ed19d0738f0b91", "patch": "@@ -15,39 +15,24 @@ fn test_iterator_array_chunks_infer() {\n fn test_iterator_array_chunks_clone_and_drop() {\n     let count = Cell::new(0);\n     let mut it = (0..5).map(|_| CountDrop::new(&count)).array_chunks::<3>();\n-\n     assert_eq!(it.by_ref().count(), 1);\n     assert_eq!(count.get(), 3);\n-    assert_eq!(it.remainder().len(), 2);\n-\n     let mut it2 = it.clone();\n     assert_eq!(count.get(), 3);\n-    assert_eq!(it2.remainder().len(), 2);\n-\n-    drop(it);\n+    assert_eq!(it.into_remainder().unwrap().len(), 2);\n     assert_eq!(count.get(), 5);\n-    assert_eq!(it2.remainder().len(), 2);\n     assert!(it2.next().is_none());\n-\n-    drop(it2);\n+    assert_eq!(it2.into_remainder().unwrap().len(), 2);\n     assert_eq!(count.get(), 7);\n }\n \n #[test]\n fn test_iterator_array_chunks_remainder() {\n     let mut it = (0..11).array_chunks::<4>();\n-    assert_eq!(it.remainder(), &[]);\n-    assert_eq!(it.remainder_mut(), &[]);\n     assert_eq!(it.next(), Some([0, 1, 2, 3]));\n-    assert_eq!(it.remainder(), &[]);\n-    assert_eq!(it.remainder_mut(), &[]);\n     assert_eq!(it.next(), Some([4, 5, 6, 7]));\n-    assert_eq!(it.remainder(), &[]);\n-    assert_eq!(it.remainder_mut(), &[]);\n-    assert_eq!(it.next(), None);\n     assert_eq!(it.next(), None);\n-    assert_eq!(it.remainder(), &[8, 9, 10]);\n-    assert_eq!(it.remainder_mut(), &[8, 9, 10]);\n+    assert_eq!(it.into_remainder().unwrap().as_slice(), &[8, 9, 10]);\n }\n \n #[test]\n@@ -105,8 +90,7 @@ fn test_iterator_array_chunks_next_and_next_back() {\n     assert_eq!(it.next(), None);\n     assert_eq!(it.next_back(), None);\n     assert_eq!(it.next(), None);\n-    assert_eq!(it.remainder(), &[9, 10]);\n-    assert_eq!(it.remainder_mut(), &[9, 10]);\n+    assert_eq!(it.into_remainder().unwrap().as_slice(), &[9, 10]);\n }\n \n #[test]\n@@ -119,7 +103,7 @@ fn test_iterator_array_chunks_rev_remainder() {\n         assert_eq!(it.next(), None);\n         assert_eq!(it.next(), None);\n     }\n-    assert_eq!(it.remainder(), &[8, 9, 10]);\n+    assert_eq!(it.into_remainder().unwrap().as_slice(), &[8, 9, 10]);\n }\n \n #[test]\n@@ -128,7 +112,6 @@ fn test_iterator_array_chunks_try_fold() {\n     let mut it = (0..10).map(|_| CountDrop::new(&count)).array_chunks::<3>();\n     let result: Result<_, ()> = it.by_ref().try_fold(0, |acc, _item| Ok(acc + 1));\n     assert_eq!(result, Ok(3));\n-    assert_eq!(it.remainder().len(), 1);\n     assert_eq!(count.get(), 9);\n     drop(it);\n     assert_eq!(count.get(), 10);\n@@ -137,7 +120,6 @@ fn test_iterator_array_chunks_try_fold() {\n     let mut it = (0..10).map(|_| CountDrop::new(&count)).array_chunks::<3>();\n     let result = it.by_ref().try_fold(0, |acc, _item| if acc < 2 { Ok(acc + 1) } else { Err(acc) });\n     assert_eq!(result, Err(2));\n-    assert_eq!(it.remainder().len(), 0);\n     assert_eq!(count.get(), 9);\n     drop(it);\n     assert_eq!(count.get(), 9);\n@@ -166,7 +148,6 @@ fn test_iterator_array_chunks_try_rfold() {\n     let mut it = (0..10).map(|_| CountDrop::new(&count)).array_chunks::<3>();\n     let result: Result<_, ()> = it.try_rfold(0, |acc, _item| Ok(acc + 1));\n     assert_eq!(result, Ok(3));\n-    assert_eq!(it.remainder().len(), 1);\n     assert_eq!(count.get(), 9);\n     drop(it);\n     assert_eq!(count.get(), 10);"}]}