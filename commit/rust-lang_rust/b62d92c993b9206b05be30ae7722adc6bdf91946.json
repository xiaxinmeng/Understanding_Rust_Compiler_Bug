{"sha": "b62d92c993b9206b05be30ae7722adc6bdf91946", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI2MmQ5MmM5OTNiOTIwNmIwNWJlMzBhZTc3MjJhZGM2YmRmOTE5NDY=", "commit": {"author": {"name": "Eric Holk", "email": "eric.holk@gmail.com", "date": "2012-05-22T22:29:49Z"}, "committer": {"name": "Eric Holk", "email": "eric.holk@gmail.com", "date": "2012-05-22T22:31:39Z"}, "message": "Removed accidental machine size dependencies.", "tree": {"sha": "7a6e2531f0a4434d10e936c7c52460721deeb5af", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7a6e2531f0a4434d10e936c7c52460721deeb5af"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b62d92c993b9206b05be30ae7722adc6bdf91946", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b62d92c993b9206b05be30ae7722adc6bdf91946", "html_url": "https://github.com/rust-lang/rust/commit/b62d92c993b9206b05be30ae7722adc6bdf91946", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b62d92c993b9206b05be30ae7722adc6bdf91946/comments", "author": {"login": "eholk", "id": 105766, "node_id": "MDQ6VXNlcjEwNTc2Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/105766?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eholk", "html_url": "https://github.com/eholk", "followers_url": "https://api.github.com/users/eholk/followers", "following_url": "https://api.github.com/users/eholk/following{/other_user}", "gists_url": "https://api.github.com/users/eholk/gists{/gist_id}", "starred_url": "https://api.github.com/users/eholk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eholk/subscriptions", "organizations_url": "https://api.github.com/users/eholk/orgs", "repos_url": "https://api.github.com/users/eholk/repos", "events_url": "https://api.github.com/users/eholk/events{/privacy}", "received_events_url": "https://api.github.com/users/eholk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eholk", "id": 105766, "node_id": "MDQ6VXNlcjEwNTc2Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/105766?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eholk", "html_url": "https://github.com/eholk", "followers_url": "https://api.github.com/users/eholk/followers", "following_url": "https://api.github.com/users/eholk/following{/other_user}", "gists_url": "https://api.github.com/users/eholk/gists{/gist_id}", "starred_url": "https://api.github.com/users/eholk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eholk/subscriptions", "organizations_url": "https://api.github.com/users/eholk/orgs", "repos_url": "https://api.github.com/users/eholk/repos", "events_url": "https://api.github.com/users/eholk/events{/privacy}", "received_events_url": "https://api.github.com/users/eholk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "44bea036147debabe22d148a55cb2ca6280e350e", "url": "https://api.github.com/repos/rust-lang/rust/commits/44bea036147debabe22d148a55cb2ca6280e350e", "html_url": "https://github.com/rust-lang/rust/commit/44bea036147debabe22d148a55cb2ca6280e350e"}], "stats": {"total": 41, "additions": 22, "deletions": 19}, "files": [{"sha": "1eb3b4779ae378c6c2c79639fc1c61e1cdfcdd2c", "filename": "src/test/bench/graph500-bfs.rs", "status": "modified", "additions": 22, "deletions": 19, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/b62d92c993b9206b05be30ae7722adc6bdf91946/src%2Ftest%2Fbench%2Fgraph500-bfs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b62d92c993b9206b05be30ae7722adc6bdf91946/src%2Ftest%2Fbench%2Fgraph500-bfs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fgraph500-bfs.rs?ref=b62d92c993b9206b05be30ae7722adc6bdf91946", "patch": "@@ -71,8 +71,8 @@ fn make_edges(scale: uint, edgefactor: uint) -> [(node_id, node_id)] {\n             (i, j)\n         }\n         else {\n-            let i = i * 2;\n-            let j = j * 2;\n+            let i = i * 2i64;\n+            let j = j * 2i64;\n             let scale = scale - 1u;\n             \n             let x = r.gen_float();\n@@ -83,28 +83,30 @@ fn make_edges(scale: uint, edgefactor: uint) -> [(node_id, node_id)] {\n             else {\n                 let x = x - A;\n                 if x < B {\n-                    choose_edge(i + 1, j, scale, r)\n+                    choose_edge(i + 1i64, j, scale, r)\n                 }\n                 else {\n                     let x = x - B;\n                     if x < C {\n-                        choose_edge(i, j + 1, scale, r)\n+                        choose_edge(i, j + 1i64, scale, r)\n                     }\n                     else {\n-                        choose_edge(i + 1, j + 1, scale, r)\n+                        choose_edge(i + 1i64, j + 1i64, scale, r)\n                     }\n                 }\n             }\n         }\n     }\n \n     vec::from_fn((1u << scale) * edgefactor) {|_i|\n-        choose_edge(0, 0, scale, r)\n+        choose_edge(0i64, 0i64, scale, r)\n     }\n }\n \n fn make_graph(N: uint, edges: [(node_id, node_id)]) -> graph {\n-    let graph = vec::from_fn(N) {|_i| map::int_hash() };\n+    let graph = vec::from_fn(N) {|_i| \n+        map::hashmap::<node_id, ()>({|x| x as uint }, {|x, y| x == y })\n+    };\n \n     vec::each(edges) {|e| \n         let (i, j) = e;\n@@ -119,16 +121,16 @@ fn make_graph(N: uint, edges: [(node_id, node_id)]) -> graph {\n }\n \n fn gen_search_keys(graph: graph, n: uint) -> [node_id] {\n-    let keys = map::int_hash();\n+    let keys = map::hashmap::<node_id, ()>({|x| x as uint }, {|x, y| x == y });\n     let r = rand::rng();\n \n     while keys.size() < n {\n-        let k = r.gen_u64() % graph.len() as node_id;\n+        let k = r.gen_uint_range(0u, graph.len());\n \n         if graph[k].len() > 0u && vec::any(graph[k]) {|i|\n-            i != k\n+            i != k as node_id\n         } {\n-            map::set_add(keys, k);\n+            map::set_add(keys, k as node_id);\n         }\n     }\n     map::vec_from_set(keys)\n@@ -139,7 +141,7 @@ fn gen_search_keys(graph: graph, n: uint) -> [node_id] {\n Nodes that are unreachable have a parent of -1.\"]\n fn bfs(graph: graph, key: node_id) -> bfs_result {\n     let marks : [mut node_id] \n-        = vec::to_mut(vec::from_elem(vec::len(graph), -1));\n+        = vec::to_mut(vec::from_elem(vec::len(graph), -1i64));\n \n     let Q = create_queue();\n \n@@ -150,7 +152,7 @@ fn bfs(graph: graph, key: node_id) -> bfs_result {\n         let t = Q.pop_front();\n \n         graph[t].each() {|k| \n-            if marks[k] == -1 {\n+            if marks[k] == -1i64 {\n                 marks[k] = t;\n                 Q.add_back(k);\n             }\n@@ -226,7 +228,7 @@ fn bfs2(graph: graph, key: node_id) -> bfs_result {\n     // Convert the results.\n     vec::map(colors) {|c|\n         alt c {\n-          white { -1 }\n+          white { -1i64 }\n           black(parent) { parent }\n           _ { fail \"Found remaining gray nodes in BFS\" }\n         }\n@@ -301,7 +303,7 @@ fn pbfs(graph: graph, key: node_id) -> bfs_result {\n     // Convert the results.\n     par::map(colors) {|c|\n         alt c {\n-          white { -1 }\n+          white { -1i64 }\n           black(parent) { parent }\n           _ { fail \"Found remaining gray nodes in BFS\" }\n         }\n@@ -326,7 +328,7 @@ fn validate(edges: [(node_id, node_id)],\n         let mut parent = parent;\n         let mut path = [];\n \n-        if parent == -1 {\n+        if parent == -1i64 {\n             // This node was not in the tree.\n             -1\n         }\n@@ -354,7 +356,7 @@ fn validate(edges: [(node_id, node_id)],\n     log(info, \"Verifying tree edges...\");\n \n     let status = tree.alli() {|k, parent|\n-        if parent != root && parent != -1 {\n+        if parent != root && parent != -1i64 {\n             level[parent] == level[k] - 1\n         }\n         else {\n@@ -387,11 +389,12 @@ fn validate(edges: [(node_id, node_id)],\n     log(info, \"Verifying tree and graph edges...\");\n \n     let status = par::alli(tree) {|u, v|\n-        if v == -1 || u as int == root {\n+        let u = u as node_id;\n+        if v == -1i64 || u == root {\n             true\n         }\n         else {\n-            edges.contains((u as int, v)) || edges.contains((v, u as int))\n+            edges.contains((u, v)) || edges.contains((v, u))\n         }\n     };\n "}]}