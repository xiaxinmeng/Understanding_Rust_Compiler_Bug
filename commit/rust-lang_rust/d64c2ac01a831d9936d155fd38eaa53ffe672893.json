{"sha": "d64c2ac01a831d9936d155fd38eaa53ffe672893", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ2NGMyYWMwMWE4MzFkOTkzNmQxNTVmZDM4ZWFhNTNmZmU2NzI4OTM=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2018-07-21T11:35:29Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2018-07-22T19:03:21Z"}, "message": "Improve code", "tree": {"sha": "788ee871000e5b4f9a87b5fe67c6e1c7a19de444", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/788ee871000e5b4f9a87b5fe67c6e1c7a19de444"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d64c2ac01a831d9936d155fd38eaa53ffe672893", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d64c2ac01a831d9936d155fd38eaa53ffe672893", "html_url": "https://github.com/rust-lang/rust/commit/d64c2ac01a831d9936d155fd38eaa53ffe672893", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d64c2ac01a831d9936d155fd38eaa53ffe672893/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6b830ec23e25f3e325e97fc49b0bec9a7f2a5b53", "url": "https://api.github.com/repos/rust-lang/rust/commits/6b830ec23e25f3e325e97fc49b0bec9a7f2a5b53", "html_url": "https://github.com/rust-lang/rust/commit/6b830ec23e25f3e325e97fc49b0bec9a7f2a5b53"}], "stats": {"total": 114, "additions": 47, "deletions": 67}, "files": [{"sha": "a4f9444e355acacce27a140c71e16acd47baccc5", "filename": "src/librustdoc/clean/auto_trait.rs", "status": "modified", "additions": 43, "deletions": 54, "changes": 97, "blob_url": "https://github.com/rust-lang/rust/blob/d64c2ac01a831d9936d155fd38eaa53ffe672893/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d64c2ac01a831d9936d155fd38eaa53ffe672893/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs?ref=d64c2ac01a831d9936d155fd38eaa53ffe672893", "patch": "@@ -10,7 +10,7 @@\n \n use rustc::hir;\n use rustc::traits::{self, auto_trait as auto};\n-use rustc::ty::{ToPredicate, TypeFoldable};\n+use rustc::ty::{self, ToPredicate, TypeFoldable};\n use rustc::ty::subst::Subst;\n use rustc::infer::InferOk;\n use std::fmt::Debug;\n@@ -80,6 +80,33 @@ impl<'a, 'tcx, 'rcx> AutoTraitFinder<'a, 'tcx, 'rcx> {\n         self.get_auto_trait_impls(did, &def_ctor, Some(name))\n     }\n \n+    fn get_real_ty<F>(&self, def_id: DefId, def_ctor: &F, real_name: &Option<Ident>,\n+                      generics: &ty::Generics) -> hir::Ty\n+    where F: Fn(DefId) -> Def {\n+        let path = get_path_for_type(self.cx.tcx, def_id, def_ctor);\n+        let mut segments = path.segments.into_vec();\n+        let last = segments.pop().unwrap();\n+\n+        segments.push(hir::PathSegment::new(\n+            real_name.unwrap_or(last.ident),\n+            self.generics_to_path_params(generics.clone()),\n+            false,\n+        ));\n+\n+        let new_path = hir::Path {\n+            span: path.span,\n+            def: path.def,\n+            segments: HirVec::from_vec(segments),\n+        };\n+\n+        hir::Ty {\n+            id: ast::DUMMY_NODE_ID,\n+            node: hir::TyKind::Path(hir::QPath::Resolved(None, P(new_path))),\n+            span: DUMMY_SP,\n+            hir_id: hir::DUMMY_HIR_ID,\n+        }\n+    }\n+\n     pub fn get_auto_trait_impls<F>(\n         &self,\n         def_id: DefId,\n@@ -140,7 +167,8 @@ impl<'a, 'tcx, 'rcx> AutoTraitFinder<'a, 'tcx, 'rcx> {\n                             // Require the type the impl is implemented on to match\n                             // our type, and ignore the impl if there was a mismatch.\n                             let cause = traits::ObligationCause::dummy();\n-                            let eq_result = infcx.at(&cause, param_env).eq(trait_ref.self_ty(), ty2);\n+                            let eq_result = infcx.at(&cause, param_env)\n+                                                 .eq(trait_ref.self_ty(), ty2);\n                             if let Ok(InferOk { value: (), obligations }) = eq_result {\n                                 // FIXME(eddyb) ignoring `obligations` might cause false positives.\n                                 drop(obligations);\n@@ -156,36 +184,18 @@ impl<'a, 'tcx, 'rcx> AutoTraitFinder<'a, 'tcx, 'rcx> {\n                                 self.cx.generated_synthetics.borrow_mut()\n                                                             .insert((def_id, trait_def_id));\n                                 let trait_ = hir::TraitRef {\n-                                    path: get_path_for_type(infcx.tcx, trait_def_id, hir::def::Def::Trait),\n+                                    path: get_path_for_type(infcx.tcx,\n+                                                            trait_def_id,\n+                                                            hir::def::Def::Trait),\n                                     ref_id: ast::DUMMY_NODE_ID,\n                                 };\n-                                let provided_trait_methods = infcx.tcx.provided_trait_methods(impl_def_id)\n-                                                                      .into_iter()\n-                                                                      .map(|meth| meth.ident.to_string())\n-                                                                      .collect();\n-\n-                                let path = get_path_for_type(self.cx.tcx, def_id, def_ctor);\n-                                let mut segments = path.segments.into_vec();\n-                                let last = segments.pop().unwrap();\n-\n-                                segments.push(hir::PathSegment::new(\n-                                    real_name.unwrap_or(last.ident),\n-                                    self.generics_to_path_params(generics.clone()),\n-                                    false,\n-                                ));\n+                                let provided_trait_methods =\n+                                    infcx.tcx.provided_trait_methods(impl_def_id)\n+                                             .into_iter()\n+                                             .map(|meth| meth.ident.to_string())\n+                                             .collect();\n \n-                                let new_path = hir::Path {\n-                                    span: path.span,\n-                                    def: path.def,\n-                                    segments: HirVec::from_vec(segments),\n-                                };\n-\n-                                let ty = hir::Ty {\n-                                    id: ast::DUMMY_NODE_ID,\n-                                    node: hir::Ty_::TyPath(hir::QPath::Resolved(None, P(new_path))),\n-                                    span: DUMMY_SP,\n-                                    hir_id: hir::DUMMY_HIR_ID,\n-                                };\n+                                let ty = self.get_real_ty(def_id, def_ctor, &real_name, generics);\n \n                                 traits.push(Item {\n                                     source: Span::empty(),\n@@ -202,7 +212,9 @@ impl<'a, 'tcx, 'rcx> AutoTraitFinder<'a, 'tcx, 'rcx> {\n                                         provided_trait_methods,\n                                         trait_: Some(trait_.clean(self.cx)),\n                                         for_: ty.clean(self.cx),\n-                                        items: infcx.tcx.associated_items(impl_def_id).collect::<Vec<_>>().clean(self.cx),\n+                                        items: infcx.tcx.associated_items(impl_def_id)\n+                                                        .collect::<Vec<_>>()\n+                                                        .clean(self.cx),\n                                         polarity: None,\n                                         synthetic: true,\n                                     }),\n@@ -312,31 +324,8 @@ impl<'a, 'tcx, 'rcx> AutoTraitFinder<'a, 'tcx, 'rcx> {\n                 }\n                 _ => unreachable!(),\n             };\n-\n-            let path = get_path_for_type(self.cx.tcx, def_id, def_ctor);\n-            let mut segments = path.segments.into_vec();\n-            let last = segments.pop().unwrap();\n-\n             let real_name = name.map(|name| Ident::from_str(&name));\n-\n-            segments.push(hir::PathSegment::new(\n-                real_name.unwrap_or(last.ident),\n-                self.generics_to_path_params(generics.clone()),\n-                false,\n-            ));\n-\n-            let new_path = hir::Path {\n-                span: path.span,\n-                def: path.def,\n-                segments: HirVec::from_vec(segments),\n-            };\n-\n-            let ty = hir::Ty {\n-                id: ast::DUMMY_NODE_ID,\n-                node: hir::TyKind::Path(hir::QPath::Resolved(None, P(new_path))),\n-                span: DUMMY_SP,\n-                hir_id: hir::DUMMY_HIR_ID,\n-            };\n+            let ty = self.get_real_ty(def_id, def_ctor, &real_name, &generics);\n \n             return Some(Item {\n                 source: Span::empty(),"}, {"sha": "fd39202b87c1a3ac22ce8634365500c07c810b30", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d64c2ac01a831d9936d155fd38eaa53ffe672893/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d64c2ac01a831d9936d155fd38eaa53ffe672893/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=d64c2ac01a831d9936d155fd38eaa53ffe672893", "patch": "@@ -3628,16 +3628,7 @@ fn render_assoc_items(w: &mut fmt::Formatter,\n \n         let (synthetic, concrete) = traits\n             .iter()\n-            .partition::<Vec<&&Impl>, _>(|t| t.inner_impl().synthetic);\n-\n-        // ugly hacks to remove duplicates.\n-        let synthetic = synthetic.into_iter()\n-                                 .filter(|t| {\n-            !concrete.iter()\n-                     .any(|tt| {\n-                         tt.inner_impl().trait_.def_id() == t.inner_impl().trait_.def_id()\n-                     })\n-        }).collect::<Vec<_>>();\n+            .partition::<Vec<_>, _>(|t| t.inner_impl().synthetic);\n \n         struct RendererStruct<'a, 'b, 'c>(&'a Context, Vec<&'b &'b Impl>, &'c clean::Item);\n "}, {"sha": "e69a3277d7f2bd88e7f8ff117d795636eb7e650f", "filename": "src/test/rustdoc/generic-impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d64c2ac01a831d9936d155fd38eaa53ffe672893/src%2Ftest%2Frustdoc%2Fgeneric-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d64c2ac01a831d9936d155fd38eaa53ffe672893/src%2Ftest%2Frustdoc%2Fgeneric-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fgeneric-impl.rs?ref=d64c2ac01a831d9936d155fd38eaa53ffe672893", "patch": "@@ -12,7 +12,7 @@\n \n use std::fmt;\n \n-// @!has foo/struct.Bar.html 'impl<T> ToString for Bar'\n+// @!has foo/struct.Bar.html '//h3[@id=\"impl-ToString\"]//code' 'impl<T> ToString for Bar'\n pub struct Bar;\n \n // @has foo/struct.Foo.html '//h3[@id=\"impl-ToString\"]//code' 'impl<T> ToString for Foo'"}, {"sha": "f9a6c2607cd771e5d8d93222a3b1eb9f898770c9", "filename": "src/test/rustdoc/synthetic_auto/basic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d64c2ac01a831d9936d155fd38eaa53ffe672893/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fbasic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d64c2ac01a831d9936d155fd38eaa53ffe672893/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fbasic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fbasic.rs?ref=d64c2ac01a831d9936d155fd38eaa53ffe672893", "patch": "@@ -12,7 +12,7 @@\n // @has - '//code' 'impl<T> Send for Foo<T> where T: Send'\n // @has - '//code' 'impl<T> Sync for Foo<T> where T: Sync'\n // @count - '//*[@id=\"implementations-list\"]/*[@class=\"impl\"]' 0\n-// @count - '//*[@id=\"synthetic-implementations-list\"]/*[@class=\"impl\"]' 11\n+// @count - '//*[@id=\"synthetic-implementations-list\"]/*[@class=\"impl\"]' 9\n pub struct Foo<T> {\n     field: T,\n }"}, {"sha": "8c7f9d8cc659e9f4a3fe4c95be26b7a68c73482c", "filename": "src/test/rustdoc/synthetic_auto/manual.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d64c2ac01a831d9936d155fd38eaa53ffe672893/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fmanual.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d64c2ac01a831d9936d155fd38eaa53ffe672893/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fmanual.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fmanual.rs?ref=d64c2ac01a831d9936d155fd38eaa53ffe672893", "patch": "@@ -16,7 +16,7 @@\n // 'impl<T> Send for Foo<T>'\n //\n // @count - '//*[@id=\"implementations-list\"]/*[@class=\"impl\"]' 1\n-// @count - '//*[@id=\"synthetic-implementations-list\"]/*[@class=\"impl\"]' 10\n+// @count - '//*[@id=\"synthetic-implementations-list\"]/*[@class=\"impl\"]' 8\n pub struct Foo<T> {\n     field: T,\n }"}]}