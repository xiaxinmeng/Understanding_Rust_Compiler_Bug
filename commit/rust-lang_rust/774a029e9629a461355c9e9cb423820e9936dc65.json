{"sha": "774a029e9629a461355c9e9cb423820e9936dc65", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc3NGEwMjllOTYyOWE0NjEzNTVjOWU5Y2I0MjM4MjBlOTkzNmRjNjU=", "commit": {"author": {"name": "Ben Lewis", "email": "benlewisj@gmail.com", "date": "2020-02-15T20:59:01Z"}, "committer": {"name": "Ben Lewis", "email": "benlewisj@gmail.com", "date": "2020-02-15T20:59:01Z"}, "message": "Code review changes.", "tree": {"sha": "797d2e1a6444dd3eb3fac2c1e5c03f0fe77fd031", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/797d2e1a6444dd3eb3fac2c1e5c03f0fe77fd031"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/774a029e9629a461355c9e9cb423820e9936dc65", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/774a029e9629a461355c9e9cb423820e9936dc65", "html_url": "https://github.com/rust-lang/rust/commit/774a029e9629a461355c9e9cb423820e9936dc65", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/774a029e9629a461355c9e9cb423820e9936dc65/comments", "author": {"login": "BenLewis-Seequent", "id": 7391596, "node_id": "MDQ6VXNlcjczOTE1OTY=", "avatar_url": "https://avatars.githubusercontent.com/u/7391596?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BenLewis-Seequent", "html_url": "https://github.com/BenLewis-Seequent", "followers_url": "https://api.github.com/users/BenLewis-Seequent/followers", "following_url": "https://api.github.com/users/BenLewis-Seequent/following{/other_user}", "gists_url": "https://api.github.com/users/BenLewis-Seequent/gists{/gist_id}", "starred_url": "https://api.github.com/users/BenLewis-Seequent/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BenLewis-Seequent/subscriptions", "organizations_url": "https://api.github.com/users/BenLewis-Seequent/orgs", "repos_url": "https://api.github.com/users/BenLewis-Seequent/repos", "events_url": "https://api.github.com/users/BenLewis-Seequent/events{/privacy}", "received_events_url": "https://api.github.com/users/BenLewis-Seequent/received_events", "type": "User", "site_admin": false}, "committer": {"login": "BenLewis-Seequent", "id": 7391596, "node_id": "MDQ6VXNlcjczOTE1OTY=", "avatar_url": "https://avatars.githubusercontent.com/u/7391596?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BenLewis-Seequent", "html_url": "https://github.com/BenLewis-Seequent", "followers_url": "https://api.github.com/users/BenLewis-Seequent/followers", "following_url": "https://api.github.com/users/BenLewis-Seequent/following{/other_user}", "gists_url": "https://api.github.com/users/BenLewis-Seequent/gists{/gist_id}", "starred_url": "https://api.github.com/users/BenLewis-Seequent/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BenLewis-Seequent/subscriptions", "organizations_url": "https://api.github.com/users/BenLewis-Seequent/orgs", "repos_url": "https://api.github.com/users/BenLewis-Seequent/repos", "events_url": "https://api.github.com/users/BenLewis-Seequent/events{/privacy}", "received_events_url": "https://api.github.com/users/BenLewis-Seequent/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "821f4a9dfb38dab30df861d3c19788b2e7ed0d95", "url": "https://api.github.com/repos/rust-lang/rust/commits/821f4a9dfb38dab30df861d3c19788b2e7ed0d95", "html_url": "https://github.com/rust-lang/rust/commit/821f4a9dfb38dab30df861d3c19788b2e7ed0d95"}], "stats": {"total": 69, "additions": 35, "deletions": 34}, "files": [{"sha": "2c146b5d7b42647b3ca95de088976a9331e16ebc", "filename": "src/librustc/mir/interpret/value.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/774a029e9629a461355c9e9cb423820e9936dc65/src%2Flibrustc%2Fmir%2Finterpret%2Fvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/774a029e9629a461355c9e9cb423820e9936dc65/src%2Flibrustc%2Fmir%2Finterpret%2Fvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fvalue.rs?ref=774a029e9629a461355c9e9cb423820e9936dc65", "patch": "@@ -89,8 +89,8 @@ impl<'tcx> ConstValue<'tcx> {\n         ConstValue::Scalar(Scalar::from_u64(i))\n     }\n \n-    pub fn from_machine_usize(cx: &impl HasDataLayout, i: u64) -> Self {\n-        ConstValue::Scalar(Scalar::from_machine_usize(cx, i))\n+    pub fn from_machine_usize(i: u64, cx: &impl HasDataLayout) -> Self {\n+        ConstValue::Scalar(Scalar::from_machine_usize(i, cx))\n     }\n }\n \n@@ -314,7 +314,7 @@ impl<'tcx, Tag> Scalar<Tag> {\n     }\n \n     #[inline]\n-    pub fn from_machine_usize(cx: &impl HasDataLayout, i: u64) -> Self {\n+    pub fn from_machine_usize(i: u64, cx: &impl HasDataLayout) -> Self {\n         Self::from_uint(i, cx.data_layout().pointer_size)\n     }\n \n@@ -337,6 +337,11 @@ impl<'tcx, Tag> Scalar<Tag> {\n             .unwrap_or_else(|| bug!(\"Signed value {:#x} does not fit in {} bits\", i, size.bits()))\n     }\n \n+    #[inline]\n+    pub fn from_machine_isize(i: i64, cx: &impl HasDataLayout) -> Self {\n+        Self::from_int(i, cx.data_layout().pointer_size)\n+    }\n+\n     #[inline]\n     pub fn from_f32(f: Single) -> Self {\n         // We trust apfloat to give us properly truncated data."}, {"sha": "a23c44d1921e184b8941eac50b1047c4c5ee95c8", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/774a029e9629a461355c9e9cb423820e9936dc65/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/774a029e9629a461355c9e9cb423820e9936dc65/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=774a029e9629a461355c9e9cb423820e9936dc65", "patch": "@@ -2415,9 +2415,14 @@ pub struct Const<'tcx> {\n static_assert_size!(Const<'_>, 48);\n \n impl<'tcx> Const<'tcx> {\n+    #[inline]\n+    pub fn from_value(tcx: TyCtxt<'tcx>, val: ConstValue<'tcx>, ty: Ty<'tcx>) -> &'tcx Self {\n+        tcx.mk_const(Self { val: ConstKind::Value(val), ty })\n+    }\n+\n     #[inline]\n     pub fn from_scalar(tcx: TyCtxt<'tcx>, val: Scalar, ty: Ty<'tcx>) -> &'tcx Self {\n-        tcx.mk_const(Self { val: ConstKind::Value(ConstValue::Scalar(val)), ty })\n+        Self::from_value(tcx, ConstValue::Scalar(val), ty)\n     }\n \n     #[inline]\n@@ -2473,7 +2478,7 @@ impl<'tcx> Const<'tcx> {\n             // evaluate the const.\n             tcx.const_eval_resolve(param_env, did, substs, promoted, None)\n                 .ok()\n-                .map(|val| tcx.mk_const(Const { val: ConstKind::Value(val), ty: self.ty }))\n+                .map(|val| Const::from_value(tcx, val, self.ty))\n         };\n \n         match self.val {"}, {"sha": "9ceb75a603bc465276c2f5f3acdfecdc7c67b722", "filename": "src/librustc_codegen_ssa/mir/constant.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/774a029e9629a461355c9e9cb423820e9936dc65/src%2Flibrustc_codegen_ssa%2Fmir%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/774a029e9629a461355c9e9cb423820e9936dc65/src%2Flibrustc_codegen_ssa%2Fmir%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fconstant.rs?ref=774a029e9629a461355c9e9cb423820e9936dc65", "patch": "@@ -62,7 +62,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                 if let ty::ConstKind::Value(value) = const_.val {\n                     Ok(value)\n                 } else {\n-                    bug!(\"encountered bad ConstKind in codegen\");\n+                    span_bug!(constant.span, \"encountered bad ConstKind in codegen: {:?}\", const_);\n                 }\n             }\n         }\n@@ -83,7 +83,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                     ty::Array(_, n) => n.eval_usize(bx.tcx(), ty::ParamEnv::reveal_all()),\n                     _ => bug!(\"invalid simd shuffle type: {}\", ty),\n                 };\n-                let c = bx.tcx().mk_const(ty::Const { val: ty::ConstKind::Value(val), ty });\n+                let c = ty::Const::from_value(bx.tcx(), val, ty);\n                 let values: Vec<_> = (0..fields)\n                     .map(|field| {\n                         let field = bx.tcx().const_field("}, {"sha": "04e2558a308b3c81d62e43aa696fd46ee51b69db", "filename": "src/librustc_mir/const_eval.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/774a029e9629a461355c9e9cb423820e9936dc65/src%2Flibrustc_mir%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/774a029e9629a461355c9e9cb423820e9936dc65/src%2Flibrustc_mir%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fconst_eval.rs?ref=774a029e9629a461355c9e9cb423820e9936dc65", "patch": "@@ -79,7 +79,7 @@ pub(crate) fn destructure_const<'tcx>(\n     let fields_iter = (0..field_count).map(|i| {\n         let field_op = ecx.operand_field(down, i).unwrap();\n         let val = op_to_const(&ecx, field_op);\n-        tcx.mk_const(ty::Const { val: ty::ConstKind::Value(val), ty: field_op.layout.ty })\n+        ty::Const::from_value(tcx, val, field_op.layout.ty)\n     });\n     let fields = tcx.arena.alloc_from_iter(fields_iter);\n "}, {"sha": "42d4996c253910f141cf4fd569b6b5d6d8af48b4", "filename": "src/librustc_mir/interpret/intrinsics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/774a029e9629a461355c9e9cb423820e9936dc65/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/774a029e9629a461355c9e9cb423820e9936dc65/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs?ref=774a029e9629a461355c9e9cb423820e9936dc65", "patch": "@@ -65,7 +65,7 @@ crate fn eval_nullary_intrinsic<'tcx>(\n                 sym::size_of => layout.size.bytes(),\n                 _ => bug!(),\n             };\n-            ConstValue::from_machine_usize(&tcx, n)\n+            ConstValue::from_machine_usize(n, &tcx)\n         }\n         sym::type_id => ConstValue::from_u64(tcx.type_id_hash(tp_ty).into()),\n         other => bug!(\"`{}` is not a zero arg intrinsic\", other),"}, {"sha": "e594e1eeed07e3b95e6d84d589f31a20ea7bb432", "filename": "src/librustc_mir_build/hair/constant.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/774a029e9629a461355c9e9cb423820e9936dc65/src%2Flibrustc_mir_build%2Fhair%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/774a029e9629a461355c9e9cb423820e9936dc65/src%2Flibrustc_mir_build%2Fhair%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fhair%2Fconstant.rs?ref=774a029e9629a461355c9e9cb423820e9936dc65", "patch": "@@ -65,7 +65,7 @@ crate fn lit_to_const<'tcx>(\n         ast::LitKind::Char(c) => ConstValue::Scalar(Scalar::from_char(c)),\n         ast::LitKind::Err(_) => return Err(LitToConstError::Reported),\n     };\n-    Ok(tcx.mk_const(ty::Const { val: ty::ConstKind::Value(lit), ty }))\n+    Ok(ty::Const::from_value(tcx, lit, ty))\n }\n \n fn parse_float<'tcx>(num: Symbol, fty: ast::FloatTy, neg: bool) -> Result<ConstValue<'tcx>, ()> {"}, {"sha": "85f03629b646a4cdbdd1855896ba56d6d2c3fd29", "filename": "src/librustc_mir_build/hair/pattern/_match.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/774a029e9629a461355c9e9cb423820e9936dc65/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/774a029e9629a461355c9e9cb423820e9936dc65/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2F_match.rs?ref=774a029e9629a461355c9e9cb423820e9936dc65", "patch": "@@ -343,12 +343,11 @@ impl<'tcx> PatternFolder<'tcx> for LiteralExpander<'tcx> {\n                         ty: rty,\n                         span: pat.span,\n                         kind: box PatKind::Constant {\n-                            value: self.tcx.mk_const(Const {\n-                                val: ty::ConstKind::Value(\n-                                    self.fold_const_value_deref(*val, rty, crty),\n-                                ),\n-                                ty: rty,\n-                            }),\n+                            value: Const::from_value(\n+                                self.tcx,\n+                                self.fold_const_value_deref(*val, rty, crty),\n+                                rty,\n+                            ),\n                         },\n                     },\n                 },"}, {"sha": "9101174646959f24991347b47934675bd9fca5d4", "filename": "src/librustc_mir_build/hair/pattern/mod.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/774a029e9629a461355c9e9cb423820e9936dc65/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/774a029e9629a461355c9e9cb423820e9936dc65/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2Fmod.rs?ref=774a029e9629a461355c9e9cb423820e9936dc65", "patch": "@@ -769,10 +769,8 @@ impl<'a, 'tcx> PatCtxt<'a, 'tcx> {\n                     Some(span),\n                 ) {\n                     Ok(value) => {\n-                        let const_ = self.tcx.mk_const(ty::Const {\n-                            val: ty::ConstKind::Value(value),\n-                            ty: self.tables.node_type(id),\n-                        });\n+                        let const_ =\n+                            ty::Const::from_value(self.tcx, value, self.tables.node_type(id));\n \n                         let pattern = self.const_to_pat(&const_, id, span);\n                         if !is_associated_const {"}, {"sha": "e694d845a9b788e9dfae8f4f73406715d9c72747", "filename": "src/librustc_typeck/check/expr.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/774a029e9629a461355c9e9cb423820e9936dc65/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/774a029e9629a461355c9e9cb423820e9936dc65/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs?ref=774a029e9629a461355c9e9cb423820e9936dc65", "patch": "@@ -25,7 +25,7 @@ use rustc::ty;\n use rustc::ty::adjustment::{Adjust, Adjustment, AllowTwoPhase, AutoBorrow, AutoBorrowMutability};\n use rustc::ty::Ty;\n use rustc::ty::TypeFoldable;\n-use rustc::ty::{AdtKind, ConstKind, Visibility};\n+use rustc::ty::{AdtKind, Visibility};\n use rustc_data_structures::fx::FxHashMap;\n use rustc_errors::{pluralize, struct_span_err, Applicability, DiagnosticBuilder, DiagnosticId};\n use rustc_hir as hir;\n@@ -1011,12 +1011,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         let count = if self.const_param_def_id(count).is_some() {\n             Ok(self.to_const(count, tcx.type_of(count_def_id)))\n         } else {\n-            tcx.const_eval_poly(count_def_id).map(|val| {\n-                tcx.mk_const(ty::Const {\n-                    val: ConstKind::Value(val),\n-                    ty: tcx.type_of(count_def_id),\n-                })\n-            })\n+            tcx.const_eval_poly(count_def_id)\n+                .map(|val| ty::Const::from_value(tcx, val, tcx.type_of(count_def_id)))\n         };\n \n         let uty = match expected {"}, {"sha": "67c9b9565db006dc5d10efdaea7b894eb3ff9073", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/774a029e9629a461355c9e9cb423820e9936dc65/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/774a029e9629a461355c9e9cb423820e9936dc65/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=774a029e9629a461355c9e9cb423820e9936dc65", "patch": "@@ -1333,9 +1333,7 @@ impl Clean<Type> for hir::Ty<'_> {\n                 let def_id = cx.tcx.hir().local_def_id(length.hir_id);\n                 let length = match cx.tcx.const_eval_poly(def_id) {\n                     Ok(length) => {\n-                        let const_ =\n-                            ty::Const { val: ty::ConstKind::Value(length), ty: cx.tcx.types.usize };\n-                        print_const(cx, &const_)\n+                        print_const(cx, ty::Const::from_value(cx.tcx, length, cx.tcx.types.usize))\n                     }\n                     Err(_) => cx\n                         .sess()"}, {"sha": "704583467b4f3cd393ba8d84eed06009d62791c5", "filename": "src/librustdoc/clean/utils.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/774a029e9629a461355c9e9cb423820e9936dc65/src%2Flibrustdoc%2Fclean%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/774a029e9629a461355c9e9cb423820e9936dc65/src%2Flibrustdoc%2Fclean%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Futils.rs?ref=774a029e9629a461355c9e9cb423820e9936dc65", "patch": "@@ -457,7 +457,7 @@ pub fn name_from_pat(p: &hir::Pat) -> String {\n     }\n }\n \n-pub fn print_const(cx: &DocContext<'_>, n: &ty::Const<'_>) -> String {\n+pub fn print_const(cx: &DocContext<'_>, n: &'tcx ty::Const<'_>) -> String {\n     match n.val {\n         ty::ConstKind::Unevaluated(def_id, _, promoted) => {\n             let mut s = if let Some(hir_id) = cx.tcx.hir().as_local_hir_id(def_id) {\n@@ -493,8 +493,8 @@ pub fn print_evaluated_const(cx: &DocContext<'_>, def_id: DefId) -> Option<Strin\n             (_, &ty::Ref(..)) => None,\n             (ConstValue::Scalar(_), &ty::Adt(_, _)) => None,\n             (ConstValue::Scalar(_), _) => {\n-                let const_ = ty::Const { val: ty::ConstKind::Value(val), ty };\n-                Some(print_const_with_custom_print_scalar(cx, &const_))\n+                let const_ = ty::Const::from_value(cx.tcx, val, ty);\n+                Some(print_const_with_custom_print_scalar(cx, const_))\n             }\n             _ => None,\n         }\n@@ -513,7 +513,7 @@ fn format_integer_with_underscore_sep(num: &str) -> String {\n         .collect()\n }\n \n-fn print_const_with_custom_print_scalar(cx: &DocContext<'_>, ct: &ty::Const<'tcx>) -> String {\n+fn print_const_with_custom_print_scalar(cx: &DocContext<'_>, ct: &'tcx ty::Const<'tcx>) -> String {\n     // Use a slightly different format for integer types which always shows the actual value.\n     // For all other types, fallback to the original `pretty_print_const`.\n     match (ct.val, &ct.ty.kind) {"}]}