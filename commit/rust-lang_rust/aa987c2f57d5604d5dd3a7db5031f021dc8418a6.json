{"sha": "aa987c2f57d5604d5dd3a7db5031f021dc8418a6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFhOTg3YzJmNTdkNTYwNGQ1ZGQzYTdkYjUwMzFmMDIxZGM4NDE4YTY=", "commit": {"author": {"name": "hi-rustin", "email": "rustin.liu@gmail.com", "date": "2021-04-02T00:08:02Z"}, "committer": {"name": "hi-rustin", "email": "rustin.liu@gmail.com", "date": "2021-04-02T00:08:02Z"}, "message": "address comments", "tree": {"sha": "42cf4f6f693860202dc5e9ba5259bf893d104374", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/42cf4f6f693860202dc5e9ba5259bf893d104374"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aa987c2f57d5604d5dd3a7db5031f021dc8418a6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aa987c2f57d5604d5dd3a7db5031f021dc8418a6", "html_url": "https://github.com/rust-lang/rust/commit/aa987c2f57d5604d5dd3a7db5031f021dc8418a6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aa987c2f57d5604d5dd3a7db5031f021dc8418a6/comments", "author": {"login": "hi-rustin", "id": 29879298, "node_id": "MDQ6VXNlcjI5ODc5Mjk4", "avatar_url": "https://avatars.githubusercontent.com/u/29879298?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hi-rustin", "html_url": "https://github.com/hi-rustin", "followers_url": "https://api.github.com/users/hi-rustin/followers", "following_url": "https://api.github.com/users/hi-rustin/following{/other_user}", "gists_url": "https://api.github.com/users/hi-rustin/gists{/gist_id}", "starred_url": "https://api.github.com/users/hi-rustin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hi-rustin/subscriptions", "organizations_url": "https://api.github.com/users/hi-rustin/orgs", "repos_url": "https://api.github.com/users/hi-rustin/repos", "events_url": "https://api.github.com/users/hi-rustin/events{/privacy}", "received_events_url": "https://api.github.com/users/hi-rustin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "hi-rustin", "id": 29879298, "node_id": "MDQ6VXNlcjI5ODc5Mjk4", "avatar_url": "https://avatars.githubusercontent.com/u/29879298?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hi-rustin", "html_url": "https://github.com/hi-rustin", "followers_url": "https://api.github.com/users/hi-rustin/followers", "following_url": "https://api.github.com/users/hi-rustin/following{/other_user}", "gists_url": "https://api.github.com/users/hi-rustin/gists{/gist_id}", "starred_url": "https://api.github.com/users/hi-rustin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hi-rustin/subscriptions", "organizations_url": "https://api.github.com/users/hi-rustin/orgs", "repos_url": "https://api.github.com/users/hi-rustin/repos", "events_url": "https://api.github.com/users/hi-rustin/events{/privacy}", "received_events_url": "https://api.github.com/users/hi-rustin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2c66e154681087f8c1da6809e41e23c1e0962d30", "url": "https://api.github.com/repos/rust-lang/rust/commits/2c66e154681087f8c1da6809e41e23c1e0962d30", "html_url": "https://github.com/rust-lang/rust/commit/2c66e154681087f8c1da6809e41e23c1e0962d30"}], "stats": {"total": 26, "additions": 13, "deletions": 13}, "files": [{"sha": "bc45c57596e151688af1b0418da3fa203baadf99", "filename": "compiler/rustc_expand/src/mbe/macro_rules.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aa987c2f57d5604d5dd3a7db5031f021dc8418a6/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa987c2f57d5604d5dd3a7db5031f021dc8418a6/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_rules.rs?ref=aa987c2f57d5604d5dd3a7db5031f021dc8418a6", "patch": "@@ -969,7 +969,7 @@ fn check_matcher_core(\n                                         &OR_PATTERNS_BACK_COMPAT,\n                                         span,\n                                         ast::CRATE_NODE_ID,\n-                                        &*format!(\"the meaning of the pat fragment specific is changing in Rust 2021, which may affect this macro\",),\n+                                        &*format!(\"the meaning of the `pat` fragment specifier is changing in Rust 2021, which may affect this macro\",),\n                                         BuiltinLintDiagnostics::OrPatternsBackCompat(\n                                             span, suggestion,\n                                         ),"}, {"sha": "4e8b057457c354045fd9287545894d3339c7aca4", "filename": "src/test/ui/macros/macro-or-patterns-back-compat.fixed", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/aa987c2f57d5604d5dd3a7db5031f021dc8418a6/src%2Ftest%2Fui%2Fmacros%2Fmacro-or-patterns-back-compat.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/aa987c2f57d5604d5dd3a7db5031f021dc8418a6/src%2Ftest%2Fui%2Fmacros%2Fmacro-or-patterns-back-compat.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-or-patterns-back-compat.fixed?ref=aa987c2f57d5604d5dd3a7db5031f021dc8418a6", "patch": "@@ -4,13 +4,13 @@\n #![feature(edition_macro_pats)]\n #![deny(or_patterns_back_compat)]\n #![allow(unused_macros)]\n-macro_rules! foo { ($x:pat2015 | $y:pat) => {} } //~ ERROR the meaning of the pat fragment specific is changing in Rust 2021, which may affect this macro\n-macro_rules! bar { ($($x:pat2015)+ | $($y:pat)+) => {} } //~ ERROR the meaning of the pat fragment specific is changing in Rust 2021, which may affect this macro\n+macro_rules! foo { ($x:pat2015 | $y:pat) => {} } //~ ERROR the meaning of the `pat` fragment specifier is changing in Rust 2021, which may affect this macro\n+macro_rules! bar { ($($x:pat2015)+ | $($y:pat)+) => {} } //~ ERROR the meaning of the `pat` fragment specifier is changing in Rust 2021, which may affect this macro\n macro_rules! baz { ($x:pat2015 | $y:pat2015) => {} } // should be ok\n macro_rules! qux { ($x:pat2015 | $y:pat) => {} } // should be ok\n-macro_rules! ogg { ($x:pat2015 | $y:pat2015) => {} } //~ ERROR the meaning of the pat fragment specific is changing in Rust 2021, which may affect this macro\n+macro_rules! ogg { ($x:pat2015 | $y:pat2015) => {} } //~ ERROR the meaning of the `pat` fragment specifier is changing in Rust 2021, which may affect this macro\n macro_rules! match_any {\n-    ( $expr:expr , $( $( $pat:pat2015 )|+ => $expr_arm:expr ),+ ) => { //~ ERROR the meaning of the pat fragment specific is changing in Rust 2021, which may affect this macro\n+    ( $expr:expr , $( $( $pat:pat2015 )|+ => $expr_arm:expr ),+ ) => { //~ ERROR the meaning of the `pat` fragment specifier is changing in Rust 2021, which may affect this macro\n         match $expr {\n             $(\n                 $( $pat => $expr_arm, )+"}, {"sha": "023abae36d06bc8daea5ff04d2434e9a8936259c", "filename": "src/test/ui/macros/macro-or-patterns-back-compat.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/aa987c2f57d5604d5dd3a7db5031f021dc8418a6/src%2Ftest%2Fui%2Fmacros%2Fmacro-or-patterns-back-compat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa987c2f57d5604d5dd3a7db5031f021dc8418a6/src%2Ftest%2Fui%2Fmacros%2Fmacro-or-patterns-back-compat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-or-patterns-back-compat.rs?ref=aa987c2f57d5604d5dd3a7db5031f021dc8418a6", "patch": "@@ -4,13 +4,13 @@\n #![feature(edition_macro_pats)]\n #![deny(or_patterns_back_compat)]\n #![allow(unused_macros)]\n-macro_rules! foo { ($x:pat | $y:pat) => {} } //~ ERROR the meaning of the pat fragment specific is changing in Rust 2021, which may affect this macro\n-macro_rules! bar { ($($x:pat)+ | $($y:pat)+) => {} } //~ ERROR the meaning of the pat fragment specific is changing in Rust 2021, which may affect this macro\n+macro_rules! foo { ($x:pat | $y:pat) => {} } //~ ERROR the meaning of the `pat` fragment specifier is changing in Rust 2021, which may affect this macro\n+macro_rules! bar { ($($x:pat)+ | $($y:pat)+) => {} } //~ ERROR the meaning of the `pat` fragment specifier is changing in Rust 2021, which may affect this macro\n macro_rules! baz { ($x:pat2015 | $y:pat2015) => {} } // should be ok\n macro_rules! qux { ($x:pat2015 | $y:pat) => {} } // should be ok\n-macro_rules! ogg { ($x:pat | $y:pat2015) => {} } //~ ERROR the meaning of the pat fragment specific is changing in Rust 2021, which may affect this macro\n+macro_rules! ogg { ($x:pat | $y:pat2015) => {} } //~ ERROR the meaning of the `pat` fragment specifier is changing in Rust 2021, which may affect this macro\n macro_rules! match_any {\n-    ( $expr:expr , $( $( $pat:pat )|+ => $expr_arm:expr ),+ ) => { //~ ERROR the meaning of the pat fragment specific is changing in Rust 2021, which may affect this macro\n+    ( $expr:expr , $( $( $pat:pat )|+ => $expr_arm:expr ),+ ) => { //~ ERROR the meaning of the `pat` fragment specifier is changing in Rust 2021, which may affect this macro\n         match $expr {\n             $(\n                 $( $pat => $expr_arm, )+"}, {"sha": "29bbd696033c284356e1c1beb728791ebb3a28b2", "filename": "src/test/ui/macros/macro-or-patterns-back-compat.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/aa987c2f57d5604d5dd3a7db5031f021dc8418a6/src%2Ftest%2Fui%2Fmacros%2Fmacro-or-patterns-back-compat.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aa987c2f57d5604d5dd3a7db5031f021dc8418a6/src%2Ftest%2Fui%2Fmacros%2Fmacro-or-patterns-back-compat.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-or-patterns-back-compat.stderr?ref=aa987c2f57d5604d5dd3a7db5031f021dc8418a6", "patch": "@@ -1,4 +1,4 @@\n-error: the meaning of the pat fragment specific is changing in Rust 2021, which may affect this macro\n+error: the meaning of the `pat` fragment specifier is changing in Rust 2021, which may affect this macro\n   --> $DIR/macro-or-patterns-back-compat.rs:7:21\n    |\n LL | macro_rules! foo { ($x:pat | $y:pat) => {} }\n@@ -10,19 +10,19 @@ note: the lint level is defined here\n LL | #![deny(or_patterns_back_compat)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: the meaning of the pat fragment specific is changing in Rust 2021, which may affect this macro\n+error: the meaning of the `pat` fragment specifier is changing in Rust 2021, which may affect this macro\n   --> $DIR/macro-or-patterns-back-compat.rs:8:23\n    |\n LL | macro_rules! bar { ($($x:pat)+ | $($y:pat)+) => {} }\n    |                       ^^^^^^ help: use pat2015 to preserve semantics: `$x:pat2015`\n \n-error: the meaning of the pat fragment specific is changing in Rust 2021, which may affect this macro\n+error: the meaning of the `pat` fragment specifier is changing in Rust 2021, which may affect this macro\n   --> $DIR/macro-or-patterns-back-compat.rs:11:21\n    |\n LL | macro_rules! ogg { ($x:pat | $y:pat2015) => {} }\n    |                     ^^^^^^ help: use pat2015 to preserve semantics: `$x:pat2015`\n \n-error: the meaning of the pat fragment specific is changing in Rust 2021, which may affect this macro\n+error: the meaning of the `pat` fragment specifier is changing in Rust 2021, which may affect this macro\n   --> $DIR/macro-or-patterns-back-compat.rs:13:26\n    |\n LL |     ( $expr:expr , $( $( $pat:pat )|+ => $expr_arm:expr ),+ ) => {"}]}