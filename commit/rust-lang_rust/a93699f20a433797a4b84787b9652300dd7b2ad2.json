{"sha": "a93699f20a433797a4b84787b9652300dd7b2ad2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE5MzY5OWYyMGE0MzM3OTdhNGI4NDc4N2I5NjUyMzAwZGQ3YjJhZDI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-06-03T08:02:39Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-06-03T08:02:39Z"}, "message": "Auto merge of #85952 - JohnTitor:rollup-r00gu9q, r=JohnTitor\n\nRollup of 13 pull requests\n\nSuccessful merges:\n\n - #83362 (Stabilize `vecdeque_binary_search`)\n - #85706 (Turn off frame pointer elimination on all Apple platforms. )\n - #85724 (Fix issue 85435 by restricting Fake Read precision)\n - #85852 (Clarify meaning of MachineApplicable suggestions.)\n - #85877 (Intra doc link-ify a reference to a function)\n - #85880 (convert assertion on rvalue::threadlocalref to delay bug)\n - #85896 (Add test for forward declared const param defaults)\n - #85897 (Update I-unsound label for triagebot)\n - #85900 (Use pattern matching instead of checking lengths explicitly)\n - #85911 (Avoid a clone of output_filenames.)\n - #85926 (Update cargo)\n - #85934 (Add `Ty::is_union` predicate)\n - #85935 (Validate type of locals used as indices)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "77da3186500647039faf2268f666b865635c8c9b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/77da3186500647039faf2268f666b865635c8c9b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a93699f20a433797a4b84787b9652300dd7b2ad2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a93699f20a433797a4b84787b9652300dd7b2ad2", "html_url": "https://github.com/rust-lang/rust/commit/a93699f20a433797a4b84787b9652300dd7b2ad2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a93699f20a433797a4b84787b9652300dd7b2ad2/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "016e9b5e33ef1407bffb575ec63d24241912556d", "url": "https://api.github.com/repos/rust-lang/rust/commits/016e9b5e33ef1407bffb575ec63d24241912556d", "html_url": "https://github.com/rust-lang/rust/commit/016e9b5e33ef1407bffb575ec63d24241912556d"}, {"sha": "0cdbb7d1cc46cb6a88b7105581bcb9deba54edf9", "url": "https://api.github.com/repos/rust-lang/rust/commits/0cdbb7d1cc46cb6a88b7105581bcb9deba54edf9", "html_url": "https://github.com/rust-lang/rust/commit/0cdbb7d1cc46cb6a88b7105581bcb9deba54edf9"}], "stats": {"total": 362, "additions": 228, "deletions": 134}, "files": [{"sha": "b4f23721c7c8c501afec779e9b04d173349b0021", "filename": "Cargo.lock", "status": "modified", "additions": 22, "deletions": 3, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/a93699f20a433797a4b84787b9652300dd7b2ad2/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/a93699f20a433797a4b84787b9652300dd7b2ad2/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=a93699f20a433797a4b84787b9652300dd7b2ad2", "patch": "@@ -278,6 +278,7 @@ dependencies = [\n  \"humantime 2.0.1\",\n  \"ignore\",\n  \"im-rc\",\n+ \"itertools 0.10.0\",\n  \"jobserver\",\n  \"lazy_static\",\n  \"lazycell\",\n@@ -293,7 +294,7 @@ dependencies = [\n  \"rand 0.8.3\",\n  \"rustc-workspace-hack\",\n  \"rustfix\",\n- \"semver 0.10.0\",\n+ \"semver 1.0.1\",\n  \"serde\",\n  \"serde_ignored\",\n  \"serde_json\",\n@@ -1715,6 +1716,15 @@ dependencies = [\n  \"either\",\n ]\n \n+[[package]]\n+name = \"itertools\"\n+version = \"0.10.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"37d572918e350e82412fe766d24b15e6682fb2ed2bbe018280caa810397cb319\"\n+dependencies = [\n+ \"either\",\n+]\n+\n [[package]]\n name = \"itoa\"\n version = \"0.4.6\"\n@@ -4674,6 +4684,15 @@ dependencies = [\n  \"serde\",\n ]\n \n+[[package]]\n+name = \"semver\"\n+version = \"1.0.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"d023dabf011d5dcb5ac64e3685d97d3b0ef412911077a2851455c6098524a723\"\n+dependencies = [\n+ \"serde\",\n+]\n+\n [[package]]\n name = \"semver-parser\"\n version = \"0.7.0\"\n@@ -5033,9 +5052,9 @@ dependencies = [\n \n [[package]]\n name = \"tar\"\n-version = \"0.4.33\"\n+version = \"0.4.35\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"c0bcfbd6a598361fda270d82469fff3d65089dc33e175c9a131f7b4cd395f228\"\n+checksum = \"7d779dc6aeff029314570f666ec83f19df7280bb36ef338442cfa8c604021b80\"\n dependencies = [\n  \"filetime\",\n  \"libc\","}, {"sha": "1666754d29ac696cc57e9111b09c299f284d3d42", "filename": "compiler/rustc_interface/src/passes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a93699f20a433797a4b84787b9652300dd7b2ad2/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a93699f20a433797a4b84787b9652300dd7b2ad2/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs?ref=a93699f20a433797a4b84787b9652300dd7b2ad2", "patch": "@@ -799,7 +799,7 @@ pub fn create_global_ctxt<'tcx>(\n                 query_result_on_disk_cache,\n                 queries.as_dyn(),\n                 &crate_name,\n-                &outputs,\n+                outputs,\n             )\n         })\n     });"}, {"sha": "319adf42cf1ed2aee243a3d8f2ef2a1803a3344a", "filename": "compiler/rustc_lint/src/types.rs", "status": "modified", "additions": 7, "deletions": 19, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/a93699f20a433797a4b84787b9652300dd7b2ad2/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a93699f20a433797a4b84787b9652300dd7b2ad2/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs?ref=a93699f20a433797a4b84787b9652300dd7b2ad2", "patch": "@@ -5,15 +5,14 @@ use rustc_data_structures::fx::FxHashSet;\n use rustc_errors::Applicability;\n use rustc_hir as hir;\n use rustc_hir::{is_range_literal, ExprKind, Node};\n-use rustc_index::vec::Idx;\n use rustc_middle::ty::layout::{IntegerExt, SizeSkeleton};\n use rustc_middle::ty::subst::SubstsRef;\n use rustc_middle::ty::{self, AdtKind, Ty, TyCtxt, TypeFoldable};\n use rustc_span::source_map;\n use rustc_span::symbol::sym;\n use rustc_span::{Span, DUMMY_SP};\n use rustc_target::abi::Abi;\n-use rustc_target::abi::{Integer, LayoutOf, TagEncoding, VariantIdx, Variants};\n+use rustc_target::abi::{Integer, LayoutOf, TagEncoding, Variants};\n use rustc_target::spec::abi::Abi as SpecAbi;\n \n use std::cmp;\n@@ -783,25 +782,14 @@ crate fn repr_nullable_ptr<'tcx>(\n ) -> Option<Ty<'tcx>> {\n     debug!(\"is_repr_nullable_ptr(cx, ty = {:?})\", ty);\n     if let ty::Adt(ty_def, substs) = ty.kind() {\n-        if ty_def.variants.len() != 2 {\n-            return None;\n-        }\n-\n-        let get_variant_fields = |index| &ty_def.variants[VariantIdx::new(index)].fields;\n-        let variant_fields = [get_variant_fields(0), get_variant_fields(1)];\n-        let fields = if variant_fields[0].is_empty() {\n-            &variant_fields[1]\n-        } else if variant_fields[1].is_empty() {\n-            &variant_fields[0]\n-        } else {\n-            return None;\n+        let field_ty = match &ty_def.variants.raw[..] {\n+            [var_one, var_two] => match (&var_one.fields[..], &var_two.fields[..]) {\n+                ([], [field]) | ([field], []) => field.ty(cx.tcx, substs),\n+                _ => return None,\n+            },\n+            _ => return None,\n         };\n \n-        if fields.len() != 1 {\n-            return None;\n-        }\n-\n-        let field_ty = fields[0].ty(cx.tcx, substs);\n         if !ty_is_known_nonnull(cx, field_ty, ckind) {\n             return None;\n         }"}, {"sha": "f1c4e5fb4a368ba1e5a7cdd596155d21157895aa", "filename": "compiler/rustc_lint_defs/src/lib.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a93699f20a433797a4b84787b9652300dd7b2ad2/compiler%2Frustc_lint_defs%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a93699f20a433797a4b84787b9652300dd7b2ad2/compiler%2Frustc_lint_defs%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint_defs%2Fsrc%2Flib.rs?ref=a93699f20a433797a4b84787b9652300dd7b2ad2", "patch": "@@ -25,7 +25,11 @@ macro_rules! pluralize {\n /// before applying the suggestion.\n #[derive(Copy, Clone, Debug, PartialEq, Hash, Encodable, Decodable)]\n pub enum Applicability {\n-    /// The suggestion is definitely what the user intended. This suggestion should be\n+    /// The suggestion is definitely what the user intended, or maintains the exact meaning of the code.\n+    /// This suggestion should be automatically applied.\n+    ///\n+    /// In case of multiple `MachineApplicable` suggestions (whether as part of\n+    /// the same `multipart_suggestion` or not), all of them should be\n     /// automatically applied.\n     MachineApplicable,\n "}, {"sha": "970e669c16f7024fc9cea806d567855c4f0001c6", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a93699f20a433797a4b84787b9652300dd7b2ad2/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a93699f20a433797a4b84787b9652300dd7b2ad2/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=a93699f20a433797a4b84787b9652300dd7b2ad2", "patch": "@@ -1135,7 +1135,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         on_disk_cache: Option<query::OnDiskCache<'tcx>>,\n         queries: &'tcx dyn query::QueryEngine<'tcx>,\n         crate_name: &str,\n-        output_filenames: &OutputFilenames,\n+        output_filenames: OutputFilenames,\n     ) -> GlobalCtxt<'tcx> {\n         let data_layout = TargetDataLayout::parse(&s.target).unwrap_or_else(|err| {\n             s.fatal(&err);\n@@ -1179,7 +1179,7 @@ impl<'tcx> TyCtxt<'tcx> {\n             stability_interner: Default::default(),\n             const_stability_interner: Default::default(),\n             alloc_map: Lock::new(interpret::AllocMap::new()),\n-            output_filenames: Arc::new(output_filenames.clone()),\n+            output_filenames: Arc::new(output_filenames),\n             main_def: resolutions.main_def,\n         }\n     }"}, {"sha": "012d9bd82c816538793af066b3b1c2c229ad9cf0", "filename": "compiler/rustc_middle/src/ty/sty.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a93699f20a433797a4b84787b9652300dd7b2ad2/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a93699f20a433797a4b84787b9652300dd7b2ad2/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs?ref=a93699f20a433797a4b84787b9652300dd7b2ad2", "patch": "@@ -1837,10 +1837,12 @@ impl<'tcx> TyS<'tcx> {\n \n     #[inline]\n     pub fn is_enum(&self) -> bool {\n-        match self.kind() {\n-            Adt(adt_def, _) => adt_def.is_enum(),\n-            _ => false,\n-        }\n+        matches!(self.kind(), Adt(adt_def, _) if adt_def.is_enum())\n+    }\n+\n+    #[inline]\n+    pub fn is_union(&self) -> bool {\n+        matches!(self.kind(), Adt(adt_def, _) if adt_def.is_union())\n     }\n \n     #[inline]"}, {"sha": "36eb8a4baa8308f1f7d13a8c81c8f64cb79d57d2", "filename": "compiler/rustc_mir/src/borrow_check/mod.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a93699f20a433797a4b84787b9652300dd7b2ad2/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a93699f20a433797a4b84787b9652300dd7b2ad2/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fmod.rs?ref=a93699f20a433797a4b84787b9652300dd7b2ad2", "patch": "@@ -1965,13 +1965,11 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                 // no move out from an earlier location) then this is an attempt at initialization\n                 // of the union - we should error in that case.\n                 let tcx = this.infcx.tcx;\n-                if let ty::Adt(def, _) = base.ty(this.body(), tcx).ty.kind() {\n-                    if def.is_union() {\n-                        if this.move_data.path_map[mpi].iter().any(|moi| {\n-                            this.move_data.moves[*moi].source.is_predecessor_of(location, this.body)\n-                        }) {\n-                            return;\n-                        }\n+                if base.ty(this.body(), tcx).ty.is_union() {\n+                    if this.move_data.path_map[mpi].iter().any(|moi| {\n+                        this.move_data.moves[*moi].source.is_predecessor_of(location, this.body)\n+                    }) {\n+                        return;\n                     }\n                 }\n "}, {"sha": "d21550a8e1af60b5bb0564eae081fedc315ea0b8", "filename": "compiler/rustc_mir/src/borrow_check/places_conflict.rs", "status": "modified", "additions": 8, "deletions": 11, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/a93699f20a433797a4b84787b9652300dd7b2ad2/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fplaces_conflict.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a93699f20a433797a4b84787b9652300dd7b2ad2/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fplaces_conflict.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fplaces_conflict.rs?ref=a93699f20a433797a4b84787b9652300dd7b2ad2", "patch": "@@ -331,17 +331,14 @@ fn place_projection_conflict<'tcx>(\n                 Overlap::EqualOrDisjoint\n             } else {\n                 let ty = Place::ty_from(pi1_local, pi1_proj_base, body, tcx).ty;\n-                match ty.kind() {\n-                    ty::Adt(def, _) if def.is_union() => {\n-                        // Different fields of a union, we are basically stuck.\n-                        debug!(\"place_element_conflict: STUCK-UNION\");\n-                        Overlap::Arbitrary\n-                    }\n-                    _ => {\n-                        // Different fields of a struct (`a.x` vs. `a.y`). Disjoint!\n-                        debug!(\"place_element_conflict: DISJOINT-FIELD\");\n-                        Overlap::Disjoint\n-                    }\n+                if ty.is_union() {\n+                    // Different fields of a union, we are basically stuck.\n+                    debug!(\"place_element_conflict: STUCK-UNION\");\n+                    Overlap::Arbitrary\n+                } else {\n+                    // Different fields of a struct (`a.x` vs. `a.y`). Disjoint!\n+                    debug!(\"place_element_conflict: DISJOINT-FIELD\");\n+                    Overlap::Disjoint\n                 }\n             }\n         }"}, {"sha": "cea465ea1ed9dc423045c5a80d5ffed630310173", "filename": "compiler/rustc_mir/src/dataflow/move_paths/builder.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a93699f20a433797a4b84787b9652300dd7b2ad2/compiler%2Frustc_mir%2Fsrc%2Fdataflow%2Fmove_paths%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a93699f20a433797a4b84787b9652300dd7b2ad2/compiler%2Frustc_mir%2Fsrc%2Fdataflow%2Fmove_paths%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fdataflow%2Fmove_paths%2Fbuilder.rs?ref=a93699f20a433797a4b84787b9652300dd7b2ad2", "patch": "@@ -519,10 +519,8 @@ impl<'b, 'a, 'tcx> Gatherer<'b, 'a, 'tcx> {\n         // Check if we are assigning into a field of a union, if so, lookup the place\n         // of the union so it is marked as initialized again.\n         if let Some((place_base, ProjectionElem::Field(_, _))) = place.last_projection() {\n-            if let ty::Adt(def, _) = place_base.ty(self.builder.body, self.builder.tcx).ty.kind() {\n-                if def.is_union() {\n-                    place = place_base;\n-                }\n+            if place_base.ty(self.builder.body, self.builder.tcx).ty.is_union() {\n+                place = place_base;\n             }\n         }\n "}, {"sha": "ac3420ad339500dd098497311e65ddb6885d28d9", "filename": "compiler/rustc_mir/src/transform/check_consts/validation.rs", "status": "modified", "additions": 5, "deletions": 10, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/a93699f20a433797a4b84787b9652300dd7b2ad2/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a93699f20a433797a4b84787b9652300dd7b2ad2/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fvalidation.rs?ref=a93699f20a433797a4b84787b9652300dd7b2ad2", "patch": "@@ -356,10 +356,9 @@ impl Validator<'mir, 'tcx> {\n     }\n \n     fn check_static(&mut self, def_id: DefId, span: Span) {\n-        assert!(\n-            !self.tcx.is_thread_local_static(def_id),\n-            \"tls access is checked in `Rvalue::ThreadLocalRef\"\n-        );\n+        if self.tcx.is_thread_local_static(def_id) {\n+            self.tcx.sess.delay_span_bug(span, \"tls access is checked in `Rvalue::ThreadLocalRef\");\n+        }\n         self.check_op_spanned(ops::StaticAccess, span)\n     }\n \n@@ -753,12 +752,8 @@ impl Visitor<'tcx> for Validator<'mir, 'tcx> {\n             | ProjectionElem::Field(..)\n             | ProjectionElem::Index(_) => {\n                 let base_ty = Place::ty_from(place_local, proj_base, self.body, self.tcx).ty;\n-                match base_ty.ty_adt_def() {\n-                    Some(def) if def.is_union() => {\n-                        self.check_op(ops::UnionAccess);\n-                    }\n-\n-                    _ => {}\n+                if base_ty.is_union() {\n+                    self.check_op(ops::UnionAccess);\n                 }\n             }\n         }"}, {"sha": "103ddda1a1d262c45069da1fab78d78404a7776b", "filename": "compiler/rustc_mir/src/transform/check_unsafety.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a93699f20a433797a4b84787b9652300dd7b2ad2/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a93699f20a433797a4b84787b9652300dd7b2ad2/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_unsafety.rs?ref=a93699f20a433797a4b84787b9652300dd7b2ad2", "patch": "@@ -221,7 +221,7 @@ impl<'a, 'tcx> Visitor<'tcx> for UnsafetyChecker<'a, 'tcx> {\n             }\n \n             let base_ty = base.ty(self.body, self.tcx).ty;\n-            if base_ty.ty_adt_def().map_or(false, |adt| adt.is_union()) {\n+            if base_ty.is_union() {\n                 // If we did not hit a `Deref` yet and the overall place use is an assignment, the\n                 // rules are different.\n                 let assign_to_field = !saw_deref"}, {"sha": "4f5a467a6ee624cd39a1509aa6f9064c89e90aeb", "filename": "compiler/rustc_mir/src/transform/dest_prop.rs", "status": "modified", "additions": 3, "deletions": 12, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/a93699f20a433797a4b84787b9652300dd7b2ad2/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fdest_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a93699f20a433797a4b84787b9652300dd7b2ad2/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fdest_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fdest_prop.rs?ref=a93699f20a433797a4b84787b9652300dd7b2ad2", "patch": "@@ -114,7 +114,7 @@ use rustc_middle::mir::{\n     traversal, Body, InlineAsmOperand, Local, LocalKind, Location, Operand, Place, PlaceElem,\n     Rvalue, Statement, StatementKind, Terminator, TerminatorKind,\n };\n-use rustc_middle::ty::{self, Ty, TyCtxt};\n+use rustc_middle::ty::TyCtxt;\n \n // Empirical measurements have resulted in some observations:\n // - Running on a body with a single block and 500 locals takes barely any time\n@@ -910,17 +910,8 @@ impl<'a, 'tcx> Visitor<'tcx> for FindAssignments<'a, 'tcx> {\n \n             // Handle the \"subtle case\" described above by rejecting any `dest` that is or\n             // projects through a union.\n-            let is_union = |ty: Ty<'_>| {\n-                if let ty::Adt(def, _) = ty.kind() {\n-                    if def.is_union() {\n-                        return true;\n-                    }\n-                }\n-\n-                false\n-            };\n             let mut place_ty = PlaceTy::from_ty(self.body.local_decls[dest.local].ty);\n-            if is_union(place_ty.ty) {\n+            if place_ty.ty.is_union() {\n                 return;\n             }\n             for elem in dest.projection {\n@@ -930,7 +921,7 @@ impl<'a, 'tcx> Visitor<'tcx> for FindAssignments<'a, 'tcx> {\n                 }\n \n                 place_ty = place_ty.projection_ty(self.tcx, elem);\n-                if is_union(place_ty.ty) {\n+                if place_ty.ty.is_union() {\n                     return;\n                 }\n             }"}, {"sha": "78e84419c62cde8cf85337cb23d6b42725c1d7ba", "filename": "compiler/rustc_mir/src/transform/promote_consts.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a93699f20a433797a4b84787b9652300dd7b2ad2/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fpromote_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a93699f20a433797a4b84787b9652300dd7b2ad2/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fpromote_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fpromote_consts.rs?ref=a93699f20a433797a4b84787b9652300dd7b2ad2", "patch": "@@ -415,11 +415,9 @@ impl<'tcx> Validator<'_, 'tcx> {\n \n                     ProjectionElem::Field(..) => {\n                         let base_ty = place_base.ty(self.body, self.tcx).ty;\n-                        if let Some(def) = base_ty.ty_adt_def() {\n+                        if base_ty.is_union() {\n                             // No promotion of union field accesses.\n-                            if def.is_union() {\n-                                return Err(Unpromotable);\n-                            }\n+                            return Err(Unpromotable);\n                         }\n                     }\n                 }"}, {"sha": "a0f225e6de6014633decdd281cbfa921106ce864", "filename": "compiler/rustc_mir/src/transform/remove_zsts.rs", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a93699f20a433797a4b84787b9652300dd7b2ad2/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fremove_zsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a93699f20a433797a4b84787b9652300dd7b2ad2/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fremove_zsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fremove_zsts.rs?ref=a93699f20a433797a4b84787b9652300dd7b2ad2", "patch": "@@ -69,21 +69,14 @@ fn involves_a_union<'tcx>(\n     tcx: TyCtxt<'tcx>,\n ) -> bool {\n     let mut place_ty = PlaceTy::from_ty(local_decls[place.local].ty);\n-    if is_union(place_ty.ty) {\n+    if place_ty.ty.is_union() {\n         return true;\n     }\n     for elem in place.projection {\n         place_ty = place_ty.projection_ty(tcx, elem);\n-        if is_union(place_ty.ty) {\n+        if place_ty.ty.is_union() {\n             return true;\n         }\n     }\n     return false;\n }\n-\n-fn is_union(ty: Ty<'_>) -> bool {\n-    match ty.kind() {\n-        ty::Adt(def, _) if def.is_union() => true,\n-        _ => false,\n-    }\n-}"}, {"sha": "835789069bb2e666c5b2a62293a7763298bb6343", "filename": "compiler/rustc_mir/src/transform/validate.rs", "status": "modified", "additions": 20, "deletions": 2, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/a93699f20a433797a4b84787b9652300dd7b2ad2/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fvalidate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a93699f20a433797a4b84787b9652300dd7b2ad2/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fvalidate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fvalidate.rs?ref=a93699f20a433797a4b84787b9652300dd7b2ad2", "patch": "@@ -11,8 +11,9 @@ use rustc_middle::mir::interpret::Scalar;\n use rustc_middle::mir::traversal;\n use rustc_middle::mir::visit::{PlaceContext, Visitor};\n use rustc_middle::mir::{\n-    AggregateKind, BasicBlock, Body, BorrowKind, Local, Location, MirPhase, Operand, PlaceRef,\n-    Rvalue, SourceScope, Statement, StatementKind, Terminator, TerminatorKind,\n+    AggregateKind, BasicBlock, Body, BorrowKind, Local, Location, MirPhase, Operand, PlaceElem,\n+    PlaceRef, ProjectionElem, Rvalue, SourceScope, Statement, StatementKind, Terminator,\n+    TerminatorKind,\n };\n use rustc_middle::ty::fold::BottomUpFolder;\n use rustc_middle::ty::{self, ParamEnv, Ty, TyCtxt, TypeFoldable};\n@@ -217,6 +218,23 @@ impl<'a, 'tcx> Visitor<'tcx> for TypeChecker<'a, 'tcx> {\n         self.super_operand(operand, location);\n     }\n \n+    fn visit_projection_elem(\n+        &mut self,\n+        local: Local,\n+        proj_base: &[PlaceElem<'tcx>],\n+        elem: PlaceElem<'tcx>,\n+        context: PlaceContext,\n+        location: Location,\n+    ) {\n+        if let ProjectionElem::Index(index) = elem {\n+            let index_ty = self.body.local_decls[index].ty;\n+            if index_ty != self.tcx.types.usize {\n+                self.fail(location, format!(\"bad index ({:?} != usize)\", index_ty))\n+            }\n+        }\n+        self.super_projection_elem(local, proj_base, elem, context, location);\n+    }\n+\n     fn visit_statement(&mut self, statement: &Statement<'tcx>, location: Location) {\n         match &statement.kind {\n             StatementKind::Assign(box (dest, rvalue)) => {"}, {"sha": "69786c14ee8dd390702aa59a20275fbac82d34e2", "filename": "compiler/rustc_mir_build/src/build/expr/as_rvalue.rs", "status": "modified", "additions": 15, "deletions": 19, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/a93699f20a433797a4b84787b9652300dd7b2ad2/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_rvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a93699f20a433797a4b84787b9652300dd7b2ad2/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_rvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_rvalue.rs?ref=a93699f20a433797a4b84787b9652300dd7b2ad2", "patch": "@@ -186,25 +186,21 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 // };\n                 // ```\n                 //\n-                // FIXME(RFC2229, rust#85435): Remove feature gate once diagnostics are\n-                // improved and unsafe checking works properly in closure bodies again.\n-                if this.tcx.features().capture_disjoint_fields {\n-                    for (thir_place, cause, hir_id) in fake_reads.into_iter() {\n-                        let place_builder =\n-                            unpack!(block = this.as_place_builder(block, &this.thir[*thir_place]));\n-\n-                        if let Ok(place_builder_resolved) =\n-                            place_builder.try_upvars_resolved(this.tcx, this.typeck_results)\n-                        {\n-                            let mir_place =\n-                                place_builder_resolved.into_place(this.tcx, this.typeck_results);\n-                            this.cfg.push_fake_read(\n-                                block,\n-                                this.source_info(this.tcx.hir().span(*hir_id)),\n-                                *cause,\n-                                mir_place,\n-                            );\n-                        }\n+                for (thir_place, cause, hir_id) in fake_reads.into_iter() {\n+                    let place_builder =\n+                        unpack!(block = this.as_place_builder(block, &this.thir[*thir_place]));\n+\n+                    if let Ok(place_builder_resolved) =\n+                        place_builder.try_upvars_resolved(this.tcx, this.typeck_results)\n+                    {\n+                        let mir_place =\n+                            place_builder_resolved.into_place(this.tcx, this.typeck_results);\n+                        this.cfg.push_fake_read(\n+                            block,\n+                            this.source_info(this.tcx.hir().span(*hir_id)),\n+                            *cause,\n+                            mir_place,\n+                        );\n                     }\n                 }\n "}, {"sha": "03d94f43897ba19fcd472316db990b0b0ec34f7b", "filename": "compiler/rustc_resolve/src/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a93699f20a433797a4b84787b9652300dd7b2ad2/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a93699f20a433797a4b84787b9652300dd7b2ad2/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs?ref=a93699f20a433797a4b84787b9652300dd7b2ad2", "patch": "@@ -450,7 +450,7 @@ impl<'a> Resolver<'a> {\n                 err.span_label(shadowed_binding_span, msg);\n                 err\n             }\n-            ResolutionError::ForwardDeclaredTyParam => {\n+            ResolutionError::ForwardDeclaredGenericParam => {\n                 let mut err = struct_span_err!(\n                     self.session,\n                     span,"}, {"sha": "41935e7d6dfd59d0b434592724a0c8262c77b94a", "filename": "compiler/rustc_resolve/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a93699f20a433797a4b84787b9652300dd7b2ad2/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a93699f20a433797a4b84787b9652300dd7b2ad2/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flib.rs?ref=a93699f20a433797a4b84787b9652300dd7b2ad2", "patch": "@@ -242,7 +242,7 @@ enum ResolutionError<'a> {\n         shadowed_binding_span: Span,\n     },\n     /// Error E0128: generic parameters with a default cannot use forward-declared identifiers.\n-    ForwardDeclaredTyParam, // FIXME(const_generics_defaults)\n+    ForwardDeclaredGenericParam,\n     /// ERROR E0770: the type of const parameters must not depend on other generic parameters.\n     ParamInTyOfConstParam(Symbol),\n     /// generic parameters must not be used inside const evaluations.\n@@ -2608,7 +2608,7 @@ impl<'a> Resolver<'a> {\n                 let res_error = if rib_ident.name == kw::SelfUpper {\n                     ResolutionError::SelfInTyParamDefault\n                 } else {\n-                    ResolutionError::ForwardDeclaredTyParam\n+                    ResolutionError::ForwardDeclaredGenericParam\n                 };\n                 self.report_error(span, res_error);\n             }"}, {"sha": "5682039b86512aa6b0f3feb98846aa78c6319bcf", "filename": "compiler/rustc_target/src/spec/aarch64_apple_ios.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a93699f20a433797a4b84787b9652300dd7b2ad2/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_apple_ios.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a93699f20a433797a4b84787b9652300dd7b2ad2/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_apple_ios.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_apple_ios.rs?ref=a93699f20a433797a4b84787b9652300dd7b2ad2", "patch": "@@ -10,7 +10,6 @@ pub fn target() -> Target {\n         arch: \"aarch64\".to_string(),\n         options: TargetOptions {\n             features: \"+neon,+fp-armv8,+apple-a7\".to_string(),\n-            eliminate_frame_pointer: false,\n             max_atomic_width: Some(128),\n             unsupported_abis: super::arm_base::unsupported_abis(),\n             forces_embed_bitcode: true,"}, {"sha": "8a832546d09526334877090c86a9e31cb87a1edc", "filename": "compiler/rustc_target/src/spec/aarch64_apple_ios_macabi.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a93699f20a433797a4b84787b9652300dd7b2ad2/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_apple_ios_macabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a93699f20a433797a4b84787b9652300dd7b2ad2/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_apple_ios_macabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_apple_ios_macabi.rs?ref=a93699f20a433797a4b84787b9652300dd7b2ad2", "patch": "@@ -10,7 +10,6 @@ pub fn target() -> Target {\n         arch: \"aarch64\".to_string(),\n         options: TargetOptions {\n             features: \"+neon,+fp-armv8,+apple-a12\".to_string(),\n-            eliminate_frame_pointer: false,\n             max_atomic_width: Some(128),\n             unsupported_abis: super::arm_base::unsupported_abis(),\n             forces_embed_bitcode: true,"}, {"sha": "2187015b627d3a19e12dde51d0f00af62bbe8381", "filename": "compiler/rustc_target/src/spec/aarch64_apple_ios_sim.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a93699f20a433797a4b84787b9652300dd7b2ad2/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_apple_ios_sim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a93699f20a433797a4b84787b9652300dd7b2ad2/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_apple_ios_sim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_apple_ios_sim.rs?ref=a93699f20a433797a4b84787b9652300dd7b2ad2", "patch": "@@ -18,7 +18,6 @@ pub fn target() -> Target {\n         arch: \"aarch64\".to_string(),\n         options: TargetOptions {\n             features: \"+neon,+fp-armv8,+apple-a7\".to_string(),\n-            eliminate_frame_pointer: false,\n             max_atomic_width: Some(128),\n             unsupported_abis: super::arm_base::unsupported_abis(),\n             forces_embed_bitcode: true,"}, {"sha": "cb6c06b371183f61bcf0e5d8b3b5bda2f2c01c2e", "filename": "compiler/rustc_target/src/spec/aarch64_apple_tvos.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a93699f20a433797a4b84787b9652300dd7b2ad2/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_apple_tvos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a93699f20a433797a4b84787b9652300dd7b2ad2/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_apple_tvos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_apple_tvos.rs?ref=a93699f20a433797a4b84787b9652300dd7b2ad2", "patch": "@@ -10,7 +10,6 @@ pub fn target() -> Target {\n         arch: \"aarch64\".to_string(),\n         options: TargetOptions {\n             features: \"+neon,+fp-armv8,+apple-a7\".to_string(),\n-            eliminate_frame_pointer: false,\n             max_atomic_width: Some(128),\n             unsupported_abis: super::arm_base::unsupported_abis(),\n             forces_embed_bitcode: true,"}, {"sha": "8530db179d9919060cfc17886d3ab2726c318ffd", "filename": "compiler/rustc_target/src/spec/apple_base.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a93699f20a433797a4b84787b9652300dd7b2ad2/compiler%2Frustc_target%2Fsrc%2Fspec%2Fapple_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a93699f20a433797a4b84787b9652300dd7b2ad2/compiler%2Frustc_target%2Fsrc%2Fspec%2Fapple_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fapple_base.rs?ref=a93699f20a433797a4b84787b9652300dd7b2ad2", "patch": "@@ -27,6 +27,7 @@ pub fn opts(os: &str) -> TargetOptions {\n         families: vec![\"unix\".to_string()],\n         is_like_osx: true,\n         dwarf_version: Some(2),\n+        eliminate_frame_pointer: false,\n         has_rpath: true,\n         dll_suffix: \".dylib\".to_string(),\n         archive_format: \"darwin\".to_string(),"}, {"sha": "e7f7bb343d0c534541dd31261b886b7a0870efe7", "filename": "compiler/rustc_target/src/spec/apple_sdk_base.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a93699f20a433797a4b84787b9652300dd7b2ad2/compiler%2Frustc_target%2Fsrc%2Fspec%2Fapple_sdk_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a93699f20a433797a4b84787b9652300dd7b2ad2/compiler%2Frustc_target%2Fsrc%2Fspec%2Fapple_sdk_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fapple_sdk_base.rs?ref=a93699f20a433797a4b84787b9652300dd7b2ad2", "patch": "@@ -44,7 +44,6 @@ pub fn opts(os: &str, arch: Arch) -> TargetOptions {\n         executables: true,\n         link_env_remove: link_env_remove(arch),\n         has_elf_tls: false,\n-        eliminate_frame_pointer: false,\n         ..super::apple_base::opts(os)\n     }\n }"}, {"sha": "652b82f1063c9c48c60d71f2f2980e47a2c750ca", "filename": "compiler/rustc_typeck/src/check/place_op.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a93699f20a433797a4b84787b9652300dd7b2ad2/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fplace_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a93699f20a433797a4b84787b9652300dd7b2ad2/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fplace_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fplace_op.rs?ref=a93699f20a433797a4b84787b9652300dd7b2ad2", "patch": "@@ -248,7 +248,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 // Clear previous flag; after a pointer indirection it does not apply any more.\n                 inside_union = false;\n             }\n-            if source.ty_adt_def().map_or(false, |adt| adt.is_union()) {\n+            if source.is_union() {\n                 inside_union = true;\n             }\n             // Fix up the autoderefs. Autorefs can only occur immediately preceding"}, {"sha": "6baa185406e207f7373f23588d010bbc40aaf16a", "filename": "compiler/rustc_typeck/src/check/upvar.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a93699f20a433797a4b84787b9652300dd7b2ad2/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a93699f20a433797a4b84787b9652300dd7b2ad2/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs?ref=a93699f20a433797a4b84787b9652300dd7b2ad2", "patch": "@@ -1588,6 +1588,11 @@ impl<'a, 'tcx> InferBorrowKind<'a, 'tcx> {\n impl<'a, 'tcx> euv::Delegate<'tcx> for InferBorrowKind<'a, 'tcx> {\n     fn fake_read(&mut self, place: Place<'tcx>, cause: FakeReadCause, diag_expr_id: hir::HirId) {\n         if let PlaceBase::Upvar(_) = place.base {\n+            // We need to restrict Fake Read precision to avoid fake reading unsafe code,\n+            // such as deref of a raw pointer.\n+            let place = restrict_capture_precision(place);\n+            let place =\n+                restrict_repr_packed_field_ref_capture(self.fcx.tcx, self.fcx.param_env, &place);\n             self.fake_reads.push((place, cause, diag_expr_id));\n         }\n     }"}, {"sha": "5d03be35e466fea7e14994ccfe7200c1d9f03c3c", "filename": "library/alloc/src/collections/vec_deque/mod.rs", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/a93699f20a433797a4b84787b9652300dd7b2ad2/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a93699f20a433797a4b84787b9652300dd7b2ad2/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fmod.rs?ref=a93699f20a433797a4b84787b9652300dd7b2ad2", "patch": "@@ -2416,7 +2416,6 @@ impl<T> VecDeque<T> {\n     /// found; the fourth could match any position in `[1, 4]`.\n     ///\n     /// ```\n-    /// #![feature(vecdeque_binary_search)]\n     /// use std::collections::VecDeque;\n     ///\n     /// let deque: VecDeque<_> = vec![0, 1, 1, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55].into();\n@@ -2432,7 +2431,6 @@ impl<T> VecDeque<T> {\n     /// sort order:\n     ///\n     /// ```\n-    /// #![feature(vecdeque_binary_search)]\n     /// use std::collections::VecDeque;\n     ///\n     /// let mut deque: VecDeque<_> = vec![0, 1, 1, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55].into();\n@@ -2441,7 +2439,7 @@ impl<T> VecDeque<T> {\n     /// deque.insert(idx, num);\n     /// assert_eq!(deque, &[0, 1, 1, 1, 1, 2, 3, 5, 8, 13, 21, 34, 42, 55]);\n     /// ```\n-    #[unstable(feature = \"vecdeque_binary_search\", issue = \"78021\")]\n+    #[stable(feature = \"vecdeque_binary_search\", since = \"1.54.0\")]\n     #[inline]\n     pub fn binary_search(&self, x: &T) -> Result<usize, usize>\n     where\n@@ -2476,7 +2474,6 @@ impl<T> VecDeque<T> {\n     /// found; the fourth could match any position in `[1, 4]`.\n     ///\n     /// ```\n-    /// #![feature(vecdeque_binary_search)]\n     /// use std::collections::VecDeque;\n     ///\n     /// let deque: VecDeque<_> = vec![0, 1, 1, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55].into();\n@@ -2487,7 +2484,7 @@ impl<T> VecDeque<T> {\n     /// let r = deque.binary_search_by(|x| x.cmp(&1));\n     /// assert!(matches!(r, Ok(1..=4)));\n     /// ```\n-    #[unstable(feature = \"vecdeque_binary_search\", issue = \"78021\")]\n+    #[stable(feature = \"vecdeque_binary_search\", since = \"1.54.0\")]\n     pub fn binary_search_by<'a, F>(&'a self, mut f: F) -> Result<usize, usize>\n     where\n         F: FnMut(&'a T) -> Ordering,\n@@ -2530,7 +2527,6 @@ impl<T> VecDeque<T> {\n     /// fourth could match any position in `[1, 4]`.\n     ///\n     /// ```\n-    /// #![feature(vecdeque_binary_search)]\n     /// use std::collections::VecDeque;\n     ///\n     /// let deque: VecDeque<_> = vec![(0, 0), (2, 1), (4, 1), (5, 1),\n@@ -2543,7 +2539,7 @@ impl<T> VecDeque<T> {\n     /// let r = deque.binary_search_by_key(&1, |&(a, b)| b);\n     /// assert!(matches!(r, Ok(1..=4)));\n     /// ```\n-    #[unstable(feature = \"vecdeque_binary_search\", issue = \"78021\")]\n+    #[stable(feature = \"vecdeque_binary_search\", since = \"1.54.0\")]\n     #[inline]\n     pub fn binary_search_by_key<'a, B, F>(&'a self, b: &B, mut f: F) -> Result<usize, usize>\n     where\n@@ -2574,7 +2570,6 @@ impl<T> VecDeque<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(vecdeque_binary_search)]\n     /// use std::collections::VecDeque;\n     ///\n     /// let deque: VecDeque<_> = vec![1, 2, 3, 3, 5, 6, 7].into();\n@@ -2584,7 +2579,7 @@ impl<T> VecDeque<T> {\n     /// assert!(deque.iter().take(i).all(|&x| x < 5));\n     /// assert!(deque.iter().skip(i).all(|&x| !(x < 5)));\n     /// ```\n-    #[unstable(feature = \"vecdeque_binary_search\", issue = \"78021\")]\n+    #[stable(feature = \"vecdeque_binary_search\", since = \"1.54.0\")]\n     pub fn partition_point<P>(&self, mut pred: P) -> usize\n     where\n         P: FnMut(&T) -> bool,"}, {"sha": "3143afa269dde08ce98aebb149ec6bd6504c4c2e", "filename": "library/alloc/tests/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a93699f20a433797a4b84787b9652300dd7b2ad2/library%2Falloc%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a93699f20a433797a4b84787b9652300dd7b2ad2/library%2Falloc%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Ftests%2Flib.rs?ref=a93699f20a433797a4b84787b9652300dd7b2ad2", "patch": "@@ -17,7 +17,6 @@\n #![feature(binary_heap_as_slice)]\n #![feature(inplace_iteration)]\n #![feature(iter_map_while)]\n-#![feature(vecdeque_binary_search)]\n #![feature(slice_group_by)]\n #![feature(slice_partition_dedup)]\n #![feature(vec_spare_capacity)]"}, {"sha": "c47a2e8b05c4bed0b75c2ffca61ba342d8073feb", "filename": "library/core/src/num/f32.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a93699f20a433797a4b84787b9652300dd7b2ad2/library%2Fcore%2Fsrc%2Fnum%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a93699f20a433797a4b84787b9652300dd7b2ad2/library%2Fcore%2Fsrc%2Fnum%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Ff32.rs?ref=a93699f20a433797a4b84787b9652300dd7b2ad2", "patch": "@@ -727,8 +727,8 @@ impl f32 {\n     ///\n     /// This is currently identical to `transmute::<f32, u32>(self)` on all platforms.\n     ///\n-    /// See `from_bits` for some discussion of the portability of this operation\n-    /// (there are almost no issues).\n+    /// See [`from_bits`](Self::from_bits) for some discussion of the\n+    /// portability of this operation (there are almost no issues).\n     ///\n     /// Note that this function is distinct from `as` casting, which attempts to\n     /// preserve the *numeric* value, and not the bitwise value."}, {"sha": "cfcc08b9addeb9b26fa07152161ec8549b744b11", "filename": "library/core/src/num/f64.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a93699f20a433797a4b84787b9652300dd7b2ad2/library%2Fcore%2Fsrc%2Fnum%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a93699f20a433797a4b84787b9652300dd7b2ad2/library%2Fcore%2Fsrc%2Fnum%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Ff64.rs?ref=a93699f20a433797a4b84787b9652300dd7b2ad2", "patch": "@@ -741,8 +741,8 @@ impl f64 {\n     ///\n     /// This is currently identical to `transmute::<f64, u64>(self)` on all platforms.\n     ///\n-    /// See `from_bits` for some discussion of the portability of this operation\n-    /// (there are almost no issues).\n+    /// See [`from_bits`](Self::from_bits) for some discussion of the\n+    /// portability of this operation (there are almost no issues).\n     ///\n     /// Note that this function is distinct from `as` casting, which attempts to\n     /// preserve the *numeric* value, and not the bitwise value."}, {"sha": "09fc105320e449fa30a1df7e2361a75746af66a7", "filename": "src/test/ui/const-generics/defaults/forward-declared.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/a93699f20a433797a4b84787b9652300dd7b2ad2/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fforward-declared.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a93699f20a433797a4b84787b9652300dd7b2ad2/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fforward-declared.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fforward-declared.rs?ref=a93699f20a433797a4b84787b9652300dd7b2ad2", "patch": "@@ -0,0 +1,15 @@\n+#![feature(const_generics_defaults)]\n+\n+struct Foo<const N: usize = M, const M: usize = 10>;\n+//~^ ERROR generic parameters with a default cannot use forward declared identifiers\n+\n+enum Bar<const N: usize = M, const M: usize = 10> {}\n+//~^ ERROR generic parameters with a default cannot use forward declared identifiers\n+\n+struct Foo2<const N: usize = N>;\n+//~^ ERROR generic parameters with a default cannot use forward declared identifiers\n+\n+enum Bar2<const N: usize = N> {}\n+//~^ ERROR generic parameters with a default cannot use forward declared identifiers\n+\n+fn main() {}"}, {"sha": "a6c4a7ae4ef2dcae75547b0f55353ccebefd78e2", "filename": "src/test/ui/const-generics/defaults/forward-declared.stderr", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/a93699f20a433797a4b84787b9652300dd7b2ad2/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fforward-declared.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a93699f20a433797a4b84787b9652300dd7b2ad2/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fforward-declared.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fforward-declared.stderr?ref=a93699f20a433797a4b84787b9652300dd7b2ad2", "patch": "@@ -0,0 +1,27 @@\n+error[E0128]: generic parameters with a default cannot use forward declared identifiers\n+  --> $DIR/forward-declared.rs:3:29\n+   |\n+LL | struct Foo<const N: usize = M, const M: usize = 10>;\n+   |                             ^ defaulted generic parameters cannot be forward declared\n+\n+error[E0128]: generic parameters with a default cannot use forward declared identifiers\n+  --> $DIR/forward-declared.rs:6:27\n+   |\n+LL | enum Bar<const N: usize = M, const M: usize = 10> {}\n+   |                           ^ defaulted generic parameters cannot be forward declared\n+\n+error[E0128]: generic parameters with a default cannot use forward declared identifiers\n+  --> $DIR/forward-declared.rs:9:30\n+   |\n+LL | struct Foo2<const N: usize = N>;\n+   |                              ^ defaulted generic parameters cannot be forward declared\n+\n+error[E0128]: generic parameters with a default cannot use forward declared identifiers\n+  --> $DIR/forward-declared.rs:12:28\n+   |\n+LL | enum Bar2<const N: usize = N> {}\n+   |                            ^ defaulted generic parameters cannot be forward declared\n+\n+error: aborting due to 4 previous errors\n+\n+For more information about this error, try `rustc --explain E0128`."}, {"sha": "c7fee9e6b4c5a2f8edcef7ef624ffcaa60721d55", "filename": "src/test/ui/thread-local-static.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a93699f20a433797a4b84787b9652300dd7b2ad2/src%2Ftest%2Fui%2Fthread-local-static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a93699f20a433797a4b84787b9652300dd7b2ad2/src%2Ftest%2Fui%2Fthread-local-static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fthread-local-static.rs?ref=a93699f20a433797a4b84787b9652300dd7b2ad2", "patch": "@@ -0,0 +1,16 @@\n+// edition:2018\n+\n+#![feature(thread_local)]\n+#![feature(const_swap)]\n+#[thread_local]\n+static mut STATIC_VAR_2: [u32; 8] = [4; 8];\n+const fn g(x: &mut [u32; 8]) {\n+    //~^ ERROR mutable references are not allowed\n+    std::mem::swap(x, &mut STATIC_VAR_2)\n+    //~^ ERROR thread-local statics cannot be accessed\n+    //~| ERROR mutable references are not allowed\n+    //~| ERROR use of mutable static is unsafe\n+    //~| constant functions cannot refer to statics\n+}\n+\n+fn main() {}"}, {"sha": "08bf593a5a748d92c1058a33d55036d04c3ad879", "filename": "src/test/ui/thread-local-static.stderr", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/a93699f20a433797a4b84787b9652300dd7b2ad2/src%2Ftest%2Fui%2Fthread-local-static.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a93699f20a433797a4b84787b9652300dd7b2ad2/src%2Ftest%2Fui%2Fthread-local-static.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fthread-local-static.stderr?ref=a93699f20a433797a4b84787b9652300dd7b2ad2", "patch": "@@ -0,0 +1,44 @@\n+error[E0658]: mutable references are not allowed in constant functions\n+  --> $DIR/thread-local-static.rs:7:12\n+   |\n+LL | const fn g(x: &mut [u32; 8]) {\n+   |            ^\n+   |\n+   = note: see issue #57349 <https://github.com/rust-lang/rust/issues/57349> for more information\n+   = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable\n+\n+error[E0625]: thread-local statics cannot be accessed at compile-time\n+  --> $DIR/thread-local-static.rs:9:28\n+   |\n+LL |     std::mem::swap(x, &mut STATIC_VAR_2)\n+   |                            ^^^^^^^^^^^^\n+\n+error[E0013]: constant functions cannot refer to statics\n+  --> $DIR/thread-local-static.rs:9:28\n+   |\n+LL |     std::mem::swap(x, &mut STATIC_VAR_2)\n+   |                            ^^^^^^^^^^^^\n+   |\n+   = help: consider extracting the value of the `static` to a `const`, and referring to that\n+\n+error[E0658]: mutable references are not allowed in constant functions\n+  --> $DIR/thread-local-static.rs:9:23\n+   |\n+LL |     std::mem::swap(x, &mut STATIC_VAR_2)\n+   |                       ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #57349 <https://github.com/rust-lang/rust/issues/57349> for more information\n+   = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable\n+\n+error[E0133]: use of mutable static is unsafe and requires unsafe function or block\n+  --> $DIR/thread-local-static.rs:9:23\n+   |\n+LL |     std::mem::swap(x, &mut STATIC_VAR_2)\n+   |                       ^^^^^^^^^^^^^^^^^ use of mutable static\n+   |\n+   = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior\n+\n+error: aborting due to 5 previous errors\n+\n+Some errors have detailed explanations: E0013, E0133, E0658.\n+For more information about an error, try `rustc --explain E0013`."}, {"sha": "0cecbd67323ca14a7eb6505900d0d7307b00355b", "filename": "src/tools/cargo", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcargo?ref=a93699f20a433797a4b84787b9652300dd7b2ad2", "patch": "@@ -1 +1 @@\n-Subproject commit e931e4796b61de593aa1097649445e535c9c7ee0\n+Subproject commit 0cecbd67323ca14a7eb6505900d0d7307b00355b"}, {"sha": "c97f63f1cfd9a22be40c159df1e2eecfb24c63b3", "filename": "triagebot.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a93699f20a433797a4b84787b9652300dd7b2ad2/triagebot.toml", "raw_url": "https://github.com/rust-lang/rust/raw/a93699f20a433797a4b84787b9652300dd7b2ad2/triagebot.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/triagebot.toml?ref=a93699f20a433797a4b84787b9652300dd7b2ad2", "patch": "@@ -79,7 +79,7 @@ trigger_labels = [\n     \"regression-from-stable-to-stable\",\n     \"regression-from-stable-to-beta\",\n     \"regression-from-stable-to-nightly\",\n-    \"I-unsound \ud83d\udca5\",\n+    \"I-unsound\",\n ]\n exclude_labels = [\n     \"P-*\","}]}