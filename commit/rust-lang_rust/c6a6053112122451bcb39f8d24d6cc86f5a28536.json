{"sha": "c6a6053112122451bcb39f8d24d6cc86f5a28536", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM2YTYwNTMxMTIxMjI0NTFiY2IzOWY4ZDI0ZDZjYzg2ZjVhMjg1MzY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-03-11T01:52:12Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-03-11T01:52:12Z"}, "message": "Auto merge of #32102 - alexcrichton:assert-safe-closures, r=aturon\n\nstd: Add impl of FnOnce to AssertRecoverSafe\n\nThis was originally intended, but forgot to land by accident!\n\ncc #27719", "tree": {"sha": "863ea14eb6ba63b20d00349cd52adbff98ab5b76", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/863ea14eb6ba63b20d00349cd52adbff98ab5b76"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c6a6053112122451bcb39f8d24d6cc86f5a28536", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c6a6053112122451bcb39f8d24d6cc86f5a28536", "html_url": "https://github.com/rust-lang/rust/commit/c6a6053112122451bcb39f8d24d6cc86f5a28536", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c6a6053112122451bcb39f8d24d6cc86f5a28536/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c9629d61c6947030666379a6f46445f07849bbd9", "url": "https://api.github.com/repos/rust-lang/rust/commits/c9629d61c6947030666379a6f46445f07849bbd9", "html_url": "https://github.com/rust-lang/rust/commit/c9629d61c6947030666379a6f46445f07849bbd9"}, {"sha": "ec58f40463e3c12208376c89459975974633382c", "url": "https://api.github.com/repos/rust-lang/rust/commits/ec58f40463e3c12208376c89459975974633382c", "html_url": "https://github.com/rust-lang/rust/commit/ec58f40463e3c12208376c89459975974633382c"}], "stats": {"total": 37, "additions": 36, "deletions": 1}, "files": [{"sha": "07a6992bbc00861f33c53904714d363c065d055a", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c6a6053112122451bcb39f8d24d6cc86f5a28536/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6a6053112122451bcb39f8d24d6cc86f5a28536/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=c6a6053112122451bcb39f8d24d6cc86f5a28536", "patch": "@@ -230,6 +230,7 @@\n #![feature(float_extras)]\n #![feature(float_from_str_radix)]\n #![feature(fnbox)]\n+#![feature(fn_traits)]\n #![feature(heap_api)]\n #![feature(hashmap_hasher)]\n #![feature(inclusive_range)]"}, {"sha": "5c2e36623cbed160badc10f127a70c3e76a213dd", "filename": "src/libstd/panic.rs", "status": "modified", "additions": 35, "deletions": 1, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/c6a6053112122451bcb39f8d24d6cc86f5a28536/src%2Flibstd%2Fpanic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6a6053112122451bcb39f8d24d6cc86f5a28536/src%2Flibstd%2Fpanic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpanic.rs?ref=c6a6053112122451bcb39f8d24d6cc86f5a28536", "patch": "@@ -129,6 +129,9 @@ pub trait RefRecoverSafe {}\n ///\n /// # Examples\n ///\n+/// One way to use `AssertRecoverSafe` is to assert that the entire closure\n+/// itself is recover safe, bypassing all checks for all variables:\n+///\n /// ```\n /// #![feature(recover, std_panic)]\n ///\n@@ -144,10 +147,33 @@ pub trait RefRecoverSafe {}\n /// // });\n ///\n /// // This, however, will compile due to the `AssertRecoverSafe` wrapper\n+/// let result = panic::recover(AssertRecoverSafe::new(|| {\n+///     variable += 3;\n+/// }));\n+/// // ...\n+/// ```\n+///\n+/// Wrapping the entire closure amounts to a blanket assertion that all captured\n+/// variables are recover safe. This has the downside that if new captures are\n+/// added in the future, they will also be considered recover safe. Therefore,\n+/// you may prefer to just wrap individual captures, as shown below. This is\n+/// more annotation, but it ensures that if a new capture is added which is not\n+/// recover safe, you will get a compilation error at that time, which will\n+/// allow you to consider whether that new capture in fact represent a bug or\n+/// not.\n+///\n+/// ```\n+/// #![feature(recover, std_panic)]\n+///\n+/// use std::panic::{self, AssertRecoverSafe};\n+///\n+/// let mut variable = 4;\n+/// let other_capture = 3;\n+///\n /// let result = {\n ///     let mut wrapper = AssertRecoverSafe::new(&mut variable);\n ///     panic::recover(move || {\n-///         **wrapper += 3;\n+///         **wrapper += other_capture;\n ///     })\n /// };\n /// // ...\n@@ -215,6 +241,14 @@ impl<T> DerefMut for AssertRecoverSafe<T> {\n     }\n }\n \n+impl<R, F: FnOnce() -> R> FnOnce<()> for AssertRecoverSafe<F> {\n+    type Output = R;\n+\n+    extern \"rust-call\" fn call_once(self, _args: ()) -> R {\n+        (self.0)()\n+    }\n+}\n+\n /// Invokes a closure, capturing the cause of panic if one occurs.\n ///\n /// This function will return `Ok` with the closure's result if the closure"}]}