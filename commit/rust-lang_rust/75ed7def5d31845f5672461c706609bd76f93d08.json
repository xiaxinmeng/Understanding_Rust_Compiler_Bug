{"sha": "75ed7def5d31845f5672461c706609bd76f93d08", "node_id": "C_kwDOAAsO6NoAKDc1ZWQ3ZGVmNWQzMTg0NWY1NjcyNDYxYzcwNjYwOWJkNzZmOTNkMDg", "commit": {"author": {"name": "Erik Desjardins", "email": "erikdesjardins@users.noreply.github.com", "date": "2022-02-07T02:11:11Z"}, "committer": {"name": "Erik Desjardins", "email": "erikdesjardins@users.noreply.github.com", "date": "2022-02-07T02:11:11Z"}, "message": "apply noundef explicitly in all cases instead of relying on dereferenceable implying it", "tree": {"sha": "3c83b766cb410bbbf07a066e232a22f1abf11b58", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3c83b766cb410bbbf07a066e232a22f1abf11b58"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/75ed7def5d31845f5672461c706609bd76f93d08", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/75ed7def5d31845f5672461c706609bd76f93d08", "html_url": "https://github.com/rust-lang/rust/commit/75ed7def5d31845f5672461c706609bd76f93d08", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/75ed7def5d31845f5672461c706609bd76f93d08/comments", "author": {"login": "erikdesjardins", "id": 7673145, "node_id": "MDQ6VXNlcjc2NzMxNDU=", "avatar_url": "https://avatars.githubusercontent.com/u/7673145?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erikdesjardins", "html_url": "https://github.com/erikdesjardins", "followers_url": "https://api.github.com/users/erikdesjardins/followers", "following_url": "https://api.github.com/users/erikdesjardins/following{/other_user}", "gists_url": "https://api.github.com/users/erikdesjardins/gists{/gist_id}", "starred_url": "https://api.github.com/users/erikdesjardins/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erikdesjardins/subscriptions", "organizations_url": "https://api.github.com/users/erikdesjardins/orgs", "repos_url": "https://api.github.com/users/erikdesjardins/repos", "events_url": "https://api.github.com/users/erikdesjardins/events{/privacy}", "received_events_url": "https://api.github.com/users/erikdesjardins/received_events", "type": "User", "site_admin": false}, "committer": {"login": "erikdesjardins", "id": 7673145, "node_id": "MDQ6VXNlcjc2NzMxNDU=", "avatar_url": "https://avatars.githubusercontent.com/u/7673145?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erikdesjardins", "html_url": "https://github.com/erikdesjardins", "followers_url": "https://api.github.com/users/erikdesjardins/followers", "following_url": "https://api.github.com/users/erikdesjardins/following{/other_user}", "gists_url": "https://api.github.com/users/erikdesjardins/gists{/gist_id}", "starred_url": "https://api.github.com/users/erikdesjardins/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erikdesjardins/subscriptions", "organizations_url": "https://api.github.com/users/erikdesjardins/orgs", "repos_url": "https://api.github.com/users/erikdesjardins/repos", "events_url": "https://api.github.com/users/erikdesjardins/events{/privacy}", "received_events_url": "https://api.github.com/users/erikdesjardins/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ced947fc124197bf87e2bdc6741d50db92d296a8", "url": "https://api.github.com/repos/rust-lang/rust/commits/ced947fc124197bf87e2bdc6741d50db92d296a8", "html_url": "https://github.com/rust-lang/rust/commit/ced947fc124197bf87e2bdc6741d50db92d296a8"}], "stats": {"total": 32, "additions": 14, "deletions": 18}, "files": [{"sha": "8a11e3e71bc81253404a427dd4d1b1c814b32339", "filename": "compiler/rustc_codegen_llvm/src/abi.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/75ed7def5d31845f5672461c706609bd76f93d08/compiler%2Frustc_codegen_llvm%2Fsrc%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75ed7def5d31845f5672461c706609bd76f93d08/compiler%2Frustc_codegen_llvm%2Fsrc%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fabi.rs?ref=75ed7def5d31845f5672461c706609bd76f93d08", "patch": "@@ -69,9 +69,7 @@ impl ArgAttributesExt for ArgAttributes {\n                 } else {\n                     llvm::LLVMRustAddDereferenceableOrNullAttr(llfn, idx.as_uint(), deref);\n                 }\n-                // dereferenceable implies nonnull noundef; dereferenceable_or_null implies noundef\n                 regular -= ArgAttribute::NonNull;\n-                regular -= ArgAttribute::NoUndef;\n             }\n             if let Some(align) = self.pointee_align {\n                 llvm::LLVMRustAddAlignmentAttr(llfn, idx.as_uint(), align.bytes() as u32);\n@@ -111,9 +109,7 @@ impl ArgAttributesExt for ArgAttributes {\n                         deref,\n                     );\n                 }\n-                // dereferenceable implies nonnull noundef; dereferenceable_or_null implies noundef\n                 regular -= ArgAttribute::NonNull;\n-                regular -= ArgAttribute::NoUndef;\n             }\n             if let Some(align) = self.pointee_align {\n                 llvm::LLVMRustAddAlignmentCallSiteAttr("}, {"sha": "17b54d86cb09f057696093415c7086c5dc2a84e7", "filename": "src/test/codegen/function-arguments.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/75ed7def5d31845f5672461c706609bd76f93d08/src%2Ftest%2Fcodegen%2Ffunction-arguments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75ed7def5d31845f5672461c706609bd76f93d08/src%2Ftest%2Fcodegen%2Ffunction-arguments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Ffunction-arguments.rs?ref=75ed7def5d31845f5672461c706609bd76f93d08", "patch": "@@ -25,48 +25,48 @@ pub fn maybeuninit_boolean(x: MaybeUninit<bool>) -> MaybeUninit<bool> {\n   x\n }\n \n-// CHECK: @readonly_borrow(i32* noalias readonly align 4 dereferenceable(4) %_1)\n+// CHECK: @readonly_borrow(i32* noalias noundef readonly align 4 dereferenceable(4) %_1)\n // FIXME #25759 This should also have `nocapture`\n #[no_mangle]\n pub fn readonly_borrow(_: &i32) {\n }\n \n-// CHECK: @static_borrow(i32* noalias readonly align 4 dereferenceable(4) %_1)\n+// CHECK: @static_borrow(i32* noalias noundef readonly align 4 dereferenceable(4) %_1)\n // static borrow may be captured\n #[no_mangle]\n pub fn static_borrow(_: &'static i32) {\n }\n \n-// CHECK: @named_borrow(i32* noalias readonly align 4 dereferenceable(4) %_1)\n+// CHECK: @named_borrow(i32* noalias noundef readonly align 4 dereferenceable(4) %_1)\n // borrow with named lifetime may be captured\n #[no_mangle]\n pub fn named_borrow<'r>(_: &'r i32) {\n }\n \n-// CHECK: @unsafe_borrow(i16* align 2 dereferenceable(2) %_1)\n+// CHECK: @unsafe_borrow(i16* noundef align 2 dereferenceable(2) %_1)\n // unsafe interior means this isn't actually readonly and there may be aliases ...\n #[no_mangle]\n pub fn unsafe_borrow(_: &UnsafeInner) {\n }\n \n-// CHECK: @mutable_unsafe_borrow(i16* noalias align 2 dereferenceable(2) %_1)\n+// CHECK: @mutable_unsafe_borrow(i16* noalias noundef align 2 dereferenceable(2) %_1)\n // ... unless this is a mutable borrow, those never alias\n #[no_mangle]\n pub fn mutable_unsafe_borrow(_: &mut UnsafeInner) {\n }\n \n-// CHECK: @mutable_borrow(i32* noalias align 4 dereferenceable(4) %_1)\n+// CHECK: @mutable_borrow(i32* noalias noundef align 4 dereferenceable(4) %_1)\n // FIXME #25759 This should also have `nocapture`\n #[no_mangle]\n pub fn mutable_borrow(_: &mut i32) {\n }\n \n-// CHECK: @indirect_struct(%S* noalias nocapture dereferenceable(32) %_1)\n+// CHECK: @indirect_struct(%S* noalias nocapture noundef dereferenceable(32) %_1)\n #[no_mangle]\n pub fn indirect_struct(_: S) {\n }\n \n-// CHECK: @borrowed_struct(%S* noalias readonly align 4 dereferenceable(32) %_1)\n+// CHECK: @borrowed_struct(%S* noalias noundef readonly align 4 dereferenceable(32) %_1)\n // FIXME #25759 This should also have `nocapture`\n #[no_mangle]\n pub fn borrowed_struct(_: &S) {\n@@ -85,7 +85,7 @@ pub fn _box(x: Box<i32>) -> Box<i32> {\n   x\n }\n \n-// CHECK: @struct_return(%S* noalias nocapture sret(%S) dereferenceable(32){{( %0)?}})\n+// CHECK: @struct_return(%S* noalias nocapture noundef sret(%S) dereferenceable(32){{( %0)?}})\n #[no_mangle]\n pub fn struct_return() -> S {\n   S {\n@@ -128,18 +128,18 @@ pub fn raw_slice(_: *const [u8]) {\n pub fn str(_: &[u8]) {\n }\n \n-// CHECK: @trait_borrow({}* noundef nonnull align 1 %_1.0, [3 x [[USIZE]]]* noalias readonly align {{.*}} dereferenceable({{.*}}) %_1.1)\n+// CHECK: @trait_borrow({}* noundef nonnull align 1 %_1.0, [3 x [[USIZE]]]* noalias noundef readonly align {{.*}} dereferenceable({{.*}}) %_1.1)\n // FIXME #25759 This should also have `nocapture`\n #[no_mangle]\n pub fn trait_borrow(_: &Drop) {\n }\n \n-// CHECK: @trait_raw({}* %_1.0, [3 x [[USIZE]]]* noalias readonly align {{.*}} dereferenceable({{.*}}) %_1.1)\n+// CHECK: @trait_raw({}* %_1.0, [3 x [[USIZE]]]* noalias noundef readonly align {{.*}} dereferenceable({{.*}}) %_1.1)\n #[no_mangle]\n pub fn trait_raw(_: *const Drop) {\n }\n \n-// CHECK: @trait_box({}* noalias noundef nonnull align 1{{( %0)?}}, [3 x [[USIZE]]]* noalias readonly align {{.*}} dereferenceable({{.*}}){{( %1)?}})\n+// CHECK: @trait_box({}* noalias noundef nonnull align 1{{( %0)?}}, [3 x [[USIZE]]]* noalias noundef readonly align {{.*}} dereferenceable({{.*}}){{( %1)?}})\n #[no_mangle]\n pub fn trait_box(_: Box<Drop>) {\n }"}, {"sha": "5d1fb80ec0051bb5c5ed435deea192fc5ab41029", "filename": "src/test/codegen/packed.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/75ed7def5d31845f5672461c706609bd76f93d08/src%2Ftest%2Fcodegen%2Fpacked.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75ed7def5d31845f5672461c706609bd76f93d08/src%2Ftest%2Fcodegen%2Fpacked.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fpacked.rs?ref=75ed7def5d31845f5672461c706609bd76f93d08", "patch": "@@ -52,7 +52,7 @@ pub struct BigPacked2 {\n #[no_mangle]\n pub fn call_pkd1(f: fn() -> Array) -> BigPacked1 {\n // CHECK: [[ALLOCA:%[_a-z0-9]+]] = alloca %Array\n-// CHECK: call void %{{.*}}(%Array* noalias nocapture sret{{.*}} dereferenceable(32) [[ALLOCA]])\n+// CHECK: call void %{{.*}}(%Array* noalias nocapture noundef sret{{.*}} dereferenceable(32) [[ALLOCA]])\n // CHECK: call void @llvm.memcpy.{{.*}}(i8* align 1 %{{.*}}, i8* align 4 %{{.*}}, i{{[0-9]+}} 32, i1 false)\n     // check that calls whose destination is a field of a packed struct\n     // go through an alloca rather than calling the function with an\n@@ -64,7 +64,7 @@ pub fn call_pkd1(f: fn() -> Array) -> BigPacked1 {\n #[no_mangle]\n pub fn call_pkd2(f: fn() -> Array) -> BigPacked2 {\n // CHECK: [[ALLOCA:%[_a-z0-9]+]] = alloca %Array\n-// CHECK: call void %{{.*}}(%Array* noalias nocapture sret{{.*}} dereferenceable(32) [[ALLOCA]])\n+// CHECK: call void %{{.*}}(%Array* noalias nocapture noundef sret{{.*}} dereferenceable(32) [[ALLOCA]])\n // CHECK: call void @llvm.memcpy.{{.*}}(i8* align 2 %{{.*}}, i8* align 4 %{{.*}}, i{{[0-9]+}} 32, i1 false)\n     // check that calls whose destination is a field of a packed struct\n     // go through an alloca rather than calling the function with an"}]}