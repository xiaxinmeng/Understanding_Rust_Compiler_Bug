{"sha": "af0c1fe83dcbb3b5b651962095ed9784a6746308", "node_id": "C_kwDOAAsO6NoAKGFmMGMxZmU4M2RjYmIzYjViNjUxOTYyMDk1ZWQ5Nzg0YTY3NDYzMDg", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-06-25T20:30:57Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-06-27T20:50:42Z"}, "message": "fix data race in thread::scope", "tree": {"sha": "e6d54718f8fad43f9e20e81de046f0f36ae599c8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e6d54718f8fad43f9e20e81de046f0f36ae599c8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/af0c1fe83dcbb3b5b651962095ed9784a6746308", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/af0c1fe83dcbb3b5b651962095ed9784a6746308", "html_url": "https://github.com/rust-lang/rust/commit/af0c1fe83dcbb3b5b651962095ed9784a6746308", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/af0c1fe83dcbb3b5b651962095ed9784a6746308/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1aabd8a4a6e1871f14e804302bd60dfcbffd5761", "url": "https://api.github.com/repos/rust-lang/rust/commits/1aabd8a4a6e1871f14e804302bd60dfcbffd5761", "html_url": "https://github.com/rust-lang/rust/commit/1aabd8a4a6e1871f14e804302bd60dfcbffd5761"}], "stats": {"total": 27, "additions": 17, "deletions": 10}, "files": [{"sha": "c70ac8c9806d6a3e4c4682caa21fb6efb62dd959", "filename": "library/std/src/thread/mod.rs", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/af0c1fe83dcbb3b5b651962095ed9784a6746308/library%2Fstd%2Fsrc%2Fthread%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af0c1fe83dcbb3b5b651962095ed9784a6746308/library%2Fstd%2Fsrc%2Fthread%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fthread%2Fmod.rs?ref=af0c1fe83dcbb3b5b651962095ed9784a6746308", "patch": "@@ -159,6 +159,7 @@ use crate::cell::UnsafeCell;\n use crate::ffi::{CStr, CString};\n use crate::fmt;\n use crate::io;\n+use crate::marker::PhantomData;\n use crate::mem;\n use crate::num::NonZeroU64;\n use crate::num::NonZeroUsize;\n@@ -462,7 +463,7 @@ impl Builder {\n     unsafe fn spawn_unchecked_<'a, 'scope, F, T>(\n         self,\n         f: F,\n-        scope_data: Option<&'scope scoped::ScopeData>,\n+        scope_data: Option<Arc<scoped::ScopeData>>,\n     ) -> io::Result<JoinInner<'scope, T>>\n     where\n         F: FnOnce() -> T,\n@@ -479,8 +480,11 @@ impl Builder {\n         }));\n         let their_thread = my_thread.clone();\n \n-        let my_packet: Arc<Packet<'scope, T>> =\n-            Arc::new(Packet { scope: scope_data, result: UnsafeCell::new(None) });\n+        let my_packet: Arc<Packet<'scope, T>> = Arc::new(Packet {\n+            scope: scope_data,\n+            result: UnsafeCell::new(None),\n+            _marker: PhantomData,\n+        });\n         let their_packet = my_packet.clone();\n \n         let output_capture = crate::io::set_output_capture(None);\n@@ -507,7 +511,7 @@ impl Builder {\n             unsafe { *their_packet.result.get() = Some(try_result) };\n         };\n \n-        if let Some(scope_data) = scope_data {\n+        if let Some(scope_data) = &my_packet.scope {\n             scope_data.increment_num_running_threads();\n         }\n \n@@ -1298,8 +1302,9 @@ pub type Result<T> = crate::result::Result<T, Box<dyn Any + Send + 'static>>;\n // An Arc to the packet is stored into a `JoinInner` which in turns is placed\n // in `JoinHandle`.\n struct Packet<'scope, T> {\n-    scope: Option<&'scope scoped::ScopeData>,\n+    scope: Option<Arc<scoped::ScopeData>>,\n     result: UnsafeCell<Option<Result<T>>>,\n+    _marker: PhantomData<Option<&'scope scoped::ScopeData>>,\n }\n \n // Due to the usage of `UnsafeCell` we need to manually implement Sync.\n@@ -1330,7 +1335,7 @@ impl<'scope, T> Drop for Packet<'scope, T> {\n             rtabort!(\"thread result panicked on drop\");\n         }\n         // Book-keeping so the scope knows when it's done.\n-        if let Some(scope) = self.scope {\n+        if let Some(scope) = &self.scope {\n             // Now that there will be no more user code running on this thread\n             // that can use 'scope, mark the thread as 'finished'.\n             // It's important we only do this after the `result` has been dropped,"}, {"sha": "e6dbf35bd0286f7abdc2a1715ab2c4a3d1f0b1b5", "filename": "library/std/src/thread/scoped.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/af0c1fe83dcbb3b5b651962095ed9784a6746308/library%2Fstd%2Fsrc%2Fthread%2Fscoped.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af0c1fe83dcbb3b5b651962095ed9784a6746308/library%2Fstd%2Fsrc%2Fthread%2Fscoped.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fthread%2Fscoped.rs?ref=af0c1fe83dcbb3b5b651962095ed9784a6746308", "patch": "@@ -11,7 +11,7 @@ use crate::sync::Arc;\n /// See [`scope`] for details.\n #[stable(feature = \"scoped_threads\", since = \"1.63.0\")]\n pub struct Scope<'scope, 'env: 'scope> {\n-    data: ScopeData,\n+    data: Arc<ScopeData>,\n     /// Invariance over 'scope, to make sure 'scope cannot shrink,\n     /// which is necessary for soundness.\n     ///\n@@ -130,12 +130,14 @@ pub fn scope<'env, F, T>(f: F) -> T\n where\n     F: for<'scope> FnOnce(&'scope Scope<'scope, 'env>) -> T,\n {\n+    // We put the `ScopeData` into an `Arc` so that other threads can finish their\n+    // `decrement_num_running_threads` even after this function returns.\n     let scope = Scope {\n-        data: ScopeData {\n+        data: Arc::new(ScopeData {\n             num_running_threads: AtomicUsize::new(0),\n             main_thread: current(),\n             a_thread_panicked: AtomicBool::new(false),\n-        },\n+        }),\n         env: PhantomData,\n         scope: PhantomData,\n     };\n@@ -250,7 +252,7 @@ impl Builder {\n         F: FnOnce() -> T + Send + 'scope,\n         T: Send + 'scope,\n     {\n-        Ok(ScopedJoinHandle(unsafe { self.spawn_unchecked_(f, Some(&scope.data)) }?))\n+        Ok(ScopedJoinHandle(unsafe { self.spawn_unchecked_(f, Some(scope.data.clone())) }?))\n     }\n }\n "}]}