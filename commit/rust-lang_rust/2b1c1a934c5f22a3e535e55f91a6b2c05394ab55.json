{"sha": "2b1c1a934c5f22a3e535e55f91a6b2c05394ab55", "node_id": "C_kwDOAAsO6NoAKDJiMWMxYTkzNGM1ZjIyYTNlNTM1ZTU1ZjkxYTZiMmMwNTM5NGFiNTU", "commit": {"author": {"name": "andylizi", "email": "andylizi666@gmail.com", "date": "2022-05-15T11:17:52Z"}, "committer": {"name": "andylizi", "email": "andylizi666@gmail.com", "date": "2022-05-20T09:42:56Z"}, "message": "feat: hide type inlay hints for initializations of closures", "tree": {"sha": "76b957ff51b02c8a180ed1eecf0da352498fc20a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/76b957ff51b02c8a180ed1eecf0da352498fc20a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2b1c1a934c5f22a3e535e55f91a6b2c05394ab55", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEE85wNqADN79wr57npv7+oyFkp8OgFAmKHYqAACgkQv7+oyFkp\n8OilfA//ba5RwFMIxpyzyOJiDetAcP5OoCPb8PbyEOB1KrZZJUqykIFRLMuYkl9U\ndL+kYXLtf8GJrBgw2+OvWSuc9Js/6fqBi7sdhQnFOy/ZL3TwszOQ7LmwW3+ovOdL\nH3TiSKb169xnlslvbW2TjyxXRrcxbFAm8g+dhxI5V9Ef07SkyHkdOM4jxPj9nch0\nvAj2s0FybeyhSQf/jeeX1VVQZeS0TsGGmjch+IphKPZXjG9QoX29zAikU9BKu3+H\nXSEhapiJC/foP4lRBFymT9sD8V6NJgW2PakGJceTeslFMVHrwlR102yFB0RRA5+4\n2WxkVXg8MgZu9Jw1araNjXoOrE24jr7kA0X7XTLUMUkkbw92eBsrY27qniDgu4iZ\nW2+dmwF59AfE38GwHUwKPmk8XSJPiX3S5YxHDHrEFSzfaPQRfuZRWU9dfhEW3q6E\n35UwMTnU9keLAnZb49Q7ol8JsMBCLvzA+8DFCdb3odrn33h+sfFxfniEOMcg5Kls\nxCk1zc2tGyfzNSxZXI0YOozdrW4RWbaKTcsLl2oSxXNMWtxFobwdNGUgmU8eGEqc\n3N+IemKut/L/tPUxxTNPANpMwd5BKbcIbmAN90uNujUlKiyeJWej1WVsGzyd3s/W\nQnzdlfeKW9L5MSpaOpq7g8XSCbu27RkGhLT0oj4fXDm/1NovUes=\n=OWKX\n-----END PGP SIGNATURE-----", "payload": "tree 76b957ff51b02c8a180ed1eecf0da352498fc20a\nparent 44be090f2eb185e94f64b38a51b51db30b1f9704\nauthor andylizi <andylizi666@gmail.com> 1652613472 +0800\ncommitter andylizi <andylizi666@gmail.com> 1653039776 +0800\n\nfeat: hide type inlay hints for initializations of closures\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2b1c1a934c5f22a3e535e55f91a6b2c05394ab55", "html_url": "https://github.com/rust-lang/rust/commit/2b1c1a934c5f22a3e535e55f91a6b2c05394ab55", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2b1c1a934c5f22a3e535e55f91a6b2c05394ab55/comments", "author": {"login": "andylizi", "id": 12008103, "node_id": "MDQ6VXNlcjEyMDA4MTAz", "avatar_url": "https://avatars.githubusercontent.com/u/12008103?v=4", "gravatar_id": "", "url": "https://api.github.com/users/andylizi", "html_url": "https://github.com/andylizi", "followers_url": "https://api.github.com/users/andylizi/followers", "following_url": "https://api.github.com/users/andylizi/following{/other_user}", "gists_url": "https://api.github.com/users/andylizi/gists{/gist_id}", "starred_url": "https://api.github.com/users/andylizi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/andylizi/subscriptions", "organizations_url": "https://api.github.com/users/andylizi/orgs", "repos_url": "https://api.github.com/users/andylizi/repos", "events_url": "https://api.github.com/users/andylizi/events{/privacy}", "received_events_url": "https://api.github.com/users/andylizi/received_events", "type": "User", "site_admin": false}, "committer": {"login": "andylizi", "id": 12008103, "node_id": "MDQ6VXNlcjEyMDA4MTAz", "avatar_url": "https://avatars.githubusercontent.com/u/12008103?v=4", "gravatar_id": "", "url": "https://api.github.com/users/andylizi", "html_url": "https://github.com/andylizi", "followers_url": "https://api.github.com/users/andylizi/followers", "following_url": "https://api.github.com/users/andylizi/following{/other_user}", "gists_url": "https://api.github.com/users/andylizi/gists{/gist_id}", "starred_url": "https://api.github.com/users/andylizi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/andylizi/subscriptions", "organizations_url": "https://api.github.com/users/andylizi/orgs", "repos_url": "https://api.github.com/users/andylizi/repos", "events_url": "https://api.github.com/users/andylizi/events{/privacy}", "received_events_url": "https://api.github.com/users/andylizi/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "44be090f2eb185e94f64b38a51b51db30b1f9704", "url": "https://api.github.com/repos/rust-lang/rust/commits/44be090f2eb185e94f64b38a51b51db30b1f9704", "html_url": "https://github.com/rust-lang/rust/commit/44be090f2eb185e94f64b38a51b51db30b1f9704"}], "stats": {"total": 95, "additions": 90, "deletions": 5}, "files": [{"sha": "3689bd5a42a62b1cae4d66e4f6b213d04a2afdc0", "filename": "crates/ide/src/inlay_hints.rs", "status": "modified", "additions": 72, "deletions": 5, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/2b1c1a934c5f22a3e535e55f91a6b2c05394ab55/crates%2Fide%2Fsrc%2Finlay_hints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b1c1a934c5f22a3e535e55f91a6b2c05394ab55/crates%2Fide%2Fsrc%2Finlay_hints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Finlay_hints.rs?ref=2b1c1a934c5f22a3e535e55f91a6b2c05394ab55", "patch": "@@ -26,6 +26,7 @@ pub struct InlayHintsConfig {\n     pub lifetime_elision_hints: LifetimeElisionHints,\n     pub param_names_for_lifetime_elision_hints: bool,\n     pub hide_named_constructor_hints: bool,\n+    pub hide_closure_initialization_hints: bool,\n     pub max_length: Option<usize>,\n     pub closing_brace_hints_min_lines: Option<usize>,\n }\n@@ -467,10 +468,11 @@ fn closure_ret_hints(\n         return None;\n     }\n \n-    let param_list = match closure.body() {\n-        Some(ast::Expr::BlockExpr(_)) => closure.param_list()?,\n-        _ => return None,\n-    };\n+    if !closure_has_block_body(&closure) {\n+        return None;\n+    }\n+\n+    let param_list = closure.param_list()?;\n \n     let closure = sema.descend_node_into_attributes(closure.clone()).pop()?;\n     let ty = sema.type_of_expr(&ast::Expr::ClosureExpr(closure))?.adjusted();\n@@ -693,7 +695,7 @@ fn bind_pat_hints(\n     let desc_pat = descended.as_ref().unwrap_or(pat);\n     let ty = sema.type_of_pat(&desc_pat.clone().into())?.original;\n \n-    if should_not_display_type_hint(sema, pat, &ty) {\n+    if should_not_display_type_hint(sema, config, pat, &ty) {\n         return None;\n     }\n \n@@ -848,6 +850,7 @@ fn pat_is_enum_variant(db: &RootDatabase, bind_pat: &ast::IdentPat, pat_ty: &hir\n \n fn should_not_display_type_hint(\n     sema: &Semantics<RootDatabase>,\n+    config: &InlayHintsConfig,\n     bind_pat: &ast::IdentPat,\n     pat_ty: &hir::Type,\n ) -> bool {\n@@ -863,6 +866,18 @@ fn should_not_display_type_hint(\n         }\n     }\n \n+    if config.hide_closure_initialization_hints {\n+        if let Some(parent) = bind_pat.syntax().parent() {\n+            if let Some(it) = ast::LetStmt::cast(parent.clone()) {\n+                if let Some(ast::Expr::ClosureExpr(closure)) = it.initializer() {\n+                    if closure_has_block_body(&closure) {\n+                        return true;\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n     for node in bind_pat.syntax().ancestors() {\n         match_ast! {\n             match node {\n@@ -889,6 +904,10 @@ fn should_not_display_type_hint(\n     false\n }\n \n+fn closure_has_block_body(closure: &ast::ClosureExpr) -> bool {\n+    matches!(closure.body(), Some(ast::Expr::BlockExpr(_)))\n+}\n+\n fn should_hide_param_name_hint(\n     sema: &Semantics<RootDatabase>,\n     callable: &hir::Callable,\n@@ -1083,6 +1102,7 @@ mod tests {\n         reborrow_hints: ReborrowHints::Always,\n         binding_mode_hints: false,\n         hide_named_constructor_hints: false,\n+        hide_closure_initialization_hints: false,\n         param_names_for_lifetime_elision_hints: false,\n         max_length: None,\n         closing_brace_hints_min_lines: None,\n@@ -2034,6 +2054,53 @@ fn main() {\n         );\n     }\n \n+    #[test]\n+    fn skip_closure_type_hints() {\n+        check_with_config(\n+            InlayHintsConfig {\n+                type_hints: true,\n+                hide_closure_initialization_hints: true,\n+                ..DISABLED_CONFIG\n+            },\n+            r#\"\n+//- minicore: fn\n+fn main() {\n+    let multiple_2 = |x: i32| { x * 2 };\n+\n+    let multiple_2 = |x: i32| x * 2;\n+    //  ^^^^^^^^^^ |i32| -> i32\n+\n+    let (not) = (|x: bool| { !x });\n+    //   ^^^ |bool| -> bool\n+\n+    let (is_zero, _b) = (|x: usize| { x == 0 }, false);\n+    //   ^^^^^^^ |usize| -> bool\n+    //            ^^ bool\n+\n+    let plus_one = |x| { x + 1 };\n+    //              ^ u8\n+    foo(plus_one);\n+\n+    let add_mul = bar(|x: u8| { x + 1 });\n+    //  ^^^^^^^ impl FnOnce(u8) -> u8 + ?Sized\n+\n+    let closure = if let Some(6) = add_mul(2).checked_sub(1) {\n+    //  ^^^^^^^ fn(i32) -> i32\n+        |x: i32| { x * 2 }\n+    } else {\n+        |x: i32| { x * 3 }\n+    };\n+}\n+\n+fn foo(f: impl FnOnce(u8) -> u8) {}\n+\n+fn bar(f: impl FnOnce(u8) -> u8) -> impl FnOnce(u8) -> u8 {\n+    move |x: u8| f(x) * 2\n+}\n+\"#,\n+        );\n+    }\n+\n     #[test]\n     fn hint_truncation() {\n         check_with_config("}, {"sha": "006b18b7fddf1167f740e07aff433fe5c72cc71a", "filename": "crates/ide/src/static_index.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2b1c1a934c5f22a3e535e55f91a6b2c05394ab55/crates%2Fide%2Fsrc%2Fstatic_index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b1c1a934c5f22a3e535e55f91a6b2c05394ab55/crates%2Fide%2Fsrc%2Fstatic_index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fstatic_index.rs?ref=2b1c1a934c5f22a3e535e55f91a6b2c05394ab55", "patch": "@@ -113,6 +113,7 @@ impl StaticIndex<'_> {\n                     lifetime_elision_hints: crate::LifetimeElisionHints::Never,\n                     reborrow_hints: crate::ReborrowHints::Never,\n                     hide_named_constructor_hints: false,\n+                    hide_closure_initialization_hints: false,\n                     param_names_for_lifetime_elision_hints: false,\n                     binding_mode_hints: false,\n                     max_length: Some(25),"}, {"sha": "d7ae4c72f5c56e424b6debdcae88cb12249ad221", "filename": "crates/rust-analyzer/src/config.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2b1c1a934c5f22a3e535e55f91a6b2c05394ab55/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b1c1a934c5f22a3e535e55f91a6b2c05394ab55/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs?ref=2b1c1a934c5f22a3e535e55f91a6b2c05394ab55", "patch": "@@ -281,6 +281,9 @@ config_data! {\n         inlayHints_renderColons: bool                              = \"true\",\n         /// Whether to show inlay type hints for variables.\n         inlayHints_typeHints_enable: bool                          = \"true\",\n+        /// Whether to hide inlay type hints for `let` statements that initialize to a closure.\n+        /// Only applies to closures with blocks, same as `#rust-analyzer.inlayHints.closureReturnTypeHints.enable#`.\n+        inlayHints_typeHints_hideClosureInitialization: bool       = \"false\",\n         /// Whether to hide inlay type hints for constructors.\n         inlayHints_typeHints_hideNamedConstructor: bool            = \"false\",\n \n@@ -1000,6 +1003,9 @@ impl Config {\n                 LifetimeElisionDef::SkipTrivial => ide::LifetimeElisionHints::SkipTrivial,\n             },\n             hide_named_constructor_hints: self.data.inlayHints_typeHints_hideNamedConstructor,\n+            hide_closure_initialization_hints: self\n+                .data\n+                .inlayHints_typeHints_hideClosureInitialization,\n             reborrow_hints: match self.data.inlayHints_reborrowHints_enable {\n                 ReborrowHintsDef::Always => ide::ReborrowHints::Always,\n                 ReborrowHintsDef::Never => ide::ReborrowHints::Never,"}, {"sha": "955f085d3f228afb5b7cc9f1fc3f5420a9da3114", "filename": "docs/user/generated_config.adoc", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2b1c1a934c5f22a3e535e55f91a6b2c05394ab55/docs%2Fuser%2Fgenerated_config.adoc", "raw_url": "https://github.com/rust-lang/rust/raw/2b1c1a934c5f22a3e535e55f91a6b2c05394ab55/docs%2Fuser%2Fgenerated_config.adoc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fuser%2Fgenerated_config.adoc?ref=2b1c1a934c5f22a3e535e55f91a6b2c05394ab55", "patch": "@@ -407,6 +407,12 @@ Whether to render leading colons for type hints, and trailing colons for paramet\n --\n Whether to show inlay type hints for variables.\n --\n+[[rust-analyzer.inlayHints.typeHints.hideClosureInitialization]]rust-analyzer.inlayHints.typeHints.hideClosureInitialization (default: `false`)::\n++\n+--\n+Whether to hide inlay type hints for `let` statements that initialize to a closure.\n+Only applies to closures with blocks, same as `#rust-analyzer.inlayHints.closureReturnTypeHints.enable#`.\n+--\n [[rust-analyzer.inlayHints.typeHints.hideNamedConstructor]]rust-analyzer.inlayHints.typeHints.hideNamedConstructor (default: `false`)::\n +\n --"}, {"sha": "f46c7ea92d3e6e5c3ca60ca1844f13276abd5468", "filename": "editors/code/package.json", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2b1c1a934c5f22a3e535e55f91a6b2c05394ab55/editors%2Fcode%2Fpackage.json", "raw_url": "https://github.com/rust-lang/rust/raw/2b1c1a934c5f22a3e535e55f91a6b2c05394ab55/editors%2Fcode%2Fpackage.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fpackage.json?ref=2b1c1a934c5f22a3e535e55f91a6b2c05394ab55", "patch": "@@ -868,6 +868,11 @@\n                     \"default\": true,\n                     \"type\": \"boolean\"\n                 },\n+                \"rust-analyzer.inlayHints.typeHints.hideClosureInitialization\": {\n+                    \"markdownDescription\": \"Whether to hide inlay type hints for `let` statements that initialize to a closure.\\nOnly applies to closures with blocks, same as `#rust-analyzer.inlayHints.closureReturnTypeHints.enable#`.\",\n+                    \"default\": false,\n+                    \"type\": \"boolean\"\n+                },\n                 \"rust-analyzer.inlayHints.typeHints.hideNamedConstructor\": {\n                     \"markdownDescription\": \"Whether to hide inlay type hints for constructors.\",\n                     \"default\": false,"}]}