{"sha": "7c93154a30a640b8120c5aca68bffb886dcd02e6", "node_id": "C_kwDOAAsO6NoAKDdjOTMxNTRhMzBhNjQwYjgxMjBjNWFjYTY4YmZmYjg4NmRjZDAyZTY", "commit": {"author": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2022-07-28T08:39:19Z"}, "committer": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2022-07-28T08:39:19Z"}, "message": "Move output argument from ArchiveBuilder::new to .build()", "tree": {"sha": "11f4d5490c9f07635ba9e6b6c9e6ab9431a6f9fe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/11f4d5490c9f07635ba9e6b6c9e6ab9431a6f9fe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7c93154a30a640b8120c5aca68bffb886dcd02e6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7c93154a30a640b8120c5aca68bffb886dcd02e6", "html_url": "https://github.com/rust-lang/rust/commit/7c93154a30a640b8120c5aca68bffb886dcd02e6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7c93154a30a640b8120c5aca68bffb886dcd02e6/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "48316dfea1914d25189fa441e7310449ed76a446", "url": "https://api.github.com/repos/rust-lang/rust/commits/48316dfea1914d25189fa441e7310449ed76a446", "html_url": "https://github.com/rust-lang/rust/commit/48316dfea1914d25189fa441e7310449ed76a446"}], "stats": {"total": 73, "additions": 29, "deletions": 44}, "files": [{"sha": "9d39b4aa661a0a5dcc6cd72e39f0c5ad976fd4ab", "filename": "compiler/rustc_codegen_cranelift/src/archive.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7c93154a30a640b8120c5aca68bffb886dcd02e6/compiler%2Frustc_codegen_cranelift%2Fsrc%2Farchive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c93154a30a640b8120c5aca68bffb886dcd02e6/compiler%2Frustc_codegen_cranelift%2Fsrc%2Farchive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Farchive.rs?ref=7c93154a30a640b8120c5aca68bffb886dcd02e6", "patch": "@@ -19,7 +19,6 @@ enum ArchiveEntry {\n \n pub(crate) struct ArArchiveBuilder<'a> {\n     sess: &'a Session,\n-    dst: PathBuf,\n     use_gnu_style_archive: bool,\n     no_builtin_ranlib: bool,\n \n@@ -30,10 +29,9 @@ pub(crate) struct ArArchiveBuilder<'a> {\n }\n \n impl<'a> ArchiveBuilder<'a> for ArArchiveBuilder<'a> {\n-    fn new(sess: &'a Session, output: &Path) -> Self {\n+    fn new(sess: &'a Session) -> Self {\n         ArArchiveBuilder {\n             sess,\n-            dst: output.to_path_buf(),\n             use_gnu_style_archive: sess.target.archive_format == \"gnu\",\n             // FIXME fix builtin ranlib on macOS\n             no_builtin_ranlib: sess.target.is_like_osx,\n@@ -74,7 +72,7 @@ impl<'a> ArchiveBuilder<'a> for ArArchiveBuilder<'a> {\n         Ok(())\n     }\n \n-    fn build(mut self) -> bool {\n+    fn build(mut self, output: &Path) -> bool {\n         enum BuilderKind {\n             Bsd(ar::Builder<File>),\n             Gnu(ar::GnuBuilder<File>),\n@@ -163,7 +161,7 @@ impl<'a> ArchiveBuilder<'a> for ArArchiveBuilder<'a> {\n         let mut builder = if self.use_gnu_style_archive {\n             BuilderKind::Gnu(\n                 ar::GnuBuilder::new(\n-                    File::create(&self.dst).unwrap_or_else(|err| {\n+                    File::create(output).unwrap_or_else(|err| {\n                         sess.fatal(&format!(\n                             \"error opening destination during archive building: {}\",\n                             err\n@@ -178,7 +176,7 @@ impl<'a> ArchiveBuilder<'a> for ArArchiveBuilder<'a> {\n         } else {\n             BuilderKind::Bsd(\n                 ar::Builder::new(\n-                    File::create(&self.dst).unwrap_or_else(|err| {\n+                    File::create(output).unwrap_or_else(|err| {\n                         sess.fatal(&format!(\n                             \"error opening destination during archive building: {}\",\n                             err\n@@ -209,7 +207,7 @@ impl<'a> ArchiveBuilder<'a> for ArArchiveBuilder<'a> {\n \n             // Run ranlib to be able to link the archive\n             let status = std::process::Command::new(ranlib)\n-                .arg(self.dst)\n+                .arg(output)\n                 .status()\n                 .expect(\"Couldn't run ranlib\");\n "}, {"sha": "a8e94ad4b8d6c36c53cc50a8b0e4051889cbe5e6", "filename": "compiler/rustc_codegen_gcc/src/archive.rs", "status": "modified", "additions": 7, "deletions": 11, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/7c93154a30a640b8120c5aca68bffb886dcd02e6/compiler%2Frustc_codegen_gcc%2Fsrc%2Farchive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c93154a30a640b8120c5aca68bffb886dcd02e6/compiler%2Frustc_codegen_gcc%2Fsrc%2Farchive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_gcc%2Fsrc%2Farchive.rs?ref=7c93154a30a640b8120c5aca68bffb886dcd02e6", "patch": "@@ -8,7 +8,6 @@ use rustc_session::cstore::DllImport;\n \n struct ArchiveConfig<'a> {\n     sess: &'a Session,\n-    dst: PathBuf,\n     use_native_ar: bool,\n     use_gnu_style_archive: bool,\n }\n@@ -31,10 +30,9 @@ pub struct ArArchiveBuilder<'a> {\n }\n \n impl<'a> ArchiveBuilder<'a> for ArArchiveBuilder<'a> {\n-    fn new(sess: &'a Session, output: &Path) -> Self {\n+    fn new(sess: &'a Session) -> Self {\n         let config = ArchiveConfig {\n             sess,\n-            dst: output.to_path_buf(),\n             use_native_ar: false,\n             // FIXME test for linux and System V derivatives instead\n             use_gnu_style_archive: sess.target.options.archive_format == \"gnu\",\n@@ -77,7 +75,7 @@ impl<'a> ArchiveBuilder<'a> for ArArchiveBuilder<'a> {\n         Ok(())\n     }\n \n-    fn build(mut self) -> bool {\n+    fn build(mut self, output: &Path) -> bool {\n         use std::process::Command;\n \n         fn add_file_using_ar(archive: &Path, file: &Path) {\n@@ -97,17 +95,17 @@ impl<'a> ArchiveBuilder<'a> for ArArchiveBuilder<'a> {\n         }\n \n         let mut builder = if self.config.use_native_ar {\n-            BuilderKind::NativeAr(&self.config.dst)\n+            BuilderKind::NativeAr(output)\n         } else if self.config.use_gnu_style_archive {\n             BuilderKind::Gnu(ar::GnuBuilder::new(\n-                File::create(&self.config.dst).unwrap(),\n+                File::create(output).unwrap(),\n                 self.entries\n                     .iter()\n                     .map(|(name, _)| name.as_bytes().to_vec())\n                     .collect(),\n             ))\n         } else {\n-            BuilderKind::Bsd(ar::Builder::new(File::create(&self.config.dst).unwrap()))\n+            BuilderKind::Bsd(ar::Builder::new(File::create(output).unwrap()))\n         };\n \n         let any_members = !self.entries.is_empty();\n@@ -164,10 +162,8 @@ impl<'a> ArchiveBuilder<'a> for ArArchiveBuilder<'a> {\n         std::mem::drop(builder);\n \n         // Run ranlib to be able to link the archive\n-        let status = std::process::Command::new(\"ranlib\")\n-            .arg(self.config.dst)\n-            .status()\n-            .expect(\"Couldn't run ranlib\");\n+        let status =\n+            std::process::Command::new(\"ranlib\").arg(output).status().expect(\"Couldn't run ranlib\");\n \n         if !status.success() {\n             self.config.sess.fatal(&format!(\"Ranlib exited with code {:?}\", status.code()));"}, {"sha": "8d6e3673271d179cf6e1a19795fcd72f83eed660", "filename": "compiler/rustc_codegen_llvm/src/back/archive.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/7c93154a30a640b8120c5aca68bffb886dcd02e6/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Farchive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c93154a30a640b8120c5aca68bffb886dcd02e6/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Farchive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Farchive.rs?ref=7c93154a30a640b8120c5aca68bffb886dcd02e6", "patch": "@@ -18,7 +18,6 @@ use rustc_session::Session;\n #[must_use = \"must call build() to finish building the archive\"]\n pub struct LlvmArchiveBuilder<'a> {\n     sess: &'a Session,\n-    dst: PathBuf,\n     additions: Vec<Addition>,\n }\n \n@@ -56,8 +55,8 @@ fn llvm_machine_type(cpu: &str) -> LLVMMachineType {\n impl<'a> ArchiveBuilder<'a> for LlvmArchiveBuilder<'a> {\n     /// Creates a new static archive, ready for modifying the archive specified\n     /// by `config`.\n-    fn new(sess: &'a Session, output: &Path) -> LlvmArchiveBuilder<'a> {\n-        LlvmArchiveBuilder { sess, dst: output.to_path_buf(), additions: Vec::new() }\n+    fn new(sess: &'a Session) -> LlvmArchiveBuilder<'a> {\n+        LlvmArchiveBuilder { sess, additions: Vec::new() }\n     }\n \n     fn add_archive<F>(&mut self, archive: &Path, skip: F) -> io::Result<()>\n@@ -88,8 +87,8 @@ impl<'a> ArchiveBuilder<'a> for LlvmArchiveBuilder<'a> {\n \n     /// Combine the provided files, rlibs, and native libraries into a single\n     /// `Archive`.\n-    fn build(mut self) -> bool {\n-        match self.build_with_llvm() {\n+    fn build(mut self, output: &Path) -> bool {\n+        match self.build_with_llvm(output) {\n             Ok(any_members) => any_members,\n             Err(e) => self.sess.fatal(&format!(\"failed to build archive: {}\", e)),\n         }\n@@ -241,7 +240,7 @@ impl<'a> ArchiveBuilder<'a> for LlvmArchiveBuilder<'a> {\n }\n \n impl<'a> LlvmArchiveBuilder<'a> {\n-    fn build_with_llvm(&mut self) -> io::Result<bool> {\n+    fn build_with_llvm(&mut self, output: &Path) -> io::Result<bool> {\n         let kind = &*self.sess.target.archive_format;\n         let kind = kind.parse::<ArchiveKind>().map_err(|_| kind).unwrap_or_else(|kind| {\n             self.sess.fatal(&format!(\"Don't know how to build archive of type: {}\", kind))\n@@ -251,7 +250,7 @@ impl<'a> LlvmArchiveBuilder<'a> {\n         let mut strings = Vec::new();\n         let mut members = Vec::new();\n \n-        let dst = CString::new(self.dst.to_str().unwrap())?;\n+        let dst = CString::new(output.to_str().unwrap())?;\n \n         unsafe {\n             for addition in &mut additions {"}, {"sha": "d511c340802700927180238dae17336248558962", "filename": "compiler/rustc_codegen_ssa/src/back/archive.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7c93154a30a640b8120c5aca68bffb886dcd02e6/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Farchive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c93154a30a640b8120c5aca68bffb886dcd02e6/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Farchive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Farchive.rs?ref=7c93154a30a640b8120c5aca68bffb886dcd02e6", "patch": "@@ -41,15 +41,15 @@ pub(super) fn find_library(\n }\n \n pub trait ArchiveBuilder<'a> {\n-    fn new(sess: &'a Session, output: &Path) -> Self;\n+    fn new(sess: &'a Session) -> Self;\n \n     fn add_file(&mut self, path: &Path);\n \n     fn add_archive<F>(&mut self, archive: &Path, skip: F) -> io::Result<()>\n     where\n         F: FnMut(&str) -> bool + 'static;\n \n-    fn build(self) -> bool;\n+    fn build(self, output: &Path) -> bool;\n \n     fn sess(&self) -> &Session;\n "}, {"sha": "b1d4012474a3042f31a69a8a438b64cbc560696e", "filename": "compiler/rustc_codegen_ssa/src/back/link.rs", "status": "modified", "additions": 9, "deletions": 17, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/7c93154a30a640b8120c5aca68bffb886dcd02e6/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c93154a30a640b8120c5aca68bffb886dcd02e6/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs?ref=7c93154a30a640b8120c5aca68bffb886dcd02e6", "patch": "@@ -101,14 +101,9 @@ pub fn link_binary<'a, B: ArchiveBuilder<'a>>(\n             match crate_type {\n                 CrateType::Rlib => {\n                     let _timer = sess.timer(\"link_rlib\");\n-                    link_rlib::<B>(\n-                        sess,\n-                        codegen_results,\n-                        RlibFlavor::Normal,\n-                        &out_filename,\n-                        &path,\n-                    )?\n-                    .build();\n+                    info!(\"preparing rlib to {:?}\", out_filename);\n+                    link_rlib::<B>(sess, codegen_results, RlibFlavor::Normal, &path)?\n+                        .build(&out_filename);\n                 }\n                 CrateType::Staticlib => {\n                     link_staticlib::<B>(sess, codegen_results, &out_filename, &path)?;\n@@ -249,14 +244,11 @@ fn link_rlib<'a, B: ArchiveBuilder<'a>>(\n     sess: &'a Session,\n     codegen_results: &CodegenResults,\n     flavor: RlibFlavor,\n-    out_filename: &Path,\n     tmpdir: &MaybeTempDir,\n ) -> Result<B, ErrorGuaranteed> {\n-    info!(\"preparing rlib to {:?}\", out_filename);\n-\n     let lib_search_paths = archive_search_paths(sess);\n \n-    let mut ab = <B as ArchiveBuilder>::new(sess, out_filename);\n+    let mut ab = <B as ArchiveBuilder>::new(sess);\n \n     let trailing_metadata = match flavor {\n         RlibFlavor::Normal => {\n@@ -451,8 +443,8 @@ fn link_staticlib<'a, B: ArchiveBuilder<'a>>(\n     out_filename: &Path,\n     tempdir: &MaybeTempDir,\n ) -> Result<(), ErrorGuaranteed> {\n-    let mut ab =\n-        link_rlib::<B>(sess, codegen_results, RlibFlavor::StaticlibBase, out_filename, tempdir)?;\n+    info!(\"preparing staticlib to {:?}\", out_filename);\n+    let mut ab = link_rlib::<B>(sess, codegen_results, RlibFlavor::StaticlibBase, tempdir)?;\n     let mut all_native_libs = vec![];\n \n     let res = each_linked_rlib(&codegen_results.crate_info, &mut |cnum, path| {\n@@ -514,7 +506,7 @@ fn link_staticlib<'a, B: ArchiveBuilder<'a>>(\n         sess.fatal(&e);\n     }\n \n-    ab.build();\n+    ab.build(out_filename);\n \n     if !all_native_libs.is_empty() {\n         if sess.opts.prints.contains(&PrintRequest::NativeStaticLibs) {\n@@ -2479,7 +2471,7 @@ fn add_upstream_rust_crates<'a, B: ArchiveBuilder<'a>>(\n             let is_builtins = sess.target.no_builtins\n                 || !codegen_results.crate_info.is_no_builtins.contains(&cnum);\n \n-            let mut archive = <B as ArchiveBuilder>::new(sess, &dst);\n+            let mut archive = <B as ArchiveBuilder>::new(sess);\n             if let Err(e) = archive.add_archive(cratepath, move |f| {\n                 if f == METADATA_FILENAME {\n                     return true;\n@@ -2510,7 +2502,7 @@ fn add_upstream_rust_crates<'a, B: ArchiveBuilder<'a>>(\n             }) {\n                 sess.fatal(&format!(\"failed to build archive from rlib: {}\", e));\n             }\n-            if archive.build() {\n+            if archive.build(&dst) {\n                 link_upstream(&dst);\n             }\n         });"}]}