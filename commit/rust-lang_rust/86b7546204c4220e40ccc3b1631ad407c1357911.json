{"sha": "86b7546204c4220e40ccc3b1631ad407c1357911", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg2Yjc1NDYyMDRjNDIyMGU0MGNjYzNiMTYzMWFkNDA3YzEzNTc5MTE=", "commit": {"author": {"name": "Zack M. Davis", "email": "code@zackmdavis.net", "date": "2017-08-07T04:36:06Z"}, "committer": {"name": "Zack M. Davis", "email": "code@zackmdavis.net", "date": "2017-08-07T04:36:57Z"}, "message": "fixing doctest failures in resurfaced extended information\n\nAfter repatriating error explanations to the global registry, some lurking\ndoctest failures surfaced and needed to be chased down. Sadly, a few doctests\nneeded to be ignored due to a not-yet-understood regression in the doctest\n`compile_fail` functionality (filed #43707).", "tree": {"sha": "c184bc010bee3ecd9ea187951b1a1e7528e30865", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c184bc010bee3ecd9ea187951b1a1e7528e30865"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/86b7546204c4220e40ccc3b1631ad407c1357911", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/86b7546204c4220e40ccc3b1631ad407c1357911", "html_url": "https://github.com/rust-lang/rust/commit/86b7546204c4220e40ccc3b1631ad407c1357911", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/86b7546204c4220e40ccc3b1631ad407c1357911/comments", "author": {"login": "zackmdavis", "id": 1076988, "node_id": "MDQ6VXNlcjEwNzY5ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/1076988?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zackmdavis", "html_url": "https://github.com/zackmdavis", "followers_url": "https://api.github.com/users/zackmdavis/followers", "following_url": "https://api.github.com/users/zackmdavis/following{/other_user}", "gists_url": "https://api.github.com/users/zackmdavis/gists{/gist_id}", "starred_url": "https://api.github.com/users/zackmdavis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zackmdavis/subscriptions", "organizations_url": "https://api.github.com/users/zackmdavis/orgs", "repos_url": "https://api.github.com/users/zackmdavis/repos", "events_url": "https://api.github.com/users/zackmdavis/events{/privacy}", "received_events_url": "https://api.github.com/users/zackmdavis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "zackmdavis", "id": 1076988, "node_id": "MDQ6VXNlcjEwNzY5ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/1076988?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zackmdavis", "html_url": "https://github.com/zackmdavis", "followers_url": "https://api.github.com/users/zackmdavis/followers", "following_url": "https://api.github.com/users/zackmdavis/following{/other_user}", "gists_url": "https://api.github.com/users/zackmdavis/gists{/gist_id}", "starred_url": "https://api.github.com/users/zackmdavis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zackmdavis/subscriptions", "organizations_url": "https://api.github.com/users/zackmdavis/orgs", "repos_url": "https://api.github.com/users/zackmdavis/repos", "events_url": "https://api.github.com/users/zackmdavis/events{/privacy}", "received_events_url": "https://api.github.com/users/zackmdavis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7efeade2685232ed01f65b69e6d8ad710eceb351", "url": "https://api.github.com/repos/rust-lang/rust/commits/7efeade2685232ed01f65b69e6d8ad710eceb351", "html_url": "https://github.com/rust-lang/rust/commit/7efeade2685232ed01f65b69e6d8ad710eceb351"}], "stats": {"total": 48, "additions": 34, "deletions": 14}, "files": [{"sha": "6530b356e33f43f024a75e5fd135e7fcf1158b23", "filename": "src/librustc_mir/diagnostics.rs", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/86b7546204c4220e40ccc3b1631ad407c1357911/src%2Flibrustc_mir%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86b7546204c4220e40ccc3b1631ad407c1357911/src%2Flibrustc_mir%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdiagnostics.rs?ref=86b7546204c4220e40ccc3b1631ad407c1357911", "patch": "@@ -122,10 +122,8 @@ On the other hand, static and constant pointers can point either to\n a known numeric address or to the address of a symbol.\n \n ```\n+static MY_STATIC: u32 = 42;\n static MY_STATIC_ADDR: &'static u32 = &MY_STATIC;\n-// ... and also\n-static MY_STATIC_ADDR2: *const u32 = &MY_STATIC;\n-\n const CONST_ADDR: *const u8 = 0x5f3759df as *const u8;\n ```\n \n@@ -160,6 +158,16 @@ Remember: you can't use a function call inside a const's initialization\n expression! However, you can totally use it anywhere else:\n \n ```\n+enum Test {\n+    V1\n+}\n+\n+impl Test {\n+    fn func(&self) -> i32 {\n+        12\n+    }\n+}\n+\n fn main() {\n     const FOO: Test = Test::V1;\n "}, {"sha": "907a258a12dc68063df770b6ab2425a0bd40635e", "filename": "src/librustc_passes/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/86b7546204c4220e40ccc3b1631ad407c1357911/src%2Flibrustc_passes%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86b7546204c4220e40ccc3b1631ad407c1357911/src%2Flibrustc_passes%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fdiagnostics.rs?ref=86b7546204c4220e40ccc3b1631ad407c1357911", "patch": "@@ -221,7 +221,7 @@ while break {}\n \n To fix this, add a label specifying which loop is being broken out of:\n ```\n-`foo: while break `foo {}\n+'foo: while break 'foo {}\n ```\n \"##\n }"}, {"sha": "6598ecb94448b7bbb15d47e56656151a050c40d2", "filename": "src/libsyntax/diagnostic_list.rs", "status": "modified", "additions": 22, "deletions": 10, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/86b7546204c4220e40ccc3b1631ad407c1357911/src%2Flibsyntax%2Fdiagnostic_list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86b7546204c4220e40ccc3b1631ad407c1357911/src%2Flibsyntax%2Fdiagnostic_list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fdiagnostic_list.rs?ref=86b7546204c4220e40ccc3b1631ad407c1357911", "patch": "@@ -42,7 +42,7 @@ The `inline` attribute was malformed.\n \n Erroneous code example:\n \n-```compile_fail,E0534\n+```ignore (compile_fail not working here; see Issue #43707)\n #[inline()] // error: expected one argument\n pub fn something() {}\n \n@@ -80,7 +80,7 @@ An unknown argument was given to the `inline` attribute.\n \n Erroneous code example:\n \n-```compile_fail,E0535\n+```ignore (compile_fail not working here; see Issue #43707)\n #[inline(unknown)] // error: invalid argument\n pub fn something() {}\n \n@@ -190,7 +190,9 @@ A literal was used in an attribute that doesn't support literals.\n \n Erroneous code example:\n \n-```compile_fail,E0565\n+```ignore (compile_fail not working here; see Issue #43707)\n+#![feature(attr_literals)]\n+\n #[inline(\"always\")] // error: unsupported literal\n pub fn something() {}\n ```\n@@ -209,7 +211,7 @@ A file wasn't found for an out-of-line module.\n \n Erroneous code example:\n \n-```compile_fail,E0583\n+```ignore (compile_fail not working here; see Issue #43707)\n mod file_that_doesnt_exist; // error: file not found for module\n \n fn main() {}\n@@ -251,23 +253,33 @@ An inclusive range was used with no end.\n Erroneous code example:\n \n ```compile_fail,E0586\n-let tmp = vec![0, 1, 2, 3, 4, 4, 3, 3, 2, 1];\n-let x = &tmp[1...]; // error: inclusive range was used with no end\n+#![feature(inclusive_range_syntax)]\n+\n+fn main() {\n+    let tmp = vec![0, 1, 2, 3, 4, 4, 3, 3, 2, 1];\n+    let x = &tmp[1...]; // error: inclusive range was used with no end\n+}\n ```\n \n An inclusive range needs an end in order to *include* it. If you just need a\n start and no end, use a non-inclusive range (with `..`):\n \n ```\n-let tmp = vec![0, 1, 2, 3, 4, 4, 3, 3, 2, 1];\n-let x = &tmp[1..]; // ok!\n+fn main() {\n+    let tmp = vec![0, 1, 2, 3, 4, 4, 3, 3, 2, 1];\n+    let x = &tmp[1..]; // ok!\n+}\n ```\n \n Or put an end to your inclusive range:\n \n ```\n-let tmp = vec![0, 1, 2, 3, 4, 4, 3, 3, 2, 1];\n-let x = &tmp[1...3]; // ok!\n+#![feature(inclusive_range_syntax)]\n+\n+fn main() {\n+    let tmp = vec![0, 1, 2, 3, 4, 4, 3, 3, 2, 1];\n+    let x = &tmp[1...3]; // ok!\n+}\n ```\n \"##,\n "}]}