{"sha": "eafcf6ba417973c0d8658b9cfe8c21d809aaa381", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVhZmNmNmJhNDE3OTczYzBkODY1OGI5Y2ZlOGMyMWQ4MDlhYWEzODE=", "commit": {"author": {"name": "Jonas Hietala", "email": "tradet.h@gmail.com", "date": "2014-07-22T11:40:38Z"}, "committer": {"name": "Jonas Hietala", "email": "tradet.h@gmail.com", "date": "2014-07-22T12:06:45Z"}, "message": "doc: Vec::from_raw_parts.\n\nAlso more explicit raw pointer handling in unsafe examples.", "tree": {"sha": "7f5e92fe424d4d96cff11ed3d971ecbcdec60820", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7f5e92fe424d4d96cff11ed3d971ecbcdec60820"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eafcf6ba417973c0d8658b9cfe8c21d809aaa381", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eafcf6ba417973c0d8658b9cfe8c21d809aaa381", "html_url": "https://github.com/rust-lang/rust/commit/eafcf6ba417973c0d8658b9cfe8c21d809aaa381", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eafcf6ba417973c0d8658b9cfe8c21d809aaa381/comments", "author": {"login": "treeman", "id": 162027, "node_id": "MDQ6VXNlcjE2MjAyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/162027?v=4", "gravatar_id": "", "url": "https://api.github.com/users/treeman", "html_url": "https://github.com/treeman", "followers_url": "https://api.github.com/users/treeman/followers", "following_url": "https://api.github.com/users/treeman/following{/other_user}", "gists_url": "https://api.github.com/users/treeman/gists{/gist_id}", "starred_url": "https://api.github.com/users/treeman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/treeman/subscriptions", "organizations_url": "https://api.github.com/users/treeman/orgs", "repos_url": "https://api.github.com/users/treeman/repos", "events_url": "https://api.github.com/users/treeman/events{/privacy}", "received_events_url": "https://api.github.com/users/treeman/received_events", "type": "User", "site_admin": false}, "committer": {"login": "treeman", "id": 162027, "node_id": "MDQ6VXNlcjE2MjAyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/162027?v=4", "gravatar_id": "", "url": "https://api.github.com/users/treeman", "html_url": "https://github.com/treeman", "followers_url": "https://api.github.com/users/treeman/followers", "following_url": "https://api.github.com/users/treeman/following{/other_user}", "gists_url": "https://api.github.com/users/treeman/gists{/gist_id}", "starred_url": "https://api.github.com/users/treeman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/treeman/subscriptions", "organizations_url": "https://api.github.com/users/treeman/orgs", "repos_url": "https://api.github.com/users/treeman/repos", "events_url": "https://api.github.com/users/treeman/events{/privacy}", "received_events_url": "https://api.github.com/users/treeman/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4357da356071e34278c5ef29aa1480360d0659b5", "url": "https://api.github.com/repos/rust-lang/rust/commits/4357da356071e34278c5ef29aa1480360d0659b5", "html_url": "https://github.com/rust-lang/rust/commit/4357da356071e34278c5ef29aa1480360d0659b5"}], "stats": {"total": 42, "additions": 37, "deletions": 5}, "files": [{"sha": "99eba0da19d1dac51e08814b080cadfc0cc83f62", "filename": "src/libcollections/vec.rs", "status": "modified", "additions": 37, "deletions": 5, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/eafcf6ba417973c0d8658b9cfe8c21d809aaa381/src%2Flibcollections%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eafcf6ba417973c0d8658b9cfe8c21d809aaa381/src%2Flibcollections%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec.rs?ref=eafcf6ba417973c0d8658b9cfe8c21d809aaa381", "patch": "@@ -204,6 +204,37 @@ impl<T> Vec<T> {\n     /// - there must be `length` valid instances of type `T` at the\n     ///   beginning of that allocation\n     /// - `ptr` must be allocated by the default `Vec` allocator\n+    ///\n+    /// # Example\n+    ///\n+    /// ```\n+    /// use std::ptr;\n+    /// use std::mem;\n+    ///\n+    /// fn main() {\n+    ///     let mut v = vec![1i, 2, 3];\n+    ///\n+    ///     // Pull out the various important pieces of information about `v`\n+    ///     let p = v.as_mut_ptr();\n+    ///     let len = v.len();\n+    ///     let cap = v.capacity();\n+    ///\n+    ///     unsafe {\n+    ///         // Cast `v` into the void: no destructor run, so we are in\n+    ///         // complete control of the allocation to which `p` points.\n+    ///         mem::forget(v);\n+    ///\n+    ///         // Overwrite memory with 4, 5, 6\n+    ///         for i in range(0, len as int) {\n+    ///             ptr::write(p.offset(i), 4 + i);\n+    ///         }\n+    ///\n+    ///         // Put everything back together into a Vec\n+    ///         let rebuilt = Vec::from_raw_parts(len, cap, p);\n+    ///         assert_eq!(rebuilt, vec![4i, 5i, 6i]);\n+    ///     }\n+    /// }\n+    /// ```\n     pub unsafe fn from_raw_parts(length: uint, capacity: uint,\n                                  ptr: *mut T) -> Vec<T> {\n         Vec { len: length, cap: capacity, ptr: ptr }\n@@ -1312,13 +1343,13 @@ impl<T> Vec<T> {\n     /// # Example\n     ///\n     /// ```\n-    /// use std::vec::raw;\n-    ///\n     /// let v = vec![1i, 2, 3];\n     /// let p = v.as_ptr();\n     /// unsafe {\n-    ///     let b = raw::from_buf(p, 3u);\n-    ///     assert_eq!(b, vec![1i, 2, 3]);\n+    ///     // Examine each element manually\n+    ///     assert_eq!(*p, 1i);\n+    ///     assert_eq!(*p.offset(1), 2i);\n+    ///     assert_eq!(*p.offset(2), 3i);\n     /// }\n     /// ```\n     #[inline]\n@@ -1343,8 +1374,9 @@ impl<T> Vec<T> {\n     /// let p = v.as_mut_ptr();\n     /// unsafe {\n     ///     ptr::write(p, 9i);\n+    ///     ptr::write(p.offset(2), 5i);\n     /// }\n-    /// assert_eq!(v, vec![9i, 2, 3]);\n+    /// assert_eq!(v, vec![9i, 2, 5]);\n     /// ```\n     #[inline]\n     pub fn as_mut_ptr(&mut self) -> *mut T {"}]}