{"sha": "a0580610b244b246c29f9ff0062c9039de1afcdb", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEwNTgwNjEwYjI0NGIyNDZjMjlmOWZmMDA2MmM5MDM5ZGUxYWZjZGI=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-07-14T14:38:50Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-07-14T14:38:50Z"}, "message": "Use `From::from` instead of `as` where possible", "tree": {"sha": "79401a44365519aca3a082493f2bebf31cfaa0c2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/79401a44365519aca3a082493f2bebf31cfaa0c2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a0580610b244b246c29f9ff0062c9039de1afcdb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a0580610b244b246c29f9ff0062c9039de1afcdb", "html_url": "https://github.com/rust-lang/rust/commit/a0580610b244b246c29f9ff0062c9039de1afcdb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a0580610b244b246c29f9ff0062c9039de1afcdb/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4ec2831ebcf96775fe6de97ab4c73eb1368b667a", "url": "https://api.github.com/repos/rust-lang/rust/commits/4ec2831ebcf96775fe6de97ab4c73eb1368b667a", "html_url": "https://github.com/rust-lang/rust/commit/4ec2831ebcf96775fe6de97ab4c73eb1368b667a"}], "stats": {"total": 58, "additions": 29, "deletions": 29}, "files": [{"sha": "f53aad1c259a15c11084716e68cd6a2514350a31", "filename": "src/abi/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a0580610b244b246c29f9ff0062c9039de1afcdb/src%2Fabi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0580610b244b246c29f9ff0062c9039de1afcdb/src%2Fabi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fabi%2Fmod.rs?ref=a0580610b244b246c29f9ff0062c9039de1afcdb", "patch": "@@ -273,7 +273,7 @@ impl<'tcx, B: Backend + 'static> FunctionCx<'_, 'tcx, B> {\n         let ret_vals = self.lib_call(name, input_tys, return_tys, &args);\n         match *ret_vals {\n             [] => CValue::by_ref(\n-                Pointer::const_addr(self, self.pointer_type.bytes() as i64),\n+                Pointer::const_addr(self, i64::from(self.pointer_type.bytes())),\n                 return_layout,\n             ),\n             [val] => CValue::by_val(val, return_layout),"}, {"sha": "155f9dea8bc167ca5279ed4caecb020a7762bc54", "filename": "src/base.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a0580610b244b246c29f9ff0062c9039de1afcdb/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0580610b244b246c29f9ff0062c9039de1afcdb/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=a0580610b244b246c29f9ff0062c9039de1afcdb", "patch": "@@ -778,10 +778,10 @@ pub(crate) fn trans_place<'tcx>(\n                 from_end,\n             } => {\n                 let index = if !from_end {\n-                    fx.bcx.ins().iconst(fx.pointer_type, offset as i64)\n+                    fx.bcx.ins().iconst(fx.pointer_type, i64::from(offset))\n                 } else {\n                     let len = codegen_array_len(fx, cplace);\n-                    fx.bcx.ins().iadd_imm(len, -(offset as i64))\n+                    fx.bcx.ins().iadd_imm(len, -i64::from(offset))\n                 };\n                 cplace = cplace.place_index(fx, index);\n             }\n@@ -795,8 +795,8 @@ pub(crate) fn trans_place<'tcx>(\n                         let elem_layout = fx.layout_of(elem_ty);\n                         let ptr = cplace.to_ptr();\n                         cplace = CPlace::for_ptr(\n-                            ptr.offset_i64(fx, elem_layout.size.bytes() as i64 * from as i64),\n-                            fx.layout_of(fx.tcx.mk_array(elem_ty, to as u64 - from as u64)),\n+                            ptr.offset_i64(fx, elem_layout.size.bytes() as i64 * i64::from(from)),\n+                            fx.layout_of(fx.tcx.mk_array(elem_ty, u64::from(to) - u64::from(from))),\n                         );\n                     }\n                     ty::Slice(elem_ty) => {\n@@ -805,8 +805,8 @@ pub(crate) fn trans_place<'tcx>(\n                         let (ptr, len) = cplace.to_ptr_maybe_unsized();\n                         let len = len.unwrap();\n                         cplace = CPlace::for_ptr_with_extra(\n-                            ptr.offset_i64(fx, elem_layout.size.bytes() as i64 * from as i64),\n-                            fx.bcx.ins().iadd_imm(len, -(from as i64 + to as i64)),\n+                            ptr.offset_i64(fx, elem_layout.size.bytes() as i64 * i64::from(from)),\n+                            fx.bcx.ins().iadd_imm(len, -(i64::from(from) + i64::from(to))),\n                             cplace.layout(),\n                         );\n                     }"}, {"sha": "36e060496b1dabe7b5169e0354c59ab255bc6bdb", "filename": "src/cast.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a0580610b244b246c29f9ff0062c9039de1afcdb/src%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0580610b244b246c29f9ff0062c9039de1afcdb/src%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcast.rs?ref=a0580610b244b246c29f9ff0062c9039de1afcdb", "patch": "@@ -160,10 +160,10 @@ pub(crate) fn clif_int_or_float_cast(\n                 fx.bcx.ins().fcvt_to_uint_sat(types::I32, from)\n             };\n             let (min, max) = match (to_ty, to_signed) {\n-                (types::I8, false) => (0, u8::MAX as i64),\n-                (types::I16, false) => (0, u16::MAX as i64),\n-                (types::I8, true) => (i8::MIN as i64, i8::MAX as i64),\n-                (types::I16, true) => (i16::MIN as i64, i16::MAX as i64),\n+                (types::I8, false) => (0, i64::from(u8::MAX)),\n+                (types::I16, false) => (0, i64::from(u16::MAX)),\n+                (types::I8, true) => (i64::from(i8::MIN), i64::from(i8::MAX)),\n+                (types::I16, true) => (i64::from(i16::MIN), i64::from(i16::MAX)),\n                 _ => unreachable!(),\n             };\n             let min_val = fx.bcx.ins().iconst(types::I32, min);"}, {"sha": "c8fcbbe1d37fe0d5aaeecb795b62da727ca93887", "filename": "src/common.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/a0580610b244b246c29f9ff0062c9039de1afcdb/src%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0580610b244b246c29f9ff0062c9039de1afcdb/src%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcommon.rs?ref=a0580610b244b246c29f9ff0062c9039de1afcdb", "patch": "@@ -172,8 +172,8 @@ fn resolve_128bit_value_imm(func: &Function, val: Value) -> Option<u128> {\n         return None;\n     };\n \n-    let lsb = resolve_normal_value_imm(func, lsb)? as u64 as u128;\n-    let msb = resolve_normal_value_imm(func, msb)? as u64 as u128;\n+    let lsb = u128::from(resolve_normal_value_imm(func, lsb)? as u64);\n+    let msb = u128::from(resolve_normal_value_imm(func, msb)? as u64);\n \n     Some(msb << 64 | lsb)\n }\n@@ -182,7 +182,7 @@ pub(crate) fn resolve_value_imm(func: &Function, val: Value) -> Option<u128> {\n     if func.dfg.value_type(val) == types::I128 {\n         resolve_128bit_value_imm(func, val)\n     } else {\n-        resolve_normal_value_imm(func, val).map(|imm| imm as u64 as u128)\n+        resolve_normal_value_imm(func, val).map(|imm| u128::from(imm as u64))\n     }\n }\n \n@@ -217,21 +217,21 @@ pub(crate) fn type_min_max_value(bcx: &mut FunctionBuilder<'_>, ty: Type, signed\n         (types::I8, false) | (types::I16, false) | (types::I32, false) | (types::I64, false) => {\n             0i64\n         }\n-        (types::I8, true) => i8::MIN as i64,\n-        (types::I16, true) => i16::MIN as i64,\n-        (types::I32, true) => i32::MIN as i64,\n+        (types::I8, true) => i64::from(i8::MIN),\n+        (types::I16, true) => i64::from(i16::MIN),\n+        (types::I32, true) => i64::from(i32::MIN),\n         (types::I64, true) => i64::MIN,\n         _ => unreachable!(),\n     };\n \n     let max = match (ty, signed) {\n-        (types::I8, false) => u8::MAX as i64,\n-        (types::I16, false) => u16::MAX as i64,\n-        (types::I32, false) => u32::MAX as i64,\n+        (types::I8, false) => i64::from(u8::MAX),\n+        (types::I16, false) => i64::from(u16::MAX),\n+        (types::I32, false) => i64::from(u32::MAX),\n         (types::I64, false) => u64::MAX as i64,\n-        (types::I8, true) => i8::MAX as i64,\n-        (types::I16, true) => i16::MAX as i64,\n-        (types::I32, true) => i32::MAX as i64,\n+        (types::I8, true) => i64::from(i8::MAX),\n+        (types::I16, true) => i64::from(i16::MAX),\n+        (types::I32, true) => i64::from(i32::MAX),\n         (types::I64, true) => i64::MAX,\n         _ => unreachable!(),\n     };"}, {"sha": "89dccb8545fc619a0ff8a92e00c36056f746f836", "filename": "src/debuginfo/line_info.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a0580610b244b246c29f9ff0062c9039de1afcdb/src%2Fdebuginfo%2Fline_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0580610b244b246c29f9ff0062c9039de1afcdb/src%2Fdebuginfo%2Fline_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdebuginfo%2Fline_info.rs?ref=a0580610b244b246c29f9ff0062c9039de1afcdb", "patch": "@@ -197,7 +197,7 @@ impl<'tcx> DebugContext<'tcx> {\n \n         if let Some(ref mcr) = &context.mach_compile_result {\n             for &MachSrcLoc { start, end, loc } in mcr.buffer.get_srclocs_sorted() {\n-                line_program.row().address_offset = start as u64;\n+                line_program.row().address_offset = u64::from(start);\n                 if !loc.is_default() {\n                     let source_info = *source_info_set.get_index(loc.bits() as usize).unwrap();\n                     create_row_for_span(line_program, source_info.span);\n@@ -207,7 +207,7 @@ impl<'tcx> DebugContext<'tcx> {\n                 func_end = end;\n             }\n \n-            line_program.end_sequence(func_end as u64);\n+            line_program.end_sequence(u64::from(func_end));\n \n             func_end = mcr.buffer.total_size();\n         } else {\n@@ -218,7 +218,7 @@ impl<'tcx> DebugContext<'tcx> {\n             for block in blocks {\n                 for (offset, inst, size) in func.inst_offsets(block, &encinfo) {\n                     let srcloc = func.srclocs[inst];\n-                    line_program.row().address_offset = offset as u64;\n+                    line_program.row().address_offset = u64::from(offset);\n                     if !srcloc.is_default() {\n                         let source_info = *source_info_set.get_index(srcloc.bits() as usize).unwrap();\n                         create_row_for_span(line_program, source_info.span);\n@@ -228,7 +228,7 @@ impl<'tcx> DebugContext<'tcx> {\n                     func_end = offset + size;\n                 }\n             }\n-            line_program.end_sequence(func_end as u64);\n+            line_program.end_sequence(u64::from(func_end));\n         }\n \n         assert_ne!(func_end, 0);\n@@ -241,7 +241,7 @@ impl<'tcx> DebugContext<'tcx> {\n                 addend: 0,\n             }),\n         );\n-        entry.set(gimli::DW_AT_high_pc, AttributeValue::Udata(func_end as u64));\n+        entry.set(gimli::DW_AT_high_pc, AttributeValue::Udata(u64::from(func_end)));\n \n         self.emit_location(entry_id, function_span);\n "}, {"sha": "f3ba3b5ad117fae3046c25de0e7dae5a656c5554", "filename": "src/debuginfo/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a0580610b244b246c29f9ff0062c9039de1afcdb/src%2Fdebuginfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0580610b244b246c29f9ff0062c9039de1afcdb/src%2Fdebuginfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdebuginfo%2Fmod.rs?ref=a0580610b244b246c29f9ff0062c9039de1afcdb", "patch": "@@ -433,7 +433,7 @@ fn translate_loc(isa: &dyn TargetIsa, loc: ValueLoc, stack_slots: &StackSlots) -\n         ValueLoc::Stack(ss) => {\n             if let Some(ss_offset) = stack_slots[ss].offset {\n                 let mut expr = Expression::new();\n-                expr.op_breg(X86_64::RBP, ss_offset as i64 + 16);\n+                expr.op_breg(X86_64::RBP, i64::from(ss_offset) + 16);\n                 Some(expr)\n             } else {\n                 None"}]}