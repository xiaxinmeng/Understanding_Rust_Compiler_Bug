{"sha": "1a94193602e65c99344ba313c71d4298b0d4c0cc", "node_id": "C_kwDOAAsO6NoAKDFhOTQxOTM2MDJlNjVjOTkzNDRiYTMxM2M3MWQ0Mjk4YjBkNGMwY2M", "commit": {"author": {"name": "oxalica", "email": "oxalicc@pm.me", "date": "2022-08-06T20:17:04Z"}, "committer": {"name": "oxalica", "email": "oxalicc@pm.me", "date": "2022-08-06T20:52:49Z"}, "message": "Impl more methods and traits for la_arena::ArenaMap", "tree": {"sha": "9508194a2e9639cd04674e5b5d447392803d0e0b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9508194a2e9639cd04674e5b5d447392803d0e0b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1a94193602e65c99344ba313c71d4298b0d4c0cc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1a94193602e65c99344ba313c71d4298b0d4c0cc", "html_url": "https://github.com/rust-lang/rust/commit/1a94193602e65c99344ba313c71d4298b0d4c0cc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1a94193602e65c99344ba313c71d4298b0d4c0cc/comments", "author": {"login": "oxalica", "id": 14816024, "node_id": "MDQ6VXNlcjE0ODE2MDI0", "avatar_url": "https://avatars.githubusercontent.com/u/14816024?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oxalica", "html_url": "https://github.com/oxalica", "followers_url": "https://api.github.com/users/oxalica/followers", "following_url": "https://api.github.com/users/oxalica/following{/other_user}", "gists_url": "https://api.github.com/users/oxalica/gists{/gist_id}", "starred_url": "https://api.github.com/users/oxalica/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oxalica/subscriptions", "organizations_url": "https://api.github.com/users/oxalica/orgs", "repos_url": "https://api.github.com/users/oxalica/repos", "events_url": "https://api.github.com/users/oxalica/events{/privacy}", "received_events_url": "https://api.github.com/users/oxalica/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oxalica", "id": 14816024, "node_id": "MDQ6VXNlcjE0ODE2MDI0", "avatar_url": "https://avatars.githubusercontent.com/u/14816024?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oxalica", "html_url": "https://github.com/oxalica", "followers_url": "https://api.github.com/users/oxalica/followers", "following_url": "https://api.github.com/users/oxalica/following{/other_user}", "gists_url": "https://api.github.com/users/oxalica/gists{/gist_id}", "starred_url": "https://api.github.com/users/oxalica/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oxalica/subscriptions", "organizations_url": "https://api.github.com/users/oxalica/orgs", "repos_url": "https://api.github.com/users/oxalica/repos", "events_url": "https://api.github.com/users/oxalica/events{/privacy}", "received_events_url": "https://api.github.com/users/oxalica/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d9e462fd97fe56a63da62d11bb5c4d2132e4c74a", "url": "https://api.github.com/repos/rust-lang/rust/commits/d9e462fd97fe56a63da62d11bb5c4d2132e4c74a", "html_url": "https://github.com/rust-lang/rust/commit/d9e462fd97fe56a63da62d11bb5c4d2132e4c74a"}], "stats": {"total": 43, "additions": 43, "deletions": 0}, "files": [{"sha": "3034e33a78857dc3b6abbc7bf2a0914e02423742", "filename": "lib/la-arena/src/map.rs", "status": "modified", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/1a94193602e65c99344ba313c71d4298b0d4c0cc/lib%2Fla-arena%2Fsrc%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a94193602e65c99344ba313c71d4298b0d4c0cc/lib%2Fla-arena%2Fsrc%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/lib%2Fla-arena%2Fsrc%2Fmap.rs?ref=1a94193602e65c99344ba313c71d4298b0d4c0cc", "patch": "@@ -21,6 +21,33 @@ impl<T, V> ArenaMap<Idx<T>, V> {\n         Self { v: Vec::with_capacity(capacity), _ty: PhantomData }\n     }\n \n+    /// Reserves capacity for at least additional more elements to be inserted in the map.\n+    pub fn reserve(&mut self, additional: usize) {\n+        self.v.reserve(additional);\n+    }\n+\n+    /// Clears the map, removing all elements.\n+    pub fn clear(&mut self) {\n+        self.v.clear();\n+    }\n+\n+    /// Shrinks the capacity of the map as much as possible.\n+    pub fn shrink_to_fit(&mut self) {\n+        let min_len = self.v.iter().rposition(|slot| slot.is_some()).map_or(0, |i| i + 1);\n+        self.v.truncate(min_len);\n+        self.v.shrink_to_fit();\n+    }\n+\n+    /// Returns whether the map contains a value for the specified index.\n+    pub fn contains_idx(&self, idx: Idx<T>) -> bool {\n+        matches!(self.v.get(Self::to_idx(idx)), Some(Some(_)))\n+    }\n+\n+    /// Removes an index from the map, returning the value at the index if the index was previously in the map.\n+    pub fn remove(&mut self, idx: Idx<T>) -> Option<V> {\n+        self.v.get_mut(Self::to_idx(idx))?.take()\n+    }\n+\n     /// Inserts a value associated with a given arena index into the map.\n     pub fn insert(&mut self, idx: Idx<T>, t: V) {\n         let idx = Self::to_idx(idx);\n@@ -94,6 +121,22 @@ impl<T, V> Default for ArenaMap<Idx<V>, T> {\n     }\n }\n \n+impl<T, V> Extend<(Idx<V>, T)> for ArenaMap<Idx<V>, T> {\n+    fn extend<I: IntoIterator<Item = (Idx<V>, T)>>(&mut self, iter: I) {\n+        iter.into_iter().for_each(move |(k, v)| {\n+            self.insert(k, v);\n+        });\n+    }\n+}\n+\n+impl<T, V> FromIterator<(Idx<V>, T)> for ArenaMap<Idx<V>, T> {\n+    fn from_iter<I: IntoIterator<Item = (Idx<V>, T)>>(iter: I) -> Self {\n+        let mut this = Self::new();\n+        this.extend(iter);\n+        this\n+    }\n+}\n+\n /// A view into a single entry in a map, which may either be vacant or occupied.\n ///\n /// This `enum` is constructed from the [`entry`] method on [`ArenaMap`]."}]}