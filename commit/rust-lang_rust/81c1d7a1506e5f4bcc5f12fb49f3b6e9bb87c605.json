{"sha": "81c1d7a1506e5f4bcc5f12fb49f3b6e9bb87c605", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgxYzFkN2ExNTA2ZTVmNGJjYzVmMTJmYjQ5ZjNiNmU5YmI4N2M2MDU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-03-18T02:32:39Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-03-18T02:32:39Z"}, "message": "Auto merge of #76447 - pickfire:async-pub, r=estebank\n\nDetect async visibility wrong order, `async pub`\n\nPartially address #76437.", "tree": {"sha": "694da0e4224aef84e5c245671096c9265d44f1f6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/694da0e4224aef84e5c245671096c9265d44f1f6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/81c1d7a1506e5f4bcc5f12fb49f3b6e9bb87c605", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/81c1d7a1506e5f4bcc5f12fb49f3b6e9bb87c605", "html_url": "https://github.com/rust-lang/rust/commit/81c1d7a1506e5f4bcc5f12fb49f3b6e9bb87c605", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/81c1d7a1506e5f4bcc5f12fb49f3b6e9bb87c605/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "146f5745606b48afca8e7d7702e363e88caa80e1", "url": "https://api.github.com/repos/rust-lang/rust/commits/146f5745606b48afca8e7d7702e363e88caa80e1", "html_url": "https://github.com/rust-lang/rust/commit/146f5745606b48afca8e7d7702e363e88caa80e1"}, {"sha": "21c157442c1e97745b91b8c3286ceabbc9f7be3f", "url": "https://api.github.com/repos/rust-lang/rust/commits/21c157442c1e97745b91b8c3286ceabbc9f7be3f", "html_url": "https://github.com/rust-lang/rust/commit/21c157442c1e97745b91b8c3286ceabbc9f7be3f"}], "stats": {"total": 186, "additions": 160, "deletions": 26}, "files": [{"sha": "70dbaa53d38a16fe0fadb238c47393ed90ddedb6", "filename": "compiler/rustc_parse/src/parser/item.rs", "status": "modified", "additions": 37, "deletions": 7, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/81c1d7a1506e5f4bcc5f12fb49f3b6e9bb87c605/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81c1d7a1506e5f4bcc5f12fb49f3b6e9bb87c605/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs?ref=81c1d7a1506e5f4bcc5f12fb49f3b6e9bb87c605", "patch": "@@ -204,6 +204,7 @@ impl<'a> Parser<'a> {\n         def: &mut Defaultness,\n         req_name: ReqName,\n     ) -> PResult<'a, Option<ItemInfo>> {\n+        let def_final = def == &Defaultness::Final;\n         let mut def = || mem::replace(def, Defaultness::Final);\n \n         let info = if self.eat_keyword(kw::Use) {\n@@ -226,7 +227,7 @@ impl<'a> Parser<'a> {\n             }\n \n             (Ident::invalid(), ItemKind::Use(tree))\n-        } else if self.check_fn_front_matter() {\n+        } else if self.check_fn_front_matter(def_final) {\n             // FUNCTION ITEM\n             let (ident, sig, generics, body) = self.parse_fn(attrs, req_name, lo)?;\n             (ident, ItemKind::Fn(box FnKind(def(), sig, generics, body)))\n@@ -1634,18 +1635,27 @@ impl<'a> Parser<'a> {\n     }\n \n     /// Is the current token the start of an `FnHeader` / not a valid parse?\n-    pub(super) fn check_fn_front_matter(&mut self) -> bool {\n+    ///\n+    /// `check_pub` adds additional `pub` to the checks in case users place it\n+    /// wrongly, can be used to ensure `pub` never comes after `default`.\n+    pub(super) fn check_fn_front_matter(&mut self, check_pub: bool) -> bool {\n         // We use an over-approximation here.\n         // `const const`, `fn const` won't parse, but we're not stepping over other syntax either.\n-        const QUALS: [Symbol; 4] = [kw::Const, kw::Async, kw::Unsafe, kw::Extern];\n+        // `pub` is added in case users got confused with the ordering like `async pub fn`,\n+        // only if it wasn't preceeded by `default` as `default pub` is invalid.\n+        let quals: &[Symbol] = if check_pub {\n+            &[kw::Pub, kw::Const, kw::Async, kw::Unsafe, kw::Extern]\n+        } else {\n+            &[kw::Const, kw::Async, kw::Unsafe, kw::Extern]\n+        };\n         self.check_keyword(kw::Fn) // Definitely an `fn`.\n             // `$qual fn` or `$qual $qual`:\n-            || QUALS.iter().any(|&kw| self.check_keyword(kw))\n+            || quals.iter().any(|&kw| self.check_keyword(kw))\n                 && self.look_ahead(1, |t| {\n                     // `$qual fn`, e.g. `const fn` or `async fn`.\n                     t.is_keyword(kw::Fn)\n                     // Two qualifiers `$qual $qual` is enough, e.g. `async unsafe`.\n-                    || t.is_non_raw_ident_where(|i| QUALS.contains(&i.name)\n+                    || t.is_non_raw_ident_where(|i| quals.contains(&i.name)\n                         // Rule out 2015 `const async: T = val`.\n                         && i.is_reserved()\n                         // Rule out unsafe extern block.\n@@ -1666,6 +1676,7 @@ impl<'a> Parser<'a> {\n     /// FnFrontMatter = FnQual \"fn\" ;\n     /// ```\n     pub(super) fn parse_fn_front_matter(&mut self) -> PResult<'a, FnHeader> {\n+        let sp_start = self.token.span;\n         let constness = self.parse_constness();\n         let asyncness = self.parse_asyncness();\n         let unsafety = self.parse_unsafety();\n@@ -1679,8 +1690,27 @@ impl<'a> Parser<'a> {\n             // It is possible for `expect_one_of` to recover given the contents of\n             // `self.expected_tokens`, therefore, do not use `self.unexpected()` which doesn't\n             // account for this.\n-            if !self.expect_one_of(&[], &[])? {\n-                unreachable!()\n+            match self.expect_one_of(&[], &[]) {\n+                Ok(true) => {}\n+                Ok(false) => unreachable!(),\n+                Err(mut err) => {\n+                    // Recover incorrect visibility order such as `async pub`.\n+                    if self.check_keyword(kw::Pub) {\n+                        let sp = sp_start.to(self.prev_token.span);\n+                        if let Ok(snippet) = self.span_to_snippet(sp) {\n+                            let vis = self.parse_visibility(FollowedByType::No)?;\n+                            let vs = pprust::vis_to_string(&vis);\n+                            let vs = vs.trim_end();\n+                            err.span_suggestion(\n+                                sp_start.to(self.prev_token.span),\n+                                &format!(\"visibility `{}` must come before `{}`\", vs, snippet),\n+                                format!(\"{} {}\", vs, snippet),\n+                                Applicability::MachineApplicable,\n+                            );\n+                        }\n+                    }\n+                    return Err(err);\n+                }\n             }\n         }\n "}, {"sha": "0f7b8ebd376b9e5c6438afd070f3c456bb1d3be9", "filename": "compiler/rustc_parse/src/parser/ty.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/81c1d7a1506e5f4bcc5f12fb49f3b6e9bb87c605/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81c1d7a1506e5f4bcc5f12fb49f3b6e9bb87c605/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fty.rs?ref=81c1d7a1506e5f4bcc5f12fb49f3b6e9bb87c605", "patch": "@@ -209,15 +209,15 @@ impl<'a> Parser<'a> {\n         } else if self.eat_keyword(kw::Underscore) {\n             // A type to be inferred `_`\n             TyKind::Infer\n-        } else if self.check_fn_front_matter() {\n+        } else if self.check_fn_front_matter(false) {\n             // Function pointer type\n             self.parse_ty_bare_fn(lo, Vec::new(), recover_return_sign)?\n         } else if self.check_keyword(kw::For) {\n             // Function pointer type or bound list (trait object type) starting with a poly-trait.\n             //   `for<'lt> [unsafe] [extern \"ABI\"] fn (&'lt S) -> T`\n             //   `for<'lt> Trait1<'lt> + Trait2 + 'a`\n             let lifetime_defs = self.parse_late_bound_lifetime_defs()?;\n-            if self.check_fn_front_matter() {\n+            if self.check_fn_front_matter(false) {\n                 self.parse_ty_bare_fn(lo, lifetime_defs, recover_return_sign)?\n             } else {\n                 let path = self.parse_path(PathStyle::Type)?;"}, {"sha": "97f19b3da45265a0e2271dde5271c344c361cf2f", "filename": "src/test/ui/parser/duplicate-visibility.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/81c1d7a1506e5f4bcc5f12fb49f3b6e9bb87c605/src%2Ftest%2Fui%2Fparser%2Fduplicate-visibility.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81c1d7a1506e5f4bcc5f12fb49f3b6e9bb87c605/src%2Ftest%2Fui%2Fparser%2Fduplicate-visibility.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fduplicate-visibility.rs?ref=81c1d7a1506e5f4bcc5f12fb49f3b6e9bb87c605", "patch": "@@ -1,7 +1,8 @@\n+// ignore-tidy-linelength\n+\n fn main() {}\n \n extern \"C\" {\n     pub pub fn foo();\n-    //~^ ERROR visibility `pub` is not followed by an item\n-    //~| ERROR non-item in item list\n+    //~^ ERROR expected one of `(`, `async`, `const`, `default`, `extern`, `fn`, `pub`, `unsafe`, or `use`, found keyword `pub`\n }"}, {"sha": "6ac27078ea387f93b16dffde59431ce82c9435bf", "filename": "src/test/ui/parser/duplicate-visibility.stderr", "status": "modified", "additions": 10, "deletions": 15, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/81c1d7a1506e5f4bcc5f12fb49f3b6e9bb87c605/src%2Ftest%2Fui%2Fparser%2Fduplicate-visibility.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/81c1d7a1506e5f4bcc5f12fb49f3b6e9bb87c605/src%2Ftest%2Fui%2Fparser%2Fduplicate-visibility.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fduplicate-visibility.stderr?ref=81c1d7a1506e5f4bcc5f12fb49f3b6e9bb87c605", "patch": "@@ -1,21 +1,16 @@\n-error: visibility `pub` is not followed by an item\n-  --> $DIR/duplicate-visibility.rs:4:5\n-   |\n-LL |     pub pub fn foo();\n-   |     ^^^ the visibility\n-   |\n-   = help: you likely meant to define an item, e.g., `pub fn foo() {}`\n-\n-error: non-item in item list\n-  --> $DIR/duplicate-visibility.rs:4:9\n+error: expected one of `(`, `async`, `const`, `default`, `extern`, `fn`, `pub`, `unsafe`, or `use`, found keyword `pub`\n+  --> $DIR/duplicate-visibility.rs:6:9\n    |\n LL | extern \"C\" {\n-   |            - item list starts here\n+   |            - while parsing this item list starting here\n LL |     pub pub fn foo();\n-   |         ^^^ non-item starts here\n-...\n+   |         ^^^\n+   |         |\n+   |         expected one of 9 possible tokens\n+   |         help: visibility `pub` must come before `pub pub`: `pub pub pub`\n+LL |\n LL | }\n-   | - item list ends here\n+   | - the item list ends here\n \n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n "}, {"sha": "84ee3dd21123c567b1bf9bbf433be1aa2c584d9d", "filename": "src/test/ui/parser/issue-76437-async.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/81c1d7a1506e5f4bcc5f12fb49f3b6e9bb87c605/src%2Ftest%2Fui%2Fparser%2Fissue-76437-async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81c1d7a1506e5f4bcc5f12fb49f3b6e9bb87c605/src%2Ftest%2Fui%2Fparser%2Fissue-76437-async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-76437-async.rs?ref=81c1d7a1506e5f4bcc5f12fb49f3b6e9bb87c605", "patch": "@@ -0,0 +1,7 @@\n+// edition:2018\n+\n+mod t {\n+    async pub fn t() {}\n+    //~^ ERROR expected one of `extern`, `fn`, or `unsafe`, found keyword `pub`\n+    //~| HELP visibility `pub` must come before `async`\n+}"}, {"sha": "2c9c2a8cfba9ba0f2598989fad4afcb09e4fce80", "filename": "src/test/ui/parser/issue-76437-async.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/81c1d7a1506e5f4bcc5f12fb49f3b6e9bb87c605/src%2Ftest%2Fui%2Fparser%2Fissue-76437-async.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/81c1d7a1506e5f4bcc5f12fb49f3b6e9bb87c605/src%2Ftest%2Fui%2Fparser%2Fissue-76437-async.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-76437-async.stderr?ref=81c1d7a1506e5f4bcc5f12fb49f3b6e9bb87c605", "patch": "@@ -0,0 +1,11 @@\n+error: expected one of `extern`, `fn`, or `unsafe`, found keyword `pub`\n+  --> $DIR/issue-76437-async.rs:4:11\n+   |\n+LL |     async pub fn t() {}\n+   |     ------^^^\n+   |     |     |\n+   |     |     expected one of `extern`, `fn`, or `unsafe`\n+   |     help: visibility `pub` must come before `async`: `pub async`\n+\n+error: aborting due to previous error\n+"}, {"sha": "f1e06e4ad89e7c34cc5a6705126d7c310bbe3f2d", "filename": "src/test/ui/parser/issue-76437-const-async-unsafe.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/81c1d7a1506e5f4bcc5f12fb49f3b6e9bb87c605/src%2Ftest%2Fui%2Fparser%2Fissue-76437-const-async-unsafe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81c1d7a1506e5f4bcc5f12fb49f3b6e9bb87c605/src%2Ftest%2Fui%2Fparser%2Fissue-76437-const-async-unsafe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-76437-const-async-unsafe.rs?ref=81c1d7a1506e5f4bcc5f12fb49f3b6e9bb87c605", "patch": "@@ -0,0 +1,7 @@\n+// edition:2018\n+\n+mod t {\n+    const async unsafe pub fn t() {}\n+    //~^ ERROR expected one of `extern` or `fn`, found keyword `pub`\n+    //~| HELP visibility `pub` must come before `const async unsafe`\n+}"}, {"sha": "2e91beda1165d1958faaf5f76aadaf79c7fe6adb", "filename": "src/test/ui/parser/issue-76437-const-async-unsafe.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/81c1d7a1506e5f4bcc5f12fb49f3b6e9bb87c605/src%2Ftest%2Fui%2Fparser%2Fissue-76437-const-async-unsafe.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/81c1d7a1506e5f4bcc5f12fb49f3b6e9bb87c605/src%2Ftest%2Fui%2Fparser%2Fissue-76437-const-async-unsafe.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-76437-const-async-unsafe.stderr?ref=81c1d7a1506e5f4bcc5f12fb49f3b6e9bb87c605", "patch": "@@ -0,0 +1,11 @@\n+error: expected one of `extern` or `fn`, found keyword `pub`\n+  --> $DIR/issue-76437-const-async-unsafe.rs:4:24\n+   |\n+LL |     const async unsafe pub fn t() {}\n+   |     -------------------^^^\n+   |     |                  |\n+   |     |                  expected one of `extern` or `fn`\n+   |     help: visibility `pub` must come before `const async unsafe`: `pub const async unsafe`\n+\n+error: aborting due to previous error\n+"}, {"sha": "3c789fdcd02285743c04ec3c03ef4f237b204f0e", "filename": "src/test/ui/parser/issue-76437-const-async.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/81c1d7a1506e5f4bcc5f12fb49f3b6e9bb87c605/src%2Ftest%2Fui%2Fparser%2Fissue-76437-const-async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81c1d7a1506e5f4bcc5f12fb49f3b6e9bb87c605/src%2Ftest%2Fui%2Fparser%2Fissue-76437-const-async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-76437-const-async.rs?ref=81c1d7a1506e5f4bcc5f12fb49f3b6e9bb87c605", "patch": "@@ -0,0 +1,7 @@\n+// edition:2018\n+\n+mod t {\n+    const async pub fn t() {}\n+    //~^ ERROR expected one of `extern`, `fn`, or `unsafe`, found keyword `pub`\n+    //~| HELP visibility `pub` must come before `const async`\n+}"}, {"sha": "21b96c14d7de04c8c01e89bfb752583a41ea206d", "filename": "src/test/ui/parser/issue-76437-const-async.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/81c1d7a1506e5f4bcc5f12fb49f3b6e9bb87c605/src%2Ftest%2Fui%2Fparser%2Fissue-76437-const-async.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/81c1d7a1506e5f4bcc5f12fb49f3b6e9bb87c605/src%2Ftest%2Fui%2Fparser%2Fissue-76437-const-async.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-76437-const-async.stderr?ref=81c1d7a1506e5f4bcc5f12fb49f3b6e9bb87c605", "patch": "@@ -0,0 +1,11 @@\n+error: expected one of `extern`, `fn`, or `unsafe`, found keyword `pub`\n+  --> $DIR/issue-76437-const-async.rs:4:17\n+   |\n+LL |     const async pub fn t() {}\n+   |     ------------^^^\n+   |     |           |\n+   |     |           expected one of `extern`, `fn`, or `unsafe`\n+   |     help: visibility `pub` must come before `const async`: `pub const async`\n+\n+error: aborting due to previous error\n+"}, {"sha": "d3815a52346eed48281fbae763f45b5607e3224a", "filename": "src/test/ui/parser/issue-76437-const.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/81c1d7a1506e5f4bcc5f12fb49f3b6e9bb87c605/src%2Ftest%2Fui%2Fparser%2Fissue-76437-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81c1d7a1506e5f4bcc5f12fb49f3b6e9bb87c605/src%2Ftest%2Fui%2Fparser%2Fissue-76437-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-76437-const.rs?ref=81c1d7a1506e5f4bcc5f12fb49f3b6e9bb87c605", "patch": "@@ -0,0 +1,7 @@\n+// edition:2018\n+\n+mod t {\n+    const pub fn t() {}\n+    //~^ ERROR expected one of `async`, `extern`, `fn`, or `unsafe`, found keyword `pub`\n+    //~| HELP visibility `pub` must come before `const`\n+}"}, {"sha": "cf80d9a9037c9707f8fd6fcdaa6bc8bd1578d1fc", "filename": "src/test/ui/parser/issue-76437-const.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/81c1d7a1506e5f4bcc5f12fb49f3b6e9bb87c605/src%2Ftest%2Fui%2Fparser%2Fissue-76437-const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/81c1d7a1506e5f4bcc5f12fb49f3b6e9bb87c605/src%2Ftest%2Fui%2Fparser%2Fissue-76437-const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-76437-const.stderr?ref=81c1d7a1506e5f4bcc5f12fb49f3b6e9bb87c605", "patch": "@@ -0,0 +1,11 @@\n+error: expected one of `async`, `extern`, `fn`, or `unsafe`, found keyword `pub`\n+  --> $DIR/issue-76437-const.rs:4:11\n+   |\n+LL |     const pub fn t() {}\n+   |     ------^^^\n+   |     |     |\n+   |     |     expected one of `async`, `extern`, `fn`, or `unsafe`\n+   |     help: visibility `pub` must come before `const`: `pub const`\n+\n+error: aborting due to previous error\n+"}, {"sha": "daa1d120795fd99328eccb13b1cafd5fd6b164f6", "filename": "src/test/ui/parser/issue-76437-pub-crate-unsafe.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/81c1d7a1506e5f4bcc5f12fb49f3b6e9bb87c605/src%2Ftest%2Fui%2Fparser%2Fissue-76437-pub-crate-unsafe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81c1d7a1506e5f4bcc5f12fb49f3b6e9bb87c605/src%2Ftest%2Fui%2Fparser%2Fissue-76437-pub-crate-unsafe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-76437-pub-crate-unsafe.rs?ref=81c1d7a1506e5f4bcc5f12fb49f3b6e9bb87c605", "patch": "@@ -0,0 +1,7 @@\n+// edition:2018\n+\n+mod t {\n+    unsafe pub(crate) fn t() {}\n+    //~^ ERROR expected one of `extern` or `fn`, found keyword `pub`\n+    //~| HELP visibility `pub(crate)` must come before `unsafe`\n+}"}, {"sha": "fa8f13721c89401c4784fe644d113102aa72d76d", "filename": "src/test/ui/parser/issue-76437-pub-crate-unsafe.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/81c1d7a1506e5f4bcc5f12fb49f3b6e9bb87c605/src%2Ftest%2Fui%2Fparser%2Fissue-76437-pub-crate-unsafe.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/81c1d7a1506e5f4bcc5f12fb49f3b6e9bb87c605/src%2Ftest%2Fui%2Fparser%2Fissue-76437-pub-crate-unsafe.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-76437-pub-crate-unsafe.stderr?ref=81c1d7a1506e5f4bcc5f12fb49f3b6e9bb87c605", "patch": "@@ -0,0 +1,11 @@\n+error: expected one of `extern` or `fn`, found keyword `pub`\n+  --> $DIR/issue-76437-pub-crate-unsafe.rs:4:12\n+   |\n+LL |     unsafe pub(crate) fn t() {}\n+   |     -------^^^-------\n+   |     |      |\n+   |     |      expected one of `extern` or `fn`\n+   |     help: visibility `pub(crate)` must come before `unsafe`: `pub(crate) unsafe`\n+\n+error: aborting due to previous error\n+"}, {"sha": "785a79a79a2e00349c6ef77b7fe368b0d506b342", "filename": "src/test/ui/parser/issue-76437-unsafe.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/81c1d7a1506e5f4bcc5f12fb49f3b6e9bb87c605/src%2Ftest%2Fui%2Fparser%2Fissue-76437-unsafe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81c1d7a1506e5f4bcc5f12fb49f3b6e9bb87c605/src%2Ftest%2Fui%2Fparser%2Fissue-76437-unsafe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-76437-unsafe.rs?ref=81c1d7a1506e5f4bcc5f12fb49f3b6e9bb87c605", "patch": "@@ -0,0 +1,7 @@\n+// edition:2018\n+\n+mod t {\n+    unsafe pub fn t() {}\n+    //~^ ERROR expected one of `extern` or `fn`, found keyword `pub`\n+    //~| HELP visibility `pub` must come before `unsafe`\n+}"}, {"sha": "c63292ef853958796d035164dcef057cb87955e5", "filename": "src/test/ui/parser/issue-76437-unsafe.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/81c1d7a1506e5f4bcc5f12fb49f3b6e9bb87c605/src%2Ftest%2Fui%2Fparser%2Fissue-76437-unsafe.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/81c1d7a1506e5f4bcc5f12fb49f3b6e9bb87c605/src%2Ftest%2Fui%2Fparser%2Fissue-76437-unsafe.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-76437-unsafe.stderr?ref=81c1d7a1506e5f4bcc5f12fb49f3b6e9bb87c605", "patch": "@@ -0,0 +1,11 @@\n+error: expected one of `extern` or `fn`, found keyword `pub`\n+  --> $DIR/issue-76437-unsafe.rs:4:12\n+   |\n+LL |     unsafe pub fn t() {}\n+   |     -------^^^\n+   |     |      |\n+   |     |      expected one of `extern` or `fn`\n+   |     help: visibility `pub` must come before `unsafe`: `pub unsafe`\n+\n+error: aborting due to previous error\n+"}]}