{"sha": "a81c7a2974841f335fd87bfd8c3c3b8a7c3d3612", "node_id": "C_kwDOAAsO6NoAKGE4MWM3YTI5NzQ4NDFmMzM1ZmQ4N2JmZDhjM2MzYjhhN2MzZDM2MTI", "commit": {"author": {"name": "Ryo Yoshida", "email": "low.ryoshida@gmail.com", "date": "2022-08-05T11:01:50Z"}, "committer": {"name": "Ryo Yoshida", "email": "low.ryoshida@gmail.com", "date": "2022-08-07T08:19:15Z"}, "message": "Parse range patterns in struct and slice without trailing comma", "tree": {"sha": "661c6feac04b15de0b7c081694dd5f811911ba22", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/661c6feac04b15de0b7c081694dd5f811911ba22"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a81c7a2974841f335fd87bfd8c3c3b8a7c3d3612", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEkSbsQIURluxz4rzf4laYqTBYYXEFAmLvdY8ACgkQ4laYqTBY\nYXEa3xAAlH26nw8RGPaF5vnnzs0NSBFSYf+qRp4oxj08kbt1Yf2eLlogYggh9R4F\nMCCQyvdYN8mFmzElmnOVPiAeYL+9Oso2TqwAszBi1GrLs48vQHm/NilvlmdbgtQT\nbdB/N06KnKbgWQbf0Zf8DtPrsJOytEN9Ei8v+GhxZ7dLP/Xmyor4nuWDUz9UKp4e\nrTPbtdpwLq66ov08X+onyOpsYfjLHKjYq8vE8/PT7CMXNPNVBt7NZdFLy0b7PZiV\nP1Y+Hv+Y0Akc5WEH0iUuBFKyWG5XCsihjSBBVqhYg2McTcCegBhqMKekMF571WwH\ndCFtUcn9UPlkWBhjwaBuLlNRt7/z/YNuFAFblb+cRfrPp+Sexszs5pB0UebJzsDG\nQC0e2HpKYIXA3hoqS7QlmdsQMWAn8UbBEOoL4bOv+M+9FVqdGFAiU8vpGL0dJLqK\n0Fm2Qt27Ukepuh+hKpa/ts7i0qMsHoNfe/HoWHQX7ZhhShAidfQAMtnzQx8+Hp59\nsCP6mKKWYIiEmSK2LBnGrk2yIYfHu6Jg7kognFeWPpJyDcD4vknT/c7Z7d37C5bp\n1iY5PemrurDKcvLdxLfXk2ifr+ax1pAMBaNf9Tje9lO6WCvWDnfmt1PW0ccMNLmB\nGob5PIpDVFfk5NGbxCgmOKODiKXvd7Vmh5m76ZaCbiocn+4zfHE=\n=spoh\n-----END PGP SIGNATURE-----", "payload": "tree 661c6feac04b15de0b7c081694dd5f811911ba22\nparent 1c03f45c08145be5b1ecd40aa1f28a12c615d63a\nauthor Ryo Yoshida <low.ryoshida@gmail.com> 1659697310 +0900\ncommitter Ryo Yoshida <low.ryoshida@gmail.com> 1659860355 +0900\n\nParse range patterns in struct and slice without trailing comma\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a81c7a2974841f335fd87bfd8c3c3b8a7c3d3612", "html_url": "https://github.com/rust-lang/rust/commit/a81c7a2974841f335fd87bfd8c3c3b8a7c3d3612", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a81c7a2974841f335fd87bfd8c3c3b8a7c3d3612/comments", "author": {"login": "lowr", "id": 24381114, "node_id": "MDQ6VXNlcjI0MzgxMTE0", "avatar_url": "https://avatars.githubusercontent.com/u/24381114?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lowr", "html_url": "https://github.com/lowr", "followers_url": "https://api.github.com/users/lowr/followers", "following_url": "https://api.github.com/users/lowr/following{/other_user}", "gists_url": "https://api.github.com/users/lowr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lowr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lowr/subscriptions", "organizations_url": "https://api.github.com/users/lowr/orgs", "repos_url": "https://api.github.com/users/lowr/repos", "events_url": "https://api.github.com/users/lowr/events{/privacy}", "received_events_url": "https://api.github.com/users/lowr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lowr", "id": 24381114, "node_id": "MDQ6VXNlcjI0MzgxMTE0", "avatar_url": "https://avatars.githubusercontent.com/u/24381114?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lowr", "html_url": "https://github.com/lowr", "followers_url": "https://api.github.com/users/lowr/followers", "following_url": "https://api.github.com/users/lowr/following{/other_user}", "gists_url": "https://api.github.com/users/lowr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lowr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lowr/subscriptions", "organizations_url": "https://api.github.com/users/lowr/orgs", "repos_url": "https://api.github.com/users/lowr/repos", "events_url": "https://api.github.com/users/lowr/events{/privacy}", "received_events_url": "https://api.github.com/users/lowr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1c03f45c08145be5b1ecd40aa1f28a12c615d63a", "url": "https://api.github.com/repos/rust-lang/rust/commits/1c03f45c08145be5b1ecd40aa1f28a12c615d63a", "html_url": "https://github.com/rust-lang/rust/commit/1c03f45c08145be5b1ecd40aa1f28a12c615d63a"}], "stats": {"total": 153, "additions": 150, "deletions": 3}, "files": [{"sha": "bfa41c686e5c1a4ab2fd73b854c4e404fbd31c41", "filename": "crates/parser/src/grammar/patterns.rs", "status": "modified", "additions": 24, "deletions": 3, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/a81c7a2974841f335fd87bfd8c3c3b8a7c3d3612/crates%2Fparser%2Fsrc%2Fgrammar%2Fpatterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a81c7a2974841f335fd87bfd8c3c3b8a7c3d3612/crates%2Fparser%2Fsrc%2Fgrammar%2Fpatterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fgrammar%2Fpatterns.rs?ref=a81c7a2974841f335fd87bfd8c3c3b8a7c3d3612", "patch": "@@ -75,6 +75,16 @@ fn pattern_single_r(p: &mut Parser<'_>, recovery_set: TokenSet) {\n         //         Some(1..) => ()\n         //     }\n         //\n+        //     match () {\n+        //         S { a: 0 } => (),\n+        //         S { a: 1.. } => (),\n+        //     }\n+        //\n+        //     match () {\n+        //         [0] => (),\n+        //         [1..] => (),\n+        //     }\n+        //\n         //     match (10 as u8, 5 as u8) {\n         //         (0, _) => (),\n         //         (1.., _) => ()\n@@ -88,9 +98,20 @@ fn pattern_single_r(p: &mut Parser<'_>, recovery_set: TokenSet) {\n                 let m = lhs.precede(p);\n                 p.bump(range_op);\n \n-                // `0 .. =>` or `let 0 .. =` or `Some(0 .. )`\n-                //       ^                ^                ^\n-                if p.at(T![=]) | p.at(T![')']) | p.at(T![,]) {\n+                // testing if we're at one of the following positions:\n+                // `0 .. =>`\n+                //       ^\n+                // `let 0 .. =`\n+                //           ^\n+                // (1.., _)\n+                //     ^\n+                // `Some(0 .. )`\n+                //            ^\n+                // `S { t: 0.. }`\n+                //             ^\n+                // `[0..]`\n+                //      ^\n+                if p.at(T![=]) | p.at(T![')']) | p.at(T![,]) | p.at(T!['}']) | p.at(T![']']) {\n                     // test half_open_range_pat\n                     // fn f() { let 0 .. = 1u32; }\n                 } else {"}, {"sha": "cfef5d3f95387dc58562d7aa14c9a6c8102d3e2f", "filename": "crates/parser/test_data/parser/inline/ok/0058_range_pat.rast", "status": "modified", "additions": 116, "deletions": 0, "changes": 116, "blob_url": "https://github.com/rust-lang/rust/blob/a81c7a2974841f335fd87bfd8c3c3b8a7c3d3612/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0058_range_pat.rast", "raw_url": "https://github.com/rust-lang/rust/raw/a81c7a2974841f335fd87bfd8c3c3b8a7c3d3612/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0058_range_pat.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0058_range_pat.rast?ref=a81c7a2974841f335fd87bfd8c3c3b8a7c3d3612", "patch": "@@ -172,6 +172,122 @@ SOURCE_FILE\n               WHITESPACE \"\\n    \"\n               R_CURLY \"}\"\n         WHITESPACE \"\\n\\n    \"\n+        EXPR_STMT\n+          MATCH_EXPR\n+            MATCH_KW \"match\"\n+            WHITESPACE \" \"\n+            TUPLE_EXPR\n+              L_PAREN \"(\"\n+              R_PAREN \")\"\n+            WHITESPACE \" \"\n+            MATCH_ARM_LIST\n+              L_CURLY \"{\"\n+              WHITESPACE \"\\n        \"\n+              MATCH_ARM\n+                RECORD_PAT\n+                  PATH\n+                    PATH_SEGMENT\n+                      NAME_REF\n+                        IDENT \"S\"\n+                  WHITESPACE \" \"\n+                  RECORD_PAT_FIELD_LIST\n+                    L_CURLY \"{\"\n+                    WHITESPACE \" \"\n+                    RECORD_PAT_FIELD\n+                      NAME_REF\n+                        IDENT \"a\"\n+                      COLON \":\"\n+                      WHITESPACE \" \"\n+                      LITERAL_PAT\n+                        LITERAL\n+                          INT_NUMBER \"0\"\n+                    WHITESPACE \" \"\n+                    R_CURLY \"}\"\n+                WHITESPACE \" \"\n+                FAT_ARROW \"=>\"\n+                WHITESPACE \" \"\n+                TUPLE_EXPR\n+                  L_PAREN \"(\"\n+                  R_PAREN \")\"\n+                COMMA \",\"\n+              WHITESPACE \"\\n        \"\n+              MATCH_ARM\n+                RECORD_PAT\n+                  PATH\n+                    PATH_SEGMENT\n+                      NAME_REF\n+                        IDENT \"S\"\n+                  WHITESPACE \" \"\n+                  RECORD_PAT_FIELD_LIST\n+                    L_CURLY \"{\"\n+                    WHITESPACE \" \"\n+                    RECORD_PAT_FIELD\n+                      NAME_REF\n+                        IDENT \"a\"\n+                      COLON \":\"\n+                      WHITESPACE \" \"\n+                      RANGE_PAT\n+                        LITERAL_PAT\n+                          LITERAL\n+                            INT_NUMBER \"1\"\n+                        DOT2 \"..\"\n+                    WHITESPACE \" \"\n+                    R_CURLY \"}\"\n+                WHITESPACE \" \"\n+                FAT_ARROW \"=>\"\n+                WHITESPACE \" \"\n+                TUPLE_EXPR\n+                  L_PAREN \"(\"\n+                  R_PAREN \")\"\n+                COMMA \",\"\n+              WHITESPACE \"\\n    \"\n+              R_CURLY \"}\"\n+        WHITESPACE \"\\n\\n    \"\n+        EXPR_STMT\n+          MATCH_EXPR\n+            MATCH_KW \"match\"\n+            WHITESPACE \" \"\n+            TUPLE_EXPR\n+              L_PAREN \"(\"\n+              R_PAREN \")\"\n+            WHITESPACE \" \"\n+            MATCH_ARM_LIST\n+              L_CURLY \"{\"\n+              WHITESPACE \"\\n        \"\n+              MATCH_ARM\n+                SLICE_PAT\n+                  L_BRACK \"[\"\n+                  LITERAL_PAT\n+                    LITERAL\n+                      INT_NUMBER \"0\"\n+                  R_BRACK \"]\"\n+                WHITESPACE \" \"\n+                FAT_ARROW \"=>\"\n+                WHITESPACE \" \"\n+                TUPLE_EXPR\n+                  L_PAREN \"(\"\n+                  R_PAREN \")\"\n+                COMMA \",\"\n+              WHITESPACE \"\\n        \"\n+              MATCH_ARM\n+                SLICE_PAT\n+                  L_BRACK \"[\"\n+                  RANGE_PAT\n+                    LITERAL_PAT\n+                      LITERAL\n+                        INT_NUMBER \"1\"\n+                    DOT2 \"..\"\n+                  R_BRACK \"]\"\n+                WHITESPACE \" \"\n+                FAT_ARROW \"=>\"\n+                WHITESPACE \" \"\n+                TUPLE_EXPR\n+                  L_PAREN \"(\"\n+                  R_PAREN \")\"\n+                COMMA \",\"\n+              WHITESPACE \"\\n    \"\n+              R_CURLY \"}\"\n+        WHITESPACE \"\\n\\n    \"\n         MATCH_EXPR\n           MATCH_KW \"match\"\n           WHITESPACE \" \""}, {"sha": "2411d51096b3b0a1c65f884b8d103d9ba1f5fc54", "filename": "crates/parser/test_data/parser/inline/ok/0058_range_pat.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a81c7a2974841f335fd87bfd8c3c3b8a7c3d3612/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0058_range_pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a81c7a2974841f335fd87bfd8c3c3b8a7c3d3612/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0058_range_pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0058_range_pat.rs?ref=a81c7a2974841f335fd87bfd8c3c3b8a7c3d3612", "patch": "@@ -11,6 +11,16 @@ fn main() {\n         Some(1..) => ()\n     }\n \n+    match () {\n+        S { a: 0 } => (),\n+        S { a: 1.. } => (),\n+    }\n+\n+    match () {\n+        [0] => (),\n+        [1..] => (),\n+    }\n+\n     match (10 as u8, 5 as u8) {\n         (0, _) => (),\n         (1.., _) => ()"}]}