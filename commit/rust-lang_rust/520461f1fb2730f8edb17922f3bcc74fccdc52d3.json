{"sha": "520461f1fb2730f8edb17922f3bcc74fccdc52d3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUyMDQ2MWYxZmIyNzMwZjhlZGIxNzkyMmYzYmNjNzRmY2NkYzUyZDM=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-06-20T05:45:09Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-06-25T00:42:26Z"}, "message": "Provide suggestions for some moved value errors\n\nWhen encountering an used moved value where the previous move happened\nin a `match` or `if let` pattern, suggest using `ref`. Fix #63988.\n\nWhen encountering a `&mut` value that is used in multiple iterations of\na loop, suggest reborrowing it with `&mut *`. Fix #62112.", "tree": {"sha": "2bba242e5e3f2fd8cb6e5a3873dd44a866d2efce", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2bba242e5e3f2fd8cb6e5a3873dd44a866d2efce"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/520461f1fb2730f8edb17922f3bcc74fccdc52d3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/520461f1fb2730f8edb17922f3bcc74fccdc52d3", "html_url": "https://github.com/rust-lang/rust/commit/520461f1fb2730f8edb17922f3bcc74fccdc52d3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/520461f1fb2730f8edb17922f3bcc74fccdc52d3/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "67100f61e62a86f2bf9e38552ee138e231eddc74", "url": "https://api.github.com/repos/rust-lang/rust/commits/67100f61e62a86f2bf9e38552ee138e231eddc74", "html_url": "https://github.com/rust-lang/rust/commit/67100f61e62a86f2bf9e38552ee138e231eddc74"}], "stats": {"total": 325, "additions": 315, "deletions": 10}, "files": [{"sha": "60a1fe0b19870deb3d9ebd390eba5d0af204a52a", "filename": "src/librustc_mir/borrow_check/diagnostics/conflict_errors.rs", "status": "modified", "additions": 35, "deletions": 4, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/520461f1fb2730f8edb17922f3bcc74fccdc52d3/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fconflict_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/520461f1fb2730f8edb17922f3bcc74fccdc52d3/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fconflict_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fconflict_errors.rs?ref=520461f1fb2730f8edb17922f3bcc74fccdc52d3", "patch": "@@ -156,6 +156,20 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                         format!(\"variable moved due to use{}\", move_spans.describe()),\n                     );\n                 }\n+                if let UseSpans::PatUse(span) = move_spans {\n+                    err.span_suggestion_verbose(\n+                        span.shrink_to_lo(),\n+                        &format!(\n+                            \"borrow this field in the pattern to avoid moving {}\",\n+                            self.describe_place(moved_place.as_ref())\n+                                .map(|n| format!(\"`{}`\", n))\n+                                .unwrap_or_else(|| \"the value\".to_string())\n+                        ),\n+                        \"ref \".to_string(),\n+                        Applicability::MachineApplicable,\n+                    );\n+                }\n+\n                 if Some(DesugaringKind::ForLoop) == move_span.desugaring_kind() {\n                     let sess = self.infcx.tcx.sess;\n                     if let Ok(snippet) = sess.source_map().span_to_snippet(move_span) {\n@@ -198,11 +212,28 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                 _ => true,\n             };\n \n-            if needs_note {\n-                let mpi = self.move_data.moves[move_out_indices[0]].path;\n-                let place = &self.move_data.move_paths[mpi].place;\n+            let mpi = self.move_data.moves[move_out_indices[0]].path;\n+            let place = &self.move_data.move_paths[mpi].place;\n+            let ty = place.ty(self.body, self.infcx.tcx).ty;\n+\n+            if is_loop_move {\n+                if let ty::Ref(_, _, hir::Mutability::Mut) = ty.kind {\n+                    // We have a `&mut` ref, we need to reborrow on each iteration (#62112).\n+                    err.span_suggestion_verbose(\n+                        span.shrink_to_lo(),\n+                        &format!(\n+                            \"consider creating a fresh reborrow of {} here\",\n+                            self.describe_place(moved_place)\n+                                .map(|n| format!(\"`{}`\", n))\n+                                .unwrap_or_else(|| \"the mutable reference\".to_string()),\n+                        ),\n+                        \"&mut *\".to_string(),\n+                        Applicability::MachineApplicable,\n+                    );\n+                }\n+            }\n \n-                let ty = place.ty(self.body, self.infcx.tcx).ty;\n+            if needs_note {\n                 let opt_name =\n                     self.describe_place_with_options(place.as_ref(), IncludingDowncast(true));\n                 let note_msg = match opt_name {"}, {"sha": "849fd63998db49a9bfc42e594dde51712c6b4b64", "filename": "src/librustc_mir/borrow_check/diagnostics/explain_borrow.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/520461f1fb2730f8edb17922f3bcc74fccdc52d3/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fexplain_borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/520461f1fb2730f8edb17922f3bcc74fccdc52d3/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fexplain_borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fexplain_borrow.rs?ref=520461f1fb2730f8edb17922f3bcc74fccdc52d3", "patch": "@@ -509,7 +509,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                 // Used in a closure.\n                 (LaterUseKind::ClosureCapture, var_span)\n             }\n-            UseSpans::OtherUse(span) => {\n+            UseSpans::PatUse(span) | UseSpans::OtherUse(span) => {\n                 let block = &self.body.basic_blocks()[location.block];\n \n                 let kind = if let Some(&Statement {"}, {"sha": "388076a9d60afb77ba09af01bf74a40f8b0c6cd5", "filename": "src/librustc_mir/borrow_check/diagnostics/mod.rs", "status": "modified", "additions": 15, "deletions": 5, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/520461f1fb2730f8edb17922f3bcc74fccdc52d3/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/520461f1fb2730f8edb17922f3bcc74fccdc52d3/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fmod.rs?ref=520461f1fb2730f8edb17922f3bcc74fccdc52d3", "patch": "@@ -542,20 +542,26 @@ pub(super) enum UseSpans {\n         // The span of the first use of the captured variable inside the closure.\n         var_span: Span,\n     },\n-    // This access has a single span associated to it: common case.\n+    /// This access is caused by a `match` or `if let` pattern.\n+    PatUse(Span),\n+    /// This access has a single span associated to it: common case.\n     OtherUse(Span),\n }\n \n impl UseSpans {\n     pub(super) fn args_or_use(self) -> Span {\n         match self {\n-            UseSpans::ClosureUse { args_span: span, .. } | UseSpans::OtherUse(span) => span,\n+            UseSpans::ClosureUse { args_span: span, .. }\n+            | UseSpans::PatUse(span)\n+            | UseSpans::OtherUse(span) => span,\n         }\n     }\n \n     pub(super) fn var_or_use(self) -> Span {\n         match self {\n-            UseSpans::ClosureUse { var_span: span, .. } | UseSpans::OtherUse(span) => span,\n+            UseSpans::ClosureUse { var_span: span, .. }\n+            | UseSpans::PatUse(span)\n+            | UseSpans::OtherUse(span) => span,\n         }\n     }\n \n@@ -624,7 +630,7 @@ impl UseSpans {\n     {\n         match self {\n             closure @ UseSpans::ClosureUse { .. } => closure,\n-            UseSpans::OtherUse(_) => if_other(),\n+            UseSpans::PatUse(_) | UseSpans::OtherUse(_) => if_other(),\n         }\n     }\n }\n@@ -741,7 +747,11 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n             }\n         }\n \n-        OtherUse(stmt.source_info.span)\n+        if moved_place.projection.iter().any(|p| matches!(p, ProjectionElem::Downcast(..))) {\n+            PatUse(stmt.source_info.span)\n+        } else {\n+            OtherUse(stmt.source_info.span)\n+        }\n     }\n \n     /// Finds the span of arguments of a closure (within `maybe_closure_span`)"}, {"sha": "604143b4e7efd232c94267b0e8f410e22a6f7d22", "filename": "src/test/ui/borrowck/issue-41962.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/520461f1fb2730f8edb17922f3bcc74fccdc52d3/src%2Ftest%2Fui%2Fborrowck%2Fissue-41962.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/520461f1fb2730f8edb17922f3bcc74fccdc52d3/src%2Ftest%2Fui%2Fborrowck%2Fissue-41962.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-41962.stderr?ref=520461f1fb2730f8edb17922f3bcc74fccdc52d3", "patch": "@@ -5,6 +5,10 @@ LL |         if let Some(thing) = maybe {\n    |                     ^^^^^ value moved here, in previous iteration of loop\n    |\n    = note: move occurs because value has type `std::vec::Vec<bool>`, which does not implement the `Copy` trait\n+help: borrow this field in the pattern to avoid moving `maybe.0`\n+   |\n+LL |         if let Some(ref thing) = maybe {\n+   |                     ^^^\n \n error: aborting due to previous error\n "}, {"sha": "175eb3b7a04d1168237ec991cbbd658f9abfb48b", "filename": "src/test/ui/borrowck/move-in-pattern-mut.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/520461f1fb2730f8edb17922f3bcc74fccdc52d3/src%2Ftest%2Fui%2Fborrowck%2Fmove-in-pattern-mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/520461f1fb2730f8edb17922f3bcc74fccdc52d3/src%2Ftest%2Fui%2Fborrowck%2Fmove-in-pattern-mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fmove-in-pattern-mut.rs?ref=520461f1fb2730f8edb17922f3bcc74fccdc52d3", "patch": "@@ -0,0 +1,23 @@\n+// Issue #63988\n+#[derive(Debug)]\n+struct S;\n+fn foo(_: Option<S>) {}\n+\n+enum E {\n+    V {\n+        s: S,\n+    }\n+}\n+fn bar(_: E) {}\n+\n+fn main() {\n+    let s = Some(S);\n+    if let Some(mut x) = s {\n+        x = S;\n+    }\n+    foo(s); //~ ERROR use of moved value: `s`\n+    let mut e = E::V { s: S };\n+    let E::V { s: mut x } = e;\n+    x = S;\n+    bar(e); //~ ERROR use of moved value: `e`\n+}"}, {"sha": "391638444c3bdcf06791fddc991dcb2960801a5b", "filename": "src/test/ui/borrowck/move-in-pattern-mut.stderr", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/520461f1fb2730f8edb17922f3bcc74fccdc52d3/src%2Ftest%2Fui%2Fborrowck%2Fmove-in-pattern-mut.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/520461f1fb2730f8edb17922f3bcc74fccdc52d3/src%2Ftest%2Fui%2Fborrowck%2Fmove-in-pattern-mut.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fmove-in-pattern-mut.stderr?ref=520461f1fb2730f8edb17922f3bcc74fccdc52d3", "patch": "@@ -0,0 +1,33 @@\n+error[E0382]: use of moved value: `s`\n+  --> $DIR/move-in-pattern-mut.rs:18:9\n+   |\n+LL |     if let Some(mut x) = s {\n+   |                 ----- value moved here\n+...\n+LL |     foo(s);\n+   |         ^ value used here after partial move\n+   |\n+   = note: move occurs because value has type `S`, which does not implement the `Copy` trait\n+help: borrow this field in the pattern to avoid moving `s.0`\n+   |\n+LL |     if let Some(ref mut x) = s {\n+   |                 ^^^\n+\n+error[E0382]: use of moved value: `e`\n+  --> $DIR/move-in-pattern-mut.rs:22:9\n+   |\n+LL |     let E::V { s: mut x } = e;\n+   |                   ----- value moved here\n+LL |     x = S;\n+LL |     bar(e);\n+   |         ^ value used here after partial move\n+   |\n+   = note: move occurs because value has type `S`, which does not implement the `Copy` trait\n+help: borrow this field in the pattern to avoid moving `e.s`\n+   |\n+LL |     let E::V { s: ref mut x } = e;\n+   |                   ^^^\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0382`."}, {"sha": "f55fdcc5f90e80f1dcca0613b180131d1af9b194", "filename": "src/test/ui/borrowck/move-in-pattern.fixed", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/520461f1fb2730f8edb17922f3bcc74fccdc52d3/src%2Ftest%2Fui%2Fborrowck%2Fmove-in-pattern.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/520461f1fb2730f8edb17922f3bcc74fccdc52d3/src%2Ftest%2Fui%2Fborrowck%2Fmove-in-pattern.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fmove-in-pattern.fixed?ref=520461f1fb2730f8edb17922f3bcc74fccdc52d3", "patch": "@@ -0,0 +1,24 @@\n+// run-rustfix\n+// Issue #63988\n+#[derive(Debug)]\n+struct S;\n+fn foo(_: Option<S>) {}\n+\n+enum E {\n+    V {\n+        s: S,\n+    }\n+}\n+fn bar(_: E) {}\n+\n+fn main() {\n+    let s = Some(S);\n+    if let Some(ref x) = s {\n+        let _ = x;\n+    }\n+    foo(s); //~ ERROR use of moved value: `s`\n+    let e = E::V { s: S };\n+    let E::V { s: ref x } = e;\n+    let _ = x;\n+    bar(e); //~ ERROR use of moved value: `e`\n+}"}, {"sha": "7ad04b9490c25167f83569d050585933fa11b008", "filename": "src/test/ui/borrowck/move-in-pattern.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/520461f1fb2730f8edb17922f3bcc74fccdc52d3/src%2Ftest%2Fui%2Fborrowck%2Fmove-in-pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/520461f1fb2730f8edb17922f3bcc74fccdc52d3/src%2Ftest%2Fui%2Fborrowck%2Fmove-in-pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fmove-in-pattern.rs?ref=520461f1fb2730f8edb17922f3bcc74fccdc52d3", "patch": "@@ -0,0 +1,24 @@\n+// run-rustfix\n+// Issue #63988\n+#[derive(Debug)]\n+struct S;\n+fn foo(_: Option<S>) {}\n+\n+enum E {\n+    V {\n+        s: S,\n+    }\n+}\n+fn bar(_: E) {}\n+\n+fn main() {\n+    let s = Some(S);\n+    if let Some(x) = s {\n+        let _ = x;\n+    }\n+    foo(s); //~ ERROR use of moved value: `s`\n+    let e = E::V { s: S };\n+    let E::V { s: x } = e;\n+    let _ = x;\n+    bar(e); //~ ERROR use of moved value: `e`\n+}"}, {"sha": "c5cb24455eb61ee5c83fd7b05b6c904a21073eaa", "filename": "src/test/ui/borrowck/move-in-pattern.stderr", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/520461f1fb2730f8edb17922f3bcc74fccdc52d3/src%2Ftest%2Fui%2Fborrowck%2Fmove-in-pattern.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/520461f1fb2730f8edb17922f3bcc74fccdc52d3/src%2Ftest%2Fui%2Fborrowck%2Fmove-in-pattern.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fmove-in-pattern.stderr?ref=520461f1fb2730f8edb17922f3bcc74fccdc52d3", "patch": "@@ -0,0 +1,33 @@\n+error[E0382]: use of moved value: `s`\n+  --> $DIR/move-in-pattern.rs:19:9\n+   |\n+LL |     if let Some(x) = s {\n+   |                 - value moved here\n+...\n+LL |     foo(s);\n+   |         ^ value used here after partial move\n+   |\n+   = note: move occurs because value has type `S`, which does not implement the `Copy` trait\n+help: borrow this field in the pattern to avoid moving `s.0`\n+   |\n+LL |     if let Some(ref x) = s {\n+   |                 ^^^\n+\n+error[E0382]: use of moved value: `e`\n+  --> $DIR/move-in-pattern.rs:23:9\n+   |\n+LL |     let E::V { s: x } = e;\n+   |                   - value moved here\n+LL |     let _ = x;\n+LL |     bar(e);\n+   |         ^ value used here after partial move\n+   |\n+   = note: move occurs because value has type `S`, which does not implement the `Copy` trait\n+help: borrow this field in the pattern to avoid moving `e.s`\n+   |\n+LL |     let E::V { s: ref x } = e;\n+   |                   ^^^\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0382`."}, {"sha": "ceeba30a90f2939716a726279fca7e7490bfecc2", "filename": "src/test/ui/borrowck/mut-borrow-in-loop-2.fixed", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/520461f1fb2730f8edb17922f3bcc74fccdc52d3/src%2Ftest%2Fui%2Fborrowck%2Fmut-borrow-in-loop-2.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/520461f1fb2730f8edb17922f3bcc74fccdc52d3/src%2Ftest%2Fui%2Fborrowck%2Fmut-borrow-in-loop-2.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fmut-borrow-in-loop-2.fixed?ref=520461f1fb2730f8edb17922f3bcc74fccdc52d3", "patch": "@@ -0,0 +1,35 @@\n+// run-rustfix\n+#![allow(dead_code)]\n+\n+struct Events<R>(R);\n+\n+struct Other;\n+\n+pub trait Trait<T> {\n+    fn handle(value: T) -> Self;\n+}\n+\n+// Blanket impl. (If you comment this out, compiler figures out that it\n+// is passing an `&mut` to a method that must be expecting an `&mut`,\n+// and injects an auto-reborrow.)\n+impl<T, U> Trait<U> for T where T: From<U> {\n+    fn handle(_: U) -> Self { unimplemented!() }\n+}\n+\n+impl<'a, R> Trait<&'a mut Events<R>> for Other {\n+    fn handle(_: &'a mut Events<R>) -> Self { unimplemented!() }\n+}\n+\n+fn this_compiles<'a, R>(value: &'a mut Events<R>) {\n+    for _ in 0..3 {\n+        Other::handle(&mut *value);\n+    }\n+}\n+\n+fn this_does_not<'a, R>(value: &'a mut Events<R>) {\n+    for _ in 0..3 {\n+        Other::handle(&mut *value); //~ ERROR use of moved value: `value`\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "d13fb7e5679395b53d8b0d136c68a5e3c8dfb625", "filename": "src/test/ui/borrowck/mut-borrow-in-loop-2.rs", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/520461f1fb2730f8edb17922f3bcc74fccdc52d3/src%2Ftest%2Fui%2Fborrowck%2Fmut-borrow-in-loop-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/520461f1fb2730f8edb17922f3bcc74fccdc52d3/src%2Ftest%2Fui%2Fborrowck%2Fmut-borrow-in-loop-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fmut-borrow-in-loop-2.rs?ref=520461f1fb2730f8edb17922f3bcc74fccdc52d3", "patch": "@@ -0,0 +1,35 @@\n+// run-rustfix\n+#![allow(dead_code)]\n+\n+struct Events<R>(R);\n+\n+struct Other;\n+\n+pub trait Trait<T> {\n+    fn handle(value: T) -> Self;\n+}\n+\n+// Blanket impl. (If you comment this out, compiler figures out that it\n+// is passing an `&mut` to a method that must be expecting an `&mut`,\n+// and injects an auto-reborrow.)\n+impl<T, U> Trait<U> for T where T: From<U> {\n+    fn handle(_: U) -> Self { unimplemented!() }\n+}\n+\n+impl<'a, R> Trait<&'a mut Events<R>> for Other {\n+    fn handle(_: &'a mut Events<R>) -> Self { unimplemented!() }\n+}\n+\n+fn this_compiles<'a, R>(value: &'a mut Events<R>) {\n+    for _ in 0..3 {\n+        Other::handle(&mut *value);\n+    }\n+}\n+\n+fn this_does_not<'a, R>(value: &'a mut Events<R>) {\n+    for _ in 0..3 {\n+        Other::handle(value); //~ ERROR use of moved value: `value`\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "fa1b741394acb55b1a2fff931bcf2506698e7496", "filename": "src/test/ui/borrowck/mut-borrow-in-loop-2.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/520461f1fb2730f8edb17922f3bcc74fccdc52d3/src%2Ftest%2Fui%2Fborrowck%2Fmut-borrow-in-loop-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/520461f1fb2730f8edb17922f3bcc74fccdc52d3/src%2Ftest%2Fui%2Fborrowck%2Fmut-borrow-in-loop-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fmut-borrow-in-loop-2.stderr?ref=520461f1fb2730f8edb17922f3bcc74fccdc52d3", "patch": "@@ -0,0 +1,17 @@\n+error[E0382]: use of moved value: `value`\n+  --> $DIR/mut-borrow-in-loop-2.rs:31:23\n+   |\n+LL | fn this_does_not<'a, R>(value: &'a mut Events<R>) {\n+   |                         ----- move occurs because `value` has type `&mut Events<R>`, which does not implement the `Copy` trait\n+LL |     for _ in 0..3 {\n+LL |         Other::handle(value);\n+   |                       ^^^^^ value moved here, in previous iteration of loop\n+   |\n+help: consider creating a fresh reborrow of `value` here\n+   |\n+LL |         Other::handle(&mut *value);\n+   |                       ^^^^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0382`."}, {"sha": "952985fcddee6c18268718248bf22ad9e355ff07", "filename": "src/test/ui/moves/moves-based-on-type-cyclic-types-issue-4821.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/520461f1fb2730f8edb17922f3bcc74fccdc52d3/src%2Ftest%2Fui%2Fmoves%2Fmoves-based-on-type-cyclic-types-issue-4821.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/520461f1fb2730f8edb17922f3bcc74fccdc52d3/src%2Ftest%2Fui%2Fmoves%2Fmoves-based-on-type-cyclic-types-issue-4821.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmoves%2Fmoves-based-on-type-cyclic-types-issue-4821.stderr?ref=520461f1fb2730f8edb17922f3bcc74fccdc52d3", "patch": "@@ -8,6 +8,10 @@ LL |     consume(node) + r\n    |             ^^^^ value used here after partial move\n    |\n    = note: move occurs because value has type `std::boxed::Box<List>`, which does not implement the `Copy` trait\n+help: borrow this field in the pattern to avoid moving `node.next.0`\n+   |\n+LL |         Some(ref right) => consume(right),\n+   |              ^^^\n \n error: aborting due to previous error\n "}, {"sha": "4f36a4ccab28f701419059b3bd9b2503a95562af", "filename": "src/test/ui/nll/issue-53807.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/520461f1fb2730f8edb17922f3bcc74fccdc52d3/src%2Ftest%2Fui%2Fnll%2Fissue-53807.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/520461f1fb2730f8edb17922f3bcc74fccdc52d3/src%2Ftest%2Fui%2Fnll%2Fissue-53807.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-53807.stderr?ref=520461f1fb2730f8edb17922f3bcc74fccdc52d3", "patch": "@@ -5,6 +5,10 @@ LL |         if let Some(thing) = maybe {\n    |                     ^^^^^ value moved here, in previous iteration of loop\n    |\n    = note: move occurs because value has type `std::vec::Vec<bool>`, which does not implement the `Copy` trait\n+help: borrow this field in the pattern to avoid moving `maybe.0`\n+   |\n+LL |         if let Some(ref thing) = maybe {\n+   |                     ^^^\n \n error: aborting due to previous error\n "}, {"sha": "8a6ea8e91a25afec56935b275eafbcb560af5ecf", "filename": "src/test/ui/pattern/bindings-after-at/bind-by-move-neither-can-live-while-the-other-survives-1.stderr", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/520461f1fb2730f8edb17922f3bcc74fccdc52d3/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fbind-by-move-neither-can-live-while-the-other-survives-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/520461f1fb2730f8edb17922f3bcc74fccdc52d3/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fbind-by-move-neither-can-live-while-the-other-survives-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fbind-by-move-neither-can-live-while-the-other-survives-1.stderr?ref=520461f1fb2730f8edb17922f3bcc74fccdc52d3", "patch": "@@ -46,6 +46,10 @@ LL |         Some(_z @ ref _y) => {}\n    |              value moved here\n    |\n    = note: move occurs because value has type `X`, which does not implement the `Copy` trait\n+help: borrow this field in the pattern to avoid moving `x.0`\n+   |\n+LL |         Some(ref _z @ ref _y) => {}\n+   |              ^^^\n \n error[E0382]: borrow of moved value\n   --> $DIR/bind-by-move-neither-can-live-while-the-other-survives-1.rs:35:19\n@@ -57,6 +61,10 @@ LL |         Some(_z @ ref mut _y) => {}\n    |              value moved here\n    |\n    = note: move occurs because value has type `X`, which does not implement the `Copy` trait\n+help: borrow this field in the pattern to avoid moving `x.0`\n+   |\n+LL |         Some(ref _z @ ref mut _y) => {}\n+   |              ^^^\n \n error: aborting due to 6 previous errors\n "}, {"sha": "5058998f2a7c1c79eb9df0d99000c8da4e2cace1", "filename": "src/test/ui/pattern/bindings-after-at/borrowck-pat-by-move-and-ref-inverse.stderr", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/520461f1fb2730f8edb17922f3bcc74fccdc52d3/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-by-move-and-ref-inverse.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/520461f1fb2730f8edb17922f3bcc74fccdc52d3/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-by-move-and-ref-inverse.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-by-move-and-ref-inverse.stderr?ref=520461f1fb2730f8edb17922f3bcc74fccdc52d3", "patch": "@@ -357,6 +357,10 @@ LL |         a @ Some((mut b @ ref mut c, d @ ref e)) => {}\n    |                   value moved here\n    |\n    = note: move occurs because value has type `main::U`, which does not implement the `Copy` trait\n+help: borrow this field in the pattern to avoid moving the value\n+   |\n+LL |         a @ Some((ref mut b @ ref mut c, d @ ref e)) => {}\n+   |                   ^^^\n \n error[E0382]: use of moved value\n   --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:61:38\n@@ -379,6 +383,10 @@ LL |         a @ Some((mut b @ ref mut c, d @ ref e)) => {}\n    |                                      value moved here\n    |\n    = note: move occurs because value has type `main::U`, which does not implement the `Copy` trait\n+help: borrow this field in the pattern to avoid moving the value\n+   |\n+LL |         a @ Some((mut b @ ref mut c, ref d @ ref e)) => {}\n+   |                                      ^^^\n \n error[E0382]: borrow of moved value\n   --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:71:30\n@@ -412,6 +420,10 @@ LL |         a @ Some((mut b @ ref mut c, d @ ref e)) => {}\n    |                   value moved here\n    |\n    = note: move occurs because value has type `main::U`, which does not implement the `Copy` trait\n+help: borrow this field in the pattern to avoid moving the value\n+   |\n+LL |         a @ Some((ref mut b @ ref mut c, d @ ref e)) => {}\n+   |                   ^^^\n \n error[E0382]: use of moved value\n   --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:83:38\n@@ -434,6 +446,10 @@ LL |         a @ Some((mut b @ ref mut c, d @ ref e)) => {}\n    |                                      value moved here\n    |\n    = note: move occurs because value has type `main::U`, which does not implement the `Copy` trait\n+help: borrow this field in the pattern to avoid moving the value\n+   |\n+LL |         a @ Some((mut b @ ref mut c, ref d @ ref e)) => {}\n+   |                                      ^^^\n \n error[E0382]: borrow of moved value\n   --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:93:30"}, {"sha": "97d2c174d9adbf082682c9b7e5d476eb967815ea", "filename": "src/test/ui/ref-suggestion.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/520461f1fb2730f8edb17922f3bcc74fccdc52d3/src%2Ftest%2Fui%2Fref-suggestion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/520461f1fb2730f8edb17922f3bcc74fccdc52d3/src%2Ftest%2Fui%2Fref-suggestion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fref-suggestion.stderr?ref=520461f1fb2730f8edb17922f3bcc74fccdc52d3", "patch": "@@ -28,6 +28,10 @@ LL |     x;\n    |     ^ value used here after partial move\n    |\n    = note: move occurs because value has type `std::vec::Vec<i32>`, which does not implement the `Copy` trait\n+help: borrow this field in the pattern to avoid moving `x.0.0`\n+   |\n+LL |         (Some(ref y), ()) => {},\n+   |               ^^^\n \n error: aborting due to 3 previous errors\n "}]}