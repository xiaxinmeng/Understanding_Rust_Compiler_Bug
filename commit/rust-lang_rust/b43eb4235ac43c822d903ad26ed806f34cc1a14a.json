{"sha": "b43eb4235ac43c822d903ad26ed806f34cc1a14a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI0M2ViNDIzNWFjNDNjODIyZDkwM2FkMjZlZDgwNmYzNGNjMWExNGE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-07-03T23:39:36Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-07-03T23:39:36Z"}, "message": "Auto merge of #62355 - Centril:rollup-xnxtcgm, r=Centril\n\nRollup of 16 pull requests\n\nSuccessful merges:\n\n - #62039 (Remove needless lifetimes (rustc))\n - #62173 (rename InterpretCx -> InterpCx)\n - #62240 (wfcheck: resolve the type-vars in `AdtField` types)\n - #62249 (Use mem::take instead of mem::replace with default)\n - #62252 (Update mem::replace example to not be identical to mem::take)\n - #62258 (syntax: Unsupport `foo! bar { ... }` macros in the parser)\n - #62268 (Clean up inherent_impls)\n - #62287 (Use link attributes on extern \"C\" blocks with llvm-libuwind)\n - #62295 (miri realloc: do not require giving old size+align)\n - #62297 (refactor check_for_substitution)\n - #62316 (When possible without changing semantics, implement Iterator::last in terms of DoubleEndedIterator::next_back for types in liballoc and libcore.)\n - #62317 (Migrate `compile-pass` annotations to `build-pass`)\n - #62337 (Fix bucket in CPU usage script)\n - #62344 (simplify Option::get_or_insert)\n - #62346 (enable a few more tests in Miri and update the comment for others)\n - #62351 (remove bogus example from drop_in_place)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "124c3531ddc1815ad1586b3c78373f9e9117ce3c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/124c3531ddc1815ad1586b3c78373f9e9117ce3c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b43eb4235ac43c822d903ad26ed806f34cc1a14a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b43eb4235ac43c822d903ad26ed806f34cc1a14a", "html_url": "https://github.com/rust-lang/rust/commit/b43eb4235ac43c822d903ad26ed806f34cc1a14a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b43eb4235ac43c822d903ad26ed806f34cc1a14a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "088b987307b91612ab164026e1dcdd0129fdb62b", "url": "https://api.github.com/repos/rust-lang/rust/commits/088b987307b91612ab164026e1dcdd0129fdb62b", "html_url": "https://github.com/rust-lang/rust/commit/088b987307b91612ab164026e1dcdd0129fdb62b"}, {"sha": "6363a58e9af1b00669ebf1e343a67e3d1815f463", "url": "https://api.github.com/repos/rust-lang/rust/commits/6363a58e9af1b00669ebf1e343a67e3d1815f463", "html_url": "https://github.com/rust-lang/rust/commit/6363a58e9af1b00669ebf1e343a67e3d1815f463"}], "stats": {"total": 3302, "additions": 1638, "deletions": 1664}, "files": [{"sha": "0905789079a3e51c072cfcc0c7c621a0cdde7c02", "filename": "src/etc/cpu-usage-over-time-plot.sh", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Fetc%2Fcpu-usage-over-time-plot.sh", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Fetc%2Fcpu-usage-over-time-plot.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fcpu-usage-over-time-plot.sh?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -16,7 +16,7 @@\n \n set -ex\n \n-bucket=rust-lang-ci-evalazure\n+bucket=rust-lang-ci2\n commit=$1\n builder=$2\n "}, {"sha": "41966360377b3b9f8bfeec6e7648eac2b9920c37", "filename": "src/liballoc/boxed.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Fliballoc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Fliballoc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fboxed.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -728,6 +728,14 @@ impl<I: Iterator + ?Sized> Iterator for Box<I> {\n         (**self).nth(n)\n     }\n }\n+\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+impl<I: Iterator + Sized> Iterator for Box<I> {\n+    fn last(self) -> Option<I::Item> where I: Sized {\n+        (*self).last()\n+    }\n+}\n+\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<I: DoubleEndedIterator + ?Sized> DoubleEndedIterator for Box<I> {\n     fn next_back(&mut self) -> Option<I::Item> {"}, {"sha": "9f531f5b83c75d6444b56ba7bb82aec8d1c5a929", "filename": "src/liballoc/collections/binary_heap.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Fliballoc%2Fcollections%2Fbinary_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Fliballoc%2Fcollections%2Fbinary_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Fbinary_heap.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -1035,6 +1035,11 @@ impl<'a, T> Iterator for Iter<'a, T> {\n     fn size_hint(&self) -> (usize, Option<usize>) {\n         self.iter.size_hint()\n     }\n+\n+    #[inline]\n+    fn last(self) -> Option<&'a T> {\n+        self.iter.last()\n+    }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "ca35600e857925557e0bad711e8a6d2360ab4529", "filename": "src/liballoc/collections/btree/map.rs", "status": "modified", "additions": 30, "deletions": 2, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Fliballoc%2Fcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Fliballoc%2Fcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Fbtree%2Fmap.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -770,8 +770,8 @@ impl<K: Ord, V> BTreeMap<K, V> {\n         }\n \n         // First, we merge `self` and `other` into a sorted sequence in linear time.\n-        let self_iter = mem::replace(self, BTreeMap::new()).into_iter();\n-        let other_iter = mem::replace(other, BTreeMap::new()).into_iter();\n+        let self_iter = mem::take(self).into_iter();\n+        let other_iter = mem::take(other).into_iter();\n         let iter = MergeIter {\n             left: self_iter.peekable(),\n             right: other_iter.peekable(),\n@@ -1193,6 +1193,10 @@ impl<'a, K: 'a, V: 'a> Iterator for Iter<'a, K, V> {\n     fn size_hint(&self) -> (usize, Option<usize>) {\n         (self.length, Some(self.length))\n     }\n+\n+    fn last(mut self) -> Option<(&'a K, &'a V)> {\n+        self.next_back()\n+    }\n }\n \n #[stable(feature = \"fused\", since = \"1.26.0\")]\n@@ -1253,6 +1257,10 @@ impl<'a, K: 'a, V: 'a> Iterator for IterMut<'a, K, V> {\n     fn size_hint(&self) -> (usize, Option<usize>) {\n         (self.length, Some(self.length))\n     }\n+\n+    fn last(mut self) -> Option<(&'a K, &'a mut V)> {\n+        self.next_back()\n+    }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -1421,6 +1429,10 @@ impl<'a, K, V> Iterator for Keys<'a, K, V> {\n     fn size_hint(&self) -> (usize, Option<usize>) {\n         self.inner.size_hint()\n     }\n+\n+    fn last(mut self) -> Option<&'a K> {\n+        self.next_back()\n+    }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -1458,6 +1470,10 @@ impl<'a, K, V> Iterator for Values<'a, K, V> {\n     fn size_hint(&self) -> (usize, Option<usize>) {\n         self.inner.size_hint()\n     }\n+\n+    fn last(mut self) -> Option<&'a V> {\n+        self.next_back()\n+    }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -1495,6 +1511,10 @@ impl<'a, K, V> Iterator for Range<'a, K, V> {\n             unsafe { Some(self.next_unchecked()) }\n         }\n     }\n+\n+    fn last(mut self) -> Option<(&'a K, &'a V)> {\n+        self.next_back()\n+    }\n }\n \n #[stable(feature = \"map_values_mut\", since = \"1.10.0\")]\n@@ -1508,6 +1528,10 @@ impl<'a, K, V> Iterator for ValuesMut<'a, K, V> {\n     fn size_hint(&self) -> (usize, Option<usize>) {\n         self.inner.size_hint()\n     }\n+\n+    fn last(mut self) -> Option<&'a mut V> {\n+        self.next_back()\n+    }\n }\n \n #[stable(feature = \"map_values_mut\", since = \"1.10.0\")]\n@@ -1626,6 +1650,10 @@ impl<'a, K, V> Iterator for RangeMut<'a, K, V> {\n             unsafe { Some(self.next_unchecked()) }\n         }\n     }\n+\n+    fn last(mut self) -> Option<(&'a K, &'a mut V)> {\n+        self.next_back()\n+    }\n }\n \n impl<'a, K, V> RangeMut<'a, K, V> {"}, {"sha": "d3af910a82c27939dab4b03e1190ccad6b842a86", "filename": "src/liballoc/collections/btree/set.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Fliballoc%2Fcollections%2Fbtree%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Fliballoc%2Fcollections%2Fbtree%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Fbtree%2Fset.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -1019,6 +1019,9 @@ impl<'a, T> Iterator for Iter<'a, T> {\n     fn size_hint(&self) -> (usize, Option<usize>) {\n         self.iter.size_hint()\n     }\n+    fn last(mut self) -> Option<&'a T> {\n+        self.next_back()\n+    }\n }\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, T> DoubleEndedIterator for Iter<'a, T> {\n@@ -1073,6 +1076,10 @@ impl<'a, T> Iterator for Range<'a, T> {\n     fn next(&mut self) -> Option<&'a T> {\n         self.iter.next().map(|(k, _)| k)\n     }\n+\n+    fn last(mut self) -> Option<&'a T> {\n+        self.next_back()\n+    }\n }\n \n #[stable(feature = \"btree_range\", since = \"1.17.0\")]"}, {"sha": "db0d6e2f9b9d4ac7246783c97a13555c0d3974be", "filename": "src/liballoc/collections/linked_list.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Fliballoc%2Fcollections%2Flinked_list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Fliballoc%2Fcollections%2Flinked_list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Flinked_list.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -708,7 +708,7 @@ impl<T> LinkedList<T> {\n         let len = self.len();\n         assert!(at <= len, \"Cannot split off at a nonexistent index\");\n         if at == 0 {\n-            return mem::replace(self, Self::new());\n+            return mem::take(self);\n         } else if at == len {\n             return Self::new();\n         }\n@@ -832,6 +832,11 @@ impl<'a, T> Iterator for Iter<'a, T> {\n     fn size_hint(&self) -> (usize, Option<usize>) {\n         (self.len, Some(self.len))\n     }\n+\n+    #[inline]\n+    fn last(mut self) -> Option<&'a T> {\n+        self.next_back()\n+    }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -881,6 +886,11 @@ impl<'a, T> Iterator for IterMut<'a, T> {\n     fn size_hint(&self) -> (usize, Option<usize>) {\n         (self.len, Some(self.len))\n     }\n+\n+    #[inline]\n+    fn last(mut self) -> Option<&'a mut T> {\n+        self.next_back()\n+    }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "573dd86b23aeb0276f266d9be83777c8e34b7d33", "filename": "src/liballoc/collections/vec_deque.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Fliballoc%2Fcollections%2Fvec_deque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Fliballoc%2Fcollections%2Fvec_deque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Fvec_deque.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -2206,6 +2206,11 @@ impl<'a, T> Iterator for Iter<'a, T> {\n         self.tail = self.head - iter.len();\n         final_res\n     }\n+\n+    #[inline]\n+    fn last(mut self) -> Option<&'a T> {\n+        self.next_back()\n+    }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -2319,6 +2324,11 @@ impl<'a, T> Iterator for IterMut<'a, T> {\n         accum = front.iter_mut().fold(accum, &mut f);\n         back.iter_mut().fold(accum, &mut f)\n     }\n+\n+    #[inline]\n+    fn last(mut self) -> Option<&'a mut T> {\n+        self.next_back()\n+    }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "bfe7d12d9d0babec125041e8accddf69b457f61f", "filename": "src/liballoc/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Fliballoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Fliballoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Flib.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -112,6 +112,7 @@\n #![feature(maybe_uninit_extra, maybe_uninit_slice, maybe_uninit_array)]\n #![feature(alloc_layout_extra)]\n #![feature(try_trait)]\n+#![feature(mem_take)]\n \n // Allow testing this library\n "}, {"sha": "70a93157c9ee26d12e3070d7b411cf0e51c2e05f", "filename": "src/liballoc/str.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Fliballoc%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Fliballoc%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fstr.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -203,7 +203,7 @@ impl ToOwned for str {\n     }\n \n     fn clone_into(&self, target: &mut String) {\n-        let mut b = mem::replace(target, String::new()).into_bytes();\n+        let mut b = mem::take(target).into_bytes();\n         self.as_bytes().clone_into(&mut b);\n         *target = unsafe { String::from_utf8_unchecked(b) }\n     }"}, {"sha": "1b0d3c19692748f53ad26d86076ecb68c0a1b064", "filename": "src/liballoc/string.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Fliballoc%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Fliballoc%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fstring.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -2385,6 +2385,11 @@ impl Iterator for Drain<'_> {\n     fn size_hint(&self) -> (usize, Option<usize>) {\n         self.iter.size_hint()\n     }\n+\n+    #[inline]\n+    fn last(mut self) -> Option<char> {\n+        self.next_back()\n+    }\n }\n \n #[stable(feature = \"drain\", since = \"1.6.0\")]"}, {"sha": "e0c724f557b9d0d9f84475e68ad5a0a5598d7349", "filename": "src/liballoc/tests/vec.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Fliballoc%2Ftests%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Fliballoc%2Ftests%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Fvec.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -761,7 +761,6 @@ fn from_into_inner() {\n     it.next().unwrap();\n     let vec = it.collect::<Vec<_>>();\n     assert_eq!(vec, [2, 3]);\n-    #[cfg(not(miri))] // Miri does not support comparing dangling pointers\n     assert!(ptr != vec.as_ptr());\n }\n "}, {"sha": "e6a6fdde540422abac4613b194ae73ae267d3345", "filename": "src/libcore/ascii.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibcore%2Fascii.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibcore%2Fascii.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fascii.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -117,6 +117,7 @@ impl Iterator for EscapeDefault {\n     type Item = u8;\n     fn next(&mut self) -> Option<u8> { self.range.next().map(|i| self.data[i]) }\n     fn size_hint(&self) -> (usize, Option<usize>) { self.range.size_hint() }\n+    fn last(mut self) -> Option<u8> { self.next_back() }\n }\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl DoubleEndedIterator for EscapeDefault {"}, {"sha": "d2d08a075b92cac902a8982fe639ccfc24db94b4", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -126,6 +126,7 @@\n #![feature(adx_target_feature)]\n #![feature(maybe_uninit_slice, maybe_uninit_array)]\n #![feature(external_doc)]\n+#![feature(mem_take)]\n \n #[prelude_import]\n #[allow(unused)]"}, {"sha": "b31522db474b7613d98757b92a151e39fa37ca27", "filename": "src/libcore/mem/mod.rs", "status": "modified", "additions": 20, "deletions": 8, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibcore%2Fmem%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibcore%2Fmem%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmem%2Fmod.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -552,6 +552,12 @@ pub fn swap<T>(x: &mut T, y: &mut T) {\n ///         mem::take(&mut self.buf)\n ///     }\n /// }\n+///\n+/// let mut buffer = Buffer { buf: vec![0, 1] };\n+/// assert_eq!(buffer.buf.len(), 2);\n+///\n+/// assert_eq!(buffer.get_and_reset(), vec![0, 1]);\n+/// assert_eq!(buffer.buf.len(), 0);\n /// ```\n ///\n /// [`Clone`]: ../../std/clone/trait.Clone.html\n@@ -586,17 +592,17 @@ pub fn take<T: Default>(dest: &mut T) -> T {\n /// struct Buffer<T> { buf: Vec<T> }\n ///\n /// impl<T> Buffer<T> {\n-///     fn get_and_reset(&mut self) -> Vec<T> {\n+///     fn replace_index(&mut self, i: usize, v: T) -> T {\n ///         // error: cannot move out of dereference of `&mut`-pointer\n-///         let buf = self.buf;\n-///         self.buf = Vec::new();\n-///         buf\n+///         let t = self.buf[i];\n+///         self.buf[i] = v;\n+///         t\n ///     }\n /// }\n /// ```\n ///\n-/// Note that `T` does not necessarily implement [`Clone`], so it can't even clone and reset\n-/// `self.buf`. But `replace` can be used to disassociate the original value of `self.buf` from\n+/// Note that `T` does not necessarily implement [`Clone`], so we can't even clone `self.buf[i]` to\n+/// avoid the move. But `replace` can be used to disassociate the original value at that index from\n /// `self`, allowing it to be returned:\n ///\n /// ```\n@@ -605,10 +611,16 @@ pub fn take<T: Default>(dest: &mut T) -> T {\n ///\n /// # struct Buffer<T> { buf: Vec<T> }\n /// impl<T> Buffer<T> {\n-///     fn get_and_reset(&mut self) -> Vec<T> {\n-///         mem::replace(&mut self.buf, Vec::new())\n+///     fn replace_index(&mut self, i: usize, v: T) -> T {\n+///         mem::replace(&mut self.buf[i], v)\n ///     }\n /// }\n+///\n+/// let mut buffer = Buffer { buf: vec![0, 1] };\n+/// assert_eq!(buffer.buf[0], 0);\n+///\n+/// assert_eq!(buffer.replace_index(0, 2), 0);\n+/// assert_eq!(buffer.buf[0], 2);\n /// ```\n ///\n /// [`Clone`]: ../../std/clone/trait.Clone.html"}, {"sha": "b27fd4098e167f7bca2be9923fa2a9370329f1e8", "filename": "src/libcore/option.rs", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibcore%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibcore%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Foption.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -777,15 +777,7 @@ impl<T> Option<T> {\n     #[inline]\n     #[stable(feature = \"option_entry\", since = \"1.20.0\")]\n     pub fn get_or_insert(&mut self, v: T) -> &mut T {\n-        match *self {\n-            None => *self = Some(v),\n-            _ => (),\n-        }\n-\n-        match *self {\n-            Some(ref mut v) => v,\n-            None => unsafe { hint::unreachable_unchecked() },\n-        }\n+        self.get_or_insert_with(|| v)\n     }\n \n     /// Inserts a value computed from `f` into the option if it is [`None`], then\n@@ -845,7 +837,7 @@ impl<T> Option<T> {\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn take(&mut self) -> Option<T> {\n-        mem::replace(self, None)\n+        mem::take(self)\n     }\n \n     /// Replaces the actual value in the option by the value given in parameter,"}, {"sha": "da781d7e9feeea2fe8f61b93f3675b7755213c09", "filename": "src/libcore/ptr/mod.rs", "status": "modified", "additions": 5, "deletions": 27, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibcore%2Fptr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibcore%2Fptr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr%2Fmod.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -100,16 +100,19 @@ pub use unique::Unique;\n ///   as the compiler doesn't need to prove that it's sound to elide the\n ///   copy.\n ///\n+/// Unaligned values cannot be dropped in place, they must be copied to an aligned\n+/// location first using [`ptr::read_unaligned`].\n+///\n /// [`ptr::read`]: ../ptr/fn.read.html\n+/// [`ptr::read_unaligned`]: ../ptr/fn.read_unaligned.html\n ///\n /// # Safety\n ///\n /// Behavior is undefined if any of the following conditions are violated:\n ///\n /// * `to_drop` must be [valid] for reads.\n ///\n-/// * `to_drop` must be properly aligned. See the example below for how to drop\n-///   an unaligned pointer.\n+/// * `to_drop` must be properly aligned.\n ///\n /// Additionally, if `T` is not [`Copy`], using the pointed-to value after\n /// calling `drop_in_place` can cause undefined behavior. Note that `*to_drop =\n@@ -153,31 +156,6 @@ pub use unique::Unique;\n /// assert!(weak.upgrade().is_none());\n /// ```\n ///\n-/// Unaligned values cannot be dropped in place, they must be copied to an aligned\n-/// location first:\n-/// ```\n-/// use std::ptr;\n-/// use std::mem::{self, MaybeUninit};\n-///\n-/// unsafe fn drop_after_copy<T>(to_drop: *mut T) {\n-///     let mut copy: MaybeUninit<T> = MaybeUninit::uninit();\n-///     ptr::copy(to_drop, copy.as_mut_ptr(), 1);\n-///     drop(copy.assume_init());\n-/// }\n-///\n-/// #[repr(packed, C)]\n-/// struct Packed {\n-///     _padding: u8,\n-///     unaligned: Vec<i32>,\n-/// }\n-///\n-/// let mut p = Packed { _padding: 0, unaligned: vec![42] };\n-/// unsafe {\n-///     drop_after_copy(&mut p.unaligned as *mut _);\n-///     mem::forget(p);\n-/// }\n-/// ```\n-///\n /// Notice that the compiler performs this copy automatically when dropping packed structs,\n /// i.e., you do not usually have to worry about such issues unless you call `drop_in_place`\n /// manually."}, {"sha": "b027e6bc051b3abe96d10bc8959460ed2edf2825", "filename": "src/libcore/str/mod.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibcore%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibcore%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fmod.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -1333,6 +1333,11 @@ impl<'a> Iterator for Lines<'a> {\n     fn size_hint(&self) -> (usize, Option<usize>) {\n         self.0.size_hint()\n     }\n+\n+    #[inline]\n+    fn last(mut self) -> Option<&'a str> {\n+        self.next_back()\n+    }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -4241,6 +4246,11 @@ impl<'a> Iterator for SplitWhitespace<'a> {\n     fn size_hint(&self) -> (usize, Option<usize>) {\n         self.inner.size_hint()\n     }\n+\n+    #[inline]\n+    fn last(mut self) -> Option<&'a str> {\n+        self.next_back()\n+    }\n }\n \n #[stable(feature = \"split_whitespace\", since = \"1.1.0\")]\n@@ -4267,6 +4277,11 @@ impl<'a> Iterator for SplitAsciiWhitespace<'a> {\n     fn size_hint(&self) -> (usize, Option<usize>) {\n         self.inner.size_hint()\n     }\n+\n+    #[inline]\n+    fn last(mut self) -> Option<&'a str> {\n+        self.next_back()\n+    }\n }\n \n #[stable(feature = \"split_ascii_whitespace\", since = \"1.34.0\")]"}, {"sha": "d86e21cf40b6e7e36da4238066adf742cd887d58", "filename": "src/libcore/tests/fmt/mod.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibcore%2Ftests%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibcore%2Ftests%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Ffmt%2Fmod.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -3,7 +3,6 @@ mod float;\n mod num;\n \n #[test]\n-#[cfg(not(miri))] // Miri cannot print pointers\n fn test_format_flags() {\n     // No residual flags left by pointer formatting\n     let p = \"\".as_ptr();\n@@ -13,7 +12,6 @@ fn test_format_flags() {\n }\n \n #[test]\n-#[cfg(not(miri))] // Miri cannot print pointers\n fn test_pointer_formats_data_pointer() {\n     let b: &[u8] = b\"\";\n     let s: &str = \"\";"}, {"sha": "569b3197d09bd64576d7b3fcac10a619071a09c5", "filename": "src/libcore/tests/ptr.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibcore%2Ftests%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibcore%2Ftests%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fptr.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -253,7 +253,6 @@ fn test_unsized_nonnull() {\n \n #[test]\n #[allow(warnings)]\n-#[cfg(not(miri))] // Miri cannot hash pointers\n // Have a symbol for the test below. It doesn\u2019t need to be an actual variadic function, match the\n // ABI, or even point to an actual executable code, because the function itself is never invoked.\n #[no_mangle]\n@@ -293,7 +292,7 @@ fn write_unaligned_drop() {\n }\n \n #[test]\n-#[cfg(not(miri))] // Miri cannot compute actual alignment of an allocation\n+#[cfg(not(miri))] // Miri does not compute a maximal `mid` for `align_offset`\n fn align_offset_zst() {\n     // For pointers of stride = 0, the pointer is already aligned or it cannot be aligned at\n     // all, because no amount of elements will align the pointer.\n@@ -308,7 +307,7 @@ fn align_offset_zst() {\n }\n \n #[test]\n-#[cfg(not(miri))] // Miri cannot compute actual alignment of an allocation\n+#[cfg(not(miri))] // Miri does not compute a maximal `mid` for `align_offset`\n fn align_offset_stride1() {\n     // For pointers of stride = 1, the pointer can always be aligned. The offset is equal to\n     // number of bytes."}, {"sha": "42ec9d451f7901dfbb9aeb00ebcb6d083b595290", "filename": "src/libcore/tests/slice.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibcore%2Ftests%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibcore%2Ftests%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fslice.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -1415,7 +1415,7 @@ pub mod memchr {\n }\n \n #[test]\n-#[cfg(not(miri))] // Miri cannot compute actual alignment of an allocation\n+#[cfg(not(miri))] // Miri does not compute a maximal `mid` for `align_offset`\n fn test_align_to_simple() {\n     let bytes = [1u8, 2, 3, 4, 5, 6, 7];\n     let (prefix, aligned, suffix) = unsafe { bytes.align_to::<u16>() };\n@@ -1439,7 +1439,7 @@ fn test_align_to_zst() {\n }\n \n #[test]\n-#[cfg(not(miri))] // Miri cannot compute actual alignment of an allocation\n+#[cfg(not(miri))] // Miri does not compute a maximal `mid` for `align_offset`\n fn test_align_to_non_trivial() {\n     #[repr(align(8))] struct U64(u64, u64);\n     #[repr(align(8))] struct U64U64U32(u64, u64, u32);"}, {"sha": "a51e3a9a33d7b542cd823fdbc315bb1ec76e10b2", "filename": "src/libproc_macro/bridge/buffer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibproc_macro%2Fbridge%2Fbuffer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibproc_macro%2Fbridge%2Fbuffer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibproc_macro%2Fbridge%2Fbuffer.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -78,7 +78,7 @@ impl<T: Copy> Buffer<T> {\n     }\n \n     pub(super) fn take(&mut self) -> Self {\n-        mem::replace(self, Self::default())\n+        mem::take(self)\n     }\n \n     pub(super) fn extend_from_slice(&mut self, xs: &[T]) {"}, {"sha": "89fb707001589339874dbf48609ffd63ebeef200", "filename": "src/libproc_macro/bridge/scoped_cell.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibproc_macro%2Fbridge%2Fscoped_cell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibproc_macro%2Fbridge%2Fscoped_cell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibproc_macro%2Fbridge%2Fscoped_cell.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -74,7 +74,7 @@ impl<T: LambdaL> ScopedCell<T> {\n     }\n \n     /// Sets the value in `self` to `value` while running `f`.\n-    pub fn set<'a, R>(&self, value: <T as ApplyL<'a>>::Out, f: impl FnOnce() -> R) -> R {\n+    pub fn set<R>(&self, value: <T as ApplyL<'_>>::Out, f: impl FnOnce() -> R) -> R {\n         self.replace(value, |_| f())\n     }\n }"}, {"sha": "2c097238b95b24801d6590aa4b60221699bb5cb4", "filename": "src/libproc_macro/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibproc_macro%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibproc_macro%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibproc_macro%2Flib.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -25,6 +25,7 @@\n #![feature(extern_types)]\n #![feature(in_band_lifetimes)]\n #![feature(optin_builtin_traits)]\n+#![feature(mem_take)]\n #![feature(non_exhaustive)]\n #![feature(specialization)]\n "}, {"sha": "a132575b0c673b8b35848e0a2a29871e55f2009e", "filename": "src/librustc/cfg/construct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc%2Fcfg%2Fconstruct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc%2Fcfg%2Fconstruct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fcfg%2Fconstruct.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -30,7 +30,7 @@ struct LoopScope {\n     break_index: CFGIndex,    // where to go on a `break`\n }\n \n-pub fn construct<'tcx>(tcx: TyCtxt<'tcx>, body: &hir::Body) -> CFG {\n+pub fn construct(tcx: TyCtxt<'_>, body: &hir::Body) -> CFG {\n     let mut graph = graph::Graph::new();\n     let entry = graph.add_node(CFGNodeData::Entry);\n "}, {"sha": "88fc7fbfad51ff7692481533906bf8bf6c03d03a", "filename": "src/librustc/cfg/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc%2Fcfg%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc%2Fcfg%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fcfg%2Fmod.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -49,7 +49,7 @@ pub type CFGNode = graph::Node<CFGNodeData>;\n pub type CFGEdge = graph::Edge<CFGEdgeData>;\n \n impl CFG {\n-    pub fn new<'tcx>(tcx: TyCtxt<'tcx>, body: &hir::Body) -> CFG {\n+    pub fn new(tcx: TyCtxt<'_>, body: &hir::Body) -> CFG {\n         construct::construct(tcx, body)\n     }\n "}, {"sha": "b8c6c1e3723826a19e070d0bc8c1e254d101da7e", "filename": "src/librustc/dep_graph/graph.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc%2Fdep_graph%2Fgraph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc%2Fdep_graph%2Fgraph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fgraph.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -841,7 +841,7 @@ impl DepGraph {\n     //\n     // This method will only load queries that will end up in the disk cache.\n     // Other queries will not be executed.\n-    pub fn exec_cache_promotions<'tcx>(&self, tcx: TyCtxt<'tcx>) {\n+    pub fn exec_cache_promotions(&self, tcx: TyCtxt<'_>) {\n         let data = self.data.as_ref().unwrap();\n         for prev_index in data.colors.values.indices() {\n             match data.colors.get(prev_index) {"}, {"sha": "9160b8024ee4512042f4c166e90600085af25d63", "filename": "src/librustc/hir/check_attr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc%2Fhir%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc%2Fhir%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fcheck_attr.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -347,7 +347,7 @@ fn is_c_like_enum(item: &hir::Item) -> bool {\n     }\n }\n \n-fn check_mod_attrs<'tcx>(tcx: TyCtxt<'tcx>, module_def_id: DefId) {\n+fn check_mod_attrs(tcx: TyCtxt<'_>, module_def_id: DefId) {\n     tcx.hir().visit_item_likes_in_module(\n         module_def_id,\n         &mut CheckAttrVisitor { tcx }.as_deep_visitor()"}, {"sha": "ef05b57fb8f7dd7d23abe0889ddae10796107080", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -1280,8 +1280,8 @@ impl<'a> LoweringContext<'a> {\n         let was_in_loop_condition = self.is_in_loop_condition;\n         self.is_in_loop_condition = false;\n \n-        let catch_scopes = mem::replace(&mut self.catch_scopes, Vec::new());\n-        let loop_scopes = mem::replace(&mut self.loop_scopes, Vec::new());\n+        let catch_scopes = mem::take(&mut self.catch_scopes);\n+        let loop_scopes = mem::take(&mut self.loop_scopes);\n         let ret = f(self);\n         self.catch_scopes = catch_scopes;\n         self.loop_scopes = loop_scopes;"}, {"sha": "891a1956bc971da7ecf4164cbec771ab3e59f3f6", "filename": "src/librustc/hir/map/hir_id_validator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc%2Fhir%2Fmap%2Fhir_id_validator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc%2Fhir%2Fmap%2Fhir_id_validator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fhir_id_validator.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -4,7 +4,7 @@ use crate::hir::itemlikevisit::ItemLikeVisitor;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_data_structures::sync::{Lock, ParallelIterator, par_iter};\n \n-pub fn check_crate<'hir>(hir_map: &hir::map::Map<'hir>) {\n+pub fn check_crate(hir_map: &hir::map::Map<'_>) {\n     hir_map.dep_graph.assert_ignored();\n \n     let errors = Lock::new(Vec::new());"}, {"sha": "037d04a5d8ed3a21d61655008f25290ae669df95", "filename": "src/librustc/hir/map/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -147,15 +147,15 @@ impl Forest {\n         }\n     }\n \n-    pub fn krate<'hir>(&'hir self) -> &'hir Crate {\n+    pub fn krate(&self) -> &Crate {\n         self.dep_graph.read(DepNode::new_no_params(DepKind::Krate));\n         &self.krate\n     }\n \n     /// This is used internally in the dependency tracking system.\n     /// Use the `krate` method to ensure your dependency on the\n     /// crate is tracked.\n-    pub fn untracked_krate<'hir>(&'hir self) -> &'hir Crate {\n+    pub fn untracked_krate(&self) -> &Crate {\n         &self.krate\n     }\n }\n@@ -1085,7 +1085,7 @@ impl<'a> NodesMatchingSuffix<'a> {\n         // If `id` itself is a mod named `m` with parent `p`, then\n         // returns `Some(id, m, p)`.  If `id` has no mod in its parent\n         // chain, then returns `None`.\n-        fn find_first_mod_parent<'a>(map: &'a Map<'_>, mut id: HirId) -> Option<(HirId, Name)> {\n+        fn find_first_mod_parent(map: &Map<'_>, mut id: HirId) -> Option<(HirId, Name)> {\n             loop {\n                 if let Node::Item(item) = map.find(id)? {\n                     if item_is_mod(&item) {"}, {"sha": "a0621af053783865d46f234fea1e9aff97b8a0c2", "filename": "src/librustc/infer/nll_relate/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc%2Finfer%2Fnll_relate%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc%2Finfer%2Fnll_relate%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fnll_relate%2Fmod.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -364,7 +364,7 @@ where\n         // been fully instantiated and hence the set of scopes we have\n         // doesn't matter -- just to be sure, put an empty vector\n         // in there.\n-        let old_a_scopes = ::std::mem::replace(pair.vid_scopes(self), vec![]);\n+        let old_a_scopes = ::std::mem::take(pair.vid_scopes(self));\n \n         // Relate the generalized kind to the original one.\n         let result = pair.relate_generalized_ty(self, generalized_ty);"}, {"sha": "e1470e4ef0232318468feb298536a639fe47fda7", "filename": "src/librustc/infer/outlives/obligations.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc%2Finfer%2Foutlives%2Fobligations.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc%2Finfer%2Foutlives%2Fobligations.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Foutlives%2Fobligations.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -112,7 +112,7 @@ impl<'cx, 'tcx> InferCtxt<'cx, 'tcx> {\n \n     /// Trait queries just want to pass back type obligations \"as is\"\n     pub fn take_registered_region_obligations(&self) -> Vec<(hir::HirId, RegionObligation<'tcx>)> {\n-        ::std::mem::replace(&mut *self.region_obligations.borrow_mut(), vec![])\n+        ::std::mem::take(&mut *self.region_obligations.borrow_mut())\n     }\n \n     /// Process the region obligations that must be proven (during"}, {"sha": "21904edb309cb4b2efe6de2899465f6c9c9ec843", "filename": "src/librustc/infer/region_constraints/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc%2Finfer%2Fregion_constraints%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc%2Finfer%2Fregion_constraints%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fregion_constraints%2Fmod.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -455,7 +455,7 @@ impl<'tcx> RegionConstraintCollector<'tcx> {\n             *any_unifications = false;\n         }\n \n-        mem::replace(data, RegionConstraintData::default())\n+        mem::take(data)\n     }\n \n     pub fn data(&self) -> &RegionConstraintData<'tcx> {"}, {"sha": "e30e86998a8c6f16bde7f8c1d8e932edb1380f31", "filename": "src/librustc/infer/type_variable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc%2Finfer%2Ftype_variable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc%2Finfer%2Ftype_variable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ftype_variable.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -115,7 +115,7 @@ impl<'tcx> TypeVariableTable<'tcx> {\n     ///\n     /// Note that this function does not return care whether\n     /// `vid` has been unified with something else or not.\n-    pub fn var_diverges<'a>(&'a self, vid: ty::TyVid) -> bool {\n+    pub fn var_diverges(&self, vid: ty::TyVid) -> bool {\n         self.values.get(vid.index as usize).diverging\n     }\n "}, {"sha": "c4c23428002e63676d7670a721a71701f87a595f", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -67,6 +67,7 @@\n #![feature(crate_visibility_modifier)]\n #![feature(proc_macro_hygiene)]\n #![feature(log_syntax)]\n+#![feature(mem_take)]\n \n #![recursion_limit=\"512\"]\n "}, {"sha": "59b08b832d27275fe0f210cc883c414b35d6c900", "filename": "src/librustc/lint/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc%2Flint%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc%2Flint%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fmod.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -765,7 +765,7 @@ pub fn maybe_lint_level_root(tcx: TyCtxt<'_>, id: hir::HirId) -> bool {\n     attrs.iter().any(|attr| Level::from_symbol(attr.name_or_empty()).is_some())\n }\n \n-fn lint_levels<'tcx>(tcx: TyCtxt<'tcx>, cnum: CrateNum) -> &'tcx LintLevelMap {\n+fn lint_levels(tcx: TyCtxt<'_>, cnum: CrateNum) -> &LintLevelMap {\n     assert_eq!(cnum, LOCAL_CRATE);\n     let mut builder = LintLevelMapBuilder {\n         levels: LintLevelSets::builder(tcx.sess),"}, {"sha": "5a580dfa420b3f22d5a3b33fabf39d7e2c0383ea", "filename": "src/librustc/middle/cstore.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcstore.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -211,7 +211,7 @@ pub trait CrateStore {\n     fn crates_untracked(&self) -> Vec<CrateNum>;\n \n     // utility functions\n-    fn encode_metadata<'tcx>(&self, tcx: TyCtxt<'tcx>) -> EncodedMetadata;\n+    fn encode_metadata(&self, tcx: TyCtxt<'_>) -> EncodedMetadata;\n     fn metadata_encoding_version(&self) -> &[u8];\n }\n "}, {"sha": "e1889aa555f86d33b155858d796e0df9642362e8", "filename": "src/librustc/middle/dead.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc%2Fmiddle%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc%2Fmiddle%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdead.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -26,7 +26,7 @@ use syntax_pos;\n // explored. For example, if it's a live Node::Item that is a\n // function, then we should explore its block to check for codes that\n // may need to be marked as live.\n-fn should_explore<'tcx>(tcx: TyCtxt<'tcx>, hir_id: hir::HirId) -> bool {\n+fn should_explore(tcx: TyCtxt<'_>, hir_id: hir::HirId) -> bool {\n     match tcx.hir().find(hir_id) {\n         Some(Node::Item(..)) |\n         Some(Node::ImplItem(..)) |\n@@ -662,7 +662,7 @@ impl Visitor<'tcx> for DeadVisitor<'tcx> {\n     }\n }\n \n-pub fn check_crate<'tcx>(tcx: TyCtxt<'tcx>) {\n+pub fn check_crate(tcx: TyCtxt<'_>) {\n     let access_levels = &tcx.privacy_access_levels(LOCAL_CRATE);\n     let krate = tcx.hir().krate();\n     let live_symbols = find_live(tcx, access_levels, krate);"}, {"sha": "96b99fe4cdce2c01ca4716a4ba60be190907f59f", "filename": "src/librustc/middle/dependency_format.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc%2Fmiddle%2Fdependency_format.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc%2Fmiddle%2Fdependency_format.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdependency_format.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -81,7 +81,7 @@ pub enum Linkage {\n     Dynamic,\n }\n \n-pub fn calculate<'tcx>(tcx: TyCtxt<'tcx>) {\n+pub fn calculate(tcx: TyCtxt<'_>) {\n     let sess = &tcx.sess;\n     let fmts = sess.crate_types.borrow().iter().map(|&ty| {\n         let linkage = calculate_type(tcx, ty);\n@@ -92,7 +92,7 @@ pub fn calculate<'tcx>(tcx: TyCtxt<'tcx>) {\n     sess.dependency_formats.set(fmts);\n }\n \n-fn calculate_type<'tcx>(tcx: TyCtxt<'tcx>, ty: config::CrateType) -> DependencyList {\n+fn calculate_type(tcx: TyCtxt<'_>, ty: config::CrateType) -> DependencyList {\n     let sess = &tcx.sess;\n \n     if !sess.opts.output_types.should_codegen() {\n@@ -267,7 +267,7 @@ fn add_library(\n     }\n }\n \n-fn attempt_static<'tcx>(tcx: TyCtxt<'tcx>) -> Option<DependencyList> {\n+fn attempt_static(tcx: TyCtxt<'_>) -> Option<DependencyList> {\n     let sess = &tcx.sess;\n     let crates = cstore::used_crates(tcx, RequireStatic);\n     if !crates.iter().by_ref().all(|&(_, ref p)| p.is_some()) {\n@@ -324,7 +324,7 @@ fn activate_injected_dep(injected: Option<CrateNum>,\n \n // After the linkage for a crate has been determined we need to verify that\n // there's only going to be one allocator in the output.\n-fn verify_ok<'tcx>(tcx: TyCtxt<'tcx>, list: &[Linkage]) {\n+fn verify_ok(tcx: TyCtxt<'_>, list: &[Linkage]) {\n     let sess = &tcx.sess;\n     if list.len() == 0 {\n         return"}, {"sha": "1cc96c549e7243c943d8629bcfecc3e8f91e76f1", "filename": "src/librustc/middle/intrinsicck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc%2Fmiddle%2Fintrinsicck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc%2Fmiddle%2Fintrinsicck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fintrinsicck.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -10,7 +10,7 @@ use syntax_pos::{Span, sym};\n use crate::hir::intravisit::{self, Visitor, NestedVisitorMap};\n use crate::hir;\n \n-fn check_mod_intrinsics<'tcx>(tcx: TyCtxt<'tcx>, module_def_id: DefId) {\n+fn check_mod_intrinsics(tcx: TyCtxt<'_>, module_def_id: DefId) {\n     tcx.hir().visit_item_likes_in_module(\n         module_def_id,\n         &mut ItemVisitor { tcx }.as_deep_visitor()"}, {"sha": "694b0a986296065b3d005a3d26aa63b5b9ba8f6b", "filename": "src/librustc/middle/lib_features.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc%2Fmiddle%2Flib_features.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc%2Fmiddle%2Flib_features.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flib_features.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -142,7 +142,7 @@ impl Visitor<'tcx> for LibFeatureCollector<'tcx> {\n     }\n }\n \n-pub fn collect<'tcx>(tcx: TyCtxt<'tcx>) -> LibFeatures {\n+pub fn collect(tcx: TyCtxt<'_>) -> LibFeatures {\n     let mut collector = LibFeatureCollector::new(tcx);\n     intravisit::walk_crate(&mut collector, tcx.hir().krate());\n     collector.lib_features"}, {"sha": "30ff835bdcc43c7262081048fed28c6d0769c53b", "filename": "src/librustc/middle/liveness.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fliveness.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -181,7 +181,7 @@ impl<'tcx> Visitor<'tcx> for IrMaps<'tcx> {\n     fn visit_arm(&mut self, a: &'tcx hir::Arm) { visit_arm(self, a); }\n }\n \n-fn check_mod_liveness<'tcx>(tcx: TyCtxt<'tcx>, module_def_id: DefId) {\n+fn check_mod_liveness(tcx: TyCtxt<'_>, module_def_id: DefId) {\n     tcx.hir().visit_item_likes_in_module(\n         module_def_id,\n         &mut IrMaps::new(tcx, module_def_id).as_deep_visitor(),"}, {"sha": "6b26be34d75205cfe5e45c394236d65c4c259844", "filename": "src/librustc/middle/reachable.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc%2Fmiddle%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc%2Fmiddle%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Freachable.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -42,8 +42,8 @@ fn item_might_be_inlined(tcx: TyCtxt<'tcx>, item: &hir::Item, attrs: CodegenFnAt\n     }\n }\n \n-fn method_might_be_inlined<'tcx>(\n-    tcx: TyCtxt<'tcx>,\n+fn method_might_be_inlined(\n+    tcx: TyCtxt<'_>,\n     impl_item: &hir::ImplItem,\n     impl_src: DefId,\n ) -> bool {\n@@ -391,7 +391,7 @@ impl<'a, 'tcx> ItemLikeVisitor<'tcx> for CollectPrivateImplItemsVisitor<'a, 'tcx\n #[derive(Clone, HashStable)]\n pub struct ReachableSet(pub Lrc<HirIdSet>);\n \n-fn reachable_set<'tcx>(tcx: TyCtxt<'tcx>, crate_num: CrateNum) -> ReachableSet {\n+fn reachable_set(tcx: TyCtxt<'_>, crate_num: CrateNum) -> ReachableSet {\n     debug_assert!(crate_num == LOCAL_CRATE);\n \n     let access_levels = &tcx.privacy_access_levels(LOCAL_CRATE);"}, {"sha": "f859e835425c435f0bb8002ceb60d24f92175503", "filename": "src/librustc/middle/region.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc%2Fmiddle%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc%2Fmiddle%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fregion.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -1375,7 +1375,7 @@ impl<'tcx> Visitor<'tcx> for RegionResolutionVisitor<'tcx> {\n \n         let outer_ec = mem::replace(&mut self.expr_and_pat_count, 0);\n         let outer_cx = self.cx;\n-        let outer_ts = mem::replace(&mut self.terminating_scopes, FxHashSet::default());\n+        let outer_ts = mem::take(&mut self.terminating_scopes);\n         self.terminating_scopes.insert(body.value.hir_id.local_id);\n \n         if let Some(root_id) = self.cx.root_id {\n@@ -1446,7 +1446,7 @@ impl<'tcx> Visitor<'tcx> for RegionResolutionVisitor<'tcx> {\n     }\n }\n \n-fn region_scope_tree<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> &'tcx ScopeTree {\n+fn region_scope_tree(tcx: TyCtxt<'_>, def_id: DefId) -> &ScopeTree {\n     let closure_base_def_id = tcx.closure_base_def_id(def_id);\n     if closure_base_def_id != def_id {\n         return tcx.region_scope_tree(closure_base_def_id);"}, {"sha": "758f14ebf99a66f96c605dffa36739709cf516f7", "filename": "src/librustc/middle/resolve_lifetime.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -19,7 +19,7 @@ use errors::{Applicability, DiagnosticBuilder};\n use rustc_macros::HashStable;\n use std::borrow::Cow;\n use std::cell::Cell;\n-use std::mem::replace;\n+use std::mem::{replace, take};\n use syntax::ast;\n use syntax::attr;\n use syntax::symbol::{kw, sym};\n@@ -368,7 +368,7 @@ pub fn provide(providers: &mut ty::query::Providers<'_>) {\n /// entire crate. You should not read the result of this query\n /// directly, but rather use `named_region_map`, `is_late_bound_map`,\n /// etc.\n-fn resolve_lifetimes<'tcx>(tcx: TyCtxt<'tcx>, for_krate: CrateNum) -> &'tcx ResolveLifetimes {\n+fn resolve_lifetimes(tcx: TyCtxt<'_>, for_krate: CrateNum) -> &ResolveLifetimes {\n     assert_eq!(for_krate, LOCAL_CRATE);\n \n     let named_region_map = krate(tcx);\n@@ -395,7 +395,7 @@ fn resolve_lifetimes<'tcx>(tcx: TyCtxt<'tcx>, for_krate: CrateNum) -> &'tcx Reso\n     tcx.arena.alloc(rl)\n }\n \n-fn krate<'tcx>(tcx: TyCtxt<'tcx>) -> NamedRegionMap {\n+fn krate(tcx: TyCtxt<'_>) -> NamedRegionMap {\n     let krate = tcx.hir().krate();\n     let mut map = NamedRegionMap {\n         defs: Default::default(),\n@@ -441,7 +441,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n \n     fn visit_nested_body(&mut self, body: hir::BodyId) {\n         // Each body has their own set of labels, save labels.\n-        let saved = replace(&mut self.labels_in_fn, vec![]);\n+        let saved = take(&mut self.labels_in_fn);\n         let body = self.tcx.hir().body(body);\n         extract_labels(self, body);\n         self.with(\n@@ -1405,9 +1405,8 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n             lifetime_uses,\n             ..\n         } = self;\n-        let labels_in_fn = replace(&mut self.labels_in_fn, vec![]);\n-        let xcrate_object_lifetime_defaults =\n-            replace(&mut self.xcrate_object_lifetime_defaults, DefIdMap::default());\n+        let labels_in_fn = take(&mut self.labels_in_fn);\n+        let xcrate_object_lifetime_defaults = take(&mut self.xcrate_object_lifetime_defaults);\n         let mut this = LifetimeContext {\n             tcx: *tcx,\n             map: map,"}, {"sha": "101563d2d99ef7dde0b73583876a343b6a851cf7", "filename": "src/librustc/middle/stability.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc%2Fmiddle%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc%2Fmiddle%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fstability.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -466,7 +466,7 @@ impl<'tcx> Index<'tcx> {\n \n /// Cross-references the feature names of unstable APIs with enabled\n /// features and possibly prints errors.\n-fn check_mod_unstable_api_usage<'tcx>(tcx: TyCtxt<'tcx>, module_def_id: DefId) {\n+fn check_mod_unstable_api_usage(tcx: TyCtxt<'_>, module_def_id: DefId) {\n     tcx.hir().visit_item_likes_in_module(module_def_id, &mut Checker { tcx }.as_deep_visitor());\n }\n \n@@ -836,7 +836,7 @@ impl<'tcx> TyCtxt<'tcx> {\n /// Given the list of enabled features that were not language features (i.e., that\n /// were expected to be library features), and the list of features used from\n /// libraries, identify activated features that don't exist and error about them.\n-pub fn check_unused_or_stable_features<'tcx>(tcx: TyCtxt<'tcx>) {\n+pub fn check_unused_or_stable_features(tcx: TyCtxt<'_>) {\n     let access_levels = &tcx.privacy_access_levels(LOCAL_CRATE);\n \n     if tcx.stability().staged_api[&LOCAL_CRATE] {\n@@ -920,8 +920,8 @@ pub fn check_unused_or_stable_features<'tcx>(tcx: TyCtxt<'tcx>) {\n     // don't lint about unused features. We should reenable this one day!\n }\n \n-fn unnecessary_stable_feature_lint<'tcx>(\n-    tcx: TyCtxt<'tcx>,\n+fn unnecessary_stable_feature_lint(\n+    tcx: TyCtxt<'_>,\n     span: Span,\n     feature: Symbol,\n     since: Symbol,"}, {"sha": "c8f42b1c604a587b2315e135ae6b51b6eb0d0676", "filename": "src/librustc/mir/interpret/error.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -182,7 +182,7 @@ pub fn struct_error<'tcx>(tcx: TyCtxtAt<'tcx>, msg: &str) -> DiagnosticBuilder<'\n /// up with a Rust-level backtrace of where the error occured.\n /// Thsese should always be constructed by calling `.into()` on\n /// a `InterpError`. In `librustc_mir::interpret`, we have the `err!`\n-/// macro for this\n+/// macro for this.\n #[derive(Debug, Clone)]\n pub struct InterpErrorInfo<'tcx> {\n     pub kind: InterpError<'tcx, u64>,"}, {"sha": "59a032d53cfd67991da6d32ac16d5d41707b6597", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -2867,19 +2867,19 @@ impl<'tcx> graph::WithStartNode for Body<'tcx> {\n }\n \n impl<'tcx> graph::WithPredecessors for Body<'tcx> {\n-    fn predecessors<'graph>(\n-        &'graph self,\n+    fn predecessors(\n+        &self,\n         node: Self::Node,\n-    ) -> <Self as GraphPredecessors<'graph>>::Iter {\n+    ) -> <Self as GraphPredecessors<'_>>::Iter {\n         self.predecessors_for(node).clone().into_iter()\n     }\n }\n \n impl<'tcx> graph::WithSuccessors for Body<'tcx> {\n-    fn successors<'graph>(\n-        &'graph self,\n+    fn successors(\n+        &self,\n         node: Self::Node,\n-    ) -> <Self as GraphSuccessors<'graph>>::Iter {\n+    ) -> <Self as GraphSuccessors<'_>>::Iter {\n         self.basic_blocks[node].terminator().successors().cloned()\n     }\n }"}, {"sha": "82c53be3ec70ff15316d2fa9d5f34d9333a23090", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -269,11 +269,11 @@ impl OutputTypes {\n         self.0.contains_key(key)\n     }\n \n-    pub fn keys<'a>(&'a self) -> BTreeMapKeysIter<'a, OutputType, Option<PathBuf>> {\n+    pub fn keys(&self) -> BTreeMapKeysIter<'_, OutputType, Option<PathBuf>> {\n         self.0.keys()\n     }\n \n-    pub fn values<'a>(&'a self) -> BTreeMapValuesIter<'a, OutputType, Option<PathBuf>> {\n+    pub fn values(&self) -> BTreeMapValuesIter<'_, OutputType, Option<PathBuf>> {\n         self.0.values()\n     }\n \n@@ -316,7 +316,7 @@ impl Externs {\n         self.0.get(key)\n     }\n \n-    pub fn iter<'a>(&'a self) -> BTreeMapIter<'a, String, ExternEntry> {\n+    pub fn iter(&self) -> BTreeMapIter<'_, String, ExternEntry> {\n         self.0.iter()\n     }\n }"}, {"sha": "3cbf0ee213ae371891821890de7a2086d3e61bc8", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 26, "deletions": 26, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -215,66 +215,66 @@ impl Session {\n         *self.crate_disambiguator.get()\n     }\n \n-    pub fn struct_span_warn<'a, S: Into<MultiSpan>>(\n-        &'a self,\n+    pub fn struct_span_warn<S: Into<MultiSpan>>(\n+        &self,\n         sp: S,\n         msg: &str,\n-    ) -> DiagnosticBuilder<'a> {\n+    ) -> DiagnosticBuilder<'_> {\n         self.diagnostic().struct_span_warn(sp, msg)\n     }\n-    pub fn struct_span_warn_with_code<'a, S: Into<MultiSpan>>(\n-        &'a self,\n+    pub fn struct_span_warn_with_code<S: Into<MultiSpan>>(\n+        &self,\n         sp: S,\n         msg: &str,\n         code: DiagnosticId,\n-    ) -> DiagnosticBuilder<'a> {\n+    ) -> DiagnosticBuilder<'_> {\n         self.diagnostic().struct_span_warn_with_code(sp, msg, code)\n     }\n-    pub fn struct_warn<'a>(&'a self, msg: &str) -> DiagnosticBuilder<'a> {\n+    pub fn struct_warn(&self, msg: &str) -> DiagnosticBuilder<'_> {\n         self.diagnostic().struct_warn(msg)\n     }\n-    pub fn struct_span_err<'a, S: Into<MultiSpan>>(\n-        &'a self,\n+    pub fn struct_span_err<S: Into<MultiSpan>>(\n+        &self,\n         sp: S,\n         msg: &str,\n-    ) -> DiagnosticBuilder<'a> {\n+    ) -> DiagnosticBuilder<'_> {\n         self.diagnostic().struct_span_err(sp, msg)\n     }\n-    pub fn struct_span_err_with_code<'a, S: Into<MultiSpan>>(\n-        &'a self,\n+    pub fn struct_span_err_with_code<S: Into<MultiSpan>>(\n+        &self,\n         sp: S,\n         msg: &str,\n         code: DiagnosticId,\n-    ) -> DiagnosticBuilder<'a> {\n+    ) -> DiagnosticBuilder<'_> {\n         self.diagnostic().struct_span_err_with_code(sp, msg, code)\n     }\n     // FIXME: This method should be removed (every error should have an associated error code).\n-    pub fn struct_err<'a>(&'a self, msg: &str) -> DiagnosticBuilder<'a> {\n+    pub fn struct_err(&self, msg: &str) -> DiagnosticBuilder<'_> {\n         self.diagnostic().struct_err(msg)\n     }\n-    pub fn struct_err_with_code<'a>(\n-        &'a self,\n+    pub fn struct_err_with_code(\n+        &self,\n         msg: &str,\n         code: DiagnosticId,\n-    ) -> DiagnosticBuilder<'a> {\n+    ) -> DiagnosticBuilder<'_> {\n         self.diagnostic().struct_err_with_code(msg, code)\n     }\n-    pub fn struct_span_fatal<'a, S: Into<MultiSpan>>(\n-        &'a self,\n+    pub fn struct_span_fatal<S: Into<MultiSpan>>(\n+        &self,\n         sp: S,\n         msg: &str,\n-    ) -> DiagnosticBuilder<'a> {\n+    ) -> DiagnosticBuilder<'_> {\n         self.diagnostic().struct_span_fatal(sp, msg)\n     }\n-    pub fn struct_span_fatal_with_code<'a, S: Into<MultiSpan>>(\n-        &'a self,\n+    pub fn struct_span_fatal_with_code<S: Into<MultiSpan>>(\n+        &self,\n         sp: S,\n         msg: &str,\n         code: DiagnosticId,\n-    ) -> DiagnosticBuilder<'a> {\n+    ) -> DiagnosticBuilder<'_> {\n         self.diagnostic().struct_span_fatal_with_code(sp, msg, code)\n     }\n-    pub fn struct_fatal<'a>(&'a self, msg: &str) -> DiagnosticBuilder<'a> {\n+    pub fn struct_fatal(&self, msg: &str) -> DiagnosticBuilder<'_> {\n         self.diagnostic().struct_fatal(msg)\n     }\n \n@@ -416,7 +416,7 @@ impl Session {\n     pub fn next_node_id(&self) -> NodeId {\n         self.reserve_node_ids(1)\n     }\n-    pub fn diagnostic<'a>(&'a self) -> &'a errors::Handler {\n+    pub fn diagnostic(&self) -> &errors::Handler {\n         &self.parse_sess.span_diagnostic\n     }\n \n@@ -504,7 +504,7 @@ impl Session {\n         );\n     }\n \n-    pub fn source_map<'a>(&'a self) -> &'a source_map::SourceMap {\n+    pub fn source_map(&self) -> &source_map::SourceMap {\n         self.parse_sess.source_map()\n     }\n     pub fn verbose(&self) -> bool {"}, {"sha": "b6f0addd77107216c344fefa999de768462d56ba", "filename": "src/librustc/traits/coherence.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc%2Ftraits%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc%2Ftraits%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fcoherence.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -48,8 +48,8 @@ pub fn add_placeholder_note(err: &mut errors::DiagnosticBuilder<'_>) {\n /// If there are types that satisfy both impls, invokes `on_overlap`\n /// with a suitably-freshened `ImplHeader` with those types\n /// substituted. Otherwise, invokes `no_overlap`.\n-pub fn overlapping_impls<'tcx, F1, F2, R>(\n-    tcx: TyCtxt<'tcx>,\n+pub fn overlapping_impls<F1, F2, R>(\n+    tcx: TyCtxt<'_>,\n     impl1_def_id: DefId,\n     impl2_def_id: DefId,\n     intercrate_mode: IntercrateMode,\n@@ -247,10 +247,10 @@ pub enum OrphanCheckErr<'tcx> {\n ///\n /// 1. All type parameters in `Self` must be \"covered\" by some local type constructor.\n /// 2. Some local type must appear in `Self`.\n-pub fn orphan_check<'tcx>(\n-    tcx: TyCtxt<'tcx>,\n+pub fn orphan_check(\n+    tcx: TyCtxt<'_>,\n     impl_def_id: DefId,\n-) -> Result<(), OrphanCheckErr<'tcx>> {\n+) -> Result<(), OrphanCheckErr<'_>> {\n     debug!(\"orphan_check({:?})\", impl_def_id);\n \n     // We only except this routine to be invoked on implementations"}, {"sha": "d6cc68bcdab468c19c68a709bbcf5fb4457a47ff", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -247,7 +247,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n     fn fuzzy_match_tys(&self, a: Ty<'tcx>, b: Ty<'tcx>) -> bool {\n         /// returns the fuzzy category of a given type, or None\n         /// if the type can be equated to any type.\n-        fn type_category<'tcx>(t: Ty<'tcx>) -> Option<u32> {\n+        fn type_category(t: Ty<'_>) -> Option<u32> {\n             match t.sty {\n                 ty::Bool => Some(0),\n                 ty::Char => Some(1),"}, {"sha": "37eff852abd01de8b5c485e7fcc4be4cb7c50cdc", "filename": "src/librustc/traits/object_safety.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc%2Ftraits%2Fobject_safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc%2Ftraits%2Fobject_safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fobject_safety.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -702,6 +702,6 @@ impl<'tcx> TyCtxt<'tcx> {\n     }\n }\n \n-pub(super) fn is_object_safe_provider<'tcx>(tcx: TyCtxt<'tcx>, trait_def_id: DefId) -> bool {\n+pub(super) fn is_object_safe_provider(tcx: TyCtxt<'_>, trait_def_id: DefId) -> bool {\n     tcx.object_safety_violations(trait_def_id).is_empty()\n }"}, {"sha": "20acf443406908baccd56ddeec2db744e3e73d18", "filename": "src/librustc/traits/project.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fproject.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -1509,8 +1509,8 @@ fn confirm_impl_candidate<'cx, 'tcx>(\n ///\n /// Based on the \"projection mode\", this lookup may in fact only examine the\n /// topmost impl. See the comments for `Reveal` for more details.\n-fn assoc_ty_def<'cx, 'tcx>(\n-    selcx: &SelectionContext<'cx, 'tcx>,\n+fn assoc_ty_def(\n+    selcx: &SelectionContext<'_, '_>,\n     impl_def_id: DefId,\n     assoc_ty_def_id: DefId,\n ) -> specialization_graph::NodeItem<ty::AssocItem> {"}, {"sha": "f0389bb037ac5b827aeb4e1e5bcc8e07f1d29d5a", "filename": "src/librustc/traits/specialize/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc%2Ftraits%2Fspecialize%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc%2Ftraits%2Fspecialize%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fspecialize%2Fmod.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -145,8 +145,8 @@ pub fn find_associated_item<'tcx>(\n /// Specialization is determined by the sets of types to which the impls apply;\n /// `impl1` specializes `impl2` if it applies to a subset of the types `impl2` applies\n /// to.\n-pub(super) fn specializes<'tcx>(\n-    tcx: TyCtxt<'tcx>,\n+pub(super) fn specializes(\n+    tcx: TyCtxt<'_>,\n     (impl1_def_id, impl2_def_id): (DefId, DefId),\n ) -> bool {\n     debug!(\"specializes({:?}, {:?})\", impl1_def_id, impl2_def_id);\n@@ -282,10 +282,10 @@ fn fulfill_implication<'a, 'tcx>(\n }\n \n // Query provider for `specialization_graph_of`.\n-pub(super) fn specialization_graph_provider<'tcx>(\n-    tcx: TyCtxt<'tcx>,\n+pub(super) fn specialization_graph_provider(\n+    tcx: TyCtxt<'_>,\n     trait_id: DefId,\n-) -> &'tcx specialization_graph::Graph {\n+) -> &specialization_graph::Graph {\n     let mut sg = specialization_graph::Graph::new();\n \n     let mut trait_impls = tcx.all_impls(trait_id);"}, {"sha": "07d6f633143a2c29b8b99e76ca0a55ef2cd062e7", "filename": "src/librustc/traits/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc%2Ftraits%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc%2Ftraits%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Futil.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -417,7 +417,7 @@ pub struct SupertraitDefIds<'tcx> {\n     visited: FxHashSet<DefId>,\n }\n \n-pub fn supertrait_def_ids<'tcx>(tcx: TyCtxt<'tcx>, trait_def_id: DefId) -> SupertraitDefIds<'tcx> {\n+pub fn supertrait_def_ids(tcx: TyCtxt<'_>, trait_def_id: DefId) -> SupertraitDefIds<'_> {\n     SupertraitDefIds {\n         tcx,\n         stack: vec![trait_def_id],"}, {"sha": "85153f99b191711eed055fe959d95e2aec3be28d", "filename": "src/librustc/ty/query/on_disk_cache.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc%2Fty%2Fquery%2Fon_disk_cache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc%2Fty%2Fquery%2Fon_disk_cache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fon_disk_cache.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -306,9 +306,9 @@ impl<'sess> OnDiskCache<'sess> {\n     }\n \n     /// Loads a diagnostic emitted during the previous compilation session.\n-    pub fn load_diagnostics<'tcx>(\n+    pub fn load_diagnostics(\n         &self,\n-        tcx: TyCtxt<'tcx>,\n+        tcx: TyCtxt<'_>,\n         dep_node_index: SerializedDepNodeIndex,\n     ) -> Vec<Diagnostic> {\n         let diagnostics: Option<EncodedDiagnostics> = self.load_indexed(\n@@ -335,9 +335,9 @@ impl<'sess> OnDiskCache<'sess> {\n \n     /// Returns the cached query result if there is something in the cache for\n     /// the given `SerializedDepNodeIndex`; otherwise returns `None`.\n-    pub fn try_load_query_result<'tcx, T>(\n+    pub fn try_load_query_result<T>(\n         &self,\n-        tcx: TyCtxt<'tcx>,\n+        tcx: TyCtxt<'_>,\n         dep_node_index: SerializedDepNodeIndex,\n     ) -> Option<T>\n     where"}, {"sha": "0c9e31e1ff28e9c7b8bd87167e13f701dfcd7900", "filename": "src/librustc/ty/query/plumbing.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -1166,7 +1166,7 @@ macro_rules! define_provider_struct {\n /// then `force_from_dep_node()` should not fail for it. Otherwise, you can just\n /// add it to the \"We don't have enough information to reconstruct...\" group in\n /// the match below.\n-pub fn force_from_dep_node<'tcx>(tcx: TyCtxt<'tcx>, dep_node: &DepNode) -> bool {\n+pub fn force_from_dep_node(tcx: TyCtxt<'_>, dep_node: &DepNode) -> bool {\n     use crate::dep_graph::RecoverKey;\n \n     // We must avoid ever having to call force_from_dep_node() for a"}, {"sha": "a098cd1761236f3171d7a1872b5e7013ccf4c566", "filename": "src/librustc_borrowck/borrowck/check_loans.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc_borrowck%2Fborrowck%2Fcheck_loans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc_borrowck%2Fborrowck%2Fcheck_loans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fcheck_loans.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -354,7 +354,7 @@ impl<'a, 'tcx> CheckLoanCtxt<'a, 'tcx> {\n                                          cmt: &mc::cmt_<'tcx>,\n                                          loan_region: ty::Region<'tcx>,\n                                          borrow_span: Span) {\n-        pub fn borrow_of_local_data<'tcx>(cmt: &mc::cmt_<'tcx>) -> bool {\n+        pub fn borrow_of_local_data(cmt: &mc::cmt_<'_>) -> bool {\n             match cmt.cat {\n                 // Borrows of static items is allowed\n                 Categorization::StaticItem => false,"}, {"sha": "8763a6bc066b35f1f4ba0df2b11efdbd9c902b5e", "filename": "src/librustc_borrowck/borrowck/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -53,7 +53,7 @@ pub struct LoanDataFlowOperator;\n \n pub type LoanDataFlow<'tcx> = DataFlowContext<'tcx, LoanDataFlowOperator>;\n \n-pub fn check_crate<'tcx>(tcx: TyCtxt<'tcx>) {\n+pub fn check_crate(tcx: TyCtxt<'_>) {\n     tcx.par_body_owners(|body_owner_def_id| {\n         tcx.ensure().borrowck(body_owner_def_id);\n     });\n@@ -73,7 +73,7 @@ pub struct AnalysisData<'tcx> {\n     pub move_data: move_data::FlowedMoveData<'tcx>,\n }\n \n-fn borrowck<'tcx>(tcx: TyCtxt<'tcx>, owner_def_id: DefId) -> &'tcx BorrowCheckResult {\n+fn borrowck(tcx: TyCtxt<'_>, owner_def_id: DefId) -> &BorrowCheckResult {\n     assert!(tcx.use_ast_borrowck() || tcx.migrate_borrowck());\n \n     debug!(\"borrowck(body_owner_def_id={:?})\", owner_def_id);"}, {"sha": "dc7014d22ec4d3d6b74b43429b52c72ee6caab5d", "filename": "src/librustc_borrowck/dataflow.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc_borrowck%2Fdataflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc_borrowck%2Fdataflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fdataflow.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -84,9 +84,9 @@ struct PropagationContext<'a, 'tcx, O> {\n     changed: bool,\n }\n \n-fn get_cfg_indices<'a>(id: hir::ItemLocalId,\n-                       index: &'a FxHashMap<hir::ItemLocalId, Vec<CFGIndex>>)\n-                       -> &'a [CFGIndex] {\n+fn get_cfg_indices(id: hir::ItemLocalId,\n+                   index: &FxHashMap<hir::ItemLocalId, Vec<CFGIndex>>)\n+                   -> &[CFGIndex] {\n     index.get(&id).map_or(&[], |v| &v[..])\n }\n "}, {"sha": "ca3b2b84655e2939857df0bb775d9e950eb2baef", "filename": "src/librustc_codegen_llvm/back/archive.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc_codegen_llvm%2Fback%2Farchive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc_codegen_llvm%2Fback%2Farchive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fback%2Farchive.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -205,8 +205,8 @@ impl<'a> LlvmArchiveBuilder<'a> {\n     }\n \n     fn build_with_llvm(&mut self, kind: ArchiveKind) -> io::Result<()> {\n-        let removals = mem::replace(&mut self.removals, Vec::new());\n-        let mut additions = mem::replace(&mut self.additions, Vec::new());\n+        let removals = mem::take(&mut self.removals);\n+        let mut additions = mem::take(&mut self.additions);\n         let mut strings = Vec::new();\n         let mut members = Vec::new();\n "}, {"sha": "b135605cf02d765ab38bf780816a838c2cdcc99b", "filename": "src/librustc_codegen_llvm/back/write.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -239,9 +239,9 @@ impl<'a> Drop for DiagnosticHandlers<'a> {\n     }\n }\n \n-unsafe extern \"C\" fn report_inline_asm<'a, 'b>(cgcx: &'a CodegenContext<LlvmCodegenBackend>,\n-                                               msg: &'b str,\n-                                               cookie: c_uint) {\n+unsafe extern \"C\" fn report_inline_asm(cgcx: &CodegenContext<LlvmCodegenBackend>,\n+                                       msg: &str,\n+                                       cookie: c_uint) {\n     cgcx.diag_emitter.inline_asm_error(cookie as u32, msg.to_owned());\n }\n "}, {"sha": "21c19e167cfbe9299570d8fd652adbdc83d626d2", "filename": "src/librustc_codegen_llvm/base.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc_codegen_llvm%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc_codegen_llvm%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fbase.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -123,8 +123,8 @@ pub fn compile_codegen_unit(tcx: TyCtxt<'tcx>, cgu_name: InternedString) {\n \n     submit_codegened_module_to_llvm(&LlvmCodegenBackend(()), tcx, module, cost);\n \n-    fn module_codegen<'tcx>(\n-        tcx: TyCtxt<'tcx>,\n+    fn module_codegen(\n+        tcx: TyCtxt<'_>,\n         cgu_name: InternedString,\n     ) -> ModuleCodegen<ModuleLlvm> {\n         let cgu = tcx.codegen_unit(cgu_name);"}, {"sha": "f67c740b777488423bcce75cc8b3ce715c99967b", "filename": "src/librustc_codegen_llvm/builder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc_codegen_llvm%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc_codegen_llvm%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fbuilder.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -144,7 +144,7 @@ impl BuilderMethods<'a, 'tcx> for Builder<'a, 'll, 'tcx> {\n         }\n     }\n \n-    fn build_sibling_block<'b>(&self, name: &'b str) -> Self {\n+    fn build_sibling_block(&self, name: &str) -> Self {\n         Builder::new_block(self.cx, self.llfn(), name)\n     }\n "}, {"sha": "ca63e589a6f95c079cffe719a9c926f10c1e3460", "filename": "src/librustc_codegen_llvm/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc_codegen_llvm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc_codegen_llvm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Flib.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -21,6 +21,7 @@\n #![feature(link_args)]\n #![feature(static_nobundle)]\n #![feature(trusted_len)]\n+#![feature(mem_take)]\n #![deny(rust_2018_idioms)]\n #![deny(internal)]\n #![deny(unused_lifetimes)]\n@@ -124,7 +125,7 @@ impl ExtraBackendMethods for LlvmCodegenBackend {\n     ) {\n         unsafe { allocator::codegen(tcx, mods, kind) }\n     }\n-    fn compile_codegen_unit<'tcx>(&self, tcx: TyCtxt<'tcx>, cgu_name: InternedString) {\n+    fn compile_codegen_unit(&self, tcx: TyCtxt<'_>, cgu_name: InternedString) {\n         base::compile_codegen_unit(tcx, cgu_name);\n     }\n     fn target_machine_factory("}, {"sha": "d610805b5bbd0e1a8575bd95e0d5a0ac65afc172", "filename": "src/librustc_codegen_ssa/back/command.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc_codegen_ssa%2Fback%2Fcommand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc_codegen_ssa%2Fback%2Fcommand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Fcommand.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -110,7 +110,7 @@ impl Command {\n     }\n \n     pub fn take_args(&mut self) -> Vec<OsString> {\n-        mem::replace(&mut self.args, Vec::new())\n+        mem::take(&mut self.args)\n     }\n \n     /// Returns a `true` if we're pretty sure that this'll blow OS spawn limits,"}, {"sha": "b64c9a60d97138d855bb04cc0b8e80a22c8119a6", "filename": "src/librustc_codegen_ssa/back/symbol_export.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc_codegen_ssa%2Fback%2Fsymbol_export.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc_codegen_ssa%2Fback%2Fsymbol_export.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Fsymbol_export.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -46,10 +46,10 @@ pub fn crates_export_threshold(crate_types: &[config::CrateType]) -> SymbolExpor\n     }\n }\n \n-fn reachable_non_generics_provider<'tcx>(\n-    tcx: TyCtxt<'tcx>,\n+fn reachable_non_generics_provider(\n+    tcx: TyCtxt<'_>,\n     cnum: CrateNum,\n-) -> &'tcx DefIdMap<SymbolExportLevel> {\n+) -> &DefIdMap<SymbolExportLevel> {\n     assert_eq!(cnum, LOCAL_CRATE);\n \n     if !tcx.sess.opts.output_types.should_codegen() {\n@@ -157,7 +157,7 @@ fn reachable_non_generics_provider<'tcx>(\n     tcx.arena.alloc(reachable_non_generics)\n }\n \n-fn is_reachable_non_generic_provider_local<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> bool {\n+fn is_reachable_non_generic_provider_local(tcx: TyCtxt<'_>, def_id: DefId) -> bool {\n     let export_threshold = threshold(tcx);\n \n     if let Some(&level) = tcx.reachable_non_generics(def_id.krate).get(&def_id) {\n@@ -167,14 +167,14 @@ fn is_reachable_non_generic_provider_local<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefI\n     }\n }\n \n-fn is_reachable_non_generic_provider_extern<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> bool {\n+fn is_reachable_non_generic_provider_extern(tcx: TyCtxt<'_>, def_id: DefId) -> bool {\n     tcx.reachable_non_generics(def_id.krate).contains_key(&def_id)\n }\n \n-fn exported_symbols_provider_local<'tcx>(\n-    tcx: TyCtxt<'tcx>,\n+fn exported_symbols_provider_local(\n+    tcx: TyCtxt<'_>,\n     cnum: CrateNum,\n-) -> Arc<Vec<(ExportedSymbol<'tcx>, SymbolExportLevel)>> {\n+) -> Arc<Vec<(ExportedSymbol<'_>, SymbolExportLevel)>> {\n     assert_eq!(cnum, LOCAL_CRATE);\n \n     if !tcx.sess.opts.output_types.should_codegen() {\n@@ -273,10 +273,10 @@ fn exported_symbols_provider_local<'tcx>(\n     Arc::new(symbols)\n }\n \n-fn upstream_monomorphizations_provider<'tcx>(\n-    tcx: TyCtxt<'tcx>,\n+fn upstream_monomorphizations_provider(\n+    tcx: TyCtxt<'_>,\n     cnum: CrateNum,\n-) -> &'tcx DefIdMap<FxHashMap<SubstsRef<'tcx>, CrateNum>> {\n+) -> &DefIdMap<FxHashMap<SubstsRef<'_>, CrateNum>> {\n     debug_assert!(cnum == LOCAL_CRATE);\n \n     let cnums = tcx.all_crate_nums(LOCAL_CRATE);\n@@ -322,10 +322,10 @@ fn upstream_monomorphizations_provider<'tcx>(\n     tcx.arena.alloc(instances)\n }\n \n-fn upstream_monomorphizations_for_provider<'tcx>(\n-    tcx: TyCtxt<'tcx>,\n+fn upstream_monomorphizations_for_provider(\n+    tcx: TyCtxt<'_>,\n     def_id: DefId,\n-) -> Option<&'tcx FxHashMap<SubstsRef<'tcx>, CrateNum>> {\n+) -> Option<&FxHashMap<SubstsRef<'_>, CrateNum>> {\n     debug_assert!(!def_id.is_local());\n     tcx.upstream_monomorphizations(LOCAL_CRATE).get(&def_id)\n }"}, {"sha": "fbf57701c5a950f75472f6032a7bbff82064151a", "filename": "src/librustc_codegen_ssa/back/write.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -1345,12 +1345,9 @@ fn start_executing_work<B: ExtraBackendMethods>(\n                     assert!(!started_lto);\n                     started_lto = true;\n \n-                    let needs_fat_lto =\n-                        mem::replace(&mut needs_fat_lto, Vec::new());\n-                    let needs_thin_lto =\n-                        mem::replace(&mut needs_thin_lto, Vec::new());\n-                    let import_only_modules =\n-                        mem::replace(&mut lto_import_only_modules, Vec::new());\n+                    let needs_fat_lto = mem::take(&mut needs_fat_lto);\n+                    let needs_thin_lto = mem::take(&mut needs_thin_lto);\n+                    let import_only_modules = mem::take(&mut lto_import_only_modules);\n \n                     for (work, cost) in generate_lto_work(&cgcx, needs_fat_lto,\n                                                           needs_thin_lto, import_only_modules) {"}, {"sha": "d06460fc856962bd27d5901c31d89eea643349c4", "filename": "src/librustc_codegen_ssa/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc_codegen_ssa%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc_codegen_ssa%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fbase.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -700,7 +700,7 @@ impl<B: ExtraBackendMethods> Drop for AbortCodegenOnDrop<B> {\n     }\n }\n \n-fn assert_and_save_dep_graph<'tcx>(tcx: TyCtxt<'tcx>) {\n+fn assert_and_save_dep_graph(tcx: TyCtxt<'_>) {\n     time(tcx.sess,\n          \"assert dep graph\",\n          || ::rustc_incremental::assert_dep_graph(tcx));"}, {"sha": "c9b1c0260e8c36e54b2821e3ac95e1de6b2854d9", "filename": "src/librustc_codegen_ssa/debuginfo/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc_codegen_ssa%2Fdebuginfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc_codegen_ssa%2Fdebuginfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fdebuginfo%2Fmod.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -10,7 +10,7 @@ pub enum FunctionDebugContext<D> {\n }\n \n impl<D> FunctionDebugContext<D> {\n-    pub fn get_ref<'a>(&'a self, span: Span) -> &'a FunctionDebugContextData<D> {\n+    pub fn get_ref(&self, span: Span) -> &FunctionDebugContextData<D> {\n         match *self {\n             FunctionDebugContext::RegularContext(ref data) => data,\n             FunctionDebugContext::DebugInfoDisabled => {"}, {"sha": "3c1ab600040a112c548e0558c59395116836fc9a", "filename": "src/librustc_codegen_ssa/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc_codegen_ssa%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc_codegen_ssa%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Flib.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -10,6 +10,7 @@\n #![feature(in_band_lifetimes)]\n #![feature(nll)]\n #![feature(trusted_len)]\n+#![feature(mem_take)]\n #![allow(unused_attributes)]\n #![allow(dead_code)]\n #![deny(rust_2018_idioms)]"}, {"sha": "2af9b448ef1eb03cc57c6733477f1b45a608750b", "filename": "src/librustc_codegen_ssa/mir/analyze.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc_codegen_ssa%2Fmir%2Fanalyze.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc_codegen_ssa%2Fmir%2Fanalyze.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fanalyze.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -273,7 +273,7 @@ impl CleanupKind {\n     }\n }\n \n-pub fn cleanup_kinds<'tcx>(mir: &mir::Body<'tcx>) -> IndexVec<mir::BasicBlock, CleanupKind> {\n+pub fn cleanup_kinds(mir: &mir::Body<'_>) -> IndexVec<mir::BasicBlock, CleanupKind> {\n     fn discover_masters<'tcx>(result: &mut IndexVec<mir::BasicBlock, CleanupKind>,\n                               mir: &mir::Body<'tcx>) {\n         for (bb, data) in mir.basic_blocks().iter_enumerated() {"}, {"sha": "9d5aaa7655db88161ee2994755cfa1d071419b4b", "filename": "src/librustc_codegen_ssa/traits/backend.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc_codegen_ssa%2Ftraits%2Fbackend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc_codegen_ssa%2Ftraits%2Fbackend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Ftraits%2Fbackend.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -44,7 +44,7 @@ pub trait ExtraBackendMethods: CodegenBackend + WriteBackendMethods + Sized + Se\n         mods: &mut Self::Module,\n         kind: AllocatorKind,\n     );\n-    fn compile_codegen_unit<'tcx>(&self, tcx: TyCtxt<'tcx>, cgu_name: InternedString);\n+    fn compile_codegen_unit(&self, tcx: TyCtxt<'_>, cgu_name: InternedString);\n     // If find_features is true this won't access `sess.crate_types` by assuming\n     // that `is_pie_binary` is false. When we discover LLVM target features\n     // `sess.crate_types` is uninitialized so we cannot access it."}, {"sha": "3a144f0b0e0aa0a879bb5b69188abc4700bdc0fb", "filename": "src/librustc_codegen_ssa/traits/builder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc_codegen_ssa%2Ftraits%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc_codegen_ssa%2Ftraits%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Ftraits%2Fbuilder.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -36,7 +36,7 @@ pub trait BuilderMethods<'a, 'tcx>:\n {\n     fn new_block<'b>(cx: &'a Self::CodegenCx, llfn: Self::Value, name: &'b str) -> Self;\n     fn with_cx(cx: &'a Self::CodegenCx) -> Self;\n-    fn build_sibling_block<'b>(&self, name: &'b str) -> Self;\n+    fn build_sibling_block(&self, name: &str) -> Self;\n     fn cx(&self) -> &Self::CodegenCx;\n     fn llbb(&self) -> Self::BasicBlock;\n "}, {"sha": "7ab29c5c4c3d024bc759a8bbc438adf49ae8bed3", "filename": "src/librustc_codegen_utils/symbol_names_test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc_codegen_utils%2Fsymbol_names_test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc_codegen_utils%2Fsymbol_names_test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_utils%2Fsymbol_names_test.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -11,7 +11,7 @@ use syntax::symbol::{Symbol, sym};\n const SYMBOL_NAME: Symbol = sym::rustc_symbol_name;\n const DEF_PATH: Symbol = sym::rustc_def_path;\n \n-pub fn report_symbol_names<'tcx>(tcx: TyCtxt<'tcx>) {\n+pub fn report_symbol_names(tcx: TyCtxt<'_>) {\n     // if the `rustc_attrs` feature is not enabled, then the\n     // attributes we are interested in cannot be present anyway, so\n     // skip the walk."}, {"sha": "1eb28bccbe382cd4663e853d3aaf62b959849da2", "filename": "src/librustc_data_structures/bit_set.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc_data_structures%2Fbit_set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc_data_structures%2Fbit_set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fbit_set.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -168,7 +168,7 @@ impl<T: Idx> BitSet<T> {\n \n     /// Iterates over the indices of set bits in a sorted order.\n     #[inline]\n-    pub fn iter<'a>(&'a self) -> BitIter<'a, T> {\n+    pub fn iter(&self) -> BitIter<'_, T> {\n         BitIter {\n             cur: None,\n             iter: self.words.iter().enumerate(),\n@@ -849,7 +849,7 @@ impl<R: Idx, C: Idx> BitMatrix<R, C> {\n \n     /// Iterates through all the columns set to true in a given row of\n     /// the matrix.\n-    pub fn iter<'a>(&'a self, row: R) -> BitIter<'a, C> {\n+    pub fn iter(&self, row: R) -> BitIter<'_, C> {\n         assert!(row.index() < self.num_rows);\n         let (start, end) = self.range(row);\n         BitIter {"}, {"sha": "3bea965ef30411ce3dff6852b0101033a837434b", "filename": "src/librustc_data_structures/fingerprint.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc_data_structures%2Ffingerprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc_data_structures%2Ffingerprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Ffingerprint.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -58,7 +58,7 @@ impl Fingerprint {\n         Ok(())\n     }\n \n-    pub fn decode_opaque<'a>(decoder: &mut Decoder<'a>) -> Result<Fingerprint, String> {\n+    pub fn decode_opaque(decoder: &mut Decoder<'_>) -> Result<Fingerprint, String> {\n         let mut bytes = [0; 16];\n \n         decoder.read_raw_bytes(&mut bytes)?;"}, {"sha": "d2699004c81d8f9952d9ebd65952142d2ee39d73", "filename": "src/librustc_data_structures/graph/implementation/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc_data_structures%2Fgraph%2Fimplementation%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc_data_structures%2Fgraph%2Fimplementation%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fgraph%2Fimplementation%2Fmod.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -247,11 +247,11 @@ impl<N: Debug, E: Debug> Graph<N, E> {\n         self.incoming_edges(target).sources()\n     }\n \n-    pub fn depth_traverse<'a>(\n-        &'a self,\n+    pub fn depth_traverse(\n+        &self,\n         start: NodeIndex,\n         direction: Direction,\n-    ) -> DepthFirstTraversal<'a, N, E> {\n+    ) -> DepthFirstTraversal<'_, N, E> {\n         DepthFirstTraversal::with_start_node(self, start, direction)\n     }\n "}, {"sha": "e59085a9e3a95e3ea8fd8a7eb2cbe830e410aed7", "filename": "src/librustc_data_structures/graph/mod.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc_data_structures%2Fgraph%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc_data_structures%2Fgraph%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fgraph%2Fmod.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -26,10 +26,10 @@ pub trait WithSuccessors: DirectedGraph\n where\n     Self: for<'graph> GraphSuccessors<'graph, Item = <Self as DirectedGraph>::Node>,\n {\n-    fn successors<'graph>(\n-        &'graph self,\n+    fn successors(\n+        &self,\n         node: Self::Node,\n-    ) -> <Self as GraphSuccessors<'graph>>::Iter;\n+    ) -> <Self as GraphSuccessors<'_>>::Iter;\n \n     fn depth_first_search(&self, from: Self::Node) -> iterate::DepthFirstSearch<'_, Self>\n     where\n@@ -48,10 +48,10 @@ pub trait WithPredecessors: DirectedGraph\n where\n     Self: for<'graph> GraphPredecessors<'graph, Item = <Self as DirectedGraph>::Node>,\n {\n-    fn predecessors<'graph>(\n-        &'graph self,\n+    fn predecessors(\n+        &self,\n         node: Self::Node,\n-    ) -> <Self as GraphPredecessors<'graph>>::Iter;\n+    ) -> <Self as GraphPredecessors<'_>>::Iter;\n }\n \n pub trait GraphPredecessors<'graph> {"}, {"sha": "9442bb3cdec3b8a11cf73122535d98c569a7f011", "filename": "src/librustc_data_structures/graph/reference.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc_data_structures%2Fgraph%2Freference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc_data_structures%2Fgraph%2Freference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fgraph%2Freference.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -17,15 +17,15 @@ impl<'graph, G: WithStartNode> WithStartNode for &'graph G {\n }\n \n impl<'graph, G: WithSuccessors> WithSuccessors for &'graph G {\n-    fn successors<'iter>(&'iter self, node: Self::Node) -> <Self as GraphSuccessors<'iter>>::Iter {\n+    fn successors(&self, node: Self::Node) -> <Self as GraphSuccessors<'_>>::Iter {\n         (**self).successors(node)\n     }\n }\n \n impl<'graph, G: WithPredecessors> WithPredecessors for &'graph G {\n-    fn predecessors<'iter>(&'iter self,\n-                           node: Self::Node)\n-                           -> <Self as GraphPredecessors<'iter>>::Iter {\n+    fn predecessors(&self,\n+                    node: Self::Node)\n+                    -> <Self as GraphPredecessors<'_>>::Iter {\n         (**self).predecessors(node)\n     }\n }"}, {"sha": "bc142144e930f24e8790df0d40e4b13dc1c8fff3", "filename": "src/librustc_data_structures/graph/test.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc_data_structures%2Fgraph%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc_data_structures%2Fgraph%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fgraph%2Ftest.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -51,15 +51,15 @@ impl WithNumNodes for TestGraph {\n }\n \n impl WithPredecessors for TestGraph {\n-    fn predecessors<'graph>(&'graph self,\n-                            node: usize)\n-                            -> <Self as GraphPredecessors<'graph>>::Iter {\n+    fn predecessors(&self,\n+                    node: usize)\n+                    -> <Self as GraphPredecessors<'_>>::Iter {\n         self.predecessors[&node].iter().cloned()\n     }\n }\n \n impl WithSuccessors for TestGraph {\n-    fn successors<'graph>(&'graph self, node: usize) -> <Self as GraphSuccessors<'graph>>::Iter {\n+    fn successors(&self, node: usize) -> <Self as GraphSuccessors<'_>>::Iter {\n         self.successors[&node].iter().cloned()\n     }\n }"}, {"sha": "ff0c4ff548b71eab6b23b93546bbe6eaedb0d1bb", "filename": "src/librustc_driver/pretty.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc_driver%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc_driver%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fpretty.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -188,7 +188,7 @@ impl PpSourceMode {\n             _ => panic!(\"Should use call_with_pp_support_hir\"),\n         }\n     }\n-    fn call_with_pp_support_hir<'tcx, A, F>(&self, tcx: TyCtxt<'tcx>, f: F) -> A\n+    fn call_with_pp_support_hir<A, F>(&self, tcx: TyCtxt<'_>, f: F) -> A\n     where\n         F: FnOnce(&dyn HirPrinterSupport<'_>, &hir::Crate) -> A,\n     {\n@@ -228,7 +228,7 @@ impl PpSourceMode {\n trait PrinterSupport: pprust::PpAnn {\n     /// Provides a uniform interface for re-extracting a reference to a\n     /// `Session` from a value that now owns it.\n-    fn sess<'a>(&'a self) -> &'a Session;\n+    fn sess(&self) -> &Session;\n \n     /// Produces the pretty-print annotation object.\n     ///\n@@ -240,7 +240,7 @@ trait PrinterSupport: pprust::PpAnn {\n trait HirPrinterSupport<'hir>: pprust_hir::PpAnn {\n     /// Provides a uniform interface for re-extracting a reference to a\n     /// `Session` from a value that now owns it.\n-    fn sess<'a>(&'a self) -> &'a Session;\n+    fn sess(&self) -> &Session;\n \n     /// Provides a uniform interface for re-extracting a reference to an\n     /// `hir_map::Map` from a value that now owns it.\n@@ -272,7 +272,7 @@ struct NoAnn<'hir> {\n }\n \n impl<'hir> PrinterSupport for NoAnn<'hir> {\n-    fn sess<'a>(&'a self) -> &'a Session {\n+    fn sess(&self) -> &Session {\n         self.sess\n     }\n \n@@ -282,7 +282,7 @@ impl<'hir> PrinterSupport for NoAnn<'hir> {\n }\n \n impl<'hir> HirPrinterSupport<'hir> for NoAnn<'hir> {\n-    fn sess<'a>(&'a self) -> &'a Session {\n+    fn sess(&self) -> &Session {\n         self.sess\n     }\n \n@@ -313,7 +313,7 @@ struct IdentifiedAnnotation<'hir> {\n }\n \n impl<'hir> PrinterSupport for IdentifiedAnnotation<'hir> {\n-    fn sess<'a>(&'a self) -> &'a Session {\n+    fn sess(&self) -> &Session {\n         self.sess\n     }\n \n@@ -360,7 +360,7 @@ impl<'hir> pprust::PpAnn for IdentifiedAnnotation<'hir> {\n }\n \n impl<'hir> HirPrinterSupport<'hir> for IdentifiedAnnotation<'hir> {\n-    fn sess<'a>(&'a self) -> &'a Session {\n+    fn sess(&self) -> &Session {\n         self.sess\n     }\n \n@@ -458,7 +458,7 @@ struct TypedAnnotation<'a, 'tcx> {\n }\n \n impl<'b, 'tcx> HirPrinterSupport<'tcx> for TypedAnnotation<'b, 'tcx> {\n-    fn sess<'a>(&'a self) -> &'a Session {\n+    fn sess(&self) -> &Session {\n         &self.tcx.sess\n     }\n \n@@ -866,8 +866,8 @@ pub fn print_after_hir_lowering<'tcx>(\n // analysis is performed. However, we want to call `phase_3_run_analysis_passes`\n // with a different callback than the standard driver, so that isn't easy.\n // Instead, we call that function ourselves.\n-fn print_with_analysis<'tcx>(\n-    tcx: TyCtxt<'tcx>,\n+fn print_with_analysis(\n+    tcx: TyCtxt<'_>,\n     ppm: PpMode,\n     uii: Option<UserIdentifiedItem>,\n     ofile: Option<&Path>,"}, {"sha": "83a0fb486fd9a34c728910a571f74c00b5ea790d", "filename": "src/librustc_errors/emitter.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc_errors%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc_errors%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Femitter.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -1635,7 +1635,7 @@ impl Destination {\n         }\n     }\n \n-    fn writable<'a>(&'a mut self) -> WritableDst<'a> {\n+    fn writable(&mut self) -> WritableDst<'_> {\n         match *self {\n             Destination::Terminal(ref mut t) => WritableDst::Terminal(t),\n             Destination::Buffered(ref mut t) => {"}, {"sha": "1ffee1cdf691f0be08c3fa835c2049a8eebc9696", "filename": "src/librustc_errors/lib.rs", "status": "modified", "additions": 42, "deletions": 42, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc_errors%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc_errors%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Flib.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -438,26 +438,26 @@ impl Handler {\n         self.err_count.store(0, SeqCst);\n     }\n \n-    pub fn struct_dummy<'a>(&'a self) -> DiagnosticBuilder<'a> {\n+    pub fn struct_dummy(&self) -> DiagnosticBuilder<'_> {\n         DiagnosticBuilder::new(self, Level::Cancelled, \"\")\n     }\n \n-    pub fn struct_span_warn<'a, S: Into<MultiSpan>>(&'a self,\n-                                                    sp: S,\n-                                                    msg: &str)\n-                                                    -> DiagnosticBuilder<'a> {\n+    pub fn struct_span_warn<S: Into<MultiSpan>>(&self,\n+                                                sp: S,\n+                                                msg: &str)\n+                                                -> DiagnosticBuilder<'_> {\n         let mut result = DiagnosticBuilder::new(self, Level::Warning, msg);\n         result.set_span(sp);\n         if !self.flags.can_emit_warnings {\n             result.cancel();\n         }\n         result\n     }\n-    pub fn struct_span_warn_with_code<'a, S: Into<MultiSpan>>(&'a self,\n-                                                              sp: S,\n-                                                              msg: &str,\n-                                                              code: DiagnosticId)\n-                                                              -> DiagnosticBuilder<'a> {\n+    pub fn struct_span_warn_with_code<S: Into<MultiSpan>>(&self,\n+                                                          sp: S,\n+                                                          msg: &str,\n+                                                          code: DiagnosticId)\n+                                                          -> DiagnosticBuilder<'_> {\n         let mut result = DiagnosticBuilder::new(self, Level::Warning, msg);\n         result.set_span(sp);\n         result.code(code);\n@@ -466,63 +466,63 @@ impl Handler {\n         }\n         result\n     }\n-    pub fn struct_warn<'a>(&'a self, msg: &str) -> DiagnosticBuilder<'a> {\n+    pub fn struct_warn(&self, msg: &str) -> DiagnosticBuilder<'_> {\n         let mut result = DiagnosticBuilder::new(self, Level::Warning, msg);\n         if !self.flags.can_emit_warnings {\n             result.cancel();\n         }\n         result\n     }\n-    pub fn struct_span_err<'a, S: Into<MultiSpan>>(&'a self,\n-                                                   sp: S,\n-                                                   msg: &str)\n-                                                   -> DiagnosticBuilder<'a> {\n+    pub fn struct_span_err<S: Into<MultiSpan>>(&self,\n+                                               sp: S,\n+                                               msg: &str)\n+                                               -> DiagnosticBuilder<'_> {\n         let mut result = DiagnosticBuilder::new(self, Level::Error, msg);\n         result.set_span(sp);\n         result\n     }\n-    pub fn struct_span_err_with_code<'a, S: Into<MultiSpan>>(&'a self,\n-                                                             sp: S,\n-                                                             msg: &str,\n-                                                             code: DiagnosticId)\n-                                                             -> DiagnosticBuilder<'a> {\n+    pub fn struct_span_err_with_code<S: Into<MultiSpan>>(&self,\n+                                                         sp: S,\n+                                                         msg: &str,\n+                                                         code: DiagnosticId)\n+                                                         -> DiagnosticBuilder<'_> {\n         let mut result = DiagnosticBuilder::new(self, Level::Error, msg);\n         result.set_span(sp);\n         result.code(code);\n         result\n     }\n     // FIXME: This method should be removed (every error should have an associated error code).\n-    pub fn struct_err<'a>(&'a self, msg: &str) -> DiagnosticBuilder<'a> {\n+    pub fn struct_err(&self, msg: &str) -> DiagnosticBuilder<'_> {\n         DiagnosticBuilder::new(self, Level::Error, msg)\n     }\n-    pub fn struct_err_with_code<'a>(\n-        &'a self,\n+    pub fn struct_err_with_code(\n+        &self,\n         msg: &str,\n         code: DiagnosticId,\n-    ) -> DiagnosticBuilder<'a> {\n+    ) -> DiagnosticBuilder<'_> {\n         let mut result = DiagnosticBuilder::new(self, Level::Error, msg);\n         result.code(code);\n         result\n     }\n-    pub fn struct_span_fatal<'a, S: Into<MultiSpan>>(&'a self,\n-                                                     sp: S,\n-                                                     msg: &str)\n-                                                     -> DiagnosticBuilder<'a> {\n+    pub fn struct_span_fatal<S: Into<MultiSpan>>(&self,\n+                                                 sp: S,\n+                                                 msg: &str)\n+                                                 -> DiagnosticBuilder<'_> {\n         let mut result = DiagnosticBuilder::new(self, Level::Fatal, msg);\n         result.set_span(sp);\n         result\n     }\n-    pub fn struct_span_fatal_with_code<'a, S: Into<MultiSpan>>(&'a self,\n-                                                               sp: S,\n-                                                               msg: &str,\n-                                                               code: DiagnosticId)\n-                                                               -> DiagnosticBuilder<'a> {\n+    pub fn struct_span_fatal_with_code<S: Into<MultiSpan>>(&self,\n+                                                           sp: S,\n+                                                           msg: &str,\n+                                                           code: DiagnosticId)\n+                                                           -> DiagnosticBuilder<'_> {\n         let mut result = DiagnosticBuilder::new(self, Level::Fatal, msg);\n         result.set_span(sp);\n         result.code(code);\n         result\n     }\n-    pub fn struct_fatal<'a>(&'a self, msg: &str) -> DiagnosticBuilder<'a> {\n+    pub fn struct_fatal(&self, msg: &str) -> DiagnosticBuilder<'_> {\n         DiagnosticBuilder::new(self, Level::Fatal, msg)\n     }\n \n@@ -563,10 +563,10 @@ impl Handler {\n     pub fn span_err<S: Into<MultiSpan>>(&self, sp: S, msg: &str) {\n         self.emit(&sp.into(), msg, Error);\n     }\n-    pub fn mut_span_err<'a, S: Into<MultiSpan>>(&'a self,\n-                                                sp: S,\n-                                                msg: &str)\n-                                                -> DiagnosticBuilder<'a> {\n+    pub fn mut_span_err<S: Into<MultiSpan>>(&self,\n+                                            sp: S,\n+                                            msg: &str)\n+                                            -> DiagnosticBuilder<'_> {\n         let mut result = DiagnosticBuilder::new(self, Level::Error, msg);\n         result.set_span(sp);\n         result\n@@ -605,10 +605,10 @@ impl Handler {\n     pub fn span_note_without_error<S: Into<MultiSpan>>(&self, sp: S, msg: &str) {\n         self.emit(&sp.into(), msg, Note);\n     }\n-    pub fn span_note_diag<'a>(&'a self,\n-                              sp: Span,\n-                              msg: &str)\n-                              -> DiagnosticBuilder<'a> {\n+    pub fn span_note_diag(&self,\n+                          sp: Span,\n+                          msg: &str)\n+                          -> DiagnosticBuilder<'_> {\n         let mut db = DiagnosticBuilder::new(self, Note, msg);\n         db.set_span(sp);\n         db"}, {"sha": "38dc6edaf6325e8225514cfa1e19cffca77e6217", "filename": "src/librustc_incremental/assert_dep_graph.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc_incremental%2Fassert_dep_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc_incremental%2Fassert_dep_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fassert_dep_graph.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -51,7 +51,7 @@ use std::io::Write;\n use syntax::ast;\n use syntax_pos::Span;\n \n-pub fn assert_dep_graph<'tcx>(tcx: TyCtxt<'tcx>) {\n+pub fn assert_dep_graph(tcx: TyCtxt<'_>) {\n     tcx.dep_graph.with_ignore(|| {\n         if tcx.sess.opts.debugging_opts.dump_dep_graph {\n             dump_graph(tcx);"}, {"sha": "046fdc72270dbb5cb48568b760189846c602e169", "filename": "src/librustc_incremental/assert_module_sources.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc_incremental%2Fassert_module_sources.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc_incremental%2Fassert_module_sources.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fassert_module_sources.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -35,7 +35,7 @@ const MODULE: Symbol = sym::module;\n const CFG: Symbol = sym::cfg;\n const KIND: Symbol = sym::kind;\n \n-pub fn assert_module_sources<'tcx>(tcx: TyCtxt<'tcx>) {\n+pub fn assert_module_sources(tcx: TyCtxt<'_>) {\n     tcx.dep_graph.with_ignore(|| {\n         if tcx.sess.opts.incremental.is_none() {\n             return;"}, {"sha": "1d83aa112a8371f7cad7279431d3afac39173bb3", "filename": "src/librustc_incremental/persist/dirty_clean.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc_incremental%2Fpersist%2Fdirty_clean.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc_incremental%2Fpersist%2Fdirty_clean.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fpersist%2Fdirty_clean.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -206,7 +206,7 @@ impl Assertion {\n     }\n }\n \n-pub fn check_dirty_clean_annotations<'tcx>(tcx: TyCtxt<'tcx>) {\n+pub fn check_dirty_clean_annotations(tcx: TyCtxt<'_>) {\n     // can't add `#[rustc_dirty]` etc without opting in to this feature\n     if !tcx.features().rustc_attrs {\n         return;"}, {"sha": "90aefb0f32416f8bf56358ba695fb78df55ddb41", "filename": "src/librustc_incremental/persist/load.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc_incremental%2Fpersist%2Fload.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc_incremental%2Fpersist%2Fload.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fpersist%2Fload.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -15,7 +15,7 @@ use super::fs::*;\n use super::file_format;\n use super::work_product;\n \n-pub fn dep_graph_tcx_init<'tcx>(tcx: TyCtxt<'tcx>) {\n+pub fn dep_graph_tcx_init(tcx: TyCtxt<'_>) {\n     if !tcx.dep_graph.is_fully_enabled() {\n         return\n     }\n@@ -192,7 +192,7 @@ pub fn load_dep_graph(sess: &Session) -> DepGraphFuture {\n     }))\n }\n \n-pub fn load_query_result_cache<'sess>(sess: &'sess Session) -> OnDiskCache<'sess> {\n+pub fn load_query_result_cache(sess: &Session) -> OnDiskCache<'_> {\n     if sess.opts.incremental.is_none() ||\n        !sess.opts.debugging_opts.incremental_queries {\n         return OnDiskCache::new_empty(sess.source_map());"}, {"sha": "13e2c5d1c574d6aaccf819798681b8ed19638f89", "filename": "src/librustc_incremental/persist/save.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc_incremental%2Fpersist%2Fsave.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc_incremental%2Fpersist%2Fsave.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fpersist%2Fsave.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -15,7 +15,7 @@ use super::dirty_clean;\n use super::file_format;\n use super::work_product;\n \n-pub fn save_dep_graph<'tcx>(tcx: TyCtxt<'tcx>) {\n+pub fn save_dep_graph(tcx: TyCtxt<'_>) {\n     debug!(\"save_dep_graph()\");\n     tcx.dep_graph.with_ignore(|| {\n         let sess = tcx.sess;"}, {"sha": "d698728198130033bd1028f6ba4bb514a7612269", "filename": "src/librustc_interface/passes.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc_interface%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc_interface%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Fpasses.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -878,7 +878,7 @@ pub fn create_global_ctxt(\n \n /// Runs the resolution, type-checking, region checking and other\n /// miscellaneous analysis passes on the crate.\n-fn analysis<'tcx>(tcx: TyCtxt<'tcx>, cnum: CrateNum) -> Result<()> {\n+fn analysis(tcx: TyCtxt<'_>, cnum: CrateNum) -> Result<()> {\n     assert_eq!(cnum, LOCAL_CRATE);\n \n     let sess = tcx.sess;\n@@ -995,8 +995,8 @@ fn analysis<'tcx>(tcx: TyCtxt<'tcx>, cnum: CrateNum) -> Result<()> {\n     Ok(())\n }\n \n-fn encode_and_write_metadata<'tcx>(\n-    tcx: TyCtxt<'tcx>,\n+fn encode_and_write_metadata(\n+    tcx: TyCtxt<'_>,\n     outputs: &OutputFilenames,\n ) -> (middle::cstore::EncodedMetadata, bool) {\n     #[derive(PartialEq, Eq, PartialOrd, Ord)]"}, {"sha": "d888c9e57d326e03852fcca0f8929c2ce47c848c", "filename": "src/librustc_interface/proc_macro_decls.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc_interface%2Fproc_macro_decls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc_interface%2Fproc_macro_decls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Fproc_macro_decls.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -6,11 +6,11 @@ use rustc::ty::query::Providers;\n use syntax::attr;\n use syntax::symbol::sym;\n \n-pub fn find<'tcx>(tcx: TyCtxt<'tcx>) -> Option<DefId> {\n+pub fn find(tcx: TyCtxt<'_>) -> Option<DefId> {\n     tcx.proc_macro_decls_static(LOCAL_CRATE)\n }\n \n-fn proc_macro_decls_static<'tcx>(tcx: TyCtxt<'tcx>, cnum: CrateNum) -> Option<DefId> {\n+fn proc_macro_decls_static(tcx: TyCtxt<'_>, cnum: CrateNum) -> Option<DefId> {\n     assert_eq!(cnum, LOCAL_CRATE);\n \n     let mut finder = Finder { decls: None };"}, {"sha": "4c6ceb14ca42a8fa0ec4b25a14788c68e584ddd9", "filename": "src/librustc_lint/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc_lint%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc_lint%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flib.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -74,7 +74,7 @@ pub fn provide(providers: &mut Providers<'_>) {\n     };\n }\n \n-fn lint_mod<'tcx>(tcx: TyCtxt<'tcx>, module_def_id: DefId) {\n+fn lint_mod(tcx: TyCtxt<'_>, module_def_id: DefId) {\n     lint::late_lint_mod(tcx, module_def_id, BuiltinCombinedModuleLateLintPass::new());\n }\n "}, {"sha": "914084d7e9ece4f489ef6dc9ee62a71c8a201b4e", "filename": "src/librustc_metadata/cstore_impl.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc_metadata%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc_metadata%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore_impl.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -250,7 +250,7 @@ provide! { <'tcx> tcx, def_id, other, cdata,\n     exported_symbols => { Arc::new(cdata.exported_symbols(tcx)) }\n }\n \n-pub fn provide<'tcx>(providers: &mut Providers<'tcx>) {\n+pub fn provide(providers: &mut Providers<'_>) {\n     // FIXME(#44234) - almost all of these queries have no sub-queries and\n     // therefore no actual inputs, they're just reading tables calculated in\n     // resolve! Does this work? Unsure! That's what the issue is about\n@@ -550,7 +550,7 @@ impl CrateStore for cstore::CStore {\n         self.do_postorder_cnums_untracked()\n     }\n \n-    fn encode_metadata<'tcx>(&self, tcx: TyCtxt<'tcx>) -> EncodedMetadata {\n+    fn encode_metadata(&self, tcx: TyCtxt<'_>) -> EncodedMetadata {\n         encoder::encode_metadata(tcx)\n     }\n "}, {"sha": "73c20ccad5abff6cbf9fcd98fd2c957c2e3d033f", "filename": "src/librustc_metadata/encoder.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc_metadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc_metadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fencoder.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -1863,7 +1863,7 @@ impl<'tcx, 'v> ItemLikeVisitor<'v> for ImplVisitor<'tcx> {\n // will allow us to slice the metadata to the precise length that we just\n // generated regardless of trailing bytes that end up in it.\n \n-pub fn encode_metadata<'tcx>(tcx: TyCtxt<'tcx>) -> EncodedMetadata {\n+pub fn encode_metadata(tcx: TyCtxt<'_>) -> EncodedMetadata {\n     let mut encoder = opaque::Encoder::new(vec![]);\n     encoder.emit_raw_bytes(METADATA_HEADER);\n \n@@ -1905,7 +1905,7 @@ pub fn encode_metadata<'tcx>(tcx: TyCtxt<'tcx>) -> EncodedMetadata {\n     EncodedMetadata { raw_data: result }\n }\n \n-pub fn get_repr_options<'tcx>(tcx: TyCtxt<'tcx>, did: DefId) -> ReprOptions {\n+pub fn get_repr_options(tcx: TyCtxt<'_>, did: DefId) -> ReprOptions {\n     let ty = tcx.type_of(did);\n     match ty.sty {\n         ty::Adt(ref def, _) => return def.repr,"}, {"sha": "b1f4dfffc7898db33a3dc1450c476610bbd93c59", "filename": "src/librustc_metadata/foreign_modules.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc_metadata%2Fforeign_modules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc_metadata%2Fforeign_modules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fforeign_modules.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -3,7 +3,7 @@ use rustc::hir;\n use rustc::middle::cstore::ForeignModule;\n use rustc::ty::TyCtxt;\n \n-pub fn collect<'tcx>(tcx: TyCtxt<'tcx>) -> Vec<ForeignModule> {\n+pub fn collect(tcx: TyCtxt<'_>) -> Vec<ForeignModule> {\n     let mut collector = Collector {\n         tcx,\n         modules: Vec::new(),"}, {"sha": "728fd004fcb693a2ce8b71b88b6746a9bcb65212", "filename": "src/librustc_metadata/link_args.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc_metadata%2Flink_args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc_metadata%2Flink_args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Flink_args.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -4,7 +4,7 @@ use rustc::ty::TyCtxt;\n use rustc_target::spec::abi::Abi;\n use syntax::symbol::sym;\n \n-pub fn collect<'tcx>(tcx: TyCtxt<'tcx>) -> Vec<String> {\n+pub fn collect(tcx: TyCtxt<'_>) -> Vec<String> {\n     let mut collector = Collector {\n         args: Vec::new(),\n     };"}, {"sha": "4a01d0e559af411a08bb62e8db33faf68518792b", "filename": "src/librustc_metadata/native_libs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc_metadata%2Fnative_libs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc_metadata%2Fnative_libs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fnative_libs.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -11,7 +11,7 @@ use syntax::feature_gate::{self, GateIssue};\n use syntax::symbol::{Symbol, sym};\n use syntax::{span_err, struct_span_err};\n \n-pub fn collect<'tcx>(tcx: TyCtxt<'tcx>) -> Vec<NativeLibrary> {\n+pub fn collect(tcx: TyCtxt<'_>) -> Vec<NativeLibrary> {\n     let mut collector = Collector {\n         tcx,\n         libs: Vec::new(),"}, {"sha": "25ac93cc2422c1559b4dcc551cf2beda2e321e42", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -87,7 +87,7 @@ pub fn provide(providers: &mut Providers<'_>) {\n     };\n }\n \n-fn mir_borrowck<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> BorrowCheckResult<'tcx> {\n+fn mir_borrowck(tcx: TyCtxt<'_>, def_id: DefId) -> BorrowCheckResult<'_> {\n     let input_body = tcx.mir_validated(def_id);\n     debug!(\"run query mir_borrowck: {}\", tcx.def_path_str(def_id));\n \n@@ -275,7 +275,7 @@ fn do_mir_borrowck<'a, 'tcx>(\n     mbcx.analyze_results(&mut state); // entry point for DataflowResultsConsumer\n \n     // Convert any reservation warnings into lints.\n-    let reservation_warnings = mem::replace(&mut mbcx.reservation_warnings, Default::default());\n+    let reservation_warnings = mem::take(&mut mbcx.reservation_warnings);\n     for (_, (place, span, location, bk, borrow)) in reservation_warnings {\n         let mut initial_diag =\n             mbcx.report_conflicting_borrow(location, (&place, span), bk, &borrow);"}, {"sha": "b5630251e5830942b194ebc3edcc61c8b3d71a8a", "filename": "src/librustc_mir/borrow_check/nll/constraints/graph.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fconstraints%2Fgraph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fconstraints%2Fgraph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fconstraints%2Fgraph.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -234,10 +234,10 @@ impl<'s, D: ConstraintGraphDirecton> graph::WithNumNodes for RegionGraph<'s, D>\n }\n \n impl<'s, D: ConstraintGraphDirecton> graph::WithSuccessors for RegionGraph<'s, D> {\n-    fn successors<'graph>(\n-        &'graph self,\n+    fn successors(\n+        &self,\n         node: Self::Node,\n-    ) -> <Self as graph::GraphSuccessors<'graph>>::Iter {\n+    ) -> <Self as graph::GraphSuccessors<'_>>::Iter {\n         self.outgoing_regions(node)\n     }\n }"}, {"sha": "6f9f5707935baa75ef782903d642681a23279e41", "filename": "src/librustc_mir/borrow_check/nll/region_infer/values.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fvalues.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fvalues.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fvalues.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -162,7 +162,7 @@ impl<N: Idx> LivenessValues<N> {\n     }\n \n     /// Iterate through each region that has a value in this set.\n-    crate fn rows<'a>(&'a self) -> impl Iterator<Item = N> {\n+    crate fn rows(&self) -> impl Iterator<Item=N> {\n         self.points.rows()\n     }\n "}, {"sha": "538ac6881d90ab8d98b8f72c19cebaa4cc2bebb3", "filename": "src/librustc_mir/borrow_check/path_utils.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc_mir%2Fborrow_check%2Fpath_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc_mir%2Fborrow_check%2Fpath_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fpath_utils.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -130,7 +130,7 @@ pub(super) fn is_active<'tcx>(\n \n /// Determines if a given borrow is borrowing local data\n /// This is called for all Yield statements on movable generators\n-pub(super) fn borrow_of_local_data<'tcx>(place: &Place<'tcx>) -> bool {\n+pub(super) fn borrow_of_local_data(place: &Place<'_>) -> bool {\n     place.iterate(|place_base, place_projection| {\n         match place_base {\n             PlaceBase::Static(..) => return false,"}, {"sha": "f679a00035d76ebfbb37b4ad30975958bf14c837", "filename": "src/librustc_mir/build/expr/category.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fcategory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fcategory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fcategory.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -31,7 +31,7 @@ pub enum RvalueFunc {\n /// Determines the category for a given expression. Note that scope\n /// and paren expressions have no category.\n impl Category {\n-    pub fn of<'tcx>(ek: &ExprKind<'tcx>) -> Option<Category> {\n+    pub fn of(ek: &ExprKind<'_>) -> Option<Category> {\n         match *ek {\n             ExprKind::Scope { .. } => None,\n "}, {"sha": "7125eb6850bb6c6f7639362b28406ea61d299fdd", "filename": "src/librustc_mir/build/matches/simplify.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fsimplify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fsimplify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fsimplify.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -28,7 +28,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                                     candidate: &mut Candidate<'pat, 'tcx>) {\n         // repeatedly simplify match pairs until fixed point is reached\n         loop {\n-            let match_pairs = mem::replace(&mut candidate.match_pairs, vec![]);\n+            let match_pairs = mem::take(&mut candidate.match_pairs);\n             let mut changed = false;\n             for match_pair in match_pairs {\n                 match self.simplify_match_pair(match_pair, candidate) {"}, {"sha": "528dfbef6946a3d5546582bb77da17ae7cd8546e", "filename": "src/librustc_mir/build/matches/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -826,6 +826,6 @@ impl Test<'_> {\n     }\n }\n \n-fn is_switch_ty<'tcx>(ty: Ty<'tcx>) -> bool {\n+fn is_switch_ty(ty: Ty<'_>) -> bool {\n     ty.is_integral() || ty.is_char() || ty.is_bool()\n }"}, {"sha": "80a035d8287f438222ac63f21eb1d631e86c6921", "filename": "src/librustc_mir/build/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmod.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -22,7 +22,7 @@ use syntax_pos::Span;\n use super::lints;\n \n /// Construct the MIR for a given `DefId`.\n-pub fn mir_build<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> Body<'tcx> {\n+pub fn mir_build(tcx: TyCtxt<'_>, def_id: DefId) -> Body<'_> {\n     let id = tcx.hir().as_local_hir_id(def_id).unwrap();\n \n     // Figure out what primary body this item has.\n@@ -171,11 +171,11 @@ pub fn mir_build<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> Body<'tcx> {\n ///////////////////////////////////////////////////////////////////////////\n // BuildMir -- walks a crate, looking for fn items and methods to build MIR from\n \n-fn liberated_closure_env_ty<'tcx>(\n-    tcx: TyCtxt<'tcx>,\n+fn liberated_closure_env_ty(\n+    tcx: TyCtxt<'_>,\n     closure_expr_id: hir::HirId,\n     body_id: hir::BodyId,\n-) -> Ty<'tcx> {\n+) -> Ty<'_> {\n     let closure_ty = tcx.body_tables(body_id).node_type(closure_expr_id);\n \n     let (closure_def_id, closure_substs) = match closure_ty.sty {\n@@ -485,7 +485,7 @@ macro_rules! unpack {\n     };\n }\n \n-fn should_abort_on_panic<'tcx>(tcx: TyCtxt<'tcx>, fn_def_id: DefId, abi: Abi) -> bool {\n+fn should_abort_on_panic(tcx: TyCtxt<'_>, fn_def_id: DefId, abi: Abi) -> bool {\n     // Not callable from C, so we can safely unwind through these\n     if abi == Abi::Rust || abi == Abi::RustCall { return false; }\n "}, {"sha": "aa264bbd4bb5c84e117453ba2ea916edf329f692", "filename": "src/librustc_mir/const_eval.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc_mir%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc_mir%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fconst_eval.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -22,7 +22,7 @@ use syntax::source_map::{Span, DUMMY_SP};\n use crate::interpret::{self,\n     PlaceTy, MPlaceTy, OpTy, ImmTy, Immediate, Scalar,\n     RawConst, ConstValue,\n-    InterpResult, InterpErrorInfo, InterpError, GlobalId, InterpretCx, StackPopCleanup,\n+    InterpResult, InterpErrorInfo, InterpError, GlobalId, InterpCx, StackPopCleanup,\n     Allocation, AllocId, MemoryKind, Memory,\n     snapshot, RefTracking, intern_const_alloc_recursive,\n };\n@@ -34,7 +34,7 @@ const STEPS_UNTIL_DETECTOR_ENABLED: isize = 1_000_000;\n /// Should be a power of two for performance reasons.\n const DETECTOR_SNAPSHOT_PERIOD: isize = 256;\n \n-/// The `InterpretCx` is only meant to be used to do field and index projections into constants for\n+/// The `InterpCx` is only meant to be used to do field and index projections into constants for\n /// `simd_shuffle` and const patterns in match arms.\n ///\n /// The function containing the `match` that is currently being analyzed may have generic bounds\n@@ -47,7 +47,7 @@ pub(crate) fn mk_eval_cx<'mir, 'tcx>(\n     param_env: ty::ParamEnv<'tcx>,\n ) -> CompileTimeEvalContext<'mir, 'tcx> {\n     debug!(\"mk_eval_cx: {:?}\", param_env);\n-    InterpretCx::new(tcx.at(span), param_env, CompileTimeInterpreter::new())\n+    InterpCx::new(tcx.at(span), param_env, CompileTimeInterpreter::new())\n }\n \n pub(crate) fn eval_promoted<'mir, 'tcx>(\n@@ -303,7 +303,7 @@ impl<K: Hash + Eq, V> interpret::AllocMap<K, V> for FxHashMap<K, V> {\n }\n \n crate type CompileTimeEvalContext<'mir, 'tcx> =\n-    InterpretCx<'mir, 'tcx, CompileTimeInterpreter<'mir, 'tcx>>;\n+    InterpCx<'mir, 'tcx, CompileTimeInterpreter<'mir, 'tcx>>;\n \n impl interpret::MayLeak for ! {\n     #[inline(always)]\n@@ -326,12 +326,12 @@ impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for CompileTimeInterpreter<'mir,\n     const STATIC_KIND: Option<!> = None; // no copying of statics allowed\n \n     #[inline(always)]\n-    fn enforce_validity(_ecx: &InterpretCx<'mir, 'tcx, Self>) -> bool {\n+    fn enforce_validity(_ecx: &InterpCx<'mir, 'tcx, Self>) -> bool {\n         false // for now, we don't enforce validity\n     }\n \n     fn find_fn(\n-        ecx: &mut InterpretCx<'mir, 'tcx, Self>,\n+        ecx: &mut InterpCx<'mir, 'tcx, Self>,\n         instance: ty::Instance<'tcx>,\n         args: &[OpTy<'tcx>],\n         dest: Option<PlaceTy<'tcx>>,\n@@ -371,7 +371,7 @@ impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for CompileTimeInterpreter<'mir,\n     }\n \n     fn call_intrinsic(\n-        ecx: &mut InterpretCx<'mir, 'tcx, Self>,\n+        ecx: &mut InterpCx<'mir, 'tcx, Self>,\n         instance: ty::Instance<'tcx>,\n         args: &[OpTy<'tcx>],\n         dest: PlaceTy<'tcx>,\n@@ -387,7 +387,7 @@ impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for CompileTimeInterpreter<'mir,\n     }\n \n     fn ptr_op(\n-        _ecx: &InterpretCx<'mir, 'tcx, Self>,\n+        _ecx: &InterpCx<'mir, 'tcx, Self>,\n         _bin_op: mir::BinOp,\n         _left: ImmTy<'tcx>,\n         _right: ImmTy<'tcx>,\n@@ -424,15 +424,15 @@ impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for CompileTimeInterpreter<'mir,\n     }\n \n     fn box_alloc(\n-        _ecx: &mut InterpretCx<'mir, 'tcx, Self>,\n+        _ecx: &mut InterpCx<'mir, 'tcx, Self>,\n         _dest: PlaceTy<'tcx>,\n     ) -> InterpResult<'tcx> {\n         Err(\n             ConstEvalError::NeedsRfc(\"heap allocations via `box` keyword\".to_string()).into(),\n         )\n     }\n \n-    fn before_terminator(ecx: &mut InterpretCx<'mir, 'tcx, Self>) -> InterpResult<'tcx> {\n+    fn before_terminator(ecx: &mut InterpCx<'mir, 'tcx, Self>) -> InterpResult<'tcx> {\n         {\n             let steps = &mut ecx.machine.steps_since_detector_enabled;\n \n@@ -457,13 +457,13 @@ impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for CompileTimeInterpreter<'mir,\n     }\n \n     #[inline(always)]\n-    fn stack_push(_ecx: &mut InterpretCx<'mir, 'tcx, Self>) -> InterpResult<'tcx> {\n+    fn stack_push(_ecx: &mut InterpCx<'mir, 'tcx, Self>) -> InterpResult<'tcx> {\n         Ok(())\n     }\n \n     /// Called immediately before a stack frame gets popped.\n     #[inline(always)]\n-    fn stack_pop(_ecx: &mut InterpretCx<'mir, 'tcx, Self>, _extra: ()) -> InterpResult<'tcx> {\n+    fn stack_pop(_ecx: &mut InterpCx<'mir, 'tcx, Self>, _extra: ()) -> InterpResult<'tcx> {\n         Ok(())\n     }\n }\n@@ -508,7 +508,7 @@ pub fn const_variant_index<'tcx>(\n }\n \n pub fn error_to_const_error<'mir, 'tcx>(\n-    ecx: &InterpretCx<'mir, 'tcx, CompileTimeInterpreter<'mir, 'tcx>>,\n+    ecx: &InterpCx<'mir, 'tcx, CompileTimeInterpreter<'mir, 'tcx>>,\n     mut error: InterpErrorInfo<'tcx>,\n ) -> ConstEvalErr<'tcx> {\n     error.print_backtrace();\n@@ -632,7 +632,7 @@ pub fn const_eval_raw_provider<'tcx>(\n     }\n \n     let span = tcx.def_span(cid.instance.def_id());\n-    let mut ecx = InterpretCx::new(tcx.at(span), key.param_env, CompileTimeInterpreter::new());\n+    let mut ecx = InterpCx::new(tcx.at(span), key.param_env, CompileTimeInterpreter::new());\n \n     let res = ecx.load_mir(cid.instance.def);\n     res.map(|body| {"}, {"sha": "d94ebdbae24ae9f68d3a9468a431b1cdfd9f84c0", "filename": "src/librustc_mir/dataflow/impls/borrowed_locals.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrowed_locals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrowed_locals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrowed_locals.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -92,7 +92,7 @@ struct BorrowedLocalsVisitor<'gk> {\n     trans: &'gk mut GenKillSet<Local>,\n }\n \n-fn find_local<'tcx>(place: &Place<'tcx>) -> Option<Local> {\n+fn find_local(place: &Place<'_>) -> Option<Local> {\n     place.iterate(|place_base, place_projection| {\n         for proj in place_projection {\n             if proj.elem == ProjectionElem::Deref {"}, {"sha": "d356194c0034323b0c70ddca7466f8450b0fb870", "filename": "src/librustc_mir/hair/pattern/_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -835,7 +835,7 @@ impl<'tcx> IntRange<'tcx> {\n     fn from_ctor(tcx: TyCtxt<'tcx>, ctor: &Constructor<'tcx>) -> Option<IntRange<'tcx>> {\n         // Floating-point ranges are permitted and we don't want\n         // to consider them when constructing integer ranges.\n-        fn is_integral<'tcx>(ty: Ty<'tcx>) -> bool {\n+        fn is_integral(ty: Ty<'_>) -> bool {\n             match ty.sty {\n                 ty::Char | ty::Int(_) | ty::Uint(_) => true,\n                 _ => false,"}, {"sha": "915ce9f20d07d161f867616de07f81cc5b6c92e4", "filename": "src/librustc_mir/hair/pattern/check_match.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -26,7 +26,7 @@ use std::slice;\n \n use syntax_pos::{Span, DUMMY_SP, MultiSpan};\n \n-pub(crate) fn check_match<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) {\n+pub(crate) fn check_match(tcx: TyCtxt<'_>, def_id: DefId) {\n     let body_id = if let Some(id) = tcx.hir().as_local_hir_id(def_id) {\n         tcx.hir().body_owned_by(id)\n     } else {\n@@ -43,7 +43,7 @@ pub(crate) fn check_match<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) {\n     }.visit_body(tcx.hir().body(body_id));\n }\n \n-fn create_e0004<'a>(sess: &'a Session, sp: Span, error_message: String) -> DiagnosticBuilder<'a> {\n+fn create_e0004(sess: &Session, sp: Span, error_message: String) -> DiagnosticBuilder<'_> {\n     struct_span_err!(sess, sp, E0004, \"{}\", &error_message)\n }\n "}, {"sha": "d61fb87336ccf0d5154f8b6117e57992bff4cbef", "filename": "src/librustc_mir/interpret/cast.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc_mir%2Finterpret%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc_mir%2Finterpret%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fcast.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -11,9 +11,9 @@ use rustc::mir::interpret::{\n };\n use rustc::mir::CastKind;\n \n-use super::{InterpretCx, Machine, PlaceTy, OpTy, Immediate};\n+use super::{InterpCx, Machine, PlaceTy, OpTy, Immediate};\n \n-impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpretCx<'mir, 'tcx, M> {\n+impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n     fn type_is_fat_ptr(&self, ty: Ty<'tcx>) -> bool {\n         match ty.sty {\n             ty::RawPtr(ty::TypeAndMut { ty, .. }) |"}, {"sha": "e24fa6351e5dfd7d6b0cbfdea8908f9b0521e25e", "filename": "src/librustc_mir/interpret/eval_context.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -26,7 +26,7 @@ use super::{\n     Memory, Machine\n };\n \n-pub struct InterpretCx<'mir, 'tcx, M: Machine<'mir, 'tcx>> {\n+pub struct InterpCx<'mir, 'tcx, M: Machine<'mir, 'tcx>> {\n     /// Stores the `Machine` instance.\n     pub machine: M,\n \n@@ -158,14 +158,14 @@ impl<'tcx, Tag: Copy + 'static> LocalState<'tcx, Tag> {\n     }\n }\n \n-impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> HasDataLayout for InterpretCx<'mir, 'tcx, M> {\n+impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> HasDataLayout for InterpCx<'mir, 'tcx, M> {\n     #[inline]\n     fn data_layout(&self) -> &layout::TargetDataLayout {\n         &self.tcx.data_layout\n     }\n }\n \n-impl<'mir, 'tcx, M> layout::HasTyCtxt<'tcx> for InterpretCx<'mir, 'tcx, M>\n+impl<'mir, 'tcx, M> layout::HasTyCtxt<'tcx> for InterpCx<'mir, 'tcx, M>\n where\n     M: Machine<'mir, 'tcx>,\n {\n@@ -175,7 +175,7 @@ where\n     }\n }\n \n-impl<'mir, 'tcx, M> layout::HasParamEnv<'tcx> for InterpretCx<'mir, 'tcx, M>\n+impl<'mir, 'tcx, M> layout::HasParamEnv<'tcx> for InterpCx<'mir, 'tcx, M>\n where\n     M: Machine<'mir, 'tcx>,\n {\n@@ -184,7 +184,7 @@ where\n     }\n }\n \n-impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> LayoutOf for InterpretCx<'mir, 'tcx, M> {\n+impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> LayoutOf for InterpCx<'mir, 'tcx, M> {\n     type Ty = Ty<'tcx>;\n     type TyLayout = InterpResult<'tcx, TyLayout<'tcx>>;\n \n@@ -195,9 +195,9 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> LayoutOf for InterpretCx<'mir, 'tcx, M>\n     }\n }\n \n-impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpretCx<'mir, 'tcx, M> {\n+impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n     pub fn new(tcx: TyCtxtAt<'tcx>, param_env: ty::ParamEnv<'tcx>, machine: M) -> Self {\n-        InterpretCx {\n+        InterpCx {\n             machine,\n             tcx,\n             param_env,"}, {"sha": "cf36c10a614e5a3fa06512be1149a2017933fe26", "filename": "src/librustc_mir/interpret/intrinsics.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -11,7 +11,7 @@ use rustc::mir::interpret::{\n };\n \n use super::{\n-    Machine, PlaceTy, OpTy, InterpretCx, Immediate,\n+    Machine, PlaceTy, OpTy, InterpCx, Immediate,\n };\n \n mod type_name;\n@@ -39,7 +39,7 @@ fn numeric_intrinsic<'tcx, Tag>(\n     Ok(Scalar::from_uint(bits_out, size))\n }\n \n-impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpretCx<'mir, 'tcx, M> {\n+impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n     /// Returns `true` if emulation happened.\n     pub fn emulate_intrinsic(\n         &mut self,"}, {"sha": "f16c21857b987251d31d9be015dbd5e0863b358f", "filename": "src/librustc_mir/interpret/machine.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc_mir%2Finterpret%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc_mir%2Finterpret%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmachine.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -11,7 +11,7 @@ use rustc::ty::{self, query::TyCtxtAt};\n \n use super::{\n     Allocation, AllocId, InterpResult, Scalar, AllocationExtra,\n-    InterpretCx, PlaceTy, OpTy, ImmTy, MemoryKind, Pointer, Memory\n+    InterpCx, PlaceTy, OpTy, ImmTy, MemoryKind, Pointer, Memory\n };\n \n /// Whether this kind of memory is allowed to leak\n@@ -95,11 +95,11 @@ pub trait Machine<'mir, 'tcx>: Sized {\n     const STATIC_KIND: Option<Self::MemoryKinds>;\n \n     /// Whether to enforce the validity invariant\n-    fn enforce_validity(ecx: &InterpretCx<'mir, 'tcx, Self>) -> bool;\n+    fn enforce_validity(ecx: &InterpCx<'mir, 'tcx, Self>) -> bool;\n \n     /// Called before a basic block terminator is executed.\n     /// You can use this to detect endlessly running programs.\n-    fn before_terminator(ecx: &mut InterpretCx<'mir, 'tcx, Self>) -> InterpResult<'tcx>;\n+    fn before_terminator(ecx: &mut InterpCx<'mir, 'tcx, Self>) -> InterpResult<'tcx>;\n \n     /// Entry point to all function calls.\n     ///\n@@ -112,7 +112,7 @@ pub trait Machine<'mir, 'tcx>: Sized {\n     /// Passing `dest`and `ret` in the same `Option` proved very annoying when only one of them\n     /// was used.\n     fn find_fn(\n-        ecx: &mut InterpretCx<'mir, 'tcx, Self>,\n+        ecx: &mut InterpCx<'mir, 'tcx, Self>,\n         instance: ty::Instance<'tcx>,\n         args: &[OpTy<'tcx, Self::PointerTag>],\n         dest: Option<PlaceTy<'tcx, Self::PointerTag>>,\n@@ -122,7 +122,7 @@ pub trait Machine<'mir, 'tcx>: Sized {\n     /// Directly process an intrinsic without pushing a stack frame.\n     /// If this returns successfully, the engine will take care of jumping to the next block.\n     fn call_intrinsic(\n-        ecx: &mut InterpretCx<'mir, 'tcx, Self>,\n+        ecx: &mut InterpCx<'mir, 'tcx, Self>,\n         instance: ty::Instance<'tcx>,\n         args: &[OpTy<'tcx, Self::PointerTag>],\n         dest: PlaceTy<'tcx, Self::PointerTag>,\n@@ -145,15 +145,15 @@ pub trait Machine<'mir, 'tcx>: Sized {\n     ///\n     /// Returns a (value, overflowed) pair if the operation succeeded\n     fn ptr_op(\n-        ecx: &InterpretCx<'mir, 'tcx, Self>,\n+        ecx: &InterpCx<'mir, 'tcx, Self>,\n         bin_op: mir::BinOp,\n         left: ImmTy<'tcx, Self::PointerTag>,\n         right: ImmTy<'tcx, Self::PointerTag>,\n     ) -> InterpResult<'tcx, (Scalar<Self::PointerTag>, bool)>;\n \n     /// Heap allocations via the `box` keyword.\n     fn box_alloc(\n-        ecx: &mut InterpretCx<'mir, 'tcx, Self>,\n+        ecx: &mut InterpCx<'mir, 'tcx, Self>,\n         dest: PlaceTy<'tcx, Self::PointerTag>,\n     ) -> InterpResult<'tcx>;\n \n@@ -193,19 +193,19 @@ pub trait Machine<'mir, 'tcx>: Sized {\n     /// Executes a retagging operation\n     #[inline]\n     fn retag(\n-        _ecx: &mut InterpretCx<'mir, 'tcx, Self>,\n+        _ecx: &mut InterpCx<'mir, 'tcx, Self>,\n         _kind: mir::RetagKind,\n         _place: PlaceTy<'tcx, Self::PointerTag>,\n     ) -> InterpResult<'tcx> {\n         Ok(())\n     }\n \n     /// Called immediately before a new stack frame got pushed\n-    fn stack_push(ecx: &mut InterpretCx<'mir, 'tcx, Self>) -> InterpResult<'tcx, Self::FrameExtra>;\n+    fn stack_push(ecx: &mut InterpCx<'mir, 'tcx, Self>) -> InterpResult<'tcx, Self::FrameExtra>;\n \n     /// Called immediately after a stack frame gets popped\n     fn stack_pop(\n-        ecx: &mut InterpretCx<'mir, 'tcx, Self>,\n+        ecx: &mut InterpCx<'mir, 'tcx, Self>,\n         extra: Self::FrameExtra,\n     ) -> InterpResult<'tcx>;\n "}, {"sha": "5b177d05bb862f6a7b215e3d76a02a5cbb3323ba", "filename": "src/librustc_mir/interpret/memory.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -158,8 +158,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {\n     pub fn reallocate(\n         &mut self,\n         ptr: Pointer<M::PointerTag>,\n-        old_size: Size,\n-        old_align: Align,\n+        old_size_and_align: Option<(Size, Align)>,\n         new_size: Size,\n         new_align: Align,\n         kind: MemoryKind<M::MemoryKinds>,\n@@ -171,15 +170,19 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {\n         // For simplicities' sake, we implement reallocate as \"alloc, copy, dealloc\".\n         // This happens so rarely, the perf advantage is outweighed by the maintenance cost.\n         let new_ptr = self.allocate(new_size, new_align, kind);\n+        let old_size = match old_size_and_align {\n+            Some((size, _align)) => size,\n+            None => Size::from_bytes(self.get(ptr.alloc_id)?.bytes.len() as u64),\n+        };\n         self.copy(\n             ptr.into(),\n-            old_align,\n+            Align::from_bytes(1).unwrap(), // old_align anyway gets checked below by `deallocate`\n             new_ptr.into(),\n             new_align,\n             old_size.min(new_size),\n             /*nonoverlapping*/ true,\n         )?;\n-        self.deallocate(ptr, Some((old_size, old_align)), kind)?;\n+        self.deallocate(ptr, old_size_and_align, kind)?;\n \n         Ok(new_ptr)\n     }\n@@ -198,7 +201,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {\n     pub fn deallocate(\n         &mut self,\n         ptr: Pointer<M::PointerTag>,\n-        size_and_align: Option<(Size, Align)>,\n+        old_size_and_align: Option<(Size, Align)>,\n         kind: MemoryKind<M::MemoryKinds>,\n     ) -> InterpResult<'tcx> {\n         trace!(\"deallocating: {}\", ptr.alloc_id);\n@@ -232,7 +235,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {\n                 format!(\"{:?}\", kind),\n             ));\n         }\n-        if let Some((size, align)) = size_and_align {\n+        if let Some((size, align)) = old_size_and_align {\n             if size.bytes() != alloc.bytes.len() as u64 || align != alloc.align {\n                 let bytes = Size::from_bytes(alloc.bytes.len() as u64);\n                 return err!(IncorrectAllocationInformation(size,"}, {"sha": "2b20f9df53837775b24cdf0aefd8313de66f8591", "filename": "src/librustc_mir/interpret/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc_mir%2Finterpret%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc_mir%2Finterpret%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmod.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -19,7 +19,7 @@ mod intern;\n pub use rustc::mir::interpret::*; // have all the `interpret` symbols in one place: here\n \n pub use self::eval_context::{\n-    InterpretCx, Frame, StackPopCleanup, LocalState, LocalValue,\n+    InterpCx, Frame, StackPopCleanup, LocalState, LocalValue,\n };\n \n pub use self::place::{Place, PlaceTy, MemPlace, MPlaceTy};"}, {"sha": "68c9047f7b70842758c4b0484ac805532818e929", "filename": "src/librustc_mir/interpret/operand.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Foperand.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -15,7 +15,7 @@ use rustc::mir::interpret::{\n     sign_extend, truncate,\n };\n use super::{\n-    InterpretCx, Machine,\n+    InterpCx, Machine,\n     MemPlace, MPlaceTy, PlaceTy, Place,\n };\n pub use rustc::mir::interpret::ScalarMaybeUndef;\n@@ -213,7 +213,7 @@ pub(super) fn from_known_layout<'tcx>(\n     }\n }\n \n-impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpretCx<'mir, 'tcx, M> {\n+impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n     /// Try reading an immediate in memory; this is interesting particularly for `ScalarPair`.\n     /// Returns `None` if the layout does not permit loading this as a value.\n     fn try_read_immediate_from_mplace("}, {"sha": "20180c9cba542423aeaa53acc00b77e23c245692", "filename": "src/librustc_mir/interpret/operator.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc_mir%2Finterpret%2Foperator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc_mir%2Finterpret%2Foperator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Foperator.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -4,10 +4,10 @@ use syntax::ast::FloatTy;\n use rustc_apfloat::Float;\n use rustc::mir::interpret::{InterpResult, Scalar};\n \n-use super::{InterpretCx, PlaceTy, Immediate, Machine, ImmTy};\n+use super::{InterpCx, PlaceTy, Immediate, Machine, ImmTy};\n \n \n-impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpretCx<'mir, 'tcx, M> {\n+impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n     /// Applies the binary operation `op` to the two operands and writes a tuple of the result\n     /// and a boolean signifying the potential overflow to the destination.\n     pub fn binop_with_overflow(\n@@ -36,7 +36,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpretCx<'mir, 'tcx, M> {\n     }\n }\n \n-impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpretCx<'mir, 'tcx, M> {\n+impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n     fn binary_char_op(\n         &self,\n         bin_op: mir::BinOp,"}, {"sha": "4f3727fbd8d9af00feeedb6f0a30b2eb28f0881d", "filename": "src/librustc_mir/interpret/place.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fplace.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -13,7 +13,7 @@ use rustc::ty::TypeFoldable;\n \n use super::{\n     GlobalId, AllocId, Allocation, Scalar, InterpResult, Pointer, PointerArithmetic,\n-    InterpretCx, Machine, AllocMap, AllocationExtra,\n+    InterpCx, Machine, AllocMap, AllocationExtra,\n     RawConst, Immediate, ImmTy, ScalarMaybeUndef, Operand, OpTy, MemoryKind, LocalValue\n };\n \n@@ -290,7 +290,7 @@ impl<'tcx, Tag: ::std::fmt::Debug> PlaceTy<'tcx, Tag> {\n }\n \n // separating the pointer tag for `impl Trait`, see https://github.com/rust-lang/rust/issues/54385\n-impl<'mir, 'tcx, Tag, M> InterpretCx<'mir, 'tcx, M>\n+impl<'mir, 'tcx, Tag, M> InterpCx<'mir, 'tcx, M>\n where\n     // FIXME: Working around https://github.com/rust-lang/rust/issues/54385\n     Tag: ::std::fmt::Debug + Copy + Eq + Hash + 'static,\n@@ -583,7 +583,7 @@ where\n                 // global table but not in its local memory: It calls back into tcx through\n                 // a query, triggering the CTFE machinery to actually turn this lazy reference\n                 // into a bunch of bytes.  IOW, statics are evaluated with CTFE even when\n-                // this InterpretCx uses another Machine (e.g., in miri).  This is what we\n+                // this InterpCx uses another Machine (e.g., in miri).  This is what we\n                 // want!  This way, computing statics works consistently between codegen\n                 // and miri: They use the same query to eventually obtain a `ty::Const`\n                 // and use that for further computation."}, {"sha": "dc5302eb18fc4b2d1ac407b9afd805a55edfc37c", "filename": "src/librustc_mir/interpret/step.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc_mir%2Finterpret%2Fstep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc_mir%2Finterpret%2Fstep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fstep.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -1,12 +1,12 @@\n-//! This module contains the `InterpretCx` methods for executing a single step of the interpreter.\n+//! This module contains the `InterpCx` methods for executing a single step of the interpreter.\n //!\n //! The main entry point is the `step` method.\n \n use rustc::mir;\n use rustc::ty::layout::LayoutOf;\n use rustc::mir::interpret::{InterpResult, Scalar, PointerArithmetic};\n \n-use super::{InterpretCx, Machine};\n+use super::{InterpCx, Machine};\n \n /// Classify whether an operator is \"left-homogeneous\", i.e., the LHS has the\n /// same type as the result.\n@@ -35,7 +35,7 @@ fn binop_right_homogeneous(op: mir::BinOp) -> bool {\n     }\n }\n \n-impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpretCx<'mir, 'tcx, M> {\n+impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n     pub fn run(&mut self) -> InterpResult<'tcx> {\n         while self.step()? {}\n         Ok(())"}, {"sha": "d6f3de02ec918bf83e7959f60da11d23a4927039", "filename": "src/librustc_mir/interpret/terminator.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -8,10 +8,10 @@ use rustc_target::spec::abi::Abi;\n \n use rustc::mir::interpret::{InterpResult, PointerArithmetic, InterpError, Scalar};\n use super::{\n-    InterpretCx, Machine, Immediate, OpTy, ImmTy, PlaceTy, MPlaceTy, StackPopCleanup\n+    InterpCx, Machine, Immediate, OpTy, ImmTy, PlaceTy, MPlaceTy, StackPopCleanup\n };\n \n-impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpretCx<'mir, 'tcx, M> {\n+impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n     #[inline]\n     pub fn goto_block(&mut self, target: Option<mir::BasicBlock>) -> InterpResult<'tcx> {\n         if let Some(target) = target {"}, {"sha": "27d127514229c479d7e82a5a3ae32a531964cd68", "filename": "src/librustc_mir/interpret/traits.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc_mir%2Finterpret%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc_mir%2Finterpret%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Ftraits.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -2,9 +2,9 @@ use rustc::ty::{self, Ty, Instance};\n use rustc::ty::layout::{Size, Align, LayoutOf};\n use rustc::mir::interpret::{Scalar, Pointer, InterpResult, PointerArithmetic};\n \n-use super::{InterpretCx, InterpError, Machine, MemoryKind};\n+use super::{InterpCx, InterpError, Machine, MemoryKind};\n \n-impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpretCx<'mir, 'tcx, M> {\n+impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n     /// Creates a dynamic vtable for the given type and vtable origin. This is used only for\n     /// objects.\n     ///"}, {"sha": "374f42261bf62f533fabec7c9a2d4bae8653c3f9", "filename": "src/librustc_mir/interpret/validity.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -13,7 +13,7 @@ use rustc::mir::interpret::{\n use std::hash::Hash;\n \n use super::{\n-    OpTy, Machine, InterpretCx, ValueVisitor, MPlaceTy,\n+    OpTy, Machine, InterpCx, ValueVisitor, MPlaceTy,\n };\n \n macro_rules! validation_failure {\n@@ -174,7 +174,7 @@ struct ValidityVisitor<'rt, 'mir, 'tcx, M: Machine<'mir, 'tcx>> {\n         MPlaceTy<'tcx, M::PointerTag>,\n         Vec<PathElem>,\n     >>,\n-    ecx: &'rt InterpretCx<'mir, 'tcx, M>,\n+    ecx: &'rt InterpCx<'mir, 'tcx, M>,\n }\n \n impl<'rt, 'mir, 'tcx, M: Machine<'mir, 'tcx>> ValidityVisitor<'rt, 'mir, 'tcx, M> {\n@@ -259,7 +259,7 @@ impl<'rt, 'mir, 'tcx, M: Machine<'mir, 'tcx>> ValueVisitor<'mir, 'tcx, M>\n     type V = OpTy<'tcx, M::PointerTag>;\n \n     #[inline(always)]\n-    fn ecx(&self) -> &InterpretCx<'mir, 'tcx, M> {\n+    fn ecx(&self) -> &InterpCx<'mir, 'tcx, M> {\n         &self.ecx\n     }\n \n@@ -628,7 +628,7 @@ impl<'rt, 'mir, 'tcx, M: Machine<'mir, 'tcx>> ValueVisitor<'mir, 'tcx, M>\n     }\n }\n \n-impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpretCx<'mir, 'tcx, M> {\n+impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n     /// This function checks the data at `op`. `op` is assumed to cover valid memory if it\n     /// is an indirect operand.\n     /// It will error if the bits at the destination do not match the ones described by the layout."}, {"sha": "783d2522637352977299bba19f493ff3a9b105f7", "filename": "src/librustc_mir/interpret/visitor.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc_mir%2Finterpret%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc_mir%2Finterpret%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fvisitor.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -8,7 +8,7 @@ use rustc::mir::interpret::{\n };\n \n use super::{\n-    Machine, InterpretCx, MPlaceTy, OpTy,\n+    Machine, InterpCx, MPlaceTy, OpTy,\n };\n \n // A thing that we can project into, and that has a layout.\n@@ -21,7 +21,7 @@ pub trait Value<'mir, 'tcx, M: Machine<'mir, 'tcx>>: Copy {\n     /// Makes this into an `OpTy`.\n     fn to_op(\n         self,\n-        ecx: &InterpretCx<'mir, 'tcx, M>,\n+        ecx: &InterpCx<'mir, 'tcx, M>,\n     ) -> InterpResult<'tcx, OpTy<'tcx, M::PointerTag>>;\n \n     /// Creates this from an `MPlaceTy`.\n@@ -30,14 +30,14 @@ pub trait Value<'mir, 'tcx, M: Machine<'mir, 'tcx>>: Copy {\n     /// Projects to the given enum variant.\n     fn project_downcast(\n         self,\n-        ecx: &InterpretCx<'mir, 'tcx, M>,\n+        ecx: &InterpCx<'mir, 'tcx, M>,\n         variant: VariantIdx,\n     ) -> InterpResult<'tcx, Self>;\n \n     /// Projects to the n-th field.\n     fn project_field(\n         self,\n-        ecx: &InterpretCx<'mir, 'tcx, M>,\n+        ecx: &InterpCx<'mir, 'tcx, M>,\n         field: u64,\n     ) -> InterpResult<'tcx, Self>;\n }\n@@ -53,7 +53,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Value<'mir, 'tcx, M> for OpTy<'tcx, M::\n     #[inline(always)]\n     fn to_op(\n         self,\n-        _ecx: &InterpretCx<'mir, 'tcx, M>,\n+        _ecx: &InterpCx<'mir, 'tcx, M>,\n     ) -> InterpResult<'tcx, OpTy<'tcx, M::PointerTag>> {\n         Ok(self)\n     }\n@@ -66,7 +66,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Value<'mir, 'tcx, M> for OpTy<'tcx, M::\n     #[inline(always)]\n     fn project_downcast(\n         self,\n-        ecx: &InterpretCx<'mir, 'tcx, M>,\n+        ecx: &InterpCx<'mir, 'tcx, M>,\n         variant: VariantIdx,\n     ) -> InterpResult<'tcx, Self> {\n         ecx.operand_downcast(self, variant)\n@@ -75,7 +75,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Value<'mir, 'tcx, M> for OpTy<'tcx, M::\n     #[inline(always)]\n     fn project_field(\n         self,\n-        ecx: &InterpretCx<'mir, 'tcx, M>,\n+        ecx: &InterpCx<'mir, 'tcx, M>,\n         field: u64,\n     ) -> InterpResult<'tcx, Self> {\n         ecx.operand_field(self, field)\n@@ -91,7 +91,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Value<'mir, 'tcx, M> for MPlaceTy<'tcx,\n     #[inline(always)]\n     fn to_op(\n         self,\n-        _ecx: &InterpretCx<'mir, 'tcx, M>,\n+        _ecx: &InterpCx<'mir, 'tcx, M>,\n     ) -> InterpResult<'tcx, OpTy<'tcx, M::PointerTag>> {\n         Ok(self.into())\n     }\n@@ -104,7 +104,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Value<'mir, 'tcx, M> for MPlaceTy<'tcx,\n     #[inline(always)]\n     fn project_downcast(\n         self,\n-        ecx: &InterpretCx<'mir, 'tcx, M>,\n+        ecx: &InterpCx<'mir, 'tcx, M>,\n         variant: VariantIdx,\n     ) -> InterpResult<'tcx, Self> {\n         ecx.mplace_downcast(self, variant)\n@@ -113,7 +113,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Value<'mir, 'tcx, M> for MPlaceTy<'tcx,\n     #[inline(always)]\n     fn project_field(\n         self,\n-        ecx: &InterpretCx<'mir, 'tcx, M>,\n+        ecx: &InterpCx<'mir, 'tcx, M>,\n         field: u64,\n     ) -> InterpResult<'tcx, Self> {\n         ecx.mplace_field(self, field)\n@@ -126,9 +126,9 @@ macro_rules! make_value_visitor {\n         pub trait $visitor_trait_name<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>>: Sized {\n             type V: Value<'mir, 'tcx, M>;\n \n-            /// The visitor must have an `InterpretCx` in it.\n+            /// The visitor must have an `InterpCx` in it.\n             fn ecx(&$($mutability)? self)\n-                -> &$($mutability)? InterpretCx<'mir, 'tcx, M>;\n+                -> &$($mutability)? InterpCx<'mir, 'tcx, M>;\n \n             // Recursive actions, ready to be overloaded.\n             /// Visits the given value, dispatching as appropriate to more specialized visitors."}, {"sha": "b85149cf55676aebaed3312d18aec66c1e79b83e", "filename": "src/librustc_mir/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc_mir%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc_mir%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Flib.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -24,6 +24,7 @@ Rust MIR: a lowered representation of Rust. Also: an experiment!\n #![feature(slice_concat_ext)]\n #![feature(trusted_len)]\n #![feature(try_blocks)]\n+#![feature(mem_take)]\n \n #![recursion_limit=\"256\"]\n "}, {"sha": "097d76925c8eba59cbac72ab7d207d5f66e2199b", "filename": "src/librustc_mir/monomorphize/collector.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -281,10 +281,10 @@ impl<'tcx> InliningMap<'tcx> {\n     }\n }\n \n-pub fn collect_crate_mono_items<'tcx>(\n-    tcx: TyCtxt<'tcx>,\n+pub fn collect_crate_mono_items(\n+    tcx: TyCtxt<'_>,\n     mode: MonoItemCollectionMode,\n-) -> (FxHashSet<MonoItem<'tcx>>, InliningMap<'tcx>) {\n+) -> (FxHashSet<MonoItem<'_>>, InliningMap<'_>) {\n     let roots = time(tcx.sess, \"collecting roots\", || {\n         collect_roots(tcx, mode)\n     });\n@@ -315,7 +315,7 @@ pub fn collect_crate_mono_items<'tcx>(\n \n // Find all non-generic items by walking the HIR. These items serve as roots to\n // start monomorphizing from.\n-fn collect_roots<'tcx>(tcx: TyCtxt<'tcx>, mode: MonoItemCollectionMode) -> Vec<MonoItem<'tcx>> {\n+fn collect_roots(tcx: TyCtxt<'_>, mode: MonoItemCollectionMode) -> Vec<MonoItem<'_>> {\n     debug!(\"Collecting roots\");\n     let mut roots = Vec::new();\n \n@@ -912,7 +912,7 @@ fn find_vtable_types_for_unsizing<'tcx>(\n     }\n }\n \n-fn create_fn_mono_item<'tcx>(instance: Instance<'tcx>) -> MonoItem<'tcx> {\n+fn create_fn_mono_item(instance: Instance<'_>) -> MonoItem<'_> {\n     debug!(\"create_fn_mono_item(instance={})\", instance);\n     MonoItem::Fn(instance)\n }\n@@ -1114,7 +1114,7 @@ impl RootCollector<'_, 'v> {\n     }\n }\n \n-fn item_requires_monomorphization<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> bool {\n+fn item_requires_monomorphization(tcx: TyCtxt<'_>, def_id: DefId) -> bool {\n     let generics = tcx.generics_of(def_id);\n     generics.requires_monomorphization(tcx)\n }\n@@ -1243,7 +1243,7 @@ fn collect_neighbours<'tcx>(\n     }\n }\n \n-fn def_id_to_string<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> String {\n+fn def_id_to_string(tcx: TyCtxt<'_>, def_id: DefId) -> String {\n     let mut output = String::new();\n     let printer = DefPathBasedNames::new(tcx, false, false);\n     printer.push_def_path(def_id, &mut output);"}, {"sha": "a934c921d9257e04893df143aae2d49b074e9d1d", "filename": "src/librustc_mir/monomorphize/partitioning.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc_mir%2Fmonomorphize%2Fpartitioning.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc_mir%2Fmonomorphize%2Fpartitioning.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fpartitioning.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -839,10 +839,10 @@ where\n     }\n }\n \n-fn collect_and_partition_mono_items<'tcx>(\n-    tcx: TyCtxt<'tcx>,\n+fn collect_and_partition_mono_items(\n+    tcx: TyCtxt<'_>,\n     cnum: CrateNum,\n-) -> (Arc<DefIdSet>, Arc<Vec<Arc<CodegenUnit<'tcx>>>>) {\n+) -> (Arc<DefIdSet>, Arc<Vec<Arc<CodegenUnit<'_>>>>) {\n     assert_eq!(cnum, LOCAL_CRATE);\n \n     let collection_mode = match tcx.sess.opts.debugging_opts.print_mono_items {"}, {"sha": "32b964dbadfa92ac3dcf5e4a5d0dab9f6844db46", "filename": "src/librustc_mir/shim.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc_mir%2Fshim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc_mir%2Fshim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fshim.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -829,7 +829,7 @@ fn build_call_shim<'tcx>(\n     body\n }\n \n-pub fn build_adt_ctor<'tcx>(tcx: TyCtxt<'tcx>, ctor_id: DefId) -> &'tcx Body<'tcx> {\n+pub fn build_adt_ctor(tcx: TyCtxt<'_>, ctor_id: DefId) -> &Body<'_> {\n     debug_assert!(tcx.is_constructor(ctor_id));\n \n     let span = tcx.hir().span_if_local(ctor_id)"}, {"sha": "de5af0a46b534935102c2de6e231ad2d28fbccfe", "filename": "src/librustc_mir/transform/add_retag.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc_mir%2Ftransform%2Fadd_retag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc_mir%2Ftransform%2Fadd_retag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fadd_retag.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -14,8 +14,8 @@ pub struct AddRetag;\n /// after the assignment, we can be sure to obtain the same place value.\n /// (Concurrent accesses by other threads are no problem as these are anyway non-atomic\n /// copies.  Data races are UB.)\n-fn is_stable<'tcx>(\n-    place: &Place<'tcx>,\n+fn is_stable(\n+    place: &Place<'_>,\n ) -> bool {\n     use rustc::mir::Place::*;\n "}, {"sha": "9898ba897734d7f74deb56476bea127caf3506ce", "filename": "src/librustc_mir/transform/check_unsafety.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -480,11 +480,11 @@ impl<'a, 'tcx> hir::intravisit::Visitor<'tcx> for UnusedUnsafeVisitor<'a> {\n     }\n }\n \n-fn check_unused_unsafe<'a, 'tcx>(\n-    tcx: TyCtxt<'tcx>,\n+fn check_unused_unsafe(\n+    tcx: TyCtxt<'_>,\n     def_id: DefId,\n     used_unsafe: &FxHashSet<hir::HirId>,\n-    unsafe_blocks: &'a mut Vec<(hir::HirId, bool)>,\n+    unsafe_blocks: &mut Vec<(hir::HirId, bool)>,\n ) {\n     let body_id =\n         tcx.hir().as_local_hir_id(def_id).and_then(|hir_id| {\n@@ -506,7 +506,7 @@ fn check_unused_unsafe<'a, 'tcx>(\n     hir::intravisit::Visitor::visit_body(&mut visitor, body);\n }\n \n-fn unsafety_check_result<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> UnsafetyCheckResult {\n+fn unsafety_check_result(tcx: TyCtxt<'_>, def_id: DefId) -> UnsafetyCheckResult {\n     debug!(\"unsafety_violations({:?})\", def_id);\n \n     // N.B., this borrow is valid because all the consumers of\n@@ -545,7 +545,7 @@ fn unsafety_check_result<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> UnsafetyChec\n     }\n }\n \n-fn unsafe_derive_on_repr_packed<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) {\n+fn unsafe_derive_on_repr_packed(tcx: TyCtxt<'_>, def_id: DefId) {\n     let lint_hir_id = tcx.hir().as_local_hir_id(def_id).unwrap_or_else(||\n         bug!(\"checking unsafety for non-local def id {:?}\", def_id));\n \n@@ -602,7 +602,7 @@ fn report_unused_unsafe(tcx: TyCtxt<'_>, used_unsafe: &FxHashSet<hir::HirId>, id\n     db.emit();\n }\n \n-fn builtin_derive_def_id<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> Option<DefId> {\n+fn builtin_derive_def_id(tcx: TyCtxt<'_>, def_id: DefId) -> Option<DefId> {\n     debug!(\"builtin_derive_def_id({:?})\", def_id);\n     if let Some(impl_def_id) = tcx.impl_of_method(def_id) {\n         if tcx.has_attr(impl_def_id, sym::automatically_derived) {\n@@ -618,7 +618,7 @@ fn builtin_derive_def_id<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> Option<DefId\n     }\n }\n \n-pub fn check_unsafety<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) {\n+pub fn check_unsafety(tcx: TyCtxt<'_>, def_id: DefId) {\n     debug!(\"check_unsafety({:?})\", def_id);\n \n     // closures are handled by their parent fn."}, {"sha": "29480f88fcedc421e291fa5026cd5352907de848", "filename": "src/librustc_mir/transform/const_prop.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -23,7 +23,7 @@ use rustc::ty::layout::{\n };\n \n use crate::interpret::{\n-    self, InterpretCx, ScalarMaybeUndef, Immediate, OpTy,\n+    self, InterpCx, ScalarMaybeUndef, Immediate, OpTy,\n     ImmTy, MemoryKind, StackPopCleanup, LocalValue, LocalState,\n };\n use crate::const_eval::{\n@@ -117,7 +117,7 @@ type Const<'tcx> = OpTy<'tcx>;\n \n /// Finds optimization opportunities on the MIR.\n struct ConstPropagator<'mir, 'tcx> {\n-    ecx: InterpretCx<'mir, 'tcx, CompileTimeInterpreter<'mir, 'tcx>>,\n+    ecx: InterpCx<'mir, 'tcx, CompileTimeInterpreter<'mir, 'tcx>>,\n     tcx: TyCtxt<'tcx>,\n     source: MirSource<'tcx>,\n     can_const_prop: IndexVec<Local, bool>,\n@@ -202,7 +202,7 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n \n         // If the local is `Unitialized` or `Dead` then we haven't propagated a value into it.\n         //\n-        // `InterpretCx::access_local()` mostly takes care of this for us however, for ZSTs,\n+        // `InterpCx::access_local()` mostly takes care of this for us however, for ZSTs,\n         // it will synthesize a value for us. In doing so, that will cause the\n         // `get_const(l).is_empty()` assert right before we call `set_const()` in `visit_statement`\n         // to fail."}, {"sha": "a6fb555f20bd023cddbf7d14aaa3902d4f82148c", "filename": "src/librustc_mir/transform/dump_mir.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc_mir%2Ftransform%2Fdump_mir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc_mir%2Ftransform%2Fdump_mir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fdump_mir.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -14,7 +14,7 @@ use crate::util as mir_util;\n pub struct Marker(pub &'static str);\n \n impl MirPass for Marker {\n-    fn name<'a>(&'a self) -> Cow<'a, str> {\n+    fn name(&self) -> Cow<'_, str> {\n         Cow::Borrowed(self.0)\n     }\n \n@@ -52,7 +52,7 @@ pub fn on_mir_pass<'tcx>(\n     }\n }\n \n-pub fn emit_mir<'tcx>(tcx: TyCtxt<'tcx>, outputs: &OutputFilenames) -> io::Result<()> {\n+pub fn emit_mir(tcx: TyCtxt<'_>, outputs: &OutputFilenames) -> io::Result<()> {\n     let path = outputs.path(OutputType::Mir);\n     let mut f = File::create(&path)?;\n     mir_util::write_mir_pretty(tcx, None, &mut f)?;"}, {"sha": "2ed3f7d5c26e28c852e4dd45a30c153c43754c20", "filename": "src/librustc_mir/transform/generator.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -1028,14 +1028,14 @@ fn create_generator_resume_function<'tcx>(\n     dump_mir(tcx, None, \"generator_resume\", &0, source, body, |_, _| Ok(()) );\n }\n \n-fn source_info<'tcx>(body: &Body<'tcx>) -> SourceInfo {\n+fn source_info(body: &Body<'_>) -> SourceInfo {\n     SourceInfo {\n         span: body.span,\n         scope: OUTERMOST_SOURCE_SCOPE,\n     }\n }\n \n-fn insert_clean_drop<'tcx>(body: &mut Body<'tcx>) -> BasicBlock {\n+fn insert_clean_drop(body: &mut Body<'_>) -> BasicBlock {\n     let return_block = insert_term_block(body, TerminatorKind::Return);\n \n     // Create a block to destroy an unresumed generators. This can only destroy upvars."}, {"sha": "7f43c4a3e89a1adee9f7cf976f1aed2afeea6bd9", "filename": "src/librustc_mir/transform/mod.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fmod.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -50,13 +50,13 @@ pub(crate) fn provide(providers: &mut Providers<'_>) {\n     };\n }\n \n-fn is_mir_available<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> bool {\n+fn is_mir_available(tcx: TyCtxt<'_>, def_id: DefId) -> bool {\n     tcx.mir_keys(def_id.krate).contains(&def_id)\n }\n \n /// Finds the full set of `DefId`s within the current crate that have\n /// MIR associated with them.\n-fn mir_keys<'tcx>(tcx: TyCtxt<'tcx>, krate: CrateNum) -> &'tcx DefIdSet {\n+fn mir_keys(tcx: TyCtxt<'_>, krate: CrateNum) -> &DefIdSet {\n     assert_eq!(krate, LOCAL_CRATE);\n \n     let mut set = DefIdSet::default();\n@@ -94,7 +94,7 @@ fn mir_keys<'tcx>(tcx: TyCtxt<'tcx>, krate: CrateNum) -> &'tcx DefIdSet {\n     tcx.arena.alloc(set)\n }\n \n-fn mir_built<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> &'tcx Steal<Body<'tcx>> {\n+fn mir_built(tcx: TyCtxt<'_>, def_id: DefId) -> &Steal<Body<'_>> {\n     let mir = build::mir_build(tcx, def_id);\n     tcx.alloc_steal_mir(mir)\n }\n@@ -137,7 +137,7 @@ pub fn default_name<T: ?Sized>() -> Cow<'static, str> {\n /// pass will be named after the type, and it will consist of a main\n /// loop that goes over each available MIR and applies `run_pass`.\n pub trait MirPass {\n-    fn name<'a>(&'a self) -> Cow<'a, str> {\n+    fn name(&self) -> Cow<'_, str> {\n         default_name::<Self>()\n     }\n \n@@ -192,7 +192,7 @@ pub fn run_passes(\n     }\n }\n \n-fn mir_const<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> &'tcx Steal<Body<'tcx>> {\n+fn mir_const(tcx: TyCtxt<'_>, def_id: DefId) -> &Steal<Body<'_>> {\n     // Unsafety check uses the raw mir, so make sure it is run\n     let _ = tcx.unsafety_check_result(def_id);\n \n@@ -223,7 +223,7 @@ fn mir_validated(tcx: TyCtxt<'tcx>, def_id: DefId) -> &'tcx Steal<Body<'tcx>> {\n     tcx.alloc_steal_mir(body)\n }\n \n-fn optimized_mir<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> &'tcx Body<'tcx> {\n+fn optimized_mir(tcx: TyCtxt<'_>, def_id: DefId) -> &Body<'_> {\n     if tcx.is_constructor(def_id) {\n         // There's no reason to run all of the MIR passes on constructors when\n         // we can just output the MIR we want directly. This also saves const"}, {"sha": "3e52d3ee9bbdff021d4d8d56ea2501bd037e1d26", "filename": "src/librustc_mir/transform/qualify_consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -1473,7 +1473,7 @@ pub fn provide(providers: &mut Providers<'_>) {\n     };\n }\n \n-fn mir_const_qualif<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> (u8, &'tcx BitSet<Local>) {\n+fn mir_const_qualif(tcx: TyCtxt<'_>, def_id: DefId) -> (u8, &BitSet<Local>) {\n     // N.B., this `borrow()` is guaranteed to be valid (i.e., the value\n     // cannot yet be stolen), because `mir_validated()`, which steals\n     // from `mir_const(), forces this query to execute before"}, {"sha": "2eed9d453f23363fded6deb3aa19d811e6e04cbf", "filename": "src/librustc_mir/transform/simplify.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc_mir%2Ftransform%2Fsimplify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc_mir%2Ftransform%2Fsimplify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fsimplify.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -53,7 +53,7 @@ pub fn simplify_cfg(body: &mut Body<'_>) {\n }\n \n impl MirPass for SimplifyCfg {\n-    fn name<'a>(&'a self) -> Cow<'a, str> {\n+    fn name(&self) -> Cow<'_, str> {\n         Cow::Borrowed(&self.label)\n     }\n "}, {"sha": "f39c71ef42d71559c70bc6a04a5bd008ceb3ef03", "filename": "src/librustc_mir/transform/simplify_branches.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc_mir%2Ftransform%2Fsimplify_branches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc_mir%2Ftransform%2Fsimplify_branches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fsimplify_branches.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -15,7 +15,7 @@ impl SimplifyBranches {\n }\n \n impl MirPass for SimplifyBranches {\n-    fn name<'a>(&'a self) -> Cow<'a, str> {\n+    fn name(&self) -> Cow<'_, str> {\n         Cow::Borrowed(&self.label)\n     }\n "}, {"sha": "59821440c6619cfb2edded3d832b1a19281201a4", "filename": "src/librustc_mir/util/def_use.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc_mir%2Futil%2Fdef_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc_mir%2Futil%2Fdef_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fdef_use.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -31,7 +31,7 @@ impl DefUseAnalysis {\n         self.clear();\n \n         let mut finder = DefUseFinder {\n-            info: mem::replace(&mut self.info, IndexVec::new()),\n+            info: mem::take(&mut self.info),\n         };\n         finder.visit_body(body);\n         self.info = finder.info"}, {"sha": "9d142d9b700b63498f26f180c88c03233be4258d", "filename": "src/librustc_mir/util/graphviz.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc_mir%2Futil%2Fgraphviz.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc_mir%2Futil%2Fgraphviz.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fgraphviz.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -8,8 +8,8 @@ use std::io::{self, Write};\n use super::pretty::dump_mir_def_ids;\n \n /// Write a graphviz DOT graph of a list of MIRs.\n-pub fn write_mir_graphviz<'tcx, W>(\n-    tcx: TyCtxt<'tcx>,\n+pub fn write_mir_graphviz<W>(\n+    tcx: TyCtxt<'_>,\n     single: Option<DefId>,\n     w: &mut W,\n ) -> io::Result<()>"}, {"sha": "b42eebc7ee3be28dfc0cd3d1cf544b7623535a1b", "filename": "src/librustc_mir/util/liveness.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc_mir%2Futil%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc_mir%2Futil%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fliveness.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -56,8 +56,8 @@ pub struct LivenessResult {\n \n /// Computes which local variables are live within the given function\n /// `mir`, including drops.\n-pub fn liveness_of_locals<'tcx>(\n-    body: &Body<'tcx>,\n+pub fn liveness_of_locals(\n+    body: &Body<'_>,\n ) -> LivenessResult {\n     let num_live_vars = body.local_decls.len();\n \n@@ -243,8 +243,8 @@ impl<'tcx> Visitor<'tcx> for DefsUsesVisitor\n     }\n }\n \n-fn block<'tcx>(\n-    b: &BasicBlockData<'tcx>,\n+fn block(\n+    b: &BasicBlockData<'_>,\n     locals: usize,\n ) -> DefsUses {\n     let mut visitor = DefsUsesVisitor {"}, {"sha": "fd2a5e452ce4b481d5ae2dc94b2170da0c96798b", "filename": "src/librustc_mir/util/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc_mir%2Futil%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc_mir%2Futil%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fmod.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -21,7 +21,7 @@ pub use self::graphviz::{graphviz_safe_def_name, write_mir_graphviz};\n pub use self::graphviz::write_node_label as write_graphviz_node_label;\n \n /// If possible, suggest replacing `ref` with `ref mut`.\n-pub fn suggest_ref_mut<'tcx>(tcx: TyCtxt<'tcx>, binding_span: Span) -> Option<(String)> {\n+pub fn suggest_ref_mut(tcx: TyCtxt<'_>, binding_span: Span) -> Option<(String)> {\n     let hi_src = tcx.sess.source_map().span_to_snippet(binding_span).unwrap();\n     if hi_src.starts_with(\"ref\")\n         && hi_src[\"ref\".len()..].starts_with(Pattern_White_Space)"}, {"sha": "e7f6abc410a32f90e945347af9089453dc77ac32", "filename": "src/librustc_passes/hir_stats.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc_passes%2Fhir_stats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc_passes%2Fhir_stats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fhir_stats.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -38,7 +38,7 @@ pub fn print_hir_stats(krate: &hir::Crate) {\n     collector.print(\"HIR STATS\");\n }\n \n-pub fn print_ast_stats<'v>(krate: &'v ast::Crate, title: &str) {\n+pub fn print_ast_stats(krate: &ast::Crate, title: &str) {\n     let mut collector = StatCollector {\n         krate: None,\n         data: FxHashMap::default(),"}, {"sha": "6b1ce578240e4772646c31ef2e2ff71403d9be01", "filename": "src/librustc_passes/layout_test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc_passes%2Flayout_test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc_passes%2Flayout_test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Flayout_test.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -14,7 +14,7 @@ use rustc::ty::TyCtxt;\n use syntax::ast::Attribute;\n use syntax::symbol::sym;\n \n-pub fn test_layout<'tcx>(tcx: TyCtxt<'tcx>) {\n+pub fn test_layout(tcx: TyCtxt<'_>) {\n     if tcx.features().rustc_attrs {\n         // if the `rustc_attrs` feature is not enabled, don't bother testing layout\n         tcx.hir()"}, {"sha": "616e6974110e680b5cec399a15de685b8024dcd1", "filename": "src/librustc_passes/loops.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc_passes%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc_passes%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Floops.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -45,7 +45,7 @@ struct CheckLoopVisitor<'a, 'hir> {\n     cx: Context,\n }\n \n-fn check_mod_loops<'tcx>(tcx: TyCtxt<'tcx>, module_def_id: DefId) {\n+fn check_mod_loops(tcx: TyCtxt<'_>, module_def_id: DefId) {\n     tcx.hir().visit_item_likes_in_module(module_def_id, &mut CheckLoopVisitor {\n         sess: &tcx.sess,\n         hir_map: &tcx.hir(),"}, {"sha": "e14fa07fbbfe4323fbcee04958b0ce7c1105e47c", "filename": "src/librustc_passes/rvalue_promotion.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc_passes%2Frvalue_promotion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc_passes%2Frvalue_promotion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Frvalue_promotion.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -39,7 +39,7 @@ pub fn provide(providers: &mut Providers<'_>) {\n     };\n }\n \n-fn const_is_rvalue_promotable_to_static<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> bool {\n+fn const_is_rvalue_promotable_to_static(tcx: TyCtxt<'_>, def_id: DefId) -> bool {\n     assert!(def_id.is_local());\n \n     let hir_id = tcx.hir().as_local_hir_id(def_id)\n@@ -48,7 +48,7 @@ fn const_is_rvalue_promotable_to_static<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId)\n     tcx.rvalue_promotable_map(def_id).contains(&body_id.hir_id.local_id)\n }\n \n-fn rvalue_promotable_map<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> &'tcx ItemLocalSet {\n+fn rvalue_promotable_map(tcx: TyCtxt<'_>, def_id: DefId) -> &ItemLocalSet {\n     let outer_def_id = tcx.closure_base_def_id(def_id);\n     if outer_def_id != def_id {\n         return tcx.rvalue_promotable_map(outer_def_id);"}, {"sha": "816e283a104604e7c4befed74ac8a12c1b50aa84", "filename": "src/librustc_plugin/build.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc_plugin%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc_plugin%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_plugin%2Fbuild.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -30,11 +30,11 @@ impl<'v> ItemLikeVisitor<'v> for RegistrarFinder {\n }\n \n /// Finds the function marked with `#[plugin_registrar]`, if any.\n-pub fn find_plugin_registrar<'tcx>(tcx: TyCtxt<'tcx>) -> Option<DefId> {\n+pub fn find_plugin_registrar(tcx: TyCtxt<'_>) -> Option<DefId> {\n     tcx.plugin_registrar_fn(LOCAL_CRATE)\n }\n \n-fn plugin_registrar_fn<'tcx>(tcx: TyCtxt<'tcx>, cnum: CrateNum) -> Option<DefId> {\n+fn plugin_registrar_fn(tcx: TyCtxt<'_>, cnum: CrateNum) -> Option<DefId> {\n     assert_eq!(cnum, LOCAL_CRATE);\n \n     let mut finder = RegistrarFinder { registrars: Vec::new() };"}, {"sha": "ec2855f826a46cc9a0a458f828da5e6d2c35a561", "filename": "src/librustc_plugin/registry.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc_plugin%2Fregistry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc_plugin%2Fregistry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_plugin%2Fregistry.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -6,7 +6,7 @@ use rustc::util::nodemap::FxHashMap;\n \n use syntax::ext::base::{SyntaxExtension, SyntaxExtensionKind, NamedSyntaxExtension};\n use syntax::ext::base::MacroExpanderFn;\n-use syntax::symbol::{Symbol, sym};\n+use syntax::symbol::Symbol;\n use syntax::ast;\n use syntax::feature_gate::AttributeType;\n use syntax_pos::Span;\n@@ -77,17 +77,14 @@ impl<'a> Registry<'a> {\n     ///\n     /// Returns empty slice in case the plugin was loaded\n     /// with `--extra-plugins`\n-    pub fn args<'b>(&'b self) -> &'b [ast::NestedMetaItem] {\n+    pub fn args(&self) -> &[ast::NestedMetaItem] {\n         self.args_hidden.as_ref().map(|v| &v[..]).unwrap_or(&[])\n     }\n \n     /// Register a syntax extension of any kind.\n     ///\n     /// This is the most general hook into `libsyntax`'s expansion behavior.\n     pub fn register_syntax_extension(&mut self, name: ast::Name, mut extension: SyntaxExtension) {\n-        if name == sym::macro_rules {\n-            panic!(\"user-defined macros may not be named `macro_rules`\");\n-        }\n         if extension.def_info.is_none() {\n             extension.def_info = Some((ast::CRATE_NODE_ID, self.krate_span));\n         }"}, {"sha": "339021f511afdfb2c23f58b3caae13669ee2198b", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -337,7 +337,7 @@ fn item_tables<'a, 'tcx>(\n     if tcx.has_typeck_tables(def_id) { tcx.typeck_tables_of(def_id) } else { empty_tables }\n }\n \n-fn min<'tcx>(vis1: ty::Visibility, vis2: ty::Visibility, tcx: TyCtxt<'tcx>) -> ty::Visibility {\n+fn min(vis1: ty::Visibility, vis2: ty::Visibility, tcx: TyCtxt<'_>) -> ty::Visibility {\n     if vis1.is_at_least(vis2, tcx) { vis2 } else { vis1 }\n }\n \n@@ -384,14 +384,14 @@ impl<'a, 'tcx, VL: VisibilityLike> DefIdVisitor<'tcx> for FindMin<'a, 'tcx, VL>\n trait VisibilityLike: Sized {\n     const MAX: Self;\n     const SHALLOW: bool = false;\n-    fn new_min<'a, 'tcx>(find: &FindMin<'a, 'tcx, Self>, def_id: DefId) -> Self;\n+    fn new_min(find: &FindMin<'_, '_, Self>, def_id: DefId) -> Self;\n \n     // Returns an over-approximation (`skip_assoc_tys` = true) of visibility due to\n     // associated types for which we can't determine visibility precisely.\n-    fn of_impl<'a, 'tcx>(\n+    fn of_impl(\n         hir_id: hir::HirId,\n-        tcx: TyCtxt<'tcx>,\n-        access_levels: &'a AccessLevels,\n+        tcx: TyCtxt<'_>,\n+        access_levels: &AccessLevels,\n     ) -> Self {\n         let mut find = FindMin { tcx, access_levels, min: Self::MAX };\n         let def_id = tcx.hir().local_def_id_from_hir_id(hir_id);\n@@ -404,7 +404,7 @@ trait VisibilityLike: Sized {\n }\n impl VisibilityLike for ty::Visibility {\n     const MAX: Self = ty::Visibility::Public;\n-    fn new_min<'a, 'tcx>(find: &FindMin<'a, 'tcx, Self>, def_id: DefId) -> Self {\n+    fn new_min(find: &FindMin<'_, '_, Self>, def_id: DefId) -> Self {\n         min(def_id_visibility(find.tcx, def_id).0, find.min, find.tcx)\n     }\n }\n@@ -420,7 +420,7 @@ impl VisibilityLike for Option<AccessLevel> {\n     // both \"shallow\" version of its self type and \"shallow\" version of its trait if it exists\n     // (which require reaching the `DefId`s in them).\n     const SHALLOW: bool = true;\n-    fn new_min<'a, 'tcx>(find: &FindMin<'a, 'tcx, Self>, def_id: DefId) -> Self {\n+    fn new_min(find: &FindMin<'_, '_, Self>, def_id: DefId) -> Self {\n         cmp::min(if let Some(hir_id) = find.tcx.hir().as_local_hir_id(def_id) {\n             find.access_levels.map.get(&hir_id).cloned()\n         } else {\n@@ -1828,7 +1828,7 @@ pub fn provide(providers: &mut Providers<'_>) {\n     };\n }\n \n-fn check_mod_privacy<'tcx>(tcx: TyCtxt<'tcx>, module_def_id: DefId) {\n+fn check_mod_privacy(tcx: TyCtxt<'_>, module_def_id: DefId) {\n     let empty_tables = ty::TypeckTables::empty(None);\n \n     // Check privacy of names not checked in previous compilation stages.\n@@ -1855,7 +1855,7 @@ fn check_mod_privacy<'tcx>(tcx: TyCtxt<'tcx>, module_def_id: DefId) {\n     intravisit::walk_mod(&mut visitor, module, hir_id);\n }\n \n-fn privacy_access_levels<'tcx>(tcx: TyCtxt<'tcx>, krate: CrateNum) -> &'tcx AccessLevels {\n+fn privacy_access_levels(tcx: TyCtxt<'_>, krate: CrateNum) -> &AccessLevels {\n     assert_eq!(krate, LOCAL_CRATE);\n \n     // Build up a set of all exported items in the AST. This is a set of all\n@@ -1879,7 +1879,7 @@ fn privacy_access_levels<'tcx>(tcx: TyCtxt<'tcx>, krate: CrateNum) -> &'tcx Acce\n     tcx.arena.alloc(visitor.access_levels)\n }\n \n-fn check_private_in_public<'tcx>(tcx: TyCtxt<'tcx>, krate: CrateNum) {\n+fn check_private_in_public(tcx: TyCtxt<'_>, krate: CrateNum) {\n     assert_eq!(krate, LOCAL_CRATE);\n \n     let access_levels = tcx.privacy_access_levels(LOCAL_CRATE);"}, {"sha": "05247600a4ded357993b0ee6d130917e7a927890", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -4,6 +4,7 @@\n \n #![feature(crate_visibility_modifier)]\n #![feature(label_break_value)]\n+#![feature(mem_take)]\n #![feature(nll)]\n #![feature(rustc_diagnostic_macros)]\n #![cfg_attr(bootstrap, feature(type_alias_enum_variants))]\n@@ -198,9 +199,9 @@ enum ResolutionError<'a> {\n ///\n /// This takes the error provided, combines it with the span and any additional spans inside the\n /// error and emits it.\n-fn resolve_error<'sess, 'a>(resolver: &'sess Resolver<'_>,\n-                            span: Span,\n-                            resolution_error: ResolutionError<'a>) {\n+fn resolve_error(resolver: &Resolver<'_>,\n+                 span: Span,\n+                 resolution_error: ResolutionError<'_>) {\n     resolve_struct_error(resolver, span, resolution_error).emit();\n }\n "}, {"sha": "d8d08107b826a7c649888bf8c8dde7faab76fad0", "filename": "src/librustc_resolve/macros.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc_resolve%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc_resolve%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fmacros.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -946,7 +946,7 @@ impl<'a> Resolver<'a> {\n         };\n \n         let macro_resolutions =\n-            mem::replace(&mut *module.multi_segment_macro_resolutions.borrow_mut(), Vec::new());\n+            mem::take(&mut *module.multi_segment_macro_resolutions.borrow_mut());\n         for (mut path, path_span, kind, parent_scope, initial_res) in macro_resolutions {\n             // FIXME: Path resolution will ICE if segment IDs present.\n             for seg in &mut path { seg.id = None; }\n@@ -973,7 +973,7 @@ impl<'a> Resolver<'a> {\n         }\n \n         let macro_resolutions =\n-            mem::replace(&mut *module.single_segment_macro_resolutions.borrow_mut(), Vec::new());\n+            mem::take(&mut *module.single_segment_macro_resolutions.borrow_mut());\n         for (ident, kind, parent_scope, initial_binding) in macro_resolutions {\n             match self.early_resolve_ident_in_lexical_scope(ident, ScopeSet::Macro(kind),\n                                                             &parent_scope, true, true, ident.span) {\n@@ -998,7 +998,7 @@ impl<'a> Resolver<'a> {\n             }\n         }\n \n-        let builtin_attrs = mem::replace(&mut *module.builtin_attrs.borrow_mut(), Vec::new());\n+        let builtin_attrs = mem::take(&mut *module.builtin_attrs.borrow_mut());\n         for (ident, parent_scope) in builtin_attrs {\n             let _ = self.early_resolve_ident_in_lexical_scope(\n                 ident, ScopeSet::Macro(MacroKind::Attr), &parent_scope, true, true, ident.span\n@@ -1109,9 +1109,6 @@ impl<'a> Resolver<'a> {\n                         current_legacy_scope: &mut LegacyScope<'a>) {\n         self.local_macro_def_scopes.insert(item.id, self.current_module);\n         let ident = item.ident;\n-        if ident.name == sym::macro_rules {\n-            self.session.span_err(item.span, \"user-defined macros may not be named `macro_rules`\");\n-        }\n \n         let def_id = self.definitions.local_def_id(item.id);\n         let ext = Lrc::new(macro_rules::compile(&self.session.parse_sess,"}, {"sha": "404d728d8808ce5cd54fe8e448a3ee86ea8924b2", "filename": "src/librustc_resolve/resolve_imports.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc_resolve%2Fresolve_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc_resolve%2Fresolve_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fresolve_imports.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -682,7 +682,7 @@ impl<'a, 'b> ImportResolver<'a, 'b> {\n         let mut prev_num_indeterminates = self.indeterminate_imports.len() + 1;\n         while self.indeterminate_imports.len() < prev_num_indeterminates {\n             prev_num_indeterminates = self.indeterminate_imports.len();\n-            for import in mem::replace(&mut self.indeterminate_imports, Vec::new()) {\n+            for import in mem::take(&mut self.indeterminate_imports) {\n                 match self.resolve_import(&import) {\n                     true => self.determined_imports.push(import),\n                     false => self.indeterminate_imports.push(import),"}, {"sha": "6e8eed0f907255072a714081506e4a7aeaddecb6", "filename": "src/librustc_traits/chalk_context/program_clauses/primitive.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc_traits%2Fchalk_context%2Fprogram_clauses%2Fprimitive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc_traits%2Fchalk_context%2Fprogram_clauses%2Fprimitive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Fchalk_context%2Fprogram_clauses%2Fprimitive.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -15,7 +15,7 @@ use crate::lowering::Lower;\n use crate::generic_types;\n use std::iter;\n \n-crate fn wf_clause_for_raw_ptr<'tcx>(tcx: TyCtxt<'tcx>, mutbl: hir::Mutability) -> Clauses<'tcx> {\n+crate fn wf_clause_for_raw_ptr(tcx: TyCtxt<'_>, mutbl: hir::Mutability) -> Clauses<'_> {\n     let ptr_ty = generic_types::raw_ptr(tcx, mutbl);\n \n     let wf_clause = ProgramClause {\n@@ -29,13 +29,13 @@ crate fn wf_clause_for_raw_ptr<'tcx>(tcx: TyCtxt<'tcx>, mutbl: hir::Mutability)\n     tcx.mk_clauses(iter::once(wf_clause))\n }\n \n-crate fn wf_clause_for_fn_ptr<'tcx>(\n-    tcx: TyCtxt<'tcx>,\n+crate fn wf_clause_for_fn_ptr(\n+    tcx: TyCtxt<'_>,\n     arity_and_output: usize,\n     variadic: bool,\n     unsafety: hir::Unsafety,\n     abi: abi::Abi,\n-) -> Clauses<'tcx> {\n+) -> Clauses<'_> {\n     let fn_ptr = generic_types::fn_ptr(tcx, arity_and_output, variadic, unsafety, abi);\n \n     let wf_clause = ProgramClause {\n@@ -50,7 +50,7 @@ crate fn wf_clause_for_fn_ptr<'tcx>(\n     tcx.mk_clauses(iter::once(wf_clause))\n }\n \n-crate fn wf_clause_for_slice<'tcx>(tcx: TyCtxt<'tcx>) -> Clauses<'tcx> {\n+crate fn wf_clause_for_slice(tcx: TyCtxt<'_>) -> Clauses<'_> {\n     let ty = generic_types::bound(tcx, 0);\n     let slice_ty = tcx.mk_slice(ty);\n \n@@ -111,7 +111,7 @@ crate fn wf_clause_for_array<'tcx>(\n     tcx.mk_clauses(iter::once(wf_clause))\n }\n \n-crate fn wf_clause_for_tuple<'tcx>(tcx: TyCtxt<'tcx>, arity: usize) -> Clauses<'tcx> {\n+crate fn wf_clause_for_tuple(tcx: TyCtxt<'_>, arity: usize) -> Clauses<'_> {\n     let type_list = generic_types::type_list(tcx, arity);\n     let tuple_ty = tcx.mk_ty(ty::Tuple(type_list));\n \n@@ -152,7 +152,7 @@ crate fn wf_clause_for_tuple<'tcx>(tcx: TyCtxt<'tcx>, arity: usize) -> Clauses<'\n     tcx.mk_clauses(iter::once(wf_clause))\n }\n \n-crate fn wf_clause_for_ref<'tcx>(tcx: TyCtxt<'tcx>, mutbl: hir::Mutability) -> Clauses<'tcx> {\n+crate fn wf_clause_for_ref(tcx: TyCtxt<'_>, mutbl: hir::Mutability) -> Clauses<'_> {\n     let region = tcx.mk_region(\n         ty::ReLateBound(ty::INNERMOST, ty::BoundRegion::BrAnon(0))\n     );\n@@ -176,7 +176,7 @@ crate fn wf_clause_for_ref<'tcx>(tcx: TyCtxt<'tcx>, mutbl: hir::Mutability) -> C\n     tcx.mk_clauses(iter::once(wf_clause))\n }\n \n-crate fn wf_clause_for_fn_def<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> Clauses<'tcx> {\n+crate fn wf_clause_for_fn_def(tcx: TyCtxt<'_>, def_id: DefId) -> Clauses<'_> {\n     let fn_def = generic_types::fn_def(tcx, def_id);\n \n     let wf_clause = ProgramClause {"}, {"sha": "ecd888b606981d10422cea7acad21d1092fce5d9", "filename": "src/librustc_traits/dropck_outlives.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc_traits%2Fdropck_outlives.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc_traits%2Fdropck_outlives.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Fdropck_outlives.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -279,10 +279,10 @@ fn dtorck_constraint_for_ty<'tcx>(\n }\n \n /// Calculates the dtorck constraint for a type.\n-crate fn adt_dtorck_constraint<'tcx>(\n-    tcx: TyCtxt<'tcx>,\n+crate fn adt_dtorck_constraint(\n+    tcx: TyCtxt<'_>,\n     def_id: DefId,\n-) -> Result<DtorckConstraint<'tcx>, NoSolution> {\n+) -> Result<DtorckConstraint<'_>, NoSolution> {\n     let def = tcx.adt_def(def_id);\n     let span = tcx.def_span(def_id);\n     debug!(\"dtorck_constraint: {:?}\", def);\n@@ -313,7 +313,7 @@ crate fn adt_dtorck_constraint<'tcx>(\n     Ok(result)\n }\n \n-fn dedup_dtorck_constraint<'tcx>(c: &mut DtorckConstraint<'tcx>) {\n+fn dedup_dtorck_constraint(c: &mut DtorckConstraint<'_>) {\n     let mut outlives = FxHashSet::default();\n     let mut dtorck_types = FxHashSet::default();\n "}, {"sha": "9ff685bb4ee8a8976c12cbe83666aea044edf0d0", "filename": "src/librustc_traits/lowering/environment.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc_traits%2Flowering%2Fenvironment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc_traits%2Flowering%2Fenvironment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Flowering%2Fenvironment.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -160,7 +160,7 @@ crate fn program_clauses_for_env<'tcx>(\n     );\n }\n \n-crate fn environment<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> Environment<'tcx> {\n+crate fn environment(tcx: TyCtxt<'_>, def_id: DefId) -> Environment<'_> {\n     use super::{Lower, IntoFromEnvGoal};\n     use rustc::hir::{Node, TraitItemKind, ImplItemKind, ItemKind, ForeignItemKind};\n "}, {"sha": "b0d9134c834d60dde61a541049fc048b85b736b6", "filename": "src/librustc_traits/lowering/mod.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc_traits%2Flowering%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc_traits%2Flowering%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Flowering%2Fmod.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -155,7 +155,7 @@ impl<'tcx> IntoWellFormedGoal for DomainGoal<'tcx> {\n     }\n }\n \n-crate fn program_clauses_for<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> Clauses<'tcx> {\n+crate fn program_clauses_for(tcx: TyCtxt<'_>, def_id: DefId) -> Clauses<'_> {\n     // FIXME(eddyb) this should only be using `def_kind`.\n     match tcx.def_key(def_id).disambiguated_data.data {\n         DefPathData::TypeNs(..) => match tcx.def_kind(def_id) {\n@@ -181,7 +181,7 @@ crate fn program_clauses_for<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> Clauses<\n     }\n }\n \n-fn program_clauses_for_trait<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> Clauses<'tcx> {\n+fn program_clauses_for_trait(tcx: TyCtxt<'_>, def_id: DefId) -> Clauses<'_> {\n     // `trait Trait<P1..Pn> where WC { .. } // P0 == Self`\n \n     // Rule Implemented-From-Env (see rustc guide)\n@@ -337,7 +337,7 @@ fn program_clauses_for_impl(tcx: TyCtxt<'tcx>, def_id: DefId) -> Clauses<'tcx> {\n     tcx.mk_clauses(iter::once(Clause::ForAll(ty::Binder::bind(clause))))\n }\n \n-pub fn program_clauses_for_type_def<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> Clauses<'tcx> {\n+pub fn program_clauses_for_type_def(tcx: TyCtxt<'_>, def_id: DefId) -> Clauses<'_> {\n     // Rule WellFormed-Type\n     //\n     // `struct Ty<P1..Pn> where WC1, ..., WCm`\n@@ -411,10 +411,10 @@ pub fn program_clauses_for_type_def<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> C\n     tcx.mk_clauses(iter::once(well_formed_clause).chain(from_env_clauses))\n }\n \n-pub fn program_clauses_for_associated_type_def<'tcx>(\n-    tcx: TyCtxt<'tcx>,\n+pub fn program_clauses_for_associated_type_def(\n+    tcx: TyCtxt<'_>,\n     item_id: DefId,\n-) -> Clauses<'tcx> {\n+) -> Clauses<'_> {\n     // Rule ProjectionEq-Placeholder\n     //\n     // ```\n@@ -549,10 +549,10 @@ pub fn program_clauses_for_associated_type_def<'tcx>(\n     tcx.mk_clauses(clauses)\n }\n \n-pub fn program_clauses_for_associated_type_value<'tcx>(\n-    tcx: TyCtxt<'tcx>,\n+pub fn program_clauses_for_associated_type_value(\n+    tcx: TyCtxt<'_>,\n     item_id: DefId,\n-) -> Clauses<'tcx> {\n+) -> Clauses<'_> {\n     // Rule Normalize-From-Impl (see rustc guide)\n     //\n     // ```\n@@ -611,7 +611,7 @@ pub fn program_clauses_for_associated_type_value<'tcx>(\n     tcx.mk_clauses(iter::once(normalize_clause))\n }\n \n-pub fn dump_program_clauses<'tcx>(tcx: TyCtxt<'tcx>) {\n+pub fn dump_program_clauses(tcx: TyCtxt<'_>) {\n     if !tcx.features().rustc_attrs {\n         return;\n     }"}, {"sha": "c4c4e10a14cc0ad1838b45c4e87534abcdcf7174", "filename": "src/librustc_typeck/check/dropck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc_typeck%2Fcheck%2Fdropck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc_typeck%2Fcheck%2Fdropck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fdropck.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -29,7 +29,7 @@ use syntax_pos::Span;\n ///    struct/enum definition for the nominal type itself (i.e.\n ///    cannot do `struct S<T>; impl<T:Clone> Drop for S<T> { ... }`).\n ///\n-pub fn check_drop_impl<'tcx>(tcx: TyCtxt<'tcx>, drop_impl_did: DefId) -> Result<(), ErrorReported> {\n+pub fn check_drop_impl(tcx: TyCtxt<'_>, drop_impl_did: DefId) -> Result<(), ErrorReported> {\n     let dtor_self_type = tcx.type_of(drop_impl_did);\n     let dtor_predicates = tcx.predicates_of(drop_impl_did);\n     match dtor_self_type.sty {"}, {"sha": "9b1a8913822092a002b957a7a97e509500c06a01", "filename": "src/librustc_typeck/check/intrinsic.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -79,7 +79,7 @@ pub fn intrisic_operation_unsafety(intrinsic: &str) -> hir::Unsafety {\n \n /// Remember to add all intrinsics here, in librustc_codegen_llvm/intrinsic.rs,\n /// and in libcore/intrinsics.rs\n-pub fn check_intrinsic_type<'tcx>(tcx: TyCtxt<'tcx>, it: &hir::ForeignItem) {\n+pub fn check_intrinsic_type(tcx: TyCtxt<'_>, it: &hir::ForeignItem) {\n     let param = |n| tcx.mk_ty_param(n, InternedString::intern(&format!(\"P{}\", n)));\n     let name = it.ident.as_str();\n \n@@ -385,7 +385,7 @@ pub fn check_intrinsic_type<'tcx>(tcx: TyCtxt<'tcx>, it: &hir::ForeignItem) {\n }\n \n /// Type-check `extern \"platform-intrinsic\" { ... }` functions.\n-pub fn check_platform_intrinsic_type<'tcx>(tcx: TyCtxt<'tcx>, it: &hir::ForeignItem) {\n+pub fn check_platform_intrinsic_type(tcx: TyCtxt<'_>, it: &hir::ForeignItem) {\n     let param = |n| {\n         let name = InternedString::intern(&format!(\"P{}\", n));\n         tcx.mk_ty_param(n, name)"}, {"sha": "bd4cf9d208684de104e9da519c6a97502a7eb58b", "filename": "src/librustc_typeck/check/method/probe.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -970,9 +970,9 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n \n         debug!(\"pick: actual search failed, assemble diagnotics\");\n \n-        let static_candidates = mem::replace(&mut self.static_candidates, vec![]);\n+        let static_candidates = mem::take(&mut self.static_candidates);\n         let private_candidate = self.private_candidate.take();\n-        let unsatisfied_predicates = mem::replace(&mut self.unsatisfied_predicates, vec![]);\n+        let unsatisfied_predicates = mem::take(&mut self.unsatisfied_predicates);\n \n         // things failed, so lets look at all traits, for diagnostic purposes now:\n         self.reset();"}, {"sha": "be00a6efe55edeeacde981b6bf26891b1897c0ff", "filename": "src/librustc_typeck/check/method/suggest.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -775,12 +775,12 @@ impl Ord for TraitInfo {\n }\n \n /// Retrieves all traits in this crate and any dependent crates.\n-pub fn all_traits<'tcx>(tcx: TyCtxt<'tcx>) -> Vec<TraitInfo> {\n+pub fn all_traits(tcx: TyCtxt<'_>) -> Vec<TraitInfo> {\n     tcx.all_traits(LOCAL_CRATE).iter().map(|&def_id| TraitInfo { def_id }).collect()\n }\n \n /// Computes all traits in this crate and any dependent crates.\n-fn compute_all_traits<'tcx>(tcx: TyCtxt<'tcx>) -> Vec<DefId> {\n+fn compute_all_traits(tcx: TyCtxt<'_>) -> Vec<DefId> {\n     use hir::itemlikevisit;\n \n     let mut traits = vec![];"}, {"sha": "fb7d681a72da7cf286e7f2c82f642a1ec1d6d103", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 25, "deletions": 25, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -698,31 +698,31 @@ impl ItemLikeVisitor<'tcx> for CheckItemTypesVisitor<'tcx> {\n     fn visit_impl_item(&mut self, _: &'tcx hir::ImplItem) { }\n }\n \n-pub fn check_wf_new<'tcx>(tcx: TyCtxt<'tcx>) {\n+pub fn check_wf_new(tcx: TyCtxt<'_>) {\n     let mut visit = wfcheck::CheckTypeWellFormedVisitor::new(tcx);\n     tcx.hir().krate().par_visit_all_item_likes(&mut visit);\n }\n \n-fn check_mod_item_types<'tcx>(tcx: TyCtxt<'tcx>, module_def_id: DefId) {\n+fn check_mod_item_types(tcx: TyCtxt<'_>, module_def_id: DefId) {\n     tcx.hir().visit_item_likes_in_module(module_def_id, &mut CheckItemTypesVisitor { tcx });\n }\n \n-fn typeck_item_bodies<'tcx>(tcx: TyCtxt<'tcx>, crate_num: CrateNum) {\n+fn typeck_item_bodies(tcx: TyCtxt<'_>, crate_num: CrateNum) {\n     debug_assert!(crate_num == LOCAL_CRATE);\n     tcx.par_body_owners(|body_owner_def_id| {\n         tcx.ensure().typeck_tables_of(body_owner_def_id);\n     });\n }\n \n-fn check_item_well_formed<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) {\n+fn check_item_well_formed(tcx: TyCtxt<'_>, def_id: DefId) {\n     wfcheck::check_item_well_formed(tcx, def_id);\n }\n \n-fn check_trait_item_well_formed<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) {\n+fn check_trait_item_well_formed(tcx: TyCtxt<'_>, def_id: DefId) {\n     wfcheck::check_trait_item(tcx, def_id);\n }\n \n-fn check_impl_item_well_formed<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) {\n+fn check_impl_item_well_formed(tcx: TyCtxt<'_>, def_id: DefId) {\n     wfcheck::check_impl_item(tcx, def_id);\n }\n \n@@ -742,7 +742,7 @@ pub fn provide(providers: &mut Providers<'_>) {\n     };\n }\n \n-fn adt_destructor<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> Option<ty::Destructor> {\n+fn adt_destructor(tcx: TyCtxt<'_>, def_id: DefId) -> Option<ty::Destructor> {\n     tcx.calculate_dtor(def_id, &mut dropck::check_drop_impl)\n }\n \n@@ -755,10 +755,10 @@ fn adt_destructor<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> Option<ty::Destruct\n /// may not succeed. In some cases where this function returns `None`\n /// (notably closures), `typeck_tables(def_id)` would wind up\n /// redirecting to the owning function.\n-fn primary_body_of<'tcx>(\n-    tcx: TyCtxt<'tcx>,\n+fn primary_body_of(\n+    tcx: TyCtxt<'_>,\n     id: hir::HirId,\n-) -> Option<(hir::BodyId, Option<&'tcx hir::FnDecl>)> {\n+) -> Option<(hir::BodyId, Option<&hir::FnDecl>)> {\n     match tcx.hir().get(id) {\n         Node::Item(item) => {\n             match item.node {\n@@ -796,7 +796,7 @@ fn primary_body_of<'tcx>(\n     }\n }\n \n-fn has_typeck_tables<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> bool {\n+fn has_typeck_tables(tcx: TyCtxt<'_>, def_id: DefId) -> bool {\n     // Closures' tables come from their outermost function,\n     // as they are part of the same \"inference environment\".\n     let outer_def_id = tcx.closure_base_def_id(def_id);\n@@ -808,11 +808,11 @@ fn has_typeck_tables<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> bool {\n     primary_body_of(tcx, id).is_some()\n }\n \n-fn used_trait_imports<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> &'tcx DefIdSet {\n+fn used_trait_imports(tcx: TyCtxt<'_>, def_id: DefId) -> &DefIdSet {\n     &*tcx.typeck_tables_of(def_id).used_trait_imports\n }\n \n-fn typeck_tables_of<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> &'tcx ty::TypeckTables<'tcx> {\n+fn typeck_tables_of(tcx: TyCtxt<'_>, def_id: DefId) -> &ty::TypeckTables<'_> {\n     // Closures' tables come from their outermost function,\n     // as they are part of the same \"inference environment\".\n     let outer_def_id = tcx.closure_base_def_id(def_id);\n@@ -913,7 +913,7 @@ fn typeck_tables_of<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> &'tcx ty::TypeckT\n     tables\n }\n \n-fn check_abi<'tcx>(tcx: TyCtxt<'tcx>, span: Span, abi: Abi) {\n+fn check_abi(tcx: TyCtxt<'_>, span: Span, abi: Abi) {\n     if !tcx.sess.target.target.is_abi_supported(abi) {\n         struct_span_err!(tcx.sess, span, E0570,\n             \"The ABI `{}` is not supported for the current target\", abi).emit()\n@@ -1291,7 +1291,7 @@ fn check_fn<'a, 'tcx>(\n     (fcx, gen_ty)\n }\n \n-fn check_struct<'tcx>(tcx: TyCtxt<'tcx>, id: hir::HirId, span: Span) {\n+fn check_struct(tcx: TyCtxt<'_>, id: hir::HirId, span: Span) {\n     let def_id = tcx.hir().local_def_id_from_hir_id(id);\n     let def = tcx.adt_def(def_id);\n     def.destructor(tcx); // force the destructor to be evaluated\n@@ -1305,7 +1305,7 @@ fn check_struct<'tcx>(tcx: TyCtxt<'tcx>, id: hir::HirId, span: Span) {\n     check_packed(tcx, span, def_id);\n }\n \n-fn check_union<'tcx>(tcx: TyCtxt<'tcx>, id: hir::HirId, span: Span) {\n+fn check_union(tcx: TyCtxt<'_>, id: hir::HirId, span: Span) {\n     let def_id = tcx.hir().local_def_id_from_hir_id(id);\n     let def = tcx.adt_def(def_id);\n     def.destructor(tcx); // force the destructor to be evaluated\n@@ -1467,14 +1467,14 @@ fn maybe_check_static_with_link_section(tcx: TyCtxt<'_>, id: DefId, span: Span)\n     }\n }\n \n-fn check_on_unimplemented<'tcx>(tcx: TyCtxt<'tcx>, trait_def_id: DefId, item: &hir::Item) {\n+fn check_on_unimplemented(tcx: TyCtxt<'_>, trait_def_id: DefId, item: &hir::Item) {\n     let item_def_id = tcx.hir().local_def_id_from_hir_id(item.hir_id);\n     // an error would be reported if this fails.\n     let _ = traits::OnUnimplementedDirective::of_item(tcx, trait_def_id, item_def_id);\n }\n \n-fn report_forbidden_specialization<'tcx>(\n-    tcx: TyCtxt<'tcx>,\n+fn report_forbidden_specialization(\n+    tcx: TyCtxt<'_>,\n     impl_item: &hir::ImplItem,\n     parent_impl: DefId,\n ) {\n@@ -1690,7 +1690,7 @@ fn check_impl_items_against_trait<'tcx>(\n /// Checks whether a type can be represented in memory. In particular, it\n /// identifies types that contain themselves without indirection through a\n /// pointer, which would mean their size is unbounded.\n-fn check_representable<'tcx>(tcx: TyCtxt<'tcx>, sp: Span, item_def_id: DefId) -> bool {\n+fn check_representable(tcx: TyCtxt<'_>, sp: Span, item_def_id: DefId) -> bool {\n     let rty = tcx.type_of(item_def_id);\n \n     // Check that it is possible to represent this type. This call identifies\n@@ -1712,7 +1712,7 @@ fn check_representable<'tcx>(tcx: TyCtxt<'tcx>, sp: Span, item_def_id: DefId) ->\n     return true;\n }\n \n-pub fn check_simd<'tcx>(tcx: TyCtxt<'tcx>, sp: Span, def_id: DefId) {\n+pub fn check_simd(tcx: TyCtxt<'_>, sp: Span, def_id: DefId) {\n     let t = tcx.type_of(def_id);\n     if let ty::Adt(def, substs) = t.sty {\n         if def.is_struct() {\n@@ -1741,7 +1741,7 @@ pub fn check_simd<'tcx>(tcx: TyCtxt<'tcx>, sp: Span, def_id: DefId) {\n     }\n }\n \n-fn check_packed<'tcx>(tcx: TyCtxt<'tcx>, sp: Span, def_id: DefId) {\n+fn check_packed(tcx: TyCtxt<'_>, sp: Span, def_id: DefId) {\n     let repr = tcx.adt_def(def_id).repr;\n     if repr.packed() {\n         for attr in tcx.get_attrs(def_id).iter() {\n@@ -1765,7 +1765,7 @@ fn check_packed<'tcx>(tcx: TyCtxt<'tcx>, sp: Span, def_id: DefId) {\n     }\n }\n \n-fn check_packed_inner<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId, stack: &mut Vec<DefId>) -> bool {\n+fn check_packed_inner(tcx: TyCtxt<'_>, def_id: DefId, stack: &mut Vec<DefId>) -> bool {\n     let t = tcx.type_of(def_id);\n     if stack.contains(&def_id) {\n         debug!(\"check_packed_inner: {:?} is recursive\", t);\n@@ -1839,7 +1839,7 @@ fn bad_non_zero_sized_fields<'tcx>(\n     err.emit();\n }\n \n-fn check_transparent<'tcx>(tcx: TyCtxt<'tcx>, sp: Span, def_id: DefId) {\n+fn check_transparent(tcx: TyCtxt<'_>, sp: Span, def_id: DefId) {\n     let adt = tcx.adt_def(def_id);\n     if !adt.repr.transparent() {\n         return;\n@@ -1988,7 +1988,7 @@ pub fn check_enum<'tcx>(tcx: TyCtxt<'tcx>, sp: Span, vs: &'tcx [hir::Variant], i\n     check_transparent(tcx, sp, def_id);\n }\n \n-fn report_unexpected_variant_res<'tcx>(tcx: TyCtxt<'tcx>, res: Res, span: Span, qpath: &QPath) {\n+fn report_unexpected_variant_res(tcx: TyCtxt<'_>, res: Res, span: Span, qpath: &QPath) {\n     span_err!(tcx.sess, span, E0533,\n               \"expected unit struct/variant or constant, found {} `{}`\",\n               res.descr(),"}, {"sha": "3aa144ca35282ad1e5a0f99e70da5e1e280a858a", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 17, "deletions": 15, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -68,7 +68,7 @@ impl<'tcx> CheckWfFcxBuilder<'tcx> {\n /// We do this check as a pre-pass before checking fn bodies because if these constraints are\n /// not included it frequently leads to confusing errors in fn bodies. So it's better to check\n /// the types first.\n-pub fn check_item_well_formed<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) {\n+pub fn check_item_well_formed(tcx: TyCtxt<'_>, def_id: DefId) {\n     let hir_id = tcx.hir().as_local_hir_id(def_id).unwrap();\n     let item = tcx.hir().expect_item(hir_id);\n \n@@ -156,7 +156,7 @@ pub fn check_item_well_formed<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) {\n     }\n }\n \n-pub fn check_trait_item<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) {\n+pub fn check_trait_item(tcx: TyCtxt<'_>, def_id: DefId) {\n     let hir_id = tcx.hir().as_local_hir_id(def_id).unwrap();\n     let trait_item = tcx.hir().expect_trait_item(hir_id);\n \n@@ -167,7 +167,7 @@ pub fn check_trait_item<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) {\n     check_associated_item(tcx, trait_item.hir_id, trait_item.span, method_sig);\n }\n \n-pub fn check_impl_item<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) {\n+pub fn check_impl_item(tcx: TyCtxt<'_>, def_id: DefId) {\n     let hir_id = tcx.hir().as_local_hir_id(def_id).unwrap();\n     let impl_item = tcx.hir().expect_impl_item(hir_id);\n \n@@ -178,8 +178,8 @@ pub fn check_impl_item<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) {\n     check_associated_item(tcx, impl_item.hir_id, impl_item.span, method_sig);\n }\n \n-fn check_associated_item<'tcx>(\n-    tcx: TyCtxt<'tcx>,\n+fn check_associated_item(\n+    tcx: TyCtxt<'_>,\n     item_id: hir::HirId,\n     span: Span,\n     sig_if_method: Option<&hir::MethodSig>,\n@@ -231,7 +231,7 @@ fn for_item<'tcx>(tcx: TyCtxt<'tcx>, item: &hir::Item) -> CheckWfFcxBuilder<'tcx\n     for_id(tcx, item.hir_id, item.span)\n }\n \n-fn for_id<'tcx>(tcx: TyCtxt<'tcx>, id: hir::HirId, span: Span) -> CheckWfFcxBuilder<'tcx> {\n+fn for_id(tcx: TyCtxt<'_>, id: hir::HirId, span: Span) -> CheckWfFcxBuilder<'_> {\n     let def_id = tcx.hir().local_def_id_from_hir_id(id);\n     CheckWfFcxBuilder {\n         inherited: Inherited::build(tcx, def_id),\n@@ -317,7 +317,7 @@ fn check_type_defn<'tcx, F>(\n     });\n }\n \n-fn check_trait<'tcx>(tcx: TyCtxt<'tcx>, item: &hir::Item) {\n+fn check_trait(tcx: TyCtxt<'_>, item: &hir::Item) {\n     debug!(\"check_trait: {:?}\", item.hir_id);\n \n     let trait_def_id = tcx.hir().local_def_id_from_hir_id(item.hir_id);\n@@ -340,7 +340,7 @@ fn check_trait<'tcx>(tcx: TyCtxt<'tcx>, item: &hir::Item) {\n     });\n }\n \n-fn check_item_fn<'tcx>(tcx: TyCtxt<'tcx>, item: &hir::Item) {\n+fn check_item_fn(tcx: TyCtxt<'_>, item: &hir::Item) {\n     for_item(tcx, item).with_fcx(|fcx, tcx| {\n         let def_id = fcx.tcx.hir().local_def_id_from_hir_id(item.hir_id);\n         let sig = fcx.tcx.fn_sig(def_id);\n@@ -352,8 +352,8 @@ fn check_item_fn<'tcx>(tcx: TyCtxt<'tcx>, item: &hir::Item) {\n     })\n }\n \n-fn check_item_type<'tcx>(\n-    tcx: TyCtxt<'tcx>,\n+fn check_item_type(\n+    tcx: TyCtxt<'_>,\n     item_id: hir::HirId,\n     ty_span: Span,\n     allow_foreign_ty: bool,\n@@ -980,7 +980,7 @@ fn check_variances_for_type_defn<'tcx>(\n     }\n }\n \n-fn report_bivariance<'tcx>(tcx: TyCtxt<'tcx>, span: Span, param_name: ast::Name) {\n+fn report_bivariance(tcx: TyCtxt<'_>, span: Span, param_name: ast::Name) {\n     let mut err = error_392(tcx, span, param_name);\n \n     let suggested_marker_id = tcx.lang_items().phantom_data();\n@@ -1023,7 +1023,7 @@ fn reject_shadowing_parameters(tcx: TyCtxt<'_>, def_id: DefId) {\n \n /// Feature gates RFC 2056 -- trivial bounds, checking for global bounds that\n /// aren't true.\n-fn check_false_global_bounds<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>, span: Span, id: hir::HirId) {\n+fn check_false_global_bounds(fcx: &FnCtxt<'_, '_>, span: Span, id: hir::HirId) {\n     let empty_env = ty::ParamEnv::empty();\n \n     let def_id = fcx.tcx.hir().local_def_id_from_hir_id(id);\n@@ -1104,6 +1104,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             let field_ty = self.tcx.type_of(self.tcx.hir().local_def_id_from_hir_id(field.hir_id));\n             let field_ty = self.normalize_associated_types_in(field.span,\n                                                               &field_ty);\n+            let field_ty = self.resolve_vars_if_possible(&field_ty);\n+            debug!(\"non_enum_variant: type of field {:?} is {:?}\", field, field_ty);\n             AdtField { ty: field_ty, span: field.span }\n         })\n         .collect();\n@@ -1135,11 +1137,11 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     }\n }\n \n-fn error_392<'tcx>(\n-    tcx: TyCtxt<'tcx>,\n+fn error_392(\n+    tcx: TyCtxt<'_>,\n     span: Span,\n     param_name: ast::Name,\n-) -> DiagnosticBuilder<'tcx> {\n+) -> DiagnosticBuilder<'_> {\n     let mut err = struct_span_err!(tcx.sess, span, E0392,\n                   \"parameter `{}` is never used\", param_name);\n     err.span_label(span, \"unused parameter\");"}, {"sha": "8614de1977085f3f3a2993a10a450e76115f1901", "filename": "src/librustc_typeck/check_unused.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc_typeck%2Fcheck_unused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc_typeck%2Fcheck_unused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck_unused.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -13,7 +13,7 @@ use rustc::util::nodemap::DefIdSet;\n \n use rustc_data_structures::fx::FxHashMap;\n \n-pub fn check_crate<'tcx>(tcx: TyCtxt<'tcx>) {\n+pub fn check_crate(tcx: TyCtxt<'_>) {\n     let mut used_trait_imports = DefIdSet::default();\n     for &body_id in tcx.hir().krate().bodies.keys() {\n         let item_def_id = tcx.hir().body_owner_def_id(body_id);\n@@ -70,7 +70,7 @@ impl CheckVisitor<'tcx> {\n     }\n }\n \n-fn unused_crates_lint<'tcx>(tcx: TyCtxt<'tcx>) {\n+fn unused_crates_lint(tcx: TyCtxt<'_>) {\n     let lint = lint::builtin::UNUSED_EXTERN_CRATES;\n \n     // Collect first the crates that are completely unused.  These we"}, {"sha": "68bdcbfe3fd952a893144d137b96535be91b13ca", "filename": "src/librustc_typeck/coherence/builtin.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc_typeck%2Fcoherence%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc_typeck%2Fcoherence%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Fbuiltin.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -17,7 +17,7 @@ use rustc::hir::def_id::DefId;\n use hir::Node;\n use rustc::hir::{self, ItemKind};\n \n-pub fn check_trait<'tcx>(tcx: TyCtxt<'tcx>, trait_def_id: DefId) {\n+pub fn check_trait(tcx: TyCtxt<'_>, trait_def_id: DefId) {\n     Checker { tcx, trait_def_id }\n         .check(tcx.lang_items().drop_trait(), visit_implementation_of_drop)\n         .check(tcx.lang_items().copy_trait(), visit_implementation_of_copy)\n@@ -46,7 +46,7 @@ impl<'tcx> Checker<'tcx> {\n     }\n }\n \n-fn visit_implementation_of_drop<'tcx>(tcx: TyCtxt<'tcx>, impl_did: DefId) {\n+fn visit_implementation_of_drop(tcx: TyCtxt<'_>, impl_did: DefId) {\n     if let ty::Adt(..) = tcx.type_of(impl_did).sty {\n         /* do nothing */\n     } else {\n@@ -74,7 +74,7 @@ fn visit_implementation_of_drop<'tcx>(tcx: TyCtxt<'tcx>, impl_did: DefId) {\n     }\n }\n \n-fn visit_implementation_of_copy<'tcx>(tcx: TyCtxt<'tcx>, impl_did: DefId) {\n+fn visit_implementation_of_copy(tcx: TyCtxt<'_>, impl_did: DefId) {\n     debug!(\"visit_implementation_of_copy: impl_did={:?}\", impl_did);\n \n     let impl_hir_id = if let Some(n) = tcx.hir().as_local_hir_id(impl_did) {\n@@ -154,7 +154,7 @@ fn visit_implementation_of_coerce_unsized(tcx: TyCtxt<'tcx>, impl_did: DefId) {\n     }\n }\n \n-fn visit_implementation_of_dispatch_from_dyn<'tcx>(tcx: TyCtxt<'tcx>, impl_did: DefId) {\n+fn visit_implementation_of_dispatch_from_dyn(tcx: TyCtxt<'_>, impl_did: DefId) {\n     debug!(\"visit_implementation_of_dispatch_from_dyn: impl_did={:?}\",\n            impl_did);\n     if impl_did.is_local() {"}, {"sha": "9efe1273ac04489400768b1f3461b4263a47fe06", "filename": "src/librustc_typeck/coherence/inherent_impls.rs", "status": "modified", "additions": 8, "deletions": 33, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc_typeck%2Fcoherence%2Finherent_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc_typeck%2Fcoherence%2Finherent_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Finherent_impls.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -7,7 +7,6 @@\n //! `tcx.inherent_impls(def_id)`). That value, however,\n //! is computed by selecting an idea from this table.\n \n-use rustc::dep_graph::DepKind;\n use rustc::hir::def_id::{CrateNum, DefId, LOCAL_CRATE};\n use rustc::hir;\n use rustc::hir::itemlikevisit::ItemLikeVisitor;\n@@ -17,10 +16,10 @@ use syntax::ast;\n use syntax_pos::Span;\n \n /// On-demand query: yields a map containing all types mapped to their inherent impls.\n-pub fn crate_inherent_impls<'tcx>(\n-    tcx: TyCtxt<'tcx>,\n+pub fn crate_inherent_impls(\n+    tcx: TyCtxt<'_>,\n     crate_num: CrateNum,\n-) -> &'tcx CrateInherentImpls {\n+) -> &CrateInherentImpls {\n     assert_eq!(crate_num, LOCAL_CRATE);\n \n     let krate = tcx.hir().krate();\n@@ -33,38 +32,14 @@ pub fn crate_inherent_impls<'tcx>(\n }\n \n /// On-demand query: yields a vector of the inherent impls for a specific type.\n-pub fn inherent_impls<'tcx>(tcx: TyCtxt<'tcx>, ty_def_id: DefId) -> &'tcx [DefId] {\n+pub fn inherent_impls(tcx: TyCtxt<'_>, ty_def_id: DefId) -> &[DefId] {\n     assert!(ty_def_id.is_local());\n \n-    // NB. Until we adopt the red-green dep-tracking algorithm (see\n-    // [the plan] for details on that), we do some hackery here to get\n-    // the dependencies correct.  Basically, we use a `with_ignore` to\n-    // read the result we want. If we didn't have the `with_ignore`,\n-    // we would wind up with a dependency on the entire crate, which\n-    // we don't want. Then we go and add dependencies on all the impls\n-    // in the result (which is what we wanted).\n-    //\n-    // The result is a graph with an edge from `Hir(I)` for every impl\n-    // `I` defined on some type `T` to `CoherentInherentImpls(T)`,\n-    // thus ensuring that if any of those impls change, the set of\n-    // inherent impls is considered dirty.\n-    //\n-    // [the plan]: https://github.com/rust-lang/rust-roadmap/issues/4\n-\n-    let result = tcx.dep_graph.with_ignore(|| {\n-        let crate_map = tcx.crate_inherent_impls(ty_def_id.krate);\n-        match crate_map.inherent_impls.get(&ty_def_id) {\n-            Some(v) => &v[..],\n-            None => &[],\n-        }\n-    });\n-\n-    for &impl_def_id in &result[..] {\n-        let def_path_hash = tcx.def_path_hash(impl_def_id);\n-        tcx.dep_graph.read(def_path_hash.to_dep_node(DepKind::Hir));\n+    let crate_map = tcx.crate_inherent_impls(ty_def_id.krate);\n+    match crate_map.inherent_impls.get(&ty_def_id) {\n+        Some(v) => &v[..],\n+        None => &[],\n     }\n-\n-    result\n }\n \n struct InherentCollect<'tcx> {"}, {"sha": "1785304fb1d487449d81a3bee7d0594824c35295", "filename": "src/librustc_typeck/coherence/inherent_impls_overlap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc_typeck%2Fcoherence%2Finherent_impls_overlap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc_typeck%2Fcoherence%2Finherent_impls_overlap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Finherent_impls_overlap.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -5,7 +5,7 @@ use rustc::hir::itemlikevisit::ItemLikeVisitor;\n use rustc::traits::{self, IntercrateMode};\n use rustc::ty::TyCtxt;\n \n-pub fn crate_inherent_impls_overlap_check<'tcx>(tcx: TyCtxt<'tcx>, crate_num: CrateNum) {\n+pub fn crate_inherent_impls_overlap_check(tcx: TyCtxt<'_>, crate_num: CrateNum) {\n     assert_eq!(crate_num, LOCAL_CRATE);\n     let krate = tcx.hir().krate();\n     krate.visit_all_item_likes(&mut InherentOverlapChecker { tcx });"}, {"sha": "9b9789139b70f14c327ba51675c5d07184696f99", "filename": "src/librustc_typeck/coherence/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -18,7 +18,7 @@ mod inherent_impls_overlap;\n mod orphan;\n mod unsafety;\n \n-fn check_impl<'tcx>(tcx: TyCtxt<'tcx>, hir_id: HirId) {\n+fn check_impl(tcx: TyCtxt<'_>, hir_id: HirId) {\n     let impl_def_id = tcx.hir().local_def_id_from_hir_id(hir_id);\n \n     // If there are no traits, then this implementation must have a\n@@ -124,7 +124,7 @@ pub fn provide(providers: &mut Providers<'_>) {\n     };\n }\n \n-fn coherent_trait<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) {\n+fn coherent_trait(tcx: TyCtxt<'_>, def_id: DefId) {\n     let impls = tcx.hir().trait_impls(def_id);\n     for &impl_id in impls {\n         check_impl(tcx, impl_id);\n@@ -135,7 +135,7 @@ fn coherent_trait<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) {\n     builtin::check_trait(tcx, def_id);\n }\n \n-pub fn check_coherence<'tcx>(tcx: TyCtxt<'tcx>) {\n+pub fn check_coherence(tcx: TyCtxt<'_>) {\n     for &trait_def_id in tcx.hir().krate().trait_impls.keys() {\n         tcx.ensure().coherent_trait(trait_def_id);\n     }\n@@ -151,7 +151,7 @@ pub fn check_coherence<'tcx>(tcx: TyCtxt<'tcx>) {\n /// Overlap: no two impls for the same trait are implemented for the\n /// same type. Likewise, no two inherent impls for a given type\n /// constructor provide a method with the same name.\n-fn check_impl_overlap<'tcx>(tcx: TyCtxt<'tcx>, hir_id: HirId) {\n+fn check_impl_overlap(tcx: TyCtxt<'_>, hir_id: HirId) {\n     let impl_def_id = tcx.hir().local_def_id_from_hir_id(hir_id);\n     let trait_ref = tcx.impl_trait_ref(impl_def_id).unwrap();\n     let trait_def_id = trait_ref.def_id;"}, {"sha": "2d0faecd8ee71dbb8d3b94c3b71bbf96341665aa", "filename": "src/librustc_typeck/coherence/orphan.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc_typeck%2Fcoherence%2Forphan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc_typeck%2Fcoherence%2Forphan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Forphan.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -6,7 +6,7 @@ use rustc::ty::{self, TyCtxt};\n use rustc::hir::itemlikevisit::ItemLikeVisitor;\n use rustc::hir;\n \n-pub fn check<'tcx>(tcx: TyCtxt<'tcx>) {\n+pub fn check(tcx: TyCtxt<'_>) {\n     let mut orphan = OrphanChecker { tcx };\n     tcx.hir().krate().visit_all_item_likes(&mut orphan);\n }"}, {"sha": "123d7c6123b89a0a11db04471e64d576ad304734", "filename": "src/librustc_typeck/coherence/unsafety.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc_typeck%2Fcoherence%2Funsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc_typeck%2Fcoherence%2Funsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Funsafety.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -5,7 +5,7 @@ use rustc::ty::TyCtxt;\n use rustc::hir::itemlikevisit::ItemLikeVisitor;\n use rustc::hir::{self, Unsafety};\n \n-pub fn check<'tcx>(tcx: TyCtxt<'tcx>) {\n+pub fn check(tcx: TyCtxt<'_>) {\n     let mut unsafety = UnsafetyChecker { tcx };\n     tcx.hir().krate().visit_all_item_likes(&mut unsafety);\n }"}, {"sha": "e5802179ec479328d0847313c37bc6f7a7ad174a", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 35, "deletions": 35, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -56,7 +56,7 @@ struct OnlySelfBounds(bool);\n ///////////////////////////////////////////////////////////////////////////\n // Main entry point\n \n-fn collect_mod_item_types<'tcx>(tcx: TyCtxt<'tcx>, module_def_id: DefId) {\n+fn collect_mod_item_types(tcx: TyCtxt<'_>, module_def_id: DefId) {\n     tcx.hir().visit_item_likes_in_module(\n         module_def_id,\n         &mut CollectItemTypesVisitor { tcx }.as_deep_visitor()\n@@ -253,10 +253,10 @@ impl AstConv<'tcx> for ItemCtxt<'tcx> {\n     }\n }\n \n-fn type_param_predicates<'tcx>(\n-    tcx: TyCtxt<'tcx>,\n+fn type_param_predicates(\n+    tcx: TyCtxt<'_>,\n     (item_def_id, def_id): (DefId, DefId),\n-) -> &'tcx ty::GenericPredicates<'tcx> {\n+) -> &ty::GenericPredicates<'_> {\n     use rustc::hir::*;\n \n     // In the AST, bounds can derive from two places. Either\n@@ -381,7 +381,7 @@ impl ItemCtxt<'tcx> {\n /// parameter with ID `param_id`. We use this so as to avoid running\n /// `ast_ty_to_ty`, because we want to avoid triggering an all-out\n /// conversion of the type to avoid inducing unnecessary cycles.\n-fn is_param<'tcx>(tcx: TyCtxt<'tcx>, ast_ty: &hir::Ty, param_id: hir::HirId) -> bool {\n+fn is_param(tcx: TyCtxt<'_>, ast_ty: &hir::Ty, param_id: hir::HirId) -> bool {\n     if let hir::TyKind::Path(hir::QPath::Resolved(None, ref path)) = ast_ty.node {\n         match path.res {\n             Res::SelfTy(Some(def_id), None) | Res::Def(DefKind::TyParam, def_id) => {\n@@ -394,7 +394,7 @@ fn is_param<'tcx>(tcx: TyCtxt<'tcx>, ast_ty: &hir::Ty, param_id: hir::HirId) ->\n     }\n }\n \n-fn convert_item<'tcx>(tcx: TyCtxt<'tcx>, item_id: hir::HirId) {\n+fn convert_item(tcx: TyCtxt<'_>, item_id: hir::HirId) {\n     let it = tcx.hir().expect_item(item_id);\n     debug!(\"convert: item {} with id {}\", it.ident, it.hir_id);\n     let def_id = tcx.hir().local_def_id_from_hir_id(item_id);\n@@ -476,7 +476,7 @@ fn convert_item<'tcx>(tcx: TyCtxt<'tcx>, item_id: hir::HirId) {\n     }\n }\n \n-fn convert_trait_item<'tcx>(tcx: TyCtxt<'tcx>, trait_item_id: hir::HirId) {\n+fn convert_trait_item(tcx: TyCtxt<'_>, trait_item_id: hir::HirId) {\n     let trait_item = tcx.hir().expect_trait_item(trait_item_id);\n     let def_id = tcx.hir().local_def_id_from_hir_id(trait_item.hir_id);\n     tcx.generics_of(def_id);\n@@ -497,7 +497,7 @@ fn convert_trait_item<'tcx>(tcx: TyCtxt<'tcx>, trait_item_id: hir::HirId) {\n     tcx.predicates_of(def_id);\n }\n \n-fn convert_impl_item<'tcx>(tcx: TyCtxt<'tcx>, impl_item_id: hir::HirId) {\n+fn convert_impl_item(tcx: TyCtxt<'_>, impl_item_id: hir::HirId) {\n     let def_id = tcx.hir().local_def_id_from_hir_id(impl_item_id);\n     tcx.generics_of(def_id);\n     tcx.type_of(def_id);\n@@ -507,7 +507,7 @@ fn convert_impl_item<'tcx>(tcx: TyCtxt<'tcx>, impl_item_id: hir::HirId) {\n     }\n }\n \n-fn convert_variant_ctor<'tcx>(tcx: TyCtxt<'tcx>, ctor_id: hir::HirId) {\n+fn convert_variant_ctor(tcx: TyCtxt<'_>, ctor_id: hir::HirId) {\n     let def_id = tcx.hir().local_def_id_from_hir_id(ctor_id);\n     tcx.generics_of(def_id);\n     tcx.type_of(def_id);\n@@ -562,8 +562,8 @@ fn convert_enum_variant_types<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId, variants:\n     }\n }\n \n-fn convert_variant<'tcx>(\n-    tcx: TyCtxt<'tcx>,\n+fn convert_variant(\n+    tcx: TyCtxt<'_>,\n     variant_did: Option<DefId>,\n     ctor_did: Option<DefId>,\n     ident: Ident,\n@@ -619,7 +619,7 @@ fn convert_variant<'tcx>(\n     )\n }\n \n-fn adt_def<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> &'tcx ty::AdtDef {\n+fn adt_def(tcx: TyCtxt<'_>, def_id: DefId) -> &ty::AdtDef {\n     use rustc::hir::*;\n \n     let hir_id = tcx.hir().as_local_hir_id(def_id).unwrap();\n@@ -686,10 +686,10 @@ fn adt_def<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> &'tcx ty::AdtDef {\n /// Ensures that the super-predicates of the trait with a `DefId`\n /// of `trait_def_id` are converted and stored. This also ensures that\n /// the transitive super-predicates are converted.\n-fn super_predicates_of<'tcx>(\n-    tcx: TyCtxt<'tcx>,\n+fn super_predicates_of(\n+    tcx: TyCtxt<'_>,\n     trait_def_id: DefId,\n-) -> &'tcx ty::GenericPredicates<'tcx> {\n+) -> &ty::GenericPredicates<'_> {\n     debug!(\"super_predicates(trait_def_id={:?})\", trait_def_id);\n     let trait_hir_id = tcx.hir().as_local_hir_id(trait_def_id).unwrap();\n \n@@ -740,7 +740,7 @@ fn super_predicates_of<'tcx>(\n     })\n }\n \n-fn trait_def<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> &'tcx ty::TraitDef {\n+fn trait_def(tcx: TyCtxt<'_>, def_id: DefId) -> &ty::TraitDef {\n     let hir_id = tcx.hir().as_local_hir_id(def_id).unwrap();\n     let item = tcx.hir().expect_item(hir_id);\n \n@@ -879,7 +879,7 @@ fn has_late_bound_regions<'tcx>(tcx: TyCtxt<'tcx>, node: Node<'tcx>) -> Option<S\n     }\n }\n \n-fn generics_of<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> &'tcx ty::Generics {\n+fn generics_of(tcx: TyCtxt<'_>, def_id: DefId) -> &ty::Generics {\n     use rustc::hir::*;\n \n     let hir_id = tcx.hir().as_local_hir_id(def_id).unwrap();\n@@ -1122,7 +1122,7 @@ fn generics_of<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> &'tcx ty::Generics {\n     })\n }\n \n-fn report_assoc_ty_on_inherent_impl<'tcx>(tcx: TyCtxt<'tcx>, span: Span) {\n+fn report_assoc_ty_on_inherent_impl(tcx: TyCtxt<'_>, span: Span) {\n     span_err!(\n         tcx.sess,\n         span,\n@@ -1131,15 +1131,15 @@ fn report_assoc_ty_on_inherent_impl<'tcx>(tcx: TyCtxt<'tcx>, span: Span) {\n     );\n }\n \n-fn type_of<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> Ty<'tcx> {\n+fn type_of(tcx: TyCtxt<'_>, def_id: DefId) -> Ty<'_> {\n     checked_type_of(tcx, def_id, true).unwrap()\n }\n \n /// Same as [`type_of`] but returns [`Option`] instead of failing.\n ///\n /// If you want to fail anyway, you can set the `fail` parameter to true, but in this case,\n /// you'd better just call [`type_of`] directly.\n-pub fn checked_type_of<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId, fail: bool) -> Option<Ty<'tcx>> {\n+pub fn checked_type_of(tcx: TyCtxt<'_>, def_id: DefId, fail: bool) -> Option<Ty<'_>> {\n     use rustc::hir::*;\n \n     let hir_id = match tcx.hir().as_local_hir_id(def_id) {\n@@ -1464,7 +1464,7 @@ pub fn checked_type_of<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId, fail: bool) -> Op\n     })\n }\n \n-fn find_existential_constraints<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> Ty<'tcx> {\n+fn find_existential_constraints(tcx: TyCtxt<'_>, def_id: DefId) -> Ty<'_> {\n     use rustc::hir::{ImplItem, Item, TraitItem};\n \n     debug!(\"find_existential_constraints({:?})\", def_id);\n@@ -1682,7 +1682,7 @@ fn find_existential_constraints<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> Ty<'t\n     }\n }\n \n-fn fn_sig<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> ty::PolyFnSig<'tcx> {\n+fn fn_sig(tcx: TyCtxt<'_>, def_id: DefId) -> ty::PolyFnSig<'_> {\n     use rustc::hir::*;\n     use rustc::hir::Node::*;\n \n@@ -1758,7 +1758,7 @@ fn fn_sig<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> ty::PolyFnSig<'tcx> {\n     }\n }\n \n-fn impl_trait_ref<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> Option<ty::TraitRef<'tcx>> {\n+fn impl_trait_ref(tcx: TyCtxt<'_>, def_id: DefId) -> Option<ty::TraitRef<'_>> {\n     let icx = ItemCtxt::new(tcx, def_id);\n \n     let hir_id = tcx.hir().as_local_hir_id(def_id).unwrap();\n@@ -1773,7 +1773,7 @@ fn impl_trait_ref<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> Option<ty::TraitRef\n     }\n }\n \n-fn impl_polarity<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> hir::ImplPolarity {\n+fn impl_polarity(tcx: TyCtxt<'_>, def_id: DefId) -> hir::ImplPolarity {\n     let hir_id = tcx.hir().as_local_hir_id(def_id).unwrap();\n     match tcx.hir().expect_item(hir_id).node {\n         hir::ItemKind::Impl(_, polarity, ..) => polarity,\n@@ -1804,10 +1804,10 @@ fn early_bound_lifetimes_from_generics<'a, 'tcx: 'a>(\n /// Returns a list of type predicates for the definition with ID `def_id`, including inferred\n /// lifetime constraints. This includes all predicates returned by `explicit_predicates_of`, plus\n /// inferred constraints concerning which regions outlive other regions.\n-fn predicates_defined_on<'tcx>(\n-    tcx: TyCtxt<'tcx>,\n+fn predicates_defined_on(\n+    tcx: TyCtxt<'_>,\n     def_id: DefId,\n-) -> &'tcx ty::GenericPredicates<'tcx> {\n+) -> &ty::GenericPredicates<'_> {\n     debug!(\"predicates_defined_on({:?})\", def_id);\n     let mut result = tcx.explicit_predicates_of(def_id);\n     debug!(\n@@ -1834,7 +1834,7 @@ fn predicates_defined_on<'tcx>(\n /// Returns a list of all type predicates (explicit and implicit) for the definition with\n /// ID `def_id`. This includes all predicates returned by `predicates_defined_on`, plus\n /// `Self: Trait` predicates for traits.\n-fn predicates_of<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> &'tcx ty::GenericPredicates<'tcx> {\n+fn predicates_of(tcx: TyCtxt<'_>, def_id: DefId) -> &ty::GenericPredicates<'_> {\n     let mut result = tcx.predicates_defined_on(def_id);\n \n     if tcx.is_trait(def_id) {\n@@ -1861,10 +1861,10 @@ fn predicates_of<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> &'tcx ty::GenericPre\n \n /// Returns a list of user-specified type predicates for the definition with ID `def_id`.\n /// N.B., this does not include any implied/inferred constraints.\n-fn explicit_predicates_of<'tcx>(\n-    tcx: TyCtxt<'tcx>,\n+fn explicit_predicates_of(\n+    tcx: TyCtxt<'_>,\n     def_id: DefId,\n-) -> &'tcx ty::GenericPredicates<'tcx> {\n+) -> &ty::GenericPredicates<'_> {\n     use rustc::hir::*;\n     use rustc_data_structures::fx::FxHashSet;\n \n@@ -2271,15 +2271,15 @@ fn compute_sig_of_foreign_fn_decl<'tcx>(\n     fty\n }\n \n-fn is_foreign_item<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> bool {\n+fn is_foreign_item(tcx: TyCtxt<'_>, def_id: DefId) -> bool {\n     match tcx.hir().get_if_local(def_id) {\n         Some(Node::ForeignItem(..)) => true,\n         Some(_) => false,\n         _ => bug!(\"is_foreign_item applied to non-local def-id {:?}\", def_id),\n     }\n }\n \n-fn static_mutability<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> Option<hir::Mutability> {\n+fn static_mutability(tcx: TyCtxt<'_>, def_id: DefId) -> Option<hir::Mutability> {\n     match tcx.hir().get_if_local(def_id) {\n         Some(Node::Item(&hir::Item {\n             node: hir::ItemKind::Static(_, mutbl, _), ..\n@@ -2387,7 +2387,7 @@ fn from_target_feature(\n     }\n }\n \n-fn linkage_by_name<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId, name: &str) -> Linkage {\n+fn linkage_by_name(tcx: TyCtxt<'_>, def_id: DefId, name: &str) -> Linkage {\n     use rustc::mir::mono::Linkage::*;\n \n     // Use the names from src/llvm/docs/LangRef.rst here. Most types are only\n@@ -2422,7 +2422,7 @@ fn linkage_by_name<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId, name: &str) -> Linkag\n     }\n }\n \n-fn codegen_fn_attrs<'tcx>(tcx: TyCtxt<'tcx>, id: DefId) -> CodegenFnAttrs {\n+fn codegen_fn_attrs(tcx: TyCtxt<'_>, id: DefId) -> CodegenFnAttrs {\n     let attrs = tcx.get_attrs(id);\n \n     let mut codegen_fn_attrs = CodegenFnAttrs::new();"}, {"sha": "08c7cbc389a6756309c3d7131293a46140c019ea", "filename": "src/librustc_typeck/impl_wf_check.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc_typeck%2Fimpl_wf_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc_typeck%2Fimpl_wf_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fimpl_wf_check.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -49,7 +49,7 @@ use syntax_pos::Span;\n /// impl<'a> Trait<Foo> for Bar { type X = &'a i32; }\n /// //   ^ 'a is unused and appears in assoc type, error\n /// ```\n-pub fn impl_wf_check<'tcx>(tcx: TyCtxt<'tcx>) {\n+pub fn impl_wf_check(tcx: TyCtxt<'_>) {\n     // We will tag this as part of the WF check -- logically, it is,\n     // but it's one that we must perform earlier than the rest of\n     // WfCheck.\n@@ -58,7 +58,7 @@ pub fn impl_wf_check<'tcx>(tcx: TyCtxt<'tcx>) {\n     }\n }\n \n-fn check_mod_impl_wf<'tcx>(tcx: TyCtxt<'tcx>, module_def_id: DefId) {\n+fn check_mod_impl_wf(tcx: TyCtxt<'_>, module_def_id: DefId) {\n     tcx.hir().visit_item_likes_in_module(\n         module_def_id,\n         &mut ImplWfCheck { tcx }\n@@ -92,8 +92,8 @@ impl ItemLikeVisitor<'tcx> for ImplWfCheck<'tcx> {\n     fn visit_impl_item(&mut self, _impl_item: &'tcx hir::ImplItem) { }\n }\n \n-fn enforce_impl_params_are_constrained<'tcx>(\n-    tcx: TyCtxt<'tcx>,\n+fn enforce_impl_params_are_constrained(\n+    tcx: TyCtxt<'_>,\n     impl_def_id: DefId,\n     impl_item_refs: &[hir::ImplItemRef],\n ) {\n@@ -183,7 +183,7 @@ fn report_unused_parameter(tcx: TyCtxt<'_>, span: Span, kind: &str, name: &str)\n }\n \n /// Enforce that we do not have two items in an impl with the same name.\n-fn enforce_impl_items_are_distinct<'tcx>(tcx: TyCtxt<'tcx>, impl_item_refs: &[hir::ImplItemRef]) {\n+fn enforce_impl_items_are_distinct(tcx: TyCtxt<'_>, impl_item_refs: &[hir::ImplItemRef]) {\n     let mut seen_type_items = FxHashMap::default();\n     let mut seen_value_items = FxHashMap::default();\n     for impl_item_ref in impl_item_refs {"}, {"sha": "88e6c0f579efa0bd06826c5cd0f7ca0a1efb1efd", "filename": "src/librustc_typeck/lib.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc_typeck%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc_typeck%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Flib.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -69,6 +69,7 @@ This API is completely unstable and subject to change.\n #![feature(slice_patterns)]\n #![feature(never_type)]\n #![feature(inner_deref)]\n+#![feature(mem_take)]\n \n #![recursion_limit=\"256\"]\n \n@@ -161,7 +162,7 @@ fn require_same_types<'tcx>(\n     })\n }\n \n-fn check_main_fn_ty<'tcx>(tcx: TyCtxt<'tcx>, main_def_id: DefId) {\n+fn check_main_fn_ty(tcx: TyCtxt<'_>, main_def_id: DefId) {\n     let main_id = tcx.hir().as_local_hir_id(main_def_id).unwrap();\n     let main_span = tcx.def_span(main_def_id);\n     let main_t = tcx.type_of(main_def_id);\n@@ -226,7 +227,7 @@ fn check_main_fn_ty<'tcx>(tcx: TyCtxt<'tcx>, main_def_id: DefId) {\n     }\n }\n \n-fn check_start_fn_ty<'tcx>(tcx: TyCtxt<'tcx>, start_def_id: DefId) {\n+fn check_start_fn_ty(tcx: TyCtxt<'_>, start_def_id: DefId) {\n     let start_id = tcx.hir().as_local_hir_id(start_def_id).unwrap();\n     let start_span = tcx.def_span(start_def_id);\n     let start_t = tcx.type_of(start_def_id);\n@@ -283,7 +284,7 @@ fn check_start_fn_ty<'tcx>(tcx: TyCtxt<'tcx>, start_def_id: DefId) {\n     }\n }\n \n-fn check_for_entry_fn<'tcx>(tcx: TyCtxt<'tcx>) {\n+fn check_for_entry_fn(tcx: TyCtxt<'_>) {\n     match tcx.entry_fn(LOCAL_CRATE) {\n         Some((def_id, EntryFnType::Main)) => check_main_fn_ty(tcx, def_id),\n         Some((def_id, EntryFnType::Start)) => check_start_fn_ty(tcx, def_id),\n@@ -300,7 +301,7 @@ pub fn provide(providers: &mut Providers<'_>) {\n     impl_wf_check::provide(providers);\n }\n \n-pub fn check_crate<'tcx>(tcx: TyCtxt<'tcx>) -> Result<(), ErrorReported> {\n+pub fn check_crate(tcx: TyCtxt<'_>) -> Result<(), ErrorReported> {\n     tcx.sess.profiler(|p| p.start_activity(\"type-check crate\"));\n \n     // this ensures that later parts of type checking can assume that items"}, {"sha": "6b8f6fccd40d73fba36dbadffc54f2d3658d9496", "filename": "src/librustc_typeck/outlives/mod.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc_typeck%2Foutlives%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc_typeck%2Foutlives%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Foutlives%2Fmod.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -20,10 +20,10 @@ pub fn provide(providers: &mut Providers<'_>) {\n     };\n }\n \n-fn inferred_outlives_of<'tcx>(\n-    tcx: TyCtxt<'tcx>,\n+fn inferred_outlives_of(\n+    tcx: TyCtxt<'_>,\n     item_def_id: DefId,\n-) -> &'tcx [ty::Predicate<'tcx>] {\n+) -> &[ty::Predicate<'_>] {\n     let id = tcx\n         .hir()\n         .as_local_hir_id(item_def_id)\n@@ -70,10 +70,10 @@ fn inferred_outlives_of<'tcx>(\n     }\n }\n \n-fn inferred_outlives_crate<'tcx>(\n-    tcx: TyCtxt<'tcx>,\n+fn inferred_outlives_crate(\n+    tcx: TyCtxt<'_>,\n     crate_num: CrateNum,\n-) -> &'tcx CratePredicatesMap<'tcx> {\n+) -> &CratePredicatesMap<'_> {\n     assert_eq!(crate_num, LOCAL_CRATE);\n \n     // Compute a map from each struct/enum/union S to the **explicit**"}, {"sha": "5ddf95b0f80c21ab5c1d14f62a77beb578fe214a", "filename": "src/librustc_typeck/outlives/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc_typeck%2Foutlives%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc_typeck%2Foutlives%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Foutlives%2Ftest.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -3,7 +3,7 @@ use rustc::hir::itemlikevisit::ItemLikeVisitor;\n use rustc::ty::TyCtxt;\n use syntax::symbol::sym;\n \n-pub fn test_inferred_outlives<'tcx>(tcx: TyCtxt<'tcx>) {\n+pub fn test_inferred_outlives(tcx: TyCtxt<'_>) {\n     tcx.hir()\n        .krate()\n        .visit_all_item_likes(&mut OutlivesTest { tcx });"}, {"sha": "783890da639f477ee40b64fdcdd1d3cddd155ae1", "filename": "src/librustc_typeck/outlives/utils.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc_typeck%2Foutlives%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc_typeck%2Foutlives%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Foutlives%2Futils.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -125,7 +125,7 @@ pub fn insert_outlives_predicate<'tcx>(\n     }\n }\n \n-fn is_free_region<'tcx>(tcx: TyCtxt<'tcx>, region: Region<'_>) -> bool {\n+fn is_free_region(tcx: TyCtxt<'_>, region: Region<'_>) -> bool {\n     // First, screen for regions that might appear in a type header.\n     match region {\n         // These correspond to `T: 'a` relationships:"}, {"sha": "343d7ea656fbb27d532d63ed696f1db19c66dca7", "filename": "src/librustc_typeck/variance/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc_typeck%2Fvariance%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc_typeck%2Fvariance%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fvariance%2Fmod.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -34,15 +34,15 @@ pub fn provide(providers: &mut Providers<'_>) {\n     };\n }\n \n-fn crate_variances<'tcx>(tcx: TyCtxt<'tcx>, crate_num: CrateNum) -> &'tcx CrateVariancesMap<'tcx> {\n+fn crate_variances(tcx: TyCtxt<'_>, crate_num: CrateNum) -> &CrateVariancesMap<'_> {\n     assert_eq!(crate_num, LOCAL_CRATE);\n     let mut arena = arena::TypedArena::default();\n     let terms_cx = terms::determine_parameters_to_be_inferred(tcx, &mut arena);\n     let constraints_cx = constraints::add_constraints_from_crate(terms_cx);\n     tcx.arena.alloc(solve::solve_constraints(constraints_cx))\n }\n \n-fn variances_of<'tcx>(tcx: TyCtxt<'tcx>, item_def_id: DefId) -> &'tcx [ty::Variance] {\n+fn variances_of(tcx: TyCtxt<'_>, item_def_id: DefId) -> &[ty::Variance] {\n     let id = tcx.hir().as_local_hir_id(item_def_id).expect(\"expected local def-id\");\n     let unsupported = || {\n         // Variance not relevant."}, {"sha": "0c7ebc34e8f6de8785ef6be04b2cca1dfc9043f7", "filename": "src/librustc_typeck/variance/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc_typeck%2Fvariance%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustc_typeck%2Fvariance%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fvariance%2Ftest.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -3,7 +3,7 @@ use rustc::hir::itemlikevisit::ItemLikeVisitor;\n use rustc::ty::TyCtxt;\n use syntax::symbol::sym;\n \n-pub fn test_variance<'tcx>(tcx: TyCtxt<'tcx>) {\n+pub fn test_variance(tcx: TyCtxt<'_>) {\n     tcx.hir().krate().visit_all_item_likes(&mut VarianceTest { tcx });\n }\n "}, {"sha": "8ae96d8665718f37daa6c3f5e1a9fe599b983438", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -4408,7 +4408,7 @@ pub fn enter_impl_trait<F, R>(cx: &DocContext<'_>, f: F) -> R\n where\n     F: FnOnce() -> R,\n {\n-    let old_bounds = mem::replace(&mut *cx.impl_trait_bounds.borrow_mut(), Default::default());\n+    let old_bounds = mem::take(&mut *cx.impl_trait_bounds.borrow_mut());\n     let r = f();\n     assert!(cx.impl_trait_bounds.borrow().is_empty());\n     *cx.impl_trait_bounds.borrow_mut() = old_bounds;"}, {"sha": "e4fba73b8205a21c1c9e8f242092d1f88fd55d6c", "filename": "src/librustdoc/clean/simplify.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustdoc%2Fclean%2Fsimplify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustdoc%2Fclean%2Fsimplify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fsimplify.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -131,7 +131,7 @@ pub fn ty_params(mut params: Vec<clean::GenericParamDef>) -> Vec<clean::GenericP\n     for param in &mut params {\n         match param.kind {\n             clean::GenericParamDefKind::Type { ref mut bounds, .. } => {\n-                *bounds = ty_bounds(mem::replace(bounds, Vec::new()));\n+                *bounds = ty_bounds(mem::take(bounds));\n             }\n             _ => panic!(\"expected only type parameters\"),\n         }"}, {"sha": "2d6503c944560d313beb2775d8fec3feb743e875", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -660,7 +660,7 @@ pub fn run(mut krate: clean::Crate,\n         deref_trait_did,\n         deref_mut_trait_did,\n         owned_box_did,\n-        masked_crates: mem::replace(&mut krate.masked_crates, Default::default()),\n+        masked_crates: mem::take(&mut krate.masked_crates),\n         param_names: external_param_names,\n         aliases: Default::default(),\n     };"}, {"sha": "342264db43c792946f48db921e75a46d6a53e406", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -21,6 +21,7 @@\n #![feature(drain_filter)]\n #![feature(inner_deref)]\n #![feature(never_type)]\n+#![feature(mem_take)]\n \n #![recursion_limit=\"256\"]\n "}, {"sha": "144ff226c4283c619090d8a8f1deedbf613f2fd6", "filename": "src/librustdoc/passes/collapse_docs.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustdoc%2Fpasses%2Fcollapse_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibrustdoc%2Fpasses%2Fcollapse_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollapse_docs.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -4,7 +4,7 @@ use crate::fold;\n use crate::fold::{DocFolder};\n use crate::passes::Pass;\n \n-use std::mem::replace;\n+use std::mem::take;\n \n pub const COLLAPSE_DOCS: Pass = Pass {\n     name: \"collapse-docs\",\n@@ -46,7 +46,7 @@ fn collapse(doc_strings: &mut Vec<DocFragment>) {\n     let mut docs = vec![];\n     let mut last_frag: Option<DocFragment> = None;\n \n-    for frag in replace(doc_strings, vec![]) {\n+    for frag in take(doc_strings) {\n         if let Some(mut curr_frag) = last_frag.take() {\n             let curr_kind = curr_frag.kind();\n             let new_kind = frag.kind();"}, {"sha": "fb9a228880eb7304d9484bce138313d6a9ec9c2d", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -272,6 +272,7 @@\n #![feature(libc)]\n #![feature(link_args)]\n #![feature(linkage)]\n+#![feature(mem_take)]\n #![feature(needs_panic_runtime)]\n #![feature(never_type)]\n #![feature(nll)]"}, {"sha": "952fd9ebfdf0723d20494c6bd683ed537bdc4f76", "filename": "src/libstd/panicking.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibstd%2Fpanicking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibstd%2Fpanicking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpanicking.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -364,7 +364,7 @@ fn continue_panic_fmt(info: &PanicInfo<'_>) -> ! {\n \n     unsafe impl<'a> BoxMeUp for PanicPayload<'a> {\n         fn box_me_up(&mut self) -> *mut (dyn Any + Send) {\n-            let contents = mem::replace(self.fill(), String::new());\n+            let contents = mem::take(self.fill());\n             Box::into_raw(Box::new(contents))\n         }\n "}, {"sha": "f8fcd3ff5a5bccb5b07cabfb3e1d627af13cb224", "filename": "src/libstd/sync/mpsc/sync.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibstd%2Fsync%2Fmpsc%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibstd%2Fsync%2Fmpsc%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fsync.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -383,7 +383,7 @@ impl<T> Packet<T> {\n         // needs to be careful to destroy the data *outside* of the lock to\n         // prevent deadlock.\n         let _data = if guard.cap != 0 {\n-            mem::replace(&mut guard.buf.buf, Vec::new())\n+            mem::take(&mut guard.buf.buf)\n         } else {\n             Vec::new()\n         };"}, {"sha": "c77f30dfc7109cbd1d9f1c9287d216c6463210b4", "filename": "src/libstd/sys/windows/pipe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibstd%2Fsys%2Fwindows%2Fpipe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibstd%2Fsys%2Fwindows%2Fpipe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fpipe.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -342,7 +342,7 @@ impl<'a> Drop for AsyncPipe<'a> {\n         // If anything here fails, there's not really much we can do, so we leak\n         // the buffer/OVERLAPPED pointers to ensure we're at least memory safe.\n         if self.pipe.cancel_io().is_err() || self.result().is_err() {\n-            let buf = mem::replace(self.dst, Vec::new());\n+            let buf = mem::take(self.dst);\n             let overlapped = Box::new(unsafe { mem::zeroed() });\n             let overlapped = mem::replace(&mut self.overlapped, overlapped);\n             mem::forget((buf, overlapped));"}, {"sha": "453b6ebf3c49d5c2f60f2030057b95482108f553", "filename": "src/libsyntax/attr/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibsyntax%2Fattr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibsyntax%2Fattr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr%2Fmod.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -440,12 +440,12 @@ pub fn contains_name(attrs: &[Attribute], name: Symbol) -> bool {\n     })\n }\n \n-pub fn find_by_name<'a>(attrs: &'a [Attribute], name: Symbol) -> Option<&'a Attribute> {\n+pub fn find_by_name(attrs: &[Attribute], name: Symbol) -> Option<&Attribute> {\n     attrs.iter().find(|attr| attr.check_name(name))\n }\n \n-pub fn filter_by_name<'a>(attrs: &'a [Attribute], name: Symbol)\n-    -> impl Iterator<Item = &'a Attribute> {\n+pub fn filter_by_name(attrs: &[Attribute], name: Symbol)\n+                      -> impl Iterator<Item=&Attribute> {\n     attrs.iter().filter(move |attr| attr.check_name(name))\n }\n "}, {"sha": "c71fa61443c4360243196973997ac32a30db2d13", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 13, "deletions": 34, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -13,8 +13,7 @@ use crate::parse::{DirectoryOwnership, PResult, ParseSess};\n use crate::parse::token;\n use crate::parse::parser::Parser;\n use crate::ptr::P;\n-use crate::symbol::Symbol;\n-use crate::symbol::{kw, sym};\n+use crate::symbol::{sym, Symbol};\n use crate::tokenstream::{TokenStream, TokenTree};\n use crate::visit::{self, Visitor};\n use crate::util::map_in_place::MapInPlace;\n@@ -197,7 +196,6 @@ pub struct Invocation {\n pub enum InvocationKind {\n     Bang {\n         mac: ast::Mac,\n-        ident: Option<Ident>,\n         span: Span,\n     },\n     Attr {\n@@ -307,7 +305,7 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n             } else {\n                 self.resolve_imports();\n                 if undetermined_invocations.is_empty() { break }\n-                invocations = mem::replace(&mut undetermined_invocations, Vec::new());\n+                invocations = mem::take(&mut undetermined_invocations);\n                 force = !mem::replace(&mut progress, false);\n                 continue\n             };\n@@ -664,13 +662,12 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n                          ext: &SyntaxExtension)\n                          -> Option<AstFragment> {\n         let kind = invoc.fragment_kind;\n-        let (mac, ident, span) = match invoc.kind {\n-            InvocationKind::Bang { mac, ident, span } => (mac, ident, span),\n+        let (mac, span) = match invoc.kind {\n+            InvocationKind::Bang { mac, span } => (mac, span),\n             _ => unreachable!(),\n         };\n         let path = &mac.node.path;\n \n-        let ident = ident.unwrap_or_else(|| Ident::invalid());\n         let validate = |this: &mut Self| {\n             // feature-gate the macro invocation\n             if let Some((feature, issue)) = ext.unstable_feature {\n@@ -690,12 +687,6 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n                 }\n             }\n \n-            if ident.name != kw::Invalid {\n-                let msg = format!(\"macro {}! expects no ident argument, given '{}'\", path, ident);\n-                this.cx.span_err(path.span, &msg);\n-                this.cx.trace_macros_diag();\n-                return Err(kind.dummy(span));\n-            }\n             Ok(())\n         };\n \n@@ -729,19 +720,11 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n             }\n \n             SyntaxExtensionKind::Bang(expander) => {\n-                if ident.name != kw::Invalid {\n-                    let msg =\n-                        format!(\"macro {}! expects no ident argument, given '{}'\", path, ident);\n-                    self.cx.span_err(path.span, &msg);\n-                    self.cx.trace_macros_diag();\n-                    kind.dummy(span)\n-                } else {\n-                    self.gate_proc_macro_expansion_kind(span, kind);\n-                    let tok_result = expander.expand(self.cx, span, mac.node.stream());\n-                    let result = self.parse_ast_fragment(tok_result, kind, path, span);\n-                    self.gate_proc_macro_expansion(span, &result);\n-                    result\n-                }\n+                self.gate_proc_macro_expansion_kind(span, kind);\n+                let tok_result = expander.expand(self.cx, span, mac.node.stream());\n+                let result = self.parse_ast_fragment(tok_result, kind, path, span);\n+                self.gate_proc_macro_expansion(span, &result);\n+                result\n             }\n         };\n \n@@ -944,7 +927,7 @@ impl<'a, 'b> InvocationCollector<'a, 'b> {\n     }\n \n     fn collect_bang(&mut self, mac: ast::Mac, span: Span, kind: AstFragmentKind) -> AstFragment {\n-        self.collect(kind, InvocationKind::Bang { mac, ident: None, span })\n+        self.collect(kind, InvocationKind::Bang { mac, span })\n     }\n \n     fn collect_attr(&mut self,\n@@ -1179,13 +1162,9 @@ impl<'a, 'b> MutVisitor for InvocationCollector<'a, 'b> {\n             ast::ItemKind::Mac(..) => {\n                 self.check_attributes(&item.attrs);\n                 item.and_then(|item| match item.node {\n-                    ItemKind::Mac(mac) => {\n-                        self.collect(AstFragmentKind::Items, InvocationKind::Bang {\n-                            mac,\n-                            ident: Some(item.ident),\n-                            span: item.span,\n-                        }).make_items()\n-                    }\n+                    ItemKind::Mac(mac) => self.collect(\n+                        AstFragmentKind::Items, InvocationKind::Bang { mac, span: item.span }\n+                    ).make_items(),\n                     _ => unreachable!(),\n                 })\n             }"}, {"sha": "fc8aa4793bc6111eba60d007e077c69ac1d7be7c", "filename": "src/libsyntax/ext/tt/macro_parser.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -901,7 +901,7 @@ fn may_begin_with(token: &Token, name: Name) -> bool {\n /// # Returns\n ///\n /// The parsed non-terminal.\n-fn parse_nt<'a>(p: &mut Parser<'a>, sp: Span, name: Symbol) -> Nonterminal {\n+fn parse_nt(p: &mut Parser<'_>, sp: Span, name: Symbol) -> Nonterminal {\n     if name == sym::tt {\n         return token::NtTT(p.parse_token_tree());\n     }"}, {"sha": "e04fd2ddc05bce62332409adbd00515ad3de7069", "filename": "src/libsyntax/ext/tt/transcribe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibsyntax%2Fext%2Ftt%2Ftranscribe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibsyntax%2Fext%2Ftt%2Ftranscribe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Ftranscribe.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -249,7 +249,7 @@ pub fn transcribe(\n             quoted::TokenTree::Delimited(mut span, delimited) => {\n                 span = span.apply_mark(cx.current_expansion.mark);\n                 stack.push(Frame::Delimited { forest: delimited, idx: 0, span });\n-                result_stack.push(mem::replace(&mut result, Vec::new()));\n+                result_stack.push(mem::take(&mut result));\n             }\n \n             // Nothing much to do here. Just push the token to the result, being careful to"}, {"sha": "7f16bb9dc1259ef44e4e9cfd33e93fd4048bb3e2", "filename": "src/libsyntax/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibsyntax%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibsyntax%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Flib.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -17,6 +17,7 @@\n #![feature(const_transmute)]\n #![feature(crate_visibility_modifier)]\n #![feature(label_break_value)]\n+#![feature(mem_take)]\n #![feature(nll)]\n #![feature(rustc_attrs)]\n #![feature(rustc_diagnostic_macros)]"}, {"sha": "49f714e4e4654b2609d02ac1d91654ab04dd985a", "filename": "src/libsyntax/parse/lexer/mod.rs", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -83,28 +83,6 @@ impl<'a> StringReader<'a> {\n         Ok(ret_val)\n     }\n \n-    /// Immutably extract string if found at current position with given delimiters\n-    fn peek_delimited(&self, from_ch: char, to_ch: char) -> Option<String> {\n-        let mut pos = self.pos;\n-        let mut idx = self.src_index(pos);\n-        let mut ch = char_at(&self.src, idx);\n-        if ch != from_ch {\n-            return None;\n-        }\n-        pos = pos + Pos::from_usize(ch.len_utf8());\n-        let start_pos = pos;\n-        idx = self.src_index(pos);\n-        while idx < self.end_src_index {\n-            ch = char_at(&self.src, idx);\n-            if ch == to_ch {\n-                return Some(self.src[self.src_index(start_pos)..self.src_index(pos)].to_string());\n-            }\n-            pos = pos + Pos::from_usize(ch.len_utf8());\n-            idx = self.src_index(pos);\n-        }\n-        return None;\n-    }\n-\n     fn try_real_token(&mut self) -> Result<Token, ()> {\n         let mut t = self.try_next_token()?;\n         loop {"}, {"sha": "6a870685938a04bb8463baf75a5c22b463b5e234", "filename": "src/libsyntax/parse/lexer/unicode_chars.rs", "status": "modified", "additions": 72, "deletions": 45, "changes": 117, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibsyntax%2Fparse%2Flexer%2Funicode_chars.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibsyntax%2Fparse%2Flexer%2Funicode_chars.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer%2Funicode_chars.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -1,10 +1,11 @@\n // Characters and their corresponding confusables were collected from\n // http://www.unicode.org/Public/security/10.0.0/confusables.txt\n \n-use syntax_pos::{Span, Pos, NO_EXPANSION};\n-use errors::{Applicability, DiagnosticBuilder};\n use super::StringReader;\n+use errors::{Applicability, DiagnosticBuilder};\n+use syntax_pos::{Pos, Span, NO_EXPANSION};\n \n+#[rustfmt::skip] // for line breaks\n const UNICODE_ARRAY: &[(char, &str, char)] = &[\n     ('\u2028', \"Line Separator\", ' '),\n     ('\u2029', \"Paragraph Separator\", ' '),\n@@ -293,8 +294,8 @@ const UNICODE_ARRAY: &[(char, &str, char)] = &[\n     ('\u232a', \"Right-Pointing Angle Bracket\", '>'),\n     ('\u3009', \"Right Angle Bracket\", '>'),\n     ('\u300b', \"Right Double Angle Bracket\", '>'),\n-    ('\uff1e', \"Fullwidth Greater-Than Sign\", '>'), ];\n-\n+    ('\uff1e', \"Fullwidth Greater-Than Sign\", '>'),\n+];\n \n const ASCII_ARRAY: &[(char, &str)] = &[\n     (' ', \"Space\"),\n@@ -321,46 +322,72 @@ const ASCII_ARRAY: &[(char, &str)] = &[\n     ('+', \"Plus Sign\"),\n     ('<', \"Less-Than Sign\"),\n     ('=', \"Equals Sign\"),\n-    ('>', \"Greater-Than Sign\"), ];\n-\n-crate fn check_for_substitution<'a>(reader: &StringReader<'a>,\n-                                  ch: char,\n-                                  err: &mut DiagnosticBuilder<'a>) -> bool {\n-    UNICODE_ARRAY\n-    .iter()\n-    .find(|&&(c, _, _)| c == ch)\n-    .map(|&(_, u_name, ascii_char)| {\n-        let span = Span::new(reader.pos, reader.next_pos, NO_EXPANSION);\n-        match ASCII_ARRAY.iter().find(|&&(c, _)| c == ascii_char) {\n-            Some(&(ascii_char, ascii_name)) => {\n-                // special help suggestion for \"directed\" double quotes\n-                if let Some(s) = reader.peek_delimited('\u201c', '\u201d') {\n-                    let msg = format!(\"Unicode characters '\u201c' (Left Double Quotation Mark) and \\\n-                        '\u201d' (Right Double Quotation Mark) look like '{}' ({}), but are not\",\n-                                ascii_char, ascii_name);\n-                    err.span_suggestion(\n-                        Span::new(reader.pos, reader.next_pos + Pos::from_usize(s.len()) +\n-                            Pos::from_usize('\u201d'.len_utf8()), NO_EXPANSION),\n-                        &msg,\n-                        format!(\"\\\"{}\\\"\", s),\n-                        Applicability::MaybeIncorrect);\n-                } else {\n-                    let msg =\n-                        format!(\"Unicode character '{}' ({}) looks like '{}' ({}), but it is not\",\n-                                ch, u_name, ascii_char, ascii_name);\n-                    err.span_suggestion(\n-                        span,\n-                        &msg,\n-                        ascii_char.to_string(),\n-                        Applicability::MaybeIncorrect);\n-                }\n-                true\n-            },\n-            None => {\n-                let msg = format!(\"substitution character not found for '{}'\", ch);\n-                reader.sess.span_diagnostic.span_bug_no_panic(span, &msg);\n-                false\n-            }\n+    ('>', \"Greater-Than Sign\"),\n+];\n+\n+crate fn check_for_substitution<'a>(\n+    reader: &StringReader<'a>,\n+    ch: char,\n+    err: &mut DiagnosticBuilder<'a>,\n+) -> bool {\n+    let (u_name, ascii_char) = match UNICODE_ARRAY.iter().find(|&&(c, _, _)| c == ch) {\n+        Some(&(_u_char, u_name, ascii_char)) => (u_name, ascii_char),\n+        None => return false,\n+    };\n+\n+    let span = Span::new(reader.pos, reader.next_pos, NO_EXPANSION);\n+\n+    let ascii_name = match ASCII_ARRAY.iter().find(|&&(c, _)| c == ascii_char) {\n+        Some((_ascii_char, ascii_name)) => ascii_name,\n+        None => {\n+            let msg = format!(\"substitution character not found for '{}'\", ch);\n+            reader.sess.span_diagnostic.span_bug_no_panic(span, &msg);\n+            return false\n+        },\n+    };\n+\n+    // special help suggestion for \"directed\" double quotes\n+    if let Some(s) = reader.peek_delimited('\u201c', '\u201d') {\n+        let msg = format!(\n+            \"Unicode characters '\u201c' (Left Double Quotation Mark) and \\\n+             '\u201d' (Right Double Quotation Mark) look like '{}' ({}), but are not\",\n+            ascii_char, ascii_name\n+        );\n+        err.span_suggestion(\n+            Span::new(\n+                reader.pos,\n+                reader.next_pos + Pos::from_usize(s.len()) + Pos::from_usize('\u201d'.len_utf8()),\n+                NO_EXPANSION,\n+            ),\n+            &msg,\n+            format!(\"\\\"{}\\\"\", s),\n+            Applicability::MaybeIncorrect,\n+        );\n+    } else {\n+        let msg = format!(\n+            \"Unicode character '{}' ({}) looks like '{}' ({}), but it is not\",\n+            ch, u_name, ascii_char, ascii_name\n+        );\n+        err.span_suggestion(\n+            span,\n+            &msg,\n+            ascii_char.to_string(),\n+            Applicability::MaybeIncorrect,\n+        );\n+    }\n+    true\n+}\n+\n+impl StringReader<'_> {\n+    /// Immutably extract string if found at current position with given delimiters\n+    fn peek_delimited(&self, from_ch: char, to_ch: char) -> Option<&str> {\n+        let tail = &self.src[self.src_index(self.pos)..];\n+        let mut chars = tail.chars();\n+        let first_char = chars.next()?;\n+        if first_char != from_ch {\n+            return None;\n         }\n-    }).unwrap_or(false)\n+        let last_char_idx = chars.as_str().find(to_ch)?;\n+        Some(&chars.as_str()[..last_char_idx])\n+    }\n }"}, {"sha": "9c1796000938fd03f46d3fd3a39ee65c2ce21761", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 79, "deletions": 139, "changes": 218, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -4324,51 +4324,49 @@ impl<'a> Parser<'a> {\n     fn eat_macro_def(&mut self, attrs: &[Attribute], vis: &Visibility, lo: Span)\n                      -> PResult<'a, Option<P<Item>>> {\n         let token_lo = self.token.span;\n-        let (ident, def) = match self.token.kind {\n-            token::Ident(name, false) if name == kw::Macro => {\n-                self.bump();\n-                let ident = self.parse_ident()?;\n-                let tokens = if self.check(&token::OpenDelim(token::Brace)) {\n-                    match self.parse_token_tree() {\n-                        TokenTree::Delimited(_, _, tts) => tts,\n-                        _ => unreachable!(),\n-                    }\n-                } else if self.check(&token::OpenDelim(token::Paren)) {\n-                    let args = self.parse_token_tree();\n-                    let body = if self.check(&token::OpenDelim(token::Brace)) {\n-                        self.parse_token_tree()\n-                    } else {\n-                        self.unexpected()?;\n-                        unreachable!()\n-                    };\n-                    TokenStream::new(vec![\n-                        args.into(),\n-                        TokenTree::token(token::FatArrow, token_lo.to(self.prev_span)).into(),\n-                        body.into(),\n-                    ])\n+        let (ident, def) = if self.eat_keyword(kw::Macro) {\n+            let ident = self.parse_ident()?;\n+            let tokens = if self.check(&token::OpenDelim(token::Brace)) {\n+                match self.parse_token_tree() {\n+                    TokenTree::Delimited(_, _, tts) => tts,\n+                    _ => unreachable!(),\n+                }\n+            } else if self.check(&token::OpenDelim(token::Paren)) {\n+                let args = self.parse_token_tree();\n+                let body = if self.check(&token::OpenDelim(token::Brace)) {\n+                    self.parse_token_tree()\n                 } else {\n                     self.unexpected()?;\n                     unreachable!()\n                 };\n+                TokenStream::new(vec![\n+                    args.into(),\n+                    TokenTree::token(token::FatArrow, token_lo.to(self.prev_span)).into(),\n+                    body.into(),\n+                ])\n+            } else {\n+                self.unexpected()?;\n+                unreachable!()\n+            };\n \n-                (ident, ast::MacroDef { tokens: tokens.into(), legacy: false })\n-            }\n-            token::Ident(name, _) if name == sym::macro_rules &&\n-                                     self.look_ahead(1, |t| *t == token::Not) => {\n-                let prev_span = self.prev_span;\n-                self.complain_if_pub_macro(&vis.node, prev_span);\n-                self.bump();\n-                self.bump();\n-\n-                let ident = self.parse_ident()?;\n-                let (delim, tokens) = self.expect_delimited_token_tree()?;\n-                if delim != MacDelimiter::Brace && !self.eat(&token::Semi) {\n-                    self.report_invalid_macro_expansion_item();\n-                }\n+            (ident, ast::MacroDef { tokens: tokens.into(), legacy: false })\n+        } else if self.check_keyword(sym::macro_rules) &&\n+                  self.look_ahead(1, |t| *t == token::Not) &&\n+                  self.look_ahead(2, |t| t.is_ident()) {\n+            let prev_span = self.prev_span;\n+            self.complain_if_pub_macro(&vis.node, prev_span);\n+            self.bump();\n+            self.bump();\n \n-                (ident, ast::MacroDef { tokens, legacy: true })\n+            let ident = self.parse_ident()?;\n+            let (delim, tokens) = self.expect_delimited_token_tree()?;\n+            if delim != MacDelimiter::Brace && !self.eat(&token::Semi) {\n+                self.report_invalid_macro_expansion_item();\n             }\n-            _ => return Ok(None),\n+\n+            (ident, ast::MacroDef { tokens, legacy: true })\n+        } else {\n+            return Ok(None);\n         };\n \n         let span = lo.to(self.prev_span);\n@@ -4412,14 +4410,14 @@ impl<'a> Parser<'a> {\n                   !self.is_existential_type_decl() &&\n                   !self.is_auto_trait_item() &&\n                   !self.is_async_fn() {\n-            let pth = self.parse_path(PathStyle::Expr)?;\n+            let path = self.parse_path(PathStyle::Expr)?;\n \n             if !self.eat(&token::Not) {\n                 let expr = if self.check(&token::OpenDelim(token::Brace)) {\n-                    self.parse_struct_expr(lo, pth, ThinVec::new())?\n+                    self.parse_struct_expr(lo, path, ThinVec::new())?\n                 } else {\n                     let hi = self.prev_span;\n-                    self.mk_expr(lo.to(hi), ExprKind::Path(None, pth), ThinVec::new())\n+                    self.mk_expr(lo.to(hi), ExprKind::Path(None, path), ThinVec::new())\n                 };\n \n                 let expr = self.with_res(Restrictions::STMT_EXPR, |this| {\n@@ -4434,34 +4432,6 @@ impl<'a> Parser<'a> {\n                 }));\n             }\n \n-            // it's a macro invocation\n-            let id = match self.token.kind {\n-                token::OpenDelim(_) => Ident::invalid(), // no special identifier\n-                _ => self.parse_ident()?,\n-            };\n-\n-            // check that we're pointing at delimiters (need to check\n-            // again after the `if`, because of `parse_ident`\n-            // consuming more tokens).\n-            match self.token.kind {\n-                token::OpenDelim(_) => {}\n-                _ => {\n-                    // we only expect an ident if we didn't parse one\n-                    // above.\n-                    let ident_str = if id.name == kw::Invalid {\n-                        \"identifier, \"\n-                    } else {\n-                        \"\"\n-                    };\n-                    let tok_str = self.this_token_descr();\n-                    let mut err = self.fatal(&format!(\"expected {}`(` or `{{`, found {}\",\n-                                                      ident_str,\n-                                                      tok_str));\n-                    err.span_label(self.token.span, format!(\"expected {}`(` or `{{`\", ident_str));\n-                    return Err(err)\n-                },\n-            }\n-\n             let (delim, tts) = self.expect_delimited_token_tree()?;\n             let hi = self.prev_span;\n \n@@ -4471,59 +4441,38 @@ impl<'a> Parser<'a> {\n                 MacStmtStyle::NoBraces\n             };\n \n-            if id.name == kw::Invalid {\n-                let mac = respan(lo.to(hi), Mac_ { path: pth, tts, delim });\n-                let node = if delim == MacDelimiter::Brace ||\n-                              self.token == token::Semi || self.token == token::Eof {\n-                    StmtKind::Mac(P((mac, style, attrs.into())))\n-                }\n-                // We used to incorrectly stop parsing macro-expanded statements here.\n-                // If the next token will be an error anyway but could have parsed with the\n-                // earlier behavior, stop parsing here and emit a warning to avoid breakage.\n-                else if macro_legacy_warnings &&\n-                        self.token.can_begin_expr() &&\n-                        match self.token.kind {\n-                    // These can continue an expression, so we can't stop parsing and warn.\n-                    token::OpenDelim(token::Paren) | token::OpenDelim(token::Bracket) |\n-                    token::BinOp(token::Minus) | token::BinOp(token::Star) |\n-                    token::BinOp(token::And) | token::BinOp(token::Or) |\n-                    token::AndAnd | token::OrOr |\n-                    token::DotDot | token::DotDotDot | token::DotDotEq => false,\n-                    _ => true,\n-                } {\n-                    self.warn_missing_semicolon();\n-                    StmtKind::Mac(P((mac, style, attrs.into())))\n-                } else {\n-                    let e = self.mk_expr(mac.span, ExprKind::Mac(mac), ThinVec::new());\n-                    let e = self.maybe_recover_from_bad_qpath(e, true)?;\n-                    let e = self.parse_dot_or_call_expr_with(e, lo, attrs.into())?;\n-                    let e = self.parse_assoc_expr_with(0, LhsExpr::AlreadyParsed(e))?;\n-                    StmtKind::Expr(e)\n-                };\n-                Stmt {\n-                    id: ast::DUMMY_NODE_ID,\n-                    span: lo.to(hi),\n-                    node,\n-                }\n+            let mac = respan(lo.to(hi), Mac_ { path, tts, delim });\n+            let node = if delim == MacDelimiter::Brace ||\n+                          self.token == token::Semi || self.token == token::Eof {\n+                StmtKind::Mac(P((mac, style, attrs.into())))\n+            }\n+            // We used to incorrectly stop parsing macro-expanded statements here.\n+            // If the next token will be an error anyway but could have parsed with the\n+            // earlier behavior, stop parsing here and emit a warning to avoid breakage.\n+            else if macro_legacy_warnings &&\n+                    self.token.can_begin_expr() &&\n+                    match self.token.kind {\n+                // These can continue an expression, so we can't stop parsing and warn.\n+                token::OpenDelim(token::Paren) | token::OpenDelim(token::Bracket) |\n+                token::BinOp(token::Minus) | token::BinOp(token::Star) |\n+                token::BinOp(token::And) | token::BinOp(token::Or) |\n+                token::AndAnd | token::OrOr |\n+                token::DotDot | token::DotDotDot | token::DotDotEq => false,\n+                _ => true,\n+            } {\n+                self.warn_missing_semicolon();\n+                StmtKind::Mac(P((mac, style, attrs.into())))\n             } else {\n-                // if it has a special ident, it's definitely an item\n-                //\n-                // Require a semicolon or braces.\n-                if style != MacStmtStyle::Braces && !self.eat(&token::Semi) {\n-                    self.report_invalid_macro_expansion_item();\n-                }\n-                let span = lo.to(hi);\n-                Stmt {\n-                    id: ast::DUMMY_NODE_ID,\n-                    span,\n-                    node: StmtKind::Item({\n-                        self.mk_item(\n-                            span, id /*id is good here*/,\n-                            ItemKind::Mac(respan(span, Mac_ { path: pth, tts, delim })),\n-                            respan(lo, VisibilityKind::Inherited),\n-                            attrs)\n-                    }),\n-                }\n+                let e = self.mk_expr(mac.span, ExprKind::Mac(mac), ThinVec::new());\n+                let e = self.maybe_recover_from_bad_qpath(e, true)?;\n+                let e = self.parse_dot_or_call_expr_with(e, lo, attrs.into())?;\n+                let e = self.parse_assoc_expr_with(0, LhsExpr::AlreadyParsed(e))?;\n+                StmtKind::Expr(e)\n+            };\n+            Stmt {\n+                id: ast::DUMMY_NODE_ID,\n+                span: lo.to(hi),\n+                node,\n             }\n         } else {\n             // FIXME: Bad copy of attrs\n@@ -7619,26 +7568,17 @@ impl<'a> Parser<'a> {\n             let mac_lo = self.token.span;\n \n             // item macro.\n-            let pth = self.parse_path(PathStyle::Mod)?;\n+            let path = self.parse_path(PathStyle::Mod)?;\n             self.expect(&token::Not)?;\n-\n-            // a 'special' identifier (like what `macro_rules!` uses)\n-            // is optional. We should eventually unify invoc syntax\n-            // and remove this.\n-            let id = if self.token.is_ident() {\n-                self.parse_ident()?\n-            } else {\n-                Ident::invalid() // no special identifier\n-            };\n-            // eat a matched-delimiter token tree:\n             let (delim, tts) = self.expect_delimited_token_tree()?;\n             if delim != MacDelimiter::Brace && !self.eat(&token::Semi) {\n                 self.report_invalid_macro_expansion_item();\n             }\n \n             let hi = self.prev_span;\n-            let mac = respan(mac_lo.to(hi), Mac_ { path: pth, tts, delim });\n-            let item = self.mk_item(lo.to(hi), id, ItemKind::Mac(mac), visibility, attrs);\n+            let mac = respan(mac_lo.to(hi), Mac_ { path, tts, delim });\n+            let item =\n+                self.mk_item(lo.to(hi), Ident::invalid(), ItemKind::Mac(mac), visibility, attrs);\n             return Ok(Some(item));\n         }\n \n@@ -7664,9 +7604,9 @@ impl<'a> Parser<'a> {\n                 !(self.is_async_fn() && self.token.span.rust_2015()) {\n             let prev_span = self.prev_span;\n             let lo = self.token.span;\n-            let pth = self.parse_path(PathStyle::Mod)?;\n+            let path = self.parse_path(PathStyle::Mod)?;\n \n-            if pth.segments.len() == 1 {\n+            if path.segments.len() == 1 {\n                 if !self.eat(&token::Not) {\n                     return Err(self.missing_assoc_item_kind_err(item_kind, prev_span));\n                 }\n@@ -7686,7 +7626,7 @@ impl<'a> Parser<'a> {\n                 self.expect(&token::Semi)?;\n             }\n \n-            Ok(Some(respan(lo.to(self.prev_span), Mac_ { path: pth, tts, delim })))\n+            Ok(Some(respan(lo.to(self.prev_span), Mac_ { path, tts, delim })))\n         } else {\n             Ok(None)\n         }\n@@ -7699,7 +7639,7 @@ impl<'a> Parser<'a> {\n         let mut tokens = Vec::new();\n         let prev_collecting = match self.token_cursor.frame.last_token {\n             LastToken::Collecting(ref mut list) => {\n-                Some(mem::replace(list, Vec::new()))\n+                Some(mem::take(list))\n             }\n             LastToken::Was(ref mut last) => {\n                 tokens.extend(last.take());\n@@ -7717,7 +7657,7 @@ impl<'a> Parser<'a> {\n \n         // Pull out the tokens that we've collected from the call to `f` above.\n         let mut collected_tokens = match *last_token {\n-            LastToken::Collecting(ref mut v) => mem::replace(v, Vec::new()),\n+            LastToken::Collecting(ref mut v) => mem::take(v),\n             LastToken::Was(_) => panic!(\"our vector went away?\"),\n         };\n "}, {"sha": "156fab8834ca4653e52bf6813aab747a8a47f168", "filename": "src/libsyntax/test.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibsyntax%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibsyntax%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ftest.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -120,8 +120,8 @@ impl<'a> MutVisitor for TestHarnessGenerator<'a> {\n         // We don't want to recurse into anything other than mods, since\n         // mods or tests inside of functions will break things\n         if let ast::ItemKind::Mod(mut module) = item.node {\n-            let tests = mem::replace(&mut self.tests, Vec::new());\n-            let tested_submods = mem::replace(&mut self.tested_submods, Vec::new());\n+            let tests = mem::take(&mut self.tests);\n+            let tested_submods = mem::take(&mut self.tested_submods);\n             noop_visit_mod(&mut module, self);\n             let tests = mem::replace(&mut self.tests, tests);\n             let tested_submods = mem::replace(&mut self.tested_submods, tested_submods);"}, {"sha": "f850960624ce7eec4b8c5502c7b60e1a896b6022", "filename": "src/libsyntax/util/parser_testing.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibsyntax%2Futil%2Fparser_testing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibsyntax%2Futil%2Fparser_testing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Futil%2Fparser_testing.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -20,7 +20,7 @@ pub fn string_to_stream(source_str: String) -> TokenStream {\n }\n \n /// Map string to parser (via tts)\n-pub fn string_to_parser<'a>(ps: &'a ParseSess, source_str: String) -> Parser<'a> {\n+pub fn string_to_parser(ps: &ParseSess, source_str: String) -> Parser<'_> {\n     new_parser_from_source_str(ps, PathBuf::from(\"bogofile\").into(), source_str)\n }\n "}, {"sha": "637614a18bcc339a07f76cfd40bff8927a0e8171", "filename": "src/libsyntax_ext/assert.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibsyntax_ext%2Fassert.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibsyntax_ext%2Fassert.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fassert.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -131,7 +131,7 @@ fn parse_assert<'a>(\n     Ok(Assert { cond_expr, custom_message })\n }\n \n-fn parse_custom_message<'a>(parser: &mut Parser<'a>) -> Option<TokenStream> {\n+fn parse_custom_message(parser: &mut Parser<'_>) -> Option<TokenStream> {\n     let ts = parser.parse_tokens();\n     if !ts.is_empty() {\n         Some(ts)"}, {"sha": "12482f7248e90b5eb43a71ea90ecde045eb96ead", "filename": "src/libsyntax_ext/deriving/generic/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -331,8 +331,8 @@ pub type CombineSubstructureFunc<'a> =\n pub type EnumNonMatchCollapsedFunc<'a> =\n     Box<dyn FnMut(&mut ExtCtxt<'_>, Span, (&[Ident], &[Ident]), &[P<Expr>]) -> P<Expr> + 'a>;\n \n-pub fn combine_substructure<'a>(f: CombineSubstructureFunc<'a>)\n-                                -> RefCell<CombineSubstructureFunc<'a>> {\n+pub fn combine_substructure(f: CombineSubstructureFunc<'_>)\n+                            -> RefCell<CombineSubstructureFunc<'_>> {\n     RefCell::new(f)\n }\n "}, {"sha": "02b02e9b836957336bc51e566dc7d3aa211ef711", "filename": "src/libsyntax_ext/deriving/generic/ty.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fty.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -39,10 +39,10 @@ pub enum PathKind {\n }\n \n impl<'a> Path<'a> {\n-    pub fn new<'r>(path: Vec<&'r str>) -> Path<'r> {\n+    pub fn new(path: Vec<&str>) -> Path<'_> {\n         Path::new_(path, None, Vec::new(), PathKind::Std)\n     }\n-    pub fn new_local<'r>(path: &'r str) -> Path<'r> {\n+    pub fn new_local(path: &str) -> Path<'_> {\n         Path::new_(vec![path], None, Vec::new(), PathKind::Local)\n     }\n     pub fn new_<'r>(path: Vec<&'r str>,\n@@ -117,7 +117,7 @@ pub enum Const {\n pub fn borrowed_ptrty<'r>() -> PtrTy<'r> {\n     Borrowed(None, ast::Mutability::Immutable)\n }\n-pub fn borrowed<'r>(ty: Box<Ty<'r>>) -> Ty<'r> {\n+pub fn borrowed(ty: Box<Ty<'_>>) -> Ty<'_> {\n     Ptr(ty, borrowed_ptrty())\n }\n "}, {"sha": "e92c68f5b0c5736f974d57f640f2bdc16ae48895", "filename": "src/libunwind/build.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibunwind%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibunwind%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibunwind%2Fbuild.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -4,11 +4,13 @@ fn main() {\n     println!(\"cargo:rerun-if-changed=build.rs\");\n     let target = env::var(\"TARGET\").expect(\"TARGET was not set\");\n \n-    if cfg!(feature = \"llvm-libunwind\") &&\n+    // FIXME: the not(bootstrap) part is needed because of the issue addressed by #62286,\n+    // and could be removed once that change is in beta.\n+    if cfg!(all(not(bootstrap), feature = \"llvm-libunwind\")) &&\n         (target.contains(\"linux\") ||\n          target.contains(\"fuchsia\")) {\n         // Build the unwinding from libunwind C/C++ source code.\n-        #[cfg(feature = \"llvm-libunwind\")]\n+        #[cfg(all(not(bootstrap), feature = \"llvm-libunwind\"))]\n         llvm_libunwind::compile();\n     } else if target.contains(\"linux\") {\n         if target.contains(\"musl\") {\n@@ -42,7 +44,7 @@ fn main() {\n     }\n }\n \n-#[cfg(feature = \"llvm-libunwind\")]\n+#[cfg(all(not(bootstrap), feature = \"llvm-libunwind\"))]\n mod llvm_libunwind {\n     use std::env;\n     use std::path::Path;"}, {"sha": "7e640897af70559fbd6db9f526b4f64f9d4459a6", "filename": "src/libunwind/libunwind.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibunwind%2Flibunwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Flibunwind%2Flibunwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibunwind%2Flibunwind.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -67,6 +67,8 @@ pub enum _Unwind_Context {}\n \n pub type _Unwind_Exception_Cleanup_Fn = extern \"C\" fn(unwind_code: _Unwind_Reason_Code,\n                                                       exception: *mut _Unwind_Exception);\n+#[cfg_attr(all(not(bootstrap), feature = \"llvm-libunwind\"),\n+           link(name = \"unwind\", kind = \"static\"))]\n extern \"C\" {\n     #[unwind(allowed)]\n     pub fn _Unwind_Resume(exception: *mut _Unwind_Exception) -> !;\n@@ -91,6 +93,8 @@ if #[cfg(all(any(target_os = \"ios\", target_os = \"netbsd\", not(target_arch = \"arm\n     }\n     pub use _Unwind_Action::*;\n \n+    #[cfg_attr(all(not(bootstrap), feature = \"llvm-libunwind\"),\n+               link(name = \"unwind\", kind = \"static\"))]\n     extern \"C\" {\n         pub fn _Unwind_GetGR(ctx: *mut _Unwind_Context, reg_index: c_int) -> _Unwind_Word;\n         pub fn _Unwind_SetGR(ctx: *mut _Unwind_Context, reg_index: c_int, value: _Unwind_Word);\n@@ -144,6 +148,8 @@ if #[cfg(all(any(target_os = \"ios\", target_os = \"netbsd\", not(target_arch = \"arm\n     pub const UNWIND_POINTER_REG: c_int = 12;\n     pub const UNWIND_IP_REG: c_int = 15;\n \n+    #[cfg_attr(all(not(bootstrap), feature = \"llvm-libunwind\"),\n+               link(name = \"unwind\", kind = \"static\"))]\n     extern \"C\" {\n         fn _Unwind_VRS_Get(ctx: *mut _Unwind_Context,\n                            regclass: _Unwind_VRS_RegClass,\n@@ -206,6 +212,8 @@ if #[cfg(all(any(target_os = \"ios\", target_os = \"netbsd\", not(target_arch = \"arm\n cfg_if::cfg_if! {\n if #[cfg(not(all(target_os = \"ios\", target_arch = \"arm\")))] {\n     // Not 32-bit iOS\n+    #[cfg_attr(all(not(bootstrap), feature = \"llvm-libunwind\"),\n+               link(name = \"unwind\", kind = \"static\"))]\n     extern \"C\" {\n         #[unwind(allowed)]\n         pub fn _Unwind_RaiseException(exception: *mut _Unwind_Exception) -> _Unwind_Reason_Code;\n@@ -215,6 +223,8 @@ if #[cfg(not(all(target_os = \"ios\", target_arch = \"arm\")))] {\n     }\n } else {\n     // 32-bit iOS uses SjLj and does not provide _Unwind_Backtrace()\n+    #[cfg_attr(all(not(bootstrap), feature = \"llvm-libunwind\"),\n+               link(name = \"unwind\", kind = \"static\"))]\n     extern \"C\" {\n         #[unwind(allowed)]\n         pub fn _Unwind_SjLj_RaiseException(e: *mut _Unwind_Exception) -> _Unwind_Reason_Code;"}, {"sha": "34f30548c5a8157f7ee2ea0e3362888ff1ee8677", "filename": "src/test/incremental/add_private_fn_at_krate_root_cc/struct_point.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Ftest%2Fincremental%2Fadd_private_fn_at_krate_root_cc%2Fstruct_point.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Ftest%2Fincremental%2Fadd_private_fn_at_krate_root_cc%2Fstruct_point.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fadd_private_fn_at_krate_root_cc%2Fstruct_point.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -5,7 +5,7 @@\n // revisions:cfail1 cfail2\n // compile-flags: -Z query-dep-graph\n // aux-build:point.rs\n-// compile-pass\n+// build-pass (FIXME(62277): could be check-pass?)\n \n #![feature(rustc_attrs)]\n #![feature(stmt_expr_attributes)]"}, {"sha": "662aa5353313401f99dabd3b79546c7b2529d9b0", "filename": "src/test/incremental/change_add_field/struct_point.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Ftest%2Fincremental%2Fchange_add_field%2Fstruct_point.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Ftest%2Fincremental%2Fchange_add_field%2Fstruct_point.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fchange_add_field%2Fstruct_point.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -5,7 +5,7 @@\n \n // revisions:cfail1 cfail2\n // compile-flags: -Z query-dep-graph\n-// compile-pass\n+// build-pass (FIXME(62277): could be check-pass?)\n \n #![feature(rustc_attrs)]\n #![feature(stmt_expr_attributes)]"}, {"sha": "f5d1acb621be38e65e868ab3ef75df8b297c5bb4", "filename": "src/test/incremental/change_crate_dep_kind.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Ftest%2Fincremental%2Fchange_crate_dep_kind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Ftest%2Fincremental%2Fchange_crate_dep_kind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fchange_crate_dep_kind.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -3,7 +3,7 @@\n \n // revisions:cfail1 cfail2\n // compile-flags: -Z query-dep-graph -Cpanic=unwind\n-// compile-pass\n+// build-pass (FIXME(62277): could be check-pass?)\n \n #![feature(panic_unwind)]\n "}, {"sha": "722e62ef11ded4ca086da662105f52c372828d3f", "filename": "src/test/incremental/change_private_fn/struct_point.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Ftest%2Fincremental%2Fchange_private_fn%2Fstruct_point.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Ftest%2Fincremental%2Fchange_private_fn%2Fstruct_point.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fchange_private_fn%2Fstruct_point.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -3,7 +3,7 @@\n \n // revisions:cfail1 cfail2\n // compile-flags: -Z query-dep-graph\n-// compile-pass\n+// build-pass (FIXME(62277): could be check-pass?)\n \n #![feature(rustc_attrs)]\n #![feature(stmt_expr_attributes)]"}, {"sha": "384441d6d0c71e510f4cb46f16f864906b01d21b", "filename": "src/test/incremental/change_private_fn_cc/struct_point.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Ftest%2Fincremental%2Fchange_private_fn_cc%2Fstruct_point.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Ftest%2Fincremental%2Fchange_private_fn_cc%2Fstruct_point.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fchange_private_fn_cc%2Fstruct_point.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -4,7 +4,7 @@\n // revisions:cfail1 cfail2\n // compile-flags: -Z query-dep-graph\n // aux-build:point.rs\n-// compile-pass\n+// build-pass (FIXME(62277): could be check-pass?)\n \n #![crate_type = \"rlib\"]\n #![feature(rustc_attrs)]"}, {"sha": "ec5899f3119d86b7e8e8c92a865a221a5fd8cabc", "filename": "src/test/incremental/change_private_impl_method/struct_point.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Ftest%2Fincremental%2Fchange_private_impl_method%2Fstruct_point.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Ftest%2Fincremental%2Fchange_private_impl_method%2Fstruct_point.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fchange_private_impl_method%2Fstruct_point.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -3,7 +3,7 @@\n \n // revisions:cfail1 cfail2\n // compile-flags: -Z query-dep-graph\n-// compile-pass\n+// build-pass (FIXME(62277): could be check-pass?)\n \n #![feature(rustc_attrs)]\n #![feature(stmt_expr_attributes)]"}, {"sha": "f0e78f8d0a48341a32814fe882e7b3fb123576a6", "filename": "src/test/incremental/change_private_impl_method_cc/struct_point.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Ftest%2Fincremental%2Fchange_private_impl_method_cc%2Fstruct_point.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Ftest%2Fincremental%2Fchange_private_impl_method_cc%2Fstruct_point.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fchange_private_impl_method_cc%2Fstruct_point.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -4,7 +4,7 @@\n // revisions:cfail1 cfail2\n // compile-flags: -Z query-dep-graph\n // aux-build:point.rs\n-// compile-pass\n+// build-pass (FIXME(62277): could be check-pass?)\n \n #![crate_type = \"rlib\"]\n #![feature(rustc_attrs)]"}, {"sha": "641d20ed6cc8ab86ff01d2ce606cb656d1745197", "filename": "src/test/incremental/change_pub_inherent_method_body/struct_point.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Ftest%2Fincremental%2Fchange_pub_inherent_method_body%2Fstruct_point.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Ftest%2Fincremental%2Fchange_pub_inherent_method_body%2Fstruct_point.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fchange_pub_inherent_method_body%2Fstruct_point.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -2,7 +2,7 @@\n \n // revisions:cfail1 cfail2\n // compile-flags: -Z query-dep-graph\n-// compile-pass\n+// build-pass (FIXME(62277): could be check-pass?)\n \n #![crate_type = \"rlib\"]\n #![feature(rustc_attrs)]"}, {"sha": "9b8f9517bf149783e8fa87c0984bccaee764c2b9", "filename": "src/test/incremental/change_pub_inherent_method_sig/struct_point.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Ftest%2Fincremental%2Fchange_pub_inherent_method_sig%2Fstruct_point.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Ftest%2Fincremental%2Fchange_pub_inherent_method_sig%2Fstruct_point.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fchange_pub_inherent_method_sig%2Fstruct_point.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -2,7 +2,7 @@\n \n // revisions:cfail1 cfail2\n // compile-flags: -Z query-dep-graph\n-// compile-pass\n+// build-pass (FIXME(62277): could be check-pass?)\n \n #![crate_type = \"rlib\"]\n #![feature(rustc_attrs)]"}, {"sha": "d859cbef39f0971ebbcbdcc1e0ad61d9783369df", "filename": "src/test/incremental/hashes/call_expressions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Ftest%2Fincremental%2Fhashes%2Fcall_expressions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Ftest%2Fincremental%2Fhashes%2Fcall_expressions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Fcall_expressions.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -5,7 +5,7 @@\n // and make sure that the hash has changed, then change nothing between rev2 and\n // rev3 and make sure that the hash has not changed.\n \n-// compile-pass\n+// build-pass (FIXME(62277): could be check-pass?)\n // revisions: cfail1 cfail2 cfail3\n // compile-flags: -Z query-dep-graph -Zincremental-ignore-spans\n "}, {"sha": "24ab6b8e1845567a4fce6a7a6fa465ee92657573", "filename": "src/test/incremental/hashes/closure_expressions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Ftest%2Fincremental%2Fhashes%2Fclosure_expressions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Ftest%2Fincremental%2Fhashes%2Fclosure_expressions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Fclosure_expressions.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -5,7 +5,7 @@\n // and make sure that the hash has changed, then change nothing between rev2 and\n // rev3 and make sure that the hash has not changed.\n \n-// compile-pass\n+// build-pass (FIXME(62277): could be check-pass?)\n // revisions: cfail1 cfail2 cfail3\n // compile-flags: -Z query-dep-graph -Zincremental-ignore-spans\n "}, {"sha": "8e713a1d992377c877d876102d97915e60877988", "filename": "src/test/incremental/hashes/consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Ftest%2Fincremental%2Fhashes%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Ftest%2Fincremental%2Fhashes%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Fconsts.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -5,7 +5,7 @@\n // and make sure that the hash has changed, then change nothing between rev2 and\n // rev3 and make sure that the hash has not changed.\n \n-// compile-pass\n+// build-pass (FIXME(62277): could be check-pass?)\n // revisions: cfail1 cfail2 cfail3\n // compile-flags: -Z query-dep-graph -Zincremental-ignore-spans\n "}, {"sha": "575b2e92966eab77abee99076670c9c4511a904e", "filename": "src/test/incremental/hashes/enum_constructors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Ftest%2Fincremental%2Fhashes%2Fenum_constructors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Ftest%2Fincremental%2Fhashes%2Fenum_constructors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Fenum_constructors.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -5,7 +5,7 @@\n // and make sure that the hash has changed, then change nothing between rev2 and\n // rev3 and make sure that the hash has not changed.\n \n-// compile-pass\n+// build-pass (FIXME(62277): could be check-pass?)\n // revisions: cfail1 cfail2 cfail3\n // compile-flags: -Z query-dep-graph -Zincremental-ignore-spans\n "}, {"sha": "7256c1aa15326e822deef19f419e778df094dde2", "filename": "src/test/incremental/hashes/enum_defs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Ftest%2Fincremental%2Fhashes%2Fenum_defs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Ftest%2Fincremental%2Fhashes%2Fenum_defs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Fenum_defs.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -10,7 +10,7 @@\n // results in a change of the ICH for the enum's metadata, and that it stays\n // the same between rev2 and rev3.\n \n-// compile-pass\n+// build-pass (FIXME(62277): could be check-pass?)\n // revisions: cfail1 cfail2 cfail3\n // compile-flags: -Z query-dep-graph -Zincremental-ignore-spans\n "}, {"sha": "ef275cabeaff991b435a2de86e1a3b3986387547", "filename": "src/test/incremental/hashes/exported_vs_not.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Ftest%2Fincremental%2Fhashes%2Fexported_vs_not.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Ftest%2Fincremental%2Fhashes%2Fexported_vs_not.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Fexported_vs_not.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -1,4 +1,4 @@\n-// compile-pass\n+// build-pass (FIXME(62277): could be check-pass?)\n // revisions: cfail1 cfail2 cfail3\n // compile-flags: -Z query-dep-graph -Zincremental-ignore-spans\n "}, {"sha": "0b9a0fd79451a1ea1db4d9e61bd6d28d2ea3b70d", "filename": "src/test/incremental/hashes/extern_mods.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Ftest%2Fincremental%2Fhashes%2Fextern_mods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Ftest%2Fincremental%2Fhashes%2Fextern_mods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Fextern_mods.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -5,7 +5,7 @@\n // and make sure that the hash has changed, then change nothing between rev2 and\n // rev3 and make sure that the hash has not changed.\n \n-// compile-pass\n+// build-pass (FIXME(62277): could be check-pass?)\n // revisions: cfail1 cfail2 cfail3\n // compile-flags: -Z query-dep-graph -Zincremental-ignore-spans\n "}, {"sha": "ca45d36a6b0e4ec970802ad23ee7183870168dc4", "filename": "src/test/incremental/hashes/for_loops.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Ftest%2Fincremental%2Fhashes%2Ffor_loops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Ftest%2Fincremental%2Fhashes%2Ffor_loops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Ffor_loops.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -5,7 +5,7 @@\n // and make sure that the hash has changed, then change nothing between rev2 and\n // rev3 and make sure that the hash has not changed.\n \n-// compile-pass\n+// build-pass (FIXME(62277): could be check-pass?)\n // revisions: cfail1 cfail2 cfail3\n // compile-flags: -Z query-dep-graph -Zincremental-ignore-spans\n "}, {"sha": "84680a52ff3cefee9f38b00087f07b0dc8ed357e", "filename": "src/test/incremental/hashes/function_interfaces.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Ftest%2Fincremental%2Fhashes%2Ffunction_interfaces.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Ftest%2Fincremental%2Fhashes%2Ffunction_interfaces.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Ffunction_interfaces.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -5,7 +5,7 @@\n // and make sure that the hash has changed, then change nothing between rev2 and\n // rev3 and make sure that the hash has not changed.\n \n-// compile-pass\n+// build-pass (FIXME(62277): could be check-pass?)\n // revisions: cfail1 cfail2 cfail3\n // compile-flags: -Z query-dep-graph -Zincremental-ignore-spans\n "}, {"sha": "b84c393573b919874877da992419bd6dee37783d", "filename": "src/test/incremental/hashes/if_expressions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Ftest%2Fincremental%2Fhashes%2Fif_expressions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Ftest%2Fincremental%2Fhashes%2Fif_expressions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Fif_expressions.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -5,7 +5,7 @@\n // and make sure that the hash has changed, then change nothing between rev2 and\n // rev3 and make sure that the hash has not changed.\n \n-// compile-pass\n+// build-pass (FIXME(62277): could be check-pass?)\n // revisions: cfail1 cfail2 cfail3\n // compile-flags: -Z query-dep-graph -Zincremental-ignore-spans\n "}, {"sha": "4d39ed68701dd9ec364db0e9ae640a03465fec4e", "filename": "src/test/incremental/hashes/indexing_expressions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Ftest%2Fincremental%2Fhashes%2Findexing_expressions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Ftest%2Fincremental%2Fhashes%2Findexing_expressions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Findexing_expressions.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -5,7 +5,7 @@\n // and make sure that the hash has changed, then change nothing between rev2 and\n // rev3 and make sure that the hash has not changed.\n \n-// compile-pass\n+// build-pass (FIXME(62277): could be check-pass?)\n // revisions: cfail1 cfail2 cfail3\n // compile-flags: -Z query-dep-graph -Zincremental-ignore-spans\n "}, {"sha": "882383e84195792334e69352e860e2277e8c3e54", "filename": "src/test/incremental/hashes/inherent_impls.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Ftest%2Fincremental%2Fhashes%2Finherent_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Ftest%2Fincremental%2Fhashes%2Finherent_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Finherent_impls.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -5,7 +5,7 @@\n // and make sure that the hash has changed, then change nothing between rev2 and\n // rev3 and make sure that the hash has not changed.\n \n-// compile-pass\n+// build-pass (FIXME(62277): could be check-pass?)\n // revisions: cfail1 cfail2 cfail3\n // compile-flags: -Z query-dep-graph -Zincremental-ignore-spans\n "}, {"sha": "deb1c45a52885252598504aa637848dcfda33d28", "filename": "src/test/incremental/hashes/inline_asm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Ftest%2Fincremental%2Fhashes%2Finline_asm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Ftest%2Fincremental%2Fhashes%2Finline_asm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Finline_asm.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -5,7 +5,7 @@\n // and make sure that the hash has changed, then change nothing between rev2 and\n // rev3 and make sure that the hash has not changed.\n \n-// compile-pass\n+// build-pass (FIXME(62277): could be check-pass?)\n // revisions: cfail1 cfail2 cfail3\n // compile-flags: -Z query-dep-graph -Zincremental-ignore-spans\n "}, {"sha": "68545b7daaa5cafd70c25ab488f701743a85b611", "filename": "src/test/incremental/hashes/let_expressions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Ftest%2Fincremental%2Fhashes%2Flet_expressions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Ftest%2Fincremental%2Fhashes%2Flet_expressions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Flet_expressions.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -5,7 +5,7 @@\n // and make sure that the hash has changed, then change nothing between rev2 and\n // rev3 and make sure that the hash has not changed.\n \n-// compile-pass\n+// build-pass (FIXME(62277): could be check-pass?)\n // revisions: cfail1 cfail2 cfail3\n // compile-flags: -Z query-dep-graph -Zincremental-ignore-spans\n "}, {"sha": "6222d948c98e915078d79f10bc43c17eeed7acad", "filename": "src/test/incremental/hashes/loop_expressions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Ftest%2Fincremental%2Fhashes%2Floop_expressions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Ftest%2Fincremental%2Fhashes%2Floop_expressions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Floop_expressions.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -5,7 +5,7 @@\n // and make sure that the hash has changed, then change nothing between rev2 and\n // rev3 and make sure that the hash has not changed.\n \n-// compile-pass\n+// build-pass (FIXME(62277): could be check-pass?)\n // revisions: cfail1 cfail2 cfail3\n // compile-flags: -Z query-dep-graph -Zincremental-ignore-spans\n "}, {"sha": "840b2222d90a1d2a53dafec68ef9ce0b759a701b", "filename": "src/test/incremental/hashes/match_expressions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Ftest%2Fincremental%2Fhashes%2Fmatch_expressions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Ftest%2Fincremental%2Fhashes%2Fmatch_expressions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Fmatch_expressions.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -5,7 +5,7 @@\n // and make sure that the hash has changed, then change nothing between rev2 and\n // rev3 and make sure that the hash has not changed.\n \n-// compile-pass\n+// build-pass (FIXME(62277): could be check-pass?)\n // revisions: cfail1 cfail2 cfail3\n // compile-flags: -Z query-dep-graph -Zincremental-ignore-spans\n "}, {"sha": "b370fcce8efda7b040a92492e1c697d7186806de", "filename": "src/test/incremental/hashes/panic_exprs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Ftest%2Fincremental%2Fhashes%2Fpanic_exprs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Ftest%2Fincremental%2Fhashes%2Fpanic_exprs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Fpanic_exprs.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -8,7 +8,7 @@\n // and make sure that the hash has changed, then change nothing between rev2 and\n // rev3 and make sure that the hash has not changed.\n \n-// compile-pass\n+// build-pass (FIXME(62277): could be check-pass?)\n // revisions: cfail1 cfail2 cfail3\n // compile-flags: -Z query-dep-graph -C debug-assertions\n "}, {"sha": "6f74e0fdbc06e1a3dd18a2b890e03897fe5b2247", "filename": "src/test/incremental/hashes/statics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Ftest%2Fincremental%2Fhashes%2Fstatics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Ftest%2Fincremental%2Fhashes%2Fstatics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Fstatics.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -5,7 +5,7 @@\n // and make sure that the hash has changed, then change nothing between rev2 and\n // rev3 and make sure that the hash has not changed.\n \n-// compile-pass\n+// build-pass (FIXME(62277): could be check-pass?)\n // revisions: cfail1 cfail2 cfail3\n // compile-flags: -Z query-dep-graph -Zincremental-ignore-spans\n "}, {"sha": "b708b99eabc9927919353bd1dc075b1fd5a268b9", "filename": "src/test/incremental/hashes/struct_constructors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Ftest%2Fincremental%2Fhashes%2Fstruct_constructors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Ftest%2Fincremental%2Fhashes%2Fstruct_constructors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Fstruct_constructors.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -5,7 +5,7 @@\n // and make sure that the hash has changed, then change nothing between rev2 and\n // rev3 and make sure that the hash has not changed.\n \n-// compile-pass\n+// build-pass (FIXME(62277): could be check-pass?)\n // revisions: cfail1 cfail2 cfail3\n // compile-flags: -Z query-dep-graph -Zincremental-ignore-spans\n "}, {"sha": "e0c5696483158b008794c7b9840637dcda0d400d", "filename": "src/test/incremental/hashes/struct_defs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Ftest%2Fincremental%2Fhashes%2Fstruct_defs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Ftest%2Fincremental%2Fhashes%2Fstruct_defs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Fstruct_defs.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -10,7 +10,7 @@\n // results in a change of the ICH for the struct's metadata, and that it stays\n // the same between rev2 and rev3.\n \n-// compile-pass\n+// build-pass (FIXME(62277): could be check-pass?)\n // revisions: cfail1 cfail2 cfail3\n // compile-flags: -Z query-dep-graph -Zincremental-ignore-spans\n "}, {"sha": "30b4e306820edfc9d6dfd4f2770c7bcf76c6d294", "filename": "src/test/incremental/hashes/trait_defs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Ftest%2Fincremental%2Fhashes%2Ftrait_defs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Ftest%2Fincremental%2Fhashes%2Ftrait_defs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Ftrait_defs.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -10,7 +10,7 @@\n // results in a change of the ICH for the trait's metadata, and that it stays\n // the same between rev2 and rev3.\n \n-// compile-pass\n+// build-pass (FIXME(62277): could be check-pass?)\n // revisions: cfail1 cfail2 cfail3\n // compile-flags: -Z query-dep-graph -Zincremental-ignore-spans\n "}, {"sha": "fa28b2ebedd132aa2a90b9b520edbcbc763832cf", "filename": "src/test/incremental/hashes/trait_impls.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Ftest%2Fincremental%2Fhashes%2Ftrait_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Ftest%2Fincremental%2Fhashes%2Ftrait_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Ftrait_impls.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -5,7 +5,7 @@\n // and make sure that the hash has changed, then change nothing between rev2 and\n // rev3 and make sure that the hash has not changed.\n \n-// compile-pass\n+// build-pass (FIXME(62277): could be check-pass?)\n // revisions: cfail1 cfail2 cfail3\n // compile-flags: -Z query-dep-graph -Zincremental-ignore-spans\n "}, {"sha": "264e8f926ffe56ada243411e1f9531eb47387c05", "filename": "src/test/incremental/hashes/type_defs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Ftest%2Fincremental%2Fhashes%2Ftype_defs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Ftest%2Fincremental%2Fhashes%2Ftype_defs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Ftype_defs.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -10,7 +10,7 @@\n // results in a change of the ICH for the enum's metadata, and that it stays\n // the same between rev2 and rev3.\n \n-// compile-pass\n+// build-pass (FIXME(62277): could be check-pass?)\n // revisions: cfail1 cfail2 cfail3\n // compile-flags: -Z query-dep-graph -Zincremental-ignore-spans\n "}, {"sha": "776a0273ca7b6bf831d1460da85de2bd7051ff48", "filename": "src/test/incremental/hashes/unary_and_binary_exprs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Ftest%2Fincremental%2Fhashes%2Funary_and_binary_exprs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Ftest%2Fincremental%2Fhashes%2Funary_and_binary_exprs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Funary_and_binary_exprs.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -5,7 +5,7 @@\n // and make sure that the hash has changed, then change nothing between rev2 and\n // rev3 and make sure that the hash has not changed.\n \n-// compile-pass\n+// build-pass (FIXME(62277): could be check-pass?)\n // revisions: cfail1 cfail2 cfail3\n // compile-flags: -Z query-dep-graph -Zincremental-ignore-spans\n "}, {"sha": "af2066b90f1d8aab93363f49f6de08a435bf629c", "filename": "src/test/incremental/hashes/while_let_loops.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Ftest%2Fincremental%2Fhashes%2Fwhile_let_loops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Ftest%2Fincremental%2Fhashes%2Fwhile_let_loops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Fwhile_let_loops.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -5,7 +5,7 @@\n // and make sure that the hash has changed, then change nothing between rev2 and\n // rev3 and make sure that the hash has not changed.\n \n-// compile-pass\n+// build-pass (FIXME(62277): could be check-pass?)\n // revisions: cfail1 cfail2 cfail3\n // compile-flags: -Z query-dep-graph -Zincremental-ignore-spans\n "}, {"sha": "d8ec76d76aa31977a3fcbfbec2d006584158bc75", "filename": "src/test/incremental/hashes/while_loops.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Ftest%2Fincremental%2Fhashes%2Fwhile_loops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Ftest%2Fincremental%2Fhashes%2Fwhile_loops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Fwhile_loops.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -5,7 +5,7 @@\n // and make sure that the hash has changed, then change nothing between rev2 and\n // rev3 and make sure that the hash has not changed.\n \n-// compile-pass\n+// build-pass (FIXME(62277): could be check-pass?)\n // revisions: cfail1 cfail2 cfail3\n // compile-flags: -Z query-dep-graph -Zincremental-ignore-spans\n "}, {"sha": "b2b7e663151e2630b66e763d1621860036bf2754", "filename": "src/test/incremental/ich_nested_items.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Ftest%2Fincremental%2Fich_nested_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Ftest%2Fincremental%2Fich_nested_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fich_nested_items.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -2,7 +2,7 @@\n // the nested items (or even added new ones).\n \n // revisions: cfail1 cfail2\n-// compile-pass\n+// build-pass (FIXME(62277): could be check-pass?)\n \n #![crate_type = \"rlib\"]\n #![feature(rustc_attrs)]"}, {"sha": "becc1538fb22506a9b44effcb379e73a6ec15840", "filename": "src/test/incremental/incremental_proc_macro.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Ftest%2Fincremental%2Fincremental_proc_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Ftest%2Fincremental%2Fincremental_proc_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fincremental_proc_macro.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -1,6 +1,6 @@\n // aux-build:incremental_proc_macro_aux.rs\n // revisions: cfail1 cfail2\n-// compile-pass\n+// build-pass (FIXME(62277): could be check-pass?)\n \n // This test makes sure that we still find the proc-macro registrar function\n // when we compile proc-macros incrementally (see #47292)."}, {"sha": "b8d5303fb4734d0834b843ca5ed87e606d40aa3f", "filename": "src/test/incremental/issue-42602.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Ftest%2Fincremental%2Fissue-42602.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Ftest%2Fincremental%2Fissue-42602.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fissue-42602.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -8,7 +8,7 @@\n \n // revisions:cfail1 cfail2 cfail3\n // compile-flags:-Zquery-dep-graph\n-// compile-pass\n+// build-pass (FIXME(62277): could be check-pass?)\n \n #![feature(rustc_attrs)]\n "}, {"sha": "ab4d76eef364c7ad1484c44217bf8eb5b889ff2f", "filename": "src/test/incremental/issue-49595/issue-49595.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Ftest%2Fincremental%2Fissue-49595%2Fissue-49595.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Ftest%2Fincremental%2Fissue-49595%2Fissue-49595.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fissue-49595%2Fissue-49595.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -1,6 +1,6 @@\n // revisions:cfail1 cfail2 cfail3\n // compile-flags: -Z query-dep-graph --test\n-// compile-pass\n+// build-pass (FIXME(62277): could be check-pass?)\n \n #![feature(rustc_attrs)]\n #![crate_type = \"rlib\"]"}, {"sha": "709e9be663efa6ab207d3dae569676b4eda5b6ec", "filename": "src/test/incremental/issue-59523-on-implemented-is-not-unused.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Ftest%2Fincremental%2Fissue-59523-on-implemented-is-not-unused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Ftest%2Fincremental%2Fissue-59523-on-implemented-is-not-unused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fissue-59523-on-implemented-is-not-unused.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -3,7 +3,7 @@\n // subsequent runs) if incremental compilation is enabled.\n \n // revisions: cfail1 cfail2\n-// compile-pass\n+// build-pass (FIXME(62277): could be check-pass?)\n \n #![feature(on_unimplemented)]\n #![deny(unused_attributes)]"}, {"sha": "bfb5e539cc18ce06f3b00a54b59be4d79ff191bb", "filename": "src/test/incremental/issue-59524-layout-scalar-valid-range-is-not-unused.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Ftest%2Fincremental%2Fissue-59524-layout-scalar-valid-range-is-not-unused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Ftest%2Fincremental%2Fissue-59524-layout-scalar-valid-range-is-not-unused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fissue-59524-layout-scalar-valid-range-is-not-unused.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -4,7 +4,7 @@\n // enabled.\n \n // revisions: cfail1 cfail2\n-// compile-pass\n+// build-pass (FIXME(62277): could be check-pass?)\n \n #![feature(rustc_attrs)]\n #![deny(unused_attributes)]"}, {"sha": "6e791eacdf37a5336f024af92eb52732bde10ba1", "filename": "src/test/incremental/krate-inherent.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Ftest%2Fincremental%2Fkrate-inherent.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Ftest%2Fincremental%2Fkrate-inherent.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fkrate-inherent.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -1,6 +1,6 @@\n // revisions: cfail1 cfail2\n // compile-flags: -Z query-dep-graph\n-// compile-pass\n+// build-pass (FIXME(62277): could be check-pass?)\n \n #![allow(warnings)]\n #![feature(rustc_attrs)]"}, {"sha": "044d63fd2a9f12f81f0838d28d23ba6831168e1d", "filename": "src/test/incremental/macro_export.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Ftest%2Fincremental%2Fmacro_export.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Ftest%2Fincremental%2Fmacro_export.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fmacro_export.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -1,5 +1,5 @@\n // revisions: cfail1 cfail2 cfail3\n-// compile-pass\n+// build-pass (FIXME(62277): could be check-pass?)\n \n // This test case makes sure that we can compile with incremental compilation\n // enabled when there are macros exported from this crate. (See #37756)"}, {"sha": "b2411c0946fd4cc8e1f6ace189db33f237f5b56c", "filename": "src/test/incremental/remove_source_file/main.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Ftest%2Fincremental%2Fremove_source_file%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Ftest%2Fincremental%2Fremove_source_file%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fremove_source_file%2Fmain.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -6,7 +6,7 @@\n // Note that we specify -g so that the SourceFiles actually get referenced by the\n // incr. comp. cache:\n // compile-flags: -Z query-dep-graph -g\n-// compile-pass\n+// build-pass (FIXME(62277): could be check-pass?)\n \n #![crate_type= \"rlib\"]\n "}, {"sha": "b88acd2af75abf2f93ac9887dc0fc706e9f86a7d", "filename": "src/test/incremental/string_constant.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Ftest%2Fincremental%2Fstring_constant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Ftest%2Fincremental%2Fstring_constant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fstring_constant.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -1,6 +1,6 @@\n // revisions: cfail1 cfail2\n // compile-flags: -Z query-dep-graph\n-// compile-pass\n+// build-pass (FIXME(62277): could be check-pass?)\n \n #![allow(warnings)]\n #![feature(rustc_attrs)]"}, {"sha": "8160f8f3a99f9333645404e5493c0d3fbb98a001", "filename": "src/test/incremental/thinlto/cgu_invalidated_via_import.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Ftest%2Fincremental%2Fthinlto%2Fcgu_invalidated_via_import.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Ftest%2Fincremental%2Fthinlto%2Fcgu_invalidated_via_import.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fthinlto%2Fcgu_invalidated_via_import.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -4,7 +4,7 @@\n \n // revisions: cfail1 cfail2 cfail3\n // compile-flags: -Z query-dep-graph -O\n-// compile-pass\n+// build-pass (FIXME(62277): could be check-pass?)\n \n #![feature(rustc_attrs)]\n #![crate_type=\"rlib\"]"}, {"sha": "24e5d2438bd0ae3d23e3f8c2860963b5be84bcee", "filename": "src/test/incremental/thinlto/independent_cgus_dont_affect_each_other.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Ftest%2Fincremental%2Fthinlto%2Findependent_cgus_dont_affect_each_other.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Ftest%2Fincremental%2Fthinlto%2Findependent_cgus_dont_affect_each_other.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fthinlto%2Findependent_cgus_dont_affect_each_other.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -3,7 +3,7 @@\n \n // revisions: cfail1 cfail2 cfail3\n // compile-flags: -Z query-dep-graph -O\n-// compile-pass\n+// build-pass (FIXME(62277): could be check-pass?)\n \n #![feature(rustc_attrs)]\n #![crate_type=\"rlib\"]"}, {"sha": "a1d11f8aa5bbebbc728cf5968072843f30aa322d", "filename": "src/test/incremental/warnings-reemitted.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Ftest%2Fincremental%2Fwarnings-reemitted.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Ftest%2Fincremental%2Fwarnings-reemitted.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fwarnings-reemitted.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -1,6 +1,6 @@\n // revisions: cfail1 cfail2 cfail3\n // compile-flags: -Coverflow-checks=on\n-// compile-pass\n+// build-pass (FIXME(62277): could be check-pass?)\n \n #![allow(warnings)]\n #![warn(const_err)]"}, {"sha": "6028b8f5ab4918c9eaa58a15319d02146b67864c", "filename": "src/test/run-pass/packed/packed-with-inference-vars-issue-61402.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Ftest%2Frun-pass%2Fpacked%2Fpacked-with-inference-vars-issue-61402.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Ftest%2Frun-pass%2Fpacked%2Fpacked-with-inference-vars-issue-61402.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpacked%2Fpacked-with-inference-vars-issue-61402.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -0,0 +1,21 @@\n+// If a struct is packed and its last field has drop glue, then that\n+// field needs to be Sized (to allow it to be destroyed out-of-place).\n+//\n+// This is checked by the compiler during wfcheck. That check used\n+// to have problems with associated types in the last field - test\n+// that this doesn't ICE.\n+\n+#![allow(unused_imports, dead_code)]\n+\n+pub struct S;\n+\n+pub trait Trait<R> { type Assoc; }\n+\n+impl<X> Trait<X> for S { type Assoc = X; }\n+\n+#[repr(C, packed)]\n+struct PackedAssocSized {\n+    pos: Box<<S as Trait<usize>>::Assoc>,\n+}\n+\n+fn main() { println!(\"Hello, world!\"); }"}, {"sha": "0ab7e17f87b5a156a738fc3c37fa8b9f5e92b010", "filename": "src/test/run-pass/rfcs/rfc-2151-raw-identifiers/macros.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Ftest%2Frun-pass%2Frfcs%2Frfc-2151-raw-identifiers%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Ftest%2Frun-pass%2Frfcs%2Frfc-2151-raw-identifiers%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frfcs%2Frfc-2151-raw-identifiers%2Fmacros.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -1,7 +1,7 @@\n // run-pass\n #![feature(decl_macro)]\n \n-r#macro_rules! r#struct {\n+macro_rules! r#struct {\n     ($r#struct:expr) => { $r#struct }\n }\n "}, {"sha": "4dcf512d286ffdb471cf894f53534a63388ca2c7", "filename": "src/test/rustdoc-ui/cfg-test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Ftest%2Frustdoc-ui%2Fcfg-test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Ftest%2Frustdoc-ui%2Fcfg-test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fcfg-test.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -1,4 +1,4 @@\n-// compile-pass\n+// build-pass (FIXME(62277): could be check-pass?)\n // compile-flags:--test\n // normalize-stdout-test: \"src/test/rustdoc-ui\" -> \"$$DIR\"\n "}, {"sha": "d25ac633d7bf2b63d51b28435846d98145dafc47", "filename": "src/test/rustdoc-ui/coverage/basic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Ftest%2Frustdoc-ui%2Fcoverage%2Fbasic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Ftest%2Frustdoc-ui%2Fcoverage%2Fbasic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fcoverage%2Fbasic.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -1,5 +1,5 @@\n // compile-flags:-Z unstable-options --show-coverage\n-// compile-pass\n+// build-pass (FIXME(62277): could be check-pass?)\n \n #![feature(extern_types)]\n "}, {"sha": "27bcf6f39383a604cb7120f09504d9dd2339e564", "filename": "src/test/rustdoc-ui/coverage/empty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Ftest%2Frustdoc-ui%2Fcoverage%2Fempty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Ftest%2Frustdoc-ui%2Fcoverage%2Fempty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fcoverage%2Fempty.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -1,4 +1,4 @@\n // compile-flags:-Z unstable-options --show-coverage\n-// compile-pass\n+// build-pass (FIXME(62277): could be check-pass?)\n \n // an empty crate still has one item to document: the crate root"}, {"sha": "e4171d7cfb2508d27651410aeb52343bbc341af0", "filename": "src/test/rustdoc-ui/coverage/enums.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Ftest%2Frustdoc-ui%2Fcoverage%2Fenums.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Ftest%2Frustdoc-ui%2Fcoverage%2Fenums.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fcoverage%2Fenums.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -1,5 +1,5 @@\n // compile-flags:-Z unstable-options --show-coverage\n-// compile-pass\n+// build-pass (FIXME(62277): could be check-pass?)\n \n //! (remember the crate root is still a module)\n "}, {"sha": "414d6f8405816bb5bacad1ad992132ead1f9d711", "filename": "src/test/rustdoc-ui/coverage/exotic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Ftest%2Frustdoc-ui%2Fcoverage%2Fexotic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Ftest%2Frustdoc-ui%2Fcoverage%2Fexotic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fcoverage%2Fexotic.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -1,5 +1,5 @@\n // compile-flags:-Z unstable-options --show-coverage\n-// compile-pass\n+// build-pass (FIXME(62277): could be check-pass?)\n \n #![feature(doc_keyword)]\n "}, {"sha": "6ff1bfa7275deabeb411b322959fd850a7c0bdc3", "filename": "src/test/rustdoc-ui/coverage/private.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Ftest%2Frustdoc-ui%2Fcoverage%2Fprivate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Ftest%2Frustdoc-ui%2Fcoverage%2Fprivate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fcoverage%2Fprivate.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -1,5 +1,5 @@\n // compile-flags:-Z unstable-options --show-coverage --document-private-items\n-// compile-pass\n+// build-pass (FIXME(62277): could be check-pass?)\n \n #![allow(unused)]\n "}, {"sha": "b7d2b1dc10c62fdb36c4ab0e207904d14d1e9803", "filename": "src/test/rustdoc-ui/coverage/statics-consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Ftest%2Frustdoc-ui%2Fcoverage%2Fstatics-consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Ftest%2Frustdoc-ui%2Fcoverage%2Fstatics-consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fcoverage%2Fstatics-consts.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -1,5 +1,5 @@\n // compile-flags:-Z unstable-options --show-coverage\n-// compile-pass\n+// build-pass (FIXME(62277): could be check-pass?)\n \n //! gotta make sure we can count statics and consts correctly, too\n "}, {"sha": "40d68423f1bc6f3a34382530949bdd43f816a67a", "filename": "src/test/rustdoc-ui/coverage/traits.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Ftest%2Frustdoc-ui%2Fcoverage%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Ftest%2Frustdoc-ui%2Fcoverage%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fcoverage%2Ftraits.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -1,5 +1,5 @@\n // compile-flags:-Z unstable-options --show-coverage\n-// compile-pass\n+// build-pass (FIXME(62277): could be check-pass?)\n \n #![feature(trait_alias)]\n "}, {"sha": "21169eeb8c83e9677838b3345f3b427d57a9ae39", "filename": "src/test/rustdoc-ui/deprecated-attrs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Ftest%2Frustdoc-ui%2Fdeprecated-attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Ftest%2Frustdoc-ui%2Fdeprecated-attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fdeprecated-attrs.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -1,4 +1,4 @@\n-// compile-pass\n+// build-pass (FIXME(62277): could be check-pass?)\n \n #![doc(no_default_passes, passes = \"collapse-docs unindent-comments\")]\n "}, {"sha": "67bd9f73eeb5b1972882ee21faaeae2d9ccdaae9", "filename": "src/test/rustdoc-ui/intra-links-warning-crlf.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Ftest%2Frustdoc-ui%2Fintra-links-warning-crlf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Ftest%2Frustdoc-ui%2Fintra-links-warning-crlf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-links-warning-crlf.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -1,6 +1,6 @@\n // ignore-tidy-cr\n \n-// compile-pass\n+// build-pass (FIXME(62277): could be check-pass?)\n \n // This file checks the spans of intra-link warnings in a file with CRLF line endings. The\n // .gitattributes file in this directory should enforce it."}, {"sha": "20770efa95315d6c2e19b5899b60bf6827fbb02b", "filename": "src/test/rustdoc-ui/intra-links-warning.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Ftest%2Frustdoc-ui%2Fintra-links-warning.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Ftest%2Frustdoc-ui%2Fintra-links-warning.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-links-warning.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -1,4 +1,4 @@\n-// compile-pass\n+// build-pass (FIXME(62277): could be check-pass?)\n \n        //! Test with [Foo::baz], [Bar::foo], ...\n      //! , [Uniooon::X] and [Qux::Z]."}, {"sha": "2b02d47d4b851594baf940c05345d6b3b26b2e3c", "filename": "src/test/rustdoc-ui/invalid-syntax.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Ftest%2Frustdoc-ui%2Finvalid-syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Ftest%2Frustdoc-ui%2Finvalid-syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Finvalid-syntax.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -1,4 +1,4 @@\n-// compile-pass\n+// build-pass (FIXME(62277): could be check-pass?)\n \n /// ```\n /// \\__________pkt->size___________/          \\_result->size_/ \\__pkt->size__/"}, {"sha": "1bb19353ba2f761073477f18d585258c8ff395de", "filename": "src/test/rustdoc-ui/issue-58473-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Ftest%2Frustdoc-ui%2Fissue-58473-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Ftest%2Frustdoc-ui%2Fissue-58473-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fissue-58473-2.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -1,4 +1,4 @@\n-// compile-pass\n+// build-pass (FIXME(62277): could be check-pass?)\n \n #![deny(private_doc_tests)]\n "}, {"sha": "6756d3b5a6051bdf89e451113b49ff7b2646234f", "filename": "src/test/rustdoc-ui/issue-58473.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Ftest%2Frustdoc-ui%2Fissue-58473.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Ftest%2Frustdoc-ui%2Fissue-58473.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fissue-58473.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -1,4 +1,4 @@\n-// compile-pass\n+// build-pass (FIXME(62277): could be check-pass?)\n \n pub trait Foo {\n     /**"}, {"sha": "ffa421d4f7f2d2d22b7e20957bcfa7eceb6bbc3a", "filename": "src/test/rustdoc-ui/unused.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Ftest%2Frustdoc-ui%2Funused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Ftest%2Frustdoc-ui%2Funused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Funused.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -1,4 +1,4 @@\n-// compile-pass\n+// build-pass (FIXME(62277): could be check-pass?)\n \n // This test purpose is to check that unused_imports lint isn't fired\n // by rustdoc. Why would it? Because when rustdoc is running, it uses"}, {"sha": "fe42113eb2ee9df6af0041c1183f4846bb8e096c", "filename": "src/test/ui/anon-params-deprecated.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Ftest%2Fui%2Fanon-params-deprecated.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Ftest%2Fui%2Fanon-params-deprecated.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fanon-params-deprecated.fixed?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -1,7 +1,7 @@\n #![warn(anonymous_parameters)]\n // Test for the anonymous_parameters deprecation lint (RFC 1685)\n \n-// compile-pass\n+// build-pass (FIXME(62277): could be check-pass?)\n // edition:2015\n // run-rustfix\n "}, {"sha": "dc0357721ec73bf6ba559da92b3b0c7c9cea5ca8", "filename": "src/test/ui/anon-params-deprecated.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Ftest%2Fui%2Fanon-params-deprecated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Ftest%2Fui%2Fanon-params-deprecated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fanon-params-deprecated.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -1,7 +1,7 @@\n #![warn(anonymous_parameters)]\n // Test for the anonymous_parameters deprecation lint (RFC 1685)\n \n-// compile-pass\n+// build-pass (FIXME(62277): could be check-pass?)\n // edition:2015\n // run-rustfix\n "}, {"sha": "403cdbd7ff330a2a95ff57a76e03240f7faec8a1", "filename": "src/test/ui/associated-const/associated-const-trait-bound.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Ftest%2Fui%2Fassociated-const%2Fassociated-const-trait-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Ftest%2Fui%2Fassociated-const%2Fassociated-const-trait-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-const%2Fassociated-const-trait-bound.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -1,4 +1,4 @@\n-// compile-pass\n+// build-pass (FIXME(62277): could be check-pass?)\n \n trait ConstDefault {\n     const DEFAULT: Self;"}, {"sha": "f5a9bac6e3549bb8f5f366194619db93bd2d8a4d", "filename": "src/test/ui/associated-type-bounds/entails-sized-object-safety.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fentails-sized-object-safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fentails-sized-object-safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fentails-sized-object-safety.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -1,4 +1,4 @@\n-// compile-pass\n+// build-pass (FIXME(62277): could be check-pass?)\n \n #![feature(associated_type_bounds)]\n "}, {"sha": "b0703a4ee22b3b35fc792be2e98cd53a4a46c004", "filename": "src/test/ui/associated-type-bounds/trait-params.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Ftest%2Fui%2Fassociated-type-bounds%2Ftrait-params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Ftest%2Fui%2Fassociated-type-bounds%2Ftrait-params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Ftrait-params.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -1,4 +1,4 @@\n-// compile-pass\n+// build-pass (FIXME(62277): could be check-pass?)\n \n #![feature(associated_type_bounds)]\n "}, {"sha": "34bc0c9acbf4c1075249d6c54dbe7a5e5b0b3794", "filename": "src/test/ui/associated-type-bounds/type-alias.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Ftest%2Fui%2Fassociated-type-bounds%2Ftype-alias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Ftest%2Fui%2Fassociated-type-bounds%2Ftype-alias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Ftype-alias.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -1,4 +1,4 @@\n-// compile-pass\n+// build-pass (FIXME(62277): could be check-pass?)\n \n #![feature(associated_type_bounds)]\n "}, {"sha": "5e1b8c6280b81a7e94c99945cbf7c0bf31ee22d5", "filename": "src/test/ui/async-await/async-fn-send-uses-nonsend.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Ftest%2Fui%2Fasync-await%2Fasync-fn-send-uses-nonsend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Ftest%2Fui%2Fasync-await%2Fasync-fn-send-uses-nonsend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fasync-fn-send-uses-nonsend.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -1,4 +1,4 @@\n-// compile-pass\n+// build-pass (FIXME(62277): could be check-pass?)\n // edition:2018\n // compile-flags: --crate-type lib\n "}, {"sha": "e41a568ad29821542622da7dad943abc478601c9", "filename": "src/test/ui/async-await/async-matches-expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Ftest%2Fui%2Fasync-await%2Fasync-matches-expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Ftest%2Fui%2Fasync-await%2Fasync-matches-expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fasync-matches-expr.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -1,4 +1,4 @@\n-// compile-pass\n+// build-pass (FIXME(62277): could be check-pass?)\n // edition:2018\n \n #![feature(async_await, await_macro)]"}, {"sha": "2b69c9b701a42d61cd3dab0eb1f4b7d1137c2df1", "filename": "src/test/ui/async-await/async-with-closure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Ftest%2Fui%2Fasync-await%2Fasync-with-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Ftest%2Fui%2Fasync-await%2Fasync-with-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fasync-with-closure.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -1,4 +1,4 @@\n-// compile-pass\n+// build-pass (FIXME(62277): could be check-pass?)\n // edition:2018\n \n #![feature(async_await, await_macro)]"}, {"sha": "8b60f2f82f1d6c83fd41d778ffdc3d41bfd1a44c", "filename": "src/test/ui/async-await/generics-and-bounds.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Ftest%2Fui%2Fasync-await%2Fgenerics-and-bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Ftest%2Fui%2Fasync-await%2Fgenerics-and-bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fgenerics-and-bounds.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -1,4 +1,4 @@\n-// compile-pass\n+// build-pass (FIXME(62277): could be check-pass?)\n // edition:2018\n // compile-flags: --crate-type lib\n "}, {"sha": "a18fad8bb9150b8affd7ded502f34ea924d590f0", "filename": "src/test/ui/async-await/issue-61793.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Ftest%2Fui%2Fasync-await%2Fissue-61793.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Ftest%2Fui%2Fasync-await%2Fissue-61793.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-61793.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -3,7 +3,7 @@\n // while those two fields were at the same offset (which is impossible).\n // That is, memory ordering of `(X, ())`, but offsets of `((), X)`.\n \n-// compile-pass\n+// build-pass (FIXME(62277): could be check-pass?)\n // edition:2018\n \n #![feature(async_await)]"}, {"sha": "c493878e4c2dd17fa0550fe2b40cb98c91e270a5", "filename": "src/test/ui/async-await/issues/issue-53249.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-53249.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-53249.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-53249.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -1,4 +1,4 @@\n-// compile-pass\n+// build-pass (FIXME(62277): could be check-pass?)\n // edition:2018\n \n #![feature(arbitrary_self_types, async_await, await_macro)]"}, {"sha": "0cfe859b13b27af880184a88104181b54bf945d0", "filename": "src/test/ui/async-await/issues/issue-54974.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-54974.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-54974.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-54974.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -1,4 +1,4 @@\n-// compile-pass\n+// build-pass (FIXME(62277): could be check-pass?)\n // edition:2018\n \n #![feature(async_await, await_macro)]"}, {"sha": "deaba6904f446666f824fc6f4942d93c6002c8e2", "filename": "src/test/ui/async-await/issues/issue-55324.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-55324.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-55324.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-55324.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -1,4 +1,4 @@\n-// compile-pass\n+// build-pass (FIXME(62277): could be check-pass?)\n // edition:2018\n \n #![feature(async_await, await_macro)]"}, {"sha": "5868e022861a2bc2b3124f065cff10500bfd715f", "filename": "src/test/ui/async-await/issues/issue-58885.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-58885.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-58885.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-58885.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -1,4 +1,4 @@\n-// compile-pass\n+// build-pass (FIXME(62277): could be check-pass?)\n // edition:2018\n \n #![feature(async_await, await_macro)]"}, {"sha": "ffa70d3b43cb44dcc6c480fd15daf6fface6630d", "filename": "src/test/ui/async-await/issues/issue-59001.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-59001.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-59001.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-59001.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -1,4 +1,4 @@\n-// compile-pass\n+// build-pass (FIXME(62277): could be check-pass?)\n // edition:2018\n \n #![feature(async_await, await_macro)]"}, {"sha": "e4bdc96511e3c3f793322fb5dc274b2e63f683e7", "filename": "src/test/ui/async-await/issues/issue-60518.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-60518.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-60518.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-60518.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -1,4 +1,4 @@\n-// compile-pass\n+// build-pass (FIXME(62277): could be check-pass?)\n // edition:2018\n \n #![feature(async_await)]"}, {"sha": "2328ceb144f205ec9b842d8742ce732ebc170369", "filename": "src/test/ui/async-await/issues/issue-60655-latebound-regions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-60655-latebound-regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-60655-latebound-regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-60655-latebound-regions.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -1,6 +1,6 @@\n // Test that existential types are allowed to contain late-bound regions.\n \n-// compile-pass\n+// build-pass (FIXME(62277): could be check-pass?)\n // edition:2018\n \n #![feature(async_await, existential_type)]"}, {"sha": "99cdcbafc766fcb81de529a52c30ae472ac993d4", "filename": "src/test/ui/async-await/issues/issue-60674.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-60674.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-60674.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-60674.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -1,5 +1,5 @@\n // aux-build:issue-60674.rs\n-// compile-pass\n+// build-pass (FIXME(62277): could be check-pass?)\n // edition:2018\n #![feature(async_await)]\n "}, {"sha": "77ecc47dfef12cf66a9acdb5bf17ad1cacb4d900", "filename": "src/test/ui/async-await/issues/issue-61986.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-61986.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-61986.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-61986.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -1,4 +1,4 @@\n-// compile-pass\n+// build-pass (FIXME(62277): could be check-pass?)\n // edition:2018\n //\n // Tests that we properly handle StorageDead/StorageLives for temporaries"}, {"sha": "e1588aadab62c03d12d2d285d5434a8957e316bc", "filename": "src/test/ui/attributes/attr-before-view-item.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Ftest%2Fui%2Fattributes%2Fattr-before-view-item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Ftest%2Fui%2Fattributes%2Fattr-before-view-item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattributes%2Fattr-before-view-item.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -1,4 +1,4 @@\n-// compile-pass\n+// build-pass (FIXME(62277): could be check-pass?)\n // pretty-expanded FIXME #23616\n \n #![feature(rustc_attrs)]"}, {"sha": "c1f667372f5158c74de4bc387584daf46053b341", "filename": "src/test/ui/attributes/attr-before-view-item2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Ftest%2Fui%2Fattributes%2Fattr-before-view-item2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Ftest%2Fui%2Fattributes%2Fattr-before-view-item2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattributes%2Fattr-before-view-item2.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -1,4 +1,4 @@\n-// compile-pass\n+// build-pass (FIXME(62277): could be check-pass?)\n // pretty-expanded FIXME #23616\n \n #![feature(rustc_attrs)]"}, {"sha": "8119df0c40cb0c6aad4105ca9b69f52eab860b3a", "filename": "src/test/ui/attributes/attr-mix-new.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Ftest%2Fui%2Fattributes%2Fattr-mix-new.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Ftest%2Fui%2Fattributes%2Fattr-mix-new.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattributes%2Fattr-mix-new.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -1,4 +1,4 @@\n-// compile-pass\n+// build-pass (FIXME(62277): could be check-pass?)\n // pretty-expanded FIXME #23616\n \n #![feature(rustc_attrs)]"}, {"sha": "027b701e591babba97bf4d5ae52a733b4dcad9d4", "filename": "src/test/ui/attributes/class-attributes-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Ftest%2Fui%2Fattributes%2Fclass-attributes-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Ftest%2Fui%2Fattributes%2Fclass-attributes-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattributes%2Fclass-attributes-1.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -1,4 +1,4 @@\n-// compile-pass\n+// build-pass (FIXME(62277): could be check-pass?)\n // pp-exact - Make sure we actually print the attributes\n \n #![feature(rustc_attrs)]"}, {"sha": "6aba6b89427e4b2429469e2f805fd58d84fbebce", "filename": "src/test/ui/attributes/class-attributes-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Ftest%2Fui%2Fattributes%2Fclass-attributes-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Ftest%2Fui%2Fattributes%2Fclass-attributes-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattributes%2Fclass-attributes-2.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -1,4 +1,4 @@\n-// compile-pass\n+// build-pass (FIXME(62277): could be check-pass?)\n \n #![feature(rustc_attrs)]\n "}, {"sha": "c760a28ecf0bae1910ece6ef523c3a3c153c1290", "filename": "src/test/ui/attributes/item-attributes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Ftest%2Fui%2Fattributes%2Fitem-attributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Ftest%2Fui%2Fattributes%2Fitem-attributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattributes%2Fitem-attributes.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -2,7 +2,7 @@\n // for completeness since .rs files linked from .rc files support this\n // notation to specify their module's attributes\n \n-// compile-pass\n+// build-pass (FIXME(62277): could be check-pass?)\n \n #![feature(rustc_attrs)]\n "}, {"sha": "67439718bd3ccb2629635612fc4440916ff5c385", "filename": "src/test/ui/attributes/method-attributes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Ftest%2Fui%2Fattributes%2Fmethod-attributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Ftest%2Fui%2Fattributes%2Fmethod-attributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattributes%2Fmethod-attributes.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -1,4 +1,4 @@\n-// compile-pass\n+// build-pass (FIXME(62277): could be check-pass?)\n // pp-exact - Make sure we print all the attributes\n // pretty-expanded FIXME #23616\n "}, {"sha": "ffcdeb52a042f1383d6ef675afa87bde294f7349", "filename": "src/test/ui/attributes/variant-attributes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Ftest%2Fui%2Fattributes%2Fvariant-attributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Ftest%2Fui%2Fattributes%2Fvariant-attributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattributes%2Fvariant-attributes.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -1,4 +1,4 @@\n-// compile-pass\n+// build-pass (FIXME(62277): could be check-pass?)\n // pp-exact - Make sure we actually print the attributes\n // pretty-expanded FIXME #23616\n "}, {"sha": "cc43210d8e3b9407044fc0bcfde577bcff7b9051", "filename": "src/test/ui/bastion-of-the-turbofish.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Ftest%2Fui%2Fbastion-of-the-turbofish.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Ftest%2Fui%2Fbastion-of-the-turbofish.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbastion-of-the-turbofish.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -1,4 +1,4 @@\n-// compile-pass\n+// build-pass (FIXME(62277): could be check-pass?)\n \n // Bastion of the Turbofish\n // ------------------------"}, {"sha": "1d98067ce738ce396e1f1643190368299b702eb6", "filename": "src/test/ui/borrowck/issue-55552-ascribe-wildcard-to-structured-pattern.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Ftest%2Fui%2Fborrowck%2Fissue-55552-ascribe-wildcard-to-structured-pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Ftest%2Fui%2Fborrowck%2Fissue-55552-ascribe-wildcard-to-structured-pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-55552-ascribe-wildcard-to-structured-pattern.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -1,4 +1,4 @@\n-// compile-pass\n+// build-pass (FIXME(62277): could be check-pass?)\n \n // rust-lang/rust#55552: The strategy pnkfelix landed in PR #55274\n // (for ensuring that NLL respects user-provided lifetime annotations)"}, {"sha": "a4d6e9b777f0262b5f528a91ed696a2a9f82dcf3", "filename": "src/test/ui/check_match/issue-43253.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Ftest%2Fui%2Fcheck_match%2Fissue-43253.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Ftest%2Fui%2Fcheck_match%2Fissue-43253.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcheck_match%2Fissue-43253.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -1,4 +1,4 @@\n-// compile-pass\n+// build-pass (FIXME(62277): could be check-pass?)\n \n #![feature(exclusive_range_pattern)]\n #![warn(unreachable_patterns)]"}, {"sha": "5f02e642defca750a21b28027c91237b0c04f85e", "filename": "src/test/ui/closure-expected-type/expect-fn-supply-fn-multiple.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Ftest%2Fui%2Fclosure-expected-type%2Fexpect-fn-supply-fn-multiple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Ftest%2Fui%2Fclosure-expected-type%2Fexpect-fn-supply-fn-multiple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosure-expected-type%2Fexpect-fn-supply-fn-multiple.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -1,4 +1,4 @@\n-// compile-pass\n+// build-pass (FIXME(62277): could be check-pass?)\n \n #![allow(warnings)]\n "}, {"sha": "0ee738c2c2f3938497fc0954464b2c4b5a7e8f60", "filename": "src/test/ui/closure-expected-type/expect-infer-var-supply-ty-with-bound-region.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Ftest%2Fui%2Fclosure-expected-type%2Fexpect-infer-var-supply-ty-with-bound-region.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Ftest%2Fui%2Fclosure-expected-type%2Fexpect-infer-var-supply-ty-with-bound-region.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosure-expected-type%2Fexpect-infer-var-supply-ty-with-bound-region.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -1,4 +1,4 @@\n-// compile-pass\n+// build-pass (FIXME(62277): could be check-pass?)\n \n fn with_closure<F, A>(_: F)\n     where F: FnOnce(A, &u32)"}, {"sha": "15711da4b0fbb6037d386e2a85dd145682feac58", "filename": "src/test/ui/closure-expected-type/expect-infer-var-supply-ty-with-free-region.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Ftest%2Fui%2Fclosure-expected-type%2Fexpect-infer-var-supply-ty-with-free-region.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Ftest%2Fui%2Fclosure-expected-type%2Fexpect-infer-var-supply-ty-with-free-region.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosure-expected-type%2Fexpect-infer-var-supply-ty-with-free-region.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -1,4 +1,4 @@\n-// compile-pass\n+// build-pass (FIXME(62277): could be check-pass?)\n \n fn with_closure<F, A>(_: F)\n     where F: FnOnce(A, &u32)"}, {"sha": "f7b4f2b24549e4a723e3c648346c2ca3348404c4", "filename": "src/test/ui/closure-expected-type/issue-24421.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Ftest%2Fui%2Fclosure-expected-type%2Fissue-24421.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43eb4235ac43c822d903ad26ed806f34cc1a14a/src%2Ftest%2Fui%2Fclosure-expected-type%2Fissue-24421.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosure-expected-type%2Fissue-24421.rs?ref=b43eb4235ac43c822d903ad26ed806f34cc1a14a", "patch": "@@ -1,4 +1,4 @@\n-// compile-pass\n+// build-pass (FIXME(62277): could be check-pass?)\n \n fn test<F: Fn(&u64, &u64)>(f: F) {}\n "}]}