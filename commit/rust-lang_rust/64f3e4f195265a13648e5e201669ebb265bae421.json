{"sha": "64f3e4f195265a13648e5e201669ebb265bae421", "node_id": "C_kwDOAAsO6NoAKDY0ZjNlNGYxOTUyNjVhMTM2NDhlNWUyMDE2NjllYmIyNjViYWU0MjE", "commit": {"author": {"name": "TheOddGarlic", "email": "umutinanerdogan@pm.me", "date": "2022-08-24T08:01:53Z"}, "committer": {"name": "mejrs", "email": "", "date": "2022-12-17T18:08:24Z"}, "message": "Migrate \"requires unsafe\" diagnostics", "tree": {"sha": "5e5183857bdd8f5f4bc8a9003eb782f78a559a77", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5e5183857bdd8f5f4bc8a9003eb782f78a559a77"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/64f3e4f195265a13648e5e201669ebb265bae421", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/64f3e4f195265a13648e5e201669ebb265bae421", "html_url": "https://github.com/rust-lang/rust/commit/64f3e4f195265a13648e5e201669ebb265bae421", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/64f3e4f195265a13648e5e201669ebb265bae421/comments", "author": {"login": "AsyaTheAbove", "id": 40492846, "node_id": "MDQ6VXNlcjQwNDkyODQ2", "avatar_url": "https://avatars.githubusercontent.com/u/40492846?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AsyaTheAbove", "html_url": "https://github.com/AsyaTheAbove", "followers_url": "https://api.github.com/users/AsyaTheAbove/followers", "following_url": "https://api.github.com/users/AsyaTheAbove/following{/other_user}", "gists_url": "https://api.github.com/users/AsyaTheAbove/gists{/gist_id}", "starred_url": "https://api.github.com/users/AsyaTheAbove/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AsyaTheAbove/subscriptions", "organizations_url": "https://api.github.com/users/AsyaTheAbove/orgs", "repos_url": "https://api.github.com/users/AsyaTheAbove/repos", "events_url": "https://api.github.com/users/AsyaTheAbove/events{/privacy}", "received_events_url": "https://api.github.com/users/AsyaTheAbove/received_events", "type": "User", "site_admin": false}, "committer": {}, "parents": [{"sha": "71fe52fed02f2555ee6d0e7631d250d53a1a9cae", "url": "https://api.github.com/repos/rust-lang/rust/commits/71fe52fed02f2555ee6d0e7631d250d53a1a9cae", "html_url": "https://github.com/rust-lang/rust/commit/71fe52fed02f2555ee6d0e7631d250d53a1a9cae"}], "stats": {"total": 526, "additions": 431, "deletions": 95}, "files": [{"sha": "fd42cc6cb08768bfb18259b5e09b29618a99b5b7", "filename": "compiler/rustc_error_messages/locales/en-US/mir_build.ftl", "status": "modified", "additions": 110, "deletions": 0, "changes": 110, "blob_url": "https://github.com/rust-lang/rust/blob/64f3e4f195265a13648e5e201669ebb265bae421/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fmir_build.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/64f3e4f195265a13648e5e201669ebb265bae421/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fmir_build.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fmir_build.ftl?ref=64f3e4f195265a13648e5e201669ebb265bae421", "patch": "@@ -59,3 +59,113 @@ mir_build_unsafe_op_in_unsafe_fn_call_to_fn_with_requires_unsafe =\n     call to function `{$function}` with `#[target_feature]` is unsafe and requires unsafe block (error E0133)\n     .note = can only be called if the required target features are available\n     .label = call to function with `#[target_feature]`\n+\n+mir_build_call_to_unsafe_fn_requires_unsafe =\n+    call to unsafe function `{$function}` is unsafe and requires unsafe block\n+    .note = consult the function's documentation for information on how to avoid undefined behavior\n+    .label = call to unsafe function\n+\n+mir_build_call_to_unsafe_fn_requires_unsafe_nameless =\n+    call to unsafe function is unsafe and requires unsafe block\n+    .note = consult the function's documentation for information on how to avoid undefined behavior\n+    .label = call to unsafe function\n+\n+mir_build_call_to_unsafe_fn_requires_unsafe_unsafe_op_in_unsafe_fn_allowed =\n+    call to unsafe function `{$function}` is unsafe and requires unsafe function or block\n+    .note = consult the function's documentation for information on how to avoid undefined behavior\n+    .label = call to unsafe function\n+\n+mir_build_call_to_unsafe_fn_requires_unsafe_nameless_unsafe_op_in_unsafe_fn_allowed =\n+    call to unsafe function is unsafe and requires unsafe function or block\n+    .note = consult the function's documentation for information on how to avoid undefined behavior\n+    .label = call to unsafe function\n+\n+mir_build_inline_assembly_requires_unsafe =\n+    use of inline assembly is unsafe and requires unsafe block\n+    .note = inline assembly is entirely unchecked and can cause undefined behavior\n+    .label = use of inline assembly\n+\n+mir_build_inline_assembly_requires_unsafe_unsafe_op_in_unsafe_fn_allowed =\n+    use of inline assembly is unsafe and requires unsafe function or block\n+    .note = inline assembly is entirely unchecked and can cause undefined behavior\n+    .label = use of inline assembly\n+\n+mir_build_initializing_type_with_requires_unsafe =\n+    initializing type with `rustc_layout_scalar_valid_range` attr is unsafe and requires unsafe block\n+    .note = initializing a layout restricted type's field with a value outside the valid range is undefined behavior\n+    .label = initializing type with `rustc_layout_scalar_valid_range` attr\n+\n+mir_build_initializing_type_with_requires_unsafe_unsafe_op_in_unsafe_fn_allowed =\n+    initializing type with `rustc_layout_scalar_valid_range` attr is unsafe and requires unsafe function or block\n+    .note = initializing a layout restricted type's field with a value outside the valid range is undefined behavior\n+    .label = initializing type with `rustc_layout_scalar_valid_range` attr\n+\n+mir_build_mutable_static_requires_unsafe =\n+    use of mutable static is unsafe and requires unsafe block\n+    .note = mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior\n+    .label = use of mutable static\n+\n+mir_build_mutable_static_requires_unsafe_unsafe_op_in_unsafe_fn_allowed =\n+    use of mutable static is unsafe and requires unsafe function or block\n+    .note = mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior\n+    .label = use of mutable static\n+\n+mir_build_extern_static_requires_unsafe =\n+    use of extern static is unsafe and requires unsafe block\n+    .note = extern statics are not controlled by the Rust type system: invalid data, aliasing violations or data races will cause undefined behavior\n+    .label = use of extern static\n+\n+mir_build_extern_static_requires_unsafe_unsafe_op_in_unsafe_fn_allowed =\n+    use of extern static is unsafe and requires unsafe function or block\n+    .note = extern statics are not controlled by the Rust type system: invalid data, aliasing violations or data races will cause undefined behavior\n+    .label = use of extern static\n+\n+mir_build_deref_raw_pointer_requires_unsafe =\n+    dereference of raw pointer is unsafe and requires unsafe block\n+    .note = raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior\n+    .label = dereference of raw pointer\n+\n+mir_build_deref_raw_pointer_requires_unsafe_unsafe_op_in_unsafe_fn_allowed =\n+    dereference of raw pointer is unsafe and requires unsafe function or block\n+    .note = raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior\n+    .label = dereference of raw pointer\n+\n+mir_build_union_field_requires_unsafe =\n+    access to union field is unsafe and requires unsafe block\n+    .note = the field may not be properly initialized: using uninitialized data will cause undefined behavior\n+    .label = access to union field\n+\n+mir_build_union_field_requires_unsafe_unsafe_op_in_unsafe_fn_allowed =\n+    access to union field is unsafe and requires unsafe function or block\n+    .note = the field may not be properly initialized: using uninitialized data will cause undefined behavior\n+    .label = access to union field\n+\n+mir_build_mutation_of_layout_constrained_field_requires_unsafe =\n+    mutation of layout constrained field is unsafe and requires unsafe block\n+    .note = mutating layout constrained fields cannot statically be checked for valid values\n+    .label = mutation of layout constrained field\n+\n+mir_build_mutation_of_layout_constrained_field_requires_unsafe_unsafe_op_in_unsafe_fn_allowed =\n+    mutation of layout constrained field is unsafe and requires unsafe function or block\n+    .note = mutating layout constrained fields cannot statically be checked for valid values\n+    .label = mutation of layout constrained field\n+\n+mir_build_borrow_of_layout_constrained_field_requires_unsafe =\n+    borrow of layout constrained field with interior mutability is unsafe and requires unsafe block\n+    .note = references to fields of layout constrained fields lose the constraints. Coupled with interior mutability, the field can be changed to invalid values\n+    .label = borrow of layout constrained field with interior mutability\n+\n+mir_build_borrow_of_layout_constrained_field_requires_unsafe_unsafe_op_in_unsafe_fn_allowed =\n+    borrow of layout constrained field with interior mutability is unsafe and requires unsafe function or block\n+    .note = references to fields of layout constrained fields lose the constraints. Coupled with interior mutability, the field can be changed to invalid values\n+    .label = borrow of layout constrained field with interior mutability\n+\n+mir_build_call_to_fn_with_requires_unsafe =\n+    call to function `{$function}` with `#[target_feature]` is unsafe and requires unsafe block\n+    .note = can only be called if the required target features are available\n+    .label = call to function with `#[target_feature]`\n+\n+mir_build_call_to_fn_with_requires_unsafe_unsafe_op_in_unsafe_fn_allowed =\n+    call to function `{$function}` with `#[target_feature]` is unsafe and requires unsafe function or block\n+    .note = can only be called if the required target features are available\n+    .label = call to function with `#[target_feature]`"}, {"sha": "e57b8a7b4ce81e6d4e75c8aabbe7c1740d7361b4", "filename": "compiler/rustc_mir_build/src/check_unsafety.rs", "status": "modified", "additions": 106, "deletions": 94, "changes": 200, "blob_url": "https://github.com/rust-lang/rust/blob/64f3e4f195265a13648e5e201669ebb265bae421/compiler%2Frustc_mir_build%2Fsrc%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64f3e4f195265a13648e5e201669ebb265bae421/compiler%2Frustc_mir_build%2Fsrc%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fcheck_unsafety.rs?ref=64f3e4f195265a13648e5e201669ebb265bae421", "patch": "@@ -2,7 +2,6 @@ use crate::build::ExprCategory;\n use crate::errors::*;\n use rustc_middle::thir::visit::{self, Visitor};\n \n-use rustc_errors::struct_span_err;\n use rustc_hir as hir;\n use rustc_middle::mir::BorrowKind;\n use rustc_middle::thir::*;\n@@ -13,7 +12,6 @@ use rustc_span::def_id::{DefId, LocalDefId};\n use rustc_span::symbol::Symbol;\n use rustc_span::Span;\n \n-use std::borrow::Cow;\n use std::ops::Bound;\n \n struct UnsafetyVisitor<'a, 'tcx> {\n@@ -88,19 +86,7 @@ impl<'tcx> UnsafetyVisitor<'_, 'tcx> {\n                 kind.emit_unsafe_op_in_unsafe_fn_lint(self.tcx, self.hir_context, span);\n             }\n             SafetyContext::Safe => {\n-                let (description, note) = kind.description_and_note(self.tcx);\n-                let fn_sugg = if unsafe_op_in_unsafe_fn_allowed { \" function or\" } else { \"\" };\n-                struct_span_err!(\n-                    self.tcx.sess,\n-                    span,\n-                    E0133,\n-                    \"{} is unsafe and requires unsafe{} block\",\n-                    description,\n-                    fn_sugg,\n-                )\n-                .span_label(span, kind.simple_description())\n-                .note(note)\n-                .emit();\n+                kind.emit_requires_unsafe_err(self.tcx, span, unsafe_op_in_unsafe_fn_allowed);\n             }\n         }\n     }\n@@ -556,135 +542,161 @@ impl UnsafeOpKind {\n                 UNSAFE_OP_IN_UNSAFE_FN,\n                 hir_id,\n                 span,\n-                UnsafeOpInUnsafeUseOfInlineAssemblyRequiresUnsafe { span },\n+                UnsafeOpInUnsafeFnUseOfInlineAssemblyRequiresUnsafe { span },\n             ),\n             InitializingTypeWith => tcx.emit_spanned_lint(\n                 UNSAFE_OP_IN_UNSAFE_FN,\n                 hir_id,\n                 span,\n-                UnsafeOpInUnsafeInitializingTypeWithRequiresUnsafe { span },\n+                UnsafeOpInUnsafeFnInitializingTypeWithRequiresUnsafe { span },\n             ),\n             UseOfMutableStatic => tcx.emit_spanned_lint(\n                 UNSAFE_OP_IN_UNSAFE_FN,\n                 hir_id,\n                 span,\n-                UnsafeOpInUnsafeUseOfMutableStaticRequiresUnsafe { span },\n+                UnsafeOpInUnsafeFnUseOfMutableStaticRequiresUnsafe { span },\n             ),\n             UseOfExternStatic => tcx.emit_spanned_lint(\n                 UNSAFE_OP_IN_UNSAFE_FN,\n                 hir_id,\n                 span,\n-                UnsafeOpInUnsafeUseOfExternStaticRequiresUnsafe { span },\n+                UnsafeOpInUnsafeFnUseOfExternStaticRequiresUnsafe { span },\n             ),\n             DerefOfRawPointer => tcx.emit_spanned_lint(\n                 UNSAFE_OP_IN_UNSAFE_FN,\n                 hir_id,\n                 span,\n-                UnsafeOpInUnsafeDerefOfRawPointerRequiresUnsafe { span },\n+                UnsafeOpInUnsafeFnDerefOfRawPointerRequiresUnsafe { span },\n             ),\n             AccessToUnionField => tcx.emit_spanned_lint(\n                 UNSAFE_OP_IN_UNSAFE_FN,\n                 hir_id,\n                 span,\n-                UnsafeOpInUnsafeAccessToUnionFieldRequiresUnsafe { span },\n+                UnsafeOpInUnsafeFnAccessToUnionFieldRequiresUnsafe { span },\n             ),\n             MutationOfLayoutConstrainedField => tcx.emit_spanned_lint(\n                 UNSAFE_OP_IN_UNSAFE_FN,\n                 hir_id,\n                 span,\n-                UnsafeOpInUnsafeMutationOfLayoutConstrainedFieldRequiresUnsafe { span },\n+                UnsafeOpInUnsafeFnMutationOfLayoutConstrainedFieldRequiresUnsafe { span },\n             ),\n             BorrowOfLayoutConstrainedField => tcx.emit_spanned_lint(\n                 UNSAFE_OP_IN_UNSAFE_FN,\n                 hir_id,\n                 span,\n-                UnsafeOpInUnsafeBorrowOfLayoutConstrainedFieldRequiresUnsafe { span },\n+                UnsafeOpInUnsafeFnBorrowOfLayoutConstrainedFieldRequiresUnsafe { span },\n             ),\n             CallToFunctionWith(did) => tcx.emit_spanned_lint(\n                 UNSAFE_OP_IN_UNSAFE_FN,\n                 hir_id,\n                 span,\n-                UnsafeOpInUnsafeCallToFunctionWithRequiresUnsafe {\n+                UnsafeOpInUnsafeFnCallToFunctionWithRequiresUnsafe {\n                     span,\n                     function: &tcx.def_path_str(*did),\n                 },\n             ),\n         }\n     }\n \n-    pub fn simple_description(&self) -> &'static str {\n+    pub fn emit_requires_unsafe_err(\n+        &self,\n+        tcx: TyCtxt<'_>,\n+        span: Span,\n+        unsafe_op_in_unsafe_fn_allowed: bool,\n+    ) {\n         match self {\n-            CallToUnsafeFunction(..) => \"call to unsafe function\",\n-            UseOfInlineAssembly => \"use of inline assembly\",\n-            InitializingTypeWith => \"initializing type with `rustc_layout_scalar_valid_range` attr\",\n-            UseOfMutableStatic => \"use of mutable static\",\n-            UseOfExternStatic => \"use of extern static\",\n-            DerefOfRawPointer => \"dereference of raw pointer\",\n-            AccessToUnionField => \"access to union field\",\n-            MutationOfLayoutConstrainedField => \"mutation of layout constrained field\",\n+            CallToUnsafeFunction(did) if did.is_some() && unsafe_op_in_unsafe_fn_allowed => {\n+                tcx.sess.emit_err(CallToUnsafeFunctionRequiresUnsafeUnsafeOpInUnsafeFnAllowed {\n+                    span,\n+                    function: &tcx.def_path_str(did.unwrap()),\n+                });\n+            }\n+            CallToUnsafeFunction(did) if did.is_some() => {\n+                tcx.sess.emit_err(CallToUnsafeFunctionRequiresUnsafe {\n+                    span,\n+                    function: &tcx.def_path_str(did.unwrap()),\n+                });\n+            }\n+            CallToUnsafeFunction(..) if unsafe_op_in_unsafe_fn_allowed => {\n+                tcx.sess.emit_err(\n+                    CallToUnsafeFunctionRequiresUnsafeNamelessUnsafeOpInUnsafeFnAllowed { span },\n+                );\n+            }\n+            CallToUnsafeFunction(..) => {\n+                tcx.sess.emit_err(CallToUnsafeFunctionRequiresUnsafeNameless { span });\n+            }\n+            UseOfInlineAssembly if unsafe_op_in_unsafe_fn_allowed => {\n+                tcx.sess\n+                    .emit_err(UseOfInlineAssemblyRequiresUnsafeUnsafeOpInUnsafeFnAllowed { span });\n+            }\n+            UseOfInlineAssembly => {\n+                tcx.sess.emit_err(UseOfInlineAssemblyRequiresUnsafe { span });\n+            }\n+            InitializingTypeWith if unsafe_op_in_unsafe_fn_allowed => {\n+                tcx.sess\n+                    .emit_err(InitializingTypeWithRequiresUnsafeUnsafeOpInUnsafeFnAllowed { span });\n+            }\n+            InitializingTypeWith => {\n+                tcx.sess.emit_err(InitializingTypeWithRequiresUnsafe { span });\n+            }\n+            UseOfMutableStatic if unsafe_op_in_unsafe_fn_allowed => {\n+                tcx.sess\n+                    .emit_err(UseOfMutableStaticRequiresUnsafeUnsafeOpInUnsafeFnAllowed { span });\n+            }\n+            UseOfMutableStatic => {\n+                tcx.sess.emit_err(UseOfMutableStaticRequiresUnsafe { span });\n+            }\n+            UseOfExternStatic if unsafe_op_in_unsafe_fn_allowed => {\n+                tcx.sess\n+                    .emit_err(UseOfExternStaticRequiresUnsafeUnsafeOpInUnsafeFnAllowed { span });\n+            }\n+            UseOfExternStatic => {\n+                tcx.sess.emit_err(UseOfExternStaticRequiresUnsafe { span });\n+            }\n+            DerefOfRawPointer if unsafe_op_in_unsafe_fn_allowed => {\n+                tcx.sess\n+                    .emit_err(DerefOfRawPointerRequiresUnsafeUnsafeOpInUnsafeFnAllowed { span });\n+            }\n+            DerefOfRawPointer => {\n+                tcx.sess.emit_err(DerefOfRawPointerRequiresUnsafe { span });\n+            }\n+            AccessToUnionField if unsafe_op_in_unsafe_fn_allowed => {\n+                tcx.sess\n+                    .emit_err(AccessToUnionFieldRequiresUnsafeUnsafeOpInUnsafeFnAllowed { span });\n+            }\n+            AccessToUnionField => {\n+                tcx.sess.emit_err(AccessToUnionFieldRequiresUnsafe { span });\n+            }\n+            MutationOfLayoutConstrainedField if unsafe_op_in_unsafe_fn_allowed => {\n+                tcx.sess.emit_err(\n+                    MutationOfLayoutConstrainedFieldRequiresUnsafeUnsafeOpInUnsafeFnAllowed {\n+                        span,\n+                    },\n+                );\n+            }\n+            MutationOfLayoutConstrainedField => {\n+                tcx.sess.emit_err(MutationOfLayoutConstrainedFieldRequiresUnsafe { span });\n+            }\n+            BorrowOfLayoutConstrainedField if unsafe_op_in_unsafe_fn_allowed => {\n+                tcx.sess.emit_err(\n+                    BorrowOfLayoutConstrainedFieldRequiresUnsafeUnsafeOpInUnsafeFnAllowed { span },\n+                );\n+            }\n             BorrowOfLayoutConstrainedField => {\n-                \"borrow of layout constrained field with interior mutability\"\n+                tcx.sess.emit_err(BorrowOfLayoutConstrainedFieldRequiresUnsafe { span });\n+            }\n+            CallToFunctionWith(did) if unsafe_op_in_unsafe_fn_allowed => {\n+                tcx.sess.emit_err(CallToFunctionWithRequiresUnsafeUnsafeOpInUnsafeFnAllowed {\n+                    span,\n+                    function: &tcx.def_path_str(*did),\n+                });\n+            }\n+            CallToFunctionWith(did) => {\n+                tcx.sess.emit_err(CallToFunctionWithRequiresUnsafe {\n+                    span,\n+                    function: &tcx.def_path_str(*did),\n+                });\n             }\n-            CallToFunctionWith(..) => \"call to function with `#[target_feature]`\",\n-        }\n-    }\n-\n-    pub fn description_and_note(&self, tcx: TyCtxt<'_>) -> (Cow<'static, str>, &'static str) {\n-        match self {\n-            CallToUnsafeFunction(did) => (\n-                if let Some(did) = did {\n-                    Cow::from(format!(\"call to unsafe function `{}`\", tcx.def_path_str(*did)))\n-                } else {\n-                    Cow::Borrowed(self.simple_description())\n-                },\n-                \"consult the function's documentation for information on how to avoid undefined \\\n-                 behavior\",\n-            ),\n-            UseOfInlineAssembly => (\n-                Cow::Borrowed(self.simple_description()),\n-                \"inline assembly is entirely unchecked and can cause undefined behavior\",\n-            ),\n-            InitializingTypeWith => (\n-                Cow::Borrowed(self.simple_description()),\n-                \"initializing a layout restricted type's field with a value outside the valid \\\n-                 range is undefined behavior\",\n-            ),\n-            UseOfMutableStatic => (\n-                Cow::Borrowed(self.simple_description()),\n-                \"mutable statics can be mutated by multiple threads: aliasing violations or data \\\n-                 races will cause undefined behavior\",\n-            ),\n-            UseOfExternStatic => (\n-                Cow::Borrowed(self.simple_description()),\n-                \"extern statics are not controlled by the Rust type system: invalid data, \\\n-                 aliasing violations or data races will cause undefined behavior\",\n-            ),\n-            DerefOfRawPointer => (\n-                Cow::Borrowed(self.simple_description()),\n-                \"raw pointers may be null, dangling or unaligned; they can violate aliasing rules \\\n-                 and cause data races: all of these are undefined behavior\",\n-            ),\n-            AccessToUnionField => (\n-                Cow::Borrowed(self.simple_description()),\n-                \"the field may not be properly initialized: using uninitialized data will cause \\\n-                 undefined behavior\",\n-            ),\n-            MutationOfLayoutConstrainedField => (\n-                Cow::Borrowed(self.simple_description()),\n-                \"mutating layout constrained fields cannot statically be checked for valid values\",\n-            ),\n-            BorrowOfLayoutConstrainedField => (\n-                Cow::Borrowed(self.simple_description()),\n-                \"references to fields of layout constrained fields lose the constraints. Coupled \\\n-                 with interior mutability, the field can be changed to invalid values\",\n-            ),\n-            CallToFunctionWith(did) => (\n-                Cow::from(format!(\n-                    \"call to function `{}` with `#[target_feature]`\",\n-                    tcx.def_path_str(*did)\n-                )),\n-                \"can only be called if the required target features are available\",\n-            ),\n         }\n     }\n }"}, {"sha": "260a9f6375bb9985cf6bfb47b59ba056fe6a394b", "filename": "compiler/rustc_mir_build/src/errors.rs", "status": "modified", "additions": 215, "deletions": 1, "changes": 216, "blob_url": "https://github.com/rust-lang/rust/blob/64f3e4f195265a13648e5e201669ebb265bae421/compiler%2Frustc_mir_build%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64f3e4f195265a13648e5e201669ebb265bae421/compiler%2Frustc_mir_build%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Ferrors.rs?ref=64f3e4f195265a13648e5e201669ebb265bae421", "patch": "@@ -1,4 +1,4 @@\n-use rustc_macros::LintDiagnostic;\n+use rustc_macros::{LintDiagnostic, SessionDiagnostic};\n use rustc_span::Span;\n \n #[derive(LintDiagnostic)]\n@@ -99,3 +99,217 @@ pub struct UnsafeOpInUnsafeFnCallToFunctionWithRequiresUnsafe<'a> {\n     pub span: Span,\n     pub function: &'a str,\n }\n+\n+#[derive(SessionDiagnostic)]\n+#[diag(mir_build::call_to_unsafe_fn_requires_unsafe, code = \"E0133\")]\n+#[note]\n+pub struct CallToUnsafeFunctionRequiresUnsafe<'a> {\n+    #[primary_span]\n+    #[label]\n+    pub span: Span,\n+    pub function: &'a str,\n+}\n+\n+#[derive(SessionDiagnostic)]\n+#[diag(mir_build::call_to_unsafe_fn_requires_unsafe_nameless, code = \"E0133\")]\n+#[note]\n+pub struct CallToUnsafeFunctionRequiresUnsafeNameless {\n+    #[primary_span]\n+    #[label]\n+    pub span: Span,\n+}\n+\n+#[derive(SessionDiagnostic)]\n+#[diag(mir_build::call_to_unsafe_fn_requires_unsafe_unsafe_op_in_unsafe_fn_allowed, code = \"E0133\")]\n+#[note]\n+pub struct CallToUnsafeFunctionRequiresUnsafeUnsafeOpInUnsafeFnAllowed<'a> {\n+    #[primary_span]\n+    #[label]\n+    pub span: Span,\n+    pub function: &'a str,\n+}\n+\n+#[derive(SessionDiagnostic)]\n+#[diag(\n+    mir_build::call_to_unsafe_fn_requires_unsafe_nameless_unsafe_op_in_unsafe_fn_allowed,\n+    code = \"E0133\"\n+)]\n+#[note]\n+pub struct CallToUnsafeFunctionRequiresUnsafeNamelessUnsafeOpInUnsafeFnAllowed {\n+    #[primary_span]\n+    #[label]\n+    pub span: Span,\n+}\n+\n+#[derive(SessionDiagnostic)]\n+#[diag(mir_build::inline_assembly_requires_unsafe, code = \"E0133\")]\n+#[note]\n+pub struct UseOfInlineAssemblyRequiresUnsafe {\n+    #[primary_span]\n+    #[label]\n+    pub span: Span,\n+}\n+\n+#[derive(SessionDiagnostic)]\n+#[diag(mir_build::inline_assembly_requires_unsafe_unsafe_op_in_unsafe_fn_allowed, code = \"E0133\")]\n+#[note]\n+pub struct UseOfInlineAssemblyRequiresUnsafeUnsafeOpInUnsafeFnAllowed {\n+    #[primary_span]\n+    #[label]\n+    pub span: Span,\n+}\n+\n+#[derive(SessionDiagnostic)]\n+#[diag(mir_build::initializing_type_with_requires_unsafe, code = \"E0133\")]\n+#[note]\n+pub struct InitializingTypeWithRequiresUnsafe {\n+    #[primary_span]\n+    #[label]\n+    pub span: Span,\n+}\n+\n+#[derive(SessionDiagnostic)]\n+#[diag(\n+    mir_build::initializing_type_with_requires_unsafe_unsafe_op_in_unsafe_fn_allowed,\n+    code = \"E0133\"\n+)]\n+#[note]\n+pub struct InitializingTypeWithRequiresUnsafeUnsafeOpInUnsafeFnAllowed {\n+    #[primary_span]\n+    #[label]\n+    pub span: Span,\n+}\n+\n+#[derive(SessionDiagnostic)]\n+#[diag(mir_build::mutable_static_requires_unsafe, code = \"E0133\")]\n+#[note]\n+pub struct UseOfMutableStaticRequiresUnsafe {\n+    #[primary_span]\n+    #[label]\n+    pub span: Span,\n+}\n+\n+#[derive(SessionDiagnostic)]\n+#[diag(mir_build::mutable_static_requires_unsafe_unsafe_op_in_unsafe_fn_allowed, code = \"E0133\")]\n+#[note]\n+pub struct UseOfMutableStaticRequiresUnsafeUnsafeOpInUnsafeFnAllowed {\n+    #[primary_span]\n+    #[label]\n+    pub span: Span,\n+}\n+\n+#[derive(SessionDiagnostic)]\n+#[diag(mir_build::extern_static_requires_unsafe, code = \"E0133\")]\n+#[note]\n+pub struct UseOfExternStaticRequiresUnsafe {\n+    #[primary_span]\n+    #[label]\n+    pub span: Span,\n+}\n+\n+#[derive(SessionDiagnostic)]\n+#[diag(mir_build::extern_static_requires_unsafe_unsafe_op_in_unsafe_fn_allowed, code = \"E0133\")]\n+#[note]\n+pub struct UseOfExternStaticRequiresUnsafeUnsafeOpInUnsafeFnAllowed {\n+    #[primary_span]\n+    #[label]\n+    pub span: Span,\n+}\n+\n+#[derive(SessionDiagnostic)]\n+#[diag(mir_build::deref_raw_pointer_requires_unsafe, code = \"E0133\")]\n+#[note]\n+pub struct DerefOfRawPointerRequiresUnsafe {\n+    #[primary_span]\n+    #[label]\n+    pub span: Span,\n+}\n+\n+#[derive(SessionDiagnostic)]\n+#[diag(mir_build::deref_raw_pointer_requires_unsafe_unsafe_op_in_unsafe_fn_allowed, code = \"E0133\")]\n+#[note]\n+pub struct DerefOfRawPointerRequiresUnsafeUnsafeOpInUnsafeFnAllowed {\n+    #[primary_span]\n+    #[label]\n+    pub span: Span,\n+}\n+\n+#[derive(SessionDiagnostic)]\n+#[diag(mir_build::union_field_requires_unsafe, code = \"E0133\")]\n+#[note]\n+pub struct AccessToUnionFieldRequiresUnsafe {\n+    #[primary_span]\n+    #[label]\n+    pub span: Span,\n+}\n+\n+#[derive(SessionDiagnostic)]\n+#[diag(mir_build::union_field_requires_unsafe_unsafe_op_in_unsafe_fn_allowed, code = \"E0133\")]\n+#[note]\n+pub struct AccessToUnionFieldRequiresUnsafeUnsafeOpInUnsafeFnAllowed {\n+    #[primary_span]\n+    #[label]\n+    pub span: Span,\n+}\n+\n+#[derive(SessionDiagnostic)]\n+#[diag(mir_build::mutation_of_layout_constrained_field_requires_unsafe, code = \"E0133\")]\n+#[note]\n+pub struct MutationOfLayoutConstrainedFieldRequiresUnsafe {\n+    #[primary_span]\n+    #[label]\n+    pub span: Span,\n+}\n+\n+#[derive(SessionDiagnostic)]\n+#[diag(\n+    mir_build::mutation_of_layout_constrained_field_requires_unsafe_unsafe_op_in_unsafe_fn_allowed,\n+    code = \"E0133\"\n+)]\n+#[note]\n+pub struct MutationOfLayoutConstrainedFieldRequiresUnsafeUnsafeOpInUnsafeFnAllowed {\n+    #[primary_span]\n+    #[label]\n+    pub span: Span,\n+}\n+\n+#[derive(SessionDiagnostic)]\n+#[diag(mir_build::borrow_of_layout_constrained_field_requires_unsafe, code = \"E0133\")]\n+#[note]\n+pub struct BorrowOfLayoutConstrainedFieldRequiresUnsafe {\n+    #[primary_span]\n+    #[label]\n+    pub span: Span,\n+}\n+\n+#[derive(SessionDiagnostic)]\n+#[diag(\n+    mir_build::borrow_of_layout_constrained_field_requires_unsafe_unsafe_op_in_unsafe_fn_allowed,\n+    code = \"E0133\"\n+)]\n+#[note]\n+pub struct BorrowOfLayoutConstrainedFieldRequiresUnsafeUnsafeOpInUnsafeFnAllowed {\n+    #[primary_span]\n+    #[label]\n+    pub span: Span,\n+}\n+\n+#[derive(SessionDiagnostic)]\n+#[diag(mir_build::call_to_fn_with_requires_unsafe, code = \"E0133\")]\n+#[note]\n+pub struct CallToFunctionWithRequiresUnsafe<'a> {\n+    #[primary_span]\n+    #[label]\n+    pub span: Span,\n+    pub function: &'a str,\n+}\n+\n+#[derive(SessionDiagnostic)]\n+#[diag(mir_build::call_to_fn_with_requires_unsafe_unsafe_op_in_unsafe_fn_allowed, code = \"E0133\")]\n+#[note]\n+pub struct CallToFunctionWithRequiresUnsafeUnsafeOpInUnsafeFnAllowed<'a> {\n+    #[primary_span]\n+    #[label]\n+    pub span: Span,\n+    pub function: &'a str,\n+}"}]}