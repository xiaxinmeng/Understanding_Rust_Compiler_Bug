{"sha": "ce00b3e2e0c5c0c88fe59fb45a1c25a8ff9e1836", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNlMDBiM2UyZTBjNWMwYzg4ZmU1OWZiNDVhMWMyNWE4ZmY5ZTE4MzY=", "commit": {"author": {"name": "Dan Gohman", "email": "dev@sunfishcode.online", "date": "2020-10-19T14:47:32Z"}, "committer": {"name": "Dan Gohman", "email": "dev@sunfishcode.online", "date": "2020-10-18T14:47:32Z"}, "message": "Use `link` on platforms which lack `linkat`.", "tree": {"sha": "2e1097ff2603f8df7ecf1e01f5842a525f1bbbde", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2e1097ff2603f8df7ecf1e01f5842a525f1bbbde"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ce00b3e2e0c5c0c88fe59fb45a1c25a8ff9e1836", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ce00b3e2e0c5c0c88fe59fb45a1c25a8ff9e1836", "html_url": "https://github.com/rust-lang/rust/commit/ce00b3e2e0c5c0c88fe59fb45a1c25a8ff9e1836", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ce00b3e2e0c5c0c88fe59fb45a1c25a8ff9e1836/comments", "author": {"login": "sunfishcode", "id": 4503403, "node_id": "MDQ6VXNlcjQ1MDM0MDM=", "avatar_url": "https://avatars.githubusercontent.com/u/4503403?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sunfishcode", "html_url": "https://github.com/sunfishcode", "followers_url": "https://api.github.com/users/sunfishcode/followers", "following_url": "https://api.github.com/users/sunfishcode/following{/other_user}", "gists_url": "https://api.github.com/users/sunfishcode/gists{/gist_id}", "starred_url": "https://api.github.com/users/sunfishcode/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sunfishcode/subscriptions", "organizations_url": "https://api.github.com/users/sunfishcode/orgs", "repos_url": "https://api.github.com/users/sunfishcode/repos", "events_url": "https://api.github.com/users/sunfishcode/events{/privacy}", "received_events_url": "https://api.github.com/users/sunfishcode/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sunfishcode", "id": 4503403, "node_id": "MDQ6VXNlcjQ1MDM0MDM=", "avatar_url": "https://avatars.githubusercontent.com/u/4503403?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sunfishcode", "html_url": "https://github.com/sunfishcode", "followers_url": "https://api.github.com/users/sunfishcode/followers", "following_url": "https://api.github.com/users/sunfishcode/following{/other_user}", "gists_url": "https://api.github.com/users/sunfishcode/gists{/gist_id}", "starred_url": "https://api.github.com/users/sunfishcode/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sunfishcode/subscriptions", "organizations_url": "https://api.github.com/users/sunfishcode/orgs", "repos_url": "https://api.github.com/users/sunfishcode/repos", "events_url": "https://api.github.com/users/sunfishcode/events{/privacy}", "received_events_url": "https://api.github.com/users/sunfishcode/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "23a5c214150f462043ab411f87ef297309421d71", "url": "https://api.github.com/repos/rust-lang/rust/commits/23a5c214150f462043ab411f87ef297309421d71", "html_url": "https://github.com/rust-lang/rust/commit/23a5c214150f462043ab411f87ef297309421d71"}], "stats": {"total": 18, "additions": 14, "deletions": 4}, "files": [{"sha": "bf4c94192871952bbae992c5524aadeb93c63ef5", "filename": "library/std/src/sys/unix/fs.rs", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/ce00b3e2e0c5c0c88fe59fb45a1c25a8ff9e1836/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce00b3e2e0c5c0c88fe59fb45a1c25a8ff9e1836/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffs.rs?ref=ce00b3e2e0c5c0c88fe59fb45a1c25a8ff9e1836", "patch": "@@ -1067,10 +1067,20 @@ pub fn symlink(src: &Path, dst: &Path) -> io::Result<()> {\n pub fn link(src: &Path, dst: &Path) -> io::Result<()> {\n     let src = cstr(src)?;\n     let dst = cstr(dst)?;\n-    // Use `linkat` with `AT_FDCWD` instead of `link` as `link` leaves it\n-    // implementation-defined whether it follows symlinks. Pass 0 as the\n-    // `linkat` flags argument so that we don't follow symlinks.\n-    cvt(unsafe { libc::linkat(libc::AT_FDCWD, src.as_ptr(), libc::AT_FDCWD, dst.as_ptr(), 0) })?;\n+    cfg_if::cfg_if! {\n+        if #[cfg(any(target_os = \"vxworks\", target_os = \"redox\"))] {\n+            // VxWorks and Redox lack `linkat`, so use `link` instead. POSIX\n+            // leaves it implementation-defined whether `link` follows symlinks,\n+            // so rely on the `symlink_hard_link` test in\n+            // library/std/src/fs/tests.rs to check the behavior.\n+            cvt(unsafe { libc::link(src.as_ptr(), dst.as_ptr()) })?;\n+        } else {\n+            // Use `linkat` with `AT_FDCWD` instead of `link` as `linkat` gives\n+            // us a flag to specify how symlinks should be handled. Pass 0 as\n+            // the flags argument, meaning don't follow symlinks.\n+            cvt(unsafe { libc::linkat(libc::AT_FDCWD, src.as_ptr(), libc::AT_FDCWD, dst.as_ptr(), 0) })?;\n+        }\n+    }\n     Ok(())\n }\n "}]}