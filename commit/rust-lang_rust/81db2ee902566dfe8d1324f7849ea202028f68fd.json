{"sha": "81db2ee902566dfe8d1324f7849ea202028f68fd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgxZGIyZWU5MDI1NjZkZmU4ZDEzMjRmNzg0OWVhMjAyMDI4ZjY4ZmQ=", "commit": {"author": {"name": "Nadrieril", "email": "nadrieril+git@gmail.com", "date": "2019-11-07T18:52:13Z"}, "committer": {"name": "Nadrieril", "email": "nadrieril+git@gmail.com", "date": "2019-11-15T16:14:34Z"}, "message": "Special-case range inclusion when the range is integral but non-exhaustive", "tree": {"sha": "df1981cae99aab39ae35a3da942bf00b3112c401", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/df1981cae99aab39ae35a3da942bf00b3112c401"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/81db2ee902566dfe8d1324f7849ea202028f68fd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/81db2ee902566dfe8d1324f7849ea202028f68fd", "html_url": "https://github.com/rust-lang/rust/commit/81db2ee902566dfe8d1324f7849ea202028f68fd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/81db2ee902566dfe8d1324f7849ea202028f68fd/comments", "author": {"login": "Nadrieril", "id": 6783654, "node_id": "MDQ6VXNlcjY3ODM2NTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6783654?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nadrieril", "html_url": "https://github.com/Nadrieril", "followers_url": "https://api.github.com/users/Nadrieril/followers", "following_url": "https://api.github.com/users/Nadrieril/following{/other_user}", "gists_url": "https://api.github.com/users/Nadrieril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nadrieril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nadrieril/subscriptions", "organizations_url": "https://api.github.com/users/Nadrieril/orgs", "repos_url": "https://api.github.com/users/Nadrieril/repos", "events_url": "https://api.github.com/users/Nadrieril/events{/privacy}", "received_events_url": "https://api.github.com/users/Nadrieril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Nadrieril", "id": 6783654, "node_id": "MDQ6VXNlcjY3ODM2NTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6783654?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nadrieril", "html_url": "https://github.com/Nadrieril", "followers_url": "https://api.github.com/users/Nadrieril/followers", "following_url": "https://api.github.com/users/Nadrieril/following{/other_user}", "gists_url": "https://api.github.com/users/Nadrieril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nadrieril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nadrieril/subscriptions", "organizations_url": "https://api.github.com/users/Nadrieril/orgs", "repos_url": "https://api.github.com/users/Nadrieril/repos", "events_url": "https://api.github.com/users/Nadrieril/events{/privacy}", "received_events_url": "https://api.github.com/users/Nadrieril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f3752ee5d5777ed68231710a6410823f24417bdc", "url": "https://api.github.com/repos/rust-lang/rust/commits/f3752ee5d5777ed68231710a6410823f24417bdc", "html_url": "https://github.com/rust-lang/rust/commit/f3752ee5d5777ed68231710a6410823f24417bdc"}], "stats": {"total": 27, "additions": 27, "deletions": 0}, "files": [{"sha": "4f4d814dee96f9eecf93f70450b492a8485340d8", "filename": "src/librustc_mir/hair/pattern/_match.rs", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/81db2ee902566dfe8d1324f7849ea202028f68fd/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81db2ee902566dfe8d1324f7849ea202028f68fd/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs?ref=81db2ee902566dfe8d1324f7849ea202028f68fd", "patch": "@@ -641,6 +641,15 @@ impl<'tcx> Constructor<'tcx> {\n         IntRange::should_treat_range_exhaustively(tcx, ty)\n     }\n \n+    fn is_integral_range(&self) -> bool {\n+        let ty = match self {\n+            ConstantValue(value, _) => value.ty,\n+            ConstantRange(_, _, ty, _, _) => ty,\n+            _ => return false,\n+        };\n+        IntRange::is_integral(ty)\n+    }\n+\n     fn variant_index_for_adt<'a>(\n         &self,\n         cx: &MatchCheckCtxt<'a, 'tcx>,\n@@ -1471,6 +1480,12 @@ impl<'tcx> IntRange<'tcx> {\n         }\n     }\n \n+    fn is_subrange(&self, other: &Self) -> bool {\n+        let (lo, hi) = (*self.range.start(), *self.range.end());\n+        let (other_lo, other_hi) = (*other.range.start(), *other.range.end());\n+        other_lo <= lo && hi <= other_hi\n+    }\n+\n     fn suspicious_intersection(&self, other: &Self) -> bool {\n         // `false` in the following cases:\n         // 1     ----      // 1  ----------   // 1 ----        // 1       ----\n@@ -2300,13 +2315,25 @@ fn specialize_one_pattern<'p, 'a: 'p, 'q: 'p, 'tcx>(\n                     IntRange::from_pat(cx.tcx, cx.param_env, pat),\n                 ) {\n                     (Some(ctor), Some(pat)) => ctor.intersection(&pat).map(|_| {\n+                        // Constructor splitting should ensure that all intersections we encounter\n+                        // are actually inclusions.\n                         let (pat_lo, pat_hi) = pat.range.into_inner();\n                         let (ctor_lo, ctor_hi) = ctor.range.into_inner();\n                         assert!(pat_lo <= ctor_lo && ctor_hi <= pat_hi);\n                         PatStack::default()\n                     }),\n                     _ => None,\n                 }\n+            } else if constructor.is_integral_range() {\n+                // If we have an integer range that should not be matched exhaustively, fallback to\n+                // checking for inclusion.\n+                match (\n+                    IntRange::from_ctor(cx.tcx, cx.param_env, constructor),\n+                    IntRange::from_pat(cx.tcx, cx.param_env, pat),\n+                ) {\n+                    (Some(ctor), Some(pat)) if ctor.is_subrange(&pat) => Some(PatStack::default()),\n+                    _ => None,\n+                }\n             } else {\n                 // Fallback for non-ranges and ranges that involve\n                 // floating-point numbers, which are not conveniently handled"}]}