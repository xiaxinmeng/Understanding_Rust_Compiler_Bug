{"sha": "5d29954b2f2c3e079372bbaaee2ed64c1674046b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVkMjk5NTRiMmYyYzNlMDc5MzcyYmJhYWVlMmVkNjRjMTY3NDA0NmI=", "commit": {"author": {"name": "Alexis Bourget", "email": "alexis.bourget@gmail.com", "date": "2020-08-29T18:10:05Z"}, "committer": {"name": "Alexis Bourget", "email": "alexis.bourget@gmail.com", "date": "2020-09-21T20:37:30Z"}, "message": "Improve some SAFETY comments following suggestions", "tree": {"sha": "b898df085c395048304a428aaa813da705613e8e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b898df085c395048304a428aaa813da705613e8e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5d29954b2f2c3e079372bbaaee2ed64c1674046b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5d29954b2f2c3e079372bbaaee2ed64c1674046b", "html_url": "https://github.com/rust-lang/rust/commit/5d29954b2f2c3e079372bbaaee2ed64c1674046b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5d29954b2f2c3e079372bbaaee2ed64c1674046b/comments", "author": {"login": "poliorcetics", "id": 7951708, "node_id": "MDQ6VXNlcjc5NTE3MDg=", "avatar_url": "https://avatars.githubusercontent.com/u/7951708?v=4", "gravatar_id": "", "url": "https://api.github.com/users/poliorcetics", "html_url": "https://github.com/poliorcetics", "followers_url": "https://api.github.com/users/poliorcetics/followers", "following_url": "https://api.github.com/users/poliorcetics/following{/other_user}", "gists_url": "https://api.github.com/users/poliorcetics/gists{/gist_id}", "starred_url": "https://api.github.com/users/poliorcetics/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/poliorcetics/subscriptions", "organizations_url": "https://api.github.com/users/poliorcetics/orgs", "repos_url": "https://api.github.com/users/poliorcetics/repos", "events_url": "https://api.github.com/users/poliorcetics/events{/privacy}", "received_events_url": "https://api.github.com/users/poliorcetics/received_events", "type": "User", "site_admin": false}, "committer": {"login": "poliorcetics", "id": 7951708, "node_id": "MDQ6VXNlcjc5NTE3MDg=", "avatar_url": "https://avatars.githubusercontent.com/u/7951708?v=4", "gravatar_id": "", "url": "https://api.github.com/users/poliorcetics", "html_url": "https://github.com/poliorcetics", "followers_url": "https://api.github.com/users/poliorcetics/followers", "following_url": "https://api.github.com/users/poliorcetics/following{/other_user}", "gists_url": "https://api.github.com/users/poliorcetics/gists{/gist_id}", "starred_url": "https://api.github.com/users/poliorcetics/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/poliorcetics/subscriptions", "organizations_url": "https://api.github.com/users/poliorcetics/orgs", "repos_url": "https://api.github.com/users/poliorcetics/repos", "events_url": "https://api.github.com/users/poliorcetics/events{/privacy}", "received_events_url": "https://api.github.com/users/poliorcetics/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a83b79ec31df3a467753c3e5b41cf457af544c7b", "url": "https://api.github.com/repos/rust-lang/rust/commits/a83b79ec31df3a467753c3e5b41cf457af544c7b", "html_url": "https://github.com/rust-lang/rust/commit/a83b79ec31df3a467753c3e5b41cf457af544c7b"}], "stats": {"total": 23, "additions": 17, "deletions": 6}, "files": [{"sha": "54efff2a92bbf5ab4d0e3f2e271e44b7bdd0c33a", "filename": "library/std/src/thread/local.rs", "status": "modified", "additions": 17, "deletions": 6, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/5d29954b2f2c3e079372bbaaee2ed64c1674046b/library%2Fstd%2Fsrc%2Fthread%2Flocal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d29954b2f2c3e079372bbaaee2ed64c1674046b/library%2Fstd%2Fsrc%2Fthread%2Flocal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fthread%2Flocal.rs?ref=5d29954b2f2c3e079372bbaaee2ed64c1674046b", "patch": "@@ -315,12 +315,23 @@ mod lazy {\n             // value (an aliasing violation). To avoid setting the \"I'm running a\n             // destructor\" flag we just use `mem::replace` which should sequence the\n             // operations a little differently and make this safe to call.\n+            //\n+            // `ptr` can be dereferenced safely since it was obtained from\n+            // `UnsafeCell::get`, which should not return a non-aligned or NUL pointer.\n+            // What's more a `LazyKeyInner` can only be created with `new`, which ensures\n+            // `inner` is correctly initialized and all calls to methods on `LazyKeyInner`\n+            // will leave `inner` initialized too.\n             unsafe {\n                 let _ = mem::replace(&mut *ptr, Some(value));\n             }\n \n-            // SAFETY: the *ptr operation is made safe by the `mem::replace`\n-            // call above that made sure a valid value is present behind it.\n+            // SAFETY: the `*ptr` operation is made safe by the `mem::replace`\n+            // call above combined with `ptr` being correct from the beginning\n+            // (see previous SAFETY: comment above).\n+            //\n+            // Plus, with the call to `mem::replace` it is guaranteed there is\n+            // a `Some` behind `ptr`, not a `None` so `unreachable_unchecked`\n+            // will never be reached.\n             unsafe {\n                 // After storing `Some` we want to get a reference to the contents of\n                 // what we just stored. While we could use `unwrap` here and it should\n@@ -337,8 +348,8 @@ mod lazy {\n         #[allow(unused)]\n         pub unsafe fn take(&mut self) -> Option<T> {\n             // SAFETY: The other methods hand out references while taking &self.\n-            // As such, calling this method when such references are still alive\n-            // will fail because it takes a &mut self, conflicting with them.\n+            // As such, callers of this method must ensure no `&` and `&mut` are\n+            // available and used at the same time.\n             unsafe { (*self.inner.get()).take() }\n         }\n     }\n@@ -451,9 +462,9 @@ pub mod fast {\n         // LLVM issue: https://bugs.llvm.org/show_bug.cgi?id=41722\n         #[inline(never)]\n         unsafe fn try_initialize<F: FnOnce() -> T>(&self, init: F) -> Option<&'static T> {\n-            // SAFETY: See comment above.\n+            // SAFETY: See comment above (this function doc).\n             if !mem::needs_drop::<T>() || unsafe { self.try_register_dtor() } {\n-                // SAFETY: See comment above.\n+                // SAFETY: See comment above (his function doc).\n                 Some(unsafe { self.inner.initialize(init) })\n             } else {\n                 None"}]}