{"sha": "75637c1edac6db37b3c8aa17ef6b5a91db699a00", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc1NjM3YzFlZGFjNmRiMzdiM2M4YWExN2VmNmI1YTkxZGI2OTlhMDA=", "commit": {"author": {"name": "D\u00e1niel Buga", "email": "bugadani@gmail.com", "date": "2020-06-15T18:01:18Z"}, "committer": {"name": "D\u00e1niel Buga", "email": "bugadani@gmail.com", "date": "2020-08-16T18:27:54Z"}, "message": "Catch function calls in argument lists, add tests that tuples don't get linted", "tree": {"sha": "fa286e713f8a90abe8713f5ec766f39f5c8249eb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fa286e713f8a90abe8713f5ec766f39f5c8249eb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/75637c1edac6db37b3c8aa17ef6b5a91db699a00", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/75637c1edac6db37b3c8aa17ef6b5a91db699a00", "html_url": "https://github.com/rust-lang/rust/commit/75637c1edac6db37b3c8aa17ef6b5a91db699a00", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/75637c1edac6db37b3c8aa17ef6b5a91db699a00/comments", "author": {"login": "bugadani", "id": 977627, "node_id": "MDQ6VXNlcjk3NzYyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/977627?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bugadani", "html_url": "https://github.com/bugadani", "followers_url": "https://api.github.com/users/bugadani/followers", "following_url": "https://api.github.com/users/bugadani/following{/other_user}", "gists_url": "https://api.github.com/users/bugadani/gists{/gist_id}", "starred_url": "https://api.github.com/users/bugadani/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bugadani/subscriptions", "organizations_url": "https://api.github.com/users/bugadani/orgs", "repos_url": "https://api.github.com/users/bugadani/repos", "events_url": "https://api.github.com/users/bugadani/events{/privacy}", "received_events_url": "https://api.github.com/users/bugadani/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bugadani", "id": 977627, "node_id": "MDQ6VXNlcjk3NzYyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/977627?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bugadani", "html_url": "https://github.com/bugadani", "followers_url": "https://api.github.com/users/bugadani/followers", "following_url": "https://api.github.com/users/bugadani/following{/other_user}", "gists_url": "https://api.github.com/users/bugadani/gists{/gist_id}", "starred_url": "https://api.github.com/users/bugadani/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bugadani/subscriptions", "organizations_url": "https://api.github.com/users/bugadani/orgs", "repos_url": "https://api.github.com/users/bugadani/repos", "events_url": "https://api.github.com/users/bugadani/events{/privacy}", "received_events_url": "https://api.github.com/users/bugadani/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d7220dbd9143422a5b3a1ebf4dd46b708f83f1d3", "url": "https://api.github.com/repos/rust-lang/rust/commits/d7220dbd9143422a5b3a1ebf4dd46b708f83f1d3", "html_url": "https://github.com/rust-lang/rust/commit/d7220dbd9143422a5b3a1ebf4dd46b708f83f1d3"}], "stats": {"total": 89, "additions": 52, "deletions": 37}, "files": [{"sha": "463ef48f62c40bf867f77550d0485b45c4ffe9cc", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 14, "deletions": 11, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/75637c1edac6db37b3c8aa17ef6b5a91db699a00/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75637c1edac6db37b3c8aa17ef6b5a91db699a00/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=75637c1edac6db37b3c8aa17ef6b5a91db699a00", "patch": "@@ -2744,12 +2744,8 @@ fn lint_lazy_eval<'a, 'tcx>(\n         paths.iter().any(|candidate| match_qpath(path, candidate))\n     }\n \n-    if let hir::ExprKind::Closure(_, _, eid, _, _) = args[1].kind {\n-        let body = cx.tcx.hir().body(eid);\n-        let ex = &body.value;\n-        let params = &body.params;\n-\n-        let simplify = match ex.kind {\n+    fn can_simplify(expr: &hir::Expr<'_>, params: &[hir::Param<'_>], variant_calls: bool) -> bool {\n+        match expr.kind {\n             // Closures returning literals can be unconditionally simplified\n             hir::ExprKind::Lit(_) => true,\n \n@@ -2767,15 +2763,16 @@ fn lint_lazy_eval<'a, 'tcx>(\n             hir::ExprKind::Field(ref object, _) => !expr_uses_argument(object, params),\n \n             // Paths can be simplified if the root is not the argument, this also covers None\n-            hir::ExprKind::Path(_) => !expr_uses_argument(ex, params),\n+            hir::ExprKind::Path(_) => !expr_uses_argument(expr, params),\n \n             // Calls to Some, Ok, Err can be considered literals if they don't derive an argument\n             hir::ExprKind::Call(ref func, ref args) => if_chain! {\n-                if allow_variant_calls; // Disable lint when rules conflict with bind_instead_of_map\n+                if variant_calls; // Disable lint when rules conflict with bind_instead_of_map\n                 if let hir::ExprKind::Path(ref path) = func.kind;\n                 if match_any_qpath(path, &[&[\"Some\"], &[\"Ok\"], &[\"Err\"]]);\n                 then {\n-                    !args.iter().any(|arg| expr_uses_argument(arg, params))\n+                    // Recursively check all arguments\n+                    args.iter().all(|arg| can_simplify(arg, params, variant_calls))\n                 } else {\n                     false\n                 }\n@@ -2784,9 +2781,15 @@ fn lint_lazy_eval<'a, 'tcx>(\n             // For anything more complex than the above, a closure is probably the right solution,\n             // or the case is handled by an other lint\n             _ => false,\n-        };\n+        }\n+    }\n+\n+    if let hir::ExprKind::Closure(_, _, eid, _, _) = args[1].kind {\n+        let body = cx.tcx.hir().body(eid);\n+        let ex = &body.value;\n+        let params = &body.params;\n \n-        if simplify {\n+        if can_simplify(ex, params, allow_variant_calls) {\n             let msg = if is_option {\n                 \"unnecessary closure used to substitute value for `Option::None`\"\n             } else {"}, {"sha": "7f9d90a8569b187fbb0efef2923806c7cd9c0f10", "filename": "tests/ui/unnecessary_lazy_eval.fixed", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/75637c1edac6db37b3c8aa17ef6b5a91db699a00/tests%2Fui%2Funnecessary_lazy_eval.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/75637c1edac6db37b3c8aa17ef6b5a91db699a00/tests%2Fui%2Funnecessary_lazy_eval.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_lazy_eval.fixed?ref=75637c1edac6db37b3c8aa17ef6b5a91db699a00", "patch": "@@ -25,9 +25,12 @@ fn main() {\n     let ext_arr: [usize; 1] = [2];\n     let ext_str = SomeStruct { some_field: 10 };\n \n-    // Should lint - Option\n     let mut opt = Some(42);\n     let ext_opt = Some(42);\n+    let nested_opt = Some(Some(42));\n+    let nested_tuple_opt = Some(Some((42, 43)));\n+\n+    // Should lint - Option\n     let _ = opt.unwrap_or(2);\n     let _ = opt.unwrap_or(astronomers_pi);\n     let _ = opt.unwrap_or(ext_str.some_field);\n@@ -56,6 +59,9 @@ fn main() {\n \n     // Should not lint - Option\n     let _ = opt.unwrap_or_else(|| ext_str.return_some_field());\n+    let _ = nested_opt.unwrap_or_else(|| Some(some_call()));\n+    let _ = nested_tuple_opt.unwrap_or_else(|| Some((1, 2)));\n+    let _ = nested_tuple_opt.unwrap_or_else(|| Some((some_call(), some_call())));\n     let _ = opt.or_else(some_call);\n     let _ = opt.or_else(|| some_call());\n     let _: Result<usize, usize> = opt.ok_or_else(|| some_call());"}, {"sha": "ca8238d6dcfaf7bc3ab81723a4d475f3e57f69b3", "filename": "tests/ui/unnecessary_lazy_eval.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/75637c1edac6db37b3c8aa17ef6b5a91db699a00/tests%2Fui%2Funnecessary_lazy_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75637c1edac6db37b3c8aa17ef6b5a91db699a00/tests%2Fui%2Funnecessary_lazy_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_lazy_eval.rs?ref=75637c1edac6db37b3c8aa17ef6b5a91db699a00", "patch": "@@ -25,9 +25,12 @@ fn main() {\n     let ext_arr: [usize; 1] = [2];\n     let ext_str = SomeStruct { some_field: 10 };\n \n-    // Should lint - Option\n     let mut opt = Some(42);\n     let ext_opt = Some(42);\n+    let nested_opt = Some(Some(42));\n+    let nested_tuple_opt = Some(Some((42, 43)));\n+\n+    // Should lint - Option\n     let _ = opt.unwrap_or_else(|| 2);\n     let _ = opt.unwrap_or_else(|| astronomers_pi);\n     let _ = opt.unwrap_or_else(|| ext_str.some_field);\n@@ -56,6 +59,9 @@ fn main() {\n \n     // Should not lint - Option\n     let _ = opt.unwrap_or_else(|| ext_str.return_some_field());\n+    let _ = nested_opt.unwrap_or_else(|| Some(some_call()));\n+    let _ = nested_tuple_opt.unwrap_or_else(|| Some((1, 2)));\n+    let _ = nested_tuple_opt.unwrap_or_else(|| Some((some_call(), some_call())));\n     let _ = opt.or_else(some_call);\n     let _ = opt.or_else(|| some_call());\n     let _: Result<usize, usize> = opt.ok_or_else(|| some_call());"}, {"sha": "b8ec654e5c7b768c0b8659256ea24afbaaa4054e", "filename": "tests/ui/unnecessary_lazy_eval.stderr", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/75637c1edac6db37b3c8aa17ef6b5a91db699a00/tests%2Fui%2Funnecessary_lazy_eval.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/75637c1edac6db37b3c8aa17ef6b5a91db699a00/tests%2Fui%2Funnecessary_lazy_eval.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_lazy_eval.stderr?ref=75637c1edac6db37b3c8aa17ef6b5a91db699a00", "patch": "@@ -1,145 +1,145 @@\n error: unnecessary closure used to substitute value for `Option::None`\n-  --> $DIR/unnecessary_lazy_eval.rs:31:13\n+  --> $DIR/unnecessary_lazy_eval.rs:34:13\n    |\n LL |     let _ = opt.unwrap_or_else(|| 2);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^ help: Use `unwrap_or` instead: `opt.unwrap_or(2)`\n    |\n    = note: `-D clippy::unnecessary-lazy-evaluation` implied by `-D warnings`\n \n error: unnecessary closure used to substitute value for `Option::None`\n-  --> $DIR/unnecessary_lazy_eval.rs:32:13\n+  --> $DIR/unnecessary_lazy_eval.rs:35:13\n    |\n LL |     let _ = opt.unwrap_or_else(|| astronomers_pi);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: Use `unwrap_or` instead: `opt.unwrap_or(astronomers_pi)`\n \n error: unnecessary closure used to substitute value for `Option::None`\n-  --> $DIR/unnecessary_lazy_eval.rs:33:13\n+  --> $DIR/unnecessary_lazy_eval.rs:36:13\n    |\n LL |     let _ = opt.unwrap_or_else(|| ext_str.some_field);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: Use `unwrap_or` instead: `opt.unwrap_or(ext_str.some_field)`\n \n error: unnecessary closure used to substitute value for `Option::None`\n-  --> $DIR/unnecessary_lazy_eval.rs:34:13\n+  --> $DIR/unnecessary_lazy_eval.rs:37:13\n    |\n LL |     let _ = opt.unwrap_or_else(|| ext_arr[0]);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: Use `unwrap_or` instead: `opt.unwrap_or(ext_arr[0])`\n \n error: unnecessary closure used to substitute value for `Option::None`\n-  --> $DIR/unnecessary_lazy_eval.rs:35:13\n+  --> $DIR/unnecessary_lazy_eval.rs:38:13\n    |\n LL |     let _ = opt.and_then(|_| ext_opt);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^ help: Use `and` instead: `opt.and(ext_opt)`\n \n error: unnecessary closure used to substitute value for `Option::None`\n-  --> $DIR/unnecessary_lazy_eval.rs:36:13\n+  --> $DIR/unnecessary_lazy_eval.rs:39:13\n    |\n LL |     let _ = opt.or_else(|| ext_opt);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^ help: Use `or` instead: `opt.or(ext_opt)`\n \n error: unnecessary closure used to substitute value for `Option::None`\n-  --> $DIR/unnecessary_lazy_eval.rs:37:13\n+  --> $DIR/unnecessary_lazy_eval.rs:40:13\n    |\n LL |     let _ = opt.or_else(|| None);\n    |             ^^^^^^^^^^^^^^^^^^^^ help: Use `or` instead: `opt.or(None)`\n \n error: unnecessary closure used to substitute value for `Option::None`\n-  --> $DIR/unnecessary_lazy_eval.rs:38:13\n+  --> $DIR/unnecessary_lazy_eval.rs:41:13\n    |\n LL |     let _ = opt.get_or_insert_with(|| 2);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: Use `get_or_insert` instead: `opt.get_or_insert(2)`\n \n error: unnecessary closure used to substitute value for `Option::None`\n-  --> $DIR/unnecessary_lazy_eval.rs:39:13\n+  --> $DIR/unnecessary_lazy_eval.rs:42:13\n    |\n LL |     let _ = opt.ok_or_else(|| 2);\n    |             ^^^^^^^^^^^^^^^^^^^^ help: Use `ok_or` instead: `opt.ok_or(2)`\n \n error: unnecessary closure used to substitute value for `Option::None`\n-  --> $DIR/unnecessary_lazy_eval.rs:40:13\n+  --> $DIR/unnecessary_lazy_eval.rs:43:13\n    |\n LL |     let _ = opt.ok_or_else(|| ext_arr[0]);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: Use `ok_or` instead: `opt.ok_or(ext_arr[0])`\n \n error: unnecessary closure used to substitute value for `Option::None`\n-  --> $DIR/unnecessary_lazy_eval.rs:43:13\n+  --> $DIR/unnecessary_lazy_eval.rs:46:13\n    |\n LL |     let _ = Some(10).unwrap_or_else(|| 2);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: Use `unwrap_or` instead: `Some(10).unwrap_or(2)`\n \n error: unnecessary closure used to substitute value for `Option::None`\n-  --> $DIR/unnecessary_lazy_eval.rs:44:13\n+  --> $DIR/unnecessary_lazy_eval.rs:47:13\n    |\n LL |     let _ = Some(10).and_then(|_| ext_opt);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: Use `and` instead: `Some(10).and(ext_opt)`\n \n error: unnecessary closure used to substitute value for `Option::None`\n-  --> $DIR/unnecessary_lazy_eval.rs:45:28\n+  --> $DIR/unnecessary_lazy_eval.rs:48:28\n    |\n LL |     let _: Option<usize> = None.or_else(|| ext_opt);\n    |                            ^^^^^^^^^^^^^^^^^^^^^^^^ help: Use `or` instead: `None.or(ext_opt)`\n \n error: unnecessary closure used to substitute value for `Option::None`\n-  --> $DIR/unnecessary_lazy_eval.rs:46:13\n+  --> $DIR/unnecessary_lazy_eval.rs:49:13\n    |\n LL |     let _ = None.get_or_insert_with(|| 2);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: Use `get_or_insert` instead: `None.get_or_insert(2)`\n \n error: unnecessary closure used to substitute value for `Option::None`\n-  --> $DIR/unnecessary_lazy_eval.rs:47:35\n+  --> $DIR/unnecessary_lazy_eval.rs:50:35\n    |\n LL |     let _: Result<usize, usize> = None.ok_or_else(|| 2);\n    |                                   ^^^^^^^^^^^^^^^^^^^^^ help: Use `ok_or` instead: `None.ok_or(2)`\n \n error: unnecessary closure used to substitute value for `Option::None`\n-  --> $DIR/unnecessary_lazy_eval.rs:48:28\n+  --> $DIR/unnecessary_lazy_eval.rs:51:28\n    |\n LL |     let _: Option<usize> = None.or_else(|| None);\n    |                            ^^^^^^^^^^^^^^^^^^^^^ help: Use `or` instead: `None.or(None)`\n \n error: unnecessary closure used to substitute value for `Option::None`\n-  --> $DIR/unnecessary_lazy_eval.rs:51:13\n+  --> $DIR/unnecessary_lazy_eval.rs:54:13\n    |\n LL |     let _ = deep.0.unwrap_or_else(|| 2);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: Use `unwrap_or` instead: `deep.0.unwrap_or(2)`\n \n error: unnecessary closure used to substitute value for `Option::None`\n-  --> $DIR/unnecessary_lazy_eval.rs:52:13\n+  --> $DIR/unnecessary_lazy_eval.rs:55:13\n    |\n LL |     let _ = deep.0.and_then(|_| ext_opt);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: Use `and` instead: `deep.0.and(ext_opt)`\n \n error: unnecessary closure used to substitute value for `Option::None`\n-  --> $DIR/unnecessary_lazy_eval.rs:53:13\n+  --> $DIR/unnecessary_lazy_eval.rs:56:13\n    |\n LL |     let _ = deep.0.or_else(|| None);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^ help: Use `or` instead: `deep.0.or(None)`\n \n error: unnecessary closure used to substitute value for `Option::None`\n-  --> $DIR/unnecessary_lazy_eval.rs:54:13\n+  --> $DIR/unnecessary_lazy_eval.rs:57:13\n    |\n LL |     let _ = deep.0.get_or_insert_with(|| 2);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: Use `get_or_insert` instead: `deep.0.get_or_insert(2)`\n \n error: unnecessary closure used to substitute value for `Option::None`\n-  --> $DIR/unnecessary_lazy_eval.rs:55:13\n+  --> $DIR/unnecessary_lazy_eval.rs:58:13\n    |\n LL |     let _ = deep.0.ok_or_else(|| 2);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^ help: Use `ok_or` instead: `deep.0.ok_or(2)`\n \n error: unnecessary closure used to substitute value for `Result::Err`\n-  --> $DIR/unnecessary_lazy_eval.rs:78:13\n+  --> $DIR/unnecessary_lazy_eval.rs:84:13\n    |\n LL |     let _ = res2.unwrap_or_else(|_| 2);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: Use `unwrap_or` instead: `res2.unwrap_or(2)`\n \n error: unnecessary closure used to substitute value for `Result::Err`\n-  --> $DIR/unnecessary_lazy_eval.rs:79:13\n+  --> $DIR/unnecessary_lazy_eval.rs:85:13\n    |\n LL |     let _ = res2.unwrap_or_else(|_| astronomers_pi);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: Use `unwrap_or` instead: `res2.unwrap_or(astronomers_pi)`\n \n error: unnecessary closure used to substitute value for `Result::Err`\n-  --> $DIR/unnecessary_lazy_eval.rs:80:13\n+  --> $DIR/unnecessary_lazy_eval.rs:86:13\n    |\n LL |     let _ = res2.unwrap_or_else(|_| ext_str.some_field);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: Use `unwrap_or` instead: `res2.unwrap_or(ext_str.some_field)`"}]}