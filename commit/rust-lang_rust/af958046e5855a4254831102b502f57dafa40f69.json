{"sha": "af958046e5855a4254831102b502f57dafa40f69", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFmOTU4MDQ2ZTU4NTVhNDI1NDgzMTEwMmI1MDJmNTdkYWZhNDBmNjk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-01-13T08:20:49Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-01-13T08:20:49Z"}, "message": "Auto merge of #68174 - JohnTitor:rollup-ix4amrj, r=JohnTitor\n\nRollup of 8 pull requests\n\nSuccessful merges:\n\n - #67313 (Document more use cases of dataflow)\n - #67959 (rustdoc: improve stability mark arrows)\n - #68097 (Specify units for test timeout environment variables)\n - #68135 (restore some rustc_parse visibilities for rustfmt)\n - #68145 (Expose `context::CheckLintNameResult`)\n - #68156 (Fix crate paths in comments)\n - #68157 (Clean up E0186 explanation)\n - #68161 (Fix system call docs for time::Instant)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "731b779310aa28b33dc1108624e9d96e60db1c64", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/731b779310aa28b33dc1108624e9d96e60db1c64"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/af958046e5855a4254831102b502f57dafa40f69", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/af958046e5855a4254831102b502f57dafa40f69", "html_url": "https://github.com/rust-lang/rust/commit/af958046e5855a4254831102b502f57dafa40f69", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/af958046e5855a4254831102b502f57dafa40f69/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e82febc78e5a14356de5f713b904eebef1e86956", "url": "https://api.github.com/repos/rust-lang/rust/commits/e82febc78e5a14356de5f713b904eebef1e86956", "html_url": "https://github.com/rust-lang/rust/commit/e82febc78e5a14356de5f713b904eebef1e86956"}, {"sha": "87bdc8eb73b5dd48f58bca00b307cbca1351b2f9", "url": "https://api.github.com/repos/rust-lang/rust/commits/87bdc8eb73b5dd48f58bca00b307cbca1351b2f9", "html_url": "https://github.com/rust-lang/rust/commit/87bdc8eb73b5dd48f58bca00b307cbca1351b2f9"}], "stats": {"total": 92, "additions": 73, "deletions": 19}, "files": [{"sha": "7db1e843323872a1b6d4ecc19b08d5967e5ac132", "filename": "src/librustc_error_codes/error_codes/E0186.md", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/af958046e5855a4254831102b502f57dafa40f69/src%2Flibrustc_error_codes%2Ferror_codes%2FE0186.md", "raw_url": "https://github.com/rust-lang/rust/raw/af958046e5855a4254831102b502f57dafa40f69/src%2Flibrustc_error_codes%2Ferror_codes%2FE0186.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0186.md?ref=af958046e5855a4254831102b502f57dafa40f69", "patch": "@@ -2,7 +2,7 @@ An associated function for a trait was defined to be a method (i.e., to take a\n `self` parameter), but an implementation of the trait declared the same function\n to be static.\n \n-Here's an example of this error:\n+Erroneous code example:\n \n ```compile_fail,E0186\n trait Foo {\n@@ -17,3 +17,19 @@ impl Foo for Bar {\n     fn foo() {}\n }\n ```\n+\n+When a type implements a trait's associated function, it has to use the same\n+signature. So in this case, since `Foo::foo` takes `self` as argument and\n+does not return anything, its implementation on `Bar` should be the same:\n+\n+```\n+trait Foo {\n+    fn foo(&self);\n+}\n+\n+struct Bar;\n+\n+impl Foo for Bar {\n+    fn foo(&self) {} // ok!\n+}\n+```"}, {"sha": "01546f78257746cbaaeb8f4eb443ca266d116880", "filename": "src/librustc_feature/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/af958046e5855a4254831102b502f57dafa40f69/src%2Flibrustc_feature%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af958046e5855a4254831102b502f57dafa40f69/src%2Flibrustc_feature%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_feature%2Flib.rs?ref=af958046e5855a4254831102b502f57dafa40f69", "patch": "@@ -1,7 +1,8 @@\n //! # Feature gates\n //!\n //! This crate declares the set of past and present unstable features in the compiler.\n-//! Feature gate checking itself is done in `libsyntax/feature_gate/check.rs` at the moment.\n+//! Feature gate checking itself is done in `librustc_ast_passes/feature_gate.rs`\n+//! at the moment.\n //!\n //! Features are enabled in programs via the crate-level attributes of\n //! `#![feature(...)]` with a comma-separated list of features."}, {"sha": "6aa809a706ebc62524a5e8bb4c20a572119d7d18", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af958046e5855a4254831102b502f57dafa40f69/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af958046e5855a4254831102b502f57dafa40f69/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=af958046e5855a4254831102b502f57dafa40f69", "patch": "@@ -1812,7 +1812,7 @@ declare_lint! {\n }\n \n declare_lint_pass!(\n-    /// Check for used feature gates in `INCOMPLETE_FEATURES` in `feature_gate.rs`.\n+    /// Check for used feature gates in `INCOMPLETE_FEATURES` in `librustc_feature/active.rs`.\n     IncompleteFeatures => [INCOMPLETE_FEATURES]\n );\n "}, {"sha": "78e9d0f14f2deffe0a5548faf39a99ea3b2484c3", "filename": "src/librustc_lint/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af958046e5855a4254831102b502f57dafa40f69/src%2Flibrustc_lint%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af958046e5855a4254831102b502f57dafa40f69/src%2Flibrustc_lint%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flib.rs?ref=af958046e5855a4254831102b502f57dafa40f69", "patch": "@@ -76,7 +76,7 @@ use unused::*;\n \n /// Useful for other parts of the compiler / Clippy.\n pub use builtin::SoftLints;\n-pub use context::{EarlyContext, LateContext, LintContext, LintStore};\n+pub use context::{CheckLintNameResult, EarlyContext, LateContext, LintContext, LintStore};\n pub use early::check_ast_crate;\n pub use late::check_crate;\n pub use passes::{EarlyLintPass, LateLintPass};"}, {"sha": "e29730f267c2c61493866554f7070e2d0070c9cc", "filename": "src/librustc_mir/dataflow/mod.rs", "status": "modified", "additions": 23, "deletions": 1, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/af958046e5855a4254831102b502f57dafa40f69/src%2Flibrustc_mir%2Fdataflow%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af958046e5855a4254831102b502f57dafa40f69/src%2Flibrustc_mir%2Fdataflow%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fmod.rs?ref=af958046e5855a4254831102b502f57dafa40f69", "patch": "@@ -668,6 +668,26 @@ pub trait BottomValue {\n     const BOTTOM_VALUE: bool;\n \n     /// Merges `in_set` into `inout_set`, returning `true` if `inout_set` changed.\n+    ///\n+    /// It is almost certainly wrong to override this, since it automatically applies\n+    /// * `inout_set & in_set` if `BOTTOM_VALUE == true`\n+    /// * `inout_set | in_set` if `BOTTOM_VALUE == false`\n+    ///\n+    /// This means that if a bit is not `BOTTOM_VALUE`, it is propagated into all target blocks.\n+    /// For clarity, the above statement again from a different perspective:\n+    /// A bit in the block's entry set is `!BOTTOM_VALUE` if *any* predecessor block's bit value is\n+    /// `!BOTTOM_VALUE`.\n+    ///\n+    /// There are situations where you want the opposite behaviour: propagate only if *all*\n+    /// predecessor blocks's value is `!BOTTOM_VALUE`.\n+    /// E.g. if you want to know whether a bit is *definitely* set at a specific location. This\n+    /// means that all code paths leading to the location must have set the bit, instead of any\n+    /// code path leading there.\n+    ///\n+    /// If you want this kind of \"definitely set\" analysis, you need to\n+    /// 1. Invert `BOTTOM_VALUE`\n+    /// 2. Reset the `entry_set` in `start_block_effect` to `!BOTTOM_VALUE`\n+    /// 3. Override `join` to do the opposite from what it's doing now.\n     #[inline]\n     fn join<T: Idx>(&self, inout_set: &mut BitSet<T>, in_set: &BitSet<T>) -> bool {\n         if Self::BOTTOM_VALUE == false {\n@@ -685,7 +705,9 @@ pub trait BottomValue {\n /// for each block individually. The entry set for all other basic blocks is\n /// initialized to `Self::BOTTOM_VALUE`. The dataflow analysis then\n /// iteratively modifies the various entry sets (but leaves the the transfer\n-/// function unchanged).\n+/// function unchanged). `BottomValue::join` is used to merge the bitsets from\n+/// two blocks (e.g. when two blocks' terminator jumps to a single block, that\n+/// target block's state is the merged state of both incoming blocks).\n pub trait BitDenotation<'tcx>: BottomValue {\n     /// Specifies what index type is used to access the bitvector.\n     type Idx: Idx;"}, {"sha": "1368230168e07ef5a8f0faabdf7ca7f85e95c0ed", "filename": "src/librustc_parse/parser/mod.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/af958046e5855a4254831102b502f57dafa40f69/src%2Flibrustc_parse%2Fparser%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af958046e5855a4254831102b502f57dafa40f69/src%2Flibrustc_parse%2Fparser%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fmod.rs?ref=af958046e5855a4254831102b502f57dafa40f69", "patch": "@@ -2,6 +2,7 @@ pub mod attr;\n mod expr;\n mod item;\n mod module;\n+pub use module::{ModulePath, ModulePathSuccess};\n mod pat;\n mod path;\n mod ty;\n@@ -117,7 +118,8 @@ pub struct Parser<'a> {\n     /// Used to determine the path to externally loaded source files.\n     pub(super) directory: Directory<'a>,\n     /// `true` to parse sub-modules in other files.\n-    pub(super) recurse_into_file_modules: bool,\n+    // Public for rustfmt usage.\n+    pub recurse_into_file_modules: bool,\n     /// Name of the root module this parser originated from. If `None`, then the\n     /// name is not known. This does not change while the parser is descending\n     /// into modules, and sub-parsers have new values for this name.\n@@ -126,7 +128,8 @@ pub struct Parser<'a> {\n     token_cursor: TokenCursor,\n     desugar_doc_comments: bool,\n     /// `true` we should configure out of line modules as we parse.\n-    cfg_mods: bool,\n+    // Public for rustfmt usage.\n+    pub cfg_mods: bool,\n     /// This field is used to keep track of how many left angle brackets we have seen. This is\n     /// required in order to detect extra leading left angle brackets (`<` characters) and error\n     /// appropriately.\n@@ -483,7 +486,8 @@ impl<'a> Parser<'a> {\n         }\n     }\n \n-    fn parse_ident(&mut self) -> PResult<'a, ast::Ident> {\n+    // Public for rustfmt usage.\n+    pub fn parse_ident(&mut self) -> PResult<'a, ast::Ident> {\n         self.parse_ident_common(true)\n     }\n \n@@ -540,7 +544,8 @@ impl<'a> Parser<'a> {\n \n     /// If the next token is the given keyword, eats it and returns `true`.\n     /// Otherwise, returns `false`. An expectation is also added for diagnostics purposes.\n-    fn eat_keyword(&mut self, kw: Symbol) -> bool {\n+    // Public for rustfmt usage.\n+    pub fn eat_keyword(&mut self, kw: Symbol) -> bool {\n         if self.check_keyword(kw) {\n             self.bump();\n             true"}, {"sha": "6ce94d3c6793ce2fc04989e05e94038d58961d50", "filename": "src/librustc_parse/parser/module.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/af958046e5855a4254831102b502f57dafa40f69/src%2Flibrustc_parse%2Fparser%2Fmodule.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af958046e5855a4254831102b502f57dafa40f69/src%2Flibrustc_parse%2Fparser%2Fmodule.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fmodule.rs?ref=af958046e5855a4254831102b502f57dafa40f69", "patch": "@@ -14,13 +14,15 @@ use syntax::token::{self, TokenKind};\n use std::path::{self, Path, PathBuf};\n \n /// Information about the path to a module.\n-pub(super) struct ModulePath {\n+// Public for rustfmt usage.\n+pub struct ModulePath {\n     name: String,\n     path_exists: bool,\n     pub result: Result<ModulePathSuccess, Error>,\n }\n \n-pub(super) struct ModulePathSuccess {\n+// Public for rustfmt usage.\n+pub struct ModulePathSuccess {\n     pub path: PathBuf,\n     pub directory_ownership: DirectoryOwnership,\n }\n@@ -177,7 +179,8 @@ impl<'a> Parser<'a> {\n         }\n     }\n \n-    pub(super) fn submod_path_from_attr(attrs: &[Attribute], dir_path: &Path) -> Option<PathBuf> {\n+    // Public for rustfmt usage.\n+    pub fn submod_path_from_attr(attrs: &[Attribute], dir_path: &Path) -> Option<PathBuf> {\n         if let Some(s) = attr::first_attr_value_str_by_name(attrs, sym::path) {\n             let s = s.as_str();\n \n@@ -194,7 +197,8 @@ impl<'a> Parser<'a> {\n     }\n \n     /// Returns a path to a module.\n-    pub(super) fn default_submod_path(\n+    // Public for rustfmt usage.\n+    pub fn default_submod_path(\n         id: ast::Ident,\n         relative: Option<ast::Ident>,\n         dir_path: &Path,"}, {"sha": "a91fdb7a10e0da5587c6f3f097e55017e8844680", "filename": "src/librustdoc/html/static/rustdoc.css", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/af958046e5855a4254831102b502f57dafa40f69/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/af958046e5855a4254831102b502f57dafa40f69/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css?ref=af958046e5855a4254831102b502f57dafa40f69", "patch": "@@ -542,11 +542,11 @@ h4 > code, h3 > code, .invisible > code {\n }\n \n .content .stability::before {\n-\tcontent: '\u02ea';\n-\tfont-size: 30px;\n+\tcontent: '\u2b11';\n+\tfont-size: 25px;\n \tposition: absolute;\n-\ttop: -9px;\n-\tleft: -13px;\n+\ttop: -6px;\n+\tleft: -19px;\n }\n \n .content .impl-items .method, .content .impl-items > .type, .impl-items > .associatedconstant {"}, {"sha": "9a0e7bbabcba932d35ee51c3be0c90a16fff30a9", "filename": "src/librustdoc/html/static/themes/dark.css", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af958046e5855a4254831102b502f57dafa40f69/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Fdark.css", "raw_url": "https://github.com/rust-lang/rust/raw/af958046e5855a4254831102b502f57dafa40f69/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Fdark.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Fdark.css?ref=af958046e5855a4254831102b502f57dafa40f69", "patch": "@@ -105,6 +105,8 @@ pre {\n .content .highlighted.primitive { background-color: #00708a; }\n .content .highlighted.keyword { background-color: #884719; }\n \n+.content .stability::before { color: #ccc; }\n+\n .content span.enum, .content a.enum, .block a.current.enum { color: #82b089; }\n .content span.struct, .content a.struct, .block a.current.struct { color: #2dbfb8; }\n .content span.type, .content a.type, .block a.current.type { color: #ff7f00; }"}, {"sha": "ca8ea1c456a2c86745d8390b0f4031b015544be1", "filename": "src/librustdoc/html/static/themes/light.css", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af958046e5855a4254831102b502f57dafa40f69/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Flight.css", "raw_url": "https://github.com/rust-lang/rust/raw/af958046e5855a4254831102b502f57dafa40f69/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Flight.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Flight.css?ref=af958046e5855a4254831102b502f57dafa40f69", "patch": "@@ -105,6 +105,8 @@ pre {\n .content .highlighted.primitive { background-color: #9aecff; }\n .content .highlighted.keyword { background-color: #f99650; }\n \n+.content .stability::before { color: #ccc; }\n+\n .content span.enum, .content a.enum, .block a.current.enum { color: #508157; }\n .content span.struct, .content a.struct, .block a.current.struct { color: #ad448e; }\n .content span.type, .content a.type, .block a.current.type { color: #ba5d00; }"}, {"sha": "0b6e728dceb1d49719d9130d575f2ba8b3d0a273", "filename": "src/libstd/time.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af958046e5855a4254831102b502f57dafa40f69/src%2Flibstd%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af958046e5855a4254831102b502f57dafa40f69/src%2Flibstd%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftime.rs?ref=af958046e5855a4254831102b502f57dafa40f69", "patch": "@@ -67,7 +67,7 @@ pub use core::time::Duration;\n /// |:---------:|:--------------------------------------------------------------------:|\n /// | Cloud ABI | [clock_time_get (Monotonic Clock)]                                   |\n /// | SGX       | [`insecure_time` usercall]. More information on [timekeeping in SGX] |\n-/// | UNIX      | [clock_time_get (Monotonic Clock)]                                   |\n+/// | UNIX      | [clock_gettime (Monotonic Clock)]                                    |\n /// | Darwin    | [mach_absolute_time]                                                 |\n /// | VXWorks   | [clock_gettime (Monotonic Clock)]                                    |\n /// | WASI      | [__wasi_clock_time_get (Monotonic Clock)]                            |"}, {"sha": "edff8bea0f3d0b036896cb70e829e00495f262bd", "filename": "src/libtest/cli.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af958046e5855a4254831102b502f57dafa40f69/src%2Flibtest%2Fcli.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af958046e5855a4254831102b502f57dafa40f69/src%2Flibtest%2Fcli.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Fcli.rs?ref=af958046e5855a4254831102b502f57dafa40f69", "patch": "@@ -125,6 +125,8 @@ fn optgroups() -> getopts::Options {\n             `RUST_TEST_TIME_DOCTEST` environment variables.\n \n             Expected format of environment variable is `VARIABLE=WARN_TIME,CRITICAL_TIME`.\n+            Durations must be specified in milliseconds, e.g. `500,2000` means that the warn time\n+            is 0.5 seconds, and the critical time is 2 seconds.\n \n             Not available for --format=terse\",\n             \"plain|colored\","}, {"sha": "92c5c2025022e772351ee2e9ffc86b68b16730d5", "filename": "src/test/ui/feature-gate/issue-43106-gating-of-builtin-attrs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af958046e5855a4254831102b502f57dafa40f69/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-builtin-attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af958046e5855a4254831102b502f57dafa40f69/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-builtin-attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-builtin-attrs.rs?ref=af958046e5855a4254831102b502f57dafa40f69", "patch": "@@ -12,7 +12,7 @@\n // the change when it happens.\n //\n // At the time of authoring, the attributes here are listed in the\n-// order that they occur in libsyntax/feature_gate.rs.\n+// order that they occur in `librustc_feature`.\n //\n // Any builtin attributes that:\n //"}]}