{"sha": "9f460e7af88ca6efc1a58ebe781b47447acdb21b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlmNDYwZTdhZjg4Y2E2ZWZjMWE1OGViZTc4MWI0NzQ0N2FjZGIyMWI=", "commit": {"author": {"name": "Jakub Wieczorek", "email": "jakub@jakub.cc", "date": "2014-07-06T21:54:40Z"}, "committer": {"name": "Jakub Wieczorek", "email": "jakub@jakub.cc", "date": "2014-07-06T22:26:41Z"}, "message": "Properly bind nested pattern bindings when there's more than one\n\nFixes #15488.", "tree": {"sha": "e1336abf1d175e857027b97cc094ee4c6d454a51", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e1336abf1d175e857027b97cc094ee4c6d454a51"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9f460e7af88ca6efc1a58ebe781b47447acdb21b", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9f460e7af88ca6efc1a58ebe781b47447acdb21b", "html_url": "https://github.com/rust-lang/rust/commit/9f460e7af88ca6efc1a58ebe781b47447acdb21b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9f460e7af88ca6efc1a58ebe781b47447acdb21b/comments", "author": null, "committer": null, "parents": [{"sha": "e05ec9a2bf92dfda1951fec11d56b40b6761574a", "url": "https://api.github.com/repos/rust-lang/rust/commits/e05ec9a2bf92dfda1951fec11d56b40b6761574a", "html_url": "https://github.com/rust-lang/rust/commit/e05ec9a2bf92dfda1951fec11d56b40b6761574a"}], "stats": {"total": 82, "additions": 56, "deletions": 26}, "files": [{"sha": "db5268220fa99f4d907056e6abae51e23177ae61", "filename": "src/librustc/middle/check_match.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9f460e7af88ca6efc1a58ebe781b47447acdb21b/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f460e7af88ca6efc1a58ebe781b47447acdb21b/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs?ref=9f460e7af88ca6efc1a58ebe781b47447acdb21b", "patch": "@@ -411,14 +411,7 @@ fn is_useful(cx: &MatchCheckCtxt, matrix @ &Matrix(ref rows): &Matrix,\n         return NotUseful;\n     }\n     let real_pat = match rows.iter().find(|r| r.get(0).id != 0) {\n-        Some(r) => {\n-            match r.get(0).node {\n-                // An arm of the form `ref x @ sub_pat` has type\n-                // `sub_pat`, not `&sub_pat` as `x` itself does.\n-                PatIdent(BindByRef(_), _, Some(sub)) => sub,\n-                _ => *r.get(0)\n-            }\n-        }\n+        Some(r) => raw_pat(*r.get(0)),\n         None if v.len() == 0 => return NotUseful,\n         None => v[0]\n     };"}, {"sha": "0809079347b1f69f15b6851453785892c43fe93f", "filename": "src/librustc/middle/trans/_match.rs", "status": "modified", "additions": 17, "deletions": 18, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/9f460e7af88ca6efc1a58ebe781b47447acdb21b/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f460e7af88ca6efc1a58ebe781b47447acdb21b/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs?ref=9f460e7af88ca6efc1a58ebe781b47447acdb21b", "patch": "@@ -413,26 +413,25 @@ fn expand_nested_bindings<'a, 'b>(\n     let _indenter = indenter();\n \n     m.iter().map(|br| {\n-        match br.pats.get(col).node {\n-            ast::PatIdent(_, ref path1, Some(inner)) => {\n-                let pats = Vec::from_slice(br.pats.slice(0u, col))\n-                           .append((vec!(inner))\n-                                   .append(br.pats.slice(col + 1u, br.pats.len())).as_slice());\n-\n-                let mut bound_ptrs = br.bound_ptrs.clone();\n-                bound_ptrs.push((path1.node, val));\n-                Match {\n-                    pats: pats,\n-                    data: &*br.data,\n-                    bound_ptrs: bound_ptrs\n-                }\n-            }\n-            _ => Match {\n-                pats: br.pats.clone(),\n-                data: &*br.data,\n-                bound_ptrs: br.bound_ptrs.clone()\n+        let mut bound_ptrs = br.bound_ptrs.clone();\n+        let mut pat = *br.pats.get(col);\n+        loop {\n+            pat = match pat.node {\n+                ast::PatIdent(_, ref path, Some(inner)) => {\n+                    bound_ptrs.push((path.node, val));\n+                    inner.clone()\n+                },\n+                _ => break\n             }\n         }\n+\n+        let mut pats = br.pats.clone();\n+        *pats.get_mut(col) = pat;\n+        Match {\n+            pats: pats,\n+            data: &*br.data,\n+            bound_ptrs: bound_ptrs\n+        }\n     }).collect()\n }\n "}, {"sha": "61e905e5b17b6ae061d5e9691984d428dd273e4c", "filename": "src/test/run-pass/match-pattern-bindings.rs", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/9f460e7af88ca6efc1a58ebe781b47447acdb21b/src%2Ftest%2Frun-pass%2Fmatch-pattern-bindings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f460e7af88ca6efc1a58ebe781b47447acdb21b/src%2Ftest%2Frun-pass%2Fmatch-pattern-bindings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmatch-pattern-bindings.rs?ref=9f460e7af88ca6efc1a58ebe781b47447acdb21b", "patch": "@@ -0,0 +1,38 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {\n+    let value = Some(1i);\n+    assert_eq!(match value {\n+        ref a @ Some(_) => a,\n+        ref b @ None => b\n+    }, &Some(1i));\n+    assert_eq!(match value {\n+        ref a @ ref _c @ Some(_) => a,\n+        ref b @ None => b\n+    }, &Some(1i));\n+    assert_eq!(match value {\n+        _a @ ref c @ Some(_) => c,\n+        ref b @ None => b\n+    }, &Some(1i));\n+    assert_eq!(match \"foobarbaz\" {\n+        _a @ b @ _ => b\n+    }, \"foobarbaz\");\n+\n+    let a @ b @ c = \"foobarbaz\";\n+    assert_eq!(a, \"foobarbaz\");\n+    assert_eq!(b, \"foobarbaz\");\n+    assert_eq!(c, \"foobarbaz\");\n+    let value = Some(true);\n+    let ref a @ b @ ref c = value;\n+    assert_eq!(a, &Some(true));\n+    assert_eq!(b, Some(true));\n+    assert_eq!(c, &Some(true));\n+}"}]}