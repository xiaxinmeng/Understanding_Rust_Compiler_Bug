{"sha": "f3e4467c109364c557bfd998dabfeab6a045c605", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYzZTQ0NjdjMTA5MzY0YzU1N2JmZDk5OGRhYmZlYWI2YTA0NWM2MDU=", "commit": {"author": {"name": "xd009642", "email": "danielmckenna93@gmail.com", "date": "2019-06-22T21:22:11Z"}, "committer": {"name": "xd009642", "email": "danielmckenna93@gmail.com", "date": "2019-07-24T20:14:21Z"}, "message": "Changed Ty to ty, added lifetime 'tcx", "tree": {"sha": "c201a2ff2048b84b9f0dd1b17f01a61790c428db", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c201a2ff2048b84b9f0dd1b17f01a61790c428db"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f3e4467c109364c557bfd998dabfeab6a045c605", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f3e4467c109364c557bfd998dabfeab6a045c605", "html_url": "https://github.com/rust-lang/rust/commit/f3e4467c109364c557bfd998dabfeab6a045c605", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f3e4467c109364c557bfd998dabfeab6a045c605/comments", "author": {"login": "xd009642", "id": 3472518, "node_id": "MDQ6VXNlcjM0NzI1MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/3472518?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xd009642", "html_url": "https://github.com/xd009642", "followers_url": "https://api.github.com/users/xd009642/followers", "following_url": "https://api.github.com/users/xd009642/following{/other_user}", "gists_url": "https://api.github.com/users/xd009642/gists{/gist_id}", "starred_url": "https://api.github.com/users/xd009642/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xd009642/subscriptions", "organizations_url": "https://api.github.com/users/xd009642/orgs", "repos_url": "https://api.github.com/users/xd009642/repos", "events_url": "https://api.github.com/users/xd009642/events{/privacy}", "received_events_url": "https://api.github.com/users/xd009642/received_events", "type": "User", "site_admin": false}, "committer": {"login": "xd009642", "id": 3472518, "node_id": "MDQ6VXNlcjM0NzI1MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/3472518?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xd009642", "html_url": "https://github.com/xd009642", "followers_url": "https://api.github.com/users/xd009642/followers", "following_url": "https://api.github.com/users/xd009642/following{/other_user}", "gists_url": "https://api.github.com/users/xd009642/gists{/gist_id}", "starred_url": "https://api.github.com/users/xd009642/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xd009642/subscriptions", "organizations_url": "https://api.github.com/users/xd009642/orgs", "repos_url": "https://api.github.com/users/xd009642/repos", "events_url": "https://api.github.com/users/xd009642/events{/privacy}", "received_events_url": "https://api.github.com/users/xd009642/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f71d59e6a63d8624a121d29230a83ae39c856c6c", "url": "https://api.github.com/repos/rust-lang/rust/commits/f71d59e6a63d8624a121d29230a83ae39c856c6c", "html_url": "https://github.com/rust-lang/rust/commit/f71d59e6a63d8624a121d29230a83ae39c856c6c"}], "stats": {"total": 34, "additions": 17, "deletions": 17}, "files": [{"sha": "276d984f820618e32c9469fad0abbc4d146c367b", "filename": "clippy_lints/src/utils/hir_utils.rs", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/f3e4467c109364c557bfd998dabfeab6a045c605/clippy_lints%2Fsrc%2Futils%2Fhir_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3e4467c109364c557bfd998dabfeab6a045c605/clippy_lints%2Fsrc%2Futils%2Fhir_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fhir_utils.rs?ref=f3e4467c109364c557bfd998dabfeab6a045c605", "patch": "@@ -3,7 +3,7 @@ use crate::utils::differing_macro_contexts;\n use rustc::hir::ptr::P;\n use rustc::hir::*;\n use rustc::lint::LateContext;\n-use rustc::ty::{Ty, TypeckTables};\n+use rustc::ty::{self, Ty, TypeckTables};\n use std::collections::hash_map::DefaultHasher;\n use std::hash::{Hash, Hasher};\n use syntax::ast::Name;\n@@ -45,7 +45,7 @@ impl<'a, 'tcx> SpanlessEq<'a, 'tcx> {\n         match (&left.node, &right.node) {\n             (&StmtKind::Local(ref l), &StmtKind::Local(ref r)) => {\n                 self.eq_pat(&l.pat, &r.pat)\n-                    && both(&l.ty, &r.ty, |l, r| self.eq_ty(l, r))\n+                    && both(&l.ty, &r.ty, |l, r| self.eq_ty(*l, *r))\n                     && both(&l.init, &r.init, |l, r| self.eq_expr(l, r))\n             },\n             (&StmtKind::Expr(ref l), &StmtKind::Expr(ref r)) | (&StmtKind::Semi(ref l), &StmtKind::Semi(ref r)) => {\n@@ -257,7 +257,7 @@ impl<'a, 'tcx> SpanlessEq<'a, 'tcx> {\n         }\n     }\n \n-    pub fn eq_ty(&mut self, left: &Ty, right: &Ty) -> bool {\n+    pub fn eq_ty(&mut self, left: &Ty<'tcx>, right: &Ty<'tcx>) -> bool {\n         self.eq_ty_kind(&left.node, &right.node)\n     }\n \n@@ -604,26 +604,26 @@ impl<'a, 'tcx> SpanlessHash<'a, 'tcx> {\n         }\n     }\n \n-    pub fn hash_ty(&mut self, ty: &Ty) {\n+    pub fn hash_ty(&mut self, ty: &Ty<'tcx>) {\n         std::mem::discriminant(&ty.node).hash(&mut self.s);\n-        match ty.node {\n-            Ty::Slice(ty) => {\n+        match ty.sty {\n+            ty::Slice(ty) => {\n                 self.hash_ty(ty);\n             },\n-            Ty::Array(ty, anon_const) => {\n+            ty::Array(ty, anon_const) => {\n                 self.hash_ty(ty);\n                 self.hash_expr(&self.cx.tcx.hir().body(anon_const.body).value);\n             },\n-            Ty::Ptr(mut_ty) => {\n+            ty::Ptr(mut_ty) => {\n                 self.hash_ty(&mut_ty.ty);\n                 mut_ty.mutbl.hash(&mut self.s);\n             },\n-            Ty::Rptr(lifetime, mut_ty) => {\n+            ty::Rptr(lifetime, mut_ty) => {\n                 self.hash_lifetime(lifetime);\n                 self.hash_ty(&mut_ty.ty);\n                 mut_ty.mutbl.hash(&mut self.s);\n             },\n-            Ty::BareFn(bfn) => {\n+            ty::BareFn(bfn) => {\n                 bfn.unsafety.hash(&mut self.s);\n                 bfn.abi.hash(&mut self.s);\n                 for arg in &bfn.decl.inputs {\n@@ -639,13 +639,13 @@ impl<'a, 'tcx> SpanlessHash<'a, 'tcx> {\n                 }\n                 bfn.decl.c_variadic.hash(&mut self.s);\n             },\n-            Ty::Tup(ty_list) => {\n+            ty::Tup(ty_list) => {\n                 for ty in ty_list {\n                     self.hash_ty(ty);\n                 }\n \n             },\n-            Ty::Path(qpath) => {\n+            ty::Path(qpath) => {\n                 match qpath {\n                     QPath::Resolved(ref maybe_ty, ref path) => {\n                         if let Some(ref ty) = maybe_ty {\n@@ -661,7 +661,7 @@ impl<'a, 'tcx> SpanlessHash<'a, 'tcx> {\n                     },\n                 }\n             },\n-            Ty::Def(_, arg_list) => {\n+            ty::Def(_, arg_list) => {\n                 for arg in arg_list {\n                     match arg {\n                         GenericArg::Lifetime(ref l) => self.hash_lifetime(l),\n@@ -672,17 +672,17 @@ impl<'a, 'tcx> SpanlessHash<'a, 'tcx> {\n                     }\n                 }\n             },\n-            Ty::TraitObject(_, lifetime) => {\n+            ty::TraitObject(_, lifetime) => {\n                 self.hash_lifetime(lifetime);\n \n             },\n-            Ty::Typeof(anon_const) => {\n+            ty::Typeof(anon_const) => {\n                 self.hash_expr(&self.cx.tcx.hir().body(anon_const.body).value);\n             },\n-            Ty::CVarArgs(lifetime) => {\n+            ty::CVarArgs(lifetime) => {\n                 self.hash_lifetime(lifetime);\n             },\n-            Ty::Err | Ty::Infer | Ty::Never => {},\n+            ty::Err | ty::Infer | ty::Never => {},\n         }\n     }\n }"}]}