{"sha": "3fb27a0a9eb2e9bed679f093505657ee560e3df2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNmYjI3YTBhOWViMmU5YmVkNjc5ZjA5MzUwNTY1N2VlNTYwZTNkZjI=", "commit": {"author": {"name": "Mark Simulacrum", "email": "mark.simulacrum@gmail.com", "date": "2017-05-19T20:16:23Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-05-19T20:16:23Z"}, "message": "Rollup merge of #42082 - michaelwoerister:wider_def_path_hashes, r=eddyb\n\nincr. comp.: Use more bits for DefPath hashes\n\nUse 128 instead of 64 bits for DefPath hashes, like we do for everything else. Collision probability is unnecessarily high with 64 bits.\n\nAlso change the representation of `ich::Fingerprint` from `Fingerprint([u8; 16])` to `Fingerprint(u64, u64)` which is better for hashers like `FxHasher`.", "tree": {"sha": "3c8b832ddb84a42e0a5166c73ded49d44873f6c0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3c8b832ddb84a42e0a5166c73ded49d44873f6c0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3fb27a0a9eb2e9bed679f093505657ee560e3df2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3fb27a0a9eb2e9bed679f093505657ee560e3df2", "html_url": "https://github.com/rust-lang/rust/commit/3fb27a0a9eb2e9bed679f093505657ee560e3df2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3fb27a0a9eb2e9bed679f093505657ee560e3df2/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f3b7b61151f47ce0769cf48cbc4555421fb3e5d1", "url": "https://api.github.com/repos/rust-lang/rust/commits/f3b7b61151f47ce0769cf48cbc4555421fb3e5d1", "html_url": "https://github.com/rust-lang/rust/commit/f3b7b61151f47ce0769cf48cbc4555421fb3e5d1"}, {"sha": "4549423f28dc05ae47447a1111326b1b7055c1a9", "url": "https://api.github.com/repos/rust-lang/rust/commits/4549423f28dc05ae47447a1111326b1b7055c1a9", "html_url": "https://github.com/rust-lang/rust/commit/4549423f28dc05ae47447a1111326b1b7055c1a9"}], "stats": {"total": 117, "additions": 51, "deletions": 66}, "files": [{"sha": "9537b40b28a0bec7234ccf31c8aec309c0dd135b", "filename": "src/librustc/hir/map/definitions.rs", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/3fb27a0a9eb2e9bed679f093505657ee560e3df2/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fb27a0a9eb2e9bed679f093505657ee560e3df2/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs?ref=3fb27a0a9eb2e9bed679f093505657ee560e3df2", "patch": "@@ -16,6 +16,7 @@\n \n use hir;\n use hir::def_id::{CrateNum, DefId, DefIndex, LOCAL_CRATE, DefIndexAddressSpace};\n+use ich::Fingerprint;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::indexed_vec::IndexVec;\n use rustc_data_structures::stable_hasher::StableHasher;\n@@ -34,7 +35,7 @@ use util::nodemap::NodeMap;\n pub struct DefPathTable {\n     index_to_key: [Vec<DefKey>; 2],\n     key_to_index: FxHashMap<DefKey, DefIndex>,\n-    def_path_hashes: [Vec<u64>; 2],\n+    def_path_hashes: [Vec<Fingerprint>; 2],\n }\n \n // Unfortunately we have to provide a manual impl of Clone because of the\n@@ -55,7 +56,7 @@ impl DefPathTable {\n \n     fn allocate(&mut self,\n                 key: DefKey,\n-                def_path_hash: u64,\n+                def_path_hash: Fingerprint,\n                 address_space: DefIndexAddressSpace)\n                 -> DefIndex {\n         let index = {\n@@ -79,7 +80,7 @@ impl DefPathTable {\n     }\n \n     #[inline(always)]\n-    pub fn def_path_hash(&self, index: DefIndex) -> u64 {\n+    pub fn def_path_hash(&self, index: DefIndex) -> Fingerprint {\n         self.def_path_hashes[index.address_space().index()]\n                             [index.as_array_index()]\n     }\n@@ -146,8 +147,8 @@ impl Decodable for DefPathTable {\n         let index_to_key_lo: Vec<DefKey> = Decodable::decode(d)?;\n         let index_to_key_hi: Vec<DefKey> = Decodable::decode(d)?;\n \n-        let def_path_hashes_lo: Vec<u64> = Decodable::decode(d)?;\n-        let def_path_hashes_hi: Vec<u64> = Decodable::decode(d)?;\n+        let def_path_hashes_lo: Vec<Fingerprint> = Decodable::decode(d)?;\n+        let def_path_hashes_hi: Vec<Fingerprint> = Decodable::decode(d)?;\n \n         let index_to_key = [index_to_key_lo, index_to_key_hi];\n         let def_path_hashes = [def_path_hashes_lo, def_path_hashes_hi];\n@@ -210,7 +211,7 @@ pub struct DefKey {\n }\n \n impl DefKey {\n-    fn compute_stable_hash(&self, parent_hash: u64) -> u64 {\n+    fn compute_stable_hash(&self, parent_hash: Fingerprint) -> Fingerprint {\n         let mut hasher = StableHasher::new();\n \n         // We hash a 0u8 here to disambiguate between regular DefPath hashes,\n@@ -221,7 +222,7 @@ impl DefKey {\n         hasher.finish()\n     }\n \n-    fn root_parent_stable_hash(crate_name: &str, crate_disambiguator: &str) -> u64 {\n+    fn root_parent_stable_hash(crate_name: &str, crate_disambiguator: &str) -> Fingerprint {\n         let mut hasher = StableHasher::new();\n         // Disambiguate this from a regular DefPath hash,\n         // see compute_stable_hash() above.\n@@ -396,7 +397,7 @@ impl Definitions {\n     }\n \n     #[inline(always)]\n-    pub fn def_path_hash(&self, index: DefIndex) -> u64 {\n+    pub fn def_path_hash(&self, index: DefIndex) -> Fingerprint {\n         self.table.def_path_hash(index)\n     }\n "}, {"sha": "a947f6aeff709af0ebc9ec71a47658cc2988e084", "filename": "src/librustc/ich/fingerprint.rs", "status": "modified", "additions": 26, "deletions": 46, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/3fb27a0a9eb2e9bed679f093505657ee560e3df2/src%2Flibrustc%2Fich%2Ffingerprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fb27a0a9eb2e9bed679f093505657ee560e3df2/src%2Flibrustc%2Fich%2Ffingerprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Ffingerprint.rs?ref=3fb27a0a9eb2e9bed679f093505657ee560e3df2", "patch": "@@ -10,95 +10,75 @@\n \n use rustc_serialize::{Encodable, Decodable, Encoder, Decoder};\n use rustc_data_structures::stable_hasher;\n-use rustc_data_structures::ToHex;\n-\n-const FINGERPRINT_LENGTH: usize = 16;\n+use std::mem;\n+use std::slice;\n \n #[derive(Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Clone, Copy)]\n-pub struct Fingerprint(pub [u8; FINGERPRINT_LENGTH]);\n+pub struct Fingerprint(u64, u64);\n \n impl Fingerprint {\n     #[inline]\n     pub fn zero() -> Fingerprint {\n-        Fingerprint([0; FINGERPRINT_LENGTH])\n+        Fingerprint(0, 0)\n     }\n \n+    #[inline]\n     pub fn from_smaller_hash(hash: u64) -> Fingerprint {\n-        let mut result = Fingerprint::zero();\n-        result.0[0] = (hash >>  0) as u8;\n-        result.0[1] = (hash >>  8) as u8;\n-        result.0[2] = (hash >> 16) as u8;\n-        result.0[3] = (hash >> 24) as u8;\n-        result.0[4] = (hash >> 32) as u8;\n-        result.0[5] = (hash >> 40) as u8;\n-        result.0[6] = (hash >> 48) as u8;\n-        result.0[7] = (hash >> 56) as u8;\n-        result\n+        Fingerprint(hash, hash)\n     }\n \n+    #[inline]\n     pub fn to_smaller_hash(&self) -> u64 {\n-        ((self.0[0] as u64) <<  0) |\n-        ((self.0[1] as u64) <<  8) |\n-        ((self.0[2] as u64) << 16) |\n-        ((self.0[3] as u64) << 24) |\n-        ((self.0[4] as u64) << 32) |\n-        ((self.0[5] as u64) << 40) |\n-        ((self.0[6] as u64) << 48) |\n-        ((self.0[7] as u64) << 56)\n+        self.0\n     }\n \n     pub fn to_hex(&self) -> String {\n-        self.0.to_hex()\n+        format!(\"{:x}{:x}\", self.0, self.1)\n     }\n }\n \n impl Encodable for Fingerprint {\n     #[inline]\n     fn encode<S: Encoder>(&self, s: &mut S) -> Result<(), S::Error> {\n-        for &byte in &self.0 {\n-            s.emit_u8(byte)?;\n-        }\n-        Ok(())\n+        s.emit_u64(self.0.to_le())?;\n+        s.emit_u64(self.1.to_le())\n     }\n }\n \n impl Decodable for Fingerprint {\n     #[inline]\n     fn decode<D: Decoder>(d: &mut D) -> Result<Fingerprint, D::Error> {\n-        let mut result = Fingerprint([0u8; FINGERPRINT_LENGTH]);\n-        for byte in &mut result.0 {\n-            *byte = d.read_u8()?;\n-        }\n-        Ok(result)\n+        let _0 = u64::from_le(d.read_u64()?);\n+        let _1 = u64::from_le(d.read_u64()?);\n+        Ok(Fingerprint(_0, _1))\n     }\n }\n \n impl ::std::fmt::Display for Fingerprint {\n     fn fmt(&self, formatter: &mut ::std::fmt::Formatter) -> Result<(), ::std::fmt::Error> {\n-        for i in 0 .. self.0.len() {\n-            if i > 0 {\n-                write!(formatter, \"::\")?;\n-            }\n-\n-            write!(formatter, \"{}\", self.0[i])?;\n-        }\n-        Ok(())\n+        write!(formatter, \"{:x}-{:x}\", self.0, self.1)\n     }\n }\n \n-\n impl stable_hasher::StableHasherResult for Fingerprint {\n     fn finish(mut hasher: stable_hasher::StableHasher<Self>) -> Self {\n-        let mut fingerprint = Fingerprint::zero();\n-        fingerprint.0.copy_from_slice(hasher.finalize());\n-        fingerprint\n+        let hash_bytes: &[u8] = hasher.finalize();\n+\n+        assert!(hash_bytes.len() >= mem::size_of::<u64>() * 2);\n+        let hash_bytes: &[u64] = unsafe {\n+            slice::from_raw_parts(hash_bytes.as_ptr() as *const u64, 2)\n+        };\n+\n+        // The bytes returned bytes the Blake2B hasher are always little-endian.\n+        Fingerprint(u64::from_le(hash_bytes[0]), u64::from_le(hash_bytes[1]))\n     }\n }\n \n impl<CTX> stable_hasher::HashStable<CTX> for Fingerprint {\n+    #[inline]\n     fn hash_stable<W: stable_hasher::StableHasherResult>(&self,\n                                           _: &mut CTX,\n                                           hasher: &mut stable_hasher::StableHasher<W>) {\n-        ::std::hash::Hash::hash(&self.0, hasher);\n+        ::std::hash::Hash::hash(self, hasher);\n     }\n }"}, {"sha": "f25ec8ecd4d71beee729bf73ba0107d38cc38fa8", "filename": "src/librustc/ich/hcx.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3fb27a0a9eb2e9bed679f093505657ee560e3df2/src%2Flibrustc%2Fich%2Fhcx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fb27a0a9eb2e9bed679f093505657ee560e3df2/src%2Flibrustc%2Fich%2Fhcx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fhcx.rs?ref=3fb27a0a9eb2e9bed679f093505657ee560e3df2", "patch": "@@ -110,7 +110,7 @@ impl<'a, 'tcx: 'a> StableHashingContext<'a, 'tcx> {\n     }\n \n     #[inline]\n-    pub fn def_path_hash(&mut self, def_id: DefId) -> u64 {\n+    pub fn def_path_hash(&mut self, def_id: DefId) -> ich::Fingerprint {\n         self.tcx.def_path_hash(def_id)\n     }\n "}, {"sha": "8ad1db7859566d41d26147eeb7777084321e5dd1", "filename": "src/librustc/middle/cstore.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3fb27a0a9eb2e9bed679f093505657ee560e3df2/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fb27a0a9eb2e9bed679f093505657ee560e3df2/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcstore.rs?ref=3fb27a0a9eb2e9bed679f093505657ee560e3df2", "patch": "@@ -282,7 +282,7 @@ pub trait CrateStore {\n                     -> Option<DefId>;\n     fn def_key(&self, def: DefId) -> DefKey;\n     fn def_path(&self, def: DefId) -> hir_map::DefPath;\n-    fn def_path_hash(&self, def: DefId) -> u64;\n+    fn def_path_hash(&self, def: DefId) -> ich::Fingerprint;\n     fn struct_field_names(&self, def: DefId) -> Vec<ast::Name>;\n     fn item_children(&self, did: DefId) -> Vec<def::Export>;\n     fn load_macro(&self, did: DefId, sess: &Session) -> LoadedMacro;\n@@ -414,7 +414,7 @@ impl CrateStore for DummyCrateStore {\n     fn def_path(&self, def: DefId) -> hir_map::DefPath {\n         bug!(\"relative_def_path\")\n     }\n-    fn def_path_hash(&self, def: DefId) -> u64 {\n+    fn def_path_hash(&self, def: DefId) -> ich::Fingerprint {\n         bug!(\"wa\")\n     }\n     fn struct_field_names(&self, def: DefId) -> Vec<ast::Name> { bug!(\"struct_field_names\") }"}, {"sha": "359722ce96ec9786f0131c197805fac38806bfe7", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3fb27a0a9eb2e9bed679f093505657ee560e3df2/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fb27a0a9eb2e9bed679f093505657ee560e3df2/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=3fb27a0a9eb2e9bed679f093505657ee560e3df2", "patch": "@@ -19,7 +19,7 @@ use dep_graph::DepNode;\n use hir::{map as hir_map, FreevarMap, TraitMap};\n use hir::def::{Def, CtorKind, ExportMap};\n use hir::def_id::{CrateNum, DefId, DefIndex, CRATE_DEF_INDEX, LOCAL_CRATE};\n-use ich::StableHashingContext;\n+use ich::{self, StableHashingContext};\n use middle::const_val::ConstVal;\n use middle::lang_items::{FnTraitLangItem, FnMutTraitLangItem, FnOnceTraitLangItem};\n use middle::privacy::AccessLevels;\n@@ -2248,7 +2248,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n     }\n \n     #[inline]\n-    pub fn def_path_hash(self, def_id: DefId) -> u64 {\n+    pub fn def_path_hash(self, def_id: DefId) -> ich::Fingerprint {\n         if def_id.is_local() {\n             self.hir.definitions().def_path_hash(def_id.index)\n         } else {"}, {"sha": "348d164af4190af2d12ba7592cdfb06bf8b8b0c7", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3fb27a0a9eb2e9bed679f093505657ee560e3df2/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fb27a0a9eb2e9bed679f093505657ee560e3df2/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=3fb27a0a9eb2e9bed679f093505657ee560e3df2", "patch": "@@ -29,6 +29,7 @@ use util::nodemap::FxHashMap;\n use serialize;\n \n use hir;\n+use ich;\n \n use self::InferTy::*;\n use self::TypeVariants::*;\n@@ -849,7 +850,7 @@ impl<'a, 'tcx, 'gcx> ExistentialProjection<'tcx> {\n         self.item_name // safe to skip the binder to access a name\n     }\n \n-    pub fn sort_key(&self, tcx: TyCtxt<'a, 'gcx, 'tcx>) -> (u64, InternedString) {\n+    pub fn sort_key(&self, tcx: TyCtxt<'a, 'gcx, 'tcx>) -> (ich::Fingerprint, InternedString) {\n         // We want something here that is stable across crate boundaries.\n         // The DefId isn't but the `deterministic_hash` of the corresponding\n         // DefPath is.\n@@ -884,7 +885,7 @@ impl<'a, 'tcx, 'gcx> PolyExistentialProjection<'tcx> {\n         self.skip_binder().item_name()\n     }\n \n-    pub fn sort_key(&self, tcx: TyCtxt<'a, 'gcx, 'tcx>) -> (u64, InternedString) {\n+    pub fn sort_key(&self, tcx: TyCtxt<'a, 'gcx, 'tcx>) -> (ich::Fingerprint, InternedString) {\n         self.skip_binder().sort_key(tcx)\n     }\n "}, {"sha": "86774136bd6cbc0c07741dd3c83b22b4a8ee8395", "filename": "src/librustc/ty/trait_def.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3fb27a0a9eb2e9bed679f093505657ee560e3df2/src%2Flibrustc%2Fty%2Ftrait_def.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fb27a0a9eb2e9bed679f093505657ee560e3df2/src%2Flibrustc%2Fty%2Ftrait_def.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Ftrait_def.rs?ref=3fb27a0a9eb2e9bed679f093505657ee560e3df2", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n use hir::def_id::DefId;\n+use ich::Fingerprint;\n use traits::specialization_graph;\n use ty::fast_reject;\n use ty::fold::TypeFoldable;\n@@ -32,7 +33,7 @@ pub struct TraitDef {\n \n     /// The ICH of this trait's DefPath, cached here so it doesn't have to be\n     /// recomputed all the time.\n-    pub def_path_hash: u64,\n+    pub def_path_hash: Fingerprint,\n }\n \n // We don't store the list of impls in a flat list because each cached list of\n@@ -94,7 +95,7 @@ impl<'a, 'gcx, 'tcx> TraitDef {\n                unsafety: hir::Unsafety,\n                paren_sugar: bool,\n                has_default_impl: bool,\n-               def_path_hash: u64)\n+               def_path_hash: Fingerprint)\n                -> TraitDef {\n         TraitDef {\n             def_id,"}, {"sha": "c9ed9ad3c7d2d4d2027ab5b31fee1bac4259980d", "filename": "src/librustc_incremental/calculate_svh/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3fb27a0a9eb2e9bed679f093505657ee560e3df2/src%2Flibrustc_incremental%2Fcalculate_svh%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fb27a0a9eb2e9bed679f093505657ee560e3df2/src%2Flibrustc_incremental%2Fcalculate_svh%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fcalculate_svh%2Fmod.rs?ref=3fb27a0a9eb2e9bed679f093505657ee560e3df2", "patch": "@@ -224,7 +224,7 @@ impl<'a, 'tcx: 'a> ComputeItemHashesVisitor<'a, 'tcx> {\n     {\n         let tcx = self.hcx.tcx();\n \n-        let mut impls: Vec<(u64, Fingerprint)> = krate\n+        let mut impls: Vec<(Fingerprint, Fingerprint)> = krate\n             .trait_impls\n             .iter()\n             .map(|(&trait_id, impls)| {"}, {"sha": "7478f902e061a321614af006535e68a6f129dcae", "filename": "src/librustc_metadata/cstore_impl.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3fb27a0a9eb2e9bed679f093505657ee560e3df2/src%2Flibrustc_metadata%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fb27a0a9eb2e9bed679f093505657ee560e3df2/src%2Flibrustc_metadata%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore_impl.rs?ref=3fb27a0a9eb2e9bed679f093505657ee560e3df2", "patch": "@@ -17,6 +17,7 @@ use rustc::middle::cstore::{CrateStore, CrateSource, LibSource, DepKind,\n                             ExternCrate, NativeLibrary, MetadataLoader, LinkMeta,\n                             LinkagePreference, LoadedMacro, EncodedMetadata};\n use rustc::hir::def;\n+use rustc::ich;\n use rustc::middle::lang_items;\n use rustc::session::Session;\n use rustc::ty::{self, TyCtxt};\n@@ -337,7 +338,7 @@ impl CrateStore for cstore::CStore {\n         self.get_crate_data(def.krate).def_path(def.index)\n     }\n \n-    fn def_path_hash(&self, def: DefId) -> u64 {\n+    fn def_path_hash(&self, def: DefId) -> ich::Fingerprint {\n         self.get_crate_data(def.krate).def_path_hash(def.index)\n     }\n "}, {"sha": "d8826d87d4d0f4fd0752b05e5b4ff0dd7197d907", "filename": "src/librustc_metadata/decoder.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3fb27a0a9eb2e9bed679f093505657ee560e3df2/src%2Flibrustc_metadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fb27a0a9eb2e9bed679f093505657ee560e3df2/src%2Flibrustc_metadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdecoder.rs?ref=3fb27a0a9eb2e9bed679f093505657ee560e3df2", "patch": "@@ -16,6 +16,7 @@ use schema::*;\n use rustc::dep_graph::{DepGraph, DepNode, GlobalMetaDataKind};\n use rustc::hir::map::{DefKey, DefPath, DefPathData};\n use rustc::hir;\n+use rustc::ich;\n \n use rustc::middle::cstore::LinkagePreference;\n use rustc::hir::def::{self, Def, CtorKind};\n@@ -1106,7 +1107,7 @@ impl<'a, 'tcx> CrateMetadata {\n     }\n \n     #[inline]\n-    pub fn def_path_hash(&self, index: DefIndex) -> u64 {\n+    pub fn def_path_hash(&self, index: DefIndex) -> ich::Fingerprint {\n         self.def_path_table.def_path_hash(index)\n     }\n "}]}