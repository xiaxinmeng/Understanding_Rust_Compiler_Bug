{"sha": "a9cb094879fabd23774a0d9dcfed7f3eeb9a4aff", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE5Y2IwOTQ4NzlmYWJkMjM3NzRhMGQ5ZGNmZWQ3ZjNlZWI5YTRhZmY=", "commit": {"author": {"name": "Felix Raimundo", "email": "felix.raimundo@tweag.io", "date": "2017-05-13T19:42:51Z"}, "committer": {"name": "Felix Raimundo", "email": "felix.raimundo@tweag.io", "date": "2017-05-14T12:05:10Z"}, "message": "Explain why `thread::yield_now` could be used.\n\nPart of #29378.", "tree": {"sha": "48f3dda41fe3752ec90211595fbbac8b65cfb229", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/48f3dda41fe3752ec90211595fbbac8b65cfb229"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a9cb094879fabd23774a0d9dcfed7f3eeb9a4aff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a9cb094879fabd23774a0d9dcfed7f3eeb9a4aff", "html_url": "https://github.com/rust-lang/rust/commit/a9cb094879fabd23774a0d9dcfed7f3eeb9a4aff", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a9cb094879fabd23774a0d9dcfed7f3eeb9a4aff/comments", "author": null, "committer": null, "parents": [{"sha": "77f1bec6f5eb9ed632c973b97b12701294e6d3a5", "url": "https://api.github.com/repos/rust-lang/rust/commits/77f1bec6f5eb9ed632c973b97b12701294e6d3a5", "html_url": "https://github.com/rust-lang/rust/commit/77f1bec6f5eb9ed632c973b97b12701294e6d3a5"}], "stats": {"total": 23, "additions": 23, "deletions": 0}, "files": [{"sha": "8f1a88ed3051508121e99517d6213700eb5b0fbb", "filename": "src/libstd/thread/mod.rs", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/a9cb094879fabd23774a0d9dcfed7f3eeb9a4aff/src%2Flibstd%2Fthread%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9cb094879fabd23774a0d9dcfed7f3eeb9a4aff/src%2Flibstd%2Fthread%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread%2Fmod.rs?ref=a9cb094879fabd23774a0d9dcfed7f3eeb9a4aff", "patch": "@@ -468,13 +468,36 @@ pub fn current() -> Thread {\n \n /// Cooperatively gives up a timeslice to the OS scheduler.\n ///\n+/// This is used when the programmer knows that the thread will have nothing\n+/// to do for some time, and thus avoid wasting computing time.\n+///\n+/// For example when polling on a resource, it is common to check that it is\n+/// available, and if not to yield in order to avoid busy waiting.\n+///\n+/// Thus the pattern of `yield`ing after a failed poll is rather common when\n+/// implementing low-level shared resources or synchronization primitives.\n+///\n+/// However programmers will usualy prefer to use, [`channel`]s, [`Condvar`]s,\n+/// [`Mutex`]es or [`join`] for their synchronisation routines, as they avoid\n+/// thinking about thread schedulling.\n+///\n+/// Note that [`channel`]s for example are implemented using this primitive.\n+/// Indeed when you call `send` or `recv`, which are blocking, they will yield\n+/// if the channel is not available.\n+///\n /// # Examples\n ///\n /// ```\n /// use std::thread;\n ///\n /// thread::yield_now();\n /// ```\n+///\n+/// [`channel`]: ../../std/sync/mpsc/index.html\n+/// [`spawn`]: ../../std/thread/fn.spawn.html\n+/// [`join`]: ../../std/thread/struct.JoinHandle.html#method.join\n+/// [`Mutex`]: ../../std/sync/struct.Mutex.html\n+/// [`Condvar`]: ../../std/sync/struct.Condvar.html\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub fn yield_now() {\n     imp::Thread::yield_now()"}]}