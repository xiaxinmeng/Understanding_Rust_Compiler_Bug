{"sha": "3655175a75f503c9855b6a73a9d3c83997354c1d", "node_id": "C_kwDOAAsO6NoAKDM2NTUxNzVhNzVmNTAzYzk4NTViNmE3M2E5ZDNjODM5OTczNTRjMWQ", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-17T12:01:12Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-17T12:01:12Z"}, "message": "Auto merge of #97111 - JohnTitor:rollup-x3vjf6u, r=JohnTitor\n\nRollup of 7 pull requests\n\nSuccessful merges:\n\n - #96329 (Add a couple tests for #90887 fixes)\n - #97009 (Allow `unused_macro_rules` in path tests)\n - #97075 (Add regression test for #81804)\n - #97079 (Change `Successors` to `impl Iterator<Item = BasicBlock>`)\n - #97080 (remove the `RelateResultCompare` trait)\n - #97093 (Migrate `maybe_recover_from_bad_type_plus` diagnostic)\n - #97102 (Update function pointer call error message)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "7fd617295beefbc6c1264981717f2c0bdd5508a2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7fd617295beefbc6c1264981717f2c0bdd5508a2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3655175a75f503c9855b6a73a9d3c83997354c1d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3655175a75f503c9855b6a73a9d3c83997354c1d", "html_url": "https://github.com/rust-lang/rust/commit/3655175a75f503c9855b6a73a9d3c83997354c1d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3655175a75f503c9855b6a73a9d3c83997354c1d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "735efc0c703812343a5e5d19b600dac73b8a89f0", "url": "https://api.github.com/repos/rust-lang/rust/commits/735efc0c703812343a5e5d19b600dac73b8a89f0", "html_url": "https://github.com/rust-lang/rust/commit/735efc0c703812343a5e5d19b600dac73b8a89f0"}, {"sha": "5fdc849bdc44b9170ee149770b590f5f0afb662f", "url": "https://api.github.com/repos/rust-lang/rust/commits/5fdc849bdc44b9170ee149770b590f5f0afb662f", "html_url": "https://github.com/rust-lang/rust/commit/5fdc849bdc44b9170ee149770b590f5f0afb662f"}], "stats": {"total": 347, "additions": 250, "deletions": 97}, "files": [{"sha": "5252b0b50c308a4c6a47529491ce95977386a303", "filename": "compiler/rustc_borrowck/src/dataflow.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3655175a75f503c9855b6a73a9d3c83997354c1d/compiler%2Frustc_borrowck%2Fsrc%2Fdataflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3655175a75f503c9855b6a73a9d3c83997354c1d/compiler%2Frustc_borrowck%2Fsrc%2Fdataflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdataflow.rs?ref=3655175a75f503c9855b6a73a9d3c83997354c1d", "patch": "@@ -199,7 +199,7 @@ impl<'tcx> OutOfScopePrecomputer<'_, 'tcx> {\n                 // Add successor BBs to the work list, if necessary.\n                 let bb_data = &self.body[bb];\n                 debug_assert!(hi == bb_data.statements.len());\n-                for &succ_bb in bb_data.terminator().successors() {\n+                for succ_bb in bb_data.terminator().successors() {\n                     if !self.visited.insert(succ_bb) {\n                         if succ_bb == location.block && first_lo > 0 {\n                             // `succ_bb` has been seen before. If it wasn't"}, {"sha": "6ec6b76bb5f856fb968be66a80e8520858733c88", "filename": "compiler/rustc_borrowck/src/diagnostics/explain_borrow.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3655175a75f503c9855b6a73a9d3c83997354c1d/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fexplain_borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3655175a75f503c9855b6a73a9d3c83997354c1d/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fexplain_borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fexplain_borrow.rs?ref=3655175a75f503c9855b6a73a9d3c83997354c1d", "patch": "@@ -467,7 +467,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                     block\n                         .terminator()\n                         .successors()\n-                        .map(|bb| Location { statement_index: 0, block: *bb })\n+                        .map(|bb| Location { statement_index: 0, block: bb })\n                         .filter(|s| visited_locations.insert(*s))\n                         .map(|s| {\n                             if self.is_back_edge(location, s) {\n@@ -526,7 +526,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                 }\n             } else {\n                 for bb in block.terminator().successors() {\n-                    let successor = Location { statement_index: 0, block: *bb };\n+                    let successor = Location { statement_index: 0, block: bb };\n \n                     if !visited_locations.contains(&successor)\n                         && self.find_loop_head_dfs(successor, loop_head, visited_locations)"}, {"sha": "22e7cd9e52c9f793ce060ad75c13d64037cec64d", "filename": "compiler/rustc_borrowck/src/diagnostics/find_use.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3655175a75f503c9855b6a73a9d3c83997354c1d/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Ffind_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3655175a75f503c9855b6a73a9d3c83997354c1d/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Ffind_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Ffind_use.rs?ref=3655175a75f503c9855b6a73a9d3c83997354c1d", "patch": "@@ -67,8 +67,8 @@ impl<'cx, 'tcx> UseFinder<'cx, 'tcx> {\n                             block_data\n                                 .terminator()\n                                 .successors()\n-                                .filter(|&bb| Some(&Some(*bb)) != block_data.terminator().unwind())\n-                                .map(|&bb| Location { statement_index: 0, block: bb }),\n+                                .filter(|&bb| Some(&Some(bb)) != block_data.terminator().unwind())\n+                                .map(|bb| Location { statement_index: 0, block: bb }),\n                         );\n                     }\n                 }"}, {"sha": "6f8fae2de29a7994e847498c7f5414cb98fdfd77", "filename": "compiler/rustc_borrowck/src/nll.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3655175a75f503c9855b6a73a9d3c83997354c1d/compiler%2Frustc_borrowck%2Fsrc%2Fnll.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3655175a75f503c9855b6a73a9d3c83997354c1d/compiler%2Frustc_borrowck%2Fsrc%2Fnll.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fnll.rs?ref=3655175a75f503c9855b6a73a9d3c83997354c1d", "patch": "@@ -108,7 +108,7 @@ fn populate_polonius_move_facts(\n                     // We are at the terminator of an init that has a panic path,\n                     // and where the init should not happen on panic\n \n-                    for &successor in block_data.terminator().successors() {\n+                    for successor in block_data.terminator().successors() {\n                         if body[successor].is_cleanup {\n                             continue;\n                         }"}, {"sha": "80dab115fac46044b1fb78a090a2d0006ea7f155", "filename": "compiler/rustc_codegen_ssa/src/mir/analyze.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3655175a75f503c9855b6a73a9d3c83997354c1d/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fanalyze.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3655175a75f503c9855b6a73a9d3c83997354c1d/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fanalyze.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fanalyze.rs?ref=3655175a75f503c9855b6a73a9d3c83997354c1d", "patch": "@@ -328,7 +328,7 @@ pub fn cleanup_kinds(mir: &mir::Body<'_>) -> IndexVec<mir::BasicBlock, CleanupKi\n                 bb, data, result[bb], funclet\n             );\n \n-            for &succ in data.terminator().successors() {\n+            for succ in data.terminator().successors() {\n                 let kind = result[succ];\n                 debug!(\"cleanup_kinds: propagating {:?} to {:?}/{:?}\", funclet, succ, kind);\n                 match kind {"}, {"sha": "4e71baa77b0fd4a4d1ac6c8bf6323b2723d0f9af", "filename": "compiler/rustc_const_eval/src/transform/check_consts/ops.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3655175a75f503c9855b6a73a9d3c83997354c1d/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3655175a75f503c9855b6a73a9d3c83997354c1d/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs?ref=3655175a75f503c9855b6a73a9d3c83997354c1d", "patch": "@@ -89,7 +89,10 @@ impl<'tcx> NonConstOp<'tcx> for FnCallIndirect {\n         ccx: &ConstCx<'_, 'tcx>,\n         span: Span,\n     ) -> DiagnosticBuilder<'tcx, ErrorGuaranteed> {\n-        ccx.tcx.sess.struct_span_err(span, \"function pointers are not allowed in const fn\")\n+        ccx.tcx.sess.struct_span_err(\n+            span,\n+            &format!(\"function pointer calls are not allowed in {}s\", ccx.const_kind()),\n+        )\n     }\n }\n "}, {"sha": "c98989b23c1a5edde8a615e7066103bc490e6903", "filename": "compiler/rustc_error_messages/locales/en-US/parser.ftl", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/3655175a75f503c9855b6a73a9d3c83997354c1d/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fparser.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/3655175a75f503c9855b6a73a9d3c83997354c1d/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fparser.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fparser.ftl?ref=3655175a75f503c9855b6a73a9d3c83997354c1d", "patch": "@@ -5,3 +5,12 @@ parser-struct-literal-body-without-path =\n parser-maybe-report-ambiguous-plus =\n     ambiguous `+` in a type\n     .suggestion = use parentheses to disambiguate\n+\n+parser-maybe-recover-from-bad-type-plus =\n+    expected a path on the left-hand side of `+`, not `{$ty}`\n+\n+parser-add-paren = try adding parentheses\n+\n+parser-forgot-paren = perhaps you forgot parentheses?\n+\n+parser-expect-path = expected a path"}, {"sha": "534106ac446cf8b147f4d73a3e9d615ce874e27e", "filename": "compiler/rustc_infer/src/infer/combine.rs", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/3655175a75f503c9855b6a73a9d3c83997354c1d/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3655175a75f503c9855b6a73a9d3c83997354c1d/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs?ref=3655175a75f503c9855b6a73a9d3c83997354c1d", "patch": "@@ -776,21 +776,6 @@ pub trait ConstEquateRelation<'tcx>: TypeRelation<'tcx> {\n     fn const_equate_obligation(&mut self, a: ty::Const<'tcx>, b: ty::Const<'tcx>);\n }\n \n-pub trait RelateResultCompare<'tcx, T> {\n-    fn compare<F>(&self, t: T, f: F) -> RelateResult<'tcx, T>\n-    where\n-        F: FnOnce() -> TypeError<'tcx>;\n-}\n-\n-impl<'tcx, T: Clone + PartialEq> RelateResultCompare<'tcx, T> for RelateResult<'tcx, T> {\n-    fn compare<F>(&self, t: T, f: F) -> RelateResult<'tcx, T>\n-    where\n-        F: FnOnce() -> TypeError<'tcx>,\n-    {\n-        self.clone().and_then(|s| if s == t { self.clone() } else { Err(f()) })\n-    }\n-}\n-\n pub fn const_unification_error<'tcx>(\n     a_is_expected: bool,\n     (a, b): (ty::Const<'tcx>, ty::Const<'tcx>),"}, {"sha": "6592e0ae8ec8f66c7e0fef7505d8786bce0cc93b", "filename": "compiler/rustc_infer/src/infer/nll_relate/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3655175a75f503c9855b6a73a9d3c83997354c1d/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fnll_relate%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3655175a75f503c9855b6a73a9d3c83997354c1d/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fnll_relate%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fnll_relate%2Fmod.rs?ref=3655175a75f503c9855b6a73a9d3c83997354c1d", "patch": "@@ -859,7 +859,7 @@ where\n \n     delegate: &'me mut D,\n \n-    /// After we generalize this type, we are going to relative it to\n+    /// After we generalize this type, we are going to relate it to\n     /// some other type. What will be the variance at this point?\n     ambient_variance: ty::Variance,\n "}, {"sha": "a4d78911b2760a471c12e816c031fee6d6c9caf4", "filename": "compiler/rustc_middle/src/mir/generic_graph.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3655175a75f503c9855b6a73a9d3c83997354c1d/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fgeneric_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3655175a75f503c9855b6a73a9d3c83997354c1d/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fgeneric_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fgeneric_graph.rs?ref=3655175a75f503c9855b6a73a9d3c83997354c1d", "patch": "@@ -24,7 +24,7 @@ pub fn mir_fn_to_generic_graph<'tcx>(tcx: TyCtxt<'tcx>, body: &Body<'_>) -> Grap\n         let terminator = body[source].terminator();\n         let labels = terminator.kind.fmt_successor_labels();\n \n-        for (&target, label) in terminator.successors().zip(labels) {\n+        for (target, label) in terminator.successors().zip(labels) {\n             let src = node(def_id, source);\n             let trg = node(def_id, target);\n             edges.push(Edge::new(src, trg, label.to_string()));"}, {"sha": "7a80afa72320be18ca4cecb86be2edaf04eb7c3f", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/3655175a75f503c9855b6a73a9d3c83997354c1d/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3655175a75f503c9855b6a73a9d3c83997354c1d/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=3655175a75f503c9855b6a73a9d3c83997354c1d", "patch": "@@ -1355,10 +1355,7 @@ pub enum InlineAsmOperand<'tcx> {\n /// Type for MIR `Assert` terminator error messages.\n pub type AssertMessage<'tcx> = AssertKind<Operand<'tcx>>;\n \n-// FIXME: Change `Successors` to `impl Iterator<Item = BasicBlock>`.\n-#[allow(rustc::pass_by_value)]\n-pub type Successors<'a> =\n-    iter::Chain<option::IntoIter<&'a BasicBlock>, slice::Iter<'a, BasicBlock>>;\n+pub type Successors<'a> = impl Iterator<Item = BasicBlock> + 'a;\n pub type SuccessorsMut<'a> =\n     iter::Chain<option::IntoIter<&'a mut BasicBlock>, slice::IterMut<'a, BasicBlock>>;\n \n@@ -3434,13 +3431,13 @@ impl<'tcx> graph::WithStartNode for Body<'tcx> {\n impl<'tcx> graph::WithSuccessors for Body<'tcx> {\n     #[inline]\n     fn successors(&self, node: Self::Node) -> <Self as GraphSuccessors<'_>>::Iter {\n-        self.basic_blocks[node].terminator().successors().cloned()\n+        self.basic_blocks[node].terminator().successors()\n     }\n }\n \n impl<'a, 'b> graph::GraphSuccessors<'b> for Body<'a> {\n     type Item = BasicBlock;\n-    type Iter = iter::Cloned<Successors<'b>>;\n+    type Iter = Successors<'b>;\n }\n \n impl<'tcx, 'graph> graph::GraphPredecessors<'graph> for Body<'tcx> {"}, {"sha": "3bcb8f9c34c9a560d290a99f57acdfb6783a782c", "filename": "compiler/rustc_middle/src/mir/patch.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3655175a75f503c9855b6a73a9d3c83997354c1d/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fpatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3655175a75f503c9855b6a73a9d3c83997354c1d/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fpatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fpatch.rs?ref=3655175a75f503c9855b6a73a9d3c83997354c1d", "patch": "@@ -166,9 +166,7 @@ impl<'tcx> MirPatch<'tcx> {\n             // get terminator's targets and apply the statement to all of them.\n             if loc.statement_index > body[loc.block].statements.len() {\n                 let term = body[loc.block].terminator();\n-                let successors = term.successors().clone();\n-\n-                for i in successors {\n+                for i in term.successors() {\n                     stmts_and_targets\n                         .push((Statement { source_info, kind: stmt.clone() }, i.clone()));\n                 }"}, {"sha": "ad09328585d27bda542ed76b50273588a3ef1f54", "filename": "compiler/rustc_middle/src/mir/predecessors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3655175a75f503c9855b6a73a9d3c83997354c1d/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fpredecessors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3655175a75f503c9855b6a73a9d3c83997354c1d/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fpredecessors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fpredecessors.rs?ref=3655175a75f503c9855b6a73a9d3c83997354c1d", "patch": "@@ -43,7 +43,7 @@ impl PredecessorCache {\n             let mut preds = IndexVec::from_elem(SmallVec::new(), basic_blocks);\n             for (bb, data) in basic_blocks.iter_enumerated() {\n                 if let Some(term) = &data.terminator {\n-                    for &succ in term.successors() {\n+                    for succ in term.successors() {\n                         preds[succ].push(bb);\n                     }\n                 }"}, {"sha": "fb3856b4952a032726dfeee9aaac585ffcd17835", "filename": "compiler/rustc_middle/src/mir/terminator.rs", "status": "modified", "additions": 27, "deletions": 23, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/3655175a75f503c9855b6a73a9d3c83997354c1d/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fterminator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3655175a75f503c9855b6a73a9d3c83997354c1d/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fterminator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fterminator.rs?ref=3655175a75f503c9855b6a73a9d3c83997354c1d", "patch": "@@ -416,32 +416,36 @@ impl<'tcx> TerminatorKind<'tcx> {\n             | Return\n             | Unreachable\n             | Call { destination: None, cleanup: None, .. }\n-            | InlineAsm { destination: None, cleanup: None, .. } => None.into_iter().chain(&[]),\n-            Goto { target: ref t }\n-            | Call { destination: None, cleanup: Some(ref t), .. }\n-            | Call { destination: Some((_, ref t)), cleanup: None, .. }\n-            | Yield { resume: ref t, drop: None, .. }\n-            | DropAndReplace { target: ref t, unwind: None, .. }\n-            | Drop { target: ref t, unwind: None, .. }\n-            | Assert { target: ref t, cleanup: None, .. }\n-            | FalseUnwind { real_target: ref t, unwind: None }\n-            | InlineAsm { destination: Some(ref t), cleanup: None, .. }\n-            | InlineAsm { destination: None, cleanup: Some(ref t), .. } => {\n-                Some(t).into_iter().chain(&[])\n+            | InlineAsm { destination: None, cleanup: None, .. } => {\n+                None.into_iter().chain((&[]).into_iter().copied())\n             }\n-            Call { destination: Some((_, ref t)), cleanup: Some(ref u), .. }\n-            | Yield { resume: ref t, drop: Some(ref u), .. }\n-            | DropAndReplace { target: ref t, unwind: Some(ref u), .. }\n-            | Drop { target: ref t, unwind: Some(ref u), .. }\n-            | Assert { target: ref t, cleanup: Some(ref u), .. }\n-            | FalseUnwind { real_target: ref t, unwind: Some(ref u) }\n-            | InlineAsm { destination: Some(ref t), cleanup: Some(ref u), .. } => {\n-                Some(t).into_iter().chain(slice::from_ref(u))\n+            Goto { target: t }\n+            | Call { destination: None, cleanup: Some(t), .. }\n+            | Call { destination: Some((_, t)), cleanup: None, .. }\n+            | Yield { resume: t, drop: None, .. }\n+            | DropAndReplace { target: t, unwind: None, .. }\n+            | Drop { target: t, unwind: None, .. }\n+            | Assert { target: t, cleanup: None, .. }\n+            | FalseUnwind { real_target: t, unwind: None }\n+            | InlineAsm { destination: Some(t), cleanup: None, .. }\n+            | InlineAsm { destination: None, cleanup: Some(t), .. } => {\n+                Some(t).into_iter().chain((&[]).into_iter().copied())\n             }\n-            SwitchInt { ref targets, .. } => None.into_iter().chain(&targets.targets),\n-            FalseEdge { ref real_target, ref imaginary_target } => {\n-                Some(real_target).into_iter().chain(slice::from_ref(imaginary_target))\n+            Call { destination: Some((_, t)), cleanup: Some(ref u), .. }\n+            | Yield { resume: t, drop: Some(ref u), .. }\n+            | DropAndReplace { target: t, unwind: Some(ref u), .. }\n+            | Drop { target: t, unwind: Some(ref u), .. }\n+            | Assert { target: t, cleanup: Some(ref u), .. }\n+            | FalseUnwind { real_target: t, unwind: Some(ref u) }\n+            | InlineAsm { destination: Some(t), cleanup: Some(ref u), .. } => {\n+                Some(t).into_iter().chain(slice::from_ref(u).into_iter().copied())\n             }\n+            SwitchInt { ref targets, .. } => {\n+                None.into_iter().chain(targets.targets.iter().copied())\n+            }\n+            FalseEdge { real_target, ref imaginary_target } => Some(real_target)\n+                .into_iter()\n+                .chain(slice::from_ref(imaginary_target).into_iter().copied()),\n         }\n     }\n "}, {"sha": "1cbfed621560d6a516edb278817535b54f2a03c4", "filename": "compiler/rustc_middle/src/mir/traversal.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3655175a75f503c9855b6a73a9d3c83997354c1d/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftraversal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3655175a75f503c9855b6a73a9d3c83997354c1d/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftraversal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftraversal.rs?ref=3655175a75f503c9855b6a73a9d3c83997354c1d", "patch": "@@ -180,7 +180,7 @@ impl<'a, 'tcx> Postorder<'a, 'tcx> {\n         // two iterations yield `C` and finally `A` for a final traversal of [E, D, B, C, A]\n         loop {\n             let bb = if let Some(&mut (_, ref mut iter)) = self.visit_stack.last_mut() {\n-                if let Some(&bb) = iter.next() {\n+                if let Some(bb) = iter.next() {\n                     bb\n                 } else {\n                     break;"}, {"sha": "c6a85bc43f458a0e4a22f3038b3c9662ded28a9c", "filename": "compiler/rustc_mir_dataflow/src/framework/graphviz.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3655175a75f503c9855b6a73a9d3c83997354c1d/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Fgraphviz.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3655175a75f503c9855b6a73a9d3c83997354c1d/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Fgraphviz.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Fgraphviz.rs?ref=3655175a75f503c9855b6a73a9d3c83997354c1d", "patch": "@@ -125,7 +125,7 @@ where\n     }\n \n     fn target(&self, edge: &Self::Edge) -> Self::Node {\n-        self.body[edge.source].terminator().successors().nth(edge.index).copied().unwrap()\n+        self.body[edge.source].terminator().successors().nth(edge.index).unwrap()\n     }\n }\n "}, {"sha": "434bf9d849e5a1fab81092de16c0e9a7f9fa8f2b", "filename": "compiler/rustc_mir_transform/src/coverage/debug.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3655175a75f503c9855b6a73a9d3c83997354c1d/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fdebug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3655175a75f503c9855b6a73a9d3c83997354c1d/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fdebug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fdebug.rs?ref=3655175a75f503c9855b6a73a9d3c83997354c1d", "patch": "@@ -701,7 +701,7 @@ pub(super) fn dump_coverage_graphviz<'tcx>(\n         edge_labels.retain(|label| label != \"unreachable\");\n         let edge_counters = from_terminator\n             .successors()\n-            .map(|&successor_bb| graphviz_data.get_edge_counter(from_bcb, successor_bb));\n+            .map(|successor_bb| graphviz_data.get_edge_counter(from_bcb, successor_bb));\n         iter::zip(&edge_labels, edge_counters)\n             .map(|(label, some_counter)| {\n                 if let Some(counter) = some_counter {"}, {"sha": "47190fa0d1ad9346125b52bc60f9f62659695d08", "filename": "compiler/rustc_mir_transform/src/coverage/graph.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3655175a75f503c9855b6a73a9d3c83997354c1d/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fgraph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3655175a75f503c9855b6a73a9d3c83997354c1d/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fgraph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fgraph.rs?ref=3655175a75f503c9855b6a73a9d3c83997354c1d", "patch": "@@ -484,17 +484,17 @@ fn bcb_filtered_successors<'a, 'tcx>(\n     body: &'tcx &'a mir::Body<'tcx>,\n     term_kind: &'tcx TerminatorKind<'tcx>,\n ) -> Box<dyn Iterator<Item = BasicBlock> + 'a> {\n-    let mut successors = term_kind.successors();\n     Box::new(\n         match &term_kind {\n             // SwitchInt successors are never unwind, and all of them should be traversed.\n-            TerminatorKind::SwitchInt { .. } => successors,\n+            TerminatorKind::SwitchInt { ref targets, .. } => {\n+                None.into_iter().chain(targets.all_targets().into_iter().copied())\n+            }\n             // For all other kinds, return only the first successor, if any, and ignore unwinds.\n             // NOTE: `chain(&[])` is required to coerce the `option::iter` (from\n             // `next().into_iter()`) into the `mir::Successors` aliased type.\n-            _ => successors.next().into_iter().chain(&[]),\n+            _ => term_kind.successors().next().into_iter().chain((&[]).into_iter().copied()),\n         }\n-        .copied()\n         .filter(move |&successor| body[successor].terminator().kind != TerminatorKind::Unreachable),\n     )\n }"}, {"sha": "a73fd13ce2d0ea13471570a4ef4f74c88ac76055", "filename": "compiler/rustc_mir_transform/src/inline.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3655175a75f503c9855b6a73a9d3c83997354c1d/compiler%2Frustc_mir_transform%2Fsrc%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3655175a75f503c9855b6a73a9d3c83997354c1d/compiler%2Frustc_mir_transform%2Fsrc%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Finline.rs?ref=3655175a75f503c9855b6a73a9d3c83997354c1d", "patch": "@@ -449,7 +449,7 @@ impl<'tcx> Inliner<'tcx> {\n             }\n \n             if !is_drop {\n-                for &succ in term.successors() {\n+                for succ in term.successors() {\n                     work_list.push(succ);\n                 }\n             }"}, {"sha": "f925d13b2fb91223d334e6066993080f7f526808", "filename": "compiler/rustc_mir_transform/src/remove_noop_landing_pads.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3655175a75f503c9855b6a73a9d3c83997354c1d/compiler%2Frustc_mir_transform%2Fsrc%2Fremove_noop_landing_pads.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3655175a75f503c9855b6a73a9d3c83997354c1d/compiler%2Frustc_mir_transform%2Fsrc%2Fremove_noop_landing_pads.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fremove_noop_landing_pads.rs?ref=3655175a75f503c9855b6a73a9d3c83997354c1d", "patch": "@@ -65,7 +65,7 @@ impl RemoveNoopLandingPads {\n             | TerminatorKind::SwitchInt { .. }\n             | TerminatorKind::FalseEdge { .. }\n             | TerminatorKind::FalseUnwind { .. } => {\n-                terminator.successors().all(|&succ| nop_landing_pads.contains(succ))\n+                terminator.successors().all(|succ| nop_landing_pads.contains(succ))\n             }\n             TerminatorKind::GeneratorDrop\n             | TerminatorKind::Yield { .. }"}, {"sha": "72e083439257645100def7667498a5002519f08d", "filename": "compiler/rustc_mir_transform/src/simplify.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3655175a75f503c9855b6a73a9d3c83997354c1d/compiler%2Frustc_mir_transform%2Fsrc%2Fsimplify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3655175a75f503c9855b6a73a9d3c83997354c1d/compiler%2Frustc_mir_transform%2Fsrc%2Fsimplify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fsimplify.rs?ref=3655175a75f503c9855b6a73a9d3c83997354c1d", "patch": "@@ -81,7 +81,7 @@ impl<'a, 'tcx> CfgSimplifier<'a, 'tcx> {\n \n         for (_, data) in traversal::preorder(body) {\n             if let Some(ref term) = data.terminator {\n-                for &tgt in term.successors() {\n+                for tgt in term.successors() {\n                     pred_count[tgt] += 1;\n                 }\n             }\n@@ -235,8 +235,8 @@ impl<'a, 'tcx> CfgSimplifier<'a, 'tcx> {\n         };\n \n         let first_succ = {\n-            if let Some(&first_succ) = terminator.successors().next() {\n-                if terminator.successors().all(|s| *s == first_succ) {\n+            if let Some(first_succ) = terminator.successors().next() {\n+                if terminator.successors().all(|s| s == first_succ) {\n                     let count = terminator.successors().count();\n                     self.pred_count[first_succ] -= (count - 1) as u32;\n                     first_succ"}, {"sha": "3b2ce0de50915a57e2765fda165677da8caf3709", "filename": "compiler/rustc_parse/src/parser/diagnostics.rs", "status": "modified", "additions": 46, "deletions": 24, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/3655175a75f503c9855b6a73a9d3c83997354c1d/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3655175a75f503c9855b6a73a9d3c83997354c1d/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs?ref=3655175a75f503c9855b6a73a9d3c83997354c1d", "patch": "@@ -21,7 +21,7 @@ use rustc_errors::{pluralize, struct_span_err, Diagnostic, EmissionGuarantee, Er\n use rustc_errors::{\n     Applicability, DiagnosticBuilder, DiagnosticMessage, Handler, MultiSpan, PResult,\n };\n-use rustc_macros::SessionDiagnostic;\n+use rustc_macros::{SessionDiagnostic, SessionSubdiagnostic};\n use rustc_span::source_map::Spanned;\n use rustc_span::symbol::{kw, Ident};\n use rustc_span::{Span, SpanSnippetError, DUMMY_SP};\n@@ -252,6 +252,40 @@ struct AmbiguousPlus {\n     pub span: Span,\n }\n \n+#[derive(SessionDiagnostic)]\n+#[error(code = \"E0178\", slug = \"parser-maybe-recover-from-bad-type-plus\")]\n+struct BadTypePlus<'a> {\n+    pub ty: String,\n+    #[primary_span]\n+    pub span: Span,\n+    #[subdiagnostic]\n+    pub sub: BadTypePlusSub<'a>,\n+}\n+\n+#[derive(SessionSubdiagnostic, Clone, Copy)]\n+pub enum BadTypePlusSub<'a> {\n+    #[suggestion(\n+        slug = \"parser-add-paren\",\n+        code = \"{sum_with_parens}\",\n+        applicability = \"machine-applicable\"\n+    )]\n+    AddParen {\n+        sum_with_parens: &'a str,\n+        #[primary_span]\n+        span: Span,\n+    },\n+    #[label(slug = \"parser-forgot-paren\")]\n+    ForgotParen {\n+        #[primary_span]\n+        span: Span,\n+    },\n+    #[label(slug = \"parser-expect-path\")]\n+    ExpectPath {\n+        #[primary_span]\n+        span: Span,\n+    },\n+}\n+\n // SnapshotParser is used to create a snapshot of the parser\n // without causing duplicate errors being emitted when the `Parser`\n // is dropped.\n@@ -1255,17 +1289,11 @@ impl<'a> Parser<'a> {\n         let bounds = self.parse_generic_bounds(None)?;\n         let sum_span = ty.span.to(self.prev_token.span);\n \n-        let mut err = struct_span_err!(\n-            self.sess.span_diagnostic,\n-            sum_span,\n-            E0178,\n-            \"expected a path on the left-hand side of `+`, not `{}`\",\n-            pprust::ty_to_string(ty)\n-        );\n+        let sum_with_parens: String;\n \n-        match ty.kind {\n+        let sub = match ty.kind {\n             TyKind::Rptr(ref lifetime, ref mut_ty) => {\n-                let sum_with_parens = pprust::to_string(|s| {\n+                sum_with_parens = pprust::to_string(|s| {\n                     s.s.word(\"&\");\n                     s.print_opt_lifetime(lifetime);\n                     s.print_mutability(mut_ty.mutbl, false);\n@@ -1274,21 +1302,15 @@ impl<'a> Parser<'a> {\n                     s.print_type_bounds(\" +\", &bounds);\n                     s.pclose()\n                 });\n-                err.span_suggestion(\n-                    sum_span,\n-                    \"try adding parentheses\",\n-                    sum_with_parens,\n-                    Applicability::MachineApplicable,\n-                );\n-            }\n-            TyKind::Ptr(..) | TyKind::BareFn(..) => {\n-                err.span_label(sum_span, \"perhaps you forgot parentheses?\");\n-            }\n-            _ => {\n-                err.span_label(sum_span, \"expected a path\");\n+\n+                BadTypePlusSub::AddParen { sum_with_parens: &sum_with_parens, span: sum_span }\n             }\n-        }\n-        err.emit();\n+            TyKind::Ptr(..) | TyKind::BareFn(..) => BadTypePlusSub::ForgotParen { span: sum_span },\n+            _ => BadTypePlusSub::ExpectPath { span: sum_span },\n+        };\n+\n+        self.sess.emit_err(BadTypePlus { ty: pprust::ty_to_string(ty), span: sum_span, sub });\n+\n         Ok(())\n     }\n "}, {"sha": "351cf698810f1faeb162150d4f586e3651b880fd", "filename": "library/std/src/path/tests.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3655175a75f503c9855b6a73a9d3c83997354c1d/library%2Fstd%2Fsrc%2Fpath%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3655175a75f503c9855b6a73a9d3c83997354c1d/library%2Fstd%2Fsrc%2Fpath%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fpath%2Ftests.rs?ref=3655175a75f503c9855b6a73a9d3c83997354c1d", "patch": "@@ -7,6 +7,7 @@ use crate::rc::Rc;\n use crate::sync::Arc;\n use core::hint::black_box;\n \n+#[allow(unknown_lints, unused_macro_rules)]\n macro_rules! t (\n     ($path:expr, iter: $iter:expr) => (\n         {"}, {"sha": "b1befdf06af2ea1c45e865bb38654b710f532b83", "filename": "src/test/ui/consts/const-fn-ptr.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/3655175a75f503c9855b6a73a9d3c83997354c1d/src%2Ftest%2Fui%2Fconsts%2Fconst-fn-ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3655175a75f503c9855b6a73a9d3c83997354c1d/src%2Ftest%2Fui%2Fconsts%2Fconst-fn-ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-fn-ptr.rs?ref=3655175a75f503c9855b6a73a9d3c83997354c1d", "patch": "@@ -0,0 +1,16 @@\n+const fn make_fn_ptr() -> fn() {\n+    || {}\n+}\n+\n+static STAT: () = make_fn_ptr()();\n+//~^ ERROR function pointer\n+\n+const CONST: () = make_fn_ptr()();\n+//~^ ERROR function pointer\n+\n+const fn call_ptr() {\n+    make_fn_ptr()();\n+    //~^ ERROR function pointer\n+}\n+\n+fn main() {}"}, {"sha": "84b02a25ec8c8e1117013ac8d8d7b2c6b8d50c55", "filename": "src/test/ui/consts/const-fn-ptr.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/3655175a75f503c9855b6a73a9d3c83997354c1d/src%2Ftest%2Fui%2Fconsts%2Fconst-fn-ptr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3655175a75f503c9855b6a73a9d3c83997354c1d/src%2Ftest%2Fui%2Fconsts%2Fconst-fn-ptr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-fn-ptr.stderr?ref=3655175a75f503c9855b6a73a9d3c83997354c1d", "patch": "@@ -0,0 +1,20 @@\n+error: function pointer calls are not allowed in statics\n+  --> $DIR/const-fn-ptr.rs:5:19\n+   |\n+LL | static STAT: () = make_fn_ptr()();\n+   |                   ^^^^^^^^^^^^^^^\n+\n+error: function pointer calls are not allowed in constants\n+  --> $DIR/const-fn-ptr.rs:8:19\n+   |\n+LL | const CONST: () = make_fn_ptr()();\n+   |                   ^^^^^^^^^^^^^^^\n+\n+error: function pointer calls are not allowed in constant functions\n+  --> $DIR/const-fn-ptr.rs:12:5\n+   |\n+LL |     make_fn_ptr()();\n+   |     ^^^^^^^^^^^^^^^\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "3b80b3486a82225c0fb8a17e6158ea2f2ac8e1c3", "filename": "src/test/ui/consts/issue-56164.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3655175a75f503c9855b6a73a9d3c83997354c1d/src%2Ftest%2Fui%2Fconsts%2Fissue-56164.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3655175a75f503c9855b6a73a9d3c83997354c1d/src%2Ftest%2Fui%2Fconsts%2Fissue-56164.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-56164.stderr?ref=3655175a75f503c9855b6a73a9d3c83997354c1d", "patch": "@@ -7,7 +7,7 @@ LL | const fn foo() { (||{})() }\n    = note: closures need an RFC before allowed to be called in constant functions\n    = note: calls in constant functions are limited to constant functions, tuple structs and tuple variants\n \n-error: function pointers are not allowed in const fn\n+error: function pointer calls are not allowed in constant functions\n   --> $DIR/issue-56164.rs:7:5\n    |\n LL |     input()"}, {"sha": "4d38cb19e9bf2e00dc68007899b44a319fbd7ba0", "filename": "src/test/ui/higher-rank-trait-bounds/normalize-under-binder/issue-56556.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/3655175a75f503c9855b6a73a9d3c83997354c1d/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fnormalize-under-binder%2Fissue-56556.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3655175a75f503c9855b6a73a9d3c83997354c1d/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fnormalize-under-binder%2Fissue-56556.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fnormalize-under-binder%2Fissue-56556.rs?ref=3655175a75f503c9855b6a73a9d3c83997354c1d", "patch": "@@ -11,3 +11,20 @@ where\n fn main() {\n     foo::<Vec<u32>>(vec![]);\n }\n+\n+mod another {\n+    use std::ops::Deref;\n+\n+    fn test<T, TDeref>()\n+    where\n+        T: Deref<Target = TDeref>,\n+        TDeref: ?Sized,\n+        for<'a> &'a TDeref: IntoIterator,\n+        for<'a> <&'a TDeref as IntoIterator>::IntoIter: Clone,\n+    {\n+    }\n+\n+    fn main() {\n+        test::<Vec<u8>, _>();\n+    }\n+}"}, {"sha": "ffd6857d84a6eeebf3b3fa8795f4e996cee9fdab", "filename": "src/test/ui/higher-rank-trait-bounds/normalize-under-binder/issue-90875.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/3655175a75f503c9855b6a73a9d3c83997354c1d/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fnormalize-under-binder%2Fissue-90875.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3655175a75f503c9855b6a73a9d3c83997354c1d/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fnormalize-under-binder%2Fissue-90875.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fnormalize-under-binder%2Fissue-90875.rs?ref=3655175a75f503c9855b6a73a9d3c83997354c1d", "patch": "@@ -0,0 +1,31 @@\n+// check-pass\n+\n+trait Variable<'a> {\n+    type Type;\n+}\n+\n+impl Variable<'_> for () {\n+    type Type = ();\n+}\n+\n+fn check<F, T>(_: F)\n+where\n+    F: Fn(T), // <- if removed, all fn_* then require type annotations\n+    F: for<'a> Fn(<T as Variable<'a>>::Type),\n+    T: for<'a> Variable<'a>,\n+{\n+}\n+\n+fn test(arg: impl Fn(())) {\n+    fn fn_1(_: ()) {}\n+    let fn_2 = |_: ()| ();\n+    let fn_3 = |a| fn_1(a);\n+    let fn_4 = arg;\n+\n+    check(fn_1); // Error\n+    check(fn_2); // Ok\n+    check(fn_3); // Ok\n+    check(fn_4); // Error\n+}\n+\n+fn main() {}"}, {"sha": "803bde11e20d133edada924c9e39af109c5a4840", "filename": "src/test/ui/parser/issue-81804.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/3655175a75f503c9855b6a73a9d3c83997354c1d/src%2Ftest%2Fui%2Fparser%2Fissue-81804.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3655175a75f503c9855b6a73a9d3c83997354c1d/src%2Ftest%2Fui%2Fparser%2Fissue-81804.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-81804.rs?ref=3655175a75f503c9855b6a73a9d3c83997354c1d", "patch": "@@ -0,0 +1,9 @@\n+// error-pattern: this file contains an unclosed delimiter\n+// error-pattern: this file contains an unclosed delimiter\n+// error-pattern: expected pattern, found `=`\n+// error-pattern: expected one of `)`, `,`, `->`, `where`, or `{`, found `]`\n+// error-pattern: expected item, found `]`\n+\n+fn main() {}\n+\n+fn p([=(}"}, {"sha": "19c4422c6221c2eeadda997cd964b23de019e495", "filename": "src/test/ui/parser/issue-81804.stderr", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/3655175a75f503c9855b6a73a9d3c83997354c1d/src%2Ftest%2Fui%2Fparser%2Fissue-81804.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3655175a75f503c9855b6a73a9d3c83997354c1d/src%2Ftest%2Fui%2Fparser%2Fissue-81804.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-81804.stderr?ref=3655175a75f503c9855b6a73a9d3c83997354c1d", "patch": "@@ -0,0 +1,41 @@\n+error: this file contains an unclosed delimiter\n+  --> $DIR/issue-81804.rs:9:11\n+   |\n+LL | fn p([=(}\n+   |     --    ^\n+   |     ||\n+   |     |unclosed delimiter\n+   |     unclosed delimiter\n+\n+error: this file contains an unclosed delimiter\n+  --> $DIR/issue-81804.rs:9:11\n+   |\n+LL | fn p([=(}\n+   |     --    ^\n+   |     ||\n+   |     |unclosed delimiter\n+   |     unclosed delimiter\n+\n+error: expected pattern, found `=`\n+  --> $DIR/issue-81804.rs:9:7\n+   |\n+LL | fn p([=(}\n+   |       ^ expected pattern\n+\n+error: expected one of `)`, `,`, `->`, `where`, or `{`, found `]`\n+  --> $DIR/issue-81804.rs:9:8\n+   |\n+LL | fn p([=(}\n+   |        ^ -^\n+   |        | |\n+   |        | help: `)` may belong here\n+   |        unclosed delimiter\n+\n+error: expected item, found `]`\n+  --> $DIR/issue-81804.rs:9:11\n+   |\n+LL | fn p([=(}\n+   |           ^ expected item\n+\n+error: aborting due to 5 previous errors\n+"}, {"sha": "37aac8b2a49786efe9cf3fa62d54e2855e4406d8", "filename": "src/tools/clippy/clippy_lints/src/redundant_clone.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3655175a75f503c9855b6a73a9d3c83997354c1d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fredundant_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3655175a75f503c9855b6a73a9d3c83997354c1d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fredundant_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fredundant_clone.rs?ref=3655175a75f503c9855b6a73a9d3c83997354c1d", "patch": "@@ -114,7 +114,7 @@ impl<'tcx> LateLintPass<'tcx> for RedundantClone {\n             }\n \n             // Give up on loops\n-            if terminator.successors().any(|s| *s == bb) {\n+            if terminator.successors().any(|s| s == bb) {\n                 continue;\n             }\n \n@@ -440,7 +440,7 @@ fn visit_clone_usage(cloned: mir::Local, clone: mir::Local, mir: &mir::Body<'_>,\n             // Short-circuit\n             if (usage.cloned_used && usage.clone_consumed_or_mutated) ||\n                 // Give up on loops\n-                tdata.terminator().successors().any(|s| *s == bb)\n+                tdata.terminator().successors().any(|s| s == bb)\n             {\n                 return CloneUsage {\n                     cloned_used: true,"}]}