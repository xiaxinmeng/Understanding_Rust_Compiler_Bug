{"sha": "90f06ae33fdf34e60c29cbd38dd3ec7be6b3badb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkwZjA2YWUzM2ZkZjM0ZTYwYzI5Y2JkMzhkZDNlYzdiZTZiM2JhZGI=", "commit": {"author": {"name": "Andrew Paseltiner", "email": "apaseltiner@gmail.com", "date": "2015-03-13T17:47:55Z"}, "committer": {"name": "Andrew Paseltiner", "email": "apaseltiner@gmail.com", "date": "2015-03-16T13:55:41Z"}, "message": "document undefined collection behavior with interior mutability\n\ncloses #23327", "tree": {"sha": "ed7416aa18a4af2fa2c752b32c643181aac4b469", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ed7416aa18a4af2fa2c752b32c643181aac4b469"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/90f06ae33fdf34e60c29cbd38dd3ec7be6b3badb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/90f06ae33fdf34e60c29cbd38dd3ec7be6b3badb", "html_url": "https://github.com/rust-lang/rust/commit/90f06ae33fdf34e60c29cbd38dd3ec7be6b3badb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/90f06ae33fdf34e60c29cbd38dd3ec7be6b3badb/comments", "author": {"login": "apasel422", "id": 8644784, "node_id": "MDQ6VXNlcjg2NDQ3ODQ=", "avatar_url": "https://avatars.githubusercontent.com/u/8644784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apasel422", "html_url": "https://github.com/apasel422", "followers_url": "https://api.github.com/users/apasel422/followers", "following_url": "https://api.github.com/users/apasel422/following{/other_user}", "gists_url": "https://api.github.com/users/apasel422/gists{/gist_id}", "starred_url": "https://api.github.com/users/apasel422/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apasel422/subscriptions", "organizations_url": "https://api.github.com/users/apasel422/orgs", "repos_url": "https://api.github.com/users/apasel422/repos", "events_url": "https://api.github.com/users/apasel422/events{/privacy}", "received_events_url": "https://api.github.com/users/apasel422/received_events", "type": "User", "site_admin": false}, "committer": {"login": "apasel422", "id": 8644784, "node_id": "MDQ6VXNlcjg2NDQ3ODQ=", "avatar_url": "https://avatars.githubusercontent.com/u/8644784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apasel422", "html_url": "https://github.com/apasel422", "followers_url": "https://api.github.com/users/apasel422/followers", "following_url": "https://api.github.com/users/apasel422/following{/other_user}", "gists_url": "https://api.github.com/users/apasel422/gists{/gist_id}", "starred_url": "https://api.github.com/users/apasel422/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apasel422/subscriptions", "organizations_url": "https://api.github.com/users/apasel422/orgs", "repos_url": "https://api.github.com/users/apasel422/repos", "events_url": "https://api.github.com/users/apasel422/events{/privacy}", "received_events_url": "https://api.github.com/users/apasel422/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ee7696383f3423cdd17373ff9e75c01acd8e3417", "url": "https://api.github.com/repos/rust-lang/rust/commits/ee7696383f3423cdd17373ff9e75c01acd8e3417", "html_url": "https://github.com/rust-lang/rust/commit/ee7696383f3423cdd17373ff9e75c01acd8e3417"}], "stats": {"total": 29, "additions": 29, "deletions": 0}, "files": [{"sha": "4c57fdc46681b75666afa56278fc41cc2ad06ab9", "filename": "src/libcollections/binary_heap.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/90f06ae33fdf34e60c29cbd38dd3ec7be6b3badb/src%2Flibcollections%2Fbinary_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90f06ae33fdf34e60c29cbd38dd3ec7be6b3badb/src%2Flibcollections%2Fbinary_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbinary_heap.rs?ref=90f06ae33fdf34e60c29cbd38dd3ec7be6b3badb", "patch": "@@ -163,6 +163,11 @@ use vec::{self, Vec};\n /// A priority queue implemented with a binary heap.\n ///\n /// This will be a max-heap.\n+///\n+/// It is a logic error for an item to be modified in such a way that the\n+/// item's ordering relative to any other item, as determined by the `Ord`\n+/// trait, changes while it is in the heap. This is normally only possible\n+/// through `Cell`, `RefCell`, global state, I/O, or unsafe code.\n #[derive(Clone)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct BinaryHeap<T> {"}, {"sha": "f2d94709c9a3272fd81b2a91c53abc7c7d52db1e", "filename": "src/libcollections/btree/map.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/90f06ae33fdf34e60c29cbd38dd3ec7be6b3badb/src%2Flibcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90f06ae33fdf34e60c29cbd38dd3ec7be6b3badb/src%2Flibcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbtree%2Fmap.rs?ref=90f06ae33fdf34e60c29cbd38dd3ec7be6b3badb", "patch": "@@ -64,6 +64,10 @@ use super::node::{self, Node, Found, GoDown};\n /// and possibly other factors. Using linear search, searching for a random element is expected\n /// to take O(B log<sub>B</sub>n) comparisons, which is generally worse than a BST. In practice,\n /// however, performance is excellent.\n+///\n+/// It is a logic error for a key to be modified in such a way that the key's ordering relative to\n+/// any other key, as determined by the `Ord` trait, changes while it is in the map. This is\n+/// normally only possible through `Cell`, `RefCell`, global state, I/O, or unsafe code.\n #[derive(Clone)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct BTreeMap<K, V> {"}, {"sha": "a5ef36bcdab7adb059ba83bcdde6d0f7fda1fe03", "filename": "src/libcollections/btree/set.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/90f06ae33fdf34e60c29cbd38dd3ec7be6b3badb/src%2Flibcollections%2Fbtree%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90f06ae33fdf34e60c29cbd38dd3ec7be6b3badb/src%2Flibcollections%2Fbtree%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbtree%2Fset.rs?ref=90f06ae33fdf34e60c29cbd38dd3ec7be6b3badb", "patch": "@@ -30,6 +30,10 @@ use Bound;\n ///\n /// See BTreeMap's documentation for a detailed discussion of this collection's performance\n /// benefits and drawbacks.\n+///\n+/// It is a logic error for an item to be modified in such a way that the item's ordering relative\n+/// to any other item, as determined by the `Ord` trait, changes while it is in the set. This is\n+/// normally only possible through `Cell`, `RefCell`, global state, I/O, or unsafe code.\n #[derive(Clone, Hash, PartialEq, Eq, Ord, PartialOrd)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct BTreeSet<T>{"}, {"sha": "eec61cfcd56242964a5a1df22c3b3b378b92d3df", "filename": "src/libcollections/enum_set.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/90f06ae33fdf34e60c29cbd38dd3ec7be6b3badb/src%2Flibcollections%2Fenum_set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90f06ae33fdf34e60c29cbd38dd3ec7be6b3badb/src%2Flibcollections%2Fenum_set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fenum_set.rs?ref=90f06ae33fdf34e60c29cbd38dd3ec7be6b3badb", "patch": "@@ -24,6 +24,11 @@ use core::ops::{Sub, BitOr, BitAnd, BitXor};\n \n #[derive(Clone, PartialEq, Eq, PartialOrd, Ord, Hash)]\n /// A specialized set implementation to use enum types.\n+///\n+/// It is a logic error for an item to be modified in such a way that the transformation of the\n+/// item to or from a `usize`, as determined by the `CLike` trait, changes while the item is in the\n+/// set. This is normally only possible through `Cell`, `RefCell`, global state, I/O, or unsafe\n+/// code.\n pub struct EnumSet<E> {\n     // We must maintain the invariant that no bits are set\n     // for which no variant exists"}, {"sha": "0892365d9d5a5a77a546c06589e09c3735a5037e", "filename": "src/libstd/collections/hash/map.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/90f06ae33fdf34e60c29cbd38dd3ec7be6b3badb/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90f06ae33fdf34e60c29cbd38dd3ec7be6b3badb/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs?ref=90f06ae33fdf34e60c29cbd38dd3ec7be6b3badb", "patch": "@@ -217,6 +217,11 @@ fn test_resize_policy() {\n /// It is required that the keys implement the `Eq` and `Hash` traits, although\n /// this can frequently be achieved by using `#[derive(Eq, Hash)]`.\n ///\n+/// It is a logic error for a key to be modified in such a way that the key's\n+/// hash, as determined by the `Hash` trait, or its equality, as determined by\n+/// the `Eq` trait, changes while it is in the map. This is normally only\n+/// possible through `Cell`, `RefCell`, global state, I/O, or unsafe code.\n+///\n /// Relevant papers/articles:\n ///\n /// 1. Pedro Celis. [\"Robin Hood Hashing\"](https://cs.uwaterloo.ca/research/tr/1986/CS-86-14.pdf)"}, {"sha": "de3f080de829651d6b8d7b87db99ecddf263f739", "filename": "src/libstd/collections/hash/set.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/90f06ae33fdf34e60c29cbd38dd3ec7be6b3badb/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90f06ae33fdf34e60c29cbd38dd3ec7be6b3badb/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs?ref=90f06ae33fdf34e60c29cbd38dd3ec7be6b3badb", "patch": "@@ -38,6 +38,12 @@ use super::state::HashState;\n /// HashMap where the value is (). As with the `HashMap` type, a `HashSet`\n /// requires that the elements implement the `Eq` and `Hash` traits.\n ///\n+/// It is a logic error for an item to be modified in such a way that the\n+/// item's hash, as determined by the `Hash` trait, or its equality, as\n+/// determined by the `Eq` trait, changes while it is in the set. This is\n+/// normally only possible through `Cell`, `RefCell`, global state, I/O, or\n+/// unsafe code.\n+///\n /// # Examples\n ///\n /// ```"}]}