{"sha": "4ec7b713dd2de43f4b0b03d33271f9c7dbb56d1c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRlYzdiNzEzZGQyZGU0M2Y0YjBiMDNkMzMyNzFmOWM3ZGJiNTZkMWM=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-08-26T23:46:05Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-08-26T23:46:05Z"}, "message": "Enumify CompilerExpansion in ExpnInfo", "tree": {"sha": "f4573efc079c86e78860263e99dcc17e5ba414d0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f4573efc079c86e78860263e99dcc17e5ba414d0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4ec7b713dd2de43f4b0b03d33271f9c7dbb56d1c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4ec7b713dd2de43f4b0b03d33271f9c7dbb56d1c", "html_url": "https://github.com/rust-lang/rust/commit/4ec7b713dd2de43f4b0b03d33271f9c7dbb56d1c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4ec7b713dd2de43f4b0b03d33271f9c7dbb56d1c/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5c630a61c658cb7d861a60da6951ee06619337b2", "url": "https://api.github.com/repos/rust-lang/rust/commits/5c630a61c658cb7d861a60da6951ee06619337b2", "html_url": "https://github.com/rust-lang/rust/commit/5c630a61c658cb7d861a60da6951ee06619337b2"}], "stats": {"total": 121, "additions": 68, "deletions": 53}, "files": [{"sha": "ce2adccbfc3f13993da3e61ffd5b82f978fdcd55", "filename": "src/libsyntax/codemap.rs", "status": "modified", "additions": 34, "deletions": 7, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/4ec7b713dd2de43f4b0b03d33271f9c7dbb56d1c/src%2Flibsyntax%2Fcodemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ec7b713dd2de43f4b0b03d33271f9c7dbb56d1c/src%2Flibsyntax%2Fcodemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fcodemap.rs?ref=4ec7b713dd2de43f4b0b03d33271f9c7dbb56d1c", "patch": "@@ -257,21 +257,38 @@ pub struct FileMapAndBytePos { pub fm: Rc<FileMap>, pub pos: BytePos }\n //\n \n /// The source of expansion.\n-#[derive(Clone, Copy, Hash, Debug, PartialEq, Eq)]\n+#[derive(Clone, Hash, Debug, PartialEq, Eq)]\n pub enum ExpnFormat {\n     /// e.g. #[derive(...)] <item>\n-    MacroAttribute,\n+    MacroAttribute(String),\n     /// e.g. `format!()`\n-    MacroBang,\n+    MacroBang(String),\n     /// Syntax sugar expansion performed by the compiler (libsyntax::expand).\n-    CompilerExpansion,\n+    CompilerExpansion(CompilerExpansionFormat),\n }\n \n+#[derive(Clone, Copy, Hash, Debug, PartialEq, Eq)]\n+pub enum CompilerExpansionFormat {\n+    IfLet,\n+    PlacementIn,\n+    WhileLet,\n+    ForLoop,\n+    Closure,\n+}\n+\n+impl CompilerExpansionFormat {\n+    pub fn name(self) -> &'static str {\n+        match self {\n+            CompilerExpansionFormat::IfLet => \"if let expansion\",\n+            CompilerExpansionFormat::PlacementIn => \"placement-in expansion\",\n+            CompilerExpansionFormat::WhileLet => \"while let expansion\",\n+            CompilerExpansionFormat::ForLoop => \"for loop expansion\",\n+            CompilerExpansionFormat::Closure => \"closure expansion\",\n+        }\n+    }\n+}\n #[derive(Clone, Hash, Debug)]\n pub struct NameAndSpan {\n-    /// The name of the macro that was invoked to create the thing\n-    /// with this Span.\n-    pub name: String,\n     /// The format with which the macro was invoked.\n     pub format: ExpnFormat,\n     /// Whether the macro is allowed to use #[unstable]/feature-gated\n@@ -284,6 +301,16 @@ pub struct NameAndSpan {\n     pub span: Option<Span>\n }\n \n+impl NameAndSpan {\n+    pub fn name(&self) -> &str{\n+        match self.format {\n+            ExpnFormat::MacroAttribute(ref s) => &s,\n+            ExpnFormat::MacroBang(ref s) => &s,\n+            ExpnFormat::CompilerExpansion(ce) => ce.name(),\n+        }\n+    } \n+}\n+\n /// Extra information for tracking spans of macro and syntax sugar expansion\n #[derive(Hash, Debug)]\n pub struct ExpnInfo {"}, {"sha": "067e3fff3eb299a1ca6ab403069d191126871fe6", "filename": "src/libsyntax/diagnostic.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4ec7b713dd2de43f4b0b03d33271f9c7dbb56d1c/src%2Flibsyntax%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ec7b713dd2de43f4b0b03d33271f9c7dbb56d1c/src%2Flibsyntax%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fdiagnostic.rs?ref=4ec7b713dd2de43f4b0b03d33271f9c7dbb56d1c", "patch": "@@ -733,14 +733,14 @@ impl EmitterWriter {\n                     let ss = ei.callee.span.map_or(String::new(),\n                                                    |span| cm.span_to_string(span));\n                     let (pre, post) = match ei.callee.format {\n-                        codemap::MacroAttribute => (\"#[\", \"]\"),\n-                        codemap::MacroBang => (\"\", \"!\"),\n-                        codemap::CompilerExpansion => (\"\", \"\"),\n+                        codemap::MacroAttribute(..) => (\"#[\", \"]\"),\n+                        codemap::MacroBang(..) => (\"\", \"!\"),\n+                        codemap::CompilerExpansion(..) => (\"\", \"\"),\n                     };\n                     try!(self.print_diagnostic(&ss, Note,\n                                                &format!(\"in expansion of {}{}{}\",\n                                                         pre,\n-                                                        ei.callee.name,\n+                                                        ei.callee.name(),\n                                                         post),\n                                                None));\n                     let ss = cm.span_to_string(ei.call_site);"}, {"sha": "2509a071807a08dc152b65778a9de4ce4918df7e", "filename": "src/libsyntax/ext/asm.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4ec7b713dd2de43f4b0b03d33271f9c7dbb56d1c/src%2Flibsyntax%2Fext%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ec7b713dd2de43f4b0b03d33271f9c7dbb56d1c/src%2Flibsyntax%2Fext%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fasm.rs?ref=4ec7b713dd2de43f4b0b03d33271f9c7dbb56d1c", "patch": "@@ -211,8 +211,7 @@ pub fn expand_asm<'cx>(cx: &'cx mut ExtCtxt, sp: Span, tts: &[ast::TokenTree])\n     let expn_id = cx.codemap().record_expansion(codemap::ExpnInfo {\n         call_site: sp,\n         callee: codemap::NameAndSpan {\n-            name: \"asm\".to_string(),\n-            format: codemap::MacroBang,\n+            format: codemap::MacroBang(\"asm\".to_string()),\n             span: None,\n             allow_internal_unstable: false,\n         },"}, {"sha": "ef49ef11497fc585509e6ebbb408fbbe5f44ce3e", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4ec7b713dd2de43f4b0b03d33271f9c7dbb56d1c/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ec7b713dd2de43f4b0b03d33271f9c7dbb56d1c/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=4ec7b713dd2de43f4b0b03d33271f9c7dbb56d1c", "patch": "@@ -714,13 +714,14 @@ impl<'a> ExtCtxt<'a> {\n         loop {\n             if self.codemap().with_expn_info(expn_id, |info| {\n                 info.map_or(None, |i| {\n-                    if i.callee.name == \"include\" {\n+                    if i.callee.name() == \"include\" {\n                         // Stop going up the backtrace once include! is encountered\n                         return None;\n                     }\n                     expn_id = i.call_site.expn_id;\n-                    if i.callee.format != CompilerExpansion {\n-                        last_macro = Some(i.call_site)\n+                    match i.callee.format {\n+                        CompilerExpansion(..) => (),\n+                        _ => last_macro = Some(i.call_site),\n                     }\n                     return Some(());\n                 })\n@@ -744,7 +745,7 @@ impl<'a> ExtCtxt<'a> {\n         if self.recursion_count > self.ecfg.recursion_limit {\n             panic!(self.span_fatal(ei.call_site,\n                             &format!(\"recursion limit reached while expanding the macro `{}`\",\n-                                    ei.callee.name)));\n+                                    ei.callee.name())));\n         }\n \n         let mut call_site = ei.call_site;"}, {"sha": "f23dec92f9357bed39945a966967cd07ae7b15f7", "filename": "src/libsyntax/ext/deriving/generic/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4ec7b713dd2de43f4b0b03d33271f9c7dbb56d1c/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ec7b713dd2de43f4b0b03d33271f9c7dbb56d1c/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric%2Fmod.rs?ref=4ec7b713dd2de43f4b0b03d33271f9c7dbb56d1c", "patch": "@@ -1436,8 +1436,7 @@ impl<'a> TraitDef<'a> {\n         to_set.expn_id = cx.codemap().record_expansion(codemap::ExpnInfo {\n             call_site: to_set,\n             callee: codemap::NameAndSpan {\n-                name: format!(\"derive({})\", trait_name),\n-                format: codemap::MacroAttribute,\n+                format: codemap::MacroAttribute(format!(\"derive({})\", trait_name)),\n                 span: Some(self.span),\n                 allow_internal_unstable: false,\n             }"}, {"sha": "bf995c000096da72af9d7f68f597341e0d46ff08", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 20, "deletions": 28, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/4ec7b713dd2de43f4b0b03d33271f9c7dbb56d1c/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ec7b713dd2de43f4b0b03d33271f9c7dbb56d1c/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=4ec7b713dd2de43f4b0b03d33271f9c7dbb56d1c", "patch": "@@ -19,7 +19,8 @@ use ext::build::AstBuilder;\n use attr;\n use attr::AttrMetaMethods;\n use codemap;\n-use codemap::{Span, Spanned, ExpnInfo, NameAndSpan, MacroBang, MacroAttribute, CompilerExpansion};\n+use codemap::{Span, Spanned, ExpnInfo, NameAndSpan, MacroBang, MacroAttribute};\n+use codemap::{CompilerExpansion, CompilerExpansionFormat};\n use ext::base::*;\n use feature_gate::{self, Features, GatedCfg};\n use fold;\n@@ -43,12 +44,12 @@ fn mk_core_path(fld: &mut MacroExpander,\n }\n \n pub fn expand_expr(e: P<ast::Expr>, fld: &mut MacroExpander) -> P<ast::Expr> {\n-    fn push_compiler_expansion(fld: &mut MacroExpander, span: Span, expansion_desc: &str) {\n+    fn push_compiler_expansion(fld: &mut MacroExpander, span: Span,\n+                               expansion_type: CompilerExpansionFormat) {\n         fld.cx.bt_push(ExpnInfo {\n             call_site: span,\n             callee: NameAndSpan {\n-                name: expansion_desc.to_string(),\n-                format: CompilerExpansion,\n+                format: CompilerExpansion(expansion_type),\n \n                 // This does *not* mean code generated after\n                 // `push_compiler_expansion` is automatically exempt\n@@ -111,7 +112,7 @@ pub fn expand_expr(e: P<ast::Expr>, fld: &mut MacroExpander) -> P<ast::Expr> {\n                 &fld.cx.parse_sess.span_diagnostic,\n                 expr_span);\n \n-            push_compiler_expansion(fld, expr_span, \"placement-in expansion\");\n+            push_compiler_expansion(fld, expr_span, CompilerExpansionFormat::PlacementIn);\n \n             let value_span = value_expr.span;\n             let placer_span = placer.span;\n@@ -223,7 +224,7 @@ pub fn expand_expr(e: P<ast::Expr>, fld: &mut MacroExpander) -> P<ast::Expr> {\n             //     }\n             //   }\n \n-            push_compiler_expansion(fld, span, \"while let expansion\");\n+            push_compiler_expansion(fld, span, CompilerExpansionFormat::WhileLet);\n \n             // `<pat> => <body>`\n             let pat_arm = {\n@@ -262,7 +263,7 @@ pub fn expand_expr(e: P<ast::Expr>, fld: &mut MacroExpander) -> P<ast::Expr> {\n             //     _ => [<elseopt> | ()]\n             //   }\n \n-            push_compiler_expansion(fld, span, \"if let expansion\");\n+            push_compiler_expansion(fld, span, CompilerExpansionFormat::IfLet);\n \n             // `<pat> => <body>`\n             let pat_arm = {\n@@ -334,7 +335,7 @@ pub fn expand_expr(e: P<ast::Expr>, fld: &mut MacroExpander) -> P<ast::Expr> {\n         ast::ExprIf(cond, blk, elseopt) => {\n             let elseopt = elseopt.map(|els| els.and_then(|els| match els.node {\n                 ast::ExprIfLet(..) => {\n-                    push_compiler_expansion(fld, span, \"if let expansion\");\n+                    push_compiler_expansion(fld, span, CompilerExpansionFormat::IfLet);\n                     // wrap the if-let expr in a block\n                     let span = els.span;\n                     let blk = P(ast::Block {\n@@ -378,7 +379,7 @@ pub fn expand_expr(e: P<ast::Expr>, fld: &mut MacroExpander) -> P<ast::Expr> {\n             //     result\n             //   }\n \n-            push_compiler_expansion(fld, span, \"for loop expansion\");\n+            push_compiler_expansion(fld, span, CompilerExpansionFormat::ForLoop);\n \n             let span = fld.new_span(span);\n \n@@ -458,7 +459,7 @@ pub fn expand_expr(e: P<ast::Expr>, fld: &mut MacroExpander) -> P<ast::Expr> {\n         }\n \n         ast::ExprClosure(capture_clause, fn_decl, block) => {\n-            push_compiler_expansion(fld, span, \"closure expansion\");\n+            push_compiler_expansion(fld, span, CompilerExpansionFormat::Closure);\n             let (rewritten_fn_decl, rewritten_block)\n                 = expand_and_rename_fn_decl_and_block(fn_decl, block, fld);\n             let new_node = ast::ExprClosure(capture_clause,\n@@ -542,8 +543,7 @@ fn expand_mac_invoc<T, F, G>(mac: ast::Mac,\n                         fld.cx.bt_push(ExpnInfo {\n                                 call_site: span,\n                                 callee: NameAndSpan {\n-                                    name: extname.to_string(),\n-                                    format: MacroBang,\n+                                    format: MacroBang(extname.to_string()),\n                                     span: exp_span,\n                                     allow_internal_unstable: allow_internal_unstable,\n                                 },\n@@ -721,8 +721,7 @@ pub fn expand_item_mac(it: P<ast::Item>,\n                     fld.cx.bt_push(ExpnInfo {\n                         call_site: it.span,\n                         callee: NameAndSpan {\n-                            name: extname.to_string(),\n-                            format: MacroBang,\n+                            format: MacroBang(extname.to_string()),\n                             span: span,\n                             allow_internal_unstable: allow_internal_unstable,\n                         }\n@@ -741,8 +740,7 @@ pub fn expand_item_mac(it: P<ast::Item>,\n                     fld.cx.bt_push(ExpnInfo {\n                         call_site: it.span,\n                         callee: NameAndSpan {\n-                            name: extname.to_string(),\n-                            format: MacroBang,\n+                            format: MacroBang(extname.to_string()),\n                             span: span,\n                             allow_internal_unstable: allow_internal_unstable,\n                         }\n@@ -762,8 +760,7 @@ pub fn expand_item_mac(it: P<ast::Item>,\n                     fld.cx.bt_push(ExpnInfo {\n                         call_site: it.span,\n                         callee: NameAndSpan {\n-                            name: extname.to_string(),\n-                            format: MacroBang,\n+                            format: MacroBang(extname.to_string()),\n                             span: None,\n                             // `macro_rules!` doesn't directly allow\n                             // unstable (this is orthogonal to whether\n@@ -1090,8 +1087,7 @@ fn expand_pat(p: P<ast::Pat>, fld: &mut MacroExpander) -> P<ast::Pat> {\n                     fld.cx.bt_push(ExpnInfo {\n                         call_site: span,\n                         callee: NameAndSpan {\n-                            name: extname.to_string(),\n-                            format: MacroBang,\n+                            format: MacroBang(extname.to_string()),\n                             span: tt_span,\n                             allow_internal_unstable: allow_internal_unstable,\n                         }\n@@ -1302,8 +1298,7 @@ fn expand_decorators(a: Annotatable,\n                     fld.cx.bt_push(ExpnInfo {\n                         call_site: attr.span,\n                         callee: NameAndSpan {\n-                            name: mname.to_string(),\n-                            format: MacroAttribute,\n+                            format: MacroAttribute(mname.to_string()),\n                             span: Some(attr.span),\n                             // attributes can do whatever they like,\n                             // for now.\n@@ -1330,8 +1325,7 @@ fn expand_decorators(a: Annotatable,\n                     fld.cx.bt_push(ExpnInfo {\n                         call_site: attr.span,\n                         callee: NameAndSpan {\n-                            name: mname.to_string(),\n-                            format: MacroAttribute,\n+                            format: MacroAttribute(mname.to_string()),\n                             span: Some(attr.span),\n                             // attributes can do whatever they like,\n                             // for now.\n@@ -1381,8 +1375,7 @@ fn expand_item_multi_modifier(mut it: Annotatable,\n                     fld.cx.bt_push(ExpnInfo {\n                         call_site: attr.span,\n                         callee: NameAndSpan {\n-                            name: mname.to_string(),\n-                            format: MacroAttribute,\n+                            format: MacroAttribute(mname.to_string()),\n                             span: Some(attr.span),\n                             // attributes can do whatever they like,\n                             // for now\n@@ -1430,8 +1423,7 @@ fn expand_item_modifiers(mut it: P<ast::Item>,\n                     fld.cx.bt_push(ExpnInfo {\n                         call_site: attr.span,\n                         callee: NameAndSpan {\n-                            name: mname.to_string(),\n-                            format: MacroAttribute,\n+                            format: MacroAttribute(mname.to_string()),\n                             span: Some(attr.span),\n                             // attributes can do whatever they like,\n                             // for now"}, {"sha": "8fbaa6a7608fe2893408f9fcd13465d3941a338f", "filename": "src/libsyntax/std_inject.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4ec7b713dd2de43f4b0b03d33271f9c7dbb56d1c/src%2Flibsyntax%2Fstd_inject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ec7b713dd2de43f4b0b03d33271f9c7dbb56d1c/src%2Flibsyntax%2Fstd_inject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fstd_inject.rs?ref=4ec7b713dd2de43f4b0b03d33271f9c7dbb56d1c", "patch": "@@ -27,8 +27,7 @@ fn ignored_span(sess: &ParseSess, sp: Span) -> Span {\n     let info = ExpnInfo {\n         call_site: DUMMY_SP,\n         callee: NameAndSpan {\n-            name: \"std_inject\".to_string(),\n-            format: MacroAttribute,\n+            format: MacroAttribute(\"std_inject\".to_string()),\n             span: None,\n             allow_internal_unstable: true,\n         }"}, {"sha": "6278bc20bf1dcf172fea682d834936e50b9f7f55", "filename": "src/libsyntax/test.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4ec7b713dd2de43f4b0b03d33271f9c7dbb56d1c/src%2Flibsyntax%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ec7b713dd2de43f4b0b03d33271f9c7dbb56d1c/src%2Flibsyntax%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ftest.rs?ref=4ec7b713dd2de43f4b0b03d33271f9c7dbb56d1c", "patch": "@@ -265,8 +265,7 @@ fn generate_test_harness(sess: &ParseSess,\n     cx.ext_cx.bt_push(ExpnInfo {\n         call_site: DUMMY_SP,\n         callee: NameAndSpan {\n-            name: \"test\".to_string(),\n-            format: MacroAttribute,\n+            format: MacroAttribute(\"test\".to_string()),\n             span: None,\n             allow_internal_unstable: false,\n         }\n@@ -298,8 +297,7 @@ fn ignored_span(cx: &TestCtxt, sp: Span) -> Span {\n     let info = ExpnInfo {\n         call_site: DUMMY_SP,\n         callee: NameAndSpan {\n-            name: \"test\".to_string(),\n-            format: MacroAttribute,\n+            format: MacroAttribute(\"test\".to_string()),\n             span: None,\n             allow_internal_unstable: true,\n         }"}]}