{"sha": "368e586a3d01797b8092b99279aac660c64187b3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM2OGU1ODZhM2QwMTc5N2I4MDkyYjk5Mjc5YWFjNjYwYzY0MTg3YjM=", "commit": {"author": {"name": "Wesley Wiser", "email": "wwiser@gmail.com", "date": "2018-02-28T03:08:46Z"}, "committer": {"name": "Wesley Wiser", "email": "wwiser@gmail.com", "date": "2018-03-07T01:19:39Z"}, "message": "Add linkage to TransFnAttrs\n\nPart of #47320", "tree": {"sha": "e4cdde7a5abd2a5dbfa8585deb20e515453689db", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e4cdde7a5abd2a5dbfa8585deb20e515453689db"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/368e586a3d01797b8092b99279aac660c64187b3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/368e586a3d01797b8092b99279aac660c64187b3", "html_url": "https://github.com/rust-lang/rust/commit/368e586a3d01797b8092b99279aac660c64187b3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/368e586a3d01797b8092b99279aac660c64187b3/comments", "author": {"login": "wesleywiser", "id": 831192, "node_id": "MDQ6VXNlcjgzMTE5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/831192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wesleywiser", "html_url": "https://github.com/wesleywiser", "followers_url": "https://api.github.com/users/wesleywiser/followers", "following_url": "https://api.github.com/users/wesleywiser/following{/other_user}", "gists_url": "https://api.github.com/users/wesleywiser/gists{/gist_id}", "starred_url": "https://api.github.com/users/wesleywiser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wesleywiser/subscriptions", "organizations_url": "https://api.github.com/users/wesleywiser/orgs", "repos_url": "https://api.github.com/users/wesleywiser/repos", "events_url": "https://api.github.com/users/wesleywiser/events{/privacy}", "received_events_url": "https://api.github.com/users/wesleywiser/received_events", "type": "User", "site_admin": false}, "committer": {"login": "wesleywiser", "id": 831192, "node_id": "MDQ6VXNlcjgzMTE5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/831192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wesleywiser", "html_url": "https://github.com/wesleywiser", "followers_url": "https://api.github.com/users/wesleywiser/followers", "following_url": "https://api.github.com/users/wesleywiser/following{/other_user}", "gists_url": "https://api.github.com/users/wesleywiser/gists{/gist_id}", "starred_url": "https://api.github.com/users/wesleywiser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wesleywiser/subscriptions", "organizations_url": "https://api.github.com/users/wesleywiser/orgs", "repos_url": "https://api.github.com/users/wesleywiser/repos", "events_url": "https://api.github.com/users/wesleywiser/events{/privacy}", "received_events_url": "https://api.github.com/users/wesleywiser/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "07890c5c59b3a6b33a03aee009307f8e7b3ece96", "url": "https://api.github.com/repos/rust-lang/rust/commits/07890c5c59b3a6b33a03aee009307f8e7b3ece96", "html_url": "https://github.com/rust-lang/rust/commit/07890c5c59b3a6b33a03aee009307f8e7b3ece96"}], "stats": {"total": 102, "additions": 48, "deletions": 54}, "files": [{"sha": "f4638c23c5f4bf35c721f6e8f7915e42064061fa", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/368e586a3d01797b8092b99279aac660c64187b3/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/368e586a3d01797b8092b99279aac660c64187b3/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=368e586a3d01797b8092b99279aac660c64187b3", "patch": "@@ -30,6 +30,7 @@ pub use self::Visibility::{Public, Inherited};\n use hir::def::Def;\n use hir::def_id::{DefId, DefIndex, LocalDefId, CRATE_DEF_INDEX};\n use util::nodemap::{NodeMap, FxHashSet};\n+use mir::mono::Linkage;\n \n use syntax_pos::{Span, DUMMY_SP};\n use syntax::codemap::{self, Spanned};\n@@ -2218,6 +2219,7 @@ pub struct TransFnAttrs {\n     pub inline: InlineAttr,\n     pub export_name: Option<Symbol>,\n     pub target_features: Vec<Symbol>,\n+    pub linkage: Option<Linkage>,\n }\n \n bitflags! {\n@@ -2240,6 +2242,7 @@ impl TransFnAttrs {\n             inline: InlineAttr::None,\n             export_name: None,\n             target_features: vec![],\n+            linkage: None,\n         }\n     }\n "}, {"sha": "faad3f3563164e444e6d9fce75877ff8ce86025c", "filename": "src/librustc/ich/impls_hir.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/368e586a3d01797b8092b99279aac660c64187b3/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/368e586a3d01797b8092b99279aac660c64187b3/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_hir.rs?ref=368e586a3d01797b8092b99279aac660c64187b3", "patch": "@@ -1149,12 +1149,14 @@ impl<'hir> HashStable<StableHashingContext<'hir>> for hir::TransFnAttrs\n             inline,\n             export_name,\n             ref target_features,\n+            linkage,\n         } = *self;\n \n         flags.hash_stable(hcx, hasher);\n         inline.hash_stable(hcx, hasher);\n         export_name.hash_stable(hcx, hasher);\n         target_features.hash_stable(hcx, hasher);\n+        linkage.hash_stable(hcx, hasher);\n     }\n }\n "}, {"sha": "d8eac2b415989a698fd0f7a1cd74372fbb2698f2", "filename": "src/librustc/mir/mono.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/368e586a3d01797b8092b99279aac660c64187b3/src%2Flibrustc%2Fmir%2Fmono.rs", "raw_url": "https://github.com/rust-lang/rust/raw/368e586a3d01797b8092b99279aac660c64187b3/src%2Flibrustc%2Fmir%2Fmono.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmono.rs?ref=368e586a3d01797b8092b99279aac660c64187b3", "patch": "@@ -73,7 +73,7 @@ pub struct CodegenUnit<'tcx> {\n     size_estimate: Option<usize>,\n }\n \n-#[derive(Copy, Clone, PartialEq, Eq, Hash, Debug)]\n+#[derive(Copy, Clone, PartialEq, Eq, Hash, Debug, RustcEncodable, RustcDecodable)]\n pub enum Linkage {\n     External,\n     AvailableExternally,"}, {"sha": "38b8ffc6b9c806f6a3b04197b80f575058b26856", "filename": "src/librustc_mir/monomorphize/item.rs", "status": "modified", "additions": 3, "deletions": 43, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/368e586a3d01797b8092b99279aac660c64187b3/src%2Flibrustc_mir%2Fmonomorphize%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/368e586a3d01797b8092b99279aac660c64187b3/src%2Flibrustc_mir%2Fmonomorphize%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fitem.rs?ref=368e586a3d01797b8092b99279aac660c64187b3", "patch": "@@ -21,41 +21,14 @@ use rustc::session::config::OptLevel;\n use rustc::ty::{self, Ty, TyCtxt};\n use rustc::ty::subst::Substs;\n use syntax::ast;\n-use syntax::attr::{self, InlineAttr};\n+use syntax::attr::InlineAttr;\n use std::fmt::{self, Write};\n use std::iter;\n use rustc::mir::mono::Linkage;\n use syntax_pos::symbol::Symbol;\n use syntax::codemap::Span;\n pub use rustc::mir::mono::MonoItem;\n \n-pub fn linkage_by_name(name: &str) -> Option<Linkage> {\n-    use rustc::mir::mono::Linkage::*;\n-\n-    // Use the names from src/llvm/docs/LangRef.rst here. Most types are only\n-    // applicable to variable declarations and may not really make sense for\n-    // Rust code in the first place but whitelist them anyway and trust that\n-    // the user knows what s/he's doing. Who knows, unanticipated use cases\n-    // may pop up in the future.\n-    //\n-    // ghost, dllimport, dllexport and linkonce_odr_autohide are not supported\n-    // and don't have to be, LLVM treats them as no-ops.\n-    match name {\n-        \"appending\" => Some(Appending),\n-        \"available_externally\" => Some(AvailableExternally),\n-        \"common\" => Some(Common),\n-        \"extern_weak\" => Some(ExternalWeak),\n-        \"external\" => Some(External),\n-        \"internal\" => Some(Internal),\n-        \"linkonce\" => Some(LinkOnceAny),\n-        \"linkonce_odr\" => Some(LinkOnceODR),\n-        \"private\" => Some(Private),\n-        \"weak\" => Some(WeakAny),\n-        \"weak_odr\" => Some(WeakODR),\n-        _ => None,\n-    }\n-}\n-\n /// Describes how a translation item will be instantiated in object files.\n #[derive(PartialEq, Eq, Clone, Copy, Debug, Hash)]\n pub enum InstantiationMode {\n@@ -164,21 +137,8 @@ pub trait MonoItemExt<'a, 'tcx>: fmt::Debug {\n             MonoItem::GlobalAsm(..) => return None,\n         };\n \n-        let attributes = tcx.get_attrs(def_id);\n-        if let Some(name) = attr::first_attr_value_str_by_name(&attributes, \"linkage\") {\n-            if let Some(linkage) = linkage_by_name(&name.as_str()) {\n-                Some(linkage)\n-            } else {\n-                let span = tcx.hir.span_if_local(def_id);\n-                if let Some(span) = span {\n-                    tcx.sess.span_fatal(span, \"invalid linkage specified\")\n-                } else {\n-                    tcx.sess.fatal(&format!(\"invalid linkage specified: {}\", name))\n-                }\n-            }\n-        } else {\n-            None\n-        }\n+        let trans_fn_attrs = tcx.trans_fn_attrs(def_id);\n+        trans_fn_attrs.linkage\n     }\n \n     /// Returns whether this instance is instantiable - whether it has no unsatisfied"}, {"sha": "3708f6f6ec4fcf0124c11a8c762d0d5d592c3335", "filename": "src/librustc_trans/base.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/368e586a3d01797b8092b99279aac660c64187b3/src%2Flibrustc_trans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/368e586a3d01797b8092b99279aac660c64187b3/src%2Flibrustc_trans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fbase.rs?ref=368e586a3d01797b8092b99279aac660c64187b3", "patch": "@@ -90,7 +90,6 @@ use syntax::ast;\n use mir::operand::OperandValue;\n \n pub use rustc_trans_utils::check_for_rustc_errors_attr;\n-pub use rustc_mir::monomorphize::item::linkage_by_name;\n \n pub struct StatRecorder<'a, 'tcx: 'a> {\n     cx: &'a CodegenCx<'a, 'tcx>,"}, {"sha": "0ce3f729305b41cac5369c25c62cfabecdbe441b", "filename": "src/librustc_trans/consts.rs", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/368e586a3d01797b8092b99279aac660c64187b3/src%2Flibrustc_trans%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/368e586a3d01797b8092b99279aac660c64187b3/src%2Flibrustc_trans%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fconsts.rs?ref=368e586a3d01797b8092b99279aac660c64187b3", "patch": "@@ -146,20 +146,12 @@ pub fn get_static(cx: &CodegenCx, def_id: DefId) -> ValueRef {\n             hir_map::NodeForeignItem(&hir::ForeignItem {\n                 ref attrs, span, node: hir::ForeignItemStatic(..), ..\n             }) => {\n-\n-                let g = if let Some(name) =\n-                        attr::first_attr_value_str_by_name(&attrs, \"linkage\") {\n+                let g = if let Some(linkage) = cx.tcx.trans_fn_attrs(def_id).linkage {\n                     // If this is a static with a linkage specified, then we need to handle\n                     // it a little specially. The typesystem prevents things like &T and\n                     // extern \"C\" fn() from being non-null, so we can't just declare a\n                     // static and call it a day. Some linkages (like weak) will make it such\n                     // that the static actually has a null value.\n-                    let linkage = match base::linkage_by_name(&name.as_str()) {\n-                        Some(linkage) => linkage,\n-                        None => {\n-                            cx.sess().span_fatal(span, \"invalid linkage specified\");\n-                        }\n-                    };\n                     let llty2 = match ty.sty {\n                         ty::TyRawPtr(ref mt) => cx.layout_of(mt.ty).llvm_type(cx),\n                         _ => {"}, {"sha": "1a7d8bb56780eb7cb7b444e7aa304bcec007648c", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/368e586a3d01797b8092b99279aac660c64187b3/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/368e586a3d01797b8092b99279aac660c64187b3/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=368e586a3d01797b8092b99279aac660c64187b3", "patch": "@@ -30,6 +30,7 @@ use constrained_type_params as ctp;\n use middle::lang_items::SizedTraitLangItem;\n use middle::const_val::ConstVal;\n use middle::resolve_lifetime as rl;\n+use rustc::mir::mono::Linkage;\n use rustc::traits::Reveal;\n use rustc::ty::subst::Substs;\n use rustc::ty::{ToPredicate, ReprOptions};\n@@ -1782,6 +1783,39 @@ fn from_target_feature(\n     }\n }\n \n+fn linkage_by_name<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId, name: &str) -> Linkage {\n+    use rustc::mir::mono::Linkage::*;\n+\n+    // Use the names from src/llvm/docs/LangRef.rst here. Most types are only\n+    // applicable to variable declarations and may not really make sense for\n+    // Rust code in the first place but whitelist them anyway and trust that\n+    // the user knows what s/he's doing. Who knows, unanticipated use cases\n+    // may pop up in the future.\n+    //\n+    // ghost, dllimport, dllexport and linkonce_odr_autohide are not supported\n+    // and don't have to be, LLVM treats them as no-ops.\n+    match name {\n+        \"appending\" => Appending,\n+        \"available_externally\" => AvailableExternally,\n+        \"common\" => Common,\n+        \"extern_weak\" => ExternalWeak,\n+        \"external\" => External,\n+        \"internal\" => Internal,\n+        \"linkonce\" => LinkOnceAny,\n+        \"linkonce_odr\" => LinkOnceODR,\n+        \"private\" => Private,\n+        \"weak\" => WeakAny,\n+        \"weak_odr\" => WeakODR,\n+        _ => {\n+            let span = tcx.hir.span_if_local(def_id);\n+            if let Some(span) = span {\n+                tcx.sess.span_fatal(span, \"invalid linkage specified\")\n+            } else {\n+                tcx.sess.fatal(&format!(\"invalid linkage specified: {}\", name))\n+            }\n+        }\n+    }\n+}\n \n fn trans_fn_attrs<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, id: DefId) -> TransFnAttrs {\n     let attrs = tcx.get_attrs(id);\n@@ -1868,6 +1902,10 @@ fn trans_fn_attrs<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, id: DefId) -> TransFnAt\n                 tcx.sess.span_err(attr.span, msg);\n             }\n             from_target_feature(tcx, attr, &whitelist, &mut trans_fn_attrs.target_features);\n+        } else if attr.check_name(\"linkage\") {\n+            if let Some(val) = attr.value_str() {\n+                trans_fn_attrs.linkage = Some(linkage_by_name(tcx, id, &val.as_str()));\n+            }\n         }\n     }\n "}]}