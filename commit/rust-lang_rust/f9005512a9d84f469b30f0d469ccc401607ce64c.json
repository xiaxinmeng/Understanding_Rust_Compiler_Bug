{"sha": "f9005512a9d84f469b30f0d469ccc401607ce64c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY5MDA1NTEyYTlkODRmNDY5YjMwZjBkNDY5Y2NjNDAxNjA3Y2U2NGM=", "commit": {"author": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2015-06-15T16:33:21Z"}, "committer": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2015-07-13T14:21:43Z"}, "message": "Implement IndexMut for String and str.\n\n... matching the existing Index impls.\nThere is no reason not to if String implement DerefMut.\n\nThe code removed in `src/librustc/middle/effect.rs` was added in #9750\nto prevent things like `s[0] = 0x80` where `s: String`,\nbut I belive became unnecessary when the Index(Mut) traits were introduced.", "tree": {"sha": "e1585201e80a2ae90b2ac586f162263a100fbcdc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e1585201e80a2ae90b2ac586f162263a100fbcdc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f9005512a9d84f469b30f0d469ccc401607ce64c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f9005512a9d84f469b30f0d469ccc401607ce64c", "html_url": "https://github.com/rust-lang/rust/commit/f9005512a9d84f469b30f0d469ccc401607ce64c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f9005512a9d84f469b30f0d469ccc401607ce64c/comments", "author": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "90d61d828f82a830b9edc202dd28bb5b4defc7e9", "url": "https://api.github.com/repos/rust-lang/rust/commits/90d61d828f82a830b9edc202dd28bb5b4defc7e9", "html_url": "https://github.com/rust-lang/rust/commit/90d61d828f82a830b9edc202dd28bb5b4defc7e9"}], "stats": {"total": 108, "additions": 108, "deletions": 0}, "files": [{"sha": "711e2887865d9ccf882d08ccc80e6c2adee1e598", "filename": "src/libcollections/str.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f9005512a9d84f469b30f0d469ccc401607ce64c/src%2Flibcollections%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9005512a9d84f469b30f0d469ccc401607ce64c/src%2Flibcollections%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstr.rs?ref=f9005512a9d84f469b30f0d469ccc401607ce64c", "patch": "@@ -546,6 +546,14 @@ impl str {\n         core_str::StrExt::slice_unchecked(self, begin, end)\n     }\n \n+    /// Takes a bytewise mutable slice from a string.\n+    ///\n+    /// Same as `slice_unchecked`, but works with `&mut str` instead of `&str`.\n+    #[stable(feature = \"derefmut_for_string\", since = \"1.2.0\")]\n+    pub unsafe fn slice_mut_unchecked(&mut self, begin: usize, end: usize) -> &mut str {\n+        core_str::StrExt::slice_mut_unchecked(self, begin, end)\n+    }\n+\n     /// Returns a slice of the string from the character range [`begin`..`end`).\n     ///\n     /// That is, start at the `begin`-th code point of the string and continue"}, {"sha": "91142afeda346bd414b03d8e69357bef1b343345", "filename": "src/libcollections/string.rs", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/f9005512a9d84f469b30f0d469ccc401607ce64c/src%2Flibcollections%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9005512a9d84f469b30f0d469ccc401607ce64c/src%2Flibcollections%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstring.rs?ref=f9005512a9d84f469b30f0d469ccc401607ce64c", "patch": "@@ -979,6 +979,38 @@ impl ops::Index<ops::RangeFull> for String {\n     }\n }\n \n+#[cfg(not(stage0))]\n+#[stable(feature = \"derefmut_for_string\", since = \"1.2.0\")]\n+impl ops::IndexMut<ops::Range<usize>> for String {\n+    #[inline]\n+    fn index_mut(&mut self, index: ops::Range<usize>) -> &mut str {\n+        &mut self[..][index]\n+    }\n+}\n+#[cfg(not(stage0))]\n+#[stable(feature = \"derefmut_for_string\", since = \"1.2.0\")]\n+impl ops::IndexMut<ops::RangeTo<usize>> for String {\n+    #[inline]\n+    fn index_mut(&mut self, index: ops::RangeTo<usize>) -> &mut str {\n+        &mut self[..][index]\n+    }\n+}\n+#[cfg(not(stage0))]\n+#[stable(feature = \"derefmut_for_string\", since = \"1.2.0\")]\n+impl ops::IndexMut<ops::RangeFrom<usize>> for String {\n+    #[inline]\n+    fn index_mut(&mut self, index: ops::RangeFrom<usize>) -> &mut str {\n+        &mut self[..][index]\n+    }\n+}\n+#[stable(feature = \"derefmut_for_string\", since = \"1.2.0\")]\n+impl ops::IndexMut<ops::RangeFull> for String {\n+    #[inline]\n+    fn index_mut(&mut self, _index: ops::RangeFull) -> &mut str {\n+        unsafe { mem::transmute(&mut *self.vec) }\n+    }\n+}\n+\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl ops::Deref for String {\n     type Target = str;"}, {"sha": "c8237720b0e90d35e91f6a04cb85e586aa20a89b", "filename": "src/libcore/str/mod.rs", "status": "modified", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/f9005512a9d84f469b30f0d469ccc401607ce64c/src%2Flibcore%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9005512a9d84f469b30f0d469ccc401607ce64c/src%2Flibcore%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fmod.rs?ref=f9005512a9d84f469b30f0d469ccc401607ce64c", "patch": "@@ -1116,6 +1116,23 @@ mod traits {\n         }\n     }\n \n+    /// Returns a mutable slice of the given string from the byte range\n+    /// [`begin`..`end`).\n+    #[stable(feature = \"derefmut_for_string\", since = \"1.2.0\")]\n+    impl ops::IndexMut<ops::Range<usize>> for str {\n+        #[inline]\n+        fn index_mut(&mut self, index: ops::Range<usize>) -> &mut str {\n+            // is_char_boundary checks that the index is in [0, .len()]\n+            if index.start <= index.end &&\n+               self.is_char_boundary(index.start) &&\n+               self.is_char_boundary(index.end) {\n+                unsafe { self.slice_mut_unchecked(index.start, index.end) }\n+            } else {\n+                super::slice_error_fail(self, index.start, index.end)\n+            }\n+        }\n+    }\n+\n     /// Returns a slice of the string from the beginning to byte\n     /// `end`.\n     ///\n@@ -1138,6 +1155,21 @@ mod traits {\n         }\n     }\n \n+    /// Returns a mutable slice of the string from the beginning to byte\n+    /// `end`.\n+    #[stable(feature = \"derefmut_for_string\", since = \"1.2.0\")]\n+    impl ops::IndexMut<ops::RangeTo<usize>> for str {\n+        #[inline]\n+        fn index_mut(&mut self, index: ops::RangeTo<usize>) -> &mut str {\n+            // is_char_boundary checks that the index is in [0, .len()]\n+            if self.is_char_boundary(index.end) {\n+                unsafe { self.slice_mut_unchecked(0, index.end) }\n+            } else {\n+                super::slice_error_fail(self, 0, index.end)\n+            }\n+        }\n+    }\n+\n     /// Returns a slice of the string from `begin` to its end.\n     ///\n     /// Equivalent to `self[begin .. self.len()]`.\n@@ -1159,6 +1191,21 @@ mod traits {\n         }\n     }\n \n+    /// Returns a slice of the string from `begin` to its end.\n+    #[stable(feature = \"derefmut_for_string\", since = \"1.2.0\")]\n+    impl ops::IndexMut<ops::RangeFrom<usize>> for str {\n+        #[inline]\n+        fn index_mut(&mut self, index: ops::RangeFrom<usize>) -> &mut str {\n+            // is_char_boundary checks that the index is in [0, .len()]\n+            if self.is_char_boundary(index.start) {\n+                let len = self.len();\n+                unsafe { self.slice_mut_unchecked(index.start, len) }\n+            } else {\n+                super::slice_error_fail(self, index.start, self.len())\n+            }\n+        }\n+    }\n+\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     impl ops::Index<ops::RangeFull> for str {\n         type Output = str;\n@@ -1168,6 +1215,14 @@ mod traits {\n             self\n         }\n     }\n+\n+    #[stable(feature = \"derefmut_for_string\", since = \"1.2.0\")]\n+    impl ops::IndexMut<ops::RangeFull> for str {\n+        #[inline]\n+        fn index_mut(&mut self, _index: ops::RangeFull) -> &mut str {\n+            self\n+        }\n+    }\n }\n \n /// Methods for string slices\n@@ -1204,6 +1259,7 @@ pub trait StrExt {\n     fn char_len(&self) -> usize;\n     fn slice_chars<'a>(&'a self, begin: usize, end: usize) -> &'a str;\n     unsafe fn slice_unchecked<'a>(&'a self, begin: usize, end: usize) -> &'a str;\n+    unsafe fn slice_mut_unchecked<'a>(&'a mut self, begin: usize, end: usize) -> &'a mut str;\n     fn starts_with<'a, P: Pattern<'a>>(&'a self, pat: P) -> bool;\n     fn ends_with<'a, P: Pattern<'a>>(&'a self, pat: P) -> bool\n         where P::Searcher: ReverseSearcher<'a>;\n@@ -1379,6 +1435,14 @@ impl StrExt for str {\n         })\n     }\n \n+    #[inline]\n+    unsafe fn slice_mut_unchecked(&mut self, begin: usize, end: usize) -> &mut str {\n+        mem::transmute(Slice {\n+            data: self.as_ptr().offset(begin as isize),\n+            len: end - begin,\n+        })\n+    }\n+\n     #[inline]\n     fn starts_with<'a, P: Pattern<'a>>(&'a self, pat: P) -> bool {\n         pat.is_prefix_of(self)"}, {"sha": "cf78fa7b69a00bb2ec8bb88e47ef947ad08724d5", "filename": "src/libstd/ascii.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f9005512a9d84f469b30f0d469ccc401607ce64c/src%2Flibstd%2Fascii.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9005512a9d84f469b30f0d469ccc401607ce64c/src%2Flibstd%2Fascii.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fascii.rs?ref=f9005512a9d84f469b30f0d469ccc401607ce64c", "patch": "@@ -583,6 +583,10 @@ mod tests {\n         test!('!', '!');\n         test!(b\"h\\xc3\\xa9\".to_vec(), b\"H\\xc3\\xa9\");\n         test!(\"h\u0131\u212a\u00df\".to_string(), \"H\u0131\u212a\u00df\");\n+\n+        let mut x = \"Hello\".to_string();\n+        x[..3].make_ascii_uppercase();  // Test IndexMut on String.\n+        assert_eq!(x, \"HELlo\")\n     }\n \n     #[test]"}]}