{"sha": "5db01f7371ec40cd210979f29242f8c80ea2ef15", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVkYjAxZjczNzFlYzQwY2QyMTA5NzlmMjkyNDJmOGM4MGVhMmVmMTU=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-04-11T08:30:55Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-04-11T09:37:26Z"}, "message": "copy lots of float-to-int cast tests from wasm test suite", "tree": {"sha": "b827e7d240b0b2ed4ae2c9ef1bc793966a51e974", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b827e7d240b0b2ed4ae2c9ef1bc793966a51e974"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5db01f7371ec40cd210979f29242f8c80ea2ef15", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5db01f7371ec40cd210979f29242f8c80ea2ef15", "html_url": "https://github.com/rust-lang/rust/commit/5db01f7371ec40cd210979f29242f8c80ea2ef15", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5db01f7371ec40cd210979f29242f8c80ea2ef15/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c63c413331a14e58eb95f13494eea8d1bafa19b9", "url": "https://api.github.com/repos/rust-lang/rust/commits/c63c413331a14e58eb95f13494eea8d1bafa19b9", "html_url": "https://github.com/rust-lang/rust/commit/c63c413331a14e58eb95f13494eea8d1bafa19b9"}], "stats": {"total": 159, "additions": 123, "deletions": 36}, "files": [{"sha": "7eab7f1ed524bb4c0f157fc3623bee477a41dc71", "filename": "tests/run-pass/float.rs", "status": "modified", "additions": 123, "deletions": 36, "changes": 159, "blob_url": "https://github.com/rust-lang/rust/blob/5db01f7371ec40cd210979f29242f8c80ea2ef15/tests%2Frun-pass%2Ffloat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5db01f7371ec40cd210979f29242f8c80ea2ef15/tests%2Frun-pass%2Ffloat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Ffloat.rs?ref=5db01f7371ec40cd210979f29242f8c80ea2ef15", "patch": "@@ -11,6 +11,12 @@ fn assert_eq<T: PartialEq + Debug>(x: T, y: T) {\n }\n \n fn main() {\n+    basic();\n+    casts();\n+    ops();\n+}\n+\n+fn basic() {\n     // basic arithmetic\n     assert_eq(6.0_f32*6.0_f32, 36.0_f32);\n     assert_eq(6.0_f64*6.0_f64, 36.0_f64);\n@@ -41,57 +47,138 @@ fn main() {\n     let x: u32 = unsafe { std::mem::transmute(42.0_f32) };\n     let y: f32 = unsafe { std::mem::transmute(x) };\n     assert_eq(y, 42.0_f32);\n+}\n+\n+fn casts() {\n+    // f32 -> i32\n+    assert_eq::<i32>(0.0f32 as i32, 0);\n+    assert_eq::<i32>(-0.0f32 as i32, 0);\n+    assert_eq::<i32>(/*0x1p-149*/ f32::from_bits(0x00000001) as i32, 0);\n+    assert_eq::<i32>(/*-0x1p-149*/ f32::from_bits(0x80000001) as i32, 0);\n+    assert_eq::<i32>(/*0x1.19999ap+0*/ f32::from_bits(0x3f8ccccd) as i32, 1);\n+    assert_eq::<i32>(/*-0x1.19999ap+0*/ f32::from_bits(0xbf8ccccd) as i32, -1);\n+    assert_eq::<i32>(1.9f32 as i32, 1);\n+    assert_eq::<i32>(-1.9f32 as i32, -1);\n+    assert_eq::<i32>(5.0f32 as i32, 5);\n+    assert_eq::<i32>(-5.0f32 as i32, -5);\n+    assert_eq::<i32>(2147483520.0f32 as i32, 2147483520);\n+    assert_eq::<i32>(-2147483648.0f32 as i32, -2147483648);\n+    // unrepresentable casts\n+    assert_eq::<i32>(2147483648.0f32 as i32, i32::MAX);\n+    assert_eq::<i32>(-2147483904.0f32 as i32, i32::MIN);\n+    assert_eq::<i32>(f32::MAX as i32, i32::MAX);\n+    assert_eq::<i32>(f32::MIN as i32, i32::MIN);\n+    assert_eq::<i32>(f32::INFINITY as i32, i32::MAX);\n+    assert_eq::<i32>(f32::NEG_INFINITY as i32, i32::MIN);\n+    assert_eq::<i32>(f32::NAN as i32, 0);\n+    assert_eq::<i32>((-f32::NAN) as i32, 0);\n+\n+    // f32 -> u32\n+    assert_eq::<u32>(0.0f32 as u32, 0);\n+    assert_eq::<u32>(-0.0f32 as u32, 0);\n+    assert_eq::<u32>(/*0x1p-149*/ f32::from_bits(0x00000001) as u32, 0);\n+    assert_eq::<u32>(/*-0x1p-149*/ f32::from_bits(0x80000001) as u32, 0);\n+    assert_eq::<u32>(/*0x1.19999ap+0*/ f32::from_bits(0x3f8ccccd) as u32, 1);\n+    assert_eq::<u32>(1.9f32 as u32, 1);\n+    assert_eq::<u32>(5.0f32 as u32, 5);\n+    assert_eq::<u32>(2147483648.0f32 as u32, 0x8000_0000);\n+    assert_eq::<u32>(4294967040.0f32 as u32, 0u32.wrapping_sub(256));\n+    assert_eq::<u32>(/*-0x1.ccccccp-1*/ f32::from_bits(0xbf666666) as u32, 0);\n+    assert_eq::<u32>(/*-0x1.fffffep-1*/ f32::from_bits(0xbf7fffff) as u32, 0);\n+    assert_eq::<u32>((u32::MAX-127) as f32 as u32, u32::MAX); // rounding loss\n+    assert_eq::<u32>((u32::MAX-128) as f32 as u32, u32::MAX-255); // rounding loss\n+    // unrepresentable casts\n+    assert_eq::<u32>(4294967296.0f32 as u32, u32::MAX);\n+    assert_eq::<u32>(-5.0f32 as u32, 0);\n+    assert_eq::<u32>(f32::MAX as u32, u32::MAX);\n+    assert_eq::<u32>(f32::MIN as u32, 0);\n+    assert_eq::<u32>(f32::INFINITY as u32, u32::MAX);\n+    assert_eq::<u32>(f32::NEG_INFINITY as u32, 0);\n+    assert_eq::<u32>(f32::NAN as u32, 0);\n+    assert_eq::<u32>((-f32::NAN) as u32, 0);\n \n-    // f32 <-> int casts\n-    assert_eq(5.0f32 as u32, 5);\n-    assert_eq(-5.0f32 as u32, 0);\n-    assert_eq(5.0f32 as i32, 5);\n-    assert_eq(-5.0f32 as i32, -5);\n-    assert_eq(f32::MAX as i32, i32::MAX);\n-    assert_eq(f32::INFINITY as i32, i32::MAX);\n-    assert_eq(f32::MAX as u32, u32::MAX);\n-    assert_eq(f32::INFINITY as u32, u32::MAX);\n-    assert_eq(f32::MIN as i32, i32::MIN);\n-    assert_eq(f32::NEG_INFINITY as i32, i32::MIN);\n-    assert_eq(f32::MIN as u32, 0);\n-    assert_eq(f32::NEG_INFINITY as u32, 0);\n-    assert_eq(f32::NAN as i32, 0);\n-    assert_eq(f32::NAN as u32, 0);\n-    assert_eq((u32::MAX-127) as f32 as u32, u32::MAX); // rounding loss\n-    assert_eq((u32::MAX-128) as f32 as u32, u32::MAX-255); // rounding loss\n+    // f32 -> i64\n+    assert_eq::<i64>(4294967296.0f32 as i64, 4294967296);\n+    assert_eq::<i64>(-4294967296.0f32 as i64, -4294967296);\n+    assert_eq::<i64>(9223371487098961920.0f32 as i64, 9223371487098961920);\n+    assert_eq::<i64>(-9223372036854775808.0f32 as i64, -9223372036854775808);\n+\n+    // f64 -> i32\n+    assert_eq::<i32>(0.0f64 as i32, 0);\n+    assert_eq::<i32>(-0.0f64 as i32, 0);\n+    assert_eq::<i32>(/*0x1.199999999999ap+0*/ f64::from_bits(0x3ff199999999999a) as i32, 1);\n+    assert_eq::<i32>(/*-0x1.199999999999ap+0*/ f64::from_bits(0xbff199999999999a) as i32, -1);\n+    assert_eq::<i32>(1.9f64 as i32, 1);\n+    assert_eq::<i32>(-1.9f64 as i32, -1);\n+    assert_eq::<i32>(1e8f64 as i32, 100_000_000);\n+    assert_eq::<i32>(2147483647.0f64 as i32, 2147483647);\n+    assert_eq::<i32>(-2147483648.0f64 as i32, -2147483648);\n+    // unrepresentable casts\n+    assert_eq::<i32>(2147483648.0f64 as i32, i32::MAX);\n+    assert_eq::<i32>(-2147483649.0f64 as i32, i32::MIN);\n+\n+    // f64 -> i64\n+    assert_eq::<i64>(0.0f64 as i64, 0);\n+    assert_eq::<i64>(-0.0f64 as i64, 0);\n+    assert_eq::<i64>(/*0x0.0000000000001p-1022*/ f64::from_bits(0x1) as i64, 0);\n+    assert_eq::<i64>(/*-0x0.0000000000001p-1022*/ f64::from_bits(0x8000000000000001) as i64, 0);\n+    assert_eq::<i64>(/*0x1.199999999999ap+0*/ f64::from_bits(0x3ff199999999999a) as i64, 1);\n+    assert_eq::<i64>(/*-0x1.199999999999ap+0*/ f64::from_bits(0xbff199999999999a) as i64, -1);\n+    assert_eq::<i64>(5.0f64 as i64, 5);\n+    assert_eq::<i64>(5.9f64 as i64, 5);\n+    assert_eq::<i64>(-5.0f64 as i64, -5);\n+    assert_eq::<i64>(-5.9f64 as i64, -5);\n+    assert_eq::<i64>(4294967296.0f64 as i64, 4294967296);\n+    assert_eq::<i64>(-4294967296.0f64 as i64, -4294967296);\n+    assert_eq::<i64>(9223372036854774784.0f64 as i64, 9223372036854774784);\n+    assert_eq::<i64>(-9223372036854775808.0f64 as i64, -9223372036854775808);\n+    // unrepresentable casts\n+    assert_eq::<i64>(9223372036854775808.0f64 as i64, i64::MAX);\n+    assert_eq::<i64>(-9223372036854777856.0f64 as i64, i64::MIN);\n+    assert_eq::<i64>(f64::MAX as i64, i64::MAX);\n+    assert_eq::<i64>(f64::MIN as i64, i64::MIN);\n+    assert_eq::<i64>(f64::INFINITY as i64, i64::MAX);\n+    assert_eq::<i64>(f64::NEG_INFINITY as i64, i64::MIN);\n+    assert_eq::<i64>(f64::NAN as i64, 0);\n+    assert_eq::<i64>((-f64::NAN) as i64, 0);\n+\n+    // f64 -> u64\n+    assert_eq::<u64>(0.0f64 as u64, 0);\n+    assert_eq::<u64>(-0.0f64 as u64, 0);\n+    assert_eq::<u64>(5.0f64 as u64, 5);\n+    assert_eq::<u64>(-5.0f64 as u64, 0);\n+    assert_eq::<u64>(1e16f64 as u64, 10000000000000000);\n+    assert_eq::<u64>((u64::MAX-1023) as f64 as u64, u64::MAX); // rounding loss\n+    assert_eq::<u64>((u64::MAX-1024) as f64 as u64, u64::MAX-2047); // rounding loss\n+    assert_eq::<u64>(9223372036854775808.0f64 as u64, 9223372036854775808);\n+    // unrepresentable casts\n+    assert_eq::<u64>(18446744073709551616.0f64 as u64, u64::MAX);\n+    assert_eq::<u64>(f64::MAX as u64, u64::MAX);\n+    assert_eq::<u64>(f64::MIN as u64, 0);\n+    assert_eq::<u64>(f64::INFINITY as u64, u64::MAX);\n+    assert_eq::<u64>(f64::NEG_INFINITY as u64, 0);\n+    assert_eq::<u64>(f64::NAN as u64, 0);\n+    assert_eq::<u64>((-f64::NAN) as u64, 0);\n+\n+    // int -> f32\n     assert_eq(127i8 as f32, 127.0f32);\n     assert_eq(i128::MIN as f32, -170141183460469231731687303715884105728.0f32);\n     assert_eq(u128::MAX as f32, f32::INFINITY); // saturation\n \n-    // f64 <-> int casts\n-    assert_eq(5.0f64 as u64, 5);\n-    assert_eq(-5.0f64 as u64, 0);\n-    assert_eq(5.0f64 as i64, 5);\n-    assert_eq(-5.0f64 as i64, -5);\n-    assert_eq(f64::MAX as i64, i64::MAX);\n-    assert_eq(f64::INFINITY as i64, i64::MAX);\n-    assert_eq(f64::MAX as u64, u64::MAX);\n-    assert_eq(f64::INFINITY as u64, u64::MAX);\n-    assert_eq(f64::MIN as i64, i64::MIN);\n-    assert_eq(f64::NEG_INFINITY as i64, i64::MIN);\n-    assert_eq(f64::MIN as u64, 0);\n-    assert_eq(f64::NEG_INFINITY as u64, 0);\n-    assert_eq(f64::NAN as i64, 0);\n-    assert_eq(f64::NAN as u64, 0);\n-    assert_eq((u64::MAX-1023) as f64 as u64, u64::MAX); // rounding loss\n-    assert_eq((u64::MAX-1024) as f64 as u64, u64::MAX-2047); // rounding loss\n-    assert_eq(u128::MAX as f64 as u128, u128::MAX);\n+    // int -> f64\n     assert_eq(i16::MIN as f64, -32768.0f64);\n     assert_eq(u128::MAX as f64, 340282366920938463463374607431768211455.0f64); // even that fits...\n \n-    // f32 <-> f64 casts\n+    // f32 <-> f64\n     assert_eq(5.0f64 as f32, 5.0f32);\n     assert_eq(5.0f32 as f64, 5.0f64);\n     assert_eq(f64::MAX as f32, f32::INFINITY);\n     assert_eq(f64::MIN as f32, f32::NEG_INFINITY);\n     assert_eq(f32::INFINITY as f64, f64::INFINITY);\n     assert_eq(f32::NEG_INFINITY as f64, f64::NEG_INFINITY);\n+}\n \n+fn ops() {\n     // f32 min/max\n     assert_eq((1.0 as f32).max(-1.0), 1.0);\n     assert_eq((1.0 as f32).min(-1.0), -1.0);"}]}