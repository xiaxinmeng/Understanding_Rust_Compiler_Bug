{"sha": "c292def8030b34eb6bead87580cf386fabd4ff10", "node_id": "C_kwDOAAsO6NoAKGMyOTJkZWY4MDMwYjM0ZWI2YmVhZDg3NTgwY2YzODZmYWJkNGZmMTA", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-02-21T22:02:00Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-02-21T22:02:00Z"}, "message": "Rollup merge of #108306 - klensy:compiletest-up, r=wesleywiser\n\ncompiletest: up deps\n\nupdate `miow` 0.3.7 -> 0.5.0 (which moved from `winapi` to `windows-rs`, [changelog](https://github.com/yoshuawuyts/miow/blob/master/CHANGELOG.md#v050---2022-11-10))\nreplace `lazy_static` with `once_cell` (there is slow transition to the second crate, in hope of eventually stable stdlib version, yes?)", "tree": {"sha": "6deca546580fad7867b32e70d38edbd21eaf5017", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6deca546580fad7867b32e70d38edbd21eaf5017"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c292def8030b34eb6bead87580cf386fabd4ff10", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJj9T9YCRBK7hj4Ov3rIwAAlIAIAGq7K/m+zC87fUngCSjPxZb9\ntixeYyZlenvY+UJvgVJBSgTuz8Np8D0yrZMDOrZ4vdxviPrY3b3UojlZXhrOl9g1\nwQ3X0LTo7sXBCpNKxscJf9Ku1WyvhnWidEOeD6jVd+41XPY7pkRODU/+2er+7bda\nkXgDov9A9yZ3US5AIpWb6CUzw6h92J/xZxPMcMXsVjFWWlu83rCk/VGsdLhmfPh4\nCDTibOIS8u+EpYLaMqEJK+Zbx/jUKaH3GV5jDHKfFncrAqRgbbNSvT1S9eRSgisM\nBWlFet62m/MxO1QaPyJMvUhtqV0WdaZRjFKSg2FITTrl1urcAqIRUNVu5Ee4X3E=\n=5JF9\n-----END PGP SIGNATURE-----\n", "payload": "tree 6deca546580fad7867b32e70d38edbd21eaf5017\nparent ae0143007839fada3fadd790dc9b8c1a36c61dee\nparent 58e7470b105fadec5965e9b219049e0175aed7bb\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1677016920 +0100\ncommitter GitHub <noreply@github.com> 1677016920 +0100\n\nRollup merge of #108306 - klensy:compiletest-up, r=wesleywiser\n\ncompiletest: up deps\n\nupdate `miow` 0.3.7 -> 0.5.0 (which moved from `winapi` to `windows-rs`, [changelog](https://github.com/yoshuawuyts/miow/blob/master/CHANGELOG.md#v050---2022-11-10))\nreplace `lazy_static` with `once_cell` (there is slow transition to the second crate, in hope of eventually stable stdlib version, yes?)\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c292def8030b34eb6bead87580cf386fabd4ff10", "html_url": "https://github.com/rust-lang/rust/commit/c292def8030b34eb6bead87580cf386fabd4ff10", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c292def8030b34eb6bead87580cf386fabd4ff10/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ae0143007839fada3fadd790dc9b8c1a36c61dee", "url": "https://api.github.com/repos/rust-lang/rust/commits/ae0143007839fada3fadd790dc9b8c1a36c61dee", "html_url": "https://github.com/rust-lang/rust/commit/ae0143007839fada3fadd790dc9b8c1a36c61dee"}, {"sha": "58e7470b105fadec5965e9b219049e0175aed7bb", "url": "https://api.github.com/repos/rust-lang/rust/commits/58e7470b105fadec5965e9b219049e0175aed7bb", "html_url": "https://github.com/rust-lang/rust/commit/58e7470b105fadec5965e9b219049e0175aed7bb"}], "stats": {"total": 87, "additions": 40, "deletions": 47}, "files": [{"sha": "4d6530508b3d7b5ef01afb7f0a6a633759592872", "filename": "Cargo.lock", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c292def8030b34eb6bead87580cf386fabd4ff10/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/c292def8030b34eb6bead87580cf386fabd4ff10/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=c292def8030b34eb6bead87580cf386fabd4ff10", "patch": "@@ -891,11 +891,11 @@ dependencies = [\n  \"diff\",\n  \"getopts\",\n  \"glob\",\n- \"lazy_static\",\n  \"lazycell\",\n  \"libc\",\n- \"miow 0.3.7\",\n+ \"miow 0.5.0\",\n  \"miropt-test-tools\",\n+ \"once_cell\",\n  \"regex\",\n  \"rustfix\",\n  \"serde\","}, {"sha": "0db043a4fcade009e5ff1c21fc26a50d2d4cb902", "filename": "src/tools/compiletest/Cargo.toml", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c292def8030b34eb6bead87580cf386fabd4ff10/src%2Ftools%2Fcompiletest%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/c292def8030b34eb6bead87580cf386fabd4ff10/src%2Ftools%2Fcompiletest%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2FCargo.toml?ref=c292def8030b34eb6bead87580cf386fabd4ff10", "patch": "@@ -16,7 +16,7 @@ regex = \"1.0\"\n serde = { version = \"1.0\", features = [\"derive\"] }\n serde_json = \"1.0\"\n rustfix = \"0.6.0\"\n-lazy_static = \"1.0\"\n+once_cell = \"1.16.0\"\n walkdir = \"2\"\n glob = \"0.3.0\"\n lazycell = \"1.3.0\"\n@@ -25,5 +25,5 @@ lazycell = \"1.3.0\"\n libc = \"0.2\"\n \n [target.'cfg(windows)'.dependencies]\n-miow = \"0.3\"\n+miow = \"0.5\"\n winapi = { version = \"0.3\", features = [\"winerror\"] }"}, {"sha": "c33e66e02ac41aca979c531f3aa5b7e091d9ce72", "filename": "src/tools/compiletest/src/errors.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c292def8030b34eb6bead87580cf386fabd4ff10/src%2Ftools%2Fcompiletest%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c292def8030b34eb6bead87580cf386fabd4ff10/src%2Ftools%2Fcompiletest%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Ferrors.rs?ref=c292def8030b34eb6bead87580cf386fabd4ff10", "patch": "@@ -7,7 +7,7 @@ use std::io::BufReader;\n use std::path::Path;\n use std::str::FromStr;\n \n-use lazy_static::lazy_static;\n+use once_cell::sync::Lazy;\n use regex::Regex;\n use tracing::*;\n \n@@ -117,10 +117,8 @@ fn parse_expected(\n     //     //~^^^^^\n     //     //[cfg1]~\n     //     //[cfg1,cfg2]~^^\n-    lazy_static! {\n-        static ref RE: Regex =\n-            Regex::new(r\"//(?:\\[(?P<cfgs>[\\w,]+)])?~(?P<adjust>\\||\\^*)\").unwrap();\n-    }\n+    static RE: Lazy<Regex> =\n+        Lazy::new(|| Regex::new(r\"//(?:\\[(?P<cfgs>[\\w,]+)])?~(?P<adjust>\\||\\^*)\").unwrap());\n \n     let captures = RE.captures(line)?;\n "}, {"sha": "7824ef81d7a939c3d31c8a8341a106795e610974", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 33, "deletions": 38, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/c292def8030b34eb6bead87580cf386fabd4ff10/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c292def8030b34eb6bead87580cf386fabd4ff10/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=c292def8030b34eb6bead87580cf386fabd4ff10", "patch": "@@ -32,7 +32,7 @@ use std::process::{Child, Command, ExitStatus, Output, Stdio};\n use std::str;\n \n use glob::glob;\n-use lazy_static::lazy_static;\n+use once_cell::sync::Lazy;\n use tracing::*;\n \n use crate::extract_gdb_version;\n@@ -52,9 +52,8 @@ fn disable_error_reporting<F: FnOnce() -> R, R>(f: F) -> R {\n     use winapi::um::errhandlingapi::SetErrorMode;\n     use winapi::um::winbase::SEM_NOGPFAULTERRORBOX;\n \n-    lazy_static! {\n-        static ref LOCK: Mutex<()> = Mutex::new(());\n-    }\n+    static LOCK: Mutex<()> = Mutex::new(());\n+\n     // Error mode is a global variable, so lock it so only one thread will change it\n     let _lock = LOCK.lock().unwrap();\n \n@@ -2848,11 +2847,10 @@ impl<'test> TestCx<'test> {\n         // the form <crate-name1>.<crate-disambiguator1>-in-<crate-name2>.<crate-disambiguator2>,\n         // remove all crate-disambiguators.\n         fn remove_crate_disambiguator_from_cgu(cgu: &str) -> String {\n-            lazy_static! {\n-                static ref RE: Regex =\n-                    Regex::new(r\"^[^\\.]+(?P<d1>\\.[[:alnum:]]+)(-in-[^\\.]+(?P<d2>\\.[[:alnum:]]+))?\")\n-                        .unwrap();\n-            }\n+            static RE: Lazy<Regex> = Lazy::new(|| {\n+                Regex::new(r\"^[^\\.]+(?P<d1>\\.[[:alnum:]]+)(-in-[^\\.]+(?P<d2>\\.[[:alnum:]]+))?\")\n+                    .unwrap()\n+            });\n \n             let captures =\n                 RE.captures(cgu).unwrap_or_else(|| panic!(\"invalid cgu name encountered: {}\", cgu));\n@@ -3170,12 +3168,12 @@ impl<'test> TestCx<'test> {\n                 // 'uploaded \"$TEST_BUILD_DIR/<test_executable>, waiting for result\"'\n                 // is printed to stdout by the client and then captured in the ProcRes,\n                 // so it needs to be removed when comparing the run-pass test execution output\n-                lazy_static! {\n-                    static ref REMOTE_TEST_RE: Regex = Regex::new(\n+                static REMOTE_TEST_RE: Lazy<Regex> = Lazy::new(|| {\n+                    Regex::new(\n                         \"^uploaded \\\"\\\\$TEST_BUILD_DIR(/[[:alnum:]_\\\\-.]+)+\\\", waiting for result\\n\"\n                     )\n-                    .unwrap();\n-                }\n+                    .unwrap()\n+                });\n                 REMOTE_TEST_RE\n                     .replace(\n                         &self.normalize_output(&proc_res.stdout, &self.props.normalize_stdout),\n@@ -3620,10 +3618,8 @@ impl<'test> TestCx<'test> {\n         // with placeholders as we do not want tests needing updated when compiler source code\n         // changes.\n         // eg. $SRC_DIR/libcore/mem.rs:323:14 becomes $SRC_DIR/libcore/mem.rs:LL:COL\n-        lazy_static! {\n-            static ref SRC_DIR_RE: Regex =\n-                Regex::new(\"SRC_DIR(.+):\\\\d+:\\\\d+(: \\\\d+:\\\\d+)?\").unwrap();\n-        }\n+        static SRC_DIR_RE: Lazy<Regex> =\n+            Lazy::new(|| Regex::new(\"SRC_DIR(.+):\\\\d+:\\\\d+(: \\\\d+:\\\\d+)?\").unwrap());\n \n         normalized = SRC_DIR_RE.replace_all(&normalized, \"SRC_DIR$1:LL:COL\").into_owned();\n \n@@ -3634,19 +3630,17 @@ impl<'test> TestCx<'test> {\n         // since they duplicate actual errors and make the output hard to read.\n         // This mirrors the regex in src/tools/tidy/src/style.rs, please update\n         // both if either are changed.\n-        lazy_static! {\n-            static ref ANNOTATION_RE: Regex = Regex::new(\"\\\\s*//(\\\\[.*\\\\])?~.*\").unwrap();\n-        }\n+        static ANNOTATION_RE: Lazy<Regex> =\n+            Lazy::new(|| Regex::new(\"\\\\s*//(\\\\[.*\\\\])?~.*\").unwrap());\n \n         normalized = ANNOTATION_RE.replace_all(&normalized, \"\").into_owned();\n \n         // This code normalizes various hashes in v0 symbol mangling that is\n         // emitted in the ui and mir-opt tests.\n-        lazy_static! {\n-            static ref V0_CRATE_HASH_PREFIX_RE: Regex =\n-                Regex::new(r\"_R.*?Cs[0-9a-zA-Z]+_\").unwrap();\n-            static ref V0_CRATE_HASH_RE: Regex = Regex::new(r\"Cs[0-9a-zA-Z]+_\").unwrap();\n-        }\n+        static V0_CRATE_HASH_PREFIX_RE: Lazy<Regex> =\n+            Lazy::new(|| Regex::new(r\"_R.*?Cs[0-9a-zA-Z]+_\").unwrap());\n+        static V0_CRATE_HASH_RE: Lazy<Regex> =\n+            Lazy::new(|| Regex::new(r\"Cs[0-9a-zA-Z]+_\").unwrap());\n \n         const V0_CRATE_HASH_PLACEHOLDER: &str = r\"CsCRATE_HASH_\";\n         if V0_CRATE_HASH_PREFIX_RE.is_match(&normalized) {\n@@ -3655,10 +3649,9 @@ impl<'test> TestCx<'test> {\n                 V0_CRATE_HASH_RE.replace_all(&normalized, V0_CRATE_HASH_PLACEHOLDER).into_owned();\n         }\n \n-        lazy_static! {\n-            static ref V0_BACK_REF_PREFIX_RE: Regex = Regex::new(r\"\\(_R.*?B[0-9a-zA-Z]_\").unwrap();\n-            static ref V0_BACK_REF_RE: Regex = Regex::new(r\"B[0-9a-zA-Z]_\").unwrap();\n-        }\n+        static V0_BACK_REF_PREFIX_RE: Lazy<Regex> =\n+            Lazy::new(|| Regex::new(r\"\\(_R.*?B[0-9a-zA-Z]_\").unwrap());\n+        static V0_BACK_REF_RE: Lazy<Regex> = Lazy::new(|| Regex::new(r\"B[0-9a-zA-Z]_\").unwrap());\n \n         const V0_BACK_REF_PLACEHOLDER: &str = r\"B<REF>_\";\n         if V0_BACK_REF_PREFIX_RE.is_match(&normalized) {\n@@ -3681,21 +3674,23 @@ impl<'test> TestCx<'test> {\n     /// Replaces backslashes in paths with forward slashes, and replaces CRLF line endings\n     /// with LF.\n     fn normalize_platform_differences(output: &str) -> String {\n-        lazy_static! {\n-            /// Used to find Windows paths.\n-            ///\n-            /// It's not possible to detect paths in the error messages generally, but this is a\n-            /// decent enough heuristic.\n-            static ref PATH_BACKSLASH_RE: Regex = Regex::new(r#\"(?x)\n+        /// Used to find Windows paths.\n+        ///\n+        /// It's not possible to detect paths in the error messages generally, but this is a\n+        /// decent enough heuristic.\n+        static PATH_BACKSLASH_RE: Lazy<Regex> = Lazy::new(|| {\n+            Regex::new(\n+                r#\"(?x)\n                 (?:\n                   # Match paths that don't include spaces.\n                   (?:\\\\[\\pL\\pN\\.\\-_']+)+\\.\\pL+\n                 |\n                   # If the path starts with a well-known root, then allow spaces.\n                   \\$(?:DIR|SRC_DIR|TEST_BUILD_DIR|BUILD_DIR|LIB_DIR)(?:\\\\[\\pL\\pN\\.\\-_' ]+)+\n-                )\"#\n-            ).unwrap();\n-        }\n+                )\"#,\n+            )\n+            .unwrap()\n+        });\n \n         let output = output.replace(r\"\\\\\", r\"\\\");\n "}]}