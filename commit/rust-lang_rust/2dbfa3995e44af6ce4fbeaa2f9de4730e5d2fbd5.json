{"sha": "2dbfa3995e44af6ce4fbeaa2f9de4730e5d2fbd5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJkYmZhMzk5NWU0NGFmNmNlNGZiZWFhMmY5ZGU0NzMwZTVkMmZiZDU=", "commit": {"author": {"name": "Zack M. Davis", "email": "code@zackmdavis.net", "date": "2017-07-31T07:31:32Z"}, "committer": {"name": "Zack M. Davis", "email": "code@zackmdavis.net", "date": "2017-08-01T01:45:02Z"}, "message": "limit and delimit available fields in note\n\nAlso, don't show the note if no fields are available (usually due to\nprivacy).", "tree": {"sha": "a80b279ec5726f8737c00742ca0559c15a3e3f33", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a80b279ec5726f8737c00742ca0559c15a3e3f33"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2dbfa3995e44af6ce4fbeaa2f9de4730e5d2fbd5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2dbfa3995e44af6ce4fbeaa2f9de4730e5d2fbd5", "html_url": "https://github.com/rust-lang/rust/commit/2dbfa3995e44af6ce4fbeaa2f9de4730e5d2fbd5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2dbfa3995e44af6ce4fbeaa2f9de4730e5d2fbd5/comments", "author": {"login": "zackmdavis", "id": 1076988, "node_id": "MDQ6VXNlcjEwNzY5ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/1076988?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zackmdavis", "html_url": "https://github.com/zackmdavis", "followers_url": "https://api.github.com/users/zackmdavis/followers", "following_url": "https://api.github.com/users/zackmdavis/following{/other_user}", "gists_url": "https://api.github.com/users/zackmdavis/gists{/gist_id}", "starred_url": "https://api.github.com/users/zackmdavis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zackmdavis/subscriptions", "organizations_url": "https://api.github.com/users/zackmdavis/orgs", "repos_url": "https://api.github.com/users/zackmdavis/repos", "events_url": "https://api.github.com/users/zackmdavis/events{/privacy}", "received_events_url": "https://api.github.com/users/zackmdavis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "zackmdavis", "id": 1076988, "node_id": "MDQ6VXNlcjEwNzY5ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/1076988?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zackmdavis", "html_url": "https://github.com/zackmdavis", "followers_url": "https://api.github.com/users/zackmdavis/followers", "following_url": "https://api.github.com/users/zackmdavis/following{/other_user}", "gists_url": "https://api.github.com/users/zackmdavis/gists{/gist_id}", "starred_url": "https://api.github.com/users/zackmdavis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zackmdavis/subscriptions", "organizations_url": "https://api.github.com/users/zackmdavis/orgs", "repos_url": "https://api.github.com/users/zackmdavis/repos", "events_url": "https://api.github.com/users/zackmdavis/events{/privacy}", "received_events_url": "https://api.github.com/users/zackmdavis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bf7e91f61da8a5ca74c7d97f6f2bc978c0366256", "url": "https://api.github.com/repos/rust-lang/rust/commits/bf7e91f61da8a5ca74c7d97f6f2bc978c0366256", "html_url": "https://github.com/rust-lang/rust/commit/bf7e91f61da8a5ca74c7d97f6f2bc978c0366256"}], "stats": {"total": 75, "additions": 46, "deletions": 29}, "files": [{"sha": "178331afabe17e3c9f924e1c3b63a0c8b2718dae", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 22, "deletions": 9, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/2dbfa3995e44af6ce4fbeaa2f9de4730e5d2fbd5/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dbfa3995e44af6ce4fbeaa2f9de4730e5d2fbd5/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=2dbfa3995e44af6ce4fbeaa2f9de4730e5d2fbd5", "patch": "@@ -2957,10 +2957,11 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                             } else {\n                                 err.span_label(field.span, \"unknown field\");\n                                 let struct_variant_def = def.struct_variant();\n-                                let available_field_names = self.available_field_names(\n-                                    struct_variant_def);\n-                                err.note(&format!(\"available fields are: {}\",\n-                                                  available_field_names.join(\", \")));\n+                                let field_names = self.available_field_names(struct_variant_def);\n+                                if !field_names.is_empty() {\n+                                    err.note(&format!(\"available fields are: {}\",\n+                                                      self.name_series_display(field_names)));\n+                                }\n                             };\n                     }\n                     ty::TyRawPtr(..) => {\n@@ -3000,17 +3001,28 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         find_best_match_for_name(names, &name, None)\n     }\n \n-    fn available_field_names(&self, variant: &'tcx ty::VariantDef) -> Vec<String> {\n+    fn available_field_names(&self, variant: &'tcx ty::VariantDef) -> Vec<ast::Name> {\n         let mut available = Vec::new();\n         for field in variant.fields.iter() {\n             let (_, def_scope) = self.tcx.adjust(field.name, variant.did, self.body_id);\n             if field.vis.is_accessible_from(def_scope, self.tcx) {\n-                available.push(field.name.to_string());\n+                available.push(field.name);\n             }\n         }\n         available\n     }\n \n+    fn name_series_display(&self, names: Vec<ast::Name>) -> String {\n+        // dynamic limit, to never omit just one field\n+        let limit = if names.len() == 6 { 6 } else { 5 };\n+        let mut display = names.iter().take(limit)\n+            .map(|n| format!(\"`{}`\", n)).collect::<Vec<_>>().join(\", \");\n+        if names.len() > limit {\n+            display = format!(\"{} ... and {} others\", display, names.len() - limit);\n+        }\n+        display\n+    }\n+\n     // Check tuple index expressions\n     fn check_tup_field(&self,\n                        expr: &'gcx hir::Expr,\n@@ -3132,12 +3144,13 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                                        format!(\"`{}` does not have this field\", ty));\n                     }\n                     let available_field_names = self.available_field_names(variant);\n-                    err.note(&format!(\"available fields are: {}\",\n-                                      available_field_names.join(\", \")));\n+                    if !available_field_names.is_empty() {\n+                        err.note(&format!(\"available fields are: {}\",\n+                                          self.name_series_display(available_field_names)));\n+                    }\n                 }\n                 _ => bug!(\"non-ADT passed to report_unknown_field\")\n             }\n-\n         };\n         err.emit();\n     }"}, {"sha": "e8b0915d2b533fa24e339911715073f2b5cc2dd1", "filename": "src/test/compile-fail/E0559.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2dbfa3995e44af6ce4fbeaa2f9de4730e5d2fbd5/src%2Ftest%2Fcompile-fail%2FE0559.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dbfa3995e44af6ce4fbeaa2f9de4730e5d2fbd5/src%2Ftest%2Fcompile-fail%2FE0559.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0559.rs?ref=2dbfa3995e44af6ce4fbeaa2f9de4730e5d2fbd5", "patch": "@@ -16,5 +16,5 @@ fn main() {\n     let s = Field::Fool { joke: 0 };\n     //~^ ERROR E0559\n     //~| NOTE `Field::Fool` does not have this field\n-    //~| NOTE available fields are: x\n+    //~| NOTE available fields are: `x`\n }"}, {"sha": "955ef7ca99ceb51df2d73999c0aa3a94b41a81e0", "filename": "src/test/compile-fail/E0560.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2dbfa3995e44af6ce4fbeaa2f9de4730e5d2fbd5/src%2Ftest%2Fcompile-fail%2FE0560.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dbfa3995e44af6ce4fbeaa2f9de4730e5d2fbd5/src%2Ftest%2Fcompile-fail%2FE0560.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0560.rs?ref=2dbfa3995e44af6ce4fbeaa2f9de4730e5d2fbd5", "patch": "@@ -16,5 +16,5 @@ fn main() {\n     let s = Simba { mother: 1, father: 0 };\n     //~^ ERROR E0560\n     //~| NOTE `Simba` does not have this field\n-    //~| NOTE available fields are: mother\n+    //~| NOTE available fields are: `mother`\n }"}, {"sha": "938ccb343d4270099b2524eeecef1cd4ea5d3570", "filename": "src/test/compile-fail/issue-19922.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2dbfa3995e44af6ce4fbeaa2f9de4730e5d2fbd5/src%2Ftest%2Fcompile-fail%2Fissue-19922.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dbfa3995e44af6ce4fbeaa2f9de4730e5d2fbd5/src%2Ftest%2Fcompile-fail%2Fissue-19922.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-19922.rs?ref=2dbfa3995e44af6ce4fbeaa2f9de4730e5d2fbd5", "patch": "@@ -16,5 +16,5 @@ fn main() {\n     let homura = Homura::Akemi { kaname: () };\n     //~^ ERROR variant `Homura::Akemi` has no field named `kaname`\n     //~| NOTE `Homura::Akemi` does not have this field\n-    //~| NOTE available fields are: madoka\n+    //~| NOTE available fields are: `madoka`\n }"}, {"sha": "d6e091a1472cd903c483bced35d8e527e78bc4ea", "filename": "src/test/compile-fail/numeric-fields.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2dbfa3995e44af6ce4fbeaa2f9de4730e5d2fbd5/src%2Ftest%2Fcompile-fail%2Fnumeric-fields.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dbfa3995e44af6ce4fbeaa2f9de4730e5d2fbd5/src%2Ftest%2Fcompile-fail%2Fnumeric-fields.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnumeric-fields.rs?ref=2dbfa3995e44af6ce4fbeaa2f9de4730e5d2fbd5", "patch": "@@ -14,7 +14,7 @@ fn main() {\n     let s = S{0b1: 10, 0: 11};\n     //~^ ERROR struct `S` has no field named `0b1`\n     //~| NOTE `S` does not have this field\n-    //~| NOTE available fields are: 0, 1\n+    //~| NOTE available fields are: `0`, `1`\n     match s {\n         S{0: a, 0x1: b, ..} => {}\n         //~^ ERROR does not have a field named `0x1`"}, {"sha": "b1af142ad0fd230fd6fb6d5d9f660728ee7017dc", "filename": "src/test/compile-fail/struct-fields-too-many.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2dbfa3995e44af6ce4fbeaa2f9de4730e5d2fbd5/src%2Ftest%2Fcompile-fail%2Fstruct-fields-too-many.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dbfa3995e44af6ce4fbeaa2f9de4730e5d2fbd5/src%2Ftest%2Fcompile-fail%2Fstruct-fields-too-many.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fstruct-fields-too-many.rs?ref=2dbfa3995e44af6ce4fbeaa2f9de4730e5d2fbd5", "patch": "@@ -18,6 +18,6 @@ fn main() {\n         bar: 0\n         //~^ ERROR struct `BuildData` has no field named `bar`\n         //~| NOTE `BuildData` does not have this field\n-        //~| NOTE available fields are: foo\n+        //~| NOTE available fields are: `foo`\n     };\n }"}, {"sha": "d0752b5f02f06d74f2bd78d98bf8187f164dd7a8", "filename": "src/test/compile-fail/suggest-private-fields.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2dbfa3995e44af6ce4fbeaa2f9de4730e5d2fbd5/src%2Ftest%2Fcompile-fail%2Fsuggest-private-fields.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dbfa3995e44af6ce4fbeaa2f9de4730e5d2fbd5/src%2Ftest%2Fcompile-fail%2Fsuggest-private-fields.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fsuggest-private-fields.rs?ref=2dbfa3995e44af6ce4fbeaa2f9de4730e5d2fbd5", "patch": "@@ -28,7 +28,7 @@ fn main () {\n         bb: 20,\n         //~^ ERROR struct `xc::B` has no field named `bb`\n         //~| NOTE `xc::B` does not have this field\n-        //~| NOTE available fields are: a\n+        //~| NOTE available fields are: `a`\n     };\n     // local crate struct\n     let l = A {"}, {"sha": "124b16f99b1afd50db88ff8525cfd511ce19e786", "filename": "src/test/compile-fail/union/union-fields.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2dbfa3995e44af6ce4fbeaa2f9de4730e5d2fbd5/src%2Ftest%2Fcompile-fail%2Funion%2Funion-fields.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dbfa3995e44af6ce4fbeaa2f9de4730e5d2fbd5/src%2Ftest%2Fcompile-fail%2Funion%2Funion-fields.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funion%2Funion-fields.rs?ref=2dbfa3995e44af6ce4fbeaa2f9de4730e5d2fbd5", "patch": "@@ -20,7 +20,7 @@ fn main() {\n     let u = U { a: 0, b: 1, c: 2 }; //~ ERROR union expressions should have exactly one field\n                                     //~^ ERROR union `U` has no field named `c`\n                                     //~| NOTE `U` does not have this field\n-                                    //~| NOTE available fields are: a, b\n+                                    //~| NOTE available fields are: `a`, `b`\n     let u = U { ..u }; //~ ERROR union expressions should have exactly one field\n                        //~^ ERROR functional record update syntax requires a struct\n "}, {"sha": "20bb7d4c91de3ac7e8843e8bab643ddd47208072", "filename": "src/test/ui/did_you_mean/issue-36798_unknown_field.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2dbfa3995e44af6ce4fbeaa2f9de4730e5d2fbd5/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-36798_unknown_field.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2dbfa3995e44af6ce4fbeaa2f9de4730e5d2fbd5/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-36798_unknown_field.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-36798_unknown_field.stderr?ref=2dbfa3995e44af6ce4fbeaa2f9de4730e5d2fbd5", "patch": "@@ -4,7 +4,7 @@ error[E0609]: no field `zz` on type `Foo`\n 17 |     f.zz;\n    |       ^^ unknown field\n    |\n-   = note: available fields are: bar\n+   = note: available fields are: `bar`\n \n error: aborting due to previous error\n "}, {"sha": "7fe9950801227f1d1509cbcfe976418f92c6808c", "filename": "src/test/ui/did_you_mean/issue-42599_available_fields_note.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2dbfa3995e44af6ce4fbeaa2f9de4730e5d2fbd5/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-42599_available_fields_note.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dbfa3995e44af6ce4fbeaa2f9de4730e5d2fbd5/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-42599_available_fields_note.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-42599_available_fields_note.rs?ref=2dbfa3995e44af6ce4fbeaa2f9de4730e5d2fbd5", "patch": "@@ -14,7 +14,11 @@ mod submodule {\n     pub struct Demo {\n         pub favorite_integer: isize,\n         secret_integer: isize,\n-        pub innocently_misspellable: ()\n+        pub innocently_misspellable: (),\n+        another_field: bool,\n+        yet_another_field: bool,\n+        always_more_fields: bool,\n+        and_ever: bool,\n     }\n \n     impl Demo {\n@@ -34,6 +38,6 @@ fn main() {\n \n     let demo = Demo::default();\n     let innocent_field_misaccess = demo.inocently_mispellable;\n-    // note shouldn't suggest private `secret_integer` field\n+    // note shouldn't suggest private fields\n     let egregious_field_misaccess = demo.egregiously_nonexistent_field;\n }"}, {"sha": "e2bb7fbd9a895b1ee34b56c2275edd0dc554419a", "filename": "src/test/ui/did_you_mean/issue-42599_available_fields_note.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/2dbfa3995e44af6ce4fbeaa2f9de4730e5d2fbd5/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-42599_available_fields_note.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2dbfa3995e44af6ce4fbeaa2f9de4730e5d2fbd5/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-42599_available_fields_note.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-42599_available_fields_note.stderr?ref=2dbfa3995e44af6ce4fbeaa2f9de4730e5d2fbd5", "patch": "@@ -1,30 +1,30 @@\n error[E0560]: struct `submodule::Demo` has no field named `inocently_mispellable`\n-  --> $DIR/issue-42599_available_fields_note.rs:22:39\n+  --> $DIR/issue-42599_available_fields_note.rs:26:39\n    |\n-22 |             Self { secret_integer: 2, inocently_mispellable: () }\n+26 |             Self { secret_integer: 2, inocently_mispellable: () }\n    |                                       ^^^^^^^^^^^^^^^^^^^^^^ field does not exist - did you mean `innocently_misspellable`?\n \n error[E0560]: struct `submodule::Demo` has no field named `egregiously_nonexistent_field`\n-  --> $DIR/issue-42599_available_fields_note.rs:26:39\n+  --> $DIR/issue-42599_available_fields_note.rs:30:39\n    |\n-26 |             Self { secret_integer: 3, egregiously_nonexistent_field: () }\n+30 |             Self { secret_integer: 3, egregiously_nonexistent_field: () }\n    |                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `submodule::Demo` does not have this field\n    |\n-   = note: available fields are: favorite_integer, secret_integer, innocently_misspellable\n+   = note: available fields are: `favorite_integer`, `secret_integer`, `innocently_misspellable`, `another_field`, `yet_another_field` ... and 2 others\n \n error[E0609]: no field `inocently_mispellable` on type `submodule::Demo`\n-  --> $DIR/issue-42599_available_fields_note.rs:36:41\n+  --> $DIR/issue-42599_available_fields_note.rs:40:41\n    |\n-36 |     let innocent_field_misaccess = demo.inocently_mispellable;\n+40 |     let innocent_field_misaccess = demo.inocently_mispellable;\n    |                                         ^^^^^^^^^^^^^^^^^^^^^ did you mean `innocently_misspellable`?\n \n error[E0609]: no field `egregiously_nonexistent_field` on type `submodule::Demo`\n-  --> $DIR/issue-42599_available_fields_note.rs:38:42\n+  --> $DIR/issue-42599_available_fields_note.rs:42:42\n    |\n-38 |     let egregious_field_misaccess = demo.egregiously_nonexistent_field;\n+42 |     let egregious_field_misaccess = demo.egregiously_nonexistent_field;\n    |                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unknown field\n    |\n-   = note: available fields are: favorite_integer, innocently_misspellable\n+   = note: available fields are: `favorite_integer`, `innocently_misspellable`\n \n error: aborting due to 4 previous errors\n "}]}