{"sha": "3991bfbbc212ad4825588bb18ad39344e4b600b7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM5OTFiZmJiYzIxMmFkNDgyNTU4OGJiMThhZDM5MzQ0ZTRiNjAwYjc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-11-20T15:15:53Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-11-20T15:15:53Z"}, "message": "Auto merge of #55663 - varkor:must_use-traits, r=estebank\n\nAllow #[must_use] on traits\n\nAddresses https://github.com/rust-lang/rust/issues/55506, but we'll probably want to add it to some library traits like `Iterator` before the issue is considered fixed. Fixes https://github.com/rust-lang/rust/issues/51560.\n\n`#[must_use]` is already permitted on traits, with no effect, so this seems like a bug fix, but I might be overlooking something. This currently warns for `impl Trait` or `dyn Trait` when the `Trait` is `#[must_use]` (although I don't think the latter is currently possible, so it's simply future-proofed).", "tree": {"sha": "af04391dc28496ca6112c1089bde65b594d08a7b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/af04391dc28496ca6112c1089bde65b594d08a7b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3991bfbbc212ad4825588bb18ad39344e4b600b7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3991bfbbc212ad4825588bb18ad39344e4b600b7", "html_url": "https://github.com/rust-lang/rust/commit/3991bfbbc212ad4825588bb18ad39344e4b600b7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3991bfbbc212ad4825588bb18ad39344e4b600b7/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "15e661328198540e35670138f485bbc06a866464", "url": "https://api.github.com/repos/rust-lang/rust/commits/15e661328198540e35670138f485bbc06a866464", "html_url": "https://github.com/rust-lang/rust/commit/15e661328198540e35670138f485bbc06a866464"}, {"sha": "737dec0ec16b2606380ed73166b82e44be080ab5", "url": "https://api.github.com/repos/rust-lang/rust/commits/737dec0ec16b2606380ed73166b82e44be080ab5", "html_url": "https://github.com/rust-lang/rust/commit/737dec0ec16b2606380ed73166b82e44be080ab5"}], "stats": {"total": 95, "additions": 79, "deletions": 16}, "files": [{"sha": "fab618d9c8ec843b23763a95188db35dca20fba2", "filename": "src/librustc_lint/unused.rs", "status": "modified", "additions": 43, "deletions": 16, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/3991bfbbc212ad4825588bb18ad39344e4b600b7/src%2Flibrustc_lint%2Funused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3991bfbbc212ad4825588bb18ad39344e4b600b7/src%2Flibrustc_lint%2Funused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Funused.rs?ref=3991bfbbc212ad4825588bb18ad39344e4b600b7", "patch": "@@ -60,18 +60,39 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnusedResults {\n         }\n \n         let t = cx.tables.expr_ty(&expr);\n-        // FIXME(varkor): replace with `t.is_unit() || t.conservative_is_uninhabited()`.\n-        let type_permits_no_use = match t.sty {\n-            ty::Tuple(ref tys) if tys.is_empty() => true,\n-            ty::Never => true,\n-            ty::Adt(def, _) => {\n-                if def.variants.is_empty() {\n-                    true\n-                } else {\n-                    check_must_use(cx, def.did, s.span, \"\")\n+        let type_permits_lack_of_use = if t.is_unit()\n+            || cx.tcx.is_ty_uninhabited_from(cx.tcx.hir.get_module_parent(expr.id), t) {\n+            true\n+        } else {\n+            match t.sty {\n+                ty::Adt(def, _) => check_must_use(cx, def.did, s.span, \"\", \"\"),\n+                ty::Opaque(def, _) => {\n+                    let mut must_use = false;\n+                    for (predicate, _) in &cx.tcx.predicates_of(def).predicates {\n+                        if let ty::Predicate::Trait(ref poly_trait_predicate) = predicate {\n+                            let trait_ref = poly_trait_predicate.skip_binder().trait_ref;\n+                            if check_must_use(cx, trait_ref.def_id, s.span, \"implementer of \", \"\") {\n+                                must_use = true;\n+                                break;\n+                            }\n+                        }\n+                    }\n+                    must_use\n+                }\n+                ty::Dynamic(binder, _) => {\n+                    let mut must_use = false;\n+                    for predicate in binder.skip_binder().iter() {\n+                        if let ty::ExistentialPredicate::Trait(ref trait_ref) = predicate {\n+                            if check_must_use(cx, trait_ref.def_id, s.span, \"\", \" trait object\") {\n+                                must_use = true;\n+                                break;\n+                            }\n+                        }\n+                    }\n+                    must_use\n                 }\n+                _ => false,\n             }\n-            _ => false,\n         };\n \n         let mut fn_warned = false;\n@@ -98,8 +119,8 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnusedResults {\n         };\n         if let Some(def) = maybe_def {\n             let def_id = def.def_id();\n-            fn_warned = check_must_use(cx, def_id, s.span, \"return value of \");\n-        } else if type_permits_no_use {\n+            fn_warned = check_must_use(cx, def_id, s.span, \"return value of \", \"\");\n+        } else if type_permits_lack_of_use {\n             // We don't warn about unused unit or uninhabited types.\n             // (See https://github.com/rust-lang/rust/issues/43806 for details.)\n             return;\n@@ -148,15 +169,21 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnusedResults {\n             op_warned = true;\n         }\n \n-        if !(type_permits_no_use || fn_warned || op_warned) {\n+        if !(type_permits_lack_of_use || fn_warned || op_warned) {\n             cx.span_lint(UNUSED_RESULTS, s.span, \"unused result\");\n         }\n \n-        fn check_must_use(cx: &LateContext, def_id: DefId, sp: Span, describe_path: &str) -> bool {\n+        fn check_must_use(\n+            cx: &LateContext,\n+            def_id: DefId,\n+            sp: Span,\n+            descr_pre_path: &str,\n+            descr_post_path: &str,\n+        ) -> bool {\n             for attr in cx.tcx.get_attrs(def_id).iter() {\n                 if attr.check_name(\"must_use\") {\n-                    let msg = format!(\"unused {}`{}` that must be used\",\n-                                          describe_path, cx.tcx.item_path_str(def_id));\n+                    let msg = format!(\"unused {}`{}`{} that must be used\",\n+                        descr_pre_path, cx.tcx.item_path_str(def_id), descr_post_path);\n                     let mut err = cx.struct_span_lint(UNUSED_MUST_USE, sp, &msg);\n                     // check for #[must_use = \"...\"]\n                     if let Some(note) = attr.value_str() {"}, {"sha": "23df4fa6132d3838a411d2af96d8799b769080b9", "filename": "src/test/ui/lint/must_use-trait.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/3991bfbbc212ad4825588bb18ad39344e4b600b7/src%2Ftest%2Fui%2Flint%2Fmust_use-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3991bfbbc212ad4825588bb18ad39344e4b600b7/src%2Ftest%2Fui%2Flint%2Fmust_use-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fmust_use-trait.rs?ref=3991bfbbc212ad4825588bb18ad39344e4b600b7", "patch": "@@ -0,0 +1,22 @@\n+#![deny(unused_must_use)]\n+\n+#[must_use]\n+trait Critical {}\n+\n+trait NotSoCritical {}\n+\n+trait DecidedlyUnimportant {}\n+\n+struct Anon;\n+\n+impl Critical for Anon {}\n+impl NotSoCritical for Anon {}\n+impl DecidedlyUnimportant for Anon {}\n+\n+fn get_critical() -> impl NotSoCritical + Critical + DecidedlyUnimportant {\n+    Anon {}\n+}\n+\n+fn main() {\n+    get_critical(); //~ ERROR unused implementer of `Critical` that must be used\n+}"}, {"sha": "94f5f4f40d2d54a80177a1fa39ceccf062f85a55", "filename": "src/test/ui/lint/must_use-trait.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/3991bfbbc212ad4825588bb18ad39344e4b600b7/src%2Ftest%2Fui%2Flint%2Fmust_use-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3991bfbbc212ad4825588bb18ad39344e4b600b7/src%2Ftest%2Fui%2Flint%2Fmust_use-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fmust_use-trait.stderr?ref=3991bfbbc212ad4825588bb18ad39344e4b600b7", "patch": "@@ -0,0 +1,14 @@\n+error: unused implementer of `Critical` that must be used\n+  --> $DIR/must_use-trait.rs:21:5\n+   |\n+LL |     get_critical(); //~ ERROR unused implementer of `Critical` that must be used\n+   |     ^^^^^^^^^^^^^^^\n+   |\n+note: lint level defined here\n+  --> $DIR/must_use-trait.rs:1:9\n+   |\n+LL | #![deny(unused_must_use)]\n+   |         ^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}]}