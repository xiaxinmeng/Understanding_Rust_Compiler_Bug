{"sha": "955091be8fded08338cb2ad8f0f2eb50e0a3df47", "node_id": "C_kwDOAAsO6NoAKDk1NTA5MWJlOGZkZWQwODMzOGNiMmFkOGYwZjJlYjUwZTBhM2RmNDc", "commit": {"author": {"name": "Yuki Okushi", "email": "jtitor@2k36.org", "date": "2022-07-29T22:39:49Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-07-29T22:39:49Z"}, "message": "Rollup merge of #99518 - dingxiangfei2009:let-else-additional-tests, r=oli-obk\n\nLet-else: break out scopes when a let-else pattern fails to match\n\nThis PR will commit to a new behavior so that values from initializer expressions are dropped earlier when a let-else pattern fails to match.\n\nFix #98672.\nClose #93951.\ncc `@camsteffen` `@est31`", "tree": {"sha": "49f04f071fec9c88308dbca02d05f491ad436246", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/49f04f071fec9c88308dbca02d05f491ad436246"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/955091be8fded08338cb2ad8f0f2eb50e0a3df47", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJi5GG2CRBK7hj4Ov3rIwAAgzYIAI97Ld68vtGO1WMKArqcRtxq\naCzVZRUGnG3ELgqdpteR7N7NVk485s9MHB91cRbY+6qpA9yFIaKWM7TGp2SYHr1S\naMwyWd5f3z9tzNcqOrn/U+HCkwERHvs1yIs94AoRIKxGOJvWvPLZLkD5oklWMnRi\nURfgVeOcoj0vWHWcD4Bd4kGNEFr2MPMXKL9X25AdTLyeATTM4cKa3HjLVNphZhZY\nOeQKnlOAHs4zAlqzNqQBPaQjHzcQNMA1FJxwC1sqvznvh2osgY/jZnGk8Uqi/rDM\nwS4KeTeoiIuT3Q/4cbQalYZBNbfj14GqIr1qCLD/1yCRrDDj2lYIwJvCwziJAuk=\n=WWku\n-----END PGP SIGNATURE-----\n", "payload": "tree 49f04f071fec9c88308dbca02d05f491ad436246\nparent 36ab4ec2dc1795ed1d700d80437963c049ed551a\nparent 60be2de8b7b8a1c4eee7e065b8cef38ea629a6a3\nauthor Yuki Okushi <jtitor@2k36.org> 1659134389 +0900\ncommitter GitHub <noreply@github.com> 1659134389 +0900\n\nRollup merge of #99518 - dingxiangfei2009:let-else-additional-tests, r=oli-obk\n\nLet-else: break out scopes when a let-else pattern fails to match\n\nThis PR will commit to a new behavior so that values from initializer expressions are dropped earlier when a let-else pattern fails to match.\n\nFix #98672.\nClose #93951.\ncc `@camsteffen` `@est31`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/955091be8fded08338cb2ad8f0f2eb50e0a3df47", "html_url": "https://github.com/rust-lang/rust/commit/955091be8fded08338cb2ad8f0f2eb50e0a3df47", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/955091be8fded08338cb2ad8f0f2eb50e0a3df47/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "36ab4ec2dc1795ed1d700d80437963c049ed551a", "url": "https://api.github.com/repos/rust-lang/rust/commits/36ab4ec2dc1795ed1d700d80437963c049ed551a", "html_url": "https://github.com/rust-lang/rust/commit/36ab4ec2dc1795ed1d700d80437963c049ed551a"}, {"sha": "60be2de8b7b8a1c4eee7e065b8cef38ea629a6a3", "url": "https://api.github.com/repos/rust-lang/rust/commits/60be2de8b7b8a1c4eee7e065b8cef38ea629a6a3", "html_url": "https://github.com/rust-lang/rust/commit/60be2de8b7b8a1c4eee7e065b8cef38ea629a6a3"}], "stats": {"total": 180, "additions": 138, "deletions": 42}, "files": [{"sha": "6875600129a8ff211d41f4015954c647026bf15a", "filename": "compiler/rustc_mir_build/src/build/block.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/955091be8fded08338cb2ad8f0f2eb50e0a3df47/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/955091be8fded08338cb2ad8f0f2eb50e0a3df47/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fblock.rs?ref=955091be8fded08338cb2ad8f0f2eb50e0a3df47", "patch": "@@ -132,6 +132,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                                                 initializer_span,\n                                                 else_block,\n                                                 visibility_scope,\n+                                                *remainder_scope,\n                                                 remainder_span,\n                                                 pattern,\n                                             )"}, {"sha": "58b1564cc5d8ce3d600e1e5be4d57ffa6af65e7f", "filename": "compiler/rustc_mir_build/src/build/matches/mod.rs", "status": "modified", "additions": 46, "deletions": 40, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/955091be8fded08338cb2ad8f0f2eb50e0a3df47/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/955091be8fded08338cb2ad8f0f2eb50e0a3df47/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs?ref=955091be8fded08338cb2ad8f0f2eb50e0a3df47", "patch": "@@ -2282,49 +2282,55 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         initializer_span: Span,\n         else_block: &Block,\n         visibility_scope: Option<SourceScope>,\n+        remainder_scope: region::Scope,\n         remainder_span: Span,\n         pattern: &Pat<'tcx>,\n     ) -> BlockAnd<()> {\n-        let scrutinee = unpack!(block = self.lower_scrutinee(block, init, initializer_span));\n-        let pat = Pat { ty: init.ty, span: else_block.span, kind: Box::new(PatKind::Wild) };\n-        let mut wildcard = Candidate::new(scrutinee.clone(), &pat, false);\n-        self.declare_bindings(\n-            visibility_scope,\n-            remainder_span,\n-            pattern,\n-            ArmHasGuard(false),\n-            Some((None, initializer_span)),\n-        );\n-        let mut candidate = Candidate::new(scrutinee.clone(), pattern, false);\n-        let fake_borrow_temps = self.lower_match_tree(\n-            block,\n-            initializer_span,\n-            pattern.span,\n-            false,\n-            &mut [&mut candidate, &mut wildcard],\n-        );\n-        // This block is for the matching case\n-        let matching = self.bind_pattern(\n-            self.source_info(pattern.span),\n-            candidate,\n-            None,\n-            &fake_borrow_temps,\n-            initializer_span,\n-            None,\n-            None,\n-            None,\n-        );\n-        // This block is for the failure case\n-        let failure = self.bind_pattern(\n-            self.source_info(else_block.span),\n-            wildcard,\n-            None,\n-            &fake_borrow_temps,\n-            initializer_span,\n-            None,\n-            None,\n-            None,\n-        );\n+        let (matching, failure) = self.in_if_then_scope(remainder_scope, |this| {\n+            let scrutinee = unpack!(block = this.lower_scrutinee(block, init, initializer_span));\n+            let pat = Pat { ty: init.ty, span: else_block.span, kind: Box::new(PatKind::Wild) };\n+            let mut wildcard = Candidate::new(scrutinee.clone(), &pat, false);\n+            this.declare_bindings(\n+                visibility_scope,\n+                remainder_span,\n+                pattern,\n+                ArmHasGuard(false),\n+                Some((None, initializer_span)),\n+            );\n+            let mut candidate = Candidate::new(scrutinee.clone(), pattern, false);\n+            let fake_borrow_temps = this.lower_match_tree(\n+                block,\n+                initializer_span,\n+                pattern.span,\n+                false,\n+                &mut [&mut candidate, &mut wildcard],\n+            );\n+            // This block is for the matching case\n+            let matching = this.bind_pattern(\n+                this.source_info(pattern.span),\n+                candidate,\n+                None,\n+                &fake_borrow_temps,\n+                initializer_span,\n+                None,\n+                None,\n+                None,\n+            );\n+            // This block is for the failure case\n+            let failure = this.bind_pattern(\n+                this.source_info(else_block.span),\n+                wildcard,\n+                None,\n+                &fake_borrow_temps,\n+                initializer_span,\n+                None,\n+                None,\n+                None,\n+            );\n+            this.break_for_else(failure, remainder_scope, this.source_info(initializer_span));\n+            matching.unit()\n+        });\n+\n         // This place is not really used because this destination place\n         // should never be used to take values at the end of the failure\n         // block."}, {"sha": "b2fd9f25bdde7964a692ae7aa5127ff29a5b9508", "filename": "compiler/rustc_mir_build/src/build/scope.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/955091be8fded08338cb2ad8f0f2eb50e0a3df47/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/955091be8fded08338cb2ad8f0f2eb50e0a3df47/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fscope.rs?ref=955091be8fded08338cb2ad8f0f2eb50e0a3df47", "patch": "@@ -690,7 +690,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         }\n         drops.add_entry(block, drop_idx);\n \n-        // `build_drop_tree` doesn't have access to our source_info, so we\n+        // `build_drop_trees` doesn't have access to our source_info, so we\n         // create a dummy terminator now. `TerminatorKind::Resume` is used\n         // because MIR type checking will panic if it hasn't been overwritten.\n         self.cfg.terminate(block, source_info, TerminatorKind::Resume);\n@@ -722,7 +722,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         }\n         drops.add_entry(block, drop_idx);\n \n-        // `build_drop_tree` doesn't have access to our source_info, so we\n+        // `build_drop_trees` doesn't have access to our source_info, so we\n         // create a dummy terminator now. `TerminatorKind::Resume` is used\n         // because MIR type checking will panic if it hasn't been overwritten.\n         self.cfg.terminate(block, source_info, TerminatorKind::Resume);"}, {"sha": "3910d35e77676b7391c4057569fe531c011db54f", "filename": "src/test/ui/let-else/let-else-temp-borrowck.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/955091be8fded08338cb2ad8f0f2eb50e0a3df47/src%2Ftest%2Fui%2Flet-else%2Flet-else-temp-borrowck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/955091be8fded08338cb2ad8f0f2eb50e0a3df47/src%2Ftest%2Fui%2Flet-else%2Flet-else-temp-borrowck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flet-else%2Flet-else-temp-borrowck.rs?ref=955091be8fded08338cb2ad8f0f2eb50e0a3df47", "patch": "@@ -0,0 +1,26 @@\n+// run-pass\n+//\n+// from issue #93951, where borrowck complained the temporary that `foo(&x)` was stored in was to\n+// be dropped sometime after `x` was. It then suggested adding a semicolon that was already there.\n+\n+#![feature(let_else)]\n+use std::fmt::Debug;\n+\n+fn foo<'a>(x: &'a str) -> Result<impl Debug + 'a, ()> {\n+    Ok(x)\n+}\n+\n+fn let_else() {\n+    let x = String::from(\"Hey\");\n+    let Ok(_) = foo(&x) else { return };\n+}\n+\n+fn if_let() {\n+    let x = String::from(\"Hey\");\n+    let _ = if let Ok(s) = foo(&x) { s } else { return };\n+}\n+\n+fn main() {\n+    let_else();\n+    if_let();\n+}"}, {"sha": "9c86901b97f034ef2020dd6c348772f5d40a7f96", "filename": "src/test/ui/let-else/let-else-temporary-lifetime.rs", "status": "modified", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/955091be8fded08338cb2ad8f0f2eb50e0a3df47/src%2Ftest%2Fui%2Flet-else%2Flet-else-temporary-lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/955091be8fded08338cb2ad8f0f2eb50e0a3df47/src%2Ftest%2Fui%2Flet-else%2Flet-else-temporary-lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flet-else%2Flet-else-temporary-lifetime.rs?ref=955091be8fded08338cb2ad8f0f2eb50e0a3df47", "patch": "@@ -1,6 +1,8 @@\n // run-pass\n #![feature(let_else)]\n \n+use std::fmt::Display;\n+use std::rc::Rc;\n use std::sync::atomic::{AtomicU8, Ordering};\n \n static TRACKER: AtomicU8 = AtomicU8::new(0);\n@@ -17,9 +19,70 @@ impl Drop for Droppy {\n     }\n }\n \n+fn foo<'a>(x: &'a str) -> Result<impl Display + 'a, ()> {\n+    Ok(x)\n+}\n+\n fn main() {\n     assert_eq!(TRACKER.load(Ordering::Acquire), 0);\n     let 0 = Droppy::default().inner else { return };\n     assert_eq!(TRACKER.load(Ordering::Acquire), 1);\n     println!(\"Should have dropped \ud83d\udc46\");\n+\n+    {\n+        // cf. https://github.com/rust-lang/rust/pull/99518#issuecomment-1191520030\n+        struct Foo<'a>(&'a mut u32);\n+\n+        impl<'a> Drop for Foo<'a> {\n+            fn drop(&mut self) {\n+                *self.0 = 0;\n+            }\n+        }\n+        let mut foo = 0;\n+        let Foo(0) = Foo(&mut foo) else {\n+            *&mut foo = 1;\n+            todo!()\n+        };\n+    }\n+    {\n+        let x = String::from(\"Hey\");\n+\n+        let Ok(s) = foo(&x) else { panic!() };\n+        assert_eq!(s.to_string(), x);\n+    }\n+    {\n+        // test let-else drops temps after statement\n+        let rc = Rc::new(0);\n+        let 0 = *rc.clone() else { unreachable!() };\n+        Rc::try_unwrap(rc).unwrap();\n+    }\n+    {\n+        let mut rc = Rc::new(0);\n+        let mut i = 0;\n+        loop {\n+            if i > 3 {\n+                break;\n+            }\n+            let 1 = *rc.clone() else {\n+                if let Ok(v) = Rc::try_unwrap(rc) {\n+                    rc = Rc::new(v);\n+                } else {\n+                    panic!()\n+                }\n+                i += 1;\n+                continue\n+            };\n+        }\n+    }\n+    {\n+        // test let-else drops temps before else block\n+        // NOTE: this test has to be the last block in the `main`\n+        // body.\n+        let rc = Rc::new(0);\n+        let 1 = *rc.clone() else {\n+            Rc::try_unwrap(rc).unwrap();\n+            return;\n+        };\n+        unreachable!();\n+    }\n }"}]}