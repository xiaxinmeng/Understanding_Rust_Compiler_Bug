{"sha": "31a52852009958c58828ebf174cfd609503602e1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMxYTUyODUyMDA5OTU4YzU4ODI4ZWJmMTc0Y2ZkNjA5NTAzNjAyZTE=", "commit": {"author": {"name": "Corey Richardson", "email": "corey@octayn.net", "date": "2015-03-30T03:41:54Z"}, "committer": {"name": "Corey Richardson", "email": "corey@octayn.net", "date": "2015-03-30T22:16:25Z"}, "message": "lint: handle private traits better\n\nDue to a long-standing conservative approach to trait exports, all traits are\nconsidered exported. However, the missing_docs lint uses the export map to\ndetermine if something is public and ought to have documentation. This commit\nmodifies the lint to check if traits are private before emitting the warning.\n\nCloses #11592", "tree": {"sha": "61bbe31c37e01973e5d68b5ab5aaebddc422480b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/61bbe31c37e01973e5d68b5ab5aaebddc422480b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/31a52852009958c58828ebf174cfd609503602e1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/31a52852009958c58828ebf174cfd609503602e1", "html_url": "https://github.com/rust-lang/rust/commit/31a52852009958c58828ebf174cfd609503602e1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/31a52852009958c58828ebf174cfd609503602e1/comments", "author": {"login": "emberian", "id": 704250, "node_id": "MDQ6VXNlcjcwNDI1MA==", "avatar_url": "https://avatars.githubusercontent.com/u/704250?v=4", "gravatar_id": "", "url": "https://api.github.com/users/emberian", "html_url": "https://github.com/emberian", "followers_url": "https://api.github.com/users/emberian/followers", "following_url": "https://api.github.com/users/emberian/following{/other_user}", "gists_url": "https://api.github.com/users/emberian/gists{/gist_id}", "starred_url": "https://api.github.com/users/emberian/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/emberian/subscriptions", "organizations_url": "https://api.github.com/users/emberian/orgs", "repos_url": "https://api.github.com/users/emberian/repos", "events_url": "https://api.github.com/users/emberian/events{/privacy}", "received_events_url": "https://api.github.com/users/emberian/received_events", "type": "User", "site_admin": false}, "committer": {"login": "emberian", "id": 704250, "node_id": "MDQ6VXNlcjcwNDI1MA==", "avatar_url": "https://avatars.githubusercontent.com/u/704250?v=4", "gravatar_id": "", "url": "https://api.github.com/users/emberian", "html_url": "https://github.com/emberian", "followers_url": "https://api.github.com/users/emberian/followers", "following_url": "https://api.github.com/users/emberian/following{/other_user}", "gists_url": "https://api.github.com/users/emberian/gists{/gist_id}", "starred_url": "https://api.github.com/users/emberian/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/emberian/subscriptions", "organizations_url": "https://api.github.com/users/emberian/orgs", "repos_url": "https://api.github.com/users/emberian/repos", "events_url": "https://api.github.com/users/emberian/events{/privacy}", "received_events_url": "https://api.github.com/users/emberian/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "199bdcfeff5cfafd1f8e8ff583d7209272469879", "url": "https://api.github.com/repos/rust-lang/rust/commits/199bdcfeff5cfafd1f8e8ff583d7209272469879", "html_url": "https://github.com/rust-lang/rust/commit/199bdcfeff5cfafd1f8e8ff583d7209272469879"}], "stats": {"total": 56, "additions": 54, "deletions": 2}, "files": [{"sha": "f79d79968e335140a19888dde47f9a315abbf95f", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 34, "deletions": 2, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/31a52852009958c58828ebf174cfd609503602e1/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31a52852009958c58828ebf174cfd609503602e1/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=31a52852009958c58828ebf174cfd609503602e1", "patch": "@@ -39,7 +39,7 @@ use util::ppaux::{ty_to_string};\n use util::nodemap::{FnvHashMap, NodeSet};\n use lint::{Level, Context, LintPass, LintArray, Lint};\n \n-use std::collections::BitSet;\n+use std::collections::{HashSet, BitSet};\n use std::collections::hash_map::Entry::{Occupied, Vacant};\n use std::num::SignedInt;\n use std::{cmp, slice};\n@@ -1437,6 +1437,9 @@ pub struct MissingDoc {\n     /// Stack of whether #[doc(hidden)] is set\n     /// at each level which has lint attributes.\n     doc_hidden_stack: Vec<bool>,\n+\n+    /// Private traits or trait items that leaked through. Don't check their methods.\n+    private_traits: HashSet<ast::NodeId>,\n }\n \n impl MissingDoc {\n@@ -1445,6 +1448,7 @@ impl MissingDoc {\n             struct_def_stack: vec!(),\n             in_variant: false,\n             doc_hidden_stack: vec!(false),\n+            private_traits: HashSet::new(),\n         }\n     }\n \n@@ -1531,18 +1535,46 @@ impl LintPass for MissingDoc {\n             ast::ItemMod(..) => \"a module\",\n             ast::ItemEnum(..) => \"an enum\",\n             ast::ItemStruct(..) => \"a struct\",\n-            ast::ItemTrait(..) => \"a trait\",\n+            ast::ItemTrait(_, _, _, ref items) => {\n+                // Issue #11592, traits are always considered exported, even when private.\n+                if it.vis == ast::Visibility::Inherited {\n+                    self.private_traits.insert(it.id);\n+                    for itm in items {\n+                        self.private_traits.insert(itm.id);\n+                    }\n+                    return\n+                }\n+                \"a trait\"\n+            },\n             ast::ItemTy(..) => \"a type alias\",\n+            ast::ItemImpl(_, _, _, Some(ref trait_ref), _, ref impl_items) => {\n+                // If the trait is private, add the impl items to private_traits so they don't get\n+                // reported for missing docs.\n+                let real_trait = ty::trait_ref_to_def_id(cx.tcx, trait_ref);\n+                match cx.tcx.map.find(real_trait.node) {\n+                    Some(ast_map::NodeItem(item)) => if item.vis == ast::Visibility::Inherited {\n+                        for itm in impl_items {\n+                            self.private_traits.insert(itm.id);\n+                        }\n+                    },\n+                    _ => { }\n+                }\n+                return\n+            },\n             _ => return\n         };\n+\n         self.check_missing_docs_attrs(cx, Some(it.id), &it.attrs, it.span, desc);\n     }\n \n     fn check_trait_item(&mut self, cx: &Context, trait_item: &ast::TraitItem) {\n+        if self.private_traits.contains(&trait_item.id) { return }\n+\n         let desc = match trait_item.node {\n             ast::MethodTraitItem(..) => \"a trait method\",\n             ast::TypeTraitItem(..) => \"an associated type\"\n         };\n+\n         self.check_missing_docs_attrs(cx, Some(trait_item.id),\n                                       &trait_item.attrs,\n                                       trait_item.span, desc);"}, {"sha": "432e7ff20254f6d68bedc5b45cb0700b7283de08", "filename": "src/test/run-pass/issue-11592.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/31a52852009958c58828ebf174cfd609503602e1/src%2Ftest%2Frun-pass%2Fissue-11592.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31a52852009958c58828ebf174cfd609503602e1/src%2Ftest%2Frun-pass%2Fissue-11592.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-11592.rs?ref=31a52852009958c58828ebf174cfd609503602e1", "patch": "@@ -0,0 +1,20 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+//! Ensure the private trait Bar isn't complained about.\n+\n+#![deny(missing_docs)]\n+\n+mod foo {\n+    trait Bar { fn bar(&self) { } }\n+    impl Bar for i8 { fn bar(&self) { } }\n+}\n+\n+fn main() { }"}]}