{"sha": "74d1a9a26c8a5aa3f2471ee784a2a0d12628c69b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc0ZDFhOWEyNmM4YTVhYTNmMjQ3MWVlNzg0YTJhMGQxMjYyOGM2OWI=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2017-01-31T09:59:38Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2017-01-31T09:59:38Z"}, "message": "more documentation of unintuitive packed struct solution", "tree": {"sha": "b2caa4fd0deddc541d71fa9b7ab98ecb1af15397", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b2caa4fd0deddc541d71fa9b7ab98ecb1af15397"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/74d1a9a26c8a5aa3f2471ee784a2a0d12628c69b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/74d1a9a26c8a5aa3f2471ee784a2a0d12628c69b", "html_url": "https://github.com/rust-lang/rust/commit/74d1a9a26c8a5aa3f2471ee784a2a0d12628c69b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/74d1a9a26c8a5aa3f2471ee784a2a0d12628c69b/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c47c3252526c8c7219c09a9f38915e968caa3d95", "url": "https://api.github.com/repos/rust-lang/rust/commits/c47c3252526c8c7219c09a9f38915e968caa3d95", "html_url": "https://github.com/rust-lang/rust/commit/c47c3252526c8c7219c09a9f38915e968caa3d95"}], "stats": {"total": 1, "additions": 1, "deletions": 0}, "files": [{"sha": "9c4446821672591b1be801ba2e8a918fb266277a", "filename": "src/step.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/74d1a9a26c8a5aa3f2471ee784a2a0d12628c69b/src%2Fstep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74d1a9a26c8a5aa3f2471ee784a2a0d12628c69b/src%2Fstep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstep.rs?ref=74d1a9a26c8a5aa3f2471ee784a2a0d12628c69b", "patch": "@@ -28,6 +28,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n \n     /// Returns true as long as there are more things to do.\n     pub fn step(&mut self) -> EvalResult<'tcx, bool> {\n+        // see docs on the `Memory::packed` field for why we do this\n         self.memory.clear_packed();\n         self.inc_step_counter_and_check_limit(1)?;\n         if self.stack.is_empty() {"}]}