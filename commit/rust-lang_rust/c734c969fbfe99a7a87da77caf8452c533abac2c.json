{"sha": "c734c969fbfe99a7a87da77caf8452c533abac2c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM3MzRjOTY5ZmJmZTk5YTdhODdkYTc3Y2FmODQ1MmM1MzNhYmFjMmM=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-06-11T00:36:23Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-06-11T00:36:23Z"}, "message": "Merge branch 'master' of github.com:graydon/rust", "tree": {"sha": "e93fecc38679bca43e465e31475a94ad14e40afd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e93fecc38679bca43e465e31475a94ad14e40afd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c734c969fbfe99a7a87da77caf8452c533abac2c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c734c969fbfe99a7a87da77caf8452c533abac2c", "html_url": "https://github.com/rust-lang/rust/commit/c734c969fbfe99a7a87da77caf8452c533abac2c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c734c969fbfe99a7a87da77caf8452c533abac2c/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1d1010cac090e1b2d79500e32144a2e87c39e13e", "url": "https://api.github.com/repos/rust-lang/rust/commits/1d1010cac090e1b2d79500e32144a2e87c39e13e", "html_url": "https://github.com/rust-lang/rust/commit/1d1010cac090e1b2d79500e32144a2e87c39e13e"}, {"sha": "f6d7d756993c9dbba9134683397fff600deb3f00", "url": "https://api.github.com/repos/rust-lang/rust/commits/f6d7d756993c9dbba9134683397fff600deb3f00", "html_url": "https://github.com/rust-lang/rust/commit/f6d7d756993c9dbba9134683397fff600deb3f00"}], "stats": {"total": 31, "additions": 20, "deletions": 11}, "files": [{"sha": "466db5c5076638fe1dd8961270265a99c597f75d", "filename": "src/comp/middle/typeck.rs", "status": "modified", "additions": 20, "deletions": 11, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/c734c969fbfe99a7a87da77caf8452c533abac2c/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c734c969fbfe99a7a87da77caf8452c533abac2c/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypeck.rs?ref=c734c969fbfe99a7a87da77caf8452c533abac2c", "patch": "@@ -2287,21 +2287,13 @@ fn check_expr(&@fn_ctxt fcx, &@ast::expr expr) {\n             alt (anon_obj.with_obj) {\n                 case (none) { }\n                 case (some(?e)) {\n-                    // This had better have object type.  TOOD: report an\n+                    // This had better have object type.  TODO: report an\n                     // error if the user is trying to extend a non-object\n                     // with_obj.\n                     check_expr(fcx, e);\n                 }\n             }\n \n-            // Typecheck the methods.\n-            for (@ast::method method in anon_obj.methods) {\n-                check_method(fcx.ccx, method);\n-            }\n-\n-            auto t = next_ty_var(fcx);\n-\n-\n             // FIXME: These next three functions are largely ripped off from\n             // similar ones in collect::.  Is there a better way to do this?\n \n@@ -2328,11 +2320,28 @@ fn check_expr(&@fn_ctxt fcx, &@ast::expr expr) {\n                                                   anon_obj.methods);\n             }\n \n-            auto methods = get_anon_obj_method_types(fcx.ccx, anon_obj);\n+            auto method_types = get_anon_obj_method_types(fcx.ccx, anon_obj);\n             auto ot = ty::mk_obj(fcx.ccx.tcx,\n-                                 ty::sort_methods(methods));\n+                                 ty::sort_methods(method_types));\n             write::ty_only_fixup(fcx, a.id, ot);\n \n+            // Write the methods into the node type table.  (This happens in\n+            // collect::convert for regular objects.)\n+            auto i = 0u;\n+            while (i < vec::len[@ast::method](anon_obj.methods)) {\n+                write::ty_only(fcx.ccx.tcx, anon_obj.methods.(i).node.ann.id,\n+                               ty::method_ty_to_fn_ty(fcx.ccx.tcx,\n+                                                      method_types.(i)));\n+                i += 1u;\n+            }\n+\n+            // Typecheck the methods.\n+            for (@ast::method method in anon_obj.methods) {\n+                check_method(fcx.ccx, method);\n+            }\n+\n+            auto t = next_ty_var(fcx);\n+\n             // Now remove the info from the stack.\n             vec::pop[obj_info](fcx.ccx.obj_infos);\n         }"}]}