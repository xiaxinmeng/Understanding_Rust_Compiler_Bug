{"sha": "39a91ba292af829bc6b678d19f475d91076c3166", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM5YTkxYmEyOTJhZjgyOWJjNmI2NzhkMTlmNDc1ZDkxMDc2YzMxNjY=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2017-08-31T02:11:52Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2017-08-31T02:20:47Z"}, "message": "Fixup warnings and test formatting", "tree": {"sha": "939d7746f8222b80e1285422ce5aee5404c2b37c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/939d7746f8222b80e1285422ce5aee5404c2b37c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/39a91ba292af829bc6b678d19f475d91076c3166", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/39a91ba292af829bc6b678d19f475d91076c3166", "html_url": "https://github.com/rust-lang/rust/commit/39a91ba292af829bc6b678d19f475d91076c3166", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/39a91ba292af829bc6b678d19f475d91076c3166/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6e5c6f5ba3f0da31a40066fe6c40ab22a4453839", "url": "https://api.github.com/repos/rust-lang/rust/commits/6e5c6f5ba3f0da31a40066fe6c40ab22a4453839", "html_url": "https://github.com/rust-lang/rust/commit/6e5c6f5ba3f0da31a40066fe6c40ab22a4453839"}], "stats": {"total": 34, "additions": 20, "deletions": 14}, "files": [{"sha": "ffab5b02f5ad39abed08de844bc68c0c8227c13d", "filename": "src/expr.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/39a91ba292af829bc6b678d19f475d91076c3166/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39a91ba292af829bc6b678d19f475d91076c3166/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=39a91ba292af829bc6b678d19f475d91076c3166", "patch": "@@ -1198,11 +1198,11 @@ impl<'a> ControlFlow<'a> {\n \n         // `for event in event`\n         // Do not include label in the span.\n-        let lo = self.label.map_or(self.span.lo, |label| label.span.hi);\n+        let lo = self.label.map_or(self.span.lo(), |label| label.span.hi());\n         let between_kwd_cond = mk_sp(\n             context\n                 .codemap\n-                .span_after(mk_sp(lo, self.span.hi), self.keyword.trim()),\n+                .span_after(mk_sp(lo, self.span.hi()), self.keyword.trim()),\n             self.pat\n                 .map_or(cond_span.lo(), |p| if self.matcher.is_empty() {\n                     p.span.lo()\n@@ -1611,11 +1611,14 @@ fn rewrite_match_arm(\n             ));\n         }\n         (\n-            mk_sp(arm.attrs[arm.attrs.len() - 1].span.hi(), arm.pats[0].span.lo()),\n+            mk_sp(\n+                arm.attrs[arm.attrs.len() - 1].span.hi(),\n+                arm.pats[0].span.lo(),\n+            ),\n             try_opt!(arm.attrs.rewrite(context, shape)),\n         )\n     } else {\n-        (mk_sp(arm.span().lo, arm.span().lo), String::new())\n+        (mk_sp(arm.span().lo(), arm.span().lo()), String::new())\n     };\n     let pats_str = try_opt!(\n         rewrite_match_pattern(context, &arm.pats, &arm.guard, shape).and_then(|pats_str| {"}, {"sha": "67d547498286b3e61048b8ca9281c8950321fcc0", "filename": "src/items.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/39a91ba292af829bc6b678d19f475d91076c3166/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39a91ba292af829bc6b678d19f475d91076c3166/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=39a91ba292af829bc6b678d19f475d91076c3166", "patch": "@@ -67,7 +67,10 @@ impl Rewrite for ast::Local {\n                 context,\n                 &attrs_str,\n                 \"let \",\n-                mk_sp(self.attrs.last().map(|a| a.span.hi).unwrap(), self.span.lo),\n+                mk_sp(\n+                    self.attrs.last().map(|a| a.span.hi()).unwrap(),\n+                    self.span.lo(),\n+                ),\n                 shape,\n                 false,\n             ))\n@@ -556,7 +559,7 @@ pub fn format_impl(\n         if generics.where_clause.predicates.is_empty() {\n             if let Some(hi) = where_span_end {\n                 match recover_missing_comment_in_span(\n-                    mk_sp(self_ty.span.hi, hi),\n+                    mk_sp(self_ty.span.hi(), hi),\n                     Shape::indented(offset, context.config),\n                     context,\n                     last_line_width(&result),\n@@ -965,7 +968,7 @@ pub fn format_trait(context: &RewriteContext, item: &ast::Item, offset: Indent)\n             if let Some(lo) = item_snippet.chars().position(|c| c == '/') {\n                 // 1 = `{`\n                 let comment_hi = body_lo - BytePos(1);\n-                let comment_lo = item.span.lo + BytePos(lo as u32);\n+                let comment_lo = item.span.lo() + BytePos(lo as u32);\n                 if comment_lo < comment_hi {\n                     match recover_missing_comment_in_span(\n                         mk_sp(comment_lo, comment_hi),"}, {"sha": "8152973af43d47accfc6f5ffba29c17437fe003a", "filename": "src/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/39a91ba292af829bc6b678d19f475d91076c3166/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39a91ba292af829bc6b678d19f475d91076c3166/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=39a91ba292af829bc6b678d19f475d91076c3166", "patch": "@@ -118,8 +118,8 @@ implement_spanned!(ast::Local);\n impl Spanned for ast::Stmt {\n     fn span(&self) -> Span {\n         match self.node {\n-            ast::StmtKind::Local(ref local) => mk_sp(local.span().lo, self.span.hi),\n-            ast::StmtKind::Item(ref item) => mk_sp(item.span().lo, self.span.hi),\n+            ast::StmtKind::Local(ref local) => mk_sp(local.span().lo(), self.span.hi()),\n+            ast::StmtKind::Item(ref item) => mk_sp(item.span().lo(), self.span.hi()),\n             ast::StmtKind::Expr(ref expr) | ast::StmtKind::Semi(ref expr) => {\n                 mk_sp(expr.span().lo(), self.span.hi())\n             }\n@@ -128,7 +128,7 @@ impl Spanned for ast::Stmt {\n                 if attrs.is_empty() {\n                     self.span\n                 } else {\n-                    mk_sp(attrs[0].span.lo, self.span.hi)\n+                    mk_sp(attrs[0].span.lo(), self.span.hi())\n                 }\n             }\n         }"}, {"sha": "f31ebdb9033f1406cc22f9b294f7bdd1d95a90a7", "filename": "src/visitor.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/39a91ba292af829bc6b678d19f475d91076c3166/src%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39a91ba292af829bc6b678d19f475d91076c3166/src%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvisitor.rs?ref=39a91ba292af829bc6b678d19f475d91076c3166", "patch": "@@ -197,7 +197,7 @@ impl<'a> FmtVisitor<'a> {\n \n         let mut unindent_comment = self.is_if_else_block && !b.stmts.is_empty();\n         if unindent_comment {\n-            let end_pos = source!(self, b.span).hi - brace_compensation - remove_len;\n+            let end_pos = source!(self, b.span).hi() - brace_compensation - remove_len;\n             let snippet = self.snippet(mk_sp(self.last_pos, end_pos));\n             unindent_comment = snippet.contains(\"//\") || snippet.contains(\"/*\");\n         }\n@@ -352,7 +352,7 @@ impl<'a> FmtVisitor<'a> {\n                 self.format_import(&item.vis, vp, item.span, &item.attrs);\n             }\n             ast::ItemKind::Impl(..) => {\n-                self.format_missing_with_indent(source!(self, item.span).lo);\n+                self.format_missing_with_indent(source!(self, item.span).lo());\n                 let snippet = self.snippet(item.span);\n                 let where_span_end = snippet\n                     .find_uncommented(\"{\")\n@@ -667,7 +667,7 @@ impl<'a> FmtVisitor<'a> {\n         }\n \n         let rewrite = attrs.rewrite(&self.get_context(), self.shape());\n-        let span = mk_sp(attrs[0].span.lo, attrs[attrs.len() - 1].span.hi);\n+        let span = mk_sp(attrs[0].span.lo(), attrs[attrs.len() - 1].span.hi());\n         self.push_rewrite(span, rewrite);\n \n         false\n@@ -943,7 +943,7 @@ impl<'a> Rewrite for [ast::Attribute] {\n                 };\n \n                 let comment = try_opt!(recover_missing_comment_in_span(\n-                    mk_sp(self[i - 1].span.hi, a.span.lo),\n+                    mk_sp(self[i - 1].span.hi(), a.span.lo()),\n                     shape.with_max_width(context.config),\n                     context,\n                     0,"}]}