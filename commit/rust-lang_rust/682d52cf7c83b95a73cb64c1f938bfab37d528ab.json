{"sha": "682d52cf7c83b95a73cb64c1f938bfab37d528ab", "node_id": "C_kwDOAAsO6NoAKDY4MmQ1MmNmN2M4M2I5NWE3M2NiNjRjMWY5MzhiZmFiMzdkNTI4YWI", "commit": {"author": {"name": "unexge", "email": "unexge@gmail.com", "date": "2023-02-24T00:18:59Z"}, "committer": {"name": "unexge", "email": "unexge@gmail.com", "date": "2023-03-08T08:51:52Z"}, "message": "Update assertion macro parsing logic for Rust 1.52 changes\n\nCo-authored-by: Weihang Lo <me@weihanglo.tw>", "tree": {"sha": "9b45df2d860335687a74c7e890e4040ac6f33fed", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9b45df2d860335687a74c7e890e4040ac6f33fed"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/682d52cf7c83b95a73cb64c1f938bfab37d528ab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/682d52cf7c83b95a73cb64c1f938bfab37d528ab", "html_url": "https://github.com/rust-lang/rust/commit/682d52cf7c83b95a73cb64c1f938bfab37d528ab", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/682d52cf7c83b95a73cb64c1f938bfab37d528ab/comments", "author": {"login": "unexge", "id": 16212576, "node_id": "MDQ6VXNlcjE2MjEyNTc2", "avatar_url": "https://avatars.githubusercontent.com/u/16212576?v=4", "gravatar_id": "", "url": "https://api.github.com/users/unexge", "html_url": "https://github.com/unexge", "followers_url": "https://api.github.com/users/unexge/followers", "following_url": "https://api.github.com/users/unexge/following{/other_user}", "gists_url": "https://api.github.com/users/unexge/gists{/gist_id}", "starred_url": "https://api.github.com/users/unexge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/unexge/subscriptions", "organizations_url": "https://api.github.com/users/unexge/orgs", "repos_url": "https://api.github.com/users/unexge/repos", "events_url": "https://api.github.com/users/unexge/events{/privacy}", "received_events_url": "https://api.github.com/users/unexge/received_events", "type": "User", "site_admin": false}, "committer": {"login": "unexge", "id": 16212576, "node_id": "MDQ6VXNlcjE2MjEyNTc2", "avatar_url": "https://avatars.githubusercontent.com/u/16212576?v=4", "gravatar_id": "", "url": "https://api.github.com/users/unexge", "html_url": "https://github.com/unexge", "followers_url": "https://api.github.com/users/unexge/followers", "following_url": "https://api.github.com/users/unexge/following{/other_user}", "gists_url": "https://api.github.com/users/unexge/gists{/gist_id}", "starred_url": "https://api.github.com/users/unexge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/unexge/subscriptions", "organizations_url": "https://api.github.com/users/unexge/orgs", "repos_url": "https://api.github.com/users/unexge/repos", "events_url": "https://api.github.com/users/unexge/events{/privacy}", "received_events_url": "https://api.github.com/users/unexge/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e7065efc764316dae08376ca2edbb8617c425911", "url": "https://api.github.com/repos/rust-lang/rust/commits/e7065efc764316dae08376ca2edbb8617c425911", "html_url": "https://github.com/rust-lang/rust/commit/e7065efc764316dae08376ca2edbb8617c425911"}], "stats": {"total": 42, "additions": 32, "deletions": 10}, "files": [{"sha": "16a5ee766456d4fea02a0457d935dc1e8a18fc33", "filename": "clippy_utils/src/macros.rs", "status": "modified", "additions": 32, "deletions": 10, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/682d52cf7c83b95a73cb64c1f938bfab37d528ab/clippy_utils%2Fsrc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/682d52cf7c83b95a73cb64c1f938bfab37d528ab/clippy_utils%2Fsrc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fmacros.rs?ref=682d52cf7c83b95a73cb64c1f938bfab37d528ab", "patch": "@@ -213,6 +213,7 @@ pub fn is_assert_macro(cx: &LateContext<'_>, def_id: DefId) -> bool {\n     matches!(name, sym::assert_macro | sym::debug_assert_macro)\n }\n \n+#[derive(Debug)]\n pub enum PanicExpn<'a> {\n     /// No arguments - `panic!()`\n     Empty,\n@@ -226,10 +227,7 @@ pub enum PanicExpn<'a> {\n \n impl<'a> PanicExpn<'a> {\n     pub fn parse(cx: &LateContext<'_>, expr: &'a Expr<'a>) -> Option<Self> {\n-        if !macro_backtrace(expr.span).any(|macro_call| is_panic(cx, macro_call.def_id)) {\n-            return None;\n-        }\n-        let ExprKind::Call(callee, [arg]) = &expr.kind else { return None };\n+        let ExprKind::Call(callee, [arg, rest @ ..]) = &expr.kind else { return None };\n         let ExprKind::Path(QPath::Resolved(_, path)) = &callee.kind else { return None };\n         let result = match path.segments.last().unwrap().ident.as_str() {\n             \"panic\" if arg.span.ctxt() == expr.span.ctxt() => Self::Empty,\n@@ -239,6 +237,21 @@ impl<'a> PanicExpn<'a> {\n                 Self::Display(e)\n             },\n             \"panic_fmt\" => Self::Format(FormatArgsExpn::parse(cx, arg)?),\n+            // Since Rust 1.52, `assert_{eq,ne}` macros expand to use:\n+            // `core::panicking::assert_failed(.., left_val, right_val, None | Some(format_args!(..)));`\n+            \"assert_failed\" => {\n+                // It should have 4 arguments in total (we already matched with the first argument,\n+                // so we're just checking for 3)\n+                if rest.len() != 3 {\n+                    return None;\n+                }\n+                // `msg_arg` is either `None` (no custom message) or `Some(format_args!(..))` (custom message)\n+                let msg_arg = &rest[2];\n+                match msg_arg.kind {\n+                    ExprKind::Call(_, [fmt_arg]) => Self::Format(FormatArgsExpn::parse(cx, fmt_arg)?),\n+                    _ => Self::Empty,\n+                }\n+            },\n             _ => return None,\n         };\n         Some(result)\n@@ -251,7 +264,17 @@ pub fn find_assert_args<'a>(\n     expr: &'a Expr<'a>,\n     expn: ExpnId,\n ) -> Option<(&'a Expr<'a>, PanicExpn<'a>)> {\n-    find_assert_args_inner(cx, expr, expn).map(|([e], p)| (e, p))\n+    find_assert_args_inner(cx, expr, expn).map(|([e], mut p)| {\n+        // `assert!(..)` expands to `core::panicking::panic(\"assertion failed: ...\")` (which we map to\n+        // `PanicExpn::Str(..)`) and `assert!(.., \"..\")` expands to\n+        // `core::panicking::panic_fmt(format_args!(\"..\"))` (which we map to `PanicExpn::Format(..)`).\n+        // So even we got `PanicExpn::Str(..)` that means there is no custom message provided\n+        if let PanicExpn::Str(_) = p {\n+            p = PanicExpn::Empty;\n+        }\n+\n+        (e, p)\n+    })\n }\n \n /// Finds the arguments of an `assert_eq!` or `debug_assert_eq!` macro call within the macro\n@@ -275,13 +298,12 @@ fn find_assert_args_inner<'a, const N: usize>(\n         Some(inner_name) => find_assert_within_debug_assert(cx, expr, expn, Symbol::intern(inner_name))?,\n     };\n     let mut args = ArrayVec::new();\n-    let mut panic_expn = None;\n-    let _: Option<!> = for_each_expr(expr, |e| {\n+    let panic_expn = for_each_expr(expr, |e| {\n         if args.is_full() {\n-            if panic_expn.is_none() && e.span.ctxt() != expr.span.ctxt() {\n-                panic_expn = PanicExpn::parse(cx, e);\n+            match PanicExpn::parse(cx, e) {\n+                Some(expn) => ControlFlow::Break(expn),\n+                None => ControlFlow::Continue(Descend::Yes),\n             }\n-            ControlFlow::Continue(Descend::from(panic_expn.is_none()))\n         } else if is_assert_arg(cx, e, expn) {\n             args.push(e);\n             ControlFlow::Continue(Descend::No)"}]}