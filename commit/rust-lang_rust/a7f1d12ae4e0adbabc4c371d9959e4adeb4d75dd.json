{"sha": "a7f1d12ae4e0adbabc4c371d9959e4adeb4d75dd", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE3ZjFkMTJhZTRlMGFkYmFiYzRjMzcxZDk5NTllNGFkZWI0ZDc1ZGQ=", "commit": {"author": {"name": "Ruud van Asseldonk", "email": "ruuda@google.com", "date": "2016-01-27T21:38:01Z"}, "committer": {"name": "Ruud van Asseldonk", "email": "ruuda@google.com", "date": "2016-01-28T21:15:42Z"}, "message": "Avoid ICE if environment variable is not set\n\nRustdoc could trigger a code path that relied on the\n$CFG_COMPILER_HOST_TRIPLE environment variable being\nset, causing an ICE if it was not. This fixes that,\nemitting an error instead of crashing.", "tree": {"sha": "b03427413df90abc1ceaf04bba6adb9075aa85b6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b03427413df90abc1ceaf04bba6adb9075aa85b6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a7f1d12ae4e0adbabc4c371d9959e4adeb4d75dd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a7f1d12ae4e0adbabc4c371d9959e4adeb4d75dd", "html_url": "https://github.com/rust-lang/rust/commit/a7f1d12ae4e0adbabc4c371d9959e4adeb4d75dd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a7f1d12ae4e0adbabc4c371d9959e4adeb4d75dd/comments", "author": {"login": "ruuda", "id": 506953, "node_id": "MDQ6VXNlcjUwNjk1Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/506953?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ruuda", "html_url": "https://github.com/ruuda", "followers_url": "https://api.github.com/users/ruuda/followers", "following_url": "https://api.github.com/users/ruuda/following{/other_user}", "gists_url": "https://api.github.com/users/ruuda/gists{/gist_id}", "starred_url": "https://api.github.com/users/ruuda/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ruuda/subscriptions", "organizations_url": "https://api.github.com/users/ruuda/orgs", "repos_url": "https://api.github.com/users/ruuda/repos", "events_url": "https://api.github.com/users/ruuda/events{/privacy}", "received_events_url": "https://api.github.com/users/ruuda/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ruuda", "id": 506953, "node_id": "MDQ6VXNlcjUwNjk1Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/506953?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ruuda", "html_url": "https://github.com/ruuda", "followers_url": "https://api.github.com/users/ruuda/followers", "following_url": "https://api.github.com/users/ruuda/following{/other_user}", "gists_url": "https://api.github.com/users/ruuda/gists{/gist_id}", "starred_url": "https://api.github.com/users/ruuda/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ruuda/subscriptions", "organizations_url": "https://api.github.com/users/ruuda/orgs", "repos_url": "https://api.github.com/users/ruuda/repos", "events_url": "https://api.github.com/users/ruuda/events{/privacy}", "received_events_url": "https://api.github.com/users/ruuda/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b8b18aac12214d7135a083e2e6946aa197185d49", "url": "https://api.github.com/repos/rust-lang/rust/commits/b8b18aac12214d7135a083e2e6946aa197185d49", "html_url": "https://github.com/rust-lang/rust/commit/b8b18aac12214d7135a083e2e6946aa197185d49"}], "stats": {"total": 32, "additions": 18, "deletions": 14}, "files": [{"sha": "6e389e83591ea2a6f0dadcce7d7ed71dca619b8f", "filename": "src/libsyntax/diagnostics/plugin.rs", "status": "modified", "additions": 18, "deletions": 14, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/a7f1d12ae4e0adbabc4c371d9959e4adeb4d75dd/src%2Flibsyntax%2Fdiagnostics%2Fplugin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7f1d12ae4e0adbabc4c371d9959e4adeb4d75dd/src%2Flibsyntax%2Fdiagnostics%2Fplugin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fdiagnostics%2Fplugin.rs?ref=a7f1d12ae4e0adbabc4c371d9959e4adeb4d75dd", "patch": "@@ -168,20 +168,24 @@ pub fn expand_build_diagnostic_array<'cx>(ecx: &'cx mut ExtCtxt,\n     };\n \n     // Output error metadata to `tmp/extended-errors/<target arch>/<crate name>.json`\n-    let target_triple = env::var(\"CFG_COMPILER_HOST_TRIPLE\")\n-        .ok().expect(\"unable to determine target arch from $CFG_COMPILER_HOST_TRIPLE\");\n-\n-    with_registered_diagnostics(|diagnostics| {\n-        if let Err(e) = output_metadata(ecx,\n-                                        &target_triple,\n-                                        &crate_name.name.as_str(),\n-                                        &diagnostics) {\n-            ecx.span_bug(span, &format!(\n-                \"error writing metadata for triple `{}` and crate `{}`, error: {}, cause: {:?}\",\n-                target_triple, crate_name, e.description(), e.cause()\n-            ));\n-        }\n-    });\n+    if let Ok(target_triple) = env::var(\"CFG_COMPILER_HOST_TRIPLE\") {\n+        with_registered_diagnostics(|diagnostics| {\n+            if let Err(e) = output_metadata(ecx,\n+                                            &target_triple,\n+                                            &crate_name.name.as_str(),\n+                                            &diagnostics) {\n+                ecx.span_bug(span, &format!(\n+                    \"error writing metadata for triple `{}` and crate `{}`, error: {}, \\\n+                     cause: {:?}\",\n+                    target_triple, crate_name, e.description(), e.cause()\n+                ));\n+            }\n+        });\n+    } else {\n+        ecx.span_err(span, &format!(\n+            \"failed to write metadata for crate `{}` because $CFG_COMPILER_HOST_TRIPLE is not set\",\n+            crate_name));\n+    }\n \n     // Construct the output expression.\n     let (count, expr) ="}]}