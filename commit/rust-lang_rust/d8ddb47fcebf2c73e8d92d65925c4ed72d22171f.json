{"sha": "d8ddb47fcebf2c73e8d92d65925c4ed72d22171f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ4ZGRiNDdmY2ViZjJjNzNlOGQ5MmQ2NTkyNWM0ZWQ3MmQyMjE3MWY=", "commit": {"author": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2018-12-19T15:26:46Z"}, "committer": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2018-12-19T15:48:31Z"}, "message": "Allow testing pointers for inboundedness while forbidding dangling pointers", "tree": {"sha": "14a2f964e88e95e5167712bd9e1cb0f9d0f10ad8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/14a2f964e88e95e5167712bd9e1cb0f9d0f10ad8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d8ddb47fcebf2c73e8d92d65925c4ed72d22171f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d8ddb47fcebf2c73e8d92d65925c4ed72d22171f", "html_url": "https://github.com/rust-lang/rust/commit/d8ddb47fcebf2c73e8d92d65925c4ed72d22171f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d8ddb47fcebf2c73e8d92d65925c4ed72d22171f/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "74ebf026fe927ffa99d541479454f45791806802", "url": "https://api.github.com/repos/rust-lang/rust/commits/74ebf026fe927ffa99d541479454f45791806802", "html_url": "https://github.com/rust-lang/rust/commit/74ebf026fe927ffa99d541479454f45791806802"}], "stats": {"total": 14, "additions": 6, "deletions": 8}, "files": [{"sha": "de7ad1651c1667b5d781a8e30dd709448f728be6", "filename": "src/librustc_mir/interpret/memory.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d8ddb47fcebf2c73e8d92d65925c4ed72d22171f/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8ddb47fcebf2c73e8d92d65925c4ed72d22171f/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs?ref=d8ddb47fcebf2c73e8d92d65925c4ed72d22171f", "patch": "@@ -262,7 +262,7 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> Memory<'a, 'mir, 'tcx, M> {\n             Scalar::Ptr(ptr) => {\n                 // check this is not NULL -- which we can ensure only if this is in-bounds\n                 // of some (potentially dead) allocation.\n-                let align = self.check_bounds_ptr_maybe_dead(ptr)?;\n+                let align = self.check_bounds_ptr(ptr, InboundsCheck::MaybeDead)?;\n                 (ptr.offset.bytes(), align)\n             }\n             Scalar::Bits { bits, size } => {\n@@ -297,17 +297,15 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> Memory<'a, 'mir, 'tcx, M> {\n     /// Check if the pointer is \"in-bounds\". Notice that a pointer pointing at the end\n     /// of an allocation (i.e., at the first *inaccessible* location) *is* considered\n     /// in-bounds!  This follows C's/LLVM's rules.\n-    /// This function also works for deallocated allocations.\n-    /// Use `.get(ptr.alloc_id)?.check_bounds_ptr(ptr)` if you want to force the allocation\n-    /// to still be live.\n     /// If you want to check bounds before doing a memory access, better first obtain\n     /// an `Allocation` and call `check_bounds`.\n-    pub fn check_bounds_ptr_maybe_dead(\n+    pub fn check_bounds_ptr(\n         &self,\n         ptr: Pointer<M::PointerTag>,\n+        liveness: InboundsCheck,\n     ) -> EvalResult<'tcx, Align> {\n         let (allocation_size, align) = self.get_size_and_align(ptr.alloc_id);\n-        ptr.check_in_alloc(allocation_size, InboundsCheck::MaybeDead)?;\n+        ptr.check_in_alloc(allocation_size, liveness)?;\n         Ok(align)\n     }\n }"}, {"sha": "76f851a958c5997aea9f2172d96898015718a3a4", "filename": "src/librustc_mir/interpret/operand.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d8ddb47fcebf2c73e8d92d65925c4ed72d22171f/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8ddb47fcebf2c73e8d92d65925c4ed72d22171f/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Foperand.rs?ref=d8ddb47fcebf2c73e8d92d65925c4ed72d22171f", "patch": "@@ -17,7 +17,7 @@ use rustc::mir;\n use rustc::ty::layout::{self, Size, LayoutOf, TyLayout, HasDataLayout, IntegerExt, VariantIdx};\n \n use rustc::mir::interpret::{\n-    GlobalId, AllocId,\n+    GlobalId, AllocId, InboundsCheck,\n     ConstValue, Pointer, Scalar,\n     EvalResult, EvalErrorKind,\n };\n@@ -647,7 +647,7 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M>\n                     ScalarMaybeUndef::Scalar(Scalar::Ptr(ptr)) => {\n                         // The niche must be just 0 (which an inbounds pointer value never is)\n                         let ptr_valid = niche_start == 0 && variants_start == variants_end &&\n-                            self.memory.check_bounds_ptr_maybe_dead(ptr).is_ok();\n+                            self.memory.check_bounds_ptr(ptr, InboundsCheck::MaybeDead).is_ok();\n                         if !ptr_valid {\n                             return err!(InvalidDiscriminant(raw_discr.erase_tag()));\n                         }"}]}