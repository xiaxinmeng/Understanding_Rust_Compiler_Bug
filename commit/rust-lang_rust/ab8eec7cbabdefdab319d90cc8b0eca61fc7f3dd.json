{"sha": "ab8eec7cbabdefdab319d90cc8b0eca61fc7f3dd", "node_id": "C_kwDOAAsO6NoAKGFiOGVlYzdjYmFiZGVmZGFiMzE5ZDkwY2M4YjBlY2E2MWZjN2YzZGQ", "commit": {"author": {"name": "Jubilee Young", "email": "workingjubilee@gmail.com", "date": "2021-10-22T01:20:06Z"}, "committer": {"name": "Jubilee Young", "email": "workingjubilee@gmail.com", "date": "2021-10-22T01:20:06Z"}, "message": "Fixup import pathing for core\n\nThis changes simd_swizzle! to a decl_macro to give it a path,\nso it can be imported using a path and not the crate root.\nIt also adds various uses that were missed and adjusts paths.", "tree": {"sha": "846ce8d3671ea56649f341c2b70e435cc1c33194", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/846ce8d3671ea56649f341c2b70e435cc1c33194"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ab8eec7cbabdefdab319d90cc8b0eca61fc7f3dd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ab8eec7cbabdefdab319d90cc8b0eca61fc7f3dd", "html_url": "https://github.com/rust-lang/rust/commit/ab8eec7cbabdefdab319d90cc8b0eca61fc7f3dd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ab8eec7cbabdefdab319d90cc8b0eca61fc7f3dd/comments", "author": {"login": "workingjubilee", "id": 46493976, "node_id": "MDQ6VXNlcjQ2NDkzOTc2", "avatar_url": "https://avatars.githubusercontent.com/u/46493976?v=4", "gravatar_id": "", "url": "https://api.github.com/users/workingjubilee", "html_url": "https://github.com/workingjubilee", "followers_url": "https://api.github.com/users/workingjubilee/followers", "following_url": "https://api.github.com/users/workingjubilee/following{/other_user}", "gists_url": "https://api.github.com/users/workingjubilee/gists{/gist_id}", "starred_url": "https://api.github.com/users/workingjubilee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/workingjubilee/subscriptions", "organizations_url": "https://api.github.com/users/workingjubilee/orgs", "repos_url": "https://api.github.com/users/workingjubilee/repos", "events_url": "https://api.github.com/users/workingjubilee/events{/privacy}", "received_events_url": "https://api.github.com/users/workingjubilee/received_events", "type": "User", "site_admin": false}, "committer": {"login": "workingjubilee", "id": 46493976, "node_id": "MDQ6VXNlcjQ2NDkzOTc2", "avatar_url": "https://avatars.githubusercontent.com/u/46493976?v=4", "gravatar_id": "", "url": "https://api.github.com/users/workingjubilee", "html_url": "https://github.com/workingjubilee", "followers_url": "https://api.github.com/users/workingjubilee/followers", "following_url": "https://api.github.com/users/workingjubilee/following{/other_user}", "gists_url": "https://api.github.com/users/workingjubilee/gists{/gist_id}", "starred_url": "https://api.github.com/users/workingjubilee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/workingjubilee/subscriptions", "organizations_url": "https://api.github.com/users/workingjubilee/orgs", "repos_url": "https://api.github.com/users/workingjubilee/repos", "events_url": "https://api.github.com/users/workingjubilee/events{/privacy}", "received_events_url": "https://api.github.com/users/workingjubilee/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5b4282edcd01089df26e2e2c268c4dc1c361dd91", "url": "https://api.github.com/repos/rust-lang/rust/commits/5b4282edcd01089df26e2e2c268c4dc1c361dd91", "html_url": "https://github.com/rust-lang/rust/commit/5b4282edcd01089df26e2e2c268c4dc1c361dd91"}], "stats": {"total": 34, "additions": 19, "deletions": 15}, "files": [{"sha": "fcee1b96ae1201ae7304bcc4c8a76021903a957e", "filename": "crates/core_simd/examples/matrix_inversion.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ab8eec7cbabdefdab319d90cc8b0eca61fc7f3dd/crates%2Fcore_simd%2Fexamples%2Fmatrix_inversion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab8eec7cbabdefdab319d90cc8b0eca61fc7f3dd/crates%2Fcore_simd%2Fexamples%2Fmatrix_inversion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fexamples%2Fmatrix_inversion.rs?ref=ab8eec7cbabdefdab319d90cc8b0eca61fc7f3dd", "patch": "@@ -2,8 +2,8 @@\n // Code ported from the `packed_simd` crate\n // Run this code with `cargo test --example matrix_inversion`\n #![feature(array_chunks, portable_simd)]\n-use core_simd::Which::*;\n-use core_simd::*;\n+use core_simd::simd::*;\n+use Which::*;\n \n // Gotta define our own 4x4 matrix since Rust doesn't ship multidim arrays yet :^)\n #[derive(Copy, Clone, Debug, PartialEq, PartialOrd)]"}, {"sha": "960a66400839fee40c374fd22686cacba19d0c45", "filename": "crates/core_simd/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab8eec7cbabdefdab319d90cc8b0eca61fc7f3dd/crates%2Fcore_simd%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab8eec7cbabdefdab319d90cc8b0eca61fc7f3dd/crates%2Fcore_simd%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Flib.rs?ref=ab8eec7cbabdefdab319d90cc8b0eca61fc7f3dd", "patch": "@@ -1,7 +1,7 @@\n #![cfg_attr(not(feature = \"std\"), no_std)]\n #![feature(\n     const_fn_trait_bound,\n-    const_panic,\n+    decl_macro,\n     platform_intrinsics,\n     repr_simd,\n     simd_ffi,"}, {"sha": "88e7f3b223eca6b030bc860e61331c846f6f02c8", "filename": "crates/core_simd/src/swizzle.rs", "status": "modified", "additions": 16, "deletions": 12, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/ab8eec7cbabdefdab319d90cc8b0eca61fc7f3dd/crates%2Fcore_simd%2Fsrc%2Fswizzle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab8eec7cbabdefdab319d90cc8b0eca61fc7f3dd/crates%2Fcore_simd%2Fsrc%2Fswizzle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fswizzle.rs?ref=ab8eec7cbabdefdab319d90cc8b0eca61fc7f3dd", "patch": "@@ -1,5 +1,5 @@\n use crate::simd::intrinsics;\n-use crate::{LaneCount, Simd, SimdElement, SupportedLaneCount};\n+use crate::simd::{LaneCount, Simd, SimdElement, SupportedLaneCount};\n \n /// Constructs a new vector by selecting values from the lanes of the source vector or vectors to use.\n ///\n@@ -12,7 +12,8 @@ use crate::{LaneCount, Simd, SimdElement, SupportedLaneCount};\n /// ## One source vector\n /// ```\n /// # #![feature(portable_simd)]\n-/// # use core_simd::{Simd, simd_swizzle};\n+/// # #[cfg(feature = \"std\")] use core_simd::{Simd, simd_swizzle};\n+/// # #[cfg(not(feature = \"std\"))] use core::simd::{Simd, simd_swizzle};\n /// let v = Simd::<f32, 4>::from_array([0., 1., 2., 3.]);\n ///\n /// // Keeping the same size\n@@ -27,7 +28,8 @@ use crate::{LaneCount, Simd, SimdElement, SupportedLaneCount};\n /// ## Two source vectors\n /// ```\n /// # #![feature(portable_simd)]\n-/// # use core_simd::{Simd, simd_swizzle, Which};\n+/// # #[cfg(feature = \"std\")] use core_simd::{Simd, simd_swizzle, Which};\n+/// # #[cfg(not(feature = \"std\"))] use core::simd::{Simd, simd_swizzle, Which};\n /// use Which::*;\n /// let a = Simd::<f32, 4>::from_array([0., 1., 2., 3.]);\n /// let b = Simd::<f32, 4>::from_array([4., 5., 6., 7.]);\n@@ -40,11 +42,11 @@ use crate::{LaneCount, Simd, SimdElement, SupportedLaneCount};\n /// let r = simd_swizzle!(a, b, [First(0), Second(0)]);\n /// assert_eq!(r.to_array(), [0., 4.]);\n /// ```\n-#[macro_export]\n-macro_rules! simd_swizzle {\n-    {\n+#[allow(unused_macros)]\n+pub macro simd_swizzle {\n+    (\n         $vector:expr, $index:expr $(,)?\n-    } => {\n+    ) => {\n         {\n             use $crate::simd::Swizzle;\n             struct Impl;\n@@ -53,10 +55,10 @@ macro_rules! simd_swizzle {\n             }\n             Impl::swizzle($vector)\n         }\n-    };\n-    {\n+    },\n+    (\n         $first:expr, $second:expr, $index:expr $(,)?\n-    } => {\n+    ) => {\n         {\n             use $crate::simd::{Which, Swizzle2};\n             struct Impl;\n@@ -262,7 +264,8 @@ where\n     ///\n     /// ```\n     /// #![feature(portable_simd)]\n-    /// # use core_simd::Simd;\n+    /// # #[cfg(feature = \"std\")] use core_simd::Simd;\n+    /// # #[cfg(not(feature = \"std\"))] use core::simd::Simd;\n     /// let a = Simd::from_array([0, 1, 2, 3]);\n     /// let b = Simd::from_array([4, 5, 6, 7]);\n     /// let (x, y) = a.interleave(b);\n@@ -324,7 +327,8 @@ where\n     ///\n     /// ```\n     /// #![feature(portable_simd)]\n-    /// # use core_simd::Simd;\n+    /// # #[cfg(feature = \"std\")] use core_simd::Simd;\n+    /// # #[cfg(not(feature = \"std\"))] use core::simd::Simd;\n     /// let a = Simd::from_array([0, 4, 1, 5]);\n     /// let b = Simd::from_array([2, 6, 3, 7]);\n     /// let (x, y) = a.deinterleave(b);"}]}