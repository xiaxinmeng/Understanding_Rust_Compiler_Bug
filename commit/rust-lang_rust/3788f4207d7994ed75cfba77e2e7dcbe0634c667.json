{"sha": "3788f4207d7994ed75cfba77e2e7dcbe0634c667", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM3ODhmNDIwN2Q3OTk0ZWQ3NWNmYmE3N2UyZTdkY2JlMDYzNGM2Njc=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-12-19T16:10:53Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-12-20T19:38:12Z"}, "message": "refactor `report_generic_bound_failure` to be usable by NLL code", "tree": {"sha": "821b255256c20b99c28985db6bec08a801076861", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/821b255256c20b99c28985db6bec08a801076861"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3788f4207d7994ed75cfba77e2e7dcbe0634c667", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3788f4207d7994ed75cfba77e2e7dcbe0634c667", "html_url": "https://github.com/rust-lang/rust/commit/3788f4207d7994ed75cfba77e2e7dcbe0634c667", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3788f4207d7994ed75cfba77e2e7dcbe0634c667/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6b39781df6ad149c4fb5cb7d714daf1b7168081f", "url": "https://api.github.com/repos/rust-lang/rust/commits/6b39781df6ad149c4fb5cb7d714daf1b7168081f", "html_url": "https://github.com/rust-lang/rust/commit/6b39781df6ad149c4fb5cb7d714daf1b7168081f"}], "stats": {"total": 35, "additions": 22, "deletions": 13}, "files": [{"sha": "67746dfa330c6c2e6de8d89640d791b18d0deddb", "filename": "src/librustc/infer/error_reporting/mod.rs", "status": "modified", "additions": 22, "deletions": 13, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/3788f4207d7994ed75cfba77e2e7dcbe0634c667/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3788f4207d7994ed75cfba77e2e7dcbe0634c667/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=3788f4207d7994ed75cfba77e2e7dcbe0634c667", "patch": "@@ -304,8 +304,14 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                         self.report_concrete_failure(region_scope_tree, origin, sub, sup).emit();\n                     }\n \n-                    RegionResolutionError::GenericBoundFailure(kind, param_ty, sub) => {\n-                        self.report_generic_bound_failure(region_scope_tree, kind, param_ty, sub);\n+                    RegionResolutionError::GenericBoundFailure(origin, param_ty, sub) => {\n+                        self.report_generic_bound_failure(\n+                            region_scope_tree,\n+                            origin.span(),\n+                            Some(origin),\n+                            param_ty,\n+                            sub,\n+                        );\n                     }\n \n                     RegionResolutionError::SubSupConflict(var_origin,\n@@ -901,11 +907,12 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n               DiagnosticStyledString::highlighted(format!(\"{}\", exp_found.found))))\n     }\n \n-    fn report_generic_bound_failure(&self,\n-                                    region_scope_tree: &region::ScopeTree,\n-                                    origin: SubregionOrigin<'tcx>,\n-                                    bound_kind: GenericKind<'tcx>,\n-                                    sub: Region<'tcx>)\n+    pub fn report_generic_bound_failure(&self,\n+                                        region_scope_tree: &region::ScopeTree,\n+                                        span: Span,\n+                                        origin: Option<SubregionOrigin<'tcx>>,\n+                                        bound_kind: GenericKind<'tcx>,\n+                                        sub: Region<'tcx>)\n     {\n         // Attempt to obtain the span of the parameter so we can\n         // suggest adding an explicit lifetime bound to it.\n@@ -953,9 +960,9 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                 format!(\"the associated type `{}`\", p),\n         };\n \n-        if let SubregionOrigin::CompareImplMethodObligation {\n+        if let Some(SubregionOrigin::CompareImplMethodObligation {\n             span, item_name, impl_item_def_id, trait_item_def_id,\n-        } = origin {\n+        }) = origin {\n             self.report_extra_impl_obligation(span,\n                                               item_name,\n                                               impl_item_def_id,\n@@ -990,7 +997,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n             ty::ReFree(ty::FreeRegion {bound_region: ty::BrNamed(..), ..}) => {\n                 // Does the required lifetime have a nice name we can print?\n                 let mut err = struct_span_err!(self.tcx.sess,\n-                                               origin.span(),\n+                                               span,\n                                                E0309,\n                                                \"{} may not live long enough\",\n                                                labeled_user_string);\n@@ -1001,7 +1008,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n             ty::ReStatic => {\n                 // Does the required lifetime have a nice name we can print?\n                 let mut err = struct_span_err!(self.tcx.sess,\n-                                               origin.span(),\n+                                               span,\n                                                E0310,\n                                                \"{} may not live long enough\",\n                                                labeled_user_string);\n@@ -1012,7 +1019,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n             _ => {\n                 // If not, be less specific.\n                 let mut err = struct_span_err!(self.tcx.sess,\n-                                               origin.span(),\n+                                               span,\n                                                E0311,\n                                                \"{} may not live long enough\",\n                                                labeled_user_string);\n@@ -1028,7 +1035,9 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n             }\n         };\n \n-        self.note_region_origin(&mut err, &origin);\n+        if let Some(origin) = origin {\n+            self.note_region_origin(&mut err, &origin);\n+        }\n         err.emit();\n     }\n "}]}