{"sha": "14b66bb4589569895d35742e995d1d1670b912cc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE0YjY2YmI0NTg5NTY5ODk1ZDM1NzQyZTk5NWQxZDE2NzBiOTEyY2M=", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-06-23T12:56:40Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-06-23T13:13:48Z"}, "message": "Rename 'document_highlight' to 'highlight_related'", "tree": {"sha": "5be61f464a09044ad8d9d2461af9034984150414", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5be61f464a09044ad8d9d2461af9034984150414"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/14b66bb4589569895d35742e995d1d1670b912cc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/14b66bb4589569895d35742e995d1d1670b912cc", "html_url": "https://github.com/rust-lang/rust/commit/14b66bb4589569895d35742e995d1d1670b912cc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/14b66bb4589569895d35742e995d1d1670b912cc/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b26a8ecca142532d0be64ea16de233a92f4893f9", "url": "https://api.github.com/repos/rust-lang/rust/commits/b26a8ecca142532d0be64ea16de233a92f4893f9", "html_url": "https://github.com/rust-lang/rust/commit/b26a8ecca142532d0be64ea16de233a92f4893f9"}], "stats": {"total": 70, "additions": 51, "deletions": 19}, "files": [{"sha": "78e5a9f04e0a2bc9dbf7ef19cde083afffef06c6", "filename": "crates/ide/src/highlight_references.rs", "status": "renamed", "additions": 42, "deletions": 10, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/14b66bb4589569895d35742e995d1d1670b912cc/crates%2Fide%2Fsrc%2Fhighlight_references.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14b66bb4589569895d35742e995d1d1670b912cc/crates%2Fide%2Fsrc%2Fhighlight_references.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fhighlight_references.rs?ref=14b66bb4589569895d35742e995d1d1670b912cc", "patch": "@@ -2,10 +2,15 @@ use hir::Semantics;\n use ide_db::{\n     base_db::FilePosition,\n     defs::Definition,\n+    helpers::pick_best_token,\n     search::{FileReference, ReferenceAccess, SearchScope},\n     RootDatabase,\n };\n-use syntax::{AstNode, TextRange};\n+use syntax::{\n+    AstNode,\n+    SyntaxKind::{ASYNC_KW, AWAIT_KW, QUESTION, RETURN_KW, THIN_ARROW},\n+    SyntaxNode, TextRange,\n+};\n \n use crate::{display::TryToNav, references, NavigationTarget};\n \n@@ -14,32 +19,59 @@ pub struct DocumentHighlight {\n     pub access: Option<ReferenceAccess>,\n }\n \n-// Feature: Document highlight\n+// Feature: Highlight related\n //\n-// Highlights the definition and its all references of the item at the cursor location in the current file.\n-pub(crate) fn document_highlight(\n+// Highlights exit points, yield points or the definition and all references of the item at the cursor location in the current file.\n+pub(crate) fn highlight_related(\n     sema: &Semantics<RootDatabase>,\n     position: FilePosition,\n ) -> Option<Vec<DocumentHighlight>> {\n     let _p = profile::span(\"document_highlight\");\n     let syntax = sema.parse(position.file_id).syntax().clone();\n-    let def = references::find_def(sema, &syntax, position)?;\n-    let usages = def.usages(sema).set_scope(Some(SearchScope::single_file(position.file_id))).all();\n+\n+    let token = pick_best_token(syntax.token_at_offset(position.offset), |kind| match kind {\n+        QUESTION => 2, // prefer `?` when the cursor is sandwiched like `await$0?`\n+        AWAIT_KW | ASYNC_KW | THIN_ARROW | RETURN_KW => 1,\n+        _ => 0,\n+    })?;\n+\n+    match token.kind() {\n+        QUESTION | RETURN_KW | THIN_ARROW => highlight_exit_points(),\n+        AWAIT_KW | ASYNC_KW => highlight_yield_points(),\n+        _ => highlight_references(sema, &syntax, position),\n+    }\n+}\n+\n+fn highlight_exit_points() -> Option<Vec<DocumentHighlight>> {\n+    None\n+}\n+\n+fn highlight_yield_points() -> Option<Vec<DocumentHighlight>> {\n+    None\n+}\n+\n+fn highlight_references(\n+    sema: &Semantics<RootDatabase>,\n+    syntax: &SyntaxNode,\n+    FilePosition { offset, file_id }: FilePosition,\n+) -> Option<Vec<DocumentHighlight>> {\n+    let def = references::find_def(sema, syntax, offset)?;\n+    let usages = def.usages(sema).set_scope(Some(SearchScope::single_file(file_id))).all();\n \n     let declaration = match def {\n         Definition::ModuleDef(hir::ModuleDef::Module(module)) => {\n             Some(NavigationTarget::from_module_to_decl(sema.db, module))\n         }\n         def => def.try_to_nav(sema.db),\n     }\n-    .filter(|decl| decl.file_id == position.file_id)\n+    .filter(|decl| decl.file_id == file_id)\n     .and_then(|decl| {\n         let range = decl.focus_range?;\n-        let access = references::decl_access(&def, &syntax, range);\n+        let access = references::decl_access(&def, syntax, range);\n         Some(DocumentHighlight { range, access })\n     });\n \n-    let file_refs = usages.references.get(&position.file_id).map_or(&[][..], Vec::as_slice);\n+    let file_refs = usages.references.get(&file_id).map_or(&[][..], Vec::as_slice);\n     let mut res = Vec::with_capacity(file_refs.len() + 1);\n     res.extend(declaration);\n     res.extend(\n@@ -58,7 +90,7 @@ mod tests {\n \n     fn check(ra_fixture: &str) {\n         let (analysis, pos, annotations) = fixture::annotations(ra_fixture);\n-        let hls = analysis.highlight_document(pos).unwrap().unwrap();\n+        let hls = analysis.highlight_related(pos).unwrap().unwrap();\n \n         let mut expected = annotations\n             .into_iter()", "previous_filename": "crates/ide/src/document_highlight.rs"}, {"sha": "5e3420c0461b3ad08e3cba35a2c5f02072d6442c", "filename": "crates/ide/src/lib.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/14b66bb4589569895d35742e995d1d1670b912cc/crates%2Fide%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14b66bb4589569895d35742e995d1d1670b912cc/crates%2Fide%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Flib.rs?ref=14b66bb4589569895d35742e995d1d1670b912cc", "patch": "@@ -25,7 +25,7 @@ mod display;\n mod annotations;\n mod call_hierarchy;\n mod doc_links;\n-mod document_highlight;\n+mod highlight_references;\n mod expand_macro;\n mod extend_selection;\n mod file_structure;\n@@ -73,10 +73,10 @@ pub use crate::{\n     annotations::{Annotation, AnnotationConfig, AnnotationKind},\n     call_hierarchy::CallItem,\n     display::navigation_target::NavigationTarget,\n-    document_highlight::DocumentHighlight,\n     expand_macro::ExpandedMacro,\n     file_structure::{StructureNode, StructureNodeKind},\n     folding_ranges::{Fold, FoldKind},\n+    highlight_references::DocumentHighlight,\n     hover::{HoverAction, HoverConfig, HoverDocFormat, HoverGotoTypeData, HoverResult},\n     inlay_hints::{InlayHint, InlayHintsConfig, InlayKind},\n     markup::Markup,\n@@ -486,11 +486,11 @@ impl Analysis {\n     }\n \n     /// Computes all ranges to highlight for a given item in a file.\n-    pub fn highlight_document(\n+    pub fn highlight_related(\n         &self,\n         position: FilePosition,\n     ) -> Cancellable<Option<Vec<DocumentHighlight>>> {\n-        self.with_db(|db| document_highlight::document_highlight(&Semantics::new(db), position))\n+        self.with_db(|db| highlight_references::highlight_related(&Semantics::new(db), position))\n     }\n \n     /// Computes syntax highlighting for the given file range."}, {"sha": "c0ede0b88121d207610bf15527e8bbd765785908", "filename": "crates/ide/src/references.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/14b66bb4589569895d35742e995d1d1670b912cc/crates%2Fide%2Fsrc%2Freferences.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14b66bb4589569895d35742e995d1d1670b912cc/crates%2Fide%2Fsrc%2Freferences.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Freferences.rs?ref=14b66bb4589569895d35742e995d1d1670b912cc", "patch": "@@ -20,7 +20,7 @@ use rustc_hash::FxHashMap;\n use syntax::{\n     algo::find_node_at_offset,\n     ast::{self, NameOwner},\n-    match_ast, AstNode, SyntaxNode, TextRange, T,\n+    match_ast, AstNode, SyntaxNode, TextRange, TextSize, T,\n };\n \n use crate::{display::TryToNav, FilePosition, NavigationTarget};\n@@ -60,7 +60,7 @@ pub(crate) fn find_all_refs(\n         if let Some(name) = get_name_of_item_declaration(&syntax, position) {\n             (NameClass::classify(sema, &name)?.referenced_or_defined(sema.db), true)\n         } else {\n-            (find_def(sema, &syntax, position)?, false)\n+            (find_def(sema, &syntax, position.offset)?, false)\n         };\n \n     let mut usages = def.usages(sema).set_scope(search_scope).include_self_refs().all();\n@@ -113,9 +113,9 @@ pub(crate) fn find_all_refs(\n pub(crate) fn find_def(\n     sema: &Semantics<RootDatabase>,\n     syntax: &SyntaxNode,\n-    position: FilePosition,\n+    offset: TextSize,\n ) -> Option<Definition> {\n-    let def = match sema.find_node_at_offset_with_descend(syntax, position.offset)? {\n+    let def = match sema.find_node_at_offset_with_descend(syntax, offset)? {\n         ast::NameLike::NameRef(name_ref) => {\n             NameRefClass::classify(sema, &name_ref)?.referenced(sema.db)\n         }"}, {"sha": "66f07ec6c4f30fdf0e49375d68d12438121457f6", "filename": "crates/rust-analyzer/src/handlers.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14b66bb4589569895d35742e995d1d1670b912cc/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14b66bb4589569895d35742e995d1d1670b912cc/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs?ref=14b66bb4589569895d35742e995d1d1670b912cc", "patch": "@@ -1168,7 +1168,7 @@ pub(crate) fn handle_document_highlight(\n     let position = from_proto::file_position(&snap, params.text_document_position_params)?;\n     let line_index = snap.file_line_index(position.file_id)?;\n \n-    let refs = match snap.analysis.highlight_document(position)? {\n+    let refs = match snap.analysis.highlight_related(position)? {\n         None => return Ok(None),\n         Some(refs) => refs,\n     };"}]}