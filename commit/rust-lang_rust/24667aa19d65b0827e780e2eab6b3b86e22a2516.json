{"sha": "24667aa19d65b0827e780e2eab6b3b86e22a2516", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI0NjY3YWExOWQ2NWIwODI3ZTc4MGUyZWFiNmIzYjg2ZTIyYTI1MTY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-12-22T04:21:30Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-12-22T04:21:30Z"}, "message": "Auto merge of #56824 - euclio:internal-apis, r=QuietMisdreavus\n\nrustdoc: display rustc_private APIs as \"Internal\"\n\nThis PR updates the display of `rustc_private` APIs to be \"Internal\" instead of \"Experimental\", and changes the colors appropriately. It also updates the copy of the `rustc_private` feature to sound more informative and less like a compiler suggestion.\n\nThe PR additionally contains a significant refactor of the `short_stability` function to remove duplication and fix a few rendering bugs due to extra or missing spaces.\n\nBefore:\n\n![screen shot 2018-12-14 at 11 45 28 am](https://user-images.githubusercontent.com/1372438/50015926-c9768d80-ff95-11e8-9649-5df29df6909b.png)\n\nAfter:\n\n![screen shot 2018-12-14 at 11 45 11 am](https://user-images.githubusercontent.com/1372438/50015934-cf6c6e80-ff95-11e8-912b-74b893f55425.png)", "tree": {"sha": "0ea4e6a2ebff35c4981f2d01b01edd3d2d28ac1c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0ea4e6a2ebff35c4981f2d01b01edd3d2d28ac1c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/24667aa19d65b0827e780e2eab6b3b86e22a2516", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/24667aa19d65b0827e780e2eab6b3b86e22a2516", "html_url": "https://github.com/rust-lang/rust/commit/24667aa19d65b0827e780e2eab6b3b86e22a2516", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/24667aa19d65b0827e780e2eab6b3b86e22a2516/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "abaa9344d4c10a45d7725534145007a8284dabe8", "url": "https://api.github.com/repos/rust-lang/rust/commits/abaa9344d4c10a45d7725534145007a8284dabe8", "html_url": "https://github.com/rust-lang/rust/commit/abaa9344d4c10a45d7725534145007a8284dabe8"}, {"sha": "8d393bf797c378bddc757cf18c59728b180ef2ba", "url": "https://api.github.com/repos/rust-lang/rust/commits/8d393bf797c378bddc757cf18c59728b180ef2ba", "html_url": "https://github.com/rust-lang/rust/commit/8d393bf797c378bddc757cf18c59728b180ef2ba"}], "stats": {"total": 310, "additions": 183, "deletions": 127}, "files": [{"sha": "01ead05999b21ac2aad9fe77251b3faadf769aa7", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 27, "deletions": 21, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/24667aa19d65b0827e780e2eab6b3b86e22a2516/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24667aa19d65b0827e780e2eab6b3b86e22a2516/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=24667aa19d65b0827e780e2eab6b3b86e22a2516", "patch": "@@ -478,7 +478,7 @@ impl Item {\n                 classes.push(\"unstable\");\n             }\n \n-            if !s.deprecated_since.is_empty() {\n+            if s.deprecation.is_some() {\n                 classes.push(\"deprecated\");\n             }\n \n@@ -503,6 +503,15 @@ impl Item {\n     pub fn type_(&self) -> ItemType {\n         ItemType::from(self)\n     }\n+\n+    /// Returns the info in the item's `#[deprecated]` or `#[rustc_deprecated]` attributes.\n+    ///\n+    /// If the item is not deprecated, returns `None`.\n+    pub fn deprecation(&self) -> Option<&Deprecation> {\n+        self.deprecation\n+            .as_ref()\n+            .or_else(|| self.stability.as_ref().and_then(|s| s.deprecation.as_ref()))\n+    }\n }\n \n #[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n@@ -3844,40 +3853,37 @@ impl Clean<Item> for doctree::ProcMacro {\n #[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n pub struct Stability {\n     pub level: stability::StabilityLevel,\n-    pub feature: String,\n+    pub feature: Option<String>,\n     pub since: String,\n-    pub deprecated_since: String,\n-    pub deprecated_reason: String,\n-    pub unstable_reason: String,\n-    pub issue: Option<u32>\n+    pub deprecation: Option<Deprecation>,\n+    pub unstable_reason: Option<String>,\n+    pub issue: Option<u32>,\n }\n \n #[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n pub struct Deprecation {\n-    pub since: String,\n-    pub note: String,\n+    pub since: Option<String>,\n+    pub note: Option<String>,\n }\n \n impl Clean<Stability> for attr::Stability {\n     fn clean(&self, _: &DocContext) -> Stability {\n         Stability {\n             level: stability::StabilityLevel::from_attr_level(&self.level),\n-            feature: self.feature.to_string(),\n+            feature: Some(self.feature.to_string()).filter(|f| !f.is_empty()),\n             since: match self.level {\n                 attr::Stable {ref since} => since.to_string(),\n                 _ => String::new(),\n             },\n-            deprecated_since: match self.rustc_depr {\n-                Some(attr::RustcDeprecation {ref since, ..}) => since.to_string(),\n-                _=> String::new(),\n-            },\n-            deprecated_reason: match self.rustc_depr {\n-                Some(ref depr) => depr.reason.to_string(),\n-                _ => String::new(),\n-            },\n+            deprecation: self.rustc_depr.as_ref().map(|d| {\n+                Deprecation {\n+                    note: Some(d.reason.to_string()).filter(|r| !r.is_empty()),\n+                    since: Some(d.since.to_string()).filter(|d| !d.is_empty()),\n+                }\n+            }),\n             unstable_reason: match self.level {\n-                attr::Unstable { reason: Some(ref reason), .. } => reason.to_string(),\n-                _ => String::new(),\n+                attr::Unstable { reason: Some(ref reason), .. } => Some(reason.to_string()),\n+                _ => None,\n             },\n             issue: match self.level {\n                 attr::Unstable {issue, ..} => Some(issue),\n@@ -3896,8 +3902,8 @@ impl<'a> Clean<Stability> for &'a attr::Stability {\n impl Clean<Deprecation> for attr::Deprecation {\n     fn clean(&self, _: &DocContext) -> Deprecation {\n         Deprecation {\n-            since: self.since.as_ref().map_or(String::new(), |s| s.to_string()),\n-            note: self.note.as_ref().map_or(String::new(), |s| s.to_string()),\n+            since: self.since.map(|s| s.to_string()).filter(|s| !s.is_empty()),\n+            note: self.note.map(|n| n.to_string()).filter(|n| !n.is_empty()),\n         }\n     }\n }"}, {"sha": "2ee4db3a539fb1272d3e787c8a26c85458815772", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 105, "deletions": 95, "changes": 200, "blob_url": "https://github.com/rust-lang/rust/blob/24667aa19d65b0827e780e2eab6b3b86e22a2516/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24667aa19d65b0827e780e2eab6b3b86e22a2516/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=24667aa19d65b0827e780e2eab6b3b86e22a2516", "patch": "@@ -65,7 +65,7 @@ use rustc::hir;\n use rustc::util::nodemap::{FxHashMap, FxHashSet};\n use rustc_data_structures::flock;\n \n-use clean::{self, AttributesExt, GetDefId, SelfTy, Mutability};\n+use clean::{self, AttributesExt, Deprecation, GetDefId, SelfTy, Mutability};\n use config::RenderOptions;\n use doctree;\n use fold::DocFolder;\n@@ -2458,7 +2458,7 @@ fn document_full(w: &mut fmt::Formatter, item: &clean::Item,\n \n fn document_stability(w: &mut fmt::Formatter, cx: &Context, item: &clean::Item,\n                       is_hidden: bool) -> fmt::Result {\n-    let stabilities = short_stability(item, cx, true);\n+    let stabilities = short_stability(item, cx);\n     if !stabilities.is_empty() {\n         write!(w, \"<div class='stability{}'>\", if is_hidden { \" hidden\" } else { \"\" })?;\n         for stability in stabilities {\n@@ -2651,18 +2651,6 @@ fn item_module(w: &mut fmt::Formatter, cx: &Context,\n             _ => {\n                 if myitem.name.is_none() { continue }\n \n-                let stabilities = short_stability(myitem, cx, false);\n-\n-                let stab_docs = if !stabilities.is_empty() {\n-                    stabilities.iter()\n-                               .map(|s| format!(\"[{}]\", s))\n-                               .collect::<Vec<_>>()\n-                               .as_slice()\n-                               .join(\" \")\n-                } else {\n-                    String::new()\n-                };\n-\n                 let unsafety_flag = match myitem.inner {\n                     clean::FunctionItem(ref func) | clean::ForeignFunctionItem(ref func)\n                     if func.header.unsafety == hir::Unsafety::Unsafe => {\n@@ -2683,11 +2671,11 @@ fn item_module(w: &mut fmt::Formatter, cx: &Context,\n                        <tr class='{stab}{add}module-item'>\\\n                            <td><a class=\\\"{class}\\\" href=\\\"{href}\\\" \\\n                                   title='{title}'>{name}</a>{unsafety_flag}</td>\\\n-                           <td class='docblock-short'>{stab_docs}{docs}\\\n+                           <td class='docblock-short'>{stab_tags}{docs}\\\n                            </td>\\\n                        </tr>\",\n                        name = *myitem.name.as_ref().unwrap(),\n-                       stab_docs = stab_docs,\n+                       stab_tags = stability_tags(myitem),\n                        docs = MarkdownSummaryLine(doc_value, &myitem.links()),\n                        class = myitem.type_(),\n                        add = add,\n@@ -2714,101 +2702,123 @@ fn item_module(w: &mut fmt::Formatter, cx: &Context,\n     Ok(())\n }\n \n-fn short_stability(item: &clean::Item, cx: &Context, show_reason: bool) -> Vec<String> {\n+/// Render the stability and deprecation tags that are displayed in the item's summary at the\n+/// module level.\n+fn stability_tags(item: &clean::Item) -> String {\n+    let mut tags = String::new();\n+\n+    // The trailing space after each tag is to space it properly against the rest of the docs.\n+    if item.deprecation().is_some() {\n+        tags.push_str(\"[<div class='stab deprecated'>Deprecated</div>] \");\n+    }\n+\n+    if let Some(stab) = item\n+        .stability\n+        .as_ref()\n+        .filter(|s| s.level == stability::Unstable)\n+    {\n+        if stab.feature.as_ref().map(|s| &**s) == Some(\"rustc_private\") {\n+            tags.push_str(\"[<div class='stab internal'>Internal</div>] \");\n+        } else {\n+            tags.push_str(\"[<div class='stab unstable'>Experimental</div>] \");\n+        }\n+    }\n+\n+    if let Some(ref cfg) = item.attrs.cfg {\n+        tags.push_str(&format!(\n+            \"[<div class='stab portability'>{}</div>] \",\n+            cfg.render_short_html()\n+        ));\n+    }\n+\n+    tags\n+}\n+\n+/// Render the stability and/or deprecation warning that is displayed at the top of the item's\n+/// documentation.\n+fn short_stability(item: &clean::Item, cx: &Context) -> Vec<String> {\n     let mut stability = vec![];\n     let error_codes = ErrorCodes::from(UnstableFeatures::from_environment().is_nightly_build());\n \n-    if let Some(stab) = item.stability.as_ref() {\n-        let deprecated_reason = if show_reason && !stab.deprecated_reason.is_empty() {\n-            format!(\": {}\", stab.deprecated_reason)\n+    if let Some(Deprecation { since, note }) = &item.deprecation() {\n+        let mut message = if let Some(since) = since {\n+            if stability::deprecation_in_effect(since) {\n+                format!(\"Deprecated since {}\", Escape(since))\n+            } else {\n+                format!(\"Deprecating in {}\", Escape(since))\n+            }\n         } else {\n-            String::new()\n+            String::from(\"Deprecated\")\n         };\n-        if !stab.deprecated_since.is_empty() {\n-            let since = if show_reason {\n-                format!(\" since {}\", Escape(&stab.deprecated_since))\n-            } else {\n-                String::new()\n-            };\n+\n+        if let Some(note) = note {\n             let mut ids = cx.id_map.borrow_mut();\n-            let html = MarkdownHtml(&deprecated_reason, RefCell::new(&mut ids), error_codes);\n-            let text = if stability::deprecation_in_effect(&stab.deprecated_since) {\n-                format!(\"Deprecated{}{}\", since, html)\n+            let html = MarkdownHtml(&note, RefCell::new(&mut ids), error_codes);\n+            message.push_str(&format!(\": {}\", html));\n+        }\n+        stability.push(format!(\"<div class='stab deprecated'>{}</div>\", message));\n+    }\n+\n+    if let Some(stab) = item\n+        .stability\n+        .as_ref()\n+        .filter(|stab| stab.level == stability::Unstable)\n+    {\n+        let is_rustc_private = stab.feature.as_ref().map(|s| &**s) == Some(\"rustc_private\");\n+\n+        let mut message = if is_rustc_private {\n+            \"<span class='emoji'>\u2699\ufe0f</span> This is an internal compiler API.\"\n+        } else {\n+            \"<span class='emoji'>\ud83d\udd2c</span> This is a nightly-only experimental API.\"\n+        }\n+        .to_owned();\n+\n+        if let Some(feature) = stab.feature.as_ref() {\n+            let mut feature = format!(\"<code>{}</code>\", Escape(&feature));\n+            if let (Some(url), Some(issue)) = (&cx.shared.issue_tracker_base_url, stab.issue) {\n+                feature.push_str(&format!(\n+                    \"&nbsp;<a href=\\\"{url}{issue}\\\">#{issue}</a>\",\n+                    url = url,\n+                    issue = issue\n+                ));\n+            }\n+\n+            message.push_str(&format!(\" ({})\", feature));\n+        }\n+\n+        if let Some(unstable_reason) = &stab.unstable_reason {\n+            // Provide a more informative message than the compiler help.\n+            let unstable_reason = if is_rustc_private {\n+                \"This crate is being loaded from the sysroot, a permanently unstable location \\\n+                for private compiler dependencies. It is not intended for general use. Prefer \\\n+                using a public version of this crate from \\\n+                [crates.io](https://crates.io) via [`Cargo.toml`]\\\n+                (https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html).\"\n             } else {\n-                format!(\"Deprecating in {}{}\", Escape(&stab.deprecated_since), html)\n+                unstable_reason\n             };\n-            stability.push(format!(\"<div class='stab deprecated'>{}</div>\", text))\n-        };\n \n-        if stab.level == stability::Unstable {\n-            if show_reason {\n-                let unstable_extra = match (!stab.feature.is_empty(),\n-                                            &cx.shared.issue_tracker_base_url,\n-                                            stab.issue) {\n-                    (true, &Some(ref tracker_url), Some(issue_no)) if issue_no > 0 =>\n-                        format!(\" (<code>{} </code><a href=\\\"{}{}\\\">#{}</a>)\",\n-                                Escape(&stab.feature), tracker_url, issue_no, issue_no),\n-                    (false, &Some(ref tracker_url), Some(issue_no)) if issue_no > 0 =>\n-                        format!(\" (<a href=\\\"{}{}\\\">#{}</a>)\", Escape(&tracker_url), issue_no,\n-                                issue_no),\n-                    (true, ..) =>\n-                        format!(\" (<code>{}</code>)\", Escape(&stab.feature)),\n-                    _ => String::new(),\n-                };\n-                if stab.unstable_reason.is_empty() {\n-                    stability.push(format!(\"<div class='stab unstable'>\\\n-                                            <span class=microscope>\ud83d\udd2c</span> \\\n-                                            This is a nightly-only experimental API. {}\\\n-                                            </div>\",\n-                                           unstable_extra));\n-                } else {\n-                    let mut ids = cx.id_map.borrow_mut();\n-                    let text = format!(\"<summary><span class=microscope>\ud83d\udd2c</span> \\\n-                                        This is a nightly-only experimental API. {}\\\n-                                        </summary>{}\",\n-                                       unstable_extra,\n-                                       MarkdownHtml(\n-                                           &stab.unstable_reason,\n-                                           RefCell::new(&mut ids),\n-                                           error_codes));\n-                    stability.push(format!(\"<div class='stab unstable'><details>{}</details></div>\",\n-                                   text));\n-                }\n-            } else {\n-                stability.push(\"<div class='stab unstable'>Experimental</div>\".to_string())\n-            }\n-        };\n-    } else if let Some(depr) = item.deprecation.as_ref() {\n-        let note = if show_reason && !depr.note.is_empty() {\n-            format!(\": {}\", depr.note)\n-        } else {\n-            String::new()\n-        };\n-        let since = if show_reason && !depr.since.is_empty() {\n-            format!(\" since {}\", Escape(&depr.since))\n-        } else {\n-            String::new()\n-        };\n+            let mut ids = cx.id_map.borrow_mut();\n+            message = format!(\n+                \"<details><summary>{}</summary>{}</details>\",\n+                message,\n+                MarkdownHtml(&unstable_reason, RefCell::new(&mut ids), error_codes)\n+            );\n+        }\n \n-        let mut ids = cx.id_map.borrow_mut();\n-        let text = if stability::deprecation_in_effect(&depr.since) {\n-            format!(\"Deprecated{}{}\",\n-                    since,\n-                    MarkdownHtml(&note, RefCell::new(&mut ids), error_codes))\n+        let class = if is_rustc_private {\n+            \"internal\"\n         } else {\n-            format!(\"Deprecating in {}{}\",\n-                    Escape(&depr.since),\n-                    MarkdownHtml(&note, RefCell::new(&mut ids), error_codes))\n+            \"unstable\"\n         };\n-        stability.push(format!(\"<div class='stab deprecated'>{}</div>\", text))\n+        stability.push(format!(\"<div class='stab {}'>{}</div>\", class, message));\n     }\n \n     if let Some(ref cfg) = item.attrs.cfg {\n-        stability.push(format!(\"<div class='stab portability'>{}</div>\", if show_reason {\n+        stability.push(format!(\n+            \"<div class='stab portability'>{}</div>\",\n             cfg.render_long_html()\n-        } else {\n-            cfg.render_short_html()\n-        }));\n+        ));\n     }\n \n     stability"}, {"sha": "3958986e492775f5f7335e92c50370222bdf3b8b", "filename": "src/librustdoc/html/static/rustdoc.css", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/24667aa19d65b0827e780e2eab6b3b86e22a2516/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/24667aa19d65b0827e780e2eab6b3b86e22a2516/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css?ref=24667aa19d65b0827e780e2eab6b3b86e22a2516", "patch": "@@ -769,7 +769,7 @@ body.blur > :not(#help) {\n \tdisplay: list-item;\n }\n \n-.stab .microscope {\n+.stab .emoji {\n \tfont-size: 1.5em;\n }\n "}, {"sha": "be3ffed2b2659f70e8b7933258e0536bcdd21c96", "filename": "src/librustdoc/html/static/themes/dark.css", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/24667aa19d65b0827e780e2eab6b3b86e22a2516/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Fdark.css", "raw_url": "https://github.com/rust-lang/rust/raw/24667aa19d65b0827e780e2eab6b3b86e22a2516/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Fdark.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Fdark.css?ref=24667aa19d65b0827e780e2eab6b3b86e22a2516", "patch": "@@ -174,6 +174,10 @@ a {\n \tcolor: #D2991D;\n }\n \n+.stab.internal a {\n+\tcolor: #304FFE;\n+}\n+\n a.test-arrow {\n \tcolor: #dedede;\n }\n@@ -199,6 +203,7 @@ a.test-arrow {\n }\n \n .stab.unstable { background: #FFF5D6; border-color: #FFC600; color: #404040; }\n+.stab.internal { background: #FFB9B3; border-color: #B71C1C; color: #404040; }\n .stab.deprecated { background: #F3DFFF; border-color: #7F0087;  color: #404040; }\n .stab.portability { background: #C4ECFF; border-color: #7BA5DB;  color: #404040; }\n "}, {"sha": "4ae10492ae6b2a23e55b20567102a62e76f80dd9", "filename": "src/librustdoc/html/static/themes/light.css", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/24667aa19d65b0827e780e2eab6b3b86e22a2516/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Flight.css", "raw_url": "https://github.com/rust-lang/rust/raw/24667aa19d65b0827e780e2eab6b3b86e22a2516/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Flight.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Flight.css?ref=24667aa19d65b0827e780e2eab6b3b86e22a2516", "patch": "@@ -174,6 +174,10 @@ a {\n \tcolor: #3873AD;\n }\n \n+.stab.internal a {\n+\tcolor: #304FFE;\n+}\n+\n a.test-arrow {\n \tcolor: #f5f5f5;\n }\n@@ -200,6 +204,7 @@ a.test-arrow {\n }\n \n .stab.unstable { background: #FFF5D6; border-color: #FFC600; }\n+.stab.internal { background: #FFB9B3; border-color: #B71C1C; }\n .stab.deprecated { background: #F3DFFF; border-color: #7F0087; }\n .stab.portability { background: #C4ECFF; border-color: #7BA5DB; }\n "}, {"sha": "63447ad169002377940202115ba6d429ec2822aa", "filename": "src/test/rustdoc/deprecated.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/24667aa19d65b0827e780e2eab6b3b86e22a2516/src%2Ftest%2Frustdoc%2Fdeprecated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24667aa19d65b0827e780e2eab6b3b86e22a2516/src%2Ftest%2Frustdoc%2Fdeprecated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fdeprecated.rs?ref=24667aa19d65b0827e780e2eab6b3b86e22a2516", "patch": "@@ -10,7 +10,29 @@\n \n #![feature(deprecated)]\n \n+// @matches deprecated/index.html '//*[@class=\"docblock-short\"]' \\\n+//      '^\\[Deprecated\\] Deprecated docs'\n // @has deprecated/struct.S.html '//*[@class=\"stab deprecated\"]' \\\n //      'Deprecated since 1.0.0: text'\n+/// Deprecated docs\n #[deprecated(since = \"1.0.0\", note = \"text\")]\n pub struct S;\n+\n+// @matches deprecated/index.html '//*[@class=\"docblock-short\"]' '^Docs'\n+/// Docs\n+pub struct T;\n+\n+// @matches deprecated/struct.U.html '//*[@class=\"stab deprecated\"]' \\\n+//      'Deprecated since 1.0.0$'\n+#[deprecated(since = \"1.0.0\")]\n+pub struct U;\n+\n+// @matches deprecated/struct.V.html '//*[@class=\"stab deprecated\"]' \\\n+//      'Deprecated: text$'\n+#[deprecated(note = \"text\")]\n+pub struct V;\n+\n+// @matches deprecated/struct.W.html '//*[@class=\"stab deprecated\"]' \\\n+//      'Deprecated$'\n+#[deprecated]\n+pub struct W;"}, {"sha": "ba58da138a8c07c1891a251fab8db29505279af8", "filename": "src/test/rustdoc/internal.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/24667aa19d65b0827e780e2eab6b3b86e22a2516/src%2Ftest%2Frustdoc%2Finternal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24667aa19d65b0827e780e2eab6b3b86e22a2516/src%2Ftest%2Frustdoc%2Finternal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Finternal.rs?ref=24667aa19d65b0827e780e2eab6b3b86e22a2516", "patch": "@@ -0,0 +1,10 @@\n+// compile-flags: -Z force-unstable-if-unmarked\n+\n+// @matches internal/index.html '//*[@class=\"docblock-short\"]' \\\n+//      '^\\[Internal\\] Docs'\n+// @has internal/struct.S.html '//*[@class=\"stab internal\"]' \\\n+//      'This is an internal compiler API. (rustc_private)'\n+/// Docs\n+pub struct S;\n+\n+fn main() {}"}, {"sha": "4723b04a078be75e405bd989305e1c934cabf31c", "filename": "src/test/rustdoc/issue-27759.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/24667aa19d65b0827e780e2eab6b3b86e22a2516/src%2Ftest%2Frustdoc%2Fissue-27759.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24667aa19d65b0827e780e2eab6b3b86e22a2516/src%2Ftest%2Frustdoc%2Fissue-27759.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-27759.rs?ref=24667aa19d65b0827e780e2eab6b3b86e22a2516", "patch": "@@ -14,13 +14,11 @@\n #![unstable(feature=\"test\", issue=\"27759\")]\n \n // @has issue_27759/unstable/index.html\n-// @has - '<code>test </code>'\n-// @has - '<a href=\"http://issue_url/27759\">#27759</a>'\n+// @has - '<code>test</code>&nbsp;<a href=\"http://issue_url/27759\">#27759</a>'\n #[unstable(feature=\"test\", issue=\"27759\")]\n pub mod unstable {\n     // @has issue_27759/unstable/fn.issue.html\n-    // @has - '<code>test_function </code>'\n-    // @has - '<a href=\"http://issue_url/1234567890\">#1234567890</a>'\n-    #[unstable(feature=\"test_function\", issue=\"1234567890\")]\n+    // @has - '<code>test_function</code>&nbsp;<a href=\"http://issue_url/12345\">#12345</a>'\n+    #[unstable(feature=\"test_function\", issue=\"12345\")]\n     pub fn issue() {}\n }"}, {"sha": "34423d0176d2d44403c42aaf657beec5d1a20b07", "filename": "src/test/rustdoc/issue-32374.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/24667aa19d65b0827e780e2eab6b3b86e22a2516/src%2Ftest%2Frustdoc%2Fissue-32374.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24667aa19d65b0827e780e2eab6b3b86e22a2516/src%2Ftest%2Frustdoc%2Fissue-32374.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-32374.rs?ref=24667aa19d65b0827e780e2eab6b3b86e22a2516", "patch": "@@ -13,15 +13,15 @@\n \n #![unstable(feature=\"test\", issue = \"32374\")]\n \n-// @has issue_32374/index.html '//*[@class=\"docblock-short\"]' \\\n-//      '[Deprecated] [Experimental]'\n+// @matches issue_32374/index.html '//*[@class=\"docblock-short\"]' \\\n+//      '^\\[Deprecated\\] \\[Experimental\\] Docs'\n \n // @has issue_32374/struct.T.html '//*[@class=\"stab deprecated\"]' \\\n //      'Deprecated since 1.0.0: text'\n-// @has - '<code>test </code>'\n-// @has - '<a href=\"http://issue_url/32374\">#32374</a>'\n+// @has - '<code>test</code>&nbsp;<a href=\"http://issue_url/32374\">#32374</a>'\n // @matches issue_32374/struct.T.html '//*[@class=\"stab unstable\"]' \\\n-//      '\ud83d\udd2c This is a nightly-only experimental API.  \\(test #32374\\)$'\n+//      '\ud83d\udd2c This is a nightly-only experimental API. \\(test #32374\\)$'\n+/// Docs\n #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n #[unstable(feature = \"test\", issue = \"32374\")]\n pub struct T;"}]}