{"sha": "1bd6e168b24236fdb0b848537861a4b53feb4221", "node_id": "C_kwDOAAsO6NoAKDFiZDZlMTY4YjI0MjM2ZmRiMGI4NDg1Mzc4NjFhNGI1M2ZlYjQyMjE", "commit": {"author": {"name": "Andy Wang", "email": "cbeuw.andy@gmail.com", "date": "2023-05-15T10:05:17Z"}, "committer": {"name": "Andy Wang", "email": "cbeuw.andy@gmail.com", "date": "2023-05-15T10:05:17Z"}, "message": "Address FIXME", "tree": {"sha": "ed0d144a54af47c11364bd1cbc4008e57ddbf23f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ed0d144a54af47c11364bd1cbc4008e57ddbf23f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1bd6e168b24236fdb0b848537861a4b53feb4221", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCAAdFiEE7dcbcBMl24/h63ldGBtJ+fOPM3QFAmRiA90ACgkQGBtJ+fOP\nM3QSowv+MusRlNcaN6QYnsvboSMcsnnJkt4zFDkh9s2/L7S5d2xJr5EYkYMcRvjy\nw3gf3LZUBPm+EYRToyUl1eMEi2ynesRpd49fAZSQbW6RA7pRouRsSLiZlAqpU/c2\nOesrVPMweyzHv9ISsbILDrRs7bgKetviWDMFWAvXGZvqpkaBZWLBuOd8Nfat31Th\ncQ23gfqDBEVCwyHPQh1cdbbLBnqIAAEnPT5kcCZ6/kPqQLEAK2EF+Rg6w2FtyMlW\nFVTNsBcOoV4jWEyVep895Rwh5KKW9RufLV6pVTIQpQXD2oDxKAbBPJT9a8wjZgRw\ncVREjD3scxCLY95wGQFRqzJLFGTv2ZDCQytGr+YgtyTRHSE5oUtE1YzG2hqXUHH9\nTtMsyr2BDbYk+HUAXYacfgKpb/SzV5fB/m0gd931xZfeAKZPIuUv9cXSk/Sim3hL\nb8pgqmasANdmRP8jVT1SGz3hMZzQ16ua5hSodPq/AbONgG1nrhzvWNG01X4j1m3J\nOnvSuY+5\n=5k0I\n-----END PGP SIGNATURE-----", "payload": "tree ed0d144a54af47c11364bd1cbc4008e57ddbf23f\nparent c3ab4f28d37c9577dc401a08a72f82b752d32e53\nauthor Andy Wang <cbeuw.andy@gmail.com> 1684145117 +0200\ncommitter Andy Wang <cbeuw.andy@gmail.com> 1684145117 +0200\n\nAddress FIXME\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1bd6e168b24236fdb0b848537861a4b53feb4221", "html_url": "https://github.com/rust-lang/rust/commit/1bd6e168b24236fdb0b848537861a4b53feb4221", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1bd6e168b24236fdb0b848537861a4b53feb4221/comments", "author": {"login": "cbeuw", "id": 7034308, "node_id": "MDQ6VXNlcjcwMzQzMDg=", "avatar_url": "https://avatars.githubusercontent.com/u/7034308?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cbeuw", "html_url": "https://github.com/cbeuw", "followers_url": "https://api.github.com/users/cbeuw/followers", "following_url": "https://api.github.com/users/cbeuw/following{/other_user}", "gists_url": "https://api.github.com/users/cbeuw/gists{/gist_id}", "starred_url": "https://api.github.com/users/cbeuw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cbeuw/subscriptions", "organizations_url": "https://api.github.com/users/cbeuw/orgs", "repos_url": "https://api.github.com/users/cbeuw/repos", "events_url": "https://api.github.com/users/cbeuw/events{/privacy}", "received_events_url": "https://api.github.com/users/cbeuw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cbeuw", "id": 7034308, "node_id": "MDQ6VXNlcjcwMzQzMDg=", "avatar_url": "https://avatars.githubusercontent.com/u/7034308?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cbeuw", "html_url": "https://github.com/cbeuw", "followers_url": "https://api.github.com/users/cbeuw/followers", "following_url": "https://api.github.com/users/cbeuw/following{/other_user}", "gists_url": "https://api.github.com/users/cbeuw/gists{/gist_id}", "starred_url": "https://api.github.com/users/cbeuw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cbeuw/subscriptions", "organizations_url": "https://api.github.com/users/cbeuw/orgs", "repos_url": "https://api.github.com/users/cbeuw/repos", "events_url": "https://api.github.com/users/cbeuw/events{/privacy}", "received_events_url": "https://api.github.com/users/cbeuw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c3ab4f28d37c9577dc401a08a72f82b752d32e53", "url": "https://api.github.com/repos/rust-lang/rust/commits/c3ab4f28d37c9577dc401a08a72f82b752d32e53", "html_url": "https://github.com/rust-lang/rust/commit/c3ab4f28d37c9577dc401a08a72f82b752d32e53"}], "stats": {"total": 17, "additions": 6, "deletions": 11}, "files": [{"sha": "3c155deae4b701700186533e43d438ad30ef564c", "filename": "tests/mir-opt/building/custom/projections.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1bd6e168b24236fdb0b848537861a4b53feb4221/tests%2Fmir-opt%2Fbuilding%2Fcustom%2Fprojections.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bd6e168b24236fdb0b848537861a4b53feb4221/tests%2Fmir-opt%2Fbuilding%2Fcustom%2Fprojections.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fbuilding%2Fcustom%2Fprojections.rs?ref=1bd6e168b24236fdb0b848537861a4b53feb4221", "patch": "@@ -21,13 +21,10 @@ fn unions(u: U) -> i32 {\n #[custom_mir(dialect = \"analysis\", phase = \"post-cleanup\")]\n fn tuples(i: (u32, i32)) -> (u32, i32) {\n     mir!(\n-        // FIXME(JakobDegen): This is necessary because we can't give type hints for `RET`\n-        let temp: (u32, i32);\n+        type RET = (u32, i32);\n         {\n-            temp.0 = i.0;\n-            temp.1 = i.1;\n-\n-            RET = temp;\n+            RET.0 = i.0;\n+            RET.1 = i.1;\n             Return()\n         }\n     )"}, {"sha": "dec575200c64475bd16c5cc16b7d74f0a1dce0fa", "filename": "tests/mir-opt/building/custom/projections.tuples.built.after.mir", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1bd6e168b24236fdb0b848537861a4b53feb4221/tests%2Fmir-opt%2Fbuilding%2Fcustom%2Fprojections.tuples.built.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/1bd6e168b24236fdb0b848537861a4b53feb4221/tests%2Fmir-opt%2Fbuilding%2Fcustom%2Fprojections.tuples.built.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fbuilding%2Fcustom%2Fprojections.tuples.built.after.mir?ref=1bd6e168b24236fdb0b848537861a4b53feb4221", "patch": "@@ -2,12 +2,10 @@\n \n fn tuples(_1: (u32, i32)) -> (u32, i32) {\n     let mut _0: (u32, i32);              // return place in scope 0 at $DIR/projections.rs:+0:29: +0:39\n-    let mut _2: (u32, i32);              // in scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n \n     bb0: {\n-        (_2.0: u32) = (_1.0: u32);       // scope 0 at $DIR/projections.rs:+5:13: +5:25\n-        (_2.1: i32) = (_1.1: i32);       // scope 0 at $DIR/projections.rs:+6:13: +6:25\n-        _0 = _2;                         // scope 0 at $DIR/projections.rs:+8:13: +8:23\n-        return;                          // scope 0 at $DIR/projections.rs:+9:13: +9:21\n+        (_0.0: u32) = (_1.0: u32);       // scope 0 at $DIR/projections.rs:+4:13: +4:24\n+        (_0.1: i32) = (_1.1: i32);       // scope 0 at $DIR/projections.rs:+5:13: +5:24\n+        return;                          // scope 0 at $DIR/projections.rs:+6:13: +6:21\n     }\n }"}]}