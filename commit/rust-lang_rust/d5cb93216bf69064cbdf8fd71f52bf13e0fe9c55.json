{"sha": "d5cb93216bf69064cbdf8fd71f52bf13e0fe9c55", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ1Y2I5MzIxNmJmNjkwNjRjYmRmOGZkNzFmNTJiZjEzZTBmZTljNTU=", "commit": {"author": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2018-07-01T02:38:30Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-07-01T02:38:30Z"}, "message": "Merge pull request #2822 from topecongiro/issue-2782\n\nAvoid panicking on deeply nested expressions", "tree": {"sha": "1d993d1f5a55a6509c7cc14295abb938c290e132", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1d993d1f5a55a6509c7cc14295abb938c290e132"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d5cb93216bf69064cbdf8fd71f52bf13e0fe9c55", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJbOD6mCRBK7hj4Ov3rIwAAdHIIAFR6xnpppjMakqI6vFN9rNUE\nJN6MayQEjS+hxGBUxD1dhmsw9H56XfhWi8TSZlabCw2D25RPgnhs751SC9zLZ4mw\nSm+MESRp6saFnJDz4+HbDnWAO9fiLk38d1WI91/aEL2QDDs9Wng2iyD0joed95PD\noKBOpRPYkJCz6MPcZv08LU0r9cOXIBFGH/QgPc510ghOvLq8OQ1/mcfHjHn4yrJO\nH778HtqSCOYyWmqdmnCd6YENeqJCcNnxgYqvD06dkkultyEWzX3vX/+8xiThhWVx\n0875H/fCX2cJEdX0yXk1kNm9++QqLJ4aRiG/tZj+mokEZ4i2Km6dvE3txwuUKho=\n=AxoF\n-----END PGP SIGNATURE-----\n", "payload": "tree 1d993d1f5a55a6509c7cc14295abb938c290e132\nparent 41398047bcf720a673af8d7d927f0350e20a2202\nparent ebb162626419fa01c6b885ca74be6d29d22d5b0d\nauthor Nick Cameron <nrc@ncameron.org> 1530412710 +1200\ncommitter GitHub <noreply@github.com> 1530412710 +1200\n\nMerge pull request #2822 from topecongiro/issue-2782\n\nAvoid panicking on deeply nested expressions"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d5cb93216bf69064cbdf8fd71f52bf13e0fe9c55", "html_url": "https://github.com/rust-lang/rust/commit/d5cb93216bf69064cbdf8fd71f52bf13e0fe9c55", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d5cb93216bf69064cbdf8fd71f52bf13e0fe9c55/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "41398047bcf720a673af8d7d927f0350e20a2202", "url": "https://api.github.com/repos/rust-lang/rust/commits/41398047bcf720a673af8d7d927f0350e20a2202", "html_url": "https://github.com/rust-lang/rust/commit/41398047bcf720a673af8d7d927f0350e20a2202"}, {"sha": "ebb162626419fa01c6b885ca74be6d29d22d5b0d", "url": "https://api.github.com/repos/rust-lang/rust/commits/ebb162626419fa01c6b885ca74be6d29d22d5b0d", "html_url": "https://github.com/rust-lang/rust/commit/ebb162626419fa01c6b885ca74be6d29d22d5b0d"}], "stats": {"total": 97, "additions": 72, "deletions": 25}, "files": [{"sha": "201e10d5ccf99c4cd57bc9fad6a6b61173efe33c", "filename": "src/matches.rs", "status": "modified", "additions": 27, "deletions": 13, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/d5cb93216bf69064cbdf8fd71f52bf13e0fe9c55/src%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5cb93216bf69064cbdf8fd71f52bf13e0fe9c55/src%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmatches.rs?ref=d5cb93216bf69064cbdf8fd71f52bf13e0fe9c55", "patch": "@@ -300,28 +300,42 @@ fn rewrite_match_pattern(\n     Some(format!(\"{}{}\", pats_str, guard_str))\n }\n \n+fn block_can_be_flattened<'a>(\n+    context: &RewriteContext,\n+    expr: &'a ast::Expr,\n+) -> Option<&'a ast::Block> {\n+    match expr.node {\n+        ast::ExprKind::Block(ref block, _)\n+            if !is_unsafe_block(block)\n+                && is_simple_block(block, Some(&expr.attrs), context.codemap) =>\n+        {\n+            Some(&*block)\n+        }\n+        _ => None,\n+    }\n+}\n+\n // (extend, body)\n // @extend: true if the arm body can be put next to `=>`\n // @body: flattened body, if the body is block with a single expression\n fn flatten_arm_body<'a>(context: &'a RewriteContext, body: &'a ast::Expr) -> (bool, &'a ast::Expr) {\n-    match body.node {\n-        ast::ExprKind::Block(ref block, _)\n-            if !is_unsafe_block(block)\n-                && is_simple_block(block, Some(&body.attrs), context.codemap) =>\n-        {\n-            if let ast::StmtKind::Expr(ref expr) = block.stmts[0].node {\n-                (\n-                    !context.config.force_multiline_blocks() && can_flatten_block_around_this(expr),\n-                    &*expr,\n-                )\n+    if let Some(ref block) = block_can_be_flattened(context, body) {\n+        if let ast::StmtKind::Expr(ref expr) = block.stmts[0].node {\n+            if let ast::ExprKind::Block(..) = expr.node {\n+                flatten_arm_body(context, expr)\n             } else {\n-                (false, &*body)\n+                let can_extend_expr =\n+                    !context.config.force_multiline_blocks() && can_flatten_block_around_this(expr);\n+                (can_extend_expr, &*expr)\n             }\n+        } else {\n+            (false, &*body)\n         }\n-        _ => (\n+    } else {\n+        (\n             !context.config.force_multiline_blocks() && body.can_be_overflowed(context, 1),\n             &*body,\n-        ),\n+        )\n     }\n }\n "}, {"sha": "8fccf3da735e4e19f8e68e29db2284ed84d02aa5", "filename": "src/overflow.rs", "status": "modified", "additions": 9, "deletions": 12, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/d5cb93216bf69064cbdf8fd71f52bf13e0fe9c55/src%2Foverflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5cb93216bf69064cbdf8fd71f52bf13e0fe9c55/src%2Foverflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Foverflow.rs?ref=d5cb93216bf69064cbdf8fd71f52bf13e0fe9c55", "patch": "@@ -511,21 +511,18 @@ fn shape_from_indent_style(\n     overhead: usize,\n     offset: usize,\n ) -> Shape {\n-    if context.use_block_indent() {\n-        // 1 = \",\"\n-        shape\n+    let (shape, overhead) = if context.use_block_indent() {\n+        let shape = shape\n             .block()\n             .block_indent(context.config.tab_spaces())\n-            .with_max_width(context.config)\n-            .sub_width(1)\n-            .unwrap()\n+            .with_max_width(context.config);\n+        (shape, 1) // 1 = \",\"\n     } else {\n-        let shape = shape.visual_indent(offset);\n-        if let Some(shape) = shape.sub_width(overhead) {\n-            shape\n-        } else {\n-            Shape { width: 0, ..shape }\n-        }\n+        (shape.visual_indent(offset), overhead)\n+    };\n+    Shape {\n+        width: shape.width.saturating_sub(overhead),\n+        ..shape\n     }\n }\n "}, {"sha": "0c4799af3d2afbe6180751c99a8ed49265bc3361", "filename": "tests/source/expr.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d5cb93216bf69064cbdf8fd71f52bf13e0fe9c55/tests%2Fsource%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5cb93216bf69064cbdf8fd71f52bf13e0fe9c55/tests%2Fsource%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fexpr.rs?ref=d5cb93216bf69064cbdf8fd71f52bf13e0fe9c55", "patch": "@@ -435,3 +435,8 @@ fn issue2704() {\n         .filter(|_| true)\n         .collect());\n }\n+\n+// #2782\n+fn issue2782() {\n+    {let f={let f={{match f{F(f,_)=>{{loop{let f={match f{F(f,_)=>{{match f{F(f,_)=>{{loop{let f={let f={match f{'-'=>F(f,()),}};};}}}}}}}};}}}}}};};}\n+}"}, {"sha": "9a529ffeaee2664a0ed41d1c47dae67fabd7ed85", "filename": "tests/target/expr.rs", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/d5cb93216bf69064cbdf8fd71f52bf13e0fe9c55/tests%2Ftarget%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5cb93216bf69064cbdf8fd71f52bf13e0fe9c55/tests%2Ftarget%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fexpr.rs?ref=d5cb93216bf69064cbdf8fd71f52bf13e0fe9c55", "patch": "@@ -476,3 +476,34 @@ fn issue2704() {\n             .collect(),\n     );\n }\n+\n+// #2782\n+fn issue2782() {\n+    {\n+        let f = {\n+            let f = {\n+                {\n+                    match f {\n+                        F(f, _) => loop {\n+                            let f = {\n+                                match f {\n+                                    F(f, _) => match f {\n+                                        F(f, _) => loop {\n+                                            let f = {\n+                                                let f = {\n+                                                    match f {\n+                                                        '-' => F(f, ()),\n+                                                    }\n+                                                };\n+                                            };\n+                                        },\n+                                    },\n+                                }\n+                            };\n+                        },\n+                    }\n+                }\n+            };\n+        };\n+    }\n+}"}]}