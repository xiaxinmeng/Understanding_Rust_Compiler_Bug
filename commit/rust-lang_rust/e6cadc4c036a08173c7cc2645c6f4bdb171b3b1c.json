{"sha": "e6cadc4c036a08173c7cc2645c6f4bdb171b3b1c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU2Y2FkYzRjMDM2YTA4MTczYzdjYzI2NDVjNmY0YmRiMTcxYjNiMWM=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2013-01-25T18:29:25Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2013-01-28T18:01:59Z"}, "message": "remove hacks now that #3148 is fixed\n\nr=brson", "tree": {"sha": "624884c9d30794ebd0024278ec5dec25c939b670", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/624884c9d30794ebd0024278ec5dec25c939b670"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e6cadc4c036a08173c7cc2645c6f4bdb171b3b1c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e6cadc4c036a08173c7cc2645c6f4bdb171b3b1c", "html_url": "https://github.com/rust-lang/rust/commit/e6cadc4c036a08173c7cc2645c6f4bdb171b3b1c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e6cadc4c036a08173c7cc2645c6f4bdb171b3b1c/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2b67d88809d9f6ddc4686ee514cb78200db1d737", "url": "https://api.github.com/repos/rust-lang/rust/commits/2b67d88809d9f6ddc4686ee514cb78200db1d737", "html_url": "https://github.com/rust-lang/rust/commit/2b67d88809d9f6ddc4686ee514cb78200db1d737"}], "stats": {"total": 53, "additions": 8, "deletions": 45}, "files": [{"sha": "86f58edd6c8a88b9d8d8eafac4a83fbf725f9239", "filename": "src/librustc/middle/typeck/check/method.rs", "status": "modified", "additions": 6, "deletions": 24, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/e6cadc4c036a08173c7cc2645c6f4bdb171b3b1c/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6cadc4c036a08173c7cc2645c6f4bdb171b3b1c/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs?ref=e6cadc4c036a08173c7cc2645c6f4bdb171b3b1c", "patch": "@@ -739,18 +739,20 @@ impl LookupContext {\n \n         let tcx = self.tcx();\n         return match ty::get(self_ty).sty {\n-            ty::ty_rptr(self_r, self_mt) if self_mt.mutbl == m_mutbl => {\n-                let region = fresh_region(self, self_r);\n+            ty::ty_rptr(_, self_mt) if self_mt.mutbl == m_mutbl => {\n+                let region = self.infcx().next_region_var(self.expr.span,\n+                                                          self.expr.id);\n                 (ty::mk_rptr(tcx, region, self_mt),\n                  ty::AutoAdjustment {\n                      autoderefs: autoderefs+1,\n                      autoref: Some(ty::AutoRef {kind: AutoPtr,\n                                                 region: region,\n                                                 mutbl: self_mt.mutbl})})\n             }\n-            ty::ty_evec(self_mt, vstore_slice(self_r))\n+            ty::ty_evec(self_mt, vstore_slice(_))\n             if self_mt.mutbl == m_mutbl => {\n-                let region = fresh_region(self, self_r);\n+                let region = self.infcx().next_region_var(self.expr.span,\n+                                                          self.expr.id);\n                 (ty::mk_evec(tcx, self_mt, vstore_slice(region)),\n                  ty::AutoAdjustment {\n                     autoderefs: autoderefs,\n@@ -763,26 +765,6 @@ impl LookupContext {\n                                               autoref: None})\n             }\n         };\n-\n-        fn fresh_region(self: &LookupContext,\n-                        self_r: ty::Region) -> ty::Region {\n-            let region = self.infcx().next_region_var(self.expr.span,\n-                                                      self.expr.id);\n-\n-            // FIXME(#3148)---in principle this dependency should\n-            // be done more generally as part of regionck\n-            match infer::mk_subr(self.infcx(), true, self.expr.span,\n-                                 region, self_r) {\n-                Ok(_) => {}\n-                Err(e) => {\n-                    self.tcx().sess.span_bug(\n-                        self.expr.span,\n-                        fmt!(\"Failed with error: %?\", e));\n-                }\n-            }\n-\n-            return region;\n-        }\n     }\n \n     fn search_for_autosliced_method("}, {"sha": "fac84281f7fe21b936ad42f6f094d466a168889b", "filename": "src/librustc/middle/typeck/infer/coercion.rs", "status": "modified", "additions": 2, "deletions": 21, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/e6cadc4c036a08173c7cc2645c6f4bdb171b3b1c/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6cadc4c036a08173c7cc2645c6f4bdb171b3b1c/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fcoercion.rs?ref=e6cadc4c036a08173c7cc2645c6f4bdb171b3b1c", "patch": "@@ -196,15 +196,7 @@ impl Coerce {\n         let inner_ty = match *sty_a {\n             ty::ty_box(mt_a) => mt_a.ty,\n             ty::ty_uniq(mt_a) => mt_a.ty,\n-            ty::ty_rptr(r_a, mt_a) => {\n-                // Ensure that the pointer we are borrowing from lives\n-                // at least as long as the borrowed result.\n-                //\n-                // FIXME(#3148)---in principle this dependency should\n-                // be done more generally\n-                if_ok!(sub.contraregions(r_a, r_borrow));\n-                mt_a.ty\n-            }\n+            ty::ty_rptr(r_a, mt_a) => mt_a.ty,\n             _ => {\n                 return self.subtype(a, b);\n             }\n@@ -267,18 +259,7 @@ impl Coerce {\n         let sub = Sub(**self);\n         let r_borrow = self.infcx.next_region_var_nb(self.span);\n         let ty_inner = match *sty_a {\n-            ty::ty_evec(mt, vstore_box) => mt.ty,\n-            ty::ty_evec(mt, vstore_uniq) => mt.ty,\n-            ty::ty_evec(mt, vstore_fixed(_)) => mt.ty,\n-            ty::ty_evec(mt, vstore_slice(r_a)) => {\n-                // Ensure that the pointer we are borrowing from lives\n-                // at least as long as the borrowed result.\n-                //\n-                // FIXME(#3148)---in principle this dependency should\n-                // be done more generally\n-                if_ok!(sub.contraregions(r_a, r_borrow));\n-                mt.ty\n-            }\n+            ty::ty_evec(mt, _) => mt.ty,\n             _ => {\n                 return self.subtype(a, b);\n             }"}]}