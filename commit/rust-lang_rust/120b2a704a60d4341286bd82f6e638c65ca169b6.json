{"sha": "120b2a704a60d4341286bd82f6e638c65ca169b6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEyMGIyYTcwNGE2MGQ0MzQxMjg2YmQ4MmY2ZTYzOGM2NWNhMTY5YjY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-02-03T18:01:37Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-02-03T18:01:37Z"}, "message": "Auto merge of #81718 - m-ou-se:rollup-3ftbymt, r=m-ou-se\n\nRollup of 5 pull requests\n\nSuccessful merges:\n\n - #80394 (make const_err a future incompat lint)\n - #81532 (Remove incorrect `delay_span_bug`)\n - #81692 (Update clippy)\n - #81715 (Reduce tab formatting assertions to debug only)\n - #81716 (Fix non-existent-field ICE for generic fields.)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "254339ce4319d192bb0a801668102587787a6d72", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/254339ce4319d192bb0a801668102587787a6d72"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/120b2a704a60d4341286bd82f6e638c65ca169b6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/120b2a704a60d4341286bd82f6e638c65ca169b6", "html_url": "https://github.com/rust-lang/rust/commit/120b2a704a60d4341286bd82f6e638c65ca169b6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/120b2a704a60d4341286bd82f6e638c65ca169b6/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "186f7ae5b04d31d8ccd1746ac63cdf1ab4bc2354", "url": "https://api.github.com/repos/rust-lang/rust/commits/186f7ae5b04d31d8ccd1746ac63cdf1ab4bc2354", "html_url": "https://github.com/rust-lang/rust/commit/186f7ae5b04d31d8ccd1746ac63cdf1ab4bc2354"}, {"sha": "46174188e8d8b6b42debbd0939a95d14b91c514f", "url": "https://api.github.com/repos/rust-lang/rust/commits/46174188e8d8b6b42debbd0939a95d14b91c514f", "html_url": "https://github.com/rust-lang/rust/commit/46174188e8d8b6b42debbd0939a95d14b91c514f"}], "stats": {"total": 1892, "additions": 1497, "deletions": 395}, "files": [{"sha": "ea62e21523028e3223fde03bc4098feb14fbb9f2", "filename": "compiler/rustc_errors/src/emitter.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/120b2a704a60d4341286bd82f6e638c65ca169b6/compiler%2Frustc_errors%2Fsrc%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120b2a704a60d4341286bd82f6e638c65ca169b6/compiler%2Frustc_errors%2Fsrc%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Femitter.rs?ref=120b2a704a60d4341286bd82f6e638c65ca169b6", "patch": "@@ -645,7 +645,7 @@ impl EmitterWriter {\n         margin: Margin,\n     ) {\n         // Tabs are assumed to have been replaced by spaces in calling code.\n-        assert!(!source_string.contains('\\t'));\n+        debug_assert!(!source_string.contains('\\t'));\n         let line_len = source_string.len();\n         // Create the source line we will highlight.\n         let left = margin.left(line_len);"}, {"sha": "ef71ee36ea36c0508e909e88ff4064a205bd0d3d", "filename": "compiler/rustc_errors/src/styled_buffer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/120b2a704a60d4341286bd82f6e638c65ca169b6/compiler%2Frustc_errors%2Fsrc%2Fstyled_buffer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120b2a704a60d4341286bd82f6e638c65ca169b6/compiler%2Frustc_errors%2Fsrc%2Fstyled_buffer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Fstyled_buffer.rs?ref=120b2a704a60d4341286bd82f6e638c65ca169b6", "patch": "@@ -15,7 +15,7 @@ impl StyledBuffer {\n \n     pub fn render(&self) -> Vec<Vec<StyledString>> {\n         // Tabs are assumed to have been replaced by spaces in calling code.\n-        assert!(self.text.iter().all(|r| !r.contains(&'\\t')));\n+        debug_assert!(self.text.iter().all(|r| !r.contains(&'\\t')));\n \n         let mut output: Vec<Vec<StyledString>> = vec![];\n         let mut styled_vec: Vec<StyledString> = vec![];"}, {"sha": "43376003840084a37a3f74f012b08ead2d8e81ae", "filename": "compiler/rustc_lint_defs/src/builtin.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/120b2a704a60d4341286bd82f6e638c65ca169b6/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120b2a704a60d4341286bd82f6e638c65ca169b6/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs?ref=120b2a704a60d4341286bd82f6e638c65ca169b6", "patch": "@@ -255,6 +255,10 @@ declare_lint! {\n     pub CONST_ERR,\n     Deny,\n     \"constant evaluation encountered erroneous expression\",\n+    @future_incompatible = FutureIncompatibleInfo {\n+        reference: \"issue #71800 <https://github.com/rust-lang/rust/issues/71800>\",\n+        edition: None,\n+    };\n     report_in_external_macro\n }\n "}, {"sha": "8e2b0bfd6629e249b165e6e838aea1cff1599e20", "filename": "compiler/rustc_typeck/src/check/check.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/120b2a704a60d4341286bd82f6e638c65ca169b6/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120b2a704a60d4341286bd82f6e638c65ca169b6/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs?ref=120b2a704a60d4341286bd82f6e638c65ca169b6", "patch": "@@ -203,7 +203,6 @@ pub(super) fn check_fn<'a, 'tcx>(\n         // possible cases.\n         fcx.check_expr(&body.value);\n         fcx.require_type_is_sized(declared_ret_ty, decl.output.span(), traits::SizedReturnType);\n-        tcx.sess.delay_span_bug(decl.output.span(), \"`!Sized` return type\");\n     } else {\n         fcx.require_type_is_sized(declared_ret_ty, decl.output.span(), traits::SizedReturnType);\n         fcx.check_return_expr(&body.value);"}, {"sha": "33b1c0bb2c97cb8a50ed6a8a3ef688370d23a5e7", "filename": "compiler/rustc_typeck/src/check/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/120b2a704a60d4341286bd82f6e638c65ca169b6/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120b2a704a60d4341286bd82f6e638c65ca169b6/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs?ref=120b2a704a60d4341286bd82f6e638c65ca169b6", "patch": "@@ -1974,7 +1974,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n             field_path.push(candidate_field.ident.normalize_to_macros_2_0());\n             let field_ty = candidate_field.ty(self.tcx, subst);\n-            if let Some((nested_fields, _)) = self.get_field_candidates(span, &field_ty) {\n+            if let Some((nested_fields, subst)) = self.get_field_candidates(span, &field_ty) {\n                 for field in nested_fields.iter() {\n                     let ident = field.ident.normalize_to_macros_2_0();\n                     if ident == target_field {"}, {"sha": "9ff7e2c569ab95c6ad650af9bd94da258465c0b8", "filename": "src/test/ui/array-slice-vec/array_const_index-0.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftest%2Fui%2Farray-slice-vec%2Farray_const_index-0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftest%2Fui%2Farray-slice-vec%2Farray_const_index-0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Farray-slice-vec%2Farray_const_index-0.rs?ref=120b2a704a60d4341286bd82f6e638c65ca169b6", "patch": "@@ -2,6 +2,7 @@ const A: &'static [i32] = &[];\n const B: i32 = (&A)[1];\n //~^ index out of bounds: the length is 0 but the index is 1\n //~| ERROR any use of this value will cause an error\n+//~| WARN this was previously accepted by the compiler but is being phased out\n \n fn main() {\n     let _ = B;"}, {"sha": "641705e1c68759c79e36737449497935a42469bf", "filename": "src/test/ui/array-slice-vec/array_const_index-0.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftest%2Fui%2Farray-slice-vec%2Farray_const_index-0.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftest%2Fui%2Farray-slice-vec%2Farray_const_index-0.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Farray-slice-vec%2Farray_const_index-0.stderr?ref=120b2a704a60d4341286bd82f6e638c65ca169b6", "patch": "@@ -7,6 +7,8 @@ LL | const B: i32 = (&A)[1];\n    |                index out of bounds: the length is 0 but the index is 1\n    |\n    = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: aborting due to previous error\n "}, {"sha": "f4326189c1917d15bc471788701761ddccc94be1", "filename": "src/test/ui/array-slice-vec/array_const_index-1.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftest%2Fui%2Farray-slice-vec%2Farray_const_index-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftest%2Fui%2Farray-slice-vec%2Farray_const_index-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Farray-slice-vec%2Farray_const_index-1.rs?ref=120b2a704a60d4341286bd82f6e638c65ca169b6", "patch": "@@ -2,6 +2,7 @@ const A: [i32; 0] = [];\n const B: i32 = A[1];\n //~^ index out of bounds: the length is 0 but the index is 1\n //~| ERROR any use of this value will cause an error\n+//~| WARN this was previously accepted by the compiler but is being phased out\n \n fn main() {\n     let _ = B;"}, {"sha": "4d52d38af5e1730e42fb9ab5452d4a59352ee63c", "filename": "src/test/ui/array-slice-vec/array_const_index-1.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftest%2Fui%2Farray-slice-vec%2Farray_const_index-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftest%2Fui%2Farray-slice-vec%2Farray_const_index-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Farray-slice-vec%2Farray_const_index-1.stderr?ref=120b2a704a60d4341286bd82f6e638c65ca169b6", "patch": "@@ -7,6 +7,8 @@ LL | const B: i32 = A[1];\n    |                index out of bounds: the length is 0 but the index is 1\n    |\n    = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: aborting due to previous error\n "}, {"sha": "3936e6a3bc722998dbd6d712008ed94b281f942b", "filename": "src/test/ui/associated-consts/defaults-not-assumed-fail.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftest%2Fui%2Fassociated-consts%2Fdefaults-not-assumed-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftest%2Fui%2Fassociated-consts%2Fdefaults-not-assumed-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-consts%2Fdefaults-not-assumed-fail.rs?ref=120b2a704a60d4341286bd82f6e638c65ca169b6", "patch": "@@ -7,6 +7,7 @@ trait Tr {\n     // `Self::A` must not be assumed to hold inside the trait.\n     const B: u8 = Self::A + 1;\n     //~^ ERROR any use of this value will cause an error\n+    //~| WARN this was previously accepted by the compiler but is being phased out\n }\n \n // An impl that doesn't override any constant will NOT cause a const eval error\n@@ -33,6 +34,7 @@ fn main() {\n     assert_eq!(<() as Tr>::B, 0);    // causes the error above\n     //~^ ERROR evaluation of constant value failed\n     //~| ERROR erroneous constant used\n+    //~| WARN this was previously accepted by the compiler but is being phased out\n \n     assert_eq!(<u8 as Tr>::A, 254);\n     assert_eq!(<u8 as Tr>::B, 255);"}, {"sha": "d034a50299d500a96cff36afa57d07fdc2cded8b", "filename": "src/test/ui/associated-consts/defaults-not-assumed-fail.stderr", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftest%2Fui%2Fassociated-consts%2Fdefaults-not-assumed-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftest%2Fui%2Fassociated-consts%2Fdefaults-not-assumed-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-consts%2Fdefaults-not-assumed-fail.stderr?ref=120b2a704a60d4341286bd82f6e638c65ca169b6", "patch": "@@ -7,19 +7,23 @@ LL |     const B: u8 = Self::A + 1;\n    |                   attempt to compute `u8::MAX + 1_u8`, which would overflow\n    |\n    = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error[E0080]: evaluation of constant value failed\n-  --> $DIR/defaults-not-assumed-fail.rs:33:16\n+  --> $DIR/defaults-not-assumed-fail.rs:34:16\n    |\n LL |     assert_eq!(<() as Tr>::B, 0);    // causes the error above\n    |                ^^^^^^^^^^^^^ referenced constant has errors\n \n error: erroneous constant used\n-  --> $DIR/defaults-not-assumed-fail.rs:33:5\n+  --> $DIR/defaults-not-assumed-fail.rs:34:5\n    |\n LL |     assert_eq!(<() as Tr>::B, 0);    // causes the error above\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ referenced constant has errors\n    |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 3 previous errors"}, {"sha": "87b7c377b00368b9312f20875c752c3aebf3d373", "filename": "src/test/ui/const-ptr/out_of_bounds_read.stderr", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftest%2Fui%2Fconst-ptr%2Fout_of_bounds_read.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftest%2Fui%2Fconst-ptr%2Fout_of_bounds_read.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-ptr%2Fout_of_bounds_read.stderr?ref=120b2a704a60d4341286bd82f6e638c65ca169b6", "patch": "@@ -15,6 +15,8 @@ LL |     const _READ: u32 = unsafe { ptr::read(PAST_END_PTR) };\n    |     ------------------------------------------------------\n    |\n    = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n   --> $SRC_DIR/core/src/intrinsics.rs:LL:COL\n@@ -32,6 +34,9 @@ LL |     unsafe { copy_nonoverlapping(src, dst, count) }\n    |\n LL |     const _CONST_READ: u32 = unsafe { PAST_END_PTR.read() };\n    |     --------------------------------------------------------\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n   --> $SRC_DIR/core/src/intrinsics.rs:LL:COL\n@@ -49,6 +54,9 @@ LL |     unsafe { copy_nonoverlapping(src, dst, count) }\n    |\n LL |     const _MUT_READ: u32 = unsafe { (PAST_END_PTR as *mut u32).read() };\n    |     --------------------------------------------------------------------\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: aborting due to 3 previous errors\n "}, {"sha": "71d947b0c2c70fe3cc3016e481aa29579643f641", "filename": "src/test/ui/consts/assoc_const_generic_impl.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftest%2Fui%2Fconsts%2Fassoc_const_generic_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftest%2Fui%2Fconsts%2Fassoc_const_generic_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fassoc_const_generic_impl.rs?ref=120b2a704a60d4341286bd82f6e638c65ca169b6", "patch": "@@ -9,6 +9,7 @@ trait ZeroSized: Sized {\n \n impl<T: Sized> ZeroSized for T {\n     const I_AM_ZERO_SIZED: ()  = [()][std::mem::size_of::<Self>()]; //~ WARN any use of this value\n+    //~| WARN this was previously accepted by the compiler but is being phased out\n     fn requires_zero_size(self) {\n         let () = Self::I_AM_ZERO_SIZED; //~ ERROR erroneous constant encountered\n         println!(\"requires_zero_size called\");"}, {"sha": "96cb904fa1b199f3dd7a3ad8279b102b36c972bf", "filename": "src/test/ui/consts/assoc_const_generic_impl.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftest%2Fui%2Fconsts%2Fassoc_const_generic_impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftest%2Fui%2Fconsts%2Fassoc_const_generic_impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fassoc_const_generic_impl.stderr?ref=120b2a704a60d4341286bd82f6e638c65ca169b6", "patch": "@@ -11,9 +11,11 @@ note: the lint level is defined here\n    |\n LL | #![warn(const_err)]\n    |         ^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: erroneous constant encountered\n-  --> $DIR/assoc_const_generic_impl.rs:13:18\n+  --> $DIR/assoc_const_generic_impl.rs:14:18\n    |\n LL |         let () = Self::I_AM_ZERO_SIZED;\n    |                  ^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "d46ce44b7ba2de5df15c68446a09abd5e5e53956", "filename": "src/test/ui/consts/assume-type-intrinsics.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftest%2Fui%2Fconsts%2Fassume-type-intrinsics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftest%2Fui%2Fconsts%2Fassume-type-intrinsics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fassume-type-intrinsics.stderr?ref=120b2a704a60d4341286bd82f6e638c65ca169b6", "patch": "@@ -16,6 +16,8 @@ LL | |     };\n    | |______-\n    |\n    = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: aborting due to previous error\n "}, {"sha": "d8f7635fe9bbe0efff001f671fe1020798a54a43", "filename": "src/test/ui/consts/const-err-early.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftest%2Fui%2Fconsts%2Fconst-err-early.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftest%2Fui%2Fconsts%2Fconst-err-early.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-err-early.rs?ref=120b2a704a60d4341286bd82f6e638c65ca169b6", "patch": "@@ -1,10 +1,15 @@\n #![deny(const_err)]\n \n pub const A: i8 = -i8::MIN; //~ ERROR const_err\n+//~| WARN this was previously accepted by the compiler but is being phased out\n pub const B: u8 = 200u8 + 200u8; //~ ERROR const_err\n+//~| WARN this was previously accepted by the compiler but is being phased out\n pub const C: u8 = 200u8 * 4; //~ ERROR const_err\n+//~| WARN this was previously accepted by the compiler but is being phased out\n pub const D: u8 = 42u8 - (42u8 + 1); //~ ERROR const_err\n+//~| WARN this was previously accepted by the compiler but is being phased out\n pub const E: u8 = [5u8][1]; //~ ERROR const_err\n+//~| WARN this was previously accepted by the compiler but is being phased out\n \n fn main() {\n     let _a = A;"}, {"sha": "2b3d881738762296458b34c75e6c14546854a203", "filename": "src/test/ui/consts/const-err-early.stderr", "status": "modified", "additions": 18, "deletions": 4, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftest%2Fui%2Fconsts%2Fconst-err-early.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftest%2Fui%2Fconsts%2Fconst-err-early.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-err-early.stderr?ref=120b2a704a60d4341286bd82f6e638c65ca169b6", "patch": "@@ -11,38 +11,52 @@ note: the lint level is defined here\n    |\n LL | #![deny(const_err)]\n    |         ^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n-  --> $DIR/const-err-early.rs:4:19\n+  --> $DIR/const-err-early.rs:5:19\n    |\n LL | pub const B: u8 = 200u8 + 200u8;\n    | ------------------^^^^^^^^^^^^^-\n    |                   |\n    |                   attempt to compute `200_u8 + 200_u8`, which would overflow\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n-  --> $DIR/const-err-early.rs:5:19\n+  --> $DIR/const-err-early.rs:7:19\n    |\n LL | pub const C: u8 = 200u8 * 4;\n    | ------------------^^^^^^^^^-\n    |                   |\n    |                   attempt to compute `200_u8 * 4_u8`, which would overflow\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n-  --> $DIR/const-err-early.rs:6:19\n+  --> $DIR/const-err-early.rs:9:19\n    |\n LL | pub const D: u8 = 42u8 - (42u8 + 1);\n    | ------------------^^^^^^^^^^^^^^^^^-\n    |                   |\n    |                   attempt to compute `42_u8 - 43_u8`, which would overflow\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n-  --> $DIR/const-err-early.rs:7:19\n+  --> $DIR/const-err-early.rs:11:19\n    |\n LL | pub const E: u8 = [5u8][1];\n    | ------------------^^^^^^^^-\n    |                   |\n    |                   index out of bounds: the length is 1 but the index is 1\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: aborting due to 5 previous errors\n "}, {"sha": "62552e1476ce2de2da0d5bff3879a24803a15478", "filename": "src/test/ui/consts/const-err-multi.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftest%2Fui%2Fconsts%2Fconst-err-multi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftest%2Fui%2Fconsts%2Fconst-err-multi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-err-multi.rs?ref=120b2a704a60d4341286bd82f6e638c65ca169b6", "patch": "@@ -2,12 +2,16 @@\n \n pub const A: i8 = -i8::MIN;\n //~^ ERROR const_err\n+//~| WARN this was previously accepted by the compiler but is being phased out\n pub const B: i8 = A;\n //~^ ERROR const_err\n+//~| WARN this was previously accepted by the compiler but is being phased out\n pub const C: u8 = A as u8;\n //~^ ERROR const_err\n+//~| WARN this was previously accepted by the compiler but is being phased out\n pub const D: i8 = 50 - A;\n //~^ ERROR const_err\n+//~| WARN this was previously accepted by the compiler but is being phased out\n \n fn main() {\n     let _ = (A, B, C, D);"}, {"sha": "c8172e83d10e22f0de4ab1b904ad6bd37dc017c3", "filename": "src/test/ui/consts/const-err-multi.stderr", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftest%2Fui%2Fconsts%2Fconst-err-multi.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftest%2Fui%2Fconsts%2Fconst-err-multi.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-err-multi.stderr?ref=120b2a704a60d4341286bd82f6e638c65ca169b6", "patch": "@@ -11,30 +11,41 @@ note: the lint level is defined here\n    |\n LL | #![deny(const_err)]\n    |         ^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n-  --> $DIR/const-err-multi.rs:5:19\n+  --> $DIR/const-err-multi.rs:6:19\n    |\n LL | pub const B: i8 = A;\n    | ------------------^-\n    |                   |\n    |                   referenced constant has errors\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n-  --> $DIR/const-err-multi.rs:7:19\n+  --> $DIR/const-err-multi.rs:9:19\n    |\n LL | pub const C: u8 = A as u8;\n    | ------------------^-------\n    |                   |\n    |                   referenced constant has errors\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n-  --> $DIR/const-err-multi.rs:9:24\n+  --> $DIR/const-err-multi.rs:12:24\n    |\n LL | pub const D: i8 = 50 - A;\n    | -----------------------^-\n    |                        |\n    |                        referenced constant has errors\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: aborting due to 4 previous errors\n "}, {"sha": "031f2121a1ee258cc792fd08783c6b95bcb96362", "filename": "src/test/ui/consts/const-err.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftest%2Fui%2Fconsts%2Fconst-err.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftest%2Fui%2Fconsts%2Fconst-err.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-err.rs?ref=120b2a704a60d4341286bd82f6e638c65ca169b6", "patch": "@@ -10,6 +10,7 @@ fn black_box<T>(_: T) {\n \n const FOO: u8 = [5u8][1];\n //~^ WARN any use of this value will cause an error\n+//~| WARN this was previously accepted by the compiler but is being phased out\n \n fn main() {\n     black_box((FOO, FOO));"}, {"sha": "0c963874a84963dbb23e64a6d0fb32166f8db858", "filename": "src/test/ui/consts/const-err.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftest%2Fui%2Fconsts%2Fconst-err.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftest%2Fui%2Fconsts%2Fconst-err.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-err.stderr?ref=120b2a704a60d4341286bd82f6e638c65ca169b6", "patch": "@@ -11,15 +11,17 @@ note: the lint level is defined here\n    |\n LL | #![warn(const_err)]\n    |         ^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error[E0080]: erroneous constant used\n-  --> $DIR/const-err.rs:15:16\n+  --> $DIR/const-err.rs:16:16\n    |\n LL |     black_box((FOO, FOO));\n    |                ^^^ referenced constant has errors\n \n error[E0080]: erroneous constant used\n-  --> $DIR/const-err.rs:15:21\n+  --> $DIR/const-err.rs:16:21\n    |\n LL |     black_box((FOO, FOO));\n    |                     ^^^ referenced constant has errors"}, {"sha": "9b99a685b63704929a6d01d469eb026e5e5acda4", "filename": "src/test/ui/consts/const-eval/conditional_array_execution.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconditional_array_execution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconditional_array_execution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconditional_array_execution.rs?ref=120b2a704a60d4341286bd82f6e638c65ca169b6", "patch": "@@ -6,9 +6,11 @@ const X: u32 = 5;\n const Y: u32 = 6;\n const FOO: u32 = [X - Y, Y - X][(X < Y) as usize];\n //~^ WARN any use of this value will cause an error\n+//~| WARN this was previously accepted by the compiler but is being phased out\n \n fn main() {\n     println!(\"{}\", FOO);\n     //~^ ERROR\n     //~| WARN erroneous constant used [const_err]\n+    //~| WARN this was previously accepted by the compiler but is being phased out\n }"}, {"sha": "356a7f58d8562eb36e1221c218e059ab05d70e2f", "filename": "src/test/ui/consts/const-eval/conditional_array_execution.stderr", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconditional_array_execution.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconditional_array_execution.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconditional_array_execution.stderr?ref=120b2a704a60d4341286bd82f6e638c65ca169b6", "patch": "@@ -11,18 +11,23 @@ note: the lint level is defined here\n    |\n LL | #![warn(const_err)]\n    |         ^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error[E0080]: evaluation of constant value failed\n-  --> $DIR/conditional_array_execution.rs:11:20\n+  --> $DIR/conditional_array_execution.rs:12:20\n    |\n LL |     println!(\"{}\", FOO);\n    |                    ^^^ referenced constant has errors\n \n warning: erroneous constant used\n-  --> $DIR/conditional_array_execution.rs:11:20\n+  --> $DIR/conditional_array_execution.rs:12:20\n    |\n LL |     println!(\"{}\", FOO);\n    |                    ^^^ referenced constant has errors\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: aborting due to previous error; 2 warnings emitted\n "}, {"sha": "b11f7d6983bfa685539a27835d412189c73e7d55", "filename": "src/test/ui/consts/const-eval/const-eval-overflow2.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow2.rs?ref=120b2a704a60d4341286bd82f6e638c65ca169b6", "patch": "@@ -14,46 +14,54 @@ const VALS_I8: (i8,) =\n      i8::MIN - 1,\n      );\n  //~^^ ERROR any use of this value will cause an error\n+ //~| WARN this was previously accepted by the compiler but is being phased out\n \n const VALS_I16: (i16,) =\n     (\n      i16::MIN - 1,\n      );\n  //~^^ ERROR any use of this value will cause an error\n+ //~| WARN this was previously accepted by the compiler but is being phased out\n \n const VALS_I32: (i32,) =\n     (\n      i32::MIN - 1,\n      );\n  //~^^ ERROR any use of this value will cause an error\n+ //~| WARN this was previously accepted by the compiler but is being phased out\n \n const VALS_I64: (i64,) =\n     (\n      i64::MIN - 1,\n      );\n  //~^^ ERROR any use of this value will cause an error\n+ //~| WARN this was previously accepted by the compiler but is being phased out\n \n const VALS_U8: (u8,) =\n     (\n      u8::MIN - 1,\n      );\n  //~^^ ERROR any use of this value will cause an error\n+ //~| WARN this was previously accepted by the compiler but is being phased out\n \n const VALS_U16: (u16,) = (\n      u16::MIN - 1,\n      );\n  //~^^ ERROR any use of this value will cause an error\n+ //~| WARN this was previously accepted by the compiler but is being phased out\n \n const VALS_U32: (u32,) = (\n      u32::MIN - 1,\n      );\n  //~^^ ERROR any use of this value will cause an error\n+ //~| WARN this was previously accepted by the compiler but is being phased out\n \n const VALS_U64: (u64,) =\n     (\n      u64::MIN - 1,\n      );\n  //~^^ ERROR any use of this value will cause an error\n+ //~| WARN this was previously accepted by the compiler but is being phased out\n \n fn main() {\n     foo(VALS_I8);"}, {"sha": "66e86c352d15430b0c726e5208f7cd558c6bc04f", "filename": "src/test/ui/consts/const-eval/const-eval-overflow2.stderr", "status": "modified", "additions": 30, "deletions": 7, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow2.stderr?ref=120b2a704a60d4341286bd82f6e638c65ca169b6", "patch": "@@ -13,74 +13,97 @@ note: the lint level is defined here\n    |\n LL | #![deny(const_err)]\n    |         ^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n-  --> $DIR/const-eval-overflow2.rs:20:6\n+  --> $DIR/const-eval-overflow2.rs:21:6\n    |\n LL | / const VALS_I16: (i16,) =\n LL | |     (\n LL | |      i16::MIN - 1,\n    | |      ^^^^^^^^^^^^ attempt to compute `i16::MIN - 1_i16`, which would overflow\n LL | |      );\n    | |_______-\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n-  --> $DIR/const-eval-overflow2.rs:26:6\n+  --> $DIR/const-eval-overflow2.rs:28:6\n    |\n LL | / const VALS_I32: (i32,) =\n LL | |     (\n LL | |      i32::MIN - 1,\n    | |      ^^^^^^^^^^^^ attempt to compute `i32::MIN - 1_i32`, which would overflow\n LL | |      );\n    | |_______-\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n-  --> $DIR/const-eval-overflow2.rs:32:6\n+  --> $DIR/const-eval-overflow2.rs:35:6\n    |\n LL | / const VALS_I64: (i64,) =\n LL | |     (\n LL | |      i64::MIN - 1,\n    | |      ^^^^^^^^^^^^ attempt to compute `i64::MIN - 1_i64`, which would overflow\n LL | |      );\n    | |_______-\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n-  --> $DIR/const-eval-overflow2.rs:38:6\n+  --> $DIR/const-eval-overflow2.rs:42:6\n    |\n LL | / const VALS_U8: (u8,) =\n LL | |     (\n LL | |      u8::MIN - 1,\n    | |      ^^^^^^^^^^^ attempt to compute `0_u8 - 1_u8`, which would overflow\n LL | |      );\n    | |_______-\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n-  --> $DIR/const-eval-overflow2.rs:43:6\n+  --> $DIR/const-eval-overflow2.rs:48:6\n    |\n LL | / const VALS_U16: (u16,) = (\n LL | |      u16::MIN - 1,\n    | |      ^^^^^^^^^^^^ attempt to compute `0_u16 - 1_u16`, which would overflow\n LL | |      );\n    | |_______-\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n-  --> $DIR/const-eval-overflow2.rs:48:6\n+  --> $DIR/const-eval-overflow2.rs:54:6\n    |\n LL | / const VALS_U32: (u32,) = (\n LL | |      u32::MIN - 1,\n    | |      ^^^^^^^^^^^^ attempt to compute `0_u32 - 1_u32`, which would overflow\n LL | |      );\n    | |_______-\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n-  --> $DIR/const-eval-overflow2.rs:54:6\n+  --> $DIR/const-eval-overflow2.rs:61:6\n    |\n LL | / const VALS_U64: (u64,) =\n LL | |     (\n LL | |      u64::MIN - 1,\n    | |      ^^^^^^^^^^^^ attempt to compute `0_u64 - 1_u64`, which would overflow\n LL | |      );\n    | |_______-\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: aborting due to 8 previous errors\n "}, {"sha": "9c3ad8ef9b44e5a9b9dae2b98d1721b703d36939", "filename": "src/test/ui/consts/const-eval/const-eval-overflow2b.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow2b.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow2b.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow2b.rs?ref=120b2a704a60d4341286bd82f6e638c65ca169b6", "patch": "@@ -14,46 +14,54 @@ const VALS_I8: (i8,) =\n      i8::MAX + 1,\n      );\n  //~^^ ERROR any use of this value will cause an error\n+ //~| WARN this was previously accepted by the compiler but is being phased out\n \n const VALS_I16: (i16,) =\n     (\n      i16::MAX + 1,\n      );\n  //~^^ ERROR any use of this value will cause an error\n+ //~| WARN this was previously accepted by the compiler but is being phased out\n \n const VALS_I32: (i32,) =\n     (\n      i32::MAX + 1,\n      );\n  //~^^ ERROR any use of this value will cause an error\n+ //~| WARN this was previously accepted by the compiler but is being phased out\n \n const VALS_I64: (i64,) =\n     (\n      i64::MAX + 1,\n      );\n  //~^^ ERROR any use of this value will cause an error\n+ //~| WARN this was previously accepted by the compiler but is being phased out\n \n const VALS_U8: (u8,) =\n     (\n      u8::MAX + 1,\n      );\n  //~^^ ERROR any use of this value will cause an error\n+ //~| WARN this was previously accepted by the compiler but is being phased out\n \n const VALS_U16: (u16,) = (\n      u16::MAX + 1,\n      );\n  //~^^ ERROR any use of this value will cause an error\n+ //~| WARN this was previously accepted by the compiler but is being phased out\n \n const VALS_U32: (u32,) = (\n      u32::MAX + 1,\n      );\n  //~^^ ERROR any use of this value will cause an error\n+ //~| WARN this was previously accepted by the compiler but is being phased out\n \n const VALS_U64: (u64,) =\n     (\n      u64::MAX + 1,\n      );\n  //~^^ ERROR any use of this value will cause an error\n+ //~| WARN this was previously accepted by the compiler but is being phased out\n \n fn main() {\n     foo(VALS_I8);"}, {"sha": "3401ba4776500b03bd0e012df9d3c25859cac08f", "filename": "src/test/ui/consts/const-eval/const-eval-overflow2b.stderr", "status": "modified", "additions": 30, "deletions": 7, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow2b.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow2b.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow2b.stderr?ref=120b2a704a60d4341286bd82f6e638c65ca169b6", "patch": "@@ -13,74 +13,97 @@ note: the lint level is defined here\n    |\n LL | #![deny(const_err)]\n    |         ^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n-  --> $DIR/const-eval-overflow2b.rs:20:6\n+  --> $DIR/const-eval-overflow2b.rs:21:6\n    |\n LL | / const VALS_I16: (i16,) =\n LL | |     (\n LL | |      i16::MAX + 1,\n    | |      ^^^^^^^^^^^^ attempt to compute `i16::MAX + 1_i16`, which would overflow\n LL | |      );\n    | |_______-\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n-  --> $DIR/const-eval-overflow2b.rs:26:6\n+  --> $DIR/const-eval-overflow2b.rs:28:6\n    |\n LL | / const VALS_I32: (i32,) =\n LL | |     (\n LL | |      i32::MAX + 1,\n    | |      ^^^^^^^^^^^^ attempt to compute `i32::MAX + 1_i32`, which would overflow\n LL | |      );\n    | |_______-\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n-  --> $DIR/const-eval-overflow2b.rs:32:6\n+  --> $DIR/const-eval-overflow2b.rs:35:6\n    |\n LL | / const VALS_I64: (i64,) =\n LL | |     (\n LL | |      i64::MAX + 1,\n    | |      ^^^^^^^^^^^^ attempt to compute `i64::MAX + 1_i64`, which would overflow\n LL | |      );\n    | |_______-\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n-  --> $DIR/const-eval-overflow2b.rs:38:6\n+  --> $DIR/const-eval-overflow2b.rs:42:6\n    |\n LL | / const VALS_U8: (u8,) =\n LL | |     (\n LL | |      u8::MAX + 1,\n    | |      ^^^^^^^^^^^ attempt to compute `u8::MAX + 1_u8`, which would overflow\n LL | |      );\n    | |_______-\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n-  --> $DIR/const-eval-overflow2b.rs:43:6\n+  --> $DIR/const-eval-overflow2b.rs:48:6\n    |\n LL | / const VALS_U16: (u16,) = (\n LL | |      u16::MAX + 1,\n    | |      ^^^^^^^^^^^^ attempt to compute `u16::MAX + 1_u16`, which would overflow\n LL | |      );\n    | |_______-\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n-  --> $DIR/const-eval-overflow2b.rs:48:6\n+  --> $DIR/const-eval-overflow2b.rs:54:6\n    |\n LL | / const VALS_U32: (u32,) = (\n LL | |      u32::MAX + 1,\n    | |      ^^^^^^^^^^^^ attempt to compute `u32::MAX + 1_u32`, which would overflow\n LL | |      );\n    | |_______-\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n-  --> $DIR/const-eval-overflow2b.rs:54:6\n+  --> $DIR/const-eval-overflow2b.rs:61:6\n    |\n LL | / const VALS_U64: (u64,) =\n LL | |     (\n LL | |      u64::MAX + 1,\n    | |      ^^^^^^^^^^^^ attempt to compute `u64::MAX + 1_u64`, which would overflow\n LL | |      );\n    | |_______-\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: aborting due to 8 previous errors\n "}, {"sha": "bac4d042e23c9afc2102c9d8a939edb1af6b7c78", "filename": "src/test/ui/consts/const-eval/const-eval-overflow2c.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow2c.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow2c.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow2c.rs?ref=120b2a704a60d4341286bd82f6e638c65ca169b6", "patch": "@@ -14,46 +14,54 @@ const VALS_I8: (i8,) =\n      i8::MIN * 2,\n      );\n  //~^^ ERROR any use of this value will cause an error\n+ //~| WARN this was previously accepted by the compiler but is being phased out\n \n const VALS_I16: (i16,) =\n     (\n      i16::MIN * 2,\n      );\n  //~^^ ERROR any use of this value will cause an error\n+ //~| WARN this was previously accepted by the compiler but is being phased out\n \n const VALS_I32: (i32,) =\n     (\n      i32::MIN * 2,\n      );\n  //~^^ ERROR any use of this value will cause an error\n+ //~| WARN this was previously accepted by the compiler but is being phased out\n \n const VALS_I64: (i64,) =\n     (\n      i64::MIN * 2,\n      );\n  //~^^ ERROR any use of this value will cause an error\n+ //~| WARN this was previously accepted by the compiler but is being phased out\n \n const VALS_U8: (u8,) =\n     (\n      u8::MAX * 2,\n      );\n  //~^^ ERROR any use of this value will cause an error\n+ //~| WARN this was previously accepted by the compiler but is being phased out\n \n const VALS_U16: (u16,) = (\n      u16::MAX * 2,\n      );\n  //~^^ ERROR any use of this value will cause an error\n+ //~| WARN this was previously accepted by the compiler but is being phased out\n \n const VALS_U32: (u32,) = (\n      u32::MAX * 2,\n      );\n  //~^^ ERROR any use of this value will cause an error\n+ //~| WARN this was previously accepted by the compiler but is being phased out\n \n const VALS_U64: (u64,) =\n     (\n      u64::MAX * 2,\n      );\n  //~^^ ERROR any use of this value will cause an error\n+ //~| WARN this was previously accepted by the compiler but is being phased out\n \n fn main() {\n     foo(VALS_I8);"}, {"sha": "93c64090f0eebaadbb3fec51affc10519d264114", "filename": "src/test/ui/consts/const-eval/const-eval-overflow2c.stderr", "status": "modified", "additions": 30, "deletions": 7, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow2c.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow2c.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow2c.stderr?ref=120b2a704a60d4341286bd82f6e638c65ca169b6", "patch": "@@ -13,74 +13,97 @@ note: the lint level is defined here\n    |\n LL | #![deny(const_err)]\n    |         ^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n-  --> $DIR/const-eval-overflow2c.rs:20:6\n+  --> $DIR/const-eval-overflow2c.rs:21:6\n    |\n LL | / const VALS_I16: (i16,) =\n LL | |     (\n LL | |      i16::MIN * 2,\n    | |      ^^^^^^^^^^^^ attempt to compute `i16::MIN * 2_i16`, which would overflow\n LL | |      );\n    | |_______-\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n-  --> $DIR/const-eval-overflow2c.rs:26:6\n+  --> $DIR/const-eval-overflow2c.rs:28:6\n    |\n LL | / const VALS_I32: (i32,) =\n LL | |     (\n LL | |      i32::MIN * 2,\n    | |      ^^^^^^^^^^^^ attempt to compute `i32::MIN * 2_i32`, which would overflow\n LL | |      );\n    | |_______-\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n-  --> $DIR/const-eval-overflow2c.rs:32:6\n+  --> $DIR/const-eval-overflow2c.rs:35:6\n    |\n LL | / const VALS_I64: (i64,) =\n LL | |     (\n LL | |      i64::MIN * 2,\n    | |      ^^^^^^^^^^^^ attempt to compute `i64::MIN * 2_i64`, which would overflow\n LL | |      );\n    | |_______-\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n-  --> $DIR/const-eval-overflow2c.rs:38:6\n+  --> $DIR/const-eval-overflow2c.rs:42:6\n    |\n LL | / const VALS_U8: (u8,) =\n LL | |     (\n LL | |      u8::MAX * 2,\n    | |      ^^^^^^^^^^^ attempt to compute `u8::MAX * 2_u8`, which would overflow\n LL | |      );\n    | |_______-\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n-  --> $DIR/const-eval-overflow2c.rs:43:6\n+  --> $DIR/const-eval-overflow2c.rs:48:6\n    |\n LL | / const VALS_U16: (u16,) = (\n LL | |      u16::MAX * 2,\n    | |      ^^^^^^^^^^^^ attempt to compute `u16::MAX * 2_u16`, which would overflow\n LL | |      );\n    | |_______-\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n-  --> $DIR/const-eval-overflow2c.rs:48:6\n+  --> $DIR/const-eval-overflow2c.rs:54:6\n    |\n LL | / const VALS_U32: (u32,) = (\n LL | |      u32::MAX * 2,\n    | |      ^^^^^^^^^^^^ attempt to compute `u32::MAX * 2_u32`, which would overflow\n LL | |      );\n    | |_______-\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n-  --> $DIR/const-eval-overflow2c.rs:54:6\n+  --> $DIR/const-eval-overflow2c.rs:61:6\n    |\n LL | / const VALS_U64: (u64,) =\n LL | |     (\n LL | |      u64::MAX * 2,\n    | |      ^^^^^^^^^^^^ attempt to compute `u64::MAX * 2_u64`, which would overflow\n LL | |      );\n    | |_______-\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: aborting due to 8 previous errors\n "}, {"sha": "8c3959cc11a431c20c5fa78dd29eb27eb0663614", "filename": "src/test/ui/consts/const-eval/const-eval-query-stack.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-query-stack.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-query-stack.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-query-stack.rs?ref=120b2a704a60d4341286bd82f6e638c65ca169b6", "patch": "@@ -18,6 +18,7 @@\n \n #[warn(const_err)]\n const X: i32 = 1 / 0; //~WARN any use of this value will cause an error\n+//~| WARN this was previously accepted by the compiler but is being phased out\n \n fn main() {\n     let x: &'static i32 = &X;"}, {"sha": "6a205ce9787f920487abdbc7b5736e71412f3307", "filename": "src/test/ui/consts/const-eval/const-eval-query-stack.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-query-stack.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-query-stack.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-query-stack.stderr?ref=120b2a704a60d4341286bd82f6e638c65ca169b6", "patch": "@@ -11,9 +11,11 @@ note: the lint level is defined here\n    |\n LL | #[warn(const_err)]\n    |        ^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error[E0080]: evaluation of constant value failed\n-  --> $DIR/const-eval-query-stack.rs:23:28\n+  --> $DIR/const-eval-query-stack.rs:24:28\n    |\n LL |     let x: &'static i32 = &X;\n    |                            ^ referenced constant has errors"}, {"sha": "90bc191020e264b4abab3565cf8349fe59f223a8", "filename": "src/test/ui/consts/const-eval/const-pointer-values-in-various-types.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-pointer-values-in-various-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-pointer-values-in-various-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-pointer-values-in-various-types.rs?ref=120b2a704a60d4341286bd82f6e638c65ca169b6", "patch": "@@ -27,12 +27,15 @@ fn main() {\n \n     const I32_REF_U8_UNION: u8 = unsafe { Nonsense { int_32_ref: &3 }.uint_8 };\n     //~^ ERROR any use of this value will cause an error\n+    //~| WARN this was previously accepted by the compiler but is being phased out\n \n     const I32_REF_U16_UNION: u16 = unsafe { Nonsense { int_32_ref: &3 }.uint_16 };\n     //~^ ERROR any use of this value will cause an error\n+    //~| WARN this was previously accepted by the compiler but is being phased out\n \n     const I32_REF_U32_UNION: u32 = unsafe { Nonsense { int_32_ref: &3 }.uint_32 };\n     //~^ ERROR any use of this value will cause an error\n+    //~| WARN this was previously accepted by the compiler but is being phased out\n \n     const I32_REF_U64_UNION: u64 = unsafe { Nonsense { int_32_ref: &3 }.uint_64 };\n     //~^ ERROR it is undefined behavior to use this value\n@@ -42,12 +45,15 @@ fn main() {\n \n     const I32_REF_I8_UNION: i8 = unsafe { Nonsense { int_32_ref: &3 }.int_8 };\n     //~^ ERROR any use of this value will cause an error\n+    //~| WARN this was previously accepted by the compiler but is being phased out\n \n     const I32_REF_I16_UNION: i16 = unsafe { Nonsense { int_32_ref: &3 }.int_16 };\n     //~^ ERROR any use of this value will cause an error\n+    //~| WARN this was previously accepted by the compiler but is being phased out\n \n     const I32_REF_I32_UNION: i32 = unsafe { Nonsense { int_32_ref: &3 }.int_32 };\n     //~^ ERROR any use of this value will cause an error\n+    //~| WARN this was previously accepted by the compiler but is being phased out\n \n     const I32_REF_I64_UNION: i64 = unsafe { Nonsense { int_32_ref: &3 }.int_64 };\n     //~^ ERROR it is undefined behavior to use this value\n@@ -57,55 +63,69 @@ fn main() {\n \n     const I32_REF_F32_UNION: f32 = unsafe { Nonsense { int_32_ref: &3 }.float_32 };\n     //~^ ERROR any use of this value will cause an error\n+    //~| WARN this was previously accepted by the compiler but is being phased out\n \n     const I32_REF_F64_UNION: f64 = unsafe { Nonsense { int_32_ref: &3 }.float_64 };\n     //~^ ERROR it is undefined behavior to use this value\n \n     const I32_REF_BOOL_UNION: bool = unsafe { Nonsense { int_32_ref: &3 }.truthy_falsey };\n     //~^ ERROR any use of this value will cause an error\n+    //~| WARN this was previously accepted by the compiler but is being phased out\n \n     const I32_REF_CHAR_UNION: char = unsafe { Nonsense { int_32_ref: &3 }.character };\n     //~^ ERROR any use of this value will cause an error\n+    //~| WARN this was previously accepted by the compiler but is being phased out\n \n     const STR_U8_UNION: u8 = unsafe { Nonsense { stringy: \"3\" }.uint_8 };\n     //~^ ERROR any use of this value will cause an error\n+    //~| WARN this was previously accepted by the compiler but is being phased out\n \n     const STR_U16_UNION: u16 = unsafe { Nonsense { stringy: \"3\" }.uint_16 };\n     //~^ ERROR any use of this value will cause an error\n+    //~| WARN this was previously accepted by the compiler but is being phased out\n \n     const STR_U32_UNION: u32 = unsafe { Nonsense { stringy: \"3\" }.uint_32 };\n     //~^ ERROR any use of this value will cause an error\n+    //~| WARN this was previously accepted by the compiler but is being phased out\n \n     const STR_U64_UNION: u64 = unsafe { Nonsense { stringy: \"3\" }.uint_64 };\n     //~^ ERROR it is undefined behavior to use this value\n \n     const STR_U128_UNION: u128 = unsafe { Nonsense { stringy: \"3\" }.uint_128 };\n     //~^ ERROR any use of this value will cause an error\n+    //~| WARN this was previously accepted by the compiler but is being phased out\n \n     const STR_I8_UNION: i8 = unsafe { Nonsense { stringy: \"3\" }.int_8 };\n     //~^ ERROR any use of this value will cause an error\n+    //~| WARN this was previously accepted by the compiler but is being phased out\n \n     const STR_I16_UNION: i16 = unsafe { Nonsense { stringy: \"3\" }.int_16 };\n     //~^ ERROR any use of this value will cause an error\n+    //~| WARN this was previously accepted by the compiler but is being phased out\n \n     const STR_I32_UNION: i32 = unsafe { Nonsense { stringy: \"3\" }.int_32 };\n     //~^ ERROR any use of this value will cause an error\n+    //~| WARN this was previously accepted by the compiler but is being phased out\n \n     const STR_I64_UNION: i64 = unsafe { Nonsense { stringy: \"3\" }.int_64 };\n     //~^ ERROR it is undefined behavior to use this value\n \n     const STR_I128_UNION: i128 = unsafe { Nonsense { stringy: \"3\" }.int_128 };\n     //~^ ERROR any use of this value will cause an error\n+    //~| WARN this was previously accepted by the compiler but is being phased out\n \n     const STR_F32_UNION: f32 = unsafe { Nonsense { stringy: \"3\" }.float_32 };\n     //~^ ERROR any use of this value will cause an error\n+    //~| WARN this was previously accepted by the compiler but is being phased out\n \n     const STR_F64_UNION: f64 = unsafe { Nonsense { stringy: \"3\" }.float_64 };\n     //~^ ERROR it is undefined behavior to use this value\n \n     const STR_BOOL_UNION: bool = unsafe { Nonsense { stringy: \"3\" }.truthy_falsey };\n     //~^ ERROR any use of this value will cause an error\n+    //~| WARN this was previously accepted by the compiler but is being phased out\n \n     const STR_CHAR_UNION: char = unsafe { Nonsense { stringy: \"3\" }.character };\n     //~^ ERROR any use of this value will cause an error\n+    //~| WARN this was previously accepted by the compiler but is being phased out\n }"}, {"sha": "ccd13784784e1c76e74151f69d8834408fc69e76", "filename": "src/test/ui/consts/const-eval/const-pointer-values-in-various-types.stderr", "status": "modified", "additions": 86, "deletions": 27, "changes": 113, "blob_url": "https://github.com/rust-lang/rust/blob/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-pointer-values-in-various-types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-pointer-values-in-various-types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-pointer-values-in-various-types.stderr?ref=120b2a704a60d4341286bd82f6e638c65ca169b6", "patch": "@@ -15,222 +15,281 @@ LL |     const I32_REF_U8_UNION: u8 = unsafe { Nonsense { int_32_ref: &3 }.uint_\n    |                                           unable to turn pointer into raw bytes\n    |\n    = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n-  --> $DIR/const-pointer-values-in-various-types.rs:31:45\n+  --> $DIR/const-pointer-values-in-various-types.rs:32:45\n    |\n LL |     const I32_REF_U16_UNION: u16 = unsafe { Nonsense { int_32_ref: &3 }.uint_16 };\n    |     ----------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                             |\n    |                                             unable to turn pointer into raw bytes\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n-  --> $DIR/const-pointer-values-in-various-types.rs:34:45\n+  --> $DIR/const-pointer-values-in-various-types.rs:36:45\n    |\n LL |     const I32_REF_U32_UNION: u32 = unsafe { Nonsense { int_32_ref: &3 }.uint_32 };\n    |     ----------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                             |\n    |                                             unable to turn pointer into raw bytes\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/const-pointer-values-in-various-types.rs:37:5\n+  --> $DIR/const-pointer-values-in-various-types.rs:40:5\n    |\n LL |     const I32_REF_U64_UNION: u64 = unsafe { Nonsense { int_32_ref: &3 }.uint_64 };\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered pointer to alloc18, but expected initialized plain (non-pointer) bytes\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/const-pointer-values-in-various-types.rs:40:5\n+  --> $DIR/const-pointer-values-in-various-types.rs:43:5\n    |\n LL |     const I32_REF_U128_UNION: u128 = unsafe { Nonsense { int_32_ref: &3 }.uint_128 };\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered uninitialized bytes, but expected initialized plain (non-pointer) bytes\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n error: any use of this value will cause an error\n-  --> $DIR/const-pointer-values-in-various-types.rs:43:43\n+  --> $DIR/const-pointer-values-in-various-types.rs:46:43\n    |\n LL |     const I32_REF_I8_UNION: i8 = unsafe { Nonsense { int_32_ref: &3 }.int_8 };\n    |     --------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                           |\n    |                                           unable to turn pointer into raw bytes\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n-  --> $DIR/const-pointer-values-in-various-types.rs:46:45\n+  --> $DIR/const-pointer-values-in-various-types.rs:50:45\n    |\n LL |     const I32_REF_I16_UNION: i16 = unsafe { Nonsense { int_32_ref: &3 }.int_16 };\n    |     ----------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                             |\n    |                                             unable to turn pointer into raw bytes\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n-  --> $DIR/const-pointer-values-in-various-types.rs:49:45\n+  --> $DIR/const-pointer-values-in-various-types.rs:54:45\n    |\n LL |     const I32_REF_I32_UNION: i32 = unsafe { Nonsense { int_32_ref: &3 }.int_32 };\n    |     ----------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                             |\n    |                                             unable to turn pointer into raw bytes\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/const-pointer-values-in-various-types.rs:52:5\n+  --> $DIR/const-pointer-values-in-various-types.rs:58:5\n    |\n LL |     const I32_REF_I64_UNION: i64 = unsafe { Nonsense { int_32_ref: &3 }.int_64 };\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered pointer to alloc38, but expected initialized plain (non-pointer) bytes\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/const-pointer-values-in-various-types.rs:55:5\n+  --> $DIR/const-pointer-values-in-various-types.rs:61:5\n    |\n LL |     const I32_REF_I128_UNION: i128 = unsafe { Nonsense { int_32_ref: &3 }.int_128 };\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered uninitialized bytes, but expected initialized plain (non-pointer) bytes\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n error: any use of this value will cause an error\n-  --> $DIR/const-pointer-values-in-various-types.rs:58:45\n+  --> $DIR/const-pointer-values-in-various-types.rs:64:45\n    |\n LL |     const I32_REF_F32_UNION: f32 = unsafe { Nonsense { int_32_ref: &3 }.float_32 };\n    |     ----------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                             |\n    |                                             unable to turn pointer into raw bytes\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/const-pointer-values-in-various-types.rs:61:5\n+  --> $DIR/const-pointer-values-in-various-types.rs:68:5\n    |\n LL |     const I32_REF_F64_UNION: f64 = unsafe { Nonsense { int_32_ref: &3 }.float_64 };\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered pointer to alloc50, but expected initialized plain (non-pointer) bytes\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n error: any use of this value will cause an error\n-  --> $DIR/const-pointer-values-in-various-types.rs:64:47\n+  --> $DIR/const-pointer-values-in-various-types.rs:71:47\n    |\n LL |     const I32_REF_BOOL_UNION: bool = unsafe { Nonsense { int_32_ref: &3 }.truthy_falsey };\n    |     ------------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                               |\n    |                                               unable to turn pointer into raw bytes\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n-  --> $DIR/const-pointer-values-in-various-types.rs:67:47\n+  --> $DIR/const-pointer-values-in-various-types.rs:75:47\n    |\n LL |     const I32_REF_CHAR_UNION: char = unsafe { Nonsense { int_32_ref: &3 }.character };\n    |     ------------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                               |\n    |                                               unable to turn pointer into raw bytes\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n-  --> $DIR/const-pointer-values-in-various-types.rs:70:39\n+  --> $DIR/const-pointer-values-in-various-types.rs:79:39\n    |\n LL |     const STR_U8_UNION: u8 = unsafe { Nonsense { stringy: \"3\" }.uint_8 };\n    |     ----------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                       |\n    |                                       unable to turn pointer into raw bytes\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n-  --> $DIR/const-pointer-values-in-various-types.rs:73:41\n+  --> $DIR/const-pointer-values-in-various-types.rs:83:41\n    |\n LL |     const STR_U16_UNION: u16 = unsafe { Nonsense { stringy: \"3\" }.uint_16 };\n    |     ------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                         |\n    |                                         unable to turn pointer into raw bytes\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n-  --> $DIR/const-pointer-values-in-various-types.rs:76:41\n+  --> $DIR/const-pointer-values-in-various-types.rs:87:41\n    |\n LL |     const STR_U32_UNION: u32 = unsafe { Nonsense { stringy: \"3\" }.uint_32 };\n    |     ------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                         |\n    |                                         unable to turn pointer into raw bytes\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/const-pointer-values-in-various-types.rs:79:5\n+  --> $DIR/const-pointer-values-in-various-types.rs:91:5\n    |\n LL |     const STR_U64_UNION: u64 = unsafe { Nonsense { stringy: \"3\" }.uint_64 };\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered pointer to alloc71, but expected initialized plain (non-pointer) bytes\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n error: any use of this value will cause an error\n-  --> $DIR/const-pointer-values-in-various-types.rs:82:43\n+  --> $DIR/const-pointer-values-in-various-types.rs:94:43\n    |\n LL |     const STR_U128_UNION: u128 = unsafe { Nonsense { stringy: \"3\" }.uint_128 };\n    |     --------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                           |\n    |                                           unable to turn pointer into raw bytes\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n-  --> $DIR/const-pointer-values-in-various-types.rs:85:39\n+  --> $DIR/const-pointer-values-in-various-types.rs:98:39\n    |\n LL |     const STR_I8_UNION: i8 = unsafe { Nonsense { stringy: \"3\" }.int_8 };\n    |     ----------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                       |\n    |                                       unable to turn pointer into raw bytes\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n-  --> $DIR/const-pointer-values-in-various-types.rs:88:41\n+  --> $DIR/const-pointer-values-in-various-types.rs:102:41\n    |\n LL |     const STR_I16_UNION: i16 = unsafe { Nonsense { stringy: \"3\" }.int_16 };\n    |     ------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                         |\n    |                                         unable to turn pointer into raw bytes\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n-  --> $DIR/const-pointer-values-in-various-types.rs:91:41\n+  --> $DIR/const-pointer-values-in-various-types.rs:106:41\n    |\n LL |     const STR_I32_UNION: i32 = unsafe { Nonsense { stringy: \"3\" }.int_32 };\n    |     ------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                         |\n    |                                         unable to turn pointer into raw bytes\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/const-pointer-values-in-various-types.rs:94:5\n+  --> $DIR/const-pointer-values-in-various-types.rs:110:5\n    |\n LL |     const STR_I64_UNION: i64 = unsafe { Nonsense { stringy: \"3\" }.int_64 };\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered pointer to alloc86, but expected initialized plain (non-pointer) bytes\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n error: any use of this value will cause an error\n-  --> $DIR/const-pointer-values-in-various-types.rs:97:43\n+  --> $DIR/const-pointer-values-in-various-types.rs:113:43\n    |\n LL |     const STR_I128_UNION: i128 = unsafe { Nonsense { stringy: \"3\" }.int_128 };\n    |     --------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                           |\n    |                                           unable to turn pointer into raw bytes\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n-  --> $DIR/const-pointer-values-in-various-types.rs:100:41\n+  --> $DIR/const-pointer-values-in-various-types.rs:117:41\n    |\n LL |     const STR_F32_UNION: f32 = unsafe { Nonsense { stringy: \"3\" }.float_32 };\n    |     ------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                         |\n    |                                         unable to turn pointer into raw bytes\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/const-pointer-values-in-various-types.rs:103:5\n+  --> $DIR/const-pointer-values-in-various-types.rs:121:5\n    |\n LL |     const STR_F64_UNION: f64 = unsafe { Nonsense { stringy: \"3\" }.float_64 };\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered pointer to alloc95, but expected initialized plain (non-pointer) bytes\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n error: any use of this value will cause an error\n-  --> $DIR/const-pointer-values-in-various-types.rs:106:43\n+  --> $DIR/const-pointer-values-in-various-types.rs:124:43\n    |\n LL |     const STR_BOOL_UNION: bool = unsafe { Nonsense { stringy: \"3\" }.truthy_falsey };\n    |     --------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                           |\n    |                                           unable to turn pointer into raw bytes\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n-  --> $DIR/const-pointer-values-in-various-types.rs:109:43\n+  --> $DIR/const-pointer-values-in-various-types.rs:128:43\n    |\n LL |     const STR_CHAR_UNION: char = unsafe { Nonsense { stringy: \"3\" }.character };\n    |     --------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                           |\n    |                                           unable to turn pointer into raw bytes\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: aborting due to 29 previous errors\n "}, {"sha": "e9d66477d60a536d84170f0a28ce9fcef1c7e7a7", "filename": "src/test/ui/consts/const-eval/const_panic.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic.rs?ref=120b2a704a60d4341286bd82f6e638c65ca169b6", "patch": "@@ -5,30 +5,40 @@ const MSG: &str = \"hello\";\n \n const Z: () = std::panic!(\"cheese\");\n //~^ ERROR any use of this value will cause an error\n+//~| WARN this was previously accepted by the compiler but is being phased out\n \n const Z2: () = std::panic!();\n //~^ ERROR any use of this value will cause an error\n+//~| WARN this was previously accepted by the compiler but is being phased out\n \n const Y: () = std::unreachable!();\n //~^ ERROR any use of this value will cause an error\n+//~| WARN this was previously accepted by the compiler but is being phased out\n \n const X: () = std::unimplemented!();\n //~^ ERROR any use of this value will cause an error\n+//~| WARN this was previously accepted by the compiler but is being phased out\n //\n const W: () = std::panic!(MSG);\n //~^ ERROR any use of this value will cause an error\n+//~| WARN this was previously accepted by the compiler but is being phased out\n \n const Z_CORE: () = core::panic!(\"cheese\");\n //~^ ERROR any use of this value will cause an error\n+//~| WARN this was previously accepted by the compiler but is being phased out\n \n const Z2_CORE: () = core::panic!();\n //~^ ERROR any use of this value will cause an error\n+//~| WARN this was previously accepted by the compiler but is being phased out\n \n const Y_CORE: () = core::unreachable!();\n //~^ ERROR any use of this value will cause an error\n+//~| WARN this was previously accepted by the compiler but is being phased out\n \n const X_CORE: () = core::unimplemented!();\n //~^ ERROR any use of this value will cause an error\n+//~| WARN this was previously accepted by the compiler but is being phased out\n \n const W_CORE: () = core::panic!(MSG);\n //~^ ERROR any use of this value will cause an error\n+//~| WARN this was previously accepted by the compiler but is being phased out"}, {"sha": "713be5b662d548c3893af5d1506add6a3a1db1db", "filename": "src/test/ui/consts/const-eval/const_panic.stderr", "status": "modified", "additions": 38, "deletions": 18, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic.stderr?ref=120b2a704a60d4341286bd82f6e638c65ca169b6", "patch": "@@ -7,96 +7,116 @@ LL | const Z: () = std::panic!(\"cheese\");\n    |               the evaluated program panicked at 'cheese', $DIR/const_panic.rs:6:15\n    |\n    = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: any use of this value will cause an error\n-  --> $DIR/const_panic.rs:9:16\n+  --> $DIR/const_panic.rs:10:16\n    |\n LL | const Z2: () = std::panic!();\n    | ---------------^^^^^^^^^^^^^-\n    |                |\n-   |                the evaluated program panicked at 'explicit panic', $DIR/const_panic.rs:9:16\n+   |                the evaluated program panicked at 'explicit panic', $DIR/const_panic.rs:10:16\n    |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: any use of this value will cause an error\n-  --> $DIR/const_panic.rs:12:15\n+  --> $DIR/const_panic.rs:14:15\n    |\n LL | const Y: () = std::unreachable!();\n    | --------------^^^^^^^^^^^^^^^^^^^-\n    |               |\n-   |               the evaluated program panicked at 'internal error: entered unreachable code', $DIR/const_panic.rs:12:15\n+   |               the evaluated program panicked at 'internal error: entered unreachable code', $DIR/const_panic.rs:14:15\n    |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: any use of this value will cause an error\n-  --> $DIR/const_panic.rs:15:15\n+  --> $DIR/const_panic.rs:18:15\n    |\n LL | const X: () = std::unimplemented!();\n    | --------------^^^^^^^^^^^^^^^^^^^^^-\n    |               |\n-   |               the evaluated program panicked at 'not implemented', $DIR/const_panic.rs:15:15\n+   |               the evaluated program panicked at 'not implemented', $DIR/const_panic.rs:18:15\n    |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: any use of this value will cause an error\n-  --> $DIR/const_panic.rs:18:15\n+  --> $DIR/const_panic.rs:22:15\n    |\n LL | const W: () = std::panic!(MSG);\n    | --------------^^^^^^^^^^^^^^^^-\n    |               |\n-   |               the evaluated program panicked at 'hello', $DIR/const_panic.rs:18:15\n+   |               the evaluated program panicked at 'hello', $DIR/const_panic.rs:22:15\n    |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: any use of this value will cause an error\n-  --> $DIR/const_panic.rs:21:20\n+  --> $DIR/const_panic.rs:26:20\n    |\n LL | const Z_CORE: () = core::panic!(\"cheese\");\n    | -------------------^^^^^^^^^^^^^^^^^^^^^^-\n    |                    |\n-   |                    the evaluated program panicked at 'cheese', $DIR/const_panic.rs:21:20\n+   |                    the evaluated program panicked at 'cheese', $DIR/const_panic.rs:26:20\n    |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: any use of this value will cause an error\n-  --> $DIR/const_panic.rs:24:21\n+  --> $DIR/const_panic.rs:30:21\n    |\n LL | const Z2_CORE: () = core::panic!();\n    | --------------------^^^^^^^^^^^^^^-\n    |                     |\n-   |                     the evaluated program panicked at 'explicit panic', $DIR/const_panic.rs:24:21\n+   |                     the evaluated program panicked at 'explicit panic', $DIR/const_panic.rs:30:21\n    |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: any use of this value will cause an error\n-  --> $DIR/const_panic.rs:27:20\n+  --> $DIR/const_panic.rs:34:20\n    |\n LL | const Y_CORE: () = core::unreachable!();\n    | -------------------^^^^^^^^^^^^^^^^^^^^-\n    |                    |\n-   |                    the evaluated program panicked at 'internal error: entered unreachable code', $DIR/const_panic.rs:27:20\n+   |                    the evaluated program panicked at 'internal error: entered unreachable code', $DIR/const_panic.rs:34:20\n    |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: any use of this value will cause an error\n-  --> $DIR/const_panic.rs:30:20\n+  --> $DIR/const_panic.rs:38:20\n    |\n LL | const X_CORE: () = core::unimplemented!();\n    | -------------------^^^^^^^^^^^^^^^^^^^^^^-\n    |                    |\n-   |                    the evaluated program panicked at 'not implemented', $DIR/const_panic.rs:30:20\n+   |                    the evaluated program panicked at 'not implemented', $DIR/const_panic.rs:38:20\n    |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: any use of this value will cause an error\n-  --> $DIR/const_panic.rs:33:20\n+  --> $DIR/const_panic.rs:42:20\n    |\n LL | const W_CORE: () = core::panic!(MSG);\n    | -------------------^^^^^^^^^^^^^^^^^-\n    |                    |\n-   |                    the evaluated program panicked at 'hello', $DIR/const_panic.rs:33:20\n+   |                    the evaluated program panicked at 'hello', $DIR/const_panic.rs:42:20\n    |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 10 previous errors"}, {"sha": "0eb1e3eb94e52589ac5ee7f65de4694ba3f2c0c9", "filename": "src/test/ui/consts/const-eval/const_panic_libcore_bin.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic_libcore_bin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic_libcore_bin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic_libcore_bin.rs?ref=120b2a704a60d4341286bd82f6e638c65ca169b6", "patch": "@@ -8,12 +8,15 @@ use core::panic::PanicInfo;\n \n const Z: () = panic!(\"cheese\");\n //~^ ERROR any use of this value will cause an error\n+//~| WARN this was previously accepted by the compiler but is being phased out\n \n const Y: () = unreachable!();\n //~^ ERROR any use of this value will cause an error\n+//~| WARN this was previously accepted by the compiler but is being phased out\n \n const X: () = unimplemented!();\n //~^ ERROR any use of this value will cause an error\n+//~| WARN this was previously accepted by the compiler but is being phased out\n \n #[lang = \"eh_personality\"]\n fn eh() {}"}, {"sha": "7c33610faff0a272dc67b7dcc598c7df8d0d12fb", "filename": "src/test/ui/consts/const-eval/const_panic_libcore_bin.stderr", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic_libcore_bin.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic_libcore_bin.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic_libcore_bin.stderr?ref=120b2a704a60d4341286bd82f6e638c65ca169b6", "patch": "@@ -7,26 +7,32 @@ LL | const Z: () = panic!(\"cheese\");\n    |               the evaluated program panicked at 'cheese', $DIR/const_panic_libcore_bin.rs:9:15\n    |\n    = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: any use of this value will cause an error\n-  --> $DIR/const_panic_libcore_bin.rs:12:15\n+  --> $DIR/const_panic_libcore_bin.rs:13:15\n    |\n LL | const Y: () = unreachable!();\n    | --------------^^^^^^^^^^^^^^-\n    |               |\n-   |               the evaluated program panicked at 'internal error: entered unreachable code', $DIR/const_panic_libcore_bin.rs:12:15\n+   |               the evaluated program panicked at 'internal error: entered unreachable code', $DIR/const_panic_libcore_bin.rs:13:15\n    |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: any use of this value will cause an error\n-  --> $DIR/const_panic_libcore_bin.rs:15:15\n+  --> $DIR/const_panic_libcore_bin.rs:17:15\n    |\n LL | const X: () = unimplemented!();\n    | --------------^^^^^^^^^^^^^^^^-\n    |               |\n-   |               the evaluated program panicked at 'not implemented', $DIR/const_panic_libcore_bin.rs:15:15\n+   |               the evaluated program panicked at 'not implemented', $DIR/const_panic_libcore_bin.rs:17:15\n    |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 3 previous errors"}, {"sha": "c6a623b29327699971454ae03676a2bf090e8e8d", "filename": "src/test/ui/consts/const-eval/const_raw_ptr_ops2.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_raw_ptr_ops2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_raw_ptr_ops2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_raw_ptr_ops2.rs?ref=120b2a704a60d4341286bd82f6e638c65ca169b6", "patch": "@@ -6,8 +6,11 @@ fn main() {}\n const Y: usize = unsafe { 42usize as *const i32 as usize + 1 };\n // unconst and bad, will thus error in miri\n const Y2: usize = unsafe { &1 as *const i32 as usize + 1 }; //~ ERROR any use of this\n+//~| WARN this was previously accepted by the compiler but is being phased out\n // unconst and fine\n const Z: i32 = unsafe { *(&1 as *const i32) };\n // unconst and bad, will thus error in miri\n const Z2: i32 = unsafe { *(42 as *const i32) }; //~ ERROR any use of this value will cause\n+//~| WARN this was previously accepted by the compiler but is being phased out\n const Z3: i32 = unsafe { *(44 as *const i32) }; //~ ERROR any use of this value will cause\n+//~| WARN this was previously accepted by the compiler but is being phased out"}, {"sha": "f207674ac1d019324337fbeb992ef1bda0f0ac43", "filename": "src/test/ui/consts/const-eval/const_raw_ptr_ops2.stderr", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_raw_ptr_ops2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_raw_ptr_ops2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_raw_ptr_ops2.stderr?ref=120b2a704a60d4341286bd82f6e638c65ca169b6", "patch": "@@ -7,22 +7,30 @@ LL | const Y2: usize = unsafe { &1 as *const i32 as usize + 1 };\n    |                            \"pointer-to-integer cast\" needs an rfc before being allowed inside constants\n    |\n    = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n-  --> $DIR/const_raw_ptr_ops2.rs:12:26\n+  --> $DIR/const_raw_ptr_ops2.rs:13:26\n    |\n LL | const Z2: i32 = unsafe { *(42 as *const i32) };\n    | -------------------------^^^^^^^^^^^^^^^^^^^---\n    |                          |\n    |                          unable to turn bytes into a pointer\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n-  --> $DIR/const_raw_ptr_ops2.rs:13:26\n+  --> $DIR/const_raw_ptr_ops2.rs:15:26\n    |\n LL | const Z3: i32 = unsafe { *(44 as *const i32) };\n    | -------------------------^^^^^^^^^^^^^^^^^^^---\n    |                          |\n    |                          unable to turn bytes into a pointer\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: aborting due to 3 previous errors\n "}, {"sha": "185d11605fdb589c91b5680fd21a4c4690803a9f", "filename": "src/test/ui/consts/const-eval/dangling.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fdangling.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fdangling.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fdangling.rs?ref=120b2a704a60d4341286bd82f6e638c65ca169b6", "patch": "@@ -6,8 +6,10 @@ use std::mem;\n const TEST: () = { unsafe { //~ NOTE\n     let slice: *const [u8] = mem::transmute((1usize, usize::MAX));\n     let _val = &*slice; //~ ERROR: any use of this value will cause an error\n-    //~^ NOTE: slice is bigger than largest supported object\n-    //~^^ on by default\n+    //~| NOTE: slice is bigger than largest supported object\n+    //~| on by default\n+    //~| WARN this was previously accepted by the compiler but is being phased out\n+    //~| NOTE\n } };\n \n fn main() {}"}, {"sha": "a7f7cf13c5b0f3b318d53df8f6dfe9cb9d66a994", "filename": "src/test/ui/consts/const-eval/dangling.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fdangling.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fdangling.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fdangling.stderr?ref=120b2a704a60d4341286bd82f6e638c65ca169b6", "patch": "@@ -6,11 +6,14 @@ LL | |     let slice: *const [u8] = mem::transmute((1usize, usize::MAX));\n LL | |     let _val = &*slice;\n    | |                ^^^^^^^ invalid metadata in wide pointer: slice is bigger than largest supported object\n LL | |\n+...  |\n LL | |\n LL | | } };\n    | |____-\n    |\n    = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: aborting due to previous error\n "}, {"sha": "b79ce4a523f9671ffe2b73fef8c6c4963bbde300", "filename": "src/test/ui/consts/const-eval/erroneous-const.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Ferroneous-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Ferroneous-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Ferroneous-const.rs?ref=120b2a704a60d4341286bd82f6e638c65ca169b6", "patch": "@@ -5,6 +5,7 @@ struct PrintName<T>(T);\n impl<T> PrintName<T> {\n     const VOID: () = [()][2]; //~WARN any use of this value will cause an error\n     //~^ WARN this operation will panic at runtime\n+    //~| WARN this was previously accepted by the compiler but is being phased out\n }\n \n const fn no_codegen<T>() {"}, {"sha": "16ed596628bf569b9c6198f967179e8124f08b19", "filename": "src/test/ui/consts/const-eval/erroneous-const.stderr", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Ferroneous-const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Ferroneous-const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Ferroneous-const.stderr?ref=120b2a704a60d4341286bd82f6e638c65ca169b6", "patch": "@@ -23,18 +23,20 @@ note: the lint level is defined here\n    |\n LL | #![warn(const_err, unconditional_panic)]\n    |         ^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error[E0080]: could not evaluate static initializer\n-  --> $DIR/erroneous-const.rs:12:17\n+  --> $DIR/erroneous-const.rs:13:17\n    |\n LL |         let _ = PrintName::<T>::VOID;\n    |                 ^^^^^^^^^^^^^^^^^^^^\n    |                 |\n    |                 referenced constant has errors\n-   |                 inside `no_codegen::<i32>` at $DIR/erroneous-const.rs:12:17\n+   |                 inside `no_codegen::<i32>` at $DIR/erroneous-const.rs:13:17\n ...\n LL | pub static FOO: () = no_codegen::<i32>();\n-   |                      ------------------- inside `FOO` at $DIR/erroneous-const.rs:16:22\n+   |                      ------------------- inside `FOO` at $DIR/erroneous-const.rs:17:22\n \n error: aborting due to previous error; 2 warnings emitted\n "}, {"sha": "43d79badd72826e8d177523e8b285af8ef7c5f45", "filename": "src/test/ui/consts/const-eval/heap/alloc_intrinsic_errors.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fheap%2Falloc_intrinsic_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fheap%2Falloc_intrinsic_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fheap%2Falloc_intrinsic_errors.rs?ref=120b2a704a60d4341286bd82f6e638c65ca169b6", "patch": "@@ -9,6 +9,7 @@ const fn foo() -> i32 {\n     unsafe {\n         let _ = intrinsics::const_allocate(4, 3) as * mut i32;\n         //~^ error: any use of this value will cause an error [const_err]\n+        //~| WARN this was previously accepted by the compiler but is being phased out\n     }\n     1\n "}, {"sha": "3d529ab4ca6e599aa04bcc50b884376a76a1c813", "filename": "src/test/ui/consts/const-eval/heap/alloc_intrinsic_errors.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fheap%2Falloc_intrinsic_errors.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fheap%2Falloc_intrinsic_errors.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fheap%2Falloc_intrinsic_errors.stderr?ref=120b2a704a60d4341286bd82f6e638c65ca169b6", "patch": "@@ -12,6 +12,8 @@ LL |         let _ = intrinsics::const_allocate(4, 3) as * mut i32;\n    |                 inside `FOO` at $DIR/alloc_intrinsic_errors.rs:7:18\n    |\n    = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: aborting due to previous error\n "}, {"sha": "8064cc49359eef4c36681f53155d2295c4e846c8", "filename": "src/test/ui/consts/const-eval/index-out-of-bounds-never-type.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Findex-out-of-bounds-never-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Findex-out-of-bounds-never-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Findex-out-of-bounds-never-type.rs?ref=120b2a704a60d4341286bd82f6e638c65ca169b6", "patch": "@@ -9,6 +9,7 @@ struct PrintName<T>(T);\n impl<T> PrintName<T> {\n     const VOID: ! = { let x = 0 * std::mem::size_of::<T>(); [][x] };\n     //~^ WARN any use of this value will cause an error\n+    //~| WARN this was previously accepted by the compiler but is being phased out\n \n }\n "}, {"sha": "73664fa49d189e8ee7d49d8cdc8d395a26bc01b3", "filename": "src/test/ui/consts/const-eval/index-out-of-bounds-never-type.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Findex-out-of-bounds-never-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Findex-out-of-bounds-never-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Findex-out-of-bounds-never-type.stderr?ref=120b2a704a60d4341286bd82f6e638c65ca169b6", "patch": "@@ -11,9 +11,11 @@ note: the lint level is defined here\n    |\n LL | #![warn(const_err, unconditional_panic)]\n    |         ^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: erroneous constant encountered\n-  --> $DIR/index-out-of-bounds-never-type.rs:16:13\n+  --> $DIR/index-out-of-bounds-never-type.rs:17:13\n    |\n LL |     let _ = PrintName::<T>::VOID;\n    |             ^^^^^^^^^^^^^^^^^^^^"}, {"sha": "e15f8771dd73b1ff63cae00a4f2b32384288411a", "filename": "src/test/ui/consts/const-eval/issue-43197.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-43197.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-43197.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-43197.rs?ref=120b2a704a60d4341286bd82f6e638c65ca169b6", "patch": "@@ -9,11 +9,15 @@ const fn foo(x: u32) -> u32 {\n fn main() {\n     const X: u32 = 0 - 1;\n     //~^ WARN any use of this value will cause\n+    //~| WARN this was previously accepted by the compiler but is being phased out\n     const Y: u32 = foo(0 - 1);\n     //~^ WARN any use of this value will cause\n+    //~| WARN this was previously accepted by the compiler but is being phased out\n     println!(\"{} {}\", X, Y);\n     //~^ ERROR evaluation of constant value failed\n     //~| ERROR evaluation of constant value failed\n     //~| WARN erroneous constant used [const_err]\n     //~| WARN erroneous constant used [const_err]\n+    //~| WARN this was previously accepted by the compiler but is being phased out\n+    //~| WARN this was previously accepted by the compiler but is being phased out\n }"}, {"sha": "d4d8cbc669a7bf3a4a970eddda29d2cbf6f2e61d", "filename": "src/test/ui/consts/const-eval/issue-43197.stderr", "status": "modified", "additions": 16, "deletions": 5, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-43197.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-43197.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-43197.stderr?ref=120b2a704a60d4341286bd82f6e638c65ca169b6", "patch": "@@ -11,38 +11,49 @@ note: the lint level is defined here\n    |\n LL | #![warn(const_err)]\n    |         ^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n warning: any use of this value will cause an error\n-  --> $DIR/issue-43197.rs:12:24\n+  --> $DIR/issue-43197.rs:13:24\n    |\n LL |     const Y: u32 = foo(0 - 1);\n    |     -------------------^^^^^--\n    |                        |\n    |                        attempt to compute `0_u32 - 1_u32`, which would overflow\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error[E0080]: evaluation of constant value failed\n-  --> $DIR/issue-43197.rs:14:23\n+  --> $DIR/issue-43197.rs:16:23\n    |\n LL |     println!(\"{} {}\", X, Y);\n    |                       ^ referenced constant has errors\n \n warning: erroneous constant used\n-  --> $DIR/issue-43197.rs:14:23\n+  --> $DIR/issue-43197.rs:16:23\n    |\n LL |     println!(\"{} {}\", X, Y);\n    |                       ^ referenced constant has errors\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error[E0080]: evaluation of constant value failed\n-  --> $DIR/issue-43197.rs:14:26\n+  --> $DIR/issue-43197.rs:16:26\n    |\n LL |     println!(\"{} {}\", X, Y);\n    |                          ^ referenced constant has errors\n \n warning: erroneous constant used\n-  --> $DIR/issue-43197.rs:14:26\n+  --> $DIR/issue-43197.rs:16:26\n    |\n LL |     println!(\"{} {}\", X, Y);\n    |                          ^ referenced constant has errors\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: aborting due to 2 previous errors; 4 warnings emitted\n "}, {"sha": "9fd9e8f36472d548961fde5565af967ddbf9102b", "filename": "src/test/ui/consts/const-eval/issue-49296.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-49296.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-49296.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-49296.rs?ref=120b2a704a60d4341286bd82f6e638c65ca169b6", "patch": "@@ -18,6 +18,7 @@ const fn wat(x: u64) -> &'static u64 {\n }\n const X: u64 = *wat(42);\n //~^ ERROR any use of this value will cause an error\n+//~| WARN this was previously accepted by the compiler but is being phased out\n \n fn main() {\n     println!(\"{}\", X);"}, {"sha": "0389471edb57ce84efaf6d9ec01d879c2a99394d", "filename": "src/test/ui/consts/const-eval/issue-49296.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-49296.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-49296.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-49296.stderr?ref=120b2a704a60d4341286bd82f6e638c65ca169b6", "patch": "@@ -7,6 +7,8 @@ LL | const X: u64 = *wat(42);\n    |                pointer to alloc1 was dereferenced after this allocation got freed\n    |\n    = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: aborting due to previous error\n "}, {"sha": "15f4de0ae1b671c5c6b3c8b667a6472949eba204", "filename": "src/test/ui/consts/const-eval/issue-50814-2.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-50814-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-50814-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-50814-2.rs?ref=120b2a704a60d4341286bd82f6e638c65ca169b6", "patch": "@@ -12,6 +12,7 @@ struct A<T>(T);\n \n impl<T: C> Foo<T> for A<T> {\n     const BAR: usize = [5, 6, 7][T::BOO]; //~ ERROR any use of this value will cause an error\n+    //~| WARN this was previously accepted by the compiler but is being phased out\n }\n \n fn foo<T: C>() -> &'static usize {"}, {"sha": "0c520165496768873e9bbc5879ca2c9bebba0bf0", "filename": "src/test/ui/consts/const-eval/issue-50814-2.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-50814-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-50814-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-50814-2.stderr?ref=120b2a704a60d4341286bd82f6e638c65ca169b6", "patch": "@@ -7,9 +7,11 @@ LL |     const BAR: usize = [5, 6, 7][T::BOO];\n    |                        index out of bounds: the length is 3 but the index is 42\n    |\n    = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error[E0080]: evaluation of constant value failed\n-  --> $DIR/issue-50814-2.rs:18:6\n+  --> $DIR/issue-50814-2.rs:19:6\n    |\n LL |     &<A<T> as Foo<T>>::BAR\n    |      ^^^^^^^^^^^^^^^^^^^^^ referenced constant has errors"}, {"sha": "98229f919dd13ac9c8f27aa1ab7e06862274650d", "filename": "src/test/ui/consts/const-eval/issue-50814.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-50814.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-50814.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-50814.rs?ref=120b2a704a60d4341286bd82f6e638c65ca169b6", "patch": "@@ -14,6 +14,7 @@ struct Sum<A,B>(A,B);\n impl<A: Unsigned, B: Unsigned> Unsigned for Sum<A,B> {\n     const MAX: u8 = A::MAX + B::MAX;\n     //~^ ERROR any use of this value will cause an error [const_err]\n+    //~| WARN this was previously accepted by the compiler but is being phased out\n }\n \n fn foo<T>(_: T) -> &'static u8 {"}, {"sha": "cf82d1eef3e4597f9c54eb73a3262a725df34cf3", "filename": "src/test/ui/consts/const-eval/issue-50814.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-50814.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-50814.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-50814.stderr?ref=120b2a704a60d4341286bd82f6e638c65ca169b6", "patch": "@@ -7,9 +7,11 @@ LL |     const MAX: u8 = A::MAX + B::MAX;\n    |                     attempt to compute `u8::MAX + u8::MAX`, which would overflow\n    |\n    = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error[E0080]: evaluation of constant value failed\n-  --> $DIR/issue-50814.rs:20:6\n+  --> $DIR/issue-50814.rs:21:6\n    |\n LL |     &Sum::<U8,U8>::MAX\n    |      ^^^^^^^^^^^^^^^^^ referenced constant has errors"}, {"sha": "f76440298b3ca8e72c02a657acbb51fb1bcb5a4f", "filename": "src/test/ui/consts/const-eval/panic-assoc-never-type.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpanic-assoc-never-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpanic-assoc-never-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpanic-assoc-never-type.rs?ref=120b2a704a60d4341286bd82f6e638c65ca169b6", "patch": "@@ -10,6 +10,7 @@ struct PrintName;\n impl PrintName {\n     const VOID: ! = panic!();\n     //~^ WARN any use of this value will cause an error\n+    //~| WARN this was previously accepted by the compiler but is being phased out\n }\n \n fn main() {"}, {"sha": "28a3ebede5038f4e1cbde1a6123a56ef15b0b85f", "filename": "src/test/ui/consts/const-eval/panic-assoc-never-type.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpanic-assoc-never-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpanic-assoc-never-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpanic-assoc-never-type.stderr?ref=120b2a704a60d4341286bd82f6e638c65ca169b6", "patch": "@@ -11,10 +11,12 @@ note: the lint level is defined here\n    |\n LL | #![warn(const_err)]\n    |         ^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = note: this warning originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0080]: erroneous constant used\n-  --> $DIR/panic-assoc-never-type.rs:16:13\n+  --> $DIR/panic-assoc-never-type.rs:17:13\n    |\n LL |     let _ = PrintName::VOID;\n    |             ^^^^^^^^^^^^^^^ referenced constant has errors"}, {"sha": "c5139c575b15f009b7c3daf96716dd51376ae933", "filename": "src/test/ui/consts/const-eval/panic-never-type.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpanic-never-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpanic-never-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpanic-never-type.rs?ref=120b2a704a60d4341286bd82f6e638c65ca169b6", "patch": "@@ -7,6 +7,7 @@\n \n const VOID: ! = panic!();\n //~^ WARN any use of this value will cause an error\n+//~| WARN this was previously accepted by the compiler but is being phased out\n \n fn main() {\n     let _ = VOID;"}, {"sha": "8f67dd6a8ba427c3f50b62236a9d1c5df306f580", "filename": "src/test/ui/consts/const-eval/panic-never-type.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpanic-never-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpanic-never-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpanic-never-type.stderr?ref=120b2a704a60d4341286bd82f6e638c65ca169b6", "patch": "@@ -11,10 +11,12 @@ note: the lint level is defined here\n    |\n LL | #![warn(const_err)]\n    |         ^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = note: this warning originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0080]: erroneous constant used\n-  --> $DIR/panic-never-type.rs:12:13\n+  --> $DIR/panic-never-type.rs:13:13\n    |\n LL |     let _ = VOID;\n    |             ^^^^ referenced constant has errors"}, {"sha": "6f266801bdb4a65f5b6659f2f76d74b2cae35005", "filename": "src/test/ui/consts/const-eval/promoted_errors.noopt.stderr", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.noopt.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.noopt.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.noopt.stderr?ref=120b2a704a60d4341286bd82f6e638c65ca169b6", "patch": "@@ -6,12 +6,12 @@ LL |       0 - 1\n    |       |\n    |       attempt to compute `0_u32 - 1_u32`, which would overflow\n    |       inside `overflow` at $DIR/promoted_errors.rs:13:5\n-   |       inside `X` at $DIR/promoted_errors.rs:31:29\n+   |       inside `X` at $DIR/promoted_errors.rs:33:29\n ...\n LL | / const X: () = {\n LL | |     let _x: &'static u32 = &overflow();\n LL | |\n-LL | |     let _x: &'static i32 = &div_by_zero1();\n+LL | |\n ...  |\n LL | |     let _x: &'static i32 = &oob();\n LL | | };\n@@ -22,19 +22,24 @@ note: the lint level is defined here\n    |\n LL | #![warn(const_err, arithmetic_overflow, unconditional_panic)]\n    |         ^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n warning: any use of this value will cause an error\n-  --> $DIR/promoted_errors.rs:31:28\n+  --> $DIR/promoted_errors.rs:33:28\n    |\n LL | / const X: () = {\n LL | |     let _x: &'static u32 = &overflow();\n    | |                            ^^^^^^^^^^^ referenced constant has errors\n LL | |\n-LL | |     let _x: &'static i32 = &div_by_zero1();\n+LL | |\n ...  |\n LL | |     let _x: &'static i32 = &oob();\n LL | | };\n    | |__-\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n warning: 2 warnings emitted\n "}, {"sha": "892f57bfdfc1bc72c937c68c4e6bf78669b6b44b", "filename": "src/test/ui/consts/const-eval/promoted_errors.opt.stderr", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.opt.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.opt.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.opt.stderr?ref=120b2a704a60d4341286bd82f6e638c65ca169b6", "patch": "@@ -1,17 +1,17 @@\n warning: any use of this value will cause an error\n-  --> $DIR/promoted_errors.rs:17:5\n+  --> $DIR/promoted_errors.rs:18:5\n    |\n LL |       1 / 0\n    |       ^^^^^\n    |       |\n    |       attempt to divide `1_i32` by zero\n-   |       inside `div_by_zero1` at $DIR/promoted_errors.rs:17:5\n-   |       inside `X` at $DIR/promoted_errors.rs:33:29\n+   |       inside `div_by_zero1` at $DIR/promoted_errors.rs:18:5\n+   |       inside `X` at $DIR/promoted_errors.rs:36:29\n ...\n LL | / const X: () = {\n LL | |     let _x: &'static u32 = &overflow();\n LL | |\n-LL | |     let _x: &'static i32 = &div_by_zero1();\n+LL | |\n ...  |\n LL | |     let _x: &'static i32 = &oob();\n LL | | };\n@@ -22,19 +22,25 @@ note: the lint level is defined here\n    |\n LL | #![warn(const_err, arithmetic_overflow, unconditional_panic)]\n    |         ^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n warning: any use of this value will cause an error\n-  --> $DIR/promoted_errors.rs:33:28\n+  --> $DIR/promoted_errors.rs:36:28\n    |\n LL | / const X: () = {\n LL | |     let _x: &'static u32 = &overflow();\n LL | |\n+LL | |\n LL | |     let _x: &'static i32 = &div_by_zero1();\n    | |                            ^^^^^^^^^^^^^^^ referenced constant has errors\n ...  |\n LL | |     let _x: &'static i32 = &oob();\n LL | | };\n    | |__-\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n warning: 2 warnings emitted\n "}, {"sha": "6f266801bdb4a65f5b6659f2f76d74b2cae35005", "filename": "src/test/ui/consts/const-eval/promoted_errors.opt_with_overflow_checks.stderr", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.opt_with_overflow_checks.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.opt_with_overflow_checks.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.opt_with_overflow_checks.stderr?ref=120b2a704a60d4341286bd82f6e638c65ca169b6", "patch": "@@ -6,12 +6,12 @@ LL |       0 - 1\n    |       |\n    |       attempt to compute `0_u32 - 1_u32`, which would overflow\n    |       inside `overflow` at $DIR/promoted_errors.rs:13:5\n-   |       inside `X` at $DIR/promoted_errors.rs:31:29\n+   |       inside `X` at $DIR/promoted_errors.rs:33:29\n ...\n LL | / const X: () = {\n LL | |     let _x: &'static u32 = &overflow();\n LL | |\n-LL | |     let _x: &'static i32 = &div_by_zero1();\n+LL | |\n ...  |\n LL | |     let _x: &'static i32 = &oob();\n LL | | };\n@@ -22,19 +22,24 @@ note: the lint level is defined here\n    |\n LL | #![warn(const_err, arithmetic_overflow, unconditional_panic)]\n    |         ^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n warning: any use of this value will cause an error\n-  --> $DIR/promoted_errors.rs:31:28\n+  --> $DIR/promoted_errors.rs:33:28\n    |\n LL | / const X: () = {\n LL | |     let _x: &'static u32 = &overflow();\n    | |                            ^^^^^^^^^^^ referenced constant has errors\n LL | |\n-LL | |     let _x: &'static i32 = &div_by_zero1();\n+LL | |\n ...  |\n LL | |     let _x: &'static i32 = &oob();\n LL | | };\n    | |__-\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n warning: 2 warnings emitted\n "}, {"sha": "7840f67c216c075a2597da756eadb013bb04c908", "filename": "src/test/ui/consts/const-eval/promoted_errors.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.rs?ref=120b2a704a60d4341286bd82f6e638c65ca169b6", "patch": "@@ -12,30 +12,33 @@\n const fn overflow() -> u32 {\n     0 - 1\n     //[opt_with_overflow_checks,noopt]~^ WARN any use of this value will cause an error\n+    //[opt_with_overflow_checks,noopt]~| WARN this was previously accepted by the compiler\n }\n const fn div_by_zero1() -> i32 {\n     1 / 0\n     //[opt]~^ WARN any use of this value will cause an error\n+    //[opt]~| WARN this was previously accepted by the compiler but is being phased out\n }\n const fn div_by_zero2() -> i32 {\n-    1 / (1-1)\n+    1 / (1 - 1)\n }\n const fn div_by_zero3() -> i32 {\n     1 / (false as i32)\n }\n const fn oob() -> i32 {\n-    [1,2,3][4]\n+    [1, 2, 3][4]\n }\n \n const X: () = {\n     let _x: &'static u32 = &overflow();\n     //[opt_with_overflow_checks,noopt]~^ WARN any use of this value will cause an error\n+    //[opt_with_overflow_checks,noopt]~| WARN this was previously accepted by the compiler\n     let _x: &'static i32 = &div_by_zero1();\n     //[opt]~^ WARN any use of this value will cause an error\n+    //[opt]~| WARN this was previously accepted by the compiler but is being phased out\n     let _x: &'static i32 = &div_by_zero2();\n     let _x: &'static i32 = &div_by_zero3();\n     let _x: &'static i32 = &oob();\n };\n \n-fn main() {\n-}\n+fn main() {}"}, {"sha": "5faacd556d47957e632d0266f1c3228391b142db", "filename": "src/test/ui/consts/const-eval/pub_const_err.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpub_const_err.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpub_const_err.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpub_const_err.rs?ref=120b2a704a60d4341286bd82f6e638c65ca169b6", "patch": "@@ -5,5 +5,6 @@\n \n pub const Z: u32 = 0 - 1;\n //~^ WARN any use of this value will cause an error\n+//~| WARN this was previously accepted by the compiler but is being phased out\n \n pub type Foo = [i32; 0 - 1];"}, {"sha": "dd47dca2b2e40e8c3c8e3b8d968e66c30475f2c2", "filename": "src/test/ui/consts/const-eval/pub_const_err.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpub_const_err.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpub_const_err.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpub_const_err.stderr?ref=120b2a704a60d4341286bd82f6e638c65ca169b6", "patch": "@@ -11,6 +11,8 @@ note: the lint level is defined here\n    |\n LL | #![warn(const_err)]\n    |         ^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n warning: 1 warning emitted\n "}, {"sha": "82eae25121e418a0e9d0aa2d17b4957e283782ff", "filename": "src/test/ui/consts/const-eval/pub_const_err_bin.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpub_const_err_bin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpub_const_err_bin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpub_const_err_bin.rs?ref=120b2a704a60d4341286bd82f6e638c65ca169b6", "patch": "@@ -3,6 +3,7 @@\n \n pub const Z: u32 = 0 - 1;\n //~^ WARN any use of this value will cause an error\n+//~| WARN this was previously accepted by the compiler but is being phased out\n \n pub type Foo = [i32; 0 - 1];\n "}, {"sha": "9f413fb8fd770da3b70c45c64fbb51c613f702fe", "filename": "src/test/ui/consts/const-eval/pub_const_err_bin.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpub_const_err_bin.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpub_const_err_bin.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpub_const_err_bin.stderr?ref=120b2a704a60d4341286bd82f6e638c65ca169b6", "patch": "@@ -11,6 +11,8 @@ note: the lint level is defined here\n    |\n LL | #![warn(const_err)]\n    |         ^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n warning: 1 warning emitted\n "}, {"sha": "e4ced600b4cc4f3564aa7c060abfa72e4888b397", "filename": "src/test/ui/consts/const-eval/ub-nonnull.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-nonnull.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-nonnull.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-nonnull.rs?ref=120b2a704a60d4341286bd82f6e638c65ca169b6", "patch": "@@ -16,6 +16,7 @@ const OUT_OF_BOUNDS_PTR: NonNull<u8> = { unsafe {\n     let ptr: &[u8; 256] = mem::transmute(&0u8); // &0 gets promoted so it does not dangle\n     // Use address-of-element for pointer arithmetic. This could wrap around to NULL!\n     let out_of_bounds_ptr = &ptr[255]; //~ ERROR any use of this value will cause an error\n+    //~| WARN this was previously accepted by the compiler but is being phased out\n     mem::transmute(out_of_bounds_ptr)\n } };\n "}, {"sha": "94496b77fe7732f5d4ad5f6adb00d3f51f8bbb0c", "filename": "src/test/ui/consts/const-eval/ub-nonnull.stderr", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-nonnull.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-nonnull.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-nonnull.stderr?ref=120b2a704a60d4341286bd82f6e638c65ca169b6", "patch": "@@ -14,6 +14,7 @@ LL | |     let ptr: &[u8; 256] = mem::transmute(&0u8); // &0 gets promoted so it\n LL | |     // Use address-of-element for pointer arithmetic. This could wrap around to NULL!\n LL | |     let out_of_bounds_ptr = &ptr[255];\n    | |                              ^^^^^^^^ memory access failed: pointer must be in-bounds at offset 256, but is outside bounds of alloc10 which has size 1\n+LL | |\n LL | |     mem::transmute(out_of_bounds_ptr)\n LL | | } };\n    | |____-\n@@ -23,41 +24,43 @@ note: the lint level is defined here\n    |\n LL | #[deny(const_err)] // this triggers a `const_err` so validation does not even happen\n    |        ^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-nonnull.rs:22:1\n+  --> $DIR/ub-nonnull.rs:23:1\n    |\n LL | const NULL_U8: NonZeroU8 = unsafe { mem::transmute(0u8) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered 0, but expected something greater or equal to 1\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-nonnull.rs:24:1\n+  --> $DIR/ub-nonnull.rs:25:1\n    |\n LL | const NULL_USIZE: NonZeroUsize = unsafe { mem::transmute(0usize) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered 0, but expected something greater or equal to 1\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-nonnull.rs:32:1\n+  --> $DIR/ub-nonnull.rs:33:1\n    |\n LL | const UNINIT: NonZeroU8 = unsafe { MaybeUninit { uninit: () }.init };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered uninitialized bytes at .0, but expected initialized plain (non-pointer) bytes\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-nonnull.rs:40:1\n+  --> $DIR/ub-nonnull.rs:41:1\n    |\n LL | const BAD_RANGE1: RestrictedRange1 = unsafe { RestrictedRange1(42) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered 42, but expected something in the range 10..=30\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-nonnull.rs:46:1\n+  --> $DIR/ub-nonnull.rs:47:1\n    |\n LL | const BAD_RANGE2: RestrictedRange2 = unsafe { RestrictedRange2(20) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered 20, but expected something less or equal to 10, or greater or equal to 30"}, {"sha": "3b4523681002edb4eace6fec1d84103bff2b60d9", "filename": "src/test/ui/consts/const-eval/unused-broken-const.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funused-broken-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funused-broken-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funused-broken-const.rs?ref=120b2a704a60d4341286bd82f6e638c65ca169b6", "patch": "@@ -4,5 +4,6 @@\n \n const FOO: i32 = [][0];\n //~^ ERROR any use of this value will cause an error\n+//~| WARN this was previously accepted by the compiler but is being phased out\n \n fn main() {}"}, {"sha": "2ce60ec16a33f5ea5483eff9d0c9a801df65e359", "filename": "src/test/ui/consts/const-eval/unused-broken-const.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funused-broken-const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funused-broken-const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funused-broken-const.stderr?ref=120b2a704a60d4341286bd82f6e638c65ca169b6", "patch": "@@ -7,6 +7,8 @@ LL | const FOO: i32 = [][0];\n    |                  index out of bounds: the length is 0 but the index is 0\n    |\n    = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: aborting due to previous error\n "}, {"sha": "10820986fa7d3f603e89e286c71c555507aa2e14", "filename": "src/test/ui/consts/const-eval/unwind-abort.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funwind-abort.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funwind-abort.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funwind-abort.rs?ref=120b2a704a60d4341286bd82f6e638c65ca169b6", "patch": "@@ -3,6 +3,7 @@\n #[unwind(aborts)]\n const fn foo() {\n     panic!() //~ ERROR any use of this value will cause an error [const_err]\n+    //~| WARN this was previously accepted by the compiler but is being phased out\n }\n \n const _: () = foo();"}, {"sha": "f13f2bfe9b110a58263320f96b1c4d32e594a8f1", "filename": "src/test/ui/consts/const-eval/unwind-abort.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funwind-abort.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funwind-abort.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funwind-abort.stderr?ref=120b2a704a60d4341286bd82f6e638c65ca169b6", "patch": "@@ -6,12 +6,14 @@ LL |     panic!()\n    |     |\n    |     the evaluated program panicked at 'explicit panic', $DIR/unwind-abort.rs:5:5\n    |     inside `foo` at $SRC_DIR/std/src/panic.rs:LL:COL\n-   |     inside `_` at $DIR/unwind-abort.rs:8:15\n+   |     inside `_` at $DIR/unwind-abort.rs:9:15\n ...\n LL | const _: () = foo();\n    | --------------------\n    |\n    = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error"}, {"sha": "4e1c71cd6001342ffa0b113eab589af916a88a0a", "filename": "src/test/ui/consts/const-eval/validate_uninhabited_zsts.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fvalidate_uninhabited_zsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fvalidate_uninhabited_zsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fvalidate_uninhabited_zsts.rs?ref=120b2a704a60d4341286bd82f6e638c65ca169b6", "patch": "@@ -5,6 +5,7 @@ const fn foo() -> ! {\n     unsafe { std::mem::transmute(()) }\n     //~^ WARN any use of this value will cause an error [const_err]\n     //~| WARN the type `!` does not permit zero-initialization [invalid_value]\n+    //~| WARN this was previously accepted by the compiler but is being phased out\n }\n \n #[derive(Clone, Copy)]"}, {"sha": "3f22fac11f65da82d37b8dd2d573d2a3e61c1326", "filename": "src/test/ui/consts/const-eval/validate_uninhabited_zsts.stderr", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fvalidate_uninhabited_zsts.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fvalidate_uninhabited_zsts.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fvalidate_uninhabited_zsts.stderr?ref=120b2a704a60d4341286bd82f6e638c65ca169b6", "patch": "@@ -6,19 +6,21 @@ LL |     unsafe { std::mem::transmute(()) }\n    |              |\n    |              transmuting to uninhabited type\n    |              inside `foo` at $DIR/validate_uninhabited_zsts.rs:5:14\n-   |              inside `FOO` at $DIR/validate_uninhabited_zsts.rs:14:26\n+   |              inside `FOO` at $DIR/validate_uninhabited_zsts.rs:15:26\n ...\n LL | const FOO: [Empty; 3] = [foo(); 3];\n    | -----------------------------------\n    |\n note: the lint level is defined here\n-  --> $DIR/validate_uninhabited_zsts.rs:13:8\n+  --> $DIR/validate_uninhabited_zsts.rs:14:8\n    |\n LL | #[warn(const_err)]\n    |        ^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/validate_uninhabited_zsts.rs:17:1\n+  --> $DIR/validate_uninhabited_zsts.rs:18:1\n    |\n LL | const BAR: [Empty; 3] = [unsafe { std::mem::transmute(()) }; 3];\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered a value of uninhabited type Empty at [0]\n@@ -38,7 +40,7 @@ LL |     unsafe { std::mem::transmute(()) }\n    = note: the `!` type has no valid value\n \n warning: the type `Empty` does not permit zero-initialization\n-  --> $DIR/validate_uninhabited_zsts.rs:17:35\n+  --> $DIR/validate_uninhabited_zsts.rs:18:35\n    |\n LL | const BAR: [Empty; 3] = [unsafe { std::mem::transmute(()) }; 3];\n    |                                   ^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "440c42e32ef3958d134a4dd28a78a1d267762f1c", "filename": "src/test/ui/consts/const-external-macro-const-err.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftest%2Fui%2Fconsts%2Fconst-external-macro-const-err.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftest%2Fui%2Fconsts%2Fconst-external-macro-const-err.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-external-macro-const-err.rs?ref=120b2a704a60d4341286bd82f6e638c65ca169b6", "patch": "@@ -10,4 +10,5 @@ use external_macro::static_assert;\n \n fn main() {\n     static_assert!(2 + 2 == 5); //~ ERROR\n+    //~| WARN this was previously accepted by the compiler but is being phased out\n }"}, {"sha": "21fdffa115b83267289cbd3c85d30c4278918e51", "filename": "src/test/ui/consts/const-external-macro-const-err.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftest%2Fui%2Fconsts%2Fconst-external-macro-const-err.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftest%2Fui%2Fconsts%2Fconst-external-macro-const-err.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-external-macro-const-err.stderr?ref=120b2a704a60d4341286bd82f6e638c65ca169b6", "patch": "@@ -5,6 +5,8 @@ LL |     static_assert!(2 + 2 == 5);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ index out of bounds: the length is 1 but the index is 1\n    |\n    = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error"}, {"sha": "41d8f7a0972bc78951670c388907bfad556eae89", "filename": "src/test/ui/consts/const-int-unchecked.rs", "status": "modified", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftest%2Fui%2Fconsts%2Fconst-int-unchecked.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftest%2Fui%2Fconsts%2Fconst-int-unchecked.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-int-unchecked.rs?ref=120b2a704a60d4341286bd82f6e638c65ca169b6", "patch": "@@ -14,129 +14,176 @@ use std::intrinsics;\n \n const SHL_U8: u8 = unsafe { intrinsics::unchecked_shl(5_u8, 8) };\n //~^ ERROR any use of this value will cause an error\n+//~| WARN this was previously accepted by the compiler but is being phased out\n const SHL_U16: u16 = unsafe { intrinsics::unchecked_shl(5_u16, 16) };\n //~^ ERROR any use of this value will cause an error\n+//~| WARN this was previously accepted by the compiler but is being phased out\n const SHL_U32: u32 = unsafe { intrinsics::unchecked_shl(5_u32, 32) };\n //~^ ERROR any use of this value will cause an error\n+//~| WARN this was previously accepted by the compiler but is being phased out\n const SHL_U64: u64 = unsafe { intrinsics::unchecked_shl(5_u64, 64) };\n //~^ ERROR any use of this value will cause an error\n+//~| WARN this was previously accepted by the compiler but is being phased out\n const SHL_U128: u128 = unsafe { intrinsics::unchecked_shl(5_u128, 128) };\n //~^ ERROR any use of this value will cause an error\n+//~| WARN this was previously accepted by the compiler but is being phased out\n \n // signed types:\n \n const SHL_I8: i8 = unsafe { intrinsics::unchecked_shl(5_i8, 8) };\n //~^ ERROR any use of this value will cause an error\n+//~| WARN this was previously accepted by the compiler but is being phased out\n const SHL_I16: i16 = unsafe { intrinsics::unchecked_shl(5_16, 16) };\n //~^ ERROR any use of this value will cause an error\n+//~| WARN this was previously accepted by the compiler but is being phased out\n const SHL_I32: i32 = unsafe { intrinsics::unchecked_shl(5_i32, 32) };\n //~^ ERROR any use of this value will cause an error\n+//~| WARN this was previously accepted by the compiler but is being phased out\n const SHL_I64: i64 = unsafe { intrinsics::unchecked_shl(5_i64, 64) };\n //~^ ERROR any use of this value will cause an error\n+//~| WARN this was previously accepted by the compiler but is being phased out\n const SHL_I128: i128 = unsafe { intrinsics::unchecked_shl(5_i128, 128) };\n //~^ ERROR any use of this value will cause an error\n+//~| WARN this was previously accepted by the compiler but is being phased out\n \n // and make sure we capture y < 0:\n \n const SHL_I8_NEG: i8 = unsafe { intrinsics::unchecked_shl(5_i8, -1) };\n //~^ ERROR any use of this value will cause an error\n+//~| WARN this was previously accepted by the compiler but is being phased out\n const SHL_I16_NEG: i16 = unsafe { intrinsics::unchecked_shl(5_16, -1) };\n //~^ ERROR any use of this value will cause an error\n+//~| WARN this was previously accepted by the compiler but is being phased out\n const SHL_I32_NEG: i32 = unsafe { intrinsics::unchecked_shl(5_i32, -1) };\n //~^ ERROR any use of this value will cause an error\n+//~| WARN this was previously accepted by the compiler but is being phased out\n const SHL_I64_NEG: i64 = unsafe { intrinsics::unchecked_shl(5_i64, -1) };\n //~^ ERROR any use of this value will cause an error\n+//~| WARN this was previously accepted by the compiler but is being phased out\n const SHL_I128_NEG: i128 = unsafe { intrinsics::unchecked_shl(5_i128, -1) };\n //~^ ERROR any use of this value will cause an error\n+//~| WARN this was previously accepted by the compiler but is being phased out\n \n // and that there's no special relation to the value -1 by picking some\n // negative values at random:\n \n const SHL_I8_NEG_RANDOM: i8 = unsafe { intrinsics::unchecked_shl(5_i8, -6) };\n //~^ ERROR any use of this value will cause an error\n+//~| WARN this was previously accepted by the compiler but is being phased out\n const SHL_I16_NEG_RANDOM: i16 = unsafe { intrinsics::unchecked_shl(5_16, -13) };\n //~^ ERROR any use of this value will cause an error\n+//~| WARN this was previously accepted by the compiler but is being phased out\n const SHL_I32_NEG_RANDOM: i32 = unsafe { intrinsics::unchecked_shl(5_i32, -25) };\n //~^ ERROR any use of this value will cause an error\n+//~| WARN this was previously accepted by the compiler but is being phased out\n const SHL_I64_NEG_RANDOM: i64 = unsafe { intrinsics::unchecked_shl(5_i64, -30) };\n //~^ ERROR any use of this value will cause an error\n+//~| WARN this was previously accepted by the compiler but is being phased out\n const SHL_I128_NEG_RANDOM: i128 = unsafe { intrinsics::unchecked_shl(5_i128, -93) };\n //~^ ERROR any use of this value will cause an error\n+//~| WARN this was previously accepted by the compiler but is being phased out\n \n // Repeat it all over for `unchecked_shr`\n \n // unsigned types:\n \n const SHR_U8: u8 = unsafe { intrinsics::unchecked_shr(5_u8, 8) };\n //~^ ERROR any use of this value will cause an error\n+//~| WARN this was previously accepted by the compiler but is being phased out\n const SHR_U16: u16 = unsafe { intrinsics::unchecked_shr(5_u16, 16) };\n //~^ ERROR any use of this value will cause an error\n+//~| WARN this was previously accepted by the compiler but is being phased out\n const SHR_U32: u32 = unsafe { intrinsics::unchecked_shr(5_u32, 32) };\n //~^ ERROR any use of this value will cause an error\n+//~| WARN this was previously accepted by the compiler but is being phased out\n const SHR_U64: u64 = unsafe { intrinsics::unchecked_shr(5_u64, 64) };\n //~^ ERROR any use of this value will cause an error\n+//~| WARN this was previously accepted by the compiler but is being phased out\n const SHR_U128: u128 = unsafe { intrinsics::unchecked_shr(5_u128, 128) };\n //~^ ERROR any use of this value will cause an error\n+//~| WARN this was previously accepted by the compiler but is being phased out\n \n // signed types:\n \n const SHR_I8: i8 = unsafe { intrinsics::unchecked_shr(5_i8, 8) };\n //~^ ERROR any use of this value will cause an error\n+//~| WARN this was previously accepted by the compiler but is being phased out\n const SHR_I16: i16 = unsafe { intrinsics::unchecked_shr(5_16, 16) };\n //~^ ERROR any use of this value will cause an error\n+//~| WARN this was previously accepted by the compiler but is being phased out\n const SHR_I32: i32 = unsafe { intrinsics::unchecked_shr(5_i32, 32) };\n //~^ ERROR any use of this value will cause an error\n+//~| WARN this was previously accepted by the compiler but is being phased out\n const SHR_I64: i64 = unsafe { intrinsics::unchecked_shr(5_i64, 64) };\n //~^ ERROR any use of this value will cause an error\n+//~| WARN this was previously accepted by the compiler but is being phased out\n const SHR_I128: i128 = unsafe { intrinsics::unchecked_shr(5_i128, 128) };\n //~^ ERROR any use of this value will cause an error\n+//~| WARN this was previously accepted by the compiler but is being phased out\n \n // and make sure we capture y < 0:\n \n const SHR_I8_NEG: i8 = unsafe { intrinsics::unchecked_shr(5_i8, -1) };\n //~^ ERROR any use of this value will cause an error\n+//~| WARN this was previously accepted by the compiler but is being phased out\n const SHR_I16_NEG: i16 = unsafe { intrinsics::unchecked_shr(5_16, -1) };\n //~^ ERROR any use of this value will cause an error\n+//~| WARN this was previously accepted by the compiler but is being phased out\n const SHR_I32_NEG: i32 = unsafe { intrinsics::unchecked_shr(5_i32, -1) };\n //~^ ERROR any use of this value will cause an error\n+//~| WARN this was previously accepted by the compiler but is being phased out\n const SHR_I64_NEG: i64 = unsafe { intrinsics::unchecked_shr(5_i64, -1) };\n //~^ ERROR any use of this value will cause an error\n+//~| WARN this was previously accepted by the compiler but is being phased out\n const SHR_I128_NEG: i128 = unsafe { intrinsics::unchecked_shr(5_i128, -1) };\n //~^ ERROR any use of this value will cause an error\n+//~| WARN this was previously accepted by the compiler but is being phased out\n \n // and that there's no special relation to the value -1 by picking some\n // negative values at random:\n \n const SHR_I8_NEG_RANDOM: i8 = unsafe { intrinsics::unchecked_shr(5_i8, -6) };\n //~^ ERROR any use of this value will cause an error\n+//~| WARN this was previously accepted by the compiler but is being phased out\n const SHR_I16_NEG_RANDOM: i16 = unsafe { intrinsics::unchecked_shr(5_16, -13) };\n //~^ ERROR any use of this value will cause an error\n+//~| WARN this was previously accepted by the compiler but is being phased out\n const SHR_I32_NEG_RANDOM: i32 = unsafe { intrinsics::unchecked_shr(5_i32, -25) };\n //~^ ERROR any use of this value will cause an error\n+//~| WARN this was previously accepted by the compiler but is being phased out\n const SHR_I64_NEG_RANDOM: i64 = unsafe { intrinsics::unchecked_shr(5_i64, -30) };\n //~^ ERROR any use of this value will cause an error\n+//~| WARN this was previously accepted by the compiler but is being phased out\n const SHR_I128_NEG_RANDOM: i128 = unsafe { intrinsics::unchecked_shr(5_i128, -93) };\n //~^ ERROR any use of this value will cause an error\n+//~| WARN this was previously accepted by the compiler but is being phased out\n \n // Other arithmetic functions:\n \n const _: u16 = unsafe { std::intrinsics::unchecked_add(40000u16, 30000) };\n //~^ ERROR any use of this value will cause an error\n+//~| WARN this was previously accepted by the compiler but is being phased out\n \n const _: u32 = unsafe { std::intrinsics::unchecked_sub(14u32, 22) };\n //~^ ERROR any use of this value will cause an error\n+//~| WARN this was previously accepted by the compiler but is being phased out\n \n const _: u16 = unsafe { std::intrinsics::unchecked_mul(300u16, 250u16) };\n //~^ ERROR any use of this value will cause an error\n+//~| WARN this was previously accepted by the compiler but is being phased out\n \n const _: i32 = unsafe { std::intrinsics::unchecked_div(1, 0) };\n //~^ ERROR any use of this value will cause an error\n+//~| WARN this was previously accepted by the compiler but is being phased out\n const _: i32 = unsafe { std::intrinsics::unchecked_div(i32::MIN, -1) };\n //~^ ERROR any use of this value will cause an error\n+//~| WARN this was previously accepted by the compiler but is being phased out\n \n const _: i32 = unsafe { std::intrinsics::unchecked_rem(1, 0) };\n //~^ ERROR any use of this value will cause an error\n+//~| WARN this was previously accepted by the compiler but is being phased out\n const _: i32 = unsafe { std::intrinsics::unchecked_rem(i32::MIN, -1) };\n //~^ ERROR any use of this value will cause an error\n+//~| WARN this was previously accepted by the compiler but is being phased out\n \n fn main() {}"}, {"sha": "e5ecbbc71a7f61d3d94db1fdc4134bc76c4c2c28", "filename": "src/test/ui/consts/const-int-unchecked.stderr", "status": "modified", "additions": 186, "deletions": 46, "changes": 232, "blob_url": "https://github.com/rust-lang/rust/blob/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftest%2Fui%2Fconsts%2Fconst-int-unchecked.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftest%2Fui%2Fconsts%2Fconst-int-unchecked.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-int-unchecked.stderr?ref=120b2a704a60d4341286bd82f6e638c65ca169b6", "patch": "@@ -7,374 +7,514 @@ LL | const SHL_U8: u8 = unsafe { intrinsics::unchecked_shl(5_u8, 8) };\n    |                             overflowing shift by 8 in `unchecked_shl`\n    |\n    = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n-  --> $DIR/const-int-unchecked.rs:17:31\n+  --> $DIR/const-int-unchecked.rs:18:31\n    |\n LL | const SHL_U16: u16 = unsafe { intrinsics::unchecked_shl(5_u16, 16) };\n    | ------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                               |\n    |                               overflowing shift by 16 in `unchecked_shl`\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n-  --> $DIR/const-int-unchecked.rs:19:31\n+  --> $DIR/const-int-unchecked.rs:21:31\n    |\n LL | const SHL_U32: u32 = unsafe { intrinsics::unchecked_shl(5_u32, 32) };\n    | ------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                               |\n    |                               overflowing shift by 32 in `unchecked_shl`\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n-  --> $DIR/const-int-unchecked.rs:21:31\n+  --> $DIR/const-int-unchecked.rs:24:31\n    |\n LL | const SHL_U64: u64 = unsafe { intrinsics::unchecked_shl(5_u64, 64) };\n    | ------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                               |\n    |                               overflowing shift by 64 in `unchecked_shl`\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n-  --> $DIR/const-int-unchecked.rs:23:33\n+  --> $DIR/const-int-unchecked.rs:27:33\n    |\n LL | const SHL_U128: u128 = unsafe { intrinsics::unchecked_shl(5_u128, 128) };\n    | --------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                 |\n    |                                 overflowing shift by 128 in `unchecked_shl`\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n-  --> $DIR/const-int-unchecked.rs:28:29\n+  --> $DIR/const-int-unchecked.rs:33:29\n    |\n LL | const SHL_I8: i8 = unsafe { intrinsics::unchecked_shl(5_i8, 8) };\n    | ----------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                             |\n    |                             overflowing shift by 8 in `unchecked_shl`\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n-  --> $DIR/const-int-unchecked.rs:30:31\n+  --> $DIR/const-int-unchecked.rs:36:31\n    |\n LL | const SHL_I16: i16 = unsafe { intrinsics::unchecked_shl(5_16, 16) };\n    | ------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                               |\n    |                               overflowing shift by 16 in `unchecked_shl`\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n-  --> $DIR/const-int-unchecked.rs:32:31\n+  --> $DIR/const-int-unchecked.rs:39:31\n    |\n LL | const SHL_I32: i32 = unsafe { intrinsics::unchecked_shl(5_i32, 32) };\n    | ------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                               |\n    |                               overflowing shift by 32 in `unchecked_shl`\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n-  --> $DIR/const-int-unchecked.rs:34:31\n+  --> $DIR/const-int-unchecked.rs:42:31\n    |\n LL | const SHL_I64: i64 = unsafe { intrinsics::unchecked_shl(5_i64, 64) };\n    | ------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                               |\n    |                               overflowing shift by 64 in `unchecked_shl`\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n-  --> $DIR/const-int-unchecked.rs:36:33\n+  --> $DIR/const-int-unchecked.rs:45:33\n    |\n LL | const SHL_I128: i128 = unsafe { intrinsics::unchecked_shl(5_i128, 128) };\n    | --------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                 |\n    |                                 overflowing shift by 128 in `unchecked_shl`\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n-  --> $DIR/const-int-unchecked.rs:41:33\n+  --> $DIR/const-int-unchecked.rs:51:33\n    |\n LL | const SHL_I8_NEG: i8 = unsafe { intrinsics::unchecked_shl(5_i8, -1) };\n    | --------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                 |\n    |                                 overflowing shift by 255 in `unchecked_shl`\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n-  --> $DIR/const-int-unchecked.rs:43:35\n+  --> $DIR/const-int-unchecked.rs:54:35\n    |\n LL | const SHL_I16_NEG: i16 = unsafe { intrinsics::unchecked_shl(5_16, -1) };\n    | ----------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                   |\n    |                                   overflowing shift by 65535 in `unchecked_shl`\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n-  --> $DIR/const-int-unchecked.rs:45:35\n+  --> $DIR/const-int-unchecked.rs:57:35\n    |\n LL | const SHL_I32_NEG: i32 = unsafe { intrinsics::unchecked_shl(5_i32, -1) };\n    | ----------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                   |\n    |                                   overflowing shift by 4294967295 in `unchecked_shl`\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n-  --> $DIR/const-int-unchecked.rs:47:35\n+  --> $DIR/const-int-unchecked.rs:60:35\n    |\n LL | const SHL_I64_NEG: i64 = unsafe { intrinsics::unchecked_shl(5_i64, -1) };\n    | ----------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                   |\n    |                                   overflowing shift by 18446744073709551615 in `unchecked_shl`\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n-  --> $DIR/const-int-unchecked.rs:49:37\n+  --> $DIR/const-int-unchecked.rs:63:37\n    |\n LL | const SHL_I128_NEG: i128 = unsafe { intrinsics::unchecked_shl(5_i128, -1) };\n    | ------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                     |\n    |                                     overflowing shift by 340282366920938463463374607431768211455 in `unchecked_shl`\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n-  --> $DIR/const-int-unchecked.rs:55:40\n+  --> $DIR/const-int-unchecked.rs:70:40\n    |\n LL | const SHL_I8_NEG_RANDOM: i8 = unsafe { intrinsics::unchecked_shl(5_i8, -6) };\n    | ---------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                        |\n    |                                        overflowing shift by 250 in `unchecked_shl`\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n-  --> $DIR/const-int-unchecked.rs:57:42\n+  --> $DIR/const-int-unchecked.rs:73:42\n    |\n LL | const SHL_I16_NEG_RANDOM: i16 = unsafe { intrinsics::unchecked_shl(5_16, -13) };\n    | -----------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                          |\n    |                                          overflowing shift by 65523 in `unchecked_shl`\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n-  --> $DIR/const-int-unchecked.rs:59:42\n+  --> $DIR/const-int-unchecked.rs:76:42\n    |\n LL | const SHL_I32_NEG_RANDOM: i32 = unsafe { intrinsics::unchecked_shl(5_i32, -25) };\n    | -----------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                          |\n    |                                          overflowing shift by 4294967271 in `unchecked_shl`\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n-  --> $DIR/const-int-unchecked.rs:61:42\n+  --> $DIR/const-int-unchecked.rs:79:42\n    |\n LL | const SHL_I64_NEG_RANDOM: i64 = unsafe { intrinsics::unchecked_shl(5_i64, -30) };\n    | -----------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                          |\n    |                                          overflowing shift by 18446744073709551586 in `unchecked_shl`\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n-  --> $DIR/const-int-unchecked.rs:63:44\n+  --> $DIR/const-int-unchecked.rs:82:44\n    |\n LL | const SHL_I128_NEG_RANDOM: i128 = unsafe { intrinsics::unchecked_shl(5_i128, -93) };\n    | -------------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                            |\n    |                                            overflowing shift by 340282366920938463463374607431768211363 in `unchecked_shl`\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n-  --> $DIR/const-int-unchecked.rs:70:29\n+  --> $DIR/const-int-unchecked.rs:90:29\n    |\n LL | const SHR_U8: u8 = unsafe { intrinsics::unchecked_shr(5_u8, 8) };\n    | ----------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                             |\n    |                             overflowing shift by 8 in `unchecked_shr`\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n-  --> $DIR/const-int-unchecked.rs:72:31\n+  --> $DIR/const-int-unchecked.rs:93:31\n    |\n LL | const SHR_U16: u16 = unsafe { intrinsics::unchecked_shr(5_u16, 16) };\n    | ------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                               |\n    |                               overflowing shift by 16 in `unchecked_shr`\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n-  --> $DIR/const-int-unchecked.rs:74:31\n+  --> $DIR/const-int-unchecked.rs:96:31\n    |\n LL | const SHR_U32: u32 = unsafe { intrinsics::unchecked_shr(5_u32, 32) };\n    | ------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                               |\n    |                               overflowing shift by 32 in `unchecked_shr`\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n-  --> $DIR/const-int-unchecked.rs:76:31\n+  --> $DIR/const-int-unchecked.rs:99:31\n    |\n LL | const SHR_U64: u64 = unsafe { intrinsics::unchecked_shr(5_u64, 64) };\n    | ------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                               |\n    |                               overflowing shift by 64 in `unchecked_shr`\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n-  --> $DIR/const-int-unchecked.rs:78:33\n+  --> $DIR/const-int-unchecked.rs:102:33\n    |\n LL | const SHR_U128: u128 = unsafe { intrinsics::unchecked_shr(5_u128, 128) };\n    | --------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                 |\n    |                                 overflowing shift by 128 in `unchecked_shr`\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n-  --> $DIR/const-int-unchecked.rs:83:29\n+  --> $DIR/const-int-unchecked.rs:108:29\n    |\n LL | const SHR_I8: i8 = unsafe { intrinsics::unchecked_shr(5_i8, 8) };\n    | ----------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                             |\n    |                             overflowing shift by 8 in `unchecked_shr`\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n-  --> $DIR/const-int-unchecked.rs:85:31\n+  --> $DIR/const-int-unchecked.rs:111:31\n    |\n LL | const SHR_I16: i16 = unsafe { intrinsics::unchecked_shr(5_16, 16) };\n    | ------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                               |\n    |                               overflowing shift by 16 in `unchecked_shr`\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n-  --> $DIR/const-int-unchecked.rs:87:31\n+  --> $DIR/const-int-unchecked.rs:114:31\n    |\n LL | const SHR_I32: i32 = unsafe { intrinsics::unchecked_shr(5_i32, 32) };\n    | ------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                               |\n    |                               overflowing shift by 32 in `unchecked_shr`\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n-  --> $DIR/const-int-unchecked.rs:89:31\n+  --> $DIR/const-int-unchecked.rs:117:31\n    |\n LL | const SHR_I64: i64 = unsafe { intrinsics::unchecked_shr(5_i64, 64) };\n    | ------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                               |\n    |                               overflowing shift by 64 in `unchecked_shr`\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n-  --> $DIR/const-int-unchecked.rs:91:33\n+  --> $DIR/const-int-unchecked.rs:120:33\n    |\n LL | const SHR_I128: i128 = unsafe { intrinsics::unchecked_shr(5_i128, 128) };\n    | --------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                 |\n    |                                 overflowing shift by 128 in `unchecked_shr`\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n-  --> $DIR/const-int-unchecked.rs:96:33\n+  --> $DIR/const-int-unchecked.rs:126:33\n    |\n LL | const SHR_I8_NEG: i8 = unsafe { intrinsics::unchecked_shr(5_i8, -1) };\n    | --------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                 |\n    |                                 overflowing shift by 255 in `unchecked_shr`\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n-  --> $DIR/const-int-unchecked.rs:98:35\n+  --> $DIR/const-int-unchecked.rs:129:35\n    |\n LL | const SHR_I16_NEG: i16 = unsafe { intrinsics::unchecked_shr(5_16, -1) };\n    | ----------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                   |\n    |                                   overflowing shift by 65535 in `unchecked_shr`\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n-  --> $DIR/const-int-unchecked.rs:100:35\n+  --> $DIR/const-int-unchecked.rs:132:35\n    |\n LL | const SHR_I32_NEG: i32 = unsafe { intrinsics::unchecked_shr(5_i32, -1) };\n    | ----------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                   |\n    |                                   overflowing shift by 4294967295 in `unchecked_shr`\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n-  --> $DIR/const-int-unchecked.rs:102:35\n+  --> $DIR/const-int-unchecked.rs:135:35\n    |\n LL | const SHR_I64_NEG: i64 = unsafe { intrinsics::unchecked_shr(5_i64, -1) };\n    | ----------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                   |\n    |                                   overflowing shift by 18446744073709551615 in `unchecked_shr`\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n-  --> $DIR/const-int-unchecked.rs:104:37\n+  --> $DIR/const-int-unchecked.rs:138:37\n    |\n LL | const SHR_I128_NEG: i128 = unsafe { intrinsics::unchecked_shr(5_i128, -1) };\n    | ------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                     |\n    |                                     overflowing shift by 340282366920938463463374607431768211455 in `unchecked_shr`\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n-  --> $DIR/const-int-unchecked.rs:110:40\n+  --> $DIR/const-int-unchecked.rs:145:40\n    |\n LL | const SHR_I8_NEG_RANDOM: i8 = unsafe { intrinsics::unchecked_shr(5_i8, -6) };\n    | ---------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                        |\n    |                                        overflowing shift by 250 in `unchecked_shr`\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n-  --> $DIR/const-int-unchecked.rs:112:42\n+  --> $DIR/const-int-unchecked.rs:148:42\n    |\n LL | const SHR_I16_NEG_RANDOM: i16 = unsafe { intrinsics::unchecked_shr(5_16, -13) };\n    | -----------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                          |\n    |                                          overflowing shift by 65523 in `unchecked_shr`\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n-  --> $DIR/const-int-unchecked.rs:114:42\n+  --> $DIR/const-int-unchecked.rs:151:42\n    |\n LL | const SHR_I32_NEG_RANDOM: i32 = unsafe { intrinsics::unchecked_shr(5_i32, -25) };\n    | -----------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                          |\n    |                                          overflowing shift by 4294967271 in `unchecked_shr`\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n-  --> $DIR/const-int-unchecked.rs:116:42\n+  --> $DIR/const-int-unchecked.rs:154:42\n    |\n LL | const SHR_I64_NEG_RANDOM: i64 = unsafe { intrinsics::unchecked_shr(5_i64, -30) };\n    | -----------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                          |\n    |                                          overflowing shift by 18446744073709551586 in `unchecked_shr`\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n-  --> $DIR/const-int-unchecked.rs:118:44\n+  --> $DIR/const-int-unchecked.rs:157:44\n    |\n LL | const SHR_I128_NEG_RANDOM: i128 = unsafe { intrinsics::unchecked_shr(5_i128, -93) };\n    | -------------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                            |\n    |                                            overflowing shift by 340282366920938463463374607431768211363 in `unchecked_shr`\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n-  --> $DIR/const-int-unchecked.rs:123:25\n+  --> $DIR/const-int-unchecked.rs:163:25\n    |\n LL | const _: u16 = unsafe { std::intrinsics::unchecked_add(40000u16, 30000) };\n    | ------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                         |\n    |                         overflow executing `unchecked_add`\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n-  --> $DIR/const-int-unchecked.rs:126:25\n+  --> $DIR/const-int-unchecked.rs:167:25\n    |\n LL | const _: u32 = unsafe { std::intrinsics::unchecked_sub(14u32, 22) };\n    | ------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                         |\n    |                         overflow executing `unchecked_sub`\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n-  --> $DIR/const-int-unchecked.rs:129:25\n+  --> $DIR/const-int-unchecked.rs:171:25\n    |\n LL | const _: u16 = unsafe { std::intrinsics::unchecked_mul(300u16, 250u16) };\n    | ------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                         |\n    |                         overflow executing `unchecked_mul`\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n-  --> $DIR/const-int-unchecked.rs:132:25\n+  --> $DIR/const-int-unchecked.rs:175:25\n    |\n LL | const _: i32 = unsafe { std::intrinsics::unchecked_div(1, 0) };\n    | ------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                         |\n    |                         dividing by zero\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n-  --> $DIR/const-int-unchecked.rs:134:25\n+  --> $DIR/const-int-unchecked.rs:178:25\n    |\n LL | const _: i32 = unsafe { std::intrinsics::unchecked_div(i32::MIN, -1) };\n    | ------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                         |\n    |                         overflow executing `unchecked_div`\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n-  --> $DIR/const-int-unchecked.rs:137:25\n+  --> $DIR/const-int-unchecked.rs:182:25\n    |\n LL | const _: i32 = unsafe { std::intrinsics::unchecked_rem(1, 0) };\n    | ------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                         |\n    |                         calculating the remainder with a divisor of zero\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n-  --> $DIR/const-int-unchecked.rs:139:25\n+  --> $DIR/const-int-unchecked.rs:185:25\n    |\n LL | const _: i32 = unsafe { std::intrinsics::unchecked_rem(i32::MIN, -1) };\n    | ------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                         |\n    |                         overflow executing `unchecked_rem`\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: aborting due to 47 previous errors\n "}, {"sha": "7c3d1f320f2f60e2ad19414b0fdf5786903e9ee0", "filename": "src/test/ui/consts/const-len-underflow-separate-spans.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftest%2Fui%2Fconsts%2Fconst-len-underflow-separate-spans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftest%2Fui%2Fconsts%2Fconst-len-underflow-separate-spans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-len-underflow-separate-spans.rs?ref=120b2a704a60d4341286bd82f6e638c65ca169b6", "patch": "@@ -6,6 +6,7 @@ const ONE: usize = 1;\n const TWO: usize = 2;\n const LEN: usize = ONE - TWO;\n //~^ ERROR any use of this value will cause an error\n+//~| WARN this was previously accepted by the compiler but is being phased out\n \n fn main() {\n     let a: [i8; LEN] = unimplemented!();"}, {"sha": "70f645a6c40e83b6d5d484d6061630cef8b38474", "filename": "src/test/ui/consts/const-len-underflow-separate-spans.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftest%2Fui%2Fconsts%2Fconst-len-underflow-separate-spans.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftest%2Fui%2Fconsts%2Fconst-len-underflow-separate-spans.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-len-underflow-separate-spans.stderr?ref=120b2a704a60d4341286bd82f6e638c65ca169b6", "patch": "@@ -7,9 +7,11 @@ LL | const LEN: usize = ONE - TWO;\n    |                    attempt to compute `1_usize - 2_usize`, which would overflow\n    |\n    = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error[E0080]: evaluation of constant value failed\n-  --> $DIR/const-len-underflow-separate-spans.rs:11:17\n+  --> $DIR/const-len-underflow-separate-spans.rs:12:17\n    |\n LL |     let a: [i8; LEN] = unimplemented!();\n    |                 ^^^ referenced constant has errors"}, {"sha": "90977efd2b4548e5140c3052e115cc064231d5e6", "filename": "src/test/ui/consts/const-mut-refs/mut_ref_in_final_dynamic_check.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftest%2Fui%2Fconsts%2Fconst-mut-refs%2Fmut_ref_in_final_dynamic_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftest%2Fui%2Fconsts%2Fconst-mut-refs%2Fmut_ref_in_final_dynamic_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-mut-refs%2Fmut_ref_in_final_dynamic_check.rs?ref=120b2a704a60d4341286bd82f6e638c65ca169b6", "patch": "@@ -13,6 +13,7 @@ const fn helper() -> Option<&'static mut i32> { unsafe {\n     // Undefined behaviour (integer as pointer), who doesn't love tests like this.\n     // This code never gets executed, because the static checks fail before that.\n     Some(&mut *(42 as *mut i32)) //~ ERROR any use of this value will cause an error\n+    //~| WARN this was previously accepted by the compiler but is being phased out\n } }\n // The error is an evaluation error and not a validation error, so the error is reported\n // directly at the site where it occurs."}, {"sha": "45ae055614b57fd3f88be84892d6a746bd88cc81", "filename": "src/test/ui/consts/const-mut-refs/mut_ref_in_final_dynamic_check.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftest%2Fui%2Fconsts%2Fconst-mut-refs%2Fmut_ref_in_final_dynamic_check.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftest%2Fui%2Fconsts%2Fconst-mut-refs%2Fmut_ref_in_final_dynamic_check.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-mut-refs%2Fmut_ref_in_final_dynamic_check.stderr?ref=120b2a704a60d4341286bd82f6e638c65ca169b6", "patch": "@@ -6,15 +6,17 @@ LL |     Some(&mut *(42 as *mut i32))\n    |          |\n    |          unable to turn bytes into a pointer\n    |          inside `helper` at $DIR/mut_ref_in_final_dynamic_check.rs:15:10\n-   |          inside `A` at $DIR/mut_ref_in_final_dynamic_check.rs:19:29\n+   |          inside `A` at $DIR/mut_ref_in_final_dynamic_check.rs:20:29\n ...\n LL | const A: Option<&mut i32> = helper();\n    | -------------------------------------\n    |\n    = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: encountered dangling pointer in final constant\n-  --> $DIR/mut_ref_in_final_dynamic_check.rs:26:1\n+  --> $DIR/mut_ref_in_final_dynamic_check.rs:27:1\n    |\n LL | const B: Option<&mut i32> = helper2();\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "a65b707f012d00475e329fe947c8ad6ad8d90026", "filename": "src/test/ui/consts/const-prop-read-static-in-const.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftest%2Fui%2Fconsts%2Fconst-prop-read-static-in-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftest%2Fui%2Fconsts%2Fconst-prop-read-static-in-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-prop-read-static-in-const.rs?ref=120b2a704a60d4341286bd82f6e638c65ca169b6", "patch": "@@ -3,6 +3,7 @@\n #![allow(dead_code)]\n \n const TEST: u8 = MY_STATIC; //~ ERROR any use of this value will cause an error\n+//~| WARN this was previously accepted by the compiler but is being phased out\n \n static MY_STATIC: u8 = 4;\n "}, {"sha": "94d3f1c614544fe58a799724f10a9f168d6a601b", "filename": "src/test/ui/consts/const-prop-read-static-in-const.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftest%2Fui%2Fconsts%2Fconst-prop-read-static-in-const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftest%2Fui%2Fconsts%2Fconst-prop-read-static-in-const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-prop-read-static-in-const.stderr?ref=120b2a704a60d4341286bd82f6e638c65ca169b6", "patch": "@@ -7,6 +7,8 @@ LL | const TEST: u8 = MY_STATIC;\n    |                  constant accesses static\n    |\n    = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n warning: skipping const checks\n    |"}, {"sha": "6653717778ba5afc594dd38149cfc98ede17b29b", "filename": "src/test/ui/consts/const-size_of_val-align_of_val-extern-type.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftest%2Fui%2Fconsts%2Fconst-size_of_val-align_of_val-extern-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftest%2Fui%2Fconsts%2Fconst-size_of_val-align_of_val-extern-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-size_of_val-align_of_val-extern-type.rs?ref=120b2a704a60d4341286bd82f6e638c65ca169b6", "patch": "@@ -9,6 +9,8 @@ extern \"C\" {\n }\n \n const _SIZE: usize = unsafe { size_of_val(&4 as *const i32 as *const Opaque) }; //~ ERROR\n+//~| WARN this was previously accepted by the compiler but is being phased out\n const _ALIGN: usize = unsafe { min_align_of_val(&4 as *const i32 as *const Opaque) }; //~ ERROR\n+//~| WARN this was previously accepted by the compiler but is being phased out\n \n fn main() {}"}, {"sha": "a9211c17a6bc05e09339a14f9506ffa38d248f21", "filename": "src/test/ui/consts/const-size_of_val-align_of_val-extern-type.stderr", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftest%2Fui%2Fconsts%2Fconst-size_of_val-align_of_val-extern-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftest%2Fui%2Fconsts%2Fconst-size_of_val-align_of_val-extern-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-size_of_val-align_of_val-extern-type.stderr?ref=120b2a704a60d4341286bd82f6e638c65ca169b6", "patch": "@@ -7,14 +7,19 @@ LL | const _SIZE: usize = unsafe { size_of_val(&4 as *const i32 as *const Opaque\n    |                               `extern type` does not have known layout\n    |\n    = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n-  --> $DIR/const-size_of_val-align_of_val-extern-type.rs:12:32\n+  --> $DIR/const-size_of_val-align_of_val-extern-type.rs:13:32\n    |\n LL | const _ALIGN: usize = unsafe { min_align_of_val(&4 as *const i32 as *const Opaque) };\n    | -------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                |\n    |                                `extern type` does not have known layout\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: aborting due to 2 previous errors\n "}, {"sha": "35e5a4d2233feb11fa0a8cbdd2e26a77225e353d", "filename": "src/test/ui/consts/const-slice-oob.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftest%2Fui%2Fconsts%2Fconst-slice-oob.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftest%2Fui%2Fconsts%2Fconst-slice-oob.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-slice-oob.rs?ref=120b2a704a60d4341286bd82f6e638c65ca169b6", "patch": "@@ -4,6 +4,7 @@ const FOO: &'static[u32] = &[1, 2, 3];\n const BAR: u32 = FOO[5];\n //~^ index out of bounds: the length is 3 but the index is 5\n //~| ERROR any use of this value will cause an error\n+//~| WARN this was previously accepted by the compiler but is being phased out\n \n fn main() {\n     let _ = BAR;"}, {"sha": "6d2c79034d3919b0688aa800b23f4c2add6e49fc", "filename": "src/test/ui/consts/const-slice-oob.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftest%2Fui%2Fconsts%2Fconst-slice-oob.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftest%2Fui%2Fconsts%2Fconst-slice-oob.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-slice-oob.stderr?ref=120b2a704a60d4341286bd82f6e638c65ca169b6", "patch": "@@ -7,6 +7,8 @@ LL | const BAR: u32 = FOO[5];\n    |                  index out of bounds: the length is 3 but the index is 5\n    |\n    = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: aborting due to previous error\n "}, {"sha": "86c2f1c4f8e135165ab932afe4f67f1bd3264567", "filename": "src/test/ui/consts/const-unwrap.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftest%2Fui%2Fconsts%2Fconst-unwrap.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftest%2Fui%2Fconsts%2Fconst-unwrap.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-unwrap.stderr?ref=120b2a704a60d4341286bd82f6e638c65ca169b6", "patch": "@@ -14,6 +14,8 @@ LL | const BAR: i32 = Option::<i32>::None.unwrap();\n    | ----------------------------------------------\n    |\n    = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error"}, {"sha": "773640b72e6ea9991de88fc26b632e2412fd14f8", "filename": "src/test/ui/consts/const_limit/const_eval_limit_reached.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftest%2Fui%2Fconsts%2Fconst_limit%2Fconst_eval_limit_reached.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftest%2Fui%2Fconsts%2Fconst_limit%2Fconst_eval_limit_reached.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst_limit%2Fconst_eval_limit_reached.rs?ref=120b2a704a60d4341286bd82f6e638c65ca169b6", "patch": "@@ -5,6 +5,7 @@ const X: usize = {\n     let mut x = 0;\n     while x != 1000 {\n         //~^ ERROR any use of this value will cause an error\n+        //~| WARN this was previously accepted by the compiler but is being phased out\n         x += 1;\n     }\n "}, {"sha": "10e54e0348cb7d45ecaf6866ffed2c4710cf8ea0", "filename": "src/test/ui/consts/const_limit/const_eval_limit_reached.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftest%2Fui%2Fconsts%2Fconst_limit%2Fconst_eval_limit_reached.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftest%2Fui%2Fconsts%2Fconst_limit%2Fconst_eval_limit_reached.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst_limit%2Fconst_eval_limit_reached.stderr?ref=120b2a704a60d4341286bd82f6e638c65ca169b6", "patch": "@@ -6,6 +6,7 @@ LL |  |     let mut x = 0;\n LL |  |     while x != 1000 {\n    |  |_____^\n LL | ||\n+LL | ||\n LL | ||         x += 1;\n LL | ||     }\n    | ||_____^ exceeded interpreter step limit (see `#[const_eval_limit]`)\n@@ -15,6 +16,8 @@ LL |  | };\n    |  |__-\n    |\n    = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: aborting due to previous error\n "}, {"sha": "0bd37876cc3f063a25b04556e74fad4da8f9a490", "filename": "src/test/ui/consts/const_unsafe_unreachable_ub.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftest%2Fui%2Fconsts%2Fconst_unsafe_unreachable_ub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftest%2Fui%2Fconsts%2Fconst_unsafe_unreachable_ub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst_unsafe_unreachable_ub.rs?ref=120b2a704a60d4341286bd82f6e638c65ca169b6", "patch": "@@ -17,4 +17,5 @@ fn main() {\n   assert_eq!(BAR, true);\n   //~^ ERROR E0080\n   //~| ERROR erroneous constant\n+  //~| WARN this was previously accepted by the compiler but is being phased out\n }"}, {"sha": "3f122b2a859120923adb8e4b0fea8bd024c66de0", "filename": "src/test/ui/consts/const_unsafe_unreachable_ub.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftest%2Fui%2Fconsts%2Fconst_unsafe_unreachable_ub.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftest%2Fui%2Fconsts%2Fconst_unsafe_unreachable_ub.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst_unsafe_unreachable_ub.stderr?ref=120b2a704a60d4341286bd82f6e638c65ca169b6", "patch": "@@ -19,6 +19,8 @@ note: the lint level is defined here\n    |\n LL | #[warn(const_err)]\n    |        ^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error[E0080]: evaluation of constant value failed\n   --> $DIR/const_unsafe_unreachable_ub.rs:17:14\n@@ -33,6 +35,8 @@ LL |   assert_eq!(BAR, true);\n    |   ^^^^^^^^^^^^^^^^^^^^^^ referenced constant has errors\n    |\n    = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 2 previous errors; 1 warning emitted"}, {"sha": "2f28c2e7bb6427845de4bb9b9ff5aea795b6b203", "filename": "src/test/ui/consts/control-flow/assert.const_panic.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fassert.const_panic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fassert.const_panic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fassert.const_panic.stderr?ref=120b2a704a60d4341286bd82f6e638c65ca169b6", "patch": "@@ -7,6 +7,8 @@ LL | const _: () = assert!(false);\n    |               the evaluated program panicked at 'assertion failed: false', $DIR/assert.rs:10:15\n    |\n    = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error"}, {"sha": "a21f28604bdea3051400ee604707819550edd444", "filename": "src/test/ui/consts/control-flow/assert.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fassert.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fassert.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fassert.rs?ref=120b2a704a60d4341286bd82f6e638c65ca169b6", "patch": "@@ -10,5 +10,6 @@ const _: () = assert!(true);\n const _: () = assert!(false);\n //[stock]~^ ERROR panicking in constants is unstable\n //[const_panic]~^^ ERROR any use of this value will cause an error\n+//[const_panic]~| WARN this was previously accepted by the compiler but is being phased out\n \n fn main() {}"}, {"sha": "cc644404f7d7351de70b2c410b56faff0cca4cca", "filename": "src/test/ui/consts/issue-51559.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftest%2Fui%2Fconsts%2Fissue-51559.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftest%2Fui%2Fconsts%2Fissue-51559.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-51559.rs?ref=120b2a704a60d4341286bd82f6e638c65ca169b6", "patch": "@@ -3,5 +3,6 @@\n const BAR: *mut () = ((|| 3) as fn() -> i32) as *mut ();\n pub const FOO: usize = unsafe { BAR as usize };\n //~^ ERROR any use of this value will cause an error\n+//~| WARN this was previously accepted by the compiler but is being phased out\n \n fn main() {}"}, {"sha": "fbb40c890dd7bde007f26d1b75c500bf00e9d80f", "filename": "src/test/ui/consts/issue-51559.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftest%2Fui%2Fconsts%2Fissue-51559.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftest%2Fui%2Fconsts%2Fissue-51559.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-51559.stderr?ref=120b2a704a60d4341286bd82f6e638c65ca169b6", "patch": "@@ -7,6 +7,8 @@ LL | pub const FOO: usize = unsafe { BAR as usize };\n    |                                 \"pointer-to-integer cast\" needs an rfc before being allowed inside constants\n    |\n    = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: aborting due to previous error\n "}, {"sha": "a0e8fc70b6acd939e7aee2adc2261ab24f2b4050", "filename": "src/test/ui/consts/issue-55878.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftest%2Fui%2Fconsts%2Fissue-55878.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftest%2Fui%2Fconsts%2Fissue-55878.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-55878.stderr?ref=120b2a704a60d4341286bd82f6e638c65ca169b6", "patch": "@@ -16,6 +16,8 @@ LL |     println!(\"Size: {}\", std::mem::size_of::<[u8; u64::MAX as usize]>());\n    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ referenced constant has errors\n    |\n    = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: aborting due to 2 previous errors\n "}, {"sha": "7bbe9c87705a30608df439a55dd1f5e09a935252", "filename": "src/test/ui/consts/miri_unleashed/const_refers_to_static_cross_crate.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static_cross_crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static_cross_crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static_cross_crate.rs?ref=120b2a704a60d4341286bd82f6e638c65ca169b6", "patch": "@@ -26,13 +26,17 @@ const U8_MUT2: &u8 = { //~ NOTE\n     unsafe { &(*static_cross_crate::ZERO_REF)[0] }\n     //~^ WARN [const_err]\n     //~| NOTE constant accesses static\n+    //~| WARN this was previously accepted by the compiler but is being phased out\n+    //~| NOTE\n };\n #[warn(const_err)] //~ NOTE\n const U8_MUT3: &u8 = { //~ NOTE\n     unsafe { match static_cross_crate::OPT_ZERO { Some(ref u) => u, None => panic!() } }\n     //~^ WARN [const_err]\n     //~| NOTE constant accesses static\n     //~| NOTE in this expansion of panic!\n+    //~| WARN this was previously accepted by the compiler but is being phased out\n+    //~| NOTE\n };\n \n pub fn test(x: &[u8; 1]) -> bool {"}, {"sha": "a9d6fde6c05be52a979aad7b06adddf3501bb2a6", "filename": "src/test/ui/consts/miri_unleashed/const_refers_to_static_cross_crate.stderr", "status": "modified", "additions": 22, "deletions": 15, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static_cross_crate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static_cross_crate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static_cross_crate.stderr?ref=120b2a704a60d4341286bd82f6e638c65ca169b6", "patch": "@@ -11,7 +11,7 @@ LL | | };\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n error: could not evaluate constant pattern\n-  --> $DIR/const_refers_to_static_cross_crate.rs:40:9\n+  --> $DIR/const_refers_to_static_cross_crate.rs:44:9\n    |\n LL |         SLICE_MUT => true,\n    |         ^^^^^^^^^\n@@ -29,7 +29,7 @@ LL | | };\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n error: could not evaluate constant pattern\n-  --> $DIR/const_refers_to_static_cross_crate.rs:49:9\n+  --> $DIR/const_refers_to_static_cross_crate.rs:53:9\n    |\n LL |         U8_MUT => true,\n    |         ^^^^^^\n@@ -42,6 +42,8 @@ LL | |     unsafe { &(*static_cross_crate::ZERO_REF)[0] }\n    | |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constant accesses static\n LL | |\n LL | |\n+LL | |\n+LL | |\n LL | | };\n    | |__-\n    |\n@@ -50,57 +52,62 @@ note: the lint level is defined here\n    |\n LL | #[warn(const_err)]\n    |        ^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: could not evaluate constant pattern\n-  --> $DIR/const_refers_to_static_cross_crate.rs:60:9\n+  --> $DIR/const_refers_to_static_cross_crate.rs:64:9\n    |\n LL |         U8_MUT2 => true,\n    |         ^^^^^^^\n \n warning: any use of this value will cause an error\n-  --> $DIR/const_refers_to_static_cross_crate.rs:32:51\n+  --> $DIR/const_refers_to_static_cross_crate.rs:34:51\n    |\n LL | / const U8_MUT3: &u8 = {\n LL | |     unsafe { match static_cross_crate::OPT_ZERO { Some(ref u) => u, None => panic!() } }\n    | |                                                   ^^^^^^^^^^^ constant accesses static\n LL | |\n LL | |\n+...  |\n LL | |\n LL | | };\n    | |__-\n    |\n note: the lint level is defined here\n-  --> $DIR/const_refers_to_static_cross_crate.rs:30:8\n+  --> $DIR/const_refers_to_static_cross_crate.rs:32:8\n    |\n LL | #[warn(const_err)]\n    |        ^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: could not evaluate constant pattern\n-  --> $DIR/const_refers_to_static_cross_crate.rs:68:9\n+  --> $DIR/const_refers_to_static_cross_crate.rs:72:9\n    |\n LL |         U8_MUT3 => true,\n    |         ^^^^^^^\n \n error: could not evaluate constant pattern\n-  --> $DIR/const_refers_to_static_cross_crate.rs:40:9\n+  --> $DIR/const_refers_to_static_cross_crate.rs:44:9\n    |\n LL |         SLICE_MUT => true,\n    |         ^^^^^^^^^\n \n error: could not evaluate constant pattern\n-  --> $DIR/const_refers_to_static_cross_crate.rs:49:9\n+  --> $DIR/const_refers_to_static_cross_crate.rs:53:9\n    |\n LL |         U8_MUT => true,\n    |         ^^^^^^\n \n error: could not evaluate constant pattern\n-  --> $DIR/const_refers_to_static_cross_crate.rs:60:9\n+  --> $DIR/const_refers_to_static_cross_crate.rs:64:9\n    |\n LL |         U8_MUT2 => true,\n    |         ^^^^^^^\n \n error: could not evaluate constant pattern\n-  --> $DIR/const_refers_to_static_cross_crate.rs:68:9\n+  --> $DIR/const_refers_to_static_cross_crate.rs:72:9\n    |\n LL |         U8_MUT3 => true,\n    |         ^^^^^^^\n@@ -138,27 +145,27 @@ help: skipping check that does not even have a feature gate\n LL |     unsafe { &(*static_cross_crate::ZERO_REF)[0] }\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n help: skipping check that does not even have a feature gate\n-  --> $DIR/const_refers_to_static_cross_crate.rs:32:20\n+  --> $DIR/const_refers_to_static_cross_crate.rs:34:20\n    |\n LL |     unsafe { match static_cross_crate::OPT_ZERO { Some(ref u) => u, None => panic!() } }\n    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n help: skipping check that does not even have a feature gate\n-  --> $DIR/const_refers_to_static_cross_crate.rs:32:20\n+  --> $DIR/const_refers_to_static_cross_crate.rs:34:20\n    |\n LL |     unsafe { match static_cross_crate::OPT_ZERO { Some(ref u) => u, None => panic!() } }\n    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n help: skipping check that does not even have a feature gate\n-  --> $DIR/const_refers_to_static_cross_crate.rs:32:20\n+  --> $DIR/const_refers_to_static_cross_crate.rs:34:20\n    |\n LL |     unsafe { match static_cross_crate::OPT_ZERO { Some(ref u) => u, None => panic!() } }\n    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n help: skipping check for `const_panic` feature\n-  --> $DIR/const_refers_to_static_cross_crate.rs:32:77\n+  --> $DIR/const_refers_to_static_cross_crate.rs:34:77\n    |\n LL |     unsafe { match static_cross_crate::OPT_ZERO { Some(ref u) => u, None => panic!() } }\n    |                                                                             ^^^^^^^^\n help: skipping check that does not even have a feature gate\n-  --> $DIR/const_refers_to_static_cross_crate.rs:32:20\n+  --> $DIR/const_refers_to_static_cross_crate.rs:34:20\n    |\n LL |     unsafe { match static_cross_crate::OPT_ZERO { Some(ref u) => u, None => panic!() } }\n    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "eb726f9cb113faf53af9c91514d38a18e6a64db1", "filename": "src/test/ui/consts/offset_from_ub.stderr", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftest%2Fui%2Fconsts%2Foffset_from_ub.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftest%2Fui%2Fconsts%2Foffset_from_ub.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Foffset_from_ub.stderr?ref=120b2a704a60d4341286bd82f6e638c65ca169b6", "patch": "@@ -20,6 +20,8 @@ LL | | };\n    | |__-\n    |\n    = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n   --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n@@ -38,6 +40,9 @@ LL | |\n LL | |     unsafe { (42 as *const u8).offset_from(&5u8) as usize }\n LL | | };\n    | |__-\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n   --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n@@ -59,6 +64,9 @@ LL | |     let field_ptr = &data[1] as *const u8 as *const u16;\n LL | |     unsafe { field_ptr.offset_from(base_ptr as *const u16) }\n LL | | };\n    | |__-\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n   --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n@@ -78,6 +86,9 @@ LL | |     let ptr = 0 as *const u8;\n LL | |     unsafe { ptr.offset_from(ptr) }\n LL | | };\n    | |__-\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n   --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n@@ -98,6 +109,9 @@ LL | |     let ptr2 = 16 as *const u8;\n LL | |     unsafe { ptr2.offset_from(ptr1) }\n LL | | };\n    | |__-\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: aborting due to 5 previous errors\n "}, {"sha": "5e8b7a8e0b698dd61776a4a8ab9bda5f0e7b4373", "filename": "src/test/ui/consts/offset_ub.stderr", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftest%2Fui%2Fconsts%2Foffset_ub.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftest%2Fui%2Fconsts%2Foffset_ub.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Foffset_ub.stderr?ref=120b2a704a60d4341286bd82f6e638c65ca169b6", "patch": "@@ -14,6 +14,8 @@ LL | pub const BEFORE_START: *const u8 = unsafe { (&0u8 as *const u8).offset(-1)\n    | ------------------------------------------------------------------------------\n    |\n    = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n   --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n@@ -29,6 +31,9 @@ LL |         unsafe { intrinsics::offset(self, count) }\n    |\n LL | pub const AFTER_END: *const u8 = unsafe { (&0u8 as *const u8).offset(2) };\n    | --------------------------------------------------------------------------\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n   --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n@@ -44,6 +49,9 @@ LL |         unsafe { intrinsics::offset(self, count) }\n    |\n LL | pub const AFTER_ARRAY: *const u8 = unsafe { [0u8; 100].as_ptr().offset(101) };\n    | ------------------------------------------------------------------------------\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n   --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n@@ -59,6 +67,9 @@ LL |         unsafe { intrinsics::offset(self, count) }\n    |\n LL | pub const OVERFLOW: *const u16 = unsafe { [0u16; 1].as_ptr().offset(isize::MAX) };\n    | ----------------------------------------------------------------------------------\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n   --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n@@ -74,6 +85,9 @@ LL |         unsafe { intrinsics::offset(self, count) }\n    |\n LL | pub const UNDERFLOW: *const u16 = unsafe { [0u16; 1].as_ptr().offset(isize::MIN) };\n    | -----------------------------------------------------------------------------------\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n   --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n@@ -89,6 +103,9 @@ LL |         unsafe { intrinsics::offset(self, count) }\n    |\n LL | pub const OVERFLOW_ADDRESS_SPACE: *const u8 = unsafe { (usize::MAX as *const u8).offset(2) };\n    | ---------------------------------------------------------------------------------------------\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n   --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n@@ -104,6 +121,9 @@ LL |         unsafe { intrinsics::offset(self, count) }\n    |\n LL | pub const UNDERFLOW_ADDRESS_SPACE: *const u8 = unsafe { (1 as *const u8).offset(-2) };\n    | --------------------------------------------------------------------------------------\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n   --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n@@ -119,6 +139,9 @@ LL |         unsafe { intrinsics::offset(self, count) }\n    |\n LL | pub const ZERO_SIZED_ALLOC: *const u8 = unsafe { [0u8; 0].as_ptr().offset(1) };\n    | -------------------------------------------------------------------------------\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n   --> $SRC_DIR/core/src/ptr/mut_ptr.rs:LL:COL\n@@ -134,6 +157,9 @@ LL |         unsafe { intrinsics::offset(self, count) as *mut T }\n    |\n LL | pub const DANGLING: *const u8 = unsafe { ptr::NonNull::<u8>::dangling().as_ptr().offset(4) };\n    | ---------------------------------------------------------------------------------------------\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n   --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n@@ -149,6 +175,9 @@ LL |         unsafe { intrinsics::offset(self, count) }\n    |\n LL | pub const NULL_OFFSET_ZERO: *const u8 = unsafe { ptr::null::<u8>().offset(0) };\n    | -------------------------------------------------------------------------------\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n   --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n@@ -164,6 +193,9 @@ LL |         unsafe { intrinsics::offset(self, count) }\n    |\n LL | pub const UNDERFLOW_ABS: *const u8 = unsafe { (usize::MAX as *const u8).offset(isize::MIN) };\n    | ---------------------------------------------------------------------------------------------\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: aborting due to 11 previous errors\n "}, {"sha": "0570d817fcce5309cb20d1fef6189372131e22eb", "filename": "src/test/ui/consts/ptr_comparisons.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftest%2Fui%2Fconsts%2Fptr_comparisons.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftest%2Fui%2Fconsts%2Fptr_comparisons.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fptr_comparisons.rs?ref=120b2a704a60d4341286bd82f6e638c65ca169b6", "patch": "@@ -66,13 +66,19 @@ const _: *const u8 =\n     unsafe { std::ptr::addr_of!((*(FOO as *const usize as *const [u8; 1000]))[999]) };\n //~^ ERROR any use of this value will cause an error\n //~| NOTE\n+//~| WARN this was previously accepted by the compiler but is being phased out\n+//~| NOTE\n \n const _: usize = unsafe { std::mem::transmute::<*const usize, usize>(FOO) + 4 };\n //~^ ERROR any use of this value will cause an error\n //~| NOTE \"pointer-to-integer cast\" needs an rfc\n //~| NOTE\n+//~| WARN this was previously accepted by the compiler but is being phased out\n+//~| NOTE\n \n const _: usize = unsafe { *std::mem::transmute::<&&usize, &usize>(&FOO) + 4 };\n //~^ ERROR any use of this value will cause an error\n //~| NOTE \"pointer-to-integer cast\" needs an rfc\n //~| NOTE\n+//~| WARN this was previously accepted by the compiler but is being phased out\n+//~| NOTE"}, {"sha": "c6c13e54137c5d00b665c010aa44c3eb0d155ef1", "filename": "src/test/ui/consts/ptr_comparisons.stderr", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftest%2Fui%2Fconsts%2Fptr_comparisons.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftest%2Fui%2Fconsts%2Fptr_comparisons.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fptr_comparisons.stderr?ref=120b2a704a60d4341286bd82f6e638c65ca169b6", "patch": "@@ -14,6 +14,8 @@ LL | const _: *const usize = unsafe { (FOO as *const usize).offset(2) };\n    | -------------------------------------------------------------------\n    |\n    = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n   --> $DIR/ptr_comparisons.rs:66:33\n@@ -24,22 +26,31 @@ LL | |     unsafe { std::ptr::addr_of!((*(FOO as *const usize as *const [u8; 100\n    | |_________________________________^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^___-\n    |                                   |\n    |                                   memory access failed: pointer must be in-bounds at offset 1000, but is outside bounds of alloc2 which has size $WORD\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n-  --> $DIR/ptr_comparisons.rs:70:27\n+  --> $DIR/ptr_comparisons.rs:72:27\n    |\n LL | const _: usize = unsafe { std::mem::transmute::<*const usize, usize>(FOO) + 4 };\n    | --------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                           |\n    |                           \"pointer-to-integer cast\" needs an rfc before being allowed inside constants\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n-  --> $DIR/ptr_comparisons.rs:75:27\n+  --> $DIR/ptr_comparisons.rs:79:27\n    |\n LL | const _: usize = unsafe { *std::mem::transmute::<&&usize, &usize>(&FOO) + 4 };\n    | --------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                           |\n    |                           \"pointer-to-integer cast\" needs an rfc before being allowed inside constants\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: aborting due to 4 previous errors\n "}, {"sha": "0f0068ac3bdc13e1ebfa309fa0b13a02529860e3", "filename": "src/test/ui/consts/transmute-size-mismatch-before-typeck.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftest%2Fui%2Fconsts%2Ftransmute-size-mismatch-before-typeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftest%2Fui%2Fconsts%2Ftransmute-size-mismatch-before-typeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Ftransmute-size-mismatch-before-typeck.rs?ref=120b2a704a60d4341286bd82f6e638c65ca169b6", "patch": "@@ -15,6 +15,7 @@ fn main() {\n const ZST: &[u8] = unsafe { std::mem::transmute(1usize) };\n //~^ ERROR any use of this value will cause an error\n //~| ERROR cannot transmute between types of different sizes\n+//~| WARN this was previously accepted by the compiler but is being phased out\n \n // Once the `any use of this value will cause an error` disappears in this test, make sure to\n // remove the `TransmuteSizeDiff` error variant and make its emitter site an assertion again."}, {"sha": "6e93aed70b65adff716ffe2fa460b6a109a2b298", "filename": "src/test/ui/consts/transmute-size-mismatch-before-typeck.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftest%2Fui%2Fconsts%2Ftransmute-size-mismatch-before-typeck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftest%2Fui%2Fconsts%2Ftransmute-size-mismatch-before-typeck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Ftransmute-size-mismatch-before-typeck.stderr?ref=120b2a704a60d4341286bd82f6e638c65ca169b6", "patch": "@@ -7,6 +7,8 @@ LL | const ZST: &[u8] = unsafe { std::mem::transmute(1usize) };\n    |                             transmuting `usize` to `&[u8]` is not possible, because these types do not have the same size\n    |\n    = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: could not evaluate constant pattern\n   --> $DIR/transmute-size-mismatch-before-typeck.rs:10:9"}, {"sha": "860628c39c371a5d8f580809f14b72a632a2c882", "filename": "src/test/ui/consts/uninhabited-const-issue-61744.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftest%2Fui%2Fconsts%2Funinhabited-const-issue-61744.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftest%2Fui%2Fconsts%2Funinhabited-const-issue-61744.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Funinhabited-const-issue-61744.rs?ref=120b2a704a60d4341286bd82f6e638c65ca169b6", "patch": "@@ -2,6 +2,7 @@\n \n pub const unsafe fn fake_type<T>() -> T {\n     hint_unreachable() //~ ERROR any use of this value will cause an error [const_err]\n+    //~| WARN this was previously accepted by the compiler but is being phased out\n }\n \n pub const unsafe fn hint_unreachable() -> ! {"}, {"sha": "e98eefc11c3c83786a2a4ed9ae59474c9662a375", "filename": "src/test/ui/consts/uninhabited-const-issue-61744.stderr", "status": "modified", "additions": 67, "deletions": 65, "changes": 132, "blob_url": "https://github.com/rust-lang/rust/blob/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftest%2Fui%2Fconsts%2Funinhabited-const-issue-61744.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftest%2Fui%2Fconsts%2Funinhabited-const-issue-61744.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Funinhabited-const-issue-61744.stderr?ref=120b2a704a60d4341286bd82f6e638c65ca169b6", "patch": "@@ -6,141 +6,143 @@ LL |     hint_unreachable()\n    |     |\n    |     reached the configured maximum number of stack frames\n    |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n    |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n    |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n    |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n    |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n    |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n    |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n    |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n    |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n    |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n    |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n    |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n    |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n    |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n    |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n    |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n    |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n    |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n    |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n    |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n    |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n    |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n    |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n    |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n    |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n    |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n    |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n    |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n    |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n    |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n    |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n    |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n    |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n    |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n    |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n    |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n    |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n    |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n    |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n    |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n    |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n    |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n    |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n    |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n    |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n    |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n    |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n    |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n    |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n    |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n    |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n    |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n    |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n    |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n    |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n    |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n    |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n    |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n    |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n    |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n    |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n    |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n    |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:9:5\n    |     inside `fake_type::<i32>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `<i32 as Const>::CONSTANT` at $DIR/uninhabited-const-issue-61744.rs:12:36\n+   |     inside `<i32 as Const>::CONSTANT` at $DIR/uninhabited-const-issue-61744.rs:13:36\n ...\n LL |     const CONSTANT: i32 = unsafe { fake_type() };\n    |     ---------------------------------------------\n    |\n    = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error[E0080]: erroneous constant used\n-  --> $DIR/uninhabited-const-issue-61744.rs:18:10\n+  --> $DIR/uninhabited-const-issue-61744.rs:19:10\n    |\n LL |     dbg!(i32::CONSTANT);\n    |          ^^^^^^^^^^^^^ referenced constant has errors"}, {"sha": "76dd857ea56163620b81bb0d77dad7f88dff0ab6", "filename": "src/test/ui/error-codes/E0396-fixed.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftest%2Fui%2Ferror-codes%2FE0396-fixed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftest%2Fui%2Ferror-codes%2FE0396-fixed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0396-fixed.rs?ref=120b2a704a60d4341286bd82f6e638c65ca169b6", "patch": "@@ -4,6 +4,7 @@ const REG_ADDR: *const u8 = 0x5f3759df as *const u8;\n \n const VALUE: u8 = unsafe { *REG_ADDR };\n //~^ ERROR any use of this value will cause an error\n+//~| WARN this was previously accepted by the compiler but is being phased out\n \n fn main() {\n }"}, {"sha": "521394bdc8e015c9b7b88c50ef46bbe5704e591e", "filename": "src/test/ui/error-codes/E0396-fixed.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftest%2Fui%2Ferror-codes%2FE0396-fixed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftest%2Fui%2Ferror-codes%2FE0396-fixed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0396-fixed.stderr?ref=120b2a704a60d4341286bd82f6e638c65ca169b6", "patch": "@@ -7,6 +7,8 @@ LL | const VALUE: u8 = unsafe { *REG_ADDR };\n    |                            unable to turn bytes into a pointer\n    |\n    = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: aborting due to previous error\n "}, {"sha": "e58b4e6ca4d6f8f7f63a7b788ac83218af229243", "filename": "src/test/ui/suggestions/non-existent-field-present-in-subfield.fixed", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftest%2Fui%2Fsuggestions%2Fnon-existent-field-present-in-subfield.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftest%2Fui%2Fsuggestions%2Fnon-existent-field-present-in-subfield.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fnon-existent-field-present-in-subfield.fixed?ref=120b2a704a60d4341286bd82f6e638c65ca169b6", "patch": "@@ -3,7 +3,7 @@\n struct Foo {\n     first: Bar,\n     _second: u32,\n-    _third: u32,\n+    _third: Vec<String>,\n }\n \n struct Bar {\n@@ -32,7 +32,7 @@ fn main() {\n     let d = D { test: e };\n     let c = C { c: d };\n     let bar = Bar { bar: c };\n-    let fooer = Foo { first: bar, _second: 4, _third: 5 };\n+    let fooer = Foo { first: bar, _second: 4, _third: Vec::new() };\n \n     let _test = &fooer.first.bar.c;\n     //~^ ERROR no field"}, {"sha": "7e273ac23d8c3828167a263459aaac4b9521abc7", "filename": "src/test/ui/suggestions/non-existent-field-present-in-subfield.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftest%2Fui%2Fsuggestions%2Fnon-existent-field-present-in-subfield.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftest%2Fui%2Fsuggestions%2Fnon-existent-field-present-in-subfield.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fnon-existent-field-present-in-subfield.rs?ref=120b2a704a60d4341286bd82f6e638c65ca169b6", "patch": "@@ -3,7 +3,7 @@\n struct Foo {\n     first: Bar,\n     _second: u32,\n-    _third: u32,\n+    _third: Vec<String>,\n }\n \n struct Bar {\n@@ -32,7 +32,7 @@ fn main() {\n     let d = D { test: e };\n     let c = C { c: d };\n     let bar = Bar { bar: c };\n-    let fooer = Foo { first: bar, _second: 4, _third: 5 };\n+    let fooer = Foo { first: bar, _second: 4, _third: Vec::new() };\n \n     let _test = &fooer.c;\n     //~^ ERROR no field"}, {"sha": "75430da1482398b111a8e4a1dd2a780ebe9aa0da", "filename": "src/test/ui/typeck/issue-80207-unsized-return.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftest%2Fui%2Ftypeck%2Fissue-80207-unsized-return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftest%2Fui%2Ftypeck%2Fissue-80207-unsized-return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-80207-unsized-return.rs?ref=120b2a704a60d4341286bd82f6e638c65ca169b6", "patch": "@@ -0,0 +1,20 @@\n+// check-pass\n+\n+trait Foo {\n+    fn do_stuff() -> Self;\n+}\n+\n+trait Bar {\n+    type Output;\n+}\n+\n+impl<T> Foo for dyn Bar<Output = T>\n+where\n+    Self: Sized,\n+{\n+    fn do_stuff() -> Self {\n+        todo!()\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "c1032204a22cb8b618f4609fdd713acd64c94ec8", "filename": "src/tools/clippy/CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftools%2Fclippy%2FCHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftools%2Fclippy%2FCHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2FCHANGELOG.md?ref=120b2a704a60d4341286bd82f6e638c65ca169b6", "patch": "@@ -2079,6 +2079,7 @@ Released 2018-09-13\n [`missing_docs_in_private_items`]: https://rust-lang.github.io/rust-clippy/master/index.html#missing_docs_in_private_items\n [`missing_errors_doc`]: https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc\n [`missing_inline_in_public_items`]: https://rust-lang.github.io/rust-clippy/master/index.html#missing_inline_in_public_items\n+[`missing_panics_doc`]: https://rust-lang.github.io/rust-clippy/master/index.html#missing_panics_doc\n [`missing_safety_doc`]: https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc\n [`mistyped_literal_suffixes`]: https://rust-lang.github.io/rust-clippy/master/index.html#mistyped_literal_suffixes\n [`mixed_case_hex_literals`]: https://rust-lang.github.io/rust-clippy/master/index.html#mixed_case_hex_literals"}, {"sha": "5954ab25d194234539ec255b21520d480b00cc23", "filename": "src/tools/clippy/CONTRIBUTING.md", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftools%2Fclippy%2FCONTRIBUTING.md", "raw_url": "https://github.com/rust-lang/rust/raw/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftools%2Fclippy%2FCONTRIBUTING.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2FCONTRIBUTING.md?ref=120b2a704a60d4341286bd82f6e638c65ca169b6", "patch": "@@ -46,11 +46,12 @@ first read the [Basics docs](doc/basics.md).**\n \n ### Finding something to fix/improve\n \n-All issues on Clippy are mentored, if you want help with a bug just ask\n-@Manishearth, @flip1995, @phansch or @yaahc.\n+All issues on Clippy are mentored, if you want help simply ask @Manishearth, @flip1995, @phansch\n+or @llogiq directly by mentioning them in the issue or over on [Zulip]. This list may be out of date.\n+All currently active mentors can be found [here](https://github.com/rust-lang/highfive/blob/master/highfive/configs/rust-lang/rust-clippy.json#L3)\n \n-Some issues are easier than others. The [`good-first-issue`] label can be used to find the easy issues.\n-If you want to work on an issue, please leave a comment so that we can assign it to you!\n+Some issues are easier than others. The [`good-first-issue`] label can be used to find the easy\n+issues. You can use `@rustbot claim` to assign the issue to yourself.\n \n There are also some abandoned PRs, marked with [`S-inactive-closed`].\n Pretty often these PRs are nearly completed and just need some extra steps"}, {"sha": "2a869e9d4491b6805a332495fd753b886a1c821e", "filename": "src/tools/clippy/clippy_dev/src/bless.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftools%2Fclippy%2Fclippy_dev%2Fsrc%2Fbless.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftools%2Fclippy%2Fclippy_dev%2Fsrc%2Fbless.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_dev%2Fsrc%2Fbless.rs?ref=120b2a704a60d4341286bd82f6e638c65ca169b6", "patch": "@@ -24,6 +24,9 @@ static CLIPPY_BUILD_TIME: SyncLazy<Option<std::time::SystemTime>> = SyncLazy::ne\n     fs::metadata(path).ok()?.modified().ok()\n });\n \n+/// # Panics\n+///\n+/// Panics if the path to a test file is broken\n pub fn bless(ignore_timestamp: bool) {\n     let test_suite_dirs = [\n         clippy_project_root().join(\"tests\").join(\"ui\"),"}, {"sha": "4d0fdadbd85d184d6b927db81211764c729e5153", "filename": "src/tools/clippy/clippy_dev/src/fmt.rs", "status": "modified", "additions": 15, "deletions": 8, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftools%2Fclippy%2Fclippy_dev%2Fsrc%2Ffmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftools%2Fclippy%2Fclippy_dev%2Fsrc%2Ffmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_dev%2Fsrc%2Ffmt.rs?ref=120b2a704a60d4341286bd82f6e638c65ca169b6", "patch": "@@ -8,7 +8,7 @@ use walkdir::WalkDir;\n \n #[derive(Debug)]\n pub enum CliError {\n-    CommandFailed(String),\n+    CommandFailed(String, String),\n     IoError(io::Error),\n     RustfmtNotInstalled,\n     WalkDirError(walkdir::Error),\n@@ -75,8 +75,8 @@ pub fn run(check: bool, verbose: bool) {\n \n     fn output_err(err: CliError) {\n         match err {\n-            CliError::CommandFailed(command) => {\n-                eprintln!(\"error: A command failed! `{}`\", command);\n+            CliError::CommandFailed(command, stderr) => {\n+                eprintln!(\"error: A command failed! `{}`\\nstderr: {}\", command, stderr);\n             },\n             CliError::IoError(err) => {\n                 eprintln!(\"error: {}\", err);\n@@ -136,12 +136,16 @@ fn exec(\n         println!(\"{}\", format_command(&program, &dir, args));\n     }\n \n-    let mut child = Command::new(&program).current_dir(&dir).args(args.iter()).spawn()?;\n-    let code = child.wait()?;\n-    let success = code.success();\n+    let child = Command::new(&program).current_dir(&dir).args(args.iter()).spawn()?;\n+    let output = child.wait_with_output()?;\n+    let success = output.status.success();\n \n     if !context.check && !success {\n-        return Err(CliError::CommandFailed(format_command(&program, &dir, args)));\n+        let stderr = std::str::from_utf8(&output.stderr).unwrap_or(\"\");\n+        return Err(CliError::CommandFailed(\n+            format_command(&program, &dir, args),\n+            String::from(stderr),\n+        ));\n     }\n \n     Ok(success)\n@@ -177,7 +181,10 @@ fn rustfmt_test(context: &FmtContext) -> Result<(), CliError> {\n     {\n         Err(CliError::RustfmtNotInstalled)\n     } else {\n-        Err(CliError::CommandFailed(format_command(&program, &dir, args)))\n+        Err(CliError::CommandFailed(\n+            format_command(&program, &dir, args),\n+            std::str::from_utf8(&output.stderr).unwrap_or(\"\").to_string(),\n+        ))\n     }\n }\n "}, {"sha": "01d1fc9211a94fc2576f26786df87e64485824df", "filename": "src/tools/clippy/clippy_dev/src/lib.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftools%2Fclippy%2Fclippy_dev%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftools%2Fclippy%2Fclippy_dev%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_dev%2Fsrc%2Flib.rs?ref=120b2a704a60d4341286bd82f6e638c65ca169b6", "patch": "@@ -236,6 +236,10 @@ pub struct FileChange {\n /// `path` is the relative path to the file on which you want to perform the replacement.\n ///\n /// See `replace_region_in_text` for documentation of the other options.\n+///\n+/// # Panics\n+///\n+/// Panics if the path could not read or then written\n pub fn replace_region_in_file<F>(\n     path: &Path,\n     start: &str,\n@@ -283,6 +287,10 @@ where\n ///     .new_lines;\n /// assert_eq!(\"replace_start\\na different\\ntext\\nreplace_end\", result);\n /// ```\n+///\n+/// # Panics\n+///\n+/// Panics if start or end is not valid regex\n pub fn replace_region_in_text<F>(text: &str, start: &str, end: &str, replace_start: bool, replacements: F) -> FileChange\n where\n     F: FnOnce() -> Vec<String>,\n@@ -329,6 +337,11 @@ where\n }\n \n /// Returns the path to the Clippy project directory\n+///\n+/// # Panics\n+///\n+/// Panics if the current directory could not be retrieved, there was an error reading any of the\n+/// Cargo.toml files or ancestor directory is the clippy root directory\n #[must_use]\n pub fn clippy_project_root() -> PathBuf {\n     let current_dir = std::env::current_dir().unwrap();"}, {"sha": "a3c329b578b2050d411c9ee0d010354a5c176699", "filename": "src/tools/clippy/clippy_dev/src/ra_setup.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftools%2Fclippy%2Fclippy_dev%2Fsrc%2Fra_setup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftools%2Fclippy%2Fclippy_dev%2Fsrc%2Fra_setup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_dev%2Fsrc%2Fra_setup.rs?ref=120b2a704a60d4341286bd82f6e638c65ca169b6", "patch": "@@ -8,6 +8,9 @@ use std::path::{Path, PathBuf};\n // This allows rust analyzer to analyze rustc internals and show proper information inside clippy\n // code. See https://github.com/rust-analyzer/rust-analyzer/issues/3517 and https://github.com/rust-lang/rust-clippy/issues/5514 for details\n \n+/// # Panics\n+///\n+/// Panics if `rustc_path` does not lead to a rustc repo or the files could not be read\n pub fn run(rustc_path: Option<&str>) {\n     // we can unwrap here because the arg is required by clap\n     let rustc_path = PathBuf::from(rustc_path.unwrap());"}, {"sha": "faa94859601e3a3e010af89a223956caba8b520a", "filename": "src/tools/clippy/clippy_dev/src/serve.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftools%2Fclippy%2Fclippy_dev%2Fsrc%2Fserve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftools%2Fclippy%2Fclippy_dev%2Fsrc%2Fserve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_dev%2Fsrc%2Fserve.rs?ref=120b2a704a60d4341286bd82f6e638c65ca169b6", "patch": "@@ -4,6 +4,9 @@ use std::process::Command;\n use std::thread;\n use std::time::{Duration, SystemTime};\n \n+/// # Panics\n+///\n+/// Panics if the python commands could not be spawned\n pub fn run(port: u16, lint: Option<&str>) -> ! {\n     let mut url = Some(match lint {\n         None => format!(\"http://localhost:{}\", port),"}, {"sha": "75e71eb1e4ce23158998b6bec356cf0e1f27780e", "filename": "src/tools/clippy/clippy_lints/src/doc.rs", "status": "modified", "additions": 120, "deletions": 5, "changes": 125, "blob_url": "https://github.com/rust-lang/rust/blob/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdoc.rs?ref=120b2a704a60d4341286bd82f6e638c65ca169b6", "patch": "@@ -1,4 +1,7 @@\n-use crate::utils::{implements_trait, is_entrypoint_fn, is_type_diagnostic_item, return_ty, span_lint};\n+use crate::utils::{\n+    implements_trait, is_entrypoint_fn, is_type_diagnostic_item, match_panic_def_id, method_chain_args, return_ty,\n+    span_lint, span_lint_and_note,\n+};\n use if_chain::if_chain;\n use itertools::Itertools;\n use rustc_ast::ast::{Async, AttrKind, Attribute, FnKind, FnRetTy, ItemKind};\n@@ -8,7 +11,10 @@ use rustc_data_structures::sync::Lrc;\n use rustc_errors::emitter::EmitterWriter;\n use rustc_errors::Handler;\n use rustc_hir as hir;\n+use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n+use rustc_hir::{Expr, ExprKind, QPath};\n use rustc_lint::{LateContext, LateLintPass};\n+use rustc_middle::hir::map::Map;\n use rustc_middle::lint::in_external_macro;\n use rustc_middle::ty;\n use rustc_parse::maybe_new_parser_from_source_str;\n@@ -122,6 +128,37 @@ declare_clippy_lint! {\n     \"`pub fn` returns `Result` without `# Errors` in doc comment\"\n }\n \n+declare_clippy_lint! {\n+    /// **What it does:** Checks the doc comments of publicly visible functions that\n+    /// may panic and warns if there is no `# Panics` section.\n+    ///\n+    /// **Why is this bad?** Documenting the scenarios in which panicking occurs\n+    /// can help callers who do not want to panic to avoid those situations.\n+    ///\n+    /// **Known problems:** None.\n+    ///\n+    /// **Examples:**\n+    ///\n+    /// Since the following function may panic it has a `# Panics` section in\n+    /// its doc comment:\n+    ///\n+    /// ```rust\n+    /// /// # Panics\n+    /// ///\n+    /// /// Will panic if y is 0\n+    /// pub fn divide_by(x: i32, y: i32) -> i32 {\n+    ///     if y == 0 {\n+    ///         panic!(\"Cannot divide by 0\")\n+    ///     } else {\n+    ///         x / y\n+    ///     }\n+    /// }\n+    /// ```\n+    pub MISSING_PANICS_DOC,\n+    pedantic,\n+    \"`pub fn` may panic without `# Panics` in doc comment\"\n+}\n+\n declare_clippy_lint! {\n     /// **What it does:** Checks for `fn main() { .. }` in doctests\n     ///\n@@ -166,7 +203,9 @@ impl DocMarkdown {\n     }\n }\n \n-impl_lint_pass!(DocMarkdown => [DOC_MARKDOWN, MISSING_SAFETY_DOC, MISSING_ERRORS_DOC, NEEDLESS_DOCTEST_MAIN]);\n+impl_lint_pass!(DocMarkdown =>\n+    [DOC_MARKDOWN, MISSING_SAFETY_DOC, MISSING_ERRORS_DOC, MISSING_PANICS_DOC, NEEDLESS_DOCTEST_MAIN]\n+);\n \n impl<'tcx> LateLintPass<'tcx> for DocMarkdown {\n     fn check_crate(&mut self, cx: &LateContext<'tcx>, krate: &'tcx hir::Crate<'_>) {\n@@ -180,7 +219,15 @@ impl<'tcx> LateLintPass<'tcx> for DocMarkdown {\n                 if !(is_entrypoint_fn(cx, cx.tcx.hir().local_def_id(item.hir_id).to_def_id())\n                     || in_external_macro(cx.tcx.sess, item.span))\n                 {\n-                    lint_for_missing_headers(cx, item.hir_id, item.span, sig, headers, Some(body_id));\n+                    let body = cx.tcx.hir().body(body_id);\n+                    let impl_item_def_id = cx.tcx.hir().local_def_id(item.hir_id);\n+                    let mut fpu = FindPanicUnwrap {\n+                        cx,\n+                        typeck_results: cx.tcx.typeck(impl_item_def_id),\n+                        panic_span: None,\n+                    };\n+                    fpu.visit_expr(&body.value);\n+                    lint_for_missing_headers(cx, item.hir_id, item.span, sig, headers, Some(body_id), fpu.panic_span);\n                 }\n             },\n             hir::ItemKind::Impl(ref impl_) => {\n@@ -200,7 +247,7 @@ impl<'tcx> LateLintPass<'tcx> for DocMarkdown {\n         let headers = check_attrs(cx, &self.valid_idents, &item.attrs);\n         if let hir::TraitItemKind::Fn(ref sig, ..) = item.kind {\n             if !in_external_macro(cx.tcx.sess, item.span) {\n-                lint_for_missing_headers(cx, item.hir_id, item.span, sig, headers, None);\n+                lint_for_missing_headers(cx, item.hir_id, item.span, sig, headers, None, None);\n             }\n         }\n     }\n@@ -211,7 +258,15 @@ impl<'tcx> LateLintPass<'tcx> for DocMarkdown {\n             return;\n         }\n         if let hir::ImplItemKind::Fn(ref sig, body_id) = item.kind {\n-            lint_for_missing_headers(cx, item.hir_id, item.span, sig, headers, Some(body_id));\n+            let body = cx.tcx.hir().body(body_id);\n+            let impl_item_def_id = cx.tcx.hir().local_def_id(item.hir_id);\n+            let mut fpu = FindPanicUnwrap {\n+                cx,\n+                typeck_results: cx.tcx.typeck(impl_item_def_id),\n+                panic_span: None,\n+            };\n+            fpu.visit_expr(&body.value);\n+            lint_for_missing_headers(cx, item.hir_id, item.span, sig, headers, Some(body_id), fpu.panic_span);\n         }\n     }\n }\n@@ -223,6 +278,7 @@ fn lint_for_missing_headers<'tcx>(\n     sig: &hir::FnSig<'_>,\n     headers: DocHeaders,\n     body_id: Option<hir::BodyId>,\n+    panic_span: Option<Span>,\n ) {\n     if !cx.access_levels.is_exported(hir_id) {\n         return; // Private functions do not require doc comments\n@@ -235,6 +291,16 @@ fn lint_for_missing_headers<'tcx>(\n             \"unsafe function's docs miss `# Safety` section\",\n         );\n     }\n+    if !headers.panics && panic_span.is_some() {\n+        span_lint_and_note(\n+            cx,\n+            MISSING_PANICS_DOC,\n+            span,\n+            \"docs for function which may panic missing `# Panics` section\",\n+            panic_span,\n+            \"first possible panic found here\",\n+        );\n+    }\n     if !headers.errors {\n         if is_type_diagnostic_item(cx, return_ty(cx, hir_id), sym::result_type) {\n             span_lint(\n@@ -321,6 +387,7 @@ pub fn strip_doc_comment_decoration(doc: &str, comment_kind: CommentKind, span:\n struct DocHeaders {\n     safety: bool,\n     errors: bool,\n+    panics: bool,\n }\n \n fn check_attrs<'a>(cx: &LateContext<'_>, valid_idents: &FxHashSet<String>, attrs: &'a [Attribute]) -> DocHeaders {\n@@ -338,6 +405,7 @@ fn check_attrs<'a>(cx: &LateContext<'_>, valid_idents: &FxHashSet<String>, attrs\n             return DocHeaders {\n                 safety: true,\n                 errors: true,\n+                panics: true,\n             };\n         }\n     }\n@@ -353,6 +421,7 @@ fn check_attrs<'a>(cx: &LateContext<'_>, valid_idents: &FxHashSet<String>, attrs\n         return DocHeaders {\n             safety: false,\n             errors: false,\n+            panics: false,\n         };\n     }\n \n@@ -394,6 +463,7 @@ fn check_doc<'a, Events: Iterator<Item = (pulldown_cmark::Event<'a>, Range<usize\n     let mut headers = DocHeaders {\n         safety: false,\n         errors: false,\n+        panics: false,\n     };\n     let mut in_code = false;\n     let mut in_link = None;\n@@ -439,6 +509,7 @@ fn check_doc<'a, Events: Iterator<Item = (pulldown_cmark::Event<'a>, Range<usize\n                 }\n                 headers.safety |= in_heading && text.trim() == \"Safety\";\n                 headers.errors |= in_heading && text.trim() == \"Errors\";\n+                headers.panics |= in_heading && text.trim() == \"Panics\";\n                 let index = match spans.binary_search_by(|c| c.0.cmp(&range.start)) {\n                     Ok(o) => o,\n                     Err(e) => e - 1,\n@@ -609,3 +680,47 @@ fn check_word(cx: &LateContext<'_>, word: &str, span: Span) {\n         );\n     }\n }\n+\n+struct FindPanicUnwrap<'a, 'tcx> {\n+    cx: &'a LateContext<'tcx>,\n+    panic_span: Option<Span>,\n+    typeck_results: &'tcx ty::TypeckResults<'tcx>,\n+}\n+\n+impl<'a, 'tcx> Visitor<'tcx> for FindPanicUnwrap<'a, 'tcx> {\n+    type Map = Map<'tcx>;\n+\n+    fn visit_expr(&mut self, expr: &'tcx Expr<'_>) {\n+        if self.panic_span.is_some() {\n+            return;\n+        }\n+\n+        // check for `begin_panic`\n+        if_chain! {\n+            if let ExprKind::Call(ref func_expr, _) = expr.kind;\n+            if let ExprKind::Path(QPath::Resolved(_, ref path)) = func_expr.kind;\n+            if let Some(path_def_id) = path.res.opt_def_id();\n+            if match_panic_def_id(self.cx, path_def_id);\n+            then {\n+                self.panic_span = Some(expr.span);\n+            }\n+        }\n+\n+        // check for `unwrap`\n+        if let Some(arglists) = method_chain_args(expr, &[\"unwrap\"]) {\n+            let reciever_ty = self.typeck_results.expr_ty(&arglists[0][0]).peel_refs();\n+            if is_type_diagnostic_item(self.cx, reciever_ty, sym::option_type)\n+                || is_type_diagnostic_item(self.cx, reciever_ty, sym::result_type)\n+            {\n+                self.panic_span = Some(expr.span);\n+            }\n+        }\n+\n+        // and check sub-expressions\n+        intravisit::walk_expr(self, expr);\n+    }\n+\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n+        NestedVisitorMap::OnlyBodies(self.cx.tcx.hir())\n+    }\n+}"}, {"sha": "6f22f65deac80ec183d003c4b7ac0ebeb1f581df", "filename": "src/tools/clippy/clippy_lints/src/excessive_bools.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fexcessive_bools.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fexcessive_bools.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fexcessive_bools.rs?ref=120b2a704a60d4341286bd82f6e638c65ca169b6", "patch": "@@ -160,15 +160,17 @@ impl EarlyLintPass for ExcessiveBools {\n                         \"consider using a state machine or refactoring bools into two-variant enums\",\n                     );\n                 }\n-            }\n-            ItemKind::Impl(box ImplKind { of_trait: None, items, .. })\n+            },\n+            ItemKind::Impl(box ImplKind {\n+                of_trait: None, items, ..\n+            })\n             | ItemKind::Trait(box TraitKind(.., items)) => {\n                 for item in items {\n                     if let AssocItemKind::Fn(box FnKind(_, fn_sig, _, _)) = &item.kind {\n                         self.check_fn_sig(cx, fn_sig, item.span);\n                     }\n                 }\n-            }\n+            },\n             ItemKind::Fn(box FnKind(_, fn_sig, _, _)) => self.check_fn_sig(cx, fn_sig, item.span),\n             _ => (),\n         }"}, {"sha": "e3988d0038c23b8f2e187afad6d3836c62a049fc", "filename": "src/tools/clippy/clippy_lints/src/exhaustive_items.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fexhaustive_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fexhaustive_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fexhaustive_items.rs?ref=120b2a704a60d4341286bd82f6e638c65ca169b6", "patch": "@@ -75,10 +75,14 @@ impl LateLintPass<'_> for ExhaustiveItems {\n             if cx.access_levels.is_exported(item.hir_id);\n             if !item.attrs.iter().any(|a| a.has_name(sym::non_exhaustive));\n             then {\n-                let (lint, msg) = if let ItemKind::Enum(..) = item.kind {\n-                    (EXHAUSTIVE_ENUMS, \"exported enums should not be exhaustive\")\n-                } else {\n+                let (lint, msg) = if let ItemKind::Struct(ref v, ..) = item.kind {\n+                    if v.fields().iter().any(|f| !f.vis.node.is_pub()) {\n+                        // skip structs with private fields\n+                        return;\n+                    }\n                     (EXHAUSTIVE_STRUCTS, \"exported structs should not be exhaustive\")\n+                } else {\n+                    (EXHAUSTIVE_ENUMS, \"exported enums should not be exhaustive\")\n                 };\n                 let suggestion_span = item.span.shrink_to_lo();\n                 let indent = \" \".repeat(indent_of(cx, item.span).unwrap_or(0));"}, {"sha": "5a40c00bd673a6223ed7a3e2508a0f87fdbe591b", "filename": "src/tools/clippy/clippy_lints/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.rs?ref=120b2a704a60d4341286bd82f6e638c65ca169b6", "patch": "@@ -592,6 +592,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         &disallowed_method::DISALLOWED_METHOD,\n         &doc::DOC_MARKDOWN,\n         &doc::MISSING_ERRORS_DOC,\n+        &doc::MISSING_PANICS_DOC,\n         &doc::MISSING_SAFETY_DOC,\n         &doc::NEEDLESS_DOCTEST_MAIN,\n         &double_comparison::DOUBLE_COMPARISONS,\n@@ -1317,6 +1318,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&derive::UNSAFE_DERIVE_DESERIALIZE),\n         LintId::of(&doc::DOC_MARKDOWN),\n         LintId::of(&doc::MISSING_ERRORS_DOC),\n+        LintId::of(&doc::MISSING_PANICS_DOC),\n         LintId::of(&empty_enum::EMPTY_ENUM),\n         LintId::of(&enum_variants::MODULE_NAME_REPETITIONS),\n         LintId::of(&enum_variants::PUB_ENUM_VARIANT_NAMES),"}, {"sha": "ba7b9bd04248d3d2713fa597f421e80e2e00c0ea", "filename": "src/tools/clippy/clippy_lints/src/matches.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmatches.rs?ref=120b2a704a60d4341286bd82f6e638c65ca169b6", "patch": "@@ -1592,7 +1592,17 @@ where\n                 }\n             },\n             (&Kind::End(a, _), &Kind::Start(b, _)) if a != Bound::Included(b) => (),\n-            _ => return Some((a.range(), b.range())),\n+            _ => {\n+                // skip if the range `a` is completely included into the range `b`\n+                if let Ordering::Equal | Ordering::Less = a.cmp(&b) {\n+                    let kind_a = Kind::End(a.range().node.1, a.range());\n+                    let kind_b = Kind::End(b.range().node.1, b.range());\n+                    if let Ordering::Equal | Ordering::Greater = kind_a.cmp(&kind_b) {\n+                        return None;\n+                    }\n+                }\n+                return Some((a.range(), b.range()));\n+            },\n         }\n     }\n "}, {"sha": "642326469725fce4194e31ea222a794ef92134c3", "filename": "src/tools/clippy/clippy_lints/src/utils/ast_utils.rs", "status": "modified", "additions": 5, "deletions": 10, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fast_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fast_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fast_utils.rs?ref=120b2a704a60d4341286bd82f6e638c65ca169b6", "patch": "@@ -247,7 +247,7 @@ pub fn eq_item_kind(l: &ItemKind, r: &ItemKind) -> bool {\n         (ForeignMod(l), ForeignMod(r)) => {\n             both(&l.abi, &r.abi, |l, r| eq_str_lit(l, r))\n                 && over(&l.items, &r.items, |l, r| eq_item(l, r, eq_foreign_item_kind))\n-        }\n+        },\n         (TyAlias(box TyAliasKind(ld, lg, lb, lt)), TyAlias(box TyAliasKind(rd, rg, rb, rt))) => {\n             eq_defaultness(*ld, *rd)\n                 && eq_generics(lg, rg)\n@@ -259,7 +259,7 @@ pub fn eq_item_kind(l: &ItemKind, r: &ItemKind) -> bool {\n         },\n         (Struct(lv, lg), Struct(rv, rg)) | (Union(lv, lg), Union(rv, rg)) => {\n             eq_variant_data(lv, rv) && eq_generics(lg, rg)\n-        }\n+        },\n         (Trait(box TraitKind(la, lu, lg, lb, li)), Trait(box TraitKind(ra, ru, rg, rb, ri))) => {\n             la == ra\n                 && matches!(lu, Unsafe::No) == matches!(ru, Unsafe::No)\n@@ -331,15 +331,10 @@ pub fn eq_foreign_item_kind(l: &ForeignItemKind, r: &ForeignItemKind) -> bool {\n pub fn eq_assoc_item_kind(l: &AssocItemKind, r: &AssocItemKind) -> bool {\n     use AssocItemKind::*;\n     match (l, r) {\n-        (Const(ld, lt, le), Const(rd, rt, re)) => {\n-            eq_defaultness(*ld, *rd) && eq_ty(lt, rt) && eq_expr_opt(le, re)\n-        }\n+        (Const(ld, lt, le), Const(rd, rt, re)) => eq_defaultness(*ld, *rd) && eq_ty(lt, rt) && eq_expr_opt(le, re),\n         (Fn(box FnKind(ld, lf, lg, lb)), Fn(box FnKind(rd, rf, rg, rb))) => {\n-            eq_defaultness(*ld, *rd)\n-                && eq_fn_sig(lf, rf)\n-                && eq_generics(lg, rg)\n-                && both(lb, rb, |l, r| eq_block(l, r))\n-        }\n+            eq_defaultness(*ld, *rd) && eq_fn_sig(lf, rf) && eq_generics(lg, rg) && both(lb, rb, |l, r| eq_block(l, r))\n+        },\n         (TyAlias(box TyAliasKind(ld, lg, lb, lt)), TyAlias(box TyAliasKind(rd, rg, rb, rt))) => {\n             eq_defaultness(*ld, *rd)\n                 && eq_generics(lg, rg)"}, {"sha": "269be217c2d875bf3db450a39940705666154459", "filename": "src/tools/clippy/clippy_lints/src/utils/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fdiagnostics.rs?ref=120b2a704a60d4341286bd82f6e638c65ca169b6", "patch": "@@ -110,7 +110,7 @@ pub fn span_lint_and_help<'a, T: LintContext>(\n pub fn span_lint_and_note<'a, T: LintContext>(\n     cx: &'a T,\n     lint: &'static Lint,\n-    span: Span,\n+    span: impl Into<MultiSpan>,\n     msg: &str,\n     note_span: Option<Span>,\n     note: &str,"}, {"sha": "cccad243e1b5917a1c52b4d34979a9fdc4626345", "filename": "src/tools/clippy/clippy_lints/src/utils/internal_lints.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Finternal_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Finternal_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Finternal_lints.rs?ref=120b2a704a60d4341286bd82f6e638c65ca169b6", "patch": "@@ -760,7 +760,7 @@ impl<'tcx> LateLintPass<'tcx> for MatchTypeOnDiagItem {\n             // Extract the path to the matched type\n             if let Some(segments) = path_to_matched_type(cx, ty_path);\n             let segments: Vec<&str> = segments.iter().map(|sym| &**sym).collect();\n-            if let Some(ty_did) = path_to_res(cx, &segments[..]).and_then(|res| res.opt_def_id());\n+            if let Some(ty_did) = path_to_res(cx, &segments[..]).opt_def_id();\n             // Check if the matched type is a diagnostic item\n             let diag_items = cx.tcx.diagnostic_items(ty_did.krate);\n             if let Some(item_name) = diag_items.iter().find_map(|(k, v)| if *v == ty_did { Some(k) } else { None });\n@@ -833,7 +833,7 @@ fn path_to_matched_type(cx: &LateContext<'_>, expr: &hir::Expr<'_>) -> Option<Ve\n // This is not a complete resolver for paths. It works on all the paths currently used in the paths\n // module.  That's all it does and all it needs to do.\n pub fn check_path(cx: &LateContext<'_>, path: &[&str]) -> bool {\n-    if path_to_res(cx, path).is_some() {\n+    if path_to_res(cx, path) != Res::Err {\n         return true;\n     }\n \n@@ -906,7 +906,7 @@ impl<'tcx> LateLintPass<'tcx> for InterningDefinedSymbol {\n         }\n \n         for &module in &[&paths::KW_MODULE, &paths::SYM_MODULE] {\n-            if let Some(Res::Def(_, def_id)) = path_to_res(cx, module) {\n+            if let Some(def_id) = path_to_res(cx, module).opt_def_id() {\n                 for item in cx.tcx.item_children(def_id).iter() {\n                     if_chain! {\n                         if let Res::Def(DefKind::Const, item_def_id) = item.res;"}, {"sha": "ef45f9fdcd5d49a29e1836ad784351c5f88fe48c", "filename": "src/tools/clippy/clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 17, "deletions": 14, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=120b2a704a60d4341286bd82f6e638c65ca169b6", "patch": "@@ -309,7 +309,15 @@ pub fn match_path_ast(path: &ast::Path, segments: &[&str]) -> bool {\n \n /// Gets the definition associated to a path.\n #[allow(clippy::shadow_unrelated)] // false positive #6563\n-pub fn path_to_res(cx: &LateContext<'_>, path: &[&str]) -> Option<Res> {\n+pub fn path_to_res(cx: &LateContext<'_>, path: &[&str]) -> Res {\n+    macro_rules! try_res {\n+        ($e:expr) => {\n+            match $e {\n+                Some(e) => e,\n+                None => return Res::Err,\n+            }\n+        };\n+    }\n     fn item_child_by_name<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId, name: &str) -> Option<&'tcx Export<HirId>> {\n         tcx.item_children(def_id)\n             .iter()\n@@ -318,12 +326,12 @@ pub fn path_to_res(cx: &LateContext<'_>, path: &[&str]) -> Option<Res> {\n \n     let (krate, first, path) = match *path {\n         [krate, first, ref path @ ..] => (krate, first, path),\n-        _ => return None,\n+        _ => return Res::Err,\n     };\n     let tcx = cx.tcx;\n     let crates = tcx.crates();\n-    let krate = crates.iter().find(|&&num| tcx.crate_name(num).as_str() == krate)?;\n-    let first = item_child_by_name(tcx, krate.as_def_id(), first)?;\n+    let krate = try_res!(crates.iter().find(|&&num| tcx.crate_name(num).as_str() == krate));\n+    let first = try_res!(item_child_by_name(tcx, krate.as_def_id(), first));\n     let last = path\n         .iter()\n         .copied()\n@@ -343,21 +351,15 @@ pub fn path_to_res(cx: &LateContext<'_>, path: &[&str]) -> Option<Res> {\n             } else {\n                 None\n             }\n-        })?;\n-    Some(last.res)\n+        });\n+    try_res!(last).res\n }\n \n /// Convenience function to get the `DefId` of a trait by path.\n /// It could be a trait or trait alias.\n pub fn get_trait_def_id(cx: &LateContext<'_>, path: &[&str]) -> Option<DefId> {\n-    let res = match path_to_res(cx, path) {\n-        Some(res) => res,\n-        None => return None,\n-    };\n-\n-    match res {\n+    match path_to_res(cx, path) {\n         Res::Def(DefKind::Trait | DefKind::TraitAlias, trait_id) => Some(trait_id),\n-        Res::Err => unreachable!(\"this trait resolution is impossible: {:?}\", &path),\n         _ => None,\n     }\n }\n@@ -1532,10 +1534,11 @@ pub fn fn_def_id(cx: &LateContext<'_>, expr: &Expr<'_>) -> Option<DefId> {\n         ExprKind::Call(\n             Expr {\n                 kind: ExprKind::Path(qpath),\n+                hir_id: path_hir_id,\n                 ..\n             },\n             ..,\n-        ) => cx.typeck_results().qpath_res(qpath, expr.hir_id).opt_def_id(),\n+        ) => cx.typeck_results().qpath_res(qpath, *path_hir_id).opt_def_id(),\n         _ => None,\n     }\n }"}, {"sha": "978a232bcfb3a132a37ef2d6d09f6b5ede42c02a", "filename": "src/tools/clippy/clippy_lints/src/write.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fwrite.rs?ref=120b2a704a60d4341286bd82f6e638c65ca169b6", "patch": "@@ -233,7 +233,11 @@ impl_lint_pass!(Write => [\n \n impl EarlyLintPass for Write {\n     fn check_item(&mut self, _: &EarlyContext<'_>, item: &Item) {\n-        if let ItemKind::Impl(box ImplKind { of_trait: Some(trait_ref), .. }) = &item.kind {\n+        if let ItemKind::Impl(box ImplKind {\n+            of_trait: Some(trait_ref),\n+            ..\n+        }) = &item.kind\n+        {\n             let trait_name = trait_ref\n                 .path\n                 .segments"}, {"sha": "8fd1dea9aeef9bfe6843c7df2c35e0d45e49ec67", "filename": "src/tools/clippy/doc/adding_lints.md", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftools%2Fclippy%2Fdoc%2Fadding_lints.md", "raw_url": "https://github.com/rust-lang/rust/raw/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftools%2Fclippy%2Fdoc%2Fadding_lints.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fdoc%2Fadding_lints.md?ref=120b2a704a60d4341286bd82f6e638c65ca169b6", "patch": "@@ -581,15 +581,15 @@ in the following steps:\n 3. Passing the configuration value to the lint impl struct:\n \n     First find the struct construction in the [clippy_lints lib file](/clippy_lints/src/lib.rs). \n-    Make sure that `clippy dev update_lints` added it beforehand. The configuration value is now \n-    cloned or copied into a local value that is then passed to the impl struct like this:\n+    The configuration value is now cloned or copied into a local value that is then passed to the\n+    impl struct like this:\n     ```rust\n     // Default generated registration:\n-    store.register_late_pass(|| box module::StructName);\n+    store.register_*_pass(|| box module::StructName);\n \n     // New registration with configuration value\n     let configuration_ident = conf.configuration_ident.clone();\n-    store.register_late_pass(move || box module::StructName::new(configuration_ident));\n+    store.register_*_pass(move || box module::StructName::new(configuration_ident));\n     ```\n \n     Congratulations the work is almost done. The configuration value can now be accessed\n@@ -599,7 +599,7 @@ in the following steps:\n     1. The default configured value can be tested like any normal lint in [`tests/ui`](/tests/ui).\n     2. The configuration itself will be tested separately in [`tests/ui-toml`](/tests/ui-toml). \n         Simply add a new subfolder with a fitting name. This folder contains a `clippy.toml` file \n-        with the configuration value and a rust file that should be linted by clippy. The test can \n+        with the configuration value and a rust file that should be linted by Clippy. The test can \n         otherwise be written as usual.\n \n ## Cheatsheet"}, {"sha": "a9416f3b20b7a3b229c4a5c1b62ba1451f60bf26", "filename": "src/tools/clippy/doc/basics.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftools%2Fclippy%2Fdoc%2Fbasics.md", "raw_url": "https://github.com/rust-lang/rust/raw/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftools%2Fclippy%2Fdoc%2Fbasics.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fdoc%2Fbasics.md?ref=120b2a704a60d4341286bd82f6e638c65ca169b6", "patch": "@@ -109,7 +109,7 @@ See <https://rustc-dev-guide.rust-lang.org/contributing.html#opening-a-pr>.\n | HIR          | High-Level Intermediate Representation |\n | TCX          | Type context                           |\n \n-This is a concise list of abbreviations that can come up during clippy development. An extensive\n+This is a concise list of abbreviations that can come up during Clippy development. An extensive\n general list can be found in the [rustc-dev-guide glossary][glossary]. Always feel free to ask if\n an abbreviation or meaning is unclear to you.\n "}, {"sha": "2b793589049ba7b7d16dffb9156115d2cdd52ced", "filename": "src/tools/clippy/mini-macro/src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftools%2Fclippy%2Fmini-macro%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftools%2Fclippy%2Fmini-macro%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fmini-macro%2Fsrc%2Flib.rs?ref=120b2a704a60d4341286bd82f6e638c65ca169b6", "patch": "@@ -7,6 +7,9 @@ extern crate proc_macro;\n use proc_macro::{quote, TokenStream};\n \n #[proc_macro_derive(ClippyMiniMacroTest)]\n+/// # Panics\n+///\n+/// Panics if the macro derivation fails\n pub fn mini_macro(_: TokenStream) -> TokenStream {\n     quote!(\n         #[allow(unused)]"}, {"sha": "b617203bef6d8208dac6f963f5df95bafa421a88", "filename": "src/tools/clippy/rust-toolchain", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftools%2Fclippy%2Frust-toolchain", "raw_url": "https://github.com/rust-lang/rust/raw/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftools%2Fclippy%2Frust-toolchain", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Frust-toolchain?ref=120b2a704a60d4341286bd82f6e638c65ca169b6", "patch": "@@ -1,3 +1,3 @@\n [toolchain]\n-channel = \"nightly-2021-01-30\"\n+channel = \"nightly-2021-02-03\"\n components = [\"llvm-tools-preview\", \"rustc-dev\", \"rust-src\", \"rustfmt\"]"}, {"sha": "7ef932f367b101a61e47375f0b580482a42ab4e2", "filename": "src/tools/clippy/tests/ui/doc_panics.rs", "status": "added", "additions": 95, "deletions": 0, "changes": 95, "blob_url": "https://github.com/rust-lang/rust/blob/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fdoc_panics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fdoc_panics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fdoc_panics.rs?ref=120b2a704a60d4341286bd82f6e638c65ca169b6", "patch": "@@ -0,0 +1,95 @@\n+#![warn(clippy::missing_panics_doc)]\n+#![allow(clippy::option_map_unit_fn)]\n+\n+fn main() {}\n+\n+/// This needs to be documented\n+pub fn unwrap() {\n+    let result = Err(\"Hi\");\n+    result.unwrap()\n+}\n+\n+/// This needs to be documented\n+pub fn panic() {\n+    panic!(\"This function panics\")\n+}\n+\n+/// This needs to be documented\n+pub fn todo() {\n+    todo!()\n+}\n+\n+/// This needs to be documented\n+pub fn inner_body(opt: Option<u32>) {\n+    opt.map(|x| {\n+        if x == 10 {\n+            panic!()\n+        }\n+    });\n+}\n+\n+/// This is documented\n+///\n+/// # Panics\n+///\n+/// Panics if `result` if an error\n+pub fn unwrap_documented() {\n+    let result = Err(\"Hi\");\n+    result.unwrap()\n+}\n+\n+/// This is documented\n+///\n+/// # Panics\n+///\n+/// Panics just because\n+pub fn panic_documented() {\n+    panic!(\"This function panics\")\n+}\n+\n+/// This is documented\n+///\n+/// # Panics\n+///\n+/// Panics if `opt` is Just(10)\n+pub fn inner_body_documented(opt: Option<u32>) {\n+    opt.map(|x| {\n+        if x == 10 {\n+            panic!()\n+        }\n+    });\n+}\n+\n+/// This is documented\n+///\n+/// # Panics\n+///\n+/// We still need to do this part\n+pub fn todo_documented() {\n+    todo!()\n+}\n+\n+/// This is okay because it is private\n+fn unwrap_private() {\n+    let result = Err(\"Hi\");\n+    result.unwrap()\n+}\n+\n+/// This is okay because it is private\n+fn panic_private() {\n+    panic!(\"This function panics\")\n+}\n+\n+/// This is okay because it is private\n+fn todo_private() {\n+    todo!()\n+}\n+\n+/// This is okay because it is private\n+fn inner_body_private(opt: Option<u32>) {\n+    opt.map(|x| {\n+        if x == 10 {\n+            panic!()\n+        }\n+    });\n+}"}, {"sha": "c0c4e9e4fa7eec6d682eddd4f7b214cfeded6712", "filename": "src/tools/clippy/tests/ui/doc_panics.stderr", "status": "added", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fdoc_panics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fdoc_panics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fdoc_panics.stderr?ref=120b2a704a60d4341286bd82f6e638c65ca169b6", "patch": "@@ -0,0 +1,67 @@\n+error: docs for function which may panic missing `# Panics` section\n+  --> $DIR/doc_panics.rs:7:1\n+   |\n+LL | / pub fn unwrap() {\n+LL | |     let result = Err(\"Hi\");\n+LL | |     result.unwrap()\n+LL | | }\n+   | |_^\n+   |\n+   = note: `-D clippy::missing-panics-doc` implied by `-D warnings`\n+note: first possible panic found here\n+  --> $DIR/doc_panics.rs:9:5\n+   |\n+LL |     result.unwrap()\n+   |     ^^^^^^^^^^^^^^^\n+\n+error: docs for function which may panic missing `# Panics` section\n+  --> $DIR/doc_panics.rs:13:1\n+   |\n+LL | / pub fn panic() {\n+LL | |     panic!(\"This function panics\")\n+LL | | }\n+   | |_^\n+   |\n+note: first possible panic found here\n+  --> $DIR/doc_panics.rs:14:5\n+   |\n+LL |     panic!(\"This function panics\")\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: docs for function which may panic missing `# Panics` section\n+  --> $DIR/doc_panics.rs:18:1\n+   |\n+LL | / pub fn todo() {\n+LL | |     todo!()\n+LL | | }\n+   | |_^\n+   |\n+note: first possible panic found here\n+  --> $DIR/doc_panics.rs:19:5\n+   |\n+LL |     todo!()\n+   |     ^^^^^^^\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: docs for function which may panic missing `# Panics` section\n+  --> $DIR/doc_panics.rs:23:1\n+   |\n+LL | / pub fn inner_body(opt: Option<u32>) {\n+LL | |     opt.map(|x| {\n+LL | |         if x == 10 {\n+LL | |             panic!()\n+LL | |         }\n+LL | |     });\n+LL | | }\n+   | |_^\n+   |\n+note: first possible panic found here\n+  --> $DIR/doc_panics.rs:26:13\n+   |\n+LL |             panic!()\n+   |             ^^^^^^^^\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: aborting due to 4 previous errors\n+"}, {"sha": "c209f5b4b7278c2ac7590673c11ffc5e4a5fca02", "filename": "src/tools/clippy/tests/ui/exhaustive_items.fixed", "status": "modified", "additions": 16, "deletions": 7, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fexhaustive_items.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fexhaustive_items.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fexhaustive_items.fixed?ref=120b2a704a60d4341286bd82f6e638c65ca169b6", "patch": "@@ -56,27 +56,36 @@ pub mod enums {\n pub mod structs {\n     #[non_exhaustive]\n     pub struct Exhaustive {\n-        foo: u8,\n-        bar: String,\n+        pub foo: u8,\n+        pub bar: String,\n     }\n \n     // no warning, already non_exhaustive\n     #[non_exhaustive]\n     pub struct NonExhaustive {\n-        foo: u8,\n+        pub foo: u8,\n+        pub bar: String,\n+    }\n+\n+    // no warning, private fields\n+    pub struct ExhaustivePrivateFieldTuple(u8);\n+\n+    // no warning, private fields\n+    pub struct ExhaustivePrivateField {\n+        pub foo: u8,\n         bar: String,\n     }\n \n     // no warning, private\n     struct ExhaustivePrivate {\n-        foo: u8,\n-        bar: String,\n+        pub foo: u8,\n+        pub bar: String,\n     }\n \n     // no warning, private\n     #[non_exhaustive]\n     struct NonExhaustivePrivate {\n-        foo: u8,\n-        bar: String,\n+        pub foo: u8,\n+        pub bar: String,\n     }\n }"}, {"sha": "6f59dbf2da59b126f0537c2b034193e076ca1164", "filename": "src/tools/clippy/tests/ui/exhaustive_items.rs", "status": "modified", "additions": 16, "deletions": 7, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fexhaustive_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fexhaustive_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fexhaustive_items.rs?ref=120b2a704a60d4341286bd82f6e638c65ca169b6", "patch": "@@ -53,27 +53,36 @@ pub mod enums {\n \n pub mod structs {\n     pub struct Exhaustive {\n-        foo: u8,\n-        bar: String,\n+        pub foo: u8,\n+        pub bar: String,\n     }\n \n     // no warning, already non_exhaustive\n     #[non_exhaustive]\n     pub struct NonExhaustive {\n-        foo: u8,\n+        pub foo: u8,\n+        pub bar: String,\n+    }\n+\n+    // no warning, private fields\n+    pub struct ExhaustivePrivateFieldTuple(u8);\n+\n+    // no warning, private fields\n+    pub struct ExhaustivePrivateField {\n+        pub foo: u8,\n         bar: String,\n     }\n \n     // no warning, private\n     struct ExhaustivePrivate {\n-        foo: u8,\n-        bar: String,\n+        pub foo: u8,\n+        pub bar: String,\n     }\n \n     // no warning, private\n     #[non_exhaustive]\n     struct NonExhaustivePrivate {\n-        foo: u8,\n-        bar: String,\n+        pub foo: u8,\n+        pub bar: String,\n     }\n }"}, {"sha": "8fbab535a9b25a67ca26b7b9edeabb9550a7ead2", "filename": "src/tools/clippy/tests/ui/exhaustive_items.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fexhaustive_items.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fexhaustive_items.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fexhaustive_items.stderr?ref=120b2a704a60d4341286bd82f6e638c65ca169b6", "patch": "@@ -41,8 +41,8 @@ error: exported structs should not be exhaustive\n   --> $DIR/exhaustive_items.rs:55:5\n    |\n LL | /     pub struct Exhaustive {\n-LL | |         foo: u8,\n-LL | |         bar: String,\n+LL | |         pub foo: u8,\n+LL | |         pub bar: String,\n LL | |     }\n    | |_____^\n    |"}, {"sha": "e3561863c1e1ff7f00f1e52703e808cdb1c64e63", "filename": "src/tools/clippy/tests/ui/let_and_return.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftools%2Fclippy%2Ftests%2Fui%2Flet_and_return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftools%2Fclippy%2Ftests%2Fui%2Flet_and_return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Flet_and_return.rs?ref=120b2a704a60d4341286bd82f6e638c65ca169b6", "patch": "@@ -117,7 +117,11 @@ mod no_lint_if_stmt_borrows {\n             fn drop(&mut self) {}\n         }\n \n-        impl Foo<'_> {\n+        impl<'a> Foo<'a> {\n+            fn new(inner: &'a Inner) -> Self {\n+                Self { inner }\n+            }\n+\n             fn value(&self) -> i32 {\n                 42\n             }\n@@ -132,6 +136,12 @@ mod no_lint_if_stmt_borrows {\n             let value = some_foo(&x).value();\n             value\n         }\n+\n+        fn test2() -> i32 {\n+            let x = Inner {};\n+            let value = Foo::new(&x).value();\n+            value\n+        }\n     }\n }\n "}, {"sha": "a6941dabeb88d56a722fa07b7efbcf620c395cea", "filename": "src/tools/clippy/tests/ui/let_and_return.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftools%2Fclippy%2Ftests%2Fui%2Flet_and_return.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftools%2Fclippy%2Ftests%2Fui%2Flet_and_return.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Flet_and_return.stderr?ref=120b2a704a60d4341286bd82f6e638c65ca169b6", "patch": "@@ -28,7 +28,7 @@ LL |         5\n    |\n \n error: returning the result of a `let` binding from a block\n-  --> $DIR/let_and_return.rs:154:13\n+  --> $DIR/let_and_return.rs:164:13\n    |\n LL |             let clone = Arc::clone(&self.foo);\n    |             ---------------------------------- unnecessary `let` binding"}, {"sha": "44c51e8112a7d6fdf4322d3cc3328bacc15c7665", "filename": "src/tools/clippy/tests/ui/match_overlapping_arm.rs", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmatch_overlapping_arm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmatch_overlapping_arm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmatch_overlapping_arm.rs?ref=120b2a704a60d4341286bd82f6e638c65ca169b6", "patch": "@@ -57,6 +57,36 @@ fn overlapping() {\n         _ => (),\n     }\n \n+    match 42 {\n+        5..7 => println!(\"5 .. 7\"),\n+        0..10 => println!(\"0 .. 10\"),\n+        _ => (),\n+    }\n+\n+    match 42 {\n+        5..10 => println!(\"5 .. 10\"),\n+        0..=10 => println!(\"0 ... 10\"),\n+        _ => (),\n+    }\n+\n+    match 42 {\n+        0..14 => println!(\"0 .. 14\"),\n+        5..10 => println!(\"5 .. 10\"),\n+        _ => (),\n+    }\n+\n+    match 42 {\n+        5..14 => println!(\"5 .. 14\"),\n+        0..=10 => println!(\"0 ... 10\"),\n+        _ => (),\n+    }\n+\n+    match 42 {\n+        0..7 => println!(\"0 .. 7\"),\n+        0..=10 => println!(\"0 ... 10\"),\n+        _ => (),\n+    }\n+\n     /*\n     // FIXME(JohnTitor): uncomment this once rustfmt knows half-open patterns\n     match 42 {"}, {"sha": "f25a66d634e888189565a0bbec8e1b8c9994be03", "filename": "src/tools/clippy/tests/ui/match_overlapping_arm.stderr", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmatch_overlapping_arm.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmatch_overlapping_arm.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmatch_overlapping_arm.stderr?ref=120b2a704a60d4341286bd82f6e638c65ca169b6", "patch": "@@ -24,39 +24,39 @@ LL |         FOO..=11 => println!(\"0 ... 11\"),\n    |         ^^^^^^^^\n \n error: some ranges overlap\n-  --> $DIR/match_overlapping_arm.rs:26:9\n+  --> $DIR/match_overlapping_arm.rs:55:9\n    |\n-LL |         0..=5 => println!(\"0 ... 5\"),\n+LL |         0..11 => println!(\"0 .. 11\"),\n    |         ^^^^^\n    |\n note: overlaps with this\n-  --> $DIR/match_overlapping_arm.rs:25:9\n+  --> $DIR/match_overlapping_arm.rs:56:9\n    |\n-LL |         2 => println!(\"2\"),\n-   |         ^\n+LL |         0..=11 => println!(\"0 ... 11\"),\n+   |         ^^^^^^\n \n error: some ranges overlap\n-  --> $DIR/match_overlapping_arm.rs:32:9\n+  --> $DIR/match_overlapping_arm.rs:80:9\n    |\n-LL |         0..=2 => println!(\"0 ... 2\"),\n-   |         ^^^^^\n+LL |         0..=10 => println!(\"0 ... 10\"),\n+   |         ^^^^^^\n    |\n note: overlaps with this\n-  --> $DIR/match_overlapping_arm.rs:31:9\n+  --> $DIR/match_overlapping_arm.rs:79:9\n    |\n-LL |         2 => println!(\"2\"),\n-   |         ^\n+LL |         5..14 => println!(\"5 .. 14\"),\n+   |         ^^^^^\n \n error: some ranges overlap\n-  --> $DIR/match_overlapping_arm.rs:55:9\n+  --> $DIR/match_overlapping_arm.rs:85:9\n    |\n-LL |         0..11 => println!(\"0 .. 11\"),\n-   |         ^^^^^\n+LL |         0..7 => println!(\"0 .. 7\"),\n+   |         ^^^^\n    |\n note: overlaps with this\n-  --> $DIR/match_overlapping_arm.rs:56:9\n+  --> $DIR/match_overlapping_arm.rs:86:9\n    |\n-LL |         0..=11 => println!(\"0 ... 11\"),\n+LL |         0..=10 => println!(\"0 ... 10\"),\n    |         ^^^^^^\n \n error: aborting due to 5 previous errors"}, {"sha": "a7f8f54f2be04cb98667127b87d3db75c50e1301", "filename": "src/tools/clippy/tests/ui/should_impl_trait/corner_cases.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fshould_impl_trait%2Fcorner_cases.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fshould_impl_trait%2Fcorner_cases.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fshould_impl_trait%2Fcorner_cases.rs?ref=120b2a704a60d4341286bd82f6e638c65ca169b6", "patch": "@@ -8,7 +8,8 @@\n     clippy::unused_self,\n     clippy::needless_lifetimes,\n     clippy::missing_safety_doc,\n-    clippy::wrong_self_convention\n+    clippy::wrong_self_convention,\n+    clippy::missing_panics_doc\n )]\n \n use std::ops::Mul;"}, {"sha": "69a3390b03b0b2cac0988e1f35dc1796e0bcd41d", "filename": "src/tools/clippy/tests/ui/should_impl_trait/method_list_1.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fshould_impl_trait%2Fmethod_list_1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fshould_impl_trait%2Fmethod_list_1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fshould_impl_trait%2Fmethod_list_1.rs?ref=120b2a704a60d4341286bd82f6e638c65ca169b6", "patch": "@@ -8,7 +8,8 @@\n     clippy::unused_self,\n     clippy::needless_lifetimes,\n     clippy::missing_safety_doc,\n-    clippy::wrong_self_convention\n+    clippy::wrong_self_convention,\n+    clippy::missing_panics_doc\n )]\n \n use std::ops::Mul;"}, {"sha": "86c63946516ce84453725eff5a31b58cb1ac246c", "filename": "src/tools/clippy/tests/ui/should_impl_trait/method_list_1.stderr", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fshould_impl_trait%2Fmethod_list_1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fshould_impl_trait%2Fmethod_list_1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fshould_impl_trait%2Fmethod_list_1.stderr?ref=120b2a704a60d4341286bd82f6e638c65ca169b6", "patch": "@@ -1,5 +1,5 @@\n error: method `add` can be confused for the standard trait method `std::ops::Add::add`\n-  --> $DIR/method_list_1.rs:25:5\n+  --> $DIR/method_list_1.rs:26:5\n    |\n LL | /     pub fn add(self, other: T) -> T {\n LL | |         unimplemented!()\n@@ -10,7 +10,7 @@ LL | |     }\n    = help: consider implementing the trait `std::ops::Add` or choosing a less ambiguous method name\n \n error: method `as_mut` can be confused for the standard trait method `std::convert::AsMut::as_mut`\n-  --> $DIR/method_list_1.rs:29:5\n+  --> $DIR/method_list_1.rs:30:5\n    |\n LL | /     pub fn as_mut(&mut self) -> &mut T {\n LL | |         unimplemented!()\n@@ -20,7 +20,7 @@ LL | |     }\n    = help: consider implementing the trait `std::convert::AsMut` or choosing a less ambiguous method name\n \n error: method `as_ref` can be confused for the standard trait method `std::convert::AsRef::as_ref`\n-  --> $DIR/method_list_1.rs:33:5\n+  --> $DIR/method_list_1.rs:34:5\n    |\n LL | /     pub fn as_ref(&self) -> &T {\n LL | |         unimplemented!()\n@@ -30,7 +30,7 @@ LL | |     }\n    = help: consider implementing the trait `std::convert::AsRef` or choosing a less ambiguous method name\n \n error: method `bitand` can be confused for the standard trait method `std::ops::BitAnd::bitand`\n-  --> $DIR/method_list_1.rs:37:5\n+  --> $DIR/method_list_1.rs:38:5\n    |\n LL | /     pub fn bitand(self, rhs: T) -> T {\n LL | |         unimplemented!()\n@@ -40,7 +40,7 @@ LL | |     }\n    = help: consider implementing the trait `std::ops::BitAnd` or choosing a less ambiguous method name\n \n error: method `bitor` can be confused for the standard trait method `std::ops::BitOr::bitor`\n-  --> $DIR/method_list_1.rs:41:5\n+  --> $DIR/method_list_1.rs:42:5\n    |\n LL | /     pub fn bitor(self, rhs: Self) -> Self {\n LL | |         unimplemented!()\n@@ -50,7 +50,7 @@ LL | |     }\n    = help: consider implementing the trait `std::ops::BitOr` or choosing a less ambiguous method name\n \n error: method `bitxor` can be confused for the standard trait method `std::ops::BitXor::bitxor`\n-  --> $DIR/method_list_1.rs:45:5\n+  --> $DIR/method_list_1.rs:46:5\n    |\n LL | /     pub fn bitxor(self, rhs: Self) -> Self {\n LL | |         unimplemented!()\n@@ -60,7 +60,7 @@ LL | |     }\n    = help: consider implementing the trait `std::ops::BitXor` or choosing a less ambiguous method name\n \n error: method `borrow` can be confused for the standard trait method `std::borrow::Borrow::borrow`\n-  --> $DIR/method_list_1.rs:49:5\n+  --> $DIR/method_list_1.rs:50:5\n    |\n LL | /     pub fn borrow(&self) -> &str {\n LL | |         unimplemented!()\n@@ -70,7 +70,7 @@ LL | |     }\n    = help: consider implementing the trait `std::borrow::Borrow` or choosing a less ambiguous method name\n \n error: method `borrow_mut` can be confused for the standard trait method `std::borrow::BorrowMut::borrow_mut`\n-  --> $DIR/method_list_1.rs:53:5\n+  --> $DIR/method_list_1.rs:54:5\n    |\n LL | /     pub fn borrow_mut(&mut self) -> &mut str {\n LL | |         unimplemented!()\n@@ -80,7 +80,7 @@ LL | |     }\n    = help: consider implementing the trait `std::borrow::BorrowMut` or choosing a less ambiguous method name\n \n error: method `clone` can be confused for the standard trait method `std::clone::Clone::clone`\n-  --> $DIR/method_list_1.rs:57:5\n+  --> $DIR/method_list_1.rs:58:5\n    |\n LL | /     pub fn clone(&self) -> Self {\n LL | |         unimplemented!()\n@@ -90,7 +90,7 @@ LL | |     }\n    = help: consider implementing the trait `std::clone::Clone` or choosing a less ambiguous method name\n \n error: method `cmp` can be confused for the standard trait method `std::cmp::Ord::cmp`\n-  --> $DIR/method_list_1.rs:61:5\n+  --> $DIR/method_list_1.rs:62:5\n    |\n LL | /     pub fn cmp(&self, other: &Self) -> Self {\n LL | |         unimplemented!()\n@@ -100,7 +100,7 @@ LL | |     }\n    = help: consider implementing the trait `std::cmp::Ord` or choosing a less ambiguous method name\n \n error: method `deref` can be confused for the standard trait method `std::ops::Deref::deref`\n-  --> $DIR/method_list_1.rs:69:5\n+  --> $DIR/method_list_1.rs:70:5\n    |\n LL | /     pub fn deref(&self) -> &Self {\n LL | |         unimplemented!()\n@@ -110,7 +110,7 @@ LL | |     }\n    = help: consider implementing the trait `std::ops::Deref` or choosing a less ambiguous method name\n \n error: method `deref_mut` can be confused for the standard trait method `std::ops::DerefMut::deref_mut`\n-  --> $DIR/method_list_1.rs:73:5\n+  --> $DIR/method_list_1.rs:74:5\n    |\n LL | /     pub fn deref_mut(&mut self) -> &mut Self {\n LL | |         unimplemented!()\n@@ -120,7 +120,7 @@ LL | |     }\n    = help: consider implementing the trait `std::ops::DerefMut` or choosing a less ambiguous method name\n \n error: method `div` can be confused for the standard trait method `std::ops::Div::div`\n-  --> $DIR/method_list_1.rs:77:5\n+  --> $DIR/method_list_1.rs:78:5\n    |\n LL | /     pub fn div(self, rhs: Self) -> Self {\n LL | |         unimplemented!()\n@@ -130,7 +130,7 @@ LL | |     }\n    = help: consider implementing the trait `std::ops::Div` or choosing a less ambiguous method name\n \n error: method `drop` can be confused for the standard trait method `std::ops::Drop::drop`\n-  --> $DIR/method_list_1.rs:81:5\n+  --> $DIR/method_list_1.rs:82:5\n    |\n LL | /     pub fn drop(&mut self) {\n LL | |         unimplemented!()"}, {"sha": "2cdc1a06fe689dab34e495eee9466253e7836c8d", "filename": "src/tools/clippy/tests/ui/should_impl_trait/method_list_2.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fshould_impl_trait%2Fmethod_list_2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fshould_impl_trait%2Fmethod_list_2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fshould_impl_trait%2Fmethod_list_2.rs?ref=120b2a704a60d4341286bd82f6e638c65ca169b6", "patch": "@@ -8,7 +8,8 @@\n     clippy::unused_self,\n     clippy::needless_lifetimes,\n     clippy::missing_safety_doc,\n-    clippy::wrong_self_convention\n+    clippy::wrong_self_convention,\n+    clippy::missing_panics_doc\n )]\n \n use std::ops::Mul;"}, {"sha": "0142e2991081c79ae4099788ea6c85ed02535428", "filename": "src/tools/clippy/tests/ui/should_impl_trait/method_list_2.stderr", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fshould_impl_trait%2Fmethod_list_2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/120b2a704a60d4341286bd82f6e638c65ca169b6/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fshould_impl_trait%2Fmethod_list_2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fshould_impl_trait%2Fmethod_list_2.stderr?ref=120b2a704a60d4341286bd82f6e638c65ca169b6", "patch": "@@ -1,5 +1,5 @@\n error: method `eq` can be confused for the standard trait method `std::cmp::PartialEq::eq`\n-  --> $DIR/method_list_2.rs:26:5\n+  --> $DIR/method_list_2.rs:27:5\n    |\n LL | /     pub fn eq(&self, other: &Self) -> bool {\n LL | |         unimplemented!()\n@@ -10,7 +10,7 @@ LL | |     }\n    = help: consider implementing the trait `std::cmp::PartialEq` or choosing a less ambiguous method name\n \n error: method `from_iter` can be confused for the standard trait method `std::iter::FromIterator::from_iter`\n-  --> $DIR/method_list_2.rs:30:5\n+  --> $DIR/method_list_2.rs:31:5\n    |\n LL | /     pub fn from_iter<T>(iter: T) -> Self {\n LL | |         unimplemented!()\n@@ -20,7 +20,7 @@ LL | |     }\n    = help: consider implementing the trait `std::iter::FromIterator` or choosing a less ambiguous method name\n \n error: method `from_str` can be confused for the standard trait method `std::str::FromStr::from_str`\n-  --> $DIR/method_list_2.rs:34:5\n+  --> $DIR/method_list_2.rs:35:5\n    |\n LL | /     pub fn from_str(s: &str) -> Result<Self, Self> {\n LL | |         unimplemented!()\n@@ -30,7 +30,7 @@ LL | |     }\n    = help: consider implementing the trait `std::str::FromStr` or choosing a less ambiguous method name\n \n error: method `hash` can be confused for the standard trait method `std::hash::Hash::hash`\n-  --> $DIR/method_list_2.rs:38:5\n+  --> $DIR/method_list_2.rs:39:5\n    |\n LL | /     pub fn hash(&self, state: &mut T) {\n LL | |         unimplemented!()\n@@ -40,7 +40,7 @@ LL | |     }\n    = help: consider implementing the trait `std::hash::Hash` or choosing a less ambiguous method name\n \n error: method `index` can be confused for the standard trait method `std::ops::Index::index`\n-  --> $DIR/method_list_2.rs:42:5\n+  --> $DIR/method_list_2.rs:43:5\n    |\n LL | /     pub fn index(&self, index: usize) -> &Self {\n LL | |         unimplemented!()\n@@ -50,7 +50,7 @@ LL | |     }\n    = help: consider implementing the trait `std::ops::Index` or choosing a less ambiguous method name\n \n error: method `index_mut` can be confused for the standard trait method `std::ops::IndexMut::index_mut`\n-  --> $DIR/method_list_2.rs:46:5\n+  --> $DIR/method_list_2.rs:47:5\n    |\n LL | /     pub fn index_mut(&mut self, index: usize) -> &mut Self {\n LL | |         unimplemented!()\n@@ -60,7 +60,7 @@ LL | |     }\n    = help: consider implementing the trait `std::ops::IndexMut` or choosing a less ambiguous method name\n \n error: method `into_iter` can be confused for the standard trait method `std::iter::IntoIterator::into_iter`\n-  --> $DIR/method_list_2.rs:50:5\n+  --> $DIR/method_list_2.rs:51:5\n    |\n LL | /     pub fn into_iter(self) -> Self {\n LL | |         unimplemented!()\n@@ -70,7 +70,7 @@ LL | |     }\n    = help: consider implementing the trait `std::iter::IntoIterator` or choosing a less ambiguous method name\n \n error: method `mul` can be confused for the standard trait method `std::ops::Mul::mul`\n-  --> $DIR/method_list_2.rs:54:5\n+  --> $DIR/method_list_2.rs:55:5\n    |\n LL | /     pub fn mul(self, rhs: Self) -> Self {\n LL | |         unimplemented!()\n@@ -80,7 +80,7 @@ LL | |     }\n    = help: consider implementing the trait `std::ops::Mul` or choosing a less ambiguous method name\n \n error: method `neg` can be confused for the standard trait method `std::ops::Neg::neg`\n-  --> $DIR/method_list_2.rs:58:5\n+  --> $DIR/method_list_2.rs:59:5\n    |\n LL | /     pub fn neg(self) -> Self {\n LL | |         unimplemented!()\n@@ -90,7 +90,7 @@ LL | |     }\n    = help: consider implementing the trait `std::ops::Neg` or choosing a less ambiguous method name\n \n error: method `next` can be confused for the standard trait method `std::iter::Iterator::next`\n-  --> $DIR/method_list_2.rs:62:5\n+  --> $DIR/method_list_2.rs:63:5\n    |\n LL | /     pub fn next(&mut self) -> Option<Self> {\n LL | |         unimplemented!()\n@@ -100,7 +100,7 @@ LL | |     }\n    = help: consider implementing the trait `std::iter::Iterator` or choosing a less ambiguous method name\n \n error: method `not` can be confused for the standard trait method `std::ops::Not::not`\n-  --> $DIR/method_list_2.rs:66:5\n+  --> $DIR/method_list_2.rs:67:5\n    |\n LL | /     pub fn not(self) -> Self {\n LL | |         unimplemented!()\n@@ -110,7 +110,7 @@ LL | |     }\n    = help: consider implementing the trait `std::ops::Not` or choosing a less ambiguous method name\n \n error: method `rem` can be confused for the standard trait method `std::ops::Rem::rem`\n-  --> $DIR/method_list_2.rs:70:5\n+  --> $DIR/method_list_2.rs:71:5\n    |\n LL | /     pub fn rem(self, rhs: Self) -> Self {\n LL | |         unimplemented!()\n@@ -120,7 +120,7 @@ LL | |     }\n    = help: consider implementing the trait `std::ops::Rem` or choosing a less ambiguous method name\n \n error: method `shl` can be confused for the standard trait method `std::ops::Shl::shl`\n-  --> $DIR/method_list_2.rs:74:5\n+  --> $DIR/method_list_2.rs:75:5\n    |\n LL | /     pub fn shl(self, rhs: Self) -> Self {\n LL | |         unimplemented!()\n@@ -130,7 +130,7 @@ LL | |     }\n    = help: consider implementing the trait `std::ops::Shl` or choosing a less ambiguous method name\n \n error: method `shr` can be confused for the standard trait method `std::ops::Shr::shr`\n-  --> $DIR/method_list_2.rs:78:5\n+  --> $DIR/method_list_2.rs:79:5\n    |\n LL | /     pub fn shr(self, rhs: Self) -> Self {\n LL | |         unimplemented!()\n@@ -140,7 +140,7 @@ LL | |     }\n    = help: consider implementing the trait `std::ops::Shr` or choosing a less ambiguous method name\n \n error: method `sub` can be confused for the standard trait method `std::ops::Sub::sub`\n-  --> $DIR/method_list_2.rs:82:5\n+  --> $DIR/method_list_2.rs:83:5\n    |\n LL | /     pub fn sub(self, rhs: Self) -> Self {\n LL | |         unimplemented!()"}]}