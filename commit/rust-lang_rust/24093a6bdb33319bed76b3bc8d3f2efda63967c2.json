{"sha": "24093a6bdb33319bed76b3bc8d3f2efda63967c2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI0MDkzYTZiZGIzMzMxOWJlZDc2YjNiYzhkM2YyZWZkYTYzOTY3YzI=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2018-09-04T15:57:17Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2018-09-05T10:52:17Z"}, "message": "Allow for opting out of ThinLTO and clean up LTO related cli flag handling.", "tree": {"sha": "003e8a972f1fe3261ff224603f4040bd2c2665c1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/003e8a972f1fe3261ff224603f4040bd2c2665c1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/24093a6bdb33319bed76b3bc8d3f2efda63967c2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/24093a6bdb33319bed76b3bc8d3f2efda63967c2", "html_url": "https://github.com/rust-lang/rust/commit/24093a6bdb33319bed76b3bc8d3f2efda63967c2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/24093a6bdb33319bed76b3bc8d3f2efda63967c2/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4efc0a7811ee0e422dfc5d8a871b54160c18e35b", "url": "https://api.github.com/repos/rust-lang/rust/commits/4efc0a7811ee0e422dfc5d8a871b54160c18e35b", "html_url": "https://github.com/rust-lang/rust/commit/4efc0a7811ee0e422dfc5d8a871b54160c18e35b"}], "stats": {"total": 129, "additions": 97, "deletions": 32}, "files": [{"sha": "28e473a1383bfca8c30fc5f99b88f04053ab83d3", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 44, "deletions": 16, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/24093a6bdb33319bed76b3bc8d3f2efda63967c2/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24093a6bdb33319bed76b3bc8d3f2efda63967c2/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=24093a6bdb33319bed76b3bc8d3f2efda63967c2", "patch": "@@ -68,15 +68,13 @@ pub enum OptLevel {\n     SizeMin,    // -Oz\n }\n \n+/// This is what the `LtoCli` values get mapped to after resolving defaults and\n+/// and taking other command line options into account.\n #[derive(Clone, Copy, PartialEq, Hash, Debug)]\n pub enum Lto {\n     /// Don't do any LTO whatsoever\n     No,\n \n-    /// Do a full crate graph LTO. The flavor is determined by the compiler\n-    /// (currently the default is \"fat\").\n-    Yes,\n-\n     /// Do a full crate graph LTO with ThinLTO\n     Thin,\n \n@@ -88,6 +86,23 @@ pub enum Lto {\n     Fat,\n }\n \n+/// The different settings that the `-C lto` flag can have.\n+#[derive(Clone, Copy, PartialEq, Hash, Debug)]\n+pub enum LtoCli {\n+    /// `-C lto=no`\n+    No,\n+    /// `-C lto=yes`\n+    Yes,\n+    /// `-C lto`\n+    NoParam,\n+    /// `-C lto=thin`\n+    Thin,\n+    /// `-C lto=fat`\n+    Fat,\n+    /// No `-C lto` flag passed\n+    Unspecified,\n+}\n+\n #[derive(Clone, PartialEq, Hash)]\n pub enum CrossLangLto {\n     LinkerPlugin(PathBuf),\n@@ -801,15 +816,16 @@ macro_rules! options {\n         pub const parse_unpretty: Option<&'static str> =\n             Some(\"`string` or `string=string`\");\n         pub const parse_lto: Option<&'static str> =\n-            Some(\"one of `thin`, `fat`, or omitted\");\n+            Some(\"either a boolean (`yes`, `no`, `on`, `off`, etc), `thin`, \\\n+                  `fat`, or omitted\");\n         pub const parse_cross_lang_lto: Option<&'static str> =\n             Some(\"either a boolean (`yes`, `no`, `on`, `off`, etc), \\\n                   or the path to the linker plugin\");\n     }\n \n     #[allow(dead_code)]\n     mod $mod_set {\n-        use super::{$struct_name, Passes, Sanitizer, Lto, CrossLangLto};\n+        use super::{$struct_name, Passes, Sanitizer, LtoCli, CrossLangLto};\n         use rustc_target::spec::{LinkerFlavor, PanicStrategy, RelroLevel};\n         use std::path::PathBuf;\n \n@@ -1002,11 +1018,23 @@ macro_rules! options {\n             }\n         }\n \n-        fn parse_lto(slot: &mut Lto, v: Option<&str>) -> bool {\n+        fn parse_lto(slot: &mut LtoCli, v: Option<&str>) -> bool {\n+            if v.is_some() {\n+                let mut bool_arg = None;\n+                if parse_opt_bool(&mut bool_arg, v) {\n+                    *slot = if bool_arg.unwrap() {\n+                        LtoCli::Yes\n+                    } else {\n+                        LtoCli::No\n+                    };\n+                    return true\n+                }\n+            }\n+\n             *slot = match v {\n-                None => Lto::Yes,\n-                Some(\"thin\") => Lto::Thin,\n-                Some(\"fat\") => Lto::Fat,\n+                None => LtoCli::NoParam,\n+                Some(\"thin\") => LtoCli::Thin,\n+                Some(\"fat\") => LtoCli::Fat,\n                 Some(_) => return false,\n             };\n             true\n@@ -1047,7 +1075,7 @@ options! {CodegenOptions, CodegenSetter, basic_codegen_options,\n         \"extra arguments to append to the linker invocation (space separated)\"),\n     link_dead_code: bool = (false, parse_bool, [UNTRACKED],\n         \"don't let linker strip dead code (turning it on can be used for code coverage)\"),\n-    lto: Lto = (Lto::No, parse_lto, [TRACKED],\n+    lto: LtoCli = (LtoCli::Unspecified, parse_lto, [TRACKED],\n         \"perform LLVM link-time optimizations\"),\n     target_cpu: Option<String> = (None, parse_opt_string, [TRACKED],\n         \"select target processor (rustc --print target-cpus for details)\"),\n@@ -2373,8 +2401,8 @@ mod dep_tracking {\n     use std::hash::Hash;\n     use std::path::PathBuf;\n     use std::collections::hash_map::DefaultHasher;\n-    use super::{CrateType, DebugInfo, ErrorOutputType, Lto, OptLevel, OutputTypes,\n-                Passes, Sanitizer, CrossLangLto};\n+    use super::{CrateType, DebugInfo, ErrorOutputType, OptLevel, OutputTypes,\n+                Passes, Sanitizer, LtoCli, CrossLangLto};\n     use syntax::feature_gate::UnstableFeatures;\n     use rustc_target::spec::{PanicStrategy, RelroLevel, TargetTriple};\n     use syntax::edition::Edition;\n@@ -2429,7 +2457,7 @@ mod dep_tracking {\n     impl_dep_tracking_hash_via_hash!(RelroLevel);\n     impl_dep_tracking_hash_via_hash!(Passes);\n     impl_dep_tracking_hash_via_hash!(OptLevel);\n-    impl_dep_tracking_hash_via_hash!(Lto);\n+    impl_dep_tracking_hash_via_hash!(LtoCli);\n     impl_dep_tracking_hash_via_hash!(DebugInfo);\n     impl_dep_tracking_hash_via_hash!(UnstableFeatures);\n     impl_dep_tracking_hash_via_hash!(OutputTypes);\n@@ -2503,7 +2531,7 @@ mod tests {\n     use lint;\n     use middle::cstore;\n     use session::config::{build_configuration, build_session_options_and_crate_config};\n-    use session::config::{Lto, CrossLangLto};\n+    use session::config::{LtoCli, CrossLangLto};\n     use session::build_session;\n     use std::collections::{BTreeMap, BTreeSet};\n     use std::iter::FromIterator;\n@@ -2937,7 +2965,7 @@ mod tests {\n \n         // Make sure changing a [TRACKED] option changes the hash\n         opts = reference.clone();\n-        opts.cg.lto = Lto::Fat;\n+        opts.cg.lto = LtoCli::Fat;\n         assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());\n \n         opts = reference.clone();"}, {"sha": "9e99d3af6d10bea8fb4e33f87f0168ba13235a6e", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 21, "deletions": 4, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/24093a6bdb33319bed76b3bc8d3f2efda63967c2/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24093a6bdb33319bed76b3bc8d3f2efda63967c2/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=24093a6bdb33319bed76b3bc8d3f2efda63967c2", "patch": "@@ -547,9 +547,27 @@ impl Session {\n         // lto` and we've for whatever reason forced off ThinLTO via the CLI,\n         // then ensure we can't use a ThinLTO.\n         match self.opts.cg.lto {\n-            config::Lto::No => {}\n-            config::Lto::Yes if self.opts.cli_forced_thinlto_off => return config::Lto::Fat,\n-            other => return other,\n+            config::LtoCli::Unspecified => {\n+                // The compiler was invoked without the `-Clto` flag. Fall\n+                // through to the default handling\n+            }\n+            config::LtoCli::No => {\n+                // The user explicitly opted out of any kind of LTO\n+                return config::Lto::No;\n+            }\n+            config::LtoCli::Yes |\n+            config::LtoCli::Fat |\n+            config::LtoCli::NoParam => {\n+                // All of these mean fat LTO\n+                return config::Lto::Fat;\n+            }\n+            config::LtoCli::Thin => {\n+                return if self.opts.cli_forced_thinlto_off {\n+                    config::Lto::Fat\n+                } else {\n+                    config::Lto::Thin\n+                };\n+            }\n         }\n \n         // Ok at this point the target doesn't require anything and the user\n@@ -1174,7 +1192,6 @@ fn validate_commandline_args_with_session_available(sess: &Session) {\n \n     if sess.opts.incremental.is_some() {\n         match sess.lto() {\n-            Lto::Yes |\n             Lto::Thin |\n             Lto::Fat => {\n                 sess.err(\"can't perform LTO when compiling incrementally\");"}, {"sha": "8248385c12764949641b6be46c4a9dabb303b2da", "filename": "src/librustc_codegen_llvm/back/link.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/24093a6bdb33319bed76b3bc8d3f2efda63967c2/src%2Flibrustc_codegen_llvm%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24093a6bdb33319bed76b3bc8d3f2efda63967c2/src%2Flibrustc_codegen_llvm%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fback%2Flink.rs?ref=24093a6bdb33319bed76b3bc8d3f2efda63967c2", "patch": "@@ -1666,7 +1666,6 @@ fn relevant_lib(sess: &Session, lib: &NativeLibrary) -> bool {\n \n fn are_upstream_rust_objects_already_included(sess: &Session) -> bool {\n     match sess.lto() {\n-        Lto::Yes |\n         Lto::Fat => true,\n         Lto::Thin => {\n             // If we defer LTO to the linker, we haven't run LTO ourselves, so"}, {"sha": "95be2d82123a7c619be090ffabb789dbc4973235", "filename": "src/librustc_codegen_llvm/back/linker.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/24093a6bdb33319bed76b3bc8d3f2efda63967c2/src%2Flibrustc_codegen_llvm%2Fback%2Flinker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24093a6bdb33319bed76b3bc8d3f2efda63967c2/src%2Flibrustc_codegen_llvm%2Fback%2Flinker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fback%2Flinker.rs?ref=24093a6bdb33319bed76b3bc8d3f2efda63967c2", "patch": "@@ -205,13 +205,12 @@ impl<'a> GccLinker<'a> {\n         self.linker_arg(&format!(\"-plugin-opt={}\", opt_level));\n         self.linker_arg(&format!(\"-plugin-opt=mcpu={}\", llvm_util::target_cpu(self.sess)));\n \n-        match self.sess.opts.cg.lto {\n+        match self.sess.lto() {\n             config::Lto::Thin |\n             config::Lto::ThinLocal => {\n                 self.linker_arg(\"-plugin-opt=thin\");\n             }\n             config::Lto::Fat |\n-            config::Lto::Yes |\n             config::Lto::No => {\n                 // default to regular LTO\n             }"}, {"sha": "d852eb0bc683434e9a1192a8e0f6aaeba059abe3", "filename": "src/librustc_codegen_llvm/back/lto.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/24093a6bdb33319bed76b3bc8d3f2efda63967c2/src%2Flibrustc_codegen_llvm%2Fback%2Flto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24093a6bdb33319bed76b3bc8d3f2efda63967c2/src%2Flibrustc_codegen_llvm%2Fback%2Flto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fback%2Flto.rs?ref=24093a6bdb33319bed76b3bc8d3f2efda63967c2", "patch": "@@ -118,7 +118,7 @@ pub(crate) fn run(cgcx: &CodegenContext,\n         Lto::ThinLocal => SymbolExportLevel::Rust,\n \n         // We're doing LTO for the entire crate graph\n-        Lto::Yes | Lto::Fat | Lto::Thin => {\n+        Lto::Fat | Lto::Thin => {\n             symbol_export::crates_export_threshold(&cgcx.crate_types)\n         }\n \n@@ -201,7 +201,6 @@ pub(crate) fn run(cgcx: &CodegenContext,\n                                              .map(|c| c.as_ptr())\n                                              .collect::<Vec<_>>();\n     match cgcx.lto {\n-        Lto::Yes | // `-C lto` == fat LTO by default\n         Lto::Fat => {\n             assert!(cached_modules.is_empty());\n             let opt_jobs = fat_lto(cgcx,"}, {"sha": "3940673dc79c22bf2794db7bf43b2daab4c42de8", "filename": "src/librustc_codegen_llvm/back/write.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/24093a6bdb33319bed76b3bc8d3f2efda63967c2/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24093a6bdb33319bed76b3bc8d3f2efda63967c2/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs?ref=24093a6bdb33319bed76b3bc8d3f2efda63967c2", "patch": "@@ -928,7 +928,6 @@ fn need_pre_thin_lto_bitcode_for_incr_comp(sess: &Session) -> bool {\n     }\n \n     match sess.lto() {\n-        Lto::Yes |\n         Lto::Fat |\n         Lto::No => false,\n         Lto::Thin |\n@@ -1363,7 +1362,7 @@ fn execute_optimize_work_item(cgcx: &CodegenContext,\n         // require LTO so the request for LTO is always unconditionally\n         // passed down to the backend, but we don't actually want to do\n         // anything about it yet until we've got a final product.\n-        Lto::Yes | Lto::Fat | Lto::Thin => {\n+        Lto::Fat | Lto::Thin => {\n             cgcx.crate_types.len() != 1 ||\n                 cgcx.crate_types[0] != config::CrateType::Rlib\n         }\n@@ -1543,7 +1542,7 @@ fn start_executing_work(tcx: TyCtxt,\n                 exported_symbols.insert(LOCAL_CRATE, copy_symbols(LOCAL_CRATE));\n                 Some(Arc::new(exported_symbols))\n             }\n-            Lto::Yes | Lto::Fat | Lto::Thin => {\n+            Lto::Fat | Lto::Thin => {\n                 exported_symbols.insert(LOCAL_CRATE, copy_symbols(LOCAL_CRATE));\n                 for &cnum in tcx.crates().iter() {\n                     exported_symbols.insert(cnum, copy_symbols(cnum));"}, {"sha": "39e9a9bdd6b684493da1400d21413eb55fb59423", "filename": "src/test/run-make-fulldeps/codegen-options-parsing/Makefile", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/24093a6bdb33319bed76b3bc8d3f2efda63967c2/src%2Ftest%2Frun-make-fulldeps%2Fcodegen-options-parsing%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/24093a6bdb33319bed76b3bc8d3f2efda63967c2/src%2Ftest%2Frun-make-fulldeps%2Fcodegen-options-parsing%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcodegen-options-parsing%2FMakefile?ref=24093a6bdb33319bed76b3bc8d3f2efda63967c2", "patch": "@@ -16,11 +16,11 @@ all:\n \t$(RUSTC) -C extra-filename=foo dummy.rs 2>&1\n \t#Option taking no argument\n \t$(RUSTC) -C lto= dummy.rs 2>&1 | \\\n-\t\t$(CGREP) 'codegen option `lto` - one of `thin`, `fat`, or'\n+\t\t$(CGREP) 'codegen option `lto` - either a boolean (`yes`, `no`, `on`, `off`, etc), `thin`, `fat`, or omitted'\n \t$(RUSTC) -C lto=1 dummy.rs 2>&1 | \\\n-\t\t$(CGREP) 'codegen option `lto` - one of `thin`, `fat`, or'\n+\t\t$(CGREP) 'codegen option `lto` - either a boolean (`yes`, `no`, `on`, `off`, etc), `thin`, `fat`, or omitted'\n \t$(RUSTC) -C lto=foo dummy.rs 2>&1 | \\\n-\t\t$(CGREP) 'codegen option `lto` - one of `thin`, `fat`, or'\n+\t\t$(CGREP) 'codegen option `lto` - either a boolean (`yes`, `no`, `on`, `off`, etc), `thin`, `fat`, or omitted'\n \t$(RUSTC) -C lto dummy.rs\n \n \t# Should not link dead code..."}, {"sha": "9b1dc2550b21b7531777e9319da1e402a2170d4d", "filename": "src/test/run-make-fulldeps/lto-smoke/Makefile", "status": "modified", "additions": 25, "deletions": 1, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/24093a6bdb33319bed76b3bc8d3f2efda63967c2/src%2Ftest%2Frun-make-fulldeps%2Flto-smoke%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/24093a6bdb33319bed76b3bc8d3f2efda63967c2/src%2Ftest%2Frun-make-fulldeps%2Flto-smoke%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Flto-smoke%2FMakefile?ref=24093a6bdb33319bed76b3bc8d3f2efda63967c2", "patch": "@@ -1,6 +1,30 @@\n -include ../tools.mk\n \n-all:\n+all: noparam bool_true bool_false thin fat\n+\n+noparam:\n \t$(RUSTC) lib.rs\n \t$(RUSTC) main.rs -C lto\n \t$(call RUN,main)\n+\n+bool_true:\n+\t$(RUSTC) lib.rs\n+\t$(RUSTC) main.rs -C lto=yes\n+\t$(call RUN,main)\n+\n+\n+bool_false:\n+\t$(RUSTC) lib.rs\n+\t$(RUSTC) main.rs -C lto=off\n+\t$(call RUN,main)\n+\n+thin:\n+\t$(RUSTC) lib.rs\n+\t$(RUSTC) main.rs -C lto=thin\n+\t$(call RUN,main)\n+\n+fat:\n+\t$(RUSTC) lib.rs\n+\t$(RUSTC) main.rs -C lto=fat\n+\t$(call RUN,main)\n+"}]}