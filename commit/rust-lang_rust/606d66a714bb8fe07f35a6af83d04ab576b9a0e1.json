{"sha": "606d66a714bb8fe07f35a6af83d04ab576b9a0e1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYwNmQ2NmE3MTRiYjhmZTA3ZjM1YTZhZjgzZDA0YWI1NzZiOWEwZTE=", "commit": {"author": {"name": "Marcus Klaas de Vries", "email": "mail@marcusklaas.nl", "date": "2019-01-11T10:27:07Z"}, "committer": {"name": "Marcus Klaas de Vries", "email": "mail@marcusklaas.nl", "date": "2019-01-14T12:56:43Z"}, "message": "Start moving literal interpretation to the AST (WIP)", "tree": {"sha": "dd69d9e6484d7a67d8545ef10ec736c24d90849e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dd69d9e6484d7a67d8545ef10ec736c24d90849e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/606d66a714bb8fe07f35a6af83d04ab576b9a0e1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/606d66a714bb8fe07f35a6af83d04ab576b9a0e1", "html_url": "https://github.com/rust-lang/rust/commit/606d66a714bb8fe07f35a6af83d04ab576b9a0e1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/606d66a714bb8fe07f35a6af83d04ab576b9a0e1/comments", "author": {"login": "marcusklaas", "id": 1255413, "node_id": "MDQ6VXNlcjEyNTU0MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1255413?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marcusklaas", "html_url": "https://github.com/marcusklaas", "followers_url": "https://api.github.com/users/marcusklaas/followers", "following_url": "https://api.github.com/users/marcusklaas/following{/other_user}", "gists_url": "https://api.github.com/users/marcusklaas/gists{/gist_id}", "starred_url": "https://api.github.com/users/marcusklaas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marcusklaas/subscriptions", "organizations_url": "https://api.github.com/users/marcusklaas/orgs", "repos_url": "https://api.github.com/users/marcusklaas/repos", "events_url": "https://api.github.com/users/marcusklaas/events{/privacy}", "received_events_url": "https://api.github.com/users/marcusklaas/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marcusklaas", "id": 1255413, "node_id": "MDQ6VXNlcjEyNTU0MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1255413?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marcusklaas", "html_url": "https://github.com/marcusklaas", "followers_url": "https://api.github.com/users/marcusklaas/followers", "following_url": "https://api.github.com/users/marcusklaas/following{/other_user}", "gists_url": "https://api.github.com/users/marcusklaas/gists{/gist_id}", "starred_url": "https://api.github.com/users/marcusklaas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marcusklaas/subscriptions", "organizations_url": "https://api.github.com/users/marcusklaas/orgs", "repos_url": "https://api.github.com/users/marcusklaas/repos", "events_url": "https://api.github.com/users/marcusklaas/events{/privacy}", "received_events_url": "https://api.github.com/users/marcusklaas/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "81bc8e4973fefd0ff31d08206c374fb58aa8b6e0", "url": "https://api.github.com/repos/rust-lang/rust/commits/81bc8e4973fefd0ff31d08206c374fb58aa8b6e0", "html_url": "https://github.com/rust-lang/rust/commit/81bc8e4973fefd0ff31d08206c374fb58aa8b6e0"}], "stats": {"total": 141, "additions": 131, "deletions": 10}, "files": [{"sha": "3f2689781abb75cb3c67b157e8f274b8bf3e4413", "filename": "crates/ra_hir/src/expr.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/606d66a714bb8fe07f35a6af83d04ab576b9a0e1/crates%2Fra_hir%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/606d66a714bb8fe07f35a6af83d04ab576b9a0e1/crates%2Fra_hir%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fexpr.rs?ref=606d66a714bb8fe07f35a6af83d04ab576b9a0e1", "patch": "@@ -649,10 +649,9 @@ impl ExprCollector {\n                 let exprs = e.exprs().map(|expr| self.collect_expr(expr)).collect();\n                 self.alloc_expr(Expr::Tuple { exprs }, syntax_ptr)\n             }\n-            ast::ExprKind::Literal(e) => {\n-                let child = e.syntax().children().next();\n-\n-                if let Some(c) = child {\n+            ast::ExprKind::LiteralExpr(e) => {\n+                if let Some(child) = e.literal() {\n+                    let c = child.syntax();\n                     let lit = match c.kind() {\n                         SyntaxKind::INT_NUMBER => {\n                             let text = c.text().to_string();"}, {"sha": "442659aee9bf34f62457186070c50fdcf6dc988d", "filename": "crates/ra_syntax/src/ast/generated.rs", "status": "modified", "additions": 110, "deletions": 4, "changes": 114, "blob_url": "https://github.com/rust-lang/rust/blob/606d66a714bb8fe07f35a6af83d04ab576b9a0e1/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/606d66a714bb8fe07f35a6af83d04ab576b9a0e1/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs?ref=606d66a714bb8fe07f35a6af83d04ab576b9a0e1", "patch": "@@ -664,7 +664,7 @@ pub enum ExprKind<'a> {\n     PrefixExpr(&'a PrefixExpr),\n     RangeExpr(&'a RangeExpr),\n     BinExpr(&'a BinExpr),\n-    Literal(&'a Literal),\n+    LiteralExpr(&'a LiteralExpr),\n }\n \n impl AstNode for Expr {\n@@ -696,7 +696,7 @@ impl AstNode for Expr {\n             | PREFIX_EXPR\n             | RANGE_EXPR\n             | BIN_EXPR\n-            | LITERAL => Some(Expr::from_repr(syntax.into_repr())),\n+            | LITERAL_EXPR => Some(Expr::from_repr(syntax.into_repr())),\n             _ => None,\n         }\n     }\n@@ -733,7 +733,7 @@ impl Expr {\n             PREFIX_EXPR => ExprKind::PrefixExpr(PrefixExpr::cast(&self.syntax).unwrap()),\n             RANGE_EXPR => ExprKind::RangeExpr(RangeExpr::cast(&self.syntax).unwrap()),\n             BIN_EXPR => ExprKind::BinExpr(BinExpr::cast(&self.syntax).unwrap()),\n-            LITERAL => ExprKind::Literal(Literal::cast(&self.syntax).unwrap()),\n+            LITERAL_EXPR => ExprKind::LiteralExpr(LiteralExpr::cast(&self.syntax).unwrap()),\n             _ => unreachable!(),\n         }\n     }\n@@ -849,6 +849,31 @@ impl AstNode for FieldPatList {\n \n impl FieldPatList {}\n \n+// FloatNumber\n+#[derive(Debug, PartialEq, Eq, Hash)]\n+#[repr(transparent)]\n+pub struct FloatNumber {\n+    pub(crate) syntax: SyntaxNode,\n+}\n+unsafe impl TransparentNewType for FloatNumber {\n+    type Repr = rowan::SyntaxNode<RaTypes>;\n+}\n+\n+impl AstNode for FloatNumber {\n+    fn cast(syntax: &SyntaxNode) -> Option<&Self> {\n+        match syntax.kind() {\n+            FLOAT_NUMBER => Some(FloatNumber::from_repr(syntax.into_repr())),\n+            _ => None,\n+        }\n+    }\n+    fn syntax(&self) -> &SyntaxNode { &self.syntax }\n+    fn to_owned(&self) -> TreePtr<FloatNumber> { TreePtr::cast(self.syntax.to_owned()) }\n+}\n+\n+\n+impl ast::AstToken for FloatNumber {}\n+impl FloatNumber {}\n+\n // FnDef\n #[derive(Debug, PartialEq, Eq, Hash)]\n #[repr(transparent)]\n@@ -1130,6 +1155,31 @@ impl AstNode for IndexExpr {\n \n impl IndexExpr {}\n \n+// IntNumber\n+#[derive(Debug, PartialEq, Eq, Hash)]\n+#[repr(transparent)]\n+pub struct IntNumber {\n+    pub(crate) syntax: SyntaxNode,\n+}\n+unsafe impl TransparentNewType for IntNumber {\n+    type Repr = rowan::SyntaxNode<RaTypes>;\n+}\n+\n+impl AstNode for IntNumber {\n+    fn cast(syntax: &SyntaxNode) -> Option<&Self> {\n+        match syntax.kind() {\n+            INT_NUMBER => Some(IntNumber::from_repr(syntax.into_repr())),\n+            _ => None,\n+        }\n+    }\n+    fn syntax(&self) -> &SyntaxNode { &self.syntax }\n+    fn to_owned(&self) -> TreePtr<IntNumber> { TreePtr::cast(self.syntax.to_owned()) }\n+}\n+\n+\n+impl ast::AstToken for IntNumber {}\n+impl IntNumber {}\n+\n // ItemList\n #[derive(Debug, PartialEq, Eq, Hash)]\n #[repr(transparent)]\n@@ -1315,20 +1365,76 @@ unsafe impl TransparentNewType for Literal {\n     type Repr = rowan::SyntaxNode<RaTypes>;\n }\n \n+#[derive(Debug, Clone, Copy, PartialEq, Eq)]\n+pub enum LiteralKind<'a> {\n+    String(&'a String),\n+    ByteString(&'a ByteString),\n+    Char(&'a Char),\n+    Byte(&'a Byte),\n+    IntNumber(&'a IntNumber),\n+    FloatNumber(&'a FloatNumber),\n+}\n+\n impl AstNode for Literal {\n     fn cast(syntax: &SyntaxNode) -> Option<&Self> {\n         match syntax.kind() {\n-            LITERAL => Some(Literal::from_repr(syntax.into_repr())),\n+            | STRING\n+            | BYTE_STRING\n+            | CHAR\n+            | BYTE\n+            | INT_NUMBER\n+            | FLOAT_NUMBER => Some(Literal::from_repr(syntax.into_repr())),\n             _ => None,\n         }\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n     fn to_owned(&self) -> TreeArc<Literal> { TreeArc::cast(self.syntax.to_owned()) }\n }\n \n+impl Literal {\n+    pub fn kind(&self) -> LiteralKind {\n+        match self.syntax.kind() {\n+            STRING => LiteralKind::String(String::cast(&self.syntax).unwrap()),\n+            BYTE_STRING => LiteralKind::ByteString(ByteString::cast(&self.syntax).unwrap()),\n+            CHAR => LiteralKind::Char(Char::cast(&self.syntax).unwrap()),\n+            BYTE => LiteralKind::Byte(Byte::cast(&self.syntax).unwrap()),\n+            INT_NUMBER => LiteralKind::IntNumber(IntNumber::cast(&self.syntax).unwrap()),\n+            FLOAT_NUMBER => LiteralKind::FloatNumber(FloatNumber::cast(&self.syntax).unwrap()),\n+            _ => unreachable!(),\n+        }\n+    }\n+}\n \n impl Literal {}\n \n+// LiteralExpr\n+#[derive(Debug, PartialEq, Eq, Hash)]\n+#[repr(transparent)]\n+pub struct LiteralExpr {\n+    pub(crate) syntax: SyntaxNode,\n+}\n+unsafe impl TransparentNewType for LiteralExpr {\n+    type Repr = rowan::SyntaxNode<RaTypes>;\n+}\n+\n+impl AstNode for LiteralExpr {\n+    fn cast(syntax: &SyntaxNode) -> Option<&Self> {\n+        match syntax.kind() {\n+            LITERAL_EXPR => Some(LiteralExpr::from_repr(syntax.into_repr())),\n+            _ => None,\n+        }\n+    }\n+    fn syntax(&self) -> &SyntaxNode { &self.syntax }\n+    fn to_owned(&self) -> TreePtr<LiteralExpr> { TreePtr::cast(self.syntax.to_owned()) }\n+}\n+\n+\n+impl LiteralExpr {\n+    pub fn literal(&self) -> Option<&Literal> {\n+        super::child_opt(self)\n+    }\n+}\n+\n // LoopExpr\n #[derive(Debug, PartialEq, Eq, Hash)]\n #[repr(transparent)]"}, {"sha": "49b297696008e6eba2eb12461748fc29dc2ccae7", "filename": "crates/ra_syntax/src/grammar.ron", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/606d66a714bb8fe07f35a6af83d04ab576b9a0e1/crates%2Fra_syntax%2Fsrc%2Fgrammar.ron", "raw_url": "https://github.com/rust-lang/rust/raw/606d66a714bb8fe07f35a6af83d04ab576b9a0e1/crates%2Fra_syntax%2Fsrc%2Fgrammar.ron", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fgrammar.ron?ref=606d66a714bb8fe07f35a6af83d04ab576b9a0e1", "patch": "@@ -215,6 +215,7 @@ Grammar(\n         \"PATH\",\n         \"PATH_SEGMENT\",\n         \"LITERAL\",\n+        \"LITERAL_EXPR\",\n         \"ALIAS\",\n         \"VISIBILITY\",\n         \"WHERE_CLAUSE\",\n@@ -426,11 +427,24 @@ Grammar(\n         \"PrefixExpr\": (options: [\"Expr\"]),\n         \"RangeExpr\": (),\n         \"BinExpr\": (),\n+\n+        \"IntNumber\": ( traits: [\"AstToken\"] ),\n+        \"FloatNumber\": ( traits: [\"AstToken\"] ),\n         \"String\": ( traits: [\"AstToken\"] ),\n         \"Byte\": ( traits: [\"AstToken\"] ),\n         \"ByteString\": ( traits: [\"AstToken\"] ),\n         \"Char\": ( traits: [\"AstToken\"] ),\n-        \"Literal\": (),\n+        \"Literal\": (\n+            enum: [\n+                \"String\",\n+                \"ByteString\",\n+                \"Char\",\n+                \"Byte\",\n+                \"IntNumber\",\n+                \"FloatNumber\",\n+            ]\n+        ),\n+        \"LiteralExpr\": (options: [\"Literal\"]),\n \n         \"Expr\": (\n             enum: [\n@@ -460,7 +474,7 @@ Grammar(\n                 \"PrefixExpr\",\n                 \"RangeExpr\",\n                 \"BinExpr\",\n-                \"Literal\",\n+                \"LiteralExpr\",\n             ],\n         ),\n "}, {"sha": "46795d6e9d88ef565bffcd169ff15407561c777e", "filename": "crates/ra_syntax/src/syntax_kinds/generated.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/606d66a714bb8fe07f35a6af83d04ab576b9a0e1/crates%2Fra_syntax%2Fsrc%2Fsyntax_kinds%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/606d66a714bb8fe07f35a6af83d04ab576b9a0e1/crates%2Fra_syntax%2Fsrc%2Fsyntax_kinds%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fsyntax_kinds%2Fgenerated.rs?ref=606d66a714bb8fe07f35a6af83d04ab576b9a0e1", "patch": "@@ -205,6 +205,7 @@ pub enum SyntaxKind {\n     PATH,\n     PATH_SEGMENT,\n     LITERAL,\n+    LITERAL_EXPR,\n     ALIAS,\n     VISIBILITY,\n     WHERE_CLAUSE,\n@@ -467,6 +468,7 @@ impl SyntaxKind {\n             PATH => &SyntaxInfo { name: \"PATH\" },\n             PATH_SEGMENT => &SyntaxInfo { name: \"PATH_SEGMENT\" },\n             LITERAL => &SyntaxInfo { name: \"LITERAL\" },\n+            LITERAL_EXPR => &SyntaxInfo { name: \"LITERAL_EXPR\" },\n             ALIAS => &SyntaxInfo { name: \"ALIAS\" },\n             VISIBILITY => &SyntaxInfo { name: \"VISIBILITY\" },\n             WHERE_CLAUSE => &SyntaxInfo { name: \"WHERE_CLAUSE\" },"}]}