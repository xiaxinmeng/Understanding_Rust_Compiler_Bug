{"sha": "2e21af2859854668448ac96f335986a19011e571", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJlMjFhZjI4NTk4NTQ2Njg0NDhhYzk2ZjMzNTk4NmExOTAxMWU1NzE=", "commit": {"author": {"name": "Alexis Bourget", "email": "alexis.bourget@gmail.com", "date": "2020-06-29T17:18:40Z"}, "committer": {"name": "Alexis Bourget", "email": "alexis.bourget@gmail.com", "date": "2020-06-29T17:18:40Z"}, "message": "Document the union keyword", "tree": {"sha": "a35f6a8d61e1c43eedd1b7cf8dd8e4e8e9c9d380", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a35f6a8d61e1c43eedd1b7cf8dd8e4e8e9c9d380"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2e21af2859854668448ac96f335986a19011e571", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2e21af2859854668448ac96f335986a19011e571", "html_url": "https://github.com/rust-lang/rust/commit/2e21af2859854668448ac96f335986a19011e571", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2e21af2859854668448ac96f335986a19011e571/comments", "author": {"login": "poliorcetics", "id": 7951708, "node_id": "MDQ6VXNlcjc5NTE3MDg=", "avatar_url": "https://avatars.githubusercontent.com/u/7951708?v=4", "gravatar_id": "", "url": "https://api.github.com/users/poliorcetics", "html_url": "https://github.com/poliorcetics", "followers_url": "https://api.github.com/users/poliorcetics/followers", "following_url": "https://api.github.com/users/poliorcetics/following{/other_user}", "gists_url": "https://api.github.com/users/poliorcetics/gists{/gist_id}", "starred_url": "https://api.github.com/users/poliorcetics/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/poliorcetics/subscriptions", "organizations_url": "https://api.github.com/users/poliorcetics/orgs", "repos_url": "https://api.github.com/users/poliorcetics/repos", "events_url": "https://api.github.com/users/poliorcetics/events{/privacy}", "received_events_url": "https://api.github.com/users/poliorcetics/received_events", "type": "User", "site_admin": false}, "committer": {"login": "poliorcetics", "id": 7951708, "node_id": "MDQ6VXNlcjc5NTE3MDg=", "avatar_url": "https://avatars.githubusercontent.com/u/7951708?v=4", "gravatar_id": "", "url": "https://api.github.com/users/poliorcetics", "html_url": "https://github.com/poliorcetics", "followers_url": "https://api.github.com/users/poliorcetics/followers", "following_url": "https://api.github.com/users/poliorcetics/following{/other_user}", "gists_url": "https://api.github.com/users/poliorcetics/gists{/gist_id}", "starred_url": "https://api.github.com/users/poliorcetics/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/poliorcetics/subscriptions", "organizations_url": "https://api.github.com/users/poliorcetics/orgs", "repos_url": "https://api.github.com/users/poliorcetics/repos", "events_url": "https://api.github.com/users/poliorcetics/events{/privacy}", "received_events_url": "https://api.github.com/users/poliorcetics/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0ca7f74dbd23a3e8ec491cd3438f490a3ac22741", "url": "https://api.github.com/repos/rust-lang/rust/commits/0ca7f74dbd23a3e8ec491cd3438f490a3ac22741", "html_url": "https://github.com/rust-lang/rust/commit/0ca7f74dbd23a3e8ec491cd3438f490a3ac22741"}], "stats": {"total": 67, "additions": 65, "deletions": 2}, "files": [{"sha": "cbfaac8c4b3172d6a663e2e985bff95d50a97b14", "filename": "src/libstd/keyword_docs.rs", "status": "modified", "additions": 65, "deletions": 2, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/2e21af2859854668448ac96f335986a19011e571/src%2Flibstd%2Fkeyword_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e21af2859854668448ac96f335986a19011e571/src%2Flibstd%2Fkeyword_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fkeyword_docs.rs?ref=2e21af2859854668448ac96f335986a19011e571", "patch": "@@ -1624,8 +1624,71 @@ mod dyn_keyword {}\n //\n /// The [Rust equivalent of a C-style union][union].\n ///\n-/// The documentation for this keyword is [not yet complete]. Pull requests welcome!\n+/// A `union` looks like a [`struct`] in terms of declaration, but all of its\n+/// fields exist simultaneously, superimposed over one another. For instance,\n+/// if we wanted some bits in memory that we sometimes interpret as a `u32` and\n+/// sometimes as an `f32`, we would write:\n+///\n+/// ```rust\n+/// union IntOrFloat {\n+///     i: u32,\n+///     f: f32,\n+/// }\n+///\n+/// let mut u = IntOrFloat { f: 1.0 };\n+/// // Reading the fields of an union is always unsafe\n+/// assert_eq!(unsafe { u.i }, 1065353216);\n+/// // Updating through any of the field will modify all of them\n+/// u.i = 1073741824;\n+/// assert_eq!(unsafe { u.f }, 2.0);\n+/// ```\n+///\n+/// # Matching on unions\n+///\n+/// It is possible to use pattern matching on `union`s. A single field name must\n+/// be used and it must match the name of one of the `union`'s field.\n+///\n+/// ```rust\n+/// union IntOrFloat {\n+///     i: u32,\n+///     f: f32,\n+/// }\n+///\n+/// let u = IntOrFloat { f: 1.0 };\n+///\n+/// unsafe {\n+///     match u {\n+///         IntOrFloat { i: 10 } => println!(\"Found exactly ten !\"),\n+///         // The field name is used to deduce the type\n+///         IntOrFloat { f } => println!(\"Found f = {} !\", f),\n+///     }\n+/// }\n+/// ```\n+///\n+/// # References to union fields\n+///\n+/// All fields in a union are all at the same place in memory which means\n+/// borrowing one borrows all of them, for the same duration:\n+///\n+/// ```rust,compile_fail,E0502\n+/// union IntOrFloat {\n+///     i: u32,\n+///     f: f32,\n+/// }\n ///\n+/// let mut u = IntOrFloat { f: 1.0 };\n+///\n+/// let f = unsafe { &u.f };\n+/// // This will not compile because the field has already been borrowed, even\n+/// // if only immutably\n+/// let i = unsafe { &mut u.i };\n+///\n+/// *i = 10;\n+/// println!(\"f = {} and i = {}\", f, i);\n+/// ```\n+///\n+/// See the [Reference][union] for more informations on `union`s.\n+///\n+/// [`struct`]: keyword.struct.html\n /// [union]: ../reference/items/unions.html\n-/// [not yet complete]: https://github.com/rust-lang/rust/issues/34601\n mod union_keyword {}"}]}