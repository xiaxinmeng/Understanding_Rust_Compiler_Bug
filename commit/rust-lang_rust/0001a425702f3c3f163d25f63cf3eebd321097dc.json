{"sha": "0001a425702f3c3f163d25f63cf3eebd321097dc", "node_id": "C_kwDOAAsO6NoAKDAwMDFhNDI1NzAyZjNjM2YxNjNkMjVmNjNjZjNlZWJkMzIxMDk3ZGM", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-12-11T14:55:25Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-12-11T14:55:25Z"}, "message": "fix: Fix lint completions not working for unclosed attributes", "tree": {"sha": "c4b786074a8c716c2d6cce55350037ffb6222d47", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c4b786074a8c716c2d6cce55350037ffb6222d47"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0001a425702f3c3f163d25f63cf3eebd321097dc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0001a425702f3c3f163d25f63cf3eebd321097dc", "html_url": "https://github.com/rust-lang/rust/commit/0001a425702f3c3f163d25f63cf3eebd321097dc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0001a425702f3c3f163d25f63cf3eebd321097dc/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "03f6d92ae4796ca0f18aab689f0c0bf311e2072c", "url": "https://api.github.com/repos/rust-lang/rust/commits/03f6d92ae4796ca0f18aab689f0c0bf311e2072c", "html_url": "https://github.com/rust-lang/rust/commit/03f6d92ae4796ca0f18aab689f0c0bf311e2072c"}], "stats": {"total": 64, "additions": 39, "deletions": 25}, "files": [{"sha": "d92e311915a1e1b3220455069072170a19c2a716", "filename": "crates/ide_completion/src/completions/attribute.rs", "status": "modified", "additions": 7, "deletions": 11, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/0001a425702f3c3f163d25f63cf3eebd321097dc/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0001a425702f3c3f163d25f63cf3eebd321097dc/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute.rs?ref=0001a425702f3c3f163d25f63cf3eebd321097dc", "patch": "@@ -30,16 +30,12 @@ pub(crate) fn complete_attribute(acc: &mut Completions, ctx: &CompletionContext)\n         None => None,\n     };\n     match (name_ref, attribute.token_tree()) {\n-        (Some(path), Some(token_tree)) => match path.text().as_str() {\n-            \"repr\" => repr::complete_repr(acc, ctx, token_tree),\n-            \"derive\" => {\n-                derive::complete_derive(acc, ctx, &parse_tt_as_comma_sep_paths(token_tree)?)\n-            }\n-            \"feature\" => {\n-                lint::complete_lint(acc, ctx, &parse_tt_as_comma_sep_paths(token_tree)?, FEATURES)\n-            }\n+        (Some(path), Some(tt)) if tt.l_paren_token().is_some() => match path.text().as_str() {\n+            \"repr\" => repr::complete_repr(acc, ctx, tt),\n+            \"derive\" => derive::complete_derive(acc, ctx, &parse_tt_as_comma_sep_paths(tt)?),\n+            \"feature\" => lint::complete_lint(acc, ctx, &parse_tt_as_comma_sep_paths(tt)?, FEATURES),\n             \"allow\" | \"warn\" | \"deny\" | \"forbid\" => {\n-                let existing_lints = parse_tt_as_comma_sep_paths(token_tree)?;\n+                let existing_lints = parse_tt_as_comma_sep_paths(tt)?;\n                 lint::complete_lint(acc, ctx, &existing_lints, DEFAULT_LINTS);\n                 lint::complete_lint(acc, ctx, &existing_lints, CLIPPY_LINTS);\n                 lint::complete_lint(acc, ctx, &existing_lints, RUSTDOC_LINTS);\n@@ -49,8 +45,8 @@ pub(crate) fn complete_attribute(acc: &mut Completions, ctx: &CompletionContext)\n             }\n             _ => (),\n         },\n-        (None, Some(_)) => (),\n-        _ => complete_new_attribute(acc, ctx, attribute),\n+        (_, Some(_)) => (),\n+        (_, None) => complete_new_attribute(acc, ctx, attribute),\n     }\n     Some(())\n }"}, {"sha": "c90d4966f37a6d65ab37b00082c7778db6001a70", "filename": "crates/ide_completion/src/tests/attribute.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0001a425702f3c3f163d25f63cf3eebd321097dc/crates%2Fide_completion%2Fsrc%2Ftests%2Fattribute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0001a425702f3c3f163d25f63cf3eebd321097dc/crates%2Fide_completion%2Fsrc%2Ftests%2Fattribute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Ftests%2Fattribute.rs?ref=0001a425702f3c3f163d25f63cf3eebd321097dc", "patch": "@@ -831,6 +831,20 @@ mod lint {\n             r#\"#[allow(rustdoc::bare_urls)] struct Test;\"#,\n         );\n     }\n+\n+    #[test]\n+    fn lint_unclosed() {\n+        check_edit(\n+            \"deprecated\",\n+            r#\"#[allow(dep$0 struct Test;\"#,\n+            r#\"#[allow(deprecated struct Test;\"#,\n+        );\n+        check_edit(\n+            \"bare_urls\",\n+            r#\"#[allow(rustdoc::$0 struct Test;\"#,\n+            r#\"#[allow(rustdoc::bare_urls struct Test;\"#,\n+        );\n+    }\n }\n \n mod repr {"}, {"sha": "7e78b7136cb959dca1c7d0cb8682ea1005db9fba", "filename": "crates/ide_db/src/helpers.rs", "status": "modified", "additions": 18, "deletions": 14, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/0001a425702f3c3f163d25f63cf3eebd321097dc/crates%2Fide_db%2Fsrc%2Fhelpers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0001a425702f3c3f163d25f63cf3eebd321097dc/crates%2Fide_db%2Fsrc%2Fhelpers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fhelpers.rs?ref=0001a425702f3c3f163d25f63cf3eebd321097dc", "patch": "@@ -305,20 +305,24 @@ pub fn lint_eq_or_in_group(lint: &str, lint_is: &str) -> bool {\n     }\n }\n \n-/// Parses the input token tree as comma separated paths.\n+/// Parses the input token tree as comma separated plain paths.\n pub fn parse_tt_as_comma_sep_paths(input: ast::TokenTree) -> Option<Vec<ast::Path>> {\n-    let r_paren = input.r_paren_token()?;\n-    let tokens = input\n-        .syntax()\n-        .children_with_tokens()\n-        .skip(1)\n-        .take_while(|it| it.as_token() != Some(&r_paren));\n+    let r_paren = input.r_paren_token();\n+    let tokens =\n+        input.syntax().children_with_tokens().skip(1).map_while(|it| match it.into_token() {\n+            // seeing a keyword means the attribute is unclosed so stop parsing here\n+            Some(tok) if tok.kind().is_keyword() => None,\n+            // don't include the right token tree parenthesis if it exists\n+            tok @ Some(_) if tok == r_paren => None,\n+            // only nodes that we can find are other TokenTrees, those are unexpected in this parse though\n+            None => None,\n+            Some(tok) => Some(tok),\n+        });\n     let input_expressions = tokens.into_iter().group_by(|tok| tok.kind() == T![,]);\n-    Some(\n-        input_expressions\n-            .into_iter()\n-            .filter_map(|(is_sep, group)| (!is_sep).then(|| group))\n-            .filter_map(|mut tokens| ast::Path::parse(&tokens.join(\"\")).ok())\n-            .collect::<Vec<ast::Path>>(),\n-    )\n+    let paths = input_expressions\n+        .into_iter()\n+        .filter_map(|(is_sep, group)| (!is_sep).then(|| group))\n+        .filter_map(|mut tokens| ast::Path::parse(&tokens.join(\"\")).ok())\n+        .collect();\n+    Some(paths)\n }"}]}