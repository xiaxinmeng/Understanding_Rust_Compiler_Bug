{"sha": "96c2b9c41d85a8bd781e2b734cac1224eb7c4694", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk2YzJiOWM0MWQ4NWE4YmQ3ODFlMmI3MzRjYWMxMjI0ZWI3YzQ2OTQ=", "commit": {"author": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2019-06-16T10:04:08Z"}, "committer": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2019-06-16T10:25:04Z"}, "message": "Simplifications / cleanup from review", "tree": {"sha": "e5fbaaf48220d6480e9bed817a6b33346cbe82ce", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e5fbaaf48220d6480e9bed817a6b33346cbe82ce"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/96c2b9c41d85a8bd781e2b734cac1224eb7c4694", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/96c2b9c41d85a8bd781e2b734cac1224eb7c4694", "html_url": "https://github.com/rust-lang/rust/commit/96c2b9c41d85a8bd781e2b734cac1224eb7c4694", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/96c2b9c41d85a8bd781e2b734cac1224eb7c4694/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "30647cd195e29c77fd1248d49c750346ca5022ca", "url": "https://api.github.com/repos/rust-lang/rust/commits/30647cd195e29c77fd1248d49c750346ca5022ca", "html_url": "https://github.com/rust-lang/rust/commit/30647cd195e29c77fd1248d49c750346ca5022ca"}], "stats": {"total": 69, "additions": 31, "deletions": 38}, "files": [{"sha": "6602d12203f40d3b87e883ec54d91737c66c4a9d", "filename": "crates/ra_hir/src/code_model.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/96c2b9c41d85a8bd781e2b734cac1224eb7c4694/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96c2b9c41d85a8bd781e2b734cac1224eb7c4694/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model.rs?ref=96c2b9c41d85a8bd781e2b734cac1224eb7c4694", "patch": "@@ -788,8 +788,7 @@ impl Trait {\n                 TraitItem::TypeAlias(t) => Some(*t),\n                 _ => None,\n             })\n-            .filter(|t| t.name(db) == name)\n-            .next()\n+            .find(|t| t.name(db) == name)\n     }\n \n     pub(crate) fn trait_data(self, db: &impl DefDatabase) -> Arc<TraitData> {"}, {"sha": "c4dd54596e0936f45a44edb4867f7ed756fea6ed", "filename": "crates/ra_hir/src/db.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/96c2b9c41d85a8bd781e2b734cac1224eb7c4694/crates%2Fra_hir%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96c2b9c41d85a8bd781e2b734cac1224eb7c4694/crates%2Fra_hir%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fdb.rs?ref=96c2b9c41d85a8bd781e2b734cac1224eb7c4694", "patch": "@@ -185,11 +185,11 @@ pub trait HirDatabase: DefDatabase + AstDatabase {\n         goal: crate::ty::Canonical<crate::ty::TraitRef>,\n     ) -> Option<crate::ty::traits::Solution>;\n \n-    #[salsa::invoke(crate::ty::traits::normalize)]\n+    #[salsa::invoke(crate::ty::traits::normalize_query)]\n     fn normalize(\n         &self,\n         krate: Crate,\n-        goal: crate::ty::Canonical<crate::ty::traits::ProjectionPredicate>,\n+        goal: crate::ty::Canonical<crate::ty::ProjectionPredicate>,\n     ) -> Option<crate::ty::traits::Solution>;\n }\n "}, {"sha": "18ac0fcf9eb4bde1f2687348bdb66dff8a4179ea", "filename": "crates/ra_hir/src/lang_item.rs", "status": "modified", "additions": 23, "deletions": 31, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/96c2b9c41d85a8bd781e2b734cac1224eb7c4694/crates%2Fra_hir%2Fsrc%2Flang_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96c2b9c41d85a8bd781e2b734cac1224eb7c4694/crates%2Fra_hir%2Fsrc%2Flang_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Flang_item.rs?ref=96c2b9c41d85a8bd781e2b734cac1224eb7c4694", "patch": "@@ -1,10 +1,11 @@\n use std::sync::Arc;\n use rustc_hash::FxHashMap;\n \n-use ra_syntax::{SmolStr, ast::AttrsOwner};\n+use ra_syntax::{SmolStr, TreeArc, ast::AttrsOwner};\n \n use crate::{\n-        Crate, DefDatabase, Enum, Function, HirDatabase, ImplBlock, Module, Static, Struct, Trait, ModuleDef, AstDatabase, HasSource\n+    Crate, DefDatabase, Enum, Function, HirDatabase, ImplBlock, Module,\n+    Static, Struct, Trait, ModuleDef, AstDatabase, HasSource\n };\n \n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n@@ -93,39 +94,15 @@ impl LangItems {\n             }\n         }\n \n-        // FIXME make this nicer\n         for def in module.declarations(db) {\n             match def {\n                 ModuleDef::Trait(trait_) => {\n-                    let node = trait_.source(db).ast;\n-                    if let Some(lang_item_name) = lang_item_name(&*node) {\n-                        self.items.entry(lang_item_name).or_insert(LangItemTarget::Trait(trait_));\n-                    }\n-                }\n-                ModuleDef::Enum(e) => {\n-                    let node = e.source(db).ast;\n-                    if let Some(lang_item_name) = lang_item_name(&*node) {\n-                        self.items.entry(lang_item_name).or_insert(LangItemTarget::Enum(e));\n-                    }\n-                }\n-                ModuleDef::Struct(s) => {\n-                    let node = s.source(db).ast;\n-                    if let Some(lang_item_name) = lang_item_name(&*node) {\n-                        self.items.entry(lang_item_name).or_insert(LangItemTarget::Struct(s));\n-                    }\n-                }\n-                ModuleDef::Function(f) => {\n-                    let node = f.source(db).ast;\n-                    if let Some(lang_item_name) = lang_item_name(&*node) {\n-                        self.items.entry(lang_item_name).or_insert(LangItemTarget::Function(f));\n-                    }\n-                }\n-                ModuleDef::Static(s) => {\n-                    let node = s.source(db).ast;\n-                    if let Some(lang_item_name) = lang_item_name(&*node) {\n-                        self.items.entry(lang_item_name).or_insert(LangItemTarget::Static(s));\n-                    }\n+                    self.collect_lang_item(db, trait_, LangItemTarget::Trait)\n                 }\n+                ModuleDef::Enum(e) => self.collect_lang_item(db, e, LangItemTarget::Enum),\n+                ModuleDef::Struct(s) => self.collect_lang_item(db, s, LangItemTarget::Struct),\n+                ModuleDef::Function(f) => self.collect_lang_item(db, f, LangItemTarget::Function),\n+                ModuleDef::Static(s) => self.collect_lang_item(db, s, LangItemTarget::Static),\n                 _ => {}\n             }\n         }\n@@ -135,6 +112,21 @@ impl LangItems {\n             self.collect_lang_items_recursive(db, &child);\n         }\n     }\n+\n+    fn collect_lang_item<T, N>(\n+        &mut self,\n+        db: &(impl DefDatabase + AstDatabase),\n+        item: T,\n+        constructor: fn(T) -> LangItemTarget,\n+    ) where\n+        T: Copy + HasSource<Ast = TreeArc<N>>,\n+        N: AttrsOwner,\n+    {\n+        let node = item.source(db).ast;\n+        if let Some(lang_item_name) = lang_item_name(&*node) {\n+            self.items.entry(lang_item_name).or_insert(constructor(item));\n+        }\n+    }\n }\n \n fn lang_item_name<T: AttrsOwner>(node: &T) -> Option<SmolStr> {"}, {"sha": "842d49e1fd42da1018e441964d56a1d65aca068e", "filename": "crates/ra_hir/src/ty.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/96c2b9c41d85a8bd781e2b734cac1224eb7c4694/crates%2Fra_hir%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96c2b9c41d85a8bd781e2b734cac1224eb7c4694/crates%2Fra_hir%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty.rs?ref=96c2b9c41d85a8bd781e2b734cac1224eb7c4694", "patch": "@@ -23,6 +23,7 @@ pub(crate) use lower::{TypableDef, type_for_def, type_for_field, callable_item_s\n pub(crate) use infer::{infer_query, InferenceResult, InferTy};\n pub use lower::CallableDef;\n pub(crate) use autoderef::autoderef;\n+pub(crate) use traits::ProjectionPredicate;\n \n /// A type constructor or type name: this might be something like the primitive\n /// type `bool`, a struct like `Vec`, or things like function pointers or"}, {"sha": "1f443d49b688d237b23f163916e4eb2f2c930f00", "filename": "crates/ra_hir/src/ty/autoderef.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/96c2b9c41d85a8bd781e2b734cac1224eb7c4694/crates%2Fra_hir%2Fsrc%2Fty%2Fautoderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96c2b9c41d85a8bd781e2b734cac1224eb7c4694/crates%2Fra_hir%2Fsrc%2Fty%2Fautoderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Fautoderef.rs?ref=96c2b9c41d85a8bd781e2b734cac1224eb7c4694", "patch": "@@ -10,12 +10,14 @@ use log::{info, warn};\n use crate::{HirDatabase, Name, Resolver, HasGenericParams};\n use super::{traits::Solution, Ty, Canonical};\n \n+const AUTODEREF_RECURSION_LIMIT: usize = 10;\n+\n pub(crate) fn autoderef<'a>(\n     db: &'a impl HirDatabase,\n     resolver: &'a Resolver,\n     ty: Canonical<Ty>,\n ) -> impl Iterator<Item = Canonical<Ty>> + 'a {\n-    successors(Some(ty), move |ty| deref(db, resolver, ty))\n+    successors(Some(ty), move |ty| deref(db, resolver, ty)).take(AUTODEREF_RECURSION_LIMIT)\n }\n \n pub(crate) fn deref("}, {"sha": "7a101d981a1dacf2b817f439c7e016db21cfc0d3", "filename": "crates/ra_hir/src/ty/tests.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/96c2b9c41d85a8bd781e2b734cac1224eb7c4694/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96c2b9c41d85a8bd781e2b734cac1224eb7c4694/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs?ref=96c2b9c41d85a8bd781e2b734cac1224eb7c4694", "patch": "@@ -2768,7 +2768,6 @@ fn test(s: Arc<S>) {\n \n #[test]\n fn deref_trait_with_inference_var() {\n-    // std::env::set_var(\"RUST_BACKTRACE\", \"1\");\n     let t = type_at(\n         r#\"\n //- /main.rs"}, {"sha": "9a6349d4ba0062b670f1146643d87a88fa1ebb8b", "filename": "crates/ra_hir/src/ty/traits.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/96c2b9c41d85a8bd781e2b734cac1224eb7c4694/crates%2Fra_hir%2Fsrc%2Fty%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96c2b9c41d85a8bd781e2b734cac1224eb7c4694/crates%2Fra_hir%2Fsrc%2Fty%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Ftraits.rs?ref=96c2b9c41d85a8bd781e2b734cac1224eb7c4694", "patch": "@@ -105,7 +105,7 @@ pub(crate) fn implements_query(\n     solution.map(|solution| solution_from_chalk(db, solution))\n }\n \n-pub(crate) fn normalize(\n+pub(crate) fn normalize_query(\n     db: &impl HirDatabase,\n     krate: Crate,\n     projection: Canonical<ProjectionPredicate>,"}]}