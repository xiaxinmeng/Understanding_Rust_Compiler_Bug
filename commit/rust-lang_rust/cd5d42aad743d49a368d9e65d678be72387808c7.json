{"sha": "cd5d42aad743d49a368d9e65d678be72387808c7", "node_id": "C_kwDOAAsO6NoAKGNkNWQ0MmFhZDc0M2Q0OWEzNjhkOWU2NWQ2NzhiZTcyMzg3ODA4Yzc", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2022-01-23T18:39:55Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2022-01-25T12:16:44Z"}, "message": "Correctly import foreign statics\n\nPreviously foreign statics would actually cause a local static to be\ndefined and exported. This issue was found because std::env::vars() was\nfound to return no env vars despite many being defined. This was caused\nby libstd importing environ as foreign static. The accidental definition\nof environ caused libstd to read a null pointer which was interpreted as\nthere being no environment variables at all.\n\nAlso fix tests. STDOUT is not defined by libc. The correct name is stdout.\nThis previously worked as STDOUT was incorrectly defined as null pointer\nduring codegen.", "tree": {"sha": "d7c1a9fb92378187402011b6131f1502ac15a753", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d7c1a9fb92378187402011b6131f1502ac15a753"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cd5d42aad743d49a368d9e65d678be72387808c7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cd5d42aad743d49a368d9e65d678be72387808c7", "html_url": "https://github.com/rust-lang/rust/commit/cd5d42aad743d49a368d9e65d678be72387808c7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cd5d42aad743d49a368d9e65d678be72387808c7/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e690fb12731eb5f86d4c88400a344f65607af385", "url": "https://api.github.com/repos/rust-lang/rust/commits/e690fb12731eb5f86d4c88400a344f65607af385", "html_url": "https://github.com/rust-lang/rust/commit/e690fb12731eb5f86d4c88400a344f65607af385"}], "stats": {"total": 34, "additions": 20, "deletions": 14}, "files": [{"sha": "e55da7952e753e68d93037320b0eedbaf4368945", "filename": "src/consts.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/cd5d42aad743d49a368d9e65d678be72387808c7/src%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd5d42aad743d49a368d9e65d678be72387808c7/src%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconsts.rs?ref=cd5d42aad743d49a368d9e65d678be72387808c7", "patch": "@@ -1,4 +1,4 @@\n-use gccjit::{LValue, RValue, ToRValue, Type};\n+use gccjit::{GlobalKind, LValue, RValue, ToRValue, Type};\n use rustc_codegen_ssa::traits::{BaseTypeMethods, ConstMethods, DerivedTypeMethods, StaticMethods};\n use rustc_hir as hir;\n use rustc_hir::Node;\n@@ -218,7 +218,13 @@ impl<'gcc, 'tcx> CodegenCx<'gcc, 'tcx> {\n                         }\n \n                         let is_tls = fn_attrs.flags.contains(CodegenFnAttrFlags::THREAD_LOCAL);\n-                        let global = self.declare_global(&sym, llty, is_tls, fn_attrs.link_section);\n+                        let global = self.declare_global(\n+                            &sym,\n+                            llty,\n+                            GlobalKind::Exported,\n+                            is_tls,\n+                            fn_attrs.link_section,\n+                        );\n \n                         if !self.tcx.is_reachable_non_generic(def_id) {\n                             // TODO(antoyo): set visibility.\n@@ -389,6 +395,6 @@ fn check_and_apply_linkage<'gcc, 'tcx>(cx: &CodegenCx<'gcc, 'tcx>, attrs: &Codeg\n         // don't do this then linker errors can be generated where the linker\n         // complains that one object files has a thread local version of the\n         // symbol and another one doesn't.\n-        cx.declare_global(&sym, llty, is_tls, attrs.link_section)\n+        cx.declare_global(&sym, llty, GlobalKind::Imported, is_tls, attrs.link_section)\n     }\n }"}, {"sha": "ec6f8ea4dde090e4ac0652124411d4cfe74a977c", "filename": "src/declare.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cd5d42aad743d49a368d9e65d678be72387808c7/src%2Fdeclare.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd5d42aad743d49a368d9e65d678be72387808c7/src%2Fdeclare.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdeclare.rs?ref=cd5d42aad743d49a368d9e65d678be72387808c7", "patch": "@@ -22,7 +22,7 @@ impl<'gcc, 'tcx> CodegenCx<'gcc, 'tcx> {\n             global\n         }\n         else {\n-            self.declare_global(name, ty, is_tls, link_section)\n+            self.declare_global(name, ty, GlobalKind::Exported, is_tls, link_section)\n         }\n     }\n \n@@ -47,8 +47,8 @@ impl<'gcc, 'tcx> CodegenCx<'gcc, 'tcx> {\n         unsafe { std::mem::transmute(func) }\n     }*/\n \n-    pub fn declare_global(&self, name: &str, ty: Type<'gcc>, is_tls: bool, link_section: Option<Symbol>) -> LValue<'gcc> {\n-        let global = self.context.new_global(None, GlobalKind::Exported, ty, name);\n+    pub fn declare_global(&self, name: &str, ty: Type<'gcc>, global_kind: GlobalKind, is_tls: bool, link_section: Option<Symbol>) -> LValue<'gcc> {\n+        let global = self.context.new_global(None, global_kind, ty, name);\n         if is_tls {\n             global.set_tls_model(self.tls_model);\n         }"}, {"sha": "eb38a8a383575587c6880ecf37160fcf133ba499", "filename": "tests/run/assign.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cd5d42aad743d49a368d9e65d678be72387808c7/tests%2Frun%2Fassign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd5d42aad743d49a368d9e65d678be72387808c7/tests%2Frun%2Fassign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun%2Fassign.rs?ref=cd5d42aad743d49a368d9e65d678be72387808c7", "patch": "@@ -51,7 +51,7 @@ mod libc {\n         pub fn fflush(stream: *mut i32) -> i32;\n         pub fn printf(format: *const i8, ...) -> i32;\n \n-        pub static STDOUT: *mut i32;\n+        pub static stdout: *mut i32;\n     }\n }\n \n@@ -67,7 +67,7 @@ mod intrinsics {\n pub fn panic(_msg: &str) -> ! {\n     unsafe {\n         libc::puts(\"Panicking\\0\" as *const str as *const u8);\n-        libc::fflush(libc::STDOUT);\n+        libc::fflush(libc::stdout);\n         intrinsics::abort();\n     }\n }"}, {"sha": "6477b83982804646fbb7bc9c597e9dcd8a09a3d4", "filename": "tests/run/int_overflow.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cd5d42aad743d49a368d9e65d678be72387808c7/tests%2Frun%2Fint_overflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd5d42aad743d49a368d9e65d678be72387808c7/tests%2Frun%2Fint_overflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun%2Fint_overflow.rs?ref=cd5d42aad743d49a368d9e65d678be72387808c7", "patch": "@@ -49,7 +49,7 @@ mod libc {\n         pub fn puts(s: *const u8) -> i32;\n         pub fn fflush(stream: *mut i32) -> i32;\n \n-        pub static STDOUT: *mut i32;\n+        pub static stdout: *mut i32;\n     }\n }\n \n@@ -65,7 +65,7 @@ mod intrinsics {\n pub fn panic(_msg: &str) -> ! {\n     unsafe {\n         libc::puts(\"Panicking\\0\" as *const str as *const u8);\n-        libc::fflush(libc::STDOUT);\n+        libc::fflush(libc::stdout);\n         intrinsics::abort();\n     }\n }"}, {"sha": "52de20021f3e0c16c506573e7cf2f896027d317c", "filename": "tests/run/mut_ref.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cd5d42aad743d49a368d9e65d678be72387808c7/tests%2Frun%2Fmut_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd5d42aad743d49a368d9e65d678be72387808c7/tests%2Frun%2Fmut_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun%2Fmut_ref.rs?ref=cd5d42aad743d49a368d9e65d678be72387808c7", "patch": "@@ -53,7 +53,7 @@ mod libc {\n         pub fn fflush(stream: *mut i32) -> i32;\n         pub fn printf(format: *const i8, ...) -> i32;\n \n-        pub static STDOUT: *mut i32;\n+        pub static stdout: *mut i32;\n     }\n }\n \n@@ -69,7 +69,7 @@ mod intrinsics {\n pub fn panic(_msg: &str) -> ! {\n     unsafe {\n         libc::puts(\"Panicking\\0\" as *const str as *const u8);\n-        libc::fflush(libc::STDOUT);\n+        libc::fflush(libc::stdout);\n         intrinsics::abort();\n     }\n }"}, {"sha": "e078b37b4aba9ed247fe3849b74fdb4d649ed7b5", "filename": "tests/run/operations.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cd5d42aad743d49a368d9e65d678be72387808c7/tests%2Frun%2Foperations.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd5d42aad743d49a368d9e65d678be72387808c7/tests%2Frun%2Foperations.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun%2Foperations.rs?ref=cd5d42aad743d49a368d9e65d678be72387808c7", "patch": "@@ -59,7 +59,7 @@ mod libc {\n         pub fn puts(s: *const u8) -> i32;\n         pub fn fflush(stream: *mut i32) -> i32;\n \n-        pub static STDOUT: *mut i32;\n+        pub static stdout: *mut i32;\n     }\n }\n \n@@ -75,7 +75,7 @@ mod intrinsics {\n pub fn panic(_msg: &str) -> ! {\n     unsafe {\n         libc::puts(\"Panicking\\0\" as *const str as *const u8);\n-        libc::fflush(libc::STDOUT);\n+        libc::fflush(libc::stdout);\n         intrinsics::abort();\n     }\n }"}]}