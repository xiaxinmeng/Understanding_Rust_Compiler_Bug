{"sha": "7715f00592738b0e4d16ff2e191a632ef03e8962", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc3MTVmMDA1OTI3MzhiMGU0ZDE2ZmYyZTE5MWE2MzJlZjAzZTg5NjI=", "commit": {"author": {"name": "Oliver Schneider", "email": "oli-obk@users.noreply.github.com", "date": "2017-08-23T14:40:19Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-08-23T14:40:19Z"}, "message": "Merge pull request #1979 from montrivo/use_self\n\nlint #1674: lifetimed types exclusion", "tree": {"sha": "ad8e9bbb522ecf0d8146c513965aea6fbbe1b74b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ad8e9bbb522ecf0d8146c513965aea6fbbe1b74b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7715f00592738b0e4d16ff2e191a632ef03e8962", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7715f00592738b0e4d16ff2e191a632ef03e8962", "html_url": "https://github.com/rust-lang/rust/commit/7715f00592738b0e4d16ff2e191a632ef03e8962", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7715f00592738b0e4d16ff2e191a632ef03e8962/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0acadb3c2117e31d46fac82ef48bf04e4ff320ba", "url": "https://api.github.com/repos/rust-lang/rust/commits/0acadb3c2117e31d46fac82ef48bf04e4ff320ba", "html_url": "https://github.com/rust-lang/rust/commit/0acadb3c2117e31d46fac82ef48bf04e4ff320ba"}, {"sha": "572b3388ac91bdf71d180a0fd2426abe170d12c1", "url": "https://api.github.com/repos/rust-lang/rust/commits/572b3388ac91bdf71d180a0fd2426abe170d12c1", "html_url": "https://github.com/rust-lang/rust/commit/572b3388ac91bdf71d180a0fd2426abe170d12c1"}], "stats": {"total": 78, "additions": 43, "deletions": 35}, "files": [{"sha": "b8c970d376ef6f8d7ccd3f914cf7cf0a883f3873", "filename": "clippy_lints/src/use_self.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/7715f00592738b0e4d16ff2e191a632ef03e8962/clippy_lints%2Fsrc%2Fuse_self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7715f00592738b0e4d16ff2e191a632ef03e8962/clippy_lints%2Fsrc%2Fuse_self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fuse_self.rs?ref=7715f00592738b0e4d16ff2e191a632ef03e8962", "patch": "@@ -46,6 +46,8 @@ impl LintPass for UseSelf {\n     }\n }\n \n+const SEGMENTS_MSG: &str = \"segments should be composed of at least 1 element\";\n+\n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UseSelf {\n     fn check_item(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx Item) {\n         if in_macro(item.span) {\n@@ -54,6 +56,9 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UseSelf {\n         if_let_chain!([\n             let ItemImpl(.., ref item_type, ref refs) = item.node,\n             let Ty_::TyPath(QPath::Resolved(_, ref item_path)) = item_type.node,\n+            let PathParameters::AngleBracketedParameters(ref param_data)\n+              = item_path.segments.last().expect(SEGMENTS_MSG).parameters,\n+            param_data.lifetimes.len() == 0,\n         ], {\n             let visitor = &mut UseSelfVisitor {\n                 item_path: item_path,\n@@ -76,12 +81,10 @@ impl<'a, 'tcx> Visitor<'tcx> for UseSelfVisitor<'a, 'tcx> {\n         if self.item_path.def == path.def &&\n            path.segments\n             .last()\n-            .expect(\"segments should be composed of at least 1 element\")\n+            .expect(SEGMENTS_MSG)\n             .name != SelfType.name() {\n             span_lint_and_then(self.cx, USE_SELF, path.span, \"unnecessary structure name repetition\", |db| {\n-                db.span_suggestion(path.span,\n-                                   \"use the applicable keyword\",\n-                                   \"Self\".to_owned());\n+                db.span_suggestion(path.span, \"use the applicable keyword\", \"Self\".to_owned());\n             });\n         }\n "}, {"sha": "8570dccd0febe81fe23348b0f103bde1e3ab549a", "filename": "tests/ui/methods.stderr", "status": "modified", "additions": 1, "deletions": 19, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/7715f00592738b0e4d16ff2e191a632ef03e8962/tests%2Fui%2Fmethods.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7715f00592738b0e4d16ff2e191a632ef03e8962/tests%2Fui%2Fmethods.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmethods.stderr?ref=7715f00592738b0e4d16ff2e191a632ef03e8962", "patch": "@@ -78,24 +78,6 @@ error: methods called `new` usually return `Self`\n    |\n    = note: `-D new-ret-no-self` implied by `-D warnings`\n \n-error: unnecessary structure name repetition\n-  --> $DIR/methods.rs:40:35\n-   |\n-40 |     pub fn new<'b>(s: &'b str) -> Lt<'b> { unimplemented!() }\n-   |                                   ^^^^^^ help: use the applicable keyword: `Self`\n-\n-error: unnecessary structure name repetition\n-  --> $DIR/methods.rs:49:28\n-   |\n-49 |     pub fn new(s: &str) -> Lt2 { unimplemented!() }\n-   |                            ^^^ help: use the applicable keyword: `Self`\n-\n-error: unnecessary structure name repetition\n-  --> $DIR/methods.rs:58:21\n-   |\n-58 |     pub fn new() -> Lt3<'static> { unimplemented!() }\n-   |                     ^^^^^^^^^^^^ help: use the applicable keyword: `Self`\n-\n error: unnecessary structure name repetition\n   --> $DIR/methods.rs:74:24\n    |\n@@ -730,5 +712,5 @@ error: called `cloned().collect()` on a slice to create a `Vec`. Calling `to_vec\n     |\n     = note: `-D iter-cloned-collect` implied by `-D warnings`\n \n-error: aborting due to 106 previous errors\n+error: aborting due to 103 previous errors\n "}, {"sha": "14e31aae8ee5c65fb88dc92446a26e0902fcf175", "filename": "tests/ui/use_self.rs", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/7715f00592738b0e4d16ff2e191a632ef03e8962/tests%2Fui%2Fuse_self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7715f00592738b0e4d16ff2e191a632ef03e8962/tests%2Fui%2Fuse_self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fuse_self.rs?ref=7715f00592738b0e4d16ff2e191a632ef03e8962", "patch": "@@ -2,6 +2,7 @@\n #![plugin(clippy)]\n #![warn(use_self)]\n #![allow(dead_code)]\n+#![allow(should_implement_trait)]\n \n \n fn main() {}\n@@ -43,3 +44,25 @@ mod better {\n         }\n     }\n }\n+\n+//todo the lint does not handle lifetimed struct\n+//the following module should trigger the lint on the third method only\n+mod lifetimes {\n+    struct Foo<'a>{foo_str: &'a str}\n+\n+    impl<'a> Foo<'a> {\n+        // Cannot use `Self` as return type, because the function is actually `fn foo<'b>(s: &'b str) -> Foo<'b>`\n+        fn foo(s: &str) -> Foo {\n+            Foo { foo_str: s }\n+        }\n+        // cannot replace with `Self`, because that's `Foo<'a>`\n+        fn bar() -> Foo<'static> {\n+            Foo { foo_str: \"foo\"}\n+        }\n+\n+        // `Self` is applicable here\n+        fn clone(&self) -> Foo<'a> {\n+            Foo {foo_str: self.foo_str}\n+        }\n+    }\n+}"}, {"sha": "bfd334335d88d010846f04111f43ccc3a0922a04", "filename": "tests/ui/use_self.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/7715f00592738b0e4d16ff2e191a632ef03e8962/tests%2Fui%2Fuse_self.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7715f00592738b0e4d16ff2e191a632ef03e8962/tests%2Fui%2Fuse_self.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fuse_self.stderr?ref=7715f00592738b0e4d16ff2e191a632ef03e8962", "patch": "@@ -1,39 +1,39 @@\n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:13:21\n+  --> $DIR/use_self.rs:14:21\n    |\n-13 |         fn new() -> Foo {\n+14 |         fn new() -> Foo {\n    |                     ^^^ help: use the applicable keyword: `Self`\n    |\n    = note: `-D use-self` implied by `-D warnings`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:14:13\n+  --> $DIR/use_self.rs:15:13\n    |\n-14 |             Foo {}\n+15 |             Foo {}\n    |             ^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:16:22\n+  --> $DIR/use_self.rs:17:22\n    |\n-16 |         fn test() -> Foo {\n+17 |         fn test() -> Foo {\n    |                      ^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:17:13\n+  --> $DIR/use_self.rs:18:13\n    |\n-17 |             Foo::new()\n+18 |             Foo::new()\n    |             ^^^^^^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:22:25\n+  --> $DIR/use_self.rs:23:25\n    |\n-22 |         fn default() -> Foo {\n+23 |         fn default() -> Foo {\n    |                         ^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:23:13\n+  --> $DIR/use_self.rs:24:13\n    |\n-23 |             Foo::new()\n+24 |             Foo::new()\n    |             ^^^^^^^^ help: use the applicable keyword: `Self`\n \n error: aborting due to 6 previous errors"}]}