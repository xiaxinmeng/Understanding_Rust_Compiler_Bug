{"sha": "feb48f334d29a22f2e3ae3b322af081b42fafc60", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZlYjQ4ZjMzNGQyOWEyMmYyZTNhZTNiMzIyYWYwODFiNDJmYWZjNjA=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-01-14T19:31:57Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-01-14T19:31:57Z"}, "message": "Rollup merge of #57572 - Centril:unaccept-extern-in-path, r=petrochenkov\n\nUnaccept `extern_in_paths`\n\nBased on completed fcp-close in https://github.com/rust-lang/rust/issues/55600, this removes `extern_in_path` (e.g. `extern::foo::bar`) from the language. The changes are primarily reversing https://github.com/rust-lang/rust/commit/32db83b16e06cb5cca72d0e6a648a8008eda0fac.\n\nCloses https://github.com/rust-lang/rust/issues/55600\n\nr? @petrochenkov", "tree": {"sha": "d1894abd60e07e9222add237fc42bee77004a7f4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d1894abd60e07e9222add237fc42bee77004a7f4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/feb48f334d29a22f2e3ae3b322af081b42fafc60", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcPOOtCRBK7hj4Ov3rIwAAdHIIAAtTATXu3UOYaw6nPhamZZRR\nF4pajrk1pClwlbIQyoPLVl9WHCEZlEgHUIjSfP+o8h3FFSuba5DQnOga5qeubdaj\nXMuy72ZOw1IWVNNKbzxvQTumOsz7c7GGGc89BCVtq/kcOj7ZdFLB51ivrGXzQqWK\ngxd17STz35yx/6sh4PX+Joj8MpAI+Ue+q0sPsV3Ji7UuyGQ9+uIpTeepH9VGePl9\nQl+rnLu+iRZvOuLB7dpFLdTBlKpUbkwwoL+X7X/miPw5tALMHfySuIMZBkpOUp1L\nOX+xgsSLmSIlhIzehXWpJpKCaCix0sda4LvytXZ6ZrojZuent371pMx6XsEfU/M=\n=vRTF\n-----END PGP SIGNATURE-----\n", "payload": "tree d1894abd60e07e9222add237fc42bee77004a7f4\nparent 2e1094429d3b122fa6805760180dbd45ad5d1500\nparent c4f6ef25d207ad0cff8d1e5282fedbe1e3ac743c\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1547494317 +0100\ncommitter GitHub <noreply@github.com> 1547494317 +0100\n\nRollup merge of #57572 - Centril:unaccept-extern-in-path, r=petrochenkov\n\nUnaccept `extern_in_paths`\n\nBased on completed fcp-close in https://github.com/rust-lang/rust/issues/55600, this removes `extern_in_path` (e.g. `extern::foo::bar`) from the language. The changes are primarily reversing https://github.com/rust-lang/rust/commit/32db83b16e06cb5cca72d0e6a648a8008eda0fac.\n\nCloses https://github.com/rust-lang/rust/issues/55600\n\nr? @petrochenkov\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/feb48f334d29a22f2e3ae3b322af081b42fafc60", "html_url": "https://github.com/rust-lang/rust/commit/feb48f334d29a22f2e3ae3b322af081b42fafc60", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/feb48f334d29a22f2e3ae3b322af081b42fafc60/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2e1094429d3b122fa6805760180dbd45ad5d1500", "url": "https://api.github.com/repos/rust-lang/rust/commits/2e1094429d3b122fa6805760180dbd45ad5d1500", "html_url": "https://github.com/rust-lang/rust/commit/2e1094429d3b122fa6805760180dbd45ad5d1500"}, {"sha": "c4f6ef25d207ad0cff8d1e5282fedbe1e3ac743c", "url": "https://api.github.com/repos/rust-lang/rust/commits/c4f6ef25d207ad0cff8d1e5282fedbe1e3ac743c", "html_url": "https://github.com/rust-lang/rust/commit/c4f6ef25d207ad0cff8d1e5282fedbe1e3ac743c"}], "stats": {"total": 295, "additions": 62, "deletions": 233}, "files": [{"sha": "9979d7742291e50f35e6ce7cf2a1ea2cb89d4d27", "filename": "src/doc/unstable-book/src/language-features/extern-in-paths.md", "status": "removed", "additions": 0, "deletions": 40, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/2e1094429d3b122fa6805760180dbd45ad5d1500/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fextern-in-paths.md", "raw_url": "https://github.com/rust-lang/rust/raw/2e1094429d3b122fa6805760180dbd45ad5d1500/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fextern-in-paths.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fextern-in-paths.md?ref=2e1094429d3b122fa6805760180dbd45ad5d1500", "patch": "@@ -1,40 +0,0 @@\n-# `extern_in_paths`\n-\n-The tracking issue for this feature is: [#44660]\n-\n-[#44660]: https://github.com/rust-lang/rust/issues/44660\n-\n-------------------------\n-\n-The `extern_in_paths` feature allows to refer to names from other crates \"inline\", without\n-introducing `extern crate` items, using keyword `extern`.\n-\n-For example, `extern::my_crat::a::b` will resolve to path `a::b` in crate `my_crate`.\n-\n-Absolute paths on 2018 edition (e.g. `::my_crate::a::b`) provide the same effect\n-and resolve to extern crates (built-in or passed with `--extern`).\n-\n-```rust,ignore\n-#![feature(extern_in_paths)]\n-\n-// Suppose we have a dependency crate `xcrate` available through `Cargo.toml`, or `--extern`\n-// options, or standard Rust distribution, or some other means.\n-\n-use extern::xcrate::Z;\n-\n-fn f() {\n-    use extern::xcrate;\n-    use extern::xcrate as ycrate;\n-    let s = xcrate::S;\n-    assert_eq!(format!(\"{:?}\", s), \"S\");\n-    let z = ycrate::Z;\n-    assert_eq!(format!(\"{:?}\", z), \"Z\");\n-}\n-\n-fn main() {\n-    let s = extern::xcrate::S;\n-    assert_eq!(format!(\"{:?}\", s), \"S\");\n-    let z = Z;\n-    assert_eq!(format!(\"{:?}\", z), \"Z\");\n-}\n-```"}, {"sha": "9168bbf907f1e151659f2b6f06cd6859687eef70", "filename": "src/librustc/middle/cstore.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/feb48f334d29a22f2e3ae3b322af081b42fafc60/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/feb48f334d29a22f2e3ae3b322af081b42fafc60/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcstore.rs?ref=feb48f334d29a22f2e3ae3b322af081b42fafc60", "patch": "@@ -140,7 +140,7 @@ pub enum ExternCrateSource {\n     ),\n     // Crate is loaded by `use`.\n     Use,\n-    /// Crate is implicitly loaded by an absolute or an `extern::` path.\n+    /// Crate is implicitly loaded by an absolute path.\n     Path,\n }\n "}, {"sha": "a25009ccfb49cc4dbc18cf6bf2261adcdebceb5c", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/feb48f334d29a22f2e3ae3b322af081b42fafc60/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/feb48f334d29a22f2e3ae3b322af081b42fafc60/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=feb48f334d29a22f2e3ae3b322af081b42fafc60", "patch": "@@ -1015,7 +1015,7 @@ enum ModuleOrUniformRoot<'a> {\n     CrateRootAndExternPrelude,\n \n     /// Virtual module that denotes resolution in extern prelude.\n-    /// Used for paths starting with `::` on 2018 edition or `extern::`.\n+    /// Used for paths starting with `::` on 2018 edition.\n     ExternPrelude,\n \n     /// Virtual module that denotes resolution in current scope.\n@@ -3836,8 +3836,7 @@ impl<'a> Resolver<'a> {\n                             self.resolve_self(&mut ctxt, self.current_module)));\n                         continue;\n                     }\n-                    if name == keywords::Extern.name() ||\n-                       name == keywords::PathRoot.name() && ident.span.rust_2018() {\n+                    if name == keywords::PathRoot.name() && ident.span.rust_2018() {\n                         module = Some(ModuleOrUniformRoot::ExternPrelude);\n                         continue;\n                     }\n@@ -4004,8 +4003,8 @@ impl<'a> Resolver<'a> {\n         };\n \n         // We're only interested in `use` paths which should start with\n-        // `{{root}}` or `extern` currently.\n-        if first_name != keywords::Extern.name() && first_name != keywords::PathRoot.name() {\n+        // `{{root}}` currently.\n+        if first_name != keywords::PathRoot.name() {\n             return\n         }\n "}, {"sha": "ed278e834cbc7adee9b03ce9f9669ef33555e04b", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 5, "deletions": 24, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/feb48f334d29a22f2e3ae3b322af081b42fafc60/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/feb48f334d29a22f2e3ae3b322af081b42fafc60/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=feb48f334d29a22f2e3ae3b322af081b42fafc60", "patch": "@@ -25,9 +25,9 @@ use syntax_pos::{Span, DUMMY_SP};\n use errors::{DiagnosticBuilder, Handler};\n use visit::{self, FnKind, Visitor};\n use parse::ParseSess;\n-use symbol::{keywords, Symbol};\n+use symbol::Symbol;\n \n-use std::{env};\n+use std::env;\n \n macro_rules! set {\n     ($field: ident) => {{\n@@ -372,9 +372,6 @@ declare_features! (\n     // Generic associated types (RFC 1598)\n     (active, generic_associated_types, \"1.23.0\", Some(44265), None),\n \n-    // `extern` in paths\n-    (active, extern_in_paths, \"1.23.0\", Some(55600), None),\n-\n     // Infer static outlives requirements (RFC 2093).\n     (active, infer_static_outlives_requirements, \"1.26.0\", Some(54185), None),\n \n@@ -503,6 +500,9 @@ declare_features! (\n     // Allows the use of `#[derive(Anything)]` as sugar for `#[derive_Anything]`.\n     (removed, custom_derive, \"1.0.0\", Some(29644), None,\n      Some(\"subsumed by `#[proc_macro_derive]`\")),\n+    // Paths of the form: `extern::foo::bar`\n+    (removed, extern_in_paths, \"1.33.0\", Some(55600), None,\n+     Some(\"subsumed by `::foo::bar` paths\")),\n );\n \n declare_features! (\n@@ -1827,25 +1827,6 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n         visit::walk_impl_item(self, ii);\n     }\n \n-    fn visit_path(&mut self, path: &'a ast::Path, _id: NodeId) {\n-        for segment in &path.segments {\n-            // Identifiers we are going to check could come from a legacy macro (e.g., `#[test]`).\n-            // For such macros identifiers must have empty context, because this context is\n-            // used during name resolution and produced names must be unhygienic for compatibility.\n-            // On the other hand, we need the actual non-empty context for feature gate checking\n-            // because it's hygienic even for legacy macros. As previously stated, such context\n-            // cannot be kept in identifiers, so it's kept in paths instead and we take it from\n-            // there while keeping location info from the ident span.\n-            let span = segment.ident.span.with_ctxt(path.span.ctxt());\n-            if segment.ident.name == keywords::Extern.name() {\n-                gate_feature_post!(&self, extern_in_paths, span,\n-                                   \"`extern` in paths is experimental\");\n-            }\n-        }\n-\n-        visit::walk_path(self, path);\n-    }\n-\n     fn visit_vis(&mut self, vis: &'a ast::Visibility) {\n         if let ast::VisibilityKind::Crate(ast::CrateSugar::JustCrate) = vis.node {\n             gate_feature_post!(&self, crate_visibility_modifier, vis.span,"}, {"sha": "119bd6c107c132e964384e4712ecc71aa1bac08a", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 3, "deletions": 10, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/feb48f334d29a22f2e3ae3b322af081b42fafc60/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/feb48f334d29a22f2e3ae3b322af081b42fafc60/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=feb48f334d29a22f2e3ae3b322af081b42fafc60", "patch": "@@ -1302,7 +1302,7 @@ impl<'a> Parser<'a> {\n     fn token_is_bare_fn_keyword(&mut self) -> bool {\n         self.check_keyword(keywords::Fn) ||\n             self.check_keyword(keywords::Unsafe) ||\n-            self.check_keyword(keywords::Extern) && self.is_extern_non_path()\n+            self.check_keyword(keywords::Extern)\n     }\n \n     /// parse a `TyKind::BareFn` type:\n@@ -4617,10 +4617,6 @@ impl<'a> Parser<'a> {\n         self.token.is_keyword(keywords::Crate) && self.look_ahead(1, |t| t != &token::ModSep)\n     }\n \n-    fn is_extern_non_path(&self) -> bool {\n-        self.token.is_keyword(keywords::Extern) && self.look_ahead(1, |t| t != &token::ModSep)\n-    }\n-\n     fn is_existential_type_decl(&self) -> bool {\n         self.token.is_keyword(keywords::Existential) &&\n         self.look_ahead(1, |t| t.is_keyword(keywords::Type))\n@@ -4724,12 +4720,10 @@ impl<'a> Parser<'a> {\n         // like a path (1 token), but it fact not a path.\n         // `union::b::c` - path, `union U { ... }` - not a path.\n         // `crate::b::c` - path, `crate struct S;` - not a path.\n-        // `extern::b::c` - path, `extern crate c;` - not a path.\n         } else if self.token.is_path_start() &&\n                   !self.token.is_qpath_start() &&\n                   !self.is_union_item() &&\n                   !self.is_crate_vis() &&\n-                  !self.is_extern_non_path() &&\n                   !self.is_existential_type_decl() &&\n                   !self.is_auto_trait_item() {\n             let pth = self.parse_path(PathStyle::Expr)?;\n@@ -7198,8 +7192,7 @@ impl<'a> Parser<'a> {\n             return Ok(Some(item));\n         }\n \n-        if self.check_keyword(keywords::Extern) && self.is_extern_non_path() {\n-            self.bump(); // `extern`\n+        if self.eat_keyword(keywords::Extern) {\n             if self.eat_keyword(keywords::Crate) {\n                 return Ok(Some(self.parse_item_extern_crate(lo, visibility, attrs)?));\n             }\n@@ -7708,7 +7701,7 @@ impl<'a> Parser<'a> {\n     fn parse_assoc_macro_invoc(&mut self, item_kind: &str, vis: Option<&Visibility>,\n                                at_end: &mut bool) -> PResult<'a, Option<Mac>>\n     {\n-        if self.token.is_path_start() && !self.is_extern_non_path() {\n+        if self.token.is_path_start() {\n             let prev_span = self.prev_span;\n             let lo = self.span;\n             let pth = self.parse_path(PathStyle::Mod)?;"}, {"sha": "e741b79bd4c45ec394500ea0c5309c1ec026afab", "filename": "src/libsyntax_pos/symbol.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/feb48f334d29a22f2e3ae3b322af081b42fafc60/src%2Flibsyntax_pos%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/feb48f334d29a22f2e3ae3b322af081b42fafc60/src%2Flibsyntax_pos%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Fsymbol.rs?ref=feb48f334d29a22f2e3ae3b322af081b42fafc60", "patch": "@@ -478,7 +478,6 @@ impl Ident {\n         self.name == keywords::Super.name() ||\n         self.name == keywords::SelfLower.name() ||\n         self.name == keywords::SelfUpper.name() ||\n-        self.name == keywords::Extern.name() ||\n         self.name == keywords::Crate.name() ||\n         self.name == keywords::PathRoot.name() ||\n         self.name == keywords::DollarCrate.name()"}, {"sha": "bf98fcd10cfded12e1d90b126115ef1a58272a2f", "filename": "src/test/run-make-fulldeps/save-analysis-rfc2126/Makefile", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/feb48f334d29a22f2e3ae3b322af081b42fafc60/src%2Ftest%2Frun-make-fulldeps%2Fsave-analysis-rfc2126%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/feb48f334d29a22f2e3ae3b322af081b42fafc60/src%2Ftest%2Frun-make-fulldeps%2Fsave-analysis-rfc2126%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fsave-analysis-rfc2126%2FMakefile?ref=feb48f334d29a22f2e3ae3b322af081b42fafc60", "patch": "@@ -1,12 +1,9 @@\n -include ../tools.mk\n \n-all: extern_absolute_paths.rs extern_in_paths.rs krate2\n+all: extern_absolute_paths.rs krate2\n \t$(RUSTC) extern_absolute_paths.rs -Zsave-analysis --edition=2018 \\\n \t\t-Z unstable-options --extern krate2\n \tcat $(TMPDIR)/save-analysis/extern_absolute_paths.json | \"$(PYTHON)\" validate_json.py\n-\t$(RUSTC) extern_in_paths.rs -Zsave-analysis --edition=2018 \\\n-\t\t-Z unstable-options --extern krate2\n-\tcat $(TMPDIR)/save-analysis/extern_in_paths.json | \"$(PYTHON)\" validate_json.py\n \n krate2: krate2.rs\n \t$(RUSTC) $<"}, {"sha": "299b96621ac32be85012e814513540a6963d188c", "filename": "src/test/run-make-fulldeps/save-analysis-rfc2126/extern_in_paths.rs", "status": "removed", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2e1094429d3b122fa6805760180dbd45ad5d1500/src%2Ftest%2Frun-make-fulldeps%2Fsave-analysis-rfc2126%2Fextern_in_paths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e1094429d3b122fa6805760180dbd45ad5d1500/src%2Ftest%2Frun-make-fulldeps%2Fsave-analysis-rfc2126%2Fextern_in_paths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fsave-analysis-rfc2126%2Fextern_in_paths.rs?ref=2e1094429d3b122fa6805760180dbd45ad5d1500", "patch": "@@ -1,7 +0,0 @@\n-#![feature(extern_in_paths)]\n-\n-use extern::krate2;\n-\n-fn main() {\n-    extern::krate2::hello();\n-}"}, {"sha": "165a753c8a434160524e2af7a42367062688e583", "filename": "src/test/run-pass/rfcs/rfc-2126-extern-absolute-paths/extern.rs", "status": "removed", "additions": 0, "deletions": 28, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/2e1094429d3b122fa6805760180dbd45ad5d1500/src%2Ftest%2Frun-pass%2Frfcs%2Frfc-2126-extern-absolute-paths%2Fextern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e1094429d3b122fa6805760180dbd45ad5d1500/src%2Ftest%2Frun-pass%2Frfcs%2Frfc-2126-extern-absolute-paths%2Fextern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frfcs%2Frfc-2126-extern-absolute-paths%2Fextern.rs?ref=2e1094429d3b122fa6805760180dbd45ad5d1500", "patch": "@@ -1,28 +0,0 @@\n-// run-pass\n-#![allow(dead_code)]\n-// aux-build:xcrate.rs\n-// compile-flags:--extern xcrate\n-\n-#![feature(extern_in_paths)]\n-\n-use extern::xcrate::Z;\n-\n-type A = extern::xcrate::S;\n-type B = for<'a> extern::xcrate::Tr<'a>;\n-\n-fn f() {\n-    use extern::xcrate;\n-    use extern::xcrate as ycrate;\n-    let s = xcrate::S;\n-    assert_eq!(format!(\"{:?}\", s), \"S\");\n-    let z = ycrate::Z;\n-    assert_eq!(format!(\"{:?}\", z), \"Z\");\n-}\n-\n-fn main() {\n-    let s = extern::xcrate::S;\n-    assert_eq!(format!(\"{:?}\", s), \"S\");\n-    let z = Z;\n-    assert_eq!(format!(\"{:?}\", z), \"Z\");\n-    assert_eq!(A {}, extern::xcrate::S {});\n-}"}, {"sha": "2d23d13d2472bdd6a597d364ea031b2089bf8aef", "filename": "src/test/ui/feature-gates/feature-gate-extern_in_paths.rs", "status": "removed", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2e1094429d3b122fa6805760180dbd45ad5d1500/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-extern_in_paths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e1094429d3b122fa6805760180dbd45ad5d1500/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-extern_in_paths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-extern_in_paths.rs?ref=2e1094429d3b122fa6805760180dbd45ad5d1500", "patch": "@@ -1,5 +0,0 @@\n-struct S;\n-\n-fn main() {\n-    let _ = extern::std::vec::Vec::new(); //~ ERROR `extern` in paths is experimental\n-}"}, {"sha": "6b5963b8559af3edcca4c40e99eb1bdb8f4db622", "filename": "src/test/ui/feature-gates/feature-gate-extern_in_paths.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/2e1094429d3b122fa6805760180dbd45ad5d1500/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-extern_in_paths.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2e1094429d3b122fa6805760180dbd45ad5d1500/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-extern_in_paths.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-extern_in_paths.stderr?ref=2e1094429d3b122fa6805760180dbd45ad5d1500", "patch": "@@ -1,11 +0,0 @@\n-error[E0658]: `extern` in paths is experimental (see issue #55600)\n-  --> $DIR/feature-gate-extern_in_paths.rs:4:13\n-   |\n-LL |     let _ = extern::std::vec::Vec::new(); //~ ERROR `extern` in paths is experimental\n-   |             ^^^^^^\n-   |\n-   = help: add #![feature(extern_in_paths)] to the crate attributes to enable\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0658`."}, {"sha": "b738eb4c703504b114b0e37f155e00a0ace1fe6f", "filename": "src/test/ui/keyword/extern/keyword-extern-as-identifier-expr.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/feb48f334d29a22f2e3ae3b322af081b42fafc60/src%2Ftest%2Fui%2Fkeyword%2Fextern%2Fkeyword-extern-as-identifier-expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/feb48f334d29a22f2e3ae3b322af081b42fafc60/src%2Ftest%2Fui%2Fkeyword%2Fextern%2Fkeyword-extern-as-identifier-expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fkeyword%2Fextern%2Fkeyword-extern-as-identifier-expr.rs?ref=feb48f334d29a22f2e3ae3b322af081b42fafc60", "patch": "@@ -0,0 +1,3 @@\n+fn main() {\n+    let s = extern::foo::Bar; //~ ERROR expected expression, found keyword `extern`\n+}"}, {"sha": "150fc88e7efc2867fbc90227f423e688574a83d8", "filename": "src/test/ui/keyword/extern/keyword-extern-as-identifier-expr.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/feb48f334d29a22f2e3ae3b322af081b42fafc60/src%2Ftest%2Fui%2Fkeyword%2Fextern%2Fkeyword-extern-as-identifier-expr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/feb48f334d29a22f2e3ae3b322af081b42fafc60/src%2Ftest%2Fui%2Fkeyword%2Fextern%2Fkeyword-extern-as-identifier-expr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fkeyword%2Fextern%2Fkeyword-extern-as-identifier-expr.stderr?ref=feb48f334d29a22f2e3ae3b322af081b42fafc60", "patch": "@@ -0,0 +1,8 @@\n+error: expected expression, found keyword `extern`\n+  --> $DIR/keyword-extern-as-identifier-expr.rs:2:13\n+   |\n+LL |     let s = extern::foo::Bar; //~ ERROR expected expression, found keyword `extern`\n+   |             ^^^^^^ expected expression\n+\n+error: aborting due to previous error\n+"}, {"sha": "f9b6bad7c2552046c9e16e0d36a6500d17aadff4", "filename": "src/test/ui/keyword/extern/keyword-extern-as-identifier-pat.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/feb48f334d29a22f2e3ae3b322af081b42fafc60/src%2Ftest%2Fui%2Fkeyword%2Fextern%2Fkeyword-extern-as-identifier-pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/feb48f334d29a22f2e3ae3b322af081b42fafc60/src%2Ftest%2Fui%2Fkeyword%2Fextern%2Fkeyword-extern-as-identifier-pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fkeyword%2Fextern%2Fkeyword-extern-as-identifier-pat.rs?ref=feb48f334d29a22f2e3ae3b322af081b42fafc60", "patch": "@@ -0,0 +1,3 @@\n+fn main() {\n+    let extern = 0; //~ ERROR expected pattern, found keyword `extern`\n+}"}, {"sha": "426b4eef0569c9cc0b8fae8ff9df55561aa50871", "filename": "src/test/ui/keyword/extern/keyword-extern-as-identifier-pat.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/feb48f334d29a22f2e3ae3b322af081b42fafc60/src%2Ftest%2Fui%2Fkeyword%2Fextern%2Fkeyword-extern-as-identifier-pat.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/feb48f334d29a22f2e3ae3b322af081b42fafc60/src%2Ftest%2Fui%2Fkeyword%2Fextern%2Fkeyword-extern-as-identifier-pat.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fkeyword%2Fextern%2Fkeyword-extern-as-identifier-pat.stderr?ref=feb48f334d29a22f2e3ae3b322af081b42fafc60", "patch": "@@ -0,0 +1,8 @@\n+error: expected pattern, found keyword `extern`\n+  --> $DIR/keyword-extern-as-identifier-pat.rs:2:9\n+   |\n+LL |     let extern = 0; //~ ERROR expected pattern, found keyword `extern`\n+   |         ^^^^^^ expected pattern\n+\n+error: aborting due to previous error\n+"}, {"sha": "3845a9aa017cedb58294f8adb15c4414e8c7d499", "filename": "src/test/ui/keyword/extern/keyword-extern-as-identifier-type.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/feb48f334d29a22f2e3ae3b322af081b42fafc60/src%2Ftest%2Fui%2Fkeyword%2Fextern%2Fkeyword-extern-as-identifier-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/feb48f334d29a22f2e3ae3b322af081b42fafc60/src%2Ftest%2Fui%2Fkeyword%2Fextern%2Fkeyword-extern-as-identifier-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fkeyword%2Fextern%2Fkeyword-extern-as-identifier-type.rs?ref=feb48f334d29a22f2e3ae3b322af081b42fafc60", "patch": "@@ -0,0 +1,3 @@\n+type A = extern::foo::bar; //~ ERROR expected `fn`, found `::`\n+\n+fn main() {}"}, {"sha": "97b641fbea55770e10d16e348fea75b52f81f356", "filename": "src/test/ui/keyword/extern/keyword-extern-as-identifier-type.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/feb48f334d29a22f2e3ae3b322af081b42fafc60/src%2Ftest%2Fui%2Fkeyword%2Fextern%2Fkeyword-extern-as-identifier-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/feb48f334d29a22f2e3ae3b322af081b42fafc60/src%2Ftest%2Fui%2Fkeyword%2Fextern%2Fkeyword-extern-as-identifier-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fkeyword%2Fextern%2Fkeyword-extern-as-identifier-type.stderr?ref=feb48f334d29a22f2e3ae3b322af081b42fafc60", "patch": "@@ -0,0 +1,8 @@\n+error: expected `fn`, found `::`\n+  --> $DIR/keyword-extern-as-identifier-type.rs:1:16\n+   |\n+LL | type A = extern::foo::bar; //~ ERROR expected `fn`, found `::`\n+   |                ^^ expected `fn` here\n+\n+error: aborting due to previous error\n+"}, {"sha": "b07de3e341c41b486184b3c8827f51affc4dd8a3", "filename": "src/test/ui/keyword/extern/keyword-extern-as-identifier-use.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/feb48f334d29a22f2e3ae3b322af081b42fafc60/src%2Ftest%2Fui%2Fkeyword%2Fextern%2Fkeyword-extern-as-identifier-use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/feb48f334d29a22f2e3ae3b322af081b42fafc60/src%2Ftest%2Fui%2Fkeyword%2Fextern%2Fkeyword-extern-as-identifier-use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fkeyword%2Fextern%2Fkeyword-extern-as-identifier-use.rs?ref=feb48f334d29a22f2e3ae3b322af081b42fafc60", "patch": "@@ -0,0 +1,3 @@\n+use extern::foo; //~ ERROR expected identifier, found keyword `extern`\n+\n+fn main() {}"}, {"sha": "31b575a92e0c86a0c389f33171882a5751467769", "filename": "src/test/ui/keyword/extern/keyword-extern-as-identifier-use.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/feb48f334d29a22f2e3ae3b322af081b42fafc60/src%2Ftest%2Fui%2Fkeyword%2Fextern%2Fkeyword-extern-as-identifier-use.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/feb48f334d29a22f2e3ae3b322af081b42fafc60/src%2Ftest%2Fui%2Fkeyword%2Fextern%2Fkeyword-extern-as-identifier-use.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fkeyword%2Fextern%2Fkeyword-extern-as-identifier-use.stderr?ref=feb48f334d29a22f2e3ae3b322af081b42fafc60", "patch": "@@ -0,0 +1,12 @@\n+error: expected identifier, found keyword `extern`\n+  --> $DIR/keyword-extern-as-identifier-use.rs:1:5\n+   |\n+LL | use extern::foo; //~ ERROR expected identifier, found keyword `extern`\n+   |     ^^^^^^ expected identifier, found keyword\n+help: you can escape reserved keywords to use them as identifiers\n+   |\n+LL | use r#extern::foo; //~ ERROR expected identifier, found keyword `extern`\n+   |     ^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "6775290a26bd5a1325e44947e32e7841f8c22513", "filename": "src/test/ui/keyword/keyword-extern-as-identifier.rs", "status": "removed", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2e1094429d3b122fa6805760180dbd45ad5d1500/src%2Ftest%2Fui%2Fkeyword%2Fkeyword-extern-as-identifier.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e1094429d3b122fa6805760180dbd45ad5d1500/src%2Ftest%2Fui%2Fkeyword%2Fkeyword-extern-as-identifier.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fkeyword%2Fkeyword-extern-as-identifier.rs?ref=2e1094429d3b122fa6805760180dbd45ad5d1500", "patch": "@@ -1,5 +0,0 @@\n-#![feature(extern_in_paths)]\n-\n-fn main() {\n-    let extern = 0; //~ ERROR cannot find unit struct/variant or constant `extern` in this scope\n-}"}, {"sha": "ef2a4b3ff3c3017b19b7ca2c1e92468f0b3e2306", "filename": "src/test/ui/keyword/keyword-extern-as-identifier.stderr", "status": "removed", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2e1094429d3b122fa6805760180dbd45ad5d1500/src%2Ftest%2Fui%2Fkeyword%2Fkeyword-extern-as-identifier.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2e1094429d3b122fa6805760180dbd45ad5d1500/src%2Ftest%2Fui%2Fkeyword%2Fkeyword-extern-as-identifier.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fkeyword%2Fkeyword-extern-as-identifier.stderr?ref=2e1094429d3b122fa6805760180dbd45ad5d1500", "patch": "@@ -1,9 +0,0 @@\n-error[E0531]: cannot find unit struct/variant or constant `extern` in this scope\n-  --> $DIR/keyword-extern-as-identifier.rs:4:9\n-   |\n-LL |     let extern = 0; //~ ERROR cannot find unit struct/variant or constant `extern` in this scope\n-   |         ^^^^^^ not found in this scope\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0531`."}, {"sha": "c4d444764457749349cde3fa58e13125656f32a7", "filename": "src/test/ui/rfc-2126-extern-in-paths/auxiliary/xcrate.rs", "status": "removed", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2e1094429d3b122fa6805760180dbd45ad5d1500/src%2Ftest%2Fui%2Frfc-2126-extern-in-paths%2Fauxiliary%2Fxcrate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e1094429d3b122fa6805760180dbd45ad5d1500/src%2Ftest%2Fui%2Frfc-2126-extern-in-paths%2Fauxiliary%2Fxcrate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2126-extern-in-paths%2Fauxiliary%2Fxcrate.rs?ref=2e1094429d3b122fa6805760180dbd45ad5d1500", "patch": "@@ -1,5 +0,0 @@\n-#[derive(Debug)]\n-pub struct S;\n-\n-#[derive(Debug)]\n-pub struct Z;"}, {"sha": "5e5e6c6eebfad087d20d73d23fe104d193648d65", "filename": "src/test/ui/rfc-2126-extern-in-paths/non-existent-1.rs", "status": "removed", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2e1094429d3b122fa6805760180dbd45ad5d1500/src%2Ftest%2Fui%2Frfc-2126-extern-in-paths%2Fnon-existent-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e1094429d3b122fa6805760180dbd45ad5d1500/src%2Ftest%2Fui%2Frfc-2126-extern-in-paths%2Fnon-existent-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2126-extern-in-paths%2Fnon-existent-1.rs?ref=2e1094429d3b122fa6805760180dbd45ad5d1500", "patch": "@@ -1,5 +0,0 @@\n-#![feature(extern_in_paths)]\n-\n-use extern::xcrate::S; //~ ERROR unresolved import `extern::xcrate`\n-\n-fn main() {}"}, {"sha": "5b7528c2ed9aa031d6730d3691cbb977fd7ab5ba", "filename": "src/test/ui/rfc-2126-extern-in-paths/non-existent-1.stderr", "status": "removed", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2e1094429d3b122fa6805760180dbd45ad5d1500/src%2Ftest%2Fui%2Frfc-2126-extern-in-paths%2Fnon-existent-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2e1094429d3b122fa6805760180dbd45ad5d1500/src%2Ftest%2Fui%2Frfc-2126-extern-in-paths%2Fnon-existent-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2126-extern-in-paths%2Fnon-existent-1.stderr?ref=2e1094429d3b122fa6805760180dbd45ad5d1500", "patch": "@@ -1,9 +0,0 @@\n-error[E0432]: unresolved import `extern::xcrate`\n-  --> $DIR/non-existent-1.rs:3:13\n-   |\n-LL | use extern::xcrate::S; //~ ERROR unresolved import `extern::xcrate`\n-   |             ^^^^^^ could not find `xcrate` in `extern`\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0432`."}, {"sha": "0f26eef5d7e1b4bd00ddf2ae544e0ccf76b6f9b9", "filename": "src/test/ui/rfc-2126-extern-in-paths/non-existent-2.rs", "status": "removed", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2e1094429d3b122fa6805760180dbd45ad5d1500/src%2Ftest%2Fui%2Frfc-2126-extern-in-paths%2Fnon-existent-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e1094429d3b122fa6805760180dbd45ad5d1500/src%2Ftest%2Fui%2Frfc-2126-extern-in-paths%2Fnon-existent-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2126-extern-in-paths%2Fnon-existent-2.rs?ref=2e1094429d3b122fa6805760180dbd45ad5d1500", "patch": "@@ -1,6 +0,0 @@\n-#![feature(extern_in_paths)]\n-\n-fn main() {\n-    let s = extern::xcrate::S;\n-    //~^ ERROR failed to resolve: could not find `xcrate` in `extern`\n-}"}, {"sha": "21c2a0c14d60180712e80090787f64945a4a4f68", "filename": "src/test/ui/rfc-2126-extern-in-paths/non-existent-2.stderr", "status": "removed", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2e1094429d3b122fa6805760180dbd45ad5d1500/src%2Ftest%2Fui%2Frfc-2126-extern-in-paths%2Fnon-existent-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2e1094429d3b122fa6805760180dbd45ad5d1500/src%2Ftest%2Fui%2Frfc-2126-extern-in-paths%2Fnon-existent-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2126-extern-in-paths%2Fnon-existent-2.stderr?ref=2e1094429d3b122fa6805760180dbd45ad5d1500", "patch": "@@ -1,9 +0,0 @@\n-error[E0433]: failed to resolve: could not find `xcrate` in `extern`\n-  --> $DIR/non-existent-2.rs:4:21\n-   |\n-LL |     let s = extern::xcrate::S;\n-   |                     ^^^^^^ could not find `xcrate` in `extern`\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0433`."}, {"sha": "1875fb99fe893562792bdc174da54a0b535dc6e7", "filename": "src/test/ui/rfc-2126-extern-in-paths/non-existent-3.rs", "status": "removed", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2e1094429d3b122fa6805760180dbd45ad5d1500/src%2Ftest%2Fui%2Frfc-2126-extern-in-paths%2Fnon-existent-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e1094429d3b122fa6805760180dbd45ad5d1500/src%2Ftest%2Fui%2Frfc-2126-extern-in-paths%2Fnon-existent-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2126-extern-in-paths%2Fnon-existent-3.rs?ref=2e1094429d3b122fa6805760180dbd45ad5d1500", "patch": "@@ -1,5 +0,0 @@\n-#![feature(extern_in_paths)]\n-\n-use extern::ycrate; //~ ERROR unresolved import `extern::ycrate`\n-\n-fn main() {}"}, {"sha": "e2e7df648c62cd568b7e85e95215850ef589397e", "filename": "src/test/ui/rfc-2126-extern-in-paths/non-existent-3.stderr", "status": "removed", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2e1094429d3b122fa6805760180dbd45ad5d1500/src%2Ftest%2Fui%2Frfc-2126-extern-in-paths%2Fnon-existent-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2e1094429d3b122fa6805760180dbd45ad5d1500/src%2Ftest%2Fui%2Frfc-2126-extern-in-paths%2Fnon-existent-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2126-extern-in-paths%2Fnon-existent-3.stderr?ref=2e1094429d3b122fa6805760180dbd45ad5d1500", "patch": "@@ -1,9 +0,0 @@\n-error[E0432]: unresolved import `extern::ycrate`\n-  --> $DIR/non-existent-3.rs:3:5\n-   |\n-LL | use extern::ycrate; //~ ERROR unresolved import `extern::ycrate`\n-   |     ^^^^^^^^^^^^^^ no `ycrate` external crate\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0432`."}, {"sha": "1d5af1e9d8636e2a862ccf5fd59c08ba2f1ee2ba", "filename": "src/test/ui/rfc-2126-extern-in-paths/single-segment.rs", "status": "removed", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/2e1094429d3b122fa6805760180dbd45ad5d1500/src%2Ftest%2Fui%2Frfc-2126-extern-in-paths%2Fsingle-segment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e1094429d3b122fa6805760180dbd45ad5d1500/src%2Ftest%2Fui%2Frfc-2126-extern-in-paths%2Fsingle-segment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2126-extern-in-paths%2Fsingle-segment.rs?ref=2e1094429d3b122fa6805760180dbd45ad5d1500", "patch": "@@ -1,13 +0,0 @@\n-// aux-build:xcrate.rs\n-// compile-flags:--extern xcrate\n-\n-#![feature(extern_in_paths)]\n-\n-use extern; //~ ERROR unresolved import `extern`\n-            //~^ NOTE no `extern` in the root\n-use extern::*; //~ ERROR cannot glob-import all possible crates\n-\n-fn main() {\n-    let s = extern::xcrate; //~ ERROR expected value, found module `extern::xcrate`\n-                            //~^ NOTE not a value\n-}"}, {"sha": "2d8ecd48d4825feb0629c69cee8cf2d9f892c822", "filename": "src/test/ui/rfc-2126-extern-in-paths/single-segment.stderr", "status": "removed", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/2e1094429d3b122fa6805760180dbd45ad5d1500/src%2Ftest%2Fui%2Frfc-2126-extern-in-paths%2Fsingle-segment.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2e1094429d3b122fa6805760180dbd45ad5d1500/src%2Ftest%2Fui%2Frfc-2126-extern-in-paths%2Fsingle-segment.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2126-extern-in-paths%2Fsingle-segment.stderr?ref=2e1094429d3b122fa6805760180dbd45ad5d1500", "patch": "@@ -1,22 +0,0 @@\n-error: cannot glob-import all possible crates\n-  --> $DIR/single-segment.rs:8:5\n-   |\n-LL | use extern::*; //~ ERROR cannot glob-import all possible crates\n-   |     ^^^^^^^^^\n-\n-error[E0432]: unresolved import `extern`\n-  --> $DIR/single-segment.rs:6:5\n-   |\n-LL | use extern; //~ ERROR unresolved import `extern`\n-   |     ^^^^^^ no `extern` in the root\n-\n-error[E0423]: expected value, found module `extern::xcrate`\n-  --> $DIR/single-segment.rs:11:13\n-   |\n-LL |     let s = extern::xcrate; //~ ERROR expected value, found module `extern::xcrate`\n-   |             ^^^^^^^^^^^^^^ not a value\n-\n-error: aborting due to 3 previous errors\n-\n-Some errors occurred: E0423, E0432.\n-For more information about an error, try `rustc --explain E0423`."}]}