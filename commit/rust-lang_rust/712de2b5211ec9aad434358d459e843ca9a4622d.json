{"sha": "712de2b5211ec9aad434358d459e843ca9a4622d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcxMmRlMmI1MjExZWM5YWFkNDM0MzU4ZDQ1OWU4NDNjYTlhNDYyMmQ=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2020-07-22T09:28:17Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2020-08-06T19:13:11Z"}, "message": "rustc_expand: Don not beautify doc comments before passing them to macros\n\nBeautify all doc strings in rustdoc instead, including those in `#[doc]` attributes", "tree": {"sha": "9dd9fc5fc54d018b0094a6670ec644251157247a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9dd9fc5fc54d018b0094a6670ec644251157247a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/712de2b5211ec9aad434358d459e843ca9a4622d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/712de2b5211ec9aad434358d459e843ca9a4622d", "html_url": "https://github.com/rust-lang/rust/commit/712de2b5211ec9aad434358d459e843ca9a4622d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/712de2b5211ec9aad434358d459e843ca9a4622d/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "000c070b70eba07a903db82fb8505433842fe1f1", "url": "https://api.github.com/repos/rust-lang/rust/commits/000c070b70eba07a903db82fb8505433842fe1f1", "html_url": "https://github.com/rust-lang/rust/commit/000c070b70eba07a903db82fb8505433842fe1f1"}], "stats": {"total": 91, "additions": 37, "deletions": 54}, "files": [{"sha": "a73891db160de9739222c96330d032732e828a3d", "filename": "src/librustc_ast/util/comments.rs", "status": "modified", "additions": 11, "deletions": 14, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/712de2b5211ec9aad434358d459e843ca9a4622d/src%2Flibrustc_ast%2Futil%2Fcomments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/712de2b5211ec9aad434358d459e843ca9a4622d/src%2Flibrustc_ast%2Futil%2Fcomments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast%2Futil%2Fcomments.rs?ref=712de2b5211ec9aad434358d459e843ca9a4622d", "patch": "@@ -1,5 +1,4 @@\n use crate::ast::AttrStyle;\n-use crate::token::CommentKind;\n use rustc_span::source_map::SourceMap;\n use rustc_span::{BytePos, CharPos, FileName, Pos, Symbol};\n \n@@ -64,7 +63,9 @@ pub fn block_doc_comment_style(block_comment: &str, terminated: bool) -> Option<\n     }\n }\n \n-pub fn strip_doc_comment_decoration(data: Symbol, comment_kind: CommentKind) -> String {\n+/// Makes a doc string more presentable to users.\n+/// Used by rustdoc and perhaps other tools, but not by rustc.\n+pub fn beautify_doc_string(data: Symbol) -> String {\n     /// remove whitespace-only lines from the start/end of lines\n     fn vertical_trim(lines: Vec<String>) -> Vec<String> {\n         let mut i = 0;\n@@ -126,18 +127,14 @@ pub fn strip_doc_comment_decoration(data: Symbol, comment_kind: CommentKind) ->\n         }\n     }\n \n-    match comment_kind {\n-        CommentKind::Line => {\n-            let data = data.as_str();\n-            let prefix_len = if data.starts_with('!') { 1 } else { 0 };\n-            data[prefix_len..].to_string()\n-        }\n-        CommentKind::Block => {\n-            let lines = data.as_str().lines().map(|s| s.to_string()).collect::<Vec<String>>();\n-            let lines = vertical_trim(lines);\n-            let lines = horizontal_trim(lines);\n-            lines.join(\"\\n\")\n-        }\n+    let data = data.as_str();\n+    if data.contains('\\n') {\n+        let lines = data.lines().map(|s| s.to_string()).collect::<Vec<String>>();\n+        let lines = vertical_trim(lines);\n+        let lines = horizontal_trim(lines);\n+        lines.join(\"\\n\")\n+    } else {\n+        data.to_string()\n     }\n }\n "}, {"sha": "e95365d833742e87f4de2bd2a56fcb4fa8f6843c", "filename": "src/librustc_ast/util/comments/tests.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/712de2b5211ec9aad434358d459e843ca9a4622d/src%2Flibrustc_ast%2Futil%2Fcomments%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/712de2b5211ec9aad434358d459e843ca9a4622d/src%2Flibrustc_ast%2Futil%2Fcomments%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast%2Futil%2Fcomments%2Ftests.rs?ref=712de2b5211ec9aad434358d459e843ca9a4622d", "patch": "@@ -12,7 +12,7 @@ fn line_doc_comments() {\n fn test_block_doc_comment_1() {\n     with_default_session_globals(|| {\n         let comment = \"\\n * Test \\n **  Test\\n *   Test\\n\";\n-        let stripped = strip_doc_comment_decoration(Symbol::intern(comment), CommentKind::Block);\n+        let stripped = beautify_doc_string(Symbol::intern(comment));\n         assert_eq!(stripped, \" Test \\n*  Test\\n   Test\");\n     })\n }\n@@ -21,7 +21,7 @@ fn test_block_doc_comment_1() {\n fn test_block_doc_comment_2() {\n     with_default_session_globals(|| {\n         let comment = \"\\n * Test\\n *  Test\\n\";\n-        let stripped = strip_doc_comment_decoration(Symbol::intern(comment), CommentKind::Block);\n+        let stripped = beautify_doc_string(Symbol::intern(comment));\n         assert_eq!(stripped, \" Test\\n  Test\");\n     })\n }\n@@ -30,21 +30,21 @@ fn test_block_doc_comment_2() {\n fn test_block_doc_comment_3() {\n     with_default_session_globals(|| {\n         let comment = \"\\n let a: *i32;\\n *a = 5;\\n\";\n-        let stripped = strip_doc_comment_decoration(Symbol::intern(comment), CommentKind::Block);\n+        let stripped = beautify_doc_string(Symbol::intern(comment));\n         assert_eq!(stripped, \" let a: *i32;\\n *a = 5;\");\n     })\n }\n \n #[test]\n fn test_line_doc_comment() {\n     with_default_session_globals(|| {\n-        let stripped = strip_doc_comment_decoration(Symbol::intern(\" test\"), CommentKind::Line);\n+        let stripped = beautify_doc_string(Symbol::intern(\" test\"));\n         assert_eq!(stripped, \" test\");\n-        let stripped = strip_doc_comment_decoration(Symbol::intern(\"! test\"), CommentKind::Line);\n-        assert_eq!(stripped, \" test\");\n-        let stripped = strip_doc_comment_decoration(Symbol::intern(\"test\"), CommentKind::Line);\n-        assert_eq!(stripped, \"test\");\n-        let stripped = strip_doc_comment_decoration(Symbol::intern(\"!test\"), CommentKind::Line);\n+        let stripped = beautify_doc_string(Symbol::intern(\"! test\"));\n+        assert_eq!(stripped, \"! test\");\n+        let stripped = beautify_doc_string(Symbol::intern(\"test\"));\n         assert_eq!(stripped, \"test\");\n+        let stripped = beautify_doc_string(Symbol::intern(\"!test\"));\n+        assert_eq!(stripped, \"!test\");\n     })\n }"}, {"sha": "005db35da7a323fbea5fe4a262817878a2522f08", "filename": "src/librustc_expand/proc_macro_server.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/712de2b5211ec9aad434358d459e843ca9a4622d/src%2Flibrustc_expand%2Fproc_macro_server.rs", "raw_url": "https://github.com/rust-lang/rust/raw/712de2b5211ec9aad434358d459e843ca9a4622d/src%2Flibrustc_expand%2Fproc_macro_server.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Fproc_macro_server.rs?ref=712de2b5211ec9aad434358d459e843ca9a4622d", "patch": "@@ -3,7 +3,6 @@ use crate::base::ExtCtxt;\n use rustc_ast::ast;\n use rustc_ast::token;\n use rustc_ast::tokenstream::{self, DelimSpan, IsJoint::*, TokenStream, TreeAndJoint};\n-use rustc_ast::util::comments;\n use rustc_ast_pretty::pprust;\n use rustc_data_structures::sync::Lrc;\n use rustc_errors::Diagnostic;\n@@ -148,10 +147,9 @@ impl FromInternal<(TreeAndJoint, &'_ ParseSess, &'_ mut Vec<Self>)>\n                 tt!(Punct::new('\\'', true))\n             }\n             Literal(lit) => tt!(Literal { lit }),\n-            DocComment(comment_kind, attr_style, data) => {\n-                let stripped = comments::strip_doc_comment_decoration(data, comment_kind);\n+            DocComment(_, attr_style, data) => {\n                 let mut escaped = String::new();\n-                for ch in stripped.chars() {\n+                for ch in data.as_str().chars() {\n                     escaped.extend(ch.escape_debug());\n                 }\n                 let stream = vec!["}, {"sha": "ededfc43669da29b587b8b2330c48a426592d816", "filename": "src/librustc_parse/parser/mod.rs", "status": "modified", "additions": 5, "deletions": 11, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/712de2b5211ec9aad434358d459e843ca9a4622d/src%2Flibrustc_parse%2Fparser%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/712de2b5211ec9aad434358d459e843ca9a4622d/src%2Flibrustc_parse%2Fparser%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fmod.rs?ref=712de2b5211ec9aad434358d459e843ca9a4622d", "patch": "@@ -22,7 +22,6 @@ use rustc_ast::ast::{\n use rustc_ast::ptr::P;\n use rustc_ast::token::{self, DelimToken, Token, TokenKind};\n use rustc_ast::tokenstream::{self, DelimSpan, TokenStream, TokenTree, TreeAndJoint};\n-use rustc_ast::util::comments::strip_doc_comment_decoration;\n use rustc_ast_pretty::pprust;\n use rustc_errors::{struct_span_err, Applicability, DiagnosticBuilder, FatalError, PResult};\n use rustc_session::parse::ParseSess;\n@@ -209,20 +208,18 @@ impl TokenCursor {\n     }\n \n     fn next_desugared(&mut self) -> Token {\n-        let (data, comment_kind, attr_style, sp) = match self.next() {\n-            Token { kind: token::DocComment(comment_kind, attr_style, data), span } => {\n-                (data, comment_kind, attr_style, span)\n+        let (data, attr_style, sp) = match self.next() {\n+            Token { kind: token::DocComment(_, attr_style, data), span } => {\n+                (data, attr_style, span)\n             }\n             tok => return tok,\n         };\n \n-        let stripped = strip_doc_comment_decoration(data, comment_kind);\n-\n         // Searches for the occurrences of `\"#*` and returns the minimum number of `#`s\n         // required to wrap the text.\n         let mut num_of_hashes = 0;\n         let mut count = 0;\n-        for ch in stripped.chars() {\n+        for ch in data.as_str().chars() {\n             count = match ch {\n                 '\"' => 1,\n                 '#' if count > 0 => count + 1,\n@@ -238,10 +235,7 @@ impl TokenCursor {\n             [\n                 TokenTree::token(token::Ident(sym::doc, false), sp),\n                 TokenTree::token(token::Eq, sp),\n-                TokenTree::token(\n-                    TokenKind::lit(token::StrRaw(num_of_hashes), Symbol::intern(&stripped), None),\n-                    sp,\n-                ),\n+                TokenTree::token(TokenKind::lit(token::StrRaw(num_of_hashes), data, None), sp),\n             ]\n             .iter()\n             .cloned()"}, {"sha": "d854835a02475fe0e1be8630b846e9d4232ca014", "filename": "src/librustc_save_analysis/lib.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/712de2b5211ec9aad434358d459e843ca9a4622d/src%2Flibrustc_save_analysis%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/712de2b5211ec9aad434358d459e843ca9a4622d/src%2Flibrustc_save_analysis%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Flib.rs?ref=712de2b5211ec9aad434358d459e843ca9a4622d", "patch": "@@ -10,7 +10,7 @@ mod span_utils;\n mod sig;\n \n use rustc_ast::ast::{self};\n-use rustc_ast::util::comments::strip_doc_comment_decoration;\n+use rustc_ast::util::comments::beautify_doc_string;\n use rustc_ast_pretty::pprust::attribute_to_string;\n use rustc_hir as hir;\n use rustc_hir::def::{DefKind as HirDefKind, Res};\n@@ -822,11 +822,8 @@ impl<'tcx> SaveContext<'tcx> {\n \n         for attr in attrs {\n             if let Some(val) = attr.doc_str() {\n-                if let ast::AttrKind::DocComment(comment_kind, _) = attr.kind {\n-                    result.push_str(&strip_doc_comment_decoration(val, comment_kind));\n-                } else {\n-                    result.push_str(&val.as_str());\n-                }\n+                // FIXME: Should save-analysis beautify doc strings itself or leave it to users?\n+                result.push_str(&beautify_doc_string(val));\n                 result.push('\\n');\n             } else if attr.check_name(sym::doc) {\n                 if let Some(meta_list) = attr.meta_item_list() {"}, {"sha": "44dd329d9ced3d4ff5a7900e71c94752b1eb9495", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/712de2b5211ec9aad434358d459e843ca9a4622d/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/712de2b5211ec9aad434358d459e843ca9a4622d/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=712de2b5211ec9aad434358d459e843ca9a4622d", "patch": "@@ -10,7 +10,7 @@ use std::{slice, vec};\n \n use rustc_ast::ast::{self, AttrStyle};\n use rustc_ast::attr;\n-use rustc_ast::util::comments::strip_doc_comment_decoration;\n+use rustc_ast::util::comments::beautify_doc_string;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_hir as hir;\n use rustc_hir::def::Res;\n@@ -506,15 +506,12 @@ impl Attributes {\n             .iter()\n             .filter_map(|attr| {\n                 if let Some(value) = attr.doc_str() {\n-                    let (value, mk_fragment): (_, fn(_, _, _) -> _) =\n-                        if let ast::AttrKind::DocComment(comment_kind, _) = attr.kind {\n-                            (\n-                                strip_doc_comment_decoration(value, comment_kind),\n-                                DocFragment::SugaredDoc,\n-                            )\n-                        } else {\n-                            (value.to_string(), DocFragment::RawDoc)\n-                        };\n+                    let value = beautify_doc_string(value);\n+                    let mk_fragment: fn(_, _, _) -> _ = if attr.is_doc_comment() {\n+                        DocFragment::SugaredDoc\n+                    } else {\n+                        DocFragment::RawDoc\n+                    };\n \n                     let line = doc_line;\n                     doc_line += value.lines().count();"}]}