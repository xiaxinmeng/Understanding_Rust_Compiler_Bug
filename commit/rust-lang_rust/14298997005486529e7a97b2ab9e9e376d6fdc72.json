{"sha": "14298997005486529e7a97b2ab9e9e376d6fdc72", "node_id": "C_kwDOAAsO6NoAKDE0Mjk4OTk3MDA1NDg2NTI5ZTdhOTdiMmFiOWU5ZTM3NmQ2ZmRjNzI", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-01-05T06:47:02Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-01-05T06:47:02Z"}, "message": "Auto merge of #106482 - compiler-errors:rollup-g7n1p39, r=compiler-errors\n\nRollup of 6 pull requests\n\nSuccessful merges:\n\n - #105846 (Account for return-position `impl Trait` in trait in `opt_suggest_box_span`)\n - #106385 (Split `-Zchalk` flag into `-Ztrait-solver=(classic|chalk|next)` flag)\n - #106403 (Rename `hir::Map::{get_,find_}parent_node` to `hir::Map::{,opt_}parent_id`, and add `hir::Map::{get,find}_parent`)\n - #106462 (rustdoc: remove unnecessary wrapper around sidebar and mobile logos)\n - #106464 (Update Fuchsia walkthrough with new configs)\n - #106478 (Tweak wording of fn call with wrong number of args)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "c199eeffdc7012019b255c2ec3d44b7b7f2eb452", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c199eeffdc7012019b255c2ec3d44b7b7f2eb452"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/14298997005486529e7a97b2ab9e9e376d6fdc72", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/14298997005486529e7a97b2ab9e9e376d6fdc72", "html_url": "https://github.com/rust-lang/rust/commit/14298997005486529e7a97b2ab9e9e376d6fdc72", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/14298997005486529e7a97b2ab9e9e376d6fdc72/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "03b9e1d154ecf8e04656fdf0179a28cd8ef333c5", "url": "https://api.github.com/repos/rust-lang/rust/commits/03b9e1d154ecf8e04656fdf0179a28cd8ef333c5", "html_url": "https://github.com/rust-lang/rust/commit/03b9e1d154ecf8e04656fdf0179a28cd8ef333c5"}, {"sha": "e048ee2ac1c65fa928e7d1c5f8a538440ddb0014", "url": "https://api.github.com/repos/rust-lang/rust/commits/e048ee2ac1c65fa928e7d1c5f8a538440ddb0014", "html_url": "https://github.com/rust-lang/rust/commit/e048ee2ac1c65fa928e7d1c5f8a538440ddb0014"}], "stats": {"total": 870, "additions": 478, "deletions": 392}, "files": [{"sha": "492c8d02012671e28d80b83741f83b8faa953513", "filename": "compiler/rustc_borrowck/src/diagnostics/conflict_errors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14298997005486529e7a97b2ab9e9e376d6fdc72/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14298997005486529e7a97b2ab9e9e376d6fdc72/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs?ref=14298997005486529e7a97b2ab9e9e376d6fdc72", "patch": "@@ -394,7 +394,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                     }\n                 }\n                 let typeck = self.infcx.tcx.typeck(self.mir_def_id());\n-                let hir_id = hir.get_parent_node(expr.hir_id);\n+                let hir_id = hir.parent_id(expr.hir_id);\n                 if let Some(parent) = hir.find(hir_id) {\n                     let (def_id, args, offset) = if let hir::Node::Expr(parent_expr) = parent\n                         && let hir::ExprKind::MethodCall(_, _, args, _) = parent_expr.kind"}, {"sha": "c022fb55a16f75d3e491d4043fd5697a326d9e68", "filename": "compiler/rustc_borrowck/src/diagnostics/mutability_errors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14298997005486529e7a97b2ab9e9e376d6fdc72/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmutability_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14298997005486529e7a97b2ab9e9e376d6fdc72/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmutability_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmutability_errors.rs?ref=14298997005486529e7a97b2ab9e9e376d6fdc72", "patch": "@@ -1004,7 +1004,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n         let hir = self.infcx.tcx.hir();\n         let closure_id = self.mir_hir_id();\n         let closure_span = self.infcx.tcx.def_span(self.mir_def_id());\n-        let fn_call_id = hir.get_parent_node(closure_id);\n+        let fn_call_id = hir.parent_id(closure_id);\n         let node = hir.get(fn_call_id);\n         let def_id = hir.enclosing_body_owner(fn_call_id);\n         let mut look_at_return = true;"}, {"sha": "0a90572d39e30cec6545b4124ea30dd5820e3cba", "filename": "compiler/rustc_const_eval/src/transform/check_consts/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14298997005486529e7a97b2ab9e9e376d6fdc72/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14298997005486529e7a97b2ab9e9e376d6fdc72/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fmod.rs?ref=14298997005486529e7a97b2ab9e9e376d6fdc72", "patch": "@@ -115,7 +115,7 @@ fn is_parent_const_stable_trait(tcx: TyCtxt<'_>, def_id: DefId) -> bool {\n     let local_def_id = def_id.expect_local();\n     let hir_id = tcx.local_def_id_to_hir_id(local_def_id);\n \n-    let Some(parent) = tcx.hir().find_parent_node(hir_id) else { return false };\n+    let Some(parent) = tcx.hir().opt_parent_id(hir_id) else { return false };\n     let parent_def = tcx.hir().get(parent);\n \n     if !matches!("}, {"sha": "bc897ed8112e59e5659dde99527a1452abae6be2", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14298997005486529e7a97b2ab9e9e376d6fdc72/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14298997005486529e7a97b2ab9e9e376d6fdc72/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=14298997005486529e7a97b2ab9e9e376d6fdc72", "patch": "@@ -3460,7 +3460,7 @@ impl<'hir> Node<'hir> {\n     /// ```ignore (illustrative)\n     /// ctor\n     ///     .ctor_hir_id()\n-    ///     .and_then(|ctor_id| tcx.hir().find(tcx.hir().get_parent_node(ctor_id)))\n+    ///     .and_then(|ctor_id| tcx.hir().find_parent(ctor_id))\n     ///     .and_then(|parent| parent.ident())\n     /// ```\n     pub fn ident(&self) -> Option<Ident> {"}, {"sha": "1b334f65b9ecc3db7c87de76942c6de04431c16b", "filename": "compiler/rustc_hir_analysis/src/astconv/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14298997005486529e7a97b2ab9e9e376d6fdc72/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14298997005486529e7a97b2ab9e9e376d6fdc72/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs?ref=14298997005486529e7a97b2ab9e9e376d6fdc72", "patch": "@@ -2936,7 +2936,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         let hir::Node::ImplItem(hir::ImplItem { kind: hir::ImplItemKind::Fn(..), ident, .. }) =\n             hir.get(fn_hir_id) else { return None };\n         let hir::Node::Item(hir::Item { kind: hir::ItemKind::Impl(i), .. }) =\n-                hir.get(hir.get_parent_node(fn_hir_id)) else { bug!(\"ImplItem should have Impl parent\") };\n+                hir.get_parent(fn_hir_id) else { bug!(\"ImplItem should have Impl parent\") };\n \n         let trait_ref = self.instantiate_mono_trait_ref(\n             i.of_trait.as_ref()?,"}, {"sha": "7afde550b42ad878d1e61bc299fdd8c041c27122", "filename": "compiler/rustc_hir_analysis/src/collect.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/14298997005486529e7a97b2ab9e9e376d6fdc72/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14298997005486529e7a97b2ab9e9e376d6fdc72/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect.rs?ref=14298997005486529e7a97b2ab9e9e376d6fdc72", "patch": "@@ -213,7 +213,7 @@ pub(crate) fn placeholder_type_error_diag<'tcx>(\n             is_fn = true;\n \n             // Check if parent is const or static\n-            let parent_id = tcx.hir().get_parent_node(hir_ty.hir_id);\n+            let parent_id = tcx.hir().parent_id(hir_ty.hir_id);\n             let parent_node = tcx.hir().get(parent_id);\n \n             is_const_or_static = matches!(\n@@ -1109,7 +1109,7 @@ fn fn_sig(tcx: TyCtxt<'_>, def_id: DefId) -> ty::PolyFnSig<'_> {\n         ImplItem(hir::ImplItem { kind: ImplItemKind::Fn(sig, _), generics, .. }) => {\n             // Do not try to infer the return type for a impl method coming from a trait\n             if let Item(hir::Item { kind: ItemKind::Impl(i), .. }) =\n-                tcx.hir().get(tcx.hir().get_parent_node(hir_id))\n+                tcx.hir().get_parent(hir_id)\n                 && i.of_trait.is_some()\n             {\n                 <dyn AstConv<'_>>::ty_of_fn("}, {"sha": "96221c3e3d86e1326c0ab330f7c847b820bb8ec1", "filename": "compiler/rustc_hir_analysis/src/collect/generics_of.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/14298997005486529e7a97b2ab9e9e376d6fdc72/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fgenerics_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14298997005486529e7a97b2ab9e9e376d6fdc72/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fgenerics_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fgenerics_of.rs?ref=14298997005486529e7a97b2ab9e9e376d6fdc72", "patch": "@@ -103,7 +103,7 @@ pub(super) fn generics_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::Generics {\n                 // `min_const_generics`.\n                 Some(parent_def_id.to_def_id())\n             } else {\n-                let parent_node = tcx.hir().get(tcx.hir().get_parent_node(hir_id));\n+                let parent_node = tcx.hir().get_parent(hir_id);\n                 match parent_node {\n                     // HACK(eddyb) this provides the correct generics for repeat\n                     // expressions' count (i.e. `N` in `[x; N]`), and explicit\n@@ -320,7 +320,7 @@ pub(super) fn generics_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::Generics {\n \n     // provide junk type parameter defs for const blocks.\n     if let Node::AnonConst(_) = node {\n-        let parent_node = tcx.hir().get(tcx.hir().get_parent_node(hir_id));\n+        let parent_node = tcx.hir().get_parent(hir_id);\n         if let Node::Expr(&Expr { kind: ExprKind::ConstBlock(_), .. }) = parent_node {\n             params.push(ty::GenericParamDef {\n                 index: next_index(),"}, {"sha": "0a1188c16a8ba4f3c3cb0f053a76968a1c5ac650", "filename": "compiler/rustc_hir_analysis/src/collect/lifetimes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14298997005486529e7a97b2ab9e9e376d6fdc72/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14298997005486529e7a97b2ab9e9e376d6fdc72/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Flifetimes.rs?ref=14298997005486529e7a97b2ab9e9e376d6fdc72", "patch": "@@ -682,7 +682,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                     };\n                     let hir_id = self.tcx.hir().local_def_id_to_hir_id(def_id);\n                     // Ensure that the parent of the def is an item, not HRTB\n-                    let parent_id = self.tcx.hir().get_parent_node(hir_id);\n+                    let parent_id = self.tcx.hir().parent_id(hir_id);\n                     if !parent_id.is_owner() {\n                         struct_span_err!(\n                             self.tcx.sess,"}, {"sha": "8412b7418b3aa956d56be7e91a4695d6d258d087", "filename": "compiler/rustc_hir_analysis/src/collect/predicates_of.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14298997005486529e7a97b2ab9e9e376d6fdc72/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fpredicates_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14298997005486529e7a97b2ab9e9e376d6fdc72/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fpredicates_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fpredicates_of.rs?ref=14298997005486529e7a97b2ab9e9e376d6fdc72", "patch": "@@ -270,7 +270,7 @@ fn gather_explicit_predicates_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::GenericP\n     // We create bi-directional Outlives predicates between the original\n     // and the duplicated parameter, to ensure that they do not get out of sync.\n     if let Node::Item(&Item { kind: ItemKind::OpaqueTy(..), .. }) = node {\n-        let opaque_ty_id = tcx.hir().get_parent_node(hir_id);\n+        let opaque_ty_id = tcx.hir().parent_id(hir_id);\n         let opaque_ty_node = tcx.hir().get(opaque_ty_id);\n         let Node::Ty(&Ty { kind: TyKind::OpaqueDef(_, lifetimes, _), .. }) = opaque_ty_node else {\n             bug!(\"unexpected {opaque_ty_node:?}\")"}, {"sha": "1f9a9f80302e3590957b9ef5a7d466ddfd860c1e", "filename": "compiler/rustc_hir_analysis/src/collect/type_of.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/14298997005486529e7a97b2ab9e9e376d6fdc72/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14298997005486529e7a97b2ab9e9e376d6fdc72/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Ftype_of.rs?ref=14298997005486529e7a97b2ab9e9e376d6fdc72", "patch": "@@ -28,7 +28,7 @@ pub(super) fn opt_const_param_of(tcx: TyCtxt<'_>, def_id: LocalDefId) -> Option<\n         _ => return None,\n     };\n \n-    let parent_node_id = tcx.hir().get_parent_node(hir_id);\n+    let parent_node_id = tcx.hir().parent_id(hir_id);\n     let parent_node = tcx.hir().get(parent_node_id);\n \n     let (generics, arg_idx) = match parent_node {\n@@ -402,7 +402,7 @@ pub(super) fn type_of(tcx: TyCtxt<'_>, def_id: DefId) -> Ty<'_> {\n         }\n \n         Node::AnonConst(_) => {\n-            let parent_node = tcx.hir().get(tcx.hir().get_parent_node(hir_id));\n+            let parent_node = tcx.hir().get_parent(hir_id);\n             match parent_node {\n                 Node::Ty(&Ty { kind: TyKind::Array(_, ref constant), .. })\n                 | Node::Expr(&Expr { kind: ExprKind::Repeat(_, ref constant), .. })\n@@ -445,7 +445,7 @@ pub(super) fn type_of(tcx: TyCtxt<'_>, def_id: DefId) -> Ty<'_> {\n                         ..\n                     },\n                 ) if let Node::TraitRef(trait_ref) =\n-                    tcx.hir().get(tcx.hir().get_parent_node(binding_id))\n+                    tcx.hir().get_parent(binding_id)\n                     && e.hir_id == hir_id =>\n                 {\n                     let Some(trait_def_id) = trait_ref.trait_def_id() else {\n@@ -472,7 +472,7 @@ pub(super) fn type_of(tcx: TyCtxt<'_>, def_id: DefId) -> Ty<'_> {\n                 Node::TypeBinding(\n                     binding @ &TypeBinding { hir_id: binding_id, gen_args, ref kind, .. },\n                 ) if let Node::TraitRef(trait_ref) =\n-                    tcx.hir().get(tcx.hir().get_parent_node(binding_id))\n+                    tcx.hir().get_parent(binding_id)\n                     && let Some((idx, _)) =\n                         gen_args.args.iter().enumerate().find(|(_, arg)| {\n                             if let GenericArg::Const(ct) = arg {"}, {"sha": "3df8f776eded66e41a1024e1162d2aa7b0318329", "filename": "compiler/rustc_hir_analysis/src/structured_errors/wrong_number_of_generic_args.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14298997005486529e7a97b2ab9e9e376d6fdc72/compiler%2Frustc_hir_analysis%2Fsrc%2Fstructured_errors%2Fwrong_number_of_generic_args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14298997005486529e7a97b2ab9e9e376d6fdc72/compiler%2Frustc_hir_analysis%2Fsrc%2Fstructured_errors%2Fwrong_number_of_generic_args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fstructured_errors%2Fwrong_number_of_generic_args.rs?ref=14298997005486529e7a97b2ab9e9e376d6fdc72", "patch": "@@ -716,7 +716,7 @@ impl<'a, 'tcx> WrongNumberOfGenericArgs<'a, 'tcx> {\n             num = num_trait_generics_except_self,\n         );\n \n-        if let Some(parent_node) = self.tcx.hir().find_parent_node(self.path_segment.hir_id)\n+        if let Some(parent_node) = self.tcx.hir().opt_parent_id(self.path_segment.hir_id)\n         && let Some(parent_node) = self.tcx.hir().find(parent_node)\n         && let hir::Node::Expr(expr) = parent_node {\n             match expr.kind {"}, {"sha": "b47a5cf993b43ba5d31580196ebfb667b7dd38e8", "filename": "compiler/rustc_hir_typeck/src/_match.rs", "status": "modified", "additions": 13, "deletions": 8, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/14298997005486529e7a97b2ab9e9e376d6fdc72/compiler%2Frustc_hir_typeck%2Fsrc%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14298997005486529e7a97b2ab9e9e376d6fdc72/compiler%2Frustc_hir_typeck%2Fsrc%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2F_match.rs?ref=14298997005486529e7a97b2ab9e9e376d6fdc72", "patch": "@@ -289,15 +289,12 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n     fn maybe_get_coercion_reason(&self, hir_id: hir::HirId, sp: Span) -> Option<(Span, String)> {\n         let node = {\n-            let rslt = self.tcx.hir().get_parent_node(self.tcx.hir().get_parent_node(hir_id));\n+            let rslt = self.tcx.hir().parent_id(self.tcx.hir().parent_id(hir_id));\n             self.tcx.hir().get(rslt)\n         };\n         if let hir::Node::Block(block) = node {\n             // check that the body's parent is an fn\n-            let parent = self\n-                .tcx\n-                .hir()\n-                .get(self.tcx.hir().get_parent_node(self.tcx.hir().get_parent_node(block.hir_id)));\n+            let parent = self.tcx.hir().get_parent(self.tcx.hir().parent_id(block.hir_id));\n             if let (Some(expr), hir::Node::Item(hir::Item { kind: hir::ItemKind::Fn(..), .. })) =\n                 (&block.expr, parent)\n             {\n@@ -526,7 +523,6 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         None\n                     }\n                 })?;\n-                let opaque_ty = self.tcx.mk_opaque(rpit_def_id, substs);\n \n                 if !self.can_coerce(first_ty, expected) || !self.can_coerce(second_ty, expected) {\n                     return None;\n@@ -540,13 +536,22 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     {\n                         let pred = pred.kind().rebind(match pred.kind().skip_binder() {\n                             ty::PredicateKind::Clause(ty::Clause::Trait(trait_pred)) => {\n-                                assert_eq!(trait_pred.trait_ref.self_ty(), opaque_ty);\n+                                // FIXME(rpitit): This will need to be fixed when we move to associated types\n+                                assert!(matches!(\n+                                    *trait_pred.trait_ref.self_ty().kind(),\n+                                    ty::Alias(_, ty::AliasTy { def_id, substs, .. })\n+                                    if def_id == rpit_def_id && substs == substs\n+                                ));\n                                 ty::PredicateKind::Clause(ty::Clause::Trait(\n                                     trait_pred.with_self_ty(self.tcx, ty),\n                                 ))\n                             }\n                             ty::PredicateKind::Clause(ty::Clause::Projection(mut proj_pred)) => {\n-                                assert_eq!(proj_pred.projection_ty.self_ty(), opaque_ty);\n+                                assert!(matches!(\n+                                    *proj_pred.projection_ty.self_ty().kind(),\n+                                    ty::Alias(_, ty::AliasTy { def_id, substs, .. })\n+                                    if def_id == rpit_def_id && substs == substs\n+                                ));\n                                 proj_pred = proj_pred.with_self_ty(self.tcx, ty);\n                                 ty::PredicateKind::Clause(ty::Clause::Projection(proj_pred))\n                             }"}, {"sha": "2cb976f718c22b72d16640e6b98e9bace72c549f", "filename": "compiler/rustc_hir_typeck/src/callee.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/14298997005486529e7a97b2ab9e9e376d6fdc72/compiler%2Frustc_hir_typeck%2Fsrc%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14298997005486529e7a97b2ab9e9e376d6fdc72/compiler%2Frustc_hir_typeck%2Fsrc%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fcallee.rs?ref=14298997005486529e7a97b2ab9e9e376d6fdc72", "patch": "@@ -288,7 +288,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         callee_span: Span,\n     ) {\n         let hir = self.tcx.hir();\n-        let parent_hir_id = hir.get_parent_node(hir_id);\n+        let parent_hir_id = hir.parent_id(hir_id);\n         let parent_node = hir.get(parent_hir_id);\n         if let (\n             hir::Node::Expr(hir::Expr {\n@@ -303,7 +303,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             {\n                 // Actually need to unwrap a few more layers of HIR to get to\n                 // the _real_ closure...\n-                let async_closure = hir.get_parent_node(hir.get_parent_node(parent_hir_id));\n+                let async_closure = hir.parent_id(hir.parent_id(parent_hir_id));\n                 if let hir::Node::Expr(hir::Expr {\n                     kind: hir::ExprKind::Closure(&hir::Closure { fn_decl_span, .. }),\n                     ..\n@@ -336,7 +336,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         call_expr: &'tcx hir::Expr<'tcx>,\n         callee_expr: &'tcx hir::Expr<'tcx>,\n     ) -> bool {\n-        let hir_id = self.tcx.hir().get_parent_node(call_expr.hir_id);\n+        let hir_id = self.tcx.hir().parent_id(call_expr.hir_id);\n         let parent_node = self.tcx.hir().get(hir_id);\n         if let (\n             hir::Node::Expr(hir::Expr { kind: hir::ExprKind::Array(_), .. }),"}, {"sha": "9e91a3f90764cf4c879d0f2f3b6043052baa0f10", "filename": "compiler/rustc_hir_typeck/src/coercion.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/14298997005486529e7a97b2ab9e9e376d6fdc72/compiler%2Frustc_hir_typeck%2Fsrc%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14298997005486529e7a97b2ab9e9e376d6fdc72/compiler%2Frustc_hir_typeck%2Fsrc%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fcoercion.rs?ref=14298997005486529e7a97b2ab9e9e376d6fdc72", "patch": "@@ -1547,7 +1547,7 @@ impl<'tcx, 'exprs, E: AsCoercionSite> CoerceMany<'tcx, 'exprs, E> {\n                         err.span_label(cause.span, \"return type is not `()`\");\n                     }\n                     ObligationCauseCode::BlockTailExpression(blk_id) => {\n-                        let parent_id = fcx.tcx.hir().get_parent_node(blk_id);\n+                        let parent_id = fcx.tcx.hir().parent_id(blk_id);\n                         err = self.report_return_mismatched_types(\n                             cause,\n                             expected,\n@@ -1578,7 +1578,7 @@ impl<'tcx, 'exprs, E: AsCoercionSite> CoerceMany<'tcx, 'exprs, E> {\n                             None,\n                         );\n                         if !fcx.tcx.features().unsized_locals {\n-                            let id = fcx.tcx.hir().get_parent_node(id);\n+                            let id = fcx.tcx.hir().parent_id(id);\n                             unsized_return = self.is_return_ty_unsized(fcx, id);\n                         }\n                     }\n@@ -1668,7 +1668,7 @@ impl<'tcx, 'exprs, E: AsCoercionSite> CoerceMany<'tcx, 'exprs, E> {\n         let mut pointing_at_return_type = false;\n         let mut fn_output = None;\n \n-        let parent_id = fcx.tcx.hir().get_parent_node(id);\n+        let parent_id = fcx.tcx.hir().parent_id(id);\n         let parent = fcx.tcx.hir().get(parent_id);\n         if let Some(expr) = expression\n             && let hir::Node::Expr(hir::Expr { kind: hir::ExprKind::Closure(&hir::Closure { body, .. }), .. }) = parent"}, {"sha": "9c6c53abf07488ce6d6b2c74243c0724ecd2b428", "filename": "compiler/rustc_hir_typeck/src/demand.rs", "status": "modified", "additions": 12, "deletions": 15, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/14298997005486529e7a97b2ab9e9e376d6fdc72/compiler%2Frustc_hir_typeck%2Fsrc%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14298997005486529e7a97b2ab9e9e376d6fdc72/compiler%2Frustc_hir_typeck%2Fsrc%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fdemand.rs?ref=14298997005486529e7a97b2ab9e9e376d6fdc72", "patch": "@@ -211,7 +211,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         expr: &hir::Expr<'_>,\n         error: Option<TypeError<'tcx>>,\n     ) {\n-        let parent = self.tcx.hir().get_parent_node(expr.hir_id);\n+        let parent = self.tcx.hir().parent_id(expr.hir_id);\n         match (self.tcx.hir().find(parent), error) {\n             (Some(hir::Node::Local(hir::Local { ty: Some(ty), init: Some(init), .. })), _)\n                 if init.hir_id == expr.hir_id =>\n@@ -258,10 +258,9 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         hir::Path { res: hir::def::Res::Local(hir_id), .. },\n                     )) => {\n                         if let Some(hir::Node::Pat(pat)) = self.tcx.hir().find(*hir_id) {\n-                            let parent = self.tcx.hir().get_parent_node(pat.hir_id);\n                             primary_span = pat.span;\n                             secondary_span = pat.span;\n-                            match self.tcx.hir().find(parent) {\n+                            match self.tcx.hir().find_parent(pat.hir_id) {\n                                 Some(hir::Node::Local(hir::Local { ty: Some(ty), .. })) => {\n                                     primary_span = ty.span;\n                                     post_message = \" type\";\n@@ -326,7 +325,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         expr: &hir::Expr<'_>,\n         error: Option<TypeError<'tcx>>,\n     ) {\n-        let parent = self.tcx.hir().get_parent_node(expr.hir_id);\n+        let parent = self.tcx.hir().parent_id(expr.hir_id);\n         let Some(TypeError::Sorts(ExpectedFound { expected, .. })) = error else {return;};\n         let Some(hir::Node::Expr(hir::Expr {\n                     kind: hir::ExprKind::Assign(lhs, rhs, _), ..\n@@ -510,7 +509,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n                 // Unroll desugaring, to make sure this works for `for` loops etc.\n                 loop {\n-                    parent = self.tcx.hir().get_parent_node(id);\n+                    parent = self.tcx.hir().parent_id(id);\n                     if let Some(parent_span) = self.tcx.hir().opt_span(parent) {\n                         if parent_span.find_ancestor_inside(expr.span).is_some() {\n                             // The parent node is part of the same span, so is the result of the\n@@ -790,12 +789,12 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             return None;\n         };\n \n-        let local_parent = self.tcx.hir().get_parent_node(local_id);\n+        let local_parent = self.tcx.hir().parent_id(local_id);\n         let Some(Node::Param(hir::Param { hir_id: param_hir_id, .. })) = self.tcx.hir().find(local_parent) else {\n             return None;\n         };\n \n-        let param_parent = self.tcx.hir().get_parent_node(*param_hir_id);\n+        let param_parent = self.tcx.hir().parent_id(*param_hir_id);\n         let Some(Node::Expr(hir::Expr {\n             hir_id: expr_hir_id,\n             kind: hir::ExprKind::Closure(hir::Closure { fn_decl: closure_fn_decl, .. }),\n@@ -804,7 +803,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             return None;\n         };\n \n-        let expr_parent = self.tcx.hir().get_parent_node(*expr_hir_id);\n+        let expr_parent = self.tcx.hir().parent_id(*expr_hir_id);\n         let hir = self.tcx.hir().find(expr_parent);\n         let closure_params_len = closure_fn_decl.inputs.len();\n         let (\n@@ -857,7 +856,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             _ => None,\n         }?;\n \n-        match hir.find(hir.get_parent_node(expr.hir_id))? {\n+        match hir.find_parent(expr.hir_id)? {\n             Node::ExprField(field) => {\n                 if field.ident.name == local.name && field.is_shorthand {\n                     return Some(local.name);\n@@ -883,7 +882,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     /// Returns whether the given expression is an `else if`.\n     pub(crate) fn is_else_if_block(&self, expr: &hir::Expr<'_>) -> bool {\n         if let hir::ExprKind::If(..) = expr.kind {\n-            let parent_id = self.tcx.hir().get_parent_node(expr.hir_id);\n+            let parent_id = self.tcx.hir().parent_id(expr.hir_id);\n             if let Some(Node::Expr(hir::Expr {\n                 kind: hir::ExprKind::If(_, _, Some(else_expr)),\n                 ..\n@@ -1040,7 +1039,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         if let Some(hir::Node::Expr(hir::Expr {\n                             kind: hir::ExprKind::Assign(..),\n                             ..\n-                        })) = self.tcx.hir().find(self.tcx.hir().get_parent_node(expr.hir_id))\n+                        })) = self.tcx.hir().find_parent(expr.hir_id)\n                         {\n                             if mutability.is_mut() {\n                                 // Suppressing this diagnostic, we'll properly print it in `check_expr_assign`\n@@ -1267,9 +1266,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n         let mut sugg = vec![];\n \n-        if let Some(hir::Node::ExprField(field)) =\n-            self.tcx.hir().find(self.tcx.hir().get_parent_node(expr.hir_id))\n-        {\n+        if let Some(hir::Node::ExprField(field)) = self.tcx.hir().find_parent(expr.hir_id) {\n             // `expr` is a literal field for a struct, only suggest if appropriate\n             if field.is_shorthand {\n                 // This is a field literal\n@@ -1625,7 +1622,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             [start, end],\n             _,\n         ) = expr.kind else { return; };\n-        let parent = self.tcx.hir().get_parent_node(expr.hir_id);\n+        let parent = self.tcx.hir().parent_id(expr.hir_id);\n         if let Some(hir::Node::ExprField(_)) = self.tcx.hir().find(parent) {\n             // Ignore `Foo { field: a..Default::default() }`\n             return;"}, {"sha": "631749fcc0fa4f23260e1bdbd3683d1a72576213", "filename": "compiler/rustc_hir_typeck/src/expr.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/14298997005486529e7a97b2ab9e9e376d6fdc72/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14298997005486529e7a97b2ab9e9e376d6fdc72/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr.rs?ref=14298997005486529e7a97b2ab9e9e376d6fdc72", "patch": "@@ -920,7 +920,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         original_expr_id: HirId,\n         then: impl FnOnce(&hir::Expr<'_>),\n     ) {\n-        let mut parent = self.tcx.hir().get_parent_node(original_expr_id);\n+        let mut parent = self.tcx.hir().parent_id(original_expr_id);\n         while let Some(node) = self.tcx.hir().find(parent) {\n             match node {\n                 hir::Node::Expr(hir::Expr {\n@@ -943,7 +943,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 }) => {\n                     // Check if our original expression is a child of the condition of a while loop\n                     let expr_is_ancestor = std::iter::successors(Some(original_expr_id), |id| {\n-                        self.tcx.hir().find_parent_node(*id)\n+                        self.tcx.hir().opt_parent_id(*id)\n                     })\n                     .take_while(|id| *id != parent)\n                     .any(|id| id == expr.hir_id);\n@@ -959,7 +959,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 | hir::Node::TraitItem(_)\n                 | hir::Node::Crate(_) => break,\n                 _ => {\n-                    parent = self.tcx.hir().get_parent_node(parent);\n+                    parent = self.tcx.hir().parent_id(parent);\n                 }\n             }\n         }\n@@ -1083,7 +1083,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 // Do not suggest `if let x = y` as `==` is way more likely to be the intention.\n                 let hir = self.tcx.hir();\n                 if let hir::Node::Expr(hir::Expr { kind: ExprKind::If { .. }, .. }) =\n-                    hir.get(hir.get_parent_node(hir.get_parent_node(expr.hir_id)))\n+                    hir.get_parent(hir.parent_id(expr.hir_id))\n                 {\n                     err.span_suggestion_verbose(\n                         expr.span.shrink_to_lo(),\n@@ -2462,7 +2462,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         err.span_label(field.span, \"method, not a field\");\n         let expr_is_call =\n             if let hir::Node::Expr(hir::Expr { kind: ExprKind::Call(callee, _args), .. }) =\n-                self.tcx.hir().get(self.tcx.hir().get_parent_node(expr.hir_id))\n+                self.tcx.hir().get_parent(expr.hir_id)\n             {\n                 expr.hir_id == callee.hir_id\n             } else {"}, {"sha": "634688de01a656fbdddff66dfa2b3fda88bac9d8", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/_impl.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/14298997005486529e7a97b2ab9e9e376d6fdc72/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2F_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14298997005486529e7a97b2ab9e9e376d6fdc72/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2F_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2F_impl.rs?ref=14298997005486529e7a97b2ab9e9e376d6fdc72", "patch": "@@ -1435,9 +1435,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     pub(in super::super) fn expr_in_place(&self, mut expr_id: hir::HirId) -> bool {\n         let mut contained_in_place = false;\n \n-        while let hir::Node::Expr(parent_expr) =\n-            self.tcx.hir().get(self.tcx.hir().get_parent_node(expr_id))\n-        {\n+        while let hir::Node::Expr(parent_expr) = self.tcx.hir().get_parent(expr_id) {\n             match &parent_expr.kind {\n                 hir::ExprKind::Assign(lhs, ..) | hir::ExprKind::AssignOp(_, lhs, ..) => {\n                     if lhs.hir_id == expr_id {"}, {"sha": "55280487adda42b38eca2b05e7dd78b9801737a6", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/checks.rs", "status": "modified", "additions": 11, "deletions": 14, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/14298997005486529e7a97b2ab9e9e376d6fdc72/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fchecks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14298997005486529e7a97b2ab9e9e376d6fdc72/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fchecks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fchecks.rs?ref=14298997005486529e7a97b2ab9e9e376d6fdc72", "patch": "@@ -473,38 +473,36 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         call_expr: &hir::Expr<'tcx>,\n     ) {\n         // Next, let's construct the error\n-        let (error_span, full_call_span, ctor_of, is_method) = match &call_expr.kind {\n+        let (error_span, full_call_span, call_name, is_method) = match &call_expr.kind {\n             hir::ExprKind::Call(\n                 hir::Expr { hir_id, span, kind: hir::ExprKind::Path(qpath), .. },\n                 _,\n             ) => {\n                 if let Res::Def(DefKind::Ctor(of, _), _) =\n                     self.typeck_results.borrow().qpath_res(qpath, *hir_id)\n                 {\n-                    (call_span, *span, Some(of), false)\n+                    let name = match of {\n+                        CtorOf::Struct => \"struct\",\n+                        CtorOf::Variant => \"enum variant\",\n+                    };\n+                    (call_span, *span, name, false)\n                 } else {\n-                    (call_span, *span, None, false)\n+                    (call_span, *span, \"function\", false)\n                 }\n             }\n-            hir::ExprKind::Call(hir::Expr { span, .. }, _) => (call_span, *span, None, false),\n+            hir::ExprKind::Call(hir::Expr { span, .. }, _) => (call_span, *span, \"function\", false),\n             hir::ExprKind::MethodCall(path_segment, _, _, span) => {\n                 let ident_span = path_segment.ident.span;\n                 let ident_span = if let Some(args) = path_segment.args {\n                     ident_span.with_hi(args.span_ext.hi())\n                 } else {\n                     ident_span\n                 };\n-                // methods are never ctors\n-                (*span, ident_span, None, true)\n+                (*span, ident_span, \"method\", true)\n             }\n             k => span_bug!(call_span, \"checking argument types on a non-call: `{:?}`\", k),\n         };\n         let args_span = error_span.trim_start(full_call_span).unwrap_or(error_span);\n-        let call_name = match ctor_of {\n-            Some(CtorOf::Struct) => \"struct\",\n-            Some(CtorOf::Variant) => \"enum variant\",\n-            None => \"function\",\n-        };\n \n         // Don't print if it has error types or is just plain `_`\n         fn has_error_or_infer<'tcx>(tys: impl IntoIterator<Item = Ty<'tcx>>) -> bool {\n@@ -690,8 +688,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         err = tcx.sess.struct_span_err_with_code(\n                             full_call_span,\n                             &format!(\n-                                \"this {} takes {}{} but {} {} supplied\",\n-                                call_name,\n+                                \"{call_name} takes {}{} but {} {} supplied\",\n                                 if c_variadic { \"at least \" } else { \"\" },\n                                 potentially_plural_count(\n                                     formal_and_expected_inputs.len(),\n@@ -1803,7 +1800,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     hir_id: call_hir_id,\n                     span: call_span,\n                     ..\n-                }) = hir.get(hir.get_parent_node(expr.hir_id))\n+                }) = hir.get_parent(expr.hir_id)\n                     && callee.hir_id == expr.hir_id\n                 {\n                     if self.closure_span_overlaps_error(error, *call_span) {"}, {"sha": "066e98c74578fe047d2fcce200a3c1839158fdc7", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/suggestions.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/14298997005486529e7a97b2ab9e9e376d6fdc72/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14298997005486529e7a97b2ab9e9e376d6fdc72/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fsuggestions.rs?ref=14298997005486529e7a97b2ab9e9e376d6fdc72", "patch": "@@ -32,7 +32,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         self.typeck_results\n             .borrow()\n             .liberated_fn_sigs()\n-            .get(self.tcx.hir().get_parent_node(self.body_id))\n+            .get(self.tcx.hir().parent_id(self.body_id))\n             .copied()\n     }\n \n@@ -642,7 +642,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 // Check if the parent expression is a call to Pin::new.  If it\n                 // is and we were expecting a Box, ergo Pin<Box<expected>>, we\n                 // can suggest Box::pin.\n-                let parent = self.tcx.hir().get_parent_node(expr.hir_id);\n+                let parent = self.tcx.hir().parent_id(expr.hir_id);\n                 let Some(Node::Expr(Expr { kind: ExprKind::Call(fn_name, _), .. })) = self.tcx.hir().find(parent) else {\n                     return false;\n                 };"}, {"sha": "472205be7b5e3e81a96f1438b97d6865a691786c", "filename": "compiler/rustc_hir_typeck/src/generator_interior/drop_ranges/record_consumed_borrow.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14298997005486529e7a97b2ab9e9e376d6fdc72/compiler%2Frustc_hir_typeck%2Fsrc%2Fgenerator_interior%2Fdrop_ranges%2Frecord_consumed_borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14298997005486529e7a97b2ab9e9e376d6fdc72/compiler%2Frustc_hir_typeck%2Fsrc%2Fgenerator_interior%2Fdrop_ranges%2Frecord_consumed_borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fgenerator_interior%2Fdrop_ranges%2Frecord_consumed_borrow.rs?ref=14298997005486529e7a97b2ab9e9e376d6fdc72", "patch": "@@ -140,7 +140,7 @@ impl<'tcx> expr_use_visitor::Delegate<'tcx> for ExprUseDelegate<'tcx> {\n         diag_expr_id: HirId,\n     ) {\n         let hir = self.tcx.hir();\n-        let parent = match hir.find_parent_node(place_with_id.hir_id) {\n+        let parent = match hir.opt_parent_id(place_with_id.hir_id) {\n             Some(parent) => parent,\n             None => place_with_id.hir_id,\n         };"}, {"sha": "99e09b86a232313d782be3a55be7ac67eb9fbe91", "filename": "compiler/rustc_hir_typeck/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14298997005486529e7a97b2ab9e9e376d6fdc72/compiler%2Frustc_hir_typeck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14298997005486529e7a97b2ab9e9e376d6fdc72/compiler%2Frustc_hir_typeck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Flib.rs?ref=14298997005486529e7a97b2ab9e9e376d6fdc72", "patch": "@@ -224,7 +224,7 @@ fn typeck_with_fallback<'tcx>(\n                     _ => None,\n                 })\n                 .unwrap_or_else(|| match tcx.hir().get(id) {\n-                    Node::AnonConst(_) => match tcx.hir().get(tcx.hir().get_parent_node(id)) {\n+                    Node::AnonConst(_) => match tcx.hir().get(tcx.hir().parent_id(id)) {\n                         Node::Expr(&hir::Expr {\n                             kind: hir::ExprKind::ConstBlock(ref anon_const),\n                             .."}, {"sha": "1a42f9d07b1820b8d58cb1e77c7f1cfcafe0750f", "filename": "compiler/rustc_hir_typeck/src/method/suggest.rs", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/14298997005486529e7a97b2ab9e9e376d6fdc72/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14298997005486529e7a97b2ab9e9e376d6fdc72/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs?ref=14298997005486529e7a97b2ab9e9e376d6fdc72", "patch": "@@ -116,7 +116,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n         let sugg_span = if let SelfSource::MethodCall(expr) = source {\n             // Given `foo.bar(baz)`, `expr` is `bar`, but we want to point to the whole thing.\n-            self.tcx.hir().expect_expr(self.tcx.hir().get_parent_node(expr.hir_id)).span\n+            self.tcx.hir().expect_expr(self.tcx.hir().parent_id(expr.hir_id)).span\n         } else {\n             span\n         };\n@@ -332,7 +332,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         if let SelfSource::MethodCall(rcvr_expr) = source {\n             self.suggest_fn_call(&mut err, rcvr_expr, rcvr_ty, |output_ty| {\n                 let call_expr =\n-                    self.tcx.hir().expect_expr(self.tcx.hir().get_parent_node(rcvr_expr.hir_id));\n+                    self.tcx.hir().expect_expr(self.tcx.hir().parent_id(rcvr_expr.hir_id));\n                 let probe =\n                     self.lookup_probe(item_name, output_ty, call_expr, ProbeScope::AllTraits);\n                 probe.is_ok()\n@@ -914,8 +914,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             let msg = \"remove this method call\";\n             let mut fallback_span = true;\n             if let SelfSource::MethodCall(expr) = source {\n-                let call_expr =\n-                    self.tcx.hir().expect_expr(self.tcx.hir().get_parent_node(expr.hir_id));\n+                let call_expr = self.tcx.hir().expect_expr(self.tcx.hir().parent_id(expr.hir_id));\n                 if let Some(span) = call_expr.span.trim_start(expr.span) {\n                     err.span_suggestion(span, msg, \"\", Applicability::MachineApplicable);\n                     fallback_span = false;\n@@ -1268,7 +1267,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         Applicability::MachineApplicable,\n                     );\n                 } else {\n-                    let call_expr = tcx.hir().expect_expr(tcx.hir().get_parent_node(expr.hir_id));\n+                    let call_expr = tcx.hir().expect_expr(tcx.hir().parent_id(expr.hir_id));\n \n                     if let Some(span) = call_expr.span.trim_start(item_name.span) {\n                         err.span_suggestion(\n@@ -1450,7 +1449,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         let filename = tcx.sess.source_map().span_to_filename(span);\n \n                         let parent_node =\n-                            self.tcx.hir().get(self.tcx.hir().get_parent_node(hir_id));\n+                            self.tcx.hir().get_parent(hir_id);\n                         let msg = format!(\n                             \"you must specify a type for this binding, like `{}`\",\n                             concrete_type,\n@@ -1523,7 +1522,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         let mut visitor = LetVisitor { result: None, ident_name: seg1.ident.name };\n         visitor.visit_body(&body);\n \n-        let parent = self.tcx.hir().get_parent_node(seg1.hir_id);\n+        let parent = self.tcx.hir().parent_id(seg1.hir_id);\n         if let Some(Node::Expr(call_expr)) = self.tcx.hir().find(parent)\n             && let Some(expr) = visitor.result\n             && let Some(self_ty) = self.node_ty_opt(expr.hir_id)\n@@ -1561,7 +1560,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         && let Some((fields, substs)) =\n             self.get_field_candidates_considering_privacy(span, actual, mod_id)\n         {\n-            let call_expr = self.tcx.hir().expect_expr(self.tcx.hir().get_parent_node(expr.hir_id));\n+            let call_expr = self.tcx.hir().expect_expr(self.tcx.hir().parent_id(expr.hir_id));\n \n             let lang_items = self.tcx.lang_items();\n             let never_mention_traits = [\n@@ -1631,7 +1630,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     ) {\n         let tcx = self.tcx;\n         let SelfSource::MethodCall(expr) = source else { return; };\n-        let call_expr = tcx.hir().expect_expr(tcx.hir().get_parent_node(expr.hir_id));\n+        let call_expr = tcx.hir().expect_expr(tcx.hir().parent_id(expr.hir_id));\n \n         let ty::Adt(kind, substs) = actual.kind() else { return; };\n         match kind.adt_kind() {\n@@ -2592,7 +2591,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             return false;\n         }\n \n-        let parent = self.tcx.hir().get_parent_node(expr.hir_id);\n+        let parent = self.tcx.hir().parent_id(expr.hir_id);\n         if  let Some(Node::Expr(call_expr)) = self.tcx.hir().find(parent) &&\n             let hir::ExprKind::MethodCall(\n                 hir::PathSegment { ident: method_name, .. },"}, {"sha": "0143901f2d7a734b910815f5c56bcb7bff040e43", "filename": "compiler/rustc_hir_typeck/src/pat.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/14298997005486529e7a97b2ab9e9e376d6fdc72/compiler%2Frustc_hir_typeck%2Fsrc%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14298997005486529e7a97b2ab9e9e376d6fdc72/compiler%2Frustc_hir_typeck%2Fsrc%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fpat.rs?ref=14298997005486529e7a97b2ab9e9e376d6fdc72", "patch": "@@ -692,7 +692,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         let tcx = self.tcx;\n         if let PatKind::Ref(inner, mutbl) = pat.kind\n         && let PatKind::Binding(_, _, binding, ..) = inner.kind {\n-            let binding_parent_id = tcx.hir().get_parent_node(pat.hir_id);\n+            let binding_parent_id = tcx.hir().parent_id(pat.hir_id);\n             let binding_parent = tcx.hir().get(binding_parent_id);\n             debug!(?inner, ?pat, ?binding_parent);\n \n@@ -936,7 +936,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         res.descr(),\n                     ),\n                 );\n-                match self.tcx.hir().get(self.tcx.hir().get_parent_node(pat.hir_id)) {\n+                match self.tcx.hir().get_parent(pat.hir_id) {\n                     hir::Node::PatField(..) => {\n                         e.span_suggestion_verbose(\n                             ident.span.shrink_to_hi(),"}, {"sha": "5b02956a106c6cafa6775311a49921aafc355433", "filename": "compiler/rustc_infer/src/infer/error_reporting/suggest.rs", "status": "modified", "additions": 34, "deletions": 37, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/14298997005486529e7a97b2ab9e9e376d6fdc72/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14298997005486529e7a97b2ab9e9e376d6fdc72/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fsuggest.rs?ref=14298997005486529e7a97b2ab9e9e376d6fdc72", "patch": "@@ -411,7 +411,7 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n         span: Span,\n     ) {\n         let hir = self.tcx.hir();\n-        let fn_hir_id = hir.get_parent_node(cause.body_id);\n+        let fn_hir_id = hir.parent_id(cause.body_id);\n         if let Some(node) = self.tcx.hir().find(fn_hir_id) &&\n             let hir::Node::Item(hir::Item {\n                     kind: hir::ItemKind::Fn(_sig, _, body_id), ..\n@@ -585,45 +585,42 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n             let hir::StmtKind::Local(local) = &stmt.kind else { continue; };\n             local.pat.walk(&mut find_compatible_candidates);\n         }\n-        match hir.find(hir.get_parent_node(blk.hir_id)) {\n-            Some(hir::Node::Expr(hir::Expr { hir_id, .. })) => {\n-                match hir.find(hir.get_parent_node(*hir_id)) {\n-                    Some(hir::Node::Arm(hir::Arm { pat, .. })) => {\n-                        pat.walk(&mut find_compatible_candidates);\n-                    }\n-                    Some(\n-                        hir::Node::Item(hir::Item { kind: hir::ItemKind::Fn(_, _, body), .. })\n-                        | hir::Node::ImplItem(hir::ImplItem {\n-                            kind: hir::ImplItemKind::Fn(_, body),\n-                            ..\n-                        })\n-                        | hir::Node::TraitItem(hir::TraitItem {\n-                            kind: hir::TraitItemKind::Fn(_, hir::TraitFn::Provided(body)),\n-                            ..\n-                        })\n-                        | hir::Node::Expr(hir::Expr {\n-                            kind: hir::ExprKind::Closure(hir::Closure { body, .. }),\n-                            ..\n-                        }),\n-                    ) => {\n-                        for param in hir.body(*body).params {\n-                            param.pat.walk(&mut find_compatible_candidates);\n-                        }\n-                    }\n-                    Some(hir::Node::Expr(hir::Expr {\n-                        kind:\n-                            hir::ExprKind::If(\n-                                hir::Expr { kind: hir::ExprKind::Let(let_), .. },\n-                                then_block,\n-                                _,\n-                            ),\n+        match hir.find_parent(blk.hir_id) {\n+            Some(hir::Node::Expr(hir::Expr { hir_id, .. })) => match hir.find_parent(*hir_id) {\n+                Some(hir::Node::Arm(hir::Arm { pat, .. })) => {\n+                    pat.walk(&mut find_compatible_candidates);\n+                }\n+                Some(\n+                    hir::Node::Item(hir::Item { kind: hir::ItemKind::Fn(_, _, body), .. })\n+                    | hir::Node::ImplItem(hir::ImplItem {\n+                        kind: hir::ImplItemKind::Fn(_, body), ..\n+                    })\n+                    | hir::Node::TraitItem(hir::TraitItem {\n+                        kind: hir::TraitItemKind::Fn(_, hir::TraitFn::Provided(body)),\n+                        ..\n+                    })\n+                    | hir::Node::Expr(hir::Expr {\n+                        kind: hir::ExprKind::Closure(hir::Closure { body, .. }),\n                         ..\n-                    })) if then_block.hir_id == *hir_id => {\n-                        let_.pat.walk(&mut find_compatible_candidates);\n+                    }),\n+                ) => {\n+                    for param in hir.body(*body).params {\n+                        param.pat.walk(&mut find_compatible_candidates);\n                     }\n-                    _ => {}\n                 }\n-            }\n+                Some(hir::Node::Expr(hir::Expr {\n+                    kind:\n+                        hir::ExprKind::If(\n+                            hir::Expr { kind: hir::ExprKind::Let(let_), .. },\n+                            then_block,\n+                            _,\n+                        ),\n+                    ..\n+                })) if then_block.hir_id == *hir_id => {\n+                    let_.pat.walk(&mut find_compatible_candidates);\n+                }\n+                _ => {}\n+            },\n             _ => {}\n         }\n "}, {"sha": "316e2e29cd8b31c107aaed69dcc00f04bb232e50", "filename": "compiler/rustc_interface/src/tests.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/14298997005486529e7a97b2ab9e9e376d6fdc72/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14298997005486529e7a97b2ab9e9e376d6fdc72/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Ftests.rs?ref=14298997005486529e7a97b2ab9e9e376d6fdc72", "patch": "@@ -4,6 +4,7 @@ use crate::interface::parse_cfgspecs;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_errors::{emitter::HumanReadableErrorType, registry, ColorConfig};\n use rustc_session::config::rustc_optgroups;\n+use rustc_session::config::TraitSolver;\n use rustc_session::config::{build_configuration, build_session_options, to_crate_config};\n use rustc_session::config::{\n     BranchProtection, Externs, OomStrategy, OutputType, OutputTypes, PAuthKey, PacRet,\n@@ -722,7 +723,6 @@ fn test_unstable_options_tracking_hash() {\n             pac_ret: Some(PacRet { leaf: true, key: PAuthKey::B })\n         })\n     );\n-    tracked!(chalk, true);\n     tracked!(codegen_backend, Some(\"abc\".to_string()));\n     tracked!(crate_attr, vec![\"abc\".to_string()]);\n     tracked!(debug_info_for_profiling, true);\n@@ -792,6 +792,7 @@ fn test_unstable_options_tracking_hash() {\n     tracked!(thinlto, Some(true));\n     tracked!(thir_unsafeck, true);\n     tracked!(tls_model, Some(TlsModel::GeneralDynamic));\n+    tracked!(trait_solver, TraitSolver::Chalk);\n     tracked!(translate_remapped_path_to_local_path, false);\n     tracked!(trap_unreachable, Some(false));\n     tracked!(treat_err_as_bug, NonZeroUsize::new(1));"}, {"sha": "d58168ff37721d71cde3c8b28a271f79920a2fe6", "filename": "compiler/rustc_lint/src/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14298997005486529e7a97b2ab9e9e376d6fdc72/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14298997005486529e7a97b2ab9e9e376d6fdc72/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs?ref=14298997005486529e7a97b2ab9e9e376d6fdc72", "patch": "@@ -1526,7 +1526,7 @@ impl<'tcx> LateLintPass<'tcx> for UnreachablePub {\n \n     fn check_field_def(&mut self, cx: &LateContext<'_>, field: &hir::FieldDef<'_>) {\n         let map = cx.tcx.hir();\n-        if matches!(map.get(map.get_parent_node(field.hir_id)), Node::Variant(_)) {\n+        if matches!(map.get_parent(field.hir_id), Node::Variant(_)) {\n             return;\n         }\n         self.perform_lint(cx, \"field\", field.def_id, field.vis_span, false);"}, {"sha": "48902cd05695c751a1c1173fdbe4f2f7f571eaa1", "filename": "compiler/rustc_lint/src/internal.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14298997005486529e7a97b2ab9e9e376d6fdc72/compiler%2Frustc_lint%2Fsrc%2Finternal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14298997005486529e7a97b2ab9e9e376d6fdc72/compiler%2Frustc_lint%2Fsrc%2Finternal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Finternal.rs?ref=14298997005486529e7a97b2ab9e9e376d6fdc72", "patch": "@@ -143,7 +143,7 @@ impl<'tcx> LateLintPass<'tcx> for TyTyKind {\n             TyKind::Path(QPath::Resolved(_, path)) => {\n                 if lint_ty_kind_usage(cx, &path.res) {\n                     let hir = cx.tcx.hir();\n-                    let span = match hir.find(hir.get_parent_node(ty.hir_id)) {\n+                    let span = match hir.find_parent(ty.hir_id) {\n                         Some(Node::Pat(Pat {\n                             kind:\n                                 PatKind::Path(qpath)"}, {"sha": "f37d6e9a63d49f076c7ece809256944a18d6067d", "filename": "compiler/rustc_lint/src/nonstandard_style.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/14298997005486529e7a97b2ab9e9e376d6fdc72/compiler%2Frustc_lint%2Fsrc%2Fnonstandard_style.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14298997005486529e7a97b2ab9e9e376d6fdc72/compiler%2Frustc_lint%2Fsrc%2Fnonstandard_style.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fnonstandard_style.rs?ref=14298997005486529e7a97b2ab9e9e376d6fdc72", "patch": "@@ -444,8 +444,7 @@ impl<'tcx> LateLintPass<'tcx> for NonSnakeCase {\n \n     fn check_pat(&mut self, cx: &LateContext<'_>, p: &hir::Pat<'_>) {\n         if let PatKind::Binding(_, hid, ident, _) = p.kind {\n-            if let hir::Node::PatField(field) = cx.tcx.hir().get(cx.tcx.hir().get_parent_node(hid))\n-            {\n+            if let hir::Node::PatField(field) = cx.tcx.hir().get_parent(hid) {\n                 if !field.is_shorthand {\n                     // Only check if a new name has been introduced, to avoid warning\n                     // on both the struct definition and this pattern."}, {"sha": "fa415243ba066c99cc897973023aebff1ddd2479", "filename": "compiler/rustc_lint/src/types.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/14298997005486529e7a97b2ab9e9e376d6fdc72/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14298997005486529e7a97b2ab9e9e376d6fdc72/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs?ref=14298997005486529e7a97b2ab9e9e376d6fdc72", "patch": "@@ -127,10 +127,9 @@ fn lint_overflowing_range_endpoint<'tcx>(\n ) -> bool {\n     // We only want to handle exclusive (`..`) ranges,\n     // which are represented as `ExprKind::Struct`.\n-    let par_id = cx.tcx.hir().get_parent_node(expr.hir_id);\n+    let par_id = cx.tcx.hir().parent_id(expr.hir_id);\n     let Node::ExprField(field) = cx.tcx.hir().get(par_id) else { return false };\n-    let field_par_id = cx.tcx.hir().get_parent_node(field.hir_id);\n-    let Node::Expr(struct_expr) = cx.tcx.hir().get(field_par_id) else { return false };\n+    let Node::Expr(struct_expr) = cx.tcx.hir().get_parent(field.hir_id) else { return false };\n     if !is_range_literal(struct_expr) {\n         return false;\n     };\n@@ -404,7 +403,7 @@ fn lint_uint_literal<'tcx>(\n         _ => bug!(),\n     };\n     if lit_val < min || lit_val > max {\n-        let parent_id = cx.tcx.hir().get_parent_node(e.hir_id);\n+        let parent_id = cx.tcx.hir().parent_id(e.hir_id);\n         if let Node::Expr(par_e) = cx.tcx.hir().get(parent_id) {\n             match par_e.kind {\n                 hir::ExprKind::Cast(..) => {"}, {"sha": "883554f959ccb65240f9361f9af2a278fcf92f1d", "filename": "compiler/rustc_middle/src/hir/map/mod.rs", "status": "modified", "additions": 23, "deletions": 15, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/14298997005486529e7a97b2ab9e9e376d6fdc72/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14298997005486529e7a97b2ab9e9e376d6fdc72/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs?ref=14298997005486529e7a97b2ab9e9e376d6fdc72", "patch": "@@ -69,7 +69,7 @@ impl<'hir> Iterator for ParentHirIterator<'hir> {\n         }\n         loop {\n             // There are nodes that do not have entries, so we need to skip them.\n-            let parent_id = self.map.get_parent_node(self.current_id);\n+            let parent_id = self.map.parent_id(self.current_id);\n \n             if parent_id == self.current_id {\n                 self.current_id = CRATE_HIR_ID;\n@@ -246,7 +246,7 @@ impl<'hir> Map<'hir> {\n             },\n             Node::Variant(_) => DefKind::Variant,\n             Node::Ctor(variant_data) => {\n-                let ctor_of = match self.find(self.get_parent_node(hir_id)) {\n+                let ctor_of = match self.find_parent(hir_id) {\n                     Some(Node::Item(..)) => def::CtorOf::Struct,\n                     Some(Node::Variant(..)) => def::CtorOf::Variant,\n                     _ => unreachable!(),\n@@ -257,7 +257,7 @@ impl<'hir> Map<'hir> {\n                 }\n             }\n             Node::AnonConst(_) => {\n-                let inline = match self.find(self.get_parent_node(hir_id)) {\n+                let inline = match self.find_parent(hir_id) {\n                     Some(Node::Expr(&Expr {\n                         kind: ExprKind::ConstBlock(ref anon_const), ..\n                     })) if anon_const.hir_id == hir_id => true,\n@@ -298,7 +298,7 @@ impl<'hir> Map<'hir> {\n     /// Finds the id of the parent node to this one.\n     ///\n     /// If calling repeatedly and iterating over parents, prefer [`Map::parent_iter`].\n-    pub fn find_parent_node(self, id: HirId) -> Option<HirId> {\n+    pub fn opt_parent_id(self, id: HirId) -> Option<HirId> {\n         if id.local_id == ItemLocalId::from_u32(0) {\n             Some(self.tcx.hir_owner_parent(id.owner))\n         } else {\n@@ -312,11 +312,19 @@ impl<'hir> Map<'hir> {\n     }\n \n     #[track_caller]\n-    pub fn get_parent_node(self, hir_id: HirId) -> HirId {\n-        self.find_parent_node(hir_id)\n+    pub fn parent_id(self, hir_id: HirId) -> HirId {\n+        self.opt_parent_id(hir_id)\n             .unwrap_or_else(|| bug!(\"No parent for node {:?}\", self.node_to_string(hir_id)))\n     }\n \n+    pub fn get_parent(self, hir_id: HirId) -> Node<'hir> {\n+        self.get(self.parent_id(hir_id))\n+    }\n+\n+    pub fn find_parent(self, hir_id: HirId) -> Option<Node<'hir>> {\n+        self.find(self.opt_parent_id(hir_id)?)\n+    }\n+\n     /// Retrieves the `Node` corresponding to `id`, returning `None` if cannot be found.\n     pub fn find(self, id: HirId) -> Option<Node<'hir>> {\n         if id.local_id == ItemLocalId::from_u32(0) {\n@@ -414,7 +422,7 @@ impl<'hir> Map<'hir> {\n     /// which this is the body of, i.e., a `fn`, `const` or `static`\n     /// item (possibly associated), a closure, or a `hir::AnonConst`.\n     pub fn body_owner(self, BodyId { hir_id }: BodyId) -> HirId {\n-        let parent = self.get_parent_node(hir_id);\n+        let parent = self.parent_id(hir_id);\n         assert!(self.find(parent).map_or(false, |n| is_body_owner(n, hir_id)), \"{hir_id:?}\");\n         parent\n     }\n@@ -642,29 +650,29 @@ impl<'hir> Map<'hir> {\n     }\n \n     /// Returns an iterator for the nodes in the ancestor tree of the `current_id`\n-    /// until the crate root is reached. Prefer this over your own loop using `get_parent_node`.\n+    /// until the crate root is reached. Prefer this over your own loop using `parent_id`.\n     #[inline]\n     pub fn parent_id_iter(self, current_id: HirId) -> impl Iterator<Item = HirId> + 'hir {\n         ParentHirIterator { current_id, map: self }\n     }\n \n     /// Returns an iterator for the nodes in the ancestor tree of the `current_id`\n-    /// until the crate root is reached. Prefer this over your own loop using `get_parent_node`.\n+    /// until the crate root is reached. Prefer this over your own loop using `parent_id`.\n     #[inline]\n     pub fn parent_iter(self, current_id: HirId) -> impl Iterator<Item = (HirId, Node<'hir>)> {\n         self.parent_id_iter(current_id).filter_map(move |id| Some((id, self.find(id)?)))\n     }\n \n     /// Returns an iterator for the nodes in the ancestor tree of the `current_id`\n-    /// until the crate root is reached. Prefer this over your own loop using `get_parent_node`.\n+    /// until the crate root is reached. Prefer this over your own loop using `parent_id`.\n     #[inline]\n     pub fn parent_owner_iter(self, current_id: HirId) -> ParentOwnerIterator<'hir> {\n         ParentOwnerIterator { current_id, map: self }\n     }\n \n     /// Checks if the node is left-hand side of an assignment.\n     pub fn is_lhs(self, id: HirId) -> bool {\n-        match self.find(self.get_parent_node(id)) {\n+        match self.find_parent(id) {\n             Some(Node::Expr(expr)) => match expr.kind {\n                 ExprKind::Assign(lhs, _rhs, _span) => lhs.hir_id == id,\n                 _ => false,\n@@ -892,7 +900,7 @@ impl<'hir> Map<'hir> {\n             Node::Pat(&Pat { kind: PatKind::Binding(_, _, ident, _), .. }) => Some(ident),\n             // A `Ctor` doesn't have an identifier itself, but its parent\n             // struct/variant does. Compare with `hir::Map::opt_span`.\n-            Node::Ctor(..) => match self.find(self.get_parent_node(id))? {\n+            Node::Ctor(..) => match self.find_parent(id)? {\n                 Node::Item(item) => Some(item.ident),\n                 Node::Variant(variant) => Some(variant.ident),\n                 _ => unreachable!(),\n@@ -1021,7 +1029,7 @@ impl<'hir> Map<'hir> {\n                 ForeignItemKind::Fn(decl, _, _) => until_within(item.span, decl.output.span()),\n                 _ => named_span(item.span, item.ident, None),\n             },\n-            Node::Ctor(_) => return self.opt_span(self.get_parent_node(hir_id)),\n+            Node::Ctor(_) => return self.opt_span(self.parent_id(hir_id)),\n             Node::Expr(Expr {\n                 kind: ExprKind::Closure(Closure { fn_decl_span, .. }),\n                 span,\n@@ -1063,7 +1071,7 @@ impl<'hir> Map<'hir> {\n             Node::PatField(field) => field.span,\n             Node::Arm(arm) => arm.span,\n             Node::Block(block) => block.span,\n-            Node::Ctor(..) => self.span_with_body(self.get_parent_node(hir_id)),\n+            Node::Ctor(..) => self.span_with_body(self.parent_id(hir_id)),\n             Node::Lifetime(lifetime) => lifetime.ident.span,\n             Node::GenericParam(param) => param.span,\n             Node::Infer(i) => i.span,\n@@ -1093,7 +1101,7 @@ impl<'hir> Map<'hir> {\n     /// Returns the HirId of `N` in `struct Foo<const N: usize = { ... }>` when\n     /// called with the HirId for the `{ ... }` anon const\n     pub fn opt_const_param_default_param_def_id(self, anon_const: HirId) -> Option<LocalDefId> {\n-        match self.get(self.get_parent_node(anon_const)) {\n+        match self.get_parent(anon_const) {\n             Node::GenericParam(GenericParam {\n                 def_id: param_id,\n                 kind: GenericParamKind::Const { .. },"}, {"sha": "eb48b325e84ebd22be75e0fc1951dd7514b32af0", "filename": "compiler/rustc_middle/src/lint.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14298997005486529e7a97b2ab9e9e376d6fdc72/compiler%2Frustc_middle%2Fsrc%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14298997005486529e7a97b2ab9e9e376d6fdc72/compiler%2Frustc_middle%2Fsrc%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Flint.rs?ref=14298997005486529e7a97b2ab9e9e376d6fdc72", "patch": "@@ -182,7 +182,7 @@ impl TyCtxt<'_> {\n             if hir.attrs(id).iter().any(|attr| Level::from_attr(attr).is_some()) {\n                 return id;\n             }\n-            let next = hir.get_parent_node(id);\n+            let next = hir.parent_id(id);\n             if next == id {\n                 bug!(\"lint traversal reached the root of the crate\");\n             }"}, {"sha": "14bdff4568f5e65f8e1fd4c6355bdaf89a4ae4d2", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14298997005486529e7a97b2ab9e9e376d6fdc72/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14298997005486529e7a97b2ab9e9e376d6fdc72/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=14298997005486529e7a97b2ab9e9e376d6fdc72", "patch": "@@ -2506,7 +2506,7 @@ impl<'tcx> ConstantKind<'tcx> {\n         }\n \n         let hir_id = tcx.hir().local_def_id_to_hir_id(def.did);\n-        let parent_substs = if let Some(parent_hir_id) = tcx.hir().find_parent_node(hir_id) {\n+        let parent_substs = if let Some(parent_hir_id) = tcx.hir().opt_parent_id(hir_id) {\n             if let Some(parent_did) = tcx.hir().opt_local_def_id(parent_hir_id) {\n                 InternalSubsts::identity_for_item(tcx, parent_did.to_def_id())\n             } else {"}, {"sha": "50554cf9a82c85e7e53112ae0da4e6a3bb723f6e", "filename": "compiler/rustc_middle/src/ty/error.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14298997005486529e7a97b2ab9e9e376d6fdc72/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14298997005486529e7a97b2ab9e9e376d6fdc72/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs?ref=14298997005486529e7a97b2ab9e9e376d6fdc72", "patch": "@@ -457,7 +457,7 @@ impl<'tcx> TyCtxt<'tcx> {\n                             .def_id\n                             .as_local()\n                             .map(|id| hir.local_def_id_to_hir_id(id))\n-                            .and_then(|id| self.hir().find(self.hir().get_parent_node(id)))\n+                            .and_then(|id| self.hir().find_parent(id))\n                             .as_ref()\n                             .and_then(|node| node.generics())\n                         {"}, {"sha": "e7ee0d9e908e0556746b5f01fc413d1a5f731256", "filename": "compiler/rustc_mir_build/src/thir/pattern/check_match.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/14298997005486529e7a97b2ab9e9e376d6fdc72/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14298997005486529e7a97b2ab9e9e376d6fdc72/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs?ref=14298997005486529e7a97b2ab9e9e376d6fdc72", "patch": "@@ -247,14 +247,14 @@ impl<'p, 'tcx> MatchVisitor<'_, 'p, 'tcx> {\n \n     fn check_let_chain(&mut self, cx: &mut MatchCheckCtxt<'p, 'tcx>, pat_id: HirId) -> bool {\n         let hir = self.tcx.hir();\n-        let parent = hir.get_parent_node(pat_id);\n+        let parent = hir.parent_id(pat_id);\n \n         // First, figure out if the given pattern is part of a let chain,\n         // and if so, obtain the top node of the chain.\n         let mut top = parent;\n         let mut part_of_chain = false;\n         loop {\n-            let new_top = hir.get_parent_node(top);\n+            let new_top = hir.parent_id(top);\n             if let hir::Node::Expr(\n                 hir::Expr {\n                     kind: hir::ExprKind::Binary(Spanned { node: hir::BinOpKind::And, .. }, lhs, rhs),\n@@ -1054,7 +1054,7 @@ pub enum LetSource {\n fn let_source(tcx: TyCtxt<'_>, pat_id: HirId) -> LetSource {\n     let hir = tcx.hir();\n \n-    let parent = hir.get_parent_node(pat_id);\n+    let parent = hir.parent_id(pat_id);\n     let_source_parent(tcx, parent, Some(pat_id))\n }\n \n@@ -1073,7 +1073,7 @@ fn let_source_parent(tcx: TyCtxt<'_>, parent: HirId, pat_id: Option<HirId>) -> L\n         _ => {}\n     }\n \n-    let parent_parent = hir.get_parent_node(parent);\n+    let parent_parent = hir.parent_id(parent);\n     let parent_parent_node = hir.get(parent_parent);\n     match parent_parent_node {\n         hir::Node::Stmt(hir::Stmt { kind: hir::StmtKind::Local(_), .. }) => {\n@@ -1085,8 +1085,8 @@ fn let_source_parent(tcx: TyCtxt<'_>, parent: HirId, pat_id: Option<HirId>) -> L\n         _ => {}\n     }\n \n-    let parent_parent_parent = hir.get_parent_node(parent_parent);\n-    let parent_parent_parent_parent = hir.get_parent_node(parent_parent_parent);\n+    let parent_parent_parent = hir.parent_id(parent_parent);\n+    let parent_parent_parent_parent = hir.parent_id(parent_parent_parent);\n     let parent_parent_parent_parent_node = hir.get(parent_parent_parent_parent);\n \n     if let hir::Node::Expr(hir::Expr {"}, {"sha": "ef241c5398d4d89c666ffb0cbf1bc42452fe5f8d", "filename": "compiler/rustc_privacy/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14298997005486529e7a97b2ab9e9e376d6fdc72/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14298997005486529e7a97b2ab9e9e376d6fdc72/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_privacy%2Fsrc%2Flib.rs?ref=14298997005486529e7a97b2ab9e9e376d6fdc72", "patch": "@@ -2141,7 +2141,7 @@ fn check_private_in_public(tcx: TyCtxt<'_>, (): ()) {\n             if !old_error_set_ancestry.insert(id) {\n                 break;\n             }\n-            let parent = tcx.hir().get_parent_node(id);\n+            let parent = tcx.hir().parent_id(id);\n             if parent == id {\n                 break;\n             }"}, {"sha": "a8d82de02b7548836d5b8e3a7e70ae07caab06a2", "filename": "compiler/rustc_save_analysis/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14298997005486529e7a97b2ab9e9e376d6fdc72/compiler%2Frustc_save_analysis%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14298997005486529e7a97b2ab9e9e376d6fdc72/compiler%2Frustc_save_analysis%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_save_analysis%2Fsrc%2Flib.rs?ref=14298997005486529e7a97b2ab9e9e376d6fdc72", "patch": "@@ -600,7 +600,7 @@ impl<'tcx> SaveContext<'tcx> {\n                 if seg.res != Res::Err {\n                     seg.res\n                 } else {\n-                    let parent_node = self.tcx.hir().get_parent_node(hir_id);\n+                    let parent_node = self.tcx.hir().parent_id(hir_id);\n                     self.get_path_res(parent_node)\n                 }\n             }"}, {"sha": "a87e820386e7cbc2240e788eb232ff6cfffed3b2", "filename": "compiler/rustc_session/src/config.rs", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/14298997005486529e7a97b2ab9e9e376d6fdc72/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14298997005486529e7a97b2ab9e9e376d6fdc72/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fconfig.rs?ref=14298997005486529e7a97b2ab9e9e376d6fdc72", "patch": "@@ -554,6 +554,16 @@ pub enum PrintRequest {\n     SplitDebuginfo,\n }\n \n+#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]\n+pub enum TraitSolver {\n+    /// Classic trait solver in `rustc_trait_selection::traits::select`\n+    Classic,\n+    /// Chalk trait solver\n+    Chalk,\n+    /// Experimental trait solver in `rustc_trait_selection::solve`\n+    Next,\n+}\n+\n pub enum Input {\n     /// Load source code from a file.\n     File(PathBuf),\n@@ -2761,7 +2771,7 @@ pub(crate) mod dep_tracking {\n         BranchProtection, CFGuard, CFProtection, CrateType, DebugInfo, ErrorOutputType,\n         InstrumentCoverage, LdImpl, LinkerPluginLto, LocationDetail, LtoCli, OomStrategy, OptLevel,\n         OutputType, OutputTypes, Passes, SourceFileHashAlgorithm, SplitDwarfKind,\n-        SwitchWithOptPath, SymbolManglingVersion, TrimmedDefPaths,\n+        SwitchWithOptPath, SymbolManglingVersion, TraitSolver, TrimmedDefPaths,\n     };\n     use crate::lint;\n     use crate::options::WasiExecModel;\n@@ -2861,6 +2871,7 @@ pub(crate) mod dep_tracking {\n         BranchProtection,\n         OomStrategy,\n         LanguageIdentifier,\n+        TraitSolver,\n     );\n \n     impl<T1, T2> DepTrackingHash for (T1, T2)"}, {"sha": "043a60a1c5310c7247ad0fe286c681d7269d2226", "filename": "compiler/rustc_session/src/options.rs", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/14298997005486529e7a97b2ab9e9e376d6fdc72/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14298997005486529e7a97b2ab9e9e376d6fdc72/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Foptions.rs?ref=14298997005486529e7a97b2ab9e9e376d6fdc72", "patch": "@@ -382,6 +382,8 @@ mod desc {\n         \"`all` (default), `except-unused-generics`, `except-unused-functions`, or `off`\";\n     pub const parse_unpretty: &str = \"`string` or `string=string`\";\n     pub const parse_treat_err_as_bug: &str = \"either no value or a number bigger than 0\";\n+    pub const parse_trait_solver: &str =\n+        \"one of the supported solver modes (`classic`, `chalk`, or `next`)\";\n     pub const parse_lto: &str =\n         \"either a boolean (`yes`, `no`, `on`, `off`, etc), `thin`, `fat`, or omitted\";\n     pub const parse_linker_plugin_lto: &str =\n@@ -880,6 +882,18 @@ mod parse {\n         }\n     }\n \n+    pub(crate) fn parse_trait_solver(slot: &mut TraitSolver, v: Option<&str>) -> bool {\n+        match v {\n+            Some(\"classic\") => *slot = TraitSolver::Classic,\n+            Some(\"chalk\") => *slot = TraitSolver::Chalk,\n+            Some(\"next\") => *slot = TraitSolver::Next,\n+            // default trait solver is subject to change..\n+            Some(\"default\") => *slot = TraitSolver::Classic,\n+            _ => return false,\n+        }\n+        true\n+    }\n+\n     pub(crate) fn parse_lto(slot: &mut LtoCli, v: Option<&str>) -> bool {\n         if v.is_some() {\n             let mut bool_arg = None;\n@@ -1249,8 +1263,6 @@ options! {\n         \"instrument control-flow architecture protection\"),\n     cgu_partitioning_strategy: Option<String> = (None, parse_opt_string, [TRACKED],\n         \"the codegen unit partitioning strategy to use\"),\n-    chalk: bool = (false, parse_bool, [TRACKED],\n-        \"enable the experimental Chalk-based trait solving engine\"),\n     codegen_backend: Option<String> = (None, parse_opt_string, [TRACKED],\n         \"the backend to use\"),\n     combine_cgu: bool = (false, parse_bool, [TRACKED],\n@@ -1609,6 +1621,8 @@ options! {\n         \"for every macro invocation, print its name and arguments (default: no)\"),\n     track_diagnostics: bool = (false, parse_bool, [UNTRACKED],\n         \"tracks where in rustc a diagnostic was emitted\"),\n+    trait_solver: TraitSolver = (TraitSolver::Classic, parse_trait_solver, [TRACKED],\n+        \"specify the trait solver mode used by rustc (default: classic)\"),\n     // Diagnostics are considered side-effects of a query (see `QuerySideEffects`) and are saved\n     // alongside query results and changes to translation options can affect diagnostics - so\n     // translation options should be tracked."}, {"sha": "bc6d9d4b922d87c27a6dd159416157aadae0dd64", "filename": "compiler/rustc_trait_selection/src/traits/engine.rs", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/14298997005486529e7a97b2ab9e9e376d6fdc72/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fengine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14298997005486529e7a97b2ab9e9e376d6fdc72/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fengine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fengine.rs?ref=14298997005486529e7a97b2ab9e9e376d6fdc72", "patch": "@@ -3,6 +3,7 @@ use std::fmt::Debug;\n \n use super::TraitEngine;\n use super::{ChalkFulfillmentContext, FulfillmentContext};\n+use crate::solve::FulfillmentCtxt as NextFulfillmentCtxt;\n use crate::traits::NormalizeExt;\n use rustc_data_structures::fx::FxIndexSet;\n use rustc_hir::def_id::{DefId, LocalDefId};\n@@ -20,6 +21,7 @@ use rustc_middle::ty::error::TypeError;\n use rustc_middle::ty::ToPredicate;\n use rustc_middle::ty::TypeFoldable;\n use rustc_middle::ty::{self, Ty, TyCtxt};\n+use rustc_session::config::TraitSolver;\n use rustc_span::Span;\n \n pub trait TraitEngineExt<'tcx> {\n@@ -29,18 +31,18 @@ pub trait TraitEngineExt<'tcx> {\n \n impl<'tcx> TraitEngineExt<'tcx> for dyn TraitEngine<'tcx> {\n     fn new(tcx: TyCtxt<'tcx>) -> Box<Self> {\n-        if tcx.sess.opts.unstable_opts.chalk {\n-            Box::new(ChalkFulfillmentContext::new())\n-        } else {\n-            Box::new(FulfillmentContext::new())\n+        match tcx.sess.opts.unstable_opts.trait_solver {\n+            TraitSolver::Classic => Box::new(FulfillmentContext::new()),\n+            TraitSolver::Chalk => Box::new(ChalkFulfillmentContext::new()),\n+            TraitSolver::Next => Box::new(NextFulfillmentCtxt::new()),\n         }\n     }\n \n     fn new_in_snapshot(tcx: TyCtxt<'tcx>) -> Box<Self> {\n-        if tcx.sess.opts.unstable_opts.chalk {\n-            Box::new(ChalkFulfillmentContext::new_in_snapshot())\n-        } else {\n-            Box::new(FulfillmentContext::new_in_snapshot())\n+        match tcx.sess.opts.unstable_opts.trait_solver {\n+            TraitSolver::Classic => Box::new(FulfillmentContext::new_in_snapshot()),\n+            TraitSolver::Chalk => Box::new(ChalkFulfillmentContext::new_in_snapshot()),\n+            TraitSolver::Next => Box::new(NextFulfillmentCtxt::new()),\n         }\n     }\n }"}, {"sha": "6996ddd8729948b00635b11c8eb9c29e3071a0f5", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/14298997005486529e7a97b2ab9e9e376d6fdc72/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14298997005486529e7a97b2ab9e9e376d6fdc72/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=14298997005486529e7a97b2ab9e9e376d6fdc72", "patch": "@@ -40,6 +40,7 @@ use rustc_middle::ty::{\n     self, SubtypePredicate, ToPolyTraitRef, ToPredicate, TraitRef, Ty, TyCtxt, TypeFoldable,\n     TypeVisitable,\n };\n+use rustc_session::config::TraitSolver;\n use rustc_session::Limit;\n use rustc_span::def_id::LOCAL_CRATE;\n use rustc_span::symbol::sym;\n@@ -1167,7 +1168,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                     }\n \n                     ty::PredicateKind::WellFormed(ty) => {\n-                        if !self.tcx.sess.opts.unstable_opts.chalk {\n+                        if self.tcx.sess.opts.unstable_opts.trait_solver != TraitSolver::Chalk {\n                             // WF predicates cannot themselves make\n                             // errors. They can only block due to\n                             // ambiguity; otherwise, they always"}, {"sha": "b0a730c8ad16865d3b6f7c8a12dd688edf42ed85", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/on_unimplemented.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14298997005486529e7a97b2ab9e9e376d6fdc72/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fon_unimplemented.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14298997005486529e7a97b2ab9e9e376d6fdc72/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fon_unimplemented.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fon_unimplemented.rs?ref=14298997005486529e7a97b2ab9e9e376d6fdc72", "patch": "@@ -117,7 +117,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                 Some(if movability.is_some() { \"an async closure\" } else { \"a closure\" })\n             }),\n             hir::Node::Expr(hir::Expr { .. }) => {\n-                let parent_hid = hir.get_parent_node(hir_id);\n+                let parent_hid = hir.parent_id(hir_id);\n                 if parent_hid != hir_id { self.describe_enclosure(parent_hid) } else { None }\n             }\n             _ => None,"}, {"sha": "8c2c182877496587a207501851fe73cbc882761f", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 10, "deletions": 12, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/14298997005486529e7a97b2ab9e9e376d6fdc72/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14298997005486529e7a97b2ab9e9e376d6fdc72/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=14298997005486529e7a97b2ab9e9e376d6fdc72", "patch": "@@ -838,8 +838,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n \n         let hir = self.tcx.hir();\n         let hir_id = hir.local_def_id_to_hir_id(def_id.as_local()?);\n-        let parent_node = hir.get_parent_node(hir_id);\n-        match hir.find(parent_node) {\n+        match hir.find_parent(hir_id) {\n             Some(hir::Node::Stmt(hir::Stmt { kind: hir::StmtKind::Local(local), .. })) => {\n                 get_name(err, &local.pat.kind)\n             }\n@@ -1421,7 +1420,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n         trait_pred: ty::PolyTraitPredicate<'tcx>,\n     ) -> bool {\n         let hir = self.tcx.hir();\n-        let parent_node = hir.get_parent_node(obligation.cause.body_id);\n+        let parent_node = hir.parent_id(obligation.cause.body_id);\n         let node = hir.find(parent_node);\n         if let Some(hir::Node::Item(hir::Item { kind: hir::ItemKind::Fn(sig, _, body_id), .. })) = node\n             && let hir::ExprKind::Block(blk, _) = &hir.body(*body_id).value.kind\n@@ -1458,7 +1457,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n \n     fn return_type_span(&self, obligation: &PredicateObligation<'tcx>) -> Option<Span> {\n         let hir = self.tcx.hir();\n-        let parent_node = hir.get_parent_node(obligation.cause.body_id);\n+        let parent_node = hir.parent_id(obligation.cause.body_id);\n         let Some(hir::Node::Item(hir::Item { kind: hir::ItemKind::Fn(sig, ..), .. })) = hir.find(parent_node) else {\n             return None;\n         };\n@@ -1483,7 +1482,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n         }\n \n         let hir = self.tcx.hir();\n-        let fn_hir_id = hir.get_parent_node(obligation.cause.body_id);\n+        let fn_hir_id = hir.parent_id(obligation.cause.body_id);\n         let node = hir.find(fn_hir_id);\n         let Some(hir::Node::Item(hir::Item {\n             kind: hir::ItemKind::Fn(sig, _, body_id),\n@@ -1695,7 +1694,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n         }\n \n         let hir = self.tcx.hir();\n-        let parent_node = hir.get_parent_node(obligation.cause.body_id);\n+        let parent_node = hir.parent_id(obligation.cause.body_id);\n         let node = hir.find(parent_node);\n         if let Some(hir::Node::Item(hir::Item { kind: hir::ItemKind::Fn(_, _, body_id), .. })) =\n             node\n@@ -2291,7 +2290,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                         let expr = hir.expect_expr(expr_id);\n                         debug!(\"target_ty evaluated from {:?}\", expr);\n \n-                        let parent = hir.get_parent_node(expr_id);\n+                        let parent = hir.parent_id(expr_id);\n                         if let Some(hir::Node::Expr(e)) = hir.find(parent) {\n                             let parent_span = hir.span(parent);\n                             let parent_did = parent.owner.to_def_id();\n@@ -2512,7 +2511,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                 }\n             }\n             ObligationCauseCode::VariableType(hir_id) => {\n-                let parent_node = self.tcx.hir().get_parent_node(hir_id);\n+                let parent_node = self.tcx.hir().parent_id(hir_id);\n                 match self.tcx.hir().find(parent_node) {\n                     Some(Node::Local(hir::Local { ty: Some(ty), .. })) => {\n                         err.span_suggestion_verbose(\n@@ -2992,7 +2991,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n         span: Span,\n     ) {\n         let body_hir_id = obligation.cause.body_id;\n-        let item_id = self.tcx.hir().get_parent_node(body_hir_id);\n+        let item_id = self.tcx.hir().parent_id(body_hir_id);\n \n         if let Some(body_id) =\n             self.tcx.hir().maybe_body_owned_by(self.tcx.hir().local_def_id(item_id))\n@@ -3219,7 +3218,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n             if let hir::ExprKind::Path(hir::QPath::Resolved(None, path)) = expr.kind\n                 && let hir::Path { res: hir::def::Res::Local(hir_id), .. } = path\n                 && let Some(hir::Node::Pat(binding)) = self.tcx.hir().find(*hir_id)\n-                && let parent_hir_id = self.tcx.hir().get_parent_node(binding.hir_id)\n+                && let parent_hir_id = self.tcx.hir().parent_id(binding.hir_id)\n                 && let Some(hir::Node::Local(local)) = self.tcx.hir().find(parent_hir_id)\n                 && let Some(binding_expr) = local.init\n             {\n@@ -3287,8 +3286,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n             if let hir::ExprKind::Path(hir::QPath::Resolved(None, path)) = expr.kind\n                 && let hir::Path { res: hir::def::Res::Local(hir_id), .. } = path\n                 && let Some(hir::Node::Pat(binding)) = self.tcx.hir().find(*hir_id)\n-                && let parent_hir_id = self.tcx.hir().get_parent_node(binding.hir_id)\n-                && let Some(parent) = self.tcx.hir().find(parent_hir_id)\n+                && let Some(parent) = self.tcx.hir().find_parent(binding.hir_id)\n             {\n                 // We've reached the root of the method call chain...\n                 if let hir::Node::Local(local) = parent"}, {"sha": "15526b34ed2d851a6f357b67e220e281b23cf52d", "filename": "compiler/rustc_trait_selection/src/traits/select/confirmation.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/14298997005486529e7a97b2ab9e9e376d6fdc72/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14298997005486529e7a97b2ab9e9e376d6fdc72/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs?ref=14298997005486529e7a97b2ab9e9e376d6fdc72", "patch": "@@ -15,6 +15,7 @@ use rustc_middle::ty::{\n     self, Binder, GenericArg, GenericArgKind, GenericParamDefKind, InternalSubsts, SubstsRef,\n     ToPolyTraitRef, ToPredicate, TraitRef, Ty, TyCtxt,\n };\n+use rustc_session::config::TraitSolver;\n use rustc_span::def_id::DefId;\n \n use crate::traits::project::{normalize_with_depth, normalize_with_depth_to};\n@@ -767,8 +768,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         debug!(?closure_def_id, ?trait_ref, ?nested, \"confirm closure candidate obligations\");\n \n         // FIXME: Chalk\n-\n-        if !self.tcx().sess.opts.unstable_opts.chalk {\n+        if self.tcx().sess.opts.unstable_opts.trait_solver != TraitSolver::Chalk {\n             nested.push(obligation.with(\n                 self.tcx(),\n                 ty::Binder::dummy(ty::PredicateKind::ClosureKind(closure_def_id, substs, kind)),"}, {"sha": "87923ebbe4bc948502d1fefca6a13935867bf864", "filename": "compiler/rustc_ty_utils/src/ty.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/14298997005486529e7a97b2ab9e9e376d6fdc72/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14298997005486529e7a97b2ab9e9e376d6fdc72/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs?ref=14298997005486529e7a97b2ab9e9e376d6fdc72", "patch": "@@ -2,6 +2,7 @@ use rustc_data_structures::fx::FxIndexSet;\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n use rustc_middle::ty::{self, Binder, Predicate, PredicateKind, ToPredicate, Ty, TyCtxt};\n+use rustc_session::config::TraitSolver;\n use rustc_trait_selection::traits;\n \n fn sized_constraint_for_ty<'tcx>(\n@@ -121,7 +122,7 @@ fn param_env(tcx: TyCtxt<'_>, def_id: DefId) -> ty::ParamEnv<'_> {\n     // are any errors at that point, so outside of type inference you can be\n     // sure that this will succeed without errors anyway.\n \n-    if tcx.sess.opts.unstable_opts.chalk {\n+    if tcx.sess.opts.unstable_opts.trait_solver == TraitSolver::Chalk {\n         let environment = well_formed_types_in_env(tcx, def_id);\n         predicates.extend(environment);\n     }\n@@ -161,7 +162,7 @@ fn param_env(tcx: TyCtxt<'_>, def_id: DefId) -> ty::ParamEnv<'_> {\n                 kind: hir::ImplItemKind::Type(..) | hir::ImplItemKind::Fn(..),\n                 ..\n             }) => {\n-                let parent_hir_id = tcx.hir().get_parent_node(hir_id);\n+                let parent_hir_id = tcx.hir().parent_id(hir_id);\n                 match tcx.hir().get(parent_hir_id) {\n                     hir::Node::Item(hir::Item {\n                         kind: hir::ItemKind::Impl(hir::Impl { constness, .. }),"}, {"sha": "f303bf1539e1e07dcdbd5afd897f54dec71036a3", "filename": "src/doc/rustc/src/platform-support/fuchsia.md", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/14298997005486529e7a97b2ab9e9e376d6fdc72/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support%2Ffuchsia.md", "raw_url": "https://github.com/rust-lang/rust/raw/14298997005486529e7a97b2ab9e9e376d6fdc72/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support%2Ffuchsia.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support%2Ffuchsia.md?ref=14298997005486529e7a97b2ab9e9e376d6fdc72", "patch": "@@ -198,6 +198,9 @@ target = [\"<host_platform>\", \"aarch64-fuchsia\", \"x86_64-fuchsia\"]\n [rust]\n lld = true\n \n+[llvm]\n+download-ci-llvm = false\n+\n [target.x86_64-fuchsia]\n cc = \"clang\"\n cxx = \"clang++\""}, {"sha": "cdc077e26bf22907a26e98805ed7a0f1a91b92d1", "filename": "src/librustdoc/html/static/css/rustdoc.css", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/14298997005486529e7a97b2ab9e9e376d6fdc72/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/14298997005486529e7a97b2ab9e9e376d6fdc72/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css?ref=14298997005486529e7a97b2ab9e9e376d6fdc72", "patch": "@@ -352,6 +352,7 @@ img {\n .sub-logo-container, .logo-container {\n \t/* zero text boxes so that computed line height = image height exactly */\n \tline-height: 0;\n+\tdisplay: block;\n }\n \n .sub-logo-container {\n@@ -495,7 +496,7 @@ ul.block, .block li {\n \tcolor: var(--sidebar-link-color);\n }\n .sidebar .current,\n-.sidebar a:hover {\n+.sidebar a:hover:not(.logo-container) {\n \tbackground-color: var(--sidebar-current-link-background-color);\n }\n \n@@ -1570,7 +1571,7 @@ in storage.js\n \n \t/* Hide the logo and item name from the sidebar. Those are displayed\n \t   in the mobile-topbar instead. */\n-\t.sidebar .sidebar-logo,\n+\t.sidebar .logo-container,\n \t.sidebar .location {\n \t\tdisplay: none;\n \t}"}, {"sha": "fddda293b9a86d98cf300cb1ebc672ae80fe1df3", "filename": "src/librustdoc/html/templates/page.html", "status": "modified", "additions": 12, "deletions": 16, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/14298997005486529e7a97b2ab9e9e376d6fdc72/src%2Flibrustdoc%2Fhtml%2Ftemplates%2Fpage.html", "raw_url": "https://github.com/rust-lang/rust/raw/14298997005486529e7a97b2ab9e9e376d6fdc72/src%2Flibrustdoc%2Fhtml%2Ftemplates%2Fpage.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Ftemplates%2Fpage.html?ref=14298997005486529e7a97b2ab9e9e376d6fdc72", "patch": "@@ -72,28 +72,24 @@\n     {%- if page.css_class != \"source\" -%}\n     <nav class=\"mobile-topbar\"> {#- -#}\n         <button class=\"sidebar-menu-toggle\">&#9776;</button> {#- -#}\n-        <a class=\"sidebar-logo\" href=\"{{page.root_path|safe}}{{krate_with_trailing_slash|safe}}index.html\"> {#- -#}\n-            <div class=\"logo-container\"> {#- -#}\n-            {%- if !layout.logo.is_empty() -%}\n-                <img src=\"{{layout.logo}}\" alt=\"logo\"> {#- -#}\n-            {%- else -%}\n-                <img class=\"rust-logo\" src=\"{{static_root_path|safe}}{{files.rust_logo_svg}}\" alt=\"logo\"> {#- -#}\n-            {%- endif -%}\n-            </div> {#- -#}\n+        <a class=\"logo-container\" href=\"{{page.root_path|safe}}{{krate_with_trailing_slash|safe}}index.html\"> {#- -#}\n+        {%- if !layout.logo.is_empty() -%}\n+            <img src=\"{{layout.logo}}\" alt=\"logo\"> {#- -#}\n+        {%- else -%}\n+            <img class=\"rust-logo\" src=\"{{static_root_path|safe}}{{files.rust_logo_svg}}\" alt=\"logo\"> {#- -#}\n+        {%- endif -%}\n         </a> {#- -#}\n         <h2></h2> {#- -#}\n     </nav> {#- -#}\n     {%- endif -%}\n     <nav class=\"sidebar\"> {#- -#}\n         {%- if page.css_class != \"source\" -%}\n-        <a class=\"sidebar-logo\" href=\"{{page.root_path|safe}}{{krate_with_trailing_slash|safe}}index.html\"> {#- -#}\n-            <div class=\"logo-container\"> {#- -#}\n-                {%- if !layout.logo.is_empty()  %}\n-                    <img src=\"{{layout.logo}}\" alt=\"logo\"> {#- -#}\n-                {%- else -%}\n-                    <img class=\"rust-logo\" src=\"{{static_root_path|safe}}{{files.rust_logo_svg}}\" alt=\"logo\"> {#- -#}\n-                {%- endif -%}\n-            </div> {#- -#}\n+        <a class=\"logo-container\" href=\"{{page.root_path|safe}}{{krate_with_trailing_slash|safe}}index.html\"> {#- -#}\n+            {%- if !layout.logo.is_empty()  %}\n+                <img src=\"{{layout.logo}}\" alt=\"logo\"> {#- -#}\n+            {%- else -%}\n+                <img class=\"rust-logo\" src=\"{{static_root_path|safe}}{{files.rust_logo_svg}}\" alt=\"logo\"> {#- -#}\n+            {%- endif -%}\n         </a> {#- -#}\n         {%- endif -%}\n         {{- sidebar|safe -}}"}, {"sha": "6aa2dda980cf31a14a41f014c76805a3c7692eeb", "filename": "src/librustdoc/passes/check_doc_test_visibility.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14298997005486529e7a97b2ab9e9e376d6fdc72/src%2Flibrustdoc%2Fpasses%2Fcheck_doc_test_visibility.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14298997005486529e7a97b2ab9e9e376d6fdc72/src%2Flibrustdoc%2Fpasses%2Fcheck_doc_test_visibility.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcheck_doc_test_visibility.rs?ref=14298997005486529e7a97b2ab9e9e376d6fdc72", "patch": "@@ -82,7 +82,7 @@ pub(crate) fn should_have_doc_example(cx: &DocContext<'_>, item: &clean::Item) -\n     let hir_id = cx.tcx.hir().local_def_id_to_hir_id(item.item_id.expect_def_id().expect_local());\n \n     // check if parent is trait impl\n-    if let Some(parent_hir_id) = cx.tcx.hir().find_parent_node(hir_id) {\n+    if let Some(parent_hir_id) = cx.tcx.hir().opt_parent_id(hir_id) {\n         if let Some(parent_node) = cx.tcx.hir().find(parent_hir_id) {\n             if matches!(\n                 parent_node,"}, {"sha": "537dc92be192101237c068f44fe856b9ac4f5cb0", "filename": "src/test/rustdoc-ui/z-help.stdout", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14298997005486529e7a97b2ab9e9e376d6fdc72/src%2Ftest%2Frustdoc-ui%2Fz-help.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/14298997005486529e7a97b2ab9e9e376d6fdc72/src%2Ftest%2Frustdoc-ui%2Fz-help.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fz-help.stdout?ref=14298997005486529e7a97b2ab9e9e376d6fdc72", "patch": "@@ -8,7 +8,6 @@\n     -Z                       branch-protection=val -- set options for branch target identification and pointer authentication on AArch64\n     -Z                           cf-protection=val -- instrument control-flow architecture protection\n     -Z               cgu-partitioning-strategy=val -- the codegen unit partitioning strategy to use\n-    -Z                                   chalk=val -- enable the experimental Chalk-based trait solving engine\n     -Z                         codegen-backend=val -- the backend to use\n     -Z                             combine-cgu=val -- combine CGUs into a single one\n     -Z                              crate-attr=val -- inject the given attribute in the crate\n@@ -175,6 +174,7 @@\n     -Z                               tls-model=val -- choose the TLS model to use (`rustc --print tls-models` for details)\n     -Z                            trace-macros=val -- for every macro invocation, print its name and arguments (default: no)\n     -Z                       track-diagnostics=val -- tracks where in rustc a diagnostic was emitted\n+    -Z                            trait-solver=val -- specify the trait solver mode used by rustc (default: classic)\n     -Z                translate-additional-ftl=val -- additional fluent translation to preferentially use (for testing translation)\n     -Z        translate-directionality-markers=val -- emit directionality isolation markers in translated diagnostics\n     -Z                          translate-lang=val -- language identifier for diagnostic output"}, {"sha": "ea9ad39a70d81d2b6db694dcc56d406a2dcca461", "filename": "src/test/ui/alloc-error/alloc-error-handler-bad-signature-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14298997005486529e7a97b2ab9e9e376d6fdc72/src%2Ftest%2Fui%2Falloc-error%2Falloc-error-handler-bad-signature-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14298997005486529e7a97b2ab9e9e376d6fdc72/src%2Ftest%2Fui%2Falloc-error%2Falloc-error-handler-bad-signature-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Falloc-error%2Falloc-error-handler-bad-signature-3.rs?ref=14298997005486529e7a97b2ab9e9e376d6fdc72", "patch": "@@ -7,7 +7,7 @@\n struct Layout;\n \n #[alloc_error_handler]\n-fn oom() -> ! { //~ ERROR this function takes 0 arguments but 1 argument was supplied\n+fn oom() -> ! { //~ ERROR function takes 0 arguments but 1 argument was supplied\n     loop {}\n }\n "}, {"sha": "961e7a50e56381129abb247f3ae8023674b22a0b", "filename": "src/test/ui/argument-suggestions/basic.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/14298997005486529e7a97b2ab9e9e376d6fdc72/src%2Ftest%2Fui%2Fargument-suggestions%2Fbasic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14298997005486529e7a97b2ab9e9e376d6fdc72/src%2Ftest%2Fui%2Fargument-suggestions%2Fbasic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fargument-suggestions%2Fbasic.rs?ref=14298997005486529e7a97b2ab9e9e376d6fdc72", "patch": "@@ -18,11 +18,11 @@ fn permuted(_x: X, _y: Y, _z: Z) {}\n \n fn main() {\n     invalid(1.0); //~ ERROR mismatched types\n-    extra(\"\"); //~ ERROR this function takes\n-    missing(); //~ ERROR this function takes\n+    extra(\"\"); //~ ERROR function takes\n+    missing(); //~ ERROR function takes\n     swapped(\"\", 1); //~ ERROR arguments to this function are incorrect\n     permuted(Y {}, Z {}, X {}); //~ ERROR arguments to this function are incorrect\n \n     let closure = |x| x;\n-    closure(); //~ ERROR this function takes\n+    closure(); //~ ERROR function takes\n }"}, {"sha": "acb61f543088a5062ca9bc7387b99fb8839ecd05", "filename": "src/test/ui/argument-suggestions/display-is-suggestable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14298997005486529e7a97b2ab9e9e376d6fdc72/src%2Ftest%2Fui%2Fargument-suggestions%2Fdisplay-is-suggestable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14298997005486529e7a97b2ab9e9e376d6fdc72/src%2Ftest%2Fui%2Fargument-suggestions%2Fdisplay-is-suggestable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fargument-suggestions%2Fdisplay-is-suggestable.rs?ref=14298997005486529e7a97b2ab9e9e376d6fdc72", "patch": "@@ -4,5 +4,5 @@ fn foo(x: &(dyn Display + Send)) {}\n \n fn main() {\n     foo();\n-    //~^ ERROR this function takes 1 argument but 0 arguments were supplied\n+    //~^ ERROR function takes 1 argument but 0 arguments were supplied\n }"}, {"sha": "569a39a2b450dbbe10c46e2f5b0658900b0723b1", "filename": "src/test/ui/argument-suggestions/exotic-calls.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/14298997005486529e7a97b2ab9e9e376d6fdc72/src%2Ftest%2Fui%2Fargument-suggestions%2Fexotic-calls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14298997005486529e7a97b2ab9e9e376d6fdc72/src%2Ftest%2Fui%2Fargument-suggestions%2Fexotic-calls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fargument-suggestions%2Fexotic-calls.rs?ref=14298997005486529e7a97b2ab9e9e376d6fdc72", "patch": "@@ -1,11 +1,11 @@\n fn foo<T: Fn()>(t: T) {\n     t(1i32);\n-    //~^ ERROR this function takes 0 arguments but 1 argument was supplied\n+    //~^ ERROR function takes 0 arguments but 1 argument was supplied\n }\n \n fn bar(t: impl Fn()) {\n     t(1i32);\n-    //~^ ERROR this function takes 0 arguments but 1 argument was supplied\n+    //~^ ERROR function takes 0 arguments but 1 argument was supplied\n }\n \n fn baz() -> impl Fn() {\n@@ -14,13 +14,13 @@ fn baz() -> impl Fn() {\n \n fn baz2() {\n     baz()(1i32)\n-    //~^ ERROR this function takes 0 arguments but 1 argument was supplied\n+    //~^ ERROR function takes 0 arguments but 1 argument was supplied\n }\n \n fn qux() {\n     let x = || {};\n     x(1i32);\n-    //~^ ERROR this function takes 0 arguments but 1 argument was supplied\n+    //~^ ERROR function takes 0 arguments but 1 argument was supplied\n }\n \n fn main() {}"}, {"sha": "df2fd6624cd0ce183321be488293c1a35e562224", "filename": "src/test/ui/argument-suggestions/extern-fn-arg-names.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14298997005486529e7a97b2ab9e9e376d6fdc72/src%2Ftest%2Fui%2Fargument-suggestions%2Fextern-fn-arg-names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14298997005486529e7a97b2ab9e9e376d6fdc72/src%2Ftest%2Fui%2Fargument-suggestions%2Fextern-fn-arg-names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fargument-suggestions%2Fextern-fn-arg-names.rs?ref=14298997005486529e7a97b2ab9e9e376d6fdc72", "patch": "@@ -5,5 +5,5 @@ extern \"Rust\" {\n \n fn main() {\n     dstfn(1);\n-    //~^ ERROR this function takes 2 arguments but 1 argument was supplied\n+    //~^ ERROR function takes 2 arguments but 1 argument was supplied\n }"}, {"sha": "3f83de95e2d549cfdf4f1b4fd4426419517af23a", "filename": "src/test/ui/argument-suggestions/extra_arguments.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/14298997005486529e7a97b2ab9e9e376d6fdc72/src%2Ftest%2Fui%2Fargument-suggestions%2Fextra_arguments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14298997005486529e7a97b2ab9e9e376d6fdc72/src%2Ftest%2Fui%2Fargument-suggestions%2Fextra_arguments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fargument-suggestions%2Fextra_arguments.rs?ref=14298997005486529e7a97b2ab9e9e376d6fdc72", "patch": "@@ -4,30 +4,30 @@ fn two_arg_same(_a: i32, _b: i32) {}\n fn two_arg_diff(_a: i32, _b: &str) {}\n \n fn main() {\n-  empty(\"\"); //~ ERROR this function takes\n+  empty(\"\"); //~ ERROR function takes\n \n-  one_arg(1, 1); //~ ERROR this function takes\n-  one_arg(1, \"\"); //~ ERROR this function takes\n-  one_arg(1, \"\", 1.0); //~ ERROR this function takes\n+  one_arg(1, 1); //~ ERROR function takes\n+  one_arg(1, \"\"); //~ ERROR function takes\n+  one_arg(1, \"\", 1.0); //~ ERROR function takes\n \n-  two_arg_same(1, 1, 1); //~ ERROR this function takes\n-  two_arg_same(1, 1, 1.0); //~ ERROR this function takes\n+  two_arg_same(1, 1, 1); //~ ERROR function takes\n+  two_arg_same(1, 1, 1.0); //~ ERROR function takes\n \n-  two_arg_diff(1, 1, \"\"); //~ ERROR this function takes\n-  two_arg_diff(1, \"\", \"\"); //~ ERROR this function takes\n-  two_arg_diff(1, 1, \"\", \"\"); //~ ERROR this function takes\n-  two_arg_diff(1, \"\", 1, \"\"); //~ ERROR this function takes\n+  two_arg_diff(1, 1, \"\"); //~ ERROR function takes\n+  two_arg_diff(1, \"\", \"\"); //~ ERROR function takes\n+  two_arg_diff(1, 1, \"\", \"\"); //~ ERROR function takes\n+  two_arg_diff(1, \"\", 1, \"\"); //~ ERROR function takes\n \n   // Check with weird spacing and newlines\n-  two_arg_same(1, 1,     \"\"); //~ ERROR this function takes\n-  two_arg_diff(1, 1,     \"\"); //~ ERROR this function takes\n-  two_arg_same( //~ ERROR this function takes\n+  two_arg_same(1, 1,     \"\"); //~ ERROR function takes\n+  two_arg_diff(1, 1,     \"\"); //~ ERROR function takes\n+  two_arg_same( //~ ERROR function takes\n     1,\n     1,\n     \"\"\n   );\n \n-  two_arg_diff( //~ ERROR this function takes\n+  two_arg_diff( //~ ERROR function takes\n     1,\n     1,\n     \"\""}, {"sha": "fb0af05e9dc553cf3509a70564aa61a0e1978e3a", "filename": "src/test/ui/argument-suggestions/issue-100154.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14298997005486529e7a97b2ab9e9e376d6fdc72/src%2Ftest%2Fui%2Fargument-suggestions%2Fissue-100154.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14298997005486529e7a97b2ab9e9e376d6fdc72/src%2Ftest%2Fui%2Fargument-suggestions%2Fissue-100154.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fargument-suggestions%2Fissue-100154.rs?ref=14298997005486529e7a97b2ab9e9e376d6fdc72", "patch": "@@ -2,6 +2,6 @@ fn foo(i: impl std::fmt::Display) {}\n \n fn main() {\n     foo::<()>(());\n-    //~^ ERROR this function takes 0 generic arguments but 1 generic argument was supplied\n+    //~^ ERROR function takes 0 generic arguments but 1 generic argument was supplied\n     //~| ERROR `()` doesn't implement `std::fmt::Display`\n }"}, {"sha": "fb50fa115376b3a9a6a9eb08d042aadbdcc9a1dc", "filename": "src/test/ui/argument-suggestions/issue-100478.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14298997005486529e7a97b2ab9e9e376d6fdc72/src%2Ftest%2Fui%2Fargument-suggestions%2Fissue-100478.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14298997005486529e7a97b2ab9e9e376d6fdc72/src%2Ftest%2Fui%2Fargument-suggestions%2Fissue-100478.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fargument-suggestions%2Fissue-100478.rs?ref=14298997005486529e7a97b2ab9e9e376d6fdc72", "patch": "@@ -31,7 +31,7 @@ fn three_diff(_a: T1, _b: T2, _c: T3) {}\n fn four_shuffle(_a: T1, _b: T2, _c: T3, _d: T4) {}\n \n fn main() {\n-    three_diff(T2::new(0)); //~ ERROR this function takes\n+    three_diff(T2::new(0)); //~ ERROR function takes\n     four_shuffle(T3::default(), T4::default(), T1::default(), T2::default()); //~ ERROR 35:5: 35:17: arguments to this function are incorrect [E0308]\n     four_shuffle(T3::default(), T2::default(), T1::default(), T3::default()); //~ ERROR 36:5: 36:17: arguments to this function are incorrect [E0308]\n "}, {"sha": "25f7f58379923cc53a6d29a464649e2f91bf9df3", "filename": "src/test/ui/argument-suggestions/issue-101097.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14298997005486529e7a97b2ab9e9e376d6fdc72/src%2Ftest%2Fui%2Fargument-suggestions%2Fissue-101097.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14298997005486529e7a97b2ab9e9e376d6fdc72/src%2Ftest%2Fui%2Fargument-suggestions%2Fissue-101097.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fargument-suggestions%2Fissue-101097.rs?ref=14298997005486529e7a97b2ab9e9e376d6fdc72", "patch": "@@ -13,7 +13,7 @@ fn f(\n ) {}\n \n fn main() {\n-    f(C, A, A, A, B, B, C); //~ ERROR this function takes 6 arguments but 7 arguments were supplied [E0061]\n+    f(C, A, A, A, B, B, C); //~ ERROR function takes 6 arguments but 7 arguments were supplied [E0061]\n     f(C, C, A, A, B, B);  //~ ERROR arguments to this function are incorrect [E0308]\n     f(A, A, D, D, B, B);  //~ arguments to this function are incorrect [E0308]\n     f(C, C, B, B, A, A);  //~ arguments to this function are incorrect [E0308]"}, {"sha": "5e720f174c24015ea652077854103afb24c152ad", "filename": "src/test/ui/argument-suggestions/issue-96638.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14298997005486529e7a97b2ab9e9e376d6fdc72/src%2Ftest%2Fui%2Fargument-suggestions%2Fissue-96638.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14298997005486529e7a97b2ab9e9e376d6fdc72/src%2Ftest%2Fui%2Fargument-suggestions%2Fissue-96638.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fargument-suggestions%2Fissue-96638.rs?ref=14298997005486529e7a97b2ab9e9e376d6fdc72", "patch": "@@ -5,5 +5,5 @@ fn arg<T>() -> T { todo!() }\n fn main() {\n     let x = arg(); // `x` must be inferred\n     // The reference on `&x` is important to reproduce the ICE\n-    f(&x, \"\"); //~ ERROR this function takes 3 arguments but 2 arguments were supplied\n+    f(&x, \"\"); //~ ERROR function takes 3 arguments but 2 arguments were supplied\n }"}, {"sha": "4c22608ae6a476ca2420057d94a7f0e6bcdbdb84", "filename": "src/test/ui/argument-suggestions/issue-97197.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14298997005486529e7a97b2ab9e9e376d6fdc72/src%2Ftest%2Fui%2Fargument-suggestions%2Fissue-97197.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14298997005486529e7a97b2ab9e9e376d6fdc72/src%2Ftest%2Fui%2Fargument-suggestions%2Fissue-97197.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fargument-suggestions%2Fissue-97197.rs?ref=14298997005486529e7a97b2ab9e9e376d6fdc72", "patch": "@@ -1,6 +1,6 @@\n fn main() {\n     g((), ());\n-    //~^ ERROR this function takes 6 arguments but 2 arguments were supplied\n+    //~^ ERROR function takes 6 arguments but 2 arguments were supplied\n }\n \n pub fn g(a1: (), a2: bool, a3: bool, a4: bool, a5: bool, a6: ()) -> () {}"}, {"sha": "9e537b0c35f96bceb3cd3a86f3e41431d5a5b594", "filename": "src/test/ui/argument-suggestions/issue-97484.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14298997005486529e7a97b2ab9e9e376d6fdc72/src%2Ftest%2Fui%2Fargument-suggestions%2Fissue-97484.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14298997005486529e7a97b2ab9e9e376d6fdc72/src%2Ftest%2Fui%2Fargument-suggestions%2Fissue-97484.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fargument-suggestions%2Fissue-97484.rs?ref=14298997005486529e7a97b2ab9e9e376d6fdc72", "patch": "@@ -10,5 +10,5 @@ fn foo(a: &A, d: D, e: &E, g: G) {}\n \n fn main() {\n     foo(&&A, B, C, D, E, F, G);\n-    //~^ ERROR this function takes 4 arguments but 7 arguments were supplied\n+    //~^ ERROR function takes 4 arguments but 7 arguments were supplied\n }"}, {"sha": "e421eba97758e6de8ede6363c69b049043f33d40", "filename": "src/test/ui/argument-suggestions/issue-98894.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14298997005486529e7a97b2ab9e9e376d6fdc72/src%2Ftest%2Fui%2Fargument-suggestions%2Fissue-98894.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14298997005486529e7a97b2ab9e9e376d6fdc72/src%2Ftest%2Fui%2Fargument-suggestions%2Fissue-98894.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fargument-suggestions%2Fissue-98894.rs?ref=14298997005486529e7a97b2ab9e9e376d6fdc72", "patch": "@@ -1,4 +1,4 @@\n fn main() {\n     (|_, ()| ())(if true {} else {return;});\n-    //~^ ERROR this function takes 2 arguments but 1 argument was supplied\n+    //~^ ERROR function takes 2 arguments but 1 argument was supplied\n }"}, {"sha": "27734f74dee78420506485adbcce02342a691c9c", "filename": "src/test/ui/argument-suggestions/issue-98897.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14298997005486529e7a97b2ab9e9e376d6fdc72/src%2Ftest%2Fui%2Fargument-suggestions%2Fissue-98897.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14298997005486529e7a97b2ab9e9e376d6fdc72/src%2Ftest%2Fui%2Fargument-suggestions%2Fissue-98897.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fargument-suggestions%2Fissue-98897.rs?ref=14298997005486529e7a97b2ab9e9e376d6fdc72", "patch": "@@ -1,4 +1,4 @@\n fn main() {\n     (|_, ()| ())([return, ()]);\n-    //~^ ERROR this function takes 2 arguments but 1 argument was supplied\n+    //~^ ERROR function takes 2 arguments but 1 argument was supplied\n }"}, {"sha": "7bbb39f8d62e2824d43b48cc22f89697e0acd625", "filename": "src/test/ui/argument-suggestions/issue-99482.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14298997005486529e7a97b2ab9e9e376d6fdc72/src%2Ftest%2Fui%2Fargument-suggestions%2Fissue-99482.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14298997005486529e7a97b2ab9e9e376d6fdc72/src%2Ftest%2Fui%2Fargument-suggestions%2Fissue-99482.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fargument-suggestions%2Fissue-99482.rs?ref=14298997005486529e7a97b2ab9e9e376d6fdc72", "patch": "@@ -1,5 +1,5 @@\n fn main() {\n     let f = |_: (), f: fn()| f;\n     let _f = f(main);\n-    //~^ ERROR this function takes 2 arguments but 1 argument was supplied\n+    //~^ ERROR function takes 2 arguments but 1 argument was supplied\n }"}, {"sha": "c26564641cb9f77b72b4f54a0c880b9e84079e61", "filename": "src/test/ui/argument-suggestions/missing_arguments.rs", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/14298997005486529e7a97b2ab9e9e376d6fdc72/src%2Ftest%2Fui%2Fargument-suggestions%2Fmissing_arguments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14298997005486529e7a97b2ab9e9e376d6fdc72/src%2Ftest%2Fui%2Fargument-suggestions%2Fmissing_arguments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fargument-suggestions%2Fmissing_arguments.rs?ref=14298997005486529e7a97b2ab9e9e376d6fdc72", "patch": "@@ -7,34 +7,34 @@ fn four_repeated(_a: i32, _b: f32, _c: f32, _d: &str) {}\n fn complex(_a: i32, _b: f32, _c: i32, _d: f32, _e: &str) {}\n \n fn main() {\n-  one_arg(); //~ ERROR this function takes\n+  one_arg(); //~ ERROR function takes\n   // The headers here show the types expected,\n   // with formatting to emphasize which arguments are missing\n   /*         i32     f32    */\n-  two_same(               ); //~ ERROR this function takes\n-  two_same(   1           ); //~ ERROR this function takes\n-  two_diff(               ); //~ ERROR this function takes\n-  two_diff(   1           ); //~ ERROR this function takes\n-  two_diff(          1.0  ); //~ ERROR this function takes\n+  two_same(               ); //~ ERROR function takes\n+  two_same(   1           ); //~ ERROR function takes\n+  two_diff(               ); //~ ERROR function takes\n+  two_diff(   1           ); //~ ERROR function takes\n+  two_diff(          1.0  ); //~ ERROR function takes\n \n   /*           i32     i32     i32    */\n-  three_same(                       ); //~ ERROR this function takes\n-  three_same(   1                   ); //~ ERROR this function takes\n-  three_same(   1,      1           ); //~ ERROR this function takes\n+  three_same(                       ); //~ ERROR function takes\n+  three_same(   1                   ); //~ ERROR function takes\n+  three_same(   1,      1           ); //~ ERROR function takes\n \n   /*           i32     f32     &str   */\n-  three_diff(          1.0,     \"\"  ); //~ ERROR this function takes\n-  three_diff(   1,              \"\"  ); //~ ERROR this function takes\n-  three_diff(   1,     1.0          ); //~ ERROR this function takes\n-  three_diff(                   \"\"  ); //~ ERROR this function takes\n-  three_diff(          1.0          ); //~ ERROR this function takes\n-  three_diff(   1                   ); //~ ERROR this function takes\n+  three_diff(          1.0,     \"\"  ); //~ ERROR function takes\n+  three_diff(   1,              \"\"  ); //~ ERROR function takes\n+  three_diff(   1,     1.0          ); //~ ERROR function takes\n+  three_diff(                   \"\"  ); //~ ERROR function takes\n+  three_diff(          1.0          ); //~ ERROR function takes\n+  three_diff(   1                   ); //~ ERROR function takes\n \n   /*              i32     f32     f32     &str   */\n-  four_repeated(                               ); //~ ERROR this function takes\n-  four_repeated(   1,                     \"\"   ); //~ ERROR this function takes\n+  four_repeated(                               ); //~ ERROR function takes\n+  four_repeated(   1,                     \"\"   ); //~ ERROR function takes\n \n   /*        i32   f32   i32   f32   &str   */\n-  complex(                               ); //~ ERROR this function takes\n-  complex(   1,                     \"\"   ); //~ ERROR this function takes\n+  complex(                               ); //~ ERROR function takes\n+  complex(   1,                     \"\"   ); //~ ERROR function takes\n }"}, {"sha": "86e94a4382c0d31b89da6341c5b40e582e118d36", "filename": "src/test/ui/argument-suggestions/mixed_cases.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/14298997005486529e7a97b2ab9e9e376d6fdc72/src%2Ftest%2Fui%2Fargument-suggestions%2Fmixed_cases.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14298997005486529e7a97b2ab9e9e376d6fdc72/src%2Ftest%2Fui%2Fargument-suggestions%2Fmixed_cases.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fargument-suggestions%2Fmixed_cases.rs?ref=14298997005486529e7a97b2ab9e9e376d6fdc72", "patch": "@@ -7,11 +7,11 @@ fn three_args(_a: i32, _b: f32, _c: &str) {}\n \n fn main() {\n   // Extra + Invalid\n-  two_args(1, \"\", X {}); //~ ERROR this function takes\n-  three_args(1, \"\", X {}, \"\"); //~ ERROR this function takes\n+  two_args(1, \"\", X {}); //~ ERROR function takes\n+  three_args(1, \"\", X {}, \"\"); //~ ERROR function takes\n \n   // Missing and Invalid\n-  three_args(1, X {}); //~ ERROR this function takes\n+  three_args(1, X {}); //~ ERROR function takes\n \n   // Missing and Extra\n   three_args(1, \"\", X {}); //~ ERROR arguments to this function are incorrect\n@@ -20,5 +20,5 @@ fn main() {\n   three_args(\"\", X {}, 1); //~ ERROR arguments to this function are incorrect\n \n   // Swapped and missing\n-  three_args(\"\", 1); //~ ERROR this function takes\n+  three_args(\"\", 1); //~ ERROR function takes\n }"}, {"sha": "4928943294bf54ae81a2a3c3988c051904a3fda5", "filename": "src/test/ui/argument-suggestions/too-long.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14298997005486529e7a97b2ab9e9e376d6fdc72/src%2Ftest%2Fui%2Fargument-suggestions%2Ftoo-long.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14298997005486529e7a97b2ab9e9e376d6fdc72/src%2Ftest%2Fui%2Fargument-suggestions%2Ftoo-long.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fargument-suggestions%2Ftoo-long.stderr?ref=14298997005486529e7a97b2ab9e9e376d6fdc72", "patch": "@@ -4,7 +4,7 @@ error[E0308]: mismatched types\n LL |     qux.foo(a, b, c, d, e, f, g, h, i, j, k, l);\n    |         ---                ^ expected `i32`, found `&i32`\n    |         |\n-   |         arguments to this function are incorrect\n+   |         arguments to this method are incorrect\n    |\n note: associated function defined here\n   --> $DIR/too-long.rs:4:8"}, {"sha": "d6b18d4ed32e7e907aa77455f73c3666030e5c6b", "filename": "src/test/ui/associated-types/associated-type-projection-from-supertrait.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/14298997005486529e7a97b2ab9e9e376d6fdc72/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-type-projection-from-supertrait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14298997005486529e7a97b2ab9e9e376d6fdc72/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-type-projection-from-supertrait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-type-projection-from-supertrait.stderr?ref=14298997005486529e7a97b2ab9e9e376d6fdc72", "patch": "@@ -32,7 +32,7 @@ error[E0308]: mismatched types\n LL | fn f() { ModelT.chip_paint(Blue); }\n    |                 ---------- ^^^^ expected struct `Black`, found struct `Blue`\n    |                 |\n-   |                 arguments to this function are incorrect\n+   |                 arguments to this method are incorrect\n    |\n note: associated function defined here\n   --> $DIR/associated-type-projection-from-supertrait.rs:12:8\n@@ -46,7 +46,7 @@ error[E0308]: mismatched types\n LL | fn g() { ModelU.chip_paint(Black); }\n    |                 ---------- ^^^^^ expected struct `Blue`, found struct `Black`\n    |                 |\n-   |                 arguments to this function are incorrect\n+   |                 arguments to this method are incorrect\n    |\n note: associated function defined here\n   --> $DIR/associated-type-projection-from-supertrait.rs:12:8"}, {"sha": "acd8a25dc533bd6120419dc82c5483e92f6243ff", "filename": "src/test/ui/c-variadic/variadic-ffi-1.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/14298997005486529e7a97b2ab9e9e376d6fdc72/src%2Ftest%2Fui%2Fc-variadic%2Fvariadic-ffi-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14298997005486529e7a97b2ab9e9e376d6fdc72/src%2Ftest%2Fui%2Fc-variadic%2Fvariadic-ffi-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fc-variadic%2Fvariadic-ffi-1.rs?ref=14298997005486529e7a97b2ab9e9e376d6fdc72", "patch": "@@ -19,8 +19,8 @@ extern \"C\" fn bar(f: isize, x: u8) {}\n \n fn main() {\n     unsafe {\n-        foo(); //~ ERROR this function takes at least 2 arguments but 0 arguments were supplied\n-        foo(1); //~ ERROR this function takes at least 2 arguments but 1 argument was supplied\n+        foo(); //~ ERROR function takes at least 2 arguments but 0 arguments were supplied\n+        foo(1); //~ ERROR function takes at least 2 arguments but 1 argument was supplied\n \n         let x: unsafe extern \"C\" fn(f: isize, x: u8) = foo; //~ ERROR mismatched types\n         let y: extern \"C\" fn(f: isize, x: u8, ...) = bar; //~ ERROR mismatched types"}, {"sha": "6c78a71b0fc9d9faa06f7ea43f5391491341bba8", "filename": "src/test/ui/chalkify/arithmetic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14298997005486529e7a97b2ab9e9e376d6fdc72/src%2Ftest%2Fui%2Fchalkify%2Farithmetic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14298997005486529e7a97b2ab9e9e376d6fdc72/src%2Ftest%2Fui%2Fchalkify%2Farithmetic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fchalkify%2Farithmetic.rs?ref=14298997005486529e7a97b2ab9e9e376d6fdc72", "patch": "@@ -1,5 +1,5 @@\n // check-pass\n-// compile-flags: -Z chalk\n+// compile-flags: -Z trait-solver=chalk\n \n fn main() {\n     1 + 2;"}, {"sha": "834c8935e762006e4b04b60a5b1c3cf1ca99de4c", "filename": "src/test/ui/chalkify/assert.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14298997005486529e7a97b2ab9e9e376d6fdc72/src%2Ftest%2Fui%2Fchalkify%2Fassert.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14298997005486529e7a97b2ab9e9e376d6fdc72/src%2Ftest%2Fui%2Fchalkify%2Fassert.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fchalkify%2Fassert.rs?ref=14298997005486529e7a97b2ab9e9e376d6fdc72", "patch": "@@ -1,5 +1,5 @@\n // run-pass\n-// compile-flags: -Z chalk\n+// compile-flags: -Z trait-solver=chalk\n \n fn main() {\n     assert_eq!(1, 1);"}, {"sha": "4a7cd9396690a9d2d7015760905e91ef63bd2356", "filename": "src/test/ui/chalkify/basic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14298997005486529e7a97b2ab9e9e376d6fdc72/src%2Ftest%2Fui%2Fchalkify%2Fbasic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14298997005486529e7a97b2ab9e9e376d6fdc72/src%2Ftest%2Fui%2Fchalkify%2Fbasic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fchalkify%2Fbasic.rs?ref=14298997005486529e7a97b2ab9e9e376d6fdc72", "patch": "@@ -1,5 +1,5 @@\n // check-pass\n-// compile-flags: -Z chalk\n+// compile-flags: -Z trait-solver=chalk\n \n trait Foo {}\n "}, {"sha": "ed0f5dc9bd371208beef2cc965aad75399b412d2", "filename": "src/test/ui/chalkify/bugs/async.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14298997005486529e7a97b2ab9e9e376d6fdc72/src%2Ftest%2Fui%2Fchalkify%2Fbugs%2Fasync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14298997005486529e7a97b2ab9e9e376d6fdc72/src%2Ftest%2Fui%2Fchalkify%2Fbugs%2Fasync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fchalkify%2Fbugs%2Fasync.rs?ref=14298997005486529e7a97b2ab9e9e376d6fdc72", "patch": "@@ -1,6 +1,6 @@\n // check-fail\n // known-bug: unknown\n-// compile-flags: -Z chalk --edition=2021\n+// compile-flags: -Z trait-solver=chalk --edition=2021\n \n fn main() -> () {}\n "}, {"sha": "a478c006ef1ca05de08f59389836b038fc977f8c", "filename": "src/test/ui/chalkify/builtin-copy-clone.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14298997005486529e7a97b2ab9e9e376d6fdc72/src%2Ftest%2Fui%2Fchalkify%2Fbuiltin-copy-clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14298997005486529e7a97b2ab9e9e376d6fdc72/src%2Ftest%2Fui%2Fchalkify%2Fbuiltin-copy-clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fchalkify%2Fbuiltin-copy-clone.rs?ref=14298997005486529e7a97b2ab9e9e376d6fdc72", "patch": "@@ -1,5 +1,5 @@\n // run-pass\n-// compile-flags: -Z chalk\n+// compile-flags: -Z trait-solver=chalk\n \n // Test that `Clone` is correctly implemented for builtin types.\n "}, {"sha": "21de72b6fcccbc8c2d3eca1a2a1d30eca121564c", "filename": "src/test/ui/chalkify/chalk_initial_program.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14298997005486529e7a97b2ab9e9e376d6fdc72/src%2Ftest%2Fui%2Fchalkify%2Fchalk_initial_program.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14298997005486529e7a97b2ab9e9e376d6fdc72/src%2Ftest%2Fui%2Fchalkify%2Fchalk_initial_program.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fchalkify%2Fchalk_initial_program.rs?ref=14298997005486529e7a97b2ab9e9e376d6fdc72", "patch": "@@ -1,4 +1,4 @@\n-// compile-flags: -Z chalk\n+// compile-flags: -Z trait-solver=chalk\n \n trait Foo { }\n "}, {"sha": "a908a1e97ecd9c3491a7ddcd70ef3a2b73cff2c8", "filename": "src/test/ui/chalkify/closure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14298997005486529e7a97b2ab9e9e376d6fdc72/src%2Ftest%2Fui%2Fchalkify%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14298997005486529e7a97b2ab9e9e376d6fdc72/src%2Ftest%2Fui%2Fchalkify%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fchalkify%2Fclosure.rs?ref=14298997005486529e7a97b2ab9e9e376d6fdc72", "patch": "@@ -1,4 +1,4 @@\n-// compile-flags: -Z chalk\n+// compile-flags: -Z trait-solver=chalk\n \n fn main() -> () {\n     let t = || {};"}, {"sha": "7d33e12d8be1739e31dd876e504dada3e66007ca", "filename": "src/test/ui/chalkify/generic_impls.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14298997005486529e7a97b2ab9e9e376d6fdc72/src%2Ftest%2Fui%2Fchalkify%2Fgeneric_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14298997005486529e7a97b2ab9e9e376d6fdc72/src%2Ftest%2Fui%2Fchalkify%2Fgeneric_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fchalkify%2Fgeneric_impls.rs?ref=14298997005486529e7a97b2ab9e9e376d6fdc72", "patch": "@@ -1,4 +1,4 @@\n-// compile-flags: -Z chalk\n+// compile-flags: -Z trait-solver=chalk\n \n trait Foo { }\n "}, {"sha": "c8dfd4c3a5b4fa51d6b1d8e1e4551b8c6ba31613", "filename": "src/test/ui/chalkify/impl_wf.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14298997005486529e7a97b2ab9e9e376d6fdc72/src%2Ftest%2Fui%2Fchalkify%2Fimpl_wf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14298997005486529e7a97b2ab9e9e376d6fdc72/src%2Ftest%2Fui%2Fchalkify%2Fimpl_wf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fchalkify%2Fimpl_wf.rs?ref=14298997005486529e7a97b2ab9e9e376d6fdc72", "patch": "@@ -1,4 +1,4 @@\n-// compile-flags: -Z chalk\n+// compile-flags: -Z trait-solver=chalk\n \n trait Foo: Sized { }\n "}, {"sha": "325044ad6349a94a32b50f74186c401372703c58", "filename": "src/test/ui/chalkify/impl_wf_2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14298997005486529e7a97b2ab9e9e376d6fdc72/src%2Ftest%2Fui%2Fchalkify%2Fimpl_wf_2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14298997005486529e7a97b2ab9e9e376d6fdc72/src%2Ftest%2Fui%2Fchalkify%2Fimpl_wf_2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fchalkify%2Fimpl_wf_2.rs?ref=14298997005486529e7a97b2ab9e9e376d6fdc72", "patch": "@@ -1,6 +1,6 @@\n // Split out of impl_wf.rs to work around rust aborting compilation early\n \n-// compile-flags: -Z chalk\n+// compile-flags: -Z trait-solver=chalk\n \n trait Foo: Sized { }\n "}, {"sha": "f0f24d485cd8748993f9391d5f5538489c11181c", "filename": "src/test/ui/chalkify/inherent_impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14298997005486529e7a97b2ab9e9e376d6fdc72/src%2Ftest%2Fui%2Fchalkify%2Finherent_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14298997005486529e7a97b2ab9e9e376d6fdc72/src%2Ftest%2Fui%2Fchalkify%2Finherent_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fchalkify%2Finherent_impl.rs?ref=14298997005486529e7a97b2ab9e9e376d6fdc72", "patch": "@@ -1,5 +1,5 @@\n // run-pass\n-// compile-flags: -Z chalk\n+// compile-flags: -Z trait-solver=chalk\n \n trait Foo { }\n "}, {"sha": "3eda7102decd111771c6de6bdd17c5ec143b3868", "filename": "src/test/ui/chalkify/inherent_impl_min.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14298997005486529e7a97b2ab9e9e376d6fdc72/src%2Ftest%2Fui%2Fchalkify%2Finherent_impl_min.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14298997005486529e7a97b2ab9e9e376d6fdc72/src%2Ftest%2Fui%2Fchalkify%2Finherent_impl_min.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fchalkify%2Finherent_impl_min.rs?ref=14298997005486529e7a97b2ab9e9e376d6fdc72", "patch": "@@ -1,5 +1,5 @@\n // run-pass\n-// compile-flags: -Z chalk\n+// compile-flags: -Z trait-solver=chalk\n \n trait Foo { }\n "}, {"sha": "c8762001e6a1d948d77ac1b8ee618ca26a6f21e3", "filename": "src/test/ui/chalkify/lower_env1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14298997005486529e7a97b2ab9e9e376d6fdc72/src%2Ftest%2Fui%2Fchalkify%2Flower_env1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14298997005486529e7a97b2ab9e9e376d6fdc72/src%2Ftest%2Fui%2Fchalkify%2Flower_env1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fchalkify%2Flower_env1.rs?ref=14298997005486529e7a97b2ab9e9e376d6fdc72", "patch": "@@ -1,5 +1,5 @@\n // check-pass\n-// compile-flags: -Z chalk\n+// compile-flags: -Z trait-solver=chalk\n \n #![allow(dead_code)]\n "}, {"sha": "7d4f81f12eaf5be4a033e20d789ff13223864897", "filename": "src/test/ui/chalkify/lower_env2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14298997005486529e7a97b2ab9e9e376d6fdc72/src%2Ftest%2Fui%2Fchalkify%2Flower_env2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14298997005486529e7a97b2ab9e9e376d6fdc72/src%2Ftest%2Fui%2Fchalkify%2Flower_env2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fchalkify%2Flower_env2.rs?ref=14298997005486529e7a97b2ab9e9e376d6fdc72", "patch": "@@ -1,5 +1,5 @@\n // check-pass\n-// compile-flags: -Z chalk\n+// compile-flags: -Z trait-solver=chalk\n \n #![allow(dead_code)]\n "}, {"sha": "5b70c4abbb551c3e741f558e042a3d537105aee8", "filename": "src/test/ui/chalkify/lower_env3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14298997005486529e7a97b2ab9e9e376d6fdc72/src%2Ftest%2Fui%2Fchalkify%2Flower_env3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14298997005486529e7a97b2ab9e9e376d6fdc72/src%2Ftest%2Fui%2Fchalkify%2Flower_env3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fchalkify%2Flower_env3.rs?ref=14298997005486529e7a97b2ab9e9e376d6fdc72", "patch": "@@ -1,5 +1,5 @@\n // check-pass\n-// compile-flags: -Z chalk\n+// compile-flags: -Z trait-solver=chalk\n \n #![allow(dead_code)]\n "}, {"sha": "6f79b3ba386a52c533dff6eceaf3bf8f6308cb8a", "filename": "src/test/ui/chalkify/lower_impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14298997005486529e7a97b2ab9e9e376d6fdc72/src%2Ftest%2Fui%2Fchalkify%2Flower_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14298997005486529e7a97b2ab9e9e376d6fdc72/src%2Ftest%2Fui%2Fchalkify%2Flower_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fchalkify%2Flower_impl.rs?ref=14298997005486529e7a97b2ab9e9e376d6fdc72", "patch": "@@ -1,5 +1,5 @@\n // check-pass\n-// compile-flags: -Z chalk\n+// compile-flags: -Z trait-solver=chalk\n \n trait Foo { }\n "}, {"sha": "6be0d4dd5bd2978c07a2240d914f834af585c322", "filename": "src/test/ui/chalkify/lower_struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14298997005486529e7a97b2ab9e9e376d6fdc72/src%2Ftest%2Fui%2Fchalkify%2Flower_struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14298997005486529e7a97b2ab9e9e376d6fdc72/src%2Ftest%2Fui%2Fchalkify%2Flower_struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fchalkify%2Flower_struct.rs?ref=14298997005486529e7a97b2ab9e9e376d6fdc72", "patch": "@@ -1,5 +1,5 @@\n // check-pass\n-// compile-flags: -Z chalk\n+// compile-flags: -Z trait-solver=chalk\n \n struct Foo<'a, T> where Box<T>: Clone {\n     _x: std::marker::PhantomData<&'a T>,"}, {"sha": "8f5b358220bf73233f36096f59c111191e43bcb4", "filename": "src/test/ui/chalkify/lower_trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14298997005486529e7a97b2ab9e9e376d6fdc72/src%2Ftest%2Fui%2Fchalkify%2Flower_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14298997005486529e7a97b2ab9e9e376d6fdc72/src%2Ftest%2Fui%2Fchalkify%2Flower_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fchalkify%2Flower_trait.rs?ref=14298997005486529e7a97b2ab9e9e376d6fdc72", "patch": "@@ -1,5 +1,5 @@\n // check-pass\n-// compile-flags: -Z chalk\n+// compile-flags: -Z trait-solver=chalk\n \n trait Bar { }\n "}, {"sha": "f04a1deea87536356df2e3df7a52528884209ef1", "filename": "src/test/ui/chalkify/lower_trait_higher_rank.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14298997005486529e7a97b2ab9e9e376d6fdc72/src%2Ftest%2Fui%2Fchalkify%2Flower_trait_higher_rank.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14298997005486529e7a97b2ab9e9e376d6fdc72/src%2Ftest%2Fui%2Fchalkify%2Flower_trait_higher_rank.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fchalkify%2Flower_trait_higher_rank.rs?ref=14298997005486529e7a97b2ab9e9e376d6fdc72", "patch": "@@ -1,5 +1,5 @@\n // check-pass\n-// compile-flags: -Z chalk\n+// compile-flags: -Z trait-solver=chalk\n \n trait Foo<F: ?Sized> where for<'a> F: Fn(&'a (u8, u16)) -> &'a u8\n {"}, {"sha": "a21d2f31963c79ec88a83de6b173a47463ee2522", "filename": "src/test/ui/chalkify/lower_trait_where_clause.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14298997005486529e7a97b2ab9e9e376d6fdc72/src%2Ftest%2Fui%2Fchalkify%2Flower_trait_where_clause.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14298997005486529e7a97b2ab9e9e376d6fdc72/src%2Ftest%2Fui%2Fchalkify%2Flower_trait_where_clause.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fchalkify%2Flower_trait_where_clause.rs?ref=14298997005486529e7a97b2ab9e9e376d6fdc72", "patch": "@@ -1,5 +1,5 @@\n // check-pass\n-// compile-flags: -Z chalk\n+// compile-flags: -Z trait-solver=chalk\n \n use std::borrow::Borrow;\n "}, {"sha": "edddc382152344de1a2eeea2c96db9aed0f8597c", "filename": "src/test/ui/chalkify/println.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14298997005486529e7a97b2ab9e9e376d6fdc72/src%2Ftest%2Fui%2Fchalkify%2Fprintln.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14298997005486529e7a97b2ab9e9e376d6fdc72/src%2Ftest%2Fui%2Fchalkify%2Fprintln.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fchalkify%2Fprintln.rs?ref=14298997005486529e7a97b2ab9e9e376d6fdc72", "patch": "@@ -1,5 +1,5 @@\n // check-pass\n-// compile-flags: -Z chalk\n+// compile-flags: -Z trait-solver=chalk\n \n fn main() {\n     println!(\"hello\");"}, {"sha": "19bb2ae1497230af55976f8991c6f0f0cb9c9fa5", "filename": "src/test/ui/chalkify/projection.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14298997005486529e7a97b2ab9e9e376d6fdc72/src%2Ftest%2Fui%2Fchalkify%2Fprojection.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14298997005486529e7a97b2ab9e9e376d6fdc72/src%2Ftest%2Fui%2Fchalkify%2Fprojection.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fchalkify%2Fprojection.rs?ref=14298997005486529e7a97b2ab9e9e376d6fdc72", "patch": "@@ -1,5 +1,5 @@\n // run-pass\n-// compile-flags: -Z chalk\n+// compile-flags: -Z trait-solver=chalk\n \n trait Foo { }\n "}, {"sha": "5855f000c7b93eb3c438ad0324732f5c14cef2ec", "filename": "src/test/ui/chalkify/recursive_where_clause_on_type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14298997005486529e7a97b2ab9e9e376d6fdc72/src%2Ftest%2Fui%2Fchalkify%2Frecursive_where_clause_on_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14298997005486529e7a97b2ab9e9e376d6fdc72/src%2Ftest%2Fui%2Fchalkify%2Frecursive_where_clause_on_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fchalkify%2Frecursive_where_clause_on_type.rs?ref=14298997005486529e7a97b2ab9e9e376d6fdc72", "patch": "@@ -1,6 +1,6 @@\n // FIXME(chalk): should fail, see comments\n // check-fail\n-// compile-flags: -Z chalk\n+// compile-flags: -Z trait-solver=chalk\n \n #![feature(trivial_bounds)]\n "}, {"sha": "540ae51e57f6d80c2a7819da256f460ca8cd0672", "filename": "src/test/ui/chalkify/super_trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14298997005486529e7a97b2ab9e9e376d6fdc72/src%2Ftest%2Fui%2Fchalkify%2Fsuper_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14298997005486529e7a97b2ab9e9e376d6fdc72/src%2Ftest%2Fui%2Fchalkify%2Fsuper_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fchalkify%2Fsuper_trait.rs?ref=14298997005486529e7a97b2ab9e9e376d6fdc72", "patch": "@@ -1,5 +1,5 @@\n // run-pass\n-// compile-flags: -Z chalk\n+// compile-flags: -Z trait-solver=chalk\n \n trait Foo { }\n trait Bar: Foo { }"}, {"sha": "144d9788b82e6c558b69f355adedb6d2e2d1eb36", "filename": "src/test/ui/chalkify/trait-objects.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14298997005486529e7a97b2ab9e9e376d6fdc72/src%2Ftest%2Fui%2Fchalkify%2Ftrait-objects.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14298997005486529e7a97b2ab9e9e376d6fdc72/src%2Ftest%2Fui%2Fchalkify%2Ftrait-objects.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fchalkify%2Ftrait-objects.rs?ref=14298997005486529e7a97b2ab9e9e376d6fdc72", "patch": "@@ -1,5 +1,5 @@\n // check-pass\n-// compile-flags: -Z chalk\n+// compile-flags: -Z trait-solver=chalk\n \n use std::fmt::Display;\n "}, {"sha": "f97dbf6b7e7748649213c7b7144fcce67495c8e8", "filename": "src/test/ui/chalkify/trait_implied_bound.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14298997005486529e7a97b2ab9e9e376d6fdc72/src%2Ftest%2Fui%2Fchalkify%2Ftrait_implied_bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14298997005486529e7a97b2ab9e9e376d6fdc72/src%2Ftest%2Fui%2Fchalkify%2Ftrait_implied_bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fchalkify%2Ftrait_implied_bound.rs?ref=14298997005486529e7a97b2ab9e9e376d6fdc72", "patch": "@@ -1,5 +1,5 @@\n // run-pass\n-// compile-flags: -Z chalk\n+// compile-flags: -Z trait-solver=chalk\n \n trait Foo { }\n trait Bar<U> where U: Foo { }"}, {"sha": "70f1b4265e4990507b5a935ea8690f1965358e62", "filename": "src/test/ui/chalkify/type_implied_bound.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14298997005486529e7a97b2ab9e9e376d6fdc72/src%2Ftest%2Fui%2Fchalkify%2Ftype_implied_bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14298997005486529e7a97b2ab9e9e376d6fdc72/src%2Ftest%2Fui%2Fchalkify%2Ftype_implied_bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fchalkify%2Ftype_implied_bound.rs?ref=14298997005486529e7a97b2ab9e9e376d6fdc72", "patch": "@@ -1,5 +1,5 @@\n // run-pass\n-// compile-flags: -Z chalk\n+// compile-flags: -Z trait-solver=chalk\n \n trait Eq { }\n trait Hash: Eq { }"}, {"sha": "d7167d0dc57fa3da2a18fbeb8dac9bcbe7970d58", "filename": "src/test/ui/chalkify/type_inference.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14298997005486529e7a97b2ab9e9e376d6fdc72/src%2Ftest%2Fui%2Fchalkify%2Ftype_inference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14298997005486529e7a97b2ab9e9e376d6fdc72/src%2Ftest%2Fui%2Fchalkify%2Ftype_inference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fchalkify%2Ftype_inference.rs?ref=14298997005486529e7a97b2ab9e9e376d6fdc72", "patch": "@@ -1,4 +1,4 @@\n-// compile-flags: -Z chalk\n+// compile-flags: -Z trait-solver=chalk\n \n trait Foo { }\n impl Foo for i32 { }"}, {"sha": "37d2f5ca832ce6c9f0f7cbe69ecd0f16842e2f4f", "filename": "src/test/ui/chalkify/type_wf.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14298997005486529e7a97b2ab9e9e376d6fdc72/src%2Ftest%2Fui%2Fchalkify%2Ftype_wf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14298997005486529e7a97b2ab9e9e376d6fdc72/src%2Ftest%2Fui%2Fchalkify%2Ftype_wf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fchalkify%2Ftype_wf.rs?ref=14298997005486529e7a97b2ab9e9e376d6fdc72", "patch": "@@ -1,5 +1,5 @@\n // check-fail\n-// compile-flags: -Z chalk\n+// compile-flags: -Z trait-solver=chalk\n \n trait Foo { }\n "}, {"sha": "10247ce6bcafd142dfc2dd66976b7842c4c53329", "filename": "src/test/ui/const-generics/generic_const_exprs/issue-76595.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14298997005486529e7a97b2ab9e9e376d6fdc72/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-76595.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14298997005486529e7a97b2ab9e9e376d6fdc72/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-76595.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-76595.rs?ref=14298997005486529e7a97b2ab9e9e376d6fdc72", "patch": "@@ -13,5 +13,5 @@ fn test<T, const P: usize>() where Bool<{core::mem::size_of::<T>() > 4}>: True {\n \n fn main() {\n     test::<2>();\n-    //~^ ERROR this function takes 2 generic arguments\n+    //~^ ERROR function takes 2 generic arguments\n }"}, {"sha": "8660cb2fb541d859188d1f0a080acbd925cad919", "filename": "src/test/ui/const-generics/incorrect-number-of-const-args.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/14298997005486529e7a97b2ab9e9e376d6fdc72/src%2Ftest%2Fui%2Fconst-generics%2Fincorrect-number-of-const-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14298997005486529e7a97b2ab9e9e376d6fdc72/src%2Ftest%2Fui%2Fconst-generics%2Fincorrect-number-of-const-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fincorrect-number-of-const-args.rs?ref=14298997005486529e7a97b2ab9e9e376d6fdc72", "patch": "@@ -4,8 +4,8 @@ fn foo<const X: usize, const Y: usize>() -> usize {\n \n fn main() {\n     foo::<0>();\n-    //~^ ERROR this function takes 2\n+    //~^ ERROR function takes 2\n \n     foo::<0, 0, 0>();\n-    //~^ ERROR this function takes 2\n+    //~^ ERROR function takes 2\n }"}, {"sha": "19bee733ec068c83be742e3d0171dd89892fd50d", "filename": "src/test/ui/fn/issue-3044.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14298997005486529e7a97b2ab9e9e376d6fdc72/src%2Ftest%2Fui%2Ffn%2Fissue-3044.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14298997005486529e7a97b2ab9e9e376d6fdc72/src%2Ftest%2Fui%2Ffn%2Fissue-3044.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffn%2Fissue-3044.rs?ref=14298997005486529e7a97b2ab9e9e376d6fdc72", "patch": "@@ -1,6 +1,6 @@\n fn main() {\n     let needlesArr: Vec<char> = vec!['a', 'f'];\n     needlesArr.iter().fold(|x, y| {\n-        //~^ ERROR this function takes 2 arguments but 1 argument was supplied\n+        //~^ ERROR this method takes 2 arguments but 1 argument was supplied\n     });\n }"}, {"sha": "2690ad7117621a21240672c2ee21f1c32762897f", "filename": "src/test/ui/fn/issue-3044.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14298997005486529e7a97b2ab9e9e376d6fdc72/src%2Ftest%2Fui%2Ffn%2Fissue-3044.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14298997005486529e7a97b2ab9e9e376d6fdc72/src%2Ftest%2Fui%2Ffn%2Fissue-3044.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffn%2Fissue-3044.stderr?ref=14298997005486529e7a97b2ab9e9e376d6fdc72", "patch": "@@ -1,4 +1,4 @@\n-error[E0061]: this function takes 2 arguments but 1 argument was supplied\n+error[E0061]: this method takes 2 arguments but 1 argument was supplied\n   --> $DIR/issue-3044.rs:3:23\n    |\n LL |       needlesArr.iter().fold(|x, y| {"}, {"sha": "35acd5cd727c2713b2d6e8e4088d50418fa363f4", "filename": "src/test/ui/generator/issue-102645.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14298997005486529e7a97b2ab9e9e376d6fdc72/src%2Ftest%2Fui%2Fgenerator%2Fissue-102645.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14298997005486529e7a97b2ab9e9e376d6fdc72/src%2Ftest%2Fui%2Fgenerator%2Fissue-102645.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fissue-102645.rs?ref=14298997005486529e7a97b2ab9e9e376d6fdc72", "patch": "@@ -14,7 +14,7 @@ fn main() {\n         a = d;\n     };\n     Pin::new(&mut b).resume();\n-    //~^ ERROR this function takes 1 argument but 0 arguments were supplied\n+    //~^ ERROR this method takes 1 argument but 0 arguments were supplied\n     // This type error is required to reproduce the ICE...\n }\n "}, {"sha": "f6d2440295e8d3c691ef499e93884a29e1403a36", "filename": "src/test/ui/generator/issue-102645.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14298997005486529e7a97b2ab9e9e376d6fdc72/src%2Ftest%2Fui%2Fgenerator%2Fissue-102645.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14298997005486529e7a97b2ab9e9e376d6fdc72/src%2Ftest%2Fui%2Fgenerator%2Fissue-102645.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fissue-102645.stderr?ref=14298997005486529e7a97b2ab9e9e376d6fdc72", "patch": "@@ -1,4 +1,4 @@\n-error[E0061]: this function takes 1 argument but 0 arguments were supplied\n+error[E0061]: this method takes 1 argument but 0 arguments were supplied\n   --> $DIR/issue-102645.rs:16:22\n    |\n LL |     Pin::new(&mut b).resume();"}, {"sha": "6006a108c5cc6e3adc7c69ea31e6aa1970d4dfa8", "filename": "src/test/ui/higher-rank-trait-bounds/issue-58451.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14298997005486529e7a97b2ab9e9e376d6fdc72/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fissue-58451.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14298997005486529e7a97b2ab9e9e376d6fdc72/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fissue-58451.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fissue-58451.rs?ref=14298997005486529e7a97b2ab9e9e376d6fdc72", "patch": "@@ -9,5 +9,5 @@ where\n {}\n \n fn main() {\n-    f(&[f()]); //~ ERROR this function takes 1 argument\n+    f(&[f()]); //~ ERROR function takes 1 argument\n }"}, {"sha": "a93bdb1788f94af05e203fd97dd805e8729defcc", "filename": "src/test/ui/impl-trait/explicit-generic-args-with-impl-trait/not-enough-args.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14298997005486529e7a97b2ab9e9e376d6fdc72/src%2Ftest%2Fui%2Fimpl-trait%2Fexplicit-generic-args-with-impl-trait%2Fnot-enough-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14298997005486529e7a97b2ab9e9e376d6fdc72/src%2Ftest%2Fui%2Fimpl-trait%2Fexplicit-generic-args-with-impl-trait%2Fnot-enough-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fexplicit-generic-args-with-impl-trait%2Fnot-enough-args.rs?ref=14298997005486529e7a97b2ab9e9e376d6fdc72", "patch": "@@ -2,5 +2,5 @@ fn f<T: ?Sized, U: ?Sized>(_: impl AsRef<T>, _: impl AsRef<U>) {}\n \n fn main() {\n     f::<[u8]>(\"a\", b\"a\");\n-    //~^ ERROR: this function takes 2 generic arguments but 1 generic argument was supplied\n+    //~^ ERROR function takes 2 generic arguments but 1 generic argument was supplied\n }"}, {"sha": "a4d483dee7a53c6e9fdfe5c22e61134694770279", "filename": "src/test/ui/impl-trait/in-trait/box-coerce-span-in-default.rs", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/14298997005486529e7a97b2ab9e9e376d6fdc72/src%2Ftest%2Fui%2Fimpl-trait%2Fin-trait%2Fbox-coerce-span-in-default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14298997005486529e7a97b2ab9e9e376d6fdc72/src%2Ftest%2Fui%2Fimpl-trait%2Fin-trait%2Fbox-coerce-span-in-default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fin-trait%2Fbox-coerce-span-in-default.rs?ref=14298997005486529e7a97b2ab9e9e376d6fdc72", "patch": "@@ -0,0 +1,49 @@\n+// check-pass\n+\n+#![feature(return_position_impl_trait_in_trait)]\n+//~^ WARN the feature `return_position_impl_trait_in_trait` is incomplete\n+\n+struct TestA {}\n+struct TestB {}\n+\n+impl TestTrait for TestA {\n+    type Output = ();\n+}\n+impl TestTrait for TestB {\n+    type Output = ();\n+}\n+\n+trait TestTrait {\n+    type Output;\n+}\n+\n+impl<A, B> TestTrait for GreeterOutput<A, B>\n+where\n+    A: TestTrait<Output = ()>,\n+    B: TestTrait<Output = ()>,\n+{\n+    type Output = ();\n+}\n+\n+enum GreeterOutput<A, B>\n+where\n+    A: TestTrait<Output = ()>,\n+    B: TestTrait<Output = ()>,\n+{\n+    SayHello(A),\n+    SayGoodbye(B),\n+}\n+\n+trait Greeter {\n+    fn test_func(&self, func: &str) -> impl TestTrait<Output = ()> {\n+        match func {\n+            \"SayHello\" => GreeterOutput::SayHello(TestA {}),\n+            \"SayGoodbye\" => GreeterOutput::SayGoodbye(TestB {}),\n+            _ => GreeterOutput::SayHello(TestA {}),\n+        }\n+    }\n+}\n+\n+fn main() {\n+    println!(\"Hello, world!\");\n+}"}, {"sha": "d681ecf25e8afb2f08706f45912ac1853c5c55dc", "filename": "src/test/ui/impl-trait/in-trait/box-coerce-span-in-default.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/14298997005486529e7a97b2ab9e9e376d6fdc72/src%2Ftest%2Fui%2Fimpl-trait%2Fin-trait%2Fbox-coerce-span-in-default.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14298997005486529e7a97b2ab9e9e376d6fdc72/src%2Ftest%2Fui%2Fimpl-trait%2Fin-trait%2Fbox-coerce-span-in-default.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fin-trait%2Fbox-coerce-span-in-default.stderr?ref=14298997005486529e7a97b2ab9e9e376d6fdc72", "patch": "@@ -0,0 +1,11 @@\n+warning: the feature `return_position_impl_trait_in_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/box-coerce-span-in-default.rs:3:12\n+   |\n+LL | #![feature(return_position_impl_trait_in_trait)]\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\n+   = note: `#[warn(incomplete_features)]` on by default\n+\n+warning: 1 warning emitted\n+"}, {"sha": "c177655c5acf549cae437f52356d139ba452c7c2", "filename": "src/test/ui/implied-bounds/hrlt-implied-trait-bounds-guard.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14298997005486529e7a97b2ab9e9e376d6fdc72/src%2Ftest%2Fui%2Fimplied-bounds%2Fhrlt-implied-trait-bounds-guard.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14298997005486529e7a97b2ab9e9e376d6fdc72/src%2Ftest%2Fui%2Fimplied-bounds%2Fhrlt-implied-trait-bounds-guard.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimplied-bounds%2Fhrlt-implied-trait-bounds-guard.rs?ref=14298997005486529e7a97b2ab9e9e376d6fdc72", "patch": "@@ -1,5 +1,5 @@\n // A test exploiting the bug behind #25860 except with\n-// implied trait bounds which currently don't exist without `-Zchalk`.\n+// implied trait bounds which currently don't exist without `-Ztrait-solver=chalk`.\n use std::marker::PhantomData;\n struct Foo<'a, 'b, T>(PhantomData<(&'a (), &'b (), T)>)\n where"}, {"sha": "ace77814a3a99d6aeffe811f76805ba85b7c579d", "filename": "src/test/ui/issues/issue-11374.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14298997005486529e7a97b2ab9e9e376d6fdc72/src%2Ftest%2Fui%2Fissues%2Fissue-11374.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14298997005486529e7a97b2ab9e9e376d6fdc72/src%2Ftest%2Fui%2Fissues%2Fissue-11374.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-11374.stderr?ref=14298997005486529e7a97b2ab9e9e376d6fdc72", "patch": "@@ -6,7 +6,7 @@ LL |     c.read_to(v);\n    |       |       |\n    |       |       expected `&mut [u8]`, found struct `Vec`\n    |       |       help: consider mutably borrowing here: `&mut v`\n-   |       arguments to this function are incorrect\n+   |       arguments to this method are incorrect\n    |\n    = note: expected mutable reference `&mut [u8]`\n                          found struct `Vec<_>`"}, {"sha": "d3d670aa92aeb23f30f39050dde6041894241caa", "filename": "src/test/ui/issues/issue-26094.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14298997005486529e7a97b2ab9e9e376d6fdc72/src%2Ftest%2Fui%2Fissues%2Fissue-26094.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14298997005486529e7a97b2ab9e9e376d6fdc72/src%2Ftest%2Fui%2Fissues%2Fissue-26094.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-26094.rs?ref=14298997005486529e7a97b2ab9e9e376d6fdc72", "patch": "@@ -8,6 +8,6 @@ fn some_function() {} //~ NOTE defined here\n \n fn main() {\n     some_macro!(some_function);\n-    //~^ ERROR this function takes 0 arguments but 1 argument was supplied\n+    //~^ ERROR function takes 0 arguments but 1 argument was supplied\n     //~| NOTE in this expansion of some_macro!\n }"}, {"sha": "60bbfc0c6e2696336ce75aa8992697784fa8829e", "filename": "src/test/ui/issues/issue-48364.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14298997005486529e7a97b2ab9e9e376d6fdc72/src%2Ftest%2Fui%2Fissues%2Fissue-48364.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14298997005486529e7a97b2ab9e9e376d6fdc72/src%2Ftest%2Fui%2Fissues%2Fissue-48364.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-48364.stderr?ref=14298997005486529e7a97b2ab9e9e376d6fdc72", "patch": "@@ -4,7 +4,7 @@ error[E0308]: mismatched types\n LL |     b\"\".starts_with(stringify!(foo))\n    |         ----------- ^^^^^^^^^^^^^^^ expected slice `[u8]`, found `str`\n    |         |\n-   |         arguments to this function are incorrect\n+   |         arguments to this method are incorrect\n    |\n    = note: expected reference `&[u8]`\n               found reference `&'static str`"}, {"sha": "c95020a0c006c9176186239a3b33f8d5246f7427", "filename": "src/test/ui/issues/issue-4935.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14298997005486529e7a97b2ab9e9e376d6fdc72/src%2Ftest%2Fui%2Fissues%2Fissue-4935.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14298997005486529e7a97b2ab9e9e376d6fdc72/src%2Ftest%2Fui%2Fissues%2Fissue-4935.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-4935.rs?ref=14298997005486529e7a97b2ab9e9e376d6fdc72", "patch": "@@ -3,4 +3,4 @@\n fn foo(a: usize) {}\n //~^ defined here\n fn main() { foo(5, 6) }\n-//~^ ERROR this function takes 1 argument but 2 arguments were supplied\n+//~^ ERROR function takes 1 argument but 2 arguments were supplied"}, {"sha": "4bec3b3415bbc075419ff48d377d651f3ac38a52", "filename": "src/test/ui/lifetimes/issue-26638.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14298997005486529e7a97b2ab9e9e376d6fdc72/src%2Ftest%2Fui%2Flifetimes%2Fissue-26638.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14298997005486529e7a97b2ab9e9e376d6fdc72/src%2Ftest%2Fui%2Flifetimes%2Fissue-26638.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Fissue-26638.rs?ref=14298997005486529e7a97b2ab9e9e376d6fdc72", "patch": "@@ -5,7 +5,7 @@ fn parse_type(iter: Box<dyn Iterator<Item=&str>+'static>) -> &str { iter.next()\n fn parse_type_2(iter: fn(&u8)->&u8) -> &str { iter() }\n //~^ ERROR missing lifetime specifier [E0106]\n //~| ERROR mismatched types\n-//~| ERROR this function takes 1 argument but 0 arguments were supplied\n+//~| ERROR function takes 1 argument but 0 arguments were supplied\n \n fn parse_type_3() -> &str { unimplemented!() }\n //~^ ERROR missing lifetime specifier [E0106]"}, {"sha": "3e73b950a14e0af982857231d4c358519371dbc1", "filename": "src/test/ui/methods/issues/issue-61525.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14298997005486529e7a97b2ab9e9e376d6fdc72/src%2Ftest%2Fui%2Fmethods%2Fissues%2Fissue-61525.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14298997005486529e7a97b2ab9e9e376d6fdc72/src%2Ftest%2Fui%2Fmethods%2Fissues%2Fissue-61525.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmethods%2Fissues%2Fissue-61525.stderr?ref=14298997005486529e7a97b2ab9e9e376d6fdc72", "patch": "@@ -23,7 +23,7 @@ error[E0308]: mismatched types\n LL |         1.query::<dyn ToString>(\"\")\n    |           --------------------- ^^ expected trait object `dyn ToString`, found `&str`\n    |           |\n-   |           arguments to this function are incorrect\n+   |           arguments to this method are incorrect\n    |\n    = note: expected trait object `dyn ToString`\n                  found reference `&'static str`"}, {"sha": "4807a956aa2366550daaa727f6250157b93b3905", "filename": "src/test/ui/methods/method-call-err-msg.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/14298997005486529e7a97b2ab9e9e376d6fdc72/src%2Ftest%2Fui%2Fmethods%2Fmethod-call-err-msg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14298997005486529e7a97b2ab9e9e376d6fdc72/src%2Ftest%2Fui%2Fmethods%2Fmethod-call-err-msg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmethods%2Fmethod-call-err-msg.rs?ref=14298997005486529e7a97b2ab9e9e376d6fdc72", "patch": "@@ -10,13 +10,13 @@ impl Foo {\n \n fn main() {\n     let x = Foo;\n-    x.zero(0)   //~ ERROR this function takes 0 arguments but 1 argument was supplied\n-     .one()     //~ ERROR this function takes 1 argument but 0 arguments were supplied\n-     .two(0);   //~ ERROR this function takes 2 arguments but 1 argument was supplied\n+    x.zero(0)   //~ ERROR this method takes 0 arguments but 1 argument was supplied\n+     .one()     //~ ERROR this method takes 1 argument but 0 arguments were supplied\n+     .two(0);   //~ ERROR this method takes 2 arguments but 1 argument was supplied\n \n     let y = Foo;\n     y.zero()\n      .take()    //~ ERROR not an iterator\n      .one(0);\n-    y.three::<usize>(); //~ ERROR this function takes 3 arguments but 0 arguments were supplied\n+    y.three::<usize>(); //~ ERROR this method takes 3 arguments but 0 arguments were supplied\n }"}, {"sha": "81269b73b9a751bbd66155e80b620b66227633c3", "filename": "src/test/ui/methods/method-call-err-msg.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/14298997005486529e7a97b2ab9e9e376d6fdc72/src%2Ftest%2Fui%2Fmethods%2Fmethod-call-err-msg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14298997005486529e7a97b2ab9e9e376d6fdc72/src%2Ftest%2Fui%2Fmethods%2Fmethod-call-err-msg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmethods%2Fmethod-call-err-msg.stderr?ref=14298997005486529e7a97b2ab9e9e376d6fdc72", "patch": "@@ -1,4 +1,4 @@\n-error[E0061]: this function takes 0 arguments but 1 argument was supplied\n+error[E0061]: this method takes 0 arguments but 1 argument was supplied\n   --> $DIR/method-call-err-msg.rs:13:7\n    |\n LL |     x.zero(0)\n@@ -14,7 +14,7 @@ help: remove the extra argument\n LL |     x.zero()\n    |           ~~\n \n-error[E0061]: this function takes 1 argument but 0 arguments were supplied\n+error[E0061]: this method takes 1 argument but 0 arguments were supplied\n   --> $DIR/method-call-err-msg.rs:14:7\n    |\n LL |      .one()\n@@ -30,7 +30,7 @@ help: provide the argument\n LL |      .one(/* isize */)\n    |          ~~~~~~~~~~~~~\n \n-error[E0061]: this function takes 2 arguments but 1 argument was supplied\n+error[E0061]: this method takes 2 arguments but 1 argument was supplied\n   --> $DIR/method-call-err-msg.rs:15:7\n    |\n LL |      .two(0);\n@@ -67,7 +67,7 @@ note: the trait `Iterator` must be implemented\n    = note: the following trait defines an item `take`, perhaps you need to implement it:\n            candidate #1: `Iterator`\n \n-error[E0061]: this function takes 3 arguments but 0 arguments were supplied\n+error[E0061]: this method takes 3 arguments but 0 arguments were supplied\n   --> $DIR/method-call-err-msg.rs:21:7\n    |\n LL |     y.three::<usize>();"}, {"sha": "5b1804d825d824773d8823fb46c0958c234b326c", "filename": "src/test/ui/mismatched_types/overloaded-calls-bad.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/14298997005486529e7a97b2ab9e9e376d6fdc72/src%2Ftest%2Fui%2Fmismatched_types%2Foverloaded-calls-bad.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14298997005486529e7a97b2ab9e9e376d6fdc72/src%2Ftest%2Fui%2Fmismatched_types%2Foverloaded-calls-bad.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Foverloaded-calls-bad.rs?ref=14298997005486529e7a97b2ab9e9e376d6fdc72", "patch": "@@ -33,9 +33,9 @@ fn main() {\n     let ans = s(\"what\");\n     //~^ ERROR mismatched types\n     let ans = s();\n-    //~^ ERROR this function takes 1 argument but 0 arguments were supplied\n+    //~^ ERROR function takes 1 argument but 0 arguments were supplied\n     let ans = s(\"burma\", \"shave\");\n-    //~^ ERROR this function takes 1 argument but 2 arguments were supplied\n+    //~^ ERROR function takes 1 argument but 2 arguments were supplied\n \n     F(\"\");\n     //~^ ERROR mismatched types"}, {"sha": "4a2ea5e44c71adec08866bd3e5a85471470cf1ac", "filename": "src/test/ui/not-enough-arguments.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/14298997005486529e7a97b2ab9e9e376d6fdc72/src%2Ftest%2Fui%2Fnot-enough-arguments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14298997005486529e7a97b2ab9e9e376d6fdc72/src%2Ftest%2Fui%2Fnot-enough-arguments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnot-enough-arguments.rs?ref=14298997005486529e7a97b2ab9e9e376d6fdc72", "patch": "@@ -25,7 +25,7 @@ fn bar(\n \n fn main() {\n   foo(1, 2, 3);\n-  //~^ ERROR this function takes 4 arguments but 3\n+  //~^ ERROR function takes 4 arguments but 3\n   bar(1, 2, 3);\n-  //~^ ERROR this function takes 6 arguments but 3\n+  //~^ ERROR function takes 6 arguments but 3\n }"}, {"sha": "05cabd9e3cd010abe162364718e37ce2c3798d8c", "filename": "src/test/ui/resolve/resolve-primitive-fallback.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14298997005486529e7a97b2ab9e9e376d6fdc72/src%2Ftest%2Fui%2Fresolve%2Fresolve-primitive-fallback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14298997005486529e7a97b2ab9e9e376d6fdc72/src%2Ftest%2Fui%2Fresolve%2Fresolve-primitive-fallback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fresolve-primitive-fallback.rs?ref=14298997005486529e7a97b2ab9e9e376d6fdc72", "patch": "@@ -2,7 +2,7 @@ fn main() {\n     // Make sure primitive type fallback doesn't work in value namespace\n     std::mem::size_of(u16);\n     //~^ ERROR expected value, found builtin type `u16`\n-    //~| ERROR this function takes 0 arguments but 1 argument was supplied\n+    //~| ERROR function takes 0 arguments but 1 argument was supplied\n \n     // Make sure primitive type fallback doesn't work with global paths\n     let _: ::u8;"}, {"sha": "9227ee482dfa554e4ada93fd38b16d798ebb7130", "filename": "src/test/ui/span/issue-34264.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/14298997005486529e7a97b2ab9e9e376d6fdc72/src%2Ftest%2Fui%2Fspan%2Fissue-34264.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14298997005486529e7a97b2ab9e9e376d6fdc72/src%2Ftest%2Fui%2Fspan%2Fissue-34264.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-34264.rs?ref=14298997005486529e7a97b2ab9e9e376d6fdc72", "patch": "@@ -4,8 +4,8 @@ fn bar(x, y: usize) {} //~ ERROR expected one of\n \n fn main() {\n     foo(Some(42), 2);\n-    foo(Some(42), 2, \"\"); //~ ERROR this function takes\n+    foo(Some(42), 2, \"\"); //~ ERROR function takes\n     bar(\"\", \"\"); //~ ERROR mismatched types\n     bar(1, 2);\n-    bar(1, 2, 3); //~ ERROR this function takes\n+    bar(1, 2, 3); //~ ERROR function takes\n }"}, {"sha": "db96ae223d92b941884b6a321f03609d206358fb", "filename": "src/test/ui/span/missing-unit-argument.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/14298997005486529e7a97b2ab9e9e376d6fdc72/src%2Ftest%2Fui%2Fspan%2Fmissing-unit-argument.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14298997005486529e7a97b2ab9e9e376d6fdc72/src%2Ftest%2Fui%2Fspan%2Fmissing-unit-argument.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fmissing-unit-argument.rs?ref=14298997005486529e7a97b2ab9e9e376d6fdc72", "patch": "@@ -9,9 +9,9 @@ impl S {\n \n fn main() {\n     let _: Result<(), String> = Ok(); //~ ERROR this enum variant takes\n-    foo(); //~ ERROR this function takes\n-    foo(()); //~ ERROR this function takes\n-    bar(); //~ ERROR this function takes\n-    S.baz(); //~ ERROR this function takes\n-    S.generic::<()>(); //~ ERROR this function takes\n+    foo(); //~ ERROR function takes\n+    foo(()); //~ ERROR function takes\n+    bar(); //~ ERROR function takes\n+    S.baz(); //~ ERROR this method takes\n+    S.generic::<()>(); //~ ERROR this method takes\n }"}, {"sha": "ef4d732b51d2dbc1d2bdb66d3b4192608584dda1", "filename": "src/test/ui/span/missing-unit-argument.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/14298997005486529e7a97b2ab9e9e376d6fdc72/src%2Ftest%2Fui%2Fspan%2Fmissing-unit-argument.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14298997005486529e7a97b2ab9e9e376d6fdc72/src%2Ftest%2Fui%2Fspan%2Fmissing-unit-argument.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fmissing-unit-argument.stderr?ref=14298997005486529e7a97b2ab9e9e376d6fdc72", "patch": "@@ -59,7 +59,7 @@ help: provide the argument\n LL |     bar(());\n    |        ~~~~\n \n-error[E0061]: this function takes 1 argument but 0 arguments were supplied\n+error[E0061]: this method takes 1 argument but 0 arguments were supplied\n   --> $DIR/missing-unit-argument.rs:15:7\n    |\n LL |     S.baz();\n@@ -75,7 +75,7 @@ help: provide the argument\n LL |     S.baz(());\n    |          ~~~~\n \n-error[E0061]: this function takes 1 argument but 0 arguments were supplied\n+error[E0061]: this method takes 1 argument but 0 arguments were supplied\n   --> $DIR/missing-unit-argument.rs:16:7\n    |\n LL |     S.generic::<()>();"}, {"sha": "f5931a1baea11d83872b2d4ce86e55ce3f4b31d7", "filename": "src/test/ui/suggestions/args-instead-of-tuple-errors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14298997005486529e7a97b2ab9e9e376d6fdc72/src%2Ftest%2Fui%2Fsuggestions%2Fargs-instead-of-tuple-errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14298997005486529e7a97b2ab9e9e376d6fdc72/src%2Ftest%2Fui%2Fsuggestions%2Fargs-instead-of-tuple-errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fargs-instead-of-tuple-errors.rs?ref=14298997005486529e7a97b2ab9e9e376d6fdc72", "patch": "@@ -6,7 +6,7 @@ fn main() {\n     let _: Option<(i32, bool)> = Some(1, 2);\n     //~^ ERROR this enum variant takes 1 argument but 2 arguments were supplied\n     int_bool(1, 2);\n-    //~^ ERROR this function takes 1 argument but 2 arguments were supplied\n+    //~^ ERROR function takes 1 argument but 2 arguments were supplied\n \n     let _: Option<(i8,)> = Some();\n     //~^ ERROR this enum variant takes 1 argument but 0 arguments were supplied"}, {"sha": "f913995d7e28bd385a9858c92b6f55844eec3af8", "filename": "src/test/ui/suggestions/args-instead-of-tuple.fixed", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/14298997005486529e7a97b2ab9e9e376d6fdc72/src%2Ftest%2Fui%2Fsuggestions%2Fargs-instead-of-tuple.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/14298997005486529e7a97b2ab9e9e376d6fdc72/src%2Ftest%2Fui%2Fsuggestions%2Fargs-instead-of-tuple.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fargs-instead-of-tuple.fixed?ref=14298997005486529e7a97b2ab9e9e376d6fdc72", "patch": "@@ -5,21 +5,21 @@\n \n fn main() {\n     let _: Result<(i32, i8), ()> = Ok((1, 2));\n-    //~^ ERROR this enum variant takes 1 argument but 2 arguments were supplied\n+    //~^ ERROR enum variant takes 1 argument but 2 arguments were supplied\n     let _: Option<(i32, i8, &'static str)> = Some((1, 2, \"hi\"));\n-    //~^ ERROR this enum variant takes 1 argument but 3 arguments were supplied\n+    //~^ ERROR enum variant takes 1 argument but 3 arguments were supplied\n     let _: Option<()> = Some(());\n-    //~^ ERROR this enum variant takes 1 argument but 0 arguments were supplied\n+    //~^ ERROR enum variant takes 1 argument but 0 arguments were supplied\n \n     let _: Option<(i32,)> = Some((3,));\n     //~^ ERROR mismatched types\n \n     let _: Option<(i32,)> = Some((3,));\n     //~^ ERROR mismatched types\n \n-    two_ints((1, 2)); //~ ERROR this function takes 1 argument\n+    two_ints((1, 2)); //~ ERROR function takes 1 argument\n \n-    with_generic((3, 4)); //~ ERROR this function takes 1 argument\n+    with_generic((3, 4)); //~ ERROR function takes 1 argument\n }\n \n fn two_ints(_: (i32, i32)) {\n@@ -28,6 +28,6 @@ fn two_ints(_: (i32, i32)) {\n fn with_generic<T: Copy + Send>((a, b): (i32, T)) {\n     if false {\n         // test generics/bound handling\n-        with_generic((a, b)); //~ ERROR this function takes 1 argument\n+        with_generic((a, b)); //~ ERROR function takes 1 argument\n     }\n }"}, {"sha": "1c65407b3955e8551b27a9be658e5875e0ebb33d", "filename": "src/test/ui/suggestions/args-instead-of-tuple.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/14298997005486529e7a97b2ab9e9e376d6fdc72/src%2Ftest%2Fui%2Fsuggestions%2Fargs-instead-of-tuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14298997005486529e7a97b2ab9e9e376d6fdc72/src%2Ftest%2Fui%2Fsuggestions%2Fargs-instead-of-tuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fargs-instead-of-tuple.rs?ref=14298997005486529e7a97b2ab9e9e376d6fdc72", "patch": "@@ -5,21 +5,21 @@\n \n fn main() {\n     let _: Result<(i32, i8), ()> = Ok(1, 2);\n-    //~^ ERROR this enum variant takes 1 argument but 2 arguments were supplied\n+    //~^ ERROR enum variant takes 1 argument but 2 arguments were supplied\n     let _: Option<(i32, i8, &'static str)> = Some(1, 2, \"hi\");\n-    //~^ ERROR this enum variant takes 1 argument but 3 arguments were supplied\n+    //~^ ERROR enum variant takes 1 argument but 3 arguments were supplied\n     let _: Option<()> = Some();\n-    //~^ ERROR this enum variant takes 1 argument but 0 arguments were supplied\n+    //~^ ERROR enum variant takes 1 argument but 0 arguments were supplied\n \n     let _: Option<(i32,)> = Some(3);\n     //~^ ERROR mismatched types\n \n     let _: Option<(i32,)> = Some((3));\n     //~^ ERROR mismatched types\n \n-    two_ints(1, 2); //~ ERROR this function takes 1 argument\n+    two_ints(1, 2); //~ ERROR function takes 1 argument\n \n-    with_generic(3, 4); //~ ERROR this function takes 1 argument\n+    with_generic(3, 4); //~ ERROR function takes 1 argument\n }\n \n fn two_ints(_: (i32, i32)) {\n@@ -28,6 +28,6 @@ fn two_ints(_: (i32, i32)) {\n fn with_generic<T: Copy + Send>((a, b): (i32, T)) {\n     if false {\n         // test generics/bound handling\n-        with_generic(a, b); //~ ERROR this function takes 1 argument\n+        with_generic(a, b); //~ ERROR function takes 1 argument\n     }\n }"}, {"sha": "3ed9dbf4abbc63118d9ca64344ec23a81df6f7d7", "filename": "src/test/ui/suggestions/args-instead-of-tuple.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/14298997005486529e7a97b2ab9e9e376d6fdc72/src%2Ftest%2Fui%2Fsuggestions%2Fargs-instead-of-tuple.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14298997005486529e7a97b2ab9e9e376d6fdc72/src%2Ftest%2Fui%2Fsuggestions%2Fargs-instead-of-tuple.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fargs-instead-of-tuple.stderr?ref=14298997005486529e7a97b2ab9e9e376d6fdc72", "patch": "@@ -1,4 +1,4 @@\n-error[E0061]: this enum variant takes 1 argument but 2 arguments were supplied\n+error[E0061]: enum variant takes 1 argument but 2 arguments were supplied\n   --> $DIR/args-instead-of-tuple.rs:7:36\n    |\n LL |     let _: Result<(i32, i8), ()> = Ok(1, 2);\n@@ -11,7 +11,7 @@ help: wrap these arguments in parentheses to construct a tuple\n LL |     let _: Result<(i32, i8), ()> = Ok((1, 2));\n    |                                       +    +\n \n-error[E0061]: this enum variant takes 1 argument but 3 arguments were supplied\n+error[E0061]: enum variant takes 1 argument but 3 arguments were supplied\n   --> $DIR/args-instead-of-tuple.rs:9:46\n    |\n LL |     let _: Option<(i32, i8, &'static str)> = Some(1, 2, \"hi\");\n@@ -71,7 +71,7 @@ help: use a trailing comma to create a tuple with one element\n LL |     let _: Option<(i32,)> = Some((3,));\n    |                                    +\n \n-error[E0061]: this function takes 1 argument but 2 arguments were supplied\n+error[E0061]: function takes 1 argument but 2 arguments were supplied\n   --> $DIR/args-instead-of-tuple.rs:20:5\n    |\n LL |     two_ints(1, 2);\n@@ -87,7 +87,7 @@ help: wrap these arguments in parentheses to construct a tuple\n LL |     two_ints((1, 2));\n    |              +    +\n \n-error[E0061]: this function takes 1 argument but 2 arguments were supplied\n+error[E0061]: function takes 1 argument but 2 arguments were supplied\n   --> $DIR/args-instead-of-tuple.rs:22:5\n    |\n LL |     with_generic(3, 4);\n@@ -103,7 +103,7 @@ help: wrap these arguments in parentheses to construct a tuple\n LL |     with_generic((3, 4));\n    |                  +    +\n \n-error[E0061]: this function takes 1 argument but 2 arguments were supplied\n+error[E0061]: function takes 1 argument but 2 arguments were supplied\n   --> $DIR/args-instead-of-tuple.rs:31:9\n    |\n LL |         with_generic(a, b);"}, {"sha": "be4394031047f897673211556edbb8f4f8b48b17", "filename": "src/test/ui/suggestions/missing-type-param-used-in-param.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14298997005486529e7a97b2ab9e9e376d6fdc72/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-type-param-used-in-param.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/14298997005486529e7a97b2ab9e9e376d6fdc72/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-type-param-used-in-param.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-type-param-used-in-param.fixed?ref=14298997005486529e7a97b2ab9e9e376d6fdc72", "patch": "@@ -3,6 +3,6 @@\n fn two_type_params<A, B>(_: B) {}\n \n fn main() {\n-    two_type_params::<String, _>(100); //~ ERROR this function takes 2 generic arguments\n+    two_type_params::<String, _>(100); //~ ERROR function takes 2 generic arguments\n     two_type_params::<String, _>(100);\n }"}, {"sha": "d444998d35bf9959f9df5e6457d9ce042034abf9", "filename": "src/test/ui/suggestions/missing-type-param-used-in-param.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14298997005486529e7a97b2ab9e9e376d6fdc72/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-type-param-used-in-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14298997005486529e7a97b2ab9e9e376d6fdc72/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-type-param-used-in-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-type-param-used-in-param.rs?ref=14298997005486529e7a97b2ab9e9e376d6fdc72", "patch": "@@ -3,6 +3,6 @@\n fn two_type_params<A, B>(_: B) {}\n \n fn main() {\n-    two_type_params::<String>(100); //~ ERROR this function takes 2 generic arguments\n+    two_type_params::<String>(100); //~ ERROR function takes 2 generic arguments\n     two_type_params::<String, _>(100);\n }"}, {"sha": "5f59d0f541c99433e116610108335abbe02e9a0c", "filename": "src/test/ui/suggestions/sugg-else-for-closure.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14298997005486529e7a97b2ab9e9e376d6fdc72/src%2Ftest%2Fui%2Fsuggestions%2Fsugg-else-for-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14298997005486529e7a97b2ab9e9e376d6fdc72/src%2Ftest%2Fui%2Fsuggestions%2Fsugg-else-for-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsugg-else-for-closure.stderr?ref=14298997005486529e7a97b2ab9e9e376d6fdc72", "patch": "@@ -4,7 +4,7 @@ error[E0308]: mismatched types\n LL |     let _s = y.unwrap_or(|| x.split('.').nth(1).unwrap());\n    |                --------- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `&str`, found closure\n    |                |\n-   |                arguments to this function are incorrect\n+   |                arguments to this method are incorrect\n    |\n    = note: expected reference `&str`\n                 found closure `[closure@$DIR/sugg-else-for-closure.rs:6:26: 6:28]`"}, {"sha": "f520d88c6ba3b0cd838ba6596966e1afa71db7fb", "filename": "src/test/ui/suggestions/trait-with-missing-associated-type-restriction.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14298997005486529e7a97b2ab9e9e376d6fdc72/src%2Ftest%2Fui%2Fsuggestions%2Ftrait-with-missing-associated-type-restriction.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14298997005486529e7a97b2ab9e9e376d6fdc72/src%2Ftest%2Fui%2Fsuggestions%2Ftrait-with-missing-associated-type-restriction.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Ftrait-with-missing-associated-type-restriction.stderr?ref=14298997005486529e7a97b2ab9e9e376d6fdc72", "patch": "@@ -78,7 +78,7 @@ error[E0308]: mismatched types\n LL |     x.funk(3);\n    |       ---- ^ expected associated type, found integer\n    |       |\n-   |       arguments to this function are incorrect\n+   |       arguments to this method are incorrect\n    |\n    = note: expected associated type `<T as Trait<i32>>::A`\n                          found type `{integer}`"}, {"sha": "7924d3db06f36efb7ce39b5e0740200fc312099e", "filename": "src/test/ui/traits/issue-52893.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14298997005486529e7a97b2ab9e9e376d6fdc72/src%2Ftest%2Fui%2Ftraits%2Fissue-52893.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14298997005486529e7a97b2ab9e9e376d6fdc72/src%2Ftest%2Fui%2Ftraits%2Fissue-52893.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fissue-52893.stderr?ref=14298997005486529e7a97b2ab9e9e376d6fdc72", "patch": "@@ -7,7 +7,7 @@ LL | impl<F, Name, P> AddClass<Name, F> for Class<P>\n LL |         builder.push(output);\n    |                 ---- ^^^^^^ expected type parameter `F`, found struct `Class`\n    |                 |\n-   |                 arguments to this function are incorrect\n+   |                 arguments to this method are incorrect\n    |\n    = note: expected type parameter `F`\n                       found struct `Class<P>`"}, {"sha": "01b13b29fb4ccb3f6cc3b3549b6e5cec2b619e11", "filename": "src/test/ui/tuple/add-tuple-within-arguments.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14298997005486529e7a97b2ab9e9e376d6fdc72/src%2Ftest%2Fui%2Ftuple%2Fadd-tuple-within-arguments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14298997005486529e7a97b2ab9e9e376d6fdc72/src%2Ftest%2Fui%2Ftuple%2Fadd-tuple-within-arguments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftuple%2Fadd-tuple-within-arguments.rs?ref=14298997005486529e7a97b2ab9e9e376d6fdc72", "patch": "@@ -4,7 +4,7 @@ fn bar(s: &str, a: (&str,), s2: &str) {}\n \n fn main() {\n     foo(\"hi\", 1, 2, \"hi\");\n-    //~^ ERROR this function takes 3 arguments but 4 arguments were supplied\n+    //~^ ERROR function takes 3 arguments but 4 arguments were supplied\n     bar(\"hi\", \"hi\", \"hi\");\n     //~^ ERROR mismatched types\n }"}, {"sha": "2e20a4cca0845dff2b8ef166c3b77856456bbd0e", "filename": "src/test/ui/tuple/add-tuple-within-arguments.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14298997005486529e7a97b2ab9e9e376d6fdc72/src%2Ftest%2Fui%2Ftuple%2Fadd-tuple-within-arguments.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14298997005486529e7a97b2ab9e9e376d6fdc72/src%2Ftest%2Fui%2Ftuple%2Fadd-tuple-within-arguments.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftuple%2Fadd-tuple-within-arguments.stderr?ref=14298997005486529e7a97b2ab9e9e376d6fdc72", "patch": "@@ -1,4 +1,4 @@\n-error[E0061]: this function takes 3 arguments but 4 arguments were supplied\n+error[E0061]: function takes 3 arguments but 4 arguments were supplied\n   --> $DIR/add-tuple-within-arguments.rs:6:5\n    |\n LL |     foo(\"hi\", 1, 2, \"hi\");"}, {"sha": "e1c1d748fec0a601051cde1c2fd7322e128b0ee4", "filename": "src/test/ui/tuple/wrong_argument_ice-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14298997005486529e7a97b2ab9e9e376d6fdc72/src%2Ftest%2Fui%2Ftuple%2Fwrong_argument_ice-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14298997005486529e7a97b2ab9e9e376d6fdc72/src%2Ftest%2Fui%2Ftuple%2Fwrong_argument_ice-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftuple%2Fwrong_argument_ice-2.rs?ref=14298997005486529e7a97b2ab9e9e376d6fdc72", "patch": "@@ -11,7 +11,7 @@ impl Foo {\n fn bar() {\n     let x = Foo;\n     test(x.qux(), x.qux());\n-    //~^ ERROR this function takes 1 argument but 2 arguments were supplied\n+    //~^ ERROR function takes 1 argument but 2 arguments were supplied\n }\n \n fn main() {}"}, {"sha": "41244209214e7e2006e69db4ed4cb29c2ae2ea3b", "filename": "src/test/ui/tuple/wrong_argument_ice-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14298997005486529e7a97b2ab9e9e376d6fdc72/src%2Ftest%2Fui%2Ftuple%2Fwrong_argument_ice-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14298997005486529e7a97b2ab9e9e376d6fdc72/src%2Ftest%2Fui%2Ftuple%2Fwrong_argument_ice-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftuple%2Fwrong_argument_ice-2.stderr?ref=14298997005486529e7a97b2ab9e9e376d6fdc72", "patch": "@@ -1,4 +1,4 @@\n-error[E0061]: this function takes 1 argument but 2 arguments were supplied\n+error[E0061]: function takes 1 argument but 2 arguments were supplied\n   --> $DIR/wrong_argument_ice-2.rs:13:5\n    |\n LL |     test(x.qux(), x.qux());"}, {"sha": "96633180b57eb320480999f955a22cf5b061d4a5", "filename": "src/test/ui/tuple/wrong_argument_ice-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14298997005486529e7a97b2ab9e9e376d6fdc72/src%2Ftest%2Fui%2Ftuple%2Fwrong_argument_ice-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14298997005486529e7a97b2ab9e9e376d6fdc72/src%2Ftest%2Fui%2Ftuple%2Fwrong_argument_ice-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftuple%2Fwrong_argument_ice-3.rs?ref=14298997005486529e7a97b2ab9e9e376d6fdc72", "patch": "@@ -7,7 +7,7 @@ fn test(process: &Process, groups: Vec<Group>) -> Vec<Group> {\n \n     if groups.capacity() == 0 {\n         groups.push(new_group, vec![process]);\n-        //~^ ERROR this function takes 1 argument but 2 arguments were supplied\n+        //~^ ERROR this method takes 1 argument but 2 arguments were supplied\n         return groups;\n     }\n "}, {"sha": "0a503e1fe58c1a503c2e81fb136d0e70368dd24d", "filename": "src/test/ui/tuple/wrong_argument_ice-3.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14298997005486529e7a97b2ab9e9e376d6fdc72/src%2Ftest%2Fui%2Ftuple%2Fwrong_argument_ice-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14298997005486529e7a97b2ab9e9e376d6fdc72/src%2Ftest%2Fui%2Ftuple%2Fwrong_argument_ice-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftuple%2Fwrong_argument_ice-3.stderr?ref=14298997005486529e7a97b2ab9e9e376d6fdc72", "patch": "@@ -1,4 +1,4 @@\n-error[E0061]: this function takes 1 argument but 2 arguments were supplied\n+error[E0061]: this method takes 1 argument but 2 arguments were supplied\n   --> $DIR/wrong_argument_ice-3.rs:9:16\n    |\n LL |         groups.push(new_group, vec![process]);"}, {"sha": "883d92dcce1437a26eaa95028a69e725f0419c48", "filename": "src/test/ui/tuple/wrong_argument_ice-4.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14298997005486529e7a97b2ab9e9e376d6fdc72/src%2Ftest%2Fui%2Ftuple%2Fwrong_argument_ice-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14298997005486529e7a97b2ab9e9e376d6fdc72/src%2Ftest%2Fui%2Ftuple%2Fwrong_argument_ice-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftuple%2Fwrong_argument_ice-4.rs?ref=14298997005486529e7a97b2ab9e9e376d6fdc72", "patch": "@@ -1,6 +1,6 @@\n fn main() {\n     (|| {})(|| {\n-        //~^ ERROR this function takes 0 arguments but 1 argument was supplied\n+        //~^ ERROR function takes 0 arguments but 1 argument was supplied\n         let b = 1;\n     });\n }"}, {"sha": "b7e0225feb76dad8ee8ba0a3d52f2b85f867d5a3", "filename": "src/test/ui/tuple/wrong_argument_ice.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14298997005486529e7a97b2ab9e9e376d6fdc72/src%2Ftest%2Fui%2Ftuple%2Fwrong_argument_ice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14298997005486529e7a97b2ab9e9e376d6fdc72/src%2Ftest%2Fui%2Ftuple%2Fwrong_argument_ice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftuple%2Fwrong_argument_ice.rs?ref=14298997005486529e7a97b2ab9e9e376d6fdc72", "patch": "@@ -9,7 +9,7 @@ pub struct BuildPlanBuilder {\n impl BuildPlanBuilder {\n     pub fn or(&mut self) -> &mut Self {\n         self.acc.push_back(self.current_provides, self.current_requires);\n-        //~^ ERROR this function takes 1 argument but 2 arguments were supplied\n+        //~^ ERROR method takes 1 argument but 2 arguments were supplied\n         self\n     }\n }"}, {"sha": "f1b00ae0b9242265bcb8a3e6a87742e04a2b9752", "filename": "src/test/ui/tuple/wrong_argument_ice.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14298997005486529e7a97b2ab9e9e376d6fdc72/src%2Ftest%2Fui%2Ftuple%2Fwrong_argument_ice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14298997005486529e7a97b2ab9e9e376d6fdc72/src%2Ftest%2Fui%2Ftuple%2Fwrong_argument_ice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftuple%2Fwrong_argument_ice.stderr?ref=14298997005486529e7a97b2ab9e9e376d6fdc72", "patch": "@@ -1,4 +1,4 @@\n-error[E0061]: this function takes 1 argument but 2 arguments were supplied\n+error[E0061]: method takes 1 argument but 2 arguments were supplied\n   --> $DIR/wrong_argument_ice.rs:11:18\n    |\n LL |         self.acc.push_back(self.current_provides, self.current_requires);"}, {"sha": "8978c85ed493232f4f8db6ae916a9db3adf0b525", "filename": "src/test/ui/type/type-ascription-instead-of-initializer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14298997005486529e7a97b2ab9e9e376d6fdc72/src%2Ftest%2Fui%2Ftype%2Ftype-ascription-instead-of-initializer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14298997005486529e7a97b2ab9e9e376d6fdc72/src%2Ftest%2Fui%2Ftype%2Ftype-ascription-instead-of-initializer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-ascription-instead-of-initializer.rs?ref=14298997005486529e7a97b2ab9e9e376d6fdc72", "patch": "@@ -1,4 +1,4 @@\n fn main() {\n     let x: Vec::with_capacity(10, 20);  //~ ERROR expected type, found `10`\n-    //~^ ERROR this function takes 1 argument\n+    //~^ ERROR function takes 1 argument\n }"}, {"sha": "d09306bf7941fd10070ecd7916bf6fb303232cb2", "filename": "src/test/ui/typeck/remove-extra-argument.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14298997005486529e7a97b2ab9e9e376d6fdc72/src%2Ftest%2Fui%2Ftypeck%2Fremove-extra-argument.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/14298997005486529e7a97b2ab9e9e376d6fdc72/src%2Ftest%2Fui%2Ftypeck%2Fremove-extra-argument.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fremove-extra-argument.fixed?ref=14298997005486529e7a97b2ab9e9e376d6fdc72", "patch": "@@ -4,6 +4,6 @@ fn l(_a: Vec<u8>) {}\n \n fn main() {\n     l(vec![])\n-    //~^ ERROR this function takes 1 argument but 2 arguments were supplied\n+    //~^ ERROR function takes 1 argument but 2 arguments were supplied\n     //~| HELP remove the extra argument\n }"}, {"sha": "2181c37cee913a5904222a74a7baca472d2efb35", "filename": "src/test/ui/typeck/remove-extra-argument.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14298997005486529e7a97b2ab9e9e376d6fdc72/src%2Ftest%2Fui%2Ftypeck%2Fremove-extra-argument.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14298997005486529e7a97b2ab9e9e376d6fdc72/src%2Ftest%2Fui%2Ftypeck%2Fremove-extra-argument.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fremove-extra-argument.rs?ref=14298997005486529e7a97b2ab9e9e376d6fdc72", "patch": "@@ -4,6 +4,6 @@ fn l(_a: Vec<u8>) {}\n \n fn main() {\n     l(vec![], vec![])\n-    //~^ ERROR this function takes 1 argument but 2 arguments were supplied\n+    //~^ ERROR function takes 1 argument but 2 arguments were supplied\n     //~| HELP remove the extra argument\n }"}, {"sha": "27cc5a1c3f04c5e53fc4008a18e611a2677035e2", "filename": "src/tools/clippy/clippy_lints/src/casts/cast_slice_different_sizes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14298997005486529e7a97b2ab9e9e376d6fdc72/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fcasts%2Fcast_slice_different_sizes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14298997005486529e7a97b2ab9e9e376d6fdc72/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fcasts%2Fcast_slice_different_sizes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fcasts%2Fcast_slice_different_sizes.rs?ref=14298997005486529e7a97b2ab9e9e376d6fdc72", "patch": "@@ -68,7 +68,7 @@ pub(super) fn check<'tcx>(cx: &LateContext<'tcx>, expr: &Expr<'tcx>, msrv: &Msrv\n fn is_child_of_cast(cx: &LateContext<'_>, expr: &Expr<'_>) -> bool {\n     let map = cx.tcx.hir();\n     if_chain! {\n-        if let Some(parent_id) = map.find_parent_node(expr.hir_id);\n+        if let Some(parent_id) = map.opt_parent_id(expr.hir_id);\n         if let Some(parent) = map.find(parent_id);\n         then {\n             let expr = match parent {"}, {"sha": "dfb43893326eb8a225ee72b7ef0ce5feaecd0886", "filename": "src/tools/clippy/clippy_lints/src/escape.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/14298997005486529e7a97b2ab9e9e376d6fdc72/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fescape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14298997005486529e7a97b2ab9e9e376d6fdc72/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fescape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fescape.rs?ref=14298997005486529e7a97b2ab9e9e376d6fdc72", "patch": "@@ -131,7 +131,7 @@ fn is_argument(map: rustc_middle::hir::map::Map<'_>, id: HirId) -> bool {\n         _ => return false,\n     }\n \n-    matches!(map.find(map.get_parent_node(id)), Some(Node::Param(_)))\n+    matches!(map.find_parent(id), Some(Node::Param(_)))\n }\n \n impl<'a, 'tcx> Delegate<'tcx> for EscapeDelegate<'a, 'tcx> {\n@@ -156,8 +156,8 @@ impl<'a, 'tcx> Delegate<'tcx> for EscapeDelegate<'a, 'tcx> {\n             let map = &self.cx.tcx.hir();\n             if is_argument(*map, cmt.hir_id) {\n                 // Skip closure arguments\n-                let parent_id = map.get_parent_node(cmt.hir_id);\n-                if let Some(Node::Expr(..)) = map.find(map.get_parent_node(parent_id)) {\n+                let parent_id = map.parent_id(cmt.hir_id);\n+                if let Some(Node::Expr(..)) = map.find_parent(parent_id) {\n                     return;\n                 }\n "}, {"sha": "bdeddf44df7bd27839af48aa48ff7654794eb57b", "filename": "src/tools/clippy/clippy_lints/src/index_refutable_slice.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/14298997005486529e7a97b2ab9e9e376d6fdc72/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Findex_refutable_slice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14298997005486529e7a97b2ab9e9e376d6fdc72/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Findex_refutable_slice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Findex_refutable_slice.rs?ref=14298997005486529e7a97b2ab9e9e376d6fdc72", "patch": "@@ -251,15 +251,15 @@ impl<'a, 'tcx> Visitor<'tcx> for SliceIndexLintingVisitor<'a, 'tcx> {\n                 let map = cx.tcx.hir();\n \n                 // Checking for slice indexing\n-                let parent_id = map.get_parent_node(expr.hir_id);\n+                let parent_id = map.parent_id(expr.hir_id);\n                 if let Some(hir::Node::Expr(parent_expr)) = map.find(parent_id);\n                 if let hir::ExprKind::Index(_, index_expr) = parent_expr.kind;\n                 if let Some((Constant::Int(index_value), _)) = constant(cx, cx.typeck_results(), index_expr);\n                 if let Ok(index_value) = index_value.try_into();\n                 if index_value < max_suggested_slice;\n \n                 // Make sure that this slice index is read only\n-                let maybe_addrof_id = map.get_parent_node(parent_id);\n+                let maybe_addrof_id = map.parent_id(parent_id);\n                 if let Some(hir::Node::Expr(maybe_addrof_expr)) = map.find(maybe_addrof_id);\n                 if let hir::ExprKind::AddrOf(_kind, hir::Mutability::Not, _inner_expr) = maybe_addrof_expr.kind;\n                 then {"}, {"sha": "540656a2cd991d8f497e1531db137fd69bc2ed6d", "filename": "src/tools/clippy/clippy_lints/src/loops/same_item_push.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14298997005486529e7a97b2ab9e9e376d6fdc72/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Fsame_item_push.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14298997005486529e7a97b2ab9e9e376d6fdc72/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Fsame_item_push.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Fsame_item_push.rs?ref=14298997005486529e7a97b2ab9e9e376d6fdc72", "patch": "@@ -63,7 +63,7 @@ pub(super) fn check<'tcx>(\n                                 if let Node::Pat(pat) = node;\n                                 if let PatKind::Binding(bind_ann, ..) = pat.kind;\n                                 if !matches!(bind_ann, BindingAnnotation(_, Mutability::Mut));\n-                                let parent_node = cx.tcx.hir().get_parent_node(hir_id);\n+                                let parent_node = cx.tcx.hir().parent_id(hir_id);\n                                 if let Some(Node::Local(parent_let_expr)) = cx.tcx.hir().find(parent_node);\n                                 if let Some(init) = parent_let_expr.init;\n                                 then {"}, {"sha": "38f41d077c161f941764e897216d62c4fdd60b55", "filename": "src/tools/clippy/clippy_lints/src/manual_rem_euclid.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14298997005486529e7a97b2ab9e9e376d6fdc72/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmanual_rem_euclid.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14298997005486529e7a97b2ab9e9e376d6fdc72/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmanual_rem_euclid.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmanual_rem_euclid.rs?ref=14298997005486529e7a97b2ab9e9e376d6fdc72", "patch": "@@ -74,7 +74,7 @@ impl<'tcx> LateLintPass<'tcx> for ManualRemEuclid {\n             && let Some(hir_id) = path_to_local(expr3)\n             && let Some(Node::Pat(_)) = cx.tcx.hir().find(hir_id) {\n                 // Apply only to params or locals with annotated types\n-                match cx.tcx.hir().find(cx.tcx.hir().get_parent_node(hir_id)) {\n+                match cx.tcx.hir().find_parent(hir_id) {\n                     Some(Node::Param(..)) => (),\n                     Some(Node::Local(local)) => {\n                         let Some(ty) = local.ty else { return };"}, {"sha": "065a5c72621cd50e1617c767874a01f361a41dfb", "filename": "src/tools/clippy/clippy_lints/src/matches/match_single_binding.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/14298997005486529e7a97b2ab9e9e376d6fdc72/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmatches%2Fmatch_single_binding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14298997005486529e7a97b2ab9e9e376d6fdc72/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmatches%2Fmatch_single_binding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmatches%2Fmatch_single_binding.rs?ref=14298997005486529e7a97b2ab9e9e376d6fdc72", "patch": "@@ -140,8 +140,8 @@ pub(crate) fn check<'a>(cx: &LateContext<'a>, ex: &Expr<'a>, arms: &[Arm<'_>], e\n fn opt_parent_assign_span<'a>(cx: &LateContext<'a>, ex: &Expr<'a>) -> Option<AssignmentExpr> {\n     let map = &cx.tcx.hir();\n \n-    if let Some(Node::Expr(parent_arm_expr)) = map.find(map.get_parent_node(ex.hir_id)) {\n-        return match map.find(map.get_parent_node(parent_arm_expr.hir_id)) {\n+    if let Some(Node::Expr(parent_arm_expr)) = map.find_parent(ex.hir_id) {\n+        return match map.find_parent(parent_arm_expr.hir_id) {\n             Some(Node::Local(parent_let_expr)) => Some(AssignmentExpr::Local {\n                 span: parent_let_expr.span,\n                 pat_span: parent_let_expr.pat.span(),\n@@ -183,8 +183,7 @@ fn sugg_with_curlies<'a>(\n \n     // If the parent is already an arm, and the body is another match statement,\n     // we need curly braces around suggestion\n-    let parent_node_id = cx.tcx.hir().get_parent_node(match_expr.hir_id);\n-    if let Node::Arm(arm) = &cx.tcx.hir().get(parent_node_id) {\n+    if let Node::Arm(arm) = &cx.tcx.hir().get_parent(match_expr.hir_id) {\n         if let ExprKind::Match(..) = arm.body.kind {\n             cbrace_end = format!(\"\\n{indent}}}\");\n             // Fix body indent due to the match"}, {"sha": "f0be7771bb1a6d6d44f2f7263915d251aa665d50", "filename": "src/tools/clippy/clippy_lints/src/mixed_read_write_in_expression.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14298997005486529e7a97b2ab9e9e376d6fdc72/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmixed_read_write_in_expression.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14298997005486529e7a97b2ab9e9e376d6fdc72/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmixed_read_write_in_expression.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmixed_read_write_in_expression.rs?ref=14298997005486529e7a97b2ab9e9e376d6fdc72", "patch": "@@ -186,7 +186,7 @@ fn check_for_unsequenced_reads(vis: &mut ReadVisitor<'_, '_>) {\n     let map = &vis.cx.tcx.hir();\n     let mut cur_id = vis.write_expr.hir_id;\n     loop {\n-        let parent_id = map.get_parent_node(cur_id);\n+        let parent_id = map.parent_id(cur_id);\n         if parent_id == cur_id {\n             break;\n         }"}, {"sha": "1249db5dc4792307ed353ba64dfd959e8a7368b4", "filename": "src/tools/clippy/clippy_lints/src/needless_pass_by_value.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14298997005486529e7a97b2ab9e9e376d6fdc72/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14298997005486529e7a97b2ab9e9e376d6fdc72/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fneedless_pass_by_value.rs?ref=14298997005486529e7a97b2ab9e9e376d6fdc72", "patch": "@@ -100,7 +100,7 @@ impl<'tcx> LateLintPass<'tcx> for NeedlessPassByValue {\n         }\n \n         // Exclude non-inherent impls\n-        if let Some(Node::Item(item)) = cx.tcx.hir().find(cx.tcx.hir().get_parent_node(hir_id)) {\n+        if let Some(Node::Item(item)) = cx.tcx.hir().find_parent(hir_id) {\n             if matches!(\n                 item.kind,\n                 ItemKind::Impl(Impl { of_trait: Some(_), .. }) | ItemKind::Trait(..)"}, {"sha": "07fd321d69fced8a6ac11ebb3bb790a90fdf1bd3", "filename": "src/tools/clippy/clippy_lints/src/non_copy_const.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14298997005486529e7a97b2ab9e9e376d6fdc72/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fnon_copy_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14298997005486529e7a97b2ab9e9e376d6fdc72/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fnon_copy_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fnon_copy_const.rs?ref=14298997005486529e7a97b2ab9e9e376d6fdc72", "patch": "@@ -366,7 +366,7 @@ impl<'tcx> LateLintPass<'tcx> for NonCopyConst {\n             let mut dereferenced_expr = expr;\n             let mut needs_check_adjustment = true;\n             loop {\n-                let parent_id = cx.tcx.hir().get_parent_node(cur_expr.hir_id);\n+                let parent_id = cx.tcx.hir().parent_id(cur_expr.hir_id);\n                 if parent_id == cur_expr.hir_id {\n                     break;\n                 }"}, {"sha": "870a1c7d88d532bd6eadbf148acde49fd64b58be", "filename": "src/tools/clippy/clippy_lints/src/pass_by_ref_or_value.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14298997005486529e7a97b2ab9e9e376d6fdc72/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fpass_by_ref_or_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14298997005486529e7a97b2ab9e9e376d6fdc72/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fpass_by_ref_or_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fpass_by_ref_or_value.rs?ref=14298997005486529e7a97b2ab9e9e376d6fdc72", "patch": "@@ -299,7 +299,7 @@ impl<'tcx> LateLintPass<'tcx> for PassByRefOrValue {\n         }\n \n         // Exclude non-inherent impls\n-        if let Some(Node::Item(item)) = cx.tcx.hir().find(cx.tcx.hir().get_parent_node(hir_id)) {\n+        if let Some(Node::Item(item)) = cx.tcx.hir().find_parent(hir_id) {\n             if matches!(\n                 item.kind,\n                 ItemKind::Impl(Impl { of_trait: Some(_), .. }) | ItemKind::Trait(..)"}, {"sha": "dd120599c04e1b9c6f0175a4644e4c14dd1b00c8", "filename": "src/tools/clippy/clippy_lints/src/unit_types/unit_arg.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/14298997005486529e7a97b2ab9e9e376d6fdc72/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funit_types%2Funit_arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14298997005486529e7a97b2ab9e9e376d6fdc72/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funit_types%2Funit_arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funit_types%2Funit_arg.rs?ref=14298997005486529e7a97b2ab9e9e376d6fdc72", "patch": "@@ -21,7 +21,7 @@ pub(super) fn check<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'tcx>) {\n         return;\n     }\n     let map = &cx.tcx.hir();\n-    let opt_parent_node = map.find(map.get_parent_node(expr.hir_id));\n+    let opt_parent_node = map.find_parent(expr.hir_id);\n     if_chain! {\n         if let Some(hir::Node::Expr(parent_expr)) = opt_parent_node;\n         if is_questionmark_desugar_marked_call(parent_expr);\n@@ -192,7 +192,7 @@ fn fmt_stmts_and_call(\n \n     let mut stmts_and_call_snippet = stmts_and_call.join(&format!(\"{}{}\", \";\\n\", \" \".repeat(call_expr_indent)));\n     // expr is not in a block statement or result expression position, wrap in a block\n-    let parent_node = cx.tcx.hir().find(cx.tcx.hir().get_parent_node(call_expr.hir_id));\n+    let parent_node = cx.tcx.hir().find_parent(call_expr.hir_id);\n     if !matches!(parent_node, Some(Node::Block(_))) && !matches!(parent_node, Some(Node::Stmt(_))) {\n         let block_indent = call_expr_indent + 4;\n         stmts_and_call_snippet ="}, {"sha": "84ec0d0fb1cf4ccf42e4bf43e8b4c34f84d192c1", "filename": "src/tools/clippy/clippy_lints/src/unnecessary_wraps.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14298997005486529e7a97b2ab9e9e376d6fdc72/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funnecessary_wraps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14298997005486529e7a97b2ab9e9e376d6fdc72/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funnecessary_wraps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funnecessary_wraps.rs?ref=14298997005486529e7a97b2ab9e9e376d6fdc72", "patch": "@@ -91,7 +91,7 @@ impl<'tcx> LateLintPass<'tcx> for UnnecessaryWraps {\n         }\n \n         // Abort if the method is implementing a trait or of it a trait method.\n-        if let Some(Node::Item(item)) = cx.tcx.hir().find(cx.tcx.hir().get_parent_node(hir_id)) {\n+        if let Some(Node::Item(item)) = cx.tcx.hir().find_parent(hir_id) {\n             if matches!(\n                 item.kind,\n                 ItemKind::Impl(Impl { of_trait: Some(_), .. }) | ItemKind::Trait(..)"}, {"sha": "c86f24cbd3780d5300ad1b4d278668e125d8ddf9", "filename": "src/tools/clippy/clippy_lints/src/utils/internal_lints/metadata_collector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14298997005486529e7a97b2ab9e9e376d6fdc72/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Finternal_lints%2Fmetadata_collector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14298997005486529e7a97b2ab9e9e376d6fdc72/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Finternal_lints%2Fmetadata_collector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Finternal_lints%2Fmetadata_collector.rs?ref=14298997005486529e7a97b2ab9e9e376d6fdc72", "patch": "@@ -1058,7 +1058,7 @@ fn get_parent_local<'hir>(cx: &LateContext<'hir>, expr: &'hir hir::Expr<'hir>) -\n fn get_parent_local_hir_id<'hir>(cx: &LateContext<'hir>, hir_id: hir::HirId) -> Option<&'hir hir::Local<'hir>> {\n     let map = cx.tcx.hir();\n \n-    match map.find(map.get_parent_node(hir_id)) {\n+    match map.find_parent((hir_id)) {\n         Some(hir::Node::Local(local)) => Some(local),\n         Some(hir::Node::Pat(pattern)) => get_parent_local_hir_id(cx, pattern.hir_id),\n         _ => None,"}, {"sha": "7144363637a04a0d0213c7b9d696431605a61450", "filename": "src/tools/clippy/clippy_lints/src/utils/internal_lints/unnecessary_def_path.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14298997005486529e7a97b2ab9e9e376d6fdc72/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Finternal_lints%2Funnecessary_def_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14298997005486529e7a97b2ab9e9e376d6fdc72/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Finternal_lints%2Funnecessary_def_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Finternal_lints%2Funnecessary_def_path.rs?ref=14298997005486529e7a97b2ab9e9e376d6fdc72", "patch": "@@ -219,7 +219,7 @@ fn path_to_matched_type(cx: &LateContext<'_>, expr: &hir::Expr<'_>) -> Option<Ve\n     match peel_hir_expr_refs(expr).0.kind {\n         ExprKind::Path(ref qpath) => match cx.qpath_res(qpath, expr.hir_id) {\n             Res::Local(hir_id) => {\n-                let parent_id = cx.tcx.hir().get_parent_node(hir_id);\n+                let parent_id = cx.tcx.hir().parent_id(hir_id);\n                 if let Some(Node::Local(Local { init: Some(init), .. })) = cx.tcx.hir().find(parent_id) {\n                     path_to_matched_type(cx, init)\n                 } else {"}, {"sha": "8290fe9ecb4c64593098395ff34389aa30ec4c06", "filename": "src/tools/clippy/clippy_utils/src/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/14298997005486529e7a97b2ab9e9e376d6fdc72/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14298997005486529e7a97b2ab9e9e376d6fdc72/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Flib.rs?ref=14298997005486529e7a97b2ab9e9e376d6fdc72", "patch": "@@ -174,7 +174,7 @@ pub fn find_binding_init<'tcx>(cx: &LateContext<'tcx>, hir_id: HirId) -> Option<\n     if_chain! {\n         if let Some(Node::Pat(pat)) = hir.find(hir_id);\n         if matches!(pat.kind, PatKind::Binding(BindingAnnotation::NONE, ..));\n-        let parent = hir.get_parent_node(hir_id);\n+        let parent = hir.parent_id(hir_id);\n         if let Some(Node::Local(local)) = hir.find(parent);\n         then {\n             return local.init;\n@@ -1287,7 +1287,7 @@ pub fn contains_return(expr: &hir::Expr<'_>) -> bool {\n \n /// Gets the parent node, if any.\n pub fn get_parent_node(tcx: TyCtxt<'_>, id: HirId) -> Option<Node<'_>> {\n-    tcx.hir().parent_iter(id).next().map(|(_, node)| node)\n+    tcx.hir().find_parent(id)\n }\n \n /// Gets the parent expression, if any \u2013- this is useful to constrain a lint.\n@@ -2075,7 +2075,7 @@ pub fn is_no_core_crate(cx: &LateContext<'_>) -> bool {\n /// }\n /// ```\n pub fn is_trait_impl_item(cx: &LateContext<'_>, hir_id: HirId) -> bool {\n-    if let Some(Node::Item(item)) = cx.tcx.hir().find(cx.tcx.hir().get_parent_node(hir_id)) {\n+    if let Some(Node::Item(item)) = cx.tcx.hir().find_parent(hir_id) {\n         matches!(item.kind, ItemKind::Impl(hir::Impl { of_trait: Some(_), .. }))\n     } else {\n         false"}, {"sha": "7e48dd206606867512a6a8e0f4cfcbe122b8317e", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14298997005486529e7a97b2ab9e9e376d6fdc72/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14298997005486529e7a97b2ab9e9e376d6fdc72/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=14298997005486529e7a97b2ab9e9e376d6fdc72", "patch": "@@ -2011,7 +2011,7 @@ impl<'test> TestCx<'test> {\n                 rustc.args(&[\"-Zpolonius\"]);\n             }\n             Some(CompareMode::Chalk) => {\n-                rustc.args(&[\"-Zchalk\"]);\n+                rustc.args(&[\"-Ztrait-solver=chalk\"]);\n             }\n             Some(CompareMode::SplitDwarf) if self.config.target.contains(\"windows\") => {\n                 rustc.args(&[\"-Csplit-debuginfo=unpacked\", \"-Zunstable-options\"]);"}]}