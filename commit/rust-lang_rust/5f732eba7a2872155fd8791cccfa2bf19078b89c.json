{"sha": "5f732eba7a2872155fd8791cccfa2bf19078b89c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVmNzMyZWJhN2EyODcyMTU1ZmQ4NzkxY2NjZmEyYmYxOTA3OGI4OWM=", "commit": {"author": {"name": "Mark Simulacrum", "email": "mark.simulacrum@gmail.com", "date": "2017-07-04T13:41:42Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-07-04T13:41:42Z"}, "message": "Rollup merge of #43041 - andersk:dedup_by, r=alexcrichton\n\nDocument unintuitive argument order for Vec::dedup_by relation\n\nWhen trying to use `dedup_by` to merge some auxiliary information from removed elements into kept elements, I was surprised to observe that `vec.dedup_by(same_bucket)` calls `same_bucket(a, b)` where `b` appears before `a` in the vector, and discards `a` when true is returned.  This argument order is probably a bug, but since it has already been stabilized, I guess we should document it as a feature and move on.\n\n(`Vec::dedup` also uses `==` with this unexpected argument order, but I figure that\u2019s not important since `==` is expected to be symmetric with no side effects.)", "tree": {"sha": "36bd3e9c34a3271ca3f0d618a241231fdb421481", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/36bd3e9c34a3271ca3f0d618a241231fdb421481"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5f732eba7a2872155fd8791cccfa2bf19078b89c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5f732eba7a2872155fd8791cccfa2bf19078b89c", "html_url": "https://github.com/rust-lang/rust/commit/5f732eba7a2872155fd8791cccfa2bf19078b89c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5f732eba7a2872155fd8791cccfa2bf19078b89c/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2fdb9c978da81d60671feb16dd348e8e551288e1", "url": "https://api.github.com/repos/rust-lang/rust/commits/2fdb9c978da81d60671feb16dd348e8e551288e1", "html_url": "https://github.com/rust-lang/rust/commit/2fdb9c978da81d60671feb16dd348e8e551288e1"}, {"sha": "d68c3ab17b6f6c3b71d0531063aec8e64098f59c", "url": "https://api.github.com/repos/rust-lang/rust/commits/d68c3ab17b6f6c3b71d0531063aec8e64098f59c", "html_url": "https://github.com/rust-lang/rust/commit/d68c3ab17b6f6c3b71d0531063aec8e64098f59c"}], "stats": {"total": 16, "additions": 12, "deletions": 4}, "files": [{"sha": "17f1229c2060ef2145c377c122ee8e3996ca5e87", "filename": "src/liballoc/tests/vec.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5f732eba7a2872155fd8791cccfa2bf19078b89c/src%2Fliballoc%2Ftests%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f732eba7a2872155fd8791cccfa2bf19078b89c/src%2Fliballoc%2Ftests%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Fvec.rs?ref=5f732eba7a2872155fd8791cccfa2bf19078b89c", "patch": "@@ -274,6 +274,11 @@ fn test_dedup_by() {\n     vec.dedup_by(|a, b| a.eq_ignore_ascii_case(b));\n \n     assert_eq!(vec, [\"foo\", \"bar\", \"baz\", \"bar\"]);\n+\n+    let mut vec = vec![(\"foo\", 1), (\"foo\", 2), (\"bar\", 3), (\"bar\", 4), (\"bar\", 5)];\n+    vec.dedup_by(|a, b| a.0 == b.0 && { b.1 += a.1; true });\n+\n+    assert_eq!(vec, [(\"foo\", 3), (\"bar\", 12)]);\n }\n \n #[test]"}, {"sha": "1a5975686df68b0265dc244170a70a7a2cf8b1e4", "filename": "src/liballoc/vec.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/5f732eba7a2872155fd8791cccfa2bf19078b89c/src%2Fliballoc%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f732eba7a2872155fd8791cccfa2bf19078b89c/src%2Fliballoc%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fvec.rs?ref=5f732eba7a2872155fd8791cccfa2bf19078b89c", "patch": "@@ -823,7 +823,8 @@ impl<T> Vec<T> {\n         }\n     }\n \n-    /// Removes consecutive elements in the vector that resolve to the same key.\n+    /// Removes all but the first of consecutive elements in the vector that resolve to the same\n+    /// key.\n     ///\n     /// If the vector is sorted, this removes all duplicates.\n     ///\n@@ -842,11 +843,13 @@ impl<T> Vec<T> {\n         self.dedup_by(|a, b| key(a) == key(b))\n     }\n \n-    /// Removes consecutive elements in the vector according to a predicate.\n+    /// Removes all but the first of consecutive elements in the vector satisfying a given equality\n+    /// relation.\n     ///\n     /// The `same_bucket` function is passed references to two elements from the vector, and\n-    /// returns `true` if the elements compare equal, or `false` if they do not. Only the first\n-    /// of adjacent equal items is kept.\n+    /// returns `true` if the elements compare equal, or `false` if they do not. The elements are\n+    /// passed in opposite order from their order in the vector, so if `same_bucket(a, b)` returns\n+    /// `true`, `a` is removed.\n     ///\n     /// If the vector is sorted, this removes all duplicates.\n     ///"}]}