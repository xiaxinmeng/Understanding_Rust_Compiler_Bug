{"sha": "9063dabcca0aaaa6d8bb3364cee21fd68023a059", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkwNjNkYWJjY2EwYWFhYTZkOGJiMzM2NGNlZTIxZmQ2ODAyM2EwNTk=", "commit": {"author": {"name": "Ville Penttinen", "email": "villem.penttinen@gmail.com", "date": "2019-03-05T19:59:01Z"}, "committer": {"name": "Ville Penttinen", "email": "villem.penttinen@gmail.com", "date": "2019-03-05T19:59:01Z"}, "message": "Send an actual ShowMessage instead of InternalFeedback in feedback()\n\nThis now allows us to send a notification that can be shown in the UI when the\nworkspace has been loaded.\n\nAdditionally this removes the need for internal_mode flag.", "tree": {"sha": "ea85c8abd5ba57f0120556987a1c8cc5c6eae19d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ea85c8abd5ba57f0120556987a1c8cc5c6eae19d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9063dabcca0aaaa6d8bb3364cee21fd68023a059", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9063dabcca0aaaa6d8bb3364cee21fd68023a059", "html_url": "https://github.com/rust-lang/rust/commit/9063dabcca0aaaa6d8bb3364cee21fd68023a059", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9063dabcca0aaaa6d8bb3364cee21fd68023a059/comments", "author": {"login": "vipentti", "id": 4726680, "node_id": "MDQ6VXNlcjQ3MjY2ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/4726680?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vipentti", "html_url": "https://github.com/vipentti", "followers_url": "https://api.github.com/users/vipentti/followers", "following_url": "https://api.github.com/users/vipentti/following{/other_user}", "gists_url": "https://api.github.com/users/vipentti/gists{/gist_id}", "starred_url": "https://api.github.com/users/vipentti/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vipentti/subscriptions", "organizations_url": "https://api.github.com/users/vipentti/orgs", "repos_url": "https://api.github.com/users/vipentti/repos", "events_url": "https://api.github.com/users/vipentti/events{/privacy}", "received_events_url": "https://api.github.com/users/vipentti/received_events", "type": "User", "site_admin": false}, "committer": {"login": "vipentti", "id": 4726680, "node_id": "MDQ6VXNlcjQ3MjY2ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/4726680?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vipentti", "html_url": "https://github.com/vipentti", "followers_url": "https://api.github.com/users/vipentti/followers", "following_url": "https://api.github.com/users/vipentti/following{/other_user}", "gists_url": "https://api.github.com/users/vipentti/gists{/gist_id}", "starred_url": "https://api.github.com/users/vipentti/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vipentti/subscriptions", "organizations_url": "https://api.github.com/users/vipentti/orgs", "repos_url": "https://api.github.com/users/vipentti/repos", "events_url": "https://api.github.com/users/vipentti/events{/privacy}", "received_events_url": "https://api.github.com/users/vipentti/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ab288a32f9a95e3ca5e9e42f9c6f59bb3849f26e", "url": "https://api.github.com/repos/rust-lang/rust/commits/ab288a32f9a95e3ca5e9e42f9c6f59bb3849f26e", "html_url": "https://github.com/rust-lang/rust/commit/ab288a32f9a95e3ca5e9e42f9c6f59bb3849f26e"}], "stats": {"total": 47, "additions": 27, "deletions": 20}, "files": [{"sha": "9dc2e3f879b1ee31eafc0f61826c08740c6b2bcd", "filename": "crates/ra_lsp_server/src/main.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9063dabcca0aaaa6d8bb3364cee21fd68023a059/crates%2Fra_lsp_server%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9063dabcca0aaaa6d8bb3364cee21fd68023a059/crates%2Fra_lsp_server%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fmain.rs?ref=9063dabcca0aaaa6d8bb3364cee21fd68023a059", "patch": "@@ -43,7 +43,7 @@ fn main_inner() -> Result<()> {\n             .and_then(|v| InitializationOptions::deserialize(v).ok())\n             .and_then(|it| it.publish_decorations)\n             == Some(true);\n-        ra_lsp_server::main_loop(false, root, supports_decorations, r, s)\n+        ra_lsp_server::main_loop(root, supports_decorations, r, s)\n     })?;\n     log::info!(\"shutting down IO...\");\n     threads.join()?;"}, {"sha": "145f7bf6536b46205a4a40303a49e0c50792a006", "filename": "crates/ra_lsp_server/src/main_loop.rs", "status": "modified", "additions": 21, "deletions": 16, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/9063dabcca0aaaa6d8bb3364cee21fd68023a059/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9063dabcca0aaaa6d8bb3364cee21fd68023a059/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop.rs?ref=9063dabcca0aaaa6d8bb3364cee21fd68023a059", "patch": "@@ -46,7 +46,6 @@ enum Task {\n const THREADPOOL_SIZE: usize = 8;\n \n pub fn main_loop(\n-    internal_mode: bool,\n     ws_root: PathBuf,\n     supports_decorations: bool,\n     msg_receiver: &Receiver<RawMessage>,\n@@ -63,11 +62,12 @@ pub fn main_loop(\n             Ok(ws) => vec![ws],\n             Err(e) => {\n                 log::error!(\"loading workspace failed: {}\", e);\n-                let msg = RawNotification::new::<req::ShowMessage>(&req::ShowMessageParams {\n-                    typ: req::MessageType::Error,\n-                    message: format!(\"rust-analyzer failed to load workspace: {}\", e),\n-                });\n-                msg_sender.send(msg.into()).unwrap();\n+\n+                feedback(\n+                    req::MessageType::Error,\n+                    format!(\"rust-analyzer failed to load workspace: {}\", e),\n+                    msg_sender,\n+                );\n                 Vec::new()\n             }\n         }\n@@ -80,7 +80,6 @@ pub fn main_loop(\n     let mut pending_requests = FxHashSet::default();\n     let mut subs = Subscriptions::new();\n     let main_res = main_loop_inner(\n-        internal_mode,\n         supports_decorations,\n         &pool,\n         msg_sender,\n@@ -148,7 +147,6 @@ impl fmt::Debug for Event {\n }\n \n fn main_loop_inner(\n-    internal_mode: bool,\n     supports_decorations: bool,\n     pool: &ThreadPool,\n     msg_sender: &Sender<RawMessage>,\n@@ -163,6 +161,7 @@ fn main_loop_inner(\n     // time to always have a thread ready to react to input.\n     let mut in_flight_libraries = 0;\n     let mut pending_libraries = Vec::new();\n+    let mut send_workspace_notification = true;\n \n     let (libdata_sender, libdata_receiver) = unbounded();\n     loop {\n@@ -190,7 +189,6 @@ fn main_loop_inner(\n                 state_changed = true;\n             }\n             Event::Lib(lib) => {\n-                feedback(internal_mode, \"library loaded\", msg_sender);\n                 state.add_lib(lib);\n                 in_flight_libraries -= 1;\n             }\n@@ -244,8 +242,14 @@ fn main_loop_inner(\n             });\n         }\n \n-        if state.roots_to_scan == 0 && pending_libraries.is_empty() && in_flight_libraries == 0 {\n-            feedback(internal_mode, \"workspace loaded\", msg_sender);\n+        if send_workspace_notification\n+            && state.roots_to_scan == 0\n+            && pending_libraries.is_empty()\n+            && in_flight_libraries == 0\n+        {\n+            feedback(req::MessageType::Info, \"workspace loaded\", msg_sender);\n+            // Only send the notification first time\n+            send_workspace_notification = false;\n         }\n \n         if state_changed {\n@@ -501,11 +505,12 @@ fn update_file_notifications_on_threadpool(\n     });\n }\n \n-fn feedback(intrnal_mode: bool, msg: &str, sender: &Sender<RawMessage>) {\n-    if !intrnal_mode {\n-        return;\n-    }\n-    let not = RawNotification::new::<req::InternalFeedback>(&msg.to_string());\n+fn feedback<M: Into<String>>(typ: req::MessageType, msg: M, sender: &Sender<RawMessage>) {\n+    let not = RawNotification::new::<req::ShowMessage>(&req::ShowMessageParams {\n+        typ,\n+        message: msg.into(),\n+    });\n+\n     sender.send(not.into()).unwrap();\n }\n "}, {"sha": "3a7c503090154a430127a11759b4d289f1c6f413", "filename": "crates/ra_lsp_server/tests/heavy_tests/support.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9063dabcca0aaaa6d8bb3364cee21fd68023a059/crates%2Fra_lsp_server%2Ftests%2Fheavy_tests%2Fsupport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9063dabcca0aaaa6d8bb3364cee21fd68023a059/crates%2Fra_lsp_server%2Ftests%2Fheavy_tests%2Fsupport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Ftests%2Fheavy_tests%2Fsupport.rs?ref=9063dabcca0aaaa6d8bb3364cee21fd68023a059", "patch": "@@ -13,6 +13,7 @@ use lsp_types::{\n     notification::DidOpenTextDocument,\n     request::{Request, Shutdown},\n     DidOpenTextDocumentParams, TextDocumentIdentifier, TextDocumentItem, Url,\n+    notification::{Notification, ShowMessage},\n };\n use serde::Serialize;\n use serde_json::{to_string_pretty, Value};\n@@ -56,7 +57,7 @@ impl Server {\n             \"test server\",\n             128,\n             move |mut msg_receiver, mut msg_sender| {\n-                main_loop(true, path, true, &mut msg_receiver, &mut msg_sender).unwrap()\n+                main_loop(path, true, &mut msg_receiver, &mut msg_sender).unwrap()\n             },\n         );\n         let res = Server {\n@@ -138,8 +139,9 @@ impl Server {\n     }\n     pub fn wait_for_feedback_n(&self, feedback: &str, n: usize) {\n         let f = |msg: &RawMessage| match msg {\n-            RawMessage::Notification(n) if n.method == \"internalFeedback\" => {\n-                return n.clone().cast::<req::InternalFeedback>().unwrap() == feedback;\n+            RawMessage::Notification(n) if n.method == ShowMessage::METHOD => {\n+                let message = n.clone().cast::<req::ShowMessage>().unwrap();\n+                message.message == feedback\n             }\n             _ => false,\n         };"}]}