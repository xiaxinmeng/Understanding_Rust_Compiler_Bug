{"sha": "9e8a62b73449c82c5600eea7e8ce1683aa862be2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjllOGE2MmI3MzQ0OWM4MmM1NjAwZWVhN2U4Y2UxNjgzYWE4NjJiZTI=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-02-05T23:17:08Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-03-04T21:17:54Z"}, "message": "On return type `impl Trait` for block with no expr point at last semi", "tree": {"sha": "9660af749fae70d231e22220eba2206754fe6a52", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9660af749fae70d231e22220eba2206754fe6a52"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9e8a62b73449c82c5600eea7e8ce1683aa862be2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9e8a62b73449c82c5600eea7e8ce1683aa862be2", "html_url": "https://github.com/rust-lang/rust/commit/9e8a62b73449c82c5600eea7e8ce1683aa862be2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9e8a62b73449c82c5600eea7e8ce1683aa862be2/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c1d2d83ca3b5155468ab96b09a7c54568449b137", "url": "https://api.github.com/repos/rust-lang/rust/commits/c1d2d83ca3b5155468ab96b09a7c54568449b137", "html_url": "https://github.com/rust-lang/rust/commit/c1d2d83ca3b5155468ab96b09a7c54568449b137"}], "stats": {"total": 52, "additions": 47, "deletions": 5}, "files": [{"sha": "9262cbec9f41706d2bcef6736b1b819b5f593924", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 27, "deletions": 5, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/9e8a62b73449c82c5600eea7e8ce1683aa862be2/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e8a62b73449c82c5600eea7e8ce1683aa862be2/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=9e8a62b73449c82c5600eea7e8ce1683aa862be2", "patch": "@@ -598,11 +598,12 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n         }\n     }\n \n-    pub fn report_selection_error(&self,\n-                                  obligation: &PredicateObligation<'tcx>,\n-                                  error: &SelectionError<'tcx>,\n-                                  fallback_has_occurred: bool)\n-    {\n+    pub fn report_selection_error(\n+        &self,\n+        obligation: &PredicateObligation<'tcx>,\n+        error: &SelectionError<'tcx>,\n+        fallback_has_occurred: bool,\n+    ) {\n         let span = obligation.cause.span;\n \n         let mut err = match *error {\n@@ -647,6 +648,27 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                                          trait_ref.to_predicate(), post_message)\n                             ));\n \n+                        let parent_node = self.tcx.hir().get_parent_node(obligation.cause.body_id);\n+                        let node = self.tcx.hir().find(parent_node);\n+                        if let Some(hir::Node::Item(hir::Item {\n+                            node: hir::ItemKind::Fn(decl, _, _, body_id),\n+                            ..\n+                        })) = node {\n+                            let body = self.tcx.hir().body(*body_id);\n+                            if let hir::ExprKind::Block(blk, _) = &body.value.node {\n+                                if decl.output.span().overlaps(span) && blk.expr.is_none() &&\n+                                    \"()\" == &trait_ref.self_ty().to_string()\n+                                {\n+                                    // When encountering a method with a trait bound not satisfied\n+                                    // in the return type with a body that has no return, suggest\n+                                    // removal of semicolon on last statement.\n+                                    if let Some(ref stmt) = blk.stmts.last() {\n+                                        let sp = self.tcx.sess.source_map().end_point(stmt.span);\n+                                        err.span_label(sp, \"consider removing this semicolon\");\n+                                    }\n+                                }\n+                            }\n+                        }\n                         let explanation =\n                             if obligation.cause.code == ObligationCauseCode::MainFunctionType {\n                                 \"consider using `()`, or a `Result`\".to_owned()"}, {"sha": "e72a2d8ccc629e9943587e09ee5551f10a907746", "filename": "src/test/ui/suggestions/impl-trait-return-trailing-semicolon.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9e8a62b73449c82c5600eea7e8ce1683aa862be2/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-trait-return-trailing-semicolon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e8a62b73449c82c5600eea7e8ce1683aa862be2/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-trait-return-trailing-semicolon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-trait-return-trailing-semicolon.rs?ref=9e8a62b73449c82c5600eea7e8ce1683aa862be2", "patch": "@@ -0,0 +1,7 @@\n+trait Bar {}\n+impl Bar for u8 {}\n+fn foo() -> impl Bar {\n+    5; //~^ ERROR the trait bound `(): Bar` is not satisfied\n+}\n+\n+fn main() {}"}, {"sha": "f26fb141ccf80d636cab9721bcb03a722e94f692", "filename": "src/test/ui/suggestions/impl-trait-return-trailing-semicolon.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/9e8a62b73449c82c5600eea7e8ce1683aa862be2/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-trait-return-trailing-semicolon.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e8a62b73449c82c5600eea7e8ce1683aa862be2/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-trait-return-trailing-semicolon.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-trait-return-trailing-semicolon.stderr?ref=9e8a62b73449c82c5600eea7e8ce1683aa862be2", "patch": "@@ -0,0 +1,13 @@\n+error[E0277]: the trait bound `(): Bar` is not satisfied\n+  --> $DIR/impl-trait-return-trailing-semicolon.rs:3:13\n+   |\n+LL | fn foo() -> impl Bar {\n+   |             ^^^^^^^^ the trait `Bar` is not implemented for `()`\n+LL |     5; //~^ ERROR the trait bound `(): Bar` is not satisfied\n+   |      - consider removing this semicolon\n+   |\n+   = note: the return type of a function must have a statically known size\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}]}