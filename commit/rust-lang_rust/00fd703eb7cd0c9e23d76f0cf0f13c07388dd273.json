{"sha": "00fd703eb7cd0c9e23d76f0cf0f13c07388dd273", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAwZmQ3MDNlYjdjZDBjOWUyM2Q3NmYwY2YwZjEzYzA3Mzg4ZGQyNzM=", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2020-10-21T10:50:15Z"}, "committer": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2020-10-27T17:45:42Z"}, "message": "Use unsized_feature_enabled helper function", "tree": {"sha": "078059c751c0af3977cd48913faf492f2d3c3f52", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/078059c751c0af3977cd48913faf492f2d3c3f52"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/00fd703eb7cd0c9e23d76f0cf0f13c07388dd273", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEF0ntrgrd9qf9uuThgTGiTgx5768FAl+YXMYACgkQgTGiTgx5\n768xRBAAl8bi/hmUW41GOXol09zfwqtKQSTc9aHVDLAbIpLHCFY6To6bwin1QrL5\nflj0AZWfyASLStIhis0+XjqJlqv8mMNCtw0t0qvbREEv3XSqig68N7NqDaWFQQeX\noEzB+KEY+jyhCTHduzzlBSQK+jmxP7SGoDKD49BLnwIRNIUvrTnoHOl0jSEV4Ebn\nesyP1gNTvpaz/VNgYY2AFF1AXrOFHu3nDL4Qvka0ws75NUD8XJj+QGd24+eXhvBf\nH5lx5jzGRgC9COGPgqINRFZnyiq7GF+Bl67pr0JbxPcrr6UmB73BrhVGJjigT1XC\nhaxC19egWwwQoFRv8siy5qs+ZfBFgd3tw+auVfBZvN96tFMdp5TzfB55bCE4B/8B\nlVO+xiOKWFWT0O8I3yTXsfxJl5el3kdEvNWJTTEomd7ilarc5doTylLkqamjd44Z\n03+BRSHAHvStQEF3wpw6Nxz4onPNaFqJnmFwKskznlFGPcXkxgXvya9rLiA/54qY\nfhGT4rdlZN11f+Eqx0p9n1wYSlFAQzlH0fpsqjD8/U2RkijJua4ZQG7rwAW+lUfZ\nc0uUJBjHcZcxTH6voaTnuj9MZ2gQj9bqS7+yCzJgKaa0bYT0ooMr+AXP9Rs0QY6Q\nWsZgKbc3goc1kgqpe0j1piha7c9oGZxqPN5wxVvcLXIcWmAVWJQ=\n=GNww\n-----END PGP SIGNATURE-----", "payload": "tree 078059c751c0af3977cd48913faf492f2d3c3f52\nparent 9584b00b1dc15c6d8211125d959cbaa1d93c0228\nauthor Santiago Pastorino <spastorino@gmail.com> 1603277415 -0300\ncommitter Santiago Pastorino <spastorino@gmail.com> 1603820742 -0300\n\nUse unsized_feature_enabled helper function\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/00fd703eb7cd0c9e23d76f0cf0f13c07388dd273", "html_url": "https://github.com/rust-lang/rust/commit/00fd703eb7cd0c9e23d76f0cf0f13c07388dd273", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/00fd703eb7cd0c9e23d76f0cf0f13c07388dd273/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9584b00b1dc15c6d8211125d959cbaa1d93c0228", "url": "https://api.github.com/repos/rust-lang/rust/commits/9584b00b1dc15c6d8211125d959cbaa1d93c0228", "html_url": "https://github.com/rust-lang/rust/commit/9584b00b1dc15c6d8211125d959cbaa1d93c0228"}], "stats": {"total": 15, "additions": 9, "deletions": 6}, "files": [{"sha": "409399094e84921212e3c9d1fc460d74ba0957e6", "filename": "compiler/rustc_mir/src/borrow_check/type_check/mod.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/00fd703eb7cd0c9e23d76f0cf0f13c07388dd273/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00fd703eb7cd0c9e23d76f0cf0f13c07388dd273/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Ftype_check%2Fmod.rs?ref=00fd703eb7cd0c9e23d76f0cf0f13c07388dd273", "patch": "@@ -974,6 +974,11 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n         checker\n     }\n \n+    fn unsized_feature_enabled(&self) -> bool {\n+        let features = self.tcx().features();\n+        features.unsized_locals || features.unsized_fn_params\n+    }\n+\n     /// Equate the inferred type and the annotated type for user type annotations\n     fn check_user_type_annotations(&mut self) {\n         debug!(\n@@ -1456,9 +1461,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n                 }\n \n                 self.check_rvalue(body, rv, location);\n-                if !(self.tcx().features().unsized_locals\n-                    || self.tcx().features().unsized_fn_params)\n-                {\n+                if !self.unsized_feature_enabled() {\n                     let trait_ref = ty::TraitRef {\n                         def_id: tcx.require_lang_item(LangItem::Sized, Some(self.last_span)),\n                         substs: tcx.mk_substs_trait(place_ty, &[]),\n@@ -1721,7 +1724,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n \n                 // When `unsized_fn_params` and `unsized_locals` are both not enabled,\n                 // this check is done at `check_local`.\n-                if self.tcx().features().unsized_locals || self.tcx().features().unsized_fn_params {\n+                if self.unsized_feature_enabled() {\n                     let span = term.source_info.span;\n                     self.ensure_place_sized(dest_ty, span);\n                 }\n@@ -1884,7 +1887,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n \n         // When `unsized_fn_params` or `unsized_locals` is enabled, only function calls\n         // and nullary ops are checked in `check_call_dest`.\n-        if !(self.tcx().features().unsized_locals || self.tcx().features().unsized_fn_params) {\n+        if !self.unsized_feature_enabled() {\n             let span = local_decl.source_info.span;\n             let ty = local_decl.ty;\n             self.ensure_place_sized(ty, span);\n@@ -2026,7 +2029,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n \n             Rvalue::NullaryOp(_, ty) => {\n                 // Even with unsized locals cannot box an unsized value.\n-                if self.tcx().features().unsized_locals || self.tcx().features().unsized_fn_params {\n+                if self.unsized_feature_enabled() {\n                     let span = body.source_info(location).span;\n                     self.ensure_place_sized(ty, span);\n                 }"}]}