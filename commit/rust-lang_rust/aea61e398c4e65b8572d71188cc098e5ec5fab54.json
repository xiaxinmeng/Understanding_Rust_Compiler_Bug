{"sha": "aea61e398c4e65b8572d71188cc098e5ec5fab54", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFlYTYxZTM5OGM0ZTY1Yjg1NzJkNzExODhjYzA5OGU1ZWM1ZmFiNTQ=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-11-01T21:27:55Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-11-05T08:17:48Z"}, "message": "converting a VisitorValue to a MemPlace must not mutate anything", "tree": {"sha": "ff93af32ba4e81a8ab654dc34cba2788451f15db", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ff93af32ba4e81a8ab654dc34cba2788451f15db"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aea61e398c4e65b8572d71188cc098e5ec5fab54", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aea61e398c4e65b8572d71188cc098e5ec5fab54", "html_url": "https://github.com/rust-lang/rust/commit/aea61e398c4e65b8572d71188cc098e5ec5fab54", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aea61e398c4e65b8572d71188cc098e5ec5fab54/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "77c283465c567d72868714c4ee4f2328e0800346", "url": "https://api.github.com/repos/rust-lang/rust/commits/77c283465c567d72868714c4ee4f2328e0800346", "html_url": "https://github.com/rust-lang/rust/commit/77c283465c567d72868714c4ee4f2328e0800346"}], "stats": {"total": 23, "additions": 12, "deletions": 11}, "files": [{"sha": "fe61cd78a4623c68cca22e017f5cf37fdad172d0", "filename": "src/librustc_mir/interpret/visitor.rs", "status": "modified", "additions": 12, "deletions": 11, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/aea61e398c4e65b8572d71188cc098e5ec5fab54/src%2Flibrustc_mir%2Finterpret%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aea61e398c4e65b8572d71188cc098e5ec5fab54/src%2Flibrustc_mir%2Finterpret%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fvisitor.rs?ref=aea61e398c4e65b8572d71188cc098e5ec5fab54", "patch": "@@ -22,9 +22,9 @@ pub trait Value<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>>: Copy\n     fn layout(&self) -> TyLayout<'tcx>;\n \n     // Make this a `MPlaceTy`, or panic if that's not possible.\n-    fn force_allocation(\n+    fn to_mem_place(\n         self,\n-        ectx: &mut EvalContext<'a, 'mir, 'tcx, M>,\n+        ectx: &EvalContext<'a, 'mir, 'tcx, M>,\n     ) -> EvalResult<'tcx, MPlaceTy<'tcx, M::PointerTag>>;\n \n     // Create this from an `MPlaceTy`.\n@@ -55,9 +55,9 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> Value<'a, 'mir, 'tcx, M>\n     }\n \n     #[inline(always)]\n-    fn force_allocation(\n+    fn to_mem_place(\n         self,\n-        _ectx: &mut EvalContext<'a, 'mir, 'tcx, M>,\n+        _ectx: &EvalContext<'a, 'mir, 'tcx, M>,\n     ) -> EvalResult<'tcx, MPlaceTy<'tcx, M::PointerTag>> {\n         Ok(self.to_mem_place())\n     }\n@@ -94,9 +94,9 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> Value<'a, 'mir, 'tcx, M>\n     }\n \n     #[inline(always)]\n-    fn force_allocation(\n+    fn to_mem_place(\n         self,\n-        _ectx: &mut EvalContext<'a, 'mir, 'tcx, M>,\n+        _ectx: &EvalContext<'a, 'mir, 'tcx, M>,\n     ) -> EvalResult<'tcx, MPlaceTy<'tcx, M::PointerTag>> {\n         Ok(self)\n     }\n@@ -133,11 +133,12 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> Value<'a, 'mir, 'tcx, M>\n     }\n \n     #[inline(always)]\n-    fn force_allocation(\n+    fn to_mem_place(\n         self,\n-        ectx: &mut EvalContext<'a, 'mir, 'tcx, M>,\n+        ectx: &EvalContext<'a, 'mir, 'tcx, M>,\n     ) -> EvalResult<'tcx, MPlaceTy<'tcx, M::PointerTag>> {\n-        ectx.force_allocation(self)\n+        // If this refers to a local, assert that it already has an allocation.\n+        Ok(ectx.place_to_op(self)?.to_mem_place())\n     }\n \n     #[inline(always)]\n@@ -243,7 +244,7 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M>\n         match v.layout().ty.sty {\n             ty::Dynamic(..) => {\n                 // immediate trait objects are not a thing\n-                let dest = v.value().force_allocation(self)?;\n+                let dest = v.value().to_mem_place(self)?;\n                 let inner = self.unpack_dyn_trait(dest)?.1;\n                 trace!(\"dyn object layout: {:#?}\", inner.layout);\n                 // recurse with the inner type\n@@ -310,7 +311,7 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M>\n                         MPlaceTy::dangling(v.layout(), self)\n                     } else {\n                         // non-ZST array/slice/str cannot be immediate\n-                        v.value().force_allocation(self)?\n+                        v.value().to_mem_place(self)?\n                     };\n                     // Now iterate over it.\n                     for (i, field) in self.mplace_array_fields(mplace)?.enumerate() {"}]}