{"sha": "194d8e3bd55021a2f0e6d61c2bdc2c0b2017f58f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE5NGQ4ZTNiZDU1MDIxYTJmMGU2ZDYxYzJiZGMyYzBiMjAxN2Y1OGY=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-01-20T01:55:34Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-01-20T02:04:24Z"}, "message": "lib: \";\" to \",\" in enums", "tree": {"sha": "e76727dac06a0470097bcf532279dbae564037d8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e76727dac06a0470097bcf532279dbae564037d8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/194d8e3bd55021a2f0e6d61c2bdc2c0b2017f58f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/194d8e3bd55021a2f0e6d61c2bdc2c0b2017f58f", "html_url": "https://github.com/rust-lang/rust/commit/194d8e3bd55021a2f0e6d61c2bdc2c0b2017f58f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/194d8e3bd55021a2f0e6d61c2bdc2c0b2017f58f/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "874390831a61d0708f227bfc5a78fd167ea6d9c1", "url": "https://api.github.com/repos/rust-lang/rust/commits/874390831a61d0708f227bfc5a78fd167ea6d9c1", "html_url": "https://github.com/rust-lang/rust/commit/874390831a61d0708f227bfc5a78fd167ea6d9c1"}], "stats": {"total": 208, "additions": 104, "deletions": 104}, "files": [{"sha": "824cef878d91c8ef6c0c9b7924bf84268b698bde", "filename": "src/libcore/ctypes.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/194d8e3bd55021a2f0e6d61c2bdc2c0b2017f58f/src%2Flibcore%2Fctypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/194d8e3bd55021a2f0e6d61c2bdc2c0b2017f58f/src%2Flibcore%2Fctypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fctypes.rs?ref=194d8e3bd55021a2f0e6d61c2bdc2c0b2017f58f", "patch": "@@ -75,9 +75,9 @@ type uint32_t = u32;\n enum void {\n     // Making the only variant reference itself makes it impossible to\n     // construct. Not exporting it makes it impossible to destructure.\n-    void_private(@void);\n+    void_private(@void),\n     // FIXME: #881\n-    void_private2(@void);\n+    void_private2(@void),\n }\n \n #[doc("}, {"sha": "61b6ec3c1b4f221bbcdbf0085577fcc17f081d36", "filename": "src/libcore/extfmt.rs", "status": "modified", "additions": 30, "deletions": 30, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/194d8e3bd55021a2f0e6d61c2bdc2c0b2017f58f/src%2Flibcore%2Fextfmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/194d8e3bd55021a2f0e6d61c2bdc2c0b2017f58f/src%2Flibcore%2Fextfmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fextfmt.rs?ref=194d8e3bd55021a2f0e6d61c2bdc2c0b2017f58f", "patch": "@@ -39,32 +39,32 @@ import option::{some, none};\n \n // Functions used by the fmt extension at compile time\n mod ct {\n-    enum signedness { signed; unsigned; }\n-    enum caseness { case_upper; case_lower; }\n+    enum signedness { signed, unsigned, }\n+    enum caseness { case_upper, case_lower, }\n     enum ty {\n-        ty_bool;\n-        ty_str;\n-        ty_char;\n-        ty_int(signedness);\n-        ty_bits;\n-        ty_hex(caseness);\n-        ty_octal;\n-        ty_float;\n-        ty_poly;\n+        ty_bool,\n+        ty_str,\n+        ty_char,\n+        ty_int(signedness),\n+        ty_bits,\n+        ty_hex(caseness),\n+        ty_octal,\n+        ty_float,\n+        ty_poly,\n         // FIXME: More types\n     }\n     enum flag {\n-        flag_left_justify;\n-        flag_left_zero_pad;\n-        flag_space_for_sign;\n-        flag_sign_always;\n-        flag_alternate;\n+        flag_left_justify,\n+        flag_left_zero_pad,\n+        flag_space_for_sign,\n+        flag_sign_always,\n+        flag_alternate,\n     }\n     enum count {\n-        count_is(int);\n-        count_is_param(int);\n-        count_is_next_param;\n-        count_implied;\n+        count_is(int),\n+        count_is_param(int),\n+        count_is_next_param,\n+        count_implied,\n     }\n \n     // A formatted conversion from an expression to a string\n@@ -77,7 +77,7 @@ mod ct {\n \n \n     // A fragment of the output sequence\n-    enum piece { piece_string(str); piece_conv(conv); }\n+    enum piece { piece_string(str), piece_conv(conv), }\n     type error_fn = fn@(str) -> ! ;\n \n     fn parse_fmt_string(s: str, error: error_fn) -> [piece] {\n@@ -264,20 +264,20 @@ mod ct {\n // implement it this way, I think.\n mod rt {\n     enum flag {\n-        flag_left_justify;\n-        flag_left_zero_pad;\n-        flag_space_for_sign;\n-        flag_sign_always;\n-        flag_alternate;\n+        flag_left_justify,\n+        flag_left_zero_pad,\n+        flag_space_for_sign,\n+        flag_sign_always,\n+        flag_alternate,\n \n \n         // FIXME: This is a hack to avoid creating 0-length vec exprs,\n         // which have some difficulty typechecking currently. See\n         // comments in front::extfmt::make_flags\n-        flag_none;\n+        flag_none,\n     }\n-    enum count { count_is(int); count_implied; }\n-    enum ty { ty_default; ty_bits; ty_hex_upper; ty_hex_lower; ty_octal; }\n+    enum count { count_is(int), count_implied, }\n+    enum ty { ty_default, ty_bits, ty_hex_upper, ty_hex_lower, ty_octal, }\n \n     // FIXME: May not want to use a vector here for flags;\n     // instead just use a bool per flag\n@@ -391,7 +391,7 @@ mod rt {\n \n         ret str::unsafe_from_bytes(svec);\n     }\n-    enum pad_mode { pad_signed; pad_unsigned; pad_nozero; }\n+    enum pad_mode { pad_signed, pad_unsigned, pad_nozero, }\n     fn pad(cv: conv, s: str, mode: pad_mode) -> str {\n         let uwidth;\n         alt cv.width {"}, {"sha": "8cba1c84dc0a346c63699c8fd7f380f6441c35f3", "filename": "src/libcore/option.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/194d8e3bd55021a2f0e6d61c2bdc2c0b2017f58f/src%2Flibcore%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/194d8e3bd55021a2f0e6d61c2bdc2c0b2017f58f/src%2Flibcore%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Foption.rs?ref=194d8e3bd55021a2f0e6d61c2bdc2c0b2017f58f", "patch": "@@ -14,9 +14,9 @@ The option type\n */\n enum t<T> {\n     /* Variant: none */\n-    none;\n+    none,\n     /* Variant: some */\n-    some(T);\n+    some(T),\n }\n \n /* Section: Operations */"}, {"sha": "b56425159533ce43b1774764b997bc27e3c67498", "filename": "src/libcore/task.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/194d8e3bd55021a2f0e6d61c2bdc2c0b2017f58f/src%2Flibcore%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/194d8e3bd55021a2f0e6d61c2bdc2c0b2017f58f/src%2Flibcore%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftask.rs?ref=194d8e3bd55021a2f0e6d61c2bdc2c0b2017f58f", "patch": "@@ -181,9 +181,9 @@ Indicates the manner in which a task exited\n */\n enum task_result {\n     /* Variant: tr_success */\n-    tr_success;\n+    tr_success,\n     /* Variant: tr_failure */\n-    tr_failure;\n+    tr_failure,\n }\n \n /*\n@@ -193,7 +193,7 @@ Message sent upon task exit to indicate normal or abnormal termination\n */\n enum task_notification {\n     /* Variant: exit */\n-    exit(task, task_result);\n+    exit(task, task_result),\n }\n \n /*"}, {"sha": "5ab9a44cd1a1966d032fde59afa6bfd880e5ad7d", "filename": "src/libstd/deque.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/194d8e3bd55021a2f0e6d61c2bdc2c0b2017f58f/src%2Flibstd%2Fdeque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/194d8e3bd55021a2f0e6d61c2bdc2c0b2017f58f/src%2Flibstd%2Fdeque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fdeque.rs?ref=194d8e3bd55021a2f0e6d61c2bdc2c0b2017f58f", "patch": "@@ -241,10 +241,10 @@ mod tests {\n         assert (e(deq.get(3), d));\n     }\n \n-    enum taggy { one(int); two(int, int); three(int, int, int); }\n+    enum taggy { one(int), two(int, int), three(int, int, int), }\n \n     enum taggypar<T> {\n-        onepar(int); twopar(int, int); threepar(int, int, int);\n+        onepar(int), twopar(int, int), threepar(int, int, int),\n     }\n \n     type reccy = {x: int, y: int, t: taggy};"}, {"sha": "a34c1d27f96a7d2f59d4aea5649d66109f95c1ee", "filename": "src/libstd/extfmt.rs", "status": "modified", "additions": 29, "deletions": 29, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/194d8e3bd55021a2f0e6d61c2bdc2c0b2017f58f/src%2Flibstd%2Fextfmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/194d8e3bd55021a2f0e6d61c2bdc2c0b2017f58f/src%2Flibstd%2Fextfmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fextfmt.rs?ref=194d8e3bd55021a2f0e6d61c2bdc2c0b2017f58f", "patch": "@@ -39,31 +39,31 @@ import option::{some, none};\n \n // Functions used by the fmt extension at compile time\n mod ct {\n-    enum signedness { signed; unsigned; }\n-    enum caseness { case_upper; case_lower; }\n+    enum signedness { signed, unsigned, }\n+    enum caseness { case_upper, case_lower, }\n     enum ty {\n-        ty_bool;\n-        ty_str;\n-        ty_char;\n-        ty_int(signedness);\n-        ty_bits;\n-        ty_hex(caseness);\n-        ty_octal;\n-        ty_float;\n+        ty_bool,\n+        ty_str,\n+        ty_char,\n+        ty_int(signedness),\n+        ty_bits,\n+        ty_hex(caseness),\n+        ty_octal,\n+        ty_float,\n         // FIXME: More types\n     }\n     enum flag {\n-        flag_left_justify;\n-        flag_left_zero_pad;\n-        flag_space_for_sign;\n-        flag_sign_always;\n-        flag_alternate;\n+        flag_left_justify,\n+        flag_left_zero_pad,\n+        flag_space_for_sign,\n+        flag_sign_always,\n+        flag_alternate,\n     }\n     enum count {\n-        count_is(int);\n-        count_is_param(int);\n-        count_is_next_param;\n-        count_implied;\n+        count_is(int),\n+        count_is_param(int),\n+        count_is_next_param,\n+        count_implied,\n     }\n \n     // A formatted conversion from an expression to a string\n@@ -76,7 +76,7 @@ mod ct {\n \n \n     // A fragment of the output sequence\n-    enum piece { piece_string(str); piece_conv(conv); }\n+    enum piece { piece_string(str), piece_conv(conv), }\n     type error_fn = fn@(str) -> ! ;\n \n     fn parse_fmt_string(s: str, error: error_fn) -> [piece] {\n@@ -261,20 +261,20 @@ mod ct {\n // implement it this way, I think.\n mod rt {\n     enum flag {\n-        flag_left_justify;\n-        flag_left_zero_pad;\n-        flag_space_for_sign;\n-        flag_sign_always;\n-        flag_alternate;\n+        flag_left_justify,\n+        flag_left_zero_pad,\n+        flag_space_for_sign,\n+        flag_sign_always,\n+        flag_alternate,\n \n \n         // FIXME: This is a hack to avoid creating 0-length vec exprs,\n         // which have some difficulty typechecking currently. See\n         // comments in front::extfmt::make_flags\n-        flag_none;\n+        flag_none,\n     }\n-    enum count { count_is(int); count_implied; }\n-    enum ty { ty_default; ty_bits; ty_hex_upper; ty_hex_lower; ty_octal; }\n+    enum count { count_is(int), count_implied, }\n+    enum ty { ty_default, ty_bits, ty_hex_upper, ty_hex_lower, ty_octal, }\n \n     // FIXME: May not want to use a vector here for flags;\n     // instead just use a bool per flag\n@@ -384,7 +384,7 @@ mod rt {\n \n         ret str::unsafe_from_bytes(svec);\n     }\n-    enum pad_mode { pad_signed; pad_unsigned; pad_nozero; }\n+    enum pad_mode { pad_signed, pad_unsigned, pad_nozero, }\n     fn pad(cv: conv, s: str, mode: pad_mode) -> str {\n         let uwidth;\n         alt cv.width {"}, {"sha": "6c21ec1330e1ee200bca8249d830118b4afe121f", "filename": "src/libstd/getopts.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/194d8e3bd55021a2f0e6d61c2bdc2c0b2017f58f/src%2Flibstd%2Fgetopts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/194d8e3bd55021a2f0e6d61c2bdc2c0b2017f58f/src%2Flibstd%2Fgetopts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fgetopts.rs?ref=194d8e3bd55021a2f0e6d61c2bdc2c0b2017f58f", "patch": "@@ -65,11 +65,11 @@ export opt_strs;\n export opt_maybe_str;\n export opt_default;\n \n-enum name { long(str); short(char); }\n+enum name { long(str), short(char), }\n \n-enum hasarg { yes; no; maybe; }\n+enum hasarg { yes, no, maybe, }\n \n-enum occur { req; optional; multi; }\n+enum occur { req, optional, multi, }\n \n /*\n Type: opt\n@@ -130,7 +130,7 @@ fn optmulti(name: str) -> opt {\n     ret {name: mkname(name), hasarg: yes, occur: multi};\n }\n \n-enum optval { val(str); given; }\n+enum optval { val(str), given, }\n \n /*\n Type: match\n@@ -159,11 +159,11 @@ The type returned when the command line does not conform to the\n expected format. Pass this value to <fail_str> to get an error message.\n */\n enum fail_ {\n-    argument_missing(str);\n-    unrecognized_option(str);\n-    option_missing(str);\n-    option_duplicated(str);\n-    unexpected_argument(str);\n+    argument_missing(str),\n+    unrecognized_option(str),\n+    option_missing(str),\n+    option_duplicated(str),\n+    unexpected_argument(str),\n }\n \n /*\n@@ -382,11 +382,11 @@ mod tests {\n     import result::{err, ok};\n \n     enum fail_type {\n-        argument_missing_;\n-        unrecognized_option_;\n-        option_missing_;\n-        option_duplicated_;\n-        unexpected_argument_;\n+        argument_missing_,\n+        unrecognized_option_,\n+        option_missing_,\n+        option_duplicated_,\n+        unexpected_argument_,\n     }\n \n     fn check_fail_type(f: fail_, ft: fail_type) {"}, {"sha": "6331e57ea7dbf7dbefe07aa8a0695e677236d448", "filename": "src/libstd/io.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/194d8e3bd55021a2f0e6d61c2bdc2c0b2017f58f/src%2Flibstd%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/194d8e3bd55021a2f0e6d61c2bdc2c0b2017f58f/src%2Flibstd%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio.rs?ref=194d8e3bd55021a2f0e6d61c2bdc2c0b2017f58f", "patch": "@@ -17,7 +17,7 @@ native mod rustrt {\n // Reading\n \n // FIXME This is all buffered. We might need an unbuffered variant as well\n-enum seek_style { seek_set; seek_end; seek_cur; }\n+enum seek_style { seek_set, seek_end, seek_cur, }\n \n \n // The raw underlying reader iface. All readers must implement this.\n@@ -264,7 +264,7 @@ fn string_reader(s: str) -> reader {\n \n \n // Writing\n-enum fileflag { append; create; truncate; none; }\n+enum fileflag { append, create, truncate, none, }\n \n // FIXME: Seekable really should be orthogonal.\n // FIXME: eventually u64\n@@ -497,15 +497,15 @@ mod fsync {\n \n     enum level {\n         // whatever fsync does on that platform\n-        fsync;\n+        fsync,\n \n         // fdatasync on linux, similiar or more on other platforms\n-        fdatasync;\n+        fdatasync,\n \n         // full fsync\n         //\n         // You must additionally sync the parent directory as well!\n-        fullfsync;\n+        fullfsync,\n     }\n \n "}, {"sha": "0229b4d1b2280cfc2c0a7e36f02cf1af8cb557be", "filename": "src/libstd/json.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/194d8e3bd55021a2f0e6d61c2bdc2c0b2017f58f/src%2Flibstd%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/194d8e3bd55021a2f0e6d61c2bdc2c0b2017f58f/src%2Flibstd%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fjson.rs?ref=194d8e3bd55021a2f0e6d61c2bdc2c0b2017f58f", "patch": "@@ -25,17 +25,17 @@ Represents a json value.\n */\n enum json {\n     /* Variant: num */\n-    num(float);\n+    num(float),\n     /* Variant: string */\n-    string(str);\n+    string(str),\n     /* Variant: boolean */\n-    boolean(bool);\n+    boolean(bool),\n     /* Variant: list */\n-    list(@[json]);\n+    list(@[json]),\n     /* Variant: dict */\n-    dict(map::map<str,json>);\n+    dict(map::map<str,json>),\n     /* Variant: null */\n-    null;\n+    null,\n }\n \n /*"}, {"sha": "b05f895c327ae4220887557db7e999fa627c6cae", "filename": "src/libstd/list.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/194d8e3bd55021a2f0e6d61c2bdc2c0b2017f58f/src%2Flibstd%2Flist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/194d8e3bd55021a2f0e6d61c2bdc2c0b2017f58f/src%2Flibstd%2Flist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flist.rs?ref=194d8e3bd55021a2f0e6d61c2bdc2c0b2017f58f", "patch": "@@ -15,9 +15,9 @@ Tag: list\n */\n enum list<T> {\n     /* Variant: cons */\n-    cons(T, @list<T>);\n+    cons(T, @list<T>),\n     /* Variant: nil */\n-    nil;\n+    nil,\n }\n \n /*Section: Operations */"}, {"sha": "706221d95c2c425567e628af3f3e8defad6e5060", "filename": "src/libstd/net.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/194d8e3bd55021a2f0e6d61c2bdc2c0b2017f58f/src%2Flibstd%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/194d8e3bd55021a2f0e6d61c2bdc2c0b2017f58f/src%2Flibstd%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet.rs?ref=194d8e3bd55021a2f0e6d61c2bdc2c0b2017f58f", "patch": "@@ -18,7 +18,7 @@ enum ip_addr {\n \n     An IPv4 address\n     */\n-    ipv4(u8, u8, u8, u8);\n+    ipv4(u8, u8, u8, u8),\n }\n \n /* Section: Operations */"}, {"sha": "eb30897b1c06f500529513b981ea658ef97a7c98", "filename": "src/libstd/rope.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/194d8e3bd55021a2f0e6d61c2bdc2c0b2017f58f/src%2Flibstd%2Frope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/194d8e3bd55021a2f0e6d61c2bdc2c0b2017f58f/src%2Flibstd%2Frope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frope.rs?ref=194d8e3bd55021a2f0e6d61c2bdc2c0b2017f58f", "patch": "@@ -586,8 +586,8 @@ mod node {\n        content - A non-empty rope\n     */\n     enum root {\n-        empty;\n-        content(@node);\n+        empty,\n+        content(@node),\n     }\n \n     /*\n@@ -689,8 +689,8 @@ mod node {\n     concat - The concatenation of two ropes\n     */\n     enum node {\n-        leaf(leaf);\n-        concat(concat);\n+        leaf(leaf),\n+        concat(concat),\n     }\n \n     /*"}, {"sha": "707e4cf153fb21a61bff36d1ecdb0bb162d31002", "filename": "src/libstd/test.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/194d8e3bd55021a2f0e6d61c2bdc2c0b2017f58f/src%2Flibstd%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/194d8e3bd55021a2f0e6d61c2bdc2c0b2017f58f/src%2Flibstd%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftest.rs?ref=194d8e3bd55021a2f0e6d61c2bdc2c0b2017f58f", "patch": "@@ -83,7 +83,7 @@ fn parse_opts(args: [str]) : vec::is_not_empty(args) -> opt_res {\n     ret either::left(test_opts);\n }\n \n-enum test_result { tr_ok; tr_failed; tr_ignored; }\n+enum test_result { tr_ok, tr_failed, tr_ignored, }\n \n // A simple console test runner\n fn run_tests_console(opts: test_opts,\n@@ -186,9 +186,9 @@ fn run_tests_console(opts: test_opts,\n fn use_color() -> bool { ret get_concurrency() == 1u; }\n \n enum testevent {\n-    te_filtered([test_desc]);\n-    te_wait(test_desc);\n-    te_result(test_desc, test_result);\n+    te_filtered([test_desc]),\n+    te_wait(test_desc),\n+    te_result(test_desc, test_result),\n }\n \n type monitor_msg = (test_desc, test_result);"}]}