{"sha": "4eb95f6d1c22419b50980d0bf8effc6e2f22feb5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRlYjk1ZjZkMWMyMjQxOWI1MDk4MGQwYmY4ZWZmYzZlMmYyMmZlYjU=", "commit": {"author": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2013-07-27T01:03:44Z"}, "committer": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2013-07-28T06:41:09Z"}, "message": "cleanup .iter and .iter_err", "tree": {"sha": "725d52c5e0c06d82b05957a5272a9a909c726a8e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/725d52c5e0c06d82b05957a5272a9a909c726a8e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4eb95f6d1c22419b50980d0bf8effc6e2f22feb5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4eb95f6d1c22419b50980d0bf8effc6e2f22feb5", "html_url": "https://github.com/rust-lang/rust/commit/4eb95f6d1c22419b50980d0bf8effc6e2f22feb5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4eb95f6d1c22419b50980d0bf8effc6e2f22feb5/comments", "author": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "225f1c760d998b2f26107c3938d4ca8baa57c6c0", "url": "https://api.github.com/repos/rust-lang/rust/commits/225f1c760d998b2f26107c3938d4ca8baa57c6c0", "html_url": "https://github.com/rust-lang/rust/commit/225f1c760d998b2f26107c3938d4ca8baa57c6c0"}], "stats": {"total": 95, "additions": 48, "deletions": 47}, "files": [{"sha": "809244af12a0110968260ac816fce8c0f2d1013c", "filename": "src/libstd/result.rs", "status": "modified", "additions": 48, "deletions": 47, "changes": 95, "blob_url": "https://github.com/rust-lang/rust/blob/4eb95f6d1c22419b50980d0bf8effc6e2f22feb5/src%2Flibstd%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4eb95f6d1c22419b50980d0bf8effc6e2f22feb5/src%2Flibstd%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fresult.rs?ref=4eb95f6d1c22419b50980d0bf8effc6e2f22feb5", "patch": "@@ -62,21 +62,6 @@ pub fn get_err<T, U: Clone>(res: &Result<T, U>) -> U {\n     }\n }\n \n-/// Returns true if the result is `ok`\n-#[inline]\n-pub fn is_ok<T, U>(res: &Result<T, U>) -> bool {\n-    match *res {\n-      Ok(_) => true,\n-      Err(_) => false\n-    }\n-}\n-\n-/// Returns true if the result is `err`\n-#[inline]\n-pub fn is_err<T, U>(res: &Result<T, U>) -> bool {\n-    !is_ok(res)\n-}\n-\n /**\n  * Convert to the `either` type\n  *\n@@ -134,27 +119,8 @@ pub fn chain_err<T, U, V>(\n     }\n }\n \n-/**\n- * Call a function based on a previous result\n- *\n- * If `res` is `ok` then the value is extracted and passed to `op` whereupon\n- * `op`s result is returned. if `res` is `err` then it is immediately\n- * returned. This function can be used to compose the results of two\n- * functions.\n- *\n- * Example:\n- *\n- *     iter(read_file(file)) { |buf|\n- *         print_buf(buf)\n- *     }\n- */\n-#[inline]\n-pub fn iter<T, E>(res: &Result<T, E>, f: &fn(&T)) {\n-    match *res {\n-      Ok(ref t) => f(t),\n-      Err(_) => ()\n-    }\n-}\n+\n+\n \n /**\n  * Call a function based on a previous result\n@@ -164,13 +130,7 @@ pub fn iter<T, E>(res: &Result<T, E>, f: &fn(&T)) {\n  * This function can be used to pass through a successful result while\n  * handling an error.\n  */\n-#[inline]\n-pub fn iter_err<T, E>(res: &Result<T, E>, f: &fn(&E)) {\n-    match *res {\n-      Ok(_) => (),\n-      Err(ref e) => f(e)\n-    }\n-}\n+\n \n /**\n  * Call a function based on a previous result\n@@ -229,17 +189,58 @@ impl<T, E> Result<T, E> {\n         }\n     }\n \n+    /// Returns true if the result is `ok`\n     #[inline]\n-    pub fn is_ok(&self) -> bool { is_ok(self) }\n+    pub fn is_ok(&self) -> bool {\n+        match *self {\n+            Ok(_) => true,\n+            Err(_) => false\n+        }\n+    }\n \n+    /// Returns true if the result is `err`\n     #[inline]\n-    pub fn is_err(&self) -> bool { is_err(self) }\n+    pub fn is_err(&self) -> bool {\n+        !self.is_ok()\n+    }\n \n+    /**\n+     * Call a function based on a previous result\n+     *\n+     * If `*self` is `ok` then the value is extracted and passed to `op` whereupon\n+     * `op`s result is returned. if `res` is `err` then it is immediately\n+     * returned. This function can be used to compose the results of two\n+     * functions.\n+     *\n+     * Example:\n+     *\n+     *     read_file(file).iter() { |buf|\n+     *         print_buf(buf)\n+     *     }\n+     */\n     #[inline]\n-    pub fn iter(&self, f: &fn(&T)) { iter(self, f) }\n+    pub fn iter(&self, f: &fn(&T)) {\n+        match *self {\n+            Ok(ref t) => f(t),\n+            Err(_) => ()\n+        }\n+    }\n \n+    /**\n+     * Call a function based on a previous result\n+     *\n+     * If `*self` is `err` then the value is extracted and passed to `op` whereupon\n+     * `op`s result is returned. if `res` is `ok` then it is immediately returned.\n+     * This function can be used to pass through a successful result while\n+     * handling an error.\n+     */\n     #[inline]\n-    pub fn iter_err(&self, f: &fn(&E)) { iter_err(self, f) }\n+    pub fn iter_err(&self, f: &fn(&E)) {\n+        match *self {\n+            Ok(_) => (),\n+            Err(ref e) => f(e)\n+        }\n+    }\n \n     #[inline]\n     pub fn unwrap(self) -> T { unwrap(self) }"}]}