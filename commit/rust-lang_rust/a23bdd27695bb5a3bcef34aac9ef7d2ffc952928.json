{"sha": "a23bdd27695bb5a3bcef34aac9ef7d2ffc952928", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEyM2JkZDI3Njk1YmI1YTNiY2VmMzRhYWM5ZWY3ZDJmZmM5NTI5Mjg=", "commit": {"author": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-10-03T23:48:19Z"}, "committer": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-10-07T21:54:37Z"}, "message": "Rename `resolve::macros::{ExpansionData -> InvocationData}`.", "tree": {"sha": "537442aa066ac3141e61d94eea2b42cb2cbc931f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/537442aa066ac3141e61d94eea2b42cb2cbc931f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a23bdd27695bb5a3bcef34aac9ef7d2ffc952928", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a23bdd27695bb5a3bcef34aac9ef7d2ffc952928", "html_url": "https://github.com/rust-lang/rust/commit/a23bdd27695bb5a3bcef34aac9ef7d2ffc952928", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a23bdd27695bb5a3bcef34aac9ef7d2ffc952928/comments", "author": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2cf964967c48376c97fa6e2288ca26f8081f78c3", "url": "https://api.github.com/repos/rust-lang/rust/commits/2cf964967c48376c97fa6e2288ca26f8081f78c3", "html_url": "https://github.com/rust-lang/rust/commit/2cf964967c48376c97fa6e2288ca26f8081f78c3"}], "stats": {"total": 58, "additions": 29, "deletions": 29}, "files": [{"sha": "6d9786c8109e497fc02dd5259dac999b67e0fcd9", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a23bdd27695bb5a3bcef34aac9ef7d2ffc952928/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a23bdd27695bb5a3bcef34aac9ef7d2ffc952928/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=a23bdd27695bb5a3bcef34aac9ef7d2ffc952928", "patch": "@@ -203,7 +203,7 @@ impl<'b> Resolver<'b> {\n                                 let ext = macro_rules::compile(&self.session.parse_sess, &def);\n                                 let shadowing =\n                                     self.resolve_macro_name(Mark::root(), name, false).is_some();\n-                                self.expansion_data[&Mark::root()].module.get().macros.borrow_mut()\n+                                self.invocations[&Mark::root()].module.get().macros.borrow_mut()\n                                     .insert(name, macros::NameBinding {\n                                         ext: Rc::new(ext),\n                                         expansion: expansion,\n@@ -526,7 +526,7 @@ pub struct BuildReducedGraphVisitor<'a, 'b: 'a> {\n impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n     fn visit_invoc(&mut self, id: ast::NodeId) {\n         let mark = Mark::from_placeholder_id(id);\n-        self.resolver.expansion_data[&mark].module.set(self.resolver.current_module);\n+        self.resolver.invocations[&mark].module.set(self.resolver.current_module);\n     }\n }\n "}, {"sha": "2507d747452f0e98c09a68052185b8b277e15cba", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/a23bdd27695bb5a3bcef34aac9ef7d2ffc952928/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a23bdd27695bb5a3bcef34aac9ef7d2ffc952928/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=a23bdd27695bb5a3bcef34aac9ef7d2ffc952928", "patch": "@@ -77,7 +77,7 @@ use std::mem::replace;\n use std::rc::Rc;\n \n use resolve_imports::{ImportDirective, NameResolution};\n-use macros::ExpansionData;\n+use macros::InvocationData;\n \n // NB: This module needs to be declared first so diagnostics are\n // registered before they are used.\n@@ -1089,7 +1089,7 @@ pub struct Resolver<'a> {\n     macro_names: FnvHashSet<Name>,\n \n     // Maps the `Mark` of an expansion to its containing module or block.\n-    expansion_data: FnvHashMap<Mark, &'a ExpansionData<'a>>,\n+    invocations: FnvHashMap<Mark, &'a InvocationData<'a>>,\n }\n \n pub struct ResolverArenas<'a> {\n@@ -1098,7 +1098,7 @@ pub struct ResolverArenas<'a> {\n     name_bindings: arena::TypedArena<NameBinding<'a>>,\n     import_directives: arena::TypedArena<ImportDirective<'a>>,\n     name_resolutions: arena::TypedArena<RefCell<NameResolution<'a>>>,\n-    expansion_data: arena::TypedArena<ExpansionData<'a>>,\n+    invocation_data: arena::TypedArena<InvocationData<'a>>,\n }\n \n impl<'a> ResolverArenas<'a> {\n@@ -1122,8 +1122,9 @@ impl<'a> ResolverArenas<'a> {\n     fn alloc_name_resolution(&'a self) -> &'a RefCell<NameResolution<'a>> {\n         self.name_resolutions.alloc(Default::default())\n     }\n-    fn alloc_expansion_data(&'a self, expansion_data: ExpansionData<'a>) -> &'a ExpansionData<'a> {\n-        self.expansion_data.alloc(expansion_data)\n+    fn alloc_invocation_data(&'a self, expansion_data: InvocationData<'a>)\n+                             -> &'a InvocationData<'a> {\n+        self.invocation_data.alloc(expansion_data)\n     }\n }\n \n@@ -1210,9 +1211,9 @@ impl<'a> Resolver<'a> {\n         let mut definitions = Definitions::new();\n         DefCollector::new(&mut definitions).collect_root();\n \n-        let mut expansion_data = FnvHashMap();\n-        expansion_data.insert(Mark::root(),\n-                              arenas.alloc_expansion_data(ExpansionData::root(graph_root)));\n+        let mut invocations = FnvHashMap();\n+        invocations.insert(Mark::root(),\n+                           arenas.alloc_invocation_data(InvocationData::root(graph_root)));\n \n         Resolver {\n             session: session,\n@@ -1272,7 +1273,7 @@ impl<'a> Resolver<'a> {\n             derive_modes: FnvHashMap(),\n             crate_loader: crate_loader,\n             macro_names: FnvHashSet(),\n-            expansion_data: expansion_data,\n+            invocations: invocations,\n         }\n     }\n \n@@ -1283,7 +1284,7 @@ impl<'a> Resolver<'a> {\n             name_bindings: arena::TypedArena::new(),\n             import_directives: arena::TypedArena::new(),\n             name_resolutions: arena::TypedArena::new(),\n-            expansion_data: arena::TypedArena::new(),\n+            invocation_data: arena::TypedArena::new(),\n         }\n     }\n "}, {"sha": "650642cee7032b4b74ed96bbcf8948eec9d8ab49", "filename": "src/librustc_resolve/macros.rs", "status": "modified", "additions": 16, "deletions": 17, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/a23bdd27695bb5a3bcef34aac9ef7d2ffc952928/src%2Flibrustc_resolve%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a23bdd27695bb5a3bcef34aac9ef7d2ffc952928/src%2Flibrustc_resolve%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fmacros.rs?ref=a23bdd27695bb5a3bcef34aac9ef7d2ffc952928", "patch": "@@ -34,7 +34,7 @@ pub struct NameBinding {\n }\n \n #[derive(Clone)]\n-pub struct ExpansionData<'a> {\n+pub struct InvocationData<'a> {\n     backtrace: SyntaxContext,\n     pub module: Cell<Module<'a>>,\n     def_index: DefIndex,\n@@ -43,9 +43,9 @@ pub struct ExpansionData<'a> {\n     const_integer: bool,\n }\n \n-impl<'a> ExpansionData<'a> {\n+impl<'a> InvocationData<'a> {\n     pub fn root(graph_root: Module<'a>) -> Self {\n-        ExpansionData {\n+        InvocationData {\n             backtrace: SyntaxContext::empty(),\n             module: Cell::new(graph_root),\n             def_index: CRATE_DEF_INDEX,\n@@ -62,7 +62,7 @@ impl<'a> base::Resolver for Resolver<'a> {\n     fn get_module_scope(&mut self, id: ast::NodeId) -> Mark {\n         let mark = Mark::fresh();\n         let module = self.module_map[&id];\n-        self.expansion_data.insert(mark, self.arenas.alloc_expansion_data(ExpansionData {\n+        self.invocations.insert(mark, self.arenas.alloc_invocation_data(InvocationData {\n             backtrace: SyntaxContext::empty(),\n             module: Cell::new(module),\n             def_index: module.def_id().unwrap().index,\n@@ -73,7 +73,7 @@ impl<'a> base::Resolver for Resolver<'a> {\n \n     fn visit_expansion(&mut self, mark: Mark, expansion: &Expansion) {\n         self.collect_def_ids(mark, expansion);\n-        self.current_module = self.expansion_data[&mark].module.get();\n+        self.current_module = self.invocations[&mark].module.get();\n         expansion.visit_with(&mut BuildReducedGraphVisitor { resolver: self, expansion: mark });\n     }\n \n@@ -82,14 +82,14 @@ impl<'a> base::Resolver for Resolver<'a> {\n             self.session.span_err(def.span, \"user-defined macros may not be named `macro_rules`\");\n         }\n         if def.use_locally {\n-            let expansion_data = self.expansion_data[&scope];\n-            let mut module = expansion_data.module.get();\n+            let invocation = self.invocations[&scope];\n+            let mut module = invocation.module.get();\n             while module.macros_escape {\n                 module = module.parent.unwrap();\n             }\n             let binding = NameBinding {\n                 ext: Rc::new(macro_rules::compile(&self.session.parse_sess, &def)),\n-                expansion: expansion_data.backtrace.data().prev_ctxt.data().outer_mark,\n+                expansion: invocation.backtrace.data().prev_ctxt.data().outer_mark,\n                 shadowing: self.resolve_macro_name(scope, def.ident.name, false).is_some(),\n                 span: def.span,\n             };\n@@ -121,7 +121,7 @@ impl<'a> base::Resolver for Resolver<'a> {\n     fn find_attr_invoc(&mut self, attrs: &mut Vec<ast::Attribute>) -> Option<ast::Attribute> {\n         for i in 0..attrs.len() {\n             let name = intern(&attrs[i].name());\n-            match self.expansion_data[&Mark::root()].module.get().macros.borrow().get(&name) {\n+            match self.invocations[&Mark::root()].module.get().macros.borrow().get(&name) {\n                 Some(binding) => match *binding.ext {\n                     MultiModifier(..) | MultiDecorator(..) | SyntaxExtension::AttrProcMacro(..) => {\n                         return Some(attrs.remove(i))\n@@ -166,11 +166,11 @@ impl<'a> base::Resolver for Resolver<'a> {\n impl<'a> Resolver<'a> {\n     pub fn resolve_macro_name(&mut self, scope: Mark, name: ast::Name, record_used: bool)\n                               -> Option<Rc<SyntaxExtension>> {\n-        let expansion_data = self.expansion_data[&scope];\n-        let mut module = expansion_data.module.get();\n+        let invocation = self.invocations[&scope];\n+        let mut module = invocation.module.get();\n         loop {\n             if let Some(binding) = module.macros.borrow().get(&name) {\n-                let mut backtrace = expansion_data.backtrace.data();\n+                let mut backtrace = invocation.backtrace.data();\n                 while binding.expansion != backtrace.outer_mark {\n                     if backtrace.outer_mark != Mark::root() {\n                         backtrace = backtrace.prev_ctxt.data();\n@@ -208,13 +208,12 @@ impl<'a> Resolver<'a> {\n     }\n \n     fn collect_def_ids(&mut self, mark: Mark, expansion: &Expansion) {\n-        let Resolver { ref mut expansion_data, arenas, graph_root, .. } = *self;\n-        let ExpansionData { def_index, const_integer, backtrace, .. } =\n-            expansion_data[&mark].clone();\n+        let Resolver { ref mut invocations, arenas, graph_root, .. } = *self;\n+        let InvocationData { def_index, const_integer, backtrace, .. } = invocations[&mark].clone();\n \n         let visit_macro_invoc = &mut |invoc: map::MacroInvocationData| {\n-            expansion_data.entry(invoc.mark).or_insert_with(|| {\n-                arenas.alloc_expansion_data(ExpansionData {\n+            invocations.entry(invoc.mark).or_insert_with(|| {\n+                arenas.alloc_invocation_data(InvocationData {\n                     backtrace: backtrace.apply_mark(invoc.mark),\n                     def_index: invoc.def_index,\n                     const_integer: invoc.const_integer,"}]}