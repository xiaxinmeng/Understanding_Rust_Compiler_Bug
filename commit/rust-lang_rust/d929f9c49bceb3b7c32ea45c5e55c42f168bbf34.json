{"sha": "d929f9c49bceb3b7c32ea45c5e55c42f168bbf34", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ5MjlmOWM0OWJjZWIzYjdjMzJlYTQ1YzVlNTVjNDJmMTY4YmJmMzQ=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2019-10-30T16:17:49Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-10-30T16:17:49Z"}, "message": "Merge #2130\n\n2130: improve compile time a bit r=matklad a=matklad\n\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "3f0f71a7b9406738b1d15d53970e76302ac624c4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3f0f71a7b9406738b1d15d53970e76302ac624c4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d929f9c49bceb3b7c32ea45c5e55c42f168bbf34", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdubetCRBK7hj4Ov3rIwAAdHIIAEDWidUiJBPCJgwboO45y0Cl\nBqJ7mQzq7g3/SoaXf2OhPNortSUbuB5X8ur/4npINzZfcvucts9jK19+Qs5FxJAS\nXjkzkPf5Glkkt7AIdsjiSAACqktgPSZ23QYbouX/RWbyjOSEw/WVWMl1iJSbY71i\nEjsQjV+RugR9A/kS9OXUUtvsWeUl/SZ633uYp+wxP+d9/0vyhXPYXpgX2QmhIENe\nQsqjdbDie9F6lGPLl8J5+IVr1cxUR6h1QccRk7GL8yX+jSmqFCNKd1Wf/hZ4GzCi\nn7VblU5KjqF++pZ8dKdZtc0/agbT9726ZU7FqgfWHopr4Hb+nmIzFPWOFm1Ul6A=\n=Wcs2\n-----END PGP SIGNATURE-----\n", "payload": "tree 3f0f71a7b9406738b1d15d53970e76302ac624c4\nparent 5806195bc1cdb1ca3fa257e99fd6e0dd897713a9\nparent cf4f7eb56660cfff355cb6bd41d5c17f7d19571b\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1572452269 +0000\ncommitter GitHub <noreply@github.com> 1572452269 +0000\n\nMerge #2130\n\n2130: improve compile time a bit r=matklad a=matklad\n\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d929f9c49bceb3b7c32ea45c5e55c42f168bbf34", "html_url": "https://github.com/rust-lang/rust/commit/d929f9c49bceb3b7c32ea45c5e55c42f168bbf34", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d929f9c49bceb3b7c32ea45c5e55c42f168bbf34/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5806195bc1cdb1ca3fa257e99fd6e0dd897713a9", "url": "https://api.github.com/repos/rust-lang/rust/commits/5806195bc1cdb1ca3fa257e99fd6e0dd897713a9", "html_url": "https://github.com/rust-lang/rust/commit/5806195bc1cdb1ca3fa257e99fd6e0dd897713a9"}, {"sha": "cf4f7eb56660cfff355cb6bd41d5c17f7d19571b", "url": "https://api.github.com/repos/rust-lang/rust/commits/cf4f7eb56660cfff355cb6bd41d5c17f7d19571b", "html_url": "https://github.com/rust-lang/rust/commit/cf4f7eb56660cfff355cb6bd41d5c17f7d19571b"}], "stats": {"total": 335, "additions": 178, "deletions": 157}, "files": [{"sha": "97424b39e00da9dd5029ad447745ae680375dca8", "filename": "crates/ra_hir/src/adt.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d929f9c49bceb3b7c32ea45c5e55c42f168bbf34/crates%2Fra_hir%2Fsrc%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d929f9c49bceb3b7c32ea45c5e55c42f168bbf34/crates%2Fra_hir%2Fsrc%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fadt.rs?ref=d929f9c49bceb3b7c32ea45c5e55c42f168bbf34", "patch": "@@ -3,7 +3,8 @@\n \n use std::sync::Arc;\n \n-use hir_def::{name::AsName, type_ref::TypeRef};\n+use hir_def::type_ref::TypeRef;\n+use hir_expand::name::AsName;\n use ra_arena::{impl_arena_id, Arena, RawId};\n use ra_syntax::ast::{self, NameOwner, StructKind, TypeAscriptionOwner};\n "}, {"sha": "a6ce23dd10e4f04b0966940f6cd83901e6a5add9", "filename": "crates/ra_hir/src/code_model.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d929f9c49bceb3b7c32ea45c5e55c42f168bbf34/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d929f9c49bceb3b7c32ea45c5e55c42f168bbf34/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model.rs?ref=d929f9c49bceb3b7c32ea45c5e55c42f168bbf34", "patch": "@@ -6,13 +6,13 @@ pub(crate) mod docs;\n use std::sync::Arc;\n \n use hir_def::{\n-    name::{\n-        self, AsName, BOOL, CHAR, F32, F64, I128, I16, I32, I64, I8, ISIZE, SELF_TYPE, STR, U128,\n-        U16, U32, U64, U8, USIZE,\n-    },\n     type_ref::{Mutability, TypeRef},\n     CrateModuleId, ModuleId,\n };\n+use hir_expand::name::{\n+    self, AsName, BOOL, CHAR, F32, F64, I128, I16, I32, I64, I8, ISIZE, SELF_TYPE, STR, U128, U16,\n+    U32, U64, U8, USIZE,\n+};\n use ra_db::{CrateId, Edition};\n use ra_syntax::ast::{self, NameOwner, TypeAscriptionOwner};\n "}, {"sha": "6463dd65e1ed17b89330a9dc0c70e82263ae4068", "filename": "crates/ra_hir/src/expr/lower.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d929f9c49bceb3b7c32ea45c5e55c42f168bbf34/crates%2Fra_hir%2Fsrc%2Fexpr%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d929f9c49bceb3b7c32ea45c5e55c42f168bbf34/crates%2Fra_hir%2Fsrc%2Fexpr%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fexpr%2Flower.rs?ref=d929f9c49bceb3b7c32ea45c5e55c42f168bbf34", "patch": "@@ -1,9 +1,9 @@\n //! FIXME: write short doc here\n \n-use hir_def::{\n+use hir_def::{path::GenericArgs, type_ref::TypeRef};\n+use hir_expand::{\n+    hygiene::Hygiene,\n     name::{self, AsName, Name},\n-    path::GenericArgs,\n-    type_ref::TypeRef,\n };\n use ra_arena::Arena;\n use ra_syntax::{\n@@ -597,7 +597,8 @@ where\n     }\n \n     fn parse_path(&mut self, path: ast::Path) -> Option<Path> {\n-        Path::from_src(Source { ast: path, file_id: self.current_file_id }, self.db)\n+        let hygiene = Hygiene::new(self.db, self.current_file_id);\n+        Path::from_src(path, &hygiene)\n     }\n }\n "}, {"sha": "a9de0145538b630aa3dc93fdc7345fb8b19e0089", "filename": "crates/ra_hir/src/from_source.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d929f9c49bceb3b7c32ea45c5e55c42f168bbf34/crates%2Fra_hir%2Fsrc%2Ffrom_source.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d929f9c49bceb3b7c32ea45c5e55c42f168bbf34/crates%2Fra_hir%2Fsrc%2Ffrom_source.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Ffrom_source.rs?ref=d929f9c49bceb3b7c32ea45c5e55c42f168bbf34", "patch": "@@ -1,6 +1,6 @@\n //! FIXME: write short doc here\n \n-use hir_def::name::AsName;\n+use hir_expand::name::AsName;\n use ra_syntax::ast::{self, AstNode, NameOwner};\n \n use crate::{"}, {"sha": "52e1fbf2946b121047a93e50230dfb9a11a86583", "filename": "crates/ra_hir/src/generics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d929f9c49bceb3b7c32ea45c5e55c42f168bbf34/crates%2Fra_hir%2Fsrc%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d929f9c49bceb3b7c32ea45c5e55c42f168bbf34/crates%2Fra_hir%2Fsrc%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fgenerics.rs?ref=d929f9c49bceb3b7c32ea45c5e55c42f168bbf34", "patch": "@@ -6,10 +6,10 @@\n use std::sync::Arc;\n \n use hir_def::{\n-    name::{self, AsName},\n     path::Path,\n     type_ref::{TypeBound, TypeRef},\n };\n+use hir_expand::name::{self, AsName};\n use ra_syntax::ast::{self, DefaultTypeParamOwner, NameOwner, TypeBoundsOwner, TypeParamsOwner};\n \n use crate::{"}, {"sha": "b1a0140745c4e55c3c8fe26915e0601244e07d18", "filename": "crates/ra_hir/src/impl_block.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d929f9c49bceb3b7c32ea45c5e55c42f168bbf34/crates%2Fra_hir%2Fsrc%2Fimpl_block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d929f9c49bceb3b7c32ea45c5e55c42f168bbf34/crates%2Fra_hir%2Fsrc%2Fimpl_block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fimpl_block.rs?ref=d929f9c49bceb3b7c32ea45c5e55c42f168bbf34", "patch": "@@ -4,6 +4,7 @@ use rustc_hash::FxHashMap;\n use std::sync::Arc;\n \n use hir_def::{attr::Attr, type_ref::TypeRef};\n+use hir_expand::hygiene::Hygiene;\n use ra_arena::{impl_arena_id, map::ArenaMap, Arena, RawId};\n use ra_cfg::CfgOptions;\n use ra_syntax::{\n@@ -227,10 +228,11 @@ impl ModuleImplBlocks {\n         owner: &dyn ast::ModuleItemOwner,\n         file_id: HirFileId,\n     ) {\n+        let hygiene = Hygiene::new(db, file_id);\n         for item in owner.items_with_macros() {\n             match item {\n                 ast::ItemOrMacro::Item(ast::ModuleItem::ImplBlock(impl_block_ast)) => {\n-                    let attrs = Attr::from_attrs_owner(file_id, &impl_block_ast, db);\n+                    let attrs = Attr::from_attrs_owner(&impl_block_ast, &hygiene);\n                     if attrs.map_or(false, |attrs| {\n                         attrs.iter().any(|attr| attr.is_cfg_enabled(cfg_options) == Some(false))\n                     }) {\n@@ -247,7 +249,7 @@ impl ModuleImplBlocks {\n                 }\n                 ast::ItemOrMacro::Item(_) => (),\n                 ast::ItemOrMacro::Macro(macro_call) => {\n-                    let attrs = Attr::from_attrs_owner(file_id, &macro_call, db);\n+                    let attrs = Attr::from_attrs_owner(&macro_call, &hygiene);\n                     if attrs.map_or(false, |attrs| {\n                         attrs.iter().any(|attr| attr.is_cfg_enabled(cfg_options) == Some(false))\n                     }) {\n@@ -256,9 +258,8 @@ impl ModuleImplBlocks {\n \n                     //FIXME: we should really cut down on the boilerplate required to process a macro\n                     let ast_id = AstId::new(file_id, db.ast_id_map(file_id).ast_id(&macro_call));\n-                    if let Some(path) = macro_call\n-                        .path()\n-                        .and_then(|path| Path::from_src(Source { ast: path, file_id }, db))\n+                    if let Some(path) =\n+                        macro_call.path().and_then(|path| Path::from_src(path, &hygiene))\n                     {\n                         if let Some(def) = self.module.resolver(db).resolve_path_as_macro(db, &path)\n                         {"}, {"sha": "603b0c3dc3f16fe32fb428f6f2a840dc02c57163", "filename": "crates/ra_hir/src/lib.rs", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/d929f9c49bceb3b7c32ea45c5e55c42f168bbf34/crates%2Fra_hir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d929f9c49bceb3b7c32ea45c5e55c42f168bbf34/crates%2Fra_hir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Flib.rs?ref=d929f9c49bceb3b7c32ea45c5e55c42f168bbf34", "patch": "@@ -60,6 +60,13 @@ use crate::{ids::MacroFileKind, resolve::Resolver};\n \n pub use crate::{\n     adt::VariantDef,\n+    code_model::{\n+        docs::{DocDef, Docs, Documentation},\n+        src::{HasBodySource, HasSource, Source},\n+        Adt, AssocItem, BuiltinType, Const, ConstData, Container, Crate, CrateDependency,\n+        DefWithBody, Enum, EnumVariant, FieldSource, FnData, Function, HasBody, MacroDef, Module,\n+        ModuleDef, ModuleSource, Static, Struct, StructField, Trait, TypeAlias, Union,\n+    },\n     expr::ExprScopes,\n     from_source::FromSource,\n     generics::{GenericDef, GenericParam, GenericParams, HasGenericParams},\n@@ -73,17 +80,8 @@ pub use crate::{\n     },\n };\n \n-pub use self::code_model::{\n-    docs::{DocDef, Docs, Documentation},\n-    src::{HasBodySource, HasSource, Source},\n-    Adt, AssocItem, BuiltinType, Const, ConstData, Container, Crate, CrateDependency, DefWithBody,\n-    Enum, EnumVariant, FieldSource, FnData, Function, HasBody, MacroDef, Module, ModuleDef,\n-    ModuleSource, Static, Struct, StructField, Trait, TypeAlias, Union,\n-};\n-\n pub use hir_def::{\n-    either::Either,\n-    name::Name,\n     path::{Path, PathKind},\n     type_ref::Mutability,\n };\n+pub use hir_expand::{either::Either, name::Name};"}, {"sha": "e2e13805acc07a17a32aae199b9807ca284aa6ad", "filename": "crates/ra_hir/src/nameres/collector.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d929f9c49bceb3b7c32ea45c5e55c42f168bbf34/crates%2Fra_hir%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d929f9c49bceb3b7c32ea45c5e55c42f168bbf34/crates%2Fra_hir%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fnameres%2Fcollector.rs?ref=d929f9c49bceb3b7c32ea45c5e55c42f168bbf34", "patch": "@@ -1,6 +1,7 @@\n //! FIXME: write short doc here\n \n-use hir_def::{attr::Attr, name, nameres::raw};\n+use hir_def::{attr::Attr, nameres::raw};\n+use hir_expand::name;\n use ra_cfg::CfgOptions;\n use ra_db::FileId;\n use ra_syntax::{ast, SmolStr};"}, {"sha": "f77c9df9f0232523b5015822ea56a0874fc36f8f", "filename": "crates/ra_hir/src/resolve.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d929f9c49bceb3b7c32ea45c5e55c42f168bbf34/crates%2Fra_hir%2Fsrc%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d929f9c49bceb3b7c32ea45c5e55c42f168bbf34/crates%2Fra_hir%2Fsrc%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fresolve.rs?ref=d929f9c49bceb3b7c32ea45c5e55c42f168bbf34", "patch": "@@ -2,10 +2,10 @@\n use std::sync::Arc;\n \n use hir_def::{\n-    name::{self, Name},\n     path::{Path, PathKind},\n     CrateModuleId,\n };\n+use hir_expand::name::{self, Name};\n use rustc_hash::FxHashSet;\n \n use crate::{"}, {"sha": "01f51ba5d4707e18f4132769372c849819cc1989", "filename": "crates/ra_hir/src/source_binder.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d929f9c49bceb3b7c32ea45c5e55c42f168bbf34/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d929f9c49bceb3b7c32ea45c5e55c42f168bbf34/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs?ref=d929f9c49bceb3b7c32ea45c5e55c42f168bbf34", "patch": "@@ -7,7 +7,8 @@\n //! purely for \"IDE needs\".\n use std::sync::Arc;\n \n-use hir_def::{name::AsName, path::known};\n+use hir_def::path::known;\n+use hir_expand::name::AsName;\n use ra_db::FileId;\n use ra_syntax::{\n     ast::{self, AstNode},"}, {"sha": "1a45dacba92d837acd0232bab31f263d0005f79d", "filename": "crates/ra_hir/src/traits.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d929f9c49bceb3b7c32ea45c5e55c42f168bbf34/crates%2Fra_hir%2Fsrc%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d929f9c49bceb3b7c32ea45c5e55c42f168bbf34/crates%2Fra_hir%2Fsrc%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Ftraits.rs?ref=d929f9c49bceb3b7c32ea45c5e55c42f168bbf34", "patch": "@@ -2,7 +2,8 @@\n \n use std::sync::Arc;\n \n-use hir_def::name::AsName;\n+use hir_expand::name::AsName;\n+\n use ra_syntax::ast::{self, NameOwner};\n use rustc_hash::FxHashMap;\n "}, {"sha": "3645ee831c91113985ea8df816dca03d80af7935", "filename": "crates/ra_hir/src/ty/autoderef.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d929f9c49bceb3b7c32ea45c5e55c42f168bbf34/crates%2Fra_hir%2Fsrc%2Fty%2Fautoderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d929f9c49bceb3b7c32ea45c5e55c42f168bbf34/crates%2Fra_hir%2Fsrc%2Fty%2Fautoderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Fautoderef.rs?ref=d929f9c49bceb3b7c32ea45c5e55c42f168bbf34", "patch": "@@ -5,7 +5,7 @@\n \n use std::iter::successors;\n \n-use hir_def::name;\n+use hir_expand::name;\n use log::{info, warn};\n \n use super::{traits::Solution, Canonical, Substs, Ty, TypeWalk};"}, {"sha": "6694467a36cbb6df712fd63e22c4d944120358c4", "filename": "crates/ra_hir/src/ty/infer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d929f9c49bceb3b7c32ea45c5e55c42f168bbf34/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d929f9c49bceb3b7c32ea45c5e55c42f168bbf34/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs?ref=d929f9c49bceb3b7c32ea45c5e55c42f168bbf34", "patch": "@@ -22,10 +22,10 @@ use ena::unify::{InPlaceUnificationTable, NoError, UnifyKey, UnifyValue};\n use rustc_hash::FxHashMap;\n \n use hir_def::{\n-    name,\n     path::known,\n     type_ref::{Mutability, TypeRef},\n };\n+use hir_expand::name;\n use ra_arena::map::ArenaMap;\n use ra_prof::profile;\n use test_utils::tested_by;"}, {"sha": "fed52df39cef186978fb4edc18786e8620f150e0", "filename": "crates/ra_hir/src/ty/infer/expr.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d929f9c49bceb3b7c32ea45c5e55c42f168bbf34/crates%2Fra_hir%2Fsrc%2Fty%2Finfer%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d929f9c49bceb3b7c32ea45c5e55c42f168bbf34/crates%2Fra_hir%2Fsrc%2Fty%2Finfer%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Finfer%2Fexpr.rs?ref=d929f9c49bceb3b7c32ea45c5e55c42f168bbf34", "patch": "@@ -3,10 +3,8 @@\n use std::iter::{repeat, repeat_with};\n use std::sync::Arc;\n \n-use hir_def::{\n-    name,\n-    path::{GenericArg, GenericArgs},\n-};\n+use hir_def::path::{GenericArg, GenericArgs};\n+use hir_expand::name;\n \n use super::{BindingMode, Expectation, InferenceContext, InferenceDiagnostic, TypeMismatch};\n use crate::{"}, {"sha": "39ef9218279e6d7013f499ac38a51c83110754ed", "filename": "crates/ra_hir/src/ty/traits/chalk.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d929f9c49bceb3b7c32ea45c5e55c42f168bbf34/crates%2Fra_hir%2Fsrc%2Fty%2Ftraits%2Fchalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d929f9c49bceb3b7c32ea45c5e55c42f168bbf34/crates%2Fra_hir%2Fsrc%2Fty%2Ftraits%2Fchalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Ftraits%2Fchalk.rs?ref=d929f9c49bceb3b7c32ea45c5e55c42f168bbf34", "patch": "@@ -9,7 +9,8 @@ use chalk_ir::{\n };\n use chalk_rust_ir::{AssociatedTyDatum, ImplDatum, StructDatum, TraitDatum};\n \n-use hir_def::name;\n+use hir_expand::name;\n+\n use ra_db::salsa::{InternId, InternKey};\n \n use super::{Canonical, ChalkContext, Impl, Obligation};"}, {"sha": "078e6295eaa3f826612957b1f164e63ef2e13034", "filename": "crates/ra_hir/src/type_alias.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d929f9c49bceb3b7c32ea45c5e55c42f168bbf34/crates%2Fra_hir%2Fsrc%2Ftype_alias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d929f9c49bceb3b7c32ea45c5e55c42f168bbf34/crates%2Fra_hir%2Fsrc%2Ftype_alias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Ftype_alias.rs?ref=d929f9c49bceb3b7c32ea45c5e55c42f168bbf34", "patch": "@@ -2,10 +2,9 @@\n \n use std::sync::Arc;\n \n-use hir_def::{\n-    name::{AsName, Name},\n-    type_ref::TypeRef,\n-};\n+use hir_def::type_ref::TypeRef;\n+use hir_expand::name::{AsName, Name};\n+\n use ra_syntax::ast::NameOwner;\n \n use crate::{"}, {"sha": "0e961ca12aff63a679b5a52dc317baff3d8d24e6", "filename": "crates/ra_hir_def/src/attr.rs", "status": "modified", "additions": 6, "deletions": 13, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/d929f9c49bceb3b7c32ea45c5e55c42f168bbf34/crates%2Fra_hir_def%2Fsrc%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d929f9c49bceb3b7c32ea45c5e55c42f168bbf34/crates%2Fra_hir_def%2Fsrc%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fattr.rs?ref=d929f9c49bceb3b7c32ea45c5e55c42f168bbf34", "patch": "@@ -2,7 +2,7 @@\n \n use std::sync::Arc;\n \n-use hir_expand::db::AstDatabase;\n+use hir_expand::hygiene::Hygiene;\n use mbe::ast_to_token_tree;\n use ra_cfg::CfgOptions;\n use ra_syntax::{\n@@ -11,7 +11,7 @@ use ra_syntax::{\n };\n use tt::Subtree;\n \n-use crate::{path::Path, HirFileId, Source};\n+use crate::path::Path;\n \n #[derive(Debug, Clone, PartialEq, Eq)]\n pub struct Attr {\n@@ -26,11 +26,8 @@ pub enum AttrInput {\n }\n \n impl Attr {\n-    pub(crate) fn from_src(\n-        Source { file_id, ast }: Source<ast::Attr>,\n-        db: &impl AstDatabase,\n-    ) -> Option<Attr> {\n-        let path = Path::from_src(Source { file_id, ast: ast.path()? }, db)?;\n+    pub(crate) fn from_src(ast: ast::Attr, hygiene: &Hygiene) -> Option<Attr> {\n+        let path = Path::from_src(ast.path()?, hygiene)?;\n         let input = match ast.input() {\n             None => None,\n             Some(ast::AttrInput::Literal(lit)) => {\n@@ -46,17 +43,13 @@ impl Attr {\n         Some(Attr { path, input })\n     }\n \n-    pub fn from_attrs_owner(\n-        file_id: HirFileId,\n-        owner: &dyn AttrsOwner,\n-        db: &impl AstDatabase,\n-    ) -> Option<Arc<[Attr]>> {\n+    pub fn from_attrs_owner(owner: &dyn AttrsOwner, hygiene: &Hygiene) -> Option<Arc<[Attr]>> {\n         let mut attrs = owner.attrs().peekable();\n         if attrs.peek().is_none() {\n             // Avoid heap allocation\n             return None;\n         }\n-        Some(attrs.flat_map(|ast| Attr::from_src(Source { file_id, ast }, db)).collect())\n+        Some(attrs.flat_map(|ast| Attr::from_src(ast, hygiene)).collect())\n     }\n \n     pub fn is_simple_atom(&self, name: &str) -> bool {"}, {"sha": "7a6c7b30125eb7dfc90e99512443c015ccb67370", "filename": "crates/ra_hir_def/src/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d929f9c49bceb3b7c32ea45c5e55c42f168bbf34/crates%2Fra_hir_def%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d929f9c49bceb3b7c32ea45c5e55c42f168bbf34/crates%2Fra_hir_def%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Flib.rs?ref=d929f9c49bceb3b7c32ea45c5e55c42f168bbf34", "patch": "@@ -8,9 +8,7 @@\n //! actually true.\n \n pub mod db;\n-pub mod either;\n pub mod attr;\n-pub mod name;\n pub mod path;\n pub mod type_ref;\n "}, {"sha": "86c05d6028e72c9171ea11d44e93ef7150699a7f", "filename": "crates/ra_hir_def/src/nameres/raw.rs", "status": "modified", "additions": 24, "deletions": 31, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/d929f9c49bceb3b7c32ea45c5e55c42f168bbf34/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d929f9c49bceb3b7c32ea45c5e55c42f168bbf34/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fraw.rs?ref=d929f9c49bceb3b7c32ea45c5e55c42f168bbf34", "patch": "@@ -2,21 +2,20 @@\n \n use std::{ops::Index, sync::Arc};\n \n-use hir_expand::{ast_id_map::AstIdMap, db::AstDatabase};\n+use hir_expand::{\n+    ast_id_map::AstIdMap,\n+    db::AstDatabase,\n+    either::Either,\n+    hygiene::Hygiene,\n+    name::{AsName, Name},\n+};\n use ra_arena::{impl_arena_id, map::ArenaMap, Arena, RawId};\n use ra_syntax::{\n     ast::{self, AttrsOwner, NameOwner},\n     AstNode, AstPtr, SourceFile,\n };\n \n-use crate::{\n-    attr::Attr,\n-    db::DefDatabase2,\n-    either::Either,\n-    name::{AsName, Name},\n-    path::Path,\n-    FileAstId, HirFileId, ModuleSource, Source,\n-};\n+use crate::{attr::Attr, db::DefDatabase2, path::Path, FileAstId, HirFileId, ModuleSource, Source};\n \n /// `RawItems` is a set of top-level items in a file (except for impls).\n ///\n@@ -40,10 +39,8 @@ pub struct ImportSourceMap {\n type ImportSourcePtr = Either<AstPtr<ast::UseTree>, AstPtr<ast::ExternCrateItem>>;\n type ImportSource = Either<ast::UseTree, ast::ExternCrateItem>;\n \n-impl ImportSourcePtr {\n-    fn to_node(self, file: &SourceFile) -> ImportSource {\n-        self.map(|ptr| ptr.to_node(file.syntax()), |ptr| ptr.to_node(file.syntax()))\n-    }\n+fn to_node(ptr: ImportSourcePtr, file: &SourceFile) -> ImportSource {\n+    ptr.map(|ptr| ptr.to_node(file.syntax()), |ptr| ptr.to_node(file.syntax()))\n }\n \n impl ImportSourceMap {\n@@ -57,7 +54,7 @@ impl ImportSourceMap {\n             ModuleSource::Module(m) => m.syntax().ancestors().find_map(SourceFile::cast).unwrap(),\n         };\n \n-        self.map[import].to_node(&file)\n+        to_node(self.map[import], &file)\n     }\n }\n \n@@ -78,7 +75,7 @@ impl RawItems {\n             source_ast_id_map: db.ast_id_map(file_id),\n             source_map: ImportSourceMap::default(),\n             file_id,\n-            db,\n+            hygiene: Hygiene::new(db, file_id),\n         };\n         if let Some(node) = db.parse_or_expand(file_id) {\n             if let Some(source_file) = ast::SourceFile::cast(node.clone()) {\n@@ -204,15 +201,15 @@ pub struct MacroData {\n     pub export: bool,\n }\n \n-struct RawItemsCollector<DB> {\n+struct RawItemsCollector {\n     raw_items: RawItems,\n     source_ast_id_map: Arc<AstIdMap>,\n     source_map: ImportSourceMap,\n     file_id: HirFileId,\n-    db: DB,\n+    hygiene: Hygiene,\n }\n \n-impl<DB: AstDatabase> RawItemsCollector<&DB> {\n+impl RawItemsCollector {\n     fn process_module(&mut self, current_module: Option<Module>, body: impl ast::ModuleItemOwner) {\n         for item_or_macro in body.items_with_macros() {\n             match item_or_macro {\n@@ -309,9 +306,10 @@ impl<DB: AstDatabase> RawItemsCollector<&DB> {\n         let is_prelude = use_item.has_atom_attr(\"prelude_import\");\n         let attrs = self.parse_attrs(&use_item);\n \n+        let mut buf = Vec::new();\n         Path::expand_use_item(\n             Source { ast: use_item, file_id: self.file_id },\n-            self.db,\n+            &self.hygiene,\n             |path, use_tree, is_glob, alias| {\n                 let import_data = ImportData {\n                     path,\n@@ -321,14 +319,12 @@ impl<DB: AstDatabase> RawItemsCollector<&DB> {\n                     is_extern_crate: false,\n                     is_macro_use: false,\n                 };\n-                self.push_import(\n-                    current_module,\n-                    attrs.clone(),\n-                    import_data,\n-                    Either::A(AstPtr::new(use_tree)),\n-                );\n+                buf.push((import_data, Either::A(AstPtr::new(use_tree))));\n             },\n-        )\n+        );\n+        for (import_data, ptr) in buf {\n+            self.push_import(current_module, attrs.clone(), import_data, ptr);\n+        }\n     }\n \n     fn add_extern_crate_item(\n@@ -361,10 +357,7 @@ impl<DB: AstDatabase> RawItemsCollector<&DB> {\n \n     fn add_macro(&mut self, current_module: Option<Module>, m: ast::MacroCall) {\n         let attrs = self.parse_attrs(&m);\n-        let path = match m\n-            .path()\n-            .and_then(|path| Path::from_src(Source { ast: path, file_id: self.file_id }, self.db))\n-        {\n+        let path = match m.path().and_then(|path| Path::from_src(path, &self.hygiene)) {\n             Some(it) => it,\n             _ => return,\n         };\n@@ -402,6 +395,6 @@ impl<DB: AstDatabase> RawItemsCollector<&DB> {\n     }\n \n     fn parse_attrs(&self, item: &impl ast::AttrsOwner) -> Attrs {\n-        Attr::from_attrs_owner(self.file_id, item, self.db)\n+        Attr::from_attrs_owner(item, &self.hygiene)\n     }\n }"}, {"sha": "04039376f3942449b83437beac1a280bef8c74b6", "filename": "crates/ra_hir_def/src/path.rs", "status": "modified", "additions": 56, "deletions": 59, "changes": 115, "blob_url": "https://github.com/rust-lang/rust/blob/d929f9c49bceb3b7c32ea45c5e55c42f168bbf34/crates%2Fra_hir_def%2Fsrc%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d929f9c49bceb3b7c32ea45c5e55c42f168bbf34/crates%2Fra_hir_def%2Fsrc%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fpath.rs?ref=d929f9c49bceb3b7c32ea45c5e55c42f168bbf34", "patch": "@@ -2,18 +2,18 @@\n \n use std::{iter, sync::Arc};\n \n-use hir_expand::db::AstDatabase;\n+use hir_expand::{\n+    either::Either,\n+    hygiene::Hygiene,\n+    name::{self, AsName, Name},\n+};\n use ra_db::CrateId;\n use ra_syntax::{\n     ast::{self, NameOwner, TypeAscriptionOwner},\n     AstNode,\n };\n \n-use crate::{\n-    name::{self, AsName, Name},\n-    type_ref::TypeRef,\n-    Source,\n-};\n+use crate::{type_ref::TypeRef, Source};\n \n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct Path {\n@@ -68,11 +68,11 @@ impl Path {\n     /// Calls `cb` with all paths, represented by this use item.\n     pub fn expand_use_item(\n         item_src: Source<ast::UseItem>,\n-        db: &impl AstDatabase,\n+        hygiene: &Hygiene,\n         mut cb: impl FnMut(Path, &ast::UseTree, bool, Option<Name>),\n     ) {\n         if let Some(tree) = item_src.ast.use_tree() {\n-            expand_use_tree(None, tree, &|| item_src.file_id.macro_crate(db), &mut cb);\n+            expand_use_tree(None, tree, hygiene, &mut cb);\n         }\n     }\n \n@@ -89,17 +89,12 @@ impl Path {\n     /// Converts an `ast::Path` to `Path`. Works with use trees.\n     /// DEPRECATED: It does not handle `$crate` from macro call.\n     pub fn from_ast(path: ast::Path) -> Option<Path> {\n-        Path::parse(path, &|| None)\n+        Path::from_src(path, &Hygiene::new_unhygienic())\n     }\n \n     /// Converts an `ast::Path` to `Path`. Works with use trees.\n     /// It correctly handles `$crate` based path from macro call.\n-    pub fn from_src(source: Source<ast::Path>, db: &impl AstDatabase) -> Option<Path> {\n-        let file_id = source.file_id;\n-        Path::parse(source.ast, &|| file_id.macro_crate(db))\n-    }\n-\n-    fn parse(mut path: ast::Path, macro_crate: &impl Fn() -> Option<CrateId>) -> Option<Path> {\n+    pub fn from_src(mut path: ast::Path, hygiene: &Hygiene) -> Option<Path> {\n         let mut kind = PathKind::Plain;\n         let mut segments = Vec::new();\n         loop {\n@@ -110,26 +105,28 @@ impl Path {\n             }\n \n             match segment.kind()? {\n-                ast::PathSegmentKind::Name(name) => {\n-                    if name.text() == \"$crate\" {\n-                        if let Some(macro_crate) = macro_crate() {\n-                            kind = PathKind::DollarCrate(macro_crate);\n+                ast::PathSegmentKind::Name(name_ref) => {\n+                    // FIXME: this should just return name\n+                    match hygiene.name_ref_to_name(name_ref) {\n+                        Either::A(name) => {\n+                            let args = segment\n+                                .type_arg_list()\n+                                .and_then(GenericArgs::from_ast)\n+                                .or_else(|| {\n+                                    GenericArgs::from_fn_like_path_ast(\n+                                        segment.param_list(),\n+                                        segment.ret_type(),\n+                                    )\n+                                })\n+                                .map(Arc::new);\n+                            let segment = PathSegment { name, args_and_bindings: args };\n+                            segments.push(segment);\n+                        }\n+                        Either::B(crate_id) => {\n+                            kind = PathKind::DollarCrate(crate_id);\n                             break;\n                         }\n                     }\n-\n-                    let args = segment\n-                        .type_arg_list()\n-                        .and_then(GenericArgs::from_ast)\n-                        .or_else(|| {\n-                            GenericArgs::from_fn_like_path_ast(\n-                                segment.param_list(),\n-                                segment.ret_type(),\n-                            )\n-                        })\n-                        .map(Arc::new);\n-                    let segment = PathSegment { name: name.as_name(), args_and_bindings: args };\n-                    segments.push(segment);\n                 }\n                 ast::PathSegmentKind::Type { type_ref, trait_ref } => {\n                     assert!(path.qualifier().is_none()); // this can only occur at the first segment\n@@ -143,7 +140,7 @@ impl Path {\n                         }\n                         // <T as Trait<A>>::Foo desugars to Trait<Self=T, A>::Foo\n                         Some(trait_ref) => {\n-                            let path = Path::parse(trait_ref.path()?, macro_crate)?;\n+                            let path = Path::from_src(trait_ref.path()?, hygiene)?;\n                             kind = path.kind;\n                             let mut prefix_segments = path.segments;\n                             prefix_segments.reverse();\n@@ -294,22 +291,22 @@ impl From<Name> for Path {\n fn expand_use_tree(\n     prefix: Option<Path>,\n     tree: ast::UseTree,\n-    macro_crate: &impl Fn() -> Option<CrateId>,\n-    cb: &mut impl FnMut(Path, &ast::UseTree, bool, Option<Name>),\n+    hygiene: &Hygiene,\n+    cb: &mut dyn FnMut(Path, &ast::UseTree, bool, Option<Name>),\n ) {\n     if let Some(use_tree_list) = tree.use_tree_list() {\n         let prefix = match tree.path() {\n             // E.g. use something::{{{inner}}};\n             None => prefix,\n             // E.g. `use something::{inner}` (prefix is `None`, path is `something`)\n             // or `use something::{path::{inner::{innerer}}}` (prefix is `something::path`, path is `inner`)\n-            Some(path) => match convert_path(prefix, path, macro_crate) {\n+            Some(path) => match convert_path(prefix, path, hygiene) {\n                 Some(it) => Some(it),\n                 None => return, // FIXME: report errors somewhere\n             },\n         };\n         for child_tree in use_tree_list.use_trees() {\n-            expand_use_tree(prefix.clone(), child_tree, macro_crate, cb);\n+            expand_use_tree(prefix.clone(), child_tree, hygiene, cb);\n         }\n     } else {\n         let alias = tree.alias().and_then(|a| a.name()).map(|a| a.as_name());\n@@ -326,7 +323,7 @@ fn expand_use_tree(\n                     }\n                 }\n             }\n-            if let Some(path) = convert_path(prefix, ast_path, macro_crate) {\n+            if let Some(path) = convert_path(prefix, ast_path, hygiene) {\n                 let is_glob = tree.has_star();\n                 cb(path, &tree, is_glob, alias)\n             }\n@@ -336,37 +333,36 @@ fn expand_use_tree(\n     }\n }\n \n-fn convert_path(\n-    prefix: Option<Path>,\n-    path: ast::Path,\n-    macro_crate: &impl Fn() -> Option<CrateId>,\n-) -> Option<Path> {\n+fn convert_path(prefix: Option<Path>, path: ast::Path, hygiene: &Hygiene) -> Option<Path> {\n     let prefix = if let Some(qual) = path.qualifier() {\n-        Some(convert_path(prefix, qual, macro_crate)?)\n+        Some(convert_path(prefix, qual, hygiene)?)\n     } else {\n         prefix\n     };\n \n     let segment = path.segment()?;\n     let res = match segment.kind()? {\n-        ast::PathSegmentKind::Name(name) => {\n-            if name.text() == \"$crate\" {\n-                if let Some(krate) = macro_crate() {\n+        ast::PathSegmentKind::Name(name_ref) => {\n+            match hygiene.name_ref_to_name(name_ref) {\n+                Either::A(name) => {\n+                    // no type args in use\n+                    let mut res = prefix.unwrap_or_else(|| Path {\n+                        kind: PathKind::Plain,\n+                        segments: Vec::with_capacity(1),\n+                    });\n+                    res.segments.push(PathSegment {\n+                        name,\n+                        args_and_bindings: None, // no type args in use\n+                    });\n+                    res\n+                }\n+                Either::B(crate_id) => {\n                     return Some(Path::from_simple_segments(\n-                        PathKind::DollarCrate(krate),\n+                        PathKind::DollarCrate(crate_id),\n                         iter::empty(),\n-                    ));\n+                    ))\n                 }\n             }\n-\n-            // no type args in use\n-            let mut res = prefix\n-                .unwrap_or_else(|| Path { kind: PathKind::Plain, segments: Vec::with_capacity(1) });\n-            res.segments.push(PathSegment {\n-                name: name.as_name(),\n-                args_and_bindings: None, // no type args in use\n-            });\n-            res\n         }\n         ast::PathSegmentKind::CrateKw => {\n             if prefix.is_some() {\n@@ -395,8 +391,9 @@ fn convert_path(\n }\n \n pub mod known {\n+    use hir_expand::name;\n+\n     use super::{Path, PathKind};\n-    use crate::name;\n \n     pub fn std_iter_into_iterator() -> Path {\n         Path::from_simple_segments("}, {"sha": "83583ef8bd3ca81e587a106e6bb60053f1deb3e9", "filename": "crates/ra_hir_expand/src/either.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d929f9c49bceb3b7c32ea45c5e55c42f168bbf34/crates%2Fra_hir_expand%2Fsrc%2Feither.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d929f9c49bceb3b7c32ea45c5e55c42f168bbf34/crates%2Fra_hir_expand%2Fsrc%2Feither.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_expand%2Fsrc%2Feither.rs?ref=d929f9c49bceb3b7c32ea45c5e55c42f168bbf34", "previous_filename": "crates/ra_hir_def/src/either.rs"}, {"sha": "77428ec99049c221df4fec8661d96551ff9ca31c", "filename": "crates/ra_hir_expand/src/hygiene.rs", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/d929f9c49bceb3b7c32ea45c5e55c42f168bbf34/crates%2Fra_hir_expand%2Fsrc%2Fhygiene.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d929f9c49bceb3b7c32ea45c5e55c42f168bbf34/crates%2Fra_hir_expand%2Fsrc%2Fhygiene.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_expand%2Fsrc%2Fhygiene.rs?ref=d929f9c49bceb3b7c32ea45c5e55c42f168bbf34", "patch": "@@ -0,0 +1,46 @@\n+//! This modules handles hygiene information.\n+//!\n+//! Specifically, `ast` + `Hygiene` allows you to create a `Name`. Note that, at\n+//! this moment, this is horribly incomplete and handles only `$crate`.\n+use ra_db::CrateId;\n+use ra_syntax::ast;\n+\n+use crate::{\n+    db::AstDatabase,\n+    either::Either,\n+    name::{AsName, Name},\n+    HirFileId, HirFileIdRepr,\n+};\n+\n+#[derive(Debug)]\n+pub struct Hygiene {\n+    // This is what `$crate` expands to\n+    def_crate: Option<CrateId>,\n+}\n+\n+impl Hygiene {\n+    pub fn new(db: &impl AstDatabase, file_id: HirFileId) -> Hygiene {\n+        let def_crate = match file_id.0 {\n+            HirFileIdRepr::FileId(_) => None,\n+            HirFileIdRepr::MacroFile(macro_file) => {\n+                let loc = db.lookup_intern_macro(macro_file.macro_call_id);\n+                Some(loc.def.krate)\n+            }\n+        };\n+        Hygiene { def_crate }\n+    }\n+\n+    pub fn new_unhygienic() -> Hygiene {\n+        Hygiene { def_crate: None }\n+    }\n+\n+    // FIXME: this should just return name\n+    pub fn name_ref_to_name(&self, name_ref: ast::NameRef) -> Either<Name, CrateId> {\n+        if let Some(def_crate) = self.def_crate {\n+            if name_ref.text() == \"$crate\" {\n+                return Either::B(def_crate);\n+            }\n+        }\n+        Either::A(name_ref.as_name())\n+    }\n+}"}, {"sha": "5a0e5a19c5335c31f990bcd4bd882dc59a39af00", "filename": "crates/ra_hir_expand/src/lib.rs", "status": "modified", "additions": 3, "deletions": 11, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d929f9c49bceb3b7c32ea45c5e55c42f168bbf34/crates%2Fra_hir_expand%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d929f9c49bceb3b7c32ea45c5e55c42f168bbf34/crates%2Fra_hir_expand%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_expand%2Fsrc%2Flib.rs?ref=d929f9c49bceb3b7c32ea45c5e55c42f168bbf34", "patch": "@@ -6,6 +6,9 @@\n \n pub mod db;\n pub mod ast_id_map;\n+pub mod either;\n+pub mod name;\n+pub mod hygiene;\n \n use std::hash::{Hash, Hasher};\n \n@@ -59,17 +62,6 @@ impl HirFileId {\n             }\n         }\n     }\n-\n-    /// Get the crate which the macro lives in, if it is a macro file.\n-    pub fn macro_crate(self, db: &dyn db::AstDatabase) -> Option<CrateId> {\n-        match self.0 {\n-            HirFileIdRepr::FileId(_) => None,\n-            HirFileIdRepr::MacroFile(macro_file) => {\n-                let loc = db.lookup_intern_macro(macro_file.macro_call_id);\n-                Some(loc.def.krate)\n-            }\n-        }\n-    }\n }\n \n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]"}, {"sha": "720896ee8ebfa7f948fc0a1566c1c37b6a37bbcc", "filename": "crates/ra_hir_expand/src/name.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d929f9c49bceb3b7c32ea45c5e55c42f168bbf34/crates%2Fra_hir_expand%2Fsrc%2Fname.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d929f9c49bceb3b7c32ea45c5e55c42f168bbf34/crates%2Fra_hir_expand%2Fsrc%2Fname.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_expand%2Fsrc%2Fname.rs?ref=d929f9c49bceb3b7c32ea45c5e55c42f168bbf34", "previous_filename": "crates/ra_hir_def/src/name.rs"}]}