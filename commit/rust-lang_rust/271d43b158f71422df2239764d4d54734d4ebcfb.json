{"sha": "271d43b158f71422df2239764d4d54734d4ebcfb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI3MWQ0M2IxNThmNzE0MjJkZjIyMzk3NjRkNGQ1NDczNGQ0ZWJjZmI=", "commit": {"author": {"name": "TyPR124", "email": "t.ruckinger@gmail.com", "date": "2020-03-28T23:23:49Z"}, "committer": {"name": "TyPR124", "email": "t.ruckinger@gmail.com", "date": "2020-03-28T23:23:49Z"}, "message": "add tracking issue", "tree": {"sha": "972391f6a2818e541372c89314219976255b0ef6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/972391f6a2818e541372c89314219976255b0ef6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/271d43b158f71422df2239764d4d54734d4ebcfb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/271d43b158f71422df2239764d4d54734d4ebcfb", "html_url": "https://github.com/rust-lang/rust/commit/271d43b158f71422df2239764d4d54734d4ebcfb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/271d43b158f71422df2239764d4d54734d4ebcfb/comments", "author": {"login": "TyPR124", "id": 29851190, "node_id": "MDQ6VXNlcjI5ODUxMTkw", "avatar_url": "https://avatars.githubusercontent.com/u/29851190?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TyPR124", "html_url": "https://github.com/TyPR124", "followers_url": "https://api.github.com/users/TyPR124/followers", "following_url": "https://api.github.com/users/TyPR124/following{/other_user}", "gists_url": "https://api.github.com/users/TyPR124/gists{/gist_id}", "starred_url": "https://api.github.com/users/TyPR124/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TyPR124/subscriptions", "organizations_url": "https://api.github.com/users/TyPR124/orgs", "repos_url": "https://api.github.com/users/TyPR124/repos", "events_url": "https://api.github.com/users/TyPR124/events{/privacy}", "received_events_url": "https://api.github.com/users/TyPR124/received_events", "type": "User", "site_admin": false}, "committer": {"login": "TyPR124", "id": 29851190, "node_id": "MDQ6VXNlcjI5ODUxMTkw", "avatar_url": "https://avatars.githubusercontent.com/u/29851190?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TyPR124", "html_url": "https://github.com/TyPR124", "followers_url": "https://api.github.com/users/TyPR124/followers", "following_url": "https://api.github.com/users/TyPR124/following{/other_user}", "gists_url": "https://api.github.com/users/TyPR124/gists{/gist_id}", "starred_url": "https://api.github.com/users/TyPR124/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TyPR124/subscriptions", "organizations_url": "https://api.github.com/users/TyPR124/orgs", "repos_url": "https://api.github.com/users/TyPR124/repos", "events_url": "https://api.github.com/users/TyPR124/events{/privacy}", "received_events_url": "https://api.github.com/users/TyPR124/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ca4b40348e57c20d034b18395d9be25215e68643", "url": "https://api.github.com/repos/rust-lang/rust/commits/ca4b40348e57c20d034b18395d9be25215e68643", "html_url": "https://github.com/rust-lang/rust/commit/ca4b40348e57c20d034b18395d9be25215e68643"}], "stats": {"total": 12, "additions": 6, "deletions": 6}, "files": [{"sha": "5e686946f8e9a609bbda671c303e45d5b0af8ed2", "filename": "src/libstd/ffi/os_str.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/271d43b158f71422df2239764d4d54734d4ebcfb/src%2Flibstd%2Fffi%2Fos_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/271d43b158f71422df2239764d4d54734d4ebcfb/src%2Flibstd%2Fffi%2Fos_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fffi%2Fos_str.rs?ref=271d43b158f71422df2239764d4d54734d4ebcfb", "patch": "@@ -721,7 +721,7 @@ impl OsStr {\n     ///\n     /// assert_eq!(\"gr\u00dc\u00dfe, j\u00dcrgen \u2764\", s);\n     /// ```\n-    #[unstable(feature = \"osstring_ascii\", issue = \"none\")]\n+    #[unstable(feature = \"osstring_ascii\", issue = \"70516\")]\n     pub fn make_ascii_lowercase(&mut self) {\n         self.inner.make_ascii_lowercase()\n     }\n@@ -748,7 +748,7 @@ impl OsStr {\n     ///\n     /// assert_eq!(\"GR\u00fc\u00dfE, J\u00fcRGEN \u2764\", s);\n     /// ```\n-    #[unstable(feature = \"osstring_ascii\", issue = \"none\")]\n+    #[unstable(feature = \"osstring_ascii\", issue = \"70516\")]\n     pub fn make_ascii_uppercase(&mut self) {\n         self.inner.make_ascii_uppercase()\n     }\n@@ -772,7 +772,7 @@ impl OsStr {\n     ///\n     /// assert_eq!(\"gr\u00fc\u00dfe, j\u00fcrgen \u2764\", s.to_ascii_lowercase());\n     /// ```\n-    #[unstable(feature = \"osstring_ascii\", issue = \"none\")]\n+    #[unstable(feature = \"osstring_ascii\", issue = \"70516\")]\n     pub fn to_ascii_lowercase(&self) -> OsString {\n         OsString::from_inner(self.inner.to_ascii_lowercase())\n     }\n@@ -796,7 +796,7 @@ impl OsStr {\n     ///\n     /// assert_eq!(\"GR\u00fc\u00dfE, J\u00fcRGEN \u2764\", s.to_ascii_uppercase());\n     /// ```\n-    #[unstable(feature = \"osstring_ascii\", issue = \"none\")]\n+    #[unstable(feature = \"osstring_ascii\", issue = \"70516\")]\n     pub fn to_ascii_uppercase(&self) -> OsString {\n         OsString::from_inner(self.inner.to_ascii_uppercase())\n     }\n@@ -815,7 +815,7 @@ impl OsStr {\n     /// assert!(ascii.is_ascii());\n     /// assert!(!non_ascii.is_ascii());\n     /// ```\n-    #[unstable(feature = \"osstring_ascii\", issue = \"none\")]\n+    #[unstable(feature = \"osstring_ascii\", issue = \"70516\")]\n     pub fn is_ascii(&self) -> bool {\n         self.inner.is_ascii()\n     }\n@@ -835,7 +835,7 @@ impl OsStr {\n     /// assert!(OsString::from(\"Ferr\u00f6s\").eq_ignore_ascii_case(\"FERR\u00f6S\"));\n     /// assert!(!OsString::from(\"Ferr\u00f6s\").eq_ignore_ascii_case(\"FERR\u00d6S\"));\n     /// ```\n-    #[unstable(feature = \"osstring_ascii\", issue = \"none\")]\n+    #[unstable(feature = \"osstring_ascii\", issue = \"70516\")]\n     pub fn eq_ignore_ascii_case<S: ?Sized + AsRef<OsStr>>(&self, other: &S) -> bool {\n         self.inner.eq_ignore_ascii_case(&other.as_ref().inner)\n     }"}]}