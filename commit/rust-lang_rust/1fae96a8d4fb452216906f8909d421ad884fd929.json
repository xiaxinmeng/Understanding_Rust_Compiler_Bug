{"sha": "1fae96a8d4fb452216906f8909d421ad884fd929", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFmYWU5NmE4ZDRmYjQ1MjIxNjkwNmY4OTA5ZDQyMWFkODg0ZmQ5Mjk=", "commit": {"author": {"name": "Jess Balint", "email": "jbalint@gmail.com", "date": "2020-05-22T13:51:37Z"}, "committer": {"name": "Jess Balint", "email": "jbalint@gmail.com", "date": "2020-05-22T13:51:37Z"}, "message": "handle the case of conflicting lifetime param name\n\n- and clean/format code", "tree": {"sha": "231fa5dbe7057fa39f6c84e130047d70a2bc3d26", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/231fa5dbe7057fa39f6c84e130047d70a2bc3d26"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1fae96a8d4fb452216906f8909d421ad884fd929", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1fae96a8d4fb452216906f8909d421ad884fd929", "html_url": "https://github.com/rust-lang/rust/commit/1fae96a8d4fb452216906f8909d421ad884fd929", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1fae96a8d4fb452216906f8909d421ad884fd929/comments", "author": {"login": "jbalint", "id": 99260, "node_id": "MDQ6VXNlcjk5MjYw", "avatar_url": "https://avatars.githubusercontent.com/u/99260?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbalint", "html_url": "https://github.com/jbalint", "followers_url": "https://api.github.com/users/jbalint/followers", "following_url": "https://api.github.com/users/jbalint/following{/other_user}", "gists_url": "https://api.github.com/users/jbalint/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbalint/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbalint/subscriptions", "organizations_url": "https://api.github.com/users/jbalint/orgs", "repos_url": "https://api.github.com/users/jbalint/repos", "events_url": "https://api.github.com/users/jbalint/events{/privacy}", "received_events_url": "https://api.github.com/users/jbalint/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jbalint", "id": 99260, "node_id": "MDQ6VXNlcjk5MjYw", "avatar_url": "https://avatars.githubusercontent.com/u/99260?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbalint", "html_url": "https://github.com/jbalint", "followers_url": "https://api.github.com/users/jbalint/followers", "following_url": "https://api.github.com/users/jbalint/following{/other_user}", "gists_url": "https://api.github.com/users/jbalint/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbalint/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbalint/subscriptions", "organizations_url": "https://api.github.com/users/jbalint/orgs", "repos_url": "https://api.github.com/users/jbalint/repos", "events_url": "https://api.github.com/users/jbalint/events{/privacy}", "received_events_url": "https://api.github.com/users/jbalint/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2ab79c6f4d972796d3fd9f4b7fae3342a551f5e8", "url": "https://api.github.com/repos/rust-lang/rust/commits/2ab79c6f4d972796d3fd9f4b7fae3342a551f5e8", "html_url": "https://github.com/rust-lang/rust/commit/2ab79c6f4d972796d3fd9f4b7fae3342a551f5e8"}], "stats": {"total": 43, "additions": 36, "deletions": 7}, "files": [{"sha": "8d8f7833f265e497b92e764960d8451c9bc21e42", "filename": "crates/ra_assists/src/handlers/change_lifetime_anon_to_named.rs", "status": "modified", "additions": 36, "deletions": 7, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/1fae96a8d4fb452216906f8909d421ad884fd929/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fchange_lifetime_anon_to_named.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1fae96a8d4fb452216906f8909d421ad884fd929/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fchange_lifetime_anon_to_named.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fchange_lifetime_anon_to_named.rs?ref=1fae96a8d4fb452216906f8909d421ad884fd929", "patch": "@@ -1,5 +1,6 @@\n use crate::{AssistContext, AssistId, Assists};\n-use ra_syntax::{ast, ast::{TypeParamsOwner}, AstNode, SyntaxKind};\n+use ra_syntax::{ast, ast::TypeParamsOwner, AstNode, SyntaxKind};\n+use std::collections::HashSet;\n \n /// Assist: change_lifetime_anon_to_named\n ///\n@@ -24,7 +25,7 @@ use ra_syntax::{ast, ast::{TypeParamsOwner}, AstNode, SyntaxKind};\n ///     }\n /// }\n /// ```\n-// TODO : How can we handle renaming any one of multiple anonymous lifetimes?\n+// FIXME: How can we handle renaming any one of multiple anonymous lifetimes?\n pub(crate) fn change_lifetime_anon_to_named(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n     let lifetime_token = ctx.find_token_at_offset(SyntaxKind::LIFETIME)?;\n     let lifetime_arg = ast::LifetimeArg::cast(lifetime_token.parent())?;\n@@ -43,6 +44,22 @@ pub(crate) fn change_lifetime_anon_to_named(acc: &mut Assists, ctx: &AssistConte\n             if impl_kw.kind() != SyntaxKind::IMPL_KW {\n                 return None;\n             }\n+            let new_lifetime_param = match impl_def.type_param_list() {\n+                Some(type_params) => {\n+                    let used_lifetime_params: HashSet<_> = type_params\n+                        .lifetime_params()\n+                        .map(|p| {\n+                            let mut param_name = p.syntax().text().to_string();\n+                            param_name.remove(0);\n+                            param_name\n+                        })\n+                        .collect();\n+                    \"abcdefghijklmnopqrstuvwxyz\"\n+                        .chars()\n+                        .find(|c| !used_lifetime_params.contains(&c.to_string()))?\n+                }\n+                None => 'a',\n+            };\n             acc.add(\n                 AssistId(\"change_lifetime_anon_to_named\"),\n                 \"Give anonymous lifetime a name\",\n@@ -52,17 +69,20 @@ pub(crate) fn change_lifetime_anon_to_named(acc: &mut Assists, ctx: &AssistConte\n                         Some(type_params) => {\n                             builder.insert(\n                                 (u32::from(type_params.syntax().text_range().end()) - 1).into(),\n-                                \", 'a\",\n+                                format!(\", '{}\", new_lifetime_param),\n                             );\n-                        },\n+                        }\n                         None => {\n                             builder.insert(\n                                 impl_kw.text_range().end(),\n-                                \"<'a>\",\n+                                format!(\"<'{}>\", new_lifetime_param),\n                             );\n-                        },\n+                        }\n                     }\n-                    builder.replace(lifetime_arg.syntax().text_range(), \"'a\");\n+                    builder.replace(\n+                        lifetime_arg.syntax().text_range(),\n+                        format!(\"'{}\", new_lifetime_param),\n+                    );\n                 },\n             )\n         }\n@@ -120,4 +140,13 @@ mod tests {\n             r#\"impl<T, 'a> Cursor<T, 'a>\"#,\n         );\n     }\n+\n+    #[test]\n+    fn test_with_existing_lifetime_name_conflict() {\n+        check_assist(\n+            change_lifetime_anon_to_named,\n+            r#\"impl<'a, 'b> Cursor<'a, 'b, '_<|>>\"#,\n+            r#\"impl<'a, 'b, 'c> Cursor<'a, 'b, 'c>\"#,\n+        );\n+    }\n }"}]}