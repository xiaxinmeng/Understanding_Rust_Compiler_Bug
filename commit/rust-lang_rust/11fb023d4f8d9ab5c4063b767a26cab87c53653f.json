{"sha": "11fb023d4f8d9ab5c4063b767a26cab87c53653f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjExZmIwMjNkNGY4ZDlhYjVjNDA2M2I3NjdhMjZjYWI4N2M1MzY1M2Y=", "commit": {"author": {"name": "Georg Semmler", "email": "georg_semmler_05@web.de", "date": "2018-12-04T09:23:13Z"}, "committer": {"name": "Georg Semmler", "email": "georg_semmler_05@web.de", "date": "2018-12-04T09:23:13Z"}, "message": "Allow renaming macro", "tree": {"sha": "4f28b6eeb193433994ebada14317bbc6efd5b72a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4f28b6eeb193433994ebada14317bbc6efd5b72a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/11fb023d4f8d9ab5c4063b767a26cab87c53653f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCgAdFiEEt/EOFp+yWvA8Dk28qHvO5SBc5IkFAlwGR4gACgkQqHvO5SBc\n5InSUggAkxZirfFdFNVpkC5t7C4Z3y26917h/N9l9PsNKQAumzjqI7H2VLxTJ8gg\nPCjBOFuuHtUtZzLBv4Ze6YjaEJOYPRXGdhwGRieD3cTgJOxU1Z6aQ9wAJmj2GWlr\n6No7malRdDYyFERwgSZnB4uDykOHmfI9vNHY/88WGmEhQ1uYDv2Y6EDYixkWAsxq\nLmG6hAjNSuCqwX4VSWjDIMg/dCc4dz4/7IOEw51ciVJAY8AyTpIqlBbFGkl7lo8O\na5RIPk0lmdzZIRVnnxvbJnbNU4VvJulGe+X1AzlesqXCawJHe9uwqBS9icDUGKem\nShG88xNLeyF3KuNtLS73ipBmEdA+Ng==\n=MbtZ\n-----END PGP SIGNATURE-----", "payload": "tree 4f28b6eeb193433994ebada14317bbc6efd5b72a\nparent 230f5d5676ffad99e64f73128dc27f629aa8e921\nauthor Georg Semmler <georg_semmler_05@web.de> 1543915393 +0100\ncommitter Georg Semmler <georg_semmler_05@web.de> 1543915393 +0100\n\nAllow renaming macro\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/11fb023d4f8d9ab5c4063b767a26cab87c53653f", "html_url": "https://github.com/rust-lang/rust/commit/11fb023d4f8d9ab5c4063b767a26cab87c53653f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/11fb023d4f8d9ab5c4063b767a26cab87c53653f/comments", "author": {"login": "weiznich", "id": 1674512, "node_id": "MDQ6VXNlcjE2NzQ1MTI=", "avatar_url": "https://avatars.githubusercontent.com/u/1674512?v=4", "gravatar_id": "", "url": "https://api.github.com/users/weiznich", "html_url": "https://github.com/weiznich", "followers_url": "https://api.github.com/users/weiznich/followers", "following_url": "https://api.github.com/users/weiznich/following{/other_user}", "gists_url": "https://api.github.com/users/weiznich/gists{/gist_id}", "starred_url": "https://api.github.com/users/weiznich/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/weiznich/subscriptions", "organizations_url": "https://api.github.com/users/weiznich/orgs", "repos_url": "https://api.github.com/users/weiznich/repos", "events_url": "https://api.github.com/users/weiznich/events{/privacy}", "received_events_url": "https://api.github.com/users/weiznich/received_events", "type": "User", "site_admin": false}, "committer": {"login": "weiznich", "id": 1674512, "node_id": "MDQ6VXNlcjE2NzQ1MTI=", "avatar_url": "https://avatars.githubusercontent.com/u/1674512?v=4", "gravatar_id": "", "url": "https://api.github.com/users/weiznich", "html_url": "https://github.com/weiznich", "followers_url": "https://api.github.com/users/weiznich/followers", "following_url": "https://api.github.com/users/weiznich/following{/other_user}", "gists_url": "https://api.github.com/users/weiznich/gists{/gist_id}", "starred_url": "https://api.github.com/users/weiznich/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/weiznich/subscriptions", "organizations_url": "https://api.github.com/users/weiznich/orgs", "repos_url": "https://api.github.com/users/weiznich/repos", "events_url": "https://api.github.com/users/weiznich/events{/privacy}", "received_events_url": "https://api.github.com/users/weiznich/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "230f5d5676ffad99e64f73128dc27f629aa8e921", "url": "https://api.github.com/repos/rust-lang/rust/commits/230f5d5676ffad99e64f73128dc27f629aa8e921", "html_url": "https://github.com/rust-lang/rust/commit/230f5d5676ffad99e64f73128dc27f629aa8e921"}], "stats": {"total": 12, "additions": 8, "deletions": 4}, "files": [{"sha": "31adb2e0369c9f539c72465dd5ec8957649c803f", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/11fb023d4f8d9ab5c4063b767a26cab87c53653f/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11fb023d4f8d9ab5c4063b767a26cab87c53653f/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=11fb023d4f8d9ab5c4063b767a26cab87c53653f", "patch": "@@ -100,7 +100,7 @@ impl<'a, 'tcx, 'rcx, 'cstore> RustdocVisitor<'a, 'tcx, 'rcx, 'cstore> {\n                                               None);\n         // attach the crate's exported macros to the top-level module:\n         let macro_exports: Vec<_> =\n-            krate.exported_macros.iter().map(|def| self.visit_local_macro(def)).collect();\n+            krate.exported_macros.iter().map(|def| self.visit_local_macro(def, None)).collect();\n         self.module.macros.extend(macro_exports);\n         self.module.is_crate = true;\n \n@@ -377,7 +377,7 @@ impl<'a, 'tcx, 'rcx, 'cstore> RustdocVisitor<'a, 'tcx, 'rcx, 'cstore> {\n                 true\n             }\n             Node::MacroDef(def) if !glob => {\n-                om.macros.push(self.visit_local_macro(def));\n+                om.macros.push(self.visit_local_macro(def, renamed));\n                 true\n             }\n             _ => false,\n@@ -597,7 +597,11 @@ impl<'a, 'tcx, 'rcx, 'cstore> RustdocVisitor<'a, 'tcx, 'rcx, 'cstore> {\n     }\n \n     // convert each exported_macro into a doc item\n-    fn visit_local_macro(&self, def: &hir::MacroDef) -> Macro {\n+    fn visit_local_macro(\n+        &self,\n+        def: &hir::MacroDef,\n+        renamed: Option<ast::Name>\n+    ) -> Macro {\n         debug!(\"visit_local_macro: {}\", def.name);\n         let tts = def.body.trees().collect::<Vec<_>>();\n         // Extract the spans of all matchers. They represent the \"interface\" of the macro.\n@@ -606,7 +610,7 @@ impl<'a, 'tcx, 'rcx, 'cstore> RustdocVisitor<'a, 'tcx, 'rcx, 'cstore> {\n         Macro {\n             def_id: self.cx.tcx.hir.local_def_id(def.id),\n             attrs: def.attrs.clone(),\n-            name: def.name,\n+            name: renamed.unwrap_or(def.name),\n             whence: def.span,\n             matchers,\n             stab: self.stability(def.id),"}]}