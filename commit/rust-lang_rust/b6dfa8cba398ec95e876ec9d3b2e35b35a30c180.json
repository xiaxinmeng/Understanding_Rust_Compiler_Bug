{"sha": "b6dfa8cba398ec95e876ec9d3b2e35b35a30c180", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI2ZGZhOGNiYTM5OGVjOTVlODc2ZWM5ZDNiMmUzNWIzNWEzMGMxODA=", "commit": {"author": {"name": "David Wood", "email": "david@davidtw.co", "date": "2018-07-21T14:03:47Z"}, "committer": {"name": "David Wood", "email": "david@davidtw.co", "date": "2018-07-22T11:53:53Z"}, "message": "Modified how constraint classification happens to upvars, can now handle function call case.", "tree": {"sha": "02015d6c24ef316725aa61073a3693463af9f640", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/02015d6c24ef316725aa61073a3693463af9f640"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b6dfa8cba398ec95e876ec9d3b2e35b35a30c180", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEWwgxPGhT5b/6kagXAXYLT59T8VQFAltUcFEACgkQAXYLT59T\n8VQItg//fTCdsxu95D/XcsTxIS2drztlYBnHIEcMfJCZSkYlR1GN80EKjuaZT3l3\ngk9w3nguqWzA8ydc/9x+nGbGHCHx7mmqAQRT+8b2SHDG9GXY52h4vbIUrPzwXP3t\nWwKbnPqXTUWzG6uNa7mIRiKaJBoKbPIvFImd57NSqHsv5zwqb0ihTQ7hxJQnC3Sc\nmRl4sRMEJF9a9J8wc3fWPlHCa69oAC7/4sSHG+08DjT5lvsc3FzQYZO6kOdptMRT\noOZOsA2jtvWqrIGGXXpXzVx/Ho5wtHt5Z9DFjOwCxT9IqPf7XYvmjlJYTIOjaJIn\nqXx4pYpEM0toHQr1UNCuGcIAAXGfmOAdiEst9ioU1q74PpsVGoA/gD6dJI7ykalz\n7BseiCkAB7dYJPBWvHsBCzn70jnzfJa+/ZBpvl38f1Br14R36RFoPaSQi5LkdUMw\nICTR9nK87Eu0fUGE5EyzKsFA8HcIcQ1q8sEg6YVZ+HcCZhl9xgiIWpnZvrKYBkt1\nGtgg34o+mQQ/j9zUUmojTmWa9qm2bfZ+uPPpKk3dkk3qFX5m3y8gcaJALFdcIxrS\nNv2cTRh6BIHPgIaZ7rsMod+3f8oTtit5DuBRWv8dXRaKTGmWv1MlscS8BahCPmAE\n3Klai6M/jZVxzqv0iJhumAnc3+0b8xB4m4L3sXTX8K7KHaA4Gs8=\n=tTdv\n-----END PGP SIGNATURE-----", "payload": "tree 02015d6c24ef316725aa61073a3693463af9f640\nparent ce4f446aa8ad1104bc8d72a84af73dcc029de3a2\nauthor David Wood <david@davidtw.co> 1532181827 +0100\ncommitter David Wood <david@davidtw.co> 1532260433 +0100\n\nModified how constraint classification happens to upvars, can now handle function call case.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b6dfa8cba398ec95e876ec9d3b2e35b35a30c180", "html_url": "https://github.com/rust-lang/rust/commit/b6dfa8cba398ec95e876ec9d3b2e35b35a30c180", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b6dfa8cba398ec95e876ec9d3b2e35b35a30c180/comments", "author": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ce4f446aa8ad1104bc8d72a84af73dcc029de3a2", "url": "https://api.github.com/repos/rust-lang/rust/commits/ce4f446aa8ad1104bc8d72a84af73dcc029de3a2", "html_url": "https://github.com/rust-lang/rust/commit/ce4f446aa8ad1104bc8d72a84af73dcc029de3a2"}], "stats": {"total": 31, "additions": 20, "deletions": 11}, "files": [{"sha": "a1112d5961ecadc09e3b7278ef018e4bb3418e29", "filename": "src/librustc_mir/borrow_check/nll/region_infer/error_reporting/mod.rs", "status": "modified", "additions": 20, "deletions": 11, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/b6dfa8cba398ec95e876ec9d3b2e35b35a30c180/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6dfa8cba398ec95e876ec9d3b2e35b35a30c180/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fmod.rs?ref=b6dfa8cba398ec95e876ec9d3b2e35b35a30c180", "patch": "@@ -33,6 +33,7 @@ enum ConstraintCategory {\n     Assignment,\n     AssignmentToUpvar,\n     Return,\n+    CallArgumentToUpvar,\n     CallArgument,\n     Other,\n     Boring,\n@@ -45,7 +46,8 @@ impl fmt::Display for ConstraintCategory {\n             ConstraintCategory::AssignmentToUpvar => write!(f, \"assignment\"),\n             ConstraintCategory::Return => write!(f, \"return\"),\n             ConstraintCategory::Cast => write!(f, \"cast\"),\n-            ConstraintCategory::CallArgument => write!(f, \"argument\"),\n+            ConstraintCategory::CallArgument |\n+            ConstraintCategory::CallArgumentToUpvar => write!(f, \"argument\"),\n             _ => write!(f, \"free region\"),\n         }\n     }\n@@ -133,7 +135,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         &self,\n         index: ConstraintIndex,\n         mir: &Mir<'tcx>,\n-        infcx: &InferCtxt<'_, '_, 'tcx>,\n+        _infcx: &InferCtxt<'_, '_, 'tcx>,\n     ) -> (ConstraintCategory, Span) {\n         let constraint = self.constraints[index];\n         debug!(\"classify_constraint: constraint={:?}\", constraint);\n@@ -163,7 +165,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n             match statement.kind {\n                 StatementKind::Assign(ref place, ref rvalue) => {\n                     debug!(\"classify_constraint: place={:?} rvalue={:?}\", place, rvalue);\n-                    let initial_category = if *place == Place::Local(mir::RETURN_PLACE) {\n+                    if *place == Place::Local(mir::RETURN_PLACE) {\n                         ConstraintCategory::Return\n                     } else {\n                         match rvalue {\n@@ -172,13 +174,6 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n                             Rvalue::Aggregate(..) => ConstraintCategory::Assignment,\n                             _ => ConstraintCategory::Other,\n                         }\n-                    };\n-\n-                    if initial_category == ConstraintCategory::Assignment\n-                            && place.is_upvar_field_projection(mir, &infcx.tcx).is_some() {\n-                        ConstraintCategory::AssignmentToUpvar\n-                    } else {\n-                        initial_category\n                     }\n                 }\n                 _ => ConstraintCategory::Other,\n@@ -236,8 +231,22 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         // Get a span\n         let (category, span) = categorized_path.first().unwrap();\n \n+        let category = match (\n+            category,\n+            self.universal_regions.is_local_free_region(fr),\n+            self.universal_regions.is_local_free_region(outlived_fr),\n+        ) {\n+            (ConstraintCategory::Assignment, true, false) =>\n+                &ConstraintCategory::AssignmentToUpvar,\n+            (ConstraintCategory::CallArgument, true, false) =>\n+                &ConstraintCategory::CallArgumentToUpvar,\n+            (category, _, _) => category,\n+        };\n+\n+        debug!(\"report_error: category={:?}\", category);\n         match category {\n-            ConstraintCategory::AssignmentToUpvar =>\n+            ConstraintCategory::AssignmentToUpvar |\n+            ConstraintCategory::CallArgumentToUpvar =>\n                 self.report_closure_error(mir, infcx, fr, outlived_fr, span),\n             _ =>\n                 self.report_general_error(mir, infcx, mir_def_id, fr, outlived_fr, category, span),"}]}