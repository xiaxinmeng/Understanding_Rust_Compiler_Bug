{"sha": "bfc6c90115a84157451b0738f5f56fd8275a9aaa", "node_id": "C_kwDOAAsO6NoAKGJmYzZjOTAxMTVhODQxNTc0NTFiMDczOGY1ZjU2ZmQ4Mjc1YTlhYWE", "commit": {"author": {"name": "Yuki Okushi", "email": "jtitor@2k36.org", "date": "2022-06-15T22:24:43Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-06-15T22:24:43Z"}, "message": "Rollup merge of #98119 - EdwinRy:path-parenthesized-type-error, r=estebank\n\nRefactor path segment parameter error\n\nThis PR attempts to rewrite the error handling for an unexpected parenthesised type parameters to:\n- Use provided data instead of re-parsing the whole span\n- Add a multipart suggestion to reflect on the changes with an underline\n- Remove the unnecessary \"if\" nesting", "tree": {"sha": "c2354dbb0c69a5d3c2647c3db2f0a3e5bb6ed24f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c2354dbb0c69a5d3c2647c3db2f0a3e5bb6ed24f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bfc6c90115a84157451b0738f5f56fd8275a9aaa", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiqlwsCRBK7hj4Ov3rIwAApYQIADcBnfySv5+594hy20DsK4zT\n2cowz8zYn8jOPDnx1QOzjcSiWuhp+jcZTwau2JOdi3zqBPRTbbAjOSt7pghmdXYU\nre1o47phtv6jl17/XuGLPrHJM61P79ml9vg3KPgGHfY172oNOpkyfKe5coLbg01X\nTk1K8RbwkXPPaDVygLf+rD5Pm5Ttj7MloD/Ie/owO6I8yYwsaVZ48XRqoOTpO1EG\nNNRw8RKGuianiqwrnUSJYhJy3y5CZn24HNAMjOyVXs7cR7rZIZml2lwJRH4diGBp\ngZ7iy5vCkld6IKhyrebJJyLhhBUoobaPnMMtse98rrzn3sKvLEJq3w10Jh6isuM=\n=b7Q5\n-----END PGP SIGNATURE-----\n", "payload": "tree c2354dbb0c69a5d3c2647c3db2f0a3e5bb6ed24f\nparent ad61ae59bf3a3d64fc724bb4d6b32eba33b01671\nparent 71a98e1a4ec98d263984e78f0e54ea0dfa0c7846\nauthor Yuki Okushi <jtitor@2k36.org> 1655331883 +0900\ncommitter GitHub <noreply@github.com> 1655331883 +0900\n\nRollup merge of #98119 - EdwinRy:path-parenthesized-type-error, r=estebank\n\nRefactor path segment parameter error\n\nThis PR attempts to rewrite the error handling for an unexpected parenthesised type parameters to:\n- Use provided data instead of re-parsing the whole span\n- Add a multipart suggestion to reflect on the changes with an underline\n- Remove the unnecessary \"if\" nesting\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bfc6c90115a84157451b0738f5f56fd8275a9aaa", "html_url": "https://github.com/rust-lang/rust/commit/bfc6c90115a84157451b0738f5f56fd8275a9aaa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bfc6c90115a84157451b0738f5f56fd8275a9aaa/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ad61ae59bf3a3d64fc724bb4d6b32eba33b01671", "url": "https://api.github.com/repos/rust-lang/rust/commits/ad61ae59bf3a3d64fc724bb4d6b32eba33b01671", "html_url": "https://github.com/rust-lang/rust/commit/ad61ae59bf3a3d64fc724bb4d6b32eba33b01671"}, {"sha": "71a98e1a4ec98d263984e78f0e54ea0dfa0c7846", "url": "https://api.github.com/repos/rust-lang/rust/commits/71a98e1a4ec98d263984e78f0e54ea0dfa0c7846", "html_url": "https://github.com/rust-lang/rust/commit/71a98e1a4ec98d263984e78f0e54ea0dfa0c7846"}], "stats": {"total": 100, "additions": 61, "deletions": 39}, "files": [{"sha": "5d56b0ffe8de9e63e86f70d29203dc60e7277284", "filename": "compiler/rustc_ast_lowering/src/path.rs", "status": "modified", "additions": 26, "deletions": 19, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/bfc6c90115a84157451b0738f5f56fd8275a9aaa/compiler%2Frustc_ast_lowering%2Fsrc%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfc6c90115a84157451b0738f5f56fd8275a9aaa/compiler%2Frustc_ast_lowering%2Fsrc%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fpath.rs?ref=bfc6c90115a84157451b0738f5f56fd8275a9aaa", "patch": "@@ -196,25 +196,32 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                     ParenthesizedGenericArgs::Err => {\n                         let mut err = struct_span_err!(self.sess, data.span, E0214, \"{}\", msg);\n                         err.span_label(data.span, \"only `Fn` traits may use parentheses\");\n-                        if let Ok(snippet) = self.sess.source_map().span_to_snippet(data.span) {\n-                            // Do not suggest going from `Trait()` to `Trait<>`\n-                            if !data.inputs.is_empty() {\n-                                // Suggest replacing `(` and `)` with `<` and `>`\n-                                // The snippet may be missing the closing `)`, skip that case\n-                                if snippet.ends_with(')') {\n-                                    if let Some(split) = snippet.find('(') {\n-                                        let trait_name = &snippet[0..split];\n-                                        let args = &snippet[split + 1..snippet.len() - 1];\n-                                        err.span_suggestion(\n-                                            data.span,\n-                                            \"use angle brackets instead\",\n-                                            format!(\"{}<{}>\", trait_name, args),\n-                                            Applicability::MaybeIncorrect,\n-                                        );\n-                                    }\n-                                }\n-                            }\n-                        };\n+                        // Suggest replacing parentheses with angle brackets `Trait(params...)` to `Trait<params...>`\n+                        if !data.inputs.is_empty() {\n+                            // Start of the span to the 1st character of 1st argument\n+                            let open_param = data.inputs_span.shrink_to_lo().to(data\n+                                .inputs\n+                                .first()\n+                                .unwrap()\n+                                .span\n+                                .shrink_to_lo());\n+                            // Last character position of last argument to the end of the span\n+                            let close_param = data\n+                                .inputs\n+                                .last()\n+                                .unwrap()\n+                                .span\n+                                .shrink_to_hi()\n+                                .to(data.inputs_span.shrink_to_hi());\n+                            err.multipart_suggestion(\n+                                &format!(\"use angle brackets instead\",),\n+                                vec![\n+                                    (open_param, String::from(\"<\")),\n+                                    (close_param, String::from(\">\")),\n+                                ],\n+                                Applicability::MaybeIncorrect,\n+                            );\n+                        }\n                         err.emit();\n                         (\n                             self.lower_angle_bracketed_parameter_data("}, {"sha": "e0179aac27fb39f6482f5126387a9524b5fc2359", "filename": "src/test/ui/error-codes/E0214.stderr", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bfc6c90115a84157451b0738f5f56fd8275a9aaa/src%2Ftest%2Fui%2Ferror-codes%2FE0214.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bfc6c90115a84157451b0738f5f56fd8275a9aaa/src%2Ftest%2Fui%2Ferror-codes%2FE0214.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0214.stderr?ref=bfc6c90115a84157451b0738f5f56fd8275a9aaa", "patch": "@@ -2,10 +2,12 @@ error[E0214]: parenthesized type parameters may only be used with a `Fn` trait\n   --> $DIR/E0214.rs:2:12\n    |\n LL |     let v: Vec(&str) = vec![\"foo\"];\n-   |            ^^^^^^^^^\n-   |            |\n-   |            only `Fn` traits may use parentheses\n-   |            help: use angle brackets instead: `Vec<&str>`\n+   |            ^^^^^^^^^ only `Fn` traits may use parentheses\n+   |\n+help: use angle brackets instead\n+   |\n+LL |     let v: Vec<&str> = vec![\"foo\"];\n+   |               ~    ~\n \n error: aborting due to previous error\n "}, {"sha": "1a91f5e04dbceb46e3831dbff8dbf5fa0bfb0d8c", "filename": "src/test/ui/issues/issue-23589.stderr", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bfc6c90115a84157451b0738f5f56fd8275a9aaa/src%2Ftest%2Fui%2Fissues%2Fissue-23589.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bfc6c90115a84157451b0738f5f56fd8275a9aaa/src%2Ftest%2Fui%2Fissues%2Fissue-23589.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-23589.stderr?ref=bfc6c90115a84157451b0738f5f56fd8275a9aaa", "patch": "@@ -2,10 +2,12 @@ error[E0214]: parenthesized type parameters may only be used with a `Fn` trait\n   --> $DIR/issue-23589.rs:2:12\n    |\n LL |     let v: Vec(&str) = vec!['1', '2'];\n-   |            ^^^^^^^^^\n-   |            |\n-   |            only `Fn` traits may use parentheses\n-   |            help: use angle brackets instead: `Vec<&str>`\n+   |            ^^^^^^^^^ only `Fn` traits may use parentheses\n+   |\n+help: use angle brackets instead\n+   |\n+LL |     let v: Vec<&str> = vec!['1', '2'];\n+   |               ~    ~\n \n error[E0308]: mismatched types\n   --> $DIR/issue-23589.rs:2:29"}, {"sha": "fe2464b3b8115e65a851fd4e53cd3fb43cf38b30", "filename": "src/test/ui/proc-macro/issue-66286.stderr", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bfc6c90115a84157451b0738f5f56fd8275a9aaa/src%2Ftest%2Fui%2Fproc-macro%2Fissue-66286.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bfc6c90115a84157451b0738f5f56fd8275a9aaa/src%2Ftest%2Fui%2Fproc-macro%2Fissue-66286.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fissue-66286.stderr?ref=bfc6c90115a84157451b0738f5f56fd8275a9aaa", "patch": "@@ -2,10 +2,12 @@ error[E0214]: parenthesized type parameters may only be used with a `Fn` trait\n   --> $DIR/issue-66286.rs:8:22\n    |\n LL | pub extern fn foo(_: Vec(u32)) -> u32 {\n-   |                      ^^^^^^^^\n-   |                      |\n-   |                      only `Fn` traits may use parentheses\n-   |                      help: use angle brackets instead: `Vec<u32>`\n+   |                      ^^^^^^^^ only `Fn` traits may use parentheses\n+   |\n+help: use angle brackets instead\n+   |\n+LL | pub extern fn foo(_: Vec<u32>) -> u32 {\n+   |                         ~   ~\n \n error: aborting due to previous error\n "}, {"sha": "2bf072ef52175eb46a2b95de658956ccbe54ee52", "filename": "src/test/ui/suggestions/let-binding-init-expr-as-ty.stderr", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bfc6c90115a84157451b0738f5f56fd8275a9aaa/src%2Ftest%2Fui%2Fsuggestions%2Flet-binding-init-expr-as-ty.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bfc6c90115a84157451b0738f5f56fd8275a9aaa/src%2Ftest%2Fui%2Fsuggestions%2Flet-binding-init-expr-as-ty.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Flet-binding-init-expr-as-ty.stderr?ref=bfc6c90115a84157451b0738f5f56fd8275a9aaa", "patch": "@@ -10,10 +10,12 @@ error[E0214]: parenthesized type parameters may only be used with a `Fn` trait\n   --> $DIR/let-binding-init-expr-as-ty.rs:2:19\n    |\n LL |     let foo: i32::from_be(num);\n-   |                   ^^^^^^^^^^^^\n-   |                   |\n-   |                   only `Fn` traits may use parentheses\n-   |                   help: use angle brackets instead: `from_be<num>`\n+   |                   ^^^^^^^^^^^^ only `Fn` traits may use parentheses\n+   |\n+help: use angle brackets instead\n+   |\n+LL |     let foo: i32::from_be<num>;\n+   |                          ~   ~\n \n error[E0223]: ambiguous associated type\n   --> $DIR/let-binding-init-expr-as-ty.rs:2:14"}, {"sha": "71c357865fed92e25dc235b2e74566723339a805", "filename": "src/test/ui/type/issue-91268.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/bfc6c90115a84157451b0738f5f56fd8275a9aaa/src%2Ftest%2Fui%2Ftype%2Fissue-91268.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bfc6c90115a84157451b0738f5f56fd8275a9aaa/src%2Ftest%2Fui%2Ftype%2Fissue-91268.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Fissue-91268.stderr?ref=bfc6c90115a84157451b0738f5f56fd8275a9aaa", "patch": "@@ -29,6 +29,11 @@ error[E0214]: parenthesized type parameters may only be used with a `Fn` trait\n    |\n LL |     0: u8(\u0163\n    |        ^^^^ only `Fn` traits may use parentheses\n+   |\n+help: use angle brackets instead\n+   |\n+LL |     0: u8<\u0163>\n+   |          ~ +\n \n error[E0109]: type arguments are not allowed on this type\n   --> $DIR/issue-91268.rs:9:11"}, {"sha": "4df404e8198fa32c07a38a1656a1a562c9038f09", "filename": "src/test/ui/unboxed-closures/unboxed-closure-sugar-used-on-struct-3.stderr", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bfc6c90115a84157451b0738f5f56fd8275a9aaa/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-used-on-struct-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bfc6c90115a84157451b0738f5f56fd8275a9aaa/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-used-on-struct-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-used-on-struct-3.stderr?ref=bfc6c90115a84157451b0738f5f56fd8275a9aaa", "patch": "@@ -2,10 +2,12 @@ error[E0214]: parenthesized type parameters may only be used with a `Fn` trait\n   --> $DIR/unboxed-closure-sugar-used-on-struct-3.rs:14:13\n    |\n LL |     let b = Bar::(isize, usize)::new(); // OK too (for the parser)\n-   |             ^^^^^^^^^^^^^^^^^^^\n-   |             |\n-   |             only `Fn` traits may use parentheses\n-   |             help: use angle brackets instead: `Bar::<isize, usize>`\n+   |             ^^^^^^^^^^^^^^^^^^^ only `Fn` traits may use parentheses\n+   |\n+help: use angle brackets instead\n+   |\n+LL |     let b = Bar::<isize, usize>::new(); // OK too (for the parser)\n+   |                  ~            ~\n \n error: aborting due to previous error\n "}]}