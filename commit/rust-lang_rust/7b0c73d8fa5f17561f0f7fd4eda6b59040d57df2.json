{"sha": "7b0c73d8fa5f17561f0f7fd4eda6b59040d57df2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdiMGM3M2Q4ZmE1ZjE3NTYxZjBmN2ZkNGVkYTZiNTkwNDBkNTdkZjI=", "commit": {"author": {"name": "Elly Jones", "email": "elly@leptoquark.net", "date": "2011-12-09T04:50:25Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-12-09T22:21:21Z"}, "message": "cargo: refactor a bit", "tree": {"sha": "541f69ed71c1dbf84d2037f3d105533f8a97cb36", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/541f69ed71c1dbf84d2037f3d105533f8a97cb36"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7b0c73d8fa5f17561f0f7fd4eda6b59040d57df2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7b0c73d8fa5f17561f0f7fd4eda6b59040d57df2", "html_url": "https://github.com/rust-lang/rust/commit/7b0c73d8fa5f17561f0f7fd4eda6b59040d57df2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7b0c73d8fa5f17561f0f7fd4eda6b59040d57df2/comments", "author": null, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7f945eeae9733dbdd51d90dc9342f9a8f41f12a7", "url": "https://api.github.com/repos/rust-lang/rust/commits/7f945eeae9733dbdd51d90dc9342f9a8f41f12a7", "html_url": "https://github.com/rust-lang/rust/commit/7f945eeae9733dbdd51d90dc9342f9a8f41f12a7"}], "stats": {"total": 64, "additions": 39, "deletions": 25}, "files": [{"sha": "f6c3cc90334c1f5e56baa914bde1fe48b28793b6", "filename": "src/cargo/cargo.rs", "status": "modified", "additions": 39, "deletions": 25, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/7b0c73d8fa5f17561f0f7fd4eda6b59040d57df2/src%2Fcargo%2Fcargo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b0c73d8fa5f17561f0f7fd4eda6b59040d57df2/src%2Fcargo%2Fcargo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcargo%2Fcargo.rs?ref=7b0c73d8fa5f17561f0f7fd4eda6b59040d57df2", "patch": "@@ -14,6 +14,14 @@ import std::str;\n import std::tempfile;\n import std::vec;\n \n+type cargo = {\n+    root: str,\n+    bindir: str,\n+    libdir: str,\n+    workdir: str,\n+    fetchdir: str\n+};\n+\n type pkg = {\n     name: str,\n     vers: str,\n@@ -109,7 +117,7 @@ fn need_dir(s: str) {\n     }\n }\n \n-fn setup_dirs() -> str {\n+fn configure() -> cargo {\n     let p = alt generic_os::getenv(\"CARGO_ROOT\") {\n         some(_p) { _p }\n         none. {\n@@ -122,18 +130,24 @@ fn setup_dirs() -> str {\n \n     log #fmt[\"p: %s\", p];\n \n-    need_dir(p);\n-    need_dir(fs::connect(p, \"fetch\"));\n-    need_dir(fs::connect(p, \"work\"));\n-    need_dir(fs::connect(p, \"lib\"));\n-    need_dir(fs::connect(p, \"bin\"));\n+    let c = {\n+        root: p,\n+        bindir: fs::connect(p, \"bin\"),\n+        libdir: fs::connect(p, \"lib\"),\n+        workdir: fs::connect(p, \"work\"),\n+        fetchdir: fs::connect(p, \"fetch\")\n+    };\n+\n+    need_dir(c.root);\n+    need_dir(c.fetchdir);\n+    need_dir(c.workdir);\n+    need_dir(c.libdir);\n+    need_dir(c.bindir);\n \n-    p\n+    c\n }\n \n-fn install_one_crate(cargo_root: str, path: str, cf: str, p: pkg) {\n-    let bindir = fs::connect(cargo_root, \"bin\");\n-    let libdir = fs::connect(cargo_root, \"lib\");\n+fn install_one_crate(c: cargo, path: str, cf: str, p: pkg) {\n     let name = fs::basename(cf);\n     let ri = str::index(name, '.' as u8);\n     if ri != -1 {\n@@ -144,19 +158,19 @@ fn install_one_crate(cargo_root: str, path: str, cf: str, p: pkg) {\n     run::run_program(\"rustc\", [cf]);\n     let new = fs::list_dir(\".\");\n     let created = vec::filter::<str>({ |n| !vec::member::<str>(n, old) }, new);\n-    for c: str in created {\n-        if str::ends_with(c, os::exec_suffix()) {\n-            log #fmt[\"  bin: %s\", c];\n+    for ct: str in created {\n+        if str::ends_with(ct, os::exec_suffix()) {\n+            log #fmt[\"  bin: %s\", ct];\n             // FIXME: need libstd fs::copy or something\n-            run::run_program(\"cp\", [c, fs::connect(bindir, c)]);\n+            run::run_program(\"cp\", [ct, c.bindir]);\n         } else {\n-            log #fmt[\"  lib: %s\", c];\n-            run::run_program(\"cp\", [c, fs::connect(libdir, c)]);\n+            log #fmt[\"  lib: %s\", ct];\n+            run::run_program(\"cp\", [ct, c.libdir]);\n         }\n     }\n }\n \n-fn install_source(cargo_root: str, path: str) {\n+fn install_source(c: cargo, path: str) {\n     log #fmt[\"source: %s\", path];\n     fs::change_dir(path);\n     let contents = fs::list_dir(\".\");\n@@ -174,25 +188,25 @@ fn install_source(cargo_root: str, path: str) {\n         alt p {\n             none. { cont; }\n             some(_p) {\n-                install_one_crate(cargo_root, path, cf, _p);\n+                install_one_crate(c, path, cf, _p);\n             }\n         }\n     }\n }\n \n-fn install_file(cargo_root: str, _path: str) {\n-    let wd = tempfile::mkdtemp(cargo_root + \"/work/\", \"\");\n+fn install_file(c: cargo, _path: str) {\n+    let wd = tempfile::mkdtemp(c.workdir + fs::path_sep(), \"\");\n     alt wd {\n         some(p) {\n             run::run_program(\"tar\", [\"-x\", \"--strip-components=1\",\n                                      \"-C\", p, \"-f\", _path]);\n-            install_source(cargo_root, p);\n+            install_source(c, p);\n         }\n         _ { fail \"needed temp dir\"; }\n     }\n }\n \n-fn cmd_install(cargo_root: str, argv: [str]) {\n+fn cmd_install(c: cargo, argv: [str]) {\n     // cargo install <pkg>\n     if vec::len(argv) < 3u {\n         cmd_usage();\n@@ -201,7 +215,7 @@ fn cmd_install(cargo_root: str, argv: [str]) {\n \n     if str::starts_with(argv[2], \"file:\") {\n         let path = rest(argv[2], 5u);\n-        install_file(cargo_root, path);\n+        install_file(c, path);\n     }\n }\n \n@@ -214,9 +228,9 @@ fn main(argv: [str]) {\n         cmd_usage();\n         ret;\n     }\n-    let cargo_root = setup_dirs();\n+    let c = configure();\n     alt argv[1] {\n-        \"install\" { cmd_install(cargo_root, argv); }\n+        \"install\" { cmd_install(c, argv); }\n         \"usage\" { cmd_usage(); }\n         _ { cmd_usage(); }\n     }"}]}