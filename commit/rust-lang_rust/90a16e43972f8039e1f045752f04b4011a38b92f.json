{"sha": "90a16e43972f8039e1f045752f04b4011a38b92f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkwYTE2ZTQzOTcyZjgwMzllMWYwNDU3NTJmMDRiNDAxMWEzOGI5MmY=", "commit": {"author": {"name": "ThibsG", "email": "Thibs@debian.com", "date": "2020-12-10T16:00:55Z"}, "committer": {"name": "ThibsG", "email": "Thibs@debian.com", "date": "2020-12-10T16:53:47Z"}, "message": "Add tests for unsized trait in `wrong_self_convention` lint", "tree": {"sha": "58f84d022dfb512a8a24676cc8f48ce64662ec43", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/58f84d022dfb512a8a24676cc8f48ce64662ec43"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/90a16e43972f8039e1f045752f04b4011a38b92f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/90a16e43972f8039e1f045752f04b4011a38b92f", "html_url": "https://github.com/rust-lang/rust/commit/90a16e43972f8039e1f045752f04b4011a38b92f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/90a16e43972f8039e1f045752f04b4011a38b92f/comments", "author": {"login": "ThibsG", "id": 12683889, "node_id": "MDQ6VXNlcjEyNjgzODg5", "avatar_url": "https://avatars.githubusercontent.com/u/12683889?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ThibsG", "html_url": "https://github.com/ThibsG", "followers_url": "https://api.github.com/users/ThibsG/followers", "following_url": "https://api.github.com/users/ThibsG/following{/other_user}", "gists_url": "https://api.github.com/users/ThibsG/gists{/gist_id}", "starred_url": "https://api.github.com/users/ThibsG/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ThibsG/subscriptions", "organizations_url": "https://api.github.com/users/ThibsG/orgs", "repos_url": "https://api.github.com/users/ThibsG/repos", "events_url": "https://api.github.com/users/ThibsG/events{/privacy}", "received_events_url": "https://api.github.com/users/ThibsG/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ThibsG", "id": 12683889, "node_id": "MDQ6VXNlcjEyNjgzODg5", "avatar_url": "https://avatars.githubusercontent.com/u/12683889?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ThibsG", "html_url": "https://github.com/ThibsG", "followers_url": "https://api.github.com/users/ThibsG/followers", "following_url": "https://api.github.com/users/ThibsG/following{/other_user}", "gists_url": "https://api.github.com/users/ThibsG/gists{/gist_id}", "starred_url": "https://api.github.com/users/ThibsG/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ThibsG/subscriptions", "organizations_url": "https://api.github.com/users/ThibsG/orgs", "repos_url": "https://api.github.com/users/ThibsG/repos", "events_url": "https://api.github.com/users/ThibsG/events{/privacy}", "received_events_url": "https://api.github.com/users/ThibsG/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1e0f85b2640e9c2a90c197780c534a96148138bc", "url": "https://api.github.com/repos/rust-lang/rust/commits/1e0f85b2640e9c2a90c197780c534a96148138bc", "html_url": "https://github.com/rust-lang/rust/commit/1e0f85b2640e9c2a90c197780c534a96148138bc"}], "stats": {"total": 57, "additions": 55, "deletions": 2}, "files": [{"sha": "d6a890014e681f228a59f46550980af25be8e3c1", "filename": "tests/ui/use_self.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/90a16e43972f8039e1f045752f04b4011a38b92f/tests%2Fui%2Fuse_self.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/90a16e43972f8039e1f045752f04b4011a38b92f/tests%2Fui%2Fuse_self.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fuse_self.fixed?ref=90a16e43972f8039e1f045752f04b4011a38b92f", "patch": "@@ -71,7 +71,7 @@ mod lifetimes {\n \n mod issue2894 {\n     trait IntoBytes {\n-        #[allow(clippy::clippy::wrong_self_convention)]\n+        #[allow(clippy::wrong_self_convention)]\n         fn into_bytes(&self) -> Vec<u8>;\n     }\n "}, {"sha": "5282eba74fd1872adc52f3a59086492826a80411", "filename": "tests/ui/wrong_self_convention.rs", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/90a16e43972f8039e1f045752f04b4011a38b92f/tests%2Fui%2Fwrong_self_convention.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90a16e43972f8039e1f045752f04b4011a38b92f/tests%2Fui%2Fwrong_self_convention.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwrong_self_convention.rs?ref=90a16e43972f8039e1f045752f04b4011a38b92f", "patch": "@@ -113,4 +113,27 @@ mod issue6307 {\n         fn from_(self) {}\n         fn to_mut(&mut self) {}\n     }\n+\n+    trait U {\n+        fn as_i32(self);\n+        fn as_u32(&self);\n+        fn into_i32(&self);\n+        fn into_u32(self);\n+        fn is_i32(self);\n+        fn is_u32(&self);\n+        fn to_i32(self);\n+        fn to_u32(&self);\n+        fn from_i32(self);\n+        // check whether the lint can be allowed at the function level\n+        #[allow(clippy::wrong_self_convention)]\n+        fn from_cake(self);\n+\n+        // test for false positives\n+        fn as_(self);\n+        fn into_(&self);\n+        fn is_(self);\n+        fn to_(self);\n+        fn from_(self);\n+        fn to_mut(&mut self);\n+    }\n }"}, {"sha": "86467eb0fc7371c96564b42dbaf70af108297833", "filename": "tests/ui/wrong_self_convention.stderr", "status": "modified", "additions": 31, "deletions": 1, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/90a16e43972f8039e1f045752f04b4011a38b92f/tests%2Fui%2Fwrong_self_convention.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/90a16e43972f8039e1f045752f04b4011a38b92f/tests%2Fui%2Fwrong_self_convention.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwrong_self_convention.stderr?ref=90a16e43972f8039e1f045752f04b4011a38b92f", "patch": "@@ -102,5 +102,35 @@ error: methods called `from_*` usually take no self; consider choosing a less am\n LL |         fn from_i32(self) {}\n    |                     ^^^^\n \n-error: aborting due to 17 previous errors\n+error: methods called `as_*` usually take self by reference or self by mutable reference; consider choosing a less ambiguous name\n+  --> $DIR/wrong_self_convention.rs:118:19\n+   |\n+LL |         fn as_i32(self);\n+   |                   ^^^^\n+\n+error: methods called `into_*` usually take self by value; consider choosing a less ambiguous name\n+  --> $DIR/wrong_self_convention.rs:120:21\n+   |\n+LL |         fn into_i32(&self);\n+   |                     ^^^^^\n+\n+error: methods called `is_*` usually take self by reference or no self; consider choosing a less ambiguous name\n+  --> $DIR/wrong_self_convention.rs:122:19\n+   |\n+LL |         fn is_i32(self);\n+   |                   ^^^^\n+\n+error: methods called `to_*` usually take self by reference; consider choosing a less ambiguous name\n+  --> $DIR/wrong_self_convention.rs:124:19\n+   |\n+LL |         fn to_i32(self);\n+   |                   ^^^^\n+\n+error: methods called `from_*` usually take no self; consider choosing a less ambiguous name\n+  --> $DIR/wrong_self_convention.rs:126:21\n+   |\n+LL |         fn from_i32(self);\n+   |                     ^^^^\n+\n+error: aborting due to 22 previous errors\n "}]}