{"sha": "fcdce8fc1d4891032699554fe64fdcd8e54afe49", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZjZGNlOGZjMWQ0ODkxMDMyNjk5NTU0ZmU2NGZkY2Q4ZTU0YWZlNDk=", "commit": {"author": {"name": "Chris Emerson", "email": "github@mail.nosreme.org", "date": "2017-10-07T22:24:36Z"}, "committer": {"name": "Chris Emerson", "email": "github@mail.nosreme.org", "date": "2017-10-07T22:24:36Z"}, "message": "Merge branch 'master' into no_effect_with_drop", "tree": {"sha": "89103580d24c46a284b73b4ad1f6514e5931851c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/89103580d24c46a284b73b4ad1f6514e5931851c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fcdce8fc1d4891032699554fe64fdcd8e54afe49", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fcdce8fc1d4891032699554fe64fdcd8e54afe49", "html_url": "https://github.com/rust-lang/rust/commit/fcdce8fc1d4891032699554fe64fdcd8e54afe49", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fcdce8fc1d4891032699554fe64fdcd8e54afe49/comments", "author": {"login": "jugglerchris", "id": 1644842, "node_id": "MDQ6VXNlcjE2NDQ4NDI=", "avatar_url": "https://avatars.githubusercontent.com/u/1644842?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jugglerchris", "html_url": "https://github.com/jugglerchris", "followers_url": "https://api.github.com/users/jugglerchris/followers", "following_url": "https://api.github.com/users/jugglerchris/following{/other_user}", "gists_url": "https://api.github.com/users/jugglerchris/gists{/gist_id}", "starred_url": "https://api.github.com/users/jugglerchris/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jugglerchris/subscriptions", "organizations_url": "https://api.github.com/users/jugglerchris/orgs", "repos_url": "https://api.github.com/users/jugglerchris/repos", "events_url": "https://api.github.com/users/jugglerchris/events{/privacy}", "received_events_url": "https://api.github.com/users/jugglerchris/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jugglerchris", "id": 1644842, "node_id": "MDQ6VXNlcjE2NDQ4NDI=", "avatar_url": "https://avatars.githubusercontent.com/u/1644842?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jugglerchris", "html_url": "https://github.com/jugglerchris", "followers_url": "https://api.github.com/users/jugglerchris/followers", "following_url": "https://api.github.com/users/jugglerchris/following{/other_user}", "gists_url": "https://api.github.com/users/jugglerchris/gists{/gist_id}", "starred_url": "https://api.github.com/users/jugglerchris/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jugglerchris/subscriptions", "organizations_url": "https://api.github.com/users/jugglerchris/orgs", "repos_url": "https://api.github.com/users/jugglerchris/repos", "events_url": "https://api.github.com/users/jugglerchris/events{/privacy}", "received_events_url": "https://api.github.com/users/jugglerchris/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9a0a8a0010e0da18d664e8895a3d73b784f026b8", "url": "https://api.github.com/repos/rust-lang/rust/commits/9a0a8a0010e0da18d664e8895a3d73b784f026b8", "html_url": "https://github.com/rust-lang/rust/commit/9a0a8a0010e0da18d664e8895a3d73b784f026b8"}, {"sha": "12a7d1489aed893de9c6dc0a520e44cf3d349387", "url": "https://api.github.com/repos/rust-lang/rust/commits/12a7d1489aed893de9c6dc0a520e44cf3d349387", "html_url": "https://github.com/rust-lang/rust/commit/12a7d1489aed893de9c6dc0a520e44cf3d349387"}], "stats": {"total": 3664, "additions": 2205, "deletions": 1459}, "files": [{"sha": "8fe1be2ddfaf6bf01686426fafeb9a9fde99438d", "filename": ".travis.yml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/.travis.yml", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/.travis.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.travis.yml?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -28,6 +28,7 @@ script:\n  - cargo test --features debugging\n  - mkdir -p ~/rust/cargo/bin\n  - cp target/debug/cargo-clippy ~/rust/cargo/bin/cargo-clippy\n+ - cp target/debug/clippy-driver ~/rust/cargo/bin/clippy-driver\n  - PATH=$PATH:~/rust/cargo/bin cargo clippy --all -- -D clippy\n  - cd clippy_workspace_tests && PATH=$PATH:~/rust/cargo/bin cargo clippy -- -D clippy && cd ..\n  - cd clippy_workspace_tests/src && PATH=$PATH:~/rust/cargo/bin cargo clippy -- -D clippy && cd ../.."}, {"sha": "0e3fb8be43de66b0975f409dc6deef6b35f67052", "filename": "CHANGELOG.md", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -1,6 +1,22 @@\n # Change Log\n All notable changes to this project will be documented in this file.\n \n+## 0.0.165\n+* Rust upgrade to rustc 1.22.0-nightly (0e6f4cf51 2017-09-27)\n+* New lint: [`mut_range_bound`]\n+\n+## 0.0.164\n+* Update to *rustc 1.22.0-nightly (6c476ce46 2017-09-25)*\n+* New lint: [`int_plus_one`]\n+\n+## 0.0.163\n+* Update to *rustc 1.22.0-nightly (14039a42a 2017-09-22)*\n+\n+## 0.0.162\n+* Update to *rustc 1.22.0-nightly (0701b37d9 2017-09-18)*\n+* New lint: [`chars_last_cmp`]\n+* Improved suggestions for [`needless_borrow`], [`ptr_arg`],\n+\n ## 0.0.161\n * Update to *rustc 1.22.0-nightly (539f2083d 2017-09-13)*\n \n@@ -457,6 +473,7 @@ All notable changes to this project will be documented in this file.\n [`cast_precision_loss`]: https://rust-lang-nursery.github.io/rust-clippy/master/index.html#cast_precision_loss\n [`cast_sign_loss`]: https://rust-lang-nursery.github.io/rust-clippy/master/index.html#cast_sign_loss\n [`char_lit_as_u8`]: https://rust-lang-nursery.github.io/rust-clippy/master/index.html#char_lit_as_u8\n+[`chars_last_cmp`]: https://rust-lang-nursery.github.io/rust-clippy/master/index.html#chars_last_cmp\n [`chars_next_cmp`]: https://rust-lang-nursery.github.io/rust-clippy/master/index.html#chars_next_cmp\n [`clone_double_ref`]: https://rust-lang-nursery.github.io/rust-clippy/master/index.html#clone_double_ref\n [`clone_on_copy`]: https://rust-lang-nursery.github.io/rust-clippy/master/index.html#clone_on_copy\n@@ -510,6 +527,7 @@ All notable changes to this project will be documented in this file.\n [`ineffective_bit_mask`]: https://rust-lang-nursery.github.io/rust-clippy/master/index.html#ineffective_bit_mask\n [`infinite_iter`]: https://rust-lang-nursery.github.io/rust-clippy/master/index.html#infinite_iter\n [`inline_always`]: https://rust-lang-nursery.github.io/rust-clippy/master/index.html#inline_always\n+[`int_plus_one`]: https://rust-lang-nursery.github.io/rust-clippy/master/index.html#int_plus_one\n [`integer_arithmetic`]: https://rust-lang-nursery.github.io/rust-clippy/master/index.html#integer_arithmetic\n [`invalid_regex`]: https://rust-lang-nursery.github.io/rust-clippy/master/index.html#invalid_regex\n [`invalid_upcast_comparisons`]: https://rust-lang-nursery.github.io/rust-clippy/master/index.html#invalid_upcast_comparisons\n@@ -547,6 +565,7 @@ All notable changes to this project will be documented in this file.\n [`modulo_one`]: https://rust-lang-nursery.github.io/rust-clippy/master/index.html#modulo_one\n [`mut_from_ref`]: https://rust-lang-nursery.github.io/rust-clippy/master/index.html#mut_from_ref\n [`mut_mut`]: https://rust-lang-nursery.github.io/rust-clippy/master/index.html#mut_mut\n+[`mut_range_bound`]: https://rust-lang-nursery.github.io/rust-clippy/master/index.html#mut_range_bound\n [`mutex_atomic`]: https://rust-lang-nursery.github.io/rust-clippy/master/index.html#mutex_atomic\n [`mutex_integer`]: https://rust-lang-nursery.github.io/rust-clippy/master/index.html#mutex_integer\n [`naive_bytecount`]: https://rust-lang-nursery.github.io/rust-clippy/master/index.html#naive_bytecount"}, {"sha": "1eed9fa4e9548334c4b5fa1e69f91239a94bba50", "filename": "Cargo.lock", "status": "modified", "additions": 72, "deletions": 34, "changes": 106, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -1,6 +1,6 @@\n [root]\n name = \"clippy_lints\"\n-version = \"0.0.161\"\n+version = \"0.0.165\"\n dependencies = [\n  \"itertools 0.6.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"lazy_static 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -9,10 +9,11 @@ dependencies = [\n  \"quine-mc_cluskey 0.2.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"regex-syntax 0.4.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"semver 0.6.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde 1.0.14 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde_derive 1.0.14 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 1.0.15 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde_derive 1.0.15 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"toml 0.4.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"unicode-normalization 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"url 1.5.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -28,22 +29,22 @@ name = \"backtrace\"\n version = \"0.3.3\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"backtrace-sys 0.1.12 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"backtrace-sys 0.1.14 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"cfg-if 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"dbghelp-sys 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"kernel32-sys 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.30 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.31 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc-demangle 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"winapi 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"backtrace-sys\"\n-version = \"0.1.12\"\n+version = \"0.1.14\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"gcc 0.3.53 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.30 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"cc 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.31 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -61,29 +62,34 @@ name = \"cargo_metadata\"\n version = \"0.2.3\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"serde 1.0.14 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde_derive 1.0.14 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 1.0.15 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde_derive 1.0.15 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serde_json 1.0.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n+[[package]]\n+name = \"cc\"\n+version = \"1.0.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+\n [[package]]\n name = \"cfg-if\"\n version = \"0.1.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n name = \"clippy\"\n-version = \"0.0.161\"\n+version = \"0.0.165\"\n dependencies = [\n  \"cargo_metadata 0.2.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"clippy-mini-macro-test 0.1.0\",\n- \"clippy_lints 0.0.161\",\n+ \"clippy_lints 0.0.165\",\n  \"compiletest_rs 0.2.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"duct 0.8.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"lazy_static 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"regex 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde 1.0.14 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde_derive 1.0.14 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 1.0.15 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde_derive 1.0.15 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -138,14 +144,19 @@ dependencies = [\n ]\n \n [[package]]\n-name = \"gcc\"\n-version = \"0.3.53\"\n+name = \"getopts\"\n+version = \"0.2.15\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n-name = \"getopts\"\n-version = \"0.2.15\"\n+name = \"idna\"\n+version = \"0.1.4\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"matches 0.1.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"unicode-bidi 0.3.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"unicode-normalization 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n \n [[package]]\n name = \"itertools\"\n@@ -157,7 +168,7 @@ dependencies = [\n \n [[package]]\n name = \"itoa\"\n-version = \"0.3.3\"\n+version = \"0.3.4\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n@@ -181,7 +192,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n name = \"libc\"\n-version = \"0.2.30\"\n+version = \"0.2.31\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n@@ -199,7 +210,7 @@ name = \"memchr\"\n version = \"1.0.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"libc 0.2.30 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.31 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -209,7 +220,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"bitflags 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"cfg-if 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.30 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.31 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"void 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n@@ -228,6 +239,11 @@ dependencies = [\n  \"winapi 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n+[[package]]\n+name = \"percent-encoding\"\n+version = \"1.0.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+\n [[package]]\n name = \"pulldown-cmark\"\n version = \"0.0.15\"\n@@ -289,12 +305,12 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n name = \"serde\"\n-version = \"1.0.14\"\n+version = \"1.0.15\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n name = \"serde_derive\"\n-version = \"1.0.14\"\n+version = \"1.0.15\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"quote 0.3.15 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -317,9 +333,9 @@ version = \"1.0.3\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"dtoa 0.4.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"itoa 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"itoa 0.3.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"num-traits 0.1.40 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde 1.0.14 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 1.0.15 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -328,7 +344,7 @@ version = \"0.2.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"kernel32-sys 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.30 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.31 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"winapi 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n@@ -364,7 +380,15 @@ name = \"toml\"\n version = \"0.4.5\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"serde 1.0.14 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 1.0.15 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"unicode-bidi\"\n+version = \"0.3.4\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"matches 0.1.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -385,6 +409,16 @@ dependencies = [\n  \"void 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n+[[package]]\n+name = \"url\"\n+version = \"1.5.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"idna 0.1.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"matches 0.1.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"percent-encoding 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n [[package]]\n name = \"utf8-ranges\"\n version = \"1.0.0\"\n@@ -408,31 +442,33 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n [metadata]\n \"checksum aho-corasick 0.6.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"500909c4f87a9e52355b26626d890833e9e1d53ac566db76c36faa984b889699\"\n \"checksum backtrace 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"99f2ce94e22b8e664d95c57fff45b98a966c2252b60691d0b7aeeccd88d70983\"\n-\"checksum backtrace-sys 0.1.12 (registry+https://github.com/rust-lang/crates.io-index)\" = \"afccc5772ba333abccdf60d55200fa3406f8c59dcf54d5f7998c9107d3799c7c\"\n+\"checksum backtrace-sys 0.1.14 (registry+https://github.com/rust-lang/crates.io-index)\" = \"c63ea141ef8fdb10409d0f5daf30ac51f84ef43bff66f16627773d2a292cd189\"\n \"checksum bitflags 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"aad18937a628ec6abcd26d1489012cc0e18c21798210f491af69ded9b881106d\"\n \"checksum bitflags 0.9.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"4efd02e230a02e18f92fc2735f44597385ed02ad8f831e7c1c1156ee5e1ab3a5\"\n \"checksum cargo_metadata 0.2.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"be1057b8462184f634c3a208ee35b0f935cfd94b694b26deadccd98732088d7b\"\n+\"checksum cc 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7db2f146208d7e0fbee761b09cd65a7f51ccc38705d4e7262dad4d73b12a76b1\"\n \"checksum cfg-if 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d4c819a1287eb618df47cc647173c5c4c66ba19d888a6e50d605672aed3140de\"\n \"checksum compiletest_rs 0.2.10 (registry+https://github.com/rust-lang/crates.io-index)\" = \"2741d378feb7a434dba54228c89a70b4e427fee521de67cdda3750b8a0265f5a\"\n \"checksum dbghelp-sys 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"97590ba53bcb8ac28279161ca943a924d1fd4a8fb3fa63302591647c4fc5b850\"\n \"checksum dtoa 0.4.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"09c3753c3db574d215cba4ea76018483895d7bff25a31b49ba45db21c48e50ab\"\n \"checksum duct 0.8.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"e45aa15fe0a8a8f511e6d834626afd55e49b62e5c8802e18328a87e8a8f6065c\"\n \"checksum either 1.1.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"18785c1ba806c258137c937e44ada9ee7e69a37e3c72077542cd2f069d78562a\"\n \"checksum error-chain 0.8.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"6930e04918388a9a2e41d518c25cf679ccafe26733fb4127dbf21993f2575d46\"\n-\"checksum gcc 0.3.53 (registry+https://github.com/rust-lang/crates.io-index)\" = \"e8310f7e9c890398b0e80e301c4f474e9918d2b27fca8f48486ca775fa9ffc5a\"\n \"checksum getopts 0.2.15 (registry+https://github.com/rust-lang/crates.io-index)\" = \"65922871abd2f101a2eb0eaebadc66668e54a87ad9c3dd82520b5f86ede5eff9\"\n+\"checksum idna 0.1.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"014b298351066f1512874135335d62a789ffe78a9974f94b43ed5621951eaf7d\"\n \"checksum itertools 0.6.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"22c285d60139cf413244894189ca52debcfd70b57966feed060da76802e415a0\"\n-\"checksum itoa 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ac17257442c2ed77dbc9fd555cf83c58b0c7f7d0e8f2ae08c0ac05c72842e1f6\"\n+\"checksum itoa 0.3.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"8324a32baf01e2ae060e9de58ed0bc2320c9a2833491ee36cd3b4c414de4db8c\"\n \"checksum kernel32-sys 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7507624b29483431c0ba2d82aece8ca6cdba9382bff4ddd0f7490560c056098d\"\n \"checksum lazy_static 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3b37545ab726dd833ec6420aaba8231c5b320814b9029ad585555d2a03e94fbf\"\n \"checksum lazycell 0.5.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3b585b7a6811fb03aa10e74b278a0f00f8dd9b45dc681f148bb29fa5cb61859b\"\n-\"checksum libc 0.2.30 (registry+https://github.com/rust-lang/crates.io-index)\" = \"2370ca07ec338939e356443dac2296f581453c35fe1e3a3ed06023c49435f915\"\n+\"checksum libc 0.2.31 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d1419b2939a0bc44b77feb34661583c7546b532b192feab36249ab584b86856c\"\n \"checksum log 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\" = \"880f77541efa6e5cc74e76910c9884d9859683118839d6a1dc3b11e63512565b\"\n \"checksum matches 0.1.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"100aabe6b8ff4e4a7e32c1c13523379802df0772b82466207ac25b013f193376\"\n \"checksum memchr 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"1dbccc0e46f1ea47b9f17e6d67c5a96bd27030519c519c9c91327e31275a47b4\"\n \"checksum nix 0.8.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"47e49f6982987135c5e9620ab317623e723bd06738fd85377e8d55f57c8b6487\"\n \"checksum num-traits 0.1.40 (registry+https://github.com/rust-lang/crates.io-index)\" = \"99843c856d68d8b4313b03a17e33c4bb42ae8f6610ea81b28abe076ac721b9b0\"\n \"checksum os_pipe 0.5.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"998bfbb3042e715190fe2a41abfa047d7e8cb81374d2977d7f100eacd8619cb1\"\n+\"checksum percent-encoding 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"de154f638187706bde41d9b4738748933d64e6b37bdbffc0b47a97d16a6ae356\"\n \"checksum pulldown-cmark 0.0.15 (registry+https://github.com/rust-lang/crates.io-index)\" = \"378e941dbd392c101f2cb88097fa4d7167bc421d4b88de3ff7dbee503bc3233b\"\n \"checksum quine-mc_cluskey 0.2.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"07589615d719a60c8dd8a4622e7946465dfef20d1a428f969e3443e7386d5f45\"\n \"checksum quote 0.3.15 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7a6e920b65c65f10b2ae65c831a81a073a89edd28c7cce89475bff467ab4167a\"\n@@ -442,18 +478,20 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum rustc-serialize 0.3.24 (registry+https://github.com/rust-lang/crates.io-index)\" = \"dcf128d1287d2ea9d80910b5f1120d0b8eede3fbf1abe91c40d39ea7d51e6fda\"\n \"checksum semver 0.6.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7a3186ec9e65071a2095434b1f5bb24838d4e8e130f584c790f6033c79943537\"\n \"checksum semver-parser 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"388a1df253eca08550bef6c72392cfe7c30914bf41df5269b68cbd6ff8f570a3\"\n-\"checksum serde 1.0.14 (registry+https://github.com/rust-lang/crates.io-index)\" = \"bcb6a7637a47663ee073391a139ed07851f27ed2532c2abc88c6bf27a16cdf34\"\n-\"checksum serde_derive 1.0.14 (registry+https://github.com/rust-lang/crates.io-index)\" = \"812ff66056fd9a9a5b7c119714243b0862cf98340e7d4b5ee05a932c40d5ea6c\"\n+\"checksum serde 1.0.15 (registry+https://github.com/rust-lang/crates.io-index)\" = \"6a7046c9d4c6c522d10b2d098f9bebe2bef227e0e74044d8c1bfcf6b476af799\"\n+\"checksum serde_derive 1.0.15 (registry+https://github.com/rust-lang/crates.io-index)\" = \"1afcaae083fd1c46952a315062326bc9957f182358eb7da03b57ef1c688f7aa9\"\n \"checksum serde_derive_internals 0.16.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"bd381f6d01a6616cdba8530492d453b7761b456ba974e98768a18cad2cd76f58\"\n \"checksum serde_json 1.0.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d243424e06f9f9c39e3cd36147470fd340db785825e367625f79298a6ac6b7ac\"\n \"checksum shared_child 0.2.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"099b38928dbe4a0a01fcd8c233183072f14a7d126a34bed05880869be66e14cc\"\n \"checksum syn 0.11.11 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d3b891b9015c88c576343b9b3e41c2c11a51c219ef067b264bd9c8aa9b441dad\"\n \"checksum synom 0.11.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"a393066ed9010ebaed60b9eafa373d4b1baac186dd7e008555b0f702b51945b6\"\n \"checksum thread_local 0.3.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"1697c4b57aeeb7a536b647165a2825faddffb1d3bad386d507709bd51a90bb14\"\n \"checksum toml 0.4.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"a7540f4ffc193e0d3c94121edb19b055670d369f77d5804db11ae053a45b6e7e\"\n+\"checksum unicode-bidi 0.3.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"49f2bd0c6468a8230e1db229cff8029217cf623c767ea5d60bfbd42729ea54d5\"\n \"checksum unicode-normalization 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"51ccda9ef9efa3f7ef5d91e8f9b83bbe6955f9bf86aec89d5cce2c874625920f\"\n \"checksum unicode-xid 0.0.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"8c1f860d7d29cf02cb2f3f359fd35991af3d30bac52c57d265a3c461074cb4dc\"\n \"checksum unreachable 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"382810877fe448991dfc7f0dd6e3ae5d58088fd0ea5e35189655f84e6814fa56\"\n+\"checksum url 1.5.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"eeb819346883532a271eb626deb43c4a1bb4c4dd47c519bd78137c3e72a4fe27\"\n \"checksum utf8-ranges 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"662fab6525a98beff2921d7f61a39e7d59e0b425ebc7d0d9e66d316e55124122\"\n \"checksum void 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"6a02e4885ed3bc0f2de90ea6dd45ebcbb66dacffe03547fadbb0eeae2770887d\"\n \"checksum winapi 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\" = \"167dc9d6949a9b857f3451275e911c3f44255842c1f7a76f33c55103a909087a\""}, {"sha": "3d3b8abaa7695882dab812dad70819c6a751c9cf", "filename": "Cargo.toml", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -1,6 +1,6 @@\n [package]\n name = \"clippy\"\n-version = \"0.0.161\"\n+version = \"0.0.165\"\n authors = [\n \t\"Manish Goregaokar <manishsmail@gmail.com>\",\n \t\"Andre Bogus <bogusandre@gmail.com>\",\n@@ -14,6 +14,7 @@ readme = \"README.md\"\n license = \"MPL-2.0\"\n keywords = [\"clippy\", \"lint\", \"plugin\"]\n categories = [\"development-tools\", \"development-tools::cargo-plugins\"]\n+build = \"build.rs\"\n \n [badges]\n travis-ci = { repository = \"rust-lang-nursery/rust-clippy\" }\n@@ -29,9 +30,14 @@ name = \"cargo-clippy\"\n test = false\n path = \"src/main.rs\"\n \n+[[bin]]\n+name = \"clippy-driver\"\n+test = false\n+path = \"src/driver.rs\"\n+\n [dependencies]\n # begin automatic update\n-clippy_lints = { version = \"0.0.161\", path = \"clippy_lints\" }\n+clippy_lints = { version = \"0.0.165\", path = \"clippy_lints\" }\n # end automatic update\n cargo_metadata = \"0.2\"\n "}, {"sha": "a9496d5b414d79a4866382bb25228d0a7a6d057e", "filename": "PUBLISH.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/PUBLISH.md", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/PUBLISH.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/PUBLISH.md?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -7,7 +7,7 @@ Steps to publish a new clippy version\n - `git push`\n - Wait for Travis's approval.\n - Merge.\n-- `cargo publish` in `./clippy_clints`.\n+- `cargo publish` in `./clippy_lints`.\n - `cargo publish` in the root directory.\n - `git pull`.\n - `git tag -s v0.0.X -m \"v0.0.X\"`."}, {"sha": "1c930c1b2c95e531928f002e295c50f0eb31d782", "filename": "build.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/build.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/build.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build.rs?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -0,0 +1,8 @@\n+use std::env;\n+\n+fn main() {\n+    // Forward the profile to the main compilation\n+    println!(\"cargo:rustc-env=PROFILE={}\", env::var(\"PROFILE\").unwrap());\n+    // Don't rebuild even if nothing changed\n+    println!(\"cargo:rerun-if-changed=build.rs\");\n+}"}, {"sha": "9c78514285d4e21e694a2a68425b29d0e49b0bcd", "filename": "clippy_lints/Cargo.toml", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/clippy_lints%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/clippy_lints%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2FCargo.toml?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -1,7 +1,7 @@\n [package]\n name = \"clippy_lints\"\n # begin automatic update\n-version = \"0.0.161\"\n+version = \"0.0.165\"\n # end automatic update\n authors = [\n \t\"Manish Goregaokar <manishsmail@gmail.com>\",\n@@ -28,6 +28,7 @@ serde_derive = \"1.0\"\n toml = \"0.4\"\n unicode-normalization = \"0.1\"\n pulldown-cmark = \"0.0.15\"\n+url = \"1.5.0\"\n \n [features]\n debugging = []"}, {"sha": "6372221fd4405de1451b04a353aac7875dacc56d", "filename": "clippy_lints/src/bit_mask.rs", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/clippy_lints%2Fsrc%2Fbit_mask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/clippy_lints%2Fsrc%2Fbit_mask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fbit_mask.rs?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -90,7 +90,17 @@ declare_lint! {\n }\n \n #[derive(Copy, Clone)]\n-pub struct BitMask;\n+pub struct BitMask {\n+    verbose_bit_mask_threshold: u64,\n+}\n+\n+impl BitMask {\n+    pub fn new(verbose_bit_mask_threshold: u64) -> Self {\n+        Self {\n+            verbose_bit_mask_threshold: verbose_bit_mask_threshold,\n+        }\n+    }\n+}\n \n impl LintPass for BitMask {\n     fn get_lints(&self) -> LintArray {\n@@ -119,6 +129,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for BitMask {\n             let Expr_::ExprLit(ref lit1) = right.node,\n             let LitKind::Int(0, _) = lit1.node,\n             n.leading_zeros() == n.count_zeros(),\n+            n > u128::from(self.verbose_bit_mask_threshold),\n         ], {\n             span_lint_and_then(cx,\n                                VERBOSE_BIT_MASK,\n@@ -307,7 +318,7 @@ fn fetch_int_literal(cx: &LateContext, lit: &Expr) -> Option<u128> {\n                         cx.tcx.mir_const_qualif(def_id);\n                         cx.tcx.hir.body(cx.tcx.hir.body_owned_by(id))\n                     } else {\n-                        cx.tcx.extern_const_body(def_id)\n+                        cx.tcx.extern_const_body(def_id).body\n                     };\n                     fetch_int_literal(cx, &body.value)\n                 })"}, {"sha": "7e6f3c2acf11848ee32790b00605f5b1efb8c802", "filename": "clippy_lints/src/consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/clippy_lints%2Fsrc%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/clippy_lints%2Fsrc%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fconsts.rs?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -298,7 +298,7 @@ impl<'c, 'cc> ConstEvalLateContext<'c, 'cc> {\n                         self.tcx.mir_const_qualif(def_id);\n                         self.tcx.hir.body(self.tcx.hir.body_owned_by(id))\n                     } else {\n-                        self.tcx.extern_const_body(def_id)\n+                        self.tcx.extern_const_body(def_id).body\n                     };\n                     let ret = cx.expr(&body.value);\n                     if ret.is_some() {"}, {"sha": "3162dbc422bdbb8179a8717f0e745a23981fd718", "filename": "clippy_lints/src/doc.rs", "status": "modified", "additions": 24, "deletions": 1, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/clippy_lints%2Fsrc%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/clippy_lints%2Fsrc%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdoc.rs?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -5,6 +5,7 @@ use syntax::ast;\n use syntax::codemap::{BytePos, Span};\n use syntax_pos::Pos;\n use utils::span_lint;\n+use url::Url;\n \n /// **What it does:** Checks for the presence of `_`, `::` or camel-case words\n /// outside ticks in documentation.\n@@ -195,16 +196,26 @@ fn check_doc<'a, Events: Iterator<Item = (usize, pulldown_cmark::Event<'a>)>>(\n     use pulldown_cmark::Tag::*;\n \n     let mut in_code = false;\n+    let mut in_link = None;\n \n     for (offset, event) in docs {\n         match event {\n             Start(CodeBlock(_)) | Start(Code) => in_code = true,\n             End(CodeBlock(_)) | End(Code) => in_code = false,\n-            Start(_tag) | End(_tag) => (),         // We don't care about other tags\n+            Start(Link(link, _)) => in_link = Some(link),\n+            End(Link(_, _)) => in_link = None,\n+            Start(_tag) | End(_tag) => (), // We don't care about other tags\n             Html(_html) | InlineHtml(_html) => (), // HTML is weird, just ignore it\n             SoftBreak => (),\n             HardBreak => (),\n             FootnoteReference(text) | Text(text) => {\n+                if Some(&text) == in_link.as_ref() {\n+                    // Probably a link of the form `<http://example.com>`\n+                    // Which are represented as a link to \"http://example.com\" with\n+                    // text \"http://example.com\" by pulldown-cmark\n+                    continue;\n+                }\n+\n                 if !in_code {\n                     let index = match spans.binary_search_by(|c| c.0.cmp(&offset)) {\n                         Ok(o) => o,\n@@ -270,6 +281,18 @@ fn check_word(cx: &EarlyContext, word: &str, span: Span) {\n         s != \"_\" && !s.contains(\"\\\\_\") && s.contains('_')\n     }\n \n+    if let Ok(url) = Url::parse(word) {\n+        // try to get around the fact that `foo::bar` parses as a valid URL\n+        if !url.cannot_be_a_base() {\n+            span_lint(cx,\n+                      DOC_MARKDOWN,\n+                      span,\n+                      \"you should put bare URLs between `<`/`>` or make a proper Markdown link\");\n+\n+            return;\n+        }\n+    }\n+\n     if has_underscore(word) || word.contains(\"::\") || is_camel_case(word) {\n         span_lint(\n             cx,"}, {"sha": "6a6cbadb6fa3eeb4d97dfcd7d5757a680571c33d", "filename": "clippy_lints/src/format.rs", "status": "modified", "additions": 11, "deletions": 37, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/clippy_lints%2Fsrc%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/clippy_lints%2Fsrc%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fformat.rs?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -1,9 +1,7 @@\n use rustc::hir::*;\n-use rustc::hir::map::Node::NodeItem;\n use rustc::lint::*;\n use rustc::ty;\n use syntax::ast::LitKind;\n-use syntax::symbol::InternedString;\n use utils::paths;\n use utils::{is_expn_of, match_def_path, match_type, resolve_node, span_lint, walk_ptrs_ty, opt_def_id};\n \n@@ -50,8 +48,9 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n                         let Some(fun_def_id) = opt_def_id(resolve_node(cx, qpath, fun.hir_id)),\n                         match_def_path(cx.tcx, fun_def_id, &paths::FMT_ARGUMENTS_NEWV1),\n                         // ensure the format string is `\"{..}\"` with only one argument and no text\n-                        check_static_str(cx, &args[0]),\n+                        check_static_str(&args[0]),\n                         // ensure the format argument is `{}` ie. Display with no fancy option\n+                        // and that the argument is a string\n                         check_arg_is_display(cx, &args[1])\n                     ], {\n                         span_lint(cx, USELESS_FORMAT, span, \"useless use of `format!`\");\n@@ -69,44 +68,19 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n     }\n }\n \n-/// Returns the slice of format string parts in an `Arguments::new_v1` call.\n-/// Public because it's shared with a lint in print.rs.\n-pub fn get_argument_fmtstr_parts<'a, 'b>(cx: &LateContext<'a, 'b>, expr: &'a Expr) -> Option<Vec<InternedString>> {\n+/// Checks if the expressions matches `&[\"\"]`\n+fn check_static_str(expr: &Expr) -> bool {\n     if_let_chain! {[\n-        let ExprBlock(ref block) = expr.node,\n-        block.stmts.len() == 1,\n-        let StmtDecl(ref decl, _) = block.stmts[0].node,\n-        let DeclItem(ref decl) = decl.node,\n-        let Some(NodeItem(decl)) = cx.tcx.hir.find(decl.id),\n-        decl.name == \"__STATIC_FMTSTR\",\n-        let ItemStatic(_, _, ref expr) = decl.node,\n-        let ExprAddrOf(_, ref expr) = cx.tcx.hir.body(*expr).value.node, // &[\"\u2026\", \"\u2026\", \u2026]\n-        let ExprArray(ref exprs) = expr.node,\n+        let ExprAddrOf(_, ref expr) = expr.node, // &[\"\"]\n+        let ExprArray(ref exprs) = expr.node, // [\"\"]\n+        exprs.len() == 1,\n+        let ExprLit(ref lit) = exprs[0].node,\n+        let LitKind::Str(ref lit, _) = lit.node,\n     ], {\n-        let mut result = Vec::new();\n-        for expr in exprs {\n-            if let ExprLit(ref lit) = expr.node {\n-                if let LitKind::Str(ref lit, _) = lit.node {\n-                    result.push(lit.as_str());\n-                }\n-            }\n-        }\n-        return Some(result);\n+        return lit.as_str().is_empty();\n     }}\n-    None\n-}\n \n-/// Checks if the expressions matches\n-/// ```rust, ignore\n-/// { static __STATIC_FMTSTR: &'static[&'static str] = &[\"a\", \"b\", c];\n-/// __STATIC_FMTSTR }\n-/// ```\n-fn check_static_str(cx: &LateContext, expr: &Expr) -> bool {\n-    if let Some(expr) = get_argument_fmtstr_parts(cx, expr) {\n-        expr.len() == 1 && expr[0].is_empty()\n-    } else {\n-        false\n-    }\n+    false\n }\n \n /// Checks if the expressions matches"}, {"sha": "d64f352d7f16ca0640188569c6cd2002a3c98afe", "filename": "clippy_lints/src/identity_conversion.rs", "status": "added", "additions": 96, "deletions": 0, "changes": 96, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/clippy_lints%2Fsrc%2Fidentity_conversion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/clippy_lints%2Fsrc%2Fidentity_conversion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fidentity_conversion.rs?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -0,0 +1,96 @@\n+use rustc::lint::*;\n+use rustc::hir::*;\n+use syntax::ast::NodeId;\n+use utils::{in_macro, match_def_path, match_trait_method, same_tys, snippet, span_lint_and_then};\n+use utils::{opt_def_id, paths, resolve_node};\n+\n+/// **What it does:** Checks for always-identical `Into`/`From` conversions.\n+///\n+/// **Why is this bad?** Redundant code.\n+///\n+/// **Known problems:** None.\n+///\n+/// **Example:**\n+/// ```rust\n+/// // format!() returns a `String`\n+/// let s: String = format!(\"hello\").into();\n+/// ```\n+declare_lint! {\n+    pub IDENTITY_CONVERSION,\n+    Warn,\n+    \"using always-identical `Into`/`From` conversions\"\n+}\n+\n+#[derive(Default)]\n+pub struct IdentityConversion {\n+    try_desugar_arm: Vec<NodeId>,\n+}\n+\n+impl LintPass for IdentityConversion {\n+    fn get_lints(&self) -> LintArray {\n+        lint_array!(IDENTITY_CONVERSION)\n+    }\n+}\n+\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for IdentityConversion {\n+    fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, e: &'tcx Expr) {\n+        if in_macro(e.span) {\n+            return;\n+        }\n+\n+        if Some(&e.id) == self.try_desugar_arm.last() {\n+            return;\n+        }\n+\n+        match e.node {\n+            ExprMatch(_, ref arms, MatchSource::TryDesugar) => {\n+                let e = match arms[0].body.node {\n+                    ExprRet(Some(ref e)) | ExprBreak(_, Some(ref e)) => e,\n+                    _ => return,\n+                };\n+                if let ExprCall(_, ref args) = e.node {\n+                    self.try_desugar_arm.push(args[0].id);\n+                } else {\n+                    return;\n+                }\n+            },\n+\n+            ExprMethodCall(ref name, .., ref args) => {\n+                if match_trait_method(cx, e, &paths::INTO[..]) && &*name.name.as_str() == \"into\" {\n+                    let a = cx.tables.expr_ty(e);\n+                    let b = cx.tables.expr_ty(&args[0]);\n+                    if same_tys(cx, a, b) {\n+                        let sugg = snippet(cx, args[0].span, \"<expr>\").into_owned();\n+                        span_lint_and_then(cx, IDENTITY_CONVERSION, e.span, \"identical conversion\", |db| {\n+                            db.span_suggestion(e.span, \"consider removing `.into()`\", sugg);\n+                        });\n+                    }\n+                }\n+            },\n+\n+            ExprCall(ref path, ref args) => if let ExprPath(ref qpath) = path.node {\n+                if let Some(def_id) = opt_def_id(resolve_node(cx, qpath, path.hir_id)) {\n+                    if match_def_path(cx.tcx, def_id, &paths::FROM_FROM[..]) {\n+                        let a = cx.tables.expr_ty(e);\n+                        let b = cx.tables.expr_ty(&args[0]);\n+                        if same_tys(cx, a, b) {\n+                            let sugg = snippet(cx, args[0].span, \"<expr>\").into_owned();\n+                            let sugg_msg = format!(\"consider removing `{}()`\", snippet(cx, path.span, \"From::from\"));\n+                            span_lint_and_then(cx, IDENTITY_CONVERSION, e.span, \"identical conversion\", |db| {\n+                                db.span_suggestion(e.span, &sugg_msg, sugg);\n+                            });\n+                        }\n+                    }\n+                }\n+            },\n+\n+            _ => {},\n+        }\n+    }\n+\n+    fn check_expr_post(&mut self, _: &LateContext<'a, 'tcx>, e: &'tcx Expr) {\n+        if Some(&e.id) == self.try_desugar_arm.last() {\n+            self.try_desugar_arm.pop();\n+        }\n+    }\n+}"}, {"sha": "420427e7d0ab7eecb40707924e8f7d9a8a66cbc4", "filename": "clippy_lints/src/int_plus_one.rs", "status": "added", "additions": 143, "deletions": 0, "changes": 143, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/clippy_lints%2Fsrc%2Fint_plus_one.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/clippy_lints%2Fsrc%2Fint_plus_one.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fint_plus_one.rs?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -0,0 +1,143 @@\n+//! lint on blocks unnecessarily using >= with a + 1 or - 1\n+\n+use rustc::lint::*;\n+use syntax::ast::*;\n+\n+use utils::{span_lint_and_then, snippet_opt};\n+\n+/// **What it does:** Checks for usage of `x >= y + 1` or `x - 1 >= y` (and `<=`) in a block\n+///\n+///\n+/// **Why is this bad?** Readability -- better to use `> y` instead of `>= y + 1`.\n+///\n+/// **Known problems:** None.\n+///\n+/// **Example:**\n+/// ```rust\n+/// x >= y + 1\n+/// ```\n+///\n+/// Could be written:\n+///\n+/// ```rust\n+/// x > y\n+/// ```\n+declare_lint! {\n+    pub INT_PLUS_ONE,\n+    Allow,\n+    \"instead of using x >= y + 1, use x > y\"\n+}\n+\n+pub struct IntPlusOne;\n+\n+impl LintPass for IntPlusOne {\n+    fn get_lints(&self) -> LintArray {\n+        lint_array!(INT_PLUS_ONE)\n+    }\n+}\n+\n+// cases:\n+// BinOpKind::Ge\n+// x >= y + 1\n+// x - 1 >= y\n+//\n+// BinOpKind::Le\n+// x + 1 <= y\n+// x <= y - 1\n+\n+enum Side {\n+    LHS,\n+    RHS,\n+}\n+\n+impl IntPlusOne {\n+    #[allow(cast_sign_loss)]\n+    fn check_lit(&self, lit: &Lit, target_value: i128) -> bool {\n+        if let LitKind::Int(value, ..) = lit.node {\n+            return value == (target_value as u128)\n+        }\n+        false\n+    }\n+\n+    fn check_binop(&self, cx: &EarlyContext, binop: BinOpKind, lhs: &Expr, rhs: &Expr) -> Option<String> {\n+        match (binop, &lhs.node, &rhs.node) {\n+            // case where `x - 1 >= ...` or `-1 + x >= ...`\n+            (BinOpKind::Ge, &ExprKind::Binary(ref lhskind, ref lhslhs, ref lhsrhs), _) => {\n+                match (lhskind.node, &lhslhs.node, &lhsrhs.node) {\n+                    // `-1 + x`\n+                    (BinOpKind::Add, &ExprKind::Lit(ref lit), _) if self.check_lit(lit, -1) => self.generate_recommendation(cx, binop, lhsrhs, rhs, Side::LHS),\n+                    // `x - 1`\n+                    (BinOpKind::Sub, _, &ExprKind::Lit(ref lit)) if self.check_lit(lit, 1) => self.generate_recommendation(cx, binop, lhslhs, rhs, Side::LHS),\n+                    _ => None\n+                }\n+            },\n+            // case where `... >= y + 1` or `... >= 1 + y`\n+            (BinOpKind::Ge, _, &ExprKind::Binary(ref rhskind, ref rhslhs, ref rhsrhs)) if rhskind.node == BinOpKind::Add => {\n+                match (&rhslhs.node, &rhsrhs.node) {\n+                    // `y + 1` and `1 + y`\n+                    (&ExprKind::Lit(ref lit), _) if self.check_lit(lit, 1) => self.generate_recommendation(cx, binop, rhsrhs, lhs, Side::RHS),\n+                    (_, &ExprKind::Lit(ref lit)) if self.check_lit(lit, 1) => self.generate_recommendation(cx, binop, rhslhs, lhs, Side::RHS),\n+                    _ => None\n+                }\n+            },\n+            // case where `x + 1 <= ...` or `1 + x <= ...`\n+            (BinOpKind::Le, &ExprKind::Binary(ref lhskind, ref lhslhs, ref lhsrhs), _) if lhskind.node == BinOpKind::Add => {\n+                match (&lhslhs.node, &lhsrhs.node) {\n+                    // `1 + x` and `x + 1`\n+                    (&ExprKind::Lit(ref lit), _) if self.check_lit(lit, 1) => self.generate_recommendation(cx, binop, lhsrhs, rhs, Side::LHS),\n+                    (_, &ExprKind::Lit(ref lit)) if self.check_lit(lit, 1) => self.generate_recommendation(cx, binop, lhslhs, rhs, Side::LHS),\n+                    _ => None\n+                }\n+            },\n+            // case where `... >= y - 1` or `... >= -1 + y`\n+            (BinOpKind::Le, _, &ExprKind::Binary(ref rhskind, ref rhslhs, ref rhsrhs)) => {\n+                match (rhskind.node, &rhslhs.node, &rhsrhs.node) {\n+                    // `-1 + y`\n+                    (BinOpKind::Add, &ExprKind::Lit(ref lit), _) if self.check_lit(lit, -1) => self.generate_recommendation(cx, binop, rhsrhs, lhs, Side::RHS),\n+                    // `y - 1`\n+                    (BinOpKind::Sub, _, &ExprKind::Lit(ref lit)) if self.check_lit(lit, 1) => self.generate_recommendation(cx, binop, rhslhs, lhs, Side::RHS),\n+                    _ => None\n+                }\n+            },\n+            _ => None\n+        }\n+    }\n+\n+    fn generate_recommendation(&self, cx: &EarlyContext, binop: BinOpKind, node: &Expr, other_side: &Expr, side: Side) -> Option<String> {\n+        let binop_string = match binop {\n+            BinOpKind::Ge => \">\",\n+            BinOpKind::Le => \"<\",\n+            _ => return None\n+        };\n+        if let Some(snippet) = snippet_opt(cx, node.span) {\n+            if let Some(other_side_snippet) = snippet_opt(cx, other_side.span) {\n+                let rec = match side {\n+                    Side::LHS => Some(format!(\"{} {} {}\", snippet, binop_string, other_side_snippet)),\n+                    Side::RHS => Some(format!(\"{} {} {}\", other_side_snippet, binop_string, snippet)),\n+                };\n+                return rec;\n+            }\n+        }\n+        None\n+    }\n+\n+    fn emit_warning(&self, cx: &EarlyContext, block: &Expr, recommendation: String) {\n+        span_lint_and_then(cx,\n+                           INT_PLUS_ONE,\n+                           block.span,\n+                           \"Unnecessary `>= y + 1` or `x - 1 >=`\",\n+                           |db| {\n+            db.span_suggestion(block.span, \"change `>= y + 1` to `> y` as shown\", recommendation);\n+        });\n+    }\n+}\n+\n+impl EarlyLintPass for IntPlusOne {\n+    fn check_expr(&mut self, cx: &EarlyContext, item: &Expr) {\n+        if let ExprKind::Binary(ref kind, ref lhs, ref rhs) = item.node {\n+            if let Some(ref rec) = self.check_binop(cx, kind.node, lhs, rhs) {\n+                self.emit_warning(cx, item, rec.clone());\n+            }\n+        }\n+    }\n+}"}, {"sha": "ad3398cb0782db9ed4b2a54bee677ae82b5245ee", "filename": "clippy_lints/src/invalid_ref.rs", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/clippy_lints%2Fsrc%2Finvalid_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/clippy_lints%2Fsrc%2Finvalid_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Finvalid_ref.rs?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -0,0 +1,55 @@\n+use rustc::lint::*;\n+use rustc::ty;\n+use rustc::hir::*;\n+use utils::{match_def_path, paths, span_help_and_lint, opt_def_id};\n+\n+/// **What it does:** Checks for creation of references to zeroed or uninitialized memory.\n+///\n+/// **Why is this bad?** Creation of null references is undefined behavior.\n+///\n+/// **Known problems:** None. \n+///\n+/// **Example:**\n+/// ```rust\n+/// let bad_ref: &usize = std::mem::zeroed();\n+/// ```\n+\n+declare_lint! {\n+    pub INVALID_REF,\n+    Warn,\n+    \"creation of invalid reference\"\n+}\n+\n+const ZERO_REF_SUMMARY: &str = \"reference to zeroed memory\";\n+const UNINIT_REF_SUMMARY: &str = \"reference to uninitialized memory\";\n+const HELP: &str = \"Creation of a null reference is undefined behavior; see https://doc.rust-lang.org/reference/behavior-considered-undefined.html\"; \n+\n+pub struct InvalidRef; \n+\n+impl LintPass for InvalidRef {\n+    fn get_lints(&self) -> LintArray {\n+        lint_array!(INVALID_REF)\n+    }\n+}\n+\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for InvalidRef {\n+    fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr) {\n+        if_let_chain!{[\n+            let ExprCall(ref path, ref args) = expr.node,\n+            let ExprPath(ref qpath) = path.node,\n+            args.len() == 0,\n+            let ty::TyRef(..) = cx.tables.expr_ty(expr).sty, \n+            let Some(def_id) = opt_def_id(cx.tables.qpath_def(qpath, path.hir_id)),\n+        ], {\n+            let msg = if match_def_path(cx.tcx, def_id, &paths::MEM_ZEROED) | match_def_path(cx.tcx, def_id, &paths::INIT) {\n+                ZERO_REF_SUMMARY\n+            } else if match_def_path(cx.tcx, def_id, &paths::MEM_UNINIT) | match_def_path(cx.tcx, def_id, &paths::UNINIT) {\n+                UNINIT_REF_SUMMARY\n+            } else {\n+                return;\n+            };\n+            span_help_and_lint(cx, INVALID_REF, expr.span, msg, HELP);\n+        }}        \n+        return;\n+    }\n+}"}, {"sha": "d4af88d5fede0896a443f1b837b8342f63dc963c", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -51,6 +51,7 @@ extern crate lazy_static;\n \n extern crate itertools;\n extern crate pulldown_cmark;\n+extern crate url;\n \n macro_rules! declare_restriction_lint {\n     { pub $name:tt, $description:tt } => {\n@@ -92,10 +93,13 @@ pub mod eval_order_dependence;\n pub mod format;\n pub mod formatting;\n pub mod functions;\n+pub mod identity_conversion;\n pub mod identity_op;\n pub mod if_let_redundant_pattern_matching;\n pub mod if_not_else;\n pub mod infinite_iter;\n+pub mod int_plus_one;\n+pub mod invalid_ref;\n pub mod is_unit_expr;\n pub mod items_after_statements;\n pub mod large_enum_variant;\n@@ -231,7 +235,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry) {\n     reg.register_early_lint_pass(box enum_variants::EnumVariantNames::new(conf.enum_variant_name_threshold));\n     reg.register_late_lint_pass(box enum_glob_use::EnumGlobUse);\n     reg.register_late_lint_pass(box enum_clike::UnportableVariant);\n-    reg.register_late_lint_pass(box bit_mask::BitMask);\n+    reg.register_late_lint_pass(box bit_mask::BitMask::new(conf.verbose_bit_mask_threshold));\n     reg.register_late_lint_pass(box ptr::PointerPass);\n     reg.register_late_lint_pass(box needless_bool::NeedlessBool);\n     reg.register_late_lint_pass(box needless_bool::BoolComparison);\n@@ -299,6 +303,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry) {\n     reg.register_early_lint_pass(box formatting::Formatting);\n     reg.register_late_lint_pass(box swap::Swap);\n     reg.register_early_lint_pass(box if_not_else::IfNotElse);\n+    reg.register_early_lint_pass(box int_plus_one::IntPlusOne);\n     reg.register_late_lint_pass(box overflow_check_conditional::OverflowCheckConditional);\n     reg.register_late_lint_pass(box unused_label::UnusedLabel);\n     reg.register_late_lint_pass(box new_without_default::NewWithoutDefault);\n@@ -326,6 +331,8 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry) {\n     reg.register_late_lint_pass(box use_self::UseSelf);\n     reg.register_late_lint_pass(box bytecount::ByteCount);\n     reg.register_late_lint_pass(box infinite_iter::Pass);\n+    reg.register_late_lint_pass(box invalid_ref::InvalidRef);\n+    reg.register_late_lint_pass(box identity_conversion::IdentityConversion::default());\n \n     reg.register_lint_group(\"clippy_restrictions\", vec![\n         arithmetic::FLOAT_ARITHMETIC,\n@@ -342,6 +349,8 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry) {\n         enum_variants::STUTTER,\n         if_not_else::IF_NOT_ELSE,\n         infinite_iter::MAYBE_INFINITE_ITER,\n+        int_plus_one::INT_PLUS_ONE,\n+        invalid_ref::INVALID_REF,\n         items_after_statements::ITEMS_AFTER_STATEMENTS,\n         matches::SINGLE_MATCH_ELSE,\n         mem_forget::MEM_FORGET,\n@@ -424,6 +433,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry) {\n         formatting::SUSPICIOUS_ELSE_FORMATTING,\n         functions::NOT_UNSAFE_PTR_ARG_DEREF,\n         functions::TOO_MANY_ARGUMENTS,\n+        identity_conversion::IDENTITY_CONVERSION,\n         identity_op::IDENTITY_OP,\n         if_let_redundant_pattern_matching::IF_LET_REDUNDANT_PATTERN_MATCHING,\n         infinite_iter::INFINITE_ITER,\n@@ -446,6 +456,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry) {\n         loops::FOR_LOOP_OVER_RESULT,\n         loops::ITER_NEXT_LOOP,\n         loops::MANUAL_MEMCPY,\n+        loops::MUT_RANGE_BOUND,\n         loops::NEEDLESS_RANGE_LOOP,\n         loops::NEVER_LOOP,\n         loops::REVERSE_RANGE_LOOP,\n@@ -458,6 +469,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry) {\n         matches::MATCH_REF_PATS,\n         matches::MATCH_WILD_ERR_ARM,\n         matches::SINGLE_MATCH,\n+        methods::CHARS_LAST_CMP,\n         methods::CHARS_NEXT_CMP,\n         methods::CLONE_DOUBLE_REF,\n         methods::CLONE_ON_COPY,\n@@ -535,6 +547,9 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry) {\n         transmute::TRANSMUTE_PTR_TO_REF,\n         transmute::USELESS_TRANSMUTE,\n         transmute::WRONG_TRANSMUTE,\n+        transmute::TRANSMUTE_INT_TO_CHAR,\n+        transmute::TRANSMUTE_INT_TO_BOOL,\n+        transmute::TRANSMUTE_INT_TO_FLOAT,\n         types::ABSURD_EXTREME_COMPARISONS,\n         types::BORROWED_BOX,\n         types::BOX_VEC,"}, {"sha": "16d636c68ab677a39939d760689e9d5451458f58", "filename": "clippy_lints/src/lifetimes.rs", "status": "modified", "additions": 34, "deletions": 32, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/clippy_lints%2Fsrc%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/clippy_lints%2Fsrc%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flifetimes.rs?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -104,19 +104,20 @@ fn check_fn_inner<'a, 'tcx>(\n     for typ in &generics.ty_params {\n         for bound in &typ.bounds {\n             if let TraitTyParamBound(ref trait_ref, _) = *bound {\n-                let bounds = &trait_ref\n+                let params = &trait_ref\n                     .trait_ref\n                     .path\n                     .segments\n                     .last()\n                     .expect(\"a path must have at least one segment\")\n-                    .parameters\n-                    .lifetimes;\n-                for bound in bounds {\n-                    if bound.name != \"'static\" && !bound.is_elided() {\n-                        return;\n+                    .parameters;\n+                if let Some(ref params) = *params {\n+                    for bound in &params.lifetimes {\n+                        if bound.name.name() != \"'static\" && !bound.is_elided() {\n+                            return;\n+                        }\n+                        bounds_lts.push(bound);\n                     }\n-                    bounds_lts.push(bound);\n                 }\n             }\n         }\n@@ -225,7 +226,7 @@ fn allowed_lts_from(named_lts: &[LifetimeDef]) -> HashSet<RefLt> {\n     let mut allowed_lts = HashSet::new();\n     for lt in named_lts {\n         if lt.bounds.is_empty() {\n-            allowed_lts.insert(RefLt::Named(lt.lifetime.name));\n+            allowed_lts.insert(RefLt::Named(lt.lifetime.name.name()));\n         }\n     }\n     allowed_lts.insert(RefLt::Unnamed);\n@@ -235,8 +236,8 @@ fn allowed_lts_from(named_lts: &[LifetimeDef]) -> HashSet<RefLt> {\n \n fn lts_from_bounds<'a, T: Iterator<Item = &'a Lifetime>>(mut vec: Vec<RefLt>, bounds_lts: T) -> Vec<RefLt> {\n     for lt in bounds_lts {\n-        if lt.name != \"'static\" {\n-            vec.push(RefLt::Named(lt.name));\n+        if lt.name.name() != \"'static\" {\n+            vec.push(RefLt::Named(lt.name.name()));\n         }\n     }\n \n@@ -266,12 +267,12 @@ impl<'v, 't> RefVisitor<'v, 't> {\n \n     fn record(&mut self, lifetime: &Option<Lifetime>) {\n         if let Some(ref lt) = *lifetime {\n-            if lt.name == \"'static\" {\n+            if lt.name.name() == \"'static\" {\n                 self.lts.push(RefLt::Static);\n             } else if lt.is_elided() {\n                 self.lts.push(RefLt::Unnamed);\n             } else {\n-                self.lts.push(RefLt::Named(lt.name));\n+                self.lts.push(RefLt::Named(lt.name.name()));\n             }\n         } else {\n             self.lts.push(RefLt::Unnamed);\n@@ -287,23 +288,24 @@ impl<'v, 't> RefVisitor<'v, 't> {\n     }\n \n     fn collect_anonymous_lifetimes(&mut self, qpath: &QPath, ty: &Ty) {\n-        let last_path_segment = &last_path_segment(qpath).parameters;\n-        if !last_path_segment.parenthesized && last_path_segment.lifetimes.is_empty() {\n-            let hir_id = self.cx.tcx.hir.node_to_hir_id(ty.id);\n-            match self.cx.tables.qpath_def(qpath, hir_id) {\n-                Def::TyAlias(def_id) | Def::Struct(def_id) => {\n-                    let generics = self.cx.tcx.generics_of(def_id);\n-                    for _ in generics.regions.as_slice() {\n-                        self.record(&None);\n-                    }\n-                },\n-                Def::Trait(def_id) => {\n-                    let trait_def = self.cx.tcx.trait_def(def_id);\n-                    for _ in &self.cx.tcx.generics_of(trait_def.def_id).regions {\n-                        self.record(&None);\n-                    }\n-                },\n-                _ => (),\n+        if let Some(ref last_path_segment) = last_path_segment(qpath).parameters {\n+            if !last_path_segment.parenthesized && last_path_segment.lifetimes.is_empty() {\n+                let hir_id = self.cx.tcx.hir.node_to_hir_id(ty.id);\n+                match self.cx.tables.qpath_def(qpath, hir_id) {\n+                    Def::TyAlias(def_id) | Def::Struct(def_id) => {\n+                        let generics = self.cx.tcx.generics_of(def_id);\n+                        for _ in generics.regions.as_slice() {\n+                            self.record(&None);\n+                        }\n+                    },\n+                    Def::Trait(def_id) => {\n+                        let trait_def = self.cx.tcx.trait_def(def_id);\n+                        for _ in &self.cx.tcx.generics_of(trait_def.def_id).regions {\n+                            self.record(&None);\n+                        }\n+                    },\n+                    _ => (),\n+                }\n             }\n         }\n     }\n@@ -396,7 +398,7 @@ struct LifetimeChecker {\n impl<'tcx> Visitor<'tcx> for LifetimeChecker {\n     // for lifetimes as parameters of generics\n     fn visit_lifetime(&mut self, lifetime: &'tcx Lifetime) {\n-        self.map.remove(&lifetime.name);\n+        self.map.remove(&lifetime.name.name());\n     }\n \n     fn visit_lifetime_def(&mut self, _: &'tcx LifetimeDef) {\n@@ -415,7 +417,7 @@ fn report_extra_lifetimes<'a, 'tcx: 'a>(cx: &LateContext<'a, 'tcx>, func: &'tcx\n     let hs = generics\n         .lifetimes\n         .iter()\n-        .map(|lt| (lt.lifetime.name, lt.lifetime.span))\n+        .map(|lt| (lt.lifetime.name.name(), lt.lifetime.span))\n         .collect();\n     let mut checker = LifetimeChecker { map: hs };\n \n@@ -434,7 +436,7 @@ struct BodyLifetimeChecker {\n impl<'tcx> Visitor<'tcx> for BodyLifetimeChecker {\n     // for lifetimes as parameters of generics\n     fn visit_lifetime(&mut self, lifetime: &'tcx Lifetime) {\n-        if lifetime.name != keywords::Invalid.name() && lifetime.name != \"'static\" {\n+        if lifetime.name.name() != keywords::Invalid.name() && lifetime.name.name() != \"'static\" {\n             self.lifetimes_used_in_body = true;\n         }\n     }"}, {"sha": "b656fed1cfbc20531899fb332960a3f6b2561790", "filename": "clippy_lints/src/literal_digit_grouping.rs", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/clippy_lints%2Fsrc%2Fliteral_digit_grouping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/clippy_lints%2Fsrc%2Fliteral_digit_grouping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fliteral_digit_grouping.rs?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -279,12 +279,19 @@ impl LiteralDigitGrouping {\n                         let fractional_part = &parts[1].chars().rev().collect::<String>();\n                         let _ = Self::do_lint(fractional_part)\n                             .map(|fractional_group_size| {\n-                                let consistent = Self::parts_consistent(integral_group_size, fractional_group_size, parts[0].len(), parts[1].len());\n+                                let consistent = Self::parts_consistent(integral_group_size,\n+                                                                        fractional_group_size,\n+                                                                        parts[0].len(),\n+                                                                        parts[1].len());\n                                 if !consistent {\n-                                    WarningType::InconsistentDigitGrouping.display(&digit_info.grouping_hint(), cx, &lit.span);\n+                                    WarningType::InconsistentDigitGrouping.display(&digit_info.grouping_hint(),\n+                                                                                   cx,\n+                                                                                   &lit.span);\n                                 }\n                             })\n-                            .map_err(|warning_type| warning_type.display(&digit_info.grouping_hint(), cx, &lit.span));\n+                            .map_err(|warning_type| warning_type.display(&digit_info.grouping_hint(),\n+                                                                         cx,\n+                                                                         &lit.span));\n                     }\n                 })\n                 .map_err(|warning_type| warning_type.display(&digit_info.grouping_hint(), cx, &lit.span));\n@@ -332,7 +339,8 @@ impl LiteralDigitGrouping {\n                 .windows(2)\n                 .all(|ps| ps[1] - ps[0] == group_size + 1)\n                 // number of digits to the left of the last group cannot be bigger than group size.\n-                && (digits.len() - underscore_positions.last().expect(\"there's at least one element\") <= group_size + 1);\n+                && (digits.len() - underscore_positions.last()\n+                                                       .expect(\"there's at least one element\") <= group_size + 1);\n \n             if !consistent {\n                 return Err(WarningType::InconsistentDigitGrouping);"}, {"sha": "8d2a2f8fac619401458b7010b9c2ed19c1d10090", "filename": "clippy_lints/src/loops.rs", "status": "modified", "additions": 153, "deletions": 28, "changes": 181, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/clippy_lints%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/clippy_lints%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops.rs?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -2,16 +2,22 @@ use itertools::Itertools;\n use reexport::*;\n use rustc::hir::*;\n use rustc::hir::def::Def;\n+use rustc::hir::def_id; \n use rustc::hir::intravisit::{walk_block, walk_decl, walk_expr, walk_pat, walk_stmt, NestedVisitorMap, Visitor};\n use rustc::hir::map::Node::{NodeBlock, NodeExpr, NodeStmt};\n use rustc::lint::*;\n use rustc::middle::const_val::ConstVal;\n use rustc::middle::region;\n+// use rustc::middle::region::CodeExtent;\n+use rustc::middle::expr_use_visitor::*;\n+use rustc::middle::mem_categorization::Categorization;\n+use rustc::middle::mem_categorization::cmt;\n use rustc::ty::{self, Ty};\n use rustc::ty::subst::{Subst, Substs};\n use rustc_const_eval::ConstContext;\n use std::collections::{HashMap, HashSet};\n use syntax::ast;\n+use syntax::codemap::Span;\n use utils::sugg;\n use utils::const_to_u64;\n \n@@ -328,6 +334,14 @@ declare_lint! {\n     \"any loop that will always `break` or `return`\"\n }\n \n+/// TODO: add documentation\n+\n+declare_lint! {\n+    pub MUT_RANGE_BOUND,\n+    Warn,\n+    \"for loop over a range where one of the bounds is a mutable variable\"\n+}\n+\n #[derive(Copy, Clone)]\n pub struct Pass;\n \n@@ -348,7 +362,8 @@ impl LintPass for Pass {\n             EMPTY_LOOP,\n             WHILE_LET_ON_ITERATOR,\n             FOR_KV_MAP,\n-            NEVER_LOOP\n+            NEVER_LOOP, \n+            MUT_RANGE_BOUND\n         )\n     }\n }\n@@ -363,7 +378,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n         match expr.node {\n             ExprWhile(_, ref block, _) |\n             ExprLoop(ref block, _, _) => {\n-                if never_loop(block, &expr.id) {\n+                if never_loop(block, expr.id) {\n                     span_lint(cx, NEVER_LOOP, expr.span, \"this loop never actually loops\");\n                 }\n             },\n@@ -470,27 +485,27 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n     }\n }\n \n-fn never_loop(block: &Block, id: &NodeId) -> bool {\n-    !contains_continue_block(block, id) && loop_exit_block(block)\n+fn never_loop(block: &Block, id: NodeId) -> bool {\n+    !contains_continue_block(block, Some(id)) && loop_exit_block(block, &mut vec![id])\n }\n \n-fn contains_continue_block(block: &Block, dest: &NodeId) -> bool {\n+fn contains_continue_block(block: &Block, dest: Option<NodeId>) -> bool {\n     block.stmts.iter().any(|e| contains_continue_stmt(e, dest)) ||\n         block.expr.as_ref().map_or(\n             false,\n             |e| contains_continue_expr(e, dest),\n         )\n }\n \n-fn contains_continue_stmt(stmt: &Stmt, dest: &NodeId) -> bool {\n+fn contains_continue_stmt(stmt: &Stmt, dest: Option<NodeId>) -> bool {\n     match stmt.node {\n         StmtSemi(ref e, _) |\n         StmtExpr(ref e, _) => contains_continue_expr(e, dest),\n         StmtDecl(ref d, _) => contains_continue_decl(d, dest),\n     }\n }\n \n-fn contains_continue_decl(decl: &Decl, dest: &NodeId) -> bool {\n+fn contains_continue_decl(decl: &Decl, dest: Option<NodeId>) -> bool {\n     match decl.node {\n         DeclLocal(ref local) => {\n             local.init.as_ref().map_or(\n@@ -502,7 +517,7 @@ fn contains_continue_decl(decl: &Decl, dest: &NodeId) -> bool {\n     }\n }\n \n-fn contains_continue_expr(expr: &Expr, dest: &NodeId) -> bool {\n+fn contains_continue_expr(expr: &Expr, dest: Option<NodeId>) -> bool {\n     match expr.node {\n         ExprRet(Some(ref e)) |\n         ExprBox(ref e) |\n@@ -540,31 +555,32 @@ fn contains_continue_expr(expr: &Expr, dest: &NodeId) -> bool {\n                 |e| contains_continue_expr(e, dest),\n             )\n         },\n-        ExprAgain(d) => d.target_id.opt_id().map_or(false, |id| id == *dest),\n+        ExprAgain(d) => dest.map_or(true, |dest| d.target_id.opt_id().map_or(false, |id| id == dest)),\n         _ => false,\n     }\n }\n \n-fn loop_exit_block(block: &Block) -> bool {\n-    block.stmts.iter().any(|e| loop_exit_stmt(e)) || block.expr.as_ref().map_or(false, |e| loop_exit_expr(e))\n+fn loop_exit_block(block: &Block, loops: &mut Vec<NodeId>) -> bool {\n+    block.stmts.iter().take_while(|s| !contains_continue_stmt(s, None)).any(|s| loop_exit_stmt(s, loops))\n+        || block.expr.as_ref().map_or(false, |e| loop_exit_expr(e, loops))\n }\n \n-fn loop_exit_stmt(stmt: &Stmt) -> bool {\n+fn loop_exit_stmt(stmt: &Stmt, loops: &mut Vec<NodeId>) -> bool {\n     match stmt.node {\n         StmtSemi(ref e, _) |\n-        StmtExpr(ref e, _) => loop_exit_expr(e),\n-        StmtDecl(ref d, _) => loop_exit_decl(d),\n+        StmtExpr(ref e, _) => loop_exit_expr(e, loops),\n+        StmtDecl(ref d, _) => loop_exit_decl(d, loops),\n     }\n }\n \n-fn loop_exit_decl(decl: &Decl) -> bool {\n+fn loop_exit_decl(decl: &Decl, loops: &mut Vec<NodeId>) -> bool {\n     match decl.node {\n-        DeclLocal(ref local) => local.init.as_ref().map_or(false, |e| loop_exit_expr(e)),\n+        DeclLocal(ref local) => local.init.as_ref().map_or(false, |e| loop_exit_expr(e, loops)),\n         _ => false,\n     }\n }\n \n-fn loop_exit_expr(expr: &Expr) -> bool {\n+fn loop_exit_expr(expr: &Expr, loops: &mut Vec<NodeId>) -> bool {\n     match expr.node {\n         ExprBox(ref e) |\n         ExprUnary(_, ref e) |\n@@ -573,22 +589,34 @@ fn loop_exit_expr(expr: &Expr) -> bool {\n         ExprField(ref e, _) |\n         ExprTupField(ref e, _) |\n         ExprAddrOf(_, ref e) |\n-        ExprRepeat(ref e, _) => loop_exit_expr(e),\n+        ExprRepeat(ref e, _) => loop_exit_expr(e, loops),\n         ExprArray(ref es) |\n         ExprMethodCall(_, _, ref es) |\n-        ExprTup(ref es) => es.iter().any(|e| loop_exit_expr(e)),\n-        ExprCall(ref e, ref es) => loop_exit_expr(e) || es.iter().any(|e| loop_exit_expr(e)),\n+        ExprTup(ref es) => es.iter().any(|e| loop_exit_expr(e, loops)),\n+        ExprCall(ref e, ref es) => loop_exit_expr(e, loops) || es.iter().any(|e| loop_exit_expr(e, loops)),\n         ExprBinary(_, ref e1, ref e2) |\n         ExprAssign(ref e1, ref e2) |\n         ExprAssignOp(_, ref e1, ref e2) |\n-        ExprIndex(ref e1, ref e2) => [e1, e2].iter().any(|e| loop_exit_expr(e)),\n-        ExprIf(ref e, ref e2, ref e3) => {\n-            loop_exit_expr(e) || e3.as_ref().map_or(false, |e| loop_exit_expr(e)) && loop_exit_expr(e2)\n+        ExprIndex(ref e1, ref e2) => [e1, e2].iter().any(|e| loop_exit_expr(e, loops)),\n+        ExprIf(ref e, ref e2, ref e3) => loop_exit_expr(e, loops)\n+            || e3.as_ref().map_or(false, |e3| loop_exit_expr(e3, loops)) && loop_exit_expr(e2, loops),\n+        ExprLoop(ref b, _, _) => {\n+            loops.push(expr.id);\n+            let val = loop_exit_block(b, loops);\n+            loops.pop();\n+            val\n         },\n-        ExprWhile(ref e, ref b, _) => loop_exit_expr(e) || loop_exit_block(b),\n-        ExprMatch(ref e, ref arms, _) => loop_exit_expr(e) || arms.iter().all(|a| loop_exit_expr(&a.body)),\n-        ExprBlock(ref b) => loop_exit_block(b),\n-        ExprBreak(_, _) | ExprAgain(_) | ExprRet(_) => true,\n+        ExprWhile(ref e, ref b, _) => {\n+            loops.push(expr.id);\n+            let val = loop_exit_expr(e, loops) || loop_exit_block(b, loops);\n+            loops.pop();\n+            val\n+        },\n+        ExprMatch(ref e, ref arms, _) => loop_exit_expr(e, loops) || arms.iter().all(|a| loop_exit_expr(&a.body, loops)),\n+        ExprBlock(ref b) => loop_exit_block(b, loops),\n+        ExprAgain(d) => d.target_id.opt_id().map_or(false, |id| loops.iter().skip(1).all(|&id2| id != id2)),\n+        ExprBreak(d, _) => d.target_id.opt_id().map_or(false, |id| loops[0] == id),\n+        ExprRet(_) => true,\n         _ => false,\n     }\n }\n@@ -605,6 +633,7 @@ fn check_for_loop<'a, 'tcx>(\n     check_for_loop_arg(cx, pat, arg, expr);\n     check_for_loop_explicit_counter(cx, arg, body, expr);\n     check_for_loop_over_map_kv(cx, pat, arg, body, expr);\n+    check_for_mut_range_bound(cx, arg, body);\n     detect_manual_memcpy(cx, pat, arg, body, expr);\n }\n \n@@ -1294,6 +1323,102 @@ fn check_for_loop_over_map_kv<'a, 'tcx>(\n     }\n }\n \n+struct MutateDelegate {\n+    node_id_low: Option<NodeId>,\n+    node_id_high: Option<NodeId>,\n+    span_low: Option<Span>,\n+    span_high: Option<Span>,\n+}\n+\n+impl<'tcx> Delegate<'tcx> for MutateDelegate {\n+    fn consume(&mut self, _: NodeId, _: Span, _: cmt<'tcx>, _: ConsumeMode) {\n+    }\n+  \n+    fn matched_pat(&mut self, _: &Pat, _: cmt<'tcx>, _: MatchMode) {\n+    }\n+\n+    fn consume_pat(&mut self, _: &Pat, _: cmt<'tcx>, _: ConsumeMode) {\n+    }\n+\n+    fn borrow(&mut self, _: NodeId, sp: Span, cmt: cmt<'tcx>, _: ty::Region, bk: ty::BorrowKind, _: LoanCause) {\n+        if let ty::BorrowKind::MutBorrow = bk {\n+            if let Categorization::Local(id) = cmt.cat {\n+                if Some(id) == self.node_id_low {\n+                    self.span_low = Some(sp)\n+                }\n+                if Some(id) == self.node_id_high {\n+                    self.span_high = Some(sp)\n+                }\n+            }\n+        }\n+    }\n+\n+    fn mutate(&mut self, _: NodeId, sp: Span, cmt: cmt<'tcx>, _: MutateMode) {\n+        if let Categorization::Local(id) = cmt.cat {\n+            if Some(id) == self.node_id_low {\n+                self.span_low = Some(sp)\n+            }\n+            if Some(id) == self.node_id_high {\n+                self.span_high = Some(sp)\n+            }\n+        }\n+    }\n+\n+    fn decl_without_init(&mut self, _: NodeId, _: Span) {\n+    }\n+}\n+\n+impl<'tcx> MutateDelegate {\n+    fn mutation_span(&self) -> (Option<Span>, Option<Span>) {\n+        (self.span_low, self.span_high)\n+    }\n+}\n+\n+fn check_for_mut_range_bound(cx: &LateContext, arg: &Expr, body: &Expr) {\n+    if let Some(higher::Range { start: Some(start), end: Some(end), .. }) = higher::range(arg) {\n+        let mut_ids = vec![check_for_mutability(cx, start), check_for_mutability(cx, end)];\n+        if mut_ids[0].is_some() || mut_ids[1].is_some() {\n+            let (span_low, span_high) = check_for_mutation(cx, body, &mut_ids);\n+            mut_warn_with_span(cx, span_low);\n+            mut_warn_with_span(cx, span_high);\n+        }\n+    }\n+}\n+\n+fn mut_warn_with_span(cx: &LateContext, span: Option<Span>) {\n+    if let Some(sp) = span {\n+        span_lint(cx, MUT_RANGE_BOUND, sp, \"attempt to mutate range bound within loop; note that the range of the loop is unchanged\");\n+    }\n+}\n+\n+fn check_for_mutability(cx: &LateContext, bound: &Expr) -> Option<NodeId> {\n+    if_let_chain! {[\n+        let ExprPath(ref qpath) = bound.node,\n+        let QPath::Resolved(None, _) = *qpath,\n+    ], {\n+        let def = cx.tables.qpath_def(qpath, bound.hir_id);\n+        if let Def::Local(node_id) = def {\n+            let node_str = cx.tcx.hir.get(node_id);\n+            if_let_chain! {[\n+                let map::Node::NodeBinding(pat) = node_str,\n+                let PatKind::Binding(bind_ann, _, _, _) = pat.node,\n+                let BindingAnnotation::Mutable = bind_ann,\n+            ], {\n+                return Some(node_id);\n+            }}\n+        }\n+    }}\n+    None\n+}\n+\n+fn check_for_mutation(cx: &LateContext, body: &Expr, bound_ids: &[Option<NodeId>]) -> (Option<Span>, Option<Span>) {\n+    let mut delegate = MutateDelegate { node_id_low: bound_ids[0], node_id_high: bound_ids[1], span_low: None, span_high: None };\n+    let def_id = def_id::DefId::local(body.hir_id.owner);\n+    let region_scope_tree = &cx.tcx.region_scope_tree(def_id);\n+    ExprUseVisitor::new(&mut delegate, cx.tcx, cx.param_env, region_scope_tree, cx.tables).walk_expr(body);\n+    delegate.mutation_span()\n+}\n+\n /// Return true if the pattern is a `PatWild` or an ident prefixed with `'_'`.\n fn pat_is_wild<'tcx>(pat: &'tcx PatKind, body: &'tcx Expr) -> bool {\n     match *pat {\n@@ -1492,7 +1617,7 @@ fn is_ref_iterable_type(cx: &LateContext, e: &Expr) -> bool {\n fn is_iterable_array(ty: Ty) -> bool {\n     // IntoIterator is currently only implemented for array sizes <= 32 in rustc\n     match ty.sty {\n-        ty::TyArray(_, n) => (0...32).contains(const_to_u64(n)),\n+        ty::TyArray(_, n) => (0..=32).contains(const_to_u64(n)),\n         _ => false,\n     }\n }"}, {"sha": "e35e1ab477c0e979d11896e26303310697ce20d6", "filename": "clippy_lints/src/map_clone.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/clippy_lints%2Fsrc%2Fmap_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/clippy_lints%2Fsrc%2Fmap_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmap_clone.rs?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -100,7 +100,8 @@ fn expr_eq_name(expr: &Expr, id: ast::Name) -> bool {\n             let arg_segment = [\n                 PathSegment {\n                     name: id,\n-                    parameters: PathParameters::none(),\n+                    parameters: None,\n+                    infer_types: true,\n                 },\n             ];\n             !path.is_global() && path.segments[..] == arg_segment"}, {"sha": "6d3a3f39d1a2413622426412955afe2b7da203b8", "filename": "clippy_lints/src/methods.rs", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/clippy_lints%2Fsrc%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/clippy_lints%2Fsrc%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods.rs?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -1617,11 +1617,18 @@ fn is_as_ref_or_mut_trait(ty: &hir::Ty, self_ty: &hir::Ty, generics: &hir::Gener\n                         match_path(path, name) &&\n                             path.segments\n                                 .last()\n-                                .map_or(false, |s| if s.parameters.parenthesized {\n-                                    false\n-                                } else {\n-                                    s.parameters.types.len() == 1 &&\n-                                        (is_self_ty(&s.parameters.types[0]) || is_ty(&*s.parameters.types[0], self_ty))\n+                                .map_or(false, |s| {\n+                                    if let Some(ref params) = s.parameters {\n+                                        if params.parenthesized {\n+                                            false\n+                                        } else {\n+                                            params.types.len() == 1 &&\n+                                                (is_self_ty(&params.types[0])\n+                                                  || is_ty(&*params.types[0], self_ty))\n+                                        }\n+                                    } else {\n+                                        false\n+                                    }\n                                 })\n                     } else {\n                         false"}, {"sha": "2ad6c36ab5f03618cd5562d08be2c8c950b419e4", "filename": "clippy_lints/src/missing_doc.rs", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/clippy_lints%2Fsrc%2Fmissing_doc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/clippy_lints%2Fsrc%2Fmissing_doc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmissing_doc.rs?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -15,16 +15,7 @@\n // *rustc*'s\n // [`missing_doc`].\n //\n-// [`missing_doc`]:\n-// https://github.\n-// com/rust-lang/rust/blob/d6d05904697d89099b55da3331155392f1db9c00/src/librustc_lint/builtin.\n-//\n-//\n-//\n-//\n-//\n-//\n-// rs#L246\n+// [`missing_doc`]: https://github.com/rust-lang/rust/blob/d6d05904697d89099b55da3331155392f1db9c00/src/librustc_lint/builtin.rs#L246\n //\n \n use rustc::hir;"}, {"sha": "ccdb3c179cc190b6d30174f78830047e6c5049bc", "filename": "clippy_lints/src/needless_pass_by_value.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -144,7 +144,8 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NeedlessPassByValue {\n                         let TyPath(QPath::Resolved(_, ref path)) = input.node,\n                         let Some(elem_ty) = path.segments.iter()\n                             .find(|seg| seg.name == \"Vec\")\n-                            .map(|ps| &ps.parameters.types[0]),\n+                            .and_then(|ps| ps.parameters.as_ref())\n+                            .map(|params| &params.types[0]),\n                     ], {\n                         let slice_ty = format!(\"&[{}]\", snippet(cx, elem_ty.span, \"_\"));\n                         db.span_suggestion(input.span,"}, {"sha": "96557b8b0cb4a478f0838ca0ac8f18aa1bd970aa", "filename": "clippy_lints/src/print.rs", "status": "modified", "additions": 22, "deletions": 7, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/clippy_lints%2Fsrc%2Fprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/clippy_lints%2Fsrc%2Fprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fprint.rs?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -1,9 +1,10 @@\n use rustc::hir::*;\n use rustc::hir::map::Node::{NodeImplItem, NodeItem};\n use rustc::lint::*;\n-use utils::{paths, opt_def_id};\n+use syntax::ast::LitKind;\n+use syntax::symbol::InternedString;\n use utils::{is_expn_of, match_def_path, match_path, resolve_node, span_lint};\n-use format::get_argument_fmtstr_parts;\n+use utils::{paths, opt_def_id};\n \n /// **What it does:** This lint warns when you using `print!()` with a format\n /// string that\n@@ -103,15 +104,14 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n                         let ExprTup(ref args) = args.node,\n \n                         // collect the format string parts and check the last one\n-                        let Some(fmtstrs) = get_argument_fmtstr_parts(cx, &args_args[0]),\n-                        let Some(last_str) = fmtstrs.last(),\n-                        let Some('\\n') = last_str.chars().last(),\n+                        let Some((fmtstr, fmtlen)) = get_argument_fmtstr_parts(&args_args[0]),\n+                        let Some('\\n') = fmtstr.chars().last(),\n \n                         // \"foo{}bar\" is made into two strings + one argument,\n                         // if the format string starts with `{}` (eg. \"{}foo\"),\n                         // the string array is prepended an empty string \"\".\n                         // We only want to check the last string after any `{}`:\n-                        args.len() < fmtstrs.len(),\n+                        args.len() < fmtlen,\n                     ], {\n                         span_lint(cx, PRINT_WITH_NEWLINE, span,\n                                   \"using `print!()` with a format string that ends in a \\\n@@ -124,7 +124,8 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n             else if args.len() == 2 && match_def_path(cx.tcx, fun_id, &paths::FMT_ARGUMENTV1_NEW) {\n                 if let ExprPath(ref qpath) = args[1].node {\n                     if let Some(def_id) = opt_def_id(cx.tables.qpath_def(qpath, args[1].hir_id)) {\n-                        if match_def_path(cx.tcx, def_id, &paths::DEBUG_FMT_METHOD) && !is_in_debug_impl(cx, expr) && is_expn_of(expr.span, \"panic\").is_none() {\n+                        if match_def_path(cx.tcx, def_id, &paths::DEBUG_FMT_METHOD)\n+                                && !is_in_debug_impl(cx, expr) && is_expn_of(expr.span, \"panic\").is_none() {\n                             span_lint(cx, USE_DEBUG, args[0].span, \"use of `Debug`-based formatting\");\n                         }\n                     }\n@@ -149,3 +150,17 @@ fn is_in_debug_impl(cx: &LateContext, expr: &Expr) -> bool {\n \n     false\n }\n+\n+/// Returns the slice of format string parts in an `Arguments::new_v1` call.\n+fn get_argument_fmtstr_parts(expr: &Expr) -> Option<(InternedString, usize)> {\n+    if_let_chain! {[\n+        let ExprAddrOf(_, ref expr) = expr.node, // &[\"\u2026\", \"\u2026\", \u2026]\n+        let ExprArray(ref exprs) = expr.node,\n+        let Some(expr) = exprs.last(),\n+        let ExprLit(ref lit) = expr.node,\n+        let LitKind::Str(ref lit, _) = lit.node,\n+    ], {\n+        return Some((lit.as_str(), exprs.len()));\n+    }}\n+    None\n+}"}, {"sha": "03c94cbf3fbd747b5db7b51cb9bed6000be33b20", "filename": "clippy_lints/src/ptr.rs", "status": "modified", "additions": 65, "deletions": 48, "changes": 113, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/clippy_lints%2Fsrc%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/clippy_lints%2Fsrc%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fptr.rs?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -1,5 +1,6 @@\n //! Checks for usage of  `&Vec[_]` and `&String`.\n \n+use std::borrow::Cow;\n use rustc::hir::*;\n use rustc::hir::intravisit::{walk_expr, NestedVisitorMap, Visitor};\n use rustc::hir::map::NodeItem;\n@@ -158,49 +159,53 @@ fn check_fn(cx: &LateContext, decl: &FnDecl, fn_id: NodeId, opt_body_id: Option<\n                 let mut ty_snippet = None;\n                 if_let_chain!([\n                     let TyPath(QPath::Resolved(_, ref path)) = walk_ptrs_hir_ty(arg).node,\n-                    let Some(&PathSegment{ref parameters, ..}) = path.segments.last(),\n+                    let Some(&PathSegment{parameters: Some(ref parameters), ..}) = path.segments.last(),\n                     parameters.types.len() == 1,\n                 ], {\n                     ty_snippet = snippet_opt(cx, parameters.types[0].span);\n                 });\n-                let spans = get_spans(cx, opt_body_id, idx, \"to_owned\");\n-                span_lint_and_then(\n-                    cx,\n-                    PTR_ARG,\n-                    arg.span,\n-                    \"writing `&Vec<_>` instead of `&[_]` involves one more reference and cannot be used \\\n-                     with non-Vec-based slices.\",\n-                    |db| {\n-                        if let Some(ref snippet) = ty_snippet {\n-                            db.span_suggestion(arg.span,\n-                                               \"change this to\",\n-                                               format!(\"&[{}]\", snippet));\n+                if let Ok(spans) = get_spans(cx, opt_body_id, idx, &[(\"clone\", \".to_owned()\")]) {\n+                    span_lint_and_then(\n+                        cx,\n+                        PTR_ARG,\n+                        arg.span,\n+                        \"writing `&Vec<_>` instead of `&[_]` involves one more reference and cannot be used \\\n+                         with non-Vec-based slices.\",\n+                        |db| {\n+                            if let Some(ref snippet) = ty_snippet {\n+                                db.span_suggestion(arg.span,\n+                                                   \"change this to\",\n+                                                   format!(\"&[{}]\", snippet));\n+                            }\n+                            for (clonespan, suggestion) in spans {\n+                                db.span_suggestion(clonespan,\n+                                                   &snippet_opt(cx, clonespan).map_or(\"change the call to\".into(),\n+                                                        |x| Cow::Owned(format!(\"change `{}` to\", x))),\n+                                                   suggestion.into());\n+                            }\n                         }\n-                        for (clonespan, suggestion) in spans {\n-                            db.span_suggestion(clonespan,\n-                                               \"change the `.clone()` to\",\n-                                               suggestion);\n-                        }\n-                    }\n-                );\n+                    );\n+                }\n             } else if match_type(cx, ty, &paths::STRING) {\n-                let spans = get_spans(cx, opt_body_id, idx, \"to_string\");\n-                span_lint_and_then(\n-                    cx,\n-                    PTR_ARG,\n-                    arg.span,\n-                    \"writing `&String` instead of `&str` involves a new object where a slice will do.\",\n-                    |db| {\n-                        db.span_suggestion(arg.span,\n-                                           \"change this to\",\n-                                           \"&str\".into());\n-                        for (clonespan, suggestion) in spans {\n-                            db.span_suggestion_short(clonespan,\n-                                               \"change the `.clone` to \",\n-                                               suggestion);\n+                if let Ok(spans) = get_spans(cx, opt_body_id, idx, &[(\"clone\", \".to_string()\"), (\"as_str\", \"\")]) {\n+                    span_lint_and_then(\n+                        cx,\n+                        PTR_ARG,\n+                        arg.span,\n+                        \"writing `&String` instead of `&str` involves a new object where a slice will do.\",\n+                        |db| {\n+                            db.span_suggestion(arg.span,\n+                                               \"change this to\",\n+                                               \"&str\".into());\n+                            for (clonespan, suggestion) in spans {\n+                                db.span_suggestion_short(clonespan,\n+                                                   &snippet_opt(cx, clonespan).map_or(\"change the call to\".into(),\n+                                                        |x| Cow::Owned(format!(\"change `{}` to\", x))),\n+                                                   suggestion.into());\n+                            }\n                         }\n-                    }\n-                );\n+                    );\n+                }\n             }\n         }\n     }\n@@ -229,38 +234,50 @@ fn check_fn(cx: &LateContext, decl: &FnDecl, fn_id: NodeId, opt_body_id: Option<\n     }\n }\n \n-fn get_spans(cx: &LateContext, opt_body_id: Option<BodyId>, idx: usize, fn_name: &'static str) -> Vec<(Span, String)> {\n+fn get_spans(cx: &LateContext, opt_body_id: Option<BodyId>, idx: usize, replacements: &'static [(&'static str, &'static str)]) -> Result<Vec<(Span, Cow<'static, str>)>, ()> {\n     if let Some(body) = opt_body_id.map(|id| cx.tcx.hir.body(id)) {\n-        get_binding_name(&body.arguments[idx]).map_or_else(Vec::new,\n-                                                |name| extract_clone_suggestions(cx, name, fn_name, body))\n+        get_binding_name(&body.arguments[idx]).map_or_else(|| Ok(vec![]),\n+                                                |name| extract_clone_suggestions(cx, name, replacements, body))\n     } else {\n-        vec![]\n+        Ok(vec![])\n     }\n }\n \n-fn extract_clone_suggestions<'a, 'tcx: 'a>(cx: &LateContext<'a, 'tcx>, name: Name, fn_name: &'static str, body: &'tcx Body) -> Vec<(Span, String)> {\n+fn extract_clone_suggestions<'a, 'tcx: 'a>(cx: &LateContext<'a, 'tcx>, name: Name, replace: &'static [(&'static str, &'static str)], body: &'tcx Body) -> Result<Vec<(Span, Cow<'static, str>)>, ()> {\n     let mut visitor = PtrCloneVisitor {\n         cx,\n         name,\n-        fn_name,\n-        spans: vec![]\n+        replace,\n+        spans: vec![],\n+        abort: false,\n     };\n     visitor.visit_body(body);\n-    visitor.spans\n+    if visitor.abort { Err(()) } else { Ok(visitor.spans) }\n }\n \n struct PtrCloneVisitor<'a, 'tcx: 'a> {\n     cx: &'a LateContext<'a, 'tcx>,\n     name: Name,\n-    fn_name: &'static str,\n-    spans: Vec<(Span, String)>,\n+    replace: &'static [(&'static str, &'static str)],\n+    spans: Vec<(Span, Cow<'static, str>)>,\n+    abort: bool,\n }\n \n impl<'a, 'tcx: 'a> Visitor<'tcx> for PtrCloneVisitor<'a, 'tcx> {\n     fn visit_expr(&mut self, expr: &'tcx Expr) {\n+        if self.abort { return; }\n         if let ExprMethodCall(ref seg, _, ref args) = expr.node {\n-            if args.len() == 1 && match_var(&args[0], self.name) && seg.name == \"clone\" {\n-                self.spans.push((expr.span, format!(\"{}.{}()\", snippet(self.cx, args[0].span, \"_\"), self.fn_name)));\n+            if args.len() == 1 && match_var(&args[0], self.name) {\n+                if seg.name == \"capacity\" {\n+                    self.abort = true;\n+                    return;\n+                }\n+                for &(fn_name, suffix) in self.replace {\n+                    if seg.name == fn_name {\n+                        self.spans.push((expr.span, snippet(self.cx, args[0].span, \"_\") + suffix));\n+                        return;\n+                    }\n+                }\n             }\n             return;\n         }"}, {"sha": "a97c24166b48dc5ecfcd71195ec58056dc0c2d1e", "filename": "clippy_lints/src/transmute.rs", "status": "modified", "additions": 112, "deletions": 3, "changes": 115, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/clippy_lints%2Fsrc%2Ftransmute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/clippy_lints%2Fsrc%2Ftransmute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftransmute.rs?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -1,6 +1,8 @@\n use rustc::lint::*;\n use rustc::ty::{self, Ty};\n use rustc::hir::*;\n+use std::borrow::Cow;\n+use syntax::ast;\n use utils::{last_path_segment, match_def_path, paths, snippet, span_lint, span_lint_and_then};\n use utils::{sugg, opt_def_id};\n \n@@ -76,11 +78,73 @@ declare_lint! {\n     \"transmutes from a pointer to a reference type\"\n }\n \n+/// **What it does:** Checks for transmutes from an integer to a `char`.\n+///\n+/// **Why is this bad?** Not every integer is a unicode scalar value.\n+///\n+/// **Known problems:** None.\n+///\n+/// **Example:**\n+/// ```rust\n+/// let _: char = std::mem::transmute(x); // where x: u32\n+/// // should be:\n+/// let _: Option<char> = std::char::from_u32(x);\n+/// ```\n+declare_lint! {\n+    pub TRANSMUTE_INT_TO_CHAR,\n+    Warn,\n+    \"transmutes from an integer to a `char`\"\n+}\n+\n+/// **What it does:** Checks for transmutes from an integer to a `bool`.\n+///\n+/// **Why is this bad?** This might result in an invalid in-memory representation of a `bool`.\n+///\n+/// **Known problems:** None.\n+///\n+/// **Example:**\n+/// ```rust\n+/// let _: bool = std::mem::transmute(x); // where x: u8\n+/// // should be:\n+/// let _: bool = x != 0;\n+/// ```\n+declare_lint! {\n+    pub TRANSMUTE_INT_TO_BOOL,\n+    Warn,\n+    \"transmutes from an integer to a `bool`\"\n+}\n+\n+/// **What it does:** Checks for transmutes from an integer to a float.\n+///\n+/// **Why is this bad?** This might result in an invalid in-memory representation of a float.\n+///\n+/// **Known problems:** None.\n+///\n+/// **Example:**\n+/// ```rust\n+/// let _: f32 = std::mem::transmute(x); // where x: u32\n+/// // should be:\n+/// let _: f32 = f32::from_bits(x);\n+/// ```\n+declare_lint! {\n+    pub TRANSMUTE_INT_TO_FLOAT,\n+    Warn,\n+    \"transmutes from an integer to a float\"\n+}\n+\n pub struct Transmute;\n \n impl LintPass for Transmute {\n     fn get_lints(&self) -> LintArray {\n-        lint_array!(CROSSPOINTER_TRANSMUTE, TRANSMUTE_PTR_TO_REF, USELESS_TRANSMUTE, WRONG_TRANSMUTE)\n+        lint_array!(\n+            CROSSPOINTER_TRANSMUTE,\n+            TRANSMUTE_PTR_TO_REF,\n+            USELESS_TRANSMUTE,\n+            WRONG_TRANSMUTE,\n+            TRANSMUTE_INT_TO_CHAR,\n+            TRANSMUTE_INT_TO_BOOL,\n+            TRANSMUTE_INT_TO_FLOAT\n+        )\n     }\n }\n \n@@ -177,6 +241,50 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Transmute {\n                                     db.span_suggestion(e.span, \"try\", sugg::make_unop(deref, arg).to_string());\n                                 },\n                             ),\n+                            (&ty::TyInt(ast::IntTy::I32), &ty::TyChar) |\n+                            (&ty::TyUint(ast::UintTy::U32), &ty::TyChar) => span_lint_and_then(\n+                                cx,\n+                                TRANSMUTE_INT_TO_CHAR,\n+                                e.span,\n+                                &format!(\"transmute from a `{}` to a `char`\", from_ty),\n+                                |db| {\n+                                    let arg = sugg::Sugg::hir(cx, &args[0], \"..\");\n+                                    let arg = if let ty::TyInt(_) = from_ty.sty {\n+                                        arg.as_ty(ty::TyUint(ast::UintTy::U32))\n+                                    } else {\n+                                        arg\n+                                    };\n+                                    db.span_suggestion(e.span, \"consider using\", format!(\"std::char::from_u32({})\", arg.to_string()));\n+                                }\n+                            ),\n+                            (&ty::TyInt(ast::IntTy::I8), &ty::TyBool) |\n+                            (&ty::TyUint(ast::UintTy::U8), &ty::TyBool) => span_lint_and_then(\n+                                cx,\n+                                TRANSMUTE_INT_TO_BOOL,\n+                                e.span,\n+                                &format!(\"transmute from a `{}` to a `bool`\", from_ty),\n+                                |db| {\n+                                    let arg = sugg::Sugg::hir(cx, &args[0], \"..\");\n+                                    let zero = sugg::Sugg::NonParen(Cow::from(\"0\"));\n+                                    db.span_suggestion(e.span, \"consider using\", sugg::make_binop(ast::BinOpKind::Ne, &arg, &zero).to_string());\n+                                }\n+                            ),\n+                            (&ty::TyInt(_), &ty::TyFloat(_)) |\n+                            (&ty::TyUint(_), &ty::TyFloat(_)) => span_lint_and_then(\n+                                cx,\n+                                TRANSMUTE_INT_TO_FLOAT,\n+                                e.span,\n+                                &format!(\"transmute from a `{}` to a `{}`\", from_ty, to_ty),\n+                                |db| {\n+                                    let arg = sugg::Sugg::hir(cx, &args[0], \"..\");\n+                                    let arg = if let ty::TyInt(int_ty) = from_ty.sty {\n+                                        arg.as_ty(format!(\"u{}\", int_ty.bit_width().map_or_else(|| \"size\".to_string(), |v| v.to_string())))\n+                                    } else {\n+                                        arg\n+                                    };\n+                                    db.span_suggestion(e.span, \"consider using\", format!(\"{}::from_bits({})\", to_ty, arg.to_string()));\n+                                }\n+                            ),\n                             _ => return,\n                         };\n                     }\n@@ -194,8 +302,9 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Transmute {\n fn get_type_snippet(cx: &LateContext, path: &QPath, to_rty: Ty) -> String {\n     let seg = last_path_segment(path);\n     if_let_chain!{[\n-        !seg.parameters.parenthesized,\n-        let Some(to_ty) = seg.parameters.types.get(1),\n+        let Some(ref params) = seg.parameters,\n+        !params.parenthesized,\n+        let Some(to_ty) = params.types.get(1),\n         let TyRptr(_, ref to_ty) = to_ty.node,\n     ], {\n         return snippet(cx, to_ty.ty.span, &to_rty.to_string()).to_string();"}, {"sha": "acea709123bd5f3db19fde2dc8fdebb11088e698", "filename": "clippy_lints/src/types.rs", "status": "modified", "additions": 58, "deletions": 48, "changes": 106, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/clippy_lints%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/clippy_lints%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes.rs?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -154,8 +154,9 @@ fn check_ty(cx: &LateContext, ast_ty: &hir::Ty, is_local: bool) {\n                 if Some(def_id) == cx.tcx.lang_items().owned_box() {\n                     let last = last_path_segment(qpath);\n                     if_let_chain! {[\n-                        !last.parameters.parenthesized,\n-                        let Some(vec) = last.parameters.types.get(0),\n+                        let Some(ref params) = last.parameters,\n+                        !params.parenthesized,\n+                        let Some(vec) = params.types.get(0),\n                         let TyPath(ref qpath) = vec.node,\n                         let Some(did) = opt_def_id(cx.tables.qpath_def(qpath, cx.tcx.hir.node_to_hir_id(vec.id))),\n                         match_def_path(cx.tcx, did, &paths::VEC),\n@@ -183,67 +184,32 @@ fn check_ty(cx: &LateContext, ast_ty: &hir::Ty, is_local: bool) {\n                     check_ty(cx, ty, is_local);\n                     for ty in p.segments\n                         .iter()\n-                        .flat_map(|seg| seg.parameters.types.iter())\n+                        .flat_map(|seg| seg.parameters.as_ref()\n+                                           .map_or_else(|| [].iter(),\n+                                                        |params| params.types.iter()))\n                     {\n                         check_ty(cx, ty, is_local);\n                     }\n                 },\n                 QPath::Resolved(None, ref p) => for ty in p.segments\n                     .iter()\n-                    .flat_map(|seg| seg.parameters.types.iter())\n+                    .flat_map(|seg| seg.parameters.as_ref()\n+                                       .map_or_else(|| [].iter(),\n+                                                    |params| params.types.iter()))\n                 {\n                     check_ty(cx, ty, is_local);\n                 },\n                 QPath::TypeRelative(ref ty, ref seg) => {\n                     check_ty(cx, ty, is_local);\n-                    for ty in seg.parameters.types.iter() {\n-                        check_ty(cx, ty, is_local);\n-                    }\n-                },\n-            }\n-        },\n-        TyRptr(ref lt, MutTy { ref ty, ref mutbl }) => {\n-            match ty.node {\n-                TyPath(ref qpath) => {\n-                    let hir_id = cx.tcx.hir.node_to_hir_id(ty.id);\n-                    let def = cx.tables.qpath_def(qpath, hir_id);\n-                    if_let_chain! {[\n-                        let Some(def_id) = opt_def_id(def),\n-                        Some(def_id) == cx.tcx.lang_items().owned_box(),\n-                        let QPath::Resolved(None, ref path) = *qpath,\n-                        let [ref bx] = *path.segments,\n-                        !bx.parameters.parenthesized,\n-                        let [ref inner] = *bx.parameters.types\n-                    ], {\n-                        if is_any_trait(inner) {\n-                            // Ignore `Box<Any>` types, see #1884 for details.\n-                            return;\n+                    if let Some(ref params) = seg.parameters {\n+                        for ty in params.types.iter() {\n+                            check_ty(cx, ty, is_local);\n                         }\n-\n-                        let ltopt = if lt.is_elided() {\n-                            \"\".to_owned()\n-                        } else {\n-                            format!(\"{} \", lt.name.as_str())\n-                        };\n-                        let mutopt = if *mutbl == Mutability::MutMutable {\n-                            \"mut \"\n-                        } else {\n-                            \"\"\n-                        };\n-                        span_lint_and_sugg(cx,\n-                            BORROWED_BOX,\n-                            ast_ty.span,\n-                            \"you seem to be trying to use `&Box<T>`. Consider using just `&T`\",\n-                            \"try\",\n-                            format!(\"&{}{}{}\", ltopt, mutopt, &snippet(cx, inner.span, \"..\"))\n-                        );\n-                        return; // don't recurse into the type\n-                    }};\n-                    check_ty(cx, ty, is_local);\n+                    }\n                 },\n-                _ => check_ty(cx, ty, is_local),\n             }\n         },\n+        TyRptr(ref lt, ref mut_ty) => check_ty_rptr(cx, ast_ty, is_local, lt, mut_ty),\n         // recurse\n         TySlice(ref ty) | TyArray(ref ty, _) | TyPtr(MutTy { ref ty, .. }) => check_ty(cx, ty, is_local),\n         TyTup(ref tys) => for ty in tys {\n@@ -253,6 +219,50 @@ fn check_ty(cx: &LateContext, ast_ty: &hir::Ty, is_local: bool) {\n     }\n }\n \n+fn check_ty_rptr(cx: &LateContext, ast_ty: &hir::Ty, is_local: bool, lt: &Lifetime, mut_ty: &MutTy) {\n+    match mut_ty.ty.node {\n+        TyPath(ref qpath) => {\n+            let hir_id = cx.tcx.hir.node_to_hir_id(mut_ty.ty.id);\n+            let def = cx.tables.qpath_def(qpath, hir_id);\n+            if_let_chain! {[\n+                let Some(def_id) = opt_def_id(def),\n+                Some(def_id) == cx.tcx.lang_items().owned_box(),\n+                let QPath::Resolved(None, ref path) = *qpath,\n+                let [ref bx] = *path.segments,\n+                let Some(ref params) = bx.parameters,\n+                !params.parenthesized,\n+                let [ref inner] = *params.types\n+            ], {\n+                if is_any_trait(inner) {\n+                    // Ignore `Box<Any>` types, see #1884 for details.\n+                    return;\n+                }\n+\n+                let ltopt = if lt.is_elided() {\n+                    \"\".to_owned()\n+                } else {\n+                    format!(\"{} \", lt.name.name().as_str())\n+                };\n+                let mutopt = if mut_ty.mutbl == Mutability::MutMutable {\n+                    \"mut \"\n+                } else {\n+                    \"\"\n+                };\n+                span_lint_and_sugg(cx,\n+                    BORROWED_BOX,\n+                    ast_ty.span,\n+                    \"you seem to be trying to use `&Box<T>`. Consider using just `&T`\",\n+                    \"try\",\n+                    format!(\"&{}{}{}\", ltopt, mutopt, &snippet(cx, inner.span, \"..\"))\n+                );\n+                return; // don't recurse into the type\n+            }};\n+            check_ty(cx, &mut_ty.ty, is_local);\n+        },\n+        _ => check_ty(cx, &mut_ty.ty, is_local),\n+    }\n+}\n+\n // Returns true if given type is `Any` trait.\n fn is_any_trait(t: &hir::Ty) -> bool {\n     if_let_chain! {["}, {"sha": "946df625cb611f5566f40da92b618347ff7f51bc", "filename": "clippy_lints/src/use_self.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/clippy_lints%2Fsrc%2Fuse_self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/clippy_lints%2Fsrc%2Fuse_self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fuse_self.rs?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -59,7 +59,12 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UseSelf {\n             let Ty_::TyPath(QPath::Resolved(_, ref item_path)) = item_type.node,\n         ], {\n             let parameters = &item_path.segments.last().expect(SEGMENTS_MSG).parameters;\n-            if !parameters.parenthesized && parameters.lifetimes.len() == 0 {\n+            let should_check = if let Some(ref params) = *parameters {\n+                !params.parenthesized && params.lifetimes.len() == 0 \n+            } else {\n+                true\n+            };\n+            if should_check {\n                 let visitor = &mut UseSelfVisitor {\n                     item_path: item_path,\n                     cx: cx,"}, {"sha": "68ac74d4eefb0e6c1fe0a9d2a096d03571fbc8d9", "filename": "clippy_lints/src/utils/conf.rs", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fconf.rs?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -82,7 +82,8 @@ macro_rules! define_Conf {\n             #[serde(rename_all=\"kebab-case\")]\n             #[serde(deny_unknown_fields)]\n             pub struct Conf {\n-                $(#[$doc] #[serde(default=$rust_name_str)] #[serde(with=$rust_name_str)] pub $rust_name: define_Conf!(TY $($ty)+),)+\n+                $(#[$doc] #[serde(default=$rust_name_str)] #[serde(with=$rust_name_str)]\n+                          pub $rust_name: define_Conf!(TY $($ty)+),)+\n                 #[allow(dead_code)]\n                 #[serde(default)]\n                 third_party: Option<::toml::Value>,\n@@ -91,10 +92,12 @@ macro_rules! define_Conf {\n                 mod $rust_name {\n                     use serde;\n                     use serde::Deserialize;\n-                    pub fn deserialize<'de, D: serde::Deserializer<'de>>(deserializer: D) -> Result<define_Conf!(TY $($ty)+), D::Error> {\n+                    pub fn deserialize<'de, D: serde::Deserializer<'de>>(deserializer: D)\n+                    -> Result<define_Conf!(TY $($ty)+), D::Error> {\n                         type T = define_Conf!(TY $($ty)+);\n                         Ok(T::deserialize(deserializer).unwrap_or_else(|e| {\n-                            ::utils::conf::ERRORS.lock().expect(\"no threading here\").push(::utils::conf::Error::Toml(e.to_string()));\n+                            ::utils::conf::ERRORS.lock().expect(\"no threading here\")\n+                                                        .push(::utils::conf::Error::Toml(e.to_string()));\n                             super::$rust_name()\n                         }))\n                     }\n@@ -154,10 +157,10 @@ define_Conf! {\n         \"JavaScript\",\n         \"NaN\",\n         \"OAuth\",\n-        \"OpenGL\",\n+        \"OpenGL\", \"OpenSSH\", \"OpenSSL\",\n         \"TrueType\",\n         \"iOS\", \"macOS\",\n-        \"TeX\", \"LaTeX\", \"BibTex\", \"BibLaTex\",\n+        \"TeX\", \"LaTeX\", \"BibTeX\", \"BibLaTeX\",\n         \"MinGW\",\n     ] => Vec<String>),\n     /// Lint: TOO_MANY_ARGUMENTS. The maximum number of argument a function or method can have\n@@ -172,6 +175,8 @@ define_Conf! {\n     (enum_variant_name_threshold, \"enum_variant_name_threshold\", 3 => u64),\n     /// Lint: LARGE_ENUM_VARIANT. The maximum size of a emum's variant to avoid box suggestion\n     (enum_variant_size_threshold, \"enum_variant_size_threshold\", 200 => u64),\n+    /// Lint: VERBOSE_BIT_MASK. The maximum allowed size of a bit mask before suggesting to use 'trailing_zeros'\n+    (verbose_bit_mask_threshold, \"verbose_bit_mask_threshold\", 1 => u64),\n }\n \n /// Search for the configuration file."}, {"sha": "f7867dfd0bd4ea22c8dfb9929f08afbd048e17d4", "filename": "clippy_lints/src/utils/hir_utils.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/clippy_lints%2Fsrc%2Futils%2Fhir_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/clippy_lints%2Fsrc%2Futils%2Fhir_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fhir_utils.rs?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -214,7 +214,14 @@ impl<'a, 'tcx: 'a> SpanlessEq<'a, 'tcx> {\n     fn eq_path_segment(&self, left: &PathSegment, right: &PathSegment) -> bool {\n         // The == of idents doesn't work with different contexts,\n         // we have to be explicit about hygiene\n-        left.name.as_str() == right.name.as_str() && self.eq_path_parameters(&left.parameters, &right.parameters)\n+        if left.name.as_str() != right.name.as_str() {\n+            return false;\n+        }\n+        match (&left.parameters, &right.parameters) {\n+            (&None, &None) => true,\n+            (&Some(ref l), &Some(ref r)) => self.eq_path_parameters(l, r),\n+            _ => false\n+        }\n     }\n \n     fn eq_ty(&self, left: &Ty, right: &Ty) -> bool {"}, {"sha": "d517d32b64caf41d987c963bab667c040bd9ddab", "filename": "clippy_lints/src/utils/paths.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/clippy_lints%2Fsrc%2Futils%2Fpaths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/clippy_lints%2Fsrc%2Futils%2Fpaths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fpaths.rs?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -26,10 +26,13 @@ pub const DOUBLE_ENDED_ITERATOR: [&'static str; 4] = [\"core\", \"iter\", \"traits\",\n pub const DROP: [&'static str; 3] = [\"core\", \"mem\", \"drop\"];\n pub const FMT_ARGUMENTS_NEWV1: [&'static str; 4] = [\"core\", \"fmt\", \"Arguments\", \"new_v1\"];\n pub const FMT_ARGUMENTV1_NEW: [&'static str; 4] = [\"core\", \"fmt\", \"ArgumentV1\", \"new\"];\n+pub const FROM_FROM: [&'static str; 4] = [\"core\", \"convert\", \"From\", \"from\"];\n pub const HASH: [&'static str; 2] = [\"hash\", \"Hash\"];\n pub const HASHMAP: [&'static str; 5] = [\"std\", \"collections\", \"hash\", \"map\", \"HashMap\"];\n pub const HASHMAP_ENTRY: [&'static str; 5] = [\"std\", \"collections\", \"hash\", \"map\", \"Entry\"];\n pub const HASHSET: [&'static str; 5] = [\"std\", \"collections\", \"hash\", \"set\", \"HashSet\"];\n+pub const INIT: [&'static str; 4] = [\"core\", \"intrinsics\", \"\", \"init\"];\n+pub const INTO: [&'static str; 3] = [\"core\", \"convert\", \"Into\"];\n pub const INTO_ITERATOR: [&'static str; 4] = [\"core\", \"iter\", \"traits\", \"IntoIterator\"];\n pub const IO_PRINT: [&'static str; 4] = [\"std\", \"io\", \"stdio\", \"_print\"];\n pub const IO_READ: [&'static str; 3] = [\"std\", \"io\", \"Read\"];\n@@ -39,6 +42,8 @@ pub const LINKED_LIST: [&'static str; 3] = [\"alloc\", \"linked_list\", \"LinkedList\"\n pub const LINT: [&'static str; 3] = [\"rustc\", \"lint\", \"Lint\"];\n pub const LINT_ARRAY: [&'static str; 3] = [\"rustc\", \"lint\", \"LintArray\"];\n pub const MEM_FORGET: [&'static str; 3] = [\"core\", \"mem\", \"forget\"];\n+pub const MEM_UNINIT: [&'static str; 3] = [\"core\", \"mem\", \"uninitialized\"];\n+pub const MEM_ZEROED: [&'static str; 3] = [\"core\", \"mem\", \"zeroed\"];\n pub const MUTEX: [&'static str; 4] = [\"std\", \"sync\", \"mutex\", \"Mutex\"];\n pub const OPEN_OPTIONS: [&'static str; 3] = [\"std\", \"fs\", \"OpenOptions\"];\n pub const OPS_MODULE: [&'static str; 2] = [\"core\", \"ops\"];\n@@ -80,6 +85,7 @@ pub const TO_OWNED: [&'static str; 3] = [\"alloc\", \"borrow\", \"ToOwned\"];\n pub const TO_STRING: [&'static str; 3] = [\"alloc\", \"string\", \"ToString\"];\n pub const TRANSMUTE: [&'static str; 4] = [\"core\", \"intrinsics\", \"\", \"transmute\"];\n pub const TRY_INTO_RESULT: [&'static str; 4] = [\"std\", \"ops\", \"Try\", \"into_result\"];\n+pub const UNINIT: [&'static str; 4] = [\"core\", \"intrinsics\", \"\", \"uninit\"];\n pub const VEC: [&'static str; 3] = [\"alloc\", \"vec\", \"Vec\"];\n pub const VEC_DEQUE: [&'static str; 3] = [\"alloc\", \"vec_deque\", \"VecDeque\"];\n pub const VEC_FROM_ELEM: [&'static str; 3] = [\"alloc\", \"vec\", \"from_elem\"];"}, {"sha": "d811de59844fbe5e8645b25f2746ed6508bd0f83", "filename": "clippy_lints/src/utils/sugg.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/clippy_lints%2Fsrc%2Futils%2Fsugg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/clippy_lints%2Fsrc%2Futils%2Fsugg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fsugg.rs?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -126,7 +126,7 @@ impl<'a> Sugg<'a> {\n             ast::ExprKind::While(..) |\n             ast::ExprKind::WhileLet(..) => Sugg::NonParen(snippet),\n             ast::ExprKind::Range(.., RangeLimits::HalfOpen) => Sugg::BinOp(AssocOp::DotDot, snippet),\n-            ast::ExprKind::Range(.., RangeLimits::Closed) => Sugg::BinOp(AssocOp::DotDotDot, snippet),\n+            ast::ExprKind::Range(.., RangeLimits::Closed) => Sugg::BinOp(AssocOp::DotDotEq, snippet),\n             ast::ExprKind::Assign(..) => Sugg::BinOp(AssocOp::Assign, snippet),\n             ast::ExprKind::AssignOp(op, ..) => Sugg::BinOp(astbinop2assignop(op), snippet),\n             ast::ExprKind::Binary(op, ..) => Sugg::BinOp(AssocOp::from_ast_binop(op.node), snippet),\n@@ -165,7 +165,7 @@ impl<'a> Sugg<'a> {\n     pub fn range(self, end: Self, limit: ast::RangeLimits) -> Sugg<'static> {\n         match limit {\n             ast::RangeLimits::HalfOpen => make_assoc(AssocOp::DotDot, &self, &end),\n-            ast::RangeLimits::Closed => make_assoc(AssocOp::DotDotDot, &self, &end),\n+            ast::RangeLimits::Closed => make_assoc(AssocOp::DotDotEq, &self, &end),\n         }\n     }\n \n@@ -312,7 +312,7 @@ pub fn make_assoc(op: AssocOp, lhs: &Sugg, rhs: &Sugg) -> Sugg<'static> {\n         AssocOp::AssignOp(op) => format!(\"{} {}= {}\", lhs, token_to_string(&token::BinOp(op)), rhs),\n         AssocOp::As => format!(\"{} as {}\", lhs, rhs),\n         AssocOp::DotDot => format!(\"{}..{}\", lhs, rhs),\n-        AssocOp::DotDotDot => format!(\"{}...{}\", lhs, rhs),\n+        AssocOp::DotDotEq => format!(\"{}..={}\", lhs, rhs),\n         AssocOp::Colon => format!(\"{}: {}\", lhs, rhs),\n     };\n \n@@ -362,7 +362,7 @@ fn associativity(op: &AssocOp) -> Associativity {\n         ShiftLeft |\n         ShiftRight |\n         Subtract => Associativity::Left,\n-        DotDot | DotDotDot => Associativity::None,\n+        DotDot | DotDotEq => Associativity::None,\n     }\n }\n "}, {"sha": "6044eaac3769ee7350a006911197ca7e3bbb4e53", "filename": "clippy_lints/src/vec.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/clippy_lints%2Fsrc%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/clippy_lints%2Fsrc%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fvec.rs?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -67,15 +67,15 @@ fn check_vec_macro<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, vec_args: &higher::VecA\n                 .eval(len)\n                 .is_ok()\n             {\n-                format!(\"&[{}; {}]\", snippet(cx, elem.span, \"elem\"), snippet(cx, len.span, \"len\")).into()\n+                format!(\"&[{}; {}]\", snippet(cx, elem.span, \"elem\"), snippet(cx, len.span, \"len\"))\n             } else {\n                 return;\n             }\n         },\n         higher::VecArgs::Vec(args) => if let Some(last) = args.iter().last() {\n             let span = args[0].span.to(last.span);\n \n-            format!(\"&[{}]\", snippet(cx, span, \"..\")).into()\n+            format!(\"&[{}]\", snippet(cx, span, \"..\"))\n         } else {\n             \"&[]\".into()\n         },"}, {"sha": "fdf917d51588cf1dc8e1b99aab86370de80e8355", "filename": "mut_range_bound", "status": "added", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/mut_range_bound", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/mut_range_bound", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mut_range_bound?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49"}, {"sha": "ab5e90141a9a82037573817d63e031048561ded3", "filename": "src/driver.rs", "status": "added", "additions": 198, "deletions": 0, "changes": 198, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/src%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/src%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver.rs?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -0,0 +1,198 @@\n+// error-pattern:yummy\n+#![feature(box_syntax)]\n+#![feature(rustc_private)]\n+#![allow(unknown_lints, missing_docs_in_private_items)]\n+\n+extern crate clippy_lints;\n+extern crate getopts;\n+extern crate rustc;\n+extern crate rustc_driver;\n+extern crate rustc_errors;\n+extern crate rustc_plugin;\n+extern crate syntax;\n+\n+use rustc_driver::{driver, Compilation, CompilerCalls, RustcDefaultCalls};\n+use rustc::session::{config, CompileIncomplete, Session};\n+use rustc::session::config::{ErrorOutputType, Input};\n+use std::path::PathBuf;\n+use std::process::Command;\n+use syntax::ast;\n+\n+struct ClippyCompilerCalls {\n+    default: RustcDefaultCalls,\n+    run_lints: bool,\n+}\n+\n+impl ClippyCompilerCalls {\n+    fn new(run_lints: bool) -> Self {\n+        Self {\n+            default: RustcDefaultCalls,\n+            run_lints: run_lints,\n+        }\n+    }\n+}\n+\n+impl<'a> CompilerCalls<'a> for ClippyCompilerCalls {\n+    fn early_callback(\n+        &mut self,\n+        matches: &getopts::Matches,\n+        sopts: &config::Options,\n+        cfg: &ast::CrateConfig,\n+        descriptions: &rustc_errors::registry::Registry,\n+        output: ErrorOutputType,\n+    ) -> Compilation {\n+        self.default\n+            .early_callback(matches, sopts, cfg, descriptions, output)\n+    }\n+    fn no_input(\n+        &mut self,\n+        matches: &getopts::Matches,\n+        sopts: &config::Options,\n+        cfg: &ast::CrateConfig,\n+        odir: &Option<PathBuf>,\n+        ofile: &Option<PathBuf>,\n+        descriptions: &rustc_errors::registry::Registry,\n+    ) -> Option<(Input, Option<PathBuf>)> {\n+        self.default\n+            .no_input(matches, sopts, cfg, odir, ofile, descriptions)\n+    }\n+    fn late_callback(\n+        &mut self,\n+        matches: &getopts::Matches,\n+        sess: &Session,\n+        crate_stores: &rustc::middle::cstore::CrateStore,\n+        input: &Input,\n+        odir: &Option<PathBuf>,\n+        ofile: &Option<PathBuf>,\n+    ) -> Compilation {\n+        self.default\n+            .late_callback(matches, sess, crate_stores, input, odir, ofile)\n+    }\n+    fn build_controller(&mut self, sess: &Session, matches: &getopts::Matches) -> driver::CompileController<'a> {\n+        let mut control = self.default.build_controller(sess, matches);\n+\n+        if self.run_lints {\n+            let old = std::mem::replace(&mut control.after_parse.callback, box |_| {});\n+            control.after_parse.callback = Box::new(move |state| {\n+                {\n+                    let mut registry = rustc_plugin::registry::Registry::new(\n+                        state.session,\n+                        state\n+                            .krate\n+                            .as_ref()\n+                            .expect(\n+                                \"at this compilation stage \\\n+                                 the krate must be parsed\",\n+                            )\n+                            .span,\n+                    );\n+                    registry.args_hidden = Some(Vec::new());\n+                    clippy_lints::register_plugins(&mut registry);\n+\n+                    let rustc_plugin::registry::Registry {\n+                        early_lint_passes,\n+                        late_lint_passes,\n+                        lint_groups,\n+                        llvm_passes,\n+                        attributes,\n+                        ..\n+                    } = registry;\n+                    let sess = &state.session;\n+                    let mut ls = sess.lint_store.borrow_mut();\n+                    for pass in early_lint_passes {\n+                        ls.register_early_pass(Some(sess), true, pass);\n+                    }\n+                    for pass in late_lint_passes {\n+                        ls.register_late_pass(Some(sess), true, pass);\n+                    }\n+\n+                    for (name, to) in lint_groups {\n+                        ls.register_group(Some(sess), true, name, to);\n+                    }\n+\n+                    sess.plugin_llvm_passes.borrow_mut().extend(llvm_passes);\n+                    sess.plugin_attributes.borrow_mut().extend(attributes);\n+                }\n+                old(state);\n+            });\n+        }\n+\n+        control\n+    }\n+}\n+\n+#[allow(print_stdout)]\n+fn show_version() {\n+    println!(\"{}\", env!(\"CARGO_PKG_VERSION\"));\n+}\n+\n+pub fn main() {\n+    use std::env;\n+\n+    if env::var(\"CLIPPY_DOGFOOD\").map(|_| true).unwrap_or(false) {\n+        panic!(\"yummy\");\n+    }\n+\n+    if std::env::args().any(|a| a == \"--version\" || a == \"-V\") {\n+        show_version();\n+        return;\n+    }\n+\n+    let home = option_env!(\"RUSTUP_HOME\").or(option_env!(\"MULTIRUST_HOME\"));\n+    let toolchain = option_env!(\"RUSTUP_TOOLCHAIN\").or(option_env!(\"MULTIRUST_TOOLCHAIN\"));\n+    let sys_root = if let (Some(home), Some(toolchain)) = (home, toolchain) {\n+        format!(\"{}/toolchains/{}\", home, toolchain)\n+    } else {\n+        option_env!(\"SYSROOT\")\n+            .map(|s| s.to_owned())\n+            .or_else(|| {\n+                Command::new(\"rustc\")\n+                    .arg(\"--print\")\n+                    .arg(\"sysroot\")\n+                    .output()\n+                    .ok()\n+                    .and_then(|out| String::from_utf8(out.stdout).ok())\n+                    .map(|s| s.trim().to_owned())\n+            })\n+            .expect(\n+                \"need to specify SYSROOT env var during clippy compilation, or use rustup or multirust\",\n+            )\n+    };\n+\n+    rustc_driver::in_rustc_thread(|| {\n+        // Setting RUSTC_WRAPPER causes Cargo to pass 'rustc' as the first argument.\n+        // We're invoking the compiler programatically, so we ignore this/\n+        let mut orig_args: Vec<String> = env::args().collect();\n+        if orig_args[1] == \"rustc\" {\n+            // we still want to be able to invoke it normally though\n+            orig_args.remove(1);\n+        }\n+        // this conditional check for the --sysroot flag is there so users can call\n+        // `clippy_driver` directly\n+        // without having to pass --sysroot or anything\n+        let mut args: Vec<String> = if orig_args.iter().any(|s| s == \"--sysroot\") {\n+            orig_args.clone()\n+        } else {\n+            orig_args.clone().into_iter()\n+                .chain(Some(\"--sysroot\".to_owned()))\n+                .chain(Some(sys_root))\n+                .collect()\n+        };\n+\n+        // this check ensures that dependencies are built but not linted and the final\n+        // crate is\n+        // linted but not built\n+        let clippy_enabled = env::var(\"CLIPPY_TESTS\").ok().map_or(false, |val| val == \"true\") ||\n+            orig_args.iter().any(|s| s == \"--emit=metadata\");\n+\n+        if clippy_enabled {\n+            args.extend_from_slice(&[\"--cfg\".to_owned(), r#\"feature=\"cargo-clippy\"\"#.to_owned()]);\n+        }\n+\n+        let mut ccc = ClippyCompilerCalls::new(clippy_enabled);\n+        let (result, _) = rustc_driver::run_compiler(&args, &mut ccc, None, None);\n+        if let Err(CompileIncomplete::Errored(_)) = result {\n+            std::process::exit(1);\n+        }\n+    }).expect(\"rustc_thread failed\");\n+}"}, {"sha": "69f416e20925f62e08f83e46c2b086d77ce8ad69", "filename": "src/main.rs", "status": "modified", "additions": 90, "deletions": 261, "changes": 351, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/src%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/src%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmain.rs?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -3,128 +3,12 @@\n #![feature(rustc_private)]\n #![allow(unknown_lints, missing_docs_in_private_items)]\n \n-extern crate clippy_lints;\n-extern crate getopts;\n-extern crate rustc;\n-extern crate rustc_driver;\n-extern crate rustc_errors;\n-extern crate rustc_plugin;\n-extern crate syntax;\n-\n-use rustc_driver::{driver, Compilation, CompilerCalls, RustcDefaultCalls};\n-use rustc::session::{config, CompileIncomplete, Session};\n-use rustc::session::config::{ErrorOutputType, Input};\n use std::collections::HashMap;\n-use std::path::PathBuf;\n-use std::process::{self, Command};\n-use syntax::ast;\n+use std::process;\n use std::io::{self, Write};\n \n extern crate cargo_metadata;\n \n-struct ClippyCompilerCalls {\n-    default: RustcDefaultCalls,\n-    run_lints: bool,\n-}\n-\n-impl ClippyCompilerCalls {\n-    fn new(run_lints: bool) -> Self {\n-        Self {\n-            default: RustcDefaultCalls,\n-            run_lints: run_lints,\n-        }\n-    }\n-}\n-\n-impl<'a> CompilerCalls<'a> for ClippyCompilerCalls {\n-    fn early_callback(\n-        &mut self,\n-        matches: &getopts::Matches,\n-        sopts: &config::Options,\n-        cfg: &ast::CrateConfig,\n-        descriptions: &rustc_errors::registry::Registry,\n-        output: ErrorOutputType,\n-    ) -> Compilation {\n-        self.default\n-            .early_callback(matches, sopts, cfg, descriptions, output)\n-    }\n-    fn no_input(\n-        &mut self,\n-        matches: &getopts::Matches,\n-        sopts: &config::Options,\n-        cfg: &ast::CrateConfig,\n-        odir: &Option<PathBuf>,\n-        ofile: &Option<PathBuf>,\n-        descriptions: &rustc_errors::registry::Registry,\n-    ) -> Option<(Input, Option<PathBuf>)> {\n-        self.default\n-            .no_input(matches, sopts, cfg, odir, ofile, descriptions)\n-    }\n-    fn late_callback(\n-        &mut self,\n-        matches: &getopts::Matches,\n-        sess: &Session,\n-        crate_stores: &rustc::middle::cstore::CrateStore,\n-        input: &Input,\n-        odir: &Option<PathBuf>,\n-        ofile: &Option<PathBuf>,\n-    ) -> Compilation {\n-        self.default\n-            .late_callback(matches, sess, crate_stores, input, odir, ofile)\n-    }\n-    fn build_controller(&mut self, sess: &Session, matches: &getopts::Matches) -> driver::CompileController<'a> {\n-        let mut control = self.default.build_controller(sess, matches);\n-\n-        if self.run_lints {\n-            let old = std::mem::replace(&mut control.after_parse.callback, box |_| {});\n-            control.after_parse.callback = Box::new(move |state| {\n-                {\n-                    let mut registry = rustc_plugin::registry::Registry::new(\n-                        state.session,\n-                        state\n-                            .krate\n-                            .as_ref()\n-                            .expect(\n-                                \"at this compilation stage \\\n-                                 the krate must be parsed\",\n-                            )\n-                            .span,\n-                    );\n-                    registry.args_hidden = Some(Vec::new());\n-                    clippy_lints::register_plugins(&mut registry);\n-\n-                    let rustc_plugin::registry::Registry {\n-                        early_lint_passes,\n-                        late_lint_passes,\n-                        lint_groups,\n-                        llvm_passes,\n-                        attributes,\n-                        ..\n-                    } = registry;\n-                    let sess = &state.session;\n-                    let mut ls = sess.lint_store.borrow_mut();\n-                    for pass in early_lint_passes {\n-                        ls.register_early_pass(Some(sess), true, pass);\n-                    }\n-                    for pass in late_lint_passes {\n-                        ls.register_late_pass(Some(sess), true, pass);\n-                    }\n-\n-                    for (name, to) in lint_groups {\n-                        ls.register_group(Some(sess), true, name, to);\n-                    }\n-\n-                    sess.plugin_llvm_passes.borrow_mut().extend(llvm_passes);\n-                    sess.plugin_attributes.borrow_mut().extend(attributes);\n-                }\n-                old(state);\n-            });\n-        }\n-\n-        control\n-    }\n-}\n-\n use std::path::Path;\n \n const CARGO_CLIPPY_HELP: &str = r#\"Checks a package to catch common mistakes and improve your Rust code.\n@@ -181,162 +65,105 @@ pub fn main() {\n         return;\n     }\n \n-    if let Some(\"clippy\") = std::env::args().nth(1).as_ref().map(AsRef::as_ref) {\n-        // this arm is executed on the initial call to `cargo clippy`\n-\n-        let manifest_path_arg = std::env::args()\n-            .skip(2)\n-            .find(|val| val.starts_with(\"--manifest-path=\"));\n+    let manifest_path_arg = std::env::args()\n+        .skip(2)\n+        .find(|val| val.starts_with(\"--manifest-path=\"));\n \n-        let mut metadata = if let Ok(metadata) = cargo_metadata::metadata(manifest_path_arg.as_ref().map(AsRef::as_ref))\n-        {\n-            metadata\n-        } else {\n-            let _ = io::stderr().write_fmt(format_args!(\"error: Could not obtain cargo metadata.\\n\"));\n-            process::exit(101);\n-        };\n-\n-        let manifest_path = manifest_path_arg.map(|arg| {\n-            Path::new(&arg[\"--manifest-path=\".len()..])\n-                .canonicalize()\n-                .expect(\"manifest path could not be canonicalized\")\n-        });\n-\n-        let packages = if std::env::args().any(|a| a == \"--all\") {\n-            metadata.packages\n-        } else {\n-            let package_index = {\n-                if let Some(manifest_path) = manifest_path {\n-                    metadata.packages.iter().position(|package| {\n+    let mut metadata = if let Ok(metadata) = cargo_metadata::metadata(manifest_path_arg.as_ref().map(AsRef::as_ref))\n+    {\n+        metadata\n+    } else {\n+        let _ = io::stderr().write_fmt(format_args!(\"error: Could not obtain cargo metadata.\\n\"));\n+        process::exit(101);\n+    };\n+\n+    let manifest_path = manifest_path_arg.map(|arg| {\n+        Path::new(&arg[\"--manifest-path=\".len()..])\n+            .canonicalize()\n+            .expect(\"manifest path could not be canonicalized\")\n+    });\n+\n+    let packages = if std::env::args().any(|a| a == \"--all\") {\n+        metadata.packages\n+    } else {\n+        let package_index = {\n+            if let Some(manifest_path) = manifest_path {\n+                metadata.packages.iter().position(|package| {\n+                    let package_manifest_path = Path::new(&package.manifest_path)\n+                        .canonicalize()\n+                        .expect(\"package manifest path could not be canonicalized\");\n+                    package_manifest_path == manifest_path\n+                })\n+            } else {\n+                let package_manifest_paths: HashMap<_, _> = metadata\n+                    .packages\n+                    .iter()\n+                    .enumerate()\n+                    .map(|(i, package)| {\n                         let package_manifest_path = Path::new(&package.manifest_path)\n+                            .parent()\n+                            .expect(\"could not find parent directory of package manifest\")\n                             .canonicalize()\n-                            .expect(\"package manifest path could not be canonicalized\");\n-                        package_manifest_path == manifest_path\n+                            .expect(\"package directory cannot be canonicalized\");\n+                        (package_manifest_path, i)\n                     })\n-                } else {\n-                    let package_manifest_paths: HashMap<_, _> = metadata\n-                        .packages\n-                        .iter()\n-                        .enumerate()\n-                        .map(|(i, package)| {\n-                            let package_manifest_path = Path::new(&package.manifest_path)\n-                                .parent()\n-                                .expect(\"could not find parent directory of package manifest\")\n-                                .canonicalize()\n-                                .expect(\"package directory cannot be canonicalized\");\n-                            (package_manifest_path, i)\n-                        })\n-                        .collect();\n-\n-                    let current_dir = std::env::current_dir()\n-                        .expect(\"could not read current directory\")\n-                        .canonicalize()\n-                        .expect(\"current directory cannot be canonicalized\");\n-\n-                    let mut current_path: &Path = &current_dir;\n-\n-                    // This gets the most-recent parent (the one that takes the fewest `cd ..`s to\n-                    // reach).\n-                    loop {\n-                        if let Some(&package_index) = package_manifest_paths.get(current_path) {\n-                            break Some(package_index);\n-                        } else {\n-                            // We'll never reach the filesystem root, because to get to this point in the\n-                            // code\n-                            // the call to `cargo_metadata::metadata` must have succeeded. So it's okay to\n-                            // unwrap the current path's parent.\n-                            current_path = current_path\n-                                .parent()\n-                                .unwrap_or_else(|| panic!(\"could not find parent of path {}\", current_path.display()));\n-                        }\n+                    .collect();\n+\n+                let current_dir = std::env::current_dir()\n+                    .expect(\"could not read current directory\")\n+                    .canonicalize()\n+                    .expect(\"current directory cannot be canonicalized\");\n+\n+                let mut current_path: &Path = &current_dir;\n+\n+                // This gets the most-recent parent (the one that takes the fewest `cd ..`s to\n+                // reach).\n+                loop {\n+                    if let Some(&package_index) = package_manifest_paths.get(current_path) {\n+                        break Some(package_index);\n+                    } else {\n+                        // We'll never reach the filesystem root, because to get to this point in the\n+                        // code\n+                        // the call to `cargo_metadata::metadata` must have succeeded. So it's okay to\n+                        // unwrap the current path's parent.\n+                        current_path = current_path\n+                            .parent()\n+                            .unwrap_or_else(|| panic!(\"could not find parent of path {}\", current_path.display()));\n                     }\n                 }\n-            }.expect(\"could not find matching package\");\n+            }\n+        }.expect(\"could not find matching package\");\n \n-            vec![metadata.packages.remove(package_index)]\n-        };\n+        vec![metadata.packages.remove(package_index)]\n+    };\n \n-        for package in packages {\n-            let manifest_path = package.manifest_path;\n+    for package in packages {\n+        let manifest_path = package.manifest_path;\n \n-            for target in package.targets {\n-                let args = std::env::args()\n-                    .skip(2)\n-                    .filter(|a| a != \"--all\" && !a.starts_with(\"--manifest-path=\"));\n+        for target in package.targets {\n+            let args = std::env::args()\n+                .skip(2)\n+                .filter(|a| a != \"--all\" && !a.starts_with(\"--manifest-path=\"));\n \n-                let args = std::iter::once(format!(\"--manifest-path={}\", manifest_path)).chain(args);\n-                if let Some(first) = target.kind.get(0) {\n-                    if target.kind.len() > 1 || first.ends_with(\"lib\") {\n-                        if let Err(code) = process(std::iter::once(\"--lib\".to_owned()).chain(args)) {\n-                            std::process::exit(code);\n-                        }\n-                    } else if [\"bin\", \"example\", \"test\", \"bench\"].contains(&&**first) {\n-                        if let Err(code) = process(\n-                            vec![format!(\"--{}\", first), target.name]\n-                                .into_iter()\n-                                .chain(args),\n-                        ) {\n-                            std::process::exit(code);\n-                        }\n+            let args = std::iter::once(format!(\"--manifest-path={}\", manifest_path)).chain(args);\n+            if let Some(first) = target.kind.get(0) {\n+                if target.kind.len() > 1 || first.ends_with(\"lib\") {\n+                    if let Err(code) = process(std::iter::once(\"--lib\".to_owned()).chain(args)) {\n+                        std::process::exit(code);\n+                    }\n+                } else if [\"bin\", \"example\", \"test\", \"bench\"].contains(&&**first) {\n+                    if let Err(code) = process(\n+                        vec![format!(\"--{}\", first), target.name]\n+                            .into_iter()\n+                            .chain(args),\n+                    ) {\n+                        std::process::exit(code);\n                     }\n-                } else {\n-                    panic!(\"badly formatted cargo metadata: target::kind is an empty array\");\n                 }\n-            }\n-        }\n-    } else {\n-        // this arm is executed when cargo-clippy runs `cargo rustc` with the `RUSTC`\n-        // env var set to itself\n-\n-        let home = option_env!(\"RUSTUP_HOME\").or(option_env!(\"MULTIRUST_HOME\"));\n-        let toolchain = option_env!(\"RUSTUP_TOOLCHAIN\").or(option_env!(\"MULTIRUST_TOOLCHAIN\"));\n-        let sys_root = if let (Some(home), Some(toolchain)) = (home, toolchain) {\n-            format!(\"{}/toolchains/{}\", home, toolchain)\n-        } else {\n-            option_env!(\"SYSROOT\")\n-                .map(|s| s.to_owned())\n-                .or_else(|| {\n-                    Command::new(\"rustc\")\n-                        .arg(\"--print\")\n-                        .arg(\"sysroot\")\n-                        .output()\n-                        .ok()\n-                        .and_then(|out| String::from_utf8(out.stdout).ok())\n-                        .map(|s| s.trim().to_owned())\n-                })\n-                .expect(\n-                    \"need to specify SYSROOT env var during clippy compilation, or use rustup or multirust\",\n-                )\n-        };\n-\n-        rustc_driver::in_rustc_thread(|| {\n-            // this conditional check for the --sysroot flag is there so users can call\n-            // `cargo-clippy` directly\n-            // without having to pass --sysroot or anything\n-            let mut args: Vec<String> = if env::args().any(|s| s == \"--sysroot\") {\n-                env::args().collect()\n             } else {\n-                env::args()\n-                    .chain(Some(\"--sysroot\".to_owned()))\n-                    .chain(Some(sys_root))\n-                    .collect()\n-            };\n-\n-            // this check ensures that dependencies are built but not linted and the final\n-            // crate is\n-            // linted but not built\n-            let clippy_enabled = env::args().any(|s| s == \"--emit=metadata\");\n-\n-            if clippy_enabled {\n-                args.extend_from_slice(&[\"--cfg\".to_owned(), r#\"feature=\"cargo-clippy\"\"#.to_owned()]);\n+                panic!(\"badly formatted cargo metadata: target::kind is an empty array\");\n             }\n-\n-            let mut ccc = ClippyCompilerCalls::new(clippy_enabled);\n-            let (result, _) = rustc_driver::run_compiler(&args, &mut ccc, None, None);\n-            if let Err(CompileIncomplete::Errored(_)) = result {\n-                std::process::exit(1);\n-            }\n-        }).expect(\"rustc_thread failed\");\n+        }\n     }\n }\n \n@@ -358,10 +185,12 @@ where\n     args.push(\"--cfg\".to_owned());\n     args.push(r#\"feature=\"cargo-clippy\"\"#.to_owned());\n \n-    let path = std::env::current_exe().expect(\"current executable path invalid\");\n+    let path = std::env::current_exe()\n+        .expect(\"current executable path invalid\")\n+        .with_file_name(\"clippy-driver\");\n     let exit_status = std::process::Command::new(\"cargo\")\n         .args(&args)\n-        .env(\"RUSTC\", path)\n+        .env(\"RUSTC_WRAPPER\", path)\n         .spawn()\n         .expect(\"could not run cargo\")\n         .wait()"}, {"sha": "be8793215dc21704a01dbd521f399c68560b7ec7", "filename": "tests/compile-test.rs", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fcompile-test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fcompile-test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-test.rs?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -3,6 +3,14 @@ extern crate compiletest_rs as compiletest;\n use std::path::PathBuf;\n use std::env::{set_var, var};\n \n+fn clippy_driver_path() -> PathBuf {\n+    if let Some(path) = option_env!(\"CLIPPY_DRIVER_PATH\") {\n+        PathBuf::from(path)\n+    } else {\n+        PathBuf::from(concat!(\"target/\", env!(\"PROFILE\"), \"/clippy-driver\"))\n+    }\n+}\n+\n fn run_mode(dir: &'static str, mode: &'static str) {\n     let mut config = compiletest::Config::default();\n \n@@ -16,21 +24,20 @@ fn run_mode(dir: &'static str, mode: &'static str) {\n     config.mode = cfg_mode;\n     config.build_base = PathBuf::from(\"target/debug/test_build_base\");\n     config.src_base = PathBuf::from(format!(\"tests/{}\", dir));\n+    config.rustc_path = clippy_driver_path();\n \n     compiletest::run_tests(&config);\n }\n \n fn prepare_env() {\n     set_var(\"CLIPPY_DISABLE_DOCS_LINKS\", \"true\");\n+    set_var(\"CLIPPY_TESTS\", \"true\");\n+    set_var(\"RUST_BACKTRACE\", \"0\");\n }\n \n #[test]\n fn compile_test() {\n     prepare_env();\n     run_mode(\"run-pass\", \"run-pass\");\n     run_mode(\"ui\", \"ui\");\n-    #[cfg(target_os = \"windows\")]\n-    run_mode(\"ui-windows\", \"ui\");\n-    #[cfg(not(target_os = \"windows\"))]\n-    run_mode(\"ui-posix\", \"ui\");\n }"}, {"sha": "198bf465bd57486e007cdb52746c73634b6af275", "filename": "tests/conf_whitelisted.rs", "status": "renamed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fconf_whitelisted.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fconf_whitelisted.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fconf_whitelisted.rs?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -1,4 +1,3 @@\n #![feature(plugin)]\n #![plugin(clippy(conf_file=\"./tests/auxiliary/conf_whitelisted.toml\"))]\n \n-fn main() {}", "previous_filename": "tests/run-pass/conf_whitelisted.rs"}, {"sha": "744de9bcf384da5e405d67b3825f0d2b8d5d735d", "filename": "tests/run-pass/associated-constant-ice.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Frun-pass%2Fassociated-constant-ice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Frun-pass%2Fassociated-constant-ice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fassociated-constant-ice.rs?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -1,5 +1,5 @@\n-#![feature(plugin)]\n-#![plugin(clippy)]\n+\n+\n \n pub trait Trait {\n     const CONSTANT: u8;"}, {"sha": "21ed2dbf9910d4a582442358475a187598f799ef", "filename": "tests/run-pass/enum-glob-import-crate.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Frun-pass%2Fenum-glob-import-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Frun-pass%2Fenum-glob-import-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fenum-glob-import-crate.rs?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -1,5 +1,5 @@\n-#![feature(plugin)]\n-#![plugin(clippy)]\n+\n+\n #![deny(clippy)]\n #![allow(unused_imports)]\n "}, {"sha": "780df52351154e0f149f84891d94a4288dfec40c", "filename": "tests/run-pass/ice-1588.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Frun-pass%2Fice-1588.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Frun-pass%2Fice-1588.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fice-1588.rs?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -1,5 +1,5 @@\n-#![feature(plugin)]\n-#![plugin(clippy)]\n+\n+\n #![allow(clippy)]\n \n fn main() {"}, {"sha": "296339828480dc34bca63ba9b1cc2bb723d9e85e", "filename": "tests/run-pass/ice-1969.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Frun-pass%2Fice-1969.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Frun-pass%2Fice-1969.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fice-1969.rs?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -1,5 +1,5 @@\n-#![feature(plugin)]\n-#![plugin(clippy)]\n+\n+\n #![allow(clippy)]\n \n fn main() { }"}, {"sha": "a1e3a6756e9e365fe5f7f8cc420402f9863711df", "filename": "tests/run-pass/ice-700.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Frun-pass%2Fice-700.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Frun-pass%2Fice-700.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fice-700.rs?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -1,5 +1,5 @@\n-#![feature(plugin)]\n-#![plugin(clippy)]\n+\n+\n #![deny(clippy)]\n \n fn core() {}"}, {"sha": "adc308626b1b6202f89cf7830de15f8e4895a4f7", "filename": "tests/run-pass/mut_mut_macro.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Frun-pass%2Fmut_mut_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Frun-pass%2Fmut_mut_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fmut_mut_macro.rs?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -1,5 +1,5 @@\n-#![feature(plugin)]\n-#![plugin(clippy)]\n+\n+\n #![deny(mut_mut, zero_ptr, cmp_nan)]\n #![allow(dead_code)]\n "}, {"sha": "0ebc1bf3c6c1d6e07e97d2c29aa53b119b0aa7ba", "filename": "tests/run-pass/needless_lifetimes_impl_trait.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Frun-pass%2Fneedless_lifetimes_impl_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Frun-pass%2Fneedless_lifetimes_impl_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fneedless_lifetimes_impl_trait.rs?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -1,5 +1,5 @@\n-#![feature(plugin)]\n-#![plugin(clippy)]\n+\n+\n #![feature(conservative_impl_trait)]\n #![deny(needless_lifetimes)]\n #![allow(dead_code)]"}, {"sha": "b185f6dc427734976ef1c0f8059ac9d5b3b1cc54", "filename": "tests/run-pass/procedural_macro.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Frun-pass%2Fprocedural_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Frun-pass%2Fprocedural_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fprocedural_macro.rs?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -1,5 +1,5 @@\n #![feature(plugin)]\n-#![plugin(clippy, clippy_mini_macro_test)]\n+#![plugin(clippy_mini_macro_test)]\n \n #[deny(warnings)]\n fn main() {"}, {"sha": "d5e343c56c2077bc7490d4ffa354fe934248216f", "filename": "tests/run-pass/regressions.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Frun-pass%2Fregressions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Frun-pass%2Fregressions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fregressions.rs?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -1,5 +1,5 @@\n-#![feature(plugin)]\n-#![plugin(clippy)]\n+\n+\n #![allow(blacklisted_name)]\n \n pub fn foo(bar: *const u8) {"}, {"sha": "b8fa7294dcde884b7ce22c42a852058ef929be1c", "filename": "tests/run-pass/single-match-else.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Frun-pass%2Fsingle-match-else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Frun-pass%2Fsingle-match-else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fsingle-match-else.rs?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -1,5 +1,5 @@\n-#![feature(plugin)]\n-#![plugin(clippy)]\n+\n+\n #![warn(single_match_else)]\n \n fn main() {"}, {"sha": "e287f7e02af932cc5f8ba849aaf8f18c89a9fc7b", "filename": "tests/ui-posix/conf_non_existant.rs", "status": "removed", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9a0a8a0010e0da18d664e8895a3d73b784f026b8/tests%2Fui-posix%2Fconf_non_existant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a0a8a0010e0da18d664e8895a3d73b784f026b8/tests%2Fui-posix%2Fconf_non_existant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-posix%2Fconf_non_existant.rs?ref=9a0a8a0010e0da18d664e8895a3d73b784f026b8", "patch": "@@ -1,6 +0,0 @@\n-// error-pattern: error reading Clippy's configuration file\n-\n-#![feature(plugin)]\n-#![plugin(clippy(conf_file=\"./tests/auxiliary/non_existant_conf.toml\"))]\n-\n-fn main() {}"}, {"sha": "7920bd35589da9fe21b8bd22f98431949d299fbe", "filename": "tests/ui-posix/conf_non_existant.stderr", "status": "removed", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9a0a8a0010e0da18d664e8895a3d73b784f026b8/tests%2Fui-posix%2Fconf_non_existant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9a0a8a0010e0da18d664e8895a3d73b784f026b8/tests%2Fui-posix%2Fconf_non_existant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-posix%2Fconf_non_existant.stderr?ref=9a0a8a0010e0da18d664e8895a3d73b784f026b8", "patch": "@@ -1,4 +0,0 @@\n-error: error reading Clippy's configuration file: No such file or directory (os error 2)\n-\n-error: aborting due to previous error\n-"}, {"sha": "d6aa69c7e8d3ecec149a1c3880b20ab18c8cabc2", "filename": "tests/ui-posix/update-all-references.sh", "status": "removed", "additions": 0, "deletions": 28, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/9a0a8a0010e0da18d664e8895a3d73b784f026b8/tests%2Fui-posix%2Fupdate-all-references.sh", "raw_url": "https://github.com/rust-lang/rust/raw/9a0a8a0010e0da18d664e8895a3d73b784f026b8/tests%2Fui-posix%2Fupdate-all-references.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-posix%2Fupdate-all-references.sh?ref=9a0a8a0010e0da18d664e8895a3d73b784f026b8", "patch": "@@ -1,28 +0,0 @@\n-#!/bin/bash\n-#\n-# Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n-# file at the top-level directory of this distribution and at\n-# http://rust-lang.org/COPYRIGHT.\n-#\n-# Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-# http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-# <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-# option. This file may not be copied, modified, or distributed\n-# except according to those terms.\n-\n-# A script to update the references for all tests. The idea is that\n-# you do a run, which will generate files in the build directory\n-# containing the (normalized) actual output of the compiler. You then\n-# run this script, which will copy those files over. If you find\n-# yourself manually editing a foo.stderr file, you're doing it wrong.\n-#\n-# See all `update-references.sh`, if you just want to update a single test.\n-\n-if [[ \"$1\" == \"--help\" || \"$1\" == \"-h\" || \"$1\" == \"\" ]]; then\n-    echo \"usage: $0\"\n-fi\n-\n-BUILD_DIR=$PWD/target/debug/test_build_base\n-MY_DIR=$(dirname $0)\n-cd $MY_DIR\n-find . -name '*.rs' | xargs ./update-references.sh $BUILD_DIR"}, {"sha": "aa99d35f7aa779924dd17c96675ee50449f3343f", "filename": "tests/ui-posix/update-references.sh", "status": "removed", "additions": 0, "deletions": 50, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/9a0a8a0010e0da18d664e8895a3d73b784f026b8/tests%2Fui-posix%2Fupdate-references.sh", "raw_url": "https://github.com/rust-lang/rust/raw/9a0a8a0010e0da18d664e8895a3d73b784f026b8/tests%2Fui-posix%2Fupdate-references.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-posix%2Fupdate-references.sh?ref=9a0a8a0010e0da18d664e8895a3d73b784f026b8", "patch": "@@ -1,50 +0,0 @@\n-#!/bin/bash\n-#\n-# Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n-# file at the top-level directory of this distribution and at\n-# http://rust-lang.org/COPYRIGHT.\n-#\n-# Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-# http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-# <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-# option. This file may not be copied, modified, or distributed\n-# except according to those terms.\n-\n-# A script to update the references for particular tests. The idea is\n-# that you do a run, which will generate files in the build directory\n-# containing the (normalized) actual output of the compiler. This\n-# script will then copy that output and replace the \"expected output\"\n-# files. You can then commit the changes.\n-#\n-# If you find yourself manually editing a foo.stderr file, you're\n-# doing it wrong.\n-\n-if [[ \"$1\" == \"--help\" || \"$1\" == \"-h\" || \"$1\" == \"\" || \"$2\" == \"\" ]]; then\n-    echo \"usage: $0 <build-directory> <relative-path-to-rs-files>\"\n-    echo \"\"\n-    echo \"For example:\"\n-    echo \"   $0 ../../../build/x86_64-apple-darwin/test/ui *.rs */*.rs\"\n-fi\n-\n-MYDIR=$(dirname $0)\n-\n-BUILD_DIR=\"$1\"\n-shift\n-\n-while [[ \"$1\" != \"\" ]]; do\n-    STDERR_NAME=\"${1/%.rs/.stderr}\"\n-    STDOUT_NAME=\"${1/%.rs/.stdout}\"\n-    shift\n-    if [ -f $BUILD_DIR/$STDOUT_NAME ] && \\\n-           ! (diff $BUILD_DIR/$STDOUT_NAME $MYDIR/$STDOUT_NAME >& /dev/null); then\n-        echo updating $MYDIR/$STDOUT_NAME\n-        cp $BUILD_DIR/$STDOUT_NAME $MYDIR/$STDOUT_NAME\n-    fi\n-    if [ -f $BUILD_DIR/$STDERR_NAME ] && \\\n-           ! (diff $BUILD_DIR/$STDERR_NAME $MYDIR/$STDERR_NAME >& /dev/null); then\n-        echo updating $MYDIR/$STDERR_NAME\n-        cp $BUILD_DIR/$STDERR_NAME $MYDIR/$STDERR_NAME\n-    fi\n-done\n-\n-"}, {"sha": "e287f7e02af932cc5f8ba849aaf8f18c89a9fc7b", "filename": "tests/ui-windows/conf_non_existant.rs", "status": "removed", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9a0a8a0010e0da18d664e8895a3d73b784f026b8/tests%2Fui-windows%2Fconf_non_existant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a0a8a0010e0da18d664e8895a3d73b784f026b8/tests%2Fui-windows%2Fconf_non_existant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-windows%2Fconf_non_existant.rs?ref=9a0a8a0010e0da18d664e8895a3d73b784f026b8", "patch": "@@ -1,6 +0,0 @@\n-// error-pattern: error reading Clippy's configuration file\n-\n-#![feature(plugin)]\n-#![plugin(clippy(conf_file=\"./tests/auxiliary/non_existant_conf.toml\"))]\n-\n-fn main() {}"}, {"sha": "f21ae524f5eaafee1d82f7a66edbcb23a42594e8", "filename": "tests/ui-windows/conf_non_existant.stderr", "status": "removed", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9a0a8a0010e0da18d664e8895a3d73b784f026b8/tests%2Fui-windows%2Fconf_non_existant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9a0a8a0010e0da18d664e8895a3d73b784f026b8/tests%2Fui-windows%2Fconf_non_existant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-windows%2Fconf_non_existant.stderr?ref=9a0a8a0010e0da18d664e8895a3d73b784f026b8", "patch": "@@ -1,4 +0,0 @@\n-error: error reading Clippy's configuration file: The system cannot find the file specified. (os error 2)\n-\n-error: aborting due to previous error\n-"}, {"sha": "d6aa69c7e8d3ecec149a1c3880b20ab18c8cabc2", "filename": "tests/ui-windows/update-all-references.sh", "status": "removed", "additions": 0, "deletions": 28, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/9a0a8a0010e0da18d664e8895a3d73b784f026b8/tests%2Fui-windows%2Fupdate-all-references.sh", "raw_url": "https://github.com/rust-lang/rust/raw/9a0a8a0010e0da18d664e8895a3d73b784f026b8/tests%2Fui-windows%2Fupdate-all-references.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-windows%2Fupdate-all-references.sh?ref=9a0a8a0010e0da18d664e8895a3d73b784f026b8", "patch": "@@ -1,28 +0,0 @@\n-#!/bin/bash\n-#\n-# Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n-# file at the top-level directory of this distribution and at\n-# http://rust-lang.org/COPYRIGHT.\n-#\n-# Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-# http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-# <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-# option. This file may not be copied, modified, or distributed\n-# except according to those terms.\n-\n-# A script to update the references for all tests. The idea is that\n-# you do a run, which will generate files in the build directory\n-# containing the (normalized) actual output of the compiler. You then\n-# run this script, which will copy those files over. If you find\n-# yourself manually editing a foo.stderr file, you're doing it wrong.\n-#\n-# See all `update-references.sh`, if you just want to update a single test.\n-\n-if [[ \"$1\" == \"--help\" || \"$1\" == \"-h\" || \"$1\" == \"\" ]]; then\n-    echo \"usage: $0\"\n-fi\n-\n-BUILD_DIR=$PWD/target/debug/test_build_base\n-MY_DIR=$(dirname $0)\n-cd $MY_DIR\n-find . -name '*.rs' | xargs ./update-references.sh $BUILD_DIR"}, {"sha": "aa99d35f7aa779924dd17c96675ee50449f3343f", "filename": "tests/ui-windows/update-references.sh", "status": "removed", "additions": 0, "deletions": 50, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/9a0a8a0010e0da18d664e8895a3d73b784f026b8/tests%2Fui-windows%2Fupdate-references.sh", "raw_url": "https://github.com/rust-lang/rust/raw/9a0a8a0010e0da18d664e8895a3d73b784f026b8/tests%2Fui-windows%2Fupdate-references.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-windows%2Fupdate-references.sh?ref=9a0a8a0010e0da18d664e8895a3d73b784f026b8", "patch": "@@ -1,50 +0,0 @@\n-#!/bin/bash\n-#\n-# Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n-# file at the top-level directory of this distribution and at\n-# http://rust-lang.org/COPYRIGHT.\n-#\n-# Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-# http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-# <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-# option. This file may not be copied, modified, or distributed\n-# except according to those terms.\n-\n-# A script to update the references for particular tests. The idea is\n-# that you do a run, which will generate files in the build directory\n-# containing the (normalized) actual output of the compiler. This\n-# script will then copy that output and replace the \"expected output\"\n-# files. You can then commit the changes.\n-#\n-# If you find yourself manually editing a foo.stderr file, you're\n-# doing it wrong.\n-\n-if [[ \"$1\" == \"--help\" || \"$1\" == \"-h\" || \"$1\" == \"\" || \"$2\" == \"\" ]]; then\n-    echo \"usage: $0 <build-directory> <relative-path-to-rs-files>\"\n-    echo \"\"\n-    echo \"For example:\"\n-    echo \"   $0 ../../../build/x86_64-apple-darwin/test/ui *.rs */*.rs\"\n-fi\n-\n-MYDIR=$(dirname $0)\n-\n-BUILD_DIR=\"$1\"\n-shift\n-\n-while [[ \"$1\" != \"\" ]]; do\n-    STDERR_NAME=\"${1/%.rs/.stderr}\"\n-    STDOUT_NAME=\"${1/%.rs/.stdout}\"\n-    shift\n-    if [ -f $BUILD_DIR/$STDOUT_NAME ] && \\\n-           ! (diff $BUILD_DIR/$STDOUT_NAME $MYDIR/$STDOUT_NAME >& /dev/null); then\n-        echo updating $MYDIR/$STDOUT_NAME\n-        cp $BUILD_DIR/$STDOUT_NAME $MYDIR/$STDOUT_NAME\n-    fi\n-    if [ -f $BUILD_DIR/$STDERR_NAME ] && \\\n-           ! (diff $BUILD_DIR/$STDERR_NAME $MYDIR/$STDERR_NAME >& /dev/null); then\n-        echo updating $MYDIR/$STDERR_NAME\n-        cp $BUILD_DIR/$STDERR_NAME $MYDIR/$STDERR_NAME\n-    fi\n-done\n-\n-"}, {"sha": "1f88d94bd2ba683298fdd83ef471cace56507aa1", "filename": "tests/ui/absurd-extreme-comparisons.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fabsurd-extreme-comparisons.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fabsurd-extreme-comparisons.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fabsurd-extreme-comparisons.rs?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -1,5 +1,5 @@\n-#![feature(plugin)]\n-#![plugin(clippy)]\n+\n+\n \n #![warn(absurd_extreme_comparisons)]\n #![allow(unused, eq_op, no_effect, unnecessary_operation, needless_pass_by_value)]"}, {"sha": "a4b8839797c3a883384908f729d47cbed9050929", "filename": "tests/ui/absurd-extreme-comparisons.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fabsurd-extreme-comparisons.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fabsurd-extreme-comparisons.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fabsurd-extreme-comparisons.stderr?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -143,5 +143,3 @@ error: <-comparison of unit values detected. This will always be false\n    |\n    = note: `-D unit-cmp` implied by `-D warnings`\n \n-error: aborting due to 18 previous errors\n-"}, {"sha": "f2239ecb467ce004ccb5d512fa8308b0cf548ebc", "filename": "tests/ui/approx_const.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fapprox_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fapprox_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fapprox_const.rs?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -1,5 +1,5 @@\n-#![feature(plugin)]\n-#![plugin(clippy)]\n+\n+\n \n #[warn(approx_constant)]\n #[allow(unused, shadow_unrelated, similar_names)]"}, {"sha": "f102dc5b5dcae594cf480bb246bf77a831c4727f", "filename": "tests/ui/approx_const.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fapprox_const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fapprox_const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fapprox_const.stderr?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -114,5 +114,3 @@ error: approximate value of `f{32, 64}::consts::SQRT_2` found. Consider using it\n 55 |     let my_sq2 = 1.4142;\n    |                  ^^^^^^\n \n-error: aborting due to 19 previous errors\n-"}, {"sha": "7ed71b597074fec7767cc670f8b789f0a6c95668", "filename": "tests/ui/arithmetic.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Farithmetic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Farithmetic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Farithmetic.rs?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -1,5 +1,5 @@\n-#![feature(plugin)]\n-#![plugin(clippy)]\n+\n+\n \n #![warn(integer_arithmetic, float_arithmetic)]\n #![allow(unused, shadow_reuse, shadow_unrelated, no_effect, unnecessary_operation)]"}, {"sha": "ea32a005219088bd0967fba2e3780add7732b5f9", "filename": "tests/ui/arithmetic.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Farithmetic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Farithmetic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Farithmetic.stderr?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -69,5 +69,3 @@ error: floating-point arithmetic detected\n 29 |     -f;\n    |     ^^\n \n-error: aborting due to 11 previous errors\n-"}, {"sha": "faafa9a7a0d25c7ae687e4b79c364b4bacc10940", "filename": "tests/ui/array_indexing.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Farray_indexing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Farray_indexing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Farray_indexing.rs?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -1,5 +1,5 @@\n #![feature(inclusive_range_syntax, plugin)]\n-#![plugin(clippy)]\n+\n \n #![warn(indexing_slicing)]\n #![warn(out_of_bounds_indexing)]\n@@ -13,8 +13,8 @@ fn main() {\n     x[1 << 3];\n     &x[1..5];\n     &x[0..3];\n-    &x[0...4];\n-    &x[...4];\n+    &x[0..=4];\n+    &x[..=4];\n     &x[..];\n     &x[1..];\n     &x[4..];\n@@ -26,19 +26,19 @@ fn main() {\n     y[0];\n     &y[1..2];\n     &y[..];\n-    &y[0...4];\n-    &y[...4];\n+    &y[0..=4];\n+    &y[..=4];\n \n     let empty: [i8; 0] = [];\n     empty[0];\n     &empty[1..5];\n-    &empty[0...4];\n-    &empty[...4];\n+    &empty[0..=4];\n+    &empty[..=4];\n     &empty[..];\n     &empty[0..];\n     &empty[0..0];\n-    &empty[0...0];\n-    &empty[...0];\n+    &empty[0..=0];\n+    &empty[..=0];\n     &empty[..0];\n     &empty[1..];\n     &empty[..4];"}, {"sha": "dd11247243c2c2851e648f9e49952a4d0fd1509a", "filename": "tests/ui/array_indexing.stderr", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Farray_indexing.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Farray_indexing.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Farray_indexing.stderr?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -21,13 +21,13 @@ error: range is out of bounds\n error: range is out of bounds\n   --> $DIR/array_indexing.rs:16:6\n    |\n-16 |     &x[0...4];\n+16 |     &x[0..=4];\n    |      ^^^^^^^^\n \n error: range is out of bounds\n   --> $DIR/array_indexing.rs:17:6\n    |\n-17 |     &x[...4];\n+17 |     &x[..=4];\n    |      ^^^^^^^\n \n error: range is out of bounds\n@@ -59,13 +59,13 @@ error: slicing may panic\n error: slicing may panic\n   --> $DIR/array_indexing.rs:29:6\n    |\n-29 |     &y[0...4];\n+29 |     &y[0..=4];\n    |      ^^^^^^^^\n \n error: slicing may panic\n   --> $DIR/array_indexing.rs:30:6\n    |\n-30 |     &y[...4];\n+30 |     &y[..=4];\n    |      ^^^^^^^\n \n error: const index is out of bounds\n@@ -83,25 +83,25 @@ error: range is out of bounds\n error: range is out of bounds\n   --> $DIR/array_indexing.rs:35:6\n    |\n-35 |     &empty[0...4];\n+35 |     &empty[0..=4];\n    |      ^^^^^^^^^^^^\n \n error: range is out of bounds\n   --> $DIR/array_indexing.rs:36:6\n    |\n-36 |     &empty[...4];\n+36 |     &empty[..=4];\n    |      ^^^^^^^^^^^\n \n error: range is out of bounds\n   --> $DIR/array_indexing.rs:40:6\n    |\n-40 |     &empty[0...0];\n+40 |     &empty[0..=0];\n    |      ^^^^^^^^^^^^\n \n error: range is out of bounds\n   --> $DIR/array_indexing.rs:41:6\n    |\n-41 |     &empty[...0];\n+41 |     &empty[..=0];\n    |      ^^^^^^^^^^^\n \n error: range is out of bounds\n@@ -116,5 +116,3 @@ error: range is out of bounds\n 44 |     &empty[..4];\n    |      ^^^^^^^^^^\n \n-error: aborting due to 19 previous errors\n-"}, {"sha": "2b49f2146ba4d4e29296f38e7d63d1e26b43ad1b", "filename": "tests/ui/assign_ops.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fassign_ops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fassign_ops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassign_ops.rs?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -1,5 +1,5 @@\n-#![feature(plugin)]\n-#![plugin(clippy)]\n+\n+\n \n #[warn(assign_ops)]\n #[allow(unused_assignments)]"}, {"sha": "c1cc5d24426c46fa48f8430802a7e6d1722d7948", "filename": "tests/ui/assign_ops.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fassign_ops.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fassign_ops.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassign_ops.stderr?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -134,5 +134,3 @@ error: manual implementation of an assign operation\n 40 |     s = s + \"bla\";\n    |     ^^^^^^^^^^^^^ help: replace it with: `s += \"bla\"`\n \n-error: aborting due to 22 previous errors\n-"}, {"sha": "8d6ef827f52dbf208eb69338d7a71122b03a7757", "filename": "tests/ui/assign_ops2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fassign_ops2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fassign_ops2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassign_ops2.rs?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -1,5 +1,5 @@\n-#![feature(plugin)]\n-#![plugin(clippy)]\n+\n+\n \n #[allow(unused_assignments)]\n #[warn(misrefactored_assign_op)]"}, {"sha": "47528c315d435df3eab857fd6eaddb70a1d1ff61", "filename": "tests/ui/assign_ops2.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fassign_ops2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fassign_ops2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassign_ops2.stderr?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -48,5 +48,3 @@ error: variable appears on both sides of an assignment operation\n 15 |     a &= a & 1;\n    |     ^^^^^^^^^^ help: replace it with: `a &= 1`\n \n-error: aborting due to 8 previous errors\n-"}, {"sha": "eb27b833aded0742735a78809017ddc4c31ba895", "filename": "tests/ui/attrs.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fattrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fattrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fattrs.rs?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -1,5 +1,5 @@\n-#![feature(plugin)]\n-#![plugin(clippy)]\n+\n+\n \n #![warn(inline_always, deprecated_semver)]\n "}, {"sha": "9e4ac3d12834793eca07ea9fb2562c10f300578e", "filename": "tests/ui/attrs.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fattrs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fattrs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fattrs.stderr?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -20,5 +20,3 @@ error: the since field must contain a semver-compliant version\n 30 | #[deprecated(since = \"1\")]\n    |              ^^^^^^^^^^^\n \n-error: aborting due to 3 previous errors\n-"}, {"sha": "4843b4eba0d4a7ac16be529c1567402b55d88035", "filename": "tests/ui/bit_masks.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fbit_masks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fbit_masks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbit_masks.rs?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -1,5 +1,5 @@\n-#![feature(plugin)]\n-#![plugin(clippy)]\n+\n+\n \n const THREE_BITS : i64 = 7;\n const EVEN_MORE_REDIRECTION : i64 = THREE_BITS;"}, {"sha": "9f2c2d0a2c4aaeb65975b4994c9b160f63d25c39", "filename": "tests/ui/bit_masks.stderr", "status": "modified", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fbit_masks.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fbit_masks.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbit_masks.stderr?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -6,20 +6,6 @@ error: &-masking with zero\n    |\n    = note: `-D bad-bit-mask` implied by `-D warnings`\n \n-error: bit mask could be simplified with a call to `trailing_zeros`\n-  --> $DIR/bit_masks.rs:12:5\n-   |\n-12 |     x & 0 == 0;\n-   |     ^^^^^^^^^^ help: try: `x.trailing_zeros() >= 0`\n-   |\n-   = note: `-D verbose-bit-mask` implied by `-D warnings`\n-\n-error: bit mask could be simplified with a call to `trailing_zeros`\n-  --> $DIR/bit_masks.rs:14:5\n-   |\n-14 |     x & 1 == 0; //ok, compared with zero\n-   |     ^^^^^^^^^^ help: try: `x.trailing_zeros() >= 1`\n-\n error: incompatible bit mask: `_ & 2` can never be equal to `1`\n   --> $DIR/bit_masks.rs:15:5\n    |\n@@ -106,5 +92,3 @@ error: ineffective bit mask: `x | 1` compared to `8`, is the same as x compared\n 55 |     x | 1 >= 8;\n    |     ^^^^^^^^^^\n \n-error: aborting due to 17 previous errors\n-"}, {"sha": "7baeb7bb75cbbc7d3d76a11e3a32f5ff0030c5af", "filename": "tests/ui/blacklisted_name.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fblacklisted_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fblacklisted_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fblacklisted_name.rs?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -1,5 +1,5 @@\n-#![feature(plugin)]\n-#![plugin(clippy)]\n+\n+\n \n #![allow(dead_code, similar_names, single_match, toplevel_ref_arg, unused_mut, unused_variables)]\n #![warn(blacklisted_name)]"}, {"sha": "a08a532689439e11522cc1368e65f14658f10e78", "filename": "tests/ui/blacklisted_name.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fblacklisted_name.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fblacklisted_name.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fblacklisted_name.stderr?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -84,5 +84,3 @@ error: use of a blacklisted/placeholder name `baz`\n 35 |     if let Some(ref mut baz) = Some(42) {}\n    |                         ^^^\n \n-error: aborting due to 14 previous errors\n-"}, {"sha": "9e65a127af288dc76f40cf976e490e2ebc5eedfe", "filename": "tests/ui/block_in_if_condition.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fblock_in_if_condition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fblock_in_if_condition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fblock_in_if_condition.rs?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -1,5 +1,5 @@\n-#![feature(plugin)]\n-#![plugin(clippy)]\n+\n+\n \n #![warn(block_in_if_condition_expr)]\n #![warn(block_in_if_condition_stmt)]"}, {"sha": "86a289c19a84101ee128ce2d3bec42f9314c44ef", "filename": "tests/ui/block_in_if_condition.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fblock_in_if_condition.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fblock_in_if_condition.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fblock_in_if_condition.stderr?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -50,5 +50,3 @@ error: this boolean expression can be simplified\n    |\n    = note: `-D nonminimal-bool` implied by `-D warnings`\n \n-error: aborting due to 5 previous errors\n-"}, {"sha": "f05b9894fea0e7a21514f3b118e9dcf6be895706", "filename": "tests/ui/bool_comparison.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fbool_comparison.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fbool_comparison.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbool_comparison.rs?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -1,5 +1,5 @@\n-#![feature(plugin)]\n-#![plugin(clippy)]\n+\n+\n \n #[warn(bool_comparison)]\n fn main() {"}, {"sha": "e5e062e0246d357c7f55711200ef6e9cb7685e6a", "filename": "tests/ui/bool_comparison.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fbool_comparison.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fbool_comparison.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbool_comparison.stderr?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -24,5 +24,3 @@ error: equality checks against false can be replaced by a negation\n 10 |     if false == x { \"yes\" } else { \"no\" };\n    |        ^^^^^^^^^^ help: try simplifying it as shown: `!x`\n \n-error: aborting due to 4 previous errors\n-"}, {"sha": "0434285a523863656500a15bf46a5893d8f87aef", "filename": "tests/ui/booleans.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fbooleans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fbooleans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbooleans.rs?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -1,5 +1,5 @@\n-#![feature(plugin)]\n-#![plugin(clippy)]\n+\n+\n #![warn(nonminimal_bool, logic_bug)]\n \n #[allow(unused, many_single_char_names)]"}, {"sha": "0311e95a4f11d68d7e1b9578d7b2486fbb0c9e39", "filename": "tests/ui/booleans.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fbooleans.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fbooleans.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbooleans.stderr?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -130,5 +130,3 @@ help: try\n 39 |     let _ = !(a == b && c == d);\n    |             ^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to 13 previous errors\n-"}, {"sha": "394b810ed866fcc34c7f84fc30a1d40bd15a4c8d", "filename": "tests/ui/borrow_box.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fborrow_box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fborrow_box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fborrow_box.rs?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -1,5 +1,5 @@\n-#![feature(plugin)]\n-#![plugin(clippy)]\n+\n+\n \n #![deny(borrowed_box)]\n #![allow(blacklisted_name)]"}, {"sha": "74134f4f2b18c898f578ea68072de3c26b14f3a4", "filename": "tests/ui/borrow_box.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fborrow_box.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fborrow_box.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fborrow_box.stderr?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -28,5 +28,3 @@ error: you seem to be trying to use `&Box<T>`. Consider using just `&T`\n 22 |     fn test4(a: &Box<bool>);\n    |                 ^^^^^^^^^^ help: try: `&bool`\n \n-error: aborting due to 4 previous errors\n-"}, {"sha": "75b3b62643e8590e9a74c90858c66d7d42d73a5a", "filename": "tests/ui/box_vec.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fbox_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fbox_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbox_vec.rs?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -1,5 +1,5 @@\n-#![feature(plugin)]\n-#![plugin(clippy)]\n+\n+\n \n #![warn(clippy)]\n #![allow(boxed_local, needless_pass_by_value)]"}, {"sha": "c1badd0dc9b47f323aba9379e83f022c99a3f338", "filename": "tests/ui/box_vec.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fbox_vec.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fbox_vec.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbox_vec.stderr?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -7,5 +7,3 @@ error: you seem to be trying to use `Box<Vec<T>>`. Consider using just `Vec<T>`\n    = note: `-D box-vec` implied by `-D warnings`\n    = help: `Vec<T>` is already on the heap, `Box<Vec<T>>` makes an extra allocation.\n \n-error: aborting due to previous error\n-"}, {"sha": "4c4f5cbd3fe77ced71c03b8766e9490c9e2ef1d2", "filename": "tests/ui/builtin-type-shadow.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fbuiltin-type-shadow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fbuiltin-type-shadow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbuiltin-type-shadow.rs?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -1,5 +1,5 @@\n-#![feature(plugin)]\n-#![plugin(clippy)]\n+\n+\n #![warn(builtin_type_shadow)]\n \n fn foo<u32>(a: u32) -> u32 {"}, {"sha": "058813356cd0aada599146eb14b4538b9ae12203", "filename": "tests/ui/builtin-type-shadow.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fbuiltin-type-shadow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fbuiltin-type-shadow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbuiltin-type-shadow.stderr?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -17,5 +17,3 @@ error[E0308]: mismatched types\n   = note: expected type `u32`\n              found type `{integer}`\n \n-error: aborting due to 2 previous errors\n-"}, {"sha": "fc94667d968faf51637e54716f5be60995baf516", "filename": "tests/ui/bytecount.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fbytecount.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fbytecount.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbytecount.rs?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -1,5 +1,5 @@\n-#![feature(plugin)]\n-#![plugin(clippy)]\n+\n+\n \n #[deny(naive_bytecount)]\n fn main() {"}, {"sha": "c4f6b65a21ea37ed2c80a724ce6ce702a388c5d5", "filename": "tests/ui/bytecount.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fbytecount.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fbytecount.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbytecount.stderr?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -22,5 +22,3 @@ error: You appear to be counting bytes the naive way\n 22 |     let _ = x.iter().filter(|a| b + 1 == **a).count(); // naive byte count\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: Consider using the bytecount crate: `bytecount::count(x, b + 1)`\n \n-error: aborting due to 3 previous errors\n-"}, {"sha": "1ad4630989dde4cd96ca31d5ca7a963a3c176a50", "filename": "tests/ui/cast.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcast.rs?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -1,5 +1,5 @@\n-#![feature(plugin)]\n-#![plugin(clippy)]\n+\n+\n \n #[warn(cast_precision_loss, cast_possible_truncation, cast_sign_loss, cast_possible_wrap, cast_lossless)]\n #[allow(no_effect, unnecessary_operation)]"}, {"sha": "5e7ed6fae99cad7e369da4a40ea89f8c78235475", "filename": "tests/ui/cast.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fcast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fcast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcast.stderr?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -460,5 +460,3 @@ error: casting to the same type is unnecessary (`bool` -> `bool`)\n 88 |     false as bool;\n    |     ^^^^^^^^^^^^^\n \n-error: aborting due to 75 previous errors\n-"}, {"sha": "c69181c7649327aa270d55a23fc36c5eb2f7f69b", "filename": "tests/ui/char_lit_as_u8.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fchar_lit_as_u8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fchar_lit_as_u8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fchar_lit_as_u8.rs?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -1,5 +1,5 @@\n-#![feature(plugin)]\n-#![plugin(clippy)]\n+\n+\n \n #![warn(char_lit_as_u8)]\n #![allow(unused_variables)]"}, {"sha": "4e7c1866a9af7d5c9fceb4df3cd92effa1a2a2c1", "filename": "tests/ui/char_lit_as_u8.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fchar_lit_as_u8.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fchar_lit_as_u8.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fchar_lit_as_u8.stderr?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -8,5 +8,3 @@ error: casting character literal to u8. `char`s are 4 bytes wide in rust, so cas\n   = help: Consider using a byte literal instead:\n           b'a'\n \n-error: aborting due to previous error\n-"}, {"sha": "71dfdd43da7cc0c745ff1a625d8f10762f0cbd6b", "filename": "tests/ui/cmp_nan.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fcmp_nan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fcmp_nan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcmp_nan.rs?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -1,5 +1,5 @@\n-#![feature(plugin)]\n-#![plugin(clippy)]\n+\n+\n \n #[warn(cmp_nan)]\n #[allow(float_cmp, no_effect, unnecessary_operation)]"}, {"sha": "9ea1a29d29daac963a601eb6db1a94d1cd1b7258", "filename": "tests/ui/cmp_nan.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fcmp_nan.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fcmp_nan.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcmp_nan.stderr?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -72,5 +72,3 @@ error: doomed comparison with NAN, use `std::{f32,f64}::is_nan()` instead\n 21 |     y >= std::f64::NAN;\n    |     ^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to 12 previous errors\n-"}, {"sha": "0f463bcfc30df74bcb051c56a7035699bec1e996", "filename": "tests/ui/cmp_null.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fcmp_null.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fcmp_null.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcmp_null.rs?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -1,5 +1,5 @@\n-#![feature(plugin)]\n-#![plugin(clippy)]\n+\n+\n #![warn(cmp_null)]\n #![allow(unused_mut)]\n "}, {"sha": "51c0ceea4b1498bbda2c55ab91e10025e7299e68", "filename": "tests/ui/cmp_null.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fcmp_null.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fcmp_null.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcmp_null.stderr?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -12,5 +12,3 @@ error: Comparing with null is better expressed by the .is_null() method\n 16 |     if m == ptr::null_mut() {\n    |        ^^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to 2 previous errors\n-"}, {"sha": "36d3140d246fb30697ccef5b49d551fa140edefc", "filename": "tests/ui/cmp_owned.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fcmp_owned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fcmp_owned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcmp_owned.rs?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -1,5 +1,5 @@\n-#![feature(plugin)]\n-#![plugin(clippy)]\n+\n+\n \n #[warn(cmp_owned)]\n #[allow(unnecessary_operation)]"}, {"sha": "e699624466422365bfcffe5a129e255639f91036", "filename": "tests/ui/cmp_owned.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fcmp_owned.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fcmp_owned.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcmp_owned.stderr?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -36,5 +36,3 @@ error: this creates an owned instance just for comparison\n 30 |         self.to_owned() == *other\n    |         ^^^^^^^^^^^^^^^ try calling implementing the comparison without allocating\n \n-error: aborting due to 6 previous errors\n-"}, {"sha": "3c5c38525fe7caee5f6257223a8f0fa5f07febf7", "filename": "tests/ui/collapsible_if.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fcollapsible_if.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fcollapsible_if.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcollapsible_if.rs?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -1,5 +1,5 @@\n-#![feature(plugin)]\n-#![plugin(clippy)]\n+\n+\n \n #[warn(collapsible_if)]\n fn main() {"}, {"sha": "e726a36282b5728eb1d631595ee7128ac18620d4", "filename": "tests/ui/collapsible_if.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fcollapsible_if.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fcollapsible_if.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcollapsible_if.stderr?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -252,5 +252,3 @@ help: try\n 112 | }\n     |\n \n-error: aborting due to 13 previous errors\n-"}, {"sha": "7719a7a86322b3d4cf57be14e32f6335bea4e136", "filename": "tests/ui/complex_types.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fcomplex_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fcomplex_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcomplex_types.rs?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -1,5 +1,5 @@\n-#![feature(plugin)]\n-#![plugin(clippy)]\n+\n+\n #![warn(clippy)]\n #![allow(unused, needless_pass_by_value)]\n #![feature(associated_type_defaults)]"}, {"sha": "8ce63652f0b6a7285476fa893c20f693a6eb2cdd", "filename": "tests/ui/complex_types.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fcomplex_types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fcomplex_types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcomplex_types.stderr?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -90,5 +90,3 @@ error: very complex type used. Consider factoring parts into `type` definitions\n 40 |     let _y: Vec<Vec<Box<(u32, u32, u32, u32)>>> = vec![];\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to 15 previous errors\n-"}, {"sha": "b988fdb13853bdf3f78b002a1df6509ac0174ca0", "filename": "tests/ui/conf_bad_arg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fconf_bad_arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fconf_bad_arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconf_bad_arg.rs?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -1,6 +1,6 @@\n // error-pattern: `conf_file` must be a named value\n \n-#![feature(plugin)]\n+\n #![plugin(clippy(conf_file))]\n \n fn main() {}"}, {"sha": "d91729039b1913c733f0a0d9245b8fdf649215dc", "filename": "tests/ui/conf_bad_arg.stderr", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fconf_bad_arg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fconf_bad_arg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconf_bad_arg.stderr?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -1,14 +1,8 @@\n-error: `conf_file` must be a named value\n- --> $DIR/conf_bad_arg.rs:4:18\n+error: compiler plugins are experimental and possibly buggy (see issue #29597)\n+ --> $DIR/conf_bad_arg.rs:4:1\n   |\n 4 | #![plugin(clippy(conf_file))]\n-  |                  ^^^^^^^^^\n+  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n-note: Clippy will use default configuration\n- --> $DIR/conf_bad_arg.rs:4:18\n-  |\n-4 | #![plugin(clippy(conf_file))]\n-  |                  ^^^^^^^^^\n-\n-error: aborting due to previous error\n+  = help: add #![feature(plugin)] to the crate attributes to enable\n "}, {"sha": "4de2cf6ae73c053fa4eac55c35a1a640ffb9a6a8", "filename": "tests/ui/conf_bad_toml.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fconf_bad_toml.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fconf_bad_toml.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconf_bad_toml.rs?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -1,6 +1,6 @@\n // error-pattern: error reading Clippy's configuration file\n \n-#![feature(plugin)]\n+\n #![plugin(clippy(conf_file=\"./tests/ui/conf_bad_toml.toml\"))]\n \n fn main() {}"}, {"sha": "5ddf8c14f70f566b420fe1a64534454f10c7b414", "filename": "tests/ui/conf_bad_toml.stderr", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fconf_bad_toml.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fconf_bad_toml.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconf_bad_toml.stderr?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -1,4 +1,8 @@\n-error: error reading Clippy's configuration file: expected an equals, found an identifier at line 1\n-\n-error: aborting due to previous error\n+error: compiler plugins are experimental and possibly buggy (see issue #29597)\n+ --> $DIR/conf_bad_toml.rs:4:1\n+  |\n+4 | #![plugin(clippy(conf_file=\"./$DIR/conf_bad_toml.toml\"))]\n+  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+  |\n+  = help: add #![feature(plugin)] to the crate attributes to enable\n "}, {"sha": "4cb21b91582ef3ce8f8f05c7df66dc8d2fa314ae", "filename": "tests/ui/conf_bad_type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fconf_bad_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fconf_bad_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconf_bad_type.rs?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -1,6 +1,6 @@\n // error-pattern: error reading Clippy's configuration file: `blacklisted-names` is expected to be a `Vec < String >` but is a `integer`\n \n-#![feature(plugin)]\n+\n #![plugin(clippy(conf_file=\"./tests/ui/conf_bad_type.toml\"))]\n \n fn main() {}"}, {"sha": "961df381c9910657a9ec74e4cfeb009c04eaeeea", "filename": "tests/ui/conf_bad_type.stderr", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fconf_bad_type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fconf_bad_type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconf_bad_type.stderr?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -1,4 +1,8 @@\n-error: error reading Clippy's configuration file: invalid type: integer `42`, expected a sequence\n-\n-error: aborting due to previous error\n+error: compiler plugins are experimental and possibly buggy (see issue #29597)\n+ --> $DIR/conf_bad_type.rs:4:1\n+  |\n+4 | #![plugin(clippy(conf_file=\"./$DIR/conf_bad_type.toml\"))]\n+  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+  |\n+  = help: add #![feature(plugin)] to the crate attributes to enable\n "}, {"sha": "9f22ff659f23cc55335281ea4b9b4b87b488c8f8", "filename": "tests/ui/conf_french_blacklisted_name.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fconf_french_blacklisted_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fconf_french_blacklisted_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconf_french_blacklisted_name.rs?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -1,4 +1,4 @@\n-#![feature(plugin)]\n+\n #![plugin(clippy(conf_file=\"./tests/auxiliary/conf_french_blacklisted_name.toml\"))]\n \n #![allow(dead_code)]"}, {"sha": "c98adb6029fafc844f8805a5a06f458a6478203d", "filename": "tests/ui/conf_french_blacklisted_name.stderr", "status": "modified", "additions": 5, "deletions": 43, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fconf_french_blacklisted_name.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fconf_french_blacklisted_name.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconf_french_blacklisted_name.stderr?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -1,46 +1,8 @@\n-error: use of a blacklisted/placeholder name `toto`\n- --> $DIR/conf_french_blacklisted_name.rs:9:9\n+error: compiler plugins are experimental and possibly buggy (see issue #29597)\n+ --> $DIR/conf_french_blacklisted_name.rs:2:1\n   |\n-9 | fn test(toto: ()) {}\n-  |         ^^^^\n+2 | #![plugin(clippy(conf_file=\"./tests/auxiliary/conf_french_blacklisted_name.toml\"))]\n+  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n-  = note: `-D blacklisted-name` implied by `-D warnings`\n-\n-error: use of a blacklisted/placeholder name `toto`\n-  --> $DIR/conf_french_blacklisted_name.rs:12:9\n-   |\n-12 |     let toto = 42;\n-   |         ^^^^\n-\n-error: use of a blacklisted/placeholder name `tata`\n-  --> $DIR/conf_french_blacklisted_name.rs:13:9\n-   |\n-13 |     let tata = 42;\n-   |         ^^^^\n-\n-error: use of a blacklisted/placeholder name `titi`\n-  --> $DIR/conf_french_blacklisted_name.rs:14:9\n-   |\n-14 |     let titi = 42;\n-   |         ^^^^\n-\n-error: use of a blacklisted/placeholder name `toto`\n-  --> $DIR/conf_french_blacklisted_name.rs:20:10\n-   |\n-20 |         (toto, Some(tata), titi @ Some(_)) => (),\n-   |          ^^^^\n-\n-error: use of a blacklisted/placeholder name `tata`\n-  --> $DIR/conf_french_blacklisted_name.rs:20:21\n-   |\n-20 |         (toto, Some(tata), titi @ Some(_)) => (),\n-   |                     ^^^^\n-\n-error: use of a blacklisted/placeholder name `titi`\n-  --> $DIR/conf_french_blacklisted_name.rs:20:28\n-   |\n-20 |         (toto, Some(tata), titi @ Some(_)) => (),\n-   |                            ^^^^\n-\n-error: aborting due to 7 previous errors\n+  = help: add #![feature(plugin)] to the crate attributes to enable\n "}, {"sha": "8d1f01358fc8f5b93699a41df350cc3dd87ff5b1", "filename": "tests/ui/conf_path_non_string.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fconf_path_non_string.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fconf_path_non_string.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconf_path_non_string.rs?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -1,5 +1,5 @@\n #![feature(attr_literals)]\n-#![feature(plugin)]\n+\n #![plugin(clippy(conf_file=42))]\n \n fn main() {}"}, {"sha": "4b15b5d0e170c14b5c7e3da661f1b7a64aa43e44", "filename": "tests/ui/conf_path_non_string.stderr", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fconf_path_non_string.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fconf_path_non_string.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconf_path_non_string.stderr?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -1,14 +1,8 @@\n-error: `conf_file` value must be a string\n- --> $DIR/conf_path_non_string.rs:3:28\n+error: compiler plugins are experimental and possibly buggy (see issue #29597)\n+ --> $DIR/conf_path_non_string.rs:3:1\n   |\n 3 | #![plugin(clippy(conf_file=42))]\n-  |                            ^^\n+  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n-note: Clippy will use default configuration\n- --> $DIR/conf_path_non_string.rs:3:28\n-  |\n-3 | #![plugin(clippy(conf_file=42))]\n-  |                            ^^\n-\n-error: aborting due to previous error\n+  = help: add #![feature(plugin)] to the crate attributes to enable\n "}, {"sha": "aec2c883367cd7d57cf02e56a34ebe78c9c578b8", "filename": "tests/ui/conf_unknown_key.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fconf_unknown_key.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fconf_unknown_key.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconf_unknown_key.rs?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -1,6 +1,6 @@\n // error-pattern: error reading Clippy's configuration file: unknown key `foobar`\n \n-#![feature(plugin)]\n+\n #![plugin(clippy(conf_file=\"./tests/auxiliary/conf_unknown_key.toml\"))]\n \n fn main() {}"}, {"sha": "9fc7dbea56344b5cd8ffd08965a4610203443124", "filename": "tests/ui/conf_unknown_key.stderr", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fconf_unknown_key.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fconf_unknown_key.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconf_unknown_key.stderr?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -1,4 +1,8 @@\n-error: error reading Clippy's configuration file: unknown field `foobar`, expected one of `blacklisted-names`, `cyclomatic-complexity-threshold`, `doc-valid-idents`, `too-many-arguments-threshold`, `type-complexity-threshold`, `single-char-binding-names-threshold`, `too-large-for-stack`, `enum-variant-name-threshold`, `enum-variant-size-threshold`, `third-party`\n-\n-error: aborting due to previous error\n+error: compiler plugins are experimental and possibly buggy (see issue #29597)\n+ --> $DIR/conf_unknown_key.rs:4:1\n+  |\n+4 | #![plugin(clippy(conf_file=\"./tests/auxiliary/conf_unknown_key.toml\"))]\n+  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+  |\n+  = help: add #![feature(plugin)] to the crate attributes to enable\n "}, {"sha": "4c4050c014fd148f4d14c3f938dc59ff499b570a", "filename": "tests/ui/copies.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fcopies.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fcopies.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcopies.rs?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -1,5 +1,4 @@\n-#![feature(plugin, inclusive_range_syntax)]\n-#![plugin(clippy)]\n+#![feature(dotdoteq_in_patterns, inclusive_range_syntax)]\n \n #![allow(dead_code, no_effect, unnecessary_operation)]\n #![allow(let_and_return)]\n@@ -33,7 +32,7 @@ fn if_same_then_else() -> Result<&'static str, ()> {\n         ..;\n         0..;\n         ..10;\n-        0...10;\n+        0..=10;\n         foo();\n     }\n     else {\n@@ -42,7 +41,7 @@ fn if_same_then_else() -> Result<&'static str, ()> {\n         ..;\n         0..;\n         ..10;\n-        0...10;\n+        0..=10;\n         foo();\n     }\n \n@@ -64,7 +63,7 @@ fn if_same_then_else() -> Result<&'static str, ()> {\n         0..10;\n     }\n     else {\n-        0...10;\n+        0..=10;\n     }\n \n     if true {\n@@ -161,7 +160,7 @@ fn if_same_then_else() -> Result<&'static str, ()> {\n         let _ = match 42 {\n             42 => 1,\n             a if a > 0 => 2,\n-            10...15 => 3,\n+            10..=15 => 3,\n             _ => 4,\n         };\n     }\n@@ -172,7 +171,7 @@ fn if_same_then_else() -> Result<&'static str, ()> {\n         let _ = match 42 {\n             42 => 1,\n             a if a > 0 => 2,\n-            10...15 => 3,\n+            10..=15 => 3,\n             _ => 4,\n         };\n     }"}, {"sha": "4457e2b7d73173e8bf8f2d1bab3cd5d326e9f2da", "filename": "tests/ui/copies.stderr", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fcopies.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fcopies.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcopies.stderr?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -1,11 +1,11 @@\n error: This else block is redundant.\n \n-   --> $DIR/copies.rs:121:20\n+   --> $DIR/copies.rs:120:20\n     |\n-121 |               } else {\n+120 |               } else {\n     |  ____________________^\n-122 | |                 continue;\n-123 | |             }\n+121 | |                 continue;\n+122 | |             }\n     | |_____________^\n     |\n     = note: `-D needless-continue` implied by `-D warnings`\n@@ -18,12 +18,12 @@ error: This else block is redundant.\n \n error: This else block is redundant.\n \n-   --> $DIR/copies.rs:131:20\n+   --> $DIR/copies.rs:130:20\n     |\n-131 |               } else {\n+130 |               } else {\n     |  ____________________^\n-132 | |                 continue;\n-133 | |             }\n+131 | |                 continue;\n+132 | |             }\n     | |_____________^\n     |\n     = help: Consider dropping the else clause and merging the code that follows (in the loop) with the if block, like so:\n@@ -33,5 +33,3 @@ error: This else block is redundant.\n             }\n             \n \n-error: aborting due to 2 previous errors\n-"}, {"sha": "0f5726e1ad739c563f51de3c8ce82c5906e2d48d", "filename": "tests/ui/cyclomatic_complexity.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fcyclomatic_complexity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fcyclomatic_complexity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcyclomatic_complexity.rs?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -1,5 +1,5 @@\n #![feature(plugin, custom_attribute)]\n-#![plugin(clippy)]\n+\n #![allow(clippy)]\n #![warn(cyclomatic_complexity)]\n #![allow(unused)]"}, {"sha": "62fd5313ccb6150acd769e9c673c848d7630aaba", "filename": "tests/ui/cyclomatic_complexity.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fcyclomatic_complexity.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fcyclomatic_complexity.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcyclomatic_complexity.stderr?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -269,5 +269,3 @@ error: the function has a cyclomatic complexity of 8\n     |\n     = help: you could split it up into multiple smaller functions\n \n-error: aborting due to 20 previous errors\n-"}, {"sha": "5284d60a5245f719a6aa323304975a6283d73a2a", "filename": "tests/ui/cyclomatic_complexity_attr_used.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fcyclomatic_complexity_attr_used.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fcyclomatic_complexity_attr_used.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcyclomatic_complexity_attr_used.rs?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -1,5 +1,5 @@\n #![feature(plugin, custom_attribute)]\n-#![plugin(clippy)]\n+\n #![warn(cyclomatic_complexity)]\n #![warn(unused)]\n "}, {"sha": "a9cefe93e329eb06e21b3df9aab66c0e6fe2fa46", "filename": "tests/ui/cyclomatic_complexity_attr_used.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fcyclomatic_complexity_attr_used.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fcyclomatic_complexity_attr_used.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcyclomatic_complexity_attr_used.stderr?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -13,5 +13,3 @@ error: the function has a cyclomatic complexity of 3\n    = note: `-D cyclomatic-complexity` implied by `-D warnings`\n    = help: you could split it up into multiple smaller functions\n \n-error: aborting due to previous error\n-"}, {"sha": "0598e174e50a6188ed1ef8430d5ed65fd4ea792f", "filename": "tests/ui/deprecated.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fdeprecated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fdeprecated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdeprecated.rs?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -1,5 +1,5 @@\n-#![feature(plugin)]\n-#![plugin(clippy)]\n+\n+\n \n #[warn(str_to_string)]\n "}, {"sha": "4255959675a9bcaf4e093c39f85c8728ba7ece34", "filename": "tests/ui/deprecated.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fdeprecated.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fdeprecated.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdeprecated.stderr?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -24,5 +24,3 @@ error: lint unstable_as_mut_slice has been removed: `Vec::as_mut_slice` has been\n 10 | #[warn(unstable_as_mut_slice)]\n    |        ^^^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to 4 previous errors\n-"}, {"sha": "6440f73f31bddfd3b95a544a6dbb3c2ea8cd9b53", "filename": "tests/ui/derive.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fderive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fderive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fderive.rs?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -1,5 +1,5 @@\n-#![feature(plugin)]\n-#![plugin(clippy)]\n+\n+\n \n #![feature(untagged_unions)]\n "}, {"sha": "f336dc3a8e134f4278f46d6f8388591e0e41f20a", "filename": "tests/ui/derive.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fderive.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fderive.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fderive.stderr?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -106,5 +106,3 @@ note: consider deriving `Clone` or removing `Copy`\n 87 | | }\n    | |_^\n \n-error: aborting due to 7 previous errors\n-"}, {"sha": "d2aea93a77d8efd55135226427c1727a9324a407", "filename": "tests/ui/diverging_sub_expression.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fdiverging_sub_expression.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fdiverging_sub_expression.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdiverging_sub_expression.rs?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -1,5 +1,5 @@\n #![feature(plugin, never_type)]\n-#![plugin(clippy)]\n+\n #![warn(diverging_sub_expression)]\n #![allow(match_same_arms, logic_bug)]\n "}, {"sha": "b39d1ae07e5e5deaf03b505bf89fc4c788758d32", "filename": "tests/ui/diverging_sub_expression.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fdiverging_sub_expression.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fdiverging_sub_expression.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdiverging_sub_expression.stderr?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -36,5 +36,3 @@ error: sub-expression diverges\n 37 |             _ => true || break,\n    |                          ^^^^^\n \n-error: aborting due to 6 previous errors\n-"}, {"sha": "217a564742cf77bb4628012a857dcd45651ae6ad", "filename": "tests/ui/dlist.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fdlist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fdlist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdlist.rs?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -1,7 +1,7 @@\n #![feature(plugin, alloc)]\n #![feature(associated_type_defaults)]\n \n-#![plugin(clippy)]\n+\n #![warn(clippy)]\n #![allow(dead_code, needless_pass_by_value)]\n "}, {"sha": "95872c02994f394868bbb8c7ad19dd42c820e079", "filename": "tests/ui/dlist.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fdlist.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fdlist.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdlist.stderr?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -47,5 +47,3 @@ error: I see you're using a LinkedList! Perhaps you meant some other data struct\n    |\n    = help: a VecDeque might work\n \n-error: aborting due to 6 previous errors\n-"}, {"sha": "45e25409b128b50513482155609160cf8b8b42d6", "filename": "tests/ui/doc.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdoc.rs?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -1,7 +1,7 @@\n //! This file tests for the DOC_MARKDOWN lint\n \n-#![feature(plugin)]\n-#![plugin(clippy)]\n+\n+\n #![allow(dead_code)]\n #![warn(doc_markdown)]\n \n@@ -159,3 +159,11 @@ fn issue_1469() {}\n  *This would also be an error under a strict common mark interpretation\n  */\n fn issue_1920() {}\n+\n+/// Ok: <http://www.unicode.org/reports/tr9/#Reordering_Resolved_Levels>\n+///\n+/// Not ok: http://www.unicode.org\n+/// Not ok: https://www.unicode.org\n+/// Not ok: http://www.unicode.org/\n+/// Not ok: http://www.unicode.org/reports/tr9/#Reordering_Resolved_Levels\n+fn issue_1832() {}"}, {"sha": "fc036d01b8664cbf4250d6510848a9682af75a63", "filename": "tests/ui/doc.stderr", "status": "modified", "additions": 23, "deletions": 1, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fdoc.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fdoc.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdoc.stderr?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -156,5 +156,27 @@ error: you should put `be_sure_we_got_to_the_end_of_it` between ticks in the doc\n 138 | /// be_sure_we_got_to_the_end_of_it\n     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to 26 previous errors\n+error: you should put bare URLs between `<`/`>` or make a proper Markdown link\n+   --> $DIR/doc.rs:165:13\n+    |\n+165 | /// Not ok: http://www.unicode.org\n+    |             ^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: you should put bare URLs between `<`/`>` or make a proper Markdown link\n+   --> $DIR/doc.rs:166:13\n+    |\n+166 | /// Not ok: https://www.unicode.org\n+    |             ^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: you should put bare URLs between `<`/`>` or make a proper Markdown link\n+   --> $DIR/doc.rs:167:13\n+    |\n+167 | /// Not ok: http://www.unicode.org/\n+    |             ^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: you should put bare URLs between `<`/`>` or make a proper Markdown link\n+   --> $DIR/doc.rs:168:13\n+    |\n+168 | /// Not ok: http://www.unicode.org/reports/tr9/#Reordering_Resolved_Levels\n+    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n "}, {"sha": "641e334fd1657ba5ad2d66c3d0ae4a0b072a383e", "filename": "tests/ui/double_neg.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fdouble_neg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fdouble_neg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdouble_neg.rs?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -1,5 +1,5 @@\n-#![feature(plugin)]\n-#![plugin(clippy)]\n+\n+\n \n #[warn(double_neg)]\n fn main() {"}, {"sha": "8c64eb37e15448f5872eaa75ef23eec50287e4ad", "filename": "tests/ui/double_neg.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fdouble_neg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fdouble_neg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdouble_neg.stderr?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -6,5 +6,3 @@ error: `--x` could be misinterpreted as pre-decrement by C programmers, is usual\n   |\n   = note: `-D double-neg` implied by `-D warnings`\n \n-error: aborting due to previous error\n-"}, {"sha": "19d1773286757c35a8165df95cded41ac7f5d7f9", "filename": "tests/ui/double_parens.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fdouble_parens.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fdouble_parens.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdouble_parens.rs?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -1,5 +1,5 @@\n-#![feature(plugin)]\n-#![plugin(clippy)]\n+\n+\n \n #![warn(double_parens)]\n #![allow(dead_code)]"}, {"sha": "ab3e844d7a7f228b979d77ecfb1915d21dfd8ef6", "filename": "tests/ui/double_parens.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fdouble_parens.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fdouble_parens.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdouble_parens.stderr?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -30,5 +30,3 @@ error: Consider removing unnecessary double parentheses\n 32 |     (())\n    |     ^^^^\n \n-error: aborting due to 5 previous errors\n-"}, {"sha": "9fef06b0edeffdf69215084cb4ebc99b0003260a", "filename": "tests/ui/drop_forget_copy.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fdrop_forget_copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fdrop_forget_copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdrop_forget_copy.rs?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -1,5 +1,5 @@\n-#![feature(plugin)]\n-#![plugin(clippy)]\n+\n+\n \n #![warn(drop_copy, forget_copy)]\n #![allow(toplevel_ref_arg, drop_ref, forget_ref, unused_mut)]"}, {"sha": "f399c5a125f8ba0106a2a6c8be0d3c869e79bdca", "filename": "tests/ui/drop_forget_copy.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fdrop_forget_copy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fdrop_forget_copy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdrop_forget_copy.stderr?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -72,5 +72,3 @@ note: argument has type SomeStruct\n 42 |     forget(s4);\n    |            ^^\n \n-error: aborting due to 6 previous errors\n-"}, {"sha": "e8ab6a0d5d1370e4755484aa1fb68b169d732d30", "filename": "tests/ui/drop_forget_ref.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fdrop_forget_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fdrop_forget_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdrop_forget_ref.rs?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -1,5 +1,5 @@\n-#![feature(plugin)]\n-#![plugin(clippy)]\n+\n+\n \n #![warn(drop_ref, forget_ref)]\n #![allow(toplevel_ref_arg, similar_names, needless_pass_by_value)]"}, {"sha": "6058b89c70f36926dac9c777a647378f74202b74", "filename": "tests/ui/drop_forget_ref.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fdrop_forget_ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fdrop_forget_ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdrop_forget_ref.stderr?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -216,5 +216,3 @@ note: argument has type &SomeStruct\n 59 |     std::mem::forget(&SomeStruct);\n    |                      ^^^^^^^^^^^\n \n-error: aborting due to 18 previous errors\n-"}, {"sha": "df00f56aa62152c14f53000e60d351c8b99adeff", "filename": "tests/ui/duplicate_underscore_argument.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fduplicate_underscore_argument.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fduplicate_underscore_argument.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fduplicate_underscore_argument.rs?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -1,5 +1,5 @@\n-#![feature(plugin)]\n-#![plugin(clippy)]\n+\n+\n \n #![warn(duplicate_underscore_argument)]\n #[allow(dead_code, unused)]"}, {"sha": "de9e6f1e056c291e11f57b79bd5218cabdb72863", "filename": "tests/ui/duplicate_underscore_argument.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fduplicate_underscore_argument.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fduplicate_underscore_argument.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fduplicate_underscore_argument.stderr?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -6,5 +6,3 @@ error: `darth` already exists, having another argument having almost the same na\n   |\n   = note: `-D duplicate-underscore-argument` implied by `-D warnings`\n \n-error: aborting due to previous error\n-"}, {"sha": "c6e6946de866ce3dc4e1667f4c059a847234f3fc", "filename": "tests/ui/empty_enum.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fempty_enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fempty_enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fempty_enum.rs?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -1,5 +1,5 @@\n-#![feature(plugin)]\n-#![plugin(clippy)]\n+\n+\n \n #![allow(dead_code)]\n #![warn(empty_enum)]"}, {"sha": "a0d491b6f96869c5f70d4e10e9729c991750991c", "filename": "tests/ui/empty_enum.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fempty_enum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fempty_enum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fempty_enum.stderr?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -11,5 +11,3 @@ help: consider using the uninhabited type `!` or a wrapper around it\n 7 | enum Empty {}\n   | ^^^^^^^^^^^^^\n \n-error: aborting due to previous error\n-"}, {"sha": "ccbc7038f13600aa88b9b6ccd719cab2081c6c1c", "filename": "tests/ui/entry.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fentry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fentry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fentry.rs?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -1,5 +1,5 @@\n-#![feature(plugin)]\n-#![plugin(clippy)]\n+\n+\n #![allow(unused, needless_pass_by_value)]\n \n #![warn(map_entry)]"}, {"sha": "e60c158d7c068f1e925e7cbc2d30088439a6f6e9", "filename": "tests/ui/entry.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fentry.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fentry.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fentry.stderr?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -42,5 +42,3 @@ error: usage of `contains_key` followed by `insert` on a `BTreeMap`\n 37 |     if !m.contains_key(&k) { foo(); m.insert(k, v) } else { None };\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `m.entry(k)`\n \n-error: aborting due to 7 previous errors\n-"}, {"sha": "76d0d29bb5395b07ef5d2bf21af0901b115e2471", "filename": "tests/ui/enum_glob_use.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fenum_glob_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fenum_glob_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fenum_glob_use.rs?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -1,5 +1,5 @@\n-#![feature(plugin)]\n-#![plugin(clippy)]\n+\n+\n #![warn(clippy, clippy_pedantic)]\n #![allow(unused_imports, dead_code, missing_docs_in_private_items)]\n "}, {"sha": "1e0fffb9ac4422661e41ed7baf2d21afdede6e0b", "filename": "tests/ui/enum_glob_use.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fenum_glob_use.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fenum_glob_use.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fenum_glob_use.stderr?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -12,5 +12,3 @@ error: don't use glob imports for enum variants\n 12 | use self::Enum::*;\n    | ^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to 2 previous errors\n-"}, {"sha": "9901baf9e1285ed4278db88360e4eff37a01343a", "filename": "tests/ui/enum_variants.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fenum_variants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fenum_variants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fenum_variants.rs?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -1,5 +1,5 @@\n #![feature(plugin, non_ascii_idents)]\n-#![plugin(clippy)]\n+\n #![warn(clippy, pub_enum_variant_names)]\n \n enum FakeCallType {"}, {"sha": "7e2716b8ea20535289e464fd964de071c9bdad2e", "filename": "tests/ui/enum_variants.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fenum_variants.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fenum_variants.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fenum_variants.stderr?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -97,5 +97,3 @@ error: All variants have the same prefix: `With`\n    = note: `-D pub-enum-variant-names` implied by `-D warnings`\n    = help: remove the prefixes and use full paths to the variants instead of glob imports\n \n-error: aborting due to 10 previous errors\n-"}, {"sha": "618603683e83f69a4b379c71b12a2f575e6cf6ae", "filename": "tests/ui/enums_clike.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fenums_clike.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fenums_clike.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fenums_clike.rs?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -1,6 +1,6 @@\n // ignore-x86\n-#![feature(plugin)]\n-#![plugin(clippy)]\n+\n+\n #![warn(clippy)]\n \n #![allow(unused)]"}, {"sha": "e0555bb02398914609853d1fb56b91f046a0de75", "filename": "tests/ui/enums_clike.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fenums_clike.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fenums_clike.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fenums_clike.stderr?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -48,5 +48,3 @@ error: Clike enum variant discriminant is not portable to 32-bit targets\n 37 |     A = 0x1_0000_0000,\n    |     ^^^^^^^^^^^^^^^^^\n \n-error: aborting due to 8 previous errors\n-"}, {"sha": "89d85d1b3e9d11a277230799a1d17343cbfc3ef5", "filename": "tests/ui/eq_op.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Feq_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Feq_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Feq_op.rs?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -1,5 +1,5 @@\n-#![feature(plugin)]\n-#![plugin(clippy)]\n+\n+\n \n #[warn(eq_op)]\n #[allow(identity_op, double_parens, many_single_char_names)]"}, {"sha": "914a85719d0f72707b033424bca0ab4c7ab5d38b", "filename": "tests/ui/eq_op.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Feq_op.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Feq_op.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Feq_op.stderr?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -204,5 +204,3 @@ error: taken reference of right operand\n    |\n    = note: `-D op-ref` implied by `-D warnings`\n \n-error: aborting due to 33 previous errors\n-"}, {"sha": "b99534d05e17077249e6a57f035947b875729a8a", "filename": "tests/ui/escape_analysis.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fescape_analysis.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fescape_analysis.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fescape_analysis.rs?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -1,5 +1,5 @@\n #![feature(plugin, box_syntax)]\n-#![plugin(clippy)]\n+\n #![allow(warnings, clippy)]\n \n #![warn(boxed_local)]"}, {"sha": "0ff02a0b2ccc37122cda3ec8ac5c15aff25998af", "filename": "tests/ui/eta.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Feta.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Feta.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Feta.rs?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -1,5 +1,5 @@\n-#![feature(plugin)]\n-#![plugin(clippy)]\n+\n+\n #![allow(unknown_lints, unused, no_effect, redundant_closure_call, many_single_char_names, needless_pass_by_value)]\n #![warn(redundant_closure)]\n "}, {"sha": "34a6217cd709fe75a3c57ba8051c7de9edcdffda", "filename": "tests/ui/eta.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Feta.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Feta.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Feta.stderr?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -32,5 +32,3 @@ error: redundant closure found\n 18 |     let e = Some(1u8).map(|a| generic(a));\n    |                           ^^^^^^^^^^^^^^ help: remove closure as shown: `generic`\n \n-error: aborting due to 5 previous errors\n-"}, {"sha": "e7ccb190d2c712a24610372d09a45f0a61883d89", "filename": "tests/ui/eval_order_dependence.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Feval_order_dependence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Feval_order_dependence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Feval_order_dependence.rs?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -1,5 +1,5 @@\n-#![feature(plugin)]\n-#![plugin(clippy)]\n+\n+\n \n #[warn(eval_order_dependence)]\n #[allow(unused_assignments, unused_variables, many_single_char_names, no_effect, dead_code, blacklisted_name)]"}, {"sha": "e9bdc3b51d9db14f5270d4dd094bc0e92433bf83", "filename": "tests/ui/eval_order_dependence.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Feval_order_dependence.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Feval_order_dependence.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Feval_order_dependence.stderr?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -47,5 +47,3 @@ note: whether read occurs before this write depends on evaluation order\n 21 |         x += { x = 20; 2 };\n    |                ^^^^^^\n \n-error: aborting due to 4 previous errors\n-"}, {"sha": "29230c48ea3ed3876b8589b21f30e1a6760938fd", "filename": "tests/ui/filter_methods.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Ffilter_methods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Ffilter_methods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffilter_methods.rs?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -1,5 +1,5 @@\n-#![feature(plugin)]\n-#![plugin(clippy)]\n+\n+\n \n #![warn(clippy, clippy_pedantic)]\n #![allow(missing_docs_in_private_items)]"}, {"sha": "8f1853c3952b11088527675a24b967f054806a36", "filename": "tests/ui/filter_methods.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Ffilter_methods.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Ffilter_methods.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffilter_methods.stderr?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -36,5 +36,3 @@ error: called `filter_map(p).map(q)` on an `Iterator`. This is more succinctly e\n 25 | |                                 .map(|x| x.checked_mul(2))\n    | |__________________________________________________________^\n \n-error: aborting due to 4 previous errors\n-"}, {"sha": "9dd9ea9b04d557932fa79eab5400f350fc038ac8", "filename": "tests/ui/float_cmp.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Ffloat_cmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Ffloat_cmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffloat_cmp.rs?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -1,5 +1,5 @@\n-#![feature(plugin)]\n-#![plugin(clippy)]\n+\n+\n \n #![warn(float_cmp)]\n #![allow(unused, no_effect, unnecessary_operation, cast_lossless)]"}, {"sha": "d2903f501f5f001b38b16547ae075588939f2c54", "filename": "tests/ui/float_cmp.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Ffloat_cmp.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Ffloat_cmp.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffloat_cmp.stderr?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -95,5 +95,3 @@ note: std::f32::EPSILON and std::f64::EPSILON are available.\n 57 |     twice(x) != twice(ONE as f64);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to 8 previous errors\n-"}, {"sha": "083e6f9a6e5adec18220ad11d55688d6d196121d", "filename": "tests/ui/for_loop.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Ffor_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Ffor_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffor_loop.rs?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -1,5 +1,5 @@\n #![feature(plugin, inclusive_range_syntax)]\n-#![plugin(clippy)]\n+\n \n use std::collections::*;\n use std::rc::Rc;\n@@ -125,15 +125,15 @@ fn main() {\n         println!(\"{}\", vec[i]);\n     }\n \n-    for i in 0...MAX_LEN {\n+    for i in 0..=MAX_LEN {\n         println!(\"{}\", vec[i]);\n     }\n \n     for i in 5..10 {\n         println!(\"{}\", vec[i]);\n     }\n \n-    for i in 5...10 {\n+    for i in 5..=10 {\n         println!(\"{}\", vec[i]);\n     }\n \n@@ -149,7 +149,7 @@ fn main() {\n         println!(\"{}\", i);\n     }\n \n-    for i in 10...0 {\n+    for i in 10..=0 {\n         println!(\"{}\", i);\n     }\n \n@@ -161,7 +161,7 @@ fn main() {\n         println!(\"{}\", i);\n     }\n \n-    for i in 5...5 {\n+    for i in 5..=5 {\n         // not an error, this is the range with only one element \u201c5\u201d\n         println!(\"{}\", i);\n     }"}, {"sha": "620c32b6ab50048d0749cad947ede1c431f35800", "filename": "tests/ui/for_loop.stderr", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Ffor_loop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Ffor_loop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffor_loop.stderr?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -178,7 +178,7 @@ help: consider using an iterator\n error: the loop variable `i` is only used to index `vec`.\n    --> $DIR/for_loop.rs:128:5\n     |\n-128 | /     for i in 0...MAX_LEN {\n+128 | /     for i in 0..=MAX_LEN {\n 129 | |         println!(\"{}\", vec[i]);\n 130 | |     }\n     | |_____^\n@@ -204,7 +204,7 @@ help: consider using an iterator\n error: the loop variable `i` is only used to index `vec`.\n    --> $DIR/for_loop.rs:136:5\n     |\n-136 | /     for i in 5...10 {\n+136 | /     for i in 5..=10 {\n 137 | |         println!(\"{}\", vec[i]);\n 138 | |     }\n     | |_____^\n@@ -257,7 +257,7 @@ help: consider using the following if you are attempting to iterate over this ra\n error: this range is empty so this for loop will never run\n    --> $DIR/for_loop.rs:152:5\n     |\n-152 | /     for i in 10...0 {\n+152 | /     for i in 10..=0 {\n 153 | |         println!(\"{}\", i);\n 154 | |     }\n     | |_____^\n@@ -586,5 +586,3 @@ error: it looks like you're manually copying between slices\n 549 | |     }\n     | |_____^ help: try replacing the loop by: `dst[..src.len()].clone_from_slice(&src[..])`\n \n-error: aborting due to 59 previous errors\n-"}, {"sha": "e9379d0a05bdd4874e6faaadc8d9154e87e55bff", "filename": "tests/ui/format.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fformat.rs?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -1,5 +1,5 @@\n-#![feature(plugin)]\n-#![plugin(clippy)]\n+\n+\n #![warn(useless_format)]\n \n fn main() {"}, {"sha": "67d97f295d8116826ad534d0a6ff53d458e146f4", "filename": "tests/ui/format.stderr", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fformat.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fformat.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fformat.stderr?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -6,5 +6,15 @@ error: useless use of `format!`\n   |\n   = note: `-D useless-format` implied by `-D warnings`\n \n-error: aborting due to previous error\n+error: useless use of `format!`\n+ --> $DIR/format.rs:8:5\n+  |\n+8 |     format!(\"{}\", \"foo\");\n+  |     ^^^^^^^^^^^^^^^^^^^^^\n+\n+error: useless use of `format!`\n+  --> $DIR/format.rs:15:5\n+   |\n+15 |     format!(\"{}\", arg);\n+   |     ^^^^^^^^^^^^^^^^^^^\n "}, {"sha": "20b1c1655a7284a858a1320c212c8e912b1634e8", "filename": "tests/ui/formatting.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fformatting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fformatting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fformatting.rs?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -1,5 +1,5 @@\n-#![feature(plugin)]\n-#![plugin(clippy)]\n+\n+\n \n #![warn(clippy)]\n #![allow(unused_variables)]"}, {"sha": "d121929d0c2dbcbfb77cce41b61eb83076f903b0", "filename": "tests/ui/formatting.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fformatting.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fformatting.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fformatting.stderr?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -86,5 +86,3 @@ error: possibly missing a comma here\n    |\n    = note: to remove this lint, add a comma or write the expr in a single line\n \n-error: aborting due to 10 previous errors\n-"}, {"sha": "5688c471d86b1630343a62d72062f79768f1c67f", "filename": "tests/ui/functions.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Ffunctions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Ffunctions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffunctions.rs?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -1,5 +1,5 @@\n-#![feature(plugin)]\n-#![plugin(clippy)]\n+\n+\n \n #![warn(clippy)]\n #![allow(dead_code)]"}, {"sha": "c8b4db352457f42156a8aa09d4bedfaa4ae18227", "filename": "tests/ui/functions.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Ffunctions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Ffunctions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffunctions.stderr?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -75,5 +75,3 @@ error: this public function dereferences a raw pointer but is not marked `unsafe\n 63 |         unsafe { std::ptr::read(p) };\n    |                                 ^\n \n-error: aborting due to 12 previous errors\n-"}, {"sha": "9c5129654e416f109ce9e33ebc92e604a3413860", "filename": "tests/ui/ices.rs", "status": "removed", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9a0a8a0010e0da18d664e8895a3d73b784f026b8/tests%2Fui%2Fices.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a0a8a0010e0da18d664e8895a3d73b784f026b8/tests%2Fui%2Fices.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fices.rs?ref=9a0a8a0010e0da18d664e8895a3d73b784f026b8", "patch": "@@ -1,5 +0,0 @@\n-\n-// this used to ICE\n-fubar!();\n-\n-fn main() {}"}, {"sha": "cadd7cd417d4cc8187ca1831f32ea2a9ffb0e91a", "filename": "tests/ui/ices.stderr", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9a0a8a0010e0da18d664e8895a3d73b784f026b8/tests%2Fui%2Fices.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9a0a8a0010e0da18d664e8895a3d73b784f026b8/tests%2Fui%2Fices.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fices.stderr?ref=9a0a8a0010e0da18d664e8895a3d73b784f026b8", "patch": "@@ -1,8 +0,0 @@\n-error: cannot find macro `fubar!` in this scope\n- --> $DIR/ices.rs:3:1\n-  |\n-3 | fubar!();\n-  | ^^^^^\n-\n-error: aborting due to previous error\n-"}, {"sha": "d254b746d79fe4e79a1cd2a76890f581e7cad6d1", "filename": "tests/ui/identity_conversion.rs", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fidentity_conversion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fidentity_conversion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fidentity_conversion.rs?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -0,0 +1,40 @@\n+#![deny(identity_conversion)]\n+\n+fn test_generic<T: Copy>(val: T) -> T {\n+    let _ = T::from(val);\n+    val.into()\n+}\n+\n+fn test_generic2<T: Copy + Into<i32> + Into<U>, U: From<T>>(val: T) {\n+    // ok\n+    let _: i32 = val.into();\n+    let _: U = val.into();\n+    let _ = U::from(val);\n+}\n+\n+fn test_questionmark() -> Result<(), ()> {\n+    {\n+        let _: i32 = 0i32.into();\n+        Ok(Ok(()))\n+    }??;\n+    Ok(())\n+}\n+\n+fn main() {\n+    test_generic(10i32);\n+    test_generic2::<i32, i32>(10i32);\n+    test_questionmark().unwrap();\n+\n+    let _: String = \"foo\".into();\n+    let _: String = From::from(\"foo\");\n+    let _ = String::from(\"foo\");\n+    #[allow(identity_conversion)]\n+    {\n+        let _: String = \"foo\".into();\n+        let _ = String::from(\"foo\");\n+    }\n+\n+    let _: String = \"foo\".to_string().into();\n+    let _: String = From::from(\"foo\".to_string());\n+    let _ = String::from(\"foo\".to_string());\n+}"}, {"sha": "152bb8882bdaaa013f353618b6a3df9b060b8118", "filename": "tests/ui/identity_conversion.stderr", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fidentity_conversion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fidentity_conversion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fidentity_conversion.stderr?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -0,0 +1,42 @@\n+error: identical conversion\n+ --> $DIR/identity_conversion.rs:4:13\n+  |\n+4 |     let _ = T::from(val);\n+  |             ^^^^^^^^^^^^ help: consider removing `T::from()`: `val`\n+  |\n+note: lint level defined here\n+ --> $DIR/identity_conversion.rs:1:9\n+  |\n+1 | #![deny(identity_conversion)]\n+  |         ^^^^^^^^^^^^^^^^^^^\n+\n+error: identical conversion\n+ --> $DIR/identity_conversion.rs:5:5\n+  |\n+5 |     val.into()\n+  |     ^^^^^^^^^^ help: consider removing `.into()`: `val`\n+\n+error: identical conversion\n+  --> $DIR/identity_conversion.rs:17:22\n+   |\n+17 |         let _: i32 = 0i32.into();\n+   |                      ^^^^^^^^^^^ help: consider removing `.into()`: `0i32`\n+\n+error: identical conversion\n+  --> $DIR/identity_conversion.rs:37:21\n+   |\n+37 |     let _: String = \"foo\".to_string().into();\n+   |                     ^^^^^^^^^^^^^^^^^^^^^^^^ help: consider removing `.into()`: `\"foo\".to_string()`\n+\n+error: identical conversion\n+  --> $DIR/identity_conversion.rs:38:21\n+   |\n+38 |     let _: String = From::from(\"foo\".to_string());\n+   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider removing `From::from()`: `\"foo\".to_string()`\n+\n+error: identical conversion\n+  --> $DIR/identity_conversion.rs:39:13\n+   |\n+39 |     let _ = String::from(\"foo\".to_string());\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider removing `String::from()`: `\"foo\".to_string()`\n+"}, {"sha": "b474344977c8c1ea0fd6d93aae2c88927b25b489", "filename": "tests/ui/identity_op.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fidentity_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fidentity_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fidentity_op.rs?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -1,5 +1,5 @@\n-#![feature(plugin)]\n-#![plugin(clippy)]\n+\n+\n \n const ONE : i64 = 1;\n const NEG_ONE : i64 = -1;"}, {"sha": "30367c989ec883e0db1695cfdb3cfdc64b056ac9", "filename": "tests/ui/identity_op.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fidentity_op.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fidentity_op.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fidentity_op.stderr?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -42,5 +42,3 @@ error: the operation is ineffective. Consider reducing it to `x`\n 29 |     -1 & x;\n    |     ^^^^^^\n \n-error: aborting due to 7 previous errors\n-"}, {"sha": "0963caa62e284acac72c5cdc69080b04cce6c41c", "filename": "tests/ui/if_let_redundant_pattern_matching.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fif_let_redundant_pattern_matching.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fif_let_redundant_pattern_matching.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fif_let_redundant_pattern_matching.rs?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -1,6 +1,6 @@\n-#![feature(plugin)]\n \n-#![plugin(clippy)]\n+\n+\n #![warn(clippy)]\n #![warn(if_let_redundant_pattern_matching)]\n "}, {"sha": "b15d17e372e0b59fb7b092abbed90344eb0d69d2", "filename": "tests/ui/if_let_redundant_pattern_matching.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fif_let_redundant_pattern_matching.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fif_let_redundant_pattern_matching.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fif_let_redundant_pattern_matching.stderr?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -24,5 +24,3 @@ error: redundant pattern matching, consider using `is_some()`\n 17 |     if let Some(_) = Some(42) {\n    |     -------^^^^^^^----------- help: try this: `if Some(42).is_some()`\n \n-error: aborting due to 4 previous errors\n-"}, {"sha": "9436af70cb8f6524ce1c7a2e13f3f5dc31158a57", "filename": "tests/ui/if_not_else.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fif_not_else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fif_not_else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fif_not_else.rs?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -1,5 +1,5 @@\n-#![feature(plugin)]\n-#![plugin(clippy)]\n+\n+\n #![warn(clippy)]\n #![warn(if_not_else)]\n "}, {"sha": "f9462f422ea797378b347957cad579c2a1c775b8", "filename": "tests/ui/if_not_else.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fif_not_else.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fif_not_else.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fif_not_else.stderr?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -23,5 +23,3 @@ error: Unnecessary `!=` operation\n    |\n    = help: change to `==` and swap the blocks of the if/else\n \n-error: aborting due to 2 previous errors\n-"}, {"sha": "ed6dc06edb17db1eabc7cb1c6329be062c1ff891", "filename": "tests/ui/inconsistent_digit_grouping.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Finconsistent_digit_grouping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Finconsistent_digit_grouping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finconsistent_digit_grouping.rs?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -1,5 +1,5 @@\n-#![feature(plugin)]\n-#![plugin(clippy)]\n+\n+\n #[warn(inconsistent_digit_grouping)]\n #[allow(unused_variables)]\n fn main() {"}, {"sha": "2725d5f4ef7fd9d3ecd60d561879966741fa7bc5", "filename": "tests/ui/inconsistent_digit_grouping.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Finconsistent_digit_grouping.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Finconsistent_digit_grouping.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finconsistent_digit_grouping.stderr?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -39,5 +39,3 @@ error: digits grouped inconsistently by underscores\n   |\n   = help: consider: 1.234_567_8_f32\n \n-error: aborting due to 5 previous errors\n-"}, {"sha": "08596ff20169b1479a86bb45513cc2fd356e2cca", "filename": "tests/ui/infinite_iter.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Finfinite_iter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Finfinite_iter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finfinite_iter.rs?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -1,6 +1,5 @@\n-#![feature(plugin)]\n #![feature(iterator_for_each)]\n-#![plugin(clippy)]\n+\n use std::iter::repeat;\n \n fn square_is_lower_64(x: &u32) -> bool { x * x < 64 }"}, {"sha": "87b7ca4932223f9ceb14757621ab4ebbd60ef216", "filename": "tests/ui/infinite_iter.stderr", "status": "modified", "additions": 32, "deletions": 34, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Finfinite_iter.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Finfinite_iter.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finfinite_iter.stderr?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -1,100 +1,98 @@\n error: you are collect()ing an iterator and throwing away the result. Consider using an explicit for loop to exhaust the iterator\n-  --> $DIR/infinite_iter.rs:11:5\n+  --> $DIR/infinite_iter.rs:10:5\n    |\n-11 |     repeat(0_u8).collect::<Vec<_>>(); // infinite iter\n+10 |     repeat(0_u8).collect::<Vec<_>>(); // infinite iter\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `-D unused-collect` implied by `-D warnings`\n \n error: infinite iteration detected\n-  --> $DIR/infinite_iter.rs:11:5\n+  --> $DIR/infinite_iter.rs:10:5\n    |\n-11 |     repeat(0_u8).collect::<Vec<_>>(); // infinite iter\n+10 |     repeat(0_u8).collect::<Vec<_>>(); // infinite iter\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: lint level defined here\n-  --> $DIR/infinite_iter.rs:9:8\n+  --> $DIR/infinite_iter.rs:8:8\n    |\n-9  | #[deny(infinite_iter)]\n+8  | #[deny(infinite_iter)]\n    |        ^^^^^^^^^^^^^\n \n error: infinite iteration detected\n-  --> $DIR/infinite_iter.rs:12:5\n+  --> $DIR/infinite_iter.rs:11:5\n    |\n-12 |     (0..8_u32).take_while(square_is_lower_64).cycle().count(); // infinite iter\n+11 |     (0..8_u32).take_while(square_is_lower_64).cycle().count(); // infinite iter\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: infinite iteration detected\n-  --> $DIR/infinite_iter.rs:13:5\n+  --> $DIR/infinite_iter.rs:12:5\n    |\n-13 |     (0..8_u64).chain(0..).max(); // infinite iter\n+12 |     (0..8_u64).chain(0..).max(); // infinite iter\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: infinite iteration detected\n-  --> $DIR/infinite_iter.rs:15:5\n+  --> $DIR/infinite_iter.rs:14:5\n    |\n-15 |     (0..8_u32).rev().cycle().map(|x| x + 1_u32).for_each(|x| println!(\"{}\", x)); // infinite iter\n+14 |     (0..8_u32).rev().cycle().map(|x| x + 1_u32).for_each(|x| println!(\"{}\", x)); // infinite iter\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: infinite iteration detected\n-  --> $DIR/infinite_iter.rs:17:5\n+  --> $DIR/infinite_iter.rs:16:5\n    |\n-17 |     (0_usize..).flat_map(|x| 0..x).product::<usize>();  // infinite iter\n+16 |     (0_usize..).flat_map(|x| 0..x).product::<usize>();  // infinite iter\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: infinite iteration detected\n-  --> $DIR/infinite_iter.rs:18:5\n+  --> $DIR/infinite_iter.rs:17:5\n    |\n-18 |     (0_u64..).filter(|x| x % 2 == 0).last(); // infinite iter\n+17 |     (0_u64..).filter(|x| x % 2 == 0).last(); // infinite iter\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: possible infinite iteration detected\n-  --> $DIR/infinite_iter.rs:25:5\n+  --> $DIR/infinite_iter.rs:24:5\n    |\n-25 |     (0..).zip((0..).take_while(square_is_lower_64)).count(); // maybe infinite iter\n+24 |     (0..).zip((0..).take_while(square_is_lower_64)).count(); // maybe infinite iter\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: lint level defined here\n-  --> $DIR/infinite_iter.rs:23:8\n+  --> $DIR/infinite_iter.rs:22:8\n    |\n-23 | #[deny(maybe_infinite_iter)]\n+22 | #[deny(maybe_infinite_iter)]\n    |        ^^^^^^^^^^^^^^^^^^^\n \n error: possible infinite iteration detected\n-  --> $DIR/infinite_iter.rs:26:5\n+  --> $DIR/infinite_iter.rs:25:5\n    |\n-26 |     repeat(42).take_while(|x| *x == 42).chain(0..42).max(); // maybe infinite iter\n+25 |     repeat(42).take_while(|x| *x == 42).chain(0..42).max(); // maybe infinite iter\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: possible infinite iteration detected\n-  --> $DIR/infinite_iter.rs:27:5\n+  --> $DIR/infinite_iter.rs:26:5\n    |\n-27 |     (1..).scan(0, |state, x| { *state += x; Some(*state) }).min(); // maybe infinite iter\n+26 |     (1..).scan(0, |state, x| { *state += x; Some(*state) }).min(); // maybe infinite iter\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: possible infinite iteration detected\n-  --> $DIR/infinite_iter.rs:28:5\n+  --> $DIR/infinite_iter.rs:27:5\n    |\n-28 |     (0..).find(|x| *x == 24); // maybe infinite iter\n+27 |     (0..).find(|x| *x == 24); // maybe infinite iter\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: possible infinite iteration detected\n-  --> $DIR/infinite_iter.rs:29:5\n+  --> $DIR/infinite_iter.rs:28:5\n    |\n-29 |     (0..).position(|x| x == 24); // maybe infinite iter\n+28 |     (0..).position(|x| x == 24); // maybe infinite iter\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: possible infinite iteration detected\n-  --> $DIR/infinite_iter.rs:30:5\n+  --> $DIR/infinite_iter.rs:29:5\n    |\n-30 |     (0..).any(|x| x == 24); // maybe infinite iter\n+29 |     (0..).any(|x| x == 24); // maybe infinite iter\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n error: possible infinite iteration detected\n-  --> $DIR/infinite_iter.rs:31:5\n+  --> $DIR/infinite_iter.rs:30:5\n    |\n-31 |     (0..).all(|x| x == 24); // maybe infinite iter\n+30 |     (0..).all(|x| x == 24); // maybe infinite iter\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to 14 previous errors\n-"}, {"sha": "90375dad555f1a5d5b23cb562ab2ba0901b0922a", "filename": "tests/ui/int_plus_one.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fint_plus_one.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fint_plus_one.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fint_plus_one.rs?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -0,0 +1,18 @@\n+#![feature(plugin)]\n+#![plugin(clippy)]\n+\n+#[allow(no_effect, unnecessary_operation)]\n+#[warn(int_plus_one)]\n+fn main() {\n+    let x = 1i32;\n+    let y = 0i32;\n+    \n+    x >= y + 1;\n+    y + 1 <= x;\n+\n+    x - 1 >= y;\n+    y <= x - 1;\n+\n+    x > y; // should be ok\n+    y < x; // should be ok\n+}"}, {"sha": "92b012bd104fa6ade0ea7308fc260ad6a0f9feaa", "filename": "tests/ui/int_plus_one.stderr", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fint_plus_one.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fint_plus_one.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fint_plus_one.stderr?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -0,0 +1,47 @@\n+warning: running cargo clippy on a crate that also imports the clippy plugin\n+\n+error: Unnecessary `>= y + 1` or `x - 1 >=`\n+  --> $DIR/int_plus_one.rs:10:5\n+   |\n+10 |     x >= y + 1;\n+   |     ^^^^^^^^^^\n+   |\n+   = note: `-D int-plus-one` implied by `-D warnings`\n+help: change `>= y + 1` to `> y` as shown\n+   |\n+10 |     x > y;\n+   |     ^^^^^\n+\n+error: Unnecessary `>= y + 1` or `x - 1 >=`\n+  --> $DIR/int_plus_one.rs:11:5\n+   |\n+11 |     y + 1 <= x;\n+   |     ^^^^^^^^^^\n+   |\n+help: change `>= y + 1` to `> y` as shown\n+   |\n+11 |     y < x;\n+   |     ^^^^^\n+\n+error: Unnecessary `>= y + 1` or `x - 1 >=`\n+  --> $DIR/int_plus_one.rs:13:5\n+   |\n+13 |     x - 1 >= y;\n+   |     ^^^^^^^^^^\n+   |\n+help: change `>= y + 1` to `> y` as shown\n+   |\n+13 |     x > y;\n+   |     ^^^^^\n+\n+error: Unnecessary `>= y + 1` or `x - 1 >=`\n+  --> $DIR/int_plus_one.rs:14:5\n+   |\n+14 |     y <= x - 1;\n+   |     ^^^^^^^^^^\n+   |\n+help: change `>= y + 1` to `> y` as shown\n+   |\n+14 |     y < x;\n+   |     ^^^^^\n+"}, {"sha": "2b8f04c9781ce26505cb4b3ee9bc3666d25ae30b", "filename": "tests/ui/invalid_ref.rs", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Finvalid_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Finvalid_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finvalid_ref.rs?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -0,0 +1,66 @@\n+#![feature(plugin)]\n+#![plugin(clippy)]\n+\n+#![allow(unused)]\n+#![feature(core_intrinsics)]\n+\n+extern crate core;\n+use std::intrinsics::{init, uninit};\n+\n+fn main() {\n+    let x = 1; \n+    unsafe { \n+        ref_to_zeroed_std(&x);\n+        ref_to_zeroed_core(&x);\n+        ref_to_zeroed_intr(&x);\n+        ref_to_uninit_std(&x);\n+        ref_to_uninit_core(&x);\n+        ref_to_uninit_intr(&x);\n+        some_ref();\n+        std_zeroed_no_ref();\n+        core_zeroed_no_ref();\n+        intr_init_no_ref();\n+    }\n+}\n+\n+unsafe fn ref_to_zeroed_std<T: ?Sized>(t: &T) {\n+    let ref_zero: &T = std::mem::zeroed();     // warning\n+}\n+\n+unsafe fn ref_to_zeroed_core<T: ?Sized>(t: &T) {\n+    let ref_zero: &T = core::mem::zeroed();   // warning\n+}\n+\n+unsafe fn ref_to_zeroed_intr<T: ?Sized>(t: &T) {\n+    let ref_zero: &T = std::intrinsics::init();   // warning\n+}\n+\n+unsafe fn ref_to_uninit_std<T: ?Sized>(t: &T) {\n+    let ref_uninit: &T = std::mem::uninitialized();   // warning\n+}\n+\n+unsafe fn ref_to_uninit_core<T: ?Sized>(t: &T) {\n+    let ref_uninit: &T = core::mem::uninitialized();   // warning\n+}\n+\n+unsafe fn ref_to_uninit_intr<T: ?Sized>(t: &T) {\n+    let ref_uninit: &T = std::intrinsics::uninit();   // warning\n+}\n+\n+fn some_ref() {\n+    let some_ref = &1; \n+}\n+\n+unsafe fn std_zeroed_no_ref() {\n+    let mem_zero: usize = std::mem::zeroed();  // no warning\n+}\n+\n+unsafe fn core_zeroed_no_ref() {\n+    let mem_zero: usize = core::mem::zeroed();  // no warning\n+}\n+\n+unsafe fn intr_init_no_ref() {\n+    let mem_zero: usize = std::intrinsics::init(); // no warning\n+}\n+\n+"}, {"sha": "18064c91a017955292def3a804eb70d91b56f1b3", "filename": "tests/ui/invalid_ref.stderr", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Finvalid_ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Finvalid_ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finvalid_ref.stderr?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -0,0 +1,51 @@\n+warning: running cargo clippy on a crate that also imports the clippy plugin\n+\n+error: reference to zeroed memory\n+  --> $DIR/invalid_ref.rs:27:24\n+   |\n+27 |     let ref_zero: &T = std::mem::zeroed();     // warning\n+   |                        ^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `-D invalid-ref` implied by `-D warnings`\n+   = help: Creation of a null reference is undefined behavior; see https://doc.rust-lang.org/reference/behavior-considered-undefined.html\n+\n+error: reference to zeroed memory\n+  --> $DIR/invalid_ref.rs:31:24\n+   |\n+31 |     let ref_zero: &T = core::mem::zeroed();   // warning\n+   |                        ^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: Creation of a null reference is undefined behavior; see https://doc.rust-lang.org/reference/behavior-considered-undefined.html\n+\n+error: reference to zeroed memory\n+  --> $DIR/invalid_ref.rs:35:24\n+   |\n+35 |     let ref_zero: &T = std::intrinsics::init();   // warning\n+   |                        ^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: Creation of a null reference is undefined behavior; see https://doc.rust-lang.org/reference/behavior-considered-undefined.html\n+\n+error: reference to uninitialized memory\n+  --> $DIR/invalid_ref.rs:39:26\n+   |\n+39 |     let ref_uninit: &T = std::mem::uninitialized();   // warning\n+   |                          ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: Creation of a null reference is undefined behavior; see https://doc.rust-lang.org/reference/behavior-considered-undefined.html\n+\n+error: reference to uninitialized memory\n+  --> $DIR/invalid_ref.rs:43:26\n+   |\n+43 |     let ref_uninit: &T = core::mem::uninitialized();   // warning\n+   |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: Creation of a null reference is undefined behavior; see https://doc.rust-lang.org/reference/behavior-considered-undefined.html\n+\n+error: reference to uninitialized memory\n+  --> $DIR/invalid_ref.rs:47:26\n+   |\n+47 |     let ref_uninit: &T = std::intrinsics::uninit();   // warning\n+   |                          ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: Creation of a null reference is undefined behavior; see https://doc.rust-lang.org/reference/behavior-considered-undefined.html\n+"}, {"sha": "5bf0bfdcb98340804960585333f39b6e0904c54e", "filename": "tests/ui/invalid_upcast_comparisons.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Finvalid_upcast_comparisons.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Finvalid_upcast_comparisons.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finvalid_upcast_comparisons.rs?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -1,5 +1,5 @@\n-#![feature(plugin)]\n-#![plugin(clippy)]\n+\n+\n \n #![warn(invalid_upcast_comparisons)]\n #![allow(unused, eq_op, no_effect, unnecessary_operation, cast_lossless)]"}, {"sha": "3f11c37307455fc3ec163da622be3e44105f175f", "filename": "tests/ui/invalid_upcast_comparisons.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Finvalid_upcast_comparisons.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Finvalid_upcast_comparisons.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finvalid_upcast_comparisons.stderr?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -162,5 +162,3 @@ error: because of the numeric bounds on `u8` prior to casting, this expression i\n 78 |     -5 >= (u8 as i32);\n    |     ^^^^^^^^^^^^^^^^^\n \n-error: aborting due to 27 previous errors\n-"}, {"sha": "24a2587dc534441d19e4ea5b617fbcb4f985ed78", "filename": "tests/ui/is_unit_expr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fis_unit_expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fis_unit_expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fis_unit_expr.rs?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -1,5 +1,5 @@\n-#![feature(plugin)]\n-#![plugin(clippy)]\n+\n+\n #![warn(unit_expr)]\n #[allow(unused_variables)]\n "}, {"sha": "5524f866488c281f50d4e2500004579ed12f3475", "filename": "tests/ui/is_unit_expr.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fis_unit_expr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fis_unit_expr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fis_unit_expr.stderr?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -51,5 +51,3 @@ note: Consider removing the trailing semicolon\n 42 |             x;\n    |             ^^\n \n-error: aborting due to 3 previous errors\n-"}, {"sha": "710a1adca565577f9ba464ed6d8b5526bb1a762f", "filename": "tests/ui/item_after_statement.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fitem_after_statement.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fitem_after_statement.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fitem_after_statement.rs?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -1,5 +1,5 @@\n-#![feature(plugin)]\n-#![plugin(clippy)]\n+\n+\n #![warn(items_after_statements)]\n \n fn ok() {"}, {"sha": "e98e7ee129d8dd5bae43d7a2b0f66901622ff6ba", "filename": "tests/ui/item_after_statement.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fitem_after_statement.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fitem_after_statement.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fitem_after_statement.stderr?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -12,5 +12,3 @@ error: adding items after statements is confusing, since items exist from the st\n 17 |     fn foo() { println!(\"foo\"); }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to 2 previous errors\n-"}, {"sha": "5d0fb11dbea56167fdca0736a4b28b99baf37138", "filename": "tests/ui/large_digit_groups.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Flarge_digit_groups.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Flarge_digit_groups.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flarge_digit_groups.rs?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -1,5 +1,5 @@\n-#![feature(plugin)]\n-#![plugin(clippy)]\n+\n+\n #[warn(large_digit_groups)]\n #[allow(unused_variables)]\n fn main() {"}, {"sha": "db49ded1d8a07c5127b114139a891aec3b0664b0", "filename": "tests/ui/large_digit_groups.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Flarge_digit_groups.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Flarge_digit_groups.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flarge_digit_groups.stderr?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -47,5 +47,3 @@ error: digit groups should be smaller\n   |\n   = help: consider: 123_456.123_456_f32\n \n-error: aborting due to 6 previous errors\n-"}, {"sha": "aaf3e2924b310b71feef6c21afc1fd3ef4a70205", "filename": "tests/ui/large_enum_variant.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Flarge_enum_variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Flarge_enum_variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flarge_enum_variant.rs?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -1,5 +1,5 @@\n-#![feature(plugin)]\n-#![plugin(clippy)]\n+\n+\n \n #![allow(dead_code)]\n #![allow(unused_variables)]"}, {"sha": "899a84edeaad0066193a36bf15220a033810754a", "filename": "tests/ui/large_enum_variant.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Flarge_enum_variant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Flarge_enum_variant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flarge_enum_variant.stderr?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -68,5 +68,3 @@ help: consider boxing the large fields to reduce the total size of the enum\n 49 |     StructLikeLarge2 { x: Box<[i32; 8000]> },\n    |                           ^^^^^^^^^^^^^^^^\n \n-error: aborting due to 6 previous errors\n-"}, {"sha": "aba1dd3055af659b0d1633d9ef7c301ef1b61bc9", "filename": "tests/ui/len_zero.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Flen_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Flen_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flen_zero.rs?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -1,5 +1,5 @@\n-#![feature(plugin)]\n-#![plugin(clippy)]\n+\n+\n \n #![warn(len_without_is_empty, len_zero)]\n #![allow(dead_code, unused)]"}, {"sha": "d23a972dddcb86f5bf1643376198f6d0ecd3b14b", "filename": "tests/ui/len_zero.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Flen_zero.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Flen_zero.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flen_zero.stderr?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -94,5 +94,3 @@ error: trait `DependsOnFoo` has a `len` method but no (possibly inherited) `is_e\n 191 | | }\n     | |_^\n \n-error: aborting due to 12 previous errors\n-"}, {"sha": "564a67d2c8ef0bec81b7d9e53e8124cbd5b17607", "filename": "tests/ui/let_if_seq.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Flet_if_seq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Flet_if_seq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flet_if_seq.rs?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -1,5 +1,5 @@\n-#![feature(plugin)]\n-#![plugin(clippy)]\n+\n+\n \n #![allow(unused_variables, unused_assignments, similar_names, blacklisted_name)]\n #![warn(useless_let_if_seq)]"}, {"sha": "39686a9dd07ff03526652091b3434818b61c46d9", "filename": "tests/ui/let_if_seq.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Flet_if_seq.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Flet_if_seq.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flet_if_seq.stderr?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -46,5 +46,3 @@ error: `if _ { .. } else { .. }` is an expression\n     |\n     = note: you might not need `mut` at all\n \n-error: aborting due to 4 previous errors\n-"}, {"sha": "1083603b2d63b65acb839b533271bf8cf23f49e6", "filename": "tests/ui/let_return.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Flet_return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Flet_return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flet_return.rs?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -1,5 +1,5 @@\n-#![feature(plugin)]\n-#![plugin(clippy)]\n+\n+\n #![allow(unused)]\n \n #![warn(let_and_return)]"}, {"sha": "b38c9ab2e91367b20fd4a0e4caa8aee5f548722e", "filename": "tests/ui/let_return.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Flet_return.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Flet_return.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flet_return.stderr?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -23,5 +23,3 @@ note: this expression can be directly returned\n 15 |         let x = 5;\n    |                 ^\n \n-error: aborting due to 2 previous errors\n-"}, {"sha": "032dc85f2cd580fc8f4d7811dc77f18b8d8d77d2", "filename": "tests/ui/let_unit.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Flet_unit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Flet_unit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flet_unit.rs?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -1,5 +1,5 @@\n-#![feature(plugin)]\n-#![plugin(clippy)]\n+\n+\n \n #![warn(let_unit_value)]\n #![allow(unused_variables)]"}, {"sha": "196afc0570cdb62b0fa27b657adbeb2a8883b0b2", "filename": "tests/ui/let_unit.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Flet_unit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Flet_unit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flet_unit.stderr?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -12,5 +12,3 @@ error: this let-binding has unit value. Consider omitting `let _a =`\n 18 |         let _a = ();\n    |         ^^^^^^^^^^^^\n \n-error: aborting due to 2 previous errors\n-"}, {"sha": "dce9c23da686f14701ba06527613169464d0e82c", "filename": "tests/ui/lifetimes.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flifetimes.rs?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -1,5 +1,5 @@\n-#![feature(plugin)]\n-#![plugin(clippy)]\n+\n+\n \n #![warn(needless_lifetimes, unused_lifetimes)]\n #![allow(dead_code, needless_pass_by_value)]"}, {"sha": "744e1ce21ec34951ed2851635bef635c14e66442", "filename": "tests/ui/lifetimes.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Flifetimes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Flifetimes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flifetimes.stderr?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -86,5 +86,3 @@ error: explicit lifetimes given in parameter types where they could be elided\n 120 | fn trait_bound_ok<'a, T: WithLifetime<'static>>(_: &'a u8, _: T) { unimplemented!() }\n     | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to 14 previous errors\n-"}, {"sha": "1990e137e67842685a5b1d37232df6e47ef6958e", "filename": "tests/ui/lint_pass.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Flint_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Flint_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint_pass.rs?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -1,6 +1,6 @@\n-#![feature(plugin)]\n+\n #![feature(rustc_private)]\n-#![plugin(clippy)]\n+\n \n #![warn(lint_without_lint_pass)]\n "}, {"sha": "66f2d62ed24a29c9ae209ea88b4abf76d7ff80d4", "filename": "tests/ui/lint_pass.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Flint_pass.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Flint_pass.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint_pass.stderr?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -6,5 +6,3 @@ error: the lint `MISSING_LINT` is not added to any `LintPass`\n    |\n    = note: `-D lint-without-lint-pass` implied by `-D warnings`\n \n-error: aborting due to previous error\n-"}, {"sha": "c11adc0b09042c850343042e7063d8f40681e72b", "filename": "tests/ui/literals.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fliterals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fliterals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fliterals.rs?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -1,5 +1,5 @@\n-#![feature(plugin)]\n-#![plugin(clippy)]\n+\n+\n #![warn(mixed_case_hex_literals)]\n #![warn(unseparated_literal_suffix)]\n #![warn(zero_prefixed_literal)]"}, {"sha": "82c651e629027c5ec4a50e3a4134b2bb6e45e810", "filename": "tests/ui/literals.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fliterals.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fliterals.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fliterals.stderr?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -87,5 +87,3 @@ help: if you mean to use an octal constant, use `0o`\n 30 |     let fail8 = 0o123;\n    |                 ^^^^^\n \n-error: aborting due to 11 previous errors\n-"}, {"sha": "f11d21d2dfafdada06da7379306e610fe46cad0b", "filename": "tests/ui/map_clone.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fmap_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fmap_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmap_clone.rs?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -1,6 +1,6 @@\n-#![feature(plugin)]\n \n-#![plugin(clippy)]\n+\n+\n #![warn(map_clone)]\n \n #![allow(clone_on_copy, unused)]"}, {"sha": "272b868a278a9ed2daaa4794cc4cfe82401fb429", "filename": "tests/ui/map_clone.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fmap_clone.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fmap_clone.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmap_clone.stderr?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -98,5 +98,3 @@ error: you seem to be using .map() to clone the contents of an Option, consider\n    = help: try\n            x.as_ref().cloned()\n \n-error: aborting due to 11 previous errors\n-"}, {"sha": "f97038ca1f04f9c4fc8a69da05b5377f1b5071d5", "filename": "tests/ui/matches.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatches.rs?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -1,7 +1,7 @@\n-#![feature(plugin)]\n+\n #![feature(exclusive_range_pattern)]\n \n-#![plugin(clippy)]\n+\n #![warn(clippy)]\n #![allow(unused, if_let_redundant_pattern_matching)]\n #![warn(single_match_else)]"}, {"sha": "1c2452c46ce64b0648f09b74f2d56063dc721b46", "filename": "tests/ui/matches.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fmatches.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fmatches.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatches.stderr?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -392,5 +392,3 @@ note: consider refactoring into `Ok(3) | Ok(_)`\n     |                  ^^^^^^^^^^^^^^\n     = note: this error originates in a macro outside of the current crate\n \n-error: aborting due to 33 previous errors\n-"}, {"sha": "991a402e2076c67fc536f76a65b5b4e5c2f846e7", "filename": "tests/ui/mem_forget.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fmem_forget.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fmem_forget.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmem_forget.rs?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -1,5 +1,5 @@\n-#![feature(plugin)]\n-#![plugin(clippy)]\n+\n+\n \n \n use std::sync::Arc;"}, {"sha": "c79afa829fe50b0a1999b3bc02fadd95158f88de", "filename": "tests/ui/mem_forget.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fmem_forget.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fmem_forget.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmem_forget.stderr?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -18,5 +18,3 @@ error: usage of mem::forget on Drop type\n 24 |     forgetSomething(eight);\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to 3 previous errors\n-"}, {"sha": "08ff477142051b1b28689ef43b47f5c4f530f92c", "filename": "tests/ui/methods.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmethods.rs?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -1,6 +1,6 @@\n-#![feature(plugin)]\n+\n #![feature(const_fn)]\n-#![plugin(clippy)]\n+\n \n #![warn(clippy, clippy_pedantic)]\n #![allow(blacklisted_name, unused, print_stdout, non_ascii_literal, new_without_default, new_without_default_derive, missing_docs_in_private_items)]"}, {"sha": "c5fab711fe1f9b980d5298689f9e0cce2c9e1cef", "filename": "tests/ui/methods.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fmethods.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fmethods.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmethods.stderr?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -836,5 +836,3 @@ error: you should use the `ends_with` method\n 578 |     Some(' ') != \"\".chars().next_back();\n     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: like this: `!\"\".ends_with(' ')`\n \n-error: aborting due to 123 previous errors\n-"}, {"sha": "1199206e42c35fb6001dfe0be9e629436677761b", "filename": "tests/ui/min_max.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fmin_max.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fmin_max.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmin_max.rs?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -1,6 +1,6 @@\n-#![feature(plugin)]\n \n-#![plugin(clippy)]\n+\n+\n #![warn(clippy)]\n \n use std::cmp::{min, max};"}, {"sha": "e9225f93b5e56994be0b181944afa7ed55e5cc4f", "filename": "tests/ui/min_max.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fmin_max.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fmin_max.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmin_max.stderr?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -42,5 +42,3 @@ error: this min/max combination leads to constant result\n 30 |     max(min(s, \"Apple\"), \"Zoo\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to 7 previous errors\n-"}, {"sha": "cbd6439d47e8a5e41048f3a89e8a8324bd9148cb", "filename": "tests/ui/missing-doc.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fmissing-doc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fmissing-doc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmissing-doc.rs?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -11,8 +11,8 @@\n  *   except according to those terms.\n  */\n \n-#![feature(plugin)]\n-#![plugin(clippy)]\n+\n+\n #![warn(missing_docs_in_private_items)]\n \n // When denying at the crate level, be sure to not get random warnings from the"}, {"sha": "55eab4f5d692e0b90c74f826b890a86abf508a67", "filename": "tests/ui/missing-doc.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fmissing-doc.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fmissing-doc.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmissing-doc.stderr?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -270,5 +270,3 @@ error: missing documentation for a function\n 202 | fn main() {}\n     | ^^^^^^^^^^^^\n \n-error: aborting due to 40 previous errors\n-"}, {"sha": "77bd446c569c45d80621e5e601e4462e68448c9b", "filename": "tests/ui/module_inception.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fmodule_inception.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fmodule_inception.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmodule_inception.rs?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -1,5 +1,5 @@\n-#![feature(plugin)]\n-#![plugin(clippy)]\n+\n+\n #![warn(module_inception)]\n \n mod foo {"}, {"sha": "cb6ea951a17112848a58cfc44640e3309a79597d", "filename": "tests/ui/module_inception.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fmodule_inception.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fmodule_inception.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmodule_inception.stderr?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -16,5 +16,3 @@ error: module has the same name as its containing module\n 14 | |     }\n    | |_____^\n \n-error: aborting due to 2 previous errors\n-"}, {"sha": "847ea1d9ab64fa571656e2c89c69b012b4d18485", "filename": "tests/ui/modulo_one.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fmodulo_one.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fmodulo_one.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmodulo_one.rs?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -1,5 +1,5 @@\n-#![feature(plugin)]\n-#![plugin(clippy)]\n+\n+\n #![warn(modulo_one)]\n #![allow(no_effect, unnecessary_operation)]\n "}, {"sha": "48cfe6c38cc21f2b8cff0928759f281642ad20d4", "filename": "tests/ui/modulo_one.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fmodulo_one.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fmodulo_one.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmodulo_one.stderr?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -6,5 +6,3 @@ error: any number modulo 1 will be 0\n   |\n   = note: `-D modulo-one` implied by `-D warnings`\n \n-error: aborting due to previous error\n-"}, {"sha": "9e757155260caee185ce3b56dbd5bae108fa0067", "filename": "tests/ui/mut_from_ref.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fmut_from_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fmut_from_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmut_from_ref.rs?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -1,5 +1,5 @@\n-#![feature(plugin)]\n-#![plugin(clippy)]\n+\n+\n #![allow(unused)]\n #![warn(mut_from_ref)]\n "}, {"sha": "eacda70ce074fd5731d2fae03d68043edc10b84b", "filename": "tests/ui/mut_from_ref.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fmut_from_ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fmut_from_ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmut_from_ref.stderr?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -59,5 +59,3 @@ note: immutable borrow here\n 32 | fn fail_double<'a, 'b>(x: &'a u32, y: &'a u32, z: &'b mut u32) -> &'a mut u32 {\n    |                           ^^^^^^^     ^^^^^^^\n \n-error: aborting due to 5 previous errors\n-"}, {"sha": "54176cd6d55333559b67ad454f753e6e5385f6f7", "filename": "tests/ui/mut_mut.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fmut_mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fmut_mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmut_mut.rs?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -1,5 +1,5 @@\n-#![feature(plugin)]\n-#![plugin(clippy)]\n+\n+\n \n #![allow(unused, no_effect, unnecessary_operation)]\n #![warn(mut_mut)]"}, {"sha": "31f9178aa2726210f8a19c02ea0d86aba4023a85", "filename": "tests/ui/mut_mut.stderr", "status": "modified", "additions": 10, "deletions": 12, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fmut_mut.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fmut_mut.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmut_mut.stderr?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -28,16 +28,16 @@ error: this expression mutably borrows a mutable reference. Consider reborrowing\n    |                     ^^^^^^\n \n error: generally you want to avoid `&mut &mut _` if possible\n-  --> $DIR/mut_mut.rs:30:17\n+  --> $DIR/mut_mut.rs:30:33\n    |\n 30 |         let y : &mut &mut u32 = &mut &mut 2;\n-   |                 ^^^^^^^^^^^^^\n+   |                                 ^^^^^^^^^^^\n \n error: generally you want to avoid `&mut &mut _` if possible\n-  --> $DIR/mut_mut.rs:30:33\n+  --> $DIR/mut_mut.rs:30:17\n    |\n 30 |         let y : &mut &mut u32 = &mut &mut 2;\n-   |                                 ^^^^^^^^^^^\n+   |                 ^^^^^^^^^^^^^\n \n error: generally you want to avoid `&mut &mut _` if possible\n   --> $DIR/mut_mut.rs:30:17\n@@ -46,22 +46,22 @@ error: generally you want to avoid `&mut &mut _` if possible\n    |                 ^^^^^^^^^^^^^\n \n error: generally you want to avoid `&mut &mut _` if possible\n-  --> $DIR/mut_mut.rs:35:17\n+  --> $DIR/mut_mut.rs:35:38\n    |\n 35 |         let y : &mut &mut &mut u32 = &mut &mut &mut 2;\n-   |                 ^^^^^^^^^^^^^^^^^^\n+   |                                      ^^^^^^^^^^^^^^^^\n \n error: generally you want to avoid `&mut &mut _` if possible\n-  --> $DIR/mut_mut.rs:35:22\n+  --> $DIR/mut_mut.rs:35:17\n    |\n 35 |         let y : &mut &mut &mut u32 = &mut &mut &mut 2;\n-   |                      ^^^^^^^^^^^^^\n+   |                 ^^^^^^^^^^^^^^^^^^\n \n error: generally you want to avoid `&mut &mut _` if possible\n-  --> $DIR/mut_mut.rs:35:38\n+  --> $DIR/mut_mut.rs:35:22\n    |\n 35 |         let y : &mut &mut &mut u32 = &mut &mut &mut 2;\n-   |                                      ^^^^^^^^^^^^^^^^\n+   |                      ^^^^^^^^^^^^^\n \n error: generally you want to avoid `&mut &mut _` if possible\n   --> $DIR/mut_mut.rs:35:17\n@@ -81,5 +81,3 @@ error: generally you want to avoid `&mut &mut _` if possible\n 35 |         let y : &mut &mut &mut u32 = &mut &mut &mut 2;\n    |                      ^^^^^^^^^^^^^\n \n-error: aborting due to 13 previous errors\n-"}, {"sha": "835ceeedc94d1056a5c0ee0f8523dcf87be69c36", "filename": "tests/ui/mut_range_bound.rs", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fmut_range_bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fmut_range_bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmut_range_bound.rs?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -0,0 +1,56 @@\n+#![feature(plugin)]\n+#![plugin(clippy)]\n+\n+#![allow(unused)]\n+\n+fn main() {\n+    mut_range_bound_upper();\n+    mut_range_bound_lower();\n+    mut_range_bound_both();\n+    mut_range_bound_no_mutation();\n+    immut_range_bound();\n+    mut_borrow_range_bound();\n+    immut_borrow_range_bound();\n+}\n+\n+fn mut_range_bound_upper() {\n+    let mut m = 4;\n+    for i in 0..m { m = 5; } // warning\n+}\n+\n+fn mut_range_bound_lower() {\n+    let mut m = 4;\n+    for i in m..10 { m *= 2; } // warning\n+}\n+\n+fn mut_range_bound_both() {\n+    let mut m = 4;\n+    let mut n = 6;\n+    for i in m..n { m = 5; n = 7; } // warning (1 for each mutated bound)\n+}\n+\n+fn mut_range_bound_no_mutation() {\n+    let mut m = 4;\n+    for i in 0..m { continue; } // no warning\n+}\n+\n+fn mut_borrow_range_bound() {\n+    let mut m = 4;\n+    for i in 0..m {\n+        let n = &mut m;  // warning\n+        *n += 1;\n+    }\n+}\n+\n+fn immut_borrow_range_bound() {\n+    let mut m = 4;\n+    for i in 0..m {\n+        let n = &m;   // should be no warning?\n+    }\n+}\n+\n+\n+fn immut_range_bound() {\n+    let m = 4;\n+    for i in 0..m { continue; } // no warning\n+}"}, {"sha": "f516ec9d95e315e0ffd08ede57b44da9c0c5e9f7", "filename": "tests/ui/mut_range_bound.stderr", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fmut_range_bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fmut_range_bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmut_range_bound.stderr?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -0,0 +1,34 @@\n+warning: running cargo clippy on a crate that also imports the clippy plugin\n+\n+error: attempt to mutate range bound within loop; note that the range of the loop is unchanged\n+  --> $DIR/mut_range_bound.rs:18:21\n+   |\n+18 |     for i in 0..m { m = 5; } // warning\n+   |                     ^^^^^\n+   |\n+   = note: `-D mut-range-bound` implied by `-D warnings`\n+\n+error: attempt to mutate range bound within loop; note that the range of the loop is unchanged\n+  --> $DIR/mut_range_bound.rs:23:22\n+   |\n+23 |     for i in m..10 { m *= 2; } // warning\n+   |                      ^^^^^^\n+\n+error: attempt to mutate range bound within loop; note that the range of the loop is unchanged\n+  --> $DIR/mut_range_bound.rs:29:21\n+   |\n+29 |     for i in m..n { m = 5; n = 7; } // warning (1 for each mutated bound)\n+   |                     ^^^^^\n+\n+error: attempt to mutate range bound within loop; note that the range of the loop is unchanged\n+  --> $DIR/mut_range_bound.rs:29:28\n+   |\n+29 |     for i in m..n { m = 5; n = 7; } // warning (1 for each mutated bound)\n+   |                            ^^^^^\n+\n+error: attempt to mutate range bound within loop; note that the range of the loop is unchanged\n+  --> $DIR/mut_range_bound.rs:40:22\n+   |\n+40 |         let n = &mut m;  // warning\n+   |                      ^\n+"}, {"sha": "ac40bf2a1867711cfa642021694f66f3a79cb483", "filename": "tests/ui/mut_reference.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fmut_reference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fmut_reference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmut_reference.rs?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -1,5 +1,5 @@\n-#![feature(plugin)]\n-#![plugin(clippy)]\n+\n+\n \n #![allow(unused_variables)]\n "}, {"sha": "6708bca8b2eeab36bba51d0ff762ac3e7f62825b", "filename": "tests/ui/mut_reference.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fmut_reference.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fmut_reference.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmut_reference.stderr?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -18,5 +18,3 @@ error: The function/method `takes_an_immutable_reference` doesn't need a mutable\n 28 |     my_struct.takes_an_immutable_reference(&mut 42);\n    |                                            ^^^^^^^\n \n-error: aborting due to 3 previous errors\n-"}, {"sha": "96502738456ccdfa98a2226af9fb445802949bc7", "filename": "tests/ui/mutex_atomic.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fmutex_atomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fmutex_atomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmutex_atomic.rs?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -1,6 +1,6 @@\n-#![feature(plugin)]\n \n-#![plugin(clippy)]\n+\n+\n #![warn(clippy)]\n #![warn(mutex_integer)]\n "}, {"sha": "d46c713164aef8f588407f8e70fd46292a9257f1", "filename": "tests/ui/mutex_atomic.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fmutex_atomic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fmutex_atomic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmutex_atomic.stderr?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -44,5 +44,3 @@ error: Consider using an AtomicIsize instead of a Mutex here. If you just want t\n 16 |     Mutex::new(0i32);\n    |     ^^^^^^^^^^^^^^^^\n \n-error: aborting due to 7 previous errors\n-"}, {"sha": "1213539c827626753bf2cd6730298e3259c1b7f0", "filename": "tests/ui/needless_bool.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fneedless_bool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fneedless_bool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_bool.rs?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -1,5 +1,5 @@\n-#![feature(plugin)]\n-#![plugin(clippy)]\n+\n+\n #![warn(needless_bool)]\n \n #[allow(if_same_then_else)]"}, {"sha": "a25b34bfaafacf319b4e16bed8ed2d1805b224b7", "filename": "tests/ui/needless_bool.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fneedless_bool.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fneedless_bool.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_bool.stderr?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -66,5 +66,3 @@ error: this if-then-else expression returns a bool literal\n 50 |     if x && y { return false } else { return true };\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: you can reduce it to: `return !(x && y)`\n \n-error: aborting due to 11 previous errors\n-"}, {"sha": "78c1a125c94f13d3298f43d4e80f9adc06031231", "filename": "tests/ui/needless_borrow.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fneedless_borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fneedless_borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_borrow.rs?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -1,5 +1,5 @@\n-#![feature(plugin)]\n-#![plugin(clippy)]\n+\n+\n \n fn x(y: &i32) -> i32 {\n     *y"}, {"sha": "16962bb48f1ce4a1836e45d418c91e7214a8c181", "filename": "tests/ui/needless_borrow.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fneedless_borrow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fneedless_borrow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_borrow.stderr?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -38,5 +38,3 @@ error: this pattern creates a reference to a reference\n 50 |     let _ = v.iter().filter(|&ref a| a.is_empty());\n    |                               ^^^^^ help: change this to: `a`\n \n-error: aborting due to 6 previous errors\n-"}, {"sha": "75ffa211180d5f790db27115cee93a4c1931dbb5", "filename": "tests/ui/needless_borrowed_ref.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fneedless_borrowed_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fneedless_borrowed_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_borrowed_ref.rs?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -1,5 +1,5 @@\n-#![feature(plugin)]\n-#![plugin(clippy)]\n+\n+\n \n #[warn(needless_borrowed_reference)]\n #[allow(unused_variables)]"}, {"sha": "c85bf9f5a7c70d1ef2d248ef11168c05db871102", "filename": "tests/ui/needless_borrowed_ref.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fneedless_borrowed_ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fneedless_borrowed_ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_borrowed_ref.stderr?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -24,5 +24,3 @@ error: this pattern takes a reference on something that is being de-referenced\n 42 |         (&Animal::Cat(v), &ref k) | (&ref k, &Animal::Cat(v)) => (), // lifetime mismatch error if there is no '&ref'\n    |                                      ^^^^^^ help: try removing the `&ref` part and just keep: `k`\n \n-error: aborting due to 4 previous errors\n-"}, {"sha": "3574b0fb3fdf7515889f445eea256aaf656fba25", "filename": "tests/ui/needless_continue.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fneedless_continue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fneedless_continue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_continue.rs?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -1,5 +1,5 @@\n-#![feature(plugin)]\n-#![plugin(clippy)]\n+\n+\n \n macro_rules! zero {\n     ($x:expr) => ($x == 0);"}, {"sha": "f63f120fcc7e1873062558e34af1d1c19d486c45", "filename": "tests/ui/needless_continue.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fneedless_continue.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fneedless_continue.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_continue.stderr?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -55,5 +55,3 @@ error: There is no need for an explicit `else` block for this `if` expression\n            println!(\"Jabber\");\n            ...\n \n-error: aborting due to 2 previous errors\n-"}, {"sha": "6218bfb09206ede10430977af52904e57b6a91be", "filename": "tests/ui/needless_pass_by_value.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fneedless_pass_by_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fneedless_pass_by_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_pass_by_value.rs?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -1,5 +1,5 @@\n-#![feature(plugin)]\n-#![plugin(clippy)]\n+\n+\n \n #![warn(needless_pass_by_value)]\n #![allow(dead_code, single_match, if_let_redundant_pattern_matching, many_single_char_names)]"}, {"sha": "c081574127af1d65e2220cfeb5fa8ffebfd35ed6", "filename": "tests/ui/needless_pass_by_value.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fneedless_pass_by_value.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fneedless_pass_by_value.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_pass_by_value.stderr?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -56,5 +56,3 @@ help: consider taking a reference instead\n 56 |     let Wrapper(_) = *y; // still not moved\n    |\n \n-error: aborting due to 7 previous errors\n-"}, {"sha": "652e11fee9d6382a6956094a26e21a841b9b2cea", "filename": "tests/ui/needless_pass_by_value_proc_macro.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fneedless_pass_by_value_proc_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fneedless_pass_by_value_proc_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_pass_by_value_proc_macro.rs?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -1,5 +1,5 @@\n-#![feature(plugin)]\n-#![plugin(clippy)]\n+\n+\n #![crate_type = \"proc-macro\"]\n #![warn(needless_pass_by_value)]\n "}, {"sha": "4739ded7b7ea21f02bf4f319d1cd3e7634423990", "filename": "tests/ui/needless_return.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fneedless_return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fneedless_return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_return.rs?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -1,5 +1,5 @@\n-#![feature(plugin)]\n-#![plugin(clippy)]\n+\n+\n \n #![warn(needless_return)]\n "}, {"sha": "68c2654c863515dbde388627ad382b813237b65f", "filename": "tests/ui/needless_return.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fneedless_return.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fneedless_return.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_return.stderr?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -48,5 +48,3 @@ error: unneeded return statement\n 39 |     let _ = || return true;\n    |                ^^^^^^^^^^^ help: remove `return` as shown: `true`\n \n-error: aborting due to 8 previous errors\n-"}, {"sha": "35d5730dda1eb643d3a71fab109c3a8d7ad4f905", "filename": "tests/ui/needless_update.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fneedless_update.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fneedless_update.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_update.rs?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -1,5 +1,5 @@\n-#![feature(plugin)]\n-#![plugin(clippy)]\n+\n+\n \n #![warn(needless_update)]\n #![allow(no_effect)]"}, {"sha": "978fd8e625ba1eea3aa072e246c70f81611d9a63", "filename": "tests/ui/needless_update.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fneedless_update.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fneedless_update.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_update.stderr?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -6,5 +6,3 @@ error: struct update has no effect, all the fields in the struct have already be\n    |\n    = note: `-D needless-update` implied by `-D warnings`\n \n-error: aborting due to previous error\n-"}, {"sha": "367d2d5edfbdd5dcf330b4c9e5f1a711d3343c9f", "filename": "tests/ui/neg_multiply.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fneg_multiply.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fneg_multiply.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneg_multiply.rs?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -1,6 +1,6 @@\n-#![feature(plugin)]\n \n-#![plugin(clippy)]\n+\n+\n #![warn(neg_multiply)]\n #![allow(no_effect, unnecessary_operation)]\n "}, {"sha": "6ed31d384a021d2649ed61886fe7abbba9c26b46", "filename": "tests/ui/neg_multiply.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fneg_multiply.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fneg_multiply.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneg_multiply.stderr?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -12,5 +12,3 @@ error: Negation by multiplying with -1\n 32 |     -1 * x;\n    |     ^^^^^^\n \n-error: aborting due to 2 previous errors\n-"}, {"sha": "715a83efd93da4c36fcf6373148463d9c66db0af", "filename": "tests/ui/never_loop.rs", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fnever_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fnever_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnever_loop.rs?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -1,5 +1,5 @@\n-#![feature(plugin)]\n-#![plugin(clippy)]\n+\n+\n #![allow(single_match, unused_assignments, unused_variables)]\n \n fn test1() {\n@@ -126,6 +126,19 @@ pub fn test12(a: bool, b: bool) {\n     }\n }\n \n+pub fn test13() {\n+    let mut a = true;\n+    loop { // infinite loop\n+        while a {\n+            if true {\n+                a = false;\n+                continue;\n+            }\n+            return;\n+        }\n+    }\n+}\n+\n fn main() {\n     test1();\n     test2();\n@@ -139,5 +152,6 @@ fn main() {\n     test10();\n     test11(|| 0);\n     test12(true, false);\n+    test13();\n }\n "}, {"sha": "1ecdb5030f93d1958d1166ba996e4f7f0aaa5152", "filename": "tests/ui/never_loop.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fnever_loop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fnever_loop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnever_loop.stderr?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -68,5 +68,3 @@ error: this loop never actually loops\n 103 | |     }\n     | |_____^\n \n-error: aborting due to 7 previous errors\n-"}, {"sha": "9fd0fea137c817fe9792aeebffc3e93845614db9", "filename": "tests/ui/new_without_default.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fnew_without_default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fnew_without_default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnew_without_default.rs?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -1,5 +1,5 @@\n #![feature(plugin, const_fn)]\n-#![plugin(clippy)]\n+\n \n #![allow(dead_code)]\n #![warn(new_without_default, new_without_default_derive)]"}, {"sha": "0ced183b1e070871a51bf64bef4915e99f376f9a", "filename": "tests/ui/new_without_default.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fnew_without_default.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fnew_without_default.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnew_without_default.stderr?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -38,5 +38,3 @@ help: try this\n 69 | \n  ...\n \n-error: aborting due to 3 previous errors\n-"}, {"sha": "1b7da6496bf2611e70531a0d95d1d28af6341bb0", "filename": "tests/ui/no_effect.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fno_effect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fno_effect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fno_effect.rs?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -1,5 +1,5 @@\n #![feature(plugin, box_syntax, inclusive_range_syntax)]\n-#![plugin(clippy)]\n+\n \n #![warn(no_effect, unnecessary_operation)]\n #![allow(dead_code)]\n@@ -71,7 +71,7 @@ fn main() {\n     5..;\n     ..5;\n     5..6;\n-    5...6;\n+    5..=6;\n     [42, 55];\n     [42, 55][1];\n     (42, 55).1;"}, {"sha": "9a161ce96439906678ceee01be1c1b2c09b2ace6", "filename": "tests/ui/no_effect.stderr", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fno_effect.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fno_effect.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fno_effect.stderr?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -111,7 +111,7 @@ error: statement with no effect\n error: statement with no effect\n   --> $DIR/no_effect.rs:74:5\n    |\n-74 |     5...6;\n+74 |     5..=6;\n    |     ^^^^^^\n \n error: statement with no effect\n@@ -266,5 +266,3 @@ error: statement can be reduced\n 110 |     {get_number()};\n     |     ^^^^^^^^^^^^^^^ help: replace it with: `get_number();`\n \n-error: aborting due to 44 previous errors\n-"}, {"sha": "9eb3e5a82a7c49657e9149161224c0ba03ca293d", "filename": "tests/ui/non_expressive_names.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fnon_expressive_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fnon_expressive_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnon_expressive_names.rs?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -1,5 +1,5 @@\n-#![feature(plugin)]\n-#![plugin(clippy)]\n+\n+\n #![warn(clippy,similar_names)]\n #![allow(unused)]\n "}, {"sha": "014d45992712a49e6d1c509153b8f36e9415c3dd", "filename": "tests/ui/non_expressive_names.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fnon_expressive_names.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fnon_expressive_names.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnon_expressive_names.stderr?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -129,5 +129,3 @@ error: 5th binding whose name is just one char\n 129 |             e => panic!(),\n     |             ^\n \n-error: aborting due to 11 previous errors\n-"}, {"sha": "fdc01bcc7bc0f329d6c5aa02bed4d8706e69834d", "filename": "tests/ui/ok_if_let.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fok_if_let.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fok_if_let.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fok_if_let.rs?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -1,5 +1,5 @@\n-#![feature(plugin)]\n-#![plugin(clippy)]\n+\n+\n \n #![warn(if_let_some_result)]\n "}, {"sha": "b696672d2fd047be1c5398341055e3fd1a7c0d6d", "filename": "tests/ui/ok_if_let.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fok_if_let.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fok_if_let.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fok_if_let.stderr?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -11,5 +11,3 @@ error: Matching on `Some` with `ok()` is redundant\n    = note: `-D if-let-some-result` implied by `-D warnings`\n    = help: Consider matching on `Ok(y)` and removing the call to `ok` instead\n \n-error: aborting due to previous error\n-"}, {"sha": "9eb697571b698a3a3fc64a4b23c54d997d49f586", "filename": "tests/ui/op_ref.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fop_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fop_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fop_ref.rs?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -1,5 +1,5 @@\n-#![feature(plugin)]\n-#![plugin(clippy)]\n+\n+\n \n #![allow(unused_variables, blacklisted_name)]\n \n@@ -21,4 +21,4 @@ fn main() {\n     if b < &a {\n         println!(\"OK\");\n     }\n-}\n\\ No newline at end of file\n+}"}, {"sha": "dbe53933fd5e3f482265c28a79271953fe24868f", "filename": "tests/ui/op_ref.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fop_ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fop_ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fop_ref.stderr?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -10,5 +10,3 @@ help: use the values directly\n 13 |     let foo = 5 - 6;\n    |               ^\n \n-error: aborting due to previous error\n-"}, {"sha": "514808d41f1eee4923bbaeac929e05f3ef489af2", "filename": "tests/ui/open_options.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fopen_options.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fopen_options.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fopen_options.rs?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -1,5 +1,5 @@\n-#![feature(plugin)]\n-#![plugin(clippy)]\n+\n+\n use std::fs::OpenOptions;\n \n #[allow(unused_must_use)]"}, {"sha": "2f4070c2868fe54d7a51e624889833191ca02c98", "filename": "tests/ui/open_options.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fopen_options.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fopen_options.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fopen_options.stderr?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -42,5 +42,3 @@ error: the method \"truncate\" is called more than once\n 15 |     OpenOptions::new().truncate(true).truncate(false).open(\"foo.txt\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to 7 previous errors\n-"}, {"sha": "889c339c8fdac7a95e7b2db7ef01a91653a1aae1", "filename": "tests/ui/overflow_check_conditional.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Foverflow_check_conditional.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Foverflow_check_conditional.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Foverflow_check_conditional.rs?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -1,5 +1,5 @@\n-#![feature(plugin)]\n-#![plugin(clippy)]\n+\n+\n \n #![allow(many_single_char_names)]\n #![warn(overflow_check_conditional)]"}, {"sha": "9f23e96c06557791d7103556f2050de690ef3843", "filename": "tests/ui/overflow_check_conditional.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Foverflow_check_conditional.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Foverflow_check_conditional.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Foverflow_check_conditional.stderr?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -48,5 +48,3 @@ error: You are trying to use classic C underflow conditions that will fail in Ru\n 32 |  if a < a - b {\n    |     ^^^^^^^^^\n \n-error: aborting due to 8 previous errors\n-"}, {"sha": "f621a5f636df7c5e6df39653e23880917613391a", "filename": "tests/ui/panic.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fpanic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fpanic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fpanic.rs?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -1,5 +1,5 @@\n-#![feature(plugin)]\n-#![plugin(clippy)]\n+\n+\n \n #![warn(panic_params)]\n "}, {"sha": "f2480dfea6ed7b5074802f3d2347c17b6e52a690", "filename": "tests/ui/panic.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fpanic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fpanic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fpanic.stderr?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -18,5 +18,3 @@ error: you probably are missing some parameter in your format string\n 12 |         assert!(true, \"here be missing values: {}\");\n    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to 3 previous errors\n-"}, {"sha": "36dd4df8a6ecdb612221c658c18eb6cec8000adf", "filename": "tests/ui/partialeq_ne_impl.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fpartialeq_ne_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fpartialeq_ne_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fpartialeq_ne_impl.rs?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -1,5 +1,5 @@\n-#![feature(plugin)]\n-#![plugin(clippy)]\n+\n+\n \n #![allow(dead_code)]\n "}, {"sha": "c332ce53c1a49910d21cdf6d721a95a4d386775b", "filename": "tests/ui/partialeq_ne_impl.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fpartialeq_ne_impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fpartialeq_ne_impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fpartialeq_ne_impl.stderr?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -6,5 +6,3 @@ error: re-implementing `PartialEq::ne` is unnecessary\n    |\n    = note: `-D partialeq-ne-impl` implied by `-D warnings`\n \n-error: aborting due to previous error\n-"}, {"sha": "65e319e2f8811c3dfbfa8966d7b02318c99314bb", "filename": "tests/ui/patterns.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fpatterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fpatterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fpatterns.rs?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -1,5 +1,5 @@\n-#![feature(plugin)]\n-#![plugin(clippy)]\n+\n+\n #![allow(unused)]\n #![warn(clippy)]\n "}, {"sha": "9a246c483b2b2d4f9069a3ca9623c4058a972b49", "filename": "tests/ui/patterns.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fpatterns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fpatterns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fpatterns.stderr?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -6,5 +6,3 @@ error: the `y @ _` pattern can be written as just `y`\n    |\n    = note: `-D redundant-pattern` implied by `-D warnings`\n \n-error: aborting due to previous error\n-"}, {"sha": "720637c94b56d7ed36f30cde5ee5bb86ef538f86", "filename": "tests/ui/precedence.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fprecedence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fprecedence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fprecedence.rs?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -1,5 +1,5 @@\n-#![feature(plugin)]\n-#![plugin(clippy)]\n+\n+\n \n #[warn(precedence)]\n #[allow(identity_op)]"}, {"sha": "26fbd75164d1259a71ae35376f2f9c52ced16f67", "filename": "tests/ui/precedence.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fprecedence.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fprecedence.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fprecedence.stderr?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -54,5 +54,3 @@ error: unary minus has lower precedence than method call\n 16 |     -1f32.abs();\n    |     ^^^^^^^^^^^ help: consider adding parentheses to clarify your intent: `-(1f32.abs())`\n \n-error: aborting due to 9 previous errors\n-"}, {"sha": "91304d961a7a14a449b03f5c06d60a20f92fce04", "filename": "tests/ui/print.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fprint.rs?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -1,5 +1,5 @@\n-#![feature(plugin)]\n-#![plugin(clippy)]\n+\n+\n #![warn(print_stdout, use_debug)]\n \n use std::fmt::{Debug, Display, Formatter, Result};"}, {"sha": "fa547949bdb5ca2304773b2a81183cb1284748d6", "filename": "tests/ui/print.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fprint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fprint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fprint.stderr?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -50,5 +50,3 @@ error: use of `Debug`-based formatting\n 31 |     print!(\"Hello {:#?}\", \"#orld\");\n    |                           ^^^^^^^\n \n-error: aborting due to 8 previous errors\n-"}, {"sha": "5cc50dea81041953b50761e083a9d93698b67056", "filename": "tests/ui/print_with_newline.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fprint_with_newline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fprint_with_newline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fprint_with_newline.rs?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -1,5 +1,5 @@\n-#![feature(plugin)]\n-#![plugin(clippy)]\n+\n+\n #![warn(print_with_newline)]\n \n fn main() {"}, {"sha": "2ade3ae4ef59cb396afd37025d5f49ae5ebf6ca8", "filename": "tests/ui/print_with_newline.stderr", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fprint_with_newline.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fprint_with_newline.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fprint_with_newline.stderr?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -0,0 +1,26 @@\n+error: using `print!()` with a format string that ends in a newline, consider using `println!()` instead\n+ --> $DIR/print_with_newline.rs:6:5\n+  |\n+6 |     print!(\"Hello/n\");\n+  |     ^^^^^^^^^^^^^^^^^^\n+  |\n+  = note: `-D print-with-newline` implied by `-D warnings`\n+\n+error: using `print!()` with a format string that ends in a newline, consider using `println!()` instead\n+ --> $DIR/print_with_newline.rs:7:5\n+  |\n+7 |     print!(\"Hello {}/n\", \"world\");\n+  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: using `print!()` with a format string that ends in a newline, consider using `println!()` instead\n+ --> $DIR/print_with_newline.rs:8:5\n+  |\n+8 |     print!(\"Hello {} {}/n/n\", \"world\", \"#2\");\n+  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: using `print!()` with a format string that ends in a newline, consider using `println!()` instead\n+ --> $DIR/print_with_newline.rs:9:5\n+  |\n+9 |     print!(\"{}/n\", 1265);\n+  |     ^^^^^^^^^^^^^^^^^^^^^\n+"}, {"sha": "14b26e168474717d8f52986deb05b3024409ffe8", "filename": "tests/ui/ptr_arg.rs", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fptr_arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fptr_arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fptr_arg.rs?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -1,5 +1,5 @@\n-#![feature(plugin)]\n-#![plugin(clippy)]\n+\n+\n #![allow(unused, many_single_char_names)]\n #![warn(ptr_arg)]\n \n@@ -55,3 +55,15 @@ fn str_cloned(x: &String) -> String {\n              .clone();\n     x.clone()\n }\n+\n+fn false_positive_capacity(x: &Vec<u8>, y: &String) {\n+    let a = x.capacity();\n+    let b = y.clone();\n+    let c = y.as_str();\n+}\n+\n+fn false_positive_capacity_too(x: &String) -> String {\n+    if x.capacity() > 1024 { panic!(\"Too large!\"); }\n+    x.clone()\n+}\n+"}, {"sha": "13be68d4cd4273ec5ea9537d4b0b078e9961a842", "filename": "tests/ui/ptr_arg.stderr", "status": "modified", "additions": 23, "deletions": 6, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fptr_arg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fptr_arg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fptr_arg.stderr?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -28,11 +28,11 @@ help: change this to\n    |\n 40 | fn cloned(x: &[u8]) -> Vec<u8> {\n    |              ^^^^^\n-help: change the `.clone()` to\n+help: change `x.clone()` to\n    |\n 41 |     let e = x.to_owned();\n    |             ^^^^^^^^^^^^\n-help: change the `.clone()` to\n+help: change `x.clone()` to\n    |\n 46 |     x.to_owned()\n    |     ^^^^^^^^^^^^\n@@ -47,18 +47,35 @@ help: change this to\n    |\n 49 | fn str_cloned(x: &str) -> String {\n    |                  ^^^^\n-help: change the `.clone` to \n+help: change `x.clone()` to\n    |\n 50 |     let a = x.to_string();\n    |             ^^^^^^^^^^^^^\n-help: change the `.clone` to \n+help: change `x.clone()` to\n    |\n 51 |     let b = x.to_string();\n    |             ^^^^^^^^^^^^^\n-help: change the `.clone` to \n+help: change `x.clone()` to\n    |\n 56 |     x.to_string()\n    |     ^^^^^^^^^^^^^\n \n-error: aborting due to 5 previous errors\n+error: writing `&String` instead of `&str` involves a new object where a slice will do.\n+  --> $DIR/ptr_arg.rs:59:44\n+   |\n+59 | fn false_positive_capacity(x: &Vec<u8>, y: &String) {\n+   |                                            ^^^^^^^\n+   |\n+help: change this to\n+   |\n+59 | fn false_positive_capacity(x: &Vec<u8>, y: &str) {\n+   |                                            ^^^^\n+help: change `y.clone()` to\n+   |\n+61 |     let b = y.to_string();\n+   |             ^^^^^^^^^^^^^\n+help: change `y.as_str()` to\n+   |\n+62 |     let c = y;\n+   |             ^\n "}, {"sha": "71f2f2b219bd79ebfef7bd3dbfa1aa3107a1f009", "filename": "tests/ui/range.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Frange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Frange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frange.rs?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -1,7 +1,7 @@\n #![feature(iterator_step_by)]\n #![feature(inclusive_range_syntax)]\n-#![feature(plugin)]\n-#![plugin(clippy)]\n+\n+\n \n struct NotARange;\n impl NotARange {\n@@ -15,7 +15,7 @@ fn main() {\n     let _ = (0..1).step_by(1);\n \n     let _ = (1..).step_by(0);\n-    let _ = (1...2).step_by(0);\n+    let _ = (1..=2).step_by(0);\n \n     let x = 0..1;\n     let _ = x.step_by(0);"}, {"sha": "4098d32d08e3ea49aaef6371aa855ce6a70917e3", "filename": "tests/ui/range.stderr", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Frange.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Frange.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frange.stderr?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -15,7 +15,7 @@ error: Iterator::step_by(0) will panic at runtime\n error: Iterator::step_by(0) will panic at runtime\n   --> $DIR/range.rs:18:13\n    |\n-18 |     let _ = (1...2).step_by(0);\n+18 |     let _ = (1..=2).step_by(0);\n    |             ^^^^^^^^^^^^^^^^^^\n \n error: Iterator::step_by(0) will panic at runtime\n@@ -38,5 +38,3 @@ error: Iterator::step_by(0) will panic at runtime\n 33 |     let _ = v1.iter().step_by(2/3);\n    |             ^^^^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to 6 previous errors\n-"}, {"sha": "ab3897bc3150d5e5f74fc64f565917ea8528083b", "filename": "tests/ui/redundant_closure_call.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fredundant_closure_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fredundant_closure_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_closure_call.rs?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -1,5 +1,5 @@\n-#![feature(plugin)]\n-#![plugin(clippy)]\n+\n+\n \n #![warn(redundant_closure_call)]\n "}, {"sha": "d8ec72fda92aea813984c14af4d449af9f1b91df", "filename": "tests/ui/redundant_closure_call.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fredundant_closure_call.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fredundant_closure_call.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_closure_call.stderr?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -30,5 +30,3 @@ error: Try not to call a closure in the expression where it is declared.\n 12 |  k = (|a,b| a*b)(1,5);\n    |      ^^^^^^^^^^^^^^^^\n \n-error: aborting due to 5 previous errors\n-"}, {"sha": "0bd000082e83d39d1fe8c1e20e52044ab18a19ed", "filename": "tests/ui/reference.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Freference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Freference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Freference.rs?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -1,5 +1,5 @@\n-#![feature(plugin)]\n-#![plugin(clippy)]\n+\n+\n \n fn get_number() -> usize {\n     10"}, {"sha": "2e6b23f6dc0ffc76808ab754662a24eb95a021fc", "filename": "tests/ui/reference.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Freference.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Freference.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Freference.stderr?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -66,5 +66,3 @@ error: immediately dereferencing a reference\n 53 |         let y = **&mut &mut x;\n    |                  ^^^^^^^^^^^^ help: try this: `&mut x`\n \n-error: aborting due to 11 previous errors\n-"}, {"sha": "3dd1f64202c7643928740d8c52f924360dec650f", "filename": "tests/ui/regex.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fregex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fregex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fregex.rs?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -1,5 +1,5 @@\n-#![feature(plugin)]\n-#![plugin(clippy)]\n+\n+\n \n #![allow(unused)]\n #![warn(invalid_regex, trivial_regex, regex_macro)]"}, {"sha": "1c244c1df127e57511d1d82794256726ce4e4301", "filename": "tests/ui/regex.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fregex.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fregex.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fregex.stderr?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -149,5 +149,3 @@ error: trivial regex\n    |\n    = help: consider using consider using `str::is_empty`\n \n-error: aborting due to 21 previous errors\n-"}, {"sha": "792ebc9b0ea18b4ee232f2e9270559bb85e48b8f", "filename": "tests/ui/serde.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fserde.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fserde.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fserde.rs?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -1,5 +1,5 @@\n-#![feature(plugin)]\n-#![plugin(clippy)]\n+\n+\n #![warn(serde_api_misuse)]\n #![allow(dead_code)]\n "}, {"sha": "da0a96b2a3dc2dd2f192488879f26985eaad8ab4", "filename": "tests/ui/serde.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fserde.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fserde.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fserde.stderr?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -10,5 +10,3 @@ error: you should not implement `visit_string` without also implementing `visit_\n    |\n    = note: `-D serde-api-misuse` implied by `-D warnings`\n \n-error: aborting due to previous error\n-"}, {"sha": "fbe695a7657c797fccf0673dd53e0d6b02f8f329", "filename": "tests/ui/shadow.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fshadow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fshadow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fshadow.rs?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -1,5 +1,5 @@\n-#![feature(plugin)]\n-#![plugin(clippy)]\n+\n+\n \n #![warn(clippy, clippy_pedantic)]\n #![allow(unused_parens, unused_variables, missing_docs_in_private_items)]"}, {"sha": "50f41627acbf228a56e27ba6f6e6fd6607b1713c", "filename": "tests/ui/shadow.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fshadow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fshadow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fshadow.stderr?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -134,5 +134,3 @@ note: previous binding is here\n 21 |     let x = y;\n    |         ^\n \n-error: aborting due to 9 previous errors\n-"}, {"sha": "0f5773623be347629c410ec615b109e1a9a72e54", "filename": "tests/ui/short_circuit_statement.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fshort_circuit_statement.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fshort_circuit_statement.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fshort_circuit_statement.rs?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -1,5 +1,5 @@\n-#![feature(plugin)]\n-#![plugin(clippy)]\n+\n+\n \n #![warn(short_circuit_statement)]\n "}, {"sha": "d7a02d7b9c3c73c5cb60e465cf05068343fc2d71", "filename": "tests/ui/short_circuit_statement.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fshort_circuit_statement.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fshort_circuit_statement.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fshort_circuit_statement.stderr?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -18,5 +18,3 @@ error: boolean short circuit operator in statement may be clearer using an expli\n 9 |     1 == 2 || g();\n   |     ^^^^^^^^^^^^^^ help: replace it with: `if !(1 == 2) { g(); }`\n \n-error: aborting due to 3 previous errors\n-"}, {"sha": "5814e9977530c06b08222bccd1b3d46f3665f07b", "filename": "tests/ui/should_assert_eq.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fshould_assert_eq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fshould_assert_eq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fshould_assert_eq.rs?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -1,5 +1,5 @@\n-#![feature(plugin)]\n-#![plugin(clippy)]\n+\n+\n \n #![allow(needless_pass_by_value)]\n #![warn(should_assert_eq)]"}, {"sha": "5b393e1dbe870a00f7475793916f544d7c4ccb4c", "filename": "tests/ui/should_assert_eq.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fshould_assert_eq.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fshould_assert_eq.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fshould_assert_eq.stderr?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -55,5 +55,3 @@ error: use `assert_ne` for better reporting\n    |\n    = note: this error originates in a macro outside of the current crate\n \n-error: aborting due to 7 previous errors\n-"}, {"sha": "66d24a3c0702ae0e130037a065f735acbe935d64", "filename": "tests/ui/strings.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fstrings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcdce8fc1d4891032699554fe64fdcd8e54afe49/tests%2Fui%2Fstrings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fstrings.rs?ref=fcdce8fc1d4891032699554fe64fdcd8e54afe49", "patch": "@@ -1,5 +1,5 @@\n-#![feature(plugin)]\n-#![plugin(clippy)]\n+\n+\n \n #[warn(string_add)]\n #[allow(string_add_assign)]"}]}