{"sha": "cfdaca049a2451b62d3d403ef13b78d7a2f60816", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNmZGFjYTA0OWEyNDUxYjYyZDNkNDAzZWYxM2I3OGQ3YTJmNjA4MTY=", "commit": {"author": {"name": "Jonathan Turner", "email": "jturner@mozilla.com", "date": "2016-07-27T23:59:33Z"}, "committer": {"name": "Jonathan Turner", "email": "jturner@mozilla.com", "date": "2016-07-28T15:58:25Z"}, "message": "Rename _ to {numerics} for unknown numeric types", "tree": {"sha": "c76a2fddc209e5b0fa2871b707e0208128931cab", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c76a2fddc209e5b0fa2871b707e0208128931cab"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cfdaca049a2451b62d3d403ef13b78d7a2f60816", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cfdaca049a2451b62d3d403ef13b78d7a2f60816", "html_url": "https://github.com/rust-lang/rust/commit/cfdaca049a2451b62d3d403ef13b78d7a2f60816", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cfdaca049a2451b62d3d403ef13b78d7a2f60816/comments", "author": null, "committer": null, "parents": [{"sha": "cec262e55a92ad15196c4ea6d490fb6ef6bccab4", "url": "https://api.github.com/repos/rust-lang/rust/commits/cec262e55a92ad15196c4ea6d490fb6ef6bccab4", "html_url": "https://github.com/rust-lang/rust/commit/cec262e55a92ad15196c4ea6d490fb6ef6bccab4"}], "stats": {"total": 81, "additions": 41, "deletions": 40}, "files": [{"sha": "a33d914e7cf7a19ef0687661beaccc29d18b57dd", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cfdaca049a2451b62d3d403ef13b78d7a2f60816/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfdaca049a2451b62d3d403ef13b78d7a2f60816/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=cfdaca049a2451b62d3d403ef13b78d7a2f60816", "patch": "@@ -974,7 +974,8 @@ impl fmt::Display for ty::InferTy {\n             ty::TyVar(ref vid) if print_var_ids => write!(f, \"{:?}\", vid),\n             ty::IntVar(ref vid) if print_var_ids => write!(f, \"{:?}\", vid),\n             ty::FloatVar(ref vid) if print_var_ids => write!(f, \"{:?}\", vid),\n-            ty::TyVar(_) | ty::IntVar(_) | ty::FloatVar(_) => write!(f, \"_\"),\n+            ty::TyVar(_) => write!(f, \"_\"),\n+            ty::IntVar(_) | ty::FloatVar(_) => write!(f, \"{}\", \"{numeric}\"),\n             ty::FreshTy(v) => write!(f, \"FreshTy({})\", v),\n             ty::FreshIntTy(v) => write!(f, \"FreshIntTy({})\", v),\n             ty::FreshFloatTy(v) => write!(f, \"FreshFloatTy({})\", v)"}, {"sha": "b8883e4661eaa0b0578139a2df327580c86a82e5", "filename": "src/test/compile-fail/array-not-vector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cfdaca049a2451b62d3d403ef13b78d7a2f60816/src%2Ftest%2Fcompile-fail%2Farray-not-vector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfdaca049a2451b62d3d403ef13b78d7a2f60816/src%2Ftest%2Fcompile-fail%2Farray-not-vector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Farray-not-vector.rs?ref=cfdaca049a2451b62d3d403ef13b78d7a2f60816", "patch": "@@ -12,7 +12,7 @@ fn main() {\n     let _x: i32 = [1, 2, 3];\n     //~^ ERROR mismatched types\n     //~| expected type `i32`\n-    //~| found type `[_; 3]`\n+    //~| found type `[{numeric}; 3]`\n     //~| expected i32, found array of 3 elements\n \n     let x: &[i32] = &[1, 2, 3];"}, {"sha": "3b6221f0df5b8fed24af3913e373299cd5779520", "filename": "src/test/compile-fail/bad-const-type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cfdaca049a2451b62d3d403ef13b78d7a2f60816/src%2Ftest%2Fcompile-fail%2Fbad-const-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfdaca049a2451b62d3d403ef13b78d7a2f60816/src%2Ftest%2Fcompile-fail%2Fbad-const-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbad-const-type.rs?ref=cfdaca049a2451b62d3d403ef13b78d7a2f60816", "patch": "@@ -11,6 +11,6 @@\n static i: String = 10;\n //~^ ERROR mismatched types\n //~| expected type `std::string::String`\n-//~| found type `_`\n+//~| found type `{numeric}`\n //~| expected struct `std::string::String`, found integral variable\n fn main() { println!(\"{}\", i); }"}, {"sha": "91222e58b78cc1608fc5980c4d0110e46a46aa53", "filename": "src/test/compile-fail/coerce-mut.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cfdaca049a2451b62d3d403ef13b78d7a2f60816/src%2Ftest%2Fcompile-fail%2Fcoerce-mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfdaca049a2451b62d3d403ef13b78d7a2f60816/src%2Ftest%2Fcompile-fail%2Fcoerce-mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcoerce-mut.rs?ref=cfdaca049a2451b62d3d403ef13b78d7a2f60816", "patch": "@@ -15,6 +15,6 @@ fn main() {\n     f(&x);\n     //~^ ERROR mismatched types\n     //~| expected type `&mut i32`\n-    //~| found type `&_`\n+    //~| found type `&{numeric}`\n     //~| values differ in mutability\n }"}, {"sha": "bfec84993961e4dd323007e6b2cab652fb0510d4", "filename": "src/test/compile-fail/coercion-slice.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cfdaca049a2451b62d3d403ef13b78d7a2f60816/src%2Ftest%2Fcompile-fail%2Fcoercion-slice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfdaca049a2451b62d3d403ef13b78d7a2f60816/src%2Ftest%2Fcompile-fail%2Fcoercion-slice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcoercion-slice.rs?ref=cfdaca049a2451b62d3d403ef13b78d7a2f60816", "patch": "@@ -14,6 +14,6 @@ fn main() {\n     let _: &[i32] = [0];\n     //~^ ERROR mismatched types\n     //~| expected type `&[i32]`\n-    //~| found type `[_; 1]`\n+    //~| found type `[{numeric}; 1]`\n     //~| expected &-ptr, found array of 1 elements\n }"}, {"sha": "3ae95a72abdd9d36f7ed0c83469a2bba8bf02468", "filename": "src/test/compile-fail/fully-qualified-type-name1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cfdaca049a2451b62d3d403ef13b78d7a2f60816/src%2Ftest%2Fcompile-fail%2Ffully-qualified-type-name1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfdaca049a2451b62d3d403ef13b78d7a2f60816/src%2Ftest%2Fcompile-fail%2Ffully-qualified-type-name1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffully-qualified-type-name1.rs?ref=cfdaca049a2451b62d3d403ef13b78d7a2f60816", "patch": "@@ -15,6 +15,6 @@ fn main() {\n     x = 5;\n     //~^ ERROR mismatched types\n     //~| expected type `std::option::Option<usize>`\n-    //~| found type `_`\n+    //~| found type `{numeric}`\n     //~| expected enum `std::option::Option`, found integral variable\n }"}, {"sha": "394a6fb30d7e98b6ba3fac2163b7e8a280725734", "filename": "src/test/compile-fail/if-let-arm-types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cfdaca049a2451b62d3d403ef13b78d7a2f60816/src%2Ftest%2Fcompile-fail%2Fif-let-arm-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfdaca049a2451b62d3d403ef13b78d7a2f60816/src%2Ftest%2Fcompile-fail%2Fif-let-arm-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fif-let-arm-types.rs?ref=cfdaca049a2451b62d3d403ef13b78d7a2f60816", "patch": "@@ -12,7 +12,7 @@ fn main() {\n     if let Some(b) = None { //~ ERROR: `if let` arms have incompatible types\n         //~^ expected (), found integral variable\n         //~| expected type `()`\n-        //~| found type `_`\n+        //~| found type `{numeric}`\n         ()\n     } else {                //~ NOTE: `if let` arm with an incompatible type\n         1"}, {"sha": "fe29a840f28c7706e76ad994d3d41073a8b2a94b", "filename": "src/test/compile-fail/indexing-requires-a-uint.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cfdaca049a2451b62d3d403ef13b78d7a2f60816/src%2Ftest%2Fcompile-fail%2Findexing-requires-a-uint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfdaca049a2451b62d3d403ef13b78d7a2f60816/src%2Ftest%2Fcompile-fail%2Findexing-requires-a-uint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Findexing-requires-a-uint.rs?ref=cfdaca049a2451b62d3d403ef13b78d7a2f60816", "patch": "@@ -13,7 +13,7 @@\n \n fn main() {\n     fn bar<T>(_: T) {}\n-    [0][0u8]; //~ ERROR: `[_]: std::ops::Index<u8>` is not satisfied\n+    [0][0u8]; //~ ERROR: `[{numeric}]: std::ops::Index<u8>` is not satisfied\n \n     [0][0]; // should infer to be a usize\n "}, {"sha": "9dd3772c10cd904c224664d5a7912113e788e79b", "filename": "src/test/compile-fail/integral-variable-unification-error.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cfdaca049a2451b62d3d403ef13b78d7a2f60816/src%2Ftest%2Fcompile-fail%2Fintegral-variable-unification-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfdaca049a2451b62d3d403ef13b78d7a2f60816/src%2Ftest%2Fcompile-fail%2Fintegral-variable-unification-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fintegral-variable-unification-error.rs?ref=cfdaca049a2451b62d3d403ef13b78d7a2f60816", "patch": "@@ -12,7 +12,7 @@ fn main() {\n     let mut x = 2;\n     x = 5.0;\n     //~^ ERROR mismatched types\n-    //~| expected type `_`\n-    //~| found type `_`\n+    //~| expected type `{numeric}`\n+    //~| found type `{numeric}`\n     //~| expected integral variable, found floating-point variable\n }"}, {"sha": "b1a5adb313face7f9ea68fee9e83553142c05f0b", "filename": "src/test/compile-fail/issue-13466.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cfdaca049a2451b62d3d403ef13b78d7a2f60816/src%2Ftest%2Fcompile-fail%2Fissue-13466.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfdaca049a2451b62d3d403ef13b78d7a2f60816/src%2Ftest%2Fcompile-fail%2Fissue-13466.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-13466.rs?ref=cfdaca049a2451b62d3d403ef13b78d7a2f60816", "patch": "@@ -17,13 +17,13 @@ pub fn main() {\n     let _x: usize = match Some(1) {\n         Ok(u) => u,\n         //~^ ERROR mismatched types\n-        //~| expected type `std::option::Option<_>`\n+        //~| expected type `std::option::Option<{numeric}>`\n         //~| found type `std::result::Result<_, _>`\n         //~| expected enum `std::option::Option`, found enum `std::result::Result`\n \n         Err(e) => panic!(e)\n         //~^ ERROR mismatched types\n-        //~| expected type `std::option::Option<_>`\n+        //~| expected type `std::option::Option<{numeric}>`\n         //~| found type `std::result::Result<_, _>`\n         //~| expected enum `std::option::Option`, found enum `std::result::Result`\n     };"}, {"sha": "2438c86a57c7f713e2a4695f40042cc65e6bb578", "filename": "src/test/compile-fail/issue-17651.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cfdaca049a2451b62d3d403ef13b78d7a2f60816/src%2Ftest%2Fcompile-fail%2Fissue-17651.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfdaca049a2451b62d3d403ef13b78d7a2f60816/src%2Ftest%2Fcompile-fail%2Fissue-17651.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-17651.rs?ref=cfdaca049a2451b62d3d403ef13b78d7a2f60816", "patch": "@@ -14,5 +14,5 @@\n fn main() {\n     // FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n     (|| Box::new(*(&[0][..])))();\n-    //~^ ERROR `[_]: std::marker::Sized` is not satisfied\n+    //~^ ERROR `[{numeric}]: std::marker::Sized` is not satisfied\n }"}, {"sha": "77a83a608213d1a27673320f1867e80b7a68f2fc", "filename": "src/test/compile-fail/issue-19991.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cfdaca049a2451b62d3d403ef13b78d7a2f60816/src%2Ftest%2Fcompile-fail%2Fissue-19991.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfdaca049a2451b62d3d403ef13b78d7a2f60816/src%2Ftest%2Fcompile-fail%2Fissue-19991.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-19991.rs?ref=cfdaca049a2451b62d3d403ef13b78d7a2f60816", "patch": "@@ -14,7 +14,7 @@\n fn main() {\n     if let Some(homura) = Some(\"madoka\") { //~  ERROR missing an else clause\n                                            //~| expected type `()`\n-                                           //~| found type `_`\n+                                           //~| found type `{numeric}`\n                                            //~| expected (), found integral variable\n         765\n     };"}, {"sha": "f2d24f3998cc22505dde6313c321a03656d64585", "filename": "src/test/compile-fail/issue-26237.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cfdaca049a2451b62d3d403ef13b78d7a2f60816/src%2Ftest%2Fcompile-fail%2Fissue-26237.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfdaca049a2451b62d3d403ef13b78d7a2f60816/src%2Ftest%2Fcompile-fail%2Fissue-26237.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-26237.rs?ref=cfdaca049a2451b62d3d403ef13b78d7a2f60816", "patch": "@@ -11,7 +11,7 @@\n macro_rules! macro_panic {\n     ($not_a_function:expr, $some_argument:ident) => {\n         $not_a_function($some_argument)\n-        //~^ ERROR expected function, found `_`\n+        //~^ ERROR expected function, found `{numeric}`\n     }\n }\n "}, {"sha": "65bfeed20eaa04c81654316afc8c9a9b408103cf", "filename": "src/test/compile-fail/issue-4201.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cfdaca049a2451b62d3d403ef13b78d7a2f60816/src%2Ftest%2Fcompile-fail%2Fissue-4201.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfdaca049a2451b62d3d403ef13b78d7a2f60816/src%2Ftest%2Fcompile-fail%2Fissue-4201.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-4201.rs?ref=cfdaca049a2451b62d3d403ef13b78d7a2f60816", "patch": "@@ -14,7 +14,7 @@ fn main() {\n     } else if false {\n //~^ ERROR if may be missing an else clause\n //~| expected type `()`\n-//~| found type `_`\n+//~| found type `{numeric}`\n //~| expected (), found integral variable\n         1\n     };"}, {"sha": "e929f0cb3113d2e090513871feef615f41812e69", "filename": "src/test/compile-fail/issue-4968.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cfdaca049a2451b62d3d403ef13b78d7a2f60816/src%2Ftest%2Fcompile-fail%2Fissue-4968.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfdaca049a2451b62d3d403ef13b78d7a2f60816/src%2Ftest%2Fcompile-fail%2Fissue-4968.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-4968.rs?ref=cfdaca049a2451b62d3d403ef13b78d7a2f60816", "patch": "@@ -14,7 +14,7 @@ const A: (isize,isize) = (4,2);\n fn main() {\n     match 42 { A => () }\n     //~^ ERROR mismatched types\n-    //~| expected type `_`\n+    //~| expected type `{numeric}`\n     //~| found type `(isize, isize)`\n     //~| expected integral variable, found tuple\n }"}, {"sha": "95ba2308bfb90667ee77d3978e8315206792ebf5", "filename": "src/test/compile-fail/issue-7867.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cfdaca049a2451b62d3d403ef13b78d7a2f60816/src%2Ftest%2Fcompile-fail%2Fissue-7867.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfdaca049a2451b62d3d403ef13b78d7a2f60816/src%2Ftest%2Fcompile-fail%2Fissue-7867.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-7867.rs?ref=cfdaca049a2451b62d3d403ef13b78d7a2f60816", "patch": "@@ -25,12 +25,12 @@ fn main() {\n     match &Some(42) {\n         Some(x) => (),\n         //~^ ERROR mismatched types\n-        //~| expected type `&std::option::Option<_>`\n+        //~| expected type `&std::option::Option<{numeric}>`\n         //~| found type `std::option::Option<_>`\n         //~| expected &-ptr, found enum `std::option::Option`\n         None => ()\n         //~^ ERROR mismatched types\n-        //~| expected type `&std::option::Option<_>`\n+        //~| expected type `&std::option::Option<{numeric}>`\n         //~| found type `std::option::Option<_>`\n         //~| expected &-ptr, found enum `std::option::Option`\n     }"}, {"sha": "93723ae9f237cc67820fa28fd1c4c447c9ea997e", "filename": "src/test/compile-fail/kindck-impl-type-params-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cfdaca049a2451b62d3d403ef13b78d7a2f60816/src%2Ftest%2Fcompile-fail%2Fkindck-impl-type-params-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfdaca049a2451b62d3d403ef13b78d7a2f60816/src%2Ftest%2Fcompile-fail%2Fkindck-impl-type-params-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fkindck-impl-type-params-2.rs?ref=cfdaca049a2451b62d3d403ef13b78d7a2f60816", "patch": "@@ -21,5 +21,5 @@ fn take_param<T:Foo>(foo: &T) { }\n fn main() {\n     let x: Box<_> = box 3;\n     take_param(&x);\n-    //~^ ERROR `Box<_>: std::marker::Copy` is not satisfied\n+    //~^ ERROR `Box<{numeric}>: std::marker::Copy` is not satisfied\n }"}, {"sha": "30386a589837abe6b7aee754e58dff23172ce616", "filename": "src/test/compile-fail/match-range-fail.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cfdaca049a2451b62d3d403ef13b78d7a2f60816/src%2Ftest%2Fcompile-fail%2Fmatch-range-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfdaca049a2451b62d3d403ef13b78d7a2f60816/src%2Ftest%2Fcompile-fail%2Fmatch-range-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmatch-range-fail.rs?ref=cfdaca049a2451b62d3d403ef13b78d7a2f60816", "patch": "@@ -20,7 +20,7 @@ fn main() {\n         10 ... \"what\" => ()\n     };\n     //~^^ ERROR only char and numeric types are allowed in range\n-    //~| start type: _\n+    //~| start type: {numeric}\n     //~| end type: &'static str\n \n     match 5 {"}, {"sha": "94ac49e8f60d3f1c6628512f76f107462272559b", "filename": "src/test/compile-fail/match-vec-mismatch.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cfdaca049a2451b62d3d403ef13b78d7a2f60816/src%2Ftest%2Fcompile-fail%2Fmatch-vec-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfdaca049a2451b62d3d403ef13b78d7a2f60816/src%2Ftest%2Fcompile-fail%2Fmatch-vec-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmatch-vec-mismatch.rs?ref=cfdaca049a2451b62d3d403ef13b78d7a2f60816", "patch": "@@ -18,7 +18,7 @@ fn main() {\n     };\n \n     match &[0, 1, 2] {\n-        [..] => {} //~ ERROR expected an array or slice, found `&[_; 3]`\n+        [..] => {} //~ ERROR expected an array or slice, found `&[{numeric}; 3]`\n     };\n \n     match &[0, 1, 2] {"}, {"sha": "5596fb7c807997e6a51aaeac191adac9edd49c25", "filename": "src/test/compile-fail/method-self-arg-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cfdaca049a2451b62d3d403ef13b78d7a2f60816/src%2Ftest%2Fcompile-fail%2Fmethod-self-arg-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfdaca049a2451b62d3d403ef13b78d7a2f60816/src%2Ftest%2Fcompile-fail%2Fmethod-self-arg-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmethod-self-arg-1.rs?ref=cfdaca049a2451b62d3d403ef13b78d7a2f60816", "patch": "@@ -24,6 +24,6 @@ fn main() {\n                  //~| expected &-ptr, found struct `Foo`\n     Foo::bar(&42); //~  ERROR mismatched types\n                       //~| expected type `&Foo`\n-                      //~| found type `&_`\n+                      //~| found type `&{numeric}`\n                       //~| expected struct `Foo`, found integral variable\n }"}, {"sha": "d1fd0057d294795361ecebf18d5fd174fdd60060", "filename": "src/test/compile-fail/mut-pattern-mismatched.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cfdaca049a2451b62d3d403ef13b78d7a2f60816/src%2Ftest%2Fcompile-fail%2Fmut-pattern-mismatched.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfdaca049a2451b62d3d403ef13b78d7a2f60816/src%2Ftest%2Fcompile-fail%2Fmut-pattern-mismatched.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmut-pattern-mismatched.rs?ref=cfdaca049a2451b62d3d403ef13b78d7a2f60816", "patch": "@@ -14,7 +14,7 @@ fn main() {\n     // (separate lines to ensure the spans are accurate)\n \n      let &_ //~  ERROR mismatched types\n-            //~| expected type `&mut _`\n+            //~| expected type `&mut {numeric}`\n             //~| found type `&_`\n             //~| values differ in mutability\n         = foo;\n@@ -23,7 +23,7 @@ fn main() {\n     let bar = &1;\n     let &_ = bar;\n     let &mut _ //~  ERROR mismatched types\n-               //~| expected type `&_`\n+               //~| expected type `&{numeric}`\n                //~| found type `&mut _`\n                //~| values differ in mutability\n          = bar;"}, {"sha": "7c364e8d6fb561e5d0668452eb9fac79b9472c27", "filename": "src/test/compile-fail/no_send-rc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cfdaca049a2451b62d3d403ef13b78d7a2f60816/src%2Ftest%2Fcompile-fail%2Fno_send-rc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfdaca049a2451b62d3d403ef13b78d7a2f60816/src%2Ftest%2Fcompile-fail%2Fno_send-rc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fno_send-rc.rs?ref=cfdaca049a2451b62d3d403ef13b78d7a2f60816", "patch": "@@ -15,5 +15,5 @@ fn bar<T: Send>(_: T) {}\n fn main() {\n     let x = Rc::new(5);\n     bar(x);\n-    //~^ ERROR `std::rc::Rc<_>: std::marker::Send` is not satisfied\n+    //~^ ERROR `std::rc::Rc<{numeric}>: std::marker::Send` is not satisfied\n }"}, {"sha": "7d69eca5ad58f9be952aac390405c104cce3f68c", "filename": "src/test/compile-fail/range-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cfdaca049a2451b62d3d403ef13b78d7a2f60816/src%2Ftest%2Fcompile-fail%2Frange-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfdaca049a2451b62d3d403ef13b78d7a2f60816/src%2Ftest%2Fcompile-fail%2Frange-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Frange-1.rs?ref=cfdaca049a2451b62d3d403ef13b78d7a2f60816", "patch": "@@ -23,5 +23,5 @@ pub fn main() {\n     // Unsized type.\n     let arr: &[_] = &[1, 2, 3];\n     let range = *arr..;\n-    //~^ ERROR `[_]: std::marker::Sized` is not satisfied\n+    //~^ ERROR `[{numeric}]: std::marker::Sized` is not satisfied\n }"}, {"sha": "1bdd24abe8183331ad3f9acf5d91794e4c7b1ff0", "filename": "src/test/compile-fail/repeat_count.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cfdaca049a2451b62d3d403ef13b78d7a2f60816/src%2Ftest%2Fcompile-fail%2Frepeat_count.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfdaca049a2451b62d3d403ef13b78d7a2f60816/src%2Ftest%2Fcompile-fail%2Frepeat_count.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Frepeat_count.rs?ref=cfdaca049a2451b62d3d403ef13b78d7a2f60816", "patch": "@@ -28,7 +28,7 @@ fn main() {\n     let d = [0; 0.5];\n     //~^ ERROR mismatched types\n     //~| expected type `usize`\n-    //~| found type `_`\n+    //~| found type `{numeric}`\n     //~| expected usize, found floating-point variable\n     //~| ERROR expected usize for repeat count, found float [E0306]\n     let e = [0; \"foo\"];"}, {"sha": "589876a7f5ff10a9126f1ba6f31af7f4b221c0d2", "filename": "src/test/compile-fail/slightly-nice-generic-literal-messages.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cfdaca049a2451b62d3d403ef13b78d7a2f60816/src%2Ftest%2Fcompile-fail%2Fslightly-nice-generic-literal-messages.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfdaca049a2451b62d3d403ef13b78d7a2f60816/src%2Ftest%2Fcompile-fail%2Fslightly-nice-generic-literal-messages.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fslightly-nice-generic-literal-messages.rs?ref=cfdaca049a2451b62d3d403ef13b78d7a2f60816", "patch": "@@ -16,8 +16,8 @@ fn main() {\n     match Foo(1.1, marker::PhantomData) {\n         1 => {}\n     //~^ ERROR mismatched types\n-    //~| expected type `Foo<_, _>`\n-    //~| found type `_`\n+    //~| expected type `Foo<{numeric}, _>`\n+    //~| found type `{numeric}`\n     //~| expected struct `Foo`, found integral variable\n     }\n "}, {"sha": "1fb93bd790912883df8eaf2af51cd80b5605faac", "filename": "src/test/compile-fail/str-idx.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cfdaca049a2451b62d3d403ef13b78d7a2f60816/src%2Ftest%2Fcompile-fail%2Fstr-idx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfdaca049a2451b62d3d403ef13b78d7a2f60816/src%2Ftest%2Fcompile-fail%2Fstr-idx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fstr-idx.rs?ref=cfdaca049a2451b62d3d403ef13b78d7a2f60816", "patch": "@@ -10,5 +10,5 @@\n \n pub fn main() {\n     let s: &str = \"hello\";\n-    let c: u8 = s[4]; //~ ERROR `str: std::ops::Index<_>` is not satisfied\n+    let c: u8 = s[4]; //~ ERROR `str: std::ops::Index<{numeric}>` is not satisfied\n }"}, {"sha": "9624af488dd89ef8cce18f7974ba3772a437a25a", "filename": "src/test/compile-fail/struct-base-wrong-type-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cfdaca049a2451b62d3d403ef13b78d7a2f60816/src%2Ftest%2Fcompile-fail%2Fstruct-base-wrong-type-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfdaca049a2451b62d3d403ef13b78d7a2f60816/src%2Ftest%2Fcompile-fail%2Fstruct-base-wrong-type-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fstruct-base-wrong-type-2.rs?ref=cfdaca049a2451b62d3d403ef13b78d7a2f60816", "patch": "@@ -24,6 +24,6 @@ fn main() {\n                                //~| expected struct `Foo`, found struct `Bar`\n     let f__isize = Foo { a: 2, ..4 }; //~  ERROR mismatched types\n                                  //~| expected type `Foo`\n-                                 //~| found type `_`\n+                                 //~| found type `{numeric}`\n                                  //~| expected struct `Foo`, found integral variable\n }"}, {"sha": "89b57f3dcd325f9498172bc0a39d13f5be0be2d4", "filename": "src/test/compile-fail/struct-base-wrong-type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cfdaca049a2451b62d3d403ef13b78d7a2f60816/src%2Ftest%2Fcompile-fail%2Fstruct-base-wrong-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfdaca049a2451b62d3d403ef13b78d7a2f60816/src%2Ftest%2Fcompile-fail%2Fstruct-base-wrong-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fstruct-base-wrong-type.rs?ref=cfdaca049a2451b62d3d403ef13b78d7a2f60816", "patch": "@@ -23,7 +23,7 @@ static foo: Foo = Foo { a: 2, ..bar }; //~  ERROR mismatched types\n                                        //~| expected struct `Foo`, found struct `Bar`\n static foo_i: Foo = Foo { a: 2, ..4 }; //~  ERROR mismatched types\n                                        //~| expected type `Foo`\n-                                       //~| found type `_`\n+                                       //~| found type `{numeric}`\n                                        //~| expected struct `Foo`, found integral variable\n \n fn main() {"}, {"sha": "97a99cb3ce7ccf6d2e7998bb643bed0f66283e2f", "filename": "src/test/compile-fail/traits-inductive-overflow-simultaneous.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cfdaca049a2451b62d3d403ef13b78d7a2f60816/src%2Ftest%2Fcompile-fail%2Ftraits-inductive-overflow-simultaneous.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfdaca049a2451b62d3d403ef13b78d7a2f60816/src%2Ftest%2Fcompile-fail%2Ftraits-inductive-overflow-simultaneous.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftraits-inductive-overflow-simultaneous.rs?ref=cfdaca049a2451b62d3d403ef13b78d7a2f60816", "patch": "@@ -26,5 +26,5 @@ fn is_ee<T: Combo>(t: T) {\n \n fn main() {\n     is_ee(4);\n-    //~^ ERROR overflow evaluating the requirement `_: Tweedle\n+    //~^ ERROR overflow evaluating the requirement `{numeric}: Tweedle\n }"}, {"sha": "09dc9aaf000e85cd666e63e7beee33a0918a96cc", "filename": "src/test/compile-fail/tuple-arity-mismatch.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cfdaca049a2451b62d3d403ef13b78d7a2f60816/src%2Ftest%2Fcompile-fail%2Ftuple-arity-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfdaca049a2451b62d3d403ef13b78d7a2f60816/src%2Ftest%2Fcompile-fail%2Ftuple-arity-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftuple-arity-mismatch.rs?ref=cfdaca049a2451b62d3d403ef13b78d7a2f60816", "patch": "@@ -16,7 +16,7 @@ fn main() {\n     let y = first ((1,2.0,3));\n     //~^ ERROR mismatched types\n     //~| expected type `(isize, f64)`\n-    //~| found type `(isize, f64, _)`\n+    //~| found type `(isize, f64, {numeric})`\n     //~| expected a tuple with 2 elements, found one with 3 elements\n \n     let y = first ((1,));"}, {"sha": "4a9d59ea0ed7ffa26de98c42db71ee188817895f", "filename": "src/test/compile-fail/tuple-index-out-of-bounds.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cfdaca049a2451b62d3d403ef13b78d7a2f60816/src%2Ftest%2Fcompile-fail%2Ftuple-index-out-of-bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfdaca049a2451b62d3d403ef13b78d7a2f60816/src%2Ftest%2Fcompile-fail%2Ftuple-index-out-of-bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftuple-index-out-of-bounds.rs?ref=cfdaca049a2451b62d3d403ef13b78d7a2f60816", "patch": "@@ -20,5 +20,5 @@ fn main() {\n     tuple.0;\n     tuple.1;\n     tuple.2;\n-    //~^ ERROR attempted out-of-bounds tuple index `2` on type `(_, _)`\n+    //~^ ERROR attempted out-of-bounds tuple index `2` on type `({numeric}, {numeric})`\n }"}, {"sha": "681b3a559c2b8418c83d68dc587e780778eb6211", "filename": "src/test/compile-fail/type-mismatch-multiple.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cfdaca049a2451b62d3d403ef13b78d7a2f60816/src%2Ftest%2Fcompile-fail%2Ftype-mismatch-multiple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfdaca049a2451b62d3d403ef13b78d7a2f60816/src%2Ftest%2Fcompile-fail%2Ftype-mismatch-multiple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftype-mismatch-multiple.rs?ref=cfdaca049a2451b62d3d403ef13b78d7a2f60816", "patch": "@@ -13,7 +13,7 @@\n fn main() { let a: bool = 1; let b: i32 = true; }\n //~^ ERROR mismatched types\n //~| expected type `bool`\n-//~| found type `_`\n+//~| found type `{numeric}`\n //~| expected bool, found integral variable\n //~| ERROR mismatched types\n //~| expected i32, found bool"}, {"sha": "50b8ae7e48cdc19ae58c546627609a92ae305ccb", "filename": "src/test/compile-fail/typeck-unsafe-always-share.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cfdaca049a2451b62d3d403ef13b78d7a2f60816/src%2Ftest%2Fcompile-fail%2Ftypeck-unsafe-always-share.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfdaca049a2451b62d3d403ef13b78d7a2f60816/src%2Ftest%2Fcompile-fail%2Ftypeck-unsafe-always-share.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftypeck-unsafe-always-share.rs?ref=cfdaca049a2451b62d3d403ef13b78d7a2f60816", "patch": "@@ -27,7 +27,7 @@ fn test<T: Sync>(s: T) {}\n fn main() {\n     let us = UnsafeCell::new(MySync{u: UnsafeCell::new(0)});\n     test(us);\n-    //~^ ERROR `std::cell::UnsafeCell<MySync<_>>: std::marker::Sync` is not satisfied\n+    //~^ ERROR `std::cell::UnsafeCell<MySync<{numeric}>>: std::marker::Sync` is not satisfied\n \n     let uns = UnsafeCell::new(NoSync);\n     test(uns);"}, {"sha": "936b23075eb983606b2f2ec847aa0b99a03304c8", "filename": "src/test/compile-fail/vtable-res-trait-param.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cfdaca049a2451b62d3d403ef13b78d7a2f60816/src%2Ftest%2Fcompile-fail%2Fvtable-res-trait-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfdaca049a2451b62d3d403ef13b78d7a2f60816/src%2Ftest%2Fcompile-fail%2Fvtable-res-trait-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fvtable-res-trait-param.rs?ref=cfdaca049a2451b62d3d403ef13b78d7a2f60816", "patch": "@@ -24,7 +24,7 @@ impl TraitB for isize {\n \n fn call_it<B:TraitB>(b: B)  -> isize {\n     let y = 4;\n-    b.gimme_an_a(y) //~ ERROR `_: TraitA` is not satisfied\n+    b.gimme_an_a(y) //~ ERROR `{numeric}: TraitA` is not satisfied\n }\n \n fn main() {"}, {"sha": "3a8d9a16398d1d9e7029c4c13587d29f11ba1833", "filename": "src/test/ui/mismatched_types/issue-26480.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cfdaca049a2451b62d3d403ef13b78d7a2f60816/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-26480.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cfdaca049a2451b62d3d403ef13b78d7a2f60816/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-26480.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-26480.stderr?ref=cfdaca049a2451b62d3d403ef13b78d7a2f60816", "patch": "@@ -5,7 +5,7 @@ error[E0308]: mismatched types\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected u64, found usize\n $DIR/issue-26480.rs:38:5: 38:19 note: in this expansion of write! (defined in $DIR/issue-26480.rs)\n \n-error: non-scalar cast: `_` as `()`\n+error: non-scalar cast: `{numeric}` as `()`\n   --> $DIR/issue-26480.rs:33:19\n    |\n 33 |     ($x:expr) => ($x as ())"}]}