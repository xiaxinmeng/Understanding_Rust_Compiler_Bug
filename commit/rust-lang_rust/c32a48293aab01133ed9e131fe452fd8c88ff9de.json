{"sha": "c32a48293aab01133ed9e131fe452fd8c88ff9de", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMzMmE0ODI5M2FhYjAxMTMzZWQ5ZTEzMWZlNDUyZmQ4Yzg4ZmY5ZGU=", "commit": {"author": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2014-12-15T03:26:17Z"}, "committer": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2014-12-19T15:43:23Z"}, "message": "libcollections: use `#[deriving(Copy)]`", "tree": {"sha": "d33a9e381569cb745814cb69f6f50f0f2de0486d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d33a9e381569cb745814cb69f6f50f0f2de0486d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c32a48293aab01133ed9e131fe452fd8c88ff9de", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c32a48293aab01133ed9e131fe452fd8c88ff9de", "html_url": "https://github.com/rust-lang/rust/commit/c32a48293aab01133ed9e131fe452fd8c88ff9de", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c32a48293aab01133ed9e131fe452fd8c88ff9de/comments", "author": null, "committer": null, "parents": [{"sha": "bd90b936d73c0ea2c261cd8e7b9c43764cb2da05", "url": "https://api.github.com/repos/rust-lang/rust/commits/bd90b936d73c0ea2c261cd8e7b9c43764cb2da05", "html_url": "https://github.com/rust-lang/rust/commit/bd90b936d73c0ea2c261cd8e7b9c43764cb2da05"}], "stats": {"total": 22, "additions": 7, "deletions": 15}, "files": [{"sha": "be99c4c0bc724dba40268f44ef60f143988d0e2a", "filename": "src/libcollections/binary_heap.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c32a48293aab01133ed9e131fe452fd8c88ff9de/src%2Flibcollections%2Fbinary_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c32a48293aab01133ed9e131fe452fd8c88ff9de/src%2Flibcollections%2Fbinary_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbinary_heap.rs?ref=c32a48293aab01133ed9e131fe452fd8c88ff9de", "patch": "@@ -29,14 +29,12 @@\n //! use std::collections::BinaryHeap;\n //! use std::uint;\n //!\n-//! #[deriving(Eq, PartialEq)]\n+//! #[deriving(Copy, Eq, PartialEq)]\n //! struct State {\n //!     cost: uint,\n //!     position: uint\n //! }\n //!\n-//! impl Copy for State {}\n-//!\n //! // The priority queue depends on `Ord`.\n //! // Explicitly implement the trait so the queue becomes a min-heap\n //! // instead of a max-heap."}, {"sha": "caa2051c3f9ca9b13d2069106e30e47ff136cc50", "filename": "src/libcollections/enum_set.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c32a48293aab01133ed9e131fe452fd8c88ff9de/src%2Flibcollections%2Fenum_set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c32a48293aab01133ed9e131fe452fd8c88ff9de/src%2Flibcollections%2Fenum_set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fenum_set.rs?ref=c32a48293aab01133ed9e131fe452fd8c88ff9de", "patch": "@@ -301,14 +301,12 @@ mod test {\n \n     use super::{EnumSet, CLike};\n \n-    #[deriving(PartialEq, Show)]\n+    #[deriving(Copy, PartialEq, Show)]\n     #[repr(uint)]\n     enum Foo {\n         A, B, C\n     }\n \n-    impl Copy for Foo {}\n-\n     impl CLike for Foo {\n         fn to_uint(&self) -> uint {\n             *self as uint\n@@ -507,6 +505,7 @@ mod test {\n     #[should_fail]\n     fn test_overflow() {\n         #[allow(dead_code)]\n+        #[deriving(Copy)]\n         #[repr(uint)]\n         enum Bar {\n             V00, V01, V02, V03, V04, V05, V06, V07, V08, V09,\n@@ -518,8 +517,6 @@ mod test {\n             V60, V61, V62, V63, V64, V65, V66, V67, V68, V69,\n         }\n \n-        impl Copy for Bar {}\n-\n         impl CLike for Bar {\n             fn to_uint(&self) -> uint {\n                 *self as uint"}, {"sha": "3bf10192e596388758f9b5315174879b1c3fdaf9", "filename": "src/libcollections/slice.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c32a48293aab01133ed9e131fe452fd8c88ff9de/src%2Flibcollections%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c32a48293aab01133ed9e131fe452fd8c88ff9de/src%2Flibcollections%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fslice.rs?ref=c32a48293aab01133ed9e131fe452fd8c88ff9de", "patch": "@@ -91,7 +91,7 @@ use alloc::boxed::Box;\n use core::borrow::{BorrowFrom, BorrowFromMut, ToOwned};\n use core::cmp;\n use core::iter::{range_step, MultiplicativeIterator};\n-use core::kinds::{Copy, Sized};\n+use core::kinds::Sized;\n use core::mem::size_of;\n use core::mem;\n use core::ops::FnMut;\n@@ -177,18 +177,16 @@ impl ElementSwaps {\n     }\n }\n \n+#[deriving(Copy)]\n enum Direction { Pos, Neg }\n \n-impl Copy for Direction {}\n-\n /// An `Index` and `Direction` together.\n+#[deriving(Copy)]\n struct SizeDirection {\n     size: uint,\n     dir: Direction,\n }\n \n-impl Copy for SizeDirection {}\n-\n impl Iterator<(uint, uint)> for ElementSwaps {\n     #[inline]\n     fn next(&mut self) -> Option<(uint, uint)> {"}, {"sha": "e10f5a9fed1888ba02b00d26ec92335ea1ff49e2", "filename": "src/libcore/hash/sip.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c32a48293aab01133ed9e131fe452fd8c88ff9de/src%2Flibcore%2Fhash%2Fsip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c32a48293aab01133ed9e131fe452fd8c88ff9de/src%2Flibcore%2Fhash%2Fsip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fhash%2Fsip.rs?ref=c32a48293aab01133ed9e131fe452fd8c88ff9de", "patch": "@@ -30,6 +30,7 @@ use default::Default;\n use super::{Hash, Hasher, Writer};\n \n /// `SipState` computes a SipHash 2-4 hash over a stream of bytes.\n+#[deriving(Copy)]\n pub struct SipState {\n     k0: u64,\n     k1: u64,\n@@ -42,8 +43,6 @@ pub struct SipState {\n     ntail: uint,  // how many bytes in tail are valid\n }\n \n-impl Copy for SipState {}\n-\n // sadly, these macro definitions can't appear later,\n // because they're needed in the following defs;\n // this design could be improved."}]}