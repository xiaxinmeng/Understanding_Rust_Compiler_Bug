{"sha": "a3ea31b8466c283ff10037be0170802d4ef15d70", "node_id": "C_kwDOAAsO6NoAKGEzZWEzMWI4NDY2YzI4M2ZmMTAwMzdiZTAxNzA4MDJkNGVmMTVkNzA", "commit": {"author": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2022-07-28T08:39:19Z"}, "committer": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2022-07-28T08:39:19Z"}, "message": "Move output argument from ArchiveBuilder::new to .build()", "tree": {"sha": "8b2693349ed1ebb86a43c46dd29e6cea93b7a68a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8b2693349ed1ebb86a43c46dd29e6cea93b7a68a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a3ea31b8466c283ff10037be0170802d4ef15d70", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a3ea31b8466c283ff10037be0170802d4ef15d70", "html_url": "https://github.com/rust-lang/rust/commit/a3ea31b8466c283ff10037be0170802d4ef15d70", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a3ea31b8466c283ff10037be0170802d4ef15d70/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fe5cc380980935ed8c488923934b68e69c040bac", "url": "https://api.github.com/repos/rust-lang/rust/commits/fe5cc380980935ed8c488923934b68e69c040bac", "html_url": "https://github.com/rust-lang/rust/commit/fe5cc380980935ed8c488923934b68e69c040bac"}], "stats": {"total": 18, "additions": 7, "deletions": 11}, "files": [{"sha": "a8e94ad4b8d6c36c53cc50a8b0e4051889cbe5e6", "filename": "src/archive.rs", "status": "modified", "additions": 7, "deletions": 11, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/a3ea31b8466c283ff10037be0170802d4ef15d70/src%2Farchive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3ea31b8466c283ff10037be0170802d4ef15d70/src%2Farchive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Farchive.rs?ref=a3ea31b8466c283ff10037be0170802d4ef15d70", "patch": "@@ -8,7 +8,6 @@ use rustc_session::cstore::DllImport;\n \n struct ArchiveConfig<'a> {\n     sess: &'a Session,\n-    dst: PathBuf,\n     use_native_ar: bool,\n     use_gnu_style_archive: bool,\n }\n@@ -31,10 +30,9 @@ pub struct ArArchiveBuilder<'a> {\n }\n \n impl<'a> ArchiveBuilder<'a> for ArArchiveBuilder<'a> {\n-    fn new(sess: &'a Session, output: &Path) -> Self {\n+    fn new(sess: &'a Session) -> Self {\n         let config = ArchiveConfig {\n             sess,\n-            dst: output.to_path_buf(),\n             use_native_ar: false,\n             // FIXME test for linux and System V derivatives instead\n             use_gnu_style_archive: sess.target.options.archive_format == \"gnu\",\n@@ -77,7 +75,7 @@ impl<'a> ArchiveBuilder<'a> for ArArchiveBuilder<'a> {\n         Ok(())\n     }\n \n-    fn build(mut self) -> bool {\n+    fn build(mut self, output: &Path) -> bool {\n         use std::process::Command;\n \n         fn add_file_using_ar(archive: &Path, file: &Path) {\n@@ -97,17 +95,17 @@ impl<'a> ArchiveBuilder<'a> for ArArchiveBuilder<'a> {\n         }\n \n         let mut builder = if self.config.use_native_ar {\n-            BuilderKind::NativeAr(&self.config.dst)\n+            BuilderKind::NativeAr(output)\n         } else if self.config.use_gnu_style_archive {\n             BuilderKind::Gnu(ar::GnuBuilder::new(\n-                File::create(&self.config.dst).unwrap(),\n+                File::create(output).unwrap(),\n                 self.entries\n                     .iter()\n                     .map(|(name, _)| name.as_bytes().to_vec())\n                     .collect(),\n             ))\n         } else {\n-            BuilderKind::Bsd(ar::Builder::new(File::create(&self.config.dst).unwrap()))\n+            BuilderKind::Bsd(ar::Builder::new(File::create(output).unwrap()))\n         };\n \n         let any_members = !self.entries.is_empty();\n@@ -164,10 +162,8 @@ impl<'a> ArchiveBuilder<'a> for ArArchiveBuilder<'a> {\n         std::mem::drop(builder);\n \n         // Run ranlib to be able to link the archive\n-        let status = std::process::Command::new(\"ranlib\")\n-            .arg(self.config.dst)\n-            .status()\n-            .expect(\"Couldn't run ranlib\");\n+        let status =\n+            std::process::Command::new(\"ranlib\").arg(output).status().expect(\"Couldn't run ranlib\");\n \n         if !status.success() {\n             self.config.sess.fatal(&format!(\"Ranlib exited with code {:?}\", status.code()));"}]}