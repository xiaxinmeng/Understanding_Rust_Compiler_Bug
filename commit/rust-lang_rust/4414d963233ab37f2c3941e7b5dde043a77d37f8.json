{"sha": "4414d963233ab37f2c3941e7b5dde043a77d37f8", "node_id": "C_kwDOAAsO6NoAKDQ0MTRkOTYzMjMzYWIzN2YyYzM5NDFlN2I1ZGRlMDQzYTc3ZDM3Zjg", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2021-11-25T22:24:47Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2021-11-25T22:26:37Z"}, "message": "implement shl and shr SIMD intrinsics", "tree": {"sha": "534fdba707f249ba340e23669ad6c752fa4029c1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/534fdba707f249ba340e23669ad6c752fa4029c1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4414d963233ab37f2c3941e7b5dde043a77d37f8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4414d963233ab37f2c3941e7b5dde043a77d37f8", "html_url": "https://github.com/rust-lang/rust/commit/4414d963233ab37f2c3941e7b5dde043a77d37f8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4414d963233ab37f2c3941e7b5dde043a77d37f8/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a534bbbf8aeb14d2ee1c2d167e6e6073a114bf69", "url": "https://api.github.com/repos/rust-lang/rust/commits/a534bbbf8aeb14d2ee1c2d167e6e6073a114bf69", "html_url": "https://github.com/rust-lang/rust/commit/a534bbbf8aeb14d2ee1c2d167e6e6073a114bf69"}], "stats": {"total": 57, "additions": 54, "deletions": 3}, "files": [{"sha": "f80062668f3ebbfb851ea396d3100264cc62a792", "filename": "src/shims/intrinsics.rs", "status": "modified", "additions": 22, "deletions": 3, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/4414d963233ab37f2c3941e7b5dde043a77d37f8/src%2Fshims%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4414d963233ab37f2c3941e7b5dde043a77d37f8/src%2Fshims%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fintrinsics.rs?ref=4414d963233ab37f2c3941e7b5dde043a77d37f8", "patch": "@@ -306,7 +306,14 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             }\n \n             // SIMD operations\n-            \"simd_add\" | \"simd_sub\" | \"simd_mul\" | \"simd_div\" | \"simd_rem\" => {\n+            #[rustfmt::skip]\n+            | \"simd_add\"\n+            | \"simd_sub\"\n+            | \"simd_mul\"\n+            | \"simd_div\"\n+            | \"simd_rem\"\n+            | \"simd_shl\"\n+            | \"simd_shr\" => {\n                 let &[ref left, ref right] = check_arg_count(args)?;\n                 let (left, left_len) = this.operand_to_simd(left)?;\n                 let (right, right_len) = this.operand_to_simd(right)?;\n@@ -321,14 +328,26 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                     \"simd_mul\" => mir::BinOp::Mul,\n                     \"simd_div\" => mir::BinOp::Div,\n                     \"simd_rem\" => mir::BinOp::Rem,\n+                    \"simd_shl\" => mir::BinOp::Shl,\n+                    \"simd_shr\" => mir::BinOp::Shr,\n                     _ => unreachable!(),\n                 };\n \n                 for i in 0..dest_len {\n                     let left = this.read_immediate(&this.mplace_index(&left, i)?.into())?;\n                     let right = this.read_immediate(&this.mplace_index(&right, i)?.into())?;\n-                    let dest = this.mplace_index(&dest, i)?.into();\n-                    this.binop_ignore_overflow(op, &left, &right, &dest)?;\n+                    let dest = this.mplace_index(&dest, i)?;\n+                    let (val, overflowed, ty) = this.overflowing_binary_op(op, &left, &right)?;\n+                    assert_eq!(ty, dest.layout.ty);\n+                    if matches!(op, mir::BinOp::Shl | mir::BinOp::Shr) {\n+                        // Shifts have extra UB as SIMD operations that the MIR binop does not have.\n+                        // See <https://github.com/rust-lang/rust/issues/91237>.\n+                        if overflowed {\n+                            let r_val = right.to_scalar()?.to_bits(right.layout.size)?;\n+                            throw_ub_format!(\"overflowing shift by {} in `{}` in SIMD lane {}\", r_val, intrinsic_name, i);\n+                        }\n+                    }\n+                    this.write_scalar(val, &dest.into())?;\n                 }\n             }\n "}, {"sha": "b973386f1b5c8c6e29f874b5dc1d00157dd30260", "filename": "tests/compile-fail/intrinsics/simd-shl-too-far.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/4414d963233ab37f2c3941e7b5dde043a77d37f8/tests%2Fcompile-fail%2Fintrinsics%2Fsimd-shl-too-far.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4414d963233ab37f2c3941e7b5dde043a77d37f8/tests%2Fcompile-fail%2Fintrinsics%2Fsimd-shl-too-far.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fintrinsics%2Fsimd-shl-too-far.rs?ref=4414d963233ab37f2c3941e7b5dde043a77d37f8", "patch": "@@ -0,0 +1,15 @@\n+#![feature(platform_intrinsics, repr_simd)]\n+\n+extern \"platform-intrinsic\" {\n+    pub(crate) fn simd_shl<T>(x: T, y: T) -> T;\n+}\n+\n+#[repr(simd)]\n+#[allow(non_camel_case_types)]\n+struct i32x2(i32, i32);\n+\n+fn main() { unsafe {\n+    let x = i32x2(1, 1);\n+    let y = i32x2(100, 0);\n+    simd_shl(x, y); //~ERROR overflowing shift by 100 in `simd_shl` in SIMD lane 0\n+} }"}, {"sha": "0b4eb8c116797a607b1ca8999983771ecc4056a2", "filename": "tests/compile-fail/intrinsics/simd-shr-too-far.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/4414d963233ab37f2c3941e7b5dde043a77d37f8/tests%2Fcompile-fail%2Fintrinsics%2Fsimd-shr-too-far.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4414d963233ab37f2c3941e7b5dde043a77d37f8/tests%2Fcompile-fail%2Fintrinsics%2Fsimd-shr-too-far.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fintrinsics%2Fsimd-shr-too-far.rs?ref=4414d963233ab37f2c3941e7b5dde043a77d37f8", "patch": "@@ -0,0 +1,15 @@\n+#![feature(platform_intrinsics, repr_simd)]\n+\n+extern \"platform-intrinsic\" {\n+    pub(crate) fn simd_shr<T>(x: T, y: T) -> T;\n+}\n+\n+#[repr(simd)]\n+#[allow(non_camel_case_types)]\n+struct i32x2(i32, i32);\n+\n+fn main() { unsafe {\n+    let x = i32x2(1, 1);\n+    let y = i32x2(20, 40);\n+    simd_shr(x, y); //~ERROR overflowing shift by 40 in `simd_shr` in SIMD lane 1\n+} }"}, {"sha": "5d3337661878015bf2e5d1dc4421f04ab9fb7e97", "filename": "tests/run-pass/portable-simd.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4414d963233ab37f2c3941e7b5dde043a77d37f8/tests%2Frun-pass%2Fportable-simd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4414d963233ab37f2c3941e7b5dde043a77d37f8/tests%2Frun-pass%2Fportable-simd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fportable-simd.rs?ref=4414d963233ab37f2c3941e7b5dde043a77d37f8", "patch": "@@ -21,6 +21,8 @@ fn simd_ops_i32() {\n     assert_eq!(a / b, i32x4::from_array([10, 5, 3, 2]));\n     assert_eq!(a / 2, i32x4::splat(5));\n     assert_eq!(a % b, i32x4::from_array([0, 0, 1, 2]));\n+    assert_eq!(b << 2, i32x4::from_array([4, 8, 12, 16]));\n+    assert_eq!(b >> 1, i32x4::from_array([0, 1, 1, 2]));\n }\n \n fn main() {"}]}