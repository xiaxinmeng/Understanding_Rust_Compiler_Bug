{"sha": "a08c47310c7d49cbdc5d7afb38408ba519967ecd", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEwOGM0NzMxMGM3ZDQ5Y2JkYzVkN2FmYjM4NDA4YmE1MTk5NjdlY2Q=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-05-07T16:03:59Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-05-07T16:03:59Z"}, "message": "Auto merge of #71985 - Dylan-DPC:rollup-9ceqump, r=Dylan-DPC\n\nRollup of 6 pull requests\n\nSuccessful merges:\n\n - #71938 (Use trait_object_dummy_self instead of err)\n - #71952 (Add some regression tests)\n - #71959 (tests: Fix warnings in `rust_test_helpers.c`)\n - #71962 (Grammar)\n - #71972 (use hex for pointers in Miri error messages)\n - #71980 (Allow a few warnings.)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "7590b52787e44e129f2b5ac8281ef5d87b80297b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7590b52787e44e129f2b5ac8281ef5d87b80297b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a08c47310c7d49cbdc5d7afb38408ba519967ecd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a08c47310c7d49cbdc5d7afb38408ba519967ecd", "html_url": "https://github.com/rust-lang/rust/commit/a08c47310c7d49cbdc5d7afb38408ba519967ecd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a08c47310c7d49cbdc5d7afb38408ba519967ecd/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4802f097c86452cd2e09d44e88dbcb8e08266552", "url": "https://api.github.com/repos/rust-lang/rust/commits/4802f097c86452cd2e09d44e88dbcb8e08266552", "html_url": "https://github.com/rust-lang/rust/commit/4802f097c86452cd2e09d44e88dbcb8e08266552"}, {"sha": "c818e84821e5babc18ac222220b3171247eb974b", "url": "https://api.github.com/repos/rust-lang/rust/commits/c818e84821e5babc18ac222220b3171247eb974b", "html_url": "https://github.com/rust-lang/rust/commit/c818e84821e5babc18ac222220b3171247eb974b"}], "stats": {"total": 152, "additions": 134, "deletions": 18}, "files": [{"sha": "26077f3c8d15045820c9912e54d4facd790f9954", "filename": "src/liballoc/fmt.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/a08c47310c7d49cbdc5d7afb38408ba519967ecd/src%2Fliballoc%2Ffmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a08c47310c7d49cbdc5d7afb38408ba519967ecd/src%2Fliballoc%2Ffmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ffmt.rs?ref=a08c47310c7d49cbdc5d7afb38408ba519967ecd", "patch": "@@ -50,8 +50,8 @@\n //! The internal iterator over the argument has not been advanced by the time\n //! the first `{}` is seen, so it prints the first argument. Then upon reaching\n //! the second `{}`, the iterator has advanced forward to the second argument.\n-//! Essentially, parameters which explicitly name their argument do not affect\n-//! parameters which do not name an argument in terms of positional specifiers.\n+//! Essentially, parameters that explicitly name their argument do not affect\n+//! parameters that do not name an argument in terms of positional specifiers.\n //!\n //! A format string is required to use all of its arguments, otherwise it is a\n //! compile-time error. You may refer to the same argument more than once in the\n@@ -60,7 +60,7 @@\n //! ## Named parameters\n //!\n //! Rust itself does not have a Python-like equivalent of named parameters to a\n-//! function, but the [`format!`] macro is a syntax extension which allows it to\n+//! function, but the [`format!`] macro is a syntax extension that allows it to\n //! leverage named parameters. Named parameters are listed at the end of the\n //! argument list and have the syntax:\n //!\n@@ -77,7 +77,7 @@\n //! ```\n //!\n //! It is not valid to put positional parameters (those without names) after\n-//! arguments which have names. Like with positional parameters, it is not\n+//! arguments that have names. Like with positional parameters, it is not\n //! valid to provide named parameters that are unused by the format string.\n //!\n //! # Formatting Parameters\n@@ -130,7 +130,7 @@\n //!\n //! The default [fill/alignment](#fillalignment) for non-numerics is a space and\n //! left-aligned. The\n-//! defaults for numeric formatters is also a space but with right-alignment. If\n+//! default for numeric formatters is also a space character but with right-alignment. If\n //! the `0` flag (see below) is specified for numerics, then the implicit fill character is\n //! `0`.\n //!\n@@ -161,7 +161,7 @@\n //!         `Signed` trait. This flag indicates that the correct sign (`+` or `-`)\n //!         should always be printed.\n //! * `-` - Currently not used\n-//! * `#` - This flag is indicates that the \"alternate\" form of printing should\n+//! * `#` - This flag indicates that the \"alternate\" form of printing should\n //!         be used. The alternate forms are:\n //!     * `#?` - pretty-print the [`Debug`] formatting\n //!     * `#x` - precedes the argument with a `0x`\n@@ -173,9 +173,9 @@\n //!         like `{:08}` would yield `00000001` for the integer `1`, while the\n //!         same format would yield `-0000001` for the integer `-1`. Notice that\n //!         the negative version has one fewer zero than the positive version.\n-//!         Note that padding zeroes are always placed after the sign (if any)\n+//!         Note that padding zeros are always placed after the sign (if any)\n //!         and before the digits. When used together with the `#` flag, a similar\n-//!         rule applies: padding zeroes are inserted after the prefix but before\n+//!         rule applies: padding zeros are inserted after the prefix but before\n //!         the digits. The prefix is included in the total width.\n //!\n //! ## Precision\n@@ -251,7 +251,7 @@\n //!\n //! In some programming languages, the behavior of string formatting functions\n //! depends on the operating system's locale setting. The format functions\n-//! provided by Rust's standard library do not have any concept of locale, and\n+//! provided by Rust's standard library do not have any concept of locale and\n //! will produce the same results on all systems regardless of user\n //! configuration.\n //!\n@@ -470,7 +470,7 @@\n //!\n //! ### `format_args!`\n //!\n-//! This is a curious macro which is used to safely pass around\n+//! This is a curious macro used to safely pass around\n //! an opaque object describing the format string. This object\n //! does not require any heap allocations to create, and it only\n //! references information on the stack. Under the hood, all of\n@@ -495,7 +495,7 @@\n //! This structure can then be passed to the [`write`] and [`format`] functions\n //! inside this module in order to process the format string.\n //! The goal of this macro is to even further prevent intermediate allocations\n-//! when dealing formatting strings.\n+//! when dealing with formatting strings.\n //!\n //! For example, a logging library could use the standard formatting syntax, but\n //! it would internally pass around this structure until it has been determined"}, {"sha": "eb743675d91d3eceb843ff89d54fc3f42332bf9c", "filename": "src/librustc_mir/interpret/validity.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a08c47310c7d49cbdc5d7afb38408ba519967ecd/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a08c47310c7d49cbdc5d7afb38408ba519967ecd/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs?ref=a08c47310c7d49cbdc5d7afb38408ba519967ecd", "patch": "@@ -321,11 +321,12 @@ impl<'rt, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> ValidityVisitor<'rt, 'mir, '\n                 try_validation!(\n                     self.ecx.read_drop_type_from_vtable(vtable),\n                     self.path,\n-                    err_ub!(InvalidDropFn(..)) |\n                     err_ub!(DanglingIntPointer(..)) |\n                     err_ub!(InvalidFunctionPointer(..)) |\n                     err_unsup!(ReadBytesAsPointer) =>\n-                        { \"invalid drop function pointer in vtable\" },\n+                        { \"invalid drop function pointer in vtable (not pointing to a function)\" },\n+                    err_ub!(InvalidDropFn(..)) =>\n+                        { \"invalid drop function pointer in vtable (function has incompatible signature)\" },\n                 );\n                 try_validation!(\n                     self.ecx.read_size_and_align_from_vtable(vtable),\n@@ -400,7 +401,7 @@ impl<'rt, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> ValidityVisitor<'rt, 'mir, '\n             err_ub!(DanglingIntPointer(0, _)) =>\n                 { \"a NULL {}\", kind },\n             err_ub!(DanglingIntPointer(i, _)) =>\n-                { \"a dangling {} (address {} is unallocated)\", kind, i },\n+                { \"a dangling {} (address 0x{:x} is unallocated)\", kind, i },\n             err_ub!(PointerOutOfBounds { .. }) =>\n                 { \"a dangling {} (going beyond the bounds of its allocation)\", kind },\n             err_unsup!(ReadBytesAsPointer) =>"}, {"sha": "035e5880dc52290ef284793a6b4bac6a02a21dca", "filename": "src/librustc_typeck/check/closure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a08c47310c7d49cbdc5d7afb38408ba519967ecd/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a08c47310c7d49cbdc5d7afb38408ba519967ecd/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs?ref=a08c47310c7d49cbdc5d7afb38408ba519967ecd", "patch": "@@ -178,7 +178,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         match expected_ty.kind {\n             ty::Dynamic(ref object_type, ..) => {\n                 let sig = object_type.projection_bounds().find_map(|pb| {\n-                    let pb = pb.with_self_ty(self.tcx, self.tcx.types.err);\n+                    let pb = pb.with_self_ty(self.tcx, self.tcx.types.trait_object_dummy_self);\n                     self.deduce_sig_from_projection(None, &pb)\n                 });\n                 let kind = object_type"}, {"sha": "32c2ac43129bf21f746e2e0164a6c4a2f265e521", "filename": "src/libstd/sys/unix/ext/net.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a08c47310c7d49cbdc5d7afb38408ba519967ecd/src%2Flibstd%2Fsys%2Funix%2Fext%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a08c47310c7d49cbdc5d7afb38408ba519967ecd/src%2Flibstd%2Fsys%2Funix%2Fext%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fext%2Fnet.rs?ref=a08c47310c7d49cbdc5d7afb38408ba519967ecd", "patch": "@@ -7,6 +7,7 @@ use libc;\n \n // FIXME(#43348): Make libc adapt #[doc(cfg(...))] so we don't need these fake definitions here?\n #[cfg(not(unix))]\n+#[allow(non_camel_case_types)]\n mod libc {\n     pub use libc::c_int;\n     pub type socklen_t = u32;"}, {"sha": "40fa53d484f84885359183d42e5d3ce5b29d9a8c", "filename": "src/libstd/sys/unix/ext/raw.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a08c47310c7d49cbdc5d7afb38408ba519967ecd/src%2Flibstd%2Fsys%2Funix%2Fext%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a08c47310c7d49cbdc5d7afb38408ba519967ecd/src%2Flibstd%2Fsys%2Funix%2Fext%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fext%2Fraw.rs?ref=a08c47310c7d49cbdc5d7afb38408ba519967ecd", "patch": "@@ -11,10 +11,15 @@\n #![allow(deprecated)]\n \n #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+#[allow(non_camel_case_types)]\n pub type uid_t = u32;\n+\n #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+#[allow(non_camel_case_types)]\n pub type gid_t = u32;\n+\n #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+#[allow(non_camel_case_types)]\n pub type pid_t = i32;\n \n #[doc(inline)]"}, {"sha": "92b7dd4b7c516bc388bec727585953b6989944ba", "filename": "src/test/auxiliary/rust_test_helpers.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a08c47310c7d49cbdc5d7afb38408ba519967ecd/src%2Ftest%2Fauxiliary%2Frust_test_helpers.c", "raw_url": "https://github.com/rust-lang/rust/raw/a08c47310c7d49cbdc5d7afb38408ba519967ecd/src%2Ftest%2Fauxiliary%2Frust_test_helpers.c", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Frust_test_helpers.c?ref=a08c47310c7d49cbdc5d7afb38408ba519967ecd", "patch": "@@ -368,6 +368,7 @@ rust_dbg_unpack_option_u64(struct U8TaggedEnumOptionU64 o, uint64_t *into) {\n         return 0;\n     default:\n         assert(0 && \"unexpected tag\");\n+        return 0;\n     }\n }\n \n@@ -411,5 +412,6 @@ rust_dbg_unpack_option_u64u64(struct U8TaggedEnumOptionU64U64 o, uint64_t *a, ui\n         return 0;\n     default:\n         assert(0 && \"unexpected tag\");\n+        return 0;\n     }\n }"}, {"sha": "139a06ab53d05314a17bbbefacaa8c22d67f2895", "filename": "src/test/codegen/ffi-out-of-bounds-loads.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/a08c47310c7d49cbdc5d7afb38408ba519967ecd/src%2Ftest%2Fcodegen%2Fffi-out-of-bounds-loads.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a08c47310c7d49cbdc5d7afb38408ba519967ecd/src%2Ftest%2Fcodegen%2Fffi-out-of-bounds-loads.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fffi-out-of-bounds-loads.rs?ref=a08c47310c7d49cbdc5d7afb38408ba519967ecd", "patch": "@@ -0,0 +1,25 @@\n+// Regression test for #29988\n+\n+// compile-flags: -C no-prepopulate-passes\n+// only-x86_64\n+// ignore-windows\n+\n+#[repr(C)]\n+struct S {\n+    f1: i32,\n+    f2: i32,\n+    f3: i32,\n+}\n+\n+extern {\n+    fn foo(s: S);\n+}\n+\n+fn main() {\n+    let s = S { f1: 1, f2: 2, f3: 3 };\n+    unsafe {\n+        // CHECK: load { i64, i32 }, { i64, i32 }* {{.*}}, align 4\n+        // CHECK: call void @foo({ i64, i32 } {{.*}})\n+        foo(s);\n+    }\n+}"}, {"sha": "063ea81036b69d0972ce182636c84598f30e84b8", "filename": "src/test/ui/consts/const-eval/ub-wide-ptr.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a08c47310c7d49cbdc5d7afb38408ba519967ecd/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-wide-ptr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a08c47310c7d49cbdc5d7afb38408ba519967ecd/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-wide-ptr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-wide-ptr.stderr?ref=a08c47310c7d49cbdc5d7afb38408ba519967ecd", "patch": "@@ -170,23 +170,23 @@ error[E0080]: it is undefined behavior to use this value\n   --> $DIR/ub-wide-ptr.rs:109:1\n    |\n LL | const TRAIT_OBJ_BAD_DROP_FN_NULL: &dyn Trait = unsafe { mem::transmute((&92u8, &[0usize; 8])) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered invalid drop function pointer in vtable\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered invalid drop function pointer in vtable (not pointing to a function)\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n error[E0080]: it is undefined behavior to use this value\n   --> $DIR/ub-wide-ptr.rs:111:1\n    |\n LL | const TRAIT_OBJ_BAD_DROP_FN_INT: &dyn Trait = unsafe { mem::transmute((&92u8, &[1usize; 8])) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered invalid drop function pointer in vtable\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered invalid drop function pointer in vtable (not pointing to a function)\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n error[E0080]: it is undefined behavior to use this value\n   --> $DIR/ub-wide-ptr.rs:113:1\n    |\n LL | const TRAIT_OBJ_BAD_DROP_FN_NOT_FN_PTR: &dyn Trait = unsafe { mem::transmute((&92u8, &[&42u8; 8])) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered invalid drop function pointer in vtable\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered invalid drop function pointer in vtable (not pointing to a function)\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n "}, {"sha": "7977bddae7bcb39dc5efd61290baddfc4189142d", "filename": "src/test/ui/enum/issue-67945-1.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a08c47310c7d49cbdc5d7afb38408ba519967ecd/src%2Ftest%2Fui%2Fenum%2Fissue-67945-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a08c47310c7d49cbdc5d7afb38408ba519967ecd/src%2Ftest%2Fui%2Fenum%2Fissue-67945-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fenum%2Fissue-67945-1.rs?ref=a08c47310c7d49cbdc5d7afb38408ba519967ecd", "patch": "@@ -0,0 +1,8 @@\n+enum Bug<S> {\n+    Var = {\n+        let x: S = 0; //~ ERROR: mismatched types\n+        0\n+    },\n+}\n+\n+fn main() {}"}, {"sha": "6583fe13d0c6345524cc3a3e805b46c2eea72cc7", "filename": "src/test/ui/enum/issue-67945-1.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/a08c47310c7d49cbdc5d7afb38408ba519967ecd/src%2Ftest%2Fui%2Fenum%2Fissue-67945-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a08c47310c7d49cbdc5d7afb38408ba519967ecd/src%2Ftest%2Fui%2Fenum%2Fissue-67945-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fenum%2Fissue-67945-1.stderr?ref=a08c47310c7d49cbdc5d7afb38408ba519967ecd", "patch": "@@ -0,0 +1,17 @@\n+error[E0308]: mismatched types\n+  --> $DIR/issue-67945-1.rs:3:20\n+   |\n+LL | enum Bug<S> {\n+   |          - this type parameter\n+LL |     Var = {\n+LL |         let x: S = 0;\n+   |                -   ^ expected type parameter `S`, found integer\n+   |                |\n+   |                expected due to this\n+   |\n+   = note: expected type parameter `S`\n+                        found type `{integer}`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "16bd8530ab38c47a32220219c01cffd0d8f48f75", "filename": "src/test/ui/enum/issue-67945-2.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a08c47310c7d49cbdc5d7afb38408ba519967ecd/src%2Ftest%2Fui%2Fenum%2Fissue-67945-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a08c47310c7d49cbdc5d7afb38408ba519967ecd/src%2Ftest%2Fui%2Fenum%2Fissue-67945-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fenum%2Fissue-67945-2.rs?ref=a08c47310c7d49cbdc5d7afb38408ba519967ecd", "patch": "@@ -0,0 +1,9 @@\n+#![feature(type_ascription)]\n+\n+enum Bug<S> {\n+    Var = 0: S,\n+    //~^ ERROR: mismatched types\n+    //~| ERROR: mismatched types\n+}\n+\n+fn main() {}"}, {"sha": "c40506d59edd9ec8d76bb29ca7843b92b078d8bc", "filename": "src/test/ui/enum/issue-67945-2.stderr", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/a08c47310c7d49cbdc5d7afb38408ba519967ecd/src%2Ftest%2Fui%2Fenum%2Fissue-67945-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a08c47310c7d49cbdc5d7afb38408ba519967ecd/src%2Ftest%2Fui%2Fenum%2Fissue-67945-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fenum%2Fissue-67945-2.stderr?ref=a08c47310c7d49cbdc5d7afb38408ba519967ecd", "patch": "@@ -0,0 +1,25 @@\n+error[E0308]: mismatched types\n+  --> $DIR/issue-67945-2.rs:4:11\n+   |\n+LL | enum Bug<S> {\n+   |          - this type parameter\n+LL |     Var = 0: S,\n+   |           ^ expected type parameter `S`, found integer\n+   |\n+   = note: expected type parameter `S`\n+                        found type `{integer}`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/issue-67945-2.rs:4:11\n+   |\n+LL | enum Bug<S> {\n+   |          - this type parameter\n+LL |     Var = 0: S,\n+   |           ^^^^ expected `isize`, found type parameter `S`\n+   |\n+   = note:        expected type `isize`\n+           found type parameter `S`\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "252486dd92192011856e5bd884797e5f4f7ada08", "filename": "src/test/ui/lifetimes/issue-34979.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a08c47310c7d49cbdc5d7afb38408ba519967ecd/src%2Ftest%2Fui%2Flifetimes%2Fissue-34979.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a08c47310c7d49cbdc5d7afb38408ba519967ecd/src%2Ftest%2Fui%2Flifetimes%2Fissue-34979.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Fissue-34979.rs?ref=a08c47310c7d49cbdc5d7afb38408ba519967ecd", "patch": "@@ -0,0 +1,9 @@\n+trait Foo {}\n+impl<'a, T> Foo for &'a T {}\n+\n+struct Ctx<'a>(&'a ())\n+where\n+    &'a (): Foo, //~ ERROR: type annotations needed\n+    &'static (): Foo;\n+\n+fn main() {}"}, {"sha": "04ad0d1276647f45483ede8548da3a1ab5f11e8d", "filename": "src/test/ui/lifetimes/issue-34979.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a08c47310c7d49cbdc5d7afb38408ba519967ecd/src%2Ftest%2Fui%2Flifetimes%2Fissue-34979.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a08c47310c7d49cbdc5d7afb38408ba519967ecd/src%2Ftest%2Fui%2Flifetimes%2Fissue-34979.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Fissue-34979.stderr?ref=a08c47310c7d49cbdc5d7afb38408ba519967ecd", "patch": "@@ -0,0 +1,14 @@\n+error[E0283]: type annotations needed\n+  --> $DIR/issue-34979.rs:6:13\n+   |\n+LL | trait Foo {}\n+   | --------- required by this bound in `Foo`\n+...\n+LL |     &'a (): Foo,\n+   |             ^^^ cannot infer type for reference `&'a ()`\n+   |\n+   = note: cannot satisfy `&'a (): Foo`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0283`."}]}