{"sha": "2a6544f906818263e2791bc4cdf4fcbdf7260ab9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJhNjU0NGY5MDY4MTgyNjNlMjc5MWJjNGNkZjRmY2JkZjcyNjBhYjk=", "commit": {"author": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2019-03-22T05:48:55Z"}, "committer": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2019-03-22T05:48:55Z"}, "message": "Merge #1013\n\n1013: Fuzz reparsing and fix found bugs r=matklad a=pcpthm\n\nAdd fuzz test for reparsing which:\r\n- Checks reparsing doesn't panic and validate result syntax tree.\r\n- Checks that incremental reparsing produces the same syntax tree as full reparse.\r\n- Check for that errors are the same as full reparsing is disabled because errors are less important than syntax tree and produce failures which I couldn't figure out how to fix immediately (FIXME comment).\r\n\r\nI guess the current input generation is inefficient but still found several bugs:\r\n- Arithmetic overflow (negative result on an unsigned type). I changed the signature of `SyntaxError::add_offset` to solve this problem.\r\n- When reparsing a leaf, the token of the leaf can be joined to the next characters. Such case was not considered.\r\n- UNDERSCORE token was not produced when text length is exactly 1 (not a reparsing bug).\r\n- When reparsing a block, *inner* curly braces should be balanced. i.e. `{}{}` is invalid.\r\n- Effects of deleting newlines were not considered.\n\nCo-authored-by: pcpthm <pcpthm@gmail.com>", "tree": {"sha": "12cc178506343e5dbbea0285e1dcd0bd0035398c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/12cc178506343e5dbbea0285e1dcd0bd0035398c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2a6544f906818263e2791bc4cdf4fcbdf7260ab9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2a6544f906818263e2791bc4cdf4fcbdf7260ab9", "html_url": "https://github.com/rust-lang/rust/commit/2a6544f906818263e2791bc4cdf4fcbdf7260ab9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2a6544f906818263e2791bc4cdf4fcbdf7260ab9/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "parents": [{"sha": "ed823cb38d6c6852b2645f6bcd4c3b699b4b7539", "url": "https://api.github.com/repos/rust-lang/rust/commits/ed823cb38d6c6852b2645f6bcd4c3b699b4b7539", "html_url": "https://github.com/rust-lang/rust/commit/ed823cb38d6c6852b2645f6bcd4c3b699b4b7539"}, {"sha": "bf8e7930daa3fb168106534b1cc418f5bc44e8c0", "url": "https://api.github.com/repos/rust-lang/rust/commits/bf8e7930daa3fb168106534b1cc418f5bc44e8c0", "html_url": "https://github.com/rust-lang/rust/commit/bf8e7930daa3fb168106534b1cc418f5bc44e8c0"}], "stats": {"total": 173, "additions": 149, "deletions": 24}, "files": [{"sha": "613ad2857d00cea160247df48f8c9bdeebac2ea5", "filename": "crates/ra_syntax/fuzz/Cargo.toml", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/2a6544f906818263e2791bc4cdf4fcbdf7260ab9/crates%2Fra_syntax%2Ffuzz%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/2a6544f906818263e2791bc4cdf4fcbdf7260ab9/crates%2Fra_syntax%2Ffuzz%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ffuzz%2FCargo.toml?ref=2a6544f906818263e2791bc4cdf4fcbdf7260ab9", "patch": "@@ -4,14 +4,15 @@ name = \"ra_syntax-fuzz\"\n version = \"0.0.1\"\n authors = [\"rust-analyzer developers\"]\n publish = false\n+edition = \"2018\"\n \n [package.metadata]\n cargo-fuzz = true\n \n-[dependencies.ra_syntax]\n-path = \"..\"\n-[dependencies.libfuzzer-sys]\n-git = \"https://github.com/rust-fuzz/libfuzzer-sys.git\"\n+[dependencies]\n+ra_syntax = { path = \"..\" }\n+ra_text_edit = { path = \"../../ra_text_edit\" }\n+libfuzzer-sys = { git = \"https://github.com/rust-fuzz/libfuzzer-sys.git\" }\n \n # Prevent this from interfering with workspaces\n [workspace]\n@@ -20,3 +21,7 @@ members = [\".\"]\n [[bin]]\n name = \"parser\"\n path = \"fuzz_targets/parser.rs\"\n+\n+[[bin]]\n+name = \"reparse\"\n+path = \"fuzz_targets/reparse.rs\""}, {"sha": "76a8b08d009352099bdde7a8612df32984ae6d24", "filename": "crates/ra_syntax/fuzz/fuzz_targets/parser.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2a6544f906818263e2791bc4cdf4fcbdf7260ab9/crates%2Fra_syntax%2Ffuzz%2Ffuzz_targets%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a6544f906818263e2791bc4cdf4fcbdf7260ab9/crates%2Fra_syntax%2Ffuzz%2Ffuzz_targets%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ffuzz%2Ffuzz_targets%2Fparser.rs?ref=2a6544f906818263e2791bc4cdf4fcbdf7260ab9", "patch": "@@ -1,9 +1,9 @@\n #![no_main]\n-#[macro_use] extern crate libfuzzer_sys;\n-extern crate ra_syntax;\n+use libfuzzer_sys::fuzz_target;\n+use ra_syntax::fuzz::check_parser;\n \n fuzz_target!(|data: &[u8]| {\n     if let Ok(text) = std::str::from_utf8(data) {\n-        ra_syntax::check_fuzz_invariants(text)\n+        check_parser(text)\n     }\n });"}, {"sha": "45524d4c123accedb2e5644d25242625b9a0a986", "filename": "crates/ra_syntax/fuzz/fuzz_targets/reparse.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2a6544f906818263e2791bc4cdf4fcbdf7260ab9/crates%2Fra_syntax%2Ffuzz%2Ffuzz_targets%2Freparse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a6544f906818263e2791bc4cdf4fcbdf7260ab9/crates%2Fra_syntax%2Ffuzz%2Ffuzz_targets%2Freparse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ffuzz%2Ffuzz_targets%2Freparse.rs?ref=2a6544f906818263e2791bc4cdf4fcbdf7260ab9", "patch": "@@ -0,0 +1,9 @@\n+#![no_main]\n+use libfuzzer_sys::fuzz_target;\n+use ra_syntax::fuzz::CheckReparse;\n+\n+fuzz_target!(|data: &[u8]| {\n+    if let Some(check) = CheckReparse::from_data(data) {\n+        check.run();\n+    }\n+});"}, {"sha": "af11b2e1af02887f36085001fea548882e1ad396", "filename": "crates/ra_syntax/src/fuzz.rs", "status": "added", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/2a6544f906818263e2791bc4cdf4fcbdf7260ab9/crates%2Fra_syntax%2Fsrc%2Ffuzz.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a6544f906818263e2791bc4cdf4fcbdf7260ab9/crates%2Fra_syntax%2Fsrc%2Ffuzz.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Ffuzz.rs?ref=2a6544f906818263e2791bc4cdf4fcbdf7260ab9", "patch": "@@ -0,0 +1,67 @@\n+use crate::{SourceFile, validation, TextUnit, TextRange, AstNode};\n+use ra_text_edit::AtomTextEdit;\n+use std::str::{self, FromStr};\n+\n+fn check_file_invariants(file: &SourceFile) {\n+    let root = file.syntax();\n+    validation::validate_block_structure(root);\n+    let _ = file.errors();\n+}\n+\n+pub fn check_parser(text: &str) {\n+    let file = SourceFile::parse(text);\n+    check_file_invariants(&file);\n+}\n+\n+#[derive(Debug, Clone)]\n+pub struct CheckReparse {\n+    text: String,\n+    edit: AtomTextEdit,\n+    edited_text: String,\n+}\n+\n+impl CheckReparse {\n+    pub fn from_data(data: &[u8]) -> Option<Self> {\n+        const PREFIX: &'static str = \"fn main(){\\n\\t\";\n+        const SUFFIX: &'static str = \"\\n}\";\n+\n+        let data = str::from_utf8(data).ok()?;\n+        let mut lines = data.lines();\n+        let delete_start = usize::from_str(lines.next()?).ok()? + PREFIX.len();\n+        let delete_len = usize::from_str(lines.next()?).ok()?;\n+        let insert = lines.next()?.to_string();\n+        let text = lines.collect::<Vec<_>>().join(\"\\n\");\n+        let text = format!(\"{}{}{}\", PREFIX, text, SUFFIX);\n+        text.get(delete_start..delete_start.checked_add(delete_len)?)?; // make sure delete is a valid range\n+        let delete = TextRange::offset_len(\n+            TextUnit::from_usize(delete_start),\n+            TextUnit::from_usize(delete_len),\n+        );\n+        let edited_text =\n+            format!(\"{}{}{}\", &text[..delete_start], &insert, &text[delete_start + delete_len..]);\n+        let edit = AtomTextEdit { delete, insert };\n+        Some(CheckReparse { text, edit, edited_text })\n+    }\n+\n+    pub fn run(&self) {\n+        let file = SourceFile::parse(&self.text);\n+        let new_file = file.reparse(&self.edit);\n+        check_file_invariants(&new_file);\n+        assert_eq!(&new_file.syntax().text().to_string(), &self.edited_text);\n+        let full_reparse = SourceFile::parse(&self.edited_text);\n+        for (a, b) in new_file.syntax().descendants().zip(full_reparse.syntax().descendants()) {\n+            if (a.kind(), a.range()) != (b.kind(), b.range()) {\n+                eprint!(\"original:\\n{}\", file.syntax().debug_dump());\n+                eprint!(\"reparsed:\\n{}\", new_file.syntax().debug_dump());\n+                eprint!(\"full reparse:\\n{}\", full_reparse.syntax().debug_dump());\n+                assert_eq!(\n+                    format!(\"{:?}\", a),\n+                    format!(\"{:?}\", b),\n+                    \"different syntax tree produced by the full reparse\"\n+                );\n+            }\n+        }\n+        // FIXME\n+        // assert_eq!(new_file.errors(), full_reparse.errors());\n+    }\n+}"}, {"sha": "4f30204404fdab40d9fdfb47f9c0f1ba9a9cdc92", "filename": "crates/ra_syntax/src/lib.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2a6544f906818263e2791bc4cdf4fcbdf7260ab9/crates%2Fra_syntax%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a6544f906818263e2791bc4cdf4fcbdf7260ab9/crates%2Fra_syntax%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Flib.rs?ref=2a6544f906818263e2791bc4cdf4fcbdf7260ab9", "patch": "@@ -29,6 +29,8 @@ mod ptr;\n \n pub mod algo;\n pub mod ast;\n+#[doc(hidden)]\n+pub mod fuzz;\n \n pub use rowan::{SmolStr, TextRange, TextUnit};\n pub use ra_parser::SyntaxKind;\n@@ -83,13 +85,6 @@ impl SourceFile {\n     }\n }\n \n-pub fn check_fuzz_invariants(text: &str) {\n-    let file = SourceFile::parse(text);\n-    let root = file.syntax();\n-    validation::validate_block_structure(root);\n-    let _ = file.errors();\n-}\n-\n /// This test does not assert anything and instead just shows off the crate's\n /// API.\n #[test]"}, {"sha": "36e8416091a594925774d31b8ad02132bd8c4213", "filename": "crates/ra_syntax/src/parsing/lexer.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2a6544f906818263e2791bc4cdf4fcbdf7260ab9/crates%2Fra_syntax%2Fsrc%2Fparsing%2Flexer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a6544f906818263e2791bc4cdf4fcbdf7260ab9/crates%2Fra_syntax%2Fsrc%2Fparsing%2Flexer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fparsing%2Flexer.rs?ref=2a6544f906818263e2791bc4cdf4fcbdf7260ab9", "patch": "@@ -195,6 +195,7 @@ fn scan_ident(c: char, ptr: &mut Ptr) -> SyntaxKind {\n             ptr.bump();\n             true\n         }\n+        ('_', None) => return UNDERSCORE,\n         ('_', Some(c)) if !is_ident_continue(c) => return UNDERSCORE,\n         _ => false,\n     };"}, {"sha": "7e7f914f5efff961fea60e543c7cf274d66500be", "filename": "crates/ra_syntax/src/parsing/reparsing.rs", "status": "modified", "additions": 19, "deletions": 5, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/2a6544f906818263e2791bc4cdf4fcbdf7260ab9/crates%2Fra_syntax%2Fsrc%2Fparsing%2Freparsing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a6544f906818263e2791bc4cdf4fcbdf7260ab9/crates%2Fra_syntax%2Fsrc%2Fparsing%2Freparsing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fparsing%2Freparsing.rs?ref=2a6544f906818263e2791bc4cdf4fcbdf7260ab9", "patch": "@@ -33,12 +33,19 @@ pub(crate) fn incremental_reparse(\n }\n \n fn reparse_leaf<'node>(\n-    node: &'node SyntaxNode,\n+    root: &'node SyntaxNode,\n     edit: &AtomTextEdit,\n ) -> Option<(&'node SyntaxNode, GreenNode, Vec<SyntaxError>)> {\n-    let node = algo::find_covering_node(node, edit.delete);\n+    let node = algo::find_covering_node(root, edit.delete);\n     match node.kind() {\n         WHITESPACE | COMMENT | IDENT | STRING | RAW_STRING => {\n+            if node.kind() == WHITESPACE || node.kind() == COMMENT {\n+                // removing a new line may extends previous token\n+                if node.text().to_string()[edit.delete - node.range().start()].contains('\\n') {\n+                    return None;\n+                }\n+            }\n+\n             let text = get_text_after_edit(node, &edit);\n             let tokens = tokenize(&text);\n             let token = match tokens[..] {\n@@ -50,6 +57,13 @@ fn reparse_leaf<'node>(\n                 return None;\n             }\n \n+            if let Some(next_char) = root.text().char_at(node.range().end()) {\n+                let tokens_with_next_char = tokenize(&format!(\"{}{}\", text, next_char));\n+                if tokens_with_next_char.len() == 1 {\n+                    return None;\n+                }\n+            }\n+\n             let green = GreenNode::new_leaf(node.kind(), text.into());\n             let new_errors = vec![];\n             Some((node, green, new_errors))\n@@ -104,7 +118,7 @@ fn is_balanced(tokens: &[Token]) -> bool {\n         return false;\n     }\n     let mut balance = 0usize;\n-    for t in tokens.iter() {\n+    for t in &tokens[1..tokens.len() - 1] {\n         match t.kind {\n             L_CURLY => balance += 1,\n             R_CURLY => {\n@@ -130,11 +144,11 @@ fn merge_errors(\n         if e.offset() <= old_node.range().start() {\n             res.push(e)\n         } else if e.offset() >= old_node.range().end() {\n-            res.push(e.add_offset(TextUnit::of_str(&edit.insert) - edit.delete.len()));\n+            res.push(e.add_offset(TextUnit::of_str(&edit.insert), edit.delete.len()));\n         }\n     }\n     for e in new_errors {\n-        res.push(e.add_offset(old_node.range().start()));\n+        res.push(e.add_offset(old_node.range().start(), 0.into()));\n     }\n     res\n }"}, {"sha": "4b8c22a57490946f068daef1ca7ecf5068ce7d61", "filename": "crates/ra_syntax/src/syntax_error.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2a6544f906818263e2791bc4cdf4fcbdf7260ab9/crates%2Fra_syntax%2Fsrc%2Fsyntax_error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a6544f906818263e2791bc4cdf4fcbdf7260ab9/crates%2Fra_syntax%2Fsrc%2Fsyntax_error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fsyntax_error.rs?ref=2a6544f906818263e2791bc4cdf4fcbdf7260ab9", "patch": "@@ -48,10 +48,10 @@ impl SyntaxError {\n         }\n     }\n \n-    pub fn add_offset(mut self, plus_offset: TextUnit) -> SyntaxError {\n+    pub fn add_offset(mut self, plus_offset: TextUnit, minus_offset: TextUnit) -> SyntaxError {\n         self.location = match self.location {\n-            Location::Range(range) => Location::Range(range + plus_offset),\n-            Location::Offset(offset) => Location::Offset(offset + plus_offset),\n+            Location::Range(range) => Location::Range(range + plus_offset - minus_offset),\n+            Location::Offset(offset) => Location::Offset(offset + plus_offset - minus_offset),\n         };\n \n         self"}, {"sha": "388eb74eda12458cc267e80bfb12325294001d60", "filename": "crates/ra_syntax/tests/data/reparse/fuzz-failures/0000.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2a6544f906818263e2791bc4cdf4fcbdf7260ab9/crates%2Fra_syntax%2Ftests%2Fdata%2Freparse%2Ffuzz-failures%2F0000.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a6544f906818263e2791bc4cdf4fcbdf7260ab9/crates%2Fra_syntax%2Ftests%2Fdata%2Freparse%2Ffuzz-failures%2F0000.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftests%2Fdata%2Freparse%2Ffuzz-failures%2F0000.rs?ref=2a6544f906818263e2791bc4cdf4fcbdf7260ab9", "patch": "@@ -0,0 +1,6 @@\n+0\n+1\n+\n+\n+\n+0\n\\ No newline at end of file"}, {"sha": "d2d42c6f941f4bf2741d6171164e27ce5205ea4e", "filename": "crates/ra_syntax/tests/data/reparse/fuzz-failures/0001.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2a6544f906818263e2791bc4cdf4fcbdf7260ab9/crates%2Fra_syntax%2Ftests%2Fdata%2Freparse%2Ffuzz-failures%2F0001.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a6544f906818263e2791bc4cdf4fcbdf7260ab9/crates%2Fra_syntax%2Ftests%2Fdata%2Freparse%2Ffuzz-failures%2F0001.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftests%2Fdata%2Freparse%2Ffuzz-failures%2F0001.rs?ref=2a6544f906818263e2791bc4cdf4fcbdf7260ab9", "patch": "@@ -0,0 +1,4 @@\n+0\n+1\n+\n+bb\"\n\\ No newline at end of file"}, {"sha": "3fbee1548103ae4f872121bb71fb4484e20132c8", "filename": "crates/ra_syntax/tests/data/reparse/fuzz-failures/0002.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2a6544f906818263e2791bc4cdf4fcbdf7260ab9/crates%2Fra_syntax%2Ftests%2Fdata%2Freparse%2Ffuzz-failures%2F0002.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a6544f906818263e2791bc4cdf4fcbdf7260ab9/crates%2Fra_syntax%2Ftests%2Fdata%2Freparse%2Ffuzz-failures%2F0002.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftests%2Fdata%2Freparse%2Ffuzz-failures%2F0002.rs?ref=2a6544f906818263e2791bc4cdf4fcbdf7260ab9", "patch": "@@ -0,0 +1,4 @@\n+1\n+1\n+\n+\"\"!\n\\ No newline at end of file"}, {"sha": "d2757cd08df8a7a847c0469de94c9db47fd21bac", "filename": "crates/ra_syntax/tests/data/reparse/fuzz-failures/0003.rs", "status": "added", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/2a6544f906818263e2791bc4cdf4fcbdf7260ab9/crates%2Fra_syntax%2Ftests%2Fdata%2Freparse%2Ffuzz-failures%2F0003.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a6544f906818263e2791bc4cdf4fcbdf7260ab9/crates%2Fra_syntax%2Ftests%2Fdata%2Freparse%2Ffuzz-failures%2F0003.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftests%2Fdata%2Freparse%2Ffuzz-failures%2F0003.rs?ref=2a6544f906818263e2791bc4cdf4fcbdf7260ab9"}, {"sha": "481617a701dba48c74177d051f4210f9c19e31f7", "filename": "crates/ra_syntax/tests/data/reparse/fuzz-failures/0004.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2a6544f906818263e2791bc4cdf4fcbdf7260ab9/crates%2Fra_syntax%2Ftests%2Fdata%2Freparse%2Ffuzz-failures%2F0004.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a6544f906818263e2791bc4cdf4fcbdf7260ab9/crates%2Fra_syntax%2Ftests%2Fdata%2Freparse%2Ffuzz-failures%2F0004.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftests%2Fdata%2Freparse%2Ffuzz-failures%2F0004.rs?ref=2a6544f906818263e2791bc4cdf4fcbdf7260ab9", "patch": "@@ -0,0 +1,4 @@\n+0\n+0\n+}\n+{;\n\\ No newline at end of file"}, {"sha": "074d761c7b50a01dfa5840dc879c0c47418c06ef", "filename": "crates/ra_syntax/tests/data/reparse/fuzz-failures/0005.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2a6544f906818263e2791bc4cdf4fcbdf7260ab9/crates%2Fra_syntax%2Ftests%2Fdata%2Freparse%2Ffuzz-failures%2F0005.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a6544f906818263e2791bc4cdf4fcbdf7260ab9/crates%2Fra_syntax%2Ftests%2Fdata%2Freparse%2Ffuzz-failures%2F0005.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftests%2Fdata%2Freparse%2Ffuzz-failures%2F0005.rs?ref=2a6544f906818263e2791bc4cdf4fcbdf7260ab9", "patch": "@@ -0,0 +1,7 @@\n+05\n+1\n+\n+\n+\n+b'\u0001\n+\t\t\n\\ No newline at end of file"}, {"sha": "537b01368b03100bd32358093e5405a897c031bb", "filename": "crates/ra_syntax/tests/test.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/2a6544f906818263e2791bc4cdf4fcbdf7260ab9/crates%2Fra_syntax%2Ftests%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a6544f906818263e2791bc4cdf4fcbdf7260ab9/crates%2Fra_syntax%2Ftests%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftests%2Ftest.rs?ref=2a6544f906818263e2791bc4cdf4fcbdf7260ab9", "patch": "@@ -8,7 +8,7 @@ use std::{\n };\n \n use test_utils::{project_dir, dir_tests, read_text, collect_tests};\n-use ra_syntax::{SourceFile, AstNode, check_fuzz_invariants};\n+use ra_syntax::{SourceFile, AstNode, fuzz};\n \n #[test]\n fn lexer_tests() {\n@@ -47,7 +47,16 @@ fn parser_tests() {\n #[test]\n fn parser_fuzz_tests() {\n     for (_, text) in collect_tests(&test_data_dir(), &[\"parser/fuzz-failures\"]) {\n-        check_fuzz_invariants(&text)\n+        fuzz::check_parser(&text)\n+    }\n+}\n+\n+#[test]\n+fn reparse_fuzz_tests() {\n+    for (_, text) in collect_tests(&test_data_dir(), &[\"reparse/fuzz-failures\"]) {\n+        let check = fuzz::CheckReparse::from_data(text.as_bytes()).unwrap();\n+        println!(\"{:?}\", check);\n+        check.run();\n     }\n }\n "}]}