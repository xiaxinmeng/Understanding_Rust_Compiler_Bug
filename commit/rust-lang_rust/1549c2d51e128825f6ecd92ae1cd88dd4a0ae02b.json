{"sha": "1549c2d51e128825f6ecd92ae1cd88dd4a0ae02b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE1NDljMmQ1MWUxMjg4MjVmNmVjZDkyYWUxY2Q4OGRkNGEwYWUwMmI=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-11-15T14:20:10Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-11-15T14:20:10Z"}, "message": "erase all lifetimes from function types before creating pointers to them", "tree": {"sha": "14f321416fa7ae06c5a0f1d7b4288232041d8a1a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/14f321416fa7ae06c5a0f1d7b4288232041d8a1a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1549c2d51e128825f6ecd92ae1cd88dd4a0ae02b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJYKxmaAAoJEFbW7qD8Z6xG8u4P/22GD9miZcFvZ38GTlFZt08e\ntpjtAkQhAQA2uCtzBwzxgIFfFzepIZ+vXLj4W4cUsXwCgZXlfMPiUpwSPKWqWpb1\nmN2mSEdLeTnYXeRXbZztytNFuxWk2kCOyRvHAliqxiWhDHo8tvtzlI8W82ZJ3SZT\n51D2fRlB5joIqq0+8w90QU45N6vSDcgK28mT0vGrVN1L/T4gC3tnpqY2VMp4pZ+C\nDsaHquZLdH/XvNYOkxf3B/Pj8yfOgr0HvO6D6XdpZb7q4k4hMxiG297NhmsI1HJI\n8qyd7sdgtJyUHOB2DDRG0Hq76uL5owPfsrZv5209QSQNavb5Gsh8NtfzQZdYRpXj\nwnlt5rMjWWypJcXR/3qG0u1CDvuDyLYzj1TYXi66Jox1CuVq5GOjZ2f4+WlvtZa1\nNe/mwshf7zCFKdSQuwSqPM16+/IzaKmdVgymdnKyEubfLF58z1fiBY+WZroR2GX0\nohdXIIr9CYBq7pw8e28i/QWNg/hGjmgmkjVW9PZHxCdXfijgBITauWXs0AZKqdry\niPzr9giGw/xRp67MIRvGYwCNwb8NA6M7rekdUdHEzj6eYFUX9XFyuZ2E0TFChtCV\nd5jK2n7x6fBrGRsjcYScVKrtian5d8FQIyLg7pFiZcQb5rYu8skUNMvbyUb4N2Q+\nL+nJuVYpFfDGyF4A6tOW\n=PSnC\n-----END PGP SIGNATURE-----", "payload": "tree 14f321416fa7ae06c5a0f1d7b4288232041d8a1a\nparent e2091ff93481c5e1c41da26ea202c911c1140a0c\nauthor Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1479219610 +0100\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1479219610 +0100\n\nerase all lifetimes from function types before creating pointers to them"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1549c2d51e128825f6ecd92ae1cd88dd4a0ae02b", "html_url": "https://github.com/rust-lang/rust/commit/1549c2d51e128825f6ecd92ae1cd88dd4a0ae02b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1549c2d51e128825f6ecd92ae1cd88dd4a0ae02b/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e2091ff93481c5e1c41da26ea202c911c1140a0c", "url": "https://api.github.com/repos/rust-lang/rust/commits/e2091ff93481c5e1c41da26ea202c911c1140a0c", "html_url": "https://github.com/rust-lang/rust/commit/e2091ff93481c5e1c41da26ea202c911c1140a0c"}], "stats": {"total": 8, "additions": 6, "deletions": 2}, "files": [{"sha": "a431a7111a1a57d9da3ad81a41694af9371c0535", "filename": "src/interpreter/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1549c2d51e128825f6ecd92ae1cd88dd4a0ae02b/src%2Finterpreter%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1549c2d51e128825f6ecd92ae1cd88dd4a0ae02b/src%2Finterpreter%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finterpreter%2Fmod.rs?ref=1549c2d51e128825f6ecd92ae1cd88dd4a0ae02b", "patch": "@@ -654,6 +654,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n \n                     ReifyFnPointer => match self.operand_ty(operand).sty {\n                         ty::TyFnDef(def_id, substs, fn_ty) => {\n+                            let fn_ty = self.tcx.erase_regions(&fn_ty);\n                             let fn_ptr = self.memory.create_fn_ptr(def_id, substs, fn_ty);\n                             self.write_value(Value::ByVal(PrimVal::from_fn_ptr(fn_ptr)), dest, dest_ty)?;\n                         },\n@@ -665,6 +666,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                             let src = self.eval_operand(operand)?;\n                             let ptr = src.read_ptr(&self.memory)?;\n                             let (def_id, substs, _) = self.memory.get_fn(ptr.alloc_id)?;\n+                            let unsafe_fn_ty = self.tcx.erase_regions(&unsafe_fn_ty);\n                             let fn_ptr = self.memory.create_fn_ptr(def_id, substs, unsafe_fn_ty);\n                             self.write_value(Value::ByVal(PrimVal::from_fn_ptr(fn_ptr)), dest, dest_ty)?;\n                         },\n@@ -1390,6 +1392,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n             ty::TyFloat(FloatTy::F64) => PrimVal::from_f64(self.memory.read_f64(ptr)?),\n \n             ty::TyFnDef(def_id, substs, fn_ty) => {\n+                let fn_ty = self.tcx.erase_regions(&fn_ty);\n                 PrimVal::from_fn_ptr(self.memory.create_fn_ptr(def_id, substs, fn_ty))\n             },\n             ty::TyFnPtr(_) => self.memory.read_ptr(ptr).map(PrimVal::from_fn_ptr)?,"}, {"sha": "9892da0bdb5b52b70f9d45cd7b01793ce8efb302", "filename": "src/interpreter/vtable.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1549c2d51e128825f6ecd92ae1cd88dd4a0ae02b/src%2Finterpreter%2Fvtable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1549c2d51e128825f6ecd92ae1cd88dd4a0ae02b/src%2Finterpreter%2Fvtable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finterpreter%2Fvtable.rs?ref=1549c2d51e128825f6ecd92ae1cd88dd4a0ae02b", "patch": "@@ -35,7 +35,8 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                     self.get_vtable_methods(id, substs)\n                         .into_iter()\n                         .map(|opt_mth| opt_mth.map(|mth| {\n-                            self.memory.create_fn_ptr(mth.method.def_id, mth.substs, mth.method.fty)\n+                            let fn_ty = self.tcx.erase_regions(&mth.method.fty);\n+                            self.memory.create_fn_ptr(mth.method.def_id, mth.substs, fn_ty)\n                         }))\n                         .collect::<Vec<_>>()\n                         .into_iter()\n@@ -90,7 +91,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n             if let Some(drop_def_id) = adt_def.destructor() {\n                 let ty_scheme = self.tcx.lookup_item_type(drop_def_id);\n                 let fn_ty = match ty_scheme.ty.sty {\n-                    ty::TyFnDef(_, _, fn_ty) => fn_ty,\n+                    ty::TyFnDef(_, _, fn_ty) => self.tcx.erase_regions(&fn_ty),\n                     _ => bug!(\"drop method is not a TyFnDef\"),\n                 };\n                 let fn_ptr = self.memory.create_fn_ptr(drop_def_id, substs, fn_ty);"}]}