{"sha": "9a9d9be07e8709c1fd017255f2fd437d87e881ff", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlhOWQ5YmUwN2U4NzA5YzFmZDAxNzI1NWYyZmQ0MzdkODdlODgxZmY=", "commit": {"author": {"name": "Josh Triplett", "email": "josh@joshtriplett.org", "date": "2021-04-29T17:57:10Z"}, "committer": {"name": "Josh Triplett", "email": "josh@joshtriplett.org", "date": "2021-04-29T18:03:21Z"}, "message": "platform-support.md: Update for consistency with Target Tier Policy\n\nSplit into five sections to match the tiers: \"Tier 1 with Host Tools\",\n\"Tier 1\", \"Tier 2 with Host Tools\", \"Tier 2\", and \"Tier 3\". Explain each\ntier briefly in prose, and link to the corresponding section of the\npolicy for full requirements.\n\nDrop the `host` columns from the first four, since the different\nsections distinguish that. (Keep the `host` column for \"Tier 3\", since\nit's a single list and the `host` column just indicates if host tools\nare expected to work.)\n\nTargets with host tools always have full support for std, so drop the\n`std` column from those.\n\nMove the explanations of the `std` column next to the appropriate\ntables, and drop the unknown/WIP case for tier 2 targets.\n\nUse \"target\" terminology consistently throughout.\n\nSort each table by target name.", "tree": {"sha": "771ded523d2f801a33418bad414f9e382e27cf02", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/771ded523d2f801a33418bad414f9e382e27cf02"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9a9d9be07e8709c1fd017255f2fd437d87e881ff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9a9d9be07e8709c1fd017255f2fd437d87e881ff", "html_url": "https://github.com/rust-lang/rust/commit/9a9d9be07e8709c1fd017255f2fd437d87e881ff", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9a9d9be07e8709c1fd017255f2fd437d87e881ff/comments", "author": {"login": "joshtriplett", "id": 162737, "node_id": "MDQ6VXNlcjE2MjczNw==", "avatar_url": "https://avatars.githubusercontent.com/u/162737?v=4", "gravatar_id": "", "url": "https://api.github.com/users/joshtriplett", "html_url": "https://github.com/joshtriplett", "followers_url": "https://api.github.com/users/joshtriplett/followers", "following_url": "https://api.github.com/users/joshtriplett/following{/other_user}", "gists_url": "https://api.github.com/users/joshtriplett/gists{/gist_id}", "starred_url": "https://api.github.com/users/joshtriplett/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/joshtriplett/subscriptions", "organizations_url": "https://api.github.com/users/joshtriplett/orgs", "repos_url": "https://api.github.com/users/joshtriplett/repos", "events_url": "https://api.github.com/users/joshtriplett/events{/privacy}", "received_events_url": "https://api.github.com/users/joshtriplett/received_events", "type": "User", "site_admin": false}, "committer": {"login": "joshtriplett", "id": 162737, "node_id": "MDQ6VXNlcjE2MjczNw==", "avatar_url": "https://avatars.githubusercontent.com/u/162737?v=4", "gravatar_id": "", "url": "https://api.github.com/users/joshtriplett", "html_url": "https://github.com/joshtriplett", "followers_url": "https://api.github.com/users/joshtriplett/followers", "following_url": "https://api.github.com/users/joshtriplett/following{/other_user}", "gists_url": "https://api.github.com/users/joshtriplett/gists{/gist_id}", "starred_url": "https://api.github.com/users/joshtriplett/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/joshtriplett/subscriptions", "organizations_url": "https://api.github.com/users/joshtriplett/orgs", "repos_url": "https://api.github.com/users/joshtriplett/repos", "events_url": "https://api.github.com/users/joshtriplett/events{/privacy}", "received_events_url": "https://api.github.com/users/joshtriplett/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "50ca3ac24f08cc6c8bbef9ac27245f83f30bc749", "url": "https://api.github.com/repos/rust-lang/rust/commits/50ca3ac24f08cc6c8bbef9ac27245f83f30bc749", "html_url": "https://github.com/rust-lang/rust/commit/50ca3ac24f08cc6c8bbef9ac27245f83f30bc749"}], "stats": {"total": 305, "additions": 174, "deletions": 131}, "files": [{"sha": "b3c67b84da6172a6f7e92ceb56c8e9998a5de869", "filename": "src/doc/rustc/src/platform-support.md", "status": "modified", "additions": 174, "deletions": 131, "changes": 305, "blob_url": "https://github.com/rust-lang/rust/blob/9a9d9be07e8709c1fd017255f2fd437d87e881ff/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support.md", "raw_url": "https://github.com/rust-lang/rust/raw/9a9d9be07e8709c1fd017255f2fd437d87e881ff/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support.md?ref=9a9d9be07e8709c1fd017255f2fd437d87e881ff", "patch": "@@ -6,149 +6,192 @@\n     }\n </style>\n \n-Support for different platforms are organized into three tiers, each with a\n-different set of guarantees. For more information on the policies for targets\n-at each tier, see the [Target Tier Policy](target-tier-policy.md).\n+Support for different platforms (\"targets\") are organized into three tiers,\n+each with a different set of guarantees. For more information on the policies\n+for targets at each tier, see the [Target Tier Policy](target-tier-policy.md).\n \n-Platforms are identified by their \"target triple\" which is the string to\n-inform the compiler what kind of output should be produced. The columns in the\n-tables below have the following meanings:\n+Targets are identified by their \"target triple\" which is the string to inform\n+the compiler what kind of output should be produced.\n \n-* std:\n-    * \u2713 indicates the full standard library is available.\n-    * \\* indicates the target only supports [`no_std`] development.\n-    * ? indicates the standard library support is unknown or a work-in-progress.\n-* host: A \u2713 indicates that `rustc` and `cargo` can run on the host platform.\n+## Tier 1 with Host Tools\n \n-[`no_std`]: https://rust-embedded.github.io/book/intro/no-std.html\n-\n-## Tier 1\n+Tier 1 targets can be thought of as \"guaranteed to work\". The Rust project\n+builds official binary releases for each tier 1 target, and automated testing\n+ensures that each tier 1 target builds and passes tests after each change.\n \n-Tier 1 platforms can be thought of as \"guaranteed to work\".\n-Specifically they will each satisfy the following requirements:\n+Tier 1 targets with host tools additionally support running tools like `rustc`\n+and `cargo` natively on the target, and automated testing ensures that tests\n+pass for the host tools as well. This allows the target to be used as a\n+development platform, not just a compilation target. For the full requirements,\n+see [Tier 1 with Host Tools](target-tier-policy.md#tier-1-with-host-tools) in\n+the Target Tier Policy.\n \n-* Official binary releases are provided for the platform.\n-* Automated testing is set up to run tests for the platform.\n-* Landing changes to the `rust-lang/rust` repository's master branch is gated\n-  on tests passing.\n-* Documentation for how to use and how to build the platform is available.\n+All tier 1 targets with host tools support the full standard library.\n \n-target | std | host | notes\n--------|-----|------|-------\n-`aarch64-unknown-linux-gnu` | \u2713 | \u2713 | ARM64 Linux (kernel 4.2, glibc 2.17+) [^missing-stack-probes]\n-`i686-pc-windows-gnu` | \u2713 | \u2713 | 32-bit MinGW (Windows 7+)\n-`i686-pc-windows-msvc` | \u2713 | \u2713 | 32-bit MSVC (Windows 7+)\n-`i686-unknown-linux-gnu` | \u2713 | \u2713 | 32-bit Linux (kernel 2.6.32+, glibc 2.11+)\n-`x86_64-apple-darwin` | \u2713 | \u2713 | 64-bit macOS (10.7+, Lion+)\n-`x86_64-pc-windows-gnu` | \u2713 | \u2713 | 64-bit MinGW (Windows 7+)\n-`x86_64-pc-windows-msvc` | \u2713 | \u2713 | 64-bit MSVC (Windows 7+)\n-`x86_64-unknown-linux-gnu` | \u2713 | \u2713 | 64-bit Linux (kernel 2.6.32+, glibc 2.11+)\n+target | notes\n+-------|-------\n+`aarch64-unknown-linux-gnu` | ARM64 Linux (kernel 4.2, glibc 2.17+) [^missing-stack-probes]\n+`i686-pc-windows-gnu` | 32-bit MinGW (Windows 7+)\n+`i686-pc-windows-msvc` | 32-bit MSVC (Windows 7+)\n+`i686-unknown-linux-gnu` | 32-bit Linux (kernel 2.6.32+, glibc 2.11+)\n+`x86_64-apple-darwin` | 64-bit macOS (10.7+, Lion+)\n+`x86_64-pc-windows-gnu` | 64-bit MinGW (Windows 7+)\n+`x86_64-pc-windows-msvc` | 64-bit MSVC (Windows 7+)\n+`x86_64-unknown-linux-gnu` | 64-bit Linux (kernel 2.6.32+, glibc 2.11+)\n \n [^missing-stack-probes]: Stack probes support is missing on\n   `aarch64-unknown-linux-gnu`, but it's planned to be implemented in the near\n   future. The implementation is tracked on [issue #77071][77071].\n \n [77071]: https://github.com/rust-lang/rust/issues/77071\n \n+## Tier 1\n+\n+Tier 1 targets can be thought of as \"guaranteed to work\". The Rust project\n+builds official binary releases for each tier 1 target, and automated testing\n+ensures that each tier 1 target builds and passes tests after each change. For\n+the full requirements, see [Tier 1 target\n+policy](target-tier-policy.md#tier-1-target-policy) in the Target Tier Policy.\n+\n+At this time, all Tier 1 targets are [Tier 1 with Host\n+Tools](#tier-1-with-host-tools).\n+\n+## Tier 2 with Host Tools\n+\n+Tier 2 targets can be thought of as \"guaranteed to build\". The Rust project\n+builds official binary releases for each tier 2 target, and automated builds\n+ensure that each tier 2 target builds after each change. Automated tests are\n+not always run so it's not guaranteed to produce a working build, but tier 2\n+targets often work to quite a good degree and patches are always welcome!\n+\n+Tier 2 targets with host tools additionally support running tools like `rustc`\n+and `cargo` natively on the target, and automated builds ensure that the host\n+tools build as well. This allows the target to be used as a development\n+platform, not just a compilation target. For the full requirements, see [Tier 2\n+with Host Tools](target-tier-policy.md#tier-2-with-host-tools) in the Target\n+Tier Policy.\n+\n+All tier 2 targets with host tools support the full standard library.\n+\n+target | notes\n+-------|-------\n+`aarch64-apple-darwin` | ARM64 macOS (11.0+, Big Sur+)\n+`aarch64-pc-windows-msvc` | ARM64 Windows MSVC\n+`aarch64-unknown-linux-musl` | ARM64 Linux with MUSL\n+`arm-unknown-linux-gnueabi` | ARMv6 Linux (kernel 3.2, glibc 2.17)\n+`arm-unknown-linux-gnueabihf` | ARMv6 Linux, hardfloat (kernel 3.2, glibc 2.17)\n+`armv7-unknown-linux-gnueabihf` | ARMv7 Linux, hardfloat (kernel 3.2, glibc 2.17)\n+`mips-unknown-linux-gnu` | MIPS Linux (kernel 4.4, glibc 2.23)\n+`mips64-unknown-linux-gnuabi64` | MIPS64 Linux, n64 ABI (kernel 4.4, glibc 2.23)\n+`mips64el-unknown-linux-gnuabi64` | MIPS64 (LE) Linux, n64 ABI (kernel 4.4, glibc 2.23)\n+`mipsel-unknown-linux-gnu` | MIPS (LE) Linux (kernel 4.4, glibc 2.23)\n+`powerpc-unknown-linux-gnu` | PowerPC Linux (kernel 2.6.32, glibc 2.11)\n+`powerpc64-unknown-linux-gnu` | PPC64 Linux (kernel 2.6.32, glibc 2.11)\n+`powerpc64le-unknown-linux-gnu` | PPC64LE Linux (kernel 3.10, glibc 2.17)\n+`riscv64gc-unknown-linux-gnu` | RISC-V Linux (kernel 4.20, glibc 2.29)\n+`s390x-unknown-linux-gnu` | S390x Linux (kernel 2.6.32, glibc 2.11)\n+`x86_64-unknown-freebsd` | 64-bit FreeBSD\n+`x86_64-unknown-illumos` | illumos\n+`x86_64-unknown-linux-musl` | 64-bit Linux with MUSL\n+`x86_64-unknown-netbsd` | NetBSD/amd64\n+\n ## Tier 2\n \n-Tier 2 platforms can be thought of as \"guaranteed to build\". Automated tests\n-are not run so it's not guaranteed to produce a working build, but platforms\n-often work to quite a good degree and patches are always welcome!\n-Specifically, these platforms are required to have each of the following:\n+Tier 2 targets can be thought of as \"guaranteed to build\". The Rust project\n+builds official binary releases for each tier 2 target, and automated builds\n+ensure that each tier 2 target builds after each change. Automated tests are\n+not always run so it's not guaranteed to produce a working build, but tier 2\n+targets often work to quite a good degree and patches are always welcome! For\n+the full requirements, see [Tier 2 target\n+policy](target-tier-policy.md#tier-2-target-policy) in the Target Tier Policy.\n \n-* Official binary releases are provided for the platform.\n-* Automated building is set up, but may not be running tests.\n-* Landing changes to the `rust-lang/rust` repository's master branch is gated on\n-    platforms **building**. For some platforms only the standard library is\n-    compiled, but for others `rustc` and `cargo` are too.\n+The `std` column in the table below has the following meanings:\n \n-target | std | host | notes\n--------|-----|------|-------\n-`aarch64-apple-darwin` | \u2713 | \u2713 | ARM64 macOS (11.0+, Big Sur+)\n-`aarch64-apple-ios` | \u2713 |  | ARM64 iOS\n-`aarch64-fuchsia` | \u2713 |  | ARM64 Fuchsia\n-`aarch64-linux-android` | \u2713 |  | ARM64 Android\n-`aarch64-pc-windows-msvc` | \u2713 | \u2713 | ARM64 Windows MSVC\n-`aarch64-unknown-linux-musl` | \u2713 | \u2713 | ARM64 Linux with MUSL\n-`aarch64-unknown-none` | * |  | Bare ARM64, hardfloat\n-`aarch64-unknown-none-softfloat` | * |  | Bare ARM64, softfloat\n-`arm-linux-androideabi` | \u2713 |  | ARMv7 Android\n-`arm-unknown-linux-gnueabi` | \u2713 | \u2713 | ARMv6 Linux (kernel 3.2, glibc 2.17)\n-`arm-unknown-linux-gnueabihf` | \u2713 | \u2713 | ARMv6 Linux, hardfloat (kernel 3.2, glibc 2.17)\n-`arm-unknown-linux-musleabi` | \u2713 |  | ARMv6 Linux with MUSL\n-`arm-unknown-linux-musleabihf` | \u2713 |  | ARMv6 Linux with MUSL, hardfloat\n-`armebv7r-none-eabi` | * |  | Bare ARMv7-R, Big Endian\n-`armebv7r-none-eabihf` | * |  | Bare ARMv7-R, Big Endian, hardfloat\n-`armv5te-unknown-linux-gnueabi` | \u2713 |  | ARMv5TE Linux (kernel 4.4, glibc 2.23)\n-`armv5te-unknown-linux-musleabi` | \u2713 |  | ARMv5TE Linux with MUSL\n-`armv7-linux-androideabi` | \u2713 |  | ARMv7a Android\n-`armv7a-none-eabi` | * |  | Bare ARMv7-A\n-`armv7r-none-eabi` | * |  | Bare ARMv7-R\n-`armv7r-none-eabihf` | * |  | Bare ARMv7-R, hardfloat\n-`armv7-unknown-linux-gnueabi` | \u2713 |   | ARMv7 Linux (kernel 4.15, glibc 2.27)\n-`armv7-unknown-linux-gnueabihf` | \u2713 | \u2713 | ARMv7 Linux, hardfloat (kernel 3.2, glibc 2.17)\n-`armv7-unknown-linux-musleabi` | \u2713 |   | ARMv7 Linux, MUSL\n-`armv7-unknown-linux-musleabihf` | \u2713 |  | ARMv7 Linux with MUSL\n-`asmjs-unknown-emscripten` | \u2713 |  | asm.js via Emscripten\n-`i586-pc-windows-msvc` | \u2713 |  | 32-bit Windows w/o SSE\n-`i586-unknown-linux-gnu` | \u2713 |  | 32-bit Linux w/o SSE (kernel 4.4, glibc 2.23)\n-`i586-unknown-linux-musl` | \u2713 |  | 32-bit Linux w/o SSE, MUSL\n-`i686-linux-android` | \u2713 |  | 32-bit x86 Android\n-`i686-unknown-freebsd` | \u2713 |  | 32-bit FreeBSD\n-`i686-unknown-linux-musl` | \u2713 |  | 32-bit Linux with MUSL\n-`mips-unknown-linux-gnu` | \u2713 | \u2713 | MIPS Linux (kernel 4.4, glibc 2.23)\n-`mips-unknown-linux-musl` | \u2713 |  | MIPS Linux with MUSL\n-`mips64-unknown-linux-gnuabi64` | \u2713 | \u2713 | MIPS64 Linux, n64 ABI (kernel 4.4, glibc 2.23)\n-`mips64-unknown-linux-muslabi64` | \u2713 |  | MIPS64 Linux, n64 ABI, MUSL\n-`mips64el-unknown-linux-gnuabi64` | \u2713 | \u2713 | MIPS64 (LE) Linux, n64 ABI (kernel 4.4, glibc 2.23)\n-`mips64el-unknown-linux-muslabi64` | \u2713 |  | MIPS64 (LE) Linux, n64 ABI, MUSL\n-`mipsel-unknown-linux-gnu` | \u2713 | \u2713 | MIPS (LE) Linux (kernel 4.4, glibc 2.23)\n-`mipsel-unknown-linux-musl` | \u2713 |  | MIPS (LE) Linux with MUSL\n-`nvptx64-nvidia-cuda` | \u2713 |  | --emit=asm generates PTX code that [runs on NVIDIA GPUs]\n-`powerpc-unknown-linux-gnu` | \u2713 | \u2713 | PowerPC Linux (kernel 2.6.32, glibc 2.11)\n-`powerpc64-unknown-linux-gnu` | \u2713 | \u2713 | PPC64 Linux (kernel 2.6.32, glibc 2.11)\n-`powerpc64le-unknown-linux-gnu` | \u2713 | \u2713 | PPC64LE Linux (kernel 3.10, glibc 2.17)\n-`riscv32i-unknown-none-elf` | * |  | Bare RISC-V (RV32I ISA)\n-`riscv32imac-unknown-none-elf` | * |  | Bare RISC-V (RV32IMAC ISA)\n-`riscv32imc-unknown-none-elf` | * |  | Bare RISC-V (RV32IMC ISA)\n-`riscv64gc-unknown-linux-gnu` | \u2713 | \u2713 | RISC-V Linux (kernel 4.20, glibc 2.29)\n-`riscv64gc-unknown-none-elf` | * |  | Bare RISC-V (RV64IMAFDC ISA)\n-`riscv64imac-unknown-none-elf` | * |  | Bare RISC-V (RV64IMAC ISA)\n-`s390x-unknown-linux-gnu` | \u2713 | \u2713 | S390x Linux (kernel 2.6.32, glibc 2.11)\n-`sparc64-unknown-linux-gnu` | \u2713 |  | SPARC Linux (kernel 4.4, glibc 2.23)\n-`sparcv9-sun-solaris` | \u2713 |  | SPARC Solaris 10/11, illumos\n-`thumbv6m-none-eabi` | * |  | Bare Cortex-M0, M0+, M1\n-`thumbv7em-none-eabi` | * |  | Bare Cortex-M4, M7\n-`thumbv7em-none-eabihf` | * |  | Bare Cortex-M4F, M7F, FPU, hardfloat\n-`thumbv7m-none-eabi` | * |  | Bare Cortex-M3\n-`thumbv7neon-linux-androideabi` | \u2713 |  | Thumb2-mode ARMv7a Android with NEON\n-`thumbv7neon-unknown-linux-gnueabihf` | \u2713 |  | Thumb2-mode ARMv7a Linux with NEON (kernel 4.4, glibc 2.23)\n-`thumbv8m.base-none-eabi` | * |  | ARMv8-M Baseline\n-`thumbv8m.main-none-eabi` | * |  | ARMv8-M Mainline\n-`thumbv8m.main-none-eabihf` | * |  | ARMv8-M Mainline, hardfloat\n-`wasm32-unknown-emscripten` | \u2713 |  | WebAssembly via Emscripten\n-`wasm32-unknown-unknown` | \u2713 |  | WebAssembly\n-`wasm32-wasi` | \u2713 |  | WebAssembly with WASI\n-`x86_64-apple-ios` | \u2713 |  | 64-bit x86 iOS\n-`x86_64-fortanix-unknown-sgx` | \u2713 |  | [Fortanix ABI] for 64-bit Intel SGX\n-`x86_64-fuchsia` | \u2713 |  | 64-bit Fuchsia\n-`x86_64-linux-android` | \u2713 |  | 64-bit x86 Android\n-`x86_64-pc-solaris` | \u2713 |  | 64-bit Solaris 10/11, illumos\n-`x86_64-unknown-freebsd` | \u2713 | \u2713 | 64-bit FreeBSD\n-`x86_64-unknown-illumos` | \u2713 | \u2713 | illumos\n-`x86_64-unknown-linux-gnux32` | \u2713 |  | 64-bit Linux (x32 ABI) (kernel 4.15, glibc 2.27)\n-`x86_64-unknown-linux-musl` | \u2713 | \u2713 | 64-bit Linux with MUSL\n-`x86_64-unknown-netbsd` | \u2713 | \u2713 | NetBSD/amd64\n-`x86_64-unknown-redox` | \u2713 |  | Redox OS\n+* \u2713 indicates the full standard library is available.\n+* \\* indicates the target only supports [`no_std`] development.\n+\n+[`no_std`]: https://rust-embedded.github.io/book/intro/no-std.html\n+\n+target | std | notes\n+-------|-----|-------\n+`aarch64-apple-ios` | \u2713 | ARM64 iOS\n+`aarch64-fuchsia` | \u2713 | ARM64 Fuchsia\n+`aarch64-linux-android` | \u2713 | ARM64 Android\n+`aarch64-unknown-none-softfloat` | * | Bare ARM64, softfloat\n+`aarch64-unknown-none` | * | Bare ARM64, hardfloat\n+`arm-linux-androideabi` | \u2713 | ARMv7 Android\n+`arm-unknown-linux-musleabi` | \u2713 | ARMv6 Linux with MUSL\n+`arm-unknown-linux-musleabihf` | \u2713 | ARMv6 Linux with MUSL, hardfloat\n+`armebv7r-none-eabi` | * | Bare ARMv7-R, Big Endian\n+`armebv7r-none-eabihf` | * | Bare ARMv7-R, Big Endian, hardfloat\n+`armv5te-unknown-linux-gnueabi` | \u2713 | ARMv5TE Linux (kernel 4.4, glibc 2.23)\n+`armv5te-unknown-linux-musleabi` | \u2713 | ARMv5TE Linux with MUSL\n+`armv7-linux-androideabi` | \u2713 | ARMv7a Android\n+`armv7-unknown-linux-gnueabi` | \u2713 |ARMv7 Linux (kernel 4.15, glibc 2.27)\n+`armv7-unknown-linux-musleabi` | \u2713 |ARMv7 Linux, MUSL\n+`armv7-unknown-linux-musleabihf` | \u2713 | ARMv7 Linux with MUSL\n+`armv7a-none-eabi` | * | Bare ARMv7-A\n+`armv7r-none-eabi` | * | Bare ARMv7-R\n+`armv7r-none-eabihf` | * | Bare ARMv7-R, hardfloat\n+`asmjs-unknown-emscripten` | \u2713 | asm.js via Emscripten\n+`i586-pc-windows-msvc` | \u2713 | 32-bit Windows w/o SSE\n+`i586-unknown-linux-gnu` | \u2713 | 32-bit Linux w/o SSE (kernel 4.4, glibc 2.23)\n+`i586-unknown-linux-musl` | \u2713 | 32-bit Linux w/o SSE, MUSL\n+`i686-linux-android` | \u2713 | 32-bit x86 Android\n+`i686-unknown-freebsd` | \u2713 | 32-bit FreeBSD\n+`i686-unknown-linux-musl` | \u2713 | 32-bit Linux with MUSL\n+`mips-unknown-linux-musl` | \u2713 | MIPS Linux with MUSL\n+`mips64-unknown-linux-muslabi64` | \u2713 | MIPS64 Linux, n64 ABI, MUSL\n+`mips64el-unknown-linux-muslabi64` | \u2713 | MIPS64 (LE) Linux, n64 ABI, MUSL\n+`mipsel-unknown-linux-musl` | \u2713 | MIPS (LE) Linux with MUSL\n+`nvptx64-nvidia-cuda` | \u2713 | --emit=asm generates PTX code that [runs on NVIDIA GPUs]\n+`riscv32i-unknown-none-elf` | * | Bare RISC-V (RV32I ISA)\n+`riscv32imac-unknown-none-elf` | * | Bare RISC-V (RV32IMAC ISA)\n+`riscv32imc-unknown-none-elf` | * | Bare RISC-V (RV32IMC ISA)\n+`riscv64gc-unknown-none-elf` | * | Bare RISC-V (RV64IMAFDC ISA)\n+`riscv64imac-unknown-none-elf` | * | Bare RISC-V (RV64IMAC ISA)\n+`sparc64-unknown-linux-gnu` | \u2713 | SPARC Linux (kernel 4.4, glibc 2.23)\n+`sparcv9-sun-solaris` | \u2713 | SPARC Solaris 10/11, illumos\n+`thumbv6m-none-eabi` | * | Bare Cortex-M0, M0+, M1\n+`thumbv7em-none-eabi` | * | Bare Cortex-M4, M7\n+`thumbv7em-none-eabihf` | * | Bare Cortex-M4F, M7F, FPU, hardfloat\n+`thumbv7m-none-eabi` | * | Bare Cortex-M3\n+`thumbv7neon-linux-androideabi` | \u2713 | Thumb2-mode ARMv7a Android with NEON\n+`thumbv7neon-unknown-linux-gnueabihf` | \u2713 | Thumb2-mode ARMv7a Linux with NEON (kernel 4.4, glibc 2.23)\n+`thumbv8m.base-none-eabi` | * | ARMv8-M Baseline\n+`thumbv8m.main-none-eabi` | * | ARMv8-M Mainline\n+`thumbv8m.main-none-eabihf` | * | ARMv8-M Mainline, hardfloat\n+`wasm32-unknown-emscripten` | \u2713 | WebAssembly via Emscripten\n+`wasm32-unknown-unknown` | \u2713 | WebAssembly\n+`wasm32-wasi` | \u2713 | WebAssembly with WASI\n+`x86_64-apple-ios` | \u2713 | 64-bit x86 iOS\n+`x86_64-fortanix-unknown-sgx` | \u2713 | [Fortanix ABI] for 64-bit Intel SGX\n+`x86_64-fuchsia` | \u2713 | 64-bit Fuchsia\n+`x86_64-linux-android` | \u2713 | 64-bit x86 Android\n+`x86_64-pc-solaris` | \u2713 | 64-bit Solaris 10/11, illumos\n+`x86_64-unknown-linux-gnux32` | \u2713 | 64-bit Linux (x32 ABI) (kernel 4.15, glibc 2.27)\n+`x86_64-unknown-redox` | \u2713 | Redox OS\n \n [Fortanix ABI]: https://edp.fortanix.com/\n \n ## Tier 3\n \n-Tier 3 platforms are those which the Rust codebase has support for, but which\n-are not built or tested automatically, and may not work. Official builds are\n-not available.\n+Tier 3 targets are those which the Rust codebase has support for, but which the\n+Rust project does not build or test automatically, so they may or may not work.\n+Official builds are not available. For the full requirements, see [Tier 3\n+target policy](target-tier-policy.md#tier-3-target-policy) in the Target Tier\n+Policy.\n+\n+The `std` column in the table below has the following meanings:\n+\n+* \u2713 indicates the full standard library is available.\n+* \\* indicates the target only supports [`no_std`] development.\n+* ? indicates the standard library support is unknown or a work-in-progress.\n+\n+[`no_std`]: https://rust-embedded.github.io/book/intro/no-std.html\n+\n+The `host` column indicates whether the codebase includes support for building\n+host tools.\n \n target | std | host | notes\n -------|-----|------|-------\n@@ -163,8 +206,8 @@ target | std | host | notes\n `aarch64-unknown-redox` | ? |  | ARM64 Redox OS\n `aarch64-uwp-windows-msvc` | ? |  |\n `aarch64-wrs-vxworks` | ? |  |\n-`aarch64_be-unknown-linux-gnu` | \u2713 | \u2713 | ARM64 Linux (big-endian)\n `aarch64_be-unknown-linux-gnu_ilp32` | \u2713 | \u2713 | ARM64 Linux (big-endian, ILP32 ABI)\n+`aarch64_be-unknown-linux-gnu` | \u2713 | \u2713 | ARM64 Linux (big-endian)\n `armv4t-unknown-linux-gnueabi` | ? |  |\n `armv5te-unknown-linux-uclibceabi` | ? |  | ARMv5TE Linux with uClibc\n `armv6-unknown-freebsd` | \u2713 | \u2713 | ARMv6 FreeBSD\n@@ -175,22 +218,22 @@ target | std | host | notes\n `armv7-wrs-vxworks-eabihf` | ? |  |\n `armv7a-none-eabihf` | * | | ARM Cortex-A, hardfloat\n `armv7s-apple-ios` | \u2713 |  |\n-`avr-unknown-gnu-atmega328` | \u2717 |  | AVR. Requires `-Z build-std=core`\n+`avr-unknown-gnu-atmega328` | * |  | AVR. Requires `-Z build-std=core`\n `hexagon-unknown-linux-musl` | ? |  |\n `i386-apple-ios` | \u2713 |  | 32-bit x86 iOS\n `i686-apple-darwin` | \u2713 | \u2713 | 32-bit macOS (10.7+, Lion+)\n `i686-pc-windows-msvc` | \u2713 |  | 32-bit Windows XP support\n-`i686-unknown-uefi` | * |  | 32-bit UEFI\n `i686-unknown-haiku` | \u2713 | \u2713 | 32-bit Haiku\n `i686-unknown-netbsd` | \u2713 | \u2713 | NetBSD/i386 with SSE2\n `i686-unknown-openbsd` | \u2713 | \u2713 | 32-bit OpenBSD\n+`i686-unknown-uefi` | * |  | 32-bit UEFI\n `i686-uwp-windows-gnu` | ? |  |\n `i686-uwp-windows-msvc` | ? |  |\n `i686-wrs-vxworks` | ? |  |\n `mips-unknown-linux-uclibc` | \u2713 |  | MIPS Linux with uClibc\n+`mipsel-sony-psp` | * |  | MIPS (LE) Sony PlayStation Portable (PSP)\n `mipsel-unknown-linux-uclibc` | \u2713 |  | MIPS (LE) Linux with uClibc\n `mipsel-unknown-none` | * |  | Bare MIPS (LE) softfloat\n-`mipsel-sony-psp` | * |  | MIPS (LE) Sony PlayStation Portable (PSP)\n `mipsisa32r6-unknown-linux-gnu` | ? |  |\n `mipsisa32r6el-unknown-linux-gnu` | ? |  |\n `mipsisa64r6-unknown-linux-gnuabi64` | ? |  |\n@@ -200,34 +243,34 @@ target | std | host | notes\n `powerpc-unknown-linux-musl` | ? |  |\n `powerpc-unknown-netbsd` | \u2713 | \u2713 |\n `powerpc-unknown-openbsd` | ? |  |\n-`powerpc-wrs-vxworks` | ? |  |\n `powerpc-wrs-vxworks-spe` | ? |  |\n+`powerpc-wrs-vxworks` | ? |  |\n `powerpc64-unknown-freebsd` | \u2713 | \u2713 | PPC64 FreeBSD (ELFv1 and ELFv2)\n `powerpc64-unknown-linux-musl` | ? |  |\n `powerpc64-wrs-vxworks` | ? |  |\n `powerpc64le-unknown-linux-musl` | ? |  |\n-`riscv64gc-unknown-linux-musl` |   |   | RISC-V Linux (kernel 4.20, musl 1.2.0)\n `riscv32gc-unknown-linux-gnu` |   |   | RISC-V Linux (kernel 5.4, glibc 2.33)\n `riscv32gc-unknown-linux-musl` |   |   | RISC-V Linux (kernel 5.4, musl + RISCV32 support patches)\n+`riscv64gc-unknown-linux-musl` |   |   | RISC-V Linux (kernel 4.20, musl 1.2.0)\n `s390x-unknown-linux-musl` |  |  | S390x Linux (kernel 2.6.32, MUSL)\n `sparc-unknown-linux-gnu` | \u2713 |  | 32-bit SPARC Linux\n `sparc64-unknown-netbsd` | \u2713 | \u2713 | NetBSD/sparc64\n `sparc64-unknown-openbsd` | ? |  |\n+`thumbv4t-none-eabi` | * |  | ARMv4T T32\n `thumbv7a-pc-windows-msvc` | ? |  |\n `thumbv7a-uwp-windows-msvc` | \u2713 |  |\n `thumbv7neon-unknown-linux-musleabihf` | ? |  | Thumb2-mode ARMv7a Linux with NEON, MUSL\n-`thumbv4t-none-eabi` | * |  | ARMv4T T32\n `wasm64-unknown-unknown` | * |  | WebAssembly\n `x86_64-apple-ios-macabi` | \u2713 |  | Apple Catalyst on x86_64\n `x86_64-apple-tvos` | * | | x86 64-bit tvOS\n-`x86_64-unknown-none-linuxkernel` | * |  | Linux kernel modules\n-`x86_64-sun-solaris` | ? |  | Deprecated target for 64-bit Solaris 10/11, illumos\n `x86_64-pc-windows-msvc` | \u2713 |  | 64-bit Windows XP support\n+`x86_64-sun-solaris` | ? |  | Deprecated target for 64-bit Solaris 10/11, illumos\n `x86_64-unknown-dragonfly` | \u2713 | \u2713 | 64-bit DragonFlyBSD\n `x86_64-unknown-haiku` | \u2713 | \u2713 | 64-bit Haiku\n `x86_64-unknown-hermit` | ? |  |\n-`x86_64-unknown-none-hermitkernel` | ? |  | HermitCore kernel\n `x86_64-unknown-l4re-uclibc` | ? |  |\n+`x86_64-unknown-none-hermitkernel` | ? |  | HermitCore kernel\n+`x86_64-unknown-none-linuxkernel` | * |  | Linux kernel modules\n `x86_64-unknown-openbsd` | \u2713 | \u2713 | 64-bit OpenBSD\n `x86_64-unknown-uefi` | * |  | 64-bit UEFI\n `x86_64-uwp-windows-gnu` | \u2713 |  |"}]}