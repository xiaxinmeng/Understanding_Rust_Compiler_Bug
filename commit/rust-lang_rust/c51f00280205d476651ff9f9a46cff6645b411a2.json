{"sha": "c51f00280205d476651ff9f9a46cff6645b411a2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM1MWYwMDI4MDIwNWQ0NzY2NTFmZjlmOWE0NmNmZjY2NDViNDExYTI=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2018-05-17T09:45:34Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2018-05-21T17:57:54Z"}, "message": "Only escape extended grapheme characters in the first position", "tree": {"sha": "07b1bf6c4e79740cb0d84137eeae7935e27cbed3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/07b1bf6c4e79740cb0d84137eeae7935e27cbed3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c51f00280205d476651ff9f9a46cff6645b411a2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c51f00280205d476651ff9f9a46cff6645b411a2", "html_url": "https://github.com/rust-lang/rust/commit/c51f00280205d476651ff9f9a46cff6645b411a2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c51f00280205d476651ff9f9a46cff6645b411a2/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8c89e7f3d58ff110aa4de64aef8ef29f78ebf456", "url": "https://api.github.com/repos/rust-lang/rust/commits/8c89e7f3d58ff110aa4de64aef8ef29f78ebf456", "html_url": "https://github.com/rust-lang/rust/commit/8c89e7f3d58ff110aa4de64aef8ef29f78ebf456"}], "stats": {"total": 43, "additions": 28, "deletions": 15}, "files": [{"sha": "8af14d3c698d2573d60d5be3ec0ef39586ed23cf", "filename": "src/liballoc/str.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c51f00280205d476651ff9f9a46cff6645b411a2/src%2Fliballoc%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c51f00280205d476651ff9f9a46cff6645b411a2/src%2Fliballoc%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fstr.rs?ref=c51f00280205d476651ff9f9a46cff6645b411a2", "patch": "@@ -372,12 +372,15 @@ impl str {\n \n     /// Escapes each char in `s` with [`char::escape_debug`].\n     ///\n+    /// Note: only extended grapheme codepoints that begin the string will be\n+    /// escaped.\n+    ///\n     /// [`char::escape_debug`]: primitive.char.html#method.escape_debug\n     #[unstable(feature = \"str_escape\",\n                reason = \"return type may change to be an iterator\",\n                issue = \"27791\")]\n     pub fn escape_debug(&self) -> String {\n-        self.chars().flat_map(|c| c.escape_debug()).collect()\n+        self.chars().enumerate().flat_map(|(i, c)| c.escape_debug_ext(i == 0)).collect()\n     }\n \n     /// Escapes each char in `s` with [`char::escape_default`]."}, {"sha": "84c97abcbc28f850914634cda1a5051edd96473e", "filename": "src/liballoc/tests/str.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c51f00280205d476651ff9f9a46cff6645b411a2/src%2Fliballoc%2Ftests%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c51f00280205d476651ff9f9a46cff6645b411a2/src%2Fliballoc%2Ftests%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Fstr.rs?ref=c51f00280205d476651ff9f9a46cff6645b411a2", "patch": "@@ -999,7 +999,7 @@ fn test_escape_debug() {\n     assert_eq!(\"\\u{10000}\\u{10ffff}\".escape_debug(), \"\\u{10000}\\\\u{10ffff}\");\n     assert_eq!(\"ab\\u{200b}\".escape_debug(), \"ab\\\\u{200b}\");\n     assert_eq!(\"\\u{10d4ea}\\r\".escape_debug(), \"\\\\u{10d4ea}\\\\r\");\n-    assert_eq!(\"\\u{301}a\\u{301}b\u00e9\\u{e000}\".escape_debug(), \"\\\\u{301}a\\\\u{301}b\u00e9\\\\u{e000}\");\n+    assert_eq!(\"\\u{301}a\\u{301}b\u00e9\\u{e000}\".escape_debug(), \"\\\\u{301}a\\u{301}b\u00e9\\\\u{e000}\");\n }\n \n #[test]"}, {"sha": "f6b201fe06dea429e44b9b6e8006bb5b500db179", "filename": "src/libcore/char/methods.rs", "status": "modified", "additions": 22, "deletions": 12, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/c51f00280205d476651ff9f9a46cff6645b411a2/src%2Flibcore%2Fchar%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c51f00280205d476651ff9f9a46cff6645b411a2/src%2Flibcore%2Fchar%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fchar%2Fmethods.rs?ref=c51f00280205d476651ff9f9a46cff6645b411a2", "patch": "@@ -187,6 +187,27 @@ impl char {\n         }\n     }\n \n+    /// An extended version of `escape_debug` that optionally permits escaping\n+    /// Extended Grapheme codepoints. This allows us to format characters like\n+    /// nonspacing marks better when they're at the start of a string.\n+    #[doc(hidden)]\n+    #[unstable(feature = \"str_internals\", issue = \"0\")]\n+    #[inline]\n+    pub fn escape_debug_ext(self, escape_grapheme_extended: bool) -> EscapeDebug {\n+        let init_state = match self {\n+            '\\t' => EscapeDefaultState::Backslash('t'),\n+            '\\r' => EscapeDefaultState::Backslash('r'),\n+            '\\n' => EscapeDefaultState::Backslash('n'),\n+            '\\\\' | '\\'' | '\"' => EscapeDefaultState::Backslash(self),\n+            _ if escape_grapheme_extended && self.is_grapheme_extended() => {\n+                EscapeDefaultState::Unicode(self.escape_unicode())\n+            }\n+            _ if is_printable(self) => EscapeDefaultState::Char(self),\n+            _ => EscapeDefaultState::Unicode(self.escape_unicode()),\n+        };\n+        EscapeDebug(EscapeDefault { state: init_state })\n+    }\n+\n     /// Returns an iterator that yields the literal escape code of a character\n     /// as `char`s.\n     ///\n@@ -224,18 +245,7 @@ impl char {\n     #[stable(feature = \"char_escape_debug\", since = \"1.20.0\")]\n     #[inline]\n     pub fn escape_debug(self) -> EscapeDebug {\n-        let init_state = match self {\n-            '\\t' => EscapeDefaultState::Backslash('t'),\n-            '\\r' => EscapeDefaultState::Backslash('r'),\n-            '\\n' => EscapeDefaultState::Backslash('n'),\n-            '\\\\' | '\\'' | '\"' => EscapeDefaultState::Backslash(self),\n-            _ if self.is_grapheme_extended() => {\n-                EscapeDefaultState::Unicode(self.escape_unicode())\n-            }\n-            _ if is_printable(self) => EscapeDefaultState::Char(self),\n-            _ => EscapeDefaultState::Unicode(self.escape_unicode()),\n-        };\n-        EscapeDebug(EscapeDefault { state: init_state })\n+        self.escape_debug_ext(true)\n     }\n \n     /// Returns an iterator that yields the literal escape code of a character"}, {"sha": "d2a9ed75be658abd1de4a8b2920700ede283ecb6", "filename": "src/libcore/tests/char.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c51f00280205d476651ff9f9a46cff6645b411a2/src%2Flibcore%2Ftests%2Fchar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c51f00280205d476651ff9f9a46cff6645b411a2/src%2Flibcore%2Ftests%2Fchar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fchar.rs?ref=c51f00280205d476651ff9f9a46cff6645b411a2", "patch": "@@ -181,7 +181,7 @@ fn test_escape_debug() {\n     assert_eq!(string('\\u{ff}'), \"\\u{ff}\");\n     assert_eq!(string('\\u{11b}'), \"\\u{11b}\");\n     assert_eq!(string('\\u{1d4b6}'), \"\\u{1d4b6}\");\n-    assert_eq!(string('\\u{301}'), \"'\\\\u{301}'\");     // combining character\n+    assert_eq!(string('\\u{301}'), \"\\\\u{301}\");     // combining character\n     assert_eq!(string('\\u{200b}'),\"\\\\u{200b}\");      // zero width space\n     assert_eq!(string('\\u{e000}'), \"\\\\u{e000}\");     // private use 1\n     assert_eq!(string('\\u{100000}'), \"\\\\u{100000}\"); // private use 2"}]}