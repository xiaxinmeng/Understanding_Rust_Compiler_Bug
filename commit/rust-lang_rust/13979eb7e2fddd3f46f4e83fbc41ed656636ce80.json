{"sha": "13979eb7e2fddd3f46f4e83fbc41ed656636ce80", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEzOTc5ZWI3ZTJmZGRkM2Y0NmY0ZTgzZmJjNDFlZDY1NjYzNmNlODA=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-10-02T00:32:50Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-10-02T01:00:14Z"}, "message": "De-export std::test. Part of #3583.", "tree": {"sha": "2c915fd3a4174d66dbb9d2666f4d91795b1832d9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2c915fd3a4174d66dbb9d2666f4d91795b1832d9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/13979eb7e2fddd3f46f4e83fbc41ed656636ce80", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/13979eb7e2fddd3f46f4e83fbc41ed656636ce80", "html_url": "https://github.com/rust-lang/rust/commit/13979eb7e2fddd3f46f4e83fbc41ed656636ce80", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/13979eb7e2fddd3f46f4e83fbc41ed656636ce80/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7ead3c04112c77e6e6078e99ab19b9e28c172098", "url": "https://api.github.com/repos/rust-lang/rust/commits/7ead3c04112c77e6e6078e99ab19b9e28c172098", "html_url": "https://github.com/rust-lang/rust/commit/7ead3c04112c77e6e6078e99ab19b9e28c172098"}], "stats": {"total": 26, "additions": 7, "deletions": 19}, "files": [{"sha": "6f2c38b03fe6f1fd3039daa4a0eb4aa87a72a41d", "filename": "src/libstd/std.rc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/13979eb7e2fddd3f46f4e83fbc41ed656636ce80/src%2Flibstd%2Fstd.rc", "raw_url": "https://github.com/rust-lang/rust/raw/13979eb7e2fddd3f46f4e83fbc41ed656636ce80/src%2Flibstd%2Fstd.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fstd.rc?ref=13979eb7e2fddd3f46f4e83fbc41ed656636ce80", "patch": "@@ -121,7 +121,6 @@ mod unicode;\n \n // Compiler support modules\n \n-#[legacy_exports]\n mod test;\n #[legacy_exports]\n mod serialization;"}, {"sha": "1df10a4d7997e1aeaa420cb81c1dd1c594bc8465", "filename": "src/libstd/test.rs", "status": "modified", "additions": 7, "deletions": 18, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/13979eb7e2fddd3f46f4e83fbc41ed656636ce80/src%2Flibstd%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13979eb7e2fddd3f46f4e83fbc41ed656636ce80/src%2Flibstd%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftest.rs?ref=13979eb7e2fddd3f46f4e83fbc41ed656636ce80", "patch": "@@ -15,17 +15,6 @@ use libc::size_t;\n use task::TaskBuilder;\n use comm = core::comm;\n \n-export TestName;\n-export TestFn;\n-export TestDesc;\n-export test_main;\n-export TestResult;\n-export TestOpts;\n-export TrOk;\n-export TrFailed;\n-export TrIgnored;\n-export run_tests_console;\n-\n #[abi = \"cdecl\"]\n extern mod rustrt {\n     #[legacy_exports];\n@@ -36,17 +25,17 @@ extern mod rustrt {\n // paths; i.e. it should be a series of identifiers seperated by double\n // colons. This way if some test runner wants to arrange the tests\n // hierarchically it may.\n-type TestName = ~str;\n+pub type TestName = ~str;\n \n // A function that runs a test. If the function returns successfully,\n // the test succeeds; if the function fails then the test fails. We\n // may need to come up with a more clever definition of test in order\n // to support isolation of tests into tasks.\n-type TestFn = fn~();\n+pub type TestFn = fn~();\n \n // The definition of a single test. A test runner will run a list of\n // these.\n-type TestDesc = {\n+pub type TestDesc = {\n     name: TestName,\n     testfn: TestFn,\n     ignore: bool,\n@@ -55,7 +44,7 @@ type TestDesc = {\n \n // The default console test runner. It accepts the command line\n // arguments and a vector of test_descs (generated at compile time).\n-fn test_main(args: &[~str], tests: &[TestDesc]) {\n+pub fn test_main(args: &[~str], tests: &[TestDesc]) {\n     let opts =\n         match parse_opts(args) {\n           either::Left(move o) => o,\n@@ -64,7 +53,7 @@ fn test_main(args: &[~str], tests: &[TestDesc]) {\n     if !run_tests_console(&opts, tests) { fail ~\"Some tests failed\"; }\n }\n \n-type TestOpts = {filter: Option<~str>, run_ignored: bool,\n+pub type TestOpts = {filter: Option<~str>, run_ignored: bool,\n                   logfile: Option<~str>};\n \n type OptRes = Either<TestOpts, ~str>;\n@@ -93,7 +82,7 @@ fn parse_opts(args: &[~str]) -> OptRes {\n     return either::Left(test_opts);\n }\n \n-enum TestResult { TrOk, TrFailed, TrIgnored, }\n+pub enum TestResult { TrOk, TrFailed, TrIgnored, }\n \n impl TestResult : Eq {\n     pure fn eq(other: &TestResult) -> bool {\n@@ -113,7 +102,7 @@ type ConsoleTestState =\n       mut failures: ~[TestDesc]};\n \n // A simple console test runner\n-fn run_tests_console(opts: &TestOpts,\n+pub fn run_tests_console(opts: &TestOpts,\n                      tests: &[TestDesc]) -> bool {\n \n     fn callback(event: &TestEvent, st: ConsoleTestState) {"}]}