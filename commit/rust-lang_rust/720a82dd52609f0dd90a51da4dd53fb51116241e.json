{"sha": "720a82dd52609f0dd90a51da4dd53fb51116241e", "node_id": "C_kwDOAAsO6NoAKDcyMGE4MmRkNTI2MDlmMGRkOTBhNTFkYTRkZDUzZmI1MTExNjI0MWU", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-09-08T15:18:38Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-09-08T15:18:38Z"}, "message": "Rollup merge of #101545 - TaKO8Ki:remove-unnecessary-partialord-ord, r=oli-obk\n\nRemove unnecessary `PartialOrd` and `Ord`", "tree": {"sha": "d1838a981b5c41dd342b970736b894b12a980ac6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d1838a981b5c41dd342b970736b894b12a980ac6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/720a82dd52609f0dd90a51da4dd53fb51116241e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjGgfOCRBK7hj4Ov3rIwAA2z0IAI6f4xDKEFH9dQxiyOP5sVNQ\nsGkawm10Wu006CzAWhchrkUbMfcI653gMtVX5zFOxbRWnfK0lgtskjgNQihlPD/H\nryVgVXE8UKf0YRUb9B/LCQ0vdz/t3eR80lRLpsN52q6FuZVFkHrXUyQKH+3sBLF4\nMng97XXYpY/yZUBpKSsBUrzYBNKUtMqQuh2TjPJNzQ/4avPQGqB1279RI+PdjAmS\n+NOVJZ7Vhj1+/3bnYSXiHi1lVkP2HqvLG126oh+NgA5S8/Dmln/ClLtXP4shLNPE\nxX6Wa+1cXQeby2FIDKqvgFAKxsR4MvGg3pR6iu4ZhrRYB9kjPZ8JsWaTCjNw+Ys=\n=kz21\n-----END PGP SIGNATURE-----\n", "payload": "tree d1838a981b5c41dd342b970736b894b12a980ac6\nparent 8d2a492d73761d78cc8a95640428dc0b05e74060\nparent bdc865d8f7f50482ae67e942a98bd554e51dda30\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1662650318 +0530\ncommitter GitHub <noreply@github.com> 1662650318 +0530\n\nRollup merge of #101545 - TaKO8Ki:remove-unnecessary-partialord-ord, r=oli-obk\n\nRemove unnecessary `PartialOrd` and `Ord`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/720a82dd52609f0dd90a51da4dd53fb51116241e", "html_url": "https://github.com/rust-lang/rust/commit/720a82dd52609f0dd90a51da4dd53fb51116241e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/720a82dd52609f0dd90a51da4dd53fb51116241e/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8d2a492d73761d78cc8a95640428dc0b05e74060", "url": "https://api.github.com/repos/rust-lang/rust/commits/8d2a492d73761d78cc8a95640428dc0b05e74060", "html_url": "https://github.com/rust-lang/rust/commit/8d2a492d73761d78cc8a95640428dc0b05e74060"}, {"sha": "bdc865d8f7f50482ae67e942a98bd554e51dda30", "url": "https://api.github.com/repos/rust-lang/rust/commits/bdc865d8f7f50482ae67e942a98bd554e51dda30", "html_url": "https://github.com/rust-lang/rust/commit/bdc865d8f7f50482ae67e942a98bd554e51dda30"}], "stats": {"total": 34, "additions": 7, "deletions": 27}, "files": [{"sha": "de70b17e44ccd77204faa0d68b6be9091c984f91", "filename": "compiler/rustc_borrowck/src/region_infer/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/720a82dd52609f0dd90a51da4dd53fb51116241e/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/720a82dd52609f0dd90a51da4dd53fb51116241e/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fmod.rs?ref=720a82dd52609f0dd90a51da4dd53fb51116241e", "patch": "@@ -135,7 +135,6 @@ pub struct RegionInferenceContext<'tcx> {\n /// adds a new lower bound to the SCC it is analyzing: so you wind up\n /// with `'R: 'O` where `'R` is the pick-region and `'O` is the\n /// minimal viable option.\n-#[derive(Copy, Clone, Debug, Eq, PartialEq, Ord, PartialOrd)]\n pub(crate) struct AppliedMemberConstraint {\n     /// The SCC that was affected. (The \"member region\".)\n     ///"}, {"sha": "3e02d2ebb7e3e05bc207fc72d01fb657e5c5a2d7", "filename": "compiler/rustc_errors/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/720a82dd52609f0dd90a51da4dd53fb51116241e/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/720a82dd52609f0dd90a51da4dd53fb51116241e/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Flib.rs?ref=720a82dd52609f0dd90a51da4dd53fb51116241e", "patch": "@@ -456,7 +456,7 @@ struct HandlerInner {\n }\n \n /// A key denoting where from a diagnostic was stashed.\n-#[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug)]\n+#[derive(Copy, Clone, PartialEq, Eq, Hash)]\n pub enum StashKey {\n     ItemNoType,\n     UnderscoreForArrayLengths,"}, {"sha": "b44ee02cfe3bb2af57d692d79c892054af5ed815", "filename": "compiler/rustc_hir/src/def.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/720a82dd52609f0dd90a51da4dd53fb51116241e/compiler%2Frustc_hir%2Fsrc%2Fdef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/720a82dd52609f0dd90a51da4dd53fb51116241e/compiler%2Frustc_hir%2Fsrc%2Fdef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fdef.rs?ref=720a82dd52609f0dd90a51da4dd53fb51116241e", "patch": "@@ -457,7 +457,7 @@ impl PartialRes {\n \n /// Different kinds of symbols can coexist even if they share the same textual name.\n /// Therefore, they each have a separate universe (known as a \"namespace\").\n-#[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug)]\n+#[derive(Copy, Clone, PartialEq, Eq, Hash, Debug)]\n pub enum Namespace {\n     /// The type namespace includes `struct`s, `enum`s, `union`s, `trait`s, and `mod`s\n     /// (and, by extension, crates)."}, {"sha": "a79c982649afca775168aa27d61a4a875bad075a", "filename": "compiler/rustc_lexer/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/720a82dd52609f0dd90a51da4dd53fb51116241e/compiler%2Frustc_lexer%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/720a82dd52609f0dd90a51da4dd53fb51116241e/compiler%2Frustc_lexer%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lexer%2Fsrc%2Flib.rs?ref=720a82dd52609f0dd90a51da4dd53fb51116241e", "patch": "@@ -141,7 +141,7 @@ pub enum TokenKind {\n     Unknown,\n }\n \n-#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]\n+#[derive(Clone, Copy, Debug, PartialEq, Eq)]\n pub enum DocStyle {\n     Outer,\n     Inner,"}, {"sha": "1f7643a76afe505a3ab21c71399a36b439a9d837", "filename": "compiler/rustc_middle/src/mir/syntax.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/720a82dd52609f0dd90a51da4dd53fb51116241e/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fsyntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/720a82dd52609f0dd90a51da4dd53fb51116241e/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fsyntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fsyntax.rs?ref=720a82dd52609f0dd90a51da4dd53fb51116241e", "patch": "@@ -741,7 +741,7 @@ pub enum TerminatorKind<'tcx> {\n }\n \n /// Information about an assertion failure.\n-#[derive(Clone, TyEncodable, TyDecodable, Hash, HashStable, PartialEq, PartialOrd)]\n+#[derive(Clone, TyEncodable, TyDecodable, Hash, HashStable, PartialEq)]\n pub enum AssertKind<O> {\n     BoundsCheck { len: O, index: O },\n     Overflow(BinOp, O, O),"}, {"sha": "02a9958525b2229ebd8fc3d825a2449ffee2ef10", "filename": "compiler/rustc_middle/src/mir/terminator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/720a82dd52609f0dd90a51da4dd53fb51116241e/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fterminator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/720a82dd52609f0dd90a51da4dd53fb51116241e/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fterminator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fterminator.rs?ref=720a82dd52609f0dd90a51da4dd53fb51116241e", "patch": "@@ -14,7 +14,7 @@ use std::slice;\n \n pub use super::query::*;\n \n-#[derive(Debug, Clone, TyEncodable, TyDecodable, Hash, HashStable, PartialEq, PartialOrd)]\n+#[derive(Debug, Clone, TyEncodable, TyDecodable, Hash, HashStable, PartialEq)]\n pub struct SwitchTargets {\n     /// Possible values. The locations to branch to in each case\n     /// are found in the corresponding indices from the `targets` vector."}, {"sha": "749a78a7552ed366f9463672d1c59d4df3bf5ccd", "filename": "compiler/rustc_resolve/src/lib.rs", "status": "modified", "additions": 2, "deletions": 21, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/720a82dd52609f0dd90a51da4dd53fb51116241e/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/720a82dd52609f0dd90a51da4dd53fb51116241e/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flib.rs?ref=720a82dd52609f0dd90a51da4dd53fb51116241e", "patch": "@@ -57,7 +57,7 @@ use rustc_span::{Span, DUMMY_SP};\n use smallvec::{smallvec, SmallVec};\n use std::cell::{Cell, RefCell};\n use std::collections::BTreeSet;\n-use std::{cmp, fmt, ptr};\n+use std::{fmt, ptr};\n \n use diagnostics::{ImportSuggestion, LabelSuggestion, Suggestion};\n use imports::{Import, ImportKind, ImportResolver, NameResolution};\n@@ -163,32 +163,13 @@ enum ImplTraitContext {\n     Universal(LocalDefId),\n }\n \n-#[derive(Eq)]\n struct BindingError {\n     name: Symbol,\n     origin: BTreeSet<Span>,\n     target: BTreeSet<Span>,\n     could_be_path: bool,\n }\n \n-impl PartialOrd for BindingError {\n-    fn partial_cmp(&self, other: &BindingError) -> Option<cmp::Ordering> {\n-        Some(self.cmp(other))\n-    }\n-}\n-\n-impl PartialEq for BindingError {\n-    fn eq(&self, other: &BindingError) -> bool {\n-        self.name == other.name\n-    }\n-}\n-\n-impl Ord for BindingError {\n-    fn cmp(&self, other: &BindingError) -> cmp::Ordering {\n-        self.name.cmp(&other.name)\n-    }\n-}\n-\n enum ResolutionError<'a> {\n     /// Error E0401: can't use type or const parameters from outer function.\n     GenericParamsFromOuterFunction(Res, HasGenericParams),\n@@ -845,7 +826,7 @@ impl<'a> NameBinding<'a> {\n     }\n }\n \n-#[derive(Debug, Default, Clone)]\n+#[derive(Default, Clone)]\n pub struct ExternPreludeEntry<'a> {\n     extern_crate_item: Option<&'a NameBinding<'a>>,\n     pub introduced_by_item: bool,"}]}