{"sha": "d1e20488a5d1258b1582caa2db77e5210b8bd28f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQxZTIwNDg4YTVkMTI1OGIxNTgyY2FhMmRiNzdlNTIxMGI4YmQyOGY=", "commit": {"author": {"name": "Kevin Butler", "email": "haqkrs@gmail.com", "date": "2014-04-08T01:30:08Z"}, "committer": {"name": "Kevin Butler", "email": "haqkrs@gmail.com", "date": "2014-04-11T19:27:01Z"}, "message": "Parameterize contains_nul for BytesContainer.", "tree": {"sha": "1f2bd0e6c2fefa86deba85d0d6f7c7d2d38b29df", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1f2bd0e6c2fefa86deba85d0d6f7c7d2d38b29df"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d1e20488a5d1258b1582caa2db77e5210b8bd28f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d1e20488a5d1258b1582caa2db77e5210b8bd28f", "html_url": "https://github.com/rust-lang/rust/commit/d1e20488a5d1258b1582caa2db77e5210b8bd28f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d1e20488a5d1258b1582caa2db77e5210b8bd28f/comments", "author": {"login": "Ryman", "id": 994978, "node_id": "MDQ6VXNlcjk5NDk3OA==", "avatar_url": "https://avatars.githubusercontent.com/u/994978?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Ryman", "html_url": "https://github.com/Ryman", "followers_url": "https://api.github.com/users/Ryman/followers", "following_url": "https://api.github.com/users/Ryman/following{/other_user}", "gists_url": "https://api.github.com/users/Ryman/gists{/gist_id}", "starred_url": "https://api.github.com/users/Ryman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Ryman/subscriptions", "organizations_url": "https://api.github.com/users/Ryman/orgs", "repos_url": "https://api.github.com/users/Ryman/repos", "events_url": "https://api.github.com/users/Ryman/events{/privacy}", "received_events_url": "https://api.github.com/users/Ryman/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Ryman", "id": 994978, "node_id": "MDQ6VXNlcjk5NDk3OA==", "avatar_url": "https://avatars.githubusercontent.com/u/994978?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Ryman", "html_url": "https://github.com/Ryman", "followers_url": "https://api.github.com/users/Ryman/followers", "following_url": "https://api.github.com/users/Ryman/following{/other_user}", "gists_url": "https://api.github.com/users/Ryman/gists{/gist_id}", "starred_url": "https://api.github.com/users/Ryman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Ryman/subscriptions", "organizations_url": "https://api.github.com/users/Ryman/orgs", "repos_url": "https://api.github.com/users/Ryman/repos", "events_url": "https://api.github.com/users/Ryman/events{/privacy}", "received_events_url": "https://api.github.com/users/Ryman/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "65abf96fb6630d7ddbcdc3b39f599c02ecfc2f1e", "url": "https://api.github.com/repos/rust-lang/rust/commits/65abf96fb6630d7ddbcdc3b39f599c02ecfc2f1e", "html_url": "https://github.com/rust-lang/rust/commit/65abf96fb6630d7ddbcdc3b39f599c02ecfc2f1e"}], "stats": {"total": 23, "additions": 11, "deletions": 12}, "files": [{"sha": "54a8d8131375c1b6bc98f0b6e0f6c8659aac642d", "filename": "src/libstd/path/mod.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d1e20488a5d1258b1582caa2db77e5210b8bd28f/src%2Flibstd%2Fpath%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1e20488a5d1258b1582caa2db77e5210b8bd28f/src%2Flibstd%2Fpath%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath%2Fmod.rs?ref=d1e20488a5d1258b1582caa2db77e5210b8bd28f", "patch": "@@ -158,15 +158,15 @@ pub trait GenericPath: Clone + GenericPathUnsafe {\n     /// See individual Path impls for additional restrictions.\n     #[inline]\n     fn new<T: BytesContainer>(path: T) -> Self {\n-        assert!(!contains_nul(path.container_as_bytes()));\n+        assert!(!contains_nul(&path));\n         unsafe { GenericPathUnsafe::new_unchecked(path) }\n     }\n \n     /// Creates a new Path from a byte vector or string, if possible.\n     /// The resulting Path will always be normalized.\n     #[inline]\n     fn new_opt<T: BytesContainer>(path: T) -> Option<Self> {\n-        if contains_nul(path.container_as_bytes()) {\n+        if contains_nul(&path) {\n             None\n         } else {\n             Some(unsafe { GenericPathUnsafe::new_unchecked(path) })\n@@ -274,7 +274,7 @@ pub trait GenericPath: Clone + GenericPathUnsafe {\n     /// Fails the task if the filename contains a NUL.\n     #[inline]\n     fn set_filename<T: BytesContainer>(&mut self, filename: T) {\n-        assert!(!contains_nul(filename.container_as_bytes()));\n+        assert!(!contains_nul(&filename));\n         unsafe { self.set_filename_unchecked(filename) }\n     }\n     /// Replaces the extension with the given byte vector or string.\n@@ -286,7 +286,7 @@ pub trait GenericPath: Clone + GenericPathUnsafe {\n     ///\n     /// Fails the task if the extension contains a NUL.\n     fn set_extension<T: BytesContainer>(&mut self, extension: T) {\n-        assert!(!contains_nul(extension.container_as_bytes()));\n+        assert!(!contains_nul(&extension));\n         // borrowck causes problems here too\n         let val = {\n             match self.filename() {\n@@ -376,7 +376,7 @@ pub trait GenericPath: Clone + GenericPathUnsafe {\n     /// Fails the task if the path contains a NUL.\n     #[inline]\n     fn push<T: BytesContainer>(&mut self, path: T) {\n-        assert!(!contains_nul(path.container_as_bytes()));\n+        assert!(!contains_nul(&path));\n         unsafe { self.push_unchecked(path) }\n     }\n     /// Pushes multiple paths (as byte vectors or strings) onto `self`.\n@@ -589,8 +589,8 @@ impl<'a> BytesContainer for str::MaybeOwned<'a> {\n }\n \n #[inline(always)]\n-fn contains_nul(v: &[u8]) -> bool {\n-    v.iter().any(|&x| x == 0)\n+fn contains_nul<T: BytesContainer>(v: &T) -> bool {\n+    v.container_as_bytes().iter().any(|&x| x == 0)\n }\n \n #[cfg(test)]"}, {"sha": "93d8d9e3eb4168d1c0a35e05cc805b4830e04374", "filename": "src/libstd/path/windows.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d1e20488a5d1258b1582caa2db77e5210b8bd28f/src%2Flibstd%2Fpath%2Fwindows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1e20488a5d1258b1582caa2db77e5210b8bd28f/src%2Flibstd%2Fpath%2Fwindows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath%2Fwindows.rs?ref=d1e20488a5d1258b1582caa2db77e5210b8bd28f", "patch": "@@ -306,14 +306,13 @@ impl GenericPathUnsafe for Path {\n impl GenericPath for Path {\n     #[inline]\n     fn new_opt<T: BytesContainer>(path: T) -> Option<Path> {\n-        let s = path.container_as_str();\n-        match s {\n+        match path.container_as_str() {\n             None => None,\n-            Some(s) => {\n-                if contains_nul(s.as_bytes()) {\n+            Some(ref s) => {\n+                if contains_nul(s) {\n                     None\n                 } else {\n-                    Some(unsafe { GenericPathUnsafe::new_unchecked(s) })\n+                    Some(unsafe { GenericPathUnsafe::new_unchecked(*s) })\n                 }\n             }\n         }"}]}