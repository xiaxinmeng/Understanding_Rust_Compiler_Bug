{"sha": "8c89e7f3d58ff110aa4de64aef8ef29f78ebf456", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhjODllN2YzZDU4ZmYxMTBhYTRkZTY0YWVmOGVmMjlmNzhlYmY0NTY=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2018-05-16T22:20:22Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2018-05-21T17:57:54Z"}, "message": "Make {char, str}::escape_debug and impl Debug for {char, str} consistent", "tree": {"sha": "301f03ef2884b409ab53eeeb0bdca89b254cfba2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/301f03ef2884b409ab53eeeb0bdca89b254cfba2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8c89e7f3d58ff110aa4de64aef8ef29f78ebf456", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8c89e7f3d58ff110aa4de64aef8ef29f78ebf456", "html_url": "https://github.com/rust-lang/rust/commit/8c89e7f3d58ff110aa4de64aef8ef29f78ebf456", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8c89e7f3d58ff110aa4de64aef8ef29f78ebf456/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d7aa35eb1bdc61db0842ab81f6c96f24897e61ad", "url": "https://api.github.com/repos/rust-lang/rust/commits/d7aa35eb1bdc61db0842ab81f6c96f24897e61ad", "html_url": "https://github.com/rust-lang/rust/commit/d7aa35eb1bdc61db0842ab81f6c96f24897e61ad"}], "stats": {"total": 20, "additions": 4, "deletions": 16}, "files": [{"sha": "2f38c8b3ae21e9ae0ac6e8523b90cffd98d35792", "filename": "src/liballoc/tests/str.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8c89e7f3d58ff110aa4de64aef8ef29f78ebf456/src%2Fliballoc%2Ftests%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c89e7f3d58ff110aa4de64aef8ef29f78ebf456/src%2Fliballoc%2Ftests%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Fstr.rs?ref=8c89e7f3d58ff110aa4de64aef8ef29f78ebf456", "patch": "@@ -999,6 +999,7 @@ fn test_escape_debug() {\n     assert_eq!(\"\\u{10000}\\u{10ffff}\".escape_debug(), \"\\u{10000}\\\\u{10ffff}\");\n     assert_eq!(\"ab\\u{200b}\".escape_debug(), \"ab\\\\u{200b}\");\n     assert_eq!(\"\\u{10d4ea}\\r\".escape_debug(), \"\\\\u{10d4ea}\\\\r\");\n+    assert_eq!(\"\\u{301}a\\u{301}b\u00e9\\u{e000}\".escape_debug(), \"\\\\u{301}a\\\\u{301}b\u00e9\\\\u{e000}\");\n }\n \n #[test]"}, {"sha": "5820fe58932c6967b5797ca8112dd808e813d270", "filename": "src/libcore/fmt/mod.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8c89e7f3d58ff110aa4de64aef8ef29f78ebf456/src%2Flibcore%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c89e7f3d58ff110aa4de64aef8ef29f78ebf456/src%2Flibcore%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fmod.rs?ref=8c89e7f3d58ff110aa4de64aef8ef29f78ebf456", "patch": "@@ -1844,14 +1844,8 @@ impl Display for str {\n impl Debug for char {\n     fn fmt(&self, f: &mut Formatter) -> Result {\n         f.write_char('\\'')?;\n-        if self.is_nonspacing_mark() {\n-            for c in self.escape_unicode() {\n-                f.write_char(c)?\n-            }\n-        } else {\n-            for c in self.escape_debug() {\n-                f.write_char(c)?\n-            }\n+        for c in self.escape_debug() {\n+            f.write_char(c)?\n         }\n         f.write_char('\\'')\n     }"}, {"sha": "d19e3b527696f93f942f248e65c69dde347db611", "filename": "src/libcore/tests/char.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8c89e7f3d58ff110aa4de64aef8ef29f78ebf456/src%2Flibcore%2Ftests%2Fchar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c89e7f3d58ff110aa4de64aef8ef29f78ebf456/src%2Flibcore%2Ftests%2Fchar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fchar.rs?ref=8c89e7f3d58ff110aa4de64aef8ef29f78ebf456", "patch": "@@ -181,19 +181,12 @@ fn test_escape_debug() {\n     assert_eq!(string('\\u{ff}'), \"\\u{ff}\");\n     assert_eq!(string('\\u{11b}'), \"\\u{11b}\");\n     assert_eq!(string('\\u{1d4b6}'), \"\\u{1d4b6}\");\n+    assert_eq!(string('\\u{301}'), \"'\\\\u{301}'\");     // combining character\n     assert_eq!(string('\\u{200b}'),\"\\\\u{200b}\");      // zero width space\n     assert_eq!(string('\\u{e000}'), \"\\\\u{e000}\");     // private use 1\n     assert_eq!(string('\\u{100000}'), \"\\\\u{100000}\"); // private use 2\n }\n \n-#[test]\n-fn test_debug() {\n-    assert_eq!(format!(\"{:?}\", 'a'), \"'a'\");                // ASCII character\n-    assert_eq!(format!(\"{:?}\", '\u00e9'), \"'\u00e9'\");                // printable character\n-    assert_eq!(format!(\"{:?}\", '\\u{301}'), \"'\\\\u{301}'\");   // combining character\n-    assert_eq!(format!(\"{:?}\", '\\u{e000}'), \"'\\\\u{e000}'\"); // private use 1\n-}\n-\n #[test]\n fn test_escape_default() {\n     fn string(c: char) -> String {"}]}