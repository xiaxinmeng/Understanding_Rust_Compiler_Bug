{"sha": "f8acc8344933d2abab88f77c2b8d7cc7a6498ed9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY4YWNjODM0NDkzM2QyYWJhYjg4Zjc3YzJiOGQ3Y2M3YTY0OThlZDk=", "commit": {"author": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-04-01T15:48:13Z"}, "committer": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-04-01T15:48:13Z"}, "message": "Rustup to 1.9.0-nightly (e1195c24b 2016-03-31)\n\nThis does not require a version bump, it only affects tests.", "tree": {"sha": "22b4ba14ea7d786b535bd4e0e44b60d969394127", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/22b4ba14ea7d786b535bd4e0e44b60d969394127"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f8acc8344933d2abab88f77c2b8d7cc7a6498ed9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f8acc8344933d2abab88f77c2b8d7cc7a6498ed9", "html_url": "https://github.com/rust-lang/rust/commit/f8acc8344933d2abab88f77c2b8d7cc7a6498ed9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f8acc8344933d2abab88f77c2b8d7cc7a6498ed9/comments", "author": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f16da4fddae85c73f088fdc38151eb69b1caffc3", "url": "https://api.github.com/repos/rust-lang/rust/commits/f16da4fddae85c73f088fdc38151eb69b1caffc3", "html_url": "https://github.com/rust-lang/rust/commit/f16da4fddae85c73f088fdc38151eb69b1caffc3"}], "stats": {"total": 18, "additions": 9, "deletions": 9}, "files": [{"sha": "cd86281d8f24879c12ee5b7564b7520a176a62af", "filename": "tests/compile-fail/transmute.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/f8acc8344933d2abab88f77c2b8d7cc7a6498ed9/tests%2Fcompile-fail%2Ftransmute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8acc8344933d2abab88f77c2b8d7cc7a6498ed9/tests%2Fcompile-fail%2Ftransmute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Ftransmute.rs?ref=f8acc8344933d2abab88f77c2b8d7cc7a6498ed9", "patch": "@@ -62,19 +62,19 @@ unsafe fn _ptr_to_ref<T, U>(p: *const T, m: *mut T, o: *const U, om: *mut U) {\n fn useless() {\n     unsafe {\n         let _: Vec<i32> = core::intrinsics::transmute(my_vec());\n-        //~^ ERROR transmute from a type (`collections::vec::Vec<i32>`) to itself\n+        //~^ ERROR transmute from a type (`std::vec::Vec<i32>`) to itself\n \n         let _: Vec<i32> = core::mem::transmute(my_vec());\n-        //~^ ERROR transmute from a type (`collections::vec::Vec<i32>`) to itself\n+        //~^ ERROR transmute from a type (`std::vec::Vec<i32>`) to itself\n \n         let _: Vec<i32> = std::intrinsics::transmute(my_vec());\n-        //~^ ERROR transmute from a type (`collections::vec::Vec<i32>`) to itself\n+        //~^ ERROR transmute from a type (`std::vec::Vec<i32>`) to itself\n \n         let _: Vec<i32> = std::mem::transmute(my_vec());\n-        //~^ ERROR transmute from a type (`collections::vec::Vec<i32>`) to itself\n+        //~^ ERROR transmute from a type (`std::vec::Vec<i32>`) to itself\n \n         let _: Vec<i32> = my_transmute(my_vec());\n-        //~^ ERROR transmute from a type (`collections::vec::Vec<i32>`) to itself\n+        //~^ ERROR transmute from a type (`std::vec::Vec<i32>`) to itself\n \n         let _: Vec<u32> = core::intrinsics::transmute(my_vec());\n         let _: Vec<u32> = core::mem::transmute(my_vec());\n@@ -92,16 +92,16 @@ fn crosspointer() {\n \n     unsafe {\n         let _: Vec<i32> = core::intrinsics::transmute(vec_const_ptr);\n-        //~^ ERROR transmute from a type (`*const collections::vec::Vec<i32>`) to the type that it points to (`collections::vec::Vec<i32>`)\n+        //~^ ERROR transmute from a type (`*const std::vec::Vec<i32>`) to the type that it points to (`std::vec::Vec<i32>`)\n \n         let _: Vec<i32> = core::intrinsics::transmute(vec_mut_ptr);\n-        //~^ ERROR transmute from a type (`*mut collections::vec::Vec<i32>`) to the type that it points to (`collections::vec::Vec<i32>`)\n+        //~^ ERROR transmute from a type (`*mut std::vec::Vec<i32>`) to the type that it points to (`std::vec::Vec<i32>`)\n \n         let _: *const Vec<i32> = core::intrinsics::transmute(my_vec());\n-        //~^ ERROR transmute from a type (`collections::vec::Vec<i32>`) to a pointer to that type (`*const collections::vec::Vec<i32>`)\n+        //~^ ERROR transmute from a type (`std::vec::Vec<i32>`) to a pointer to that type (`*const std::vec::Vec<i32>`)\n \n         let _: *mut Vec<i32> = core::intrinsics::transmute(my_vec());\n-        //~^ ERROR transmute from a type (`collections::vec::Vec<i32>`) to a pointer to that type (`*mut collections::vec::Vec<i32>`)\n+        //~^ ERROR transmute from a type (`std::vec::Vec<i32>`) to a pointer to that type (`*mut std::vec::Vec<i32>`)\n     }\n }\n "}]}