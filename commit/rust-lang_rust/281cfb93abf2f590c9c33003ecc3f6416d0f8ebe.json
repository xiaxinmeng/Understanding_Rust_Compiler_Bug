{"sha": "281cfb93abf2f590c9c33003ecc3f6416d0f8ebe", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI4MWNmYjkzYWJmMmY1OTBjOWMzMzAwM2VjYzNmNjQxNmQwZjhlYmU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-07-05T17:31:11Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-07-05T17:31:11Z"}, "message": "Auto merge of #26798 - steveklabnik:rollup, r=steveklabnik\n\n- Successful merges: #26785, #26787, #26788, #26791, #26792, #26795\n- Failed merges: #26796", "tree": {"sha": "1c12a4128cfc36673062fa461dd210c0ec2caa04", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1c12a4128cfc36673062fa461dd210c0ec2caa04"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/281cfb93abf2f590c9c33003ecc3f6416d0f8ebe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/281cfb93abf2f590c9c33003ecc3f6416d0f8ebe", "html_url": "https://github.com/rust-lang/rust/commit/281cfb93abf2f590c9c33003ecc3f6416d0f8ebe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/281cfb93abf2f590c9c33003ecc3f6416d0f8ebe/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f9f580936d81ed527115ae86375f69bb77723b1c", "url": "https://api.github.com/repos/rust-lang/rust/commits/f9f580936d81ed527115ae86375f69bb77723b1c", "html_url": "https://github.com/rust-lang/rust/commit/f9f580936d81ed527115ae86375f69bb77723b1c"}, {"sha": "89d7dd1b33eaa60f265ae73764c7af564ff8fca6", "url": "https://api.github.com/repos/rust-lang/rust/commits/89d7dd1b33eaa60f265ae73764c7af564ff8fca6", "html_url": "https://github.com/rust-lang/rust/commit/89d7dd1b33eaa60f265ae73764c7af564ff8fca6"}], "stats": {"total": 58, "additions": 34, "deletions": 24}, "files": [{"sha": "7f40d569308deb8e16cfb50a022306f3c14dfa16", "filename": "src/doc/reference.md", "status": "modified", "additions": 34, "deletions": 24, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/281cfb93abf2f590c9c33003ecc3f6416d0f8ebe/src%2Fdoc%2Freference.md", "raw_url": "https://github.com/rust-lang/rust/raw/281cfb93abf2f590c9c33003ecc3f6416d0f8ebe/src%2Fdoc%2Freference.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Freference.md?ref=281cfb93abf2f590c9c33003ecc3f6416d0f8ebe", "patch": "@@ -338,12 +338,16 @@ type of the literal. The integer suffix must be the name of one of the\n integral types: `u8`, `i8`, `u16`, `i16`, `u32`, `i32`, `u64`, `i64`,\n `isize`, or `usize`.\n \n-The type of an _unsuffixed_ integer literal is determined by type inference.\n-If an integer type can be _uniquely_ determined from the surrounding program\n-context, the unsuffixed integer literal has that type. If the program context\n-underconstrains the type, it defaults to the signed 32-bit integer `i32`; if\n-the program context overconstrains the type, it is considered a static type\n-error.\n+The type of an _unsuffixed_ integer literal is determined by type inference:\n+\n+* If an integer type can be _uniquely_ determined from the surrounding\n+  program context, the unsuffixed integer literal has that type.\n+\n+* If the program context underconstrains the type, it defaults to the\n+  signed 32-bit integer `i32`.\n+\n+* If the program context overconstrains the type, it is considered a\n+  static type error.\n \n Examples of integer literals of various forms:\n \n@@ -371,12 +375,17 @@ The suffix forcibly sets the type of the literal. There are two valid\n _floating-point suffixes_, `f32` and `f64` (the 32-bit and 64-bit floating point\n types), which explicitly determine the type of the literal.\n \n-The type of an _unsuffixed_ floating-point literal is determined by type\n-inference. If a floating-point type can be _uniquely_ determined from the\n-surrounding program context, the unsuffixed floating-point literal has that type.\n-If the program context underconstrains the type, it defaults to double-precision `f64`;\n-if the program context overconstrains the type, it is considered a static type\n-error.\n+The type of an _unsuffixed_ floating-point literal is determined by\n+type inference:\n+\n+* If a floating-point type can be _uniquely_ determined from the\n+  surrounding program context, the unsuffixed floating-point literal\n+  has that type.\n+\n+* If the program context underconstrains the type, it defaults to `f64`.\n+\n+* If the program context overconstrains the type, it is considered a\n+  static type error.\n \n Examples of floating-point literals of various forms:\n \n@@ -2963,14 +2972,12 @@ move values (depending on their type) from the environment into the lambda\n expression's captured environment.\n \n In this example, we define a function `ten_times` that takes a higher-order\n-function argument, and call it with a lambda expression as an argument:\n+function argument, and we then call it with a lambda expression as an argument:\n \n ```\n fn ten_times<F>(f: F) where F: Fn(i32) {\n-    let mut i = 0i32;\n-    while i < 10 {\n-        f(i);\n-        i += 1;\n+    for index in 0..10 {\n+        f(index);\n     }\n }\n \n@@ -3319,10 +3326,13 @@ An example of a tuple type and its use:\n \n ```\n type Pair<'a> = (i32, &'a str);\n-let p: Pair<'static> = (10, \"hello\");\n+let p: Pair<'static> = (10, \"ten\");\n let (a, b) = p;\n-assert!(b != \"world\");\n-assert!(p.0 == 10);\n+\n+assert_eq!(a, 10);\n+assert_eq!(b, \"ten\");\n+assert_eq!(p.0, 10);\n+assert_eq!(p.1, \"ten\");\n ```\n \n For historical reasons and convenience, the tuple type with no elements (`()`)\n@@ -3332,8 +3342,8 @@ is often called \u2018unit\u2019 or \u2018the unit type\u2019.\n \n Rust has two different types for a list of items:\n \n-* `[T; N]`, an 'array'.\n-* `&[T]`, a 'slice'.\n+* `[T; N]`, an 'array'\n+* `&[T]`, a 'slice'\n \n An array has a fixed size, and can be allocated on either the stack or the\n heap.\n@@ -3486,7 +3496,7 @@ x = bo(5,7);\n \n #### Function types for specific items\n \n-Internally to the compiler, there are also function types that are specific to a particular\n+Internal to the compiler, there are also function types that are specific to a particular\n function item. In the following snippet, for example, the internal types of the functions\n `foo` and `bar` are different, despite the fact that they have the same signature:\n \n@@ -3643,7 +3653,7 @@ Coercions are defined in [RFC401]. A coercion is implicit and has no syntax.\n ### Coercion sites\n \n A coercion can only occur at certain coercion sites in a program; these are\n-typically places where the desired type is explicit or can be dervied by\n+typically places where the desired type is explicit or can be derived by\n propagation from explicit types (without type inference). Possible coercion\n sites are:\n "}]}