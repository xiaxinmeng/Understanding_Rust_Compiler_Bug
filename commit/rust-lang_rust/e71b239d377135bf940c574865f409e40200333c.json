{"sha": "e71b239d377135bf940c574865f409e40200333c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU3MWIyMzlkMzc3MTM1YmY5NDBjNTc0ODY1ZjQwOWU0MDIwMDMzM2M=", "commit": {"author": {"name": "vsrs", "email": "vit@conrlab.com", "date": "2021-07-31T07:18:38Z"}, "committer": {"name": "vsrs", "email": "vit@conrlab.com", "date": "2021-08-02T16:49:36Z"}, "message": "fix generated tests", "tree": {"sha": "7c8224664d0776cc2c3bacb40e562b4a78c1e1f3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7c8224664d0776cc2c3bacb40e562b4a78c1e1f3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e71b239d377135bf940c574865f409e40200333c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e71b239d377135bf940c574865f409e40200333c", "html_url": "https://github.com/rust-lang/rust/commit/e71b239d377135bf940c574865f409e40200333c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e71b239d377135bf940c574865f409e40200333c/comments", "author": {"login": "vsrs", "id": 62505555, "node_id": "MDQ6VXNlcjYyNTA1NTU1", "avatar_url": "https://avatars.githubusercontent.com/u/62505555?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vsrs", "html_url": "https://github.com/vsrs", "followers_url": "https://api.github.com/users/vsrs/followers", "following_url": "https://api.github.com/users/vsrs/following{/other_user}", "gists_url": "https://api.github.com/users/vsrs/gists{/gist_id}", "starred_url": "https://api.github.com/users/vsrs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vsrs/subscriptions", "organizations_url": "https://api.github.com/users/vsrs/orgs", "repos_url": "https://api.github.com/users/vsrs/repos", "events_url": "https://api.github.com/users/vsrs/events{/privacy}", "received_events_url": "https://api.github.com/users/vsrs/received_events", "type": "User", "site_admin": false}, "committer": {"login": "vsrs", "id": 62505555, "node_id": "MDQ6VXNlcjYyNTA1NTU1", "avatar_url": "https://avatars.githubusercontent.com/u/62505555?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vsrs", "html_url": "https://github.com/vsrs", "followers_url": "https://api.github.com/users/vsrs/followers", "following_url": "https://api.github.com/users/vsrs/following{/other_user}", "gists_url": "https://api.github.com/users/vsrs/gists{/gist_id}", "starred_url": "https://api.github.com/users/vsrs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vsrs/subscriptions", "organizations_url": "https://api.github.com/users/vsrs/orgs", "repos_url": "https://api.github.com/users/vsrs/repos", "events_url": "https://api.github.com/users/vsrs/events{/privacy}", "received_events_url": "https://api.github.com/users/vsrs/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0088f84c8841d8dcd392c89367c06baa5aee0736", "url": "https://api.github.com/repos/rust-lang/rust/commits/0088f84c8841d8dcd392c89367c06baa5aee0736", "html_url": "https://github.com/rust-lang/rust/commit/0088f84c8841d8dcd392c89367c06baa5aee0736"}], "stats": {"total": 49, "additions": 24, "deletions": 25}, "files": [{"sha": "3a3afa7e07dc689c5017d9479e0879baf8ba7cf3", "filename": "crates/ide_assists/src/handlers/sort_items.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e71b239d377135bf940c574865f409e40200333c/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fsort_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e71b239d377135bf940c574865f409e40200333c/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fsort_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fsort_items.rs?ref=e71b239d377135bf940c574865f409e40200333c", "patch": "@@ -62,7 +62,6 @@ use crate::{utils::get_methods, AssistContext, AssistId, AssistKind, Assists};\n // ->\n // ```\n // enum Animal {\n-//   // variants sorted\n //   Cat { weight: f64, name: String },\n //   Dog(String, f64),\n // }\n@@ -79,7 +78,7 @@ use crate::{utils::get_methods, AssistContext, AssistId, AssistKind, Assists};\n // ```\n // enum Animal {\n //   Dog(String, f64),\n-//   Cat { name: String, weight: f64 }, // Cat fields sorted\n+//   Cat { name: String, weight: f64 },\n // }\n // ```\n pub(crate) fn sort_items(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {"}, {"sha": "1d9d14d941649d0cc728c3c9f8f229439afe3f0e", "filename": "crates/ide_assists/src/tests/generated.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e71b239d377135bf940c574865f409e40200333c/crates%2Fide_assists%2Fsrc%2Ftests%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e71b239d377135bf940c574865f409e40200333c/crates%2Fide_assists%2Fsrc%2Ftests%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Ftests%2Fgenerated.rs?ref=e71b239d377135bf940c574865f409e40200333c", "patch": "@@ -1539,7 +1539,7 @@ struct Foo { first: String, second: u32 }\n #[test]\n fn doctest_sort_items_1() {\n     check_doc_test(\n-        \"sort_items_1\",\n+        \"sort_items\",\n         r#####\"\n trait $0Bar {\n     fn second(&self) -> u32;\n@@ -1558,7 +1558,7 @@ trait Bar {\n #[test]\n fn doctest_sort_items_2() {\n     check_doc_test(\n-        \"sort_items_2\",\n+        \"sort_items\",\n         r#####\"\n struct Baz;\n impl $0Baz {\n@@ -1579,7 +1579,7 @@ impl Baz {\n #[test]\n fn doctest_sort_items_3() {\n     check_doc_test(\n-        \"sort_items_3\",\n+        \"sort_items\",\n         r#####\"\n en$0um Animal {\n   Dog(String, f64),\n@@ -1588,7 +1588,6 @@ en$0um Animal {\n \"#####,\n         r#####\"\n enum Animal {\n-  // variants sorted\n   Cat { weight: f64, name: String },\n   Dog(String, f64),\n }\n@@ -1599,7 +1598,7 @@ enum Animal {\n #[test]\n fn doctest_sort_items_4() {\n     check_doc_test(\n-        \"sort_items_4\",\n+        \"sort_items\",\n         r#####\"\n enum Animal {\n   Dog(String, f64),\n@@ -1609,7 +1608,7 @@ enum Animal {\n         r#####\"\n enum Animal {\n   Dog(String, f64),\n-  Cat { name: String, weight: f64 }, // Cat fields sorted\n+  Cat { name: String, weight: f64 },\n }\n \"#####,\n     )"}, {"sha": "2af1de66fadbe0205d188ac604360ae09add8a11", "filename": "crates/ide_assists/src/tests/sourcegen.rs", "status": "modified", "additions": 18, "deletions": 17, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/e71b239d377135bf940c574865f409e40200333c/crates%2Fide_assists%2Fsrc%2Ftests%2Fsourcegen.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e71b239d377135bf940c574865f409e40200333c/crates%2Fide_assists%2Fsrc%2Ftests%2Fsourcegen.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Ftests%2Fsourcegen.rs?ref=e71b239d377135bf940c574865f409e40200333c", "patch": "@@ -17,9 +17,10 @@ use super::check_doc_test;\n         .to_string();\n         for assist in assists.iter() {\n             for (idx, section) in assist.sections.iter().enumerate() {\n-                let id = if idx == 0 { assist.id.clone() } else { format!(\"{}_{}\", &assist.id, idx)};\n+                let test_id =\n+                    if idx == 0 { assist.id.clone() } else { format!(\"{}_{}\", &assist.id, idx) };\n                 let test = format!(\n-                r######\"\n+                    r######\"\n #[test]\n fn doctest_{}() {{\n     check_doc_test(\n@@ -29,13 +30,13 @@ r#####\"\n {}\"#####)\n }}\n \"######,\n-                    &id,\n-                    &id,\n+                    &test_id,\n+                    &assist.id,\n                     reveal_hash_comments(&section.before),\n                     reveal_hash_comments(&section.after)\n                 );\n-    \n-                buf.push_str(&test)    \n+\n+                buf.push_str(&test)\n             }\n         }\n         let buf = sourcegen::add_preamble(\"sourcegen_assists_docs\", sourcegen::reformat(buf));\n@@ -58,7 +59,8 @@ r#####\"\n         fs::write(dst, contents).unwrap();\n     }\n }\n-#[derive(Debug)]struct Section {\n+#[derive(Debug)]\n+struct Section {\n     doc: String,\n     before: String,\n     after: String,\n@@ -68,7 +70,7 @@ r#####\"\n struct Assist {\n     id: String,\n     location: sourcegen::Location,\n-    sections: Vec<Section>\n+    sections: Vec<Section>,\n }\n \n impl Assist {\n@@ -106,14 +108,14 @@ impl Assist {\n                         \"\\n\\n{}: assist docs should be proper sentences, with capitalization and a full stop at the end.\\n\\n{}\\n\\n\",\n                         &assist.id, doc,\n                     );\n-    \n+\n                     let before = take_until(lines.by_ref(), \"```\");\n-    \n+\n                     assert_eq!(lines.next().unwrap().as_str(), \"->\");\n                     assert_eq!(lines.next().unwrap().as_str(), \"```\");\n                     let after = take_until(lines.by_ref(), \"```\");\n \n-                    assist.sections.push(Section{doc, before, after});\n+                    assist.sections.push(Section { doc, before, after });\n                 }\n \n                 acc.push(assist)\n@@ -139,16 +141,15 @@ impl fmt::Display for Assist {\n             f,\n             \"[discrete]\\n=== `{}`\n **Source:** {}\",\n-            self.id,\n-            self.location,\n-            );\n+            self.id, self.location,\n+        );\n \n         for section in &self.sections {\n             let before = section.before.replace(\"$0\", \"\u2503\"); // Unicode pseudo-graphics bar\n             let after = section.after.replace(\"$0\", \"\u2503\");\n-            let _= writeln!(\n+            let _ = writeln!(\n                 f,\n-\"\n+                \"\n {}\n \n .Before\n@@ -161,7 +162,7 @@ impl fmt::Display for Assist {\n                 section.doc,\n                 hide_hash_comments(&before),\n                 hide_hash_comments(&after)\n-            );    \n+            );\n         }\n \n         Ok(())"}]}