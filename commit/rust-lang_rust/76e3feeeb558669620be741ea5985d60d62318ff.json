{"sha": "76e3feeeb558669620be741ea5985d60d62318ff", "node_id": "C_kwDOAAsO6NoAKDc2ZTNmZWVlYjU1ODY2OTYyMGJlNzQxZWE1OTg1ZDYwZDYyMzE4ZmY", "commit": {"author": {"name": "John-John Tedro", "email": "udoprog@tedro.se", "date": "2021-11-18T04:19:58Z"}, "committer": {"name": "John-John Tedro", "email": "udoprog@tedro.se", "date": "2021-11-18T04:20:53Z"}, "message": "Remove unwrap in doc path resolution", "tree": {"sha": "0ef7ad017a1e6ea3d699551bb8223d25420793e3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0ef7ad017a1e6ea3d699551bb8223d25420793e3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/76e3feeeb558669620be741ea5985d60d62318ff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/76e3feeeb558669620be741ea5985d60d62318ff", "html_url": "https://github.com/rust-lang/rust/commit/76e3feeeb558669620be741ea5985d60d62318ff", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/76e3feeeb558669620be741ea5985d60d62318ff/comments", "author": {"login": "udoprog", "id": 111092, "node_id": "MDQ6VXNlcjExMTA5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/111092?v=4", "gravatar_id": "", "url": "https://api.github.com/users/udoprog", "html_url": "https://github.com/udoprog", "followers_url": "https://api.github.com/users/udoprog/followers", "following_url": "https://api.github.com/users/udoprog/following{/other_user}", "gists_url": "https://api.github.com/users/udoprog/gists{/gist_id}", "starred_url": "https://api.github.com/users/udoprog/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/udoprog/subscriptions", "organizations_url": "https://api.github.com/users/udoprog/orgs", "repos_url": "https://api.github.com/users/udoprog/repos", "events_url": "https://api.github.com/users/udoprog/events{/privacy}", "received_events_url": "https://api.github.com/users/udoprog/received_events", "type": "User", "site_admin": false}, "committer": {"login": "udoprog", "id": 111092, "node_id": "MDQ6VXNlcjExMTA5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/111092?v=4", "gravatar_id": "", "url": "https://api.github.com/users/udoprog", "html_url": "https://github.com/udoprog", "followers_url": "https://api.github.com/users/udoprog/followers", "following_url": "https://api.github.com/users/udoprog/following{/other_user}", "gists_url": "https://api.github.com/users/udoprog/gists{/gist_id}", "starred_url": "https://api.github.com/users/udoprog/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/udoprog/subscriptions", "organizations_url": "https://api.github.com/users/udoprog/orgs", "repos_url": "https://api.github.com/users/udoprog/repos", "events_url": "https://api.github.com/users/udoprog/events{/privacy}", "received_events_url": "https://api.github.com/users/udoprog/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fdd49b97133a77ff652017d24b72ced37d4a822d", "url": "https://api.github.com/repos/rust-lang/rust/commits/fdd49b97133a77ff652017d24b72ced37d4a822d", "html_url": "https://github.com/rust-lang/rust/commit/fdd49b97133a77ff652017d24b72ced37d4a822d"}], "stats": {"total": 2, "additions": 1, "deletions": 1}, "files": [{"sha": "2f6eed82cb6a0858de096b4f6f13f1664f1643c7", "filename": "crates/hir/src/attrs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/76e3feeeb558669620be741ea5985d60d62318ff/crates%2Fhir%2Fsrc%2Fattrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76e3feeeb558669620be741ea5985d60d62318ff/crates%2Fhir%2Fsrc%2Fattrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fattrs.rs?ref=76e3feeeb558669620be741ea5985d60d62318ff", "patch": "@@ -147,7 +147,7 @@ fn resolve_doc_path(\n         AttrDefId::MacroDefId(_) => return None,\n     };\n     let path = ast::Path::parse(link).ok()?;\n-    let modpath = ModPath::from_src(db.upcast(), path, &Hygiene::new_unhygienic()).unwrap();\n+    let modpath = ModPath::from_src(db.upcast(), path, &Hygiene::new_unhygienic())?;\n     let resolved = resolver.resolve_module_path_in_items(db.upcast(), &modpath);\n     let resolved = if resolved == PerNs::none() {\n         resolver.resolve_module_path_in_trait_assoc_items(db.upcast(), &modpath)?"}]}