{"sha": "67d5435695fa2a62d7a075c50b42ea83a5d19f0d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY3ZDU0MzU2OTVmYTJhNjJkN2EwNzVjNTBiNDJlYTgzYTVkMTlmMGQ=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2021-05-20T15:56:56Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-05-20T15:56:56Z"}, "message": "Rollup merge of #85375 - SkiFire13:fix-85347, r=jackh726\n\nFix missing lifetimes diagnostics after #83759\n\nIn #83759 while rebasing I didn't realize there was a new function for suggesting to add lifetime arguments. It relied on some invariants, namely that if a generic type/trait has angle brackets then it must have some generic argument, which is now no longer true. This PR updates that function to handle the new invariants.\n\nThis also adds a new regression test but I'm not sure if that's the correct place for it.\n\nFixes #85347", "tree": {"sha": "b23b712ad59d53a4bb510a6cfbaf5e1e556e5485", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b23b712ad59d53a4bb510a6cfbaf5e1e556e5485"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/67d5435695fa2a62d7a075c50b42ea83a5d19f0d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgpobICRBK7hj4Ov3rIwAAjtIIACJ53zD8or7UVjFV/21hirmd\nCoBW++eeJNmWNpekBgYdqvcdS1kI4dRRtXcxCT8UhlqUmBJJdg6JQW7c3beG5XG7\nOqkzd4JCef5wuKZ69BgXJkZJV/QlrHm4bjyd5cpQQNcvBcJN70i/FUG6+bf6V/5S\nnKgE5DdGInNvIxdgiV+/17NXu1y/zyeb+Pu0p8KYbF381Opi3/EXbYRAvGgHVptq\nxqbLgLXxIRUeWhkNEtFkZ8d0SVemU1FUQHKPSPOAkD26ww7n/rv5V9BwxwwUeWgq\nlQ60srjehXDxxNVjKWlgZAx2lSO+f65QUgxmAnaxuCEOtmFXqWvDFusbUKt99/o=\n=EFI+\n-----END PGP SIGNATURE-----\n", "payload": "tree b23b712ad59d53a4bb510a6cfbaf5e1e556e5485\nparent ddc376c03d13931bbba5550d6e8436e6ee8173cb\nparent 363eacd8d336e273f234d320dba26e67f7399616\nauthor Guillaume Gomez <guillaume1.gomez@gmail.com> 1621526216 +0200\ncommitter GitHub <noreply@github.com> 1621526216 +0200\n\nRollup merge of #85375 - SkiFire13:fix-85347, r=jackh726\n\nFix missing lifetimes diagnostics after #83759\n\nIn #83759 while rebasing I didn't realize there was a new function for suggesting to add lifetime arguments. It relied on some invariants, namely that if a generic type/trait has angle brackets then it must have some generic argument, which is now no longer true. This PR updates that function to handle the new invariants.\n\nThis also adds a new regression test but I'm not sure if that's the correct place for it.\n\nFixes #85347\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/67d5435695fa2a62d7a075c50b42ea83a5d19f0d", "html_url": "https://github.com/rust-lang/rust/commit/67d5435695fa2a62d7a075c50b42ea83a5d19f0d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/67d5435695fa2a62d7a075c50b42ea83a5d19f0d/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ddc376c03d13931bbba5550d6e8436e6ee8173cb", "url": "https://api.github.com/repos/rust-lang/rust/commits/ddc376c03d13931bbba5550d6e8436e6ee8173cb", "html_url": "https://github.com/rust-lang/rust/commit/ddc376c03d13931bbba5550d6e8436e6ee8173cb"}, {"sha": "363eacd8d336e273f234d320dba26e67f7399616", "url": "https://api.github.com/repos/rust-lang/rust/commits/363eacd8d336e273f234d320dba26e67f7399616", "html_url": "https://github.com/rust-lang/rust/commit/363eacd8d336e273f234d320dba26e67f7399616"}], "stats": {"total": 82, "additions": 45, "deletions": 37}, "files": [{"sha": "aed36b12f3a222aabf6ea972aec910da11671c79", "filename": "compiler/rustc_typeck/src/structured_errors/wrong_number_of_generic_args.rs", "status": "modified", "additions": 16, "deletions": 37, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/67d5435695fa2a62d7a075c50b42ea83a5d19f0d/compiler%2Frustc_typeck%2Fsrc%2Fstructured_errors%2Fwrong_number_of_generic_args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67d5435695fa2a62d7a075c50b42ea83a5d19f0d/compiler%2Frustc_typeck%2Fsrc%2Fstructured_errors%2Fwrong_number_of_generic_args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fstructured_errors%2Fwrong_number_of_generic_args.rs?ref=67d5435695fa2a62d7a075c50b42ea83a5d19f0d", "patch": "@@ -509,44 +509,23 @@ impl<'a, 'tcx> WrongNumberOfGenericArgs<'a, 'tcx> {\n             }\n \n             AngleBrackets::Available => {\n-                // angle brackets exist, so we insert missing arguments after the existing args\n-\n-                assert!(!self.gen_args.args.is_empty());\n-\n-                if self.num_provided_lifetime_args() > 0 {\n-                    let last_lt_arg_span = self.gen_args.args\n-                        [self.num_provided_lifetime_args() - 1]\n-                        .span()\n-                        .shrink_to_hi();\n-                    let source_map = self.tcx.sess.source_map();\n-\n-                    if let Ok(last_gen_arg) = source_map.span_to_snippet(last_lt_arg_span) {\n-                        let sugg = format!(\"{}, {}\", last_gen_arg, suggested_args);\n-\n-                        err.span_suggestion_verbose(\n-                            last_lt_arg_span,\n-                            &msg,\n-                            sugg,\n-                            Applicability::HasPlaceholders,\n-                        );\n-                    }\n+                let (sugg_span, is_first) = if self.num_provided_lifetime_args() == 0 {\n+                    (self.gen_args.span().unwrap().shrink_to_lo(), true)\n                 } else {\n-                    // Non-lifetime arguments included in `gen_args` -> insert missing lifetimes before\n-                    // existing arguments\n-                    let first_arg_span = self.gen_args.args[0].span().shrink_to_lo();\n-                    let source_map = self.tcx.sess.source_map();\n-\n-                    if let Ok(first_gen_arg) = source_map.span_to_snippet(first_arg_span) {\n-                        let sugg = format!(\"{}, {}\", suggested_args, first_gen_arg);\n-\n-                        err.span_suggestion_verbose(\n-                            first_arg_span,\n-                            &msg,\n-                            sugg,\n-                            Applicability::HasPlaceholders,\n-                        );\n-                    }\n-                }\n+                    let last_lt = &self.gen_args.args[self.num_provided_lifetime_args() - 1];\n+                    (last_lt.span().shrink_to_hi(), false)\n+                };\n+                let has_non_lt_args = self.num_provided_type_or_const_args() != 0;\n+                let has_bindings = !self.gen_args.bindings.is_empty();\n+\n+                let sugg_prefix = if is_first { \"\" } else { \", \" };\n+                let sugg_suffix =\n+                    if is_first && (has_non_lt_args || has_bindings) { \", \" } else { \"\" };\n+\n+                let sugg = format!(\"{}{}{}\", sugg_prefix, suggested_args, sugg_suffix);\n+                debug!(\"sugg: {:?}\", sugg);\n+\n+                err.span_suggestion_verbose(sugg_span, &msg, sugg, Applicability::HasPlaceholders);\n             }\n             AngleBrackets::Implied => {\n                 // We never encounter missing lifetimes in situations in which lifetimes are elided"}, {"sha": "f08e38689d6af9e5300969bf74aebe6a919fe746", "filename": "src/test/ui/suggestions/issue-85347.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/67d5435695fa2a62d7a075c50b42ea83a5d19f0d/src%2Ftest%2Fui%2Fsuggestions%2Fissue-85347.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67d5435695fa2a62d7a075c50b42ea83a5d19f0d/src%2Ftest%2Fui%2Fsuggestions%2Fissue-85347.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-85347.rs?ref=67d5435695fa2a62d7a075c50b42ea83a5d19f0d", "patch": "@@ -0,0 +1,10 @@\n+#![allow(incomplete_features)]\n+#![feature(generic_associated_types)]\n+use std::ops::Deref;\n+trait Foo {\n+    type Bar<'a>: Deref<Target = <Self>::Bar<Target = Self>>;\n+    //~^ ERROR this associated type takes 1 lifetime argument but 0 lifetime arguments were supplied\n+    //~| HELP add missing\n+}\n+\n+fn main() {}"}, {"sha": "60594baa29cb65344806b4e1a208e40ebf12fe88", "filename": "src/test/ui/suggestions/issue-85347.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/67d5435695fa2a62d7a075c50b42ea83a5d19f0d/src%2Ftest%2Fui%2Fsuggestions%2Fissue-85347.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/67d5435695fa2a62d7a075c50b42ea83a5d19f0d/src%2Ftest%2Fui%2Fsuggestions%2Fissue-85347.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-85347.stderr?ref=67d5435695fa2a62d7a075c50b42ea83a5d19f0d", "patch": "@@ -0,0 +1,19 @@\n+error[E0107]: this associated type takes 1 lifetime argument but 0 lifetime arguments were supplied\n+  --> $DIR/issue-85347.rs:5:42\n+   |\n+LL |     type Bar<'a>: Deref<Target = <Self>::Bar<Target = Self>>;\n+   |                                          ^^^ expected 1 lifetime argument\n+   |\n+note: associated type defined here, with 1 lifetime parameter: `'a`\n+  --> $DIR/issue-85347.rs:5:10\n+   |\n+LL |     type Bar<'a>: Deref<Target = <Self>::Bar<Target = Self>>;\n+   |          ^^^ --\n+help: add missing lifetime argument\n+   |\n+LL |     type Bar<'a>: Deref<Target = <Self>::Bar<'a, Target = Self>>;\n+   |                                              ^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0107`."}]}