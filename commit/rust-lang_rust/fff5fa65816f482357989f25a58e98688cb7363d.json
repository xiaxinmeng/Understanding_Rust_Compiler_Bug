{"sha": "fff5fa65816f482357989f25a58e98688cb7363d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZmZjVmYTY1ODE2ZjQ4MjM1Nzk4OWYyNWE1OGU5ODY4OGNiNzM2M2Q=", "commit": {"author": {"name": "Cameron Steffen", "email": "cam.steffen94@gmail.com", "date": "2020-11-25T02:57:09Z"}, "committer": {"name": "Cameron Steffen", "email": "cam.steffen94@gmail.com", "date": "2020-11-29T21:34:11Z"}, "message": "Eat collapsible_match dogfood", "tree": {"sha": "4cb70f68177107374494ba8d085921bf0d9e7718", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4cb70f68177107374494ba8d085921bf0d9e7718"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fff5fa65816f482357989f25a58e98688cb7363d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fff5fa65816f482357989f25a58e98688cb7363d", "html_url": "https://github.com/rust-lang/rust/commit/fff5fa65816f482357989f25a58e98688cb7363d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fff5fa65816f482357989f25a58e98688cb7363d/comments", "author": {"login": "camsteffen", "id": 5565418, "node_id": "MDQ6VXNlcjU1NjU0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5565418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camsteffen", "html_url": "https://github.com/camsteffen", "followers_url": "https://api.github.com/users/camsteffen/followers", "following_url": "https://api.github.com/users/camsteffen/following{/other_user}", "gists_url": "https://api.github.com/users/camsteffen/gists{/gist_id}", "starred_url": "https://api.github.com/users/camsteffen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camsteffen/subscriptions", "organizations_url": "https://api.github.com/users/camsteffen/orgs", "repos_url": "https://api.github.com/users/camsteffen/repos", "events_url": "https://api.github.com/users/camsteffen/events{/privacy}", "received_events_url": "https://api.github.com/users/camsteffen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camsteffen", "id": 5565418, "node_id": "MDQ6VXNlcjU1NjU0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5565418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camsteffen", "html_url": "https://github.com/camsteffen", "followers_url": "https://api.github.com/users/camsteffen/followers", "following_url": "https://api.github.com/users/camsteffen/following{/other_user}", "gists_url": "https://api.github.com/users/camsteffen/gists{/gist_id}", "starred_url": "https://api.github.com/users/camsteffen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camsteffen/subscriptions", "organizations_url": "https://api.github.com/users/camsteffen/orgs", "repos_url": "https://api.github.com/users/camsteffen/repos", "events_url": "https://api.github.com/users/camsteffen/events{/privacy}", "received_events_url": "https://api.github.com/users/camsteffen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "28dec3b708c3e0d5e45b6c70f054860cbd53d624", "url": "https://api.github.com/repos/rust-lang/rust/commits/28dec3b708c3e0d5e45b6c70f054860cbd53d624", "html_url": "https://github.com/rust-lang/rust/commit/28dec3b708c3e0d5e45b6c70f054860cbd53d624"}], "stats": {"total": 86, "additions": 30, "deletions": 56}, "files": [{"sha": "f69f6f1412af97d0c35cfc044b887dd6111def9e", "filename": "clippy_lints/src/default.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fff5fa65816f482357989f25a58e98688cb7363d/clippy_lints%2Fsrc%2Fdefault.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fff5fa65816f482357989f25a58e98688cb7363d/clippy_lints%2Fsrc%2Fdefault.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdefault.rs?ref=fff5fa65816f482357989f25a58e98688cb7363d", "patch": "@@ -280,8 +280,7 @@ fn field_reassigned_by_stmt<'tcx>(this: &Stmt<'tcx>, binding_name: Symbol) -> Op\n         // only take assignments to fields where the left-hand side field is a field of\n         // the same binding as the previous statement\n         if let ExprKind::Field(ref binding, field_ident) = assign_lhs.kind;\n-        if let ExprKind::Path(ref qpath) = binding.kind;\n-        if let QPath::Resolved(_, path) = qpath;\n+        if let ExprKind::Path(QPath::Resolved(_, path)) = binding.kind;\n         if let Some(second_binding_name) = path.segments.last();\n         if second_binding_name.ident.name == binding_name;\n         then {"}, {"sha": "1194bd7e55e2566e5ad5c20f741d8888829e5e5f", "filename": "clippy_lints/src/if_let_some_result.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fff5fa65816f482357989f25a58e98688cb7363d/clippy_lints%2Fsrc%2Fif_let_some_result.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fff5fa65816f482357989f25a58e98688cb7363d/clippy_lints%2Fsrc%2Fif_let_some_result.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fif_let_some_result.rs?ref=fff5fa65816f482357989f25a58e98688cb7363d", "patch": "@@ -41,8 +41,7 @@ declare_lint_pass!(OkIfLet => [IF_LET_SOME_RESULT]);\n impl<'tcx> LateLintPass<'tcx> for OkIfLet {\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n         if_chain! { //begin checking variables\n-            if let ExprKind::Match(ref op, ref body, source) = expr.kind; //test if expr is a match\n-            if let MatchSource::IfLetDesugar { .. } = source; //test if it is an If Let\n+            if let ExprKind::Match(ref op, ref body, MatchSource::IfLetDesugar { .. }) = expr.kind; //test if expr is if let\n             if let ExprKind::MethodCall(_, ok_span, ref result_types, _) = op.kind; //check is expr.ok() has type Result<T,E>.ok(, _)\n             if let PatKind::TupleStruct(QPath::Resolved(_, ref x), ref y, _)  = body[0].pat.kind; //get operation\n             if method_chain_args(op, &[\"ok\"]).is_some(); //test to see if using ok() methoduse std::marker::Sized;"}, {"sha": "03e95c9e27f6ae241627945d537a629306da4d73", "filename": "clippy_lints/src/implicit_return.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fff5fa65816f482357989f25a58e98688cb7363d/clippy_lints%2Fsrc%2Fimplicit_return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fff5fa65816f482357989f25a58e98688cb7363d/clippy_lints%2Fsrc%2Fimplicit_return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fimplicit_return.rs?ref=fff5fa65816f482357989f25a58e98688cb7363d", "patch": "@@ -68,8 +68,7 @@ fn expr_match(cx: &LateContext<'_>, expr: &Expr<'_>) {\n                 if_chain! {\n                     if let StmtKind::Semi(expr, ..) = &stmt.kind;\n                     // make sure it's a break, otherwise we want to skip\n-                    if let ExprKind::Break(.., break_expr) = &expr.kind;\n-                    if let Some(break_expr) = break_expr;\n+                    if let ExprKind::Break(.., Some(break_expr)) = &expr.kind;\n                     then {\n                             lint(cx, expr.span, break_expr.span, LINT_BREAK);\n                     }"}, {"sha": "3a01acd8fdc97a94e779a93ce6b3123d43fd4662", "filename": "clippy_lints/src/implicit_saturating_sub.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fff5fa65816f482357989f25a58e98688cb7363d/clippy_lints%2Fsrc%2Fimplicit_saturating_sub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fff5fa65816f482357989f25a58e98688cb7363d/clippy_lints%2Fsrc%2Fimplicit_saturating_sub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fimplicit_saturating_sub.rs?ref=fff5fa65816f482357989f25a58e98688cb7363d", "patch": "@@ -59,8 +59,7 @@ impl<'tcx> LateLintPass<'tcx> for ImplicitSaturatingSub {\n             if let Some(target) = subtracts_one(cx, e);\n \n             // Extracting out the variable name\n-            if let ExprKind::Path(ref assign_path) = target.kind;\n-            if let QPath::Resolved(_, ref ares_path) = assign_path;\n+            if let ExprKind::Path(QPath::Resolved(_, ref ares_path)) = target.kind;\n \n             then {\n                 // Handle symmetric conditions in the if statement"}, {"sha": "a76595ed0897dd85ffa73afc66bfe79211d4392b", "filename": "clippy_lints/src/large_const_arrays.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fff5fa65816f482357989f25a58e98688cb7363d/clippy_lints%2Fsrc%2Flarge_const_arrays.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fff5fa65816f482357989f25a58e98688cb7363d/clippy_lints%2Fsrc%2Flarge_const_arrays.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flarge_const_arrays.rs?ref=fff5fa65816f482357989f25a58e98688cb7363d", "patch": "@@ -52,8 +52,7 @@ impl<'tcx> LateLintPass<'tcx> for LargeConstArrays {\n             if let ItemKind::Const(hir_ty, _) = &item.kind;\n             let ty = hir_ty_to_ty(cx.tcx, hir_ty);\n             if let ty::Array(element_type, cst) = ty.kind();\n-            if let ConstKind::Value(val) = cst.val;\n-            if let ConstValue::Scalar(element_count) = val;\n+            if let ConstKind::Value(ConstValue::Scalar(element_count)) = cst.val;\n             if let Ok(element_count) = element_count.to_machine_usize(&cx.tcx);\n             if let Ok(element_size) = cx.layout_of(element_type).map(|l| l.size.bytes());\n             if self.maximum_allowed_size < element_count * element_size;"}, {"sha": "9a448ab125686cf2ce405a7ca9c1a84416b800c7", "filename": "clippy_lints/src/large_stack_arrays.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fff5fa65816f482357989f25a58e98688cb7363d/clippy_lints%2Fsrc%2Flarge_stack_arrays.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fff5fa65816f482357989f25a58e98688cb7363d/clippy_lints%2Fsrc%2Flarge_stack_arrays.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flarge_stack_arrays.rs?ref=fff5fa65816f482357989f25a58e98688cb7363d", "patch": "@@ -43,8 +43,7 @@ impl<'tcx> LateLintPass<'tcx> for LargeStackArrays {\n         if_chain! {\n             if let ExprKind::Repeat(_, _) = expr.kind;\n             if let ty::Array(element_type, cst) = cx.typeck_results().expr_ty(expr).kind();\n-            if let ConstKind::Value(val) = cst.val;\n-            if let ConstValue::Scalar(element_count) = val;\n+            if let ConstKind::Value(ConstValue::Scalar(element_count)) = cst.val;\n             if let Ok(element_count) = element_count.to_machine_usize(&cx.tcx);\n             if let Ok(element_size) = cx.layout_of(element_type).map(|l| l.size.bytes());\n             if self.maximum_allowed_size < element_count * element_size;"}, {"sha": "b0de355e24226e11838cfd00a457f67cabb7dc9e", "filename": "clippy_lints/src/loops.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fff5fa65816f482357989f25a58e98688cb7363d/clippy_lints%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fff5fa65816f482357989f25a58e98688cb7363d/clippy_lints%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops.rs?ref=fff5fa65816f482357989f25a58e98688cb7363d", "patch": "@@ -1919,8 +1919,7 @@ fn check_for_single_element_loop<'tcx>(\n     if_chain! {\n         if let ExprKind::AddrOf(BorrowKind::Ref, _, ref arg_expr) = arg.kind;\n         if let PatKind::Binding(.., target, _) = pat.kind;\n-        if let ExprKind::Array(ref arg_expr_list) = arg_expr.kind;\n-        if let [arg_expression] = arg_expr_list;\n+        if let ExprKind::Array([arg_expression]) = arg_expr.kind;\n         if let ExprKind::Path(ref list_item) = arg_expression.kind;\n         if let Some(list_item_name) = single_segment_path(list_item).map(|ps| ps.ident.name);\n         if let ExprKind::Block(ref block, _) = body.kind;\n@@ -2025,8 +2024,7 @@ fn check_for_mutability(cx: &LateContext<'_>, bound: &Expr<'_>) -> Option<HirId>\n                 let node_str = cx.tcx.hir().get(hir_id);\n                 if_chain! {\n                     if let Node::Binding(pat) = node_str;\n-                    if let PatKind::Binding(bind_ann, ..) = pat.kind;\n-                    if let BindingAnnotation::Mutable = bind_ann;\n+                    if let PatKind::Binding(BindingAnnotation::Mutable, ..) = pat.kind;\n                     then {\n                         return Some(hir_id);\n                     }"}, {"sha": "80f3045415ede2cb36ddd75915131750874db2f5", "filename": "clippy_lints/src/manual_strip.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fff5fa65816f482357989f25a58e98688cb7363d/clippy_lints%2Fsrc%2Fmanual_strip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fff5fa65816f482357989f25a58e98688cb7363d/clippy_lints%2Fsrc%2Fmanual_strip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmanual_strip.rs?ref=fff5fa65816f482357989f25a58e98688cb7363d", "patch": "@@ -225,8 +225,7 @@ fn find_stripping<'tcx>(\n                 if is_ref_str(self.cx, ex);\n                 let unref = peel_ref(ex);\n                 if let ExprKind::Index(indexed, index) = &unref.kind;\n-                if let Some(range) = higher::range(index);\n-                if let higher::Range { start, end, .. } = range;\n+                if let Some(higher::Range { start, end, .. }) = higher::range(index);\n                 if let ExprKind::Path(path) = &indexed.kind;\n                 if qpath_res(self.cx, path, ex.hir_id) == self.target;\n                 then {"}, {"sha": "c223462af26587309437ec009fbc9ecbe2bd22e7", "filename": "clippy_lints/src/matches.rs", "status": "modified", "additions": 10, "deletions": 14, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/fff5fa65816f482357989f25a58e98688cb7363d/clippy_lints%2Fsrc%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fff5fa65816f482357989f25a58e98688cb7363d/clippy_lints%2Fsrc%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches.rs?ref=fff5fa65816f482357989f25a58e98688cb7363d", "patch": "@@ -652,8 +652,7 @@ impl<'tcx> LateLintPass<'tcx> for Matches {\n         if_chain! {\n             if !in_external_macro(cx.sess(), pat.span);\n             if !in_macro(pat.span);\n-            if let PatKind::Struct(ref qpath, fields, true) = pat.kind;\n-            if let QPath::Resolved(_, ref path) = qpath;\n+            if let PatKind::Struct(QPath::Resolved(_, ref path), fields, true) = pat.kind;\n             if let Some(def_id) = path.res.opt_def_id();\n             let ty = cx.tcx.type_of(def_id);\n             if let ty::Adt(def, _) = ty.kind();\n@@ -962,16 +961,14 @@ fn check_wild_enum_match(cx: &LateContext<'_>, ex: &Expr<'_>, arms: &[Arm<'_>])\n                 if let QPath::Resolved(_, p) = path {\n                     missing_variants.retain(|e| e.ctor_def_id != Some(p.res.def_id()));\n                 }\n-            } else if let PatKind::TupleStruct(ref path, ref patterns, ..) = arm.pat.kind {\n-                if let QPath::Resolved(_, p) = path {\n-                    // Some simple checks for exhaustive patterns.\n-                    // There is a room for improvements to detect more cases,\n-                    // but it can be more expensive to do so.\n-                    let is_pattern_exhaustive =\n-                        |pat: &&Pat<'_>| matches!(pat.kind, PatKind::Wild | PatKind::Binding(.., None));\n-                    if patterns.iter().all(is_pattern_exhaustive) {\n-                        missing_variants.retain(|e| e.ctor_def_id != Some(p.res.def_id()));\n-                    }\n+            } else if let PatKind::TupleStruct(QPath::Resolved(_, p), ref patterns, ..) = arm.pat.kind {\n+                // Some simple checks for exhaustive patterns.\n+                // There is a room for improvements to detect more cases,\n+                // but it can be more expensive to do so.\n+                let is_pattern_exhaustive =\n+                    |pat: &&Pat<'_>| matches!(pat.kind, PatKind::Wild | PatKind::Binding(.., None));\n+                if patterns.iter().all(is_pattern_exhaustive) {\n+                    missing_variants.retain(|e| e.ctor_def_id != Some(p.res.def_id()));\n                 }\n             }\n         }\n@@ -1446,8 +1443,7 @@ fn is_ref_some_arm(arm: &Arm<'_>) -> Option<BindingAnnotation> {\n         if let ExprKind::Call(ref e, ref args) = remove_blocks(&arm.body).kind;\n         if let ExprKind::Path(ref some_path) = e.kind;\n         if match_qpath(some_path, &paths::OPTION_SOME) && args.len() == 1;\n-        if let ExprKind::Path(ref qpath) = args[0].kind;\n-        if let &QPath::Resolved(_, ref path2) = qpath;\n+        if let ExprKind::Path(QPath::Resolved(_, ref path2)) = args[0].kind;\n         if path2.segments.len() == 1 && ident.name == path2.segments[0].ident.name;\n         then {\n             return Some(rb)"}, {"sha": "44c974b9d98577c2add2c02bedb8f8e1feea592e", "filename": "clippy_lints/src/methods/manual_saturating_arithmetic.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fff5fa65816f482357989f25a58e98688cb7363d/clippy_lints%2Fsrc%2Fmethods%2Fmanual_saturating_arithmetic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fff5fa65816f482357989f25a58e98688cb7363d/clippy_lints%2Fsrc%2Fmethods%2Fmanual_saturating_arithmetic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmanual_saturating_arithmetic.rs?ref=fff5fa65816f482357989f25a58e98688cb7363d", "patch": "@@ -90,8 +90,7 @@ fn is_min_or_max<'tcx>(cx: &LateContext<'tcx>, expr: &hir::Expr<'_>) -> Option<M\n     if_chain! {\n         if let hir::ExprKind::Call(func, args) = &expr.kind;\n         if args.is_empty();\n-        if let hir::ExprKind::Path(path) = &func.kind;\n-        if let hir::QPath::TypeRelative(_, segment) = path;\n+        if let hir::ExprKind::Path(hir::QPath::TypeRelative(_, segment)) = &func.kind;\n         then {\n             match &*segment.ident.as_str() {\n                 \"max_value\" => return Some(MinMax::Max),"}, {"sha": "42f97b2ac497aa3151bda4f96da00c3a190b9930", "filename": "clippy_lints/src/needless_bool.rs", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/fff5fa65816f482357989f25a58e98688cb7363d/clippy_lints%2Fsrc%2Fneedless_bool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fff5fa65816f482357989f25a58e98688cb7363d/clippy_lints%2Fsrc%2Fneedless_bool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_bool.rs?ref=fff5fa65816f482357989f25a58e98688cb7363d", "patch": "@@ -6,7 +6,6 @@ use crate::utils::sugg::Sugg;\n use crate::utils::{\n     higher, is_expn_of, parent_node_is_if_expr, snippet_with_applicability, span_lint, span_lint_and_sugg,\n };\n-use if_chain::if_chain;\n use rustc_ast::ast::LitKind;\n use rustc_errors::Applicability;\n use rustc_hir::{BinOpKind, Block, Expr, ExprKind, StmtKind, UnOp};\n@@ -198,13 +197,9 @@ struct ExpressionInfoWithSpan {\n }\n \n fn is_unary_not(e: &Expr<'_>) -> (bool, Span) {\n-    if_chain! {\n-        if let ExprKind::Unary(unop, operand) = e.kind;\n-        if let UnOp::UnNot = unop;\n-        then {\n-            return (true, operand.span);\n-        }\n-    };\n+    if let ExprKind::Unary(UnOp::UnNot, operand) = e.kind {\n+        return (true, operand.span);\n+    }\n     (false, e.span)\n }\n "}, {"sha": "b91233ac582808dd7916039fe4c219bf4862634d", "filename": "clippy_lints/src/question_mark.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fff5fa65816f482357989f25a58e98688cb7363d/clippy_lints%2Fsrc%2Fquestion_mark.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fff5fa65816f482357989f25a58e98688cb7363d/clippy_lints%2Fsrc%2Fquestion_mark.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fquestion_mark.rs?ref=fff5fa65816f482357989f25a58e98688cb7363d", "patch": "@@ -176,8 +176,7 @@ impl QuestionMark {\n             if block.stmts.len() == 1;\n             if let Some(expr) = block.stmts.iter().last();\n             if let StmtKind::Semi(ref expr) = expr.kind;\n-            if let ExprKind::Ret(ret_expr) = expr.kind;\n-            if let Some(ret_expr) = ret_expr;\n+            if let ExprKind::Ret(Some(ret_expr)) = expr.kind;\n \n             then {\n                 return Some(ret_expr);"}, {"sha": "77e790733789c23c061436734afb9b15b5073d2c", "filename": "clippy_lints/src/strings.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fff5fa65816f482357989f25a58e98688cb7363d/clippy_lints%2Fsrc%2Fstrings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fff5fa65816f482357989f25a58e98688cb7363d/clippy_lints%2Fsrc%2Fstrings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fstrings.rs?ref=fff5fa65816f482357989f25a58e98688cb7363d", "patch": "@@ -222,8 +222,7 @@ impl<'tcx> LateLintPass<'tcx> for StringLitAsBytes {\n             if method_names[0] == sym!(as_bytes);\n \n             // Check for slicer\n-            if let ExprKind::Struct(ref path, _, _) = right.kind;\n-            if let QPath::LangItem(LangItem::Range, _) = path;\n+            if let ExprKind::Struct(QPath::LangItem(LangItem::Range, _), _, _) = right.kind;\n \n             then {\n                 let mut applicability = Applicability::MachineApplicable;"}, {"sha": "daff5f81e8c34c926a830089025eff5294a7d540", "filename": "clippy_lints/src/trait_bounds.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fff5fa65816f482357989f25a58e98688cb7363d/clippy_lints%2Fsrc%2Ftrait_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fff5fa65816f482357989f25a58e98688cb7363d/clippy_lints%2Fsrc%2Ftrait_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftrait_bounds.rs?ref=fff5fa65816f482357989f25a58e98688cb7363d", "patch": "@@ -168,8 +168,7 @@ fn check_trait_bound_duplication(cx: &LateContext<'_>, gen: &'_ Generics<'_>) {\n         if_chain! {\n             if let WherePredicate::BoundPredicate(ref bound_predicate) = predicate;\n             if !in_macro(bound_predicate.span);\n-            if let TyKind::Path(ref path) = bound_predicate.bounded_ty.kind;\n-            if let QPath::Resolved(_, Path { ref segments, .. }) = path;\n+            if let TyKind::Path(QPath::Resolved(_, Path { ref segments, .. })) = bound_predicate.bounded_ty.kind;\n             if let Some(segment) = segments.first();\n             if let Some(trait_resolutions_direct) = map.get(&segment.ident);\n             then {"}, {"sha": "6b171a0fa1af2ef2058f402837237f957153908f", "filename": "clippy_lints/src/transmuting_null.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fff5fa65816f482357989f25a58e98688cb7363d/clippy_lints%2Fsrc%2Ftransmuting_null.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fff5fa65816f482357989f25a58e98688cb7363d/clippy_lints%2Fsrc%2Ftransmuting_null.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftransmuting_null.rs?ref=fff5fa65816f482357989f25a58e98688cb7363d", "patch": "@@ -48,8 +48,7 @@ impl<'tcx> LateLintPass<'tcx> for TransmutingNull {\n                 if_chain! {\n                     if let ExprKind::Path(ref _qpath) = args[0].kind;\n                     let x = const_eval_context.expr(&args[0]);\n-                    if let Some(constant) = x;\n-                    if let Constant::RawPtr(0) = constant;\n+                    if let Some(Constant::RawPtr(0)) = x;\n                     then {\n                         span_lint(cx, TRANSMUTING_NULL, expr.span, LINT_MSG)\n                     }"}, {"sha": "74ba53e6a9a02fbd9c7f90b63ed72e8d58ea00c9", "filename": "clippy_lints/src/types.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fff5fa65816f482357989f25a58e98688cb7363d/clippy_lints%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fff5fa65816f482357989f25a58e98688cb7363d/clippy_lints%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes.rs?ref=fff5fa65816f482357989f25a58e98688cb7363d", "patch": "@@ -738,8 +738,7 @@ fn is_any_trait(t: &hir::Ty<'_>) -> bool {\n fn get_bounds_if_impl_trait<'tcx>(cx: &LateContext<'tcx>, qpath: &QPath<'_>, id: HirId) -> Option<GenericBounds<'tcx>> {\n     if_chain! {\n         if let Some(did) = qpath_res(cx, qpath, id).opt_def_id();\n-        if let Some(node) = cx.tcx.hir().get_if_local(did);\n-        if let Node::GenericParam(generic_param) = node;\n+        if let Some(Node::GenericParam(generic_param)) = cx.tcx.hir().get_if_local(did);\n         if let GenericParamKind::Type { synthetic, .. } = generic_param.kind;\n         if synthetic == Some(SyntheticTyParamKind::ImplTrait);\n         then {\n@@ -1470,8 +1469,7 @@ fn check_loss_of_sign(cx: &LateContext<'_>, expr: &Expr<'_>, op: &Expr<'_>, cast\n     // don't lint for positive constants\n     let const_val = constant(cx, &cx.typeck_results(), op);\n     if_chain! {\n-        if let Some((const_val, _)) = const_val;\n-        if let Constant::Int(n) = const_val;\n+        if let Some((Constant::Int(n), _)) = const_val;\n         if let ty::Int(ity) = *cast_from.kind();\n         if sext(cx.tcx, n, ity) >= 0;\n         then {"}, {"sha": "01ffac5b5599d547dee26056a8f549b574e3a799", "filename": "clippy_lints/src/utils/higher.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fff5fa65816f482357989f25a58e98688cb7363d/clippy_lints%2Fsrc%2Futils%2Fhigher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fff5fa65816f482357989f25a58e98688cb7363d/clippy_lints%2Fsrc%2Futils%2Fhigher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fhigher.rs?ref=fff5fa65816f482357989f25a58e98688cb7363d", "patch": "@@ -162,8 +162,7 @@ pub fn while_loop<'tcx>(expr: &'tcx hir::Expr<'tcx>) -> Option<(&'tcx hir::Expr<\n         if let hir::Block { expr: Some(expr), .. } = &**block;\n         if let hir::ExprKind::Match(cond, arms, hir::MatchSource::WhileDesugar) = &expr.kind;\n         if let hir::ExprKind::DropTemps(cond) = &cond.kind;\n-        if let [arm, ..] = &arms[..];\n-        if let hir::Arm { body, .. } = arm;\n+        if let [hir::Arm { body, .. }, ..] = &arms[..];\n         then {\n             return Some((cond, body));\n         }"}]}