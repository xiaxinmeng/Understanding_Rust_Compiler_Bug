{"sha": "c055d995261203f9869399120a4174824481a305", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMwNTVkOTk1MjYxMjAzZjk4NjkzOTkxMjBhNDE3NDgyNDQ4MWEzMDU=", "commit": {"author": {"name": "Richo Healey", "email": "richo@psych0tik.net", "date": "2015-01-10T04:13:23Z"}, "committer": {"name": "Richo Healey", "email": "richo@psych0tik.net", "date": "2015-01-12T05:14:31Z"}, "message": "powerpc: Teach trans about powerpc", "tree": {"sha": "af43a974ccc84021c391335715b222323d274daa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/af43a974ccc84021c391335715b222323d274daa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c055d995261203f9869399120a4174824481a305", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c055d995261203f9869399120a4174824481a305", "html_url": "https://github.com/rust-lang/rust/commit/c055d995261203f9869399120a4174824481a305", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c055d995261203f9869399120a4174824481a305/comments", "author": {"login": "richo", "id": 476418, "node_id": "MDQ6VXNlcjQ3NjQxOA==", "avatar_url": "https://avatars.githubusercontent.com/u/476418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/richo", "html_url": "https://github.com/richo", "followers_url": "https://api.github.com/users/richo/followers", "following_url": "https://api.github.com/users/richo/following{/other_user}", "gists_url": "https://api.github.com/users/richo/gists{/gist_id}", "starred_url": "https://api.github.com/users/richo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/richo/subscriptions", "organizations_url": "https://api.github.com/users/richo/orgs", "repos_url": "https://api.github.com/users/richo/repos", "events_url": "https://api.github.com/users/richo/events{/privacy}", "received_events_url": "https://api.github.com/users/richo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "richo", "id": 476418, "node_id": "MDQ6VXNlcjQ3NjQxOA==", "avatar_url": "https://avatars.githubusercontent.com/u/476418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/richo", "html_url": "https://github.com/richo", "followers_url": "https://api.github.com/users/richo/followers", "following_url": "https://api.github.com/users/richo/following{/other_user}", "gists_url": "https://api.github.com/users/richo/gists{/gist_id}", "starred_url": "https://api.github.com/users/richo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/richo/subscriptions", "organizations_url": "https://api.github.com/users/richo/orgs", "repos_url": "https://api.github.com/users/richo/repos", "events_url": "https://api.github.com/users/richo/events{/privacy}", "received_events_url": "https://api.github.com/users/richo/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "33cd9cf9f463b6eb6153d0698ca8d209ab95efec", "url": "https://api.github.com/repos/rust-lang/rust/commits/33cd9cf9f463b6eb6153d0698ca8d209ab95efec", "html_url": "https://github.com/rust-lang/rust/commit/33cd9cf9f463b6eb6153d0698ca8d209ab95efec"}], "stats": {"total": 190, "additions": 188, "deletions": 2}, "files": [{"sha": "5e0b7bcf3ef8bc04693ad23ba5a252dbfb95d036", "filename": "src/librustc_back/target/powerpc_unknown_linux_gnu.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c055d995261203f9869399120a4174824481a305/src%2Flibrustc_back%2Ftarget%2Fpowerpc_unknown_linux_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c055d995261203f9869399120a4174824481a305/src%2Flibrustc_back%2Ftarget%2Fpowerpc_unknown_linux_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fpowerpc_unknown_linux_gnu.rs?ref=c055d995261203f9869399120a4174824481a305", "patch": "@@ -18,7 +18,7 @@ pub fn target() -> Target {\n         data_layout: \"E-S8-p:32:32-f64:32:64-i64:32:64-f80:32:32-n8:16:32\".to_string(),\n         llvm_target: \"powerpc-unknown-linux-gnu\".to_string(),\n         target_endian: \"big\".to_string(),\n-        target_word_size: \"32\".to_string(),\n+        target_pointer_width: \"32\".to_string(),\n         arch: \"powerpc\".to_string(),\n         target_os: \"linux\".to_string(),\n         options: base,"}, {"sha": "12dfec6c29a8051073323ed0b1075e758e33d753", "filename": "src/librustc_trans/trans/asm.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c055d995261203f9869399120a4174824481a305/src%2Flibrustc_trans%2Ftrans%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c055d995261203f9869399120a4174824481a305/src%2Flibrustc_trans%2Ftrans%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fasm.rs?ref=c055d995261203f9869399120a4174824481a305", "patch": "@@ -164,7 +164,8 @@ pub fn trans_inline_asm<'blk, 'tcx>(bcx: Block<'blk, 'tcx>, ia: &ast::InlineAsm)\n #[cfg(any(target_arch = \"arm\",\n           target_arch = \"aarch64\",\n           target_arch = \"mips\",\n-          target_arch = \"mipsel\"))]\n+          target_arch = \"mipsel\",\n+          target_arch = \"powerpc\"))]\n fn get_clobbers() -> String {\n     \"\".to_string()\n }"}, {"sha": "7abcdd07cc5da6a0ea6bb4827ce190ddcbe54969", "filename": "src/librustc_trans/trans/cabi.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c055d995261203f9869399120a4174824481a305/src%2Flibrustc_trans%2Ftrans%2Fcabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c055d995261203f9869399120a4174824481a305/src%2Flibrustc_trans%2Ftrans%2Fcabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcabi.rs?ref=c055d995261203f9869399120a4174824481a305", "patch": "@@ -18,6 +18,7 @@ use trans::cabi_x86_64;\n use trans::cabi_x86_win64;\n use trans::cabi_arm;\n use trans::cabi_aarch64;\n+use trans::cabi_powerpc;\n use trans::cabi_mips;\n use trans::type_::Type;\n \n@@ -125,6 +126,7 @@ pub fn compute_abi_info(ccx: &CrateContext,\n             cabi_arm::compute_abi_info(ccx, atys, rty, ret_def, flavor)\n         },\n         \"mips\" => cabi_mips::compute_abi_info(ccx, atys, rty, ret_def),\n+        \"powerpc\" => cabi_powerpc::compute_abi_info(ccx, atys, rty, ret_def),\n         a => ccx.sess().fatal(&format!(\"unrecognized arch \\\"{}\\\" in target specification\", a)\n                               []),\n     }"}, {"sha": "3f43bcd67c63b98f45360bb98e675b70607c8861", "filename": "src/librustc_trans/trans/cabi_powerpc.rs", "status": "added", "additions": 182, "deletions": 0, "changes": 182, "blob_url": "https://github.com/rust-lang/rust/blob/c055d995261203f9869399120a4174824481a305/src%2Flibrustc_trans%2Ftrans%2Fcabi_powerpc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c055d995261203f9869399120a4174824481a305/src%2Flibrustc_trans%2Ftrans%2Fcabi_powerpc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcabi_powerpc.rs?ref=c055d995261203f9869399120a4174824481a305", "patch": "@@ -0,0 +1,182 @@\n+// Copyright 2014-2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use llvm;\n+use llvm::{Integer, Pointer, Float, Double, Struct, Array};\n+use llvm::{StructRetAttribute, ZExtAttribute};\n+use trans::cabi::{FnType, ArgType};\n+use trans::context::CrateContext;\n+use trans::type_::Type;\n+\n+use std::cmp;\n+\n+fn align_up_to(off: uint, a: uint) -> uint {\n+    return (off + a - 1u) / a * a;\n+}\n+\n+fn align(off: uint, ty: Type) -> uint {\n+    let a = ty_align(ty);\n+    return align_up_to(off, a);\n+}\n+\n+fn ty_align(ty: Type) -> uint {\n+    match ty.kind() {\n+        Integer => {\n+            unsafe {\n+                ((llvm::LLVMGetIntTypeWidth(ty.to_ref()) as uint) + 7) / 8\n+            }\n+        }\n+        Pointer => 4,\n+        Float => 4,\n+        Double => 8,\n+        Struct => {\n+          if ty.is_packed() {\n+            1\n+          } else {\n+            let str_tys = ty.field_types();\n+            str_tys.iter().fold(1, |a, t| cmp::max(a, ty_align(*t)))\n+          }\n+        }\n+        Array => {\n+            let elt = ty.element_type();\n+            ty_align(elt)\n+        }\n+        _ => panic!(\"ty_size: unhandled type\")\n+    }\n+}\n+\n+fn ty_size(ty: Type) -> uint {\n+    match ty.kind() {\n+        Integer => {\n+            unsafe {\n+                ((llvm::LLVMGetIntTypeWidth(ty.to_ref()) as uint) + 7) / 8\n+            }\n+        }\n+        Pointer => 4,\n+        Float => 4,\n+        Double => 8,\n+        Struct => {\n+            if ty.is_packed() {\n+                let str_tys = ty.field_types();\n+                str_tys.iter().fold(0, |s, t| s + ty_size(*t))\n+            } else {\n+                let str_tys = ty.field_types();\n+                let size = str_tys.iter().fold(0, |s, t| align(s, *t) + ty_size(*t));\n+                align(size, ty)\n+            }\n+        }\n+        Array => {\n+            let len = ty.array_length();\n+            let elt = ty.element_type();\n+            let eltsz = ty_size(elt);\n+            len * eltsz\n+        }\n+        _ => panic!(\"ty_size: unhandled type\")\n+    }\n+}\n+\n+fn classify_ret_ty(ccx: &CrateContext, ty: Type) -> ArgType {\n+    if is_reg_ty(ty) {\n+        let attr = if ty == Type::i1(ccx) { Some(ZExtAttribute) } else { None };\n+        ArgType::direct(ty, None, None, attr)\n+    } else {\n+        ArgType::indirect(ty, Some(StructRetAttribute))\n+    }\n+}\n+\n+fn classify_arg_ty(ccx: &CrateContext, ty: Type, offset: &mut uint) -> ArgType {\n+    let orig_offset = *offset;\n+    let size = ty_size(ty) * 8;\n+    let mut align = ty_align(ty);\n+\n+    align = cmp::min(cmp::max(align, 4), 8);\n+    *offset = align_up_to(*offset, align);\n+    *offset += align_up_to(size, align * 8) / 8;\n+\n+    if is_reg_ty(ty) {\n+        let attr = if ty == Type::i1(ccx) { Some(ZExtAttribute) } else { None };\n+        ArgType::direct(ty, None, None, attr)\n+    } else {\n+        ArgType::direct(\n+            ty,\n+            Some(struct_ty(ccx, ty)),\n+            padding_ty(ccx, align, orig_offset),\n+            None\n+        )\n+    }\n+}\n+\n+fn is_reg_ty(ty: Type) -> bool {\n+    return match ty.kind() {\n+        Integer\n+        | Pointer\n+        | Float\n+        | Double => true,\n+        _ => false\n+    };\n+}\n+\n+fn padding_ty(ccx: &CrateContext, align: uint, offset: uint) -> Option<Type> {\n+    if ((align - 1 ) & offset) > 0 {\n+        Some(Type::i32(ccx))\n+    } else {\n+        None\n+    }\n+}\n+\n+fn coerce_to_int(ccx: &CrateContext, size: uint) -> Vec<Type> {\n+    let int_ty = Type::i32(ccx);\n+    let mut args = Vec::new();\n+\n+    let mut n = size / 32;\n+    while n > 0 {\n+        args.push(int_ty);\n+        n -= 1;\n+    }\n+\n+    let r = size % 32;\n+    if r > 0 {\n+        unsafe {\n+            args.push(Type::from_ref(llvm::LLVMIntTypeInContext(ccx.llcx(), r as c_uint)));\n+        }\n+    }\n+\n+    args\n+}\n+\n+fn struct_ty(ccx: &CrateContext, ty: Type) -> Type {\n+    let size = ty_size(ty) * 8;\n+    Type::struct_(ccx, coerce_to_int(ccx, size).as_slice(), false)\n+}\n+\n+pub fn compute_abi_info(ccx: &CrateContext,\n+                        atys: &[Type],\n+                        rty: Type,\n+                        ret_def: bool) -> FnType {\n+    let ret_ty = if ret_def {\n+        classify_ret_ty(ccx, rty)\n+    } else {\n+        ArgType::direct(Type::void(ccx), None, None, None)\n+    };\n+\n+    let sret = ret_ty.is_indirect();\n+    let mut arg_tys = Vec::new();\n+    let mut offset = if sret { 4 } else { 0 };\n+\n+    for aty in atys.iter() {\n+        let ty = classify_arg_ty(ccx, *aty, &mut offset);\n+        arg_tys.push(ty);\n+    };\n+\n+    return FnType {\n+        arg_tys: arg_tys,\n+        ret_ty: ret_ty,\n+    };\n+}"}, {"sha": "91c6c9a13a362107520277bb890299fa24dcdaff", "filename": "src/librustc_trans/trans/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c055d995261203f9869399120a4174824481a305/src%2Flibrustc_trans%2Ftrans%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c055d995261203f9869399120a4174824481a305/src%2Flibrustc_trans%2Ftrans%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fmod.rs?ref=c055d995261203f9869399120a4174824481a305", "patch": "@@ -45,6 +45,7 @@ mod cabi_x86_win64;\n mod cabi_arm;\n mod cabi_aarch64;\n mod cabi_mips;\n+mod cabi_powerpc;\n mod foreign;\n mod intrinsic;\n mod debuginfo;"}]}