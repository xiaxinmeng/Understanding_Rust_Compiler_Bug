{"sha": "a65647a7f618d8b2d4367dbbfc197b17ebb00d80", "node_id": "C_kwDOAAsO6NoAKGE2NTY0N2E3ZjYxOGQ4YjJkNDM2N2RiYmZjMTk3YjE3ZWJiMDBkODA", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume.gomez@huawei.com", "date": "2022-08-12T09:37:32Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume.gomez@huawei.com", "date": "2022-08-12T09:37:32Z"}, "message": "remove Clean trait implementation for hir::PathSegment", "tree": {"sha": "ff81fd5d8455a850ada9b4367d566b5fc0c0021e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ff81fd5d8455a850ada9b4367d566b5fc0c0021e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a65647a7f618d8b2d4367dbbfc197b17ebb00d80", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a65647a7f618d8b2d4367dbbfc197b17ebb00d80", "html_url": "https://github.com/rust-lang/rust/commit/a65647a7f618d8b2d4367dbbfc197b17ebb00d80", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a65647a7f618d8b2d4367dbbfc197b17ebb00d80/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e2b52ff73edc8b0b7c74bc28760d618187731fe8", "url": "https://api.github.com/repos/rust-lang/rust/commits/e2b52ff73edc8b0b7c74bc28760d618187731fe8", "html_url": "https://github.com/rust-lang/rust/commit/e2b52ff73edc8b0b7c74bc28760d618187731fe8"}], "stats": {"total": 23, "additions": 15, "deletions": 8}, "files": [{"sha": "f447b2bfa77871a64b9eb7338e243aa821d3882e", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 15, "deletions": 8, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/a65647a7f618d8b2d4367dbbfc197b17ebb00d80/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a65647a7f618d8b2d4367dbbfc197b17ebb00d80/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=a65647a7f618d8b2d4367dbbfc197b17ebb00d80", "patch": "@@ -1322,14 +1322,17 @@ fn clean_qpath<'tcx>(hir_ty: &hir::Ty<'tcx>, cx: &mut DocContext<'tcx>) -> Type\n             let trait_def = cx.tcx.associated_item(p.res.def_id()).container_id(cx.tcx);\n             let trait_ = self::Path {\n                 res: Res::Def(DefKind::Trait, trait_def),\n-                segments: trait_segments.iter().map(|x| x.clean(cx)).collect(),\n+                segments: trait_segments.iter().map(|x| clean_path_segment(x, cx)).collect(),\n             };\n             register_res(cx, trait_.res);\n             let self_def_id = DefId::local(qself.hir_id.owner.local_def_index);\n             let self_type = clean_ty(qself, cx);\n             let should_show_cast = compute_should_show_cast(Some(self_def_id), &trait_, &self_type);\n             Type::QPath {\n-                assoc: Box::new(p.segments.last().expect(\"segments were empty\").clean(cx)),\n+                assoc: Box::new(clean_path_segment(\n+                    p.segments.last().expect(\"segments were empty\"),\n+                    cx,\n+                )),\n                 should_show_cast,\n                 self_type: Box::new(self_type),\n                 trait_,\n@@ -1349,7 +1352,7 @@ fn clean_qpath<'tcx>(hir_ty: &hir::Ty<'tcx>, cx: &mut DocContext<'tcx>) -> Type\n             let self_type = clean_ty(qself, cx);\n             let should_show_cast = compute_should_show_cast(self_def_id, &trait_, &self_type);\n             Type::QPath {\n-                assoc: Box::new(segment.clean(cx)),\n+                assoc: Box::new(clean_path_segment(segment, cx)),\n                 should_show_cast,\n                 self_type: Box::new(self_type),\n                 trait_,\n@@ -1823,7 +1826,10 @@ fn clean_variant_data<'tcx>(\n }\n \n fn clean_path<'tcx>(path: &hir::Path<'tcx>, cx: &mut DocContext<'tcx>) -> Path {\n-    Path { res: path.res, segments: path.segments.iter().map(|x| x.clean(cx)).collect() }\n+    Path {\n+        res: path.res,\n+        segments: path.segments.iter().map(|x| clean_path_segment(x, cx)).collect(),\n+    }\n }\n \n fn clean_generic_args<'tcx>(\n@@ -1861,10 +1867,11 @@ fn clean_generic_args<'tcx>(\n     }\n }\n \n-impl<'tcx> Clean<'tcx, PathSegment> for hir::PathSegment<'tcx> {\n-    fn clean(&self, cx: &mut DocContext<'tcx>) -> PathSegment {\n-        PathSegment { name: self.ident.name, args: clean_generic_args(self.args(), cx) }\n-    }\n+fn clean_path_segment<'tcx>(\n+    path: &hir::PathSegment<'tcx>,\n+    cx: &mut DocContext<'tcx>,\n+) -> PathSegment {\n+    PathSegment { name: path.ident.name, args: clean_generic_args(path.args(), cx) }\n }\n \n impl<'tcx> Clean<'tcx, BareFunctionDecl> for hir::BareFnTy<'tcx> {"}]}