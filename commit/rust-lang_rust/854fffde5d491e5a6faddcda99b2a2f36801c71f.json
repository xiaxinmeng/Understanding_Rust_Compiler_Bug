{"sha": "854fffde5d491e5a6faddcda99b2a2f36801c71f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg1NGZmZmRlNWQ0OTFlNWE2ZmFkZGNkYTk5YjJhMmYzNjgwMWM3MWY=", "commit": {"author": {"name": "Noam Koren", "email": "noam575@gmail.com", "date": "2021-02-27T17:13:10Z"}, "committer": {"name": "Noam Koren", "email": "noam575@gmail.com", "date": "2021-03-01T20:59:24Z"}, "message": "Get TyCtxt from self instead of passing as argument in AutoTraitFinder\nmethods", "tree": {"sha": "a26c005288713386a5c6a8e871e26fbe0c85753a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a26c005288713386a5c6a8e871e26fbe0c85753a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/854fffde5d491e5a6faddcda99b2a2f36801c71f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/854fffde5d491e5a6faddcda99b2a2f36801c71f", "html_url": "https://github.com/rust-lang/rust/commit/854fffde5d491e5a6faddcda99b2a2f36801c71f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/854fffde5d491e5a6faddcda99b2a2f36801c71f/comments", "author": {"login": "noslaver", "id": 34837071, "node_id": "MDQ6VXNlcjM0ODM3MDcx", "avatar_url": "https://avatars.githubusercontent.com/u/34837071?v=4", "gravatar_id": "", "url": "https://api.github.com/users/noslaver", "html_url": "https://github.com/noslaver", "followers_url": "https://api.github.com/users/noslaver/followers", "following_url": "https://api.github.com/users/noslaver/following{/other_user}", "gists_url": "https://api.github.com/users/noslaver/gists{/gist_id}", "starred_url": "https://api.github.com/users/noslaver/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/noslaver/subscriptions", "organizations_url": "https://api.github.com/users/noslaver/orgs", "repos_url": "https://api.github.com/users/noslaver/repos", "events_url": "https://api.github.com/users/noslaver/events{/privacy}", "received_events_url": "https://api.github.com/users/noslaver/received_events", "type": "User", "site_admin": false}, "committer": {"login": "noslaver", "id": 34837071, "node_id": "MDQ6VXNlcjM0ODM3MDcx", "avatar_url": "https://avatars.githubusercontent.com/u/34837071?v=4", "gravatar_id": "", "url": "https://api.github.com/users/noslaver", "html_url": "https://github.com/noslaver", "followers_url": "https://api.github.com/users/noslaver/followers", "following_url": "https://api.github.com/users/noslaver/following{/other_user}", "gists_url": "https://api.github.com/users/noslaver/gists{/gist_id}", "starred_url": "https://api.github.com/users/noslaver/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/noslaver/subscriptions", "organizations_url": "https://api.github.com/users/noslaver/orgs", "repos_url": "https://api.github.com/users/noslaver/repos", "events_url": "https://api.github.com/users/noslaver/events{/privacy}", "received_events_url": "https://api.github.com/users/noslaver/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5233edcf1c7ee70ac25e4ec1115c3546f53d8a2d", "url": "https://api.github.com/repos/rust-lang/rust/commits/5233edcf1c7ee70ac25e4ec1115c3546f53d8a2d", "html_url": "https://github.com/rust-lang/rust/commit/5233edcf1c7ee70ac25e4ec1115c3546f53d8a2d"}], "stats": {"total": 31, "additions": 14, "deletions": 17}, "files": [{"sha": "6510c9464e145d189544b0ae00b6ce1f8faadb3d", "filename": "compiler/rustc_trait_selection/src/traits/auto_trait.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/854fffde5d491e5a6faddcda99b2a2f36801c71f/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/854fffde5d491e5a6faddcda99b2a2f36801c71f/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fauto_trait.rs?ref=854fffde5d491e5a6faddcda99b2a2f36801c71f", "patch": "@@ -77,7 +77,7 @@ impl<'tcx> AutoTraitFinder<'tcx> {\n         ty: Ty<'tcx>,\n         orig_env: ty::ParamEnv<'tcx>,\n         trait_did: DefId,\n-        mut auto_trait_callback: impl FnMut(&InferCtxt<'_, 'tcx>, AutoTraitInfo<'tcx>) -> A,\n+        mut auto_trait_callback: impl FnMut(AutoTraitInfo<'tcx>) -> A,\n     ) -> AutoTraitResult<A> {\n         let tcx = self.tcx;\n \n@@ -211,7 +211,7 @@ impl<'tcx> AutoTraitFinder<'tcx> {\n \n             let info = AutoTraitInfo { full_user_env, region_data, vid_to_region };\n \n-            AutoTraitResult::PositiveImpl(auto_trait_callback(&infcx, info))\n+            AutoTraitResult::PositiveImpl(auto_trait_callback(info))\n         })\n     }\n }"}, {"sha": "d0e058c7dda7556d746e7a85815b7d5442c8c379", "filename": "src/librustdoc/clean/auto_trait.rs", "status": "modified", "additions": 12, "deletions": 15, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/854fffde5d491e5a6faddcda99b2a2f36801c71f/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/854fffde5d491e5a6faddcda99b2a2f36801c71f/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs?ref=854fffde5d491e5a6faddcda99b2a2f36801c71f", "patch": "@@ -46,7 +46,7 @@ impl<'a, 'tcx> AutoTraitFinder<'a, 'tcx> {\n             return None;\n         }\n \n-        let result = f.find_auto_trait_generics(ty, param_env, trait_def_id, |infcx, info| {\n+        let result = f.find_auto_trait_generics(ty, param_env, trait_def_id, |info| {\n             let region_data = info.region_data;\n \n             let names_map = tcx\n@@ -61,7 +61,6 @@ impl<'a, 'tcx> AutoTraitFinder<'a, 'tcx> {\n                 .collect();\n             let lifetime_predicates = Self::handle_lifetimes(&region_data, &names_map);\n             let new_generics = self.param_env_to_generics(\n-                infcx.tcx,\n                 item_def_id,\n                 info.full_user_env,\n                 lifetime_predicates,\n@@ -313,12 +312,9 @@ impl<'a, 'tcx> AutoTraitFinder<'a, 'tcx> {\n         lifetime_predicates\n     }\n \n-    fn extract_for_generics(\n-        &self,\n-        tcx: TyCtxt<'tcx>,\n-        pred: ty::Predicate<'tcx>,\n-    ) -> FxHashSet<GenericParamDef> {\n+    fn extract_for_generics(&self, pred: ty::Predicate<'tcx>) -> FxHashSet<GenericParamDef> {\n         let bound_predicate = pred.kind();\n+        let tcx = self.cx.tcx;\n         let regions = match bound_predicate.skip_binder() {\n             ty::PredicateKind::Trait(poly_trait_pred, _) => {\n                 tcx.collect_referenced_late_bound_regions(&bound_predicate.rebind(poly_trait_pred))\n@@ -443,7 +439,6 @@ impl<'a, 'tcx> AutoTraitFinder<'a, 'tcx> {\n     // * We explicitly add a '?Sized' bound if we didn't find any 'Sized' predicates for a type\n     fn param_env_to_generics(\n         &mut self,\n-        tcx: TyCtxt<'tcx>,\n         item_def_id: DefId,\n         param_env: ty::ParamEnv<'tcx>,\n         mut existing_predicates: Vec<WherePredicate>,\n@@ -455,14 +450,15 @@ impl<'a, 'tcx> AutoTraitFinder<'a, 'tcx> {\n             item_def_id, param_env, existing_predicates\n         );\n \n+        let tcx = self.cx.tcx;\n+\n         // The `Sized` trait must be handled specially, since we only display it when\n         // it is *not* required (i.e., '?Sized')\n-        let sized_trait = self.cx.tcx.require_lang_item(LangItem::Sized, None);\n+        let sized_trait = tcx.require_lang_item(LangItem::Sized, None);\n \n         let mut replacer = RegionReplacer { vid_to_region: &vid_to_region, tcx };\n \n-        let orig_bounds: FxHashSet<_> =\n-            self.cx.tcx.param_env(item_def_id).caller_bounds().iter().collect();\n+        let orig_bounds: FxHashSet<_> = tcx.param_env(item_def_id).caller_bounds().iter().collect();\n         let clean_where_predicates = param_env\n             .caller_bounds()\n             .iter()\n@@ -512,7 +508,7 @@ impl<'a, 'tcx> AutoTraitFinder<'a, 'tcx> {\n                         continue;\n                     }\n \n-                    let mut for_generics = self.extract_for_generics(tcx, orig_p);\n+                    let mut for_generics = self.extract_for_generics(orig_p);\n \n                     assert!(bounds.len() == 1);\n                     let mut b = bounds.pop().expect(\"bounds were empty\");\n@@ -541,7 +537,7 @@ impl<'a, 'tcx> AutoTraitFinder<'a, 'tcx> {\n                                 // that we don't end up with duplicate bounds (e.g., for<'b, 'b>)\n                                 for_generics.extend(p.generic_params.clone());\n                                 p.generic_params = for_generics.into_iter().collect();\n-                                self.is_fn_ty(tcx, &p.trait_)\n+                                self.is_fn_ty(&p.trait_)\n                             }\n                             _ => false,\n                         };\n@@ -576,7 +572,7 @@ impl<'a, 'tcx> AutoTraitFinder<'a, 'tcx> {\n                                 } => {\n                                     let mut new_trait_path = trait_path.clone();\n \n-                                    if self.is_fn_ty(tcx, trait_) && left_name == sym::Output {\n+                                    if self.is_fn_ty(trait_) && left_name == sym::Output {\n                                         ty_to_fn\n                                             .entry(*ty.clone())\n                                             .and_modify(|e| *e = (e.0.clone(), Some(rhs.clone())))\n@@ -734,7 +730,8 @@ impl<'a, 'tcx> AutoTraitFinder<'a, 'tcx> {\n         vec.sort_by_cached_key(|x| format!(\"{:?}\", x))\n     }\n \n-    fn is_fn_ty(&self, tcx: TyCtxt<'_>, ty: &Type) -> bool {\n+    fn is_fn_ty(&self, ty: &Type) -> bool {\n+        let tcx = self.cx.tcx;\n         match ty {\n             &Type::ResolvedPath { did, .. } => {\n                 did == tcx.require_lang_item(LangItem::Fn, None)"}]}