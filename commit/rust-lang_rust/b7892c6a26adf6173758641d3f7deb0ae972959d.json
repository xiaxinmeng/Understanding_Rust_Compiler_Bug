{"sha": "b7892c6a26adf6173758641d3f7deb0ae972959d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI3ODkyYzZhMjZhZGY2MTczNzU4NjQxZDNmN2RlYjBhZTk3Mjk1OWQ=", "commit": {"author": {"name": "Takayuki Nakata", "email": "f.seasons017@gmail.com", "date": "2020-11-06T13:54:38Z"}, "committer": {"name": "Takayuki Nakata", "email": "f.seasons017@gmail.com", "date": "2020-11-06T13:54:38Z"}, "message": "Refactor to make getting position just before RArrow a common function", "tree": {"sha": "8cdbc2ea053328f5bfb0278b09c54c6e0ee81b04", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8cdbc2ea053328f5bfb0278b09c54c6e0ee81b04"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b7892c6a26adf6173758641d3f7deb0ae972959d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b7892c6a26adf6173758641d3f7deb0ae972959d", "html_url": "https://github.com/rust-lang/rust/commit/b7892c6a26adf6173758641d3f7deb0ae972959d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b7892c6a26adf6173758641d3f7deb0ae972959d/comments", "author": {"login": "giraffate", "id": 17407489, "node_id": "MDQ6VXNlcjE3NDA3NDg5", "avatar_url": "https://avatars.githubusercontent.com/u/17407489?v=4", "gravatar_id": "", "url": "https://api.github.com/users/giraffate", "html_url": "https://github.com/giraffate", "followers_url": "https://api.github.com/users/giraffate/followers", "following_url": "https://api.github.com/users/giraffate/following{/other_user}", "gists_url": "https://api.github.com/users/giraffate/gists{/gist_id}", "starred_url": "https://api.github.com/users/giraffate/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/giraffate/subscriptions", "organizations_url": "https://api.github.com/users/giraffate/orgs", "repos_url": "https://api.github.com/users/giraffate/repos", "events_url": "https://api.github.com/users/giraffate/events{/privacy}", "received_events_url": "https://api.github.com/users/giraffate/received_events", "type": "User", "site_admin": false}, "committer": {"login": "giraffate", "id": 17407489, "node_id": "MDQ6VXNlcjE3NDA3NDg5", "avatar_url": "https://avatars.githubusercontent.com/u/17407489?v=4", "gravatar_id": "", "url": "https://api.github.com/users/giraffate", "html_url": "https://github.com/giraffate", "followers_url": "https://api.github.com/users/giraffate/followers", "following_url": "https://api.github.com/users/giraffate/following{/other_user}", "gists_url": "https://api.github.com/users/giraffate/gists{/gist_id}", "starred_url": "https://api.github.com/users/giraffate/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/giraffate/subscriptions", "organizations_url": "https://api.github.com/users/giraffate/orgs", "repos_url": "https://api.github.com/users/giraffate/repos", "events_url": "https://api.github.com/users/giraffate/events{/privacy}", "received_events_url": "https://api.github.com/users/giraffate/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1624b00bde42a674c50a03e63868e8b4d08b6b49", "url": "https://api.github.com/repos/rust-lang/rust/commits/1624b00bde42a674c50a03e63868e8b4d08b6b49", "html_url": "https://github.com/rust-lang/rust/commit/1624b00bde42a674c50a03e63868e8b4d08b6b49"}], "stats": {"total": 75, "additions": 39, "deletions": 36}, "files": [{"sha": "7b3b450ef93e943fad6882126463f32a42617ebd", "filename": "clippy_lints/src/manual_async_fn.rs", "status": "modified", "additions": 2, "deletions": 15, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/b7892c6a26adf6173758641d3f7deb0ae972959d/clippy_lints%2Fsrc%2Fmanual_async_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7892c6a26adf6173758641d3f7deb0ae972959d/clippy_lints%2Fsrc%2Fmanual_async_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmanual_async_fn.rs?ref=b7892c6a26adf6173758641d3f7deb0ae972959d", "patch": "@@ -1,5 +1,5 @@\n use crate::utils::paths::FUTURE_FROM_GENERATOR;\n-use crate::utils::{match_function_call, snippet_block, snippet_opt, span_lint_and_then};\n+use crate::utils::{match_function_call, position_before_rarrow, snippet_block, snippet_opt, span_lint_and_then};\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir::intravisit::FnKind;\n@@ -69,20 +69,7 @@ impl<'tcx> LateLintPass<'tcx> for ManualAsyncFn {\n                     |diag| {\n                         if_chain! {\n                             if let Some(header_snip) = snippet_opt(cx, header_span);\n-                            if let Some(ret_pos) = header_snip.rfind(\"->\").map(|rpos| {\n-                                let mut rpos = rpos;\n-                                let chars: Vec<char> = header_snip.chars().collect();\n-                                while rpos > 1 {\n-                                    if let Some(c) = chars.get(rpos - 1) {\n-                                        if c.is_whitespace() {\n-                                            rpos -= 1;\n-                                            continue;\n-                                        }\n-                                    }\n-                                    break;\n-                                }\n-                                rpos\n-                            });\n+                            if let Some(ret_pos) = position_before_rarrow(header_snip.clone());\n                             if let Some((ret_sugg, ret_snip)) = suggested_ret(cx, output);\n                             then {\n                                 let help = format!(\"make the function `async` and {}\", ret_sugg);"}, {"sha": "f61fd2ecd735d915964c5b3ce80bfaa6da56e29e", "filename": "clippy_lints/src/unused_unit.rs", "status": "modified", "additions": 8, "deletions": 21, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/b7892c6a26adf6173758641d3f7deb0ae972959d/clippy_lints%2Fsrc%2Funused_unit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7892c6a26adf6173758641d3f7deb0ae972959d/clippy_lints%2Fsrc%2Funused_unit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funused_unit.rs?ref=b7892c6a26adf6173758641d3f7deb0ae972959d", "patch": "@@ -7,7 +7,7 @@ use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::source_map::Span;\n use rustc_span::BytePos;\n \n-use crate::utils::span_lint_and_sugg;\n+use crate::utils::{position_before_rarrow, span_lint_and_sugg};\n \n declare_clippy_lint! {\n     /// **What it does:** Checks for unit (`()`) expressions that can be removed.\n@@ -120,26 +120,13 @@ fn is_unit_expr(expr: &ast::Expr) -> bool {\n \n fn lint_unneeded_unit_return(cx: &EarlyContext<'_>, ty: &ast::Ty, span: Span) {\n     let (ret_span, appl) = if let Ok(fn_source) = cx.sess().source_map().span_to_snippet(span.with_hi(ty.span.hi())) {\n-        fn_source\n-            .rfind(\"->\")\n-            .map_or((ty.span, Applicability::MaybeIncorrect), |rpos| {\n-                let mut rpos = rpos;\n-                let chars: Vec<char> = fn_source.chars().collect();\n-                while rpos > 1 {\n-                    if let Some(c) = chars.get(rpos - 1) {\n-                        if c.is_whitespace() {\n-                            rpos -= 1;\n-                            continue;\n-                        }\n-                    }\n-                    break;\n-                }\n-                (\n-                    #[allow(clippy::cast_possible_truncation)]\n-                    ty.span.with_lo(BytePos(span.lo().0 + rpos as u32)),\n-                    Applicability::MachineApplicable,\n-                )\n-            })\n+        position_before_rarrow(fn_source).map_or((ty.span, Applicability::MaybeIncorrect), |rpos| {\n+            (\n+                #[allow(clippy::cast_possible_truncation)]\n+                ty.span.with_lo(BytePos(span.lo().0 + rpos as u32)),\n+                Applicability::MachineApplicable,\n+            )\n+        })\n     } else {\n         (ty.span, Applicability::MaybeIncorrect)\n     };"}, {"sha": "8e4149df0328b18cb5663978d456b8e2c90c3582", "filename": "clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/b7892c6a26adf6173758641d3f7deb0ae972959d/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7892c6a26adf6173758641d3f7deb0ae972959d/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=b7892c6a26adf6173758641d3f7deb0ae972959d", "patch": "@@ -659,6 +659,35 @@ pub fn indent_of<T: LintContext>(cx: &T, span: Span) -> Option<usize> {\n     snippet_opt(cx, line_span(cx, span)).and_then(|snip| snip.find(|c: char| !c.is_whitespace()))\n }\n \n+/// Returns the positon just before rarrow\n+///\n+/// ```rust,ignore\n+/// fn into(self) -> () {}\n+///              ^\n+/// // in case of unformatted code\n+/// fn into2(self)-> () {}\n+///               ^\n+/// fn into3(self)   -> () {}\n+///               ^\n+/// ```\n+#[allow(clippy::needless_pass_by_value)]\n+pub fn position_before_rarrow(s: String) -> Option<usize> {\n+    s.rfind(\"->\").map(|rpos| {\n+        let mut rpos = rpos;\n+        let chars: Vec<char> = s.chars().collect();\n+        while rpos > 1 {\n+            if let Some(c) = chars.get(rpos - 1) {\n+                if c.is_whitespace() {\n+                    rpos -= 1;\n+                    continue;\n+                }\n+            }\n+            break;\n+        }\n+        rpos\n+    })\n+}\n+\n /// Extends the span to the beginning of the spans line, incl. whitespaces.\n ///\n /// ```rust,ignore"}]}