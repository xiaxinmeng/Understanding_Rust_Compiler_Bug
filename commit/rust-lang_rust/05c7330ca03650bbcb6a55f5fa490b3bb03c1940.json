{"sha": "05c7330ca03650bbcb6a55f5fa490b3bb03c1940", "node_id": "C_kwDOAAsO6NoAKDA1YzczMzBjYTAzNjUwYmJjYjZhNTVmNWZhNDkwYjNiYjAzYzE5NDA", "commit": {"author": {"name": "The 8472", "email": "git@infinite-source.de", "date": "2022-07-29T23:48:16Z"}, "committer": {"name": "The 8472", "email": "git@infinite-source.de", "date": "2023-02-28T20:00:00Z"}, "message": "Implement Default for some alloc/core iterators\n\nThis way one can `mem::take()` them out of structs or #[derive(Default)] on structs containing them.\n\nThese changes will be insta-stable.", "tree": {"sha": "b7ace4e112ca9e379342f60cd877fbb40211b400", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b7ace4e112ca9e379342f60cd877fbb40211b400"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/05c7330ca03650bbcb6a55f5fa490b3bb03c1940", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/05c7330ca03650bbcb6a55f5fa490b3bb03c1940", "html_url": "https://github.com/rust-lang/rust/commit/05c7330ca03650bbcb6a55f5fa490b3bb03c1940", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/05c7330ca03650bbcb6a55f5fa490b3bb03c1940/comments", "author": {"login": "the8472", "id": 1065730, "node_id": "MDQ6VXNlcjEwNjU3MzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1065730?v=4", "gravatar_id": "", "url": "https://api.github.com/users/the8472", "html_url": "https://github.com/the8472", "followers_url": "https://api.github.com/users/the8472/followers", "following_url": "https://api.github.com/users/the8472/following{/other_user}", "gists_url": "https://api.github.com/users/the8472/gists{/gist_id}", "starred_url": "https://api.github.com/users/the8472/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/the8472/subscriptions", "organizations_url": "https://api.github.com/users/the8472/orgs", "repos_url": "https://api.github.com/users/the8472/repos", "events_url": "https://api.github.com/users/the8472/events{/privacy}", "received_events_url": "https://api.github.com/users/the8472/received_events", "type": "User", "site_admin": false}, "committer": {"login": "the8472", "id": 1065730, "node_id": "MDQ6VXNlcjEwNjU3MzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1065730?v=4", "gravatar_id": "", "url": "https://api.github.com/users/the8472", "html_url": "https://github.com/the8472", "followers_url": "https://api.github.com/users/the8472/followers", "following_url": "https://api.github.com/users/the8472/following{/other_user}", "gists_url": "https://api.github.com/users/the8472/gists{/gist_id}", "starred_url": "https://api.github.com/users/the8472/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/the8472/subscriptions", "organizations_url": "https://api.github.com/users/the8472/orgs", "repos_url": "https://api.github.com/users/the8472/repos", "events_url": "https://api.github.com/users/the8472/events{/privacy}", "received_events_url": "https://api.github.com/users/the8472/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "31f858d9a511f24fedb8ed997b28304fec809630", "url": "https://api.github.com/repos/rust-lang/rust/commits/31f858d9a511f24fedb8ed997b28304fec809630", "html_url": "https://github.com/rust-lang/rust/commit/31f858d9a511f24fedb8ed997b28304fec809630"}], "stats": {"total": 245, "additions": 243, "deletions": 2}, "files": [{"sha": "b0ec70ad565f83fc1da5d7f1df3db7bf3865f5d0", "filename": "library/alloc/src/collections/binary_heap/mod.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/05c7330ca03650bbcb6a55f5fa490b3bb03c1940/library%2Falloc%2Fsrc%2Fcollections%2Fbinary_heap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05c7330ca03650bbcb6a55f5fa490b3bb03c1940/library%2Falloc%2Fsrc%2Fcollections%2Fbinary_heap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbinary_heap%2Fmod.rs?ref=05c7330ca03650bbcb6a55f5fa490b3bb03c1940", "patch": "@@ -1468,6 +1468,13 @@ impl<T> ExactSizeIterator for IntoIter<T> {\n #[stable(feature = \"fused\", since = \"1.26.0\")]\n impl<T> FusedIterator for IntoIter<T> {}\n \n+#[stable(feature = \"default_iters\", since = \"CURRENT_RUSTC_VERSION\")]\n+impl<T> Default for IntoIter<T> {\n+    fn default() -> Self {\n+        IntoIter { iter: Default::default() }\n+    }\n+}\n+\n // In addition to the SAFETY invariants of the following three unsafe traits\n // also refer to the vec::in_place_collect module documentation to get an overview\n #[unstable(issue = \"none\", feature = \"inplace_iteration\")]"}, {"sha": "c1e8a84969ae0ef2c91f8be0e1f91bacbfb2ce75", "filename": "library/alloc/src/collections/btree/map.rs", "status": "modified", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/05c7330ca03650bbcb6a55f5fa490b3bb03c1940/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05c7330ca03650bbcb6a55f5fa490b3bb03c1940/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs?ref=05c7330ca03650bbcb6a55f5fa490b3bb03c1940", "patch": "@@ -362,6 +362,13 @@ impl<K: fmt::Debug, V: fmt::Debug> fmt::Debug for Iter<'_, K, V> {\n     }\n }\n \n+#[stable(feature = \"default_iters\", since = \"CURRENT_RUSTC_VERSION\")]\n+impl<'a, K: 'a, V: 'a> Default for Iter<'a, K, V> {\n+    fn default() -> Self {\n+        Iter { range: Default::default(), length: 0 }\n+    }\n+}\n+\n /// A mutable iterator over the entries of a `BTreeMap`.\n ///\n /// This `struct` is created by the [`iter_mut`] method on [`BTreeMap`]. See its\n@@ -386,6 +393,13 @@ impl<K: fmt::Debug, V: fmt::Debug> fmt::Debug for IterMut<'_, K, V> {\n     }\n }\n \n+#[stable(feature = \"default_iters\", since = \"CURRENT_RUSTC_VERSION\")]\n+impl<'a, K: 'a, V: 'a> Default for IterMut<'a, K, V> {\n+    fn default() -> Self {\n+        IterMut { range: Default::default(), length: 0, _marker: PhantomData {} }\n+    }\n+}\n+\n /// An owning iterator over the entries of a `BTreeMap`.\n ///\n /// This `struct` is created by the [`into_iter`] method on [`BTreeMap`]\n@@ -421,6 +435,13 @@ impl<K: Debug, V: Debug, A: Allocator + Clone> Debug for IntoIter<K, V, A> {\n     }\n }\n \n+#[stable(feature = \"default_iters\", since = \"CURRENT_RUSTC_VERSION\")]\n+impl<K, V> Default for IntoIter<K, V> {\n+    fn default() -> Self {\n+        IntoIter { range: Default::default(), length: 0, alloc: Global }\n+    }\n+}\n+\n /// An iterator over the keys of a `BTreeMap`.\n ///\n /// This `struct` is created by the [`keys`] method on [`BTreeMap`]. See its\n@@ -1768,6 +1789,13 @@ impl<K, V> Clone for Keys<'_, K, V> {\n     }\n }\n \n+#[stable(feature = \"default_iters\", since = \"CURRENT_RUSTC_VERSION\")]\n+impl<K, V> Default for Keys<'_, K, V> {\n+    fn default() -> Self {\n+        Keys { inner: Default::default() }\n+    }\n+}\n+\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, K, V> Iterator for Values<'a, K, V> {\n     type Item = &'a V;\n@@ -1809,6 +1837,13 @@ impl<K, V> Clone for Values<'_, K, V> {\n     }\n }\n \n+#[stable(feature = \"default_iters\", since = \"CURRENT_RUSTC_VERSION\")]\n+impl<K, V> Default for Values<'_, K, V> {\n+    fn default() -> Self {\n+        Values { inner: Default::default() }\n+    }\n+}\n+\n /// An iterator produced by calling `drain_filter` on BTreeMap.\n #[unstable(feature = \"btree_drain_filter\", issue = \"70530\")]\n pub struct DrainFilter<\n@@ -1945,6 +1980,13 @@ impl<'a, K, V> Iterator for Range<'a, K, V> {\n     }\n }\n \n+#[stable(feature = \"default_iters\", since = \"CURRENT_RUSTC_VERSION\")]\n+impl<K, V> Default for Range<'_, K, V> {\n+    fn default() -> Self {\n+        Range { inner: Default::default() }\n+    }\n+}\n+\n #[stable(feature = \"map_values_mut\", since = \"1.10.0\")]\n impl<'a, K, V> Iterator for ValuesMut<'a, K, V> {\n     type Item = &'a mut V;\n@@ -2021,6 +2063,13 @@ impl<K, V, A: Allocator + Clone> ExactSizeIterator for IntoKeys<K, V, A> {\n #[stable(feature = \"map_into_keys_values\", since = \"1.54.0\")]\n impl<K, V, A: Allocator + Clone> FusedIterator for IntoKeys<K, V, A> {}\n \n+#[stable(feature = \"default_iters\", since = \"CURRENT_RUSTC_VERSION\")]\n+impl<K, V> Default for IntoKeys<K, V> {\n+    fn default() -> Self {\n+        IntoKeys { inner: Default::default() }\n+    }\n+}\n+\n #[stable(feature = \"map_into_keys_values\", since = \"1.54.0\")]\n impl<K, V, A: Allocator + Clone> Iterator for IntoValues<K, V, A> {\n     type Item = V;\n@@ -2055,6 +2104,13 @@ impl<K, V, A: Allocator + Clone> ExactSizeIterator for IntoValues<K, V, A> {\n #[stable(feature = \"map_into_keys_values\", since = \"1.54.0\")]\n impl<K, V, A: Allocator + Clone> FusedIterator for IntoValues<K, V, A> {}\n \n+#[stable(feature = \"default_iters\", since = \"CURRENT_RUSTC_VERSION\")]\n+impl<K, V> Default for IntoValues<K, V> {\n+    fn default() -> Self {\n+        IntoValues { inner: Default::default() }\n+    }\n+}\n+\n #[stable(feature = \"btree_range\", since = \"1.17.0\")]\n impl<'a, K, V> DoubleEndedIterator for Range<'a, K, V> {\n     fn next_back(&mut self) -> Option<(&'a K, &'a V)> {"}, {"sha": "4d011195936c66e715795c3420646c08890a415e", "filename": "library/alloc/src/collections/btree/map/tests.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/05c7330ca03650bbcb6a55f5fa490b3bb03c1940/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05c7330ca03650bbcb6a55f5fa490b3bb03c1940/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap%2Ftests.rs?ref=05c7330ca03650bbcb6a55f5fa490b3bb03c1940", "patch": "@@ -563,6 +563,22 @@ fn test_iter_min_max() {\n     a.check();\n }\n \n+#[test]\n+fn test_iters_default() {\n+    let iter: Keys<'_, u8, u8> = Keys::default();\n+    assert_eq!(iter.len(), 0);\n+    let iter: Values<'_, u8, u8> = Values::default();\n+    assert_eq!(iter.len(), 0);\n+    let iter: Range<'_, u8, u8> = Range::default();\n+    assert_eq!(iter.count(), 0);\n+    let iter: IntoIter<u8, u8> = IntoIter::default();\n+    assert_eq!(iter.len(), 0);\n+    let iter: IntoKeys<u8, u8> = IntoKeys::default();\n+    assert_eq!(iter.len(), 0);\n+    let iter: IntoValues<u8, u8> = IntoValues::default();\n+    assert_eq!(iter.len(), 0);\n+}\n+\n fn range_keys(map: &BTreeMap<i32, i32>, range: impl RangeBounds<i32>) -> Vec<i32> {\n     Vec::from_iter(map.range(range).map(|(&k, &v)| {\n         assert_eq!(k, v);"}, {"sha": "a85a3162451bf25b027a2824a885762f7215578e", "filename": "library/alloc/src/collections/btree/navigate.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/05c7330ca03650bbcb6a55f5fa490b3bb03c1940/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnavigate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05c7330ca03650bbcb6a55f5fa490b3bb03c1940/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnavigate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnavigate.rs?ref=05c7330ca03650bbcb6a55f5fa490b3bb03c1940", "patch": "@@ -19,6 +19,12 @@ impl<'a, K: 'a, V: 'a> Clone for LeafRange<marker::Immut<'a>, K, V> {\n     }\n }\n \n+impl<B, K, V> Default for LeafRange<B, K, V> {\n+    fn default() -> Self {\n+        LeafRange { front: None, back: None }\n+    }\n+}\n+\n impl<BorrowType, K, V> LeafRange<BorrowType, K, V> {\n     pub fn none() -> Self {\n         LeafRange { front: None, back: None }\n@@ -124,6 +130,12 @@ pub struct LazyLeafRange<BorrowType, K, V> {\n     back: Option<LazyLeafHandle<BorrowType, K, V>>,\n }\n \n+impl<B, K, V> Default for LazyLeafRange<B, K, V> {\n+    fn default() -> Self {\n+        LazyLeafRange { front: None, back: None }\n+    }\n+}\n+\n impl<'a, K: 'a, V: 'a> Clone for LazyLeafRange<marker::Immut<'a>, K, V> {\n     fn clone(&self) -> Self {\n         LazyLeafRange { front: self.front.clone(), back: self.back.clone() }"}, {"sha": "897499db429814af08cf2a8251d63f0cf357b86d", "filename": "library/alloc/src/collections/btree/set.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/05c7330ca03650bbcb6a55f5fa490b3bb03c1940/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05c7330ca03650bbcb6a55f5fa490b3bb03c1940/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset.rs?ref=05c7330ca03650bbcb6a55f5fa490b3bb03c1940", "patch": "@@ -1544,6 +1544,14 @@ impl<T, A: Allocator + Clone> Iterator for IntoIter<T, A> {\n         self.iter.size_hint()\n     }\n }\n+\n+#[stable(feature = \"default_iters\", since = \"CURRENT_RUSTC_VERSION\")]\n+impl<T> Default for Iter<'_, T> {\n+    fn default() -> Self {\n+        Iter { iter: Default::default() }\n+    }\n+}\n+\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T, A: Allocator + Clone> DoubleEndedIterator for IntoIter<T, A> {\n     fn next_back(&mut self) -> Option<T> {\n@@ -1560,6 +1568,13 @@ impl<T, A: Allocator + Clone> ExactSizeIterator for IntoIter<T, A> {\n #[stable(feature = \"fused\", since = \"1.26.0\")]\n impl<T, A: Allocator + Clone> FusedIterator for IntoIter<T, A> {}\n \n+#[stable(feature = \"default_iters\", since = \"CURRENT_RUSTC_VERSION\")]\n+impl<T> Default for IntoIter<T> {\n+    fn default() -> Self {\n+        IntoIter { iter: Default::default() }\n+    }\n+}\n+\n #[stable(feature = \"btree_range\", since = \"1.17.0\")]\n impl<T> Clone for Range<'_, T> {\n     fn clone(&self) -> Self {\n@@ -1598,6 +1613,13 @@ impl<'a, T> DoubleEndedIterator for Range<'a, T> {\n #[stable(feature = \"fused\", since = \"1.26.0\")]\n impl<T> FusedIterator for Range<'_, T> {}\n \n+#[stable(feature = \"default_iters\", since = \"CURRENT_RUSTC_VERSION\")]\n+impl<T> Default for Range<'_, T> {\n+    fn default() -> Self {\n+        Range { iter: Default::default() }\n+    }\n+}\n+\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T, A: Allocator + Clone> Clone for Difference<'_, T, A> {\n     fn clone(&self) -> Self {"}, {"sha": "dae7fc48b1f98a335f446ca86a2c16b8594f8bfd", "filename": "library/alloc/src/collections/linked_list.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/05c7330ca03650bbcb6a55f5fa490b3bb03c1940/library%2Falloc%2Fsrc%2Fcollections%2Flinked_list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05c7330ca03650bbcb6a55f5fa490b3bb03c1940/library%2Falloc%2Fsrc%2Fcollections%2Flinked_list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Flinked_list.rs?ref=05c7330ca03650bbcb6a55f5fa490b3bb03c1940", "patch": "@@ -1075,6 +1075,13 @@ impl<T> ExactSizeIterator for Iter<'_, T> {}\n #[stable(feature = \"fused\", since = \"1.26.0\")]\n impl<T> FusedIterator for Iter<'_, T> {}\n \n+#[stable(feature = \"default_iters\", since = \"CURRENT_RUSTC_VERSION\")]\n+impl<T> Default for Iter<'_, T> {\n+    fn default() -> Self {\n+        Iter { head: None, tail: None, len: 0, marker: Default::default() }\n+    }\n+}\n+\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, T> Iterator for IterMut<'a, T> {\n     type Item = &'a mut T;\n@@ -1129,6 +1136,13 @@ impl<T> ExactSizeIterator for IterMut<'_, T> {}\n #[stable(feature = \"fused\", since = \"1.26.0\")]\n impl<T> FusedIterator for IterMut<'_, T> {}\n \n+#[stable(feature = \"default_iters\", since = \"CURRENT_RUSTC_VERSION\")]\n+impl<T> Default for IterMut<'_, T> {\n+    fn default() -> Self {\n+        IterMut { head: None, tail: None, len: 0, marker: Default::default() }\n+    }\n+}\n+\n /// A cursor over a `LinkedList`.\n ///\n /// A `Cursor` is like an iterator, except that it can freely seek back-and-forth.\n@@ -1808,6 +1822,13 @@ impl<T> ExactSizeIterator for IntoIter<T> {}\n #[stable(feature = \"fused\", since = \"1.26.0\")]\n impl<T> FusedIterator for IntoIter<T> {}\n \n+#[stable(feature = \"default_iters\", since = \"CURRENT_RUSTC_VERSION\")]\n+impl<T> Default for IntoIter<T> {\n+    fn default() -> Self {\n+        LinkedList::new().into_iter()\n+    }\n+}\n+\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T> FromIterator<T> for LinkedList<T> {\n     fn from_iter<I: IntoIterator<Item = T>>(iter: I) -> Self {"}, {"sha": "075c68f72413769f2bcb69cadcd8a15b1f034f07", "filename": "library/alloc/src/collections/linked_list/tests.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/05c7330ca03650bbcb6a55f5fa490b3bb03c1940/library%2Falloc%2Fsrc%2Fcollections%2Flinked_list%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05c7330ca03650bbcb6a55f5fa490b3bb03c1940/library%2Falloc%2Fsrc%2Fcollections%2Flinked_list%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Flinked_list%2Ftests.rs?ref=05c7330ca03650bbcb6a55f5fa490b3bb03c1940", "patch": "@@ -172,6 +172,12 @@ fn test_iterator() {\n     assert_eq!(it.next(), None);\n }\n \n+#[test]\n+fn test_default() {\n+    let iter: IntoIter<u8> = Default::default();\n+    assert_eq!(iter.len(), 0);\n+}\n+\n #[test]\n fn test_iterator_clone() {\n     let mut n = LinkedList::new();"}, {"sha": "2be484c3dd4d099fd447f570f9c2bcdd8ada03f5", "filename": "library/alloc/src/vec/into_iter.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/05c7330ca03650bbcb6a55f5fa490b3bb03c1940/library%2Falloc%2Fsrc%2Fvec%2Finto_iter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05c7330ca03650bbcb6a55f5fa490b3bb03c1940/library%2Falloc%2Fsrc%2Fvec%2Finto_iter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Finto_iter.rs?ref=05c7330ca03650bbcb6a55f5fa490b3bb03c1940", "patch": "@@ -347,6 +347,13 @@ impl<T, A: Allocator> FusedIterator for IntoIter<T, A> {}\n #[unstable(feature = \"trusted_len\", issue = \"37572\")]\n unsafe impl<T, A: Allocator> TrustedLen for IntoIter<T, A> {}\n \n+#[stable(feature = \"default_iters\", since = \"CURRENT_RUSTC_VERSION\")]\n+impl<T> Default for IntoIter<T> {\n+    fn default() -> Self {\n+        super::Vec::new().into_iter()\n+    }\n+}\n+\n #[doc(hidden)]\n #[unstable(issue = \"none\", feature = \"std_internals\")]\n #[rustc_unsafe_specialization_marker]"}, {"sha": "782b150681c0a82285a88e9cc7911c269d4f728f", "filename": "library/alloc/tests/vec.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/05c7330ca03650bbcb6a55f5fa490b3bb03c1940/library%2Falloc%2Ftests%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05c7330ca03650bbcb6a55f5fa490b3bb03c1940/library%2Falloc%2Ftests%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Ftests%2Fvec.rs?ref=05c7330ca03650bbcb6a55f5fa490b3bb03c1940", "patch": "@@ -1,5 +1,6 @@\n use core::alloc::{Allocator, Layout};\n-use core::iter::IntoIterator;\n+use core::assert_eq;\n+use core::iter::{ExactSizeIterator, IntoIterator};\n use core::ptr::NonNull;\n use std::alloc::System;\n use std::assert_matches::assert_matches;\n@@ -1035,6 +1036,13 @@ fn test_into_iter_clone() {\n     assert_eq!(it.next(), None);\n }\n \n+#[test]\n+fn test_into_iter_default() {\n+    let iter: IntoIter<u8> = Default::default();\n+    assert_eq!(iter.len(), 0);\n+    assert_eq!(iter.as_slice(), &[]);\n+}\n+\n #[test]\n fn test_into_iter_leak() {\n     static mut DROPS: i32 = 0;"}, {"sha": "21fc3bc6f6f019b003b5f3cb2871772cd7255499", "filename": "library/core/src/iter/adapters/chain.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/05c7330ca03650bbcb6a55f5fa490b3bb03c1940/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fchain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05c7330ca03650bbcb6a55f5fa490b3bb03c1940/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fchain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fchain.rs?ref=05c7330ca03650bbcb6a55f5fa490b3bb03c1940", "patch": "@@ -282,6 +282,17 @@ where\n {\n }\n \n+#[stable(feature = \"default_iters\", since = \"CURRENT_RUSTC_VERSION\")]\n+impl<A, B> Default for Chain<A, B>\n+where\n+    A: Iterator + Default,\n+    B: Iterator + Default,\n+{\n+    fn default() -> Self {\n+        Chain::new(Default::default(), Default::default())\n+    }\n+}\n+\n #[inline]\n fn and_then_or_clear<T, U>(opt: &mut Option<T>, f: impl FnOnce(&mut T) -> Option<U>) -> Option<U> {\n     let x = f(opt.as_mut()?);"}, {"sha": "d22a6e721f5837abecd6bd09a5cbe38b3f17666f", "filename": "library/core/src/iter/adapters/cloned.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/05c7330ca03650bbcb6a55f5fa490b3bb03c1940/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fcloned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05c7330ca03650bbcb6a55f5fa490b3bb03c1940/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fcloned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fcloned.rs?ref=05c7330ca03650bbcb6a55f5fa490b3bb03c1940", "patch": "@@ -153,3 +153,14 @@ where\n         item.clone()\n     }\n }\n+\n+#[stable(feature = \"default_iters\", since = \"CURRENT_RUSTC_VERSION\")]\n+impl<'a, I, T: 'a> Default for Cloned<I>\n+where\n+    I: Default + Iterator<Item = &'a T>,\n+    T: Clone,\n+{\n+    fn default() -> Self {\n+        Self::new(Default::default())\n+    }\n+}"}, {"sha": "d5e579834eee8ef58d3a26b85e2fff93f6354f37", "filename": "library/core/src/iter/adapters/copied.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/05c7330ca03650bbcb6a55f5fa490b3bb03c1940/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fcopied.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05c7330ca03650bbcb6a55f5fa490b3bb03c1940/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fcopied.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fcopied.rs?ref=05c7330ca03650bbcb6a55f5fa490b3bb03c1940", "patch": "@@ -240,3 +240,14 @@ where\n         }\n     }\n }\n+\n+#[stable(feature = \"default_iters\", since = \"CURRENT_RUSTC_VERSION\")]\n+impl<'a, I, T: 'a> Default for Copied<I>\n+where\n+    I: Default + Iterator<Item = &'a T>,\n+    T: Copy,\n+{\n+    fn default() -> Self {\n+        Self::new(Default::default())\n+    }\n+}"}, {"sha": "0b44139a83b7a2d58765a09522476ac1a92a7fbd", "filename": "library/core/src/iter/adapters/enumerate.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/05c7330ca03650bbcb6a55f5fa490b3bb03c1940/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fenumerate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05c7330ca03650bbcb6a55f5fa490b3bb03c1940/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fenumerate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fenumerate.rs?ref=05c7330ca03650bbcb6a55f5fa490b3bb03c1940", "patch": "@@ -264,3 +264,13 @@ where\n \n #[unstable(issue = \"none\", feature = \"inplace_iteration\")]\n unsafe impl<I: InPlaceIterable> InPlaceIterable for Enumerate<I> {}\n+\n+#[stable(feature = \"default_iters\", since = \"CURRENT_RUSTC_VERSION\")]\n+impl<I> Default for Enumerate<I>\n+where\n+    I: Iterator + Default,\n+{\n+    fn default() -> Self {\n+        Enumerate::new(Default::default())\n+    }\n+}"}, {"sha": "c0a347a7c1d9706f00af4d9f9920a4ba7c259b03", "filename": "library/core/src/iter/adapters/flatten.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/05c7330ca03650bbcb6a55f5fa490b3bb03c1940/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fflatten.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05c7330ca03650bbcb6a55f5fa490b3bb03c1940/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fflatten.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fflatten.rs?ref=05c7330ca03650bbcb6a55f5fa490b3bb03c1940", "patch": "@@ -302,6 +302,17 @@ where\n {\n }\n \n+#[stable(feature = \"default_iters\", since = \"CURRENT_RUSTC_VERSION\")]\n+impl<I> Default for Flatten<I>\n+where\n+    I: Iterator + Default,\n+    <I as Iterator>::Item: IntoIterator,\n+{\n+    fn default() -> Self {\n+        Flatten::new(Default::default())\n+    }\n+}\n+\n /// Real logic of both `Flatten` and `FlatMap` which simply delegate to\n /// this type.\n #[derive(Clone, Debug)]"}, {"sha": "87275fa3951e4e162c48cf6aca8d03c5a9f358f9", "filename": "library/core/src/iter/adapters/fuse.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/05c7330ca03650bbcb6a55f5fa490b3bb03c1940/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Ffuse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05c7330ca03650bbcb6a55f5fa490b3bb03c1940/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Ffuse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Ffuse.rs?ref=05c7330ca03650bbcb6a55f5fa490b3bb03c1940", "patch": "@@ -181,6 +181,13 @@ where\n     }\n }\n \n+#[stable(feature = \"default_iters\", since = \"CURRENT_RUSTC_VERSION\")]\n+impl<I: Default> Default for Fuse<I> {\n+    fn default() -> Self {\n+        Fuse { iter: Default::default() }\n+    }\n+}\n+\n #[unstable(feature = \"trusted_len\", issue = \"37572\")]\n // SAFETY: `TrustedLen` requires that an accurate length is reported via `size_hint()`. As `Fuse`\n // is just forwarding this to the wrapped iterator `I` this property is preserved and it is safe to"}, {"sha": "4ad75ec0ea298d5acda4d108dfcc14a250c6de78", "filename": "library/core/src/iter/adapters/rev.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/05c7330ca03650bbcb6a55f5fa490b3bb03c1940/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Frev.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05c7330ca03650bbcb6a55f5fa490b3bb03c1940/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Frev.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Frev.rs?ref=05c7330ca03650bbcb6a55f5fa490b3bb03c1940", "patch": "@@ -135,3 +135,13 @@ impl<I> FusedIterator for Rev<I> where I: FusedIterator + DoubleEndedIterator {}\n \n #[unstable(feature = \"trusted_len\", issue = \"37572\")]\n unsafe impl<I> TrustedLen for Rev<I> where I: TrustedLen + DoubleEndedIterator {}\n+\n+#[stable(feature = \"default_iters\", since = \"CURRENT_RUSTC_VERSION\")]\n+impl<I> Default for Rev<I>\n+where\n+    I: Default + Iterator,\n+{\n+    fn default() -> Self {\n+        Rev::new(Default::default())\n+    }\n+}"}, {"sha": "57754182c4e8aa8aa7f2d180f389eb7c3cde3e1f", "filename": "library/core/src/slice/iter/macros.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/05c7330ca03650bbcb6a55f5fa490b3bb03c1940/library%2Fcore%2Fsrc%2Fslice%2Fiter%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05c7330ca03650bbcb6a55f5fa490b3bb03c1940/library%2Fcore%2Fsrc%2Fslice%2Fiter%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fiter%2Fmacros.rs?ref=05c7330ca03650bbcb6a55f5fa490b3bb03c1940", "patch": "@@ -393,6 +393,13 @@ macro_rules! iterator {\n                 }\n             }\n         }\n+\n+        #[stable(feature = \"default_iters\", since = \"CURRENT_RUSTC_VERSION\")]\n+        impl<T> Default for $name<'_, T> {\n+            fn default() -> Self {\n+                (& $( $mut_ )? []).into_iter()\n+            }\n+        }\n     }\n }\n "}, {"sha": "294de77a6b07add4120227678f230388e444e7d7", "filename": "library/core/tests/slice.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/05c7330ca03650bbcb6a55f5fa490b3bb03c1940/library%2Fcore%2Ftests%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05c7330ca03650bbcb6a55f5fa490b3bb03c1940/library%2Fcore%2Ftests%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fslice.rs?ref=05c7330ca03650bbcb6a55f5fa490b3bb03c1940", "patch": "@@ -1,8 +1,10 @@\n use core::cell::Cell;\n use core::cmp::Ordering;\n+use core::iter::ExactSizeIterator;\n use core::mem::MaybeUninit;\n use core::result::Result::{Err, Ok};\n-use core::slice;\n+use core::slice::Iter;\n+use core::{assert_eq, slice};\n \n #[test]\n fn test_position() {\n@@ -224,6 +226,12 @@ fn test_iterator_count() {\n     assert_eq!(iter2.count(), 3);\n }\n \n+#[test]\n+fn test_iterator_default() {\n+    let iter: Iter<'_, u8> = Iter::default();\n+    assert_eq!(iter.len(), 0);\n+}\n+\n #[test]\n fn test_chunks_count() {\n     let v: &[i32] = &[0, 1, 2, 3, 4, 5];"}]}