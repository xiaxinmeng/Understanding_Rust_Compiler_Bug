{"sha": "fb8fb65131c8d3e6335efd401e4e83287be49357", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZiOGZiNjUxMzFjOGQzZTYzMzVlZmQ0MDFlNGU4MzI4N2JlNDkzNTc=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-05-02T10:30:49Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-05-02T10:30:49Z"}, "message": "Merge #4234\n\n4234: Support local_inner_macros r=jonas-schievink a=edwin0cheng\n\nThis PR implements `#[macro_export(local_inner_macros)]` support. \r\n\r\nNote that the rustc implementation is quite [hacky][1] too. :)\r\n\r\n[1]: https://github.com/rust-lang/rust/blob/614f273e9388ddd7804d5cbc80b8865068a3744e/src/librustc_resolve/macros.rs#L456\n\nCo-authored-by: Edwin Cheng <edwin0cheng@gmail.com>", "tree": {"sha": "9b82278d8f204a012a1e115f92b252c7c6150e15", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9b82278d8f204a012a1e115f92b252c7c6150e15"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fb8fb65131c8d3e6335efd401e4e83287be49357", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJerUvZCRBK7hj4Ov3rIwAAdHIIAB9ZvCHSEzgP6og61D9VF4QD\nOpAKOKeoGQOLjga1x8vYN6Ye4Vvvi1w/6JXpa+HyL1ghVEZnFqfcVrNJ8B1ZPlZj\nMUFSrIABL3M6v1MIvZT4svzyK24bdxRkxMUNwiWRGdlkoz5S3TNcxvgXaT1vCaSg\njyqt2Ym5vV6jVzeQGx+WR7KT5oetYE32gdkNfWXK2Eo1zk2ezqM7+4vvON7T2e3e\npNQfDrQnsa00/P/6rU6IqB2SLRYBNEo/OrRDVdvdOPFYQ7dw631WfYksDWITCXM/\n+6CPmv7mMtKaynwi7vVsDuA76y0n7QM/PQxebRaisQcFZUR6kFOgWGB3EkHxKkY=\n=6zvI\n-----END PGP SIGNATURE-----\n", "payload": "tree 9b82278d8f204a012a1e115f92b252c7c6150e15\nparent 75bc0249463b72971200e482d69dad88d4e76ae3\nparent edf0b4c1528407d5077220191e601ac41f790b99\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1588415449 +0000\ncommitter GitHub <noreply@github.com> 1588415449 +0000\n\nMerge #4234\n\n4234: Support local_inner_macros r=jonas-schievink a=edwin0cheng\n\nThis PR implements `#[macro_export(local_inner_macros)]` support. \r\n\r\nNote that the rustc implementation is quite [hacky][1] too. :)\r\n\r\n[1]: https://github.com/rust-lang/rust/blob/614f273e9388ddd7804d5cbc80b8865068a3744e/src/librustc_resolve/macros.rs#L456\n\nCo-authored-by: Edwin Cheng <edwin0cheng@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fb8fb65131c8d3e6335efd401e4e83287be49357", "html_url": "https://github.com/rust-lang/rust/commit/fb8fb65131c8d3e6335efd401e4e83287be49357", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fb8fb65131c8d3e6335efd401e4e83287be49357/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "75bc0249463b72971200e482d69dad88d4e76ae3", "url": "https://api.github.com/repos/rust-lang/rust/commits/75bc0249463b72971200e482d69dad88d4e76ae3", "html_url": "https://github.com/rust-lang/rust/commit/75bc0249463b72971200e482d69dad88d4e76ae3"}, {"sha": "edf0b4c1528407d5077220191e601ac41f790b99", "url": "https://api.github.com/repos/rust-lang/rust/commits/edf0b4c1528407d5077220191e601ac41f790b99", "html_url": "https://github.com/rust-lang/rust/commit/edf0b4c1528407d5077220191e601ac41f790b99"}], "stats": {"total": 156, "additions": 139, "deletions": 17}, "files": [{"sha": "8af64fdc1b2583104ff3cc305bfdc74da502bf11", "filename": "crates/ra_hir/src/semantics/source_to_def.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fb8fb65131c8d3e6335efd401e4e83287be49357/crates%2Fra_hir%2Fsrc%2Fsemantics%2Fsource_to_def.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb8fb65131c8d3e6335efd401e4e83287be49357/crates%2Fra_hir%2Fsrc%2Fsemantics%2Fsource_to_def.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fsemantics%2Fsource_to_def.rs?ref=fb8fb65131c8d3e6335efd401e4e83287be49357", "patch": "@@ -151,7 +151,7 @@ impl SourceToDefCtx<'_, '_> {\n         let krate = self.file_to_def(file_id)?.krate;\n         let file_ast_id = self.db.ast_id_map(src.file_id).ast_id(&src.value);\n         let ast_id = Some(AstId::new(src.file_id, file_ast_id));\n-        Some(MacroDefId { krate: Some(krate), ast_id, kind })\n+        Some(MacroDefId { krate: Some(krate), ast_id, kind, local_inner: false })\n     }\n \n     pub(super) fn find_container(&mut self, src: InFile<&SyntaxNode>) -> Option<ChildContainer> {"}, {"sha": "576cd0c65ba984b9b00dccf62877588e18981564", "filename": "crates/ra_hir_def/src/attr.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fb8fb65131c8d3e6335efd401e4e83287be49357/crates%2Fra_hir_def%2Fsrc%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb8fb65131c8d3e6335efd401e4e83287be49357/crates%2Fra_hir_def%2Fsrc%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fattr.rs?ref=fb8fb65131c8d3e6335efd401e4e83287be49357", "patch": "@@ -140,6 +140,7 @@ impl Attr {\n     }\n }\n \n+#[derive(Debug, Clone, Copy)]\n pub struct AttrQuery<'a> {\n     attrs: &'a Attrs,\n     key: &'static str,"}, {"sha": "687216dc35ea90a72d43f0c0f57d08d580dcd1e6", "filename": "crates/ra_hir_def/src/body/lower.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fb8fb65131c8d3e6335efd401e4e83287be49357/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb8fb65131c8d3e6335efd401e4e83287be49357/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs?ref=fb8fb65131c8d3e6335efd401e4e83287be49357", "patch": "@@ -466,6 +466,7 @@ impl ExprCollector<'_> {\n                         krate: Some(self.expander.module.krate),\n                         ast_id: Some(self.expander.ast_id(&e)),\n                         kind: MacroDefKind::Declarative,\n+                        local_inner: false,\n                     };\n                     self.body.item_scope.define_legacy_macro(name, mac);\n "}, {"sha": "bf3968bd62ac04366ff86f2080bc2c5a7ac7111d", "filename": "crates/ra_hir_def/src/nameres/collector.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fb8fb65131c8d3e6335efd401e4e83287be49357/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb8fb65131c8d3e6335efd401e4e83287be49357/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs?ref=fb8fb65131c8d3e6335efd401e4e83287be49357", "patch": "@@ -204,6 +204,7 @@ impl DefCollector<'_> {\n                 ast_id: None,\n                 krate: Some(krate),\n                 kind: MacroDefKind::CustomDerive(expander),\n+                local_inner: false,\n             };\n \n             self.define_proc_macro(name.clone(), macro_id);\n@@ -941,6 +942,7 @@ impl ModCollector<'_, '_> {\n                     ast_id: Some(ast_id.ast_id),\n                     krate: Some(self.def_collector.def_map.krate),\n                     kind: MacroDefKind::Declarative,\n+                    local_inner: mac.local_inner,\n                 };\n                 self.def_collector.define_macro(self.module_id, name.clone(), macro_id, mac.export);\n             }"}, {"sha": "a71503c76ecdfa3aec10bc4d22dff4994f6ccd56", "filename": "crates/ra_hir_def/src/nameres/raw.rs", "status": "modified", "additions": 24, "deletions": 5, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/fb8fb65131c8d3e6335efd401e4e83287be49357/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb8fb65131c8d3e6335efd401e4e83287be49357/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fraw.rs?ref=fb8fb65131c8d3e6335efd401e4e83287be49357", "patch": "@@ -188,6 +188,7 @@ pub(super) struct MacroData {\n     pub(super) path: ModPath,\n     pub(super) name: Option<Name>,\n     pub(super) export: bool,\n+    pub(super) local_inner: bool,\n     pub(super) builtin: bool,\n }\n \n@@ -401,14 +402,32 @@ impl RawItemsCollector {\n \n         let name = m.name().map(|it| it.as_name());\n         let ast_id = self.source_ast_id_map.ast_id(&m);\n-        // FIXME: cfg_attr\n-        let export = m.attrs().filter_map(|x| x.simple_name()).any(|name| name == \"macro_export\");\n \n         // FIXME: cfg_attr\n-        let builtin =\n-            m.attrs().filter_map(|x| x.simple_name()).any(|name| name == \"rustc_builtin_macro\");\n+        let export_attr = attrs.by_key(\"macro_export\");\n+\n+        let export = export_attr.exists();\n+        let local_inner = if export {\n+            export_attr.tt_values().map(|it| &it.token_trees).flatten().any(|it| match it {\n+                tt::TokenTree::Leaf(tt::Leaf::Ident(ident)) => {\n+                    ident.text.contains(\"local_inner_macros\")\n+                }\n+                _ => false,\n+            })\n+        } else {\n+            false\n+        };\n+\n+        let builtin = attrs.by_key(\"rustc_builtin_macro\").exists();\n \n-        let m = self.raw_items.macros.alloc(MacroData { ast_id, path, name, export, builtin });\n+        let m = self.raw_items.macros.alloc(MacroData {\n+            ast_id,\n+            path,\n+            name,\n+            export,\n+            local_inner,\n+            builtin,\n+        });\n         self.push_item(current_module, attrs, RawItemKind::Macro(m));\n     }\n "}, {"sha": "9bc0e628747c586181a9621e90a3c77b41ea897b", "filename": "crates/ra_hir_def/src/nameres/tests/macros.rs", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/fb8fb65131c8d3e6335efd401e4e83287be49357/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Ftests%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb8fb65131c8d3e6335efd401e4e83287be49357/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Ftests%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Ftests%2Fmacros.rs?ref=fb8fb65131c8d3e6335efd401e4e83287be49357", "patch": "@@ -135,6 +135,43 @@ fn macro_rules_export_with_local_inner_macros_are_visible() {\n     \"###);\n }\n \n+#[test]\n+fn local_inner_macros_makes_local_macros_usable() {\n+    let map = def_map(\n+        \"\n+        //- /main.rs crate:main deps:foo\n+        foo::structs!(Foo, Bar);\n+        mod bar;\n+        //- /bar.rs\n+        use crate::*;\n+        //- /lib.rs crate:foo\n+        #[macro_export(local_inner_macros)]\n+        macro_rules! structs {\n+            ($($i:ident),*) => {\n+                inner!($($i),*);\n+            }\n+        }\n+        #[macro_export]\n+        macro_rules! inner {\n+            ($($i:ident),*) => {\n+                $(struct $i { field: u32 } )*\n+            }\n+        }\n+        \",\n+    );\n+    assert_snapshot!(map, @r###\"\n+   \u22eecrate\n+   \u22eeBar: t v\n+   \u22eeFoo: t v\n+   \u22eebar: t\n+   \u22ee\n+   \u22eecrate::bar\n+   \u22eeBar: t v\n+   \u22eeFoo: t v\n+   \u22eebar: t\n+    \"###);\n+}\n+\n #[test]\n fn unexpanded_macro_should_expand_by_fixedpoint_loop() {\n     let map = def_map("}, {"sha": "6a0c019fdff9862530ac35d254186e742a871254", "filename": "crates/ra_hir_def/src/path/lower.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/fb8fb65131c8d3e6335efd401e4e83287be49357/crates%2Fra_hir_def%2Fsrc%2Fpath%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb8fb65131c8d3e6335efd401e4e83287be49357/crates%2Fra_hir_def%2Fsrc%2Fpath%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fpath%2Flower.rs?ref=fb8fb65131c8d3e6335efd401e4e83287be49357", "patch": "@@ -116,6 +116,21 @@ pub(super) fn lower_path(mut path: ast::Path, hygiene: &Hygiene) -> Option<Path>\n     }\n     segments.reverse();\n     generic_args.reverse();\n+\n+    // handle local_inner_macros :\n+    // Basically, even in rustc it is quite hacky:\n+    // https://github.com/rust-lang/rust/blob/614f273e9388ddd7804d5cbc80b8865068a3744e/src/librustc_resolve/macros.rs#L456\n+    // We follow what it did anyway :)\n+    if segments.len() == 1 && kind == PathKind::Plain {\n+        if let Some(macro_call) = path.syntax().parent().and_then(ast::MacroCall::cast) {\n+            if macro_call.is_bang() {\n+                if let Some(crate_id) = hygiene.local_inner_macros() {\n+                    kind = PathKind::DollarCrate(crate_id);\n+                }\n+            }\n+        }\n+    }\n+\n     let mod_path = ModPath { kind, segments };\n     return Some(Path { type_anchor, mod_path, generic_args });\n "}, {"sha": "1dc9cac6651e18f377e01e8bd888707211f1dfd2", "filename": "crates/ra_hir_expand/src/builtin_derive.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fb8fb65131c8d3e6335efd401e4e83287be49357/crates%2Fra_hir_expand%2Fsrc%2Fbuiltin_derive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb8fb65131c8d3e6335efd401e4e83287be49357/crates%2Fra_hir_expand%2Fsrc%2Fbuiltin_derive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_expand%2Fsrc%2Fbuiltin_derive.rs?ref=fb8fb65131c8d3e6335efd401e4e83287be49357", "patch": "@@ -38,7 +38,7 @@ macro_rules! register_builtin {\n                  _ => return None,\n             };\n \n-            Some(MacroDefId { krate: None, ast_id: None, kind: MacroDefKind::BuiltInDerive(kind) })\n+            Some(MacroDefId { krate: None, ast_id: None, kind: MacroDefKind::BuiltInDerive(kind), local_inner: false })\n         }\n     };\n }"}, {"sha": "d8b3d342ce3a3b4a4a85de03cc47c21281e3cee4", "filename": "crates/ra_hir_expand/src/builtin_macro.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fb8fb65131c8d3e6335efd401e4e83287be49357/crates%2Fra_hir_expand%2Fsrc%2Fbuiltin_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb8fb65131c8d3e6335efd401e4e83287be49357/crates%2Fra_hir_expand%2Fsrc%2Fbuiltin_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_expand%2Fsrc%2Fbuiltin_macro.rs?ref=fb8fb65131c8d3e6335efd401e4e83287be49357", "patch": "@@ -73,11 +73,13 @@ pub fn find_builtin_macro(\n             krate: Some(krate),\n             ast_id: Some(ast_id),\n             kind: MacroDefKind::BuiltIn(kind),\n+            local_inner: false,\n         }),\n         Either::Right(kind) => Some(MacroDefId {\n             krate: Some(krate),\n             ast_id: Some(ast_id),\n             kind: MacroDefKind::BuiltInEager(kind),\n+            local_inner: false,\n         }),\n     }\n }\n@@ -406,6 +408,7 @@ mod tests {\n                     krate: Some(CrateId(0)),\n                     ast_id: Some(AstId::new(file_id.into(), ast_id_map.ast_id(&macro_calls[0]))),\n                     kind: MacroDefKind::BuiltIn(expander),\n+                    local_inner: false,\n                 };\n \n                 let loc = MacroCallLoc {\n@@ -425,6 +428,7 @@ mod tests {\n                     krate: Some(CrateId(0)),\n                     ast_id: Some(AstId::new(file_id.into(), ast_id_map.ast_id(&macro_calls[0]))),\n                     kind: MacroDefKind::BuiltInEager(expander),\n+                    local_inner: false,\n                 };\n \n                 let args = macro_calls[1].token_tree().unwrap();"}, {"sha": "6b482a60c5400ef4f157c05b2caf10bc140f19b7", "filename": "crates/ra_hir_expand/src/hygiene.rs", "status": "modified", "additions": 21, "deletions": 10, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/fb8fb65131c8d3e6335efd401e4e83287be49357/crates%2Fra_hir_expand%2Fsrc%2Fhygiene.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb8fb65131c8d3e6335efd401e4e83287be49357/crates%2Fra_hir_expand%2Fsrc%2Fhygiene.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_expand%2Fsrc%2Fhygiene.rs?ref=fb8fb65131c8d3e6335efd401e4e83287be49357", "patch": "@@ -16,31 +16,34 @@ use crate::{\n pub struct Hygiene {\n     // This is what `$crate` expands to\n     def_crate: Option<CrateId>,\n+\n+    // Indiciate this is a local inner macro\n+    local_inner: bool,\n }\n \n impl Hygiene {\n     pub fn new(db: &dyn AstDatabase, file_id: HirFileId) -> Hygiene {\n-        let def_crate = match file_id.0 {\n-            HirFileIdRepr::FileId(_) => None,\n+        let (def_crate, local_inner) = match file_id.0 {\n+            HirFileIdRepr::FileId(_) => (None, false),\n             HirFileIdRepr::MacroFile(macro_file) => match macro_file.macro_call_id {\n                 MacroCallId::LazyMacro(id) => {\n                     let loc = db.lookup_intern_macro(id);\n                     match loc.def.kind {\n-                        MacroDefKind::Declarative => loc.def.krate,\n-                        MacroDefKind::BuiltIn(_) => None,\n-                        MacroDefKind::BuiltInDerive(_) => None,\n-                        MacroDefKind::BuiltInEager(_) => None,\n-                        MacroDefKind::CustomDerive(_) => None,\n+                        MacroDefKind::Declarative => (loc.def.krate, loc.def.local_inner),\n+                        MacroDefKind::BuiltIn(_) => (None, false),\n+                        MacroDefKind::BuiltInDerive(_) => (None, false),\n+                        MacroDefKind::BuiltInEager(_) => (None, false),\n+                        MacroDefKind::CustomDerive(_) => (None, false),\n                     }\n                 }\n-                MacroCallId::EagerMacro(_id) => None,\n+                MacroCallId::EagerMacro(_id) => (None, false),\n             },\n         };\n-        Hygiene { def_crate }\n+        Hygiene { def_crate, local_inner }\n     }\n \n     pub fn new_unhygienic() -> Hygiene {\n-        Hygiene { def_crate: None }\n+        Hygiene { def_crate: None, local_inner: false }\n     }\n \n     // FIXME: this should just return name\n@@ -52,4 +55,12 @@ impl Hygiene {\n         }\n         Either::Left(name_ref.as_name())\n     }\n+\n+    pub fn local_inner_macros(&self) -> Option<CrateId> {\n+        if self.local_inner {\n+            self.def_crate\n+        } else {\n+            None\n+        }\n+    }\n }"}, {"sha": "f440c073ba8abd6ebedc28a4e5374a3e8d6126e9", "filename": "crates/ra_hir_expand/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fb8fb65131c8d3e6335efd401e4e83287be49357/crates%2Fra_hir_expand%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb8fb65131c8d3e6335efd401e4e83287be49357/crates%2Fra_hir_expand%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_expand%2Fsrc%2Flib.rs?ref=fb8fb65131c8d3e6335efd401e4e83287be49357", "patch": "@@ -204,6 +204,8 @@ pub struct MacroDefId {\n     pub krate: Option<CrateId>,\n     pub ast_id: Option<AstId<ast::MacroCall>>,\n     pub kind: MacroDefKind,\n+\n+    pub local_inner: bool,\n }\n \n impl MacroDefId {"}, {"sha": "29e38a06c466c405023921fe86364729cc7079ae", "filename": "crates/ra_hir_ty/src/tests/macros.rs", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/fb8fb65131c8d3e6335efd401e4e83287be49357/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb8fb65131c8d3e6335efd401e4e83287be49357/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fmacros.rs?ref=fb8fb65131c8d3e6335efd401e4e83287be49357", "patch": "@@ -427,6 +427,32 @@ fn main() {\n     );\n }\n \n+#[test]\n+fn infer_local_inner_macros() {\n+    let (db, pos) = TestDB::with_position(\n+        r#\"\n+//- /main.rs crate:main deps:foo\n+fn test() {\n+    let x = foo::foo!(1);\n+    x<|>;\n+}\n+\n+//- /lib.rs crate:foo\n+#[macro_export(local_inner_macros)]\n+macro_rules! foo {\n+    (1) => { bar!() };\n+}\n+\n+#[macro_export]\n+macro_rules! bar {\n+    () => { 42 }\n+}\n+\n+\"#,\n+    );\n+    assert_eq!(\"i32\", type_at_pos(&db, pos));\n+}\n+\n #[test]\n fn infer_builtin_macros_line() {\n     assert_snapshot!("}, {"sha": "528c873e076e9dc4f9027e7872a78c69e7e4cbba", "filename": "crates/ra_syntax/src/ast/extensions.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fb8fb65131c8d3e6335efd401e4e83287be49357/crates%2Fra_syntax%2Fsrc%2Fast%2Fextensions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb8fb65131c8d3e6335efd401e4e83287be49357/crates%2Fra_syntax%2Fsrc%2Fast%2Fextensions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fextensions.rs?ref=fb8fb65131c8d3e6335efd401e4e83287be49357", "patch": "@@ -423,6 +423,10 @@ impl ast::MacroCall {\n             None\n         }\n     }\n+\n+    pub fn is_bang(&self) -> bool {\n+        self.is_macro_rules().is_none()\n+    }\n }\n \n impl ast::LifetimeParam {"}]}