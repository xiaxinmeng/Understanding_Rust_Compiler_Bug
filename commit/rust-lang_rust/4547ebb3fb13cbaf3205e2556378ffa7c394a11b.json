{"sha": "4547ebb3fb13cbaf3205e2556378ffa7c394a11b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ1NDdlYmIzZmIxM2NiYWYzMjA1ZTI1NTYzNzhmZmE3YzM5NGExMWI=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-09-21T13:30:46Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-09-21T13:30:46Z"}, "message": "Rollup merge of #76983 - ssomers:btree_extra_test, r=Mark-Simulacrum\n\nBTreeMap: extra testing & fixed comments\n\nr? @Mark-Simulacrum", "tree": {"sha": "a0411acd1d7141b9cea8d4a06d7cf46b75bb6ce5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a0411acd1d7141b9cea8d4a06d7cf46b75bb6ce5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4547ebb3fb13cbaf3205e2556378ffa7c394a11b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfaKsGCRBK7hj4Ov3rIwAAdHIIAE2Dd4zNzwbmIvCv+K+dOb/a\nYDFNGyv5hzb895l0JnOQwjcyST1B52NR+JIQ/R4c6oM/HiDGGJCB3oyAgQ7DMrTa\n4+56BF/s8z8gO278IfdkbVPCmi9ZsIzWAd9T3t3t25rGQwpM/EzJc1gzBXl8L5cL\n5ipm41j/NAhm8T8X0BxOehY3g/TjZOZONBE0fVlaW2d1Hl/j1Qod2N2q4YR64xb9\nPL8yXgFLFFIpLAE0mOmo0duNJe9HtKf7nN4492y21rWiabMweDP5fSRfrbti7h+J\n3307+0IigwrbWbpzKluDmi/zjqKPeL4dhtNLE2GmT9WZqUP1/MSqr8hM1jCOy14=\n=YajS\n-----END PGP SIGNATURE-----\n", "payload": "tree a0411acd1d7141b9cea8d4a06d7cf46b75bb6ce5\nparent 4b362bbbb61f7a140c6a7443d4809b73a43e50f2\nparent 37ec0458507447565f3abdba0fab182c0dcd0e14\nauthor Ralf Jung <post@ralfj.de> 1600695046 +0200\ncommitter GitHub <noreply@github.com> 1600695046 +0200\n\nRollup merge of #76983 - ssomers:btree_extra_test, r=Mark-Simulacrum\n\nBTreeMap: extra testing & fixed comments\n\nr? @Mark-Simulacrum\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4547ebb3fb13cbaf3205e2556378ffa7c394a11b", "html_url": "https://github.com/rust-lang/rust/commit/4547ebb3fb13cbaf3205e2556378ffa7c394a11b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4547ebb3fb13cbaf3205e2556378ffa7c394a11b/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4b362bbbb61f7a140c6a7443d4809b73a43e50f2", "url": "https://api.github.com/repos/rust-lang/rust/commits/4b362bbbb61f7a140c6a7443d4809b73a43e50f2", "html_url": "https://github.com/rust-lang/rust/commit/4b362bbbb61f7a140c6a7443d4809b73a43e50f2"}, {"sha": "37ec0458507447565f3abdba0fab182c0dcd0e14", "url": "https://api.github.com/repos/rust-lang/rust/commits/37ec0458507447565f3abdba0fab182c0dcd0e14", "html_url": "https://github.com/rust-lang/rust/commit/37ec0458507447565f3abdba0fab182c0dcd0e14"}], "stats": {"total": 31, "additions": 25, "deletions": 6}, "files": [{"sha": "8018514fa1776dd6875770df96178bcab4cbc25e", "filename": "library/alloc/src/collections/btree/map/tests.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/4547ebb3fb13cbaf3205e2556378ffa7c394a11b/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4547ebb3fb13cbaf3205e2556378ffa7c394a11b/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap%2Ftests.rs?ref=4547ebb3fb13cbaf3205e2556378ffa7c394a11b", "patch": "@@ -88,6 +88,11 @@ impl<'a, K: 'a, V: 'a> BTreeMap<K, V> {\n                     let min_len = if is_root { 1 } else { node::MIN_LEN };\n                     assert!(node.len() >= min_len, \"{} < {}\", node.len(), min_len);\n \n+                    for idx in 0..=node.len() {\n+                        let edge = unsafe { node::Handle::new_edge(node, idx) };\n+                        assert!(edge.descend().ascend().ok().unwrap() == edge);\n+                    }\n+\n                     internal_length += node.len();\n                 }\n                 Position::InternalKV(kv) => {\n@@ -1846,3 +1851,17 @@ fn test_into_values() {\n     assert!(values.contains(&'b'));\n     assert!(values.contains(&'c'));\n }\n+\n+#[test]\n+fn test_insert_remove_intertwined() {\n+    let loops = if cfg!(miri) { 100 } else { 1_000_000 };\n+    let mut map = BTreeMap::new();\n+    let mut i = 1;\n+    for _ in 0..loops {\n+        i = (i + 421) & 0xFF;\n+        map.insert(i, i);\n+        map.remove(&(0xFF - i));\n+    }\n+\n+    map.check();\n+}"}, {"sha": "f1d66e973cb52dd53b0ae343999e8bf3d627ef95", "filename": "library/alloc/src/collections/btree/node.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4547ebb3fb13cbaf3205e2556378ffa7c394a11b/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4547ebb3fb13cbaf3205e2556378ffa7c394a11b/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnode.rs?ref=4547ebb3fb13cbaf3205e2556378ffa7c394a11b", "patch": "@@ -613,8 +613,8 @@ impl<'a, K, V> NodeRef<marker::Mut<'a>, K, V, marker::Internal> {\n }\n \n impl<'a, K: 'a, V: 'a> NodeRef<marker::Mut<'a>, K, V, marker::Internal> {\n-    /// Adds a key/value pair and an edge to go to the right of that pair to\n-    /// the end of the node.\n+    /// Adds a key/value pair, and an edge to go to the right of that pair,\n+    /// to the end of the node.\n     pub fn push(&mut self, key: K, val: V, edge: Root<K, V>) {\n         assert!(edge.height == self.height - 1);\n \n@@ -630,8 +630,8 @@ impl<'a, K: 'a, V: 'a> NodeRef<marker::Mut<'a>, K, V, marker::Internal> {\n         }\n     }\n \n-    /// Adds a key/value pair and an edge to go to the left of that pair to\n-    /// the beginning of the node.\n+    /// Adds a key/value pair, and an edge to go to the left of that pair,\n+    /// to the beginning of the node.\n     pub fn push_front(&mut self, key: K, val: V, edge: Root<K, V>) {\n         assert!(edge.height == self.height - 1);\n         assert!(self.len() < CAPACITY);\n@@ -1152,7 +1152,7 @@ impl<'a, K: 'a, V: 'a> Handle<NodeRef<marker::Mut<'a>, K, V, marker::Leaf>, mark\n     ///\n     /// - The node is truncated to only contain the key/value pairs to the right of\n     ///   this handle.\n-    /// - The key and value pointed to by this handle and extracted.\n+    /// - The key and value pointed to by this handle are extracted.\n     /// - All the key/value pairs to the right of this handle are put into a newly\n     ///   allocated node.\n     pub fn split(mut self) -> (NodeRef<marker::Mut<'a>, K, V, marker::Leaf>, K, V, Root<K, V>) {\n@@ -1196,7 +1196,7 @@ impl<'a, K: 'a, V: 'a> Handle<NodeRef<marker::Mut<'a>, K, V, marker::Internal>,\n     ///\n     /// - The node is truncated to only contain the edges and key/value pairs to the\n     ///   right of this handle.\n-    /// - The key and value pointed to by this handle and extracted.\n+    /// - The key and value pointed to by this handle are extracted.\n     /// - All the edges and key/value pairs to the right of this handle are put into\n     ///   a newly allocated node.\n     pub fn split(mut self) -> (NodeRef<marker::Mut<'a>, K, V, marker::Internal>, K, V, Root<K, V>) {"}]}