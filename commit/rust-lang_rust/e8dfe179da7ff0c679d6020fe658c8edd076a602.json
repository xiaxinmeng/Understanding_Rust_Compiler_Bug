{"sha": "e8dfe179da7ff0c679d6020fe658c8edd076a602", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU4ZGZlMTc5ZGE3ZmYwYzY3OWQ2MDIwZmU2NThjOGVkZDA3NmE2MDI=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2012-06-04T15:06:36Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2012-06-07T01:37:55Z"}, "message": "move tstate to dvec", "tree": {"sha": "17010eb69fb47755413fcd5d215c0c68904ee7bf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/17010eb69fb47755413fcd5d215c0c68904ee7bf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e8dfe179da7ff0c679d6020fe658c8edd076a602", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e8dfe179da7ff0c679d6020fe658c8edd076a602", "html_url": "https://github.com/rust-lang/rust/commit/e8dfe179da7ff0c679d6020fe658c8edd076a602", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e8dfe179da7ff0c679d6020fe658c8edd076a602/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9be612f7eeb4757fc5be8cb377a9c1e840a231b3", "url": "https://api.github.com/repos/rust-lang/rust/commits/9be612f7eeb4757fc5be8cb377a9c1e840a231b3", "html_url": "https://github.com/rust-lang/rust/commit/9be612f7eeb4757fc5be8cb377a9c1e840a231b3"}], "stats": {"total": 52, "additions": 26, "deletions": 26}, "files": [{"sha": "2844aa685950cf0dc53bba13f3975d929e856942", "filename": "src/rustc/middle/tstate/auxiliary.rs", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/e8dfe179da7ff0c679d6020fe658c8edd076a602/src%2Frustc%2Fmiddle%2Ftstate%2Fauxiliary.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8dfe179da7ff0c679d6020fe658c8edd076a602/src%2Frustc%2Fmiddle%2Ftstate%2Fauxiliary.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftstate%2Fauxiliary.rs?ref=e8dfe179da7ff0c679d6020fe658c8edd076a602", "patch": "@@ -16,6 +16,7 @@ import tstate::ann::{pre_and_post, pre_and_post_state, empty_ann, prestate,\n import tritv::*;\n import bitvectors::promises_;\n import driver::session::session;\n+import dvec::{dvec, extensions};\n \n import syntax::print::pprust::{constr_args_to_str, lit_to_str};\n \n@@ -197,7 +198,7 @@ type constraint = {\n     path: @path,\n     // FIXME: really only want it to be mut during collect_locals.\n     // freeze it after that.\n-    descs: @mut [pred_args]\n+    descs: @dvec<pred_args>\n };\n \n type tsconstr = {\n@@ -473,8 +474,7 @@ fn node_id_to_def(ccx: crate_ctxt, id: node_id) -> option<def> {\n \n fn norm_a_constraint(id: def_id, c: constraint) -> [norm_constraint] {\n     let mut rslt: [norm_constraint] = [];\n-    let descs = *c.descs;\n-    for vec::each(descs) {|pd|\n+    for (*c.descs).each {|pd|\n         rslt +=\n             [{bit_num: pd.node.bit_num,\n               c: respan(pd.span, {path: c.path,\n@@ -498,11 +498,11 @@ fn constraints(fcx: fn_ctxt) -> [norm_constraint] {\n // FIXME\n // Would rather take an immutable vec as an argument,\n // should freeze it at some earlier point.\n-fn match_args(fcx: fn_ctxt, occs: @mut [pred_args],\n+fn match_args(fcx: fn_ctxt, occs: @dvec<pred_args>,\n               occ: [@constr_arg_use]) -> uint {\n     #debug(\"match_args: looking at %s\",\n            constr_args_to_str(fn@(i: inst) -> str { ret i.ident; }, occ));\n-    for vec::each(*occs) {|pd|\n+    for (*occs).each {|pd|\n         log(debug,\n                  \"match_args: candidate \" + pred_args_to_str(pd));\n         fn eq(p: inst, q: inst) -> bool { ret p.node == q.node; }\n@@ -613,7 +613,8 @@ fn substitute_arg(cx: ty::ctxt, actuals: [@expr], a: @constr_arg) ->\n     }\n }\n \n-fn pred_args_matches(pattern: [constr_arg_general_<inst>], desc: pred_args) ->\n+fn pred_args_matches(pattern: [constr_arg_general_<inst>],\n+                     desc: pred_args) ->\n    bool {\n     let mut i = 0u;\n     for desc.node.args.each {|c|\n@@ -638,7 +639,8 @@ fn pred_args_matches(pattern: [constr_arg_general_<inst>], desc: pred_args) ->\n     ret true;\n }\n \n-fn find_instance_(pattern: [constr_arg_general_<inst>], descs: [pred_args]) ->\n+fn find_instance_(pattern: [constr_arg_general_<inst>],\n+                  descs: [pred_args]) ->\n    option<uint> {\n     for descs.each {|d|\n         if pred_args_matches(pattern, d) { ret some(d.node.bit_num); }\n@@ -660,15 +662,19 @@ fn find_instances(_fcx: fn_ctxt, subst: subst,\n \n     if vec::len(subst) == 0u { ret []; }\n     let mut res = [];\n-    for (*c.descs).each { |d|\n-        if args_mention(d.node.args, find_in_subst_bool, subst) {\n-            let old_bit_num = d.node.bit_num;\n-            let newv = replace(subst, d);\n-            alt find_instance_(newv, *c.descs) {\n-              some(d1) {res += [{from: old_bit_num, to: d1}]}\n-              _ {}\n-            }\n-        } else {}\n+    (*c.descs).swap { |v|\n+        let v <- vec::from_mut(v);\n+        for v.each { |d|\n+            if args_mention(d.node.args, find_in_subst_bool, subst) {\n+                let old_bit_num = d.node.bit_num;\n+                let newv = replace(subst, d);\n+                alt find_instance_(newv, v) {\n+                  some(d1) {res += [{from: old_bit_num, to: d1}]}\n+                  _ {}\n+                }\n+            } else {}\n+        }\n+        vec::to_mut(v)\n     }\n     ret res;\n }\n@@ -897,12 +903,6 @@ fn args_mention<T>(args: [@constr_arg_use],\n \n fn use_var(fcx: fn_ctxt, v: node_id) { *fcx.enclosing.used_vars += [v]; }\n \n-// FIXME: This should be a function in vec::.\n-fn vec_contains(v: @mut [node_id], i: node_id) -> bool {\n-    for vec::each(*v) {|d| if d == i { ret true; } }\n-    ret false;\n-}\n-\n fn op_to_oper_ty(io: init_op) -> oper_type {\n     alt io { init_move { oper_move } _ { oper_assign } }\n }"}, {"sha": "0d3ab5321df3d6ba575dc966caf00d76ab7356bf", "filename": "src/rustc/middle/tstate/collect_locals.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e8dfe179da7ff0c679d6020fe658c8edd076a602/src%2Frustc%2Fmiddle%2Ftstate%2Fcollect_locals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8dfe179da7ff0c679d6020fe658c8edd076a602/src%2Frustc%2Fmiddle%2Ftstate%2Fcollect_locals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftstate%2Fcollect_locals.rs?ref=e8dfe179da7ff0c679d6020fe658c8edd076a602", "patch": "@@ -8,6 +8,7 @@ import syntax::ast_util::respan;\n import driver::session::session;\n import aux::*;\n import std::map::hashmap;\n+import dvec::{dvec, extensions};\n \n type ctxt = {cs: @mut [sp_constr], tcx: ty::ctxt};\n \n@@ -57,12 +58,11 @@ fn add_constraint(tcx: ty::ctxt, c: sp_constr, next: uint, tbl: constr_map) ->\n     let {path: p, def_id: d_id, args: args} = c.node;\n     alt tbl.find(d_id) {\n       some(ct) {\n-        let {path: _, descs: pds} = ct;\n-        *pds += [respan(c.span, {args: args, bit_num: next})];\n+        (*ct.descs).push(respan(c.span, {args: args, bit_num: next}));\n       }\n       none {\n-        let rslt: @mut [pred_args] =\n-            @mut [respan(c.span, {args: args, bit_num: next})];\n+        let rslt = @dvec();\n+        (*rslt).push(respan(c.span, {args: args, bit_num: next}));\n         tbl.insert(d_id, {path:p, descs:rslt});\n       }\n     }"}]}