{"sha": "7af56bb92199eabcfee52c43739761b18872a2c1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdhZjU2YmI5MjE5OWVhYmNmZWU1MmM0MzczOTc2MWIxODg3MmEyYzE=", "commit": {"author": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2013-07-23T04:41:46Z"}, "committer": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2013-07-23T23:56:22Z"}, "message": "std: move StrUtil::as_c_str into StrSlice", "tree": {"sha": "5a50c048e33bf6f655ac393facdb338d9650a619", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5a50c048e33bf6f655ac393facdb338d9650a619"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7af56bb92199eabcfee52c43739761b18872a2c1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7af56bb92199eabcfee52c43739761b18872a2c1", "html_url": "https://github.com/rust-lang/rust/commit/7af56bb92199eabcfee52c43739761b18872a2c1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7af56bb92199eabcfee52c43739761b18872a2c1/comments", "author": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9fdec67a6761ae43d8fae80e10b5a7a1e0ca7c0d", "url": "https://api.github.com/repos/rust-lang/rust/commits/9fdec67a6761ae43d8fae80e10b5a7a1e0ca7c0d", "html_url": "https://github.com/rust-lang/rust/commit/9fdec67a6761ae43d8fae80e10b5a7a1e0ca7c0d"}], "stats": {"total": 353, "additions": 157, "deletions": 196}, "files": [{"sha": "08e1c240a4c65378f8e486b44f31ef80b5390876", "filename": "src/libextra/rl.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7af56bb92199eabcfee52c43739761b18872a2c1/src%2Flibextra%2Frl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7af56bb92199eabcfee52c43739761b18872a2c1/src%2Flibextra%2Frl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Frl.rs?ref=7af56bb92199eabcfee52c43739761b18872a2c1", "patch": "@@ -32,7 +32,7 @@ pub mod rustrt {\n \n /// Add a line to history\n pub unsafe fn add_history(line: &str) -> bool {\n-    do str::as_c_str(line) |buf| {\n+    do line.as_c_str |buf| {\n         rustrt::linenoiseHistoryAdd(buf) == 1 as c_int\n     }\n }\n@@ -44,21 +44,21 @@ pub unsafe fn set_history_max_len(len: int) -> bool {\n \n /// Save line history to a file\n pub unsafe fn save_history(file: &str) -> bool {\n-    do str::as_c_str(file) |buf| {\n+    do file.as_c_str |buf| {\n         rustrt::linenoiseHistorySave(buf) == 1 as c_int\n     }\n }\n \n /// Load line history from a file\n pub unsafe fn load_history(file: &str) -> bool {\n-    do str::as_c_str(file) |buf| {\n+    do file.as_c_str |buf| {\n         rustrt::linenoiseHistoryLoad(buf) == 1 as c_int\n     }\n }\n \n /// Print out a prompt and then wait for input and return it\n pub unsafe fn read(prompt: &str) -> Option<~str> {\n-    do str::as_c_str(prompt) |buf| {\n+    do prompt.as_c_str |buf| {\n         let line = rustrt::linenoise(buf);\n \n         if line.is_null() { None }\n@@ -80,7 +80,7 @@ pub unsafe fn complete(cb: CompletionCb) {\n \n             unsafe {\n                 do cb(str::raw::from_c_str(line)) |suggestion| {\n-                    do str::as_c_str(suggestion) |buf| {\n+                    do suggestion.as_c_str |buf| {\n                         rustrt::linenoiseAddCompletion(completions, buf);\n                     }\n                 }"}, {"sha": "d932dc80d518742c847b5884217b6a2c23ddd4c7", "filename": "src/librustc/back/link.rs", "status": "modified", "additions": 17, "deletions": 15, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/7af56bb92199eabcfee52c43739761b18872a2c1/src%2Flibrustc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7af56bb92199eabcfee52c43739761b18872a2c1/src%2Flibrustc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Flink.rs?ref=7af56bb92199eabcfee52c43739761b18872a2c1", "patch": "@@ -76,9 +76,9 @@ pub fn WriteOutputFile(sess: Session,\n         OptLevel: c_int,\n         EnableSegmentedStacks: bool) {\n     unsafe {\n-        do str::as_c_str(Triple) |Triple| {\n-            do str::as_c_str(Feature) |Feature| {\n-                do str::as_c_str(Output) |Output| {\n+        do Triple.as_c_str |Triple| {\n+            do Feature.as_c_str |Feature| {\n+                do Output.as_c_str |Output| {\n                     let result = llvm::LLVMRustWriteOutputFile(\n                             PM,\n                             M,\n@@ -263,16 +263,16 @@ pub mod write {\n                   output_type_bitcode => {\n                     if opts.optimize != session::No {\n                         let filename = output.with_filetype(\"no-opt.bc\");\n-                        str::as_c_str(filename.to_str(), |buf| {\n-                            llvm::LLVMWriteBitcodeToFile(llmod, buf)\n-                        });\n+                        do filename.to_str().as_c_str |buf| {\n+                            llvm::LLVMWriteBitcodeToFile(llmod, buf);\n+                        }\n                     }\n                   }\n                   _ => {\n                     let filename = output.with_filetype(\"bc\");\n-                    str::as_c_str(filename.to_str(), |buf| {\n-                        llvm::LLVMWriteBitcodeToFile(llmod, buf)\n-                    });\n+                    do filename.to_str().as_c_str |buf| {\n+                        llvm::LLVMWriteBitcodeToFile(llmod, buf);\n+                    }\n                   }\n                 }\n             }\n@@ -333,9 +333,9 @@ pub mod write {\n                     // Always output the bitcode file with --save-temps\n \n                     let filename = output.with_filetype(\"opt.bc\");\n-                    str::as_c_str(filename.to_str(), |buf| {\n+                    do filename.to_str().as_c_str |buf| {\n                         llvm::LLVMWriteBitcodeToFile(llmod, buf)\n-                    });\n+                    };\n                     // Save the assembly file if -S is used\n                     if output_type == output_type_assembly {\n                         WriteOutputFile(\n@@ -391,13 +391,15 @@ pub mod write {\n \n             if output_type == output_type_llvm_assembly {\n                 // Given options \"-S --emit-llvm\": output LLVM assembly\n-                str::as_c_str(output.to_str(), |buf_o| {\n-                    llvm::LLVMRustAddPrintModulePass(pm.llpm, llmod, buf_o)});\n+                do output.to_str().as_c_str |buf_o| {\n+                    llvm::LLVMRustAddPrintModulePass(pm.llpm, llmod, buf_o);\n+                }\n             } else {\n                 // If only a bitcode file is asked for by using the\n                 // '--emit-llvm' flag, then output it here\n-                str::as_c_str(output.to_str(),\n-                            |buf| llvm::LLVMWriteBitcodeToFile(llmod, buf) );\n+                do output.to_str().as_c_str |buf| {\n+                    llvm::LLVMWriteBitcodeToFile(llmod, buf);\n+                }\n             }\n \n             llvm::LLVMDisposeModule(llmod);"}, {"sha": "4533aeebbcb37ef3927a0fd237acd8e523b406ea", "filename": "src/librustc/back/passes.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7af56bb92199eabcfee52c43739761b18872a2c1/src%2Flibrustc%2Fback%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7af56bb92199eabcfee52c43739761b18872a2c1/src%2Flibrustc%2Fback%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Fpasses.rs?ref=7af56bb92199eabcfee52c43739761b18872a2c1", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::str;\n use std::io;\n \n use driver::session::{OptLevel, No, Less, Aggressive};\n@@ -174,7 +173,7 @@ pub fn populate_pass_manager(sess: Session, pm: &mut PassManager, pass_list:&[~s\n }\n \n pub fn create_pass(name:&str) -> Option<PassRef> {\n-    do str::as_c_str(name) |s| {\n+    do name.as_c_str |s| {\n         unsafe {\n             let p = llvm::LLVMCreatePass(s);\n             if p.is_null() {"}, {"sha": "f3bca7a6ab373dd59a89d285a0cd1ee4bb5f5151", "filename": "src/librustc/lib/llvm.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7af56bb92199eabcfee52c43739761b18872a2c1/src%2Flibrustc%2Flib%2Fllvm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7af56bb92199eabcfee52c43739761b18872a2c1/src%2Flibrustc%2Flib%2Fllvm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib%2Fllvm.rs?ref=7af56bb92199eabcfee52c43739761b18872a2c1", "patch": "@@ -12,7 +12,6 @@\n use std::hashmap::HashMap;\n use std::libc::{c_uint, c_ushort};\n use std::option;\n-use std::str;\n \n use middle::trans::type_::Type;\n \n@@ -2287,10 +2286,9 @@ pub struct TargetData {\n }\n \n pub fn mk_target_data(string_rep: &str) -> TargetData {\n-    let lltd =\n-        str::as_c_str(string_rep, |buf| unsafe {\n-            llvm::LLVMCreateTargetData(buf)\n-        });\n+    let lltd = do string_rep.as_c_str |buf| {\n+        unsafe { llvm::LLVMCreateTargetData(buf) }\n+    };\n \n     TargetData {\n         lltd: lltd,"}, {"sha": "a0789b3e3232980ae841bf449cb3f48c558f4fae", "filename": "src/librustc/metadata/loader.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7af56bb92199eabcfee52c43739761b18872a2c1/src%2Flibrustc%2Fmetadata%2Floader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7af56bb92199eabcfee52c43739761b18872a2c1/src%2Flibrustc%2Fmetadata%2Floader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Floader.rs?ref=7af56bb92199eabcfee52c43739761b18872a2c1", "patch": "@@ -186,9 +186,9 @@ pub fn metadata_matches(extern_metas: &[@ast::MetaItem],\n fn get_metadata_section(os: os,\n                         filename: &Path) -> Option<@~[u8]> {\n     unsafe {\n-        let mb = str::as_c_str(filename.to_str(), |buf| {\n+        let mb = do filename.to_str().as_c_str |buf| {\n             llvm::LLVMRustCreateMemoryBufferWithContentsOfFile(buf)\n-        });\n+        };\n         if mb as int == 0 { return option::None::<@~[u8]>; }\n         let of = match mk_object_file(mb) {\n             option::Some(of) => of,"}, {"sha": "903f36c4f8a71e49dc622f061ec7fa2de37f9fe4", "filename": "src/librustc/middle/trans/asm.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7af56bb92199eabcfee52c43739761b18872a2c1/src%2Flibrustc%2Fmiddle%2Ftrans%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7af56bb92199eabcfee52c43739761b18872a2c1/src%2Flibrustc%2Fmiddle%2Ftrans%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fasm.rs?ref=7af56bb92199eabcfee52c43739761b18872a2c1", "patch": "@@ -21,7 +21,6 @@ use middle::ty;\n \n use middle::trans::type_::Type;\n \n-use std::str;\n use syntax::ast;\n \n // Take an inline assembly expression and splat it out via LLVM\n@@ -123,8 +122,8 @@ pub fn trans_inline_asm(bcx: block, ia: &ast::inline_asm) -> block {\n         ast::asm_intel => lib::llvm::AD_Intel\n     };\n \n-    let r = do str::as_c_str(ia.asm) |a| {\n-        do str::as_c_str(constraints) |c| {\n+    let r = do ia.asm.as_c_str |a| {\n+        do constraints.as_c_str |c| {\n             InlineAsmCall(bcx, a, c, inputs, output, ia.volatile, ia.alignstack, dialect)\n         }\n     };"}, {"sha": "9c3eeed5a344a0aedde62ab301a834f58c4623e8", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 25, "deletions": 24, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/7af56bb92199eabcfee52c43739761b18872a2c1/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7af56bb92199eabcfee52c43739761b18872a2c1/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=7af56bb92199eabcfee52c43739761b18872a2c1", "patch": "@@ -70,7 +70,6 @@ use std::hashmap::{HashMap, HashSet};\n use std::int;\n use std::io;\n use std::libc::c_uint;\n-use std::str;\n use std::uint;\n use std::vec;\n use std::local_data;\n@@ -549,11 +548,11 @@ pub fn get_res_dtor(ccx: @mut CrateContext,\n // Structural comparison: a rather involved form of glue.\n pub fn maybe_name_value(cx: &CrateContext, v: ValueRef, s: &str) {\n     if cx.sess.opts.save_temps {\n-        let _: () = str::as_c_str(s, |buf| {\n+        do s.as_c_str |buf| {\n             unsafe {\n                 llvm::LLVMSetValueName(v, buf)\n             }\n-        });\n+        }\n     }\n }\n \n@@ -1577,16 +1576,18 @@ pub struct BasicBlocks {\n pub fn mk_staticallocas_basic_block(llfn: ValueRef) -> BasicBlockRef {\n     unsafe {\n         let cx = task_llcx();\n-        str::as_c_str(\"static_allocas\",\n-                      |buf| llvm::LLVMAppendBasicBlockInContext(cx, llfn, buf))\n+        do \"static_allocas\".as_c_str | buf| {\n+            llvm::LLVMAppendBasicBlockInContext(cx, llfn, buf)\n+        }\n     }\n }\n \n pub fn mk_return_basic_block(llfn: ValueRef) -> BasicBlockRef {\n     unsafe {\n         let cx = task_llcx();\n-        str::as_c_str(\"return\",\n-                      |buf| llvm::LLVMAppendBasicBlockInContext(cx, llfn, buf))\n+        do \"return\".as_c_str |buf| {\n+            llvm::LLVMAppendBasicBlockInContext(cx, llfn, buf)\n+        }\n     }\n }\n \n@@ -2353,11 +2354,11 @@ pub fn create_entry_wrapper(ccx: @mut CrateContext,\n             };\n             decl_cdecl_fn(ccx.llmod, main_name, llfty)\n         };\n-        let llbb = str::as_c_str(\"top\", |buf| {\n+        let llbb = do \"top\".as_c_str |buf| {\n             unsafe {\n                 llvm::LLVMAppendBasicBlockInContext(ccx.llcx, llfn, buf)\n             }\n-        });\n+        };\n         let bld = ccx.builder.B;\n         unsafe {\n             llvm::LLVMPositionBuilderAtEnd(bld, llbb);\n@@ -2457,9 +2458,9 @@ pub fn get_item_val(ccx: @mut CrateContext, id: ast::node_id) -> ValueRef {\n                 exprt = m == ast::m_mutbl;\n                 unsafe {\n                     let llty = llvm::LLVMTypeOf(v);\n-                    let g = str::as_c_str(s, |buf| {\n+                    let g = do s.as_c_str |buf| {\n                         llvm::LLVMAddGlobal(ccx.llmod, llty, buf)\n-                    });\n+                    };\n                     ccx.item_symbols.insert(i.id, s);\n                     g\n                 }\n@@ -2509,7 +2510,7 @@ pub fn get_item_val(ccx: @mut CrateContext, id: ast::node_id) -> ValueRef {\n                 ast::foreign_item_static(*) => {\n                     let typ = ty::node_id_to_type(ccx.tcx, ni.id);\n                     let ident = token::ident_to_str(&ni.ident);\n-                    let g = do str::as_c_str(ident) |buf| {\n+                    let g = do ident.as_c_str |buf| {\n                         unsafe {\n                             let ty = type_of(ccx, typ);\n                             llvm::LLVMAddGlobal(ccx.llmod, ty.to_ref(), buf)\n@@ -2609,11 +2610,11 @@ pub fn trans_constant(ccx: &mut CrateContext, it: @ast::item) {\n             let s = mangle_exported_name(ccx, p, ty::mk_int()).to_managed();\n             let disr_val = vi[i].disr_val;\n             note_unique_llvm_symbol(ccx, s);\n-            let discrim_gvar = str::as_c_str(s, |buf| {\n+            let discrim_gvar = do s.as_c_str |buf| {\n                 unsafe {\n                     llvm::LLVMAddGlobal(ccx.llmod, ccx.int_type.to_ref(), buf)\n                 }\n-            });\n+            };\n             unsafe {\n                 llvm::LLVMSetInitializer(discrim_gvar, C_int(ccx, disr_val));\n                 llvm::LLVMSetGlobalConstant(discrim_gvar, True);\n@@ -2750,7 +2751,7 @@ pub fn decl_gc_metadata(ccx: &mut CrateContext, llmod_id: &str) {\n     }\n \n     let gc_metadata_name = ~\"_gc_module_metadata_\" + llmod_id;\n-    let gc_metadata = do str::as_c_str(gc_metadata_name) |buf| {\n+    let gc_metadata = do gc_metadata_name.as_c_str |buf| {\n         unsafe {\n             llvm::LLVMAddGlobal(ccx.llmod, Type::i32().to_ref(), buf)\n         }\n@@ -2813,11 +2814,11 @@ pub fn decl_crate_map(sess: session::Session, mapmeta: LinkMeta,\n     let sym_name = ~\"_rust_crate_map_\" + mapname;\n     let arrtype = Type::array(&int_type, n_subcrates as u64);\n     let maptype = Type::struct_([Type::i32(), Type::i8p(), int_type, arrtype], false);\n-    let map = str::as_c_str(sym_name, |buf| {\n+    let map = do sym_name.as_c_str |buf| {\n         unsafe {\n             llvm::LLVMAddGlobal(llmod, maptype.to_ref(), buf)\n         }\n-    });\n+    };\n     lib::llvm::SetLinkage(map, lib::llvm::ExternalLinkage);\n     return map;\n }\n@@ -2832,11 +2833,11 @@ pub fn fill_crate_map(ccx: @mut CrateContext, map: ValueRef) {\n                       cdata.name,\n                       cstore::get_crate_vers(cstore, i),\n                       cstore::get_crate_hash(cstore, i));\n-        let cr = str::as_c_str(nm, |buf| {\n+        let cr = do nm.as_c_str |buf| {\n             unsafe {\n                 llvm::LLVMAddGlobal(ccx.llmod, ccx.int_type.to_ref(), buf)\n             }\n-        });\n+        };\n         subcrates.push(p2i(ccx, cr));\n         i += 1;\n     }\n@@ -2895,16 +2896,16 @@ pub fn write_metadata(cx: &mut CrateContext, crate: &ast::Crate) {\n     let encode_parms = crate_ctxt_to_encode_parms(cx, encode_inlined_item);\n     let llmeta = C_bytes(encoder::encode_metadata(encode_parms, crate));\n     let llconst = C_struct([llmeta]);\n-    let mut llglobal = str::as_c_str(\"rust_metadata\", |buf| {\n+    let mut llglobal = do \"rust_metadata\".as_c_str |buf| {\n         unsafe {\n             llvm::LLVMAddGlobal(cx.llmod, val_ty(llconst).to_ref(), buf)\n         }\n-    });\n+    };\n     unsafe {\n         llvm::LLVMSetInitializer(llglobal, llconst);\n-        str::as_c_str(cx.sess.targ_cfg.target_strs.meta_sect_name, |buf| {\n+        do cx.sess.targ_cfg.target_strs.meta_sect_name.as_c_str |buf| {\n             llvm::LLVMSetSection(llglobal, buf)\n-        });\n+        };\n         lib::llvm::SetLinkage(llglobal, lib::llvm::InternalLinkage);\n \n         let t_ptr_i8 = Type::i8p();\n@@ -2923,7 +2924,7 @@ fn mk_global(ccx: &CrateContext,\n              internal: bool)\n           -> ValueRef {\n     unsafe {\n-        let llglobal = do str::as_c_str(name) |buf| {\n+        let llglobal = do name.as_c_str |buf| {\n             llvm::LLVMAddGlobal(ccx.llmod, val_ty(llval).to_ref(), buf)\n         };\n         llvm::LLVMSetInitializer(llglobal, llval);"}, {"sha": "1c9161163cc5b71eda17ea3f9bbec3a7bffb6b8a", "filename": "src/librustc/middle/trans/builder.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/7af56bb92199eabcfee52c43739761b18872a2c1/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7af56bb92199eabcfee52c43739761b18872a2c1/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbuilder.rs?ref=7af56bb92199eabcfee52c43739761b18872a2c1", "patch": "@@ -20,7 +20,6 @@ use middle::trans::type_::Type;\n use std::cast;\n use std::hashmap::HashMap;\n use std::libc::{c_uint, c_ulonglong, c_char};\n-use std::str;\n use std::vec;\n use syntax::codemap::span;\n \n@@ -424,9 +423,9 @@ impl Builder {\n             if name.is_empty() {\n                 llvm::LLVMBuildAlloca(self.llbuilder, ty.to_ref(), noname())\n             } else {\n-                str::as_c_str(\n-                    name,\n-                    |c| llvm::LLVMBuildAlloca(self.llbuilder, ty.to_ref(), c))\n+                do name.as_c_str |c| {\n+                    llvm::LLVMBuildAlloca(self.llbuilder, ty.to_ref(), c)\n+                }\n             }\n         }\n     }\n@@ -896,9 +895,9 @@ impl Builder {\n             let BB: BasicBlockRef = llvm::LLVMGetInsertBlock(self.llbuilder);\n             let FN: ValueRef = llvm::LLVMGetBasicBlockParent(BB);\n             let M: ModuleRef = llvm::LLVMGetGlobalParent(FN);\n-            let T: ValueRef = str::as_c_str(\"llvm.trap\", |buf| {\n+            let T: ValueRef = do \"llvm.trap\".as_c_str |buf| {\n                 llvm::LLVMGetNamedFunction(M, buf)\n-            });\n+            };\n             assert!((T as int != 0));\n             let args: &[ValueRef] = [];\n             self.count_insn(\"trap\");"}, {"sha": "15793ea747f3fd5d8ebdf7f512f554b9e363b9eb", "filename": "src/librustc/middle/trans/consts.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7af56bb92199eabcfee52c43739761b18872a2c1/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7af56bb92199eabcfee52c43739761b18872a2c1/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs?ref=7af56bb92199eabcfee52c43739761b18872a2c1", "patch": "@@ -31,7 +31,6 @@ use util::ppaux::{Repr, ty_to_str};\n use middle::trans::type_::Type;\n \n use std::libc::c_uint;\n-use std::str;\n use syntax::{ast, ast_util, ast_map};\n \n pub fn const_lit(cx: &mut CrateContext, e: &ast::expr, lit: ast::lit)\n@@ -513,7 +512,7 @@ fn const_expr_unadjusted(cx: @mut CrateContext, e: &ast::expr) -> ValueRef {\n               ast::expr_vec(ref es, ast::m_imm) => {\n                 let (cv, sz, llunitty) = const_vec(cx, e, *es);\n                 let llty = val_ty(cv);\n-                let gv = do str::as_c_str(\"const\") |name| {\n+                let gv = do \"const\".as_c_str |name| {\n                     llvm::LLVMAddGlobal(cx.llmod, llty.to_ref(), name)\n                 };\n                 llvm::LLVMSetInitializer(gv, cv);"}, {"sha": "78544c1c6c4fc1c6c9d2f986d8ad512cd7f163ad", "filename": "src/librustc/middle/trans/context.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/7af56bb92199eabcfee52c43739761b18872a2c1/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7af56bb92199eabcfee52c43739761b18872a2c1/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontext.rs?ref=7af56bb92199eabcfee52c43739761b18872a2c1", "patch": "@@ -28,7 +28,6 @@ use middle::trans::type_::Type;\n \n use std::hash;\n use std::hashmap::{HashMap, HashSet};\n-use std::str;\n use std::local_data;\n use syntax::ast;\n \n@@ -125,13 +124,11 @@ impl CrateContext {\n         unsafe {\n             let llcx = llvm::LLVMContextCreate();\n             set_task_llcx(llcx);\n-            let llmod = str::as_c_str(name, |buf| {\n-                llvm::LLVMModuleCreateWithNameInContext(buf, llcx)\n-            });\n+            let llmod = name.as_c_str(|buf| llvm::LLVMModuleCreateWithNameInContext(buf, llcx));\n             let data_layout: &str = sess.targ_cfg.target_strs.data_layout;\n             let targ_triple: &str = sess.targ_cfg.target_strs.target_triple;\n-            str::as_c_str(data_layout, |buf| llvm::LLVMSetDataLayout(llmod, buf));\n-            str::as_c_str(targ_triple, |buf| llvm::LLVMSetTarget(llmod, buf));\n+            data_layout.as_c_str(|buf| llvm::LLVMSetDataLayout(llmod, buf));\n+            targ_triple.as_c_str(|buf| llvm::LLVMSetTarget(llmod, buf));\n             let targ_cfg = sess.targ_cfg;\n \n             let td = mk_target_data(sess.targ_cfg.target_strs.data_layout);"}, {"sha": "1c967131b0ac778d4d09d519570bfb761598d32c", "filename": "src/librustc/middle/trans/controlflow.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7af56bb92199eabcfee52c43739761b18872a2c1/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontrolflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7af56bb92199eabcfee52c43739761b18872a2c1/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontrolflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontrolflow.rs?ref=7af56bb92199eabcfee52c43739761b18872a2c1", "patch": "@@ -27,7 +27,6 @@ use util::ppaux;\n \n use middle::trans::type_::Type;\n \n-use std::str;\n use syntax::ast;\n use syntax::ast::ident;\n use syntax::ast_map::path_mod;\n@@ -251,9 +250,9 @@ pub fn trans_log(log_ex: &ast::expr,\n             ccx, modpath, \"loglevel\");\n         let global;\n         unsafe {\n-            global = str::as_c_str(s, |buf| {\n+            global = do s.as_c_str |buf| {\n                 llvm::LLVMAddGlobal(ccx.llmod, Type::i32().to_ref(), buf)\n-            });\n+            };\n             llvm::LLVMSetGlobalConstant(global, False);\n             llvm::LLVMSetInitializer(global, C_null(Type::i32()));\n             lib::llvm::SetLinkage(global, lib::llvm::InternalLinkage);"}, {"sha": "4249e47d1478521a9338ab24083ba4db0019f3ac", "filename": "src/librustc/middle/trans/debuginfo.rs", "status": "modified", "additions": 14, "deletions": 15, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/7af56bb92199eabcfee52c43739761b18872a2c1/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7af56bb92199eabcfee52c43739761b18872a2c1/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs?ref=7af56bb92199eabcfee52c43739761b18872a2c1", "patch": "@@ -65,7 +65,6 @@ use util::ppaux::ty_to_str;\n use std::hashmap::HashMap;\n use std::libc::{c_uint, c_ulonglong, c_longlong};\n use std::ptr;\n-use std::str::as_c_str;\n use std::vec;\n use syntax::codemap::span;\n use syntax::{ast, codemap, ast_util, ast_map};\n@@ -159,7 +158,7 @@ pub fn create_local_var_metadata(bcx: block, local: @ast::Local) -> DIVariable {\n         Some(_) => lexical_block_metadata(bcx)\n     };\n \n-    let var_metadata = do as_c_str(name) |name| {\n+    let var_metadata = do name.as_c_str |name| {\n         unsafe {\n             llvm::LLVMDIBuilderCreateLocalVariable(\n                 DIB(cx),\n@@ -225,7 +224,7 @@ pub fn create_argument_metadata(bcx: block, arg: &ast::arg, span: span) -> Optio\n             // XXX: This is wrong; it should work for multiple bindings.\n             let ident = path.idents.last();\n             let name: &str = cx.sess.str_of(*ident);\n-            let var_metadata = do as_c_str(name) |name| {\n+            let var_metadata = do name.as_c_str |name| {\n                 unsafe {\n                     llvm::LLVMDIBuilderCreateLocalVariable(\n                         DIB(cx),\n@@ -354,8 +353,8 @@ pub fn create_function_metadata(fcx: fn_ctxt) -> DISubprogram {\n     };\n \n     let fn_metadata =\n-        do as_c_str(cx.sess.str_of(ident)) |name| {\n-        do as_c_str(cx.sess.str_of(ident)) |linkage| {\n+        do cx.sess.str_of(ident).as_c_str |name| {\n+        do cx.sess.str_of(ident).as_c_str |linkage| {\n             unsafe {\n                 llvm::LLVMDIBuilderCreateFunction(\n                     DIB(cx),\n@@ -402,11 +401,11 @@ fn compile_unit_metadata(cx: @mut CrateContext) {\n     let work_dir = cx.sess.working_dir.to_str();\n     let producer = fmt!(\"rustc version %s\", env!(\"CFG_VERSION\"));\n \n-    do as_c_str(crate_name) |crate_name| {\n-    do as_c_str(work_dir) |work_dir| {\n-    do as_c_str(producer) |producer| {\n-    do as_c_str(\"\") |flags| {\n-    do as_c_str(\"\") |split_name| {\n+    do crate_name.as_c_str |crate_name| {\n+    do work_dir.as_c_str |work_dir| {\n+    do producer.as_c_str |producer| {\n+    do \"\".as_c_str |flags| {\n+    do \"\".as_c_str |split_name| {\n         unsafe {\n             llvm::LLVMDIBuilderCreateCompileUnit(dcx.builder,\n                 DW_LANG_RUST as c_uint, crate_name, work_dir, producer,\n@@ -433,8 +432,8 @@ fn file_metadata(cx: &mut CrateContext, full_path: &str) -> DIFile {\n         };\n \n     let file_metadata =\n-        do as_c_str(file_name) |file_name| {\n-        do as_c_str(work_dir) |work_dir| {\n+        do file_name.as_c_str |file_name| {\n+        do work_dir.as_c_str |work_dir| {\n             unsafe {\n                 llvm::LLVMDIBuilderCreateFile(DIB(cx), file_name, work_dir)\n             }\n@@ -522,7 +521,7 @@ fn basic_type_metadata(cx: &mut CrateContext, t: ty::t) -> DIType {\n \n     let llvm_type = type_of::type_of(cx, t);\n     let (size, align) = size_and_align_of(cx, llvm_type);\n-    let ty_metadata = do as_c_str(name) |name| {\n+    let ty_metadata = do name.as_c_str |name| {\n         unsafe {\n             llvm::LLVMDIBuilderCreateBasicType(\n                 DIB(cx),\n@@ -543,7 +542,7 @@ fn pointer_type_metadata(cx: &mut CrateContext,\n     let pointer_llvm_type = type_of::type_of(cx, pointer_type);\n     let (pointer_size, pointer_align) = size_and_align_of(cx, pointer_llvm_type);\n     let name = ty_to_str(cx.tcx, pointer_type);\n-    let ptr_metadata = do as_c_str(name) |name| {\n+    let ptr_metadata = do name.as_c_str |name| {\n         unsafe {\n             llvm::LLVMDIBuilderCreatePointerType(\n                 DIB(cx),\n@@ -1038,7 +1037,7 @@ fn unimplemented_type_metadata(cx: &mut CrateContext, t: ty::t) -> DIType {\n     debug!(\"unimplemented_type_metadata: %?\", ty::get(t));\n \n     let name = ty_to_str(cx.tcx, t);\n-    let metadata = do as_c_str(fmt!(\"NYI<%s>\", name)) |name| {\n+    let metadata = do fmt!(\"NYI<%s>\", name).as_c_str |name| {\n         unsafe {\n             llvm::LLVMDIBuilderCreateBasicType(\n                 DIB(cx),"}, {"sha": "d66b43167cec110d194b587c50625fd2e51c01e8", "filename": "src/librustc/middle/trans/glue.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7af56bb92199eabcfee52c43739761b18872a2c1/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7af56bb92199eabcfee52c43739761b18872a2c1/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs?ref=7af56bb92199eabcfee52c43739761b18872a2c1", "patch": "@@ -39,7 +39,6 @@ use middle::trans::type_::Type;\n \n use std::io;\n use std::libc::c_uint;\n-use std::str;\n use syntax::ast;\n \n pub fn trans_free(cx: block, v: ValueRef) -> block {\n@@ -658,11 +657,11 @@ pub fn declare_tydesc(ccx: &mut CrateContext, t: ty::t) -> @mut tydesc_info {\n     let name = mangle_internal_name_by_type_and_seq(ccx, t, \"tydesc\").to_managed();\n     note_unique_llvm_symbol(ccx, name);\n     debug!(\"+++ declare_tydesc %s %s\", ppaux::ty_to_str(ccx.tcx, t), name);\n-    let gvar = str::as_c_str(name, |buf| {\n+    let gvar = do name.as_c_str |buf| {\n         unsafe {\n             llvm::LLVMAddGlobal(ccx.llmod, ccx.tydesc_type.to_ref(), buf)\n         }\n-    });\n+    };\n     let inf = @mut tydesc_info {\n         ty: t,\n         tydesc: gvar,"}, {"sha": "dddf494856e9a01f2eeb3fe02c0b69f903354d59", "filename": "src/librustpkg/util.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7af56bb92199eabcfee52c43739761b18872a2c1/src%2Flibrustpkg%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7af56bb92199eabcfee52c43739761b18872a2c1/src%2Flibrustpkg%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Futil.rs?ref=7af56bb92199eabcfee52c43739761b18872a2c1", "patch": "@@ -382,8 +382,8 @@ pub fn link_exe(_src: &Path, _dest: &Path) -> bool {\n pub fn link_exe(src: &Path, dest: &Path) -> bool {\n     use std::{libc, str};\n     unsafe {\n-        do str::as_c_str(src.to_str()) |src_buf| {\n-            do str::as_c_str(dest.to_str()) |dest_buf| {\n+        do src.to_str().as_c_str |src_buf| {\n+            do dest.to_str().as_c_str |dest_buf| {\n                 libc::link(src_buf, dest_buf) == 0 as libc::c_int &&\n                     libc::chmod(dest_buf, 755) == 0 as libc::c_int\n             }"}, {"sha": "fed4eb26dbed1636927f22ce191596829e059ae9", "filename": "src/libstd/io.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7af56bb92199eabcfee52c43739761b18872a2c1/src%2Flibstd%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7af56bb92199eabcfee52c43739761b18872a2c1/src%2Flibstd%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio.rs?ref=7af56bb92199eabcfee52c43739761b18872a2c1", "patch": "@@ -63,7 +63,7 @@ use iterator::IteratorUtil;\n use ptr;\n use result;\n use str;\n-use str::{StrSlice, OwnedStr, StrUtil};\n+use str::{StrSlice, OwnedStr};\n use to_str::ToStr;\n use uint;\n use vec;"}, {"sha": "8c118d0be763f76b72f9f22fd2d030d201361af3", "filename": "src/libstd/os.rs", "status": "modified", "additions": 11, "deletions": 12, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/7af56bb92199eabcfee52c43739761b18872a2c1/src%2Flibstd%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7af56bb92199eabcfee52c43739761b18872a2c1/src%2Flibstd%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos.rs?ref=7af56bb92199eabcfee52c43739761b18872a2c1", "patch": "@@ -243,12 +243,11 @@ pub fn env() -> ~[(~str,~str)] {\n pub fn getenv(n: &str) -> Option<~str> {\n     unsafe {\n         do with_env_lock {\n-            let s = str::as_c_str(n, |s| libc::getenv(s));\n+            let s = n.as_c_str(|s| libc::getenv(s as *libc::c_char));\n             if ptr::null::<u8>() == cast::transmute(s) {\n-                None::<~str>\n+                None\n             } else {\n-                let s = cast::transmute(s);\n-                Some::<~str>(str::raw::from_buf(s))\n+                Some(str::raw::from_buf(cast::transmute(s)))\n             }\n         }\n     }\n@@ -277,8 +276,8 @@ pub fn getenv(n: &str) -> Option<~str> {\n pub fn setenv(n: &str, v: &str) {\n     unsafe {\n         do with_env_lock {\n-            do str::as_c_str(n) |nbuf| {\n-                do str::as_c_str(v) |vbuf| {\n+            do n.to_str().as_c_str |nbuf| {\n+                do v.to_str().as_c_str |vbuf| {\n                     libc::funcs::posix01::unistd::setenv(nbuf, vbuf, 1);\n                 }\n             }\n@@ -309,7 +308,7 @@ pub fn unsetenv(n: &str) {\n     fn _unsetenv(n: &str) {\n         unsafe {\n             do with_env_lock {\n-                do str::as_c_str(n) |nbuf| {\n+                do n.to_str().as_c_str |nbuf| {\n                     libc::funcs::posix01::unistd::unsetenv(nbuf);\n                 }\n             }\n@@ -465,7 +464,7 @@ pub fn self_exe_path() -> Option<Path> {\n             use libc::funcs::posix01::unistd::readlink;\n \n             let mut path_str = str::with_capacity(TMPBUF_SZ);\n-            let len = do str::as_c_str(path_str) |buf| {\n+            let len = do path_str.as_c_str |buf| {\n                 let buf = buf as *mut c_char;\n                 do \"/proc/self/exe\".as_c_str |proc_self_buf| {\n                     readlink(proc_self_buf, buf, TMPBUF_SZ as size_t)\n@@ -598,7 +597,7 @@ pub fn walk_dir(p: &Path, f: &fn(&Path) -> bool) -> bool {\n /// Indicates whether a path represents a directory\n pub fn path_is_dir(p: &Path) -> bool {\n     unsafe {\n-        do str::as_c_str(p.to_str()) |buf| {\n+        do p.to_str().as_c_str |buf| {\n             rustrt::rust_path_is_dir(buf) != 0 as c_int\n         }\n     }\n@@ -607,7 +606,7 @@ pub fn path_is_dir(p: &Path) -> bool {\n /// Indicates whether a path exists\n pub fn path_exists(p: &Path) -> bool {\n     unsafe {\n-        do str::as_c_str(p.to_str()) |buf| {\n+        do p.to_str().as_c_str |buf| {\n             rustrt::rust_path_exists(buf) != 0 as c_int\n         }\n     }\n@@ -924,7 +923,7 @@ pub fn copy_file(from: &Path, to: &Path) -> bool {\n             fclose(ostream);\n \n             // Give the new file the old file's permissions\n-            if do str::as_c_str(to.to_str()) |to_buf| {\n+            if do to.to_str().as_c_str |to_buf| {\n                 libc::chmod(to_buf, from_mode as libc::mode_t)\n             } != 0 {\n                 return false; // should be a condition...\n@@ -1290,7 +1289,7 @@ pub fn glob(pattern: &str) -> ~[Path] {\n     }\n \n     let mut g = default_glob_t();\n-    do str::as_c_str(pattern) |c_pattern| {\n+    do pattern.as_c_str |c_pattern| {\n         unsafe { libc::glob(c_pattern, 0, ptr::null(), &mut g) }\n     };\n     do(|| {"}, {"sha": "ef7a055b0e790652b0a61b59d5352564813fe743", "filename": "src/libstd/path.rs", "status": "modified", "additions": 15, "deletions": 22, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/7af56bb92199eabcfee52c43739761b18872a2c1/src%2Flibstd%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7af56bb92199eabcfee52c43739761b18872a2c1/src%2Flibstd%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath.rs?ref=7af56bb92199eabcfee52c43739761b18872a2c1", "patch": "@@ -23,7 +23,6 @@ use iterator::IteratorUtil;\n use libc;\n use option::{None, Option, Some};\n use str::{OwnedStr, Str, StrSlice, StrVector};\n-use str;\n use to_str::ToStr;\n use ascii::{AsciiCast, AsciiStr};\n use vec::{OwnedVector, ImmutableVector};\n@@ -342,13 +341,11 @@ mod stat {\n #[cfg(target_os = \"win32\")]\n impl WindowsPath {\n     pub fn stat(&self) -> Option<libc::stat> {\n-        unsafe {\n-             do str::as_c_str(self.to_str()) |buf| {\n-                let mut st = stat::arch::default_stat();\n-                match libc::stat(buf, &mut st) {\n-                    0 => Some(st),\n-                    _ => None,\n-                }\n+        do self.to_str().as_c_str |buf| {\n+            let mut st = stat::arch::default_stat();\n+            match unsafe { libc::stat(buf, &mut st) } {\n+                0 => Some(st),\n+                _ => None,\n             }\n         }\n     }\n@@ -378,13 +375,11 @@ impl WindowsPath {\n #[cfg(not(target_os = \"win32\"))]\n impl PosixPath {\n     pub fn stat(&self) -> Option<libc::stat> {\n-        unsafe {\n-             do str::as_c_str(self.to_str()) |buf| {\n-                let mut st = stat::arch::default_stat();\n-                match libc::stat(buf, &mut st) {\n-                    0 => Some(st),\n-                    _ => None,\n-                }\n+        do self.to_str().as_c_str |buf| {\n+            let mut st = stat::arch::default_stat();\n+            match unsafe { libc::stat(buf as *libc::c_char, &mut st) } {\n+                0 => Some(st),\n+                _ => None,\n             }\n         }\n     }\n@@ -458,13 +453,11 @@ impl PosixPath {\n #[cfg(unix)]\n impl PosixPath {\n     pub fn lstat(&self) -> Option<libc::stat> {\n-        unsafe {\n-            do str::as_c_str(self.to_str()) |buf| {\n-                let mut st = stat::arch::default_stat();\n-                match libc::lstat(buf, &mut st) {\n-                    0 => Some(st),\n-                    _ => None,\n-                }\n+        do self.to_str().as_c_str |buf| {\n+            let mut st = stat::arch::default_stat();\n+            match unsafe { libc::lstat(buf, &mut st) } {\n+                0 => Some(st),\n+                _ => None,\n             }\n         }\n     }"}, {"sha": "0d9446bcfca7d476d669bab39fea7fb3b4bd731e", "filename": "src/libstd/prelude.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7af56bb92199eabcfee52c43739761b18872a2c1/src%2Flibstd%2Fprelude.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7af56bb92199eabcfee52c43739761b18872a2c1/src%2Flibstd%2Fprelude.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprelude.rs?ref=7af56bb92199eabcfee52c43739761b18872a2c1", "patch": "@@ -62,7 +62,7 @@ pub use path::PosixPath;\n pub use path::WindowsPath;\n pub use ptr::RawPtr;\n pub use ascii::{Ascii, AsciiCast, OwnedAsciiCast, AsciiStr, ToBytesConsume};\n-pub use str::{Str, StrVector, StrSlice, OwnedStr, StrUtil, NullTerminatedStr};\n+pub use str::{Str, StrVector, StrSlice, OwnedStr, NullTerminatedStr};\n pub use from_str::{FromStr};\n pub use to_bytes::IterBytes;\n pub use to_str::{ToStr, ToStrConsume};"}, {"sha": "29564bd9728d7b8ee2641c444848824ffb50f33a", "filename": "src/libstd/ptr.rs", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/7af56bb92199eabcfee52c43739761b18872a2c1/src%2Flibstd%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7af56bb92199eabcfee52c43739761b18872a2c1/src%2Flibstd%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fptr.rs?ref=7af56bb92199eabcfee52c43739761b18872a2c1", "patch": "@@ -461,17 +461,13 @@ pub mod ptr_tests {\n \n     #[test]\n     fn test_position() {\n-        use str::as_c_str;\n         use libc::c_char;\n \n         let s = ~\"hello\";\n         unsafe {\n-            assert!(2u == as_c_str(s, |p| position(p,\n-                                                   |c| *c == 'l' as c_char)));\n-            assert!(4u == as_c_str(s, |p| position(p,\n-                                                   |c| *c == 'o' as c_char)));\n-            assert!(5u == as_c_str(s, |p| position(p,\n-                                                   |c| *c == 0 as c_char)));\n+            assert!(2u == s.as_c_str(|p| position(p, |c| *c == 'l' as c_char)));\n+            assert!(4u == s.as_c_str(|p| position(p, |c| *c == 'o' as c_char)));\n+            assert!(5u == s.as_c_str(|p| position(p, |c| *c == 0 as c_char)));\n         }\n     }\n \n@@ -480,9 +476,9 @@ pub mod ptr_tests {\n         let s0 = ~\"hello\";\n         let s1 = ~\"there\";\n         let s2 = ~\"thing\";\n-        do str::as_c_str(s0) |p0| {\n-            do str::as_c_str(s1) |p1| {\n-                do str::as_c_str(s2) |p2| {\n+        do s0.as_c_str |p0| {\n+            do s1.as_c_str |p1| {\n+                do s2.as_c_str |p2| {\n                     let v = ~[p0, p1, p2, null()];\n                     do v.as_imm_buf |vp, len| {\n                         assert_eq!(unsafe { buf_len(vp) }, 3u);"}, {"sha": "11d11daebc254be912a0b2a25048db789b12874a", "filename": "src/libstd/rt/logging.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7af56bb92199eabcfee52c43739761b18872a2c1/src%2Flibstd%2Frt%2Flogging.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7af56bb92199eabcfee52c43739761b18872a2c1/src%2Flibstd%2Frt%2Flogging.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Flogging.rs?ref=7af56bb92199eabcfee52c43739761b18872a2c1", "patch": "@@ -46,17 +46,15 @@ impl Logger for StdErrLogger {\n /// per-module global logging flags based on the logging spec\n pub fn init(crate_map: *u8) {\n     use os;\n-    use str;\n+    use str::StrSlice;\n     use ptr;\n     use option::{Some, None};\n \n     let log_spec = os::getenv(\"RUST_LOG\");\n     match log_spec {\n         Some(spec) => {\n-            do str::as_c_str(spec) |s| {\n-                unsafe {\n-                    rust_update_log_settings(crate_map, s);\n-                }\n+            do spec.as_c_str |buf| {\n+                unsafe { rust_update_log_settings(crate_map, buf) }\n             }\n         }\n         None => {"}, {"sha": "1f27a5776842abb08fd096c5ea42ca78770fe8f6", "filename": "src/libstd/rt/uv/uvll.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7af56bb92199eabcfee52c43739761b18872a2c1/src%2Flibstd%2Frt%2Fuv%2Fuvll.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7af56bb92199eabcfee52c43739761b18872a2c1/src%2Flibstd%2Frt%2Fuv%2Fuvll.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fuv%2Fuvll.rs?ref=7af56bb92199eabcfee52c43739761b18872a2c1", "patch": "@@ -382,12 +382,12 @@ pub unsafe fn as_sockaddr_in6(addr: *sockaddr) -> *sockaddr_in6 {\n }\n \n pub unsafe fn malloc_ip4_addr(ip: &str, port: int) -> *sockaddr_in {\n-    do str::as_c_str(ip) |ip_buf| {\n+    do ip.as_c_str |ip_buf| {\n         rust_uv_ip4_addrp(ip_buf as *u8, port as libc::c_int)\n     }\n }\n pub unsafe fn malloc_ip6_addr(ip: &str, port: int) -> *sockaddr_in6 {\n-    do str::as_c_str(ip) |ip_buf| {\n+    do ip.as_c_str |ip_buf| {\n         rust_uv_ip6_addrp(ip_buf as *u8, port as libc::c_int)\n     }\n }"}, {"sha": "d8fc68d64225019f7117419761272a3ac83d7d09", "filename": "src/libstd/run.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7af56bb92199eabcfee52c43739761b18872a2c1/src%2Flibstd%2Frun.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7af56bb92199eabcfee52c43739761b18872a2c1/src%2Flibstd%2Frun.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frun.rs?ref=7af56bb92199eabcfee52c43739761b18872a2c1", "patch": "@@ -507,7 +507,7 @@ fn spawn_process_os(prog: &str, args: &[~str],\n \n         do with_envp(env) |envp| {\n             do with_dirp(dir) |dirp| {\n-                do str::as_c_str(cmd) |cmdp| {\n+                do cmd.as_c_str |cmdp| {\n                     let created = CreateProcessA(ptr::null(), cast::transmute(cmdp),\n                                                  ptr::mut_null(), ptr::mut_null(), TRUE,\n                                                  0, envp, dirp, &mut si, &mut pi);\n@@ -696,12 +696,12 @@ fn spawn_process_os(prog: &str, args: &[~str],\n #[cfg(unix)]\n fn with_argv<T>(prog: &str, args: &[~str],\n                 cb: &fn(**libc::c_char) -> T) -> T {\n-    let mut argptrs = ~[str::as_c_str(prog, |b| b)];\n+    let mut argptrs = ~[prog.as_c_str(|b| b)];\n     let mut tmps = ~[];\n     for args.iter().advance |arg| {\n         let t = @(*arg).clone();\n         tmps.push(t);\n-        argptrs.push(str::as_c_str(*t, |b| b));\n+        argptrs.push(t.as_c_str(|b| b));\n     }\n     argptrs.push(ptr::null());\n     argptrs.as_imm_buf(|buf, _len| cb(buf))\n@@ -723,7 +723,7 @@ fn with_envp<T>(env: Option<&[(~str, ~str)]>, cb: &fn(*c_void) -> T) -> T {\n                 &(ref k, ref v) => {\n                     let kv = @fmt!(\"%s=%s\", *k, *v);\n                     tmps.push(kv);\n-                    ptrs.push(str::as_c_str(*kv, |b| b));\n+                    ptrs.push(kv.as_c_str(|b| b));\n                 }\n             }\n         }\n@@ -761,7 +761,7 @@ fn with_envp<T>(env: Option<&[(~str, ~str)]>, cb: &fn(*mut c_void) -> T) -> T {\n fn with_dirp<T>(d: Option<&Path>,\n                 cb: &fn(*libc::c_char) -> T) -> T {\n     match d {\n-      Some(dir) => str::as_c_str(dir.to_str(), cb),\n+      Some(dir) => dir.to_str().as_c_str(cb),\n       None => cb(ptr::null())\n     }\n }"}, {"sha": "ab3d362ba792a5d7f5cc79da6bec5dfc7c51e599", "filename": "src/libstd/str.rs", "status": "modified", "additions": 29, "deletions": 45, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/7af56bb92199eabcfee52c43739761b18872a2c1/src%2Flibstd%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7af56bb92199eabcfee52c43739761b18872a2c1/src%2Flibstd%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fstr.rs?ref=7af56bb92199eabcfee52c43739761b18872a2c1", "patch": "@@ -773,51 +773,6 @@ static TAG_THREE_B: uint = 224u;\n static MAX_THREE_B: uint = 65536u;\n static TAG_FOUR_B: uint = 240u;\n \n-/**\n- * A dummy trait to hold all the utility methods that we implement on strings.\n- */\n-pub trait StrUtil {\n-    /**\n-     * Work with the byte buffer of a string as a null-terminated C string.\n-     *\n-     * Allows for unsafe manipulation of strings, which is useful for foreign\n-     * interop. This is similar to `str::as_buf`, but guarantees null-termination.\n-     * If the given slice is not already null-terminated, this function will\n-     * allocate a temporary, copy the slice, null terminate it, and pass\n-     * that instead.\n-     *\n-     * # Example\n-     *\n-     * ~~~ {.rust}\n-     * let s = \"PATH\".as_c_str(|path| libc::getenv(path));\n-     * ~~~\n-     */\n-    fn as_c_str<T>(self, f: &fn(*libc::c_char) -> T) -> T;\n-}\n-\n-impl<'self> StrUtil for &'self str {\n-    #[inline]\n-    fn as_c_str<T>(self, f: &fn(*libc::c_char) -> T) -> T {\n-        do self.as_buf |buf, len| {\n-            // NB: len includes the trailing null.\n-            assert!(len > 0);\n-            if unsafe { *(ptr::offset(buf,len-1)) != 0 } {\n-                to_owned(self).as_c_str(|s| f(s))\n-            } else {\n-                f(buf as *libc::c_char)\n-            }\n-        }\n-    }\n-}\n-\n-/**\n- * Deprecated. Use the `as_c_str` method on strings instead.\n- */\n-#[inline]\n-pub fn as_c_str<T>(s: &str, f: &fn(*libc::c_char) -> T) -> T {\n-    s.as_c_str(f)\n-}\n-\n /// Unsafe operations\n pub mod raw {\n     use cast;\n@@ -1271,6 +1226,7 @@ pub trait StrSlice<'self> {\n     fn subslice_offset(&self, inner: &str) -> uint;\n \n     fn as_buf<T>(&self, f: &fn(*u8, uint) -> T) -> T;\n+    fn as_c_str<T>(&self, f: &fn(*libc::c_char) -> T) -> T;\n }\n \n /// Extension methods for strings\n@@ -2027,6 +1983,34 @@ impl<'self> StrSlice<'self> for &'self str {\n             f(buf, len)\n         }\n     }\n+\n+    /**\n+     * Work with the byte buffer of a string as a null-terminated C string.\n+     *\n+     * Allows for unsafe manipulation of strings, which is useful for foreign\n+     * interop. This is similar to `str::as_buf`, but guarantees null-termination.\n+     * If the given slice is not already null-terminated, this function will\n+     * allocate a temporary, copy the slice, null terminate it, and pass\n+     * that instead.\n+     *\n+     * # Example\n+     *\n+     * ~~~ {.rust}\n+     * let s = \"PATH\".as_c_str(|path| libc::getenv(path));\n+     * ~~~\n+     */\n+    #[inline]\n+    fn as_c_str<T>(&self, f: &fn(*libc::c_char) -> T) -> T {\n+        do self.as_buf |buf, len| {\n+            // NB: len includes the trailing null.\n+            assert!(len > 0);\n+            if unsafe { *(ptr::offset(buf, len - 1)) != 0 } {\n+                self.to_owned().as_c_str(|s| f(s))\n+            } else {\n+                f(buf as *libc::c_char)\n+            }\n+        }\n+    }\n }\n \n #[allow(missing_doc)]"}]}