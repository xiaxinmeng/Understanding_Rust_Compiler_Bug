{"sha": "cbf0b1b399e884cff01393e817738da48bab64fd", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNiZjBiMWIzOTllODg0Y2ZmMDEzOTNlODE3NzM4ZGE0OGJhYjY0ZmQ=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2015-07-13T00:05:02Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2015-07-13T00:05:02Z"}, "message": "Remove warnings by centralizing error codes usage", "tree": {"sha": "22820e8a8de8843b67385c47be7725b5b352f092", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/22820e8a8de8843b67385c47be7725b5b352f092"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cbf0b1b399e884cff01393e817738da48bab64fd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cbf0b1b399e884cff01393e817738da48bab64fd", "html_url": "https://github.com/rust-lang/rust/commit/cbf0b1b399e884cff01393e817738da48bab64fd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cbf0b1b399e884cff01393e817738da48bab64fd/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "48ee57e656ea955fe634df7c7e9f37c27c65580a", "url": "https://api.github.com/repos/rust-lang/rust/commits/48ee57e656ea955fe634df7c7e9f37c27c65580a", "html_url": "https://github.com/rust-lang/rust/commit/48ee57e656ea955fe634df7c7e9f37c27c65580a"}], "stats": {"total": 105, "additions": 63, "deletions": 42}, "files": [{"sha": "82e5df772818096d1d086cdb9c478f7661f8b8e1", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 56, "deletions": 36, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/cbf0b1b399e884cff01393e817738da48bab64fd/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbf0b1b399e884cff01393e817738da48bab64fd/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=cbf0b1b399e884cff01393e817738da48bab64fd", "patch": "@@ -116,6 +116,26 @@ mod record_exports;\n mod build_reduced_graph;\n mod resolve_imports;\n \n+fn resolve_err_417<'a, 'tcx>(this: &Resolver<'a, 'tcx>, span: syntax::codemap::Span, formatted: &str) {\n+    resolve_err!(this, span, E0417, \"{}\", formatted);\n+}\n+\n+fn resolve_err_422<'a, 'tcx>(this: &Resolver<'a, 'tcx>, span: syntax::codemap::Span, formatted: &str) {\n+    resolve_err!(this, span, E0422, \"{}\", formatted);\n+}\n+\n+fn resolve_err_423<'a, 'tcx>(this: &Resolver<'a, 'tcx>, span: syntax::codemap::Span, formatted: &str) {\n+    resolve_err!(this, span, E0423, \"{}\", formatted);\n+}\n+\n+fn resolve_err_432<'a, 'tcx>(this: &Resolver<'a, 'tcx>, span: syntax::codemap::Span, formatted: &str) {\n+    resolve_err!(this, span, E0432, \"{}\", formatted);\n+}\n+\n+fn resolve_err_433<'a, 'tcx>(this: &Resolver<'a, 'tcx>, span: syntax::codemap::Span, formatted: &str) {\n+    resolve_err!(this, span, E0433, \"{}\", formatted);\n+}\n+\n #[derive(Copy, Clone)]\n struct BindingInfo {\n     span: Span,\n@@ -1310,7 +1330,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                                               PathSearch,\n                                               true) {\n                 Failed(Some((span, msg))) => {\n-                    resolve_err!(self, span, E0433, \"failed to resolve. {}\", msg);\n+                    resolve_err_433(self, span, &*format!(\"failed to resolve. {}\", msg));\n                 },\n                 Failed(None) => (), // Continue up the search chain.\n                 Indeterminate => {\n@@ -1568,11 +1588,12 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                          .span_to_snippet((*imports)[index].span)\n                          .unwrap();\n             if sn.contains(\"::\") {\n-                resolve_err!(self, (*imports)[index].span, E0432,\n-                             \"{}\", \"unresolved import\");\n+                resolve_err_432(self, (*imports)[index].span, \"unresolved import\");\n             } else {\n-                resolve_err!(self, (*imports)[index].span, E0432,\n-                             \"unresolved import (maybe you meant `{}::*`?)\", sn);\n+                resolve_err_432(self, (*imports)[index].span,\n+                    &*format!(\"unresolved import (maybe you meant `{}::*`?)\",\n+                          sn)\n+                );\n             }\n         }\n \n@@ -2528,7 +2549,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                                 self.record_def(pattern.id, path_res);\n                             }\n                             DefStatic(..) => {\n-                                resolve_err!(self, path.span, E0417, \"{}\",\n+                                resolve_err_417(self, path.span,\n                                              \"static variables cannot be \\\n                                               referenced in a pattern, \\\n                                               use a `const` instead\");\n@@ -2609,9 +2630,9 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                         result => {\n                             debug!(\"(resolving pattern) didn't find struct \\\n                                     def: {:?}\", result);\n-                            resolve_err!(self, path.span, E0422,\n-                                         \"`{}` does not name a structure\",\n-                                         path_names_to_string(path, 0));\n+                            resolve_err_422(self, path.span,\n+                                         &*format!(\"`{}` does not name a structure\",\n+                                             path_names_to_string(path, 0)));\n                         }\n                     }\n                     visit::walk_path(self, path);\n@@ -2657,8 +2678,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                                 return FoundConst(def, LastMod(AllPublic));\n                             }\n                             DefStatic(..) => {\n-                                resolve_err!(self, span, E0417,\n-                                             \"{}\",\n+                                resolve_err_417(self, span,\n                                              \"static variables cannot be \\\n                                               referenced in a pattern, \\\n                                               use a `const` instead\");\n@@ -2678,9 +2698,9 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n             Failed(err) => {\n                 match err {\n                     Some((span, msg)) => {\n-                        resolve_err!(self, span, E0433,\n-                                     \"failed to resolve: {}\",\n-                                     msg);\n+                        resolve_err_433(self, span,\n+                                     &*format!(\"failed to resolve: {}\",\n+                                         msg));\n                     }\n                     None => ()\n                 }\n@@ -2909,9 +2929,9 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                     }\n                 };\n \n-                resolve_err!(self, span, E0433,\n-                             \"failed to resolve: {}\",\n-                             msg);\n+                resolve_err_433(self, span,\n+                             &*format!(\"failed to resolve: {}\",\n+                                 msg));\n                 return None;\n             }\n             Indeterminate => panic!(\"indeterminate unexpected\"),\n@@ -2972,9 +2992,9 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n \n                 /*self.resolve_error(span, &format!(\"failed to resolve. {}\",\n                                                  msg));*/\n-                resolve_err!(self, span, E0433,\n-                             \"failed to resolve: {}\",\n-                             msg);\n+                resolve_err_433(self, span,\n+                             &*format!(\"failed to resolve: {}\",\n+                                 msg));\n                 return None;\n             }\n \n@@ -3070,9 +3090,9 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                          failed to resolve {}\", name);\n \n                 if let Some((span, msg)) = err {\n-                    resolve_err!(self, span, E0433,\n-                                 \"failed to resolve: {}\",\n-                                 msg)\n+                    resolve_err_433(self, span,\n+                                 &*format!(\"failed to resolve: {}\",\n+                                     msg))\n                 }\n \n                 return None;\n@@ -3274,11 +3294,11 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                     // Check if struct variant\n                     if let DefVariant(_, _, true) = path_res.base_def {\n                         let path_name = path_names_to_string(path, 0);\n-                        resolve_err!(self, expr.span, E0423,\n-                                     \"`{}` is a struct variant name, but \\\n-                                      this expression \\\n-                                      uses it like a function name\",\n-                                     path_name);\n+                        resolve_err_423(self, expr.span,\n+                                     &*format!(\"`{}` is a struct variant name, but \\\n+                                          this expression \\\n+                                          uses it like a function name\",\n+                                         path_name));\n \n                         let msg = format!(\"did you mean to write: \\\n                                            `{} {{ /* fields */ }}`?\",\n@@ -3315,11 +3335,11 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                     match type_res.map(|r| r.base_def) {\n                         Some(DefTy(struct_id, _))\n                             if self.structs.contains_key(&struct_id) => {\n-                                resolve_err!(self, expr.span, E0423,\n-                                             \"{}` is a structure name, but \\\n-                                              this expression \\\n-                                              uses it like a function name\",\n-                                              path_name);\n+                                resolve_err_423(self, expr.span,\n+                                             &*format!(\"{}` is a structure name, but \\\n+                                                   this expression \\\n+                                                   uses it like a function name\",\n+                                                  path_name));\n \n                                 let msg = format!(\"did you mean to write: \\\n                                                      `{} {{ /* fields */ }}`?\",\n@@ -3394,9 +3414,9 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                     Some(definition) => self.record_def(expr.id, definition),\n                     None => {\n                         debug!(\"(resolving expression) didn't find struct def\",);\n-                        resolve_err!(self, path.span, E0422,\n-                                     \"`{}` does not name a structure\",\n-                                     path_names_to_string(path, 0));\n+                        resolve_err_422(self, path.span,\n+                                     &*format!(\"`{}` does not name a structure\",\n+                                         path_names_to_string(path, 0)));\n                     }\n                 }\n "}, {"sha": "c5f451e5649ef9c1905470394ee873eb47435926", "filename": "src/librustc_resolve/resolve_imports.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/cbf0b1b399e884cff01393e817738da48bab64fd/src%2Flibrustc_resolve%2Fresolve_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbf0b1b399e884cff01393e817738da48bab64fd/src%2Flibrustc_resolve%2Fresolve_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fresolve_imports.rs?ref=cbf0b1b399e884cff01393e817738da48bab64fd", "patch": "@@ -272,12 +272,13 @@ impl<'a, 'b:'a, 'tcx:'b> ImportResolver<'a, 'b, 'tcx> {\n                         Some((span, msg)) => (span, format!(\". {}\", msg)),\n                         None => (import_directive.span, String::new())\n                     };\n-                    resolve_err!(self.resolver, span, E0432,\n-                                 \"unresolved import `{}`{}\",\n-                                 import_path_to_string(\n-                                          &import_directive.module_path,\n-                                          import_directive.subclass),\n-                                 help);\n+                    ::resolve_err_432(self.resolver, span,\n+                                      &*format!(\"unresolved import `{}`{}\",\n+                                            import_path_to_string(\n+                                                &import_directive.module_path,\n+                                                import_directive.subclass),\n+                                            help)\n+                                     );\n                 }\n                 ResolveResult::Indeterminate => break, // Bail out. We'll come around next time.\n                 ResolveResult::Success(()) => () // Good. Continue."}]}