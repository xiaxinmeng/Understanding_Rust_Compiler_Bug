{"sha": "f466e1a59fa79c36538ea0fe733a1ab98bc6e197", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY0NjZlMWE1OWZhNzljMzY1MzhlYTBmZTczM2ExYWI5OGJjNmUxOTc=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2014-10-07T07:00:26Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2014-10-23T00:52:34Z"}, "message": "Add run-pass-valgrind tests\n\nCloses #16914", "tree": {"sha": "f8edb77cfd98c44519888eb1ff1fa0582deb89b9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f8edb77cfd98c44519888eb1ff1fa0582deb89b9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f466e1a59fa79c36538ea0fe733a1ab98bc6e197", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f466e1a59fa79c36538ea0fe733a1ab98bc6e197", "html_url": "https://github.com/rust-lang/rust/commit/f466e1a59fa79c36538ea0fe733a1ab98bc6e197", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f466e1a59fa79c36538ea0fe733a1ab98bc6e197/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7d7e40983972d128c74eaea1f92be1adaf45d647", "url": "https://api.github.com/repos/rust-lang/rust/commits/7d7e40983972d128c74eaea1f92be1adaf45d647", "html_url": "https://github.com/rust-lang/rust/commit/7d7e40983972d128c74eaea1f92be1adaf45d647"}], "stats": {"total": 65, "additions": 56, "deletions": 9}, "files": [{"sha": "8604dfeaffc30111764e50aa836d45323e61612b", "filename": "configure", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f466e1a59fa79c36538ea0fe733a1ab98bc6e197/configure", "raw_url": "https://github.com/rust-lang/rust/raw/f466e1a59fa79c36538ea0fe733a1ab98bc6e197/configure", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/configure?ref=f466e1a59fa79c36538ea0fe733a1ab98bc6e197", "patch": "@@ -906,6 +906,7 @@ do\n     done\n \n     make_dir $h/test/run-pass\n+    make_dir $h/test/run-pass-valgrind\n     make_dir $h/test/run-pass-fulldeps\n     make_dir $h/test/run-fail\n     make_dir $h/test/compile-fail"}, {"sha": "93fdda869c96418a6b8d01337f1cc662e75b47ce", "filename": "mk/main.mk", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f466e1a59fa79c36538ea0fe733a1ab98bc6e197/mk%2Fmain.mk", "raw_url": "https://github.com/rust-lang/rust/raw/f466e1a59fa79c36538ea0fe733a1ab98bc6e197/mk%2Fmain.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fmain.mk?ref=f466e1a59fa79c36538ea0fe733a1ab98bc6e197", "patch": "@@ -174,6 +174,8 @@ else\n   CFG_VALGRIND_COMPILE :=\n endif\n \n+VALGRIND_PATH :=$(CFG_VALGRIND)\n+\n ifdef CFG_ENABLE_VALGRIND\n   $(info cfg: enabling valgrind (CFG_ENABLE_VALGRIND))\n else\n@@ -182,6 +184,7 @@ endif\n ifdef CFG_BAD_VALGRIND\n   $(info cfg: disabling valgrind due to its unreliability on this platform)\n   CFG_VALGRIND :=\n+  VALGRIND_PATH :=\n endif\n \n "}, {"sha": "b9e6ab8909b772fb1451bd39af94e384287aefd3", "filename": "mk/tests.mk", "status": "modified", "additions": 19, "deletions": 5, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/f466e1a59fa79c36538ea0fe733a1ab98bc6e197/mk%2Ftests.mk", "raw_url": "https://github.com/rust-lang/rust/raw/f466e1a59fa79c36538ea0fe733a1ab98bc6e197/mk%2Ftests.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Ftests.mk?ref=f466e1a59fa79c36538ea0fe733a1ab98bc6e197", "patch": "@@ -1,4 +1,4 @@\n-# Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+# Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n # file at the top-level directory of this distribution and at\n # http://rust-lang.org/COPYRIGHT.\n #\n@@ -184,12 +184,12 @@ check-notidy: cleantmptestlogs cleantestlibs all check-stage2\n # A slightly smaller set of tests for smoke testing.\n check-lite: cleantestlibs cleantmptestlogs \\\n \t$(foreach crate,$(TEST_TARGET_CRATES),check-stage2-$(crate)) \\\n-\tcheck-stage2-rpass \\\n+\tcheck-stage2-rpass check-stage2-rpass-valgrind \\\n \tcheck-stage2-rfail check-stage2-cfail check-stage2-rmake\n \t$(Q)$(CFG_PYTHON) $(S)src/etc/check-summary.py tmp/*.log\n \n # Only check the 'reference' tests: rpass/cfail/rfail/rmake.\n-check-ref: cleantestlibs cleantmptestlogs check-stage2-rpass \\\n+check-ref: cleantestlibs cleantmptestlogs check-stage2-rpass check-stage2-rpass-valgrind \\\n \tcheck-stage2-rfail check-stage2-cfail check-stage2-rmake\n \t$(Q)$(CFG_PYTHON) $(S)src/etc/check-summary.py tmp/*.log\n \n@@ -491,6 +491,8 @@ $(foreach host,$(CFG_HOST), \\\n \n RPASS_RC := $(wildcard $(S)src/test/run-pass/*.rc)\n RPASS_RS := $(wildcard $(S)src/test/run-pass/*.rs)\n+RPASS_VALGRIND_RC := $(wildcard $(S)src/test/run-pass-valgrind/*.rc)\n+RPASS_VALGRIND_RS := $(wildcard $(S)src/test/run-pass-valgrind/*.rs)\n RPASS_FULL_RC := $(wildcard $(S)src/test/run-pass-fulldeps/*.rc)\n RPASS_FULL_RS := $(wildcard $(S)src/test/run-pass-fulldeps/*.rs)\n CFAIL_FULL_RC := $(wildcard $(S)src/test/compile-fail-fulldeps/*.rc)\n@@ -511,6 +513,7 @@ CODEGEN_CC := $(wildcard $(S)src/test/codegen/*.cc)\n PERF_RS := $(wildcard $(S)src/test/bench/*.rs)\n \n RPASS_TESTS := $(RPASS_RC) $(RPASS_RS)\n+RPASS_VALGRIND_TESTS := $(RPASS_VALGRIND_RC) $(RPASS_VALGRIND_RS)\n RPASS_FULL_TESTS := $(RPASS_FULL_RC) $(RPASS_FULL_RS)\n CFAIL_FULL_TESTS := $(CFAIL_FULL_RC) $(CFAIL_FULL_RS)\n RFAIL_TESTS := $(RFAIL_RC) $(RFAIL_RS)\n@@ -527,6 +530,14 @@ CTEST_BUILD_BASE_rpass = run-pass\n CTEST_MODE_rpass = run-pass\n CTEST_RUNTOOL_rpass = $(CTEST_RUNTOOL)\n \n+CTEST_SRC_BASE_rpass-valgrind = run-pass-valgrind\n+CTEST_BUILD_BASE_rpass-valgrind = run-pass-valgrind\n+CTEST_MODE_rpass-valgrind = run-pass-valgrind\n+CTEST_RUNTOOL_rpass-valgrind = $(CTEST_RUNTOOL)\n+ifdef VALGRIND_PATH\n+CTEST_TESTARGS += --valgrind-path \"$(VALGRIND_PATH)\"\n+endif\n+\n CTEST_SRC_BASE_rpass-full = run-pass-fulldeps\n CTEST_BUILD_BASE_rpass-full = run-pass-fulldeps\n CTEST_MODE_rpass-full = run-pass\n@@ -622,7 +633,7 @@ TEST_SREQ$(1)_T_$(2)_H_$(3) = \\\n # remove directive, if present, from CFG_RUSTC_FLAGS (issue #7898).\n CTEST_RUSTC_FLAGS := $$(subst --cfg ndebug,,$$(CFG_RUSTC_FLAGS))\n \n-# The tests can not be optimized while the rest of the compiler is optimized, so\n+# The tests cannot be optimized while the rest of the compiler is optimized, so\n # filter out the optimization (if any) from rustc and then figure out if we need\n # to be optimized\n CTEST_RUSTC_FLAGS := $$(subst -O,,$$(CTEST_RUSTC_FLAGS))\n@@ -634,6 +645,7 @@ endif\n # slow things down.\n CTEST_RUSTC_FLAGS += -C codegen-units=1\n \n+\n CTEST_COMMON_ARGS$(1)-T-$(2)-H-$(3) := \\\n \t\t--compile-lib-path $$(HLIB$(1)_H_$(3)) \\\n         --run-lib-path $$(TLIB$(1)_T_$(2)_H_$(3)) \\\n@@ -655,6 +667,7 @@ CTEST_COMMON_ARGS$(1)-T-$(2)-H-$(3) := \\\n         $$(CTEST_TESTARGS)\n \n CTEST_DEPS_rpass_$(1)-T-$(2)-H-$(3) = $$(RPASS_TESTS)\n+CTEST_DEPS_rpass-valgrind_$(1)-T-$(2)-H-$(3) = $$(RPASS_VALGRIND_TESTS)\n CTEST_DEPS_rpass-full_$(1)-T-$(2)-H-$(3) = $$(RPASS_FULL_TESTS) $$(CSREQ$(1)_T_$(3)_H_$(3)) $$(SREQ$(1)_T_$(2)_H_$(3))\n CTEST_DEPS_cfail-full_$(1)-T-$(2)-H-$(3) = $$(CFAIL_FULL_TESTS) $$(CSREQ$(1)_T_$(3)_H_$(3)) $$(SREQ$(1)_T_$(2)_H_$(3))\n CTEST_DEPS_rfail_$(1)-T-$(2)-H-$(3) = $$(RFAIL_TESTS)\n@@ -726,7 +739,7 @@ endif\n \n endef\n \n-CTEST_NAMES = rpass rpass-full cfail-full rfail cfail bench perf debuginfo-gdb debuginfo-lldb codegen\n+CTEST_NAMES = rpass rpass-valgrind rpass-full cfail-full rfail cfail bench perf debuginfo-gdb debuginfo-lldb codegen\n \n $(foreach host,$(CFG_HOST), \\\n  $(eval $(foreach target,$(CFG_TARGET), \\\n@@ -895,6 +908,7 @@ TEST_GROUPS = \\\n \t$(foreach crate,$(TEST_CRATES),$(crate)) \\\n \t$(foreach crate,$(TEST_DOC_CRATES),doc-crate-$(crate)) \\\n \trpass \\\n+    rpass-valgrind \\\n \trpass-full \\\n \tcfail-full \\\n \trfail \\"}, {"sha": "d8a0afc38e783841b6c3583eaf88ff14167655d6", "filename": "src/compiletest/common.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f466e1a59fa79c36538ea0fe733a1ab98bc6e197/src%2Fcompiletest%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f466e1a59fa79c36538ea0fe733a1ab98bc6e197/src%2Fcompiletest%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fcommon.rs?ref=f466e1a59fa79c36538ea0fe733a1ab98bc6e197", "patch": "@@ -17,6 +17,7 @@ pub enum Mode {\n     CompileFail,\n     RunFail,\n     RunPass,\n+    RunPassValgrind,\n     Pretty,\n     DebugInfoGdb,\n     DebugInfoLldb,\n@@ -29,6 +30,7 @@ impl FromStr for Mode {\n           \"compile-fail\" => Some(CompileFail),\n           \"run-fail\" => Some(RunFail),\n           \"run-pass\" => Some(RunPass),\n+          \"run-pass-valgrind\" => Some(RunPassValgrind),\n           \"pretty\" => Some(Pretty),\n           \"debuginfo-lldb\" => Some(DebugInfoLldb),\n           \"debuginfo-gdb\" => Some(DebugInfoGdb),\n@@ -44,6 +46,7 @@ impl fmt::Show for Mode {\n             CompileFail => \"compile-fail\",\n             RunFail => \"run-fail\",\n             RunPass => \"run-pass\",\n+            RunPassValgrind => \"run-pass-valgrind\",\n             Pretty => \"pretty\",\n             DebugInfoGdb => \"debuginfo-gdb\",\n             DebugInfoLldb => \"debuginfo-lldb\",\n@@ -70,6 +73,9 @@ pub struct Config {\n     // The llvm binaries path\n     pub llvm_bin_path: Option<Path>,\n \n+    // The valgrind path\n+    pub valgrind_path: Option<String>,\n+\n     // The directory containing the tests to run\n     pub src_base: Path,\n "}, {"sha": "3ac25937b38135832b54de58586a23cbfa57d08f", "filename": "src/compiletest/compiletest.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f466e1a59fa79c36538ea0fe733a1ab98bc6e197/src%2Fcompiletest%2Fcompiletest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f466e1a59fa79c36538ea0fe733a1ab98bc6e197/src%2Fcompiletest%2Fcompiletest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fcompiletest.rs?ref=f466e1a59fa79c36538ea0fe733a1ab98bc6e197", "patch": "@@ -50,13 +50,14 @@ pub fn parse_config(args: Vec<String> ) -> Config {\n           reqopt(\"\", \"run-lib-path\", \"path to target shared libraries\", \"PATH\"),\n           reqopt(\"\", \"rustc-path\", \"path to rustc to use for compiling\", \"PATH\"),\n           optopt(\"\", \"clang-path\", \"path to  executable for codegen tests\", \"PATH\"),\n+          optopt(\"\", \"valgrind-path\", \"path to valgrind executable for valgrind tests\", \"PROGRAM\"),\n           optopt(\"\", \"llvm-bin-path\", \"path to directory holding llvm binaries\", \"DIR\"),\n           reqopt(\"\", \"src-base\", \"directory to scan for test files\", \"PATH\"),\n           reqopt(\"\", \"build-base\", \"directory to deposit test outputs\", \"PATH\"),\n           reqopt(\"\", \"aux-base\", \"directory to find auxiliary test files\", \"PATH\"),\n           reqopt(\"\", \"stage-id\", \"the target-stage identifier\", \"stageN-TARGET\"),\n           reqopt(\"\", \"mode\", \"which sort of compile tests to run\",\n-                 \"(compile-fail|run-fail|run-pass|pretty|debug-info)\"),\n+                 \"(compile-fail|run-fail|run-pass|run-pass-valgrind|pretty|debug-info)\"),\n           optflag(\"\", \"ignored\", \"run tests marked as ignored\"),\n           optopt(\"\", \"runtool\", \"supervisor program to run tests under \\\n                                  (eg. emulator, valgrind)\", \"PROGRAM\"),\n@@ -125,6 +126,7 @@ pub fn parse_config(args: Vec<String> ) -> Config {\n         run_lib_path: matches.opt_str(\"run-lib-path\").unwrap(),\n         rustc_path: opt_path(matches, \"rustc-path\"),\n         clang_path: matches.opt_str(\"clang-path\").map(|s| Path::new(s)),\n+        valgrind_path: matches.opt_str(\"valgrind-path\"),\n         llvm_bin_path: matches.opt_str(\"llvm-bin-path\").map(|s| Path::new(s)),\n         src_base: opt_path(matches, \"src-base\"),\n         build_base: opt_path(matches, \"build-base\"),"}, {"sha": "6b542fed68d66faa85c3426b840e5c3b0fee8e37", "filename": "src/compiletest/runtest.rs", "status": "modified", "additions": 23, "deletions": 2, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/f466e1a59fa79c36538ea0fe733a1ab98bc6e197/src%2Fcompiletest%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f466e1a59fa79c36538ea0fe733a1ab98bc6e197/src%2Fcompiletest%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fruntest.rs?ref=f466e1a59fa79c36538ea0fe733a1ab98bc6e197", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n use common::Config;\n-use common::{CompileFail, Pretty, RunFail, RunPass, DebugInfoGdb};\n+use common::{CompileFail, Pretty, RunFail, RunPass, RunPassValgrind, DebugInfoGdb};\n use common::{Codegen, DebugInfoLldb};\n use errors;\n use header::TestProps;\n@@ -35,7 +35,6 @@ use std::time::Duration;\n use test::MetricMap;\n \n pub fn run(config: Config, testfile: String) {\n-\n     match config.target.as_slice() {\n \n         \"arm-linux-androideabi\" => {\n@@ -64,6 +63,7 @@ pub fn run_metrics(config: Config, testfile: String, mm: &mut MetricMap) {\n       CompileFail => run_cfail_test(&config, &props, &testfile),\n       RunFail => run_rfail_test(&config, &props, &testfile),\n       RunPass => run_rpass_test(&config, &props, &testfile),\n+      RunPassValgrind => run_valgrind_test(&config, &props, &testfile),\n       Pretty => run_pretty_test(&config, &props, &testfile),\n       DebugInfoGdb => run_debuginfo_gdb_test(&config, &props, &testfile),\n       DebugInfoLldb => run_debuginfo_lldb_test(&config, &props, &testfile),\n@@ -164,6 +164,27 @@ fn run_rpass_test(config: &Config, props: &TestProps, testfile: &Path) {\n     }\n }\n \n+fn run_valgrind_test(config: &Config, props: &TestProps, testfile: &Path) {\n+    if config.valgrind_path.is_none() {\n+        return run_rpass_test(config, props, testfile);\n+    }\n+\n+    let mut proc_res = compile_test(config, props, testfile);\n+\n+    if !proc_res.status.success() {\n+        fatal_proc_rec(\"compilation failed!\", &proc_res);\n+    }\n+\n+    println!(\"running valgrind\");\n+    let mut new_config = config.clone();\n+    new_config.runtool = new_config.valgrind_path.clone();\n+    proc_res = exec_compiled_test(&new_config, props, testfile);\n+\n+    if !proc_res.status.success() {\n+        fatal_proc_rec(\"test run failed!\", &proc_res);\n+    }\n+}\n+\n fn run_pretty_test(config: &Config, props: &TestProps, testfile: &Path) {\n     if props.pp_exact.is_some() {\n         logv(config, \"testing for exact pretty-printing\".to_string());"}, {"sha": "aa625de93981b4630e5df144c7ecd50da74fa3b1", "filename": "src/libgetopts/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f466e1a59fa79c36538ea0fe733a1ab98bc6e197/src%2Flibgetopts%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f466e1a59fa79c36538ea0fe733a1ab98bc6e197/src%2Flibgetopts%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgetopts%2Flib.rs?ref=f466e1a59fa79c36538ea0fe733a1ab98bc6e197", "patch": "@@ -804,7 +804,7 @@ pub fn short_usage(program_name: &str, opts: &[OptGroup]) -> String {\n /// whitespace removed, and are only cut at whitespace boundaries.\n ///\n /// Note: Function was moved here from `std::str` because this module is the only place that\n-/// uses it, and because it was to specific for a general string function.\n+/// uses it, and because it was too specific for a general string function.\n ///\n /// #Failure:\n ///"}]}