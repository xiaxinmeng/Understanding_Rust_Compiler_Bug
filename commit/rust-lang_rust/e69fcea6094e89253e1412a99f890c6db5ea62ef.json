{"sha": "e69fcea6094e89253e1412a99f890c6db5ea62ef", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU2OWZjZWE2MDk0ZTg5MjUzZTE0MTJhOTlmODkwYzZkYjVlYTYyZWY=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2020-11-22T03:19:46Z"}, "committer": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2020-11-22T03:19:46Z"}, "message": "const fn: allow use of trait impls from bounds", "tree": {"sha": "dfafb94dc1b8e52eae94093663b90db8525488ed", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dfafb94dc1b8e52eae94093663b90db8525488ed"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e69fcea6094e89253e1412a99f890c6db5ea62ef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e69fcea6094e89253e1412a99f890c6db5ea62ef", "html_url": "https://github.com/rust-lang/rust/commit/e69fcea6094e89253e1412a99f890c6db5ea62ef", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e69fcea6094e89253e1412a99f890c6db5ea62ef/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "71d350e33ad652fe925431a322dd9a554919dfc1", "url": "https://api.github.com/repos/rust-lang/rust/commits/71d350e33ad652fe925431a322dd9a554919dfc1", "html_url": "https://github.com/rust-lang/rust/commit/71d350e33ad652fe925431a322dd9a554919dfc1"}], "stats": {"total": 133, "additions": 129, "deletions": 4}, "files": [{"sha": "d00038f345c9950ee022273b7436475c117043fa", "filename": "compiler/rustc_mir/src/transform/check_consts/validation.rs", "status": "modified", "additions": 36, "deletions": 4, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/e69fcea6094e89253e1412a99f890c6db5ea62ef/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e69fcea6094e89253e1412a99f890c6db5ea62ef/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fvalidation.rs?ref=e69fcea6094e89253e1412a99f890c6db5ea62ef", "patch": "@@ -4,16 +4,18 @@ use rustc_errors::{struct_span_err, Applicability, Diagnostic, ErrorReported};\n use rustc_hir::def_id::DefId;\n use rustc_hir::{self as hir, HirId, LangItem};\n use rustc_infer::infer::TyCtxtInferExt;\n+use rustc_infer::traits::{ImplSource, Obligation, ObligationCause};\n use rustc_middle::mir::visit::{MutatingUseContext, NonMutatingUseContext, PlaceContext, Visitor};\n use rustc_middle::mir::*;\n use rustc_middle::ty::cast::CastTy;\n use rustc_middle::ty::subst::GenericArgKind;\n use rustc_middle::ty::{\n     self, adjustment::PointerCast, Instance, InstanceDef, Ty, TyCtxt, TypeAndMut,\n };\n+use rustc_middle::ty::{Binder, TraitPredicate, TraitRef};\n use rustc_span::{sym, Span, Symbol};\n use rustc_trait_selection::traits::error_reporting::InferCtxtExt;\n-use rustc_trait_selection::traits::{self, TraitEngine};\n+use rustc_trait_selection::traits::{self, SelectionContext, TraitEngine};\n \n use std::mem;\n use std::ops::Deref;\n@@ -765,9 +767,39 @@ impl Visitor<'tcx> for Validator<'mir, 'tcx> {\n                     }\n                 };\n \n-                // Resolve a trait method call to its concrete implementation, which may be in a\n-                // `const` trait impl.\n-                if self.tcx.features().const_trait_impl {\n+                // Attempting to call a trait method?\n+                if let Some(trait_id) = tcx.trait_of_item(callee) {\n+                    if !self.tcx.features().const_trait_impl {\n+                        self.check_op(ops::FnCallNonConst(callee));\n+                        return;\n+                    }\n+\n+                    let trait_ref = TraitRef::from_method(tcx, trait_id, substs);\n+                    let obligation = Obligation::new(\n+                        ObligationCause::dummy(),\n+                        param_env,\n+                        Binder::bind(TraitPredicate {\n+                            trait_ref: TraitRef::from_method(tcx, trait_id, substs),\n+                        }),\n+                    );\n+\n+                    let implsrc = tcx.infer_ctxt().enter(|infcx| {\n+                        let mut selcx = SelectionContext::new(&infcx);\n+                        selcx.select(&obligation).unwrap()\n+                    });\n+\n+                    // If the method is provided via a where-clause that does not use the `?const`\n+                    // opt-out, the call is allowed.\n+                    if let Some(ImplSource::Param(_, hir::Constness::Const)) = implsrc {\n+                        debug!(\n+                            \"const_trait_impl: provided {:?} via where-clause in {:?}\",\n+                            trait_ref, param_env\n+                        );\n+                        return;\n+                    }\n+\n+                    // Resolve a trait method call to its concrete implementation, which may be in a\n+                    // `const` trait impl.\n                     let instance = Instance::resolve(tcx, param_env, callee, substs);\n                     debug!(\"Resolving ({:?}) -> {:?}\", callee, instance);\n                     if let Ok(Some(func)) = instance {"}, {"sha": "6d4bfe722dee72058dffbb2f411d6ee6d68f7daf", "filename": "src/test/ui/rfc-2632-const-trait-impl/call-generic-method-fail.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e69fcea6094e89253e1412a99f890c6db5ea62ef/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-method-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e69fcea6094e89253e1412a99f890c6db5ea62ef/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-method-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-method-fail.rs?ref=e69fcea6094e89253e1412a99f890c6db5ea62ef", "patch": "@@ -0,0 +1,11 @@\n+#![feature(const_fn)]\n+#![feature(const_trait_impl)]\n+#![feature(const_trait_bound_opt_out)]\n+#![allow(incomplete_features)]\n+\n+pub const fn equals_self<T: ?const PartialEq>(t: &T) -> bool {\n+    *t == *t\n+    //~^ ERROR calls in constant functions are limited to constant functions\n+}\n+\n+fn main() {}"}, {"sha": "4b2fc56aaa78a944791f288eeb42035c050ff00e", "filename": "src/test/ui/rfc-2632-const-trait-impl/call-generic-method-fail.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e69fcea6094e89253e1412a99f890c6db5ea62ef/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-method-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e69fcea6094e89253e1412a99f890c6db5ea62ef/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-method-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-method-fail.stderr?ref=e69fcea6094e89253e1412a99f890c6db5ea62ef", "patch": "@@ -0,0 +1,9 @@\n+error[E0015]: calls in constant functions are limited to constant functions, tuple structs and tuple variants\n+  --> $DIR/call-generic-method-fail.rs:7:5\n+   |\n+LL |     *t == *t\n+   |     ^^^^^^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0015`."}, {"sha": "f0e321422215440ea8e090ecf1434f1d277529c0", "filename": "src/test/ui/rfc-2632-const-trait-impl/call-generic-method-nonconst-opt-out.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/e69fcea6094e89253e1412a99f890c6db5ea62ef/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-method-nonconst-opt-out.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e69fcea6094e89253e1412a99f890c6db5ea62ef/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-method-nonconst-opt-out.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-method-nonconst-opt-out.rs?ref=e69fcea6094e89253e1412a99f890c6db5ea62ef", "patch": "@@ -0,0 +1,24 @@\n+// check-pass\n+\n+#![feature(const_fn)]\n+#![feature(const_trait_impl)]\n+#![feature(const_trait_bound_opt_out)]\n+#![allow(incomplete_features)]\n+\n+struct S;\n+\n+impl PartialEq for S {\n+    fn eq(&self, _: &S) -> bool {\n+        true\n+    }\n+}\n+\n+const fn equals_self<T: ?const PartialEq>(t: &T) -> bool {\n+    true\n+}\n+\n+pub const EQ: bool = equals_self(&S);\n+\n+// Calling `equals_self` with a type that only has a non-const impl is fine, because we opted out.\n+\n+fn main() {}"}, {"sha": "2c8f6354dc60f652036275c5393197e49e32cda8", "filename": "src/test/ui/rfc-2632-const-trait-impl/call-generic-method-nonconst.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/e69fcea6094e89253e1412a99f890c6db5ea62ef/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-method-nonconst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e69fcea6094e89253e1412a99f890c6db5ea62ef/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-method-nonconst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-method-nonconst.rs?ref=e69fcea6094e89253e1412a99f890c6db5ea62ef", "patch": "@@ -0,0 +1,26 @@\n+// FIXME(jschievink): this is not rejected correctly (only when the non-const impl is actually used)\n+// ignore-test\n+\n+#![feature(const_fn)]\n+#![feature(const_trait_impl)]\n+#![allow(incomplete_features)]\n+\n+struct S;\n+\n+impl PartialEq for S {\n+    fn eq(&self, _: &S) -> bool {\n+        true\n+    }\n+}\n+\n+const fn equals_self<T: PartialEq>(t: &T) -> bool {\n+    true\n+}\n+\n+// Calling `equals_self` with something that has a non-const impl should throw an error, despite\n+// it not using the impl.\n+\n+pub const EQ: bool = equals_self(&S);\n+//~^ ERROR\n+\n+fn main() {}"}, {"sha": "e968e6ec7bb80ef33114e1845fd68e46ef1509ac", "filename": "src/test/ui/rfc-2632-const-trait-impl/call-generic-method-pass.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/e69fcea6094e89253e1412a99f890c6db5ea62ef/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-method-pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e69fcea6094e89253e1412a99f890c6db5ea62ef/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-method-pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-method-pass.rs?ref=e69fcea6094e89253e1412a99f890c6db5ea62ef", "patch": "@@ -0,0 +1,23 @@\n+//! Basic test for calling methods on generic type parameters in `const fn`.\n+\n+// check-pass\n+\n+#![feature(const_fn)]\n+#![feature(const_trait_impl)]\n+#![allow(incomplete_features)]\n+\n+struct S;\n+\n+impl const PartialEq for S {\n+    fn eq(&self, _: &S) -> bool {\n+        true\n+    }\n+}\n+\n+const fn equals_self<T: PartialEq>(t: &T) -> bool {\n+    *t == *t\n+}\n+\n+pub const EQ: bool = equals_self(&S);\n+\n+fn main() {}"}]}