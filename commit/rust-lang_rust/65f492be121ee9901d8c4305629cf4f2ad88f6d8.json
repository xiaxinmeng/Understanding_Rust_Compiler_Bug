{"sha": "65f492be121ee9901d8c4305629cf4f2ad88f6d8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY1ZjQ5MmJlMTIxZWU5OTAxZDhjNDMwNTYyOWNmNGYyYWQ4OGY2ZDg=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-05-26T20:13:19Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-05-30T17:22:26Z"}, "message": "Account for returned `dyn Trait` evaluating to `'static` lifetime\n\nProvide a suggestion for `dyn Trait + '_` when possible.", "tree": {"sha": "73477de2fadd21569d5ef384cb84d28ca60de1aa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/73477de2fadd21569d5ef384cb84d28ca60de1aa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/65f492be121ee9901d8c4305629cf4f2ad88f6d8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/65f492be121ee9901d8c4305629cf4f2ad88f6d8", "html_url": "https://github.com/rust-lang/rust/commit/65f492be121ee9901d8c4305629cf4f2ad88f6d8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/65f492be121ee9901d8c4305629cf4f2ad88f6d8/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a724d9a4fb1abade3754ffcd2c92bb755b7d5ef6", "url": "https://api.github.com/repos/rust-lang/rust/commits/a724d9a4fb1abade3754ffcd2c92bb755b7d5ef6", "html_url": "https://github.com/rust-lang/rust/commit/a724d9a4fb1abade3754ffcd2c92bb755b7d5ef6"}], "stats": {"total": 381, "additions": 239, "deletions": 142}, "files": [{"sha": "cc8f1816bc3f4a10ac6fccef165ce0fc55937a70", "filename": "src/librustc_infer/infer/error_reporting/nice_region_error/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65f492be121ee9901d8c4305629cf4f2ad88f6d8/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65f492be121ee9901d8c4305629cf4f2ad88f6d8/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fmod.rs?ref=65f492be121ee9901d8c4305629cf4f2ad88f6d8", "patch": "@@ -55,9 +55,9 @@ impl<'cx, 'tcx> NiceRegionError<'cx, 'tcx> {\n                 diag.emit();\n                 ErrorReported\n             })\n+            .or_else(|| self.try_report_impl_not_conforming_to_trait())\n             .or_else(|| self.try_report_anon_anon_conflict())\n             .or_else(|| self.try_report_static_impl_trait())\n-            .or_else(|| self.try_report_impl_not_conforming_to_trait())\n     }\n \n     pub fn regions(&self) -> Option<(Span, ty::Region<'tcx>, ty::Region<'tcx>)> {"}, {"sha": "acaf47469927625fb8da0cb7bb7346c4487d5022", "filename": "src/librustc_infer/infer/error_reporting/nice_region_error/named_anon_conflict.rs", "status": "modified", "additions": 11, "deletions": 27, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/65f492be121ee9901d8c4305629cf4f2ad88f6d8/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fnamed_anon_conflict.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65f492be121ee9901d8c4305629cf4f2ad88f6d8/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fnamed_anon_conflict.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fnamed_anon_conflict.rs?ref=65f492be121ee9901d8c4305629cf4f2ad88f6d8", "patch": "@@ -21,8 +21,8 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n         // where the anonymous region appears (there must always be one; we\n         // only introduced anonymous regions in parameters) as well as a\n         // version new_ty of its type where the anonymous region is replaced\n-        // with the named one.//scope_def_id\n-        let (named, anon, anon_param_info, region_info) = if self.is_named_region(sub)\n+        // with the named one.\n+        let (named, anon, anon_param_info, region_info) = if sub.has_name()\n             && self.tcx().is_suitable_region(sup).is_some()\n             && self.find_param_with_region(sup, sub).is_some()\n         {\n@@ -32,7 +32,7 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n                 self.find_param_with_region(sup, sub).unwrap(),\n                 self.tcx().is_suitable_region(sup).unwrap(),\n             )\n-        } else if self.is_named_region(sup)\n+        } else if sup.has_name()\n             && self.tcx().is_suitable_region(sub).is_some()\n             && self.find_param_with_region(sub, sup).is_some()\n         {\n@@ -74,24 +74,21 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n         }\n \n         if let Some((_, fndecl)) = self.find_anon_type(anon, &br) {\n-            let return_type_anon = self.is_return_type_anon(scope_def_id, br, fndecl);\n             let is_self_anon = self.is_self_anon(is_first, scope_def_id);\n-            debug!(\n-                \"try_report_named_anon_conflict: fndecl {:?} {:?} {}\",\n-                fndecl, return_type_anon, is_self_anon\n-            );\n             if is_self_anon {\n-                // We used to check for `return_type_anon.is_some()` here. Removing that improves\n-                // some diagnostics, but we might have to readd the check if there are regressions\n-                // in the wild.\n                 return None;\n             }\n+\n             if let FnRetTy::Return(ty) = &fndecl.output {\n+                let mut v = ty::TraitObjectVisitor(vec![]);\n+                rustc_hir::intravisit::walk_ty(&mut v, ty);\n+\n                 debug!(\"try_report_named_anon_conflict: ret ty {:?}\", ty);\n-                if let (TyKind::Def(_, _), ty::ReStatic) = (&ty.kind, sub) {\n+                if sub == &ty::ReStatic && (matches!(ty.kind, TyKind::Def(_, _)) || v.0.len() == 1)\n+                {\n                     debug!(\"try_report_named_anon_conflict: impl Trait + 'static\");\n-                    // This is an impl Trait return that evaluates de need of 'static.\n-                    // We handle this case better in `static_impl_trait`.\n+                    // This is an `impl Trait` or `dyn Trait` return that evaluates de need of\n+                    // `'static`. We handle this case better in `static_impl_trait`.\n                     return None;\n                 }\n             }\n@@ -123,17 +120,4 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n \n         Some(diag)\n     }\n-\n-    // This method returns whether the given Region is Named\n-    pub(super) fn is_named_region(&self, region: ty::Region<'tcx>) -> bool {\n-        match *region {\n-            ty::ReStatic => true,\n-            ty::ReFree(ref free_region) => match free_region.bound_region {\n-                ty::BrNamed(..) => true,\n-                _ => false,\n-            },\n-            ty::ReEarlyBound(ebr) => ebr.has_name(),\n-            _ => false,\n-        }\n-    }\n }"}, {"sha": "1a8b7fda179b403b585712da592508951b5c58e8", "filename": "src/librustc_infer/infer/error_reporting/nice_region_error/static_impl_trait.rs", "status": "modified", "additions": 20, "deletions": 24, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/65f492be121ee9901d8c4305629cf4f2ad88f6d8/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65f492be121ee9901d8c4305629cf4f2ad88f6d8/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs?ref=65f492be121ee9901d8c4305629cf4f2ad88f6d8", "patch": "@@ -20,16 +20,14 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n             ) = error.clone()\n             {\n                 let anon_reg_sup = self.tcx().is_suitable_region(sup_r)?;\n-                let return_ty = self.tcx().return_type_impl_trait(anon_reg_sup.def_id);\n-                if sub_r == &RegionKind::ReStatic && return_ty.is_some() {\n+                let (fn_return_span, is_dyn) =\n+                    self.tcx().return_type_impl_or_dyn_trait(anon_reg_sup.def_id)?;\n+                if sub_r == &RegionKind::ReStatic {\n                     let sp = var_origin.span();\n                     let return_sp = sub_origin.span();\n                     let mut err =\n                         self.tcx().sess.struct_span_err(sp, \"cannot infer an appropriate lifetime\");\n-                    err.span_label(\n-                        return_sp,\n-                        \"this return type evaluates to the `'static` lifetime...\",\n-                    );\n+                    err.span_label(return_sp, \"this evaluates to the `'static` lifetime...\");\n                     err.span_label(sup_origin.span(), \"...but this borrow...\");\n \n                     let (lifetime, lt_sp_opt) = msg_span_from_free_region(self.tcx(), sup_r);\n@@ -39,24 +37,22 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n \n                     let lifetime_name =\n                         if sup_r.has_name() { sup_r.to_string() } else { \"'_\".to_owned() };\n-                    let fn_return_span = return_ty.unwrap().1;\n-                    if let Ok(snippet) =\n-                        self.tcx().sess.source_map().span_to_snippet(fn_return_span)\n-                    {\n-                        // only apply this suggestion onto functions with\n-                        // explicit non-desugar'able return.\n-                        if fn_return_span.desugaring_kind().is_none() {\n-                            err.span_suggestion(\n-                                fn_return_span,\n-                                &format!(\n-                                    \"you can add a bound to the return type to make it last less \\\n-                                     than `'static` and match {}\",\n-                                    lifetime\n-                                ),\n-                                format!(\"{} + {}\", snippet, lifetime_name),\n-                                Applicability::Unspecified,\n-                            );\n-                        }\n+                    // only apply this suggestion onto functions with\n+                    // explicit non-desugar'able return.\n+                    if fn_return_span.desugaring_kind().is_none() {\n+                        let msg = format!(\n+                            \"you can add a bound to the returned `{} Trait` to make it last less \\\n+                             than `'static` and match {}\",\n+                            if is_dyn { \"dyn\" } else { \"impl\" },\n+                            lifetime\n+                        );\n+                        // FIXME: account for the need of parens in `&(dyn Trait + '_)`\n+                        err.span_suggestion_verbose(\n+                            fn_return_span.shrink_to_hi(),\n+                            &msg,\n+                            format!(\" + {}\", lifetime_name),\n+                            Applicability::MaybeIncorrect,\n+                        );\n                     }\n                     err.emit();\n                     return Some(ErrorReported);"}, {"sha": "c9d240a5da91ebb1ebaefb74dbae131e84e1671e", "filename": "src/librustc_middle/ty/context.rs", "status": "modified", "additions": 74, "deletions": 27, "changes": 101, "blob_url": "https://github.com/rust-lang/rust/blob/65f492be121ee9901d8c4305629cf4f2ad88f6d8/src%2Flibrustc_middle%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65f492be121ee9901d8c4305629cf4f2ad88f6d8/src%2Flibrustc_middle%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fcontext.rs?ref=65f492be121ee9901d8c4305629cf4f2ad88f6d8", "patch": "@@ -1,38 +1,27 @@\n //! Type context book-keeping.\n \n use crate::arena::Arena;\n-use crate::dep_graph::DepGraph;\n-use crate::dep_graph::{self, DepConstructor};\n+use crate::dep_graph::{self, DepConstructor, DepGraph};\n use crate::hir::exports::Export;\n use crate::ich::{NodeIdHashingMode, StableHashingContext};\n use crate::infer::canonical::{Canonical, CanonicalVarInfo, CanonicalVarInfos};\n-use crate::lint::LintDiagnosticBuilder;\n-use crate::lint::{struct_lint_level, LintSource};\n+use crate::lint::{struct_lint_level, LintDiagnosticBuilder, LintSource};\n use crate::middle;\n-use crate::middle::cstore::CrateStoreDyn;\n-use crate::middle::cstore::EncodedMetadata;\n+use crate::middle::cstore::{CrateStoreDyn, EncodedMetadata};\n use crate::middle::resolve_lifetime::{self, ObjectLifetimeDefault};\n use crate::middle::stability;\n-use crate::mir::interpret::{Allocation, ConstValue, Scalar};\n-use crate::mir::{interpret, Body, Field, Local, Place, PlaceElem, ProjectionKind, Promoted};\n+use crate::mir::interpret::{self, Allocation, ConstValue, Scalar};\n+use crate::mir::{Body, Field, Local, Place, PlaceElem, ProjectionKind, Promoted};\n use crate::traits;\n-use crate::ty::query;\n use crate::ty::steal::Steal;\n-use crate::ty::subst::{GenericArg, InternalSubsts, Subst, SubstsRef};\n-use crate::ty::subst::{GenericArgKind, UserSubsts};\n-use crate::ty::CanonicalPolyFnSig;\n-use crate::ty::GenericParamDefKind;\n-use crate::ty::RegionKind;\n-use crate::ty::ReprOptions;\n+use crate::ty::subst::{GenericArg, GenericArgKind, InternalSubsts, Subst, SubstsRef, UserSubsts};\n use crate::ty::TyKind::*;\n-use crate::ty::{self, DefIdTree, Ty, TypeAndMut};\n-use crate::ty::{AdtDef, AdtKind, Const, Region};\n-use crate::ty::{BindingMode, BoundVar};\n-use crate::ty::{ConstVid, FloatVar, FloatVid, IntVar, IntVid, TyVar, TyVid};\n-use crate::ty::{ExistentialPredicate, Predicate, PredicateKind};\n-use crate::ty::{InferConst, ParamConst};\n-use crate::ty::{InferTy, ParamTy, PolyFnSig, ProjectionTy};\n-use crate::ty::{List, TyKind, TyS};\n+use crate::ty::{\n+    self, query, AdtDef, AdtKind, BindingMode, BoundVar, CanonicalPolyFnSig, Const, ConstVid,\n+    DefIdTree, ExistentialPredicate, FloatVar, FloatVid, GenericParamDefKind, InferConst, InferTy,\n+    IntVar, IntVid, List, ParamConst, ParamTy, PolyFnSig, Predicate, PredicateKind, ProjectionTy,\n+    Region, RegionKind, ReprOptions, TraitObjectVisitor, Ty, TyKind, TyS, TyVar, TyVid, TypeAndMut,\n+};\n use rustc_ast::ast;\n use rustc_ast::expand::allocator::AllocatorKind;\n use rustc_attr as attr;\n@@ -48,10 +37,8 @@ use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Res};\n use rustc_hir::def_id::{CrateNum, DefId, DefIdMap, DefIdSet, LocalDefId, LOCAL_CRATE};\n use rustc_hir::definitions::{DefPathHash, Definitions};\n-use rustc_hir::lang_items;\n-use rustc_hir::lang_items::PanicLocationLangItem;\n-use rustc_hir::{HirId, Node, TraitCandidate};\n-use rustc_hir::{ItemKind, ItemLocalId, ItemLocalMap, ItemLocalSet};\n+use rustc_hir::lang_items::{self, PanicLocationLangItem};\n+use rustc_hir::{HirId, ItemKind, ItemLocalId, ItemLocalMap, ItemLocalSet, Node, TraitCandidate};\n use rustc_index::vec::{Idx, IndexVec};\n use rustc_macros::HashStable;\n use rustc_session::config::{BorrowckMode, CrateType, OutputFilenames};\n@@ -1396,6 +1383,66 @@ impl<'tcx> TyCtxt<'tcx> {\n         })\n     }\n \n+    pub fn return_type_impl_or_dyn_trait(&self, scope_def_id: DefId) -> Option<(Span, bool)> {\n+        let hir_id = self.hir().as_local_hir_id(scope_def_id.expect_local());\n+        let hir_output = match self.hir().get(hir_id) {\n+            Node::Item(hir::Item {\n+                kind:\n+                    ItemKind::Fn(\n+                        hir::FnSig {\n+                            decl: hir::FnDecl { output: hir::FnRetTy::Return(ty), .. },\n+                            ..\n+                        },\n+                        ..,\n+                    ),\n+                ..\n+            })\n+            | Node::ImplItem(hir::ImplItem {\n+                kind:\n+                    hir::ImplItemKind::Fn(\n+                        hir::FnSig {\n+                            decl: hir::FnDecl { output: hir::FnRetTy::Return(ty), .. },\n+                            ..\n+                        },\n+                        _,\n+                    ),\n+                ..\n+            })\n+            | Node::TraitItem(hir::TraitItem {\n+                kind:\n+                    hir::TraitItemKind::Fn(\n+                        hir::FnSig {\n+                            decl: hir::FnDecl { output: hir::FnRetTy::Return(ty), .. },\n+                            ..\n+                        },\n+                        _,\n+                    ),\n+                ..\n+            }) => ty,\n+            _ => return None,\n+        };\n+\n+        let ret_ty = self.type_of(scope_def_id);\n+        match ret_ty.kind {\n+            ty::FnDef(_, _) => {\n+                let sig = ret_ty.fn_sig(*self);\n+                let output = self.erase_late_bound_regions(&sig.output());\n+                if output.is_impl_trait() {\n+                    let fn_decl = self.hir().fn_decl_by_hir_id(hir_id).unwrap();\n+                    Some((fn_decl.output.span(), false))\n+                } else {\n+                    let mut v = TraitObjectVisitor(vec![]);\n+                    rustc_hir::intravisit::walk_ty(&mut v, hir_output);\n+                    if v.0.len() == 1 {\n+                        return Some((v.0[0], true));\n+                    }\n+                    None\n+                }\n+            }\n+            _ => None,\n+        }\n+    }\n+\n     pub fn return_type_impl_trait(&self, scope_def_id: DefId) -> Option<(Ty<'tcx>, Span)> {\n         // HACK: `type_of_def_id()` will fail on these (#55796), so return `None`.\n         let hir_id = self.hir().as_local_hir_id(scope_def_id.expect_local());"}, {"sha": "1403efb745b156bec69771e54a047d2beb50ee5b", "filename": "src/librustc_middle/ty/diagnostics.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/65f492be121ee9901d8c4305629cf4f2ad88f6d8/src%2Flibrustc_middle%2Fty%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65f492be121ee9901d8c4305629cf4f2ad88f6d8/src%2Flibrustc_middle%2Fty%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fdiagnostics.rs?ref=65f492be121ee9901d8c4305629cf4f2ad88f6d8", "patch": "@@ -249,3 +249,22 @@ pub fn suggest_constraining_type_param(\n         true\n     }\n }\n+\n+pub struct TraitObjectVisitor(pub Vec<rustc_span::Span>);\n+impl<'v> hir::intravisit::Visitor<'v> for TraitObjectVisitor {\n+    type Map = rustc_hir::intravisit::ErasedMap<'v>;\n+\n+    fn nested_visit_map(&mut self) -> hir::intravisit::NestedVisitorMap<Self::Map> {\n+        hir::intravisit::NestedVisitorMap::None\n+    }\n+\n+    fn visit_ty(&mut self, ty: &hir::Ty<'_>) {\n+        if let hir::TyKind::TraitObject(\n+            _,\n+            hir::Lifetime { name: hir::LifetimeName::ImplicitObjectLifetimeDefault, .. },\n+        ) = ty.kind\n+        {\n+            self.0.push(ty.span);\n+        }\n+    }\n+}"}, {"sha": "cd141b82e4125d8242c1597f73a78ae021e47cfc", "filename": "src/test/ui/async-await/issues/issue-62097.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65f492be121ee9901d8c4305629cf4f2ad88f6d8/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62097.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/65f492be121ee9901d8c4305629cf4f2ad88f6d8/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62097.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62097.stderr?ref=65f492be121ee9901d8c4305629cf4f2ad88f6d8", "patch": "@@ -4,7 +4,7 @@ error: cannot infer an appropriate lifetime\n LL |     pub async fn run_dummy_fn(&self) {\n    |                               ^^^^^ ...but this borrow...\n LL |         foo(|| self.bar()).await;\n-   |         --- this return type evaluates to the `'static` lifetime...\n+   |         --- this evaluates to the `'static` lifetime...\n    |\n note: ...can't outlive the lifetime `'_` as defined on the method body at 12:31\n   --> $DIR/issue-62097.rs:12:31"}, {"sha": "42667d6ca1a5deb324fa8340843dcf9c865d0825", "filename": "src/test/ui/impl-trait/must_outlive_least_region_or_bound.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/65f492be121ee9901d8c4305629cf4f2ad88f6d8/src%2Ftest%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/65f492be121ee9901d8c4305629cf4f2ad88f6d8/src%2Ftest%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.stderr?ref=65f492be121ee9901d8c4305629cf4f2ad88f6d8", "patch": "@@ -4,53 +4,53 @@ error: cannot infer an appropriate lifetime\n LL | fn elided(x: &i32) -> impl Copy { x }\n    |                       ---------   ^ ...but this borrow...\n    |                       |\n-   |                       this return type evaluates to the `'static` lifetime...\n+   |                       this evaluates to the `'static` lifetime...\n    |\n note: ...can't outlive the anonymous lifetime #1 defined on the function body at 3:1\n   --> $DIR/must_outlive_least_region_or_bound.rs:3:1\n    |\n LL | fn elided(x: &i32) -> impl Copy { x }\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-help: you can add a bound to the return type to make it last less than `'static` and match the anonymous lifetime #1 defined on the function body at 3:1\n+help: you can add a bound to the returned `impl Trait` to make it last less than `'static` and match the anonymous lifetime #1 defined on the function body at 3:1\n    |\n LL | fn elided(x: &i32) -> impl Copy + '_ { x }\n-   |                       ^^^^^^^^^^^^^^\n+   |                                 ^^^^\n \n error: cannot infer an appropriate lifetime\n   --> $DIR/must_outlive_least_region_or_bound.rs:6:44\n    |\n LL | fn explicit<'a>(x: &'a i32) -> impl Copy { x }\n    |                                ---------   ^ ...but this borrow...\n    |                                |\n-   |                                this return type evaluates to the `'static` lifetime...\n+   |                                this evaluates to the `'static` lifetime...\n    |\n note: ...can't outlive the lifetime `'a` as defined on the function body at 6:13\n   --> $DIR/must_outlive_least_region_or_bound.rs:6:13\n    |\n LL | fn explicit<'a>(x: &'a i32) -> impl Copy { x }\n    |             ^^\n-help: you can add a bound to the return type to make it last less than `'static` and match the lifetime `'a` as defined on the function body at 6:13\n+help: you can add a bound to the returned `impl Trait` to make it last less than `'static` and match the lifetime `'a` as defined on the function body at 6:13\n    |\n LL | fn explicit<'a>(x: &'a i32) -> impl Copy + 'a { x }\n-   |                                ^^^^^^^^^^^^^^\n+   |                                          ^^^^\n \n error: cannot infer an appropriate lifetime\n   --> $DIR/must_outlive_least_region_or_bound.rs:12:69\n    |\n LL | fn with_bound<'a>(x: &'a i32) -> impl LifetimeTrait<'a> + 'static { x }\n    |                                  --------------------------------   ^ ...but this borrow...\n    |                                  |\n-   |                                  this return type evaluates to the `'static` lifetime...\n+   |                                  this evaluates to the `'static` lifetime...\n    |\n note: ...can't outlive the lifetime `'a` as defined on the function body at 12:15\n   --> $DIR/must_outlive_least_region_or_bound.rs:12:15\n    |\n LL | fn with_bound<'a>(x: &'a i32) -> impl LifetimeTrait<'a> + 'static { x }\n    |               ^^\n-help: you can add a bound to the return type to make it last less than `'static` and match the lifetime `'a` as defined on the function body at 12:15\n+help: you can add a bound to the returned `impl Trait` to make it last less than `'static` and match the lifetime `'a` as defined on the function body at 12:15\n    |\n LL | fn with_bound<'a>(x: &'a i32) -> impl LifetimeTrait<'a> + 'static + 'a { x }\n-   |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                                                                   ^^^^\n \n error[E0623]: lifetime mismatch\n   --> $DIR/must_outlive_least_region_or_bound.rs:17:61"}, {"sha": "963de2d448d7f5ea6b3a5a3f733b546b82bf6d86", "filename": "src/test/ui/impl-trait/static-return-lifetime-infered.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/65f492be121ee9901d8c4305629cf4f2ad88f6d8/src%2Ftest%2Fui%2Fimpl-trait%2Fstatic-return-lifetime-infered.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/65f492be121ee9901d8c4305629cf4f2ad88f6d8/src%2Ftest%2Fui%2Fimpl-trait%2Fstatic-return-lifetime-infered.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fstatic-return-lifetime-infered.stderr?ref=65f492be121ee9901d8c4305629cf4f2ad88f6d8", "patch": "@@ -2,7 +2,7 @@ error: cannot infer an appropriate lifetime\n   --> $DIR/static-return-lifetime-infered.rs:7:16\n    |\n LL |     fn iter_values_anon(&self) -> impl Iterator<Item=u32> {\n-   |                                   ----------------------- this return type evaluates to the `'static` lifetime...\n+   |                                   ----------------------- this evaluates to the `'static` lifetime...\n LL |         self.x.iter().map(|a| a.0)\n    |         ------ ^^^^\n    |         |\n@@ -15,16 +15,16 @@ LL | /     fn iter_values_anon(&self) -> impl Iterator<Item=u32> {\n LL | |         self.x.iter().map(|a| a.0)\n LL | |     }\n    | |_____^\n-help: you can add a bound to the return type to make it last less than `'static` and match the anonymous lifetime #1 defined on the method body at 6:5\n+help: you can add a bound to the returned `impl Trait` to make it last less than `'static` and match the anonymous lifetime #1 defined on the method body at 6:5\n    |\n LL |     fn iter_values_anon(&self) -> impl Iterator<Item=u32> + '_ {\n-   |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                                                           ^^^^\n \n error: cannot infer an appropriate lifetime\n   --> $DIR/static-return-lifetime-infered.rs:11:16\n    |\n LL |     fn iter_values<'a>(&'a self) -> impl Iterator<Item=u32> {\n-   |                                     ----------------------- this return type evaluates to the `'static` lifetime...\n+   |                                     ----------------------- this evaluates to the `'static` lifetime...\n LL |         self.x.iter().map(|a| a.0)\n    |         ------ ^^^^\n    |         |\n@@ -35,10 +35,10 @@ note: ...can't outlive the lifetime `'a` as defined on the method body at 10:20\n    |\n LL |     fn iter_values<'a>(&'a self) -> impl Iterator<Item=u32> {\n    |                    ^^\n-help: you can add a bound to the return type to make it last less than `'static` and match the lifetime `'a` as defined on the method body at 10:20\n+help: you can add a bound to the returned `impl Trait` to make it last less than `'static` and match the lifetime `'a` as defined on the method body at 10:20\n    |\n LL |     fn iter_values<'a>(&'a self) -> impl Iterator<Item=u32> + 'a {\n-   |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                                                             ^^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "827163ef83cf7cf4c7f3fff461b0d28fce7d2333", "filename": "src/test/ui/issues/issue-16922.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65f492be121ee9901d8c4305629cf4f2ad88f6d8/src%2Ftest%2Fui%2Fissues%2Fissue-16922.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65f492be121ee9901d8c4305629cf4f2ad88f6d8/src%2Ftest%2Fui%2Fissues%2Fissue-16922.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-16922.rs?ref=65f492be121ee9901d8c4305629cf4f2ad88f6d8", "patch": "@@ -2,7 +2,7 @@ use std::any::Any;\n \n fn foo<T: Any>(value: &T) -> Box<dyn Any> {\n     Box::new(value) as Box<dyn Any>\n-    //~^ ERROR explicit lifetime required in the type of `value` [E0621]\n+    //~^ ERROR cannot infer an appropriate lifetime\n }\n \n fn main() {"}, {"sha": "8bcfe979ce1451be7966c900671e8d03b41aa161", "filename": "src/test/ui/issues/issue-16922.stderr", "status": "modified", "additions": 19, "deletions": 6, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/65f492be121ee9901d8c4305629cf4f2ad88f6d8/src%2Ftest%2Fui%2Fissues%2Fissue-16922.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/65f492be121ee9901d8c4305629cf4f2ad88f6d8/src%2Ftest%2Fui%2Fissues%2Fissue-16922.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-16922.stderr?ref=65f492be121ee9901d8c4305629cf4f2ad88f6d8", "patch": "@@ -1,11 +1,24 @@\n-error[E0621]: explicit lifetime required in the type of `value`\n-  --> $DIR/issue-16922.rs:4:5\n+error: cannot infer an appropriate lifetime\n+  --> $DIR/issue-16922.rs:4:14\n    |\n-LL | fn foo<T: Any>(value: &T) -> Box<dyn Any> {\n-   |                       -- help: add explicit lifetime `'static` to the type of `value`: `&'static T`\n LL |     Box::new(value) as Box<dyn Any>\n-   |     ^^^^^^^^^^^^^^^ lifetime `'static` required\n+   |     ---------^^^^^-\n+   |     |        |\n+   |     |        ...but this borrow...\n+   |     this evaluates to the `'static` lifetime...\n+   |\n+note: ...can't outlive the anonymous lifetime #1 defined on the function body at 3:1\n+  --> $DIR/issue-16922.rs:3:1\n+   |\n+LL | / fn foo<T: Any>(value: &T) -> Box<dyn Any> {\n+LL | |     Box::new(value) as Box<dyn Any>\n+LL | |\n+LL | | }\n+   | |_^\n+help: you can add a bound to the returned `dyn Trait` to make it last less than `'static` and match the anonymous lifetime #1 defined on the function body at 3:1\n+   |\n+LL | fn foo<T: Any>(value: &T) -> Box<dyn Any + '_> {\n+   |                                          ^^^^\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0621`."}, {"sha": "708ab1cf38297d2d3778de18bf1039063c09453c", "filename": "src/test/ui/object-lifetime/object-lifetime-default-from-box-error.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65f492be121ee9901d8c4305629cf4f2ad88f6d8/src%2Ftest%2Fui%2Fobject-lifetime%2Fobject-lifetime-default-from-box-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65f492be121ee9901d8c4305629cf4f2ad88f6d8/src%2Ftest%2Fui%2Fobject-lifetime%2Fobject-lifetime-default-from-box-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fobject-lifetime%2Fobject-lifetime-default-from-box-error.rs?ref=65f492be121ee9901d8c4305629cf4f2ad88f6d8", "patch": "@@ -15,7 +15,7 @@ fn load(ss: &mut SomeStruct) -> Box<dyn SomeTrait> {\n     // `Box<SomeTrait>` defaults to a `'static` bound, so this return\n     // is illegal.\n \n-    ss.r //~ ERROR explicit lifetime required in the type of `ss` [E0621]\n+    ss.r //~ ERROR cannot infer an appropriate lifetime\n }\n \n fn store(ss: &mut SomeStruct, b: Box<dyn SomeTrait>) {"}, {"sha": "7981d082c800874d294d63283fac2d83c21ed727", "filename": "src/test/ui/object-lifetime/object-lifetime-default-from-box-error.stderr", "status": "modified", "additions": 20, "deletions": 5, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/65f492be121ee9901d8c4305629cf4f2ad88f6d8/src%2Ftest%2Fui%2Fobject-lifetime%2Fobject-lifetime-default-from-box-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/65f492be121ee9901d8c4305629cf4f2ad88f6d8/src%2Ftest%2Fui%2Fobject-lifetime%2Fobject-lifetime-default-from-box-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fobject-lifetime%2Fobject-lifetime-default-from-box-error.stderr?ref=65f492be121ee9901d8c4305629cf4f2ad88f6d8", "patch": "@@ -1,11 +1,26 @@\n-error[E0621]: explicit lifetime required in the type of `ss`\n+error: cannot infer an appropriate lifetime\n   --> $DIR/object-lifetime-default-from-box-error.rs:18:5\n    |\n-LL | fn load(ss: &mut SomeStruct) -> Box<dyn SomeTrait> {\n-   |             --------------- help: add explicit lifetime `'static` to the type of `ss`: `&mut SomeStruct<'static>`\n-...\n LL |     ss.r\n-   |     ^^^^ lifetime `'static` required\n+   |     ^^^^\n+   |     |\n+   |     this evaluates to the `'static` lifetime...\n+   |     ...but this borrow...\n+   |\n+note: ...can't outlive the anonymous lifetime #2 defined on the function body at 14:1\n+  --> $DIR/object-lifetime-default-from-box-error.rs:14:1\n+   |\n+LL | / fn load(ss: &mut SomeStruct) -> Box<dyn SomeTrait> {\n+LL | |     // `Box<SomeTrait>` defaults to a `'static` bound, so this return\n+LL | |     // is illegal.\n+LL | |\n+LL | |     ss.r\n+LL | | }\n+   | |_^\n+help: you can add a bound to the returned `dyn Trait` to make it last less than `'static` and match the anonymous lifetime #2 defined on the function body at 14:1\n+   |\n+LL | fn load(ss: &mut SomeStruct) -> Box<dyn SomeTrait + '_> {\n+   |                                                   ^^^^\n \n error[E0621]: explicit lifetime required in the type of `ss`\n   --> $DIR/object-lifetime-default-from-box-error.rs:31:12"}, {"sha": "d56eaf77b6646fe2163dd211eb0d5bb31da2d34a", "filename": "src/test/ui/regions/region-object-lifetime-in-coercion.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/65f492be121ee9901d8c4305629cf4f2ad88f6d8/src%2Ftest%2Fui%2Fregions%2Fregion-object-lifetime-in-coercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65f492be121ee9901d8c4305629cf4f2ad88f6d8/src%2Ftest%2Fui%2Fregions%2Fregion-object-lifetime-in-coercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregion-object-lifetime-in-coercion.rs?ref=65f492be121ee9901d8c4305629cf4f2ad88f6d8", "patch": "@@ -11,20 +11,17 @@ fn a(v: &[u8]) -> Box<dyn Foo + 'static> {\n }\n \n fn b(v: &[u8]) -> Box<dyn Foo + 'static> {\n-    Box::new(v)\n-        //~^ ERROR explicit lifetime required in the type of `v` [E0621]\n+    Box::new(v) //~ ERROR explicit lifetime required in the type of `v` [E0621]\n }\n \n fn c(v: &[u8]) -> Box<dyn Foo> {\n     // same as previous case due to RFC 599\n \n-    Box::new(v)\n-        //~^ ERROR explicit lifetime required in the type of `v` [E0621]\n+    Box::new(v) //~ ERROR cannot infer an appropriate lifetime\n }\n \n fn d<'a,'b>(v: &'a [u8]) -> Box<dyn Foo+'b> {\n-    Box::new(v)\n-        //~^ ERROR cannot infer an appropriate lifetime due to conflicting\n+    Box::new(v) //~ ERROR cannot infer an appropriate lifetime due to conflicting\n }\n \n fn e<'a:'b,'b>(v: &'a [u8]) -> Box<dyn Foo+'b> {"}, {"sha": "8048b79b015d5cda5394593b15622b189f83e793", "filename": "src/test/ui/regions/region-object-lifetime-in-coercion.stderr", "status": "modified", "additions": 27, "deletions": 13, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/65f492be121ee9901d8c4305629cf4f2ad88f6d8/src%2Ftest%2Fui%2Fregions%2Fregion-object-lifetime-in-coercion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/65f492be121ee9901d8c4305629cf4f2ad88f6d8/src%2Ftest%2Fui%2Fregions%2Fregion-object-lifetime-in-coercion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregion-object-lifetime-in-coercion.stderr?ref=65f492be121ee9901d8c4305629cf4f2ad88f6d8", "patch": "@@ -14,40 +14,54 @@ LL | fn b(v: &[u8]) -> Box<dyn Foo + 'static> {\n LL |     Box::new(v)\n    |     ^^^^^^^^^^^ lifetime `'static` required\n \n-error[E0621]: explicit lifetime required in the type of `v`\n-  --> $DIR/region-object-lifetime-in-coercion.rs:21:5\n+error: cannot infer an appropriate lifetime\n+  --> $DIR/region-object-lifetime-in-coercion.rs:20:14\n    |\n-LL | fn c(v: &[u8]) -> Box<dyn Foo> {\n-   |         ----- help: add explicit lifetime `'static` to the type of `v`: `&'static [u8]`\n-...\n LL |     Box::new(v)\n-   |     ^^^^^^^^^^^ lifetime `'static` required\n+   |     ---------^-\n+   |     |        |\n+   |     |        ...but this borrow...\n+   |     this evaluates to the `'static` lifetime...\n+   |\n+note: ...can't outlive the anonymous lifetime #1 defined on the function body at 17:1\n+  --> $DIR/region-object-lifetime-in-coercion.rs:17:1\n+   |\n+LL | / fn c(v: &[u8]) -> Box<dyn Foo> {\n+LL | |     // same as previous case due to RFC 599\n+LL | |\n+LL | |     Box::new(v)\n+LL | | }\n+   | |_^\n+help: you can add a bound to the returned `dyn Trait` to make it last less than `'static` and match the anonymous lifetime #1 defined on the function body at 17:1\n+   |\n+LL | fn c(v: &[u8]) -> Box<dyn Foo + '_> {\n+   |                               ^^^^\n \n error[E0495]: cannot infer an appropriate lifetime due to conflicting requirements\n-  --> $DIR/region-object-lifetime-in-coercion.rs:26:14\n+  --> $DIR/region-object-lifetime-in-coercion.rs:24:14\n    |\n LL |     Box::new(v)\n    |              ^\n    |\n-note: first, the lifetime cannot outlive the lifetime `'a` as defined on the function body at 25:6...\n-  --> $DIR/region-object-lifetime-in-coercion.rs:25:6\n+note: first, the lifetime cannot outlive the lifetime `'a` as defined on the function body at 23:6...\n+  --> $DIR/region-object-lifetime-in-coercion.rs:23:6\n    |\n LL | fn d<'a,'b>(v: &'a [u8]) -> Box<dyn Foo+'b> {\n    |      ^^\n note: ...so that the expression is assignable\n-  --> $DIR/region-object-lifetime-in-coercion.rs:26:14\n+  --> $DIR/region-object-lifetime-in-coercion.rs:24:14\n    |\n LL |     Box::new(v)\n    |              ^\n    = note: expected `&[u8]`\n               found `&'a [u8]`\n-note: but, the lifetime must be valid for the lifetime `'b` as defined on the function body at 25:9...\n-  --> $DIR/region-object-lifetime-in-coercion.rs:25:9\n+note: but, the lifetime must be valid for the lifetime `'b` as defined on the function body at 23:9...\n+  --> $DIR/region-object-lifetime-in-coercion.rs:23:9\n    |\n LL | fn d<'a,'b>(v: &'a [u8]) -> Box<dyn Foo+'b> {\n    |         ^^\n note: ...so that the expression is assignable\n-  --> $DIR/region-object-lifetime-in-coercion.rs:26:5\n+  --> $DIR/region-object-lifetime-in-coercion.rs:24:5\n    |\n LL |     Box::new(v)\n    |     ^^^^^^^^^^^"}, {"sha": "fcde3bb5ca651d106c328749af2166e13cd8d347", "filename": "src/test/ui/self/arbitrary_self_types_pin_lifetime_impl_trait-async.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65f492be121ee9901d8c4305629cf4f2ad88f6d8/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait-async.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/65f492be121ee9901d8c4305629cf4f2ad88f6d8/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait-async.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait-async.stderr?ref=65f492be121ee9901d8c4305629cf4f2ad88f6d8", "patch": "@@ -2,7 +2,7 @@ error: cannot infer an appropriate lifetime\n   --> $DIR/arbitrary_self_types_pin_lifetime_impl_trait-async.rs:8:16\n    |\n LL |     async fn f(self: Pin<&Self>) -> impl Clone { self }\n-   |                ^^^^                 ---------- this return type evaluates to the `'static` lifetime...\n+   |                ^^^^                 ---------- this evaluates to the `'static` lifetime...\n    |                |\n    |                ...but this borrow...\n    |"}, {"sha": "c89ee27aa8cd7d94d475128c33aeb2f80f3ab84e", "filename": "src/test/ui/self/arbitrary_self_types_pin_lifetime_impl_trait.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/65f492be121ee9901d8c4305629cf4f2ad88f6d8/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/65f492be121ee9901d8c4305629cf4f2ad88f6d8/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait.stderr?ref=65f492be121ee9901d8c4305629cf4f2ad88f6d8", "patch": "@@ -4,17 +4,17 @@ error: cannot infer an appropriate lifetime\n LL |     fn f(self: Pin<&Self>) -> impl Clone { self }\n    |                               ----------   ^^^^ ...but this borrow...\n    |                               |\n-   |                               this return type evaluates to the `'static` lifetime...\n+   |                               this evaluates to the `'static` lifetime...\n    |\n note: ...can't outlive the anonymous lifetime #1 defined on the method body at 6:5\n   --> $DIR/arbitrary_self_types_pin_lifetime_impl_trait.rs:6:5\n    |\n LL |     fn f(self: Pin<&Self>) -> impl Clone { self }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-help: you can add a bound to the return type to make it last less than `'static` and match the anonymous lifetime #1 defined on the method body at 6:5\n+help: you can add a bound to the returned `impl Trait` to make it last less than `'static` and match the anonymous lifetime #1 defined on the method body at 6:5\n    |\n LL |     fn f(self: Pin<&Self>) -> impl Clone + '_ { self }\n-   |                               ^^^^^^^^^^^^^^^\n+   |                                          ^^^^\n \n error: aborting due to previous error\n "}, {"sha": "5a2530bdcbb208944fb0545334c47d7914dc79ac", "filename": "src/test/ui/suggestions/lifetimes/missing-lifetimes-in-signature.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/65f492be121ee9901d8c4305629cf4f2ad88f6d8/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Fmissing-lifetimes-in-signature.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/65f492be121ee9901d8c4305629cf4f2ad88f6d8/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Fmissing-lifetimes-in-signature.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Fmissing-lifetimes-in-signature.stderr?ref=65f492be121ee9901d8c4305629cf4f2ad88f6d8", "patch": "@@ -10,7 +10,7 @@ error: cannot infer an appropriate lifetime\n   --> $DIR/missing-lifetimes-in-signature.rs:19:5\n    |\n LL |   fn foo<G, T>(g: G, dest: &mut T) -> impl FnOnce()\n-   |                                       ------------- this return type evaluates to the `'static` lifetime...\n+   |                                       ------------- this evaluates to the `'static` lifetime...\n ...\n LL | /     move || {\n LL | |         *dest = g.get();\n@@ -28,10 +28,10 @@ LL | | {\n LL | |     }\n LL | | }\n    | |_^\n-help: you can add a bound to the return type to make it last less than `'static` and match the anonymous lifetime #1 defined on the function body at 15:1\n+help: you can add a bound to the returned `impl Trait` to make it last less than `'static` and match the anonymous lifetime #1 defined on the function body at 15:1\n    |\n LL | fn foo<G, T>(g: G, dest: &mut T) -> impl FnOnce() + '_\n-   |                                     ^^^^^^^^^^^^^^^^^^\n+   |                                                   ^^^^\n \n error[E0311]: the parameter type `G` may not live long enough\n   --> $DIR/missing-lifetimes-in-signature.rs:25:37"}, {"sha": "d5aa18eb0f4e75f0e4c5969418ac03703d7f8fa4", "filename": "src/test/ui/underscore-lifetime/dyn-trait-underscore.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65f492be121ee9901d8c4305629cf4f2ad88f6d8/src%2Ftest%2Fui%2Funderscore-lifetime%2Fdyn-trait-underscore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65f492be121ee9901d8c4305629cf4f2ad88f6d8/src%2Ftest%2Fui%2Funderscore-lifetime%2Fdyn-trait-underscore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funderscore-lifetime%2Fdyn-trait-underscore.rs?ref=65f492be121ee9901d8c4305629cf4f2ad88f6d8", "patch": "@@ -5,7 +5,7 @@\n \n fn a<T>(items: &[T]) -> Box<dyn Iterator<Item=&T>> {\n     //                      ^^^^^^^^^^^^^^^^^^^^^ bound *here* defaults to `'static`\n-    Box::new(items.iter()) //~ ERROR explicit lifetime required in the type of `items`\n+    Box::new(items.iter()) //~ ERROR cannot infer an appropriate lifetime\n }\n \n fn b<T>(items: &[T]) -> Box<dyn Iterator<Item=&T> + '_> {"}, {"sha": "65714d16a81dd6fbb2a9bc4ea88c63407b9f4eff", "filename": "src/test/ui/underscore-lifetime/dyn-trait-underscore.stderr", "status": "modified", "additions": 19, "deletions": 7, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/65f492be121ee9901d8c4305629cf4f2ad88f6d8/src%2Ftest%2Fui%2Funderscore-lifetime%2Fdyn-trait-underscore.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/65f492be121ee9901d8c4305629cf4f2ad88f6d8/src%2Ftest%2Fui%2Funderscore-lifetime%2Fdyn-trait-underscore.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funderscore-lifetime%2Fdyn-trait-underscore.stderr?ref=65f492be121ee9901d8c4305629cf4f2ad88f6d8", "patch": "@@ -1,12 +1,24 @@\n-error[E0621]: explicit lifetime required in the type of `items`\n-  --> $DIR/dyn-trait-underscore.rs:8:5\n+error: cannot infer an appropriate lifetime\n+  --> $DIR/dyn-trait-underscore.rs:8:20\n    |\n-LL | fn a<T>(items: &[T]) -> Box<dyn Iterator<Item=&T>> {\n-   |                ---- help: add explicit lifetime `'static` to the type of `items`: `&'static [T]`\n-LL |     //                      ^^^^^^^^^^^^^^^^^^^^^ bound *here* defaults to `'static`\n LL |     Box::new(items.iter())\n-   |     ^^^^^^^^^^^^^^^^^^^^^^ lifetime `'static` required\n+   |     ---------------^^^^---\n+   |     |        |\n+   |     |        ...but this borrow...\n+   |     this evaluates to the `'static` lifetime...\n+   |\n+note: ...can't outlive the anonymous lifetime #1 defined on the function body at 6:1\n+  --> $DIR/dyn-trait-underscore.rs:6:1\n+   |\n+LL | / fn a<T>(items: &[T]) -> Box<dyn Iterator<Item=&T>> {\n+LL | |     //                      ^^^^^^^^^^^^^^^^^^^^^ bound *here* defaults to `'static`\n+LL | |     Box::new(items.iter())\n+LL | | }\n+   | |_^\n+help: you can add a bound to the returned `dyn Trait` to make it last less than `'static` and match the anonymous lifetime #1 defined on the function body at 6:1\n+   |\n+LL | fn a<T>(items: &[T]) -> Box<dyn Iterator<Item=&T> + '_> {\n+   |                                                   ^^^^\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0621`."}]}