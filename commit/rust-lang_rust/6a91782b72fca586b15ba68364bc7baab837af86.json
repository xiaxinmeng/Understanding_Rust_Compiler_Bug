{"sha": "6a91782b72fca586b15ba68364bc7baab837af86", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZhOTE3ODJiNzJmY2E1ODZiMTViYTY4MzY0YmM3YmFhYjgzN2FmODY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-08-06T17:19:05Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-08-06T17:19:05Z"}, "message": "Auto merge of #61515 - shepmaster:boxed-slice-to-array, r=cramertj\n\nAdd implementations for converting boxed slices into boxed arrays\n\nThis mirrors the implementations of reference slices into arrays.\n\n# Discussion\n\n- [x] Should we use const generics? ([probably not](https://github.com/rust-lang/rust/pull/61515#issuecomment-498690649))\n- [ ] [What's the safety rationale here](https://github.com/rust-lang/rust/pull/61515#discussion_r290296613)?\n- [ ] [Should the errors return the original object](https://github.com/rust-lang/rust/pull/61515#discussion_r290336592)?\n\n# Remaining\n\n- [ ] Implement `Error`\n- [ ] Create a tracking issue", "tree": {"sha": "c2d7defbb6eeffcdbd391b6e22331ba8885198fe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c2d7defbb6eeffcdbd391b6e22331ba8885198fe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6a91782b72fca586b15ba68364bc7baab837af86", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6a91782b72fca586b15ba68364bc7baab837af86", "html_url": "https://github.com/rust-lang/rust/commit/6a91782b72fca586b15ba68364bc7baab837af86", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6a91782b72fca586b15ba68364bc7baab837af86/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "188ab5c976a5696ac710b7ba78849ef5dcf0235a", "url": "https://api.github.com/repos/rust-lang/rust/commits/188ab5c976a5696ac710b7ba78849ef5dcf0235a", "html_url": "https://github.com/rust-lang/rust/commit/188ab5c976a5696ac710b7ba78849ef5dcf0235a"}, {"sha": "32324d22c33dda31eadf49c5f27d6e6ff38a3ef1", "url": "https://api.github.com/repos/rust-lang/rust/commits/32324d22c33dda31eadf49c5f27d6e6ff38a3ef1", "html_url": "https://github.com/rust-lang/rust/commit/32324d22c33dda31eadf49c5f27d6e6ff38a3ef1"}], "stats": {"total": 201, "additions": 195, "deletions": 6}, "files": [{"sha": "c92db517cad36111453dee9fa7676fef5bfb96c7", "filename": "src/liballoc/boxed.rs", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/6a91782b72fca586b15ba68364bc7baab837af86/src%2Fliballoc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a91782b72fca586b15ba68364bc7baab837af86/src%2Fliballoc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fboxed.rs?ref=6a91782b72fca586b15ba68364bc7baab837af86", "patch": "@@ -76,9 +76,10 @@\n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n use core::any::Any;\n+use core::array::LengthAtMost32;\n use core::borrow;\n use core::cmp::Ordering;\n-use core::convert::From;\n+use core::convert::{From, TryFrom};\n use core::fmt;\n use core::future::Future;\n use core::hash::{Hash, Hasher};\n@@ -612,6 +613,22 @@ impl From<Box<str>> for Box<[u8]> {\n     }\n }\n \n+#[unstable(feature = \"boxed_slice_try_from\", issue = \"0\")]\n+impl<T, const N: usize> TryFrom<Box<[T]>> for Box<[T; N]>\n+where\n+    [T; N]: LengthAtMost32,\n+{\n+    type Error = Box<[T]>;\n+\n+    fn try_from(boxed_slice: Box<[T]>) -> Result<Self, Self::Error> {\n+        if boxed_slice.len() == N {\n+            Ok(unsafe { Box::from_raw(Box::into_raw(boxed_slice) as *mut [T; N]) })\n+        } else {\n+            Err(boxed_slice)\n+        }\n+    }\n+}\n+\n impl Box<dyn Any> {\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "deea74daa52d57ca4b74579e0f746ecc8ed60b67", "filename": "src/liballoc/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a91782b72fca586b15ba68364bc7baab837af86/src%2Fliballoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a91782b72fca586b15ba68364bc7baab837af86/src%2Fliballoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Flib.rs?ref=6a91782b72fca586b15ba68364bc7baab837af86", "patch": "@@ -82,9 +82,9 @@\n #![feature(box_syntax)]\n #![feature(cfg_target_has_atomic)]\n #![feature(coerce_unsized)]\n-#![cfg_attr(not(bootstrap), feature(const_in_array_repeat_expressions))]\n #![feature(const_generic_impls_guard)]\n #![feature(const_generics)]\n+#![cfg_attr(not(bootstrap), feature(const_in_array_repeat_expressions))]\n #![feature(dispatch_from_dyn)]\n #![feature(core_intrinsics)]\n #![feature(dropck_eyepatch)]"}, {"sha": "0c406a92029a78de30d5a255bd689f037266e327", "filename": "src/liballoc/rc.rs", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/6a91782b72fca586b15ba68364bc7baab837af86/src%2Fliballoc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a91782b72fca586b15ba68364bc7baab837af86/src%2Fliballoc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Frc.rs?ref=6a91782b72fca586b15ba68364bc7baab837af86", "patch": "@@ -232,6 +232,7 @@ use crate::boxed::Box;\n use std::boxed::Box;\n \n use core::any::Any;\n+use core::array::LengthAtMost32;\n use core::borrow;\n use core::cell::Cell;\n use core::cmp::Ordering;\n@@ -245,7 +246,7 @@ use core::ops::{Deref, Receiver, CoerceUnsized, DispatchFromDyn};\n use core::pin::Pin;\n use core::ptr::{self, NonNull};\n use core::slice::{self, from_raw_parts_mut};\n-use core::convert::From;\n+use core::convert::{From, TryFrom};\n use core::usize;\n \n use crate::alloc::{Global, Alloc, Layout, box_free, handle_alloc_error};\n@@ -1257,6 +1258,22 @@ impl<T> From<Vec<T>> for Rc<[T]> {\n     }\n }\n \n+#[unstable(feature = \"boxed_slice_try_from\", issue = \"0\")]\n+impl<T, const N: usize> TryFrom<Rc<[T]>> for Rc<[T; N]>\n+where\n+    [T; N]: LengthAtMost32,\n+{\n+    type Error = Rc<[T]>;\n+\n+    fn try_from(boxed_slice: Rc<[T]>) -> Result<Self, Self::Error> {\n+        if boxed_slice.len() == N {\n+            Ok(unsafe { Rc::from_raw(Rc::into_raw(boxed_slice) as *mut [T; N]) })\n+        } else {\n+            Err(boxed_slice)\n+        }\n+    }\n+}\n+\n #[stable(feature = \"shared_from_iter\", since = \"1.37.0\")]\n impl<T> iter::FromIterator<T> for Rc<[T]> {\n     /// Takes each element in the `Iterator` and collects it into an `Rc<[T]>`."}, {"sha": "6fd3f909357141120289b6e50bd65051636feefd", "filename": "src/liballoc/rc/tests.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/6a91782b72fca586b15ba68364bc7baab837af86/src%2Fliballoc%2Frc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a91782b72fca586b15ba68364bc7baab837af86/src%2Fliballoc%2Frc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Frc%2Ftests.rs?ref=6a91782b72fca586b15ba68364bc7baab837af86", "patch": "@@ -6,7 +6,7 @@ use std::option::Option::{self, None, Some};\n use std::result::Result::{Err, Ok};\n use std::mem::drop;\n use std::clone::Clone;\n-use std::convert::From;\n+use std::convert::{From, TryInto};\n \n #[test]\n fn test_clone() {\n@@ -425,3 +425,15 @@ fn test_downcast() {\n     assert!(r2str.is_ok());\n     assert_eq!(r2str.unwrap(), Rc::new(\"abc\"));\n }\n+\n+#[test]\n+fn test_array_from_slice() {\n+    let v = vec![1, 2, 3];\n+    let r: Rc<[u32]> = Rc::from(v);\n+\n+    let a: Result<Rc<[u32; 3]>, _> = r.clone().try_into();\n+    assert!(a.is_ok());\n+\n+    let a: Result<Rc<[u32; 2]>, _> = r.clone().try_into();\n+    assert!(a.is_err());\n+}"}, {"sha": "7d3b2656a7b907b491c1d1e7ca8b9ef733453b87", "filename": "src/liballoc/sync.rs", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/6a91782b72fca586b15ba68364bc7baab837af86/src%2Fliballoc%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a91782b72fca586b15ba68364bc7baab837af86/src%2Fliballoc%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fsync.rs?ref=6a91782b72fca586b15ba68364bc7baab837af86", "patch": "@@ -7,6 +7,7 @@\n //! [arc]: struct.Arc.html\n \n use core::any::Any;\n+use core::array::LengthAtMost32;\n use core::sync::atomic;\n use core::sync::atomic::Ordering::{Acquire, Relaxed, Release, SeqCst};\n use core::borrow;\n@@ -21,7 +22,7 @@ use core::ptr::{self, NonNull};\n use core::marker::{Unpin, Unsize, PhantomData};\n use core::hash::{Hash, Hasher};\n use core::{isize, usize};\n-use core::convert::From;\n+use core::convert::{From, TryFrom};\n use core::slice::{self, from_raw_parts_mut};\n \n use crate::alloc::{Global, Alloc, Layout, box_free, handle_alloc_error};\n@@ -1826,6 +1827,22 @@ impl<T> From<Vec<T>> for Arc<[T]> {\n     }\n }\n \n+#[unstable(feature = \"boxed_slice_try_from\", issue = \"0\")]\n+impl<T, const N: usize> TryFrom<Arc<[T]>> for Arc<[T; N]>\n+where\n+    [T; N]: LengthAtMost32,\n+{\n+    type Error = Arc<[T]>;\n+\n+    fn try_from(boxed_slice: Arc<[T]>) -> Result<Self, Self::Error> {\n+        if boxed_slice.len() == N {\n+            Ok(unsafe { Arc::from_raw(Arc::into_raw(boxed_slice) as *mut [T; N]) })\n+        } else {\n+            Err(boxed_slice)\n+        }\n+    }\n+}\n+\n #[stable(feature = \"shared_from_iter\", since = \"1.37.0\")]\n impl<T> iter::FromIterator<T> for Arc<[T]> {\n     /// Takes each element in the `Iterator` and collects it into an `Arc<[T]>`."}, {"sha": "9220f5e0333efa431570f50ca56663d1c1400c4a", "filename": "src/liballoc/sync/tests.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/6a91782b72fca586b15ba68364bc7baab837af86/src%2Fliballoc%2Fsync%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a91782b72fca586b15ba68364bc7baab837af86/src%2Fliballoc%2Fsync%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fsync%2Ftests.rs?ref=6a91782b72fca586b15ba68364bc7baab837af86", "patch": "@@ -9,7 +9,7 @@ use std::option::Option::{self, None, Some};\n use std::sync::atomic::{self, Ordering::{Acquire, SeqCst}};\n use std::thread;\n use std::sync::Mutex;\n-use std::convert::From;\n+use std::convert::{From, TryInto};\n \n use crate::vec::Vec;\n \n@@ -478,3 +478,15 @@ fn test_downcast() {\n     assert!(r2str.is_ok());\n     assert_eq!(r2str.unwrap(), Arc::new(\"abc\"));\n }\n+\n+#[test]\n+fn test_array_from_slice() {\n+    let v = vec![1, 2, 3];\n+    let r: Arc<[u32]> = Arc::from(v);\n+\n+    let a: Result<Arc<[u32; 3]>, _> = r.clone().try_into();\n+    assert!(a.is_ok());\n+\n+    let a: Result<Arc<[u32; 2]>, _> = r.clone().try_into();\n+    assert!(a.is_err());\n+}"}, {"sha": "ed46ba8a1b938249dbb3abfa93e67c952d77d7ff", "filename": "src/liballoc/tests.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/6a91782b72fca586b15ba68364bc7baab837af86/src%2Fliballoc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a91782b72fca586b15ba68364bc7baab837af86/src%2Fliballoc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests.rs?ref=6a91782b72fca586b15ba68364bc7baab837af86", "patch": "@@ -1,6 +1,7 @@\n //! Test for `boxed` mod.\n \n use core::any::Any;\n+use core::convert::TryInto;\n use core::ops::Deref;\n use core::result::Result::{Err, Ok};\n use core::clone::Clone;\n@@ -138,3 +139,15 @@ fn boxed_slice_from_iter() {\n     assert_eq!(boxed.len(), 100);\n     assert_eq!(boxed[7], 7);\n }\n+\n+#[test]\n+fn test_array_from_slice() {\n+    let v = vec![1, 2, 3];\n+    let r: Box<[u32]> = v.into_boxed_slice();\n+\n+    let a: Result<Box<[u32; 3]>, _> = r.clone().try_into();\n+    assert!(a.is_ok());\n+\n+    let a: Result<Box<[u32; 2]>, _> = r.clone().try_into();\n+    assert!(a.is_err());\n+}"}, {"sha": "3a23b9b5832c07c3b63cfc4ce7b9ecb073042d99", "filename": "src/test/ui/const-generics/array-impls/alloc-types-no-impls-length-33.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/6a91782b72fca586b15ba68364bc7baab837af86/src%2Ftest%2Fui%2Fconst-generics%2Farray-impls%2Falloc-types-no-impls-length-33.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a91782b72fca586b15ba68364bc7baab837af86/src%2Ftest%2Fui%2Fconst-generics%2Farray-impls%2Falloc-types-no-impls-length-33.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Farray-impls%2Falloc-types-no-impls-length-33.rs?ref=6a91782b72fca586b15ba68364bc7baab837af86", "patch": "@@ -0,0 +1,26 @@\n+// ignore-tidy-linelength\n+\n+use std::{convert::TryFrom, rc::Rc, sync::Arc};\n+\n+pub fn no_box() {\n+    let boxed_slice = Box::new([0; 33]) as Box<[i32]>;\n+    let boxed_array = <Box<[i32; 33]>>::try_from(boxed_slice);\n+    //~^ ERROR the trait bound `std::boxed::Box<[i32; 33]>: std::convert::From<std::boxed::Box<[i32]>>` is not satisfied\n+    //~^^ ERROR the trait bound `std::boxed::Box<[i32; 33]>: std::convert::TryFrom<std::boxed::Box<[i32]>>` is not satisfied\n+}\n+\n+pub fn no_rc() {\n+    let boxed_slice = Rc::new([0; 33]) as Rc<[i32]>;\n+    let boxed_array = <Rc<[i32; 33]>>::try_from(boxed_slice);\n+    //~^ ERROR the trait bound `std::rc::Rc<[i32; 33]>: std::convert::From<std::rc::Rc<[i32]>>` is not satisfied\n+    //~^^ ERROR the trait bound `std::rc::Rc<[i32; 33]>: std::convert::TryFrom<std::rc::Rc<[i32]>>` is not satisfied\n+}\n+\n+pub fn no_arc() {\n+    let boxed_slice = Arc::new([0; 33]) as Arc<[i32]>;\n+    let boxed_array = <Arc<[i32; 33]>>::try_from(boxed_slice);\n+    //~^ ERROR the trait bound `std::sync::Arc<[i32; 33]>: std::convert::From<std::sync::Arc<[i32]>>` is not satisfied\n+    //~^^ ERROR the trait bound `std::sync::Arc<[i32; 33]>: std::convert::TryFrom<std::sync::Arc<[i32]>>` is not satisfied\n+}\n+\n+fn main() {}"}, {"sha": "193fb4c4374a4d4104735e5ec9dbfe2d9114a6b0", "filename": "src/test/ui/const-generics/array-impls/alloc-types-no-impls-length-33.stderr", "status": "added", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/6a91782b72fca586b15ba68364bc7baab837af86/src%2Ftest%2Fui%2Fconst-generics%2Farray-impls%2Falloc-types-no-impls-length-33.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6a91782b72fca586b15ba68364bc7baab837af86/src%2Ftest%2Fui%2Fconst-generics%2Farray-impls%2Falloc-types-no-impls-length-33.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Farray-impls%2Falloc-types-no-impls-length-33.stderr?ref=6a91782b72fca586b15ba68364bc7baab837af86", "patch": "@@ -0,0 +1,75 @@\n+error[E0277]: the trait bound `std::boxed::Box<[i32; 33]>: std::convert::From<std::boxed::Box<[i32]>>` is not satisfied\n+  --> $DIR/alloc-types-no-impls-length-33.rs:7:23\n+   |\n+LL |     let boxed_array = <Box<[i32; 33]>>::try_from(boxed_slice);\n+   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::convert::From<std::boxed::Box<[i32]>>` is not implemented for `std::boxed::Box<[i32; 33]>`\n+   |\n+   = help: the following implementations were found:\n+             <std::boxed::Box<(dyn std::error::Error + 'a)> as std::convert::From<E>>\n+             <std::boxed::Box<(dyn std::error::Error + 'static)> as std::convert::From<&str>>\n+             <std::boxed::Box<(dyn std::error::Error + 'static)> as std::convert::From<std::borrow::Cow<'a, str>>>\n+             <std::boxed::Box<(dyn std::error::Error + 'static)> as std::convert::From<std::string::String>>\n+           and 16 others\n+   = note: required because of the requirements on the impl of `std::convert::Into<std::boxed::Box<[i32; 33]>>` for `std::boxed::Box<[i32]>`\n+   = note: required because of the requirements on the impl of `std::convert::TryFrom<std::boxed::Box<[i32]>>` for `std::boxed::Box<[i32; 33]>`\n+\n+error[E0277]: the trait bound `std::boxed::Box<[i32; 33]>: std::convert::TryFrom<std::boxed::Box<[i32]>>` is not satisfied\n+  --> $DIR/alloc-types-no-impls-length-33.rs:7:23\n+   |\n+LL |     let boxed_array = <Box<[i32; 33]>>::try_from(boxed_slice);\n+   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::convert::TryFrom<std::boxed::Box<[i32]>>` is not implemented for `std::boxed::Box<[i32; 33]>`\n+   |\n+   = help: the following implementations were found:\n+             <std::boxed::Box<[T; _]> as std::convert::TryFrom<std::boxed::Box<[T]>>>\n+\n+error[E0277]: the trait bound `std::rc::Rc<[i32; 33]>: std::convert::From<std::rc::Rc<[i32]>>` is not satisfied\n+  --> $DIR/alloc-types-no-impls-length-33.rs:14:23\n+   |\n+LL |     let boxed_array = <Rc<[i32; 33]>>::try_from(boxed_slice);\n+   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::convert::From<std::rc::Rc<[i32]>>` is not implemented for `std::rc::Rc<[i32; 33]>`\n+   |\n+   = help: the following implementations were found:\n+             <std::rc::Rc<T> as std::convert::From<T>>\n+             <std::rc::Rc<T> as std::convert::From<std::boxed::Box<T>>>\n+             <std::rc::Rc<[T]> as std::convert::From<&[T]>>\n+             <std::rc::Rc<[T]> as std::convert::From<std::vec::Vec<T>>>\n+           and 8 others\n+   = note: required because of the requirements on the impl of `std::convert::Into<std::rc::Rc<[i32; 33]>>` for `std::rc::Rc<[i32]>`\n+   = note: required because of the requirements on the impl of `std::convert::TryFrom<std::rc::Rc<[i32]>>` for `std::rc::Rc<[i32; 33]>`\n+\n+error[E0277]: the trait bound `std::rc::Rc<[i32; 33]>: std::convert::TryFrom<std::rc::Rc<[i32]>>` is not satisfied\n+  --> $DIR/alloc-types-no-impls-length-33.rs:14:23\n+   |\n+LL |     let boxed_array = <Rc<[i32; 33]>>::try_from(boxed_slice);\n+   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::convert::TryFrom<std::rc::Rc<[i32]>>` is not implemented for `std::rc::Rc<[i32; 33]>`\n+   |\n+   = help: the following implementations were found:\n+             <std::rc::Rc<[T; _]> as std::convert::TryFrom<std::rc::Rc<[T]>>>\n+\n+error[E0277]: the trait bound `std::sync::Arc<[i32; 33]>: std::convert::From<std::sync::Arc<[i32]>>` is not satisfied\n+  --> $DIR/alloc-types-no-impls-length-33.rs:21:23\n+   |\n+LL |     let boxed_array = <Arc<[i32; 33]>>::try_from(boxed_slice);\n+   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::convert::From<std::sync::Arc<[i32]>>` is not implemented for `std::sync::Arc<[i32; 33]>`\n+   |\n+   = help: the following implementations were found:\n+             <std::sync::Arc<T> as std::convert::From<T>>\n+             <std::sync::Arc<T> as std::convert::From<std::boxed::Box<T>>>\n+             <std::sync::Arc<[T]> as std::convert::From<&[T]>>\n+             <std::sync::Arc<[T]> as std::convert::From<std::vec::Vec<T>>>\n+           and 8 others\n+   = note: required because of the requirements on the impl of `std::convert::Into<std::sync::Arc<[i32; 33]>>` for `std::sync::Arc<[i32]>`\n+   = note: required because of the requirements on the impl of `std::convert::TryFrom<std::sync::Arc<[i32]>>` for `std::sync::Arc<[i32; 33]>`\n+\n+error[E0277]: the trait bound `std::sync::Arc<[i32; 33]>: std::convert::TryFrom<std::sync::Arc<[i32]>>` is not satisfied\n+  --> $DIR/alloc-types-no-impls-length-33.rs:21:23\n+   |\n+LL |     let boxed_array = <Arc<[i32; 33]>>::try_from(boxed_slice);\n+   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::convert::TryFrom<std::sync::Arc<[i32]>>` is not implemented for `std::sync::Arc<[i32; 33]>`\n+   |\n+   = help: the following implementations were found:\n+             <std::sync::Arc<[T; _]> as std::convert::TryFrom<std::sync::Arc<[T]>>>\n+\n+error: aborting due to 6 previous errors\n+\n+For more information about this error, try `rustc --explain E0277`."}]}