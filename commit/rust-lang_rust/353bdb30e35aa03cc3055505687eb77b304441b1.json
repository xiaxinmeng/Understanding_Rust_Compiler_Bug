{"sha": "353bdb30e35aa03cc3055505687eb77b304441b1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM1M2JkYjMwZTM1YWEwM2NjMzA1NTUwNTY4N2ViNzdiMzA0NDQxYjE=", "commit": {"author": {"name": "Corey Farwell", "email": "coreyf@rwell.org", "date": "2017-04-18T18:05:42Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-04-18T18:05:42Z"}, "message": "Rollup merge of #40290 - 3Hren:master, r=aturon\n\nAdd `as_bytes()` for `FromUtf8Error`.\n\nThis change allows to obtain an underlying invalid UTF-8 bytes without `FromUtf8Error` destruction. Such method may be useful for example in a library that attempts to save both valid and invalid UTF-8 strings in some struct and to be able to provide immutable access to it without destruction.\n\nPersonally without this change I ended with `Result<String, (Vec<u8>, Utf8Error)`, which almost copies the functionality of `FromUtf8Error`, but allows immutable view access.", "tree": {"sha": "81327e3b29267a72de6973f2a15b56b879c4ab26", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/81327e3b29267a72de6973f2a15b56b879c4ab26"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/353bdb30e35aa03cc3055505687eb77b304441b1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/353bdb30e35aa03cc3055505687eb77b304441b1", "html_url": "https://github.com/rust-lang/rust/commit/353bdb30e35aa03cc3055505687eb77b304441b1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/353bdb30e35aa03cc3055505687eb77b304441b1/comments", "author": {"login": "frewsxcv", "id": 416575, "node_id": "MDQ6VXNlcjQxNjU3NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/416575?v=4", "gravatar_id": "", "url": "https://api.github.com/users/frewsxcv", "html_url": "https://github.com/frewsxcv", "followers_url": "https://api.github.com/users/frewsxcv/followers", "following_url": "https://api.github.com/users/frewsxcv/following{/other_user}", "gists_url": "https://api.github.com/users/frewsxcv/gists{/gist_id}", "starred_url": "https://api.github.com/users/frewsxcv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/frewsxcv/subscriptions", "organizations_url": "https://api.github.com/users/frewsxcv/orgs", "repos_url": "https://api.github.com/users/frewsxcv/repos", "events_url": "https://api.github.com/users/frewsxcv/events{/privacy}", "received_events_url": "https://api.github.com/users/frewsxcv/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c398efc53f09f6e1a8cba4ec2259ffb9d89f0542", "url": "https://api.github.com/repos/rust-lang/rust/commits/c398efc53f09f6e1a8cba4ec2259ffb9d89f0542", "html_url": "https://github.com/rust-lang/rust/commit/c398efc53f09f6e1a8cba4ec2259ffb9d89f0542"}, {"sha": "bbdf190c6a2d5bc095c8d3addff0868395bff31f", "url": "https://api.github.com/repos/rust-lang/rust/commits/bbdf190c6a2d5bc095c8d3addff0868395bff31f", "html_url": "https://github.com/rust-lang/rust/commit/bbdf190c6a2d5bc095c8d3addff0868395bff31f"}], "stats": {"total": 28, "additions": 28, "deletions": 0}, "files": [{"sha": "36999eb143ff40b66483f82d7808931d3c2a575d", "filename": "src/doc/unstable-book/src/SUMMARY.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/353bdb30e35aa03cc3055505687eb77b304441b1/src%2Fdoc%2Funstable-book%2Fsrc%2FSUMMARY.md", "raw_url": "https://github.com/rust-lang/rust/raw/353bdb30e35aa03cc3055505687eb77b304441b1/src%2Fdoc%2Funstable-book%2Fsrc%2FSUMMARY.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2FSUMMARY.md?ref=353bdb30e35aa03cc3055505687eb77b304441b1", "patch": "@@ -79,6 +79,7 @@\n - [fmt_internals](fmt-internals.md)\n - [fn_traits](fn-traits.md)\n - [fnbox](fnbox.md)\n+- [from_utf8_error_as_bytes](from_utf8_error_as_bytes.md)\n - [fundamental](fundamental.md)\n - [fused](fused.md)\n - [future_atomic_orderings](future-atomic-orderings.md)"}, {"sha": "570f779417f0980056664c3569c33a8b57c134db", "filename": "src/doc/unstable-book/src/from_utf8_error_as_bytes.md", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/353bdb30e35aa03cc3055505687eb77b304441b1/src%2Fdoc%2Funstable-book%2Fsrc%2Ffrom_utf8_error_as_bytes.md", "raw_url": "https://github.com/rust-lang/rust/raw/353bdb30e35aa03cc3055505687eb77b304441b1/src%2Fdoc%2Funstable-book%2Fsrc%2Ffrom_utf8_error_as_bytes.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Ffrom_utf8_error_as_bytes.md?ref=353bdb30e35aa03cc3055505687eb77b304441b1", "patch": "@@ -0,0 +1,7 @@\n+# `from_utf8_error_as_bytes`\n+\n+The tracking issue for this feature is: [#40895]\n+\n+[#40895]: https://github.com/rust-lang/rust/issues/40895\n+\n+------------------------"}, {"sha": "8d6cf30511260b64ad83b54fecf1487b2f8dfd75", "filename": "src/libcollections/string.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/353bdb30e35aa03cc3055505687eb77b304441b1/src%2Flibcollections%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/353bdb30e35aa03cc3055505687eb77b304441b1/src%2Flibcollections%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstring.rs?ref=353bdb30e35aa03cc3055505687eb77b304441b1", "patch": "@@ -1403,6 +1403,26 @@ impl String {\n }\n \n impl FromUtf8Error {\n+    /// Returns a slice of [`u8`]s bytes that were attempted to convert to a `String`.\n+    ///\n+    /// # Examples\n+    ///\n+    /// Basic usage:\n+    ///\n+    /// ```\n+    /// #![feature(from_utf8_error_as_bytes)]\n+    /// // some invalid bytes, in a vector\n+    /// let bytes = vec![0, 159];\n+    ///\n+    /// let value = String::from_utf8(bytes);\n+    ///\n+    /// assert_eq!(&[0, 159], value.unwrap_err().as_bytes());\n+    /// ```\n+    #[unstable(feature = \"from_utf8_error_as_bytes\", reason = \"recently added\", issue = \"40895\")]\n+    pub fn as_bytes(&self) -> &[u8] {\n+        &self.bytes[..]\n+    }\n+\n     /// Returns the bytes that were attempted to convert to a `String`.\n     ///\n     /// This method is carefully constructed to avoid allocation. It will"}]}