{"sha": "df016dc4bf2efd3f4e0f9d67dda1875453c705b2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRmMDE2ZGM0YmYyZWZkM2Y0ZTBmOWQ2N2RkYTE4NzU0NTNjNzA1YjI=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2013-08-11T17:58:01Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2013-08-11T18:01:23Z"}, "message": "Update type visitor to use &Visitor and not @Visitor", "tree": {"sha": "e796fba2181a9c95e27c66710a3eb2cf47c223b0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e796fba2181a9c95e27c66710a3eb2cf47c223b0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/df016dc4bf2efd3f4e0f9d67dda1875453c705b2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/df016dc4bf2efd3f4e0f9d67dda1875453c705b2", "html_url": "https://github.com/rust-lang/rust/commit/df016dc4bf2efd3f4e0f9d67dda1875453c705b2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/df016dc4bf2efd3f4e0f9d67dda1875453c705b2/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "66b8ad58671ef174c5051cc662d4e956be374f2f", "url": "https://api.github.com/repos/rust-lang/rust/commits/66b8ad58671ef174c5051cc662d4e956be374f2f", "html_url": "https://github.com/rust-lang/rust/commit/66b8ad58671ef174c5051cc662d4e956be374f2f"}], "stats": {"total": 49, "additions": 37, "deletions": 12}, "files": [{"sha": "4f894deb1a1c19eed3d692569ea876997395a246", "filename": "src/librustc/middle/trans/glue.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/df016dc4bf2efd3f4e0f9d67dda1875453c705b2/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df016dc4bf2efd3f4e0f9d67dda1875453c705b2/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs?ref=df016dc4bf2efd3f4e0f9d67dda1875453c705b2", "patch": "@@ -348,7 +348,8 @@ pub fn make_visit_glue(bcx: @mut Block, v: ValueRef, t: ty::t) -> @mut Block {\n     let _icx = push_ctxt(\"make_visit_glue\");\n     do with_scope(bcx, None, \"visitor cleanup\") |bcx| {\n         let mut bcx = bcx;\n-        let (visitor_trait, object_ty) = match ty::visitor_object_ty(bcx.tcx()){\n+        let (visitor_trait, object_ty) = match ty::visitor_object_ty(bcx.tcx(),\n+                                                                     ty::re_static) {\n             Ok(pair) => pair,\n             Err(s) => {\n                 bcx.tcx().sess.fatal(s);"}, {"sha": "fe5f8cd70ef19ba1d7f366c9373067b183634024", "filename": "src/librustc/middle/trans/reflect.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/df016dc4bf2efd3f4e0f9d67dda1875453c705b2/src%2Flibrustc%2Fmiddle%2Ftrans%2Freflect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df016dc4bf2efd3f4e0f9d67dda1875453c705b2/src%2Flibrustc%2Fmiddle%2Ftrans%2Freflect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Freflect.rs?ref=df016dc4bf2efd3f4e0f9d67dda1875453c705b2", "patch": "@@ -100,17 +100,13 @@ impl Reflector {\n             debug!(\"arg %u: %s\", i, bcx.val_to_str(*a));\n         }\n         let bool_ty = ty::mk_bool();\n-        // XXX: Should not be BoxTraitStore!\n         let result = unpack_result!(bcx, callee::trans_call_inner(\n             self.bcx, None, mth_ty, bool_ty,\n             |bcx| meth::trans_trait_callee_from_llval(bcx,\n                                                       mth_ty,\n                                                       mth_idx,\n                                                       v,\n-                                                      ty::BoxTraitStore,\n-                                                      ast::sty_region(\n-                                                        None,\n-                                                        ast::m_imm)),\n+                                                      None),\n             ArgVals(args), None, DontAutorefArg));\n         let result = bool_to_i1(bcx, result);\n         let next_bcx = sub_block(bcx, \"next\");"}, {"sha": "2ba6930d9c5ea5193cd41e6071703708fc47984c", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/df016dc4bf2efd3f4e0f9d67dda1875453c705b2/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df016dc4bf2efd3f4e0f9d67dda1875453c705b2/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=df016dc4bf2efd3f4e0f9d67dda1875453c705b2", "patch": "@@ -4487,7 +4487,8 @@ pub fn get_opaque_ty(tcx: ctxt) -> Result<t, ~str> {\n     }\n }\n \n-pub fn visitor_object_ty(tcx: ctxt) -> Result<(@TraitRef, t), ~str> {\n+pub fn visitor_object_ty(tcx: ctxt,\n+                         region: ty::Region) -> Result<(@TraitRef, t), ~str> {\n     let trait_lang_item = match tcx.lang_items.require(TyVisitorTraitLangItem) {\n         Ok(id) => id,\n         Err(s) => { return Err(s); }\n@@ -4498,13 +4499,11 @@ pub fn visitor_object_ty(tcx: ctxt) -> Result<(@TraitRef, t), ~str> {\n         tps: ~[]\n     };\n     let trait_ref = @TraitRef { def_id: trait_lang_item, substs: substs };\n-    let mut static_trait_bound = EmptyBuiltinBounds();\n-    static_trait_bound.add(BoundStatic);\n     Ok((trait_ref,\n         mk_trait(tcx,\n                  trait_ref.def_id,\n                  trait_ref.substs.clone(),\n-                 BoxTraitStore,\n+                 RegionTraitStore(region),\n                  ast::m_imm,\n-                 static_trait_bound)))\n+                 EmptyBuiltinBounds())))\n }"}, {"sha": "a125dd2777743be478d378d19b9fe94e98880c25", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/df016dc4bf2efd3f4e0f9d67dda1875453c705b2/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df016dc4bf2efd3f4e0f9d67dda1875453c705b2/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=df016dc4bf2efd3f4e0f9d67dda1875453c705b2", "patch": "@@ -3437,7 +3437,8 @@ pub fn check_intrinsic_type(ccx: @mut CrateCtxt, it: @ast::foreign_item) {\n                   Ok(t) => t,\n                   Err(s) => { tcx.sess.span_fatal(it.span, s); }\n               };\n-              let visitor_object_ty = match ty::visitor_object_ty(tcx) {\n+              let region = ty::re_bound(ty::br_anon(0));\n+              let visitor_object_ty = match ty::visitor_object_ty(tcx, region) {\n                   Ok((_, vot)) => vot,\n                   Err(s) => { tcx.sess.span_fatal(it.span, s); }\n               };"}, {"sha": "d0970f1b6b7ad038a65db944f11417a8e9ccf5b1", "filename": "src/libstd/repr.rs", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/df016dc4bf2efd3f4e0f9d67dda1875453c705b2/src%2Flibstd%2Frepr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df016dc4bf2efd3f4e0f9d67dda1875453c705b2/src%2Flibstd%2Frepr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frepr.rs?ref=df016dc4bf2efd3f4e0f9d67dda1875453c705b2", "patch": "@@ -158,6 +158,7 @@ impl ReprVisitor {\n     }\n \n     #[inline]\n+    #[cfg(stage0)]\n     pub fn visit_ptr_inner(&self, ptr: *c_void, inner: *TyDesc) -> bool {\n         unsafe {\n             let u = ReprVisitor(ptr, self.writer);\n@@ -167,6 +168,17 @@ impl ReprVisitor {\n         }\n     }\n \n+    #[inline]\n+    #[cfg(not(stage0))]\n+    pub fn visit_ptr_inner(&self, ptr: *c_void, inner: *TyDesc) -> bool {\n+        unsafe {\n+            let u = ReprVisitor(ptr, self.writer);\n+            let v = reflect::MovePtrAdaptor(u);\n+            visit_tydesc(inner, &v as &TyVisitor);\n+            true\n+        }\n+    }\n+\n     #[inline]\n     pub fn write<T:Repr>(&self) -> bool {\n         do self.get |v:&T| {\n@@ -556,6 +568,7 @@ impl TyVisitor for ReprVisitor {\n     fn visit_closure_ptr(&self, _ck: uint) -> bool { true }\n }\n \n+#[cfg(stage0)]\n pub fn write_repr<T>(writer: @Writer, object: &T) {\n     unsafe {\n         let ptr = ptr::to_unsafe_ptr(object) as *c_void;\n@@ -566,6 +579,17 @@ pub fn write_repr<T>(writer: @Writer, object: &T) {\n     }\n }\n \n+#[cfg(not(stage0))]\n+pub fn write_repr<T>(writer: @Writer, object: &T) {\n+    unsafe {\n+        let ptr = ptr::to_unsafe_ptr(object) as *c_void;\n+        let tydesc = get_tydesc::<T>();\n+        let u = ReprVisitor(ptr, writer);\n+        let v = reflect::MovePtrAdaptor(u);\n+        visit_tydesc(tydesc, &v as &TyVisitor)\n+    }\n+}\n+\n #[cfg(test)]\n struct P {a: int, b: float}\n "}, {"sha": "1b7b240f01aa2cf4aacf6cda1dcc00a987271598", "filename": "src/libstd/unstable/intrinsics.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/df016dc4bf2efd3f4e0f9d67dda1875453c705b2/src%2Flibstd%2Funstable%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df016dc4bf2efd3f4e0f9d67dda1875453c705b2/src%2Flibstd%2Funstable%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Funstable%2Fintrinsics.rs?ref=df016dc4bf2efd3f4e0f9d67dda1875453c705b2", "patch": "@@ -328,8 +328,12 @@ extern \"rust-intrinsic\" {\n     /// Returns `true` if a type is managed (will be allocated on the local heap)\n     pub fn contains_managed<T>() -> bool;\n \n+    #[cfg(stage0)]\n     pub fn visit_tydesc(td: *TyDesc, tv: @TyVisitor);\n \n+    #[cfg(not(stage0))]\n+    pub fn visit_tydesc(td: *TyDesc, tv: &TyVisitor);\n+\n     pub fn frame_address(f: &once fn(*u8));\n \n     /// Get the address of the `__morestack` stack growth function."}]}