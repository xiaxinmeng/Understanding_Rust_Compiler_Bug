{"sha": "29444545405471a106c67adf48593c5943b6f483", "node_id": "C_kwDOAAsO6NoAKDI5NDQ0NTQ1NDA1NDcxYTEwNmM2N2FkZjQ4NTkzYzU5NDNiNmY0ODM", "commit": {"author": {"name": "Yuki Okushi", "email": "jtitor@2k36.org", "date": "2022-07-26T04:12:19Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-07-26T04:12:19Z"}, "message": "Rollup merge of #99353 - compiler-errors:gat-where-clause-mismatch, r=cjgillot\n\nSlightly improve mismatched GAT where clause error\n\nThis makes the error reporting a bit more standardized between `where` on GATs and functions.\n\ncc #99206 (`@BoxyUwU),` don't want to mark this as as \"fixed\" because they're still not perfect, but this is still an improvement IMO so I want to land it incrementally.\n\nregarding \"consider adding where clause to trait definition\", we don't actually do that for methods as far as i can tell? i could file an issue to look into that maybe.", "tree": {"sha": "c913a3522dc67f0f08baa2f28a09c0133f9e6389", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c913a3522dc67f0f08baa2f28a09c0133f9e6389"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/29444545405471a106c67adf48593c5943b6f483", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJi32mjCRBK7hj4Ov3rIwAAEx4IAC9+rFixXlU3RawRNSWwmsb/\nQyn4nfmoPgdA057E27qLqD8Bi+XUI6p36KDStwIa80f20kBwg4zz7Tz1+dj/K3pi\nHALOlA/mQvbRREGkCJZuKT2a+OgvhqJ7cq4TMFmmYRFXNM7fqjZzntmsllHl12aF\n4WGypNmOSG7ZIxi2Htf9Y04yPLLaP0B2JuRVtKz1utw4z8/AhrdEYczVFJ8eWr56\nRWWqjXpqLygJ2MKJ6OWLIsOLt6FRtPj/tWz8MpGqvxH7zSabUXOy4E0wVpLVkTjC\nS/FCki97b/AFlcfeA5g6pWk1dZgZdQPLKRUsV4Ao0iG1ldV2JxFvH0jnHlBZT5U=\n=hVst\n-----END PGP SIGNATURE-----\n", "payload": "tree c913a3522dc67f0f08baa2f28a09c0133f9e6389\nparent d3acd0069d444ee47e8dd2998776d73abd36a6fb\nparent 3bbe95ca0cb50260aa23a507642af05a83652a4e\nauthor Yuki Okushi <jtitor@2k36.org> 1658808739 +0900\ncommitter GitHub <noreply@github.com> 1658808739 +0900\n\nRollup merge of #99353 - compiler-errors:gat-where-clause-mismatch, r=cjgillot\n\nSlightly improve mismatched GAT where clause error\n\nThis makes the error reporting a bit more standardized between `where` on GATs and functions.\n\ncc #99206 (`@BoxyUwU),` don't want to mark this as as \"fixed\" because they're still not perfect, but this is still an improvement IMO so I want to land it incrementally.\n\nregarding \"consider adding where clause to trait definition\", we don't actually do that for methods as far as i can tell? i could file an issue to look into that maybe.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/29444545405471a106c67adf48593c5943b6f483", "html_url": "https://github.com/rust-lang/rust/commit/29444545405471a106c67adf48593c5943b6f483", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/29444545405471a106c67adf48593c5943b6f483/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d3acd0069d444ee47e8dd2998776d73abd36a6fb", "url": "https://api.github.com/repos/rust-lang/rust/commits/d3acd0069d444ee47e8dd2998776d73abd36a6fb", "html_url": "https://github.com/rust-lang/rust/commit/d3acd0069d444ee47e8dd2998776d73abd36a6fb"}, {"sha": "3bbe95ca0cb50260aa23a507642af05a83652a4e", "url": "https://api.github.com/repos/rust-lang/rust/commits/3bbe95ca0cb50260aa23a507642af05a83652a4e", "html_url": "https://github.com/rust-lang/rust/commit/3bbe95ca0cb50260aa23a507642af05a83652a4e"}], "stats": {"total": 334, "additions": 126, "deletions": 208}, "files": [{"sha": "e06af1fac0699660dc6a13cb21a6e6b3ecc6d2d7", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 20, "deletions": 6, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/29444545405471a106c67adf48593c5943b6f483/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29444545405471a106c67adf48593c5943b6f483/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=29444545405471a106c67adf48593c5943b6f483", "patch": "@@ -1883,7 +1883,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n             exp_span, exp_found.expected, exp_found.found,\n         );\n \n-        if let ObligationCauseCode::CompareImplMethodObligation { .. } = cause.code() {\n+        if let ObligationCauseCode::CompareImplItemObligation { .. } = cause.code() {\n             return;\n         }\n \n@@ -2351,7 +2351,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n             GenericKind::Projection(ref p) => format!(\"the associated type `{}`\", p),\n         };\n \n-        if let Some(SubregionOrigin::CompareImplMethodObligation {\n+        if let Some(SubregionOrigin::CompareImplItemObligation {\n             span,\n             impl_item_def_id,\n             trait_item_def_id,\n@@ -2788,8 +2788,15 @@ impl<'tcx> ObligationCauseExt<'tcx> for ObligationCause<'tcx> {\n         use self::FailureCode::*;\n         use crate::traits::ObligationCauseCode::*;\n         match self.code() {\n-            CompareImplMethodObligation { .. } => Error0308(\"method not compatible with trait\"),\n-            CompareImplTypeObligation { .. } => Error0308(\"type not compatible with trait\"),\n+            CompareImplItemObligation { kind: ty::AssocKind::Fn, .. } => {\n+                Error0308(\"method not compatible with trait\")\n+            }\n+            CompareImplItemObligation { kind: ty::AssocKind::Type, .. } => {\n+                Error0308(\"type not compatible with trait\")\n+            }\n+            CompareImplItemObligation { kind: ty::AssocKind::Const, .. } => {\n+                Error0308(\"const not compatible with trait\")\n+            }\n             MatchExpressionArm(box MatchExpressionArmCause { source, .. }) => {\n                 Error0308(match source {\n                     hir::MatchSource::TryDesugar => \"`?` operator has incompatible types\",\n@@ -2823,8 +2830,15 @@ impl<'tcx> ObligationCauseExt<'tcx> for ObligationCause<'tcx> {\n     fn as_requirement_str(&self) -> &'static str {\n         use crate::traits::ObligationCauseCode::*;\n         match self.code() {\n-            CompareImplMethodObligation { .. } => \"method type is compatible with trait\",\n-            CompareImplTypeObligation { .. } => \"associated type is compatible with trait\",\n+            CompareImplItemObligation { kind: ty::AssocKind::Fn, .. } => {\n+                \"method type is compatible with trait\"\n+            }\n+            CompareImplItemObligation { kind: ty::AssocKind::Type, .. } => {\n+                \"associated type is compatible with trait\"\n+            }\n+            CompareImplItemObligation { kind: ty::AssocKind::Const, .. } => {\n+                \"const is compatible with trait\"\n+            }\n             ExprAssignable => \"expression is assignable\",\n             IfExpression { .. } => \"`if` and `else` have incompatible types\",\n             IfExpressionWithNoElse => \"`if` missing an `else` returns `()`\","}, {"sha": "da465a764299270ec845383fc8547f869631bef8", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/trait_impl_difference.rs", "status": "modified", "additions": 17, "deletions": 52, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/29444545405471a106c67adf48593c5943b6f483/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ftrait_impl_difference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29444545405471a106c67adf48593c5943b6f483/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ftrait_impl_difference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ftrait_impl_difference.rs?ref=29444545405471a106c67adf48593c5943b6f483", "patch": "@@ -2,17 +2,17 @@\n \n use crate::infer::error_reporting::nice_region_error::NiceRegionError;\n use crate::infer::lexical_region_resolve::RegionResolutionError;\n-use crate::infer::{SubregionOrigin, Subtype};\n-use crate::traits::ObligationCauseCode::CompareImplMethodObligation;\n+use crate::infer::Subtype;\n+use crate::traits::ObligationCauseCode::CompareImplItemObligation;\n use rustc_errors::{ErrorGuaranteed, MultiSpan};\n use rustc_hir as hir;\n use rustc_hir::def::Res;\n-use rustc_hir::def_id::{DefId, LocalDefId};\n+use rustc_hir::def_id::DefId;\n use rustc_hir::intravisit::Visitor;\n use rustc_middle::hir::nested_filter;\n use rustc_middle::ty::print::RegionHighlightMode;\n use rustc_middle::ty::{self, Ty, TyCtxt, TypeSuperVisitable, TypeVisitor};\n-use rustc_span::{Span, Symbol};\n+use rustc_span::Span;\n \n use std::ops::ControlFlow;\n \n@@ -22,38 +22,22 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n         let error = self.error.as_ref()?;\n         debug!(\"try_report_impl_not_conforming_to_trait {:?}\", error);\n         if let RegionResolutionError::SubSupConflict(\n-                _, var_origin, sub_origin, _sub, sup_origin, _sup, _,\n+                _,\n+                var_origin,\n+                sub_origin,\n+                _sub,\n+                sup_origin,\n+                _sup,\n+                _,\n             ) = error.clone()\n-            && let (&Subtype(ref sup_trace), &Subtype(ref sub_trace)) = (&sup_origin, &sub_origin)\n-            && let (\n-                sub_expected_found @ Some((sub_expected, sub_found)),\n-                sup_expected_found @ Some(_),\n-                CompareImplMethodObligation { trait_item_def_id, .. },\n-            ) = (sub_trace.values.ty(), sup_trace.values.ty(), sub_trace.cause.code())\n+            && let (Subtype(sup_trace), Subtype(sub_trace)) = (&sup_origin, &sub_origin)\n+            && let sub_expected_found @ Some((sub_expected, sub_found)) = sub_trace.values.ty()\n+            && let sup_expected_found @ Some(_) = sup_trace.values.ty()\n+            && let CompareImplItemObligation { trait_item_def_id, .. } = sub_trace.cause.code()\n             && sup_expected_found == sub_expected_found\n         {\n-            let guar = self.emit_err(\n-                var_origin.span(),\n-                sub_expected,\n-                sub_found,\n-                *trait_item_def_id,\n-            );\n-            return Some(guar);\n-        }\n-        if let RegionResolutionError::ConcreteFailure(origin, _, _)\n-            | RegionResolutionError::GenericBoundFailure(origin, _, _) = error.clone()\n-            && let SubregionOrigin::CompareImplTypeObligation {\n-                span,\n-                impl_item_def_id,\n-                trait_item_def_id,\n-            } = origin\n-        {\n-            let guar = self.emit_associated_type_err(\n-                span,\n-                self.infcx.tcx.item_name(impl_item_def_id.to_def_id()),\n-                impl_item_def_id,\n-                trait_item_def_id,\n-            );\n+            let guar =\n+                self.emit_err(var_origin.span(), sub_expected, sub_found, *trait_item_def_id);\n             return Some(guar);\n         }\n         None\n@@ -147,25 +131,6 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n         }\n         err.emit()\n     }\n-\n-    fn emit_associated_type_err(\n-        &self,\n-        span: Span,\n-        item_name: Symbol,\n-        impl_item_def_id: LocalDefId,\n-        trait_item_def_id: DefId,\n-    ) -> ErrorGuaranteed {\n-        let impl_sp = self.tcx().def_span(impl_item_def_id);\n-        let trait_sp = self.tcx().def_span(trait_item_def_id);\n-        let mut err = self\n-            .tcx()\n-            .sess\n-            .struct_span_err(span, &format!(\"`impl` associated type signature for `{}` doesn't match `trait` associated type signature\", item_name));\n-        err.span_label(impl_sp, \"found\");\n-        err.span_label(trait_sp, \"expected\");\n-\n-        err.emit()\n-    }\n }\n \n struct TypeParamSpanVisitor<'tcx> {"}, {"sha": "c1940c5c0824a3e096f40f61e0622f0b1cbe6015", "filename": "compiler/rustc_infer/src/infer/error_reporting/note.rs", "status": "modified", "additions": 2, "deletions": 16, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/29444545405471a106c67adf48593c5943b6f483/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29444545405471a106c67adf48593c5943b6f483/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnote.rs?ref=29444545405471a106c67adf48593c5943b6f483", "patch": "@@ -86,13 +86,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                     \"...so that the declared lifetime parameter bounds are satisfied\",\n                 );\n             }\n-            infer::CompareImplMethodObligation { span, .. } => {\n-                label_or_note(\n-                    span,\n-                    \"...so that the definition in impl matches the definition from the trait\",\n-                );\n-            }\n-            infer::CompareImplTypeObligation { span, .. } => {\n+            infer::CompareImplItemObligation { span, .. } => {\n                 label_or_note(\n                     span,\n                     \"...so that the definition in impl matches the definition from the trait\",\n@@ -329,15 +323,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                 );\n                 err\n             }\n-            infer::CompareImplMethodObligation { span, impl_item_def_id, trait_item_def_id } => {\n-                self.report_extra_impl_obligation(\n-                    span,\n-                    impl_item_def_id,\n-                    trait_item_def_id,\n-                    &format!(\"`{}: {}`\", sup, sub),\n-                )\n-            }\n-            infer::CompareImplTypeObligation { span, impl_item_def_id, trait_item_def_id } => self\n+            infer::CompareImplItemObligation { span, impl_item_def_id, trait_item_def_id } => self\n                 .report_extra_impl_obligation(\n                     span,\n                     impl_item_def_id,"}, {"sha": "5e7c0661728aaa4ea9c8a92dd796ed17cab8dcdd", "filename": "compiler/rustc_infer/src/infer/mod.rs", "status": "modified", "additions": 5, "deletions": 22, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/29444545405471a106c67adf48593c5943b6f483/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29444545405471a106c67adf48593c5943b6f483/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs?ref=29444545405471a106c67adf48593c5943b6f483", "patch": "@@ -405,15 +405,7 @@ pub enum SubregionOrigin<'tcx> {\n \n     /// Comparing the signature and requirements of an impl method against\n     /// the containing trait.\n-    CompareImplMethodObligation {\n-        span: Span,\n-        impl_item_def_id: LocalDefId,\n-        trait_item_def_id: DefId,\n-    },\n-\n-    /// Comparing the signature and requirements of an impl associated type\n-    /// against the containing trait\n-    CompareImplTypeObligation { span: Span, impl_item_def_id: LocalDefId, trait_item_def_id: DefId },\n+    CompareImplItemObligation { span: Span, impl_item_def_id: LocalDefId, trait_item_def_id: DefId },\n \n     /// Checking that the bounds of a trait's associated type hold for a given impl\n     CheckAssociatedTypeBounds {\n@@ -1945,8 +1937,7 @@ impl<'tcx> SubregionOrigin<'tcx> {\n             ReborrowUpvar(a, _) => a,\n             DataBorrowed(_, a) => a,\n             ReferenceOutlivesReferent(_, a) => a,\n-            CompareImplMethodObligation { span, .. } => span,\n-            CompareImplTypeObligation { span, .. } => span,\n+            CompareImplItemObligation { span, .. } => span,\n             CheckAssociatedTypeBounds { ref parent, .. } => parent.span(),\n         }\n     }\n@@ -1960,19 +1951,11 @@ impl<'tcx> SubregionOrigin<'tcx> {\n                 SubregionOrigin::ReferenceOutlivesReferent(ref_type, cause.span)\n             }\n \n-            traits::ObligationCauseCode::CompareImplMethodObligation {\n-                impl_item_def_id,\n-                trait_item_def_id,\n-            } => SubregionOrigin::CompareImplMethodObligation {\n-                span: cause.span,\n-                impl_item_def_id,\n-                trait_item_def_id,\n-            },\n-\n-            traits::ObligationCauseCode::CompareImplTypeObligation {\n+            traits::ObligationCauseCode::CompareImplItemObligation {\n                 impl_item_def_id,\n                 trait_item_def_id,\n-            } => SubregionOrigin::CompareImplTypeObligation {\n+                kind: _,\n+            } => SubregionOrigin::CompareImplItemObligation {\n                 span: cause.span,\n                 impl_item_def_id,\n                 trait_item_def_id,"}, {"sha": "72b848c3ee2dd150728d09ba9a05e1d556597b2a", "filename": "compiler/rustc_middle/src/traits/mod.rs", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/29444545405471a106c67adf48593c5943b6f483/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29444545405471a106c67adf48593c5943b6f483/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs?ref=29444545405471a106c67adf48593c5943b6f483", "patch": "@@ -311,18 +311,10 @@ pub enum ObligationCauseCode<'tcx> {\n     },\n \n     /// Error derived when matching traits/impls; see ObligationCause for more details\n-    CompareImplConstObligation,\n-\n-    /// Error derived when matching traits/impls; see ObligationCause for more details\n-    CompareImplMethodObligation {\n-        impl_item_def_id: LocalDefId,\n-        trait_item_def_id: DefId,\n-    },\n-\n-    /// Error derived when matching traits/impls; see ObligationCause for more details\n-    CompareImplTypeObligation {\n+    CompareImplItemObligation {\n         impl_item_def_id: LocalDefId,\n         trait_item_def_id: DefId,\n+        kind: ty::AssocKind,\n     },\n \n     /// Checking that the bounds of a trait's associated type hold for a given impl"}, {"sha": "eb732148e3eb4ad7f1122de80a3799d3cbe27318", "filename": "compiler/rustc_middle/src/ty/assoc.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/29444545405471a106c67adf48593c5943b6f483/compiler%2Frustc_middle%2Fsrc%2Fty%2Fassoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29444545405471a106c67adf48593c5943b6f483/compiler%2Frustc_middle%2Fsrc%2Fty%2Fassoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fassoc.rs?ref=29444545405471a106c67adf48593c5943b6f483", "patch": "@@ -105,6 +105,16 @@ impl AssocKind {\n     }\n }\n \n+impl std::fmt::Display for AssocKind {\n+    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n+        match self {\n+            AssocKind::Fn => write!(f, \"method\"),\n+            AssocKind::Const => write!(f, \"associated const\"),\n+            AssocKind::Type => write!(f, \"associated type\"),\n+        }\n+    }\n+}\n+\n /// A list of `ty::AssocItem`s in definition order that allows for efficient lookup by name.\n ///\n /// When doing lookup by name, we try to postpone hygienic comparison for as long as possible since"}, {"sha": "91246051316fa42ec6cb440f78323913af29e240", "filename": "compiler/rustc_middle/src/ty/error.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/29444545405471a106c67adf48593c5943b6f483/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29444545405471a106c67adf48593c5943b6f483/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs?ref=29444545405471a106c67adf48593c5943b6f483", "patch": "@@ -660,12 +660,8 @@ impl<T> Trait<T> for X {\n                     | hir::Node::ImplItem(hir::ImplItem { kind: hir::ImplItemKind::Fn(..), .. }),\n             )\n         );\n-        let impl_comparison = matches!(\n-            cause_code,\n-            ObligationCauseCode::CompareImplMethodObligation { .. }\n-                | ObligationCauseCode::CompareImplTypeObligation { .. }\n-                | ObligationCauseCode::CompareImplConstObligation\n-        );\n+        let impl_comparison =\n+            matches!(cause_code, ObligationCauseCode::CompareImplItemObligation { .. });\n         let assoc = self.associated_item(proj_ty.item_def_id);\n         if !callable_scope || impl_comparison {\n             // We do not want to suggest calling functions when the reason of the"}, {"sha": "7660a2f3af60a51c64a374fb35a374e1bdccc665", "filename": "compiler/rustc_middle/src/ty/structural_impls.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/29444545405471a106c67adf48593c5943b6f483/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29444545405471a106c67adf48593c5943b6f483/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs?ref=29444545405471a106c67adf48593c5943b6f483", "patch": "@@ -224,6 +224,7 @@ TrivialTypeTraversalAndLiftImpls! {\n     // general `Region`.\n     crate::ty::BoundRegionKind,\n     crate::ty::AssocItem,\n+    crate::ty::AssocKind,\n     crate::ty::Placeholder<crate::ty::BoundRegionKind>,\n     crate::ty::ClosureKind,\n     crate::ty::FreeRegion,"}, {"sha": "41c5087c43d42a15c5dd2ffc9d5b664bb352d76a", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/29444545405471a106c67adf48593c5943b6f483/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29444545405471a106c67adf48593c5943b6f483/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=29444545405471a106c67adf48593c5943b6f483", "patch": "@@ -301,13 +301,10 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                         span = obligation.cause.span;\n                     }\n                 }\n-                if let ObligationCauseCode::CompareImplMethodObligation {\n-                    impl_item_def_id,\n-                    trait_item_def_id,\n-                }\n-                | ObligationCauseCode::CompareImplTypeObligation {\n+                if let ObligationCauseCode::CompareImplItemObligation {\n                     impl_item_def_id,\n                     trait_item_def_id,\n+                    kind: _,\n                 } = *obligation.cause.code()\n                 {\n                     self.report_extra_impl_obligation("}, {"sha": "89d7c050c408bc757fbf9ef9d277f41e0c39fe60", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 4, "deletions": 36, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/29444545405471a106c67adf48593c5943b6f483/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29444545405471a106c67adf48593c5943b6f483/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=29444545405471a106c67adf48593c5943b6f483", "patch": "@@ -2682,11 +2682,11 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                     )\n                 });\n             }\n-            ObligationCauseCode::CompareImplMethodObligation { trait_item_def_id, .. } => {\n+            ObligationCauseCode::CompareImplItemObligation { trait_item_def_id, kind, .. } => {\n                 let item_name = self.tcx.item_name(trait_item_def_id);\n                 let msg = format!(\n-                    \"the requirement `{}` appears on the impl method `{}` but not on the \\\n-                     corresponding trait method\",\n+                    \"the requirement `{}` appears on the `impl`'s {kind} `{}` but not on the \\\n+                     corresponding trait's {kind}\",\n                     predicate, item_name,\n                 );\n                 let sp = self\n@@ -2697,7 +2697,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                 let mut assoc_span: MultiSpan = sp.into();\n                 assoc_span.push_span_label(\n                     sp,\n-                    format!(\"this trait method doesn't have the requirement `{}`\", predicate),\n+                    format!(\"this trait's {kind} doesn't have the requirement `{}`\", predicate),\n                 );\n                 if let Some(ident) = self\n                     .tcx\n@@ -2708,38 +2708,6 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                 }\n                 err.span_note(assoc_span, &msg);\n             }\n-            ObligationCauseCode::CompareImplTypeObligation { trait_item_def_id, .. } => {\n-                let item_name = self.tcx.item_name(trait_item_def_id);\n-                let msg = format!(\n-                    \"the requirement `{}` appears on the associated impl type `{}` but not on the \\\n-                     corresponding associated trait type\",\n-                    predicate, item_name,\n-                );\n-                let sp = self.tcx.def_span(trait_item_def_id);\n-                let mut assoc_span: MultiSpan = sp.into();\n-                assoc_span.push_span_label(\n-                    sp,\n-                    format!(\n-                        \"this trait associated type doesn't have the requirement `{}`\",\n-                        predicate,\n-                    ),\n-                );\n-                if let Some(ident) = self\n-                    .tcx\n-                    .opt_associated_item(trait_item_def_id)\n-                    .and_then(|i| self.tcx.opt_item_ident(i.container.id()))\n-                {\n-                    assoc_span.push_span_label(ident.span, \"in this trait\");\n-                }\n-                err.span_note(assoc_span, &msg);\n-            }\n-            ObligationCauseCode::CompareImplConstObligation => {\n-                err.note(&format!(\n-                    \"the requirement `{}` appears on the associated impl constant \\\n-                     but not on the corresponding associated trait constant\",\n-                    predicate\n-                ));\n-            }\n             ObligationCauseCode::TrivialBound => {\n                 err.help(\"see issue #48214\");\n                 if tcx.sess.opts.unstable_features.is_nightly_build() {"}, {"sha": "04f2eb459cf430bf37e96945db277feee65a0482", "filename": "compiler/rustc_typeck/src/astconv/mod.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/29444545405471a106c67adf48593c5943b6f483/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29444545405471a106c67adf48593c5943b6f483/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs?ref=29444545405471a106c67adf48593c5943b6f483", "patch": "@@ -1150,17 +1150,12 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n             .expect(\"missing associated type\");\n \n         if !assoc_item.vis.is_accessible_from(def_scope, tcx) {\n-            let kind = match assoc_item.kind {\n-                ty::AssocKind::Type => \"type\",\n-                ty::AssocKind::Const => \"const\",\n-                _ => unreachable!(),\n-            };\n             tcx.sess\n                 .struct_span_err(\n                     binding.span,\n-                    &format!(\"associated {kind} `{}` is private\", binding.item_name),\n+                    &format!(\"{} `{}` is private\", assoc_item.kind, binding.item_name),\n                 )\n-                .span_label(binding.span, &format!(\"private associated {kind}\"))\n+                .span_label(binding.span, &format!(\"private {}\", assoc_item.kind))\n                 .emit();\n         }\n         tcx.check_stability(assoc_item.def_id, Some(hir_ref_id), binding.span, None);"}, {"sha": "af77efc3c2d57434692c14e091bf1605358c0d10", "filename": "compiler/rustc_typeck/src/check/compare_method.rs", "status": "modified", "additions": 26, "deletions": 16, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/29444545405471a106c67adf48593c5943b6f483/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29444545405471a106c67adf48593c5943b6f483/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs?ref=29444545405471a106c67adf48593c5943b6f483", "patch": "@@ -90,9 +90,10 @@ fn compare_predicate_entailment<'tcx>(\n     let mut cause = ObligationCause::new(\n         impl_m_span,\n         impl_m_hir_id,\n-        ObligationCauseCode::CompareImplMethodObligation {\n+        ObligationCauseCode::CompareImplItemObligation {\n             impl_item_def_id: impl_m.def_id.expect_local(),\n             trait_item_def_id: trait_m.def_id,\n+            kind: impl_m.kind,\n         },\n     );\n \n@@ -223,9 +224,10 @@ fn compare_predicate_entailment<'tcx>(\n             let cause = ObligationCause::new(\n                 span,\n                 impl_m_hir_id,\n-                ObligationCauseCode::CompareImplMethodObligation {\n+                ObligationCauseCode::CompareImplItemObligation {\n                     impl_item_def_id: impl_m.def_id.expect_local(),\n                     trait_item_def_id: trait_m.def_id,\n+                    kind: impl_m.kind,\n                 },\n             );\n             ocx.register_obligation(traits::Obligation::new(cause, param_env, predicate));\n@@ -1079,7 +1081,11 @@ pub(crate) fn compare_const_impl<'tcx>(\n         let mut cause = ObligationCause::new(\n             impl_c_span,\n             impl_c_hir_id,\n-            ObligationCauseCode::CompareImplConstObligation,\n+            ObligationCauseCode::CompareImplItemObligation {\n+                impl_item_def_id: impl_c.def_id.expect_local(),\n+                trait_item_def_id: trait_c.def_id,\n+                kind: impl_c.kind,\n+            },\n         );\n \n         // There is no \"body\" here, so just pass dummy id.\n@@ -1212,15 +1218,6 @@ fn compare_type_predicate_entailment<'tcx>(\n     // `ObligationCause` (and the `FnCtxt`). This is what\n     // `regionck_item` expects.\n     let impl_ty_hir_id = tcx.hir().local_def_id_to_hir_id(impl_ty.def_id.expect_local());\n-    let cause = ObligationCause::new(\n-        impl_ty_span,\n-        impl_ty_hir_id,\n-        ObligationCauseCode::CompareImplTypeObligation {\n-            impl_item_def_id: impl_ty.def_id.expect_local(),\n-            trait_item_def_id: trait_ty.def_id,\n-        },\n-    );\n-\n     debug!(\"compare_type_predicate_entailment: trait_to_impl_substs={:?}\", trait_to_impl_substs);\n \n     // The predicates declared by the impl definition, the trait and the\n@@ -1239,20 +1236,33 @@ fn compare_type_predicate_entailment<'tcx>(\n         Reveal::UserFacing,\n         hir::Constness::NotConst,\n     );\n-    let param_env = traits::normalize_param_env_or_error(tcx, param_env, normalize_cause.clone());\n+    let param_env = traits::normalize_param_env_or_error(tcx, param_env, normalize_cause);\n     tcx.infer_ctxt().enter(|infcx| {\n         let ocx = ObligationCtxt::new(&infcx);\n \n         debug!(\"compare_type_predicate_entailment: caller_bounds={:?}\", param_env.caller_bounds());\n \n         let mut selcx = traits::SelectionContext::new(&infcx);\n \n-        for predicate in impl_ty_own_bounds.predicates {\n+        assert_eq!(impl_ty_own_bounds.predicates.len(), impl_ty_own_bounds.spans.len());\n+        for (span, predicate) in\n+            std::iter::zip(impl_ty_own_bounds.spans, impl_ty_own_bounds.predicates)\n+        {\n+            let cause = ObligationCause::misc(span, impl_ty_hir_id);\n             let traits::Normalized { value: predicate, obligations } =\n-                traits::normalize(&mut selcx, param_env, normalize_cause.clone(), predicate);\n+                traits::normalize(&mut selcx, param_env, cause, predicate);\n \n+            let cause = ObligationCause::new(\n+                span,\n+                impl_ty_hir_id,\n+                ObligationCauseCode::CompareImplItemObligation {\n+                    impl_item_def_id: impl_ty.def_id.expect_local(),\n+                    trait_item_def_id: trait_ty.def_id,\n+                    kind: impl_ty.kind,\n+                },\n+            );\n             ocx.register_obligations(obligations);\n-            ocx.register_obligation(traits::Obligation::new(cause.clone(), param_env, predicate));\n+            ocx.register_obligation(traits::Obligation::new(cause, param_env, predicate));\n         }\n \n         // Check that all obligations are satisfied by the implementation's"}, {"sha": "63bac96135b42f4c9763d253924ab3bf40e44f67", "filename": "src/test/ui/associated-consts/associated-const-impl-wrong-lifetime.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29444545405471a106c67adf48593c5943b6f483/src%2Ftest%2Fui%2Fassociated-consts%2Fassociated-const-impl-wrong-lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29444545405471a106c67adf48593c5943b6f483/src%2Ftest%2Fui%2Fassociated-consts%2Fassociated-const-impl-wrong-lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-consts%2Fassociated-const-impl-wrong-lifetime.rs?ref=29444545405471a106c67adf48593c5943b6f483", "patch": "@@ -5,7 +5,7 @@ trait Foo {\n \n impl<'a> Foo for &'a () {\n     const NAME: &'a str = \"unit\";\n-    //~^ ERROR mismatched types [E0308]\n+    //~^ ERROR const not compatible with trait\n }\n \n fn main() {}"}, {"sha": "de1d9589e99615bcdc0c271f143d670c3c27f046", "filename": "src/test/ui/associated-consts/associated-const-impl-wrong-lifetime.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29444545405471a106c67adf48593c5943b6f483/src%2Ftest%2Fui%2Fassociated-consts%2Fassociated-const-impl-wrong-lifetime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29444545405471a106c67adf48593c5943b6f483/src%2Ftest%2Fui%2Fassociated-consts%2Fassociated-const-impl-wrong-lifetime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-consts%2Fassociated-const-impl-wrong-lifetime.stderr?ref=29444545405471a106c67adf48593c5943b6f483", "patch": "@@ -1,4 +1,4 @@\n-error[E0308]: mismatched types\n+error[E0308]: const not compatible with trait\n   --> $DIR/associated-const-impl-wrong-lifetime.rs:7:5\n    |\n LL |     const NAME: &'a str = \"unit\";"}, {"sha": "e866b3bab7972b6efbda369e1f17cf5194f30316", "filename": "src/test/ui/generic-associated-types/generic-associated-types-where.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/29444545405471a106c67adf48593c5943b6f483/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgeneric-associated-types-where.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29444545405471a106c67adf48593c5943b6f483/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgeneric-associated-types-where.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgeneric-associated-types-where.stderr?ref=29444545405471a106c67adf48593c5943b6f483", "patch": "@@ -11,13 +11,13 @@ LL |     type Assoc2<T: std::fmt::Display> = Vec<T>;\n    |                  +++++++++++++++++++\n \n error[E0276]: impl has stricter requirements than trait\n-  --> $DIR/generic-associated-types-where.rs:22:5\n+  --> $DIR/generic-associated-types-where.rs:22:38\n    |\n LL |     type Assoc3<T>;\n    |     -------------- definition of `Assoc3` from trait\n ...\n LL |     type Assoc3<T> = Vec<T> where T: Iterator;\n-   |     ^^^^^^^^^^^^^^ impl has extra requirement `T: Iterator`\n+   |                                      ^^^^^^^^ impl has extra requirement `T: Iterator`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "ec1d171c044701f7c9f30e025bbfc81a87e540e9", "filename": "src/test/ui/generic-associated-types/impl_bounds.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/29444545405471a106c67adf48593c5943b6f483/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fimpl_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29444545405471a106c67adf48593c5943b6f483/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fimpl_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fimpl_bounds.rs?ref=29444545405471a106c67adf48593c5943b6f483", "patch": "@@ -13,9 +13,9 @@ struct Fooy<T>(T);\n \n impl<T> Foo for Fooy<T> {\n     type A<'a> = (&'a ()) where Self: 'static;\n-    //~^ ERROR `impl` associated type\n+    //~^ ERROR impl has stricter requirements than trait\n     type B<'a, 'b> = (&'a(), &'b ()) where 'b: 'a;\n-    //~^ ERROR `impl` associated type\n+    //~^ ERROR impl has stricter requirements than trait\n     //~| ERROR lifetime bound not satisfied\n     type C = String where Self: Copy;\n     //~^ ERROR the trait bound `T: Copy` is not satisfied"}, {"sha": "ce79c635add69ac2e94f8c8e6fd6125980115109", "filename": "src/test/ui/generic-associated-types/impl_bounds.stderr", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/29444545405471a106c67adf48593c5943b6f483/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fimpl_bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29444545405471a106c67adf48593c5943b6f483/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fimpl_bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fimpl_bounds.stderr?ref=29444545405471a106c67adf48593c5943b6f483", "patch": "@@ -1,20 +1,20 @@\n-error: `impl` associated type signature for `A` doesn't match `trait` associated type signature\n-  --> $DIR/impl_bounds.rs:15:5\n+error[E0276]: impl has stricter requirements than trait\n+  --> $DIR/impl_bounds.rs:15:39\n    |\n LL |     type A<'a> where Self: 'a;\n-   |     ---------- expected\n+   |     ---------- definition of `A` from trait\n ...\n LL |     type A<'a> = (&'a ()) where Self: 'static;\n-   |     ^^^^^^^^^^ found\n+   |                                       ^^^^^^^ impl has extra requirement `T: 'static`\n \n-error: `impl` associated type signature for `B` doesn't match `trait` associated type signature\n-  --> $DIR/impl_bounds.rs:17:5\n+error[E0276]: impl has stricter requirements than trait\n+  --> $DIR/impl_bounds.rs:17:48\n    |\n LL |     type B<'a, 'b> where 'a: 'b;\n-   |     -------------- expected\n+   |     -------------- definition of `B` from trait\n ...\n LL |     type B<'a, 'b> = (&'a(), &'b ()) where 'b: 'a;\n-   |     ^^^^^^^^^^^^^^ found\n+   |                                                ^^ impl has extra requirement `'b: 'a`\n \n error[E0478]: lifetime bound not satisfied\n   --> $DIR/impl_bounds.rs:17:22\n@@ -37,24 +37,24 @@ LL |     type B<'a, 'b> = (&'a(), &'b ()) where 'b: 'a;\n    |                ^^\n \n error[E0277]: the trait bound `T: Copy` is not satisfied\n-  --> $DIR/impl_bounds.rs:20:5\n+  --> $DIR/impl_bounds.rs:20:33\n    |\n LL |     type C = String where Self: Copy;\n-   |     ^^^^^^ the trait `Copy` is not implemented for `T`\n+   |                                 ^^^^ the trait `Copy` is not implemented for `T`\n    |\n note: required because of the requirements on the impl of `Copy` for `Fooy<T>`\n   --> $DIR/impl_bounds.rs:11:10\n    |\n LL | #[derive(Copy, Clone)]\n    |          ^^^^\n-note: the requirement `Fooy<T>: Copy` appears on the associated impl type `C` but not on the corresponding associated trait type\n-  --> $DIR/impl_bounds.rs:7:5\n+note: the requirement `Fooy<T>: Copy` appears on the `impl`'s associated type `C` but not on the corresponding trait's associated type\n+  --> $DIR/impl_bounds.rs:7:10\n    |\n LL | trait Foo {\n    |       --- in this trait\n ...\n LL |     type C where Self: Clone;\n-   |     ^^^^^^ this trait associated type doesn't have the requirement `Fooy<T>: Copy`\n+   |          ^ this trait's associated type doesn't have the requirement `Fooy<T>: Copy`\n    = note: this error originates in the derive macro `Copy` (in Nightly builds, run with -Z macro-backtrace for more info)\n help: consider restricting type parameter `T`\n    |\n@@ -72,14 +72,14 @@ note: required because of the requirements on the impl of `Copy` for `Fooy<T>`\n    |\n LL | #[derive(Copy, Clone)]\n    |          ^^^^\n-note: the requirement `Fooy<T>: Copy` appears on the impl method `d` but not on the corresponding trait method\n+note: the requirement `Fooy<T>: Copy` appears on the `impl`'s method `d` but not on the corresponding trait's method\n   --> $DIR/impl_bounds.rs:8:8\n    |\n LL | trait Foo {\n    |       --- in this trait\n ...\n LL |     fn d() where Self: Clone;\n-   |        ^ this trait method doesn't have the requirement `Fooy<T>: Copy`\n+   |        ^ this trait's method doesn't have the requirement `Fooy<T>: Copy`\n    = note: this error originates in the derive macro `Copy` (in Nightly builds, run with -Z macro-backtrace for more info)\n help: consider restricting type parameter `T`\n    |\n@@ -88,5 +88,5 @@ LL | impl<T: std::marker::Copy> Foo for Fooy<T> {\n \n error: aborting due to 5 previous errors\n \n-Some errors have detailed explanations: E0277, E0478.\n-For more information about an error, try `rustc --explain E0277`.\n+Some errors have detailed explanations: E0276, E0277, E0478.\n+For more information about an error, try `rustc --explain E0276`."}, {"sha": "31948a878edfaa812e4ea90f2101678c8e713261", "filename": "src/test/ui/generic-associated-types/issue-47206-where-clause.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/29444545405471a106c67adf48593c5943b6f483/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-47206-where-clause.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29444545405471a106c67adf48593c5943b6f483/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-47206-where-clause.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-47206-where-clause.stderr?ref=29444545405471a106c67adf48593c5943b6f483", "patch": "@@ -1,11 +1,11 @@\n error[E0276]: impl has stricter requirements than trait\n-  --> $DIR/issue-47206-where-clause.rs:12:5\n+  --> $DIR/issue-47206-where-clause.rs:12:38\n    |\n LL |     type Assoc3<T>;\n    |     -------------- definition of `Assoc3` from trait\n ...\n LL |     type Assoc3<T> = Vec<T> where T: Iterator;\n-   |     ^^^^^^^^^^^^^^ impl has extra requirement `T: Iterator`\n+   |                                      ^^^^^^^^ impl has extra requirement `T: Iterator`\n \n error: aborting due to previous error\n "}, {"sha": "8171dc0ae28d62d81feab67ed6e4881d074bd92a", "filename": "src/test/ui/generic-associated-types/missing-where-clause-on-trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29444545405471a106c67adf48593c5943b6f483/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fmissing-where-clause-on-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29444545405471a106c67adf48593c5943b6f483/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fmissing-where-clause-on-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fmissing-where-clause-on-trait.rs?ref=29444545405471a106c67adf48593c5943b6f483", "patch": "@@ -7,7 +7,7 @@ trait Foo {\n }\n impl Foo for () {\n     type Assoc<'a, 'b> = () where 'a: 'b;\n-    //~^ `impl` associated type\n+    //~^ impl has stricter requirements than trait\n }\n \n fn main() {}"}, {"sha": "edd1f9367d129f7971de9b3481415e1cc4d4c249", "filename": "src/test/ui/generic-associated-types/missing-where-clause-on-trait.stderr", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/29444545405471a106c67adf48593c5943b6f483/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fmissing-where-clause-on-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29444545405471a106c67adf48593c5943b6f483/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fmissing-where-clause-on-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fmissing-where-clause-on-trait.stderr?ref=29444545405471a106c67adf48593c5943b6f483", "patch": "@@ -1,11 +1,12 @@\n-error: `impl` associated type signature for `Assoc` doesn't match `trait` associated type signature\n-  --> $DIR/missing-where-clause-on-trait.rs:9:5\n+error[E0276]: impl has stricter requirements than trait\n+  --> $DIR/missing-where-clause-on-trait.rs:9:39\n    |\n LL |     type Assoc<'a, 'b>;\n-   |     ------------------ expected\n+   |     ------------------ definition of `Assoc` from trait\n ...\n LL |     type Assoc<'a, 'b> = () where 'a: 'b;\n-   |     ^^^^^^^^^^^^^^^^^^ found\n+   |                                       ^^ impl has extra requirement `'a: 'b`\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0276`."}, {"sha": "e13ae80f918b2be0fb9d0e341cd95421866e4fa7", "filename": "src/test/ui/nll/trait-associated-constant.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29444545405471a106c67adf48593c5943b6f483/src%2Ftest%2Fui%2Fnll%2Ftrait-associated-constant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29444545405471a106c67adf48593c5943b6f483/src%2Ftest%2Fui%2Fnll%2Ftrait-associated-constant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Ftrait-associated-constant.rs?ref=29444545405471a106c67adf48593c5943b6f483", "patch": "@@ -19,7 +19,7 @@ struct FailStruct { }\n \n impl<'a: 'b, 'b, 'c> Anything<'a, 'b> for FailStruct {\n     const AC: Option<&'c str> = None;\n-    //~^ ERROR: mismatched types\n+    //~^ ERROR: const not compatible with trait\n }\n \n struct OKStruct2 { }"}, {"sha": "ae0ffd904e7996e496e9ccf18adfe3ecb9feac32", "filename": "src/test/ui/nll/trait-associated-constant.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29444545405471a106c67adf48593c5943b6f483/src%2Ftest%2Fui%2Fnll%2Ftrait-associated-constant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29444545405471a106c67adf48593c5943b6f483/src%2Ftest%2Fui%2Fnll%2Ftrait-associated-constant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Ftrait-associated-constant.stderr?ref=29444545405471a106c67adf48593c5943b6f483", "patch": "@@ -1,4 +1,4 @@\n-error[E0308]: mismatched types\n+error[E0308]: const not compatible with trait\n   --> $DIR/trait-associated-constant.rs:21:5\n    |\n LL |     const AC: Option<&'c str> = None;"}]}