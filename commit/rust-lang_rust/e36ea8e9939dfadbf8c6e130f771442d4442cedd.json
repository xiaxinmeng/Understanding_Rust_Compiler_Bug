{"sha": "e36ea8e9939dfadbf8c6e130f771442d4442cedd", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUzNmVhOGU5OTM5ZGZhZGJmOGM2ZTEzMGY3NzE0NDJkNDQ0MmNlZGQ=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-01-14T08:35:46Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-01-14T23:14:43Z"}, "message": "rustc: Run the compiler in a subtask and monitor the diagnostics\n\nSince we are no longer logging to the console it's possible for us to\nhit a plain-old-fail statement and not output anything.\n\nThis adds a defensive mechanism that will monitor the emitted errors\nand compare them to the result of the compiler task. If the compiler\nfails without emitting an error it results in an ICE.", "tree": {"sha": "02b61d13e4c8e6e4dccfd3c26b62262d816d2111", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/02b61d13e4c8e6e4dccfd3c26b62262d816d2111"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e36ea8e9939dfadbf8c6e130f771442d4442cedd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e36ea8e9939dfadbf8c6e130f771442d4442cedd", "html_url": "https://github.com/rust-lang/rust/commit/e36ea8e9939dfadbf8c6e130f771442d4442cedd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e36ea8e9939dfadbf8c6e130f771442d4442cedd/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d9d3be7acc660e3b587fe468f237217990423c69", "url": "https://api.github.com/repos/rust-lang/rust/commits/d9d3be7acc660e3b587fe468f237217990423c69", "html_url": "https://github.com/rust-lang/rust/commit/d9d3be7acc660e3b587fe468f237217990423c69"}], "stats": {"total": 71, "additions": 65, "deletions": 6}, "files": [{"sha": "a330d29550e74bb866e60e4463e2c66311d5fa9b", "filename": "src/comp/driver/rustc.rs", "status": "modified", "additions": 65, "deletions": 6, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/e36ea8e9939dfadbf8c6e130f771442d4442cedd/src%2Fcomp%2Fdriver%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e36ea8e9939dfadbf8c6e130f771442d4442cedd/src%2Fcomp%2Fdriver%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fdriver%2Frustc.rs?ref=e36ea8e9939dfadbf8c6e130f771442d4442cedd", "patch": "@@ -62,19 +62,14 @@ options:\n \");\n }\n \n-fn main(args: [str]) {\n+fn run_compiler(args: [str], demitter: diagnostic::emitter) {\n     // Don't display log spew by default. Can override with RUST_LOG.\n     logging::console_off();\n \n     let args = args, binary = vec::shift(args);\n \n     if vec::len(args) == 0u { usage(binary); ret; }\n \n-    let demitter = fn@(cmsp: option<(codemap::codemap, codemap::span)>,\n-                       msg: str, lvl: diagnostic::level) {\n-        diagnostic::emit(cmsp, msg, lvl);\n-    };\n-\n     let match =\n         alt getopts::getopts(args, opts()) {\n           ok(m) { m }\n@@ -118,6 +113,70 @@ fn main(args: [str]) {\n     compile_input(sess, cfg, ifile, odir, ofile);\n }\n \n+/*\n+This is a sanity check that any failure of the compiler is performed\n+through the diagnostic module and reported properly - we shouldn't be calling\n+plain-old-fail on any execution path that might be taken. Since we have\n+console logging off by default, hitting a plain fail statement would make the\n+compiler silently exit, which would be terrible.\n+\n+This method wraps the compiler in a subtask and injects a function into the\n+diagnostic emitter which records when we hit a fatal error. If the task\n+fails without recording a fatal error then we've encountered a compiler\n+bug and need to present an error.\n+*/\n+fn monitor(f: fn~(diagnostic::emitter)) {\n+    tag monitor_msg {\n+        fatal;\n+        done;\n+    };\n+\n+    let p = comm::port();\n+    let ch = comm::chan(p);\n+\n+    alt task::try  {||\n+\n+        task::unsupervise();\n+\n+        // The 'diagnostics emitter'. Every error, warning, etc. should\n+        // go through this function.\n+        let demitter = fn@(cmsp: option<(codemap::codemap, codemap::span)>,\n+                           msg: str, lvl: diagnostic::level) {\n+            if lvl == diagnostic::fatal {\n+                comm::send(ch, fatal);\n+            }\n+            diagnostic::emit(cmsp, msg, lvl);\n+        };\n+\n+        resource finally(ch: comm::chan<monitor_msg>) {\n+            comm::send(ch, done);\n+        }\n+\n+        let _finally = finally(ch);\n+\n+        f(demitter)\n+    } {\n+        result::ok(_) { /* fallthrough */ }\n+        result::err(_) {\n+            // Task failed without emitting a fatal diagnostic\n+            if comm::recv(p) == done {\n+                diagnostic::emit(\n+                    none,\n+                    diagnostic::ice_msg(\"unexpected failure\"),\n+                    diagnostic::error);\n+            }\n+            // Fail so the process returns a failure code\n+            fail;\n+        }\n+    }\n+}\n+\n+fn main(args: [str]) {\n+    monitor {|demitter|\n+        run_compiler(args, demitter);\n+    }\n+}\n+\n // Local Variables:\n // mode: rust\n // fill-column: 78;"}]}