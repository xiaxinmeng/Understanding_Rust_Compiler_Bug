{"sha": "c599463cd165d7ec01ba37c6979d1e7109cf9d3a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM1OTk0NjNjZDE2NWQ3ZWMwMWJhMzdjNjk3OWQxZTcxMDljZjlkM2E=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-02-28T11:15:29Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-02-28T11:15:29Z"}, "message": "Rollup merge of #48365 - Centril:docs/document-refcell-panics, r=frewsxcv\n\nRefCell: document panics in Clone, PartialEq, PartialOrd, Ord.\n\nThis fixes #47400 by adding:\n\n```rust\n    /// # Panics\n    ///\n    /// Panics if the value is currently mutably borrowed.\n```\nto said impls. They may panic since they call `.borrow()`.", "tree": {"sha": "664e18a2c2c35f68026b85407bef1482d2a080e7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/664e18a2c2c35f68026b85407bef1482d2a080e7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c599463cd165d7ec01ba37c6979d1e7109cf9d3a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJalo9RCRBK7hj4Ov3rIwAAdHIIAKsqzeWq9LM7A5QA6GYs1VoD\n2D9PsRY+Ye4WNz8MCEaaampCm6RoH1M+EP+hnLVcND/hI2IqrqNyh+LWj5gaYLPU\np+HxzeMRfBjDZ7LkuJZBUb4Zqik7mWEPFjLOBlZzbph4F/CipZz3TJcHQSzWWEXn\n4mm3NqF1grjzSoHOHRlTi1VkHSr9nKVDTuECj/Y0liSqrKJVxji3MJ4qthfibFbX\nJNW6JPB/5C5WVp03xbGymZWG+pjMkazltUe5JwScLYuozipW55WQKFlfhezUEqJs\nzWWTjIn9KEHQjQRJ5HuShqYptpRvtBKdQplvvhhSdECYhQr4BbJdL2h3QorrkOo=\n=hKsE\n-----END PGP SIGNATURE-----\n", "payload": "tree 664e18a2c2c35f68026b85407bef1482d2a080e7\nparent 85d7d0bf561c278123e288bffbe4b3baf843742b\nparent f8ebb3f09fa98cf5583f6bd8d5677a1f4dd0941d\nauthor kennytm <kennytm@gmail.com> 1519816529 +0800\ncommitter GitHub <noreply@github.com> 1519816529 +0800\n\nRollup merge of #48365 - Centril:docs/document-refcell-panics, r=frewsxcv\n\nRefCell: document panics in Clone, PartialEq, PartialOrd, Ord.\n\nThis fixes #47400 by adding:\n\n```rust\n    /// # Panics\n    ///\n    /// Panics if the value is currently mutably borrowed.\n```\nto said impls. They may panic since they call `.borrow()`.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c599463cd165d7ec01ba37c6979d1e7109cf9d3a", "html_url": "https://github.com/rust-lang/rust/commit/c599463cd165d7ec01ba37c6979d1e7109cf9d3a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c599463cd165d7ec01ba37c6979d1e7109cf9d3a/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "85d7d0bf561c278123e288bffbe4b3baf843742b", "url": "https://api.github.com/repos/rust-lang/rust/commits/85d7d0bf561c278123e288bffbe4b3baf843742b", "html_url": "https://github.com/rust-lang/rust/commit/85d7d0bf561c278123e288bffbe4b3baf843742b"}, {"sha": "f8ebb3f09fa98cf5583f6bd8d5677a1f4dd0941d", "url": "https://api.github.com/repos/rust-lang/rust/commits/f8ebb3f09fa98cf5583f6bd8d5677a1f4dd0941d", "html_url": "https://github.com/rust-lang/rust/commit/f8ebb3f09fa98cf5583f6bd8d5677a1f4dd0941d"}], "stats": {"total": 24, "additions": 24, "deletions": 0}, "files": [{"sha": "419ae96b94bd6caf4fc425b9363239c19d490dfc", "filename": "src/libcore/cell.rs", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/c599463cd165d7ec01ba37c6979d1e7109cf9d3a/src%2Flibcore%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c599463cd165d7ec01ba37c6979d1e7109cf9d3a/src%2Flibcore%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcell.rs?ref=c599463cd165d7ec01ba37c6979d1e7109cf9d3a", "patch": "@@ -863,6 +863,9 @@ impl<T: ?Sized> !Sync for RefCell<T> {}\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T: Clone> Clone for RefCell<T> {\n+    /// # Panics\n+    ///\n+    /// Panics if the value is currently mutably borrowed.\n     #[inline]\n     fn clone(&self) -> RefCell<T> {\n         RefCell::new(self.borrow().clone())\n@@ -880,6 +883,9 @@ impl<T:Default> Default for RefCell<T> {\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T: ?Sized + PartialEq> PartialEq for RefCell<T> {\n+    /// # Panics\n+    ///\n+    /// Panics if the value in either `RefCell` is currently borrowed.\n     #[inline]\n     fn eq(&self, other: &RefCell<T>) -> bool {\n         *self.borrow() == *other.borrow()\n@@ -891,26 +897,41 @@ impl<T: ?Sized + Eq> Eq for RefCell<T> {}\n \n #[stable(feature = \"cell_ord\", since = \"1.10.0\")]\n impl<T: ?Sized + PartialOrd> PartialOrd for RefCell<T> {\n+    /// # Panics\n+    ///\n+    /// Panics if the value in either `RefCell` is currently borrowed.\n     #[inline]\n     fn partial_cmp(&self, other: &RefCell<T>) -> Option<Ordering> {\n         self.borrow().partial_cmp(&*other.borrow())\n     }\n \n+    /// # Panics\n+    ///\n+    /// Panics if the value in either `RefCell` is currently borrowed.\n     #[inline]\n     fn lt(&self, other: &RefCell<T>) -> bool {\n         *self.borrow() < *other.borrow()\n     }\n \n+    /// # Panics\n+    ///\n+    /// Panics if the value in either `RefCell` is currently borrowed.\n     #[inline]\n     fn le(&self, other: &RefCell<T>) -> bool {\n         *self.borrow() <= *other.borrow()\n     }\n \n+    /// # Panics\n+    ///\n+    /// Panics if the value in either `RefCell` is currently borrowed.\n     #[inline]\n     fn gt(&self, other: &RefCell<T>) -> bool {\n         *self.borrow() > *other.borrow()\n     }\n \n+    /// # Panics\n+    ///\n+    /// Panics if the value in either `RefCell` is currently borrowed.\n     #[inline]\n     fn ge(&self, other: &RefCell<T>) -> bool {\n         *self.borrow() >= *other.borrow()\n@@ -919,6 +940,9 @@ impl<T: ?Sized + PartialOrd> PartialOrd for RefCell<T> {\n \n #[stable(feature = \"cell_ord\", since = \"1.10.0\")]\n impl<T: ?Sized + Ord> Ord for RefCell<T> {\n+    /// # Panics\n+    ///\n+    /// Panics if the value in either `RefCell` is currently borrowed.\n     #[inline]\n     fn cmp(&self, other: &RefCell<T>) -> Ordering {\n         self.borrow().cmp(&*other.borrow())"}]}