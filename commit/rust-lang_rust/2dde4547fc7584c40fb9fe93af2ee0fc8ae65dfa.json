{"sha": "2dde4547fc7584c40fb9fe93af2ee0fc8ae65dfa", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJkZGU0NTQ3ZmM3NTg0YzQwZmI5ZmU5M2FmMmVlMGZjOGFlNjVkZmE=", "commit": {"author": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2017-06-14T22:01:00Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-06-14T22:01:00Z"}, "message": "Merge pull request #1666 from topecongiro/tuple-type\n\nBlock indent tuple type when fn_call_style is Block", "tree": {"sha": "e5ccf1597ed0ea71a4159f35e3f062d30fbbfe6e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e5ccf1597ed0ea71a4159f35e3f062d30fbbfe6e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2dde4547fc7584c40fb9fe93af2ee0fc8ae65dfa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2dde4547fc7584c40fb9fe93af2ee0fc8ae65dfa", "html_url": "https://github.com/rust-lang/rust/commit/2dde4547fc7584c40fb9fe93af2ee0fc8ae65dfa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2dde4547fc7584c40fb9fe93af2ee0fc8ae65dfa/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b34ac92f86e4355292fee22f65e07498cb58aebc", "url": "https://api.github.com/repos/rust-lang/rust/commits/b34ac92f86e4355292fee22f65e07498cb58aebc", "html_url": "https://github.com/rust-lang/rust/commit/b34ac92f86e4355292fee22f65e07498cb58aebc"}, {"sha": "dacb1ba0502c22f1f177940da15d62fada4ae708", "url": "https://api.github.com/repos/rust-lang/rust/commits/dacb1ba0502c22f1f177940da15d62fada4ae708", "html_url": "https://github.com/rust-lang/rust/commit/dacb1ba0502c22f1f177940da15d62fada4ae708"}], "stats": {"total": 183, "additions": 113, "deletions": 70}, "files": [{"sha": "10e25bbc8c50e6af321ecf2739d08fde547ff372", "filename": "src/expr.rs", "status": "modified", "additions": 65, "deletions": 37, "changes": 102, "blob_url": "https://github.com/rust-lang/rust/blob/2dde4547fc7584c40fb9fe93af2ee0fc8ae65dfa/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dde4547fc7584c40fb9fe93af2ee0fc8ae65dfa/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=2dde4547fc7584c40fb9fe93af2ee0fc8ae65dfa", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n use std::cmp::{Ordering, min};\n-use std::ops::Deref;\n use std::iter::ExactSizeIterator;\n use std::fmt::Write;\n \n@@ -1833,14 +1832,17 @@ pub fn rewrite_call(\n     rewrite_call_inner(context, &callee, args, span, shape, false).ok()\n }\n \n-fn rewrite_call_inner(\n+fn rewrite_call_inner<'a, T>(\n     context: &RewriteContext,\n     callee_str: &str,\n-    args: &[ptr::P<ast::Expr>],\n+    args: &[ptr::P<T>],\n     span: Span,\n     shape: Shape,\n     force_trailing_comma: bool,\n-) -> Result<String, Ordering> {\n+) -> Result<String, Ordering>\n+where\n+    T: Rewrite + Spanned + ToExpr + 'a,\n+{\n     // 2 = `( `, 1 = `(`\n     let paren_overhead = if context.config.spaces_within_parens() {\n         2\n@@ -1924,22 +1926,25 @@ fn need_block_indent(s: &str, shape: Shape) -> bool {\n     })\n }\n \n-fn rewrite_call_args(\n+fn rewrite_call_args<'a, T>(\n     context: &RewriteContext,\n-    args: &[ptr::P<ast::Expr>],\n+    args: &[ptr::P<T>],\n     span: Span,\n     shape: Shape,\n     one_line_width: usize,\n     force_trailing_comma: bool,\n-) -> Option<(bool, String)> {\n+) -> Option<(bool, String)>\n+where\n+    T: Rewrite + Spanned + ToExpr + 'a,\n+{\n     let mut item_context = context.clone();\n     item_context.inside_macro = false;\n     let items = itemize_list(\n         context.codemap,\n         args.iter(),\n         \")\",\n-        |item| item.span.lo,\n-        |item| item.span.hi,\n+        |item| item.span().lo,\n+        |item| item.span().hi,\n         |item| item.rewrite(&item_context, shape),\n         span.lo,\n         span.hi,\n@@ -1949,7 +1954,14 @@ fn rewrite_call_args(\n     // Try letting the last argument overflow to the next line with block\n     // indentation. If its first line fits on one line with the other arguments,\n     // we format the function arguments horizontally.\n-    let tactic = try_overflow_last_arg(&item_context, &mut item_vec, args, shape, one_line_width);\n+    let args = args.iter().filter_map(|e| e.to_expr()).collect::<Vec<_>>();\n+    let tactic = try_overflow_last_arg(\n+        &item_context,\n+        &mut item_vec,\n+        &args[..],\n+        shape,\n+        one_line_width,\n+    );\n \n     let fmt = ListFormatting {\n         tactic: tactic,\n@@ -1974,7 +1986,7 @@ fn rewrite_call_args(\n fn try_overflow_last_arg(\n     context: &RewriteContext,\n     item_vec: &mut Vec<ListItem>,\n-    args: &[ptr::P<ast::Expr>],\n+    args: &[&ast::Expr],\n     shape: Shape,\n     one_line_width: usize,\n ) -> DefinitiveListTactic {\n@@ -1991,7 +2003,7 @@ fn try_overflow_last_arg(\n         last_arg_shape(&context, &item_vec, shape).map_or((None, None), |arg_shape| {\n             rewrite_last_arg_with_overflow(\n                 &context,\n-                &args[args.len() - 1],\n+                args[args.len() - 1],\n                 &mut item_vec[args.len() - 1],\n                 arg_shape,\n             )\n@@ -2040,7 +2052,7 @@ fn last_arg_shape(context: &RewriteContext, items: &Vec<ListItem>, shape: Shape)\n \n fn rewrite_last_arg_with_overflow(\n     context: &RewriteContext,\n-    last_arg: &ptr::P<ast::Expr>,\n+    last_arg: &ast::Expr,\n     last_item: &mut ListItem,\n     shape: Shape,\n ) -> (Option<String>, Option<String>) {\n@@ -2056,7 +2068,7 @@ fn rewrite_last_arg_with_overflow(\n     }\n }\n \n-fn can_be_overflowed(context: &RewriteContext, args: &[ptr::P<ast::Expr>]) -> bool {\n+fn can_be_overflowed(context: &RewriteContext, args: &[&ast::Expr]) -> bool {\n     args.last().map_or(false, |x| {\n         can_be_overflowed_expr(context, &x, args.len())\n     })\n@@ -2344,19 +2356,18 @@ fn shape_from_fn_call_style(\n     }\n }\n \n-pub fn rewrite_tuple_type<'a, I>(\n+fn rewrite_tuple_in_visual_indent_style<'a, T>(\n     context: &RewriteContext,\n-    mut items: I,\n+    items: &[ptr::P<T>],\n     span: Span,\n     shape: Shape,\n ) -> Option<String>\n where\n-    I: ExactSizeIterator,\n-    <I as Iterator>::Item: Deref,\n-    <I::Item as Deref>::Target: Rewrite + Spanned + 'a,\n+    T: Rewrite + Spanned + ToExpr + 'a,\n {\n+    let mut items = items.iter();\n     // In case of length 1, need a trailing comma\n-    debug!(\"rewrite_tuple_type {:?}\", shape);\n+    debug!(\"rewrite_tuple_in_visual_indent_style {:?}\", shape);\n     if items.len() == 1 {\n         // 3 = \"(\" + \",)\"\n         let nested_shape = try_opt!(shape.sub_width(3)).visual_indent(1);\n@@ -2392,28 +2403,29 @@ where\n     }\n }\n \n-pub fn rewrite_tuple(\n+pub fn rewrite_tuple<'a, T>(\n     context: &RewriteContext,\n-    items: &[ptr::P<ast::Expr>],\n+    items: &[ptr::P<T>],\n     span: Span,\n     shape: Shape,\n-) -> Option<String> {\n+) -> Option<String>\n+where\n+    T: Rewrite + Spanned + ToExpr + 'a,\n+{\n     debug!(\"rewrite_tuple {:?}\", shape);\n-    // Use old `rewrite_tuple`\n-    if context.config.fn_call_style() == IndentStyle::Visual {\n-        return rewrite_tuple_type(context, items.iter().map(|x| &**x), span, shape);\n+    if context.use_block_indent() {\n+        // We use the same rule as funcation call for rewriting tuple.\n+        rewrite_call_inner(\n+            context,\n+            &String::new(),\n+            items,\n+            span,\n+            shape,\n+            items.len() == 1,\n+        ).ok()\n+    } else {\n+        rewrite_tuple_in_visual_indent_style(context, items, span, shape)\n     }\n-\n-    // We use the same rule as funcation call for rewriting tuple.\n-    // 1 = \",\"\n-    rewrite_call_inner(\n-        context,\n-        &String::new(),\n-        items,\n-        span,\n-        shape,\n-        items.len() == 1,\n-    ).ok()\n }\n \n pub fn rewrite_unary_prefix<R: Rewrite>(\n@@ -2574,3 +2586,19 @@ fn rewrite_expr_addrof(\n     };\n     rewrite_unary_prefix(context, operator_str, expr, shape)\n }\n+\n+pub trait ToExpr {\n+    fn to_expr(&self) -> Option<&ast::Expr>;\n+}\n+\n+impl ToExpr for ast::Expr {\n+    fn to_expr(&self) -> Option<&ast::Expr> {\n+        Some(self)\n+    }\n+}\n+\n+impl ToExpr for ast::Ty {\n+    fn to_expr(&self) -> Option<&ast::Expr> {\n+        None\n+    }\n+}"}, {"sha": "f084aecaee64f19d174b1a9f6507c0d2bd53ba82", "filename": "src/types.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2dde4547fc7584c40fb9fe93af2ee0fc8ae65dfa/src%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dde4547fc7584c40fb9fe93af2ee0fc8ae65dfa/src%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftypes.rs?ref=2dde4547fc7584c40fb9fe93af2ee0fc8ae65dfa", "patch": "@@ -23,7 +23,7 @@ use items::{format_generics_item_list, generics_shape_from_config};\n use lists::{itemize_list, format_fn_args};\n use rewrite::{Rewrite, RewriteContext};\n use utils::{extra_offset, format_mutability, colon_spaces, wrap_str, mk_sp, last_line_width};\n-use expr::{rewrite_unary_prefix, rewrite_pair, rewrite_tuple_type};\n+use expr::{rewrite_unary_prefix, rewrite_pair, rewrite_tuple};\n use config::{Style, TypeDensity};\n \n #[derive(Copy, Clone, Debug, Eq, PartialEq)]\n@@ -689,9 +689,7 @@ impl Rewrite for ast::Ty {\n                         format!(\"[{}]\", ty_str)\n                     })\n             }\n-            ast::TyKind::Tup(ref items) => {\n-                rewrite_tuple_type(context, items.iter().map(|x| &**x), self.span, shape)\n-            }\n+            ast::TyKind::Tup(ref items) => rewrite_tuple(context, items, self.span, shape),\n             ast::TyKind::Path(ref q_self, ref path) => {\n                 rewrite_path(context, PathContext::Type, q_self.as_ref(), path, shape)\n             }"}, {"sha": "05d5d79a7e37edbf48bc36cb5ad8d0e1fc6bb361", "filename": "tests/target/configs-fn_args_layout-block.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/2dde4547fc7584c40fb9fe93af2ee0fc8ae65dfa/tests%2Ftarget%2Fconfigs-fn_args_layout-block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dde4547fc7584c40fb9fe93af2ee0fc8ae65dfa/tests%2Ftarget%2Fconfigs-fn_args_layout-block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fconfigs-fn_args_layout-block.rs?ref=2dde4547fc7584c40fb9fe93af2ee0fc8ae65dfa", "patch": "@@ -36,10 +36,12 @@ extern \"C\" {\n // #1652\n fn deconstruct(\n     foo: Bar,\n-) -> (SocketAddr,\n-      Header,\n-      Method,\n-      RequestUri,\n-      HttpVersion,\n-      AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA) {\n+) -> (\n+    SocketAddr,\n+    Header,\n+    Method,\n+    RequestUri,\n+    HttpVersion,\n+    AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA,\n+) {\n }"}, {"sha": "67199890b5ecba87eb1d5175c23681834a23f1b3", "filename": "tests/target/fn_args_layout-block.rs", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/2dde4547fc7584c40fb9fe93af2ee0fc8ae65dfa/tests%2Ftarget%2Ffn_args_layout-block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dde4547fc7584c40fb9fe93af2ee0fc8ae65dfa/tests%2Ftarget%2Ffn_args_layout-block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Ffn_args_layout-block.rs?ref=2dde4547fc7584c40fb9fe93af2ee0fc8ae65dfa", "patch": "@@ -87,7 +87,12 @@ where\n }\n \n fn foo()\n-    -> (Loooooooooooooooooooooong, Reeeeeeeeeeeeeeeeeeeeeeeeturn, iiiiiiiiis, Looooooooooooooooong)\n+    -> (\n+    Loooooooooooooooooooooong,\n+    Reeeeeeeeeeeeeeeeeeeeeeeeturn,\n+    iiiiiiiiis,\n+    Looooooooooooooooong,\n+)\n {\n     foo();\n }\n@@ -127,10 +132,12 @@ fn foo<L: Loooooooooooooooooooong, G: Geeeeeeeeeeneric, I: iiiiiiiiis, L: Looooo\n }\n \n fn foo()\n-    -> (Looooooooooooooooooooooooooong,\n-        Reeeeeeeeeeeeeeeeeeeeeeeeeeeeeturn,\n-        iiiiiiiiiiiiiis,\n-        Loooooooooooooooooooooong)\n+    -> (\n+    Looooooooooooooooooooooooooong,\n+    Reeeeeeeeeeeeeeeeeeeeeeeeeeeeeturn,\n+    iiiiiiiiiiiiiis,\n+    Loooooooooooooooooooooong,\n+)\n {\n     foo();\n }"}, {"sha": "9e5785dc241901ee6ba8d1e2eb4681cc6ec73533", "filename": "tests/target/multiple.rs", "status": "modified", "additions": 16, "deletions": 12, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/2dde4547fc7584c40fb9fe93af2ee0fc8ae65dfa/tests%2Ftarget%2Fmultiple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dde4547fc7584c40fb9fe93af2ee0fc8ae65dfa/tests%2Ftarget%2Fmultiple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fmultiple.rs?ref=2dde4547fc7584c40fb9fe93af2ee0fc8ae65dfa", "patch": "@@ -152,23 +152,27 @@ fn main() {\n }\n \n fn deconstruct()\n-    -> (SocketAddr,\n-        Method,\n-        Headers,\n-        RequestUri,\n-        HttpVersion,\n-        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA)\n+    -> (\n+    SocketAddr,\n+    Method,\n+    Headers,\n+    RequestUri,\n+    HttpVersion,\n+    AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA,\n+)\n {\n }\n \n fn deconstruct(\n     foo: Bar,\n-) -> (SocketAddr,\n-      Method,\n-      Headers,\n-      RequestUri,\n-      HttpVersion,\n-      AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA) {\n+) -> (\n+    SocketAddr,\n+    Method,\n+    Headers,\n+    RequestUri,\n+    HttpVersion,\n+    AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA,\n+) {\n }\n \n #[rustfmt_skip]"}, {"sha": "85abf1b6fc2ca6520efcbcb313518078167febe9", "filename": "tests/target/type.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2dde4547fc7584c40fb9fe93af2ee0fc8ae65dfa/tests%2Ftarget%2Ftype.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dde4547fc7584c40fb9fe93af2ee0fc8ae65dfa/tests%2Ftarget%2Ftype.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Ftype.rs?ref=2dde4547fc7584c40fb9fe93af2ee0fc8ae65dfa", "patch": "@@ -2,10 +2,12 @@\n fn types() {\n     let x: [Vec<_>] = [];\n     let y: *mut [SomeType; konst_funk()] = expr();\n-    let z: (// #digits\n-            usize,\n-            // exp\n-            i16) = funk();\n+    let z: (\n+        // #digits\n+        usize,\n+        // exp\n+        i16,\n+    ) = funk();\n     let z: (usize /* #digits */, i16 /* exp */) = funk();\n }\n "}, {"sha": "58ca5112346b5155a1b875451c5ab2292d38a039", "filename": "tests/target/type_alias.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2dde4547fc7584c40fb9fe93af2ee0fc8ae65dfa/tests%2Ftarget%2Ftype_alias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dde4547fc7584c40fb9fe93af2ee0fc8ae65dfa/tests%2Ftarget%2Ftype_alias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Ftype_alias.rs?ref=2dde4547fc7584c40fb9fe93af2ee0fc8ae65dfa", "patch": "@@ -1,7 +1,9 @@\n // rustfmt-normalize_comments: true\n \n-type PrivateTest<'a, I> = (Box<Parser<Input = I, Output = char> + 'a>,\n-                           Box<Parser<Input = I, Output = char> + 'a>);\n+type PrivateTest<'a, I> = (\n+    Box<Parser<Input = I, Output = char> + 'a>,\n+    Box<Parser<Input = I, Output = char> + 'a>,\n+);\n \n pub type PublicTest<'a, I, O> = Result<\n     Vec<MyLongType>,"}]}