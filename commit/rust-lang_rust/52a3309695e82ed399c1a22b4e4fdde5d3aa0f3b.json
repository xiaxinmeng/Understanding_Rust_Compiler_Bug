{"sha": "52a3309695e82ed399c1a22b4e4fdde5d3aa0f3b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUyYTMzMDk2OTVlODJlZDM5OWMxYTIyYjRlNGZkZGU1ZDNhYTBmM2I=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-07-27T19:48:13Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-07-27T19:48:13Z"}, "message": "Auto merge of #43443 - bitshifter:issue-43317, r=nikomatsakis\n\nImprove checking of conflicting packed and align representation hints on structs and unions.\n\nFixes #43317 and improves #33626.", "tree": {"sha": "6b2401ce78e7cb509920cd53e9d40075928b232b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6b2401ce78e7cb509920cd53e9d40075928b232b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/52a3309695e82ed399c1a22b4e4fdde5d3aa0f3b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/52a3309695e82ed399c1a22b4e4fdde5d3aa0f3b", "html_url": "https://github.com/rust-lang/rust/commit/52a3309695e82ed399c1a22b4e4fdde5d3aa0f3b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/52a3309695e82ed399c1a22b4e4fdde5d3aa0f3b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5cc1baa2900ab344e8e8386aa8314b59051868ca", "url": "https://api.github.com/repos/rust-lang/rust/commits/5cc1baa2900ab344e8e8386aa8314b59051868ca", "html_url": "https://github.com/rust-lang/rust/commit/5cc1baa2900ab344e8e8386aa8314b59051868ca"}, {"sha": "5cccd6a9eeea380af4f8150b7afcdc9f15332abc", "url": "https://api.github.com/repos/rust-lang/rust/commits/5cccd6a9eeea380af4f8150b7afcdc9f15332abc", "html_url": "https://github.com/rust-lang/rust/commit/5cccd6a9eeea380af4f8150b7afcdc9f15332abc"}], "stats": {"total": 105, "additions": 81, "deletions": 24}, "files": [{"sha": "3ce39b23b0f6753324958fec47140551016cf493", "filename": "src/librustc/diagnostics.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/52a3309695e82ed399c1a22b4e4fdde5d3aa0f3b/src%2Flibrustc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52a3309695e82ed399c1a22b4e4fdde5d3aa0f3b/src%2Flibrustc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdiagnostics.rs?ref=52a3309695e82ed399c1a22b4e4fdde5d3aa0f3b", "patch": "@@ -2025,5 +2025,4 @@ register_diagnostics! {\n     E0490, // a value of type `..` is borrowed for too long\n     E0495, // cannot infer an appropriate lifetime due to conflicting requirements\n     E0566, // conflicting representation hints\n-    E0587, // conflicting packed and align representation hints\n }"}, {"sha": "946cbb7960b67634df29978633c9ee432effc801", "filename": "src/librustc/hir/check_attr.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/52a3309695e82ed399c1a22b4e4fdde5d3aa0f3b/src%2Flibrustc%2Fhir%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52a3309695e82ed399c1a22b4e4fdde5d3aa0f3b/src%2Flibrustc%2Fhir%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fcheck_attr.rs?ref=52a3309695e82ed399c1a22b4e4fdde5d3aa0f3b", "patch": "@@ -76,8 +76,6 @@ impl<'a> CheckAttrVisitor<'a> {\n         };\n \n         let mut conflicting_reprs = 0;\n-        let mut found_packed = false;\n-        let mut found_align = false;\n \n         for word in words {\n \n@@ -106,7 +104,6 @@ impl<'a> CheckAttrVisitor<'a> {\n                                 (\"attribute should be applied to struct or union\",\n                                  \"a struct or union\")\n                     } else {\n-                        found_packed = true;\n                         continue\n                     }\n                 }\n@@ -120,7 +117,6 @@ impl<'a> CheckAttrVisitor<'a> {\n                     }\n                 }\n                 \"align\" => {\n-                    found_align = true;\n                     if target != Target::Struct &&\n                             target != Target::Union {\n                         (\"attribute should be applied to struct or union\",\n@@ -150,10 +146,6 @@ impl<'a> CheckAttrVisitor<'a> {\n             span_warn!(self.sess, attr.span, E0566,\n                        \"conflicting representation hints\");\n         }\n-        if found_align && found_packed {\n-            struct_span_err!(self.sess, attr.span, E0587,\n-                             \"conflicting packed and align representation hints\").emit();\n-        }\n     }\n }\n "}, {"sha": "7f69885047b93d71e163f6cd3aeccd70f61abe2c", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 13, "deletions": 9, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/52a3309695e82ed399c1a22b4e4fdde5d3aa0f3b/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52a3309695e82ed399c1a22b4e4fdde5d3aa0f3b/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=52a3309695e82ed399c1a22b4e4fdde5d3aa0f3b", "patch": "@@ -1063,11 +1063,7 @@ fn check_struct<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         check_simd(tcx, span, def_id);\n     }\n \n-    // if struct is packed and not aligned, check fields for alignment.\n-    // Checks for combining packed and align attrs on single struct are done elsewhere.\n-    if tcx.adt_def(def_id).repr.packed() && tcx.adt_def(def_id).repr.align == 0 {\n-        check_packed(tcx, span, def_id);\n-    }\n+    check_packed(tcx, span, def_id);\n }\n \n fn check_union<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n@@ -1077,6 +1073,8 @@ fn check_union<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     let def = tcx.adt_def(def_id);\n     def.destructor(tcx); // force the destructor to be evaluated\n     check_representable(tcx, span, def_id);\n+\n+    check_packed(tcx, span, def_id);\n }\n \n pub fn check_item_type<'a,'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, it: &'tcx hir::Item) {\n@@ -1478,9 +1476,15 @@ pub fn check_simd<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, sp: Span, def_id: DefId\n }\n \n fn check_packed<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, sp: Span, def_id: DefId) {\n-    if check_packed_inner(tcx, def_id, &mut Vec::new()) {\n-        struct_span_err!(tcx.sess, sp, E0588,\n-            \"packed struct cannot transitively contain a `[repr(align)]` struct\").emit();\n+    if tcx.adt_def(def_id).repr.packed() {\n+        if tcx.adt_def(def_id).repr.align > 0 {\n+            struct_span_err!(tcx.sess, sp, E0587,\n+                             \"type has conflicting packed and align representation hints\").emit();\n+        }\n+        else if check_packed_inner(tcx, def_id, &mut Vec::new()) {\n+            struct_span_err!(tcx.sess, sp, E0588,\n+                \"packed type cannot transitively contain a `[repr(align)]` type\").emit();\n+        }\n     }\n }\n \n@@ -1493,7 +1497,7 @@ fn check_packed_inner<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         return false;\n     }\n     match t.sty {\n-        ty::TyAdt(def, substs) if def.is_struct() => {\n+        ty::TyAdt(def, substs) if def.is_struct() || def.is_union() => {\n             if tcx.adt_def(def.did).repr.align > 0 {\n                 return true;\n             }"}, {"sha": "60f32408abba1a7bdda4529c6d4fa3b49d5e402d", "filename": "src/librustc_typeck/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/52a3309695e82ed399c1a22b4e4fdde5d3aa0f3b/src%2Flibrustc_typeck%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52a3309695e82ed399c1a22b4e4fdde5d3aa0f3b/src%2Flibrustc_typeck%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fdiagnostics.rs?ref=52a3309695e82ed399c1a22b4e4fdde5d3aa0f3b", "patch": "@@ -4663,6 +4663,7 @@ register_diagnostics! {\n            // but `{}` was found in the type `{}`\n     E0567, // auto traits can not have type parameters\n     E0568, // auto-traits can not have predicates,\n+    E0587, // struct has conflicting packed and align representation hints\n     E0588, // packed struct cannot transitively contain a `[repr(align)]` struct\n     E0592, // duplicate definitions with name `{}`\n //  E0613, // Removed (merged with E0609)"}, {"sha": "12ac8fb57b1f875beae0eca6359159cbdbdc0bbc", "filename": "src/test/compile-fail/conflicting-repr-hints.rs", "status": "modified", "additions": 27, "deletions": 2, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/52a3309695e82ed399c1a22b4e4fdde5d3aa0f3b/src%2Ftest%2Fcompile-fail%2Fconflicting-repr-hints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52a3309695e82ed399c1a22b4e4fdde5d3aa0f3b/src%2Ftest%2Fcompile-fail%2Fconflicting-repr-hints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fconflicting-repr-hints.rs?ref=52a3309695e82ed399c1a22b4e4fdde5d3aa0f3b", "patch": "@@ -27,7 +27,32 @@ enum D { D }\n #[repr(C, packed)]\n struct E(i32);\n \n-#[repr(packed, align(8))] //~ ERROR conflicting packed and align representation hints\n-struct F(i32);\n+#[repr(packed, align(8))]\n+struct F(i32); //~ ERROR type has conflicting packed and align representation hints\n+\n+#[repr(packed)]\n+#[repr(align(8))]\n+struct G(i32); //~ ERROR type has conflicting packed and align representation hints\n+\n+#[repr(align(8))]\n+#[repr(packed)]\n+struct H(i32); //~ ERROR type has conflicting packed and align representation hints\n+\n+#[repr(packed, align(8))]\n+union X { //~ ERROR type has conflicting packed and align representation hints\n+    i: i32\n+}\n+\n+#[repr(packed)]\n+#[repr(align(8))]\n+union Y { //~ ERROR type has conflicting packed and align representation hints\n+    i: i32\n+}\n+\n+#[repr(align(8))]\n+#[repr(packed)]\n+union Z { //~ ERROR type has conflicting packed and align representation hints\n+    i: i32\n+}\n \n fn main() {}"}, {"sha": "78d43064ea3d2323be727bbd7854fc9bd0c08a08", "filename": "src/test/compile-fail/repr-packed-contains-align.rs", "status": "modified", "additions": 40, "deletions": 4, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/52a3309695e82ed399c1a22b4e4fdde5d3aa0f3b/src%2Ftest%2Fcompile-fail%2Frepr-packed-contains-align.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52a3309695e82ed399c1a22b4e4fdde5d3aa0f3b/src%2Ftest%2Fcompile-fail%2Frepr-packed-contains-align.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Frepr-packed-contains-align.rs?ref=52a3309695e82ed399c1a22b4e4fdde5d3aa0f3b", "patch": "@@ -9,17 +9,53 @@\n // except according to those terms.\n #![feature(attr_literals)]\n #![feature(repr_align)]\n+#![feature(untagged_unions)]\n #![allow(dead_code)]\n \n #[repr(align(16))]\n-struct A(i32);\n+struct SA(i32);\n \n-struct B(A);\n+struct SB(SA);\n+\n+#[repr(align(16))]\n+union UA {\n+    i: i32\n+}\n+\n+union UB {\n+    a: UA\n+}\n+\n+#[repr(packed)]\n+struct SC(SA); //~ ERROR: packed type cannot transitively contain a `[repr(align)]` type\n+\n+#[repr(packed)]\n+struct SD(SB); //~ ERROR: packed type cannot transitively contain a `[repr(align)]` type\n+\n+#[repr(packed)]\n+struct SE(UA); //~ ERROR: packed type cannot transitively contain a `[repr(align)]` type\n+\n+#[repr(packed)]\n+struct SF(UB); //~ ERROR: packed type cannot transitively contain a `[repr(align)]` type\n+\n+#[repr(packed)]\n+union UC { //~ ERROR: packed type cannot transitively contain a `[repr(align)]` type\n+    a: UA\n+}\n+\n+#[repr(packed)]\n+union UD { //~ ERROR: packed type cannot transitively contain a `[repr(align)]` type\n+    n: UB\n+}\n \n #[repr(packed)]\n-struct C(A); //~ ERROR: packed struct cannot transitively contain a `[repr(align)]` struct\n+union UE { //~ ERROR: packed type cannot transitively contain a `[repr(align)]` type\n+    a: SA\n+}\n \n #[repr(packed)]\n-struct D(B); //~ ERROR: packed struct cannot transitively contain a `[repr(align)]` struct\n+union UF { //~ ERROR: packed type cannot transitively contain a `[repr(align)]` type\n+    n: SB\n+}\n \n fn main() {}"}]}