{"sha": "5f8a11279d75dc0078edbd8fa9d1fd1184c3f4ec", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVmOGExMTI3OWQ3NWRjMDA3OGVkYmQ4ZmE5ZDFmZDExODRjM2Y0ZWM=", "commit": {"author": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2020-08-05T01:25:57Z"}, "committer": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2020-08-05T01:25:57Z"}, "message": "Be smarter about error handling in `run()`.\n\n`run()` returns `Result<(), String>`. But on failure it always returns\nan empty string, and then `wrap_return()` treats an empty string\nspecially, by not reporting the error.\n\nIt turns out we already have the `ErrorReported` type for this sort of\nbehaviour. This commit changes `run()` to use it.", "tree": {"sha": "4994a4b0348c45a27a3afa36b5d42e457c4acbda", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4994a4b0348c45a27a3afa36b5d42e457c4acbda"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5f8a11279d75dc0078edbd8fa9d1fd1184c3f4ec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5f8a11279d75dc0078edbd8fa9d1fd1184c3f4ec", "html_url": "https://github.com/rust-lang/rust/commit/5f8a11279d75dc0078edbd8fa9d1fd1184c3f4ec", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5f8a11279d75dc0078edbd8fa9d1fd1184c3f4ec/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "af4e3e08ea3d9739e5af541b737527584cea1d8f", "url": "https://api.github.com/repos/rust-lang/rust/commits/af4e3e08ea3d9739e5af541b737527584cea1d8f", "html_url": "https://github.com/rust-lang/rust/commit/af4e3e08ea3d9739e5af541b737527584cea1d8f"}], "stats": {"total": 10, "additions": 4, "deletions": 6}, "files": [{"sha": "6e9d5421c2482918f3a038ca58e0367247a48f0d", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5f8a11279d75dc0078edbd8fa9d1fd1184c3f4ec/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f8a11279d75dc0078edbd8fa9d1fd1184c3f4ec/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=5f8a11279d75dc0078edbd8fa9d1fd1184c3f4ec", "patch": "@@ -443,9 +443,7 @@ fn wrap_return(diag: &rustc_errors::Handler, res: Result<(), String>) -> MainRes\n     match res {\n         Ok(()) => Ok(()),\n         Err(err) => {\n-            if !err.is_empty() {\n-                diag.struct_err(&err).emit();\n-            }\n+            diag.struct_err(&err).emit();\n             Err(ErrorReported)\n         }\n     }\n@@ -478,7 +476,7 @@ fn main_options(options: config::Options) -> MainResult {\n \n     match (options.should_test, options.markdown_input()) {\n         (true, true) => return wrap_return(&diag, markdown::test(options)),\n-        (true, false) => return wrap_return(&diag, test::run(options)),\n+        (true, false) => return test::run(options),\n         (false, true) => {\n             return wrap_return(\n                 &diag,"}, {"sha": "d8d5136fd9bef48d24154eea904c2564f14f6621", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5f8a11279d75dc0078edbd8fa9d1fd1184c3f4ec/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f8a11279d75dc0078edbd8fa9d1fd1184c3f4ec/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=5f8a11279d75dc0078edbd8fa9d1fd1184c3f4ec", "patch": "@@ -42,7 +42,7 @@ pub struct TestOptions {\n     pub attrs: Vec<String>,\n }\n \n-pub fn run(options: Options) -> Result<(), String> {\n+pub fn run(options: Options) -> Result<(), ErrorReported> {\n     let input = config::Input::File(options.input.clone());\n \n     let invalid_codeblock_attributes_name = rustc_lint::builtin::INVALID_CODEBLOCK_ATTRIBUTES.name;\n@@ -150,7 +150,7 @@ pub fn run(options: Options) -> Result<(), String> {\n     });\n     let tests = match tests {\n         Ok(tests) => tests,\n-        Err(ErrorReported) => return Err(String::new()),\n+        Err(ErrorReported) => return Err(ErrorReported),\n     };\n \n     test_args.insert(0, \"rustdoctest\".to_string());"}]}