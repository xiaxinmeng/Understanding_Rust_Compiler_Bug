{"sha": "7a4f059add44699af6d24abdcfd39f429dd54084", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdhNGYwNTlhZGQ0NDY5OWFmNmQyNGFiZGNmZDM5ZjQyOWRkNTQwODQ=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2020-04-11T10:53:12Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2020-04-13T15:37:51Z"}, "message": "rustc_target: Move tests into a separate unconfigured file\n\nas much as possible.", "tree": {"sha": "bc76caf924b4128c7812ab894575f7b6be90c42d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bc76caf924b4128c7812ab894575f7b6be90c42d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7a4f059add44699af6d24abdcfd39f429dd54084", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7a4f059add44699af6d24abdcfd39f429dd54084", "html_url": "https://github.com/rust-lang/rust/commit/7a4f059add44699af6d24abdcfd39f429dd54084", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7a4f059add44699af6d24abdcfd39f429dd54084/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3ad8c8858e93020416edef421d489c15e46a0365", "url": "https://api.github.com/repos/rust-lang/rust/commits/3ad8c8858e93020416edef421d489c15e46a0365", "html_url": "https://github.com/rust-lang/rust/commit/3ad8c8858e93020416edef421d489c15e46a0365"}], "stats": {"total": 91, "additions": 48, "deletions": 43}, "files": [{"sha": "91fd3f8e18ed2ef862b3bb9e4cad401d4f5d7dbe", "filename": "src/librustc_target/spec/mod.rs", "status": "modified", "additions": 5, "deletions": 43, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/7a4f059add44699af6d24abdcfd39f429dd54084/src%2Flibrustc_target%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a4f059add44699af6d24abdcfd39f429dd54084/src%2Flibrustc_target%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fmod.rs?ref=7a4f059add44699af6d24abdcfd39f429dd54084", "patch": "@@ -309,24 +309,14 @@ macro_rules! supported_targets {\n         }\n \n         #[cfg(test)]\n-        mod test_json_encode_decode {\n-            use rustc_serialize::json::ToJson;\n-            use super::Target;\n-            $(use super::$module;)+\n+        mod tests {\n+            mod tests_impl;\n \n+            // Cannot put this into a separate file without duplication, make an exception.\n             $(\n-                #[test] // `#[test]` - this is hard to put into a separate file, make an exception\n+                #[test] // `#[test]`\n                 fn $module() {\n-                    // Grab the TargetResult struct. If we successfully retrieved\n-                    // a Target, then the test JSON encoding/decoding can run for this\n-                    // Target on this testing platform (i.e., checking the iOS targets\n-                    // only on a Mac test platform).\n-                    let _ = $module::target().map(|original| {\n-                        original.check_consistency();\n-                        let as_json = original.to_json();\n-                        let parsed = Target::from_json(as_json).unwrap();\n-                        assert_eq!(original, parsed);\n-                    });\n+                    tests_impl::test_target(super::$module::target());\n                 }\n             )+\n         }\n@@ -1289,34 +1279,6 @@ impl Target {\n             }\n         }\n     }\n-\n-    #[cfg(test)]\n-    fn check_consistency(&self) {\n-        // Check that LLD with the given flavor is treated identically to the linker it emulates.\n-        // If you target really needs to deviate from the rules below, whitelist it\n-        // and document the reasons.\n-        assert_eq!(\n-            self.linker_flavor == LinkerFlavor::Msvc\n-                || self.linker_flavor == LinkerFlavor::Lld(LldFlavor::Link),\n-            self.options.lld_flavor == LldFlavor::Link,\n-        );\n-        for args in &[\n-            &self.options.pre_link_args,\n-            &self.options.pre_link_args_crt,\n-            &self.options.late_link_args,\n-            &self.options.late_link_args_dynamic,\n-            &self.options.late_link_args_static,\n-            &self.options.post_link_args,\n-        ] {\n-            assert_eq!(\n-                args.get(&LinkerFlavor::Msvc),\n-                args.get(&LinkerFlavor::Lld(LldFlavor::Link)),\n-            );\n-            if args.contains_key(&LinkerFlavor::Msvc) {\n-                assert_eq!(self.options.lld_flavor, LldFlavor::Link);\n-            }\n-        }\n-    }\n }\n \n impl ToJson for Target {"}, {"sha": "4cf186bdd7c1a718e20fff9fe9b4648e99c4d443", "filename": "src/librustc_target/spec/tests/tests_impl.rs", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/7a4f059add44699af6d24abdcfd39f429dd54084/src%2Flibrustc_target%2Fspec%2Ftests%2Ftests_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a4f059add44699af6d24abdcfd39f429dd54084/src%2Flibrustc_target%2Fspec%2Ftests%2Ftests_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Ftests%2Ftests_impl.rs?ref=7a4f059add44699af6d24abdcfd39f429dd54084", "patch": "@@ -0,0 +1,43 @@\n+use super::super::*;\n+\n+pub(super) fn test_target(target: TargetResult) {\n+    // Grab the TargetResult struct. If we successfully retrieved\n+    // a Target, then the test JSON encoding/decoding can run for this\n+    // Target on this testing platform (i.e., checking the iOS targets\n+    // only on a Mac test platform).\n+    if let Ok(original) = target {\n+        original.check_consistency();\n+        let as_json = original.to_json();\n+        let parsed = Target::from_json(as_json).unwrap();\n+        assert_eq!(original, parsed);\n+    }\n+}\n+\n+impl Target {\n+    fn check_consistency(&self) {\n+        // Check that LLD with the given flavor is treated identically to the linker it emulates.\n+        // If you target really needs to deviate from the rules below, whitelist it\n+        // and document the reasons.\n+        assert_eq!(\n+            self.linker_flavor == LinkerFlavor::Msvc\n+                || self.linker_flavor == LinkerFlavor::Lld(LldFlavor::Link),\n+            self.options.lld_flavor == LldFlavor::Link,\n+        );\n+        for args in &[\n+            &self.options.pre_link_args,\n+            &self.options.pre_link_args_crt,\n+            &self.options.late_link_args,\n+            &self.options.late_link_args_dynamic,\n+            &self.options.late_link_args_static,\n+            &self.options.post_link_args,\n+        ] {\n+            assert_eq!(\n+                args.get(&LinkerFlavor::Msvc),\n+                args.get(&LinkerFlavor::Lld(LldFlavor::Link)),\n+            );\n+            if args.contains_key(&LinkerFlavor::Msvc) {\n+                assert_eq!(self.options.lld_flavor, LldFlavor::Link);\n+            }\n+        }\n+    }\n+}"}]}