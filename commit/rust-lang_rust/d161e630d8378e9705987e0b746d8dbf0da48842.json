{"sha": "d161e630d8378e9705987e0b746d8dbf0da48842", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQxNjFlNjMwZDgzNzhlOTcwNTk4N2UwYjc0NmQ4ZGJmMGRhNDg4NDI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-06-25T14:23:06Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-06-25T14:23:06Z"}, "message": "auto merge of #7317 : Aatch/rust/no-drop-flag, r=thestinger\n\nThis adds a `#[no_drop_flag]` attribute. This attribute tells the compiler to omit the drop flag from the struct, if it has a destructor. When the destructor is run, instead of setting the drop flag, it instead zeroes-out the struct. This means the destructor can run multiple times and therefore it is up to the developer to use it safely.\r\n\r\nThe primary usage case for this is smart-pointer types like `Rc<T>` as the extra flag caused the struct to be 1 word larger because of alignment.\r\n\r\nThis closes #7271 and #7138", "tree": {"sha": "9ca2f6508e4d6020ec70cbecd809a292d6cb5b1e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9ca2f6508e4d6020ec70cbecd809a292d6cb5b1e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d161e630d8378e9705987e0b746d8dbf0da48842", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d161e630d8378e9705987e0b746d8dbf0da48842", "html_url": "https://github.com/rust-lang/rust/commit/d161e630d8378e9705987e0b746d8dbf0da48842", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d161e630d8378e9705987e0b746d8dbf0da48842/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7aee5da08db11dc597907bf228c2e716a408fdab", "url": "https://api.github.com/repos/rust-lang/rust/commits/7aee5da08db11dc597907bf228c2e716a408fdab", "html_url": "https://github.com/rust-lang/rust/commit/7aee5da08db11dc597907bf228c2e716a408fdab"}, {"sha": "721164d5ec0c8b617bd72df36830fe1861e6362b", "url": "https://api.github.com/repos/rust-lang/rust/commits/721164d5ec0c8b617bd72df36830fe1861e6362b", "html_url": "https://github.com/rust-lang/rust/commit/721164d5ec0c8b617bd72df36830fe1861e6362b"}], "stats": {"total": 131, "additions": 112, "deletions": 19}, "files": [{"sha": "555cceb5b44b98e58c3dda52d40aab671e34dccf", "filename": "src/libextra/rc.rs", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/d161e630d8378e9705987e0b746d8dbf0da48842/src%2Flibextra%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d161e630d8378e9705987e0b746d8dbf0da48842/src%2Flibextra%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Frc.rs?ref=d161e630d8378e9705987e0b746d8dbf0da48842", "patch": "@@ -70,10 +70,12 @@ impl<T> Rc<T> {\n impl<T> Drop for Rc<T> {\n     fn finalize(&self) {\n         unsafe {\n-            (*self.ptr).count -= 1;\n-            if (*self.ptr).count == 0 {\n-                ptr::replace_ptr(self.ptr, intrinsics::uninit());\n-                free(self.ptr as *c_void)\n+            if self.ptr.is_not_null() {\n+                (*self.ptr).count -= 1;\n+                if (*self.ptr).count == 0 {\n+                    ptr::replace_ptr(self.ptr, intrinsics::uninit());\n+                    free(self.ptr as *c_void)\n+                }\n             }\n         }\n     }\n@@ -220,10 +222,12 @@ impl<T> RcMut<T> {\n impl<T> Drop for RcMut<T> {\n     fn finalize(&self) {\n         unsafe {\n-            (*self.ptr).count -= 1;\n-            if (*self.ptr).count == 0 {\n-                ptr::replace_ptr(self.ptr, uninit());\n-                free(self.ptr as *c_void)\n+            if self.ptr.is_not_null() {\n+                (*self.ptr).count -= 1;\n+                if (*self.ptr).count == 0 {\n+                    ptr::replace_ptr(self.ptr, uninit());\n+                    free(self.ptr as *c_void)\n+                }\n             }\n         }\n     }"}, {"sha": "9b7c7037f42a2d17e18f793cc401715ed955afde", "filename": "src/librustc/middle/trans/adt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d161e630d8378e9705987e0b746d8dbf0da48842/src%2Flibrustc%2Fmiddle%2Ftrans%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d161e630d8378e9705987e0b746d8dbf0da48842/src%2Flibrustc%2Fmiddle%2Ftrans%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fadt.rs?ref=d161e630d8378e9705987e0b746d8dbf0da48842", "patch": "@@ -135,7 +135,7 @@ fn represent_type_uncached(cx: &mut CrateContext, t: ty::t) -> Repr {\n                 ty::lookup_field_type(cx.tcx, def_id, field.id, substs)\n             };\n             let packed = ty::lookup_packed(cx.tcx, def_id);\n-            let dtor = ty::ty_dtor(cx.tcx, def_id).is_present();\n+            let dtor = ty::ty_dtor(cx.tcx, def_id).has_drop_flag();\n             let ftys =\n                 if dtor { ftys + [ty::mk_bool()] } else { ftys };\n             return Univariant(mk_struct(cx, ftys, packed), dtor)"}, {"sha": "1f16a735c7c6019eac8c72d9953484f471db0a8e", "filename": "src/librustc/middle/trans/glue.rs", "status": "modified", "additions": 60, "deletions": 8, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/d161e630d8378e9705987e0b746d8dbf0da48842/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d161e630d8378e9705987e0b746d8dbf0da48842/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs?ref=d161e630d8378e9705987e0b746d8dbf0da48842", "patch": "@@ -404,13 +404,8 @@ pub fn make_free_glue(bcx: block, v: ValueRef, t: ty::t) {\n     build_return(bcx);\n }\n \n-pub fn trans_struct_drop(bcx: block,\n-                         t: ty::t,\n-                         v0: ValueRef,\n-                         dtor_did: ast::def_id,\n-                         class_did: ast::def_id,\n-                         substs: &ty::substs)\n-                      -> block {\n+pub fn trans_struct_drop_flag(bcx: block, t: ty::t, v0: ValueRef, dtor_did: ast::def_id,\n+                              class_did: ast::def_id, substs: &ty::substs) -> block {\n     let repr = adt::represent_type(bcx.ccx(), t);\n     let drop_flag = adt::trans_drop_flag_ptr(bcx, repr, v0);\n     do with_cond(bcx, IsNotNull(bcx, Load(bcx, drop_flag))) |cx| {\n@@ -452,6 +447,43 @@ pub fn trans_struct_drop(bcx: block,\n     }\n }\n \n+pub fn trans_struct_drop(mut bcx: block, t: ty::t, v0: ValueRef, dtor_did: ast::def_id,\n+                         class_did: ast::def_id, substs: &ty::substs) -> block {\n+    let repr = adt::represent_type(bcx.ccx(), t);\n+\n+    // Find and call the actual destructor\n+    let dtor_addr = get_res_dtor(bcx.ccx(), dtor_did,\n+                                 class_did, /*bad*/copy substs.tps);\n+\n+    // The second argument is the \"self\" argument for drop\n+    let params = unsafe {\n+        let ty = Type::from_ref(llvm::LLVMTypeOf(dtor_addr));\n+        ty.element_type().func_params()\n+    };\n+\n+    // Class dtors have no explicit args, so the params should\n+    // just consist of the environment (self)\n+    assert_eq!(params.len(), 1);\n+\n+    // Take a reference to the class (because it's using the Drop trait),\n+    // do so now.\n+    let llval = alloca(bcx, val_ty(v0));\n+    Store(bcx, v0, llval);\n+\n+    let self_arg = PointerCast(bcx, llval, params[0]);\n+    let args = ~[self_arg];\n+\n+    Call(bcx, dtor_addr, args);\n+\n+    // Drop the fields\n+    let field_tys = ty::struct_fields(bcx.tcx(), class_did, substs);\n+    for field_tys.iter().enumerate().advance |(i, fld)| {\n+        let llfld_a = adt::trans_field_ptr(bcx, repr, v0, 0, i);\n+        bcx = drop_ty(bcx, llfld_a, fld.mt.ty);\n+    }\n+\n+    bcx\n+}\n \n pub fn make_drop_glue(bcx: block, v0: ValueRef, t: ty::t) {\n     // NB: v0 is an *alias* of type t here, not a direct value.\n@@ -472,7 +504,10 @@ pub fn make_drop_glue(bcx: block, v0: ValueRef, t: ty::t) {\n       ty::ty_struct(did, ref substs) => {\n         let tcx = bcx.tcx();\n         match ty::ty_dtor(tcx, did) {\n-          ty::TraitDtor(dtor) => {\n+          ty::TraitDtor(dtor, true) => {\n+            trans_struct_drop_flag(bcx, t, v0, dtor, did, substs)\n+          }\n+          ty::TraitDtor(dtor, false) => {\n             trans_struct_drop(bcx, t, v0, dtor, did, substs)\n           }\n           ty::NoDtor => {\n@@ -592,6 +627,23 @@ pub fn make_take_glue(bcx: block, v: ValueRef, t: ty::t) {\n       ty::ty_opaque_closure_ptr(ck) => {\n         closure::make_opaque_cbox_take_glue(bcx, ck, v)\n       }\n+      ty::ty_struct(did, ref substs) => {\n+        let tcx = bcx.tcx();\n+        let bcx = iter_structural_ty(bcx, v, t, take_ty);\n+\n+        match ty::ty_dtor(tcx, did) {\n+          ty::TraitDtor(dtor, false) => {\n+            // Zero out the struct\n+            unsafe {\n+                let ty = Type::from_ref(llvm::LLVMTypeOf(v));\n+                memzero(bcx, v, ty);\n+            }\n+\n+          }\n+          _ => { }\n+        }\n+        bcx\n+      }\n       _ if ty::type_is_structural(t) => {\n         iter_structural_ty(bcx, v, t, take_ty)\n       }"}, {"sha": "328b331ea63ed40a2a42d45b3f357cc32ebd0585", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/d161e630d8378e9705987e0b746d8dbf0da48842/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d161e630d8378e9705987e0b746d8dbf0da48842/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=d161e630d8378e9705987e0b746d8dbf0da48842", "patch": "@@ -3852,7 +3852,7 @@ pub fn item_path_str(cx: ctxt, id: ast::def_id) -> ~str {\n \n pub enum DtorKind {\n     NoDtor,\n-    TraitDtor(def_id)\n+    TraitDtor(def_id, bool)\n }\n \n impl DtorKind {\n@@ -3866,13 +3866,24 @@ impl DtorKind {\n     pub fn is_present(&const self) -> bool {\n         !self.is_not_present()\n     }\n+\n+    pub fn has_drop_flag(&self) -> bool {\n+        match self {\n+            &NoDtor => false,\n+            &TraitDtor(_, flag) => flag\n+        }\n+    }\n }\n \n /* If struct_id names a struct with a dtor, return Some(the dtor's id).\n    Otherwise return none. */\n pub fn ty_dtor(cx: ctxt, struct_id: def_id) -> DtorKind {\n     match cx.destructor_for_type.find(&struct_id) {\n-        Some(&method_def_id) => TraitDtor(method_def_id),\n+        Some(&method_def_id) => {\n+            let flag = !has_attr(cx, struct_id, \"no_drop_flag\");\n+\n+            TraitDtor(method_def_id, flag)\n+        }\n         None => NoDtor,\n     }\n }"}, {"sha": "7a3a5f51d3562441a89219fc26a056c00e5a8ff7", "filename": "src/libstd/unstable/atomics.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d161e630d8378e9705987e0b746d8dbf0da48842/src%2Flibstd%2Funstable%2Fatomics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d161e630d8378e9705987e0b746d8dbf0da48842/src%2Flibstd%2Funstable%2Fatomics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Funstable%2Fatomics.rs?ref=d161e630d8378e9705987e0b746d8dbf0da48842", "patch": "@@ -62,6 +62,7 @@ pub struct AtomicPtr<T> {\n /**\n  * An owned atomic pointer. Ensures that only a single reference to the data is held at any time.\n  */\n+#[no_drop_flag]\n pub struct AtomicOption<T> {\n     priv p: *mut c_void\n }"}, {"sha": "e6f05970cced78ffaa53190298c915cd144d92e1", "filename": "src/test/run-pass/attr-no-drop-flag-size.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/d161e630d8378e9705987e0b746d8dbf0da48842/src%2Ftest%2Frun-pass%2Fattr-no-drop-flag-size.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d161e630d8378e9705987e0b746d8dbf0da48842/src%2Ftest%2Frun-pass%2Fattr-no-drop-flag-size.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fattr-no-drop-flag-size.rs?ref=d161e630d8378e9705987e0b746d8dbf0da48842", "patch": "@@ -0,0 +1,25 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use std::sys::size_of;\n+\n+#[no_drop_flag]\n+struct Test<T> {\n+    a: T\n+}\n+\n+#[unsafe_destructor]\n+impl<T> Drop for Test<T> {\n+    fn finalize(&self) { }\n+}\n+\n+fn main() {\n+    assert_eq!(size_of::<int>(), size_of::<Test<int>>());\n+}"}]}