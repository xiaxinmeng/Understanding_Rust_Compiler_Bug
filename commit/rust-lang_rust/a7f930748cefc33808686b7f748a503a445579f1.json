{"sha": "a7f930748cefc33808686b7f748a503a445579f1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE3ZjkzMDc0OGNlZmMzMzgwODY4NmI3Zjc0OGE1MDNhNDQ1NTc5ZjE=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2019-12-10T19:32:57Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-12-10T19:32:57Z"}, "message": "Rollup merge of #67134 - oli-obk:const_prop_zst, r=wesleywiser\n\nEnsure that we get a hard error on generic ZST constants if their bod\u2026\n\n\u2026y causes an error during evaluation\n\ncc #67083 (does not fix because we still need the beta backport)\n\nr? @wesleywiser\n\ncc @RalfJung", "tree": {"sha": "2fec156a29995f117e1b33468f2e93de9f09c6c7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2fec156a29995f117e1b33468f2e93de9f09c6c7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a7f930748cefc33808686b7f748a503a445579f1", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJd7/LpCRBK7hj4Ov3rIwAAdHIIAHlwlqn/MpII8ZXkP7zY/Fuk\nivovej87chFZBKHPae7GdGcouWEHeyQoeX60QcI2enUsq3z5ANM7ggTK4QmnpSUO\nhDLRY0zxPpd9m6cHzzmlsSssLd/116I8mRqeMilmYCW0TMGrEiy42MwmCnGHcudh\n2jgfEWtefrKbpjEF12E1PL3zaLbKWuLalN/KCjtBWthKNK7Lyiw7gSRfs47m58Mg\nSV/lxrfUIQlHko/D1r/mJEUNVujjJXK2nn71tPSYxN3Y9X8LgvvLX9PEvs6FvuSw\nOTs06TXFjOWskM9K4HRgmnfaC1dxmO6nBQLVyNOuScOMphQ51f0wlIUWrYT34Wk=\n=OlwP\n-----END PGP SIGNATURE-----\n", "payload": "tree 2fec156a29995f117e1b33468f2e93de9f09c6c7\nparent 9b1b12b94ac115cefd39fe9e4a6c24edfcecd4f1\nparent c1434716c1dc67f8c96b488121a9b91163516aa3\nauthor Yuki Okushi <huyuumi.dev@gmail.com> 1576006377 +0900\ncommitter GitHub <noreply@github.com> 1576006377 +0900\n\nRollup merge of #67134 - oli-obk:const_prop_zst, r=wesleywiser\n\nEnsure that we get a hard error on generic ZST constants if their bod\u2026\n\n\u2026y causes an error during evaluation\n\ncc #67083 (does not fix because we still need the beta backport)\n\nr? @wesleywiser\n\ncc @RalfJung\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a7f930748cefc33808686b7f748a503a445579f1", "html_url": "https://github.com/rust-lang/rust/commit/a7f930748cefc33808686b7f748a503a445579f1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a7f930748cefc33808686b7f748a503a445579f1/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9b1b12b94ac115cefd39fe9e4a6c24edfcecd4f1", "url": "https://api.github.com/repos/rust-lang/rust/commits/9b1b12b94ac115cefd39fe9e4a6c24edfcecd4f1", "html_url": "https://github.com/rust-lang/rust/commit/9b1b12b94ac115cefd39fe9e4a6c24edfcecd4f1"}, {"sha": "c1434716c1dc67f8c96b488121a9b91163516aa3", "url": "https://api.github.com/repos/rust-lang/rust/commits/c1434716c1dc67f8c96b488121a9b91163516aa3", "html_url": "https://github.com/rust-lang/rust/commit/c1434716c1dc67f8c96b488121a9b91163516aa3"}], "stats": {"total": 63, "additions": 58, "deletions": 5}, "files": [{"sha": "fb8f504d04b10e118e8c1e7153e06aa6db4c824c", "filename": "src/librustc_codegen_ssa/mir/constant.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a7f930748cefc33808686b7f748a503a445579f1/src%2Flibrustc_codegen_ssa%2Fmir%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7f930748cefc33808686b7f748a503a445579f1/src%2Flibrustc_codegen_ssa%2Fmir%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fconstant.rs?ref=a7f930748cefc33808686b7f748a503a445579f1", "patch": "@@ -16,6 +16,10 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n         constant: &mir::Constant<'tcx>,\n     ) -> Result<OperandRef<'tcx, Bx::Value>, ErrorHandled> {\n         match constant.literal.val {\n+            // Special case unevaluated statics, because statics have an identity and thus should\n+            // use `get_static` to get at their id.\n+            // FIXME(oli-obk): can we unify this somehow, maybe by making const eval of statics\n+            // always produce `&STATIC`. This may also simplify how const eval works with statics.\n             ty::ConstKind::Unevaluated(def_id, substs)\n                 if self.cx.tcx().is_static(def_id) => {\n                     assert!(substs.is_empty(), \"we don't support generic statics yet\");\n@@ -46,7 +50,10 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                     instance,\n                     promoted: None,\n                 };\n-                self.cx.tcx().const_eval(ty::ParamEnv::reveal_all().and(cid))\n+                self.cx.tcx().const_eval(ty::ParamEnv::reveal_all().and(cid)).map_err(|err| {\n+                    self.cx.tcx().sess.span_err(constant.span, \"erroneous constant encountered\");\n+                    err\n+                })\n             },\n             _ => Ok(self.monomorphize(&constant.literal)),\n         }"}, {"sha": "628ac721adc59886ca8954b70940253680357cfb", "filename": "src/librustc_mir/transform/simplify.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/a7f930748cefc33808686b7f748a503a445579f1/src%2Flibrustc_mir%2Ftransform%2Fsimplify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7f930748cefc33808686b7f748a503a445579f1/src%2Flibrustc_mir%2Ftransform%2Fsimplify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fsimplify.rs?ref=a7f930748cefc33808686b7f748a503a445579f1", "patch": "@@ -29,7 +29,7 @@\n \n use rustc_index::bit_set::BitSet;\n use rustc_index::vec::{Idx, IndexVec};\n-use rustc::ty::TyCtxt;\n+use rustc::ty::{self, TyCtxt};\n use rustc::mir::*;\n use rustc::mir::visit::{MutVisitor, Visitor, PlaceContext, MutatingUseContext};\n use std::borrow::Cow;\n@@ -367,9 +367,14 @@ impl<'a, 'tcx> Visitor<'tcx> for DeclMarker<'a, 'tcx> {\n                 if let StatementKind::Assign(\n                     box (p, Rvalue::Use(Operand::Constant(c)))\n                 ) = &stmt.kind {\n-                    if !p.is_indirect() {\n-                        trace!(\"skipping store of const value {:?} to {:?}\", c, p);\n-                        return;\n+                    match c.literal.val {\n+                        // Keep assignments from unevaluated constants around, since the evaluation\n+                        // may report errors, even if the use of the constant is dead code.\n+                        ty::ConstKind::Unevaluated(..) => {}\n+                        _ => if !p.is_indirect() {\n+                            trace!(\"skipping store of const value {:?} to {:?}\", c, p);\n+                            return;\n+                        },\n                     }\n                 }\n             }"}, {"sha": "62702a8ec5cb16feeba9f13e69a85d241d877f33", "filename": "src/test/ui/consts/assoc_const_generic_impl.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/a7f930748cefc33808686b7f748a503a445579f1/src%2Ftest%2Fui%2Fconsts%2Fassoc_const_generic_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7f930748cefc33808686b7f748a503a445579f1/src%2Ftest%2Fui%2Fconsts%2Fassoc_const_generic_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fassoc_const_generic_impl.rs?ref=a7f930748cefc33808686b7f748a503a445579f1", "patch": "@@ -0,0 +1,19 @@\n+#![warn(const_err)]\n+\n+trait ZeroSized: Sized {\n+    const I_AM_ZERO_SIZED: ();\n+    fn requires_zero_size(self);\n+}\n+\n+impl<T: Sized> ZeroSized for T {\n+    const I_AM_ZERO_SIZED: ()  = [()][std::mem::size_of::<Self>()]; //~ WARN any use of this value\n+    fn requires_zero_size(self) {\n+        let () = Self::I_AM_ZERO_SIZED; //~ ERROR erroneous constant encountered\n+        println!(\"requires_zero_size called\");\n+    }\n+}\n+\n+fn main() {\n+    ().requires_zero_size();\n+    42_u32.requires_zero_size();\n+}"}, {"sha": "a114d5c6ccd14b26caea7c9d615cdb2d8556ada3", "filename": "src/test/ui/consts/assoc_const_generic_impl.stderr", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/a7f930748cefc33808686b7f748a503a445579f1/src%2Ftest%2Fui%2Fconsts%2Fassoc_const_generic_impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a7f930748cefc33808686b7f748a503a445579f1/src%2Ftest%2Fui%2Fconsts%2Fassoc_const_generic_impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fassoc_const_generic_impl.stderr?ref=a7f930748cefc33808686b7f748a503a445579f1", "patch": "@@ -0,0 +1,22 @@\n+warning: any use of this value will cause an error\n+  --> $DIR/assoc_const_generic_impl.rs:9:34\n+   |\n+LL |     const I_AM_ZERO_SIZED: ()  = [()][std::mem::size_of::<Self>()];\n+   |     -----------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n+   |                                  |\n+   |                                  index out of bounds: the len is 1 but the index is 4\n+   |\n+note: lint level defined here\n+  --> $DIR/assoc_const_generic_impl.rs:1:9\n+   |\n+LL | #![warn(const_err)]\n+   |         ^^^^^^^^^\n+\n+error: erroneous constant encountered\n+  --> $DIR/assoc_const_generic_impl.rs:11:18\n+   |\n+LL |         let () = Self::I_AM_ZERO_SIZED;\n+   |                  ^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}]}