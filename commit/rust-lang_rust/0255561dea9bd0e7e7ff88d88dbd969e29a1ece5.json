{"sha": "0255561dea9bd0e7e7ff88d88dbd969e29a1ece5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAyNTU1NjFkZWE5YmQwZTdlN2ZmODhkODhkYmQ5NjllMjlhMWVjZTU=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-03-02T12:42:41Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-03-02T12:42:41Z"}, "message": "Rollup merge of #69623 - Centril:fix-69396-tmp, r=petrochenkov\n\nstash API: remove panic to fix ICE.\n\nImplements the temporary solution suggested in https://github.com/rust-lang/rust/pull/69537#issuecomment-593143975.\nFixes https://github.com/rust-lang/rust/issues/69396.\n\nr? @petrochenkov", "tree": {"sha": "bc5c51248146286118ae652d5b1d32625cbf4e73", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bc5c51248146286118ae652d5b1d32625cbf4e73"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0255561dea9bd0e7e7ff88d88dbd969e29a1ece5", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeXP9CCRBK7hj4Ov3rIwAAdHIIAFfiJsLzzXpNE3mgJh7qTQPy\nRjnUHfLZx1gU1GKexikOWEjBNEa3yhbakD324mRG8iOGOCW6ol6S+QXhNiwJH0Su\nZ6GU8z/qNJIy9I7nehP7DmuG0Pna0LKYwZMOVmp5WHOkkQhL0h/hjrf7mc4RPwYV\nUcTJDpA7uRSjk7R/y/yi7OHjoIPVGG5CatZzwfycKzQMnRLq61qUpMlPH5wwX0Mt\n5yLR81YCDoEEYaAtDE46M4HbJHD4nxWrzRm2LL3xSwaRMVzVIoQnV5G/UV9FFsJc\nmMeXFDBCvsDGhUUPLRXD7W6mhQBmG9synnJP2DuSUEYCWX9cUvVZ/V0stksgWyA=\n=l1/B\n-----END PGP SIGNATURE-----\n", "payload": "tree bc5c51248146286118ae652d5b1d32625cbf4e73\nparent 74a8d8f44e55db0a6d5c2e389adbfe326645177c\nparent df20036848b7e3607b988cdee18c861964423f65\nauthor Dylan DPC <dylan.dpc@gmail.com> 1583152961 +0100\ncommitter GitHub <noreply@github.com> 1583152961 +0100\n\nRollup merge of #69623 - Centril:fix-69396-tmp, r=petrochenkov\n\nstash API: remove panic to fix ICE.\n\nImplements the temporary solution suggested in https://github.com/rust-lang/rust/pull/69537#issuecomment-593143975.\nFixes https://github.com/rust-lang/rust/issues/69396.\n\nr? @petrochenkov\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0255561dea9bd0e7e7ff88d88dbd969e29a1ece5", "html_url": "https://github.com/rust-lang/rust/commit/0255561dea9bd0e7e7ff88d88dbd969e29a1ece5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0255561dea9bd0e7e7ff88d88dbd969e29a1ece5/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "74a8d8f44e55db0a6d5c2e389adbfe326645177c", "url": "https://api.github.com/repos/rust-lang/rust/commits/74a8d8f44e55db0a6d5c2e389adbfe326645177c", "html_url": "https://github.com/rust-lang/rust/commit/74a8d8f44e55db0a6d5c2e389adbfe326645177c"}, {"sha": "df20036848b7e3607b988cdee18c861964423f65", "url": "https://api.github.com/repos/rust-lang/rust/commits/df20036848b7e3607b988cdee18c861964423f65", "html_url": "https://github.com/rust-lang/rust/commit/df20036848b7e3607b988cdee18c861964423f65"}], "stats": {"total": 88, "additions": 74, "deletions": 14}, "files": [{"sha": "5b00087de6fb72d8745e9dc445db4927e6a12c21", "filename": "src/librustc_errors/lib.rs", "status": "modified", "additions": 4, "deletions": 14, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/0255561dea9bd0e7e7ff88d88dbd969e29a1ece5/src%2Flibrustc_errors%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0255561dea9bd0e7e7ff88d88dbd969e29a1ece5/src%2Flibrustc_errors%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Flib.rs?ref=0255561dea9bd0e7e7ff88d88dbd969e29a1ece5", "patch": "@@ -444,22 +444,12 @@ impl Handler {\n     }\n \n     /// Stash a given diagnostic with the given `Span` and `StashKey` as the key for later stealing.\n-    /// If the diagnostic with this `(span, key)` already exists, this will result in an ICE.\n     pub fn stash_diagnostic(&self, span: Span, key: StashKey, diag: Diagnostic) {\n         let mut inner = self.inner.borrow_mut();\n-        if let Some(mut old_diag) = inner.stashed_diagnostics.insert((span, key), diag) {\n-            // We are removing a previously stashed diagnostic which should not happen.\n-            old_diag.level = Bug;\n-            old_diag.note(&format!(\n-                \"{}:{}: already existing stashed diagnostic with (span = {:?}, key = {:?})\",\n-                file!(),\n-                line!(),\n-                span,\n-                key\n-            ));\n-            inner.emit_diag_at_span(old_diag, span);\n-            panic!(ExplicitBug);\n-        }\n+        // FIXME(Centril, #69537): Consider reintroducing panic on overwriting a stashed diagnostic\n+        // if/when we have a more robust macro-friendly replacement for `(span, key)` as a key.\n+        // See the PR for a discussion.\n+        inner.stashed_diagnostics.insert((span, key), diag);\n     }\n \n     /// Steal a previously stashed diagnostic with the given `Span` and `StashKey` as the key."}, {"sha": "69fc0c1cbb96b71b0a8fc3ed3aa0acbd42032aaa", "filename": "src/test/ui/issues/issue-69396-const-no-type-in-macro.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/0255561dea9bd0e7e7ff88d88dbd969e29a1ece5/src%2Ftest%2Fui%2Fissues%2Fissue-69396-const-no-type-in-macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0255561dea9bd0e7e7ff88d88dbd969e29a1ece5/src%2Ftest%2Fui%2Fissues%2Fissue-69396-const-no-type-in-macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-69396-const-no-type-in-macro.rs?ref=0255561dea9bd0e7e7ff88d88dbd969e29a1ece5", "patch": "@@ -0,0 +1,17 @@\n+macro_rules! suite {\n+    ( $( $fn:ident; )* ) => {\n+        $(\n+            const A = \"A\".$fn();\n+            //~^ ERROR the name `A` is defined multiple times\n+            //~| ERROR missing type for `const` item\n+            //~| ERROR the type placeholder `_` is not allowed within types\n+        )*\n+    }\n+}\n+\n+suite! {\n+    len;\n+    is_empty;\n+}\n+\n+fn main() {}"}, {"sha": "1af5368d2b6d934b909827f73e5e839d81527293", "filename": "src/test/ui/issues/issue-69396-const-no-type-in-macro.stderr", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/0255561dea9bd0e7e7ff88d88dbd969e29a1ece5/src%2Ftest%2Fui%2Fissues%2Fissue-69396-const-no-type-in-macro.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0255561dea9bd0e7e7ff88d88dbd969e29a1ece5/src%2Ftest%2Fui%2Fissues%2Fissue-69396-const-no-type-in-macro.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-69396-const-no-type-in-macro.stderr?ref=0255561dea9bd0e7e7ff88d88dbd969e29a1ece5", "patch": "@@ -0,0 +1,53 @@\n+error[E0428]: the name `A` is defined multiple times\n+  --> $DIR/issue-69396-const-no-type-in-macro.rs:4:13\n+   |\n+LL |               const A = \"A\".$fn();\n+   |               ^^^^^^^^^^^^^^^^^^^^\n+   |               |\n+   |               `A` redefined here\n+   |               previous definition of the value `A` here\n+...\n+LL | / suite! {\n+LL | |     len;\n+LL | |     is_empty;\n+LL | | }\n+   | |_- in this macro invocation\n+   |\n+   = note: `A` must be defined only once in the value namespace of this module\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: missing type for `const` item\n+  --> $DIR/issue-69396-const-no-type-in-macro.rs:4:19\n+   |\n+LL |               const A = \"A\".$fn();\n+   |                     ^ help: provide a type for the item: `A: usize`\n+...\n+LL | / suite! {\n+LL | |     len;\n+LL | |     is_empty;\n+LL | | }\n+   | |_- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n+  --> $DIR/issue-69396-const-no-type-in-macro.rs:4:19\n+   |\n+LL |               const A = \"A\".$fn();\n+   |                     ^\n+   |                     |\n+   |                     not allowed in type signatures\n+   |                     help: replace `_` with the correct type: `bool`\n+...\n+LL | / suite! {\n+LL | |     len;\n+LL | |     is_empty;\n+LL | | }\n+   | |_- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: aborting due to 3 previous errors\n+\n+Some errors have detailed explanations: E0121, E0428.\n+For more information about an error, try `rustc --explain E0121`."}]}