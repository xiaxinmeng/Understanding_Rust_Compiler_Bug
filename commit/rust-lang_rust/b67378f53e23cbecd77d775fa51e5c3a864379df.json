{"sha": "b67378f53e23cbecd77d775fa51e5c3a864379df", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI2NzM3OGY1M2UyM2NiZWNkNzdkNzc1ZmE1MWU1YzNhODY0Mzc5ZGY=", "commit": {"author": {"name": "Yoshua Wuyts", "email": "yoshuawuyts@gmail.com", "date": "2021-08-16T10:58:06Z"}, "committer": {"name": "Yoshua Wuyts", "email": "yoshuawuyts@gmail.com", "date": "2021-08-16T10:58:06Z"}, "message": "fix debug record structs", "tree": {"sha": "30025950add90b4cb68570b43624c9c1e5caf141", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/30025950add90b4cb68570b43624c9c1e5caf141"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b67378f53e23cbecd77d775fa51e5c3a864379df", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b67378f53e23cbecd77d775fa51e5c3a864379df", "html_url": "https://github.com/rust-lang/rust/commit/b67378f53e23cbecd77d775fa51e5c3a864379df", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b67378f53e23cbecd77d775fa51e5c3a864379df/comments", "author": {"login": "yoshuawuyts", "id": 2467194, "node_id": "MDQ6VXNlcjI0NjcxOTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2467194?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yoshuawuyts", "html_url": "https://github.com/yoshuawuyts", "followers_url": "https://api.github.com/users/yoshuawuyts/followers", "following_url": "https://api.github.com/users/yoshuawuyts/following{/other_user}", "gists_url": "https://api.github.com/users/yoshuawuyts/gists{/gist_id}", "starred_url": "https://api.github.com/users/yoshuawuyts/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yoshuawuyts/subscriptions", "organizations_url": "https://api.github.com/users/yoshuawuyts/orgs", "repos_url": "https://api.github.com/users/yoshuawuyts/repos", "events_url": "https://api.github.com/users/yoshuawuyts/events{/privacy}", "received_events_url": "https://api.github.com/users/yoshuawuyts/received_events", "type": "User", "site_admin": false}, "committer": {"login": "yoshuawuyts", "id": 2467194, "node_id": "MDQ6VXNlcjI0NjcxOTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2467194?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yoshuawuyts", "html_url": "https://github.com/yoshuawuyts", "followers_url": "https://api.github.com/users/yoshuawuyts/followers", "following_url": "https://api.github.com/users/yoshuawuyts/following{/other_user}", "gists_url": "https://api.github.com/users/yoshuawuyts/gists{/gist_id}", "starred_url": "https://api.github.com/users/yoshuawuyts/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yoshuawuyts/subscriptions", "organizations_url": "https://api.github.com/users/yoshuawuyts/orgs", "repos_url": "https://api.github.com/users/yoshuawuyts/repos", "events_url": "https://api.github.com/users/yoshuawuyts/events{/privacy}", "received_events_url": "https://api.github.com/users/yoshuawuyts/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b641a66078ce2f2363e9a3b050ba448b93fb7cb6", "url": "https://api.github.com/repos/rust-lang/rust/commits/b641a66078ce2f2363e9a3b050ba448b93fb7cb6", "html_url": "https://github.com/rust-lang/rust/commit/b641a66078ce2f2363e9a3b050ba448b93fb7cb6"}], "stats": {"total": 125, "additions": 117, "deletions": 8}, "files": [{"sha": "813f662f10c6d203eca70225fd66fa5ebe1decb5", "filename": "crates/ide_assists/src/handlers/replace_derive_with_manual_impl.rs", "status": "modified", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/b67378f53e23cbecd77d775fa51e5c3a864379df/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_derive_with_manual_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b67378f53e23cbecd77d775fa51e5c3a864379df/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_derive_with_manual_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_derive_with_manual_impl.rs?ref=b67378f53e23cbecd77d775fa51e5c3a864379df", "patch": "@@ -302,6 +302,71 @@ impl core::fmt::Debug for Foo {\n         }\n     }\n }\n+\"#,\n+        )\n+    }\n+\n+    #[test]\n+    fn add_custom_impl_debug_tuple_enum() {\n+        check_assist(\n+            replace_derive_with_manual_impl,\n+            r#\"\n+//- minicore: fmt\n+#[derive(Debu$0g)]\n+enum Foo {\n+    Bar(usize, usize),\n+    Baz,\n+}\n+\"#,\n+            r#\"\n+enum Foo {\n+    Bar(usize, usize),\n+    Baz,\n+}\n+\n+impl core::fmt::Debug for Foo {\n+    $0fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {\n+        match self {\n+            Self::Bar(arg1, arg2) => f.debug_tuple(\"Bar\").field(arg1).field(arg2).finish(),\n+            Self::Baz => write!(f, \"Baz\"),\n+        }\n+    }\n+}\n+\"#,\n+        )\n+    }\n+    #[test]\n+    fn add_custom_impl_debug_record_enum() {\n+        check_assist(\n+            replace_derive_with_manual_impl,\n+            r#\"\n+//- minicore: fmt\n+#[derive(Debu$0g)]\n+enum Foo {\n+    Bar {\n+        baz: usize,\n+        qux: usize,\n+    },\n+    Baz,\n+}\n+\"#,\n+            r#\"\n+enum Foo {\n+    Bar {\n+        baz: usize,\n+        qux: usize,\n+    },\n+    Baz,\n+}\n+\n+impl core::fmt::Debug for Foo {\n+    $0fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {\n+        match self {\n+            Self::Bar { baz, qux } => f.debug_struct(\"Bar\").field(\"baz\", baz).field(\"qux\", qux).finish(),\n+            Self::Baz => write!(f, \"Baz\"),\n+        }\n+    }\n+}\n \"#,\n         )\n     }"}, {"sha": "54060c02a37651c2cc5f45f5a902d5ec67cdb531", "filename": "crates/ide_assists/src/utils/gen_trait_fn_body.rs", "status": "modified", "additions": 52, "deletions": 8, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/b67378f53e23cbecd77d775fa51e5c3a864379df/crates%2Fide_assists%2Fsrc%2Futils%2Fgen_trait_fn_body.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b67378f53e23cbecd77d775fa51e5c3a864379df/crates%2Fide_assists%2Fsrc%2Futils%2Fgen_trait_fn_body.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Futils%2Fgen_trait_fn_body.rs?ref=b67378f53e23cbecd77d775fa51e5c3a864379df", "patch": "@@ -149,16 +149,60 @@ fn gen_debug_impl(adt: &ast::Adt, func: &ast::Fn) -> Option<()> {\n             let mut arms = vec![];\n             for variant in list.variants() {\n                 let name = variant.name()?;\n-                let variant_name =\n-                    make::path_pat(make::ext::path_from_idents([\"Self\", &format!(\"{}\", name)])?);\n-\n+                let variant_name = make::ext::path_from_idents([\"Self\", &format!(\"{}\", name)])?;\n                 let target = make::expr_path(make::ext::ident_path(\"f\").into());\n-                let fmt_string = make::expr_literal(&(format!(\"\\\"{}\\\"\", name))).into();\n-                let args = make::arg_list(vec![target, fmt_string]);\n-                let macro_name = make::expr_path(make::ext::ident_path(\"write\"));\n-                let macro_call = make::expr_macro_call(macro_name, args);\n \n-                arms.push(make::match_arm(Some(variant_name.into()), None, macro_call.into()));\n+                match variant.field_list() {\n+                    Some(ast::FieldList::RecordFieldList(list)) => {\n+                        let mut pats = vec![];\n+\n+                        // => f.debug_struct(name)\n+                        let target = make::expr_path(make::ext::ident_path(\"f\"));\n+                        let method = make::name_ref(\"debug_struct\");\n+                        let struct_name = format!(\"\\\"{}\\\"\", name);\n+                        let args = make::arg_list(Some(make::expr_literal(&struct_name).into()));\n+                        let mut expr = make::expr_method_call(target, method, args);\n+\n+                        for field in list.fields() {\n+                            let name = field.name()?;\n+\n+                            // => MyStruct { field_name }\n+                            let field_name = field.name()?;\n+                            let pat = make::ident_pat(false, false, field_name.clone());\n+                            pats.push(pat.into());\n+\n+                            // => <expr>.field(\"field_name\", field)\n+                            let method_name = make::name_ref(\"field\");\n+                            let field_name = make::expr_literal(&(format!(\"\\\"{}\\\"\", name))).into();\n+                            let field_path = &format!(\"{}\", name);\n+                            let field_path = make::expr_path(make::ext::ident_path(field_path));\n+                            let args = make::arg_list(vec![field_name, field_path]);\n+                            expr = make::expr_method_call(expr, method_name, args);\n+                        }\n+\n+                        // => <expr>.finish()\n+                        let method = make::name_ref(\"finish\");\n+                        let expr = make::expr_method_call(expr, method, make::arg_list(None));\n+\n+                        // => MyStruct { fields.. } => f.debug_struct()...finish(),\n+                        let pat = make::record_pat(variant_name.clone(), pats.into_iter());\n+                        arms.push(make::match_arm(Some(pat.into()), None, expr));\n+                    }\n+                    Some(ast::FieldList::TupleFieldList(_list)) => todo!(),\n+                    None => {\n+                        let fmt_string = make::expr_literal(&(format!(\"\\\"{}\\\"\", name))).into();\n+                        let args = make::arg_list(vec![target, fmt_string]);\n+                        let macro_name = make::expr_path(make::ext::ident_path(\"write\"));\n+                        let macro_call = make::expr_macro_call(macro_name, args);\n+\n+                        let variant_name = make::path_pat(variant_name);\n+                        arms.push(make::match_arm(\n+                            Some(variant_name.into()),\n+                            None,\n+                            macro_call.into(),\n+                        ));\n+                    }\n+                }\n             }\n \n             let match_target = make::expr_path(make::ext::ident_path(\"self\"));"}]}