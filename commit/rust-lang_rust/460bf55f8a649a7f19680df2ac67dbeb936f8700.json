{"sha": "460bf55f8a649a7f19680df2ac67dbeb936f8700", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ2MGJmNTVmOGE2NDlhN2YxOTY4MGRmMmFjNjdkYmViOTM2Zjg3MDA=", "commit": {"author": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2017-03-06T06:45:28Z"}, "committer": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2017-03-14T03:35:16Z"}, "message": "Cleanup.", "tree": {"sha": "8bda1fa469e2757b26f3505e35001ba60128f4e0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8bda1fa469e2757b26f3505e35001ba60128f4e0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/460bf55f8a649a7f19680df2ac67dbeb936f8700", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/460bf55f8a649a7f19680df2ac67dbeb936f8700", "html_url": "https://github.com/rust-lang/rust/commit/460bf55f8a649a7f19680df2ac67dbeb936f8700", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/460bf55f8a649a7f19680df2ac67dbeb936f8700/comments", "author": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d9cf601ae822d07412a79aeedeabb802aa94cb34", "url": "https://api.github.com/repos/rust-lang/rust/commits/d9cf601ae822d07412a79aeedeabb802aa94cb34", "html_url": "https://github.com/rust-lang/rust/commit/d9cf601ae822d07412a79aeedeabb802aa94cb34"}], "stats": {"total": 23, "additions": 11, "deletions": 12}, "files": [{"sha": "6385d206a0cb90bacbf863a2f97a1405be614fc4", "filename": "src/libsyntax/ext/tt/macro_parser.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/460bf55f8a649a7f19680df2ac67dbeb936f8700/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/460bf55f8a649a7f19680df2ac67dbeb936f8700/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs?ref=460bf55f8a649a7f19680df2ac67dbeb936f8700", "patch": "@@ -488,7 +488,7 @@ pub fn parse(sess: &ParseSess, tts: TokenStream, ms: &[TokenTree], directory: Op\n fn parse_nt<'a>(p: &mut Parser<'a>, sp: Span, name: &str) -> Nonterminal {\n     match name {\n         \"tt\" => {\n-            return token::NtTT(panictry!(p.parse_token_tree()));\n+            return token::NtTT(p.parse_token_tree());\n         }\n         _ => {}\n     }"}, {"sha": "9872afd27b7bc395e486ee856030a9cc7e8d0ec9", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 10, "deletions": 11, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/460bf55f8a649a7f19680df2ac67dbeb936f8700/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/460bf55f8a649a7f19680df2ac67dbeb936f8700/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=460bf55f8a649a7f19680df2ac67dbeb936f8700", "patch": "@@ -891,7 +891,7 @@ impl<'a> Parser<'a> {\n \n         self.parse_seq_to_before_tokens(kets,\n                                         SeqSep::none(),\n-                                        |p| p.parse_token_tree(),\n+                                        |p| Ok(p.parse_token_tree()),\n                                         |mut e| handler.cancel(&mut e));\n     }\n \n@@ -1267,7 +1267,7 @@ impl<'a> Parser<'a> {\n                                 break;\n                             }\n                             token::OpenDelim(token::Brace) => {\n-                                self.parse_token_tree()?;\n+                                self.parse_token_tree();\n                                 break;\n                             }\n                             _ => self.bump(),\n@@ -2101,10 +2101,10 @@ impl<'a> Parser<'a> {\n \n     fn expect_delimited_token_tree(&mut self) -> PResult<'a, (token::DelimToken, ThinTokenStream)> {\n         match self.token {\n-            token::OpenDelim(delim) => self.parse_token_tree().map(|tree| match tree {\n-                TokenTree::Delimited(_, delimited) => (delim, delimited.stream().into()),\n+            token::OpenDelim(delim) => match self.parse_token_tree() {\n+                TokenTree::Delimited(_, delimited) => Ok((delim, delimited.stream().into())),\n                 _ => unreachable!(),\n-            }),\n+            },\n             _ => Err(self.fatal(\"expected open delimiter\")),\n         }\n     }\n@@ -2643,24 +2643,23 @@ impl<'a> Parser<'a> {\n     }\n \n     /// parse a single token tree from the input.\n-    pub fn parse_token_tree(&mut self) -> PResult<'a, TokenTree> {\n+    pub fn parse_token_tree(&mut self) -> TokenTree {\n         match self.token {\n             token::OpenDelim(..) => {\n                 let frame = mem::replace(&mut self.token_cursor.frame,\n                                          self.token_cursor.stack.pop().unwrap());\n                 self.span = frame.span;\n                 self.bump();\n-                return Ok(TokenTree::Delimited(frame.span, Delimited {\n+                TokenTree::Delimited(frame.span, Delimited {\n                     delim: frame.delim,\n                     tts: frame.tree_cursor.original_stream().into(),\n-                }));\n+                })\n             },\n             token::CloseDelim(_) | token::Eof => unreachable!(),\n             _ => {\n                 let token = mem::replace(&mut self.token, token::Underscore);\n-                let res = Ok(TokenTree::Token(self.span, token));\n                 self.bump();\n-                res\n+                TokenTree::Token(self.prev_span, token)\n             }\n         }\n     }\n@@ -2670,7 +2669,7 @@ impl<'a> Parser<'a> {\n     pub fn parse_all_token_trees(&mut self) -> PResult<'a, Vec<TokenTree>> {\n         let mut tts = Vec::new();\n         while self.token != token::Eof {\n-            tts.push(self.parse_token_tree()?);\n+            tts.push(self.parse_token_tree());\n         }\n         Ok(tts)\n     }"}]}