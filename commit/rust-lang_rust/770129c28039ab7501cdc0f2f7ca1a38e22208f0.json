{"sha": "770129c28039ab7501cdc0f2f7ca1a38e22208f0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc3MDEyOWMyODAzOWFiNzUwMWNkYzBmMmY3Y2ExYTM4ZTIyMjA4ZjA=", "commit": {"author": {"name": "lqd", "email": "remy.rakic+github@gmail.com", "date": "2019-07-16T15:33:16Z"}, "committer": {"name": "lqd", "email": "remy.rakic+github@gmail.com", "date": "2019-07-22T10:46:54Z"}, "message": "Add test to check that assignments to projections do not kill too many loans", "tree": {"sha": "8bb67e09b92297cabc1f627fab49aa0a64d4a412", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8bb67e09b92297cabc1f627fab49aa0a64d4a412"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/770129c28039ab7501cdc0f2f7ca1a38e22208f0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/770129c28039ab7501cdc0f2f7ca1a38e22208f0", "html_url": "https://github.com/rust-lang/rust/commit/770129c28039ab7501cdc0f2f7ca1a38e22208f0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/770129c28039ab7501cdc0f2f7ca1a38e22208f0/comments", "author": {"login": "lqd", "id": 247183, "node_id": "MDQ6VXNlcjI0NzE4Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/247183?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lqd", "html_url": "https://github.com/lqd", "followers_url": "https://api.github.com/users/lqd/followers", "following_url": "https://api.github.com/users/lqd/following{/other_user}", "gists_url": "https://api.github.com/users/lqd/gists{/gist_id}", "starred_url": "https://api.github.com/users/lqd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lqd/subscriptions", "organizations_url": "https://api.github.com/users/lqd/orgs", "repos_url": "https://api.github.com/users/lqd/repos", "events_url": "https://api.github.com/users/lqd/events{/privacy}", "received_events_url": "https://api.github.com/users/lqd/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lqd", "id": 247183, "node_id": "MDQ6VXNlcjI0NzE4Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/247183?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lqd", "html_url": "https://github.com/lqd", "followers_url": "https://api.github.com/users/lqd/followers", "following_url": "https://api.github.com/users/lqd/following{/other_user}", "gists_url": "https://api.github.com/users/lqd/gists{/gist_id}", "starred_url": "https://api.github.com/users/lqd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lqd/subscriptions", "organizations_url": "https://api.github.com/users/lqd/orgs", "repos_url": "https://api.github.com/users/lqd/repos", "events_url": "https://api.github.com/users/lqd/events{/privacy}", "received_events_url": "https://api.github.com/users/lqd/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d41e002111dd61efa08d996cfc1085fc00472288", "url": "https://api.github.com/repos/rust-lang/rust/commits/d41e002111dd61efa08d996cfc1085fc00472288", "html_url": "https://github.com/rust-lang/rust/commit/d41e002111dd61efa08d996cfc1085fc00472288"}], "stats": {"total": 101, "additions": 101, "deletions": 0}, "files": [{"sha": "c0ba1b983fc35ebff2668d270a370a46a9db6b8e", "filename": "src/test/ui/nll/polonius/assignment-to-differing-field.rs", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/770129c28039ab7501cdc0f2f7ca1a38e22208f0/src%2Ftest%2Fui%2Fnll%2Fpolonius%2Fassignment-to-differing-field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/770129c28039ab7501cdc0f2f7ca1a38e22208f0/src%2Ftest%2Fui%2Fnll%2Fpolonius%2Fassignment-to-differing-field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fpolonius%2Fassignment-to-differing-field.rs?ref=770129c28039ab7501cdc0f2f7ca1a38e22208f0", "patch": "@@ -0,0 +1,50 @@\n+#![allow(dead_code)]\n+\n+// Compared to `assignment-kills-loans.rs`, we check here\n+// that we do not kill too many borrows. Assignments to the `.1`\n+// field projections should leave the borrows on `.0` intact.\n+\n+// compile-flags: -Z borrowck=mir -Z polonius\n+// ignore-compare-mode-nll\n+\n+struct List<T> {\n+    value: T,\n+    next: Option<Box<List<T>>>,\n+}\n+\n+\n+fn assignment_to_field_projection<'a, T>(\n+    mut list: (&'a mut List<T>, &'a mut List<T>),\n+) -> Vec<&'a mut T> {\n+    let mut result = vec![];\n+    loop {\n+        result.push(&mut (list.0).value);\n+        //~^ ERROR cannot borrow `list.0.value` as mutable\n+\n+        if let Some(n) = (list.0).next.as_mut() {\n+        //~^ ERROR cannot borrow `list.0.next` as mutable\n+            list.1 = n;\n+        } else {\n+            return result;\n+        }\n+    }\n+}\n+\n+fn assignment_through_projection_chain<'a, T>(\n+    mut list: (((((Box<&'a mut List<T>>, Box<&'a mut List<T>>),),),),),\n+) -> Vec<&'a mut T> {\n+    let mut result = vec![];\n+    loop {\n+        result.push(&mut ((((list.0).0).0).0).0.value);\n+        //~^ ERROR cannot borrow `list.0.0.0.0.0.value` as mutable\n+\n+        if let Some(n) = ((((list.0).0).0).0).0.next.as_mut() {\n+        //~^ ERROR cannot borrow `list.0.0.0.0.0.next` as mutable\n+            *((((list.0).0).0).0).1 = n;\n+        } else {\n+            return result;\n+        }\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "07ca021b53bce5b8ebadc036173f2139c8b17206", "filename": "src/test/ui/nll/polonius/assignment-to-differing-field.stderr", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/770129c28039ab7501cdc0f2f7ca1a38e22208f0/src%2Ftest%2Fui%2Fnll%2Fpolonius%2Fassignment-to-differing-field.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/770129c28039ab7501cdc0f2f7ca1a38e22208f0/src%2Ftest%2Fui%2Fnll%2Fpolonius%2Fassignment-to-differing-field.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fpolonius%2Fassignment-to-differing-field.stderr?ref=770129c28039ab7501cdc0f2f7ca1a38e22208f0", "patch": "@@ -0,0 +1,51 @@\n+error[E0499]: cannot borrow `list.0.value` as mutable more than once at a time\n+  --> $DIR/assignment-to-differing-field.rs:21:21\n+   |\n+LL | fn assignment_to_field_projection<'a, T>(\n+   |                                   -- lifetime `'a` defined here\n+...\n+LL |         result.push(&mut (list.0).value);\n+   |                     ^^^^^^^^^^^^^^^^^^^ mutable borrow starts here in previous iteration of loop\n+...\n+LL |             return result;\n+   |                    ------ returning this value requires that `list.0.value` is borrowed for `'a`\n+\n+error[E0499]: cannot borrow `list.0.next` as mutable more than once at a time\n+  --> $DIR/assignment-to-differing-field.rs:24:26\n+   |\n+LL | fn assignment_to_field_projection<'a, T>(\n+   |                                   -- lifetime `'a` defined here\n+...\n+LL |         if let Some(n) = (list.0).next.as_mut() {\n+   |                          ^^^^^^^^^^^^^---------\n+   |                          |\n+   |                          mutable borrow starts here in previous iteration of loop\n+   |                          argument requires that `list.0.next` is borrowed for `'a`\n+\n+error[E0499]: cannot borrow `list.0.0.0.0.0.value` as mutable more than once at a time\n+  --> $DIR/assignment-to-differing-field.rs:38:21\n+   |\n+LL | fn assignment_through_projection_chain<'a, T>(\n+   |                                        -- lifetime `'a` defined here\n+...\n+LL |         result.push(&mut ((((list.0).0).0).0).0.value);\n+   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ mutable borrow starts here in previous iteration of loop\n+...\n+LL |             return result;\n+   |                    ------ returning this value requires that `list.0.0.0.0.0.value` is borrowed for `'a`\n+\n+error[E0499]: cannot borrow `list.0.0.0.0.0.next` as mutable more than once at a time\n+  --> $DIR/assignment-to-differing-field.rs:41:26\n+   |\n+LL | fn assignment_through_projection_chain<'a, T>(\n+   |                                        -- lifetime `'a` defined here\n+...\n+LL |         if let Some(n) = ((((list.0).0).0).0).0.next.as_mut() {\n+   |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^---------\n+   |                          |\n+   |                          mutable borrow starts here in previous iteration of loop\n+   |                          argument requires that `list.0.0.0.0.0.next` is borrowed for `'a`\n+\n+error: aborting due to 4 previous errors\n+\n+For more information about this error, try `rustc --explain E0499`."}]}