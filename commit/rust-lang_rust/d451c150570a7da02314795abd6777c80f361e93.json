{"sha": "d451c150570a7da02314795abd6777c80f361e93", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ0NTFjMTUwNTcwYTdkYTAyMzE0Nzk1YWJkNjc3N2M4MGYzNjFlOTM=", "commit": {"author": {"name": "Nathaniel Herman", "email": "nherman@college.harvard.edu", "date": "2014-01-25T17:00:46Z"}, "committer": {"name": "Nathaniel Herman", "email": "nherman@college.harvard.edu", "date": "2014-01-30T23:41:20Z"}, "message": "Make shift_ref and mut_shift_ref return Option instead of failing", "tree": {"sha": "856dcca6e4e53e43ea17fcb802c5f4c52f5999f3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/856dcca6e4e53e43ea17fcb802c5f4c52f5999f3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d451c150570a7da02314795abd6777c80f361e93", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d451c150570a7da02314795abd6777c80f361e93", "html_url": "https://github.com/rust-lang/rust/commit/d451c150570a7da02314795abd6777c80f361e93", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d451c150570a7da02314795abd6777c80f361e93/comments", "author": {"login": "nathanielherman", "id": 5169954, "node_id": "MDQ6VXNlcjUxNjk5NTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/5169954?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nathanielherman", "html_url": "https://github.com/nathanielherman", "followers_url": "https://api.github.com/users/nathanielherman/followers", "following_url": "https://api.github.com/users/nathanielherman/following{/other_user}", "gists_url": "https://api.github.com/users/nathanielherman/gists{/gist_id}", "starred_url": "https://api.github.com/users/nathanielherman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nathanielherman/subscriptions", "organizations_url": "https://api.github.com/users/nathanielherman/orgs", "repos_url": "https://api.github.com/users/nathanielherman/repos", "events_url": "https://api.github.com/users/nathanielherman/events{/privacy}", "received_events_url": "https://api.github.com/users/nathanielherman/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nathanielherman", "id": 5169954, "node_id": "MDQ6VXNlcjUxNjk5NTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/5169954?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nathanielherman", "html_url": "https://github.com/nathanielherman", "followers_url": "https://api.github.com/users/nathanielherman/followers", "following_url": "https://api.github.com/users/nathanielherman/following{/other_user}", "gists_url": "https://api.github.com/users/nathanielherman/gists{/gist_id}", "starred_url": "https://api.github.com/users/nathanielherman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nathanielherman/subscriptions", "organizations_url": "https://api.github.com/users/nathanielherman/orgs", "repos_url": "https://api.github.com/users/nathanielherman/repos", "events_url": "https://api.github.com/users/nathanielherman/events{/privacy}", "received_events_url": "https://api.github.com/users/nathanielherman/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3427137f667e7def78f12a69af7d8beb2fcd5e65", "url": "https://api.github.com/repos/rust-lang/rust/commits/3427137f667e7def78f12a69af7d8beb2fcd5e65", "html_url": "https://github.com/rust-lang/rust/commit/3427137f667e7def78f12a69af7d8beb2fcd5e65"}], "stats": {"total": 46, "additions": 21, "deletions": 25}, "files": [{"sha": "4a6e2e1843cf7d2dde45bf8e74473fd81b9f7ef7", "filename": "src/libextra/ringbuf.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d451c150570a7da02314795abd6777c80f361e93/src%2Flibextra%2Fringbuf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d451c150570a7da02314795abd6777c80f361e93/src%2Flibextra%2Fringbuf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fringbuf.rs?ref=d451c150570a7da02314795abd6777c80f361e93", "patch": "@@ -303,7 +303,7 @@ impl<'a, T> Iterator<&'a mut T> for MutItems<'a, T> {\n             &mut self.remaining2\n         };\n         self.nelts -= 1;\n-        Some(r.mut_shift_ref().get_mut_ref())\n+        Some(r.mut_shift_ref().unwrap().get_mut_ref())\n     }\n \n     #[inline]"}, {"sha": "aa02c48f46d1f308266d002ea6aac4255d54caae", "filename": "src/libstd/vec.rs", "status": "modified", "additions": 20, "deletions": 24, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/d451c150570a7da02314795abd6777c80f361e93/src%2Flibstd%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d451c150570a7da02314795abd6777c80f361e93/src%2Flibstd%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fvec.rs?ref=d451c150570a7da02314795abd6777c80f361e93", "patch": "@@ -999,14 +999,15 @@ pub trait ImmutableVector<'a, T> {\n      * Equivalent to:\n      *\n      * ```\n+     *     if self.len() == 0 { return None }\n      *     let head = &self[0];\n      *     *self = self.slice_from(1);\n-     *     head\n+     *     Some(head)\n      * ```\n      *\n-     * Fails if slice is empty.\n+     * Returns `None` if vector is empty\n      */\n-    fn shift_ref(&mut self) -> &'a T;\n+    fn shift_ref(&mut self) -> Option<&'a T>;\n \n     /**\n      * Returns a mutable reference to the last element in this slice\n@@ -1182,10 +1183,11 @@ impl<'a,T> ImmutableVector<'a, T> for &'a [T] {\n         self.iter().map(f).collect()\n     }\n \n-    fn shift_ref(&mut self) -> &'a T {\n+    fn shift_ref(&mut self) -> Option<&'a T> {\n+        if self.len() == 0 { return None; }\n         unsafe {\n             let s: &mut Slice<T> = cast::transmute(self);\n-            &*raw::shift_ptr(s)\n+            Some(&*raw::shift_ptr(s))\n         }\n     }\n \n@@ -2057,14 +2059,15 @@ pub trait MutableVector<'a, T> {\n      * Equivalent to:\n      *\n      * ```\n+     *     if self.len() == 0 { return None; }\n      *     let head = &mut self[0];\n      *     *self = self.mut_slice_from(1);\n-     *     head\n+     *     Some(head)\n      * ```\n      *\n-     * Fails if slice is empty.\n+     * Returns `None` if slice is empty\n      */\n-    fn mut_shift_ref(&mut self) -> &'a mut T;\n+    fn mut_shift_ref(&mut self) -> Option<&'a mut T>;\n \n     /**\n      * Returns a mutable reference to the last element in this slice\n@@ -2314,10 +2317,11 @@ impl<'a,T> MutableVector<'a, T> for &'a mut [T] {\n         MutChunks { v: self, chunk_size: chunk_size }\n     }\n \n-    fn mut_shift_ref(&mut self) -> &'a mut T {\n+    fn mut_shift_ref(&mut self) -> Option<&'a mut T> {\n+        if self.len() == 0 { return None; }\n         unsafe {\n             let s: &mut Slice<T> = cast::transmute(self);\n-            cast::transmute_mut(&*raw::shift_ptr(s))\n+            Some(cast::transmute_mut(&*raw::shift_ptr(s)))\n         }\n     }\n \n@@ -4194,17 +4198,13 @@ mod tests {\n     fn test_shift_ref() {\n         let mut x: &[int] = [1, 2, 3, 4, 5];\n         let h = x.shift_ref();\n-        assert_eq!(*h, 1);\n+        assert_eq!(*h.unwrap(), 1);\n         assert_eq!(x.len(), 4);\n         assert_eq!(x[0], 2);\n         assert_eq!(x[3], 5);\n-    }\n \n-    #[test]\n-    #[should_fail]\n-    fn test_shift_ref_empty() {\n-        let mut x: &[int] = [];\n-        x.shift_ref();\n+        let mut y: &[int] = [];\n+        assert_eq!(y.shift_ref(), None);\n     }\n \n     #[test]\n@@ -4284,17 +4284,13 @@ mod tests {\n     fn test_mut_shift_ref() {\n         let mut x: &mut [int] = [1, 2, 3, 4, 5];\n         let h = x.mut_shift_ref();\n-        assert_eq!(*h, 1);\n+        assert_eq!(*h.unwrap(), 1);\n         assert_eq!(x.len(), 4);\n         assert_eq!(x[0], 2);\n         assert_eq!(x[3], 5);\n-    }\n \n-    #[test]\n-    #[should_fail]\n-    fn test_mut_shift_ref_empty() {\n-        let mut x: &mut [int] = [];\n-        x.mut_shift_ref();\n+        let mut y: &mut [int] = [];\n+        assert!(y.mut_shift_ref().is_none());\n     }\n \n     #[test]"}]}