{"sha": "1623978dc41701201ec4daf36b3f748d661e7194", "node_id": "C_kwDOAAsO6NoAKDE2MjM5NzhkYzQxNzAxMjAxZWM0ZGFmMzZiM2Y3NDhkNjYxZTcxOTQ", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-13T16:26:25Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-13T16:26:25Z"}, "message": "Auto merge of #111535 - RalfJung:miri, r=RalfJung\n\nupdate Miri\n\nNeeded to get miri-test-libstd working again", "tree": {"sha": "07a08d53fc151edfa8368cab78a7593fea926bde", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/07a08d53fc151edfa8368cab78a7593fea926bde"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1623978dc41701201ec4daf36b3f748d661e7194", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1623978dc41701201ec4daf36b3f748d661e7194", "html_url": "https://github.com/rust-lang/rust/commit/1623978dc41701201ec4daf36b3f748d661e7194", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1623978dc41701201ec4daf36b3f748d661e7194/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dd8ec9c88d4d87986cbf2083c398ab6c52dc3f80", "url": "https://api.github.com/repos/rust-lang/rust/commits/dd8ec9c88d4d87986cbf2083c398ab6c52dc3f80", "html_url": "https://github.com/rust-lang/rust/commit/dd8ec9c88d4d87986cbf2083c398ab6c52dc3f80"}, {"sha": "d8815efdae5d9cf20c75f454f0b44673437ef695", "url": "https://api.github.com/repos/rust-lang/rust/commits/d8815efdae5d9cf20c75f454f0b44673437ef695", "html_url": "https://github.com/rust-lang/rust/commit/d8815efdae5d9cf20c75f454f0b44673437ef695"}], "stats": {"total": 126, "additions": 95, "deletions": 31}, "files": [{"sha": "60686c87359d93d3aa1558ee9275719a5736e7fd", "filename": "Cargo.lock", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1623978dc41701201ec4daf36b3f748d661e7194/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/1623978dc41701201ec4daf36b3f748d661e7194/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=1623978dc41701201ec4daf36b3f748d661e7194", "patch": "@@ -5123,9 +5123,9 @@ checksum = \"9e79c4d996edb816c91e4308506774452e55e95c3c9de07b6729e17e15a5ef81\"\n \n [[package]]\n name = \"ui_test\"\n-version = \"0.9.0\"\n+version = \"0.10.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"95033b0e41b8018013d99a6f1486c1ae5bd080378ced60c5f797e93842423b33\"\n+checksum = \"191a442639ea102fa62671026047e51d574bfda44b7fdf32151d7314624c1cd2\"\n dependencies = [\n  \"bstr 1.3.0\",\n  \"cargo-platform\","}, {"sha": "737423a2cd16421e826d93905846b6b1387e0d1f", "filename": "src/tools/miri/Cargo.lock", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1623978dc41701201ec4daf36b3f748d661e7194/src%2Ftools%2Fmiri%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/1623978dc41701201ec4daf36b3f748d661e7194/src%2Ftools%2Fmiri%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2FCargo.lock?ref=1623978dc41701201ec4daf36b3f748d661e7194", "patch": "@@ -820,9 +820,9 @@ dependencies = [\n \n [[package]]\n name = \"ui_test\"\n-version = \"0.9.0\"\n+version = \"0.10.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"95033b0e41b8018013d99a6f1486c1ae5bd080378ced60c5f797e93842423b33\"\n+checksum = \"191a442639ea102fa62671026047e51d574bfda44b7fdf32151d7314624c1cd2\"\n dependencies = [\n  \"bstr\",\n  \"cargo-platform\","}, {"sha": "5987b0df8d660fa432c889996a71232f991a2f68", "filename": "src/tools/miri/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1623978dc41701201ec4daf36b3f748d661e7194/src%2Ftools%2Fmiri%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/1623978dc41701201ec4daf36b3f748d661e7194/src%2Ftools%2Fmiri%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2FCargo.toml?ref=1623978dc41701201ec4daf36b3f748d661e7194", "patch": "@@ -39,7 +39,7 @@ libloading = \"0.7\"\n \n [dev-dependencies]\n colored = \"2\"\n-ui_test = \"0.9\"\n+ui_test = \"0.10\"\n rustc_version = \"0.4\"\n # Features chosen to match those required by env_logger, to avoid rebuilds\n regex = { version = \"1.5.5\", default-features = false, features = [\"perf\", \"std\"] }"}, {"sha": "48a46a76a12979ee25016e974beb871cf0973dc2", "filename": "src/tools/miri/miri", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1623978dc41701201ec4daf36b3f748d661e7194/src%2Ftools%2Fmiri%2Fmiri", "raw_url": "https://github.com/rust-lang/rust/raw/1623978dc41701201ec4daf36b3f748d661e7194/src%2Ftools%2Fmiri%2Fmiri", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fmiri?ref=1623978dc41701201ec4daf36b3f748d661e7194", "patch": "@@ -306,7 +306,7 @@ test|bless)\n     # Only in root project as `cargo-miri` has no tests.\n     $CARGO test $CARGO_EXTRA_FLAGS --manifest-path \"$MIRIDIR\"/Cargo.toml \"$@\"\n     ;;\n-run)\n+run|run-dep)\n     # Scan for \"--target\" to overwrite the \"MIRI_TEST_TARGET\" env var so\n     # that we set the MIRI_SYSROOT up the right way.\n     FOUND_TARGET_OPT=0\n@@ -323,11 +323,17 @@ run)\n         # Make sure Miri actually uses this target.\n         MIRIFLAGS=\"$MIRIFLAGS --target $MIRI_TEST_TARGET\"\n     fi\n+\n     # First build and get a sysroot.\n     $CARGO build $CARGO_EXTRA_FLAGS --manifest-path \"$MIRIDIR\"/Cargo.toml\n     find_sysroot\n     # Then run the actual command.\n-    exec $CARGO run $CARGO_EXTRA_FLAGS --manifest-path \"$MIRIDIR\"/Cargo.toml -- $MIRIFLAGS \"$@\"\n+    \n+    if [ \"$COMMAND\" = \"run-dep\" ]; then\n+        exec $CARGO test --test compiletest $CARGO_EXTRA_FLAGS --manifest-path \"$MIRIDIR\"/Cargo.toml -- --miri-run-dep-mode $MIRIFLAGS \"$@\"\n+    else\n+        exec $CARGO run $CARGO_EXTRA_FLAGS --manifest-path \"$MIRIDIR\"/Cargo.toml -- $MIRIFLAGS \"$@\"\n+    fi\n     ;;\n fmt)\n     find \"$MIRIDIR\" -not \\( -name target -prune \\) -name '*.rs' \\"}, {"sha": "b450f986149658c4f36d83f36e56d970ce5703ee", "filename": "src/tools/miri/rust-version", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1623978dc41701201ec4daf36b3f748d661e7194/src%2Ftools%2Fmiri%2Frust-version", "raw_url": "https://github.com/rust-lang/rust/raw/1623978dc41701201ec4daf36b3f748d661e7194/src%2Ftools%2Fmiri%2Frust-version", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Frust-version?ref=1623978dc41701201ec4daf36b3f748d661e7194", "patch": "@@ -1 +1 @@\n-0b795044c6f0854445f1f2bb6443e87848e150d1\n+69fef92ab2f287f072b66fb7b4f62c8bb4acba43"}, {"sha": "a1e949183ad4026cc12f76bf661758faccd80d73", "filename": "src/tools/miri/src/borrow_tracker/stacked_borrows/stack.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1623978dc41701201ec4daf36b3f748d661e7194/src%2Ftools%2Fmiri%2Fsrc%2Fborrow_tracker%2Fstacked_borrows%2Fstack.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1623978dc41701201ec4daf36b3f748d661e7194/src%2Ftools%2Fmiri%2Fsrc%2Fborrow_tracker%2Fstacked_borrows%2Fstack.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fborrow_tracker%2Fstacked_borrows%2Fstack.rs?ref=1623978dc41701201ec4daf36b3f748d661e7194", "patch": "@@ -83,7 +83,7 @@ impl Stack {\n         self.borrows.truncate(write_idx);\n \n         #[cfg(not(feature = \"stack-cache\"))]\n-        drop(first_removed); // This is only needed for the stack-cache\n+        let _unused = first_removed; // This is only needed for the stack-cache\n \n         #[cfg(feature = \"stack-cache\")]\n         if let Some(first_removed) = first_removed {"}, {"sha": "114c66253f72fc1b8bd88142c49eb7f76af667a9", "filename": "src/tools/miri/src/shims/intrinsics/simd.rs", "status": "modified", "additions": 21, "deletions": 5, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/1623978dc41701201ec4daf36b3f748d661e7194/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fintrinsics%2Fsimd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1623978dc41701201ec4daf36b3f748d661e7194/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fintrinsics%2Fsimd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fintrinsics%2Fsimd.rs?ref=1623978dc41701201ec4daf36b3f748d661e7194", "patch": "@@ -421,34 +421,50 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n                 }\n             }\n             #[rustfmt::skip]\n-            \"cast\" | \"as\" => {\n+            \"cast\" | \"as\" | \"cast_ptr\" | \"expose_addr\" | \"from_exposed_addr\" => {\n                 let [op] = check_arg_count(args)?;\n                 let (op, op_len) = this.operand_to_simd(op)?;\n                 let (dest, dest_len) = this.place_to_simd(dest)?;\n \n                 assert_eq!(dest_len, op_len);\n \n+                let unsafe_cast = intrinsic_name == \"cast\";\n                 let safe_cast = intrinsic_name == \"as\";\n+                let ptr_cast = intrinsic_name == \"cast_ptr\";\n+                let expose_cast = intrinsic_name == \"expose_addr\";\n+                let from_exposed_cast = intrinsic_name == \"from_exposed_addr\";\n \n                 for i in 0..dest_len {\n                     let op = this.read_immediate(&this.mplace_index(&op, i)?.into())?;\n                     let dest = this.mplace_index(&dest, i)?;\n \n                     let val = match (op.layout.ty.kind(), dest.layout.ty.kind()) {\n                         // Int-to-(int|float): always safe\n-                        (ty::Int(_) | ty::Uint(_), ty::Int(_) | ty::Uint(_) | ty::Float(_)) =>\n+                        (ty::Int(_) | ty::Uint(_), ty::Int(_) | ty::Uint(_) | ty::Float(_)) if safe_cast || unsafe_cast =>\n                             this.int_to_int_or_float(&op, dest.layout.ty)?,\n                         // Float-to-float: always safe\n-                        (ty::Float(_), ty::Float(_)) =>\n+                        (ty::Float(_), ty::Float(_)) if safe_cast || unsafe_cast =>\n                             this.float_to_float_or_int(&op, dest.layout.ty)?,\n                         // Float-to-int in safe mode\n                         (ty::Float(_), ty::Int(_) | ty::Uint(_)) if safe_cast =>\n                             this.float_to_float_or_int(&op, dest.layout.ty)?,\n                         // Float-to-int in unchecked mode\n-                        (ty::Float(FloatTy::F32), ty::Int(_) | ty::Uint(_)) if !safe_cast =>\n+                        (ty::Float(FloatTy::F32), ty::Int(_) | ty::Uint(_)) if unsafe_cast =>\n                             this.float_to_int_unchecked(op.to_scalar().to_f32()?, dest.layout.ty)?.into(),\n-                        (ty::Float(FloatTy::F64), ty::Int(_) | ty::Uint(_)) if !safe_cast =>\n+                        (ty::Float(FloatTy::F64), ty::Int(_) | ty::Uint(_)) if unsafe_cast =>\n                             this.float_to_int_unchecked(op.to_scalar().to_f64()?, dest.layout.ty)?.into(),\n+                        // Ptr-to-ptr cast\n+                        (ty::RawPtr(..), ty::RawPtr(..)) if ptr_cast => {\n+                            this.ptr_to_ptr(&op, dest.layout.ty)?\n+                        }\n+                        // Ptr/Int casts\n+                        (ty::RawPtr(..), ty::Int(_) | ty::Uint(_)) if expose_cast => {\n+                            this.pointer_expose_address_cast(&op, dest.layout.ty)?\n+                        }\n+                        (ty::Int(_) | ty::Uint(_), ty::RawPtr(..)) if from_exposed_cast => {\n+                            this.pointer_from_exposed_address_cast(&op, dest.layout.ty)?\n+                        }\n+                        // Error otherwise\n                         _ =>\n                             throw_unsup_format!(\n                                 \"Unsupported SIMD cast from element type {from_ty} to {to_ty}\","}, {"sha": "fa06c4b6a12881fac4e2e00fa81fd351756c2088", "filename": "src/tools/miri/tests/compiletest.rs", "status": "modified", "additions": 47, "deletions": 16, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/1623978dc41701201ec4daf36b3f748d661e7194/src%2Ftools%2Fmiri%2Ftests%2Fcompiletest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1623978dc41701201ec4daf36b3f748d661e7194/src%2Ftools%2Fmiri%2Ftests%2Fcompiletest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Fcompiletest.rs?ref=1623978dc41701201ec4daf36b3f748d661e7194", "patch": "@@ -1,5 +1,6 @@\n use colored::*;\n use regex::bytes::Regex;\n+use std::ffi::OsString;\n use std::path::{Path, PathBuf};\n use std::{env, process::Command};\n use ui_test::status_emitter::StatusEmitter;\n@@ -45,7 +46,7 @@ fn build_so_for_c_ffi_tests() -> PathBuf {\n     so_file_path\n }\n \n-fn run_tests(mode: Mode, path: &str, target: &str, with_dependencies: bool) -> Result<()> {\n+fn test_config(target: &str, path: &str, mode: Mode, with_dependencies: bool) -> Config {\n     // Miri is rustc-like, so we create a default builder for rustc and modify it\n     let mut program = CommandBuilder::rustc();\n     program.program = miri_path();\n@@ -103,6 +104,26 @@ fn run_tests(mode: Mode, path: &str, target: &str, with_dependencies: bool) -> R\n         ..Config::default()\n     };\n \n+    let use_std = env::var_os(\"MIRI_NO_STD\").is_none();\n+\n+    if with_dependencies && use_std {\n+        config.dependencies_crate_manifest_path =\n+            Some(Path::new(\"test_dependencies\").join(\"Cargo.toml\"));\n+        config.dependency_builder.args = vec![\n+            \"run\".into(),\n+            \"--manifest-path\".into(),\n+            \"cargo-miri/Cargo.toml\".into(),\n+            \"--\".into(),\n+            \"miri\".into(),\n+            \"run\".into(), // There is no `cargo miri build` so we just use `cargo miri run`.\n+        ];\n+    }\n+    config\n+}\n+\n+fn run_tests(mode: Mode, path: &str, target: &str, with_dependencies: bool) -> Result<()> {\n+    let mut config = test_config(target, path, mode, with_dependencies);\n+\n     // Handle command-line arguments.\n     let mut after_dashdash = false;\n     config.path_filter.extend(std::env::args().skip(1).filter(|arg| {\n@@ -126,21 +147,6 @@ fn run_tests(mode: Mode, path: &str, target: &str, with_dependencies: bool) -> R\n         }\n     }));\n \n-    let use_std = env::var_os(\"MIRI_NO_STD\").is_none();\n-\n-    if with_dependencies && use_std {\n-        config.dependencies_crate_manifest_path =\n-            Some(Path::new(\"test_dependencies\").join(\"Cargo.toml\"));\n-        config.dependency_builder.args = vec![\n-            \"run\".into(),\n-            \"--manifest-path\".into(),\n-            \"cargo-miri/Cargo.toml\".into(),\n-            \"--\".into(),\n-            \"miri\".into(),\n-            \"run\".into(), // There is no `cargo miri build` so we just use `cargo miri run`.\n-        ];\n-    }\n-\n     eprintln!(\"   Compiler: {}\", config.program.display());\n     ui_test::run_tests_generic(\n         config,\n@@ -226,8 +232,18 @@ fn get_target() -> String {\n \n fn main() -> Result<()> {\n     ui_test::color_eyre::install()?;\n+\n     let target = get_target();\n \n+    let mut args = std::env::args_os();\n+\n+    // Skip the program name and check whether this is a `./miri run-dep` invocation\n+    if let Some(first) = args.nth(1) {\n+        if first == \"--miri-run-dep-mode\" {\n+            return run_dep_mode(target, args);\n+        }\n+    }\n+\n     // Add a test env var to do environment communication tests.\n     env::set_var(\"MIRI_ENV_VAR_TEST\", \"0\");\n     // Let the tests know where to store temp files (they might run for a different target, which can make this hard to find).\n@@ -250,6 +266,21 @@ fn main() -> Result<()> {\n     Ok(())\n }\n \n+fn run_dep_mode(target: String, mut args: impl Iterator<Item = OsString>) -> Result<()> {\n+    let path = args.next().expect(\"./miri run-dep must be followed by a file name\");\n+    let mut config = test_config(&target, \"\", Mode::Yolo, /* with dependencies */ true);\n+    config.program.args.remove(0); // remove the `--error-format=json` argument\n+    config.program.args.push(\"--color\".into());\n+    config.program.args.push(\"always\".into());\n+    let mut cmd = ui_test::test_command(config, Path::new(&path))?;\n+    // Separate the arguments to the `cargo miri` invocation from\n+    // the arguments to the interpreted prog\n+    cmd.arg(\"--\");\n+    cmd.args(args);\n+    println!(\"{cmd:?}\");\n+    if cmd.spawn()?.wait()?.success() { Ok(()) } else { std::process::exit(1) }\n+}\n+\n /// This is a custom renderer for `ui_test` output that does not emit github actions\n /// `group`s, while still producing regular github actions messages on test failures.\n struct TextAndGha;"}, {"sha": "443f481c0874af2445f62ac245fe12e93a26594b", "filename": "src/tools/miri/tests/fail/uninit_buffer_with_provenance.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1623978dc41701201ec4daf36b3f748d661e7194/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Funinit_buffer_with_provenance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1623978dc41701201ec4daf36b3f748d661e7194/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Funinit_buffer_with_provenance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Funinit_buffer_with_provenance.rs?ref=1623978dc41701201ec4daf36b3f748d661e7194", "patch": "@@ -1,7 +1,6 @@\n //@error-in-other-file: memory is uninitialized at [0x4..0x8]\n //@normalize-stderr-test: \"a[0-9]+\" -> \"ALLOC\"\n #![feature(strict_provenance)]\n-\n #![allow(drop_copy)]\n \n // Test printing allocations that contain single-byte provenance."}, {"sha": "303c99834f5d8cdf14c30e58a041ee88a59deb35", "filename": "src/tools/miri/tests/pass/portable-simd-ptrs.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1623978dc41701201ec4daf36b3f748d661e7194/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Fportable-simd-ptrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1623978dc41701201ec4daf36b3f748d661e7194/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Fportable-simd-ptrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Fportable-simd-ptrs.rs?ref=1623978dc41701201ec4daf36b3f748d661e7194", "patch": "@@ -0,0 +1,12 @@\n+// Separate test without strict provenance\n+//@compile-flags: -Zmiri-permissive-provenance\n+#![feature(portable_simd, platform_intrinsics)]\n+use std::ptr;\n+use std::simd::*;\n+\n+fn main() {\n+    // Pointer casts\n+    let _val: Simd<*const u8, 4> = Simd::<*const i32, 4>::splat(ptr::null()).cast_ptr();\n+    let addrs = Simd::<*const i32, 4>::splat(ptr::null()).expose_addr();\n+    let _ptrs = Simd::<*const i32, 4>::from_exposed_addr(addrs);\n+}"}]}