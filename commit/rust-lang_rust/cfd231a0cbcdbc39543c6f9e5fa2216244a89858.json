{"sha": "cfd231a0cbcdbc39543c6f9e5fa2216244a89858", "node_id": "C_kwDOAAsO6NoAKGNmZDIzMWEwY2JjZGJjMzk1NDNjNmY5ZTVmYTIyMTYyNDRhODk4NTg", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-07-30T15:09:48Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-07-30T15:09:48Z"}, "message": "Rollup merge of #99895 - compiler-errors:type-ascription-aint-cast, r=davidtwco\n\ndon't call type ascription \"cast\"\n\nNoticed in #99885", "tree": {"sha": "13e392f26f59ffc5cc14cfe4aaad71b1715ce5c0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/13e392f26f59ffc5cc14cfe4aaad71b1715ce5c0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cfd231a0cbcdbc39543c6f9e5fa2216244a89858", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJi5Um9CRBK7hj4Ov3rIwAAPggIAK1SGB4VBpbGeWqU9TjKzNaL\nUN2hFwmUdyGV4TNJGHaxP3L52VE30sEEXlrBZXdr1Zi8ncgnVEIyjdQLRXWSoZit\nWQ6U52lmgUB2z4OMaQdwAdfj6QOAjP/te7B3gWcrMbb9D3P5Frs6rDkpmr7HdDIc\nxQgOd8Bpm0nc2M/iUuRnnspzC13nDl4EEWNAv+UaE7XSsh6pDy4+r/IbqM19GE8L\nVo/TZ8mKkJK92pBNeTSJZbVgkwvvXWHKhLxwkglkIjhL7ClLwGPxKmUxYpM8BLYz\n8kkLekTSG97UtQRCfTCbpSYgT3cdmdXNW1B9kmTg7sg/aL10kDIvNPxZf46M7tA=\n=hxe/\n-----END PGP SIGNATURE-----\n", "payload": "tree 13e392f26f59ffc5cc14cfe4aaad71b1715ce5c0\nparent eb378d2015d10b6b99955512ab005665f417e014\nparent 7cdd937bb821881f82ee367757cc45ad74e8698b\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1659193788 +0530\ncommitter GitHub <noreply@github.com> 1659193788 +0530\n\nRollup merge of #99895 - compiler-errors:type-ascription-aint-cast, r=davidtwco\n\ndon't call type ascription \"cast\"\n\nNoticed in #99885\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cfd231a0cbcdbc39543c6f9e5fa2216244a89858", "html_url": "https://github.com/rust-lang/rust/commit/cfd231a0cbcdbc39543c6f9e5fa2216244a89858", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cfd231a0cbcdbc39543c6f9e5fa2216244a89858/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eb378d2015d10b6b99955512ab005665f417e014", "url": "https://api.github.com/repos/rust-lang/rust/commits/eb378d2015d10b6b99955512ab005665f417e014", "html_url": "https://github.com/rust-lang/rust/commit/eb378d2015d10b6b99955512ab005665f417e014"}, {"sha": "7cdd937bb821881f82ee367757cc45ad74e8698b", "url": "https://api.github.com/repos/rust-lang/rust/commits/7cdd937bb821881f82ee367757cc45ad74e8698b", "html_url": "https://github.com/rust-lang/rust/commit/7cdd937bb821881f82ee367757cc45ad74e8698b"}], "stats": {"total": 159, "additions": 80, "deletions": 79}, "files": [{"sha": "c0f661f7dbbf9519d2af1981740608d48556c045", "filename": "compiler/rustc_parse/src/parser/expr.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/cfd231a0cbcdbc39543c6f9e5fa2216244a89858/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfd231a0cbcdbc39543c6f9e5fa2216244a89858/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs?ref=cfd231a0cbcdbc39543c6f9e5fa2216244a89858", "patch": "@@ -827,11 +827,12 @@ impl<'a> Parser<'a> {\n         cast_expr: P<Expr>,\n     ) -> PResult<'a, P<Expr>> {\n         let span = cast_expr.span;\n-        let maybe_ascription_span = if let ExprKind::Type(ascripted_expr, _) = &cast_expr.kind {\n-            Some(ascripted_expr.span.shrink_to_hi().with_hi(span.hi()))\n-        } else {\n-            None\n-        };\n+        let (cast_kind, maybe_ascription_span) =\n+            if let ExprKind::Type(ascripted_expr, _) = &cast_expr.kind {\n+                (\"type ascription\", Some(ascripted_expr.span.shrink_to_hi().with_hi(span.hi())))\n+            } else {\n+                (\"cast\", None)\n+            };\n \n         // Save the memory location of expr before parsing any following postfix operators.\n         // This will be compared with the memory location of the output expression.\n@@ -844,7 +845,7 @@ impl<'a> Parser<'a> {\n         // If the resulting expression is not a cast, or has a different memory location, it is an illegal postfix operator.\n         if !matches!(with_postfix.kind, ExprKind::Cast(_, _) | ExprKind::Type(_, _)) || changed {\n             let msg = format!(\n-                \"casts cannot be followed by {}\",\n+                \"{cast_kind} cannot be followed by {}\",\n                 match with_postfix.kind {\n                     ExprKind::Index(_, _) => \"indexing\",\n                     ExprKind::Try(_) => \"`?`\","}, {"sha": "7bd4b3a165c3d128339c6556e2a9014b1a8d073e", "filename": "src/test/ui/parser/issues/issue-35813-postfix-after-cast.rs", "status": "modified", "additions": 33, "deletions": 33, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/cfd231a0cbcdbc39543c6f9e5fa2216244a89858/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-35813-postfix-after-cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfd231a0cbcdbc39543c6f9e5fa2216244a89858/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-35813-postfix-after-cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-35813-postfix-after-cast.rs?ref=cfd231a0cbcdbc39543c6f9e5fa2216244a89858", "patch": "@@ -8,16 +8,16 @@ use std::pin::Pin;\n // errors and parse such that further code gives useful errors.\n pub fn index_after_as_cast() {\n     vec![1, 2, 3] as Vec<i32>[0];\n-    //~^ ERROR: casts cannot be followed by indexing\n+    //~^ ERROR: cast cannot be followed by indexing\n     vec![1, 2, 3]: Vec<i32>[0];\n-    //~^ ERROR: casts cannot be followed by indexing\n+    //~^ ERROR: type ascription cannot be followed by indexing\n }\n \n pub fn index_after_cast_to_index() {\n     (&[0]) as &[i32][0];\n-    //~^ ERROR: casts cannot be followed by indexing\n+    //~^ ERROR: cast cannot be followed by indexing\n     (&[0i32]): &[i32; 1][0];\n-    //~^ ERROR: casts cannot be followed by indexing\n+    //~^ ERROR: type ascription cannot be followed by indexing\n }\n \n pub fn cast_after_cast() {\n@@ -37,89 +37,89 @@ pub fn cast_after_cast() {\n \n pub fn cast_cast_method_call() {\n     let _ = 0i32: i32: i32.count_ones();\n-    //~^ ERROR: casts cannot be followed by a method call\n+    //~^ ERROR: type ascription cannot be followed by a method call\n     let _ = 0 as i32: i32.count_ones();\n-    //~^ ERROR: casts cannot be followed by a method call\n+    //~^ ERROR: type ascription cannot be followed by a method call\n     let _ = 0i32: i32 as i32.count_ones();\n-    //~^ ERROR: casts cannot be followed by a method call\n+    //~^ ERROR: cast cannot be followed by a method call\n     let _ = 0 as i32 as i32.count_ones();\n-    //~^ ERROR: casts cannot be followed by a method call\n+    //~^ ERROR: cast cannot be followed by a method call\n     let _ = 0i32: i32: i32 as u32 as i32.count_ones();\n-    //~^ ERROR: casts cannot be followed by a method call\n+    //~^ ERROR: cast cannot be followed by a method call\n     let _ = 0i32: i32.count_ones(): u32;\n-    //~^ ERROR: casts cannot be followed by a method call\n+    //~^ ERROR: type ascription cannot be followed by a method call\n     let _ = 0 as i32.count_ones(): u32;\n-    //~^ ERROR: casts cannot be followed by a method call\n+    //~^ ERROR: cast cannot be followed by a method call\n     let _ = 0i32: i32.count_ones() as u32;\n-    //~^ ERROR: casts cannot be followed by a method call\n+    //~^ ERROR: type ascription cannot be followed by a method call\n     let _ = 0 as i32.count_ones() as u32;\n-    //~^ ERROR: casts cannot be followed by a method call\n+    //~^ ERROR: cast cannot be followed by a method call\n     let _ = 0i32: i32: i32.count_ones() as u32 as i32;\n-    //~^ ERROR: casts cannot be followed by a method call\n+    //~^ ERROR: type ascription cannot be followed by a method call\n }\n \n pub fn multiline_error() {\n     let _ = 0\n         as i32\n         .count_ones();\n-    //~^^^ ERROR: casts cannot be followed by a method call\n+    //~^^^ ERROR: cast cannot be followed by a method call\n }\n \n // this tests that the precedence for `!x as Y.Z` is still what we expect\n pub fn precedence() {\n     let x: i32 = &vec![1, 2, 3] as &Vec<i32>[0];\n-    //~^ ERROR: casts cannot be followed by indexing\n+    //~^ ERROR: cast cannot be followed by indexing\n }\n \n pub fn method_calls() {\n     0 as i32.max(0);\n-    //~^ ERROR: casts cannot be followed by a method call\n+    //~^ ERROR: cast cannot be followed by a method call\n     0: i32.max(0);\n-    //~^ ERROR: casts cannot be followed by a method call\n+    //~^ ERROR: type ascription cannot be followed by a method call\n }\n \n pub fn complex() {\n     let _ = format!(\n         \"{} and {}\",\n         if true { 33 } else { 44 } as i32.max(0),\n-        //~^ ERROR: casts cannot be followed by a method call\n+        //~^ ERROR: cast cannot be followed by a method call\n         if true { 33 } else { 44 }: i32.max(0)\n-        //~^ ERROR: casts cannot be followed by a method call\n+        //~^ ERROR: type ascription cannot be followed by a method call\n     );\n }\n \n pub fn in_condition() {\n     if 5u64 as i32.max(0) == 0 {\n-        //~^ ERROR: casts cannot be followed by a method call\n+        //~^ ERROR: cast cannot be followed by a method call\n     }\n     if 5u64: u64.max(0) == 0 {\n-        //~^ ERROR: casts cannot be followed by a method call\n+        //~^ ERROR: type ascription cannot be followed by a method call\n     }\n }\n \n pub fn inside_block() {\n     let _ = if true {\n         5u64 as u32.max(0) == 0\n-        //~^ ERROR: casts cannot be followed by a method call\n+        //~^ ERROR: cast cannot be followed by a method call\n     } else { false };\n     let _ = if true {\n         5u64: u64.max(0) == 0\n-        //~^ ERROR: casts cannot be followed by a method call\n+        //~^ ERROR: type ascription cannot be followed by a method call\n     } else { false };\n }\n \n static bar: &[i32] = &(&[1,2,3] as &[i32][0..1]);\n-//~^ ERROR: casts cannot be followed by indexing\n+//~^ ERROR: cast cannot be followed by indexing\n \n static bar2: &[i32] = &(&[1i32,2,3]: &[i32; 3][0..1]);\n-//~^ ERROR: casts cannot be followed by indexing\n+//~^ ERROR: type ascription cannot be followed by indexing\n \n \n pub fn cast_then_try() -> Result<u64,u64> {\n     Err(0u64) as Result<u64,u64>?;\n-    //~^ ERROR: casts cannot be followed by `?`\n+    //~^ ERROR: cast cannot be followed by `?`\n     Err(0u64): Result<u64,u64>?;\n-    //~^ ERROR: casts cannot be followed by `?`\n+    //~^ ERROR: type ascription cannot be followed by `?`\n     Ok(1)\n }\n \n@@ -143,17 +143,17 @@ pub fn cast_to_fn_should_work() {\n pub fn parens_after_cast_error() {\n     let drop_ptr = drop as fn(u8);\n     drop as fn(u8)(0);\n-    //~^ ERROR: casts cannot be followed by a function call\n+    //~^ ERROR: cast cannot be followed by a function call\n     drop_ptr: fn(u8)(0);\n-    //~^ ERROR: casts cannot be followed by a function call\n+    //~^ ERROR: type ascription cannot be followed by a function call\n }\n \n pub async fn cast_then_await() {\n     Box::pin(noop()) as Pin<Box<dyn Future<Output = ()>>>.await;\n-    //~^ ERROR: casts cannot be followed by `.await`\n+    //~^ ERROR: cast cannot be followed by `.await`\n \n     Box::pin(noop()): Pin<Box<_>>.await;\n-    //~^ ERROR: casts cannot be followed by `.await`\n+    //~^ ERROR: type ascription cannot be followed by `.await`\n }\n \n pub async fn noop() {}\n@@ -167,5 +167,5 @@ pub fn struct_field() {\n     Foo::default() as Foo.bar;\n     //~^ ERROR: cannot be followed by a field access\n     Foo::default(): Foo.bar;\n-    //~^ ERROR: cannot be followed by a field access\n+    //~^ ERROR: type ascription cannot be followed by a field access\n }"}, {"sha": "0c328bde285aa8c7fc3793caa72bf1b4cba99cbd", "filename": "src/test/ui/parser/issues/issue-35813-postfix-after-cast.stderr", "status": "modified", "additions": 34, "deletions": 34, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/cfd231a0cbcdbc39543c6f9e5fa2216244a89858/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-35813-postfix-after-cast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cfd231a0cbcdbc39543c6f9e5fa2216244a89858/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-35813-postfix-after-cast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-35813-postfix-after-cast.stderr?ref=cfd231a0cbcdbc39543c6f9e5fa2216244a89858", "patch": "@@ -1,4 +1,4 @@\n-error: casts cannot be followed by indexing\n+error: cast cannot be followed by indexing\n   --> $DIR/issue-35813-postfix-after-cast.rs:10:5\n    |\n LL |     vec![1, 2, 3] as Vec<i32>[0];\n@@ -9,7 +9,7 @@ help: try surrounding the expression in parentheses\n LL |     (vec![1, 2, 3] as Vec<i32>)[0];\n    |     +                         +\n \n-error: casts cannot be followed by indexing\n+error: type ascription cannot be followed by indexing\n   --> $DIR/issue-35813-postfix-after-cast.rs:12:5\n    |\n LL |     vec![1, 2, 3]: Vec<i32>[0];\n@@ -25,7 +25,7 @@ LL -     vec![1, 2, 3]: Vec<i32>[0];\n LL +     vec![1, 2, 3][0];\n    |\n \n-error: casts cannot be followed by indexing\n+error: cast cannot be followed by indexing\n   --> $DIR/issue-35813-postfix-after-cast.rs:17:5\n    |\n LL |     (&[0]) as &[i32][0];\n@@ -36,7 +36,7 @@ help: try surrounding the expression in parentheses\n LL |     ((&[0]) as &[i32])[0];\n    |     +                +\n \n-error: casts cannot be followed by indexing\n+error: type ascription cannot be followed by indexing\n   --> $DIR/issue-35813-postfix-after-cast.rs:19:5\n    |\n LL |     (&[0i32]): &[i32; 1][0];\n@@ -52,7 +52,7 @@ LL -     (&[0i32]): &[i32; 1][0];\n LL +     (&[0i32])[0];\n    |\n \n-error: casts cannot be followed by a method call\n+error: type ascription cannot be followed by a method call\n   --> $DIR/issue-35813-postfix-after-cast.rs:39:13\n    |\n LL |     let _ = 0i32: i32: i32.count_ones();\n@@ -68,7 +68,7 @@ LL -     let _ = 0i32: i32: i32.count_ones();\n LL +     let _ = 0i32: i32.count_ones();\n    |\n \n-error: casts cannot be followed by a method call\n+error: type ascription cannot be followed by a method call\n   --> $DIR/issue-35813-postfix-after-cast.rs:41:13\n    |\n LL |     let _ = 0 as i32: i32.count_ones();\n@@ -84,7 +84,7 @@ LL -     let _ = 0 as i32: i32.count_ones();\n LL +     let _ = 0 as i32.count_ones();\n    |\n \n-error: casts cannot be followed by a method call\n+error: cast cannot be followed by a method call\n   --> $DIR/issue-35813-postfix-after-cast.rs:43:13\n    |\n LL |     let _ = 0i32: i32 as i32.count_ones();\n@@ -95,7 +95,7 @@ help: try surrounding the expression in parentheses\n LL |     let _ = (0i32: i32 as i32).count_ones();\n    |             +                +\n \n-error: casts cannot be followed by a method call\n+error: cast cannot be followed by a method call\n   --> $DIR/issue-35813-postfix-after-cast.rs:45:13\n    |\n LL |     let _ = 0 as i32 as i32.count_ones();\n@@ -106,7 +106,7 @@ help: try surrounding the expression in parentheses\n LL |     let _ = (0 as i32 as i32).count_ones();\n    |             +               +\n \n-error: casts cannot be followed by a method call\n+error: cast cannot be followed by a method call\n   --> $DIR/issue-35813-postfix-after-cast.rs:47:13\n    |\n LL |     let _ = 0i32: i32: i32 as u32 as i32.count_ones();\n@@ -117,7 +117,7 @@ help: try surrounding the expression in parentheses\n LL |     let _ = (0i32: i32: i32 as u32 as i32).count_ones();\n    |             +                            +\n \n-error: casts cannot be followed by a method call\n+error: type ascription cannot be followed by a method call\n   --> $DIR/issue-35813-postfix-after-cast.rs:49:13\n    |\n LL |     let _ = 0i32: i32.count_ones(): u32;\n@@ -133,7 +133,7 @@ LL -     let _ = 0i32: i32.count_ones(): u32;\n LL +     let _ = 0i32.count_ones(): u32;\n    |\n \n-error: casts cannot be followed by a method call\n+error: cast cannot be followed by a method call\n   --> $DIR/issue-35813-postfix-after-cast.rs:51:13\n    |\n LL |     let _ = 0 as i32.count_ones(): u32;\n@@ -144,7 +144,7 @@ help: try surrounding the expression in parentheses\n LL |     let _ = (0 as i32).count_ones(): u32;\n    |             +        +\n \n-error: casts cannot be followed by a method call\n+error: type ascription cannot be followed by a method call\n   --> $DIR/issue-35813-postfix-after-cast.rs:53:13\n    |\n LL |     let _ = 0i32: i32.count_ones() as u32;\n@@ -160,7 +160,7 @@ LL -     let _ = 0i32: i32.count_ones() as u32;\n LL +     let _ = 0i32.count_ones() as u32;\n    |\n \n-error: casts cannot be followed by a method call\n+error: cast cannot be followed by a method call\n   --> $DIR/issue-35813-postfix-after-cast.rs:55:13\n    |\n LL |     let _ = 0 as i32.count_ones() as u32;\n@@ -171,7 +171,7 @@ help: try surrounding the expression in parentheses\n LL |     let _ = (0 as i32).count_ones() as u32;\n    |             +        +\n \n-error: casts cannot be followed by a method call\n+error: type ascription cannot be followed by a method call\n   --> $DIR/issue-35813-postfix-after-cast.rs:57:13\n    |\n LL |     let _ = 0i32: i32: i32.count_ones() as u32 as i32;\n@@ -187,7 +187,7 @@ LL -     let _ = 0i32: i32: i32.count_ones() as u32 as i32;\n LL +     let _ = 0i32: i32.count_ones() as u32 as i32;\n    |\n \n-error: casts cannot be followed by a method call\n+error: cast cannot be followed by a method call\n   --> $DIR/issue-35813-postfix-after-cast.rs:62:13\n    |\n LL |       let _ = 0\n@@ -201,7 +201,7 @@ LL ~     let _ = (0\n LL ~         as i32)\n    |\n \n-error: casts cannot be followed by indexing\n+error: cast cannot be followed by indexing\n   --> $DIR/issue-35813-postfix-after-cast.rs:70:18\n    |\n LL |     let x: i32 = &vec![1, 2, 3] as &Vec<i32>[0];\n@@ -212,7 +212,7 @@ help: try surrounding the expression in parentheses\n LL |     let x: i32 = (&vec![1, 2, 3] as &Vec<i32>)[0];\n    |                  +                           +\n \n-error: casts cannot be followed by a method call\n+error: cast cannot be followed by a method call\n   --> $DIR/issue-35813-postfix-after-cast.rs:75:5\n    |\n LL |     0 as i32.max(0);\n@@ -223,7 +223,7 @@ help: try surrounding the expression in parentheses\n LL |     (0 as i32).max(0);\n    |     +        +\n \n-error: casts cannot be followed by a method call\n+error: type ascription cannot be followed by a method call\n   --> $DIR/issue-35813-postfix-after-cast.rs:77:5\n    |\n LL |     0: i32.max(0);\n@@ -239,7 +239,7 @@ LL -     0: i32.max(0);\n LL +     0.max(0);\n    |\n \n-error: casts cannot be followed by a method call\n+error: cast cannot be followed by a method call\n   --> $DIR/issue-35813-postfix-after-cast.rs:92:8\n    |\n LL |     if 5u64 as i32.max(0) == 0 {\n@@ -250,7 +250,7 @@ help: try surrounding the expression in parentheses\n LL |     if (5u64 as i32).max(0) == 0 {\n    |        +           +\n \n-error: casts cannot be followed by a method call\n+error: type ascription cannot be followed by a method call\n   --> $DIR/issue-35813-postfix-after-cast.rs:95:8\n    |\n LL |     if 5u64: u64.max(0) == 0 {\n@@ -266,7 +266,7 @@ LL -     if 5u64: u64.max(0) == 0 {\n LL +     if 5u64.max(0) == 0 {\n    |\n \n-error: casts cannot be followed by a method call\n+error: cast cannot be followed by a method call\n   --> $DIR/issue-35813-postfix-after-cast.rs:102:9\n    |\n LL |         5u64 as u32.max(0) == 0\n@@ -277,7 +277,7 @@ help: try surrounding the expression in parentheses\n LL |         (5u64 as u32).max(0) == 0\n    |         +           +\n \n-error: casts cannot be followed by a method call\n+error: type ascription cannot be followed by a method call\n   --> $DIR/issue-35813-postfix-after-cast.rs:106:9\n    |\n LL |         5u64: u64.max(0) == 0\n@@ -293,7 +293,7 @@ LL -         5u64: u64.max(0) == 0\n LL +         5u64.max(0) == 0\n    |\n \n-error: casts cannot be followed by indexing\n+error: cast cannot be followed by indexing\n   --> $DIR/issue-35813-postfix-after-cast.rs:111:24\n    |\n LL | static bar: &[i32] = &(&[1,2,3] as &[i32][0..1]);\n@@ -304,7 +304,7 @@ help: try surrounding the expression in parentheses\n LL | static bar: &[i32] = &((&[1,2,3] as &[i32])[0..1]);\n    |                        +                  +\n \n-error: casts cannot be followed by indexing\n+error: type ascription cannot be followed by indexing\n   --> $DIR/issue-35813-postfix-after-cast.rs:114:25\n    |\n LL | static bar2: &[i32] = &(&[1i32,2,3]: &[i32; 3][0..1]);\n@@ -320,7 +320,7 @@ LL - static bar2: &[i32] = &(&[1i32,2,3]: &[i32; 3][0..1]);\n LL + static bar2: &[i32] = &(&[1i32,2,3][0..1]);\n    |\n \n-error: casts cannot be followed by `?`\n+error: cast cannot be followed by `?`\n   --> $DIR/issue-35813-postfix-after-cast.rs:119:5\n    |\n LL |     Err(0u64) as Result<u64,u64>?;\n@@ -331,7 +331,7 @@ help: try surrounding the expression in parentheses\n LL |     (Err(0u64) as Result<u64,u64>)?;\n    |     +                            +\n \n-error: casts cannot be followed by `?`\n+error: type ascription cannot be followed by `?`\n   --> $DIR/issue-35813-postfix-after-cast.rs:121:5\n    |\n LL |     Err(0u64): Result<u64,u64>?;\n@@ -347,7 +347,7 @@ LL -     Err(0u64): Result<u64,u64>?;\n LL +     Err(0u64)?;\n    |\n \n-error: casts cannot be followed by a function call\n+error: cast cannot be followed by a function call\n   --> $DIR/issue-35813-postfix-after-cast.rs:145:5\n    |\n LL |     drop as fn(u8)(0);\n@@ -358,7 +358,7 @@ help: try surrounding the expression in parentheses\n LL |     (drop as fn(u8))(0);\n    |     +              +\n \n-error: casts cannot be followed by a function call\n+error: type ascription cannot be followed by a function call\n   --> $DIR/issue-35813-postfix-after-cast.rs:147:5\n    |\n LL |     drop_ptr: fn(u8)(0);\n@@ -374,7 +374,7 @@ LL -     drop_ptr: fn(u8)(0);\n LL +     drop_ptr(0);\n    |\n \n-error: casts cannot be followed by `.await`\n+error: cast cannot be followed by `.await`\n   --> $DIR/issue-35813-postfix-after-cast.rs:152:5\n    |\n LL |     Box::pin(noop()) as Pin<Box<dyn Future<Output = ()>>>.await;\n@@ -385,7 +385,7 @@ help: try surrounding the expression in parentheses\n LL |     (Box::pin(noop()) as Pin<Box<dyn Future<Output = ()>>>).await;\n    |     +                                                     +\n \n-error: casts cannot be followed by `.await`\n+error: type ascription cannot be followed by `.await`\n   --> $DIR/issue-35813-postfix-after-cast.rs:155:5\n    |\n LL |     Box::pin(noop()): Pin<Box<_>>.await;\n@@ -401,7 +401,7 @@ LL -     Box::pin(noop()): Pin<Box<_>>.await;\n LL +     Box::pin(noop()).await;\n    |\n \n-error: casts cannot be followed by a field access\n+error: cast cannot be followed by a field access\n   --> $DIR/issue-35813-postfix-after-cast.rs:167:5\n    |\n LL |     Foo::default() as Foo.bar;\n@@ -412,7 +412,7 @@ help: try surrounding the expression in parentheses\n LL |     (Foo::default() as Foo).bar;\n    |     +                     +\n \n-error: casts cannot be followed by a field access\n+error: type ascription cannot be followed by a field access\n   --> $DIR/issue-35813-postfix-after-cast.rs:169:5\n    |\n LL |     Foo::default(): Foo.bar;\n@@ -428,7 +428,7 @@ LL -     Foo::default(): Foo.bar;\n LL +     Foo::default().bar;\n    |\n \n-error: casts cannot be followed by a method call\n+error: cast cannot be followed by a method call\n   --> $DIR/issue-35813-postfix-after-cast.rs:84:9\n    |\n LL |         if true { 33 } else { 44 } as i32.max(0),\n@@ -439,7 +439,7 @@ help: try surrounding the expression in parentheses\n LL |         (if true { 33 } else { 44 } as i32).max(0),\n    |         +                                 +\n \n-error: casts cannot be followed by a method call\n+error: type ascription cannot be followed by a method call\n   --> $DIR/issue-35813-postfix-after-cast.rs:86:9\n    |\n LL |         if true { 33 } else { 44 }: i32.max(0)"}, {"sha": "f78268894daeca174426b44f55538aa1945eebba", "filename": "src/test/ui/type/ascription/issue-54516.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cfd231a0cbcdbc39543c6f9e5fa2216244a89858/src%2Ftest%2Fui%2Ftype%2Fascription%2Fissue-54516.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/cfd231a0cbcdbc39543c6f9e5fa2216244a89858/src%2Ftest%2Fui%2Ftype%2Fascription%2Fissue-54516.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Fascription%2Fissue-54516.fixed?ref=cfd231a0cbcdbc39543c6f9e5fa2216244a89858", "patch": "@@ -3,5 +3,5 @@ use std::collections::BTreeMap;\n \n fn main() {\n     println!(\"{}\", std::mem::size_of::<BTreeMap<u32, u32>>());\n-    //~^ ERROR casts cannot be followed by a function call\n+    //~^ ERROR type ascription cannot be followed by a function call\n }"}, {"sha": "1f34e6943bab2b5213db0f246672b9b14764e9d3", "filename": "src/test/ui/type/ascription/issue-54516.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cfd231a0cbcdbc39543c6f9e5fa2216244a89858/src%2Ftest%2Fui%2Ftype%2Fascription%2Fissue-54516.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfd231a0cbcdbc39543c6f9e5fa2216244a89858/src%2Ftest%2Fui%2Ftype%2Fascription%2Fissue-54516.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Fascription%2Fissue-54516.rs?ref=cfd231a0cbcdbc39543c6f9e5fa2216244a89858", "patch": "@@ -3,5 +3,5 @@ use std::collections::BTreeMap;\n \n fn main() {\n     println!(\"{}\", std::mem:size_of::<BTreeMap<u32, u32>>());\n-    //~^ ERROR casts cannot be followed by a function call\n+    //~^ ERROR type ascription cannot be followed by a function call\n }"}, {"sha": "1ab9093e58445279f307278cdc9e7cd0f8483443", "filename": "src/test/ui/type/ascription/issue-54516.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cfd231a0cbcdbc39543c6f9e5fa2216244a89858/src%2Ftest%2Fui%2Ftype%2Fascription%2Fissue-54516.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cfd231a0cbcdbc39543c6f9e5fa2216244a89858/src%2Ftest%2Fui%2Ftype%2Fascription%2Fissue-54516.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Fascription%2Fissue-54516.stderr?ref=cfd231a0cbcdbc39543c6f9e5fa2216244a89858", "patch": "@@ -1,4 +1,4 @@\n-error: casts cannot be followed by a function call\n+error: type ascription cannot be followed by a function call\n   --> $DIR/issue-54516.rs:5:20\n    |\n LL |     println!(\"{}\", std::mem:size_of::<BTreeMap<u32, u32>>());"}, {"sha": "3e8be3875b34eb8d3544d3b6554bda64a033eb21", "filename": "src/test/ui/type/ascription/issue-60933.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cfd231a0cbcdbc39543c6f9e5fa2216244a89858/src%2Ftest%2Fui%2Ftype%2Fascription%2Fissue-60933.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/cfd231a0cbcdbc39543c6f9e5fa2216244a89858/src%2Ftest%2Fui%2Ftype%2Fascription%2Fissue-60933.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Fascription%2Fissue-60933.fixed?ref=cfd231a0cbcdbc39543c6f9e5fa2216244a89858", "patch": "@@ -1,5 +1,5 @@\n // run-rustfix\n fn main() {\n     let _: usize = std::mem::size_of::<u32>();\n-    //~^ ERROR casts cannot be followed by a function call\n+    //~^ ERROR type ascription cannot be followed by a function call\n }"}, {"sha": "2a4ad7bdc4ee777d74ef3630b8a41809b196a913", "filename": "src/test/ui/type/ascription/issue-60933.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cfd231a0cbcdbc39543c6f9e5fa2216244a89858/src%2Ftest%2Fui%2Ftype%2Fascription%2Fissue-60933.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfd231a0cbcdbc39543c6f9e5fa2216244a89858/src%2Ftest%2Fui%2Ftype%2Fascription%2Fissue-60933.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Fascription%2Fissue-60933.rs?ref=cfd231a0cbcdbc39543c6f9e5fa2216244a89858", "patch": "@@ -1,5 +1,5 @@\n // run-rustfix\n fn main() {\n     let _: usize = std::mem:size_of::<u32>();\n-    //~^ ERROR casts cannot be followed by a function call\n+    //~^ ERROR type ascription cannot be followed by a function call\n }"}, {"sha": "0b7f8edf62402612b88b844e885f950c9e19e602", "filename": "src/test/ui/type/ascription/issue-60933.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cfd231a0cbcdbc39543c6f9e5fa2216244a89858/src%2Ftest%2Fui%2Ftype%2Fascription%2Fissue-60933.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cfd231a0cbcdbc39543c6f9e5fa2216244a89858/src%2Ftest%2Fui%2Ftype%2Fascription%2Fissue-60933.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Fascription%2Fissue-60933.stderr?ref=cfd231a0cbcdbc39543c6f9e5fa2216244a89858", "patch": "@@ -1,4 +1,4 @@\n-error: casts cannot be followed by a function call\n+error: type ascription cannot be followed by a function call\n   --> $DIR/issue-60933.rs:3:20\n    |\n LL |     let _: usize = std::mem:size_of::<u32>();"}]}