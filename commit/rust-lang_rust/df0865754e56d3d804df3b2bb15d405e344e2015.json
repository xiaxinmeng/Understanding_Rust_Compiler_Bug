{"sha": "df0865754e56d3d804df3b2bb15d405e344e2015", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRmMDg2NTc1NGU1NmQzZDgwNGRmM2IyYmIxNWQ0MDVlMzQ0ZTIwMTU=", "commit": {"author": {"name": "Keegan McAllister", "email": "kmcallister@mozilla.com", "date": "2015-02-21T05:33:17Z"}, "committer": {"name": "Keegan McAllister", "email": "kmcallister@mozilla.com", "date": "2015-02-25T00:28:54Z"}, "message": "Tweak wording in the macros guide", "tree": {"sha": "6020cf99df33a2aa7d34a4444bed0f0859fb38c1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6020cf99df33a2aa7d34a4444bed0f0859fb38c1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/df0865754e56d3d804df3b2bb15d405e344e2015", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/df0865754e56d3d804df3b2bb15d405e344e2015", "html_url": "https://github.com/rust-lang/rust/commit/df0865754e56d3d804df3b2bb15d405e344e2015", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/df0865754e56d3d804df3b2bb15d405e344e2015/comments", "author": {"login": "kmcallister", "id": 444997, "node_id": "MDQ6VXNlcjQ0NDk5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/444997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kmcallister", "html_url": "https://github.com/kmcallister", "followers_url": "https://api.github.com/users/kmcallister/followers", "following_url": "https://api.github.com/users/kmcallister/following{/other_user}", "gists_url": "https://api.github.com/users/kmcallister/gists{/gist_id}", "starred_url": "https://api.github.com/users/kmcallister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kmcallister/subscriptions", "organizations_url": "https://api.github.com/users/kmcallister/orgs", "repos_url": "https://api.github.com/users/kmcallister/repos", "events_url": "https://api.github.com/users/kmcallister/events{/privacy}", "received_events_url": "https://api.github.com/users/kmcallister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kmcallister", "id": 444997, "node_id": "MDQ6VXNlcjQ0NDk5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/444997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kmcallister", "html_url": "https://github.com/kmcallister", "followers_url": "https://api.github.com/users/kmcallister/followers", "following_url": "https://api.github.com/users/kmcallister/following{/other_user}", "gists_url": "https://api.github.com/users/kmcallister/gists{/gist_id}", "starred_url": "https://api.github.com/users/kmcallister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kmcallister/subscriptions", "organizations_url": "https://api.github.com/users/kmcallister/orgs", "repos_url": "https://api.github.com/users/kmcallister/repos", "events_url": "https://api.github.com/users/kmcallister/events{/privacy}", "received_events_url": "https://api.github.com/users/kmcallister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1804242a2d4037fd3ae854989a97a65e16bda05a", "url": "https://api.github.com/repos/rust-lang/rust/commits/1804242a2d4037fd3ae854989a97a65e16bda05a", "html_url": "https://github.com/rust-lang/rust/commit/1804242a2d4037fd3ae854989a97a65e16bda05a"}], "stats": {"total": 29, "additions": 19, "deletions": 10}, "files": [{"sha": "cf12b4938e271508ce65ab70fed64bec0a2db480", "filename": "src/doc/trpl/macros.md", "status": "modified", "additions": 19, "deletions": 10, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/df0865754e56d3d804df3b2bb15d405e344e2015/src%2Fdoc%2Ftrpl%2Fmacros.md", "raw_url": "https://github.com/rust-lang/rust/raw/df0865754e56d3d804df3b2bb15d405e344e2015/src%2Fdoc%2Ftrpl%2Fmacros.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fmacros.md?ref=df0865754e56d3d804df3b2bb15d405e344e2015", "patch": "@@ -189,14 +189,12 @@ shorthand for a data type could be valid as either an expression or a pattern.\n \n ## Repetition\n \n-The repetition behavior can seem somewhat magical, especially when multiple\n-names are bound at multiple nested levels of repetition. The two rules to keep\n-in mind are:\n+The repetition operator follows two principal rules:\n \n-1. the behavior of `$(...)*` is to walk through one \"layer\" of repetitions, for\n-all of the `$name`s it contains, in lockstep, and\n+1. `$(...)*` walks through one \"layer\" of repetitions, for all of the `$name`s\n+   it contains, in lockstep, and\n 2. each `$name` must be under at least as many `$(...)*`s as it was matched\n-against. If it is under more, it'll be duplicated, as appropriate.\n+   against. If it is under more, it'll be duplicated, as appropriate.\n \n This baroque macro illustrates the duplication of variables from outer\n repetition levels.\n@@ -226,6 +224,10 @@ That's most of the matcher syntax. These examples use `$(...)*`, which is a\n more\" match. Both forms optionally include a separator, which can be any token\n except `+` or `*`.\n \n+This system is based on\n+\"[Macro-by-Example](http://www.cs.indiana.edu/ftp/techreports/TR206.pdf)\"\n+(PDF link).\n+\n # Hygiene\n \n Some languages implement macros using simple text substitution, which leads to\n@@ -273,19 +275,26 @@ macro, using [a GNU C extension] to emulate Rust's expression blocks.\n })\n ```\n \n-This looks reasonable, but watch what happens in this example:\n+Here's a simple use case that goes terribly wrong:\n \n ```text\n const char *state = \"reticulating splines\";\n-LOG(state);\n+LOG(state)\n ```\n \n-The program will likely segfault, after it tries to execute\n+This expands to\n \n ```text\n-printf(\"log(%d): %s\\n\", state, state);\n+const char *state = \"reticulating splines\";\n+int state = get_log_state();\n+if (state > 0) {\n+    printf(\"log(%d): %s\\n\", state, state);\n+}\n ```\n \n+The second variable named `state` shadows the first one.  This is a problem\n+because the print statement should refer to both of them.\n+\n The equivalent Rust macro has the desired behavior.\n \n ```rust"}]}