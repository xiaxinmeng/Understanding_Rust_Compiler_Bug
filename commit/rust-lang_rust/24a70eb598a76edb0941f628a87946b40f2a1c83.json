{"sha": "24a70eb598a76edb0941f628a87946b40f2a1c83", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI0YTcwZWI1OThhNzZlZGIwOTQxZjYyOGE4Nzk0NmI0MGYyYTFjODM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-02-09T21:58:10Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-02-09T21:58:10Z"}, "message": "Auto merge of #39694 - frewsxcv:rollup, r=frewsxcv\n\nRollup of 6 pull requests\n\n- Successful merges: #39604, #39619, #39670, #39678, #39682, #39683\n- Failed merges:", "tree": {"sha": "f31e4a69825ceab919636f3f86537bf563f60f86", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f31e4a69825ceab919636f3f86537bf563f60f86"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/24a70eb598a76edb0941f628a87946b40f2a1c83", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/24a70eb598a76edb0941f628a87946b40f2a1c83", "html_url": "https://github.com/rust-lang/rust/commit/24a70eb598a76edb0941f628a87946b40f2a1c83", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/24a70eb598a76edb0941f628a87946b40f2a1c83/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "405327635419e22a956dfe8f7caf4817c8ae5e93", "url": "https://api.github.com/repos/rust-lang/rust/commits/405327635419e22a956dfe8f7caf4817c8ae5e93", "html_url": "https://github.com/rust-lang/rust/commit/405327635419e22a956dfe8f7caf4817c8ae5e93"}, {"sha": "55c17a599432aef3b725663a482c853f0263e183", "url": "https://api.github.com/repos/rust-lang/rust/commits/55c17a599432aef3b725663a482c853f0263e183", "html_url": "https://github.com/rust-lang/rust/commit/55c17a599432aef3b725663a482c853f0263e183"}], "stats": {"total": 163, "additions": 127, "deletions": 36}, "files": [{"sha": "4b4f343d15a9d3c2c93ad89183e7c4954a43634b", "filename": ".mailmap", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/24a70eb598a76edb0941f628a87946b40f2a1c83/.mailmap", "raw_url": "https://github.com/rust-lang/rust/raw/24a70eb598a76edb0941f628a87946b40f2a1c83/.mailmap", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.mailmap?ref=24a70eb598a76edb0941f628a87946b40f2a1c83", "patch": "@@ -132,9 +132,8 @@ Lindsey Kuper <lindsey@composition.al> <lkuper@mozilla.com>\n Luke Metz <luke.metz@students.olin.edu>\n Luqman Aden <me@luqman.ca> <laden@csclub.uwaterloo.ca>\n Luqman Aden <me@luqman.ca> <laden@mozilla.com>\n-Makoto Nakashima <makoto.nksm+github@gmail.com> <makoto.nksm@gmail.com>\n-Makoto Nakashima <makoto.nksm+github@gmail.com> gifnksm <makoto.nksm+github@gmail.com>\n-Makoto Nakashima <makoto.nksm+github@gmail.com> NAKASHIMA, Makoto <makoto.nksm+github@gmail.com>\n+NAKASHIMA, Makoto <makoto.nksm+github@gmail.com> <makoto.nksm@gmail.com>\n+NAKASHIMA, Makoto <makoto.nksm+github@gmail.com> <makoto.nksm+github@gmail.com>\n Marcell Pardavi <marcell.pardavi@gmail.com>\n Margaret Meyerhofer <mmeyerho@andrew.cmu.edu> <mmeyerho@andrew>\n Mark Sinclair <mark.edward.x@gmail.com>\n@@ -150,7 +149,6 @@ Michael Woerister <michaelwoerister@posteo> <michaelwoerister@gmail>\n Micka\u00ebl Raybaud-Roig <raybaudroigm@gmail.com> m-r-r <raybaudroigm@gmail.com>\n Ms2ger <ms2ger@gmail.com> <Ms2ger@gmail.com>\n Mukilan Thiagarajan <mukilanthiagarajan@gmail.com>\n-NAKASHIMA, Makoto <makoto.nksm+github@gmail.com>\n Nathan Wilson <wilnathan@gmail.com>\n Nathaniel Herman <nherman@post.harvard.edu> Nathaniel Herman <nherman@college.harvard.edu>\n Neil Pankey <npankey@gmail.com> <neil@wire.im>"}, {"sha": "db9fc870fa86a6a19f51071f255d51fde492e3f7", "filename": "src/librustc_metadata/index.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/24a70eb598a76edb0941f628a87946b40f2a1c83/src%2Flibrustc_metadata%2Findex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24a70eb598a76edb0941f628a87946b40f2a1c83/src%2Flibrustc_metadata%2Findex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Findex.rs?ref=24a70eb598a76edb0941f628a87946b40f2a1c83", "patch": "@@ -96,9 +96,17 @@ impl<'tcx> LazySeq<Index> {\n }\n \n #[repr(packed)]\n-#[derive(Copy, Clone)]\n+#[derive(Copy)]\n struct Unaligned<T>(T);\n \n+// The derived Clone impl is unsafe for this packed struct since it needs to pass a reference to\n+// the field to `T::clone`, but this reference may not be properly aligned.\n+impl<T: Copy> Clone for Unaligned<T> {\n+    fn clone(&self) -> Self {\n+        *self\n+    }\n+}\n+\n impl<T> Unaligned<T> {\n     fn get(self) -> T { self.0 }\n }"}, {"sha": "9d48dc523d3a7f4c2321a9ce09521aa2937fa06b", "filename": "src/librustc_trans/back/link.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/24a70eb598a76edb0941f628a87946b40f2a1c83/src%2Flibrustc_trans%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24a70eb598a76edb0941f628a87946b40f2a1c83/src%2Flibrustc_trans%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Flink.rs?ref=24a70eb598a76edb0941f628a87946b40f2a1c83", "patch": "@@ -48,6 +48,13 @@ use syntax::attr;\n use syntax::symbol::Symbol;\n use syntax_pos::Span;\n \n+/// The LLVM module name containing crate-metadata. This includes a `.` on\n+/// purpose, so it cannot clash with the name of a user-defined module.\n+pub const METADATA_MODULE_NAME: &'static str = \"crate.metadata\";\n+/// The name of the crate-metadata object file the compiler generates. Must\n+/// match up with `METADATA_MODULE_NAME`.\n+pub const METADATA_OBJ_NAME: &'static str = \"crate.metadata.o\";\n+\n // RLIB LLVM-BYTECODE OBJECT LAYOUT\n // Version 1\n // Bytes    Data\n@@ -213,7 +220,7 @@ pub fn link_binary(sess: &Session,\n                 remove(sess, &obj);\n             }\n         }\n-        remove(sess, &outputs.with_extension(\"metadata.o\"));\n+        remove(sess, &outputs.with_extension(METADATA_OBJ_NAME));\n     }\n \n     out_filenames\n@@ -832,7 +839,7 @@ fn link_args(cmd: &mut Linker,\n     // object file, so we link that in here.\n     if crate_type == config::CrateTypeDylib ||\n        crate_type == config::CrateTypeProcMacro {\n-        cmd.add_object(&outputs.with_extension(\"metadata.o\"));\n+        cmd.add_object(&outputs.with_extension(METADATA_OBJ_NAME));\n     }\n \n     // Try to strip as much out of the generated object by removing unused"}, {"sha": "b717254ef0d25aa6c35ccd27ff90aab06d2b928a", "filename": "src/librustc_trans/back/write.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/24a70eb598a76edb0941f628a87946b40f2a1c83/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24a70eb598a76edb0941f628a87946b40f2a1c83/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Fwrite.rs?ref=24a70eb598a76edb0941f628a87946b40f2a1c83", "patch": "@@ -886,12 +886,12 @@ pub fn run_passes(sess: &Session,\n     // Clean up unwanted temporary files.\n \n     // We create the following files by default:\n-    //  - crate.#module-name#.bc\n-    //  - crate.#module-name#.o\n-    //  - crate.metadata.bc\n-    //  - crate.metadata.o\n-    //  - crate.o (linked from crate.##.o)\n-    //  - crate.bc (copied from crate.##.bc)\n+    //  - #crate#.#module-name#.bc\n+    //  - #crate#.#module-name#.o\n+    //  - #crate#.crate.metadata.bc\n+    //  - #crate#.crate.metadata.o\n+    //  - #crate#.o (linked from crate.##.o)\n+    //  - #crate#.bc (copied from crate.##.bc)\n     // We may create additional files if requested by the user (through\n     // `-C save-temps` or `--emit=` flags).\n \n@@ -939,9 +939,9 @@ pub fn run_passes(sess: &Session,\n     }\n \n     // We leave the following files around by default:\n-    //  - crate.o\n-    //  - crate.metadata.o\n-    //  - crate.bc\n+    //  - #crate#.o\n+    //  - #crate#.crate.metadata.o\n+    //  - #crate#.bc\n     // These are used in linking steps and will be cleaned up afterward.\n \n     // FIXME: time_llvm_passes support - does this use a global context or"}, {"sha": "ce02c9725d1043bb53b810bbc4a0ac8a9656e698", "filename": "src/librustc_trans/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/24a70eb598a76edb0941f628a87946b40f2a1c83/src%2Flibrustc_trans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24a70eb598a76edb0941f628a87946b40f2a1c83/src%2Flibrustc_trans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fbase.rs?ref=24a70eb598a76edb0941f628a87946b40f2a1c83", "patch": "@@ -1151,7 +1151,7 @@ pub fn trans_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     });\n \n     let metadata_module = ModuleTranslation {\n-        name: \"metadata\".to_string(),\n+        name: link::METADATA_MODULE_NAME.to_string(),\n         symbol_name_hash: 0, // we always rebuild metadata, at least for now\n         source: ModuleSource::Translated(ModuleLlvm {\n             llcx: shared_ccx.metadata_llcx(),"}, {"sha": "0cfc2c8d16352b16b48f31228778c4604165eb05", "filename": "src/librustc_trans/mir/mod.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/24a70eb598a76edb0941f628a87946b40f2a1c83/src%2Flibrustc_trans%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24a70eb598a76edb0941f628a87946b40f2a1c83/src%2Flibrustc_trans%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Fmod.rs?ref=24a70eb598a76edb0941f628a87946b40f2a1c83", "patch": "@@ -138,13 +138,20 @@ impl<'a, 'tcx> MirContext<'a, 'tcx> {\n             while span.expn_id != NO_EXPANSION && span.expn_id != COMMAND_LINE_EXPN {\n                 if let Some(callsite_span) = cm.with_expn_info(span.expn_id,\n                                                     |ei| ei.map(|ei| ei.call_site.clone())) {\n+                    // When the current function itself is a result of macro expansion,\n+                    // we stop at the function body level because no line stepping can occurr\n+                    // at the level above that.\n+                    if self.mir.span.expn_id != NO_EXPANSION &&\n+                       span.expn_id == self.mir.span.expn_id {\n+                        break;\n+                    }\n                     span = callsite_span;\n                 } else {\n                     break;\n                 }\n             }\n             let scope = self.scope_metadata_for_loc(source_info.scope, span.lo);\n-            // Use span of the outermost call site, while keeping the original lexical scope\n+            // Use span of the outermost expansion site, while keeping the original lexical scope.\n             (scope, span)\n         }\n     }"}, {"sha": "6aaf7ed421e7f0f55400f0f1486c81833322be7d", "filename": "src/test/debuginfo/macro-stepping.inc", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/24a70eb598a76edb0941f628a87946b40f2a1c83/src%2Ftest%2Fdebuginfo%2Fmacro-stepping.inc", "raw_url": "https://github.com/rust-lang/rust/raw/24a70eb598a76edb0941f628a87946b40f2a1c83/src%2Ftest%2Fdebuginfo%2Fmacro-stepping.inc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fmacro-stepping.inc?ref=24a70eb598a76edb0941f628a87946b40f2a1c83", "patch": "@@ -0,0 +1,17 @@\n+// Copyright 2013-2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn included() {\n+    foo!(); // #inc-loc1\n+\n+    foo2!(); // #inc-loc2\n+\n+    zzz(); // #inc-loc3\n+}"}, {"sha": "ca2c1e0c8f0298982c42397e077254d3988c9b0b", "filename": "src/test/debuginfo/macro-stepping.rs", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/24a70eb598a76edb0941f628a87946b40f2a1c83/src%2Ftest%2Fdebuginfo%2Fmacro-stepping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24a70eb598a76edb0941f628a87946b40f2a1c83/src%2Ftest%2Fdebuginfo%2Fmacro-stepping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fmacro-stepping.rs?ref=24a70eb598a76edb0941f628a87946b40f2a1c83", "patch": "@@ -44,6 +44,17 @@ extern crate macro_stepping; // exports new_scope!()\n // gdb-command:frame\n // gdb-check:[...]#loc6[...]\n \n+// gdb-command:continue\n+// gdb-command:step\n+// gdb-command:frame\n+// gdb-check:[...]#inc-loc1[...]\n+// gdb-command:next\n+// gdb-command:frame\n+// gdb-check:[...]#inc-loc2[...]\n+// gdb-command:next\n+// gdb-command:frame\n+// gdb-check:[...]#inc-loc3[...]\n+\n // === LLDB TESTS ==================================================================================\n \n // lldb-command:set set stop-line-count-before 0\n@@ -68,6 +79,17 @@ extern crate macro_stepping; // exports new_scope!()\n // lldb-command:frame select\n // lldb-check:[...]#loc5[...]\n \n+// lldb-command:continue\n+// lldb-command:step\n+// lldb-command:frame select\n+// lldb-check:[...]#inc-loc1[...]\n+// lldb-command:next\n+// lldb-command:frame select\n+// lldb-check:[...]#inc-loc2[...]\n+// lldb-command:next\n+// lldb-command:frame select\n+// lldb-check:[...]#inc-loc3[...]\n+\n macro_rules! foo {\n     () => {\n         let a = 1;\n@@ -99,6 +121,10 @@ fn main() {\n              \"world\");\n \n     zzz(); // #loc6\n+\n+    included(); // #break\n }\n \n fn zzz() {()}\n+\n+include!(\"macro-stepping.inc\");"}, {"sha": "eb96d94efec930d3edaf3149d43b38a94a488d20", "filename": "src/test/run-pass/mir_adt_construction.rs", "status": "modified", "additions": 46, "deletions": 15, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/24a70eb598a76edb0941f628a87946b40f2a1c83/src%2Ftest%2Frun-pass%2Fmir_adt_construction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24a70eb598a76edb0941f628a87946b40f2a1c83/src%2Ftest%2Frun-pass%2Fmir_adt_construction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmir_adt_construction.rs?ref=24a70eb598a76edb0941f628a87946b40f2a1c83", "patch": "@@ -8,23 +8,24 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use std::fmt;\n+\n #[repr(C)]\n enum CEnum {\n     Hello = 30,\n     World = 60\n }\n \n fn test1(c: CEnum) -> i32 {\n-  let c2 = CEnum::Hello;\n-  match (c, c2) {\n-    (CEnum::Hello, CEnum::Hello) => 42,\n-    (CEnum::World, CEnum::Hello) => 0,\n-    _ => 1\n-  }\n+    let c2 = CEnum::Hello;\n+    match (c, c2) {\n+        (CEnum::Hello, CEnum::Hello) => 42,\n+        (CEnum::World, CEnum::Hello) => 0,\n+        _ => 1\n+    }\n }\n \n #[repr(packed)]\n-#[derive(PartialEq, Debug)]\n struct Pakd {\n     a: u64,\n     b: u32,\n@@ -33,6 +34,36 @@ struct Pakd {\n     e: ()\n }\n \n+// It is unsafe to use #[derive(Debug)] on a packed struct because the code generated by the derive\n+// macro takes references to the fields instead of accessing them directly.\n+impl fmt::Debug for Pakd {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        // It's important that we load the fields into locals by-value here. This will do safe\n+        // unaligned loads into the locals, then pass references to the properly-aligned locals to\n+        // the formatting code.\n+        let Pakd { a, b, c, d, e } = *self;\n+        f.debug_struct(\"Pakd\")\n+            .field(\"a\", &a)\n+            .field(\"b\", &b)\n+            .field(\"c\", &c)\n+            .field(\"d\", &d)\n+            .field(\"e\", &e)\n+            .finish()\n+    }\n+}\n+\n+// It is unsafe to use #[derive(PartialEq)] on a packed struct because the code generated by the\n+// derive macro takes references to the fields instead of accessing them directly.\n+impl PartialEq for Pakd {\n+    fn eq(&self, other: &Pakd) -> bool {\n+        self.a == other.a &&\n+            self.b == other.b &&\n+            self.c == other.c &&\n+            self.d == other.d &&\n+            self.e == other.e\n+    }\n+}\n+\n impl Drop for Pakd {\n     fn drop(&mut self) {}\n }\n@@ -59,12 +90,12 @@ fn test5(x: fn(u32) -> Option<u32>) -> (Option<u32>, Option<u32>) {\n }\n \n fn main() {\n-  assert_eq!(test1(CEnum::Hello), 42);\n-  assert_eq!(test1(CEnum::World), 0);\n-  assert_eq!(test2(), Pakd { a: 42, b: 42, c: 42, d: 42, e: () });\n-  assert_eq!(test3(), TupleLike(42, 42));\n-  let t4 = test4(TupleLike);\n-  assert_eq!(t4.0, t4.1);\n-  let t5 = test5(Some);\n-  assert_eq!(t5.0, t5.1);\n+    assert_eq!(test1(CEnum::Hello), 42);\n+    assert_eq!(test1(CEnum::World), 0);\n+    assert_eq!(test2(), Pakd { a: 42, b: 42, c: 42, d: 42, e: () });\n+    assert_eq!(test3(), TupleLike(42, 42));\n+    let t4 = test4(TupleLike);\n+    assert_eq!(t4.0, t4.1);\n+    let t5 = test5(Some);\n+    assert_eq!(t5.0, t5.1);\n }"}, {"sha": "ac3dfcdfde155cd79aca32d0c6b71e937303d93c", "filename": "src/test/run-pass/u128.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/24a70eb598a76edb0941f628a87946b40f2a1c83/src%2Ftest%2Frun-pass%2Fu128.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24a70eb598a76edb0941f628a87946b40f2a1c83/src%2Ftest%2Frun-pass%2Fu128.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fu128.rs?ref=24a70eb598a76edb0941f628a87946b40f2a1c83", "patch": "@@ -8,9 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// ignore-stage0\n-// ignore-stage1\n-\n // ignore-emscripten\n \n #![feature(i128_type, test)]"}]}