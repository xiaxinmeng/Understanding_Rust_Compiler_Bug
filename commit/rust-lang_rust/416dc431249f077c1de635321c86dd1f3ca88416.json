{"sha": "416dc431249f077c1de635321c86dd1f3ca88416", "node_id": "C_kwDOAAsO6NoAKDQxNmRjNDMxMjQ5ZjA3N2MxZGU2MzUzMjFjODZkZDFmM2NhODg0MTY", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-07-09T10:52:50Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-07-09T10:52:50Z"}, "message": "Rollup merge of #99022 - pierwill:always-storage-live-locals, r=pierwill\n\nMIR dataflow: Rename function to `always_storage_live_locals`\n\nRelated to #99021.\n\nr?  ```@JakobDegen``` (as discussed on Zulip)", "tree": {"sha": "225292eb19c06280930cf41f8505cf3723bf5552", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/225292eb19c06280930cf41f8505cf3723bf5552"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/416dc431249f077c1de635321c86dd1f3ca88416", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiyV4CCRBK7hj4Ov3rIwAAh0gIAD99cG7ysX6i+/+VOFt5OLzm\nfiZTTCfI9aJxagPwWBDKc74GsaUVHeQvSu08mRS6nngtYE4eizWBzu7QhLPgmgqD\nG3RcD087pC9mXTArYFJ181iAkydBBUB4oizrrjPzoevc+pO9UnJQcvzMG5BGqwQs\nsTjePuI1rwprh4WByZ47XGb98Vnm5fyVlrbUH1L5AzU3iNtMT3gBv6+Gl59/4tQW\navKwaspXcEfJYD+qogZQ8UWc0zefzuPWpWPWO8J67gGDx0ka68GkeuSTTgK44GaC\nnnkatRW5HACI9Q1Mr9uyhDWT9piSM7Kc0THOhtud7kcCks5RWRk8u5SnQD1/WBU=\n=3a7v\n-----END PGP SIGNATURE-----\n", "payload": "tree 225292eb19c06280930cf41f8505cf3723bf5552\nparent c4693bc946729393c087fb120af566395915d19d\nparent 8a1c1ec8b2d806c135e19c748f0bc28188a79d00\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1657363970 +0200\ncommitter GitHub <noreply@github.com> 1657363970 +0200\n\nRollup merge of #99022 - pierwill:always-storage-live-locals, r=pierwill\n\nMIR dataflow: Rename function to `always_storage_live_locals`\n\nRelated to #99021.\n\nr?  ```@JakobDegen``` (as discussed on Zulip)\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/416dc431249f077c1de635321c86dd1f3ca88416", "html_url": "https://github.com/rust-lang/rust/commit/416dc431249f077c1de635321c86dd1f3ca88416", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/416dc431249f077c1de635321c86dd1f3ca88416/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c4693bc946729393c087fb120af566395915d19d", "url": "https://api.github.com/repos/rust-lang/rust/commits/c4693bc946729393c087fb120af566395915d19d", "html_url": "https://github.com/rust-lang/rust/commit/c4693bc946729393c087fb120af566395915d19d"}, {"sha": "8a1c1ec8b2d806c135e19c748f0bc28188a79d00", "url": "https://api.github.com/repos/rust-lang/rust/commits/8a1c1ec8b2d806c135e19c748f0bc28188a79d00", "html_url": "https://github.com/rust-lang/rust/commit/8a1c1ec8b2d806c135e19c748f0bc28188a79d00"}], "stats": {"total": 14, "additions": 7, "deletions": 7}, "files": [{"sha": "2e47cf89210737b50de1ee1885dfa428b5669872", "filename": "compiler/rustc_const_eval/src/interpret/eval_context.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/416dc431249f077c1de635321c86dd1f3ca88416/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/416dc431249f077c1de635321c86dd1f3ca88416/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Feval_context.rs?ref=416dc431249f077c1de635321c86dd1f3ca88416", "patch": "@@ -15,7 +15,7 @@ use rustc_middle::ty::layout::{\n use rustc_middle::ty::{\n     self, query::TyCtxtAt, subst::SubstsRef, ParamEnv, Ty, TyCtxt, TypeFoldable,\n };\n-use rustc_mir_dataflow::storage::always_live_locals;\n+use rustc_mir_dataflow::storage::always_storage_live_locals;\n use rustc_query_system::ich::StableHashingContext;\n use rustc_session::Limit;\n use rustc_span::{Pos, Span};\n@@ -707,7 +707,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         let mut locals = IndexVec::from_elem(dummy, &body.local_decls);\n \n         // Now mark those locals as live that have no `Storage*` annotations.\n-        let always_live = always_live_locals(self.body());\n+        let always_live = always_storage_live_locals(self.body());\n         for local in locals.indices() {\n             if always_live.contains(local) {\n                 locals[local].value = LocalValue::Live(Operand::Immediate(Immediate::Uninit));"}, {"sha": "2dfe226030aac7b9912a535a21c2945edf0d39d4", "filename": "compiler/rustc_const_eval/src/transform/validate.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/416dc431249f077c1de635321c86dd1f3ca88416/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fvalidate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/416dc431249f077c1de635321c86dd1f3ca88416/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fvalidate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fvalidate.rs?ref=416dc431249f077c1de635321c86dd1f3ca88416", "patch": "@@ -15,7 +15,7 @@ use rustc_middle::ty::fold::BottomUpFolder;\n use rustc_middle::ty::subst::Subst;\n use rustc_middle::ty::{self, InstanceDef, ParamEnv, Ty, TyCtxt, TypeFoldable, TypeVisitable};\n use rustc_mir_dataflow::impls::MaybeStorageLive;\n-use rustc_mir_dataflow::storage::always_live_locals;\n+use rustc_mir_dataflow::storage::always_storage_live_locals;\n use rustc_mir_dataflow::{Analysis, ResultsCursor};\n use rustc_target::abi::{Size, VariantIdx};\n \n@@ -49,7 +49,7 @@ impl<'tcx> MirPass<'tcx> for Validator {\n         let param_env = tcx.param_env(def_id);\n         let mir_phase = self.mir_phase;\n \n-        let always_live_locals = always_live_locals(body);\n+        let always_live_locals = always_storage_live_locals(body);\n         let storage_liveness = MaybeStorageLive::new(always_live_locals)\n             .into_engine(tcx, body)\n             .iterate_to_fixpoint()"}, {"sha": "566c9d2d5054e6d1bf4333d3aead9fdae586b552", "filename": "compiler/rustc_mir_dataflow/src/storage.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/416dc431249f077c1de635321c86dd1f3ca88416/compiler%2Frustc_mir_dataflow%2Fsrc%2Fstorage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/416dc431249f077c1de635321c86dd1f3ca88416/compiler%2Frustc_mir_dataflow%2Fsrc%2Fstorage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fstorage.rs?ref=416dc431249f077c1de635321c86dd1f3ca88416", "patch": "@@ -7,7 +7,7 @@ use rustc_middle::mir::{self, Local};\n //\n // FIXME: Currently, we need to traverse the entire MIR to compute this. We should instead store it\n // as a field in the `LocalDecl` for each `Local`.\n-pub fn always_live_locals(body: &mir::Body<'_>) -> BitSet<Local> {\n+pub fn always_storage_live_locals(body: &mir::Body<'_>) -> BitSet<Local> {\n     let mut always_live_locals = BitSet::new_filled(body.local_decls.len());\n \n     for block in body.basic_blocks() {"}, {"sha": "9fdea8359671f0240cc3cc1573d3efd89a88b1c7", "filename": "compiler/rustc_mir_transform/src/generator.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/416dc431249f077c1de635321c86dd1f3ca88416/compiler%2Frustc_mir_transform%2Fsrc%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/416dc431249f077c1de635321c86dd1f3ca88416/compiler%2Frustc_mir_transform%2Fsrc%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fgenerator.rs?ref=416dc431249f077c1de635321c86dd1f3ca88416", "patch": "@@ -67,7 +67,7 @@ use rustc_middle::ty::{self, AdtDef, Ty, TyCtxt};\n use rustc_mir_dataflow::impls::{\n     MaybeBorrowedLocals, MaybeLiveLocals, MaybeRequiresStorage, MaybeStorageLive,\n };\n-use rustc_mir_dataflow::storage;\n+use rustc_mir_dataflow::storage::always_storage_live_locals;\n use rustc_mir_dataflow::{self, Analysis};\n use rustc_target::abi::VariantIdx;\n use rustc_target::spec::PanicStrategy;\n@@ -1379,7 +1379,7 @@ impl<'tcx> MirPass<'tcx> for StateTransform {\n             },\n         );\n \n-        let always_live_locals = storage::always_live_locals(&body);\n+        let always_live_locals = always_storage_live_locals(&body);\n \n         let liveness_info =\n             locals_live_across_suspend_points(tcx, body, &always_live_locals, movable);"}]}