{"sha": "e1522fa1832a0e82d235e6fb9f15d9d2647ff5aa", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUxNTIyZmExODMyYTBlODJkMjM1ZTZmYjlmMTVkOWQyNjQ3ZmY1YWE=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2019-11-10T17:41:09Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2019-11-19T19:47:57Z"}, "message": "Derive HashStable more.", "tree": {"sha": "0d6b9b1b88a2156bafac8ab8aaec6816807bc672", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0d6b9b1b88a2156bafac8ab8aaec6816807bc672"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e1522fa1832a0e82d235e6fb9f15d9d2647ff5aa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e1522fa1832a0e82d235e6fb9f15d9d2647ff5aa", "html_url": "https://github.com/rust-lang/rust/commit/e1522fa1832a0e82d235e6fb9f15d9d2647ff5aa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e1522fa1832a0e82d235e6fb9f15d9d2647ff5aa/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "781866f3a95da0e4a35151cc24523f186ce19c79", "url": "https://api.github.com/repos/rust-lang/rust/commits/781866f3a95da0e4a35151cc24523f186ce19c79", "html_url": "https://github.com/rust-lang/rust/commit/781866f3a95da0e4a35151cc24523f186ce19c79"}], "stats": {"total": 35, "additions": 6, "deletions": 29}, "files": [{"sha": "465673082e50af32e59f6e9f31a962b62d26e54a", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e1522fa1832a0e82d235e6fb9f15d9d2647ff5aa/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1522fa1832a0e82d235e6fb9f15d9d2647ff5aa/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=e1522fa1832a0e82d235e6fb9f15d9d2647ff5aa", "patch": "@@ -1215,7 +1215,7 @@ impl UnOp {\n }\n \n /// A statement.\n-#[derive(RustcEncodable, RustcDecodable)]\n+#[derive(RustcEncodable, RustcDecodable, HashStable)]\n pub struct Stmt {\n     pub hir_id: HirId,\n     pub kind: StmtKind,"}, {"sha": "816e93698bce961ad6a2a483afc001633ea59995", "filename": "src/librustc/ich/impls_hir.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e1522fa1832a0e82d235e6fb9f15d9d2647ff5aa/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1522fa1832a0e82d235e6fb9f15d9d2647ff5aa/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_hir.rs?ref=e1522fa1832a0e82d235e6fb9f15d9d2647ff5aa", "patch": "@@ -140,13 +140,6 @@ impl<'a> HashStable<StableHashingContext<'a>> for hir::Ty {\n \n impl_stable_hash_for_spanned!(hir::BinOpKind);\n \n-impl_stable_hash_for!(struct hir::Stmt {\n-    hir_id,\n-    kind,\n-    span,\n-});\n-\n-\n impl_stable_hash_for_spanned!(ast::Name);\n \n impl<'a> HashStable<StableHashingContext<'a>> for hir::Expr {"}, {"sha": "b115b5a699159bf5fe981c731f37e341ae23b828", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 4, "deletions": 19, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/e1522fa1832a0e82d235e6fb9f15d9d2647ff5aa/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1522fa1832a0e82d235e6fb9f15d9d2647ff5aa/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=e1522fa1832a0e82d235e6fb9f15d9d2647ff5aa", "patch": "@@ -1589,13 +1589,12 @@ rustc_index::newtype_index! {\n     /// declared, but a type name in a non-zero universe is a placeholder\n     /// type -- an idealized representative of \"types in general\" that we\n     /// use for checking generic functions.\n+    #[derive(HashStable)]\n     pub struct UniverseIndex {\n         DEBUG_FORMAT = \"U{}\",\n     }\n }\n \n-impl_stable_hash_for!(struct UniverseIndex { private });\n-\n impl UniverseIndex {\n     pub const ROOT: UniverseIndex = UniverseIndex::from_u32_const(0);\n \n@@ -1839,7 +1838,7 @@ bitflags! {\n }\n \n /// Definition of a variant -- a struct's fields or a enum variant.\n-#[derive(Debug)]\n+#[derive(Debug, HashStable)]\n pub struct VariantDef {\n     /// `DefId` that identifies the variant itself.\n     /// If this variant belongs to a struct or union, then this is a copy of its `DefId`.\n@@ -1848,6 +1847,7 @@ pub struct VariantDef {\n     /// If this variant is a struct variant, then this is `None`.\n     pub ctor_def_id: Option<DefId>,\n     /// Variant or struct name.\n+    #[stable_hasher(project = name)]\n     pub ident: Ident,\n     /// Discriminant of this variant.\n     pub discr: VariantDiscr,\n@@ -1927,17 +1927,6 @@ impl<'tcx> VariantDef {\n     }\n }\n \n-impl_stable_hash_for!(struct VariantDef {\n-    def_id,\n-    ctor_def_id,\n-    ident -> (ident.name),\n-    discr,\n-    fields,\n-    ctor_kind,\n-    flags,\n-    recovered\n-});\n-\n #[derive(Copy, Clone, Debug, PartialEq, Eq, RustcEncodable, RustcDecodable, HashStable)]\n pub enum VariantDiscr {\n     /// Explicit value for this variant, i.e., `X = 123`.\n@@ -2061,7 +2050,7 @@ impl Into<DataTypeKind> for AdtKind {\n }\n \n bitflags! {\n-    #[derive(RustcEncodable, RustcDecodable, Default)]\n+    #[derive(RustcEncodable, RustcDecodable, Default, HashStable)]\n     pub struct ReprFlags: u8 {\n         const IS_C               = 1 << 0;\n         const IS_SIMD            = 1 << 1;\n@@ -2076,10 +2065,6 @@ bitflags! {\n     }\n }\n \n-impl_stable_hash_for!(struct ReprFlags {\n-    bits\n-});\n-\n /// Represents the repr options provided by the user,\n #[derive(Copy, Clone, Debug, Eq, PartialEq, RustcEncodable, RustcDecodable,\n          Default, HashStable)]"}, {"sha": "07258717cd9d4a668dc9769545f7fe33da3146e2", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e1522fa1832a0e82d235e6fb9f15d9d2647ff5aa/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1522fa1832a0e82d235e6fb9f15d9d2647ff5aa/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=e1522fa1832a0e82d235e6fb9f15d9d2647ff5aa", "patch": "@@ -1204,6 +1204,7 @@ rustc_index::newtype_index! {\n     /// is the outer fn.\n     ///\n     /// [dbi]: http://en.wikipedia.org/wiki/De_Bruijn_index\n+    #[derive(HashStable)]\n     pub struct DebruijnIndex {\n         DEBUG_FORMAT = \"DebruijnIndex({})\",\n         const INNERMOST = 0,\n@@ -1517,8 +1518,6 @@ impl DebruijnIndex {\n     }\n }\n \n-impl_stable_hash_for!(struct DebruijnIndex { private });\n-\n /// Region utilities\n impl RegionKind {\n     /// Is this region named by the user?"}]}