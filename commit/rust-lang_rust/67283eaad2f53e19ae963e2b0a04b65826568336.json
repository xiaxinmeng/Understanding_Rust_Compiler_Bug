{"sha": "67283eaad2f53e19ae963e2b0a04b65826568336", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY3MjgzZWFhZDJmNTNlMTlhZTk2M2UyYjBhMDRiNjU4MjY1NjgzMzY=", "commit": {"author": {"name": "Tom Lee", "email": "github@tomlee.co", "date": "2013-05-22T06:17:04Z"}, "committer": {"name": "Tom Lee", "email": "github@tomlee.co", "date": "2013-05-28T00:13:01Z"}, "message": "Omit unused implicit argument if return type is immediate.", "tree": {"sha": "4224fafe84f9b4c22b032acddbcd9490149a5229", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4224fafe84f9b4c22b032acddbcd9490149a5229"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/67283eaad2f53e19ae963e2b0a04b65826568336", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/67283eaad2f53e19ae963e2b0a04b65826568336", "html_url": "https://github.com/rust-lang/rust/commit/67283eaad2f53e19ae963e2b0a04b65826568336", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/67283eaad2f53e19ae963e2b0a04b65826568336/comments", "author": {"login": "thomaslee", "id": 93216, "node_id": "MDQ6VXNlcjkzMjE2", "avatar_url": "https://avatars.githubusercontent.com/u/93216?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thomaslee", "html_url": "https://github.com/thomaslee", "followers_url": "https://api.github.com/users/thomaslee/followers", "following_url": "https://api.github.com/users/thomaslee/following{/other_user}", "gists_url": "https://api.github.com/users/thomaslee/gists{/gist_id}", "starred_url": "https://api.github.com/users/thomaslee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thomaslee/subscriptions", "organizations_url": "https://api.github.com/users/thomaslee/orgs", "repos_url": "https://api.github.com/users/thomaslee/repos", "events_url": "https://api.github.com/users/thomaslee/events{/privacy}", "received_events_url": "https://api.github.com/users/thomaslee/received_events", "type": "User", "site_admin": false}, "committer": {"login": "thomaslee", "id": 93216, "node_id": "MDQ6VXNlcjkzMjE2", "avatar_url": "https://avatars.githubusercontent.com/u/93216?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thomaslee", "html_url": "https://github.com/thomaslee", "followers_url": "https://api.github.com/users/thomaslee/followers", "following_url": "https://api.github.com/users/thomaslee/following{/other_user}", "gists_url": "https://api.github.com/users/thomaslee/gists{/gist_id}", "starred_url": "https://api.github.com/users/thomaslee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thomaslee/subscriptions", "organizations_url": "https://api.github.com/users/thomaslee/orgs", "repos_url": "https://api.github.com/users/thomaslee/repos", "events_url": "https://api.github.com/users/thomaslee/events{/privacy}", "received_events_url": "https://api.github.com/users/thomaslee/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dbc57584bd4e87f0bd3eed6bced8bbd04d99edcf", "url": "https://api.github.com/repos/rust-lang/rust/commits/dbc57584bd4e87f0bd3eed6bced8bbd04d99edcf", "html_url": "https://github.com/rust-lang/rust/commit/dbc57584bd4e87f0bd3eed6bced8bbd04d99edcf"}], "stats": {"total": 243, "additions": 132, "deletions": 111}, "files": [{"sha": "ed3ac5fadb4e2d0e78a5b61ca57bc2feeda6875c", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 45, "deletions": 44, "changes": 89, "blob_url": "https://github.com/rust-lang/rust/blob/67283eaad2f53e19ae963e2b0a04b65826568336/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67283eaad2f53e19ae963e2b0a04b65826568336/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=67283eaad2f53e19ae963e2b0a04b65826568336", "patch": "@@ -1593,7 +1593,7 @@ pub fn new_fn_ctxt_w_id(ccx: @CrateContext,\n                         impl_id: Option<ast::def_id>,\n                         param_substs: Option<@param_substs>,\n                         sp: Option<span>)\n-                     -> fn_ctxt {\n+                     -> (fn_ctxt, bool) {\n     for param_substs.each |p| { p.validate(); }\n \n     debug!(\"new_fn_ctxt_w_id(path=%s, id=%?, impl_id=%?, \\\n@@ -1611,19 +1611,21 @@ pub fn new_fn_ctxt_w_id(ccx: @CrateContext,\n             ty::subst_tps(ccx.tcx, substs.tys, substs.self_ty, output_type)\n         }\n     };\n-    let is_immediate = ty::type_is_immediate(substd_output_type);\n+    let imm = ty::type_is_immediate(substd_output_type);\n \n     let fcx = @mut fn_ctxt_ {\n           llfn: llfndecl,\n-          llenv: unsafe { llvm::LLVMGetParam(llfndecl, 1u as c_uint) },\n+          llenv: unsafe {\n+              llvm::LLVMGetParam(llfndecl, arg_env(imm) as c_uint)\n+          },\n           llretptr: None,\n           llstaticallocas: llbbs.sa,\n           llloadenv: None,\n           llreturn: llbbs.rt,\n           llself: None,\n           personality: None,\n           loop_ret: None,\n-          has_immediate_return_value: is_immediate,\n+          has_immediate_return_value: imm,\n           llargs: @mut HashMap::new(),\n           lllocals: @mut HashMap::new(),\n           llupvars: @mut HashMap::new(),\n@@ -1636,15 +1638,15 @@ pub fn new_fn_ctxt_w_id(ccx: @CrateContext,\n     };\n \n     fcx.llretptr = Some(make_return_pointer(fcx, substd_output_type));\n-    fcx\n+    (fcx, imm)\n }\n \n pub fn new_fn_ctxt(ccx: @CrateContext,\n                    path: path,\n                    llfndecl: ValueRef,\n                    output_type: ty::t,\n                    sp: Option<span>)\n-                -> fn_ctxt {\n+                -> (fn_ctxt, bool) {\n     new_fn_ctxt_w_id(ccx, path, llfndecl, -1, output_type, None, None, sp)\n }\n \n@@ -1664,7 +1666,8 @@ pub fn new_fn_ctxt(ccx: @CrateContext,\n // field of the fn_ctxt with\n pub fn create_llargs_for_fn_args(cx: fn_ctxt,\n                                  self_arg: self_arg,\n-                                 args: &[ast::arg])\n+                                 args: &[ast::arg],\n+                                 ret_imm: bool)\n                               -> ~[ValueRef] {\n     let _icx = cx.insn_ctxt(\"create_llargs_for_fn_args\");\n \n@@ -1690,7 +1693,7 @@ pub fn create_llargs_for_fn_args(cx: fn_ctxt,\n     // llvm::LLVMGetParam for each argument.\n     vec::from_fn(args.len(), |i| {\n         unsafe {\n-            let arg_n = first_real_arg + i;\n+            let arg_n = arg_pos(ret_imm, i);\n             let arg = &args[i];\n             let llarg = llvm::LLVMGetParam(cx.llfn, arg_n as c_uint);\n \n@@ -1829,15 +1832,15 @@ pub fn trans_closure(ccx: @CrateContext,\n            param_substs.repr(ccx.tcx));\n \n     // Set up arguments to the function.\n-    let fcx = new_fn_ctxt_w_id(ccx,\n-                               path,\n-                               llfndecl,\n-                               id,\n-                               output_type,\n-                               impl_id,\n-                               param_substs,\n-                               Some(body.span));\n-    let raw_llargs = create_llargs_for_fn_args(fcx, self_arg, decl.inputs);\n+    let (fcx, imm) = new_fn_ctxt_w_id(ccx,\n+                                       path,\n+                                       llfndecl,\n+                                       id,\n+                                       output_type,\n+                                       impl_id,\n+                                       param_substs,\n+                                       Some(body.span));\n+    let raw_llargs = create_llargs_for_fn_args(fcx, self_arg, decl.inputs, imm);\n \n     // Set the fixed stack segment flag if necessary.\n     if attr::attrs_contains_name(attributes, \"fixed_stack_segment\") {\n@@ -1962,16 +1965,16 @@ pub fn trans_enum_variant(ccx: @CrateContext,\n                                 ty_param_substs,\n                                 None,\n                                 ty::node_id_to_type(ccx.tcx, enum_id));\n-    let fcx = new_fn_ctxt_w_id(ccx,\n-                               ~[],\n-                               llfndecl,\n-                               variant.node.id,\n-                               enum_ty,\n-                               None,\n-                               param_substs,\n-                               None);\n-\n-    let raw_llargs = create_llargs_for_fn_args(fcx, no_self, fn_args);\n+    let (fcx, imm) = new_fn_ctxt_w_id(ccx,\n+                                       ~[],\n+                                       llfndecl,\n+                                       variant.node.id,\n+                                       enum_ty,\n+                                       None,\n+                                       param_substs,\n+                                       None);\n+\n+    let raw_llargs = create_llargs_for_fn_args(fcx, no_self, fn_args, imm);\n     let bcx = top_scope_block(fcx, None), lltop = bcx.llbb;\n     let arg_tys = ty::ty_fn_args(node_id_type(bcx, variant.node.id));\n     let bcx = copy_args_to_allocas(fcx, bcx, fn_args, raw_llargs, arg_tys);\n@@ -2041,16 +2044,16 @@ pub fn trans_tuple_struct(ccx: @CrateContext,\n                                ty_to_str(ccx.tcx, ctor_ty)))\n     };\n \n-    let fcx = new_fn_ctxt_w_id(ccx,\n-                               ~[],\n-                               llfndecl,\n-                               ctor_id,\n-                               tup_ty,\n-                               None,\n-                               param_substs,\n-                               None);\n+    let (fcx, imm) = new_fn_ctxt_w_id(ccx,\n+                                       ~[],\n+                                       llfndecl,\n+                                       ctor_id,\n+                                       tup_ty,\n+                                       None,\n+                                       param_substs,\n+                                       None);\n \n-    let raw_llargs = create_llargs_for_fn_args(fcx, no_self, fn_args);\n+    let raw_llargs = create_llargs_for_fn_args(fcx, no_self, fn_args, imm);\n \n     let bcx = top_scope_block(fcx, None);\n     let lltop = bcx.llbb;\n@@ -2293,19 +2296,21 @@ pub fn create_entry_wrapper(ccx: @CrateContext,\n \n     fn create_main(ccx: @CrateContext, main_llfn: ValueRef) -> ValueRef {\n         let nt = ty::mk_nil();\n+\n         let llfty = type_of_fn(ccx, [], nt);\n         let llfdecl = decl_fn(ccx.llmod, \"_rust_main\",\n                               lib::llvm::CCallConv, llfty);\n \n-        let fcx = new_fn_ctxt(ccx, ~[], llfdecl, nt, None);\n+        let (fcx, _) = new_fn_ctxt(ccx, ~[], llfdecl, nt, None);\n \n         let bcx = top_scope_block(fcx, None);\n         let lltop = bcx.llbb;\n \n         // Call main.\n-        let lloutputarg = C_null(T_ptr(T_i8()));\n-        let llenvarg = unsafe { llvm::LLVMGetParam(llfdecl, 1 as c_uint) };\n-        let args = ~[lloutputarg, llenvarg];\n+        let llenvarg = unsafe {\n+            llvm::LLVMGetParam(llfdecl, arg_env(true) as c_uint)\n+        };\n+        let args = ~[llenvarg];\n         let llresult = Call(bcx, main_llfn, args);\n         Store(bcx, llresult, fcx.llretptr.get());\n \n@@ -2347,8 +2352,6 @@ pub fn create_entry_wrapper(ccx: @CrateContext,\n                 trans_external_path(ccx, start_def_id, start_fn_type);\n             }\n \n-            let retptr = llvm::LLVMBuildAlloca(bld, T_i8(), noname());\n-\n             let crate_map = ccx.crate_map;\n             let opaque_crate_map = llvm::LLVMBuildPointerCast(bld,\n                                                               crate_map,\n@@ -2371,7 +2374,6 @@ pub fn create_entry_wrapper(ccx: @CrateContext,\n                             bld, rust_main, T_ptr(T_i8()), noname());\n \n                     ~[\n-                        retptr,\n                         C_null(T_opaque_box_ptr(ccx)),\n                         opaque_rust_main,\n                         llvm::LLVMGetParam(llfn, 0),\n@@ -2384,7 +2386,6 @@ pub fn create_entry_wrapper(ccx: @CrateContext,\n                 debug!(\"using user-defined start fn\");\n                 let args = {\n                     ~[\n-                        retptr,\n                         C_null(T_opaque_box_ptr(ccx)),\n                         llvm::LLVMGetParam(llfn, 0 as c_uint),\n                         llvm::LLVMGetParam(llfn, 1 as c_uint),"}, {"sha": "ecf9963b68a740f2ff804d071fc2967561c17635", "filename": "src/librustc/middle/trans/cabi.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/67283eaad2f53e19ae963e2b0a04b65826568336/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67283eaad2f53e19ae963e2b0a04b65826568336/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi.rs?ref=67283eaad2f53e19ae963e2b0a04b65826568336", "patch": "@@ -132,7 +132,8 @@ pub impl FnType {\n                        bcx: block,\n                        ret_ty: TypeRef,\n                        llwrapfn: ValueRef,\n-                       llargbundle: ValueRef) {\n+                       llargbundle: ValueRef,\n+                       ret_imm: bool) {\n         let mut atys = /*bad*/copy self.arg_tys;\n         let mut attrs = /*bad*/copy self.attrs;\n         let mut j = 0u;"}, {"sha": "b710f33d6abb238139addf5ca345d00a680f7beb", "filename": "src/librustc/middle/trans/callee.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/67283eaad2f53e19ae963e2b0a04b65826568336/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67283eaad2f53e19ae963e2b0a04b65826568336/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs?ref=67283eaad2f53e19ae963e2b0a04b65826568336", "patch": "@@ -510,11 +510,7 @@ pub fn trans_call_inner(in_cx: block,\n \n         let mut llargs = ~[];\n \n-        if ty::type_is_immediate(ret_ty) {\n-            unsafe {\n-                llargs.push(llvm::LLVMGetUndef(T_ptr(T_i8())));\n-            }\n-        } else {\n+        if !ty::type_is_immediate(ret_ty) {\n             llargs.push(llretslot);\n         }\n "}, {"sha": "00b67976683985109c98028350a175fadb727094", "filename": "src/librustc/middle/trans/common.rs", "status": "modified", "additions": 21, "deletions": 4, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/67283eaad2f53e19ae963e2b0a04b65826568336/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67283eaad2f53e19ae963e2b0a04b65826568336/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs?ref=67283eaad2f53e19ae963e2b0a04b65826568336", "patch": "@@ -660,8 +660,26 @@ pub fn mk_block(llbb: BasicBlockRef, parent: Option<block>, kind: block_kind,\n     @mut block_(llbb, parent, kind, is_lpad, node_info, fcx)\n }\n \n-// First two args are retptr, env\n-pub static first_real_arg: uint = 2u;\n+pub fn arg_pos(ret_imm: bool, arg: uint) -> uint {\n+    if ret_imm {\n+        arg + 1u\n+    } else {\n+        arg + 2u\n+    }\n+}\n+\n+pub fn arg_out(ret_imm: bool) -> uint {\n+    assert!(ret_imm);\n+    0u\n+}\n+\n+pub fn arg_env(ret_imm: bool) -> uint {\n+    if !ret_imm {\n+        1u\n+    } else {\n+        0u\n+    }\n+}\n \n pub struct Result {\n     bcx: block,\n@@ -962,8 +980,7 @@ pub fn T_tydesc(targ_cfg: @session::config) -> TypeRef {\n     let tydescpp = T_ptr(T_ptr(tydesc));\n     let pvoid = T_ptr(T_i8());\n     let glue_fn_ty =\n-        T_ptr(T_fn([T_ptr(T_nil()), T_ptr(T_nil()), tydescpp,\n-                    pvoid], T_void()));\n+        T_ptr(T_fn([T_ptr(T_nil()), tydescpp, pvoid], T_void()));\n \n     let int_type = T_int(targ_cfg);\n     let elems ="}, {"sha": "08e17a4d2ec26397d5e73c484aee125e3bcd925a", "filename": "src/librustc/middle/trans/foreign.rs", "status": "modified", "additions": 32, "deletions": 25, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/67283eaad2f53e19ae963e2b0a04b65826568336/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67283eaad2f53e19ae963e2b0a04b65826568336/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs?ref=67283eaad2f53e19ae963e2b0a04b65826568336", "patch": "@@ -150,9 +150,14 @@ fn build_shim_fn_(ccx: @CrateContext,\n         ccx.llmod, shim_name, tys.shim_fn_ty);\n \n     // Declare the body of the shim function:\n-    let fcx = new_fn_ctxt(ccx, ~[], llshimfn, tys.fn_sig.output, None);\n+    let (fcx, imm) = new_fn_ctxt(ccx, ~[], llshimfn, tys.fn_sig.output, None);\n     let bcx = top_scope_block(fcx, None);\n     let lltop = bcx.llbb;\n+\n+    //\n+    // FIXME [#6575] this seems to be making the assumption that the first\n+    //               implicit argument is always available?\n+    //\n     let llargbundle = get_param(llshimfn, 0u);\n     let llargvals = arg_builder(bcx, tys, llargbundle);\n \n@@ -174,7 +179,8 @@ fn build_shim_fn_(ccx: @CrateContext,\n type wrap_arg_builder<'self> = &'self fn(bcx: block,\n                                          tys: &ShimTypes,\n                                          llwrapfn: ValueRef,\n-                                         llargbundle: ValueRef);\n+                                         llargbundle: ValueRef,\n+                                         ret_imm: bool);\n \n type wrap_ret_builder<'self> = &'self fn(bcx: block,\n                                          tys: &ShimTypes,\n@@ -189,7 +195,7 @@ fn build_wrap_fn_(ccx: @CrateContext,\n                   arg_builder: wrap_arg_builder,\n                   ret_builder: wrap_ret_builder) {\n     let _icx = ccx.insn_ctxt(\"foreign::build_wrap_fn_\");\n-    let fcx = new_fn_ctxt(ccx, ~[], llwrapfn, tys.fn_sig.output, None);\n+    let (fcx, imm) = new_fn_ctxt(ccx, ~[], llwrapfn, tys.fn_sig.output, None);\n \n     // Patch up the return type if it's not immediate and we're returning via\n     // the C ABI.\n@@ -204,7 +210,7 @@ fn build_wrap_fn_(ccx: @CrateContext,\n \n     // Allocate the struct and write the arguments into it.\n     let llargbundle = alloca(bcx, tys.bundle_ty);\n-    arg_builder(bcx, tys, llwrapfn, llargbundle);\n+    arg_builder(bcx, tys, llwrapfn, llargbundle, imm);\n \n     // Create call itself.\n     let llshimfnptr = PointerCast(bcx, llshimfn, T_ptr(T_i8()));\n@@ -432,16 +438,16 @@ pub fn trans_foreign_mod(ccx: @CrateContext,\n                        cc: lib::llvm::CallConv) {\n         debug!(\"build_direct_fn(%s)\", *link_name(ccx, item));\n \n-        let fcx = new_fn_ctxt(ccx, ~[], decl, tys.fn_sig.output, None);\n+        let (fcx, imm) = new_fn_ctxt(ccx, ~[], decl, tys.fn_sig.output, None);\n         let bcx = top_scope_block(fcx, None), lltop = bcx.llbb;\n         let llbasefn = base_fn(ccx, *link_name(ccx, item), tys, cc);\n         let ty = ty::lookup_item_type(ccx.tcx,\n                                       ast_util::local_def(item.id)).ty;\n+        let ret_ty = ty::ty_fn_ret(ty);\n         let args = vec::from_fn(ty::ty_fn_args(ty).len(), |i| {\n-            get_param(decl, i + first_real_arg)\n+            get_param(decl, arg_pos(imm, i))\n         });\n         let retval = Call(bcx, llbasefn, args);\n-        let ret_ty = ty::ty_fn_ret(ty);\n         if !ty::type_is_nil(ret_ty) && !ty::type_is_bot(ret_ty) {\n             Store(bcx, retval, fcx.llretptr.get());\n         }\n@@ -458,18 +464,18 @@ pub fn trans_foreign_mod(ccx: @CrateContext,\n                          cc: lib::llvm::CallConv) {\n         debug!(\"build_fast_ffi_fn(%s)\", *link_name(ccx, item));\n \n-        let fcx = new_fn_ctxt(ccx, ~[], decl, tys.fn_sig.output, None);\n+        let (fcx, imm) = new_fn_ctxt(ccx, ~[], decl, tys.fn_sig.output, None);\n         let bcx = top_scope_block(fcx, None), lltop = bcx.llbb;\n         let llbasefn = base_fn(ccx, *link_name(ccx, item), tys, cc);\n         set_no_inline(fcx.llfn);\n         set_fixed_stack_segment(fcx.llfn);\n         let ty = ty::lookup_item_type(ccx.tcx,\n                                       ast_util::local_def(item.id)).ty;\n+        let ret_ty = ty::ty_fn_ret(ty);\n         let args = vec::from_fn(ty::ty_fn_args(ty).len(), |i| {\n-            get_param(decl, i + first_real_arg)\n+            get_param(decl, arg_pos(imm, i))\n         });\n         let retval = Call(bcx, llbasefn, args);\n-        let ret_ty = ty::ty_fn_ret(ty);\n         if !ty::type_is_nil(ret_ty) && !ty::type_is_bot(ret_ty) {\n             Store(bcx, retval, fcx.llretptr.get());\n         }\n@@ -508,13 +514,13 @@ pub fn trans_foreign_mod(ccx: @CrateContext,\n         fn build_args(bcx: block,\n                       tys: &ShimTypes,\n                       llwrapfn: ValueRef,\n-                      llargbundle: ValueRef) {\n+                      llargbundle: ValueRef,\n+                      ret_imm: bool) {\n             let _icx = bcx.insn_ctxt(\"foreign::wrap::build_args\");\n             let ccx = bcx.ccx();\n             let n = tys.llsig.llarg_tys.len();\n-            let implicit_args = first_real_arg; // return + env\n             for uint::range(0, n) |i| {\n-                let mut llargval = get_param(llwrapfn, i + implicit_args);\n+                let mut llargval = get_param(llwrapfn, arg_pos(ret_imm, i));\n \n                 // In some cases, Rust will pass a pointer which the\n                 // native C type doesn't have.  In that case, just\n@@ -552,14 +558,14 @@ pub fn trans_intrinsic(ccx: @CrateContext,\n \n     let output_type = ty::ty_fn_ret(ty::node_id_to_type(ccx.tcx, item.id));\n \n-    let fcx = new_fn_ctxt_w_id(ccx,\n-                               path,\n-                               decl,\n-                               item.id,\n-                               output_type,\n-                               None,\n-                               Some(substs),\n-                               Some(item.span));\n+    let (fcx, imm) = new_fn_ctxt_w_id(ccx,\n+                                       path,\n+                                       decl,\n+                                       item.id,\n+                                       output_type,\n+                                       None,\n+                                       Some(substs),\n+                                       Some(item.span));\n \n     // Set the fixed stack segment flag if necessary.\n     if attr::attrs_contains_name(attributes, \"fixed_stack_segment\") {\n@@ -568,6 +574,7 @@ pub fn trans_intrinsic(ccx: @CrateContext,\n \n     let mut bcx = top_scope_block(fcx, None);\n     let lltop = bcx.llbb;\n+    let first_real_arg = arg_pos(imm, 0u);\n     match *ccx.sess.str_of(item.ident) {\n         ~\"atomic_cxchg\" => {\n             let old = AtomicCmpXchg(bcx,\n@@ -1269,8 +1276,6 @@ pub fn trans_foreign_fn(ccx: @CrateContext,\n             if !ty::type_is_immediate(tys.fn_sig.output) {\n                 let llretptr = load_inbounds(bcx, llargbundle, [0u, n]);\n                 llargvals.push(llretptr);\n-            } else {\n-                llargvals.push(C_null(T_ptr(T_i8())));\n             }\n \n             let llenvptr = C_null(T_opaque_box_ptr(bcx.ccx()));\n@@ -1351,12 +1356,14 @@ pub fn trans_foreign_fn(ccx: @CrateContext,\n         fn build_args(bcx: block,\n                       tys: &ShimTypes,\n                       llwrapfn: ValueRef,\n-                      llargbundle: ValueRef) {\n+                      llargbundle: ValueRef,\n+                      ret_imm: bool) {\n             let _icx = bcx.insn_ctxt(\"foreign::foreign::wrap::build_args\");\n             tys.fn_ty.build_wrap_args(bcx,\n                                       tys.llsig.llret_ty,\n                                       llwrapfn,\n-                                      llargbundle);\n+                                      llargbundle,\n+                                      ret_imm);\n         }\n \n         fn build_ret(bcx: block, tys: &ShimTypes, llargbundle: ValueRef) {"}, {"sha": "29709cd553d5b979b4ad486561e55a26a87874df", "filename": "src/librustc/middle/trans/glue.rs", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/67283eaad2f53e19ae963e2b0a04b65826568336/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67283eaad2f53e19ae963e2b0a04b65826568336/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs?ref=67283eaad2f53e19ae963e2b0a04b65826568336", "patch": "@@ -19,6 +19,7 @@ use back::link::*;\n use driver::session;\n use lib;\n use lib::llvm::{llvm, ValueRef, TypeRef, True};\n+use lib::llvm::type_to_str;\n use middle::trans::adt;\n use middle::trans::base::*;\n use middle::trans::callee;\n@@ -381,8 +382,9 @@ pub fn call_tydesc_glue_full(bcx: block,\n         }\n     };\n \n-    Call(bcx, llfn, [C_null(T_ptr(T_nil())), C_null(T_ptr(T_nil())),\n-                     C_null(T_ptr(T_ptr(bcx.ccx().tydesc_type))), llrawptr]);\n+    Call(bcx, llfn, [C_null(T_ptr(T_nil())),\n+                        C_null(T_ptr(T_ptr(bcx.ccx().tydesc_type))),\n+                        llrawptr]);\n }\n \n // See [Note-arg-mode]\n@@ -483,17 +485,16 @@ pub fn trans_struct_drop(bcx: block,\n         };\n \n         // Class dtors have no explicit args, so the params should\n-        // just consist of the output pointer and the environment\n-        // (self)\n-        assert_eq!(params.len(), 2);\n+        // just consist of the environment (self)\n+        assert_eq!(params.len(), 1);\n \n         // Take a reference to the class (because it's using the Drop trait),\n         // do so now.\n         let llval = alloca(bcx, val_ty(v0));\n         Store(bcx, v0, llval);\n \n-        let self_arg = PointerCast(bcx, llval, params[1]);\n-        let args = ~[C_null(T_ptr(T_i8())), self_arg];\n+        let self_arg = PointerCast(bcx, llval, params[0]);\n+        let args = ~[self_arg];\n \n         Call(bcx, dtor_addr, args);\n \n@@ -726,7 +727,7 @@ pub fn make_generic_glue_inner(ccx: @CrateContext,\n                                helper: glue_helper)\n                             -> ValueRef {\n     let _icx = ccx.insn_ctxt(\"make_generic_glue_inner\");\n-    let fcx = new_fn_ctxt(ccx, ~[], llfn, ty::mk_nil(), None);\n+    let (fcx, imm) = new_fn_ctxt(ccx, ~[], llfn, ty::mk_nil(), None);\n     lib::llvm::SetLinkage(llfn, lib::llvm::InternalLinkage);\n     ccx.stats.n_glues_created += 1u;\n     // All glue functions take values passed *by alias*; this is a\n@@ -739,7 +740,7 @@ pub fn make_generic_glue_inner(ccx: @CrateContext,\n \n     let bcx = top_scope_block(fcx, None);\n     let lltop = bcx.llbb;\n-    let llrawptr0 = unsafe { llvm::LLVMGetParam(llfn, 3u as c_uint) };\n+    let llrawptr0 = unsafe { llvm::LLVMGetParam(llfn, arg_pos(true, 1u) as c_uint) };\n     helper(bcx, llrawptr0, t);\n     finish_fn(fcx, lltop);\n     return llfn;"}, {"sha": "681b11423ddc3d1eadc4208c1e36af7f985ffaf6", "filename": "src/librustc/middle/trans/reflect.rs", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/67283eaad2f53e19ae963e2b0a04b65826568336/src%2Flibrustc%2Fmiddle%2Ftrans%2Freflect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67283eaad2f53e19ae963e2b0a04b65826568336/src%2Flibrustc%2Fmiddle%2Ftrans%2Freflect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Freflect.rs?ref=67283eaad2f53e19ae963e2b0a04b65826568336", "patch": "@@ -287,13 +287,18 @@ pub impl Reflector {\n                 let llfty = type_of_fn(ccx, [opaqueptrty], ty::mk_int());\n                 let llfdecl = decl_internal_cdecl_fn(ccx.llmod, sym, llfty);\n                 let arg = unsafe {\n-                    llvm::LLVMGetParam(llfdecl, first_real_arg as c_uint)\n+                    //\n+                    // we know the return type of llfdecl is an int here, so\n+                    // no need for a special check to see if the return type\n+                    // is immediate.\n+                    //\n+                    llvm::LLVMGetParam(llfdecl, arg_pos(true, 0u) as c_uint)\n                 };\n-                let fcx = new_fn_ctxt(ccx,\n-                                      ~[],\n-                                      llfdecl,\n-                                      ty::mk_uint(),\n-                                      None);\n+                let (fcx, _) = new_fn_ctxt(ccx,\n+                                              ~[],\n+                                              llfdecl,\n+                                              ty::mk_uint(),\n+                                              None);\n                 let bcx = top_scope_block(fcx, None);\n                 let arg = BitCast(bcx, arg, llptrty);\n                 let ret = adt::trans_get_discr(bcx, repr, arg);"}, {"sha": "e3c424f8e7ecfe0b0f21b82d135f86e7b5419527", "filename": "src/librustc/middle/trans/type_of.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/67283eaad2f53e19ae963e2b0a04b65826568336/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67283eaad2f53e19ae963e2b0a04b65826568336/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_of.rs?ref=67283eaad2f53e19ae963e2b0a04b65826568336", "patch": "@@ -46,9 +46,6 @@ pub fn type_of_fn(cx: @CrateContext, inputs: &[ty::t], output: ty::t)\n         let lloutputtype = type_of(cx, output);\n         if !output_is_immediate {\n             atys.push(T_ptr(lloutputtype));\n-        } else {\n-            // FIXME #6575: Eliminate this.\n-            atys.push(T_ptr(T_i8()));\n         }\n \n         // Arg 1: Environment\n@@ -334,9 +331,7 @@ pub fn llvm_type_name(cx: @CrateContext,\n }\n \n pub fn type_of_dtor(ccx: @CrateContext, self_ty: ty::t) -> TypeRef {\n-    T_fn([T_ptr(T_i8()),                   // output pointer\n-          T_ptr(type_of(ccx, self_ty))],   // self arg\n-         T_nil())\n+    T_fn([T_ptr(type_of(ccx, self_ty))] /* self */, T_nil())\n }\n \n pub fn type_of_rooted(ccx: @CrateContext, t: ty::t) -> TypeRef {\n@@ -349,5 +344,5 @@ pub fn type_of_rooted(ccx: @CrateContext, t: ty::t) -> TypeRef {\n pub fn type_of_glue_fn(ccx: @CrateContext, t: ty::t) -> TypeRef {\n     let tydescpp = T_ptr(T_ptr(ccx.tydesc_type));\n     let llty = T_ptr(type_of(ccx, t));\n-    return T_fn([T_ptr(T_nil()), T_ptr(T_nil()), tydescpp, llty], T_nil());\n+    return T_fn([T_ptr(T_nil()), tydescpp, llty], T_nil());\n }"}, {"sha": "99fd46737e02f1ed18c44b59fdfc1efbe4927b68", "filename": "src/rt/rust_builtin.cpp", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/67283eaad2f53e19ae963e2b0a04b65826568336/src%2Frt%2Frust_builtin.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/67283eaad2f53e19ae963e2b0a04b65826568336/src%2Frt%2Frust_builtin.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_builtin.cpp?ref=67283eaad2f53e19ae963e2b0a04b65826568336", "patch": "@@ -731,10 +731,10 @@ rust_task_deref(rust_task *task) {\n // Must call on rust stack.\n extern \"C\" CDECL void\n rust_call_tydesc_glue(void *root, size_t *tydesc, size_t glue_index) {\n-    void (*glue_fn)(void *, void *, void *, void *) =\n-        (void (*)(void *, void *, void *, void *))tydesc[glue_index];\n+    void (*glue_fn)(void *, void *, void *) =\n+        (void (*)(void *, void *, void *))tydesc[glue_index];\n     if (glue_fn)\n-        glue_fn(0, 0, 0, root);\n+        glue_fn(0, 0, root);\n }\n \n // Don't run on the Rust stack!\n@@ -754,7 +754,7 @@ class raw_thread: public rust_thread {\n \n     virtual void run() {\n         record_sp_limit(0);\n-        fn.f(NULL, fn.env, NULL);\n+        fn.f(fn.env, NULL);\n     }\n };\n "}, {"sha": "28d36a4bf88bd61e54fd3495561995bad25c4278", "filename": "src/rt/rust_task.cpp", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/67283eaad2f53e19ae963e2b0a04b65826568336/src%2Frt%2Frust_task.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/67283eaad2f53e19ae963e2b0a04b65826568336/src%2Frt%2Frust_task.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_task.cpp?ref=67283eaad2f53e19ae963e2b0a04b65826568336", "patch": "@@ -162,9 +162,7 @@ void task_start_wrapper(spawn_args *a)\n \n     bool threw_exception = false;\n     try {\n-        // The first argument is the return pointer; as the task fn\n-        // must have void return type, we can safely pass 0.\n-        a->f(0, a->envptr, a->argptr);\n+        a->f(a->envptr, a->argptr);\n     } catch (rust_task *ex) {\n         assert(ex == task && \"Expected this task to be thrown for unwinding\");\n         threw_exception = true;\n@@ -185,7 +183,7 @@ void task_start_wrapper(spawn_args *a)\n     if(env) {\n         // free the environment (which should be a unique closure).\n         const type_desc *td = env->td;\n-        td->drop_glue(NULL, NULL, NULL, box_body(env));\n+        td->drop_glue(NULL, NULL, box_body(env));\n         task->kernel->region()->free(env);\n     }\n "}, {"sha": "6d36d2c960a2d4fdb739a4b05eda20bf39ab76d7", "filename": "src/rt/rust_type.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/67283eaad2f53e19ae963e2b0a04b65826568336/src%2Frt%2Frust_type.h", "raw_url": "https://github.com/rust-lang/rust/raw/67283eaad2f53e19ae963e2b0a04b65826568336/src%2Frt%2Frust_type.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_type.h?ref=67283eaad2f53e19ae963e2b0a04b65826568336", "patch": "@@ -21,11 +21,11 @@ struct rust_opaque_box;\n // - the main function: has a NULL environment, but uses the void* arg\n // - unique closures of type fn~(): have a non-NULL environment, but\n //   no arguments (and hence the final void*) is harmless\n-typedef void (*CDECL spawn_fn)(void*, rust_opaque_box*, void *);\n+typedef void (*CDECL spawn_fn)(rust_opaque_box*, void *);\n \n struct type_desc;\n \n-typedef void CDECL (glue_fn)(void *, void *, const type_desc **, void *);\n+typedef void CDECL (glue_fn)(void *, const type_desc **, void *);\n \n // Corresponds to the boxed data in the @ region.  The body follows the\n // header; you can obtain a ptr via box_body() below."}]}