{"sha": "7469d2b8631594a5ed41082f375bd4cb20538efa", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc0NjlkMmI4NjMxNTk0YTVlZDQxMDgyZjM3NWJkNGNiMjA1MzhlZmE=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-11-22T15:53:39Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-11-22T15:53:39Z"}, "message": "Remove TraitData from API", "tree": {"sha": "d7ebbde67a4253cf4e827c3f4d2e8323a26ad547", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d7ebbde67a4253cf4e827c3f4d2e8323a26ad547"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7469d2b8631594a5ed41082f375bd4cb20538efa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7469d2b8631594a5ed41082f375bd4cb20538efa", "html_url": "https://github.com/rust-lang/rust/commit/7469d2b8631594a5ed41082f375bd4cb20538efa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7469d2b8631594a5ed41082f375bd4cb20538efa/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fe119fef2746bade402fb73dcba8cde49779654d", "url": "https://api.github.com/repos/rust-lang/rust/commits/fe119fef2746bade402fb73dcba8cde49779654d", "html_url": "https://github.com/rust-lang/rust/commit/fe119fef2746bade402fb73dcba8cde49779654d"}], "stats": {"total": 15, "additions": 5, "deletions": 10}, "files": [{"sha": "9f8c6c4a52b3b468c828ef2cca13eff6e4f973b0", "filename": "crates/ra_hir/src/code_model.rs", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/7469d2b8631594a5ed41082f375bd4cb20538efa/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7469d2b8631594a5ed41082f375bd4cb20538efa/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model.rs?ref=7469d2b8631594a5ed41082f375bd4cb20538efa", "patch": "@@ -10,7 +10,6 @@ use hir_def::{\n     adt::VariantData,\n     body::scope::ExprScopes,\n     builtin_type::BuiltinType,\n-    data::TraitData,\n     nameres::per_ns::PerNs,\n     resolver::{HasResolver, TypeNs},\n     type_ref::TypeRef,\n@@ -707,11 +706,11 @@ impl Trait {\n     }\n \n     pub fn name(self, db: &impl DefDatabase) -> Option<Name> {\n-        self.trait_data(db).name.clone()\n+        db.trait_data(self.id).name.clone()\n     }\n \n     pub fn items(self, db: &impl DefDatabase) -> Vec<AssocItem> {\n-        self.trait_data(db).items.iter().map(|it| (*it).into()).collect()\n+        db.trait_data(self.id).items.iter().map(|it| (*it).into()).collect()\n     }\n \n     fn direct_super_traits(self, db: &impl HirDatabase) -> Vec<Trait> {\n@@ -757,7 +756,7 @@ impl Trait {\n     }\n \n     pub fn associated_type_by_name(self, db: &impl DefDatabase, name: &Name) -> Option<TypeAlias> {\n-        let trait_data = self.trait_data(db);\n+        let trait_data = db.trait_data(self.id);\n         let res =\n             trait_data.associated_types().map(TypeAlias::from).find(|t| &t.name(db) == name)?;\n         Some(res)\n@@ -771,16 +770,12 @@ impl Trait {\n         self.all_super_traits(db).into_iter().find_map(|t| t.associated_type_by_name(db, name))\n     }\n \n-    pub(crate) fn trait_data(self, db: &impl DefDatabase) -> Arc<TraitData> {\n-        db.trait_data(self.id)\n-    }\n-\n     pub fn trait_ref(self, db: &impl HirDatabase) -> TraitRef {\n         TraitRef::for_trait(db, self)\n     }\n \n     pub fn is_auto(self, db: &impl DefDatabase) -> bool {\n-        self.trait_data(db).auto\n+        db.trait_data(self.id).auto\n     }\n }\n "}, {"sha": "f61c27218c3a53a7a260319f970175748dc8543d", "filename": "crates/ra_hir/src/ty/method_resolution.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7469d2b8631594a5ed41082f375bd4cb20538efa/crates%2Fra_hir%2Fsrc%2Fty%2Fmethod_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7469d2b8631594a5ed41082f375bd4cb20538efa/crates%2Fra_hir%2Fsrc%2Fty%2Fmethod_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Fmethod_resolution.rs?ref=7469d2b8631594a5ed41082f375bd4cb20538efa", "patch": "@@ -233,7 +233,7 @@ fn iterate_trait_method_candidates<T>(\n         .chain(traits_from_env)\n         .chain(resolver.traits_in_scope(db).into_iter().map(Trait::from));\n     'traits: for t in traits {\n-        let data = t.trait_data(db);\n+        let data = db.trait_data(t.id);\n \n         // we'll be lazy about checking whether the type implements the\n         // trait, but if we find out it doesn't, we'll skip the rest of the"}]}