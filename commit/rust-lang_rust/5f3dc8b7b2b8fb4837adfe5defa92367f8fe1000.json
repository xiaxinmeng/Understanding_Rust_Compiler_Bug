{"sha": "5f3dc8b7b2b8fb4837adfe5defa92367f8fe1000", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVmM2RjOGI3YjJiOGZiNDgzN2FkZmU1ZGVmYTkyMzY3ZjhmZTEwMDA=", "commit": {"author": {"name": "Bj\u00f6rn Steinbrink", "email": "bsteinbr@gmail.com", "date": "2018-01-20T16:09:55Z"}, "committer": {"name": "Bj\u00f6rn Steinbrink", "email": "bsteinbr@gmail.com", "date": "2018-02-08T12:50:18Z"}, "message": "Fix oversized loads on x86_64 SysV FFI calls\n\nThe x86_64 SysV ABI should use exact sizes for small structs passed in\nregisters, i.e. a struct that occupies 3 bytes should use an i24,\ninstead of the i32 it currently uses.\n\nRefs #45543", "tree": {"sha": "7913ed25d955c6dfd72c6cf2d79f8caaf16a7946", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7913ed25d955c6dfd72c6cf2d79f8caaf16a7946"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5f3dc8b7b2b8fb4837adfe5defa92367f8fe1000", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5f3dc8b7b2b8fb4837adfe5defa92367f8fe1000", "html_url": "https://github.com/rust-lang/rust/commit/5f3dc8b7b2b8fb4837adfe5defa92367f8fe1000", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5f3dc8b7b2b8fb4837adfe5defa92367f8fe1000/comments", "author": {"login": "dotdash", "id": 230962, "node_id": "MDQ6VXNlcjIzMDk2Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/230962?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dotdash", "html_url": "https://github.com/dotdash", "followers_url": "https://api.github.com/users/dotdash/followers", "following_url": "https://api.github.com/users/dotdash/following{/other_user}", "gists_url": "https://api.github.com/users/dotdash/gists{/gist_id}", "starred_url": "https://api.github.com/users/dotdash/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dotdash/subscriptions", "organizations_url": "https://api.github.com/users/dotdash/orgs", "repos_url": "https://api.github.com/users/dotdash/repos", "events_url": "https://api.github.com/users/dotdash/events{/privacy}", "received_events_url": "https://api.github.com/users/dotdash/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dotdash", "id": 230962, "node_id": "MDQ6VXNlcjIzMDk2Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/230962?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dotdash", "html_url": "https://github.com/dotdash", "followers_url": "https://api.github.com/users/dotdash/followers", "following_url": "https://api.github.com/users/dotdash/following{/other_user}", "gists_url": "https://api.github.com/users/dotdash/gists{/gist_id}", "starred_url": "https://api.github.com/users/dotdash/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dotdash/subscriptions", "organizations_url": "https://api.github.com/users/dotdash/orgs", "repos_url": "https://api.github.com/users/dotdash/repos", "events_url": "https://api.github.com/users/dotdash/events{/privacy}", "received_events_url": "https://api.github.com/users/dotdash/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6c04c41034c46730fba97bfe9cfa2dd0687c2a5f", "url": "https://api.github.com/repos/rust-lang/rust/commits/6c04c41034c46730fba97bfe9cfa2dd0687c2a5f", "html_url": "https://github.com/rust-lang/rust/commit/6c04c41034c46730fba97bfe9cfa2dd0687c2a5f"}], "stats": {"total": 151, "additions": 94, "deletions": 57}, "files": [{"sha": "b8144a3ca7a3ee2ddb87745011bd33e6f7fe9022", "filename": "src/librustc_trans/cabi_x86_64.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/5f3dc8b7b2b8fb4837adfe5defa92367f8fe1000/src%2Flibrustc_trans%2Fcabi_x86_64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f3dc8b7b2b8fb4837adfe5defa92367f8fe1000/src%2Flibrustc_trans%2Fcabi_x86_64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcabi_x86_64.rs?ref=5f3dc8b7b2b8fb4837adfe5defa92367f8fe1000", "patch": "@@ -134,12 +134,13 @@ fn reg_component(cls: &[Option<Class>], i: &mut usize, size: Size) -> Option<Reg\n         None => None,\n         Some(Class::Int) => {\n             *i += 1;\n-            Some(match size.bytes() {\n-                1 => Reg::i8(),\n-                2 => Reg::i16(),\n-                3 |\n-                4 => Reg::i32(),\n-                _ => Reg::i64()\n+            Some(if size.bytes() < 8 {\n+                Reg {\n+                    kind: RegKind::Integer,\n+                    size\n+                }\n+            } else {\n+                Reg::i64()\n             })\n         }\n         Some(Class::Sse) => {"}, {"sha": "88666e9c1fd4784c8e5eeb0beac97581d4f8192d", "filename": "src/test/codegen/abi-x86_64_sysv.rs", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/5f3dc8b7b2b8fb4837adfe5defa92367f8fe1000/src%2Ftest%2Fcodegen%2Fabi-x86_64_sysv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f3dc8b7b2b8fb4837adfe5defa92367f8fe1000/src%2Ftest%2Fcodegen%2Fabi-x86_64_sysv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fabi-x86_64_sysv.rs?ref=5f3dc8b7b2b8fb4837adfe5defa92367f8fe1000", "patch": "@@ -0,0 +1,39 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// only-x86_64\n+\n+// compile-flags: -C no-prepopulate-passes\n+\n+#![crate_type = \"lib\"]\n+\n+pub struct S24 {\n+  a: i8,\n+  b: i8,\n+  c: i8,\n+}\n+\n+pub struct S48 {\n+  a: i16,\n+  b: i16,\n+  c: i8,\n+}\n+\n+// CHECK: i24 @struct_24_bits(i24\n+#[no_mangle]\n+pub extern \"sysv64\" fn struct_24_bits(a: S24) -> S24 {\n+  a\n+}\n+\n+// CHECK: i48 @struct_48_bits(i48\n+#[no_mangle]\n+pub extern \"sysv64\" fn struct_48_bits(a: S48) -> S48 {\n+  a\n+}"}, {"sha": "7a30983fdd33815bdf5a088e6b1ba8cb730e5418", "filename": "src/test/codegen/repr-transparent-sysv64.rs", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/5f3dc8b7b2b8fb4837adfe5defa92367f8fe1000/src%2Ftest%2Fcodegen%2Frepr-transparent-sysv64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f3dc8b7b2b8fb4837adfe5defa92367f8fe1000/src%2Ftest%2Fcodegen%2Frepr-transparent-sysv64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Frepr-transparent-sysv64.rs?ref=5f3dc8b7b2b8fb4837adfe5defa92367f8fe1000", "patch": "@@ -0,0 +1,39 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// only-x86_64\n+\n+// compile-flags: -C no-prepopulate-passes\n+\n+#![crate_type=\"lib\"]\n+#![feature(repr_transparent)]\n+\n+#[repr(C)]\n+pub struct Rgb8 { r: u8, g: u8, b: u8 }\n+\n+#[repr(transparent)]\n+pub struct Rgb8Wrap(Rgb8);\n+\n+// CHECK: i24 @test_Rgb8Wrap(i24)\n+#[no_mangle]\n+pub extern \"sysv64\" fn test_Rgb8Wrap(_: Rgb8Wrap) -> Rgb8Wrap { loop {} }\n+\n+#[repr(C)]\n+pub union FloatBits {\n+    float: f32,\n+    bits: u32,\n+}\n+\n+#[repr(transparent)]\n+pub struct SmallUnion(FloatBits);\n+\n+// CHECK: i32 @test_SmallUnion(i32)\n+#[no_mangle]\n+pub extern \"sysv64\" fn test_SmallUnion(_: SmallUnion) -> SmallUnion { loop {} }"}, {"sha": "087fa9b16b4ed06a3eae5a7a1842827c26f45f8c", "filename": "src/test/codegen/repr-transparent.rs", "status": "modified", "additions": 9, "deletions": 51, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/5f3dc8b7b2b8fb4837adfe5defa92367f8fe1000/src%2Ftest%2Fcodegen%2Frepr-transparent.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f3dc8b7b2b8fb4837adfe5defa92367f8fe1000/src%2Ftest%2Fcodegen%2Frepr-transparent.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Frepr-transparent.rs?ref=5f3dc8b7b2b8fb4837adfe5defa92367f8fe1000", "patch": "@@ -123,55 +123,13 @@ pub struct StructWithProjection(<f32 as Mirror>::It);\n pub extern fn test_Projection(_: StructWithProjection) -> StructWithProjection { loop {} }\n \n \n-// The rest of this file tests newtypes around small aggregates on an ABI where small aggregates are\n-// packed into one register. This is ABI-dependent, so instead we focus on one ABI and supply a\n-// dummy definition for other ABIs to keep FileCheck happy.\n+// All that remains to be tested are aggregates. They are tested in separate files called repr-\n+// transparent-*.rs  with `only-*` or `ignore-*` directives, because the expected LLVM IR\n+// function signatures vary so much that it's not reasonably possible to cover all of them with a\n+// single CHECK line.\n //\n-// Bigger aggregates are tested in separate files called repr-transparent-aggregate-*.rs because\n-// there, the expected LLVM IR function signatures vary so much that it's not reasonably possible to\n-// cover all of them with a single CHECK line. Instead we group ABIs by the general \"shape\" of the\n-// signature and have a separate test file for each bin.\n-//\n-// PS: You may be wondering why we don't just compare the return types and argument types for\n-// equality with FileCheck regex captures. Well, rustc doesn't perform newtype unwrapping on\n-// newtypes containing aggregates. This is OK on all ABIs we support, but because LLVM has not\n-// gotten rid of pointee types yet, the IR function signature will be syntactically different (%Foo*\n-// vs %FooWrapper*).\n-\n-#[repr(C)]\n-pub struct Rgb8 { r: u8, g: u8, b: u8 }\n-\n-#[repr(transparent)]\n-pub struct Rgb8Wrap(Rgb8);\n-\n-// NB: closing parenthesis is missing because sometimes the argument has a name and sometimes not\n-// CHECK: define i32 @test_Rgb8Wrap(i32\n-#[no_mangle]\n-#[cfg(all(target_arch=\"x86_64\", target_os=\"linux\"))]\n-pub extern fn test_Rgb8Wrap(_: Rgb8Wrap) -> Rgb8Wrap { loop {} }\n-\n-#[cfg(not(all(target_arch=\"x86_64\", target_os=\"linux\")))]\n-#[no_mangle]\n-pub extern fn test_Rgb8Wrap(_: u32) -> u32 { loop {} }\n-\n-// Same as with the small struct above: ABI-dependent, we only test the interesting case\n-// (ABIs that pack the aggregate into a scalar) and stub it out on other ABIs\n-\n-#[repr(C)]\n-pub union FloatBits {\n-    float: f32,\n-    bits: u32,\n-}\n-\n-#[repr(transparent)]\n-pub struct SmallUnion(FloatBits);\n-\n-// NB: closing parenthesis is missing because sometimes the argument has a name and sometimes not\n-// CHECK: define i32 @test_SmallUnion(i32\n-#[no_mangle]\n-#[cfg(all(target_arch=\"x86_64\", target_os=\"linux\"))]\n-pub extern fn test_SmallUnion(_: SmallUnion) -> SmallUnion { loop {} }\n-\n-#[cfg(not(all(target_arch=\"x86_64\", target_os=\"linux\")))]\n-#[no_mangle]\n-pub extern fn test_SmallUnion(_: u32) -> u32 { loop {} }\n+// You may be wondering why we don't just compare the return types and argument types for equality\n+// with FileCheck regex captures. Well, rustc doesn't perform newtype unwrapping on newtypes\n+// containing aggregates. This is OK on all ABIs we support, but because LLVM has not gotten rid of\n+// pointee types yet, the IR function signature will be syntactically different (%Foo* vs\n+// %FooWrapper*)."}]}