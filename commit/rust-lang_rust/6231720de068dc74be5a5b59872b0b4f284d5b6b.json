{"sha": "6231720de068dc74be5a5b59872b0b4f284d5b6b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYyMzE3MjBkZTA2OGRjNzRiZTVhNWI1OTg3MmIwYjRmMjg0ZDViNmI=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-11-06T07:21:11Z"}, "committer": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-11-06T09:08:31Z"}, "message": "Rollup merge of #55700 - pnkfelix:issue-55533-update-ui-tests-wrt-nll, r=davidtwco\n\nUpdate ui tests with respect to NLL\n\nFix #55533", "tree": {"sha": "b9ea529caa26bf43f5bb0781347f3725e1e59819", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b9ea529caa26bf43f5bb0781347f3725e1e59819"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6231720de068dc74be5a5b59872b0b4f284d5b6b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEZ1R8CLMp8f2GxWoQ/vbIBR0OATwFAlvhWhAACgkQ/vbIBR0O\nATxr1BAAv06ICe7RLPrr1bWarHuv/oC9V0ZGNtuNTjS3TTN1uX8/FIGdJs15Wpnw\n90VFA2k4qDGkEZuKOi/CYx1W8dVOLRQpQyDF+2xRKUWHQSK+qJB/G9OqyS7kOn6I\nod5cVCDtR+dMcjbCFthqfI6Oi9/0Bxc95VHcTSe6oxvAcCvGlYwENtX/4a+WxENS\nub2pgRHHjFUCFGQ+udwo1J3JJpnxJxlEyAgKXfGNzcBDwQwgYQjcf2W+Uj5D6yOs\nhVzG57Bc8cFsoesIhgl9HEGQHrGGqVbSn+PYdTd+8LvlZEyjrFqfxWjOW+G4oFIm\nPLkShRxR1nuQoVFXXZQbL1sEA2Fpy94g9Ac9sRq4FHStxSOqh7i/BRBFtQdpbOuF\nNI0+W4/nHBuWmmqssiFcv+oH7ZkOijznotIT4R4A5hAknt4zHbbVZ6OrpUI1yt3R\nyyHEwUYrDfsOGcVht/bH7v6t7CBHtne4kfrIkR4yHqWyj3xBsiXiMmbJ0GmYDoRm\ncP+C+/DCJ3J2sboWX56/oidsGAc9PtmtUWMU+TFIi0/TVqjYIBpJPzprffkJ3qDy\n/oozFNWUjj/bJIt3qe9gj9/TMfSN9aqN+NRQf4VQ5MsEOx/7+ieWeaFaJBFLRnMd\nZ9I7aBPJOsPyFFnrYCIOl8fxuQpO9JItftnRAsy0uf9bQCv/uWM=\n=Cb9r\n-----END PGP SIGNATURE-----", "payload": "tree b9ea529caa26bf43f5bb0781347f3725e1e59819\nparent 1ea1a4277e8267966e0683a32298069de3d037f2\nparent fff9ddedcef8a869a4665414bf4f5a122eeab823\nauthor kennytm <kennytm@gmail.com> 1541488871 +0800\ncommitter kennytm <kennytm@gmail.com> 1541495311 +0800\n\nRollup merge of #55700 - pnkfelix:issue-55533-update-ui-tests-wrt-nll, r=davidtwco\n\nUpdate ui tests with respect to NLL\n\nFix #55533\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6231720de068dc74be5a5b59872b0b4f284d5b6b", "html_url": "https://github.com/rust-lang/rust/commit/6231720de068dc74be5a5b59872b0b4f284d5b6b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6231720de068dc74be5a5b59872b0b4f284d5b6b/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1ea1a4277e8267966e0683a32298069de3d037f2", "url": "https://api.github.com/repos/rust-lang/rust/commits/1ea1a4277e8267966e0683a32298069de3d037f2", "html_url": "https://github.com/rust-lang/rust/commit/1ea1a4277e8267966e0683a32298069de3d037f2"}, {"sha": "fff9ddedcef8a869a4665414bf4f5a122eeab823", "url": "https://api.github.com/repos/rust-lang/rust/commits/fff9ddedcef8a869a4665414bf4f5a122eeab823", "html_url": "https://github.com/rust-lang/rust/commit/fff9ddedcef8a869a4665414bf4f5a122eeab823"}], "stats": {"total": 786, "additions": 532, "deletions": 254}, "files": [{"sha": "612375f904783995bc27aec4d96f1e1466402055", "filename": "src/test/ui/binop/binop-move-semantics.nll.stderr", "status": "modified", "additions": 25, "deletions": 2, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/6231720de068dc74be5a5b59872b0b4f284d5b6b/src%2Ftest%2Fui%2Fbinop%2Fbinop-move-semantics.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6231720de068dc74be5a5b59872b0b4f284d5b6b/src%2Ftest%2Fui%2Fbinop%2Fbinop-move-semantics.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbinop%2Fbinop-move-semantics.nll.stderr?ref=6231720de068dc74be5a5b59872b0b4f284d5b6b", "patch": "@@ -20,6 +20,29 @@ LL |     x.clone();  //~ ERROR: use of moved value\n    |\n    = note: move occurs because `x` has type `T`, which does not implement the `Copy` trait\n \n+error[E0505]: cannot move out of `x` because it is borrowed\n+  --> $DIR/binop-move-semantics.rs:31:5\n+   |\n+LL |     let m = &x;\n+   |             -- borrow of `x` occurs here\n+...\n+LL |     x  //~ ERROR: cannot move out of `x` because it is borrowed\n+   |     ^ move out of `x` occurs here\n+...\n+LL |     use_mut(n); use_imm(m);\n+   |                         - borrow later used here\n+\n+error[E0505]: cannot move out of `y` because it is borrowed\n+  --> $DIR/binop-move-semantics.rs:33:5\n+   |\n+LL |     let n = &mut y;\n+   |             ------ borrow of `y` occurs here\n+...\n+LL |     y;  //~ ERROR: cannot move out of `y` because it is borrowed\n+   |     ^ move out of `y` occurs here\n+LL |     use_mut(n); use_imm(m);\n+   |             - borrow later used here\n+\n error[E0507]: cannot move out of borrowed content\n   --> $DIR/binop-move-semantics.rs:40:5\n    |\n@@ -62,7 +85,7 @@ LL | |     &mut f;  //~ ERROR: cannot borrow `f` as mutable because it is also b\n    |       |    immutable borrow later used here\n    |       mutable borrow occurs here\n \n-error: aborting due to 6 previous errors\n+error: aborting due to 8 previous errors\n \n-Some errors occurred: E0382, E0502, E0507.\n+Some errors occurred: E0382, E0502, E0505, E0507.\n For more information about an error, try `rustc --explain E0382`."}, {"sha": "f6fad8b46dd9d4f68ff983ca8959f45924652404", "filename": "src/test/ui/binop/binop-move-semantics.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/6231720de068dc74be5a5b59872b0b4f284d5b6b/src%2Ftest%2Fui%2Fbinop%2Fbinop-move-semantics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6231720de068dc74be5a5b59872b0b4f284d5b6b/src%2Ftest%2Fui%2Fbinop%2Fbinop-move-semantics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbinop%2Fbinop-move-semantics.rs?ref=6231720de068dc74be5a5b59872b0b4f284d5b6b", "patch": "@@ -31,17 +31,17 @@ fn move_borrowed<T: Add<Output=()>>(x: T, mut y: T) {\n     x  //~ ERROR: cannot move out of `x` because it is borrowed\n     +\n     y;  //~ ERROR: cannot move out of `y` because it is borrowed\n+    use_mut(n); use_imm(m);\n }\n-\n fn illegal_dereference<T: Add<Output=()>>(mut x: T, y: T) {\n     let m = &mut x;\n     let n = &y;\n \n     *m  //~ ERROR: cannot move out of borrowed content\n     +\n     *n;  //~ ERROR: cannot move out of borrowed content\n+    use_imm(n); use_mut(m);\n }\n-\n struct Foo;\n \n impl<'a, 'b> Add<&'b Foo> for &'a mut Foo {\n@@ -73,3 +73,6 @@ fn immut_plus_mut() {\n }\n \n fn main() {}\n+\n+fn use_mut<T>(_: &mut T) { }\n+fn use_imm<T>(_: &T) { }"}, {"sha": "160a84c480cd31a6f930ed18b7a6bac3a9c52c1b", "filename": "src/test/ui/borrowck/borrowck-closures-mut-of-imm.nll.stderr", "status": "modified", "additions": 25, "deletions": 8, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/6231720de068dc74be5a5b59872b0b4f284d5b6b/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-mut-of-imm.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6231720de068dc74be5a5b59872b0b4f284d5b6b/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-mut-of-imm.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-mut-of-imm.nll.stderr?ref=6231720de068dc74be5a5b59872b0b4f284d5b6b", "patch": "@@ -1,15 +1,32 @@\n error[E0596]: cannot borrow `*x` as mutable, as it is behind a `&` reference\n-  --> $DIR/borrowck-closures-mut-of-imm.rs:23:21\n+  --> $DIR/borrowck-closures-mut-of-imm.rs:23:25\n    |\n-LL |     let c1 = || set(&mut *x);\n-   |                     ^^^^^^^ cannot borrow as mutable\n+LL |     let mut c1 = || set(&mut *x);\n+   |                         ^^^^^^^ cannot borrow as mutable\n \n error[E0596]: cannot borrow `*x` as mutable, as it is behind a `&` reference\n-  --> $DIR/borrowck-closures-mut-of-imm.rs:25:21\n+  --> $DIR/borrowck-closures-mut-of-imm.rs:25:25\n    |\n-LL |     let c2 = || set(&mut *x);\n-   |                     ^^^^^^^ cannot borrow as mutable\n+LL |     let mut c2 = || set(&mut *x);\n+   |                         ^^^^^^^ cannot borrow as mutable\n \n-error: aborting due to 2 previous errors\n+error[E0524]: two closures require unique access to `x` at the same time\n+  --> $DIR/borrowck-closures-mut-of-imm.rs:25:18\n+   |\n+LL |     let mut c1 = || set(&mut *x);\n+   |                  --           - first borrow occurs due to use of `x` in closure\n+   |                  |\n+   |                  first closure is constructed here\n+LL |     //~^ ERROR cannot borrow\n+LL |     let mut c2 = || set(&mut *x);\n+   |                  ^^           - second borrow occurs due to use of `x` in closure\n+   |                  |\n+   |                  second closure is constructed here\n+...\n+LL |     c2(); c1();\n+   |           -- first borrow later used here\n+\n+error: aborting due to 3 previous errors\n \n-For more information about this error, try `rustc --explain E0596`.\n+Some errors occurred: E0524, E0596.\n+For more information about an error, try `rustc --explain E0524`."}, {"sha": "3bf4f17fde1a808a997df2ab9575d0d9822ecc7d", "filename": "src/test/ui/borrowck/borrowck-closures-mut-of-imm.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6231720de068dc74be5a5b59872b0b4f284d5b6b/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-mut-of-imm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6231720de068dc74be5a5b59872b0b4f284d5b6b/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-mut-of-imm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-mut-of-imm.rs?ref=6231720de068dc74be5a5b59872b0b4f284d5b6b", "patch": "@@ -20,11 +20,12 @@ fn set(x: &mut isize) {\n }\n \n fn a(x: &isize) {\n-    let c1 = || set(&mut *x);\n+    let mut c1 = || set(&mut *x);\n     //~^ ERROR cannot borrow\n-    let c2 = || set(&mut *x);\n+    let mut c2 = || set(&mut *x);\n     //~^ ERROR cannot borrow\n     //~| ERROR two closures require unique access to `x` at the same time\n+    c2(); c1();\n }\n \n fn main() {"}, {"sha": "c248595d57119c1929283086d1e52ea3c5cbb451", "filename": "src/test/ui/borrowck/borrowck-closures-mut-of-imm.stderr", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/6231720de068dc74be5a5b59872b0b4f284d5b6b/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-mut-of-imm.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6231720de068dc74be5a5b59872b0b4f284d5b6b/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-mut-of-imm.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-mut-of-imm.stderr?ref=6231720de068dc74be5a5b59872b0b4f284d5b6b", "patch": "@@ -1,30 +1,30 @@\n error[E0524]: two closures require unique access to `x` at the same time\n-  --> $DIR/borrowck-closures-mut-of-imm.rs:25:14\n+  --> $DIR/borrowck-closures-mut-of-imm.rs:25:18\n    |\n-LL |     let c1 = || set(&mut *x);\n-   |              --           - previous borrow occurs due to use of `x` in closure\n-   |              |\n-   |              first closure is constructed here\n+LL |     let mut c1 = || set(&mut *x);\n+   |                  --           - previous borrow occurs due to use of `x` in closure\n+   |                  |\n+   |                  first closure is constructed here\n LL |     //~^ ERROR cannot borrow\n-LL |     let c2 = || set(&mut *x);\n-   |              ^^           - borrow occurs due to use of `x` in closure\n-   |              |\n-   |              second closure is constructed here\n+LL |     let mut c2 = || set(&mut *x);\n+   |                  ^^           - borrow occurs due to use of `x` in closure\n+   |                  |\n+   |                  second closure is constructed here\n ...\n LL | }\n    | - borrow from first closure ends here\n \n error[E0596]: cannot borrow immutable borrowed content `***x` as mutable\n-  --> $DIR/borrowck-closures-mut-of-imm.rs:23:26\n+  --> $DIR/borrowck-closures-mut-of-imm.rs:23:30\n    |\n-LL |     let c1 = || set(&mut *x);\n-   |                          ^^ cannot borrow as mutable\n+LL |     let mut c1 = || set(&mut *x);\n+   |                              ^^ cannot borrow as mutable\n \n error[E0596]: cannot borrow immutable borrowed content `***x` as mutable\n-  --> $DIR/borrowck-closures-mut-of-imm.rs:25:26\n+  --> $DIR/borrowck-closures-mut-of-imm.rs:25:30\n    |\n-LL |     let c2 = || set(&mut *x);\n-   |                          ^^ cannot borrow as mutable\n+LL |     let mut c2 = || set(&mut *x);\n+   |                              ^^ cannot borrow as mutable\n \n error: aborting due to 3 previous errors\n "}, {"sha": "18f95f232cdd34ba5b239326014b015dc408f8eb", "filename": "src/test/ui/borrowck/borrowck-closures-mut-of-mut.nll.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/6231720de068dc74be5a5b59872b0b4f284d5b6b/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-mut-of-mut.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6231720de068dc74be5a5b59872b0b4f284d5b6b/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-mut-of-mut.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-mut-of-mut.nll.stderr?ref=6231720de068dc74be5a5b59872b0b4f284d5b6b", "patch": "@@ -0,0 +1,18 @@\n+error[E0524]: two closures require unique access to `x` at the same time\n+  --> $DIR/borrowck-closures-mut-of-mut.rs:14:18\n+   |\n+LL |     let mut c1 = || set(&mut *x);\n+   |                  --           - first borrow occurs due to use of `x` in closure\n+   |                  |\n+   |                  first closure is constructed here\n+LL |     let mut c2 = || set(&mut *x);\n+   |                  ^^           - second borrow occurs due to use of `x` in closure\n+   |                  |\n+   |                  second closure is constructed here\n+LL |     //~^ ERROR two closures require unique access to `x` at the same time\n+LL |     c2(); c1();\n+   |           -- first borrow later used here\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0524`."}, {"sha": "50c6f2c585ed9d83e016cd5b6eeafe9b81632a18", "filename": "src/test/ui/borrowck/borrowck-closures-mut-of-mut.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/6231720de068dc74be5a5b59872b0b4f284d5b6b/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-mut-of-mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6231720de068dc74be5a5b59872b0b4f284d5b6b/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-mut-of-mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-mut-of-mut.rs?ref=6231720de068dc74be5a5b59872b0b4f284d5b6b", "patch": "@@ -0,0 +1,20 @@\n+// Tests that two closures cannot simultaneously both have mutable\n+// access to the variable. Related to issue #6801.\n+\n+fn get(x: &isize) -> isize {\n+    *x\n+}\n+\n+fn set(x: &mut isize) {\n+    *x = 4;\n+}\n+\n+fn a(x: &mut isize) {\n+    let mut c1 = || set(&mut *x);\n+    let mut c2 = || set(&mut *x);\n+    //~^ ERROR two closures require unique access to `x` at the same time\n+    c2(); c1();\n+}\n+\n+fn main() {\n+}"}, {"sha": "2c5587710a1542fbd17bee0838e077b8d4458780", "filename": "src/test/ui/borrowck/borrowck-closures-mut-of-mut.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/6231720de068dc74be5a5b59872b0b4f284d5b6b/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-mut-of-mut.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6231720de068dc74be5a5b59872b0b4f284d5b6b/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-mut-of-mut.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-mut-of-mut.stderr?ref=6231720de068dc74be5a5b59872b0b4f284d5b6b", "patch": "@@ -0,0 +1,18 @@\n+error[E0524]: two closures require unique access to `x` at the same time\n+  --> $DIR/borrowck-closures-mut-of-mut.rs:14:18\n+   |\n+LL |     let mut c1 = || set(&mut *x);\n+   |                  --           - previous borrow occurs due to use of `x` in closure\n+   |                  |\n+   |                  first closure is constructed here\n+LL |     let mut c2 = || set(&mut *x);\n+   |                  ^^           - borrow occurs due to use of `x` in closure\n+   |                  |\n+   |                  second closure is constructed here\n+...\n+LL | }\n+   | - borrow from first closure ends here\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0524`."}, {"sha": "1844d8275999d0f0e62bf20b8a288dea8e88bba4", "filename": "src/test/ui/borrowck/borrowck-lend-flow-loop.ast.stderr", "status": "renamed", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/6231720de068dc74be5a5b59872b0b4f284d5b6b/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-lend-flow-loop.ast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6231720de068dc74be5a5b59872b0b4f284d5b6b/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-lend-flow-loop.ast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-lend-flow-loop.ast.stderr?ref=6231720de068dc74be5a5b59872b0b4f284d5b6b", "patch": "@@ -4,7 +4,7 @@ error[E0502]: cannot borrow `*v` as immutable because `v` is also borrowed as mu\n LL |     let mut x = &mut v;\n    |                      - mutable borrow occurs here\n ...\n-LL |         borrow(&*v); //~ ERROR cannot borrow\n+LL |         borrow(&*v); //[ast]~ ERROR cannot borrow\n    |                 ^^ immutable borrow occurs here\n LL |     }\n LL | }\n@@ -16,7 +16,7 @@ error[E0502]: cannot borrow `*v` as immutable because `v` is also borrowed as mu\n LL |     let mut x = &mut v;\n    |                      - mutable borrow occurs here\n LL |     for _ in 0..3 {\n-LL |         borrow(&*v); //~ ERROR cannot borrow\n+LL |         borrow(&*v); //[ast]~ ERROR cannot borrow\n    |                 ^^ immutable borrow occurs here\n ...\n LL | }\n@@ -25,7 +25,7 @@ LL | }\n error[E0502]: cannot borrow `*v` as mutable because `v` is also borrowed as immutable\n   --> $DIR/borrowck-lend-flow-loop.rs:57:25\n    |\n-LL |         borrow_mut(&mut *v); //~ ERROR cannot borrow\n+LL |         borrow_mut(&mut *v); //[ast]~ ERROR cannot borrow\n    |                         ^^ mutable borrow occurs here\n LL |         _x = &v;\n    |               - immutable borrow occurs here\n@@ -36,7 +36,7 @@ LL | }\n error[E0502]: cannot borrow `*v` as mutable because `v` is also borrowed as immutable\n   --> $DIR/borrowck-lend-flow-loop.rs:69:25\n    |\n-LL |         borrow_mut(&mut *v); //~ ERROR cannot borrow\n+LL |         borrow_mut(&mut *v); //[ast]~ ERROR cannot borrow\n    |                         ^^ mutable borrow occurs here\n LL |         _x = &v;\n    |               - immutable borrow occurs here\n@@ -50,7 +50,7 @@ error[E0502]: cannot borrow `*v` as mutable because `v` is also borrowed as immu\n LL |         _x = &v;\n    |               - immutable borrow occurs here\n ...\n-LL |     borrow_mut(&mut *v); //~ ERROR cannot borrow\n+LL |     borrow_mut(&mut *v); //[ast]~ ERROR cannot borrow\n    |                     ^^ mutable borrow occurs here\n LL | }\n    | - immutable borrow ends here\n@@ -61,27 +61,27 @@ error[E0502]: cannot borrow `*v` as mutable because `v` is also borrowed as immu\n LL |         _x = &v;\n    |               - immutable borrow occurs here\n ...\n-LL |     borrow_mut(&mut *v); //~ ERROR cannot borrow\n+LL |     borrow_mut(&mut *v); //[ast]~ ERROR cannot borrow\n    |                     ^^ mutable borrow occurs here\n LL | }\n    | - immutable borrow ends here\n \n error[E0502]: cannot borrow `*v` as immutable because `v` is also borrowed as mutable\n   --> $DIR/borrowck-lend-flow-loop.rs:109:17\n    |\n-LL |         borrow(&*v); //~ ERROR cannot borrow\n+LL |         borrow(&*v); //[ast]~ ERROR cannot borrow\n    |                 ^^ immutable borrow occurs here\n-LL |         if cond2 {\n-LL |             x = &mut v; //~ ERROR cannot borrow\n+...\n+LL |             x = &mut v; //[ast]~ ERROR cannot borrow\n    |                      - mutable borrow occurs here\n ...\n LL | }\n    | - mutable borrow ends here\n \n error[E0499]: cannot borrow `v` as mutable more than once at a time\n-  --> $DIR/borrowck-lend-flow-loop.rs:111:22\n+  --> $DIR/borrowck-lend-flow-loop.rs:112:22\n    |\n-LL |             x = &mut v; //~ ERROR cannot borrow\n+LL |             x = &mut v; //[ast]~ ERROR cannot borrow\n    |                      ^ mutable borrow starts here in previous iteration of loop\n ...\n LL | }", "previous_filename": "src/test/ui/borrowck/borrowck-lend-flow-loop.stderr"}, {"sha": "19de3582c881964372e0b23851fca87a1bd352c0", "filename": "src/test/ui/borrowck/borrowck-lend-flow-loop.nll.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6231720de068dc74be5a5b59872b0b4f284d5b6b/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-lend-flow-loop.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6231720de068dc74be5a5b59872b0b4f284d5b6b/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-lend-flow-loop.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-lend-flow-loop.nll.stderr?ref=6231720de068dc74be5a5b59872b0b4f284d5b6b", "patch": "@@ -4,9 +4,9 @@ error[E0502]: cannot borrow `*v` as immutable because it is also borrowed as mut\n LL |     let mut x = &mut v;\n    |                 ------ mutable borrow occurs here\n LL |     for _ in 0..3 {\n-LL |         borrow(&*v); //~ ERROR cannot borrow\n+LL |         borrow(&*v); //[ast]~ ERROR cannot borrow\n    |                ^^^ immutable borrow occurs here\n-LL |     }\n+...\n LL |     *x = box 5;\n    |     -- mutable borrow used here, in later iteration of loop\n \n@@ -15,10 +15,10 @@ error[E0502]: cannot borrow `*v` as immutable because it is also borrowed as mut\n    |\n LL |         **x += 1;\n    |         -------- mutable borrow used here, in later iteration of loop\n-LL |         borrow(&*v); //~ ERROR cannot borrow\n+LL |         borrow(&*v); //[ast]~ ERROR cannot borrow\n    |                ^^^ immutable borrow occurs here\n-LL |         if cond2 {\n-LL |             x = &mut v; //~ ERROR cannot borrow\n+...\n+LL |             x = &mut v; //[ast]~ ERROR cannot borrow\n    |                 ------ mutable borrow occurs here\n \n error: aborting due to 2 previous errors"}, {"sha": "7008e5cef4b7587380ebd06ca5caf538beab8df6", "filename": "src/test/ui/borrowck/borrowck-lend-flow-loop.rs", "status": "modified", "additions": 25, "deletions": 25, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/6231720de068dc74be5a5b59872b0b4f284d5b6b/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-lend-flow-loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6231720de068dc74be5a5b59872b0b4f284d5b6b/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-lend-flow-loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-lend-flow-loop.rs?ref=6231720de068dc74be5a5b59872b0b4f284d5b6b", "patch": "@@ -1,18 +1,18 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// Note: the borrowck analysis is currently flow-insensitive.\n-// Therefore, some of these errors are marked as spurious and could be\n-// corrected by a simple change to the analysis.  The others are\n-// either genuine or would require more advanced changes.  The latter\n-// cases are noted.\n+// revisions: ast nll\n+\n+// Since we are testing nll migration explicitly as a separate\n+// revision, don't worry about the --compare-mode=nll on this test.\n+\n+// ignore-compare-mode-nll\n+\n+//[ast]compile-flags: -Z borrowck=ast\n+//[nll]compile-flags: -Z borrowck=migrate -Z two-phase-borrows\n+\n+// Note: the borrowck analysis was originally a flow-insensitive pass\n+// over the AST. Therefore, some of these (AST) errors are marked as\n+// spurious and are corrected by the flow-sensitive (NLL) analysis.\n+// The others are either genuine or would require more advanced\n+// changes. The latter cases are noted.\n \n #![feature(box_syntax)]\n \n@@ -32,7 +32,7 @@ fn loop_overarching_alias_mut() {\n     let mut x = &mut v;\n     **x += 1;\n     loop {\n-        borrow(&*v); //~ ERROR cannot borrow\n+        borrow(&*v); //[ast]~ ERROR cannot borrow\n     }\n }\n \n@@ -42,19 +42,19 @@ fn block_overarching_alias_mut() {\n     let mut v: Box<_> = box 3;\n     let mut x = &mut v;\n     for _ in 0..3 {\n-        borrow(&*v); //~ ERROR cannot borrow\n+        borrow(&*v); //[ast]~ ERROR cannot borrow\n+        //[nll]~^ ERROR cannot borrow\n     }\n     *x = box 5;\n }\n-\n fn loop_aliased_mut() {\n     // In this instance, the borrow is carried through the loop.\n \n     let mut v: Box<_> = box 3;\n     let mut w: Box<_> = box 4;\n     let mut _x = &w;\n     loop {\n-        borrow_mut(&mut *v); //~ ERROR cannot borrow\n+        borrow_mut(&mut *v); //[ast]~ ERROR cannot borrow\n         _x = &v;\n     }\n }\n@@ -66,7 +66,7 @@ fn while_aliased_mut() {\n     let mut w: Box<_> = box 4;\n     let mut _x = &w;\n     while cond() {\n-        borrow_mut(&mut *v); //~ ERROR cannot borrow\n+        borrow_mut(&mut *v); //[ast]~ ERROR cannot borrow\n         _x = &v;\n     }\n }\n@@ -83,7 +83,7 @@ fn loop_aliased_mut_break() {\n         _x = &v;\n         break;\n     }\n-    borrow_mut(&mut *v); //~ ERROR cannot borrow\n+    borrow_mut(&mut *v); //[ast]~ ERROR cannot borrow\n }\n \n fn while_aliased_mut_break() {\n@@ -97,7 +97,7 @@ fn while_aliased_mut_break() {\n         _x = &v;\n         break;\n     }\n-    borrow_mut(&mut *v); //~ ERROR cannot borrow\n+    borrow_mut(&mut *v); //[ast]~ ERROR cannot borrow\n }\n \n fn while_aliased_mut_cond(cond: bool, cond2: bool) {\n@@ -106,13 +106,13 @@ fn while_aliased_mut_cond(cond: bool, cond2: bool) {\n     let mut x = &mut w;\n     while cond {\n         **x += 1;\n-        borrow(&*v); //~ ERROR cannot borrow\n+        borrow(&*v); //[ast]~ ERROR cannot borrow\n+        //[nll]~^ ERROR cannot borrow\n         if cond2 {\n-            x = &mut v; //~ ERROR cannot borrow\n+            x = &mut v; //[ast]~ ERROR cannot borrow\n         }\n     }\n }\n-\n fn loop_break_pops_scopes<'r, F>(_v: &'r mut [usize], mut f: F) where\n     F: FnMut(&'r mut usize) -> bool,\n {"}, {"sha": "0c4f2fa9d718bbca248899b6aada15b77244cf82", "filename": "src/test/ui/borrowck/borrowck-overloaded-call.nll.stderr", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/6231720de068dc74be5a5b59872b0b4f284d5b6b/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-overloaded-call.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6231720de068dc74be5a5b59872b0b4f284d5b6b/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-overloaded-call.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-overloaded-call.nll.stderr?ref=6231720de068dc74be5a5b59872b0b4f284d5b6b", "patch": "@@ -1,3 +1,13 @@\n+error[E0502]: cannot borrow `s` as immutable because it is also borrowed as mutable\n+  --> $DIR/borrowck-overloaded-call.rs:69:5\n+   |\n+LL |     let sp = &mut s;\n+   |              ------ mutable borrow occurs here\n+LL |     s(3);   //~ ERROR cannot borrow `s` as immutable because it is also borrowed as mutable\n+   |     ^ immutable borrow occurs here\n+LL |     use_mut(sp);\n+   |             -- mutable borrow later used here\n+\n error[E0596]: cannot borrow `s` as mutable, as it is not declared as mutable\n   --> $DIR/borrowck-overloaded-call.rs:77:5\n    |\n@@ -17,7 +27,7 @@ LL |     s(\" world\".to_string());    //~ ERROR use of moved value: `s`\n    |\n    = note: move occurs because `s` has type `SFnOnce`, which does not implement the `Copy` trait\n \n-error: aborting due to 2 previous errors\n+error: aborting due to 3 previous errors\n \n-Some errors occurred: E0382, E0596.\n+Some errors occurred: E0382, E0502, E0596.\n For more information about an error, try `rustc --explain E0382`."}, {"sha": "b2401fbbc042c559739427564959380a316df284", "filename": "src/test/ui/borrowck/borrowck-overloaded-call.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6231720de068dc74be5a5b59872b0b4f284d5b6b/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-overloaded-call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6231720de068dc74be5a5b59872b0b4f284d5b6b/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-overloaded-call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-overloaded-call.rs?ref=6231720de068dc74be5a5b59872b0b4f284d5b6b", "patch": "@@ -67,8 +67,8 @@ fn f() {\n     };\n     let sp = &mut s;\n     s(3);   //~ ERROR cannot borrow `s` as immutable because it is also borrowed as mutable\n+    use_mut(sp);\n }\n-\n fn g() {\n     let s = SFnMut {\n         x: 1,\n@@ -86,3 +86,5 @@ fn h() {\n }\n \n fn main() {}\n+\n+fn use_mut<T>(_: &mut T) { }"}, {"sha": "bb5bafbbc7b85a0dbb314d7e0868831829e4a5e7", "filename": "src/test/ui/borrowck/borrowck-overloaded-call.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6231720de068dc74be5a5b59872b0b4f284d5b6b/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-overloaded-call.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6231720de068dc74be5a5b59872b0b4f284d5b6b/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-overloaded-call.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-overloaded-call.stderr?ref=6231720de068dc74be5a5b59872b0b4f284d5b6b", "patch": "@@ -5,6 +5,7 @@ LL |     let sp = &mut s;\n    |                   - mutable borrow occurs here\n LL |     s(3);   //~ ERROR cannot borrow `s` as immutable because it is also borrowed as mutable\n    |     ^ immutable borrow occurs here\n+LL |     use_mut(sp);\n LL | }\n    | - mutable borrow ends here\n "}, {"sha": "198d086aa3be6d9926fef9eab1fa8d8087f3d4a4", "filename": "src/test/ui/borrowck/borrowck-overloaded-index-move-index.nll.stderr", "status": "modified", "additions": 27, "deletions": 2, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/6231720de068dc74be5a5b59872b0b4f284d5b6b/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-overloaded-index-move-index.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6231720de068dc74be5a5b59872b0b4f284d5b6b/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-overloaded-index-move-index.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-overloaded-index-move-index.nll.stderr?ref=6231720de068dc74be5a5b59872b0b4f284d5b6b", "patch": "@@ -1,3 +1,27 @@\n+error[E0505]: cannot move out of `s` because it is borrowed\n+  --> $DIR/borrowck-overloaded-index-move-index.rs:60:22\n+   |\n+LL |     let rs = &mut s;\n+   |              ------ borrow of `s` occurs here\n+LL | \n+LL |     println!(\"{}\", f[s]);\n+   |                      ^ move out of `s` occurs here\n+...\n+LL |     use_mut(rs);\n+   |             -- borrow later used here\n+\n+error[E0505]: cannot move out of `s` because it is borrowed\n+  --> $DIR/borrowck-overloaded-index-move-index.rs:63:7\n+   |\n+LL |     let rs = &mut s;\n+   |              ------ borrow of `s` occurs here\n+...\n+LL |     f[s] = 10;\n+   |       ^ move out of `s` occurs here\n+...\n+LL |     use_mut(rs);\n+   |             -- borrow later used here\n+\n error[E0382]: use of moved value: `s`\n   --> $DIR/borrowck-overloaded-index-move-index.rs:63:7\n    |\n@@ -9,6 +33,7 @@ LL |     f[s] = 10;\n    |\n    = note: move occurs because `s` has type `std::string::String`, which does not implement the `Copy` trait\n \n-error: aborting due to previous error\n+error: aborting due to 3 previous errors\n \n-For more information about this error, try `rustc --explain E0382`.\n+Some errors occurred: E0382, E0505.\n+For more information about an error, try `rustc --explain E0382`."}, {"sha": "e95423a8e834d78e224b0c0568c95a2805900f01", "filename": "src/test/ui/borrowck/borrowck-overloaded-index-move-index.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6231720de068dc74be5a5b59872b0b4f284d5b6b/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-overloaded-index-move-index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6231720de068dc74be5a5b59872b0b4f284d5b6b/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-overloaded-index-move-index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-overloaded-index-move-index.rs?ref=6231720de068dc74be5a5b59872b0b4f284d5b6b", "patch": "@@ -71,4 +71,8 @@ fn main() {\n     let _j = &i;\n     println!(\"{}\", s[i]); // no error, i is copy\n     println!(\"{}\", s[i]);\n+\n+    use_mut(rs);\n }\n+\n+fn use_mut<T>(_: &mut T) { }"}, {"sha": "1b4f9e77da80b77d17041e91862687bb23b3d34a", "filename": "src/test/ui/borrowck/borrowck-reborrow-from-mut.nll.stderr", "status": "modified", "additions": 107, "deletions": 2, "changes": 109, "blob_url": "https://github.com/rust-lang/rust/blob/6231720de068dc74be5a5b59872b0b4f284d5b6b/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-reborrow-from-mut.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6231720de068dc74be5a5b59872b0b4f284d5b6b/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-reborrow-from-mut.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-reborrow-from-mut.nll.stderr?ref=6231720de068dc74be5a5b59872b0b4f284d5b6b", "patch": "@@ -1,3 +1,107 @@\n+error[E0499]: cannot borrow `foo.bar1` as mutable more than once at a time\n+  --> $DIR/borrowck-reborrow-from-mut.rs:23:17\n+   |\n+LL |     let _bar1 = &mut foo.bar1;\n+   |                 ------------- first mutable borrow occurs here\n+LL |     let _bar2 = &mut foo.bar1;  //~ ERROR cannot borrow\n+   |                 ^^^^^^^^^^^^^ second mutable borrow occurs here\n+LL |     use_mut(_bar1);\n+   |             ----- first borrow later used here\n+\n+error[E0502]: cannot borrow `foo.bar1` as immutable because it is also borrowed as mutable\n+  --> $DIR/borrowck-reborrow-from-mut.rs:28:17\n+   |\n+LL |     let _bar1 = &mut foo.bar1;\n+   |                 ------------- mutable borrow occurs here\n+LL |     let _bar2 = &foo.bar1;  //~ ERROR cannot borrow\n+   |                 ^^^^^^^^^ immutable borrow occurs here\n+LL |     use_mut(_bar1);\n+   |             ----- mutable borrow later used here\n+\n+error[E0502]: cannot borrow `foo.bar1` as mutable because it is also borrowed as immutable\n+  --> $DIR/borrowck-reborrow-from-mut.rs:33:17\n+   |\n+LL |     let _bar1 = &foo.bar1;\n+   |                 --------- immutable borrow occurs here\n+LL |     let _bar2 = &mut foo.bar1;  //~ ERROR cannot borrow\n+   |                 ^^^^^^^^^^^^^ mutable borrow occurs here\n+LL |     use_imm(_bar1);\n+   |             ----- immutable borrow later used here\n+\n+error[E0499]: cannot borrow `foo.bar1` as mutable more than once at a time\n+  --> $DIR/borrowck-reborrow-from-mut.rs:55:21\n+   |\n+LL |     let _bar1 = &mut foo.bar1;\n+   |                 ------------- first mutable borrow occurs here\n+LL |     match *foo {\n+LL |         Foo { bar1: ref mut _bar1, bar2: _ } => {}\n+   |                     ^^^^^^^^^^^^^ second mutable borrow occurs here\n+...\n+LL |     use_mut(_bar1);\n+   |             ----- first borrow later used here\n+\n+error[E0502]: cannot borrow `foo.bar1` as immutable because it is also borrowed as mutable\n+  --> $DIR/borrowck-reborrow-from-mut.rs:62:17\n+   |\n+LL |     let _bar1 = &mut foo.bar1.int1;\n+   |                 ------------------ mutable borrow occurs here\n+LL |     let _foo1 = &foo.bar1; //~ ERROR cannot borrow\n+   |                 ^^^^^^^^^ immutable borrow occurs here\n+LL |     let _foo2 = &*foo; //~ ERROR cannot borrow\n+LL |     use_mut(_bar1);\n+   |             ----- mutable borrow later used here\n+\n+error[E0502]: cannot borrow `*foo` as immutable because it is also borrowed as mutable\n+  --> $DIR/borrowck-reborrow-from-mut.rs:63:17\n+   |\n+LL |     let _bar1 = &mut foo.bar1.int1;\n+   |                 ------------------ mutable borrow occurs here\n+LL |     let _foo1 = &foo.bar1; //~ ERROR cannot borrow\n+LL |     let _foo2 = &*foo; //~ ERROR cannot borrow\n+   |                 ^^^^^ immutable borrow occurs here\n+LL |     use_mut(_bar1);\n+   |             ----- mutable borrow later used here\n+\n+error[E0499]: cannot borrow `foo.bar1` as mutable more than once at a time\n+  --> $DIR/borrowck-reborrow-from-mut.rs:68:17\n+   |\n+LL |     let _bar1 = &mut foo.bar1.int1;\n+   |                 ------------------ first mutable borrow occurs here\n+LL |     let _foo1 = &mut foo.bar1; //~ ERROR cannot borrow\n+   |                 ^^^^^^^^^^^^^ second mutable borrow occurs here\n+LL |     use_mut(_bar1);\n+   |             ----- first borrow later used here\n+\n+error[E0499]: cannot borrow `*foo` as mutable more than once at a time\n+  --> $DIR/borrowck-reborrow-from-mut.rs:73:17\n+   |\n+LL |     let _bar1 = &mut foo.bar1.int1;\n+   |                 ------------------ first mutable borrow occurs here\n+LL |     let _foo2 = &mut *foo; //~ ERROR cannot borrow\n+   |                 ^^^^^^^^^ second mutable borrow occurs here\n+LL |     use_mut(_bar1);\n+   |             ----- first borrow later used here\n+\n+error[E0502]: cannot borrow `foo.bar1` as mutable because it is also borrowed as immutable\n+  --> $DIR/borrowck-reborrow-from-mut.rs:78:17\n+   |\n+LL |     let _bar1 = &foo.bar1.int1;\n+   |                 -------------- immutable borrow occurs here\n+LL |     let _foo1 = &mut foo.bar1; //~ ERROR cannot borrow\n+   |                 ^^^^^^^^^^^^^ mutable borrow occurs here\n+LL |     use_imm(_bar1);\n+   |             ----- immutable borrow later used here\n+\n+error[E0502]: cannot borrow `*foo` as mutable because it is also borrowed as immutable\n+  --> $DIR/borrowck-reborrow-from-mut.rs:83:17\n+   |\n+LL |     let _bar1 = &foo.bar1.int1;\n+   |                 -------------- immutable borrow occurs here\n+LL |     let _foo2 = &mut *foo; //~ ERROR cannot borrow\n+   |                 ^^^^^^^^^ mutable borrow occurs here\n+LL |     use_imm(_bar1);\n+   |             ----- immutable borrow later used here\n+\n error[E0596]: cannot borrow `foo.bar1` as mutable, as it is behind a `&` reference\n   --> $DIR/borrowck-reborrow-from-mut.rs:98:17\n    |\n@@ -6,6 +110,7 @@ LL | fn borrow_mut_from_imm(foo: &Foo) {\n LL |     let _bar1 = &mut foo.bar1; //~ ERROR cannot borrow\n    |                 ^^^^^^^^^^^^^ `foo` is a `&` reference, so the data it refers to cannot be borrowed as mutable\n \n-error: aborting due to previous error\n+error: aborting due to 11 previous errors\n \n-For more information about this error, try `rustc --explain E0596`.\n+Some errors occurred: E0499, E0502, E0596.\n+For more information about an error, try `rustc --explain E0499`."}, {"sha": "9235d900a7e792db5a978ebcc8550601269eb84e", "filename": "src/test/ui/borrowck/borrowck-reborrow-from-mut.rs", "status": "modified", "additions": 19, "deletions": 16, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/6231720de068dc74be5a5b59872b0b4f284d5b6b/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-reborrow-from-mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6231720de068dc74be5a5b59872b0b4f284d5b6b/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-reborrow-from-mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-reborrow-from-mut.rs?ref=6231720de068dc74be5a5b59872b0b4f284d5b6b", "patch": "@@ -21,86 +21,89 @@ struct Bar {\n fn borrow_same_field_twice_mut_mut(foo: &mut Foo) {\n     let _bar1 = &mut foo.bar1;\n     let _bar2 = &mut foo.bar1;  //~ ERROR cannot borrow\n+    use_mut(_bar1);\n }\n-\n fn borrow_same_field_twice_mut_imm(foo: &mut Foo) {\n     let _bar1 = &mut foo.bar1;\n     let _bar2 = &foo.bar1;  //~ ERROR cannot borrow\n+    use_mut(_bar1);\n }\n-\n fn borrow_same_field_twice_imm_mut(foo: &mut Foo) {\n     let _bar1 = &foo.bar1;\n     let _bar2 = &mut foo.bar1;  //~ ERROR cannot borrow\n+    use_imm(_bar1);\n }\n-\n fn borrow_same_field_twice_imm_imm(foo: &mut Foo) {\n     let _bar1 = &foo.bar1;\n     let _bar2 = &foo.bar1;\n+    use_imm(_bar1);\n }\n-\n fn borrow_both_mut(foo: &mut Foo) {\n     let _bar1 = &mut foo.bar1;\n     let _bar2 = &mut foo.bar2;\n+    use_mut(_bar1);\n }\n-\n fn borrow_both_mut_pattern(foo: &mut Foo) {\n     match *foo {\n-        Foo { bar1: ref mut _bar1, bar2: ref mut _bar2 } => {}\n+        Foo { bar1: ref mut _bar1, bar2: ref mut _bar2 } =>\n+        { use_mut(_bar1); use_mut(_bar2); }\n     }\n }\n-\n fn borrow_var_and_pattern(foo: &mut Foo) {\n     let _bar1 = &mut foo.bar1;\n     match *foo {\n         Foo { bar1: ref mut _bar1, bar2: _ } => {}\n         //~^ ERROR cannot borrow\n     }\n+    use_mut(_bar1);\n }\n-\n fn borrow_mut_and_base_imm(foo: &mut Foo) {\n     let _bar1 = &mut foo.bar1.int1;\n     let _foo1 = &foo.bar1; //~ ERROR cannot borrow\n     let _foo2 = &*foo; //~ ERROR cannot borrow\n+    use_mut(_bar1);\n }\n-\n fn borrow_mut_and_base_mut(foo: &mut Foo) {\n     let _bar1 = &mut foo.bar1.int1;\n     let _foo1 = &mut foo.bar1; //~ ERROR cannot borrow\n+    use_mut(_bar1);\n }\n-\n fn borrow_mut_and_base_mut2(foo: &mut Foo) {\n     let _bar1 = &mut foo.bar1.int1;\n     let _foo2 = &mut *foo; //~ ERROR cannot borrow\n+    use_mut(_bar1);\n }\n-\n fn borrow_imm_and_base_mut(foo: &mut Foo) {\n     let _bar1 = &foo.bar1.int1;\n     let _foo1 = &mut foo.bar1; //~ ERROR cannot borrow\n+    use_imm(_bar1);\n }\n-\n fn borrow_imm_and_base_mut2(foo: &mut Foo) {\n     let _bar1 = &foo.bar1.int1;\n     let _foo2 = &mut *foo; //~ ERROR cannot borrow\n+    use_imm(_bar1);\n }\n-\n fn borrow_imm_and_base_imm(foo: &mut Foo) {\n     let _bar1 = &foo.bar1.int1;\n     let _foo1 = &foo.bar1;\n     let _foo2 = &*foo;\n+    use_imm(_bar1);\n }\n-\n fn borrow_mut_and_imm(foo: &mut Foo) {\n     let _bar1 = &mut foo.bar1;\n     let _foo1 = &foo.bar2;\n+    use_mut(_bar1);\n }\n-\n fn borrow_mut_from_imm(foo: &Foo) {\n     let _bar1 = &mut foo.bar1; //~ ERROR cannot borrow\n }\n \n fn borrow_long_path_both_mut(foo: &mut Foo) {\n     let _bar1 = &mut foo.bar1.int1;\n     let _foo1 = &mut foo.bar2.int2;\n+    use_mut(_bar1);\n }\n-\n fn main() {}\n+\n+fn use_mut<T>(_: &mut T) { }\n+fn use_imm<T>(_: &T) { }"}, {"sha": "1310e38cb3ee6f7567b57d9f51b80f9889374bad", "filename": "src/test/ui/borrowck/borrowck-reborrow-from-mut.stderr", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6231720de068dc74be5a5b59872b0b4f284d5b6b/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-reborrow-from-mut.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6231720de068dc74be5a5b59872b0b4f284d5b6b/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-reborrow-from-mut.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-reborrow-from-mut.stderr?ref=6231720de068dc74be5a5b59872b0b4f284d5b6b", "patch": "@@ -5,6 +5,7 @@ LL |     let _bar1 = &mut foo.bar1;\n    |                      -------- first mutable borrow occurs here\n LL |     let _bar2 = &mut foo.bar1;  //~ ERROR cannot borrow\n    |                      ^^^^^^^^ second mutable borrow occurs here\n+LL |     use_mut(_bar1);\n LL | }\n    | - first borrow ends here\n \n@@ -15,6 +16,7 @@ LL |     let _bar1 = &mut foo.bar1;\n    |                      -------- mutable borrow occurs here\n LL |     let _bar2 = &foo.bar1;  //~ ERROR cannot borrow\n    |                  ^^^^^^^^ immutable borrow occurs here\n+LL |     use_mut(_bar1);\n LL | }\n    | - mutable borrow ends here\n \n@@ -25,6 +27,7 @@ LL |     let _bar1 = &foo.bar1;\n    |                  -------- immutable borrow occurs here\n LL |     let _bar2 = &mut foo.bar1;  //~ ERROR cannot borrow\n    |                      ^^^^^^^^ mutable borrow occurs here\n+LL |     use_imm(_bar1);\n LL | }\n    | - immutable borrow ends here\n \n@@ -47,7 +50,7 @@ LL |     let _bar1 = &mut foo.bar1.int1;\n    |                      ------------- mutable borrow occurs here\n LL |     let _foo1 = &foo.bar1; //~ ERROR cannot borrow\n    |                  ^^^^^^^^ immutable borrow occurs here\n-LL |     let _foo2 = &*foo; //~ ERROR cannot borrow\n+...\n LL | }\n    | - mutable borrow ends here\n \n@@ -59,6 +62,7 @@ LL |     let _bar1 = &mut foo.bar1.int1;\n LL |     let _foo1 = &foo.bar1; //~ ERROR cannot borrow\n LL |     let _foo2 = &*foo; //~ ERROR cannot borrow\n    |                  ^^^^ immutable borrow occurs here\n+LL |     use_mut(_bar1);\n LL | }\n    | - mutable borrow ends here\n \n@@ -69,6 +73,7 @@ LL |     let _bar1 = &mut foo.bar1.int1;\n    |                      ------------- first mutable borrow occurs here\n LL |     let _foo1 = &mut foo.bar1; //~ ERROR cannot borrow\n    |                      ^^^^^^^^ second mutable borrow occurs here\n+LL |     use_mut(_bar1);\n LL | }\n    | - first borrow ends here\n \n@@ -79,6 +84,7 @@ LL |     let _bar1 = &mut foo.bar1.int1;\n    |                      ------------- first mutable borrow occurs here\n LL |     let _foo2 = &mut *foo; //~ ERROR cannot borrow\n    |                      ^^^^ second mutable borrow occurs here\n+LL |     use_mut(_bar1);\n LL | }\n    | - first borrow ends here\n \n@@ -89,6 +95,7 @@ LL |     let _bar1 = &foo.bar1.int1;\n    |                  ------------- immutable borrow occurs here\n LL |     let _foo1 = &mut foo.bar1; //~ ERROR cannot borrow\n    |                      ^^^^^^^^ mutable borrow occurs here\n+LL |     use_imm(_bar1);\n LL | }\n    | - immutable borrow ends here\n \n@@ -99,6 +106,7 @@ LL |     let _bar1 = &foo.bar1.int1;\n    |                  ------------- immutable borrow occurs here\n LL |     let _foo2 = &mut *foo; //~ ERROR cannot borrow\n    |                      ^^^^ mutable borrow occurs here\n+LL |     use_imm(_bar1);\n LL | }\n    | - immutable borrow ends here\n "}, {"sha": "ee5ad58290e9e11a6eb7238ca3840106c071b096", "filename": "src/test/ui/borrowck/borrowck-unboxed-closures.nll.stderr", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/6231720de068dc74be5a5b59872b0b4f284d5b6b/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-unboxed-closures.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6231720de068dc74be5a5b59872b0b4f284d5b6b/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-unboxed-closures.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-unboxed-closures.nll.stderr?ref=6231720de068dc74be5a5b59872b0b4f284d5b6b", "patch": "@@ -1,3 +1,13 @@\n+error[E0502]: cannot borrow `f` as immutable because it is also borrowed as mutable\n+  --> $DIR/borrowck-unboxed-closures.rs:13:5\n+   |\n+LL |     let g = &mut f;\n+   |             ------ mutable borrow occurs here\n+LL |     f(1, 2);    //~ ERROR cannot borrow `f` as immutable\n+   |     ^ immutable borrow occurs here\n+LL |     use_mut(g);\n+   |             - mutable borrow later used here\n+\n error[E0596]: cannot borrow `f` as mutable, as it is not declared as mutable\n   --> $DIR/borrowck-unboxed-closures.rs:17:5\n    |\n@@ -16,7 +26,7 @@ LL |     f(1, 2);    //~ ERROR use of moved value\n    |\n    = note: move occurs because `f` has type `F`, which does not implement the `Copy` trait\n \n-error: aborting due to 2 previous errors\n+error: aborting due to 3 previous errors\n \n-Some errors occurred: E0382, E0596.\n+Some errors occurred: E0382, E0502, E0596.\n For more information about an error, try `rustc --explain E0382`."}, {"sha": "43f143a492fd63b76108c44ec14a3ce0a73ca300", "filename": "src/test/ui/borrowck/borrowck-unboxed-closures.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6231720de068dc74be5a5b59872b0b4f284d5b6b/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-unboxed-closures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6231720de068dc74be5a5b59872b0b4f284d5b6b/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-unboxed-closures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-unboxed-closures.rs?ref=6231720de068dc74be5a5b59872b0b4f284d5b6b", "patch": "@@ -11,8 +11,8 @@\n fn a<F:Fn(isize, isize) -> isize>(mut f: F) {\n     let g = &mut f;\n     f(1, 2);    //~ ERROR cannot borrow `f` as immutable\n+    use_mut(g);\n }\n-\n fn b<F:FnMut(isize, isize) -> isize>(f: F) {\n     f(1, 2);    //~ ERROR cannot borrow immutable argument\n }\n@@ -23,3 +23,5 @@ fn c<F:FnOnce(isize, isize) -> isize>(f: F) {\n }\n \n fn main() {}\n+\n+fn use_mut<T>(_: &mut T) { }"}, {"sha": "6ee1a6245a556b51774baf80effe93b1f923b68c", "filename": "src/test/ui/borrowck/borrowck-unboxed-closures.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6231720de068dc74be5a5b59872b0b4f284d5b6b/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-unboxed-closures.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6231720de068dc74be5a5b59872b0b4f284d5b6b/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-unboxed-closures.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-unboxed-closures.stderr?ref=6231720de068dc74be5a5b59872b0b4f284d5b6b", "patch": "@@ -5,6 +5,7 @@ LL |     let g = &mut f;\n    |                  - mutable borrow occurs here\n LL |     f(1, 2);    //~ ERROR cannot borrow `f` as immutable\n    |     ^ immutable borrow occurs here\n+LL |     use_mut(g);\n LL | }\n    | - mutable borrow ends here\n "}, {"sha": "e334472f9d6e1b26cba8b06eb20fe2ccdd999cfe", "filename": "src/test/ui/codemap_tests/overlapping_spans.nll.stderr", "status": "removed", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/1ea1a4277e8267966e0683a32298069de3d037f2/src%2Ftest%2Fui%2Fcodemap_tests%2Foverlapping_spans.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1ea1a4277e8267966e0683a32298069de3d037f2/src%2Ftest%2Fui%2Fcodemap_tests%2Foverlapping_spans.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcodemap_tests%2Foverlapping_spans.nll.stderr?ref=1ea1a4277e8267966e0683a32298069de3d037f2", "patch": "@@ -1,17 +0,0 @@\n-error[E0509]: cannot move out of type `S`, which implements the `Drop` trait\n-  --> $DIR/overlapping_spans.rs:20:11\n-   |\n-LL |     match (S {f:\"foo\".to_string()}) {\n-   |           ^^^^^^^^^^^^^^^^^^^^^^^^^ cannot move out of here\n-LL |         S {f:_s} => {} //~ ERROR cannot move out\n-   |              -- data moved here\n-   |\n-note: move occurs because `_s` has type `std::string::String`, which does not implement the `Copy` trait\n-  --> $DIR/overlapping_spans.rs:21:14\n-   |\n-LL |         S {f:_s} => {} //~ ERROR cannot move out\n-   |              ^^\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0509`."}, {"sha": "467e90bd5a51b178986f1b95e1641f45d057a286", "filename": "src/test/ui/codemap_tests/overlapping_spans.rs", "status": "removed", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/1ea1a4277e8267966e0683a32298069de3d037f2/src%2Ftest%2Fui%2Fcodemap_tests%2Foverlapping_spans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ea1a4277e8267966e0683a32298069de3d037f2/src%2Ftest%2Fui%2Fcodemap_tests%2Foverlapping_spans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcodemap_tests%2Foverlapping_spans.rs?ref=1ea1a4277e8267966e0683a32298069de3d037f2", "patch": "@@ -1,23 +0,0 @@\n-// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#[derive(Debug)]\n-struct Foo { }\n-\n-struct S {f:String}\n-impl Drop for S {\n-    fn drop(&mut self) { println!(\"{}\", self.f); }\n-}\n-\n-fn main() {\n-    match (S {f:\"foo\".to_string()}) {\n-        S {f:_s} => {} //~ ERROR cannot move out\n-    }\n-}"}, {"sha": "62a4f08e156611c4ca314d893749d9994f0706dd", "filename": "src/test/ui/codemap_tests/overlapping_spans.stderr", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1ea1a4277e8267966e0683a32298069de3d037f2/src%2Ftest%2Fui%2Fcodemap_tests%2Foverlapping_spans.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1ea1a4277e8267966e0683a32298069de3d037f2/src%2Ftest%2Fui%2Fcodemap_tests%2Foverlapping_spans.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcodemap_tests%2Foverlapping_spans.stderr?ref=1ea1a4277e8267966e0683a32298069de3d037f2", "patch": "@@ -1,12 +0,0 @@\n-error[E0509]: cannot move out of type `S`, which implements the `Drop` trait\n-  --> $DIR/overlapping_spans.rs:21:9\n-   |\n-LL |         S {f:_s} => {} //~ ERROR cannot move out\n-   |         ^^^^^--^\n-   |         |    |\n-   |         |    hint: to prevent move, use `ref _s` or `ref mut _s`\n-   |         cannot move out of here\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0509`."}, {"sha": "31adb2f3f1471fbe4d55e14bbb3fd497e3756826", "filename": "src/test/ui/dropck/dropck-eyepatch-extern-crate.ast.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6231720de068dc74be5a5b59872b0b4f284d5b6b/src%2Ftest%2Fui%2Fdropck%2Fdropck-eyepatch-extern-crate.ast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6231720de068dc74be5a5b59872b0b4f284d5b6b/src%2Ftest%2Fui%2Fdropck%2Fdropck-eyepatch-extern-crate.ast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdropck%2Fdropck-eyepatch-extern-crate.ast.stderr?ref=6231720de068dc74be5a5b59872b0b4f284d5b6b", "patch": "@@ -32,7 +32,7 @@ LL | }\n    = note: values in a scope are dropped in the opposite order they are created\n \n error[E0597]: `c_shortest` does not live long enough\n-  --> $DIR/dropck-eyepatch-extern-crate.rs:49:20\n+  --> $DIR/dropck-eyepatch-extern-crate.rs:50:20\n    |\n LL |     dr = Dr(\"dr\", &c_shortest);\n    |                    ^^^^^^^^^^ borrowed value does not live long enough", "previous_filename": "src/test/ui/dropck/dropck-eyepatch-extern-crate.stderr"}, {"sha": "68065639398a591409ab042d6251431d54d335a8", "filename": "src/test/ui/dropck/dropck-eyepatch-extern-crate.rs", "status": "modified", "additions": 19, "deletions": 16, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/6231720de068dc74be5a5b59872b0b4f284d5b6b/src%2Ftest%2Fui%2Fdropck%2Fdropck-eyepatch-extern-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6231720de068dc74be5a5b59872b0b4f284d5b6b/src%2Ftest%2Fui%2Fdropck%2Fdropck-eyepatch-extern-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdropck%2Fdropck-eyepatch-extern-crate.rs?ref=6231720de068dc74be5a5b59872b0b4f284d5b6b", "patch": "@@ -1,12 +1,12 @@\n-// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n+// The behavior of AST-borrowck and NLL explcitly differ here due to\n+// NLL's increased precision; so we use revisions and do not worry\n+// about the --compare-mode=nll on this test.\n+\n+// revisions: ast nll\n+//[ast]compile-flags: -Z borrowck=ast\n+//[nll]compile-flags: -Z borrowck=migrate -Z two-phase-borrows\n+\n+// ignore-compare-mode-nll\n \n // aux-build:dropck_eyepatch_extern_crate.rs\n \n@@ -39,29 +39,32 @@ fn main() { #![rustc_error] // rust-lang/rust#49855\n \n     // Error: destructor order imprecisely modelled\n     dt = Dt(\"dt\", &c);\n-    //~^ ERROR `c` does not live long enough\n+    //[ast]~^ ERROR `c` does not live long enough\n     dr = Dr(\"dr\", &c);\n-    //~^ ERROR `c` does not live long enough\n+    //[ast]~^ ERROR `c` does not live long enough\n \n     // Error: `c_shortest` dies too soon for the references in dtors to be valid.\n     dt = Dt(\"dt\", &c_shortest);\n-    //~^ ERROR `c_shortest` does not live long enough\n+    //[ast]~^ ERROR `c_shortest` does not live long enough\n+    //[nll]~^^ ERROR `c_shortest` does not live long enough\n     dr = Dr(\"dr\", &c_shortest);\n-    //~^ ERROR `c_shortest` does not live long enough\n-\n+    //[ast]~^ ERROR `c_shortest` does not live long enough\n     // No error: Drop impl asserts .1 (A and &'a _) are not accessed\n     pt = Pt(\"pt\", &c_shortest, &c_long);\n     pr = Pr(\"pr\", &c_shortest, &c_long);\n \n     // Error: Drop impl's assertion does not apply to `B` nor `&'b _`\n     pt = Pt(\"pt\", &c_long, &c_shortest);\n-    //~^ ERROR `c_shortest` does not live long enough\n+    //[ast]~^ ERROR `c_shortest` does not live long enough\n     pr = Pr(\"pr\", &c_long, &c_shortest);\n-    //~^ ERROR `c_shortest` does not live long enough\n+    //[ast]~^ ERROR `c_shortest` does not live long enough\n \n     // No error: St and Sr have no destructor.\n     st = St(\"st\", &c_shortest);\n     sr = Sr(\"sr\", &c_shortest);\n \n     println!(\"{:?}\", (dt.0, dr.0, pt.0, pr.0, st.0, sr.0));\n+    use_imm(sr.1); use_imm(st.1); use_imm(pr.1); use_imm(pt.1); use_imm(dr.1); use_imm(dt.1);\n }\n+\n+fn use_imm<T>(_: &T) { }"}, {"sha": "ddd47e97434970c79282b77a95f25a4a78de5e7a", "filename": "src/test/ui/dropck/dropck-eyepatch-reorder.ast.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6231720de068dc74be5a5b59872b0b4f284d5b6b/src%2Ftest%2Fui%2Fdropck%2Fdropck-eyepatch-reorder.ast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6231720de068dc74be5a5b59872b0b4f284d5b6b/src%2Ftest%2Fui%2Fdropck%2Fdropck-eyepatch-reorder.ast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdropck%2Fdropck-eyepatch-reorder.ast.stderr?ref=6231720de068dc74be5a5b59872b0b4f284d5b6b", "patch": "@@ -32,7 +32,7 @@ LL | }\n    = note: values in a scope are dropped in the opposite order they are created\n \n error[E0597]: `c_shortest` does not live long enough\n-  --> $DIR/dropck-eyepatch-reorder.rs:66:20\n+  --> $DIR/dropck-eyepatch-reorder.rs:67:20\n    |\n LL |     dr = Dr(\"dr\", &c_shortest);\n    |                    ^^^^^^^^^^ borrowed value does not live long enough", "previous_filename": "src/test/ui/dropck/dropck-eyepatch-reorder.stderr"}, {"sha": "16aaa2612576821c954b62ca84e1247ac71ee034", "filename": "src/test/ui/dropck/dropck-eyepatch-reorder.rs", "status": "modified", "additions": 19, "deletions": 16, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/6231720de068dc74be5a5b59872b0b4f284d5b6b/src%2Ftest%2Fui%2Fdropck%2Fdropck-eyepatch-reorder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6231720de068dc74be5a5b59872b0b4f284d5b6b/src%2Ftest%2Fui%2Fdropck%2Fdropck-eyepatch-reorder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdropck%2Fdropck-eyepatch-reorder.rs?ref=6231720de068dc74be5a5b59872b0b4f284d5b6b", "patch": "@@ -1,12 +1,12 @@\n-// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n+// The behavior of AST-borrowck and NLL explcitly differ here due to\n+// NLL's increased precision; so we use revisions and do not worry\n+// about the --compare-mode=nll on this test.\n+\n+// revisions: ast nll\n+//[ast]compile-flags: -Z borrowck=ast\n+//[nll]compile-flags: -Z borrowck=migrate -Z two-phase-borrows\n+\n+// ignore-compare-mode-nll\n \n #![feature(dropck_eyepatch, rustc_attrs)]\n \n@@ -56,29 +56,32 @@ fn main() { #![rustc_error] // rust-lang/rust#49855\n \n     // Error: destructor order imprecisely modelled\n     dt = Dt(\"dt\", &c);\n-    //~^ ERROR `c` does not live long enough\n+    //[ast]~^ ERROR `c` does not live long enough\n     dr = Dr(\"dr\", &c);\n-    //~^ ERROR `c` does not live long enough\n+    //[ast]~^ ERROR `c` does not live long enough\n \n     // Error: `c_shortest` dies too soon for the references in dtors to be valid.\n     dt = Dt(\"dt\", &c_shortest);\n-    //~^ ERROR `c_shortest` does not live long enough\n+    //[ast]~^ ERROR `c_shortest` does not live long enough\n+    //[nll]~^^ ERROR `c_shortest` does not live long enough\n     dr = Dr(\"dr\", &c_shortest);\n-    //~^ ERROR `c_shortest` does not live long enough\n-\n+    //[ast]~^ ERROR `c_shortest` does not live long enough\n     // No error: Drop impl asserts .1 (A and &'a _) are not accessed\n     pt = Pt(\"pt\", &c_shortest, &c_long);\n     pr = Pr(\"pr\", &c_shortest, &c_long);\n \n     // Error: Drop impl's assertion does not apply to `B` nor `&'b _`\n     pt = Pt(\"pt\", &c_long, &c_shortest);\n-    //~^ ERROR `c_shortest` does not live long enough\n+    //[ast]~^ ERROR `c_shortest` does not live long enough\n     pr = Pr(\"pr\", &c_long, &c_shortest);\n-    //~^ ERROR `c_shortest` does not live long enough\n+    //[ast]~^ ERROR `c_shortest` does not live long enough\n \n     // No error: St and Sr have no destructor.\n     st = St(\"st\", &c_shortest);\n     sr = Sr(\"sr\", &c_shortest);\n \n     println!(\"{:?}\", (dt.0, dr.0, pt.0, pr.0, st.0, sr.0));\n+    use_imm(sr.1); use_imm(st.1); use_imm(pr.1); use_imm(pt.1); use_imm(dr.1); use_imm(dt.1);\n }\n+\n+fn use_imm<T>(_: &T) { }"}, {"sha": "0952ed0d6b793f8a1427e2479f49e8a98b18ee35", "filename": "src/test/ui/dropck/dropck-eyepatch.ast.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6231720de068dc74be5a5b59872b0b4f284d5b6b/src%2Ftest%2Fui%2Fdropck%2Fdropck-eyepatch.ast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6231720de068dc74be5a5b59872b0b4f284d5b6b/src%2Ftest%2Fui%2Fdropck%2Fdropck-eyepatch.ast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdropck%2Fdropck-eyepatch.ast.stderr?ref=6231720de068dc74be5a5b59872b0b4f284d5b6b", "patch": "@@ -32,7 +32,7 @@ LL | }\n    = note: values in a scope are dropped in the opposite order they are created\n \n error[E0597]: `c_shortest` does not live long enough\n-  --> $DIR/dropck-eyepatch.rs:89:20\n+  --> $DIR/dropck-eyepatch.rs:90:20\n    |\n LL |     dr = Dr(\"dr\", &c_shortest);\n    |                    ^^^^^^^^^^ borrowed value does not live long enough", "previous_filename": "src/test/ui/dropck/dropck-eyepatch.stderr"}, {"sha": "d7a671fd33c2c62713325081c71edbe326b16556", "filename": "src/test/ui/dropck/dropck-eyepatch.rs", "status": "modified", "additions": 19, "deletions": 16, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/6231720de068dc74be5a5b59872b0b4f284d5b6b/src%2Ftest%2Fui%2Fdropck%2Fdropck-eyepatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6231720de068dc74be5a5b59872b0b4f284d5b6b/src%2Ftest%2Fui%2Fdropck%2Fdropck-eyepatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdropck%2Fdropck-eyepatch.rs?ref=6231720de068dc74be5a5b59872b0b4f284d5b6b", "patch": "@@ -1,12 +1,12 @@\n-// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n+// The behavior of AST-borrowck and NLL explcitly differ here due to\n+// NLL's increased precision; so we use revisions and do not worry\n+// about the --compare-mode=nll on this test.\n+\n+// revisions: ast nll\n+//[ast]compile-flags: -Z borrowck=ast\n+//[nll]compile-flags: -Z borrowck=migrate -Z two-phase-borrows\n+\n+// ignore-compare-mode-nll\n \n #![feature(dropck_eyepatch, rustc_attrs)]\n \n@@ -79,30 +79,33 @@ fn main() { #![rustc_error] // rust-lang/rust#49855\n \n     // Error: destructor order imprecisely modelled\n     dt = Dt(\"dt\", &c);\n-    //~^ ERROR `c` does not live long enough\n+    //[ast]~^ ERROR `c` does not live long enough\n     dr = Dr(\"dr\", &c);\n-    //~^ ERROR `c` does not live long enough\n+    //[ast]~^ ERROR `c` does not live long enough\n \n     // Error: `c_shortest` dies too soon for the references in dtors to be valid.\n     dt = Dt(\"dt\", &c_shortest);\n-    //~^ ERROR `c_shortest` does not live long enough\n+    //[ast]~^ ERROR `c_shortest` does not live long enough\n+    //[nll]~^^ ERROR `c_shortest` does not live long enough\n     dr = Dr(\"dr\", &c_shortest);\n-    //~^ ERROR `c_shortest` does not live long enough\n-\n+    //[ast]~^ ERROR `c_shortest` does not live long enough\n \n     // No error: Drop impl asserts .1 (A and &'a _) are not accessed\n     pt = Pt(\"pt\", &c_shortest, &c_long);\n     pr = Pr(\"pr\", &c_shortest, &c_long);\n \n     // Error: Drop impl's assertion does not apply to `B` nor `&'b _`\n     pt = Pt(\"pt\", &c_long, &c_shortest);\n-    //~^ ERROR `c_shortest` does not live long enough\n+    //[ast]~^ ERROR `c_shortest` does not live long enough\n     pr = Pr(\"pr\", &c_long, &c_shortest);\n-    //~^ ERROR `c_shortest` does not live long enough\n+    //[ast]~^ ERROR `c_shortest` does not live long enough\n \n     // No error: St and Sr have no destructor.\n     st = St(\"st\", &c_shortest);\n     sr = Sr(\"sr\", &c_shortest);\n \n     println!(\"{:?}\", (dt.0, dr.0, pt.0, pr.0, st.0, sr.0));\n+    use_imm(sr.1); use_imm(st.1); use_imm(pr.1); use_imm(pt.1); use_imm(dr.1); use_imm(dt.1);\n }\n+\n+fn use_imm<T>(_: &T) { }"}, {"sha": "81de0d14aa7d33bf22fddbd7dcab7e87d8c96485", "filename": "src/test/ui/feature-gates/feature-gate-nll.nll.stderr", "status": "removed", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/1ea1a4277e8267966e0683a32298069de3d037f2/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-nll.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1ea1a4277e8267966e0683a32298069de3d037f2/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-nll.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-nll.nll.stderr?ref=1ea1a4277e8267966e0683a32298069de3d037f2", "patch": "@@ -1,13 +0,0 @@\n-error: compilation successful\n-  --> $DIR/feature-gate-nll.rs:13:1\n-   |\n-LL | / fn main() { #![rustc_error] // rust-lang/rust#49855\n-LL | |     let mut x = 33;\n-LL | |\n-LL | |     let p = &x;\n-LL | |     x = 22; //~ ERROR cannot assign to `x` because it is borrowed [E0506]\n-LL | | }\n-   | |_^\n-\n-error: aborting due to previous error\n-"}, {"sha": "14c48fb48a09b6a83d85ca616cc5a0af6d42505b", "filename": "src/test/ui/feature-gates/feature-gate-nll.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/6231720de068dc74be5a5b59872b0b4f284d5b6b/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-nll.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6231720de068dc74be5a5b59872b0b4f284d5b6b/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-nll.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-nll.rs?ref=6231720de068dc74be5a5b59872b0b4f284d5b6b", "patch": "@@ -1,16 +1,16 @@\n-// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-#![feature(rustc_attrs)]\n+// This is a test checking that if you do not opt into NLL then you\n+// should not get the effects of NLL applied to the test.\n+\n+// Don't use 2018 edition, since that turns on NLL (migration mode).\n+// edition:2015\n+\n+// Don't use compare-mode=nll, since that turns on NLL.\n+// ignore-compare-mode-nll\n+\n+\n #![allow(dead_code)]\n \n-fn main() { #![rustc_error] // rust-lang/rust#49855\n+fn main() {\n     let mut x = 33;\n \n     let p = &x;"}, {"sha": "3d42dcb52f5db1966810ef67f5269a04c6b22b21", "filename": "src/test/ui/issues/issue-17263.ast.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6231720de068dc74be5a5b59872b0b4f284d5b6b/src%2Ftest%2Fui%2Fissues%2Fissue-17263.ast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6231720de068dc74be5a5b59872b0b4f284d5b6b/src%2Ftest%2Fui%2Fissues%2Fissue-17263.ast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17263.ast.stderr?ref=6231720de068dc74be5a5b59872b0b4f284d5b6b", "patch": "@@ -16,7 +16,7 @@ LL |     let (c, d) = (&mut foo.a, &foo.b);\n    |                        -----   ^^^^^ immutable borrow occurs here (via `foo.b`)\n    |                        |\n    |                        mutable borrow occurs here (via `foo.a`)\n-LL |     //~^ ERROR cannot borrow `foo` (via `foo.b`) as immutable\n+...\n LL | }\n    | - mutable borrow ends here\n ", "previous_filename": "src/test/ui/issues/issue-17263.stderr"}, {"sha": "cdb574b8b9f942f8e3d069b5a3051660d89b25af", "filename": "src/test/ui/issues/issue-17263.nll.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6231720de068dc74be5a5b59872b0b4f284d5b6b/src%2Ftest%2Fui%2Fissues%2Fissue-17263.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6231720de068dc74be5a5b59872b0b4f284d5b6b/src%2Ftest%2Fui%2Fissues%2Fissue-17263.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17263.nll.stderr?ref=6231720de068dc74be5a5b59872b0b4f284d5b6b", "patch": "@@ -1,12 +1,12 @@\n error: compilation successful\n   --> $DIR/issue-17263.rs:15:1\n    |\n-LL | / fn main() { #![rustc_error] // rust-lang/rust#49855\n+LL | / fn main() { //[nll]~ ERROR compilation successful\n LL | |     let mut x: Box<_> = box Foo { a: 1, b: 2 };\n LL | |     let (a, b) = (&mut x.a, &mut x.b);\n-LL | |     //~^ ERROR cannot borrow `x` (via `x.b`) as mutable more than once at a time\n+LL | |     //[ast]~^ ERROR cannot borrow `x` (via `x.b`) as mutable more than once at a time\n ...  |\n-LL | |     //~^ ERROR cannot borrow `foo` (via `foo.b`) as immutable\n+LL | |     use_mut(a);\n LL | | }\n    | |_^\n "}, {"sha": "754f3b90aacf1f47de9ce15674126dc94370edf6", "filename": "src/test/ui/issues/issue-17263.rs", "status": "modified", "additions": 25, "deletions": 13, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/6231720de068dc74be5a5b59872b0b4f284d5b6b/src%2Ftest%2Fui%2Fissues%2Fissue-17263.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6231720de068dc74be5a5b59872b0b4f284d5b6b/src%2Ftest%2Fui%2Fissues%2Fissue-17263.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17263.rs?ref=6231720de068dc74be5a5b59872b0b4f284d5b6b", "patch": "@@ -1,23 +1,35 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n+// This checks diagnostic quality for cases where AST-borrowck treated\n+// `Box<T>` as other types (see rust-lang/rfcs#130). NLL again treats\n+// `Box<T>` specially. We capture the differences via revisions.\n \n+// revisions: ast nll\n+//[ast]compile-flags: -Z borrowck=ast\n+//[nll]compile-flags: -Z borrowck=migrate -Z two-phase-borrows\n+\n+// don't worry about the --compare-mode=nll on this test.\n+// ignore-compare-mode-nll\n #![feature(box_syntax, rustc_attrs)]\n \n struct Foo { a: isize, b: isize }\n-\n-fn main() { #![rustc_error] // rust-lang/rust#49855\n+#[rustc_error] // rust-lang/rust#49855\n+fn main() { //[nll]~ ERROR compilation successful\n     let mut x: Box<_> = box Foo { a: 1, b: 2 };\n     let (a, b) = (&mut x.a, &mut x.b);\n-    //~^ ERROR cannot borrow `x` (via `x.b`) as mutable more than once at a time\n+    //[ast]~^ ERROR cannot borrow `x` (via `x.b`) as mutable more than once at a time\n \n     let mut foo: Box<_> = box Foo { a: 1, b: 2 };\n     let (c, d) = (&mut foo.a, &foo.b);\n-    //~^ ERROR cannot borrow `foo` (via `foo.b`) as immutable\n+    //[ast]~^ ERROR cannot borrow `foo` (via `foo.b`) as immutable\n+\n+    // We explicitly use the references created above to illustrate\n+    // that NLL is accepting this code *not* because of artificially\n+    // short lifetimes, but rather because it understands that all the\n+    // references are of disjoint parts of memory.\n+    use_imm(d);\n+    use_mut(c);\n+    use_mut(b);\n+    use_mut(a);\n }\n+\n+fn use_mut<T>(_: &mut T) { }\n+fn use_imm<T>(_: &T) { }"}, {"sha": "2165d951102c2d565f16a9842380c9c126e6c374", "filename": "src/test/ui/issues/issue-52126-assign-op-invariance.nll.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6231720de068dc74be5a5b59872b0b4f284d5b6b/src%2Ftest%2Fui%2Fissues%2Fissue-52126-assign-op-invariance.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6231720de068dc74be5a5b59872b0b4f284d5b6b/src%2Ftest%2Fui%2Fissues%2Fissue-52126-assign-op-invariance.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-52126-assign-op-invariance.nll.stderr?ref=6231720de068dc74be5a5b59872b0b4f284d5b6b", "patch": "@@ -3,9 +3,9 @@ error[E0597]: `line` does not live long enough\n    |\n LL |         let v: Vec<&str> = line.split_whitespace().collect();\n    |                            ^^^^ borrowed value does not live long enough\n-LL |         //~^ ERROR `line` does not live long enough\n-LL |         println!(\"accumulator before add_assign {:?}\", acc.map);\n-   |                                                        ------- borrow used here, in later iteration of loop\n+...\n+LL |         acc += cnt2;\n+   |         --- borrow used here, in later iteration of loop\n ...\n LL |     }\n    |     - `line` dropped here while still borrowed"}, {"sha": "1a353f9ea7cd37f56f558122116009f3818fe7e4", "filename": "src/test/ui/issues/issue-52126-assign-op-invariance.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6231720de068dc74be5a5b59872b0b4f284d5b6b/src%2Ftest%2Fui%2Fissues%2Fissue-52126-assign-op-invariance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6231720de068dc74be5a5b59872b0b4f284d5b6b/src%2Ftest%2Fui%2Fissues%2Fissue-52126-assign-op-invariance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-52126-assign-op-invariance.rs?ref=6231720de068dc74be5a5b59872b0b4f284d5b6b", "patch": "@@ -43,7 +43,7 @@ pub fn panics() {\n     for line in vec![\"123456789\".to_string(), \"12345678\".to_string()] {\n         let v: Vec<&str> = line.split_whitespace().collect();\n         //~^ ERROR `line` does not live long enough\n-        println!(\"accumulator before add_assign {:?}\", acc.map);\n+        // println!(\"accumulator before add_assign {:?}\", acc.map);\n         let mut map = HashMap::new();\n         for str_ref in v {\n             let e = map.entry(str_ref);\n@@ -53,7 +53,7 @@ pub fn panics() {\n         }\n         let cnt2 = Counter{map};\n         acc += cnt2;\n-        println!(\"accumulator after add_assign {:?}\", acc.map);\n+        // println!(\"accumulator after add_assign {:?}\", acc.map);\n         // line gets dropped here but references are kept in acc.map\n     }\n }"}, {"sha": "389a1116c163ace63616dedc196c9467c8334fd9", "filename": "src/test/ui/span/borrowck-borrow-overloaded-auto-deref-mut.nll.stderr", "status": "modified", "additions": 23, "deletions": 2, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/6231720de068dc74be5a5b59872b0b4f284d5b6b/src%2Ftest%2Fui%2Fspan%2Fborrowck-borrow-overloaded-auto-deref-mut.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6231720de068dc74be5a5b59872b0b4f284d5b6b/src%2Ftest%2Fui%2Fspan%2Fborrowck-borrow-overloaded-auto-deref-mut.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fborrowck-borrow-overloaded-auto-deref-mut.nll.stderr?ref=6231720de068dc74be5a5b59872b0b4f284d5b6b", "patch": "@@ -14,6 +14,16 @@ LL | fn deref_extend_mut_field1(x: &Own<Point>) -> &mut isize {\n LL |     &mut x.y //~ ERROR cannot borrow\n    |          ^ `x` is a `&` reference, so the data it refers to cannot be borrowed as mutable\n \n+error[E0499]: cannot borrow `*x` as mutable more than once at a time\n+  --> $DIR/borrowck-borrow-overloaded-auto-deref-mut.rs:88:19\n+   |\n+LL |     let _x = &mut x.x;\n+   |                   - first mutable borrow occurs here\n+LL |     let _y = &mut x.y; //~ ERROR cannot borrow\n+   |                   ^ second mutable borrow occurs here\n+LL |     use_mut(_x);\n+   |             -- first borrow later used here\n+\n error[E0596]: cannot borrow `x` as mutable, as it is not declared as mutable\n   --> $DIR/borrowck-borrow-overloaded-auto-deref-mut.rs:98:5\n    |\n@@ -30,6 +40,16 @@ LL | fn assign_field2<'a>(x: &'a Own<Point>) {\n LL |     x.y = 3; //~ ERROR cannot borrow\n    |     ^ `x` is a `&` reference, so the data it refers to cannot be borrowed as mutable\n \n+error[E0499]: cannot borrow `*x` as mutable more than once at a time\n+  --> $DIR/borrowck-borrow-overloaded-auto-deref-mut.rs:111:5\n+   |\n+LL |     let _p: &mut Point = &mut **x;\n+   |                                -- first mutable borrow occurs here\n+LL |     x.y = 3; //~ ERROR cannot borrow\n+   |     ^ second mutable borrow occurs here\n+LL |     use_mut(_p);\n+   |             -- first borrow later used here\n+\n error[E0596]: cannot borrow `x` as mutable, as it is not declared as mutable\n   --> $DIR/borrowck-borrow-overloaded-auto-deref-mut.rs:119:5\n    |\n@@ -62,6 +82,7 @@ LL | fn assign_method2<'a>(x: &'a Own<Point>) {\n LL |     *x.y_mut() = 3; //~ ERROR cannot borrow\n    |      ^ `x` is a `&` reference, so the data it refers to cannot be borrowed as mutable\n \n-error: aborting due to 8 previous errors\n+error: aborting due to 10 previous errors\n \n-For more information about this error, try `rustc --explain E0596`.\n+Some errors occurred: E0499, E0596.\n+For more information about an error, try `rustc --explain E0499`."}, {"sha": "48eb2e239f7cdc6a46ff85170949b339c8ed6128", "filename": "src/test/ui/span/borrowck-borrow-overloaded-auto-deref-mut.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6231720de068dc74be5a5b59872b0b4f284d5b6b/src%2Ftest%2Fui%2Fspan%2Fborrowck-borrow-overloaded-auto-deref-mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6231720de068dc74be5a5b59872b0b4f284d5b6b/src%2Ftest%2Fui%2Fspan%2Fborrowck-borrow-overloaded-auto-deref-mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fborrowck-borrow-overloaded-auto-deref-mut.rs?ref=6231720de068dc74be5a5b59872b0b4f284d5b6b", "patch": "@@ -86,8 +86,8 @@ fn deref_extend_mut_field3(x: &mut Own<Point>) {\n \n     let _x = &mut x.x;\n     let _y = &mut x.y; //~ ERROR cannot borrow\n+    use_mut(_x);\n }\n-\n fn deref_extend_mut_field4<'a>(x: &'a mut Own<Point>) {\n     let p = &mut **x;\n     let _x = &mut p.x;\n@@ -109,8 +109,8 @@ fn assign_field3<'a>(x: &'a mut Own<Point>) {\n fn assign_field4<'a>(x: &'a mut Own<Point>) {\n     let _p: &mut Point = &mut **x;\n     x.y = 3; //~ ERROR cannot borrow\n+    use_mut(_p);\n }\n-\n fn deref_imm_method(x: Own<Point>) {\n     let __isize = x.get();\n }\n@@ -148,3 +148,5 @@ fn assign_method3<'a>(x: &'a mut Own<Point>) {\n }\n \n pub fn main() {}\n+\n+fn use_mut<T>(_: &mut T) {}"}, {"sha": "864357fee9f0cbbb59ac9bb328e3ee10c920dda4", "filename": "src/test/ui/span/borrowck-borrow-overloaded-auto-deref-mut.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6231720de068dc74be5a5b59872b0b4f284d5b6b/src%2Ftest%2Fui%2Fspan%2Fborrowck-borrow-overloaded-auto-deref-mut.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6231720de068dc74be5a5b59872b0b4f284d5b6b/src%2Ftest%2Fui%2Fspan%2Fborrowck-borrow-overloaded-auto-deref-mut.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fborrowck-borrow-overloaded-auto-deref-mut.stderr?ref=6231720de068dc74be5a5b59872b0b4f284d5b6b", "patch": "@@ -21,6 +21,7 @@ LL |     let _x = &mut x.x;\n    |                   - first mutable borrow occurs here\n LL |     let _y = &mut x.y; //~ ERROR cannot borrow\n    |                   ^ second mutable borrow occurs here\n+LL |     use_mut(_x);\n LL | }\n    | - first borrow ends here\n \n@@ -47,6 +48,7 @@ LL |     let _p: &mut Point = &mut **x;\n    |                                -- first mutable borrow occurs here\n LL |     x.y = 3; //~ ERROR cannot borrow\n    |     ^ second mutable borrow occurs here\n+LL |     use_mut(_p);\n LL | }\n    | - first borrow ends here\n "}, {"sha": "bfc7736b2f32cd7f66b59646931677c257b303ac", "filename": "src/test/ui/unop-move-semantics.nll.stderr", "status": "modified", "additions": 25, "deletions": 2, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/6231720de068dc74be5a5b59872b0b4f284d5b6b/src%2Ftest%2Fui%2Funop-move-semantics.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6231720de068dc74be5a5b59872b0b4f284d5b6b/src%2Ftest%2Fui%2Funop-move-semantics.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funop-move-semantics.nll.stderr?ref=6231720de068dc74be5a5b59872b0b4f284d5b6b", "patch": "@@ -9,6 +9,29 @@ LL |     x.clone();  //~ ERROR: use of moved value\n    |\n    = note: move occurs because `x` has type `T`, which does not implement the `Copy` trait\n \n+error[E0505]: cannot move out of `x` because it is borrowed\n+  --> $DIR/unop-move-semantics.rs:25:6\n+   |\n+LL |     let m = &x;\n+   |             -- borrow of `x` occurs here\n+...\n+LL |     !x;  //~ ERROR: cannot move out of `x` because it is borrowed\n+   |      ^ move out of `x` occurs here\n+...\n+LL |     use_mut(n); use_imm(m);\n+   |                         - borrow later used here\n+\n+error[E0505]: cannot move out of `y` because it is borrowed\n+  --> $DIR/unop-move-semantics.rs:27:6\n+   |\n+LL |     let n = &mut y;\n+   |             ------ borrow of `y` occurs here\n+...\n+LL |     !y;  //~ ERROR: cannot move out of `y` because it is borrowed\n+   |      ^ move out of `y` occurs here\n+LL |     use_mut(n); use_imm(m);\n+   |             - borrow later used here\n+\n error[E0507]: cannot move out of borrowed content\n   --> $DIR/unop-move-semantics.rs:34:6\n    |\n@@ -21,7 +44,7 @@ error[E0507]: cannot move out of borrowed content\n LL |     !*n;  //~ ERROR: cannot move out of borrowed content\n    |      ^^ cannot move out of borrowed content\n \n-error: aborting due to 3 previous errors\n+error: aborting due to 5 previous errors\n \n-Some errors occurred: E0382, E0507.\n+Some errors occurred: E0382, E0505, E0507.\n For more information about an error, try `rustc --explain E0382`."}, {"sha": "fcbbe546a316446deedae6db6d929515cbcab52b", "filename": "src/test/ui/unop-move-semantics.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/6231720de068dc74be5a5b59872b0b4f284d5b6b/src%2Ftest%2Fui%2Funop-move-semantics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6231720de068dc74be5a5b59872b0b4f284d5b6b/src%2Ftest%2Fui%2Funop-move-semantics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funop-move-semantics.rs?ref=6231720de068dc74be5a5b59872b0b4f284d5b6b", "patch": "@@ -25,15 +25,18 @@ fn move_borrowed<T: Not<Output=T>>(x: T, mut y: T) {\n     !x;  //~ ERROR: cannot move out of `x` because it is borrowed\n \n     !y;  //~ ERROR: cannot move out of `y` because it is borrowed\n+    use_mut(n); use_imm(m);\n }\n-\n fn illegal_dereference<T: Not<Output=T>>(mut x: T, y: T) {\n     let m = &mut x;\n     let n = &y;\n \n     !*m;  //~ ERROR: cannot move out of borrowed content\n \n     !*n;  //~ ERROR: cannot move out of borrowed content\n+    use_imm(n); use_mut(m);\n }\n-\n fn main() {}\n+\n+fn use_mut<T>(_: &mut T) { }\n+fn use_imm<T>(_: &T) { }"}]}