{"sha": "61fbdbba41163b6fd327b166338a8feb89133444", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYxZmJkYmJhNDExNjNiNmZkMzI3YjE2NjMzOGE4ZmViODkxMzM0NDQ=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2017-01-11T22:12:49Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2017-01-20T20:48:35Z"}, "message": "Add Debug implementations for libcollection structs", "tree": {"sha": "3557f5884dfd2ebd9d05502ee6689a97ec4c7455", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3557f5884dfd2ebd9d05502ee6689a97ec4c7455"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/61fbdbba41163b6fd327b166338a8feb89133444", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/61fbdbba41163b6fd327b166338a8feb89133444", "html_url": "https://github.com/rust-lang/rust/commit/61fbdbba41163b6fd327b166338a8feb89133444", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/61fbdbba41163b6fd327b166338a8feb89133444/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a52da95ced667fe8ff490f73c0b041a4f926c041", "url": "https://api.github.com/repos/rust-lang/rust/commits/a52da95ced667fe8ff490f73c0b041a4f926c041", "html_url": "https://github.com/rust-lang/rust/commit/a52da95ced667fe8ff490f73c0b041a4f926c041"}], "stats": {"total": 496, "additions": 496, "deletions": 0}, "files": [{"sha": "fca3b7b07dd2d435486cc20c052417e1f292859c", "filename": "src/libcollections/binary_heap.rs", "status": "modified", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/61fbdbba41163b6fd327b166338a8feb89133444/src%2Flibcollections%2Fbinary_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61fbdbba41163b6fd327b166338a8feb89133444/src%2Flibcollections%2Fbinary_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbinary_heap.rs?ref=61fbdbba41163b6fd327b166338a8feb89133444", "patch": "@@ -228,6 +228,20 @@ pub struct PeekMut<'a, T: 'a + Ord> {\n     sift: bool,\n }\n \n+#[stable(feature = \"collection_debug\", since = \"1.15.0\")]\n+impl<'a, T: Ord> fmt::Debug for PeekMut<'a, T> {\n+    default fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        f.pad(\"PeekMut { .. }\")\n+    }\n+}\n+\n+#[stable(feature = \"collection_debug\", since = \"1.15.0\")]\n+impl<'a, T: Ord + fmt::Debug> fmt::Debug for PeekMut<'a, T> {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        f.pad(&format!(\"PeekMut({:?})\", self.heap.data[0]))\n+    }\n+}\n+\n #[stable(feature = \"binary_heap_peek_mut\", since = \"1.12.0\")]\n impl<'a, T: Ord> Drop for PeekMut<'a, T> {\n     fn drop(&mut self) {\n@@ -968,6 +982,22 @@ pub struct Iter<'a, T: 'a> {\n     iter: slice::Iter<'a, T>,\n }\n \n+#[stable(feature = \"collection_debug\", since = \"1.15.0\")]\n+impl<'a, T: 'a> fmt::Debug for Iter<'a, T> {\n+    default fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        f.pad(\"BinaryHeap::Iter { .. }\")\n+    }\n+}\n+\n+#[stable(feature = \"collection_debug\", since = \"1.15.0\")]\n+impl<'a, T: 'a + fmt::Debug> fmt::Debug for Iter<'a, T> {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        f.debug_tuple(\"BinaryHeap::Iter\")\n+         .field(&self.iter.as_slice())\n+         .finish()\n+    }\n+}\n+\n // FIXME(#19839) Remove in favor of `#[derive(Clone)]`\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, T> Clone for Iter<'a, T> {\n@@ -1016,6 +1046,22 @@ pub struct IntoIter<T> {\n     iter: vec::IntoIter<T>,\n }\n \n+#[stable(feature = \"collection_debug\", since = \"1.15.0\")]\n+impl<T> fmt::Debug for IntoIter<T> {\n+    default fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        f.pad(\"BinaryHeap::IntoIter { .. }\")\n+    }\n+}\n+\n+#[stable(feature = \"collection_debug\", since = \"1.15.0\")]\n+impl<T: fmt::Debug> fmt::Debug for IntoIter<T> {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        f.debug_tuple(\"BinaryHeap::IntoIter\")\n+         .field(&self.iter.as_slice())\n+         .finish()\n+    }\n+}\n+\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T> Iterator for IntoIter<T> {\n     type Item = T;\n@@ -1055,6 +1101,20 @@ pub struct Drain<'a, T: 'a> {\n     iter: vec::Drain<'a, T>,\n }\n \n+#[stable(feature = \"collection_debug\", since = \"1.15.0\")]\n+impl<'a, T: 'a> fmt::Debug for Drain<'a, T> {\n+    default fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        f.pad(\"BinaryHeap::Drain { .. }\")\n+    }\n+}\n+\n+#[stable(feature = \"collection_debug\", since = \"1.15.0\")]\n+impl<'a, T: 'a + fmt::Debug> fmt::Debug for Drain<'a, T> {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        f.pad(&format!(\"BinaryHeap::Drain({:?})\", self.iter))\n+    }\n+}\n+\n #[stable(feature = \"drain\", since = \"1.6.0\")]\n impl<'a, T: 'a> Iterator for Drain<'a, T> {\n     type Item = T;"}, {"sha": "0d8b9d4677bd4a6c50f809edc4aa9bdf685aed3c", "filename": "src/libcollections/btree/map.rs", "status": "modified", "additions": 120, "deletions": 0, "changes": 120, "blob_url": "https://github.com/rust-lang/rust/blob/61fbdbba41163b6fd327b166338a8feb89133444/src%2Flibcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61fbdbba41163b6fd327b166338a8feb89133444/src%2Flibcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbtree%2Fmap.rs?ref=61fbdbba41163b6fd327b166338a8feb89133444", "patch": "@@ -270,13 +270,41 @@ pub struct Iter<'a, K: 'a, V: 'a> {\n     length: usize,\n }\n \n+#[stable(feature = \"collection_debug\", since = \"1.15.0\")]\n+impl<'a, K: 'a, V: 'a> fmt::Debug for Iter<'a, K, V> {\n+    default fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        f.pad(\"BTreeMap::Iter { .. }\")\n+    }\n+}\n+\n+#[stable(feature = \"collection_debug\", since = \"1.15.0\")]\n+impl<'a, K: 'a + fmt::Debug, V: 'a + fmt::Debug> fmt::Debug for Iter<'a, K, V> {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        f.debug_list().entries(self.clone()).finish()\n+    }\n+}\n+\n /// A mutable iterator over a BTreeMap's entries.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct IterMut<'a, K: 'a, V: 'a> {\n     range: RangeMut<'a, K, V>,\n     length: usize,\n }\n \n+#[stable(feature = \"collection_debug\", since = \"1.15.0\")]\n+impl<'a, K: 'a, V: 'a> fmt::Debug for IterMut<'a, K, V> {\n+    default fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        f.pad(\"BTreeMap::IterMut { .. }\")\n+    }\n+}\n+\n+#[stable(feature = \"collection_debug\", since = \"1.15.0\")]\n+impl<'a, K: 'a + fmt::Debug, V: 'a + fmt::Debug> fmt::Debug for IterMut<'a, K, V> {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        f.pad(&format!(\"BTreeMap::IterMut({:?})\", self.range))\n+    }\n+}\n+\n /// An owning iterator over a BTreeMap's entries.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct IntoIter<K, V> {\n@@ -285,30 +313,104 @@ pub struct IntoIter<K, V> {\n     length: usize,\n }\n \n+#[stable(feature = \"collection_debug\", since = \"1.15.0\")]\n+impl<K, V> fmt::Debug for IntoIter<K, V> {\n+    default fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        f.pad(\"BTreeMap::IntoIter { .. }\")\n+    }\n+}\n+\n+#[stable(feature = \"collection_debug\", since = \"1.15.0\")]\n+impl<K: fmt::Debug, V: fmt::Debug> fmt::Debug for IntoIter<K, V> {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        let range = Range {\n+            front: self.front.reborrow(),\n+            back: self.back.reborrow(),\n+        };\n+        f.debug_list().entries(range).finish()\n+    }\n+}\n+\n /// An iterator over a BTreeMap's keys.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Keys<'a, K: 'a, V: 'a> {\n     inner: Iter<'a, K, V>,\n }\n \n+#[stable(feature = \"collection_debug\", since = \"1.15.0\")]\n+impl<'a, K: 'a, V: 'a> fmt::Debug for Keys<'a, K, V> {\n+    default fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        f.pad(\"BTreeMap::Keys { .. }\")\n+    }\n+}\n+\n+#[stable(feature = \"collection_debug\", since = \"1.15.0\")]\n+impl<'a, K: 'a + fmt::Debug, V: 'a + fmt::Debug> fmt::Debug for Keys<'a, K, V> {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        f.debug_list().entries(self.inner.clone()).finish()\n+    }\n+}\n+\n /// An iterator over a BTreeMap's values.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Values<'a, K: 'a, V: 'a> {\n     inner: Iter<'a, K, V>,\n }\n \n+#[stable(feature = \"collection_debug\", since = \"1.15.0\")]\n+impl<'a, K: 'a, V: 'a> fmt::Debug for Values<'a, K, V> {\n+    default fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        f.pad(\"BTreeMap::Values { .. }\")\n+    }\n+}\n+\n+#[stable(feature = \"collection_debug\", since = \"1.15.0\")]\n+impl<'a, K: 'a + fmt::Debug, V: 'a + fmt::Debug> fmt::Debug for Values<'a, K, V> {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        f.debug_list().entries(self.inner.clone()).finish()\n+    }\n+}\n+\n /// A mutable iterator over a BTreeMap's values.\n #[stable(feature = \"map_values_mut\", since = \"1.10.0\")]\n pub struct ValuesMut<'a, K: 'a, V: 'a> {\n     inner: IterMut<'a, K, V>,\n }\n \n+#[stable(feature = \"collection_debug\", since = \"1.15.0\")]\n+impl<'a, K: 'a, V: 'a> fmt::Debug for ValuesMut<'a, K, V> {\n+    default fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        f.pad(\"BTreeMap::ValuesMut { .. }\")\n+    }\n+}\n+\n+#[stable(feature = \"collection_debug\", since = \"1.15.0\")]\n+impl<'a, K: 'a + fmt::Debug, V: 'a + fmt::Debug> fmt::Debug for ValuesMut<'a, K, V> {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        f.pad(&format!(\"BTreeMap::ValuesMut({:?})\", self.inner))\n+    }\n+}\n+\n /// An iterator over a sub-range of BTreeMap's entries.\n pub struct Range<'a, K: 'a, V: 'a> {\n     front: Handle<NodeRef<marker::Immut<'a>, K, V, marker::Leaf>, marker::Edge>,\n     back: Handle<NodeRef<marker::Immut<'a>, K, V, marker::Leaf>, marker::Edge>,\n }\n \n+#[stable(feature = \"collection_debug\", since = \"1.15.0\")]\n+impl<'a, K: 'a, V: 'a> fmt::Debug for Range<'a, K, V> {\n+    default fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        f.pad(\"BTreeMap::Range { .. }\")\n+    }\n+}\n+\n+#[stable(feature = \"collection_debug\", since = \"1.15.0\")]\n+impl<'a, K: 'a + fmt::Debug, V: 'a + fmt::Debug> fmt::Debug for Range<'a, K, V> {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        f.debug_list().entries(self.clone()).finish()\n+    }\n+}\n+\n /// A mutable iterator over a sub-range of BTreeMap's entries.\n pub struct RangeMut<'a, K: 'a, V: 'a> {\n     front: Handle<NodeRef<marker::Mut<'a>, K, V, marker::Leaf>, marker::Edge>,\n@@ -318,6 +420,24 @@ pub struct RangeMut<'a, K: 'a, V: 'a> {\n     _marker: PhantomData<&'a mut (K, V)>,\n }\n \n+#[stable(feature = \"collection_debug\", since = \"1.15.0\")]\n+impl<'a, K: 'a, V: 'a> fmt::Debug for RangeMut<'a, K, V> {\n+    default fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        f.pad(\"BTreeMap::RangeMut { .. }\")\n+    }\n+}\n+\n+#[stable(feature = \"collection_debug\", since = \"1.15.0\")]\n+impl<'a, K: 'a + fmt::Debug, V: 'a + fmt::Debug> fmt::Debug for RangeMut<'a, K, V> {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        let range = Range {\n+            front: self.front.reborrow(),\n+            back: self.back.reborrow(),\n+        };\n+        f.debug_list().entries(range).finish()\n+    }\n+}\n+\n /// A view into a single entry in a map, which may either be vacant or occupied.\n /// This enum is constructed from the [`entry`] method on [`BTreeMap`].\n ///"}, {"sha": "d9effde72042bd3bc1b0a6f41872735e070bde2d", "filename": "src/libcollections/btree/set.rs", "status": "modified", "additions": 108, "deletions": 0, "changes": 108, "blob_url": "https://github.com/rust-lang/rust/blob/61fbdbba41163b6fd327b166338a8feb89133444/src%2Flibcollections%2Fbtree%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61fbdbba41163b6fd327b166338a8feb89133444/src%2Flibcollections%2Fbtree%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbtree%2Fset.rs?ref=61fbdbba41163b6fd327b166338a8feb89133444", "patch": "@@ -85,6 +85,22 @@ pub struct Iter<'a, T: 'a> {\n     iter: Keys<'a, T, ()>,\n }\n \n+#[stable(feature = \"collection_debug\", since = \"1.15.0\")]\n+impl<'a, T: 'a> fmt::Debug for Iter<'a, T> {\n+    default fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        f.pad(\"BTreeSet::Iter { .. }\")\n+    }\n+}\n+\n+#[stable(feature = \"collection_debug\", since = \"1.15.0\")]\n+impl<'a, T: 'a + fmt::Debug> fmt::Debug for Iter<'a, T> {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        f.debug_tuple(\"BTreeSet::Iter\")\n+         .field(&self.iter.clone())\n+         .finish()\n+    }\n+}\n+\n /// An owning iterator over a `BTreeSet`'s items.\n ///\n /// This structure is created by the `into_iter` method on [`BTreeSet`]\n@@ -96,6 +112,20 @@ pub struct IntoIter<T> {\n     iter: ::btree_map::IntoIter<T, ()>,\n }\n \n+#[stable(feature = \"collection_debug\", since = \"1.15.0\")]\n+impl<T> fmt::Debug for IntoIter<T> {\n+    default fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        f.pad(\"BTreeSet::IntoIter { .. }\")\n+    }\n+}\n+\n+#[stable(feature = \"collection_debug\", since = \"1.15.0\")]\n+impl<T: fmt::Debug> fmt::Debug for IntoIter<T> {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        f.pad(&format!(\"BTreeSet::IntoIter({:?})\", self.iter))\n+    }\n+}\n+\n /// An iterator over a sub-range of `BTreeSet`'s items.\n ///\n /// This structure is created by the [`range`] method on [`BTreeSet`].\n@@ -106,6 +136,20 @@ pub struct Range<'a, T: 'a> {\n     iter: ::btree_map::Range<'a, T, ()>,\n }\n \n+#[stable(feature = \"collection_debug\", since = \"1.15.0\")]\n+impl<'a, T: 'a> fmt::Debug for Range<'a, T> {\n+    default fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        f.pad(\"BTreeSet::Range { .. }\")\n+    }\n+}\n+\n+#[stable(feature = \"collection_debug\", since = \"1.15.0\")]\n+impl<'a, T: 'a + fmt::Debug> fmt::Debug for Range<'a, T> {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        f.pad(&format!(\"BTreeSet::Range({:?})\", self.iter))\n+    }\n+}\n+\n /// A lazy iterator producing elements in the set difference (in-order).\n ///\n /// This structure is created by the [`difference`] method on [`BTreeSet`].\n@@ -118,6 +162,22 @@ pub struct Difference<'a, T: 'a> {\n     b: Peekable<Iter<'a, T>>,\n }\n \n+#[stable(feature = \"collection_debug\", since = \"1.15.0\")]\n+impl<'a, T: 'a> fmt::Debug for Difference<'a, T> {\n+    default fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        f.pad(\"BTreeSet::Difference { .. }\")\n+    }\n+}\n+\n+#[stable(feature = \"collection_debug\", since = \"1.15.0\")]\n+impl<'a, T: 'a + fmt::Debug> fmt::Debug for Difference<'a, T> {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        f.debug_tuple(\"BTreeSet::Difference\")\n+         .field(&self.clone())\n+         .finish()\n+    }\n+}\n+\n /// A lazy iterator producing elements in the set symmetric difference (in-order).\n ///\n /// This structure is created by the [`symmetric_difference`] method on\n@@ -131,6 +191,22 @@ pub struct SymmetricDifference<'a, T: 'a> {\n     b: Peekable<Iter<'a, T>>,\n }\n \n+#[stable(feature = \"collection_debug\", since = \"1.15.0\")]\n+impl<'a, T: 'a> fmt::Debug for SymmetricDifference<'a, T> {\n+    default fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        f.pad(\"BTreeSet::SymmetricDifference { .. }\")\n+    }\n+}\n+\n+#[stable(feature = \"collection_debug\", since = \"1.15.0\")]\n+impl<'a, T: 'a + fmt::Debug> fmt::Debug for SymmetricDifference<'a, T> {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        f.debug_tuple(\"BTreeSet::SymmetricDifference\")\n+         .field(&self.clone())\n+         .finish()\n+    }\n+}\n+\n /// A lazy iterator producing elements in the set intersection (in-order).\n ///\n /// This structure is created by the [`intersection`] method on [`BTreeSet`].\n@@ -143,6 +219,22 @@ pub struct Intersection<'a, T: 'a> {\n     b: Peekable<Iter<'a, T>>,\n }\n \n+#[stable(feature = \"collection_debug\", since = \"1.15.0\")]\n+impl<'a, T: 'a> fmt::Debug for Intersection<'a, T> {\n+    default fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        f.pad(\"BTreeSet::Intersection { .. }\")\n+    }\n+}\n+\n+#[stable(feature = \"collection_debug\", since = \"1.15.0\")]\n+impl<'a, T: 'a + fmt::Debug> fmt::Debug for Intersection<'a, T> {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        f.debug_tuple(\"BTreeSet::Intersection\")\n+         .field(&self.clone())\n+         .finish()\n+    }\n+}\n+\n /// A lazy iterator producing elements in the set union (in-order).\n ///\n /// This structure is created by the [`union`] method on [`BTreeSet`].\n@@ -155,6 +247,22 @@ pub struct Union<'a, T: 'a> {\n     b: Peekable<Iter<'a, T>>,\n }\n \n+#[stable(feature = \"collection_debug\", since = \"1.15.0\")]\n+impl<'a, T: 'a> fmt::Debug for Union<'a, T> {\n+    default fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        f.pad(\"BTreeSet::Union { .. }\")\n+    }\n+}\n+\n+#[stable(feature = \"collection_debug\", since = \"1.15.0\")]\n+impl<'a, T: 'a + fmt::Debug> fmt::Debug for Union<'a, T> {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        f.debug_tuple(\"BTreeSet::Union\")\n+         .field(&self.clone())\n+         .finish()\n+    }\n+}\n+\n impl<T: Ord> BTreeSet<T> {\n     /// Makes a new `BTreeSet` with a reasonable choice of B.\n     ///"}, {"sha": "3e739fa4f957bbf1ea627391081083851b940c9c", "filename": "src/libcollections/enum_set.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/61fbdbba41163b6fd327b166338a8feb89133444/src%2Flibcollections%2Fenum_set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61fbdbba41163b6fd327b166338a8feb89133444/src%2Flibcollections%2Fenum_set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fenum_set.rs?ref=61fbdbba41163b6fd327b166338a8feb89133444", "patch": "@@ -220,6 +220,22 @@ pub struct Iter<E> {\n     marker: marker::PhantomData<E>,\n }\n \n+#[stable(feature = \"collection_debug\", since = \"1.15.0\")]\n+impl<E> fmt::Debug for Iter<E> {\n+    default fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        f.pad(\"EnumSet::Iter { .. }\")\n+    }\n+}\n+\n+#[stable(feature = \"collection_debug\", since = \"1.15.0\")]\n+impl<E: fmt::Debug> fmt::Debug for Iter<E> {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        f.debug_tuple(\"EnumSet::Iter\")\n+         .field(&self.clone())\n+         .finish()\n+    }\n+}\n+\n // FIXME(#19839) Remove in favor of `#[derive(Clone)]`\n impl<E> Clone for Iter<E> {\n     fn clone(&self) -> Iter<E> {"}, {"sha": "92d0d4d3c54937659c724892490d722fce35194c", "filename": "src/libcollections/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/61fbdbba41163b6fd327b166338a8feb89133444/src%2Flibcollections%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61fbdbba41163b6fd327b166338a8feb89133444/src%2Flibcollections%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Flib.rs?ref=61fbdbba41163b6fd327b166338a8feb89133444", "patch": "@@ -28,6 +28,7 @@\n \n #![cfg_attr(test, allow(deprecated))] // rand\n #![deny(warnings)]\n+#![deny(missing_debug_implementations)]\n \n #![feature(alloc)]\n #![feature(allow_internal_unstable)]"}, {"sha": "112749d5b05881e6d3d9c94b58dd83a033784442", "filename": "src/libcollections/linked_list.rs", "status": "modified", "additions": 80, "deletions": 0, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/61fbdbba41163b6fd327b166338a8feb89133444/src%2Flibcollections%2Flinked_list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61fbdbba41163b6fd327b166338a8feb89133444/src%2Flibcollections%2Flinked_list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Flinked_list.rs?ref=61fbdbba41163b6fd327b166338a8feb89133444", "patch": "@@ -65,6 +65,22 @@ pub struct Iter<'a, T: 'a> {\n     marker: PhantomData<&'a Node<T>>,\n }\n \n+#[stable(feature = \"collection_debug\", since = \"1.15.0\")]\n+impl<'a, T: 'a> fmt::Debug for Iter<'a, T> {\n+    default fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        f.pad(\"LinkedList::Iter { .. }\")\n+    }\n+}\n+\n+#[stable(feature = \"collection_debug\", since = \"1.15.0\")]\n+impl<'a, T: 'a + fmt::Debug> fmt::Debug for Iter<'a, T> {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        f.debug_tuple(\"LinkedList::Iter\")\n+         .field(&self.clone())\n+         .finish()\n+    }\n+}\n+\n // FIXME #19839: deriving is too aggressive on the bounds (T doesn't need to be Clone).\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, T> Clone for Iter<'a, T> {\n@@ -82,13 +98,45 @@ pub struct IterMut<'a, T: 'a> {\n     len: usize,\n }\n \n+#[stable(feature = \"collection_debug\", since = \"1.15.0\")]\n+impl<'a, T: 'a> fmt::Debug for IterMut<'a, T> {\n+    default fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        f.pad(\"LinkedList::IterMut { .. }\")\n+    }\n+}\n+\n+#[stable(feature = \"collection_debug\", since = \"1.15.0\")]\n+impl<'a, T: 'a + fmt::Debug> fmt::Debug for IterMut<'a, T> {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        f.debug_tuple(\"LinkedList::IterMut\")\n+         .field(self.clone())\n+         .finish()\n+    }\n+}\n+\n /// An iterator over the elements of a `LinkedList`.\n #[derive(Clone)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct IntoIter<T> {\n     list: LinkedList<T>,\n }\n \n+#[stable(feature = \"collection_debug\", since = \"1.15.0\")]\n+impl<T> fmt::Debug for IntoIter<T> {\n+    default fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        f.pad(\"LinkedList::IntoIter { .. }\")\n+    }\n+}\n+\n+#[stable(feature = \"collection_debug\", since = \"1.15.0\")]\n+impl<T: fmt::Debug> fmt::Debug for IntoIter<T> {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        f.debug_tuple(\"LinkedList::IntoIter\")\n+         .field(self.clone())\n+         .finish()\n+    }\n+}\n+\n impl<T> Node<T> {\n     fn new(element: T) -> Self {\n         Node {\n@@ -1077,6 +1125,22 @@ pub struct FrontPlace<'a, T: 'a> {\n     node: IntermediateBox<Node<T>>,\n }\n \n+#[stable(feature = \"collection_debug\", since = \"1.15.0\")]\n+impl<'a, T: 'a> fmt::Debug for FrontPlace<'a, T> {\n+    default fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        f.pad(\"LinkedList::FrontPlace { .. }\")\n+    }\n+}\n+\n+#[stable(feature = \"collection_debug\", since = \"1.15.0\")]\n+impl<'a, T: 'a + fmt::Debug> fmt::Debug for FrontPlace<'a, T> {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        f.debug_tuple(\"LinkedList::FrontPlace\")\n+         .field(self.clone())\n+         .finish()\n+    }\n+}\n+\n #[unstable(feature = \"collection_placement\",\n            reason = \"placement protocol is subject to change\",\n            issue = \"30172\")]\n@@ -1121,6 +1185,22 @@ pub struct BackPlace<'a, T: 'a> {\n     node: IntermediateBox<Node<T>>,\n }\n \n+#[stable(feature = \"collection_debug\", since = \"1.15.0\")]\n+impl<'a, T: 'a> fmt::Debug for BackPlace<'a, T> {\n+    default fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        f.pad(\"LinkedList::BackPlace { .. }\")\n+    }\n+}\n+\n+#[stable(feature = \"collection_debug\", since = \"1.15.0\")]\n+impl<'a, T: 'a + fmt::Debug> fmt::Debug for BackPlace<'a, T> {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        f.debug_tuple(\"LinkedList::BackPlace\")\n+         .field(self.clone())\n+         .finish()\n+    }\n+}\n+\n #[unstable(feature = \"collection_placement\",\n            reason = \"placement protocol is subject to change\",\n            issue = \"30172\")]"}, {"sha": "8dbddbb41d7bce198b8361c0d28c934ae38638e9", "filename": "src/libcollections/str.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/61fbdbba41163b6fd327b166338a8feb89133444/src%2Flibcollections%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61fbdbba41163b6fd327b166338a8feb89133444/src%2Flibcollections%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstr.rs?ref=61fbdbba41163b6fd327b166338a8feb89133444", "patch": "@@ -19,6 +19,7 @@\n // It's cleaner to just turn off the unused_imports warning than to fix them.\n #![allow(unused_imports)]\n \n+use core::fmt;\n use core::str as core_str;\n use core::str::pattern::Pattern;\n use core::str::pattern::{Searcher, ReverseSearcher, DoubleEndedSearcher};\n@@ -122,6 +123,13 @@ pub struct EncodeUtf16<'a> {\n     encoder: Utf16Encoder<Chars<'a>>,\n }\n \n+#[stable(feature = \"collection_debug\", since = \"1.15.0\")]\n+impl<'a> fmt::Debug for EncodeUtf16<'a> {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        f.pad(\"EncodeUtf16 { .. }\")\n+    }\n+}\n+\n #[stable(feature = \"encode_utf16\", since = \"1.8.0\")]\n impl<'a> Iterator for EncodeUtf16<'a> {\n     type Item = u16;"}, {"sha": "1a9849f2352a33f4c76031334e00fd5ba35a3140", "filename": "src/libcollections/string.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/61fbdbba41163b6fd327b166338a8feb89133444/src%2Flibcollections%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61fbdbba41163b6fd327b166338a8feb89133444/src%2Flibcollections%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstring.rs?ref=61fbdbba41163b6fd327b166338a8feb89133444", "patch": "@@ -1979,6 +1979,13 @@ pub struct Drain<'a> {\n     iter: Chars<'a>,\n }\n \n+#[stable(feature = \"collection_debug\", since = \"1.15.0\")]\n+impl<'a> fmt::Debug for Drain<'a> {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        f.pad(\"String::Drain { .. }\")\n+    }\n+}\n+\n #[stable(feature = \"drain\", since = \"1.6.0\")]\n unsafe impl<'a> Sync for Drain<'a> {}\n #[stable(feature = \"drain\", since = \"1.6.0\")]"}, {"sha": "4f6212a1709a059d7bd1bd4dae2bcdeaa588c16c", "filename": "src/libcollections/vec.rs", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/61fbdbba41163b6fd327b166338a8feb89133444/src%2Flibcollections%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61fbdbba41163b6fd327b166338a8feb89133444/src%2Flibcollections%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec.rs?ref=61fbdbba41163b6fd327b166338a8feb89133444", "patch": "@@ -2092,6 +2092,22 @@ pub struct Drain<'a, T: 'a> {\n     vec: Shared<Vec<T>>,\n }\n \n+#[stable(feature = \"collection_debug\", since = \"1.15.0\")]\n+impl<'a, T: 'a> fmt::Debug for Drain<'a, T> {\n+    default fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        f.pad(\"Vec::Drain { .. }\")\n+    }\n+}\n+\n+#[stable(feature = \"collection_debug\", since = \"1.15.0\")]\n+impl<'a, T: 'a + fmt::Debug> fmt::Debug for Drain<'a, T> {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        f.debug_tuple(\"Vec::Drain\")\n+         .field(&self.iter.as_slice())\n+         .finish()\n+    }\n+}\n+\n #[stable(feature = \"drain\", since = \"1.6.0\")]\n unsafe impl<'a, T: Sync> Sync for Drain<'a, T> {}\n #[stable(feature = \"drain\", since = \"1.6.0\")]\n@@ -2162,6 +2178,22 @@ pub struct PlaceBack<'a, T: 'a> {\n     vec: &'a mut Vec<T>,\n }\n \n+#[stable(feature = \"collection_debug\", since = \"1.15.0\")]\n+impl<'a, T: 'a> fmt::Debug for PlaceBack<'a, T> {\n+    default fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        f.pad(\"Vec::PlaceBack { .. }\")\n+    }\n+}\n+\n+#[stable(feature = \"collection_debug\", since = \"1.15.0\")]\n+impl<'a, T: 'a + fmt::Debug> fmt::Debug for PlaceBack<'a, T> {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        f.debug_tuple(\"Vec::PlaceBack\")\n+         .field(&self.vec.as_slice())\n+         .finish()\n+    }\n+}\n+\n #[unstable(feature = \"collection_placement\",\n            reason = \"placement protocol is subject to change\",\n            issue = \"30172\")]"}, {"sha": "dfbfb240f4602ff3d27a144b30af1396c707d637", "filename": "src/libcollections/vec_deque.rs", "status": "modified", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/61fbdbba41163b6fd327b166338a8feb89133444/src%2Flibcollections%2Fvec_deque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61fbdbba41163b6fd327b166338a8feb89133444/src%2Flibcollections%2Fvec_deque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec_deque.rs?ref=61fbdbba41163b6fd327b166338a8feb89133444", "patch": "@@ -1866,6 +1866,22 @@ pub struct Iter<'a, T: 'a> {\n     head: usize,\n }\n \n+#[stable(feature = \"collection_debug\", since = \"1.15.0\")]\n+impl<'a, T: 'a> fmt::Debug for Iter<'a, T> {\n+    default fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        f.pad(\"VecDeque::Iter { .. }\")\n+    }\n+}\n+\n+#[stable(feature = \"collection_debug\", since = \"1.15.0\")]\n+impl<'a, T: 'a + fmt::Debug> fmt::Debug for Iter<'a, T> {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        f.debug_tuple(\"VecDeque::Iter\")\n+         .field(&self.clone())\n+         .finish()\n+    }\n+}\n+\n // FIXME(#19839) Remove in favor of `#[derive(Clone)]`\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, T> Clone for Iter<'a, T> {\n@@ -1938,6 +1954,22 @@ pub struct IterMut<'a, T: 'a> {\n     head: usize,\n }\n \n+#[stable(feature = \"collection_debug\", since = \"1.15.0\")]\n+impl<'a, T: 'a> fmt::Debug for IterMut<'a, T> {\n+    default fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        f.pad(\"VecDeque::IterMut { .. }\")\n+    }\n+}\n+\n+#[stable(feature = \"collection_debug\", since = \"1.15.0\")]\n+impl<'a, T: 'a + fmt::Debug> fmt::Debug for IterMut<'a, T> {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        f.debug_tuple(\"VecDeque::IterMut\")\n+         .field(&self.clone())\n+         .finish()\n+    }\n+}\n+\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, T> Iterator for IterMut<'a, T> {\n     type Item = &'a mut T;\n@@ -2004,6 +2036,22 @@ pub struct IntoIter<T> {\n     inner: VecDeque<T>,\n }\n \n+#[stable(feature = \"collection_debug\", since = \"1.15.0\")]\n+impl<T> fmt::Debug for IntoIter<T> {\n+    default fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        f.pad(\"VecDeque::IntoIter { .. }\")\n+    }\n+}\n+\n+#[stable(feature = \"collection_debug\", since = \"1.15.0\")]\n+impl<T: fmt::Debug> fmt::Debug for IntoIter<T> {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        f.debug_tuple(\"VecDeque::IntoIter\")\n+         .field(&self.clone())\n+         .finish()\n+    }\n+}\n+\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T> Iterator for IntoIter<T> {\n     type Item = T;\n@@ -2047,6 +2095,22 @@ pub struct Drain<'a, T: 'a> {\n     deque: Shared<VecDeque<T>>,\n }\n \n+#[stable(feature = \"collection_debug\", since = \"1.15.0\")]\n+impl<'a, T: 'a> fmt::Debug for Drain<'a, T> {\n+    default fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        f.pad(\"VecDeque::Drain { .. }\")\n+    }\n+}\n+\n+#[stable(feature = \"collection_debug\", since = \"1.15.0\")]\n+impl<'a, T: 'a + fmt::Debug> fmt::Debug for Drain<'a, T> {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        f.debug_tuple(\"VecDeque::Drain\")\n+         .field(&self.clone())\n+         .finish()\n+    }\n+}\n+\n #[stable(feature = \"drain\", since = \"1.6.0\")]\n unsafe impl<'a, T: Sync> Sync for Drain<'a, T> {}\n #[stable(feature = \"drain\", since = \"1.6.0\")]"}]}