{"sha": "e357b6bb36828ecf3404fcc382da09216eef0997", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUzNTdiNmJiMzY4MjhlY2YzNDA0ZmNjMzgyZGEwOTIxNmVlZjA5OTc=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-04-10T10:01:03Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-04-10T10:01:03Z"}, "message": "Merge #8384\n\n8384: add is quadratic test r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "498688bb1fcbf6f41665f6f86a0ec8930434c6f5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/498688bb1fcbf6f41665f6f86a0ec8930434c6f5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e357b6bb36828ecf3404fcc382da09216eef0997", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgcXdfCRBK7hj4Ov3rIwAAdHIIAA7gpDTYad5FjfqFAnBMwQMX\nharidu5qDC+AXLwgS6X9iUqORqbE6KjUzDmrt6/Sphwq6b1912zzLmKhZRp5nz+u\n6JyJ5Ks8/uNnTwPdBVwHCKXFO/6NQZv0FTEGyX74eYesG5JSebzc3KoF71GFhxA3\nM9bUWv2F4PN5FdsAzGb+KnUX0onQcoCVwr+i1jLbc9sxSjPNfs1qqPHhKe497Eiy\nsaxtISI0egBOmqnZ1CvZcfk3MqAEZedLCI/YLwhStW9tUVLk+CS2PbzON2vxxKo3\npgtZwapoV6b+1br6zygkeEfGfi073GoVSopzHC/zvgZu2u5zHgaBmg77zC+aOEs=\n=K6fH\n-----END PGP SIGNATURE-----\n", "payload": "tree 498688bb1fcbf6f41665f6f86a0ec8930434c6f5\nparent 00cdbceb9d7afdabc82788a88df88c6eb1035839\nparent e012efca275976b9702e3c47c3919023708680cc\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1618048863 +0000\ncommitter GitHub <noreply@github.com> 1618048863 +0000\n\nMerge #8384\n\n8384: add is quadratic test r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e357b6bb36828ecf3404fcc382da09216eef0997", "html_url": "https://github.com/rust-lang/rust/commit/e357b6bb36828ecf3404fcc382da09216eef0997", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e357b6bb36828ecf3404fcc382da09216eef0997/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "00cdbceb9d7afdabc82788a88df88c6eb1035839", "url": "https://api.github.com/repos/rust-lang/rust/commits/00cdbceb9d7afdabc82788a88df88c6eb1035839", "html_url": "https://github.com/rust-lang/rust/commit/00cdbceb9d7afdabc82788a88df88c6eb1035839"}, {"sha": "e012efca275976b9702e3c47c3919023708680cc", "url": "https://api.github.com/repos/rust-lang/rust/commits/e012efca275976b9702e3c47c3919023708680cc", "html_url": "https://github.com/rust-lang/rust/commit/e012efca275976b9702e3c47c3919023708680cc"}], "stats": {"total": 101, "additions": 100, "deletions": 1}, "files": [{"sha": "0f68b234c7850e2dccadeb8f0e780a718bcfb5a9", "filename": ".github/workflows/ci.yaml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e357b6bb36828ecf3404fcc382da09216eef0997/.github%2Fworkflows%2Fci.yaml", "raw_url": "https://github.com/rust-lang/rust/raw/e357b6bb36828ecf3404fcc382da09216eef0997/.github%2Fworkflows%2Fci.yaml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.github%2Fworkflows%2Fci.yaml?ref=e357b6bb36828ecf3404fcc382da09216eef0997", "patch": "@@ -76,7 +76,7 @@ jobs:\n       run: cargo test --no-run --locked\n \n     - name: Test\n-      run: cargo test\n+      run: cargo test -- --nocapture\n \n     - name: Prepare cache\n       run: cargo xtask pre-cache"}, {"sha": "de2d22ac703270369cd2dce5c612e7f95a183625", "filename": "crates/ide/src/syntax_highlighting/tests.rs", "status": "modified", "additions": 96, "deletions": 0, "changes": 96, "blob_url": "https://github.com/rust-lang/rust/blob/e357b6bb36828ecf3404fcc382da09216eef0997/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e357b6bb36828ecf3404fcc382da09216eef0997/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs?ref=e357b6bb36828ecf3404fcc382da09216eef0997", "patch": "@@ -1,5 +1,8 @@\n+use std::time::Instant;\n+\n use expect_test::{expect_file, ExpectFile};\n use ide_db::SymbolKind;\n+use stdx::format_to;\n use test_utils::{bench, bench_fixture, skip_slow_tests};\n \n use crate::{fixture, FileRange, HlTag, TextRange};\n@@ -257,6 +260,99 @@ fn benchmark_syntax_highlighting_long_struct() {\n     assert_eq!(hash, 2001);\n }\n \n+#[test]\n+fn syntax_highlighting_not_quadratic() {\n+    if skip_slow_tests() {\n+        return;\n+    }\n+\n+    let mut measures = Vec::new();\n+    for i in 6..=10 {\n+        let n = 1 << i;\n+        let fixture = bench_fixture::big_struct_n(n);\n+        let (analysis, file_id) = fixture::file(&fixture);\n+\n+        let time = Instant::now();\n+\n+        let hash = analysis\n+            .highlight(file_id)\n+            .unwrap()\n+            .iter()\n+            .filter(|it| it.highlight.tag == HlTag::Symbol(SymbolKind::Struct))\n+            .count();\n+        assert!(hash > n as usize);\n+\n+        let elapsed = time.elapsed();\n+        measures.push((n as f64, elapsed.as_millis() as f64))\n+    }\n+\n+    assert_linear(&measures)\n+}\n+\n+/// Checks that a set of measurements looks like a liner function rather than\n+/// like a quadratic function. Algorithm:\n+///\n+/// 1. Linearly scale input to be in [0; 1)\n+/// 2. Using linear regression, compute the best linear function approximating\n+///    the input.\n+/// 3. Compute RMSE and  maximal absolute error.\n+/// 4. Check that errors are within tolerances and that the constant term is not\n+///    too negative.\n+///\n+/// Ideally, we should use a proper \"model selection\" to directly compare\n+/// quadratic and linear models, but that sounds rather complicated:\n+///\n+///     https://stats.stackexchange.com/questions/21844/selecting-best-model-based-on-linear-quadratic-and-cubic-fit-of-data\n+fn assert_linear(xy: &[(f64, f64)]) {\n+    let (mut xs, mut ys): (Vec<_>, Vec<_>) = xy.iter().copied().unzip();\n+    normalize(&mut xs);\n+    normalize(&mut ys);\n+    let xy = xs.iter().copied().zip(ys.iter().copied());\n+\n+    // Linear regression: finding a and b to fit y = a + b*x.\n+\n+    let mean_x = mean(&xs);\n+    let mean_y = mean(&ys);\n+\n+    let b = {\n+        let mut num = 0.0;\n+        let mut denom = 0.0;\n+        for (x, y) in xy.clone() {\n+            num += (x - mean_x) * (y - mean_y);\n+            denom += (x - mean_x).powi(2);\n+        }\n+        num / denom\n+    };\n+\n+    let a = mean_y - b * mean_x;\n+\n+    let mut plot = format!(\"y_pred = {:.3} + {:.3} * x\\n\\nx     y     y_pred\\n\", a, b);\n+\n+    let mut se = 0.0;\n+    let mut max_error = 0.0f64;\n+    for (x, y) in xy {\n+        let y_pred = a + b * x;\n+        se += (y - y_pred).powi(2);\n+        max_error = max_error.max((y_pred - y).abs());\n+\n+        format_to!(plot, \"{:.3} {:.3} {:.3}\\n\", x, y, y_pred);\n+    }\n+\n+    let rmse = (se / xs.len() as f64).sqrt();\n+    format_to!(plot, \"\\nrmse = {:.3} max error = {:.3}\", rmse, max_error);\n+\n+    assert!(rmse < 0.05 && max_error < 0.1 && a > -0.1, \"\\nLooks quadratic\\n{}\", plot);\n+\n+    fn normalize(xs: &mut Vec<f64>) {\n+        let max = xs.iter().copied().max_by(|a, b| a.partial_cmp(b).unwrap()).unwrap();\n+        xs.iter_mut().for_each(|it| *it /= max);\n+    }\n+\n+    fn mean(xs: &[f64]) -> f64 {\n+        xs.iter().copied().sum::<f64>() / (xs.len() as f64)\n+    }\n+}\n+\n #[test]\n fn benchmark_syntax_highlighting_parser() {\n     if skip_slow_tests() {"}, {"sha": "979156263de1b63fd8e2573db1fda9f184338619", "filename": "crates/test_utils/src/bench_fixture.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e357b6bb36828ecf3404fcc382da09216eef0997/crates%2Ftest_utils%2Fsrc%2Fbench_fixture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e357b6bb36828ecf3404fcc382da09216eef0997/crates%2Ftest_utils%2Fsrc%2Fbench_fixture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Ftest_utils%2Fsrc%2Fbench_fixture.rs?ref=e357b6bb36828ecf3404fcc382da09216eef0997", "patch": "@@ -8,7 +8,10 @@ use crate::project_root;\n \n pub fn big_struct() -> String {\n     let n = 1_000;\n+    big_struct_n(n)\n+}\n \n+pub fn big_struct_n(n: u32) -> String {\n     let mut buf = \"pub struct RegisterBlock {\".to_string();\n     for i in 0..n {\n         format_to!(buf, \"  /// Doc comment for {}.\\n\", i);"}]}