{"sha": "89c20b78d68345040d68f0b475276687d10fdc92", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg5YzIwYjc4ZDY4MzQ1MDQwZDY4ZjBiNDc1Mjc2Njg3ZDEwZmRjOTI=", "commit": {"author": {"name": "ljedrz", "email": "ljedrz@gmail.com", "date": "2018-10-17T09:36:19Z"}, "committer": {"name": "ljedrz", "email": "ljedrz@gmail.com", "date": "2018-10-17T17:57:03Z"}, "message": "resolve: improve/remove allocations", "tree": {"sha": "2b975959047d7885a7916379eaffb661cf8a3fa1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2b975959047d7885a7916379eaffb661cf8a3fa1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/89c20b78d68345040d68f0b475276687d10fdc92", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/89c20b78d68345040d68f0b475276687d10fdc92", "html_url": "https://github.com/rust-lang/rust/commit/89c20b78d68345040d68f0b475276687d10fdc92", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/89c20b78d68345040d68f0b475276687d10fdc92/comments", "author": {"login": "ljedrz", "id": 3750347, "node_id": "MDQ6VXNlcjM3NTAzNDc=", "avatar_url": "https://avatars.githubusercontent.com/u/3750347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ljedrz", "html_url": "https://github.com/ljedrz", "followers_url": "https://api.github.com/users/ljedrz/followers", "following_url": "https://api.github.com/users/ljedrz/following{/other_user}", "gists_url": "https://api.github.com/users/ljedrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/ljedrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ljedrz/subscriptions", "organizations_url": "https://api.github.com/users/ljedrz/orgs", "repos_url": "https://api.github.com/users/ljedrz/repos", "events_url": "https://api.github.com/users/ljedrz/events{/privacy}", "received_events_url": "https://api.github.com/users/ljedrz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ljedrz", "id": 3750347, "node_id": "MDQ6VXNlcjM3NTAzNDc=", "avatar_url": "https://avatars.githubusercontent.com/u/3750347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ljedrz", "html_url": "https://github.com/ljedrz", "followers_url": "https://api.github.com/users/ljedrz/followers", "following_url": "https://api.github.com/users/ljedrz/following{/other_user}", "gists_url": "https://api.github.com/users/ljedrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/ljedrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ljedrz/subscriptions", "organizations_url": "https://api.github.com/users/ljedrz/orgs", "repos_url": "https://api.github.com/users/ljedrz/repos", "events_url": "https://api.github.com/users/ljedrz/events{/privacy}", "received_events_url": "https://api.github.com/users/ljedrz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "da40916bc20880785daec954ee20ee18464ecb7a", "url": "https://api.github.com/repos/rust-lang/rust/commits/da40916bc20880785daec954ee20ee18464ecb7a", "html_url": "https://github.com/rust-lang/rust/commit/da40916bc20880785daec954ee20ee18464ecb7a"}], "stats": {"total": 27, "additions": 8, "deletions": 19}, "files": [{"sha": "131b69429c6233f8afbcdb921d779ce2fa510c0c", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 5, "deletions": 15, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/89c20b78d68345040d68f0b475276687d10fdc92/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c20b78d68345040d68f0b475276687d10fdc92/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=89c20b78d68345040d68f0b475276687d10fdc92", "patch": "@@ -3021,10 +3021,7 @@ impl<'a, 'crateloader: 'a> Resolver<'a, 'crateloader> {\n             let mut err = this.session.struct_span_err_with_code(base_span, &base_msg, code);\n \n             // Emit help message for fake-self from other languages like `this`(javascript)\n-            let fake_self: Vec<Ident> = [\"this\", \"my\"].iter().map(\n-                |s| Ident::from_str(*s)\n-            ).collect();\n-            if fake_self.contains(&item_str)\n+            if [\"this\", \"my\"].contains(&&*item_str.as_str())\n                 && this.self_value_is_available(path[0].span, span) {\n                 err.span_suggestion_with_applicability(\n                     span,\n@@ -4377,10 +4374,9 @@ impl<'a, 'crateloader: 'a> Resolver<'a, 'crateloader> {\n         where FilterFn: Fn(Def) -> bool\n     {\n         let mut candidates = Vec::new();\n-        let mut worklist = Vec::new();\n         let mut seen_modules = FxHashSet();\n         let not_local_module = crate_name != keywords::Crate.ident();\n-        worklist.push((start_module, Vec::<ast::PathSegment>::new(), not_local_module));\n+        let mut worklist = vec![(start_module, Vec::<ast::PathSegment>::new(), not_local_module)];\n \n         while let Some((in_module,\n                         path_segments,\n@@ -4467,13 +4463,8 @@ impl<'a, 'crateloader: 'a> Resolver<'a, 'crateloader> {\n                                           -> Vec<ImportSuggestion>\n         where FilterFn: Fn(Def) -> bool\n     {\n-        let mut suggestions = vec![];\n-\n-        suggestions.extend(\n-            self.lookup_import_candidates_from_module(\n-                lookup_name, namespace, self.graph_root, keywords::Crate.ident(), &filter_fn\n-            )\n-        );\n+        let mut suggestions = self.lookup_import_candidates_from_module(\n+            lookup_name, namespace, self.graph_root, keywords::Crate.ident(), &filter_fn);\n \n         if self.session.rust_2018() {\n             let extern_prelude_names = self.extern_prelude.clone();\n@@ -4502,9 +4493,8 @@ impl<'a, 'crateloader: 'a> Resolver<'a, 'crateloader> {\n                    -> Option<(Module<'a>, ImportSuggestion)>\n     {\n         let mut result = None;\n-        let mut worklist = Vec::new();\n         let mut seen_modules = FxHashSet();\n-        worklist.push((self.graph_root, Vec::new()));\n+        let mut worklist = vec![(self.graph_root, Vec::new())];\n \n         while let Some((in_module, path_segments)) = worklist.pop() {\n             // abort if the module is already found"}, {"sha": "28284a45bcdd5f03098cf665c25e79013840cb28", "filename": "src/librustc_resolve/macros.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/89c20b78d68345040d68f0b475276687d10fdc92/src%2Flibrustc_resolve%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c20b78d68345040d68f0b475276687d10fdc92/src%2Flibrustc_resolve%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fmacros.rs?ref=89c20b78d68345040d68f0b475276687d10fdc92", "patch": "@@ -203,9 +203,7 @@ impl<'a, 'crateloader: 'a> base::Resolver for Resolver<'a, 'crateloader> {\n         self.current_module = invocation.module.get();\n         self.current_module.unresolved_invocations.borrow_mut().remove(&mark);\n         self.current_module.unresolved_invocations.borrow_mut().extend(derives);\n-        for &derive in derives {\n-            self.invocations.insert(derive, invocation);\n-        }\n+        self.invocations.extend(derives.iter().map(|&derive| (derive, invocation)));\n         let mut visitor = BuildReducedGraphVisitor {\n             resolver: self,\n             current_legacy_scope: invocation.parent_legacy_scope.get(),\n@@ -277,11 +275,12 @@ impl<'a, 'crateloader: 'a> base::Resolver for Resolver<'a, 'crateloader> {\n                     if traits.is_empty() {\n                         attrs.remove(i);\n                     } else {\n-                        let mut tokens = Vec::new();\n+                        let mut tokens = Vec::with_capacity(traits.len() - 1);\n                         for (j, path) in traits.iter().enumerate() {\n                             if j > 0 {\n                                 tokens.push(TokenTree::Token(attrs[i].span, Token::Comma).into());\n                             }\n+                            tokens.reserve((path.segments.len() * 2).saturating_sub(1));\n                             for (k, segment) in path.segments.iter().enumerate() {\n                                 if k > 0 {\n                                     tokens.push(TokenTree::Token(path.span, Token::ModSep).into());"}]}