{"sha": "bdb72e7b5ac304c918710ec5c968eaece7e6b57c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJkYjcyZTdiNWFjMzA0YzkxODcxMGVjNWM5NjhlYWVjZTdlNmI1N2M=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2020-02-08T16:27:49Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2020-02-08T16:27:49Z"}, "message": "rustc_codegen_ssa: remove unnecessary source_locations_enabled.", "tree": {"sha": "166bf4e3f77a92a874a654168e794d283ef02323", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/166bf4e3f77a92a874a654168e794d283ef02323"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bdb72e7b5ac304c918710ec5c968eaece7e6b57c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bdb72e7b5ac304c918710ec5c968eaece7e6b57c", "html_url": "https://github.com/rust-lang/rust/commit/bdb72e7b5ac304c918710ec5c968eaece7e6b57c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bdb72e7b5ac304c918710ec5c968eaece7e6b57c/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1385fc4c40cb96eca5f3df2c3043425889073646", "url": "https://api.github.com/repos/rust-lang/rust/commits/1385fc4c40cb96eca5f3df2c3043425889073646", "html_url": "https://github.com/rust-lang/rust/commit/1385fc4c40cb96eca5f3df2c3043425889073646"}], "stats": {"total": 65, "additions": 13, "deletions": 52}, "files": [{"sha": "c1a7bb50878243fb6d2862263ea94c5cf2deb1ab", "filename": "src/librustc_codegen_llvm/debuginfo/mod.rs", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/bdb72e7b5ac304c918710ec5c968eaece7e6b57c/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdb72e7b5ac304c918710ec5c968eaece7e6b57c/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmod.rs?ref=bdb72e7b5ac304c918710ec5c968eaece7e6b57c", "patch": "@@ -51,7 +51,6 @@ mod utils;\n pub use self::create_scope_map::compute_mir_scopes;\n pub use self::metadata::create_global_var_metadata;\n pub use self::metadata::extend_scope_to_file;\n-pub use self::source_loc::set_source_location;\n \n #[allow(non_upper_case_globals)]\n const DW_TAG_auto_variable: c_uint = 0x100;\n@@ -193,13 +192,14 @@ impl DebugInfoBuilderMethods for Builder<'a, 'll, 'tcx> {\n         }\n     }\n \n-    fn set_source_location(\n-        &mut self,\n-        debug_context: &mut FunctionDebugContext<&'ll DIScope>,\n-        scope: &'ll DIScope,\n-        span: Span,\n-    ) {\n-        set_source_location(debug_context, &self, scope, span)\n+    fn set_source_location(&mut self, scope: &'ll DIScope, span: Span) {\n+        debug!(\"set_source_location: {}\", self.sess().source_map().span_to_string(span));\n+\n+        let dbg_loc = self.cx().create_debug_loc(scope, span);\n+\n+        unsafe {\n+            llvm::LLVMSetCurrentDebugLocation(self.llbuilder, dbg_loc);\n+        }\n     }\n     fn insert_reference_to_gdb_debug_scripts_section_global(&mut self) {\n         gdb::insert_reference_to_gdb_debug_scripts_section_global(self)\n@@ -333,7 +333,6 @@ impl DebugInfoMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n         };\n         let mut fn_debug_context = FunctionDebugContext {\n             scopes: IndexVec::from_elem(null_scope, &mir.source_scopes),\n-            source_locations_enabled: false,\n             defining_crate: def_id.krate,\n         };\n "}, {"sha": "1f871c7d207a41acc5dd160c9f9086f45b7bddcd", "filename": "src/librustc_codegen_llvm/debuginfo/source_loc.rs", "status": "modified", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/bdb72e7b5ac304c918710ec5c968eaece7e6b57c/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fsource_loc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdb72e7b5ac304c918710ec5c968eaece7e6b57c/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fsource_loc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fsource_loc.rs?ref=bdb72e7b5ac304c918710ec5c968eaece7e6b57c", "patch": "@@ -1,38 +1,14 @@\n use super::metadata::UNKNOWN_COLUMN_NUMBER;\n use super::utils::{debug_context, span_start};\n-use rustc_codegen_ssa::mir::debuginfo::FunctionDebugContext;\n \n-use crate::builder::Builder;\n use crate::common::CodegenCx;\n use crate::llvm::debuginfo::DIScope;\n use crate::llvm::{self, Value};\n-use log::debug;\n use rustc_codegen_ssa::traits::*;\n \n use libc::c_uint;\n use rustc_span::{Pos, Span};\n \n-/// Sets the current debug location at the beginning of the span.\n-///\n-/// Maps to a call to llvm::LLVMSetCurrentDebugLocation(...).\n-pub fn set_source_location<D>(\n-    debug_context: &FunctionDebugContext<D>,\n-    bx: &Builder<'_, 'll, '_>,\n-    scope: &'ll DIScope,\n-    span: Span,\n-) {\n-    let dbg_loc = if debug_context.source_locations_enabled {\n-        debug!(\"set_source_location: {}\", bx.sess().source_map().span_to_string(span));\n-        Some(bx.cx().create_debug_loc(scope, span))\n-    } else {\n-        None\n-    };\n-\n-    unsafe {\n-        llvm::LLVMSetCurrentDebugLocation(bx.llbuilder, dbg_loc);\n-    }\n-}\n-\n impl CodegenCx<'ll, '_> {\n     pub fn create_debug_loc(&self, scope: &'ll DIScope, span: Span) -> &'ll Value {\n         let loc = span_start(self, span);"}, {"sha": "146b7d3d76c5e1c394bda5ed32d5931229b57b0b", "filename": "src/librustc_codegen_llvm/llvm/ffi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bdb72e7b5ac304c918710ec5c968eaece7e6b57c/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdb72e7b5ac304c918710ec5c968eaece7e6b57c/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs?ref=bdb72e7b5ac304c918710ec5c968eaece7e6b57c", "patch": "@@ -909,7 +909,7 @@ extern \"C\" {\n     pub fn LLVMDisposeBuilder(Builder: &'a mut Builder<'a>);\n \n     // Metadata\n-    pub fn LLVMSetCurrentDebugLocation(Builder: &Builder<'a>, L: Option<&'a Value>);\n+    pub fn LLVMSetCurrentDebugLocation(Builder: &Builder<'a>, L: &'a Value);\n \n     // Terminators\n     pub fn LLVMBuildRetVoid(B: &Builder<'a>) -> &'a Value;"}, {"sha": "976a656a29b19e4d7307e617a7a61352d068701c", "filename": "src/librustc_codegen_ssa/mir/debuginfo.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bdb72e7b5ac304c918710ec5c968eaece7e6b57c/src%2Flibrustc_codegen_ssa%2Fmir%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdb72e7b5ac304c918710ec5c968eaece7e6b57c/src%2Flibrustc_codegen_ssa%2Fmir%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fdebuginfo.rs?ref=bdb72e7b5ac304c918710ec5c968eaece7e6b57c", "patch": "@@ -14,7 +14,6 @@ use super::{FunctionCx, LocalRef};\n \n pub struct FunctionDebugContext<D> {\n     pub scopes: IndexVec<mir::SourceScope, DebugScope<D>>,\n-    pub source_locations_enabled: bool,\n     pub defining_crate: CrateNum,\n }\n \n@@ -53,11 +52,10 @@ impl<D> DebugScope<D> {\n }\n \n impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n-    pub fn set_debug_loc(&mut self, bx: &mut Bx, source_info: mir::SourceInfo) {\n+    pub fn set_debug_loc(&self, bx: &mut Bx, source_info: mir::SourceInfo) {\n         let (scope, span) = self.debug_loc(source_info);\n-        if let Some(debug_context) = &mut self.debug_context {\n-            // FIXME(eddyb) get rid of this unwrap somehow.\n-            bx.set_source_location(debug_context, scope.unwrap(), span);\n+        if let Some(scope) = scope {\n+            bx.set_source_location(scope, span);\n         }\n     }\n "}, {"sha": "64ead19b358697501b8a57fd22b59dcba72eec58", "filename": "src/librustc_codegen_ssa/mir/mod.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/bdb72e7b5ac304c918710ec5c968eaece7e6b57c/src%2Flibrustc_codegen_ssa%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdb72e7b5ac304c918710ec5c968eaece7e6b57c/src%2Flibrustc_codegen_ssa%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fmod.rs?ref=bdb72e7b5ac304c918710ec5c968eaece7e6b57c", "patch": "@@ -230,13 +230,6 @@ pub fn codegen_mir<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>>(\n         bx.br(fx.blocks[mir::START_BLOCK]);\n     }\n \n-    // Up until here, IR instructions for this function have explicitly not been annotated with\n-    // source code location, so we don't step into call setup code. From here on, source location\n-    // emitting should be enabled.\n-    if let Some(debug_context) = &mut fx.debug_context {\n-        debug_context.source_locations_enabled = true;\n-    }\n-\n     let rpo = traversal::reverse_postorder(&mir_body);\n     let mut visited = BitSet::new_empty(mir_body.basic_blocks().len());\n "}, {"sha": "3688ae51b391819979ff3350cd66c8855a212e06", "filename": "src/librustc_codegen_ssa/traits/debuginfo.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/bdb72e7b5ac304c918710ec5c968eaece7e6b57c/src%2Flibrustc_codegen_ssa%2Ftraits%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdb72e7b5ac304c918710ec5c968eaece7e6b57c/src%2Flibrustc_codegen_ssa%2Ftraits%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Ftraits%2Fdebuginfo.rs?ref=bdb72e7b5ac304c918710ec5c968eaece7e6b57c", "patch": "@@ -57,12 +57,7 @@ pub trait DebugInfoBuilderMethods: BackendTypes {\n         indirect_offsets: &[Size],\n         span: Span,\n     );\n-    fn set_source_location(\n-        &mut self,\n-        debug_context: &mut FunctionDebugContext<Self::DIScope>,\n-        scope: Self::DIScope,\n-        span: Span,\n-    );\n+    fn set_source_location(&mut self, scope: Self::DIScope, span: Span);\n     fn insert_reference_to_gdb_debug_scripts_section_global(&mut self);\n     fn set_var_name(&mut self, value: Self::Value, name: &str);\n }"}]}