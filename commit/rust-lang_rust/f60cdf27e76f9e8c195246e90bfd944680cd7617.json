{"sha": "f60cdf27e76f9e8c195246e90bfd944680cd7617", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY2MGNkZjI3ZTc2ZjllOGMxOTUyNDZlOTBiZmQ5NDQ2ODBjZDc2MTc=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-06-23T01:19:35Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-06-23T01:57:20Z"}, "message": "Remove 'implements' keyword in favour of :, part of #2301.", "tree": {"sha": "4bd8e42e9958202e1e1a794aff96c20eedc0c715", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4bd8e42e9958202e1e1a794aff96c20eedc0c715"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f60cdf27e76f9e8c195246e90bfd944680cd7617", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f60cdf27e76f9e8c195246e90bfd944680cd7617", "html_url": "https://github.com/rust-lang/rust/commit/f60cdf27e76f9e8c195246e90bfd944680cd7617", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f60cdf27e76f9e8c195246e90bfd944680cd7617/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3ed8561dea681fe15eac4c12010c6ede0840088c", "url": "https://api.github.com/repos/rust-lang/rust/commits/3ed8561dea681fe15eac4c12010c6ede0840088c", "html_url": "https://github.com/rust-lang/rust/commit/3ed8561dea681fe15eac4c12010c6ede0840088c"}], "stats": {"total": 41, "additions": 21, "deletions": 20}, "files": [{"sha": "28fee93fad752c51569e03ead23a2d52e8237756", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f60cdf27e76f9e8c195246e90bfd944680cd7617/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f60cdf27e76f9e8c195246e90bfd944680cd7617/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=f60cdf27e76f9e8c195246e90bfd944680cd7617", "patch": "@@ -1979,7 +1979,7 @@ class parser {\n         let rp = self.parse_region_param();\n         let ty_params = self.parse_ty_params();\n         let class_path = self.ident_to_path_tys(class_name, rp, ty_params);\n-        let ifaces : [@iface_ref] = if self.eat_keyword(\"implements\")\n+        let ifaces : [@iface_ref] = if self.eat(token::COLON)\n             { self.parse_iface_ref_list() }\n         else { [] };\n         self.expect(token::LBRACE);"}, {"sha": "0a166dceb1d21f8ab5a9ca8984b7852b8a43d139", "filename": "src/libsyntax/parse/token.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f60cdf27e76f9e8c195246e90bfd944680cd7617/src%2Flibsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f60cdf27e76f9e8c195246e90bfd944680cd7617/src%2Flibsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Ftoken.rs?ref=f60cdf27e76f9e8c195246e90bfd944680cd7617", "patch": "@@ -251,7 +251,6 @@ fn contextual_keyword_table() -> hashmap<str, ()> {\n     let keys = [\n         \"as\",\n         \"else\",\n-        \"implements\",\n         \"move\",\n         \"of\",\n         \"priv\", \"pub\","}, {"sha": "f632f3bcc210f7605187858c6eaf8a906d1ec923", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f60cdf27e76f9e8c195246e90bfd944680cd7617/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f60cdf27e76f9e8c195246e90bfd944680cd7617/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=f60cdf27e76f9e8c195246e90bfd944680cd7617", "patch": "@@ -527,9 +527,11 @@ fn print_item(s: ps, &&item: @ast::item) {\n           word_nbsp(s, *item.ident);\n           print_region_param(s, rp);\n           print_type_params(s, tps);\n-          word_space(s, \"implements\");\n-          commasep(s, inconsistent, ifaces, {|s, p|\n-                      print_path(s, p.path, false)});\n+          if vec::len(ifaces) != 0u {\n+              word_space(s, \":\");\n+              commasep(s, inconsistent, ifaces, {|s, p|\n+                  print_path(s, p.path, false)});\n+          }\n           bopen(s);\n           hardbreak_if_not_bol(s);\n           maybe_print_comment(s, ctor.span.lo);"}, {"sha": "63b8426ac93c19e81fd0be7f30b7f307d746df8b", "filename": "src/test/auxiliary/cci_class_cast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f60cdf27e76f9e8c195246e90bfd944680cd7617/src%2Ftest%2Fauxiliary%2Fcci_class_cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f60cdf27e76f9e8c195246e90bfd944680cd7617/src%2Ftest%2Fauxiliary%2Fcci_class_cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcci_class_cast.rs?ref=f60cdf27e76f9e8c195246e90bfd944680cd7617", "patch": "@@ -3,7 +3,7 @@ import to_str::to_str;\n \n mod kitty {\n \n-class cat implements to_str {\n+class cat : to_str {\n   priv {\n     let mut meows : uint;\n     fn meow() {"}, {"sha": "e79c021d9f3ef79f39ac163871eda6390f652ec6", "filename": "src/test/compile-fail/class-cast-to-iface.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f60cdf27e76f9e8c195246e90bfd944680cd7617/src%2Ftest%2Fcompile-fail%2Fclass-cast-to-iface.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f60cdf27e76f9e8c195246e90bfd944680cd7617/src%2Ftest%2Fcompile-fail%2Fclass-cast-to-iface.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fclass-cast-to-iface.rs?ref=f60cdf27e76f9e8c195246e90bfd944680cd7617", "patch": "@@ -3,7 +3,7 @@ iface noisy {\n   fn speak();\n }\n \n-class cat implements noisy {\n+class cat : noisy {\n   priv {\n     let mut meows : uint;\n     fn meow() {"}, {"sha": "4e95b986a9ab8421cd8499bbf6c67832d2998233", "filename": "src/test/compile-fail/class-implements-bad-iface.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f60cdf27e76f9e8c195246e90bfd944680cd7617/src%2Ftest%2Fcompile-fail%2Fclass-implements-bad-iface.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f60cdf27e76f9e8c195246e90bfd944680cd7617/src%2Ftest%2Fcompile-fail%2Fclass-implements-bad-iface.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fclass-implements-bad-iface.rs?ref=f60cdf27e76f9e8c195246e90bfd944680cd7617", "patch": "@@ -1,5 +1,5 @@\n // error-pattern:unresolved typename: nonexistent\n-class cat implements nonexistent {\n+class cat : nonexistent {\n   let meows: uint;\n   new(in_x : uint) { self.meows = in_x; }\n }"}, {"sha": "1768b8c4bf04729c46a20bc3adbb7a595b09b5d4", "filename": "src/test/compile-fail/class-implements-int.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f60cdf27e76f9e8c195246e90bfd944680cd7617/src%2Ftest%2Fcompile-fail%2Fclass-implements-int.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f60cdf27e76f9e8c195246e90bfd944680cd7617/src%2Ftest%2Fcompile-fail%2Fclass-implements-int.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fclass-implements-int.rs?ref=f60cdf27e76f9e8c195246e90bfd944680cd7617", "patch": "@@ -1,4 +1,4 @@\n-class cat implements int { //! ERROR can only implement interface types\n+class cat : int { //! ERROR can only implement interface types\n   let meows: uint;\n   new(in_x : uint) { self.meows = in_x; }\n }"}, {"sha": "788baa73c345cc78e6ef3606d547b94493304776", "filename": "src/test/compile-fail/class-method-missing.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f60cdf27e76f9e8c195246e90bfd944680cd7617/src%2Ftest%2Fcompile-fail%2Fclass-method-missing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f60cdf27e76f9e8c195246e90bfd944680cd7617/src%2Ftest%2Fcompile-fail%2Fclass-method-missing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fclass-method-missing.rs?ref=f60cdf27e76f9e8c195246e90bfd944680cd7617", "patch": "@@ -3,7 +3,7 @@ iface animal {\n   fn eat();\n }\n \n-class cat implements animal {\n+class cat : animal {\n   let meows: uint;\n   new(in_x : uint) { self.meows = in_x; }\n }"}, {"sha": "13c0e60c427f488dbc9c8da79b91785bd679dc5e", "filename": "src/test/run-pass/class-cast-to-iface-cross-crate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f60cdf27e76f9e8c195246e90bfd944680cd7617/src%2Ftest%2Frun-pass%2Fclass-cast-to-iface-cross-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f60cdf27e76f9e8c195246e90bfd944680cd7617/src%2Ftest%2Frun-pass%2Fclass-cast-to-iface-cross-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-cast-to-iface-cross-crate.rs?ref=f60cdf27e76f9e8c195246e90bfd944680cd7617", "patch": "@@ -1,7 +1,7 @@\n import to_str::*;\n import to_str::to_str;\n \n-class cat implements to_str {\n+class cat : to_str {\n   priv {\n     let mut meows : uint;\n     fn meow() {"}, {"sha": "e2dc7b732a8ef027751bfca7f34b94cd9831734b", "filename": "src/test/run-pass/class-cast-to-iface-multiple-types.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f60cdf27e76f9e8c195246e90bfd944680cd7617/src%2Ftest%2Frun-pass%2Fclass-cast-to-iface-multiple-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f60cdf27e76f9e8c195246e90bfd944680cd7617/src%2Ftest%2Frun-pass%2Fclass-cast-to-iface-multiple-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-cast-to-iface-multiple-types.rs?ref=f60cdf27e76f9e8c195246e90bfd944680cd7617", "patch": "@@ -2,7 +2,7 @@ iface noisy {\n   fn speak() -> int;\n }\n \n-class dog implements noisy {\n+class dog : noisy {\n   priv {\n     let barks : @mut uint;\n     fn bark() -> int {\n@@ -26,7 +26,7 @@ class dog implements noisy {\n   fn speak() -> int { self.bark() }\n }\n \n-class cat implements noisy {\n+class cat : noisy {\n   priv {\n     let meows : @mut uint;\n     fn meow() -> uint {"}, {"sha": "10222acc45aa71c87cf625de59041e6f8fb7d67b", "filename": "src/test/run-pass/class-cast-to-iface.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f60cdf27e76f9e8c195246e90bfd944680cd7617/src%2Ftest%2Frun-pass%2Fclass-cast-to-iface.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f60cdf27e76f9e8c195246e90bfd944680cd7617/src%2Ftest%2Frun-pass%2Fclass-cast-to-iface.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-cast-to-iface.rs?ref=f60cdf27e76f9e8c195246e90bfd944680cd7617", "patch": "@@ -2,7 +2,7 @@ iface noisy {\n   fn speak();\n }\n \n-class cat implements noisy {\n+class cat : noisy {\n   priv {\n     let mut meows : uint;\n     fn meow() {"}, {"sha": "4da75037421c0502ea2ee68e0ce6de0cf533a431", "filename": "src/test/run-pass/class-iface-bounded-param.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f60cdf27e76f9e8c195246e90bfd944680cd7617/src%2Ftest%2Frun-pass%2Fclass-iface-bounded-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f60cdf27e76f9e8c195246e90bfd944680cd7617/src%2Ftest%2Frun-pass%2Fclass-iface-bounded-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-iface-bounded-param.rs?ref=f60cdf27e76f9e8c195246e90bfd944680cd7617", "patch": "@@ -2,7 +2,7 @@ use std;\n import std::map::{map, hashmap, int_hash};\n \n class keys<K: copy, V: copy, M: copy map<K,V>>\n-    implements iter::base_iter<K> {\n+    : iter::base_iter<K> {\n \n     let map: M;\n "}, {"sha": "dc76b57c2d26484e835b222059d40e321e38a67a", "filename": "src/test/run-pass/class-impl-parameterized-iface.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f60cdf27e76f9e8c195246e90bfd944680cd7617/src%2Ftest%2Frun-pass%2Fclass-impl-parameterized-iface.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f60cdf27e76f9e8c195246e90bfd944680cd7617/src%2Ftest%2Frun-pass%2Fclass-impl-parameterized-iface.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-impl-parameterized-iface.rs?ref=f60cdf27e76f9e8c195246e90bfd944680cd7617", "patch": "@@ -2,7 +2,7 @@\n use std;\n import std::map::*;\n \n-class cat implements map<int, bool> {\n+class cat : map<int, bool> {\n   priv {\n     // Yes, you can have negative meows\n     let mut meows : int;"}, {"sha": "30c4be25c604351d2f8cb5ff0fe7c4f796940ae0", "filename": "src/test/run-pass/class-impl-very-parameterized-iface.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f60cdf27e76f9e8c195246e90bfd944680cd7617/src%2Ftest%2Frun-pass%2Fclass-impl-very-parameterized-iface.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f60cdf27e76f9e8c195246e90bfd944680cd7617/src%2Ftest%2Frun-pass%2Fclass-impl-very-parameterized-iface.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-impl-very-parameterized-iface.rs?ref=f60cdf27e76f9e8c195246e90bfd944680cd7617", "patch": "@@ -7,7 +7,7 @@ enum cat_type { tuxedo, tabby, tortoiseshell }\n // for any int value that's less than the meows field\n \n // ok: T should be in scope when resolving the iface ref for map\n-class cat<T: copy> implements map<int, T> {\n+class cat<T: copy> : map<int, T> {\n   priv {\n     // Yes, you can have negative meows\n     let mut meows : int;"}, {"sha": "5add42fb263c89614d7229544bce0447845a423d", "filename": "src/test/run-pass/class-implement-iface-cross-crate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f60cdf27e76f9e8c195246e90bfd944680cd7617/src%2Ftest%2Frun-pass%2Fclass-implement-iface-cross-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f60cdf27e76f9e8c195246e90bfd944680cd7617/src%2Ftest%2Frun-pass%2Fclass-implement-iface-cross-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-implement-iface-cross-crate.rs?ref=f60cdf27e76f9e8c195246e90bfd944680cd7617", "patch": "@@ -3,7 +3,7 @@\n use cci_class_iface;\n import cci_class_iface::animals::*;\n \n-class cat implements noisy {\n+class cat : noisy {\n   priv {\n     let mut meows : uint;\n     fn meow() {"}, {"sha": "f772ef957d7eee842a4eced98beda64c08cf68b1", "filename": "src/test/run-pass/class-implement-ifaces.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f60cdf27e76f9e8c195246e90bfd944680cd7617/src%2Ftest%2Frun-pass%2Fclass-implement-ifaces.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f60cdf27e76f9e8c195246e90bfd944680cd7617/src%2Ftest%2Frun-pass%2Fclass-implement-ifaces.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-implement-ifaces.rs?ref=f60cdf27e76f9e8c195246e90bfd944680cd7617", "patch": "@@ -2,7 +2,7 @@ iface noisy {\n   fn speak();\n }\n \n-class cat implements noisy {\n+class cat : noisy {\n   priv {\n     let mut meows : uint;\n     fn meow() {"}, {"sha": "fe3f160c1f8184f52ede87251ef9b36fa9ea66d4", "filename": "src/test/run-pass/class-implements-multiple-ifaces.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f60cdf27e76f9e8c195246e90bfd944680cd7617/src%2Ftest%2Frun-pass%2Fclass-implements-multiple-ifaces.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f60cdf27e76f9e8c195246e90bfd944680cd7617/src%2Ftest%2Frun-pass%2Fclass-implements-multiple-ifaces.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-implements-multiple-ifaces.rs?ref=f60cdf27e76f9e8c195246e90bfd944680cd7617", "patch": "@@ -24,7 +24,7 @@ fn vec_includes<T>(xs: [T], x: T) -> bool {\n }\n \n // vtables other than the 1st one don't seem to work\n-class cat implements noisy, scratchy, bitey {\n+class cat : noisy, scratchy, bitey {\n   priv {\n     let meows : @mut uint;\n     let scratched : dvec<furniture>;"}]}