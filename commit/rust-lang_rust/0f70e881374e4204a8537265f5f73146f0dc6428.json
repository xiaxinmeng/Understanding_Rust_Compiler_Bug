{"sha": "0f70e881374e4204a8537265f5f73146f0dc6428", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBmNzBlODgxMzc0ZTQyMDRhODUzNzI2NWY1ZjczMTQ2ZjBkYzY0Mjg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-02-18T22:47:44Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-02-18T22:47:44Z"}, "message": "Auto merge of #6665 - pag4k:unnecessary_wraps_bug_6640, r=camsteffen\n\nFix for issue 6640\n\n*Please write a short comment explaining your change (or \"none\" for internal only changes)*\nchangelog: unnecessary_wraps will now suggest to remove unnecessary wrapped return unit type, like Option<()>\nfixes #6640", "tree": {"sha": "4410e43a879218f841405126398f77f81bec0314", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4410e43a879218f841405126398f77f81bec0314"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0f70e881374e4204a8537265f5f73146f0dc6428", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0f70e881374e4204a8537265f5f73146f0dc6428", "html_url": "https://github.com/rust-lang/rust/commit/0f70e881374e4204a8537265f5f73146f0dc6428", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0f70e881374e4204a8537265f5f73146f0dc6428/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2f815ecd00d1862b94297eb5225a688db8ebf4ad", "url": "https://api.github.com/repos/rust-lang/rust/commits/2f815ecd00d1862b94297eb5225a688db8ebf4ad", "html_url": "https://github.com/rust-lang/rust/commit/2f815ecd00d1862b94297eb5225a688db8ebf4ad"}, {"sha": "a78271b8611d7ab7709976dfb94ae36b668ac42b", "url": "https://api.github.com/repos/rust-lang/rust/commits/a78271b8611d7ab7709976dfb94ae36b668ac42b", "html_url": "https://github.com/rust-lang/rust/commit/a78271b8611d7ab7709976dfb94ae36b668ac42b"}], "stats": {"total": 203, "additions": 158, "deletions": 45}, "files": [{"sha": "607585125a4c37dca29dbd04e92acc631c2ca9b1", "filename": "clippy_lints/src/unnecessary_wraps.rs", "status": "modified", "additions": 55, "deletions": 39, "changes": 94, "blob_url": "https://github.com/rust-lang/rust/blob/0f70e881374e4204a8537265f5f73146f0dc6428/clippy_lints%2Fsrc%2Funnecessary_wraps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f70e881374e4204a8537265f5f73146f0dc6428/clippy_lints%2Fsrc%2Funnecessary_wraps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funnecessary_wraps.rs?ref=0f70e881374e4204a8537265f5f73146f0dc6428", "patch": "@@ -1,13 +1,13 @@\n use crate::utils::{\n-    contains_return, in_macro, is_type_diagnostic_item, match_qpath, paths, return_ty, snippet, span_lint_and_then,\n+    contains_return, in_macro, match_qpath, paths, return_ty, snippet, span_lint_and_then,\n     visitors::find_all_ret_expressions,\n };\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir::intravisit::FnKind;\n use rustc_hir::{Body, ExprKind, FnDecl, HirId, Impl, ItemKind, Node};\n use rustc_lint::{LateContext, LateLintPass};\n-use rustc_middle::ty::subst::GenericArgKind;\n+use rustc_middle::ty;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::symbol::sym;\n use rustc_span::Span;\n@@ -64,6 +64,7 @@ impl<'tcx> LateLintPass<'tcx> for UnnecessaryWraps {\n         span: Span,\n         hir_id: HirId,\n     ) {\n+        // Abort if public function/method or closure.\n         match fn_kind {\n             FnKind::ItemFn(.., visibility, _) | FnKind::Method(.., Some(visibility), _) => {\n                 if visibility.node.is_pub() {\n@@ -74,6 +75,7 @@ impl<'tcx> LateLintPass<'tcx> for UnnecessaryWraps {\n             _ => (),\n         }\n \n+        // Abort if the method is implementing a trait or of it a trait method.\n         if let Some(Node::Item(item)) = cx.tcx.hir().find(cx.tcx.hir().get_parent_node(hir_id)) {\n             if matches!(\n                 item.kind,\n@@ -83,25 +85,44 @@ impl<'tcx> LateLintPass<'tcx> for UnnecessaryWraps {\n             }\n         }\n \n-        let (return_type, path) = if is_type_diagnostic_item(cx, return_ty(cx, hir_id), sym::option_type) {\n-            (\"Option\", &paths::OPTION_SOME)\n-        } else if is_type_diagnostic_item(cx, return_ty(cx, hir_id), sym::result_type) {\n-            (\"Result\", &paths::RESULT_OK)\n+        // Get the wrapper and inner types, if can't, abort.\n+        let (return_type_label, path, inner_type) = if let ty::Adt(adt_def, subst) = return_ty(cx, hir_id).kind() {\n+            if cx.tcx.is_diagnostic_item(sym::option_type, adt_def.did) {\n+                (\"Option\", &paths::OPTION_SOME, subst.type_at(0))\n+            } else if cx.tcx.is_diagnostic_item(sym::result_type, adt_def.did) {\n+                (\"Result\", &paths::RESULT_OK, subst.type_at(0))\n+            } else {\n+                return;\n+            }\n         } else {\n             return;\n         };\n \n+        // Check if all return expression respect the following condition and collect them.\n         let mut suggs = Vec::new();\n         let can_sugg = find_all_ret_expressions(cx, &body.value, |ret_expr| {\n             if_chain! {\n                 if !in_macro(ret_expr.span);\n+                // Check if a function call.\n                 if let ExprKind::Call(ref func, ref args) = ret_expr.kind;\n+                // Get the Path of the function call.\n                 if let ExprKind::Path(ref qpath) = func.kind;\n+                // Check if OPTION_SOME or RESULT_OK, depending on return type.\n                 if match_qpath(qpath, path);\n                 if args.len() == 1;\n+                // Make sure the function argument does not contain a return expression.\n                 if !contains_return(&args[0]);\n                 then {\n-                    suggs.push((ret_expr.span, snippet(cx, args[0].span.source_callsite(), \"..\").to_string()));\n+                    suggs.push(\n+                        (\n+                            ret_expr.span,\n+                            if inner_type.is_unit() {\n+                                \"\".to_string()\n+                            } else {\n+                                snippet(cx, args[0].span.source_callsite(), \"..\").to_string()\n+                            }\n+                        )\n+                    );\n                     true\n                 } else {\n                     false\n@@ -110,39 +131,34 @@ impl<'tcx> LateLintPass<'tcx> for UnnecessaryWraps {\n         });\n \n         if can_sugg && !suggs.is_empty() {\n-            span_lint_and_then(\n-                cx,\n-                UNNECESSARY_WRAPS,\n-                span,\n-                format!(\n-                    \"this function's return value is unnecessarily wrapped by `{}`\",\n-                    return_type\n+            let (lint_msg, return_type_sugg_msg, return_type_sugg, body_sugg_msg) = if inner_type.is_unit() {\n+                (\n+                    \"this function's return value is unnecessary\".to_string(),\n+                    \"remove the return type...\".to_string(),\n+                    snippet(cx, fn_decl.output.span(), \"..\").to_string(),\n+                    \"...and then remove returned values\",\n                 )\n-                .as_str(),\n-                |diag| {\n-                    let inner_ty = return_ty(cx, hir_id)\n-                        .walk()\n-                        .skip(1) // skip `std::option::Option` or `std::result::Result`\n-                        .take(1) // take the first outermost inner type\n-                        .filter_map(|inner| match inner.unpack() {\n-                            GenericArgKind::Type(inner_ty) => Some(inner_ty.to_string()),\n-                            _ => None,\n-                        });\n-                    inner_ty.for_each(|inner_ty| {\n-                        diag.span_suggestion(\n-                            fn_decl.output.span(),\n-                            format!(\"remove `{}` from the return type...\", return_type).as_str(),\n-                            inner_ty,\n-                            Applicability::MaybeIncorrect,\n-                        );\n-                    });\n-                    diag.multipart_suggestion(\n-                        \"...and change the returning expressions\",\n-                        suggs,\n-                        Applicability::MaybeIncorrect,\n-                    );\n-                },\n-            );\n+            } else {\n+                (\n+                    format!(\n+                        \"this function's return value is unnecessarily wrapped by `{}`\",\n+                        return_type_label\n+                    ),\n+                    format!(\"remove `{}` from the return type...\", return_type_label),\n+                    inner_type.to_string(),\n+                    \"...and then change returning expressions\",\n+                )\n+            };\n+\n+            span_lint_and_then(cx, UNNECESSARY_WRAPS, span, lint_msg.as_str(), |diag| {\n+                diag.span_suggestion(\n+                    fn_decl.output.span(),\n+                    return_type_sugg_msg.as_str(),\n+                    return_type_sugg,\n+                    Applicability::MaybeIncorrect,\n+                );\n+                diag.multipart_suggestion(body_sugg_msg, suggs, Applicability::MaybeIncorrect);\n+            });\n         }\n     }\n }"}, {"sha": "a510263e67da19a2256975ffe18767606dffae0c", "filename": "tests/ui/unnecessary_wraps.rs", "status": "modified", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/0f70e881374e4204a8537265f5f73146f0dc6428/tests%2Fui%2Funnecessary_wraps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f70e881374e4204a8537265f5f73146f0dc6428/tests%2Fui%2Funnecessary_wraps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_wraps.rs?ref=0f70e881374e4204a8537265f5f73146f0dc6428", "patch": "@@ -116,8 +116,53 @@ fn issue_6384(s: &str) -> Option<&str> {\n     })\n }\n \n+// should be linted\n+fn issue_6640_1(a: bool, b: bool) -> Option<()> {\n+    if a && b {\n+        return Some(());\n+    }\n+    if a {\n+        Some(());\n+        Some(())\n+    } else {\n+        return Some(());\n+    }\n+}\n+\n+// should be linted\n+fn issue_6640_2(a: bool, b: bool) -> Result<(), i32> {\n+    if a && b {\n+        return Ok(());\n+    }\n+    if a {\n+        Ok(())\n+    } else {\n+        return Ok(());\n+    }\n+}\n+\n+// should not be linted\n+fn issue_6640_3() -> Option<()> {\n+    if true {\n+        Some(())\n+    } else {\n+        None\n+    }\n+}\n+\n+// should not be linted\n+fn issue_6640_4() -> Result<(), ()> {\n+    if true {\n+        Ok(())\n+    } else {\n+        Err(())\n+    }\n+}\n+\n fn main() {\n     // method calls are not linted\n     func1(true, true);\n     func2(true, true);\n+    issue_6640_1(true, true);\n+    issue_6640_2(true, true);\n }"}, {"sha": "9a861c61a4679bd4fc7f46f83dca2a84a895af55", "filename": "tests/ui/unnecessary_wraps.stderr", "status": "modified", "additions": 58, "deletions": 6, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/0f70e881374e4204a8537265f5f73146f0dc6428/tests%2Fui%2Funnecessary_wraps.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0f70e881374e4204a8537265f5f73146f0dc6428/tests%2Fui%2Funnecessary_wraps.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_wraps.stderr?ref=0f70e881374e4204a8537265f5f73146f0dc6428", "patch": "@@ -15,7 +15,7 @@ help: remove `Option` from the return type...\n    |\n LL | fn func1(a: bool, b: bool) -> i32 {\n    |                               ^^^\n-help: ...and change the returning expressions\n+help: ...and then change returning expressions\n    |\n LL |         return 42;\n LL |     }\n@@ -41,7 +41,7 @@ help: remove `Option` from the return type...\n    |\n LL | fn func2(a: bool, b: bool) -> i32 {\n    |                               ^^^\n-help: ...and change the returning expressions\n+help: ...and then change returning expressions\n    |\n LL |         return 10;\n LL |     }\n@@ -63,7 +63,7 @@ help: remove `Option` from the return type...\n    |\n LL | fn func5() -> i32 {\n    |               ^^^\n-help: ...and change the returning expressions\n+help: ...and then change returning expressions\n    |\n LL |     1\n    |\n@@ -80,7 +80,7 @@ help: remove `Result` from the return type...\n    |\n LL | fn func7() -> i32 {\n    |               ^^^\n-help: ...and change the returning expressions\n+help: ...and then change returning expressions\n    |\n LL |     1\n    |\n@@ -97,10 +97,62 @@ help: remove `Option` from the return type...\n    |\n LL |     fn func12() -> i32 {\n    |                    ^^^\n-help: ...and change the returning expressions\n+help: ...and then change returning expressions\n    |\n LL |         1\n    |\n \n-error: aborting due to 5 previous errors\n+error: this function's return value is unnecessary\n+  --> $DIR/unnecessary_wraps.rs:120:1\n+   |\n+LL | / fn issue_6640_1(a: bool, b: bool) -> Option<()> {\n+LL | |     if a && b {\n+LL | |         return Some(());\n+LL | |     }\n+...  |\n+LL | |     }\n+LL | | }\n+   | |_^\n+   |\n+help: remove the return type...\n+   |\n+LL | fn issue_6640_1(a: bool, b: bool) -> Option<()> {\n+   |                                      ^^^^^^^^^^\n+help: ...and then remove returned values\n+   |\n+LL |         return ;\n+LL |     }\n+LL |     if a {\n+LL |         Some(());\n+LL |         \n+LL |     } else {\n+ ...\n+\n+error: this function's return value is unnecessary\n+  --> $DIR/unnecessary_wraps.rs:133:1\n+   |\n+LL | / fn issue_6640_2(a: bool, b: bool) -> Result<(), i32> {\n+LL | |     if a && b {\n+LL | |         return Ok(());\n+LL | |     }\n+...  |\n+LL | |     }\n+LL | | }\n+   | |_^\n+   |\n+help: remove the return type...\n+   |\n+LL | fn issue_6640_2(a: bool, b: bool) -> Result<(), i32> {\n+   |                                      ^^^^^^^^^^^^^^^\n+help: ...and then remove returned values\n+   |\n+LL |         return ;\n+LL |     }\n+LL |     if a {\n+LL |         \n+LL |     } else {\n+LL |         return ;\n+   |\n+\n+error: aborting due to 7 previous errors\n "}]}