{"sha": "4bb15b3797452b87c6ea3189fa60dd52d59a567d", "node_id": "C_kwDOAAsO6NoAKDRiYjE1YjM3OTc0NTJiODdjNmVhMzE4OWZhNjBkZDUyZDU5YTU2N2Q", "commit": {"author": {"name": "Scott McMurray", "email": "scottmcm@users.noreply.github.com", "date": "2022-04-09T23:29:39Z"}, "committer": {"name": "Scott McMurray", "email": "scottmcm@users.noreply.github.com", "date": "2022-05-12T00:16:25Z"}, "message": "Add a debug check for ordering, and check for isize overflow in CTFE", "tree": {"sha": "194fa03722365a41d943b7ace70b38b3631cae0e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/194fa03722365a41d943b7ace70b38b3631cae0e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4bb15b3797452b87c6ea3189fa60dd52d59a567d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4bb15b3797452b87c6ea3189fa60dd52d59a567d", "html_url": "https://github.com/rust-lang/rust/commit/4bb15b3797452b87c6ea3189fa60dd52d59a567d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4bb15b3797452b87c6ea3189fa60dd52d59a567d/comments", "author": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e76b3f3b5b1bdb39d064a34f8c9a601633e749c2", "url": "https://api.github.com/repos/rust-lang/rust/commits/e76b3f3b5b1bdb39d064a34f8c9a601633e749c2", "html_url": "https://github.com/rust-lang/rust/commit/e76b3f3b5b1bdb39d064a34f8c9a601633e749c2"}], "stats": {"total": 17, "additions": 14, "deletions": 3}, "files": [{"sha": "3bb3b3d539323263c13f60a42c66ad226fc7acc5", "filename": "compiler/rustc_const_eval/src/interpret/intrinsics.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/4bb15b3797452b87c6ea3189fa60dd52d59a567d/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bb15b3797452b87c6ea3189fa60dd52d59a567d/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics.rs?ref=4bb15b3797452b87c6ea3189fa60dd52d59a567d", "patch": "@@ -365,10 +365,17 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                         } else {\n                             usize_layout\n                         };\n-                        let a_offset = ImmTy::from_uint(a_offset.bytes(), usize_layout);\n-                        let b_offset = ImmTy::from_uint(b_offset.bytes(), usize_layout);\n-                        let (val, _overflowed, _ty) =\n+\n+                        // The subtraction is always done in `isize` to enforce\n+                        // the \"no more than `isize::MAX` apart\" requirement.\n+                        let a_offset = ImmTy::from_uint(a_offset.bytes(), isize_layout);\n+                        let b_offset = ImmTy::from_uint(b_offset.bytes(), isize_layout);\n+                        let (val, overflowed, _ty) =\n                             self.overflowing_binary_op(BinOp::Sub, &a_offset, &b_offset)?;\n+                        if overflowed {\n+                            throw_ub_format!(\"Pointers were too far apart for {}\", intrinsic_name);\n+                        }\n+\n                         let pointee_layout = self.layout_of(substs.type_at(0))?;\n                         let val = ImmTy::from_scalar(val, ret_layout);\n                         let size = ImmTy::from_int(pointee_layout.size.bytes(), ret_layout);"}, {"sha": "7fcdf21b03cde8403197eecc99bdb89d2b0f8248", "filename": "library/core/src/ptr/const_ptr.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4bb15b3797452b87c6ea3189fa60dd52d59a567d/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bb15b3797452b87c6ea3189fa60dd52d59a567d/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs?ref=4bb15b3797452b87c6ea3189fa60dd52d59a567d", "patch": "@@ -678,6 +678,10 @@ impl<T: ?Sized> *const T {\n     where\n         T: Sized,\n     {\n+        // SAFETY: The comparison has no side-effects, and the intrinsic\n+        // does this check internally in the CTFE implementation.\n+        unsafe { assert_unsafe_precondition!(self >= origin) };\n+\n         let pointee_size = mem::size_of::<T>();\n         assert!(0 < pointee_size && pointee_size <= isize::MAX as usize);\n         // SAFETY: the caller must uphold the safety contract for `ptr_offset_from_unsigned`."}]}