{"sha": "1bfe5f1b0d480307697348b978a117226dedb156", "node_id": "C_kwDOAAsO6NoAKDFiZmU1ZjFiMGQ0ODAzMDc2OTczNDhiOTc4YTExNzIyNmRlZGIxNTY", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-07-06T05:19:43Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-07-10T21:30:26Z"}, "message": "Add a non-`Copy` packed struct to `deriving-all-codegen.rs`.\n\nBecause the generatedd code is different to a `Copy` packed struct.", "tree": {"sha": "c4ec87c059fe7c64fb4bb2ac491c96cd5c2c908f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c4ec87c059fe7c64fb4bb2ac491c96cd5c2c908f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1bfe5f1b0d480307697348b978a117226dedb156", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1bfe5f1b0d480307697348b978a117226dedb156", "html_url": "https://github.com/rust-lang/rust/commit/1bfe5f1b0d480307697348b978a117226dedb156", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1bfe5f1b0d480307697348b978a117226dedb156/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "292de22276467bc786f38fd31b8bc1889f04efb4", "url": "https://api.github.com/repos/rust-lang/rust/commits/292de22276467bc786f38fd31b8bc1889f04efb4", "html_url": "https://github.com/rust-lang/rust/commit/292de22276467bc786f38fd31b8bc1889f04efb4"}], "stats": {"total": 146, "additions": 124, "deletions": 22}, "files": [{"sha": "311b9171c6bd999d46b0acd1882d604ebda63e5f", "filename": "src/test/ui/deriving/deriving-all-codegen.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/1bfe5f1b0d480307697348b978a117226dedb156/src%2Ftest%2Fui%2Fderiving%2Fderiving-all-codegen.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bfe5f1b0d480307697348b978a117226dedb156/src%2Ftest%2Fui%2Fderiving%2Fderiving-all-codegen.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderiving%2Fderiving-all-codegen.rs?ref=1bfe5f1b0d480307697348b978a117226dedb156", "patch": "@@ -38,10 +38,19 @@ struct Big {\n #[derive(Debug, Hash, PartialEq, Eq, PartialOrd, Ord)]\n struct Unsized([u32]);\n \n-// A packed tuple struct.\n+// A packed tuple struct that impls `Copy`.\n #[derive(Clone, Copy, Debug, Default, Hash, PartialEq, Eq, PartialOrd, Ord)]\n #[repr(packed)]\n-struct Packed(u32);\n+struct PackedCopy(u32);\n+\n+// A packed tuple struct that does not impl `Copy`. Note that the alignment of\n+// the field must be 1 for this code to be valid. Otherwise it triggers an\n+// error \"`#[derive]` can't be used on a `#[repr(packed)]` struct that does not\n+// derive Copy (error E0133)\" at MIR building time. This is a weird case and\n+// it's possible that this struct is not supposed to work, but for now it does.\n+#[derive(Clone, Debug, Default, Hash, PartialEq, Eq, PartialOrd, Ord)]\n+#[repr(packed)]\n+struct PackedNonCopy(u8);\n \n // An empty enum.\n #[derive(Clone, Copy, Debug, Hash, PartialEq, Eq, PartialOrd, Ord)]"}, {"sha": "8470f14f5d4c490b403f1662f83b408070ea2619", "filename": "src/test/ui/deriving/deriving-all-codegen.stdout", "status": "modified", "additions": 113, "deletions": 20, "changes": 133, "blob_url": "https://github.com/rust-lang/rust/blob/1bfe5f1b0d480307697348b978a117226dedb156/src%2Ftest%2Fui%2Fderiving%2Fderiving-all-codegen.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/1bfe5f1b0d480307697348b978a117226dedb156/src%2Ftest%2Fui%2Fderiving%2Fderiving-all-codegen.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderiving%2Fderiving-all-codegen.stdout?ref=1bfe5f1b0d480307697348b978a117226dedb156", "patch": "@@ -422,65 +422,67 @@ impl ::core::cmp::Ord for Unsized {\n     }\n }\n \n-// A packed tuple struct.\n+// A packed tuple struct that impls `Copy`.\n #[repr(packed)]\n-struct Packed(u32);\n+struct PackedCopy(u32);\n #[automatically_derived]\n #[allow(unused_qualifications)]\n-impl ::core::clone::Clone for Packed {\n+impl ::core::clone::Clone for PackedCopy {\n     #[inline]\n-    fn clone(&self) -> Packed {\n+    fn clone(&self) -> PackedCopy {\n         let _: ::core::clone::AssertParamIsClone<u32>;\n         *self\n     }\n }\n #[automatically_derived]\n #[allow(unused_qualifications)]\n-impl ::core::marker::Copy for Packed { }\n+impl ::core::marker::Copy for PackedCopy { }\n #[automatically_derived]\n #[allow(unused_qualifications)]\n-impl ::core::fmt::Debug for Packed {\n+impl ::core::fmt::Debug for PackedCopy {\n     fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {\n         let Self(__self_0_0) = *self;\n-        ::core::fmt::Formatter::debug_tuple_field1_finish(f, \"Packed\",\n+        ::core::fmt::Formatter::debug_tuple_field1_finish(f, \"PackedCopy\",\n             &&__self_0_0)\n     }\n }\n #[automatically_derived]\n #[allow(unused_qualifications)]\n-impl ::core::default::Default for Packed {\n+impl ::core::default::Default for PackedCopy {\n     #[inline]\n-    fn default() -> Packed { Packed(::core::default::Default::default()) }\n+    fn default() -> PackedCopy {\n+        PackedCopy(::core::default::Default::default())\n+    }\n }\n #[automatically_derived]\n #[allow(unused_qualifications)]\n-impl ::core::hash::Hash for Packed {\n+impl ::core::hash::Hash for PackedCopy {\n     fn hash<__H: ::core::hash::Hasher>(&self, state: &mut __H) -> () {\n         let Self(__self_0_0) = *self;\n         ::core::hash::Hash::hash(&__self_0_0, state)\n     }\n }\n-impl ::core::marker::StructuralPartialEq for Packed {}\n+impl ::core::marker::StructuralPartialEq for PackedCopy {}\n #[automatically_derived]\n #[allow(unused_qualifications)]\n-impl ::core::cmp::PartialEq for Packed {\n+impl ::core::cmp::PartialEq for PackedCopy {\n     #[inline]\n-    fn eq(&self, other: &Packed) -> bool {\n+    fn eq(&self, other: &PackedCopy) -> bool {\n         let Self(__self_0_0) = *self;\n         let Self(__self_1_0) = *other;\n         __self_0_0 == __self_1_0\n     }\n     #[inline]\n-    fn ne(&self, other: &Packed) -> bool {\n+    fn ne(&self, other: &PackedCopy) -> bool {\n         let Self(__self_0_0) = *self;\n         let Self(__self_1_0) = *other;\n         __self_0_0 != __self_1_0\n     }\n }\n-impl ::core::marker::StructuralEq for Packed {}\n+impl ::core::marker::StructuralEq for PackedCopy {}\n #[automatically_derived]\n #[allow(unused_qualifications)]\n-impl ::core::cmp::Eq for Packed {\n+impl ::core::cmp::Eq for PackedCopy {\n     #[inline]\n     #[doc(hidden)]\n     #[no_coverage]\n@@ -490,9 +492,9 @@ impl ::core::cmp::Eq for Packed {\n }\n #[automatically_derived]\n #[allow(unused_qualifications)]\n-impl ::core::cmp::PartialOrd for Packed {\n+impl ::core::cmp::PartialOrd for PackedCopy {\n     #[inline]\n-    fn partial_cmp(&self, other: &Packed)\n+    fn partial_cmp(&self, other: &PackedCopy)\n         -> ::core::option::Option<::core::cmp::Ordering> {\n         let Self(__self_0_0) = *self;\n         let Self(__self_1_0) = *other;\n@@ -501,15 +503,106 @@ impl ::core::cmp::PartialOrd for Packed {\n }\n #[automatically_derived]\n #[allow(unused_qualifications)]\n-impl ::core::cmp::Ord for Packed {\n+impl ::core::cmp::Ord for PackedCopy {\n     #[inline]\n-    fn cmp(&self, other: &Packed) -> ::core::cmp::Ordering {\n+    fn cmp(&self, other: &PackedCopy) -> ::core::cmp::Ordering {\n         let Self(__self_0_0) = *self;\n         let Self(__self_1_0) = *other;\n         ::core::cmp::Ord::cmp(&__self_0_0, &__self_1_0)\n     }\n }\n \n+// A packed tuple struct that does not impl `Copy`. Note that the alignment of\n+// the field must be 1 for this code to be valid. Otherwise it triggers an\n+// error \"`#[derive]` can't be used on a `#[repr(packed)]` struct that does not\n+// derive Copy (error E0133)\" at MIR building time. This is a weird case and\n+// it's possible that this struct is not supposed to work, but for now it does.\n+#[repr(packed)]\n+struct PackedNonCopy(u8);\n+#[automatically_derived]\n+#[allow(unused_qualifications)]\n+impl ::core::clone::Clone for PackedNonCopy {\n+    #[inline]\n+    fn clone(&self) -> PackedNonCopy {\n+        let Self(ref __self_0_0) = *self;\n+        PackedNonCopy(::core::clone::Clone::clone(&*__self_0_0))\n+    }\n+}\n+#[automatically_derived]\n+#[allow(unused_qualifications)]\n+impl ::core::fmt::Debug for PackedNonCopy {\n+    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {\n+        let Self(ref __self_0_0) = *self;\n+        ::core::fmt::Formatter::debug_tuple_field1_finish(f, \"PackedNonCopy\",\n+            &&*__self_0_0)\n+    }\n+}\n+#[automatically_derived]\n+#[allow(unused_qualifications)]\n+impl ::core::default::Default for PackedNonCopy {\n+    #[inline]\n+    fn default() -> PackedNonCopy {\n+        PackedNonCopy(::core::default::Default::default())\n+    }\n+}\n+#[automatically_derived]\n+#[allow(unused_qualifications)]\n+impl ::core::hash::Hash for PackedNonCopy {\n+    fn hash<__H: ::core::hash::Hasher>(&self, state: &mut __H) -> () {\n+        let Self(ref __self_0_0) = *self;\n+        ::core::hash::Hash::hash(&*__self_0_0, state)\n+    }\n+}\n+impl ::core::marker::StructuralPartialEq for PackedNonCopy {}\n+#[automatically_derived]\n+#[allow(unused_qualifications)]\n+impl ::core::cmp::PartialEq for PackedNonCopy {\n+    #[inline]\n+    fn eq(&self, other: &PackedNonCopy) -> bool {\n+        let Self(ref __self_0_0) = *self;\n+        let Self(ref __self_1_0) = *other;\n+        *__self_0_0 == *__self_1_0\n+    }\n+    #[inline]\n+    fn ne(&self, other: &PackedNonCopy) -> bool {\n+        let Self(ref __self_0_0) = *self;\n+        let Self(ref __self_1_0) = *other;\n+        *__self_0_0 != *__self_1_0\n+    }\n+}\n+impl ::core::marker::StructuralEq for PackedNonCopy {}\n+#[automatically_derived]\n+#[allow(unused_qualifications)]\n+impl ::core::cmp::Eq for PackedNonCopy {\n+    #[inline]\n+    #[doc(hidden)]\n+    #[no_coverage]\n+    fn assert_receiver_is_total_eq(&self) -> () {\n+        let _: ::core::cmp::AssertParamIsEq<u8>;\n+    }\n+}\n+#[automatically_derived]\n+#[allow(unused_qualifications)]\n+impl ::core::cmp::PartialOrd for PackedNonCopy {\n+    #[inline]\n+    fn partial_cmp(&self, other: &PackedNonCopy)\n+        -> ::core::option::Option<::core::cmp::Ordering> {\n+        let Self(ref __self_0_0) = *self;\n+        let Self(ref __self_1_0) = *other;\n+        ::core::cmp::PartialOrd::partial_cmp(&*__self_0_0, &*__self_1_0)\n+    }\n+}\n+#[automatically_derived]\n+#[allow(unused_qualifications)]\n+impl ::core::cmp::Ord for PackedNonCopy {\n+    #[inline]\n+    fn cmp(&self, other: &PackedNonCopy) -> ::core::cmp::Ordering {\n+        let Self(ref __self_0_0) = *self;\n+        let Self(ref __self_1_0) = *other;\n+        ::core::cmp::Ord::cmp(&*__self_0_0, &*__self_1_0)\n+    }\n+}\n+\n // An empty enum.\n enum Enum0 {}\n #[automatically_derived]"}]}