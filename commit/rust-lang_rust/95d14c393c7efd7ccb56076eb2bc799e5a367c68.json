{"sha": "95d14c393c7efd7ccb56076eb2bc799e5a367c68", "node_id": "C_kwDOAAsO6NoAKDk1ZDE0YzM5M2M3ZWZkN2NjYjU2MDc2ZWIyYmM3OTllNWEzNjdjNjg", "commit": {"author": {"name": "Daniel Eades", "email": "danieleades@hotmail.com", "date": "2023-01-10T18:20:12Z"}, "committer": {"name": "Daniel Eades", "email": "danieleades@hotmail.com", "date": "2023-01-10T18:20:12Z"}, "message": "avoid 'cloning' types that implement 'Copy'", "tree": {"sha": "7eec7371967fc999271f6ea9c6c6780b3c54852b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7eec7371967fc999271f6ea9c6c6780b3c54852b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/95d14c393c7efd7ccb56076eb2bc799e5a367c68", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/95d14c393c7efd7ccb56076eb2bc799e5a367c68", "html_url": "https://github.com/rust-lang/rust/commit/95d14c393c7efd7ccb56076eb2bc799e5a367c68", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/95d14c393c7efd7ccb56076eb2bc799e5a367c68/comments", "author": {"login": "danieleades", "id": 33452915, "node_id": "MDQ6VXNlcjMzNDUyOTE1", "avatar_url": "https://avatars.githubusercontent.com/u/33452915?v=4", "gravatar_id": "", "url": "https://api.github.com/users/danieleades", "html_url": "https://github.com/danieleades", "followers_url": "https://api.github.com/users/danieleades/followers", "following_url": "https://api.github.com/users/danieleades/following{/other_user}", "gists_url": "https://api.github.com/users/danieleades/gists{/gist_id}", "starred_url": "https://api.github.com/users/danieleades/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/danieleades/subscriptions", "organizations_url": "https://api.github.com/users/danieleades/orgs", "repos_url": "https://api.github.com/users/danieleades/repos", "events_url": "https://api.github.com/users/danieleades/events{/privacy}", "received_events_url": "https://api.github.com/users/danieleades/received_events", "type": "User", "site_admin": false}, "committer": {"login": "danieleades", "id": 33452915, "node_id": "MDQ6VXNlcjMzNDUyOTE1", "avatar_url": "https://avatars.githubusercontent.com/u/33452915?v=4", "gravatar_id": "", "url": "https://api.github.com/users/danieleades", "html_url": "https://github.com/danieleades", "followers_url": "https://api.github.com/users/danieleades/followers", "following_url": "https://api.github.com/users/danieleades/following{/other_user}", "gists_url": "https://api.github.com/users/danieleades/gists{/gist_id}", "starred_url": "https://api.github.com/users/danieleades/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/danieleades/subscriptions", "organizations_url": "https://api.github.com/users/danieleades/orgs", "repos_url": "https://api.github.com/users/danieleades/repos", "events_url": "https://api.github.com/users/danieleades/events{/privacy}", "received_events_url": "https://api.github.com/users/danieleades/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3987c835f204a064fd28d21b59aecd2c72f5d0d0", "url": "https://api.github.com/repos/rust-lang/rust/commits/3987c835f204a064fd28d21b59aecd2c72f5d0d0", "html_url": "https://github.com/rust-lang/rust/commit/3987c835f204a064fd28d21b59aecd2c72f5d0d0"}], "stats": {"total": 14, "additions": 7, "deletions": 7}, "files": [{"sha": "6a58546982d884747fdc7c1f35fc823b1bff79e9", "filename": "crates/hir-ty/src/lower.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/95d14c393c7efd7ccb56076eb2bc799e5a367c68/crates%2Fhir-ty%2Fsrc%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95d14c393c7efd7ccb56076eb2bc799e5a367c68/crates%2Fhir-ty%2Fsrc%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Flower.rs?ref=95d14c393c7efd7ccb56076eb2bc799e5a367c68", "patch": "@@ -1931,7 +1931,7 @@ pub(crate) fn const_or_path_to_chalk(\n     debruijn: DebruijnIndex,\n ) -> Const {\n     match value {\n-        ConstScalarOrPath::Scalar(s) => intern_const_scalar(s.clone(), expected_ty),\n+        ConstScalarOrPath::Scalar(s) => intern_const_scalar(*s, expected_ty),\n         ConstScalarOrPath::Path(n) => {\n             let path = ModPath::from_segments(PathKind::Plain, Some(n.clone()));\n             path_to_const(db, resolver, &path, mode, args, debruijn)"}, {"sha": "6baf53e35c6b58c94838cea8839049959737157e", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/95d14c393c7efd7ccb56076eb2bc799e5a367c68/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95d14c393c7efd7ccb56076eb2bc799e5a367c68/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=95d14c393c7efd7ccb56076eb2bc799e5a367c68", "patch": "@@ -923,7 +923,7 @@ impl Struct {\n     }\n \n     pub fn repr(self, db: &dyn HirDatabase) -> Option<ReprOptions> {\n-        db.struct_data(self.id).repr.clone()\n+        db.struct_data(self.id).repr\n     }\n \n     pub fn kind(self, db: &dyn HirDatabase) -> StructKind {"}, {"sha": "0fee6dfe4333675039d8c26bfcaa56e566ea2171", "filename": "crates/mbe/src/benchmark.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/95d14c393c7efd7ccb56076eb2bc799e5a367c68/crates%2Fmbe%2Fsrc%2Fbenchmark.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95d14c393c7efd7ccb56076eb2bc799e5a367c68/crates%2Fmbe%2Fsrc%2Fbenchmark.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fmbe%2Fsrc%2Fbenchmark.rs?ref=95d14c393c7efd7ccb56076eb2bc799e5a367c68", "patch": "@@ -145,7 +145,7 @@ fn invocation_fixtures(rules: &FxHashMap<String, DeclarativeMacro>) -> Vec<(Stri\n             Op::Ident(it) => parent.token_trees.push(tt::Leaf::from(it.clone()).into()),\n             Op::Punct(puncts) => {\n                 for punct in puncts {\n-                    parent.token_trees.push(tt::Leaf::from(punct.clone()).into());\n+                    parent.token_trees.push(tt::Leaf::from(*punct).into());\n                 }\n             }\n             Op::Repeat { tokens, kind, separator } => {"}, {"sha": "fb316320ae7886838399436b5ccf997863ed7353", "filename": "crates/mbe/src/expander/transcriber.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/95d14c393c7efd7ccb56076eb2bc799e5a367c68/crates%2Fmbe%2Fsrc%2Fexpander%2Ftranscriber.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95d14c393c7efd7ccb56076eb2bc799e5a367c68/crates%2Fmbe%2Fsrc%2Fexpander%2Ftranscriber.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fmbe%2Fsrc%2Fexpander%2Ftranscriber.rs?ref=95d14c393c7efd7ccb56076eb2bc799e5a367c68", "patch": "@@ -138,7 +138,7 @@ fn expand_subtree(\n             Op::Ident(it) => arena.push(tt::Leaf::from(it.clone()).into()),\n             Op::Punct(puncts) => {\n                 for punct in puncts {\n-                    arena.push(tt::Leaf::from(punct.clone()).into());\n+                    arena.push(tt::Leaf::from(*punct).into());\n                 }\n             }\n             Op::Subtree { tokens, delimiter } => {"}, {"sha": "875dc1ad87bd00d2555dcb7f8aa83f7a9cac50aa", "filename": "crates/mbe/src/parser.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/95d14c393c7efd7ccb56076eb2bc799e5a367c68/crates%2Fmbe%2Fsrc%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95d14c393c7efd7ccb56076eb2bc799e5a367c68/crates%2Fmbe%2Fsrc%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fmbe%2Fsrc%2Fparser.rs?ref=95d14c393c7efd7ccb56076eb2bc799e5a367c68", "patch": "@@ -126,7 +126,7 @@ fn next_op(\n             src.next().expect(\"first token already peeked\");\n             // Note that the '$' itself is a valid token inside macro_rules.\n             let second = match src.next() {\n-                None => return Ok(Op::Punct(smallvec![p.clone()])),\n+                None => return Ok(Op::Punct(smallvec![*p])),\n                 Some(it) => it,\n             };\n             match second {"}, {"sha": "7787c74da8837e5d7b2875c0f4aae8ac819bfaa8", "filename": "crates/mbe/src/tt_iter.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/95d14c393c7efd7ccb56076eb2bc799e5a367c68/crates%2Fmbe%2Fsrc%2Ftt_iter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95d14c393c7efd7ccb56076eb2bc799e5a367c68/crates%2Fmbe%2Fsrc%2Ftt_iter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fmbe%2Fsrc%2Ftt_iter.rs?ref=95d14c393c7efd7ccb56076eb2bc799e5a367c68", "patch": "@@ -114,7 +114,7 @@ impl<'a> TtIter<'a> {\n             ('.', '.', Some('.' | '=')) | ('<', '<', Some('=')) | ('>', '>', Some('=')) => {\n                 let _ = self.next().unwrap();\n                 let _ = self.next().unwrap();\n-                Ok(smallvec![first, second.clone(), third.unwrap().clone()])\n+                Ok(smallvec![first, *second, *third.unwrap()])\n             }\n             ('-' | '!' | '*' | '/' | '&' | '%' | '^' | '+' | '<' | '=' | '>' | '|', '=', _)\n             | ('-' | '=' | '>', '>', _)\n@@ -125,7 +125,7 @@ impl<'a> TtIter<'a> {\n             | ('<', '<', _)\n             | ('|', '|', _) => {\n                 let _ = self.next().unwrap();\n-                Ok(smallvec![first, second.clone()])\n+                Ok(smallvec![first, *second])\n             }\n             _ => Ok(smallvec![first]),\n         }"}]}