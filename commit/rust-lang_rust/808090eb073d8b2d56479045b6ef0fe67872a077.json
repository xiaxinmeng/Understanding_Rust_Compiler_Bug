{"sha": "808090eb073d8b2d56479045b6ef0fe67872a077", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgwODA5MGViMDczZDhiMmQ1NjQ3OTA0NWI2ZWYwZmU2Nzg3MmEwNzc=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-03-28T20:14:09Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-05-02T16:00:20Z"}, "message": "Pass target_cpu to LinkerInfo::new instead of link_binary\n\nThis is one step towards separating the linking code from codegen backends", "tree": {"sha": "7d64ab8200c8bef48d5543924f8e3b9b3691361a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7d64ab8200c8bef48d5543924f8e3b9b3691361a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/808090eb073d8b2d56479045b6ef0fe67872a077", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/808090eb073d8b2d56479045b6ef0fe67872a077", "html_url": "https://github.com/rust-lang/rust/commit/808090eb073d8b2d56479045b6ef0fe67872a077", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/808090eb073d8b2d56479045b6ef0fe67872a077/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "673c1b6e496432e68bca148fcfdae647ad21befb", "url": "https://api.github.com/repos/rust-lang/rust/commits/673c1b6e496432e68bca148fcfdae647ad21befb", "html_url": "https://github.com/rust-lang/rust/commit/673c1b6e496432e68bca148fcfdae647ad21befb"}], "stats": {"total": 66, "additions": 26, "deletions": 40}, "files": [{"sha": "c7121b9386125494daaf418072a4e6dfea3067db", "filename": "compiler/rustc_codegen_cranelift/src/driver/aot.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/808090eb073d8b2d56479045b6ef0fe67872a077/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fdriver%2Faot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/808090eb073d8b2d56479045b6ef0fe67872a077/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fdriver%2Faot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fdriver%2Faot.rs?ref=808090eb073d8b2d56479045b6ef0fe67872a077", "patch": "@@ -295,7 +295,7 @@ pub(super) fn run_aot(\n             metadata_module,\n             metadata,\n             windows_subsystem,\n-            linker_info: LinkerInfo::new(tcx),\n+            linker_info: LinkerInfo::new(tcx, crate::target_triple(tcx.sess).to_string()),\n             crate_info: CrateInfo::new(tcx),\n         },\n         work_products,"}, {"sha": "75b7b9bbeb567abd9ae404ae2f9971916a559ac3", "filename": "compiler/rustc_codegen_cranelift/src/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/808090eb073d8b2d56479045b6ef0fe67872a077/compiler%2Frustc_codegen_cranelift%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/808090eb073d8b2d56479045b6ef0fe67872a077/compiler%2Frustc_codegen_cranelift%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Flib.rs?ref=808090eb073d8b2d56479045b6ef0fe67872a077", "patch": "@@ -267,13 +267,11 @@ impl CodegenBackend for CraneliftCodegenBackend {\n     ) -> Result<(), ErrorReported> {\n         use rustc_codegen_ssa::back::link::link_binary;\n \n-        let target_cpu = crate::target_triple(sess).to_string();\n         link_binary::<crate::archive::ArArchiveBuilder<'_>>(\n             sess,\n             &codegen_results,\n             outputs,\n             &codegen_results.crate_name.as_str(),\n-            &target_cpu,\n         );\n \n         Ok(())"}, {"sha": "4707d17f18e47a87980da1348a484a462579e9ba", "filename": "compiler/rustc_codegen_llvm/src/lib.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/808090eb073d8b2d56479045b6ef0fe67872a077/compiler%2Frustc_codegen_llvm%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/808090eb073d8b2d56479045b6ef0fe67872a077/compiler%2Frustc_codegen_llvm%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Flib.rs?ref=808090eb073d8b2d56479045b6ef0fe67872a077", "patch": "@@ -270,6 +270,7 @@ impl CodegenBackend for LlvmCodegenBackend {\n         Box::new(rustc_codegen_ssa::base::codegen_crate(\n             LlvmCodegenBackend(()),\n             tcx,\n+            crate::llvm_util::target_cpu(tcx.sess).to_string(),\n             metadata,\n             need_metadata_module,\n         ))\n@@ -305,13 +306,11 @@ impl CodegenBackend for LlvmCodegenBackend {\n \n         // Run the linker on any artifacts that resulted from the LLVM run.\n         // This should produce either a finished executable or library.\n-        let target_cpu = crate::llvm_util::target_cpu(sess);\n         link_binary::<LlvmArchiveBuilder<'_>>(\n             sess,\n             &codegen_results,\n             outputs,\n             &codegen_results.crate_name.as_str(),\n-            target_cpu,\n         );\n \n         Ok(())"}, {"sha": "857088fe5661fa4fa5cd27c7eee9908c1d4db5ac", "filename": "compiler/rustc_codegen_ssa/src/back/link.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/808090eb073d8b2d56479045b6ef0fe67872a077/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/808090eb073d8b2d56479045b6ef0fe67872a077/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs?ref=808090eb073d8b2d56479045b6ef0fe67872a077", "patch": "@@ -50,7 +50,6 @@ pub fn link_binary<'a, B: ArchiveBuilder<'a>>(\n     codegen_results: &CodegenResults,\n     outputs: &OutputFilenames,\n     crate_name: &str,\n-    target_cpu: &str,\n ) {\n     let _timer = sess.timer(\"link_binary\");\n     let output_metadata = sess.opts.output_types.contains_key(&OutputType::Metadata);\n@@ -100,7 +99,6 @@ pub fn link_binary<'a, B: ArchiveBuilder<'a>>(\n                         &out_filename,\n                         codegen_results,\n                         path.as_ref(),\n-                        target_cpu,\n                     );\n                 }\n             }\n@@ -531,7 +529,6 @@ fn link_natively<'a, B: ArchiveBuilder<'a>>(\n     out_filename: &Path,\n     codegen_results: &CodegenResults,\n     tmpdir: &Path,\n-    target_cpu: &str,\n ) {\n     info!(\"preparing {:?} to {:?}\", crate_type, out_filename);\n     let (linker_path, flavor) = linker_and_flavor(sess);\n@@ -543,7 +540,6 @@ fn link_natively<'a, B: ArchiveBuilder<'a>>(\n         tmpdir,\n         out_filename,\n         codegen_results,\n-        target_cpu,\n     );\n \n     linker::disable_localization(&mut cmd);\n@@ -1617,14 +1613,13 @@ fn linker_with_args<'a, B: ArchiveBuilder<'a>>(\n     tmpdir: &Path,\n     out_filename: &Path,\n     codegen_results: &CodegenResults,\n-    target_cpu: &str,\n ) -> Command {\n     let crt_objects_fallback = crt_objects_fallback(sess, crate_type);\n     let base_cmd = get_linker(sess, path, flavor, crt_objects_fallback);\n     // FIXME: Move `/LIBPATH` addition for uwp targets from the linker construction\n     // to the linker args construction.\n     assert!(base_cmd.get_args().is_empty() || sess.target.vendor == \"uwp\");\n-    let cmd = &mut *codegen_results.linker_info.to_linker(base_cmd, &sess, flavor, target_cpu);\n+    let cmd = &mut *codegen_results.linker_info.to_linker(base_cmd, &sess, flavor);\n     let link_output_kind = link_output_kind(sess, crate_type);\n \n     // NO-OPT-OUT, OBJECT-FILES-MAYBE, CUSTOMIZATION-POINT"}, {"sha": "4d16ae3b0127bbe45bd51edd79425578f99f59c4", "filename": "compiler/rustc_codegen_ssa/src/back/linker.rs", "status": "modified", "additions": 17, "deletions": 26, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/808090eb073d8b2d56479045b6ef0fe67872a077/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flinker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/808090eb073d8b2d56479045b6ef0fe67872a077/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flinker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flinker.rs?ref=808090eb073d8b2d56479045b6ef0fe67872a077", "patch": "@@ -37,12 +37,14 @@ pub fn disable_localization(linker: &mut Command) {\n /// need out of the shared crate context before we get rid of it.\n #[derive(Encodable, Decodable)]\n pub struct LinkerInfo {\n+    target_cpu: String,\n     exports: FxHashMap<CrateType, Vec<String>>,\n }\n \n impl LinkerInfo {\n-    pub fn new(tcx: TyCtxt<'_>) -> LinkerInfo {\n+    pub fn new(tcx: TyCtxt<'_>, target_cpu: String) -> LinkerInfo {\n         LinkerInfo {\n+            target_cpu,\n             exports: tcx\n                 .sess\n                 .crate_types()\n@@ -57,38 +59,31 @@ impl LinkerInfo {\n         cmd: Command,\n         sess: &'a Session,\n         flavor: LinkerFlavor,\n-        target_cpu: &'a str,\n     ) -> Box<dyn Linker + 'a> {\n         match flavor {\n             LinkerFlavor::Lld(LldFlavor::Link) | LinkerFlavor::Msvc => {\n                 Box::new(MsvcLinker { cmd, sess, info: self }) as Box<dyn Linker>\n             }\n             LinkerFlavor::Em => Box::new(EmLinker { cmd, sess, info: self }) as Box<dyn Linker>,\n-            LinkerFlavor::Gcc => Box::new(GccLinker {\n-                cmd,\n-                sess,\n-                info: self,\n-                hinted_static: false,\n-                is_ld: false,\n-                target_cpu,\n-            }) as Box<dyn Linker>,\n+            LinkerFlavor::Gcc => {\n+                Box::new(GccLinker { cmd, sess, info: self, hinted_static: false, is_ld: false })\n+                    as Box<dyn Linker>\n+            }\n \n             LinkerFlavor::Lld(LldFlavor::Ld)\n             | LinkerFlavor::Lld(LldFlavor::Ld64)\n-            | LinkerFlavor::Ld => Box::new(GccLinker {\n-                cmd,\n-                sess,\n-                info: self,\n-                hinted_static: false,\n-                is_ld: true,\n-                target_cpu,\n-            }) as Box<dyn Linker>,\n+            | LinkerFlavor::Ld => {\n+                Box::new(GccLinker { cmd, sess, info: self, hinted_static: false, is_ld: true })\n+                    as Box<dyn Linker>\n+            }\n \n             LinkerFlavor::Lld(LldFlavor::Wasm) => {\n                 Box::new(WasmLd::new(cmd, sess, self)) as Box<dyn Linker>\n             }\n \n-            LinkerFlavor::PtxLinker => Box::new(PtxLinker { cmd, sess }) as Box<dyn Linker>,\n+            LinkerFlavor::PtxLinker => {\n+                Box::new(PtxLinker { cmd, sess, info: self }) as Box<dyn Linker>\n+            }\n         }\n     }\n }\n@@ -156,7 +151,6 @@ pub struct GccLinker<'a> {\n     hinted_static: bool, // Keeps track of the current hinting mode.\n     // Link as ld\n     is_ld: bool,\n-    target_cpu: &'a str,\n }\n \n impl<'a> GccLinker<'a> {\n@@ -228,8 +222,7 @@ impl<'a> GccLinker<'a> {\n         };\n \n         self.linker_arg(&format!(\"-plugin-opt={}\", opt_level));\n-        let target_cpu = self.target_cpu;\n-        self.linker_arg(&format!(\"-plugin-opt=mcpu={}\", target_cpu));\n+        self.linker_arg(&format!(\"-plugin-opt=mcpu={}\", self.info.target_cpu));\n     }\n \n     fn build_dylib(&mut self, out_filename: &Path) {\n@@ -1276,6 +1269,7 @@ fn exported_symbols(tcx: TyCtxt<'_>, crate_type: CrateType) -> Vec<String> {\n pub struct PtxLinker<'a> {\n     cmd: Command,\n     sess: &'a Session,\n+    info: &'a LinkerInfo,\n }\n \n impl<'a> Linker for PtxLinker<'a> {\n@@ -1321,10 +1315,7 @@ impl<'a> Linker for PtxLinker<'a> {\n \n     fn finalize(&mut self) {\n         // Provide the linker with fallback to internal `target-cpu`.\n-        self.cmd.arg(\"--fallback-arch\").arg(match self.sess.opts.cg.target_cpu {\n-            Some(ref s) => s,\n-            None => &self.sess.target.cpu,\n-        });\n+        self.cmd.arg(\"--fallback-arch\").arg(&self.info.target_cpu);\n     }\n \n     fn link_dylib(&mut self, _lib: Symbol) {"}, {"sha": "cc9c6c2c2d6581bab12494fcd6871cd4fb66acd0", "filename": "compiler/rustc_codegen_ssa/src/back/write.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/808090eb073d8b2d56479045b6ef0fe67872a077/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/808090eb073d8b2d56479045b6ef0fe67872a077/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fwrite.rs?ref=808090eb073d8b2d56479045b6ef0fe67872a077", "patch": "@@ -426,6 +426,7 @@ fn need_pre_lto_bitcode_for_incr_comp(sess: &Session) -> bool {\n pub fn start_async_codegen<B: ExtraBackendMethods>(\n     backend: B,\n     tcx: TyCtxt<'_>,\n+    target_cpu: String,\n     metadata: EncodedMetadata,\n     total_cgus: usize,\n ) -> OngoingCodegen<B> {\n@@ -448,7 +449,7 @@ pub fn start_async_codegen<B: ExtraBackendMethods>(\n         subsystem.to_string()\n     });\n \n-    let linker_info = LinkerInfo::new(tcx);\n+    let linker_info = LinkerInfo::new(tcx, target_cpu);\n     let crate_info = CrateInfo::new(tcx);\n \n     let regular_config ="}, {"sha": "247c26d8b2213a9b3a57f4f8387feffca8161433", "filename": "compiler/rustc_codegen_ssa/src/base.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/808090eb073d8b2d56479045b6ef0fe67872a077/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/808090eb073d8b2d56479045b6ef0fe67872a077/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs?ref=808090eb073d8b2d56479045b6ef0fe67872a077", "patch": "@@ -461,12 +461,13 @@ fn get_argc_argv<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>>(\n pub fn codegen_crate<B: ExtraBackendMethods>(\n     backend: B,\n     tcx: TyCtxt<'tcx>,\n+    target_cpu: String,\n     metadata: EncodedMetadata,\n     need_metadata_module: bool,\n ) -> OngoingCodegen<B> {\n     // Skip crate items and just output metadata in -Z no-codegen mode.\n     if tcx.sess.opts.debugging_opts.no_codegen || !tcx.sess.opts.output_types.should_codegen() {\n-        let ongoing_codegen = start_async_codegen(backend, tcx, metadata, 1);\n+        let ongoing_codegen = start_async_codegen(backend, tcx, target_cpu, metadata, 1);\n \n         ongoing_codegen.codegen_finished(tcx);\n \n@@ -492,7 +493,8 @@ pub fn codegen_crate<B: ExtraBackendMethods>(\n         }\n     }\n \n-    let ongoing_codegen = start_async_codegen(backend.clone(), tcx, metadata, codegen_units.len());\n+    let ongoing_codegen =\n+        start_async_codegen(backend.clone(), tcx, target_cpu, metadata, codegen_units.len());\n     let ongoing_codegen = AbortCodegenOnDrop::<B>(Some(ongoing_codegen));\n \n     // Codegen an allocator shim, if necessary."}]}