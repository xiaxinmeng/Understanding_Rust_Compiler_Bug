{"sha": "a23297f5c05d956f33ad0b515cc4daf99a2be4f1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEyMzI5N2Y1YzA1ZDk1NmYzM2FkMGI1MTVjYzRkYWY5OWEyYmU0ZjE=", "commit": {"author": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2020-09-29T21:58:00Z"}, "committer": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2020-09-30T02:20:33Z"}, "message": "Bless mut tests", "tree": {"sha": "4a4614b6d3b81a4f447deafc184133b31251ad41", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4a4614b6d3b81a4f447deafc184133b31251ad41"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a23297f5c05d956f33ad0b515cc4daf99a2be4f1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a23297f5c05d956f33ad0b515cc4daf99a2be4f1", "html_url": "https://github.com/rust-lang/rust/commit/a23297f5c05d956f33ad0b515cc4daf99a2be4f1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a23297f5c05d956f33ad0b515cc4daf99a2be4f1/comments", "author": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b518ccb4c3b24fabbbdd22fa1a574279348cc472", "url": "https://api.github.com/repos/rust-lang/rust/commits/b518ccb4c3b24fabbbdd22fa1a574279348cc472", "html_url": "https://github.com/rust-lang/rust/commit/b518ccb4c3b24fabbbdd22fa1a574279348cc472"}], "stats": {"total": 280, "additions": 173, "deletions": 107}, "files": [{"sha": "fba6d0d2f80d8d069aa0d47e1516d7460d787fc5", "filename": "compiler/rustc_mir/src/transform/check_consts/ops.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a23297f5c05d956f33ad0b515cc4daf99a2be4f1/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a23297f5c05d956f33ad0b515cc4daf99a2be4f1/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs?ref=a23297f5c05d956f33ad0b515cc4daf99a2be4f1", "patch": "@@ -515,8 +515,6 @@ pub mod ty {\n     #[derive(Debug)]\n     pub struct MutRef;\n     impl NonConstOp for MutRef {\n-        const STOPS_CONST_CHECKING: bool = true;\n-\n         fn status_in_item(&self, _ccx: &ConstCx<'_, '_>) -> Status {\n             Status::Unstable(sym::const_mut_refs)\n         }"}, {"sha": "037c6f9f7e6626dffc461f13cb75d62abcb74332", "filename": "src/test/ui/consts/const-eval/assign-to-static-within-other-static-2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a23297f5c05d956f33ad0b515cc4daf99a2be4f1/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fassign-to-static-within-other-static-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a23297f5c05d956f33ad0b515cc4daf99a2be4f1/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fassign-to-static-within-other-static-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fassign-to-static-within-other-static-2.rs?ref=a23297f5c05d956f33ad0b515cc4daf99a2be4f1", "patch": "@@ -1,7 +1,7 @@\n // New test for #53818: modifying static memory at compile-time is not allowed.\n // The test should never compile successfully\n \n-#![feature(const_raw_ptr_deref)]\n+#![feature(const_raw_ptr_deref, const_mut_refs)]\n \n use std::cell::UnsafeCell;\n \n@@ -13,7 +13,7 @@ unsafe impl Sync for Foo {}\n static FOO: Foo = Foo(UnsafeCell::new(42));\n \n static BAR: () = unsafe {\n-    *FOO.0.get() = 5; //~ ERROR contains unimplemented expression type\n+    *FOO.0.get() = 5; //~ ERROR\n };\n \n fn main() {}"}, {"sha": "296a6bf542163e9909116dd31fc662d4e5b40172", "filename": "src/test/ui/consts/const-eval/assign-to-static-within-other-static-2.stderr", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a23297f5c05d956f33ad0b515cc4daf99a2be4f1/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fassign-to-static-within-other-static-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a23297f5c05d956f33ad0b515cc4daf99a2be4f1/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fassign-to-static-within-other-static-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fassign-to-static-within-other-static-2.stderr?ref=a23297f5c05d956f33ad0b515cc4daf99a2be4f1", "patch": "@@ -1,11 +1,9 @@\n-error[E0019]: static contains unimplemented expression type\n+error[E0080]: could not evaluate static initializer\n   --> $DIR/assign-to-static-within-other-static-2.rs:16:5\n    |\n LL |     *FOO.0.get() = 5;\n-   |     ^^^^^^^^^^^^^^^^\n-   |\n-   = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable\n+   |     ^^^^^^^^^^^^^^^^ modifying a static's initial value from another static's initializer\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0019`.\n+For more information about this error, try `rustc --explain E0080`."}, {"sha": "481e04694634444e68d126e1026d4f74b9d4f25d", "filename": "src/test/ui/consts/const-eval/mod-static-with-const-fn.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a23297f5c05d956f33ad0b515cc4daf99a2be4f1/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fmod-static-with-const-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a23297f5c05d956f33ad0b515cc4daf99a2be4f1/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fmod-static-with-const-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fmod-static-with-const-fn.rs?ref=a23297f5c05d956f33ad0b515cc4daf99a2be4f1", "patch": "@@ -12,14 +12,9 @@ unsafe impl Sync for Foo {}\n \n static FOO: Foo = Foo(UnsafeCell::new(42));\n \n-fn foo() {}\n-\n static BAR: () = unsafe {\n     *FOO.0.get() = 5;\n-    //~^ contains unimplemented expression\n-\n-    foo();\n-    //~^ ERROR calls in statics are limited to constant functions, tuple structs and tuple variants\n+    //~^ mutation through a reference\n };\n \n fn main() {"}, {"sha": "12faf2e25e7810734f4930ff869acb57c48bd584", "filename": "src/test/ui/consts/const-eval/mod-static-with-const-fn.stderr", "status": "modified", "additions": 5, "deletions": 11, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a23297f5c05d956f33ad0b515cc4daf99a2be4f1/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fmod-static-with-const-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a23297f5c05d956f33ad0b515cc4daf99a2be4f1/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fmod-static-with-const-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fmod-static-with-const-fn.stderr?ref=a23297f5c05d956f33ad0b515cc4daf99a2be4f1", "patch": "@@ -1,18 +1,12 @@\n-error[E0019]: static contains unimplemented expression type\n-  --> $DIR/mod-static-with-const-fn.rs:18:5\n+error[E0658]: mutation through a reference is not allowed in statics\n+  --> $DIR/mod-static-with-const-fn.rs:15:5\n    |\n LL |     *FOO.0.get() = 5;\n    |     ^^^^^^^^^^^^^^^^\n    |\n+   = note: see issue #57349 <https://github.com/rust-lang/rust/issues/57349> for more information\n    = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable\n \n-error[E0015]: calls in statics are limited to constant functions, tuple structs and tuple variants\n-  --> $DIR/mod-static-with-const-fn.rs:21:5\n-   |\n-LL |     foo();\n-   |     ^^^^^\n-\n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n-Some errors have detailed explanations: E0015, E0019.\n-For more information about an error, try `rustc --explain E0015`.\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "2fd6e060678e912da2e43bfb4b8daa142d36a6c9", "filename": "src/test/ui/consts/const_let_assign3.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a23297f5c05d956f33ad0b515cc4daf99a2be4f1/src%2Ftest%2Fui%2Fconsts%2Fconst_let_assign3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a23297f5c05d956f33ad0b515cc4daf99a2be4f1/src%2Ftest%2Fui%2Fconsts%2Fconst_let_assign3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst_let_assign3.rs?ref=a23297f5c05d956f33ad0b515cc4daf99a2be4f1", "patch": "@@ -6,23 +6,21 @@ struct S {\n \n impl S {\n     const fn foo(&mut self, x: u32) {\n-        //~^ ERROR mutable references\n+        //~^ ERROR mutable reference\n         self.state = x;\n     }\n }\n \n const FOO: S = {\n     let mut s = S { state: 42 };\n-    s.foo(3); //~ ERROR mutable references are not allowed in constants\n+    s.foo(3); //~ ERROR mutable reference\n     s\n };\n \n type Array = [u32; {\n     let mut x = 2;\n-    let y = &mut x;\n-//~^ ERROR mutable references are not allowed in constants\n+    let y = &mut x; //~ ERROR mutable reference\n     *y = 42;\n-//~^ ERROR constant contains unimplemented expression type\n     *y\n }];\n "}, {"sha": "dc86e178a42c3cb8affec5b011b3a67b4e01c2a6", "filename": "src/test/ui/consts/const_let_assign3.stderr", "status": "modified", "additions": 3, "deletions": 11, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a23297f5c05d956f33ad0b515cc4daf99a2be4f1/src%2Ftest%2Fui%2Fconsts%2Fconst_let_assign3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a23297f5c05d956f33ad0b515cc4daf99a2be4f1/src%2Ftest%2Fui%2Fconsts%2Fconst_let_assign3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst_let_assign3.stderr?ref=a23297f5c05d956f33ad0b515cc4daf99a2be4f1", "patch": "@@ -19,15 +19,7 @@ error[E0764]: mutable references are not allowed in constants\n LL |     let y = &mut x;\n    |             ^^^^^^ `&mut` is only allowed in `const fn`\n \n-error[E0019]: constant contains unimplemented expression type\n-  --> $DIR/const_let_assign3.rs:24:5\n-   |\n-LL |     *y = 42;\n-   |     ^^^^^^^\n-   |\n-   = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable\n-\n-error: aborting due to 4 previous errors\n+error: aborting due to 3 previous errors\n \n-Some errors have detailed explanations: E0019, E0658, E0764.\n-For more information about an error, try `rustc --explain E0019`.\n+Some errors have detailed explanations: E0658, E0764.\n+For more information about an error, try `rustc --explain E0658`."}, {"sha": "4e1b7bf119c6d4b0398323a45de08b7a7672c2c7", "filename": "src/test/ui/consts/min_const_fn/bad_const_fn_body_ice.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a23297f5c05d956f33ad0b515cc4daf99a2be4f1/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fbad_const_fn_body_ice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a23297f5c05d956f33ad0b515cc4daf99a2be4f1/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fbad_const_fn_body_ice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fbad_const_fn_body_ice.rs?ref=a23297f5c05d956f33ad0b515cc4daf99a2be4f1", "patch": "@@ -1,7 +1,6 @@\n const fn foo(a: i32) -> Vec<i32> {\n     vec![1, 2, 3]\n     //~^ ERROR allocations are not allowed\n-    //~| ERROR unimplemented expression type\n     //~| ERROR calls in constant functions\n }\n "}, {"sha": "23697a8e1181167bf5a1c2773a67944f77c07b0a", "filename": "src/test/ui/consts/min_const_fn/bad_const_fn_body_ice.stderr", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/a23297f5c05d956f33ad0b515cc4daf99a2be4f1/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fbad_const_fn_body_ice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a23297f5c05d956f33ad0b515cc4daf99a2be4f1/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fbad_const_fn_body_ice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fbad_const_fn_body_ice.stderr?ref=a23297f5c05d956f33ad0b515cc4daf99a2be4f1", "patch": "@@ -6,15 +6,6 @@ LL |     vec![1, 2, 3]\n    |\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error[E0019]: constant function contains unimplemented expression type\n-  --> $DIR/bad_const_fn_body_ice.rs:2:5\n-   |\n-LL |     vec![1, 2, 3]\n-   |     ^^^^^^^^^^^^^\n-   |\n-   = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n-\n error[E0015]: calls in constant functions are limited to constant functions, tuple structs and tuple variants\n   --> $DIR/bad_const_fn_body_ice.rs:2:5\n    |\n@@ -23,7 +14,7 @@ LL |     vec![1, 2, 3]\n    |\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error: aborting due to 3 previous errors\n+error: aborting due to 2 previous errors\n \n-Some errors have detailed explanations: E0010, E0015, E0019.\n+Some errors have detailed explanations: E0010, E0015.\n For more information about an error, try `rustc --explain E0010`."}, {"sha": "199295531d72882eb686d5d3b0cf8247a56e9e30", "filename": "src/test/ui/consts/min_const_fn/min_const_fn.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a23297f5c05d956f33ad0b515cc4daf99a2be4f1/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a23297f5c05d956f33ad0b515cc4daf99a2be4f1/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.rs?ref=a23297f5c05d956f33ad0b515cc4daf99a2be4f1", "patch": "@@ -38,25 +38,37 @@ impl<T> Foo<T> {\n     const fn get(&self) -> &T { &self.0 }\n     const fn get_mut(&mut self) -> &mut T { &mut self.0 }\n     //~^ mutable references\n+    //~| mutable references\n+    //~| mutable references\n+    //~| mutable references\n }\n impl<'a, T> Foo<T> {\n     const fn new_lt(t: T) -> Self { Foo(t) }\n     const fn into_inner_lt(self) -> T { self.0 } //~ destructors cannot be evaluated\n     const fn get_lt(&'a self) -> &T { &self.0 }\n     const fn get_mut_lt(&'a mut self) -> &mut T { &mut self.0 }\n     //~^ mutable references\n+    //~| mutable references\n+    //~| mutable references\n+    //~| mutable references\n }\n impl<T: Sized> Foo<T> {\n     const fn new_s(t: T) -> Self { Foo(t) }\n     const fn into_inner_s(self) -> T { self.0 } //~ ERROR destructors\n     const fn get_s(&self) -> &T { &self.0 }\n     const fn get_mut_s(&mut self) -> &mut T { &mut self.0 }\n     //~^ mutable references\n+    //~| mutable references\n+    //~| mutable references\n+    //~| mutable references\n }\n impl<T: ?Sized> Foo<T> {\n     const fn get_sq(&self) -> &T { &self.0 }\n     const fn get_mut_sq(&mut self) -> &mut T { &mut self.0 }\n     //~^ mutable references\n+    //~| mutable references\n+    //~| mutable references\n+    //~| mutable references\n }\n \n "}, {"sha": "6ec33089401b6e804655000ff3e34363b6772cd4", "filename": "src/test/ui/consts/min_const_fn/min_const_fn.stderr", "status": "modified", "additions": 133, "deletions": 25, "changes": 158, "blob_url": "https://github.com/rust-lang/rust/blob/a23297f5c05d956f33ad0b515cc4daf99a2be4f1/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a23297f5c05d956f33ad0b515cc4daf99a2be4f1/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.stderr?ref=a23297f5c05d956f33ad0b515cc4daf99a2be4f1", "patch": "@@ -15,33 +15,87 @@ LL |     const fn get_mut(&mut self) -> &mut T { &mut self.0 }\n    = note: see issue #57349 <https://github.com/rust-lang/rust/issues/57349> for more information\n    = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable\n \n+error[E0658]: mutable references are not allowed in constant functions\n+  --> $DIR/min_const_fn.rs:39:22\n+   |\n+LL |     const fn get_mut(&mut self) -> &mut T { &mut self.0 }\n+   |                      ^^^^^^^^^\n+   |\n+   = note: see issue #57349 <https://github.com/rust-lang/rust/issues/57349> for more information\n+   = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable\n+\n+error[E0658]: mutable references are not allowed in constant functions\n+  --> $DIR/min_const_fn.rs:39:36\n+   |\n+LL |     const fn get_mut(&mut self) -> &mut T { &mut self.0 }\n+   |                                    ^^^^^^\n+   |\n+   = note: see issue #57349 <https://github.com/rust-lang/rust/issues/57349> for more information\n+   = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable\n+\n+error[E0658]: mutable references are not allowed in constant functions\n+  --> $DIR/min_const_fn.rs:39:45\n+   |\n+LL |     const fn get_mut(&mut self) -> &mut T { &mut self.0 }\n+   |                                             ^^^^^^^^^^^\n+   |\n+   = note: see issue #57349 <https://github.com/rust-lang/rust/issues/57349> for more information\n+   = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable\n+\n error[E0493]: destructors cannot be evaluated at compile-time\n-  --> $DIR/min_const_fn.rs:44:28\n+  --> $DIR/min_const_fn.rs:47:28\n    |\n LL |     const fn into_inner_lt(self) -> T { self.0 }\n    |                            ^^^^                - value is dropped here\n    |                            |\n    |                            constant functions cannot evaluate destructors\n \n error[E0658]: mutable references are not allowed in constant functions\n-  --> $DIR/min_const_fn.rs:46:42\n+  --> $DIR/min_const_fn.rs:49:42\n    |\n LL |     const fn get_mut_lt(&'a mut self) -> &mut T { &mut self.0 }\n    |                                          ^^^^^^\n    |\n    = note: see issue #57349 <https://github.com/rust-lang/rust/issues/57349> for more information\n    = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable\n \n+error[E0658]: mutable references are not allowed in constant functions\n+  --> $DIR/min_const_fn.rs:49:25\n+   |\n+LL |     const fn get_mut_lt(&'a mut self) -> &mut T { &mut self.0 }\n+   |                         ^^^^^^^^^^^^\n+   |\n+   = note: see issue #57349 <https://github.com/rust-lang/rust/issues/57349> for more information\n+   = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable\n+\n+error[E0658]: mutable references are not allowed in constant functions\n+  --> $DIR/min_const_fn.rs:49:42\n+   |\n+LL |     const fn get_mut_lt(&'a mut self) -> &mut T { &mut self.0 }\n+   |                                          ^^^^^^\n+   |\n+   = note: see issue #57349 <https://github.com/rust-lang/rust/issues/57349> for more information\n+   = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable\n+\n+error[E0658]: mutable references are not allowed in constant functions\n+  --> $DIR/min_const_fn.rs:49:51\n+   |\n+LL |     const fn get_mut_lt(&'a mut self) -> &mut T { &mut self.0 }\n+   |                                                   ^^^^^^^^^^^\n+   |\n+   = note: see issue #57349 <https://github.com/rust-lang/rust/issues/57349> for more information\n+   = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable\n+\n error[E0493]: destructors cannot be evaluated at compile-time\n-  --> $DIR/min_const_fn.rs:51:27\n+  --> $DIR/min_const_fn.rs:57:27\n    |\n LL |     const fn into_inner_s(self) -> T { self.0 }\n    |                           ^^^^                - value is dropped here\n    |                           |\n    |                           constant functions cannot evaluate destructors\n \n error[E0658]: mutable references are not allowed in constant functions\n-  --> $DIR/min_const_fn.rs:53:38\n+  --> $DIR/min_const_fn.rs:59:38\n    |\n LL |     const fn get_mut_s(&mut self) -> &mut T { &mut self.0 }\n    |                                      ^^^^^^\n@@ -50,16 +104,70 @@ LL |     const fn get_mut_s(&mut self) -> &mut T { &mut self.0 }\n    = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable\n \n error[E0658]: mutable references are not allowed in constant functions\n-  --> $DIR/min_const_fn.rs:58:39\n+  --> $DIR/min_const_fn.rs:59:24\n+   |\n+LL |     const fn get_mut_s(&mut self) -> &mut T { &mut self.0 }\n+   |                        ^^^^^^^^^\n+   |\n+   = note: see issue #57349 <https://github.com/rust-lang/rust/issues/57349> for more information\n+   = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable\n+\n+error[E0658]: mutable references are not allowed in constant functions\n+  --> $DIR/min_const_fn.rs:59:38\n+   |\n+LL |     const fn get_mut_s(&mut self) -> &mut T { &mut self.0 }\n+   |                                      ^^^^^^\n+   |\n+   = note: see issue #57349 <https://github.com/rust-lang/rust/issues/57349> for more information\n+   = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable\n+\n+error[E0658]: mutable references are not allowed in constant functions\n+  --> $DIR/min_const_fn.rs:59:47\n+   |\n+LL |     const fn get_mut_s(&mut self) -> &mut T { &mut self.0 }\n+   |                                               ^^^^^^^^^^^\n+   |\n+   = note: see issue #57349 <https://github.com/rust-lang/rust/issues/57349> for more information\n+   = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable\n+\n+error[E0658]: mutable references are not allowed in constant functions\n+  --> $DIR/min_const_fn.rs:67:39\n    |\n LL |     const fn get_mut_sq(&mut self) -> &mut T { &mut self.0 }\n    |                                       ^^^^^^\n    |\n    = note: see issue #57349 <https://github.com/rust-lang/rust/issues/57349> for more information\n    = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable\n \n+error[E0658]: mutable references are not allowed in constant functions\n+  --> $DIR/min_const_fn.rs:67:25\n+   |\n+LL |     const fn get_mut_sq(&mut self) -> &mut T { &mut self.0 }\n+   |                         ^^^^^^^^^\n+   |\n+   = note: see issue #57349 <https://github.com/rust-lang/rust/issues/57349> for more information\n+   = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable\n+\n+error[E0658]: mutable references are not allowed in constant functions\n+  --> $DIR/min_const_fn.rs:67:39\n+   |\n+LL |     const fn get_mut_sq(&mut self) -> &mut T { &mut self.0 }\n+   |                                       ^^^^^^\n+   |\n+   = note: see issue #57349 <https://github.com/rust-lang/rust/issues/57349> for more information\n+   = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable\n+\n+error[E0658]: mutable references are not allowed in constant functions\n+  --> $DIR/min_const_fn.rs:67:48\n+   |\n+LL |     const fn get_mut_sq(&mut self) -> &mut T { &mut self.0 }\n+   |                                                ^^^^^^^^^^^\n+   |\n+   = note: see issue #57349 <https://github.com/rust-lang/rust/issues/57349> for more information\n+   = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable\n+\n error[E0723]: trait bounds other than `Sized` on const fn parameters are unstable\n-  --> $DIR/min_const_fn.rs:76:16\n+  --> $DIR/min_const_fn.rs:88:16\n    |\n LL | const fn foo11<T: std::fmt::Display>(t: T) -> T { t }\n    |                ^\n@@ -68,7 +176,7 @@ LL | const fn foo11<T: std::fmt::Display>(t: T) -> T { t }\n    = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n error[E0723]: trait bounds other than `Sized` on const fn parameters are unstable\n-  --> $DIR/min_const_fn.rs:78:18\n+  --> $DIR/min_const_fn.rs:90:18\n    |\n LL | const fn foo11_2<T: Send>(t: T) -> T { t }\n    |                  ^\n@@ -77,23 +185,23 @@ LL | const fn foo11_2<T: Send>(t: T) -> T { t }\n    = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n error[E0013]: constant functions cannot refer to statics\n-  --> $DIR/min_const_fn.rs:82:27\n+  --> $DIR/min_const_fn.rs:94:27\n    |\n LL | const fn foo25() -> u32 { BAR }\n    |                           ^^^\n    |\n    = help: consider extracting the value of the `static` to a `const`, and referring to that\n \n error[E0013]: constant functions cannot refer to statics\n-  --> $DIR/min_const_fn.rs:83:37\n+  --> $DIR/min_const_fn.rs:95:37\n    |\n LL | const fn foo26() -> &'static u32 { &BAR }\n    |                                     ^^^\n    |\n    = help: consider extracting the value of the `static` to a `const`, and referring to that\n \n error[E0658]: casting pointers to integers in constant functions is unstable\n-  --> $DIR/min_const_fn.rs:84:42\n+  --> $DIR/min_const_fn.rs:96:42\n    |\n LL | const fn foo30(x: *const u32) -> usize { x as usize }\n    |                                          ^^^^^^^^^^\n@@ -102,7 +210,7 @@ LL | const fn foo30(x: *const u32) -> usize { x as usize }\n    = help: add `#![feature(const_raw_ptr_to_usize_cast)]` to the crate attributes to enable\n \n error[E0658]: casting pointers to integers in constant functions is unstable\n-  --> $DIR/min_const_fn.rs:86:63\n+  --> $DIR/min_const_fn.rs:98:63\n    |\n LL | const fn foo30_with_unsafe(x: *const u32) -> usize { unsafe { x as usize } }\n    |                                                               ^^^^^^^^^^\n@@ -111,7 +219,7 @@ LL | const fn foo30_with_unsafe(x: *const u32) -> usize { unsafe { x as usize }\n    = help: add `#![feature(const_raw_ptr_to_usize_cast)]` to the crate attributes to enable\n \n error[E0658]: casting pointers to integers in constant functions is unstable\n-  --> $DIR/min_const_fn.rs:88:42\n+  --> $DIR/min_const_fn.rs:100:42\n    |\n LL | const fn foo30_2(x: *mut u32) -> usize { x as usize }\n    |                                          ^^^^^^^^^^\n@@ -120,7 +228,7 @@ LL | const fn foo30_2(x: *mut u32) -> usize { x as usize }\n    = help: add `#![feature(const_raw_ptr_to_usize_cast)]` to the crate attributes to enable\n \n error[E0658]: casting pointers to integers in constant functions is unstable\n-  --> $DIR/min_const_fn.rs:90:63\n+  --> $DIR/min_const_fn.rs:102:63\n    |\n LL | const fn foo30_2_with_unsafe(x: *mut u32) -> usize { unsafe { x as usize } }\n    |                                                               ^^^^^^^^^^\n@@ -129,7 +237,7 @@ LL | const fn foo30_2_with_unsafe(x: *mut u32) -> usize { unsafe { x as usize }\n    = help: add `#![feature(const_raw_ptr_to_usize_cast)]` to the crate attributes to enable\n \n error[E0658]: mutable references are not allowed in constant functions\n-  --> $DIR/min_const_fn.rs:93:14\n+  --> $DIR/min_const_fn.rs:105:14\n    |\n LL | const fn inc(x: &mut i32) { *x += 1 }\n    |              ^\n@@ -138,7 +246,7 @@ LL | const fn inc(x: &mut i32) { *x += 1 }\n    = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable\n \n error[E0723]: trait bounds other than `Sized` on const fn parameters are unstable\n-  --> $DIR/min_const_fn.rs:102:6\n+  --> $DIR/min_const_fn.rs:114:6\n    |\n LL | impl<T: std::fmt::Debug> Foo<T> {\n    |      ^\n@@ -147,7 +255,7 @@ LL | impl<T: std::fmt::Debug> Foo<T> {\n    = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n error[E0723]: trait bounds other than `Sized` on const fn parameters are unstable\n-  --> $DIR/min_const_fn.rs:107:6\n+  --> $DIR/min_const_fn.rs:119:6\n    |\n LL | impl<T: std::fmt::Debug + Sized> Foo<T> {\n    |      ^\n@@ -156,7 +264,7 @@ LL | impl<T: std::fmt::Debug + Sized> Foo<T> {\n    = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n error[E0723]: trait bounds other than `Sized` on const fn parameters are unstable\n-  --> $DIR/min_const_fn.rs:112:6\n+  --> $DIR/min_const_fn.rs:124:6\n    |\n LL | impl<T: Sync + Sized> Foo<T> {\n    |      ^\n@@ -165,7 +273,7 @@ LL | impl<T: Sync + Sized> Foo<T> {\n    = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n error[E0723]: trait bounds other than `Sized` on const fn parameters are unstable\n-  --> $DIR/min_const_fn.rs:118:34\n+  --> $DIR/min_const_fn.rs:130:34\n    |\n LL | const fn no_apit2(_x: AlanTuring<impl std::fmt::Debug>) {}\n    |                                  ^^^^^^^^^^^^^^^^^^^^\n@@ -174,7 +282,7 @@ LL | const fn no_apit2(_x: AlanTuring<impl std::fmt::Debug>) {}\n    = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n error[E0723]: trait bounds other than `Sized` on const fn parameters are unstable\n-  --> $DIR/min_const_fn.rs:120:22\n+  --> $DIR/min_const_fn.rs:132:22\n    |\n LL | const fn no_apit(_x: impl std::fmt::Debug) {}\n    |                      ^^^^^^^^^^^^^^^^^^^^\n@@ -183,7 +291,7 @@ LL | const fn no_apit(_x: impl std::fmt::Debug) {}\n    = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n error[E0723]: trait bounds other than `Sized` on const fn parameters are unstable\n-  --> $DIR/min_const_fn.rs:121:23\n+  --> $DIR/min_const_fn.rs:133:23\n    |\n LL | const fn no_dyn_trait(_x: &dyn std::fmt::Debug) {}\n    |                       ^^\n@@ -192,7 +300,7 @@ LL | const fn no_dyn_trait(_x: &dyn std::fmt::Debug) {}\n    = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n error[E0723]: trait bounds other than `Sized` on const fn parameters are unstable\n-  --> $DIR/min_const_fn.rs:122:32\n+  --> $DIR/min_const_fn.rs:134:32\n    |\n LL | const fn no_dyn_trait_ret() -> &'static dyn std::fmt::Debug { &() }\n    |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -201,7 +309,7 @@ LL | const fn no_dyn_trait_ret() -> &'static dyn std::fmt::Debug { &() }\n    = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n error[E0723]: trait bounds other than `Sized` on const fn parameters are unstable\n-  --> $DIR/min_const_fn.rs:127:41\n+  --> $DIR/min_const_fn.rs:139:41\n    |\n LL | const fn really_no_traits_i_mean_it() { (&() as &dyn std::fmt::Debug, ()).1 }\n    |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -210,7 +318,7 @@ LL | const fn really_no_traits_i_mean_it() { (&() as &dyn std::fmt::Debug, ()).1\n    = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n error[E0658]: function pointers cannot appear in constant functions\n-  --> $DIR/min_const_fn.rs:130:21\n+  --> $DIR/min_const_fn.rs:142:21\n    |\n LL | const fn no_fn_ptrs(_x: fn()) {}\n    |                     ^^\n@@ -219,15 +327,15 @@ LL | const fn no_fn_ptrs(_x: fn()) {}\n    = help: add `#![feature(const_fn_fn_ptr_basics)]` to the crate attributes to enable\n \n error[E0658]: function pointers cannot appear in constant functions\n-  --> $DIR/min_const_fn.rs:132:27\n+  --> $DIR/min_const_fn.rs:144:27\n    |\n LL | const fn no_fn_ptrs2() -> fn() { fn foo() {} foo }\n    |                           ^^^^\n    |\n    = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n    = help: add `#![feature(const_fn_fn_ptr_basics)]` to the crate attributes to enable\n \n-error: aborting due to 26 previous errors\n+error: aborting due to 38 previous errors\n \n Some errors have detailed explanations: E0013, E0493, E0658, E0723.\n For more information about an error, try `rustc --explain E0013`."}, {"sha": "8e95a4c68a2ad1c4e2054d50327087ea43dbd193", "filename": "src/test/ui/consts/min_const_fn/mutable_borrow.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a23297f5c05d956f33ad0b515cc4daf99a2be4f1/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmutable_borrow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a23297f5c05d956f33ad0b515cc4daf99a2be4f1/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmutable_borrow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmutable_borrow.stderr?ref=a23297f5c05d956f33ad0b515cc4daf99a2be4f1", "patch": "@@ -1,17 +1,17 @@\n error[E0658]: mutable references are not allowed in constant functions\n-  --> $DIR/mutable_borrow.rs:3:9\n+  --> $DIR/mutable_borrow.rs:3:13\n    |\n LL |     let b = &mut a;\n-   |         ^\n+   |             ^^^^^^\n    |\n    = note: see issue #57349 <https://github.com/rust-lang/rust/issues/57349> for more information\n    = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable\n \n error[E0658]: mutable references are not allowed in constant functions\n-  --> $DIR/mutable_borrow.rs:12:13\n+  --> $DIR/mutable_borrow.rs:12:17\n    |\n LL |         let b = &mut a;\n-   |             ^\n+   |                 ^^^^^^\n    |\n    = note: see issue #57349 <https://github.com/rust-lang/rust/issues/57349> for more information\n    = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable"}, {"sha": "5e2584a6e951a9d831a3257b54b9b9981c49290f", "filename": "src/test/ui/consts/projection_qualif.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a23297f5c05d956f33ad0b515cc4daf99a2be4f1/src%2Ftest%2Fui%2Fconsts%2Fprojection_qualif.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a23297f5c05d956f33ad0b515cc4daf99a2be4f1/src%2Ftest%2Fui%2Fconsts%2Fprojection_qualif.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fprojection_qualif.rs?ref=a23297f5c05d956f33ad0b515cc4daf99a2be4f1", "patch": "@@ -9,7 +9,6 @@ const FOO: &u32 = {\n     {\n         let b: *mut u32 = &mut a; //~ ERROR mutable references are not allowed in constants\n         unsafe { *b = 5; } //~ ERROR dereferencing raw pointers in constants\n-        //[stock]~^ contains unimplemented expression\n     }\n     &{a}\n };"}, {"sha": "fad8f011f75f55ba17f3926d9408a4641f05f4fb", "filename": "src/test/ui/consts/projection_qualif.stock.stderr", "status": "modified", "additions": 3, "deletions": 11, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a23297f5c05d956f33ad0b515cc4daf99a2be4f1/src%2Ftest%2Fui%2Fconsts%2Fprojection_qualif.stock.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a23297f5c05d956f33ad0b515cc4daf99a2be4f1/src%2Ftest%2Fui%2Fconsts%2Fprojection_qualif.stock.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fprojection_qualif.stock.stderr?ref=a23297f5c05d956f33ad0b515cc4daf99a2be4f1", "patch": "@@ -13,15 +13,7 @@ LL |         unsafe { *b = 5; }\n    = note: see issue #51911 <https://github.com/rust-lang/rust/issues/51911> for more information\n    = help: add `#![feature(const_raw_ptr_deref)]` to the crate attributes to enable\n \n-error[E0019]: constant contains unimplemented expression type\n-  --> $DIR/projection_qualif.rs:11:18\n-   |\n-LL |         unsafe { *b = 5; }\n-   |                  ^^^^^^\n-   |\n-   = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable\n-\n-error: aborting due to 3 previous errors\n+error: aborting due to 2 previous errors\n \n-Some errors have detailed explanations: E0019, E0658, E0764.\n-For more information about an error, try `rustc --explain E0019`.\n+Some errors have detailed explanations: E0658, E0764.\n+For more information about an error, try `rustc --explain E0658`."}, {"sha": "2821d1a015435b4a0cbb1a23ee3e12097112085f", "filename": "src/test/ui/consts/static_mut_containing_mut_ref2.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a23297f5c05d956f33ad0b515cc4daf99a2be4f1/src%2Ftest%2Fui%2Fconsts%2Fstatic_mut_containing_mut_ref2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a23297f5c05d956f33ad0b515cc4daf99a2be4f1/src%2Ftest%2Fui%2Fconsts%2Fstatic_mut_containing_mut_ref2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fstatic_mut_containing_mut_ref2.rs?ref=a23297f5c05d956f33ad0b515cc4daf99a2be4f1", "patch": "@@ -6,6 +6,5 @@ static mut STDERR_BUFFER_SPACE: u8 = 0;\n \n pub static mut STDERR_BUFFER: () = unsafe { *(&mut STDERR_BUFFER_SPACE) = 42; };\n //~^ ERROR  mutable references are not allowed in statics\n-//[stock]~| ERROR static contains unimplemented expression type\n \n fn main() {}"}, {"sha": "36c280ca5c607bc33c5f1dbb9f00c67b9900ec10", "filename": "src/test/ui/consts/static_mut_containing_mut_ref2.stock.stderr", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/a23297f5c05d956f33ad0b515cc4daf99a2be4f1/src%2Ftest%2Fui%2Fconsts%2Fstatic_mut_containing_mut_ref2.stock.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a23297f5c05d956f33ad0b515cc4daf99a2be4f1/src%2Ftest%2Fui%2Fconsts%2Fstatic_mut_containing_mut_ref2.stock.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fstatic_mut_containing_mut_ref2.stock.stderr?ref=a23297f5c05d956f33ad0b515cc4daf99a2be4f1", "patch": "@@ -4,15 +4,6 @@ error[E0764]: mutable references are not allowed in statics\n LL | pub static mut STDERR_BUFFER: () = unsafe { *(&mut STDERR_BUFFER_SPACE) = 42; };\n    |                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^ `&mut` is only allowed in `const fn`\n \n-error[E0019]: static contains unimplemented expression type\n-  --> $DIR/static_mut_containing_mut_ref2.rs:7:45\n-   |\n-LL | pub static mut STDERR_BUFFER: () = unsafe { *(&mut STDERR_BUFFER_SPACE) = 42; };\n-   |                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable\n-\n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n-Some errors have detailed explanations: E0019, E0764.\n-For more information about an error, try `rustc --explain E0019`.\n+For more information about this error, try `rustc --explain E0764`."}]}