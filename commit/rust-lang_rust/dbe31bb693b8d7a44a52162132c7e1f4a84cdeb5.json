{"sha": "dbe31bb693b8d7a44a52162132c7e1f4a84cdeb5", "node_id": "C_kwDOAAsO6NoAKGRiZTMxYmI2OTNiOGQ3YTQ0YTUyMTYyMTMyYzdlMWY0YTg0Y2RlYjU", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-06-10T23:57:26Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-06-10T23:57:26Z"}, "message": "Rollup merge of #112477 - jyn514:assemble-info, r=clubby789\n\nGive more helpful progress messages in `Assemble`\n\nBefore (download-rustc):\n```\n    # no output\n```\n\nAfter (download-rustc):\n```\nCreating a sysroot for stage2 compiler (use `rustup toolchain link 'name' build/host/stage2`)\n```\n\nBefore (compiling from source):\n```\nBuilding compiler artifacts (stage0 -> stage1, x86_64-unknown-linux-gnu)\nAssembling stage1 compiler\nBuild stage1 library artifacts (x86_64-unknown-linux-gnu -> i686-unknown-linux-gnu)\nBuilding compiler artifacts (stage0:x86_64-unknown-linux-gnu -> stage1:i686-unknown-linux-gnu)\nAssembling stage1 compiler (i686-unknown-linux-gnu)\n```\n\nAfter (compiling from source):\n```\nBuilding compiler artifacts (stage0 -> stage1, x86_64-unknown-linux-gnu)\nCreating a sysroot for stage1 compiler (use `rustup toolchain link 'name' build/host/stage1`)\nBuild stage1 library artifacts (x86_64-unknown-linux-gnu)\nBuilding compiler artifacts (stage0:x86_64-unknown-linux-gnu -> stage1:i686-unknown-linux-gnu)\nCreating a sysroot for stage1 compiler (i686-unknown-linux-gnu) (use `rustup toolchain link 'name' build/i686-unknown-linux-gnu/stage1`)\n```\ncc https://rust-lang.zulipchat.com/#narrow/stream/122651-general/topic/Unable.20to.20compile.20rustc.20MSVC, https://discord.com/channels/273534239310479360/957720175619215380/1116867245499498506", "tree": {"sha": "5c96fbcfd1ac910c3cdf27605fbf5fe35be7059f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5c96fbcfd1ac910c3cdf27605fbf5fe35be7059f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dbe31bb693b8d7a44a52162132c7e1f4a84cdeb5", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkhQ3mCRBK7hj4Ov3rIwAAsT4IACX62ZnyC65iN+5cpb23NArI\nk43nxr/2F5mjCR4nVJy4h2WF4DsQzibppjPHSYxblWspdGjHq9xIKoNYmnmMxuCI\nJm6mKwCQOtO638sOC0pt8yAawVNCX5rNlYAatLeOOHVt6SP7D79UQYRRYLTeraxc\nS574/V6rH2N9fO9ndvn5W6a4UdO3AmiS/R4IspMGpa6rokUfPxYJRZzf6erAolJa\nxsTX2E18pZtmN99A6L4vPhZz9yB6Np9n86w8pUskLqq8o2mWCsnPPbh6galdZR/h\nhWDXiCBkn7gC/oZuV/o1+w5ZRMCifFUtEnvDpwP0CGoy6IfJjtc7WcXlVqEHDkw=\n=OKBS\n-----END PGP SIGNATURE-----\n", "payload": "tree 5c96fbcfd1ac910c3cdf27605fbf5fe35be7059f\nparent e19a509f8fe93ede778f11338c9f392b3f37bfae\nparent f531fec41116afef6c814f7c3201519a54083ae8\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1686441446 +0200\ncommitter GitHub <noreply@github.com> 1686441446 +0200\n\nRollup merge of #112477 - jyn514:assemble-info, r=clubby789\n\nGive more helpful progress messages in `Assemble`\n\nBefore (download-rustc):\n```\n    # no output\n```\n\nAfter (download-rustc):\n```\nCreating a sysroot for stage2 compiler (use `rustup toolchain link 'name' build/host/stage2`)\n```\n\nBefore (compiling from source):\n```\nBuilding compiler artifacts (stage0 -> stage1, x86_64-unknown-linux-gnu)\nAssembling stage1 compiler\nBuild stage1 library artifacts (x86_64-unknown-linux-gnu -> i686-unknown-linux-gnu)\nBuilding compiler artifacts (stage0:x86_64-unknown-linux-gnu -> stage1:i686-unknown-linux-gnu)\nAssembling stage1 compiler (i686-unknown-linux-gnu)\n```\n\nAfter (compiling from source):\n```\nBuilding compiler artifacts (stage0 -> stage1, x86_64-unknown-linux-gnu)\nCreating a sysroot for stage1 compiler (use `rustup toolchain link 'name' build/host/stage1`)\nBuild stage1 library artifacts (x86_64-unknown-linux-gnu)\nBuilding compiler artifacts (stage0:x86_64-unknown-linux-gnu -> stage1:i686-unknown-linux-gnu)\nCreating a sysroot for stage1 compiler (i686-unknown-linux-gnu) (use `rustup toolchain link 'name' build/i686-unknown-linux-gnu/stage1`)\n```\ncc https://rust-lang.zulipchat.com/#narrow/stream/122651-general/topic/Unable.20to.20compile.20rustc.20MSVC, https://discord.com/channels/273534239310479360/957720175619215380/1116867245499498506\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dbe31bb693b8d7a44a52162132c7e1f4a84cdeb5", "html_url": "https://github.com/rust-lang/rust/commit/dbe31bb693b8d7a44a52162132c7e1f4a84cdeb5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dbe31bb693b8d7a44a52162132c7e1f4a84cdeb5/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e19a509f8fe93ede778f11338c9f392b3f37bfae", "url": "https://api.github.com/repos/rust-lang/rust/commits/e19a509f8fe93ede778f11338c9f392b3f37bfae", "html_url": "https://github.com/rust-lang/rust/commit/e19a509f8fe93ede778f11338c9f392b3f37bfae"}, {"sha": "f531fec41116afef6c814f7c3201519a54083ae8", "url": "https://api.github.com/repos/rust-lang/rust/commits/f531fec41116afef6c814f7c3201519a54083ae8", "html_url": "https://github.com/rust-lang/rust/commit/f531fec41116afef6c814f7c3201519a54083ae8"}], "stats": {"total": 17, "additions": 14, "deletions": 3}, "files": [{"sha": "c28fe9022ec0046324128dc33a200fc8871168cf", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/dbe31bb693b8d7a44a52162132c7e1f4a84cdeb5/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbe31bb693b8d7a44a52162132c7e1f4a84cdeb5/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=dbe31bb693b8d7a44a52162132c7e1f4a84cdeb5", "patch": "@@ -1488,6 +1488,10 @@ impl Step for Assemble {\n             // Ensure that `libLLVM.so` ends up in the newly created target directory,\n             // so that tools using `rustc_private` can use it.\n             dist::maybe_install_llvm_target(builder, target_compiler.host, &sysroot);\n+            // Lower stages use `ci-rustc-sysroot`, not stageN\n+            if target_compiler.stage == builder.top_stage {\n+                builder.info(&format!(\"Creating a sysroot for stage{stage} compiler (use `rustup toolchain link 'name' build/host/stage{stage}`)\", stage=target_compiler.stage));\n+            }\n             return target_compiler;\n         }\n \n@@ -1525,11 +1529,18 @@ impl Step for Assemble {\n \n         let stage = target_compiler.stage;\n         let host = target_compiler.host;\n-        let msg = if build_compiler.host == host {\n-            format!(\"Assembling stage{} compiler\", stage)\n+        let (host_info, dir_name) = if build_compiler.host == host {\n+            (\"\".into(), \"host\".into())\n         } else {\n-            format!(\"Assembling stage{} compiler ({})\", stage, host)\n+            (format!(\" ({host})\"), host.to_string())\n         };\n+        // NOTE: \"Creating a sysroot\" is somewhat inconsistent with our internal terminology, since\n+        // sysroots can temporarily be empty until we put the compiler inside. However,\n+        // `ensure(Sysroot)` isn't really something that's user facing, so there shouldn't be any\n+        // ambiguity.\n+        let msg = format!(\n+            \"Creating a sysroot for stage{stage} compiler{host_info} (use `rustup toolchain link 'name' build/{dir_name}/stage{stage}`)\"\n+        );\n         builder.info(&msg);\n \n         // Link in all dylibs to the libdir"}]}