{"sha": "7f2853fda3773d4f9ec28484ba3592d5e825ca59", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdmMjg1M2ZkYTM3NzNkNGY5ZWMyODQ4NGJhMzU5MmQ1ZTgyNWNhNTk=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2016-11-09T18:51:16Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-11-09T18:51:16Z"}, "message": "Rollup merge of #37370 - estebank:signature-2-empire-strikes-back, r=nikomatsakis\n\nInclude type of missing trait methods in error\n\nProvide either a span pointing to the original definition of missing\ntrait items, or a message with the inferred definitions.\n\nFixes #24626. Follow up to PR #36371.\n\nIf PR #37369 lands, missing trait items that present a multiline span will be able to show the entirety of the item definition on the error itself, instead of just the first line.", "tree": {"sha": "e1e75573b26d35b20c4682d4008b1f8e835476ca", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e1e75573b26d35b20c4682d4008b1f8e835476ca"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7f2853fda3773d4f9ec28484ba3592d5e825ca59", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7f2853fda3773d4f9ec28484ba3592d5e825ca59", "html_url": "https://github.com/rust-lang/rust/commit/7f2853fda3773d4f9ec28484ba3592d5e825ca59", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7f2853fda3773d4f9ec28484ba3592d5e825ca59/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6c7b43375ad70b9b134973b461854bbe60313ffc", "url": "https://api.github.com/repos/rust-lang/rust/commits/6c7b43375ad70b9b134973b461854bbe60313ffc", "html_url": "https://github.com/rust-lang/rust/commit/6c7b43375ad70b9b134973b461854bbe60313ffc"}, {"sha": "40c2c0f833c0480c3cf3904fa3614cb0a01d7f87", "url": "https://api.github.com/repos/rust-lang/rust/commits/40c2c0f833c0480c3cf3904fa3614cb0a01d7f87", "html_url": "https://github.com/rust-lang/rust/commit/40c2c0f833c0480c3cf3904fa3614cb0a01d7f87"}], "stats": {"total": 197, "additions": 186, "deletions": 11}, "files": [{"sha": "f7e05f4777ecce97d554d17c4f93bd0370079f5c", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 25, "deletions": 8, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/7f2853fda3773d4f9ec28484ba3592d5e825ca59/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f2853fda3773d4f9ec28484ba3592d5e825ca59/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=7f2853fda3773d4f9ec28484ba3592d5e825ca59", "patch": "@@ -1131,24 +1131,33 @@ fn check_impl_items_against_trait<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n \n         if !is_implemented {\n             if !is_provided {\n-                missing_items.push(trait_item.name());\n+                missing_items.push(trait_item);\n             } else if associated_type_overridden {\n                 invalidated_items.push(trait_item.name());\n             }\n         }\n     }\n \n     if !missing_items.is_empty() {\n-        struct_span_err!(tcx.sess, impl_span, E0046,\n+        let mut err = struct_span_err!(tcx.sess, impl_span, E0046,\n             \"not all trait items implemented, missing: `{}`\",\n             missing_items.iter()\n-                  .map(|name| name.to_string())\n-                  .collect::<Vec<_>>().join(\"`, `\"))\n-            .span_label(impl_span, &format!(\"missing `{}` in implementation\",\n+                  .map(|trait_item| trait_item.name().to_string())\n+                  .collect::<Vec<_>>().join(\"`, `\"));\n+        err.span_label(impl_span, &format!(\"missing `{}` in implementation\",\n                 missing_items.iter()\n-                    .map(|name| name.to_string())\n-                    .collect::<Vec<_>>().join(\"`, `\"))\n-            ).emit();\n+                    .map(|trait_item| trait_item.name().to_string())\n+                    .collect::<Vec<_>>().join(\"`, `\")));\n+        for trait_item in missing_items {\n+            if let Some(span) = tcx.map.span_if_local(trait_item.def_id()) {\n+                err.span_label(span, &format!(\"`{}` from trait\", trait_item.name()));\n+            } else {\n+                err.note(&format!(\"`{}` from trait: `{}`\",\n+                                  trait_item.name(),\n+                                  signature(trait_item)));\n+            }\n+        }\n+        err.emit();\n     }\n \n     if !invalidated_items.is_empty() {\n@@ -1163,6 +1172,14 @@ fn check_impl_items_against_trait<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n     }\n }\n \n+fn signature<'a, 'tcx>(item: &ty::ImplOrTraitItem) -> String {\n+    match *item {\n+        ty::MethodTraitItem(ref item) => format!(\"{}\", item.fty.sig.0),\n+        ty::TypeTraitItem(ref item) => format!(\"type {};\", item.name.to_string()),\n+        ty::ConstTraitItem(ref item) => format!(\"const {}: {:?};\", item.name.to_string(), item.ty),\n+    }\n+}\n+\n /// Checks a constant with a given type.\n fn check_const_with_type<'a, 'tcx>(ccx: &'a CrateCtxt<'a, 'tcx>,\n                                    expr: &'tcx hir::Expr,"}, {"sha": "bcc9cdf2d65274404235126fb67183ca83bda50c", "filename": "src/test/run-make/missing-items/Makefile", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7f2853fda3773d4f9ec28484ba3592d5e825ca59/src%2Ftest%2Frun-make%2Fmissing-items%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/7f2853fda3773d4f9ec28484ba3592d5e825ca59/src%2Ftest%2Frun-make%2Fmissing-items%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fmissing-items%2FMakefile?ref=7f2853fda3773d4f9ec28484ba3592d5e825ca59", "patch": "@@ -0,0 +1,10 @@\n+-include ../tools.mk\n+\n+all:\n+\t$(RUSTC) m1.rs -C prefer-dynamic\n+\t$(RUSTC) m2.rs 2>&1 | grep \"error\\[E0046\\]: not all trait items implemented, missing: .*\"\n+\t$(RUSTC) m2.rs 2>&1 | grep \"  --> m2.rs:18:1\"\n+\t$(RUSTC) m2.rs 2>&1 | grep \"   | ^ missing .CONSTANT., .Type., .method. in implementation\"\n+\t$(RUSTC) m2.rs 2>&1 | grep \"   = note: .CONSTANT. from trait: .const CONSTANT: u32;.\"\n+\t$(RUSTC) m2.rs 2>&1 | grep \"   = note: .Type. from trait: .type Type;.\"\n+\t$(RUSTC) m2.rs 2>&1 | grep \"   = note: .method. from trait: .fn(&Self, std::string::String) -> <Self as m1::X>::Type.\""}, {"sha": "060c7a9571b7b61ffb4f9f1b8bac300fc94323fa", "filename": "src/test/run-make/missing-items/m1.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/7f2853fda3773d4f9ec28484ba3592d5e825ca59/src%2Ftest%2Frun-make%2Fmissing-items%2Fm1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f2853fda3773d4f9ec28484ba3592d5e825ca59/src%2Ftest%2Frun-make%2Fmissing-items%2Fm1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fmissing-items%2Fm1.rs?ref=7f2853fda3773d4f9ec28484ba3592d5e825ca59", "patch": "@@ -0,0 +1,17 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(associated_consts)]\n+#![crate_type = \"dylib\"]\n+pub trait X {\n+  const CONSTANT: u32;\n+  type Type;\n+  fn method(&self, s: String) -> Self::Type;\n+}"}, {"sha": "7055673acc9a91db82dff223b8d7c4b24aecb37a", "filename": "src/test/run-make/missing-items/m2.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/7f2853fda3773d4f9ec28484ba3592d5e825ca59/src%2Ftest%2Frun-make%2Fmissing-items%2Fm2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f2853fda3773d4f9ec28484ba3592d5e825ca59/src%2Ftest%2Frun-make%2Fmissing-items%2Fm2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fmissing-items%2Fm2.rs?ref=7f2853fda3773d4f9ec28484ba3592d5e825ca59", "patch": "@@ -0,0 +1,19 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(associated_consts)]\n+#![crate_type = \"dylib\"]\n+extern crate m1;\n+\n+struct X {\n+}\n+\n+impl m1::X for X {\n+}"}, {"sha": "9e757860a857b3f96309eb8a721b3c3ea94c637a", "filename": "src/test/ui/span/E0046.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7f2853fda3773d4f9ec28484ba3592d5e825ca59/src%2Ftest%2Fui%2Fspan%2FE0046.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f2853fda3773d4f9ec28484ba3592d5e825ca59/src%2Ftest%2Fui%2Fspan%2FE0046.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2FE0046.rs?ref=7f2853fda3773d4f9ec28484ba3592d5e825ca59", "patch": "@@ -10,6 +10,7 @@\n \n trait Foo {\n     fn foo();\n+    //~^ NOTE `foo` from trait\n }\n \n struct Bar;", "previous_filename": "src/test/compile-fail/E0046.rs"}, {"sha": "729a515612463396cf588abc8c38f174ed0c092f", "filename": "src/test/ui/span/E0046.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/7f2853fda3773d4f9ec28484ba3592d5e825ca59/src%2Ftest%2Fui%2Fspan%2FE0046.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7f2853fda3773d4f9ec28484ba3592d5e825ca59/src%2Ftest%2Fui%2Fspan%2FE0046.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2FE0046.stderr?ref=7f2853fda3773d4f9ec28484ba3592d5e825ca59", "patch": "@@ -0,0 +1,11 @@\n+error[E0046]: not all trait items implemented, missing: `foo`\n+  --> $DIR/E0046.rs:18:1\n+   |\n+12 |     fn foo();\n+   |     --------- `foo` from trait\n+...\n+18 | impl Foo for Bar {}\n+   | ^^^^^^^^^^^^^^^^^^^ missing `foo` in implementation\n+\n+error: aborting due to previous error\n+"}, {"sha": "54ed42af5d582028bd4b241ddbc32daebfddb9ae", "filename": "src/test/ui/span/impl-wrong-item-for-trait.rs", "status": "renamed", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/7f2853fda3773d4f9ec28484ba3592d5e825ca59/src%2Ftest%2Fui%2Fspan%2Fimpl-wrong-item-for-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f2853fda3773d4f9ec28484ba3592d5e825ca59/src%2Ftest%2Fui%2Fspan%2Fimpl-wrong-item-for-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fimpl-wrong-item-for-trait.rs?ref=7f2853fda3773d4f9ec28484ba3592d5e825ca59", "patch": "@@ -10,11 +10,11 @@\n \n #![feature(associated_consts)]\n \n+use std::fmt::Debug;\n+\n trait Foo {\n     fn bar(&self);\n-    //~^ NOTE item in trait\n-    //~| NOTE item in trait\n-    const MY_CONST: u32; //~ NOTE item in trait\n+    const MY_CONST: u32;\n }\n \n pub struct FooConstForMethod;\n@@ -50,4 +50,7 @@ impl Foo for FooTypeForMethod {\n     const MY_CONST: u32 = 1;\n }\n \n+impl Debug for FooTypeForMethod {\n+}\n+\n fn main () {}", "previous_filename": "src/test/compile-fail/impl-wrong-item-for-trait.rs"}, {"sha": "244285e358453ee9737d9a238c5b612072b0407a", "filename": "src/test/ui/span/impl-wrong-item-for-trait.stderr", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/7f2853fda3773d4f9ec28484ba3592d5e825ca59/src%2Ftest%2Fui%2Fspan%2Fimpl-wrong-item-for-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7f2853fda3773d4f9ec28484ba3592d5e825ca59/src%2Ftest%2Fui%2Fspan%2Fimpl-wrong-item-for-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fimpl-wrong-item-for-trait.stderr?ref=7f2853fda3773d4f9ec28484ba3592d5e825ca59", "patch": "@@ -0,0 +1,64 @@\n+error[E0323]: item `bar` is an associated const, which doesn't match its trait `<FooConstForMethod as Foo>`\n+  --> $DIR/impl-wrong-item-for-trait.rs:25:5\n+   |\n+16 |     fn bar(&self);\n+   |     -------------- item in trait\n+...\n+25 |     const bar: u64 = 1;\n+   |     ^^^^^^^^^^^^^^^^^^^ does not match trait\n+\n+error[E0046]: not all trait items implemented, missing: `bar`\n+  --> $DIR/impl-wrong-item-for-trait.rs:22:1\n+   |\n+16 |     fn bar(&self);\n+   |     -------------- `bar` from trait\n+...\n+22 | impl Foo for FooConstForMethod {\n+   | ^ missing `bar` in implementation\n+\n+error[E0324]: item `MY_CONST` is an associated method, which doesn't match its trait `<FooMethodForConst as Foo>`\n+  --> $DIR/impl-wrong-item-for-trait.rs:37:5\n+   |\n+17 |     const MY_CONST: u32;\n+   |     -------------------- item in trait\n+...\n+37 |     fn MY_CONST() {}\n+   |     ^^^^^^^^^^^^^^^^ does not match trait\n+\n+error[E0046]: not all trait items implemented, missing: `MY_CONST`\n+  --> $DIR/impl-wrong-item-for-trait.rs:33:1\n+   |\n+17 |     const MY_CONST: u32;\n+   |     -------------------- `MY_CONST` from trait\n+...\n+33 | impl Foo for FooMethodForConst {\n+   | ^ missing `MY_CONST` in implementation\n+\n+error[E0325]: item `bar` is an associated type, which doesn't match its trait `<FooTypeForMethod as Foo>`\n+  --> $DIR/impl-wrong-item-for-trait.rs:47:5\n+   |\n+16 |     fn bar(&self);\n+   |     -------------- item in trait\n+...\n+47 |     type bar = u64;\n+   |     ^^^^^^^^^^^^^^^ does not match trait\n+\n+error[E0046]: not all trait items implemented, missing: `bar`\n+  --> $DIR/impl-wrong-item-for-trait.rs:44:1\n+   |\n+16 |     fn bar(&self);\n+   |     -------------- `bar` from trait\n+...\n+44 | impl Foo for FooTypeForMethod {\n+   | ^ missing `bar` in implementation\n+\n+error[E0046]: not all trait items implemented, missing: `fmt`\n+  --> $DIR/impl-wrong-item-for-trait.rs:53:1\n+   |\n+53 | impl Debug for FooTypeForMethod {\n+   | ^ missing `fmt` in implementation\n+   |\n+   = note: `fmt` from trait: `fn(&Self, &mut std::fmt::Formatter<'_>) -> std::result::Result<(), std::fmt::Error>`\n+\n+error: aborting due to 7 previous errors\n+"}, {"sha": "66134a03baf41319a72d8af61edd68e9c0f663fc", "filename": "src/test/ui/span/issue-23729.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7f2853fda3773d4f9ec28484ba3592d5e825ca59/src%2Ftest%2Fui%2Fspan%2Fissue-23729.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f2853fda3773d4f9ec28484ba3592d5e825ca59/src%2Ftest%2Fui%2Fspan%2Fissue-23729.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-23729.rs?ref=7f2853fda3773d4f9ec28484ba3592d5e825ca59", "patch": "@@ -20,6 +20,7 @@ fn main() {\n         impl Iterator for Recurrence {\n             //~^ ERROR E0046\n             //~| NOTE missing `Item` in implementation\n+            //~| NOTE `Item` from trait: `type Item;`\n             #[inline]\n             fn next(&mut self) -> Option<u64> {\n                 if self.pos < 2 {", "previous_filename": "src/test/compile-fail/issue-23729.rs"}, {"sha": "493ca01778bc15de42d55ce7865f1e381bc2f9cf", "filename": "src/test/ui/span/issue-23729.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7f2853fda3773d4f9ec28484ba3592d5e825ca59/src%2Ftest%2Fui%2Fspan%2Fissue-23729.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7f2853fda3773d4f9ec28484ba3592d5e825ca59/src%2Ftest%2Fui%2Fspan%2Fissue-23729.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-23729.stderr?ref=7f2853fda3773d4f9ec28484ba3592d5e825ca59", "patch": "@@ -0,0 +1,10 @@\n+error[E0046]: not all trait items implemented, missing: `Item`\n+  --> $DIR/issue-23729.rs:20:9\n+   |\n+20 |         impl Iterator for Recurrence {\n+   |         ^ missing `Item` in implementation\n+   |\n+   = note: `Item` from trait: `type Item;`\n+\n+error: aborting due to previous error\n+"}, {"sha": "a5ab443597b9b71b059e0b365faaa28cd70bae05", "filename": "src/test/ui/span/issue-23827.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7f2853fda3773d4f9ec28484ba3592d5e825ca59/src%2Ftest%2Fui%2Fspan%2Fissue-23827.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f2853fda3773d4f9ec28484ba3592d5e825ca59/src%2Ftest%2Fui%2Fspan%2Fissue-23827.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-23827.rs?ref=7f2853fda3773d4f9ec28484ba3592d5e825ca59", "patch": "@@ -36,6 +36,7 @@ impl<C: Component> FnMut<(C,)> for Prototype {\n impl<C: Component> FnOnce<(C,)> for Prototype {\n     //~^ ERROR E0046\n     //~| NOTE missing `Output` in implementation\n+    //~| NOTE `Output` from trait: `type Output;`\n     extern \"rust-call\" fn call_once(self, (comp,): (C,)) -> Prototype {\n         Fn::call(&self, (comp,))\n     }", "previous_filename": "src/test/compile-fail/issue-23827.rs"}, {"sha": "5130bb53a198bf2bb9ce01bd883ac44d1dbdb450", "filename": "src/test/ui/span/issue-23827.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7f2853fda3773d4f9ec28484ba3592d5e825ca59/src%2Ftest%2Fui%2Fspan%2Fissue-23827.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7f2853fda3773d4f9ec28484ba3592d5e825ca59/src%2Ftest%2Fui%2Fspan%2Fissue-23827.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-23827.stderr?ref=7f2853fda3773d4f9ec28484ba3592d5e825ca59", "patch": "@@ -0,0 +1,10 @@\n+error[E0046]: not all trait items implemented, missing: `Output`\n+  --> $DIR/issue-23827.rs:36:1\n+   |\n+36 | impl<C: Component> FnOnce<(C,)> for Prototype {\n+   | ^ missing `Output` in implementation\n+   |\n+   = note: `Output` from trait: `type Output;`\n+\n+error: aborting due to previous error\n+"}, {"sha": "0997dc802f88bfc7a9cc70c8959e278ea2576416", "filename": "src/test/ui/span/issue-24356.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7f2853fda3773d4f9ec28484ba3592d5e825ca59/src%2Ftest%2Fui%2Fspan%2Fissue-24356.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f2853fda3773d4f9ec28484ba3592d5e825ca59/src%2Ftest%2Fui%2Fspan%2Fissue-24356.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-24356.rs?ref=7f2853fda3773d4f9ec28484ba3592d5e825ca59", "patch": "@@ -30,6 +30,7 @@ fn main() {\n         impl Deref for Thing {\n             //~^ ERROR E0046\n             //~| NOTE missing `Target` in implementation\n+            //~| NOTE `Target` from trait: `type Target;`\n             fn deref(&self) -> i8 { self.0 }\n         }\n ", "previous_filename": "src/test/compile-fail/issue-24356.rs"}, {"sha": "906ef25ca0e10b4d3d405ab839df60ffb2b6d4ac", "filename": "src/test/ui/span/issue-24356.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7f2853fda3773d4f9ec28484ba3592d5e825ca59/src%2Ftest%2Fui%2Fspan%2Fissue-24356.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7f2853fda3773d4f9ec28484ba3592d5e825ca59/src%2Ftest%2Fui%2Fspan%2Fissue-24356.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-24356.stderr?ref=7f2853fda3773d4f9ec28484ba3592d5e825ca59", "patch": "@@ -0,0 +1,10 @@\n+error[E0046]: not all trait items implemented, missing: `Target`\n+  --> $DIR/issue-24356.rs:30:9\n+   |\n+30 |         impl Deref for Thing {\n+   |         ^ missing `Target` in implementation\n+   |\n+   = note: `Target` from trait: `type Target;`\n+\n+error: aborting due to previous error\n+"}]}