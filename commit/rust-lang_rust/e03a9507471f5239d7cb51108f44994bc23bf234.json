{"sha": "e03a9507471f5239d7cb51108f44994bc23bf234", "node_id": "C_kwDOAAsO6NoAKGUwM2E5NTA3NDcxZjUyMzlkN2NiNTExMDhmNDQ5OTRiYzIzYmYyMzQ", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume.gomez@huawei.com", "date": "2022-03-30T09:32:03Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume.gomez@huawei.com", "date": "2022-04-18T18:59:09Z"}, "message": "Handle separators in their own functions and fix missing handling of tabs", "tree": {"sha": "023c9057d6ee5884ce2bf184d2546c938dfa0f92", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/023c9057d6ee5884ce2bf184d2546c938dfa0f92"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e03a9507471f5239d7cb51108f44994bc23bf234", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e03a9507471f5239d7cb51108f44994bc23bf234", "html_url": "https://github.com/rust-lang/rust/commit/e03a9507471f5239d7cb51108f44994bc23bf234", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e03a9507471f5239d7cb51108f44994bc23bf234/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "da829d8d9de73f196b17ab5e8b4a4c07863e30c9", "url": "https://api.github.com/repos/rust-lang/rust/commits/da829d8d9de73f196b17ab5e8b4a4c07863e30c9", "html_url": "https://github.com/rust-lang/rust/commit/da829d8d9de73f196b17ab5e8b4a4c07863e30c9"}], "stats": {"total": 239, "additions": 235, "deletions": 4}, "files": [{"sha": "7a318cbfa45034063a844bb8b5fef9396f89b71c", "filename": "src/librustdoc/html/static/js/search.js", "status": "modified", "additions": 18, "deletions": 3, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/e03a9507471f5239d7cb51108f44994bc23bf234/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsearch.js", "raw_url": "https://github.com/rust-lang/rust/raw/e03a9507471f5239d7cb51108f44994bc23bf234/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsearch.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsearch.js?ref=e03a9507471f5239d7cb51108f44994bc23bf234", "patch": "@@ -226,6 +226,17 @@ window.initSearch = function(rawSearchIndex) {\n             (c >= 'A' && c <= 'Z'));\n     }\n \n+    /**\n+     * Returns `true` if the given `c` character is a separator.\n+     *\n+     * @param {string} c\n+     *\n+     * @return {boolean}\n+     */\n+    function isSeparatorCharacter(c) {\n+        return \", \\t\".indexOf(c) !== -1;\n+    }\n+\n     /**\n      * @param {ParsedQuery} query\n      * @param {ParserState} parserState\n@@ -295,7 +306,11 @@ window.initSearch = function(rawSearchIndex) {\n                 if (!isIdentCharacter(c)) {\n                     if (isErrorCharacter(c)) {\n                         throw new Error(`Unexpected \\`${c}\\``);\n-                    } else if (isStopCharacter(c) || isSpecialStartCharacter(c)) {\n+                    } else if (\n+                        isStopCharacter(c) ||\n+                        isSpecialStartCharacter(c) ||\n+                        isSeparatorCharacter(c))\n+                    {\n                         break;\n                     }\n                     // If we allow paths (\"str::string\" for example).\n@@ -358,7 +373,7 @@ window.initSearch = function(rawSearchIndex) {\n             var c = parserState.userQuery[parserState.pos];\n             if (c === endChar) {\n                 break;\n-            } else if (c === \",\" || c === \" \") {\n+            } else if (isSeparatorCharacter(c)) {\n                 parserState.pos += 1;\n                 foundStopChar = true;\n                 continue;\n@@ -409,7 +424,7 @@ window.initSearch = function(rawSearchIndex) {\n             c = parserState.userQuery[parserState.pos];\n             if (isStopCharacter(c)) {\n                 foundStopChar = true;\n-                if (c === \",\" || c === \" \") {\n+                if (isSeparatorCharacter(c)) {\n                     parserState.pos += 1;\n                     continue;\n                 } else if (c === \"-\" || c === \">\") {"}, {"sha": "7b7ca4dbc354d2390196811bb906bf6dc8bcdd6e", "filename": "src/test/rustdoc-js-std/parser-errors.js", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e03a9507471f5239d7cb51108f44994bc23bf234/src%2Ftest%2Frustdoc-js-std%2Fparser-errors.js", "raw_url": "https://github.com/rust-lang/rust/raw/e03a9507471f5239d7cb51108f44994bc23bf234/src%2Ftest%2Frustdoc-js-std%2Fparser-errors.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-js-std%2Fparser-errors.js?ref=e03a9507471f5239d7cb51108f44994bc23bf234", "patch": "@@ -27,6 +27,7 @@ const QUERY = [\n     \"aaaaa<>b\",\n     \"fn:aaaaa<>b\",\n     \"->a<>b\",\n+    \"a<->\",\n ];\n \n const PARSED = [\n@@ -282,4 +283,13 @@ const PARSED = [\n         userQuery: '->a<>b',\n         error: 'Expected `,` or ` `, found `b`',\n     },\n+    {\n+        elems: [],\n+        foundElems: 0,\n+        original: 'a<->',\n+        returned: [],\n+        typeFilter: -1,\n+        userQuery: 'a<->',\n+        error: 'Unexpected `-` after `<`',\n+    },\n ];"}, {"sha": "5b7abdfa8d684ce2ab1faa579dc571368a82f92b", "filename": "src/test/rustdoc-js-std/parser-separators.js", "status": "added", "additions": 206, "deletions": 0, "changes": 206, "blob_url": "https://github.com/rust-lang/rust/blob/e03a9507471f5239d7cb51108f44994bc23bf234/src%2Ftest%2Frustdoc-js-std%2Fparser-separators.js", "raw_url": "https://github.com/rust-lang/rust/raw/e03a9507471f5239d7cb51108f44994bc23bf234/src%2Ftest%2Frustdoc-js-std%2Fparser-separators.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-js-std%2Fparser-separators.js?ref=e03a9507471f5239d7cb51108f44994bc23bf234", "patch": "@@ -0,0 +1,206 @@\n+// ignore-tidy-tab\n+\n+const QUERY = [\n+    'aaaaaa\tb',\n+    'a b',\n+    'a,b',\n+    'a\\tb',\n+    'a<b c>',\n+    'a<b,c>',\n+    'a<b\\tc>',\n+];\n+\n+const PARSED = [\n+    {\n+        elems: [\n+            {\n+                name: 'aaaaaa',\n+                fullPath: ['aaaaaa'],\n+                pathWithoutLast: [],\n+                pathLast: 'aaaaaa',\n+                generics: [],\n+            },\n+            {\n+                name: 'b',\n+                fullPath: ['b'],\n+                pathWithoutLast: [],\n+                pathLast: 'b',\n+                generics: [],\n+            },\n+        ],\n+        foundElems: 2,\n+        original: \"aaaaaa\tb\",\n+        returned: [],\n+        typeFilter: -1,\n+        userQuery: \"aaaaaa\tb\",\n+        error: null,\n+    },\n+    {\n+        elems: [\n+            {\n+                name: 'a',\n+                fullPath: ['a'],\n+                pathWithoutLast: [],\n+                pathLast: 'a',\n+                generics: [],\n+            },\n+            {\n+                name: 'b',\n+                fullPath: ['b'],\n+                pathWithoutLast: [],\n+                pathLast: 'b',\n+                generics: [],\n+            },\n+        ],\n+        foundElems: 2,\n+        original: \"a b\",\n+        returned: [],\n+        typeFilter: -1,\n+        userQuery: \"a b\",\n+        error: null,\n+    },\n+    {\n+        elems: [\n+            {\n+                name: 'a',\n+                fullPath: ['a'],\n+                pathWithoutLast: [],\n+                pathLast: 'a',\n+                generics: [],\n+            },\n+            {\n+                name: 'b',\n+                fullPath: ['b'],\n+                pathWithoutLast: [],\n+                pathLast: 'b',\n+                generics: [],\n+            },\n+        ],\n+        foundElems: 2,\n+        original: \"a,b\",\n+        returned: [],\n+        typeFilter: -1,\n+        userQuery: \"a,b\",\n+        error: null,\n+    },\n+    {\n+        elems: [\n+            {\n+                name: 'a',\n+                fullPath: ['a'],\n+                pathWithoutLast: [],\n+                pathLast: 'a',\n+                generics: [],\n+            },\n+            {\n+                name: 'b',\n+                fullPath: ['b'],\n+                pathWithoutLast: [],\n+                pathLast: 'b',\n+                generics: [],\n+            },\n+        ],\n+        foundElems: 2,\n+        original: \"a\\tb\",\n+        returned: [],\n+        typeFilter: -1,\n+        userQuery: \"a\\tb\",\n+        error: null,\n+    },\n+    {\n+        elems: [\n+            {\n+                name: 'a',\n+                fullPath: ['a'],\n+                pathWithoutLast: [],\n+                pathLast: 'a',\n+                generics: [\n+                    {\n+                        name: 'b',\n+                        fullPath: ['b'],\n+                        pathWithoutLast: [],\n+                        pathLast: 'b',\n+                        generics: [],\n+                    },\n+                    {\n+                        name: 'c',\n+                        fullPath: ['c'],\n+                        pathWithoutLast: [],\n+                        pathLast: 'c',\n+                        generics: [],\n+                    },\n+                ],\n+            },\n+        ],\n+        foundElems: 1,\n+        original: \"a<b c>\",\n+        returned: [],\n+        typeFilter: -1,\n+        userQuery: \"a<b c>\",\n+        error: null,\n+    },\n+    {\n+        elems: [\n+            {\n+                name: 'a',\n+                fullPath: ['a'],\n+                pathWithoutLast: [],\n+                pathLast: 'a',\n+                generics: [\n+                    {\n+                        name: 'b',\n+                        fullPath: ['b'],\n+                        pathWithoutLast: [],\n+                        pathLast: 'b',\n+                        generics: [],\n+                    },\n+                    {\n+                        name: 'c',\n+                        fullPath: ['c'],\n+                        pathWithoutLast: [],\n+                        pathLast: 'c',\n+                        generics: [],\n+                    },\n+                ],\n+            },\n+        ],\n+        foundElems: 1,\n+        original: \"a<b,c>\",\n+        returned: [],\n+        typeFilter: -1,\n+        userQuery: \"a<b,c>\",\n+        error: null,\n+    },\n+    {\n+        elems: [\n+            {\n+                name: 'a',\n+                fullPath: ['a'],\n+                pathWithoutLast: [],\n+                pathLast: 'a',\n+                generics: [\n+                    {\n+                        name: 'b',\n+                        fullPath: ['b'],\n+                        pathWithoutLast: [],\n+                        pathLast: 'b',\n+                        generics: [],\n+                    },\n+                    {\n+                        name: 'c',\n+                        fullPath: ['c'],\n+                        pathWithoutLast: [],\n+                        pathLast: 'c',\n+                        generics: [],\n+                    },\n+                ],\n+            },\n+        ],\n+        foundElems: 1,\n+        original: \"a<b\\tc>\",\n+        returned: [],\n+        typeFilter: -1,\n+        userQuery: \"a<b\\tc>\",\n+        error: null,\n+    },\n+];"}, {"sha": "042581ac7ad73e62564a42ee5b1f3e2e2bbc0fc4", "filename": "src/tools/rustdoc-js/tester.js", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e03a9507471f5239d7cb51108f44994bc23bf234/src%2Ftools%2Frustdoc-js%2Ftester.js", "raw_url": "https://github.com/rust-lang/rust/raw/e03a9507471f5239d7cb51108f44994bc23bf234/src%2Ftools%2Frustdoc-js%2Ftester.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustdoc-js%2Ftester.js?ref=e03a9507471f5239d7cb51108f44994bc23bf234", "patch": "@@ -275,7 +275,7 @@ function loadSearchJsAndIndex(searchJs, searchIndex, storageJs, crate) {\n                            \"parseInput\", \"getItemsBefore\", \"getNextElem\", \"createQueryElement\",\n                            \"isReturnArrow\", \"isPathStart\", \"getStringElem\", \"newParsedQuery\",\n                            \"itemTypeFromName\", \"isEndCharacter\", \"isErrorCharacter\",\n-                           \"isIdentCharacter\"];\n+                           \"isIdentCharacter\", \"isSeparatorCharacter\"];\n \n     const functions = [\"hasOwnPropertyRustdoc\", \"onEach\"];\n     ALIASES = {};"}]}