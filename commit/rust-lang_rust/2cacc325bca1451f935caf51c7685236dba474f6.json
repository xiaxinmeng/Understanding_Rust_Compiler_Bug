{"sha": "2cacc325bca1451f935caf51c7685236dba474f6", "node_id": "C_kwDOAAsO6NoAKDJjYWNjMzI1YmNhMTQ1MWY5MzVjYWY1MWM3Njg1MjM2ZGJhNDc0ZjY", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-05-26T18:59:43Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-05-26T18:59:43Z"}, "message": "Rollup merge of #97424 - matthiaskrgr:clippy_complexity_may26, r=oli-obk\n\nclippy::complexity fixes\n\nclone_on_copy\nuseless_format\nbind_instead_of_map\nfilter_map_identity\nuseless_conversion\nmap_flatten\nunnecessary_unwrap", "tree": {"sha": "fcc61ff0ba11a8f03e8f24726cc1f780dad44165", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fcc61ff0ba11a8f03e8f24726cc1f780dad44165"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2cacc325bca1451f935caf51c7685236dba474f6", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJij84fCRBK7hj4Ov3rIwAAoDAIAJRoqcbgfFJxrlMwrJSvQ5vZ\nmQVyhvKj5IHXvrTBHsu4+gT4aQWHC3zWpf814smXlep8fiK+ZR3ItsN3mlYgFqFV\nj7/KysjZg+mecrXne6E0qshoMyexwHznpJBPaw9nl+T7iMTAujBngQ5F21+Z+Ld0\nQJUjbjMwPEBm7gQYRHeu8gcnzelJ+SG7ZNKiIKgkVcFKSoTd9n6C5iDfUJSB1MVu\n2UkqRwAOLqLYc9YMPYnNLLXGHVcL7f21zoQ4McNhAHdkSHJkq6l+4YZI6ZlbfAqv\nOb8c/Q6w+uRPIqw6I3wkzSwIna+D0EKaLkYBSkx8+RF6QctJ3Jz12XdASM/rltY=\n=kZ2T\n-----END PGP SIGNATURE-----\n", "payload": "tree fcc61ff0ba11a8f03e8f24726cc1f780dad44165\nparent f33601e753613a91bfadce0a5086bcd1cb60934e\nparent 5fc8a8e22799b6d2d768e5cbb59003930631c2f2\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1653591583 +0200\ncommitter GitHub <noreply@github.com> 1653591583 +0200\n\nRollup merge of #97424 - matthiaskrgr:clippy_complexity_may26, r=oli-obk\n\nclippy::complexity fixes\n\nclone_on_copy\nuseless_format\nbind_instead_of_map\nfilter_map_identity\nuseless_conversion\nmap_flatten\nunnecessary_unwrap\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2cacc325bca1451f935caf51c7685236dba474f6", "html_url": "https://github.com/rust-lang/rust/commit/2cacc325bca1451f935caf51c7685236dba474f6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2cacc325bca1451f935caf51c7685236dba474f6/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f33601e753613a91bfadce0a5086bcd1cb60934e", "url": "https://api.github.com/repos/rust-lang/rust/commits/f33601e753613a91bfadce0a5086bcd1cb60934e", "html_url": "https://github.com/rust-lang/rust/commit/f33601e753613a91bfadce0a5086bcd1cb60934e"}, {"sha": "5fc8a8e22799b6d2d768e5cbb59003930631c2f2", "url": "https://api.github.com/repos/rust-lang/rust/commits/5fc8a8e22799b6d2d768e5cbb59003930631c2f2", "html_url": "https://github.com/rust-lang/rust/commit/5fc8a8e22799b6d2d768e5cbb59003930631c2f2"}], "stats": {"total": 73, "additions": 28, "deletions": 45}, "files": [{"sha": "0520c9ac60cf019ed29d4cb9894234d344771abb", "filename": "compiler/rustc_ast_passes/src/ast_validation.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2cacc325bca1451f935caf51c7685236dba474f6/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2cacc325bca1451f935caf51c7685236dba474f6/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs?ref=2cacc325bca1451f935caf51c7685236dba474f6", "patch": "@@ -1463,18 +1463,17 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n         if let GenericBound::Trait(ref poly, modify) = *bound {\n             match (ctxt, modify) {\n                 (BoundKind::SuperTraits, TraitBoundModifier::Maybe) => {\n-                    let mut err = self.err_handler().struct_span_err(\n-                        poly.span,\n-                        &format!(\"`?Trait` is not permitted in supertraits\"),\n-                    );\n+                    let mut err = self\n+                        .err_handler()\n+                        .struct_span_err(poly.span, \"`?Trait` is not permitted in supertraits\");\n                     let path_str = pprust::path_to_string(&poly.trait_ref.path);\n                     err.note(&format!(\"traits are `?{}` by default\", path_str));\n                     err.emit();\n                 }\n                 (BoundKind::TraitObject, TraitBoundModifier::Maybe) => {\n                     let mut err = self.err_handler().struct_span_err(\n                         poly.span,\n-                        &format!(\"`?Trait` is not permitted in trait object types\"),\n+                        \"`?Trait` is not permitted in trait object types\",\n                     );\n                     err.emit();\n                 }"}, {"sha": "6478a104815b6b3b691936bbb6eb92b24792a052", "filename": "compiler/rustc_borrowck/src/diagnostics/region_errors.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2cacc325bca1451f935caf51c7685236dba474f6/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2cacc325bca1451f935caf51c7685236dba474f6/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_errors.rs?ref=2cacc325bca1451f935caf51c7685236dba474f6", "patch": "@@ -450,10 +450,10 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n                 _ => None,\n             };\n \n-            if defined_hir.is_some() {\n+            if let Some(def_hir) = defined_hir {\n                 let upvars_map = self.infcx.tcx.upvars_mentioned(def_id).unwrap();\n-                let upvar_def_span = self.infcx.tcx.hir().span(defined_hir.unwrap());\n-                let upvar_span = upvars_map.get(&defined_hir.unwrap()).unwrap().span;\n+                let upvar_def_span = self.infcx.tcx.hir().span(def_hir);\n+                let upvar_span = upvars_map.get(&def_hir).unwrap().span;\n                 diag.span_label(upvar_def_span, \"variable defined here\");\n                 diag.span_label(upvar_span, \"variable captured here\");\n             }"}, {"sha": "3185b952ab886b234785ec895921548263a1a228", "filename": "compiler/rustc_codegen_ssa/src/mir/place.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2cacc325bca1451f935caf51c7685236dba474f6/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2cacc325bca1451f935caf51c7685236dba474f6/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fplace.rs?ref=2cacc325bca1451f935caf51c7685236dba474f6", "patch": "@@ -462,7 +462,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n             }\n         };\n         for elem in place_ref.projection[base..].iter() {\n-            cg_base = match elem.clone() {\n+            cg_base = match *elem {\n                 mir::ProjectionElem::Deref => {\n                     // a box with a non-zst allocator should not be directly dereferenced\n                     if cg_base.layout.ty.is_box() && !cg_base.layout.field(cx, 1).is_zst() {"}, {"sha": "0c954ac6e5f6e6a185c40adfbc73cb0e4a5d8ace", "filename": "compiler/rustc_const_eval/src/interpret/eval_context.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2cacc325bca1451f935caf51c7685236dba474f6/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2cacc325bca1451f935caf51c7685236dba474f6/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Feval_context.rs?ref=2cacc325bca1451f935caf51c7685236dba474f6", "patch": "@@ -520,13 +520,13 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         frame\n             .instance\n             .try_subst_mir_and_normalize_erasing_regions(*self.tcx, self.param_env, value)\n-            .or_else(|e| {\n+            .map_err(|e| {\n                 self.tcx.sess.delay_span_bug(\n                     self.cur_span(),\n                     format!(\"failed to normalize {}\", e.get_type_for_failure()).as_str(),\n                 );\n \n-                Err(InterpError::InvalidProgram(InvalidProgramInfo::TooGeneric))\n+                InterpError::InvalidProgram(InvalidProgramInfo::TooGeneric)\n             })\n     }\n \n@@ -1009,11 +1009,7 @@ impl<'a, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> std::fmt::Debug\n                     }\n                 }\n \n-                write!(\n-                    fmt,\n-                    \": {:?}\",\n-                    self.ecx.dump_allocs(allocs.into_iter().filter_map(|x| x).collect())\n-                )\n+                write!(fmt, \": {:?}\", self.ecx.dump_allocs(allocs.into_iter().flatten().collect()))\n             }\n             Place::Ptr(mplace) => match mplace.ptr.provenance.and_then(Provenance::get_alloc_id) {\n                 Some(alloc_id) => write!("}, {"sha": "f2ec80b0c1b6369676dfbb31903ad9fe9621ec48", "filename": "compiler/rustc_log/src/lib.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2cacc325bca1451f935caf51c7685236dba474f6/compiler%2Frustc_log%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2cacc325bca1451f935caf51c7685236dba474f6/compiler%2Frustc_log%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_log%2Fsrc%2Flib.rs?ref=2cacc325bca1451f935caf51c7685236dba474f6", "patch": "@@ -69,13 +69,7 @@ pub fn init_env_logger(env: &str) -> Result<(), Error> {\n \n     let verbose_entry_exit = match env::var_os(String::from(env) + \"_ENTRY_EXIT\") {\n         None => false,\n-        Some(v) => {\n-            if &v == \"0\" {\n-                false\n-            } else {\n-                true\n-            }\n-        }\n+        Some(v) => &v != \"0\",\n     };\n \n     let layer = tracing_tree::HierarchicalLayer::default()"}, {"sha": "c1e1cfef9f89d8008d502e45f3e99a1575fc145b", "filename": "compiler/rustc_middle/src/mir/patch.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2cacc325bca1451f935caf51c7685236dba474f6/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fpatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2cacc325bca1451f935caf51c7685236dba474f6/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fpatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fpatch.rs?ref=2cacc325bca1451f935caf51c7685236dba474f6", "patch": "@@ -167,8 +167,7 @@ impl<'tcx> MirPatch<'tcx> {\n             if loc.statement_index > body[loc.block].statements.len() {\n                 let term = body[loc.block].terminator();\n                 for i in term.successors() {\n-                    stmts_and_targets\n-                        .push((Statement { source_info, kind: stmt.clone() }, i.clone()));\n+                    stmts_and_targets.push((Statement { source_info, kind: stmt.clone() }, i));\n                 }\n                 delta += 1;\n                 continue;"}, {"sha": "ccbb518e72d08d49c905132c76c8de98bf5f208c", "filename": "compiler/rustc_mir_build/src/build/expr/into.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2cacc325bca1451f935caf51c7685236dba474f6/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Finto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2cacc325bca1451f935caf51c7685236dba474f6/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Finto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Finto.rs?ref=2cacc325bca1451f935caf51c7685236dba474f6", "patch": "@@ -435,11 +435,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                         }\n                         thir::InlineAsmOperand::SymFn { value, span } => {\n                             mir::InlineAsmOperand::SymFn {\n-                                value: Box::new(Constant {\n-                                    span,\n-                                    user_ty: None,\n-                                    literal: value.into(),\n-                                }),\n+                                value: Box::new(Constant { span, user_ty: None, literal: value }),\n                             }\n                         }\n                         thir::InlineAsmOperand::SymStatic { def_id } => {"}, {"sha": "3774a39503521c7b9cb5d3e56435fe34f47cbc60", "filename": "compiler/rustc_mir_build/src/build/matches/test.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2cacc325bca1451f935caf51c7685236dba474f6/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2cacc325bca1451f935caf51c7685236dba474f6/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Ftest.rs?ref=2cacc325bca1451f935caf51c7685236dba474f6", "patch": "@@ -264,7 +264,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                     );\n                 } else if let [success, fail] = *make_target_blocks(self) {\n                     assert_eq!(value.ty(), ty);\n-                    let expect = self.literal_operand(test.span, value.into());\n+                    let expect = self.literal_operand(test.span, value);\n                     let val = Operand::Copy(place);\n                     self.compare(block, success, fail, source_info, BinOp::Eq, expect, val);\n                 } else {\n@@ -277,8 +277,8 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 let target_blocks = make_target_blocks(self);\n \n                 // Test `val` by computing `lo <= val && val <= hi`, using primitive comparisons.\n-                let lo = self.literal_operand(test.span, lo.into());\n-                let hi = self.literal_operand(test.span, hi.into());\n+                let lo = self.literal_operand(test.span, lo);\n+                let hi = self.literal_operand(test.span, hi);\n                 let val = Operand::Copy(place);\n \n                 let [success, fail] = *target_blocks else {\n@@ -370,7 +370,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         place: Place<'tcx>,\n         mut ty: Ty<'tcx>,\n     ) {\n-        let mut expect = self.literal_operand(source_info.span, value.into());\n+        let mut expect = self.literal_operand(source_info.span, value);\n         let mut val = Operand::Copy(place);\n \n         // If we're using `b\"...\"` as a pattern, we need to insert an"}, {"sha": "82e1ae9d274c0034fcb3e8b530efb7ec3c5b4177", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/checks.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2cacc325bca1451f935caf51c7685236dba474f6/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2cacc325bca1451f935caf51c7685236dba474f6/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs?ref=2cacc325bca1451f935caf51c7685236dba474f6", "patch": "@@ -845,7 +845,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         let first_provided_ty = if let Some((ty, _)) = final_arg_types[input_idx] {\n                             format!(\",found `{}`\", ty)\n                         } else {\n-                            \"\".into()\n+                            String::new()\n                         };\n                         labels.push((\n                             first_span,\n@@ -857,7 +857,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                             if let Some((ty, _)) = final_arg_types[other_input_idx] {\n                                 format!(\",found `{}`\", ty)\n                             } else {\n-                                \"\".into()\n+                                String::new()\n                             };\n                         labels.push((\n                             second_span,\n@@ -875,7 +875,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                             let provided_ty = if let Some((ty, _)) = final_arg_types[dst_arg] {\n                                 format!(\",found `{}`\", ty)\n                             } else {\n-                                \"\".into()\n+                                String::new()\n                             };\n                             labels.push((\n                                 provided_args[dst_arg].span,\n@@ -1744,8 +1744,7 @@ fn label_fn_like<'tcx>(\n             .get_if_local(def_id)\n             .and_then(|node| node.body_id())\n             .into_iter()\n-            .map(|id| tcx.hir().body(id).params)\n-            .flatten();\n+            .flat_map(|id| tcx.hir().body(id).params);\n \n         for param in params {\n             spans.push_span_label(param.span, String::new());"}, {"sha": "4e54d554c6ec23a510856618cd708efb3292e86c", "filename": "compiler/rustc_typeck/src/check/method/suggest.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2cacc325bca1451f935caf51c7685236dba474f6/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2cacc325bca1451f935caf51c7685236dba474f6/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs?ref=2cacc325bca1451f935caf51c7685236dba474f6", "patch": "@@ -492,7 +492,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                                 Obligation {\n                                     cause: cause.clone(),\n                                     param_env: self.param_env,\n-                                    predicate: predicate.clone(),\n+                                    predicate: *predicate,\n                                     recursion_depth: 0,\n                                 },\n                             ));\n@@ -676,7 +676,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                                 let span = self_ty.span.ctxt().outer_expn_data().call_site;\n                                 let mut spans: MultiSpan = span.into();\n                                 spans.push_span_label(span, derive_msg.to_string());\n-                                let entry = spanned_predicates.entry(spans.into());\n+                                let entry = spanned_predicates.entry(spans);\n                                 entry.or_insert_with(|| (path, tr_self_ty, Vec::new())).2.push(p);\n                             }\n \n@@ -704,7 +704,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                                     ident.span.into()\n                                 };\n                                 spans.push_span_label(ident.span, \"in this trait\".to_string());\n-                                let entry = spanned_predicates.entry(spans.into());\n+                                let entry = spanned_predicates.entry(spans);\n                                 entry.or_insert_with(|| (path, tr_self_ty, Vec::new())).2.push(p);\n                             }\n \n@@ -748,7 +748,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                                 }\n                                 spans.push_span_label(self_ty.span, String::new());\n \n-                                let entry = spanned_predicates.entry(spans.into());\n+                                let entry = spanned_predicates.entry(spans);\n                                 entry.or_insert_with(|| (path, tr_self_ty, Vec::new())).2.push(p);\n                             }\n                             _ => {}\n@@ -1460,7 +1460,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                             {\n                                 derives.push((\n                                     self_name.clone(),\n-                                    self_span.clone(),\n+                                    self_span,\n                                     parent_diagnostic_name.to_string(),\n                                 ));\n                             }"}, {"sha": "637f6459525a2853df22fc02f2adf9092e65bd71", "filename": "compiler/rustc_typeck/src/check/op.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2cacc325bca1451f935caf51c7685236dba474f6/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2cacc325bca1451f935caf51c7685236dba474f6/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fop.rs?ref=2cacc325bca1451f935caf51c7685236dba474f6", "patch": "@@ -705,7 +705,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         let predicates = errors\n                             .iter()\n                             .filter_map(|error| {\n-                                error.obligation.predicate.clone().to_opt_poly_trait_pred()\n+                                error.obligation.predicate.to_opt_poly_trait_pred()\n                             });\n                         for pred in predicates {\n                             self.infcx.suggest_restricting_param_bound("}]}