{"sha": "5cd10d2fef8ffa68903b18726f19ac52a04725cc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVjZDEwZDJmZWY4ZmZhNjg5MDNiMTg3MjZmMTlhYzUyYTA0NzI1Y2M=", "commit": {"author": {"name": "Paul Stansifer", "email": "paul.stansifer@gmail.com", "date": "2011-06-02T21:03:17Z"}, "committer": {"name": "Paul Stansifer", "email": "paul.stansifer@gmail.com", "date": "2011-06-02T21:03:17Z"}, "message": "Error message, instead of segfault, when recursive types are used.", "tree": {"sha": "67a1fdbd048b6297a38ad645e37d61e00bb19eb0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/67a1fdbd048b6297a38ad645e37d61e00bb19eb0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5cd10d2fef8ffa68903b18726f19ac52a04725cc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5cd10d2fef8ffa68903b18726f19ac52a04725cc", "html_url": "https://github.com/rust-lang/rust/commit/5cd10d2fef8ffa68903b18726f19ac52a04725cc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5cd10d2fef8ffa68903b18726f19ac52a04725cc/comments", "author": {"login": "paulstansifer", "id": 1431, "node_id": "MDQ6VXNlcjE0MzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1431?v=4", "gravatar_id": "", "url": "https://api.github.com/users/paulstansifer", "html_url": "https://github.com/paulstansifer", "followers_url": "https://api.github.com/users/paulstansifer/followers", "following_url": "https://api.github.com/users/paulstansifer/following{/other_user}", "gists_url": "https://api.github.com/users/paulstansifer/gists{/gist_id}", "starred_url": "https://api.github.com/users/paulstansifer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/paulstansifer/subscriptions", "organizations_url": "https://api.github.com/users/paulstansifer/orgs", "repos_url": "https://api.github.com/users/paulstansifer/repos", "events_url": "https://api.github.com/users/paulstansifer/events{/privacy}", "received_events_url": "https://api.github.com/users/paulstansifer/received_events", "type": "User", "site_admin": false}, "committer": {"login": "paulstansifer", "id": 1431, "node_id": "MDQ6VXNlcjE0MzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1431?v=4", "gravatar_id": "", "url": "https://api.github.com/users/paulstansifer", "html_url": "https://github.com/paulstansifer", "followers_url": "https://api.github.com/users/paulstansifer/followers", "following_url": "https://api.github.com/users/paulstansifer/following{/other_user}", "gists_url": "https://api.github.com/users/paulstansifer/gists{/gist_id}", "starred_url": "https://api.github.com/users/paulstansifer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/paulstansifer/subscriptions", "organizations_url": "https://api.github.com/users/paulstansifer/orgs", "repos_url": "https://api.github.com/users/paulstansifer/repos", "events_url": "https://api.github.com/users/paulstansifer/events{/privacy}", "received_events_url": "https://api.github.com/users/paulstansifer/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1b67fbdfd30ef55510ef57e68f106a72cd19b7be", "url": "https://api.github.com/repos/rust-lang/rust/commits/1b67fbdfd30ef55510ef57e68f106a72cd19b7be", "html_url": "https://github.com/rust-lang/rust/commit/1b67fbdfd30ef55510ef57e68f106a72cd19b7be"}], "stats": {"total": 38, "additions": 35, "deletions": 3}, "files": [{"sha": "1575631451c89e18087f574a8abbc4e95c51de66", "filename": "src/comp/front/ast.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5cd10d2fef8ffa68903b18726f19ac52a04725cc/src%2Fcomp%2Ffront%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cd10d2fef8ffa68903b18726f19ac52a04725cc/src%2Fcomp%2Ffront%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fast.rs?ref=5cd10d2fef8ffa68903b18726f19ac52a04725cc", "patch": "@@ -503,6 +503,14 @@ fn is_constraint_arg(@expr e) -> bool {\n     }\n }\n \n+fn eq_ty(&@ty a, &@ty b) -> bool {\n+    ret a == b;\n+}\n+\n+fn hash_ty(&@ty t) -> uint {\n+    ret t.span.lo << 16u + t.span.hi;\n+}\n+\n //\n // Local Variables:\n // mode: rust"}, {"sha": "70557a97ed473acc31be419657e3fecc33d280d6", "filename": "src/comp/middle/ty.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5cd10d2fef8ffa68903b18726f19ac52a04725cc/src%2Fcomp%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cd10d2fef8ffa68903b18726f19ac52a04725cc/src%2Fcomp%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fty.rs?ref=5cd10d2fef8ffa68903b18726f19ac52a04725cc", "patch": "@@ -61,6 +61,11 @@ type item_table = hashmap[ast::def_id,any_item];\n \n type mt = rec(t ty, ast::mutability mut);\n \n+tag cached_ty {\n+    in_progress;\n+    done(t);\n+}\n+\n // Contains information needed to resolve types and (in the future) look up\n // the types of AST nodes.\n type creader_cache = hashmap[tup(int,uint,uint),ty::t];\n@@ -71,7 +76,8 @@ type ctxt = rec(@type_store ts,\n                 item_table items,\n                 type_cache tcache,\n                 creader_cache rcache,\n-                hashmap[t,str] short_names_cache);\n+                hashmap[t,str] short_names_cache,\n+                hashmap[@ast::ty,cached_ty] ast_ty_to_ty_cache);\n type ty_ctxt = ctxt;    // Needed for disambiguation from unify::ctxt.\n \n // Convert from method type to function type.  Pretty easy; we just drop\n@@ -245,7 +251,9 @@ fn mk_ctxt(session::session s, resolve::def_map dm) -> ctxt {\n             tcache = tcache,\n             rcache = mk_rcache(),\n             short_names_cache =\n-            map::mk_hashmap[ty::t,str](ty::hash_ty, ty::eq_ty));\n+            map::mk_hashmap[ty::t,str](ty::hash_ty, ty::eq_ty),\n+            ast_ty_to_ty_cache = \n+            map::mk_hashmap[@ast::ty,cached_ty](ast::hash_ty, ast::eq_ty));\n \n     populate_type_store(cx);\n     ret cx;"}, {"sha": "690ecd4aba861cb742d61d3d14dcb5b422b86ced", "filename": "src/comp/middle/typeck.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/5cd10d2fef8ffa68903b18726f19ac52a04725cc/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cd10d2fef8ffa68903b18726f19ac52a04725cc/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypeck.rs?ref=5cd10d2fef8ffa68903b18726f19ac52a04725cc", "patch": "@@ -227,6 +227,16 @@ fn ast_mode_to_mode(ast::mode mode) -> ty::mode {\n // notion of a type. `getter` is a function that returns the type\n // corresponding to a definition ID:\n fn ast_ty_to_ty(&ty::ctxt tcx, &ty_getter getter, &@ast::ty ast_ty) -> ty::t {\n+    alt (tcx.ast_ty_to_ty_cache.find(ast_ty)) {\n+        case (some[ty::cached_ty](ty::done(?ty))) { ret ty; } \n+        case (some[ty::cached_ty](ty::in_progress)) {\n+            tcx.sess.span_err(ast_ty.span, \"illegal recursive type \"\n+                + \"(insert a tag in the cycle, if this is desired)\");\n+        }\n+        case (none[ty::cached_ty]) { } /* go on */\n+    }\n+    tcx.ast_ty_to_ty_cache.insert(ast_ty, ty::in_progress);\n+    \n     fn ast_arg_to_arg(&ty::ctxt tcx,\n                       &ty_getter getter,\n                       &rec(ast::mode mode, @ast::ty ty) arg)\n@@ -329,7 +339,7 @@ fn ast_ty_to_ty(&ty::ctxt tcx, &ty_getter getter, &@ast::ty ast_ty) -> ty::t {\n                 case (_)                   {\n                     tcx.sess.span_err(ast_ty.span,\n                        \"found type name used as a variable\");\n-                    fail; }\n+                }\n             }\n \n             cname = some(path_to_str(path));\n@@ -360,6 +370,8 @@ fn ast_ty_to_ty(&ty::ctxt tcx, &ty_getter getter, &@ast::ty ast_ty) -> ty::t {\n             typ = ty::rename(tcx, typ, cname_str);\n         }\n     }\n+\n+    tcx.ast_ty_to_ty_cache.insert(ast_ty, ty::done(typ));\n     ret typ;\n }\n "}, {"sha": "763f1f9b3e42f0da32f97bf1167a12db11a9b285", "filename": "src/test/compile-fail/type-recursive.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5cd10d2fef8ffa68903b18726f19ac52a04725cc/src%2Ftest%2Fcompile-fail%2Ftype-recursive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cd10d2fef8ffa68903b18726f19ac52a04725cc/src%2Ftest%2Fcompile-fail%2Ftype-recursive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftype-recursive.rs?ref=5cd10d2fef8ffa68903b18726f19ac52a04725cc", "patch": "@@ -0,0 +1,4 @@\n+// error-pattern:illegal recursive type\n+type t1 = rec(int foo, t1 foolish);\n+\n+fn main() {}\n\\ No newline at end of file"}]}