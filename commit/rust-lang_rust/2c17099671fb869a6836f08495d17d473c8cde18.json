{"sha": "2c17099671fb869a6836f08495d17d473c8cde18", "node_id": "C_kwDOAAsO6NoAKDJjMTcwOTk2NzFmYjg2OWE2ODM2ZjA4NDk1ZDE3ZDQ3M2M4Y2RlMTg", "commit": {"author": {"name": "Nixon Enraght-Moony", "email": "nixon.emoony@gmail.com", "date": "2022-09-09T23:04:10Z"}, "committer": {"name": "Nixon Enraght-Moony", "email": "nixon.emoony@gmail.com", "date": "2022-09-09T23:40:30Z"}, "message": "Rustdoc-Json: Correcty handle intra-doc-links to items without HTML page\n\nCloses #101531", "tree": {"sha": "c5e4f395de884eda6770f84ef7caa6bb023dc44c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c5e4f395de884eda6770f84ef7caa6bb023dc44c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2c17099671fb869a6836f08495d17d473c8cde18", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2c17099671fb869a6836f08495d17d473c8cde18", "html_url": "https://github.com/rust-lang/rust/commit/2c17099671fb869a6836f08495d17d473c8cde18", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2c17099671fb869a6836f08495d17d473c8cde18/comments", "author": {"login": "aDotInTheVoid", "id": 28781354, "node_id": "MDQ6VXNlcjI4NzgxMzU0", "avatar_url": "https://avatars.githubusercontent.com/u/28781354?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aDotInTheVoid", "html_url": "https://github.com/aDotInTheVoid", "followers_url": "https://api.github.com/users/aDotInTheVoid/followers", "following_url": "https://api.github.com/users/aDotInTheVoid/following{/other_user}", "gists_url": "https://api.github.com/users/aDotInTheVoid/gists{/gist_id}", "starred_url": "https://api.github.com/users/aDotInTheVoid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aDotInTheVoid/subscriptions", "organizations_url": "https://api.github.com/users/aDotInTheVoid/orgs", "repos_url": "https://api.github.com/users/aDotInTheVoid/repos", "events_url": "https://api.github.com/users/aDotInTheVoid/events{/privacy}", "received_events_url": "https://api.github.com/users/aDotInTheVoid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aDotInTheVoid", "id": 28781354, "node_id": "MDQ6VXNlcjI4NzgxMzU0", "avatar_url": "https://avatars.githubusercontent.com/u/28781354?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aDotInTheVoid", "html_url": "https://github.com/aDotInTheVoid", "followers_url": "https://api.github.com/users/aDotInTheVoid/followers", "following_url": "https://api.github.com/users/aDotInTheVoid/following{/other_user}", "gists_url": "https://api.github.com/users/aDotInTheVoid/gists{/gist_id}", "starred_url": "https://api.github.com/users/aDotInTheVoid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aDotInTheVoid/subscriptions", "organizations_url": "https://api.github.com/users/aDotInTheVoid/orgs", "repos_url": "https://api.github.com/users/aDotInTheVoid/repos", "events_url": "https://api.github.com/users/aDotInTheVoid/events{/privacy}", "received_events_url": "https://api.github.com/users/aDotInTheVoid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "98f3001eecbe4cbd091c10ffab45b4c164bb507b", "url": "https://api.github.com/repos/rust-lang/rust/commits/98f3001eecbe4cbd091c10ffab45b4c164bb507b", "html_url": "https://github.com/rust-lang/rust/commit/98f3001eecbe4cbd091c10ffab45b4c164bb507b"}], "stats": {"total": 70, "additions": 63, "deletions": 7}, "files": [{"sha": "f973fd0889ebc364b2bd1cd8d213527d6674baf4", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2c17099671fb869a6836f08495d17d473c8cde18/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c17099671fb869a6836f08495d17d473c8cde18/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=2c17099671fb869a6836f08495d17d473c8cde18", "patch": "@@ -510,7 +510,7 @@ impl Item {\n             .get(&self.item_id)\n             .map_or(&[][..], |v| v.as_slice())\n             .iter()\n-            .filter_map(|ItemLink { link: s, link_text, did, ref fragment }| {\n+            .filter_map(|ItemLink { link: s, link_text, page_id: did, ref fragment }| {\n                 debug!(?did);\n                 if let Ok((mut href, ..)) = href(*did, cx) {\n                     debug!(?href);\n@@ -1134,7 +1134,10 @@ pub(crate) struct ItemLink {\n     /// This may not be the same as `link` if there was a disambiguator\n     /// in an intra-doc link (e.g. \\[`fn@f`\\])\n     pub(crate) link_text: String,\n-    pub(crate) did: DefId,\n+    /// The `DefId` of the Item whose **HTML Page** contains the item being\n+    /// linked to. This will be different to `item_id` on item's that don't\n+    /// have their own page, such as struct fields and enum variants.\n+    pub(crate) page_id: DefId,\n     /// The url fragment to append to the link\n     pub(crate) fragment: Option<UrlFragment>,\n }"}, {"sha": "49a31f5f1da1f8494b9065deab6b3cf76821901c", "filename": "src/librustdoc/json/conversions.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/2c17099671fb869a6836f08495d17d473c8cde18/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c17099671fb869a6836f08495d17d473c8cde18/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fjson%2Fconversions.rs?ref=2c17099671fb869a6836f08495d17d473c8cde18", "patch": "@@ -19,6 +19,7 @@ use crate::clean::utils::print_const_expr;\n use crate::clean::{self, ItemId};\n use crate::formats::item_type::ItemType;\n use crate::json::JsonRenderer;\n+use crate::passes::collect_intra_doc_links::UrlFragment;\n \n impl JsonRenderer<'_> {\n     pub(super) fn convert_item(&self, item: clean::Item) -> Option<Item> {\n@@ -29,8 +30,14 @@ impl JsonRenderer<'_> {\n             .get(&item.item_id)\n             .into_iter()\n             .flatten()\n-            .map(|clean::ItemLink { link, did, .. }| {\n-                (link.clone(), from_item_id((*did).into(), self.tcx))\n+            .map(|clean::ItemLink { link, page_id, fragment, .. }| {\n+                let id = match fragment {\n+                    Some(UrlFragment::Item(frag_id)) => *frag_id,\n+                    // FIXME: Pass the `UserWritten` segment to JSON consumer.\n+                    Some(UrlFragment::UserWritten(_)) | None => *page_id,\n+                };\n+\n+                (link.clone(), from_item_id(id.into(), self.tcx))\n             })\n             .collect();\n         let docs = item.attrs.collapsed_doc_value();"}, {"sha": "677c980f63cc4a5a795eaa0b6d4662c164fd1eb1", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2c17099671fb869a6836f08495d17d473c8cde18/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c17099671fb869a6836f08495d17d473c8cde18/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=2c17099671fb869a6836f08495d17d473c8cde18", "patch": "@@ -223,6 +223,9 @@ enum MalformedGenerics {\n #[derive(Clone, Debug, Hash, PartialEq, Eq)]\n pub(crate) enum UrlFragment {\n     Item(DefId),\n+    /// A part of a page that isn't a rust item.\n+    ///\n+    /// Eg: `[Vector Examples](std::vec::Vec#examples)`\n     UserWritten(String),\n }\n \n@@ -1127,7 +1130,7 @@ impl LinkCollector<'_, '_> {\n                 Some(ItemLink {\n                     link: ori_link.link.clone(),\n                     link_text: link_text.clone(),\n-                    did: res.def_id(self.cx.tcx),\n+                    page_id: res.def_id(self.cx.tcx),\n                     fragment,\n                 })\n             }\n@@ -1146,11 +1149,12 @@ impl LinkCollector<'_, '_> {\n                     item,\n                     &diag_info,\n                 )?;\n-                let id = clean::register_res(self.cx, rustc_hir::def::Res::Def(kind, id));\n+\n+                let page_id = clean::register_res(self.cx, rustc_hir::def::Res::Def(kind, id));\n                 Some(ItemLink {\n                     link: ori_link.link.clone(),\n                     link_text: link_text.clone(),\n-                    did: id,\n+                    page_id,\n                     fragment,\n                 })\n             }"}, {"sha": "73c5334bb5c6a1c428799b2849d5e95d6498f589", "filename": "src/test/rustdoc-json/intra-doc-links/non_page.rs", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/2c17099671fb869a6836f08495d17d473c8cde18/src%2Ftest%2Frustdoc-json%2Fintra-doc-links%2Fnon_page.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c17099671fb869a6836f08495d17d473c8cde18/src%2Ftest%2Frustdoc-json%2Fintra-doc-links%2Fnon_page.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Fintra-doc-links%2Fnon_page.rs?ref=2c17099671fb869a6836f08495d17d473c8cde18", "patch": "@@ -0,0 +1,34 @@\n+// Regression test for <https://github.com/rust-lang/rust/issues/101531>,\n+// where links where to the item who's HTML page had the item linked to.\n+\n+//! [`Struct::struct_field`]\n+//! [`Enum::Variant`]\n+//! [`Trait::AssocType`]\n+//! [`Trait::ASSOC_CONST`]\n+//! [`Trait::method`]\n+\n+// @set struct_field = \"$.index[*][?(@.name=='struct_field')].id\"\n+// @set Variant = \"$.index[*][?(@.name=='Variant')].id\"\n+// @set AssocType = \"$.index[*][?(@.name=='AssocType')].id\"\n+// @set ASSOC_CONST = \"$.index[*][?(@.name=='ASSOC_CONST')].id\"\n+// @set method = \"$.index[*][?(@.name=='method')].id\"\n+\n+// @is \"$.index[*][?(@.name=='non_page')].links['`Struct::struct_field`']\" $struct_field\n+// @is \"$.index[*][?(@.name=='non_page')].links['`Enum::Variant`']\" $Variant\n+// @is \"$.index[*][?(@.name=='non_page')].links['`Trait::AssocType`']\" $AssocType\n+// @is \"$.index[*][?(@.name=='non_page')].links['`Trait::ASSOC_CONST`']\" $ASSOC_CONST\n+// @is \"$.index[*][?(@.name=='non_page')].links['`Trait::method`']\" $method\n+\n+pub struct Struct {\n+    pub struct_field: i32,\n+}\n+\n+pub enum Enum {\n+    Variant(),\n+}\n+\n+pub trait Trait {\n+    const ASSOC_CONST: i32;\n+    type AssocType;\n+    fn method();\n+}"}, {"sha": "6871dfea44aa33993412c02a5699743f75b4ac27", "filename": "src/test/rustdoc-json/intra-doc-links/user_written.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2c17099671fb869a6836f08495d17d473c8cde18/src%2Ftest%2Frustdoc-json%2Fintra-doc-links%2Fuser_written.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c17099671fb869a6836f08495d17d473c8cde18/src%2Ftest%2Frustdoc-json%2Fintra-doc-links%2Fuser_written.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Fintra-doc-links%2Fuser_written.rs?ref=2c17099671fb869a6836f08495d17d473c8cde18", "patch": "@@ -0,0 +1,8 @@\n+//! For motivation, see [the reasons](foo#reasons)\n+\n+/// # Reasons\n+/// To test rustdoc json\n+pub fn foo() {}\n+\n+// @set foo = \"$.index[*][?(@.name=='foo')].id\"\n+// @is \"$.index[*][?(@.name=='user_written')].links['foo#reasons']\" $foo"}]}