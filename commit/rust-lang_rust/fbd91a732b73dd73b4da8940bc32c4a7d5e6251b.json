{"sha": "fbd91a732b73dd73b4da8940bc32c4a7d5e6251b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZiZDkxYTczMmI3M2RkNzNiNGRhODk0MGJjMzJjNGE3ZDVlNjI1MWI=", "commit": {"author": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2015-09-10T23:46:34Z"}, "committer": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2015-09-10T23:46:59Z"}, "message": "Optimize string comparison by using memcmp\n\nllvm seems to be having some trouble optimizing the iterator-based\nstring comparsion method into some equivalent to memcmp. This\nexplicitly calls out to the memcmp intrinisic in order to allow\nllvm to generate better code. In some manual benchmarking, this\nmemcmp-based approach is 20 times faster than the iterator approach.", "tree": {"sha": "875a5e77354d543a6fbb9707d1f48f86bb610fb6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/875a5e77354d543a6fbb9707d1f48f86bb610fb6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fbd91a732b73dd73b4da8940bc32c4a7d5e6251b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fbd91a732b73dd73b4da8940bc32c4a7d5e6251b", "html_url": "https://github.com/rust-lang/rust/commit/fbd91a732b73dd73b4da8940bc32c4a7d5e6251b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fbd91a732b73dd73b4da8940bc32c4a7d5e6251b/comments", "author": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5ff55943a38f2b581bd4ae5d521f57defd1a8b29", "url": "https://api.github.com/repos/rust-lang/rust/commits/5ff55943a38f2b581bd4ae5d521f57defd1a8b29", "html_url": "https://github.com/rust-lang/rust/commit/5ff55943a38f2b581bd4ae5d521f57defd1a8b29"}], "stats": {"total": 35, "additions": 20, "deletions": 15}, "files": [{"sha": "139f589e6c5799b7259a36aa39924051defff65e", "filename": "src/libcore/str/mod.rs", "status": "modified", "additions": 20, "deletions": 15, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/fbd91a732b73dd73b4da8940bc32c4a7d5e6251b/src%2Flibcore%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fbd91a732b73dd73b4da8940bc32c4a7d5e6251b/src%2Flibcore%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fmod.rs?ref=fbd91a732b73dd73b4da8940bc32c4a7d5e6251b", "patch": "@@ -896,14 +896,18 @@ Section: Comparing strings\n #[lang = \"str_eq\"]\n #[inline]\n fn eq_slice(a: &str, b: &str) -> bool {\n+    a.len() == b.len() && unsafe { cmp_slice(a, b, a.len()) == 0 }\n+}\n+\n+/// Bytewise slice comparison.\n+/// NOTE: This uses the system's memcmp, which is currently dramatically\n+/// faster than comparing each byte in a loop.\n+#[inline]\n+unsafe fn cmp_slice(a: &str, b: &str, len: usize) -> i32 {\n     // NOTE: In theory n should be libc::size_t and not usize, but libc is not available here\n     #[allow(improper_ctypes)]\n     extern { fn memcmp(s1: *const i8, s2: *const i8, n: usize) -> i32; }\n-    a.len() == b.len() && unsafe {\n-        memcmp(a.as_ptr() as *const i8,\n-               b.as_ptr() as *const i8,\n-               a.len()) == 0\n-    }\n+    memcmp(a.as_ptr() as *const i8, b.as_ptr() as *const i8, len)\n }\n \n /*\n@@ -1039,8 +1043,8 @@ Section: Trait implementations\n */\n \n mod traits {\n-    use cmp::{Ordering, Ord, PartialEq, PartialOrd, Eq};\n-    use cmp::Ordering::{Less, Equal, Greater};\n+    use cmp::{self, Ordering, Ord, PartialEq, PartialOrd, Eq};\n+    use cmp::Ordering::{Less, Greater};\n     use iter::Iterator;\n     use option::Option;\n     use option::Option::Some;\n@@ -1051,15 +1055,16 @@ mod traits {\n     impl Ord for str {\n         #[inline]\n         fn cmp(&self, other: &str) -> Ordering {\n-            for (s_b, o_b) in self.bytes().zip(other.bytes()) {\n-                match s_b.cmp(&o_b) {\n-                    Greater => return Greater,\n-                    Less => return Less,\n-                    Equal => ()\n-                }\n+            let cmp = unsafe {\n+                super::cmp_slice(self, other, cmp::min(self.len(), other.len()))\n+            };\n+            if cmp == 0 {\n+                self.len().cmp(&other.len())\n+            } else if cmp < 0 {\n+                Less\n+            } else {\n+                Greater\n             }\n-\n-            self.len().cmp(&other.len())\n         }\n     }\n "}]}