{"sha": "92ab76cfa7eae26f525d36ea1d7b08b267b804cc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkyYWI3NmNmYTdlYWUyNmY1MjVkMzZlYTFkN2IwOGIyNjdiODA0Y2M=", "commit": {"author": {"name": "Ayaz Hafiz", "email": "ayaz.hafiz.1@gmail.com", "date": "2020-05-10T17:06:23Z"}, "committer": {"name": "Caleb Cartwright", "email": "calebcartwright@users.noreply.github.com", "date": "2020-10-02T00:12:22Z"}, "message": "fixup! Preserve and format type aliases in extern blocks", "tree": {"sha": "553d9adbe9089233759ccc468b8389d43b40131f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/553d9adbe9089233759ccc468b8389d43b40131f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/92ab76cfa7eae26f525d36ea1d7b08b267b804cc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/92ab76cfa7eae26f525d36ea1d7b08b267b804cc", "html_url": "https://github.com/rust-lang/rust/commit/92ab76cfa7eae26f525d36ea1d7b08b267b804cc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/92ab76cfa7eae26f525d36ea1d7b08b267b804cc/comments", "author": {"login": "ayazhafiz", "id": 20735482, "node_id": "MDQ6VXNlcjIwNzM1NDgy", "avatar_url": "https://avatars.githubusercontent.com/u/20735482?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ayazhafiz", "html_url": "https://github.com/ayazhafiz", "followers_url": "https://api.github.com/users/ayazhafiz/followers", "following_url": "https://api.github.com/users/ayazhafiz/following{/other_user}", "gists_url": "https://api.github.com/users/ayazhafiz/gists{/gist_id}", "starred_url": "https://api.github.com/users/ayazhafiz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ayazhafiz/subscriptions", "organizations_url": "https://api.github.com/users/ayazhafiz/orgs", "repos_url": "https://api.github.com/users/ayazhafiz/repos", "events_url": "https://api.github.com/users/ayazhafiz/events{/privacy}", "received_events_url": "https://api.github.com/users/ayazhafiz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "calebcartwright", "id": 13042488, "node_id": "MDQ6VXNlcjEzMDQyNDg4", "avatar_url": "https://avatars.githubusercontent.com/u/13042488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebcartwright", "html_url": "https://github.com/calebcartwright", "followers_url": "https://api.github.com/users/calebcartwright/followers", "following_url": "https://api.github.com/users/calebcartwright/following{/other_user}", "gists_url": "https://api.github.com/users/calebcartwright/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebcartwright/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebcartwright/subscriptions", "organizations_url": "https://api.github.com/users/calebcartwright/orgs", "repos_url": "https://api.github.com/users/calebcartwright/repos", "events_url": "https://api.github.com/users/calebcartwright/events{/privacy}", "received_events_url": "https://api.github.com/users/calebcartwright/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a9b0b057eb7c2ff6e764fadc36d94e90e64b5c90", "url": "https://api.github.com/repos/rust-lang/rust/commits/a9b0b057eb7c2ff6e764fadc36d94e90e64b5c90", "html_url": "https://github.com/rust-lang/rust/commit/a9b0b057eb7c2ff6e764fadc36d94e90e64b5c90"}], "stats": {"total": 113, "additions": 36, "deletions": 77}, "files": [{"sha": "cfb3b249107fcab993decccbbf31e83955e427f0", "filename": "src/items.rs", "status": "modified", "additions": 34, "deletions": 73, "changes": 107, "blob_url": "https://github.com/rust-lang/rust/blob/92ab76cfa7eae26f525d36ea1d7b08b267b804cc/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92ab76cfa7eae26f525d36ea1d7b08b267b804cc/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=92ab76cfa7eae26f525d36ea1d7b08b267b804cc", "patch": "@@ -1504,44 +1504,44 @@ fn format_tuple_struct(\n     Some(result)\n }\n \n-fn rewrite_type_prefix(\n+fn rewrite_type<R: Rewrite>(\n     context: &RewriteContext<'_>,\n     indent: Indent,\n-    prefix: &str,\n     ident: symbol::Ident,\n+    vis: &ast::Visibility,\n     generics: &ast::Generics,\n     generic_bounds_opt: Option<&ast::GenericBounds>,\n+    rhs: Option<&R>,\n ) -> Option<String> {\n     let mut result = String::with_capacity(128);\n-    result.push_str(prefix);\n+    result.push_str(&format!(\"{}type \", format_visibility(context, vis)));\n     let ident_str = rewrite_ident(context, ident);\n \n-    // 2 = `= `\n     if generics.params.is_empty() {\n         result.push_str(ident_str)\n     } else {\n+        // 2 = `= `\n         let g_shape = Shape::indented(indent, context.config)\n             .offset_left(result.len())?\n             .sub_width(2)?;\n         let generics_str = rewrite_generics(context, ident_str, generics, g_shape)?;\n         result.push_str(&generics_str);\n     }\n \n-    let type_bounds_str = if let Some(bounds) = generic_bounds_opt {\n-        if bounds.is_empty() {\n-            String::new()\n-        } else {\n+    if let Some(bounds) = generic_bounds_opt {\n+        if !bounds.is_empty() {\n             // 2 = `: `\n             let shape = Shape::indented(indent, context.config).offset_left(result.len() + 2)?;\n-            bounds.rewrite(context, shape).map(|s| format!(\": {}\", s))?\n+            let type_bounds = bounds.rewrite(context, shape).map(|s| format!(\": {}\", s))?;\n+            result.push_str(&type_bounds);\n         }\n-    } else {\n-        String::new()\n-    };\n-    result.push_str(&type_bounds_str);\n+    }\n \n     let where_budget = context.budget(last_line_width(&result));\n-    let option = WhereClauseOption::snuggled(&result);\n+    let mut option = WhereClauseOption::snuggled(&result);\n+    if rhs.is_none() {\n+        option.suppress_comma();\n+    }\n     let where_clause_str = rewrite_where_clause(\n         context,\n         &generics.where_clause,\n@@ -1555,40 +1555,22 @@ fn rewrite_type_prefix(\n     )?;\n     result.push_str(&where_clause_str);\n \n-    Some(result)\n-}\n-\n-fn rewrite_type_item<R: Rewrite>(\n-    context: &RewriteContext<'_>,\n-    indent: Indent,\n-    prefix: &str,\n-    suffix: &str,\n-    ident: symbol::Ident,\n-    rhs: &R,\n-    generics: &ast::Generics,\n-    generic_bounds_opt: Option<&ast::GenericBounds>,\n-    vis: &ast::Visibility,\n-) -> Option<String> {\n-    let mut result = String::with_capacity(128);\n-    result.push_str(&rewrite_type_prefix(\n-        context,\n-        indent,\n-        &format!(\"{}{} \", format_visibility(context, vis), prefix),\n-        ident,\n-        generics,\n-        generic_bounds_opt,\n-    )?);\n+    if let Some(ty) = rhs {\n+        // If there's a where clause, add a newline before the assignment. Otherwise just add a\n+        // space.\n+        if !generics.where_clause.predicates.is_empty() {\n+            result.push_str(&indent.to_string_with_newline(context.config));\n+        } else {\n+            result.push(' ');\n+        }\n+        let lhs = format!(\"{}=\", result);\n \n-    if generics.where_clause.predicates.is_empty() {\n-        result.push_str(suffix);\n+        // 1 = `;`\n+        let shape = Shape::indented(indent, context.config).sub_width(1)?;\n+        rewrite_assign_rhs(context, lhs, &*ty, shape).map(|s| s + \";\")\n     } else {\n-        result.push_str(&indent.to_string_with_newline(context.config));\n-        result.push_str(suffix.trim_start());\n+        Some(format!(\"{};\", result))\n     }\n-\n-    // 1 = \";\"\n-    let rhs_shape = Shape::indented(indent, context.config).sub_width(1)?;\n-    rewrite_assign_rhs(context, result, rhs, rhs_shape).map(|s| s + \";\")\n }\n \n pub(crate) fn rewrite_opaque_type(\n@@ -1600,16 +1582,14 @@ pub(crate) fn rewrite_opaque_type(\n     vis: &ast::Visibility,\n ) -> Option<String> {\n     let opaque_type_bounds = OpaqueTypeBounds { generic_bounds };\n-    rewrite_type_item(\n+    rewrite_type(\n         context,\n         indent,\n-        \"type\",\n-        \" =\",\n         ident,\n-        &opaque_type_bounds,\n+        vis,\n         generics,\n         Some(generic_bounds),\n-        vis,\n+        Some(&opaque_type_bounds),\n     )\n }\n \n@@ -1839,34 +1819,15 @@ pub(crate) fn rewrite_type_alias(\n     indent: Indent,\n     vis: &ast::Visibility,\n ) -> Option<String> {\n-    let mut prefix = rewrite_type_prefix(\n+    rewrite_type(\n         context,\n         indent,\n-        &format!(\"{}type \", format_visibility(context, vis)),\n         ident,\n+        vis,\n         generics,\n         generic_bounds_opt,\n-    )?;\n-\n-    if let Some(ty) = ty_opt {\n-        // 1 = `;`\n-        let shape = Shape::indented(indent, context.config).sub_width(1)?;\n-\n-        // If there's a where clause, add a newline before the assignment. Otherwise just add a\n-        // space.\n-        if !generics.where_clause.predicates.is_empty() {\n-            prefix.push_str(&indent.to_string_with_newline(context.config));\n-        } else {\n-            prefix.push(' ');\n-        }\n-        let lhs = format!(\"{}=\", prefix);\n-        rewrite_assign_rhs(context, lhs, &**ty, shape).map(|s| s + \";\")\n-    } else {\n-        if !generics.where_clause.predicates.is_empty() {\n-            prefix.push_str(&indent.to_string_with_newline(context.config));\n-        }\n-        Some(format!(\"{};\", prefix))\n-    }\n+        ty_opt,\n+    )\n }\n \n struct OpaqueType<'a> {"}, {"sha": "2f8cf20da2c9eb9fcad82a955e72c7e8c09cc0d3", "filename": "tests/target/issue-4159.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/92ab76cfa7eae26f525d36ea1d7b08b267b804cc/tests%2Ftarget%2Fissue-4159.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92ab76cfa7eae26f525d36ea1d7b08b267b804cc/tests%2Ftarget%2Fissue-4159.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue-4159.rs?ref=92ab76cfa7eae26f525d36ea1d7b08b267b804cc", "patch": "@@ -3,13 +3,11 @@ extern \"C\" {\n \n     type A<'a>\n     where\n-        'a: 'static,\n-    ;\n+        'a: 'static;\n \n     type A<T: Ord>\n     where\n-        T: 'static,\n-    ;\n+        T: 'static;\n \n     type A = u8;\n "}]}