{"sha": "4b240fe96a8b8fcaa412624c398547dbc447a81e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRiMjQwZmU5NmE4YjhmY2FhNDEyNjI0YzM5ODU0N2RiYzQ0N2E4MWU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-06-08T14:43:29Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-06-08T14:43:29Z"}, "message": "Auto merge of #34083 - alexcrichton:dumb-hack, r=nrc\n\nrustc: Try to contain prepends to PATH\n\nThis commit attempts to bring our prepends to PATH on Windows when loading\nplugins because we've been seeing quite a few issues with failing to spawn a\nprocess on Windows, the leading theory of which is that PATH is too large as a\nresult of this. Currently this is mostly a stab in the dark as it's not\nconfirmed to actually fix the problem, but it's probably not a bad change to\nhave anyway!\n\ncc #33844\nCloses #17360", "tree": {"sha": "f3aefe96d07bf31edebc5800f42841aa57df606d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f3aefe96d07bf31edebc5800f42841aa57df606d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4b240fe96a8b8fcaa412624c398547dbc447a81e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4b240fe96a8b8fcaa412624c398547dbc447a81e", "html_url": "https://github.com/rust-lang/rust/commit/4b240fe96a8b8fcaa412624c398547dbc447a81e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4b240fe96a8b8fcaa412624c398547dbc447a81e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d3e014e295febf1c286b7261058ba850794aee55", "url": "https://api.github.com/repos/rust-lang/rust/commits/d3e014e295febf1c286b7261058ba850794aee55", "html_url": "https://github.com/rust-lang/rust/commit/d3e014e295febf1c286b7261058ba850794aee55"}, {"sha": "1564e92940fcc50e566bc5031dbc73540523688d", "url": "https://api.github.com/repos/rust-lang/rust/commits/1564e92940fcc50e566bc5031dbc73540523688d", "html_url": "https://github.com/rust-lang/rust/commit/1564e92940fcc50e566bc5031dbc73540523688d"}], "stats": {"total": 20, "additions": 16, "deletions": 4}, "files": [{"sha": "c63122948ff3ae3709863f923bd882d9e40efa18", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/4b240fe96a8b8fcaa412624c398547dbc447a81e/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b240fe96a8b8fcaa412624c398547dbc447a81e/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=4b240fe96a8b8fcaa412624c398547dbc447a81e", "patch": "@@ -669,12 +669,24 @@ pub fn phase_2_configure_and_expand<'a>(sess: &Session,\n         // dependent dlls. Note that this uses cfg!(windows) as opposed to\n         // targ_cfg because syntax extensions are always loaded for the host\n         // compiler, not for the target.\n-        let mut _old_path = OsString::new();\n+        //\n+        // This is somewhat of an inherently racy operation, however, as\n+        // multiple threads calling this function could possibly continue\n+        // extending PATH far beyond what it should. To solve this for now we\n+        // just don't add any new elements to PATH which are already there\n+        // within PATH. This is basically a targeted fix at #17360 for rustdoc\n+        // which runs rustc in parallel but has been seen (#33844) to cause\n+        // problems with PATH becoming too long.\n+        let mut old_path = OsString::new();\n         if cfg!(windows) {\n-            _old_path = env::var_os(\"PATH\").unwrap_or(_old_path);\n+            old_path = env::var_os(\"PATH\").unwrap_or(old_path);\n             let mut new_path = sess.host_filesearch(PathKind::All)\n                                    .get_dylib_search_paths();\n-            new_path.extend(env::split_paths(&_old_path));\n+            for path in env::split_paths(&old_path) {\n+                if !new_path.contains(&path) {\n+                    new_path.push(path);\n+                }\n+            }\n             env::set_var(\"PATH\", &env::join_paths(new_path).unwrap());\n         }\n         let features = sess.features.borrow();\n@@ -694,7 +706,7 @@ pub fn phase_2_configure_and_expand<'a>(sess: &Session,\n                                                                    syntax_exts,\n                                                                    krate);\n         if cfg!(windows) {\n-            env::set_var(\"PATH\", &_old_path);\n+            env::set_var(\"PATH\", &old_path);\n         }\n         *sess.available_macros.borrow_mut() = macro_names;\n         ret"}]}