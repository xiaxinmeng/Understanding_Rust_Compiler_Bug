{"sha": "c474c6e8253fe30684aa908ebef6e2923fb7146a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM0NzRjNmU4MjUzZmUzMDY4NGFhOTA4ZWJlZjZlMjkyM2ZiNzE0NmE=", "commit": {"author": {"name": "Alex Zatelepin", "email": "mvzp10@gmail.com", "date": "2019-09-18T15:10:19Z"}, "committer": {"name": "Alex Zatelepin", "email": "mvzp10@gmail.com", "date": "2019-10-01T14:48:37Z"}, "message": "add tests", "tree": {"sha": "e9152db3e8c6c1309073921d4393ba5361c2cc99", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e9152db3e8c6c1309073921d4393ba5361c2cc99"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c474c6e8253fe30684aa908ebef6e2923fb7146a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c474c6e8253fe30684aa908ebef6e2923fb7146a", "html_url": "https://github.com/rust-lang/rust/commit/c474c6e8253fe30684aa908ebef6e2923fb7146a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c474c6e8253fe30684aa908ebef6e2923fb7146a/comments", "author": {"login": "ztlpn", "id": 2301957, "node_id": "MDQ6VXNlcjIzMDE5NTc=", "avatar_url": "https://avatars.githubusercontent.com/u/2301957?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ztlpn", "html_url": "https://github.com/ztlpn", "followers_url": "https://api.github.com/users/ztlpn/followers", "following_url": "https://api.github.com/users/ztlpn/following{/other_user}", "gists_url": "https://api.github.com/users/ztlpn/gists{/gist_id}", "starred_url": "https://api.github.com/users/ztlpn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ztlpn/subscriptions", "organizations_url": "https://api.github.com/users/ztlpn/orgs", "repos_url": "https://api.github.com/users/ztlpn/repos", "events_url": "https://api.github.com/users/ztlpn/events{/privacy}", "received_events_url": "https://api.github.com/users/ztlpn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ztlpn", "id": 2301957, "node_id": "MDQ6VXNlcjIzMDE5NTc=", "avatar_url": "https://avatars.githubusercontent.com/u/2301957?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ztlpn", "html_url": "https://github.com/ztlpn", "followers_url": "https://api.github.com/users/ztlpn/followers", "following_url": "https://api.github.com/users/ztlpn/following{/other_user}", "gists_url": "https://api.github.com/users/ztlpn/gists{/gist_id}", "starred_url": "https://api.github.com/users/ztlpn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ztlpn/subscriptions", "organizations_url": "https://api.github.com/users/ztlpn/orgs", "repos_url": "https://api.github.com/users/ztlpn/repos", "events_url": "https://api.github.com/users/ztlpn/events{/privacy}", "received_events_url": "https://api.github.com/users/ztlpn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "057569e2c2864ce907d780fc022831064c61e984", "url": "https://api.github.com/repos/rust-lang/rust/commits/057569e2c2864ce907d780fc022831064c61e984", "html_url": "https://github.com/rust-lang/rust/commit/057569e2c2864ce907d780fc022831064c61e984"}], "stats": {"total": 112, "additions": 108, "deletions": 4}, "files": [{"sha": "0e993cb4e58854dcb5339e8b8506f7654329928b", "filename": "src/test/ui/try-block/try-block-bad-type.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c474c6e8253fe30684aa908ebef6e2923fb7146a/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-bad-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c474c6e8253fe30684aa908ebef6e2923fb7146a/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-bad-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-bad-type.stderr?ref=c474c6e8253fe30684aa908ebef6e2923fb7146a", "patch": "@@ -32,18 +32,18 @@ LL |     let res: Result<i32, i32> = try { };\n               found type `()`\n \n error[E0277]: the trait bound `(): std::ops::Try` is not satisfied\n-  --> $DIR/try-block-bad-type.rs:17:23\n+  --> $DIR/try-block-bad-type.rs:17:25\n    |\n LL |     let res: () = try { };\n-   |                       ^^^ the trait `std::ops::Try` is not implemented for `()`\n+   |                         ^ the trait `std::ops::Try` is not implemented for `()`\n    |\n    = note: required by `std::ops::Try::from_ok`\n \n error[E0277]: the trait bound `i32: std::ops::Try` is not satisfied\n-  --> $DIR/try-block-bad-type.rs:19:24\n+  --> $DIR/try-block-bad-type.rs:19:26\n    |\n LL |     let res: i32 = try { 5 };\n-   |                        ^^^^^ the trait `std::ops::Try` is not implemented for `i32`\n+   |                          ^ the trait `std::ops::Try` is not implemented for `i32`\n    |\n    = note: required by `std::ops::Try::from_ok`\n "}, {"sha": "5a9f662d229b297a49d6586a84714347d97d66ca", "filename": "src/test/ui/try-block/try-block-unreachable-code-lint.rs", "status": "added", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/c474c6e8253fe30684aa908ebef6e2923fb7146a/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-unreachable-code-lint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c474c6e8253fe30684aa908ebef6e2923fb7146a/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-unreachable-code-lint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-unreachable-code-lint.rs?ref=c474c6e8253fe30684aa908ebef6e2923fb7146a", "patch": "@@ -0,0 +1,76 @@\n+// Test unreachable_code lint for `try {}` block ok-wrapping. See issues #54165, #63324.\n+\n+// compile-flags: --edition 2018\n+// check-pass\n+#![feature(try_blocks)]\n+#![warn(unreachable_code)]\n+\n+fn err() -> Result<u32, ()> {\n+    Err(())\n+}\n+\n+// In the following cases unreachable code is autogenerated and should not be reported.\n+\n+fn test_ok_wrapped_divergent_expr_1() {\n+    let res: Result<u32, ()> = try {\n+        loop {\n+            err()?;\n+        }\n+    };\n+    println!(\"res: {:?}\", res);\n+}\n+\n+fn test_ok_wrapped_divergent_expr_2() {\n+    let _: Result<u32, ()> = try {\n+        return\n+    };\n+}\n+\n+fn test_autogenerated_unit_after_divergent_expr() {\n+    let _: Result<(), ()> = try {\n+        return;\n+    };\n+}\n+\n+// In the following cases unreachable code should be reported.\n+\n+fn test_try_block_after_divergent_stmt() {\n+    let _: Result<u32, ()> = {\n+        return;\n+\n+        try {\n+            loop {\n+                err()?;\n+            }\n+        }\n+        // ~^^^^^ WARNING unreachable expression\n+    };\n+}\n+\n+fn test_wrapped_divergent_expr() {\n+    let _: Result<u32, ()> = {\n+        Err(return)\n+        // ~^ WARNING unreachable call\n+    };\n+}\n+\n+fn test_expr_after_divergent_stmt_in_try_block() {\n+    let res: Result<u32, ()> = try {\n+        loop {\n+            err()?;\n+        }\n+\n+        42\n+        // ~^ WARNING unreachable expression\n+    };\n+    println!(\"res: {:?}\", res);\n+}\n+\n+fn main() {\n+    test_ok_wrapped_divergent_expr_1();\n+    test_ok_wrapped_divergent_expr_2();\n+    test_autogenerated_unit_after_divergent_expr();\n+    test_try_block_after_divergent_stmt();\n+    test_wrapped_divergent_expr();\n+    test_expr_after_divergent_stmt_in_try_block();\n+}"}, {"sha": "621d882aa9fb95e187dd893b20a898b4d42bb32f", "filename": "src/test/ui/try-block/try-block-unreachable-code-lint.stderr", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/c474c6e8253fe30684aa908ebef6e2923fb7146a/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-unreachable-code-lint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c474c6e8253fe30684aa908ebef6e2923fb7146a/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-unreachable-code-lint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-unreachable-code-lint.stderr?ref=c474c6e8253fe30684aa908ebef6e2923fb7146a", "patch": "@@ -0,0 +1,28 @@\n+warning: unreachable expression\n+  --> $DIR/try-block-unreachable-code-lint.rs:41:9\n+   |\n+LL | /         try {\n+LL | |             loop {\n+LL | |                 err()?;\n+LL | |             }\n+LL | |         }\n+   | |_________^\n+   |\n+note: lint level defined here\n+  --> $DIR/try-block-unreachable-code-lint.rs:6:9\n+   |\n+LL | #![warn(unreachable_code)]\n+   |         ^^^^^^^^^^^^^^^^\n+\n+warning: unreachable call\n+  --> $DIR/try-block-unreachable-code-lint.rs:52:9\n+   |\n+LL |         Err(return)\n+   |         ^^^\n+\n+warning: unreachable expression\n+  --> $DIR/try-block-unreachable-code-lint.rs:63:9\n+   |\n+LL |         42\n+   |         ^^\n+"}]}