{"sha": "aa6a2f4035a8c02f85563e361fe3c760766c53f7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFhNmEyZjQwMzVhOGMwMmY4NTU2M2UzNjFmZTNjNzYwNzY2YzUzZjc=", "commit": {"author": {"name": "Camelid", "email": "camelidcamel@gmail.com", "date": "2020-09-25T21:59:00Z"}, "committer": {"name": "Camelid", "email": "camelidcamel@gmail.com", "date": "2020-09-25T21:59:00Z"}, "message": "Rename `whence` to `span`\n\nIt's called `span` elsewhere in the compiler and `span` is also less\nsurprising. `whence` is whimsical, but not super clear :)", "tree": {"sha": "7f5128f22e661997e4dbba0a95290ec08e102319", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7f5128f22e661997e4dbba0a95290ec08e102319"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aa6a2f4035a8c02f85563e361fe3c760766c53f7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aa6a2f4035a8c02f85563e361fe3c760766c53f7", "html_url": "https://github.com/rust-lang/rust/commit/aa6a2f4035a8c02f85563e361fe3c760766c53f7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aa6a2f4035a8c02f85563e361fe3c760766c53f7/comments", "author": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c6e4db620a7d2f569f11dcab627430921ea8aacf", "url": "https://api.github.com/repos/rust-lang/rust/commits/c6e4db620a7d2f569f11dcab627430921ea8aacf", "html_url": "https://github.com/rust-lang/rust/commit/c6e4db620a7d2f569f11dcab627430921ea8aacf"}], "stats": {"total": 106, "additions": 53, "deletions": 53}, "files": [{"sha": "788bb5e787b829d937ccc6dbd43f85d86b431d25", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/aa6a2f4035a8c02f85563e361fe3c760766c53f7/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa6a2f4035a8c02f85563e361fe3c760766c53f7/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=aa6a2f4035a8c02f85563e361fe3c760766c53f7", "patch": "@@ -256,7 +256,7 @@ impl Clean<Item> for doctree::Module<'_> {\n \n         // determine if we should display the inner contents or\n         // the outer `mod` item for the source code.\n-        let whence = {\n+        let span = {\n             let sm = cx.sess().source_map();\n             let outer = sm.lookup_char_pos(self.where_outer.lo());\n             let inner = sm.lookup_char_pos(self.where_inner.lo());\n@@ -272,7 +272,7 @@ impl Clean<Item> for doctree::Module<'_> {\n         Item {\n             name: Some(name),\n             attrs,\n-            source: whence.clean(cx),\n+            source: span.clean(cx),\n             visibility: self.vis.clean(cx),\n             stability: cx.stability(self.id).clean(cx),\n             deprecation: cx.deprecation(self.id).clean(cx),\n@@ -912,7 +912,7 @@ impl Clean<Item> for doctree::Function<'_> {\n         Item {\n             name: Some(self.name.clean(cx)),\n             attrs: self.attrs.clean(cx),\n-            source: self.whence.clean(cx),\n+            source: self.span.clean(cx),\n             visibility: self.vis.clean(cx),\n             stability: cx.stability(self.id).clean(cx),\n             deprecation: cx.deprecation(self.id).clean(cx),\n@@ -1020,7 +1020,7 @@ impl Clean<Item> for doctree::Trait<'_> {\n         Item {\n             name: Some(self.name.clean(cx)),\n             attrs,\n-            source: self.whence.clean(cx),\n+            source: self.span.clean(cx),\n             def_id: cx.tcx.hir().local_def_id(self.id).to_def_id(),\n             visibility: self.vis.clean(cx),\n             stability: cx.stability(self.id).clean(cx),\n@@ -1044,7 +1044,7 @@ impl Clean<Item> for doctree::TraitAlias<'_> {\n         Item {\n             name: Some(self.name.clean(cx)),\n             attrs,\n-            source: self.whence.clean(cx),\n+            source: self.span.clean(cx),\n             def_id: cx.tcx.hir().local_def_id(self.id).to_def_id(),\n             visibility: self.vis.clean(cx),\n             stability: cx.stability(self.id).clean(cx),\n@@ -1830,7 +1830,7 @@ impl Clean<Item> for doctree::Struct<'_> {\n         Item {\n             name: Some(self.name.clean(cx)),\n             attrs: self.attrs.clean(cx),\n-            source: self.whence.clean(cx),\n+            source: self.span.clean(cx),\n             def_id: cx.tcx.hir().local_def_id(self.id).to_def_id(),\n             visibility: self.vis.clean(cx),\n             stability: cx.stability(self.id).clean(cx),\n@@ -1850,7 +1850,7 @@ impl Clean<Item> for doctree::Union<'_> {\n         Item {\n             name: Some(self.name.clean(cx)),\n             attrs: self.attrs.clean(cx),\n-            source: self.whence.clean(cx),\n+            source: self.span.clean(cx),\n             def_id: cx.tcx.hir().local_def_id(self.id).to_def_id(),\n             visibility: self.vis.clean(cx),\n             stability: cx.stability(self.id).clean(cx),\n@@ -1880,7 +1880,7 @@ impl Clean<Item> for doctree::Enum<'_> {\n         Item {\n             name: Some(self.name.clean(cx)),\n             attrs: self.attrs.clean(cx),\n-            source: self.whence.clean(cx),\n+            source: self.span.clean(cx),\n             def_id: cx.tcx.hir().local_def_id(self.id).to_def_id(),\n             visibility: self.vis.clean(cx),\n             stability: cx.stability(self.id).clean(cx),\n@@ -1899,7 +1899,7 @@ impl Clean<Item> for doctree::Variant<'_> {\n         Item {\n             name: Some(self.name.clean(cx)),\n             attrs: self.attrs.clean(cx),\n-            source: self.whence.clean(cx),\n+            source: self.span.clean(cx),\n             visibility: Inherited,\n             stability: cx.stability(self.id).clean(cx),\n             deprecation: cx.deprecation(self.id).clean(cx),\n@@ -2047,7 +2047,7 @@ impl Clean<Item> for doctree::Typedef<'_> {\n         Item {\n             name: Some(self.name.clean(cx)),\n             attrs: self.attrs.clean(cx),\n-            source: self.whence.clean(cx),\n+            source: self.span.clean(cx),\n             def_id: cx.tcx.hir().local_def_id(self.id).to_def_id(),\n             visibility: self.vis.clean(cx),\n             stability: cx.stability(self.id).clean(cx),\n@@ -2062,7 +2062,7 @@ impl Clean<Item> for doctree::OpaqueTy<'_> {\n         Item {\n             name: Some(self.name.clean(cx)),\n             attrs: self.attrs.clean(cx),\n-            source: self.whence.clean(cx),\n+            source: self.span.clean(cx),\n             def_id: cx.tcx.hir().local_def_id(self.id).to_def_id(),\n             visibility: self.vis.clean(cx),\n             stability: cx.stability(self.id).clean(cx),\n@@ -2093,7 +2093,7 @@ impl Clean<Item> for doctree::Static<'_> {\n         Item {\n             name: Some(self.name.clean(cx)),\n             attrs: self.attrs.clean(cx),\n-            source: self.whence.clean(cx),\n+            source: self.span.clean(cx),\n             def_id: cx.tcx.hir().local_def_id(self.id).to_def_id(),\n             visibility: self.vis.clean(cx),\n             stability: cx.stability(self.id).clean(cx),\n@@ -2114,7 +2114,7 @@ impl Clean<Item> for doctree::Constant<'_> {\n         Item {\n             name: Some(self.name.clean(cx)),\n             attrs: self.attrs.clean(cx),\n-            source: self.whence.clean(cx),\n+            source: self.span.clean(cx),\n             def_id: def_id.to_def_id(),\n             visibility: self.vis.clean(cx),\n             stability: cx.stability(self.id).clean(cx),\n@@ -2168,7 +2168,7 @@ impl Clean<Vec<Item>> for doctree::Impl<'_> {\n         let make_item = |trait_: Option<Type>, for_: Type, items: Vec<Item>| Item {\n             name: None,\n             attrs: self.attrs.clean(cx),\n-            source: self.whence.clean(cx),\n+            source: self.span.clean(cx),\n             def_id: def_id.to_def_id(),\n             visibility: self.vis.clean(cx),\n             stability: cx.stability(self.id).clean(cx),\n@@ -2219,7 +2219,7 @@ impl Clean<Vec<Item>> for doctree::ExternCrate<'_> {\n         vec![Item {\n             name: None,\n             attrs: self.attrs.clean(cx),\n-            source: self.whence.clean(cx),\n+            source: self.span.clean(cx),\n             def_id: DefId { krate: self.cnum, index: CRATE_DEF_INDEX },\n             visibility: self.vis.clean(cx),\n             stability: None,\n@@ -2284,7 +2284,7 @@ impl Clean<Vec<Item>> for doctree::Import<'_> {\n         vec![Item {\n             name: None,\n             attrs: self.attrs.clean(cx),\n-            source: self.whence.clean(cx),\n+            source: self.span.clean(cx),\n             def_id: DefId::local(CRATE_DEF_INDEX),\n             visibility: self.vis.clean(cx),\n             stability: None,\n@@ -2326,7 +2326,7 @@ impl Clean<Item> for doctree::ForeignItem<'_> {\n         Item {\n             name: Some(self.name.clean(cx)),\n             attrs: self.attrs.clean(cx),\n-            source: self.whence.clean(cx),\n+            source: self.span.clean(cx),\n             def_id: cx.tcx.hir().local_def_id(self.id).to_def_id(),\n             visibility: self.vis.clean(cx),\n             stability: cx.stability(self.id).clean(cx),\n@@ -2342,7 +2342,7 @@ impl Clean<Item> for doctree::Macro<'_> {\n         Item {\n             name: Some(name.clone()),\n             attrs: self.attrs.clean(cx),\n-            source: self.whence.clean(cx),\n+            source: self.span.clean(cx),\n             visibility: Public,\n             stability: cx.stability(self.hid).clean(cx),\n             deprecation: cx.deprecation(self.hid).clean(cx),\n@@ -2367,7 +2367,7 @@ impl Clean<Item> for doctree::ProcMacro<'_> {\n         Item {\n             name: Some(self.name.clean(cx)),\n             attrs: self.attrs.clean(cx),\n-            source: self.whence.clean(cx),\n+            source: self.span.clean(cx),\n             visibility: Public,\n             stability: cx.stability(self.id).clean(cx),\n             deprecation: cx.deprecation(self.id).clean(cx),"}, {"sha": "cfa51dcf4f1d198833b8614d38a88fc41c54cf76", "filename": "src/librustdoc/doctree.rs", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/aa6a2f4035a8c02f85563e361fe3c760766c53f7/src%2Flibrustdoc%2Fdoctree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa6a2f4035a8c02f85563e361fe3c760766c53f7/src%2Flibrustdoc%2Fdoctree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoctree.rs?ref=aa6a2f4035a8c02f85563e361fe3c760766c53f7", "patch": "@@ -89,7 +89,7 @@ pub struct Struct<'hir> {\n     pub generics: &'hir hir::Generics<'hir>,\n     pub attrs: &'hir [ast::Attribute],\n     pub fields: &'hir [hir::StructField<'hir>],\n-    pub whence: Span,\n+    pub span: Span,\n }\n \n pub struct Union<'hir> {\n@@ -100,7 +100,7 @@ pub struct Union<'hir> {\n     pub generics: &'hir hir::Generics<'hir>,\n     pub attrs: &'hir [ast::Attribute],\n     pub fields: &'hir [hir::StructField<'hir>],\n-    pub whence: Span,\n+    pub span: Span,\n }\n \n pub struct Enum<'hir> {\n@@ -109,7 +109,7 @@ pub struct Enum<'hir> {\n     pub generics: &'hir hir::Generics<'hir>,\n     pub attrs: &'hir [ast::Attribute],\n     pub id: hir::HirId,\n-    pub whence: Span,\n+    pub span: Span,\n     pub name: Symbol,\n }\n \n@@ -118,7 +118,7 @@ pub struct Variant<'hir> {\n     pub id: hir::HirId,\n     pub attrs: &'hir [ast::Attribute],\n     pub def: &'hir hir::VariantData<'hir>,\n-    pub whence: Span,\n+    pub span: Span,\n }\n \n pub struct Function<'hir> {\n@@ -128,7 +128,7 @@ pub struct Function<'hir> {\n     pub name: Symbol,\n     pub vis: &'hir hir::Visibility<'hir>,\n     pub header: hir::FnHeader,\n-    pub whence: Span,\n+    pub span: Span,\n     pub generics: &'hir hir::Generics<'hir>,\n     pub body: hir::BodyId,\n }\n@@ -139,7 +139,7 @@ pub struct Typedef<'hir> {\n     pub name: Symbol,\n     pub id: hir::HirId,\n     pub attrs: &'hir [ast::Attribute],\n-    pub whence: Span,\n+    pub span: Span,\n     pub vis: &'hir hir::Visibility<'hir>,\n }\n \n@@ -148,7 +148,7 @@ pub struct OpaqueTy<'hir> {\n     pub name: Symbol,\n     pub id: hir::HirId,\n     pub attrs: &'hir [ast::Attribute],\n-    pub whence: Span,\n+    pub span: Span,\n     pub vis: &'hir hir::Visibility<'hir>,\n }\n \n@@ -161,7 +161,7 @@ pub struct Static<'hir> {\n     pub attrs: &'hir [ast::Attribute],\n     pub vis: &'hir hir::Visibility<'hir>,\n     pub id: hir::HirId,\n-    pub whence: Span,\n+    pub span: Span,\n }\n \n pub struct Constant<'hir> {\n@@ -171,7 +171,7 @@ pub struct Constant<'hir> {\n     pub attrs: &'hir [ast::Attribute],\n     pub vis: &'hir hir::Visibility<'hir>,\n     pub id: hir::HirId,\n-    pub whence: Span,\n+    pub span: Span,\n }\n \n pub struct Trait<'hir> {\n@@ -183,7 +183,7 @@ pub struct Trait<'hir> {\n     pub bounds: &'hir [hir::GenericBound<'hir>],\n     pub attrs: &'hir [ast::Attribute],\n     pub id: hir::HirId,\n-    pub whence: Span,\n+    pub span: Span,\n     pub vis: &'hir hir::Visibility<'hir>,\n }\n \n@@ -193,7 +193,7 @@ pub struct TraitAlias<'hir> {\n     pub bounds: &'hir [hir::GenericBound<'hir>],\n     pub attrs: &'hir [ast::Attribute],\n     pub id: hir::HirId,\n-    pub whence: Span,\n+    pub span: Span,\n     pub vis: &'hir hir::Visibility<'hir>,\n }\n \n@@ -208,7 +208,7 @@ pub struct Impl<'hir> {\n     pub for_: &'hir hir::Ty<'hir>,\n     pub items: Vec<&'hir hir::ImplItem<'hir>>,\n     pub attrs: &'hir [ast::Attribute],\n-    pub whence: Span,\n+    pub span: Span,\n     pub vis: &'hir hir::Visibility<'hir>,\n     pub id: hir::HirId,\n }\n@@ -219,7 +219,7 @@ pub struct ForeignItem<'hir> {\n     pub name: Symbol,\n     pub kind: &'hir hir::ForeignItemKind<'hir>,\n     pub attrs: &'hir [ast::Attribute],\n-    pub whence: Span,\n+    pub span: Span,\n }\n \n // For Macro we store the DefId instead of the NodeId, since we also create\n@@ -229,7 +229,7 @@ pub struct Macro<'hir> {\n     pub hid: hir::HirId,\n     pub def_id: hir::def_id::DefId,\n     pub attrs: &'hir [ast::Attribute],\n-    pub whence: Span,\n+    pub span: Span,\n     pub matchers: Vec<Span>,\n     pub imported_from: Option<Symbol>,\n }\n@@ -240,7 +240,7 @@ pub struct ExternCrate<'hir> {\n     pub path: Option<String>,\n     pub vis: &'hir hir::Visibility<'hir>,\n     pub attrs: &'hir [ast::Attribute],\n-    pub whence: Span,\n+    pub span: Span,\n }\n \n pub struct Import<'hir> {\n@@ -250,7 +250,7 @@ pub struct Import<'hir> {\n     pub attrs: &'hir [ast::Attribute],\n     pub path: &'hir hir::Path<'hir>,\n     pub glob: bool,\n-    pub whence: Span,\n+    pub span: Span,\n }\n \n pub struct ProcMacro<'hir> {\n@@ -259,7 +259,7 @@ pub struct ProcMacro<'hir> {\n     pub kind: MacroKind,\n     pub helpers: Vec<Symbol>,\n     pub attrs: &'hir [ast::Attribute],\n-    pub whence: Span,\n+    pub span: Span,\n }\n \n pub fn struct_type_from_def(vdata: &hir::VariantData<'_>) -> StructType {"}, {"sha": "33578dc0619d11f34f4dc45a3a51cbb65d46ae2a", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/aa6a2f4035a8c02f85563e361fe3c760766c53f7/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa6a2f4035a8c02f85563e361fe3c760766c53f7/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=aa6a2f4035a8c02f85563e361fe3c760766c53f7", "patch": "@@ -99,7 +99,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n             attrs: &item.attrs,\n             generics,\n             fields: sd.fields(),\n-            whence: item.span,\n+            span: item.span,\n         }\n     }\n \n@@ -120,7 +120,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n             attrs: &item.attrs,\n             generics,\n             fields: sd.fields(),\n-            whence: item.span,\n+            span: item.span,\n         }\n     }\n \n@@ -142,14 +142,14 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n                     id: v.id,\n                     attrs: &v.attrs,\n                     def: &v.data,\n-                    whence: v.span,\n+                    span: v.span,\n                 })\n                 .collect(),\n             vis: &it.vis,\n             generics,\n             attrs: &it.attrs,\n             id: it.hir_id,\n-            whence: it.span,\n+            span: it.span,\n         }\n     }\n \n@@ -208,7 +208,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n                     kind,\n                     helpers,\n                     attrs: &item.attrs,\n-                    whence: item.span,\n+                    span: item.span,\n                 });\n             }\n             None => {\n@@ -218,7 +218,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n                     attrs: &item.attrs,\n                     decl,\n                     name,\n-                    whence: item.span,\n+                    span: item.span,\n                     generics,\n                     header,\n                     body,\n@@ -402,7 +402,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n                     path: orig_name.map(|x| x.to_string()),\n                     vis: &item.vis,\n                     attrs: &item.attrs,\n-                    whence: item.span,\n+                    span: item.span,\n                 })\n             }\n             hir::ItemKind::Use(_, hir::UseKind::ListStem) => {}\n@@ -444,7 +444,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n                     attrs: &item.attrs,\n                     path,\n                     glob: is_glob,\n-                    whence: item.span,\n+                    span: item.span,\n                 });\n             }\n             hir::ItemKind::Mod(ref m) => {\n@@ -476,7 +476,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n                     name: ident.name,\n                     id: item.hir_id,\n                     attrs: &item.attrs,\n-                    whence: item.span,\n+                    span: item.span,\n                     vis: &item.vis,\n                 };\n                 om.typedefs.push(t);\n@@ -487,7 +487,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n                     name: ident.name,\n                     id: item.hir_id,\n                     attrs: &item.attrs,\n-                    whence: item.span,\n+                    span: item.span,\n                     vis: &item.vis,\n                 };\n                 om.opaque_tys.push(t);\n@@ -500,7 +500,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n                     id: item.hir_id,\n                     name: ident.name,\n                     attrs: &item.attrs,\n-                    whence: item.span,\n+                    span: item.span,\n                     vis: &item.vis,\n                 };\n                 om.statics.push(s);\n@@ -515,7 +515,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n                         id: item.hir_id,\n                         name: ident.name,\n                         attrs: &item.attrs,\n-                        whence: item.span,\n+                        span: item.span,\n                         vis: &item.vis,\n                     };\n                     om.constants.push(s);\n@@ -532,7 +532,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n                     bounds,\n                     id: item.hir_id,\n                     attrs: &item.attrs,\n-                    whence: item.span,\n+                    span: item.span,\n                     vis: &item.vis,\n                 };\n                 om.traits.push(t);\n@@ -544,7 +544,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n                     bounds,\n                     id: item.hir_id,\n                     attrs: &item.attrs,\n-                    whence: item.span,\n+                    span: item.span,\n                     vis: &item.vis,\n                 };\n                 om.trait_aliases.push(t);\n@@ -577,7 +577,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n                         items,\n                         attrs: &item.attrs,\n                         id: item.hir_id,\n-                        whence: item.span,\n+                        span: item.span,\n                         vis: &item.vis,\n                     };\n                     om.impls.push(i);\n@@ -603,7 +603,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n             kind: &item.kind,\n             vis: &item.vis,\n             attrs: &item.attrs,\n-            whence: item.span,\n+            span: item.span,\n         });\n     }\n \n@@ -623,7 +623,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n             def_id: self.cx.tcx.hir().local_def_id(def.hir_id).to_def_id(),\n             attrs: &def.attrs,\n             name: renamed.unwrap_or(def.ident.name),\n-            whence: def.span,\n+            span: def.span,\n             matchers,\n             imported_from: None,\n         }"}]}