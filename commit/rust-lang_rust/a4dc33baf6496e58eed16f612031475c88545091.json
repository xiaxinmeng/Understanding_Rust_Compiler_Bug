{"sha": "a4dc33baf6496e58eed16f612031475c88545091", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE0ZGMzM2JhZjY0OTZlNThlZWQxNmY2MTIwMzE0NzVjODg1NDUwOTE=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-09-17T08:39:26Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-09-17T15:26:55Z"}, "message": "build-manifest: add some comments", "tree": {"sha": "96d9e0ea3027dbfe6819315e59c14fdd891c396f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/96d9e0ea3027dbfe6819315e59c14fdd891c396f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a4dc33baf6496e58eed16f612031475c88545091", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a4dc33baf6496e58eed16f612031475c88545091", "html_url": "https://github.com/rust-lang/rust/commit/a4dc33baf6496e58eed16f612031475c88545091", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a4dc33baf6496e58eed16f612031475c88545091/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f504e37dc64b2f00291f53517fe9cb2329d00fb8", "url": "https://api.github.com/repos/rust-lang/rust/commits/f504e37dc64b2f00291f53517fe9cb2329d00fb8", "html_url": "https://github.com/rust-lang/rust/commit/f504e37dc64b2f00291f53517fe9cb2329d00fb8"}], "stats": {"total": 31, "additions": 23, "deletions": 8}, "files": [{"sha": "076bcd878df7196a23fa23d0b4c617ba88850d41", "filename": "src/bootstrap/dist.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a4dc33baf6496e58eed16f612031475c88545091/src%2Fbootstrap%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4dc33baf6496e58eed16f612031475c88545091/src%2Fbootstrap%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdist.rs?ref=a4dc33baf6496e58eed16f612031475c88545091", "patch": "@@ -2000,6 +2000,8 @@ impl Step for HashSign {\n     }\n \n     fn run(self, builder: &Builder<'_>) {\n+        // This gets called by `promote-release`\n+        // (https://github.com/rust-lang/rust-central-station/tree/master/promote-release).\n         let mut cmd = builder.tool_cmd(Tool::BuildManifest);\n         if builder.config.dry_run {\n             return;\n@@ -2010,10 +2012,14 @@ impl Step for HashSign {\n         let addr = builder.config.dist_upload_addr.as_ref().unwrap_or_else(|| {\n             panic!(\"\\n\\nfailed to specify `dist.upload-addr` in `config.toml`\\n\\n\")\n         });\n-        let file = builder.config.dist_gpg_password_file.as_ref().unwrap_or_else(|| {\n-            panic!(\"\\n\\nfailed to specify `dist.gpg-password-file` in `config.toml`\\n\\n\")\n-        });\n-        let pass = t!(fs::read_to_string(&file));\n+        let pass = if env::var(\"BUILD_MANIFEST_DISABLE_SIGNING\").is_err() {\n+            let file = builder.config.dist_gpg_password_file.as_ref().unwrap_or_else(|| {\n+                panic!(\"\\n\\nfailed to specify `dist.gpg-password-file` in `config.toml`\\n\\n\")\n+            });\n+            t!(fs::read_to_string(&file))\n+        } else {\n+            String::new()\n+        };\n \n         let today = output(Command::new(\"date\").arg(\"+%Y-%m-%d\"));\n "}, {"sha": "eab23f3cfffc4982036418693767a32a65719665", "filename": "src/tools/build-manifest/src/main.rs", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/a4dc33baf6496e58eed16f612031475c88545091/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4dc33baf6496e58eed16f612031475c88545091/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs?ref=a4dc33baf6496e58eed16f612031475c88545091", "patch": "@@ -1,3 +1,9 @@\n+//! Build a dist manifest, hash and sign everything.\n+//! This gets called by `promote-release`\n+//! (https://github.com/rust-lang/rust-central-station/tree/master/promote-release)\n+//! via `x.py dist hash-and-sign`; the cmdline arguments are set up\n+//! by rustbuild (in `src/bootstrap/dist.rs`).\n+\n use toml;\n use serde::Serialize;\n \n@@ -270,6 +276,7 @@ fn main() {\n     // Do not ask for a passphrase while manually testing\n     let mut passphrase = String::new();\n     if should_sign {\n+        // `x.py` passes the passphrase via stdin.\n         t!(io::stdin().read_to_string(&mut passphrase));\n     }\n \n@@ -362,6 +369,7 @@ impl Builder {\n         }\n     }\n \n+    /// Hash all files, compute their signatures, and collect the hashes in `self.digests`.\n     fn digest_and_sign(&mut self) {\n         for file in t!(self.input.read_dir()).map(|e| t!(e).path()) {\n             let filename = file.file_name().unwrap().to_str().unwrap();\n@@ -532,19 +540,20 @@ impl Builder {\n             .as_ref()\n             .cloned()\n             .map(|version| (version, true))\n-            .unwrap_or_default();\n+            .unwrap_or_default(); // `is_present` defaults to `false` here.\n \n-        // miri needs to build std with xargo, which doesn't allow stable/beta:\n-        // <https://github.com/japaric/xargo/pull/204#issuecomment-374888868>\n+        // Miri is nightly-only; never ship it for other trains.\n         if pkgname == \"miri-preview\" && self.rust_release != \"nightly\" {\n-            is_present = false; // ignore it\n+            is_present = false; // Pretend the component is entirely missing.\n         }\n \n         let targets = targets.iter().map(|name| {\n             if is_present {\n+                // The component generally exists, but it might still be missing for this target.\n                 let filename = self.filename(pkgname, name);\n                 let digest = match self.digests.remove(&filename) {\n                     Some(digest) => digest,\n+                    // This component does not exist for this target -- skip it.\n                     None => return (name.to_string(), Target::unavailable()),\n                 };\n                 let xz_filename = filename.replace(\".tar.gz\", \".tar.xz\");"}]}