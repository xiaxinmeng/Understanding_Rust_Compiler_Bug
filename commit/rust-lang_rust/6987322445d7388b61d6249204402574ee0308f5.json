{"sha": "6987322445d7388b61d6249204402574ee0308f5", "node_id": "C_kwDOAAsO6NoAKDY5ODczMjI0NDVkNzM4OGI2MWQ2MjQ5MjA0NDAyNTc0ZWUwMzA4ZjU", "commit": {"author": {"name": "Nilstrieb", "email": "48135649+Nilstrieb@users.noreply.github.com", "date": "2022-10-22T09:08:09Z"}, "committer": {"name": "Nilstrieb", "email": "48135649+Nilstrieb@users.noreply.github.com", "date": "2022-10-23T08:09:44Z"}, "message": "Update translation tests", "tree": {"sha": "75c2a049e4e6ce0dd40b506d2bd2fa49298631bc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/75c2a049e4e6ce0dd40b506d2bd2fa49298631bc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6987322445d7388b61d6249204402574ee0308f5", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN SSH SIGNATURE-----\nU1NIU0lHAAAAAQAAADMAAAALc3NoLWVkMjU1MTkAAAAgbSfWKRQb2tiqhuHtakDJeupmrF\nChDbM0msU+PXaBOk8AAAADZ2l0AAAAAAAAAAZzaGE1MTIAAABTAAAAC3NzaC1lZDI1NTE5\nAAAAQHj1beJ4gu1oL/XqQNDOvtDCsgaJJdDBgEZBIXL+T/Mn3fDGFj0gHFSrjWGRQ9iwvN\nvDTVQKh2BbsDCxzffjEw8=\n-----END SSH SIGNATURE-----", "payload": "tree 75c2a049e4e6ce0dd40b506d2bd2fa49298631bc\nparent c65ebae2216119d23d88bbfea78192a3d950c4f3\nauthor Nilstrieb <48135649+Nilstrieb@users.noreply.github.com> 1666429689 +0200\ncommitter Nilstrieb <48135649+Nilstrieb@users.noreply.github.com> 1666512584 +0200\n\nUpdate translation tests\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6987322445d7388b61d6249204402574ee0308f5", "html_url": "https://github.com/rust-lang/rust/commit/6987322445d7388b61d6249204402574ee0308f5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6987322445d7388b61d6249204402574ee0308f5/comments", "author": {"login": "Nilstrieb", "id": 48135649, "node_id": "MDQ6VXNlcjQ4MTM1NjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/48135649?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nilstrieb", "html_url": "https://github.com/Nilstrieb", "followers_url": "https://api.github.com/users/Nilstrieb/followers", "following_url": "https://api.github.com/users/Nilstrieb/following{/other_user}", "gists_url": "https://api.github.com/users/Nilstrieb/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nilstrieb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nilstrieb/subscriptions", "organizations_url": "https://api.github.com/users/Nilstrieb/orgs", "repos_url": "https://api.github.com/users/Nilstrieb/repos", "events_url": "https://api.github.com/users/Nilstrieb/events{/privacy}", "received_events_url": "https://api.github.com/users/Nilstrieb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Nilstrieb", "id": 48135649, "node_id": "MDQ6VXNlcjQ4MTM1NjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/48135649?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nilstrieb", "html_url": "https://github.com/Nilstrieb", "followers_url": "https://api.github.com/users/Nilstrieb/followers", "following_url": "https://api.github.com/users/Nilstrieb/following{/other_user}", "gists_url": "https://api.github.com/users/Nilstrieb/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nilstrieb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nilstrieb/subscriptions", "organizations_url": "https://api.github.com/users/Nilstrieb/orgs", "repos_url": "https://api.github.com/users/Nilstrieb/repos", "events_url": "https://api.github.com/users/Nilstrieb/events{/privacy}", "received_events_url": "https://api.github.com/users/Nilstrieb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c65ebae2216119d23d88bbfea78192a3d950c4f3", "url": "https://api.github.com/repos/rust-lang/rust/commits/c65ebae2216119d23d88bbfea78192a3d950c4f3", "html_url": "https://github.com/rust-lang/rust/commit/c65ebae2216119d23d88bbfea78192a3d950c4f3"}], "stats": {"total": 698, "additions": 356, "deletions": 342}, "files": [{"sha": "4e8147e2b76dce047fe95189e079aab739ee0ed2", "filename": "src/test/ui-fulldeps/fluent-messages/test.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6987322445d7388b61d6249204402574ee0308f5/src%2Ftest%2Fui-fulldeps%2Ffluent-messages%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6987322445d7388b61d6249204402574ee0308f5/src%2Ftest%2Fui-fulldeps%2Ffluent-messages%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Ffluent-messages%2Ftest.rs?ref=6987322445d7388b61d6249204402574ee0308f5", "patch": "@@ -49,6 +49,7 @@ mod duplicate {\n     use super::fluent_messages;\n \n     fluent_messages! {\n+//~^ ERROR the name `a_b_key` is defined multiple times\n         a => \"./duplicate-a.ftl\",\n         a_b => \"./duplicate-a-b.ftl\",\n //~^ ERROR overrides existing message: `a_b_key`\n@@ -80,7 +81,7 @@ mod valid {\n         valid => \"./valid.ftl\",\n     }\n \n-    use self::fluent_generated::{DEFAULT_LOCALE_RESOURCES, valid::key};\n+    use self::fluent_generated::{DEFAULT_LOCALE_RESOURCES, valid_key};\n }\n \n mod missing_crate_name {\n@@ -93,5 +94,5 @@ mod missing_crate_name {\n //~| ERROR name `with-hyphens` does not start with the crate name\n     }\n \n-    use self::fluent_generated::{DEFAULT_LOCALE_RESOURCES, test_crate::{foo, with_hyphens}};\n+    use self::fluent_generated::{DEFAULT_LOCALE_RESOURCES, test_crate_foo, with_hyphens};\n }"}, {"sha": "d1cd4fe26da27aa3dd9e43168b30e3e2244acbd1", "filename": "src/test/ui-fulldeps/fluent-messages/test.stderr", "status": "modified", "additions": 21, "deletions": 8, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/6987322445d7388b61d6249204402574ee0308f5/src%2Ftest%2Fui-fulldeps%2Ffluent-messages%2Ftest.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6987322445d7388b61d6249204402574ee0308f5/src%2Ftest%2Fui-fulldeps%2Ffluent-messages%2Ftest.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Ffluent-messages%2Ftest.stderr?ref=6987322445d7388b61d6249204402574ee0308f5", "patch": "@@ -30,56 +30,69 @@ error: expected a message field for \"missing_message\"\n   |\n \n error: overrides existing message: `a_b_key`\n-  --> $DIR/test.rs:53:16\n+  --> $DIR/test.rs:54:16\n    |\n LL |         a_b => \"./duplicate-a-b.ftl\",\n    |                ^^^^^^^^^^^^^^^^^^^^^\n    |\n help: previously defined in this resource\n-  --> $DIR/test.rs:52:14\n+  --> $DIR/test.rs:53:14\n    |\n LL |         a => \"./duplicate-a.ftl\",\n    |              ^^^^^^^^^^^^^^^^^^^\n \n+error[E0428]: the name `a_b_key` is defined multiple times\n+  --> $DIR/test.rs:51:5\n+   |\n+LL |     fluent_messages! {\n+   |     ^^^^^^^^^^^^^^^^\n+   |     |\n+   |     `a_b_key` redefined here\n+   |     previous definition of the value `a_b_key` here\n+   |\n+   = note: os-specific message\n+   = note: os-specific message\n+\n error: name `slug_with_hyphens_this-slug-has-hyphens` contains a '-' character\n-  --> $DIR/test.rs:62:30\n+  --> $DIR/test.rs:63:30\n    |\n LL |         slug_with_hyphens => \"./slug-with-hyphens.ftl\",\n    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: replace any '-'s with '_'s\n \n error: attribute `label-has-hyphens` contains a '-' character\n-  --> $DIR/test.rs:71:31\n+  --> $DIR/test.rs:72:31\n    |\n LL |         label_with_hyphens => \"./label-with-hyphens.ftl\",\n    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: replace any '-'s with '_'s\n \n error: name `with-hyphens` contains a '-' character\n-  --> $DIR/test.rs:90:23\n+  --> $DIR/test.rs:91:23\n    |\n LL |         test_crate => \"./missing-crate-name.ftl\",\n    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: replace any '-'s with '_'s\n \n error: name `with-hyphens` does not start with the crate name\n-  --> $DIR/test.rs:90:23\n+  --> $DIR/test.rs:91:23\n    |\n LL |         test_crate => \"./missing-crate-name.ftl\",\n    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: prepend `test_crate_` to the slug name: `test_crate_with_hyphens`\n \n error: name `test-crate_foo` contains a '-' character\n-  --> $DIR/test.rs:90:23\n+  --> $DIR/test.rs:91:23\n    |\n LL |         test_crate => \"./missing-crate-name.ftl\",\n    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: replace any '-'s with '_'s\n \n-error: aborting due to 9 previous errors\n+error: aborting due to 10 previous errors\n \n+For more information about this error, try `rustc --explain E0428`."}, {"sha": "643e81d99c6a69517b5345dd86063917a4110d63", "filename": "src/test/ui-fulldeps/internal-lints/diagnostics.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6987322445d7388b61d6249204402574ee0308f5/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6987322445d7388b61d6249204402574ee0308f5/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fdiagnostics.rs?ref=6987322445d7388b61d6249204402574ee0308f5", "patch": "@@ -19,14 +19,14 @@ use rustc_macros::{Diagnostic, Subdiagnostic};\n use rustc_span::Span;\n \n #[derive(Diagnostic)]\n-#[diag(compiletest::example)]\n+#[diag(compiletest_example)]\n struct DeriveDiagnostic {\n     #[primary_span]\n     span: Span,\n }\n \n #[derive(Subdiagnostic)]\n-#[note(compiletest::example)]\n+#[note(compiletest_example)]\n struct Note {\n     #[primary_span]\n     span: Span,\n@@ -45,7 +45,7 @@ pub struct TranslatableInIntoDiagnostic;\n \n impl<'a> IntoDiagnostic<'a, ErrorGuaranteed> for TranslatableInIntoDiagnostic {\n     fn into_diagnostic(self, handler: &'a Handler) -> DiagnosticBuilder<'a, ErrorGuaranteed> {\n-        handler.struct_err(fluent::compiletest::example)\n+        handler.struct_err(fluent::compiletest_example)\n     }\n }\n \n@@ -68,12 +68,12 @@ impl AddToDiagnostic for TranslatableInAddToDiagnostic {\n     where\n         F: Fn(&mut Diagnostic, SubdiagnosticMessage) -> SubdiagnosticMessage,\n     {\n-        diag.note(fluent::compiletest::note);\n+        diag.note(fluent::note);\n     }\n }\n \n pub fn make_diagnostics<'a>(handler: &'a Handler) {\n-    let _diag = handler.struct_err(fluent::compiletest::example);\n+    let _diag = handler.struct_err(fluent::compiletest_example);\n     //~^ ERROR diagnostics should only be created in `IntoDiagnostic`/`AddToDiagnostic` impls\n \n     let _diag = handler.struct_err(\"untranslatable diagnostic\");"}, {"sha": "510d6a171087085c068efd92fbd5952076a4cddc", "filename": "src/test/ui-fulldeps/internal-lints/diagnostics.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6987322445d7388b61d6249204402574ee0308f5/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fdiagnostics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6987322445d7388b61d6249204402574ee0308f5/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fdiagnostics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fdiagnostics.stderr?ref=6987322445d7388b61d6249204402574ee0308f5", "patch": "@@ -19,7 +19,7 @@ LL |         diag.note(\"untranslatable diagnostic\");\n error: diagnostics should only be created in `IntoDiagnostic`/`AddToDiagnostic` impls\n   --> $DIR/diagnostics.rs:76:25\n    |\n-LL |     let _diag = handler.struct_err(fluent::compiletest::example);\n+LL |     let _diag = handler.struct_err(fluent::compiletest_example);\n    |                         ^^^^^^^^^^\n    |\n note: the lint level is defined here"}, {"sha": "46164d573b0bd4049963b44c0332d4c2b329ed25", "filename": "src/test/ui-fulldeps/session-diagnostic/diagnostic-derive.rs", "status": "modified", "additions": 136, "deletions": 136, "changes": 272, "blob_url": "https://github.com/rust-lang/rust/blob/6987322445d7388b61d6249204402574ee0308f5/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fdiagnostic-derive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6987322445d7388b61d6249204402574ee0308f5/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fdiagnostic-derive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fdiagnostic-derive.rs?ref=6987322445d7388b61d6249204402574ee0308f5", "patch": "@@ -28,15 +28,15 @@ use rustc_errors::{Applicability, MultiSpan};\n extern crate rustc_session;\n \n #[derive(Diagnostic)]\n-#[diag(compiletest::example, code = \"E0123\")]\n+#[diag(compiletest_example, code = \"E0123\")]\n struct Hello {}\n \n #[derive(Diagnostic)]\n-#[diag(compiletest::example, code = \"E0123\")]\n+#[diag(compiletest_example, code = \"E0123\")]\n struct HelloWarn {}\n \n #[derive(Diagnostic)]\n-#[diag(compiletest::example, code = \"E0123\")]\n+#[diag(compiletest_example, code = \"E0123\")]\n //~^ ERROR unsupported type attribute for diagnostic derive enum\n enum DiagnosticOnEnum {\n     Foo,\n@@ -46,13 +46,13 @@ enum DiagnosticOnEnum {\n }\n \n #[derive(Diagnostic)]\n-#[diag(compiletest::example, code = \"E0123\")]\n+#[diag(compiletest_example, code = \"E0123\")]\n #[diag = \"E0123\"]\n //~^ ERROR `#[diag = ...]` is not a valid attribute\n struct WrongStructAttrStyle {}\n \n #[derive(Diagnostic)]\n-#[nonsense(compiletest::example, code = \"E0123\")]\n+#[nonsense(compiletest_example, code = \"E0123\")]\n //~^ ERROR `#[nonsense(...)]` is not a valid attribute\n //~^^ ERROR diagnostic slug not specified\n //~^^^ ERROR cannot find attribute `nonsense` in this scope\n@@ -90,33 +90,33 @@ struct InvalidNestedStructAttr2 {}\n struct InvalidNestedStructAttr3 {}\n \n #[derive(Diagnostic)]\n-#[diag(compiletest::example, code = \"E0123\", slug = \"foo\")]\n+#[diag(compiletest_example, code = \"E0123\", slug = \"foo\")]\n //~^ ERROR `#[diag(slug = ...)]` is not a valid attribute\n struct InvalidNestedStructAttr4 {}\n \n #[derive(Diagnostic)]\n-#[diag(compiletest::example, code = \"E0123\")]\n+#[diag(compiletest_example, code = \"E0123\")]\n struct WrongPlaceField {\n     #[suggestion = \"bar\"]\n     //~^ ERROR `#[suggestion = ...]` is not a valid attribute\n     sp: Span,\n }\n \n #[derive(Diagnostic)]\n-#[diag(compiletest::example, code = \"E0123\")]\n-#[diag(compiletest::example, code = \"E0456\")]\n+#[diag(compiletest_example, code = \"E0123\")]\n+#[diag(compiletest_example, code = \"E0456\")]\n //~^ ERROR specified multiple times\n //~^^ ERROR specified multiple times\n struct DiagSpecifiedTwice {}\n \n #[derive(Diagnostic)]\n-#[diag(compiletest::example, code = \"E0456\", code = \"E0457\")]\n+#[diag(compiletest_example, code = \"E0456\", code = \"E0457\")]\n //~^ ERROR specified multiple times\n struct CodeSpecifiedTwice {}\n \n #[derive(Diagnostic)]\n-#[diag(compiletest::example, compiletest::example, code = \"E0456\")]\n-//~^ ERROR `#[diag(compiletest::example)]` is not a valid attribute\n+#[diag(compiletest_example, compiletest_example, code = \"E0456\")]\n+//~^ ERROR `#[diag(compiletest_example)]` is not a valid attribute\n struct SlugSpecifiedTwice {}\n \n #[derive(Diagnostic)]\n@@ -128,19 +128,19 @@ struct KindNotProvided {} //~ ERROR diagnostic slug not specified\n struct SlugNotProvided {}\n \n #[derive(Diagnostic)]\n-#[diag(compiletest::example)]\n+#[diag(compiletest_example)]\n struct CodeNotProvided {}\n \n #[derive(Diagnostic)]\n-#[diag(compiletest::example, code = \"E0123\")]\n+#[diag(compiletest_example, code = \"E0123\")]\n struct MessageWrongType {\n     #[primary_span]\n     //~^ ERROR `#[primary_span]` attribute can only be applied to fields of type `Span` or `MultiSpan`\n     foo: String,\n }\n \n #[derive(Diagnostic)]\n-#[diag(compiletest::example, code = \"E0123\")]\n+#[diag(compiletest_example, code = \"E0123\")]\n struct InvalidPathFieldAttr {\n     #[nonsense]\n     //~^ ERROR `#[nonsense]` is not a valid attribute\n@@ -149,84 +149,84 @@ struct InvalidPathFieldAttr {\n }\n \n #[derive(Diagnostic)]\n-#[diag(compiletest::example, code = \"E0123\")]\n+#[diag(compiletest_example, code = \"E0123\")]\n struct ErrorWithField {\n     name: String,\n-    #[label(compiletest::label)]\n+    #[label(label)]\n     span: Span,\n }\n \n #[derive(Diagnostic)]\n-#[diag(compiletest::example, code = \"E0123\")]\n+#[diag(compiletest_example, code = \"E0123\")]\n struct ErrorWithMessageAppliedToField {\n-    #[label(compiletest::label)]\n+    #[label(label)]\n     //~^ ERROR the `#[label(...)]` attribute can only be applied to fields of type `Span` or `MultiSpan`\n     name: String,\n }\n \n #[derive(Diagnostic)]\n-#[diag(compiletest::example, code = \"E0123\")]\n+#[diag(compiletest_example, code = \"E0123\")]\n struct ErrorWithNonexistentField {\n-    #[suggestion(compiletest::suggestion, code = \"{name}\")]\n+    #[suggestion(suggestion, code = \"{name}\")]\n     //~^ ERROR `name` doesn't refer to a field on this type\n     suggestion: (Span, Applicability),\n }\n \n #[derive(Diagnostic)]\n //~^ ERROR invalid format string: expected `'}'`\n-#[diag(compiletest::example, code = \"E0123\")]\n+#[diag(compiletest_example, code = \"E0123\")]\n struct ErrorMissingClosingBrace {\n-    #[suggestion(compiletest::suggestion, code = \"{name\")]\n+    #[suggestion(suggestion, code = \"{name\")]\n     suggestion: (Span, Applicability),\n     name: String,\n     val: usize,\n }\n \n #[derive(Diagnostic)]\n //~^ ERROR invalid format string: unmatched `}`\n-#[diag(compiletest::example, code = \"E0123\")]\n+#[diag(compiletest_example, code = \"E0123\")]\n struct ErrorMissingOpeningBrace {\n-    #[suggestion(compiletest::suggestion, code = \"name}\")]\n+    #[suggestion(suggestion, code = \"name}\")]\n     suggestion: (Span, Applicability),\n     name: String,\n     val: usize,\n }\n \n #[derive(Diagnostic)]\n-#[diag(compiletest::example, code = \"E0123\")]\n+#[diag(compiletest_example, code = \"E0123\")]\n struct LabelOnSpan {\n-    #[label(compiletest::label)]\n+    #[label(label)]\n     sp: Span,\n }\n \n #[derive(Diagnostic)]\n-#[diag(compiletest::example, code = \"E0123\")]\n+#[diag(compiletest_example, code = \"E0123\")]\n struct LabelOnNonSpan {\n-    #[label(compiletest::label)]\n+    #[label(label)]\n     //~^ ERROR the `#[label(...)]` attribute can only be applied to fields of type `Span` or `MultiSpan`\n     id: u32,\n }\n \n #[derive(Diagnostic)]\n-#[diag(compiletest::example, code = \"E0123\")]\n+#[diag(compiletest_example, code = \"E0123\")]\n struct Suggest {\n-    #[suggestion(compiletest::suggestion, code = \"This is the suggested code\")]\n-    #[suggestion_short(compiletest::suggestion, code = \"This is the suggested code\")]\n-    #[suggestion_hidden(compiletest::suggestion, code = \"This is the suggested code\")]\n-    #[suggestion_verbose(compiletest::suggestion, code = \"This is the suggested code\")]\n+    #[suggestion(suggestion, code = \"This is the suggested code\")]\n+    #[suggestion_short(suggestion, code = \"This is the suggested code\")]\n+    #[suggestion_hidden(suggestion, code = \"This is the suggested code\")]\n+    #[suggestion_verbose(suggestion, code = \"This is the suggested code\")]\n     suggestion: (Span, Applicability),\n }\n \n #[derive(Diagnostic)]\n-#[diag(compiletest::example, code = \"E0123\")]\n+#[diag(compiletest_example, code = \"E0123\")]\n struct SuggestWithoutCode {\n-    #[suggestion(compiletest::suggestion)]\n+    #[suggestion(suggestion)]\n     //~^ ERROR suggestion without `code = \"...\"`\n     suggestion: (Span, Applicability),\n }\n \n #[derive(Diagnostic)]\n-#[diag(compiletest::example, code = \"E0123\")]\n+#[diag(compiletest_example, code = \"E0123\")]\n struct SuggestWithBadKey {\n     #[suggestion(nonsense = \"bar\")]\n     //~^ ERROR `#[suggestion(nonsense = ...)]` is not a valid attribute\n@@ -235,7 +235,7 @@ struct SuggestWithBadKey {\n }\n \n #[derive(Diagnostic)]\n-#[diag(compiletest::example, code = \"E0123\")]\n+#[diag(compiletest_example, code = \"E0123\")]\n struct SuggestWithShorthandMsg {\n     #[suggestion(msg = \"bar\")]\n     //~^ ERROR `#[suggestion(msg = ...)]` is not a valid attribute\n@@ -244,91 +244,91 @@ struct SuggestWithShorthandMsg {\n }\n \n #[derive(Diagnostic)]\n-#[diag(compiletest::example, code = \"E0123\")]\n+#[diag(compiletest_example, code = \"E0123\")]\n struct SuggestWithoutMsg {\n     #[suggestion(code = \"bar\")]\n     suggestion: (Span, Applicability),\n }\n \n #[derive(Diagnostic)]\n-#[diag(compiletest::example, code = \"E0123\")]\n+#[diag(compiletest_example, code = \"E0123\")]\n struct SuggestWithTypesSwapped {\n-    #[suggestion(compiletest::suggestion, code = \"This is suggested code\")]\n+    #[suggestion(suggestion, code = \"This is suggested code\")]\n     suggestion: (Applicability, Span),\n }\n \n #[derive(Diagnostic)]\n-#[diag(compiletest::example, code = \"E0123\")]\n+#[diag(compiletest_example, code = \"E0123\")]\n struct SuggestWithWrongTypeApplicabilityOnly {\n-    #[suggestion(compiletest::suggestion, code = \"This is suggested code\")]\n+    #[suggestion(suggestion, code = \"This is suggested code\")]\n     //~^ ERROR wrong field type for suggestion\n     suggestion: Applicability,\n }\n \n #[derive(Diagnostic)]\n-#[diag(compiletest::example, code = \"E0123\")]\n+#[diag(compiletest_example, code = \"E0123\")]\n struct SuggestWithSpanOnly {\n-    #[suggestion(compiletest::suggestion, code = \"This is suggested code\")]\n+    #[suggestion(suggestion, code = \"This is suggested code\")]\n     suggestion: Span,\n }\n \n #[derive(Diagnostic)]\n-#[diag(compiletest::example, code = \"E0123\")]\n+#[diag(compiletest_example, code = \"E0123\")]\n struct SuggestWithDuplicateSpanAndApplicability {\n-    #[suggestion(compiletest::suggestion, code = \"This is suggested code\")]\n+    #[suggestion(suggestion, code = \"This is suggested code\")]\n     suggestion: (Span, Span, Applicability),\n     //~^ ERROR specified multiple times\n }\n \n #[derive(Diagnostic)]\n-#[diag(compiletest::example, code = \"E0123\")]\n+#[diag(compiletest_example, code = \"E0123\")]\n struct SuggestWithDuplicateApplicabilityAndSpan {\n-    #[suggestion(compiletest::suggestion, code = \"This is suggested code\")]\n+    #[suggestion(suggestion, code = \"This is suggested code\")]\n     suggestion: (Applicability, Applicability, Span),\n     //~^ ERROR specified multiple times\n }\n \n #[derive(Diagnostic)]\n-#[diag(compiletest::example, code = \"E0123\")]\n+#[diag(compiletest_example, code = \"E0123\")]\n struct WrongKindOfAnnotation {\n     #[label = \"bar\"]\n     //~^ ERROR `#[label = ...]` is not a valid attribute\n     z: Span,\n }\n \n #[derive(Diagnostic)]\n-#[diag(compiletest::example, code = \"E0123\")]\n+#[diag(compiletest_example, code = \"E0123\")]\n struct OptionsInErrors {\n-    #[label(compiletest::label)]\n+    #[label(label)]\n     label: Option<Span>,\n-    #[suggestion(compiletest::suggestion, code = \"...\")]\n+    #[suggestion(suggestion, code = \"...\")]\n     opt_sugg: Option<(Span, Applicability)>,\n }\n \n #[derive(Diagnostic)]\n-#[diag(compiletest::example, code = \"E0456\")]\n+#[diag(compiletest_example, code = \"E0456\")]\n struct MoveOutOfBorrowError<'tcx> {\n     name: Ident,\n     ty: Ty<'tcx>,\n     #[primary_span]\n-    #[label(compiletest::label)]\n+    #[label(label)]\n     span: Span,\n-    #[label(compiletest::label)]\n+    #[label(label)]\n     other_span: Span,\n-    #[suggestion(compiletest::suggestion, code = \"{name}.clone()\")]\n+    #[suggestion(suggestion, code = \"{name}.clone()\")]\n     opt_sugg: Option<(Span, Applicability)>,\n }\n \n #[derive(Diagnostic)]\n-#[diag(compiletest::example, code = \"E0123\")]\n+#[diag(compiletest_example, code = \"E0123\")]\n struct ErrorWithLifetime<'a> {\n-    #[label(compiletest::label)]\n+    #[label(label)]\n     span: Span,\n     name: &'a str,\n }\n \n #[derive(Diagnostic)]\n-#[diag(compiletest::example, code = \"E0123\")]\n+#[diag(compiletest_example, code = \"E0123\")]\n struct ErrorWithDefaultLabelAttr<'a> {\n     #[label]\n     span: Span,\n@@ -337,15 +337,15 @@ struct ErrorWithDefaultLabelAttr<'a> {\n \n #[derive(Diagnostic)]\n //~^ ERROR the trait bound `Hello: IntoDiagnosticArg` is not satisfied\n-#[diag(compiletest::example, code = \"E0123\")]\n+#[diag(compiletest_example, code = \"E0123\")]\n struct ArgFieldWithoutSkip {\n     #[primary_span]\n     span: Span,\n     other: Hello,\n }\n \n #[derive(Diagnostic)]\n-#[diag(compiletest::example, code = \"E0123\")]\n+#[diag(compiletest_example, code = \"E0123\")]\n struct ArgFieldWithSkip {\n     #[primary_span]\n     span: Span,\n@@ -356,298 +356,298 @@ struct ArgFieldWithSkip {\n }\n \n #[derive(Diagnostic)]\n-#[diag(compiletest::example, code = \"E0123\")]\n+#[diag(compiletest_example, code = \"E0123\")]\n struct ErrorWithSpannedNote {\n     #[note]\n     span: Span,\n }\n \n #[derive(Diagnostic)]\n-#[diag(compiletest::example, code = \"E0123\")]\n+#[diag(compiletest_example, code = \"E0123\")]\n struct ErrorWithSpannedNoteCustom {\n-    #[note(compiletest::note)]\n+    #[note(note)]\n     span: Span,\n }\n \n #[derive(Diagnostic)]\n-#[diag(compiletest::example, code = \"E0123\")]\n+#[diag(compiletest_example, code = \"E0123\")]\n #[note]\n struct ErrorWithNote {\n     val: String,\n }\n \n #[derive(Diagnostic)]\n-#[diag(compiletest::example, code = \"E0123\")]\n-#[note(compiletest::note)]\n+#[diag(compiletest_example, code = \"E0123\")]\n+#[note(note)]\n struct ErrorWithNoteCustom {\n     val: String,\n }\n \n #[derive(Diagnostic)]\n-#[diag(compiletest::example, code = \"E0123\")]\n+#[diag(compiletest_example, code = \"E0123\")]\n struct ErrorWithSpannedHelp {\n     #[help]\n     span: Span,\n }\n \n #[derive(Diagnostic)]\n-#[diag(compiletest::example, code = \"E0123\")]\n+#[diag(compiletest_example, code = \"E0123\")]\n struct ErrorWithSpannedHelpCustom {\n-    #[help(compiletest::help)]\n+    #[help(help)]\n     span: Span,\n }\n \n #[derive(Diagnostic)]\n-#[diag(compiletest::example, code = \"E0123\")]\n+#[diag(compiletest_example, code = \"E0123\")]\n #[help]\n struct ErrorWithHelp {\n     val: String,\n }\n \n #[derive(Diagnostic)]\n-#[diag(compiletest::example, code = \"E0123\")]\n-#[help(compiletest::help)]\n+#[diag(compiletest_example, code = \"E0123\")]\n+#[help(help)]\n struct ErrorWithHelpCustom {\n     val: String,\n }\n \n #[derive(Diagnostic)]\n #[help]\n-#[diag(compiletest::example, code = \"E0123\")]\n+#[diag(compiletest_example, code = \"E0123\")]\n struct ErrorWithHelpWrongOrder {\n     val: String,\n }\n \n #[derive(Diagnostic)]\n-#[help(compiletest::help)]\n-#[diag(compiletest::example, code = \"E0123\")]\n+#[help(help)]\n+#[diag(compiletest_example, code = \"E0123\")]\n struct ErrorWithHelpCustomWrongOrder {\n     val: String,\n }\n \n #[derive(Diagnostic)]\n #[note]\n-#[diag(compiletest::example, code = \"E0123\")]\n+#[diag(compiletest_example, code = \"E0123\")]\n struct ErrorWithNoteWrongOrder {\n     val: String,\n }\n \n #[derive(Diagnostic)]\n-#[note(compiletest::note)]\n-#[diag(compiletest::example, code = \"E0123\")]\n+#[note(note)]\n+#[diag(compiletest_example, code = \"E0123\")]\n struct ErrorWithNoteCustomWrongOrder {\n     val: String,\n }\n \n #[derive(Diagnostic)]\n-#[diag(compiletest::example, code = \"E0123\")]\n+#[diag(compiletest_example, code = \"E0123\")]\n struct ApplicabilityInBoth {\n-    #[suggestion(compiletest::suggestion, code = \"...\", applicability = \"maybe-incorrect\")]\n+    #[suggestion(suggestion, code = \"...\", applicability = \"maybe-incorrect\")]\n     //~^ ERROR specified multiple times\n     suggestion: (Span, Applicability),\n }\n \n #[derive(Diagnostic)]\n-#[diag(compiletest::example, code = \"E0123\")]\n+#[diag(compiletest_example, code = \"E0123\")]\n struct InvalidApplicability {\n-    #[suggestion(compiletest::suggestion, code = \"...\", applicability = \"batman\")]\n+    #[suggestion(suggestion, code = \"...\", applicability = \"batman\")]\n     //~^ ERROR invalid applicability\n     suggestion: Span,\n }\n \n #[derive(Diagnostic)]\n-#[diag(compiletest::example, code = \"E0123\")]\n+#[diag(compiletest_example, code = \"E0123\")]\n struct ValidApplicability {\n-    #[suggestion(compiletest::suggestion, code = \"...\", applicability = \"maybe-incorrect\")]\n+    #[suggestion(suggestion, code = \"...\", applicability = \"maybe-incorrect\")]\n     suggestion: Span,\n }\n \n #[derive(Diagnostic)]\n-#[diag(compiletest::example, code = \"E0123\")]\n+#[diag(compiletest_example, code = \"E0123\")]\n struct NoApplicability {\n-    #[suggestion(compiletest::suggestion, code = \"...\")]\n+    #[suggestion(suggestion, code = \"...\")]\n     suggestion: Span,\n }\n \n #[derive(Subdiagnostic)]\n-#[note(parser::add_paren)]\n+#[note(parser_add_paren)]\n struct Note;\n \n #[derive(Diagnostic)]\n-#[diag(compiletest::example)]\n+#[diag(compiletest_example)]\n struct Subdiagnostic {\n     #[subdiagnostic]\n     note: Note,\n }\n \n #[derive(Diagnostic)]\n-#[diag(compiletest::example, code = \"E0123\")]\n+#[diag(compiletest_example, code = \"E0123\")]\n struct VecField {\n     #[primary_span]\n     #[label]\n     spans: Vec<Span>,\n }\n \n #[derive(Diagnostic)]\n-#[diag(compiletest::example, code = \"E0123\")]\n+#[diag(compiletest_example, code = \"E0123\")]\n struct UnitField {\n     #[primary_span]\n     spans: Span,\n     #[help]\n     foo: (),\n-    #[help(compiletest::help)]\n+    #[help(help)]\n     bar: (),\n }\n \n #[derive(Diagnostic)]\n-#[diag(compiletest::example, code = \"E0123\")]\n+#[diag(compiletest_example, code = \"E0123\")]\n struct OptUnitField {\n     #[primary_span]\n     spans: Span,\n     #[help]\n     foo: Option<()>,\n-    #[help(compiletest::help)]\n+    #[help(help)]\n     bar: Option<()>,\n }\n \n #[derive(Diagnostic)]\n-#[diag(compiletest::example, code = \"E0123\")]\n+#[diag(compiletest_example, code = \"E0123\")]\n struct LabelWithTrailingPath {\n-    #[label(compiletest::label, foo)]\n+    #[label(label, foo)]\n     //~^ ERROR `#[label(foo)]` is not a valid attribute\n     span: Span,\n }\n \n #[derive(Diagnostic)]\n-#[diag(compiletest::example, code = \"E0123\")]\n+#[diag(compiletest_example, code = \"E0123\")]\n struct LabelWithTrailingNameValue {\n-    #[label(compiletest::label, foo = \"...\")]\n+    #[label(label, foo = \"...\")]\n     //~^ ERROR `#[label(foo = ...)]` is not a valid attribute\n     span: Span,\n }\n \n #[derive(Diagnostic)]\n-#[diag(compiletest::example, code = \"E0123\")]\n+#[diag(compiletest_example, code = \"E0123\")]\n struct LabelWithTrailingList {\n-    #[label(compiletest::label, foo(\"...\"))]\n+    #[label(label, foo(\"...\"))]\n     //~^ ERROR `#[label(foo(...))]` is not a valid attribute\n     span: Span,\n }\n \n #[derive(LintDiagnostic)]\n-#[diag(compiletest::example)]\n+#[diag(compiletest_example)]\n struct LintsGood {\n }\n \n #[derive(LintDiagnostic)]\n-#[diag(compiletest::example)]\n+#[diag(compiletest_example)]\n struct PrimarySpanOnLint {\n     #[primary_span]\n     //~^ ERROR `#[primary_span]` is not a valid attribute\n     span: Span,\n }\n \n #[derive(Diagnostic)]\n-#[diag(compiletest::example, code = \"E0123\")]\n+#[diag(compiletest_example, code = \"E0123\")]\n struct ErrorWithMultiSpan {\n     #[primary_span]\n     span: MultiSpan,\n }\n \n #[derive(Diagnostic)]\n-#[diag(compiletest::example, code = \"E0123\")]\n+#[diag(compiletest_example, code = \"E0123\")]\n #[warning]\n struct ErrorWithWarn {\n     val: String,\n }\n \n #[derive(Diagnostic)]\n-#[error(compiletest::example, code = \"E0123\")]\n+#[error(compiletest_example, code = \"E0123\")]\n //~^ ERROR `#[error(...)]` is not a valid attribute\n //~| ERROR diagnostic slug not specified\n //~| ERROR cannot find attribute `error` in this scope\n struct ErrorAttribute {}\n \n #[derive(Diagnostic)]\n-#[warn_(compiletest::example, code = \"E0123\")]\n+#[warn_(compiletest_example, code = \"E0123\")]\n //~^ ERROR `#[warn_(...)]` is not a valid attribute\n //~| ERROR diagnostic slug not specified\n //~| ERROR cannot find attribute `warn_` in this scope\n struct WarnAttribute {}\n \n #[derive(Diagnostic)]\n-#[lint(compiletest::example, code = \"E0123\")]\n+#[lint(compiletest_example, code = \"E0123\")]\n //~^ ERROR `#[lint(...)]` is not a valid attribute\n //~| ERROR diagnostic slug not specified\n //~| ERROR cannot find attribute `lint` in this scope\n struct LintAttributeOnSessionDiag {}\n \n #[derive(LintDiagnostic)]\n-#[lint(compiletest::example, code = \"E0123\")]\n+#[lint(compiletest_example, code = \"E0123\")]\n //~^ ERROR `#[lint(...)]` is not a valid attribute\n //~| ERROR `#[lint(...)]` is not a valid attribute\n //~| ERROR diagnostic slug not specified\n //~| ERROR cannot find attribute `lint` in this scope\n struct LintAttributeOnLintDiag {}\n \n #[derive(Diagnostic)]\n-#[diag(compiletest::example, code = \"E0123\")]\n+#[diag(compiletest_example, code = \"E0123\")]\n struct DuplicatedSuggestionCode {\n-    #[suggestion(compiletest::suggestion, code = \"...\", code = \",,,\")]\n+    #[suggestion(suggestion, code = \"...\", code = \",,,\")]\n     //~^ ERROR specified multiple times\n     suggestion: Span,\n }\n \n #[derive(Diagnostic)]\n-#[diag(compiletest::example, code = \"E0123\")]\n+#[diag(compiletest_example, code = \"E0123\")]\n struct InvalidTypeInSuggestionTuple {\n-    #[suggestion(compiletest::suggestion, code = \"...\")]\n+    #[suggestion(suggestion, code = \"...\")]\n     suggestion: (Span, usize),\n     //~^ ERROR wrong types for suggestion\n }\n \n #[derive(Diagnostic)]\n-#[diag(compiletest::example, code = \"E0123\")]\n+#[diag(compiletest_example, code = \"E0123\")]\n struct MissingApplicabilityInSuggestionTuple {\n-    #[suggestion(compiletest::suggestion, code = \"...\")]\n+    #[suggestion(suggestion, code = \"...\")]\n     suggestion: (Span,),\n     //~^ ERROR wrong types for suggestion\n }\n \n #[derive(Diagnostic)]\n-#[diag(compiletest::example, code = \"E0123\")]\n+#[diag(compiletest_example, code = \"E0123\")]\n struct MissingCodeInSuggestion {\n-    #[suggestion(compiletest::suggestion)]\n+    #[suggestion(suggestion)]\n     //~^ ERROR suggestion without `code = \"...\"`\n     suggestion: Span,\n }\n \n #[derive(Diagnostic)]\n-#[diag(compiletest::example, code = \"E0123\")]\n-#[multipart_suggestion(compiletest::suggestion)]\n+#[diag(compiletest_example, code = \"E0123\")]\n+#[multipart_suggestion(suggestion)]\n //~^ ERROR `#[multipart_suggestion(...)]` is not a valid attribute\n //~| ERROR cannot find attribute `multipart_suggestion` in this scope\n #[multipart_suggestion()]\n //~^ ERROR `#[multipart_suggestion(...)]` is not a valid attribute\n //~| ERROR cannot find attribute `multipart_suggestion` in this scope\n struct MultipartSuggestion {\n-    #[multipart_suggestion(compiletest::suggestion)]\n+    #[multipart_suggestion(suggestion)]\n     //~^ ERROR `#[multipart_suggestion(...)]` is not a valid attribute\n     //~| ERROR cannot find attribute `multipart_suggestion` in this scope\n     suggestion: Span,\n }\n \n #[derive(Diagnostic)]\n-#[diag(compiletest::example, code = \"E0123\")]\n-#[suggestion(compiletest::suggestion, code = \"...\")]\n+#[diag(compiletest_example, code = \"E0123\")]\n+#[suggestion(suggestion, code = \"...\")]\n //~^ ERROR `#[suggestion(...)]` is not a valid attribute\n struct SuggestionOnStruct {\n     #[primary_span]\n     suggestion: Span,\n }\n \n #[derive(Diagnostic)]\n-#[diag(compiletest::example, code = \"E0123\")]\n+#[diag(compiletest_example, code = \"E0123\")]\n #[label]\n //~^ ERROR `#[label]` is not a valid attribute\n struct LabelOnStruct {\n@@ -657,70 +657,70 @@ struct LabelOnStruct {\n \n #[derive(Diagnostic)]\n enum ExampleEnum {\n-    #[diag(compiletest::example)]\n+    #[diag(compiletest_example)]\n     Foo {\n         #[primary_span]\n         sp: Span,\n         #[note]\n         note_sp: Span,\n     },\n-    #[diag(compiletest::example)]\n+    #[diag(compiletest_example)]\n     Bar {\n         #[primary_span]\n         sp: Span,\n     },\n-    #[diag(compiletest::example)]\n+    #[diag(compiletest_example)]\n     Baz,\n }\n \n #[derive(Diagnostic)]\n-#[diag(compiletest::example, code = \"E0123\")]\n+#[diag(compiletest_example, code = \"E0123\")]\n struct RawIdentDiagnosticArg {\n     pub r#type: String,\n }\n \n #[derive(Diagnostic)]\n-#[diag(compiletest::example)]\n+#[diag(compiletest_example)]\n struct SubdiagnosticBad {\n     #[subdiagnostic(bad)]\n //~^ ERROR `#[subdiagnostic(bad)]` is not a valid attribute\n     note: Note,\n }\n \n #[derive(Diagnostic)]\n-#[diag(compiletest::example)]\n+#[diag(compiletest_example)]\n struct SubdiagnosticBadStr {\n     #[subdiagnostic = \"bad\"]\n //~^ ERROR `#[subdiagnostic = ...]` is not a valid attribute\n     note: Note,\n }\n \n #[derive(Diagnostic)]\n-#[diag(compiletest::example)]\n+#[diag(compiletest_example)]\n struct SubdiagnosticBadTwice {\n     #[subdiagnostic(bad, bad)]\n //~^ ERROR `#[subdiagnostic(...)]` is not a valid attribute\n     note: Note,\n }\n \n #[derive(Diagnostic)]\n-#[diag(compiletest::example)]\n+#[diag(compiletest_example)]\n struct SubdiagnosticBadLitStr {\n     #[subdiagnostic(\"bad\")]\n //~^ ERROR `#[subdiagnostic(\"...\")]` is not a valid attribute\n     note: Note,\n }\n \n #[derive(LintDiagnostic)]\n-#[diag(compiletest::example)]\n+#[diag(compiletest_example)]\n struct SubdiagnosticEagerLint {\n     #[subdiagnostic(eager)]\n //~^ ERROR `#[subdiagnostic(...)]` is not a valid attribute\n     note: Note,\n }\n \n #[derive(Diagnostic)]\n-#[diag(compiletest::example)]\n+#[diag(compiletest_example)]\n struct SubdiagnosticEagerCorrect {\n     #[subdiagnostic(eager)]\n     note: Note,\n@@ -732,7 +732,7 @@ struct SubdiagnosticEagerCorrect {\n \n #[derive(Subdiagnostic)]\n #[suggestion_short(\n-    parser::use_instead,\n+    use_instead,\n     applicability = \"machine-applicable\",\n     code = \"{correct}\"\n )]\n@@ -744,15 +744,15 @@ pub(crate) struct SubdiagnosticWithSuggestion {\n }\n \n #[derive(Diagnostic)]\n-#[diag(compiletest::example)]\n+#[diag(compiletest_example)]\n struct SubdiagnosticEagerSuggestion {\n     #[subdiagnostic(eager)]\n     sub: SubdiagnosticWithSuggestion,\n }\n \n /// with a doc comment on the type..\n #[derive(Diagnostic)]\n-#[diag(compiletest::example, code = \"E0123\")]\n+#[diag(compiletest_example, code = \"E0123\")]\n struct WithDocComment {\n     /// ..and the field\n     #[primary_span]"}, {"sha": "0a1c4bddb06a089eafc54d7deb989daa39769d4c", "filename": "src/test/ui-fulldeps/session-diagnostic/diagnostic-derive.stderr", "status": "modified", "additions": 101, "deletions": 101, "changes": 202, "blob_url": "https://github.com/rust-lang/rust/blob/6987322445d7388b61d6249204402574ee0308f5/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fdiagnostic-derive.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6987322445d7388b61d6249204402574ee0308f5/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fdiagnostic-derive.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fdiagnostic-derive.stderr?ref=6987322445d7388b61d6249204402574ee0308f5", "patch": "@@ -1,24 +1,24 @@\n error: unsupported type attribute for diagnostic derive enum\n   --> $DIR/diagnostic-derive.rs:39:1\n    |\n-LL | #[diag(compiletest::example, code = \"E0123\")]\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | #[diag(compiletest_example, code = \"E0123\")]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: diagnostic slug not specified\n   --> $DIR/diagnostic-derive.rs:42:5\n    |\n LL |     Foo,\n    |     ^^^\n    |\n-   = help: specify the slug as the first argument to the `#[diag(...)]` attribute, such as `#[diag(hir_analysis::example_error)]`\n+   = help: specify the slug as the first argument to the `#[diag(...)]` attribute, such as `#[diag(hir_analysis_example_error)]`\n \n error: diagnostic slug not specified\n   --> $DIR/diagnostic-derive.rs:44:5\n    |\n LL |     Bar,\n    |     ^^^\n    |\n-   = help: specify the slug as the first argument to the `#[diag(...)]` attribute, such as `#[diag(hir_analysis::example_error)]`\n+   = help: specify the slug as the first argument to the `#[diag(...)]` attribute, such as `#[diag(hir_analysis_example_error)]`\n \n error: `#[diag = ...]` is not a valid attribute\n   --> $DIR/diagnostic-derive.rs:50:1\n@@ -29,20 +29,20 @@ LL | #[diag = \"E0123\"]\n error: `#[nonsense(...)]` is not a valid attribute\n   --> $DIR/diagnostic-derive.rs:55:1\n    |\n-LL | #[nonsense(compiletest::example, code = \"E0123\")]\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | #[nonsense(compiletest_example, code = \"E0123\")]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: diagnostic slug not specified\n   --> $DIR/diagnostic-derive.rs:55:1\n    |\n-LL | / #[nonsense(compiletest::example, code = \"E0123\")]\n+LL | / #[nonsense(compiletest_example, code = \"E0123\")]\n LL | |\n LL | |\n LL | |\n LL | | struct InvalidStructAttr {}\n    | |___________________________^\n    |\n-   = help: specify the slug as the first argument to the `#[diag(...)]` attribute, such as `#[diag(hir_analysis::example_error)]`\n+   = help: specify the slug as the first argument to the `#[diag(...)]` attribute, such as `#[diag(hir_analysis_example_error)]`\n \n error: `#[diag(\"...\")]` is not a valid attribute\n   --> $DIR/diagnostic-derive.rs:62:8\n@@ -61,7 +61,7 @@ LL | |\n LL | | struct InvalidLitNestedAttr {}\n    | |______________________________^\n    |\n-   = help: specify the slug as the first argument to the `#[diag(...)]` attribute, such as `#[diag(hir_analysis::example_error)]`\n+   = help: specify the slug as the first argument to the `#[diag(...)]` attribute, such as `#[diag(hir_analysis_example_error)]`\n \n error: `#[diag(nonsense(...))]` is not a valid attribute\n   --> $DIR/diagnostic-derive.rs:73:8\n@@ -80,7 +80,7 @@ LL | |\n LL | | struct InvalidNestedStructAttr1 {}\n    | |__________________________________^\n    |\n-   = help: specify the slug as the first argument to the `#[diag(...)]` attribute, such as `#[diag(hir_analysis::example_error)]`\n+   = help: specify the slug as the first argument to the `#[diag(...)]` attribute, such as `#[diag(hir_analysis_example_error)]`\n \n error: `#[diag(nonsense = ...)]` is not a valid attribute\n   --> $DIR/diagnostic-derive.rs:79:8\n@@ -108,7 +108,7 @@ LL | |\n LL | | struct InvalidNestedStructAttr2 {}\n    | |__________________________________^\n    |\n-   = help: specify the slug as the first argument to the `#[diag(...)]` attribute, such as `#[diag(hir_analysis::example_error)]`\n+   = help: specify the slug as the first argument to the `#[diag(...)]` attribute, such as `#[diag(hir_analysis_example_error)]`\n \n error: `#[diag(nonsense = ...)]` is not a valid attribute\n   --> $DIR/diagnostic-derive.rs:86:8\n@@ -134,13 +134,13 @@ LL | |\n LL | | struct InvalidNestedStructAttr3 {}\n    | |__________________________________^\n    |\n-   = help: specify the slug as the first argument to the `#[diag(...)]` attribute, such as `#[diag(hir_analysis::example_error)]`\n+   = help: specify the slug as the first argument to the `#[diag(...)]` attribute, such as `#[diag(hir_analysis_example_error)]`\n \n error: `#[diag(slug = ...)]` is not a valid attribute\n-  --> $DIR/diagnostic-derive.rs:93:46\n+  --> $DIR/diagnostic-derive.rs:93:45\n    |\n-LL | #[diag(compiletest::example, code = \"E0123\", slug = \"foo\")]\n-   |                                              ^^^^^^^^^^^^\n+LL | #[diag(compiletest_example, code = \"E0123\", slug = \"foo\")]\n+   |                                             ^^^^^^^^^^^^\n    |\n    = help: only `code` is a valid nested attributes following the slug\n \n@@ -153,44 +153,44 @@ LL |     #[suggestion = \"bar\"]\n error: specified multiple times\n   --> $DIR/diagnostic-derive.rs:107:8\n    |\n-LL | #[diag(compiletest::example, code = \"E0456\")]\n-   |        ^^^^^^^^^^^^^^^^^^^^\n+LL | #[diag(compiletest_example, code = \"E0456\")]\n+   |        ^^^^^^^^^^^^^^^^^^^\n    |\n note: previously specified here\n   --> $DIR/diagnostic-derive.rs:106:8\n    |\n-LL | #[diag(compiletest::example, code = \"E0123\")]\n-   |        ^^^^^^^^^^^^^^^^^^^^\n+LL | #[diag(compiletest_example, code = \"E0123\")]\n+   |        ^^^^^^^^^^^^^^^^^^^\n \n error: specified multiple times\n-  --> $DIR/diagnostic-derive.rs:107:37\n+  --> $DIR/diagnostic-derive.rs:107:36\n    |\n-LL | #[diag(compiletest::example, code = \"E0456\")]\n-   |                                     ^^^^^^^\n+LL | #[diag(compiletest_example, code = \"E0456\")]\n+   |                                    ^^^^^^^\n    |\n note: previously specified here\n-  --> $DIR/diagnostic-derive.rs:106:37\n+  --> $DIR/diagnostic-derive.rs:106:36\n    |\n-LL | #[diag(compiletest::example, code = \"E0123\")]\n-   |                                     ^^^^^^^\n+LL | #[diag(compiletest_example, code = \"E0123\")]\n+   |                                    ^^^^^^^\n \n error: specified multiple times\n-  --> $DIR/diagnostic-derive.rs:113:53\n+  --> $DIR/diagnostic-derive.rs:113:52\n    |\n-LL | #[diag(compiletest::example, code = \"E0456\", code = \"E0457\")]\n-   |                                                     ^^^^^^^\n+LL | #[diag(compiletest_example, code = \"E0456\", code = \"E0457\")]\n+   |                                                    ^^^^^^^\n    |\n note: previously specified here\n-  --> $DIR/diagnostic-derive.rs:113:37\n+  --> $DIR/diagnostic-derive.rs:113:36\n    |\n-LL | #[diag(compiletest::example, code = \"E0456\", code = \"E0457\")]\n-   |                                     ^^^^^^^\n+LL | #[diag(compiletest_example, code = \"E0456\", code = \"E0457\")]\n+   |                                    ^^^^^^^\n \n-error: `#[diag(compiletest::example)]` is not a valid attribute\n-  --> $DIR/diagnostic-derive.rs:118:30\n+error: `#[diag(compiletest_example)]` is not a valid attribute\n+  --> $DIR/diagnostic-derive.rs:118:29\n    |\n-LL | #[diag(compiletest::example, compiletest::example, code = \"E0456\")]\n-   |                              ^^^^^^^^^^^^^^^^^^^^\n+LL | #[diag(compiletest_example, compiletest_example, code = \"E0456\")]\n+   |                             ^^^^^^^^^^^^^^^^^^^\n    |\n    = help: diagnostic slug must be the first argument\n \n@@ -200,7 +200,7 @@ error: diagnostic slug not specified\n LL | struct KindNotProvided {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = help: specify the slug as the first argument to the `#[diag(...)]` attribute, such as `#[diag(hir_analysis::example_error)]`\n+   = help: specify the slug as the first argument to the `#[diag(...)]` attribute, such as `#[diag(hir_analysis_example_error)]`\n \n error: diagnostic slug not specified\n   --> $DIR/diagnostic-derive.rs:126:1\n@@ -210,7 +210,7 @@ LL | |\n LL | | struct SlugNotProvided {}\n    | |_________________________^\n    |\n-   = help: specify the slug as the first argument to the `#[diag(...)]` attribute, such as `#[diag(hir_analysis::example_error)]`\n+   = help: specify the slug as the first argument to the `#[diag(...)]` attribute, such as `#[diag(hir_analysis_example_error)]`\n \n error: the `#[primary_span]` attribute can only be applied to fields of type `Span` or `MultiSpan`\n   --> $DIR/diagnostic-derive.rs:137:5\n@@ -227,14 +227,14 @@ LL |     #[nonsense]\n error: the `#[label(...)]` attribute can only be applied to fields of type `Span` or `MultiSpan`\n   --> $DIR/diagnostic-derive.rs:162:5\n    |\n-LL |     #[label(compiletest::label)]\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |     #[label(label)]\n+   |     ^^^^^^^^^^^^^^^\n \n error: `name` doesn't refer to a field on this type\n-  --> $DIR/diagnostic-derive.rs:170:50\n+  --> $DIR/diagnostic-derive.rs:170:37\n    |\n-LL |     #[suggestion(compiletest::suggestion, code = \"{name}\")]\n-   |                                                  ^^^^^^^^\n+LL |     #[suggestion(suggestion, code = \"{name}\")]\n+   |                                     ^^^^^^^^\n \n error: invalid format string: expected `'}'` but string was terminated\n   --> $DIR/diagnostic-derive.rs:175:10\n@@ -257,14 +257,14 @@ LL | #[derive(Diagnostic)]\n error: the `#[label(...)]` attribute can only be applied to fields of type `Span` or `MultiSpan`\n   --> $DIR/diagnostic-derive.rs:205:5\n    |\n-LL |     #[label(compiletest::label)]\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |     #[label(label)]\n+   |     ^^^^^^^^^^^^^^^\n \n error: suggestion without `code = \"...\"`\n   --> $DIR/diagnostic-derive.rs:223:5\n    |\n-LL |     #[suggestion(compiletest::suggestion)]\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |     #[suggestion(suggestion)]\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: `#[suggestion(nonsense = ...)]` is not a valid attribute\n   --> $DIR/diagnostic-derive.rs:231:18\n@@ -297,7 +297,7 @@ LL |     #[suggestion(msg = \"bar\")]\n error: wrong field type for suggestion\n   --> $DIR/diagnostic-derive.rs:263:5\n    |\n-LL | /     #[suggestion(compiletest::suggestion, code = \"This is suggested code\")]\n+LL | /     #[suggestion(suggestion, code = \"This is suggested code\")]\n LL | |\n LL | |     suggestion: Applicability,\n    | |_____________________________^\n@@ -335,10 +335,10 @@ LL |     #[label = \"bar\"]\n    |     ^^^^^^^^^^^^^^^^\n \n error: specified multiple times\n-  --> $DIR/diagnostic-derive.rs:445:57\n+  --> $DIR/diagnostic-derive.rs:445:44\n    |\n-LL |     #[suggestion(compiletest::suggestion, code = \"...\", applicability = \"maybe-incorrect\")]\n-   |                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |     #[suggestion(suggestion, code = \"...\", applicability = \"maybe-incorrect\")]\n+   |                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: previously specified here\n   --> $DIR/diagnostic-derive.rs:447:24\n@@ -347,30 +347,30 @@ LL |     suggestion: (Span, Applicability),\n    |                        ^^^^^^^^^^^^^\n \n error: invalid applicability\n-  --> $DIR/diagnostic-derive.rs:453:57\n+  --> $DIR/diagnostic-derive.rs:453:44\n    |\n-LL |     #[suggestion(compiletest::suggestion, code = \"...\", applicability = \"batman\")]\n-   |                                                         ^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |     #[suggestion(suggestion, code = \"...\", applicability = \"batman\")]\n+   |                                            ^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: `#[label(foo)]` is not a valid attribute\n-  --> $DIR/diagnostic-derive.rs:516:33\n+  --> $DIR/diagnostic-derive.rs:516:20\n    |\n-LL |     #[label(compiletest::label, foo)]\n-   |                                 ^^^\n+LL |     #[label(label, foo)]\n+   |                    ^^^\n    |\n    = help: a diagnostic slug must be the first argument to the attribute\n \n error: `#[label(foo = ...)]` is not a valid attribute\n-  --> $DIR/diagnostic-derive.rs:524:33\n+  --> $DIR/diagnostic-derive.rs:524:20\n    |\n-LL |     #[label(compiletest::label, foo = \"...\")]\n-   |                                 ^^^^^^^^^^^\n+LL |     #[label(label, foo = \"...\")]\n+   |                    ^^^^^^^^^^^\n \n error: `#[label(foo(...))]` is not a valid attribute\n-  --> $DIR/diagnostic-derive.rs:532:33\n+  --> $DIR/diagnostic-derive.rs:532:20\n    |\n-LL |     #[label(compiletest::label, foo(\"...\"))]\n-   |                                 ^^^^^^^^^^\n+LL |     #[label(label, foo(\"...\"))]\n+   |                    ^^^^^^^^^^\n \n error: `#[primary_span]` is not a valid attribute\n   --> $DIR/diagnostic-derive.rs:545:5\n@@ -383,93 +383,93 @@ LL |     #[primary_span]\n error: `#[error(...)]` is not a valid attribute\n   --> $DIR/diagnostic-derive.rs:565:1\n    |\n-LL | #[error(compiletest::example, code = \"E0123\")]\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | #[error(compiletest_example, code = \"E0123\")]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: diagnostic slug not specified\n   --> $DIR/diagnostic-derive.rs:565:1\n    |\n-LL | / #[error(compiletest::example, code = \"E0123\")]\n+LL | / #[error(compiletest_example, code = \"E0123\")]\n LL | |\n LL | |\n LL | |\n LL | | struct ErrorAttribute {}\n    | |________________________^\n    |\n-   = help: specify the slug as the first argument to the `#[diag(...)]` attribute, such as `#[diag(hir_analysis::example_error)]`\n+   = help: specify the slug as the first argument to the `#[diag(...)]` attribute, such as `#[diag(hir_analysis_example_error)]`\n \n error: `#[warn_(...)]` is not a valid attribute\n   --> $DIR/diagnostic-derive.rs:572:1\n    |\n-LL | #[warn_(compiletest::example, code = \"E0123\")]\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | #[warn_(compiletest_example, code = \"E0123\")]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: diagnostic slug not specified\n   --> $DIR/diagnostic-derive.rs:572:1\n    |\n-LL | / #[warn_(compiletest::example, code = \"E0123\")]\n+LL | / #[warn_(compiletest_example, code = \"E0123\")]\n LL | |\n LL | |\n LL | |\n LL | | struct WarnAttribute {}\n    | |_______________________^\n    |\n-   = help: specify the slug as the first argument to the `#[diag(...)]` attribute, such as `#[diag(hir_analysis::example_error)]`\n+   = help: specify the slug as the first argument to the `#[diag(...)]` attribute, such as `#[diag(hir_analysis_example_error)]`\n \n error: `#[lint(...)]` is not a valid attribute\n   --> $DIR/diagnostic-derive.rs:579:1\n    |\n-LL | #[lint(compiletest::example, code = \"E0123\")]\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | #[lint(compiletest_example, code = \"E0123\")]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: diagnostic slug not specified\n   --> $DIR/diagnostic-derive.rs:579:1\n    |\n-LL | / #[lint(compiletest::example, code = \"E0123\")]\n+LL | / #[lint(compiletest_example, code = \"E0123\")]\n LL | |\n LL | |\n LL | |\n LL | | struct LintAttributeOnSessionDiag {}\n    | |____________________________________^\n    |\n-   = help: specify the slug as the first argument to the `#[diag(...)]` attribute, such as `#[diag(hir_analysis::example_error)]`\n+   = help: specify the slug as the first argument to the `#[diag(...)]` attribute, such as `#[diag(hir_analysis_example_error)]`\n \n error: `#[lint(...)]` is not a valid attribute\n   --> $DIR/diagnostic-derive.rs:586:1\n    |\n-LL | #[lint(compiletest::example, code = \"E0123\")]\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | #[lint(compiletest_example, code = \"E0123\")]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: `#[lint(...)]` is not a valid attribute\n   --> $DIR/diagnostic-derive.rs:586:1\n    |\n-LL | #[lint(compiletest::example, code = \"E0123\")]\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | #[lint(compiletest_example, code = \"E0123\")]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: diagnostic slug not specified\n   --> $DIR/diagnostic-derive.rs:586:1\n    |\n-LL | / #[lint(compiletest::example, code = \"E0123\")]\n+LL | / #[lint(compiletest_example, code = \"E0123\")]\n LL | |\n LL | |\n LL | |\n LL | |\n LL | | struct LintAttributeOnLintDiag {}\n    | |_________________________________^\n    |\n-   = help: specify the slug as the first argument to the attribute, such as `#[diag(compiletest::example)]`\n+   = help: specify the slug as the first argument to the attribute, such as `#[diag(compiletest_example)]`\n \n error: specified multiple times\n-  --> $DIR/diagnostic-derive.rs:596:57\n+  --> $DIR/diagnostic-derive.rs:596:44\n    |\n-LL |     #[suggestion(compiletest::suggestion, code = \"...\", code = \",,,\")]\n-   |                                                         ^^^^^^^^^^^^\n+LL |     #[suggestion(suggestion, code = \"...\", code = \",,,\")]\n+   |                                            ^^^^^^^^^^^^\n    |\n note: previously specified here\n-  --> $DIR/diagnostic-derive.rs:596:43\n+  --> $DIR/diagnostic-derive.rs:596:30\n    |\n-LL |     #[suggestion(compiletest::suggestion, code = \"...\", code = \",,,\")]\n-   |                                           ^^^^^^^^^^^^\n+LL |     #[suggestion(suggestion, code = \"...\", code = \",,,\")]\n+   |                              ^^^^^^^^^^^^\n \n error: wrong types for suggestion\n   --> $DIR/diagnostic-derive.rs:605:24\n@@ -490,14 +490,14 @@ LL |     suggestion: (Span,),\n error: suggestion without `code = \"...\"`\n   --> $DIR/diagnostic-derive.rs:620:5\n    |\n-LL |     #[suggestion(compiletest::suggestion)]\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |     #[suggestion(suggestion)]\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: `#[multipart_suggestion(...)]` is not a valid attribute\n   --> $DIR/diagnostic-derive.rs:627:1\n    |\n-LL | #[multipart_suggestion(compiletest::suggestion)]\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | #[multipart_suggestion(suggestion)]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider creating a `Subdiagnostic` instead\n \n@@ -512,16 +512,16 @@ LL | #[multipart_suggestion()]\n error: `#[multipart_suggestion(...)]` is not a valid attribute\n   --> $DIR/diagnostic-derive.rs:634:5\n    |\n-LL |     #[multipart_suggestion(compiletest::suggestion)]\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |     #[multipart_suggestion(suggestion)]\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider creating a `Subdiagnostic` instead\n \n error: `#[suggestion(...)]` is not a valid attribute\n   --> $DIR/diagnostic-derive.rs:642:1\n    |\n-LL | #[suggestion(compiletest::suggestion, code = \"...\")]\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | #[suggestion(suggestion, code = \"...\")]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: `#[label]` and `#[suggestion]` can only be applied to fields\n \n@@ -576,7 +576,7 @@ LL |     #[subdiagnostic(eager)]\n error: cannot find attribute `nonsense` in this scope\n   --> $DIR/diagnostic-derive.rs:55:3\n    |\n-LL | #[nonsense(compiletest::example, code = \"E0123\")]\n+LL | #[nonsense(compiletest_example, code = \"E0123\")]\n    |   ^^^^^^^^\n \n error: cannot find attribute `nonsense` in this scope\n@@ -588,31 +588,31 @@ LL |     #[nonsense]\n error: cannot find attribute `error` in this scope\n   --> $DIR/diagnostic-derive.rs:565:3\n    |\n-LL | #[error(compiletest::example, code = \"E0123\")]\n+LL | #[error(compiletest_example, code = \"E0123\")]\n    |   ^^^^^\n \n error: cannot find attribute `warn_` in this scope\n   --> $DIR/diagnostic-derive.rs:572:3\n    |\n-LL | #[warn_(compiletest::example, code = \"E0123\")]\n+LL | #[warn_(compiletest_example, code = \"E0123\")]\n    |   ^^^^^ help: a built-in attribute with a similar name exists: `warn`\n \n error: cannot find attribute `lint` in this scope\n   --> $DIR/diagnostic-derive.rs:579:3\n    |\n-LL | #[lint(compiletest::example, code = \"E0123\")]\n+LL | #[lint(compiletest_example, code = \"E0123\")]\n    |   ^^^^ help: a built-in attribute with a similar name exists: `link`\n \n error: cannot find attribute `lint` in this scope\n   --> $DIR/diagnostic-derive.rs:586:3\n    |\n-LL | #[lint(compiletest::example, code = \"E0123\")]\n+LL | #[lint(compiletest_example, code = \"E0123\")]\n    |   ^^^^ help: a built-in attribute with a similar name exists: `link`\n \n error: cannot find attribute `multipart_suggestion` in this scope\n   --> $DIR/diagnostic-derive.rs:627:3\n    |\n-LL | #[multipart_suggestion(compiletest::suggestion)]\n+LL | #[multipart_suggestion(suggestion)]\n    |   ^^^^^^^^^^^^^^^^^^^^\n \n error: cannot find attribute `multipart_suggestion` in this scope\n@@ -624,7 +624,7 @@ LL | #[multipart_suggestion()]\n error: cannot find attribute `multipart_suggestion` in this scope\n   --> $DIR/diagnostic-derive.rs:634:7\n    |\n-LL |     #[multipart_suggestion(compiletest::suggestion)]\n+LL |     #[multipart_suggestion(suggestion)]\n    |       ^^^^^^^^^^^^^^^^^^^^\n \n error[E0425]: cannot find value `nonsense` in module `rustc_errors::fluent`"}, {"sha": "9088ca6ce462bb2c4b2cd039c051a9aed739898e", "filename": "src/test/ui-fulldeps/session-diagnostic/subdiagnostic-derive.rs", "status": "modified", "additions": 53, "deletions": 53, "changes": 106, "blob_url": "https://github.com/rust-lang/rust/blob/6987322445d7388b61d6249204402574ee0308f5/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fsubdiagnostic-derive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6987322445d7388b61d6249204402574ee0308f5/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fsubdiagnostic-derive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fsubdiagnostic-derive.rs?ref=6987322445d7388b61d6249204402574ee0308f5", "patch": "@@ -20,7 +20,7 @@ use rustc_span::Span;\n use rustc_macros::Subdiagnostic;\n \n #[derive(Subdiagnostic)]\n-#[label(parser::add_paren)]\n+#[label(parser_add_paren)]\n struct A {\n     #[primary_span]\n     span: Span,\n@@ -29,13 +29,13 @@ struct A {\n \n #[derive(Subdiagnostic)]\n enum B {\n-    #[label(parser::add_paren)]\n+    #[label(parser_add_paren)]\n     A {\n         #[primary_span]\n         span: Span,\n         var: String,\n     },\n-    #[label(parser::add_paren)]\n+    #[label(parser_add_paren)]\n     B {\n         #[primary_span]\n         span: Span,\n@@ -44,7 +44,7 @@ enum B {\n }\n \n #[derive(Subdiagnostic)]\n-#[label(parser::add_paren)]\n+#[label(parser_add_paren)]\n //~^ ERROR label without `#[primary_span]` field\n struct C {\n     var: String,\n@@ -138,7 +138,7 @@ struct M {\n }\n \n #[derive(Subdiagnostic)]\n-#[label(parser::add_paren, code = \"...\")]\n+#[label(parser_add_paren, code = \"...\")]\n //~^ ERROR `#[label(code = ...)]` is not a valid attribute\n struct N {\n     #[primary_span]\n@@ -147,7 +147,7 @@ struct N {\n }\n \n #[derive(Subdiagnostic)]\n-#[label(parser::add_paren, applicability = \"machine-applicable\")]\n+#[label(parser_add_paren, applicability = \"machine-applicable\")]\n //~^ ERROR `#[label(applicability = ...)]` is not a valid attribute\n struct O {\n     #[primary_span]\n@@ -160,7 +160,7 @@ struct O {\n //~^ ERROR cannot find attribute `foo` in this scope\n //~^^ ERROR unsupported type attribute for subdiagnostic enum\n enum P {\n-    #[label(parser::add_paren)]\n+    #[label(parser_add_paren)]\n     A {\n         #[primary_span]\n         span: Span,\n@@ -230,7 +230,7 @@ enum U {\n \n #[derive(Subdiagnostic)]\n enum V {\n-    #[label(parser::add_paren)]\n+    #[label(parser_add_paren)]\n     A {\n         #[primary_span]\n         span: Span,\n@@ -244,7 +244,7 @@ enum V {\n }\n \n #[derive(Subdiagnostic)]\n-#[label(parser::add_paren)]\n+#[label(parser_add_paren)]\n //~^ ERROR label without `#[primary_span]` field\n struct W {\n     #[primary_span]\n@@ -253,7 +253,7 @@ struct W {\n }\n \n #[derive(Subdiagnostic)]\n-#[label(parser::add_paren)]\n+#[label(parser_add_paren)]\n struct X {\n     #[primary_span]\n     span: Span,\n@@ -263,7 +263,7 @@ struct X {\n }\n \n #[derive(Subdiagnostic)]\n-#[label(parser::add_paren)]\n+#[label(parser_add_paren)]\n struct Y {\n     #[primary_span]\n     span: Span,\n@@ -274,7 +274,7 @@ struct Y {\n }\n \n #[derive(Subdiagnostic)]\n-#[label(parser::add_paren)]\n+#[label(parser_add_paren)]\n struct Z {\n     #[primary_span]\n     span: Span,\n@@ -285,7 +285,7 @@ struct Z {\n }\n \n #[derive(Subdiagnostic)]\n-#[label(parser::add_paren)]\n+#[label(parser_add_paren)]\n struct AA {\n     #[primary_span]\n     span: Span,\n@@ -296,7 +296,7 @@ struct AA {\n }\n \n #[derive(Subdiagnostic)]\n-#[label(parser::add_paren)]\n+#[label(parser_add_paren)]\n struct AB {\n     #[primary_span]\n     span: Span,\n@@ -312,23 +312,23 @@ union AC {\n }\n \n #[derive(Subdiagnostic)]\n-#[label(parser::add_paren)]\n-#[label(parser::add_paren)]\n+#[label(parser_add_paren)]\n+#[label(parser_add_paren)]\n struct AD {\n     #[primary_span]\n     span: Span,\n }\n \n #[derive(Subdiagnostic)]\n-#[label(parser::add_paren, parser::add_paren)]\n-//~^ ERROR `#[label(parser::add_paren)]` is not a valid attribute\n+#[label(parser_add_paren, parser_add_paren)]\n+//~^ ERROR `#[label(parser_add_paren)]` is not a valid attribute\n struct AE {\n     #[primary_span]\n     span: Span,\n }\n \n #[derive(Subdiagnostic)]\n-#[label(parser::add_paren)]\n+#[label(parser_add_paren)]\n struct AF {\n     #[primary_span]\n     //~^ NOTE previously specified here\n@@ -346,7 +346,7 @@ struct AG {\n }\n \n #[derive(Subdiagnostic)]\n-#[suggestion(parser::add_paren, code = \"...\")]\n+#[suggestion(parser_add_paren, code = \"...\")]\n struct AH {\n     #[primary_span]\n     span: Span,\n@@ -357,15 +357,15 @@ struct AH {\n \n #[derive(Subdiagnostic)]\n enum AI {\n-    #[suggestion(parser::add_paren, code = \"...\")]\n+    #[suggestion(parser_add_paren, code = \"...\")]\n     A {\n         #[primary_span]\n         span: Span,\n         #[applicability]\n         applicability: Applicability,\n         var: String,\n     },\n-    #[suggestion(parser::add_paren, code = \"...\")]\n+    #[suggestion(parser_add_paren, code = \"...\")]\n     B {\n         #[primary_span]\n         span: Span,\n@@ -376,7 +376,7 @@ enum AI {\n }\n \n #[derive(Subdiagnostic)]\n-#[suggestion(parser::add_paren, code = \"...\", code = \"...\")]\n+#[suggestion(parser_add_paren, code = \"...\", code = \"...\")]\n //~^ ERROR specified multiple times\n //~^^ NOTE previously specified here\n struct AJ {\n@@ -387,7 +387,7 @@ struct AJ {\n }\n \n #[derive(Subdiagnostic)]\n-#[suggestion(parser::add_paren, code = \"...\")]\n+#[suggestion(parser_add_paren, code = \"...\")]\n struct AK {\n     #[primary_span]\n     span: Span,\n@@ -400,7 +400,7 @@ struct AK {\n }\n \n #[derive(Subdiagnostic)]\n-#[suggestion(parser::add_paren, code = \"...\")]\n+#[suggestion(parser_add_paren, code = \"...\")]\n struct AL {\n     #[primary_span]\n     span: Span,\n@@ -410,14 +410,14 @@ struct AL {\n }\n \n #[derive(Subdiagnostic)]\n-#[suggestion(parser::add_paren, code = \"...\")]\n+#[suggestion(parser_add_paren, code = \"...\")]\n struct AM {\n     #[primary_span]\n     span: Span,\n }\n \n #[derive(Subdiagnostic)]\n-#[suggestion(parser::add_paren)]\n+#[suggestion(parser_add_paren)]\n //~^ ERROR suggestion without `code = \"...\"`\n struct AN {\n     #[primary_span]\n@@ -427,32 +427,32 @@ struct AN {\n }\n \n #[derive(Subdiagnostic)]\n-#[suggestion(parser::add_paren, code =\"...\", applicability = \"foo\")]\n+#[suggestion(parser_add_paren, code =\"...\", applicability = \"foo\")]\n //~^ ERROR invalid applicability\n struct AO {\n     #[primary_span]\n     span: Span,\n }\n \n #[derive(Subdiagnostic)]\n-#[help(parser::add_paren)]\n+#[help(parser_add_paren)]\n struct AP {\n     var: String\n }\n \n #[derive(Subdiagnostic)]\n-#[note(parser::add_paren)]\n+#[note(parser_add_paren)]\n struct AQ;\n \n #[derive(Subdiagnostic)]\n-#[suggestion(parser::add_paren, code = \"...\")]\n+#[suggestion(parser_add_paren, code = \"...\")]\n //~^ ERROR suggestion without `#[primary_span]` field\n struct AR {\n     var: String,\n }\n \n #[derive(Subdiagnostic)]\n-#[suggestion(parser::add_paren, code =\"...\", applicability = \"machine-applicable\")]\n+#[suggestion(parser_add_paren, code =\"...\", applicability = \"machine-applicable\")]\n struct AS {\n     #[primary_span]\n     span: Span,\n@@ -462,7 +462,7 @@ struct AS {\n #[label]\n //~^ ERROR unsupported type attribute for subdiagnostic enum\n enum AT {\n-    #[label(parser::add_paren)]\n+    #[label(parser_add_paren)]\n     A {\n         #[primary_span]\n         span: Span,\n@@ -471,15 +471,15 @@ enum AT {\n }\n \n #[derive(Subdiagnostic)]\n-#[suggestion(parser::add_paren, code =\"{var}\", applicability = \"machine-applicable\")]\n+#[suggestion(parser_add_paren, code =\"{var}\", applicability = \"machine-applicable\")]\n struct AU {\n     #[primary_span]\n     span: Span,\n     var: String,\n }\n \n #[derive(Subdiagnostic)]\n-#[suggestion(parser::add_paren, code =\"{var}\", applicability = \"machine-applicable\")]\n+#[suggestion(parser_add_paren, code =\"{var}\", applicability = \"machine-applicable\")]\n //~^ ERROR `var` doesn't refer to a field on this type\n struct AV {\n     #[primary_span]\n@@ -488,7 +488,7 @@ struct AV {\n \n #[derive(Subdiagnostic)]\n enum AW {\n-    #[suggestion(parser::add_paren, code =\"{var}\", applicability = \"machine-applicable\")]\n+    #[suggestion(parser_add_paren, code =\"{var}\", applicability = \"machine-applicable\")]\n     A {\n         #[primary_span]\n         span: Span,\n@@ -498,7 +498,7 @@ enum AW {\n \n #[derive(Subdiagnostic)]\n enum AX {\n-    #[suggestion(parser::add_paren, code =\"{var}\", applicability = \"machine-applicable\")]\n+    #[suggestion(parser_add_paren, code =\"{var}\", applicability = \"machine-applicable\")]\n //~^ ERROR `var` doesn't refer to a field on this type\n     A {\n         #[primary_span]\n@@ -507,18 +507,18 @@ enum AX {\n }\n \n #[derive(Subdiagnostic)]\n-#[warning(parser::add_paren)]\n+#[warning(parser_add_paren)]\n struct AY {}\n \n #[derive(Subdiagnostic)]\n-#[warning(parser::add_paren)]\n+#[warning(parser_add_paren)]\n struct AZ {\n     #[primary_span]\n     span: Span,\n }\n \n #[derive(Subdiagnostic)]\n-#[suggestion(parser::add_paren, code = \"...\")]\n+#[suggestion(parser_add_paren, code = \"...\")]\n //~^ ERROR suggestion without `#[primary_span]` field\n struct BA {\n     #[suggestion_part]\n@@ -533,31 +533,31 @@ struct BA {\n }\n \n #[derive(Subdiagnostic)]\n-#[multipart_suggestion(parser::add_paren, code = \"...\", applicability = \"machine-applicable\")]\n+#[multipart_suggestion(parser_add_paren, code = \"...\", applicability = \"machine-applicable\")]\n //~^ ERROR multipart suggestion without any `#[suggestion_part(...)]` fields\n //~| ERROR `#[multipart_suggestion(code = ...)]` is not a valid attribute\n struct BBa {\n     var: String,\n }\n \n #[derive(Subdiagnostic)]\n-#[multipart_suggestion(parser::add_paren, applicability = \"machine-applicable\")]\n+#[multipart_suggestion(parser_add_paren, applicability = \"machine-applicable\")]\n struct BBb {\n     #[suggestion_part]\n     //~^ ERROR `#[suggestion_part(...)]` attribute without `code = \"...\"`\n     span1: Span,\n }\n \n #[derive(Subdiagnostic)]\n-#[multipart_suggestion(parser::add_paren, applicability = \"machine-applicable\")]\n+#[multipart_suggestion(parser_add_paren, applicability = \"machine-applicable\")]\n struct BBc {\n     #[suggestion_part()]\n     //~^ ERROR `#[suggestion_part(...)]` attribute without `code = \"...\"`\n     span1: Span,\n }\n \n #[derive(Subdiagnostic)]\n-#[multipart_suggestion(parser::add_paren)]\n+#[multipart_suggestion(parser_add_paren)]\n //~^ ERROR multipart suggestion without any `#[suggestion_part(...)]` fields\n struct BC {\n     #[primary_span]\n@@ -566,7 +566,7 @@ struct BC {\n }\n \n #[derive(Subdiagnostic)]\n-#[multipart_suggestion(parser::add_paren)]\n+#[multipart_suggestion(parser_add_paren)]\n struct BD {\n     #[suggestion_part]\n     //~^ ERROR `#[suggestion_part(...)]` attribute without `code = \"...\"`\n@@ -586,7 +586,7 @@ struct BD {\n }\n \n #[derive(Subdiagnostic)]\n-#[multipart_suggestion(parser::add_paren, applicability = \"machine-applicable\")]\n+#[multipart_suggestion(parser_add_paren, applicability = \"machine-applicable\")]\n struct BE {\n     #[suggestion_part(code = \"...\", code = \",,,\")]\n     //~^ ERROR specified multiple times\n@@ -595,7 +595,7 @@ struct BE {\n }\n \n #[derive(Subdiagnostic)]\n-#[multipart_suggestion(parser::add_paren, applicability = \"machine-applicable\")]\n+#[multipart_suggestion(parser_add_paren, applicability = \"machine-applicable\")]\n struct BF {\n     #[suggestion_part(code = \"(\")]\n     first: Span,\n@@ -604,7 +604,7 @@ struct BF {\n }\n \n #[derive(Subdiagnostic)]\n-#[multipart_suggestion(parser::add_paren)]\n+#[multipart_suggestion(parser_add_paren)]\n struct BG {\n     #[applicability]\n     appl: Applicability,\n@@ -615,7 +615,7 @@ struct BG {\n }\n \n #[derive(Subdiagnostic)]\n-#[multipart_suggestion(parser::add_paren, applicability = \"machine-applicable\")]\n+#[multipart_suggestion(parser_add_paren, applicability = \"machine-applicable\")]\n struct BH {\n     #[applicability]\n     //~^ ERROR `#[applicability]` has no effect\n@@ -627,14 +627,14 @@ struct BH {\n }\n \n #[derive(Subdiagnostic)]\n-#[multipart_suggestion(parser::add_paren, applicability = \"machine-applicable\")]\n+#[multipart_suggestion(parser_add_paren, applicability = \"machine-applicable\")]\n struct BI {\n     #[suggestion_part(code = \"\")]\n     spans: Vec<Span>,\n }\n \n #[derive(Subdiagnostic)]\n-#[label(parser::add_paren)]\n+#[label(parser_add_paren)]\n struct BJ {\n     #[primary_span]\n     span: Span,\n@@ -643,7 +643,7 @@ struct BJ {\n \n /// with a doc comment on the type..\n #[derive(Subdiagnostic)]\n-#[label(parser::add_paren)]\n+#[label(parser_add_paren)]\n struct BK {\n     /// ..and the field\n     #[primary_span]\n@@ -654,7 +654,7 @@ struct BK {\n #[derive(Subdiagnostic)]\n enum BL {\n     /// ..and the variant..\n-    #[label(parser::add_paren)]\n+    #[label(parser_add_paren)]\n     Foo {\n         /// ..and the field\n         #[primary_span]"}, {"sha": "b21f9cc94a98c37565b9796b690c28cbe3f5cb44", "filename": "src/test/ui-fulldeps/session-diagnostic/subdiagnostic-derive.stderr", "status": "modified", "additions": 36, "deletions": 36, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/6987322445d7388b61d6249204402574ee0308f5/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fsubdiagnostic-derive.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6987322445d7388b61d6249204402574ee0308f5/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fsubdiagnostic-derive.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fsubdiagnostic-derive.stderr?ref=6987322445d7388b61d6249204402574ee0308f5", "patch": "@@ -1,7 +1,7 @@\n error: label without `#[primary_span]` field\n   --> $DIR/subdiagnostic-derive.rs:47:1\n    |\n-LL | / #[label(parser::add_paren)]\n+LL | / #[label(parser_add_paren)]\n LL | |\n LL | | struct C {\n LL | |     var: String,\n@@ -81,16 +81,16 @@ LL | #[label()]\n    | ^^^^^^^^^^\n \n error: `#[label(code = ...)]` is not a valid attribute\n-  --> $DIR/subdiagnostic-derive.rs:141:28\n+  --> $DIR/subdiagnostic-derive.rs:141:27\n    |\n-LL | #[label(parser::add_paren, code = \"...\")]\n-   |                            ^^^^^^^^^^^^\n+LL | #[label(parser_add_paren, code = \"...\")]\n+   |                           ^^^^^^^^^^^^\n \n error: `#[label(applicability = ...)]` is not a valid attribute\n-  --> $DIR/subdiagnostic-derive.rs:150:28\n+  --> $DIR/subdiagnostic-derive.rs:150:27\n    |\n-LL | #[label(parser::add_paren, applicability = \"machine-applicable\")]\n-   |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | #[label(parser_add_paren, applicability = \"machine-applicable\")]\n+   |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: unsupported type attribute for subdiagnostic enum\n   --> $DIR/subdiagnostic-derive.rs:159:1\n@@ -143,7 +143,7 @@ LL |     #[primary_span]\n error: label without `#[primary_span]` field\n   --> $DIR/subdiagnostic-derive.rs:247:1\n    |\n-LL | / #[label(parser::add_paren)]\n+LL | / #[label(parser_add_paren)]\n LL | |\n LL | | struct W {\n LL | |     #[primary_span]\n@@ -190,11 +190,11 @@ LL | |     b: u64\n LL | | }\n    | |_^\n \n-error: `#[label(parser::add_paren)]` is not a valid attribute\n-  --> $DIR/subdiagnostic-derive.rs:323:28\n+error: `#[label(parser_add_paren)]` is not a valid attribute\n+  --> $DIR/subdiagnostic-derive.rs:323:27\n    |\n-LL | #[label(parser::add_paren, parser::add_paren)]\n-   |                            ^^^^^^^^^^^^^^^^^\n+LL | #[label(parser_add_paren, parser_add_paren)]\n+   |                           ^^^^^^^^^^^^^^^^\n    |\n    = help: a diagnostic slug must be the first argument to the attribute\n \n@@ -217,16 +217,16 @@ LL | struct AG {\n    |        ^^\n \n error: specified multiple times\n-  --> $DIR/subdiagnostic-derive.rs:379:47\n+  --> $DIR/subdiagnostic-derive.rs:379:46\n    |\n-LL | #[suggestion(parser::add_paren, code = \"...\", code = \"...\")]\n-   |                                               ^^^^^^^^^^^^\n+LL | #[suggestion(parser_add_paren, code = \"...\", code = \"...\")]\n+   |                                              ^^^^^^^^^^^^\n    |\n note: previously specified here\n-  --> $DIR/subdiagnostic-derive.rs:379:33\n+  --> $DIR/subdiagnostic-derive.rs:379:32\n    |\n-LL | #[suggestion(parser::add_paren, code = \"...\", code = \"...\")]\n-   |                                 ^^^^^^^^^^^^\n+LL | #[suggestion(parser_add_paren, code = \"...\", code = \"...\")]\n+   |                                ^^^^^^^^^^^^\n \n error: specified multiple times\n   --> $DIR/subdiagnostic-derive.rs:397:5\n@@ -249,19 +249,19 @@ LL |     #[applicability]\n error: suggestion without `code = \"...\"`\n   --> $DIR/subdiagnostic-derive.rs:420:1\n    |\n-LL | #[suggestion(parser::add_paren)]\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | #[suggestion(parser_add_paren)]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: invalid applicability\n-  --> $DIR/subdiagnostic-derive.rs:430:46\n+  --> $DIR/subdiagnostic-derive.rs:430:45\n    |\n-LL | #[suggestion(parser::add_paren, code =\"...\", applicability = \"foo\")]\n-   |                                              ^^^^^^^^^^^^^^^^^^^^^\n+LL | #[suggestion(parser_add_paren, code =\"...\", applicability = \"foo\")]\n+   |                                             ^^^^^^^^^^^^^^^^^^^^^\n \n error: suggestion without `#[primary_span]` field\n   --> $DIR/subdiagnostic-derive.rs:448:1\n    |\n-LL | / #[suggestion(parser::add_paren, code = \"...\")]\n+LL | / #[suggestion(parser_add_paren, code = \"...\")]\n LL | |\n LL | | struct AR {\n LL | |     var: String,\n@@ -275,16 +275,16 @@ LL | #[label]\n    | ^^^^^^^^\n \n error: `var` doesn't refer to a field on this type\n-  --> $DIR/subdiagnostic-derive.rs:482:39\n+  --> $DIR/subdiagnostic-derive.rs:482:38\n    |\n-LL | #[suggestion(parser::add_paren, code =\"{var}\", applicability = \"machine-applicable\")]\n-   |                                       ^^^^^^^\n+LL | #[suggestion(parser_add_paren, code =\"{var}\", applicability = \"machine-applicable\")]\n+   |                                      ^^^^^^^\n \n error: `var` doesn't refer to a field on this type\n-  --> $DIR/subdiagnostic-derive.rs:501:43\n+  --> $DIR/subdiagnostic-derive.rs:501:42\n    |\n-LL |     #[suggestion(parser::add_paren, code =\"{var}\", applicability = \"machine-applicable\")]\n-   |                                           ^^^^^^^\n+LL |     #[suggestion(parser_add_paren, code =\"{var}\", applicability = \"machine-applicable\")]\n+   |                                          ^^^^^^^\n \n error: `#[suggestion_part]` is not a valid attribute\n   --> $DIR/subdiagnostic-derive.rs:524:5\n@@ -305,7 +305,7 @@ LL |     #[suggestion_part(code = \"...\")]\n error: suggestion without `#[primary_span]` field\n   --> $DIR/subdiagnostic-derive.rs:521:1\n    |\n-LL | / #[suggestion(parser::add_paren, code = \"...\")]\n+LL | / #[suggestion(parser_add_paren, code = \"...\")]\n LL | |\n LL | | struct BA {\n LL | |     #[suggestion_part]\n@@ -315,17 +315,17 @@ LL | | }\n    | |_^\n \n error: `#[multipart_suggestion(code = ...)]` is not a valid attribute\n-  --> $DIR/subdiagnostic-derive.rs:536:43\n+  --> $DIR/subdiagnostic-derive.rs:536:42\n    |\n-LL | #[multipart_suggestion(parser::add_paren, code = \"...\", applicability = \"machine-applicable\")]\n-   |                                           ^^^^^^^^^^^^\n+LL | #[multipart_suggestion(parser_add_paren, code = \"...\", applicability = \"machine-applicable\")]\n+   |                                          ^^^^^^^^^^^^\n    |\n    = help: only `applicability` is a valid nested attributes\n \n error: multipart suggestion without any `#[suggestion_part(...)]` fields\n   --> $DIR/subdiagnostic-derive.rs:536:1\n    |\n-LL | / #[multipart_suggestion(parser::add_paren, code = \"...\", applicability = \"machine-applicable\")]\n+LL | / #[multipart_suggestion(parser_add_paren, code = \"...\", applicability = \"machine-applicable\")]\n LL | |\n LL | |\n LL | | struct BBa {\n@@ -356,7 +356,7 @@ LL |     #[primary_span]\n error: multipart suggestion without any `#[suggestion_part(...)]` fields\n   --> $DIR/subdiagnostic-derive.rs:560:1\n    |\n-LL | / #[multipart_suggestion(parser::add_paren)]\n+LL | / #[multipart_suggestion(parser_add_paren)]\n LL | |\n LL | | struct BC {\n LL | |     #[primary_span]"}]}