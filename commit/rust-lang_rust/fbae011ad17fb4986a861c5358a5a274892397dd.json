{"sha": "fbae011ad17fb4986a861c5358a5a274892397dd", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZiYWUwMTFhZDE3ZmI0OTg2YTg2MWM1MzU4YTVhMjc0ODkyMzk3ZGQ=", "commit": {"author": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-06-11T23:06:01Z"}, "committer": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-06-11T23:06:01Z"}, "message": "fix the docstring for copy_nonoverlapping_memory", "tree": {"sha": "e6807a616c59efc2b9f2ceb3031d390fbebab6aa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e6807a616c59efc2b9f2ceb3031d390fbebab6aa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fbae011ad17fb4986a861c5358a5a274892397dd", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fbae011ad17fb4986a861c5358a5a274892397dd", "html_url": "https://github.com/rust-lang/rust/commit/fbae011ad17fb4986a861c5358a5a274892397dd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fbae011ad17fb4986a861c5358a5a274892397dd/comments", "author": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "committer": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "107e371bf063bc7e67698814ce87fe6cbf920d9d", "url": "https://api.github.com/repos/rust-lang/rust/commits/107e371bf063bc7e67698814ce87fe6cbf920d9d", "html_url": "https://github.com/rust-lang/rust/commit/107e371bf063bc7e67698814ce87fe6cbf920d9d"}], "stats": {"total": 34, "additions": 25, "deletions": 9}, "files": [{"sha": "cd5a3182f6b87ad494d6bd7633d27141401c5d31", "filename": "src/libstd/ptr.rs", "status": "modified", "additions": 25, "deletions": 9, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/fbae011ad17fb4986a861c5358a5a274892397dd/src%2Flibstd%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fbae011ad17fb4986a861c5358a5a274892397dd/src%2Flibstd%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fptr.rs?ref=fbae011ad17fb4986a861c5358a5a274892397dd", "patch": "@@ -69,7 +69,7 @@ pub fn is_null<T>(ptr: *const T) -> bool { ptr == null() }\n pub fn is_not_null<T>(ptr: *const T) -> bool { !is_null(ptr) }\n \n /**\n- * Copies data from one location to another\n+ * Copies data from one location to another.\n  *\n  * Copies `count` elements (not bytes) from `src` to `dst`. The source\n  * and destination may overlap.\n@@ -83,7 +83,7 @@ pub unsafe fn copy_memory<T>(dst: *mut T, src: *const T, count: uint) {\n }\n \n /**\n- * Copies data from one location to another\n+ * Copies data from one location to another.\n  *\n  * Copies `count` elements (not bytes) from `src` to `dst`. The source\n  * and destination may overlap.\n@@ -95,6 +95,12 @@ pub unsafe fn copy_memory<T>(dst: *mut T, src: *const T, count: uint) {\n     memmove32(dst, src as *T, count as u32);\n }\n \n+/**\n+ * Copies data from one location to another.\n+ *\n+ * Copies `count` elements (not bytes) from `src` to `dst`. The source\n+ * and destination may overlap.\n+ */\n #[inline(always)]\n #[cfg(target_word_size = \"64\", stage0)]\n pub unsafe fn copy_memory<T>(dst: *mut T, src: *const T, count: uint) {\n@@ -104,7 +110,7 @@ pub unsafe fn copy_memory<T>(dst: *mut T, src: *const T, count: uint) {\n }\n \n /**\n- * Copies data from one location to another\n+ * Copies data from one location to another.\n  *\n  * Copies `count` elements (not bytes) from `src` to `dst`. The source\n  * and destination may overlap.\n@@ -116,6 +122,12 @@ pub unsafe fn copy_memory<T>(dst: *mut T, src: *const T, count: uint) {\n     memmove64(dst, src as *T, count as u64);\n }\n \n+/**\n+ * Copies data from one location to another.\n+ *\n+ * Copies `count` elements (not bytes) from `src` to `dst`. The source\n+ * and destination may *not* overlap.\n+ */\n #[inline(always)]\n #[cfg(target_word_size = \"32\", stage0)]\n pub unsafe fn copy_nonoverlapping_memory<T>(dst: *mut T, src: *const T, count: uint) {\n@@ -125,11 +137,10 @@ pub unsafe fn copy_nonoverlapping_memory<T>(dst: *mut T, src: *const T, count: u\n }\n \n /**\n- * Copies data from one location to another. This uses memcpy instead of memmove\n- * to take advantage of the knowledge that the memory does not overlap.\n+ * Copies data from one location to another.\n  *\n  * Copies `count` elements (not bytes) from `src` to `dst`. The source\n- * and destination may overlap.\n+ * and destination may *not* overlap.\n  */\n #[inline(always)]\n #[cfg(target_word_size = \"32\", not(stage0))]\n@@ -138,6 +149,12 @@ pub unsafe fn copy_nonoverlapping_memory<T>(dst: *mut T, src: *const T, count: u\n     memcpy32(dst, src as *T, count as u32);\n }\n \n+/**\n+ * Copies data from one location to another.\n+ *\n+ * Copies `count` elements (not bytes) from `src` to `dst`. The source\n+ * and destination may *not* overlap.\n+ */\n #[inline(always)]\n #[cfg(target_word_size = \"64\", stage0)]\n pub unsafe fn copy_nonoverlapping_memory<T>(dst: *mut T, src: *const T, count: uint) {\n@@ -147,11 +164,10 @@ pub unsafe fn copy_nonoverlapping_memory<T>(dst: *mut T, src: *const T, count: u\n }\n \n /**\n- * Copies data from one location to another. This uses memcpy instead of memmove\n- * to take advantage of the knowledge that the memory does not overlap.\n+ * Copies data from one location to another.\n  *\n  * Copies `count` elements (not bytes) from `src` to `dst`. The source\n- * and destination may overlap.\n+ * and destination may *not* overlap.\n  */\n #[inline(always)]\n #[cfg(target_word_size = \"64\", not(stage0))]"}]}