{"sha": "8df38aa7971a82061f5c22a64712f43ca2f2f9ed", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhkZjM4YWE3OTcxYTgyMDYxZjVjMjJhNjQ3MTJmNDNjYTJmMmY5ZWQ=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-07-17T13:54:48Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-07-17T14:55:16Z"}, "message": "internal: make sure that proc macro machinery doesn't depend on cwd", "tree": {"sha": "791a009c37783ff51684b62bfb233a2d76f493db", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/791a009c37783ff51684b62bfb233a2d76f493db"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8df38aa7971a82061f5c22a64712f43ca2f2f9ed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8df38aa7971a82061f5c22a64712f43ca2f2f9ed", "html_url": "https://github.com/rust-lang/rust/commit/8df38aa7971a82061f5c22a64712f43ca2f2f9ed", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8df38aa7971a82061f5c22a64712f43ca2f2f9ed/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9318c643f12ac18021b2cc632d69c6b773a0b7da", "url": "https://api.github.com/repos/rust-lang/rust/commits/9318c643f12ac18021b2cc632d69c6b773a0b7da", "html_url": "https://github.com/rust-lang/rust/commit/9318c643f12ac18021b2cc632d69c6b773a0b7da"}], "stats": {"total": 74, "additions": 52, "deletions": 22}, "files": [{"sha": "0e2665c7b1c4d09630f9d5bdea6126fb1b4a9085", "filename": "Cargo.lock", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8df38aa7971a82061f5c22a64712f43ca2f2f9ed/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/8df38aa7971a82061f5c22a64712f43ca2f2f9ed/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=8df38aa7971a82061f5c22a64712f43ca2f2f9ed", "patch": "@@ -1042,6 +1042,9 @@ dependencies = [\n [[package]]\n name = \"paths\"\n version = \"0.0.0\"\n+dependencies = [\n+ \"serde\",\n+]\n \n [[package]]\n name = \"percent-encoding\"\n@@ -1109,6 +1112,7 @@ dependencies = [\n  \"log\",\n  \"memmap2\",\n  \"object\",\n+ \"paths\",\n  \"profile\",\n  \"serde\",\n  \"serde_json\","}, {"sha": "cf44b7a0d2a4d2ef48d21c02c7aff8001fcece7e", "filename": "crates/paths/Cargo.toml", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8df38aa7971a82061f5c22a64712f43ca2f2f9ed/crates%2Fpaths%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/8df38aa7971a82061f5c22a64712f43ca2f2f9ed/crates%2Fpaths%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fpaths%2FCargo.toml?ref=8df38aa7971a82061f5c22a64712f43ca2f2f9ed", "patch": "@@ -7,3 +7,6 @@ edition = \"2018\"\n \n [lib]\n doctest = false\n+\n+[dependencies]\n+serde = \"1\""}, {"sha": "afdfed7fd5411f2a7e459dec122982fbb322468f", "filename": "crates/paths/src/lib.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/8df38aa7971a82061f5c22a64712f43ca2f2f9ed/crates%2Fpaths%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8df38aa7971a82061f5c22a64712f43ca2f2f9ed/crates%2Fpaths%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fpaths%2Fsrc%2Flib.rs?ref=8df38aa7971a82061f5c22a64712f43ca2f2f9ed", "patch": "@@ -66,6 +66,27 @@ impl PartialEq<AbsPath> for AbsPathBuf {\n     }\n }\n \n+impl serde::Serialize for AbsPathBuf {\n+    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>\n+    where\n+        S: serde::Serializer,\n+    {\n+        self.0.serialize(serializer)\n+    }\n+}\n+\n+impl<'de> serde::Deserialize<'de> for AbsPathBuf {\n+    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>\n+    where\n+        D: serde::Deserializer<'de>,\n+    {\n+        let path = PathBuf::deserialize(deserializer)?;\n+        AbsPathBuf::try_from(path).map_err(|path| {\n+            serde::de::Error::custom(format!(\"expected absolute path, got {}\", path.display()))\n+        })\n+    }\n+}\n+\n impl AbsPathBuf {\n     /// Wrap the given absolute path in `AbsPathBuf`\n     ///"}, {"sha": "143be97df05bc3004df33e8dd38be018088f7ff5", "filename": "crates/proc_macro_api/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8df38aa7971a82061f5c22a64712f43ca2f2f9ed/crates%2Fproc_macro_api%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/8df38aa7971a82061f5c22a64712f43ca2f2f9ed/crates%2Fproc_macro_api%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproc_macro_api%2FCargo.toml?ref=8df38aa7971a82061f5c22a64712f43ca2f2f9ed", "patch": "@@ -18,6 +18,7 @@ memmap2 = \"0.3.0\"\n object = { version = \"0.25.3\", default-features = false, features = [\"std\", \"read_core\", \"elf\", \"macho\", \"pe\"] }\n snap = \"1.0\"\n \n+paths = { path = \"../paths\", version = \"0.0.0\" }\n tt = { path = \"../tt\", version = \"0.0.0\" }\n base_db = { path = \"../base_db\", version = \"0.0.0\" }\n stdx = { path = \"../stdx\", version = \"0.0.0\" }"}, {"sha": "2bcaf74678b6c795b7fd136f5aa56cd013d0e3d3", "filename": "crates/proc_macro_api/src/lib.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/8df38aa7971a82061f5c22a64712f43ca2f2f9ed/crates%2Fproc_macro_api%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8df38aa7971a82061f5c22a64712f43ca2f2f9ed/crates%2Fproc_macro_api%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproc_macro_api%2Fsrc%2Flib.rs?ref=8df38aa7971a82061f5c22a64712f43ca2f2f9ed", "patch": "@@ -11,10 +11,10 @@ mod rpc;\n mod version;\n \n use base_db::{Env, ProcMacro};\n+use paths::{AbsPath, AbsPathBuf};\n use std::{\n     ffi::OsStr,\n     io,\n-    path::{Path, PathBuf},\n     sync::{Arc, Mutex},\n };\n \n@@ -28,7 +28,7 @@ pub use version::{read_dylib_info, RustCInfo};\n #[derive(Debug, Clone)]\n struct ProcMacroProcessExpander {\n     process: Arc<Mutex<ProcMacroProcessSrv>>,\n-    dylib_path: PathBuf,\n+    dylib_path: AbsPathBuf,\n     name: SmolStr,\n }\n \n@@ -79,26 +79,25 @@ pub struct ProcMacroClient {\n impl ProcMacroClient {\n     /// Spawns an external process as the proc macro server and returns a client connected to it.\n     pub fn extern_process(\n-        process_path: PathBuf,\n+        process_path: AbsPathBuf,\n         args: impl IntoIterator<Item = impl AsRef<OsStr>>,\n     ) -> io::Result<ProcMacroClient> {\n         let process = ProcMacroProcessSrv::run(process_path, args)?;\n         Ok(ProcMacroClient { process: Arc::new(Mutex::new(process)) })\n     }\n \n-    // TODO: use paths::AbsPath here\n-    pub fn by_dylib_path(&self, dylib_path: &Path) -> Vec<ProcMacro> {\n+    pub fn by_dylib_path(&self, dylib_path: &AbsPath) -> Vec<ProcMacro> {\n         let _p = profile::span(\"ProcMacroClient::by_dylib_path\");\n         match version::read_dylib_info(dylib_path) {\n             Ok(info) => {\n                 if info.version.0 < 1 || info.version.1 < 47 {\n-                    eprintln!(\"proc-macro {} built by {:#?} is not supported by Rust Analyzer, please update your rust version.\", dylib_path.to_string_lossy(), info);\n+                    eprintln!(\"proc-macro {} built by {:#?} is not supported by Rust Analyzer, please update your rust version.\", dylib_path.display(), info);\n                 }\n             }\n             Err(err) => {\n                 eprintln!(\n                     \"proc-macro {} failed to find the given version. Reason: {}\",\n-                    dylib_path.to_string_lossy(),\n+                    dylib_path.display(),\n                     err\n                 );\n             }\n@@ -129,7 +128,7 @@ impl ProcMacroClient {\n                 let expander = Arc::new(ProcMacroProcessExpander {\n                     process: self.process.clone(),\n                     name: name.clone(),\n-                    dylib_path: dylib_path.into(),\n+                    dylib_path: dylib_path.to_path_buf(),\n                 });\n \n                 ProcMacro { name, kind, expander }"}, {"sha": "466ac962f971f4b6b32c73e723cfc53519d6e4f2", "filename": "crates/proc_macro_api/src/process.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/8df38aa7971a82061f5c22a64712f43ca2f2f9ed/crates%2Fproc_macro_api%2Fsrc%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8df38aa7971a82061f5c22a64712f43ca2f2f9ed/crates%2Fproc_macro_api%2Fsrc%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproc_macro_api%2Fsrc%2Fprocess.rs?ref=8df38aa7971a82061f5c22a64712f43ca2f2f9ed", "patch": "@@ -4,10 +4,10 @@ use std::{\n     convert::{TryFrom, TryInto},\n     ffi::{OsStr, OsString},\n     io::{self, BufRead, BufReader, Write},\n-    path::{Path, PathBuf},\n     process::{Child, ChildStdin, ChildStdout, Command, Stdio},\n };\n \n+use paths::{AbsPath, AbsPathBuf};\n use stdx::JodChild;\n \n use crate::{\n@@ -24,7 +24,7 @@ pub(crate) struct ProcMacroProcessSrv {\n \n impl ProcMacroProcessSrv {\n     pub(crate) fn run(\n-        process_path: PathBuf,\n+        process_path: AbsPathBuf,\n         args: impl IntoIterator<Item = impl AsRef<OsStr>>,\n     ) -> io::Result<ProcMacroProcessSrv> {\n         let mut process = Process::run(process_path, args)?;\n@@ -37,7 +37,7 @@ impl ProcMacroProcessSrv {\n \n     pub(crate) fn find_proc_macros(\n         &mut self,\n-        dylib_path: &Path,\n+        dylib_path: &AbsPath,\n     ) -> Result<Vec<(String, ProcMacroKind)>, tt::ExpansionError> {\n         let task = ListMacrosTask { lib: dylib_path.to_path_buf() };\n \n@@ -84,7 +84,7 @@ struct Process {\n \n impl Process {\n     fn run(\n-        path: PathBuf,\n+        path: AbsPathBuf,\n         args: impl IntoIterator<Item = impl AsRef<OsStr>>,\n     ) -> io::Result<Process> {\n         let args: Vec<OsString> = args.into_iter().map(|s| s.as_ref().into()).collect();\n@@ -101,8 +101,11 @@ impl Process {\n     }\n }\n \n-fn mk_child(path: &Path, args: impl IntoIterator<Item = impl AsRef<OsStr>>) -> io::Result<Child> {\n-    Command::new(&path)\n+fn mk_child(\n+    path: &AbsPath,\n+    args: impl IntoIterator<Item = impl AsRef<OsStr>>,\n+) -> io::Result<Child> {\n+    Command::new(path.as_os_str())\n         .args(args)\n         .stdin(Stdio::piped())\n         .stdout(Stdio::piped())"}, {"sha": "4bb77eb7f13c1aec179c022d65b80106e066ae08", "filename": "crates/proc_macro_api/src/rpc.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8df38aa7971a82061f5c22a64712f43ca2f2f9ed/crates%2Fproc_macro_api%2Fsrc%2Frpc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8df38aa7971a82061f5c22a64712f43ca2f2f9ed/crates%2Fproc_macro_api%2Fsrc%2Frpc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproc_macro_api%2Fsrc%2Frpc.rs?ref=8df38aa7971a82061f5c22a64712f43ca2f2f9ed", "patch": "@@ -6,8 +6,7 @@\n //! to be much easier, we deliberately duplicate `tt` structs with `#[serde(with = \"XXDef\")]`\n //! for separation of code responsibility.\n \n-use std::path::PathBuf;\n-\n+use paths::AbsPathBuf;\n use serde::{Deserialize, Serialize};\n use tt::{\n     Delimiter, DelimiterKind, Ident, Leaf, Literal, Punct, SmolStr, Spacing, Subtree, TokenId,\n@@ -16,7 +15,7 @@ use tt::{\n \n #[derive(Clone, Eq, PartialEq, Debug, Serialize, Deserialize)]\n pub struct ListMacrosTask {\n-    pub lib: PathBuf,\n+    pub lib: AbsPathBuf,\n }\n \n #[derive(Copy, Clone, Eq, PartialEq, Debug, Serialize, Deserialize)]\n@@ -50,7 +49,7 @@ pub struct ExpansionTask {\n     #[serde(with = \"opt_subtree_def\")]\n     pub attributes: Option<Subtree>,\n \n-    pub lib: PathBuf,\n+    pub lib: AbsPathBuf,\n \n     /// Environment variables to set during macro expansion.\n     pub env: Vec<(String, String)>,"}, {"sha": "fa2b60fcb9c445977671f79bb5530daca0f25915", "filename": "crates/proc_macro_api/src/version.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8df38aa7971a82061f5c22a64712f43ca2f2f9ed/crates%2Fproc_macro_api%2Fsrc%2Fversion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8df38aa7971a82061f5c22a64712f43ca2f2f9ed/crates%2Fproc_macro_api%2Fsrc%2Fversion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproc_macro_api%2Fsrc%2Fversion.rs?ref=8df38aa7971a82061f5c22a64712f43ca2f2f9ed", "patch": "@@ -3,11 +3,11 @@\n use std::{\n     fs::File,\n     io::{self, Read},\n-    path::Path,\n };\n \n use memmap2::Mmap;\n use object::read::{File as BinaryFile, Object, ObjectSection};\n+use paths::AbsPath;\n use snap::read::FrameDecoder as SnapDecoder;\n \n #[derive(Debug)]\n@@ -19,7 +19,7 @@ pub struct RustCInfo {\n }\n \n /// Read rustc dylib information\n-pub fn read_dylib_info(dylib_path: &Path) -> io::Result<RustCInfo> {\n+pub fn read_dylib_info(dylib_path: &AbsPath) -> io::Result<RustCInfo> {\n     macro_rules! err {\n         ($e:literal) => {\n             io::Error::new(io::ErrorKind::InvalidData, $e)\n@@ -96,7 +96,7 @@ fn read_section<'a>(dylib_binary: &'a [u8], section_name: &str) -> io::Result<&'\n /// * [some more bytes that we don really care but still there] :-)\n /// Check this issue for more about the bytes layout:\n /// <https://github.com/rust-analyzer/rust-analyzer/issues/6174>\n-fn read_version(dylib_path: &Path) -> io::Result<String> {\n+fn read_version(dylib_path: &AbsPath) -> io::Result<String> {\n     let dylib_file = File::open(dylib_path)?;\n     let dylib_mmaped = unsafe { Mmap::map(&dylib_file) }?;\n "}, {"sha": "c1750d43a5f1dc14cc1a2d9afa50036bb14e1c04", "filename": "crates/project_model/src/workspace.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8df38aa7971a82061f5c22a64712f43ca2f2f9ed/crates%2Fproject_model%2Fsrc%2Fworkspace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8df38aa7971a82061f5c22a64712f43ca2f2f9ed/crates%2Fproject_model%2Fsrc%2Fworkspace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject_model%2Fsrc%2Fworkspace.rs?ref=8df38aa7971a82061f5c22a64712f43ca2f2f9ed", "patch": "@@ -312,7 +312,7 @@ impl ProjectWorkspace {\n     ) -> CrateGraph {\n         let _p = profile::span(\"ProjectWorkspace::to_crate_graph\");\n         let proc_macro_loader = |path: &AbsPath| match proc_macro_client {\n-            Some(client) => client.by_dylib_path(path.as_ref()), // TODO\n+            Some(client) => client.by_dylib_path(path),\n             None => Vec::new(),\n         };\n "}]}