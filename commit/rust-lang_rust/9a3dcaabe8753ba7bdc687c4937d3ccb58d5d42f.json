{"sha": "9a3dcaabe8753ba7bdc687c4937d3ccb58d5d42f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlhM2RjYWFiZTg3NTNiYTdiZGM2ODdjNDkzN2QzY2NiNThkNWQ0MmY=", "commit": {"author": {"name": "llogiq", "email": "bogusandre@gmail.com", "date": "2015-06-15T11:27:24Z"}, "committer": {"name": "llogiq", "email": "bogusandre@gmail.com", "date": "2015-06-15T11:27:24Z"}, "message": "fixed renaming of rustc::middle::ty enums", "tree": {"sha": "f10fdf58472d579480e7707af4ddd8f881e32aa7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f10fdf58472d579480e7707af4ddd8f881e32aa7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9a3dcaabe8753ba7bdc687c4937d3ccb58d5d42f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9a3dcaabe8753ba7bdc687c4937d3ccb58d5d42f", "html_url": "https://github.com/rust-lang/rust/commit/9a3dcaabe8753ba7bdc687c4937d3ccb58d5d42f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9a3dcaabe8753ba7bdc687c4937d3ccb58d5d42f/comments", "author": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "committer": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0e5b62c8d83046595f1be9231af3564644c4cfc1", "url": "https://api.github.com/repos/rust-lang/rust/commits/0e5b62c8d83046595f1be9231af3564644c4cfc1", "html_url": "https://github.com/rust-lang/rust/commit/0e5b62c8d83046595f1be9231af3564644c4cfc1"}], "stats": {"total": 34, "additions": 19, "deletions": 15}, "files": [{"sha": "0974e8f21e2a788bbcd26c2238eace862896c9d5", "filename": "src/len_zero.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9a3dcaabe8753ba7bdc687c4937d3ccb58d5d42f/src%2Flen_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a3dcaabe8753ba7bdc687c4937d3ccb58d5d42f/src%2Flen_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flen_zero.rs?ref=9a3dcaabe8753ba7bdc687c4937d3ccb58d5d42f", "patch": "@@ -5,7 +5,7 @@ use std::cell::RefCell;\n use syntax::ptr::P;\n use rustc::lint::{Context, LintPass, LintArray, Lint};\n use rustc::util::nodemap::DefIdMap;\n-use rustc::middle::ty::{self, node_id_to_type, sty, ty_ptr, ty_rptr, expr_ty,\n+use rustc::middle::ty::{self, node_id_to_type, TypeVariants, expr_ty,\n \tmt, ty_to_def_id, impl_or_trait_item, MethodTraitItemId, ImplOrTraitItemId};\n use rustc::middle::def::{DefTy, DefStruct, DefTrait};\n use syntax::codemap::{Span, Spanned};\n@@ -138,14 +138,14 @@ fn has_is_empty(cx: &Context, expr: &Expr) -> bool {\n \t\n \tlet ty = &walk_ty(&expr_ty(cx.tcx, expr));\n \tmatch ty.sty {\n-\t\tty::ty_trait(_) => cx.tcx.trait_item_def_ids.borrow().get(\n+\t\tty::TyTrait(_) => cx.tcx.trait_item_def_ids.borrow().get(\n \t\t\t&ty::ty_to_def_id(ty).expect(\"trait impl not found\")).map_or(false, \n \t\t\t|ids| ids.iter().any(|i| is_is_empty(cx, i))),\n-\t\tty::ty_projection(_) => ty::ty_to_def_id(ty).map_or(false, \n+\t\tty::TyProjection(_) => ty::ty_to_def_id(ty).map_or(false, \n \t\t\t|id| has_is_empty_impl(cx, &id)),\n-\t\tty::ty_enum(ref id, _) | ty::ty_struct(ref id, _) => \n+\t\tty::TyEnum(ref id, _) | ty::TyStruct(ref id, _) => \n \t\t\thas_is_empty_impl(cx, id),\n-\t\tty::ty_vec(..) => true,\n+\t\tty::TyArray(..) => true,\n \t\t_ => false,\n \t}\n }"}, {"sha": "f2492cf187dd0c4b938d12323d17a22542942374", "filename": "src/misc.rs", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/9a3dcaabe8753ba7bdc687c4937d3ccb58d5d42f/src%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a3dcaabe8753ba7bdc687c4937d3ccb58d5d42f/src%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmisc.rs?ref=9a3dcaabe8753ba7bdc687c4937d3ccb58d5d42f", "patch": "@@ -4,15 +4,15 @@ use syntax::ast::*;\n use syntax::ast_util::{is_comparison_binop, binop_to_string};\n use syntax::visit::{FnKind};\n use rustc::lint::{Context, LintPass, LintArray, Lint, Level};\n-use rustc::middle::ty::{self, expr_ty, ty_str, ty_ptr, ty_rptr, ty_float};\n+use rustc::middle::ty::{self, expr_ty};\n use syntax::codemap::{Span, Spanned};\n \n use types::span_note_and_lint;\n use utils::match_path;\n \n pub fn walk_ty<'t>(ty: ty::Ty<'t>) -> ty::Ty<'t> {\n \tmatch ty.sty {\n-\t\tty_ptr(ref tm) | ty_rptr(_, ref tm) => walk_ty(tm.ty),\n+\t\tty::TyRef(_, ref tm) | ty::TyRawPtr(ref tm) => walk_ty(tm.ty),\n \t\t_ => ty\n \t}\n }\n@@ -79,10 +79,10 @@ impl LintPass for StrToStringPass {\n         }\n \n         fn is_str(cx: &Context, expr: &ast::Expr) -> bool {\n-            match walk_ty(expr_ty(cx.tcx, expr)).sty {\n-                ty_str => true,\n-                _ => false\n-            }\n+            match walk_ty(expr_ty(cx.tcx, expr)).sty { \n+\t\t\t\tty::TyStr => true,\n+\t\t\t\t_ => false\n+\t\t\t}\n         }\n     }\n }\n@@ -167,7 +167,11 @@ impl LintPass for FloatCmp {\n }\n \n fn is_float(cx: &Context, expr: &Expr) -> bool {\n-\tif let ty_float(_) = walk_ty(expr_ty(cx.tcx, expr)).sty { true } else { false }\n+\tif let ty::TyFloat(_) = walk_ty(expr_ty(cx.tcx, expr)).sty { \n+\t\ttrue\n+\t} else { \n+\t\tfalse \n+\t}\n }\n \n declare_lint!(pub PRECEDENCE, Warn,\n@@ -263,6 +267,6 @@ fn check_to_owned(cx: &Context, expr: &Expr, other_span: Span) {\n }\n \n fn is_str_arg(cx: &Context, args: &[P<Expr>]) -> bool {\n-\targs.len() == 1 && if let ty_str = \n+\targs.len() == 1 && if let ty::TyStr = \n \t\twalk_ty(expr_ty(cx.tcx, &*args[0])).sty { true } else { false }\n }"}, {"sha": "fc5de44542fbef33af0e42a78d7506460d9fb0c1", "filename": "src/mut_mut.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9a3dcaabe8753ba7bdc687c4937d3ccb58d5d42f/src%2Fmut_mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a3dcaabe8753ba7bdc687c4937d3ccb58d5d42f/src%2Fmut_mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmut_mut.rs?ref=9a3dcaabe8753ba7bdc687c4937d3ccb58d5d42f", "patch": "@@ -1,7 +1,7 @@\n use syntax::ptr::P;\n use syntax::ast::*;\n use rustc::lint::{Context, LintPass, LintArray, Lint};\n-use rustc::middle::ty::{expr_ty, sty, ty_ptr, ty_rptr, mt};\n+use rustc::middle::ty::{expr_ty, TypeVariants, mt, TyRef};\n use syntax::codemap::{BytePos, ExpnInfo, MacroFormat, Span};\n use utils::in_macro;\n \n@@ -42,7 +42,7 @@ fn check_expr_expd(cx: &Context, expr: &Expr, info: Option<&ExpnInfo>) {\n \t\t\tcx.span_lint(MUT_MUT, expr.span, \n \t\t\t\t\"Generally you want to avoid &mut &mut _ if possible.\")\n \t\t}).unwrap_or_else(|| {\n-\t\t\tif let ty_rptr(_, mt{ty: _, mutbl: MutMutable}) = \n+\t\t\tif let TyRef(_, mt{ty: _, mutbl: MutMutable}) = \n \t\t\t\t\texpr_ty(cx.tcx, e).sty {\n \t\t\t\tcx.span_lint(MUT_MUT, expr.span,\n \t\t\t\t\t\"This expression mutably borrows a mutable reference. \\"}]}