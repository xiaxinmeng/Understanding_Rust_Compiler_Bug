{"sha": "4a494ed8df3e3fadf59a25f70265c067b36f94b6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRhNDk0ZWQ4ZGYzZTNmYWRmNTlhMjVmNzAyNjVjMDY3YjM2Zjk0YjY=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo.net", "date": "2016-12-09T22:13:13Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo.net", "date": "2016-12-09T22:47:56Z"}, "message": "incr.comp.: Take symbol visibility into account for CGU hashes.", "tree": {"sha": "e553480a18004bf45567775fee1c8562d40b4a77", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e553480a18004bf45567775fee1c8562d40b4a77"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4a494ed8df3e3fadf59a25f70265c067b36f94b6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4a494ed8df3e3fadf59a25f70265c067b36f94b6", "html_url": "https://github.com/rust-lang/rust/commit/4a494ed8df3e3fadf59a25f70265c067b36f94b6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4a494ed8df3e3fadf59a25f70265c067b36f94b6/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e9aa73d2bf3c94bc4ff32afeb2b20f28c677dafa", "url": "https://api.github.com/repos/rust-lang/rust/commits/e9aa73d2bf3c94bc4ff32afeb2b20f28c677dafa", "html_url": "https://github.com/rust-lang/rust/commit/e9aa73d2bf3c94bc4ff32afeb2b20f28c677dafa"}], "stats": {"total": 50, "additions": 37, "deletions": 13}, "files": [{"sha": "3cb5244413bc0ea9cd8bb1d2df281dd3a47ec048", "filename": "src/librustc_incremental/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4a494ed8df3e3fadf59a25f70265c067b36f94b6/src%2Flibrustc_incremental%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a494ed8df3e3fadf59a25f70265c067b36f94b6/src%2Flibrustc_incremental%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Flib.rs?ref=4a494ed8df3e3fadf59a25f70265c067b36f94b6", "patch": "@@ -48,6 +48,7 @@ pub mod ich;\n pub use assert_dep_graph::assert_dep_graph;\n pub use calculate_svh::compute_incremental_hashes_map;\n pub use calculate_svh::IncrementalHashesMap;\n+pub use calculate_svh::hasher::IchHasher;\n pub use persist::load_dep_graph;\n pub use persist::save_dep_graph;\n pub use persist::save_trans_partition;"}, {"sha": "f70c24c3ccb2d4b4bfceab9b1b1bebf9077c217f", "filename": "src/librustc_trans/base.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/4a494ed8df3e3fadf59a25f70265c067b36f94b6/src%2Flibrustc_trans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a494ed8df3e3fadf59a25f70265c067b36f94b6/src%2Flibrustc_trans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fbase.rs?ref=4a494ed8df3e3fadf59a25f70265c067b36f94b6", "patch": "@@ -1610,7 +1610,7 @@ pub fn trans_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n \n     let symbol_map = Rc::new(symbol_map);\n \n-    let previous_work_products = trans_reuse_previous_work_products(tcx,\n+    let previous_work_products = trans_reuse_previous_work_products(&shared_ccx,\n                                                                     &codegen_units,\n                                                                     &symbol_map);\n \n@@ -1630,7 +1630,9 @@ pub fn trans_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n \n             ModuleTranslation {\n                 name: String::from(ccx.codegen_unit().name()),\n-                symbol_name_hash: ccx.codegen_unit().compute_symbol_name_hash(tcx, &symbol_map),\n+                symbol_name_hash: ccx.codegen_unit()\n+                                     .compute_symbol_name_hash(&shared_ccx,\n+                                                               &symbol_map),\n                 source: source,\n             }\n         })\n@@ -1962,7 +1964,7 @@ fn gather_type_sizes<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n \n /// For each CGU, identify if we can reuse an existing object file (or\n /// maybe other context).\n-fn trans_reuse_previous_work_products(tcx: TyCtxt,\n+fn trans_reuse_previous_work_products(scx: &SharedCrateContext,\n                                       codegen_units: &[CodegenUnit],\n                                       symbol_map: &SymbolMap)\n                                       -> Vec<Option<WorkProduct>> {\n@@ -1972,16 +1974,16 @@ fn trans_reuse_previous_work_products(tcx: TyCtxt,\n         .map(|cgu| {\n             let id = cgu.work_product_id();\n \n-            let hash = cgu.compute_symbol_name_hash(tcx, symbol_map);\n+            let hash = cgu.compute_symbol_name_hash(scx, symbol_map);\n \n             debug!(\"trans_reuse_previous_work_products: id={:?} hash={}\", id, hash);\n \n-            if let Some(work_product) = tcx.dep_graph.previous_work_product(&id) {\n+            if let Some(work_product) = scx.dep_graph().previous_work_product(&id) {\n                 if work_product.input_hash == hash {\n                     debug!(\"trans_reuse_previous_work_products: reusing {:?}\", work_product);\n                     return Some(work_product);\n                 } else {\n-                    if tcx.sess.opts.debugging_opts.incremental_info {\n+                    if scx.sess().opts.debugging_opts.incremental_info {\n                         println!(\"incremental: CGU `{}` invalidated because of \\\n                                   changed partitioning hash.\",\n                                   cgu.name());"}, {"sha": "8b98eb57814ace1e1c78375823b783a9e6f1bb29", "filename": "src/librustc_trans/context.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4a494ed8df3e3fadf59a25f70265c067b36f94b6/src%2Flibrustc_trans%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a494ed8df3e3fadf59a25f70265c067b36f94b6/src%2Flibrustc_trans%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcontext.rs?ref=4a494ed8df3e3fadf59a25f70265c067b36f94b6", "patch": "@@ -10,7 +10,8 @@\n \n use llvm;\n use llvm::{ContextRef, ModuleRef, ValueRef, BuilderRef};\n-use rustc::dep_graph::{DepNode, DepTrackingMap, DepTrackingMapConfig, WorkProduct};\n+use rustc::dep_graph::{DepGraph, DepNode, DepTrackingMap, DepTrackingMapConfig,\n+                       WorkProduct};\n use middle::cstore::LinkMeta;\n use rustc::hir::def::ExportMap;\n use rustc::hir::def_id::DefId;\n@@ -551,6 +552,10 @@ impl<'b, 'tcx> SharedCrateContext<'b, 'tcx> {\n         &self.tcx.sess\n     }\n \n+    pub fn dep_graph<'a>(&'a self) -> &'a DepGraph {\n+        &self.tcx.dep_graph\n+    }\n+\n     pub fn stats<'a>(&'a self) -> &'a Stats {\n         &self.stats\n     }"}, {"sha": "d93bbec7efa41153958ad5bd959ac8ef4fff16b3", "filename": "src/librustc_trans/partitioning.rs", "status": "modified", "additions": 22, "deletions": 6, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/4a494ed8df3e3fadf59a25f70265c067b36f94b6/src%2Flibrustc_trans%2Fpartitioning.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a494ed8df3e3fadf59a25f70265c067b36f94b6/src%2Flibrustc_trans%2Fpartitioning.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fpartitioning.rs?ref=4a494ed8df3e3fadf59a25f70265c067b36f94b6", "patch": "@@ -126,10 +126,10 @@ use rustc::hir::map::DefPathData;\n use rustc::session::config::NUMBERED_CODEGEN_UNIT_MARKER;\n use rustc::ty::TyCtxt;\n use rustc::ty::item_path::characteristic_def_id_of_type;\n+use rustc_incremental::IchHasher;\n use std::cmp::Ordering;\n-use std::hash::{Hash, Hasher};\n+use std::hash::Hash;\n use std::sync::Arc;\n-use std::collections::hash_map::DefaultHasher;\n use symbol_map::SymbolMap;\n use syntax::ast::NodeId;\n use syntax::symbol::{Symbol, InternedString};\n@@ -188,14 +188,30 @@ impl<'tcx> CodegenUnit<'tcx> {\n         DepNode::WorkProduct(self.work_product_id())\n     }\n \n-    pub fn compute_symbol_name_hash(&self, tcx: TyCtxt, symbol_map: &SymbolMap) -> u64 {\n-        let mut state = DefaultHasher::new();\n-        let all_items = self.items_in_deterministic_order(tcx, symbol_map);\n+    pub fn compute_symbol_name_hash(&self,\n+                                    scx: &SharedCrateContext,\n+                                    symbol_map: &SymbolMap) -> u64 {\n+        let mut state = IchHasher::new();\n+        let exported_symbols = scx.exported_symbols();\n+        let all_items = self.items_in_deterministic_order(scx.tcx(), symbol_map);\n         for (item, _) in all_items {\n             let symbol_name = symbol_map.get(item).unwrap();\n+            symbol_name.len().hash(&mut state);\n             symbol_name.hash(&mut state);\n+            let exported = match item {\n+               TransItem::Fn(ref instance) => {\n+                    let node_id = scx.tcx().map.as_local_node_id(instance.def);\n+                    node_id.map(|node_id| exported_symbols.contains(&node_id))\n+                           .unwrap_or(false)\n+               }\n+               TransItem::Static(node_id) => {\n+                    exported_symbols.contains(&node_id)\n+               }\n+               TransItem::DropGlue(..) => false,\n+            };\n+            exported.hash(&mut state);\n         }\n-        state.finish()\n+        state.finish().to_smaller_hash()\n     }\n \n     pub fn items_in_deterministic_order(&self,"}]}