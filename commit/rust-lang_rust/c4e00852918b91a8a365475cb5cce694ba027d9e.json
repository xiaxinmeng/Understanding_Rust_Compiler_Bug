{"sha": "c4e00852918b91a8a365475cb5cce694ba027d9e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM0ZTAwODUyOTE4YjkxYThhMzY1NDc1Y2I1Y2NlNjk0YmEwMjdkOWU=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-03-21T02:42:27Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-03-21T02:43:39Z"}, "message": "Fix multi-stage deps, add rules for stage1 and stage2 outputs.", "tree": {"sha": "737f04b5c65cb3852e5f14166a02b6894760be63", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/737f04b5c65cb3852e5f14166a02b6894760be63"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c4e00852918b91a8a365475cb5cce694ba027d9e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c4e00852918b91a8a365475cb5cce694ba027d9e", "html_url": "https://github.com/rust-lang/rust/commit/c4e00852918b91a8a365475cb5cce694ba027d9e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c4e00852918b91a8a365475cb5cce694ba027d9e/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a36b44d33d40dd617141a50be067e58a50f70cc3", "url": "https://api.github.com/repos/rust-lang/rust/commits/a36b44d33d40dd617141a50be067e58a50f70cc3", "html_url": "https://github.com/rust-lang/rust/commit/a36b44d33d40dd617141a50be067e58a50f70cc3"}], "stats": {"total": 82, "additions": 71, "deletions": 11}, "files": [{"sha": "829ae0c6a7b134a757873dae1b15c45b75acb6c3", "filename": "Makefile.in", "status": "modified", "additions": 71, "deletions": 11, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/c4e00852918b91a8a365475cb5cce694ba027d9e/Makefile.in", "raw_url": "https://github.com/rust-lang/rust/raw/c4e00852918b91a8a365475cb5cce694ba027d9e/Makefile.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Makefile.in?ref=c4e00852918b91a8a365475cb5cce694ba027d9e", "patch": "@@ -186,9 +186,9 @@ X := $(CFG_EXE_SUFFIX)\n VPATH := $(S)doc $(S)src\n \n # Compilers we build, we now know how to run.\n-BOOT := $(Q)OCAMLRUNPARAM=\"b1\" boot/rustboot$(X) $(CFG_BOOT_FLAGS) -L stage0\n-STAGE0 := $(Q)$(CFG_RUN_TARG) stage0/rustc$(X) $(CFG_RUSTC_FLAGS) -L stage1\n-STAGE1 := $(Q)$(CFG_RUN_TARG) stage1/rustc$(X) $(CFG_RUSTC_FLAGS) -L stage2\n+BOOT := $(Q)OCAMLRUNPARAM=\"b1\" boot/rustboot$(X) $(CFG_BOOT_FLAGS) -L boot\n+STAGE0 := $(Q)$(CFG_RUN_TARG) stage0/rustc$(X) $(CFG_RUSTC_FLAGS) -L stage0\n+STAGE1 := $(Q)$(CFG_RUN_TARG) stage1/rustc$(X) $(CFG_RUSTC_FLAGS) -L stage1\n \n # \"Source\" files we generate in builddir along the way.\n GENERATED := boot/fe/lexer.ml boot/version.ml\n@@ -384,6 +384,7 @@ boot/version.ml: $(MKFILES)\n       --pretty=format:'let version = \"prerelease (%h %ci)\";;' >$@ || exit 1\n \n \n+\n boot/$(CFG_STDLIB): $(S)src/$(STDLIB_CRATE) $(STDLIB_INPUTS) \\\n                     boot/rustboot$(X) $(MKFILES)\n \t@$(call E, compile: $@)\n@@ -394,6 +395,17 @@ stage0/$(CFG_STDLIB): $(S)src/$(STDLIB_CRATE) $(STDLIB_INPUTS) \\\n \t@$(call E, compile: $@)\n \t$(STAGE0) -shared -o $@ $<\n \n+stage1/$(CFG_STDLIB): $(S)src/$(STDLIB_CRATE) $(STDLIB_INPUTS) \\\n+                      stage1/rustc$(X) $(MKFILES)\n+\t@$(call E, compile: $@)\n+\t$(STAGE1) -shared -o $@ $<\n+\n+stage2/$(CFG_STDLIB): $(S)src/$(STDLIB_CRATE) $(STDLIB_INPUTS) \\\n+                      stage2/rustc$(X) $(MKFILES)\n+\t@$(call E, compile: $@)\n+\t$(STAGE2) -shared -o $@ $<\n+\n+\n \n stage0/rustc$(X): $(S)src/$(COMPILER_CRATE) $(COMPILER_INPUTS) \\\n                   $(BREQ)\n@@ -407,6 +419,13 @@ stage1/rustc$(X): $(S)src/$(COMPILER_CRATE) $(COMPILER_INPUTS) \\\n \t$(STAGE0) -o $@ $<\n \t$(Q)chmod 0755 $@\n \n+stage2/rustc$(X): $(S)src/$(COMPILER_CRATE) $(COMPILER_INPUTS) \\\n+                  $(SREQ1) stage1/$(CFG_STDLIB)\n+\t@$(call E, compile: $@)\n+\t$(STAGE1) -o $@ $<\n+\t$(Q)chmod 0755 $@\n+\n+\n \n stage0/glue.bc: stage0/rustc$(X) stage0/$(CFG_STDLIB) \\\n                 llvmext/$(CFG_LLVMEXT) rt/$(CFG_RUNTIME)\n@@ -418,6 +437,11 @@ stage1/glue.bc: stage1/rustc$(X) stage1/$(CFG_STDLIB) \\\n \t@$(call E, generate: $@)\n \t$(STAGE1) -o $@ -glue\n \n+stage2/glue.bc: stage2/rustc$(X) stage2/$(CFG_STDLIB) \\\n+                llvmext/$(CFG_LLVMEXT) rt/$(CFG_RUNTIME)\n+\t@$(call E, generate: $@)\n+\t$(STAGE2) -o $@ -glue\n+\n ######################################################################\n # Library and boot rules\n ######################################################################\n@@ -449,14 +473,6 @@ llvmext/%.o: llvmext/%.cpp $(MKFILES)\n # Testing rules\n ######################################################################\n \n-%.boot$(X): %.rs $(BREQ)\n-\t@$(call E, compile [boot]: $@)\n-\t$(BOOT) -o $@ $<\n-\n-%.boot$(X): %.rc $(BREQ)\n-\t@$(call E, compile [boot]: $@)\n-\t$(BOOT) -o $@ $<\n-\n %.stage0$(X): %.stage0.o rt/$(CFG_RUNTIME) stage0/glue.o\n \t@$(call E, link [llvm]: $@)\n \t$(Q)gcc $(CFG_GCC_CFLAGS) stage0/glue.o -o $@ $< -Lstage0 -lrustrt\n@@ -465,6 +481,32 @@ llvmext/%.o: llvmext/%.cpp $(MKFILES)\n \t@# programs, I\\'ll live with the noise.\n \t-$(Q)$(DSYMUTIL) $@\n \n+%.stage1(X): %.stage1.o rt/$(CFG_RUNTIME) stage1/glue.o\n+\t@$(call E, link [llvm]: $@)\n+\t$(Q)gcc $(CFG_GCC_CFLAGS) stage1/glue.o -o $@ $< -Lstage1 -lrustrt\n+\t@# dsymutil sometimes fails or prints a warning, but the\n+\t@# program still runs.  Since it simplifies debugging other\n+\t@# programs, I\\'ll live with the noise.\n+\t-$(Q)$(DSYMUTIL) $@\n+\n+%.stage2(X): %.stage2.o rt/$(CFG_RUNTIME) stage2/glue.o\n+\t@$(call E, link [llvm]: $@)\n+\t$(Q)gcc $(CFG_GCC_CFLAGS) stage2/glue.o -o $@ $< -Lstage2 -lrustrt\n+\t@# dsymutil sometimes fails or prints a warning, but the\n+\t@# program still runs.  Since it simplifies debugging other\n+\t@# programs, I\\'ll live with the noise.\n+\t-$(Q)$(DSYMUTIL) $@\n+\n+\n+\n+%.boot$(X): %.rs $(BREQ)\n+\t@$(call E, compile [boot]: $@)\n+\t$(BOOT) -o $@ $<\n+\n+%.boot$(X): %.rc $(BREQ)\n+\t@$(call E, compile [boot]: $@)\n+\t$(BOOT) -o $@ $<\n+\n %.stage0.bc: %.rc $(SREQ0)\n \t@$(call E, compile [stage0]: $@)\n \t$(STAGE0) -o $@ $<\n@@ -473,6 +515,24 @@ llvmext/%.o: llvmext/%.cpp $(MKFILES)\n \t@$(call E, compile [stage0]: $@)\n \t$(STAGE0) -o $@ $<\n \n+%.stage1.bc: %.rc $(SREQ1)\n+\t@$(call E, compile [stage1]: $@)\n+\t$(STAGE1) -o $@ $<\n+\n+%.stage1.bc: %.rs $(SREQ1)\n+\t@$(call E, compile [stage1]: $@)\n+\t$(STAGE1) -o $@ $<\n+\n+%.stage2.bc: %.rc $(SREQ2)\n+\t@$(call E, compile [stage2]: $@)\n+\t$(STAGE2) -o $@ $<\n+\n+%.stage2.bc: %.rs $(SREQ2)\n+\t@$(call E, compile [stage2]: $@)\n+\t$(STAGE2) -o $@ $<\n+\n+\n+\n %.o: %.s\n \t@$(call E, assemble [llvm]: $@)\n \t$(Q)gcc $(CFG_GCC_CFLAGS) -o $@ -c $<"}]}