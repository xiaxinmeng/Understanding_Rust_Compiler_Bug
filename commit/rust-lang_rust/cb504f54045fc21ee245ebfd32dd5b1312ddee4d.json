{"sha": "cb504f54045fc21ee245ebfd32dd5b1312ddee4d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNiNTA0ZjU0MDQ1ZmMyMWVlMjQ1ZWJmZDMyZGQ1YjEzMTJkZGVlNGQ=", "commit": {"author": {"name": "John Clements", "email": "clements@racket-lang.org", "date": "2013-01-24T22:10:38Z"}, "committer": {"name": "John Clements", "email": "clements@racket-lang.org", "date": "2013-01-24T22:20:57Z"}, "message": "unit test cases now pass, added a few to the interner", "tree": {"sha": "4c1067a68779cb853d9bd9e268c9982affd29b59", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4c1067a68779cb853d9bd9e268c9982affd29b59"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cb504f54045fc21ee245ebfd32dd5b1312ddee4d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cb504f54045fc21ee245ebfd32dd5b1312ddee4d", "html_url": "https://github.com/rust-lang/rust/commit/cb504f54045fc21ee245ebfd32dd5b1312ddee4d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cb504f54045fc21ee245ebfd32dd5b1312ddee4d/comments", "author": {"login": "jbclements", "id": 226617, "node_id": "MDQ6VXNlcjIyNjYxNw==", "avatar_url": "https://avatars.githubusercontent.com/u/226617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbclements", "html_url": "https://github.com/jbclements", "followers_url": "https://api.github.com/users/jbclements/followers", "following_url": "https://api.github.com/users/jbclements/following{/other_user}", "gists_url": "https://api.github.com/users/jbclements/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbclements/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbclements/subscriptions", "organizations_url": "https://api.github.com/users/jbclements/orgs", "repos_url": "https://api.github.com/users/jbclements/repos", "events_url": "https://api.github.com/users/jbclements/events{/privacy}", "received_events_url": "https://api.github.com/users/jbclements/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jbclements", "id": 226617, "node_id": "MDQ6VXNlcjIyNjYxNw==", "avatar_url": "https://avatars.githubusercontent.com/u/226617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbclements", "html_url": "https://github.com/jbclements", "followers_url": "https://api.github.com/users/jbclements/followers", "following_url": "https://api.github.com/users/jbclements/following{/other_user}", "gists_url": "https://api.github.com/users/jbclements/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbclements/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbclements/subscriptions", "organizations_url": "https://api.github.com/users/jbclements/orgs", "repos_url": "https://api.github.com/users/jbclements/repos", "events_url": "https://api.github.com/users/jbclements/events{/privacy}", "received_events_url": "https://api.github.com/users/jbclements/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ad25e208ee4978ca20123bcd2f34c16504518b8d", "url": "https://api.github.com/repos/rust-lang/rust/commits/ad25e208ee4978ca20123bcd2f34c16504518b8d", "html_url": "https://github.com/rust-lang/rust/commit/ad25e208ee4978ca20123bcd2f34c16504518b8d"}], "stats": {"total": 77, "additions": 50, "deletions": 27}, "files": [{"sha": "2dfb689682c8e885de3c053a8febedcf33e0ea6f", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 50, "deletions": 27, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/cb504f54045fc21ee245ebfd32dd5b1312ddee4d/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb504f54045fc21ee245ebfd32dd5b1312ddee4d/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=cb504f54045fc21ee245ebfd32dd5b1312ddee4d", "patch": "@@ -170,19 +170,6 @@ fn fun_to_str(decl: ast::fn_decl, name: ast::ident,\n     }\n }\n \n-#[test]\n-fn test_fun_to_str() {\n-    let decl: ast::fn_decl = ast::fn_decl {\n-        inputs: ~[],\n-        output: @ast::Ty {id: 0,\n-                  node: ast::ty_nil,\n-                  span: ast_util::dummy_sp()},\n-        //purity: ast::impure_fn,\n-        cf: ast::return_val\n-    };\n-    assert fun_to_str(decl, \"abba\", ~[]) == \"fn abba()\";\n-}\n-\n fn block_to_str(blk: ast::blk, intr: @ident_interner) -> ~str {\n     do io::with_str_writer |wr| {\n         let s = rust_printer(wr, intr);\n@@ -207,20 +194,6 @@ fn variant_to_str(var: ast::variant, intr: @ident_interner) -> ~str {\n     to_str(var, print_variant, intr)\n }\n \n-#[test]\n-fn test_variant_to_str() {\n-    let var = ast_util::respan(ast_util::dummy_sp(), {\n-        name: \"principle_skinner\",\n-        attrs: ~[],\n-        args: ~[],\n-        id: 0,\n-        disr_expr: None\n-    });\n-\n-    let varstr = variant_to_str(var);\n-    assert varstr == \"principle_skinner\";\n-}\n-\n fn cbox(s: ps, u: uint) {\n     s.boxes.push(pp::consistent);\n     pp::cbox(s.s, u);\n@@ -2273,6 +2246,56 @@ fn proto_to_str(p: ast::Proto) -> ~str {\n     };\n }\n \n+#[cfg(test)]\n+mod test {\n+    use ast;\n+    use ast_util;\n+    use parse;\n+    use super::*;\n+    //use util;\n+\n+    fn string_check<T : Eq> (given : &T, expected: &T) {\n+        if !(given == expected) {\n+            fail (fmt!(\"given %?, expected %?\",given,expected));\n+        }\n+    }\n+\n+    #[test]\n+    fn test_fun_to_str() {\n+        let mock_interner = parse::token::mk_fake_ident_interner();\n+        let abba_ident = mock_interner.intern(@~\"abba\");\n+\n+        let decl: ast::fn_decl = ast::fn_decl {\n+            inputs: ~[],\n+            output: @ast::Ty {id: 0,\n+                              node: ast::ty_nil,\n+                              span: ast_util::dummy_sp()},\n+            cf: ast::return_val\n+        };\n+        assert fun_to_str(decl, abba_ident, ~[],mock_interner)\n+            == ~\"fn abba()\";\n+    }\n+\n+    #[test]\n+    fn test_variant_to_str() {\n+        let mock_interner = parse::token::mk_fake_ident_interner();\n+        let ident = mock_interner.intern(@~\"principal_skinner\");\n+\n+        let var = ast_util::respan(ast_util::dummy_sp(), ast::variant_ {\n+            name: ident,\n+            attrs: ~[],\n+            // making this up as I go.... ?\n+            kind: ast::tuple_variant_kind(~[]),\n+            id: 0,\n+            disr_expr: None,\n+            vis: ast::public,\n+        });\n+\n+        let varstr = variant_to_str(var,mock_interner);\n+        string_check(&varstr,&~\"pub principal_skinner\");\n+    }\n+}\n+\n //\n // Local Variables:\n // mode: rust"}]}