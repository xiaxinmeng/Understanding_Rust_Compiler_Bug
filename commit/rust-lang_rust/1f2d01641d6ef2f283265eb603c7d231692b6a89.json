{"sha": "1f2d01641d6ef2f283265eb603c7d231692b6a89", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFmMmQwMTY0MWQ2ZWYyZjI4MzI2NWViNjAzYzdkMjMxNjkyYjZhODk=", "commit": {"author": {"name": "Mateusz Gacek", "email": "96mateusz.gacek@gmail.com", "date": "2021-03-18T18:45:13Z"}, "committer": {"name": "Mateusz Gacek", "email": "96mateusz.gacek@gmail.com", "date": "2021-03-19T19:29:55Z"}, "message": "wrong_self_convention: Enhance lint message", "tree": {"sha": "b8364d07ef3b92fcda346253c2bea189b5c7d61f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b8364d07ef3b92fcda346253c2bea189b5c7d61f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1f2d01641d6ef2f283265eb603c7d231692b6a89", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1f2d01641d6ef2f283265eb603c7d231692b6a89", "html_url": "https://github.com/rust-lang/rust/commit/1f2d01641d6ef2f283265eb603c7d231692b6a89", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1f2d01641d6ef2f283265eb603c7d231692b6a89/comments", "author": {"login": "mgacek8", "id": 24357739, "node_id": "MDQ6VXNlcjI0MzU3NzM5", "avatar_url": "https://avatars.githubusercontent.com/u/24357739?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mgacek8", "html_url": "https://github.com/mgacek8", "followers_url": "https://api.github.com/users/mgacek8/followers", "following_url": "https://api.github.com/users/mgacek8/following{/other_user}", "gists_url": "https://api.github.com/users/mgacek8/gists{/gist_id}", "starred_url": "https://api.github.com/users/mgacek8/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mgacek8/subscriptions", "organizations_url": "https://api.github.com/users/mgacek8/orgs", "repos_url": "https://api.github.com/users/mgacek8/repos", "events_url": "https://api.github.com/users/mgacek8/events{/privacy}", "received_events_url": "https://api.github.com/users/mgacek8/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mgacek8", "id": 24357739, "node_id": "MDQ6VXNlcjI0MzU3NzM5", "avatar_url": "https://avatars.githubusercontent.com/u/24357739?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mgacek8", "html_url": "https://github.com/mgacek8", "followers_url": "https://api.github.com/users/mgacek8/followers", "following_url": "https://api.github.com/users/mgacek8/following{/other_user}", "gists_url": "https://api.github.com/users/mgacek8/gists{/gist_id}", "starred_url": "https://api.github.com/users/mgacek8/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mgacek8/subscriptions", "organizations_url": "https://api.github.com/users/mgacek8/orgs", "repos_url": "https://api.github.com/users/mgacek8/repos", "events_url": "https://api.github.com/users/mgacek8/events{/privacy}", "received_events_url": "https://api.github.com/users/mgacek8/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "032cdfe043c5c9d00530dc18005066a184f3d46e", "url": "https://api.github.com/repos/rust-lang/rust/commits/032cdfe043c5c9d00530dc18005066a184f3d46e", "html_url": "https://github.com/rust-lang/rust/commit/032cdfe043c5c9d00530dc18005066a184f3d46e"}], "stats": {"total": 81, "additions": 42, "deletions": 39}, "files": [{"sha": "a3652c18a78818952af0b94dc553ecef35d51a1b", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1f2d01641d6ef2f283265eb603c7d231692b6a89/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f2d01641d6ef2f283265eb603c7d231692b6a89/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=1f2d01641d6ef2f283265eb603c7d231692b6a89", "patch": "@@ -2348,10 +2348,10 @@ impl SelfKind {\n     #[must_use]\n     fn description(self) -> &'static str {\n         match self {\n-            Self::Value => \"self by value\",\n-            Self::Ref => \"self by reference\",\n-            Self::RefMut => \"self by mutable reference\",\n-            Self::No => \"no self\",\n+            Self::Value => \"`self` by value\",\n+            Self::Ref => \"`self` by reference\",\n+            Self::RefMut => \"`self` by mutable reference\",\n+            Self::No => \"no `self`\",\n         }\n     }\n }"}, {"sha": "59e683aa9a786fb18f732ad80ebffd9ab4e7aaa6", "filename": "clippy_lints/src/methods/wrong_self_convention.rs", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/1f2d01641d6ef2f283265eb603c7d231692b6a89/clippy_lints%2Fsrc%2Fmethods%2Fwrong_self_convention.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f2d01641d6ef2f283265eb603c7d231692b6a89/clippy_lints%2Fsrc%2Fmethods%2Fwrong_self_convention.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fwrong_self_convention.rs?ref=1f2d01641d6ef2f283265eb603c7d231692b6a89", "patch": "@@ -51,13 +51,16 @@ impl Convention {\n impl fmt::Display for Convention {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> Result<(), fmt::Error> {\n         match *self {\n-            Self::Eq(this) => this.fmt(f),\n-            Self::StartsWith(this) => this.fmt(f).and_then(|_| '*'.fmt(f)),\n-            Self::EndsWith(this) => '*'.fmt(f).and_then(|_| this.fmt(f)),\n-            Self::NotEndsWith(this) => '~'.fmt(f).and_then(|_| this.fmt(f)),\n-            Self::IsSelfTypeCopy(is_true) => format!(\"self type is {} Copy\", if is_true { \"\" } else { \"not\" }).fmt(f),\n+            Self::Eq(this) => format!(\"`{}`\", this).fmt(f),\n+            Self::StartsWith(this) => format!(\"`{}*`\", this).fmt(f),\n+            Self::EndsWith(this) => format!(\"`*{}`\", this).fmt(f),\n+            Self::NotEndsWith(this) => format!(\"`~{}`\", this).fmt(f),\n+            Self::IsSelfTypeCopy(is_true) => {\n+                format!(\"`self` type is{} `Copy`\", if is_true { \"\" } else { \" not\" }).fmt(f)\n+            },\n             Self::ImplementsTrait(is_true) => {\n-                format!(\"Method {} implement a trait\", if is_true { \"\" } else { \"do not\" }).fmt(f)\n+                let (negation, s_suffix) = if is_true { (\"\", \"s\") } else { (\" does not\", \"\") };\n+                format!(\"Method{} implement{} a trait\", negation, s_suffix).fmt(f)\n             },\n         }\n     }\n@@ -99,15 +102,15 @@ pub(super) fn check<'tcx>(\n                             {\n                                 None\n                             } else {\n-                                Some(format!(\"`{}`\", &conv.to_string()))\n+                                Some(conv.to_string())\n                             }\n                         })\n                         .collect::<Vec<_>>()\n                         .join(\" and \");\n \n                     format!(\"methods with the following characteristics: ({})\", &s)\n                 } else {\n-                    format!(\"methods called `{}`\", &conventions[0])\n+                    format!(\"methods called {}\", &conventions[0])\n                 }\n             };\n "}, {"sha": "702684f6b43a6467067f02a9780df538435f81bf", "filename": "tests/ui/def_id_nocore.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f2d01641d6ef2f283265eb603c7d231692b6a89/tests%2Fui%2Fdef_id_nocore.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f2d01641d6ef2f283265eb603c7d231692b6a89/tests%2Fui%2Fdef_id_nocore.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdef_id_nocore.stderr?ref=1f2d01641d6ef2f283265eb603c7d231692b6a89", "patch": "@@ -1,4 +1,4 @@\n-error: methods called `as_*` usually take self by reference or self by mutable reference\n+error: methods called `as_*` usually take `self` by reference or `self` by mutable reference\n   --> $DIR/def_id_nocore.rs:26:19\n    |\n LL |     pub fn as_ref(self) -> &'static str {"}, {"sha": "1d58a12ac795b9706fd8bf1fef7c67adf4d3b990", "filename": "tests/ui/wrong_self_convention.stderr", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/1f2d01641d6ef2f283265eb603c7d231692b6a89/tests%2Fui%2Fwrong_self_convention.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f2d01641d6ef2f283265eb603c7d231692b6a89/tests%2Fui%2Fwrong_self_convention.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwrong_self_convention.stderr?ref=1f2d01641d6ef2f283265eb603c7d231692b6a89", "patch": "@@ -1,4 +1,4 @@\n-error: methods called `from_*` usually take no self\n+error: methods called `from_*` usually take no `self`\n   --> $DIR/wrong_self_convention.rs:18:17\n    |\n LL |     fn from_i32(self) {}\n@@ -7,183 +7,183 @@ LL |     fn from_i32(self) {}\n    = note: `-D clippy::wrong-self-convention` implied by `-D warnings`\n    = help: consider choosing a less ambiguous name\n \n-error: methods called `from_*` usually take no self\n+error: methods called `from_*` usually take no `self`\n   --> $DIR/wrong_self_convention.rs:24:21\n    |\n LL |     pub fn from_i64(self) {}\n    |                     ^^^^\n    |\n    = help: consider choosing a less ambiguous name\n \n-error: methods called `as_*` usually take self by reference or self by mutable reference\n+error: methods called `as_*` usually take `self` by reference or `self` by mutable reference\n   --> $DIR/wrong_self_convention.rs:36:15\n    |\n LL |     fn as_i32(self) {}\n    |               ^^^^\n    |\n    = help: consider choosing a less ambiguous name\n \n-error: methods called `into_*` usually take self by value\n+error: methods called `into_*` usually take `self` by value\n   --> $DIR/wrong_self_convention.rs:38:17\n    |\n LL |     fn into_i32(&self) {}\n    |                 ^^^^^\n    |\n    = help: consider choosing a less ambiguous name\n \n-error: methods called `is_*` usually take self by reference or no self\n+error: methods called `is_*` usually take `self` by reference or no `self`\n   --> $DIR/wrong_self_convention.rs:40:15\n    |\n LL |     fn is_i32(self) {}\n    |               ^^^^\n    |\n    = help: consider choosing a less ambiguous name\n \n-error: methods with the following characteristics: (`to_*` and `self type is not Copy`) usually take self by reference\n+error: methods with the following characteristics: (`to_*` and `self` type is not `Copy`) usually take `self` by reference\n   --> $DIR/wrong_self_convention.rs:42:15\n    |\n LL |     fn to_i32(self) {}\n    |               ^^^^\n    |\n    = help: consider choosing a less ambiguous name\n \n-error: methods called `from_*` usually take no self\n+error: methods called `from_*` usually take no `self`\n   --> $DIR/wrong_self_convention.rs:44:17\n    |\n LL |     fn from_i32(self) {}\n    |                 ^^^^\n    |\n    = help: consider choosing a less ambiguous name\n \n-error: methods called `as_*` usually take self by reference or self by mutable reference\n+error: methods called `as_*` usually take `self` by reference or `self` by mutable reference\n   --> $DIR/wrong_self_convention.rs:46:19\n    |\n LL |     pub fn as_i64(self) {}\n    |                   ^^^^\n    |\n    = help: consider choosing a less ambiguous name\n \n-error: methods called `into_*` usually take self by value\n+error: methods called `into_*` usually take `self` by value\n   --> $DIR/wrong_self_convention.rs:47:21\n    |\n LL |     pub fn into_i64(&self) {}\n    |                     ^^^^^\n    |\n    = help: consider choosing a less ambiguous name\n \n-error: methods called `is_*` usually take self by reference or no self\n+error: methods called `is_*` usually take `self` by reference or no `self`\n   --> $DIR/wrong_self_convention.rs:48:19\n    |\n LL |     pub fn is_i64(self) {}\n    |                   ^^^^\n    |\n    = help: consider choosing a less ambiguous name\n \n-error: methods with the following characteristics: (`to_*` and `self type is not Copy`) usually take self by reference\n+error: methods with the following characteristics: (`to_*` and `self` type is not `Copy`) usually take `self` by reference\n   --> $DIR/wrong_self_convention.rs:49:19\n    |\n LL |     pub fn to_i64(self) {}\n    |                   ^^^^\n    |\n    = help: consider choosing a less ambiguous name\n \n-error: methods called `from_*` usually take no self\n+error: methods called `from_*` usually take no `self`\n   --> $DIR/wrong_self_convention.rs:50:21\n    |\n LL |     pub fn from_i64(self) {}\n    |                     ^^^^\n    |\n    = help: consider choosing a less ambiguous name\n \n-error: methods called `as_*` usually take self by reference or self by mutable reference\n+error: methods called `as_*` usually take `self` by reference or `self` by mutable reference\n   --> $DIR/wrong_self_convention.rs:95:19\n    |\n LL |         fn as_i32(self) {}\n    |                   ^^^^\n    |\n    = help: consider choosing a less ambiguous name\n \n-error: methods called `into_*` usually take self by value\n+error: methods called `into_*` usually take `self` by value\n   --> $DIR/wrong_self_convention.rs:98:25\n    |\n LL |         fn into_i32_ref(&self) {}\n    |                         ^^^^^\n    |\n    = help: consider choosing a less ambiguous name\n \n-error: methods called `is_*` usually take self by reference or no self\n+error: methods called `is_*` usually take `self` by reference or no `self`\n   --> $DIR/wrong_self_convention.rs:100:19\n    |\n LL |         fn is_i32(self) {}\n    |                   ^^^^\n    |\n    = help: consider choosing a less ambiguous name\n \n-error: methods called `from_*` usually take no self\n+error: methods called `from_*` usually take no `self`\n   --> $DIR/wrong_self_convention.rs:104:21\n    |\n LL |         fn from_i32(self) {}\n    |                     ^^^^\n    |\n    = help: consider choosing a less ambiguous name\n \n-error: methods called `as_*` usually take self by reference or self by mutable reference\n+error: methods called `as_*` usually take `self` by reference or `self` by mutable reference\n   --> $DIR/wrong_self_convention.rs:119:19\n    |\n LL |         fn as_i32(self);\n    |                   ^^^^\n    |\n    = help: consider choosing a less ambiguous name\n \n-error: methods called `into_*` usually take self by value\n+error: methods called `into_*` usually take `self` by value\n   --> $DIR/wrong_self_convention.rs:122:25\n    |\n LL |         fn into_i32_ref(&self);\n    |                         ^^^^^\n    |\n    = help: consider choosing a less ambiguous name\n \n-error: methods called `is_*` usually take self by reference or no self\n+error: methods called `is_*` usually take `self` by reference or no `self`\n   --> $DIR/wrong_self_convention.rs:124:19\n    |\n LL |         fn is_i32(self);\n    |                   ^^^^\n    |\n    = help: consider choosing a less ambiguous name\n \n-error: methods called `from_*` usually take no self\n+error: methods called `from_*` usually take no `self`\n   --> $DIR/wrong_self_convention.rs:128:21\n    |\n LL |         fn from_i32(self);\n    |                     ^^^^\n    |\n    = help: consider choosing a less ambiguous name\n \n-error: methods called `into_*` usually take self by value\n+error: methods called `into_*` usually take `self` by value\n   --> $DIR/wrong_self_convention.rs:146:25\n    |\n LL |         fn into_i32_ref(&self);\n    |                         ^^^^^\n    |\n    = help: consider choosing a less ambiguous name\n \n-error: methods called `from_*` usually take no self\n+error: methods called `from_*` usually take no `self`\n   --> $DIR/wrong_self_convention.rs:152:21\n    |\n LL |         fn from_i32(self);\n    |                     ^^^^\n    |\n    = help: consider choosing a less ambiguous name\n \n-error: methods with the following characteristics: (`to_*` and `self type is  Copy`) usually take self by value\n+error: methods with the following characteristics: (`to_*` and `self` type is `Copy`) usually take `self` by value\n   --> $DIR/wrong_self_convention.rs:181:22\n    |\n LL |         fn to_u64_v2(&self) -> u64 {\n    |                      ^^^^^\n    |\n    = help: consider choosing a less ambiguous name\n \n-error: methods with the following characteristics: (`to_*` and `self type is not Copy`) usually take self by reference\n+error: methods with the following characteristics: (`to_*` and `self` type is not `Copy`) usually take `self` by reference\n   --> $DIR/wrong_self_convention.rs:190:19\n    |\n LL |         fn to_u64(self) -> u64 {"}, {"sha": "6ce37c5949111bf20d20b66ffc00ad6170029a69", "filename": "tests/ui/wrong_self_conventions_mut.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1f2d01641d6ef2f283265eb603c7d231692b6a89/tests%2Fui%2Fwrong_self_conventions_mut.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f2d01641d6ef2f283265eb603c7d231692b6a89/tests%2Fui%2Fwrong_self_conventions_mut.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwrong_self_conventions_mut.stderr?ref=1f2d01641d6ef2f283265eb603c7d231692b6a89", "patch": "@@ -1,4 +1,4 @@\n-error: methods with the following characteristics: (`to_*` and `self type is not Copy`) usually take self by reference\n+error: methods with the following characteristics: (`to_*` and `self` type is not `Copy`) usually take `self` by reference\n   --> $DIR/wrong_self_conventions_mut.rs:15:24\n    |\n LL |         pub fn to_many(&mut self) -> Option<&mut [T]> {\n@@ -7,7 +7,7 @@ LL |         pub fn to_many(&mut self) -> Option<&mut [T]> {\n    = note: `-D clippy::wrong-self-convention` implied by `-D warnings`\n    = help: consider choosing a less ambiguous name\n \n-error: methods with the following characteristics: (`to_*` and `*_mut`) usually take self by mutable reference\n+error: methods with the following characteristics: (`to_*` and `*_mut`) usually take `self` by mutable reference\n   --> $DIR/wrong_self_conventions_mut.rs:23:28\n    |\n LL |         pub fn to_many_mut(&self) -> Option<&[T]> {"}]}