{"sha": "f632bd1a5052b647932de7be6975b1baf15141e9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY2MzJiZDFhNTA1MmI2NDc5MzJkZTdiZTY5NzViMWJhZjE1MTQxZTk=", "commit": {"author": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-06-24T21:48:41Z"}, "committer": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-06-30T07:13:56Z"}, "message": "remove unused `TypeError::ProjectionBoundsLength`", "tree": {"sha": "f385412838497a3ffe28fef0650c0d6cbf28c771", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f385412838497a3ffe28fef0650c0d6cbf28c771"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f632bd1a5052b647932de7be6975b1baf15141e9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f632bd1a5052b647932de7be6975b1baf15141e9", "html_url": "https://github.com/rust-lang/rust/commit/f632bd1a5052b647932de7be6975b1baf15141e9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f632bd1a5052b647932de7be6975b1baf15141e9/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "71b45b97d30d0b0f2c006a21a99581fdf85df253", "url": "https://api.github.com/repos/rust-lang/rust/commits/71b45b97d30d0b0f2c006a21a99581fdf85df253", "html_url": "https://github.com/rust-lang/rust/commit/71b45b97d30d0b0f2c006a21a99581fdf85df253"}], "stats": {"total": 10, "additions": 0, "deletions": 10}, "files": [{"sha": "30ff5a2d9ebdfcd660dbd4c48eee1971204471d5", "filename": "src/librustc_middle/ty/error.rs", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f632bd1a5052b647932de7be6975b1baf15141e9/src%2Flibrustc_middle%2Fty%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f632bd1a5052b647932de7be6975b1baf15141e9/src%2Flibrustc_middle%2Fty%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Ferror.rs?ref=f632bd1a5052b647932de7be6975b1baf15141e9", "patch": "@@ -57,7 +57,6 @@ pub enum TypeError<'tcx> {\n     /// type).\n     CyclicTy(Ty<'tcx>),\n     ProjectionMismatched(ExpectedFound<DefId>),\n-    ProjectionBoundsLength(ExpectedFound<usize>),\n     ExistentialMismatch(ExpectedFound<&'tcx ty::List<ty::ExistentialPredicate<'tcx>>>),\n     ObjectUnsafeCoercion(DefId),\n     ConstMismatch(ExpectedFound<&'tcx ty::Const<'tcx>>),\n@@ -174,13 +173,6 @@ impl<'tcx> fmt::Display for TypeError<'tcx> {\n                     tcx.def_path_str(values.found)\n                 )\n             }),\n-            ProjectionBoundsLength(ref values) => write!(\n-                f,\n-                \"expected {} associated type binding{}, found {}\",\n-                values.expected,\n-                pluralize!(values.expected),\n-                values.found\n-            ),\n             ExistentialMismatch(ref values) => report_maybe_different(\n                 f,\n                 &format!(\"trait `{}`\", values.expected),\n@@ -216,7 +208,6 @@ impl<'tcx> TypeError<'tcx> {\n             | RegionsPlaceholderMismatch\n             | Traits(_)\n             | ProjectionMismatched(_)\n-            | ProjectionBoundsLength(_)\n             | ExistentialMismatch(_)\n             | ConstMismatch(_)\n             | IntrinsicCast"}, {"sha": "1d3607fe32ffce570cba672a64bcf87ff6b28910", "filename": "src/librustc_middle/ty/structural_impls.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f632bd1a5052b647932de7be6975b1baf15141e9/src%2Flibrustc_middle%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f632bd1a5052b647932de7be6975b1baf15141e9/src%2Flibrustc_middle%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fstructural_impls.rs?ref=f632bd1a5052b647932de7be6975b1baf15141e9", "patch": "@@ -655,7 +655,6 @@ impl<'a, 'tcx> Lift<'tcx> for ty::error::TypeError<'a> {\n             VariadicMismatch(x) => VariadicMismatch(x),\n             CyclicTy(t) => return tcx.lift(&t).map(|t| CyclicTy(t)),\n             ProjectionMismatched(x) => ProjectionMismatched(x),\n-            ProjectionBoundsLength(x) => ProjectionBoundsLength(x),\n             Sorts(ref x) => return tcx.lift(x).map(Sorts),\n             ExistentialMismatch(ref x) => return tcx.lift(x).map(ExistentialMismatch),\n             ConstMismatch(ref x) => return tcx.lift(x).map(ConstMismatch),"}]}