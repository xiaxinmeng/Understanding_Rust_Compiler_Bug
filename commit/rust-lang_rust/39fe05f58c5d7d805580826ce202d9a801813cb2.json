{"sha": "39fe05f58c5d7d805580826ce202d9a801813cb2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM5ZmUwNWY1OGM1ZDdkODA1NTgwODI2Y2UyMDJkOWE4MDE4MTNjYjI=", "commit": {"author": {"name": "Flavio Percoco", "email": "flaper87@gmail.com", "date": "2015-01-10T09:40:17Z"}, "committer": {"name": "Flavio Percoco", "email": "flaper87@gmail.com", "date": "2015-01-16T07:18:55Z"}, "message": "Negative impls are considered safe", "tree": {"sha": "f4fac85fb323e9d2de014cf1480e93cb405ec0ff", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f4fac85fb323e9d2de014cf1480e93cb405ec0ff"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/39fe05f58c5d7d805580826ce202d9a801813cb2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/39fe05f58c5d7d805580826ce202d9a801813cb2", "html_url": "https://github.com/rust-lang/rust/commit/39fe05f58c5d7d805580826ce202d9a801813cb2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/39fe05f58c5d7d805580826ce202d9a801813cb2/comments", "author": {"login": "flaper87", "id": 13816, "node_id": "MDQ6VXNlcjEzODE2", "avatar_url": "https://avatars.githubusercontent.com/u/13816?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flaper87", "html_url": "https://github.com/flaper87", "followers_url": "https://api.github.com/users/flaper87/followers", "following_url": "https://api.github.com/users/flaper87/following{/other_user}", "gists_url": "https://api.github.com/users/flaper87/gists{/gist_id}", "starred_url": "https://api.github.com/users/flaper87/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flaper87/subscriptions", "organizations_url": "https://api.github.com/users/flaper87/orgs", "repos_url": "https://api.github.com/users/flaper87/repos", "events_url": "https://api.github.com/users/flaper87/events{/privacy}", "received_events_url": "https://api.github.com/users/flaper87/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flaper87", "id": 13816, "node_id": "MDQ6VXNlcjEzODE2", "avatar_url": "https://avatars.githubusercontent.com/u/13816?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flaper87", "html_url": "https://github.com/flaper87", "followers_url": "https://api.github.com/users/flaper87/followers", "following_url": "https://api.github.com/users/flaper87/following{/other_user}", "gists_url": "https://api.github.com/users/flaper87/gists{/gist_id}", "starred_url": "https://api.github.com/users/flaper87/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flaper87/subscriptions", "organizations_url": "https://api.github.com/users/flaper87/orgs", "repos_url": "https://api.github.com/users/flaper87/repos", "events_url": "https://api.github.com/users/flaper87/events{/privacy}", "received_events_url": "https://api.github.com/users/flaper87/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e644ca0d6a61f243c8a3cb9708bae6da216bc5de", "url": "https://api.github.com/repos/rust-lang/rust/commits/e644ca0d6a61f243c8a3cb9708bae6da216bc5de", "html_url": "https://github.com/rust-lang/rust/commit/e644ca0d6a61f243c8a3cb9708bae6da216bc5de"}], "stats": {"total": 64, "additions": 58, "deletions": 6}, "files": [{"sha": "e30d0a29938aa91090365b87c7cc8fd1c5bbd2c1", "filename": "src/librustc_typeck/coherence/unsafety.rs", "status": "modified", "additions": 17, "deletions": 6, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/39fe05f58c5d7d805580826ce202d9a801813cb2/src%2Flibrustc_typeck%2Fcoherence%2Funsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39fe05f58c5d7d805580826ce202d9a801813cb2/src%2Flibrustc_typeck%2Fcoherence%2Funsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Funsafety.rs?ref=39fe05f58c5d7d805580826ce202d9a801813cb2", "patch": "@@ -30,7 +30,7 @@ struct UnsafetyChecker<'cx, 'tcx:'cx> {\n impl<'cx, 'tcx,'v> visit::Visitor<'v> for UnsafetyChecker<'cx, 'tcx> {\n     fn visit_item(&mut self, item: &'v ast::Item) {\n         match item.node {\n-            ast::ItemImpl(unsafety, _, _, _, _, _) => {\n+            ast::ItemImpl(unsafety, polarity, _, _, _, _) => {\n                 match ty::impl_trait_ref(self.tcx, ast_util::local_def(item.id)) {\n                     None => {\n                         // Inherent impl.\n@@ -46,23 +46,34 @@ impl<'cx, 'tcx,'v> visit::Visitor<'v> for UnsafetyChecker<'cx, 'tcx> {\n \n                     Some(trait_ref) => {\n                         let trait_def = ty::lookup_trait_def(self.tcx, trait_ref.def_id);\n-                        match (trait_def.unsafety, unsafety) {\n-                            (ast::Unsafety::Normal, ast::Unsafety::Unsafe) => {\n+                        match (trait_def.unsafety, unsafety, polarity) {\n+                            (ast::Unsafety::Unsafe,\n+                             ast::Unsafety::Unsafe, ast::ImplPolarity::Negative) => {\n+                                self.tcx.sess.span_err(\n+                                    item.span,\n+                                    format!(\"negative implementations are not unsafe\").as_slice());\n+                            }\n+\n+                            (ast::Unsafety::Normal, ast::Unsafety::Unsafe, _) => {\n                                 self.tcx.sess.span_err(\n                                     item.span,\n                                     format!(\"implementing the trait `{}` is not unsafe\",\n                                             trait_ref.user_string(self.tcx)).as_slice());\n                             }\n \n-                            (ast::Unsafety::Unsafe, ast::Unsafety::Normal) => {\n+                            (ast::Unsafety::Unsafe,\n+                             ast::Unsafety::Normal, ast::ImplPolarity::Positive) => {\n                                 self.tcx.sess.span_err(\n                                     item.span,\n                                     format!(\"the trait `{}` requires an `unsafe impl` declaration\",\n                                             trait_ref.user_string(self.tcx)).as_slice());\n                             }\n \n-                            (ast::Unsafety::Unsafe, ast::Unsafety::Unsafe) |\n-                            (ast::Unsafety::Normal, ast::Unsafety::Normal) => {\n+                            (ast::Unsafety::Unsafe,\n+                             ast::Unsafety::Normal, ast::ImplPolarity::Negative) |\n+                            (ast::Unsafety::Unsafe,\n+                             ast::Unsafety::Unsafe, ast::ImplPolarity::Positive) |\n+                            (ast::Unsafety::Normal, ast::Unsafety::Normal, _) => {\n                                 /* OK */\n                             }\n                         }"}, {"sha": "3b335d586f39184c0922de71aa196fac8263e653", "filename": "src/test/compile-fail/coherence-negative-impls-safe.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/39fe05f58c5d7d805580826ce202d9a801813cb2/src%2Ftest%2Fcompile-fail%2Fcoherence-negative-impls-safe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39fe05f58c5d7d805580826ce202d9a801813cb2/src%2Ftest%2Fcompile-fail%2Fcoherence-negative-impls-safe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcoherence-negative-impls-safe.rs?ref=39fe05f58c5d7d805580826ce202d9a801813cb2", "patch": "@@ -0,0 +1,20 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(optin_builtin_traits)]\n+\n+use std::marker::Send;\n+\n+struct TestType;\n+\n+unsafe impl !Send for TestType {}\n+//~^ ERROR negative implementations are not unsafe\n+\n+fn main() {}"}, {"sha": "646da74992f36cef698c5b69d4204581063865aa", "filename": "src/test/run-pass/coherence-negative-impls-safe.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/39fe05f58c5d7d805580826ce202d9a801813cb2/src%2Ftest%2Frun-pass%2Fcoherence-negative-impls-safe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39fe05f58c5d7d805580826ce202d9a801813cb2/src%2Ftest%2Frun-pass%2Fcoherence-negative-impls-safe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcoherence-negative-impls-safe.rs?ref=39fe05f58c5d7d805580826ce202d9a801813cb2", "patch": "@@ -0,0 +1,21 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(optin_builtin_traits)]\n+\n+use std::marker::Send;\n+\n+struct TestType;\n+\n+unsafe impl Send for TestType {}\n+\n+impl !Send for TestType {}\n+\n+fn main() {}"}]}