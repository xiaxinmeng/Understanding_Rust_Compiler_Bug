{"sha": "ac30710ada112984c9cf79c4af39ad666d000171", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFjMzA3MTBhZGExMTI5ODRjOWNmNzljNGFmMzlhZDY2NmQwMDAxNzE=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-11-29T20:03:44Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-11-29T20:03:44Z"}, "message": "Merge #6665\n\n6665: Support self in reference search r=matklad a=Veykril\n\nThe approach here is simply checking the descendants of the function body for `PathExpr` then checking whether it only contains a single `self` `PathSegment`, this is to prevent us from picking up `self` tokens from local `UseTree`s.\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>", "tree": {"sha": "2a819761bd55b14238b2a2674805ce5a0ae86a0d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2a819761bd55b14238b2a2674805ce5a0ae86a0d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ac30710ada112984c9cf79c4af39ad666d000171", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfw/6gCRBK7hj4Ov3rIwAAdHIIAACdylBbWPlLaBT2wIKCnGp1\nv5WdwjQ3n6EMzIudWjhYPi6FJ1A+KLBz5yHj0Rq5hCXfdhhT5ZH/7HSahU4j8buS\nvUBUGuPIIIMezRrWqUXFWhii+4mEgxwCVGpAVxcUT4XqxMseyztwshHSnSpXHKBA\nCXqNPbaYHSGUoa2ujngEogPgfKkahLftIBnfCCkzwKOEV6Idod9HavX1rWrgcYkq\nWzpyvGQo/zvvxMUgfo9CDt9wZN8uJ8mOwWTQgn3tuTPQIdMJbQEvLURuR8S2yfeW\naiz83lxvspHJNdqcCPpxw/VFmtQE9RdfCPzM6/msOt9gSp0dTVqaohAWJg1PSio=\n=4SzW\n-----END PGP SIGNATURE-----\n", "payload": "tree 2a819761bd55b14238b2a2674805ce5a0ae86a0d\nparent 25ebcca224dc220c0439d9c82c6ef5ffa131c409\nparent de4ada22d484950a6f416f25c85566ea9d1830a9\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1606680224 +0000\ncommitter GitHub <noreply@github.com> 1606680224 +0000\n\nMerge #6665\n\n6665: Support self in reference search r=matklad a=Veykril\n\nThe approach here is simply checking the descendants of the function body for `PathExpr` then checking whether it only contains a single `self` `PathSegment`, this is to prevent us from picking up `self` tokens from local `UseTree`s.\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ac30710ada112984c9cf79c4af39ad666d000171", "html_url": "https://github.com/rust-lang/rust/commit/ac30710ada112984c9cf79c4af39ad666d000171", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ac30710ada112984c9cf79c4af39ad666d000171/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "25ebcca224dc220c0439d9c82c6ef5ffa131c409", "url": "https://api.github.com/repos/rust-lang/rust/commits/25ebcca224dc220c0439d9c82c6ef5ffa131c409", "html_url": "https://github.com/rust-lang/rust/commit/25ebcca224dc220c0439d9c82c6ef5ffa131c409"}, {"sha": "de4ada22d484950a6f416f25c85566ea9d1830a9", "url": "https://api.github.com/repos/rust-lang/rust/commits/de4ada22d484950a6f416f25c85566ea9d1830a9", "html_url": "https://github.com/rust-lang/rust/commit/de4ada22d484950a6f416f25c85566ea9d1830a9"}], "stats": {"total": 104, "additions": 103, "deletions": 1}, "files": [{"sha": "7395b81bd291f802a0c7ce2afcf2d3f462792e24", "filename": "crates/ide/src/references.rs", "status": "modified", "additions": 102, "deletions": 1, "changes": 103, "blob_url": "https://github.com/rust-lang/rust/blob/ac30710ada112984c9cf79c4af39ad666d000171/crates%2Fide%2Fsrc%2Freferences.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac30710ada112984c9cf79c4af39ad666d000171/crates%2Fide%2Fsrc%2Freferences.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Freferences.rs?ref=ac30710ada112984c9cf79c4af39ad666d000171", "patch": "@@ -21,7 +21,7 @@ use ide_db::{\n use syntax::{\n     algo::find_node_at_offset,\n     ast::{self, NameOwner},\n-    AstNode, SyntaxKind, SyntaxNode, TextRange, TokenAtOffset,\n+    match_ast, AstNode, SyntaxKind, SyntaxNode, TextRange, TokenAtOffset,\n };\n \n use crate::{display::TryToNav, FilePosition, FileRange, NavigationTarget, RangeInfo};\n@@ -89,6 +89,10 @@ pub(crate) fn find_all_refs(\n     let _p = profile::span(\"find_all_refs\");\n     let syntax = sema.parse(position.file_id).syntax().clone();\n \n+    if let Some(res) = try_find_self_references(&syntax, position) {\n+        return Some(res);\n+    }\n+\n     let (opt_name, search_kind) = if let Some(name) =\n         get_struct_def_name_for_struct_literal_search(&sema, &syntax, position)\n     {\n@@ -194,6 +198,77 @@ fn get_struct_def_name_for_struct_literal_search(\n     None\n }\n \n+fn try_find_self_references(\n+    syntax: &SyntaxNode,\n+    position: FilePosition,\n+) -> Option<RangeInfo<ReferenceSearchResult>> {\n+    let self_token =\n+        syntax.token_at_offset(position.offset).find(|t| t.kind() == SyntaxKind::SELF_KW)?;\n+    let parent = self_token.parent();\n+    match_ast! {\n+        match parent {\n+            ast::SelfParam(it) => (),\n+            ast::PathSegment(segment) => {\n+                segment.self_token()?;\n+                let path = segment.parent_path();\n+                if path.qualifier().is_some() && !ast::PathExpr::can_cast(path.syntax().parent()?.kind()) {\n+                    return None;\n+                }\n+            },\n+            _ => return None,\n+        }\n+    };\n+    let function = parent.ancestors().find_map(ast::Fn::cast)?;\n+    let self_param = function.param_list()?.self_param()?;\n+    let param_self_token = self_param.self_token()?;\n+\n+    let declaration = Declaration {\n+        nav: NavigationTarget {\n+            file_id: position.file_id,\n+            full_range: self_param.syntax().text_range(),\n+            focus_range: Some(param_self_token.text_range()),\n+            name: param_self_token.text().clone(),\n+            kind: param_self_token.kind(),\n+            container_name: None,\n+            description: None,\n+            docs: None,\n+        },\n+        kind: ReferenceKind::SelfKw,\n+        access: Some(if self_param.mut_token().is_some() {\n+            ReferenceAccess::Write\n+        } else {\n+            ReferenceAccess::Read\n+        }),\n+    };\n+    let references = function\n+        .body()\n+        .map(|body| {\n+            body.syntax()\n+                .descendants()\n+                .filter_map(ast::PathExpr::cast)\n+                .filter_map(|expr| {\n+                    let path = expr.path()?;\n+                    if path.qualifier().is_none() {\n+                        path.segment()?.self_token()\n+                    } else {\n+                        None\n+                    }\n+                })\n+                .map(|token| Reference {\n+                    file_range: FileRange { file_id: position.file_id, range: token.text_range() },\n+                    kind: ReferenceKind::SelfKw,\n+                    access: declaration.access, // FIXME: properly check access kind here instead of copying it from the declaration\n+                })\n+                .collect()\n+        })\n+        .unwrap_or_default();\n+\n+    Some(RangeInfo::new(\n+        param_self_token.text_range(),\n+        ReferenceSearchResult { declaration, references },\n+    ))\n+}\n+\n #[cfg(test)]\n mod tests {\n     use expect_test::{expect, Expect};\n@@ -762,6 +837,32 @@ fn f() -> m::En {\n         );\n     }\n \n+    #[test]\n+    fn test_find_self_refs() {\n+        check(\n+            r#\"\n+struct Foo { bar: i32 }\n+\n+impl Foo {\n+    fn foo(self) {\n+        let x = self<|>.bar;\n+        if true {\n+            let _ = match () {\n+                () => self,\n+            };\n+        }\n+    }\n+}\n+\"#,\n+            expect![[r#\"\n+                self SELF_KW FileId(0) 47..51 47..51 SelfKw Read\n+\n+                FileId(0) 71..75 SelfKw Read\n+                FileId(0) 152..156 SelfKw Read\n+            \"#]],\n+        );\n+    }\n+\n     fn check(ra_fixture: &str, expect: Expect) {\n         check_with_scope(ra_fixture, None, expect)\n     }"}, {"sha": "607185ca97f4a1dcbfda06308cec886bb611fc62", "filename": "crates/ide_db/src/search.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ac30710ada112984c9cf79c4af39ad666d000171/crates%2Fide_db%2Fsrc%2Fsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac30710ada112984c9cf79c4af39ad666d000171/crates%2Fide_db%2Fsrc%2Fsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fsearch.rs?ref=ac30710ada112984c9cf79c4af39ad666d000171", "patch": "@@ -31,6 +31,7 @@ pub enum ReferenceKind {\n     FieldShorthandForLocal,\n     StructLiteral,\n     RecordFieldExprOrPat,\n+    SelfKw,\n     Other,\n }\n "}]}