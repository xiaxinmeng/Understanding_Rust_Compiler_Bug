{"sha": "c34472b77084c9f76f872871aeab121daf81fb99", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMzNDQ3MmI3NzA4NGM5Zjc2Zjg3Mjg3MWFlYWIxMjFkYWY4MWZiOTk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-11-08T04:44:23Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-11-08T04:44:23Z"}, "message": "Auto merge of #66208 - JohnTitor:rollup-2umgjer, r=JohnTitor\n\nRollup of 8 pull requests\n\nSuccessful merges:\n\n - #65554 (Enhance the documentation of BufReader for potential data loss)\n - #65580 (Add `MaybeUninit` methods `uninit_array`, `slice_get_ref`, `slice_get_mut`)\n - #66049 (consistent handling of missing sysroot spans)\n - #66056 (rustc_metadata: Some reorganization of the module structure)\n - #66123 (No more hidden elements)\n - #66157 (Improve math log documentation examples)\n - #66165 (Ignore these tests ,since the called commands doesn't exist in VxWorks)\n - #66190 (rustc_target: inline abi::FloatTy into abi::Primitive.)\n\nFailed merges:\n\n - #66188 (`MethodSig` -> `FnSig` & Use it in `ItemKind::Fn`)\n\nr? @ghost", "tree": {"sha": "ed6d5a1b7638907fcdcccb01d3a949aace342b41", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ed6d5a1b7638907fcdcccb01d3a949aace342b41"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c34472b77084c9f76f872871aeab121daf81fb99", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c34472b77084c9f76f872871aeab121daf81fb99", "html_url": "https://github.com/rust-lang/rust/commit/c34472b77084c9f76f872871aeab121daf81fb99", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c34472b77084c9f76f872871aeab121daf81fb99/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d2574403b31508be9cfed468e352467043d2354d", "url": "https://api.github.com/repos/rust-lang/rust/commits/d2574403b31508be9cfed468e352467043d2354d", "html_url": "https://github.com/rust-lang/rust/commit/d2574403b31508be9cfed468e352467043d2354d"}, {"sha": "1969f415fae4b4fc107d0363c998c13ea44ef548", "url": "https://api.github.com/repos/rust-lang/rust/commits/1969f415fae4b4fc107d0363c998c13ea44ef548", "html_url": "https://github.com/rust-lang/rust/commit/1969f415fae4b4fc107d0363c998c13ea44ef548"}], "stats": {"total": 807, "additions": 459, "deletions": 348}, "files": [{"sha": "39c24fb10e590d7dc00b3663d33c5ea270909d8d", "filename": "src/etc/generate-deriving-span-tests.py", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c34472b77084c9f76f872871aeab121daf81fb99/src%2Fetc%2Fgenerate-deriving-span-tests.py", "raw_url": "https://github.com/rust-lang/rust/raw/c34472b77084c9f76f872871aeab121daf81fb99/src%2Fetc%2Fgenerate-deriving-span-tests.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fgenerate-deriving-span-tests.py?ref=c34472b77084c9f76f872871aeab121daf81fb99", "patch": "@@ -14,8 +14,7 @@\n     os.path.join(os.path.dirname(__file__), '../test/ui/derives/'))\n \n TEMPLATE = \"\"\"\\\n-// ignore-x86\n-// ^ due to stderr output differences\n+// ignore-x86 FIXME: missing sysroot spans (#53081)\n // This file was auto-generated using 'src/etc/generate-deriving-span-tests.py'\n \n {error_deriving}"}, {"sha": "d35a5ce57fe9f8f7bca5fc63d161c81c4d81e704", "filename": "src/libcore/mem/maybe_uninit.rs", "status": "modified", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/c34472b77084c9f76f872871aeab121daf81fb99/src%2Flibcore%2Fmem%2Fmaybe_uninit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c34472b77084c9f76f872871aeab121daf81fb99/src%2Flibcore%2Fmem%2Fmaybe_uninit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmem%2Fmaybe_uninit.rs?ref=c34472b77084c9f76f872871aeab121daf81fb99", "patch": "@@ -260,6 +260,43 @@ impl<T> MaybeUninit<T> {\n         MaybeUninit { uninit: () }\n     }\n \n+    /// Create a new array of `MaybeUninit<T>` items, in an uninitialized state.\n+    ///\n+    /// Note: in a future Rust version this method may become unnecessary\n+    /// when array literal syntax allows\n+    /// [repeating const expressions](https://github.com/rust-lang/rust/issues/49147).\n+    /// The example below could then use `let mut buf = [MaybeUninit::<u8>::uninit(); 32];`.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```no_run\n+    /// #![feature(maybe_uninit_uninit_array, maybe_uninit_extra, maybe_uninit_slice_assume_init)]\n+    ///\n+    /// use std::mem::MaybeUninit;\n+    ///\n+    /// extern \"C\" {\n+    ///     fn read_into_buffer(ptr: *mut u8, max_len: usize) -> usize;\n+    /// }\n+    ///\n+    /// /// Returns a (possibly smaller) slice of data that was actually read\n+    /// fn read(buf: &mut [MaybeUninit<u8>]) -> &[u8] {\n+    ///     unsafe {\n+    ///         let len = read_into_buffer(buf.as_mut_ptr() as *mut u8, buf.len());\n+    ///         MaybeUninit::slice_get_ref(&buf[..len])\n+    ///     }\n+    /// }\n+    ///\n+    /// let mut buf: [MaybeUninit<u8>; 32] = MaybeUninit::uninit_array();\n+    /// let data = read(&mut buf);\n+    /// ```\n+    #[unstable(feature = \"maybe_uninit_uninit_array\", issue = \"0\")]\n+    #[inline(always)]\n+    pub fn uninit_array<const LEN: usize>() -> [Self; LEN] {\n+        unsafe {\n+            MaybeUninit::<[MaybeUninit<T>; LEN]>::uninit().assume_init()\n+        }\n+    }\n+\n     /// A promotable constant, equivalent to `uninit()`.\n     #[unstable(feature = \"internal_uninit_const\", issue = \"0\",\n         reason = \"hack to work around promotability\")]\n@@ -692,6 +729,32 @@ impl<T> MaybeUninit<T> {\n         &mut *self.value\n     }\n \n+    /// Assuming all the elements are initialized, get a slice to them.\n+    ///\n+    /// # Safety\n+    ///\n+    /// It is up to the caller to guarantee that the `MaybeUninit<T>` elements\n+    /// really are in an initialized state.\n+    /// Calling this when the content is not yet fully initialized causes undefined behavior.\n+    #[unstable(feature = \"maybe_uninit_slice_assume_init\", issue = \"0\")]\n+    #[inline(always)]\n+    pub unsafe fn slice_get_ref(slice: &[Self]) -> &[T] {\n+        &*(slice as *const [Self] as *const [T])\n+    }\n+\n+    /// Assuming all the elements are initialized, get a mutable slice to them.\n+    ///\n+    /// # Safety\n+    ///\n+    /// It is up to the caller to guarantee that the `MaybeUninit<T>` elements\n+    /// really are in an initialized state.\n+    /// Calling this when the content is not yet fully initialized causes undefined behavior.\n+    #[unstable(feature = \"maybe_uninit_slice_assume_init\", issue = \"0\")]\n+    #[inline(always)]\n+    pub unsafe fn slice_get_mut(slice: &mut [Self]) -> &mut [T] {\n+        &mut *(slice as *mut [Self] as *mut [T])\n+    }\n+\n     /// Gets a pointer to the first element of the array.\n     #[unstable(feature = \"maybe_uninit_slice\", issue = \"63569\")]\n     #[inline(always)]"}, {"sha": "e8ef46d7abe1146184abc4bb6579d21db6cbd27d", "filename": "src/librustc/ich/impls_syntax.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c34472b77084c9f76f872871aeab121daf81fb99/src%2Flibrustc%2Fich%2Fimpls_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c34472b77084c9f76f872871aeab121daf81fb99/src%2Flibrustc%2Fich%2Fimpls_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_syntax.rs?ref=c34472b77084c9f76f872871aeab121daf81fb99", "patch": "@@ -162,7 +162,6 @@ impl_stable_hash_for_spanned!(::syntax::ast::LitKind);\n impl_stable_hash_for!(enum ::syntax::ast::IntTy { Isize, I8, I16, I32, I64, I128 });\n impl_stable_hash_for!(enum ::syntax::ast::UintTy { Usize, U8, U16, U32, U64, U128 });\n impl_stable_hash_for!(enum ::syntax::ast::FloatTy { F32, F64 });\n-impl_stable_hash_for!(enum ::rustc_target::abi::FloatTy { F32, F64 });\n impl_stable_hash_for!(enum ::syntax::ast::Unsafety { Unsafe, Normal });\n impl_stable_hash_for!(enum ::syntax::ast::Constness { Const, NotConst });\n impl_stable_hash_for!(enum ::syntax::ast::Defaultness { Default, Final });"}, {"sha": "4bf500555f14b50d6980821299c03435da70fb4d", "filename": "src/librustc/ty/layout.rs", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/c34472b77084c9f76f872871aeab121daf81fb99/src%2Flibrustc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c34472b77084c9f76f872871aeab121daf81fb99/src%2Flibrustc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Flayout.rs?ref=c34472b77084c9f76f872871aeab121daf81fb99", "patch": "@@ -132,8 +132,8 @@ impl PrimitiveExt for Primitive {\n     fn to_ty<'tcx>(&self, tcx: TyCtxt<'tcx>) -> Ty<'tcx> {\n         match *self {\n             Int(i, signed) => i.to_ty(tcx, signed),\n-            Float(FloatTy::F32) => tcx.types.f32,\n-            Float(FloatTy::F64) => tcx.types.f64,\n+            F32 => tcx.types.f32,\n+            F64 => tcx.types.f64,\n             Pointer => tcx.mk_mut_ptr(tcx.mk_unit()),\n         }\n     }\n@@ -144,7 +144,7 @@ impl PrimitiveExt for Primitive {\n         match *self {\n             Int(i, signed) => i.to_ty(tcx, signed),\n             Pointer => tcx.types.usize,\n-            Float(..) => bug!(\"floats do not have an int type\"),\n+            F32 | F64 => bug!(\"floats do not have an int type\"),\n         }\n     }\n }\n@@ -538,10 +538,10 @@ impl<'tcx> LayoutCx<'tcx, TyCtxt<'tcx>> {\n             ty::Uint(ity) => {\n                 scalar(Int(Integer::from_attr(dl, attr::UnsignedInt(ity)), false))\n             }\n-            ty::Float(fty) => scalar(Float(match fty {\n-                ast::FloatTy::F32 => FloatTy::F32,\n-                ast::FloatTy::F64 => FloatTy::F64,\n-            })),\n+            ty::Float(fty) => scalar(match fty {\n+                ast::FloatTy::F32 => F32,\n+                ast::FloatTy::F64 => F64,\n+            }),\n             ty::FnPtr(_) => {\n                 let mut ptr = scalar_unit(Pointer);\n                 ptr.valid_range = 1..=*ptr.valid_range.end();\n@@ -2457,7 +2457,8 @@ impl_stable_hash_for!(enum crate::ty::layout::Integer {\n \n impl_stable_hash_for!(enum crate::ty::layout::Primitive {\n     Int(integer, signed),\n-    Float(fty),\n+    F32,\n+    F64,\n     Pointer\n });\n "}, {"sha": "f1bf45111315213892301bddb3665cd0ccfcb2d5", "filename": "src/librustc_codegen_llvm/debuginfo/metadata.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c34472b77084c9f76f872871aeab121daf81fb99/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c34472b77084c9f76f872871aeab121daf81fb99/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs?ref=c34472b77084c9f76f872871aeab121daf81fb99", "patch": "@@ -1904,8 +1904,8 @@ fn prepare_enum_metadata(\n \n             let discr_type = match discr.value {\n                 layout::Int(t, _) => t,\n-                layout::Float(layout::FloatTy::F32) => Integer::I32,\n-                layout::Float(layout::FloatTy::F64) => Integer::I64,\n+                layout::F32 => Integer::I32,\n+                layout::F64 => Integer::I64,\n                 layout::Pointer => cx.data_layout().ptr_sized_integer(),\n             }.to_ty(cx.tcx, false);\n "}, {"sha": "6935e09054d0b3ba9ade5cc30ccbf8160e649e3c", "filename": "src/librustc_codegen_llvm/intrinsic.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c34472b77084c9f76f872871aeab121daf81fb99/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c34472b77084c9f76f872871aeab121daf81fb99/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs?ref=c34472b77084c9f76f872871aeab121daf81fb99", "patch": "@@ -18,7 +18,7 @@ use rustc::ty::layout::{self, LayoutOf, HasTyCtxt, Primitive};\n use rustc::mir::interpret::GlobalId;\n use rustc_codegen_ssa::common::{IntPredicate, TypeKind};\n use rustc::hir;\n-use rustc_target::abi::{FloatTy, HasDataLayout};\n+use rustc_target::abi::HasDataLayout;\n use syntax::ast;\n \n use rustc_codegen_ssa::common::span_invalid_monomorphization_error;\n@@ -163,12 +163,12 @@ impl IntrinsicCallMethods<'tcx> for Builder<'a, 'll, 'tcx> {\n                                     emit_va_arg(self, args[0], ret_ty)\n                                 }\n                             }\n-                            Primitive::Float(FloatTy::F64) |\n+                            Primitive::F64 |\n                             Primitive::Pointer => {\n                                 emit_va_arg(self, args[0], ret_ty)\n                             }\n                             // `va_arg` should never be used with the return type f32.\n-                            Primitive::Float(FloatTy::F32) => {\n+                            Primitive::F32 => {\n                                 bug!(\"the va_arg intrinsic does not work with `f32`\")\n                             }\n                         }"}, {"sha": "c21e62e7562e3ae50c4fa18d22823a273b59575c", "filename": "src/librustc_codegen_llvm/type_of.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c34472b77084c9f76f872871aeab121daf81fb99/src%2Flibrustc_codegen_llvm%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c34472b77084c9f76f872871aeab121daf81fb99/src%2Flibrustc_codegen_llvm%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Ftype_of.rs?ref=c34472b77084c9f76f872871aeab121daf81fb99", "patch": "@@ -3,7 +3,7 @@ use crate::common::*;\n use crate::type_::Type;\n use rustc::ty::{self, Ty, TypeFoldable};\n use rustc::ty::layout::{self, Align, LayoutOf, FnAbiExt, PointeeInfo, Size, TyLayout};\n-use rustc_target::abi::{FloatTy, TyLayoutMethods};\n+use rustc_target::abi::TyLayoutMethods;\n use rustc::ty::print::obsolete::DefPathBasedNames;\n use rustc_codegen_ssa::traits::*;\n \n@@ -300,8 +300,8 @@ impl<'tcx> LayoutLlvmExt<'tcx> for TyLayout<'tcx> {\n                                scalar: &layout::Scalar, offset: Size) -> &'a Type {\n         match scalar.value {\n             layout::Int(i, _) => cx.type_from_integer( i),\n-            layout::Float(FloatTy::F32) => cx.type_f32(),\n-            layout::Float(FloatTy::F64) => cx.type_f64(),\n+            layout::F32 => cx.type_f32(),\n+            layout::F64 => cx.type_f64(),\n             layout::Pointer => {\n                 // If we know the alignment, pick something better than i8.\n                 let pointee = if let Some(pointee) = self.pointee_info_at(cx, offset) {"}, {"sha": "05e3ee3322e59d031b96bb805fcde3a50c2cbbcd", "filename": "src/librustc_metadata/creader.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c34472b77084c9f76f872871aeab121daf81fb99/src%2Flibrustc_metadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c34472b77084c9f76f872871aeab121daf81fb99/src%2Flibrustc_metadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcreader.rs?ref=c34472b77084c9f76f872871aeab121daf81fb99", "patch": "@@ -2,7 +2,7 @@\n \n use crate::cstore::{self, CStore, MetadataBlob};\n use crate::locator::{self, CratePaths};\n-use crate::schema::{CrateRoot, CrateDep};\n+use crate::rmeta::{CrateRoot, CrateDep};\n use rustc_data_structures::sync::{Lock, Once, AtomicCell};\n \n use rustc::hir::def_id::CrateNum;"}, {"sha": "c6c8ee575a98abdda0849974ef1cb4227c89eb45", "filename": "src/librustc_metadata/cstore.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c34472b77084c9f76f872871aeab121daf81fb99/src%2Flibrustc_metadata%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c34472b77084c9f76f872871aeab121daf81fb99/src%2Flibrustc_metadata%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore.rs?ref=c34472b77084c9f76f872871aeab121daf81fb99", "patch": "@@ -1,7 +1,7 @@\n // The crate store - a central repo for information collected about external\n // crates and libraries\n \n-use crate::schema;\n+use crate::rmeta;\n use rustc::dep_graph::DepNodeIndex;\n use rustc::hir::def_id::{CrateNum, DefIndex};\n use rustc::hir::map::definitions::DefPathTable;\n@@ -17,7 +17,7 @@ use syntax_expand::base::SyntaxExtension;\n use syntax_pos;\n use proc_macro::bridge::client::ProcMacro;\n \n-pub use crate::cstore_impl::{provide, provide_extern};\n+pub use crate::rmeta::{provide, provide_extern};\n \n // A map from external crate numbers (as decoded from some crate file) to\n // local crate numbers (as generated during this session). Each external\n@@ -49,7 +49,7 @@ crate struct CrateMetadata {\n     /// lifetime is only used behind `Lazy`, and therefore acts like an\n     /// universal (`for<'tcx>`), that is paired up with whichever `TyCtxt`\n     /// is being used to decode those values.\n-    crate root: schema::CrateRoot<'static>,\n+    crate root: rmeta::CrateRoot<'static>,\n     /// For each definition in this crate, we encode a key. When the\n     /// crate is loaded, we read all the keys and put them in this\n     /// hashmap, which gives the reverse mapping. This allows us to\n@@ -59,7 +59,7 @@ crate struct CrateMetadata {\n     /// Trait impl data.\n     /// FIXME: Used only from queries and can use query cache,\n     /// so pre-decoding can probably be avoided.\n-    crate trait_impls: FxHashMap<(u32, DefIndex), schema::Lazy<[DefIndex]>>,\n+    crate trait_impls: FxHashMap<(u32, DefIndex), rmeta::Lazy<[DefIndex]>>,\n     /// Proc macro descriptions for this crate, if it's a proc macro crate.\n     crate raw_proc_macros: Option<&'static [ProcMacro]>,\n     /// Source maps for code from the crate."}, {"sha": "ac9d78e9a515c199f5f3477a99e9a48d329b2b82", "filename": "src/librustc_metadata/lib.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c34472b77084c9f76f872871aeab121daf81fb99/src%2Flibrustc_metadata%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c34472b77084c9f76f872871aeab121daf81fb99/src%2Flibrustc_metadata%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Flib.rs?ref=c34472b77084c9f76f872871aeab121daf81fb99", "patch": "@@ -26,15 +26,11 @@ extern crate rustc_data_structures;\n \n pub mod error_codes;\n \n-mod encoder;\n-mod decoder;\n mod dependency_format;\n-mod cstore_impl;\n mod foreign_modules;\n mod link_args;\n mod native_libs;\n-mod schema;\n-mod table;\n+mod rmeta;\n \n pub mod creader;\n pub mod cstore;"}, {"sha": "88d7595b063da20985a6fd004e96fb73552cafb9", "filename": "src/librustc_metadata/locator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c34472b77084c9f76f872871aeab121daf81fb99/src%2Flibrustc_metadata%2Flocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c34472b77084c9f76f872871aeab121daf81fb99/src%2Flibrustc_metadata%2Flocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Flocator.rs?ref=c34472b77084c9f76f872871aeab121daf81fb99", "patch": "@@ -214,7 +214,7 @@\n \n use crate::cstore::MetadataBlob;\n use crate::creader::Library;\n-use crate::schema::{METADATA_HEADER, rustc_version};\n+use crate::rmeta::{METADATA_HEADER, rustc_version};\n \n use rustc_data_structures::fx::FxHashSet;\n use rustc_data_structures::svh::Svh;"}, {"sha": "40ec04537b0e66b6d17bdf246d4a42f81bea5722", "filename": "src/librustc_metadata/rmeta/decoder.rs", "status": "renamed", "additions": 60, "deletions": 56, "changes": 116, "blob_url": "https://github.com/rust-lang/rust/blob/c34472b77084c9f76f872871aeab121daf81fb99/src%2Flibrustc_metadata%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c34472b77084c9f76f872871aeab121daf81fb99/src%2Flibrustc_metadata%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Frmeta%2Fdecoder.rs?ref=c34472b77084c9f76f872871aeab121daf81fb99", "patch": "@@ -1,8 +1,8 @@\n // Decoding metadata from a single crate's metadata\n \n use crate::cstore::{self, CrateMetadata, MetadataBlob};\n-use crate::schema::*;\n-use crate::table::{FixedSizeEncoding, PerDefTable};\n+use crate::rmeta::*;\n+use crate::rmeta::table::{FixedSizeEncoding, PerDefTable};\n \n use rustc_index::vec::IndexVec;\n use rustc_data_structures::sync::Lrc;\n@@ -40,6 +40,10 @@ use syntax_pos::symbol::{Symbol, sym};\n use log::debug;\n use proc_macro::bridge::client::ProcMacro;\n \n+pub use cstore_impl::{provide, provide_extern};\n+\n+mod cstore_impl;\n+\n crate struct DecodeContext<'a, 'tcx> {\n     opaque: opaque::Decoder<'a>,\n     cdata: Option<&'a CrateMetadata>,\n@@ -464,7 +468,7 @@ impl<'tcx> EntryKind<'tcx> {\n }\n \n impl<'a, 'tcx> CrateMetadata {\n-    crate fn is_proc_macro_crate(&self) -> bool {\n+    fn is_proc_macro_crate(&self) -> bool {\n         self.root.proc_macro_decls_static.is_some()\n     }\n \n@@ -507,7 +511,7 @@ impl<'a, 'tcx> CrateMetadata {\n         &self.raw_proc_macros.unwrap()[pos]\n     }\n \n-    crate fn item_name(&self, item_index: DefIndex) -> Symbol {\n+    fn item_name(&self, item_index: DefIndex) -> Symbol {\n         if !self.is_proc_macro(item_index) {\n             self.def_key(item_index)\n                 .disambiguated_data\n@@ -519,7 +523,7 @@ impl<'a, 'tcx> CrateMetadata {\n         }\n     }\n \n-    crate fn def_kind(&self, index: DefIndex) -> Option<DefKind> {\n+    fn def_kind(&self, index: DefIndex) -> Option<DefKind> {\n         if !self.is_proc_macro(index) {\n             self.kind(index).def_kind()\n         } else {\n@@ -529,11 +533,11 @@ impl<'a, 'tcx> CrateMetadata {\n         }\n     }\n \n-    crate fn get_span(&self, index: DefIndex, sess: &Session) -> Span {\n+    fn get_span(&self, index: DefIndex, sess: &Session) -> Span {\n         self.root.per_def.span.get(self, index).unwrap().decode((self, sess))\n     }\n \n-    crate fn load_proc_macro(&self, id: DefIndex, sess: &Session) -> SyntaxExtension {\n+    fn load_proc_macro(&self, id: DefIndex, sess: &Session) -> SyntaxExtension {\n         let (name, kind, helper_attrs) = match *self.raw_proc_macro(id) {\n             ProcMacro::CustomDerive { trait_name, attributes, client } => {\n                 let helper_attrs =\n@@ -563,7 +567,7 @@ impl<'a, 'tcx> CrateMetadata {\n         )\n     }\n \n-    crate fn get_trait_def(&self, item_id: DefIndex, sess: &Session) -> ty::TraitDef {\n+    fn get_trait_def(&self, item_id: DefIndex, sess: &Session) -> ty::TraitDef {\n         match self.kind(item_id) {\n             EntryKind::Trait(data) => {\n                 let data = data.decode((self, sess));\n@@ -633,7 +637,7 @@ impl<'a, 'tcx> CrateMetadata {\n         )\n     }\n \n-    crate fn get_adt_def(&self, item_id: DefIndex, tcx: TyCtxt<'tcx>) -> &'tcx ty::AdtDef {\n+    fn get_adt_def(&self, item_id: DefIndex, tcx: TyCtxt<'tcx>) -> &'tcx ty::AdtDef {\n         let kind = self.kind(item_id);\n         let did = self.local_def_id(item_id);\n \n@@ -658,15 +662,15 @@ impl<'a, 'tcx> CrateMetadata {\n         tcx.alloc_adt_def(did, adt_kind, variants, repr)\n     }\n \n-    crate fn get_explicit_predicates(\n+    fn get_explicit_predicates(\n         &self,\n         item_id: DefIndex,\n         tcx: TyCtxt<'tcx>,\n     ) -> ty::GenericPredicates<'tcx> {\n         self.root.per_def.explicit_predicates.get(self, item_id).unwrap().decode((self, tcx))\n     }\n \n-    crate fn get_inferred_outlives(\n+    fn get_inferred_outlives(\n         &self,\n         item_id: DefIndex,\n         tcx: TyCtxt<'tcx>,\n@@ -676,36 +680,36 @@ impl<'a, 'tcx> CrateMetadata {\n         }).unwrap_or_default()\n     }\n \n-    crate fn get_super_predicates(\n+    fn get_super_predicates(\n         &self,\n         item_id: DefIndex,\n         tcx: TyCtxt<'tcx>,\n     ) -> ty::GenericPredicates<'tcx> {\n         self.root.per_def.super_predicates.get(self, item_id).unwrap().decode((self, tcx))\n     }\n \n-    crate fn get_generics(&self, item_id: DefIndex, sess: &Session) -> ty::Generics {\n+    fn get_generics(&self, item_id: DefIndex, sess: &Session) -> ty::Generics {\n         self.root.per_def.generics.get(self, item_id).unwrap().decode((self, sess))\n     }\n \n-    crate fn get_type(&self, id: DefIndex, tcx: TyCtxt<'tcx>) -> Ty<'tcx> {\n+    fn get_type(&self, id: DefIndex, tcx: TyCtxt<'tcx>) -> Ty<'tcx> {\n         self.root.per_def.ty.get(self, id).unwrap().decode((self, tcx))\n     }\n \n-    crate fn get_stability(&self, id: DefIndex) -> Option<attr::Stability> {\n+    fn get_stability(&self, id: DefIndex) -> Option<attr::Stability> {\n         match self.is_proc_macro(id) {\n             true => self.root.proc_macro_stability.clone(),\n             false => self.root.per_def.stability.get(self, id).map(|stab| stab.decode(self)),\n         }\n     }\n \n-    crate fn get_deprecation(&self, id: DefIndex) -> Option<attr::Deprecation> {\n+    fn get_deprecation(&self, id: DefIndex) -> Option<attr::Deprecation> {\n         self.root.per_def.deprecation.get(self, id)\n             .filter(|_| !self.is_proc_macro(id))\n             .map(|depr| depr.decode(self))\n     }\n \n-    crate fn get_visibility(&self, id: DefIndex) -> ty::Visibility {\n+    fn get_visibility(&self, id: DefIndex) -> ty::Visibility {\n         match self.is_proc_macro(id) {\n             true => ty::Visibility::Public,\n             false => self.root.per_def.visibility.get(self, id).unwrap().decode(self),\n@@ -719,31 +723,31 @@ impl<'a, 'tcx> CrateMetadata {\n         }\n     }\n \n-    crate fn get_parent_impl(&self, id: DefIndex) -> Option<DefId> {\n+    fn get_parent_impl(&self, id: DefIndex) -> Option<DefId> {\n         self.get_impl_data(id).parent_impl\n     }\n \n-    crate fn get_impl_polarity(&self, id: DefIndex) -> ty::ImplPolarity {\n+    fn get_impl_polarity(&self, id: DefIndex) -> ty::ImplPolarity {\n         self.get_impl_data(id).polarity\n     }\n \n-    crate fn get_impl_defaultness(&self, id: DefIndex) -> hir::Defaultness {\n+    fn get_impl_defaultness(&self, id: DefIndex) -> hir::Defaultness {\n         self.get_impl_data(id).defaultness\n     }\n \n-    crate fn get_coerce_unsized_info(\n+    fn get_coerce_unsized_info(\n         &self,\n         id: DefIndex,\n     ) -> Option<ty::adjustment::CoerceUnsizedInfo> {\n         self.get_impl_data(id).coerce_unsized_info\n     }\n \n-    crate fn get_impl_trait(&self, id: DefIndex, tcx: TyCtxt<'tcx>) -> Option<ty::TraitRef<'tcx>> {\n+    fn get_impl_trait(&self, id: DefIndex, tcx: TyCtxt<'tcx>) -> Option<ty::TraitRef<'tcx>> {\n         self.root.per_def.impl_trait_ref.get(self, id).map(|tr| tr.decode((self, tcx)))\n     }\n \n     /// Iterates over all the stability attributes in the given crate.\n-    crate fn get_lib_features(&self, tcx: TyCtxt<'tcx>) -> &'tcx [(ast::Name, Option<ast::Name>)] {\n+    fn get_lib_features(&self, tcx: TyCtxt<'tcx>) -> &'tcx [(ast::Name, Option<ast::Name>)] {\n         // FIXME: For a proc macro crate, not sure whether we should return the \"host\"\n         // features or an empty Vec. Both don't cause ICEs.\n         tcx.arena.alloc_from_iter(self.root\n@@ -752,7 +756,7 @@ impl<'a, 'tcx> CrateMetadata {\n     }\n \n     /// Iterates over the language items in the given crate.\n-    crate fn get_lang_items(&self, tcx: TyCtxt<'tcx>) -> &'tcx [(DefId, usize)] {\n+    fn get_lang_items(&self, tcx: TyCtxt<'tcx>) -> &'tcx [(DefId, usize)] {\n         if self.is_proc_macro_crate() {\n             // Proc macro crates do not export any lang-items to the target.\n             &[]\n@@ -765,7 +769,7 @@ impl<'a, 'tcx> CrateMetadata {\n     }\n \n     /// Iterates over the diagnostic items in the given crate.\n-    crate fn get_diagnostic_items(\n+    fn get_diagnostic_items(\n         &self,\n         tcx: TyCtxt<'tcx>,\n     ) -> &'tcx FxHashMap<Symbol, DefId> {\n@@ -782,7 +786,7 @@ impl<'a, 'tcx> CrateMetadata {\n     }\n \n     /// Iterates over each child of the given item.\n-    crate fn each_child_of_item<F>(&self, id: DefIndex, mut callback: F, sess: &Session)\n+    fn each_child_of_item<F>(&self, id: DefIndex, mut callback: F, sess: &Session)\n         where F: FnMut(def::Export<hir::HirId>)\n     {\n         if let Some(proc_macros_ids) = self.root.proc_macro_data.map(|d| d.decode(self)) {\n@@ -921,12 +925,12 @@ impl<'a, 'tcx> CrateMetadata {\n         }\n     }\n \n-    crate fn is_item_mir_available(&self, id: DefIndex) -> bool {\n+    fn is_item_mir_available(&self, id: DefIndex) -> bool {\n         !self.is_proc_macro(id) &&\n             self.root.per_def.mir.get(self, id).is_some()\n     }\n \n-    crate fn get_optimized_mir(&self, tcx: TyCtxt<'tcx>, id: DefIndex) -> Body<'tcx> {\n+    fn get_optimized_mir(&self, tcx: TyCtxt<'tcx>, id: DefIndex) -> Body<'tcx> {\n         self.root.per_def.mir.get(self, id)\n             .filter(|_| !self.is_proc_macro(id))\n             .unwrap_or_else(|| {\n@@ -935,7 +939,7 @@ impl<'a, 'tcx> CrateMetadata {\n             .decode((self, tcx))\n     }\n \n-    crate fn get_promoted_mir(\n+    fn get_promoted_mir(\n         &self,\n         tcx: TyCtxt<'tcx>,\n         id: DefIndex,\n@@ -948,7 +952,7 @@ impl<'a, 'tcx> CrateMetadata {\n             .decode((self, tcx))\n     }\n \n-    crate fn mir_const_qualif(&self, id: DefIndex) -> u8 {\n+    fn mir_const_qualif(&self, id: DefIndex) -> u8 {\n         match self.kind(id) {\n             EntryKind::Const(qualif, _) |\n             EntryKind::AssocConst(AssocContainer::ImplDefault, qualif, _) |\n@@ -959,7 +963,7 @@ impl<'a, 'tcx> CrateMetadata {\n         }\n     }\n \n-    crate fn get_associated_item(&self, id: DefIndex) -> ty::AssocItem {\n+    fn get_associated_item(&self, id: DefIndex) -> ty::AssocItem {\n         let def_key = self.def_key(id);\n         let parent = self.local_def_id(def_key.parent.unwrap());\n         let name = def_key.disambiguated_data.data.get_opt_name().unwrap();\n@@ -992,12 +996,12 @@ impl<'a, 'tcx> CrateMetadata {\n         }\n     }\n \n-    crate fn get_item_variances(&self, id: DefIndex) -> Vec<ty::Variance> {\n+    fn get_item_variances(&self, id: DefIndex) -> Vec<ty::Variance> {\n         self.root.per_def.variances.get(self, id).unwrap_or(Lazy::empty())\n             .decode(self).collect()\n     }\n \n-    crate fn get_ctor_kind(&self, node_id: DefIndex) -> CtorKind {\n+    fn get_ctor_kind(&self, node_id: DefIndex) -> CtorKind {\n         match self.kind(node_id) {\n             EntryKind::Struct(data, _) |\n             EntryKind::Union(data, _) |\n@@ -1006,7 +1010,7 @@ impl<'a, 'tcx> CrateMetadata {\n         }\n     }\n \n-    crate fn get_ctor_def_id(&self, node_id: DefIndex) -> Option<DefId> {\n+    fn get_ctor_def_id(&self, node_id: DefIndex) -> Option<DefId> {\n         match self.kind(node_id) {\n             EntryKind::Struct(data, _) => {\n                 data.decode(self).ctor.map(|index| self.local_def_id(index))\n@@ -1018,7 +1022,7 @@ impl<'a, 'tcx> CrateMetadata {\n         }\n     }\n \n-    crate fn get_item_attrs(&self, node_id: DefIndex, sess: &Session) -> Lrc<[ast::Attribute]> {\n+    fn get_item_attrs(&self, node_id: DefIndex, sess: &Session) -> Lrc<[ast::Attribute]> {\n         // The attributes for a tuple struct/variant are attached to the definition, not the ctor;\n         // we assume that someone passing in a tuple struct ctor is actually wanting to\n         // look at the definition\n@@ -1034,7 +1038,7 @@ impl<'a, 'tcx> CrateMetadata {\n             .collect::<Vec<_>>())\n     }\n \n-    crate fn get_struct_field_names(\n+    fn get_struct_field_names(\n         &self,\n         id: DefIndex,\n         sess: &Session,\n@@ -1060,7 +1064,7 @@ impl<'a, 'tcx> CrateMetadata {\n         None\n     }\n \n-    crate fn get_inherent_implementations_for_type(\n+    fn get_inherent_implementations_for_type(\n         &self,\n         tcx: TyCtxt<'tcx>,\n         id: DefIndex,\n@@ -1072,7 +1076,7 @@ impl<'a, 'tcx> CrateMetadata {\n         )\n     }\n \n-    crate fn get_implementations_for_trait(\n+    fn get_implementations_for_trait(\n         &self,\n         tcx: TyCtxt<'tcx>,\n         filter: Option<DefId>,\n@@ -1103,7 +1107,7 @@ impl<'a, 'tcx> CrateMetadata {\n         }\n     }\n \n-    crate fn get_trait_of_item(&self, id: DefIndex) -> Option<DefId> {\n+    fn get_trait_of_item(&self, id: DefIndex) -> Option<DefId> {\n         let def_key = self.def_key(id);\n         match def_key.disambiguated_data.data {\n             DefPathData::TypeNs(..) | DefPathData::ValueNs(..) => (),\n@@ -1120,7 +1124,7 @@ impl<'a, 'tcx> CrateMetadata {\n     }\n \n \n-    crate fn get_native_libraries(&self, sess: &Session) -> Vec<NativeLibrary> {\n+    fn get_native_libraries(&self, sess: &Session) -> Vec<NativeLibrary> {\n         if self.is_proc_macro_crate() {\n             // Proc macro crates do not have any *target* native libraries.\n             vec![]\n@@ -1129,7 +1133,7 @@ impl<'a, 'tcx> CrateMetadata {\n         }\n     }\n \n-    crate fn get_foreign_modules(&self, tcx: TyCtxt<'tcx>) -> &'tcx [ForeignModule] {\n+    fn get_foreign_modules(&self, tcx: TyCtxt<'tcx>) -> &'tcx [ForeignModule] {\n         if self.is_proc_macro_crate() {\n             // Proc macro crates do not have any *target* foreign modules.\n             &[]\n@@ -1138,7 +1142,7 @@ impl<'a, 'tcx> CrateMetadata {\n         }\n     }\n \n-    crate fn get_dylib_dependency_formats(\n+    fn get_dylib_dependency_formats(\n         &self,\n         tcx: TyCtxt<'tcx>,\n     ) -> &'tcx [(CrateNum, LinkagePreference)] {\n@@ -1152,7 +1156,7 @@ impl<'a, 'tcx> CrateMetadata {\n             }))\n     }\n \n-    crate fn get_missing_lang_items(&self, tcx: TyCtxt<'tcx>) -> &'tcx [lang_items::LangItem] {\n+    fn get_missing_lang_items(&self, tcx: TyCtxt<'tcx>) -> &'tcx [lang_items::LangItem] {\n         if self.is_proc_macro_crate() {\n             // Proc macro crates do not depend on any target weak lang-items.\n             &[]\n@@ -1163,7 +1167,7 @@ impl<'a, 'tcx> CrateMetadata {\n         }\n     }\n \n-    crate fn get_fn_param_names(&self, id: DefIndex) -> Vec<ast::Name> {\n+    fn get_fn_param_names(&self, id: DefIndex) -> Vec<ast::Name> {\n         let param_names = match self.kind(id) {\n             EntryKind::Fn(data) |\n             EntryKind::ForeignFn(data) => data.decode(self).param_names,\n@@ -1173,7 +1177,7 @@ impl<'a, 'tcx> CrateMetadata {\n         param_names.decode(self).collect()\n     }\n \n-    crate fn exported_symbols(\n+    fn exported_symbols(\n         &self,\n         tcx: TyCtxt<'tcx>,\n     ) -> Vec<(ExportedSymbol<'tcx>, SymbolExportLevel)> {\n@@ -1186,22 +1190,22 @@ impl<'a, 'tcx> CrateMetadata {\n         }\n     }\n \n-    crate fn get_rendered_const(&self, id: DefIndex) -> String {\n+    fn get_rendered_const(&self, id: DefIndex) -> String {\n         match self.kind(id) {\n             EntryKind::Const(_, data) |\n             EntryKind::AssocConst(_, _, data) => data.decode(self).0,\n             _ => bug!(),\n         }\n     }\n \n-    crate fn get_macro(&self, id: DefIndex) -> MacroDef {\n+    fn get_macro(&self, id: DefIndex) -> MacroDef {\n         match self.kind(id) {\n             EntryKind::MacroDef(macro_def) => macro_def.decode(self),\n             _ => bug!(),\n         }\n     }\n \n-    crate fn is_const_fn_raw(&self, id: DefIndex) -> bool {\n+    fn is_const_fn_raw(&self, id: DefIndex) -> bool {\n         let constness = match self.kind(id) {\n             EntryKind::Method(data) => data.decode(self).fn_data.constness,\n             EntryKind::Fn(data) => data.decode(self).constness,\n@@ -1211,7 +1215,7 @@ impl<'a, 'tcx> CrateMetadata {\n         constness == hir::Constness::Const\n     }\n \n-    crate fn asyncness(&self, id: DefIndex) -> hir::IsAsync {\n+    fn asyncness(&self, id: DefIndex) -> hir::IsAsync {\n          match self.kind(id) {\n             EntryKind::Fn(data) => data.decode(self).asyncness,\n             EntryKind::Method(data) => data.decode(self).fn_data.asyncness,\n@@ -1220,7 +1224,7 @@ impl<'a, 'tcx> CrateMetadata {\n         }\n     }\n \n-    crate fn is_foreign_item(&self, id: DefIndex) -> bool {\n+    fn is_foreign_item(&self, id: DefIndex) -> bool {\n         match self.kind(id) {\n             EntryKind::ForeignImmStatic |\n             EntryKind::ForeignMutStatic |\n@@ -1229,7 +1233,7 @@ impl<'a, 'tcx> CrateMetadata {\n         }\n     }\n \n-    crate fn static_mutability(&self, id: DefIndex) -> Option<hir::Mutability> {\n+    fn static_mutability(&self, id: DefIndex) -> Option<hir::Mutability> {\n         match self.kind(id) {\n             EntryKind::ImmStatic |\n             EntryKind::ForeignImmStatic => Some(hir::MutImmutable),\n@@ -1239,12 +1243,12 @@ impl<'a, 'tcx> CrateMetadata {\n         }\n     }\n \n-    crate fn fn_sig(&self, id: DefIndex, tcx: TyCtxt<'tcx>) -> ty::PolyFnSig<'tcx> {\n+    fn fn_sig(&self, id: DefIndex, tcx: TyCtxt<'tcx>) -> ty::PolyFnSig<'tcx> {\n         self.root.per_def.fn_sig.get(self, id).unwrap().decode((self, tcx))\n     }\n \n     #[inline]\n-    crate fn def_key(&self, index: DefIndex) -> DefKey {\n+    fn def_key(&self, index: DefIndex) -> DefKey {\n         let mut key = self.def_path_table.def_key(index);\n         if self.is_proc_macro(index) {\n             let name = self.raw_proc_macro(index).name();\n@@ -1254,13 +1258,13 @@ impl<'a, 'tcx> CrateMetadata {\n     }\n \n     // Returns the path leading to the thing with this `id`.\n-    crate fn def_path(&self, id: DefIndex) -> DefPath {\n+    fn def_path(&self, id: DefIndex) -> DefPath {\n         debug!(\"def_path(cnum={:?}, id={:?})\", self.cnum, id);\n         DefPath::make(self.cnum, id, |parent| self.def_key(parent))\n     }\n \n     #[inline]\n-    crate fn def_path_hash(&self, index: DefIndex) -> DefPathHash {\n+    fn def_path_hash(&self, index: DefIndex) -> DefPathHash {\n         self.def_path_table.def_path_hash(index)\n     }\n \n@@ -1358,7 +1362,7 @@ impl<'a, 'tcx> CrateMetadata {\n \n     /// Get the `DepNodeIndex` corresponding this crate. The result of this\n     /// method is cached in the `dep_node_index` field.\n-    pub(super) fn get_crate_dep_node_index(&self, tcx: TyCtxt<'tcx>) -> DepNodeIndex {\n+    fn get_crate_dep_node_index(&self, tcx: TyCtxt<'tcx>) -> DepNodeIndex {\n         let mut dep_node_index = self.dep_node_index.load();\n \n         if unlikely!(dep_node_index == DepNodeIndex::INVALID) {", "previous_filename": "src/librustc_metadata/decoder.rs"}, {"sha": "6eacfc28de2dbfe7e129b381569a9f6ca3c88248", "filename": "src/librustc_metadata/rmeta/decoder/cstore_impl.rs", "status": "renamed", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c34472b77084c9f76f872871aeab121daf81fb99/src%2Flibrustc_metadata%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c34472b77084c9f76f872871aeab121daf81fb99/src%2Flibrustc_metadata%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Frmeta%2Fdecoder%2Fcstore_impl.rs?ref=c34472b77084c9f76f872871aeab121daf81fb99", "patch": "@@ -1,9 +1,8 @@\n use crate::cstore::{self, LoadedMacro};\n-use crate::encoder;\n use crate::link_args;\n use crate::native_libs;\n use crate::foreign_modules;\n-use crate::schema;\n+use crate::rmeta::{self, encoder};\n \n use rustc::ty::query::QueryConfig;\n use rustc::middle::cstore::{CrateSource, CrateStore, DepKind, EncodedMetadata, NativeLibraryKind};\n@@ -529,6 +528,6 @@ impl CrateStore for cstore::CStore {\n \n     fn metadata_encoding_version(&self) -> &[u8]\n     {\n-        schema::METADATA_HEADER\n+        rmeta::METADATA_HEADER\n     }\n }", "previous_filename": "src/librustc_metadata/cstore_impl.rs"}, {"sha": "afc81649e37195e8e33b2fcd7bcd7e2f8380b512", "filename": "src/librustc_metadata/rmeta/encoder.rs", "status": "renamed", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c34472b77084c9f76f872871aeab121daf81fb99/src%2Flibrustc_metadata%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c34472b77084c9f76f872871aeab121daf81fb99/src%2Flibrustc_metadata%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Frmeta%2Fencoder.rs?ref=c34472b77084c9f76f872871aeab121daf81fb99", "patch": "@@ -1,5 +1,5 @@\n-use crate::schema::*;\n-use crate::table::{FixedSizeEncoding, PerDefTable};\n+use crate::rmeta::*;\n+use crate::rmeta::table::{FixedSizeEncoding, PerDefTable};\n \n use rustc::middle::cstore::{LinkagePreference, NativeLibrary,\n                             EncodedMetadata, ForeignModule};\n@@ -1781,7 +1781,7 @@ impl<'tcx, 'v> ItemLikeVisitor<'v> for ImplVisitor<'tcx> {\n // will allow us to slice the metadata to the precise length that we just\n // generated regardless of trailing bytes that end up in it.\n \n-crate fn encode_metadata(tcx: TyCtxt<'_>) -> EncodedMetadata {\n+pub(super) fn encode_metadata(tcx: TyCtxt<'_>) -> EncodedMetadata {\n     let mut encoder = opaque::Encoder::new(vec![]);\n     encoder.emit_raw_bytes(METADATA_HEADER);\n ", "previous_filename": "src/librustc_metadata/encoder.rs"}, {"sha": "4eabeac6d986911b364ad1b41607f303212d9945", "filename": "src/librustc_metadata/rmeta/mod.rs", "status": "renamed", "additions": 89, "deletions": 85, "changes": 174, "blob_url": "https://github.com/rust-lang/rust/blob/c34472b77084c9f76f872871aeab121daf81fb99/src%2Flibrustc_metadata%2Frmeta%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c34472b77084c9f76f872871aeab121daf81fb99/src%2Flibrustc_metadata%2Frmeta%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Frmeta%2Fmod.rs?ref=c34472b77084c9f76f872871aeab121daf81fb99", "patch": "@@ -1,4 +1,5 @@\n-use crate::table::PerDefTable;\n+use decoder::Metadata;\n+use table::PerDefTable;\n \n use rustc::hir;\n use rustc::hir::def::{self, CtorKind};\n@@ -13,7 +14,6 @@ use rustc::ty::{self, Ty, ReprOptions};\n use rustc_target::spec::{PanicStrategy, TargetTriple};\n use rustc_index::vec::IndexVec;\n use rustc_data_structures::svh::Svh;\n-\n use rustc_serialize::Encodable;\n use syntax::{ast, attr};\n use syntax::edition::Edition;\n@@ -23,6 +23,12 @@ use syntax_pos::{self, Span};\n use std::marker::PhantomData;\n use std::num::NonZeroUsize;\n \n+pub use decoder::{provide, provide_extern};\n+\n+mod decoder;\n+mod encoder;\n+mod table;\n+\n crate fn rustc_version() -> String {\n     format!(\"rustc {}\",\n             option_env!(\"CFG_VERSION\").unwrap_or(\"unknown version\"))\n@@ -104,13 +110,13 @@ crate struct Lazy<T, Meta = <T as LazyMeta>::Meta>\n     where T: ?Sized + LazyMeta<Meta = Meta>,\n           Meta: 'static + Copy,\n {\n-    pub position: NonZeroUsize,\n-    pub meta: Meta,\n+    position: NonZeroUsize,\n+    meta: Meta,\n     _marker: PhantomData<T>,\n }\n \n impl<T: ?Sized + LazyMeta> Lazy<T> {\n-     crate fn from_position_and_meta(position: NonZeroUsize, meta: T::Meta) -> Lazy<T> {\n+     fn from_position_and_meta(position: NonZeroUsize, meta: T::Meta) -> Lazy<T> {\n         Lazy {\n             position,\n             meta,\n@@ -120,13 +126,13 @@ impl<T: ?Sized + LazyMeta> Lazy<T> {\n }\n \n impl<T: Encodable> Lazy<T> {\n-    crate fn from_position(position: NonZeroUsize) -> Lazy<T> {\n+    fn from_position(position: NonZeroUsize) -> Lazy<T> {\n         Lazy::from_position_and_meta(position, ())\n     }\n }\n \n impl<T: Encodable> Lazy<[T]> {\n-    crate fn empty() -> Lazy<[T]> {\n+    fn empty() -> Lazy<[T]> {\n         Lazy::from_position_and_meta(NonZeroUsize::new(1).unwrap(), 0)\n     }\n }\n@@ -143,7 +149,7 @@ impl<T: ?Sized + LazyMeta> rustc_serialize::UseSpecializedDecodable for Lazy<T>\n \n /// Encoding / decoding state for `Lazy`.\n #[derive(Copy, Clone, PartialEq, Eq, Debug)]\n-crate enum LazyState {\n+enum LazyState {\n     /// Outside of a metadata node.\n     NoNode,\n \n@@ -171,46 +177,46 @@ macro_rules! Lazy {\n crate struct CrateRoot<'tcx> {\n     pub name: Symbol,\n     pub triple: TargetTriple,\n-    pub extra_filename: String,\n+    extra_filename: String,\n     pub hash: Svh,\n     pub disambiguator: CrateDisambiguator,\n     pub panic_strategy: PanicStrategy,\n-    pub edition: Edition,\n+    edition: Edition,\n     pub has_global_allocator: bool,\n-    pub has_panic_handler: bool,\n+    has_panic_handler: bool,\n     pub has_default_lib_allocator: bool,\n-    pub plugin_registrar_fn: Option<DefIndex>,\n-    pub proc_macro_decls_static: Option<DefIndex>,\n-    pub proc_macro_stability: Option<attr::Stability>,\n+    plugin_registrar_fn: Option<DefIndex>,\n+    proc_macro_decls_static: Option<DefIndex>,\n+    proc_macro_stability: Option<attr::Stability>,\n \n     pub crate_deps: Lazy<[CrateDep]>,\n-    pub dylib_dependency_formats: Lazy<[Option<LinkagePreference>]>,\n-    pub lib_features: Lazy<[(Symbol, Option<Symbol>)]>,\n-    pub lang_items: Lazy<[(DefIndex, usize)]>,\n-    pub lang_items_missing: Lazy<[lang_items::LangItem]>,\n-    pub diagnostic_items: Lazy<[(Symbol, DefIndex)]>,\n-    pub native_libraries: Lazy<[NativeLibrary]>,\n-    pub foreign_modules: Lazy<[ForeignModule]>,\n-    pub source_map: Lazy<[syntax_pos::SourceFile]>,\n+    dylib_dependency_formats: Lazy<[Option<LinkagePreference>]>,\n+    lib_features: Lazy<[(Symbol, Option<Symbol>)]>,\n+    lang_items: Lazy<[(DefIndex, usize)]>,\n+    lang_items_missing: Lazy<[lang_items::LangItem]>,\n+    diagnostic_items: Lazy<[(Symbol, DefIndex)]>,\n+    native_libraries: Lazy<[NativeLibrary]>,\n+    foreign_modules: Lazy<[ForeignModule]>,\n+    source_map: Lazy<[syntax_pos::SourceFile]>,\n     pub def_path_table: Lazy<hir::map::definitions::DefPathTable>,\n     pub impls: Lazy<[TraitImpls]>,\n-    pub exported_symbols: Lazy!([(ExportedSymbol<'tcx>, SymbolExportLevel)]),\n+    exported_symbols: Lazy!([(ExportedSymbol<'tcx>, SymbolExportLevel)]),\n     pub interpret_alloc_index: Lazy<[u32]>,\n \n-    pub per_def: LazyPerDefTables<'tcx>,\n+    per_def: LazyPerDefTables<'tcx>,\n \n     /// The DefIndex's of any proc macros delcared by\n     /// this crate\n     pub proc_macro_data: Option<Lazy<[DefIndex]>>,\n \n-    pub compiler_builtins: bool,\n+    compiler_builtins: bool,\n     pub needs_allocator: bool,\n     pub needs_panic_runtime: bool,\n-    pub no_builtins: bool,\n+    no_builtins: bool,\n     pub panic_runtime: bool,\n     pub profiler_runtime: bool,\n     pub sanitizer_runtime: bool,\n-    pub symbol_mangling_version: SymbolManglingVersion,\n+    symbol_mangling_version: SymbolManglingVersion,\n }\n \n #[derive(RustcEncodable, RustcDecodable)]\n@@ -230,35 +236,33 @@ crate struct TraitImpls {\n \n #[derive(RustcEncodable, RustcDecodable)]\n crate struct LazyPerDefTables<'tcx> {\n-    pub kind: Lazy!(PerDefTable<Lazy!(EntryKind<'tcx>)>),\n-    pub visibility: Lazy!(PerDefTable<Lazy<ty::Visibility>>),\n-    pub span: Lazy!(PerDefTable<Lazy<Span>>),\n-    pub attributes: Lazy!(PerDefTable<Lazy<[ast::Attribute]>>),\n-    pub children: Lazy!(PerDefTable<Lazy<[DefIndex]>>),\n-    pub stability: Lazy!(PerDefTable<Lazy<attr::Stability>>),\n-    pub deprecation: Lazy!(PerDefTable<Lazy<attr::Deprecation>>),\n-\n-    pub ty: Lazy!(PerDefTable<Lazy!(Ty<'tcx>)>),\n-    pub fn_sig: Lazy!(PerDefTable<Lazy!(ty::PolyFnSig<'tcx>)>),\n-    pub impl_trait_ref: Lazy!(PerDefTable<Lazy!(ty::TraitRef<'tcx>)>),\n-    pub inherent_impls: Lazy!(PerDefTable<Lazy<[DefIndex]>>),\n-    pub variances: Lazy!(PerDefTable<Lazy<[ty::Variance]>>),\n-    pub generics: Lazy!(PerDefTable<Lazy<ty::Generics>>),\n-    pub explicit_predicates: Lazy!(PerDefTable<Lazy!(ty::GenericPredicates<'tcx>)>),\n+    kind: Lazy!(PerDefTable<Lazy!(EntryKind<'tcx>)>),\n+    visibility: Lazy!(PerDefTable<Lazy<ty::Visibility>>),\n+    span: Lazy!(PerDefTable<Lazy<Span>>),\n+    attributes: Lazy!(PerDefTable<Lazy<[ast::Attribute]>>),\n+    children: Lazy!(PerDefTable<Lazy<[DefIndex]>>),\n+    stability: Lazy!(PerDefTable<Lazy<attr::Stability>>),\n+    deprecation: Lazy!(PerDefTable<Lazy<attr::Deprecation>>),\n+    ty: Lazy!(PerDefTable<Lazy!(Ty<'tcx>)>),\n+    fn_sig: Lazy!(PerDefTable<Lazy!(ty::PolyFnSig<'tcx>)>),\n+    impl_trait_ref: Lazy!(PerDefTable<Lazy!(ty::TraitRef<'tcx>)>),\n+    inherent_impls: Lazy!(PerDefTable<Lazy<[DefIndex]>>),\n+    variances: Lazy!(PerDefTable<Lazy<[ty::Variance]>>),\n+    generics: Lazy!(PerDefTable<Lazy<ty::Generics>>),\n+    explicit_predicates: Lazy!(PerDefTable<Lazy!(ty::GenericPredicates<'tcx>)>),\n     // FIXME(eddyb) this would ideally be `Lazy<[...]>` but `ty::Predicate`\n     // doesn't handle shorthands in its own (de)serialization impls,\n     // as it's an `enum` for which we want to derive (de)serialization,\n     // so the `ty::codec` APIs handle the whole `&'tcx [...]` at once.\n     // Also, as an optimization, a missing entry indicates an empty `&[]`.\n-    pub inferred_outlives: Lazy!(PerDefTable<Lazy!(&'tcx [(ty::Predicate<'tcx>, Span)])>),\n-    pub super_predicates: Lazy!(PerDefTable<Lazy!(ty::GenericPredicates<'tcx>)>),\n-\n-    pub mir: Lazy!(PerDefTable<Lazy!(mir::Body<'tcx>)>),\n-    pub promoted_mir: Lazy!(PerDefTable<Lazy!(IndexVec<mir::Promoted, mir::Body<'tcx>>)>),\n+    inferred_outlives: Lazy!(PerDefTable<Lazy!(&'tcx [(ty::Predicate<'tcx>, Span)])>),\n+    super_predicates: Lazy!(PerDefTable<Lazy!(ty::GenericPredicates<'tcx>)>),\n+    mir: Lazy!(PerDefTable<Lazy!(mir::Body<'tcx>)>),\n+    promoted_mir: Lazy!(PerDefTable<Lazy!(IndexVec<mir::Promoted, mir::Body<'tcx>>)>),\n }\n \n #[derive(Copy, Clone, RustcEncodable, RustcDecodable)]\n-crate enum EntryKind<'tcx> {\n+enum EntryKind<'tcx> {\n     Const(ConstQualif, Lazy<RenderedConst>),\n     ImmStatic,\n     MutStatic,\n@@ -293,74 +297,74 @@ crate enum EntryKind<'tcx> {\n \n /// Additional data for EntryKind::Const and EntryKind::AssocConst\n #[derive(Clone, Copy, RustcEncodable, RustcDecodable)]\n-crate struct ConstQualif {\n-    pub mir: u8,\n+struct ConstQualif {\n+    mir: u8,\n }\n \n /// Contains a constant which has been rendered to a String.\n /// Used by rustdoc.\n #[derive(RustcEncodable, RustcDecodable)]\n-crate struct RenderedConst(pub String);\n+struct RenderedConst(String);\n \n #[derive(RustcEncodable, RustcDecodable)]\n-crate struct ModData {\n-    pub reexports: Lazy<[def::Export<hir::HirId>]>,\n+struct ModData {\n+    reexports: Lazy<[def::Export<hir::HirId>]>,\n }\n \n #[derive(RustcEncodable, RustcDecodable)]\n-crate struct MacroDef {\n-    pub body: String,\n-    pub legacy: bool,\n+struct MacroDef {\n+    body: String,\n+    legacy: bool,\n }\n \n #[derive(RustcEncodable, RustcDecodable)]\n-crate struct FnData {\n-    pub asyncness: hir::IsAsync,\n-    pub constness: hir::Constness,\n-    pub param_names: Lazy<[ast::Name]>,\n+struct FnData {\n+    asyncness: hir::IsAsync,\n+    constness: hir::Constness,\n+    param_names: Lazy<[ast::Name]>,\n }\n \n #[derive(RustcEncodable, RustcDecodable)]\n-crate struct VariantData {\n-    pub ctor_kind: CtorKind,\n-    pub discr: ty::VariantDiscr,\n+struct VariantData {\n+    ctor_kind: CtorKind,\n+    discr: ty::VariantDiscr,\n     /// If this is unit or tuple-variant/struct, then this is the index of the ctor id.\n-    pub ctor: Option<DefIndex>,\n+    ctor: Option<DefIndex>,\n }\n \n #[derive(RustcEncodable, RustcDecodable)]\n-crate struct TraitData {\n-    pub unsafety: hir::Unsafety,\n-    pub paren_sugar: bool,\n-    pub has_auto_impl: bool,\n-    pub is_marker: bool,\n+struct TraitData {\n+    unsafety: hir::Unsafety,\n+    paren_sugar: bool,\n+    has_auto_impl: bool,\n+    is_marker: bool,\n }\n \n #[derive(RustcEncodable, RustcDecodable)]\n-crate struct ImplData {\n-    pub polarity: ty::ImplPolarity,\n-    pub defaultness: hir::Defaultness,\n-    pub parent_impl: Option<DefId>,\n+struct ImplData {\n+    polarity: ty::ImplPolarity,\n+    defaultness: hir::Defaultness,\n+    parent_impl: Option<DefId>,\n \n     /// This is `Some` only for impls of `CoerceUnsized`.\n     // FIXME(eddyb) perhaps compute this on the fly if cheap enough?\n-    pub coerce_unsized_info: Option<ty::adjustment::CoerceUnsizedInfo>,\n+    coerce_unsized_info: Option<ty::adjustment::CoerceUnsizedInfo>,\n }\n \n \n /// Describes whether the container of an associated item\n /// is a trait or an impl and whether, in a trait, it has\n /// a default, or an in impl, whether it's marked \"default\".\n #[derive(Copy, Clone, RustcEncodable, RustcDecodable)]\n-crate enum AssocContainer {\n+enum AssocContainer {\n     TraitRequired,\n     TraitWithDefault,\n     ImplDefault,\n     ImplFinal,\n }\n \n impl AssocContainer {\n-    crate fn with_def_id(&self, def_id: DefId) -> ty::AssocItemContainer {\n+    fn with_def_id(&self, def_id: DefId) -> ty::AssocItemContainer {\n         match *self {\n             AssocContainer::TraitRequired |\n             AssocContainer::TraitWithDefault => ty::TraitContainer(def_id),\n@@ -370,7 +374,7 @@ impl AssocContainer {\n         }\n     }\n \n-    crate fn defaultness(&self) -> hir::Defaultness {\n+    fn defaultness(&self) -> hir::Defaultness {\n         match *self {\n             AssocContainer::TraitRequired => hir::Defaultness::Default {\n                 has_value: false,\n@@ -387,17 +391,17 @@ impl AssocContainer {\n }\n \n #[derive(RustcEncodable, RustcDecodable)]\n-crate struct MethodData {\n-    pub fn_data: FnData,\n-    pub container: AssocContainer,\n-    pub has_self: bool,\n+struct MethodData {\n+    fn_data: FnData,\n+    container: AssocContainer,\n+    has_self: bool,\n }\n \n #[derive(RustcEncodable, RustcDecodable)]\n-crate struct GeneratorData<'tcx> {\n-    pub layout: mir::GeneratorLayout<'tcx>,\n+struct GeneratorData<'tcx> {\n+    layout: mir::GeneratorLayout<'tcx>,\n }\n \n // Tags used for encoding Spans:\n-crate const TAG_VALID_SPAN: u8 = 0;\n-crate const TAG_INVALID_SPAN: u8 = 1;\n+const TAG_VALID_SPAN: u8 = 0;\n+const TAG_INVALID_SPAN: u8 = 1;", "previous_filename": "src/librustc_metadata/schema.rs"}, {"sha": "613d92c6d7b0b9c34aa4dc995bf9f5d0e19eacc8", "filename": "src/librustc_metadata/rmeta/table.rs", "status": "renamed", "additions": 10, "deletions": 11, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/c34472b77084c9f76f872871aeab121daf81fb99/src%2Flibrustc_metadata%2Frmeta%2Ftable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c34472b77084c9f76f872871aeab121daf81fb99/src%2Flibrustc_metadata%2Frmeta%2Ftable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Frmeta%2Ftable.rs?ref=c34472b77084c9f76f872871aeab121daf81fb99", "patch": "@@ -1,5 +1,4 @@\n-use crate::decoder::Metadata;\n-use crate::schema::*;\n+use crate::rmeta::*;\n \n use rustc::hir::def_id::{DefId, DefIndex};\n use rustc_serialize::{Encodable, opaque::Encoder};\n@@ -12,7 +11,7 @@ use log::debug;\n /// Used mainly for Lazy positions and lengths.\n /// Unchecked invariant: `Self::default()` should encode as `[0; BYTE_LEN]`,\n /// but this has no impact on safety.\n-crate trait FixedSizeEncoding: Default {\n+pub(super) trait FixedSizeEncoding: Default {\n     const BYTE_LEN: usize;\n \n     // FIXME(eddyb) convert to and from `[u8; Self::BYTE_LEN]` instead,\n@@ -126,7 +125,7 @@ impl<T: Encodable> FixedSizeEncoding for Option<Lazy<[T]>> {\n // FIXME(eddyb) replace `Vec` with `[_]` here, such that `Box<Table<T>>` would be used\n // when building it, and `Lazy<Table<T>>` or `&Table<T>` when reading it.\n // (not sure if that is possible given that the `Vec` is being resized now)\n-crate struct Table<T> where Option<T>: FixedSizeEncoding {\n+pub(super) struct Table<T> where Option<T>: FixedSizeEncoding {\n     // FIXME(eddyb) store `[u8; <Option<T>>::BYTE_LEN]` instead of `u8` in `Vec`,\n     // once that starts being allowed by the compiler (i.e. lazy normalization).\n     bytes: Vec<u8>,\n@@ -143,7 +142,7 @@ impl<T> Default for Table<T> where Option<T>: FixedSizeEncoding {\n }\n \n impl<T> Table<T> where Option<T>: FixedSizeEncoding {\n-    crate fn set(&mut self, i: usize, value: T) {\n+    fn set(&mut self, i: usize, value: T) {\n         // FIXME(eddyb) investigate more compact encodings for sparse tables.\n         // On the PR @michaelwoerister mentioned:\n         // > Space requirements could perhaps be optimized by using the HAMT `popcnt`\n@@ -157,7 +156,7 @@ impl<T> Table<T> where Option<T>: FixedSizeEncoding {\n         Some(value).write_to_bytes_at(&mut self.bytes, i);\n     }\n \n-    crate fn encode(&self, buf: &mut Encoder) -> Lazy<Self> {\n+    fn encode(&self, buf: &mut Encoder) -> Lazy<Self> {\n         let pos = buf.position();\n         buf.emit_raw_bytes(&self.bytes);\n         Lazy::from_position_and_meta(\n@@ -178,7 +177,7 @@ impl<T> LazyMeta for Table<T> where Option<T>: FixedSizeEncoding {\n impl<T> Lazy<Table<T>> where Option<T>: FixedSizeEncoding {\n     /// Given the metadata, extract out the value at a particular index (if any).\n     #[inline(never)]\n-    crate fn get<'a, 'tcx, M: Metadata<'a, 'tcx>>(\n+    fn get<'a, 'tcx, M: Metadata<'a, 'tcx>>(\n         &self,\n         metadata: M,\n         i: usize,\n@@ -194,7 +193,7 @@ impl<T> Lazy<Table<T>> where Option<T>: FixedSizeEncoding {\n /// Like a `Table` but using `DefIndex` instead of `usize` as keys.\n // FIXME(eddyb) replace by making `Table` behave like `IndexVec`,\n // and by using `newtype_index!` to define `DefIndex`.\n-crate struct PerDefTable<T>(Table<T>) where Option<T>: FixedSizeEncoding;\n+pub(super) struct PerDefTable<T>(Table<T>) where Option<T>: FixedSizeEncoding;\n \n impl<T> Default for PerDefTable<T> where Option<T>: FixedSizeEncoding {\n     fn default() -> Self {\n@@ -203,12 +202,12 @@ impl<T> Default for PerDefTable<T> where Option<T>: FixedSizeEncoding {\n }\n \n impl<T> PerDefTable<T> where Option<T>: FixedSizeEncoding {\n-    crate fn set(&mut self, def_id: DefId, value: T) {\n+    pub(super) fn set(&mut self, def_id: DefId, value: T) {\n         assert!(def_id.is_local());\n         self.0.set(def_id.index.index(), value);\n     }\n \n-    crate fn encode(&self, buf: &mut Encoder) -> Lazy<Self> {\n+    pub(super) fn encode(&self, buf: &mut Encoder) -> Lazy<Self> {\n         let lazy = self.0.encode(buf);\n         Lazy::from_position_and_meta(lazy.position, lazy.meta)\n     }\n@@ -229,7 +228,7 @@ impl<T> Lazy<PerDefTable<T>> where Option<T>: FixedSizeEncoding {\n \n     /// Given the metadata, extract out the value at a particular DefIndex (if any).\n     #[inline(never)]\n-    crate fn get<'a, 'tcx, M: Metadata<'a, 'tcx>>(\n+    pub(super) fn get<'a, 'tcx, M: Metadata<'a, 'tcx>>(\n         &self,\n         metadata: M,\n         def_index: DefIndex,", "previous_filename": "src/librustc_metadata/table.rs"}, {"sha": "18b121f9c5bef64d6fa3f35dabebcb43415ae63d", "filename": "src/librustc_target/abi/call/mips64.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c34472b77084c9f76f872871aeab121daf81fb99/src%2Flibrustc_target%2Fabi%2Fcall%2Fmips64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c34472b77084c9f76f872871aeab121daf81fb99/src%2Flibrustc_target%2Fabi%2Fcall%2Fmips64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fabi%2Fcall%2Fmips64.rs?ref=c34472b77084c9f76f872871aeab121daf81fb99", "patch": "@@ -23,8 +23,8 @@ fn float_reg<'a, Ty, C>(cx: &C, ret: &ArgAbi<'a, Ty>, i: usize) -> Option<Reg>\n {\n     match ret.layout.field(cx, i).abi {\n         abi::Abi::Scalar(ref scalar) => match scalar.value {\n-            abi::Float(abi::FloatTy::F32) => Some(Reg::f32()),\n-            abi::Float(abi::FloatTy::F64) => Some(Reg::f64()),\n+            abi::F32 => Some(Reg::f32()),\n+            abi::F64 => Some(Reg::f64()),\n             _ => None\n         },\n         _ => None\n@@ -107,7 +107,7 @@ fn classify_arg<'a, Ty, C>(cx: &C, arg: &mut ArgAbi<'a, Ty>)\n \n                 // We only care about aligned doubles\n                 if let abi::Abi::Scalar(ref scalar) = field.abi {\n-                    if let abi::Float(abi::FloatTy::F64) = scalar.value {\n+                    if let abi::F64 = scalar.value {\n                         if offset.is_aligned(dl.f64_align.abi) {\n                             // Insert enough integers to cover [last_offset, offset)\n                             assert!(last_offset.is_aligned(dl.f64_align.abi));"}, {"sha": "6029b00aa31bd82cc3c43a6ef264d6ecfd7cc9a7", "filename": "src/librustc_target/abi/call/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c34472b77084c9f76f872871aeab121daf81fb99/src%2Flibrustc_target%2Fabi%2Fcall%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c34472b77084c9f76f872871aeab121daf81fb99/src%2Flibrustc_target%2Fabi%2Fcall%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fabi%2Fcall%2Fmod.rs?ref=c34472b77084c9f76f872871aeab121daf81fb99", "patch": "@@ -287,7 +287,7 @@ impl<'a, Ty> TyLayout<'a, Ty> {\n                 let kind = match scalar.value {\n                     abi::Int(..) |\n                     abi::Pointer => RegKind::Integer,\n-                    abi::Float(_) => RegKind::Float,\n+                    abi::F32 | abi::F64 => RegKind::Float,\n                 };\n                 HomogeneousAggregate::Homogeneous(Reg {\n                     kind,"}, {"sha": "452ca024e61b47a9fb3d10986c8f87d1093fa6b9", "filename": "src/librustc_target/abi/call/x86_64.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c34472b77084c9f76f872871aeab121daf81fb99/src%2Flibrustc_target%2Fabi%2Fcall%2Fx86_64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c34472b77084c9f76f872871aeab121daf81fb99/src%2Flibrustc_target%2Fabi%2Fcall%2Fx86_64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fabi%2Fcall%2Fx86_64.rs?ref=c34472b77084c9f76f872871aeab121daf81fb99", "patch": "@@ -45,7 +45,7 @@ fn classify_arg<'a, Ty, C>(cx: &C, arg: &ArgAbi<'a, Ty>)\n                 match scalar.value {\n                     abi::Int(..) |\n                     abi::Pointer => Class::Int,\n-                    abi::Float(_) => Class::Sse\n+                    abi::F32 | abi::F64 => Class::Sse\n                 }\n             }\n "}, {"sha": "a19bb6807f1a1f910d3bba0aa748697cf3bb4cfe", "filename": "src/librustc_target/abi/mod.rs", "status": "modified", "additions": 7, "deletions": 13, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/c34472b77084c9f76f872871aeab121daf81fb99/src%2Flibrustc_target%2Fabi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c34472b77084c9f76f872871aeab121daf81fb99/src%2Flibrustc_target%2Fabi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fabi%2Fmod.rs?ref=c34472b77084c9f76f872871aeab121daf81fb99", "patch": "@@ -532,13 +532,6 @@ impl Integer {\n     }\n }\n \n-#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Copy,\n-         PartialOrd, Ord, Debug)]\n-pub enum FloatTy {\n-    F32,\n-    F64,\n-}\n-\n /// Fundamental unit of memory access and layout.\n #[derive(Copy, Clone, PartialEq, Eq, Hash, Debug)]\n pub enum Primitive {\n@@ -550,7 +543,8 @@ pub enum Primitive {\n     /// a negative integer passed by zero-extension will appear positive in\n     /// the callee, and most operations on it will produce the wrong values.\n     Int(Integer, bool),\n-    Float(FloatTy),\n+    F32,\n+    F64,\n     Pointer\n }\n \n@@ -560,8 +554,8 @@ impl Primitive {\n \n         match self {\n             Int(i, _) => i.size(),\n-            Float(FloatTy::F32) => Size::from_bits(32),\n-            Float(FloatTy::F64) => Size::from_bits(64),\n+            F32 => Size::from_bits(32),\n+            F64 => Size::from_bits(64),\n             Pointer => dl.pointer_size\n         }\n     }\n@@ -571,15 +565,15 @@ impl Primitive {\n \n         match self {\n             Int(i, _) => i.align(dl),\n-            Float(FloatTy::F32) => dl.f32_align,\n-            Float(FloatTy::F64) => dl.f64_align,\n+            F32 => dl.f32_align,\n+            F64 => dl.f64_align,\n             Pointer => dl.pointer_align\n         }\n     }\n \n     pub fn is_float(self) -> bool {\n         match self {\n-            Float(_) => true,\n+            F32 | F64 => true,\n             _ => false\n         }\n     }"}, {"sha": "04c0a0f005b8216ed05e648b12038fd06b030e2f", "filename": "src/librustdoc/html/static/main.js", "status": "modified", "additions": 51, "deletions": 11, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/c34472b77084c9f76f872871aeab121daf81fb99/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "raw_url": "https://github.com/rust-lang/rust/raw/c34472b77084c9f76f872871aeab121daf81fb99/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js?ref=c34472b77084c9f76f872871aeab121daf81fb99", "patch": "@@ -3,7 +3,7 @@\n \n // Local js definitions:\n /* global addClass, getCurrentValue, hasClass */\n-/* global isHidden, onEach, removeClass, updateLocalStorage */\n+/* global onEach, removeClass, updateLocalStorage */\n \n if (!String.prototype.startsWith) {\n     String.prototype.startsWith = function(searchString, position) {\n@@ -161,17 +161,18 @@ function getSearchElement() {\n         return window.history && typeof window.history.pushState === \"function\";\n     }\n \n+    function isHidden(elem) {\n+        return elem.offsetHeight === 0;\n+    }\n+\n     var main = document.getElementById(\"main\");\n+    var savedHash = \"\";\n \n-    function onHashChange(ev) {\n-        // If we're in mobile mode, we should hide the sidebar in any case.\n-        hideSidebar();\n-        var match = window.location.hash.match(/^#?(\\d+)(?:-(\\d+))?$/);\n-        if (match) {\n-            return highlightSourceLines(match, ev);\n-        }\n+    function handleHashes(ev) {\n         var search = getSearchElement();\n         if (ev !== null && search && !hasClass(search, \"hidden\") && ev.newURL) {\n+            // This block occurs when clicking on an element in the navbar while\n+            // in a search.\n             addClass(search, \"hidden\");\n             removeClass(main, \"hidden\");\n             var hash = ev.newURL.slice(ev.newURL.indexOf(\"#\") + 1);\n@@ -183,6 +184,35 @@ function getSearchElement() {\n                 elem.scrollIntoView();\n             }\n         }\n+        // This part is used in case an element is not visible.\n+        if (savedHash !== window.location.hash) {\n+            savedHash = window.location.hash;\n+            if (savedHash.length === 0) {\n+                return;\n+            }\n+            var elem = document.getElementById(savedHash.slice(1)); // we remove the '#'\n+            if (!elem || !isHidden(elem)) {\n+                return;\n+            }\n+            var parent = elem.parentNode;\n+            if (parent && hasClass(parent, \"impl-items\")) {\n+                // In case this is a trait implementation item, we first need to toggle\n+                // the \"Show hidden undocumented items\".\n+                onEachLazy(parent.getElementsByClassName(\"collapsed\"), function(e) {\n+                    if (e.parentNode === parent) {\n+                        // Only click on the toggle we're looking for.\n+                        e.click();\n+                        return true;\n+                    }\n+                });\n+                if (isHidden(elem)) {\n+                    // The whole parent is collapsed. We need to click on its toggle as well!\n+                    if (hasClass(parent.lastElementChild, \"collapse-toggle\")) {\n+                        parent.lastElementChild.click();\n+                    }\n+                }\n+            }\n+        }\n     }\n \n     function highlightSourceLines(match, ev) {\n@@ -228,6 +258,16 @@ function getSearchElement() {\n         }\n     }\n \n+    function onHashChange(ev) {\n+        // If we're in mobile mode, we should hide the sidebar in any case.\n+        hideSidebar();\n+        var match = window.location.hash.match(/^#?(\\d+)(?:-(\\d+))?$/);\n+        if (match) {\n+            return highlightSourceLines(match, ev);\n+        }\n+        handleHashes(ev);\n+    }\n+\n     function expandSection(id) {\n         var elem = document.getElementById(id);\n         if (elem && isHidden(elem)) {\n@@ -246,9 +286,6 @@ function getSearchElement() {\n         }\n     }\n \n-    highlightSourceLines();\n-    window.onhashchange = onHashChange;\n-\n     // Gets the human-readable string for the virtual-key code of the\n     // given KeyboardEvent, ev.\n     //\n@@ -2639,6 +2676,9 @@ function getSearchElement() {\n         insertAfter(popup, getSearchElement());\n     }\n \n+    onHashChange();\n+    window.onhashchange = onHashChange;\n+\n     buildHelperPopup();\n }());\n "}, {"sha": "d142d99ac704d94f55ac409de757b1451be8f7ef", "filename": "src/librustdoc/html/static/storage.js", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c34472b77084c9f76f872871aeab121daf81fb99/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fstorage.js", "raw_url": "https://github.com/rust-lang/rust/raw/c34472b77084c9f76f872871aeab121daf81fb99/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fstorage.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fstorage.js?ref=c34472b77084c9f76f872871aeab121daf81fb99", "patch": "@@ -24,10 +24,6 @@ function removeClass(elem, className) {\n     elem.classList.remove(className);\n }\n \n-function isHidden(elem) {\n-    return elem.offsetParent === null;\n-}\n-\n function onEach(arr, func, reversed) {\n     if (arr && arr.length > 0 && func) {\n         var length = arr.length;"}, {"sha": "0588373dcdc3d8de1dd474385af615cbf5d81752", "filename": "src/libstd/f64.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/c34472b77084c9f76f872871aeab121daf81fb99/src%2Flibstd%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c34472b77084c9f76f872871aeab121daf81fb99/src%2Flibstd%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ff64.rs?ref=c34472b77084c9f76f872871aeab121daf81fb99", "patch": "@@ -409,10 +409,10 @@ impl f64 {\n     /// # Examples\n     ///\n     /// ```\n-    /// let five = 5.0_f64;\n+    /// let twenty_five = 25.0_f64;\n     ///\n-    /// // log5(5) - 1 == 0\n-    /// let abs_difference = (five.log(5.0) - 1.0).abs();\n+    /// // log5(25) - 2 == 0\n+    /// let abs_difference = (twenty_five.log(5.0) - 2.0).abs();\n     ///\n     /// assert!(abs_difference < 1e-10);\n     /// ```\n@@ -425,10 +425,10 @@ impl f64 {\n     /// # Examples\n     ///\n     /// ```\n-    /// let two = 2.0_f64;\n+    /// let four = 4.0_f64;\n     ///\n-    /// // log2(2) - 1 == 0\n-    /// let abs_difference = (two.log2() - 1.0).abs();\n+    /// // log2(4) - 2 == 0\n+    /// let abs_difference = (four.log2() - 2.0).abs();\n     ///\n     /// assert!(abs_difference < 1e-10);\n     /// ```\n@@ -448,10 +448,10 @@ impl f64 {\n     /// # Examples\n     ///\n     /// ```\n-    /// let ten = 10.0_f64;\n+    /// let hundred = 100.0_f64;\n     ///\n-    /// // log10(10) - 1 == 0\n-    /// let abs_difference = (ten.log10() - 1.0).abs();\n+    /// // log10(100) - 2 == 0\n+    /// let abs_difference = (hundred.log10() - 2.0).abs();\n     ///\n     /// assert!(abs_difference < 1e-10);\n     /// ```"}, {"sha": "ad567c97c2c402a2054fe80d6950b86a66643f28", "filename": "src/libstd/io/buffered.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c34472b77084c9f76f872871aeab121daf81fb99/src%2Flibstd%2Fio%2Fbuffered.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c34472b77084c9f76f872871aeab121daf81fb99/src%2Flibstd%2Fio%2Fbuffered.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fbuffered.rs?ref=c34472b77084c9f76f872871aeab121daf81fb99", "patch": "@@ -24,7 +24,9 @@ use crate::memchr;\n ///\n /// When the `BufReader<R>` is dropped, the contents of its buffer will be\n /// discarded. Creating multiple instances of a `BufReader<R>` on the same\n-/// stream can cause data loss.\n+/// stream can cause data loss. Reading from the underlying reader after\n+/// unwrapping the `BufReader<R>` with `BufReader::into_inner` can also cause\n+/// data loss.\n ///\n /// [`Read`]: ../../std/io/trait.Read.html\n /// [`TcpStream::read`]: ../../std/net/struct.TcpStream.html#method.read\n@@ -179,7 +181,8 @@ impl<R> BufReader<R> {\n \n     /// Unwraps this `BufReader<R>`, returning the underlying reader.\n     ///\n-    /// Note that any leftover data in the internal buffer is lost.\n+    /// Note that any leftover data in the internal buffer is lost. Therefore,\n+    /// a following read from the underlying reader may lead to data loss.\n     ///\n     /// # Examples\n     ///"}, {"sha": "b1274a08cbe7729a798ec8c3d6ce9dc0a9d9f86b", "filename": "src/libstd/process.rs", "status": "modified", "additions": 17, "deletions": 12, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/c34472b77084c9f76f872871aeab121daf81fb99/src%2Flibstd%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c34472b77084c9f76f872871aeab121daf81fb99/src%2Flibstd%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprocess.rs?ref=c34472b77084c9f76f872871aeab121daf81fb99", "patch": "@@ -1661,7 +1661,7 @@ mod tests {\n     // FIXME(#10380) these tests should not all be ignored on android.\n \n     #[test]\n-    #[cfg_attr(target_os = \"android\", ignore)]\n+    #[cfg_attr(any(target_os = \"vxworks\", target_os = \"android\"), ignore)]\n     fn smoke() {\n         let p = if cfg!(target_os = \"windows\") {\n             Command::new(\"cmd\").args(&[\"/C\", \"exit 0\"]).spawn()\n@@ -1683,7 +1683,7 @@ mod tests {\n     }\n \n     #[test]\n-    #[cfg_attr(target_os = \"android\", ignore)]\n+    #[cfg_attr(any(target_os = \"vxworks\", target_os = \"android\"), ignore)]\n     fn exit_reported_right() {\n         let p = if cfg!(target_os = \"windows\") {\n             Command::new(\"cmd\").args(&[\"/C\", \"exit 1\"]).spawn()\n@@ -1698,7 +1698,7 @@ mod tests {\n \n     #[test]\n     #[cfg(unix)]\n-    #[cfg_attr(target_os = \"android\", ignore)]\n+    #[cfg_attr(any(target_os = \"vxworks\", target_os = \"android\"), ignore)]\n     fn signal_reported_right() {\n         use crate::os::unix::process::ExitStatusExt;\n \n@@ -1726,7 +1726,7 @@ mod tests {\n     }\n \n     #[test]\n-    #[cfg_attr(target_os = \"android\", ignore)]\n+    #[cfg_attr(any(target_os = \"vxworks\", target_os = \"android\"), ignore)]\n     fn stdout_works() {\n         if cfg!(target_os = \"windows\") {\n             let mut cmd = Command::new(\"cmd\");\n@@ -1740,7 +1740,7 @@ mod tests {\n     }\n \n     #[test]\n-    #[cfg_attr(any(windows, target_os = \"android\"), ignore)]\n+    #[cfg_attr(any(windows, target_os = \"android\", target_os = \"vxworks\"), ignore)]\n     fn set_current_dir_works() {\n         let mut cmd = Command::new(\"/bin/sh\");\n         cmd.arg(\"-c\").arg(\"pwd\")\n@@ -1750,7 +1750,7 @@ mod tests {\n     }\n \n     #[test]\n-    #[cfg_attr(any(windows, target_os = \"android\"), ignore)]\n+    #[cfg_attr(any(windows, target_os = \"android\", target_os = \"vxworks\"), ignore)]\n     fn stdin_works() {\n         let mut p = Command::new(\"/bin/sh\")\n                             .arg(\"-c\").arg(\"read line; echo $line\")\n@@ -1766,7 +1766,7 @@ mod tests {\n     }\n \n     #[test]\n-    #[cfg_attr(target_os = \"android\", ignore)]\n+    #[cfg_attr(any(target_os = \"vxworks\", target_os = \"android\"), ignore)]\n     fn test_process_status() {\n         let mut status = if cfg!(target_os = \"windows\") {\n             Command::new(\"cmd\").args(&[\"/C\", \"exit 1\"]).status().unwrap()\n@@ -1792,7 +1792,7 @@ mod tests {\n     }\n \n     #[test]\n-    #[cfg_attr(target_os = \"android\", ignore)]\n+    #[cfg_attr(any(target_os = \"vxworks\", target_os = \"android\"), ignore)]\n     fn test_process_output_output() {\n         let Output {status, stdout, stderr}\n              = if cfg!(target_os = \"windows\") {\n@@ -1808,7 +1808,7 @@ mod tests {\n     }\n \n     #[test]\n-    #[cfg_attr(target_os = \"android\", ignore)]\n+    #[cfg_attr(any(target_os = \"vxworks\", target_os = \"android\"), ignore)]\n     fn test_process_output_error() {\n         let Output {status, stdout, stderr}\n              = if cfg!(target_os = \"windows\") {\n@@ -1823,7 +1823,7 @@ mod tests {\n     }\n \n     #[test]\n-    #[cfg_attr(target_os = \"android\", ignore)]\n+    #[cfg_attr(any(target_os = \"vxworks\", target_os = \"android\"), ignore)]\n     fn test_finish_once() {\n         let mut prog = if cfg!(target_os = \"windows\") {\n             Command::new(\"cmd\").args(&[\"/C\", \"exit 1\"]).spawn().unwrap()\n@@ -1834,7 +1834,7 @@ mod tests {\n     }\n \n     #[test]\n-    #[cfg_attr(target_os = \"android\", ignore)]\n+    #[cfg_attr(any(target_os = \"vxworks\", target_os = \"android\"), ignore)]\n     fn test_finish_twice() {\n         let mut prog = if cfg!(target_os = \"windows\") {\n             Command::new(\"cmd\").args(&[\"/C\", \"exit 1\"]).spawn().unwrap()\n@@ -1846,7 +1846,7 @@ mod tests {\n     }\n \n     #[test]\n-    #[cfg_attr(target_os = \"android\", ignore)]\n+    #[cfg_attr(any(target_os = \"vxworks\", target_os = \"android\"), ignore)]\n     fn test_wait_with_output_once() {\n         let prog = if cfg!(target_os = \"windows\") {\n             Command::new(\"cmd\").args(&[\"/C\", \"echo hello\"]).stdout(Stdio::piped()).spawn().unwrap()\n@@ -1881,6 +1881,7 @@ mod tests {\n     }\n \n     #[test]\n+    #[cfg_attr(target_os = \"vxworks\", ignore)]\n     fn test_override_env() {\n         use crate::env;\n \n@@ -1901,6 +1902,7 @@ mod tests {\n     }\n \n     #[test]\n+    #[cfg_attr(target_os = \"vxworks\", ignore)]\n     fn test_add_to_env() {\n         let result = env_cmd().env(\"RUN_TEST_NEW_ENV\", \"123\").output().unwrap();\n         let output = String::from_utf8_lossy(&result.stdout).to_string();\n@@ -1910,6 +1912,7 @@ mod tests {\n     }\n \n     #[test]\n+    #[cfg_attr(target_os = \"vxworks\", ignore)]\n     fn test_capture_env_at_spawn() {\n         use crate::env;\n \n@@ -1965,6 +1968,7 @@ mod tests {\n \n     // Regression tests for #30862.\n     #[test]\n+    #[cfg_attr(target_os = \"vxworks\", ignore)]\n     fn test_interior_nul_in_env_key_is_error() {\n         match env_cmd().env(\"has-some-\\0\\0s-inside\", \"value\").spawn() {\n             Err(e) => assert_eq!(e.kind(), ErrorKind::InvalidInput),\n@@ -1973,6 +1977,7 @@ mod tests {\n     }\n \n     #[test]\n+    #[cfg_attr(target_os = \"vxworks\", ignore)]\n     fn test_interior_nul_in_env_value_is_error() {\n         match env_cmd().env(\"key\", \"has-some-\\0\\0s-inside\").spawn() {\n             Err(e) => assert_eq!(e.kind(), ErrorKind::InvalidInput),"}, {"sha": "e95f7df388c45bd52802ed5ba7e23a81acd8c9f6", "filename": "src/test/ui/async-await/issues/issue-62009-1.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c34472b77084c9f76f872871aeab121daf81fb99/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62009-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c34472b77084c9f76f872871aeab121daf81fb99/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62009-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62009-1.rs?ref=c34472b77084c9f76f872871aeab121daf81fb99", "patch": "@@ -1,6 +1,5 @@\n // edition:2018\n-// ignore-x86\n-// ^ due to stderr output differences\n+// ignore-x86 FIXME: missing sysroot spans (#53081)\n \n async fn print_dur() {}\n "}, {"sha": "6c8e0d0a5c4037cd1a5815efbcfd556c3858082a", "filename": "src/test/ui/async-await/issues/issue-62009-1.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c34472b77084c9f76f872871aeab121daf81fb99/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62009-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c34472b77084c9f76f872871aeab121daf81fb99/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62009-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62009-1.stderr?ref=c34472b77084c9f76f872871aeab121daf81fb99", "patch": "@@ -1,13 +1,13 @@\n error[E0728]: `await` is only allowed inside `async` functions and blocks\n-  --> $DIR/issue-62009-1.rs:8:5\n+  --> $DIR/issue-62009-1.rs:7:5\n    |\n LL | fn main() {\n    |    ---- this is not `async`\n LL |     async { let (); }.await;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^ only allowed inside `async` functions and blocks\n \n error[E0728]: `await` is only allowed inside `async` functions and blocks\n-  --> $DIR/issue-62009-1.rs:10:5\n+  --> $DIR/issue-62009-1.rs:9:5\n    |\n LL |   fn main() {\n    |      ---- this is not `async`\n@@ -19,19 +19,19 @@ LL | |     }.await;\n    | |___________^ only allowed inside `async` functions and blocks\n \n error[E0728]: `await` is only allowed inside `async` functions and blocks\n-  --> $DIR/issue-62009-1.rs:14:5\n+  --> $DIR/issue-62009-1.rs:13:5\n    |\n LL | fn main() {\n    |    ---- this is not `async`\n ...\n LL |     (|_| 2333).await;\n    |     ^^^^^^^^^^^^^^^^ only allowed inside `async` functions and blocks\n \n-error[E0277]: the trait bound `[closure@$DIR/issue-62009-1.rs:14:5: 14:15]: std::future::Future` is not satisfied\n-  --> $DIR/issue-62009-1.rs:14:5\n+error[E0277]: the trait bound `[closure@$DIR/issue-62009-1.rs:13:5: 13:15]: std::future::Future` is not satisfied\n+  --> $DIR/issue-62009-1.rs:13:5\n    |\n LL |     (|_| 2333).await;\n-   |     ^^^^^^^^^^^^^^^^ the trait `std::future::Future` is not implemented for `[closure@$DIR/issue-62009-1.rs:14:5: 14:15]`\n+   |     ^^^^^^^^^^^^^^^^ the trait `std::future::Future` is not implemented for `[closure@$DIR/issue-62009-1.rs:13:5: 13:15]`\n    | \n   ::: $SRC_DIR/libstd/future.rs:LL:COL\n    |"}, {"sha": "2f1e6c81ae5a8ef4eca2b2c04c6e6b5120a6c941", "filename": "src/test/ui/closures/closure-move-sync.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c34472b77084c9f76f872871aeab121daf81fb99/src%2Ftest%2Fui%2Fclosures%2Fclosure-move-sync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c34472b77084c9f76f872871aeab121daf81fb99/src%2Ftest%2Fui%2Fclosures%2Fclosure-move-sync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fclosure-move-sync.rs?ref=c34472b77084c9f76f872871aeab121daf81fb99", "patch": "@@ -1,5 +1,4 @@\n-// ignore-x86\n-// ^ due to stderr output differences\n+// ignore-x86 FIXME: missing sysroot spans (#53081)\n use std::thread;\n use std::sync::mpsc::channel;\n "}, {"sha": "ac5e3ccb42187d660992b4e9c25feec26da46e2c", "filename": "src/test/ui/closures/closure-move-sync.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c34472b77084c9f76f872871aeab121daf81fb99/src%2Ftest%2Fui%2Fclosures%2Fclosure-move-sync.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c34472b77084c9f76f872871aeab121daf81fb99/src%2Ftest%2Fui%2Fclosures%2Fclosure-move-sync.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fclosure-move-sync.stderr?ref=c34472b77084c9f76f872871aeab121daf81fb99", "patch": "@@ -1,5 +1,5 @@\n error[E0277]: `std::sync::mpsc::Receiver<()>` cannot be shared between threads safely\n-  --> $DIR/closure-move-sync.rs:8:13\n+  --> $DIR/closure-move-sync.rs:7:13\n    |\n LL |     let t = thread::spawn(|| {\n    |             ^^^^^^^^^^^^^ `std::sync::mpsc::Receiver<()>` cannot be shared between threads safely\n@@ -11,10 +11,10 @@ LL |     F: FnOnce() -> T, F: Send + 'static, T: Send + 'static\n    |\n    = help: the trait `std::marker::Sync` is not implemented for `std::sync::mpsc::Receiver<()>`\n    = note: required because of the requirements on the impl of `std::marker::Send` for `&std::sync::mpsc::Receiver<()>`\n-   = note: required because it appears within the type `[closure@$DIR/closure-move-sync.rs:8:27: 11:6 recv:&std::sync::mpsc::Receiver<()>]`\n+   = note: required because it appears within the type `[closure@$DIR/closure-move-sync.rs:7:27: 10:6 recv:&std::sync::mpsc::Receiver<()>]`\n \n error[E0277]: `std::sync::mpsc::Sender<()>` cannot be shared between threads safely\n-  --> $DIR/closure-move-sync.rs:20:5\n+  --> $DIR/closure-move-sync.rs:19:5\n    |\n LL |     thread::spawn(|| tx.send(()).unwrap());\n    |     ^^^^^^^^^^^^^ `std::sync::mpsc::Sender<()>` cannot be shared between threads safely\n@@ -26,7 +26,7 @@ LL |     F: FnOnce() -> T, F: Send + 'static, T: Send + 'static\n    |\n    = help: the trait `std::marker::Sync` is not implemented for `std::sync::mpsc::Sender<()>`\n    = note: required because of the requirements on the impl of `std::marker::Send` for `&std::sync::mpsc::Sender<()>`\n-   = note: required because it appears within the type `[closure@$DIR/closure-move-sync.rs:20:19: 20:42 tx:&std::sync::mpsc::Sender<()>]`\n+   = note: required because it appears within the type `[closure@$DIR/closure-move-sync.rs:19:19: 19:42 tx:&std::sync::mpsc::Sender<()>]`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "6c35b9212c6cb605e0d1202de37de1959fbdc404", "filename": "src/test/ui/consts/const-size_of-cycle.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c34472b77084c9f76f872871aeab121daf81fb99/src%2Ftest%2Fui%2Fconsts%2Fconst-size_of-cycle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c34472b77084c9f76f872871aeab121daf81fb99/src%2Ftest%2Fui%2Fconsts%2Fconst-size_of-cycle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-size_of-cycle.rs?ref=c34472b77084c9f76f872871aeab121daf81fb99", "patch": "@@ -1,5 +1,4 @@\n-// ignore-musl\n-// ignore-x86\n+// ignore-x86 FIXME: missing sysroot spans (#53081)\n // error-pattern: cycle detected\n \n struct Foo {"}, {"sha": "5b06ade44c5cbdb0be9197a357660063c4f44aaa", "filename": "src/test/ui/consts/const-size_of-cycle.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c34472b77084c9f76f872871aeab121daf81fb99/src%2Ftest%2Fui%2Fconsts%2Fconst-size_of-cycle.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c34472b77084c9f76f872871aeab121daf81fb99/src%2Ftest%2Fui%2Fconsts%2Fconst-size_of-cycle.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-size_of-cycle.stderr?ref=c34472b77084c9f76f872871aeab121daf81fb99", "patch": "@@ -1,11 +1,11 @@\n error[E0391]: cycle detected when const-evaluating + checking `Foo::bytes::{{constant}}#0`\n-  --> $DIR/const-size_of-cycle.rs:6:17\n+  --> $DIR/const-size_of-cycle.rs:5:17\n    |\n LL |     bytes: [u8; std::mem::size_of::<Foo>()]\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: ...which requires const-evaluating + checking `Foo::bytes::{{constant}}#0`...\n-  --> $DIR/const-size_of-cycle.rs:6:17\n+  --> $DIR/const-size_of-cycle.rs:5:17\n    |\n LL |     bytes: [u8; std::mem::size_of::<Foo>()]\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -23,7 +23,7 @@ LL |     pub fn size_of<T>() -> usize;\n    = note: ...which requires normalizing `ParamEnvAnd { param_env: ParamEnv { caller_bounds: [], reveal: All, def_id: None }, value: [u8; _] }`...\n    = note: ...which again requires const-evaluating + checking `Foo::bytes::{{constant}}#0`, completing the cycle\n note: cycle used when processing `Foo`\n-  --> $DIR/const-size_of-cycle.rs:5:1\n+  --> $DIR/const-size_of-cycle.rs:4:1\n    |\n LL | struct Foo {\n    | ^^^^^^^^^^"}, {"sha": "da00f81b96eadd144da1e55fe5d2f55a888d2976", "filename": "src/test/ui/derives/derives-span-Clone-enum-struct-variant.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c34472b77084c9f76f872871aeab121daf81fb99/src%2Ftest%2Fui%2Fderives%2Fderives-span-Clone-enum-struct-variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c34472b77084c9f76f872871aeab121daf81fb99/src%2Ftest%2Fui%2Fderives%2Fderives-span-Clone-enum-struct-variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Clone-enum-struct-variant.rs?ref=c34472b77084c9f76f872871aeab121daf81fb99", "patch": "@@ -1,3 +1,4 @@\n+// ignore-x86 FIXME: missing sysroot spans (#53081)\n // This file was auto-generated using 'src/etc/generate-deriving-span-tests.py'\n \n "}, {"sha": "796e6a2b744f7d9cc5114dcc2354023a66059d5d", "filename": "src/test/ui/derives/derives-span-Clone-enum-struct-variant.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c34472b77084c9f76f872871aeab121daf81fb99/src%2Ftest%2Fui%2Fderives%2Fderives-span-Clone-enum-struct-variant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c34472b77084c9f76f872871aeab121daf81fb99/src%2Ftest%2Fui%2Fderives%2Fderives-span-Clone-enum-struct-variant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Clone-enum-struct-variant.stderr?ref=c34472b77084c9f76f872871aeab121daf81fb99", "patch": "@@ -1,5 +1,5 @@\n error[E0277]: the trait bound `Error: std::clone::Clone` is not satisfied\n-  --> $DIR/derives-span-Clone-enum-struct-variant.rs:9:6\n+  --> $DIR/derives-span-Clone-enum-struct-variant.rs:10:6\n    |\n LL |      x: Error\n    |      ^^^^^^^^ the trait `std::clone::Clone` is not implemented for `Error`"}, {"sha": "98ae1b2c5b8a268663f336c2d3c0aaaa6d841a30", "filename": "src/test/ui/derives/derives-span-Clone-enum.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c34472b77084c9f76f872871aeab121daf81fb99/src%2Ftest%2Fui%2Fderives%2Fderives-span-Clone-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c34472b77084c9f76f872871aeab121daf81fb99/src%2Ftest%2Fui%2Fderives%2Fderives-span-Clone-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Clone-enum.rs?ref=c34472b77084c9f76f872871aeab121daf81fb99", "patch": "@@ -1,3 +1,4 @@\n+// ignore-x86 FIXME: missing sysroot spans (#53081)\n // This file was auto-generated using 'src/etc/generate-deriving-span-tests.py'\n \n "}, {"sha": "3e94bb551ea97b9e0586f4566b8d748bf94c4c77", "filename": "src/test/ui/derives/derives-span-Clone-enum.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c34472b77084c9f76f872871aeab121daf81fb99/src%2Ftest%2Fui%2Fderives%2Fderives-span-Clone-enum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c34472b77084c9f76f872871aeab121daf81fb99/src%2Ftest%2Fui%2Fderives%2Fderives-span-Clone-enum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Clone-enum.stderr?ref=c34472b77084c9f76f872871aeab121daf81fb99", "patch": "@@ -1,5 +1,5 @@\n error[E0277]: the trait bound `Error: std::clone::Clone` is not satisfied\n-  --> $DIR/derives-span-Clone-enum.rs:9:6\n+  --> $DIR/derives-span-Clone-enum.rs:10:6\n    |\n LL |      Error\n    |      ^^^^^ the trait `std::clone::Clone` is not implemented for `Error`"}, {"sha": "db677e26f50492cafee59de4d538bf3d721a9d98", "filename": "src/test/ui/derives/derives-span-Clone-struct.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c34472b77084c9f76f872871aeab121daf81fb99/src%2Ftest%2Fui%2Fderives%2Fderives-span-Clone-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c34472b77084c9f76f872871aeab121daf81fb99/src%2Ftest%2Fui%2Fderives%2Fderives-span-Clone-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Clone-struct.rs?ref=c34472b77084c9f76f872871aeab121daf81fb99", "patch": "@@ -1,3 +1,4 @@\n+// ignore-x86 FIXME: missing sysroot spans (#53081)\n // This file was auto-generated using 'src/etc/generate-deriving-span-tests.py'\n \n "}, {"sha": "0674d64fe9dfe2604cd9f211a83ebecae0ad8a86", "filename": "src/test/ui/derives/derives-span-Clone-struct.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c34472b77084c9f76f872871aeab121daf81fb99/src%2Ftest%2Fui%2Fderives%2Fderives-span-Clone-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c34472b77084c9f76f872871aeab121daf81fb99/src%2Ftest%2Fui%2Fderives%2Fderives-span-Clone-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Clone-struct.stderr?ref=c34472b77084c9f76f872871aeab121daf81fb99", "patch": "@@ -1,5 +1,5 @@\n error[E0277]: the trait bound `Error: std::clone::Clone` is not satisfied\n-  --> $DIR/derives-span-Clone-struct.rs:8:5\n+  --> $DIR/derives-span-Clone-struct.rs:9:5\n    |\n LL |     x: Error\n    |     ^^^^^^^^ the trait `std::clone::Clone` is not implemented for `Error`"}, {"sha": "d716b6fe900cadb693571af2c08c2cb23f086c4f", "filename": "src/test/ui/derives/derives-span-Clone-tuple-struct.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c34472b77084c9f76f872871aeab121daf81fb99/src%2Ftest%2Fui%2Fderives%2Fderives-span-Clone-tuple-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c34472b77084c9f76f872871aeab121daf81fb99/src%2Ftest%2Fui%2Fderives%2Fderives-span-Clone-tuple-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Clone-tuple-struct.rs?ref=c34472b77084c9f76f872871aeab121daf81fb99", "patch": "@@ -1,3 +1,4 @@\n+// ignore-x86 FIXME: missing sysroot spans (#53081)\n // This file was auto-generated using 'src/etc/generate-deriving-span-tests.py'\n \n "}, {"sha": "f6b4006014a3a877842cfcde415eb37a63d9e5d3", "filename": "src/test/ui/derives/derives-span-Clone-tuple-struct.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c34472b77084c9f76f872871aeab121daf81fb99/src%2Ftest%2Fui%2Fderives%2Fderives-span-Clone-tuple-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c34472b77084c9f76f872871aeab121daf81fb99/src%2Ftest%2Fui%2Fderives%2Fderives-span-Clone-tuple-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Clone-tuple-struct.stderr?ref=c34472b77084c9f76f872871aeab121daf81fb99", "patch": "@@ -1,5 +1,5 @@\n error[E0277]: the trait bound `Error: std::clone::Clone` is not satisfied\n-  --> $DIR/derives-span-Clone-tuple-struct.rs:8:5\n+  --> $DIR/derives-span-Clone-tuple-struct.rs:9:5\n    |\n LL |     Error\n    |     ^^^^^ the trait `std::clone::Clone` is not implemented for `Error`"}, {"sha": "10deccb8ad7c1900640f7658c96ab6ca231f14e3", "filename": "src/test/ui/derives/derives-span-Debug-enum-struct-variant.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c34472b77084c9f76f872871aeab121daf81fb99/src%2Ftest%2Fui%2Fderives%2Fderives-span-Debug-enum-struct-variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c34472b77084c9f76f872871aeab121daf81fb99/src%2Ftest%2Fui%2Fderives%2Fderives-span-Debug-enum-struct-variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Debug-enum-struct-variant.rs?ref=c34472b77084c9f76f872871aeab121daf81fb99", "patch": "@@ -1,3 +1,4 @@\n+// ignore-x86 FIXME: missing sysroot spans (#53081)\n // This file was auto-generated using 'src/etc/generate-deriving-span-tests.py'\n \n "}, {"sha": "6a0e382b9e545f91041278ff45ec1b0729622ecb", "filename": "src/test/ui/derives/derives-span-Debug-enum-struct-variant.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c34472b77084c9f76f872871aeab121daf81fb99/src%2Ftest%2Fui%2Fderives%2Fderives-span-Debug-enum-struct-variant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c34472b77084c9f76f872871aeab121daf81fb99/src%2Ftest%2Fui%2Fderives%2Fderives-span-Debug-enum-struct-variant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Debug-enum-struct-variant.stderr?ref=c34472b77084c9f76f872871aeab121daf81fb99", "patch": "@@ -1,5 +1,5 @@\n error[E0277]: `Error` doesn't implement `std::fmt::Debug`\n-  --> $DIR/derives-span-Debug-enum-struct-variant.rs:9:6\n+  --> $DIR/derives-span-Debug-enum-struct-variant.rs:10:6\n    |\n LL |      x: Error\n    |      ^^^^^^^^ `Error` cannot be formatted using `{:?}`"}, {"sha": "b8bed0eab552e53d3ead5f1338a6a26fe515e5c5", "filename": "src/test/ui/derives/derives-span-Debug-enum.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c34472b77084c9f76f872871aeab121daf81fb99/src%2Ftest%2Fui%2Fderives%2Fderives-span-Debug-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c34472b77084c9f76f872871aeab121daf81fb99/src%2Ftest%2Fui%2Fderives%2Fderives-span-Debug-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Debug-enum.rs?ref=c34472b77084c9f76f872871aeab121daf81fb99", "patch": "@@ -1,3 +1,4 @@\n+// ignore-x86 FIXME: missing sysroot spans (#53081)\n // This file was auto-generated using 'src/etc/generate-deriving-span-tests.py'\n \n "}, {"sha": "f27499ba441a08a43ae005eb3095838bb3b4e321", "filename": "src/test/ui/derives/derives-span-Debug-enum.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c34472b77084c9f76f872871aeab121daf81fb99/src%2Ftest%2Fui%2Fderives%2Fderives-span-Debug-enum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c34472b77084c9f76f872871aeab121daf81fb99/src%2Ftest%2Fui%2Fderives%2Fderives-span-Debug-enum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Debug-enum.stderr?ref=c34472b77084c9f76f872871aeab121daf81fb99", "patch": "@@ -1,5 +1,5 @@\n error[E0277]: `Error` doesn't implement `std::fmt::Debug`\n-  --> $DIR/derives-span-Debug-enum.rs:9:6\n+  --> $DIR/derives-span-Debug-enum.rs:10:6\n    |\n LL |      Error\n    |      ^^^^^ `Error` cannot be formatted using `{:?}`"}, {"sha": "22f037ee36f245c8ca70cdd2623f275d267a7603", "filename": "src/test/ui/derives/derives-span-Debug-struct.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c34472b77084c9f76f872871aeab121daf81fb99/src%2Ftest%2Fui%2Fderives%2Fderives-span-Debug-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c34472b77084c9f76f872871aeab121daf81fb99/src%2Ftest%2Fui%2Fderives%2Fderives-span-Debug-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Debug-struct.rs?ref=c34472b77084c9f76f872871aeab121daf81fb99", "patch": "@@ -1,3 +1,4 @@\n+// ignore-x86 FIXME: missing sysroot spans (#53081)\n // This file was auto-generated using 'src/etc/generate-deriving-span-tests.py'\n \n "}, {"sha": "09d62f12b0449d125bf420d3c220cd4374584f52", "filename": "src/test/ui/derives/derives-span-Debug-struct.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c34472b77084c9f76f872871aeab121daf81fb99/src%2Ftest%2Fui%2Fderives%2Fderives-span-Debug-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c34472b77084c9f76f872871aeab121daf81fb99/src%2Ftest%2Fui%2Fderives%2Fderives-span-Debug-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Debug-struct.stderr?ref=c34472b77084c9f76f872871aeab121daf81fb99", "patch": "@@ -1,5 +1,5 @@\n error[E0277]: `Error` doesn't implement `std::fmt::Debug`\n-  --> $DIR/derives-span-Debug-struct.rs:8:5\n+  --> $DIR/derives-span-Debug-struct.rs:9:5\n    |\n LL |     x: Error\n    |     ^^^^^^^^ `Error` cannot be formatted using `{:?}`"}, {"sha": "c693facfeaa92678641321635df71c5274b28ea0", "filename": "src/test/ui/derives/derives-span-Debug-tuple-struct.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c34472b77084c9f76f872871aeab121daf81fb99/src%2Ftest%2Fui%2Fderives%2Fderives-span-Debug-tuple-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c34472b77084c9f76f872871aeab121daf81fb99/src%2Ftest%2Fui%2Fderives%2Fderives-span-Debug-tuple-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Debug-tuple-struct.rs?ref=c34472b77084c9f76f872871aeab121daf81fb99", "patch": "@@ -1,3 +1,4 @@\n+// ignore-x86 FIXME: missing sysroot spans (#53081)\n // This file was auto-generated using 'src/etc/generate-deriving-span-tests.py'\n \n "}, {"sha": "f100cf32fdf859851c7ac87932852f118d93df11", "filename": "src/test/ui/derives/derives-span-Debug-tuple-struct.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c34472b77084c9f76f872871aeab121daf81fb99/src%2Ftest%2Fui%2Fderives%2Fderives-span-Debug-tuple-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c34472b77084c9f76f872871aeab121daf81fb99/src%2Ftest%2Fui%2Fderives%2Fderives-span-Debug-tuple-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Debug-tuple-struct.stderr?ref=c34472b77084c9f76f872871aeab121daf81fb99", "patch": "@@ -1,5 +1,5 @@\n error[E0277]: `Error` doesn't implement `std::fmt::Debug`\n-  --> $DIR/derives-span-Debug-tuple-struct.rs:8:5\n+  --> $DIR/derives-span-Debug-tuple-struct.rs:9:5\n    |\n LL |     Error\n    |     ^^^^^ `Error` cannot be formatted using `{:?}`"}, {"sha": "1654883998def04e7f60347d817ec9174aa18259", "filename": "src/test/ui/derives/derives-span-Default-struct.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c34472b77084c9f76f872871aeab121daf81fb99/src%2Ftest%2Fui%2Fderives%2Fderives-span-Default-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c34472b77084c9f76f872871aeab121daf81fb99/src%2Ftest%2Fui%2Fderives%2Fderives-span-Default-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Default-struct.rs?ref=c34472b77084c9f76f872871aeab121daf81fb99", "patch": "@@ -1,3 +1,4 @@\n+// ignore-x86 FIXME: missing sysroot spans (#53081)\n // This file was auto-generated using 'src/etc/generate-deriving-span-tests.py'\n \n "}, {"sha": "11664d400ee715c31ee2bf52610eb8699eebc00f", "filename": "src/test/ui/derives/derives-span-Default-struct.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c34472b77084c9f76f872871aeab121daf81fb99/src%2Ftest%2Fui%2Fderives%2Fderives-span-Default-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c34472b77084c9f76f872871aeab121daf81fb99/src%2Ftest%2Fui%2Fderives%2Fderives-span-Default-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Default-struct.stderr?ref=c34472b77084c9f76f872871aeab121daf81fb99", "patch": "@@ -1,5 +1,5 @@\n error[E0277]: the trait bound `Error: std::default::Default` is not satisfied\n-  --> $DIR/derives-span-Default-struct.rs:8:5\n+  --> $DIR/derives-span-Default-struct.rs:9:5\n    |\n LL |     x: Error\n    |     ^^^^^^^^ the trait `std::default::Default` is not implemented for `Error`"}, {"sha": "f1390c8b6f6b5c01591e65bbb3e11f4fd444d04b", "filename": "src/test/ui/derives/derives-span-Default-tuple-struct.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c34472b77084c9f76f872871aeab121daf81fb99/src%2Ftest%2Fui%2Fderives%2Fderives-span-Default-tuple-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c34472b77084c9f76f872871aeab121daf81fb99/src%2Ftest%2Fui%2Fderives%2Fderives-span-Default-tuple-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Default-tuple-struct.rs?ref=c34472b77084c9f76f872871aeab121daf81fb99", "patch": "@@ -1,3 +1,4 @@\n+// ignore-x86 FIXME: missing sysroot spans (#53081)\n // This file was auto-generated using 'src/etc/generate-deriving-span-tests.py'\n \n "}, {"sha": "c79f093942fdda364916dead04bf17f144f278a2", "filename": "src/test/ui/derives/derives-span-Default-tuple-struct.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c34472b77084c9f76f872871aeab121daf81fb99/src%2Ftest%2Fui%2Fderives%2Fderives-span-Default-tuple-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c34472b77084c9f76f872871aeab121daf81fb99/src%2Ftest%2Fui%2Fderives%2Fderives-span-Default-tuple-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Default-tuple-struct.stderr?ref=c34472b77084c9f76f872871aeab121daf81fb99", "patch": "@@ -1,5 +1,5 @@\n error[E0277]: the trait bound `Error: std::default::Default` is not satisfied\n-  --> $DIR/derives-span-Default-tuple-struct.rs:8:5\n+  --> $DIR/derives-span-Default-tuple-struct.rs:9:5\n    |\n LL |     Error\n    |     ^^^^^ the trait `std::default::Default` is not implemented for `Error`"}, {"sha": "77c386d7f909494a70d63f543eec5a566bf5d560", "filename": "src/test/ui/derives/derives-span-Eq-enum-struct-variant.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c34472b77084c9f76f872871aeab121daf81fb99/src%2Ftest%2Fui%2Fderives%2Fderives-span-Eq-enum-struct-variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c34472b77084c9f76f872871aeab121daf81fb99/src%2Ftest%2Fui%2Fderives%2Fderives-span-Eq-enum-struct-variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Eq-enum-struct-variant.rs?ref=c34472b77084c9f76f872871aeab121daf81fb99", "patch": "@@ -1,3 +1,4 @@\n+// ignore-x86 FIXME: missing sysroot spans (#53081)\n // This file was auto-generated using 'src/etc/generate-deriving-span-tests.py'\n \n #[derive(PartialEq)]"}, {"sha": "87c0313ca1fc69aaad6b2a0f25300941bbc8e2c0", "filename": "src/test/ui/derives/derives-span-Eq-enum-struct-variant.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c34472b77084c9f76f872871aeab121daf81fb99/src%2Ftest%2Fui%2Fderives%2Fderives-span-Eq-enum-struct-variant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c34472b77084c9f76f872871aeab121daf81fb99/src%2Ftest%2Fui%2Fderives%2Fderives-span-Eq-enum-struct-variant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Eq-enum-struct-variant.stderr?ref=c34472b77084c9f76f872871aeab121daf81fb99", "patch": "@@ -1,5 +1,5 @@\n error[E0277]: the trait bound `Error: std::cmp::Eq` is not satisfied\n-  --> $DIR/derives-span-Eq-enum-struct-variant.rs:9:6\n+  --> $DIR/derives-span-Eq-enum-struct-variant.rs:10:6\n    |\n LL |      x: Error\n    |      ^^^^^^^^ the trait `std::cmp::Eq` is not implemented for `Error`"}, {"sha": "c7fe37813325d273991834b05c96900889b359be", "filename": "src/test/ui/derives/derives-span-Eq-enum.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c34472b77084c9f76f872871aeab121daf81fb99/src%2Ftest%2Fui%2Fderives%2Fderives-span-Eq-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c34472b77084c9f76f872871aeab121daf81fb99/src%2Ftest%2Fui%2Fderives%2Fderives-span-Eq-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Eq-enum.rs?ref=c34472b77084c9f76f872871aeab121daf81fb99", "patch": "@@ -1,3 +1,4 @@\n+// ignore-x86 FIXME: missing sysroot spans (#53081)\n // This file was auto-generated using 'src/etc/generate-deriving-span-tests.py'\n \n #[derive(PartialEq)]"}, {"sha": "c8db6d3ff2f7bcdda6d42d03becbc44aba319bca", "filename": "src/test/ui/derives/derives-span-Eq-enum.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c34472b77084c9f76f872871aeab121daf81fb99/src%2Ftest%2Fui%2Fderives%2Fderives-span-Eq-enum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c34472b77084c9f76f872871aeab121daf81fb99/src%2Ftest%2Fui%2Fderives%2Fderives-span-Eq-enum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Eq-enum.stderr?ref=c34472b77084c9f76f872871aeab121daf81fb99", "patch": "@@ -1,5 +1,5 @@\n error[E0277]: the trait bound `Error: std::cmp::Eq` is not satisfied\n-  --> $DIR/derives-span-Eq-enum.rs:9:6\n+  --> $DIR/derives-span-Eq-enum.rs:10:6\n    |\n LL |      Error\n    |      ^^^^^ the trait `std::cmp::Eq` is not implemented for `Error`"}, {"sha": "8674cadb3092d756102384cc50af17513bf52bbe", "filename": "src/test/ui/derives/derives-span-Eq-struct.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c34472b77084c9f76f872871aeab121daf81fb99/src%2Ftest%2Fui%2Fderives%2Fderives-span-Eq-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c34472b77084c9f76f872871aeab121daf81fb99/src%2Ftest%2Fui%2Fderives%2Fderives-span-Eq-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Eq-struct.rs?ref=c34472b77084c9f76f872871aeab121daf81fb99", "patch": "@@ -1,3 +1,4 @@\n+// ignore-x86 FIXME: missing sysroot spans (#53081)\n // This file was auto-generated using 'src/etc/generate-deriving-span-tests.py'\n \n #[derive(PartialEq)]"}, {"sha": "df4ea5b1d4144436531d998b548551551b8c9c82", "filename": "src/test/ui/derives/derives-span-Eq-struct.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c34472b77084c9f76f872871aeab121daf81fb99/src%2Ftest%2Fui%2Fderives%2Fderives-span-Eq-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c34472b77084c9f76f872871aeab121daf81fb99/src%2Ftest%2Fui%2Fderives%2Fderives-span-Eq-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Eq-struct.stderr?ref=c34472b77084c9f76f872871aeab121daf81fb99", "patch": "@@ -1,5 +1,5 @@\n error[E0277]: the trait bound `Error: std::cmp::Eq` is not satisfied\n-  --> $DIR/derives-span-Eq-struct.rs:8:5\n+  --> $DIR/derives-span-Eq-struct.rs:9:5\n    |\n LL |     x: Error\n    |     ^^^^^^^^ the trait `std::cmp::Eq` is not implemented for `Error`"}, {"sha": "99cc9582b5b607cd56c9021707be428fe2b8a8b0", "filename": "src/test/ui/derives/derives-span-Eq-tuple-struct.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c34472b77084c9f76f872871aeab121daf81fb99/src%2Ftest%2Fui%2Fderives%2Fderives-span-Eq-tuple-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c34472b77084c9f76f872871aeab121daf81fb99/src%2Ftest%2Fui%2Fderives%2Fderives-span-Eq-tuple-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Eq-tuple-struct.rs?ref=c34472b77084c9f76f872871aeab121daf81fb99", "patch": "@@ -1,3 +1,4 @@\n+// ignore-x86 FIXME: missing sysroot spans (#53081)\n // This file was auto-generated using 'src/etc/generate-deriving-span-tests.py'\n \n #[derive(PartialEq)]"}, {"sha": "def06d710867f57f1b3e8153de002d7d927604c4", "filename": "src/test/ui/derives/derives-span-Eq-tuple-struct.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c34472b77084c9f76f872871aeab121daf81fb99/src%2Ftest%2Fui%2Fderives%2Fderives-span-Eq-tuple-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c34472b77084c9f76f872871aeab121daf81fb99/src%2Ftest%2Fui%2Fderives%2Fderives-span-Eq-tuple-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Eq-tuple-struct.stderr?ref=c34472b77084c9f76f872871aeab121daf81fb99", "patch": "@@ -1,5 +1,5 @@\n error[E0277]: the trait bound `Error: std::cmp::Eq` is not satisfied\n-  --> $DIR/derives-span-Eq-tuple-struct.rs:8:5\n+  --> $DIR/derives-span-Eq-tuple-struct.rs:9:5\n    |\n LL |     Error\n    |     ^^^^^ the trait `std::cmp::Eq` is not implemented for `Error`"}, {"sha": "604b0842fa93c9233a760b8eb9f32ac196399472", "filename": "src/test/ui/derives/derives-span-Hash-enum-struct-variant.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c34472b77084c9f76f872871aeab121daf81fb99/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-enum-struct-variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c34472b77084c9f76f872871aeab121daf81fb99/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-enum-struct-variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-enum-struct-variant.rs?ref=c34472b77084c9f76f872871aeab121daf81fb99", "patch": "@@ -1,5 +1,4 @@\n-// ignore-x86\n-// ^ due to stderr output differences\n+// ignore-x86 FIXME: missing sysroot spans (#53081)\n // This file was auto-generated using 'src/etc/generate-deriving-span-tests.py'\n \n "}, {"sha": "cc1caf78041864c39195416c54c4e4264aa185a2", "filename": "src/test/ui/derives/derives-span-Hash-enum-struct-variant.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c34472b77084c9f76f872871aeab121daf81fb99/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-enum-struct-variant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c34472b77084c9f76f872871aeab121daf81fb99/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-enum-struct-variant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-enum-struct-variant.stderr?ref=c34472b77084c9f76f872871aeab121daf81fb99", "patch": "@@ -1,5 +1,5 @@\n error[E0277]: the trait bound `Error: std::hash::Hash` is not satisfied\n-  --> $DIR/derives-span-Hash-enum-struct-variant.rs:11:6\n+  --> $DIR/derives-span-Hash-enum-struct-variant.rs:10:6\n    |\n LL |      x: Error\n    |      ^^^^^^^^ the trait `std::hash::Hash` is not implemented for `Error`"}, {"sha": "bf3033a232c0c2c050272b71ef35103c8326c526", "filename": "src/test/ui/derives/derives-span-Hash-enum.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c34472b77084c9f76f872871aeab121daf81fb99/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c34472b77084c9f76f872871aeab121daf81fb99/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-enum.rs?ref=c34472b77084c9f76f872871aeab121daf81fb99", "patch": "@@ -1,5 +1,4 @@\n-// ignore-x86\n-// ^ due to stderr output differences\n+// ignore-x86 FIXME: missing sysroot spans (#53081)\n // This file was auto-generated using 'src/etc/generate-deriving-span-tests.py'\n \n "}, {"sha": "246d821ed2bf632584b673beaa7623e7c3dd5f83", "filename": "src/test/ui/derives/derives-span-Hash-enum.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c34472b77084c9f76f872871aeab121daf81fb99/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-enum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c34472b77084c9f76f872871aeab121daf81fb99/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-enum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-enum.stderr?ref=c34472b77084c9f76f872871aeab121daf81fb99", "patch": "@@ -1,5 +1,5 @@\n error[E0277]: the trait bound `Error: std::hash::Hash` is not satisfied\n-  --> $DIR/derives-span-Hash-enum.rs:11:6\n+  --> $DIR/derives-span-Hash-enum.rs:10:6\n    |\n LL |      Error\n    |      ^^^^^ the trait `std::hash::Hash` is not implemented for `Error`"}, {"sha": "b6abb9d229e134cf1712f4db7a37d8b252e86be6", "filename": "src/test/ui/derives/derives-span-Hash-struct.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c34472b77084c9f76f872871aeab121daf81fb99/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c34472b77084c9f76f872871aeab121daf81fb99/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-struct.rs?ref=c34472b77084c9f76f872871aeab121daf81fb99", "patch": "@@ -1,5 +1,4 @@\n-// ignore-x86\n-// ^ due to stderr output differences\n+// ignore-x86 FIXME: missing sysroot spans (#53081)\n // This file was auto-generated using 'src/etc/generate-deriving-span-tests.py'\n \n "}, {"sha": "720c127635e624b8ba3aa96b432f3a23805ac72d", "filename": "src/test/ui/derives/derives-span-Hash-struct.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c34472b77084c9f76f872871aeab121daf81fb99/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c34472b77084c9f76f872871aeab121daf81fb99/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-struct.stderr?ref=c34472b77084c9f76f872871aeab121daf81fb99", "patch": "@@ -1,5 +1,5 @@\n error[E0277]: the trait bound `Error: std::hash::Hash` is not satisfied\n-  --> $DIR/derives-span-Hash-struct.rs:10:5\n+  --> $DIR/derives-span-Hash-struct.rs:9:5\n    |\n LL |     x: Error\n    |     ^^^^^^^^ the trait `std::hash::Hash` is not implemented for `Error`"}, {"sha": "e01351fe8a6bac5f386f98429630cd3702992686", "filename": "src/test/ui/derives/derives-span-Hash-tuple-struct.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c34472b77084c9f76f872871aeab121daf81fb99/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-tuple-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c34472b77084c9f76f872871aeab121daf81fb99/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-tuple-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-tuple-struct.rs?ref=c34472b77084c9f76f872871aeab121daf81fb99", "patch": "@@ -1,5 +1,4 @@\n-// ignore-x86\n-// ^ due to stderr output differences\n+// ignore-x86 FIXME: missing sysroot spans (#53081)\n // This file was auto-generated using 'src/etc/generate-deriving-span-tests.py'\n \n "}, {"sha": "1fd1e601eca013ebc1b6a05274c59b9c4ff8aac1", "filename": "src/test/ui/derives/derives-span-Hash-tuple-struct.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c34472b77084c9f76f872871aeab121daf81fb99/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-tuple-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c34472b77084c9f76f872871aeab121daf81fb99/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-tuple-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-tuple-struct.stderr?ref=c34472b77084c9f76f872871aeab121daf81fb99", "patch": "@@ -1,5 +1,5 @@\n error[E0277]: the trait bound `Error: std::hash::Hash` is not satisfied\n-  --> $DIR/derives-span-Hash-tuple-struct.rs:10:5\n+  --> $DIR/derives-span-Hash-tuple-struct.rs:9:5\n    |\n LL |     Error\n    |     ^^^^^ the trait `std::hash::Hash` is not implemented for `Error`"}, {"sha": "6d516d4b0adc32644edb3db941f576b103f8891c", "filename": "src/test/ui/derives/derives-span-Ord-enum-struct-variant.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c34472b77084c9f76f872871aeab121daf81fb99/src%2Ftest%2Fui%2Fderives%2Fderives-span-Ord-enum-struct-variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c34472b77084c9f76f872871aeab121daf81fb99/src%2Ftest%2Fui%2Fderives%2Fderives-span-Ord-enum-struct-variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Ord-enum-struct-variant.rs?ref=c34472b77084c9f76f872871aeab121daf81fb99", "patch": "@@ -1,3 +1,4 @@\n+// ignore-x86 FIXME: missing sysroot spans (#53081)\n // This file was auto-generated using 'src/etc/generate-deriving-span-tests.py'\n \n #[derive(Eq,PartialOrd,PartialEq)]"}, {"sha": "f0d7e4465a79bb65448032c2978b190858aa77b2", "filename": "src/test/ui/derives/derives-span-Ord-enum-struct-variant.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c34472b77084c9f76f872871aeab121daf81fb99/src%2Ftest%2Fui%2Fderives%2Fderives-span-Ord-enum-struct-variant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c34472b77084c9f76f872871aeab121daf81fb99/src%2Ftest%2Fui%2Fderives%2Fderives-span-Ord-enum-struct-variant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Ord-enum-struct-variant.stderr?ref=c34472b77084c9f76f872871aeab121daf81fb99", "patch": "@@ -1,5 +1,5 @@\n error[E0277]: the trait bound `Error: std::cmp::Ord` is not satisfied\n-  --> $DIR/derives-span-Ord-enum-struct-variant.rs:9:6\n+  --> $DIR/derives-span-Ord-enum-struct-variant.rs:10:6\n    |\n LL |      x: Error\n    |      ^^^^^^^^ the trait `std::cmp::Ord` is not implemented for `Error`"}, {"sha": "51b5d7f0ed1d2922ff9eead96e4da8de9bfbe443", "filename": "src/test/ui/derives/derives-span-Ord-enum.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c34472b77084c9f76f872871aeab121daf81fb99/src%2Ftest%2Fui%2Fderives%2Fderives-span-Ord-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c34472b77084c9f76f872871aeab121daf81fb99/src%2Ftest%2Fui%2Fderives%2Fderives-span-Ord-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Ord-enum.rs?ref=c34472b77084c9f76f872871aeab121daf81fb99", "patch": "@@ -1,3 +1,4 @@\n+// ignore-x86 FIXME: missing sysroot spans (#53081)\n // This file was auto-generated using 'src/etc/generate-deriving-span-tests.py'\n \n #[derive(Eq,PartialOrd,PartialEq)]"}, {"sha": "37eca92e77e6328d4ed2068b0ca9356c55c26380", "filename": "src/test/ui/derives/derives-span-Ord-enum.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c34472b77084c9f76f872871aeab121daf81fb99/src%2Ftest%2Fui%2Fderives%2Fderives-span-Ord-enum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c34472b77084c9f76f872871aeab121daf81fb99/src%2Ftest%2Fui%2Fderives%2Fderives-span-Ord-enum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Ord-enum.stderr?ref=c34472b77084c9f76f872871aeab121daf81fb99", "patch": "@@ -1,5 +1,5 @@\n error[E0277]: the trait bound `Error: std::cmp::Ord` is not satisfied\n-  --> $DIR/derives-span-Ord-enum.rs:9:6\n+  --> $DIR/derives-span-Ord-enum.rs:10:6\n    |\n LL |      Error\n    |      ^^^^^ the trait `std::cmp::Ord` is not implemented for `Error`"}, {"sha": "c924ecaa315fc886921956d48527ad8f5224e222", "filename": "src/test/ui/derives/derives-span-Ord-struct.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c34472b77084c9f76f872871aeab121daf81fb99/src%2Ftest%2Fui%2Fderives%2Fderives-span-Ord-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c34472b77084c9f76f872871aeab121daf81fb99/src%2Ftest%2Fui%2Fderives%2Fderives-span-Ord-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Ord-struct.rs?ref=c34472b77084c9f76f872871aeab121daf81fb99", "patch": "@@ -1,3 +1,4 @@\n+// ignore-x86 FIXME: missing sysroot spans (#53081)\n // This file was auto-generated using 'src/etc/generate-deriving-span-tests.py'\n \n #[derive(Eq,PartialOrd,PartialEq)]"}, {"sha": "72c1fe4803c4d35f6ebbf9ef054919c8ab9e32a0", "filename": "src/test/ui/derives/derives-span-Ord-struct.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c34472b77084c9f76f872871aeab121daf81fb99/src%2Ftest%2Fui%2Fderives%2Fderives-span-Ord-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c34472b77084c9f76f872871aeab121daf81fb99/src%2Ftest%2Fui%2Fderives%2Fderives-span-Ord-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Ord-struct.stderr?ref=c34472b77084c9f76f872871aeab121daf81fb99", "patch": "@@ -1,5 +1,5 @@\n error[E0277]: the trait bound `Error: std::cmp::Ord` is not satisfied\n-  --> $DIR/derives-span-Ord-struct.rs:8:5\n+  --> $DIR/derives-span-Ord-struct.rs:9:5\n    |\n LL |     x: Error\n    |     ^^^^^^^^ the trait `std::cmp::Ord` is not implemented for `Error`"}, {"sha": "80546634690c39c2f49c5619ff0b175c6e736e2d", "filename": "src/test/ui/derives/derives-span-Ord-tuple-struct.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c34472b77084c9f76f872871aeab121daf81fb99/src%2Ftest%2Fui%2Fderives%2Fderives-span-Ord-tuple-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c34472b77084c9f76f872871aeab121daf81fb99/src%2Ftest%2Fui%2Fderives%2Fderives-span-Ord-tuple-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Ord-tuple-struct.rs?ref=c34472b77084c9f76f872871aeab121daf81fb99", "patch": "@@ -1,3 +1,4 @@\n+// ignore-x86 FIXME: missing sysroot spans (#53081)\n // This file was auto-generated using 'src/etc/generate-deriving-span-tests.py'\n \n #[derive(Eq,PartialOrd,PartialEq)]"}, {"sha": "642c8579b514c71be7bc1d39b9bb1d0a9f43a700", "filename": "src/test/ui/derives/derives-span-Ord-tuple-struct.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c34472b77084c9f76f872871aeab121daf81fb99/src%2Ftest%2Fui%2Fderives%2Fderives-span-Ord-tuple-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c34472b77084c9f76f872871aeab121daf81fb99/src%2Ftest%2Fui%2Fderives%2Fderives-span-Ord-tuple-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Ord-tuple-struct.stderr?ref=c34472b77084c9f76f872871aeab121daf81fb99", "patch": "@@ -1,5 +1,5 @@\n error[E0277]: the trait bound `Error: std::cmp::Ord` is not satisfied\n-  --> $DIR/derives-span-Ord-tuple-struct.rs:8:5\n+  --> $DIR/derives-span-Ord-tuple-struct.rs:9:5\n    |\n LL |     Error\n    |     ^^^^^ the trait `std::cmp::Ord` is not implemented for `Error`"}, {"sha": "b13798686c001b5927ec3d8c7056d09b2391bfa7", "filename": "src/test/ui/derives/derives-span-PartialEq-enum-struct-variant.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c34472b77084c9f76f872871aeab121daf81fb99/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialEq-enum-struct-variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c34472b77084c9f76f872871aeab121daf81fb99/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialEq-enum-struct-variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialEq-enum-struct-variant.rs?ref=c34472b77084c9f76f872871aeab121daf81fb99", "patch": "@@ -1,3 +1,4 @@\n+// ignore-x86 FIXME: missing sysroot spans (#53081)\n // This file was auto-generated using 'src/etc/generate-deriving-span-tests.py'\n \n "}, {"sha": "d6a565256018767ce8b625d837225bd168559197", "filename": "src/test/ui/derives/derives-span-PartialEq-enum-struct-variant.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c34472b77084c9f76f872871aeab121daf81fb99/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialEq-enum-struct-variant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c34472b77084c9f76f872871aeab121daf81fb99/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialEq-enum-struct-variant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialEq-enum-struct-variant.stderr?ref=c34472b77084c9f76f872871aeab121daf81fb99", "patch": "@@ -1,13 +1,13 @@\n error[E0369]: binary operation `==` cannot be applied to type `Error`\n-  --> $DIR/derives-span-PartialEq-enum-struct-variant.rs:9:6\n+  --> $DIR/derives-span-PartialEq-enum-struct-variant.rs:10:6\n    |\n LL |      x: Error\n    |      ^^^^^^^^\n    |\n    = note: an implementation of `std::cmp::PartialEq` might be missing for `Error`\n \n error[E0369]: binary operation `!=` cannot be applied to type `Error`\n-  --> $DIR/derives-span-PartialEq-enum-struct-variant.rs:9:6\n+  --> $DIR/derives-span-PartialEq-enum-struct-variant.rs:10:6\n    |\n LL |      x: Error\n    |      ^^^^^^^^"}, {"sha": "5f8f05ad94b4784bdaa1c3d3500652de3b691e78", "filename": "src/test/ui/derives/derives-span-PartialEq-enum.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c34472b77084c9f76f872871aeab121daf81fb99/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialEq-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c34472b77084c9f76f872871aeab121daf81fb99/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialEq-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialEq-enum.rs?ref=c34472b77084c9f76f872871aeab121daf81fb99", "patch": "@@ -1,3 +1,4 @@\n+// ignore-x86 FIXME: missing sysroot spans (#53081)\n // This file was auto-generated using 'src/etc/generate-deriving-span-tests.py'\n \n "}, {"sha": "1f5ad42a3aa33e5cf97bace9350151444ba73249", "filename": "src/test/ui/derives/derives-span-PartialEq-enum.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c34472b77084c9f76f872871aeab121daf81fb99/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialEq-enum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c34472b77084c9f76f872871aeab121daf81fb99/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialEq-enum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialEq-enum.stderr?ref=c34472b77084c9f76f872871aeab121daf81fb99", "patch": "@@ -1,13 +1,13 @@\n error[E0369]: binary operation `==` cannot be applied to type `Error`\n-  --> $DIR/derives-span-PartialEq-enum.rs:9:6\n+  --> $DIR/derives-span-PartialEq-enum.rs:10:6\n    |\n LL |      Error\n    |      ^^^^^\n    |\n    = note: an implementation of `std::cmp::PartialEq` might be missing for `Error`\n \n error[E0369]: binary operation `!=` cannot be applied to type `Error`\n-  --> $DIR/derives-span-PartialEq-enum.rs:9:6\n+  --> $DIR/derives-span-PartialEq-enum.rs:10:6\n    |\n LL |      Error\n    |      ^^^^^"}, {"sha": "560bf582e8da282452387e2bc27ebd07280809e0", "filename": "src/test/ui/derives/derives-span-PartialEq-struct.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c34472b77084c9f76f872871aeab121daf81fb99/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialEq-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c34472b77084c9f76f872871aeab121daf81fb99/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialEq-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialEq-struct.rs?ref=c34472b77084c9f76f872871aeab121daf81fb99", "patch": "@@ -1,3 +1,4 @@\n+// ignore-x86 FIXME: missing sysroot spans (#53081)\n // This file was auto-generated using 'src/etc/generate-deriving-span-tests.py'\n \n "}, {"sha": "4e0b2fa4e6f2698390e1c61c84d71b80406dfa56", "filename": "src/test/ui/derives/derives-span-PartialEq-struct.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c34472b77084c9f76f872871aeab121daf81fb99/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialEq-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c34472b77084c9f76f872871aeab121daf81fb99/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialEq-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialEq-struct.stderr?ref=c34472b77084c9f76f872871aeab121daf81fb99", "patch": "@@ -1,13 +1,13 @@\n error[E0369]: binary operation `==` cannot be applied to type `Error`\n-  --> $DIR/derives-span-PartialEq-struct.rs:8:5\n+  --> $DIR/derives-span-PartialEq-struct.rs:9:5\n    |\n LL |     x: Error\n    |     ^^^^^^^^\n    |\n    = note: an implementation of `std::cmp::PartialEq` might be missing for `Error`\n \n error[E0369]: binary operation `!=` cannot be applied to type `Error`\n-  --> $DIR/derives-span-PartialEq-struct.rs:8:5\n+  --> $DIR/derives-span-PartialEq-struct.rs:9:5\n    |\n LL |     x: Error\n    |     ^^^^^^^^"}, {"sha": "09a3249f0593fa079225ab4a88e7222a26a75db9", "filename": "src/test/ui/derives/derives-span-PartialEq-tuple-struct.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c34472b77084c9f76f872871aeab121daf81fb99/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialEq-tuple-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c34472b77084c9f76f872871aeab121daf81fb99/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialEq-tuple-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialEq-tuple-struct.rs?ref=c34472b77084c9f76f872871aeab121daf81fb99", "patch": "@@ -1,3 +1,4 @@\n+// ignore-x86 FIXME: missing sysroot spans (#53081)\n // This file was auto-generated using 'src/etc/generate-deriving-span-tests.py'\n \n "}, {"sha": "78e215534e0da396ee59ad92f064287a425aec3e", "filename": "src/test/ui/derives/derives-span-PartialEq-tuple-struct.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c34472b77084c9f76f872871aeab121daf81fb99/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialEq-tuple-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c34472b77084c9f76f872871aeab121daf81fb99/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialEq-tuple-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialEq-tuple-struct.stderr?ref=c34472b77084c9f76f872871aeab121daf81fb99", "patch": "@@ -1,13 +1,13 @@\n error[E0369]: binary operation `==` cannot be applied to type `Error`\n-  --> $DIR/derives-span-PartialEq-tuple-struct.rs:8:5\n+  --> $DIR/derives-span-PartialEq-tuple-struct.rs:9:5\n    |\n LL |     Error\n    |     ^^^^^\n    |\n    = note: an implementation of `std::cmp::PartialEq` might be missing for `Error`\n \n error[E0369]: binary operation `!=` cannot be applied to type `Error`\n-  --> $DIR/derives-span-PartialEq-tuple-struct.rs:8:5\n+  --> $DIR/derives-span-PartialEq-tuple-struct.rs:9:5\n    |\n LL |     Error\n    |     ^^^^^"}, {"sha": "0d18bdc113aee2baabd8a8f4fc7b731b770e581f", "filename": "src/test/ui/derives/derives-span-PartialOrd-enum-struct-variant.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c34472b77084c9f76f872871aeab121daf81fb99/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialOrd-enum-struct-variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c34472b77084c9f76f872871aeab121daf81fb99/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialOrd-enum-struct-variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialOrd-enum-struct-variant.rs?ref=c34472b77084c9f76f872871aeab121daf81fb99", "patch": "@@ -1,3 +1,4 @@\n+// ignore-x86 FIXME: missing sysroot spans (#53081)\n // This file was auto-generated using 'src/etc/generate-deriving-span-tests.py'\n \n #[derive(PartialEq)]"}, {"sha": "a6f0c873e2fd03a022bfce840204194454d984b2", "filename": "src/test/ui/derives/derives-span-PartialOrd-enum-struct-variant.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c34472b77084c9f76f872871aeab121daf81fb99/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialOrd-enum-struct-variant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c34472b77084c9f76f872871aeab121daf81fb99/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialOrd-enum-struct-variant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialOrd-enum-struct-variant.stderr?ref=c34472b77084c9f76f872871aeab121daf81fb99", "patch": "@@ -1,5 +1,5 @@\n error[E0277]: can't compare `Error` with `Error`\n-  --> $DIR/derives-span-PartialOrd-enum-struct-variant.rs:9:6\n+  --> $DIR/derives-span-PartialOrd-enum-struct-variant.rs:10:6\n    |\n LL |      x: Error\n    |      ^^^^^^^^ no implementation for `Error < Error` and `Error > Error`"}, {"sha": "78e4babb976cdb65741541ddb8110b20de0b7e14", "filename": "src/test/ui/derives/derives-span-PartialOrd-enum.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c34472b77084c9f76f872871aeab121daf81fb99/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialOrd-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c34472b77084c9f76f872871aeab121daf81fb99/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialOrd-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialOrd-enum.rs?ref=c34472b77084c9f76f872871aeab121daf81fb99", "patch": "@@ -1,3 +1,4 @@\n+// ignore-x86 FIXME: missing sysroot spans (#53081)\n // This file was auto-generated using 'src/etc/generate-deriving-span-tests.py'\n \n #[derive(PartialEq)]"}, {"sha": "838126111c35e7c84294625e17a3258e01b4d85d", "filename": "src/test/ui/derives/derives-span-PartialOrd-enum.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c34472b77084c9f76f872871aeab121daf81fb99/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialOrd-enum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c34472b77084c9f76f872871aeab121daf81fb99/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialOrd-enum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialOrd-enum.stderr?ref=c34472b77084c9f76f872871aeab121daf81fb99", "patch": "@@ -1,5 +1,5 @@\n error[E0277]: can't compare `Error` with `Error`\n-  --> $DIR/derives-span-PartialOrd-enum.rs:9:6\n+  --> $DIR/derives-span-PartialOrd-enum.rs:10:6\n    |\n LL |      Error\n    |      ^^^^^ no implementation for `Error < Error` and `Error > Error`"}, {"sha": "728ec75b6c40a944228698aa49fe1ad2d795d1b0", "filename": "src/test/ui/derives/derives-span-PartialOrd-struct.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c34472b77084c9f76f872871aeab121daf81fb99/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialOrd-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c34472b77084c9f76f872871aeab121daf81fb99/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialOrd-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialOrd-struct.rs?ref=c34472b77084c9f76f872871aeab121daf81fb99", "patch": "@@ -1,3 +1,4 @@\n+// ignore-x86 FIXME: missing sysroot spans (#53081)\n // This file was auto-generated using 'src/etc/generate-deriving-span-tests.py'\n \n #[derive(PartialEq)]"}, {"sha": "2df64d915a94d94d43a5db0eef1c364ec80f6847", "filename": "src/test/ui/derives/derives-span-PartialOrd-struct.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c34472b77084c9f76f872871aeab121daf81fb99/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialOrd-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c34472b77084c9f76f872871aeab121daf81fb99/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialOrd-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialOrd-struct.stderr?ref=c34472b77084c9f76f872871aeab121daf81fb99", "patch": "@@ -1,5 +1,5 @@\n error[E0277]: can't compare `Error` with `Error`\n-  --> $DIR/derives-span-PartialOrd-struct.rs:8:5\n+  --> $DIR/derives-span-PartialOrd-struct.rs:9:5\n    |\n LL |     x: Error\n    |     ^^^^^^^^ no implementation for `Error < Error` and `Error > Error`"}, {"sha": "c92b47e9297bef9f24c394ed20150b5959430ca0", "filename": "src/test/ui/derives/derives-span-PartialOrd-tuple-struct.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c34472b77084c9f76f872871aeab121daf81fb99/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialOrd-tuple-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c34472b77084c9f76f872871aeab121daf81fb99/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialOrd-tuple-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialOrd-tuple-struct.rs?ref=c34472b77084c9f76f872871aeab121daf81fb99", "patch": "@@ -1,3 +1,4 @@\n+// ignore-x86 FIXME: missing sysroot spans (#53081)\n // This file was auto-generated using 'src/etc/generate-deriving-span-tests.py'\n \n #[derive(PartialEq)]"}, {"sha": "63aebe32ed2980df05a44dfa1cd611712b988358", "filename": "src/test/ui/derives/derives-span-PartialOrd-tuple-struct.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c34472b77084c9f76f872871aeab121daf81fb99/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialOrd-tuple-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c34472b77084c9f76f872871aeab121daf81fb99/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialOrd-tuple-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialOrd-tuple-struct.stderr?ref=c34472b77084c9f76f872871aeab121daf81fb99", "patch": "@@ -1,5 +1,5 @@\n error[E0277]: can't compare `Error` with `Error`\n-  --> $DIR/derives-span-PartialOrd-tuple-struct.rs:8:5\n+  --> $DIR/derives-span-PartialOrd-tuple-struct.rs:9:5\n    |\n LL |     Error\n    |     ^^^^^ no implementation for `Error < Error` and `Error > Error`"}, {"sha": "5597df4ba499b8123c0c793444fdf1f433ddbd37", "filename": "src/test/ui/impl-trait/impl-generic-mismatch.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c34472b77084c9f76f872871aeab121daf81fb99/src%2Ftest%2Fui%2Fimpl-trait%2Fimpl-generic-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c34472b77084c9f76f872871aeab121daf81fb99/src%2Ftest%2Fui%2Fimpl-trait%2Fimpl-generic-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fimpl-generic-mismatch.rs?ref=c34472b77084c9f76f872871aeab121daf81fb99", "patch": "@@ -1,5 +1,4 @@\n-// ignore-musl\n-// ignore-x86\n+// ignore-x86 FIXME: missing sysroot spans (#53081)\n \n use std::fmt::Debug;\n "}, {"sha": "2278519e95ad18389fe4709835f1e913724a1df4", "filename": "src/test/ui/impl-trait/impl-generic-mismatch.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c34472b77084c9f76f872871aeab121daf81fb99/src%2Ftest%2Fui%2Fimpl-trait%2Fimpl-generic-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c34472b77084c9f76f872871aeab121daf81fb99/src%2Ftest%2Fui%2Fimpl-trait%2Fimpl-generic-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fimpl-generic-mismatch.stderr?ref=c34472b77084c9f76f872871aeab121daf81fb99", "patch": "@@ -1,5 +1,5 @@\n error[E0643]: method `foo` has incompatible signature for trait\n-  --> $DIR/impl-generic-mismatch.rs:11:12\n+  --> $DIR/impl-generic-mismatch.rs:10:12\n    |\n LL |     fn foo(&self, _: &impl Debug);\n    |                       ---------- declaration in trait here\n@@ -13,7 +13,7 @@ LL |     fn foo(&self, _: &impl Debug) { }\n    |          --           ^^^^^^^^^^\n \n error[E0643]: method `bar` has incompatible signature for trait\n-  --> $DIR/impl-generic-mismatch.rs:20:23\n+  --> $DIR/impl-generic-mismatch.rs:19:23\n    |\n LL |     fn bar<U: Debug>(&self, _: &U);\n    |            - declaration in trait here\n@@ -27,7 +27,7 @@ LL |     fn bar<U: Debug>(&self, _: &U) { }\n    |           ^^^^^^^^^^            ^\n \n error[E0643]: method `hash` has incompatible signature for trait\n-  --> $DIR/impl-generic-mismatch.rs:31:33\n+  --> $DIR/impl-generic-mismatch.rs:30:33\n    |\n LL |     fn hash(&self, hasher: &mut impl Hasher) {}\n    |                                 ^^^^^^^^^^^ expected generic parameter, found `impl Trait`"}, {"sha": "abcc92ce34d175fac4adb1975e09c04d8768a24d", "filename": "src/test/ui/imports/extern-prelude-extern-crate-restricted-shadowing.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c34472b77084c9f76f872871aeab121daf81fb99/src%2Ftest%2Fui%2Fimports%2Fextern-prelude-extern-crate-restricted-shadowing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c34472b77084c9f76f872871aeab121daf81fb99/src%2Ftest%2Fui%2Fimports%2Fextern-prelude-extern-crate-restricted-shadowing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Fextern-prelude-extern-crate-restricted-shadowing.rs?ref=c34472b77084c9f76f872871aeab121daf81fb99", "patch": "@@ -1,5 +1,4 @@\n-// ignore-x86\n-// ^ due to stderr output differences\n+// ignore-x86 FIXME: missing sysroot spans (#53081)\n // aux-build:two_macros.rs\n \n macro_rules! define_vec {"}, {"sha": "7a55abe42556c7e963d43507b8c445421f4f0e29", "filename": "src/test/ui/imports/extern-prelude-extern-crate-restricted-shadowing.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c34472b77084c9f76f872871aeab121daf81fb99/src%2Ftest%2Fui%2Fimports%2Fextern-prelude-extern-crate-restricted-shadowing.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c34472b77084c9f76f872871aeab121daf81fb99/src%2Ftest%2Fui%2Fimports%2Fextern-prelude-extern-crate-restricted-shadowing.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Fextern-prelude-extern-crate-restricted-shadowing.stderr?ref=c34472b77084c9f76f872871aeab121daf81fb99", "patch": "@@ -1,5 +1,5 @@\n error: macro-expanded `extern crate` items cannot shadow names passed with `--extern`\n-  --> $DIR/extern-prelude-extern-crate-restricted-shadowing.rs:21:9\n+  --> $DIR/extern-prelude-extern-crate-restricted-shadowing.rs:20:9\n    |\n LL |         extern crate std as core;\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -8,13 +8,13 @@ LL | define_other_core!();\n    | --------------------- in this macro invocation\n \n error[E0659]: `Vec` is ambiguous (macro-expanded name vs less macro-expanded name from outer scope during import/macro resolution)\n-  --> $DIR/extern-prelude-extern-crate-restricted-shadowing.rs:15:9\n+  --> $DIR/extern-prelude-extern-crate-restricted-shadowing.rs:14:9\n    |\n LL |         Vec::panic!();\n    |         ^^^ ambiguous name\n    |\n note: `Vec` could refer to the crate imported here\n-  --> $DIR/extern-prelude-extern-crate-restricted-shadowing.rs:7:9\n+  --> $DIR/extern-prelude-extern-crate-restricted-shadowing.rs:6:9\n    |\n LL |         extern crate std as Vec;\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "369de0400702232204e04e82c453caab6be5f371", "filename": "src/test/ui/in-band-lifetimes/mismatched_trait_impl-2.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c34472b77084c9f76f872871aeab121daf81fb99/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched_trait_impl-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c34472b77084c9f76f872871aeab121daf81fb99/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched_trait_impl-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched_trait_impl-2.rs?ref=c34472b77084c9f76f872871aeab121daf81fb99", "patch": "@@ -1,5 +1,4 @@\n-// ignore-x86\n-// ^ due to stderr output differences\n+// ignore-x86 FIXME: missing sysroot spans (#53081)\n use std::ops::Deref;\n trait Trait {}\n "}, {"sha": "8086d3f1fbc646c23d0914e4d70e85bb814ea2c6", "filename": "src/test/ui/in-band-lifetimes/mismatched_trait_impl-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c34472b77084c9f76f872871aeab121daf81fb99/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched_trait_impl-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c34472b77084c9f76f872871aeab121daf81fb99/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched_trait_impl-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched_trait_impl-2.stderr?ref=c34472b77084c9f76f872871aeab121daf81fb99", "patch": "@@ -1,5 +1,5 @@\n error: `impl` item signature doesn't match `trait` item signature\n-  --> $DIR/mismatched_trait_impl-2.rs:10:5\n+  --> $DIR/mismatched_trait_impl-2.rs:9:5\n    |\n LL |     fn deref(&self) -> &dyn Trait {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ found fn(&Struct) -> &dyn Trait"}, {"sha": "60633fdd393ee76f9ffc3a55a0ca4104f6acf270", "filename": "src/test/ui/interior-mutability/interior-mutability.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c34472b77084c9f76f872871aeab121daf81fb99/src%2Ftest%2Fui%2Finterior-mutability%2Finterior-mutability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c34472b77084c9f76f872871aeab121daf81fb99/src%2Ftest%2Fui%2Finterior-mutability%2Finterior-mutability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finterior-mutability%2Finterior-mutability.rs?ref=c34472b77084c9f76f872871aeab121daf81fb99", "patch": "@@ -1,5 +1,4 @@\n-// ignore-x86\n-// ^ due to stderr output differences\n+// ignore-x86 FIXME: missing sysroot spans (#53081)\n use std::cell::Cell;\n use std::panic::catch_unwind;\n fn main() {"}, {"sha": "5c129524f51b4aae7f4575b77fd20cc9cd0deb0d", "filename": "src/test/ui/interior-mutability/interior-mutability.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c34472b77084c9f76f872871aeab121daf81fb99/src%2Ftest%2Fui%2Finterior-mutability%2Finterior-mutability.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c34472b77084c9f76f872871aeab121daf81fb99/src%2Ftest%2Fui%2Finterior-mutability%2Finterior-mutability.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finterior-mutability%2Finterior-mutability.stderr?ref=c34472b77084c9f76f872871aeab121daf81fb99", "patch": "@@ -1,5 +1,5 @@\n error[E0277]: the type `std::cell::UnsafeCell<i32>` may contain interior mutability and a reference may not be safely transferrable across a catch_unwind boundary\n-  --> $DIR/interior-mutability.rs:7:5\n+  --> $DIR/interior-mutability.rs:6:5\n    |\n LL |     catch_unwind(|| { x.set(23); });\n    |     ^^^^^^^^^^^^ `std::cell::UnsafeCell<i32>` may contain interior mutability and a reference may not be safely transferrable across a catch_unwind boundary\n@@ -12,7 +12,7 @@ LL | pub fn catch_unwind<F: FnOnce() -> R + UnwindSafe, R>(f: F) -> Result<R> {\n    = help: within `std::cell::Cell<i32>`, the trait `std::panic::RefUnwindSafe` is not implemented for `std::cell::UnsafeCell<i32>`\n    = note: required because it appears within the type `std::cell::Cell<i32>`\n    = note: required because of the requirements on the impl of `std::panic::UnwindSafe` for `&std::cell::Cell<i32>`\n-   = note: required because it appears within the type `[closure@$DIR/interior-mutability.rs:7:18: 7:35 x:&std::cell::Cell<i32>]`\n+   = note: required because it appears within the type `[closure@$DIR/interior-mutability.rs:6:18: 6:35 x:&std::cell::Cell<i32>]`\n \n error: aborting due to previous error\n "}, {"sha": "0199abbd8f04ad688a67866680f8683a1c17298f", "filename": "src/test/ui/issues/issue-21160.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c34472b77084c9f76f872871aeab121daf81fb99/src%2Ftest%2Fui%2Fissues%2Fissue-21160.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c34472b77084c9f76f872871aeab121daf81fb99/src%2Ftest%2Fui%2Fissues%2Fissue-21160.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-21160.rs?ref=c34472b77084c9f76f872871aeab121daf81fb99", "patch": "@@ -1,5 +1,4 @@\n-// ignore-x86\n-// ^ due to stderr output differences\n+// ignore-x86 FIXME: missing sysroot spans (#53081)\n struct Bar;\n \n impl Bar {"}, {"sha": "65ba64b49d06d8bb8f32de4a18442a0469731d32", "filename": "src/test/ui/issues/issue-21160.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c34472b77084c9f76f872871aeab121daf81fb99/src%2Ftest%2Fui%2Fissues%2Fissue-21160.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c34472b77084c9f76f872871aeab121daf81fb99/src%2Ftest%2Fui%2Fissues%2Fissue-21160.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-21160.stderr?ref=c34472b77084c9f76f872871aeab121daf81fb99", "patch": "@@ -1,5 +1,5 @@\n error[E0277]: the trait bound `Bar: std::hash::Hash` is not satisfied\n-  --> $DIR/issue-21160.rs:10:12\n+  --> $DIR/issue-21160.rs:9:12\n    |\n LL | struct Foo(Bar);\n    |            ^^^ the trait `std::hash::Hash` is not implemented for `Bar`"}, {"sha": "7120dee6339f19bc8bdcd3cd713a8eed42534561", "filename": "src/test/ui/issues/issue-27033.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c34472b77084c9f76f872871aeab121daf81fb99/src%2Ftest%2Fui%2Fissues%2Fissue-27033.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c34472b77084c9f76f872871aeab121daf81fb99/src%2Ftest%2Fui%2Fissues%2Fissue-27033.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-27033.rs?ref=c34472b77084c9f76f872871aeab121daf81fb99", "patch": "@@ -1,5 +1,4 @@\n-// ignore-x86\n-// ^ due to stderr output differences\n+// ignore-x86 FIXME: missing sysroot spans (#53081)\n fn main() {\n     match Some(1) {\n         None @ _ => {} //~ ERROR match bindings cannot shadow unit variants"}, {"sha": "2d6d2ef41bd740deba7af1bd35d8aa431509c4aa", "filename": "src/test/ui/issues/issue-27033.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c34472b77084c9f76f872871aeab121daf81fb99/src%2Ftest%2Fui%2Fissues%2Fissue-27033.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c34472b77084c9f76f872871aeab121daf81fb99/src%2Ftest%2Fui%2Fissues%2Fissue-27033.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-27033.stderr?ref=c34472b77084c9f76f872871aeab121daf81fb99", "patch": "@@ -1,5 +1,5 @@\n error[E0530]: match bindings cannot shadow unit variants\n-  --> $DIR/issue-27033.rs:5:9\n+  --> $DIR/issue-27033.rs:4:9\n    |\n LL |         None @ _ => {}\n    |         ^^^^ cannot be named the same as a unit variant\n@@ -10,7 +10,7 @@ LL | pub use crate::option::Option::{self, Some, None};\n    |                                             ---- the unit variant `None` is defined here\n \n error[E0530]: match bindings cannot shadow constants\n-  --> $DIR/issue-27033.rs:9:9\n+  --> $DIR/issue-27033.rs:8:9\n    |\n LL |     const C: u8 = 1;\n    |     ---------------- the constant `C` is defined here"}, {"sha": "85d812dd61904b737f3443423e68d735c8aa27de", "filename": "src/test/ui/no-send-res-ports.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c34472b77084c9f76f872871aeab121daf81fb99/src%2Ftest%2Fui%2Fno-send-res-ports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c34472b77084c9f76f872871aeab121daf81fb99/src%2Ftest%2Fui%2Fno-send-res-ports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fno-send-res-ports.rs?ref=c34472b77084c9f76f872871aeab121daf81fb99", "patch": "@@ -1,5 +1,4 @@\n-// ignore-x86\n-// ^ due to stderr output differences\n+// ignore-x86 FIXME: missing sysroot spans (#53081)\n use std::thread;\n use std::rc::Rc;\n "}, {"sha": "f23a3bf832ab6c9336d053f1c85c586fafe66c43", "filename": "src/test/ui/no-send-res-ports.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c34472b77084c9f76f872871aeab121daf81fb99/src%2Ftest%2Fui%2Fno-send-res-ports.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c34472b77084c9f76f872871aeab121daf81fb99/src%2Ftest%2Fui%2Fno-send-res-ports.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fno-send-res-ports.stderr?ref=c34472b77084c9f76f872871aeab121daf81fb99", "patch": "@@ -1,5 +1,5 @@\n error[E0277]: `std::rc::Rc<()>` cannot be sent between threads safely\n-  --> $DIR/no-send-res-ports.rs:27:5\n+  --> $DIR/no-send-res-ports.rs:26:5\n    |\n LL |     thread::spawn(move|| {\n    |     ^^^^^^^^^^^^^ `std::rc::Rc<()>` cannot be sent between threads safely\n@@ -9,10 +9,10 @@ LL |     thread::spawn(move|| {\n LL |     F: FnOnce() -> T, F: Send + 'static, T: Send + 'static\n    |                          ---- required by this bound in `std::thread::spawn`\n    |\n-   = help: within `[closure@$DIR/no-send-res-ports.rs:27:19: 31:6 x:main::Foo]`, the trait `std::marker::Send` is not implemented for `std::rc::Rc<()>`\n+   = help: within `[closure@$DIR/no-send-res-ports.rs:26:19: 30:6 x:main::Foo]`, the trait `std::marker::Send` is not implemented for `std::rc::Rc<()>`\n    = note: required because it appears within the type `Port<()>`\n    = note: required because it appears within the type `main::Foo`\n-   = note: required because it appears within the type `[closure@$DIR/no-send-res-ports.rs:27:19: 31:6 x:main::Foo]`\n+   = note: required because it appears within the type `[closure@$DIR/no-send-res-ports.rs:26:19: 30:6 x:main::Foo]`\n \n error: aborting due to previous error\n "}, {"sha": "a028247ec5c112a836d1098d5450634bc4a88b67", "filename": "src/test/ui/rfc-1937-termination-trait/termination-trait-test-wrong-type.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c34472b77084c9f76f872871aeab121daf81fb99/src%2Ftest%2Fui%2Frfc-1937-termination-trait%2Ftermination-trait-test-wrong-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c34472b77084c9f76f872871aeab121daf81fb99/src%2Ftest%2Fui%2Frfc-1937-termination-trait%2Ftermination-trait-test-wrong-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-1937-termination-trait%2Ftermination-trait-test-wrong-type.rs?ref=c34472b77084c9f76f872871aeab121daf81fb99", "patch": "@@ -1,6 +1,5 @@\n // compile-flags: --test\n-// ignore-x86\n-// ^ due to stderr output differences\n+// ignore-x86 FIXME: missing sysroot spans (#53081)\n \n use std::num::ParseFloatError;\n "}, {"sha": "9cefef58bf53ae18fe877f337af9f934d1e6cbca", "filename": "src/test/ui/rfc-1937-termination-trait/termination-trait-test-wrong-type.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c34472b77084c9f76f872871aeab121daf81fb99/src%2Ftest%2Fui%2Frfc-1937-termination-trait%2Ftermination-trait-test-wrong-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c34472b77084c9f76f872871aeab121daf81fb99/src%2Ftest%2Fui%2Frfc-1937-termination-trait%2Ftermination-trait-test-wrong-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-1937-termination-trait%2Ftermination-trait-test-wrong-type.stderr?ref=c34472b77084c9f76f872871aeab121daf81fb99", "patch": "@@ -1,5 +1,5 @@\n error[E0277]: `main` has invalid return type `std::result::Result<f32, std::num::ParseFloatError>`\n-  --> $DIR/termination-trait-test-wrong-type.rs:8:1\n+  --> $DIR/termination-trait-test-wrong-type.rs:7:1\n    |\n LL | / fn can_parse_zero_as_f32() -> Result<f32, ParseFloatError> {\n LL | |     \"0\".parse()"}, {"sha": "5d3464d20f30dc245d77ad1b4b4beae6eea5d360", "filename": "src/test/ui/traits/trait-suggest-where-clause.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c34472b77084c9f76f872871aeab121daf81fb99/src%2Ftest%2Fui%2Ftraits%2Ftrait-suggest-where-clause.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c34472b77084c9f76f872871aeab121daf81fb99/src%2Ftest%2Fui%2Ftraits%2Ftrait-suggest-where-clause.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-suggest-where-clause.rs?ref=c34472b77084c9f76f872871aeab121daf81fb99", "patch": "@@ -1,5 +1,4 @@\n-// ignore-x86\n-// ^ due to stderr output differences\n+// ignore-x86 FIXME: missing sysroot spans (#53081)\n use std::mem;\n \n struct Misc<T:?Sized>(T);"}, {"sha": "2bb7defdac710c22fb0ec0cc24d1caa1ded3761a", "filename": "src/test/ui/traits/trait-suggest-where-clause.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c34472b77084c9f76f872871aeab121daf81fb99/src%2Ftest%2Fui%2Ftraits%2Ftrait-suggest-where-clause.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c34472b77084c9f76f872871aeab121daf81fb99/src%2Ftest%2Fui%2Ftraits%2Ftrait-suggest-where-clause.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-suggest-where-clause.stderr?ref=c34472b77084c9f76f872871aeab121daf81fb99", "patch": "@@ -1,5 +1,5 @@\n error[E0277]: the size for values of type `U` cannot be known at compilation time\n-  --> $DIR/trait-suggest-where-clause.rs:9:20\n+  --> $DIR/trait-suggest-where-clause.rs:8:20\n    |\n LL | fn check<T: Iterator, U: ?Sized>() {\n    |                       -- help: consider further restricting this bound: `U: std::marker::Sized +`\n@@ -16,7 +16,7 @@ LL | pub const fn size_of<T>() -> usize {\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n \n error[E0277]: the size for values of type `U` cannot be known at compilation time\n-  --> $DIR/trait-suggest-where-clause.rs:12:5\n+  --> $DIR/trait-suggest-where-clause.rs:11:5\n    |\n LL | fn check<T: Iterator, U: ?Sized>() {\n    |                       -- help: consider further restricting this bound: `U: std::marker::Sized +`\n@@ -34,31 +34,31 @@ LL | pub const fn size_of<T>() -> usize {\n    = note: required because it appears within the type `Misc<U>`\n \n error[E0277]: the trait bound `u64: std::convert::From<T>` is not satisfied\n-  --> $DIR/trait-suggest-where-clause.rs:17:5\n+  --> $DIR/trait-suggest-where-clause.rs:16:5\n    |\n LL |     <u64 as From<T>>::from;\n    |     ^^^^^^^^^^^^^^^^^^^^^^ the trait `std::convert::From<T>` is not implemented for `u64`\n    |\n    = note: required by `std::convert::From::from`\n \n error[E0277]: the trait bound `u64: std::convert::From<<T as std::iter::Iterator>::Item>` is not satisfied\n-  --> $DIR/trait-suggest-where-clause.rs:20:5\n+  --> $DIR/trait-suggest-where-clause.rs:19:5\n    |\n LL |     <u64 as From<<T as Iterator>::Item>>::from;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::convert::From<<T as std::iter::Iterator>::Item>` is not implemented for `u64`\n    |\n    = note: required by `std::convert::From::from`\n \n error[E0277]: the trait bound `Misc<_>: std::convert::From<T>` is not satisfied\n-  --> $DIR/trait-suggest-where-clause.rs:25:5\n+  --> $DIR/trait-suggest-where-clause.rs:24:5\n    |\n LL |     <Misc<_> as From<T>>::from;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::convert::From<T>` is not implemented for `Misc<_>`\n    |\n    = note: required by `std::convert::From::from`\n \n error[E0277]: the size for values of type `[T]` cannot be known at compilation time\n-  --> $DIR/trait-suggest-where-clause.rs:30:20\n+  --> $DIR/trait-suggest-where-clause.rs:29:20\n    |\n LL |     mem::size_of::<[T]>();\n    |                    ^^^ doesn't have a size known at compile-time\n@@ -72,7 +72,7 @@ LL | pub const fn size_of<T>() -> usize {\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n \n error[E0277]: the size for values of type `[&U]` cannot be known at compilation time\n-  --> $DIR/trait-suggest-where-clause.rs:33:5\n+  --> $DIR/trait-suggest-where-clause.rs:32:5\n    |\n LL |     mem::size_of::<[&U]>();\n    |     ^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time"}, {"sha": "926f12911c52a521c9f1e070a787942a7f462797", "filename": "src/test/ui/type_length_limit.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c34472b77084c9f76f872871aeab121daf81fb99/src%2Ftest%2Fui%2Ftype_length_limit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c34472b77084c9f76f872871aeab121daf81fb99/src%2Ftest%2Fui%2Ftype_length_limit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype_length_limit.rs?ref=c34472b77084c9f76f872871aeab121daf81fb99", "patch": "@@ -1,5 +1,4 @@\n-// ignore-musl\n-// ignore-x86\n+// ignore-x86 FIXME: missing sysroot spans (#53081)\n // error-pattern: reached the type-length limit while instantiating\n \n // Test that the type length limit can be changed."}]}