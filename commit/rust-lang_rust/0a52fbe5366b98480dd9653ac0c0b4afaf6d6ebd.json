{"sha": "0a52fbe5366b98480dd9653ac0c0b4afaf6d6ebd", "node_id": "C_kwDOAAsO6NoAKDBhNTJmYmU1MzY2Yjk4NDgwZGQ5NjUzYWMwYzBiNGFmYWY2ZDZlYmQ", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-08-29T01:24:46Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-08-29T04:16:49Z"}, "message": "Rename `GenericArg::id` as `GenericArg::hir_id`.\n\nBecause `hir_id` is the standard name for methods that return a `HirId`\nfrom a HIR node.", "tree": {"sha": "7d7d3b3bbf30263751dd337bed0af4caedea5c26", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7d7d3b3bbf30263751dd337bed0af4caedea5c26"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0a52fbe5366b98480dd9653ac0c0b4afaf6d6ebd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0a52fbe5366b98480dd9653ac0c0b4afaf6d6ebd", "html_url": "https://github.com/rust-lang/rust/commit/0a52fbe5366b98480dd9653ac0c0b4afaf6d6ebd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0a52fbe5366b98480dd9653ac0c0b4afaf6d6ebd/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ad7b4d5d22b8d2b67225ab717800556d5139c74d", "url": "https://api.github.com/repos/rust-lang/rust/commits/ad7b4d5d22b8d2b67225ab717800556d5139c74d", "html_url": "https://github.com/rust-lang/rust/commit/ad7b4d5d22b8d2b67225ab717800556d5139c74d"}], "stats": {"total": 14, "additions": 7, "deletions": 7}, "files": [{"sha": "637709c764ccb6d534ac4958d5e022bbd2676ad0", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0a52fbe5366b98480dd9653ac0c0b4afaf6d6ebd/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a52fbe5366b98480dd9653ac0c0b4afaf6d6ebd/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=0a52fbe5366b98480dd9653ac0c0b4afaf6d6ebd", "patch": "@@ -280,7 +280,7 @@ impl GenericArg<'_> {\n         }\n     }\n \n-    pub fn id(&self) -> HirId {\n+    pub fn hir_id(&self) -> HirId {\n         match self {\n             GenericArg::Lifetime(l) => l.hir_id,\n             GenericArg::Type(t) => t.hir_id,"}, {"sha": "074db108cff9ffd765096dc65006ff579c772b17", "filename": "compiler/rustc_typeck/src/astconv/generics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0a52fbe5366b98480dd9653ac0c0b4afaf6d6ebd/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a52fbe5366b98480dd9653ac0c0b4afaf6d6ebd/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fgenerics.rs?ref=0a52fbe5366b98480dd9653ac0c0b4afaf6d6ebd", "patch": "@@ -648,7 +648,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                 multispan.push_span_label(span_late, note);\n                 tcx.struct_span_lint_hir(\n                     LATE_BOUND_LIFETIME_ARGUMENTS,\n-                    args.args[0].id(),\n+                    args.args[0].hir_id(),\n                     multispan,\n                     |lint| {\n                         lint.build(msg).emit();"}, {"sha": "85dee26012981e12b37f87f7b71b526877c665f0", "filename": "compiler/rustc_typeck/src/astconv/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0a52fbe5366b98480dd9653ac0c0b4afaf6d6ebd/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a52fbe5366b98480dd9653ac0c0b4afaf6d6ebd/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs?ref=0a52fbe5366b98480dd9653ac0c0b4afaf6d6ebd", "patch": "@@ -398,7 +398,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                     if has_default {\n                         tcx.check_optional_stability(\n                             param.def_id,\n-                            Some(arg.id()),\n+                            Some(arg.hir_id()),\n                             arg.span(),\n                             None,\n                             AllowUnstable::No,"}, {"sha": "8df3d2ecaba010e53b905ade2d6b245419009e2f", "filename": "compiler/rustc_typeck/src/collect/type_of.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0a52fbe5366b98480dd9653ac0c0b4afaf6d6ebd/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a52fbe5366b98480dd9653ac0c0b4afaf6d6ebd/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs?ref=0a52fbe5366b98480dd9653ac0c0b4afaf6d6ebd", "patch": "@@ -79,7 +79,7 @@ pub(super) fn opt_const_param_of(tcx: TyCtxt<'_>, def_id: LocalDefId) -> Option<\n                         args.args\n                             .iter()\n                             .filter(|arg| arg.is_ty_or_const())\n-                            .position(|arg| arg.id() == hir_id)\n+                            .position(|arg| arg.hir_id() == hir_id)\n                     })\n                     .unwrap_or_else(|| {\n                         bug!(\"no arg matching AnonConst in segment\");\n@@ -112,7 +112,7 @@ pub(super) fn opt_const_param_of(tcx: TyCtxt<'_>, def_id: LocalDefId) -> Option<\n                     args.args\n                         .iter()\n                         .filter(|arg| arg.is_ty_or_const())\n-                        .position(|arg| arg.id() == hir_id)\n+                        .position(|arg| arg.hir_id() == hir_id)\n                 })\n                 .unwrap_or_else(|| {\n                     bug!(\"no arg matching AnonConst in segment\");\n@@ -166,7 +166,7 @@ pub(super) fn opt_const_param_of(tcx: TyCtxt<'_>, def_id: LocalDefId) -> Option<\n                 args.args\n                 .iter()\n                 .filter(|arg| arg.is_ty_or_const())\n-                .position(|arg| arg.id() == hir_id)\n+                .position(|arg| arg.hir_id() == hir_id)\n                 .map(|index| (index, seg)).or_else(|| args.bindings\n                     .iter()\n                     .filter_map(TypeBinding::opt_const)\n@@ -229,7 +229,7 @@ fn get_path_containing_arg_in_pat<'hir>(\n             .iter()\n             .filter_map(|seg| seg.args)\n             .flat_map(|args| args.args)\n-            .any(|arg| arg.id() == arg_id)\n+            .any(|arg| arg.hir_id() == arg_id)\n     };\n     let mut arg_path = None;\n     pat.walk(|pat| match pat.kind {"}]}