{"sha": "de118d79b603b84e2911527a586f7716b750c5fa", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRlMTE4ZDc5YjYwM2I4NGUyOTExNTI3YTU4NmY3NzE2Yjc1MGM1ZmE=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2010-12-11T02:08:32Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2010-12-11T02:08:32Z"}, "message": "rustc: Resolve pattern bindings", "tree": {"sha": "5ade03edc398491cd5a70a449fabf21832b46ab4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5ade03edc398491cd5a70a449fabf21832b46ab4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/de118d79b603b84e2911527a586f7716b750c5fa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/de118d79b603b84e2911527a586f7716b750c5fa", "html_url": "https://github.com/rust-lang/rust/commit/de118d79b603b84e2911527a586f7716b750c5fa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/de118d79b603b84e2911527a586f7716b750c5fa/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0509b1b9d78da4abe5c6f32231889d5ee865428e", "url": "https://api.github.com/repos/rust-lang/rust/commits/0509b1b9d78da4abe5c6f32231889d5ee865428e", "html_url": "https://github.com/rust-lang/rust/commit/0509b1b9d78da4abe5c6f32231889d5ee865428e"}], "stats": {"total": 44, "additions": 40, "deletions": 4}, "files": [{"sha": "11db3eedc317d1e476323992936a50f3465606f8", "filename": "src/comp/front/ast.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/de118d79b603b84e2911527a586f7716b750c5fa/src%2Fcomp%2Ffront%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de118d79b603b84e2911527a586f7716b750c5fa/src%2Fcomp%2Ffront%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fast.rs?ref=de118d79b603b84e2911527a586f7716b750c5fa", "patch": "@@ -33,6 +33,7 @@ tag def {\n     def_variant(def_id /* tag */, def_id /* variant */);\n     def_ty(def_id);\n     def_ty_arg(def_id);\n+    def_binding(def_id);\n }\n \n type crate = spanned[crate_];\n@@ -124,7 +125,7 @@ tag decl_ {\n     decl_item(@item);\n }\n \n-type arm = rec(@pat pat, block block);\n+type arm = rec(@pat pat, block block, hashmap[ident,def_id] index);\n \n type elt = rec(mutability mut, @expr expr);\n type field = rec(mutability mut, ident ident, @expr expr);"}, {"sha": "decb28e1f47eebc21f5307de06f43b74b7f3522b", "filename": "src/comp/front/parser.rs", "status": "modified", "additions": 20, "deletions": 1, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/de118d79b603b84e2911527a586f7716b750c5fa/src%2Fcomp%2Ffront%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de118d79b603b84e2911527a586f7716b750c5fa/src%2Fcomp%2Ffront%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fparser.rs?ref=de118d79b603b84e2911527a586f7716b750c5fa", "patch": "@@ -817,8 +817,9 @@ impure fn parse_alt_expr(parser p) -> @ast.expr {\n                 expect(p, token.LPAREN);\n                 auto pat = parse_pat(p);\n                 expect(p, token.RPAREN);\n+                auto index = index_arm(pat);\n                 auto block = parse_block(p);\n-                arms += vec(rec(pat=pat, block=block));\n+                arms += vec(rec(pat=pat, block=block, index=index));\n             }\n             case (token.RBRACE) { /* empty */ }\n             case (?tok) {\n@@ -1082,6 +1083,24 @@ fn index_block(vec[@ast.stmt] stmts, option.t[@ast.expr] expr) -> ast.block_ {\n     ret rec(stmts=stmts, expr=expr, index=index);\n }\n \n+fn index_arm(@ast.pat pat) -> hashmap[ast.ident,ast.def_id] {\n+    fn do_index_arm(&hashmap[ast.ident,ast.def_id] index, @ast.pat pat) {\n+        alt (pat.node) {\n+            case (ast.pat_bind(?i, ?def_id, _)) { index.insert(i, def_id); }\n+            case (ast.pat_wild(_)) { /* empty */ }\n+            case (ast.pat_tag(_, ?pats, _)) {\n+                for (@ast.pat p in pats) {\n+                    do_index_arm(index, p);\n+                }\n+            }\n+        }\n+    }\n+\n+    auto index = new_str_hash[ast.def_id]();\n+    do_index_arm(index, pat);\n+    ret index;\n+}\n+\n fn stmt_to_expr(@ast.stmt stmt) -> option.t[@ast.expr] {\n     alt (stmt.node) {\n         case (ast.stmt_expr(?e)) { ret some[@ast.expr](e); }"}, {"sha": "521b433e75672cf4d92b40054740a28b36ea6973", "filename": "src/comp/middle/fold.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/de118d79b603b84e2911527a586f7716b750c5fa/src%2Fcomp%2Fmiddle%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de118d79b603b84e2911527a586f7716b750c5fa/src%2Fcomp%2Fmiddle%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ffold.rs?ref=de118d79b603b84e2911527a586f7716b750c5fa", "patch": "@@ -574,7 +574,7 @@ fn fold_arm[ENV](&ENV env, ast_fold[ENV] fld, &arm a) -> arm {\n     let ENV env_ = fld.update_env_for_arm(env, a);\n     auto ppat = fold_pat(env_, fld, a.pat);\n     auto bblock = fold_block(env_, fld, a.block);\n-    ret rec(pat=ppat, block=bblock);\n+    ret rec(pat=ppat, block=bblock, index=a.index);\n }\n \n fn fold_arg[ENV](&ENV env, ast_fold[ENV] fld, &arg a) -> arg {"}, {"sha": "08175e7893eafc6582bb559f6beac8af765212d9", "filename": "src/comp/middle/resolve.rs", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/de118d79b603b84e2911527a586f7716b750c5fa/src%2Fcomp%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de118d79b603b84e2911527a586f7716b750c5fa/src%2Fcomp%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fresolve.rs?ref=de118d79b603b84e2911527a586f7716b750c5fa", "patch": "@@ -18,6 +18,7 @@ tag scope {\n     scope_crate(@ast.crate);\n     scope_item(@ast.item);\n     scope_block(ast.block);\n+    scope_arm(ast.arm);\n }\n \n type env = rec(list[scope] scopes,\n@@ -120,6 +121,15 @@ fn lookup_name(&env e, ast.ident i) -> option.t[def] {\n                     case (_) { /* fall through */  }\n                 }\n             }\n+\n+            case (scope_arm(?a)) {\n+                alt (a.index.find(i)) {\n+                    case (some[ast.def_id](?did)) {\n+                        ret some[def](ast.def_binding(did));\n+                    }\n+                    case (_) { /* fall through */  }\n+                }\n+            }\n         }\n         ret none[def];\n     }\n@@ -189,6 +199,11 @@ fn update_env_for_block(&env e, &ast.block b) -> env {\n     ret rec(scopes = cons[scope](scope_block(b), @e.scopes) with e);\n }\n \n+fn update_env_for_arm(&env e, &ast.arm p) -> env {\n+    log \"update_env_for_arm\";\n+    ret rec(scopes = cons[scope](scope_arm(p), @e.scopes) with e);\n+}\n+\n fn resolve_crate(session.session sess, @ast.crate crate) -> @ast.crate {\n \n     let fold.ast_fold[env] fld = fold.new_identity_fold[env]();\n@@ -197,7 +212,8 @@ fn resolve_crate(session.session sess, @ast.crate crate) -> @ast.crate {\n                 fold_ty_path = bind fold_ty_path(_,_,_,_),\n                 update_env_for_crate = bind update_env_for_crate(_,_),\n                 update_env_for_item = bind update_env_for_item(_,_),\n-                update_env_for_block = bind update_env_for_block(_,_)\n+                update_env_for_block = bind update_env_for_block(_,_),\n+                update_env_for_arm = bind update_env_for_arm(_,_)\n                 with *fld );\n \n     auto e = rec(scopes = nil[scope],"}]}