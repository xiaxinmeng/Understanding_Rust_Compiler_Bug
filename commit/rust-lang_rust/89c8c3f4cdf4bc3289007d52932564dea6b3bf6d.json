{"sha": "89c8c3f4cdf4bc3289007d52932564dea6b3bf6d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg5YzhjM2Y0Y2RmNGJjMzI4OTAwN2Q1MjkzMjU2NGRlYTZiM2JmNmQ=", "commit": {"author": {"name": "xFrednet", "email": "xFrednet@gmail.com", "date": "2021-07-25T18:35:51Z"}, "committer": {"name": "xFrednet", "email": "xFrednet@gmail.com", "date": "2021-07-26T07:35:38Z"}, "message": "Prefer a code snipped over formatting the self type (`new_without_default`)", "tree": {"sha": "6c1cd62ce8548232780c524cbbb9e739395ab399", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6c1cd62ce8548232780c524cbbb9e739395ab399"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/89c8c3f4cdf4bc3289007d52932564dea6b3bf6d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/89c8c3f4cdf4bc3289007d52932564dea6b3bf6d", "html_url": "https://github.com/rust-lang/rust/commit/89c8c3f4cdf4bc3289007d52932564dea6b3bf6d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/89c8c3f4cdf4bc3289007d52932564dea6b3bf6d/comments", "author": {"login": "xFrednet", "id": 17087237, "node_id": "MDQ6VXNlcjE3MDg3MjM3", "avatar_url": "https://avatars.githubusercontent.com/u/17087237?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xFrednet", "html_url": "https://github.com/xFrednet", "followers_url": "https://api.github.com/users/xFrednet/followers", "following_url": "https://api.github.com/users/xFrednet/following{/other_user}", "gists_url": "https://api.github.com/users/xFrednet/gists{/gist_id}", "starred_url": "https://api.github.com/users/xFrednet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xFrednet/subscriptions", "organizations_url": "https://api.github.com/users/xFrednet/orgs", "repos_url": "https://api.github.com/users/xFrednet/repos", "events_url": "https://api.github.com/users/xFrednet/events{/privacy}", "received_events_url": "https://api.github.com/users/xFrednet/received_events", "type": "User", "site_admin": false}, "committer": {"login": "xFrednet", "id": 17087237, "node_id": "MDQ6VXNlcjE3MDg3MjM3", "avatar_url": "https://avatars.githubusercontent.com/u/17087237?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xFrednet", "html_url": "https://github.com/xFrednet", "followers_url": "https://api.github.com/users/xFrednet/followers", "following_url": "https://api.github.com/users/xFrednet/following{/other_user}", "gists_url": "https://api.github.com/users/xFrednet/gists{/gist_id}", "starred_url": "https://api.github.com/users/xFrednet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xFrednet/subscriptions", "organizations_url": "https://api.github.com/users/xFrednet/orgs", "repos_url": "https://api.github.com/users/xFrednet/repos", "events_url": "https://api.github.com/users/xFrednet/events{/privacy}", "received_events_url": "https://api.github.com/users/xFrednet/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ea69a9d10a0c55160a3981dfae11b7197b50c11d", "url": "https://api.github.com/repos/rust-lang/rust/commits/ea69a9d10a0c55160a3981dfae11b7197b50c11d", "html_url": "https://github.com/rust-lang/rust/commit/ea69a9d10a0c55160a3981dfae11b7197b50c11d"}], "stats": {"total": 59, "additions": 46, "deletions": 13}, "files": [{"sha": "ae769c820817f5f6c8fe3a60597f541c151c0f61", "filename": "clippy_lints/src/new_without_default.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/89c8c3f4cdf4bc3289007d52932564dea6b3bf6d/clippy_lints%2Fsrc%2Fnew_without_default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8c3f4cdf4bc3289007d52932564dea6b3bf6d/clippy_lints%2Fsrc%2Fnew_without_default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fnew_without_default.rs?ref=89c8c3f4cdf4bc3289007d52932564dea6b3bf6d", "patch": "@@ -9,7 +9,7 @@ use rustc_hir as hir;\n use rustc_hir::HirIdSet;\n use rustc_lint::{LateContext, LateLintPass, LintContext};\n use rustc_middle::lint::in_external_macro;\n-use rustc_middle::ty::{Ty, TyS};\n+use rustc_middle::ty::TyS;\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::sym;\n \n@@ -65,6 +65,7 @@ impl<'tcx> LateLintPass<'tcx> for NewWithoutDefault {\n         if let hir::ItemKind::Impl(hir::Impl {\n             of_trait: None,\n             ref generics,\n+            self_ty: impl_self_ty,\n             items,\n             ..\n         }) = item.kind\n@@ -132,21 +133,23 @@ impl<'tcx> LateLintPass<'tcx> for NewWithoutDefault {\n                                 }\n \n                                 let generics_sugg = snippet(cx, generics.span, \"\");\n+                                let self_ty_fmt = self_ty.to_string();\n+                                let self_type_snip = snippet(cx, impl_self_ty.span, &self_ty_fmt);\n                                 span_lint_hir_and_then(\n                                     cx,\n                                     NEW_WITHOUT_DEFAULT,\n                                     id,\n                                     impl_item.span,\n                                     &format!(\n                                         \"you should consider adding a `Default` implementation for `{}`\",\n-                                        self_ty\n+                                        self_type_snip\n                                     ),\n                                     |diag| {\n                                         diag.suggest_prepend_item(\n                                             cx,\n                                             item.span,\n-                                            \"try this\",\n-                                            &create_new_without_default_suggest_msg(self_ty, &generics_sugg),\n+                                            \"try adding this\",\n+                                            &create_new_without_default_suggest_msg(&self_type_snip, &generics_sugg),\n                                             Applicability::MaybeIncorrect,\n                                         );\n                                     },\n@@ -160,12 +163,12 @@ impl<'tcx> LateLintPass<'tcx> for NewWithoutDefault {\n     }\n }\n \n-fn create_new_without_default_suggest_msg(ty: Ty<'_>, generics_sugg: &str) -> String {\n+fn create_new_without_default_suggest_msg(self_type_snip: &str, generics_sugg: &str) -> String {\n     #[rustfmt::skip]\n     format!(\n \"impl{} Default for {} {{\n     fn default() -> Self {{\n         Self::new()\n     }}\n-}}\", generics_sugg, ty)\n+}}\", generics_sugg, self_type_snip)\n }"}, {"sha": "4b2e7444dcf63251932ba94ee3c4ace4e59be4dc", "filename": "tests/ui/new_without_default.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/89c8c3f4cdf4bc3289007d52932564dea6b3bf6d/tests%2Fui%2Fnew_without_default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8c3f4cdf4bc3289007d52932564dea6b3bf6d/tests%2Fui%2Fnew_without_default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnew_without_default.rs?ref=89c8c3f4cdf4bc3289007d52932564dea6b3bf6d", "patch": "@@ -173,4 +173,16 @@ impl<T: Copy> BarGenerics<T> {\n     }\n }\n \n+pub mod issue7220 {\n+    pub struct Foo<T> {\n+        _bar: *mut T,\n+    }\n+\n+    impl<T> Foo<T> {\n+        pub fn new() -> Self {\n+            todo!()\n+        }\n+    }\n+}\n+\n fn main() {}"}, {"sha": "7c964000807ea9730bb38aba3da58a9be7f96227", "filename": "tests/ui/new_without_default.stderr", "status": "modified", "additions": 25, "deletions": 7, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/89c8c3f4cdf4bc3289007d52932564dea6b3bf6d/tests%2Fui%2Fnew_without_default.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/89c8c3f4cdf4bc3289007d52932564dea6b3bf6d/tests%2Fui%2Fnew_without_default.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnew_without_default.stderr?ref=89c8c3f4cdf4bc3289007d52932564dea6b3bf6d", "patch": "@@ -7,7 +7,7 @@ LL | |     }\n    | |_____^\n    |\n    = note: `-D clippy::new-without-default` implied by `-D warnings`\n-help: try this\n+help: try adding this\n    |\n LL | impl Default for Foo {\n LL |     fn default() -> Self {\n@@ -24,7 +24,7 @@ LL | |         Bar\n LL | |     }\n    | |_____^\n    |\n-help: try this\n+help: try adding this\n    |\n LL | impl Default for Bar {\n LL |     fn default() -> Self {\n@@ -41,7 +41,7 @@ LL | |         unimplemented!()\n LL | |     }\n    | |_____^\n    |\n-help: try this\n+help: try adding this\n    |\n LL | impl<'c> Default for LtKo<'c> {\n LL |     fn default() -> Self {\n@@ -58,7 +58,7 @@ LL | |         NewNotEqualToDerive { foo: 1 }\n LL | |     }\n    | |_____^\n    |\n-help: try this\n+help: try adding this\n    |\n LL | impl Default for NewNotEqualToDerive {\n LL |     fn default() -> Self {\n@@ -75,7 +75,7 @@ LL | |         Self(Default::default())\n LL | |     }\n    | |_____^\n    |\n-help: try this\n+help: try adding this\n    |\n LL | impl<T> Default for FooGenerics<T> {\n LL |     fn default() -> Self {\n@@ -92,7 +92,7 @@ LL | |         Self(Default::default())\n LL | |     }\n    | |_____^\n    |\n-help: try this\n+help: try adding this\n    |\n LL | impl<T: Copy> Default for BarGenerics<T> {\n LL |     fn default() -> Self {\n@@ -101,5 +101,23 @@ LL |     }\n LL | }\n    |\n \n-error: aborting due to 6 previous errors\n+error: you should consider adding a `Default` implementation for `Foo<T>`\n+  --> $DIR/new_without_default.rs:182:9\n+   |\n+LL | /         pub fn new() -> Self {\n+LL | |             todo!()\n+LL | |         }\n+   | |_________^\n+   |\n+help: try adding this\n+   |\n+LL |     impl<T> Default for Foo<T> {\n+LL |         fn default() -> Self {\n+LL |             Self::new()\n+LL |         }\n+LL |     }\n+LL | \n+ ...\n+\n+error: aborting due to 7 previous errors\n "}]}