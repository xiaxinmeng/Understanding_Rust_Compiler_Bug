{"sha": "c493ee4828ab8e94ed175ec781afe7351bf89784", "node_id": "C_kwDOAAsO6NoAKGM0OTNlZTQ4MjhhYjhlOTRlZDE3NWVjNzgxYWZlNzM1MWJmODk3ODQ", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2021-10-23T21:07:57Z"}, "committer": {"name": "Caleb Cartwright", "email": "calebcartwright@users.noreply.github.com", "date": "2021-10-28T01:41:57Z"}, "message": "fix clippy::needless_borrow", "tree": {"sha": "f5bef40d980765678e31c547261dd8030d90ce5e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f5bef40d980765678e31c547261dd8030d90ce5e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c493ee4828ab8e94ed175ec781afe7351bf89784", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c493ee4828ab8e94ed175ec781afe7351bf89784", "html_url": "https://github.com/rust-lang/rust/commit/c493ee4828ab8e94ed175ec781afe7351bf89784", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c493ee4828ab8e94ed175ec781afe7351bf89784/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "calebcartwright", "id": 13042488, "node_id": "MDQ6VXNlcjEzMDQyNDg4", "avatar_url": "https://avatars.githubusercontent.com/u/13042488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebcartwright", "html_url": "https://github.com/calebcartwright", "followers_url": "https://api.github.com/users/calebcartwright/followers", "following_url": "https://api.github.com/users/calebcartwright/following{/other_user}", "gists_url": "https://api.github.com/users/calebcartwright/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebcartwright/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebcartwright/subscriptions", "organizations_url": "https://api.github.com/users/calebcartwright/orgs", "repos_url": "https://api.github.com/users/calebcartwright/repos", "events_url": "https://api.github.com/users/calebcartwright/events{/privacy}", "received_events_url": "https://api.github.com/users/calebcartwright/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d454e8106024fcb517d8fc20d4bdd2c54229695a", "url": "https://api.github.com/repos/rust-lang/rust/commits/d454e8106024fcb517d8fc20d4bdd2c54229695a", "html_url": "https://github.com/rust-lang/rust/commit/d454e8106024fcb517d8fc20d4bdd2c54229695a"}], "stats": {"total": 182, "additions": 91, "deletions": 91}, "files": [{"sha": "76b66e9da80980ea30f24aa585ac64caea4ef71c", "filename": "src/attr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c493ee4828ab8e94ed175ec781afe7351bf89784/src%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c493ee4828ab8e94ed175ec781afe7351bf89784/src%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fattr.rs?ref=c493ee4828ab8e94ed175ec781afe7351bf89784", "patch": "@@ -451,7 +451,7 @@ impl Rewrite for [ast::Attribute] {\n                         if next.is_doc_comment() {\n                             let snippet = context.snippet(missing_span);\n                             let (_, mlb) = has_newlines_before_after_comment(snippet);\n-                            result.push_str(&mlb);\n+                            result.push_str(mlb);\n                         }\n                     }\n                     result.push('\\n');\n@@ -484,7 +484,7 @@ impl Rewrite for [ast::Attribute] {\n                     if next.is_doc_comment() {\n                         let snippet = context.snippet(missing_span);\n                         let (_, mlb) = has_newlines_before_after_comment(snippet);\n-                        result.push_str(&mlb);\n+                        result.push_str(mlb);\n                     }\n                 }\n                 result.push('\\n');"}, {"sha": "f653a12a8afeb95fb22d3c42475c14ca8da3947e", "filename": "src/attr/doc_comment.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c493ee4828ab8e94ed175ec781afe7351bf89784/src%2Fattr%2Fdoc_comment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c493ee4828ab8e94ed175ec781afe7351bf89784/src%2Fattr%2Fdoc_comment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fattr%2Fdoc_comment.rs?ref=c493ee4828ab8e94ed175ec781afe7351bf89784", "patch": "@@ -77,7 +77,7 @@ mod tests {\n     ) {\n         assert_eq!(\n             expected_comment,\n-            format!(\"{}\", DocCommentFormatter::new(&literal, style))\n+            format!(\"{}\", DocCommentFormatter::new(literal, style))\n         );\n     }\n }"}, {"sha": "759b21218c353e70787f853a6c09725bf7132b10", "filename": "src/cargo-fmt/main.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c493ee4828ab8e94ed175ec781afe7351bf89784/src%2Fcargo-fmt%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c493ee4828ab8e94ed175ec781afe7351bf89784/src%2Fcargo-fmt%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcargo-fmt%2Fmain.rs?ref=c493ee4828ab8e94ed175ec781afe7351bf89784", "patch": "@@ -401,12 +401,12 @@ fn get_targets_root_only(\n \n fn get_targets_recursive(\n     manifest_path: Option<&Path>,\n-    mut targets: &mut BTreeSet<Target>,\n+    targets: &mut BTreeSet<Target>,\n     visited: &mut BTreeSet<String>,\n ) -> Result<(), io::Error> {\n     let metadata = get_cargo_metadata(manifest_path)?;\n     for package in &metadata.packages {\n-        add_targets(&package.targets, &mut targets);\n+        add_targets(&package.targets, targets);\n \n         // Look for local dependencies using information available since cargo v1.51\n         // It's theoretically possible someone could use a newer version of rustfmt with\n@@ -427,7 +427,7 @@ fn get_targets_recursive(\n                     .any(|p| p.manifest_path.eq(&manifest_path))\n             {\n                 visited.insert(dependency.name.to_owned());\n-                get_targets_recursive(Some(&manifest_path), &mut targets, visited)?;\n+                get_targets_recursive(Some(&manifest_path), targets, visited)?;\n             }\n         }\n     }"}, {"sha": "e26e24ec55ad6c40fe495ddc41c57cba89e218c5", "filename": "src/chains.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c493ee4828ab8e94ed175ec781afe7351bf89784/src%2Fchains.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c493ee4828ab8e94ed175ec781afe7351bf89784/src%2Fchains.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fchains.rs?ref=c493ee4828ab8e94ed175ec781afe7351bf89784", "patch": "@@ -568,7 +568,7 @@ impl<'a> ChainFormatterShared<'a> {\n         } else {\n             self.rewrites\n                 .iter()\n-                .map(|rw| utils::unicode_str_width(&rw))\n+                .map(|rw| utils::unicode_str_width(rw))\n                 .sum()\n         } + last.tries;\n         let one_line_budget = if self.child_count == 1 {\n@@ -673,7 +673,7 @@ impl<'a> ChainFormatterShared<'a> {\n                 ChainItemKind::Comment(_, CommentPosition::Top) => result.push_str(&connector),\n                 _ => result.push_str(&connector),\n             }\n-            result.push_str(&rewrite);\n+            result.push_str(rewrite);\n         }\n \n         Some(result)"}, {"sha": "a3cd0359e6ba25224dbc351a2853817636e6ede8", "filename": "src/comment.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c493ee4828ab8e94ed175ec781afe7351bf89784/src%2Fcomment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c493ee4828ab8e94ed175ec781afe7351bf89784/src%2Fcomment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomment.rs?ref=c493ee4828ab8e94ed175ec781afe7351bf89784", "patch": "@@ -563,7 +563,7 @@ impl<'a> CommentRewrite<'a> {\n             result.push_str(line);\n             result.push_str(match iter.peek() {\n                 Some(next_line) if next_line.is_empty() => sep.trim_end(),\n-                Some(..) => &sep,\n+                Some(..) => sep,\n                 None => \"\",\n             });\n         }\n@@ -622,7 +622,7 @@ impl<'a> CommentRewrite<'a> {\n         let is_last = i == count_newlines(orig);\n \n         if let Some(ref mut ib) = self.item_block {\n-            if ib.add_line(&line) {\n+            if ib.add_line(line) {\n                 return false;\n             }\n             self.is_prev_line_multi_line = false;\n@@ -684,8 +684,8 @@ impl<'a> CommentRewrite<'a> {\n         self.item_block = None;\n         if let Some(stripped) = line.strip_prefix(\"```\") {\n             self.code_block_attr = Some(CodeBlockAttribute::new(stripped))\n-        } else if self.fmt.config.wrap_comments() && ItemizedBlock::is_itemized_line(&line) {\n-            let ib = ItemizedBlock::new(&line);\n+        } else if self.fmt.config.wrap_comments() && ItemizedBlock::is_itemized_line(line) {\n+            let ib = ItemizedBlock::new(line);\n             self.item_block = Some(ib);\n             return false;\n         }\n@@ -941,7 +941,7 @@ fn left_trim_comment_line<'a>(line: &'a str, style: &CommentStyle<'_>) -> (&'a s\n     {\n         (&line[4..], true)\n     } else if let CommentStyle::Custom(opener) = *style {\n-        if let Some(ref stripped) = line.strip_prefix(opener) {\n+        if let Some(stripped) = line.strip_prefix(opener) {\n             (stripped, true)\n         } else {\n             (&line[opener.trim_end().len()..], false)\n@@ -1570,7 +1570,7 @@ pub(crate) fn recover_comment_removed(\n                 context.parse_sess.span_to_filename(span),\n                 vec![FormattingError::from_span(\n                     span,\n-                    &context.parse_sess,\n+                    context.parse_sess,\n                     ErrorKind::LostComment,\n                 )],\n             );\n@@ -1675,7 +1675,7 @@ impl<'a> Iterator for CommentReducer<'a> {\n fn remove_comment_header(comment: &str) -> &str {\n     if comment.starts_with(\"///\") || comment.starts_with(\"//!\") {\n         &comment[3..]\n-    } else if let Some(ref stripped) = comment.strip_prefix(\"//\") {\n+    } else if let Some(stripped) = comment.strip_prefix(\"//\") {\n         stripped\n     } else if (comment.starts_with(\"/**\") && !comment.starts_with(\"/**/\"))\n         || comment.starts_with(\"/*!\")"}, {"sha": "76f2527db3dad1d69c78d8b54c7eeea4244b4469", "filename": "src/emitter/checkstyle.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c493ee4828ab8e94ed175ec781afe7351bf89784/src%2Femitter%2Fcheckstyle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c493ee4828ab8e94ed175ec781afe7351bf89784/src%2Femitter%2Fcheckstyle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Femitter%2Fcheckstyle.rs?ref=c493ee4828ab8e94ed175ec781afe7351bf89784", "patch": "@@ -121,15 +121,15 @@ mod tests {\n             format!(r#\"<file name=\"{}\">\"#, bin_file),\n             format!(\n                 r#\"<error line=\"2\" severity=\"warning\" message=\"Should be `{}`\" />\"#,\n-                XmlEscaped(&r#\"    println!(\"Hello, world!\");\"#),\n+                XmlEscaped(r#\"    println!(\"Hello, world!\");\"#),\n             ),\n             String::from(\"</file>\"),\n         ];\n         let exp_lib_xml = vec![\n             format!(r#\"<file name=\"{}\">\"#, lib_file),\n             format!(\n                 r#\"<error line=\"2\" severity=\"warning\" message=\"Should be `{}`\" />\"#,\n-                XmlEscaped(&r#\"    println!(\"Greetings!\");\"#),\n+                XmlEscaped(r#\"    println!(\"Greetings!\");\"#),\n             ),\n             String::from(\"</file>\"),\n         ];"}, {"sha": "7264ad8bbf365baaf0f2d7e74ff3fb8e61bd5e7d", "filename": "src/emitter/diff.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c493ee4828ab8e94ed175ec781afe7351bf89784/src%2Femitter%2Fdiff.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c493ee4828ab8e94ed175ec781afe7351bf89784/src%2Femitter%2Fdiff.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Femitter%2Fdiff.rs?ref=c493ee4828ab8e94ed175ec781afe7351bf89784", "patch": "@@ -23,7 +23,7 @@ impl Emitter for DiffEmitter {\n         }: FormattedFile<'_>,\n     ) -> Result<EmitterResult, io::Error> {\n         const CONTEXT_SIZE: usize = 3;\n-        let mismatch = make_diff(&original_text, formatted_text, CONTEXT_SIZE);\n+        let mismatch = make_diff(original_text, formatted_text, CONTEXT_SIZE);\n         let has_diff = !mismatch.is_empty();\n \n         if has_diff {"}, {"sha": "c67c14b1985229b4a229db5c75c0b4d4ab1e27da", "filename": "src/expr.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c493ee4828ab8e94ed175ec781afe7351bf89784/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c493ee4828ab8e94ed175ec781afe7351bf89784/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=c493ee4828ab8e94ed175ec781afe7351bf89784", "patch": "@@ -257,7 +257,7 @@ pub(crate) fn format_expr(\n                         }\n                         _ => false,\n                     },\n-                    ast::ExprKind::Unary(_, ref expr) => needs_space_before_range(context, &expr),\n+                    ast::ExprKind::Unary(_, ref expr) => needs_space_before_range(context, expr),\n                     _ => false,\n                 }\n             }\n@@ -423,7 +423,7 @@ fn rewrite_empty_block(\n     prefix: &str,\n     shape: Shape,\n ) -> Option<String> {\n-    if block_has_statements(&block) {\n+    if block_has_statements(block) {\n         return None;\n     }\n \n@@ -1148,7 +1148,7 @@ pub(crate) fn is_empty_block(\n     block: &ast::Block,\n     attrs: Option<&[ast::Attribute]>,\n ) -> bool {\n-    !block_has_statements(&block)\n+    !block_has_statements(block)\n         && !block_contains_comment(context, block)\n         && attrs.map_or(true, |a| inner_attributes(a).is_empty())\n }\n@@ -1621,7 +1621,7 @@ fn rewrite_struct_lit<'a>(\n     };\n \n     let fields_str =\n-        wrap_struct_field(context, &attrs, &fields_str, shape, v_shape, one_line_width)?;\n+        wrap_struct_field(context, attrs, &fields_str, shape, v_shape, one_line_width)?;\n     Some(format!(\"{} {{{}}}\", path_str, fields_str))\n \n     // FIXME if context.config.indent_style() == Visual, but we run out\n@@ -1888,7 +1888,7 @@ pub(crate) fn rewrite_assign_rhs_expr<R: Rewrite>(\n     shape: Shape,\n     rhs_tactics: RhsTactics,\n ) -> Option<String> {\n-    let last_line_width = last_line_width(&lhs).saturating_sub(if lhs.contains('\\n') {\n+    let last_line_width = last_line_width(lhs).saturating_sub(if lhs.contains('\\n') {\n         shape.indent.width()\n     } else {\n         0\n@@ -1947,7 +1947,7 @@ pub(crate) fn rewrite_assign_rhs_with_comments<S: Into<String>, R: Rewrite>(\n \n     if contains_comment {\n         let rhs = rhs.trim_start();\n-        combine_strs_with_missing_comments(context, &lhs, &rhs, between_span, shape, allow_extend)\n+        combine_strs_with_missing_comments(context, &lhs, rhs, between_span, shape, allow_extend)\n     } else {\n         Some(lhs + &rhs)\n     }"}, {"sha": "7d0facb8f12cf683b93fe7e17f630ce488190652", "filename": "src/formatting.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c493ee4828ab8e94ed175ec781afe7351bf89784/src%2Fformatting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c493ee4828ab8e94ed175ec781afe7351bf89784/src%2Fformatting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fformatting.rs?ref=c493ee4828ab8e94ed175ec781afe7351bf89784", "patch": "@@ -155,7 +155,7 @@ impl<'a, T: FormatHandler + 'a> FormatContext<'a, T> {\n         let snippet_provider = self.parse_session.snippet_provider(module.span);\n         let mut visitor = FmtVisitor::from_parse_sess(\n             &self.parse_session,\n-            &self.config,\n+            self.config,\n             &snippet_provider,\n             self.report.clone(),\n         );\n@@ -180,7 +180,7 @@ impl<'a, T: FormatHandler + 'a> FormatContext<'a, T> {\n             &mut visitor.buffer,\n             &path,\n             &visitor.skipped_range.borrow(),\n-            &self.config,\n+            self.config,\n             &self.report,\n         );\n "}, {"sha": "40e0d06f99df8d14b7279dabb7bf503c747a6fcc", "filename": "src/imports.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c493ee4828ab8e94ed175ec781afe7351bf89784/src%2Fimports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c493ee4828ab8e94ed175ec781afe7351bf89784/src%2Fimports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fimports.rs?ref=c493ee4828ab8e94ed175ec781afe7351bf89784", "patch": "@@ -275,7 +275,7 @@ impl UseTree {\n         shape: Shape,\n     ) -> Option<String> {\n         let vis = self.visibility.as_ref().map_or(Cow::from(\"\"), |vis| {\n-            crate::utils::format_visibility(context, &vis)\n+            crate::utils::format_visibility(context, vis)\n         });\n         let use_str = self\n             .rewrite(context, shape.offset_left(vis.len())?)\n@@ -929,7 +929,7 @@ impl Rewrite for UseTree {\n     fn rewrite(&self, context: &RewriteContext<'_>, mut shape: Shape) -> Option<String> {\n         let mut result = String::with_capacity(256);\n         let mut iter = self.path.iter().peekable();\n-        while let Some(ref segment) = iter.next() {\n+        while let Some(segment) = iter.next() {\n             let segment_str = segment.rewrite(context, shape)?;\n             result.push_str(&segment_str);\n             if iter.peek().is_some() {"}, {"sha": "1c7899b3ac3b321b264428f1cfbc58eb31a09cd2", "filename": "src/items.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/c493ee4828ab8e94ed175ec781afe7351bf89784/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c493ee4828ab8e94ed175ec781afe7351bf89784/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=c493ee4828ab8e94ed175ec781afe7351bf89784", "patch": "@@ -226,7 +226,7 @@ impl<'a> FnSig<'a> {\n     fn to_str(&self, context: &RewriteContext<'_>) -> String {\n         let mut result = String::with_capacity(128);\n         // Vis defaultness constness unsafety abi.\n-        result.push_str(&*format_visibility(context, &self.visibility));\n+        result.push_str(&*format_visibility(context, self.visibility));\n         result.push_str(format_defaultness(self.defaultness));\n         result.push_str(format_constness(self.constness));\n         result.push_str(format_async(&self.is_async));\n@@ -1220,7 +1220,7 @@ impl<'a> Rewrite for TraitAliasBounds<'a> {\n         } else if fits_single_line {\n             Cow::from(\" \")\n         } else {\n-            shape.indent.to_string_with_newline(&context.config)\n+            shape.indent.to_string_with_newline(context.config)\n         };\n \n         Some(format!(\"{}{}{}\", generic_bounds_str, space, where_str))\n@@ -1238,7 +1238,7 @@ pub(crate) fn format_trait_alias(\n     let alias = rewrite_ident(context, ident);\n     // 6 = \"trait \", 2 = \" =\"\n     let g_shape = shape.offset_left(6)?.sub_width(2)?;\n-    let generics_str = rewrite_generics(context, &alias, generics, g_shape)?;\n+    let generics_str = rewrite_generics(context, alias, generics, g_shape)?;\n     let vis_str = format_visibility(context, vis);\n     let lhs = format!(\"{}trait {} =\", vis_str, generics_str);\n     // 1 = \";\"\n@@ -1386,7 +1386,7 @@ fn format_empty_struct_or_tuple(\n     closer: &str,\n ) {\n     // 3 = \" {}\" or \"();\"\n-    let used_width = last_line_used_width(&result, offset.width()) + 3;\n+    let used_width = last_line_used_width(result, offset.width()) + 3;\n     if used_width > context.config.max_width() {\n         result.push_str(&offset.to_string_with_newline(context.config))\n     }\n@@ -2066,7 +2066,7 @@ fn rewrite_explicit_self(\n                     )?;\n                     Some(combine_strs_with_missing_comments(\n                         context,\n-                        &param_attrs,\n+                        param_attrs,\n                         &format!(\"&{} {}self\", lifetime_str, mut_str),\n                         span,\n                         shape,\n@@ -2075,7 +2075,7 @@ fn rewrite_explicit_self(\n                 }\n                 None => Some(combine_strs_with_missing_comments(\n                     context,\n-                    &param_attrs,\n+                    param_attrs,\n                     &format!(\"&{}self\", mut_str),\n                     span,\n                     shape,\n@@ -2091,7 +2091,7 @@ fn rewrite_explicit_self(\n \n             Some(combine_strs_with_missing_comments(\n                 context,\n-                &param_attrs,\n+                param_attrs,\n                 &format!(\"{}self: {}\", format_mutability(mutability), type_str),\n                 span,\n                 shape,\n@@ -2100,7 +2100,7 @@ fn rewrite_explicit_self(\n         }\n         ast::SelfKind::Value(mutability) => Some(combine_strs_with_missing_comments(\n             context,\n-            &param_attrs,\n+            param_attrs,\n             &format!(\"{}self\", format_mutability(mutability)),\n             span,\n             shape,\n@@ -2226,7 +2226,7 @@ fn rewrite_fn_base(\n     }\n \n     // Skip `pub(crate)`.\n-    let lo_after_visibility = get_bytepos_after_visibility(&fn_sig.visibility, span);\n+    let lo_after_visibility = get_bytepos_after_visibility(fn_sig.visibility, span);\n     // A conservative estimation, the goal is to be over all parens in generics\n     let params_start = fn_sig\n         .generics\n@@ -2984,7 +2984,7 @@ fn format_header(\n     let mut result = String::with_capacity(128);\n     let shape = Shape::indented(offset, context.config);\n \n-    result.push_str(&format_visibility(context, vis).trim());\n+    result.push_str(format_visibility(context, vis).trim());\n \n     // Check for a missing comment between the visibility and the item name.\n     let after_vis = vis.span.hi();\n@@ -3005,7 +3005,7 @@ fn format_header(\n         }\n     }\n \n-    result.push_str(&rewrite_ident(context, ident));\n+    result.push_str(rewrite_ident(context, ident));\n \n     result\n }\n@@ -3133,7 +3133,7 @@ impl Rewrite for ast::ForeignItem {\n                     let inner_attrs = inner_attributes(&self.attrs);\n                     let fn_ctxt = visit::FnCtxt::Foreign;\n                     visitor.visit_fn(\n-                        visit::FnKind::Fn(fn_ctxt, self.ident, &fn_sig, &self.vis, Some(body)),\n+                        visit::FnKind::Fn(fn_ctxt, self.ident, fn_sig, &self.vis, Some(body)),\n                         generics,\n                         &fn_sig.decl,\n                         self.span,\n@@ -3146,7 +3146,7 @@ impl Rewrite for ast::ForeignItem {\n                         context,\n                         shape.indent,\n                         self.ident,\n-                        &FnSig::from_method_sig(&fn_sig, generics, &self.vis),\n+                        &FnSig::from_method_sig(fn_sig, generics, &self.vis),\n                         span,\n                         FnBraceStyle::None,\n                     )\n@@ -3171,7 +3171,7 @@ impl Rewrite for ast::ForeignItem {\n                 let ast::TyAliasKind(_, ref generics, ref generic_bounds, ref type_default) =\n                     **ty_alias_kind;\n                 rewrite_type(\n-                    &context,\n+                    context,\n                     shape.indent,\n                     self.ident,\n                     &self.vis,\n@@ -3229,7 +3229,7 @@ fn rewrite_attrs(\n     combine_strs_with_missing_comments(\n         context,\n         &attrs_str,\n-        &item_str,\n+        item_str,\n         missed_span,\n         shape,\n         allow_extend,"}, {"sha": "792a1080f0e92189e276168cc0344ef8ba423eba", "filename": "src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c493ee4828ab8e94ed175ec781afe7351bf89784/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c493ee4828ab8e94ed175ec781afe7351bf89784/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=c493ee4828ab8e94ed175ec781afe7351bf89784", "patch": "@@ -283,7 +283,7 @@ impl FormatReport {\n         writeln!(\n             t,\n             \"{}\",\n-            FormatReportFormatterBuilder::new(&self)\n+            FormatReportFormatterBuilder::new(self)\n                 .enable_colors(true)\n                 .build()\n         )?;\n@@ -297,7 +297,7 @@ impl FormatReport {\n impl fmt::Display for FormatReport {\n     // Prints all the formatting errors.\n     fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> Result<(), fmt::Error> {\n-        write!(fmt, \"{}\", FormatReportFormatterBuilder::new(&self).build())?;\n+        write!(fmt, \"{}\", FormatReportFormatterBuilder::new(self).build())?;\n         Ok(())\n     }\n }"}, {"sha": "d341ec8e6b0e7d15f428cc3e91527635129f9687", "filename": "src/lists.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c493ee4828ab8e94ed175ec781afe7351bf89784/src%2Flists.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c493ee4828ab8e94ed175ec781afe7351bf89784/src%2Flists.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flists.rs?ref=c493ee4828ab8e94ed175ec781afe7351bf89784", "patch": "@@ -386,7 +386,7 @@ where\n                         result.push('\\n');\n                         result.push_str(indent_str);\n                         // This is the width of the item (without comments).\n-                        line_len = item.item.as_ref().map_or(0, |s| unicode_str_width(&s));\n+                        line_len = item.item.as_ref().map_or(0, |s| unicode_str_width(s));\n                     }\n                 } else {\n                     result.push(' ')\n@@ -820,7 +820,7 @@ where\n pub(crate) fn total_item_width(item: &ListItem) -> usize {\n     comment_len(item.pre_comment.as_ref().map(|x| &(*x)[..]))\n         + comment_len(item.post_comment.as_ref().map(|x| &(*x)[..]))\n-        + item.item.as_ref().map_or(0, |s| unicode_str_width(&s))\n+        + item.item.as_ref().map_or(0, |s| unicode_str_width(s))\n }\n \n fn comment_len(comment: Option<&str>) -> usize {"}, {"sha": "ef747638e33ec83459e4b9f9fe02d052e41c4812", "filename": "src/macros.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c493ee4828ab8e94ed175ec781afe7351bf89784/src%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c493ee4828ab8e94ed175ec781afe7351bf89784/src%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmacros.rs?ref=c493ee4828ab8e94ed175ec781afe7351bf89784", "patch": "@@ -186,7 +186,7 @@ fn return_macro_parse_failure_fallback(\n         })\n         .unwrap_or(false);\n     if is_like_block_indent_style {\n-        return trim_left_preserve_layout(context.snippet(span), indent, &context.config);\n+        return trim_left_preserve_layout(context.snippet(span), indent, context.config);\n     }\n \n     context.skipped_range.borrow_mut().push((\n@@ -437,7 +437,7 @@ fn rewrite_macro_inner(\n             // the `macro_name!` and `{ /* macro_body */ }` but skip modifying\n             // anything in between the braces (for now).\n             let snippet = context.snippet(mac.span()).trim_start_matches(|c| c != '{');\n-            match trim_left_preserve_layout(snippet, shape.indent, &context.config) {\n+            match trim_left_preserve_layout(snippet, shape.indent, context.config) {\n                 Some(macro_body) => Some(format!(\"{} {}\", macro_name, macro_body)),\n                 None => Some(format!(\"{} {}\", macro_name, snippet)),\n             }\n@@ -901,7 +901,7 @@ impl MacroArgParser {\n                     break;\n                 }\n                 TokenTree::Token(ref t) => {\n-                    buffer.push_str(&pprust::token_to_string(&t));\n+                    buffer.push_str(&pprust::token_to_string(t));\n                 }\n                 _ => return None,\n             }\n@@ -1045,7 +1045,7 @@ fn wrap_macro_args_inner(\n     let mut iter = args.iter().peekable();\n     let indent_str = shape.indent.to_string_with_newline(context.config);\n \n-    while let Some(ref arg) = iter.next() {\n+    while let Some(arg) = iter.next() {\n         result.push_str(&arg.rewrite(context, shape, use_multiple_lines)?);\n \n         if use_multiple_lines\n@@ -1055,7 +1055,7 @@ fn wrap_macro_args_inner(\n                 result.pop();\n             }\n             result.push_str(&indent_str);\n-        } else if let Some(ref next_arg) = iter.peek() {\n+        } else if let Some(next_arg) = iter.peek() {\n             let space_before_dollar =\n                 !arg.kind.ends_with_space() && next_arg.kind.starts_with_dollar();\n             let space_before_brace = next_arg.kind.starts_with_brace();\n@@ -1370,7 +1370,7 @@ impl MacroBranch {\n                     {\n                         s += &indent_str;\n                     }\n-                    (s + l + \"\\n\", indent_next_line(kind, &l, &config))\n+                    (s + l + \"\\n\", indent_next_line(kind, l, &config))\n                 },\n             )\n             .0;\n@@ -1514,11 +1514,11 @@ fn rewrite_macro_with_items(\n             MacroArg::Item(item) => item,\n             _ => return None,\n         };\n-        visitor.visit_item(&item);\n+        visitor.visit_item(item);\n     }\n \n     let mut result = String::with_capacity(256);\n-    result.push_str(&macro_name);\n+    result.push_str(macro_name);\n     result.push_str(opener);\n     result.push_str(&visitor.block_indent.to_string_with_newline(context.config));\n     result.push_str(visitor.buffer.trim());"}, {"sha": "25b953ef425732b03e9c3992dabc6b38ee8afee4", "filename": "src/matches.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c493ee4828ab8e94ed175ec781afe7351bf89784/src%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c493ee4828ab8e94ed175ec781afe7351bf89784/src%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmatches.rs?ref=c493ee4828ab8e94ed175ec781afe7351bf89784", "patch": "@@ -319,7 +319,7 @@ fn flatten_arm_body<'a>(\n     let can_extend =\n         |expr| !context.config.force_multiline_blocks() && can_flatten_block_around_this(expr);\n \n-    if let Some(ref block) = block_can_be_flattened(context, body) {\n+    if let Some(block) = block_can_be_flattened(context, body) {\n         if let ast::StmtKind::Expr(ref expr) = block.stmts[0].kind {\n             if let ast::ExprKind::Block(..) = expr.kind {\n                 flatten_arm_body(context, expr, None)\n@@ -393,7 +393,7 @@ fn rewrite_match_body(\n         if comment_str.is_empty() {\n             String::new()\n         } else {\n-            rewrite_comment(comment_str, false, shape, &context.config)?\n+            rewrite_comment(comment_str, false, shape, context.config)?\n         }\n     };\n \n@@ -408,8 +408,8 @@ fn rewrite_match_body(\n                 result.push_str(&arrow_comment);\n             }\n             result.push_str(&nested_indent_str);\n-            result.push_str(&body_str);\n-            result.push_str(&comma);\n+            result.push_str(body_str);\n+            result.push_str(comma);\n             return Some(result);\n         }\n \n@@ -451,7 +451,7 @@ fn rewrite_match_body(\n             result.push_str(&arrow_comment);\n         }\n         result.push_str(&block_sep);\n-        result.push_str(&body_str);\n+        result.push_str(body_str);\n         result.push_str(&body_suffix);\n         Some(result)\n     };"}, {"sha": "b0c1604a6027179b1277c2938cd063a9018489de", "filename": "src/modules.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c493ee4828ab8e94ed175ec781afe7351bf89784/src%2Fmodules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c493ee4828ab8e94ed175ec781afe7351bf89784/src%2Fmodules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmodules.rs?ref=c493ee4828ab8e94ed175ec781afe7351bf89784", "patch": "@@ -290,7 +290,7 @@ impl<'ast, 'sess, 'c> ModResolver<'ast, 'sess> {\n                 };\n                 self.visit_sub_mod_after_directory_update(sub_mod, Some(directory))\n             }\n-            SubModKind::Internal(ref item) => {\n+            SubModKind::Internal(item) => {\n                 self.push_inline_mod_directory(item.ident, &item.attrs);\n                 self.visit_sub_mod_after_directory_update(sub_mod, None)\n             }\n@@ -317,7 +317,7 @@ impl<'ast, 'sess, 'c> ModResolver<'ast, 'sess> {\n         }\n         match (sub_mod.ast_mod_kind, sub_mod.items) {\n             (Some(Cow::Borrowed(ast::ModKind::Loaded(items, _, _))), _) => {\n-                self.visit_mod_from_ast(&items)\n+                self.visit_mod_from_ast(items)\n             }\n             (Some(Cow::Owned(..)), Cow::Owned(items)) => self.visit_mod_outside_ast(items),\n             (_, _) => Ok(()),"}, {"sha": "3475f5c378cd2fbde554e4a79d0c191bf99d0a97", "filename": "src/overflow.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c493ee4828ab8e94ed175ec781afe7351bf89784/src%2Foverflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c493ee4828ab8e94ed175ec781afe7351bf89784/src%2Foverflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Foverflow.rs?ref=c493ee4828ab8e94ed175ec781afe7351bf89784", "patch": "@@ -394,7 +394,7 @@ impl<'a> Context<'a> {\n     ) -> Option<String> {\n         let last_item = self.last_item()?;\n         let rewrite = match last_item {\n-            OverflowableItem::Expr(ref expr) => {\n+            OverflowableItem::Expr(expr) => {\n                 match expr.kind {\n                     // When overflowing the closure which consists of a single control flow\n                     // expression, force to use block if its condition uses multi line."}, {"sha": "d1c75126ea4a7fce24a8eede42ecd677df916d3e", "filename": "src/pairs.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c493ee4828ab8e94ed175ec781afe7351bf89784/src%2Fpairs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c493ee4828ab8e94ed175ec781afe7351bf89784/src%2Fpairs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fpairs.rs?ref=c493ee4828ab8e94ed175ec781afe7351bf89784", "patch": "@@ -55,11 +55,11 @@ fn rewrite_pairs_one_line<T: Rewrite>(\n \n     for ((_, rewrite), s) in list.list.iter().zip(list.separators.iter()) {\n         if let Some(rewrite) = rewrite {\n-            if !is_single_line(&rewrite) || result.len() > shape.width {\n+            if !is_single_line(rewrite) || result.len() > shape.width {\n                 return None;\n             }\n \n-            result.push_str(&rewrite);\n+            result.push_str(rewrite);\n             result.push(' ');\n             result.push_str(s);\n             result.push(' ');\n@@ -94,18 +94,18 @@ fn rewrite_pairs_multiline<T: Rewrite>(\n     shape: Shape,\n     context: &RewriteContext<'_>,\n ) -> Option<String> {\n-    let rhs_offset = shape.rhs_overhead(&context.config);\n+    let rhs_offset = shape.rhs_overhead(context.config);\n     let nested_shape = (match context.config.indent_style() {\n         IndentStyle::Visual => shape.visual_indent(0),\n         IndentStyle::Block => shape.block_indent(context.config.tab_spaces()),\n     })\n-    .with_max_width(&context.config)\n+    .with_max_width(context.config)\n     .sub_width(rhs_offset)?;\n \n     let indent_str = nested_shape.indent.to_string_with_newline(context.config);\n     let mut result = String::new();\n \n-    result.push_str(&list.list[0].1.as_ref()?);\n+    result.push_str(list.list[0].1.as_ref()?);\n \n     for ((e, default_rw), s) in list.list[1..].iter().zip(list.separators.iter()) {\n         // The following test checks if we should keep two subexprs on the same\n@@ -144,7 +144,7 @@ fn rewrite_pairs_multiline<T: Rewrite>(\n             }\n         }\n \n-        result.push_str(&default_rw.as_ref()?);\n+        result.push_str(default_rw.as_ref()?);\n     }\n     Some(result)\n }\n@@ -264,12 +264,12 @@ impl FlattenPair for ast::Expr {\n                 return node.rewrite(context, shape);\n             }\n             let nested_overhead = sep + 1;\n-            let rhs_offset = shape.rhs_overhead(&context.config);\n+            let rhs_offset = shape.rhs_overhead(context.config);\n             let nested_shape = (match context.config.indent_style() {\n                 IndentStyle::Visual => shape.visual_indent(0),\n                 IndentStyle::Block => shape.block_indent(context.config.tab_spaces()),\n             })\n-            .with_max_width(&context.config)\n+            .with_max_width(context.config)\n             .sub_width(rhs_offset)?;\n             let default_shape = match context.config.binop_separator() {\n                 SeparatorPlace::Back => nested_shape.sub_width(nested_overhead)?,"}, {"sha": "2676c64735565714448b2f2c7f2d08325d8879f7", "filename": "src/patterns.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c493ee4828ab8e94ed175ec781afe7351bf89784/src%2Fpatterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c493ee4828ab8e94ed175ec781afe7351bf89784/src%2Fpatterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fpatterns.rs?ref=c493ee4828ab8e94ed175ec781afe7351bf89784", "patch": "@@ -482,7 +482,7 @@ fn rewrite_tuple_pat(\n     let path_str = path_str.unwrap_or_default();\n \n     overflow::rewrite_with_parens(\n-        &context,\n+        context,\n         &path_str,\n         pat_vec.iter(),\n         shape,"}, {"sha": "14b92238cfa6c66917d5cf5835f3e9040146fefa", "filename": "src/syntux/parser.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c493ee4828ab8e94ed175ec781afe7351bf89784/src%2Fsyntux%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c493ee4828ab8e94ed175ec781afe7351bf89784/src%2Fsyntux%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fsyntux%2Fparser.rs?ref=c493ee4828ab8e94ed175ec781afe7351bf89784", "patch": "@@ -112,7 +112,7 @@ impl<'a> Parser<'a> {\n         span: Span,\n     ) -> Result<(Vec<ast::Attribute>, Vec<ptr::P<ast::Item>>, Span), ParserError> {\n         let result = catch_unwind(AssertUnwindSafe(|| {\n-            let mut parser = new_parser_from_file(sess.inner(), &path, Some(span));\n+            let mut parser = new_parser_from_file(sess.inner(), path, Some(span));\n             match parser.parse_mod(&TokenKind::Eof) {\n                 Ok(result) => Some(result),\n                 Err(mut e) => {"}, {"sha": "cdb4893d443b9b381cde8e4c1d284aee5154ddd4", "filename": "src/syntux/session.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c493ee4828ab8e94ed175ec781afe7351bf89784/src%2Fsyntux%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c493ee4828ab8e94ed175ec781afe7351bf89784/src%2Fsyntux%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fsyntux%2Fsession.rs?ref=c493ee4828ab8e94ed175ec781afe7351bf89784", "patch": "@@ -164,7 +164,7 @@ impl ParseSess {\n     }\n \n     pub(crate) fn ignore_file(&self, path: &FileName) -> bool {\n-        self.ignore_path_set.as_ref().is_match(&path)\n+        self.ignore_path_set.as_ref().is_match(path)\n     }\n \n     pub(crate) fn set_silent_emitter(&mut self) {"}, {"sha": "e2620508c340bad91699e8ebd90b36f2a80f6049", "filename": "src/test/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c493ee4828ab8e94ed175ec781afe7351bf89784/src%2Ftest%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c493ee4828ab8e94ed175ec781afe7351bf89784/src%2Ftest%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmod.rs?ref=c493ee4828ab8e94ed175ec781afe7351bf89784", "patch": "@@ -535,9 +535,9 @@ fn check_files(files: Vec<PathBuf>, opt_config: &Option<PathBuf>) -> (Vec<Format\n \n         debug!(\"Testing '{}'...\", file_name.display());\n \n-        match idempotent_check(&file_name, &opt_config) {\n+        match idempotent_check(&file_name, opt_config) {\n             Ok(ref report) if report.has_warnings() => {\n-                print!(\"{}\", FormatReportFormatterBuilder::new(&report).build());\n+                print!(\"{}\", FormatReportFormatterBuilder::new(report).build());\n                 fails += 1;\n             }\n             Ok(report) => reports.push(report),"}, {"sha": "9ea90c5e46dd87104522dd220558e7127ade7cdb", "filename": "src/types.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c493ee4828ab8e94ed175ec781afe7351bf89784/src%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c493ee4828ab8e94ed175ec781afe7351bf89784/src%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftypes.rs?ref=c493ee4828ab8e94ed175ec781afe7351bf89784", "patch": "@@ -728,7 +728,7 @@ impl Rewrite for ast::Ty {\n                     result = combine_strs_with_missing_comments(\n                         context,\n                         result.trim_end(),\n-                        &mt.ty.rewrite(&context, shape)?,\n+                        &mt.ty.rewrite(context, shape)?,\n                         before_ty_span,\n                         shape,\n                         true,\n@@ -738,7 +738,7 @@ impl Rewrite for ast::Ty {\n                     let budget = shape.width.checked_sub(used_width)?;\n                     let ty_str = mt\n                         .ty\n-                        .rewrite(&context, Shape::legacy(budget, shape.indent + used_width))?;\n+                        .rewrite(context, Shape::legacy(budget, shape.indent + used_width))?;\n                     result.push_str(&ty_str);\n                 }\n "}, {"sha": "3a8713c5bdb01d678f41892a2a149ee8946e8575", "filename": "src/utils.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c493ee4828ab8e94ed175ec781afe7351bf89784/src%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c493ee4828ab8e94ed175ec781afe7351bf89784/src%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Futils.rs?ref=c493ee4828ab8e94ed175ec781afe7351bf89784", "patch": "@@ -42,7 +42,7 @@ pub(crate) fn is_same_visibility(a: &Visibility, b: &Visibility) -> bool {\n         (\n             VisibilityKind::Restricted { path: p, .. },\n             VisibilityKind::Restricted { path: q, .. },\n-        ) => pprust::path_to_string(&p) == pprust::path_to_string(&q),\n+        ) => pprust::path_to_string(p) == pprust::path_to_string(q),\n         (VisibilityKind::Public, VisibilityKind::Public)\n         | (VisibilityKind::Inherited, VisibilityKind::Inherited)\n         | (\n@@ -689,7 +689,7 @@ mod test {\n     #[test]\n     fn test_remove_trailing_white_spaces() {\n         let s = \"    r#\\\"\\n        test\\n    \\\"#\";\n-        assert_eq!(remove_trailing_white_spaces(&s), s);\n+        assert_eq!(remove_trailing_white_spaces(s), s);\n     }\n \n     #[test]\n@@ -698,7 +698,7 @@ mod test {\n         let config = Config::default();\n         let indent = Indent::new(4, 0);\n         assert_eq!(\n-            trim_left_preserve_layout(&s, indent, &config),\n+            trim_left_preserve_layout(s, indent, &config),\n             Some(\"aaa\\n    bbb\\n    ccc\".to_string())\n         );\n     }"}, {"sha": "c37e1cb10117e504548c68609cf2937fb69fc22f", "filename": "src/visitor.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/c493ee4828ab8e94ed175ec781afe7351bf89784/src%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c493ee4828ab8e94ed175ec781afe7351bf89784/src%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvisitor.rs?ref=c493ee4828ab8e94ed175ec781afe7351bf89784", "patch": "@@ -164,7 +164,7 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n                     );\n                 } else {\n                     let shape = self.shape();\n-                    let rewrite = self.with_context(|ctx| stmt.rewrite(&ctx, shape));\n+                    let rewrite = self.with_context(|ctx| stmt.rewrite(ctx, shape));\n                     self.push_rewrite(stmt.span(), rewrite)\n                 }\n             }\n@@ -273,9 +273,9 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n \n         let comment_snippet = self.snippet(span);\n \n-        let align_to_right = if unindent_comment && contains_comment(&comment_snippet) {\n+        let align_to_right = if unindent_comment && contains_comment(comment_snippet) {\n             let first_lines = comment_snippet.splitn(2, '/').next().unwrap_or(\"\");\n-            last_line_width(first_lines) > last_line_width(&comment_snippet)\n+            last_line_width(first_lines) > last_line_width(comment_snippet)\n         } else {\n             false\n         };\n@@ -439,7 +439,7 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n         let filtered_attrs;\n         let mut attrs = &item.attrs;\n         let skip_context_saved = self.skip_context.clone();\n-        self.skip_context.update_with_attrs(&attrs);\n+        self.skip_context.update_with_attrs(attrs);\n \n         let should_visit_node_again = match item.kind {\n             // For use/extern crate items, skip rewriting attributes but check for a skip attribute.\n@@ -488,12 +488,12 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n                 ast::ItemKind::Use(ref tree) => self.format_import(item, tree),\n                 ast::ItemKind::Impl { .. } => {\n                     let block_indent = self.block_indent;\n-                    let rw = self.with_context(|ctx| format_impl(&ctx, item, block_indent));\n+                    let rw = self.with_context(|ctx| format_impl(ctx, item, block_indent));\n                     self.push_rewrite(item.span, rw);\n                 }\n                 ast::ItemKind::Trait(..) => {\n                     let block_indent = self.block_indent;\n-                    let rw = self.with_context(|ctx| format_trait(&ctx, item, block_indent));\n+                    let rw = self.with_context(|ctx| format_trait(ctx, item, block_indent));\n                     self.push_rewrite(item.span, rw);\n                 }\n                 ast::ItemKind::TraitAlias(ref generics, ref generic_bounds) => {\n@@ -552,7 +552,7 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n                             visit::FnKind::Fn(\n                                 fn_ctxt,\n                                 item.ident,\n-                                &fn_signature,\n+                                fn_signature,\n                                 &item.vis,\n                                 Some(body),\n                             ),\n@@ -567,7 +567,7 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n                         let rewrite = self.rewrite_required_fn(\n                             indent,\n                             item.ident,\n-                            &fn_signature,\n+                            fn_signature,\n                             &item.vis,\n                             generics,\n                             item.span,\n@@ -718,7 +718,7 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n                         &ii.vis,\n                         defaultness,\n                         ty.as_ref(),\n-                        &generics,\n+                        generics,\n                         &self.get_context(),\n                         self.block_indent,\n                         ii.span,\n@@ -905,7 +905,7 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n     }\n \n     fn walk_mod_items(&mut self, items: &[rustc_ast::ptr::P<ast::Item>]) {\n-        self.visit_items_with_reordering(&ptr_vec_to_ref_vec(&items));\n+        self.visit_items_with_reordering(&ptr_vec_to_ref_vec(items));\n     }\n \n     fn walk_stmts(&mut self, stmts: &[Stmt<'_>], include_current_empty_semi: bool) {"}]}