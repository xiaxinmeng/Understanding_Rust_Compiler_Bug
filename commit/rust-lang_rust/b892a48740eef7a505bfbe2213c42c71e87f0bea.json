{"sha": "b892a48740eef7a505bfbe2213c42c71e87f0bea", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI4OTJhNDg3NDBlZWY3YTUwNWJmYmUyMjEzYzQyYzcxZTg3ZjBiZWE=", "commit": {"author": {"name": "Kirill Bulatov", "email": "mail4score@gmail.com", "date": "2020-03-21T22:40:07Z"}, "committer": {"name": "Kirill Bulatov", "email": "mail4score@gmail.com", "date": "2020-03-30T10:39:14Z"}, "message": "Code review fixes\n\nCo-Authored-By: Veetaha <veetaha2@gmail.com>", "tree": {"sha": "8f7115e538c3b21407eb17c604636eb3bb6362c8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8f7115e538c3b21407eb17c604636eb3bb6362c8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b892a48740eef7a505bfbe2213c42c71e87f0bea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b892a48740eef7a505bfbe2213c42c71e87f0bea", "html_url": "https://github.com/rust-lang/rust/commit/b892a48740eef7a505bfbe2213c42c71e87f0bea", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b892a48740eef7a505bfbe2213c42c71e87f0bea/comments", "author": {"login": "SomeoneToIgnore", "id": 2690773, "node_id": "MDQ6VXNlcjI2OTA3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2690773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeoneToIgnore", "html_url": "https://github.com/SomeoneToIgnore", "followers_url": "https://api.github.com/users/SomeoneToIgnore/followers", "following_url": "https://api.github.com/users/SomeoneToIgnore/following{/other_user}", "gists_url": "https://api.github.com/users/SomeoneToIgnore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeoneToIgnore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeoneToIgnore/subscriptions", "organizations_url": "https://api.github.com/users/SomeoneToIgnore/orgs", "repos_url": "https://api.github.com/users/SomeoneToIgnore/repos", "events_url": "https://api.github.com/users/SomeoneToIgnore/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeoneToIgnore/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SomeoneToIgnore", "id": 2690773, "node_id": "MDQ6VXNlcjI2OTA3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2690773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeoneToIgnore", "html_url": "https://github.com/SomeoneToIgnore", "followers_url": "https://api.github.com/users/SomeoneToIgnore/followers", "following_url": "https://api.github.com/users/SomeoneToIgnore/following{/other_user}", "gists_url": "https://api.github.com/users/SomeoneToIgnore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeoneToIgnore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeoneToIgnore/subscriptions", "organizations_url": "https://api.github.com/users/SomeoneToIgnore/orgs", "repos_url": "https://api.github.com/users/SomeoneToIgnore/repos", "events_url": "https://api.github.com/users/SomeoneToIgnore/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeoneToIgnore/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "590af37bff2b5ec9a692f2468c98acf7f9f492c0", "url": "https://api.github.com/repos/rust-lang/rust/commits/590af37bff2b5ec9a692f2468c98acf7f9f492c0", "html_url": "https://github.com/rust-lang/rust/commit/590af37bff2b5ec9a692f2468c98acf7f9f492c0"}], "stats": {"total": 36, "additions": 18, "deletions": 18}, "files": [{"sha": "7e96be319235947c07e706a38cc4837bdb5a6359", "filename": "crates/rust-analyzer/src/main_loop.rs", "status": "modified", "additions": 9, "deletions": 12, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/b892a48740eef7a505bfbe2213c42c71e87f0bea/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b892a48740eef7a505bfbe2213c42c71e87f0bea/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs?ref=b892a48740eef7a505bfbe2213c42c71e87f0bea", "patch": "@@ -417,22 +417,19 @@ fn loop_turn(\n                 if Some(resp.id) == loop_state.configuration_request_id {\n                     loop_state.configuration_request_id = None;\n                     if let Some(err) = resp.error {\n-                        log::error!(\"failed fetch the server settings: {:?}\", err)\n-                    } else if resp.result.is_none() {\n-                        log::error!(\"received empty server settings response from the client\")\n-                    } else {\n-                        let new_config =\n-                            serde_json::from_value::<Vec<ServerConfig>>(resp.result.unwrap())?\n-                                .first()\n-                                .expect(\n-                                    \"The client is expected to always send a non-empty config data\",\n-                                )\n-                                .to_owned();\n+                        log::error!(\"failed to fetch the server settings: {:?}\", err)\n+                    } else if let Some(result) = resp.result {\n+                        let new_config = serde_json::from_value::<Vec<ServerConfig>>(result)?\n+                            .first()\n+                            .expect(\"The client is expected to always send a non-empty config data\")\n+                            .to_owned();\n                         world_state.update_configuration(\n                             new_config.lru_capacity,\n                             get_options(&new_config, text_document_caps),\n                             get_feature_flags(&new_config, connection),\n                         );\n+                    } else {\n+                        log::error!(\"received empty server settings response from the client\")\n                     }\n                 }\n             }\n@@ -673,7 +670,7 @@ fn on_notification(\n                 ConfigurationParams::default(),\n             );\n             msg_sender.send(request.into())?;\n-            loop_state.configuration_request_id.replace(request_id);\n+            loop_state.configuration_request_id = Some(request_id);\n \n             return Ok(());\n         }"}, {"sha": "01084f81868b1171e39fd6f0e434e28616a48701", "filename": "crates/rust-analyzer/src/world.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b892a48740eef7a505bfbe2213c42c71e87f0bea/crates%2Frust-analyzer%2Fsrc%2Fworld.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b892a48740eef7a505bfbe2213c42c71e87f0bea/crates%2Frust-analyzer%2Fsrc%2Fworld.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fworld.rs?ref=b892a48740eef7a505bfbe2213c42c71e87f0bea", "patch": "@@ -32,6 +32,7 @@ use ra_db::ExternSourceId;\n use rustc_hash::{FxHashMap, FxHashSet};\n \n fn create_watcher(workspaces: &[ProjectWorkspace], options: &Options) -> CheckWatcher {\n+    // FIXME: Figure out the multi-workspace situation\n     workspaces\n         .iter()\n         .find_map(|w| match w {"}, {"sha": "d72ecc58fc27b45969329bb9b5c5a47cd0e340c3", "filename": "editors/code/src/client.ts", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b892a48740eef7a505bfbe2213c42c71e87f0bea/editors%2Fcode%2Fsrc%2Fclient.ts", "raw_url": "https://github.com/rust-lang/rust/raw/b892a48740eef7a505bfbe2213c42c71e87f0bea/editors%2Fcode%2Fsrc%2Fclient.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fclient.ts?ref=b892a48740eef7a505bfbe2213c42c71e87f0bea", "patch": "@@ -5,7 +5,7 @@ import { Config } from './config';\n import { CallHierarchyFeature } from 'vscode-languageclient/lib/callHierarchy.proposed';\n import { SemanticTokensFeature, DocumentSemanticsTokensSignature } from 'vscode-languageclient/lib/semanticTokens.proposed';\n \n-export function configToServerOptions(config: Config): object {\n+export function configToServerOptions(config: Config) {\n     return {\n         publishDecorations: !config.highlightingSemanticTokens,\n         lruCapacity: config.lruCapacity,"}, {"sha": "6a8bd942e163109e15249f70117adc3f121161e4", "filename": "editors/code/src/inlay_hints.ts", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b892a48740eef7a505bfbe2213c42c71e87f0bea/editors%2Fcode%2Fsrc%2Finlay_hints.ts", "raw_url": "https://github.com/rust-lang/rust/raw/b892a48740eef7a505bfbe2213c42c71e87f0bea/editors%2Fcode%2Fsrc%2Finlay_hints.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Finlay_hints.ts?ref=b892a48740eef7a505bfbe2213c42c71e87f0bea", "patch": "@@ -17,9 +17,11 @@ export function activateInlayHints(ctx: Ctx) {\n             ) {\n                 return this.dispose();\n             }\n-            if (!this.updater) this.updater = new HintsUpdater(ctx);\n-\n-            this.updater.syncCacheAndRenderHints();\n+            if (this.updater) {\n+                this.updater.syncCacheAndRenderHints();\n+            } else {\n+                this.updater = new HintsUpdater(ctx);\n+            }\n         },\n         dispose() {\n             this.updater?.dispose();\n@@ -126,7 +128,7 @@ class HintsUpdater implements Disposable {\n         this.syncCacheAndRenderHints();\n     }\n \n-    public syncCacheAndRenderHints() {\n+    syncCacheAndRenderHints() {\n         // FIXME: make inlayHints request pass an array of files?\n         this.sourceFiles.forEach((file, uri) => this.fetchHints(file).then(hints => {\n             if (!hints) return;"}, {"sha": "a46dbde33cea7d2b8455d2900480e53176402994", "filename": "editors/code/src/main.ts", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b892a48740eef7a505bfbe2213c42c71e87f0bea/editors%2Fcode%2Fsrc%2Fmain.ts", "raw_url": "https://github.com/rust-lang/rust/raw/b892a48740eef7a505bfbe2213c42c71e87f0bea/editors%2Fcode%2Fsrc%2Fmain.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fmain.ts?ref=b892a48740eef7a505bfbe2213c42c71e87f0bea", "patch": "@@ -95,7 +95,7 @@ export async function activate(context: vscode.ExtensionContext) {\n     vscode.workspace.onDidChangeConfiguration(\n         _ => ctx?.client?.sendNotification('workspace/didChangeConfiguration', { settings: \"\" }),\n         null,\n-        ctx?.subscriptions,\n+        ctx.subscriptions,\n     );\n }\n "}]}