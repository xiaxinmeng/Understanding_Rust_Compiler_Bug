{"sha": "cb93e9c0ec6058df03e163fd7b3e652f7f22041d", "node_id": "C_kwDOAAsO6NoAKGNiOTNlOWMwZWM2MDU4ZGYwM2UxNjNmZDdiM2U2NTJmN2YyMjA0MWQ", "commit": {"author": {"name": "David Tolnay", "email": "dtolnay@gmail.com", "date": "2022-01-21T09:34:19Z"}, "committer": {"name": "David Tolnay", "email": "dtolnay@gmail.com", "date": "2022-01-31T03:44:59Z"}, "message": "Compute indent never relative to current column\n\nPreviously the pretty printer would compute indentation always relative\nto whatever column a block begins at, like this:\n\n    fn demo(arg1: usize,\n            arg2: usize);\n\nThis is never the thing to do in the dominant contemporary Rust style.\nRustfmt's default and the style used by the vast majority of Rust\ncodebases is block indentation:\n\n    fn demo(\n        arg1: usize,\n        arg2: usize,\n    );\n\nwhere every indentation level is a multiple of 4 spaces and each level\nis indented relative to the indentation of the previous line, not the\nposition that the block starts in.", "tree": {"sha": "9e5cfb35aa449e9ac8e410d4bfca9e335f05ae89", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9e5cfb35aa449e9ac8e410d4bfca9e335f05ae89"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cb93e9c0ec6058df03e163fd7b3e652f7f22041d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEERijF2Cz/ZdaBZKeK+boUO5X/bYIFAmH3WzsACgkQ+boUO5X/\nbYKF1BAAqJZirrZn2KaSgoZXS4+PQfQ2hm2jjDGeeeItn+CqEN7iMJeazFGPK0Gi\n5mzUAm2/5cXrS0nZhJMBwbBH2EhZ0BxObrLyn8o8jxpR+YxDst5Ra3lb05MEtl3f\nL+tedXKoZDqNGJIgnYZylhN8jHHOhmUciqUd2G7lk6RZzSZpJRad2hCpHU4tx4Sr\naVfFmU47UpofQGtvAw0/JeoBZFi23qpIlAqrxpOwOf9SoPTip9jeSClnT16QkPAl\nCkkFjDEqAPWfuVeNvdJ4wEMcTaPyiYBaCcUz4ilQuKIUZj8BTkAKEsE1g3jHS49N\nvn1zHqaCgo/HBozVgwmaqltXCIw9bchTuF+NtvACpUlANd+cLzKmXXI8lYKCs0fT\nMeKcUxJo2YSkmIESGwQI1hd4qjXrkqWy9oLNBokRAhO/MOslpeGgO6mi+fW/1hXr\nLGZ9+RI+oCCzDeZtspkIdhXaJEJI/C5M97SHBrHmyZCNy60sppcBoyi8rUonH2TF\nDOqK4QojNlDSqIu8tiANsPyfSEonIpybSFgv7M6ivAi58DGrO4YXtUFVit/BoWjQ\nGlAmRdWxgD2/FpEkMADBvq5RbfDWRT2ZDrKY7cXrbjFYQlTceimFI3OB9Xrb+6pB\n5dPm5SEqCyE1lFhQ/AaODwrOVZUJ3LFFOmDi6GESVKThdDSP3qc=\n=V1Qw\n-----END PGP SIGNATURE-----", "payload": "tree 9e5cfb35aa449e9ac8e410d4bfca9e335f05ae89\nparent e58e7b10e13595b4df1b105bfb9ad03c8dee7832\nauthor David Tolnay <dtolnay@gmail.com> 1642757659 -0800\ncommitter David Tolnay <dtolnay@gmail.com> 1643600699 -0800\n\nCompute indent never relative to current column\n\nPreviously the pretty printer would compute indentation always relative\nto whatever column a block begins at, like this:\n\n    fn demo(arg1: usize,\n            arg2: usize);\n\nThis is never the thing to do in the dominant contemporary Rust style.\nRustfmt's default and the style used by the vast majority of Rust\ncodebases is block indentation:\n\n    fn demo(\n        arg1: usize,\n        arg2: usize,\n    );\n\nwhere every indentation level is a multiple of 4 spaces and each level\nis indented relative to the indentation of the previous line, not the\nposition that the block starts in.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cb93e9c0ec6058df03e163fd7b3e652f7f22041d", "html_url": "https://github.com/rust-lang/rust/commit/cb93e9c0ec6058df03e163fd7b3e652f7f22041d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cb93e9c0ec6058df03e163fd7b3e652f7f22041d/comments", "author": {"login": "dtolnay", "id": 1940490, "node_id": "MDQ6VXNlcjE5NDA0OTA=", "avatar_url": "https://avatars.githubusercontent.com/u/1940490?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dtolnay", "html_url": "https://github.com/dtolnay", "followers_url": "https://api.github.com/users/dtolnay/followers", "following_url": "https://api.github.com/users/dtolnay/following{/other_user}", "gists_url": "https://api.github.com/users/dtolnay/gists{/gist_id}", "starred_url": "https://api.github.com/users/dtolnay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dtolnay/subscriptions", "organizations_url": "https://api.github.com/users/dtolnay/orgs", "repos_url": "https://api.github.com/users/dtolnay/repos", "events_url": "https://api.github.com/users/dtolnay/events{/privacy}", "received_events_url": "https://api.github.com/users/dtolnay/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dtolnay", "id": 1940490, "node_id": "MDQ6VXNlcjE5NDA0OTA=", "avatar_url": "https://avatars.githubusercontent.com/u/1940490?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dtolnay", "html_url": "https://github.com/dtolnay", "followers_url": "https://api.github.com/users/dtolnay/followers", "following_url": "https://api.github.com/users/dtolnay/following{/other_user}", "gists_url": "https://api.github.com/users/dtolnay/gists{/gist_id}", "starred_url": "https://api.github.com/users/dtolnay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dtolnay/subscriptions", "organizations_url": "https://api.github.com/users/dtolnay/orgs", "repos_url": "https://api.github.com/users/dtolnay/repos", "events_url": "https://api.github.com/users/dtolnay/events{/privacy}", "received_events_url": "https://api.github.com/users/dtolnay/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e58e7b10e13595b4df1b105bfb9ad03c8dee7832", "url": "https://api.github.com/repos/rust-lang/rust/commits/e58e7b10e13595b4df1b105bfb9ad03c8dee7832", "html_url": "https://github.com/rust-lang/rust/commit/e58e7b10e13595b4df1b105bfb9ad03c8dee7832"}], "stats": {"total": 41, "additions": 22, "deletions": 19}, "files": [{"sha": "78b519651644a642929f1e63276307a42d7ce68c", "filename": "compiler/rustc_ast_pretty/src/pp.rs", "status": "modified", "additions": 21, "deletions": 18, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/cb93e9c0ec6058df03e163fd7b3e652f7f22041d/compiler%2Frustc_ast_pretty%2Fsrc%2Fpp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb93e9c0ec6058df03e163fd7b3e652f7f22041d/compiler%2Frustc_ast_pretty%2Fsrc%2Fpp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_pretty%2Fsrc%2Fpp.rs?ref=cb93e9c0ec6058df03e163fd7b3e652f7f22041d", "patch": "@@ -178,7 +178,7 @@ impl Token {\n #[derive(Copy, Clone)]\n enum PrintFrame {\n     Fits,\n-    Broken { offset: isize, breaks: Breaks },\n+    Broken { indent: usize, breaks: Breaks },\n }\n \n const SIZE_INFINITY: isize = 0xffff;\n@@ -204,6 +204,8 @@ pub struct Printer {\n     scan_stack: VecDeque<usize>,\n     /// Stack of blocks-in-progress being flushed by print\n     print_stack: Vec<PrintFrame>,\n+    /// Level of indentation of current line\n+    indent: usize,\n     /// Buffered indentation to avoid writing trailing whitespace\n     pending_indentation: isize,\n     /// The token most recently popped from the left boundary of the\n@@ -229,6 +231,7 @@ impl Printer {\n             right_total: 0,\n             scan_stack: VecDeque::new(),\n             print_stack: Vec::new(),\n+            indent: 0,\n             pending_indentation: 0,\n             last_printed: None,\n         }\n@@ -368,38 +371,38 @@ impl Printer {\n         *self\n             .print_stack\n             .last()\n-            .unwrap_or(&PrintFrame::Broken { offset: 0, breaks: Breaks::Inconsistent })\n+            .unwrap_or(&PrintFrame::Broken { indent: 0, breaks: Breaks::Inconsistent })\n     }\n \n     fn print_begin(&mut self, token: BeginToken, size: isize) {\n         if size > self.space {\n-            let col = self.margin - self.space + token.offset;\n-            self.print_stack.push(PrintFrame::Broken { offset: col, breaks: token.breaks });\n+            self.print_stack.push(PrintFrame::Broken { indent: self.indent, breaks: token.breaks });\n+            self.indent = (self.indent as isize + token.offset) as usize;\n         } else {\n             self.print_stack.push(PrintFrame::Fits);\n         }\n     }\n \n     fn print_end(&mut self) {\n-        self.print_stack.pop().unwrap();\n+        if let PrintFrame::Broken { indent, .. } = self.print_stack.pop().unwrap() {\n+            self.indent = indent;\n+        }\n     }\n \n     fn print_break(&mut self, token: BreakToken, size: isize) {\n-        let break_offset =\n-            match self.get_top() {\n-                PrintFrame::Fits => None,\n-                PrintFrame::Broken { offset, breaks: Breaks::Consistent } => Some(offset),\n-                PrintFrame::Broken { offset, breaks: Breaks::Inconsistent } => {\n-                    if size > self.space { Some(offset) } else { None }\n-                }\n-            };\n-        if let Some(offset) = break_offset {\n-            self.out.push('\\n');\n-            self.pending_indentation = offset + token.offset;\n-            self.space = self.margin - (offset + token.offset);\n-        } else {\n+        let fits = match self.get_top() {\n+            PrintFrame::Fits => true,\n+            PrintFrame::Broken { breaks: Breaks::Consistent, .. } => false,\n+            PrintFrame::Broken { breaks: Breaks::Inconsistent, .. } => size <= self.space,\n+        };\n+        if fits {\n             self.pending_indentation += token.blank_space;\n             self.space -= token.blank_space;\n+        } else {\n+            self.out.push('\\n');\n+            let indent = self.indent as isize + token.offset;\n+            self.pending_indentation = indent;\n+            self.space = self.margin - indent;\n         }\n     }\n "}, {"sha": "dff85f52b15c888e89d0055a5d4f8e2cac84267c", "filename": "compiler/rustc_ast_pretty/src/pprust/state.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb93e9c0ec6058df03e163fd7b3e652f7f22041d/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb93e9c0ec6058df03e163fd7b3e652f7f22041d/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs?ref=cb93e9c0ec6058df03e163fd7b3e652f7f22041d", "patch": "@@ -655,7 +655,7 @@ pub trait PrintState<'a>: std::ops::Deref<Target = pp::Printer> + std::ops::Dere\n         // Outer-box is consistent.\n         self.cbox(INDENT_UNIT);\n         // Head-box is inconsistent.\n-        self.ibox(w.len() + 1);\n+        self.ibox(0);\n         // Keyword that starts the head.\n         if !w.is_empty() {\n             self.word_nbsp(w);"}]}