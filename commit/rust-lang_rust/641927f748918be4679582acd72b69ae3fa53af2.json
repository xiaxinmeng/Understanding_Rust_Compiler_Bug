{"sha": "641927f748918be4679582acd72b69ae3fa53af2", "node_id": "C_kwDOAAsO6NoAKDY0MTkyN2Y3NDg5MThiZTQ2Nzk1ODJhY2Q3MmI2OWFlM2ZhNTNhZjI", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2023-05-11T10:53:16Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2023-05-11T10:53:16Z"}, "message": "Add `./miri run-dep` for running a file with test dependencies available", "tree": {"sha": "6325850d4f42aaf47006821f787def31a7188ce9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6325850d4f42aaf47006821f787def31a7188ce9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/641927f748918be4679582acd72b69ae3fa53af2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/641927f748918be4679582acd72b69ae3fa53af2", "html_url": "https://github.com/rust-lang/rust/commit/641927f748918be4679582acd72b69ae3fa53af2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/641927f748918be4679582acd72b69ae3fa53af2/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3f7d620440afee6a2e99b4a2f939e0a72a8e9254", "url": "https://api.github.com/repos/rust-lang/rust/commits/3f7d620440afee6a2e99b4a2f939e0a72a8e9254", "html_url": "https://github.com/rust-lang/rust/commit/3f7d620440afee6a2e99b4a2f939e0a72a8e9254"}], "stats": {"total": 48, "additions": 44, "deletions": 4}, "files": [{"sha": "9e33f525c8f1298176afa69cdb051e2d191ae6cf", "filename": "src/tools/miri/miri", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/641927f748918be4679582acd72b69ae3fa53af2/src%2Ftools%2Fmiri%2Fmiri", "raw_url": "https://github.com/rust-lang/rust/raw/641927f748918be4679582acd72b69ae3fa53af2/src%2Ftools%2Fmiri%2Fmiri", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fmiri?ref=641927f748918be4679582acd72b69ae3fa53af2", "patch": "@@ -306,7 +306,7 @@ test|bless)\n     # Only in root project as `cargo-miri` has no tests.\n     $CARGO test $CARGO_EXTRA_FLAGS --manifest-path \"$MIRIDIR\"/Cargo.toml \"$@\"\n     ;;\n-run)\n+run|run-dep)\n     # Scan for \"--target\" to overwrite the \"MIRI_TEST_TARGET\" env var so\n     # that we set the MIRI_SYSROOT up the right way.\n     FOUND_TARGET_OPT=0\n@@ -323,11 +323,17 @@ run)\n         # Make sure Miri actually uses this target.\n         MIRIFLAGS=\"$MIRIFLAGS --target $MIRI_TEST_TARGET\"\n     fi\n+\n     # First build and get a sysroot.\n     $CARGO build $CARGO_EXTRA_FLAGS --manifest-path \"$MIRIDIR\"/Cargo.toml\n     find_sysroot\n     # Then run the actual command.\n-    exec $CARGO run $CARGO_EXTRA_FLAGS --manifest-path \"$MIRIDIR\"/Cargo.toml -- $MIRIFLAGS \"$@\"\n+    \n+    if [ \"$COMMAND\" = \"run-dep\" ]; then\n+        exec $CARGO test --test compiletest -- miri-run-dep-mode $CARGO_EXTRA_FLAGS --manifest-path \"$MIRIDIR\"/Cargo.toml -- $MIRIFLAGS \"$@\"\n+    else\n+        exec $CARGO run $CARGO_EXTRA_FLAGS --manifest-path \"$MIRIDIR\"/Cargo.toml -- $MIRIFLAGS \"$@\"\n+    fi\n     ;;\n fmt)\n     find \"$MIRIDIR\" -not \\( -name target -prune \\) -name '*.rs' \\"}, {"sha": "688b6519cbd45a3facad8cfa3be80d60a9fda614", "filename": "src/tools/miri/tests/compiletest.rs", "status": "modified", "additions": 36, "deletions": 2, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/641927f748918be4679582acd72b69ae3fa53af2/src%2Ftools%2Fmiri%2Ftests%2Fcompiletest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/641927f748918be4679582acd72b69ae3fa53af2/src%2Ftools%2Fmiri%2Ftests%2Fcompiletest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Fcompiletest.rs?ref=641927f748918be4679582acd72b69ae3fa53af2", "patch": "@@ -1,5 +1,6 @@\n use colored::*;\n use regex::bytes::Regex;\n+use std::io::Write;\n use std::path::{Path, PathBuf};\n use std::{env, process::Command};\n use ui_test::status_emitter::StatusEmitter;\n@@ -45,7 +46,13 @@ fn build_so_for_c_ffi_tests() -> PathBuf {\n     so_file_path\n }\n \n-fn run_tests(mode: Mode, path: &str, target: &str, with_dependencies: bool) -> Result<()> {\n+fn run_test_config(\n+    args: impl Iterator<Item = String>,\n+    target: &str,\n+    path: &str,\n+    mode: Mode,\n+    with_dependencies: bool,\n+) -> Config {\n     // Miri is rustc-like, so we create a default builder for rustc and modify it\n     let mut program = CommandBuilder::rustc();\n     program.program = miri_path();\n@@ -105,7 +112,7 @@ fn run_tests(mode: Mode, path: &str, target: &str, with_dependencies: bool) -> R\n \n     // Handle command-line arguments.\n     let mut after_dashdash = false;\n-    config.path_filter.extend(std::env::args().skip(1).filter(|arg| {\n+    config.path_filter.extend(args.filter(|arg| {\n         if after_dashdash {\n             // Just propagate everything.\n             return true;\n@@ -140,6 +147,11 @@ fn run_tests(mode: Mode, path: &str, target: &str, with_dependencies: bool) -> R\n             \"run\".into(), // There is no `cargo miri build` so we just use `cargo miri run`.\n         ];\n     }\n+    config\n+}\n+\n+fn run_tests(mode: Mode, path: &str, target: &str, with_dependencies: bool) -> Result<()> {\n+    let config = run_test_config(std::env::args().skip(1), target, path, mode, with_dependencies);\n \n     eprintln!(\"   Compiler: {}\", config.program.display());\n     ui_test::run_tests_generic(\n@@ -226,8 +238,15 @@ fn get_target() -> String {\n \n fn main() -> Result<()> {\n     ui_test::color_eyre::install()?;\n+\n     let target = get_target();\n \n+    if let Some(first) = std::env::args().nth(1) {\n+        if first == \"miri-run-dep-mode\" {\n+            return run_dep_mode(target);\n+        }\n+    }\n+\n     // Add a test env var to do environment communication tests.\n     env::set_var(\"MIRI_ENV_VAR_TEST\", \"0\");\n     // Let the tests know where to store temp files (they might run for a different target, which can make this hard to find).\n@@ -250,6 +269,21 @@ fn main() -> Result<()> {\n     Ok(())\n }\n \n+fn run_dep_mode(target: String) -> Result<()> {\n+    let files = std::env::args().skip_while(|arg| arg != \"--\").skip(1);\n+    for path in files {\n+        let mut config = run_test_config(std::iter::empty(), &target, &path, Mode::Yolo, true);\n+        config.program.args.remove(0); // remove the `--error-format=json` argument\n+        config.program.args.push(\"--color\".into());\n+        config.program.args.push(\"always\".into());\n+        let output = ui_test::run_file(config, Path::new(&path))?;\n+        std::io::stderr().write_all(&output.stderr)?;\n+        std::io::stdout().write_all(&output.stdout)?;\n+        std::process::exit(output.status.code().unwrap());\n+    }\n+    Ok(())\n+}\n+\n /// This is a custom renderer for `ui_test` output that does not emit github actions\n /// `group`s, while still producing regular github actions messages on test failures.\n struct TextAndGha;"}]}