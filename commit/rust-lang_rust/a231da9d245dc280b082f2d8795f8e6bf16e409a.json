{"sha": "a231da9d245dc280b082f2d8795f8e6bf16e409a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEyMzFkYTlkMjQ1ZGMyODBiMDgyZjJkODc5NWY4ZTZiZjE2ZTQwOWE=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-05-04T12:14:56Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-05-04T12:14:56Z"}, "message": "Merge #8720\n\n8720: internal: add integrated completion benchmark r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "7bd176f6eb994a2fed51179cc6e9fe7c2820de0e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7bd176f6eb994a2fed51179cc6e9fe7c2820de0e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a231da9d245dc280b082f2d8795f8e6bf16e409a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgkTrACRBK7hj4Ov3rIwAA3MEIAEZOrXwCDXX46DSP7iUzt8Tx\na/o+eQ80mLOcYwRaENpk3KRquTJWFu9UDM61dw88kfyywZ8fLW6nn0vbty12vTKq\nXNGwGl27Rlbq9kP0t6oHJ5RdMZ3CfnCsTvpAo9Usz2Bps5tIf1KSVhKl4QKo1DYf\nShpZr+iPMo36r5fIYjPhRqqlAxwRuePjWMmlLXt+yyEGl8h7+PMjwVIiUx8syvfr\nuRH78p9fZG7ods84yV0mX+FVDwx27b9JITqnwFYJkHlfQu6Yj/Y3c3rHKcDlj5yU\nDjje82QSriXs0+89VpdzCMjklKWDON1KZZtDOwTDOmyeubspf5oy/21UkAfY9Bc=\n=m5lB\n-----END PGP SIGNATURE-----\n", "payload": "tree 7bd176f6eb994a2fed51179cc6e9fe7c2820de0e\nparent d9f1b5fc7cdeedce99874f7cf2111ab09d8b3429\nparent b2f040fc9ab841e0791254bcdbf82bd0ee771242\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1620130496 +0000\ncommitter GitHub <noreply@github.com> 1620130496 +0000\n\nMerge #8720\n\n8720: internal: add integrated completion benchmark r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a231da9d245dc280b082f2d8795f8e6bf16e409a", "html_url": "https://github.com/rust-lang/rust/commit/a231da9d245dc280b082f2d8795f8e6bf16e409a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a231da9d245dc280b082f2d8795f8e6bf16e409a/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d9f1b5fc7cdeedce99874f7cf2111ab09d8b3429", "url": "https://api.github.com/repos/rust-lang/rust/commits/d9f1b5fc7cdeedce99874f7cf2111ab09d8b3429", "html_url": "https://github.com/rust-lang/rust/commit/d9f1b5fc7cdeedce99874f7cf2111ab09d8b3429"}, {"sha": "b2f040fc9ab841e0791254bcdbf82bd0ee771242", "url": "https://api.github.com/repos/rust-lang/rust/commits/b2f040fc9ab841e0791254bcdbf82bd0ee771242", "html_url": "https://github.com/rust-lang/rust/commit/b2f040fc9ab841e0791254bcdbf82bd0ee771242"}], "stats": {"total": 262, "additions": 187, "deletions": 75}, "files": [{"sha": "bdd94b1c4e5e29eb9d5e46d8a548bc6e49fec8cd", "filename": "crates/rust-analyzer/src/benchmarks.rs", "status": "removed", "additions": 0, "deletions": 74, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/d9f1b5fc7cdeedce99874f7cf2111ab09d8b3429/crates%2Frust-analyzer%2Fsrc%2Fbenchmarks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9f1b5fc7cdeedce99874f7cf2111ab09d8b3429/crates%2Frust-analyzer%2Fsrc%2Fbenchmarks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fbenchmarks.rs?ref=d9f1b5fc7cdeedce99874f7cf2111ab09d8b3429", "patch": "@@ -1,74 +0,0 @@\n-//! Fully integrated benchmarks for rust-analyzer, which load real cargo\n-//! projects.\n-//!\n-//! The benchmark here is used to debug specific performance regressions. If you\n-//! notice that, eg, completion is slow in some specific case, you can  modify\n-//! code here exercise this specific completion, and thus have a fast\n-//! edit/compile/test cycle.\n-//!\n-//! Note that \"Rust Analyzer: Run\" action does not allow running a single test\n-//! in release mode in VS Code. There's however \"Rust Analyzer: Copy Run Command Line\"\n-//! which you can use to paste the command in terminal and add `--release` manually.\n-\n-use std::sync::Arc;\n-\n-use ide::Change;\n-use test_utils::project_root;\n-use vfs::{AbsPathBuf, VfsPath};\n-\n-use crate::cli::load_cargo::{load_workspace_at, LoadCargoConfig};\n-\n-#[test]\n-fn benchmark_integrated_highlighting() {\n-    // Don't run slow benchmark by default\n-    if true {\n-        return;\n-    }\n-\n-    // Load rust-analyzer itself.\n-    let workspace_to_load = project_root();\n-    let file = \"./crates/ide_db/src/apply_change.rs\";\n-\n-    let cargo_config = Default::default();\n-    let load_cargo_config = LoadCargoConfig {\n-        load_out_dirs_from_check: true,\n-        wrap_rustc: false,\n-        with_proc_macro: false,\n-    };\n-\n-    let (mut host, vfs, _proc_macro) = {\n-        let _it = stdx::timeit(\"workspace loading\");\n-        load_workspace_at(&workspace_to_load, &cargo_config, &load_cargo_config, &|_| {}).unwrap()\n-    };\n-\n-    let file_id = {\n-        let file = workspace_to_load.join(file);\n-        let path = VfsPath::from(AbsPathBuf::assert(file));\n-        vfs.file_id(&path).unwrap_or_else(|| panic!(\"can't find virtual file for {}\", path))\n-    };\n-\n-    {\n-        let _it = stdx::timeit(\"initial\");\n-        let analysis = host.analysis();\n-        analysis.highlight_as_html(file_id, false).unwrap();\n-    }\n-\n-    profile::init_from(\"*>100\");\n-    // let _s = profile::heartbeat_span();\n-\n-    {\n-        let _it = stdx::timeit(\"change\");\n-        let mut text = host.analysis().file_text(file_id).unwrap().to_string();\n-        text.push_str(\"\\npub fn _dummy() {}\\n\");\n-        let mut change = Change::new();\n-        change.change_file(file_id, Some(Arc::new(text)));\n-        host.apply_change(change);\n-    }\n-\n-    {\n-        let _it = stdx::timeit(\"after change\");\n-        let _span = profile::cpu_span();\n-        let analysis = host.analysis();\n-        analysis.highlight_as_html(file_id, false).unwrap();\n-    }\n-}"}, {"sha": "411446b042b7640e8cb29eaf243a3ac07a690a6b", "filename": "crates/rust-analyzer/src/integrated_benchmarks.rs", "status": "added", "additions": 186, "deletions": 0, "changes": 186, "blob_url": "https://github.com/rust-lang/rust/blob/a231da9d245dc280b082f2d8795f8e6bf16e409a/crates%2Frust-analyzer%2Fsrc%2Fintegrated_benchmarks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a231da9d245dc280b082f2d8795f8e6bf16e409a/crates%2Frust-analyzer%2Fsrc%2Fintegrated_benchmarks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fintegrated_benchmarks.rs?ref=a231da9d245dc280b082f2d8795f8e6bf16e409a", "patch": "@@ -0,0 +1,186 @@\n+//! Fully integrated benchmarks for rust-analyzer, which load real cargo\n+//! projects.\n+//!\n+//! The benchmark here is used to debug specific performance regressions. If you\n+//! notice that, eg, completion is slow in some specific case, you can  modify\n+//! code here exercise this specific completion, and thus have a fast\n+//! edit/compile/test cycle.\n+//!\n+//! Note that \"Rust Analyzer: Run\" action does not allow running a single test\n+//! in release mode in VS Code. There's however \"Rust Analyzer: Copy Run Command Line\"\n+//! which you can use to paste the command in terminal and add `--release` manually.\n+\n+use std::{convert::TryFrom, sync::Arc};\n+\n+use ide::{Change, CompletionConfig, FilePosition, TextSize};\n+use ide_db::helpers::{insert_use::InsertUseConfig, merge_imports::MergeBehavior, SnippetCap};\n+use test_utils::project_root;\n+use vfs::{AbsPathBuf, VfsPath};\n+\n+use crate::cli::load_cargo::{load_workspace_at, LoadCargoConfig};\n+\n+#[test]\n+fn integrated_highlighting_benchmark() {\n+    // Don't run slow benchmark by default\n+    if true {\n+        return;\n+    }\n+\n+    // Load rust-analyzer itself.\n+    let workspace_to_load = project_root();\n+    let file = \"./crates/ide_db/src/apply_change.rs\";\n+\n+    let cargo_config = Default::default();\n+    let load_cargo_config = LoadCargoConfig {\n+        load_out_dirs_from_check: true,\n+        wrap_rustc: false,\n+        with_proc_macro: false,\n+    };\n+\n+    let (mut host, vfs, _proc_macro) = {\n+        let _it = stdx::timeit(\"workspace loading\");\n+        load_workspace_at(&workspace_to_load, &cargo_config, &load_cargo_config, &|_| {}).unwrap()\n+    };\n+\n+    let file_id = {\n+        let file = workspace_to_load.join(file);\n+        let path = VfsPath::from(AbsPathBuf::assert(file));\n+        vfs.file_id(&path).unwrap_or_else(|| panic!(\"can't find virtual file for {}\", path))\n+    };\n+\n+    {\n+        let _it = stdx::timeit(\"initial\");\n+        let analysis = host.analysis();\n+        analysis.highlight_as_html(file_id, false).unwrap();\n+    }\n+\n+    profile::init_from(\"*>100\");\n+    // let _s = profile::heartbeat_span();\n+\n+    {\n+        let _it = stdx::timeit(\"change\");\n+        let mut text = host.analysis().file_text(file_id).unwrap().to_string();\n+        text.push_str(\"\\npub fn _dummy() {}\\n\");\n+        let mut change = Change::new();\n+        change.change_file(file_id, Some(Arc::new(text)));\n+        host.apply_change(change);\n+    }\n+\n+    {\n+        let _it = stdx::timeit(\"after change\");\n+        let _span = profile::cpu_span();\n+        let analysis = host.analysis();\n+        analysis.highlight_as_html(file_id, false).unwrap();\n+    }\n+}\n+\n+#[test]\n+fn integrated_completion_benchmark() {\n+    // Don't run slow benchmark by default\n+    if true {\n+        return;\n+    }\n+\n+    // Load rust-analyzer itself.\n+    let workspace_to_load = project_root();\n+    let file = \"./crates/hir/src/lib.rs\";\n+\n+    let cargo_config = Default::default();\n+    let load_cargo_config = LoadCargoConfig {\n+        load_out_dirs_from_check: true,\n+        wrap_rustc: false,\n+        with_proc_macro: false,\n+    };\n+\n+    let (mut host, vfs, _proc_macro) = {\n+        let _it = stdx::timeit(\"workspace loading\");\n+        load_workspace_at(&workspace_to_load, &cargo_config, &load_cargo_config, &|_| {}).unwrap()\n+    };\n+\n+    let file_id = {\n+        let file = workspace_to_load.join(file);\n+        let path = VfsPath::from(AbsPathBuf::assert(file));\n+        vfs.file_id(&path).unwrap_or_else(|| panic!(\"can't find virtual file for {}\", path))\n+    };\n+\n+    {\n+        let _it = stdx::timeit(\"initial\");\n+        let analysis = host.analysis();\n+        analysis.highlight_as_html(file_id, false).unwrap();\n+    }\n+\n+    profile::init_from(\"*>5\");\n+    // let _s = profile::heartbeat_span();\n+\n+    let completion_offset = {\n+        let _it = stdx::timeit(\"change\");\n+        let mut text = host.analysis().file_text(file_id).unwrap().to_string();\n+        let completion_offset =\n+            patch(&mut text, \"db.struct_data(self.id)\", \"sel;\\ndb.struct_data(self.id)\")\n+                + \"sel\".len();\n+        let mut change = Change::new();\n+        change.change_file(file_id, Some(Arc::new(text)));\n+        host.apply_change(change);\n+        completion_offset\n+    };\n+\n+    {\n+        let _it = stdx::timeit(\"unqualified path completion\");\n+        let _span = profile::cpu_span();\n+        let analysis = host.analysis();\n+        let config = CompletionConfig {\n+            enable_postfix_completions: true,\n+            enable_imports_on_the_fly: true,\n+            add_call_parenthesis: true,\n+            add_call_argument_snippets: true,\n+            snippet_cap: SnippetCap::new(true),\n+            insert_use: InsertUseConfig {\n+                merge: Some(MergeBehavior::Full),\n+                prefix_kind: hir::PrefixKind::ByCrate,\n+                group: true,\n+            },\n+        };\n+        let position =\n+            FilePosition { file_id, offset: TextSize::try_from(completion_offset).unwrap() };\n+        analysis.completions(&config, position).unwrap();\n+    }\n+\n+    let completion_offset = {\n+        let _it = stdx::timeit(\"change\");\n+        let mut text = host.analysis().file_text(file_id).unwrap().to_string();\n+        let completion_offset =\n+            patch(&mut text, \"sel;\\ndb.struct_data(self.id)\", \"self.;\\ndb.struct_data(self.id)\")\n+                + \"self.\".len();\n+        let mut change = Change::new();\n+        change.change_file(file_id, Some(Arc::new(text)));\n+        host.apply_change(change);\n+        completion_offset\n+    };\n+\n+    {\n+        let _it = stdx::timeit(\"dot completion\");\n+        let _span = profile::cpu_span();\n+        let analysis = host.analysis();\n+        let config = CompletionConfig {\n+            enable_postfix_completions: true,\n+            enable_imports_on_the_fly: true,\n+            add_call_parenthesis: true,\n+            add_call_argument_snippets: true,\n+            snippet_cap: SnippetCap::new(true),\n+            insert_use: InsertUseConfig {\n+                merge: Some(MergeBehavior::Full),\n+                prefix_kind: hir::PrefixKind::ByCrate,\n+                group: true,\n+            },\n+        };\n+        let position =\n+            FilePosition { file_id, offset: TextSize::try_from(completion_offset).unwrap() };\n+        analysis.completions(&config, position).unwrap();\n+    }\n+}\n+\n+fn patch(what: &mut String, from: &str, to: &str) -> usize {\n+    let idx = what.find(from).unwrap();\n+    *what = what.replacen(from, to, 1);\n+    idx\n+}"}, {"sha": "da7e24becd0ac4674ffb99fb63ed128e468c9e91", "filename": "crates/rust-analyzer/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a231da9d245dc280b082f2d8795f8e6bf16e409a/crates%2Frust-analyzer%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a231da9d245dc280b082f2d8795f8e6bf16e409a/crates%2Frust-analyzer%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Flib.rs?ref=a231da9d245dc280b082f2d8795f8e6bf16e409a", "patch": "@@ -40,7 +40,7 @@ pub mod lsp_ext;\n pub mod config;\n \n #[cfg(test)]\n-mod benchmarks;\n+mod integrated_benchmarks;\n \n use serde::de::DeserializeOwned;\n use std::fmt;"}]}