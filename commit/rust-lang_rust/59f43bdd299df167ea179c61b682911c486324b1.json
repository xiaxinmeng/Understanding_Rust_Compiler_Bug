{"sha": "59f43bdd299df167ea179c61b682911c486324b1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU5ZjQzYmRkMjk5ZGYxNjdlYTE3OWM2MWI2ODI5MTFjNDg2MzI0YjE=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-07-14T16:54:56Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-09-18T11:14:29Z"}, "message": "Do not preallocate item HirIds.", "tree": {"sha": "0a6bcc76672b9ddf0025efc64fd276ee07068913", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0a6bcc76672b9ddf0025efc64fd276ee07068913"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/59f43bdd299df167ea179c61b682911c486324b1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/59f43bdd299df167ea179c61b682911c486324b1", "html_url": "https://github.com/rust-lang/rust/commit/59f43bdd299df167ea179c61b682911c486324b1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/59f43bdd299df167ea179c61b682911c486324b1/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d2dfb0eb8e30d188fb1731e540bc1b418bcd046d", "url": "https://api.github.com/repos/rust-lang/rust/commits/d2dfb0eb8e30d188fb1731e540bc1b418bcd046d", "html_url": "https://github.com/rust-lang/rust/commit/d2dfb0eb8e30d188fb1731e540bc1b418bcd046d"}], "stats": {"total": 67, "additions": 20, "deletions": 47}, "files": [{"sha": "14a894d61f4f5fdeeb5c8917b61a75b32025ba24", "filename": "compiler/rustc_ast_lowering/src/block.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/59f43bdd299df167ea179c61b682911c486324b1/compiler%2Frustc_ast_lowering%2Fsrc%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59f43bdd299df167ea179c61b682911c486324b1/compiler%2Frustc_ast_lowering%2Fsrc%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fblock.rs?ref=59f43bdd299df167ea179c61b682911c486324b1", "patch": "@@ -55,7 +55,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                     }\n                 }\n                 StmtKind::Item(ref it) => {\n-                    stmts.extend(self.lower_item_id(it).into_iter().enumerate().map(\n+                    stmts.extend(self.lower_item_ref(it).into_iter().enumerate().map(\n                         |(i, item_id)| {\n                             let hir_id = match i {\n                                 0 => self.lower_node_id(s.id),"}, {"sha": "520de8b8f70d865f4ec84fb1115f9ca70c7f1fe2", "filename": "compiler/rustc_ast_lowering/src/item.rs", "status": "modified", "additions": 14, "deletions": 25, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/59f43bdd299df167ea179c61b682911c486324b1/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59f43bdd299df167ea179c61b682911c486324b1/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs?ref=59f43bdd299df167ea179c61b682911c486324b1", "patch": "@@ -40,6 +40,7 @@ impl ItemLowerer<'_, '_, '_> {\n \n impl<'a> Visitor<'a> for ItemLowerer<'a, '_, '_> {\n     fn visit_item(&mut self, item: &'a Item) {\n+        self.lctx.allocate_hir_id_counter(item.id);\n         let hir_id = self.lctx.with_hir_id_owner(item.id, |lctx| {\n             lctx.without_in_scope_lifetime_defs(|lctx| {\n                 let hir_item = lctx.lower_item(item);\n@@ -77,6 +78,7 @@ impl<'a> Visitor<'a> for ItemLowerer<'a, '_, '_> {\n     }\n \n     fn visit_assoc_item(&mut self, item: &'a AssocItem, ctxt: AssocCtxt) {\n+        self.lctx.allocate_hir_id_counter(item.id);\n         self.lctx.with_hir_id_owner(item.id, |lctx| match ctxt {\n             AssocCtxt::Trait => {\n                 let hir_item = lctx.lower_trait_item(item);\n@@ -154,41 +156,28 @@ impl<'hir> LoweringContext<'_, 'hir> {\n     pub(super) fn lower_mod(&mut self, items: &[P<Item>], inner: Span) -> hir::Mod<'hir> {\n         hir::Mod {\n             inner: self.lower_span(inner),\n-            item_ids: self.arena.alloc_from_iter(items.iter().flat_map(|x| self.lower_item_id(x))),\n+            item_ids: self.arena.alloc_from_iter(items.iter().flat_map(|x| self.lower_item_ref(x))),\n         }\n     }\n \n-    pub(super) fn lower_item_id(&mut self, i: &Item) -> SmallVec<[hir::ItemId; 1]> {\n-        let node_ids = match i.kind {\n-            ItemKind::Use(ref use_tree) => {\n-                let mut vec = smallvec![i.id];\n-                self.lower_item_id_use_tree(use_tree, i.id, &mut vec);\n-                vec\n-            }\n-            ItemKind::Fn(..) | ItemKind::Impl(box ImplKind { of_trait: None, .. }) => {\n-                smallvec![i.id]\n-            }\n-            _ => smallvec![i.id],\n-        };\n-\n+    pub(super) fn lower_item_ref(&mut self, i: &Item) -> SmallVec<[hir::ItemId; 1]> {\n+        let mut node_ids = smallvec![hir::ItemId { def_id: self.resolver.local_def_id(i.id) }];\n+        if let ItemKind::Use(ref use_tree) = &i.kind {\n+            self.lower_item_id_use_tree(use_tree, i.id, &mut node_ids);\n+        }\n         node_ids\n-            .into_iter()\n-            .map(|node_id| hir::ItemId {\n-                def_id: self.allocate_hir_id_counter(node_id).expect_owner(),\n-            })\n-            .collect()\n     }\n \n     fn lower_item_id_use_tree(\n         &mut self,\n         tree: &UseTree,\n         base_id: NodeId,\n-        vec: &mut SmallVec<[NodeId; 1]>,\n+        vec: &mut SmallVec<[hir::ItemId; 1]>,\n     ) {\n         match tree.kind {\n             UseTreeKind::Nested(ref nested_vec) => {\n                 for &(ref nested, id) in nested_vec {\n-                    vec.push(id);\n+                    vec.push(hir::ItemId { def_id: self.resolver.local_def_id(id) });\n                     self.lower_item_id_use_tree(nested, id, vec);\n                 }\n             }\n@@ -197,7 +186,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 for (_, &id) in\n                     iter::zip(self.expect_full_res_from_use(base_id).skip(1), &[id1, id2])\n                 {\n-                    vec.push(id);\n+                    vec.push(hir::ItemId { def_id: self.resolver.local_def_id(id) });\n                 }\n             }\n         }\n@@ -700,7 +689,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n \n     fn lower_foreign_item_ref(&mut self, i: &ForeignItem) -> hir::ForeignItemRef<'hir> {\n         hir::ForeignItemRef {\n-            id: hir::ForeignItemId { def_id: self.lower_node_id(i.id).expect_owner() },\n+            id: hir::ForeignItemId { def_id: self.allocate_hir_id_counter(i.id) },\n             ident: self.lower_ident(i.ident),\n             span: self.lower_span(i.span),\n             vis: self.lower_visibility(&i.vis, Some(i.id)),\n@@ -842,7 +831,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n             }\n             AssocItemKind::MacCall(..) => unimplemented!(),\n         };\n-        let id = hir::TraitItemId { def_id: self.lower_node_id(i.id).expect_owner() };\n+        let id = hir::TraitItemId { def_id: self.resolver.local_def_id(i.id) };\n         let defaultness = hir::Defaultness::Default { has_value: has_default };\n         hir::TraitItemRef {\n             id,\n@@ -928,7 +917,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         let has_value = true;\n         let (defaultness, _) = self.lower_defaultness(i.kind.defaultness(), has_value);\n         hir::ImplItemRef {\n-            id: hir::ImplItemId { def_id: self.lower_node_id(i.id).expect_owner() },\n+            id: hir::ImplItemId { def_id: self.allocate_hir_id_counter(i.id) },\n             ident: self.lower_ident(i.ident),\n             span: self.lower_span(i.span),\n             vis: self.lower_visibility(&i.vis, Some(i.id)),"}, {"sha": "8fa9d8793b9a1b5a076c5880d568b83bfaaeb95b", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 5, "deletions": 21, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/59f43bdd299df167ea179c61b682911c486324b1/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59f43bdd299df167ea179c61b682911c486324b1/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=59f43bdd299df167ea179c61b682911c486324b1", "patch": "@@ -38,7 +38,7 @@\n use rustc_ast::node_id::NodeMap;\n use rustc_ast::token::{self, Token};\n use rustc_ast::tokenstream::{CanSynthesizeMissingTokens, TokenStream, TokenTree};\n-use rustc_ast::visit::{self, AssocCtxt, Visitor};\n+use rustc_ast::visit::{self, Visitor};\n use rustc_ast::{self as ast, *};\n use rustc_ast_pretty::pprust;\n use rustc_data_structures::captures::Captures;\n@@ -448,24 +448,12 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n \n         impl<'tcx> Visitor<'tcx> for MiscCollector<'tcx, '_, '_> {\n             fn visit_item(&mut self, item: &'tcx Item) {\n-                self.lctx.allocate_hir_id_counter(item.id);\n-\n                 if let ItemKind::Use(ref use_tree) = item.kind {\n                     self.allocate_use_tree_hir_id_counters(use_tree);\n                 }\n \n                 visit::walk_item(self, item);\n             }\n-\n-            fn visit_assoc_item(&mut self, item: &'tcx AssocItem, ctxt: AssocCtxt) {\n-                self.lctx.allocate_hir_id_counter(item.id);\n-                visit::walk_assoc_item(self, item, ctxt);\n-            }\n-\n-            fn visit_foreign_item(&mut self, item: &'tcx ForeignItem) {\n-                self.lctx.allocate_hir_id_counter(item.id);\n-                visit::walk_foreign_item(self, item);\n-            }\n         }\n \n         self.lower_node_id(CRATE_NODE_ID);\n@@ -554,13 +542,13 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         id\n     }\n \n-    fn allocate_hir_id_counter(&mut self, owner: NodeId) -> hir::HirId {\n+    fn allocate_hir_id_counter(&mut self, owner: NodeId) -> LocalDefId {\n         // Set up the counter if needed.\n         self.item_local_id_counters.entry(owner).or_insert(0);\n         // Always allocate the first `HirId` for the owner itself.\n         let lowered = self.lower_node_id_with_owner(owner, owner);\n         debug_assert_eq!(lowered.local_id.as_u32(), 0);\n-        lowered\n+        lowered.owner\n     }\n \n     fn create_stable_hashing_context(&self) -> LoweringHasher<'_> {\n@@ -1503,9 +1491,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         // frequently opened issues show.\n         let opaque_ty_span = self.mark_span_with_reason(DesugaringKind::OpaqueTy, span, None);\n \n-        let opaque_ty_def_id = self.resolver.local_def_id(opaque_ty_node_id);\n-\n-        self.allocate_hir_id_counter(opaque_ty_node_id);\n+        let opaque_ty_def_id = self.allocate_hir_id_counter(opaque_ty_node_id);\n \n         let collected_lifetimes = self.with_hir_id_owner(opaque_ty_node_id, move |lctx| {\n             let hir_bounds = lower_bounds(lctx);\n@@ -1762,9 +1748,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n \n         let opaque_ty_span = self.mark_span_with_reason(DesugaringKind::Async, span, None);\n \n-        let opaque_ty_def_id = self.resolver.local_def_id(opaque_ty_node_id);\n-\n-        self.allocate_hir_id_counter(opaque_ty_node_id);\n+        let opaque_ty_def_id = self.allocate_hir_id_counter(opaque_ty_node_id);\n \n         // When we create the opaque type for this async fn, it is going to have\n         // to capture all the lifetimes involved in the signature (including in the"}]}