{"sha": "4282776b1c394ed470d33f95c62538a2d37b16d3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQyODI3NzZiMWMzOTRlZDQ3MGQzM2Y5NWM2MjUzOGEyZDM3YjE2ZDM=", "commit": {"author": {"name": "Josh Stone", "email": "jistone@redhat.com", "date": "2020-04-25T03:03:45Z"}, "committer": {"name": "Josh Stone", "email": "jistone@redhat.com", "date": "2020-04-25T03:03:45Z"}, "message": "Replace filter_map().next() calls with find_map()\n\nThese are semantically the same, but `find_map()` is more concise.", "tree": {"sha": "56488a35e541b93dee40508b891a4bf0a916785d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/56488a35e541b93dee40508b891a4bf0a916785d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4282776b1c394ed470d33f95c62538a2d37b16d3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4282776b1c394ed470d33f95c62538a2d37b16d3", "html_url": "https://github.com/rust-lang/rust/commit/4282776b1c394ed470d33f95c62538a2d37b16d3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4282776b1c394ed470d33f95c62538a2d37b16d3/comments", "author": {"login": "cuviper", "id": 36186, "node_id": "MDQ6VXNlcjM2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/36186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuviper", "html_url": "https://github.com/cuviper", "followers_url": "https://api.github.com/users/cuviper/followers", "following_url": "https://api.github.com/users/cuviper/following{/other_user}", "gists_url": "https://api.github.com/users/cuviper/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuviper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuviper/subscriptions", "organizations_url": "https://api.github.com/users/cuviper/orgs", "repos_url": "https://api.github.com/users/cuviper/repos", "events_url": "https://api.github.com/users/cuviper/events{/privacy}", "received_events_url": "https://api.github.com/users/cuviper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cuviper", "id": 36186, "node_id": "MDQ6VXNlcjM2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/36186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuviper", "html_url": "https://github.com/cuviper", "followers_url": "https://api.github.com/users/cuviper/followers", "following_url": "https://api.github.com/users/cuviper/following{/other_user}", "gists_url": "https://api.github.com/users/cuviper/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuviper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuviper/subscriptions", "organizations_url": "https://api.github.com/users/cuviper/orgs", "repos_url": "https://api.github.com/users/cuviper/repos", "events_url": "https://api.github.com/users/cuviper/events{/privacy}", "received_events_url": "https://api.github.com/users/cuviper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3360cc3a0ea33c84d0b0b1163107b1c1acbf2a69", "url": "https://api.github.com/repos/rust-lang/rust/commits/3360cc3a0ea33c84d0b0b1163107b1c1acbf2a69", "html_url": "https://github.com/rust-lang/rust/commit/3360cc3a0ea33c84d0b0b1163107b1c1acbf2a69"}], "stats": {"total": 250, "additions": 99, "deletions": 151}, "files": [{"sha": "5a911fcdc7d6289142e176f03b23661e1bc7d232", "filename": "src/librustc_codegen_ssa/back/linker.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4282776b1c394ed470d33f95c62538a2d37b16d3/src%2Flibrustc_codegen_ssa%2Fback%2Flinker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4282776b1c394ed470d33f95c62538a2d37b16d3/src%2Flibrustc_codegen_ssa%2Fback%2Flinker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Flinker.rs?ref=4282776b1c394ed470d33f95c62538a2d37b16d3", "patch": "@@ -1127,11 +1127,7 @@ fn exported_symbols(tcx: TyCtxt<'_>, crate_type: CrateType) -> Vec<String> {\n     }\n \n     let formats = tcx.dependency_formats(LOCAL_CRATE);\n-    let deps = formats\n-        .iter()\n-        .filter_map(|(t, list)| if *t == crate_type { Some(list) } else { None })\n-        .next()\n-        .unwrap();\n+    let deps = formats.iter().find_map(|(t, list)| (*t == crate_type).then_some(list)).unwrap();\n \n     for (index, dep_format) in deps.iter().enumerate() {\n         let cnum = CrateNum::new(index + 1);"}, {"sha": "b22da86c091877ae80c6b2672f05e8ab800680bf", "filename": "src/librustc_errors/emitter.rs", "status": "modified", "additions": 10, "deletions": 13, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/4282776b1c394ed470d33f95c62538a2d37b16d3/src%2Flibrustc_errors%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4282776b1c394ed470d33f95c62538a2d37b16d3/src%2Flibrustc_errors%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Femitter.rs?ref=4282776b1c394ed470d33f95c62538a2d37b16d3", "patch": "@@ -285,21 +285,18 @@ pub trait Emitter {\n         let has_macro_spans = iter::once(&*span)\n             .chain(children.iter().map(|child| &child.span))\n             .flat_map(|span| span.primary_spans())\n-            .copied()\n-            .flat_map(|sp| {\n-                sp.macro_backtrace().filter_map(|expn_data| {\n-                    match expn_data.kind {\n-                        ExpnKind::Root => None,\n+            .flat_map(|sp| sp.macro_backtrace())\n+            .find_map(|expn_data| {\n+                match expn_data.kind {\n+                    ExpnKind::Root => None,\n \n-                        // Skip past non-macro entries, just in case there\n-                        // are some which do actually involve macros.\n-                        ExpnKind::Desugaring(..) | ExpnKind::AstPass(..) => None,\n+                    // Skip past non-macro entries, just in case there\n+                    // are some which do actually involve macros.\n+                    ExpnKind::Desugaring(..) | ExpnKind::AstPass(..) => None,\n \n-                        ExpnKind::Macro(macro_kind, _) => Some(macro_kind),\n-                    }\n-                })\n-            })\n-            .next();\n+                    ExpnKind::Macro(macro_kind, _) => Some(macro_kind),\n+                }\n+            });\n \n         if !backtrace {\n             self.fix_multispans_in_extern_macros(source_map, span, children);"}, {"sha": "baadf80e18ef9fd5ab1588d90097ef6fcf217199", "filename": "src/librustc_infer/infer/error_reporting/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4282776b1c394ed470d33f95c62538a2d37b16d3/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4282776b1c394ed470d33f95c62538a2d37b16d3/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fmod.rs?ref=4282776b1c394ed470d33f95c62538a2d37b16d3", "patch": "@@ -1630,8 +1630,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                     ];\n                     if let Some(msg) = have_as_ref\n                         .iter()\n-                        .filter_map(|(path, msg)| if &path_str == path { Some(msg) } else { None })\n-                        .next()\n+                        .find_map(|(path, msg)| (&path_str == path).then_some(msg))\n                     {\n                         let mut show_suggestion = true;\n                         for (exp_ty, found_ty) in exp_substs.types().zip(found_substs.types()) {"}, {"sha": "de71363cbde5ccfad45d91fa688d294f74666695", "filename": "src/librustc_infer/infer/error_reporting/nice_region_error/find_anon_type.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4282776b1c394ed470d33f95c62538a2d37b16d3/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ffind_anon_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4282776b1c394ed470d33f95c62538a2d37b16d3/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ffind_anon_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ffind_anon_type.rs?ref=4282776b1c394ed470d33f95c62538a2d37b16d3", "patch": "@@ -47,8 +47,7 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n                 return fndecl\n                     .inputs\n                     .iter()\n-                    .filter_map(|arg| self.find_component_for_bound_region(arg, br))\n-                    .next()\n+                    .find_map(|arg| self.find_component_for_bound_region(arg, br))\n                     .map(|ty| (ty, &**fndecl));\n             }\n         }"}, {"sha": "22b130cdf5ffe2ffd3cf438997c744dced008fa3", "filename": "src/librustc_infer/infer/error_reporting/nice_region_error/util.rs", "status": "modified", "additions": 25, "deletions": 29, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/4282776b1c394ed470d33f95c62538a2d37b16d3/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fnice_region_error%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4282776b1c394ed470d33f95c62538a2d37b16d3/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fnice_region_error%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fnice_region_error%2Futil.rs?ref=4282776b1c394ed470d33f95c62538a2d37b16d3", "patch": "@@ -58,37 +58,33 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n         let fn_decl = hir.fn_decl_by_hir_id(owner_id).unwrap();\n         let poly_fn_sig = self.tcx().fn_sig(id);\n         let fn_sig = self.tcx().liberate_late_bound_regions(id, &poly_fn_sig);\n-        body.params\n-            .iter()\n-            .enumerate()\n-            .filter_map(|(index, param)| {\n-                // May return None; sometimes the tables are not yet populated.\n-                let ty = fn_sig.inputs()[index];\n-                let mut found_anon_region = false;\n-                let new_param_ty = self.tcx().fold_regions(&ty, &mut false, |r, _| {\n-                    if *r == *anon_region {\n-                        found_anon_region = true;\n-                        replace_region\n-                    } else {\n-                        r\n-                    }\n-                });\n-                if found_anon_region {\n-                    let ty_hir_id = fn_decl.inputs[index].hir_id;\n-                    let param_ty_span = hir.span(ty_hir_id);\n-                    let is_first = index == 0;\n-                    Some(AnonymousParamInfo {\n-                        param,\n-                        param_ty: new_param_ty,\n-                        param_ty_span,\n-                        bound_region,\n-                        is_first,\n-                    })\n+        body.params.iter().enumerate().find_map(|(index, param)| {\n+            // May return None; sometimes the tables are not yet populated.\n+            let ty = fn_sig.inputs()[index];\n+            let mut found_anon_region = false;\n+            let new_param_ty = self.tcx().fold_regions(&ty, &mut false, |r, _| {\n+                if *r == *anon_region {\n+                    found_anon_region = true;\n+                    replace_region\n                 } else {\n-                    None\n+                    r\n                 }\n-            })\n-            .next()\n+            });\n+            if found_anon_region {\n+                let ty_hir_id = fn_decl.inputs[index].hir_id;\n+                let param_ty_span = hir.span(ty_hir_id);\n+                let is_first = index == 0;\n+                Some(AnonymousParamInfo {\n+                    param,\n+                    param_ty: new_param_ty,\n+                    param_ty_span,\n+                    bound_region,\n+                    is_first,\n+                })\n+            } else {\n+                None\n+            }\n+        })\n     }\n \n     // Here, we check for the case where the anonymous region"}, {"sha": "fda0172544333bc6ed630bc8786b318b07f06182", "filename": "src/librustc_interface/util.rs", "status": "modified", "additions": 8, "deletions": 11, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/4282776b1c394ed470d33f95c62538a2d37b16d3/src%2Flibrustc_interface%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4282776b1c394ed470d33f95c62538a2d37b16d3/src%2Flibrustc_interface%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Futil.rs?ref=4282776b1c394ed470d33f95c62538a2d37b16d3", "patch": "@@ -267,17 +267,14 @@ pub fn rustc_path<'a>() -> Option<&'a Path> {\n }\n \n fn get_rustc_path_inner(bin_path: &str) -> Option<PathBuf> {\n-    sysroot_candidates()\n-        .iter()\n-        .filter_map(|sysroot| {\n-            let candidate = sysroot.join(bin_path).join(if cfg!(target_os = \"windows\") {\n-                \"rustc.exe\"\n-            } else {\n-                \"rustc\"\n-            });\n-            candidate.exists().then_some(candidate)\n-        })\n-        .next()\n+    sysroot_candidates().iter().find_map(|sysroot| {\n+        let candidate = sysroot.join(bin_path).join(if cfg!(target_os = \"windows\") {\n+            \"rustc.exe\"\n+        } else {\n+            \"rustc\"\n+        });\n+        candidate.exists().then_some(candidate)\n+    })\n }\n \n fn sysroot_candidates() -> Vec<PathBuf> {"}, {"sha": "4b5c6177b2532562ddc3a37f293f8cf9c3b85567", "filename": "src/librustc_middle/mir/interpret/error.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4282776b1c394ed470d33f95c62538a2d37b16d3/src%2Flibrustc_middle%2Fmir%2Finterpret%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4282776b1c394ed470d33f95c62538a2d37b16d3/src%2Flibrustc_middle%2Fmir%2Finterpret%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fmir%2Finterpret%2Ferror.rs?ref=4282776b1c394ed470d33f95c62538a2d37b16d3", "patch": "@@ -179,8 +179,7 @@ impl<'tcx> ConstEvalErr<'tcx> {\n                     .stacktrace\n                     .iter()\n                     .rev()\n-                    .filter_map(|frame| frame.lint_root)\n-                    .next()\n+                    .find_map(|frame| frame.lint_root)\n                     .unwrap_or(lint_root);\n                 tcx.struct_span_lint_hir(\n                     rustc_session::lint::builtin::CONST_ERR,"}, {"sha": "6bdc65eb05643b957f3fb3a3af7a3ba028e3dd8e", "filename": "src/librustc_middle/ty/print/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4282776b1c394ed470d33f95c62538a2d37b16d3/src%2Flibrustc_middle%2Fty%2Fprint%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4282776b1c394ed470d33f95c62538a2d37b16d3/src%2Flibrustc_middle%2Fty%2Fprint%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fprint%2Fmod.rs?ref=4282776b1c394ed470d33f95c62538a2d37b16d3", "patch": "@@ -278,7 +278,7 @@ pub fn characteristic_def_id_of_type(ty: Ty<'_>) -> Option<DefId> {\n         ty::Ref(_, ty, _) => characteristic_def_id_of_type(ty),\n \n         ty::Tuple(ref tys) => {\n-            tys.iter().filter_map(|ty| characteristic_def_id_of_type(ty.expect_ty())).next()\n+            tys.iter().find_map(|ty| characteristic_def_id_of_type(ty.expect_ty()))\n         }\n \n         ty::FnDef(def_id, _)"}, {"sha": "8c8d20655f96f8ab06b885a47600f58685866535", "filename": "src/librustc_middle/ty/print/pretty.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/4282776b1c394ed470d33f95c62538a2d37b16d3/src%2Flibrustc_middle%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4282776b1c394ed470d33f95c62538a2d37b16d3/src%2Flibrustc_middle%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fprint%2Fpretty.rs?ref=4282776b1c394ed470d33f95c62538a2d37b16d3", "patch": "@@ -150,13 +150,10 @@ impl RegionHighlightMode {\n \n     /// Returns `Some(n)` with the number to use for the given region, if any.\n     fn region_highlighted(&self, region: ty::Region<'_>) -> Option<usize> {\n-        self.highlight_regions\n-            .iter()\n-            .filter_map(|h| match h {\n-                Some((r, n)) if r == region => Some(*n),\n-                _ => None,\n-            })\n-            .next()\n+        self.highlight_regions.iter().find_map(|h| match h {\n+            Some((r, n)) if r == region => Some(*n),\n+            _ => None,\n+        })\n     }\n \n     /// Highlight the given bound region."}, {"sha": "832f4278149bbda3c9288f78d90d0c3291ebb2ec", "filename": "src/librustc_mir/borrow_check/region_infer/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4282776b1c394ed470d33f95c62538a2d37b16d3/src%2Flibrustc_mir%2Fborrow_check%2Fregion_infer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4282776b1c394ed470d33f95c62538a2d37b16d3/src%2Flibrustc_mir%2Fborrow_check%2Fregion_infer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fregion_infer%2Fmod.rs?ref=4282776b1c394ed470d33f95c62538a2d37b16d3", "patch": "@@ -1815,11 +1815,10 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n             RegionElement::PlaceholderRegion(error_placeholder) => self\n                 .definitions\n                 .iter_enumerated()\n-                .filter_map(|(r, definition)| match definition.origin {\n+                .find_map(|(r, definition)| match definition.origin {\n                     NLLRegionVariableOrigin::Placeholder(p) if p == error_placeholder => Some(r),\n                     _ => None,\n                 })\n-                .next()\n                 .unwrap(),\n         }\n     }"}, {"sha": "b9302d58cd59e9d8495a6e41e5abad8ef2d6e530", "filename": "src/librustc_mir/transform/rustc_peek.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4282776b1c394ed470d33f95c62538a2d37b16d3/src%2Flibrustc_mir%2Ftransform%2Frustc_peek.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4282776b1c394ed470d33f95c62538a2d37b16d3/src%2Flibrustc_mir%2Ftransform%2Frustc_peek.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Frustc_peek.rs?ref=4282776b1c394ed470d33f95c62538a2d37b16d3", "patch": "@@ -113,8 +113,7 @@ pub fn sanity_check_via_rustc_peek<'tcx, A>(\n             .statements\n             .iter()\n             .enumerate()\n-            .filter_map(|(i, stmt)| value_assigned_to_local(stmt, call.arg).map(|rval| (i, rval)))\n-            .next()\n+            .find_map(|(i, stmt)| value_assigned_to_local(stmt, call.arg).map(|rval| (i, rval)))\n             .expect(\n                 \"call to rustc_peek should be preceded by \\\n                     assignment to temporary holding its argument\","}, {"sha": "d95481b959037e926e4a162e65f89843800f6571", "filename": "src/librustc_resolve/late/lifetimes.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4282776b1c394ed470d33f95c62538a2d37b16d3/src%2Flibrustc_resolve%2Flate%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4282776b1c394ed470d33f95c62538a2d37b16d3/src%2Flibrustc_resolve%2Flate%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flate%2Flifetimes.rs?ref=4282776b1c394ed470d33f95c62538a2d37b16d3", "patch": "@@ -480,14 +480,11 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                 let next_early_index = self.next_early_index();\n                 let was_in_fn_syntax = self.is_in_fn_syntax;\n                 self.is_in_fn_syntax = true;\n-                let lifetime_span: Option<Span> = c\n-                    .generic_params\n-                    .iter()\n-                    .filter_map(|param| match param.kind {\n+                let lifetime_span: Option<Span> =\n+                    c.generic_params.iter().rev().find_map(|param| match param.kind {\n                         GenericParamKind::Lifetime { .. } => Some(param.span),\n                         _ => None,\n-                    })\n-                    .last();\n+                    });\n                 let (span, span_type) = if let Some(span) = lifetime_span {\n                     (span.shrink_to_hi(), ForLifetimeSpanType::TypeTail)\n                 } else {"}, {"sha": "c2cce2775a5bc37a2956a27e8076d1e59835e0cb", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4282776b1c394ed470d33f95c62538a2d37b16d3/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4282776b1c394ed470d33f95c62538a2d37b16d3/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=4282776b1c394ed470d33f95c62538a2d37b16d3", "patch": "@@ -1136,13 +1136,12 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                             .generic_args()\n                             .bindings\n                             .iter()\n-                            .filter_map(|b| match (b.ident.as_str() == \"Output\", &b.kind) {\n+                            .find_map(|b| match (b.ident.as_str() == \"Output\", &b.kind) {\n                                 (true, hir::TypeBindingKind::Equality { ty }) => {\n                                     sess.source_map().span_to_snippet(ty.span).ok()\n                                 }\n                                 _ => None,\n                             })\n-                            .next()\n                             .unwrap_or_else(|| \"()\".to_string()),\n                     )),\n                 )"}, {"sha": "1acbcc038891d2a2df1bbbd1d8d185499bbfca17", "filename": "src/librustc_typeck/check/closure.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/4282776b1c394ed470d33f95c62538a2d37b16d3/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4282776b1c394ed470d33f95c62538a2d37b16d3/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs?ref=4282776b1c394ed470d33f95c62538a2d37b16d3", "patch": "@@ -177,13 +177,10 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n         match expected_ty.kind {\n             ty::Dynamic(ref object_type, ..) => {\n-                let sig = object_type\n-                    .projection_bounds()\n-                    .filter_map(|pb| {\n-                        let pb = pb.with_self_ty(self.tcx, self.tcx.types.err);\n-                        self.deduce_sig_from_projection(None, &pb)\n-                    })\n-                    .next();\n+                let sig = object_type.projection_bounds().find_map(|pb| {\n+                    let pb = pb.with_self_ty(self.tcx, self.tcx.types.err);\n+                    self.deduce_sig_from_projection(None, &pb)\n+                });\n                 let kind = object_type\n                     .principal_def_id()\n                     .and_then(|did| self.tcx.fn_trait_kind_from_lang_item(did));"}, {"sha": "6e4af6d769add0a96cef8e46491acf65af47655e", "filename": "src/librustc_typeck/check/compare_method.rs", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/4282776b1c394ed470d33f95c62538a2d37b16d3/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4282776b1c394ed470d33f95c62538a2d37b16d3/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs?ref=4282776b1c394ed470d33f95c62538a2d37b16d3", "patch": "@@ -453,16 +453,13 @@ fn extract_spans_for_error_reporting<'a, 'tcx>(\n                     .zip(trait_iter)\n                     .zip(impl_m_iter)\n                     .zip(trait_m_iter)\n-                    .filter_map(\n-                        |(((&impl_arg_ty, &trait_arg_ty), impl_arg), trait_arg)| match infcx\n-                            .at(&cause, param_env)\n-                            .sub(trait_arg_ty, impl_arg_ty)\n-                        {\n-                            Ok(_) => None,\n-                            Err(_) => Some((impl_arg.span, Some(trait_arg.span))),\n-                        },\n-                    )\n-                    .next()\n+                    .find_map(|(((&impl_arg_ty, &trait_arg_ty), impl_arg), trait_arg)| match infcx\n+                        .at(&cause, param_env)\n+                        .sub(trait_arg_ty, impl_arg_ty)\n+                    {\n+                        Ok(_) => None,\n+                        Err(_) => Some((impl_arg.span, Some(trait_arg.span))),\n+                    })\n                     .unwrap_or_else(|| {\n                         if infcx\n                             .at(&cause, param_env)"}, {"sha": "23c7954d088786e1183cab6d1acc01150520adef", "filename": "src/librustc_typeck/check/method/confirm.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4282776b1c394ed470d33f95c62538a2d37b16d3/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4282776b1c394ed470d33f95c62538a2d37b16d3/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs?ref=4282776b1c394ed470d33f95c62538a2d37b16d3", "patch": "@@ -269,7 +269,7 @@ impl<'a, 'tcx> ConfirmContext<'a, 'tcx> {\n         self.fcx\n             .autoderef(self.span, self_ty)\n             .include_raw_pointers()\n-            .filter_map(|(ty, _)| match ty.kind {\n+            .find_map(|(ty, _)| match ty.kind {\n                 ty::Dynamic(ref data, ..) => Some(closure(\n                     self,\n                     ty,\n@@ -279,7 +279,6 @@ impl<'a, 'tcx> ConfirmContext<'a, 'tcx> {\n                 )),\n                 _ => None,\n             })\n-            .next()\n             .unwrap_or_else(|| {\n                 span_bug!(\n                     self.span,\n@@ -579,20 +578,18 @@ impl<'a, 'tcx> ConfirmContext<'a, 'tcx> {\n                         .predicates\n                         .iter()\n                         .zip(predicates.spans.iter())\n-                        .filter_map(\n+                        .find_map(\n                             |(p, span)| if *p == obligation.predicate { Some(*span) } else { None },\n                         )\n-                        .next()\n                         .unwrap_or(rustc_span::DUMMY_SP);\n                     Some((trait_pred, span))\n                 }\n                 _ => None,\n             })\n-            .filter_map(|(trait_pred, span)| match trait_pred.skip_binder().self_ty().kind {\n+            .find_map(|(trait_pred, span)| match trait_pred.skip_binder().self_ty().kind {\n                 ty::Dynamic(..) => Some(span),\n                 _ => None,\n             })\n-            .next()\n     }\n \n     fn enforce_illegal_method_limitations(&self, pick: &probe::Pick<'_>) {"}, {"sha": "387ef03f0677386137f56c41c3ce6f9350f5f4c9", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/4282776b1c394ed470d33f95c62538a2d37b16d3/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4282776b1c394ed470d33f95c62538a2d37b16d3/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=4282776b1c394ed470d33f95c62538a2d37b16d3", "patch": "@@ -3527,14 +3527,13 @@ fn render_deref_methods(\n         .inner_impl()\n         .items\n         .iter()\n-        .filter_map(|item| match item.inner {\n+        .find_map(|item| match item.inner {\n             clean::TypedefItem(ref t, true) => Some(match *t {\n                 clean::Typedef { item_type: Some(ref type_), .. } => (type_, &t.type_),\n                 _ => (&t.type_, &t.type_),\n             }),\n             _ => None,\n         })\n-        .next()\n         .expect(\"Expected associated type binding\");\n     let what =\n         AssocItemRender::DerefFor { trait_: deref_type, type_: real_target, deref_mut_: deref_mut };\n@@ -4111,18 +4110,14 @@ fn sidebar_assoc_items(it: &clean::Item) -> String {\n                 .filter(|i| i.inner_impl().trait_.is_some())\n                 .find(|i| i.inner_impl().trait_.def_id() == c.deref_trait_did)\n             {\n-                if let Some((target, real_target)) = impl_\n-                    .inner_impl()\n-                    .items\n-                    .iter()\n-                    .filter_map(|item| match item.inner {\n+                if let Some((target, real_target)) =\n+                    impl_.inner_impl().items.iter().find_map(|item| match item.inner {\n                         clean::TypedefItem(ref t, true) => Some(match *t {\n                             clean::Typedef { item_type: Some(ref type_), .. } => (type_, &t.type_),\n                             _ => (&t.type_, &t.type_),\n                         }),\n                         _ => None,\n                     })\n-                    .next()\n                 {\n                     let inner_impl = target\n                         .def_id()"}, {"sha": "0fdeefd79e9f24e6764ed754f6e69f0a74a78c35", "filename": "src/librustdoc/passes/collect_trait_impls.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4282776b1c394ed470d33f95c62538a2d37b16d3/src%2Flibrustdoc%2Fpasses%2Fcollect_trait_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4282776b1c394ed470d33f95c62538a2d37b16d3/src%2Flibrustdoc%2Fpasses%2Fcollect_trait_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_trait_impls.rs?ref=4282776b1c394ed470d33f95c62538a2d37b16d3", "patch": "@@ -89,11 +89,10 @@ pub fn collect_trait_impls(krate: Crate, cx: &DocContext<'_>) -> Crate {\n             if cleaner.keep_item(for_) && trait_.def_id() == cx.tcx.lang_items().deref_trait() {\n                 let target = items\n                     .iter()\n-                    .filter_map(|item| match item.inner {\n+                    .find_map(|item| match item.inner {\n                         TypedefItem(ref t, true) => Some(&t.type_),\n                         _ => None,\n                     })\n-                    .next()\n                     .expect(\"Deref impl without Target type\");\n \n                 if let Some(prim) = target.primitive_type() {"}, {"sha": "acfcfe9d0159bc1a0bbda4eea55f5b95db916558", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 12, "deletions": 17, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/4282776b1c394ed470d33f95c62538a2d37b16d3/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4282776b1c394ed470d33f95c62538a2d37b16d3/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=4282776b1c394ed470d33f95c62538a2d37b16d3", "patch": "@@ -164,28 +164,23 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n         body: hir::BodyId,\n     ) {\n         debug!(\"visiting fn\");\n-        let macro_kind = item\n-            .attrs\n-            .iter()\n-            .filter_map(|a| {\n-                if a.check_name(sym::proc_macro) {\n-                    Some(MacroKind::Bang)\n-                } else if a.check_name(sym::proc_macro_derive) {\n-                    Some(MacroKind::Derive)\n-                } else if a.check_name(sym::proc_macro_attribute) {\n-                    Some(MacroKind::Attr)\n-                } else {\n-                    None\n-                }\n-            })\n-            .next();\n+        let macro_kind = item.attrs.iter().find_map(|a| {\n+            if a.check_name(sym::proc_macro) {\n+                Some(MacroKind::Bang)\n+            } else if a.check_name(sym::proc_macro_derive) {\n+                Some(MacroKind::Derive)\n+            } else if a.check_name(sym::proc_macro_attribute) {\n+                Some(MacroKind::Attr)\n+            } else {\n+                None\n+            }\n+        });\n         match macro_kind {\n             Some(kind) => {\n                 let name = if kind == MacroKind::Derive {\n                     item.attrs\n                         .lists(sym::proc_macro_derive)\n-                        .filter_map(|mi| mi.ident())\n-                        .next()\n+                        .find_map(|mi| mi.ident())\n                         .expect(\"proc-macro derives require a name\")\n                         .name\n                 } else {"}, {"sha": "16ca539b3c178e0177f2f7899696916920db9b8a", "filename": "src/libstd/io/buffered.rs", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/4282776b1c394ed470d33f95c62538a2d37b16d3/src%2Flibstd%2Fio%2Fbuffered.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4282776b1c394ed470d33f95c62538a2d37b16d3/src%2Flibstd%2Fio%2Fbuffered.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fbuffered.rs?ref=4282776b1c394ed470d33f95c62538a2d37b16d3", "patch": "@@ -1043,15 +1043,10 @@ impl<W: Write> Write for LineWriter<W> {\n         }\n \n         // Find the last newline, and failing that write the whole buffer\n-        let last_newline = bufs\n-            .iter()\n-            .enumerate()\n-            .rev()\n-            .filter_map(|(i, buf)| {\n-                let pos = memchr::memrchr(b'\\n', buf)?;\n-                Some((i, pos))\n-            })\n-            .next();\n+        let last_newline = bufs.iter().enumerate().rev().find_map(|(i, buf)| {\n+            let pos = memchr::memrchr(b'\\n', buf)?;\n+            Some((i, pos))\n+        });\n         let (i, j) = match last_newline {\n             Some(pair) => pair,\n             None => return self.inner.write_vectored(bufs),"}, {"sha": "fec59aaa0c2794e67b9551b16d07320b7a82742c", "filename": "src/libterm/terminfo/mod.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/4282776b1c394ed470d33f95c62538a2d37b16d3/src%2Flibterm%2Fterminfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4282776b1c394ed470d33f95c62538a2d37b16d3/src%2Flibterm%2Fterminfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibterm%2Fterminfo%2Fmod.rs?ref=4282776b1c394ed470d33f95c62538a2d37b16d3", "patch": "@@ -173,14 +173,13 @@ impl<T: Write + Send> Terminal for TerminfoTerminal<T> {\n     fn reset(&mut self) -> io::Result<bool> {\n         // are there any terminals that have color/attrs and not sgr0?\n         // Try falling back to sgr, then op\n-        let cmd =\n-            match [\"sgr0\", \"sgr\", \"op\"].iter().filter_map(|cap| self.ti.strings.get(*cap)).next() {\n-                Some(op) => match expand(&op, &[], &mut Variables::new()) {\n-                    Ok(cmd) => cmd,\n-                    Err(e) => return Err(io::Error::new(io::ErrorKind::InvalidData, e)),\n-                },\n-                None => return Ok(false),\n-            };\n+        let cmd = match [\"sgr0\", \"sgr\", \"op\"].iter().find_map(|cap| self.ti.strings.get(*cap)) {\n+            Some(op) => match expand(&op, &[], &mut Variables::new()) {\n+                Ok(cmd) => cmd,\n+                Err(e) => return Err(io::Error::new(io::ErrorKind::InvalidData, e)),\n+            },\n+            None => return Ok(false),\n+        };\n         self.out.write_all(&cmd).and(Ok(true))\n     }\n "}]}