{"sha": "a03355dea0b7d042b8b4e01d75bba6c7489e3a14", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEwMzM1NWRlYTBiN2QwNDJiOGI0ZTAxZDc1YmJhNmM3NDg5ZTNhMTQ=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-04-29T12:55:05Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-04-29T12:55:05Z"}, "message": "some more test cases", "tree": {"sha": "feaac0c5f44e1d998fe1889d8463a9784a91b084", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/feaac0c5f44e1d998fe1889d8463a9784a91b084"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a03355dea0b7d042b8b4e01d75bba6c7489e3a14", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a03355dea0b7d042b8b4e01d75bba6c7489e3a14", "html_url": "https://github.com/rust-lang/rust/commit/a03355dea0b7d042b8b4e01d75bba6c7489e3a14", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a03355dea0b7d042b8b4e01d75bba6c7489e3a14/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "979bbf2ce1568f305fb52c2e10dc9db2375ce5bd", "url": "https://api.github.com/repos/rust-lang/rust/commits/979bbf2ce1568f305fb52c2e10dc9db2375ce5bd", "html_url": "https://github.com/rust-lang/rust/commit/979bbf2ce1568f305fb52c2e10dc9db2375ce5bd"}], "stats": {"total": 123, "additions": 109, "deletions": 14}, "files": [{"sha": "4fc6ae66a1242d2476b64260e8acc174e252bd50", "filename": "src/test/ui/consts/miri_unleashed/auxiliary/static_cross_crate.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a03355dea0b7d042b8b4e01d75bba6c7489e3a14/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fauxiliary%2Fstatic_cross_crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a03355dea0b7d042b8b4e01d75bba6c7489e3a14/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fauxiliary%2Fstatic_cross_crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fauxiliary%2Fstatic_cross_crate.rs?ref=a03355dea0b7d042b8b4e01d75bba6c7489e3a14", "patch": "@@ -1 +1,3 @@\n pub static mut ZERO: [u8; 1] = [0];\n+pub static ZERO_REF: &[u8; 1] = unsafe { &ZERO };\n+pub static mut OPT_ZERO: Option<u8> = Some(0);"}, {"sha": "8bdb48e6f122fd0b1f4e2ff257f93e0f8ba64d8c", "filename": "src/test/ui/consts/miri_unleashed/const_refers_to_static_cross_crate.rs", "status": "modified", "additions": 37, "deletions": 4, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/a03355dea0b7d042b8b4e01d75bba6c7489e3a14/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static_cross_crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a03355dea0b7d042b8b4e01d75bba6c7489e3a14/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static_cross_crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static_cross_crate.rs?ref=a03355dea0b7d042b8b4e01d75bba6c7489e3a14", "patch": "@@ -2,8 +2,7 @@\n // aux-build:static_cross_crate.rs\n #![allow(const_err)]\n \n-#![feature(exclusive_range_pattern)]\n-#![feature(half_open_range_patterns)]\n+#![feature(exclusive_range_pattern, half_open_range_patterns, const_if_match, const_panic)]\n \n extern crate static_cross_crate;\n \n@@ -16,13 +15,29 @@ const SLICE_MUT: &[u8; 1] = { //~ ERROR undefined behavior to use this value\n     //~^ WARN skipping const checks\n };\n \n-const SLICE_MUT2: &u8 = { //~ ERROR undefined behavior to use this value\n+const U8_MUT: &u8 = { //~ ERROR undefined behavior to use this value\n //~| NOTE encountered a reference pointing to a static variable\n //~| NOTE\n     unsafe { &static_cross_crate::ZERO[0] }\n     //~^ WARN skipping const checks\n };\n \n+// Also test indirection that reads from other static. This causes a const_err.\n+#[warn(const_err)] //~ NOTE\n+const U8_MUT2: &u8 = { //~ NOTE\n+    unsafe { &(*static_cross_crate::ZERO_REF)[0] }\n+    //~^ WARN skipping const checks\n+    //~| WARN [const_err]\n+    //~| NOTE constant accesses static\n+};\n+#[warn(const_err)] //~ NOTE\n+const U8_MUT3: &u8 = { //~ NOTE\n+    unsafe { match static_cross_crate::OPT_ZERO { Some(ref u) => u, None => panic!() } }\n+    //~^ WARN skipping const checks\n+    //~| WARN [const_err]\n+    //~| NOTE constant accesses static\n+};\n+\n pub fn test(x: &[u8; 1]) -> bool {\n     match x {\n         SLICE_MUT => true,\n@@ -33,7 +48,24 @@ pub fn test(x: &[u8; 1]) -> bool {\n \n pub fn test2(x: &u8) -> bool {\n     match x {\n-        SLICE_MUT2 => true,\n+        U8_MUT => true,\n+        //~^ ERROR could not evaluate constant pattern\n+        &(1..) => false,\n+    }\n+}\n+\n+// We need to use these *in a pattern* to trigger the failure... likely because\n+// the errors above otherwise stop compilation too early?\n+pub fn test3(x: &u8) -> bool {\n+    match x {\n+        U8_MUT2 => true,\n+        //~^ ERROR could not evaluate constant pattern\n+        &(1..) => false,\n+    }\n+}\n+pub fn test4(x: &u8) -> bool {\n+    match x {\n+        U8_MUT3 => true,\n         //~^ ERROR could not evaluate constant pattern\n         &(1..) => false,\n     }\n@@ -45,4 +77,5 @@ fn main() {\n     }\n     // Now the pattern is not exhaustive any more!\n     test(&[0]);\n+    test2(&0);\n }"}, {"sha": "bc6375f3d5e0b7439cea0f3d2af04963e9e05253", "filename": "src/test/ui/consts/miri_unleashed/const_refers_to_static_cross_crate.stderr", "status": "modified", "additions": 70, "deletions": 10, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/a03355dea0b7d042b8b4e01d75bba6c7489e3a14/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static_cross_crate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a03355dea0b7d042b8b4e01d75bba6c7489e3a14/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static_cross_crate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static_cross_crate.stderr?ref=a03355dea0b7d042b8b4e01d75bba6c7489e3a14", "patch": "@@ -1,11 +1,11 @@\n warning: skipping const checks\n-  --> $DIR/const_refers_to_static_cross_crate.rs:15:15\n+  --> $DIR/const_refers_to_static_cross_crate.rs:14:15\n    |\n LL |     unsafe { &static_cross_crate::ZERO }\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/const_refers_to_static_cross_crate.rs:12:1\n+  --> $DIR/const_refers_to_static_cross_crate.rs:11:1\n    |\n LL | / const SLICE_MUT: &[u8; 1] = {\n LL | |\n@@ -18,21 +18,21 @@ LL | | };\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n error: could not evaluate constant pattern\n-  --> $DIR/const_refers_to_static_cross_crate.rs:28:9\n+  --> $DIR/const_refers_to_static_cross_crate.rs:43:9\n    |\n LL |         SLICE_MUT => true,\n    |         ^^^^^^^^^\n \n warning: skipping const checks\n-  --> $DIR/const_refers_to_static_cross_crate.rs:22:15\n+  --> $DIR/const_refers_to_static_cross_crate.rs:21:15\n    |\n LL |     unsafe { &static_cross_crate::ZERO[0] }\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/const_refers_to_static_cross_crate.rs:19:1\n+  --> $DIR/const_refers_to_static_cross_crate.rs:18:1\n    |\n-LL | / const SLICE_MUT2: &u8 = {\n+LL | / const U8_MUT: &u8 = {\n LL | |\n LL | |\n LL | |     unsafe { &static_cross_crate::ZERO[0] }\n@@ -43,11 +43,71 @@ LL | | };\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n error: could not evaluate constant pattern\n-  --> $DIR/const_refers_to_static_cross_crate.rs:36:9\n+  --> $DIR/const_refers_to_static_cross_crate.rs:51:9\n    |\n-LL |         SLICE_MUT2 => true,\n-   |         ^^^^^^^^^^\n+LL |         U8_MUT => true,\n+   |         ^^^^^^\n \n-error: aborting due to 4 previous errors; 2 warnings emitted\n+warning: skipping const checks\n+  --> $DIR/const_refers_to_static_cross_crate.rs:28:17\n+   |\n+LL |     unsafe { &(*static_cross_crate::ZERO_REF)[0] }\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+warning: any use of this value will cause an error\n+  --> $DIR/const_refers_to_static_cross_crate.rs:28:14\n+   |\n+LL | / const U8_MUT2: &u8 = {\n+LL | |     unsafe { &(*static_cross_crate::ZERO_REF)[0] }\n+   | |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constant accesses static\n+LL | |\n+LL | |\n+LL | |\n+LL | | };\n+   | |__-\n+   |\n+note: the lint level is defined here\n+  --> $DIR/const_refers_to_static_cross_crate.rs:26:8\n+   |\n+LL | #[warn(const_err)]\n+   |        ^^^^^^^^^\n+\n+error: could not evaluate constant pattern\n+  --> $DIR/const_refers_to_static_cross_crate.rs:61:9\n+   |\n+LL |         U8_MUT2 => true,\n+   |         ^^^^^^^\n+\n+warning: skipping const checks\n+  --> $DIR/const_refers_to_static_cross_crate.rs:35:20\n+   |\n+LL |     unsafe { match static_cross_crate::OPT_ZERO { Some(ref u) => u, None => panic!() } }\n+   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+warning: any use of this value will cause an error\n+  --> $DIR/const_refers_to_static_cross_crate.rs:35:51\n+   |\n+LL | / const U8_MUT3: &u8 = {\n+LL | |     unsafe { match static_cross_crate::OPT_ZERO { Some(ref u) => u, None => panic!() } }\n+   | |                                                   ^^^^^^^^^^^ constant accesses static\n+LL | |\n+LL | |\n+LL | |\n+LL | | };\n+   | |__-\n+   |\n+note: the lint level is defined here\n+  --> $DIR/const_refers_to_static_cross_crate.rs:33:8\n+   |\n+LL | #[warn(const_err)]\n+   |        ^^^^^^^^^\n+\n+error: could not evaluate constant pattern\n+  --> $DIR/const_refers_to_static_cross_crate.rs:68:9\n+   |\n+LL |         U8_MUT3 => true,\n+   |         ^^^^^^^\n+\n+error: aborting due to 6 previous errors; 6 warnings emitted\n \n For more information about this error, try `rustc --explain E0080`."}]}