{"sha": "6b4d2b11a625e04245b9ff9a2ff4642863a94c55", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZiNGQyYjExYTYyNWUwNDI0NWI5ZmY5YTJmZjQ2NDI4NjNhOTRjNTU=", "commit": {"author": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2016-03-13T07:43:28Z"}, "committer": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2016-03-13T07:43:28Z"}, "message": "Add support for smaller signed integers.", "tree": {"sha": "bd5e85f1d3f4a1e3b0e0027a54092af82b21e90a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bd5e85f1d3f4a1e3b0e0027a54092af82b21e90a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6b4d2b11a625e04245b9ff9a2ff4642863a94c55", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6b4d2b11a625e04245b9ff9a2ff4642863a94c55", "html_url": "https://github.com/rust-lang/rust/commit/6b4d2b11a625e04245b9ff9a2ff4642863a94c55", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6b4d2b11a625e04245b9ff9a2ff4642863a94c55/comments", "author": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c1edb9f978261aa0c313f3b9131bdd0d09acbd6b", "url": "https://api.github.com/repos/rust-lang/rust/commits/c1edb9f978261aa0c313f3b9131bdd0d09acbd6b", "html_url": "https://github.com/rust-lang/rust/commit/c1edb9f978261aa0c313f3b9131bdd0d09acbd6b"}], "stats": {"total": 140, "additions": 80, "deletions": 60}, "files": [{"sha": "a3ed7c59f12cd0ba60b630f4be3a54210bcee178", "filename": "src/interpreter.rs", "status": "modified", "additions": 11, "deletions": 59, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/6b4d2b11a625e04245b9ff9a2ff4642863a94c55/src%2Finterpreter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b4d2b11a625e04245b9ff9a2ff4642863a94c55/src%2Finterpreter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finterpreter.rs?ref=6b4d2b11a625e04245b9ff9a2ff4642863a94c55", "patch": "@@ -6,6 +6,7 @@ use std::error::Error;\n use std::fmt;\n \n use memory::{FieldRepr, IntRepr, Memory, Pointer, Repr};\n+use primval;\n \n const TRACE_EXECUTION: bool = true;\n \n@@ -77,15 +78,6 @@ struct Interpreter<'a, 'tcx: 'a> {\n     stack: Vec<Frame<'a, 'tcx>>,\n }\n \n-#[derive(Clone, Copy, Debug, PartialEq)]\n-pub enum PrimVal {\n-    Bool(bool),\n-    I8(i8),\n-    I16(i16),\n-    I32(i32),\n-    I64(i64),\n-}\n-\n impl<'a, 'tcx: 'a> Interpreter<'a, 'tcx> {\n     fn new(tcx: &'a TyCtxt<'tcx>, mir_map: &'a MirMap<'tcx>) -> Self {\n         Interpreter {\n@@ -236,41 +228,6 @@ impl<'a, 'tcx: 'a> Interpreter<'a, 'tcx> {\n         Ok(())\n     }\n \n-    fn eval_binary_op(&mut self, bin_op: mir::BinOp, left_operand: &mir::Operand<'tcx>,\n-                      right_operand: &mir::Operand<'tcx>, dest: Pointer) -> EvalResult<()>\n-    {\n-        // FIXME(tsion): Check for non-integer binary operations.\n-        let (left, left_repr) = try!(self.eval_operand(left_operand));\n-        let (right, right_repr) = try!(self.eval_operand(right_operand));\n-\n-        let left_val = try!(self.memory.read_primval(left, &left_repr));\n-        let right_val = try!(self.memory.read_primval(right, &right_repr));\n-\n-        use rustc::mir::repr::BinOp::*;\n-        use self::PrimVal::*;\n-        let result_val = match (bin_op, left_val, right_val) {\n-            (Add,    I64(l), I64(r)) => I64(l + r),\n-            (Sub,    I64(l), I64(r)) => I64(l - r),\n-            (Mul,    I64(l), I64(r)) => I64(l * r),\n-            (Div,    I64(l), I64(r)) => I64(l / r),\n-            (Rem,    I64(l), I64(r)) => I64(l % r),\n-            (BitXor, I64(l), I64(r)) => I64(l ^ r),\n-            (BitAnd, I64(l), I64(r)) => I64(l & r),\n-            (BitOr,  I64(l), I64(r)) => I64(l | r),\n-            (Shl,    I64(l), I64(r)) => I64(l << r),\n-            (Shr,    I64(l), I64(r)) => I64(l >> r),\n-            (Eq,     I64(l), I64(r)) => Bool(l == r),\n-            (Lt,     I64(l), I64(r)) => Bool(l < r),\n-            (Le,     I64(l), I64(r)) => Bool(l <= r),\n-            (Ne,     I64(l), I64(r)) => Bool(l != r),\n-            (Ge,     I64(l), I64(r)) => Bool(l >= r),\n-            (Gt,     I64(l), I64(r)) => Bool(l > r),\n-            _ => unimplemented!(),\n-        };\n-\n-        self.memory.write_primval(dest, result_val)\n-    }\n-\n     fn assign_to_product(&mut self, dest: Pointer, dest_repr: &Repr,\n                          operands: &[mir::Operand<'tcx>]) -> EvalResult<()> {\n         match *dest_repr {\n@@ -297,23 +254,18 @@ impl<'a, 'tcx: 'a> Interpreter<'a, 'tcx> {\n                 self.memory.copy(src, dest, dest_repr.size())\n             }\n \n-            BinaryOp(bin_op, ref left, ref right) =>\n-                self.eval_binary_op(bin_op, left, right, dest),\n+            BinaryOp(bin_op, ref left, ref right) => {\n+                let (left_ptr, left_repr) = try!(self.eval_operand(left));\n+                let (right_ptr, right_repr) = try!(self.eval_operand(right));\n+                let left_val = try!(self.memory.read_primval(left_ptr, &left_repr));\n+                let right_val = try!(self.memory.read_primval(right_ptr, &right_repr));\n+                self.memory.write_primval(dest, primval::binary_op(bin_op, left_val, right_val))\n+            }\n \n             UnaryOp(un_op, ref operand) => {\n-                let (src, src_repr) = try!(self.eval_operand(operand));\n-                let src_val = try!(self.memory.read_primval(src, &src_repr));\n-\n-                use rustc::mir::repr::UnOp::*;\n-                use self::PrimVal::*;\n-                let result_val = match (un_op, src_val) {\n-                    (Not, Bool(b)) => Bool(!b),\n-                    (Not, I64(n)) => I64(!n),\n-                    (Neg, I64(n)) => I64(-n),\n-                    _ => unimplemented!(),\n-                };\n-\n-                self.memory.write_primval(dest, result_val)\n+                let (ptr, repr) = try!(self.eval_operand(operand));\n+                let val = try!(self.memory.read_primval(ptr, &repr));\n+                self.memory.write_primval(dest, primval::unary_op(un_op, val))\n             }\n \n             Aggregate(ref kind, ref operands) => {"}, {"sha": "c3b1c5a4025239b0fad325ecb2a848dd21e5efb4", "filename": "src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6b4d2b11a625e04245b9ff9a2ff4642863a94c55/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b4d2b11a625e04245b9ff9a2ff4642863a94c55/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=6b4d2b11a625e04245b9ff9a2ff4642863a94c55", "patch": "@@ -7,3 +7,4 @@ extern crate syntax;\n \n pub mod interpreter;\n mod memory;\n+mod primval;"}, {"sha": "fb17b4dabed4a56273dcd4f9ee92c4fa47c78f65", "filename": "src/memory.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6b4d2b11a625e04245b9ff9a2ff4642863a94c55/src%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b4d2b11a625e04245b9ff9a2ff4642863a94c55/src%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmemory.rs?ref=6b4d2b11a625e04245b9ff9a2ff4642863a94c55", "patch": "@@ -2,7 +2,8 @@ use byteorder::{self, ByteOrder};\n use std::collections::HashMap;\n use std::ptr;\n \n-use interpreter::{EvalError, EvalResult, PrimVal};\n+use interpreter::{EvalError, EvalResult};\n+use primval::PrimVal;\n \n pub struct Memory {\n     next_id: u64,"}, {"sha": "9442adbaf7e7b7a73088c6a17b1fcd6e945c2de7", "filename": "src/primval.rs", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/6b4d2b11a625e04245b9ff9a2ff4642863a94c55/src%2Fprimval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b4d2b11a625e04245b9ff9a2ff4642863a94c55/src%2Fprimval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fprimval.rs?ref=6b4d2b11a625e04245b9ff9a2ff4642863a94c55", "patch": "@@ -0,0 +1,66 @@\n+use rustc::mir::repr as mir;\n+\n+#[derive(Clone, Copy, Debug, PartialEq)]\n+pub enum PrimVal {\n+    Bool(bool),\n+    I8(i8),\n+    I16(i16),\n+    I32(i32),\n+    I64(i64),\n+}\n+\n+pub fn binary_op(bin_op: mir::BinOp, left: PrimVal, right: PrimVal) -> PrimVal {\n+    macro_rules! int_binops {\n+        ($v:ident, $l:ident, $r:ident) => ({\n+            use rustc::mir::repr::BinOp::*;\n+            use self::PrimVal::*;\n+            match bin_op {\n+                Add => $v($l + $r),\n+                Sub => $v($l - $r),\n+                Mul => $v($l * $r),\n+                Div => $v($l / $r),\n+                Rem => $v($l % $r),\n+                BitXor => $v($l ^ $r),\n+                BitAnd => $v($l & $r),\n+                BitOr => $v($l | $r),\n+\n+                // TODO(tsion): Can have differently-typed RHS.\n+                Shl => $v($l << $r),\n+                Shr => $v($l >> $r),\n+\n+                Eq => Bool($l == $r),\n+                Ne => Bool($l != $r),\n+                Lt => Bool($l < $r),\n+                Le => Bool($l <= $r),\n+                Gt => Bool($l > $r),\n+                Ge => Bool($l >= $r),\n+            }\n+        })\n+    }\n+\n+    use self::PrimVal::*;\n+    match (left, right) {\n+        (I8(l), I8(r)) => int_binops!(I8, l, r),\n+        (I16(l), I16(r)) => int_binops!(I16, l, r),\n+        (I32(l), I32(r)) => int_binops!(I32, l, r),\n+        (I64(l), I64(r)) => int_binops!(I64, l, r),\n+        _ => unimplemented!(),\n+    }\n+}\n+\n+pub fn unary_op(un_op: mir::UnOp, val: PrimVal) -> PrimVal {\n+    use rustc::mir::repr::UnOp::*;\n+    use self::PrimVal::*;\n+    match (un_op, val) {\n+        (Not, Bool(b)) => Bool(!b),\n+        (Not, I8(n)) => I8(!n),\n+        (Neg, I8(n)) => I8(-n),\n+        (Not, I16(n)) => I16(!n),\n+        (Neg, I16(n)) => I16(-n),\n+        (Not, I32(n)) => I32(!n),\n+        (Neg, I32(n)) => I32(-n),\n+        (Not, I64(n)) => I64(!n),\n+        (Neg, I64(n)) => I64(-n),\n+        _ => unimplemented!(),\n+    }\n+}"}]}