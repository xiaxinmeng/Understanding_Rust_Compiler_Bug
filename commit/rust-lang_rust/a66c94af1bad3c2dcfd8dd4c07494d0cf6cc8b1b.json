{"sha": "a66c94af1bad3c2dcfd8dd4c07494d0cf6cc8b1b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE2NmM5NGFmMWJhZDNjMmRjZmQ4ZGQ0YzA3NDk0ZDBjZjZjYzhiMWI=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-08-23T23:14:10Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-08-23T23:14:10Z"}, "message": "renames", "tree": {"sha": "ee437a908df36ead848cb83d9224b22bdcecce5b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ee437a908df36ead848cb83d9224b22bdcecce5b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a66c94af1bad3c2dcfd8dd4c07494d0cf6cc8b1b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a66c94af1bad3c2dcfd8dd4c07494d0cf6cc8b1b", "html_url": "https://github.com/rust-lang/rust/commit/a66c94af1bad3c2dcfd8dd4c07494d0cf6cc8b1b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a66c94af1bad3c2dcfd8dd4c07494d0cf6cc8b1b/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dc40f1298a8d4dcb7a26d5af38c4fb7ef3d6c5df", "url": "https://api.github.com/repos/rust-lang/rust/commits/dc40f1298a8d4dcb7a26d5af38c4fb7ef3d6c5df", "html_url": "https://github.com/rust-lang/rust/commit/dc40f1298a8d4dcb7a26d5af38c4fb7ef3d6c5df"}], "stats": {"total": 56, "additions": 28, "deletions": 28}, "files": [{"sha": "57a887f844495b2022f4b86926bb3be65cea87ed", "filename": "crates/libsyntax2/src/grammar/expressions/atom.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a66c94af1bad3c2dcfd8dd4c07494d0cf6cc8b1b/crates%2Flibsyntax2%2Fsrc%2Fgrammar%2Fexpressions%2Fatom.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a66c94af1bad3c2dcfd8dd4c07494d0cf6cc8b1b/crates%2Flibsyntax2%2Fsrc%2Fgrammar%2Fexpressions%2Fatom.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibsyntax2%2Fsrc%2Fgrammar%2Fexpressions%2Fatom.rs?ref=a66c94af1bad3c2dcfd8dd4c07494d0cf6cc8b1b", "patch": "@@ -130,7 +130,7 @@ fn lambda_expr(p: &mut Parser) -> CompletedMarker {\n     let m = p.start();\n     p.eat(MOVE_KW);\n     params::param_list_opt_types(p);\n-    if fn_ret_type(p) {\n+    if opt_fn_ret_type(p) {\n         block(p);\n     } else {\n         expr(p);"}, {"sha": "9ce0c1f8fefa06ae3a5d6e5a05dca719806b71b0", "filename": "crates/libsyntax2/src/grammar/expressions/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a66c94af1bad3c2dcfd8dd4c07494d0cf6cc8b1b/crates%2Flibsyntax2%2Fsrc%2Fgrammar%2Fexpressions%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a66c94af1bad3c2dcfd8dd4c07494d0cf6cc8b1b/crates%2Flibsyntax2%2Fsrc%2Fgrammar%2Fexpressions%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibsyntax2%2Fsrc%2Fgrammar%2Fexpressions%2Fmod.rs?ref=a66c94af1bad3c2dcfd8dd4c07494d0cf6cc8b1b", "patch": "@@ -265,7 +265,7 @@ fn method_call_expr(p: &mut Parser, lhs: CompletedMarker) -> CompletedMarker {\n     let m = lhs.precede(p);\n     p.bump();\n     name_ref(p);\n-    type_args::type_arg_list(p, true);\n+    type_args::opt_type_arg_list(p, true);\n     if p.at(L_PAREN) {\n         arg_list(p);\n     }"}, {"sha": "18b681ee2131875f5cde2161fba3f28583adbc4a", "filename": "crates/libsyntax2/src/grammar/items/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a66c94af1bad3c2dcfd8dd4c07494d0cf6cc8b1b/crates%2Flibsyntax2%2Fsrc%2Fgrammar%2Fitems%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a66c94af1bad3c2dcfd8dd4c07494d0cf6cc8b1b/crates%2Flibsyntax2%2Fsrc%2Fgrammar%2Fitems%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibsyntax2%2Fsrc%2Fgrammar%2Fitems%2Fmod.rs?ref=a66c94af1bad3c2dcfd8dd4c07494d0cf6cc8b1b", "patch": "@@ -225,7 +225,7 @@ fn function(p: &mut Parser, flavor: ItemFlavor) {\n     name(p);\n     // test function_type_params\n     // fn foo<T: Clone + Copy>(){}\n-    type_params::type_param_list(p);\n+    type_params::opt_type_param_list(p);\n \n     if p.at(L_PAREN) {\n         match flavor {\n@@ -240,11 +240,11 @@ fn function(p: &mut Parser, flavor: ItemFlavor) {\n     // test function_ret_type\n     // fn foo() {}\n     // fn bar() -> () {}\n-    fn_ret_type(p);\n+    opt_fn_ret_type(p);\n \n     // test function_where_clause\n     // fn foo<T>() where T: Copy {}\n-    type_params::where_clause(p);\n+    type_params::opt_where_clause(p);\n \n     // test fn_decl\n     // trait T { fn foo(); }\n@@ -263,15 +263,15 @@ fn type_def(p: &mut Parser) {\n \n     // test type_item_type_params\n     // type Result<T> = ();\n-    type_params::type_param_list(p);\n+    type_params::opt_type_param_list(p);\n \n     if p.at(COLON) {\n         type_params::bounds(p);\n     }\n \n     // test type_item_where_clause\n     // type Foo where Foo: Copy = ();\n-    type_params::where_clause(p);\n+    type_params::opt_where_clause(p);\n \n     if p.eat(EQ) {\n         types::type_(p);"}, {"sha": "cde9d0ae63065f11d0287ad2e465a57f3b15c0b6", "filename": "crates/libsyntax2/src/grammar/items/structs.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a66c94af1bad3c2dcfd8dd4c07494d0cf6cc8b1b/crates%2Flibsyntax2%2Fsrc%2Fgrammar%2Fitems%2Fstructs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a66c94af1bad3c2dcfd8dd4c07494d0cf6cc8b1b/crates%2Flibsyntax2%2Fsrc%2Fgrammar%2Fitems%2Fstructs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibsyntax2%2Fsrc%2Fgrammar%2Fitems%2Fstructs.rs?ref=a66c94af1bad3c2dcfd8dd4c07494d0cf6cc8b1b", "patch": "@@ -5,10 +5,10 @@ pub(super) fn struct_def(p: &mut Parser) {\n     p.bump();\n \n     name(p);\n-    type_params::type_param_list(p);\n+    type_params::opt_type_param_list(p);\n     match p.current() {\n         WHERE_KW => {\n-            type_params::where_clause(p);\n+            type_params::opt_where_clause(p);\n             match p.current() {\n                 SEMI => {\n                     p.bump();\n@@ -42,8 +42,8 @@ pub(super) fn enum_def(p: &mut Parser) {\n     assert!(p.at(ENUM_KW));\n     p.bump();\n     name(p);\n-    type_params::type_param_list(p);\n-    type_params::where_clause(p);\n+    type_params::opt_type_param_list(p);\n+    type_params::opt_where_clause(p);\n     if p.expect(L_CURLY) {\n         while !p.at(EOF) && !p.at(R_CURLY) {\n             let var = p.start();"}, {"sha": "73ecd4bef917a5ac2344bcc5e680a2696251a396", "filename": "crates/libsyntax2/src/grammar/items/traits.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a66c94af1bad3c2dcfd8dd4c07494d0cf6cc8b1b/crates%2Flibsyntax2%2Fsrc%2Fgrammar%2Fitems%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a66c94af1bad3c2dcfd8dd4c07494d0cf6cc8b1b/crates%2Flibsyntax2%2Fsrc%2Fgrammar%2Fitems%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibsyntax2%2Fsrc%2Fgrammar%2Fitems%2Ftraits.rs?ref=a66c94af1bad3c2dcfd8dd4c07494d0cf6cc8b1b", "patch": "@@ -6,11 +6,11 @@ pub(super) fn trait_def(p: &mut Parser) {\n     assert!(p.at(TRAIT_KW));\n     p.bump();\n     name(p);\n-    type_params::type_param_list(p);\n+    type_params::opt_type_param_list(p);\n     if p.at(COLON) {\n         type_params::bounds(p);\n     }\n-    type_params::where_clause(p);\n+    type_params::opt_where_clause(p);\n     p.expect(L_CURLY);\n     // test trait_item_items\n     // impl F {\n@@ -31,7 +31,7 @@ pub(super) fn impl_item(p: &mut Parser) {\n     assert!(p.at(IMPL_KW));\n     p.bump();\n     if choose_type_params_over_qpath(p) {\n-        type_params::type_param_list(p);\n+        type_params::opt_type_param_list(p);\n     }\n \n     // TODO: never type\n@@ -44,7 +44,7 @@ pub(super) fn impl_item(p: &mut Parser) {\n     if p.eat(FOR_KW) {\n         types::type_(p);\n     }\n-    type_params::where_clause(p);\n+    type_params::opt_where_clause(p);\n     p.expect(L_CURLY);\n \n     // test impl_item_items"}, {"sha": "0f168eb60908833a90af9282c69e5d3b4553051d", "filename": "crates/libsyntax2/src/grammar/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a66c94af1bad3c2dcfd8dd4c07494d0cf6cc8b1b/crates%2Flibsyntax2%2Fsrc%2Fgrammar%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a66c94af1bad3c2dcfd8dd4c07494d0cf6cc8b1b/crates%2Flibsyntax2%2Fsrc%2Fgrammar%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibsyntax2%2Fsrc%2Fgrammar%2Fmod.rs?ref=a66c94af1bad3c2dcfd8dd4c07494d0cf6cc8b1b", "patch": "@@ -113,7 +113,7 @@ fn abi(p: &mut Parser) {\n     abi.complete(p, ABI);\n }\n \n-fn fn_ret_type(p: &mut Parser) -> bool {\n+fn opt_fn_ret_type(p: &mut Parser) -> bool {\n     if p.at(THIN_ARROW) {\n         p.bump();\n         types::type_(p);"}, {"sha": "5b1322b3a9f9adf04a60b663b68c556fd3c4e489", "filename": "crates/libsyntax2/src/grammar/params.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a66c94af1bad3c2dcfd8dd4c07494d0cf6cc8b1b/crates%2Flibsyntax2%2Fsrc%2Fgrammar%2Fparams.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a66c94af1bad3c2dcfd8dd4c07494d0cf6cc8b1b/crates%2Flibsyntax2%2Fsrc%2Fgrammar%2Fparams.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibsyntax2%2Fsrc%2Fgrammar%2Fparams.rs?ref=a66c94af1bad3c2dcfd8dd4c07494d0cf6cc8b1b", "patch": "@@ -45,7 +45,7 @@ fn list_(p: &mut Parser, flavor: Flavor) {\n     let m = p.start();\n     p.bump();\n     if flavor.type_required() {\n-        self_param(p);\n+        opt_self_param(p);\n     }\n     while !p.at(EOF) && !p.at(ket) {\n         value_parameter(p, flavor);\n@@ -94,7 +94,7 @@ fn value_parameter(p: &mut Parser, flavor: Flavor) {\n //     fn d(&'a mut self, x: i32) {}\n //     fn e(mut self) {}\n // }\n-fn self_param(p: &mut Parser) {\n+fn opt_self_param(p: &mut Parser) {\n     let m;\n     if p.at(SELF_KW) || p.at(MUT_KW) && p.nth(1) == SELF_KW {\n         m = p.start();"}, {"sha": "8f5e82d91e3890aab6f9d46196a2fd50dbc99e03", "filename": "crates/libsyntax2/src/grammar/paths.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a66c94af1bad3c2dcfd8dd4c07494d0cf6cc8b1b/crates%2Flibsyntax2%2Fsrc%2Fgrammar%2Fpaths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a66c94af1bad3c2dcfd8dd4c07494d0cf6cc8b1b/crates%2Flibsyntax2%2Fsrc%2Fgrammar%2Fpaths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibsyntax2%2Fsrc%2Fgrammar%2Fpaths.rs?ref=a66c94af1bad3c2dcfd8dd4c07494d0cf6cc8b1b", "patch": "@@ -69,7 +69,7 @@ fn path_segment(p: &mut Parser, mode: Mode, first: bool) {\n         match p.current() {\n             IDENT => {\n                 name_ref(p);\n-                path_generic_args(p, mode);\n+                opt_path_type_args(p, mode);\n             }\n             SELF_KW | SUPER_KW => p.bump(),\n             _ => {\n@@ -80,19 +80,19 @@ fn path_segment(p: &mut Parser, mode: Mode, first: bool) {\n     m.complete(p, PATH_SEGMENT);\n }\n \n-fn path_generic_args(p: &mut Parser, mode: Mode) {\n+fn opt_path_type_args(p: &mut Parser, mode: Mode) {\n     match mode {\n         Mode::Use => return,\n         Mode::Type => {\n             // test path_fn_trait_args\n             // type F = Box<Fn(x: i32) -> ()>;\n             if p.at(L_PAREN) {\n                 params::param_list_opt_patterns(p);\n-                fn_ret_type(p);\n+                opt_fn_ret_type(p);\n             } else {\n-                type_args::type_arg_list(p, false)\n+                type_args::opt_type_arg_list(p, false)\n             }\n         },\n-        Mode::Expr => type_args::type_arg_list(p, true),\n+        Mode::Expr => type_args::opt_type_arg_list(p, true),\n     }\n }"}, {"sha": "29ff6e534451ed981568a16e9d39cc4bdd235776", "filename": "crates/libsyntax2/src/grammar/type_args.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a66c94af1bad3c2dcfd8dd4c07494d0cf6cc8b1b/crates%2Flibsyntax2%2Fsrc%2Fgrammar%2Ftype_args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a66c94af1bad3c2dcfd8dd4c07494d0cf6cc8b1b/crates%2Flibsyntax2%2Fsrc%2Fgrammar%2Ftype_args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibsyntax2%2Fsrc%2Fgrammar%2Ftype_args.rs?ref=a66c94af1bad3c2dcfd8dd4c07494d0cf6cc8b1b", "patch": "@@ -1,6 +1,6 @@\n use super::*;\n \n-pub(super) fn type_arg_list(p: &mut Parser, colon_colon_required: bool) {\n+pub(super) fn opt_type_arg_list(p: &mut Parser, colon_colon_required: bool) {\n     let m;\n     match (colon_colon_required, p.nth(0), p.nth(1)) {\n         (_, COLONCOLON, L_ANGLE) => {"}, {"sha": "3fb4bd3564e7bdd61a464e0abf1d8dd2b79182a3", "filename": "crates/libsyntax2/src/grammar/type_params.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a66c94af1bad3c2dcfd8dd4c07494d0cf6cc8b1b/crates%2Flibsyntax2%2Fsrc%2Fgrammar%2Ftype_params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a66c94af1bad3c2dcfd8dd4c07494d0cf6cc8b1b/crates%2Flibsyntax2%2Fsrc%2Fgrammar%2Ftype_params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibsyntax2%2Fsrc%2Fgrammar%2Ftype_params.rs?ref=a66c94af1bad3c2dcfd8dd4c07494d0cf6cc8b1b", "patch": "@@ -1,6 +1,6 @@\n use super::*;\n \n-pub(super) fn type_param_list(p: &mut Parser) {\n+pub(super) fn opt_type_param_list(p: &mut Parser) {\n     if !p.at(L_ANGLE) {\n         return;\n     }\n@@ -96,7 +96,7 @@ pub(super) fn bounds_without_colon(p: &mut Parser) {\n //    T: Clone + Copy + 'static,\n //    Iterator::Item: 'a,\n // {}\n-pub(super) fn where_clause(p: &mut Parser) {\n+pub(super) fn opt_where_clause(p: &mut Parser) {\n     if !p.at(WHERE_KW) {\n         return;\n     }"}, {"sha": "2088a38e30405ec903f3be8aaa8025b9b34ac2d8", "filename": "crates/libsyntax2/src/grammar/types.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a66c94af1bad3c2dcfd8dd4c07494d0cf6cc8b1b/crates%2Flibsyntax2%2Fsrc%2Fgrammar%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a66c94af1bad3c2dcfd8dd4c07494d0cf6cc8b1b/crates%2Flibsyntax2%2Fsrc%2Fgrammar%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibsyntax2%2Fsrc%2Fgrammar%2Ftypes.rs?ref=a66c94af1bad3c2dcfd8dd4c07494d0cf6cc8b1b", "patch": "@@ -174,7 +174,7 @@ fn fn_pointer_type(p: &mut Parser) {\n     }\n     // test fn_pointer_type_with_ret\n     // type F = fn() -> ();\n-    fn_ret_type(p);\n+    opt_fn_ret_type(p);\n     m.complete(p, FN_POINTER_TYPE);\n }\n \n@@ -184,7 +184,7 @@ fn for_type(p: &mut Parser) {\n     assert!(p.at(FOR_KW));\n     let m = p.start();\n     p.bump();\n-    type_params::type_param_list(p);\n+    type_params::opt_type_param_list(p);\n     type_(p);\n     m.complete(p, FOR_TYPE);\n }"}]}