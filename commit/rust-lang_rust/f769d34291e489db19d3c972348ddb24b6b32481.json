{"sha": "f769d34291e489db19d3c972348ddb24b6b32481", "node_id": "C_kwDOAAsO6NoAKGY3NjlkMzQyOTFlNDg5ZGIxOWQzYzk3MjM0OGRkYjI0YjZiMzI0ODE", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-01-09T18:14:28Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-01-09T18:14:28Z"}, "message": "Assert defining anchor is set in take_opaque_types", "tree": {"sha": "c045abb9f0ed3f95fc6baaed9172acf36310b94d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c045abb9f0ed3f95fc6baaed9172acf36310b94d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f769d34291e489db19d3c972348ddb24b6b32481", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f769d34291e489db19d3c972348ddb24b6b32481", "html_url": "https://github.com/rust-lang/rust/commit/f769d34291e489db19d3c972348ddb24b6b32481", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f769d34291e489db19d3c972348ddb24b6b32481/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5132e13f137ee343a7a64649fa3795560f69216b", "url": "https://api.github.com/repos/rust-lang/rust/commits/5132e13f137ee343a7a64649fa3795560f69216b", "html_url": "https://github.com/rust-lang/rust/commit/5132e13f137ee343a7a64649fa3795560f69216b"}], "stats": {"total": 32, "additions": 13, "deletions": 19}, "files": [{"sha": "4fe14c7af2faaa84fef3d08f130c1ee0a43f33e6", "filename": "compiler/rustc_borrowck/src/region_infer/opaque_types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f769d34291e489db19d3c972348ddb24b6b32481/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fopaque_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f769d34291e489db19d3c972348ddb24b6b32481/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fopaque_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fopaque_types.rs?ref=f769d34291e489db19d3c972348ddb24b6b32481", "patch": "@@ -318,7 +318,7 @@ impl<'tcx> InferCtxtExt<'tcx> for InferCtxt<'tcx> {\n \n         // This is still required for many(half of the tests in ui/type-alias-impl-trait)\n         // tests to pass\n-        let _ = infcx.inner.borrow_mut().opaque_type_storage.take_opaque_types();\n+        let _ = infcx.take_opaque_types();\n \n         if errors.is_empty() {\n             definition_ty"}, {"sha": "d9c1986456e89cdff8842655f8180e9c30c5d77e", "filename": "compiler/rustc_borrowck/src/type_check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f769d34291e489db19d3c972348ddb24b6b32481/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f769d34291e489db19d3c972348ddb24b6b32481/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs?ref=f769d34291e489db19d3c972348ddb24b6b32481", "patch": "@@ -208,7 +208,7 @@ pub(crate) fn type_check<'mir, 'tcx>(\n     );\n \n     translate_outlives_facts(&mut checker);\n-    let opaque_type_values = infcx.inner.borrow_mut().opaque_type_storage.take_opaque_types();\n+    let opaque_type_values = infcx.take_opaque_types();\n \n     let opaque_type_values = opaque_type_values\n         .into_iter()"}, {"sha": "f5f3d5de6b5a2f15088c28e0399ac5a3ca324d8e", "filename": "compiler/rustc_const_eval/src/util/compare_types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f769d34291e489db19d3c972348ddb24b6b32481/compiler%2Frustc_const_eval%2Fsrc%2Futil%2Fcompare_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f769d34291e489db19d3c972348ddb24b6b32481/compiler%2Frustc_const_eval%2Fsrc%2Futil%2Fcompare_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Futil%2Fcompare_types.rs?ref=f769d34291e489db19d3c972348ddb24b6b32481", "patch": "@@ -58,6 +58,6 @@ pub fn is_subtype<'tcx>(\n     // even if they're constrained in our current function.\n     //\n     // It seems very unlikely that this hides any bugs.\n-    let _ = infcx.inner.borrow_mut().opaque_type_storage.take_opaque_types();\n+    let _ = infcx.take_opaque_types();\n     errors.is_empty()\n }"}, {"sha": "13b3d53ca368e4a1eb1367642ca7c355e162bb7c", "filename": "compiler/rustc_hir_analysis/src/check/check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f769d34291e489db19d3c972348ddb24b6b32481/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f769d34291e489db19d3c972348ddb24b6b32481/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs?ref=f769d34291e489db19d3c972348ddb24b6b32481", "patch": "@@ -475,7 +475,7 @@ fn check_opaque_meets_bounds<'tcx>(\n         }\n     }\n     // Clean up after ourselves\n-    let _ = infcx.inner.borrow_mut().opaque_type_storage.take_opaque_types();\n+    let _ = infcx.take_opaque_types();\n }\n \n fn is_enum_of_nonnullable_ptr<'tcx>("}, {"sha": "8c24b6006444a8dc26d21d57b009768b05a0ad82", "filename": "compiler/rustc_hir_typeck/src/writeback.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f769d34291e489db19d3c972348ddb24b6b32481/compiler%2Frustc_hir_typeck%2Fsrc%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f769d34291e489db19d3c972348ddb24b6b32481/compiler%2Frustc_hir_typeck%2Fsrc%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fwriteback.rs?ref=f769d34291e489db19d3c972348ddb24b6b32481", "patch": "@@ -534,8 +534,7 @@ impl<'cx, 'tcx> WritebackCx<'cx, 'tcx> {\n \n     #[instrument(skip(self), level = \"debug\")]\n     fn visit_opaque_types(&mut self) {\n-        let opaque_types =\n-            self.fcx.infcx.inner.borrow_mut().opaque_type_storage.take_opaque_types();\n+        let opaque_types = self.fcx.infcx.take_opaque_types();\n         for (opaque_type_key, decl) in opaque_types {\n             let hidden_type = self.resolve(decl.hidden_type, &decl.hidden_type.span);\n             let opaque_type_key = self.resolve(opaque_type_key, &decl.hidden_type.span);"}, {"sha": "d85af830de86e771b7c4629bac006c8127a88ece", "filename": "compiler/rustc_infer/src/infer/canonical/query_response.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f769d34291e489db19d3c972348ddb24b6b32481/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fquery_response.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f769d34291e489db19d3c972348ddb24b6b32481/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fquery_response.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fquery_response.rs?ref=f769d34291e489db19d3c972348ddb24b6b32481", "patch": "@@ -156,10 +156,7 @@ impl<'tcx> InferCtxt<'tcx> {\n     /// As the new solver does canonicalization slightly differently, this is also used there\n     /// for now. This should hopefully change fairly soon.\n     pub fn take_opaque_types_for_query_response(&self) -> Vec<(Ty<'tcx>, Ty<'tcx>)> {\n-        self.inner\n-            .borrow_mut()\n-            .opaque_type_storage\n-            .take_opaque_types()\n+        std::mem::take(&mut self.inner.borrow_mut().opaque_type_storage.opaque_types)\n             .into_iter()\n             .map(|(k, v)| (self.tcx.mk_opaque(k.def_id.to_def_id(), k.substs), v.hidden_type.ty))\n             .collect()"}, {"sha": "192addb59d924b7a13549e262efbb36c7da1c433", "filename": "compiler/rustc_infer/src/infer/mod.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f769d34291e489db19d3c972348ddb24b6b32481/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f769d34291e489db19d3c972348ddb24b6b32481/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs?ref=f769d34291e489db19d3c972348ddb24b6b32481", "patch": "@@ -1338,6 +1338,12 @@ impl<'tcx> InferCtxt<'tcx> {\n         var_infos\n     }\n \n+    #[instrument(level = \"debug\", skip(self), ret)]\n+    pub fn take_opaque_types(&self) -> opaque_types::OpaqueTypeMap<'tcx> {\n+        debug_assert_ne!(self.defining_use_anchor, DefiningAnchor::Error);\n+        std::mem::take(&mut self.inner.borrow_mut().opaque_type_storage.opaque_types)\n+    }\n+\n     pub fn ty_to_string(&self, t: Ty<'tcx>) -> String {\n         self.resolve_vars_if_possible(t).to_string()\n     }"}, {"sha": "ae4b85c8799ef130b252ffe50a210834c6bcfd58", "filename": "compiler/rustc_infer/src/infer/opaque_types/table.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f769d34291e489db19d3c972348ddb24b6b32481/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types%2Ftable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f769d34291e489db19d3c972348ddb24b6b32481/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types%2Ftable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types%2Ftable.rs?ref=f769d34291e489db19d3c972348ddb24b6b32481", "patch": "@@ -29,11 +29,6 @@ impl<'tcx> OpaqueTypeStorage<'tcx> {\n         }\n     }\n \n-    #[instrument(level = \"debug\", ret)]\n-    pub fn take_opaque_types(&mut self) -> OpaqueTypeMap<'tcx> {\n-        std::mem::take(&mut self.opaque_types)\n-    }\n-\n     #[inline]\n     pub(crate) fn with_log<'a>(\n         &'a mut self,"}, {"sha": "58d83d57d430420ad059bb02a763275343eb0d48", "filename": "compiler/rustc_trait_selection/src/traits/mod.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f769d34291e489db19d3c972348ddb24b6b32481/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f769d34291e489db19d3c972348ddb24b6b32481/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs?ref=f769d34291e489db19d3c972348ddb24b6b32481", "patch": "@@ -450,9 +450,6 @@ pub fn impossible_predicates<'tcx>(\n     }\n     let errors = ocx.select_all_or_error();\n \n-    // Clean up after ourselves\n-    let _ = infcx.inner.borrow_mut().opaque_type_storage.take_opaque_types();\n-\n     let result = !errors.is_empty();\n     debug!(\"impossible_predicates = {:?}\", result);\n     result"}, {"sha": "f127ef8343f91e5a262beed9bd805e6a582a237b", "filename": "compiler/rustc_traits/src/codegen.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f769d34291e489db19d3c972348ddb24b6b32481/compiler%2Frustc_traits%2Fsrc%2Fcodegen.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f769d34291e489db19d3c972348ddb24b6b32481/compiler%2Frustc_traits%2Fsrc%2Fcodegen.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fcodegen.rs?ref=f769d34291e489db19d3c972348ddb24b6b32481", "patch": "@@ -82,7 +82,7 @@ pub fn codegen_select_candidate<'tcx>(\n     // Opaque types may have gotten their hidden types constrained, but we can ignore them safely\n     // as they will get constrained elsewhere, too.\n     // (ouz-a) This is required for `type-alias-impl-trait/assoc-projection-ice.rs` to pass\n-    let _ = infcx.inner.borrow_mut().opaque_type_storage.take_opaque_types();\n+    let _ = infcx.take_opaque_types();\n \n     Ok(&*tcx.arena.alloc(impl_source))\n }"}]}