{"sha": "aed8ef5a4d81bb66917ca31a589d5922c9bcf065", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFlZDhlZjVhNGQ4MWJiNjY5MTdjYTMxYTU4OWQ1OTIyYzliY2YwNjU=", "commit": {"author": {"name": "Rich Kadel", "email": "richkadel@google.com", "date": "2021-05-12T03:56:23Z"}, "committer": {"name": "Rich Kadel", "email": "richkadel@google.com", "date": "2021-05-13T03:27:07Z"}, "message": "`coverageinfo` query needs to use the same MIR as codegen\n\nI ran into an error trying to fix dead block coverage and realized the\n`coverageinfo` query is getting a different MIR compared to the\ncodegenned MIR, which can sometimes be a problem during mapgen.\n\nI changed that query to use the `InstandeDef` (which includes the\ngeneric parameter substitutions, prosibly specific to const params)\ninstead of the `DefId` (without unknown/default const substitutions).", "tree": {"sha": "5c31d374aa6e077cd28c98f23fd8a7a29baa19ca", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5c31d374aa6e077cd28c98f23fd8a7a29baa19ca"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aed8ef5a4d81bb66917ca31a589d5922c9bcf065", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aed8ef5a4d81bb66917ca31a589d5922c9bcf065", "html_url": "https://github.com/rust-lang/rust/commit/aed8ef5a4d81bb66917ca31a589d5922c9bcf065", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aed8ef5a4d81bb66917ca31a589d5922c9bcf065/comments", "author": {"login": "richkadel", "id": 3827298, "node_id": "MDQ6VXNlcjM4MjcyOTg=", "avatar_url": "https://avatars.githubusercontent.com/u/3827298?v=4", "gravatar_id": "", "url": "https://api.github.com/users/richkadel", "html_url": "https://github.com/richkadel", "followers_url": "https://api.github.com/users/richkadel/followers", "following_url": "https://api.github.com/users/richkadel/following{/other_user}", "gists_url": "https://api.github.com/users/richkadel/gists{/gist_id}", "starred_url": "https://api.github.com/users/richkadel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/richkadel/subscriptions", "organizations_url": "https://api.github.com/users/richkadel/orgs", "repos_url": "https://api.github.com/users/richkadel/repos", "events_url": "https://api.github.com/users/richkadel/events{/privacy}", "received_events_url": "https://api.github.com/users/richkadel/received_events", "type": "User", "site_admin": false}, "committer": {"login": "richkadel", "id": 3827298, "node_id": "MDQ6VXNlcjM4MjcyOTg=", "avatar_url": "https://avatars.githubusercontent.com/u/3827298?v=4", "gravatar_id": "", "url": "https://api.github.com/users/richkadel", "html_url": "https://github.com/richkadel", "followers_url": "https://api.github.com/users/richkadel/followers", "following_url": "https://api.github.com/users/richkadel/following{/other_user}", "gists_url": "https://api.github.com/users/richkadel/gists{/gist_id}", "starred_url": "https://api.github.com/users/richkadel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/richkadel/subscriptions", "organizations_url": "https://api.github.com/users/richkadel/orgs", "repos_url": "https://api.github.com/users/richkadel/repos", "events_url": "https://api.github.com/users/richkadel/events{/privacy}", "received_events_url": "https://api.github.com/users/richkadel/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "31f523ff94247fd030473979782dda90923da1ef", "url": "https://api.github.com/repos/rust-lang/rust/commits/31f523ff94247fd030473979782dda90923da1ef", "html_url": "https://github.com/rust-lang/rust/commit/31f523ff94247fd030473979782dda90923da1ef"}], "stats": {"total": 27, "additions": 8, "deletions": 19}, "files": [{"sha": "08442c588f87902ba3dede3d04cd3f7cf87f8090", "filename": "compiler/rustc_codegen_ssa/src/coverageinfo/map.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aed8ef5a4d81bb66917ca31a589d5922c9bcf065/compiler%2Frustc_codegen_ssa%2Fsrc%2Fcoverageinfo%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aed8ef5a4d81bb66917ca31a589d5922c9bcf065/compiler%2Frustc_codegen_ssa%2Fsrc%2Fcoverageinfo%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fcoverageinfo%2Fmap.rs?ref=aed8ef5a4d81bb66917ca31a589d5922c9bcf065", "patch": "@@ -49,9 +49,9 @@ impl<'tcx> FunctionCoverage<'tcx> {\n     }\n \n     fn create(tcx: TyCtxt<'tcx>, instance: Instance<'tcx>, is_used: bool) -> Self {\n-        let coverageinfo = tcx.coverageinfo(instance.def_id());\n+        let coverageinfo = tcx.coverageinfo(instance.def);\n         debug!(\n-            \"FunctionCoverage::new(instance={:?}) has coverageinfo={:?}. is_used={}\",\n+            \"FunctionCoverage::create(instance={:?}) has coverageinfo={:?}. is_used={}\",\n             instance, coverageinfo, is_used\n         );\n         Self {"}, {"sha": "a283bf1de763a9da378109d255792eeef0d2f8ff", "filename": "compiler/rustc_codegen_ssa/src/mir/coverageinfo.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aed8ef5a4d81bb66917ca31a589d5922c9bcf065/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fcoverageinfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aed8ef5a4d81bb66917ca31a589d5922c9bcf065/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fcoverageinfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fcoverageinfo.rs?ref=aed8ef5a4d81bb66917ca31a589d5922c9bcf065", "patch": "@@ -31,7 +31,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                         bx.add_coverage_counter(instance, id, code_region);\n                     }\n \n-                    let coverageinfo = bx.tcx().coverageinfo(instance.def_id());\n+                    let coverageinfo = bx.tcx().coverageinfo(instance.def);\n \n                     let fn_name = bx.get_pgo_func_name_var(instance);\n                     let hash = bx.const_u64(function_source_hash);"}, {"sha": "e0dd8d5806eee28965dc79dddda3c9ff406fdfa4", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/aed8ef5a4d81bb66917ca31a589d5922c9bcf065/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aed8ef5a4d81bb66917ca31a589d5922c9bcf065/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=aed8ef5a4d81bb66917ca31a589d5922c9bcf065", "patch": "@@ -335,10 +335,9 @@ rustc_queries! {\n \n     /// Returns coverage summary info for a function, after executing the `InstrumentCoverage`\n     /// MIR pass (assuming the -Zinstrument-coverage option is enabled).\n-    query coverageinfo(key: DefId) -> mir::CoverageInfo {\n-        desc { |tcx| \"retrieving coverage info from MIR for `{}`\", tcx.def_path_str(key) }\n+    query coverageinfo(key: ty::InstanceDef<'tcx>) -> mir::CoverageInfo {\n+        desc { |tcx| \"retrieving coverage info from MIR for `{}`\", tcx.def_path_str(key.def_id()) }\n         storage(ArenaCacheSelector<'tcx>)\n-        cache_on_disk_if { key.is_local() }\n     }\n \n     /// Returns the name of the file that contains the function body, if instrumented for coverage."}, {"sha": "71c244fdd4a3ae5e991340a2b67251eca40c8ca9", "filename": "compiler/rustc_mir/src/transform/coverage/mod.rs", "status": "modified", "additions": 1, "deletions": 11, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/aed8ef5a4d81bb66917ca31a589d5922c9bcf065/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcoverage%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aed8ef5a4d81bb66917ca31a589d5922c9bcf065/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcoverage%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcoverage%2Fmod.rs?ref=aed8ef5a4d81bb66917ca31a589d5922c9bcf065", "patch": "@@ -156,16 +156,6 @@ impl<'a, 'tcx> Instrumentor<'a, 'tcx> {\n         let fn_sig_span = self.fn_sig_span;\n         let body_span = self.body_span;\n \n-<<<<<<< HEAD\n-        debug!(\n-            \"instrumenting {:?}, fn sig span: {}, body span: {}\",\n-            def_id,\n-            source_map.span_to_diagnostic_string(fn_sig_span),\n-            source_map.span_to_diagnostic_string(body_span)\n-        );\n-\n-=======\n->>>>>>> 476104d0f54 (Simplified body_span and filtered span code)\n         let mut graphviz_data = debug::GraphvizData::new();\n         let mut debug_used_expressions = debug::UsedExpressions::new();\n \n@@ -572,7 +562,7 @@ fn get_body_span<'tcx>(\n             if expn_data.is_root() {\n                 break;\n             }\n-            if let ExpnKind::Macro{..} = expn_data.kind {\n+            if let ExpnKind::Macro { .. } = expn_data.kind {\n                 body_span = expn_data.call_site;\n             } else {\n                 break;"}, {"sha": "760f16eae6b1f85be18bea6412b0f260c77b4ed8", "filename": "compiler/rustc_mir/src/transform/coverage/query.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aed8ef5a4d81bb66917ca31a589d5922c9bcf065/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcoverage%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aed8ef5a4d81bb66917ca31a589d5922c9bcf065/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcoverage%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcoverage%2Fquery.rs?ref=aed8ef5a4d81bb66917ca31a589d5922c9bcf065", "patch": "@@ -120,8 +120,8 @@ impl CoverageVisitor {\n     }\n }\n \n-fn coverageinfo<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> CoverageInfo {\n-    let mir_body = mir_body(tcx, def_id);\n+fn coverageinfo<'tcx>(tcx: TyCtxt<'tcx>, instance_def: ty::InstanceDef<'tcx>) -> CoverageInfo {\n+    let mir_body = tcx.instance_mir(instance_def);\n \n     let mut coverage_visitor = CoverageVisitor {\n         // num_counters always has at least the `ZERO` counter."}]}