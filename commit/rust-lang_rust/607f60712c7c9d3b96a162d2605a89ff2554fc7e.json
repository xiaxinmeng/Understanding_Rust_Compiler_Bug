{"sha": "607f60712c7c9d3b96a162d2605a89ff2554fc7e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYwN2Y2MDcxMmM3YzlkM2I5NmExNjJkMjYwNWE4OWZmMjU1NGZjN2U=", "commit": {"author": {"name": "Flavio Percoco", "email": "flaper87@gmail.com", "date": "2014-12-23T09:57:44Z"}, "committer": {"name": "Flavio Percoco", "email": "flaper87@gmail.com", "date": "2014-12-26T16:26:33Z"}, "message": "Keep track of the whole error chain", "tree": {"sha": "36b9a252c1815eccdc4f9057b0e93a2eb561b392", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/36b9a252c1815eccdc4f9057b0e93a2eb561b392"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/607f60712c7c9d3b96a162d2605a89ff2554fc7e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/607f60712c7c9d3b96a162d2605a89ff2554fc7e", "html_url": "https://github.com/rust-lang/rust/commit/607f60712c7c9d3b96a162d2605a89ff2554fc7e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/607f60712c7c9d3b96a162d2605a89ff2554fc7e/comments", "author": {"login": "flaper87", "id": 13816, "node_id": "MDQ6VXNlcjEzODE2", "avatar_url": "https://avatars.githubusercontent.com/u/13816?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flaper87", "html_url": "https://github.com/flaper87", "followers_url": "https://api.github.com/users/flaper87/followers", "following_url": "https://api.github.com/users/flaper87/following{/other_user}", "gists_url": "https://api.github.com/users/flaper87/gists{/gist_id}", "starred_url": "https://api.github.com/users/flaper87/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flaper87/subscriptions", "organizations_url": "https://api.github.com/users/flaper87/orgs", "repos_url": "https://api.github.com/users/flaper87/repos", "events_url": "https://api.github.com/users/flaper87/events{/privacy}", "received_events_url": "https://api.github.com/users/flaper87/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flaper87", "id": 13816, "node_id": "MDQ6VXNlcjEzODE2", "avatar_url": "https://avatars.githubusercontent.com/u/13816?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flaper87", "html_url": "https://github.com/flaper87", "followers_url": "https://api.github.com/users/flaper87/followers", "following_url": "https://api.github.com/users/flaper87/following{/other_user}", "gists_url": "https://api.github.com/users/flaper87/gists{/gist_id}", "starred_url": "https://api.github.com/users/flaper87/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flaper87/subscriptions", "organizations_url": "https://api.github.com/users/flaper87/orgs", "repos_url": "https://api.github.com/users/flaper87/repos", "events_url": "https://api.github.com/users/flaper87/events{/privacy}", "received_events_url": "https://api.github.com/users/flaper87/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "88186934960dae4f616df815eb25205c2713f503", "url": "https://api.github.com/repos/rust-lang/rust/commits/88186934960dae4f616df815eb25205c2713f503", "html_url": "https://github.com/rust-lang/rust/commit/88186934960dae4f616df815eb25205c2713f503"}], "stats": {"total": 114, "additions": 66, "deletions": 48}, "files": [{"sha": "d09287dbf9279e39e010f5c60527a724715d600e", "filename": "src/librustc/middle/traits/select.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/607f60712c7c9d3b96a162d2605a89ff2554fc7e/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/607f60712c7c9d3b96a162d2605a89ff2554fc7e/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs?ref=607f60712c7c9d3b96a162d2605a89ff2554fc7e", "patch": "@@ -1928,6 +1928,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         }\n     }\n \n+    #[allow(unused_comparisons)]\n     fn derived_cause(&self,\n                      obligation: &TraitObligation<'tcx>,\n                      variant: fn(Rc<ty::Binder<ty::TraitRef<'tcx>>>,\n@@ -1945,7 +1946,10 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n          * reporting.\n          */\n \n-        if obligation.recursion_depth == 0 {\n+        // NOTE(flaper87): As of now, it keeps track of the whole error\n+        // chain. Ideally, we should have a way to configure this either\n+        // by using -Z verbose or just a CLI argument.\n+        if obligation.recursion_depth >= 0 {\n             ObligationCause::new(obligation.cause.span,\n                                  obligation.trait_ref.def_id().node,\n                                  variant(obligation.trait_ref.clone(),"}, {"sha": "cf29bb048d6445b4f98bdc67b80aee7d9cac9094", "filename": "src/libsyntax/ext/deriving/bounds.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/607f60712c7c9d3b96a162d2605a89ff2554fc7e/src%2Flibsyntax%2Fext%2Fderiving%2Fbounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/607f60712c7c9d3b96a162d2605a89ff2554fc7e/src%2Flibsyntax%2Fext%2Fderiving%2Fbounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fbounds.rs?ref=607f60712c7c9d3b96a162d2605a89ff2554fc7e", "patch": "@@ -26,8 +26,11 @@ pub fn expand_deriving_bound<F>(cx: &mut ExtCtxt,\n         MetaWord(ref tname) => {\n             match tname.get() {\n                 \"Copy\" => \"Copy\",\n-                \"Send\" => \"Send\",\n-                \"Sync\" => \"Sync\",\n+                \"Send\" | \"Sync\" => {\n+                    return cx.span_err(span,\n+                                       format!(\"{} is an unsafe trait and it \\\n+                                               should be implemented explicitly\", *tname)[])\n+                }\n                 ref tname => {\n                     cx.span_bug(span,\n                                 format!(\"expected built-in trait name but \\"}, {"sha": "d61ad98ee1e53f6ad8206c3028fc4d14c4d6ff6c", "filename": "src/test/compile-fail/deriving-bounds.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/607f60712c7c9d3b96a162d2605a89ff2554fc7e/src%2Ftest%2Fcompile-fail%2Fderiving-bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/607f60712c7c9d3b96a162d2605a89ff2554fc7e/src%2Ftest%2Fcompile-fail%2Fderiving-bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-bounds.rs?ref=607f60712c7c9d3b96a162d2605a89ff2554fc7e", "patch": "@@ -8,8 +8,12 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[deriving(Sync(Bad),Send,Copy)]\n+#[deriving(Copy(Bad))]\n //~^ ERROR unexpected value in deriving, expected a trait\n struct Test;\n \n+#[deriving(Sync)]\n+//~^ ERROR Sync is an unsafe trait and it should be implemented explicitly\n+struct Test1;\n+\n pub fn main() {}"}, {"sha": "63a40e2374b15cbee042b0f1123a6e9e2c5d6771", "filename": "src/test/compile-fail/issue-17718-static-sync.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/607f60712c7c9d3b96a162d2605a89ff2554fc7e/src%2Ftest%2Fcompile-fail%2Fissue-17718-static-sync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/607f60712c7c9d3b96a162d2605a89ff2554fc7e/src%2Ftest%2Fcompile-fail%2Fissue-17718-static-sync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-17718-static-sync.rs?ref=607f60712c7c9d3b96a162d2605a89ff2554fc7e", "patch": "@@ -14,6 +14,6 @@ struct Foo { marker: marker::NoSync }\n \n static FOO: uint = 3;\n static BAR: Foo = Foo { marker: marker::NoSync };\n-//~^ ERROR: shared static items must have a type which implements Sync\n+//~^ ERROR: the trait `core::kinds::Sync` is not implemented\n \n fn main() {}"}, {"sha": "a8a699d62d5eed33c6d8dccab6ba671b0caefe44", "filename": "src/test/compile-fail/issue-7013.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/607f60712c7c9d3b96a162d2605a89ff2554fc7e/src%2Ftest%2Fcompile-fail%2Fissue-7013.rs", "raw_url": "https://github.com/rust-lang/rust/raw/607f60712c7c9d3b96a162d2605a89ff2554fc7e/src%2Ftest%2Fcompile-fail%2Fissue-7013.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-7013.rs?ref=607f60712c7c9d3b96a162d2605a89ff2554fc7e", "patch": "@@ -33,4 +33,5 @@ struct A {\n fn main() {\n     let a = A {v: box B{v: None} as Box<Foo+Send>};\n     //~^ ERROR the trait `core::kinds::Send` is not implemented\n+    //~^^ ERROR the trait `core::kinds::Send` is not implemented\n }"}, {"sha": "2646edd7684e6fe5c5a5ecdc72e3f4f36174318e", "filename": "src/test/compile-fail/issue-7364.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/607f60712c7c9d3b96a162d2605a89ff2554fc7e/src%2Ftest%2Fcompile-fail%2Fissue-7364.rs", "raw_url": "https://github.com/rust-lang/rust/raw/607f60712c7c9d3b96a162d2605a89ff2554fc7e/src%2Ftest%2Fcompile-fail%2Fissue-7364.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-7364.rs?ref=607f60712c7c9d3b96a162d2605a89ff2554fc7e", "patch": "@@ -14,6 +14,8 @@ use std::cell::RefCell;\n // Regresion test for issue 7364\n static boxed: Box<RefCell<int>> = box RefCell::new(0);\n //~^ ERROR statics are not allowed to have custom pointers\n-//~^^ ERROR: shared static items must have a type which implements Sync\n+//~^^ ERROR: the trait `core::kinds::Sync` is not implemented for the type\n+//~^^^ ERROR: the trait `core::kinds::Sync` is not implemented for the type\n+//~^^^^ ERROR: the trait `core::kinds::Sync` is not implemented for the type\n \n fn main() { }"}, {"sha": "803da617abdc08f9c91aadc1b65a69ee0208ccb9", "filename": "src/test/compile-fail/kindck-destructor-owned.rs", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/607f60712c7c9d3b96a162d2605a89ff2554fc7e/src%2Ftest%2Fcompile-fail%2Fkindck-destructor-owned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/607f60712c7c9d3b96a162d2605a89ff2554fc7e/src%2Ftest%2Fcompile-fail%2Fkindck-destructor-owned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fkindck-destructor-owned.rs?ref=607f60712c7c9d3b96a162d2605a89ff2554fc7e", "patch": "@@ -9,19 +9,6 @@\n // except according to those terms.\n \n \n-use std::rc::Rc;\n-\n-struct Foo {\n-    f: Rc<int>,\n-}\n-\n-impl Drop for Foo {\n-//~^ ERROR the trait `core::kinds::Send` is not implemented\n-//~^^ NOTE cannot implement a destructor on a structure or enumeration that does not satisfy Send\n-    fn drop(&mut self) {\n-    }\n-}\n-\n struct Bar<'a> {\n     f: &'a int,\n }"}, {"sha": "fdd8584a8bb06b19db9f2d2ae833116536c1e4e4", "filename": "src/test/compile-fail/kindck-nonsendable-1.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/607f60712c7c9d3b96a162d2605a89ff2554fc7e/src%2Ftest%2Fcompile-fail%2Fkindck-nonsendable-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/607f60712c7c9d3b96a162d2605a89ff2554fc7e/src%2Ftest%2Fcompile-fail%2Fkindck-nonsendable-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fkindck-nonsendable-1.rs?ref=607f60712c7c9d3b96a162d2605a89ff2554fc7e", "patch": "@@ -17,6 +17,8 @@ fn bar<F:FnOnce() + Send>(_: F) { }\n \n fn main() {\n     let x = Rc::new(3u);\n-    bar(move|| foo(x)); //~ ERROR `core::kinds::Send` is not implemented\n+    bar(move|| foo(x));\n+    //~^ ERROR `core::kinds::Send` is not implemented\n+    //~^^ ERROR `core::kinds::Send` is not implemented\n }\n "}, {"sha": "4e1641025d5aec0fe480d219e5b6136324c36618", "filename": "src/test/compile-fail/kindck-send-unsafe.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/607f60712c7c9d3b96a162d2605a89ff2554fc7e/src%2Ftest%2Fcompile-fail%2Fkindck-send-unsafe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/607f60712c7c9d3b96a162d2605a89ff2554fc7e/src%2Ftest%2Fcompile-fail%2Fkindck-send-unsafe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fkindck-send-unsafe.rs?ref=607f60712c7c9d3b96a162d2605a89ff2554fc7e", "patch": "@@ -8,14 +8,13 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+extern crate core;\n+\n fn assert_send<T:Send>() { }\n \n-// unsafe ptrs are ok unless they point at unsendable things\n-fn test70() {\n-    assert_send::<*mut int>();\n-}\n fn test71<'a>() {\n-    assert_send::<*mut &'a int>(); //~ ERROR declared lifetime bound not satisfied\n+    assert_send::<*mut &'a int>();\n+    //~^ ERROR the trait `core::kinds::Send` is not implemented for the type\n }\n \n fn main() {"}, {"sha": "4b058f6fdb343cef21cd68dc531f15edd9352259", "filename": "src/test/compile-fail/mut-not-freeze.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/607f60712c7c9d3b96a162d2605a89ff2554fc7e/src%2Ftest%2Fcompile-fail%2Fmut-not-freeze.rs", "raw_url": "https://github.com/rust-lang/rust/raw/607f60712c7c9d3b96a162d2605a89ff2554fc7e/src%2Ftest%2Fcompile-fail%2Fmut-not-freeze.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmut-not-freeze.rs?ref=607f60712c7c9d3b96a162d2605a89ff2554fc7e", "patch": "@@ -14,5 +14,8 @@ fn f<T: Sync>(_: T) {}\n \n fn main() {\n     let x = RefCell::new(0i);\n-    f(x); //~ ERROR `core::kinds::Sync` is not implemented\n+    f(x);\n+    //~^ ERROR `core::kinds::Sync` is not implemented\n+    //~^^ ERROR `core::kinds::Sync` is not implemented\n+    //~^^^ ERROR `core::kinds::Sync` is not implemented\n }"}, {"sha": "48747c7ce1da7f994c2fb957f3f154575f8e06cb", "filename": "src/test/compile-fail/no-send-res-ports.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/607f60712c7c9d3b96a162d2605a89ff2554fc7e/src%2Ftest%2Fcompile-fail%2Fno-send-res-ports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/607f60712c7c9d3b96a162d2605a89ff2554fc7e/src%2Ftest%2Fcompile-fail%2Fno-send-res-ports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fno-send-res-ports.rs?ref=607f60712c7c9d3b96a162d2605a89ff2554fc7e", "patch": "@@ -37,6 +37,7 @@ fn main() {\n \n     task::spawn(move|| {\n         //~^ ERROR `core::kinds::Send` is not implemented\n+        //~^^ ERROR `core::kinds::Send` is not implemented\n         let y = x;\n         println!(\"{}\", y);\n     });"}, {"sha": "004921b1db0d2ab4b82045208be02aafef8b62a1", "filename": "src/test/compile-fail/no_send-rc.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/607f60712c7c9d3b96a162d2605a89ff2554fc7e/src%2Ftest%2Fcompile-fail%2Fno_send-rc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/607f60712c7c9d3b96a162d2605a89ff2554fc7e/src%2Ftest%2Fcompile-fail%2Fno_send-rc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fno_send-rc.rs?ref=607f60712c7c9d3b96a162d2605a89ff2554fc7e", "patch": "@@ -16,4 +16,5 @@ fn main() {\n     let x = Rc::new(5i);\n     bar(x);\n     //~^ ERROR `core::kinds::Send` is not implemented\n+    //~^^ ERROR `core::kinds::Send` is not implemented\n }"}, {"sha": "ac3b456def526cbfe8f25d6dc40e3cfb39acbd30", "filename": "src/test/compile-fail/no_share-rc.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/607f60712c7c9d3b96a162d2605a89ff2554fc7e/src%2Ftest%2Fcompile-fail%2Fno_share-rc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/607f60712c7c9d3b96a162d2605a89ff2554fc7e/src%2Ftest%2Fcompile-fail%2Fno_share-rc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fno_share-rc.rs?ref=607f60712c7c9d3b96a162d2605a89ff2554fc7e", "patch": "@@ -17,4 +17,5 @@ fn main() {\n     let x = Rc::new(RefCell::new(5i));\n     bar(x);\n     //~^ ERROR the trait `core::kinds::Sync` is not implemented\n+    //~^^ ERROR the trait `core::kinds::Sync` is not implemented\n }"}, {"sha": "e15cb25295aac7defa8ec6fa8766911fedf96830", "filename": "src/test/compile-fail/regions-bounded-by-send.rs", "status": "modified", "additions": 9, "deletions": 11, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/607f60712c7c9d3b96a162d2605a89ff2554fc7e/src%2Ftest%2Fcompile-fail%2Fregions-bounded-by-send.rs", "raw_url": "https://github.com/rust-lang/rust/raw/607f60712c7c9d3b96a162d2605a89ff2554fc7e/src%2Ftest%2Fcompile-fail%2Fregions-bounded-by-send.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-bounded-by-send.rs?ref=607f60712c7c9d3b96a162d2605a89ff2554fc7e", "patch": "@@ -12,8 +12,11 @@\n // in this file all test region bound and lifetime violations that are\n // detected during type check.\n \n+extern crate core;\n+use core::ptr::Unique;\n+\n fn assert_send<T:Send>() { }\n-trait Dummy { }\n+trait Dummy:Send { }\n \n // lifetime pointers with 'static lifetime are ok\n \n@@ -58,7 +61,7 @@ fn box_with_region_not_ok<'a>() {\n \n fn object_with_random_bound_not_ok<'a>() {\n     assert_send::<&'a (Dummy+'a)>();\n-    //~^ ERROR not implemented\n+    //~^ ERROR reference has a longer lifetime\n }\n \n fn object_with_send_bound_not_ok<'a>() {\n@@ -73,17 +76,12 @@ fn closure_with_lifetime_not_ok<'a>() {\n \n // unsafe pointers are ok unless they point at unsendable things\n \n-fn unsafe_ok1<'a>(_: &'a int) {\n-    assert_send::<*const int>();\n-    assert_send::<*mut int>();\n-}\n+struct UniqueUnsafePtr(Unique<*const int>);\n \n-fn unsafe_ok2<'a>(_: &'a int) {\n-    assert_send::<*const &'a int>(); //~ ERROR declared lifetime bound not satisfied\n-}\n+unsafe impl Send for UniqueUnsafePtr {}\n \n-fn unsafe_ok3<'a>(_: &'a int) {\n-    assert_send::<*mut &'a int>(); //~ ERROR declared lifetime bound not satisfied\n+fn unsafe_ok1<'a>(_: &'a int) {\n+    assert_send::<UniqueUnsafePtr>();\n }\n \n fn main() {"}, {"sha": "d96599404deb840f13faaee2b10ea0f75fa727bb", "filename": "src/test/compile-fail/task-rng-isnt-sendable.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/607f60712c7c9d3b96a162d2605a89ff2554fc7e/src%2Ftest%2Fcompile-fail%2Ftask-rng-isnt-sendable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/607f60712c7c9d3b96a162d2605a89ff2554fc7e/src%2Ftest%2Fcompile-fail%2Ftask-rng-isnt-sendable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftask-rng-isnt-sendable.rs?ref=607f60712c7c9d3b96a162d2605a89ff2554fc7e", "patch": "@@ -17,4 +17,5 @@ fn test_send<S: Send>() {}\n pub fn main() {\n     test_send::<rand::TaskRng>();\n     //~^ ERROR `core::kinds::Send` is not implemented\n+    //~^^ ERROR `core::kinds::Send` is not implemented\n }"}, {"sha": "a7911eb791eb2338d836be4d377ebc6e1f6776a2", "filename": "src/test/compile-fail/typeck-unsafe-always-share.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/607f60712c7c9d3b96a162d2605a89ff2554fc7e/src%2Ftest%2Fcompile-fail%2Ftypeck-unsafe-always-share.rs", "raw_url": "https://github.com/rust-lang/rust/raw/607f60712c7c9d3b96a162d2605a89ff2554fc7e/src%2Ftest%2Fcompile-fail%2Ftypeck-unsafe-always-share.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftypeck-unsafe-always-share.rs?ref=607f60712c7c9d3b96a162d2605a89ff2554fc7e", "patch": "@@ -30,12 +30,15 @@ fn test<T: Sync>(s: T){\n fn main() {\n     let us = UnsafeCell::new(MySync{u: UnsafeCell::new(0i)});\n     test(us);\n+    //~^ ERROR `core::kinds::Sync` is not implemented\n \n     let uns = UnsafeCell::new(NoSync{m: marker::NoSync});\n     test(uns);\n+    //~^ ERROR `core::kinds::Sync` is not implemented\n \n     let ms = MySync{u: uns};\n     test(ms);\n+    //~^ ERROR `core::kinds::Sync` is not implemented\n \n     let ns = NoSync{m: marker::NoSync};\n     test(ns);"}, {"sha": "48d5028f4357d2111f1324f5e57a23e6df7fb40a", "filename": "src/test/compile-fail/unique-unique-kind.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/607f60712c7c9d3b96a162d2605a89ff2554fc7e/src%2Ftest%2Fcompile-fail%2Funique-unique-kind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/607f60712c7c9d3b96a162d2605a89ff2554fc7e/src%2Ftest%2Fcompile-fail%2Funique-unique-kind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funique-unique-kind.rs?ref=607f60712c7c9d3b96a162d2605a89ff2554fc7e", "patch": "@@ -16,5 +16,7 @@ fn f<T:Send>(_i: T) {\n \n fn main() {\n     let i = box Rc::new(100i);\n-    f(i); //~ ERROR `core::kinds::Send` is not implemented\n+    f(i);\n+    //~^ ERROR `core::kinds::Send` is not implemented\n+    //~^^ ERROR `core::kinds::Send` is not implemented\n }"}, {"sha": "cd5918e2f47ff5e5bb33527cf2171dbf4abf594b", "filename": "src/test/compile-fail/unsendable-class.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/607f60712c7c9d3b96a162d2605a89ff2554fc7e/src%2Ftest%2Fcompile-fail%2Funsendable-class.rs", "raw_url": "https://github.com/rust-lang/rust/raw/607f60712c7c9d3b96a162d2605a89ff2554fc7e/src%2Ftest%2Fcompile-fail%2Funsendable-class.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funsendable-class.rs?ref=607f60712c7c9d3b96a162d2605a89ff2554fc7e", "patch": "@@ -28,6 +28,8 @@ fn foo(i:int, j: Rc<String>) -> foo {\n \n fn main() {\n   let cat = \"kitty\".to_string();\n-  let (tx, _) = channel(); //~ ERROR `core::kinds::Send` is not implemented\n+  let (tx, _) = channel();\n+  //~^ ERROR `core::kinds::Send` is not implemented\n+  //~^^ ERROR `core::kinds::Send` is not implemented\n   tx.send(foo(42, Rc::new(cat)));\n }"}, {"sha": "0bf27cfbb2418381f714690c2552da0a5981fea2", "filename": "src/test/run-pass/deriving-bounds.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/607f60712c7c9d3b96a162d2605a89ff2554fc7e/src%2Ftest%2Frun-pass%2Fderiving-bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/607f60712c7c9d3b96a162d2605a89ff2554fc7e/src%2Ftest%2Frun-pass%2Fderiving-bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-bounds.rs?ref=607f60712c7c9d3b96a162d2605a89ff2554fc7e", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[deriving(Sync,Send,Copy)]\n+#[deriving(Copy)]\n struct Test;\n \n pub fn main() {}"}, {"sha": "0851f0e367bf85ce977ae5685d593e6d217a17da", "filename": "src/test/run-pass/issue-17718-static-unsafe-interior.rs", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/607f60712c7c9d3b96a162d2605a89ff2554fc7e/src%2Ftest%2Frun-pass%2Fissue-17718-static-unsafe-interior.rs", "raw_url": "https://github.com/rust-lang/rust/raw/607f60712c7c9d3b96a162d2605a89ff2554fc7e/src%2Ftest%2Frun-pass%2Fissue-17718-static-unsafe-interior.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-17718-static-unsafe-interior.rs?ref=607f60712c7c9d3b96a162d2605a89ff2554fc7e", "patch": "@@ -11,39 +11,43 @@\n use std::kinds::marker;\n use std::cell::UnsafeCell;\n \n+struct MyUnsafePack<T>(UnsafeCell<T>);\n+\n+unsafe impl<T: Send> Sync for MyUnsafePack<T> {}\n+\n struct MyUnsafe<T> {\n-    value: UnsafeCell<T>\n+    value: MyUnsafePack<T>\n }\n \n impl<T> MyUnsafe<T> {\n     fn forbidden(&self) {}\n }\n \n-impl<T: Send> Sync for MyUnsafe<T> {}\n+unsafe impl<T: Send> Sync for MyUnsafe<T> {}\n \n enum UnsafeEnum<T> {\n     VariantSafe,\n     VariantUnsafe(UnsafeCell<T>)\n }\n \n-impl<T: Send> Sync for UnsafeEnum<T> {}\n+unsafe impl<T: Send> Sync for UnsafeEnum<T> {}\n \n static STATIC1: UnsafeEnum<int> = UnsafeEnum::VariantSafe;\n \n-static STATIC2: UnsafeCell<int> = UnsafeCell { value: 1 };\n-const CONST: UnsafeCell<int> = UnsafeCell { value: 1 };\n+static STATIC2: MyUnsafePack<int> = MyUnsafePack(UnsafeCell { value: 1 });\n+const CONST: MyUnsafePack<int> = MyUnsafePack(UnsafeCell { value: 1 });\n static STATIC3: MyUnsafe<int> = MyUnsafe{value: CONST};\n \n-static STATIC4: &'static UnsafeCell<int> = &STATIC2;\n+static STATIC4: &'static MyUnsafePack<int> = &STATIC2;\n \n struct Wrap<T> {\n     value: T\n }\n \n unsafe impl<T: Send> Sync for Wrap<T> {}\n \n-static UNSAFE: UnsafeCell<int> = UnsafeCell{value: 1};\n-static WRAPPED_UNSAFE: Wrap<&'static UnsafeCell<int>> = Wrap { value: &UNSAFE };\n+static UNSAFE: MyUnsafePack<int> = MyUnsafePack(UnsafeCell{value: 2});\n+static WRAPPED_UNSAFE: Wrap<&'static MyUnsafePack<int>> = Wrap { value: &UNSAFE };\n \n fn main() {\n     let a = &STATIC1;"}]}