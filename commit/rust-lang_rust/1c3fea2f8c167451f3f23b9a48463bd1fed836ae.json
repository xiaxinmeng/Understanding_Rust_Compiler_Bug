{"sha": "1c3fea2f8c167451f3f23b9a48463bd1fed836ae", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFjM2ZlYTJmOGMxNjc0NTFmM2YyM2I5YTQ4NDYzYmQxZmVkODM2YWU=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2021-03-09T23:01:32Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-03-09T23:01:32Z"}, "message": "Rollup merge of #82849 - camsteffen:option-get-or-default, r=joshtriplett\n\nAdd Option::get_or_default\n\nTracking issue: #82901\n\nThe original issue is #55042, which was closed, but for an invalid reason (see discussion there). Opening this to reconsider (I hope that's okay). It seems like the only gap for `Option` being \"entry-like\".\n\nI ran into a need for this method where I had a `Vec<Option<MyData>>` and wanted to do `vec[n].get_or_default().my_data_method()`. Using an `Option` as an inner component of a data structure is probably where the need for this will normally arise.", "tree": {"sha": "200249d518c76d6a72b3eb344606ba7643b90320", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/200249d518c76d6a72b3eb344606ba7643b90320"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1c3fea2f8c167451f3f23b9a48463bd1fed836ae", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgR/5MCRBK7hj4Ov3rIwAAdHIIAHxec05wbkWaezvWhKOGTDjI\nCv4xtKG5fNQHhsuZ+l/jz0cuREgDTxthz72oFnA9CqiPNoW5EBwfBsNt9NbjRjmD\nybTQP7XPRMDY5Xok3sAEwGqueYIMG7jZqQ8doYXPWNUdvOnnUDNsOWJFN/hk19Kl\n14o2RuYfTn6GFauCqwkPlqOXlECpa/hagXtkT+u9olwrS/nZGO4u5Khe3vtkCtMl\n8Ug3XWfw8RLyMjIxQJmT8Ngu4IXp9hXxWc8HN6NNbC/6XD1ATUb7hQwczPBU1gE5\nDDDblmbiMZJRNhnTRDbZhdiKB+iHlaNzhZSuVOYY7Le/uXZ8Fi3Ishk6CumkjBI=\n=0Hdp\n-----END PGP SIGNATURE-----\n", "payload": "tree 200249d518c76d6a72b3eb344606ba7643b90320\nparent 48a393e10bb17a5f123d24bfddc9fbb034f0cc10\nparent 1cc8c4de6aa0549a3d7d1da23ba48d34d0efd7bf\nauthor Yuki Okushi <huyuumi.dev@gmail.com> 1615330892 +0900\ncommitter GitHub <noreply@github.com> 1615330892 +0900\n\nRollup merge of #82849 - camsteffen:option-get-or-default, r=joshtriplett\n\nAdd Option::get_or_default\n\nTracking issue: #82901\n\nThe original issue is #55042, which was closed, but for an invalid reason (see discussion there). Opening this to reconsider (I hope that's okay). It seems like the only gap for `Option` being \"entry-like\".\n\nI ran into a need for this method where I had a `Vec<Option<MyData>>` and wanted to do `vec[n].get_or_default().my_data_method()`. Using an `Option` as an inner component of a data structure is probably where the need for this will normally arise.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1c3fea2f8c167451f3f23b9a48463bd1fed836ae", "html_url": "https://github.com/rust-lang/rust/commit/1c3fea2f8c167451f3f23b9a48463bd1fed836ae", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1c3fea2f8c167451f3f23b9a48463bd1fed836ae/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "48a393e10bb17a5f123d24bfddc9fbb034f0cc10", "url": "https://api.github.com/repos/rust-lang/rust/commits/48a393e10bb17a5f123d24bfddc9fbb034f0cc10", "html_url": "https://github.com/rust-lang/rust/commit/48a393e10bb17a5f123d24bfddc9fbb034f0cc10"}, {"sha": "1cc8c4de6aa0549a3d7d1da23ba48d34d0efd7bf", "url": "https://api.github.com/repos/rust-lang/rust/commits/1cc8c4de6aa0549a3d7d1da23ba48d34d0efd7bf", "html_url": "https://github.com/rust-lang/rust/commit/1cc8c4de6aa0549a3d7d1da23ba48d34d0efd7bf"}], "stats": {"total": 34, "additions": 30, "deletions": 4}, "files": [{"sha": "bbfcec5a76a4352166d075b76c5bf0736a0f179f", "filename": "compiler/rustc_mir/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1c3fea2f8c167451f3f23b9a48463bd1fed836ae/compiler%2Frustc_mir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c3fea2f8c167451f3f23b9a48463bd1fed836ae/compiler%2Frustc_mir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Flib.rs?ref=1c3fea2f8c167451f3f23b9a48463bd1fed836ae", "patch": "@@ -25,6 +25,7 @@ Rust MIR: a lowered representation of Rust.\n #![feature(stmt_expr_attributes)]\n #![feature(trait_alias)]\n #![feature(option_expect_none)]\n+#![feature(option_get_or_default)]\n #![feature(or_patterns)]\n #![feature(once_cell)]\n #![feature(control_flow_enum)]"}, {"sha": "8ad0d133b17e142f90e671fe0a49b5756f0794a2", "filename": "compiler/rustc_mir/src/transform/coverage/graph.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1c3fea2f8c167451f3f23b9a48463bd1fed836ae/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcoverage%2Fgraph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c3fea2f8c167451f3f23b9a48463bd1fed836ae/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcoverage%2Fgraph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcoverage%2Fgraph.rs?ref=1c3fea2f8c167451f3f23b9a48463bd1fed836ae", "patch": "@@ -392,10 +392,7 @@ impl BasicCoverageBlockData {\n             }\n         }\n         let operand = counter_kind.as_operand_id();\n-        if let Some(replaced) = self\n-            .edge_from_bcbs\n-            .get_or_insert_with(FxHashMap::default)\n-            .insert(from_bcb, counter_kind)\n+        if let Some(replaced) = self.edge_from_bcbs.get_or_default().insert(from_bcb, counter_kind)\n         {\n             Error::from_string(format!(\n                 \"attempt to set an edge counter more than once; from_bcb: \\"}, {"sha": "9478e7f06bdf3a80885ebf2e42103bb0731afbcb", "filename": "library/core/src/option.rs", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/1c3fea2f8c167451f3f23b9a48463bd1fed836ae/library%2Fcore%2Fsrc%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c3fea2f8c167451f3f23b9a48463bd1fed836ae/library%2Fcore%2Fsrc%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Foption.rs?ref=1c3fea2f8c167451f3f23b9a48463bd1fed836ae", "patch": "@@ -854,6 +854,34 @@ impl<T> Option<T> {\n     // Entry-like operations to insert if None and return a reference\n     /////////////////////////////////////////////////////////////////////////\n \n+    /// Inserts the default value into the option if it is [`None`], then\n+    /// returns a mutable reference to the contained value.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(option_get_or_default)]\n+    ///\n+    /// let mut x = None;\n+    ///\n+    /// {\n+    ///     let y: &mut u32 = x.get_or_default();\n+    ///     assert_eq!(y, &0);\n+    ///\n+    ///     *y = 7;\n+    /// }\n+    ///\n+    /// assert_eq!(x, Some(7));\n+    /// ```\n+    #[inline]\n+    #[unstable(feature = \"option_get_or_default\", issue = \"82901\")]\n+    pub fn get_or_default(&mut self) -> &mut T\n+    where\n+        T: Default,\n+    {\n+        self.get_or_insert_with(Default::default)\n+    }\n+\n     /// Inserts `value` into the option if it is [`None`], then\n     /// returns a mutable reference to the contained value.\n     ///"}]}