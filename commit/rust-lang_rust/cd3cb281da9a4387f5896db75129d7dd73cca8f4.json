{"sha": "cd3cb281da9a4387f5896db75129d7dd73cca8f4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNkM2NiMjgxZGE5YTQzODdmNTg5NmRiNzUxMjlkN2RkNzNjY2E4ZjQ=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-09-07T22:07:36Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-09-07T22:07:36Z"}, "message": "Rollup merge of #64255 - varkor:bool-to-option, r=Centril\n\nAdd methods for converting `bool` to `Option<T>`\n\nThis provides a reference implementation for https://github.com/rust-lang/rfcs/pull/2757.", "tree": {"sha": "d19b29534ae871eaa6fdf621d2658dd041672075", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d19b29534ae871eaa6fdf621d2658dd041672075"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cd3cb281da9a4387f5896db75129d7dd73cca8f4", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJddCooCRBK7hj4Ov3rIwAAdHIIABFa8sEOr3wetUDdh8bkOnjk\njObHsOHReAnj30J3JXTzflqjAYGRzxppa/Bi0niCtQ6VlG8EcdBjwkVQOAcZdTwf\nVlLMGP5n3QOGUxikrB9pwXNKFc/6/pi8XY9oQkRI6aQlbfLwRCNb1BfnlR7/lNnC\nr7FbMXrV9DcT83Bz95NnGqwiKcqg+1ONHAnbJY/bL97yxvNbDhWpgN5d/aU4Q/18\nruW+4i12PxmW1G2rkOYP5znAw+n4ThNHrP6gXC/tZ5CXMA6KI4FSo1bir+m0CchB\nFpivspZHJ//WyquXirDr7O13W6PlUxAs+7TJYl/Rr6G2u/ewollzzpoS3bXpYEM=\n=AZMw\n-----END PGP SIGNATURE-----\n", "payload": "tree d19b29534ae871eaa6fdf621d2658dd041672075\nparent cab2d84f061c624a016250458f29f0297b74d0fe\nparent 7b3f72906ffea5a8aec9e3d109d8e012f771a672\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1567894056 +0200\ncommitter GitHub <noreply@github.com> 1567894056 +0200\n\nRollup merge of #64255 - varkor:bool-to-option, r=Centril\n\nAdd methods for converting `bool` to `Option<T>`\n\nThis provides a reference implementation for https://github.com/rust-lang/rfcs/pull/2757.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cd3cb281da9a4387f5896db75129d7dd73cca8f4", "html_url": "https://github.com/rust-lang/rust/commit/cd3cb281da9a4387f5896db75129d7dd73cca8f4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cd3cb281da9a4387f5896db75129d7dd73cca8f4/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cab2d84f061c624a016250458f29f0297b74d0fe", "url": "https://api.github.com/repos/rust-lang/rust/commits/cab2d84f061c624a016250458f29f0297b74d0fe", "html_url": "https://github.com/rust-lang/rust/commit/cab2d84f061c624a016250458f29f0297b74d0fe"}, {"sha": "7b3f72906ffea5a8aec9e3d109d8e012f771a672", "url": "https://api.github.com/repos/rust-lang/rust/commits/7b3f72906ffea5a8aec9e3d109d8e012f771a672", "html_url": "https://github.com/rust-lang/rust/commit/7b3f72906ffea5a8aec9e3d109d8e012f771a672"}], "stats": {"total": 72, "additions": 71, "deletions": 1}, "files": [{"sha": "32ec26975e375291ec503bd2194c7419e041f917", "filename": "src/libcore/bool.rs", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/cd3cb281da9a4387f5896db75129d7dd73cca8f4/src%2Flibcore%2Fbool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd3cb281da9a4387f5896db75129d7dd73cca8f4/src%2Flibcore%2Fbool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fbool.rs?ref=cd3cb281da9a4387f5896db75129d7dd73cca8f4", "patch": "@@ -0,0 +1,45 @@\n+//! impl bool {}\n+\n+#[cfg(not(boostrap_stdarch_ignore_this))]\n+#[lang = \"bool\"]\n+impl bool {\n+    /// Returns `Some(t)` if the `bool` is `true`, or `None` otherwise.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(bool_to_option)]\n+    ///\n+    /// assert_eq!(false.then(0), None);\n+    /// assert_eq!(true.then(0), Some(0));\n+    /// ```\n+    #[unstable(feature = \"bool_to_option\", issue = \"64260\")]\n+    #[inline]\n+    pub fn then<T>(self, t: T) -> Option<T> {\n+        if self {\n+            Some(t)\n+        } else {\n+            None\n+        }\n+    }\n+\n+    /// Returns `Some(f())` if the `bool` is `true`, or `None` otherwise.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(bool_to_option)]\n+    ///\n+    /// assert_eq!(false.then_with(|| 0), None);\n+    /// assert_eq!(true.then_with(|| 0), Some(0));\n+    /// ```\n+    #[unstable(feature = \"bool_to_option\", issue = \"64260\")]\n+    #[inline]\n+    pub fn then_with<T, F: FnOnce() -> T>(self, f: F) -> Option<T> {\n+        if self {\n+            Some(f())\n+        } else {\n+            None\n+        }\n+    }\n+}"}, {"sha": "690cff483b07c863e875a966a80290e7cdf93d75", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cd3cb281da9a4387f5896db75129d7dd73cca8f4/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd3cb281da9a4387f5896db75129d7dd73cca8f4/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=cd3cb281da9a4387f5896db75129d7dd73cca8f4", "patch": "@@ -227,6 +227,7 @@ pub mod task;\n pub mod alloc;\n \n // note: does not need to be public\n+mod bool;\n mod tuple;\n mod unit;\n "}, {"sha": "0f1e6e89451e9b4294a6aad180c3250e623f2122", "filename": "src/libcore/tests/bool.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/cd3cb281da9a4387f5896db75129d7dd73cca8f4/src%2Flibcore%2Ftests%2Fbool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd3cb281da9a4387f5896db75129d7dd73cca8f4/src%2Flibcore%2Ftests%2Fbool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fbool.rs?ref=cd3cb281da9a4387f5896db75129d7dd73cca8f4", "patch": "@@ -0,0 +1,7 @@\n+#[test]\n+fn test_bool_to_option() {\n+    assert_eq!(false.then(0), None);\n+    assert_eq!(true.then(0), Some(0));\n+    assert_eq!(false.then_with(|| 0), None);\n+    assert_eq!(true.then_with(|| 0), Some(0));\n+}"}, {"sha": "b2c29aa269265a8a4a2935b41abf0c760eaba089", "filename": "src/libcore/tests/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd3cb281da9a4387f5896db75129d7dd73cca8f4/src%2Flibcore%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd3cb281da9a4387f5896db75129d7dd73cca8f4/src%2Flibcore%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Flib.rs?ref=cd3cb281da9a4387f5896db75129d7dd73cca8f4", "patch": "@@ -1,3 +1,4 @@\n+#![feature(bool_to_option)]\n #![feature(bound_cloned)]\n #![feature(box_syntax)]\n #![feature(cell_update)]\n@@ -40,6 +41,7 @@ mod any;\n mod array;\n mod ascii;\n mod atomic;\n+mod bool;\n mod cell;\n mod char;\n mod clone;"}, {"sha": "c5d9a722ae18e09c5c9fdbebd9151f1a13295021", "filename": "src/librustc/middle/lang_items.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cd3cb281da9a4387f5896db75129d7dd73cca8f4/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd3cb281da9a4387f5896db75129d7dd73cca8f4/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flang_items.rs?ref=cd3cb281da9a4387f5896db75129d7dd73cca8f4", "patch": "@@ -244,6 +244,7 @@ pub fn collect<'tcx>(tcx: TyCtxt<'tcx>) -> LanguageItems {\n \n language_item_table! {\n //  Variant name,                Name,                 Method name,             Target;\n+    BoolImplItem,                \"bool\",               bool_impl,               Target::Impl;\n     CharImplItem,                \"char\",               char_impl,               Target::Impl;\n     StrImplItem,                 \"str\",                str_impl,                Target::Impl;\n     SliceImplItem,               \"slice\",              slice_impl,              Target::Impl;"}, {"sha": "c8838311e8dbf7a73b06336a47c08d7bf07bc870", "filename": "src/librustc_typeck/check/method/probe.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cd3cb281da9a4387f5896db75129d7dd73cca8f4/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd3cb281da9a4387f5896db75129d7dd73cca8f4/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs?ref=cd3cb281da9a4387f5896db75129d7dd73cca8f4", "patch": "@@ -578,6 +578,10 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n             ty::Param(p) => {\n                 self.assemble_inherent_candidates_from_param(p);\n             }\n+            ty::Bool => {\n+                let lang_def_id = lang_items.bool_impl();\n+                self.assemble_inherent_impl_for_primitive(lang_def_id);\n+            }\n             ty::Char => {\n                 let lang_def_id = lang_items.char_impl();\n                 self.assemble_inherent_impl_for_primitive(lang_def_id);"}, {"sha": "e7c2126cfd7277e9c414ef8dca3c459c12b140ee", "filename": "src/librustc_typeck/coherence/inherent_impls.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cd3cb281da9a4387f5896db75129d7dd73cca8f4/src%2Flibrustc_typeck%2Fcoherence%2Finherent_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd3cb281da9a4387f5896db75129d7dd73cca8f4/src%2Flibrustc_typeck%2Fcoherence%2Finherent_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Finherent_impls.rs?ref=cd3cb281da9a4387f5896db75129d7dd73cca8f4", "patch": "@@ -67,6 +67,14 @@ impl ItemLikeVisitor<'v> for InherentCollect<'tcx> {\n             ty::Dynamic(ref data, ..) if data.principal_def_id().is_some() => {\n                 self.check_def_id(item, data.principal_def_id().unwrap());\n             }\n+            ty::Bool => {\n+                self.check_primitive_impl(def_id,\n+                                          lang_items.bool_impl(),\n+                                          None,\n+                                          \"bool\",\n+                                          \"bool\",\n+                                          item.span);\n+            }\n             ty::Char => {\n                 self.check_primitive_impl(def_id,\n                                           lang_items.char_impl(),"}, {"sha": "38eff43bad2be9cd0dbb1328d13661cc913054ab", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd3cb281da9a4387f5896db75129d7dd73cca8f4/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd3cb281da9a4387f5896db75129d7dd73cca8f4/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=cd3cb281da9a4387f5896db75129d7dd73cca8f4", "patch": "@@ -3977,7 +3977,7 @@ fn build_deref_target_impls(cx: &DocContext<'_>,\n             F32 => tcx.lang_items().f32_impl(),\n             F64 => tcx.lang_items().f64_impl(),\n             Char => tcx.lang_items().char_impl(),\n-            Bool => None,\n+            Bool => tcx.lang_items().bool_impl(),\n             Str => tcx.lang_items().str_impl(),\n             Slice => tcx.lang_items().slice_impl(),\n             Array => tcx.lang_items().slice_impl(),"}, {"sha": "d6073cdc1e11dff52e45f79346524d0a3096b029", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cd3cb281da9a4387f5896db75129d7dd73cca8f4/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd3cb281da9a4387f5896db75129d7dd73cca8f4/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=cd3cb281da9a4387f5896db75129d7dd73cca8f4", "patch": "@@ -679,6 +679,7 @@ fn primitive_impl(cx: &DocContext<'_>, path_str: &str) -> Option<DefId> {\n         \"f32\" => tcx.lang_items().f32_impl(),\n         \"f64\" => tcx.lang_items().f64_impl(),\n         \"str\" => tcx.lang_items().str_impl(),\n+        \"bool\" => tcx.lang_items().bool_impl(),\n         \"char\" => tcx.lang_items().char_impl(),\n         _ => None,\n     }"}, {"sha": "28c64d0b9638e3d4142eb195ad42e1fe272f9551", "filename": "src/librustdoc/passes/collect_trait_impls.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cd3cb281da9a4387f5896db75129d7dd73cca8f4/src%2Flibrustdoc%2Fpasses%2Fcollect_trait_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd3cb281da9a4387f5896db75129d7dd73cca8f4/src%2Flibrustdoc%2Fpasses%2Fcollect_trait_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_trait_impls.rs?ref=cd3cb281da9a4387f5896db75129d7dd73cca8f4", "patch": "@@ -53,6 +53,7 @@ pub fn collect_trait_impls(krate: Crate, cx: &DocContext<'_>) -> Crate {\n         lang_items.f64_impl(),\n         lang_items.f32_runtime_impl(),\n         lang_items.f64_runtime_impl(),\n+        lang_items.bool_impl(),\n         lang_items.char_impl(),\n         lang_items.str_impl(),\n         lang_items.slice_impl(),"}]}