{"sha": "9c4696b940e2926ddc71dc138a2d57af10f02c94", "node_id": "C_kwDOAAsO6NoAKDljNDY5NmI5NDBlMjkyNmRkYzcxZGMxMzhhMmQ1N2FmMTBmMDJjOTQ", "commit": {"author": {"name": "Ben Kimock", "email": "kimockb@gmail.com", "date": "2023-02-12T19:37:09Z"}, "committer": {"name": "Ben Kimock", "email": "kimockb@gmail.com", "date": "2023-02-13T01:18:48Z"}, "message": "Fix unintentional UB in SIMD tests", "tree": {"sha": "d1920e74e6db6cf41c3f1f98c90f9f21d3fcc604", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d1920e74e6db6cf41c3f1f98c90f9f21d3fcc604"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9c4696b940e2926ddc71dc138a2d57af10f02c94", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9c4696b940e2926ddc71dc138a2d57af10f02c94", "html_url": "https://github.com/rust-lang/rust/commit/9c4696b940e2926ddc71dc138a2d57af10f02c94", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9c4696b940e2926ddc71dc138a2d57af10f02c94/comments", "author": {"login": "saethlin", "id": 12105168, "node_id": "MDQ6VXNlcjEyMTA1MTY4", "avatar_url": "https://avatars.githubusercontent.com/u/12105168?v=4", "gravatar_id": "", "url": "https://api.github.com/users/saethlin", "html_url": "https://github.com/saethlin", "followers_url": "https://api.github.com/users/saethlin/followers", "following_url": "https://api.github.com/users/saethlin/following{/other_user}", "gists_url": "https://api.github.com/users/saethlin/gists{/gist_id}", "starred_url": "https://api.github.com/users/saethlin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/saethlin/subscriptions", "organizations_url": "https://api.github.com/users/saethlin/orgs", "repos_url": "https://api.github.com/users/saethlin/repos", "events_url": "https://api.github.com/users/saethlin/events{/privacy}", "received_events_url": "https://api.github.com/users/saethlin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "saethlin", "id": 12105168, "node_id": "MDQ6VXNlcjEyMTA1MTY4", "avatar_url": "https://avatars.githubusercontent.com/u/12105168?v=4", "gravatar_id": "", "url": "https://api.github.com/users/saethlin", "html_url": "https://github.com/saethlin", "followers_url": "https://api.github.com/users/saethlin/followers", "following_url": "https://api.github.com/users/saethlin/following{/other_user}", "gists_url": "https://api.github.com/users/saethlin/gists{/gist_id}", "starred_url": "https://api.github.com/users/saethlin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/saethlin/subscriptions", "organizations_url": "https://api.github.com/users/saethlin/orgs", "repos_url": "https://api.github.com/users/saethlin/repos", "events_url": "https://api.github.com/users/saethlin/events{/privacy}", "received_events_url": "https://api.github.com/users/saethlin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8dabf5da9e0318f8c324dc224ad49dc91472c2ec", "url": "https://api.github.com/repos/rust-lang/rust/commits/8dabf5da9e0318f8c324dc224ad49dc91472c2ec", "html_url": "https://github.com/rust-lang/rust/commit/8dabf5da9e0318f8c324dc224ad49dc91472c2ec"}], "stats": {"total": 181, "additions": 60, "deletions": 121}, "files": [{"sha": "89436c83e25ea256e710442959448b8ada07463e", "filename": "tests/ui/simd/intrinsic/generic-cast-pass.rs", "status": "modified", "additions": 42, "deletions": 104, "changes": 146, "blob_url": "https://github.com/rust-lang/rust/blob/9c4696b940e2926ddc71dc138a2d57af10f02c94/tests%2Fui%2Fsimd%2Fintrinsic%2Fgeneric-cast-pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c4696b940e2926ddc71dc138a2d57af10f02c94/tests%2Fui%2Fsimd%2Fintrinsic%2Fgeneric-cast-pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsimd%2Fintrinsic%2Fgeneric-cast-pass.rs?ref=9c4696b940e2926ddc71dc138a2d57af10f02c94", "patch": "@@ -1,121 +1,59 @@\n // run-pass\n-#![allow(unused_must_use)]\n // ignore-emscripten FIXME(#45351) hits an LLVM assert\n \n-#![feature(repr_simd, platform_intrinsics, concat_idents, test)]\n-#![allow(non_camel_case_types)]\n-\n-extern crate test;\n-\n-#[repr(simd)]\n-#[derive(PartialEq, Debug)]\n-struct i32x4(i32, i32, i32, i32);\n-#[repr(simd)]\n-#[derive(PartialEq, Debug)]\n-struct i8x4(i8, i8, i8, i8);\n-\n-#[repr(simd)]\n-#[derive(PartialEq, Debug)]\n-struct u32x4(u32, u32, u32, u32);\n-#[repr(simd)]\n-#[derive(PartialEq, Debug)]\n-struct u8x4(u8, u8, u8, u8);\n-\n-#[repr(simd)]\n-#[derive(PartialEq, Debug)]\n-struct f32x4(f32, f32, f32, f32);\n-\n-#[repr(simd)]\n-#[derive(PartialEq, Debug)]\n-struct f64x4(f64, f64, f64, f64);\n-\n+#![feature(repr_simd, platform_intrinsics)]\n \n extern \"platform-intrinsic\" {\n     fn simd_cast<T, U>(x: T) -> U;\n }\n \n-const A: i32 = -1234567;\n-const B: i32 = 12345678;\n-const C: i32 = -123456789;\n-const D: i32 = 1234567890;\n+use std::cmp::{max, min};\n \n-trait Foo {\n-    fn is_float() -> bool { false }\n-    fn in_range(x: i32) -> bool;\n-}\n-impl Foo for i32 {\n-    fn in_range(_: i32) -> bool { true }\n-}\n-impl Foo for i8 {\n-    fn in_range(x: i32) -> bool { -128 <= x && x < 128 }\n-}\n-impl Foo for u32 {\n-    fn in_range(x: i32) -> bool { 0 <= x }\n-}\n-impl Foo for u8 {\n-    fn in_range(x: i32) -> bool { 0 <= x && x < 128 }\n-}\n-impl Foo for f32 {\n-    fn is_float() -> bool { true }\n-    fn in_range(_: i32) -> bool { true }\n-}\n-impl Foo for f64 {\n-    fn is_float() -> bool { true }\n-    fn in_range(_: i32) -> bool { true }\n-}\n+#[derive(Copy, Clone)]\n+#[repr(simd)]\n+struct V<T>([T; 2]);\n \n fn main() {\n-    macro_rules! test {\n-        ($from: ident, $to: ident) => {{\n-            // force the casts to actually happen, or else LLVM/rustc\n-            // may fold them and get slightly different results.\n-            let (a, b, c, d) = test::black_box((A as $from, B as $from, C as $from, D as $from));\n-            // the SIMD vectors are all FOOx4, so we can concat_idents\n-            // so we don't have to pass in the extra args to the macro\n-            let mut from = simd_cast(concat_idents!($from, x4)(a, b, c, d));\n-            let mut to = concat_idents!($to, x4)(a as $to,\n-                                                 b as $to,\n-                                                 c as $to,\n-                                                 d as $to);\n-            // assist type inference, it needs to know what `from` is\n-            // for the `if` statements.\n-            to == from;\n+    unsafe {\n+        let u = V::<u32>([i16::MIN as u32, i16::MAX as u32]);\n+        let i: V<i16> = simd_cast(u);\n+        assert_eq!(i.0[0], u.0[0] as i16);\n+        assert_eq!(i.0[1], u.0[1] as i16);\n+    }\n \n-            // there are platform differences for some out of range\n-            // casts, so we just normalize such things: it's OK for\n-            // \"invalid\" calculations to result in nonsense answers.\n-            // (e.g., negative float to unsigned integer goes through a\n-            // library routine on the default i686 platforms, and the\n-            // implementation of that routine differs on e.g., Linux\n-            // vs. macOS, resulting in different answers.)\n-            if $from::is_float() {\n-                if !$to::in_range(A) { from.0 = 0 as $to; to.0 = 0 as $to; }\n-                if !$to::in_range(B) { from.1 = 0 as $to; to.1 = 0 as $to; }\n-                if !$to::in_range(C) { from.2 = 0 as $to; to.2 = 0 as $to; }\n-                if !$to::in_range(D) { from.3 = 0 as $to; to.3 = 0 as $to; }\n-            }\n+    unsafe {\n+        let f = V::<f32>([i16::MIN as f32, i16::MAX as f32]);\n+        let i: V<i16> = simd_cast(f);\n+        assert_eq!(i.0[0], f.0[0] as i16);\n+        assert_eq!(i.0[1], f.0[1] as i16);\n+    }\n \n-            assert!(to == from,\n-                    \"{} -> {} ({:?} != {:?})\", stringify!($from), stringify!($to),\n-                    from, to);\n-        }}\n+    unsafe {\n+        let f = V::<f32>([u8::MIN as f32, u8::MAX as f32]);\n+        let u: V<u8> = simd_cast(f);\n+        assert_eq!(u.0[0], f.0[0] as u8);\n+        assert_eq!(u.0[1], f.0[1] as u8);\n     }\n-    macro_rules! tests {\n-        (: $($to: ident),*) => { () };\n-        // repeating the list twice is easier than writing a cartesian\n-        // product macro\n-        ($from: ident $(, $from_: ident)*: $($to: ident),*) => {\n-            fn $from() { unsafe { $( test!($from, $to); )* } }\n-            tests!($($from_),*: $($to),*)\n-        };\n-        ($($types: ident),*) => {{\n-            tests!($($types),* : $($types),*);\n-            $($types();)*\n-        }}\n+\n+    unsafe {\n+        // We would like to do isize::MIN..=isize::MAX, but those values are not representable in\n+        // an f64, so we clamp to the range of an i32 to prevent running into UB.\n+        let f = V::<f64>([\n+            max(isize::MIN, i32::MIN as isize) as f64,\n+            min(isize::MAX, i32::MAX as isize) as f64,\n+        ]);\n+        let i: V<isize> = simd_cast(f);\n+        assert_eq!(i.0[0], f.0[0] as isize);\n+        assert_eq!(i.0[1], f.0[1] as isize);\n     }\n \n-    // test various combinations, including truncation,\n-    // signed/unsigned extension, and floating point casts.\n-    tests!(i32, i8, u32, u8, f32);\n-    tests!(i32, u32, f32, f64)\n+    unsafe {\n+        let f = V::<f64>([\n+            max(usize::MIN, u32::MIN as usize) as f64,\n+            min(usize::MAX, u32::MAX as usize) as f64,\n+        ]);\n+        let u: V<usize> = simd_cast(f);\n+        assert_eq!(u.0[0], f.0[0] as usize);\n+        assert_eq!(u.0[1], f.0[1] as usize);\n+    }\n }"}, {"sha": "7d4b3dbd7b411cd39ba23711febfb5f580dd7328", "filename": "tests/ui/simd/intrinsic/generic-gather-pass.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/9c4696b940e2926ddc71dc138a2d57af10f02c94/tests%2Fui%2Fsimd%2Fintrinsic%2Fgeneric-gather-pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c4696b940e2926ddc71dc138a2d57af10f02c94/tests%2Fui%2Fsimd%2Fintrinsic%2Fgeneric-gather-pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsimd%2Fintrinsic%2Fgeneric-gather-pass.rs?ref=9c4696b940e2926ddc71dc138a2d57af10f02c94", "patch": "@@ -24,9 +24,9 @@ fn main() {\n \n     // reading from *const\n     unsafe {\n-        let pointer = &x[0] as *const f32;\n+        let pointer = x.as_ptr();\n         let pointers =  x4(\n-            pointer.offset(0) as *const f32,\n+            pointer.offset(0),\n             pointer.offset(2),\n             pointer.offset(4),\n             pointer.offset(6)\n@@ -39,9 +39,9 @@ fn main() {\n \n     // reading from *mut\n     unsafe {\n-        let pointer = &mut x[0] as *mut f32;\n+        let pointer = x.as_mut_ptr();\n         let pointers = x4(\n-            pointer.offset(0) as *mut f32,\n+            pointer.offset(0),\n             pointer.offset(2),\n             pointer.offset(4),\n             pointer.offset(6)\n@@ -54,9 +54,9 @@ fn main() {\n \n     // writing to *mut\n     unsafe {\n-        let pointer = &mut x[0] as *mut f32;\n+        let pointer = x.as_mut_ptr();\n         let pointers = x4(\n-            pointer.offset(0) as *mut f32,\n+            pointer.offset(0),\n             pointer.offset(2),\n             pointer.offset(4),\n             pointer.offset(6)\n@@ -85,9 +85,9 @@ fn main() {\n \n     // reading from *const\n     unsafe {\n-        let pointer = &y[0] as *const *const f32;\n+        let pointer = y.as_ptr();\n         let pointers = x4(\n-            pointer.offset(0) as *const *const f32,\n+            pointer.offset(0),\n             pointer.offset(2),\n             pointer.offset(4),\n             pointer.offset(6)\n@@ -100,9 +100,9 @@ fn main() {\n \n     // reading from *mut\n     unsafe {\n-        let pointer = &mut y[0] as *mut *const f32;\n+        let pointer = y.as_mut_ptr();\n         let pointers = x4(\n-            pointer.offset(0) as *mut *const f32,\n+            pointer.offset(0),\n             pointer.offset(2),\n             pointer.offset(4),\n             pointer.offset(6)\n@@ -115,9 +115,9 @@ fn main() {\n \n     // writing to *mut\n     unsafe {\n-        let pointer = &mut y[0] as *mut *const f32;\n+        let pointer = y.as_mut_ptr();\n         let pointers = x4(\n-            pointer.offset(0) as *mut *const f32,\n+            pointer.offset(0),\n             pointer.offset(2),\n             pointer.offset(4),\n             pointer.offset(6)"}, {"sha": "cd24d6675b2f8f3f543e6148e08f907959970c78", "filename": "tests/ui/simd/issue-89193.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9c4696b940e2926ddc71dc138a2d57af10f02c94/tests%2Fui%2Fsimd%2Fissue-89193.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c4696b940e2926ddc71dc138a2d57af10f02c94/tests%2Fui%2Fsimd%2Fissue-89193.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsimd%2Fissue-89193.rs?ref=9c4696b940e2926ddc71dc138a2d57af10f02c94", "patch": "@@ -17,13 +17,14 @@ extern \"platform-intrinsic\" {\n fn main() {\n     let x: [usize; 4] = [10, 11, 12, 13];\n     let default = x4(0_usize, 1, 2, 3);\n-    let mask = x4(1_i32, 1, 1, 1);\n+    let all_set = u8::MAX as i8; // aka -1\n+    let mask = x4(all_set, all_set, all_set, all_set);\n     let expected = x4(10_usize, 11, 12, 13);\n \n     unsafe {\n-        let pointer = &x[0] as *const usize;\n+        let pointer = x.as_ptr();\n         let pointers =  x4(\n-            pointer.offset(0) as *const usize,\n+            pointer.offset(0),\n             pointer.offset(1),\n             pointer.offset(2),\n             pointer.offset(3)\n@@ -38,9 +39,9 @@ fn main() {\n     let expected = x4(10_isize, 11, 12, 13);\n \n     unsafe {\n-        let pointer = &x[0] as *const isize;\n+        let pointer = x.as_ptr();\n         let pointers =  x4(\n-            pointer.offset(0) as *const isize,\n+            pointer.offset(0),\n             pointer.offset(1),\n             pointer.offset(2),\n             pointer.offset(3)"}]}