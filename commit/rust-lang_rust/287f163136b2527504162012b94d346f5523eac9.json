{"sha": "287f163136b2527504162012b94d346f5523eac9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI4N2YxNjMxMzZiMjUyNzUwNDE2MjAxMmI5NGQzNDZmNTUyM2VhYzk=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2012-06-21T16:41:33Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2012-06-21T16:45:01Z"}, "message": "Issue #2657: track mutability of bindings, also prevent move from bindings", "tree": {"sha": "00e4cfe24778a081444c417f5a7bb95d6035f3d5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/00e4cfe24778a081444c417f5a7bb95d6035f3d5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/287f163136b2527504162012b94d346f5523eac9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/287f163136b2527504162012b94d346f5523eac9", "html_url": "https://github.com/rust-lang/rust/commit/287f163136b2527504162012b94d346f5523eac9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/287f163136b2527504162012b94d346f5523eac9/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c3d384b18f71c50c587c485d48b61977866901bf", "url": "https://api.github.com/repos/rust-lang/rust/commits/c3d384b18f71c50c587c485d48b61977866901bf", "html_url": "https://github.com/rust-lang/rust/commit/c3d384b18f71c50c587c485d48b61977866901bf"}], "stats": {"total": 58, "additions": 50, "deletions": 8}, "files": [{"sha": "bbf5330c18ad84da4d6af198da2321137872701e", "filename": "src/libsyntax/parse/lexer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/287f163136b2527504162012b94d346f5523eac9/src%2Flibsyntax%2Fparse%2Flexer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/287f163136b2527504162012b94d346f5523eac9/src%2Flibsyntax%2Fparse%2Flexer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer.rs?ref=287f163136b2527504162012b94d346f5523eac9", "patch": "@@ -154,7 +154,7 @@ fn tt_next_token(&&r: tt_reader) -> {tok: token::token, sp: span} {\n             ret ret_val;\n           }\n           tt_frame_up(option::some(tt_f)) {\n-            r.cur <- tt_f;\n+            r.cur = tt_f;\n             /* the above `if` would need to be a `while` if we didn't know\n             that the last thing in a `tt_delim` is always a `tt_flat` */\n             r.cur.idx += 1u;"}, {"sha": "9818c1c648b6cfdb092e6ae89e47dfc11e5aee69", "filename": "src/rustc/middle/borrowck.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/287f163136b2527504162012b94d346f5523eac9/src%2Frustc%2Fmiddle%2Fborrowck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/287f163136b2527504162012b94d346f5523eac9/src%2Frustc%2Fmiddle%2Fborrowck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fborrowck.rs?ref=287f163136b2527504162012b94d346f5523eac9", "patch": "@@ -175,6 +175,7 @@ fn check_crate(tcx: ty::ctxt,\n     let bccx = @{tcx: tcx,\n                  method_map: method_map,\n                  last_use_map: last_use_map,\n+                 binding_map: int_hash(),\n                  root_map: root_map(),\n                  mutbl_map: int_hash()};\n \n@@ -189,6 +190,7 @@ fn check_crate(tcx: ty::ctxt,\n type borrowck_ctxt = @{tcx: ty::ctxt,\n                        method_map: typeck::method_map,\n                        last_use_map: liveness::last_use_map,\n+                       binding_map: binding_map,\n                        root_map: root_map,\n                        mutbl_map: mutbl_map};\n \n@@ -208,6 +210,10 @@ type root_map_key = {id: ast::node_id, derefs: uint};\n // this is used in trans for optimization purposes.\n type mutbl_map = std::map::hashmap<ast::node_id, ()>;\n \n+// maps from each binding's id to the mutability of the location it\n+// points at.  See gather_loan.rs for more detail (search for binding_map)\n+type binding_map = std::map::hashmap<ast::node_id, ast::mutability>;\n+\n // Errors that can occur\"]\n enum bckerr_code {\n     err_mut_uniq,\n@@ -228,6 +234,7 @@ enum categorization {\n     cat_rvalue,                     // result of eval'ing some misc expr\n     cat_special(special_kind),      //\n     cat_local(ast::node_id),        // local variable\n+    cat_binding(ast::node_id),      // pattern binding\n     cat_arg(ast::node_id),          // formal argument\n     cat_stack_upvar(cmt),           // upvar in stack closure\n     cat_deref(cmt, uint, ptr_kind), // deref of a ptr\n@@ -381,6 +388,7 @@ impl to_str_methods for borrowck_ctxt {\n           cat_stack_upvar(_) { \"stack-upvar\" }\n           cat_rvalue { \"rvalue\" }\n           cat_local(node_id) { #fmt[\"local(%d)\", node_id] }\n+          cat_binding(node_id) { #fmt[\"binding(%d)\", node_id] }\n           cat_arg(node_id) { #fmt[\"arg(%d)\", node_id] }\n           cat_deref(cmt, derefs, ptr) {\n             #fmt[\"%s->(%s, %u)\", self.cat_to_repr(cmt.cat),\n@@ -466,6 +474,7 @@ impl to_str_methods for borrowck_ctxt {\n           cat_special(sk_heap_upvar) { \"variable declared in an outer block\" }\n           cat_rvalue { \"non-lvalue\" }\n           cat_local(_) { mut_str + \" local variable\" }\n+          cat_binding(_) { \"pattern binding\" }\n           cat_arg(_) { \"argument\" }\n           cat_deref(_, _, pk) { #fmt[\"dereference of %s %s pointer\",\n                                      mut_str, self.pk_to_sigil(pk)] }"}, {"sha": "b7143706fc3f1713a594c86d47a4f3155c74cc06", "filename": "src/rustc/middle/borrowck/categorization.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/287f163136b2527504162012b94d346f5523eac9/src%2Frustc%2Fmiddle%2Fborrowck%2Fcategorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/287f163136b2527504162012b94d346f5523eac9/src%2Frustc%2Fmiddle%2Fborrowck%2Fcategorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fborrowck%2Fcategorization.rs?ref=287f163136b2527504162012b94d346f5523eac9", "patch": "@@ -265,12 +265,16 @@ impl public_methods for borrowck_ctxt {\n               mutbl:m, ty:expr_ty}\n           }\n \n-          ast::def_binding(vid) {\n-            // no difference between a binding and any other local variable\n-            // from out point of view, except that they are always immutable\n+          ast::def_binding(pid) {\n+            // bindings are \"special\" since they are implicit pointers.\n+\n+            // lookup the mutability for this binding that we found in\n+            // gather_loans when we categorized it\n+            let mutbl = self.binding_map.get(pid);\n+\n             @{id:id, span:span,\n-              cat:cat_local(vid), lp:some(@lp_local(vid)),\n-              mutbl:m_imm, ty:expr_ty}\n+              cat:cat_binding(pid), lp:none,\n+              mutbl:mutbl, ty:expr_ty}\n           }\n         }\n     }"}, {"sha": "1745757151c06ff57d5528c5655a5dbb24812612", "filename": "src/rustc/middle/borrowck/gather_loans.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/287f163136b2527504162012b94d346f5523eac9/src%2Frustc%2Fmiddle%2Fborrowck%2Fgather_loans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/287f163136b2527504162012b94d346f5523eac9/src%2Frustc%2Fmiddle%2Fborrowck%2Fgather_loans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fborrowck%2Fgather_loans.rs?ref=287f163136b2527504162012b94d346f5523eac9", "patch": "@@ -364,6 +364,16 @@ impl methods for gather_loan_ctxt {\n             // cat_discr in the method preserve():\n             let cmt1 = self.bccx.cat_discr(cmt, alt_id);\n             let arm_scope = ty::re_scope(arm_id);\n+\n+            // Remember the mutability of the location that this\n+            // binding refers to.  This will be used later when\n+            // categorizing the binding.  This is a bit of a hack that\n+            // would be better fixed by #2329; in that case we could\n+            // allow the user to specify if they want an imm, const,\n+            // or mut binding, or else just reflect the mutability\n+            // through the type of the region pointer.\n+            self.bccx.binding_map.insert(pat.id, cmt1.mutbl);\n+\n             self.guarantee_valid(cmt1, m_const, arm_scope);\n \n             for o_pat.each { |p|"}, {"sha": "bbeca85174234a0c441548bbc05f7d5e461ae994", "filename": "src/rustc/middle/borrowck/loan.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/287f163136b2527504162012b94d346f5523eac9/src%2Frustc%2Fmiddle%2Fborrowck%2Floan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/287f163136b2527504162012b94d346f5523eac9/src%2Frustc%2Fmiddle%2Fborrowck%2Floan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fborrowck%2Floan.rs?ref=287f163136b2527504162012b94d346f5523eac9", "patch": "@@ -43,7 +43,7 @@ impl loan_methods for loan_ctxt {\n         }\n \n         alt cmt.cat {\n-          cat_rvalue | cat_special(_) {\n+          cat_binding(_) | cat_rvalue | cat_special(_) {\n             // should never be loanable\n             self.bccx.tcx.sess.span_bug(\n                 cmt.span,"}, {"sha": "cbe9c4e3a4add52ec98a2d421a38fba5dbd9e86d", "filename": "src/rustc/middle/borrowck/preserve.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/287f163136b2527504162012b94d346f5523eac9/src%2Frustc%2Fmiddle%2Fborrowck%2Fpreserve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/287f163136b2527504162012b94d346f5523eac9/src%2Frustc%2Fmiddle%2Fborrowck%2Fpreserve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fborrowck%2Fpreserve.rs?ref=287f163136b2527504162012b94d346f5523eac9", "patch": "@@ -29,6 +29,12 @@ impl public_methods for borrowck_ctxt {\n             }\n             ok(())\n           }\n+          cat_binding(_) {\n+            // Bindings are these kind of weird implicit pointers (cc\n+            // #2329).  We require (in gather_loans) that they be\n+            // rooted in an immutable location.\n+            ok(())\n+          }\n           cat_arg(_) {\n             // This can happen as not all args are lendable (e.g., &&\n             // modes).  In that case, the caller guarantees stability."}, {"sha": "c3ab41636a8ad38ca65fdc9a74ac50266c27a46a", "filename": "src/rustc/middle/trans/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/287f163136b2527504162012b94d346f5523eac9/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/287f163136b2527504162012b94d346f5523eac9/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=287f163136b2527504162012b94d346f5523eac9", "patch": "@@ -3335,7 +3335,7 @@ fn need_invoke(bcx: block) -> bool {\n     loop {\n         alt cur.kind {\n           block_scope(inf) {\n-            for inf.cleanups.each {|cleanup|\n+            for vec::each(inf.cleanups) {|cleanup|\n                 alt cleanup {\n                   clean(_, cleanup_type) | clean_temp(_, _, cleanup_type) {\n                     if cleanup_type == normal_exit_and_unwind {"}, {"sha": "183106aa28e8ca45ec810e3cfa7fe9be0c82d11c", "filename": "src/test/compile-fail/borrowck-binding-mutbl.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/287f163136b2527504162012b94d346f5523eac9/src%2Ftest%2Fcompile-fail%2Fborrowck-binding-mutbl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/287f163136b2527504162012b94d346f5523eac9/src%2Ftest%2Fcompile-fail%2Fborrowck-binding-mutbl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-binding-mutbl.rs?ref=287f163136b2527504162012b94d346f5523eac9", "patch": "@@ -0,0 +1,13 @@\n+fn impure(_v: [int]) {\n+}\n+\n+fn main() {\n+    let x = {mut f: [3]};\n+\n+    alt x {\n+      {f: v} => {\n+        impure(v); //! ERROR illegal borrow unless pure: unique value in aliasable, mutable location\n+        //!^ NOTE impure due to access to impure function\n+      }\n+    }\n+}\n\\ No newline at end of file"}]}