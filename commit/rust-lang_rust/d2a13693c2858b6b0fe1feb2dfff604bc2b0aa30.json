{"sha": "d2a13693c2858b6b0fe1feb2dfff604bc2b0aa30", "node_id": "C_kwDOAAsO6NoAKGQyYTEzNjkzYzI4NThiNmIwZmUxZmViMmRmZmY2MDRiYzJiMGFhMzA", "commit": {"author": {"name": "Harald Hoyer", "email": "harald@profian.com", "date": "2022-01-21T13:19:48Z"}, "committer": {"name": "Harald Hoyer", "email": "harald@profian.com", "date": "2022-01-28T12:27:30Z"}, "message": "wasi: enable TcpListener and TcpStream\n\nWith the addition of `sock_accept()` to snapshot1, simple networking via\na passed `TcpListener` is possible. This patch implements the basics to\nmake a simple server work.\n\nSigned-off-by: Harald Hoyer <harald@profian.com>", "tree": {"sha": "d97b6f3d35fb52824201dee1c83e711ef0bd8742", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d97b6f3d35fb52824201dee1c83e711ef0bd8742"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d2a13693c2858b6b0fe1feb2dfff604bc2b0aa30", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d2a13693c2858b6b0fe1feb2dfff604bc2b0aa30", "html_url": "https://github.com/rust-lang/rust/commit/d2a13693c2858b6b0fe1feb2dfff604bc2b0aa30", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d2a13693c2858b6b0fe1feb2dfff604bc2b0aa30/comments", "author": {"login": "haraldh", "id": 427825, "node_id": "MDQ6VXNlcjQyNzgyNQ==", "avatar_url": "https://avatars.githubusercontent.com/u/427825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/haraldh", "html_url": "https://github.com/haraldh", "followers_url": "https://api.github.com/users/haraldh/followers", "following_url": "https://api.github.com/users/haraldh/following{/other_user}", "gists_url": "https://api.github.com/users/haraldh/gists{/gist_id}", "starred_url": "https://api.github.com/users/haraldh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/haraldh/subscriptions", "organizations_url": "https://api.github.com/users/haraldh/orgs", "repos_url": "https://api.github.com/users/haraldh/repos", "events_url": "https://api.github.com/users/haraldh/events{/privacy}", "received_events_url": "https://api.github.com/users/haraldh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "haraldh", "id": 427825, "node_id": "MDQ6VXNlcjQyNzgyNQ==", "avatar_url": "https://avatars.githubusercontent.com/u/427825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/haraldh", "html_url": "https://github.com/haraldh", "followers_url": "https://api.github.com/users/haraldh/followers", "following_url": "https://api.github.com/users/haraldh/following{/other_user}", "gists_url": "https://api.github.com/users/haraldh/gists{/gist_id}", "starred_url": "https://api.github.com/users/haraldh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/haraldh/subscriptions", "organizations_url": "https://api.github.com/users/haraldh/orgs", "repos_url": "https://api.github.com/users/haraldh/repos", "events_url": "https://api.github.com/users/haraldh/events{/privacy}", "received_events_url": "https://api.github.com/users/haraldh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "00cbc8d0c820b8ba09c73fe538852e1ee7d5d8d0", "url": "https://api.github.com/repos/rust-lang/rust/commits/00cbc8d0c820b8ba09c73fe538852e1ee7d5d8d0", "html_url": "https://github.com/rust-lang/rust/commit/00cbc8d0c820b8ba09c73fe538852e1ee7d5d8d0"}], "stats": {"total": 90, "additions": 77, "deletions": 13}, "files": [{"sha": "73c097d4a50abbe647490dc29c4072802f909156", "filename": "library/std/src/os/wasi/net/mod.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/d2a13693c2858b6b0fe1feb2dfff604bc2b0aa30/library%2Fstd%2Fsrc%2Fos%2Fwasi%2Fnet%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2a13693c2858b6b0fe1feb2dfff604bc2b0aa30/library%2Fstd%2Fsrc%2Fos%2Fwasi%2Fnet%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fwasi%2Fnet%2Fmod.rs?ref=d2a13693c2858b6b0fe1feb2dfff604bc2b0aa30", "patch": "@@ -1,3 +1,23 @@\n //! WASI-specific networking functionality\n \n #![unstable(feature = \"wasi_ext\", issue = \"71213\")]\n+\n+use crate::io;\n+use crate::net;\n+use crate::sys_common::AsInner;\n+\n+/// WASI-specific extensions to [`std::net::TcpListener`].\n+///\n+/// [`std::net::TcpListener`]: crate::net::TcpListener\n+pub trait TcpListenerExt {\n+    /// Accept a socket.\n+    ///\n+    /// This corresponds to the `sock_accept` syscall.\n+    fn sock_accept(&self, flags: u16) -> io::Result<u32>;\n+}\n+\n+impl TcpListenerExt for net::TcpListener {\n+    fn sock_accept(&self, flags: u16) -> io::Result<u32> {\n+        self.as_inner().as_inner().as_inner().sock_accept(flags)\n+    }\n+}"}, {"sha": "0b9c8e61db84c4ec76c3017bd6d0b3b804148637", "filename": "library/std/src/sys/wasi/fd.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d2a13693c2858b6b0fe1feb2dfff604bc2b0aa30/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Ffd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2a13693c2858b6b0fe1feb2dfff604bc2b0aa30/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Ffd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Ffd.rs?ref=d2a13693c2858b6b0fe1feb2dfff604bc2b0aa30", "patch": "@@ -228,6 +228,10 @@ impl WasiFd {\n         unsafe { wasi::path_remove_directory(self.as_raw_fd() as wasi::Fd, path).map_err(err2io) }\n     }\n \n+    pub fn sock_accept(&self, flags: wasi::Fdflags) -> io::Result<wasi::Fd> {\n+        unsafe { wasi::sock_accept(self.as_raw_fd() as wasi::Fd, flags).map_err(err2io) }\n+    }\n+\n     pub fn sock_recv(\n         &self,\n         ri_data: &mut [IoSliceMut<'_>],"}, {"sha": "c66e0e4d328ad09a3401fa7517419090d9be5604", "filename": "library/std/src/sys/wasi/net.rs", "status": "modified", "additions": 53, "deletions": 13, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/d2a13693c2858b6b0fe1feb2dfff604bc2b0aa30/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2a13693c2858b6b0fe1feb2dfff604bc2b0aa30/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fnet.rs?ref=d2a13693c2858b6b0fe1feb2dfff604bc2b0aa30", "patch": "@@ -1,5 +1,6 @@\n #![deny(unsafe_op_in_unsafe_fn)]\n \n+use super::err2io;\n use super::fd::WasiFd;\n use crate::convert::TryFrom;\n use crate::fmt;\n@@ -87,24 +88,24 @@ impl TcpStream {\n         unsupported()\n     }\n \n-    pub fn read(&self, _: &mut [u8]) -> io::Result<usize> {\n-        unsupported()\n+    pub fn read(&self, buf: &mut [u8]) -> io::Result<usize> {\n+        self.read_vectored(&mut [IoSliceMut::new(buf)])\n     }\n \n-    pub fn read_vectored(&self, _: &mut [IoSliceMut<'_>]) -> io::Result<usize> {\n-        unsupported()\n+    pub fn read_vectored(&self, bufs: &mut [IoSliceMut<'_>]) -> io::Result<usize> {\n+        self.socket().as_inner().read(bufs)\n     }\n \n     pub fn is_read_vectored(&self) -> bool {\n         true\n     }\n \n-    pub fn write(&self, _: &[u8]) -> io::Result<usize> {\n-        unsupported()\n+    pub fn write(&self, buf: &[u8]) -> io::Result<usize> {\n+        self.write_vectored(&[IoSlice::new(buf)])\n     }\n \n-    pub fn write_vectored(&self, _: &[IoSlice<'_>]) -> io::Result<usize> {\n-        unsupported()\n+    pub fn write_vectored(&self, bufs: &[IoSlice<'_>]) -> io::Result<usize> {\n+        self.socket().as_inner().write(bufs)\n     }\n \n     pub fn is_write_vectored(&self) -> bool {\n@@ -155,8 +156,23 @@ impl TcpStream {\n         unsupported()\n     }\n \n-    pub fn set_nonblocking(&self, _: bool) -> io::Result<()> {\n-        unsupported()\n+    pub fn set_nonblocking(&self, state: bool) -> io::Result<()> {\n+        let fdstat = unsafe {\n+            wasi::fd_fdstat_get(self.socket().as_inner().as_raw_fd() as wasi::Fd).map_err(err2io)?\n+        };\n+\n+        let mut flags = fdstat.fs_flags;\n+\n+        if state {\n+            flags |= wasi::FDFLAGS_NONBLOCK;\n+        } else {\n+            flags &= !wasi::FDFLAGS_NONBLOCK;\n+        }\n+\n+        unsafe {\n+            wasi::fd_fdstat_set_flags(self.socket().as_inner().as_raw_fd() as wasi::Fd, flags)\n+                .map_err(err2io)\n+        }\n     }\n \n     pub fn socket(&self) -> &Socket {\n@@ -194,7 +210,16 @@ impl TcpListener {\n     }\n \n     pub fn accept(&self) -> io::Result<(TcpStream, SocketAddr)> {\n-        unsupported()\n+        let fd = unsafe {\n+            wasi::sock_accept(self.as_inner().as_inner().as_raw_fd() as _, 0).map_err(err2io)?\n+        };\n+\n+        Ok((\n+            TcpStream::from_inner(unsafe { Socket::from_raw_fd(fd as _) }),\n+            // WASI has no concept of SocketAddr yet\n+            // return an unspecified IPv4Addr\n+            SocketAddr::new(Ipv4Addr::UNSPECIFIED.into(), 0),\n+        ))\n     }\n \n     pub fn duplicate(&self) -> io::Result<TcpListener> {\n@@ -221,8 +246,23 @@ impl TcpListener {\n         unsupported()\n     }\n \n-    pub fn set_nonblocking(&self, _: bool) -> io::Result<()> {\n-        unsupported()\n+    pub fn set_nonblocking(&self, state: bool) -> io::Result<()> {\n+        let fdstat = unsafe {\n+            wasi::fd_fdstat_get(self.socket().as_inner().as_raw_fd() as wasi::Fd).map_err(err2io)?\n+        };\n+\n+        let mut flags = fdstat.fs_flags;\n+\n+        if state {\n+            flags |= wasi::FDFLAGS_NONBLOCK;\n+        } else {\n+            flags &= !wasi::FDFLAGS_NONBLOCK;\n+        }\n+\n+        unsafe {\n+            wasi::fd_fdstat_set_flags(self.socket().as_inner().as_raw_fd() as wasi::Fd, flags)\n+                .map_err(err2io)\n+        }\n     }\n \n     pub fn socket(&self) -> &Socket {"}]}