{"sha": "029e2618d007e0aebc1a45f8350f9c89df4d18dc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAyOWUyNjE4ZDAwN2UwYWViYzFhNDVmODM1MGY5Yzg5ZGY0ZDE4ZGM=", "commit": {"author": {"name": "ljedrz", "email": "ljedrz@gmail.com", "date": "2018-10-01T13:37:14Z"}, "committer": {"name": "ljedrz", "email": "ljedrz@gmail.com", "date": "2018-10-05T07:00:53Z"}, "message": "rustc/ty: simplify common patterns", "tree": {"sha": "4c285f922e94a8a2cb5f4ab9971b777ee8dda849", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4c285f922e94a8a2cb5f4ab9971b777ee8dda849"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/029e2618d007e0aebc1a45f8350f9c89df4d18dc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/029e2618d007e0aebc1a45f8350f9c89df4d18dc", "html_url": "https://github.com/rust-lang/rust/commit/029e2618d007e0aebc1a45f8350f9c89df4d18dc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/029e2618d007e0aebc1a45f8350f9c89df4d18dc/comments", "author": {"login": "ljedrz", "id": 3750347, "node_id": "MDQ6VXNlcjM3NTAzNDc=", "avatar_url": "https://avatars.githubusercontent.com/u/3750347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ljedrz", "html_url": "https://github.com/ljedrz", "followers_url": "https://api.github.com/users/ljedrz/followers", "following_url": "https://api.github.com/users/ljedrz/following{/other_user}", "gists_url": "https://api.github.com/users/ljedrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/ljedrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ljedrz/subscriptions", "organizations_url": "https://api.github.com/users/ljedrz/orgs", "repos_url": "https://api.github.com/users/ljedrz/repos", "events_url": "https://api.github.com/users/ljedrz/events{/privacy}", "received_events_url": "https://api.github.com/users/ljedrz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ljedrz", "id": 3750347, "node_id": "MDQ6VXNlcjM3NTAzNDc=", "avatar_url": "https://avatars.githubusercontent.com/u/3750347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ljedrz", "html_url": "https://github.com/ljedrz", "followers_url": "https://api.github.com/users/ljedrz/followers", "following_url": "https://api.github.com/users/ljedrz/following{/other_user}", "gists_url": "https://api.github.com/users/ljedrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/ljedrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ljedrz/subscriptions", "organizations_url": "https://api.github.com/users/ljedrz/orgs", "repos_url": "https://api.github.com/users/ljedrz/repos", "events_url": "https://api.github.com/users/ljedrz/events{/privacy}", "received_events_url": "https://api.github.com/users/ljedrz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "91fc573172c83f9d443da9b54f0361be5266b53f", "url": "https://api.github.com/repos/rust-lang/rust/commits/91fc573172c83f9d443da9b54f0361be5266b53f", "html_url": "https://github.com/rust-lang/rust/commit/91fc573172c83f9d443da9b54f0361be5266b53f"}], "stats": {"total": 66, "additions": 25, "deletions": 41}, "files": [{"sha": "46ba5f5ef362dfb30e6f5b5deb2186dbe577d255", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/029e2618d007e0aebc1a45f8350f9c89df4d18dc/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/029e2618d007e0aebc1a45f8350f9c89df4d18dc/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=029e2618d007e0aebc1a45f8350f9c89df4d18dc", "patch": "@@ -540,16 +540,13 @@ impl<'tcx> TypeckTables<'tcx> {\n     }\n \n     pub fn node_id_to_type(&self, id: hir::HirId) -> Ty<'tcx> {\n-        match self.node_id_to_type_opt(id) {\n-            Some(ty) => ty,\n-            None => {\n-                bug!(\"node_id_to_type: no type for node `{}`\",\n-                    tls::with(|tcx| {\n-                        let id = tcx.hir.hir_to_node_id(id);\n-                        tcx.hir.node_to_string(id)\n-                    }))\n-            }\n-        }\n+        self.node_id_to_type_opt(id).unwrap_or_else(||\n+            bug!(\"node_id_to_type: no type for node `{}`\",\n+                 tls::with(|tcx| {\n+                     let id = tcx.hir.hir_to_node_id(id);\n+                     tcx.hir.node_to_string(id)\n+                 }))\n+        )\n     }\n \n     pub fn node_id_to_type_opt(&self, id: hir::HirId) -> Option<Ty<'tcx>> {"}, {"sha": "3123f0fbe31de3c9308c3b1999db83abe7862e52", "filename": "src/librustc/ty/error.rs", "status": "modified", "additions": 12, "deletions": 13, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/029e2618d007e0aebc1a45f8350f9c89df4d18dc/src%2Flibrustc%2Fty%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/029e2618d007e0aebc1a45f8350f9c89df4d18dc/src%2Flibrustc%2Fty%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Ferror.rs?ref=029e2618d007e0aebc1a45f8350f9c89df4d18dc", "patch": "@@ -252,20 +252,19 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n                     db.note(\"no two closures, even if identical, have the same type\");\n                     db.help(\"consider boxing your closure and/or using it as a trait object\");\n                 }\n-                match (&values.found.sty, &values.expected.sty) { // Issue #53280\n-                    (ty::Infer(ty::IntVar(_)), ty::Float(_)) => {\n-                        if let Ok(snippet) = self.sess.source_map().span_to_snippet(sp) {\n-                            if snippet.chars().all(|c| c.is_digit(10) || c == '-' || c == '_') {\n-                                db.span_suggestion_with_applicability(\n-                                    sp,\n-                                    \"use a float literal\",\n-                                    format!(\"{}.0\", snippet),\n-                                    Applicability::MachineApplicable\n-                                );\n-                            }\n+                if let (ty::Infer(ty::IntVar(_)), ty::Float(_)) =\n+                       (&values.found.sty, &values.expected.sty) // Issue #53280\n+                {\n+                    if let Ok(snippet) = self.sess.source_map().span_to_snippet(sp) {\n+                        if snippet.chars().all(|c| c.is_digit(10) || c == '-' || c == '_') {\n+                            db.span_suggestion_with_applicability(\n+                                sp,\n+                                \"use a float literal\",\n+                                format!(\"{}.0\", snippet),\n+                                Applicability::MachineApplicable\n+                            );\n                         }\n-                    },\n-                    _ => {}\n+                    }\n                 }\n             },\n             OldStyleLUB(err) => {"}, {"sha": "c3d41873009a7b1d294a88e611b96e8f1d127df9", "filename": "src/librustc/ty/flags.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/029e2618d007e0aebc1a45f8350f9c89df4d18dc/src%2Flibrustc%2Fty%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/029e2618d007e0aebc1a45f8350f9c89df4d18dc/src%2Flibrustc%2Fty%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fflags.rs?ref=029e2618d007e0aebc1a45f8350f9c89df4d18dc", "patch": "@@ -62,9 +62,7 @@ impl FlagComputation {\n         let outer_exclusive_binder = computation.outer_exclusive_binder;\n         if outer_exclusive_binder > ty::INNERMOST {\n             self.add_exclusive_binder(outer_exclusive_binder.shifted_out(1));\n-        } else {\n-            // otherwise, this binder captures nothing\n-        }\n+        } // otherwise, this binder captures nothing\n     }\n \n     fn add_sty(&mut self, st: &ty::TyKind<'_>) {"}, {"sha": "9c12d736a30e1e12edcccbbf0e1d75b9feec9a70", "filename": "src/librustc/ty/inhabitedness/def_id_forest.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/029e2618d007e0aebc1a45f8350f9c89df4d18dc/src%2Flibrustc%2Fty%2Finhabitedness%2Fdef_id_forest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/029e2618d007e0aebc1a45f8350f9c89df4d18dc/src%2Flibrustc%2Fty%2Finhabitedness%2Fdef_id_forest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Finhabitedness%2Fdef_id_forest.rs?ref=029e2618d007e0aebc1a45f8350f9c89df4d18dc", "patch": "@@ -66,12 +66,7 @@ impl<'a, 'gcx, 'tcx> DefIdForest {\n                     tcx: TyCtxt<'a, 'gcx, 'tcx>,\n                     id: DefId) -> bool\n     {\n-        for root_id in self.root_ids.iter() {\n-            if tcx.is_descendant_of(id, *root_id) {\n-                return true;\n-            }\n-        }\n-        false\n+        self.root_ids.iter().any(|root_id| tcx.is_descendant_of(id, *root_id))\n     }\n \n     /// Calculate the intersection of a collection of forests."}, {"sha": "66e38fb218a9af0bc087f3a76500ac7e9d96cffd", "filename": "src/librustc/ty/query/on_disk_cache.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/029e2618d007e0aebc1a45f8350f9c89df4d18dc/src%2Flibrustc%2Fty%2Fquery%2Fon_disk_cache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/029e2618d007e0aebc1a45f8350f9c89df4d18dc/src%2Flibrustc%2Fty%2Fquery%2Fon_disk_cache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fon_disk_cache.rs?ref=029e2618d007e0aebc1a45f8350f9c89df4d18dc", "patch": "@@ -441,7 +441,6 @@ impl<'sess> OnDiskCache<'sess> {\n         tcx.dep_graph.with_ignore(|| {\n             let current_cnums = tcx.all_crate_nums(LOCAL_CRATE).iter().map(|&cnum| {\n                 let crate_name = tcx.original_crate_name(cnum)\n-                                    .as_str()\n                                     .to_string();\n                 let crate_disambiguator = tcx.crate_disambiguator(cnum);\n                 ((crate_name, crate_disambiguator), cnum)"}, {"sha": "15e692fd984a3b23c566f6c2ddea35bdc37ce83a", "filename": "src/librustc/ty/query/plumbing.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/029e2618d007e0aebc1a45f8350f9c89df4d18dc/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/029e2618d007e0aebc1a45f8350f9c89df4d18dc/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs?ref=029e2618d007e0aebc1a45f8350f9c89df4d18dc", "patch": "@@ -753,9 +753,8 @@ macro_rules! define_queries_inner {\n                 }\n                 // The def_span query is used to calculate default_span,\n                 // so exit to avoid infinite recursion\n-                match *self {\n-                    Query::def_span(..) => return span,\n-                    _ => ()\n+                if let Query::def_span(..) = *self {\n+                    return span\n                 }\n                 match *self {\n                     $(Query::$name(key) => key.default_span(tcx),)*\n@@ -1028,13 +1027,10 @@ pub fn force_from_dep_node<'a, 'gcx, 'lcx>(tcx: TyCtxt<'a, 'gcx, 'lcx>,\n                     )\n                 );\n \n-                match tcx.force_query::<::ty::query::queries::$query<'_>>(\n+                if let Err(e) = tcx.force_query::<::ty::query::queries::$query<'_>>(\n                     $key, DUMMY_SP, *dep_node\n                 ) {\n-                    Ok(_) => {},\n-                    Err(e) => {\n-                        tcx.report_cycle(e).emit();\n-                    }\n+                    tcx.report_cycle(e).emit();\n                 }\n             }\n         }"}]}