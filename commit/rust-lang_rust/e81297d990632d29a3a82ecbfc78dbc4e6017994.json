{"sha": "e81297d990632d29a3a82ecbfc78dbc4e6017994", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU4MTI5N2Q5OTA2MzJkMjlhM2E4MmVjYmZjNzhkYmM0ZTYwMTc5OTQ=", "commit": {"author": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2019-09-17T23:25:30Z"}, "committer": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2019-09-28T14:06:51Z"}, "message": "Add analysis to determine if a local is indirectly mutable\n\nThis adds a dataflow analysis that determines if a reference to a given\n`Local` or part of a `Local` that would allow mutation exists before a\npoint in the CFG. If no such reference exists, we know for sure that\nthat `Local` cannot have been mutated via an indirect assignment or\nfunction call.", "tree": {"sha": "7d5cbec99e1a72fb37b5f0e98a3c8ca914f99317", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7d5cbec99e1a72fb37b5f0e98a3c8ca914f99317"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e81297d990632d29a3a82ecbfc78dbc4e6017994", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e81297d990632d29a3a82ecbfc78dbc4e6017994", "html_url": "https://github.com/rust-lang/rust/commit/e81297d990632d29a3a82ecbfc78dbc4e6017994", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e81297d990632d29a3a82ecbfc78dbc4e6017994/comments", "author": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "457c3aa6722cd8d2599c7f78347b2f8f586f3527", "url": "https://api.github.com/repos/rust-lang/rust/commits/457c3aa6722cd8d2599c7f78347b2f8f586f3527", "html_url": "https://github.com/rust-lang/rust/commit/457c3aa6722cd8d2599c7f78347b2f8f586f3527"}], "stats": {"total": 161, "additions": 157, "deletions": 4}, "files": [{"sha": "f45fdb21463560ce2160874a73cb6063f44bd6c4", "filename": "src/librustc_mir/dataflow/impls/indirect_mutation.rs", "status": "added", "additions": 152, "deletions": 0, "changes": 152, "blob_url": "https://github.com/rust-lang/rust/blob/e81297d990632d29a3a82ecbfc78dbc4e6017994/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Findirect_mutation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e81297d990632d29a3a82ecbfc78dbc4e6017994/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Findirect_mutation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Findirect_mutation.rs?ref=e81297d990632d29a3a82ecbfc78dbc4e6017994", "patch": "@@ -0,0 +1,152 @@\n+use rustc::mir::visit::Visitor;\n+use rustc::mir::{self, Local, Location};\n+use rustc::ty::{self, TyCtxt};\n+use rustc_data_structures::bit_set::BitSet;\n+use syntax_pos::DUMMY_SP;\n+\n+use crate::dataflow::{self, GenKillSet};\n+\n+/// Whether a borrow to a `Local` has been created that could allow that `Local` to be mutated\n+/// indirectly. This could either be a mutable reference (`&mut`) or a shared borrow if the type of\n+/// that `Local` allows interior mutability.\n+///\n+/// If this returns `false` for a `Local` at a given `Location`, the user can assume that `Local`\n+/// has not been mutated as a result of an indirect assignment (`*p = x`) or as a side-effect of a\n+/// function call or drop terminator.\n+#[derive(Copy, Clone)]\n+pub struct IndirectlyMutableLocals<'mir, 'tcx> {\n+    body: &'mir mir::Body<'tcx>,\n+    tcx: TyCtxt<'tcx>,\n+    param_env: ty::ParamEnv<'tcx>,\n+}\n+\n+impl<'mir, 'tcx> IndirectlyMutableLocals<'mir, 'tcx> {\n+    pub fn new(\n+        tcx: TyCtxt<'tcx>,\n+        body: &'mir mir::Body<'tcx>,\n+        param_env: ty::ParamEnv<'tcx>,\n+    ) -> Self {\n+        IndirectlyMutableLocals { body, tcx, param_env }\n+    }\n+\n+    fn transfer_function<'a>(\n+        &self,\n+        trans: &'a mut GenKillSet<Local>,\n+    ) -> TransferFunction<'a, 'mir, 'tcx> {\n+        TransferFunction {\n+            body: self.body,\n+            tcx: self.tcx,\n+            param_env: self.param_env,\n+            trans\n+        }\n+    }\n+}\n+\n+impl<'mir, 'tcx> dataflow::BitDenotation<'tcx> for IndirectlyMutableLocals<'mir, 'tcx> {\n+    type Idx = Local;\n+\n+    fn name() -> &'static str { \"mut_borrowed_locals\" }\n+\n+    fn bits_per_block(&self) -> usize {\n+        self.body.local_decls.len()\n+    }\n+\n+    fn start_block_effect(&self, _entry_set: &mut BitSet<Local>) {\n+        // Nothing is borrowed on function entry\n+    }\n+\n+    fn statement_effect(\n+        &self,\n+        trans: &mut GenKillSet<Local>,\n+        loc: Location,\n+    ) {\n+        let stmt = &self.body[loc.block].statements[loc.statement_index];\n+        self.transfer_function(trans).visit_statement(stmt, loc);\n+    }\n+\n+    fn terminator_effect(\n+        &self,\n+        trans: &mut GenKillSet<Local>,\n+        loc: Location,\n+    ) {\n+        let terminator = self.body[loc.block].terminator();\n+        self.transfer_function(trans).visit_terminator(terminator, loc);\n+    }\n+\n+    fn propagate_call_return(\n+        &self,\n+        _in_out: &mut BitSet<Local>,\n+        _call_bb: mir::BasicBlock,\n+        _dest_bb: mir::BasicBlock,\n+        _dest_place: &mir::Place<'tcx>,\n+    ) {\n+        // Nothing to do when a call returns successfully\n+    }\n+}\n+\n+impl<'mir, 'tcx> dataflow::BottomValue for IndirectlyMutableLocals<'mir, 'tcx> {\n+    // bottom = unborrowed\n+    const BOTTOM_VALUE: bool = false;\n+}\n+\n+/// A `Visitor` that defines the transfer function for `IndirectlyMutableLocals`.\n+struct TransferFunction<'a, 'mir, 'tcx> {\n+    trans: &'a mut GenKillSet<Local>,\n+    body: &'mir mir::Body<'tcx>,\n+    tcx: TyCtxt<'tcx>,\n+    param_env: ty::ParamEnv<'tcx>,\n+}\n+\n+impl<'tcx> Visitor<'tcx> for TransferFunction<'_, '_, 'tcx> {\n+    fn visit_rvalue(\n+        &mut self,\n+        rvalue: &mir::Rvalue<'tcx>,\n+        location: Location,\n+    ) {\n+        if let mir::Rvalue::Ref(_, kind, ref borrowed_place) = *rvalue {\n+            let is_mut = match kind {\n+                mir::BorrowKind::Mut { .. } => true,\n+\n+                | mir::BorrowKind::Shared\n+                | mir::BorrowKind::Shallow\n+                | mir::BorrowKind::Unique\n+                => {\n+                    !borrowed_place\n+                        .ty(self.body, self.tcx)\n+                        .ty\n+                        .is_freeze(self.tcx, self.param_env, DUMMY_SP)\n+                }\n+            };\n+\n+            if is_mut {\n+                match borrowed_place.base {\n+                    mir::PlaceBase::Local(borrowed_local) if !borrowed_place.is_indirect()\n+                        => self.trans.gen(borrowed_local),\n+\n+                    _ => (),\n+                }\n+            }\n+        }\n+\n+        self.super_rvalue(rvalue, location);\n+    }\n+\n+\n+    fn visit_terminator(&mut self, terminator: &mir::Terminator<'tcx>, location: Location) {\n+        self.super_terminator(terminator, location);\n+\n+        match &terminator.kind {\n+            // Drop terminators borrow the location\n+            mir::TerminatorKind::Drop { location: dropped_place, .. } |\n+            mir::TerminatorKind::DropAndReplace { location: dropped_place, .. } => {\n+                match dropped_place.base {\n+                    mir::PlaceBase::Local(dropped_local) if !dropped_place.is_indirect()\n+                        => self.trans.gen(dropped_local),\n+\n+                    _ => (),\n+                }\n+            }\n+            _ => (),\n+        }\n+    }\n+}"}, {"sha": "d669c786c09df984a5b0edcbcccef29197eb945e", "filename": "src/librustc_mir/dataflow/impls/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e81297d990632d29a3a82ecbfc78dbc4e6017994/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e81297d990632d29a3a82ecbfc78dbc4e6017994/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fmod.rs?ref=e81297d990632d29a3a82ecbfc78dbc4e6017994", "patch": "@@ -18,13 +18,13 @@ use super::drop_flag_effects_for_function_entry;\n use super::drop_flag_effects_for_location;\n use super::on_lookup_result_bits;\n \n-mod storage_liveness;\n-\n-pub use self::storage_liveness::*;\n-\n mod borrowed_locals;\n+mod indirect_mutation;\n+mod storage_liveness;\n \n pub use self::borrowed_locals::*;\n+pub use self::indirect_mutation::IndirectlyMutableLocals;\n+pub use self::storage_liveness::*;\n \n pub(super) mod borrows;\n "}, {"sha": "47eb47cf664ded1c239a46546b79b1e90975c6d5", "filename": "src/librustc_mir/dataflow/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e81297d990632d29a3a82ecbfc78dbc4e6017994/src%2Flibrustc_mir%2Fdataflow%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e81297d990632d29a3a82ecbfc78dbc4e6017994/src%2Flibrustc_mir%2Fdataflow%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fmod.rs?ref=e81297d990632d29a3a82ecbfc78dbc4e6017994", "patch": "@@ -23,6 +23,7 @@ pub use self::impls::DefinitelyInitializedPlaces;\n pub use self::impls::EverInitializedPlaces;\n pub use self::impls::borrows::Borrows;\n pub use self::impls::HaveBeenBorrowedLocals;\n+pub use self::impls::IndirectlyMutableLocals;\n pub use self::at_location::{FlowAtLocation, FlowsAtLocation};\n pub(crate) use self::drop_flag_effects::*;\n "}]}