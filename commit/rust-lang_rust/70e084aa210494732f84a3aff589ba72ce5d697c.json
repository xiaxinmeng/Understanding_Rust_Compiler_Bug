{"sha": "70e084aa210494732f84a3aff589ba72ce5d697c", "node_id": "C_kwDOAAsO6NoAKDcwZTA4NGFhMjEwNDk0NzMyZjg0YTNhZmY1ODliYTcyY2U1ZDY5N2M", "commit": {"author": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2022-06-14T14:33:48Z"}, "committer": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2022-06-14T14:33:48Z"}, "message": "Inline ArchiveConfig struct into LlvmArchiveBuilder", "tree": {"sha": "cdd3e18fa2684634f59cadb690dd8456b3b7211b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cdd3e18fa2684634f59cadb690dd8456b3b7211b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/70e084aa210494732f84a3aff589ba72ce5d697c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/70e084aa210494732f84a3aff589ba72ce5d697c", "html_url": "https://github.com/rust-lang/rust/commit/70e084aa210494732f84a3aff589ba72ce5d697c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/70e084aa210494732f84a3aff589ba72ce5d697c/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4e02a9281dd8c74cf5c04df044659b5e03b17571", "url": "https://api.github.com/repos/rust-lang/rust/commits/4e02a9281dd8c74cf5c04df044659b5e03b17571", "html_url": "https://github.com/rust-lang/rust/commit/4e02a9281dd8c74cf5c04df044659b5e03b17571"}], "stats": {"total": 49, "additions": 21, "deletions": 28}, "files": [{"sha": "b3bbc062572c4620e15d1d2b4e47d6b271213451", "filename": "compiler/rustc_codegen_llvm/src/back/archive.rs", "status": "modified", "additions": 21, "deletions": 28, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/70e084aa210494732f84a3aff589ba72ce5d697c/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Farchive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70e084aa210494732f84a3aff589ba72ce5d697c/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Farchive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Farchive.rs?ref=70e084aa210494732f84a3aff589ba72ce5d697c", "patch": "@@ -15,16 +15,12 @@ use rustc_data_structures::temp_dir::MaybeTempDir;\n use rustc_session::cstore::{DllCallingConvention, DllImport};\n use rustc_session::Session;\n \n-struct ArchiveConfig<'a> {\n-    pub sess: &'a Session,\n-    pub dst: PathBuf,\n-    pub src: Option<PathBuf>,\n-}\n-\n /// Helper for adding many files to an archive.\n #[must_use = \"must call build() to finish building the archive\"]\n pub struct LlvmArchiveBuilder<'a> {\n-    config: ArchiveConfig<'a>,\n+    sess: &'a Session,\n+    dst: PathBuf,\n+    src: Option<PathBuf>,\n     removals: Vec<String>,\n     additions: Vec<Addition>,\n     src_archive: Option<Option<ArchiveRO>>,\n@@ -50,10 +46,6 @@ fn is_relevant_child(c: &Child<'_>) -> bool {\n     }\n }\n \n-fn archive_config<'a>(sess: &'a Session, output: &Path, input: Option<&Path>) -> ArchiveConfig<'a> {\n-    ArchiveConfig { sess, dst: output.to_path_buf(), src: input.map(|p| p.to_path_buf()) }\n-}\n-\n /// Map machine type strings to values of LLVM's MachineTypes enum.\n fn llvm_machine_type(cpu: &str) -> LLVMMachineType {\n     match cpu {\n@@ -69,9 +61,10 @@ impl<'a> ArchiveBuilder<'a> for LlvmArchiveBuilder<'a> {\n     /// Creates a new static archive, ready for modifying the archive specified\n     /// by `config`.\n     fn new(sess: &'a Session, output: &Path, input: Option<&Path>) -> LlvmArchiveBuilder<'a> {\n-        let config = archive_config(sess, output, input);\n         LlvmArchiveBuilder {\n-            config,\n+            sess,\n+            dst: output.to_path_buf(),\n+            src: input.map(|p| p.to_path_buf()),\n             removals: Vec::new(),\n             additions: Vec::new(),\n             src_archive: None,\n@@ -131,11 +124,11 @@ impl<'a> ArchiveBuilder<'a> for LlvmArchiveBuilder<'a> {\n     /// `Archive`.\n     fn build(mut self) {\n         let kind = self.llvm_archive_kind().unwrap_or_else(|kind| {\n-            self.config.sess.fatal(&format!(\"Don't know how to build archive of type: {}\", kind))\n+            self.sess.fatal(&format!(\"Don't know how to build archive of type: {}\", kind))\n         });\n \n         if let Err(e) = self.build_with_llvm(kind) {\n-            self.config.sess.fatal(&format!(\"failed to build archive: {}\", e));\n+            self.sess.fatal(&format!(\"failed to build archive: {}\", e));\n         }\n     }\n \n@@ -151,7 +144,7 @@ impl<'a> ArchiveBuilder<'a> for LlvmArchiveBuilder<'a> {\n             output_path.with_extension(\"lib\")\n         };\n \n-        let target = &self.config.sess.target;\n+        let target = &self.sess.target;\n         let mingw_gnu_toolchain = target.vendor == \"pc\"\n             && target.os == \"windows\"\n             && target.env == \"gnu\"\n@@ -160,7 +153,7 @@ impl<'a> ArchiveBuilder<'a> for LlvmArchiveBuilder<'a> {\n         let import_name_and_ordinal_vector: Vec<(String, Option<u16>)> = dll_imports\n             .iter()\n             .map(|import: &DllImport| {\n-                if self.config.sess.target.arch == \"x86\" {\n+                if self.sess.target.arch == \"x86\" {\n                     (\n                         LlvmArchiveBuilder::i686_decorated_name(import, mingw_gnu_toolchain),\n                         import.ordinal,\n@@ -197,11 +190,11 @@ impl<'a> ArchiveBuilder<'a> for LlvmArchiveBuilder<'a> {\n             match std::fs::write(&def_file_path, def_file_content) {\n                 Ok(_) => {}\n                 Err(e) => {\n-                    self.config.sess.fatal(&format!(\"Error writing .DEF file: {}\", e));\n+                    self.sess.fatal(&format!(\"Error writing .DEF file: {}\", e));\n                 }\n             };\n \n-            let dlltool = find_binutils_dlltool(self.config.sess);\n+            let dlltool = find_binutils_dlltool(self.sess);\n             let result = std::process::Command::new(dlltool)\n                 .args([\n                     \"-d\",\n@@ -215,9 +208,9 @@ impl<'a> ArchiveBuilder<'a> for LlvmArchiveBuilder<'a> {\n \n             match result {\n                 Err(e) => {\n-                    self.config.sess.fatal(&format!(\"Error calling dlltool: {}\", e));\n+                    self.sess.fatal(&format!(\"Error calling dlltool: {}\", e));\n                 }\n-                Ok(output) if !output.status.success() => self.config.sess.fatal(&format!(\n+                Ok(output) if !output.status.success() => self.sess.fatal(&format!(\n                     \"Dlltool could not create import library: {}\\n{}\",\n                     String::from_utf8_lossy(&output.stdout),\n                     String::from_utf8_lossy(&output.stderr)\n@@ -263,13 +256,13 @@ impl<'a> ArchiveBuilder<'a> for LlvmArchiveBuilder<'a> {\n                     output_path_z.as_ptr(),\n                     ffi_exports.as_ptr(),\n                     ffi_exports.len(),\n-                    llvm_machine_type(&self.config.sess.target.arch) as u16,\n-                    !self.config.sess.target.is_like_msvc,\n+                    llvm_machine_type(&self.sess.target.arch) as u16,\n+                    !self.sess.target.is_like_msvc,\n                 )\n             };\n \n             if result == crate::llvm::LLVMRustResult::Failure {\n-                self.config.sess.fatal(&format!(\n+                self.sess.fatal(&format!(\n                     \"Error creating import library for {}: {}\",\n                     lib_name,\n                     llvm::last_error().unwrap_or(\"unknown LLVM error\".to_string())\n@@ -278,7 +271,7 @@ impl<'a> ArchiveBuilder<'a> for LlvmArchiveBuilder<'a> {\n         };\n \n         self.add_archive(&output_path, |_| false).unwrap_or_else(|e| {\n-            self.config.sess.fatal(&format!(\n+            self.sess.fatal(&format!(\n                 \"failed to add native library {}: {}\",\n                 output_path.display(),\n                 e\n@@ -292,13 +285,13 @@ impl<'a> LlvmArchiveBuilder<'a> {\n         if let Some(ref a) = self.src_archive {\n             return a.as_ref();\n         }\n-        let src = self.config.src.as_ref()?;\n+        let src = self.src.as_ref()?;\n         self.src_archive = Some(ArchiveRO::open(src).ok());\n         self.src_archive.as_ref().unwrap().as_ref()\n     }\n \n     fn llvm_archive_kind(&self) -> Result<ArchiveKind, &str> {\n-        let kind = &*self.config.sess.target.archive_format;\n+        let kind = &*self.sess.target.archive_format;\n         kind.parse().map_err(|_| kind)\n     }\n \n@@ -308,7 +301,7 @@ impl<'a> LlvmArchiveBuilder<'a> {\n         let mut strings = Vec::new();\n         let mut members = Vec::new();\n \n-        let dst = CString::new(self.config.dst.to_str().unwrap())?;\n+        let dst = CString::new(self.dst.to_str().unwrap())?;\n \n         unsafe {\n             if let Some(archive) = self.src_archive() {"}]}