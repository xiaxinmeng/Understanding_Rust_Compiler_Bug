{"sha": "0e6c3f29be98176c91aa77eb71c04cca18c51115", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBlNmMzZjI5YmU5ODE3NmM5MWFhNzdlYjcxYzA0Y2NhMThjNTExMTU=", "commit": {"author": {"name": "Raph Levien", "email": "raph.levien@gmail.com", "date": "2018-10-18T01:15:00Z"}, "committer": {"name": "Raph Levien", "email": "raph.levien@gmail.com", "date": "2018-10-18T01:15:00Z"}, "message": "Add a `copysign` function to f32 and f64\n\nThis patch adds a `copysign` function to the float primitive types.\nIt is an exceptionally useful function for writing efficient numeric\ncode, as it often avoids branches, is auto-vectorizable, and there\nare efficient intrinsics for most platforms.\n\nI think this might work as-is, as the relevant `copysign` intrinsic\nis already used internally for the implementation of `signum`. It's\npossible that an implementation might be needed in japaric/libm for\nportability across all platforms, in which case I'll do that also.\n\nPart of the work towards #55107", "tree": {"sha": "50d22acd767b9d2974c31c48f0e3aa1377b1e0db", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/50d22acd767b9d2974c31c48f0e3aa1377b1e0db"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0e6c3f29be98176c91aa77eb71c04cca18c51115", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0e6c3f29be98176c91aa77eb71c04cca18c51115", "html_url": "https://github.com/rust-lang/rust/commit/0e6c3f29be98176c91aa77eb71c04cca18c51115", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0e6c3f29be98176c91aa77eb71c04cca18c51115/comments", "author": {"login": "raphlinus", "id": 242367, "node_id": "MDQ6VXNlcjI0MjM2Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/242367?v=4", "gravatar_id": "", "url": "https://api.github.com/users/raphlinus", "html_url": "https://github.com/raphlinus", "followers_url": "https://api.github.com/users/raphlinus/followers", "following_url": "https://api.github.com/users/raphlinus/following{/other_user}", "gists_url": "https://api.github.com/users/raphlinus/gists{/gist_id}", "starred_url": "https://api.github.com/users/raphlinus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/raphlinus/subscriptions", "organizations_url": "https://api.github.com/users/raphlinus/orgs", "repos_url": "https://api.github.com/users/raphlinus/repos", "events_url": "https://api.github.com/users/raphlinus/events{/privacy}", "received_events_url": "https://api.github.com/users/raphlinus/received_events", "type": "User", "site_admin": false}, "committer": {"login": "raphlinus", "id": 242367, "node_id": "MDQ6VXNlcjI0MjM2Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/242367?v=4", "gravatar_id": "", "url": "https://api.github.com/users/raphlinus", "html_url": "https://github.com/raphlinus", "followers_url": "https://api.github.com/users/raphlinus/followers", "following_url": "https://api.github.com/users/raphlinus/following{/other_user}", "gists_url": "https://api.github.com/users/raphlinus/gists{/gist_id}", "starred_url": "https://api.github.com/users/raphlinus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/raphlinus/subscriptions", "organizations_url": "https://api.github.com/users/raphlinus/orgs", "repos_url": "https://api.github.com/users/raphlinus/repos", "events_url": "https://api.github.com/users/raphlinus/events{/privacy}", "received_events_url": "https://api.github.com/users/raphlinus/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5ea8eb55cd9f4547b332f43c9f723de30187c223", "url": "https://api.github.com/repos/rust-lang/rust/commits/5ea8eb55cd9f4547b332f43c9f723de30187c223", "html_url": "https://github.com/rust-lang/rust/commit/5ea8eb55cd9f4547b332f43c9f723de30187c223"}], "stats": {"total": 55, "additions": 55, "deletions": 0}, "files": [{"sha": "4ae8d2dcf16b09ca2432da8bf3dd948e9875ddab", "filename": "src/libstd/f32.rs", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/0e6c3f29be98176c91aa77eb71c04cca18c51115/src%2Flibstd%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e6c3f29be98176c91aa77eb71c04cca18c51115/src%2Flibstd%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ff32.rs?ref=0e6c3f29be98176c91aa77eb71c04cca18c51115", "patch": "@@ -198,6 +198,34 @@ impl f32 {\n         }\n     }\n \n+    /// Returns a number composed of the magnitude of one number and the sign of\n+    /// another.\n+    ///\n+    /// Equal to `self` if the sign of `self` and `y` are the same, otherwise\n+    /// equal to `-y`. If `self` is a `NAN`, then a `NAN` with the sign of `y`\n+    /// is returned.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(copysign)]\n+    /// use std::f32;\n+    ///\n+    /// let f = 3.5_f32;\n+    ///\n+    /// assert_eq!(f.copysign(0.42), 3.5_f32);\n+    /// assert_eq!(f.copysign(-0.42), -3.5_f32);\n+    /// assert_eq!((-f).copysign(0.42), 3.5_f32);\n+    /// assert_eq!((-f).copysign(-0.42), -3.5_f32);\n+    ///\n+    /// assert!(f32::NAN.copysign(1.0).is_nan());\n+    /// ```\n+    #[inline]\n+    #[unstable(feature=\"copysign\", issue=\"0\")]\n+    pub fn copysign(self, y: f32) -> f32 {\n+        unsafe { intrinsics::copysignf32(self, y) }\n+    }\n+\n     /// Fused multiply-add. Computes `(self * a) + b` with only one rounding\n     /// error, yielding a more accurate result than an unfused multiply-add.\n     ///"}, {"sha": "3b805d6fa42a61e5ee37ab973bdb6500ba99a60c", "filename": "src/libstd/f64.rs", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/0e6c3f29be98176c91aa77eb71c04cca18c51115/src%2Flibstd%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e6c3f29be98176c91aa77eb71c04cca18c51115/src%2Flibstd%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ff64.rs?ref=0e6c3f29be98176c91aa77eb71c04cca18c51115", "patch": "@@ -176,6 +176,33 @@ impl f64 {\n         }\n     }\n \n+    /// Returns a number composed of the magnitude of one number and the sign of\n+    /// another, or `NAN` if the number is `NAN`.\n+    ///\n+    /// Equal to `self` if the sign of `self` and `y` are the same, otherwise\n+    /// equal to `-y`.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(copysign)]\n+    /// use std::f64;\n+    ///\n+    /// let f = 3.5_f64;\n+    ///\n+    /// assert_eq!(f.copysign(0.42), 3.5_f64);\n+    /// assert_eq!(f.copysign(-0.42), -3.5_f64);\n+    /// assert_eq!((-f).copysign(0.42), 3.5_f64);\n+    /// assert_eq!((-f).copysign(-0.42), -3.5_f64);\n+    ///\n+    /// assert!(f64::NAN.copysign(1.0).is_nan());\n+    /// ```\n+    #[inline]\n+    #[unstable(feature=\"copysign\", issue=\"0\")]\n+    pub fn copysign(self, y: f64) -> f64 {\n+        unsafe { intrinsics::copysignf64(self, y) }\n+    }\n+\n     /// Fused multiply-add. Computes `(self * a) + b` with only one rounding\n     /// error, yielding a more accurate result than an unfused multiply-add.\n     ///"}]}