{"sha": "ae2a95fadc098b326f2114fc5ee6f55ee0db81a8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFlMmE5NWZhZGMwOThiMzI2ZjIxMTRmYzVlZTZmNTVlZTBkYjgxYTg=", "commit": {"author": {"name": "Cameron Steffen", "email": "cam.steffen94@gmail.com", "date": "2021-09-09T20:36:06Z"}, "committer": {"name": "Cameron Steffen", "email": "cam.steffen94@gmail.com", "date": "2021-09-09T22:10:59Z"}, "message": "Eat dogfood", "tree": {"sha": "77922275c9d4ceab302835c8d373fe706a5b58e2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/77922275c9d4ceab302835c8d373fe706a5b58e2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ae2a95fadc098b326f2114fc5ee6f55ee0db81a8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ae2a95fadc098b326f2114fc5ee6f55ee0db81a8", "html_url": "https://github.com/rust-lang/rust/commit/ae2a95fadc098b326f2114fc5ee6f55ee0db81a8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ae2a95fadc098b326f2114fc5ee6f55ee0db81a8/comments", "author": {"login": "camsteffen", "id": 5565418, "node_id": "MDQ6VXNlcjU1NjU0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5565418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camsteffen", "html_url": "https://github.com/camsteffen", "followers_url": "https://api.github.com/users/camsteffen/followers", "following_url": "https://api.github.com/users/camsteffen/following{/other_user}", "gists_url": "https://api.github.com/users/camsteffen/gists{/gist_id}", "starred_url": "https://api.github.com/users/camsteffen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camsteffen/subscriptions", "organizations_url": "https://api.github.com/users/camsteffen/orgs", "repos_url": "https://api.github.com/users/camsteffen/repos", "events_url": "https://api.github.com/users/camsteffen/events{/privacy}", "received_events_url": "https://api.github.com/users/camsteffen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camsteffen", "id": 5565418, "node_id": "MDQ6VXNlcjU1NjU0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5565418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camsteffen", "html_url": "https://github.com/camsteffen", "followers_url": "https://api.github.com/users/camsteffen/followers", "following_url": "https://api.github.com/users/camsteffen/following{/other_user}", "gists_url": "https://api.github.com/users/camsteffen/gists{/gist_id}", "starred_url": "https://api.github.com/users/camsteffen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camsteffen/subscriptions", "organizations_url": "https://api.github.com/users/camsteffen/orgs", "repos_url": "https://api.github.com/users/camsteffen/repos", "events_url": "https://api.github.com/users/camsteffen/events{/privacy}", "received_events_url": "https://api.github.com/users/camsteffen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5782dc0eb992a4975eca370345e1ba455d12faa4", "url": "https://api.github.com/repos/rust-lang/rust/commits/5782dc0eb992a4975eca370345e1ba455d12faa4", "html_url": "https://github.com/rust-lang/rust/commit/5782dc0eb992a4975eca370345e1ba455d12faa4"}], "stats": {"total": 102, "additions": 45, "deletions": 57}, "files": [{"sha": "6c861fb33a9787fa407b7b2d7cd536697a30b0bc", "filename": "clippy_lints/src/disallowed_type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ae2a95fadc098b326f2114fc5ee6f55ee0db81a8/clippy_lints%2Fsrc%2Fdisallowed_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae2a95fadc098b326f2114fc5ee6f55ee0db81a8/clippy_lints%2Fsrc%2Fdisallowed_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdisallowed_type.rs?ref=ae2a95fadc098b326f2114fc5ee6f55ee0db81a8", "patch": "@@ -48,7 +48,7 @@ impl DisallowedType {\n         Self {\n             disallowed: disallowed\n                 .iter()\n-                .map(|s| s.split(\"::\").map(|seg| Symbol::intern(seg)).collect::<Vec<_>>())\n+                .map(|s| s.split(\"::\").map(Symbol::intern).collect::<Vec<_>>())\n                 .collect(),\n             def_ids: FxHashSet::default(),\n             prim_tys: FxHashSet::default(),"}, {"sha": "508cac33848f76d0b081bbc5189c3882894c2fa3", "filename": "clippy_lints/src/format.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ae2a95fadc098b326f2114fc5ee6f55ee0db81a8/clippy_lints%2Fsrc%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae2a95fadc098b326f2114fc5ee6f55ee0db81a8/clippy_lints%2Fsrc%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fformat.rs?ref=ae2a95fadc098b326f2114fc5ee6f55ee0db81a8", "patch": "@@ -69,8 +69,8 @@ impl<'tcx> LateLintPass<'tcx> for UselessFormat {\n                     ty::Str => true,\n                     _ => false,\n                 };\n-                if format_args.args.iter().all(|e| is_display_arg(e));\n-                if format_args.fmt_expr.map_or(true, |e| check_unformatted(e));\n+                if format_args.args.iter().all(is_display_arg);\n+                if format_args.fmt_expr.map_or(true, check_unformatted);\n                 then {\n                     let is_new_string = match value.kind {\n                         ExprKind::Binary(..) => true,"}, {"sha": "4dcd5c87722eec0f8c9e43f0e4f9fa6a4efc0cc5", "filename": "clippy_lints/src/loops/while_let_loop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ae2a95fadc098b326f2114fc5ee6f55ee0db81a8/clippy_lints%2Fsrc%2Floops%2Fwhile_let_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae2a95fadc098b326f2114fc5ee6f55ee0db81a8/clippy_lints%2Fsrc%2Floops%2Fwhile_let_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Fwhile_let_loop.rs?ref=ae2a95fadc098b326f2114fc5ee6f55ee0db81a8", "patch": "@@ -65,7 +65,7 @@ fn extract_first_expr<'tcx>(block: &Block<'tcx>) -> Option<&'tcx Expr<'tcx>> {\n fn is_simple_break_expr(expr: &Expr<'_>) -> bool {\n     match expr.kind {\n         ExprKind::Break(dest, ref passed_expr) if dest.label.is_none() && passed_expr.is_none() => true,\n-        ExprKind::Block(b, _) => extract_first_expr(b).map_or(false, |subexpr| is_simple_break_expr(subexpr)),\n+        ExprKind::Block(b, _) => extract_first_expr(b).map_or(false, is_simple_break_expr),\n         _ => false,\n     }\n }"}, {"sha": "d696e17d656d49fd2427762e37657ac864ea373e", "filename": "clippy_lints/src/ptr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ae2a95fadc098b326f2114fc5ee6f55ee0db81a8/clippy_lints%2Fsrc%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae2a95fadc098b326f2114fc5ee6f55ee0db81a8/clippy_lints%2Fsrc%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fptr.rs?ref=ae2a95fadc098b326f2114fc5ee6f55ee0db81a8", "patch": "@@ -372,7 +372,7 @@ fn check_fn(cx: &LateContext<'_>, decl: &FnDecl<'_>, fn_id: HirId, opt_body_id:\n             for (_, ref mutbl, ref argspan) in decl\n                 .inputs\n                 .iter()\n-                .filter_map(|ty| get_rptr_lm(ty))\n+                .filter_map(get_rptr_lm)\n                 .filter(|&(lt, _, _)| lt.name == out.name)\n             {\n                 if *mutbl == Mutability::Mut {"}, {"sha": "2fa98831c7740aa31e7765ddf463cb36eba3d658", "filename": "clippy_utils/src/ast_utils.rs", "status": "modified", "additions": 37, "deletions": 48, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/ae2a95fadc098b326f2114fc5ee6f55ee0db81a8/clippy_utils%2Fsrc%2Fast_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae2a95fadc098b326f2114fc5ee6f55ee0db81a8/clippy_utils%2Fsrc%2Fast_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fast_utils.rs?ref=ae2a95fadc098b326f2114fc5ee6f55ee0db81a8", "patch": "@@ -46,15 +46,12 @@ pub fn eq_pat(l: &Pat, r: &Pat) -> bool {\n         | (Ref(l, Mutability::Not), Ref(r, Mutability::Not))\n         | (Ref(l, Mutability::Mut), Ref(r, Mutability::Mut)) => eq_pat(l, r),\n         (Tuple(l), Tuple(r)) | (Slice(l), Slice(r)) => over(l, r, |l, r| eq_pat(l, r)),\n-        (Path(lq, lp), Path(rq, rp)) => both(lq, rq, |l, r| eq_qself(l, r)) && eq_path(lp, rp),\n+        (Path(lq, lp), Path(rq, rp)) => both(lq, rq, eq_qself) && eq_path(lp, rp),\n         (TupleStruct(lqself, lp, lfs), TupleStruct(rqself, rp, rfs)) => {\n             eq_maybe_qself(lqself, rqself) && eq_path(lp, rp) && over(lfs, rfs, |l, r| eq_pat(l, r))\n         },\n         (Struct(lqself, lp, lfs, lr), Struct(rqself, rp, rfs, rr)) => {\n-            lr == rr\n-                && eq_maybe_qself(lqself, rqself)\n-                && eq_path(lp, rp)\n-                && unordered_over(lfs, rfs, |lf, rf| eq_field_pat(lf, rf))\n+            lr == rr && eq_maybe_qself(lqself, rqself) && eq_path(lp, rp) && unordered_over(lfs, rfs, eq_field_pat)\n         },\n         (Or(ls), Or(rs)) => unordered_over(ls, rs, |l, r| eq_pat(l, r)),\n         (MacCall(l), MacCall(r)) => eq_mac_call(l, r),\n@@ -76,7 +73,7 @@ pub fn eq_field_pat(l: &PatField, r: &PatField) -> bool {\n     l.is_placeholder == r.is_placeholder\n         && eq_id(l.ident, r.ident)\n         && eq_pat(&l.pat, &r.pat)\n-        && over(&l.attrs, &r.attrs, |l, r| eq_attr(l, r))\n+        && over(&l.attrs, &r.attrs, eq_attr)\n }\n \n pub fn eq_qself(l: &QSelf, r: &QSelf) -> bool {\n@@ -92,7 +89,7 @@ pub fn eq_maybe_qself(l: &Option<QSelf>, r: &Option<QSelf>) -> bool {\n }\n \n pub fn eq_path(l: &Path, r: &Path) -> bool {\n-    over(&l.segments, &r.segments, |l, r| eq_path_seg(l, r))\n+    over(&l.segments, &r.segments, eq_path_seg)\n }\n \n pub fn eq_path_seg(l: &PathSegment, r: &PathSegment) -> bool {\n@@ -101,9 +98,7 @@ pub fn eq_path_seg(l: &PathSegment, r: &PathSegment) -> bool {\n \n pub fn eq_generic_args(l: &GenericArgs, r: &GenericArgs) -> bool {\n     match (l, r) {\n-        (GenericArgs::AngleBracketed(l), GenericArgs::AngleBracketed(r)) => {\n-            over(&l.args, &r.args, |l, r| eq_angle_arg(l, r))\n-        },\n+        (GenericArgs::AngleBracketed(l), GenericArgs::AngleBracketed(r)) => over(&l.args, &r.args, eq_angle_arg),\n         (GenericArgs::Parenthesized(l), GenericArgs::Parenthesized(r)) => {\n             over(&l.inputs, &r.inputs, |l, r| eq_ty(l, r)) && eq_fn_ret_ty(&l.output, &r.output)\n         },\n@@ -142,7 +137,7 @@ pub fn eq_struct_rest(l: &StructRest, r: &StructRest) -> bool {\n \n pub fn eq_expr(l: &Expr, r: &Expr) -> bool {\n     use ExprKind::*;\n-    if !over(&l.attrs, &r.attrs, |l, r| eq_attr(l, r)) {\n+    if !over(&l.attrs, &r.attrs, eq_attr) {\n         return false;\n     }\n     match (&l.kind, &r.kind) {\n@@ -173,20 +168,20 @@ pub fn eq_expr(l: &Expr, r: &Expr) -> bool {\n         (Assign(l1, l2, _), Assign(r1, r2, _)) | (Index(l1, l2), Index(r1, r2)) => eq_expr(l1, r1) && eq_expr(l2, r2),\n         (AssignOp(lo, lp, lv), AssignOp(ro, rp, rv)) => lo.node == ro.node && eq_expr(lp, rp) && eq_expr(lv, rv),\n         (Field(lp, lf), Field(rp, rf)) => eq_id(*lf, *rf) && eq_expr(lp, rp),\n-        (Match(ls, la), Match(rs, ra)) => eq_expr(ls, rs) && over(la, ra, |l, r| eq_arm(l, r)),\n+        (Match(ls, la), Match(rs, ra)) => eq_expr(ls, rs) && over(la, ra, eq_arm),\n         (Closure(lc, la, lm, lf, lb, _), Closure(rc, ra, rm, rf, rb, _)) => {\n             lc == rc && la.is_async() == ra.is_async() && lm == rm && eq_fn_decl(lf, rf) && eq_expr(lb, rb)\n         },\n         (Async(lc, _, lb), Async(rc, _, rb)) => lc == rc && eq_block(lb, rb),\n         (Range(lf, lt, ll), Range(rf, rt, rl)) => ll == rl && eq_expr_opt(lf, rf) && eq_expr_opt(lt, rt),\n         (AddrOf(lbk, lm, le), AddrOf(rbk, rm, re)) => lbk == rbk && lm == rm && eq_expr(le, re),\n-        (Path(lq, lp), Path(rq, rp)) => both(lq, rq, |l, r| eq_qself(l, r)) && eq_path(lp, rp),\n+        (Path(lq, lp), Path(rq, rp)) => both(lq, rq, eq_qself) && eq_path(lp, rp),\n         (MacCall(l), MacCall(r)) => eq_mac_call(l, r),\n         (Struct(lse), Struct(rse)) => {\n             eq_maybe_qself(&lse.qself, &rse.qself)\n                 && eq_path(&lse.path, &rse.path)\n                 && eq_struct_rest(&lse.rest, &rse.rest)\n-                && unordered_over(&lse.fields, &rse.fields, |l, r| eq_field(l, r))\n+                && unordered_over(&lse.fields, &rse.fields, eq_field)\n         },\n         _ => false,\n     }\n@@ -196,23 +191,23 @@ pub fn eq_field(l: &ExprField, r: &ExprField) -> bool {\n     l.is_placeholder == r.is_placeholder\n         && eq_id(l.ident, r.ident)\n         && eq_expr(&l.expr, &r.expr)\n-        && over(&l.attrs, &r.attrs, |l, r| eq_attr(l, r))\n+        && over(&l.attrs, &r.attrs, eq_attr)\n }\n \n pub fn eq_arm(l: &Arm, r: &Arm) -> bool {\n     l.is_placeholder == r.is_placeholder\n         && eq_pat(&l.pat, &r.pat)\n         && eq_expr(&l.body, &r.body)\n         && eq_expr_opt(&l.guard, &r.guard)\n-        && over(&l.attrs, &r.attrs, |l, r| eq_attr(l, r))\n+        && over(&l.attrs, &r.attrs, eq_attr)\n }\n \n pub fn eq_label(l: &Option<Label>, r: &Option<Label>) -> bool {\n     both(l, r, |l, r| eq_id(l.ident, r.ident))\n }\n \n pub fn eq_block(l: &Block, r: &Block) -> bool {\n-    l.rules == r.rules && over(&l.stmts, &r.stmts, |l, r| eq_stmt(l, r))\n+    l.rules == r.rules && over(&l.stmts, &r.stmts, eq_stmt)\n }\n \n pub fn eq_stmt(l: &Stmt, r: &Stmt) -> bool {\n@@ -222,13 +217,13 @@ pub fn eq_stmt(l: &Stmt, r: &Stmt) -> bool {\n             eq_pat(&l.pat, &r.pat)\n                 && both(&l.ty, &r.ty, |l, r| eq_ty(l, r))\n                 && eq_local_kind(&l.kind, &r.kind)\n-                && over(&l.attrs, &r.attrs, |l, r| eq_attr(l, r))\n+                && over(&l.attrs, &r.attrs, eq_attr)\n         },\n         (Item(l), Item(r)) => eq_item(l, r, eq_item_kind),\n         (Expr(l), Expr(r)) | (Semi(l), Semi(r)) => eq_expr(l, r),\n         (Empty, Empty) => true,\n         (MacCall(l), MacCall(r)) => {\n-            l.style == r.style && eq_mac_call(&l.mac, &r.mac) && over(&l.attrs, &r.attrs, |l, r| eq_attr(l, r))\n+            l.style == r.style && eq_mac_call(&l.mac, &r.mac) && over(&l.attrs, &r.attrs, eq_attr)\n         },\n         _ => false,\n     }\n@@ -245,10 +240,7 @@ pub fn eq_local_kind(l: &LocalKind, r: &LocalKind) -> bool {\n }\n \n pub fn eq_item<K>(l: &Item<K>, r: &Item<K>, mut eq_kind: impl FnMut(&K, &K) -> bool) -> bool {\n-    eq_id(l.ident, r.ident)\n-        && over(&l.attrs, &r.attrs, |l, r| eq_attr(l, r))\n-        && eq_vis(&l.vis, &r.vis)\n-        && eq_kind(&l.kind, &r.kind)\n+    eq_id(l.ident, r.ident) && over(&l.attrs, &r.attrs, eq_attr) && eq_vis(&l.vis, &r.vis) && eq_kind(&l.kind, &r.kind)\n }\n \n pub fn eq_item_kind(l: &ItemKind, r: &ItemKind) -> bool {\n@@ -272,29 +264,26 @@ pub fn eq_item_kind(l: &ItemKind, r: &ItemKind) -> bool {\n                 }\n         },\n         (ForeignMod(l), ForeignMod(r)) => {\n-            both(&l.abi, &r.abi, |l, r| eq_str_lit(l, r))\n-                && over(&l.items, &r.items, |l, r| eq_item(l, r, eq_foreign_item_kind))\n+            both(&l.abi, &r.abi, eq_str_lit) && over(&l.items, &r.items, |l, r| eq_item(l, r, eq_foreign_item_kind))\n         },\n         (TyAlias(box TyAliasKind(ld, lg, lb, lt)), TyAlias(box TyAliasKind(rd, rg, rb, rt))) => {\n             eq_defaultness(*ld, *rd)\n                 && eq_generics(lg, rg)\n-                && over(lb, rb, |l, r| eq_generic_bound(l, r))\n+                && over(lb, rb, eq_generic_bound)\n                 && both(lt, rt, |l, r| eq_ty(l, r))\n         },\n-        (Enum(le, lg), Enum(re, rg)) => {\n-            over(&le.variants, &re.variants, |l, r| eq_variant(l, r)) && eq_generics(lg, rg)\n-        },\n+        (Enum(le, lg), Enum(re, rg)) => over(&le.variants, &re.variants, eq_variant) && eq_generics(lg, rg),\n         (Struct(lv, lg), Struct(rv, rg)) | (Union(lv, lg), Union(rv, rg)) => {\n             eq_variant_data(lv, rv) && eq_generics(lg, rg)\n         },\n         (Trait(box TraitKind(la, lu, lg, lb, li)), Trait(box TraitKind(ra, ru, rg, rb, ri))) => {\n             la == ra\n                 && matches!(lu, Unsafe::No) == matches!(ru, Unsafe::No)\n                 && eq_generics(lg, rg)\n-                && over(lb, rb, |l, r| eq_generic_bound(l, r))\n+                && over(lb, rb, eq_generic_bound)\n                 && over(li, ri, |l, r| eq_item(l, r, eq_assoc_item_kind))\n         },\n-        (TraitAlias(lg, lb), TraitAlias(rg, rb)) => eq_generics(lg, rg) && over(lb, rb, |l, r| eq_generic_bound(l, r)),\n+        (TraitAlias(lg, lb), TraitAlias(rg, rb)) => eq_generics(lg, rg) && over(lb, rb, eq_generic_bound),\n         (\n             Impl(box ImplKind {\n                 unsafety: lu,\n@@ -342,7 +331,7 @@ pub fn eq_foreign_item_kind(l: &ForeignItemKind, r: &ForeignItemKind) -> bool {\n         (TyAlias(box TyAliasKind(ld, lg, lb, lt)), TyAlias(box TyAliasKind(rd, rg, rb, rt))) => {\n             eq_defaultness(*ld, *rd)\n                 && eq_generics(lg, rg)\n-                && over(lb, rb, |l, r| eq_generic_bound(l, r))\n+                && over(lb, rb, eq_generic_bound)\n                 && both(lt, rt, |l, r| eq_ty(l, r))\n         },\n         (MacCall(l), MacCall(r)) => eq_mac_call(l, r),\n@@ -360,7 +349,7 @@ pub fn eq_assoc_item_kind(l: &AssocItemKind, r: &AssocItemKind) -> bool {\n         (TyAlias(box TyAliasKind(ld, lg, lb, lt)), TyAlias(box TyAliasKind(rd, rg, rb, rt))) => {\n             eq_defaultness(*ld, *rd)\n                 && eq_generics(lg, rg)\n-                && over(lb, rb, |l, r| eq_generic_bound(l, r))\n+                && over(lb, rb, eq_generic_bound)\n                 && both(lt, rt, |l, r| eq_ty(l, r))\n         },\n         (MacCall(l), MacCall(r)) => eq_mac_call(l, r),\n@@ -370,7 +359,7 @@ pub fn eq_assoc_item_kind(l: &AssocItemKind, r: &AssocItemKind) -> bool {\n \n pub fn eq_variant(l: &Variant, r: &Variant) -> bool {\n     l.is_placeholder == r.is_placeholder\n-        && over(&l.attrs, &r.attrs, |l, r| eq_attr(l, r))\n+        && over(&l.attrs, &r.attrs, eq_attr)\n         && eq_vis(&l.vis, &r.vis)\n         && eq_id(l.ident, r.ident)\n         && eq_variant_data(&l.data, &r.data)\n@@ -381,14 +370,14 @@ pub fn eq_variant_data(l: &VariantData, r: &VariantData) -> bool {\n     use VariantData::*;\n     match (l, r) {\n         (Unit(_), Unit(_)) => true,\n-        (Struct(l, _), Struct(r, _)) | (Tuple(l, _), Tuple(r, _)) => over(l, r, |l, r| eq_struct_field(l, r)),\n+        (Struct(l, _), Struct(r, _)) | (Tuple(l, _), Tuple(r, _)) => over(l, r, eq_struct_field),\n         _ => false,\n     }\n }\n \n pub fn eq_struct_field(l: &FieldDef, r: &FieldDef) -> bool {\n     l.is_placeholder == r.is_placeholder\n-        && over(&l.attrs, &r.attrs, |l, r| eq_attr(l, r))\n+        && over(&l.attrs, &r.attrs, eq_attr)\n         && eq_vis(&l.vis, &r.vis)\n         && both(&l.ident, &r.ident, |l, r| eq_id(*l, *r))\n         && eq_ty(&l.ty, &r.ty)\n@@ -406,7 +395,7 @@ pub fn eq_fn_header(l: &FnHeader, r: &FnHeader) -> bool {\n }\n \n pub fn eq_generics(l: &Generics, r: &Generics) -> bool {\n-    over(&l.params, &r.params, |l, r| eq_generic_param(l, r))\n+    over(&l.params, &r.params, eq_generic_param)\n         && over(&l.where_clause.predicates, &r.where_clause.predicates, |l, r| {\n             eq_where_predicate(l, r)\n         })\n@@ -419,10 +408,10 @@ pub fn eq_where_predicate(l: &WherePredicate, r: &WherePredicate) -> bool {\n             over(&l.bound_generic_params, &r.bound_generic_params, |l, r| {\n                 eq_generic_param(l, r)\n             }) && eq_ty(&l.bounded_ty, &r.bounded_ty)\n-                && over(&l.bounds, &r.bounds, |l, r| eq_generic_bound(l, r))\n+                && over(&l.bounds, &r.bounds, eq_generic_bound)\n         },\n         (RegionPredicate(l), RegionPredicate(r)) => {\n-            eq_id(l.lifetime.ident, r.lifetime.ident) && over(&l.bounds, &r.bounds, |l, r| eq_generic_bound(l, r))\n+            eq_id(l.lifetime.ident, r.lifetime.ident) && over(&l.bounds, &r.bounds, eq_generic_bound)\n         },\n         (EqPredicate(l), EqPredicate(r)) => eq_ty(&l.lhs_ty, &r.lhs_ty) && eq_ty(&l.rhs_ty, &r.rhs_ty),\n         _ => false,\n@@ -469,7 +458,7 @@ pub fn eq_fn_decl(l: &FnDecl, r: &FnDecl) -> bool {\n             l.is_placeholder == r.is_placeholder\n                 && eq_pat(&l.pat, &r.pat)\n                 && eq_ty(&l.ty, &r.ty)\n-                && over(&l.attrs, &r.attrs, |l, r| eq_attr(l, r))\n+                && over(&l.attrs, &r.attrs, eq_attr)\n         })\n }\n \n@@ -496,13 +485,13 @@ pub fn eq_ty(l: &Ty, r: &Ty) -> bool {\n         (BareFn(l), BareFn(r)) => {\n             l.unsafety == r.unsafety\n                 && eq_ext(&l.ext, &r.ext)\n-                && over(&l.generic_params, &r.generic_params, |l, r| eq_generic_param(l, r))\n+                && over(&l.generic_params, &r.generic_params, eq_generic_param)\n                 && eq_fn_decl(&l.decl, &r.decl)\n         },\n         (Tup(l), Tup(r)) => over(l, r, |l, r| eq_ty(l, r)),\n-        (Path(lq, lp), Path(rq, rp)) => both(lq, rq, |l, r| eq_qself(l, r)) && eq_path(lp, rp),\n-        (TraitObject(lg, ls), TraitObject(rg, rs)) => ls == rs && over(lg, rg, |l, r| eq_generic_bound(l, r)),\n-        (ImplTrait(_, lg), ImplTrait(_, rg)) => over(lg, rg, |l, r| eq_generic_bound(l, r)),\n+        (Path(lq, lp), Path(rq, rp)) => both(lq, rq, eq_qself) && eq_path(lp, rp),\n+        (TraitObject(lg, ls), TraitObject(rg, rs)) => ls == rs && over(lg, rg, eq_generic_bound),\n+        (ImplTrait(_, lg), ImplTrait(_, rg)) => over(lg, rg, eq_generic_bound),\n         (Typeof(l), Typeof(r)) => eq_expr(&l.value, &r.value),\n         (MacCall(l), MacCall(r)) => eq_mac_call(l, r),\n         _ => false,\n@@ -533,7 +522,7 @@ pub fn eq_generic_param(l: &GenericParam, r: &GenericParam) -> bool {\n     use GenericParamKind::*;\n     l.is_placeholder == r.is_placeholder\n         && eq_id(l.ident, r.ident)\n-        && over(&l.bounds, &r.bounds, |l, r| eq_generic_bound(l, r))\n+        && over(&l.bounds, &r.bounds, eq_generic_bound)\n         && match (&l.kind, &r.kind) {\n             (Lifetime, Lifetime) => true,\n             (Type { default: l }, Type { default: r }) => both(l, r, |l, r| eq_ty(l, r)),\n@@ -548,10 +537,10 @@ pub fn eq_generic_param(l: &GenericParam, r: &GenericParam) -> bool {\n                     kw_span: _,\n                     default: rd,\n                 },\n-            ) => eq_ty(lt, rt) && both(ld, rd, |ld, rd| eq_anon_const(ld, rd)),\n+            ) => eq_ty(lt, rt) && both(ld, rd, eq_anon_const),\n             _ => false,\n         }\n-        && over(&l.attrs, &r.attrs, |l, r| eq_attr(l, r))\n+        && over(&l.attrs, &r.attrs, eq_attr)\n }\n \n pub fn eq_generic_bound(l: &GenericBound, r: &GenericBound) -> bool {\n@@ -568,7 +557,7 @@ pub fn eq_assoc_constraint(l: &AssocTyConstraint, r: &AssocTyConstraint) -> bool\n     eq_id(l.ident, r.ident)\n         && match (&l.kind, &r.kind) {\n             (Equality { ty: l }, Equality { ty: r }) => eq_ty(l, r),\n-            (Bound { bounds: l }, Bound { bounds: r }) => over(l, r, |l, r| eq_generic_bound(l, r)),\n+            (Bound { bounds: l }, Bound { bounds: r }) => over(l, r, eq_generic_bound),\n             _ => false,\n         }\n }"}, {"sha": "9650294fc7b879f93450bbf5da74bc64da5abda2", "filename": "clippy_utils/src/eager_or_lazy.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ae2a95fadc098b326f2114fc5ee6f55ee0db81a8/clippy_utils%2Fsrc%2Feager_or_lazy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae2a95fadc098b326f2114fc5ee6f55ee0db81a8/clippy_utils%2Fsrc%2Feager_or_lazy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Feager_or_lazy.rs?ref=ae2a95fadc098b326f2114fc5ee6f55ee0db81a8", "patch": "@@ -27,10 +27,9 @@ fn identify_some_pure_patterns(expr: &Expr<'_>) -> bool {\n     match expr.kind {\n         ExprKind::Lit(..) | ExprKind::ConstBlock(..) | ExprKind::Path(..) | ExprKind::Field(..) => true,\n         ExprKind::AddrOf(_, _, addr_of_expr) => identify_some_pure_patterns(addr_of_expr),\n-        ExprKind::Tup(tup_exprs) => tup_exprs.iter().all(|expr| identify_some_pure_patterns(expr)),\n+        ExprKind::Tup(tup_exprs) => tup_exprs.iter().all(identify_some_pure_patterns),\n         ExprKind::Struct(_, fields, expr) => {\n-            fields.iter().all(|f| identify_some_pure_patterns(f.expr))\n-                && expr.map_or(true, |e| identify_some_pure_patterns(e))\n+            fields.iter().all(|f| identify_some_pure_patterns(f.expr)) && expr.map_or(true, identify_some_pure_patterns)\n         },\n         ExprKind::Call(\n             &Expr {\n@@ -45,7 +44,7 @@ fn identify_some_pure_patterns(expr: &Expr<'_>) -> bool {\n                 ..\n             },\n             args,\n-        ) => args.iter().all(|expr| identify_some_pure_patterns(expr)),\n+        ) => args.iter().all(identify_some_pure_patterns),\n         ExprKind::Block(\n             &Block {\n                 stmts,"}]}