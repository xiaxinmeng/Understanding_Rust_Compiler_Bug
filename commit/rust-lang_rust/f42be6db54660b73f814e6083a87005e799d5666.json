{"sha": "f42be6db54660b73f814e6083a87005e799d5666", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY0MmJlNmRiNTQ2NjBiNzNmODE0ZTYwODNhODcwMDVlNzk5ZDU2NjY=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-06-06T13:22:33Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-06-08T07:41:25Z"}, "message": "move load_mir to the global eval context", "tree": {"sha": "73064e7f6daebf9e0ba6d7e10c9d48696212d1ce", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/73064e7f6daebf9e0ba6d7e10c9d48696212d1ce"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f42be6db54660b73f814e6083a87005e799d5666", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJXV8woAAoJEFbW7qD8Z6xGU6gP+gMTLnpCCyTfVcrarZFyud53\n8+RYfTbh6JdHI6wZTOaFfc53nNa2IkbUYQ5dM0S0gzmq2OzvE08I5Yb0dPbFU71u\nd/oYx5zSvVlxWm8MOfOu1X8Na5QZ55A3K4jmjSuZdkT3NWqkiDr83QoGmiq2reXk\nxOT9hZCbFGJUwSv88z9cYpZceIpL2DPKbkVdWQktLABcjdN/FR9uzhgQ2bjsiQuv\nx9jYvb0tqVTWmo2U7tfibSUInqqlIALe3DOHwBz8zb3imQRd8NopMX96KsQ1Jxm/\nYFV+1RHRqG4hq+TAOvr4I6c11i9VAH009QPZpgCAo0akSQehg6RIh3MEJoWDGika\nMgcS9QtLSgLBmDLS3Ltl+NN6olv8SV0VOYeQCUiFkjdosts3ytMIWkzqvzzzfnP0\nDUAgNjjh9jHGZ6NkkkZkpI0rQYORF/2F3LA1AZUxWiGkFmyTDbqnNVmsAlX0vTeb\nE7zL36Donw4zFxD3RQZo/3wWbioYdxPz1yYjNF49e/pTYLo7or4LWLX/SXNDnz7R\ndR2NCWR3dnyUB0rySe4td1BJyXmXh6g9/ZZcoTytEzx6fwPyFW8MZon7uS84BoKG\nguHjAgoXunLz1RdDA9GJRVJX01XWIzttyf6cT/0+4Yw3ziDAXL/YS6fDM1dm384/\nnDLYIQLHayPWHFPjnvs1\n=4n3O\n-----END PGP SIGNATURE-----", "payload": "tree 73064e7f6daebf9e0ba6d7e10c9d48696212d1ce\nparent 4d44a970a39d4bd6ec517b3958e180def9040e3d\nauthor Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1465219353 +0200\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1465371685 +0200\n\nmove load_mir to the global eval context\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f42be6db54660b73f814e6083a87005e799d5666", "html_url": "https://github.com/rust-lang/rust/commit/f42be6db54660b73f814e6083a87005e799d5666", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f42be6db54660b73f814e6083a87005e799d5666/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4d44a970a39d4bd6ec517b3958e180def9040e3d", "url": "https://api.github.com/repos/rust-lang/rust/commits/4d44a970a39d4bd6ec517b3958e180def9040e3d", "html_url": "https://github.com/rust-lang/rust/commit/4d44a970a39d4bd6ec517b3958e180def9040e3d"}], "stats": {"total": 89, "additions": 45, "deletions": 44}, "files": [{"sha": "22db69a2afff8063359c005fd40d9914bad9fc46", "filename": "src/interpreter/mod.rs", "status": "modified", "additions": 20, "deletions": 24, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/f42be6db54660b73f814e6083a87005e799d5666/src%2Finterpreter%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f42be6db54660b73f814e6083a87005e799d5666/src%2Finterpreter%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finterpreter%2Fmod.rs?ref=f42be6db54660b73f814e6083a87005e799d5666", "patch": "@@ -317,6 +317,26 @@ impl<'a, 'tcx> GlobalEvalContext<'a, 'tcx> {\n             vtable => unreachable!(\"resolved vtable bad vtable {:?} in trans\", vtable),\n         }\n     }\n+\n+    fn load_mir(&self, def_id: DefId) -> CachedMir<'a, 'tcx> {\n+        match self.tcx.map.as_local_node_id(def_id) {\n+            Some(node_id) => CachedMir::Ref(self.mir_map.map.get(&node_id).unwrap()),\n+            None => {\n+                let mut mir_cache = self.mir_cache.borrow_mut();\n+                if let Some(mir) = mir_cache.get(&def_id) {\n+                    return CachedMir::Owned(mir.clone());\n+                }\n+\n+                let cs = &self.tcx.sess.cstore;\n+                let mir = cs.maybe_get_item_mir(self.tcx, def_id).unwrap_or_else(|| {\n+                    panic!(\"no mir for {:?}\", def_id);\n+                });\n+                let cached = Rc::new(mir);\n+                mir_cache.insert(def_id, cached.clone());\n+                CachedMir::Owned(cached)\n+            }\n+        }\n+    }\n }\n \n impl<'a, 'b, 'mir, 'tcx> FnEvalContext<'a, 'b, 'mir, 'tcx> {\n@@ -1430,30 +1450,6 @@ impl<'a, 'b, 'mir, 'tcx> FnEvalContext<'a, 'b, 'mir, 'tcx> {\n     fn mir(&self) -> CachedMir<'mir, 'tcx> {\n         self.frame().mir.clone()\n     }\n-\n-    fn substs(&self) -> &'tcx Substs<'tcx> {\n-        self.frame().substs\n-    }\n-\n-    fn load_mir(&self, def_id: DefId) -> CachedMir<'mir, 'tcx> {\n-        match self.tcx.map.as_local_node_id(def_id) {\n-            Some(node_id) => CachedMir::Ref(self.mir_map.map.get(&node_id).unwrap()),\n-            None => {\n-                let mut mir_cache = self.mir_cache.borrow_mut();\n-                if let Some(mir) = mir_cache.get(&def_id) {\n-                    return CachedMir::Owned(mir.clone());\n-                }\n-\n-                let cs = &self.tcx.sess.cstore;\n-                let mir = cs.maybe_get_item_mir(self.tcx, def_id).unwrap_or_else(|| {\n-                    panic!(\"no mir for {:?}\", def_id);\n-                });\n-                let cached = Rc::new(mir);\n-                mir_cache.insert(def_id, cached.clone());\n-                CachedMir::Owned(cached)\n-            }\n-        }\n-    }\n }\n \n fn pointee_type(ptr_ty: ty::Ty) -> Option<ty::Ty> {"}, {"sha": "6fb287228be88d25221686f81e54498f9e9435bd", "filename": "src/interpreter/stepper.rs", "status": "modified", "additions": 25, "deletions": 20, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/f42be6db54660b73f814e6083a87005e799d5666/src%2Finterpreter%2Fstepper.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f42be6db54660b73f814e6083a87005e799d5666/src%2Finterpreter%2Fstepper.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finterpreter%2Fstepper.rs?ref=f42be6db54660b73f814e6083a87005e799d5666", "patch": "@@ -3,6 +3,7 @@ use super::{\n     CachedMir,\n     TerminatorTarget,\n     ConstantId,\n+    GlobalEvalContext\n };\n use error::EvalResult;\n use rustc::mir::repr as mir;\n@@ -102,8 +103,9 @@ impl<'fncx, 'a, 'b: 'a + 'mir, 'mir, 'tcx: 'b> Stepper<'fncx, 'a, 'b, 'mir, 'tcx\n             assert!(self.fncx.frame().constants.is_empty());\n             ConstantExtractor {\n                 span: stmt.span,\n-                fncx: self.fncx,\n                 mir: &self.mir,\n+                gecx: self.fncx.gecx,\n+                frame: self.fncx.stack.last_mut().expect(\"stack empty\"),\n             }.visit_statement(block, stmt);\n             if self.fncx.frame().constants.is_empty() {\n                 self.process = Self::statement;\n@@ -115,10 +117,12 @@ impl<'fncx, 'a, 'b: 'a + 'mir, 'mir, 'tcx: 'b> Stepper<'fncx, 'a, 'b, 'mir, 'tcx\n         }\n \n         let terminator = basic_block.terminator();\n+        assert!(self.fncx.frame().constants.is_empty());\n         ConstantExtractor {\n             span: terminator.span,\n-            fncx: self.fncx,\n             mir: &self.mir,\n+            gecx: self.fncx.gecx,\n+            frame: self.fncx.stack.last_mut().expect(\"stack empty\"),\n         }.visit_terminator(block, terminator);\n         if self.fncx.frame().constants.is_empty() {\n             self.process = Self::terminator;\n@@ -144,36 +148,37 @@ impl<'fncx, 'a, 'b: 'a + 'mir, 'mir, 'tcx: 'b> Stepper<'fncx, 'a, 'b, 'mir, 'tcx\n     }\n }\n \n-struct ConstantExtractor<'a: 'c, 'b: 'a + 'mir + 'c, 'c, 'mir: 'c, 'tcx: 'a + 'b + 'c> {\n+struct ConstantExtractor<'a, 'b: 'mir, 'mir: 'a, 'tcx: 'b> {\n     span: Span,\n-    mir: &'c mir::Mir<'tcx>,\n-    fncx: &'c mut FnEvalContext<'a, 'b, 'mir, 'tcx>,\n+    mir: &'a CachedMir<'mir, 'tcx>,\n+    frame: &'a mut Frame<'mir, 'tcx>,\n+    gecx: &'a mut GlobalEvalContext<'b, 'tcx>,\n }\n \n-impl<'a, 'b, 'c, 'mir, 'tcx> ConstantExtractor<'a, 'b, 'c, 'mir, 'tcx> {\n+impl<'a, 'b, 'mir, 'tcx> ConstantExtractor<'a, 'b, 'mir, 'tcx> {\n     fn static_item(&mut self, def_id: DefId, substs: &'tcx subst::Substs<'tcx>, span: Span) {\n         let cid = ConstantId::Static {\n             def_id: def_id,\n             substs: substs,\n         };\n-        if self.fncx.gecx.statics.contains_key(&cid) {\n+        if self.gecx.statics.contains_key(&cid) {\n             return;\n         }\n-        let mir = self.fncx.load_mir(def_id);\n-        let ptr = self.fncx.alloc_ret_ptr(mir.return_ty).expect(\"there's no such thing as an unreachable static\");\n-        self.fncx.statics.insert(cid.clone(), ptr);\n-        self.fncx.frame_mut().constants.push((cid, span, ptr, mir));\n+        let mir = self.gecx.load_mir(def_id);\n+        let ptr = self.gecx.alloc_ret_ptr(mir.return_ty, substs).expect(\"there's no such thing as an unreachable static\");\n+        self.gecx.statics.insert(cid.clone(), ptr);\n+        self.frame.constants.push((cid, span, ptr, mir));\n     }\n }\n \n-impl<'a, 'b, 'c, 'mir, 'tcx> Visitor<'tcx> for ConstantExtractor<'a, 'b, 'c, 'mir, 'tcx> {\n+impl<'a, 'b, 'mir, 'tcx> Visitor<'tcx> for ConstantExtractor<'a, 'b, 'mir, 'tcx> {\n     fn visit_constant(&mut self, constant: &mir::Constant<'tcx>) {\n         self.super_constant(constant);\n         match constant.literal {\n             // already computed by rustc\n             mir::Literal::Value { .. } => {}\n             mir::Literal::Item { def_id, substs } => {\n-                let item_ty = self.fncx.tcx.lookup_item_type(def_id).subst(self.fncx.tcx, substs);\n+                let item_ty = self.gecx.tcx.lookup_item_type(def_id).subst(self.gecx.tcx, substs);\n                 if item_ty.ty.is_fn() {\n                     // unimplemented\n                 } else {\n@@ -182,27 +187,27 @@ impl<'a, 'b, 'c, 'mir, 'tcx> Visitor<'tcx> for ConstantExtractor<'a, 'b, 'c, 'mi\n             },\n             mir::Literal::Promoted { index } => {\n                 let cid = ConstantId::Promoted {\n-                    def_id: self.fncx.frame().def_id,\n-                    substs: self.fncx.substs(),\n+                    def_id: self.frame.def_id,\n+                    substs: self.frame.substs,\n                     index: index,\n                 };\n-                if self.fncx.statics.contains_key(&cid) {\n+                if self.gecx.statics.contains_key(&cid) {\n                     return;\n                 }\n                 let mir = self.mir.promoted[index].clone();\n                 let return_ty = mir.return_ty;\n-                let return_ptr = self.fncx.alloc_ret_ptr(return_ty).expect(\"there's no such thing as an unreachable static\");\n+                let return_ptr = self.gecx.alloc_ret_ptr(return_ty, cid.substs()).expect(\"there's no such thing as an unreachable static\");\n                 let mir = CachedMir::Owned(Rc::new(mir));\n-                self.fncx.statics.insert(cid.clone(), return_ptr);\n-                self.fncx.frame_mut().constants.push((cid, constant.span, return_ptr, mir));\n+                self.gecx.statics.insert(cid.clone(), return_ptr);\n+                self.frame.constants.push((cid, constant.span, return_ptr, mir));\n             }\n         }\n     }\n \n     fn visit_lvalue(&mut self, lvalue: &mir::Lvalue<'tcx>, context: LvalueContext) {\n         self.super_lvalue(lvalue, context);\n         if let mir::Lvalue::Static(def_id) = *lvalue {\n-            let substs = self.fncx.tcx.mk_substs(subst::Substs::empty());\n+            let substs = self.gecx.tcx.mk_substs(subst::Substs::empty());\n             let span = self.span;\n             self.static_item(def_id, substs, span);\n         }"}]}