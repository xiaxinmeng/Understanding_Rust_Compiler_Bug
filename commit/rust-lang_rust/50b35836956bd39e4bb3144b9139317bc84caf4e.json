{"sha": "50b35836956bd39e4bb3144b9139317bc84caf4e", "node_id": "C_kwDOAAsO6NoAKDUwYjM1ODM2OTU2YmQzOWU0YmIzMTQ0YjkxMzkzMTdiYzg0Y2FmNGU", "commit": {"author": {"name": "Pietro Albini", "email": "pietro.albini@ferrous-systems.com", "date": "2023-03-02T14:36:13Z"}, "committer": {"name": "Pietro Albini", "email": "pietro.albini@ferrous-systems.com", "date": "2023-03-02T15:33:58Z"}, "message": "switch all tests to use render_tests", "tree": {"sha": "7f4bf241082dd7912199abd14ccf4a4e771b1fcb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7f4bf241082dd7912199abd14ccf4a4e771b1fcb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/50b35836956bd39e4bb3144b9139317bc84caf4e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEMycKYjxLY0eb13b7zXazX3c0dp4FAmQAweYACgkQzXazX3c0\ndp4WsQ//RisN+OLrNByyEdw16db8U3n9BlOUPgjGqhRk8b6ZqY3AO3jQCZ8Hra+v\noJeokqaIA7351x6mbQwRJf1XZi6aMfwUux2uOkDFkIBhBjYpaa9xjnB0Ow6xbnsX\n81nZBx/Nhk8r8O4uTUKZFNInv5AlEEwYKvXuTq5Czsqu0tz1o7108tDRl6Bucq66\nIpy0h2bR9I4pvHLL1F9nNYInSMzLL1Buee9eXQxsoa0DBe/aOLkk9qOiLr92xxVM\nMBkWfZjCTPL4jqX0xwK9SAokxG0jU7Y8xivGZMK3dZ0GiJg9z1PNCrCvx/eJmmCb\n2D2eV7D2Bjy4DbJZpED40tVs31Qf8O6IuNs0xl8H/DrgpRT+xCxDARtHP8G6Tqeo\nVFNfAUmsyHfV7F9ds/Ak3KzWoL0YeDPrx3df1m6HB/gq5IwG1dM+XQXQ5RDdpEDQ\neOp7LzihfkPmKHIn+N+d9qaiHQ6rJ/75Kk474mDo4wKTMh2aIFgLSC92uu2kkRjD\n66q2T/Ztu6NxNrDHyK8KenRnpYX90nScwVLZ0Ybl1APadFrm7lGsYvKiUekMOSk/\nqgDZQEKctqG/MT4U1IQzQiXleaGi6J0JM1sNJhQqZu9y4npWJJgbjyRxtfiNHN3Z\n/PxRDkvVuYWbjpsPldxlBqdZLCR2HNW2Fyib204wt2kZAPvD6Hg=\n=hAEv\n-----END PGP SIGNATURE-----", "payload": "tree 7f4bf241082dd7912199abd14ccf4a4e771b1fcb\nparent b14b35555022b6df2fd6192693800f2032f61a33\nauthor Pietro Albini <pietro.albini@ferrous-systems.com> 1677767773 +0100\ncommitter Pietro Albini <pietro.albini@ferrous-systems.com> 1677771238 +0100\n\nswitch all tests to use render_tests\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/50b35836956bd39e4bb3144b9139317bc84caf4e", "html_url": "https://github.com/rust-lang/rust/commit/50b35836956bd39e4bb3144b9139317bc84caf4e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/50b35836956bd39e4bb3144b9139317bc84caf4e/comments", "author": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b14b35555022b6df2fd6192693800f2032f61a33", "url": "https://api.github.com/repos/rust-lang/rust/commits/b14b35555022b6df2fd6192693800f2032f61a33", "html_url": "https://github.com/rust-lang/rust/commit/b14b35555022b6df2fd6192693800f2032f61a33"}], "stats": {"total": 50, "additions": 27, "deletions": 23}, "files": [{"sha": "b9aa378064c077cbb3e46f94a9ef73c8f7ba31ed", "filename": "src/bootstrap/render_tests.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/50b35836956bd39e4bb3144b9139317bc84caf4e/src%2Fbootstrap%2Frender_tests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50b35836956bd39e4bb3144b9139317bc84caf4e/src%2Fbootstrap%2Frender_tests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Frender_tests.rs?ref=50b35836956bd39e4bb3144b9139317bc84caf4e", "patch": "@@ -14,6 +14,15 @@ use yansi_term::Color;\n \n const TERSE_TESTS_PER_LINE: usize = 88;\n \n+pub(crate) fn add_flags_and_try_run_tests(builder: &Builder<'_>, cmd: &mut Command) -> bool {\n+    if cmd.get_args().position(|arg| arg == \"--\").is_none() {\n+        cmd.arg(\"--\");\n+    }\n+    cmd.args(&[\"-Z\", \"unstable-options\", \"--format\", \"json\"]);\n+\n+    try_run_tests(builder, cmd)\n+}\n+\n pub(crate) fn try_run_tests(builder: &Builder<'_>, cmd: &mut Command) -> bool {\n     if builder.config.dry_run() {\n         return true;"}, {"sha": "754bd6c9c8ce3f065580ba7a2d7001024cdc9d81", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 18, "deletions": 23, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/50b35836956bd39e4bb3144b9139317bc84caf4e/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50b35836956bd39e4bb3144b9139317bc84caf4e/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=50b35836956bd39e4bb3144b9139317bc84caf4e", "patch": "@@ -20,6 +20,7 @@ use crate::dist;\n use crate::doc::DocumentationFormat;\n use crate::flags::Subcommand;\n use crate::native;\n+use crate::render_tests::add_flags_and_try_run_tests;\n use crate::tool::{self, SourceType, Tool};\n use crate::toolstate::ToolState;\n use crate::util::{self, add_link_lib_path, dylib_path, dylib_path_var, output, t};\n@@ -123,7 +124,7 @@ impl Step for CrateJsonDocLint {\n             SourceType::InTree,\n             &[],\n         );\n-        try_run(builder, &mut cargo.into());\n+        add_flags_and_try_run_tests(builder, &mut cargo.into());\n     }\n }\n \n@@ -172,7 +173,7 @@ You can skip linkcheck with --exclude src/tools/linkchecker\"\n             SourceType::InTree,\n             &[],\n         );\n-        try_run(builder, &mut cargo.into());\n+        add_flags_and_try_run_tests(builder, &mut cargo.into());\n \n         // Build all the default documentation.\n         builder.default_doc(&[]);\n@@ -333,7 +334,7 @@ impl Step for Cargo {\n \n         cargo.env(\"PATH\", &path_for_cargo(builder, compiler));\n \n-        try_run(builder, &mut cargo.into());\n+        add_flags_and_try_run_tests(builder, &mut cargo.into());\n     }\n }\n \n@@ -392,7 +393,7 @@ impl Step for RustAnalyzer {\n         cargo.add_rustc_lib_path(builder, compiler);\n         cargo.arg(\"--\").args(builder.config.cmd.test_args());\n \n-        builder.run(&mut cargo.into());\n+        add_flags_and_try_run_tests(builder, &mut cargo.into());\n     }\n }\n \n@@ -445,7 +446,7 @@ impl Step for Rustfmt {\n \n         cargo.add_rustc_lib_path(builder, compiler);\n \n-        builder.run(&mut cargo.into());\n+        add_flags_and_try_run_tests(builder, &mut cargo.into());\n     }\n }\n \n@@ -496,7 +497,7 @@ impl Step for RustDemangler {\n \n         cargo.add_rustc_lib_path(builder, compiler);\n \n-        builder.run(&mut cargo.into());\n+        add_flags_and_try_run_tests(builder, &mut cargo.into());\n     }\n }\n \n@@ -637,8 +638,7 @@ impl Step for Miri {\n         // Forward test filters.\n         cargo.arg(\"--\").args(builder.config.cmd.test_args());\n \n-        let mut cargo = Command::from(cargo);\n-        builder.run(&mut cargo);\n+        add_flags_and_try_run_tests(builder, &mut cargo.into());\n \n         // # Run `cargo miri test`.\n         // This is just a smoke test (Miri's own CI invokes this in a bunch of different ways and ensures\n@@ -711,7 +711,7 @@ impl Step for CompiletestTest {\n         );\n         cargo.allow_features(\"test\");\n \n-        try_run(builder, &mut cargo.into());\n+        add_flags_and_try_run_tests(builder, &mut cargo.into());\n     }\n }\n \n@@ -767,7 +767,7 @@ impl Step for Clippy {\n \n         cargo.add_rustc_lib_path(builder, compiler);\n \n-        if builder.try_run(&mut cargo.into()) {\n+        if add_flags_and_try_run_tests(builder, &mut cargo.into()) {\n             // The tests succeeded; nothing to do.\n             return;\n         }\n@@ -1189,7 +1189,7 @@ impl Step for TidySelfTest {\n             SourceType::InTree,\n             &[],\n         );\n-        try_run(builder, &mut cargo.into());\n+        add_flags_and_try_run_tests(builder, &mut cargo.into());\n     }\n }\n \n@@ -2178,9 +2178,8 @@ impl Step for Crate {\n         cargo.arg(\"--\");\n         cargo.args(&builder.config.cmd.test_args());\n \n-        if !builder.config.verbose_tests {\n-            cargo.arg(\"--quiet\");\n-        }\n+        cargo.arg(\"-Z\").arg(\"unstable-options\");\n+        cargo.arg(\"--format\").arg(\"json\");\n \n         if target.contains(\"emscripten\") {\n             cargo.env(\n@@ -2208,7 +2207,7 @@ impl Step for Crate {\n             target\n         ));\n         let _time = util::timeit(&builder);\n-        try_run(builder, &mut cargo.into());\n+        crate::render_tests::try_run_tests(builder, &mut cargo.into());\n     }\n }\n \n@@ -2328,7 +2327,7 @@ impl Step for CrateRustdoc {\n         ));\n         let _time = util::timeit(&builder);\n \n-        try_run(builder, &mut cargo.into());\n+        add_flags_and_try_run_tests(builder, &mut cargo.into());\n     }\n }\n \n@@ -2389,17 +2388,13 @@ impl Step for CrateRustdocJsonTypes {\n             cargo.arg(\"'-Ctarget-feature=-crt-static'\");\n         }\n \n-        if !builder.config.verbose_tests {\n-            cargo.arg(\"--quiet\");\n-        }\n-\n         builder.info(&format!(\n             \"{} rustdoc-json-types stage{} ({} -> {})\",\n             test_kind, compiler.stage, &compiler.host, target\n         ));\n         let _time = util::timeit(&builder);\n \n-        try_run(builder, &mut cargo.into());\n+        add_flags_and_try_run_tests(builder, &mut cargo.into());\n     }\n }\n \n@@ -2568,7 +2563,7 @@ impl Step for Bootstrap {\n         // rustbuild tests are racy on directory creation so just run them one at a time.\n         // Since there's not many this shouldn't be a problem.\n         cmd.arg(\"--test-threads=1\");\n-        try_run(builder, &mut cmd);\n+        add_flags_and_try_run_tests(builder, &mut cmd);\n     }\n \n     fn should_run(run: ShouldRun<'_>) -> ShouldRun<'_> {\n@@ -2649,7 +2644,7 @@ impl Step for ReplacePlaceholderTest {\n             SourceType::InTree,\n             &[],\n         );\n-        try_run(builder, &mut cargo.into());\n+        add_flags_and_try_run_tests(builder, &mut cargo.into());\n     }\n \n     fn should_run(run: ShouldRun<'_>) -> ShouldRun<'_> {"}]}