{"sha": "1e64d98761c4713f739656bcff218dbdb1b08ad9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFlNjRkOTg3NjFjNDcxM2Y3Mzk2NTZiY2ZmMjE4ZGJkYjFiMDhhZDk=", "commit": {"author": {"name": "Stein Somers", "email": "git@steinsomers.be", "date": "2020-08-09T10:25:20Z"}, "committer": {"name": "Stein Somers", "email": "git@steinsomers.be", "date": "2020-09-25T09:29:38Z"}, "message": "BTreeMap: refactor correct_childrens_parent_links", "tree": {"sha": "08c0de02af4803eaf46883ee8506be7a58aa6947", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/08c0de02af4803eaf46883ee8506be7a58aa6947"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1e64d98761c4713f739656bcff218dbdb1b08ad9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1e64d98761c4713f739656bcff218dbdb1b08ad9", "html_url": "https://github.com/rust-lang/rust/commit/1e64d98761c4713f739656bcff218dbdb1b08ad9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1e64d98761c4713f739656bcff218dbdb1b08ad9/comments", "author": {"login": "ssomers", "id": 10174877, "node_id": "MDQ6VXNlcjEwMTc0ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/10174877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ssomers", "html_url": "https://github.com/ssomers", "followers_url": "https://api.github.com/users/ssomers/followers", "following_url": "https://api.github.com/users/ssomers/following{/other_user}", "gists_url": "https://api.github.com/users/ssomers/gists{/gist_id}", "starred_url": "https://api.github.com/users/ssomers/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ssomers/subscriptions", "organizations_url": "https://api.github.com/users/ssomers/orgs", "repos_url": "https://api.github.com/users/ssomers/repos", "events_url": "https://api.github.com/users/ssomers/events{/privacy}", "received_events_url": "https://api.github.com/users/ssomers/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ssomers", "id": 10174877, "node_id": "MDQ6VXNlcjEwMTc0ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/10174877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ssomers", "html_url": "https://github.com/ssomers", "followers_url": "https://api.github.com/users/ssomers/followers", "following_url": "https://api.github.com/users/ssomers/following{/other_user}", "gists_url": "https://api.github.com/users/ssomers/gists{/gist_id}", "starred_url": "https://api.github.com/users/ssomers/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ssomers/subscriptions", "organizations_url": "https://api.github.com/users/ssomers/orgs", "repos_url": "https://api.github.com/users/ssomers/repos", "events_url": "https://api.github.com/users/ssomers/events{/privacy}", "received_events_url": "https://api.github.com/users/ssomers/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5562bb6d749df0469cd1407e97252f51ecbef066", "url": "https://api.github.com/repos/rust-lang/rust/commits/5562bb6d749df0469cd1407e97252f51ecbef066", "html_url": "https://github.com/rust-lang/rust/commit/5562bb6d749df0469cd1407e97252f51ecbef066"}], "stats": {"total": 42, "additions": 16, "deletions": 26}, "files": [{"sha": "a141c1d08e29b178affbd5ae3ada7314448d5923", "filename": "library/alloc/src/collections/btree/node.rs", "status": "modified", "additions": 16, "deletions": 26, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/1e64d98761c4713f739656bcff218dbdb1b08ad9/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e64d98761c4713f739656bcff218dbdb1b08ad9/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnode.rs?ref=1e64d98761c4713f739656bcff218dbdb1b08ad9", "patch": "@@ -597,18 +597,17 @@ impl<'a, K: 'a, V: 'a> NodeRef<marker::Mut<'a>, K, V, marker::Leaf> {\n \n impl<'a, K, V> NodeRef<marker::Mut<'a>, K, V, marker::Internal> {\n     /// # Safety\n-    /// 'first' and 'after_last' must be in range.\n-    unsafe fn correct_childrens_parent_links(&mut self, first: usize, after_last: usize) {\n-        debug_assert!(first <= self.len());\n-        debug_assert!(after_last <= self.len() + 1);\n-        for i in first..after_last {\n+    /// Every item returned by `range` is a valid edge index for the node.\n+    unsafe fn correct_childrens_parent_links<R: Iterator<Item = usize>>(&mut self, range: R) {\n+        for i in range {\n+            debug_assert!(i <= self.len());\n             unsafe { Handle::new_edge(self.reborrow_mut(), i) }.correct_parent_link();\n         }\n     }\n \n     fn correct_all_childrens_parent_links(&mut self) {\n         let len = self.len();\n-        unsafe { self.correct_childrens_parent_links(0, len + 1) };\n+        unsafe { self.correct_childrens_parent_links(0..=len) };\n     }\n }\n \n@@ -708,9 +707,7 @@ impl<'a, K: 'a, V: 'a> NodeRef<marker::Mut<'a>, K, V, marker::LeafOrInternal> {\n                     let mut new_root = Root { node: edge, height: internal.height - 1 };\n                     new_root.node_as_mut().as_leaf_mut().parent = None;\n \n-                    for i in 0..old_len {\n-                        Handle::new_edge(internal.reborrow_mut(), i).correct_parent_link();\n-                    }\n+                    internal.correct_childrens_parent_links(0..old_len);\n \n                     Some(new_root)\n                 }\n@@ -986,9 +983,7 @@ impl<'a, K: 'a, V: 'a> Handle<NodeRef<marker::Mut<'a>, K, V, marker::Internal>,\n                 edge.node,\n             );\n \n-            for i in (self.idx + 1)..(self.node.len() + 1) {\n-                Handle::new_edge(self.node.reborrow_mut(), i).correct_parent_link();\n-            }\n+            self.node.correct_childrens_parent_links((self.idx + 1)..=self.node.len());\n         }\n     }\n \n@@ -1215,9 +1210,7 @@ impl<'a, K: 'a, V: 'a> Handle<NodeRef<marker::Mut<'a>, K, V, marker::Internal>,\n \n             let mut new_root = Root { node: BoxedNode::from_internal(new_node), height };\n \n-            for i in 0..(new_len + 1) {\n-                Handle::new_edge(new_root.node_as_mut().cast_unchecked(), i).correct_parent_link();\n-            }\n+            new_root.node_as_mut().cast_unchecked().correct_childrens_parent_links(0..=new_len);\n \n             (self.node, k, v, new_root)\n         }\n@@ -1261,27 +1254,24 @@ impl<'a, K: 'a, V: 'a> Handle<NodeRef<marker::Mut<'a>, K, V, marker::Internal>,\n             );\n \n             slice_remove(&mut self.node.as_internal_mut().edges, self.idx + 1);\n-            for i in self.idx + 1..self.node.len() {\n-                Handle::new_edge(self.node.reborrow_mut(), i).correct_parent_link();\n-            }\n+            let self_len = self.node.len();\n+            self.node.correct_childrens_parent_links(self.idx + 1..self_len);\n             self.node.as_leaf_mut().len -= 1;\n \n             left_node.as_leaf_mut().len += right_len as u16 + 1;\n \n             if self.node.height > 1 {\n                 // SAFETY: the height of the nodes being merged is one below the height\n                 // of the node of this edge, thus above zero, so they are internal.\n-                let mut left_node = left_node.cast_unchecked();\n-                let mut right_node = right_node.cast_unchecked();\n+                let mut left_node = left_node.cast_unchecked::<marker::Internal>();\n+                let mut right_node = right_node.cast_unchecked::<marker::Internal>();\n                 ptr::copy_nonoverlapping(\n                     right_node.as_internal().edges.as_ptr(),\n                     left_node.as_internal_mut().edges.as_mut_ptr().add(left_len + 1),\n                     right_len + 1,\n                 );\n \n-                for i in left_len + 1..left_len + right_len + 2 {\n-                    Handle::new_edge(left_node.reborrow_mut(), i).correct_parent_link();\n-                }\n+                left_node.correct_childrens_parent_links(left_len + 1..=left_len + 1 + right_len);\n \n                 Global.dealloc(right_node.node.cast(), Layout::new::<InternalNode<K, V>>());\n             } else {\n@@ -1371,7 +1361,7 @@ impl<'a, K: 'a, V: 'a> Handle<NodeRef<marker::Mut<'a>, K, V, marker::Internal>,\n                     // Make room for stolen edges.\n                     let right_edges = right.reborrow_mut().as_internal_mut().edges.as_mut_ptr();\n                     ptr::copy(right_edges, right_edges.add(count), right_len + 1);\n-                    right.correct_childrens_parent_links(count, count + right_len + 1);\n+                    right.correct_childrens_parent_links(count..count + right_len + 1);\n \n                     move_edges(left, new_left_len + 1, right, 0, count);\n                 }\n@@ -1430,7 +1420,7 @@ impl<'a, K: 'a, V: 'a> Handle<NodeRef<marker::Mut<'a>, K, V, marker::Internal>,\n                     // Fix right indexing.\n                     let right_edges = right.reborrow_mut().as_internal_mut().edges.as_mut_ptr();\n                     ptr::copy(right_edges.add(count), right_edges, new_right_len + 1);\n-                    right.correct_childrens_parent_links(0, new_right_len + 1);\n+                    right.correct_childrens_parent_links(0..=new_right_len);\n                 }\n                 (ForceResult::Leaf(_), ForceResult::Leaf(_)) => {}\n                 _ => {\n@@ -1466,7 +1456,7 @@ unsafe fn move_edges<K, V>(\n     let dest_ptr = dest.as_internal_mut().edges.as_mut_ptr();\n     unsafe {\n         ptr::copy_nonoverlapping(source_ptr.add(source_offset), dest_ptr.add(dest_offset), count);\n-        dest.correct_childrens_parent_links(dest_offset, dest_offset + count);\n+        dest.correct_childrens_parent_links(dest_offset..dest_offset + count);\n     }\n }\n "}]}