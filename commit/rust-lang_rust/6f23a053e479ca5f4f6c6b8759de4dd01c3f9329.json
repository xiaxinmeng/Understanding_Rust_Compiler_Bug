{"sha": "6f23a053e479ca5f4f6c6b8759de4dd01c3f9329", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZmMjNhMDUzZTQ3OWNhNWY0ZjZjNmI4NzU5ZGU0ZGQwMWMzZjkzMjk=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-08-01T12:58:27Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-08-13T17:40:48Z"}, "message": "Fix a panic on type size overflow", "tree": {"sha": "c8aec3053009acf9c04a4c9a21bbe2b5e9234521", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c8aec3053009acf9c04a4c9a21bbe2b5e9234521"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6f23a053e479ca5f4f6c6b8759de4dd01c3f9329", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6f23a053e479ca5f4f6c6b8759de4dd01c3f9329", "html_url": "https://github.com/rust-lang/rust/commit/6f23a053e479ca5f4f6c6b8759de4dd01c3f9329", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6f23a053e479ca5f4f6c6b8759de4dd01c3f9329/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "70fbca287c38cad8d2f512dca1eae77ce61a8e0f", "url": "https://api.github.com/repos/rust-lang/rust/commits/70fbca287c38cad8d2f512dca1eae77ce61a8e0f", "html_url": "https://github.com/rust-lang/rust/commit/70fbca287c38cad8d2f512dca1eae77ce61a8e0f"}], "stats": {"total": 7, "additions": 6, "deletions": 1}, "files": [{"sha": "5cdbd9bd79ea1186aecc2acafbd64a2eba666ceb", "filename": "src/common.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/6f23a053e479ca5f4f6c6b8759de4dd01c3f9329/src%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f23a053e479ca5f4f6c6b8759de4dd01c3f9329/src%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcommon.rs?ref=6f23a053e479ca5f4f6c6b8759de4dd01c3f9329", "patch": "@@ -181,7 +181,12 @@ impl<'a, 'tcx: 'a, B: Backend> LayoutOf for FunctionCx<'a, 'tcx, B> {\n \n     fn layout_of(&self, ty: Ty<'tcx>) -> TyLayout<'tcx> {\n         let ty = self.monomorphize(&ty);\n-        self.tcx.layout_of(ParamEnv::reveal_all().and(&ty)).unwrap()\n+        self.tcx.layout_of(ParamEnv::reveal_all().and(&ty))\n+            .unwrap_or_else(|e| if let layout::LayoutError::SizeOverflow(_) = e {\n+                self.tcx.sess.fatal(&e.to_string())\n+            } else {\n+                bug!(\"failed to get layout for `{}`: {}\", ty, e)\n+            })\n     }\n }\n "}]}