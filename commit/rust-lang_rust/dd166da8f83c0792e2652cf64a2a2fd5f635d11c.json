{"sha": "dd166da8f83c0792e2652cf64a2a2fd5f635d11c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRkMTY2ZGE4ZjgzYzA3OTJlMjY1MmNmNjRhMmEyZmQ1ZjYzNWQxMWM=", "commit": {"author": {"name": "The8472", "email": "git@infinite-source.de", "date": "2021-03-17T22:45:03Z"}, "committer": {"name": "The8472", "email": "git@infinite-source.de", "date": "2021-03-17T23:25:20Z"}, "message": "generalize slice::fill specialization for byte-sized items\n\nThis should also improve cross-crate inlining since the method is generic", "tree": {"sha": "32f1a77b45ff1a6ae54bcc2a1abad3bc65139ff3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/32f1a77b45ff1a6ae54bcc2a1abad3bc65139ff3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dd166da8f83c0792e2652cf64a2a2fd5f635d11c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dd166da8f83c0792e2652cf64a2a2fd5f635d11c", "html_url": "https://github.com/rust-lang/rust/commit/dd166da8f83c0792e2652cf64a2a2fd5f635d11c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dd166da8f83c0792e2652cf64a2a2fd5f635d11c/comments", "author": {"login": "the8472", "id": 1065730, "node_id": "MDQ6VXNlcjEwNjU3MzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1065730?v=4", "gravatar_id": "", "url": "https://api.github.com/users/the8472", "html_url": "https://github.com/the8472", "followers_url": "https://api.github.com/users/the8472/followers", "following_url": "https://api.github.com/users/the8472/following{/other_user}", "gists_url": "https://api.github.com/users/the8472/gists{/gist_id}", "starred_url": "https://api.github.com/users/the8472/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/the8472/subscriptions", "organizations_url": "https://api.github.com/users/the8472/orgs", "repos_url": "https://api.github.com/users/the8472/repos", "events_url": "https://api.github.com/users/the8472/events{/privacy}", "received_events_url": "https://api.github.com/users/the8472/received_events", "type": "User", "site_admin": false}, "committer": {"login": "the8472", "id": 1065730, "node_id": "MDQ6VXNlcjEwNjU3MzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1065730?v=4", "gravatar_id": "", "url": "https://api.github.com/users/the8472", "html_url": "https://github.com/the8472", "followers_url": "https://api.github.com/users/the8472/followers", "following_url": "https://api.github.com/users/the8472/following{/other_user}", "gists_url": "https://api.github.com/users/the8472/gists{/gist_id}", "starred_url": "https://api.github.com/users/the8472/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/the8472/subscriptions", "organizations_url": "https://api.github.com/users/the8472/orgs", "repos_url": "https://api.github.com/users/the8472/repos", "events_url": "https://api.github.com/users/the8472/events{/privacy}", "received_events_url": "https://api.github.com/users/the8472/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "36f1f04f18b89ba4a999bcfd6584663fd6fc1c5d", "url": "https://api.github.com/repos/rust-lang/rust/commits/36f1f04f18b89ba4a999bcfd6584663fd6fc1c5d", "html_url": "https://github.com/rust-lang/rust/commit/36f1f04f18b89ba4a999bcfd6584663fd6fc1c5d"}], "stats": {"total": 49, "additions": 13, "deletions": 36}, "files": [{"sha": "425cf71626f40edae9d5f8dd2ce577c5e1a07549", "filename": "library/core/src/slice/specialize.rs", "status": "modified", "additions": 13, "deletions": 36, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/dd166da8f83c0792e2652cf64a2a2fd5f635d11c/library%2Fcore%2Fsrc%2Fslice%2Fspecialize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd166da8f83c0792e2652cf64a2a2fd5f635d11c/library%2Fcore%2Fsrc%2Fslice%2Fspecialize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fspecialize.rs?ref=dd166da8f83c0792e2652cf64a2a2fd5f635d11c", "patch": "@@ -1,3 +1,4 @@\n+use crate::mem::{size_of, transmute_copy};\n use crate::ptr::write_bytes;\n \n pub(super) trait SpecFill<T> {\n@@ -17,42 +18,18 @@ impl<T: Clone> SpecFill<T> for [T] {\n }\n \n impl<T: Copy> SpecFill<T> for [T] {\n-    default fn spec_fill(&mut self, value: T) {\n-        for item in self.iter_mut() {\n-            *item = value;\n-        }\n-    }\n-}\n-\n-impl SpecFill<u8> for [u8] {\n-    fn spec_fill(&mut self, value: u8) {\n-        // SAFETY: this is slice of u8\n-        unsafe {\n-            let ptr = self.as_mut_ptr();\n-            let len = self.len();\n-            write_bytes(ptr, value, len);\n-        }\n-    }\n-}\n-\n-impl SpecFill<i8> for [i8] {\n-    fn spec_fill(&mut self, value: i8) {\n-        // SAFETY: this is slice of i8\n-        unsafe {\n-            let ptr = self.as_mut_ptr();\n-            let len = self.len();\n-            write_bytes(ptr, value as u8, len);\n-        }\n-    }\n-}\n-\n-impl SpecFill<bool> for [bool] {\n-    fn spec_fill(&mut self, value: bool) {\n-        // SAFETY: this is slice of bool\n-        unsafe {\n-            let ptr = self.as_mut_ptr();\n-            let len = self.len();\n-            write_bytes(ptr, value as u8, len);\n+    fn spec_fill(&mut self, value: T) {\n+        if size_of::<T>() == 1 {\n+            // SAFETY: The size_of check above ensures that values are 1 byte wide, as required\n+            // for the transmute and write_bytes\n+            unsafe {\n+                let value: u8 = transmute_copy(&value);\n+                write_bytes(self.as_mut_ptr(), value, self.len());\n+            }\n+        } else {\n+            for item in self.iter_mut() {\n+                *item = value;\n+            }\n         }\n     }\n }"}]}