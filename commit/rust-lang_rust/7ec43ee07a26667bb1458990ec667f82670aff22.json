{"sha": "7ec43ee07a26667bb1458990ec667f82670aff22", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdlYzQzZWUwN2EyNjY2N2JiMTQ1ODk5MGVjNjY3ZjgyNjcwYWZmMjI=", "commit": {"author": {"name": "kjeremy", "email": "kjeremy@gmail.com", "date": "2019-11-18T23:08:39Z"}, "committer": {"name": "Jeremy Kolb", "email": "kjeremy@gmail.com", "date": "2019-12-18T13:49:06Z"}, "message": "WIP: See through Macros for SignatureHelp\n\nNote: we meed to skip the trivia filter to make sure that\n`covers!(call_info_bad_offset)` succeeds otherwise we exit call_info\ntoo early.\n\nAlso the test doesn't pass: `FnCallNode::with_node` always detects\na MacroCall.", "tree": {"sha": "f5af8c599ddd4d07ece0446fade974e607d62ff6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f5af8c599ddd4d07ece0446fade974e607d62ff6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7ec43ee07a26667bb1458990ec667f82670aff22", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7ec43ee07a26667bb1458990ec667f82670aff22", "html_url": "https://github.com/rust-lang/rust/commit/7ec43ee07a26667bb1458990ec667f82670aff22", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7ec43ee07a26667bb1458990ec667f82670aff22/comments", "author": {"login": "kjeremy", "id": 4325700, "node_id": "MDQ6VXNlcjQzMjU3MDA=", "avatar_url": "https://avatars.githubusercontent.com/u/4325700?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kjeremy", "html_url": "https://github.com/kjeremy", "followers_url": "https://api.github.com/users/kjeremy/followers", "following_url": "https://api.github.com/users/kjeremy/following{/other_user}", "gists_url": "https://api.github.com/users/kjeremy/gists{/gist_id}", "starred_url": "https://api.github.com/users/kjeremy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kjeremy/subscriptions", "organizations_url": "https://api.github.com/users/kjeremy/orgs", "repos_url": "https://api.github.com/users/kjeremy/repos", "events_url": "https://api.github.com/users/kjeremy/events{/privacy}", "received_events_url": "https://api.github.com/users/kjeremy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kjeremy", "id": 4325700, "node_id": "MDQ6VXNlcjQzMjU3MDA=", "avatar_url": "https://avatars.githubusercontent.com/u/4325700?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kjeremy", "html_url": "https://github.com/kjeremy", "followers_url": "https://api.github.com/users/kjeremy/followers", "following_url": "https://api.github.com/users/kjeremy/following{/other_user}", "gists_url": "https://api.github.com/users/kjeremy/gists{/gist_id}", "starred_url": "https://api.github.com/users/kjeremy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kjeremy/subscriptions", "organizations_url": "https://api.github.com/users/kjeremy/orgs", "repos_url": "https://api.github.com/users/kjeremy/repos", "events_url": "https://api.github.com/users/kjeremy/events{/privacy}", "received_events_url": "https://api.github.com/users/kjeremy/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "242f0ae1d8e6766091a6050431c3d417a43a2a3e", "url": "https://api.github.com/repos/rust-lang/rust/commits/242f0ae1d8e6766091a6050431c3d417a43a2a3e", "html_url": "https://github.com/rust-lang/rust/commit/242f0ae1d8e6766091a6050431c3d417a43a2a3e"}], "stats": {"total": 39, "additions": 30, "deletions": 9}, "files": [{"sha": "2da9c4e765791a1ac1bf36c9be9647bccad19d3a", "filename": "crates/ra_ide/src/call_info.rs", "status": "modified", "additions": 30, "deletions": 9, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/7ec43ee07a26667bb1458990ec667f82670aff22/crates%2Fra_ide%2Fsrc%2Fcall_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ec43ee07a26667bb1458990ec667f82670aff22/crates%2Fra_ide%2Fsrc%2Fcall_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcall_info.rs?ref=7ec43ee07a26667bb1458990ec667f82670aff22", "patch": "@@ -1,22 +1,22 @@\n //! FIXME: write short doc here\n \n-use ra_db::SourceDatabase;\n+use hir::db::AstDatabase;\n use ra_syntax::{\n-    algo::ancestors_at_offset,\n     ast::{self, ArgListOwner},\n-    match_ast, AstNode, SyntaxNode, TextUnit,\n+    match_ast, AstNode, SyntaxNode,\n };\n use test_utils::tested_by;\n \n-use crate::{db::RootDatabase, CallInfo, FilePosition, FunctionSignature};\n+use crate::{db::RootDatabase, expand::descend_into_macros, CallInfo, FilePosition, FunctionSignature};\n \n /// Computes parameter information for the given call expression.\n pub(crate) fn call_info(db: &RootDatabase, position: FilePosition) -> Option<CallInfo> {\n-    let parse = db.parse(position.file_id);\n-    let syntax = parse.tree().syntax().clone();\n+    let file = db.parse_or_expand(position.file_id.into())?;\n+    let token = file.token_at_offset(position.offset).next()?;\n+    let token = descend_into_macros(db, position.file_id, token);\n \n     // Find the calling expression and it's NameRef\n-    let calling_node = FnCallNode::with_node(&syntax, position.offset)?;\n+    let calling_node = FnCallNode::with_node(&token.value.parent())?;\n     let name_ref = calling_node.name_ref()?;\n     let name_ref = hir::InFile::new(position.file_id.into(), name_ref.syntax());\n \n@@ -93,8 +93,8 @@ enum FnCallNode {\n }\n \n impl FnCallNode {\n-    fn with_node(syntax: &SyntaxNode, offset: TextUnit) -> Option<FnCallNode> {\n-        ancestors_at_offset(syntax, offset).find_map(|node| {\n+    fn with_node(syntax: &SyntaxNode) -> Option<FnCallNode> {\n+        syntax.ancestors().find_map(|node| {\n             match_ast! {\n                 match node {\n                     ast::CallExpr(it) => { Some(FnCallNode::CallExpr(it)) },\n@@ -589,4 +589,25 @@ fn f() {\n         assert_eq!(info.label(), \"foo!()\");\n         assert_eq!(info.doc().map(|it| it.into()), Some(\"empty macro\".to_string()));\n     }\n+\n+    #[test]\n+    fn fn_signature_for_call_in_macro() {\n+        let info = call_info(\n+            r#\"\n+            macro_rules! id {\n+                ($($tt:tt)*) => { $($tt)* }\n+            }\n+            fn foo() {\n+\n+            }\n+            id! {\n+                fn bar() {\n+                    foo(<|>);\n+                }\n+            }\n+            \"#,\n+        );\n+\n+        assert_eq!(info.label(), \"fn foo()\");\n+    }\n }"}]}