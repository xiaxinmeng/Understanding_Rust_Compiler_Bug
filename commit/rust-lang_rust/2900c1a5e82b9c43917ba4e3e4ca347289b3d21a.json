{"sha": "2900c1a5e82b9c43917ba4e3e4ca347289b3d21a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI5MDBjMWE1ZTgyYjljNDM5MTdiYTRlM2U0Y2EzNDcyODliM2QyMWE=", "commit": {"author": {"name": "Roxane", "email": "roxane.fruytier@hotmail.com", "date": "2021-07-07T14:29:06Z"}, "committer": {"name": "Roxane", "email": "roxane.fruytier@hotmail.com", "date": "2021-07-09T14:00:21Z"}, "message": "Add note pointing to where a closure and it's captured variables are dropped", "tree": {"sha": "f45b74edb6e821b74be7610865bfd292ca95af6a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f45b74edb6e821b74be7610865bfd292ca95af6a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2900c1a5e82b9c43917ba4e3e4ca347289b3d21a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2900c1a5e82b9c43917ba4e3e4ca347289b3d21a", "html_url": "https://github.com/rust-lang/rust/commit/2900c1a5e82b9c43917ba4e3e4ca347289b3d21a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2900c1a5e82b9c43917ba4e3e4ca347289b3d21a/comments", "author": {"login": "roxelo", "id": 12419401, "node_id": "MDQ6VXNlcjEyNDE5NDAx", "avatar_url": "https://avatars.githubusercontent.com/u/12419401?v=4", "gravatar_id": "", "url": "https://api.github.com/users/roxelo", "html_url": "https://github.com/roxelo", "followers_url": "https://api.github.com/users/roxelo/followers", "following_url": "https://api.github.com/users/roxelo/following{/other_user}", "gists_url": "https://api.github.com/users/roxelo/gists{/gist_id}", "starred_url": "https://api.github.com/users/roxelo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/roxelo/subscriptions", "organizations_url": "https://api.github.com/users/roxelo/orgs", "repos_url": "https://api.github.com/users/roxelo/repos", "events_url": "https://api.github.com/users/roxelo/events{/privacy}", "received_events_url": "https://api.github.com/users/roxelo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "roxelo", "id": 12419401, "node_id": "MDQ6VXNlcjEyNDE5NDAx", "avatar_url": "https://avatars.githubusercontent.com/u/12419401?v=4", "gravatar_id": "", "url": "https://api.github.com/users/roxelo", "html_url": "https://github.com/roxelo", "followers_url": "https://api.github.com/users/roxelo/followers", "following_url": "https://api.github.com/users/roxelo/following{/other_user}", "gists_url": "https://api.github.com/users/roxelo/gists{/gist_id}", "starred_url": "https://api.github.com/users/roxelo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/roxelo/subscriptions", "organizations_url": "https://api.github.com/users/roxelo/orgs", "repos_url": "https://api.github.com/users/roxelo/repos", "events_url": "https://api.github.com/users/roxelo/events{/privacy}", "received_events_url": "https://api.github.com/users/roxelo/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0e8e89daa6c53b32e866205fd00ba385c66b90de", "url": "https://api.github.com/repos/rust-lang/rust/commits/0e8e89daa6c53b32e866205fd00ba385c66b90de", "html_url": "https://github.com/rust-lang/rust/commit/0e8e89daa6c53b32e866205fd00ba385c66b90de"}], "stats": {"total": 403, "additions": 373, "deletions": 30}, "files": [{"sha": "a5c4e161771a1f34d5346d09700147410bfc7fea", "filename": "compiler/rustc_typeck/src/check/upvar.rs", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/2900c1a5e82b9c43917ba4e3e4ca347289b3d21a/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2900c1a5e82b9c43917ba4e3e4ca347289b3d21a/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs?ref=2900c1a5e82b9c43917ba4e3e4ca347289b3d21a", "patch": "@@ -511,15 +511,30 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         .as_str(),\n                     );\n                     for (var_hir_id, diagnostics_info) in need_migrations.iter() {\n+                        let mut captured_names = format!(\"\");\n                         for (captured_hir_id, captured_name) in diagnostics_info.iter() {\n                             if let Some(captured_hir_id) = captured_hir_id {\n                                 let cause_span = self.tcx.hir().span(*captured_hir_id);\n                                 diagnostics_builder.span_label(cause_span, format!(\"in Rust 2018, closure captures all of `{}`, but in Rust 2021, it only captures `{}`\",\n                                     self.tcx.hir().name(*var_hir_id),\n                                     captured_name,\n                                 ));\n+                                if captured_names == \"\" {\n+                                    captured_names = format!(\"`{}`\", captured_name);\n+                                } else {\n+                                    captured_names = format!(\"{}, `{}`\", captured_names, captured_name);\n+                                }\n                             }\n                         }\n+\n+                        if reasons.contains(\"drop order\") {\n+                            let drop_location_span = drop_location_span(self.tcx, &closure_hir_id);\n+\n+                            diagnostics_builder.span_label(drop_location_span, format!(\"in Rust 2018, `{}` would be dropped here, but in Rust 2021, only {} would be dropped here alongside the closure\",\n+                                self.tcx.hir().name(*var_hir_id),\n+                                captured_names,\n+                            ));\n+                        }\n                     }\n                     diagnostics_builder.note(\"for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>\");\n                     let closure_body_span = self.tcx.hir().span(body_id.hir_id);\n@@ -1350,6 +1365,31 @@ fn apply_capture_kind_on_capture_ty(\n     }\n }\n \n+/// Returns the Span of where the value with the provided HirId would be dropped\n+fn drop_location_span(tcx: TyCtxt<'tcx>, hir_id: &hir::HirId) -> Span {\n+    let owner_id = tcx.hir().get_enclosing_scope(*hir_id).unwrap();\n+\n+    let owner_node = tcx.hir().get(owner_id);\n+    match owner_node {\n+        hir::Node::Item(item) => match item.kind {\n+            hir::ItemKind::Fn(_, _, owner_id) => {\n+                let owner_span = tcx.hir().span(owner_id.hir_id);\n+                tcx.sess.source_map().end_point(owner_span)\n+            }\n+            _ => {\n+                bug!(\"Drop location span error: need to handle more ItemKind {:?}\", item.kind);\n+            }\n+        },\n+        hir::Node::Block(block) => {\n+            let owner_span = tcx.hir().span(block.hir_id);\n+            tcx.sess.source_map().end_point(owner_span)\n+        }\n+        _ => {\n+            bug!(\"Drop location span error: need to handle more Node {:?}\", owner_node);\n+        }\n+    }\n+}\n+\n struct InferBorrowKind<'a, 'tcx> {\n     fcx: &'a FnCtxt<'a, 'tcx>,\n "}, {"sha": "ca55152cc2a8391cefe2cd1cc7917e5ffe01f0a2", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/auto_traits.fixed", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2900c1a5e82b9c43917ba4e3e4ca347289b3d21a/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fauto_traits.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/2900c1a5e82b9c43917ba4e3e4ca347289b3d21a/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fauto_traits.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fauto_traits.fixed?ref=2900c1a5e82b9c43917ba4e3e4ca347289b3d21a", "patch": "@@ -1,5 +1,6 @@\n // run-rustfix\n #![deny(rust_2021_incompatible_closure_captures)]\n+//~^ NOTE: the lint level is defined here\n \n use std::thread;\n \n@@ -12,8 +13,10 @@ fn test_send_trait() {\n     let fptr = SendPointer(&mut f as *mut i32);\n     thread::spawn(move || { let _ = &fptr; unsafe {\n         //~^ ERROR: `Send` closure trait implementation\n+        //~| NOTE: for more information, see\n         //~| HELP: add a dummy let to cause `fptr` to be fully captured\n         *fptr.0 = 20;\n+        //~^ NOTE: in Rust 2018, closure captures all of `fptr`, but in Rust 2021, it only captures `fptr.0`\n     } });\n }\n \n@@ -29,8 +32,10 @@ fn test_sync_trait() {\n     let fptr = SyncPointer(f);\n     thread::spawn(move || { let _ = &fptr; unsafe {\n         //~^ ERROR: `Sync`, `Send` closure trait implementation\n+        //~| NOTE: for more information, see\n         //~| HELP: add a dummy let to cause `fptr` to be fully captured\n         *fptr.0.0 = 20;\n+        //~^ NOTE: in Rust 2018, closure captures all of `fptr`, but in Rust 2021, it only captures `fptr.0.0`\n     } });\n }\n \n@@ -50,15 +55,18 @@ fn test_clone_trait() {\n     let f = U(S(String::from(\"Hello World\")), T(0));\n     let c = || { let _ = &f; \n         //~^ ERROR: `Clone` closure trait implementation, and drop order\n+        //~| NOTE: for more information, see\n         //~| HELP: add a dummy let to cause `f` to be fully captured\n         let f_1 = f.1;\n+        //~^ NOTE: in Rust 2018, closure captures all of `f`, but in Rust 2021, it only captures `f.1`\n         println!(\"{:?}\", f_1.0);\n     };\n \n     let c_clone = c.clone();\n \n     c_clone();\n }\n+//~^ NOTE: in Rust 2018, `f` would be dropped here, but in Rust 2021, only `f.1` would be dropped here alongside the closure\n \n fn main() {\n     test_send_trait();"}, {"sha": "66c43cd865be2e4de653c6f868782eb41c839078", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/auto_traits.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2900c1a5e82b9c43917ba4e3e4ca347289b3d21a/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fauto_traits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2900c1a5e82b9c43917ba4e3e4ca347289b3d21a/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fauto_traits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fauto_traits.rs?ref=2900c1a5e82b9c43917ba4e3e4ca347289b3d21a", "patch": "@@ -1,5 +1,6 @@\n // run-rustfix\n #![deny(rust_2021_incompatible_closure_captures)]\n+//~^ NOTE: the lint level is defined here\n \n use std::thread;\n \n@@ -12,8 +13,10 @@ fn test_send_trait() {\n     let fptr = SendPointer(&mut f as *mut i32);\n     thread::spawn(move || unsafe {\n         //~^ ERROR: `Send` closure trait implementation\n+        //~| NOTE: for more information, see\n         //~| HELP: add a dummy let to cause `fptr` to be fully captured\n         *fptr.0 = 20;\n+        //~^ NOTE: in Rust 2018, closure captures all of `fptr`, but in Rust 2021, it only captures `fptr.0`\n     });\n }\n \n@@ -29,8 +32,10 @@ fn test_sync_trait() {\n     let fptr = SyncPointer(f);\n     thread::spawn(move || unsafe {\n         //~^ ERROR: `Sync`, `Send` closure trait implementation\n+        //~| NOTE: for more information, see\n         //~| HELP: add a dummy let to cause `fptr` to be fully captured\n         *fptr.0.0 = 20;\n+        //~^ NOTE: in Rust 2018, closure captures all of `fptr`, but in Rust 2021, it only captures `fptr.0.0`\n     });\n }\n \n@@ -50,15 +55,18 @@ fn test_clone_trait() {\n     let f = U(S(String::from(\"Hello World\")), T(0));\n     let c = || {\n         //~^ ERROR: `Clone` closure trait implementation, and drop order\n+        //~| NOTE: for more information, see\n         //~| HELP: add a dummy let to cause `f` to be fully captured\n         let f_1 = f.1;\n+        //~^ NOTE: in Rust 2018, closure captures all of `f`, but in Rust 2021, it only captures `f.1`\n         println!(\"{:?}\", f_1.0);\n     };\n \n     let c_clone = c.clone();\n \n     c_clone();\n }\n+//~^ NOTE: in Rust 2018, `f` would be dropped here, but in Rust 2021, only `f.1` would be dropped here alongside the closure\n \n fn main() {\n     test_send_trait();"}, {"sha": "38f8976058d3db3ab62b967e8d8a89e9ab0163dd", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/auto_traits.stderr", "status": "modified", "additions": 21, "deletions": 10, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/2900c1a5e82b9c43917ba4e3e4ca347289b3d21a/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fauto_traits.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2900c1a5e82b9c43917ba4e3e4ca347289b3d21a/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fauto_traits.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fauto_traits.stderr?ref=2900c1a5e82b9c43917ba4e3e4ca347289b3d21a", "patch": "@@ -1,12 +1,14 @@\n error: changes to closure capture in Rust 2021 will affect `Send` closure trait implementation\n-  --> $DIR/auto_traits.rs:13:19\n+  --> $DIR/auto_traits.rs:14:19\n    |\n LL |       thread::spawn(move || unsafe {\n    |  ___________________^\n LL | |\n LL | |\n+LL | |\n LL | |         *fptr.0 = 20;\n    | |         ------- in Rust 2018, closure captures all of `fptr`, but in Rust 2021, it only captures `fptr.0`\n+LL | |\n LL | |     });\n    | |_____^\n    |\n@@ -21,19 +23,22 @@ help: add a dummy let to cause `fptr` to be fully captured\n LL |     thread::spawn(move || { let _ = &fptr; unsafe {\n LL |\n LL |\n+LL |\n LL |         *fptr.0 = 20;\n-LL |     } });\n-   |\n+LL |\n+ ...\n \n error: changes to closure capture in Rust 2021 will affect `Sync`, `Send` closure trait implementation\n-  --> $DIR/auto_traits.rs:30:19\n+  --> $DIR/auto_traits.rs:33:19\n    |\n LL |       thread::spawn(move || unsafe {\n    |  ___________________^\n LL | |\n LL | |\n+LL | |\n LL | |         *fptr.0.0 = 20;\n    | |         --------- in Rust 2018, closure captures all of `fptr`, but in Rust 2021, it only captures `fptr.0.0`\n+LL | |\n LL | |     });\n    | |_____^\n    |\n@@ -43,33 +48,39 @@ help: add a dummy let to cause `fptr` to be fully captured\n LL |     thread::spawn(move || { let _ = &fptr; unsafe {\n LL |\n LL |\n+LL |\n LL |         *fptr.0.0 = 20;\n-LL |     } });\n-   |\n+LL |\n+ ...\n \n error: changes to closure capture in Rust 2021 will affect `Clone` closure trait implementation, and drop order\n-  --> $DIR/auto_traits.rs:51:13\n+  --> $DIR/auto_traits.rs:56:13\n    |\n LL |       let c = || {\n    |  _____________^\n LL | |\n LL | |\n+LL | |\n LL | |         let f_1 = f.1;\n    | |                   --- in Rust 2018, closure captures all of `f`, but in Rust 2021, it only captures `f.1`\n+LL | |\n LL | |         println!(\"{:?}\", f_1.0);\n LL | |     };\n    | |_____^\n+...\n+LL |   }\n+   |   - in Rust 2018, `f` would be dropped here, but in Rust 2021, only `f.1` would be dropped here alongside the closure\n    |\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>\n help: add a dummy let to cause `f` to be fully captured\n    |\n LL |     let c = || { let _ = &f; \n LL |\n LL |\n+LL |\n LL |         let f_1 = f.1;\n-LL |         println!(\"{:?}\", f_1.0);\n-LL |     };\n-   |\n+LL |\n+ ...\n \n error: aborting due to 3 previous errors\n "}, {"sha": "e836f27cd7af1ff1ae363ceceeb32bf8f33807b8", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/insignificant_drop.fixed", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/2900c1a5e82b9c43917ba4e3e4ca347289b3d21a/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Finsignificant_drop.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/2900c1a5e82b9c43917ba4e3e4ca347289b3d21a/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Finsignificant_drop.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Finsignificant_drop.fixed?ref=2900c1a5e82b9c43917ba4e3e4ca347289b3d21a", "patch": "@@ -27,6 +27,9 @@ fn test1_all_need_migration() {\n \n     c();\n }\n+//~^ in Rust 2018, `t` would be dropped here, but in Rust 2021, only `t.0` would be dropped here alongside the closure\n+//~| in Rust 2018, `t1` would be dropped here, but in Rust 2021, only `t1.0` would be dropped here alongside the closure\n+//~| in Rust 2018, `t2` would be dropped here, but in Rust 2021, only `t2.0` would be dropped here alongside the closure\n \n // String implements drop and therefore should be migrated.\n // But in this test cases, `t2` is completely captured and when it is dropped won't be affected\n@@ -48,6 +51,8 @@ fn test2_only_precise_paths_need_migration() {\n \n     c();\n }\n+//~^ in Rust 2018, `t` would be dropped here, but in Rust 2021, only `t.0` would be dropped here alongside the closure\n+//~| in Rust 2018, `t1` would be dropped here, but in Rust 2021, only `t1.0` would be dropped here alongside the closure\n \n // If a variable would've not been captured by value then it would've not been\n // dropped with the closure and therefore doesn't need migration.\n@@ -65,6 +70,7 @@ fn test3_only_by_value_need_migration() {\n \n     c();\n }\n+//~^ in Rust 2018, `t` would be dropped here, but in Rust 2021, only `t.0` would be dropped here alongside the closure\n \n // Copy types get copied into the closure instead of move. Therefore we don't need to\n // migrate then as their drop order isn't tied to the closure.\n@@ -85,6 +91,7 @@ fn test4_only_non_copy_types_need_migration() {\n \n     c();\n }\n+//~^ in Rust 2018, `t` would be dropped here, but in Rust 2021, only `t.0` would be dropped here alongside the closure\n \n fn test5_only_drop_types_need_migration() {\n     struct S(i32, i32);\n@@ -105,6 +112,7 @@ fn test5_only_drop_types_need_migration() {\n \n     c();\n }\n+//~^ in Rust 2018, `t` would be dropped here, but in Rust 2021, only `t.0` would be dropped here alongside the closure\n \n // Since we are using a move closure here, both `t` and `t1` get moved\n // even though they are being used by ref inside the closure.\n@@ -122,6 +130,8 @@ fn test6_move_closures_non_copy_types_might_need_migration() {\n \n     c();\n }\n+//~^ in Rust 2018, `t` would be dropped here, but in Rust 2021, only `t.1` would be dropped here alongside the closure\n+//~| in Rust 2018, `t1` would be dropped here, but in Rust 2021, only `t1.1` would be dropped here alongside the closure\n \n // Test migration analysis in case of Drop + Non Drop aggregates.\n // Note we need migration here only because the non-copy (because Drop type) is captured,\n@@ -139,6 +149,7 @@ fn test7_drop_non_drop_aggregate_need_migration() {\n \n     c();\n }\n+//~^ in Rust 2018, `t` would be dropped here, but in Rust 2021, only `t.0` would be dropped here alongside the closure\n \n fn main() {\n     test1_all_need_migration();"}, {"sha": "fbf9b983f07a265092cae5b2d56ed935b75db791", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/insignificant_drop.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/2900c1a5e82b9c43917ba4e3e4ca347289b3d21a/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Finsignificant_drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2900c1a5e82b9c43917ba4e3e4ca347289b3d21a/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Finsignificant_drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Finsignificant_drop.rs?ref=2900c1a5e82b9c43917ba4e3e4ca347289b3d21a", "patch": "@@ -27,6 +27,9 @@ fn test1_all_need_migration() {\n \n     c();\n }\n+//~^ in Rust 2018, `t` would be dropped here, but in Rust 2021, only `t.0` would be dropped here alongside the closure\n+//~| in Rust 2018, `t1` would be dropped here, but in Rust 2021, only `t1.0` would be dropped here alongside the closure\n+//~| in Rust 2018, `t2` would be dropped here, but in Rust 2021, only `t2.0` would be dropped here alongside the closure\n \n // String implements drop and therefore should be migrated.\n // But in this test cases, `t2` is completely captured and when it is dropped won't be affected\n@@ -48,6 +51,8 @@ fn test2_only_precise_paths_need_migration() {\n \n     c();\n }\n+//~^ in Rust 2018, `t` would be dropped here, but in Rust 2021, only `t.0` would be dropped here alongside the closure\n+//~| in Rust 2018, `t1` would be dropped here, but in Rust 2021, only `t1.0` would be dropped here alongside the closure\n \n // If a variable would've not been captured by value then it would've not been\n // dropped with the closure and therefore doesn't need migration.\n@@ -65,6 +70,7 @@ fn test3_only_by_value_need_migration() {\n \n     c();\n }\n+//~^ in Rust 2018, `t` would be dropped here, but in Rust 2021, only `t.0` would be dropped here alongside the closure\n \n // Copy types get copied into the closure instead of move. Therefore we don't need to\n // migrate then as their drop order isn't tied to the closure.\n@@ -85,6 +91,7 @@ fn test4_only_non_copy_types_need_migration() {\n \n     c();\n }\n+//~^ in Rust 2018, `t` would be dropped here, but in Rust 2021, only `t.0` would be dropped here alongside the closure\n \n fn test5_only_drop_types_need_migration() {\n     struct S(i32, i32);\n@@ -105,6 +112,7 @@ fn test5_only_drop_types_need_migration() {\n \n     c();\n }\n+//~^ in Rust 2018, `t` would be dropped here, but in Rust 2021, only `t.0` would be dropped here alongside the closure\n \n // Since we are using a move closure here, both `t` and `t1` get moved\n // even though they are being used by ref inside the closure.\n@@ -122,6 +130,8 @@ fn test6_move_closures_non_copy_types_might_need_migration() {\n \n     c();\n }\n+//~^ in Rust 2018, `t` would be dropped here, but in Rust 2021, only `t.1` would be dropped here alongside the closure\n+//~| in Rust 2018, `t1` would be dropped here, but in Rust 2021, only `t1.1` would be dropped here alongside the closure\n \n // Test migration analysis in case of Drop + Non Drop aggregates.\n // Note we need migration here only because the non-copy (because Drop type) is captured,\n@@ -139,6 +149,7 @@ fn test7_drop_non_drop_aggregate_need_migration() {\n \n     c();\n }\n+//~^ in Rust 2018, `t` would be dropped here, but in Rust 2021, only `t.0` would be dropped here alongside the closure\n \n fn main() {\n     test1_all_need_migration();"}, {"sha": "e7b2cd1c55347be08a426c83c858b70cf17fc4d9", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/insignificant_drop.stderr", "status": "modified", "additions": 37, "deletions": 6, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/2900c1a5e82b9c43917ba4e3e4ca347289b3d21a/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Finsignificant_drop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2900c1a5e82b9c43917ba4e3e4ca347289b3d21a/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Finsignificant_drop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Finsignificant_drop.stderr?ref=2900c1a5e82b9c43917ba4e3e4ca347289b3d21a", "patch": "@@ -18,6 +18,13 @@ LL | |         let _t2 = t2.0;\n LL | |\n LL | |     };\n    | |_____^\n+...\n+LL |   }\n+   |   -\n+   |   |\n+   |   in Rust 2018, `t` would be dropped here, but in Rust 2021, only `t.0` would be dropped here alongside the closure\n+   |   in Rust 2018, `t1` would be dropped here, but in Rust 2021, only `t1.0` would be dropped here alongside the closure\n+   |   in Rust 2018, `t2` would be dropped here, but in Rust 2021, only `t2.0` would be dropped here alongside the closure\n    |\n note: the lint level is defined here\n   --> $DIR/insignificant_drop.rs:3:9\n@@ -36,7 +43,7 @@ LL |         let _t = t.0;\n  ...\n \n error: changes to closure capture in Rust 2021 will affect drop order\n-  --> $DIR/insignificant_drop.rs:38:13\n+  --> $DIR/insignificant_drop.rs:41:13\n    |\n LL |       let c = || {\n    |  _____________^\n@@ -52,6 +59,12 @@ LL | |\n LL | |         let _t2 = t2;\n LL | |     };\n    | |_____^\n+...\n+LL |   }\n+   |   -\n+   |   |\n+   |   in Rust 2018, `t` would be dropped here, but in Rust 2021, only `t.0` would be dropped here alongside the closure\n+   |   in Rust 2018, `t1` would be dropped here, but in Rust 2021, only `t1.0` would be dropped here alongside the closure\n    |\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>\n help: add a dummy let to cause `t`, `t1` to be fully captured\n@@ -65,7 +78,7 @@ LL |\n  ...\n \n error: changes to closure capture in Rust 2021 will affect drop order\n-  --> $DIR/insignificant_drop.rs:57:13\n+  --> $DIR/insignificant_drop.rs:62:13\n    |\n LL |       let c = || {\n    |  _____________^\n@@ -78,6 +91,9 @@ LL | |\n LL | |         println!(\"{}\", t1.1);\n LL | |     };\n    | |_____^\n+...\n+LL |   }\n+   |   - in Rust 2018, `t` would be dropped here, but in Rust 2021, only `t.0` would be dropped here alongside the closure\n    |\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>\n help: add a dummy let to cause `t` to be fully captured\n@@ -91,7 +107,7 @@ LL |\n  ...\n \n error: changes to closure capture in Rust 2021 will affect drop order\n-  --> $DIR/insignificant_drop.rs:77:13\n+  --> $DIR/insignificant_drop.rs:83:13\n    |\n LL |       let c = || {\n    |  _____________^\n@@ -104,6 +120,9 @@ LL | |\n LL | |         let _t1 = t1.0;\n LL | |     };\n    | |_____^\n+...\n+LL |   }\n+   |   - in Rust 2018, `t` would be dropped here, but in Rust 2021, only `t.0` would be dropped here alongside the closure\n    |\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>\n help: add a dummy let to cause `t` to be fully captured\n@@ -117,7 +136,7 @@ LL |\n  ...\n \n error: changes to closure capture in Rust 2021 will affect drop order\n-  --> $DIR/insignificant_drop.rs:97:13\n+  --> $DIR/insignificant_drop.rs:104:13\n    |\n LL |       let c = || {\n    |  _____________^\n@@ -130,6 +149,9 @@ LL | |\n LL | |         let _s = s.0;\n LL | |     };\n    | |_____^\n+...\n+LL |   }\n+   |   - in Rust 2018, `t` would be dropped here, but in Rust 2021, only `t.0` would be dropped here alongside the closure\n    |\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>\n help: add a dummy let to cause `t` to be fully captured\n@@ -143,7 +165,7 @@ LL |\n  ...\n \n error: changes to closure capture in Rust 2021 will affect drop order\n-  --> $DIR/insignificant_drop.rs:114:13\n+  --> $DIR/insignificant_drop.rs:122:13\n    |\n LL |       let c = move || {\n    |  _____________^\n@@ -158,6 +180,12 @@ LL | |\n LL | |\n LL | |     };\n    | |_____^\n+...\n+LL |   }\n+   |   -\n+   |   |\n+   |   in Rust 2018, `t1` would be dropped here, but in Rust 2021, only `t1.1` would be dropped here alongside the closure\n+   |   in Rust 2018, `t` would be dropped here, but in Rust 2021, only `t.1` would be dropped here alongside the closure\n    |\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>\n help: add a dummy let to cause `t1`, `t` to be fully captured\n@@ -171,7 +199,7 @@ LL |\n  ...\n \n error: changes to closure capture in Rust 2021 will affect drop order\n-  --> $DIR/insignificant_drop.rs:132:13\n+  --> $DIR/insignificant_drop.rs:142:13\n    |\n LL |       let c = || {\n    |  _____________^\n@@ -183,6 +211,9 @@ LL | |         let _t = t.0;\n LL | |\n LL | |     };\n    | |_____^\n+...\n+LL |   }\n+   |   - in Rust 2018, `t` would be dropped here, but in Rust 2021, only `t.0` would be dropped here alongside the closure\n    |\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>\n help: add a dummy let to cause `t` to be fully captured"}, {"sha": "4626c04e9ba6ea3a51b342b471f74aa6d5cd7cac", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/insignificant_drop_attr_migrations.fixed", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2900c1a5e82b9c43917ba4e3e4ca347289b3d21a/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Finsignificant_drop_attr_migrations.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/2900c1a5e82b9c43917ba4e3e4ca347289b3d21a/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Finsignificant_drop_attr_migrations.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Finsignificant_drop_attr_migrations.fixed?ref=2900c1a5e82b9c43917ba4e3e4ca347289b3d21a", "patch": "@@ -44,6 +44,7 @@ fn significant_drop_needs_migration() {\n \n     c();\n }\n+//~^ NOTE: in Rust 2018, `t` would be dropped here, but in Rust 2021, only `t.0` would be dropped here alongside the closure\n \n // Even if a type implements an insignificant drop, if it's\n // elements have a significant drop then the overall type is\n@@ -63,6 +64,7 @@ fn generic_struct_with_significant_drop_needs_migration() {\n \n     c();\n }\n+//~^ NOTE: in Rust 2018, `t` would be dropped here, but in Rust 2021, only `t.1` would be dropped here alongside the closure\n \n fn main() {\n     significant_drop_needs_migration();"}, {"sha": "ebcf1551bacf62d9547e53fbd5750c76fb47ab9f", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/insignificant_drop_attr_migrations.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2900c1a5e82b9c43917ba4e3e4ca347289b3d21a/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Finsignificant_drop_attr_migrations.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2900c1a5e82b9c43917ba4e3e4ca347289b3d21a/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Finsignificant_drop_attr_migrations.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Finsignificant_drop_attr_migrations.rs?ref=2900c1a5e82b9c43917ba4e3e4ca347289b3d21a", "patch": "@@ -44,6 +44,7 @@ fn significant_drop_needs_migration() {\n \n     c();\n }\n+//~^ NOTE: in Rust 2018, `t` would be dropped here, but in Rust 2021, only `t.0` would be dropped here alongside the closure\n \n // Even if a type implements an insignificant drop, if it's\n // elements have a significant drop then the overall type is\n@@ -63,6 +64,7 @@ fn generic_struct_with_significant_drop_needs_migration() {\n \n     c();\n }\n+//~^ NOTE: in Rust 2018, `t` would be dropped here, but in Rust 2021, only `t.1` would be dropped here alongside the closure\n \n fn main() {\n     significant_drop_needs_migration();"}, {"sha": "97ff0409d0a63c7aeb9a4b9a1a383b93ec890ea5", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/insignificant_drop_attr_migrations.stderr", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2900c1a5e82b9c43917ba4e3e4ca347289b3d21a/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Finsignificant_drop_attr_migrations.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2900c1a5e82b9c43917ba4e3e4ca347289b3d21a/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Finsignificant_drop_attr_migrations.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Finsignificant_drop_attr_migrations.stderr?ref=2900c1a5e82b9c43917ba4e3e4ca347289b3d21a", "patch": "@@ -11,6 +11,9 @@ LL | |         let _t = t.0;\n LL | |\n LL | |     };\n    | |_____^\n+...\n+LL |   }\n+   |   - in Rust 2018, `t` would be dropped here, but in Rust 2021, only `t.0` would be dropped here alongside the closure\n    |\n note: the lint level is defined here\n   --> $DIR/insignificant_drop_attr_migrations.rs:3:9\n@@ -29,7 +32,7 @@ LL |\n  ...\n \n error: changes to closure capture in Rust 2021 will affect drop order\n-  --> $DIR/insignificant_drop_attr_migrations.rs:56:13\n+  --> $DIR/insignificant_drop_attr_migrations.rs:57:13\n    |\n LL |       let c = move || {\n    |  _____________^\n@@ -41,6 +44,9 @@ LL | |         let _t = t.1;\n LL | |\n LL | |     };\n    | |_____^\n+...\n+LL |   }\n+   |   - in Rust 2018, `t` would be dropped here, but in Rust 2021, only `t.1` would be dropped here alongside the closure\n    |\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>\n help: add a dummy let to cause `t` to be fully captured"}, {"sha": "f3c15a2e6b676e08dc3966c66b644365f4912241", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/migrations_rustfix.fixed", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2900c1a5e82b9c43917ba4e3e4ca347289b3d21a/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmigrations_rustfix.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/2900c1a5e82b9c43917ba4e3e4ca347289b3d21a/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmigrations_rustfix.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmigrations_rustfix.fixed?ref=2900c1a5e82b9c43917ba4e3e4ca347289b3d21a", "patch": "@@ -22,11 +22,11 @@ fn closure_contains_block() {\n         //~| HELP: add a dummy let to cause `t` to be fully captured\n         let _t = t.0;\n         //~^ NOTE: in Rust 2018, closure captures all of `t`, but in Rust 2021, it only captures `t.0`\n-\n     };\n \n     c();\n }\n+//~^ NOTE: in Rust 2018, `t` would be dropped here, but in Rust 2021, only `t.0` would be dropped here alongside the closure\n \n fn closure_doesnt_contain_block() {\n     let t = (Foo(0), Foo(0));\n@@ -38,6 +38,7 @@ fn closure_doesnt_contain_block() {\n \n     c();\n }\n+//~^ NOTE: in Rust 2018, `t` would be dropped here, but in Rust 2021, only `t.0` would be dropped here alongside the closure\n \n fn main() {\n     closure_contains_block();"}, {"sha": "50936d15302b7914e36f1abd1dd8a134c68912da", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/migrations_rustfix.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2900c1a5e82b9c43917ba4e3e4ca347289b3d21a/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmigrations_rustfix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2900c1a5e82b9c43917ba4e3e4ca347289b3d21a/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmigrations_rustfix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmigrations_rustfix.rs?ref=2900c1a5e82b9c43917ba4e3e4ca347289b3d21a", "patch": "@@ -22,11 +22,11 @@ fn closure_contains_block() {\n         //~| HELP: add a dummy let to cause `t` to be fully captured\n         let _t = t.0;\n         //~^ NOTE: in Rust 2018, closure captures all of `t`, but in Rust 2021, it only captures `t.0`\n-\n     };\n \n     c();\n }\n+//~^ NOTE: in Rust 2018, `t` would be dropped here, but in Rust 2021, only `t.0` would be dropped here alongside the closure\n \n fn closure_doesnt_contain_block() {\n     let t = (Foo(0), Foo(0));\n@@ -38,6 +38,7 @@ fn closure_doesnt_contain_block() {\n \n     c();\n }\n+//~^ NOTE: in Rust 2018, `t` would be dropped here, but in Rust 2021, only `t.0` would be dropped here alongside the closure\n \n fn main() {\n     closure_contains_block();"}, {"sha": "09bae6d3f134482281678cfee7691fa7d2fb7b22", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/migrations_rustfix.stderr", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2900c1a5e82b9c43917ba4e3e4ca347289b3d21a/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmigrations_rustfix.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2900c1a5e82b9c43917ba4e3e4ca347289b3d21a/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmigrations_rustfix.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmigrations_rustfix.stderr?ref=2900c1a5e82b9c43917ba4e3e4ca347289b3d21a", "patch": "@@ -9,9 +9,11 @@ LL | |\n LL | |         let _t = t.0;\n    | |                  --- in Rust 2018, closure captures all of `t`, but in Rust 2021, it only captures `t.0`\n LL | |\n-LL | |\n LL | |     };\n    | |_____^\n+...\n+LL |   }\n+   |   - in Rust 2018, `t` would be dropped here, but in Rust 2021, only `t.0` would be dropped here alongside the closure\n    |\n note: the lint level is defined here\n   --> $DIR/migrations_rustfix.rs:2:9\n@@ -36,6 +38,9 @@ LL |     let c = || t.0;\n    |             ^^^---\n    |                |\n    |                in Rust 2018, closure captures all of `t`, but in Rust 2021, it only captures `t.0`\n+...\n+LL | }\n+   | - in Rust 2018, `t` would be dropped here, but in Rust 2021, only `t.0` would be dropped here alongside the closure\n    |\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>\n help: add a dummy let to cause `t` to be fully captured"}, {"sha": "cb3148214b4b88a265b6660cc6120c4f09ed000e", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/mir_calls_to_shims.fixed", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2900c1a5e82b9c43917ba4e3e4ca347289b3d21a/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmir_calls_to_shims.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/2900c1a5e82b9c43917ba4e3e4ca347289b3d21a/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmir_calls_to_shims.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmir_calls_to_shims.fixed?ref=2900c1a5e82b9c43917ba4e3e4ca347289b3d21a", "patch": "@@ -1,6 +1,7 @@\n // run-rustfix\n \n #![deny(rust_2021_incompatible_closure_captures)]\n+//~^ NOTE: the lint level is defined here\n // ignore-wasm32-bare compiled with panic=abort by default\n #![feature(fn_traits)]\n #![feature(never_type)]\n@@ -18,8 +19,10 @@ where\n     let f = panic::AssertUnwindSafe(f);\n     let result = panic::catch_unwind(move || { let _ = &f; \n         //~^ ERROR: `UnwindSafe`, `RefUnwindSafe` closure trait implementation\n+        //~| NOTE: for more information, see\n         //~| HELP: add a dummy let to cause `f` to be fully captured\n         f.0()\n+        //~^ NOTE: in Rust 2018, closure captures all of `f`, but in Rust 2021, it only captures `f.0`\n     });\n     if let Ok(..) = result {\n         panic!(\"diverging function returned\");"}, {"sha": "f6f8ad2c52078424b48f148b24d48060bc879239", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/mir_calls_to_shims.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2900c1a5e82b9c43917ba4e3e4ca347289b3d21a/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmir_calls_to_shims.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2900c1a5e82b9c43917ba4e3e4ca347289b3d21a/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmir_calls_to_shims.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmir_calls_to_shims.rs?ref=2900c1a5e82b9c43917ba4e3e4ca347289b3d21a", "patch": "@@ -1,6 +1,7 @@\n // run-rustfix\n \n #![deny(rust_2021_incompatible_closure_captures)]\n+//~^ NOTE: the lint level is defined here\n // ignore-wasm32-bare compiled with panic=abort by default\n #![feature(fn_traits)]\n #![feature(never_type)]\n@@ -18,8 +19,10 @@ where\n     let f = panic::AssertUnwindSafe(f);\n     let result = panic::catch_unwind(move || {\n         //~^ ERROR: `UnwindSafe`, `RefUnwindSafe` closure trait implementation\n+        //~| NOTE: for more information, see\n         //~| HELP: add a dummy let to cause `f` to be fully captured\n         f.0()\n+        //~^ NOTE: in Rust 2018, closure captures all of `f`, but in Rust 2021, it only captures `f.0`\n     });\n     if let Ok(..) = result {\n         panic!(\"diverging function returned\");"}, {"sha": "9a45e276fcdfc4069d16a3164a16419dc3158731", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/mir_calls_to_shims.stderr", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2900c1a5e82b9c43917ba4e3e4ca347289b3d21a/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmir_calls_to_shims.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2900c1a5e82b9c43917ba4e3e4ca347289b3d21a/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmir_calls_to_shims.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmir_calls_to_shims.stderr?ref=2900c1a5e82b9c43917ba4e3e4ca347289b3d21a", "patch": "@@ -1,12 +1,14 @@\n error: changes to closure capture in Rust 2021 will affect `UnwindSafe`, `RefUnwindSafe` closure trait implementation\n-  --> $DIR/mir_calls_to_shims.rs:19:38\n+  --> $DIR/mir_calls_to_shims.rs:20:38\n    |\n LL |       let result = panic::catch_unwind(move || {\n    |  ______________________________________^\n LL | |\n LL | |\n+LL | |\n LL | |         f.0()\n    | |         --- in Rust 2018, closure captures all of `f`, but in Rust 2021, it only captures `f.0`\n+LL | |\n LL | |     });\n    | |_____^\n    |\n@@ -21,9 +23,10 @@ help: add a dummy let to cause `f` to be fully captured\n LL |     let result = panic::catch_unwind(move || { let _ = &f; \n LL |\n LL |\n+LL |\n LL |         f.0()\n-LL |     });\n-   |\n+LL |\n+ ...\n \n error: aborting due to previous error\n "}, {"sha": "7bec8ef06fce339a46268068c1224300f6d3db07", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/precise.stderr", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2900c1a5e82b9c43917ba4e3e4ca347289b3d21a/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fprecise.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2900c1a5e82b9c43917ba4e3e4ca347289b3d21a/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fprecise.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fprecise.stderr?ref=2900c1a5e82b9c43917ba4e3e4ca347289b3d21a", "patch": "@@ -10,6 +10,9 @@ LL | |         let _t = t.0;\n LL | |         let _t = &t.1;\n LL | |     };\n    | |_____^\n+...\n+LL |   }\n+   |   - in Rust 2018, `t` would be dropped here, but in Rust 2021, only `t.0` would be dropped here alongside the closure\n    |\n note: the lint level is defined here\n   --> $DIR/precise.rs:3:9\n@@ -42,6 +45,9 @@ LL | |         let _x = u.1.0;\n    | |                  ----- in Rust 2018, closure captures all of `u`, but in Rust 2021, it only captures `u.1.0`\n LL | |     };\n    | |_____^\n+...\n+LL |   }\n+   |   - in Rust 2018, `u` would be dropped here, but in Rust 2021, only `u.0.1`, `u.0.0`, `u.1.0` would be dropped here alongside the closure\n    |\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>\n help: add a dummy let to cause `u` to be fully captured"}, {"sha": "236fdb9e26ea2b3972400e0e992529c7f356b8e2", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/significant_drop.fixed", "status": "modified", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/2900c1a5e82b9c43917ba4e3e4ca347289b3d21a/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fsignificant_drop.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/2900c1a5e82b9c43917ba4e3e4ca347289b3d21a/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fsignificant_drop.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fsignificant_drop.fixed?ref=2900c1a5e82b9c43917ba4e3e4ca347289b3d21a", "patch": "@@ -36,6 +36,9 @@ fn test1_all_need_migration() {\n \n     c();\n }\n+//~^ NOTE: in Rust 2018, `t` would be dropped here, but in Rust 2021, only `t.0` would be dropped here alongside the closure\n+//~| NOTE: in Rust 2018, `t1` would be dropped here, but in Rust 2021, only `t1.0` would be dropped here alongside the closure\n+//~| NOTE: in Rust 2018, `t2` would be dropped here, but in Rust 2021, only `t2.0` would be dropped here alongside the closure\n \n // String implements drop and therefore should be migrated.\n // But in this test cases, `t2` is completely captured and when it is dropped won't be affected\n@@ -57,6 +60,8 @@ fn test2_only_precise_paths_need_migration() {\n \n     c();\n }\n+//~^ NOTE: in Rust 2018, `t` would be dropped here, but in Rust 2021, only `t.0` would be dropped here alongside the closure\n+//~| NOTE: in Rust 2018, `t1` would be dropped here, but in Rust 2021, only `t1.0` would be dropped here alongside the closure\n \n // If a variable would've not been captured by value then it would've not been\n // dropped with the closure and therefore doesn't need migration.\n@@ -74,6 +79,7 @@ fn test3_only_by_value_need_migration() {\n \n     c();\n }\n+//~^ NOTE: in Rust 2018, `t` would be dropped here, but in Rust 2021, only `t.0` would be dropped here alongside the closure\n \n // The root variable might not implement drop themselves but some path starting\n // at the root variable might implement Drop.\n@@ -92,6 +98,7 @@ fn test4_type_contains_drop_need_migration() {\n \n     c();\n }\n+//~^ NOTE: in Rust 2018, `t` would be dropped here, but in Rust 2021, only `t.0` would be dropped here alongside the closure\n \n // Test migration analysis in case of Drop + Non Drop aggregates.\n // Note we need migration here only because the non-copy (because Drop type) is captured,\n@@ -109,6 +116,7 @@ fn test5_drop_non_drop_aggregate_need_migration() {\n \n     c();\n }\n+//~^ NOTE: in Rust 2018, `t` would be dropped here, but in Rust 2021, only `t.0` would be dropped here alongside the closure\n \n // Test migration analysis in case of Significant and Insignificant Drop aggregates.\n fn test6_significant_insignificant_drop_aggregate_need_migration() {\n@@ -124,6 +132,7 @@ fn test6_significant_insignificant_drop_aggregate_need_migration() {\n \n     c();\n }\n+//~^ NOTE: in Rust 2018, `t` would be dropped here, but in Rust 2021, only `t.1` would be dropped here alongside the closure\n \n // Since we are using a move closure here, both `t` and `t1` get moved\n // even though they are being used by ref inside the closure.\n@@ -142,6 +151,47 @@ fn test7_move_closures_non_copy_types_might_need_migration() {\n \n     c();\n }\n+//~^ NOTE: in Rust 2018, `t` would be dropped here, but in Rust 2021, only `t.1` would be dropped here alongside the closure\n+//~| NOTE: in Rust 2018, `t1` would be dropped here, but in Rust 2021, only `t1.1` would be dropped here alongside the closure\n+\n+\n+fn test8_drop_order_and_blocks() {\n+    {\n+        let tuple =\n+          (String::from(\"foo\"), String::from(\"bar\"));\n+        {\n+            let c = || { let _ = &tuple; \n+                //~^ ERROR: drop order\n+                //~| NOTE: for more information, see\n+                //~| HELP: add a dummy let to cause `tuple` to be fully captured\n+                tuple.0;\n+                //~^ NOTE: in Rust 2018, closure captures all of `tuple`, but in Rust 2021, it only captures `tuple.0`\n+            };\n+\n+            c();\n+        }\n+        //~^ NOTE: in Rust 2018, `tuple` would be dropped here, but in Rust 2021, only `tuple.0` would be dropped here alongside the closure\n+    }\n+}\n+\n+fn test9_drop_order_and_nested_closures() {\n+    let tuple =\n+        (String::from(\"foo\"), String::from(\"bar\"));\n+    let b = || {\n+        let c = || { let _ = &tuple; \n+            //~^ ERROR: drop order\n+            //~| NOTE: for more information, see\n+            //~| HELP: add a dummy let to cause `tuple` to be fully captured\n+            tuple.0;\n+            //~^ NOTE: in Rust 2018, closure captures all of `tuple`, but in Rust 2021, it only captures `tuple.0`\n+        };\n+\n+        c();\n+    };\n+    //~^ NOTE: in Rust 2018, `tuple` would be dropped here, but in Rust 2021, only `tuple.0` would be dropped here alongside the closure\n+\n+    b();\n+}\n \n fn main() {\n     test1_all_need_migration();\n@@ -151,4 +201,6 @@ fn main() {\n     test5_drop_non_drop_aggregate_need_migration();\n     test6_significant_insignificant_drop_aggregate_need_migration();\n     test7_move_closures_non_copy_types_might_need_migration();\n+    test8_drop_order_and_blocks();\n+    test9_drop_order_and_nested_closures();\n }"}, {"sha": "a57f7aa565e120788fd2994648d502bc7fc8125e", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/significant_drop.rs", "status": "modified", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/2900c1a5e82b9c43917ba4e3e4ca347289b3d21a/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fsignificant_drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2900c1a5e82b9c43917ba4e3e4ca347289b3d21a/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fsignificant_drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fsignificant_drop.rs?ref=2900c1a5e82b9c43917ba4e3e4ca347289b3d21a", "patch": "@@ -36,6 +36,9 @@ fn test1_all_need_migration() {\n \n     c();\n }\n+//~^ NOTE: in Rust 2018, `t` would be dropped here, but in Rust 2021, only `t.0` would be dropped here alongside the closure\n+//~| NOTE: in Rust 2018, `t1` would be dropped here, but in Rust 2021, only `t1.0` would be dropped here alongside the closure\n+//~| NOTE: in Rust 2018, `t2` would be dropped here, but in Rust 2021, only `t2.0` would be dropped here alongside the closure\n \n // String implements drop and therefore should be migrated.\n // But in this test cases, `t2` is completely captured and when it is dropped won't be affected\n@@ -57,6 +60,8 @@ fn test2_only_precise_paths_need_migration() {\n \n     c();\n }\n+//~^ NOTE: in Rust 2018, `t` would be dropped here, but in Rust 2021, only `t.0` would be dropped here alongside the closure\n+//~| NOTE: in Rust 2018, `t1` would be dropped here, but in Rust 2021, only `t1.0` would be dropped here alongside the closure\n \n // If a variable would've not been captured by value then it would've not been\n // dropped with the closure and therefore doesn't need migration.\n@@ -74,6 +79,7 @@ fn test3_only_by_value_need_migration() {\n \n     c();\n }\n+//~^ NOTE: in Rust 2018, `t` would be dropped here, but in Rust 2021, only `t.0` would be dropped here alongside the closure\n \n // The root variable might not implement drop themselves but some path starting\n // at the root variable might implement Drop.\n@@ -92,6 +98,7 @@ fn test4_type_contains_drop_need_migration() {\n \n     c();\n }\n+//~^ NOTE: in Rust 2018, `t` would be dropped here, but in Rust 2021, only `t.0` would be dropped here alongside the closure\n \n // Test migration analysis in case of Drop + Non Drop aggregates.\n // Note we need migration here only because the non-copy (because Drop type) is captured,\n@@ -109,6 +116,7 @@ fn test5_drop_non_drop_aggregate_need_migration() {\n \n     c();\n }\n+//~^ NOTE: in Rust 2018, `t` would be dropped here, but in Rust 2021, only `t.0` would be dropped here alongside the closure\n \n // Test migration analysis in case of Significant and Insignificant Drop aggregates.\n fn test6_significant_insignificant_drop_aggregate_need_migration() {\n@@ -124,6 +132,7 @@ fn test6_significant_insignificant_drop_aggregate_need_migration() {\n \n     c();\n }\n+//~^ NOTE: in Rust 2018, `t` would be dropped here, but in Rust 2021, only `t.1` would be dropped here alongside the closure\n \n // Since we are using a move closure here, both `t` and `t1` get moved\n // even though they are being used by ref inside the closure.\n@@ -142,6 +151,47 @@ fn test7_move_closures_non_copy_types_might_need_migration() {\n \n     c();\n }\n+//~^ NOTE: in Rust 2018, `t` would be dropped here, but in Rust 2021, only `t.1` would be dropped here alongside the closure\n+//~| NOTE: in Rust 2018, `t1` would be dropped here, but in Rust 2021, only `t1.1` would be dropped here alongside the closure\n+\n+\n+fn test8_drop_order_and_blocks() {\n+    {\n+        let tuple =\n+          (String::from(\"foo\"), String::from(\"bar\"));\n+        {\n+            let c = || {\n+                //~^ ERROR: drop order\n+                //~| NOTE: for more information, see\n+                //~| HELP: add a dummy let to cause `tuple` to be fully captured\n+                tuple.0;\n+                //~^ NOTE: in Rust 2018, closure captures all of `tuple`, but in Rust 2021, it only captures `tuple.0`\n+            };\n+\n+            c();\n+        }\n+        //~^ NOTE: in Rust 2018, `tuple` would be dropped here, but in Rust 2021, only `tuple.0` would be dropped here alongside the closure\n+    }\n+}\n+\n+fn test9_drop_order_and_nested_closures() {\n+    let tuple =\n+        (String::from(\"foo\"), String::from(\"bar\"));\n+    let b = || {\n+        let c = || {\n+            //~^ ERROR: drop order\n+            //~| NOTE: for more information, see\n+            //~| HELP: add a dummy let to cause `tuple` to be fully captured\n+            tuple.0;\n+            //~^ NOTE: in Rust 2018, closure captures all of `tuple`, but in Rust 2021, it only captures `tuple.0`\n+        };\n+\n+        c();\n+    };\n+    //~^ NOTE: in Rust 2018, `tuple` would be dropped here, but in Rust 2021, only `tuple.0` would be dropped here alongside the closure\n+\n+    b();\n+}\n \n fn main() {\n     test1_all_need_migration();\n@@ -151,4 +201,6 @@ fn main() {\n     test5_drop_non_drop_aggregate_need_migration();\n     test6_significant_insignificant_drop_aggregate_need_migration();\n     test7_move_closures_non_copy_types_might_need_migration();\n+    test8_drop_order_and_blocks();\n+    test9_drop_order_and_nested_closures();\n }"}, {"sha": "13eac4943a469e025ef9fab5b45c3d39cef73f29", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/significant_drop.stderr", "status": "modified", "additions": 94, "deletions": 7, "changes": 101, "blob_url": "https://github.com/rust-lang/rust/blob/2900c1a5e82b9c43917ba4e3e4ca347289b3d21a/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fsignificant_drop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2900c1a5e82b9c43917ba4e3e4ca347289b3d21a/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fsignificant_drop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fsignificant_drop.stderr?ref=2900c1a5e82b9c43917ba4e3e4ca347289b3d21a", "patch": "@@ -17,6 +17,13 @@ LL | |         let _t2 = t2.0;\n LL | |\n LL | |     };\n    | |_____^\n+...\n+LL |   }\n+   |   -\n+   |   |\n+   |   in Rust 2018, `t` would be dropped here, but in Rust 2021, only `t.0` would be dropped here alongside the closure\n+   |   in Rust 2018, `t1` would be dropped here, but in Rust 2021, only `t1.0` would be dropped here alongside the closure\n+   |   in Rust 2018, `t2` would be dropped here, but in Rust 2021, only `t2.0` would be dropped here alongside the closure\n    |\n note: the lint level is defined here\n   --> $DIR/significant_drop.rs:2:9\n@@ -35,7 +42,7 @@ LL |\n  ...\n \n error: changes to closure capture in Rust 2021 will affect drop order\n-  --> $DIR/significant_drop.rs:47:13\n+  --> $DIR/significant_drop.rs:50:13\n    |\n LL |       let c = || {\n    |  _____________^\n@@ -51,6 +58,12 @@ LL | |\n LL | |         let _t2 = t2;\n LL | |     };\n    | |_____^\n+...\n+LL |   }\n+   |   -\n+   |   |\n+   |   in Rust 2018, `t` would be dropped here, but in Rust 2021, only `t.0` would be dropped here alongside the closure\n+   |   in Rust 2018, `t1` would be dropped here, but in Rust 2021, only `t1.0` would be dropped here alongside the closure\n    |\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>\n help: add a dummy let to cause `t`, `t1` to be fully captured\n@@ -64,7 +77,7 @@ LL |\n  ...\n \n error: changes to closure capture in Rust 2021 will affect drop order\n-  --> $DIR/significant_drop.rs:66:13\n+  --> $DIR/significant_drop.rs:71:13\n    |\n LL |       let c = || {\n    |  _____________^\n@@ -77,6 +90,9 @@ LL | |\n LL | |         println!(\"{:?}\", t1.1);\n LL | |     };\n    | |_____^\n+...\n+LL |   }\n+   |   - in Rust 2018, `t` would be dropped here, but in Rust 2021, only `t.0` would be dropped here alongside the closure\n    |\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>\n help: add a dummy let to cause `t` to be fully captured\n@@ -90,7 +106,7 @@ LL |\n  ...\n \n error: changes to closure capture in Rust 2021 will affect drop order\n-  --> $DIR/significant_drop.rs:85:13\n+  --> $DIR/significant_drop.rs:91:13\n    |\n LL |       let c = || {\n    |  _____________^\n@@ -102,6 +118,9 @@ LL | |         let _t = t.0;\n LL | |\n LL | |     };\n    | |_____^\n+...\n+LL |   }\n+   |   - in Rust 2018, `t` would be dropped here, but in Rust 2021, only `t.0` would be dropped here alongside the closure\n    |\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>\n help: add a dummy let to cause `t` to be fully captured\n@@ -115,7 +134,7 @@ LL |\n  ...\n \n error: changes to closure capture in Rust 2021 will affect drop order\n-  --> $DIR/significant_drop.rs:102:13\n+  --> $DIR/significant_drop.rs:109:13\n    |\n LL |       let c = || {\n    |  _____________^\n@@ -127,6 +146,9 @@ LL | |         let _t = t.0;\n LL | |\n LL | |     };\n    | |_____^\n+...\n+LL |   }\n+   |   - in Rust 2018, `t` would be dropped here, but in Rust 2021, only `t.0` would be dropped here alongside the closure\n    |\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>\n help: add a dummy let to cause `t` to be fully captured\n@@ -140,7 +162,7 @@ LL |\n  ...\n \n error: changes to closure capture in Rust 2021 will affect drop order\n-  --> $DIR/significant_drop.rs:117:13\n+  --> $DIR/significant_drop.rs:125:13\n    |\n LL |       let c = || {\n    |  _____________^\n@@ -152,6 +174,9 @@ LL | |         let _t = t.1;\n LL | |\n LL | |     };\n    | |_____^\n+...\n+LL |   }\n+   |   - in Rust 2018, `t` would be dropped here, but in Rust 2021, only `t.1` would be dropped here alongside the closure\n    |\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>\n help: add a dummy let to cause `t` to be fully captured\n@@ -165,7 +190,7 @@ LL |\n  ...\n \n error: changes to closure capture in Rust 2021 will affect drop order\n-  --> $DIR/significant_drop.rs:134:13\n+  --> $DIR/significant_drop.rs:143:13\n    |\n LL |       let c = move || {\n    |  _____________^\n@@ -180,6 +205,12 @@ LL | |\n LL | |\n LL | |     };\n    | |_____^\n+...\n+LL |   }\n+   |   -\n+   |   |\n+   |   in Rust 2018, `t1` would be dropped here, but in Rust 2021, only `t1.1` would be dropped here alongside the closure\n+   |   in Rust 2018, `t` would be dropped here, but in Rust 2021, only `t.1` would be dropped here alongside the closure\n    |\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>\n help: add a dummy let to cause `t1`, `t` to be fully captured\n@@ -192,5 +223,61 @@ LL |         println!(\"{:?} {:?}\", t1.1, t.1);\n LL |\n  ...\n \n-error: aborting due to 7 previous errors\n+error: changes to closure capture in Rust 2021 will affect drop order\n+  --> $DIR/significant_drop.rs:163:21\n+   |\n+LL |               let c = || {\n+   |  _____________________^\n+LL | |\n+LL | |\n+LL | |\n+LL | |                 tuple.0;\n+   | |                 ------- in Rust 2018, closure captures all of `tuple`, but in Rust 2021, it only captures `tuple.0`\n+LL | |\n+LL | |             };\n+   | |_____________^\n+...\n+LL |           }\n+   |           - in Rust 2018, `tuple` would be dropped here, but in Rust 2021, only `tuple.0` would be dropped here alongside the closure\n+   |\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>\n+help: add a dummy let to cause `tuple` to be fully captured\n+   |\n+LL |             let c = || { let _ = &tuple; \n+LL |\n+LL |\n+LL |\n+LL |                 tuple.0;\n+LL |\n+ ...\n+\n+error: changes to closure capture in Rust 2021 will affect drop order\n+  --> $DIR/significant_drop.rs:181:17\n+   |\n+LL |           let c = || {\n+   |  _________________^\n+LL | |\n+LL | |\n+LL | |\n+LL | |             tuple.0;\n+   | |             ------- in Rust 2018, closure captures all of `tuple`, but in Rust 2021, it only captures `tuple.0`\n+LL | |\n+LL | |         };\n+   | |_________^\n+...\n+LL |       };\n+   |       - in Rust 2018, `tuple` would be dropped here, but in Rust 2021, only `tuple.0` would be dropped here alongside the closure\n+   |\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>\n+help: add a dummy let to cause `tuple` to be fully captured\n+   |\n+LL |         let c = || { let _ = &tuple; \n+LL |\n+LL |\n+LL |\n+LL |             tuple.0;\n+LL |\n+ ...\n+\n+error: aborting due to 9 previous errors\n "}]}