{"sha": "d91b7b61eff9a9fdf8506f7d1b41fde47071503c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ5MWI3YjYxZWZmOWE5ZmRmODUwNmY3ZDFiNDFmZGU0NzA3MTUwM2M=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-10-03T19:46:22Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-10-05T04:35:06Z"}, "message": "Encapsulate current sysroot and lib path handling into util::filesearch", "tree": {"sha": "8ef6286c1070ebf6edbef1368ff24cafdcb7d1b4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8ef6286c1070ebf6edbef1368ff24cafdcb7d1b4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d91b7b61eff9a9fdf8506f7d1b41fde47071503c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d91b7b61eff9a9fdf8506f7d1b41fde47071503c", "html_url": "https://github.com/rust-lang/rust/commit/d91b7b61eff9a9fdf8506f7d1b41fde47071503c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d91b7b61eff9a9fdf8506f7d1b41fde47071503c/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a8ce543dc937043f2988a856c0c43339eadf8d69", "url": "https://api.github.com/repos/rust-lang/rust/commits/a8ce543dc937043f2988a856c0c43339eadf8d69", "html_url": "https://github.com/rust-lang/rust/commit/a8ce543dc937043f2988a856c0c43339eadf8d69"}], "stats": {"total": 146, "additions": 92, "deletions": 54}, "files": [{"sha": "a3d134aee73403b8f3307c33f19b5c74060c9365", "filename": "src/comp/back/link.rs", "status": "modified", "additions": 5, "deletions": 25, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/d91b7b61eff9a9fdf8506f7d1b41fde47071503c/src%2Fcomp%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d91b7b61eff9a9fdf8506f7d1b41fde47071503c/src%2Fcomp%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fback%2Flink.rs?ref=d91b7b61eff9a9fdf8506f7d1b41fde47071503c", "patch": "@@ -39,30 +39,9 @@ fn llvm_err(sess: session::session, msg: str) {\n     } else { sess.fatal(msg + \": \" + str::str_from_cstr(buf)); }\n }\n \n-fn make_target_lib_path(sysroot: fs::path, target_triple: str) -> fs::path {\n-    let path = [\n-        sysroot,\n-        \"lib/rustc\",\n-        target_triple,\n-        \"lib\"\n-    ];\n-    check vec::is_not_empty(path);\n-    let path = fs::connect_many(path);\n-    ret path;\n-}\n-\n-fn get_target_lib_path(sess: session::session) -> fs::path {\n-    make_target_lib_path(sess.get_opts().sysroot,\n-                         sess.get_opts().target_triple)\n-}\n-\n-fn get_target_lib_file_path(sess: session::session,\n-                            file: fs::path) -> fs::path {\n-    fs::connect(get_target_lib_path(sess), file)\n-}\n-\n fn link_intrinsics(sess: session::session, llmod: ModuleRef) {\n-    let path = get_target_lib_file_path(sess, \"intrinsics.bc\");\n+    let path = sess.filesearch()\n+        .get_target_lib_file_path(\"intrinsics.bc\");\n     let membuf = str::as_buf(path, {|buf|\n         llvm::LLVMRustCreateMemoryBufferWithContentsOfFile(buf)\n     });\n@@ -518,8 +497,9 @@ fn mangle_internal_name_by_seq(ccx: @crate_ctxt, flav: str) -> str {\n // gcc to link the object file with some libs\n fn link_binary(sess: session::session,\n                saved_out_filename: str) {\n-    let main: str = get_target_lib_file_path(sess, \"main.o\");\n-    let stage: str = \"-L\" + get_target_lib_path(sess);\n+    let main: str = sess.filesearch()\n+        .get_target_lib_file_path(\"main.o\");\n+    let stage: str = \"-L\" + sess.filesearch().get_target_lib_path();\n     let prog: str = \"gcc\";\n     // The invocations of gcc share some flags across platforms\n "}, {"sha": "70007240b630e8a7d81ef58fb01c8c3becfbef8f", "filename": "src/comp/driver/rustc.rs", "status": "modified", "additions": 15, "deletions": 24, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/d91b7b61eff9a9fdf8506f7d1b41fde47071503c/src%2Fcomp%2Fdriver%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d91b7b61eff9a9fdf8506f7d1b41fde47071503c/src%2Fcomp%2Fdriver%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fdriver%2Frustc.rs?ref=d91b7b61eff9a9fdf8506f7d1b41fde47071503c", "patch": "@@ -8,7 +8,7 @@ import front::attr;\n import middle::{trans, resolve, freevars, kind, ty, typeck};\n import middle::tstate::ck;\n import syntax::print::{pp, pprust};\n-import util::{ppaux, common};\n+import util::{ppaux, common, filesearch};\n import back::link;\n import lib::llvm;\n import std::{fs, option, str, vec, int, io, run, getopts};\n@@ -293,12 +293,6 @@ fn get_arch(triple: str) -> session::arch {\n         } else { log_err \"Unknown architecture! \" + triple; fail };\n }\n \n-fn get_default_sysroot(binary: str) -> str {\n-    let dirname = fs::dirname(binary);\n-    if str::eq(dirname, binary) { ret \"../\"; }\n-    ret fs::connect(dirname, \"../\");\n-}\n-\n fn build_target_config(sopts: @session::options) -> @session::config {\n     let target_cfg: @session::config =\n         @{os: get_os(sopts.target_triple),\n@@ -321,7 +315,7 @@ fn host_triple() -> str {\n     ret ht != \"\" ? ht : fail \"rustc built without CFG_HOST_TRIPLE\";\n }\n \n-fn build_session_options(binary: str, match: getopts::match)\n+fn build_session_options(match: getopts::match)\n    -> @session::options {\n     let library = opt_present(match, \"lib\");\n     let static = opt_present(match, \"static\");\n@@ -368,22 +362,13 @@ fn build_session_options(binary: str, match: getopts::match)\n               }\n             }\n         } else { 0u };\n-    let sysroot =\n-        alt sysroot_opt {\n-          none. { get_default_sysroot(binary) }\n-          some(s) { s }\n-        };\n     let target =\n         alt target_opt {\n             none. { host_triple() }\n             some(s) { s }\n         };\n \n-    let library_search_paths = [link::make_target_lib_path(sysroot, target)];\n-    let lsp_vec = getopts::opt_strs(match, \"L\");\n-    // FIXME: These should probably go in front of the defaults\n-    for lsp: str in lsp_vec { library_search_paths += [lsp]; }\n-\n+    let addl_lib_search_paths = getopts::opt_strs(match, \"L\");\n     let cfg = parse_cfgspecs(getopts::opt_strs(match, \"cfg\"));\n     let test = opt_present(match, \"test\");\n     let do_gc = opt_present(match, \"gc\");\n@@ -400,8 +385,8 @@ fn build_session_options(binary: str, match: getopts::match)\n           time_passes: time_passes,\n           time_llvm_passes: time_llvm_passes,\n           output_type: output_type,\n-          library_search_paths: library_search_paths,\n-          sysroot: sysroot,\n+          addl_lib_search_paths: addl_lib_search_paths,\n+          maybe_sysroot: sysroot_opt,\n           target_triple: target,\n           cfg: cfg,\n           test: test,\n@@ -412,12 +397,18 @@ fn build_session_options(binary: str, match: getopts::match)\n     ret sopts;\n }\n \n-fn build_session(sopts: @session::options) -> session::session {\n+fn build_session(binary: str,\n+                 sopts: @session::options) -> session::session {\n     let target_cfg = build_target_config(sopts);\n     let cstore = cstore::mk_cstore();\n+    let filesearch = filesearch::mk_filesearch(\n+        binary,\n+        sopts.maybe_sysroot,\n+        sopts.target_triple,\n+        sopts.addl_lib_search_paths);\n     ret session::session(target_cfg, sopts, cstore,\n                          @{cm: codemap::new_codemap(), mutable next_id: 0},\n-                         none, 0u);\n+                         none, 0u, filesearch);\n }\n \n fn parse_pretty(sess: session::session, name: str) -> pp_mode {\n@@ -464,8 +455,8 @@ fn main(args: [str]) {\n         version(binary);\n         ret;\n     }\n-    let sopts = build_session_options(binary, match);\n-    let sess = build_session(sopts);\n+    let sopts = build_session_options(match);\n+    let sess = build_session(binary, sopts);\n     let n_inputs = vec::len::<str>(match.free);\n     let output_file = getopts::opt_maybe_str(match, \"o\");\n     if n_inputs == 0u {"}, {"sha": "1f3f9baab8a90a564fe1214dcee293a1e5955315", "filename": "src/comp/driver/session.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d91b7b61eff9a9fdf8506f7d1b41fde47071503c/src%2Fcomp%2Fdriver%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d91b7b61eff9a9fdf8506f7d1b41fde47071503c/src%2Fcomp%2Fdriver%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fdriver%2Fsession.rs?ref=d91b7b61eff9a9fdf8506f7d1b41fde47071503c", "patch": "@@ -6,6 +6,7 @@ import syntax::ast::ty_mach;\n import std::{uint, map, option, str};\n import std::option::{some, none};\n import syntax::parse::parser::parse_sess;\n+import util::filesearch;\n \n tag os { os_win32; os_macos; os_linux; }\n \n@@ -32,8 +33,8 @@ type options =\n      time_passes: bool,\n      time_llvm_passes: bool,\n      output_type: back::link::output_type,\n-     library_search_paths: [str],\n-     sysroot: str,\n+     addl_lib_search_paths: [str],\n+     maybe_sysroot: option::t<str>,\n      target_triple: str,\n      cfg: ast::crate_cfg,\n      test: bool,\n@@ -51,7 +52,8 @@ obj session(targ_cfg: @config,\n \n             // For a library crate, this is always none\n             mutable main_fn: option::t<node_id>,\n-            mutable err_count: uint) {\n+            mutable err_count: uint,\n+            filesearch: filesearch::filesearch) {\n     fn get_targ_cfg() -> @config { ret targ_cfg; }\n     fn get_opts() -> @options { ret opts; }\n     fn get_cstore() -> metadata::cstore::cstore { cstore }\n@@ -108,6 +110,7 @@ obj session(targ_cfg: @config,\n     }\n     fn set_main_id(d: node_id) { main_fn = some(d); }\n     fn get_main_id() -> option::t<node_id> { main_fn }\n+    fn filesearch() -> filesearch::filesearch { filesearch }\n }\n // Local Variables:\n // fill-column: 78;"}, {"sha": "9589a504c4761084ba8619f575d5b6dc4a5302f0", "filename": "src/comp/metadata/creader.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d91b7b61eff9a9fdf8506f7d1b41fde47071503c/src%2Fcomp%2Fmetadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d91b7b61eff9a9fdf8506f7d1b41fde47071503c/src%2Fcomp%2Fmetadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmetadata%2Fcreader.rs?ref=d91b7b61eff9a9fdf8506f7d1b41fde47071503c", "patch": "@@ -24,7 +24,7 @@ fn read_crates(sess: session::session, crate: ast::crate) {\n     let e =\n         @{sess: sess,\n           crate_cache: @std::map::new_str_hash::<int>(),\n-          library_search_paths: sess.get_opts().library_search_paths,\n+          library_search_paths: sess.filesearch().lib_search_paths(),\n           mutable next_crate_num: 1};\n     let v =\n         visit::mk_simple_visitor(@{visit_view_item:\n@@ -37,7 +37,7 @@ fn read_crates(sess: session::session, crate: ast::crate) {\n type env =\n     @{sess: session::session,\n       crate_cache: @hashmap<str, int>,\n-      library_search_paths: [str],\n+      library_search_paths: [fs::path],\n       mutable next_crate_num: ast::crate_num};\n \n fn visit_view_item(e: env, i: @ast::view_item) {"}, {"sha": "c685139d54b1ce7782af83ba3851b23f1f9f77fb", "filename": "src/comp/rustc.rc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d91b7b61eff9a9fdf8506f7d1b41fde47071503c/src%2Fcomp%2Frustc.rc", "raw_url": "https://github.com/rust-lang/rust/raw/d91b7b61eff9a9fdf8506f7d1b41fde47071503c/src%2Fcomp%2Frustc.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Frustc.rc?ref=d91b7b61eff9a9fdf8506f7d1b41fde47071503c", "patch": "@@ -117,6 +117,7 @@ mod driver {\n mod util {\n     mod common;\n     mod ppaux;\n+    mod filesearch;\n }\n \n auth middle::metadata = unsafe;"}, {"sha": "0ae7d82f9c1ef553bbe88812d362b8419c285181", "filename": "src/comp/util/filesearch.rs", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/d91b7b61eff9a9fdf8506f7d1b41fde47071503c/src%2Fcomp%2Futil%2Ffilesearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d91b7b61eff9a9fdf8506f7d1b41fde47071503c/src%2Fcomp%2Futil%2Ffilesearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Futil%2Ffilesearch.rs?ref=d91b7b61eff9a9fdf8506f7d1b41fde47071503c", "patch": "@@ -0,0 +1,63 @@\n+import std::option;\n+import std::fs;\n+import std::vec;\n+import std::str;\n+import back::link;\n+\n+export filesearch;\n+export mk_filesearch;\n+\n+type filesearch = obj {\n+    fn sysroot() -> fs::path;\n+    fn lib_search_paths() -> [fs::path];\n+    fn get_target_lib_path() -> fs::path;\n+    fn get_target_lib_file_path(file: fs::path) -> fs::path;\n+};\n+\n+fn mk_filesearch(binary_name: fs::path,\n+                 maybe_sysroot: option::t<fs::path>,\n+                 target_triple: str,\n+                 addl_lib_search_paths: [fs::path]) -> filesearch {\n+    obj filesearch_impl(sysroot: fs::path,\n+                        addl_lib_search_paths: [fs::path],\n+                        target_triple: str) {\n+        fn sysroot() -> fs::path { sysroot }\n+        fn lib_search_paths() -> [fs::path] {\n+            addl_lib_search_paths\n+                + [make_target_lib_path(sysroot, target_triple)]\n+        }\n+\n+        fn get_target_lib_path() -> fs::path {\n+            make_target_lib_path(sysroot, target_triple)\n+        }\n+\n+        fn get_target_lib_file_path(file: fs::path) -> fs::path {\n+            fs::connect(self.get_target_lib_path(), file)\n+        }\n+    }\n+\n+    let sysroot = get_sysroot(maybe_sysroot, binary_name);\n+    ret filesearch_impl(sysroot, addl_lib_search_paths, target_triple);\n+}\n+\n+fn make_target_lib_path(sysroot: fs::path,\n+                        target_triple: str) -> fs::path {\n+    let path = [sysroot, \"lib/rustc\", target_triple, \"lib\"];\n+    check vec::is_not_empty(path);\n+    let path = fs::connect_many(path);\n+    ret path;\n+}\n+\n+fn get_default_sysroot(binary: fs::path) -> fs::path {\n+    let dirname = fs::dirname(binary);\n+    if str::eq(dirname, binary) { ret \"../\"; }\n+    ret fs::connect(dirname, \"../\");\n+}\n+\n+fn get_sysroot(maybe_sysroot: option::t<fs::path>,\n+               binary: fs::path) -> fs::path {\n+    alt maybe_sysroot {\n+      option::some(sr) { sr }\n+      option::none. { get_default_sysroot(binary) }\n+    }\n+}\n\\ No newline at end of file"}]}