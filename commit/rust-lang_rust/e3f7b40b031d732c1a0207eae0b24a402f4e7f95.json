{"sha": "e3f7b40b031d732c1a0207eae0b24a402f4e7f95", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUzZjdiNDBiMDMxZDczMmMxYTAyMDdlYWUwYjI0YTQwMmY0ZTdmOTU=", "commit": {"author": {"name": "Philipp Krones", "email": "uwdkn@student.kit.edu", "date": "2018-09-25T10:54:48Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-09-25T10:54:48Z"}, "message": "Merge pull request #3203 from yaahallo/master\n\nLint for chaining flatten after map", "tree": {"sha": "a6301c9d9df150a311a0eee4df0cdfba60aa3423", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a6301c9d9df150a311a0eee4df0cdfba60aa3423"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e3f7b40b031d732c1a0207eae0b24a402f4e7f95", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJbqhP4CRBK7hj4Ov3rIwAAdHIIACTEQLdM3Dxh+zndXcHnuNBf\noXGA0IwBDzUH+kXqWXAAOQqhDsm/uRdYD6tbahycz7j6VE347Ijc/8khcuGMFSW3\nXFGKHxQt07rhwRLdzVkBHOuK1w6WcMvDI9pe1OoycOf1vg871B3Y7l3j+sXn1oHI\n1CwLh5exWTqe9sJ/zdMCqz0IMeThN47Q94KJL8fbUORGUS7GwtEXYxPsANfke6g2\n2xrESRIlekrkBK019umJ5QtPi0bW/0Yg9gFrsEjMJteYtqQ49zItMruaxNUfPouD\n47bf4ysKpYeS7xu+0TA9gWjFFqQBFI4KEyMTD3AIMlQWu/HhnBQQU1aOLz5ODwI=\n=SyxF\n-----END PGP SIGNATURE-----\n", "payload": "tree a6301c9d9df150a311a0eee4df0cdfba60aa3423\nparent 1be78b90ac60e0416c0289d39093d5f811e8057b\nparent 14feb3670f4e1e5ff759253b9dc86cfbb29ff8a5\nauthor Philipp Krones <uwdkn@student.kit.edu> 1537872888 +0200\ncommitter GitHub <noreply@github.com> 1537872888 +0200\n\nMerge pull request #3203 from yaahallo/master\n\nLint for chaining flatten after map"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e3f7b40b031d732c1a0207eae0b24a402f4e7f95", "html_url": "https://github.com/rust-lang/rust/commit/e3f7b40b031d732c1a0207eae0b24a402f4e7f95", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e3f7b40b031d732c1a0207eae0b24a402f4e7f95/comments", "author": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1be78b90ac60e0416c0289d39093d5f811e8057b", "url": "https://api.github.com/repos/rust-lang/rust/commits/1be78b90ac60e0416c0289d39093d5f811e8057b", "html_url": "https://github.com/rust-lang/rust/commit/1be78b90ac60e0416c0289d39093d5f811e8057b"}, {"sha": "14feb3670f4e1e5ff759253b9dc86cfbb29ff8a5", "url": "https://api.github.com/repos/rust-lang/rust/commits/14feb3670f4e1e5ff759253b9dc86cfbb29ff8a5", "html_url": "https://github.com/rust-lang/rust/commit/14feb3670f4e1e5ff759253b9dc86cfbb29ff8a5"}], "stats": {"total": 94, "additions": 80, "deletions": 14}, "files": [{"sha": "2bc4a8a8f912f5b8f7b9677b100b4a40545f0b97", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e3f7b40b031d732c1a0207eae0b24a402f4e7f95/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/e3f7b40b031d732c1a0207eae0b24a402f4e7f95/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=e3f7b40b031d732c1a0207eae0b24a402f4e7f95", "patch": "@@ -736,6 +736,7 @@ All notable changes to this project will be documented in this file.\n [`many_single_char_names`]: https://rust-lang-nursery.github.io/rust-clippy/master/index.html#many_single_char_names\n [`map_clone`]: https://rust-lang-nursery.github.io/rust-clippy/master/index.html#map_clone\n [`map_entry`]: https://rust-lang-nursery.github.io/rust-clippy/master/index.html#map_entry\n+[`map_flatten`]: https://rust-lang-nursery.github.io/rust-clippy/master/index.html#map_flatten\n [`match_as_ref`]: https://rust-lang-nursery.github.io/rust-clippy/master/index.html#match_as_ref\n [`match_bool`]: https://rust-lang-nursery.github.io/rust-clippy/master/index.html#match_bool\n [`match_overlapping_arm`]: https://rust-lang-nursery.github.io/rust-clippy/master/index.html#match_overlapping_arm"}, {"sha": "eb1de06cce0ccb030fa663189d21fe158a1f7e4a", "filename": "README.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3f7b40b031d732c1a0207eae0b24a402f4e7f95/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/e3f7b40b031d732c1a0207eae0b24a402f4e7f95/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=e3f7b40b031d732c1a0207eae0b24a402f4e7f95", "patch": "@@ -9,7 +9,7 @@ We are currently in the process of discussing Clippy 1.0 via the RFC process in\n \n A collection of lints to catch common mistakes and improve your [Rust](https://github.com/rust-lang/rust) code.\n \n-[There are 277 lints included in this crate!](https://rust-lang-nursery.github.io/rust-clippy/master/index.html)\n+[There are 278 lints included in this crate!](https://rust-lang-nursery.github.io/rust-clippy/master/index.html)\n \n We have a bunch of lint categories to allow you to choose how much Clippy is supposed to ~~annoy~~ help you:\n "}, {"sha": "3e25c79a7fdfc1586038834cefc0b18b10e7723f", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e3f7b40b031d732c1a0207eae0b24a402f4e7f95/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3f7b40b031d732c1a0207eae0b24a402f4e7f95/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=e3f7b40b031d732c1a0207eae0b24a402f4e7f95", "patch": "@@ -473,6 +473,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry<'_>, conf: &Conf) {\n         loops::EXPLICIT_ITER_LOOP,\n         matches::SINGLE_MATCH_ELSE,\n         methods::FILTER_MAP,\n+        methods::MAP_FLATTEN,\n         methods::OPTION_MAP_UNWRAP_OR,\n         methods::OPTION_MAP_UNWRAP_OR_ELSE,\n         methods::RESULT_MAP_UNWRAP_OR_ELSE,"}, {"sha": "5a9818a6b6312943b1dd862e7fa8aee623a5e36a", "filename": "clippy_lints/src/methods.rs", "status": "modified", "additions": 60, "deletions": 13, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/e3f7b40b031d732c1a0207eae0b24a402f4e7f95/clippy_lints%2Fsrc%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3f7b40b031d732c1a0207eae0b24a402f4e7f95/clippy_lints%2Fsrc%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods.rs?ref=e3f7b40b031d732c1a0207eae0b24a402f4e7f95", "patch": "@@ -1,22 +1,24 @@\n-use matches::matches;\n use crate::rustc::hir;\n-use crate::rustc::lint::{LateContext, LateLintPass, LintArray, LintPass, in_external_macro, Lint, LintContext};\n+use crate::rustc::hir::def::Def;\n+use crate::rustc::lint::{in_external_macro, LateContext, LateLintPass, Lint, LintArray, LintContext, LintPass};\n+use crate::rustc::ty::{self, Ty};\n use crate::rustc::{declare_tool_lint, lint_array};\n+use crate::rustc_errors::Applicability;\n+use crate::syntax::ast;\n+use crate::syntax::source_map::{BytePos, Span};\n+use crate::utils::paths;\n+use crate::utils::sugg;\n+use crate::utils::{\n+    get_arg_name, get_trait_def_id, implements_trait, in_macro, is_copy, is_expn_of, is_self, is_self_ty,\n+    iter_input_pats, last_path_segment, match_def_path, match_path, match_qpath, match_trait_method, match_type,\n+    match_var, method_chain_args, remove_blocks, return_ty, same_tys, single_segment_path, snippet, span_lint,\n+    span_lint_and_sugg, span_lint_and_then, span_note_and_lint, walk_ptrs_ty, walk_ptrs_ty_depth, SpanlessEq,\n+};\n use if_chain::if_chain;\n-use crate::rustc::ty::{self, Ty};\n-use crate::rustc::hir::def::Def;\n+use matches::matches;\n use std::borrow::Cow;\n use std::fmt;\n use std::iter;\n-use crate::syntax::ast;\n-use crate::syntax::source_map::{Span, BytePos};\n-use crate::utils::{get_arg_name, get_trait_def_id, implements_trait, in_macro, is_copy, is_expn_of, is_self,\n-            is_self_ty, iter_input_pats, last_path_segment, match_def_path, match_path, match_qpath, match_trait_method,\n-            match_type, method_chain_args, match_var, return_ty, remove_blocks, same_tys, single_segment_path, snippet,\n-            span_lint, span_lint_and_sugg, span_lint_and_then, span_note_and_lint, walk_ptrs_ty, walk_ptrs_ty_depth, SpanlessEq};\n-use crate::utils::paths;\n-use crate::utils::sugg;\n-use crate::rustc_errors::Applicability;\n \n #[derive(Clone)]\n pub struct Pass;\n@@ -247,6 +249,24 @@ declare_clippy_lint! {\n     \"using `filter(p).next()`, which is more succinctly expressed as `.find(p)`\"\n }\n \n+/// **What it does:** Checks for usage of `_.map(_).flatten(_)`,\n+///\n+/// **Why is this bad?** Readability, this can be written more concisely as a\n+/// single method call.\n+///\n+/// **Known problems:**\n+///\n+/// **Example:**\n+/// ```rust\n+/// iter.map(|x| x.iter()).flatten()\n+/// ```\n+declare_clippy_lint! {\n+    pub MAP_FLATTEN,\n+    pedantic,\n+    \"using combinations of `flatten` and `map` which can usually be written as a \\\n+     single method call\"\n+}\n+\n /// **What it does:** Checks for usage of `_.filter(_).map(_)`,\n /// `_.filter(_).flat_map(_)`, `_.filter_map(_).flat_map(_)` and similar.\n ///\n@@ -698,6 +718,7 @@ impl LintPass for Pass {\n             TEMPORARY_CSTRING_AS_PTR,\n             FILTER_NEXT,\n             FILTER_MAP,\n+            MAP_FLATTEN,\n             ITER_NTH,\n             ITER_SKIP_NEXT,\n             GET_UNWRAP,\n@@ -744,6 +765,8 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n                     lint_filter_flat_map(cx, expr, arglists[0], arglists[1]);\n                 } else if let Some(arglists) = method_chain_args(expr, &[\"filter_map\", \"flat_map\"]) {\n                     lint_filter_map_flat_map(cx, expr, arglists[0], arglists[1]);\n+                } else if let Some(arglists) = method_chain_args(expr, &[\"map\", \"flatten\"]) {\n+                    lint_map_flatten(cx, expr, arglists[0]);\n                 } else if let Some(arglists) = method_chain_args(expr, &[\"find\", \"is_some\"]) {\n                     lint_search_is_some(cx, expr, \"find\", arglists[0], arglists[1]);\n                 } else if let Some(arglists) = method_chain_args(expr, &[\"position\", \"is_some\"]) {\n@@ -1577,6 +1600,30 @@ fn lint_map_unwrap_or(cx: &LateContext<'_, '_>, expr: &hir::Expr, map_args: &[hi\n     }\n }\n \n+/// lint use of `map().flatten()` for `Iterators`\n+fn lint_map_flatten<'a, 'tcx>(\n+    cx: &LateContext<'a, 'tcx>,\n+    expr: &'tcx hir::Expr,\n+    map_args: &'tcx [hir::Expr],\n+) {\n+    // lint if caller of `.map().flatten()` is an Iterator\n+    if match_trait_method(cx, expr, &paths::ITERATOR) {\n+        let msg = \"called `map(..).flatten()` on an `Iterator`. \\\n+                   This is more succinctly expressed by calling `.flat_map(..)`\";\n+        let self_snippet = snippet(cx, map_args[0].span, \"..\");\n+        let func_snippet = snippet(cx, map_args[1].span, \"..\");\n+        let hint = format!(\"{0}.flat_map({1})\", self_snippet, func_snippet);\n+        span_lint_and_then(cx, MAP_FLATTEN, expr.span, msg, |db| {\n+            db.span_suggestion_with_applicability(\n+                expr.span,\n+                \"try using flat_map instead\",\n+                hint,\n+                Applicability::MachineApplicable,\n+            );\n+        });\n+    }\n+}\n+\n /// lint use of `map().unwrap_or_else()` for `Option`s and `Result`s\n fn lint_map_unwrap_or_else<'a, 'tcx>(\n     cx: &LateContext<'a, 'tcx>,"}, {"sha": "c5cf24d9bb01b315f7cb94a8ca07e179c6623129", "filename": "tests/ui/map_flatten.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e3f7b40b031d732c1a0207eae0b24a402f4e7f95/tests%2Fui%2Fmap_flatten.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3f7b40b031d732c1a0207eae0b24a402f4e7f95/tests%2Fui%2Fmap_flatten.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmap_flatten.rs?ref=e3f7b40b031d732c1a0207eae0b24a402f4e7f95", "patch": "@@ -0,0 +1,7 @@\n+#![feature(tool_lints)]\n+#![warn(clippy::all, clippy::pedantic)]\n+#![allow(clippy::missing_docs_in_private_items)]\n+\n+fn main() {\n+    let _: Vec<_> = vec![5_i8; 6].into_iter().map(|x| 0..x).flatten().collect();\n+}"}, {"sha": "d4ce44490d1cef082b2a5702e956888cf1225b26", "filename": "tests/ui/map_flatten.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e3f7b40b031d732c1a0207eae0b24a402f4e7f95/tests%2Fui%2Fmap_flatten.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e3f7b40b031d732c1a0207eae0b24a402f4e7f95/tests%2Fui%2Fmap_flatten.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmap_flatten.stderr?ref=e3f7b40b031d732c1a0207eae0b24a402f4e7f95", "patch": "@@ -0,0 +1,10 @@\n+error: called `map(..).flatten()` on an `Iterator`. This is more succinctly expressed by calling `.flat_map(..)`\n+ --> $DIR/map_flatten.rs:6:21\n+  |\n+6 |     let _: Vec<_> = vec![5_i8; 6].into_iter().map(|x| 0..x).flatten().collect();\n+  |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try using flat_map instead: `vec![5_i8; 6].into_iter().flat_map(|x| 0..x)`\n+  |\n+  = note: `-D clippy::map-flatten` implied by `-D warnings`\n+\n+error: aborting due to previous error\n+"}]}