{"sha": "d805b832f5a49acc66e0d2acda9f9f4cf074a374", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ4MDViODMyZjVhNDlhY2M2NmUwZDJhY2RhOWY5ZjRjZjA3NGEzNzQ=", "commit": {"author": {"name": "blake2-ppc", "email": "blake2-ppc", "date": "2013-07-05T18:32:25Z"}, "committer": {"name": "blake2-ppc", "email": "blake2-ppc", "date": "2013-07-05T18:32:25Z"}, "message": "vec: Add .pop_opt() -> Option<T>\n\nAdd a function to safely retrieve the last element of a ~[T], as\nOption<T>. Implement pop() using pop_opt(); it benches the same as the\nold implementation when tested with optimization level 2.", "tree": {"sha": "f4c3826d7daabed5c8ad8ed9fc4b4e9a0278fc7d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f4c3826d7daabed5c8ad8ed9fc4b4e9a0278fc7d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d805b832f5a49acc66e0d2acda9f9f4cf074a374", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d805b832f5a49acc66e0d2acda9f9f4cf074a374", "html_url": "https://github.com/rust-lang/rust/commit/d805b832f5a49acc66e0d2acda9f9f4cf074a374", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d805b832f5a49acc66e0d2acda9f9f4cf074a374/comments", "author": null, "committer": null, "parents": [{"sha": "58eb70a5e2ce6602e5685f5cc18ab2fe0c327020", "url": "https://api.github.com/repos/rust-lang/rust/commits/58eb70a5e2ce6602e5685f5cc18ab2fe0c327020", "html_url": "https://github.com/rust-lang/rust/commit/58eb70a5e2ce6602e5685f5cc18ab2fe0c327020"}], "stats": {"total": 62, "additions": 38, "deletions": 24}, "files": [{"sha": "7ae4e8a1d2fb3b847886bb40f7e39f8cc3428226", "filename": "src/libstd/vec.rs", "status": "modified", "additions": 38, "deletions": 24, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/d805b832f5a49acc66e0d2acda9f9f4cf074a374/src%2Flibstd%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d805b832f5a49acc66e0d2acda9f9f4cf074a374/src%2Flibstd%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fvec.rs?ref=d805b832f5a49acc66e0d2acda9f9f4cf074a374", "patch": "@@ -1091,6 +1091,7 @@ pub trait OwnedVector<T> {\n \n     fn push_all_move(&mut self, rhs: ~[T]);\n     fn pop(&mut self) -> T;\n+    fn pop_opt(&mut self) -> Option<T>;\n     fn shift(&mut self) -> T;\n     fn unshift(&mut self, x: T);\n     fn insert(&mut self, i: uint, x:T);\n@@ -1281,20 +1282,28 @@ impl<T> OwnedVector<T> for ~[T] {\n         }\n     }\n \n-    /// Remove the last element from a vector and return it\n-    fn pop(&mut self) -> T {\n-        let ln = self.len();\n-        if ln == 0 {\n-            fail!(\"sorry, cannot pop an empty vector\")\n-        }\n-        let valptr = ptr::to_mut_unsafe_ptr(&mut self[ln - 1u]);\n-        unsafe {\n-            let val = ptr::replace_ptr(valptr, intrinsics::init());\n-            raw::set_len(self, ln - 1u);\n-            val\n+    /// Remove the last element from a vector and return it, or `None` if it is empty\n+    fn pop_opt(&mut self) -> Option<T> {\n+        match self.len() {\n+            0  => None,\n+            ln => {\n+                let valptr = ptr::to_mut_unsafe_ptr(&mut self[ln - 1u]);\n+                unsafe {\n+                    let val = ptr::replace_ptr(valptr, intrinsics::init());\n+                    raw::set_len(self, ln - 1u);\n+                    Some(val)\n+                }\n+            }\n         }\n     }\n \n+\n+    /// Remove the last element from a vector and return it, failing if it is empty\n+    #[inline]\n+    fn pop(&mut self) -> T {\n+        self.pop_opt().expect(\"pop: empty vector\")\n+    }\n+\n     /// Removes the first element from a vector and return it\n     fn shift(&mut self) -> T {\n         unsafe {\n@@ -2089,18 +2098,13 @@ impl<T> Iterator<T> for VecConsumeIterator<T> {\n         //\n         // [1,2,3,4,5] => 1, [5,2,3,4] => 2, [5,4,3] => 3, [5,4] => 4,\n         // [5] -> 5, []\n-\n-        if self.v.is_empty() {\n-            None\n-        } else {\n-            let l = self.v.len();\n-            if self.idx < l {\n-                self.v.swap(self.idx, l - 1);\n-                self.idx += 1;\n-            }\n-\n-            Some(self.v.pop())\n+        let l = self.v.len();\n+        if self.idx < l {\n+            self.v.swap(self.idx, l - 1);\n+            self.idx += 1;\n         }\n+\n+        self.v.pop_opt()\n     }\n }\n \n@@ -2111,8 +2115,7 @@ pub struct VecConsumeRevIterator<T> {\n \n impl<T> Iterator<T> for VecConsumeRevIterator<T> {\n     fn next(&mut self) -> Option<T> {\n-        if self.v.is_empty() { None }\n-        else { Some(self.v.pop()) }\n+        self.v.pop_opt()\n     }\n }\n \n@@ -2415,6 +2418,17 @@ mod tests {\n     }\n \n     #[test]\n+    fn test_pop_opt() {\n+        let mut v = ~[5];\n+        let e = v.pop_opt();\n+        assert_eq!(v.len(), 0);\n+        assert_eq!(e, Some(5));\n+        let f = v.pop_opt();\n+        assert_eq!(f, None);\n+        let g = v.pop_opt();\n+        assert_eq!(g, None);\n+    }\n+\n     fn test_swap_remove() {\n         let mut v = ~[1, 2, 3, 4, 5];\n         let mut e = v.swap_remove(0);"}]}