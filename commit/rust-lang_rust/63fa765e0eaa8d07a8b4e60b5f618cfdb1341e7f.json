{"sha": "63fa765e0eaa8d07a8b4e60b5f618cfdb1341e7f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYzZmE3NjVlMGVhYThkMDdhOGI0ZTYwYjVmNjE4Y2ZkYjEzNDFlN2Y=", "commit": {"author": {"name": "Michael Sullivan", "email": "sully@msully.net", "date": "2011-07-27T22:43:56Z"}, "committer": {"name": "Michael Sullivan", "email": "sully@msully.net", "date": "2011-07-28T01:46:46Z"}, "message": "Fix binding a bare fn argument with type parameters.\n\nCloses #642.", "tree": {"sha": "2627497c1f95601020ba4ec2c64353da335e45be", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2627497c1f95601020ba4ec2c64353da335e45be"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/63fa765e0eaa8d07a8b4e60b5f618cfdb1341e7f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/63fa765e0eaa8d07a8b4e60b5f618cfdb1341e7f", "html_url": "https://github.com/rust-lang/rust/commit/63fa765e0eaa8d07a8b4e60b5f618cfdb1341e7f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/63fa765e0eaa8d07a8b4e60b5f618cfdb1341e7f/comments", "author": {"login": "msullivan", "id": 340349, "node_id": "MDQ6VXNlcjM0MDM0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/340349?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msullivan", "html_url": "https://github.com/msullivan", "followers_url": "https://api.github.com/users/msullivan/followers", "following_url": "https://api.github.com/users/msullivan/following{/other_user}", "gists_url": "https://api.github.com/users/msullivan/gists{/gist_id}", "starred_url": "https://api.github.com/users/msullivan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msullivan/subscriptions", "organizations_url": "https://api.github.com/users/msullivan/orgs", "repos_url": "https://api.github.com/users/msullivan/repos", "events_url": "https://api.github.com/users/msullivan/events{/privacy}", "received_events_url": "https://api.github.com/users/msullivan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "msullivan", "id": 340349, "node_id": "MDQ6VXNlcjM0MDM0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/340349?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msullivan", "html_url": "https://github.com/msullivan", "followers_url": "https://api.github.com/users/msullivan/followers", "following_url": "https://api.github.com/users/msullivan/following{/other_user}", "gists_url": "https://api.github.com/users/msullivan/gists{/gist_id}", "starred_url": "https://api.github.com/users/msullivan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msullivan/subscriptions", "organizations_url": "https://api.github.com/users/msullivan/orgs", "repos_url": "https://api.github.com/users/msullivan/repos", "events_url": "https://api.github.com/users/msullivan/events{/privacy}", "received_events_url": "https://api.github.com/users/msullivan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "63f74f3771c20fceea294d2dc759ccde8a59a6cd", "url": "https://api.github.com/repos/rust-lang/rust/commits/63f74f3771c20fceea294d2dc759ccde8a59a6cd", "html_url": "https://github.com/rust-lang/rust/commit/63f74f3771c20fceea294d2dc759ccde8a59a6cd"}], "stats": {"total": 21, "additions": 10, "deletions": 11}, "files": [{"sha": "e64b0d94b7c8eba98e35157ead281f515cb24796", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 10, "deletions": 11, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/63fa765e0eaa8d07a8b4e60b5f618cfdb1341e7f/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63fa765e0eaa8d07a8b4e60b5f618cfdb1341e7f/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=63fa765e0eaa8d07a8b4e60b5f618cfdb1341e7f", "patch": "@@ -4458,16 +4458,15 @@ fn trans_bind_thunk(cx: &@local_ctxt, sp: &span, incoming_fty: &ty::t,\n     }\n \n     let a: uint = 3u; // retptr, task ptr, env come first\n-\n     let b: int = 1;\n     let outgoing_arg_index: uint = 0u;\n     let llout_arg_tys: TypeRef[] =\n         type_of_explicit_args(cx.ccx, sp, outgoing_args);\n     for arg: option::t[@ast::expr]  in args {\n         let out_arg = outgoing_args.(outgoing_arg_index);\n         let llout_arg_ty = llout_arg_tys.(outgoing_arg_index);\n+        let is_val = out_arg.mode == ty::mo_val;\n         alt arg {\n-\n           // Arg provided at binding time; thunk copies it from\n           // closure.\n           some(e) {\n@@ -4478,7 +4477,14 @@ fn trans_bind_thunk(cx: &@local_ctxt, sp: &span, incoming_fty: &ty::t,\n                                abi::closure_elt_bindings, b]);\n             bcx = bound_arg.bcx;\n             let val = bound_arg.val;\n-            if out_arg.mode == ty::mo_val {\n+            // If the type is parameterized, then we need to cast the\n+            // type we actually have to the parameterized out type.\n+            if ty::type_contains_params(cx.ccx.tcx, out_arg.ty) {\n+                let ty = if is_val\n+                         { T_ptr(llout_arg_ty) } else { llout_arg_ty };\n+                val = bcx.build.PointerCast(val, ty);\n+            }\n+            if is_val {\n                 if type_is_immediate(cx.ccx, e_ty) {\n                     val = bcx.build.Load(val);\n                     bcx = copy_ty(bcx, val, e_ty).bcx;\n@@ -4487,13 +4493,6 @@ fn trans_bind_thunk(cx: &@local_ctxt, sp: &span, incoming_fty: &ty::t,\n                     val = bcx.build.Load(val);\n                 }\n             }\n-            // If the type is parameterized, then we need to cast the\n-            // type we actually have to the parameterized out type.\n-            if ty::type_contains_params(cx.ccx.tcx, out_arg.ty) {\n-                // FIXME: (#642) This works for boxes and alias params\n-                // but does not work for bare functions.\n-                val = bcx.build.PointerCast(val, llout_arg_ty);\n-            }\n             llargs += ~[val];\n             b += 1;\n           }\n@@ -4502,7 +4501,7 @@ fn trans_bind_thunk(cx: &@local_ctxt, sp: &span, incoming_fty: &ty::t,\n           none. {\n             let passed_arg: ValueRef = llvm::LLVMGetParam(llthunk, a);\n             if ty::type_contains_params(cx.ccx.tcx, out_arg.ty) {\n-                assert (out_arg.mode != ty::mo_val);\n+                assert (!is_val);\n                 passed_arg = bcx.build.PointerCast(passed_arg, llout_arg_ty);\n             }\n             llargs += ~[passed_arg];"}]}