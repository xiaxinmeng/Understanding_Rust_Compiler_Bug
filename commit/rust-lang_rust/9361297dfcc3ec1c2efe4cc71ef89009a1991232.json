{"sha": "9361297dfcc3ec1c2efe4cc71ef89009a1991232", "node_id": "C_kwDOAAsO6NoAKDkzNjEyOTdkZmNjM2VjMWMyZWZlNGNjNzFlZjg5MDA5YTE5OTEyMzI", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-09-07T19:48:14Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-09-07T19:48:14Z"}, "message": "Rollup merge of #101493 - spastorino:borrow-mut-impl-trait-context, r=oli-obk\n\nPass ImplTraitContext as &mut to avoid the need of ImplTraitContext::reborrow\n\n`@oli-obk` requested this and other changes as a way of simplifying #101345. This is just going to make the diff of #101345 smaller.\n\nr? `@oli-obk` `@cjgillot`", "tree": {"sha": "f5f336333d14b06be195c48fa4fade50869b67f7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f5f336333d14b06be195c48fa4fade50869b67f7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9361297dfcc3ec1c2efe4cc71ef89009a1991232", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjGPV+CRBK7hj4Ov3rIwAApS8IAHczqAMcRB18tedzeb1xupOB\nGfwVFMvFlXDTzrntBU7hM2JwezB5NQF5Y97iyVc9ICm8AqRY5KGpMzirx2X/R8l/\nmkFKuQ9Xx05lnYYyq4kHdP//KwafPO9CDsG6vom8Qr7EiRtN+NOwNRLLnegrs3Is\nIkRtESkPQjIcJpyeFvHpBjNDiE7R5UAQ0ceNOQVilk010MNZg8nXpOmFQ8tI68mR\nApO39ZZ3iYqj811lNpCT3AJ21y/M+RSXXJ1kVJaZISV/XL0yfgM8ehoYQva+/1Vw\nFe2jA1+3mL45Na5gt3aELnszH24cfmoS/kizGg8yWtg4R1EreMYDW6fHUn9f4bE=\n=40jt\n-----END PGP SIGNATURE-----\n", "payload": "tree f5f336333d14b06be195c48fa4fade50869b67f7\nparent 1d65e9619d742deab8618d662c48b7e11588bbe2\nparent 2166a362452467516a1308048d7b40dc8428e5c2\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1662580094 +0200\ncommitter GitHub <noreply@github.com> 1662580094 +0200\n\nRollup merge of #101493 - spastorino:borrow-mut-impl-trait-context, r=oli-obk\n\nPass ImplTraitContext as &mut to avoid the need of ImplTraitContext::reborrow\n\n`@oli-obk` requested this and other changes as a way of simplifying #101345. This is just going to make the diff of #101345 smaller.\n\nr? `@oli-obk` `@cjgillot`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9361297dfcc3ec1c2efe4cc71ef89009a1991232", "html_url": "https://github.com/rust-lang/rust/commit/9361297dfcc3ec1c2efe4cc71ef89009a1991232", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9361297dfcc3ec1c2efe4cc71ef89009a1991232/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1d65e9619d742deab8618d662c48b7e11588bbe2", "url": "https://api.github.com/repos/rust-lang/rust/commits/1d65e9619d742deab8618d662c48b7e11588bbe2", "html_url": "https://github.com/rust-lang/rust/commit/1d65e9619d742deab8618d662c48b7e11588bbe2"}, {"sha": "2166a362452467516a1308048d7b40dc8428e5c2", "url": "https://api.github.com/repos/rust-lang/rust/commits/2166a362452467516a1308048d7b40dc8428e5c2", "html_url": "https://github.com/rust-lang/rust/commit/2166a362452467516a1308048d7b40dc8428e5c2"}], "stats": {"total": 227, "additions": 125, "deletions": 102}, "files": [{"sha": "90bb01aa2165dee8b9deaf969f7b243e73dd2436", "filename": "compiler/rustc_ast_lowering/src/asm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9361297dfcc3ec1c2efe4cc71ef89009a1991232/compiler%2Frustc_ast_lowering%2Fsrc%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9361297dfcc3ec1c2efe4cc71ef89009a1991232/compiler%2Frustc_ast_lowering%2Fsrc%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fasm.rs?ref=9361297dfcc3ec1c2efe4cc71ef89009a1991232", "patch": "@@ -220,7 +220,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                                 &sym.qself,\n                                 &sym.path,\n                                 ParamMode::Optional,\n-                                ImplTraitContext::Disallowed(ImplTraitPosition::Path),\n+                                &mut ImplTraitContext::Disallowed(ImplTraitPosition::Path),\n                             );\n                             hir::InlineAsmOperand::SymStatic { path, def_id }\n                         } else {"}, {"sha": "7465706d1a9bb78b039f86ebdf8df23ab6ac7ecf", "filename": "compiler/rustc_ast_lowering/src/block.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9361297dfcc3ec1c2efe4cc71ef89009a1991232/compiler%2Frustc_ast_lowering%2Fsrc%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9361297dfcc3ec1c2efe4cc71ef89009a1991232/compiler%2Frustc_ast_lowering%2Fsrc%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fblock.rs?ref=9361297dfcc3ec1c2efe4cc71ef89009a1991232", "patch": "@@ -84,10 +84,9 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n     }\n \n     fn lower_local(&mut self, l: &Local) -> &'hir hir::Local<'hir> {\n-        let ty = l\n-            .ty\n-            .as_ref()\n-            .map(|t| self.lower_ty(t, ImplTraitContext::Disallowed(ImplTraitPosition::Variable)));\n+        let ty = l.ty.as_ref().map(|t| {\n+            self.lower_ty(t, &mut ImplTraitContext::Disallowed(ImplTraitPosition::Variable))\n+        });\n         let init = l.kind.init().map(|init| self.lower_expr(init));\n         let hir_id = self.lower_node_id(l.id);\n         let pat = self.lower_pat(&l.pat);"}, {"sha": "6fa8d7f0fcdd9b52c0b0b75fe6012791c6d25354", "filename": "compiler/rustc_ast_lowering/src/expr.rs", "status": "modified", "additions": 18, "deletions": 16, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/9361297dfcc3ec1c2efe4cc71ef89009a1991232/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9361297dfcc3ec1c2efe4cc71ef89009a1991232/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs?ref=9361297dfcc3ec1c2efe4cc71ef89009a1991232", "patch": "@@ -66,7 +66,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                         seg,\n                         ParamMode::Optional,\n                         ParenthesizedGenericArgs::Err,\n-                        ImplTraitContext::Disallowed(ImplTraitPosition::Path),\n+                        &mut ImplTraitContext::Disallowed(ImplTraitPosition::Path),\n                     ));\n                     let receiver = self.lower_expr(receiver);\n                     let args =\n@@ -89,14 +89,14 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 }\n                 ExprKind::Cast(ref expr, ref ty) => {\n                     let expr = self.lower_expr(expr);\n-                    let ty =\n-                        self.lower_ty(ty, ImplTraitContext::Disallowed(ImplTraitPosition::Type));\n+                    let ty = self\n+                        .lower_ty(ty, &mut ImplTraitContext::Disallowed(ImplTraitPosition::Type));\n                     hir::ExprKind::Cast(expr, ty)\n                 }\n                 ExprKind::Type(ref expr, ref ty) => {\n                     let expr = self.lower_expr(expr);\n-                    let ty =\n-                        self.lower_ty(ty, ImplTraitContext::Disallowed(ImplTraitPosition::Type));\n+                    let ty = self\n+                        .lower_ty(ty, &mut ImplTraitContext::Disallowed(ImplTraitPosition::Type));\n                     hir::ExprKind::Type(expr, ty)\n                 }\n                 ExprKind::AddrOf(k, m, ref ohs) => {\n@@ -219,7 +219,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                         qself,\n                         path,\n                         ParamMode::Optional,\n-                        ImplTraitContext::Disallowed(ImplTraitPosition::Path),\n+                        &mut ImplTraitContext::Disallowed(ImplTraitPosition::Path),\n                     );\n                     hir::ExprKind::Path(qpath)\n                 }\n@@ -253,7 +253,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                             &se.qself,\n                             &se.path,\n                             ParamMode::Optional,\n-                            ImplTraitContext::Disallowed(ImplTraitPosition::Path),\n+                            &mut ImplTraitContext::Disallowed(ImplTraitPosition::Path),\n                         )),\n                         self.arena\n                             .alloc_from_iter(se.fields.iter().map(|x| self.lower_expr_field(x))),\n@@ -550,12 +550,14 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         async_gen_kind: hir::AsyncGeneratorKind,\n         body: impl FnOnce(&mut Self) -> hir::Expr<'hir>,\n     ) -> hir::ExprKind<'hir> {\n-        let output = match ret_ty {\n-            Some(ty) => hir::FnRetTy::Return(\n-                self.lower_ty(&ty, ImplTraitContext::Disallowed(ImplTraitPosition::AsyncBlock)),\n-            ),\n-            None => hir::FnRetTy::DefaultReturn(self.lower_span(span)),\n-        };\n+        let output =\n+            match ret_ty {\n+                Some(ty) => hir::FnRetTy::Return(self.lower_ty(\n+                    &ty,\n+                    &mut ImplTraitContext::Disallowed(ImplTraitPosition::AsyncBlock),\n+                )),\n+                None => hir::FnRetTy::DefaultReturn(self.lower_span(span)),\n+            };\n \n         // Resume argument type. We let the compiler infer this to simplify the lowering. It is\n         // fully constrained by `future::from_generator`.\n@@ -1123,7 +1125,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                         qself,\n                         path,\n                         ParamMode::Optional,\n-                        ImplTraitContext::Disallowed(ImplTraitPosition::Path),\n+                        &mut ImplTraitContext::Disallowed(ImplTraitPosition::Path),\n                     );\n                     // Destructure like a tuple struct.\n                     let tuple_struct_pat =\n@@ -1139,7 +1141,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                         qself,\n                         path,\n                         ParamMode::Optional,\n-                        ImplTraitContext::Disallowed(ImplTraitPosition::Path),\n+                        &mut ImplTraitContext::Disallowed(ImplTraitPosition::Path),\n                     );\n                     // Destructure like a unit struct.\n                     let unit_struct_pat = hir::PatKind::Path(qpath);\n@@ -1163,7 +1165,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                     &se.qself,\n                     &se.path,\n                     ParamMode::Optional,\n-                    ImplTraitContext::Disallowed(ImplTraitPosition::Path),\n+                    &mut ImplTraitContext::Disallowed(ImplTraitPosition::Path),\n                 );\n                 let fields_omitted = match &se.rest {\n                     StructRest::Base(e) => {"}, {"sha": "f0717b51d4b18f8489090d69692a86e21055613e", "filename": "compiler/rustc_ast_lowering/src/item.rs", "status": "modified", "additions": 56, "deletions": 43, "changes": 99, "blob_url": "https://github.com/rust-lang/rust/blob/9361297dfcc3ec1c2efe4cc71ef89009a1991232/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9361297dfcc3ec1c2efe4cc71ef89009a1991232/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs?ref=9361297dfcc3ec1c2efe4cc71ef89009a1991232", "patch": "@@ -264,8 +264,8 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                     let body_id =\n                         this.lower_maybe_async_body(span, &decl, asyncness, body.as_deref());\n \n-                    let itctx = ImplTraitContext::Universal;\n-                    let (generics, decl) = this.lower_generics(generics, id, itctx, |this| {\n+                    let mut itctx = ImplTraitContext::Universal;\n+                    let (generics, decl) = this.lower_generics(generics, id, &mut itctx, |this| {\n                         let ret_id = asyncness.opt_return_id();\n                         this.lower_fn_decl(&decl, Some(id), FnDeclKind::Fn, ret_id)\n                     });\n@@ -311,8 +311,8 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 let (generics, ty) = self.lower_generics(\n                     &generics,\n                     id,\n-                    ImplTraitContext::Disallowed(ImplTraitPosition::Generic),\n-                    |this| this.lower_ty(ty, ImplTraitContext::TypeAliasesOpaqueTy),\n+                    &mut ImplTraitContext::Disallowed(ImplTraitPosition::Generic),\n+                    |this| this.lower_ty(ty, &mut ImplTraitContext::TypeAliasesOpaqueTy),\n                 );\n                 hir::ItemKind::TyAlias(ty, generics)\n             }\n@@ -324,7 +324,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 let (generics, ty) = self.lower_generics(\n                     &generics,\n                     id,\n-                    ImplTraitContext::Disallowed(ImplTraitPosition::Generic),\n+                    &mut ImplTraitContext::Disallowed(ImplTraitPosition::Generic),\n                     |this| this.arena.alloc(this.ty(span, hir::TyKind::Err)),\n                 );\n                 hir::ItemKind::TyAlias(ty, generics)\n@@ -333,7 +333,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 let (generics, variants) = self.lower_generics(\n                     generics,\n                     id,\n-                    ImplTraitContext::Disallowed(ImplTraitPosition::Generic),\n+                    &mut ImplTraitContext::Disallowed(ImplTraitPosition::Generic),\n                     |this| {\n                         this.arena.alloc_from_iter(\n                             enum_definition.variants.iter().map(|x| this.lower_variant(x)),\n@@ -346,7 +346,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 let (generics, struct_def) = self.lower_generics(\n                     generics,\n                     id,\n-                    ImplTraitContext::Disallowed(ImplTraitPosition::Generic),\n+                    &mut ImplTraitContext::Disallowed(ImplTraitPosition::Generic),\n                     |this| this.lower_variant_data(hir_id, struct_def),\n                 );\n                 hir::ItemKind::Struct(struct_def, generics)\n@@ -355,7 +355,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 let (generics, vdata) = self.lower_generics(\n                     generics,\n                     id,\n-                    ImplTraitContext::Disallowed(ImplTraitPosition::Generic),\n+                    &mut ImplTraitContext::Disallowed(ImplTraitPosition::Generic),\n                     |this| this.lower_variant_data(hir_id, vdata),\n                 );\n                 hir::ItemKind::Union(vdata, generics)\n@@ -383,18 +383,20 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 // method, it will not be considered an in-band\n                 // lifetime to be added, but rather a reference to a\n                 // parent lifetime.\n-                let itctx = ImplTraitContext::Universal;\n+                let mut itctx = ImplTraitContext::Universal;\n                 let (generics, (trait_ref, lowered_ty)) =\n-                    self.lower_generics(ast_generics, id, itctx, |this| {\n+                    self.lower_generics(ast_generics, id, &mut itctx, |this| {\n                         let trait_ref = trait_ref.as_ref().map(|trait_ref| {\n                             this.lower_trait_ref(\n                                 trait_ref,\n-                                ImplTraitContext::Disallowed(ImplTraitPosition::Trait),\n+                                &mut ImplTraitContext::Disallowed(ImplTraitPosition::Trait),\n                             )\n                         });\n \n-                        let lowered_ty = this\n-                            .lower_ty(ty, ImplTraitContext::Disallowed(ImplTraitPosition::Type));\n+                        let lowered_ty = this.lower_ty(\n+                            ty,\n+                            &mut ImplTraitContext::Disallowed(ImplTraitPosition::Type),\n+                        );\n \n                         (trait_ref, lowered_ty)\n                     });\n@@ -433,11 +435,11 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 let (generics, (unsafety, items, bounds)) = self.lower_generics(\n                     generics,\n                     id,\n-                    ImplTraitContext::Disallowed(ImplTraitPosition::Generic),\n+                    &mut ImplTraitContext::Disallowed(ImplTraitPosition::Generic),\n                     |this| {\n                         let bounds = this.lower_param_bounds(\n                             bounds,\n-                            ImplTraitContext::Disallowed(ImplTraitPosition::Bound),\n+                            &mut ImplTraitContext::Disallowed(ImplTraitPosition::Bound),\n                         );\n                         let items = this.arena.alloc_from_iter(\n                             items.iter().map(|item| this.lower_trait_item_ref(item)),\n@@ -452,11 +454,11 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 let (generics, bounds) = self.lower_generics(\n                     generics,\n                     id,\n-                    ImplTraitContext::Disallowed(ImplTraitPosition::Generic),\n+                    &mut ImplTraitContext::Disallowed(ImplTraitPosition::Generic),\n                     |this| {\n                         this.lower_param_bounds(\n                             bounds,\n-                            ImplTraitContext::Disallowed(ImplTraitPosition::Bound),\n+                            &mut ImplTraitContext::Disallowed(ImplTraitPosition::Bound),\n                         )\n                     },\n                 );\n@@ -479,7 +481,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         span: Span,\n         body: Option<&Expr>,\n     ) -> (&'hir hir::Ty<'hir>, hir::BodyId) {\n-        let ty = self.lower_ty(ty, ImplTraitContext::Disallowed(ImplTraitPosition::Type));\n+        let ty = self.lower_ty(ty, &mut ImplTraitContext::Disallowed(ImplTraitPosition::Type));\n         (ty, self.lower_const_body(span, body))\n     }\n \n@@ -652,9 +654,9 @@ impl<'hir> LoweringContext<'_, 'hir> {\n             kind: match i.kind {\n                 ForeignItemKind::Fn(box Fn { ref sig, ref generics, .. }) => {\n                     let fdec = &sig.decl;\n-                    let itctx = ImplTraitContext::Universal;\n+                    let mut itctx = ImplTraitContext::Universal;\n                     let (generics, (fn_dec, fn_args)) =\n-                        self.lower_generics(generics, i.id, itctx, |this| {\n+                        self.lower_generics(generics, i.id, &mut itctx, |this| {\n                             (\n                                 // Disallow `impl Trait` in foreign items.\n                                 this.lower_fn_decl(fdec, None, FnDeclKind::ExternFn, None),\n@@ -665,8 +667,8 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                     hir::ForeignItemKind::Fn(fn_dec, fn_args, generics)\n                 }\n                 ForeignItemKind::Static(ref t, m, _) => {\n-                    let ty =\n-                        self.lower_ty(t, ImplTraitContext::Disallowed(ImplTraitPosition::Type));\n+                    let ty = self\n+                        .lower_ty(t, &mut ImplTraitContext::Disallowed(ImplTraitPosition::Type));\n                     hir::ForeignItemKind::Static(ty, m)\n                 }\n                 ForeignItemKind::TyAlias(..) => hir::ForeignItemKind::Type,\n@@ -734,11 +736,11 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 qself,\n                 path,\n                 ParamMode::ExplicitNamed, // no `'_` in declarations (Issue #61124)\n-                ImplTraitContext::Disallowed(ImplTraitPosition::Path),\n+                &mut ImplTraitContext::Disallowed(ImplTraitPosition::Path),\n             );\n             self.arena.alloc(t)\n         } else {\n-            self.lower_ty(&f.ty, ImplTraitContext::Disallowed(ImplTraitPosition::Type))\n+            self.lower_ty(&f.ty, &mut ImplTraitContext::Disallowed(ImplTraitPosition::Type))\n         };\n         let hir_id = self.lower_node_id(f.id);\n         self.lower_attrs(hir_id, &f.attrs);\n@@ -761,7 +763,8 @@ impl<'hir> LoweringContext<'_, 'hir> {\n \n         let (generics, kind, has_default) = match i.kind {\n             AssocItemKind::Const(_, ref ty, ref default) => {\n-                let ty = self.lower_ty(ty, ImplTraitContext::Disallowed(ImplTraitPosition::Type));\n+                let ty =\n+                    self.lower_ty(ty, &mut ImplTraitContext::Disallowed(ImplTraitPosition::Type));\n                 let body = default.as_ref().map(|x| self.lower_const_body(i.span, Some(x)));\n                 (hir::Generics::empty(), hir::TraitItemKind::Const(ty, body), body.is_some())\n             }\n@@ -796,15 +799,18 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 let (generics, kind) = self.lower_generics(\n                     &generics,\n                     i.id,\n-                    ImplTraitContext::Disallowed(ImplTraitPosition::Generic),\n+                    &mut ImplTraitContext::Disallowed(ImplTraitPosition::Generic),\n                     |this| {\n                         let ty = ty.as_ref().map(|x| {\n-                            this.lower_ty(x, ImplTraitContext::Disallowed(ImplTraitPosition::Type))\n+                            this.lower_ty(\n+                                x,\n+                                &mut ImplTraitContext::Disallowed(ImplTraitPosition::Type),\n+                            )\n                         });\n                         hir::TraitItemKind::Type(\n                             this.lower_param_bounds(\n                                 bounds,\n-                                ImplTraitContext::Disallowed(ImplTraitPosition::Generic),\n+                                &mut ImplTraitContext::Disallowed(ImplTraitPosition::Generic),\n                             ),\n                             ty,\n                         )\n@@ -857,7 +863,8 @@ impl<'hir> LoweringContext<'_, 'hir> {\n \n         let (generics, kind) = match &i.kind {\n             AssocItemKind::Const(_, ty, expr) => {\n-                let ty = self.lower_ty(ty, ImplTraitContext::Disallowed(ImplTraitPosition::Type));\n+                let ty =\n+                    self.lower_ty(ty, &mut ImplTraitContext::Disallowed(ImplTraitPosition::Type));\n                 (\n                     hir::Generics::empty(),\n                     hir::ImplItemKind::Const(ty, self.lower_const_body(i.span, expr.as_deref())),\n@@ -884,14 +891,14 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 self.lower_generics(\n                     &generics,\n                     i.id,\n-                    ImplTraitContext::Disallowed(ImplTraitPosition::Generic),\n+                    &mut ImplTraitContext::Disallowed(ImplTraitPosition::Generic),\n                     |this| match ty {\n                         None => {\n                             let ty = this.arena.alloc(this.ty(i.span, hir::TyKind::Err));\n                             hir::ImplItemKind::TyAlias(ty)\n                         }\n                         Some(ty) => {\n-                            let ty = this.lower_ty(ty, ImplTraitContext::TypeAliasesOpaqueTy);\n+                            let ty = this.lower_ty(ty, &mut ImplTraitContext::TypeAliasesOpaqueTy);\n                             hir::ImplItemKind::TyAlias(ty)\n                         }\n                     },\n@@ -1234,8 +1241,8 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         is_async: Option<NodeId>,\n     ) -> (&'hir hir::Generics<'hir>, hir::FnSig<'hir>) {\n         let header = self.lower_fn_header(sig.header);\n-        let itctx = ImplTraitContext::Universal;\n-        let (generics, decl) = self.lower_generics(generics, id, itctx, |this| {\n+        let mut itctx = ImplTraitContext::Universal;\n+        let (generics, decl) = self.lower_generics(generics, id, &mut itctx, |this| {\n             this.lower_fn_decl(&sig.decl, Some(id), kind, is_async)\n         });\n         (generics, hir::FnSig { header, decl, span: self.lower_span(sig.span) })\n@@ -1301,7 +1308,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         &mut self,\n         generics: &Generics,\n         parent_node_id: NodeId,\n-        itctx: ImplTraitContext,\n+        itctx: &mut ImplTraitContext,\n         f: impl FnOnce(&mut Self) -> T,\n     ) -> (&'hir hir::Generics<'hir>, T) {\n         debug_assert!(self.impl_trait_defs.is_empty());\n@@ -1406,7 +1413,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         id: NodeId,\n         kind: &GenericParamKind,\n         bounds: &[GenericBound],\n-        itctx: ImplTraitContext,\n+        itctx: &mut ImplTraitContext,\n         origin: PredicateOrigin,\n     ) -> Option<hir::WherePredicate<'hir>> {\n         // Do not create a clause if we do not have anything inside it.\n@@ -1481,12 +1488,14 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 span,\n             }) => hir::WherePredicate::BoundPredicate(hir::WhereBoundPredicate {\n                 bound_generic_params: self.lower_generic_params(bound_generic_params),\n-                bounded_ty: self\n-                    .lower_ty(bounded_ty, ImplTraitContext::Disallowed(ImplTraitPosition::Type)),\n+                bounded_ty: self.lower_ty(\n+                    bounded_ty,\n+                    &mut ImplTraitContext::Disallowed(ImplTraitPosition::Type),\n+                ),\n                 bounds: self.arena.alloc_from_iter(bounds.iter().map(|bound| {\n                     self.lower_param_bound(\n                         bound,\n-                        ImplTraitContext::Disallowed(ImplTraitPosition::Bound),\n+                        &mut ImplTraitContext::Disallowed(ImplTraitPosition::Bound),\n                     )\n                 })),\n                 span: self.lower_span(span),\n@@ -1501,16 +1510,20 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 lifetime: self.lower_lifetime(lifetime),\n                 bounds: self.lower_param_bounds(\n                     bounds,\n-                    ImplTraitContext::Disallowed(ImplTraitPosition::Bound),\n+                    &mut ImplTraitContext::Disallowed(ImplTraitPosition::Bound),\n                 ),\n                 in_where_clause: true,\n             }),\n             WherePredicate::EqPredicate(WhereEqPredicate { ref lhs_ty, ref rhs_ty, span }) => {\n                 hir::WherePredicate::EqPredicate(hir::WhereEqPredicate {\n-                    lhs_ty: self\n-                        .lower_ty(lhs_ty, ImplTraitContext::Disallowed(ImplTraitPosition::Type)),\n-                    rhs_ty: self\n-                        .lower_ty(rhs_ty, ImplTraitContext::Disallowed(ImplTraitPosition::Type)),\n+                    lhs_ty: self.lower_ty(\n+                        lhs_ty,\n+                        &mut ImplTraitContext::Disallowed(ImplTraitPosition::Type),\n+                    ),\n+                    rhs_ty: self.lower_ty(\n+                        rhs_ty,\n+                        &mut ImplTraitContext::Disallowed(ImplTraitPosition::Type),\n+                    ),\n                     span: self.lower_span(span),\n                 })\n             }"}, {"sha": "11f25d663484a7056160a03af428dbc32c02b019", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 34, "deletions": 27, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/9361297dfcc3ec1c2efe4cc71ef89009a1991232/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9361297dfcc3ec1c2efe4cc71ef89009a1991232/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=9361297dfcc3ec1c2efe4cc71ef89009a1991232", "patch": "@@ -953,7 +953,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n     fn lower_assoc_ty_constraint(\n         &mut self,\n         constraint: &AssocConstraint,\n-        itctx: ImplTraitContext,\n+        itctx: &mut ImplTraitContext,\n     ) -> hir::TypeBinding<'hir> {\n         debug!(\"lower_assoc_ty_constraint(constraint={:?}, itctx={:?})\", constraint, itctx);\n         // lower generic arguments of identifier in constraint\n@@ -976,6 +976,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         } else {\n             self.arena.alloc(hir::GenericArgs::none())\n         };\n+        let mut itctx_tait = ImplTraitContext::TypeAliasesOpaqueTy;\n \n         let kind = match constraint.kind {\n             AssocConstraintKind::Equality { ref term } => {\n@@ -1014,7 +1015,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                     //\n                     // FIXME: this is only needed until `impl Trait` is allowed in type aliases.\n                     ImplTraitContext::Disallowed(_) if self.is_in_dyn_type => {\n-                        (true, ImplTraitContext::TypeAliasesOpaqueTy)\n+                        (true, &mut itctx_tait)\n                     }\n \n                     // We are in the parameter position, but not within a dyn type:\n@@ -1096,7 +1097,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n     fn lower_generic_arg(\n         &mut self,\n         arg: &ast::GenericArg,\n-        itctx: ImplTraitContext,\n+        itctx: &mut ImplTraitContext,\n     ) -> hir::GenericArg<'hir> {\n         match arg {\n             ast::GenericArg::Lifetime(lt) => GenericArg::Lifetime(self.lower_lifetime(&lt)),\n@@ -1158,7 +1159,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n     }\n \n     #[instrument(level = \"debug\", skip(self))]\n-    fn lower_ty(&mut self, t: &Ty, itctx: ImplTraitContext) -> &'hir hir::Ty<'hir> {\n+    fn lower_ty(&mut self, t: &Ty, itctx: &mut ImplTraitContext) -> &'hir hir::Ty<'hir> {\n         self.arena.alloc(self.lower_ty_direct(t, itctx))\n     }\n \n@@ -1168,7 +1169,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         qself: &Option<QSelf>,\n         path: &Path,\n         param_mode: ParamMode,\n-        itctx: ImplTraitContext,\n+        itctx: &mut ImplTraitContext,\n     ) -> hir::Ty<'hir> {\n         // Check whether we should interpret this as a bare trait object.\n         // This check mirrors the one in late resolution.  We only introduce this special case in\n@@ -1210,7 +1211,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         self.ty(span, hir::TyKind::Tup(tys))\n     }\n \n-    fn lower_ty_direct(&mut self, t: &Ty, itctx: ImplTraitContext) -> hir::Ty<'hir> {\n+    fn lower_ty_direct(&mut self, t: &Ty, itctx: &mut ImplTraitContext) -> hir::Ty<'hir> {\n         let kind = match t.kind {\n             TyKind::Infer => hir::TyKind::Infer,\n             TyKind::Err => hir::TyKind::Err,\n@@ -1307,16 +1308,16 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                 let span = t.span;\n                 match itctx {\n                     ImplTraitContext::ReturnPositionOpaqueTy { origin } => {\n-                        self.lower_opaque_impl_trait(span, origin, def_node_id, bounds, itctx)\n+                        self.lower_opaque_impl_trait(span, *origin, def_node_id, bounds, itctx)\n                     }\n                     ImplTraitContext::TypeAliasesOpaqueTy => {\n-                        let nested_itctx = ImplTraitContext::TypeAliasesOpaqueTy;\n+                        let mut nested_itctx = ImplTraitContext::TypeAliasesOpaqueTy;\n                         self.lower_opaque_impl_trait(\n                             span,\n                             hir::OpaqueTyOrigin::TyAlias,\n                             def_node_id,\n                             bounds,\n-                            nested_itctx,\n+                            &mut nested_itctx,\n                         )\n                     }\n                     ImplTraitContext::Universal => {\n@@ -1388,7 +1389,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         origin: hir::OpaqueTyOrigin,\n         opaque_ty_node_id: NodeId,\n         bounds: &GenericBounds,\n-        itctx: ImplTraitContext,\n+        itctx: &mut ImplTraitContext,\n     ) -> hir::TyKind<'hir> {\n         // Make sure we know that some funky desugaring has been going on here.\n         // This is a first: there is code in other places like for loop\n@@ -1635,11 +1636,11 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         }\n         let inputs = self.arena.alloc_from_iter(inputs.iter().map(|param| {\n             if fn_node_id.is_some() {\n-                self.lower_ty_direct(&param.ty, ImplTraitContext::Universal)\n+                self.lower_ty_direct(&param.ty, &mut ImplTraitContext::Universal)\n             } else {\n                 self.lower_ty_direct(\n                     &param.ty,\n-                    ImplTraitContext::Disallowed(match kind {\n+                    &mut ImplTraitContext::Disallowed(match kind {\n                         FnDeclKind::Fn | FnDeclKind::Inherent => {\n                             unreachable!(\"fn should allow in-band lifetimes\")\n                         }\n@@ -1662,7 +1663,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         } else {\n             match decl.output {\n                 FnRetTy::Ty(ref ty) => {\n-                    let context = match fn_node_id {\n+                    let mut context = match fn_node_id {\n                         Some(fn_node_id) if kind.impl_trait_return_allowed() => {\n                             let fn_def_id = self.local_def_id(fn_node_id);\n                             ImplTraitContext::ReturnPositionOpaqueTy {\n@@ -1680,7 +1681,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                             FnDeclKind::Impl => ImplTraitPosition::ImplReturn,\n                         }),\n                     };\n-                    hir::FnRetTy::Return(self.lower_ty(ty, context))\n+                    hir::FnRetTy::Return(self.lower_ty(ty, &mut context))\n                 }\n                 FnRetTy::Default(span) => hir::FnRetTy::DefaultReturn(self.lower_span(span)),\n             }\n@@ -1959,10 +1960,10 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                 // Not `OpaqueTyOrigin::AsyncFn`: that's only used for the\n                 // `impl Future` opaque type that `async fn` implicitly\n                 // generates.\n-                let context = ImplTraitContext::ReturnPositionOpaqueTy {\n+                let mut context = ImplTraitContext::ReturnPositionOpaqueTy {\n                     origin: hir::OpaqueTyOrigin::FnReturn(fn_def_id),\n                 };\n-                self.lower_ty(ty, context)\n+                self.lower_ty(ty, &mut context)\n             }\n             FnRetTy::Default(ret_ty_span) => self.arena.alloc(self.ty_tup(*ret_ty_span, &[])),\n         };\n@@ -1988,7 +1989,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n     fn lower_param_bound(\n         &mut self,\n         tpb: &GenericBound,\n-        itctx: ImplTraitContext,\n+        itctx: &mut ImplTraitContext,\n     ) -> hir::GenericBound<'hir> {\n         match tpb {\n             GenericBound::Trait(p, modifier) => hir::GenericBound::Trait(\n@@ -2100,15 +2101,16 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n             GenericParamKind::Type { ref default, .. } => {\n                 let kind = hir::GenericParamKind::Type {\n                     default: default.as_ref().map(|x| {\n-                        self.lower_ty(x, ImplTraitContext::Disallowed(ImplTraitPosition::Type))\n+                        self.lower_ty(x, &mut ImplTraitContext::Disallowed(ImplTraitPosition::Type))\n                     }),\n                     synthetic: false,\n                 };\n \n                 (hir::ParamName::Plain(self.lower_ident(param.ident)), kind)\n             }\n             GenericParamKind::Const { ref ty, kw_span: _, ref default } => {\n-                let ty = self.lower_ty(&ty, ImplTraitContext::Disallowed(ImplTraitPosition::Type));\n+                let ty =\n+                    self.lower_ty(&ty, &mut ImplTraitContext::Disallowed(ImplTraitPosition::Type));\n                 let default = default.as_ref().map(|def| self.lower_anon_const(def));\n                 (\n                     hir::ParamName::Plain(self.lower_ident(param.ident)),\n@@ -2118,7 +2120,11 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         }\n     }\n \n-    fn lower_trait_ref(&mut self, p: &TraitRef, itctx: ImplTraitContext) -> hir::TraitRef<'hir> {\n+    fn lower_trait_ref(\n+        &mut self,\n+        p: &TraitRef,\n+        itctx: &mut ImplTraitContext,\n+    ) -> hir::TraitRef<'hir> {\n         let path = match self.lower_qpath(p.ref_id, &None, &p.path, ParamMode::Explicit, itctx) {\n             hir::QPath::Resolved(None, path) => path,\n             qpath => panic!(\"lower_trait_ref: unexpected QPath `{:?}`\", qpath),\n@@ -2130,31 +2136,32 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n     fn lower_poly_trait_ref(\n         &mut self,\n         p: &PolyTraitRef,\n-        itctx: ImplTraitContext,\n+        itctx: &mut ImplTraitContext,\n     ) -> hir::PolyTraitRef<'hir> {\n         let bound_generic_params =\n             self.lower_lifetime_binder(p.trait_ref.ref_id, &p.bound_generic_params);\n         let trait_ref = self.lower_trait_ref(&p.trait_ref, itctx);\n         hir::PolyTraitRef { bound_generic_params, trait_ref, span: self.lower_span(p.span) }\n     }\n \n-    fn lower_mt(&mut self, mt: &MutTy, itctx: ImplTraitContext) -> hir::MutTy<'hir> {\n+    fn lower_mt(&mut self, mt: &MutTy, itctx: &mut ImplTraitContext) -> hir::MutTy<'hir> {\n         hir::MutTy { ty: self.lower_ty(&mt.ty, itctx), mutbl: mt.mutbl }\n     }\n \n     fn lower_param_bounds(\n         &mut self,\n         bounds: &[GenericBound],\n-        itctx: ImplTraitContext,\n+        itctx: &mut ImplTraitContext,\n     ) -> hir::GenericBounds<'hir> {\n         self.arena.alloc_from_iter(self.lower_param_bounds_mut(bounds, itctx))\n     }\n \n-    fn lower_param_bounds_mut<'s>(\n+    fn lower_param_bounds_mut<'s, 'b>(\n         &'s mut self,\n         bounds: &'s [GenericBound],\n-        itctx: ImplTraitContext,\n-    ) -> impl Iterator<Item = hir::GenericBound<'hir>> + Captures<'s> + Captures<'a> {\n+        itctx: &'b mut ImplTraitContext,\n+    ) -> impl Iterator<Item = hir::GenericBound<'hir>> + Captures<'s> + Captures<'a> + Captures<'b>\n+    {\n         bounds.iter().map(move |bound| self.lower_param_bound(bound, itctx))\n     }\n \n@@ -2183,7 +2190,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n             node_id,\n             &GenericParamKind::Type { default: None },\n             bounds,\n-            ImplTraitContext::Universal,\n+            &mut ImplTraitContext::Universal,\n             hir::PredicateOrigin::ImplTrait,\n         );\n "}, {"sha": "69e6c2c8ad0bc2ea9d5ad69d168fdc0eb1a71c25", "filename": "compiler/rustc_ast_lowering/src/pat.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9361297dfcc3ec1c2efe4cc71ef89009a1991232/compiler%2Frustc_ast_lowering%2Fsrc%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9361297dfcc3ec1c2efe4cc71ef89009a1991232/compiler%2Frustc_ast_lowering%2Fsrc%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fpat.rs?ref=9361297dfcc3ec1c2efe4cc71ef89009a1991232", "patch": "@@ -37,7 +37,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                             qself,\n                             path,\n                             ParamMode::Optional,\n-                            ImplTraitContext::Disallowed(ImplTraitPosition::Path),\n+                            &mut ImplTraitContext::Disallowed(ImplTraitPosition::Path),\n                         );\n                         let (pats, ddpos) = self.lower_pat_tuple(pats, \"tuple struct\");\n                         break hir::PatKind::TupleStruct(qpath, pats, ddpos);\n@@ -53,7 +53,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                             qself,\n                             path,\n                             ParamMode::Optional,\n-                            ImplTraitContext::Disallowed(ImplTraitPosition::Path),\n+                            &mut ImplTraitContext::Disallowed(ImplTraitPosition::Path),\n                         );\n                         break hir::PatKind::Path(qpath);\n                     }\n@@ -63,7 +63,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                             qself,\n                             path,\n                             ParamMode::Optional,\n-                            ImplTraitContext::Disallowed(ImplTraitPosition::Path),\n+                            &mut ImplTraitContext::Disallowed(ImplTraitPosition::Path),\n                         );\n \n                         let fs = self.arena.alloc_from_iter(fields.iter().map(|f| {"}, {"sha": "a3d864023a9ff6319eb6991f427870a566ca25a6", "filename": "compiler/rustc_ast_lowering/src/path.rs", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/9361297dfcc3ec1c2efe4cc71ef89009a1991232/compiler%2Frustc_ast_lowering%2Fsrc%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9361297dfcc3ec1c2efe4cc71ef89009a1991232/compiler%2Frustc_ast_lowering%2Fsrc%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fpath.rs?ref=9361297dfcc3ec1c2efe4cc71ef89009a1991232", "patch": "@@ -22,7 +22,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         qself: &Option<QSelf>,\n         p: &Path,\n         param_mode: ParamMode,\n-        itctx: ImplTraitContext,\n+        itctx: &mut ImplTraitContext,\n     ) -> hir::QPath<'hir> {\n         let qself_position = qself.as_ref().map(|q| q.position);\n         let qself = qself.as_ref().map(|q| self.lower_ty(&q.ty, itctx));\n@@ -156,7 +156,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                     segment,\n                     param_mode,\n                     ParenthesizedGenericArgs::Err,\n-                    ImplTraitContext::Disallowed(ImplTraitPosition::Path),\n+                    &mut ImplTraitContext::Disallowed(ImplTraitPosition::Path),\n                 )\n             })),\n             span: self.lower_span(p.span),\n@@ -180,7 +180,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         segment: &PathSegment,\n         param_mode: ParamMode,\n         parenthesized_generic_args: ParenthesizedGenericArgs,\n-        itctx: ImplTraitContext,\n+        itctx: &mut ImplTraitContext,\n     ) -> hir::PathSegment<'hir> {\n         debug!(\"path_span: {:?}, lower_path_segment(segment: {:?})\", path_span, segment,);\n         let (mut generic_args, infer_args) = if let Some(ref generic_args) = segment.args {\n@@ -316,7 +316,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         &mut self,\n         data: &AngleBracketedArgs,\n         param_mode: ParamMode,\n-        itctx: ImplTraitContext,\n+        itctx: &mut ImplTraitContext,\n     ) -> (GenericArgsCtor<'hir>, bool) {\n         let has_non_lt_args = data.args.iter().any(|arg| match arg {\n             AngleBracketedArg::Arg(ast::GenericArg::Lifetime(_))\n@@ -350,12 +350,14 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         // we generally don't permit such things (see #51008).\n         let ParenthesizedArgs { span, inputs, inputs_span, output } = data;\n         let inputs = self.arena.alloc_from_iter(inputs.iter().map(|ty| {\n-            self.lower_ty_direct(ty, ImplTraitContext::Disallowed(ImplTraitPosition::FnTraitParam))\n+            self.lower_ty_direct(\n+                ty,\n+                &mut ImplTraitContext::Disallowed(ImplTraitPosition::FnTraitParam),\n+            )\n         }));\n         let output_ty = match output {\n-            FnRetTy::Ty(ty) => {\n-                self.lower_ty(&ty, ImplTraitContext::Disallowed(ImplTraitPosition::FnTraitReturn))\n-            }\n+            FnRetTy::Ty(ty) => self\n+                .lower_ty(&ty, &mut ImplTraitContext::Disallowed(ImplTraitPosition::FnTraitReturn)),\n             FnRetTy::Default(_) => self.arena.alloc(self.ty_tup(*span, &[])),\n         };\n         let args = smallvec![GenericArg::Type(self.arena.alloc(self.ty_tup(*inputs_span, inputs)))];"}]}