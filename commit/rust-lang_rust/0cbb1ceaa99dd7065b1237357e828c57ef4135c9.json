{"sha": "0cbb1ceaa99dd7065b1237357e828c57ef4135c9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBjYmIxY2VhYTk5ZGQ3MDY1YjEyMzczNTdlODI4YzU3ZWY0MTM1Yzk=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2014-03-26T09:14:08Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2014-03-26T16:57:02Z"}, "message": "Add test using early-bound lifetimes in trait generic parameters.", "tree": {"sha": "8af1e27b97b503da76b64836ceeefba1e60b7469", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8af1e27b97b503da76b64836ceeefba1e60b7469"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0cbb1ceaa99dd7065b1237357e828c57ef4135c9", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0cbb1ceaa99dd7065b1237357e828c57ef4135c9", "html_url": "https://github.com/rust-lang/rust/commit/0cbb1ceaa99dd7065b1237357e828c57ef4135c9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0cbb1ceaa99dd7065b1237357e828c57ef4135c9/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ab8e02616cb3f2608208feea9627cb981377ac0d", "url": "https://api.github.com/repos/rust-lang/rust/commits/ab8e02616cb3f2608208feea9627cb981377ac0d", "html_url": "https://github.com/rust-lang/rust/commit/ab8e02616cb3f2608208feea9627cb981377ac0d"}], "stats": {"total": 135, "additions": 135, "deletions": 0}, "files": [{"sha": "f3cfa0b9d335232684d1a6bb1e07879b485c8b10", "filename": "src/test/run-pass/regions-early-bound-trait-param.rs", "status": "added", "additions": 135, "deletions": 0, "changes": 135, "blob_url": "https://github.com/rust-lang/rust/blob/0cbb1ceaa99dd7065b1237357e828c57ef4135c9/src%2Ftest%2Frun-pass%2Fregions-early-bound-trait-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cbb1ceaa99dd7065b1237357e828c57ef4135c9/src%2Ftest%2Frun-pass%2Fregions-early-bound-trait-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-early-bound-trait-param.rs?ref=0cbb1ceaa99dd7065b1237357e828c57ef4135c9", "patch": "@@ -0,0 +1,135 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Tests that you can use an early-bound lifetime parameter as\n+// on of the generic parameters in a trait.\n+\n+trait Trait<'a> {\n+    fn long(&'a self) -> int;\n+    fn short<'b>(&'b self) -> int;\n+}\n+\n+fn poly_invoke<'c, T: Trait<'c>>(x: &'c T) -> (int, int) {\n+    let l = x.long();\n+    let s = x.short();\n+    (l,s)\n+}\n+\n+fn object_invoke1<'d>(x: &'d Trait<'d>) -> (int, int) {\n+    let l = x.long();\n+    let s = x.short();\n+    (l,s)\n+}\n+\n+struct Struct1<'e> {\n+    f: &'e Trait<'e>\n+}\n+\n+fn field_invoke1<'f, 'g>(x: &'g Struct1<'f>) -> (int,int) {\n+    let l = x.f.long();\n+    let s = x.f.short();\n+    (l,s)\n+}\n+\n+struct Struct2<'h, 'i> {\n+    f: &'h Trait<'i>\n+}\n+\n+fn object_invoke2<'j, 'k>(x: &'k Trait<'j>) -> int {\n+    x.short()\n+}\n+\n+fn field_invoke2<'l, 'm, 'n>(x: &'n Struct2<'l,'m>) -> int {\n+    x.f.short()\n+}\n+\n+trait MakerTrait<'o> {\n+    fn mk() -> Self;\n+}\n+\n+fn make_val<'p, T:MakerTrait<'p>>() -> T {\n+    MakerTrait::mk()\n+}\n+\n+trait RefMakerTrait<'q> {\n+    fn mk(Self) -> &'q Self;\n+}\n+\n+fn make_ref<'r, T:RefMakerTrait<'r>>(t:T) -> &'r T {\n+    RefMakerTrait::mk(t)\n+}\n+\n+impl<'s> Trait<'s> for (int,int) {\n+    fn long(&'s self) -> int {\n+        let &(x,_) = self;\n+        x\n+    }\n+    fn short<'b>(&'b self) -> int {\n+        let &(_,y) = self;\n+        y\n+    }\n+}\n+\n+impl<'t> MakerTrait<'t> for ~Trait<'t> {\n+    fn mk() -> ~Trait<'t> { ~(4,5) as ~Trait }\n+}\n+\n+enum List<'l> {\n+    Cons(int, &'l List<'l>),\n+    Null\n+}\n+\n+impl<'l> List<'l> {\n+    fn car<'m>(&'m self) -> int {\n+        match self {\n+            &Cons(car, _) => car,\n+            &Null => fail!(),\n+        }\n+    }\n+    fn cdr<'n>(&'n self) -> &'l List<'l> {\n+        match self {\n+            &Cons(_, cdr) => cdr,\n+            &Null => fail!(),\n+        }\n+    }\n+}\n+\n+impl<'t> RefMakerTrait<'t> for List<'t> {\n+    fn mk(l:List<'t>) -> &'t List<'t> {\n+        l.cdr()\n+    }\n+}\n+\n+pub fn main() {\n+    let t = (2,3);\n+    let o = &t as &Trait;\n+    let s1 = Struct1 { f: o };\n+    let s2 = Struct2 { f: o };\n+    assert_eq!(poly_invoke(&t), (2,3));\n+    assert_eq!(object_invoke1(&t), (2,3));\n+    assert_eq!(field_invoke1(&s1), (2,3));\n+    assert_eq!(object_invoke2(&t), 3);\n+    assert_eq!(field_invoke2(&s2), 3);\n+\n+    let m : ~Trait = make_val();\n+    assert_eq!(object_invoke1(m), (4,5));\n+    assert_eq!(object_invoke2(m), 5);\n+\n+    // The RefMakerTrait above is pretty strange (i.e. it is strange\n+    // to consume a value of type T and return a &T).  Easiest thing\n+    // that came to my mind: consume a cell of a linked list and\n+    // return a reference to the list it points to.\n+    let l0 = Null;\n+    let l1 = Cons(1, &l0);\n+    let l2 = Cons(2, &l1);\n+    let rl1 = &l1;\n+    let r  = make_ref(l2);\n+    assert_eq!(rl1.car(), r.car());\n+}"}]}