{"sha": "2be738ae36600e562fcfc9ed938e183875cd72ad", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJiZTczOGFlMzY2MDBlNTYyZmNmYzllZDkzOGUxODM4NzVjZDcyYWQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-05-05T15:41:39Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-05-05T15:41:39Z"}, "message": "auto merge of #13935 : thestinger/rust/noalias, r=pcwalton\n\nThis was removed because these could alias with `&const T` or `@mut T`\r\nand those are now gone from the language. There are still aliasing\r\nissues within local scopes, but this is correct for function parameters.\r\n\r\nThis also removes the no-op `noalias` marker on proc (not a pointer) and\r\nleaves out the mention of #6750 because real type-based alias analysis\r\nis not within the scope of best effort usage of the `noalias` attribute.\r\n\r\nTest case:\r\n\r\n    pub fn foo(x: &mut &mut u32) {\r\n        **x = 5;\r\n        **x = 5;\r\n    }\r\n\r\nBefore:\r\n\r\n    define void @_ZN3foo20h0ce94c9671b0150bdaa4v0.0E(i32** nocapture readonly) unnamed_addr #0 {\r\n    entry-block:\r\n      %1 = load i32** %0, align 8\r\n      store i32 5, i32* %1, align 4\r\n      %2 = load i32** %0, align 8\r\n      store i32 5, i32* %2, align 4\r\n      ret void\r\n    }\r\n\r\nAfter:\r\n\r\n    define void @_ZN3foo20h0ce94c9671b0150bdaa4v0.0E(i32** noalias nocapture readonly) unnamed_addr #0 {\r\n    entry-block:\r\n      %1 = load i32** %0, align 8\r\n      store i32 5, i32* %1, align 4\r\n      ret void\r\n    }\r\n\r\nCloses #12436", "tree": {"sha": "97b2539a920b43d36e96a8f632124ad867a08a64", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/97b2539a920b43d36e96a8f632124ad867a08a64"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2be738ae36600e562fcfc9ed938e183875cd72ad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2be738ae36600e562fcfc9ed938e183875cd72ad", "html_url": "https://github.com/rust-lang/rust/commit/2be738ae36600e562fcfc9ed938e183875cd72ad", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2be738ae36600e562fcfc9ed938e183875cd72ad/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ecc18f34446cdecd42004be62805f84799733e72", "url": "https://api.github.com/repos/rust-lang/rust/commits/ecc18f34446cdecd42004be62805f84799733e72", "html_url": "https://github.com/rust-lang/rust/commit/ecc18f34446cdecd42004be62805f84799733e72"}, {"sha": "f62c753b8f7879607204bcf77491cc81baf9c2dc", "url": "https://api.github.com/repos/rust-lang/rust/commits/f62c753b8f7879607204bcf77491cc81baf9c2dc", "html_url": "https://github.com/rust-lang/rust/commit/f62c753b8f7879607204bcf77491cc81baf9c2dc"}], "stats": {"total": 22, "additions": 11, "deletions": 11}, "files": [{"sha": "949937c9037232bc2b677090c569b56e07a2fc38", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/2be738ae36600e562fcfc9ed938e183875cd72ad/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2be738ae36600e562fcfc9ed938e183875cd72ad/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=2be738ae36600e562fcfc9ed938e183875cd72ad", "patch": "@@ -186,8 +186,6 @@ fn decl_fn(llmod: ModuleRef, name: &str, cc: lib::llvm::CallConv,\n             }\n         }\n         // `~` pointer return values never alias because ownership is transferred\n-        // FIXME #6750 ~Trait cannot be directly marked as\n-        // noalias because the actual object pointer is nested.\n         ty::ty_uniq(..) // | ty::ty_trait(_, _, ty::UniqTraitStore, _, _)\n          => {\n             unsafe {\n@@ -258,23 +256,25 @@ pub fn decl_rust_fn(ccx: &CrateContext, has_env: bool,\n         let llarg = unsafe { llvm::LLVMGetParam(llfn, (offset + i) as c_uint) };\n         match ty::get(arg_ty).sty {\n             // `~` pointer parameters never alias because ownership is transferred\n-            // FIXME #6750 ~Trait cannot be directly marked as\n-            // noalias because the actual object pointer is nested.\n-            ty::ty_uniq(..) | // ty::ty_trait(_, _, ty::UniqTraitStore, _, _) |\n-            ty::ty_closure(~ty::ClosureTy {store: ty::UniqTraitStore, ..}) => {\n+            ty::ty_uniq(..) => {\n                 unsafe {\n                     llvm::LLVMAddAttribute(llarg, lib::llvm::NoAliasAttribute as c_uint);\n                 }\n-            },\n-            // When a reference in an argument has no named lifetime, it's\n-            // impossible for that reference to escape this function(ie, be\n-            // returned).\n+            }\n+            // `&mut` pointer parameters never alias other parameters, or mutable global data\n+            ty::ty_rptr(_, mt) if mt.mutbl == ast::MutMutable => {\n+                unsafe {\n+                    llvm::LLVMAddAttribute(llarg, lib::llvm::NoAliasAttribute as c_uint);\n+                }\n+            }\n+            // When a reference in an argument has no named lifetime, it's impossible for that\n+            // reference to escape this function (returned or stored beyond the call by a closure).\n             ty::ty_rptr(ReLateBound(_, BrAnon(_)), _) => {\n                 debug!(\"marking argument of {} as nocapture because of anonymous lifetime\", name);\n                 unsafe {\n                     llvm::LLVMAddAttribute(llarg, lib::llvm::NoCaptureAttribute as c_uint);\n                 }\n-            },\n+            }\n             _ => {\n                 // For non-immediate arguments the callee gets its own copy of\n                 // the value on the stack, so there are no aliases"}]}