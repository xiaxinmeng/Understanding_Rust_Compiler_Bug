{"sha": "c1168be5360f17516b233be85ebb193bb4e612bf", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMxMTY4YmU1MzYwZjE3NTE2YjIzM2JlODVlYmIxOTNiYjRlNjEyYmY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-05-02T05:22:29Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-05-02T05:22:29Z"}, "message": "Auto merge of #50282 - fitzgen:run-more-passes-on-constant-mir, r=nikomatsakis\n\nRun more passes on constant mir\n\nNot very familiar with this code, but everything seems to be working!\n\nr? @eddyb", "tree": {"sha": "3c7970d0f6ac97655141c7c24318b93781bda2d9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3c7970d0f6ac97655141c7c24318b93781bda2d9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c1168be5360f17516b233be85ebb193bb4e612bf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c1168be5360f17516b233be85ebb193bb4e612bf", "html_url": "https://github.com/rust-lang/rust/commit/c1168be5360f17516b233be85ebb193bb4e612bf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c1168be5360f17516b233be85ebb193bb4e612bf/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a2726846f6d6280b752019472b6bd791c0752006", "url": "https://api.github.com/repos/rust-lang/rust/commits/a2726846f6d6280b752019472b6bd791c0752006", "html_url": "https://github.com/rust-lang/rust/commit/a2726846f6d6280b752019472b6bd791c0752006"}, {"sha": "1129a711a6d2b84c696cb42a7be71bf0ed236509", "url": "https://api.github.com/repos/rust-lang/rust/commits/1129a711a6d2b84c696cb42a7be71bf0ed236509", "html_url": "https://github.com/rust-lang/rust/commit/1129a711a6d2b84c696cb42a7be71bf0ed236509"}], "stats": {"total": 50, "additions": 2, "deletions": 48}, "files": [{"sha": "fba60c7e8dc275db03a1e7adff5c86091239f710", "filename": "src/librustc_mir/transform/copy_prop.rs", "status": "modified", "additions": 1, "deletions": 20, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/c1168be5360f17516b233be85ebb193bb4e612bf/src%2Flibrustc_mir%2Ftransform%2Fcopy_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1168be5360f17516b233be85ebb193bb4e612bf/src%2Flibrustc_mir%2Ftransform%2Fcopy_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcopy_prop.rs?ref=c1168be5360f17516b233be85ebb193bb4e612bf", "patch": "@@ -29,7 +29,6 @@\n //! (non-mutating) use of `SRC`. These restrictions are conservative and may be relaxed in the\n //! future.\n \n-use rustc::hir;\n use rustc::mir::{Constant, Local, LocalKind, Location, Place, Mir, Operand, Rvalue, StatementKind};\n use rustc::mir::visit::MutVisitor;\n use rustc::ty::TyCtxt;\n@@ -41,26 +40,8 @@ pub struct CopyPropagation;\n impl MirPass for CopyPropagation {\n     fn run_pass<'a, 'tcx>(&self,\n                           tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                          source: MirSource,\n+                          _source: MirSource,\n                           mir: &mut Mir<'tcx>) {\n-        // Don't run on constant MIR, because trans might not be able to\n-        // evaluate the modified MIR.\n-        // FIXME(eddyb) Remove check after miri is merged.\n-        let id = tcx.hir.as_local_node_id(source.def_id).unwrap();\n-        match (tcx.hir.body_owner_kind(id), source.promoted) {\n-            (_, Some(_)) |\n-            (hir::BodyOwnerKind::Const, _) |\n-            (hir::BodyOwnerKind::Static(_), _) => return,\n-\n-            (hir::BodyOwnerKind::Fn, _) => {\n-                if tcx.is_const_fn(source.def_id) {\n-                    // Don't run on const functions, as, again, trans might not be able to evaluate\n-                    // the optimized IR.\n-                    return\n-                }\n-            }\n-        }\n-\n         // We only run when the MIR optimization level is > 1.\n         // This avoids a slow pass, and messing up debug info.\n         if tcx.sess.opts.debugging_opts.mir_opt_level <= 1 {"}, {"sha": "8b2b9ef7e814d3c3ecb1381f6117b0d7edf5c89a", "filename": "src/librustc_mir/transform/deaggregator.rs", "status": "modified", "additions": 1, "deletions": 20, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/c1168be5360f17516b233be85ebb193bb4e612bf/src%2Flibrustc_mir%2Ftransform%2Fdeaggregator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1168be5360f17516b233be85ebb193bb4e612bf/src%2Flibrustc_mir%2Ftransform%2Fdeaggregator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fdeaggregator.rs?ref=c1168be5360f17516b233be85ebb193bb4e612bf", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use rustc::hir;\n use rustc::ty::TyCtxt;\n use rustc::mir::*;\n use rustc_data_structures::indexed_vec::Idx;\n@@ -19,26 +18,8 @@ pub struct Deaggregator;\n impl MirPass for Deaggregator {\n     fn run_pass<'a, 'tcx>(&self,\n                           tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                          source: MirSource,\n+                          _source: MirSource,\n                           mir: &mut Mir<'tcx>) {\n-        // Don't run on constant MIR, because trans might not be able to\n-        // evaluate the modified MIR.\n-        // FIXME(eddyb) Remove check after miri is merged.\n-        let id = tcx.hir.as_local_node_id(source.def_id).unwrap();\n-        match (tcx.hir.body_owner_kind(id), source.promoted) {\n-            (_, Some(_)) |\n-            (hir::BodyOwnerKind::Const, _) |\n-            (hir::BodyOwnerKind::Static(_), _) => return,\n-\n-            (hir::BodyOwnerKind::Fn, _) => {\n-                if tcx.is_const_fn(source.def_id) {\n-                    // Don't run on const functions, as, again, trans might not be able to evaluate\n-                    // the optimized IR.\n-                    return\n-                }\n-            }\n-        }\n-\n         let (basic_blocks, local_decls) = mir.basic_blocks_and_local_decls_mut();\n         let local_decls = &*local_decls;\n         for bb in basic_blocks {"}, {"sha": "8b771fcf4936b22cb3e463fbdcb88b4c93ea7c68", "filename": "src/librustc_mir/transform/elaborate_drops.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c1168be5360f17516b233be85ebb193bb4e612bf/src%2Flibrustc_mir%2Ftransform%2Felaborate_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1168be5360f17516b233be85ebb193bb4e612bf/src%2Flibrustc_mir%2Ftransform%2Felaborate_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Felaborate_drops.rs?ref=c1168be5360f17516b233be85ebb193bb4e612bf", "patch": "@@ -15,7 +15,6 @@ use dataflow::{on_all_children_bits, on_all_drop_children_bits};\n use dataflow::{drop_flag_effects_for_location, on_lookup_result_bits};\n use dataflow::MoveDataParamEnv;\n use dataflow::{self, do_dataflow, DebugFormatted};\n-use rustc::hir;\n use rustc::ty::{self, TyCtxt};\n use rustc::mir::*;\n use rustc::middle::const_val::ConstVal;\n@@ -42,14 +41,7 @@ impl MirPass for ElaborateDrops {\n     {\n         debug!(\"elaborate_drops({:?} @ {:?})\", src, mir.span);\n \n-        // Don't run on constant MIR, because trans might not be able to\n-        // evaluate the modified MIR.\n-        // FIXME(eddyb) Remove check after miri is merged.\n         let id = tcx.hir.as_local_node_id(src.def_id).unwrap();\n-        match (tcx.hir.body_owner_kind(id), src.promoted) {\n-            (hir::BodyOwnerKind::Fn, None) => {},\n-            _ => return\n-        }\n         let param_env = tcx.param_env(src.def_id).with_reveal_all();\n         let move_data = MoveData::gather_moves(mir, tcx).unwrap();\n         let elaborate_patch = {"}]}