{"sha": "ab6915d7b530a1fa50ce87f2c227b2a33e4ce61e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFiNjkxNWQ3YjUzMGExZmE1MGNlODdmMmMyMjdiMmEzM2U0Y2U2MWU=", "commit": {"author": {"name": "Kang Seonghoon", "email": "public+git@mearie.org", "date": "2014-04-09T06:52:31Z"}, "committer": {"name": "Kang Seonghoon", "email": "public+git@mearie.org", "date": "2014-04-14T00:59:17Z"}, "message": "rustdoc: Use smaller sequential numbers instead of `NodeId`s for parents.\n\n`allPaths` is now a flat array in effect. This decreases the size of\nthe search index by about 4--5% (gzipped or not).", "tree": {"sha": "bfff0a7946efc94cb769d81bc43558d8a644974e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bfff0a7946efc94cb769d81bc43558d8a644974e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ab6915d7b530a1fa50ce87f2c227b2a33e4ce61e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ab6915d7b530a1fa50ce87f2c227b2a33e4ce61e", "html_url": "https://github.com/rust-lang/rust/commit/ab6915d7b530a1fa50ce87f2c227b2a33e4ce61e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ab6915d7b530a1fa50ce87f2c227b2a33e4ce61e/comments", "author": {"login": "lifthrasiir", "id": 323836, "node_id": "MDQ6VXNlcjMyMzgzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/323836?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lifthrasiir", "html_url": "https://github.com/lifthrasiir", "followers_url": "https://api.github.com/users/lifthrasiir/followers", "following_url": "https://api.github.com/users/lifthrasiir/following{/other_user}", "gists_url": "https://api.github.com/users/lifthrasiir/gists{/gist_id}", "starred_url": "https://api.github.com/users/lifthrasiir/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lifthrasiir/subscriptions", "organizations_url": "https://api.github.com/users/lifthrasiir/orgs", "repos_url": "https://api.github.com/users/lifthrasiir/repos", "events_url": "https://api.github.com/users/lifthrasiir/events{/privacy}", "received_events_url": "https://api.github.com/users/lifthrasiir/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lifthrasiir", "id": 323836, "node_id": "MDQ6VXNlcjMyMzgzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/323836?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lifthrasiir", "html_url": "https://github.com/lifthrasiir", "followers_url": "https://api.github.com/users/lifthrasiir/followers", "following_url": "https://api.github.com/users/lifthrasiir/following{/other_user}", "gists_url": "https://api.github.com/users/lifthrasiir/gists{/gist_id}", "starred_url": "https://api.github.com/users/lifthrasiir/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lifthrasiir/subscriptions", "organizations_url": "https://api.github.com/users/lifthrasiir/orgs", "repos_url": "https://api.github.com/users/lifthrasiir/repos", "events_url": "https://api.github.com/users/lifthrasiir/events{/privacy}", "received_events_url": "https://api.github.com/users/lifthrasiir/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5d284a0daa39f6b87028f97b5bfa2bb92f658f83", "url": "https://api.github.com/repos/rust-lang/rust/commits/5d284a0daa39f6b87028f97b5bfa2bb92f658f83", "html_url": "https://github.com/rust-lang/rust/commit/5d284a0daa39f6b87028f97b5bfa2bb92f658f83"}], "stats": {"total": 35, "additions": 22, "deletions": 13}, "files": [{"sha": "0b9a42d8e34b70c321604f1bc9268e8428d85b33", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 22, "deletions": 13, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/ab6915d7b530a1fa50ce87f2c227b2a33e4ce61e/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab6915d7b530a1fa50ce87f2c227b2a33e4ce61e/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=ab6915d7b530a1fa50ce87f2c227b2a33e4ce61e", "patch": "@@ -262,6 +262,9 @@ pub fn run(mut krate: clean::Crate, dst: Path) -> io::IoResult<()> {\n     });\n     cache.stack.push(krate.name.clone());\n     krate = cache.fold_crate(krate);\n+\n+    let mut nodeid_to_pathid = HashMap::new();\n+    let mut pathid_to_nodeid = Vec::new();\n     {\n         let Cache { search_index: ref mut index,\n                     orphan_methods: ref meths, paths: ref mut paths, ..} = cache;\n@@ -283,17 +286,21 @@ pub fn run(mut krate: clean::Crate, dst: Path) -> io::IoResult<()> {\n             }\n         };\n \n-        // Prune the paths that do not appear in the index.\n-        let mut unseen: HashSet<ast::NodeId> = paths.keys().map(|&id| id).collect();\n+        // Reduce `NodeId` in paths into smaller sequential numbers,\n+        // and prune the paths that do not appear in the index.\n         for item in index.iter() {\n             match item.parent {\n-                Some(ref pid) => { unseen.remove(pid); }\n+                Some(nodeid) => {\n+                    if !nodeid_to_pathid.contains_key(&nodeid) {\n+                        let pathid = pathid_to_nodeid.len();\n+                        nodeid_to_pathid.insert(nodeid, pathid);\n+                        pathid_to_nodeid.push(nodeid);\n+                    }\n+                }\n                 None => {}\n             }\n         }\n-        for pid in unseen.iter() {\n-            paths.remove(pid);\n-        }\n+        assert_eq!(nodeid_to_pathid.len(), pathid_to_nodeid.len());\n     }\n \n     // Publish the search index\n@@ -308,23 +315,25 @@ pub fn run(mut krate: clean::Crate, dst: Path) -> io::IoResult<()> {\n                         item.ty, item.name, item.path,\n                         item.desc.to_json().to_str()));\n             match item.parent {\n-                Some(id) => {\n-                    try!(write!(&mut w, \",parent:'{}'\", id));\n+                Some(nodeid) => {\n+                    let pathid = *nodeid_to_pathid.find(&nodeid).unwrap();\n+                    try!(write!(&mut w, \",parent:{}\", pathid));\n                 }\n                 None => {}\n             }\n             try!(write!(&mut w, \"\\\\}\"));\n         }\n         try!(write!(&mut w, \"];\"));\n-        try!(write!(&mut w, \"allPaths['{}'] = \\\\{\", krate.name));\n-        for (i, (&id, &(ref fqp, short))) in cache.paths.iter().enumerate() {\n+        try!(write!(&mut w, \"allPaths['{}'] = [\", krate.name));\n+        for (i, &nodeid) in pathid_to_nodeid.iter().enumerate() {\n+            let &(ref fqp, short) = cache.paths.find(&nodeid).unwrap();\n             if i > 0 {\n                 try!(write!(&mut w, \",\"));\n             }\n-            try!(write!(&mut w, \"'{}':\\\\{type:'{}',name:'{}'\\\\}\",\n-                        id, short, *fqp.last().unwrap()));\n+            try!(write!(&mut w, \"\\\\{type:'{}',name:'{}'\\\\}\",\n+                        short, *fqp.last().unwrap()));\n         }\n-        try!(write!(&mut w, \"\\\\};\"));\n+        try!(write!(&mut w, \"];\"));\n \n         str::from_utf8(w.unwrap().as_slice()).unwrap().to_owned()\n     };"}]}