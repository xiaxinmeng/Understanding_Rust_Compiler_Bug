{"sha": "320f6f43f6f2d0a3460cf70ec23bf48665661286", "node_id": "C_kwDOAAsO6NoAKDMyMGY2ZjQzZjZmMmQwYTM0NjBjZjcwZWMyM2JmNDg2NjU2NjEyODY", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2023-05-25T16:42:12Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2023-05-25T17:04:14Z"}, "message": "Add inter-crate test.", "tree": {"sha": "63ce68badbf1bcccb382a8dc8d95c3a71fd8cea7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/63ce68badbf1bcccb382a8dc8d95c3a71fd8cea7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/320f6f43f6f2d0a3460cf70ec23bf48665661286", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/320f6f43f6f2d0a3460cf70ec23bf48665661286", "html_url": "https://github.com/rust-lang/rust/commit/320f6f43f6f2d0a3460cf70ec23bf48665661286", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/320f6f43f6f2d0a3460cf70ec23bf48665661286/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "18952929ff634866e94b763ae835c010c6e0db3e", "url": "https://api.github.com/repos/rust-lang/rust/commits/18952929ff634866e94b763ae835c010c6e0db3e", "html_url": "https://github.com/rust-lang/rust/commit/18952929ff634866e94b763ae835c010c6e0db3e"}], "stats": {"total": 115, "additions": 75, "deletions": 40}, "files": [{"sha": "3a4c0453daa7c6c2cf80c8650982642e50fe3863", "filename": "tests/ui/pattern/usefulness/empty-match.exhaustive_patterns.stderr", "status": "modified", "additions": 36, "deletions": 20, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/320f6f43f6f2d0a3460cf70ec23bf48665661286/tests%2Fui%2Fpattern%2Fusefulness%2Fempty-match.exhaustive_patterns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/320f6f43f6f2d0a3460cf70ec23bf48665661286/tests%2Fui%2Fpattern%2Fusefulness%2Fempty-match.exhaustive_patterns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fpattern%2Fusefulness%2Fempty-match.exhaustive_patterns.stderr?ref=320f6f43f6f2d0a3460cf70ec23bf48665661286", "patch": "@@ -28,20 +28,35 @@ error: unreachable pattern\n LL |         _ if false => {},\n    |         ^\n \n+error[E0005]: refutable pattern in local binding\n+  --> $DIR/empty-match.rs:55:9\n+   |\n+LL |     let None = x;\n+   |         ^^^^ pattern `Some(_)` not covered\n+   |\n+   = note: `let` bindings require an \"irrefutable pattern\", like a `struct` or an `enum` with only one variant\n+   = note: for more information, visit https://doc.rust-lang.org/book/ch18-02-refutability.html\n+   = note: pattern `Some(_)` is currently uninhabited, but this variant contains private fields which may become inhabited in the future\n+   = note: the matched value is of type `Option<SecretlyUninhabitedForeignStruct>`\n+help: you might want to use `if let` to ignore the variant that isn't matched\n+   |\n+LL |     if let None = x { todo!() };\n+   |     ++              +++++++++++\n+\n error: unreachable pattern\n-  --> $DIR/empty-match.rs:57:9\n+  --> $DIR/empty-match.rs:61:9\n    |\n LL |         _ => {},\n    |         ^\n \n error: unreachable pattern\n-  --> $DIR/empty-match.rs:60:9\n+  --> $DIR/empty-match.rs:64:9\n    |\n LL |         _ if false => {},\n    |         ^\n \n error[E0004]: non-exhaustive patterns: type `u8` is non-empty\n-  --> $DIR/empty-match.rs:78:20\n+  --> $DIR/empty-match.rs:82:20\n    |\n LL |     match_no_arms!(0u8);\n    |                    ^^^\n@@ -50,7 +65,7 @@ LL |     match_no_arms!(0u8);\n    = help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern\n \n error[E0004]: non-exhaustive patterns: type `NonEmptyStruct1` is non-empty\n-  --> $DIR/empty-match.rs:79:20\n+  --> $DIR/empty-match.rs:83:20\n    |\n LL |     match_no_arms!(NonEmptyStruct1);\n    |                    ^^^^^^^^^^^^^^^\n@@ -64,7 +79,7 @@ LL | struct NonEmptyStruct1;\n    = help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern\n \n error[E0004]: non-exhaustive patterns: type `NonEmptyStruct2` is non-empty\n-  --> $DIR/empty-match.rs:80:20\n+  --> $DIR/empty-match.rs:84:20\n    |\n LL |     match_no_arms!(NonEmptyStruct2(true));\n    |                    ^^^^^^^^^^^^^^^^^^^^^\n@@ -78,7 +93,7 @@ LL | struct NonEmptyStruct2(bool);\n    = help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern\n \n error[E0004]: non-exhaustive patterns: type `NonEmptyUnion1` is non-empty\n-  --> $DIR/empty-match.rs:81:20\n+  --> $DIR/empty-match.rs:85:20\n    |\n LL |     match_no_arms!((NonEmptyUnion1 { foo: () }));\n    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -92,7 +107,7 @@ LL | union NonEmptyUnion1 {\n    = help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern\n \n error[E0004]: non-exhaustive patterns: type `NonEmptyUnion2` is non-empty\n-  --> $DIR/empty-match.rs:82:20\n+  --> $DIR/empty-match.rs:86:20\n    |\n LL |     match_no_arms!((NonEmptyUnion2 { foo: () }));\n    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -106,7 +121,7 @@ LL | union NonEmptyUnion2 {\n    = help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern\n \n error[E0004]: non-exhaustive patterns: `NonEmptyEnum1::Foo(_)` not covered\n-  --> $DIR/empty-match.rs:83:20\n+  --> $DIR/empty-match.rs:87:20\n    |\n LL |     match_no_arms!(NonEmptyEnum1::Foo(true));\n    |                    ^^^^^^^^^^^^^^^^^^^^^^^^ pattern `NonEmptyEnum1::Foo(_)` not covered\n@@ -122,7 +137,7 @@ LL |     Foo(bool),\n    = help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern\n \n error[E0004]: non-exhaustive patterns: `NonEmptyEnum2::Foo(_)` and `NonEmptyEnum2::Bar` not covered\n-  --> $DIR/empty-match.rs:84:20\n+  --> $DIR/empty-match.rs:88:20\n    |\n LL |     match_no_arms!(NonEmptyEnum2::Foo(true));\n    |                    ^^^^^^^^^^^^^^^^^^^^^^^^ patterns `NonEmptyEnum2::Foo(_)` and `NonEmptyEnum2::Bar` not covered\n@@ -140,7 +155,7 @@ LL |     Bar,\n    = help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or multiple match arms\n \n error[E0004]: non-exhaustive patterns: `NonEmptyEnum5::V1`, `NonEmptyEnum5::V2`, `NonEmptyEnum5::V3` and 2 more not covered\n-  --> $DIR/empty-match.rs:85:20\n+  --> $DIR/empty-match.rs:89:20\n    |\n LL |     match_no_arms!(NonEmptyEnum5::V1);\n    |                    ^^^^^^^^^^^^^^^^^ patterns `NonEmptyEnum5::V1`, `NonEmptyEnum5::V2`, `NonEmptyEnum5::V3` and 2 more not covered\n@@ -154,7 +169,7 @@ LL | enum NonEmptyEnum5 {\n    = help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or multiple match arms\n \n error[E0004]: non-exhaustive patterns: `_` not covered\n-  --> $DIR/empty-match.rs:87:24\n+  --> $DIR/empty-match.rs:91:24\n    |\n LL |     match_guarded_arm!(0u8);\n    |                        ^^^ pattern `_` not covered\n@@ -167,7 +182,7 @@ LL +             _ => todo!()\n    |\n \n error[E0004]: non-exhaustive patterns: `NonEmptyStruct1` not covered\n-  --> $DIR/empty-match.rs:88:24\n+  --> $DIR/empty-match.rs:92:24\n    |\n LL |     match_guarded_arm!(NonEmptyStruct1);\n    |                        ^^^^^^^^^^^^^^^ pattern `NonEmptyStruct1` not covered\n@@ -185,7 +200,7 @@ LL +             NonEmptyStruct1 => todo!()\n    |\n \n error[E0004]: non-exhaustive patterns: `NonEmptyStruct2(_)` not covered\n-  --> $DIR/empty-match.rs:89:24\n+  --> $DIR/empty-match.rs:93:24\n    |\n LL |     match_guarded_arm!(NonEmptyStruct2(true));\n    |                        ^^^^^^^^^^^^^^^^^^^^^ pattern `NonEmptyStruct2(_)` not covered\n@@ -203,7 +218,7 @@ LL +             NonEmptyStruct2(_) => todo!()\n    |\n \n error[E0004]: non-exhaustive patterns: `NonEmptyUnion1 { .. }` not covered\n-  --> $DIR/empty-match.rs:90:24\n+  --> $DIR/empty-match.rs:94:24\n    |\n LL |     match_guarded_arm!((NonEmptyUnion1 { foo: () }));\n    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ pattern `NonEmptyUnion1 { .. }` not covered\n@@ -221,7 +236,7 @@ LL +             NonEmptyUnion1 { .. } => todo!()\n    |\n \n error[E0004]: non-exhaustive patterns: `NonEmptyUnion2 { .. }` not covered\n-  --> $DIR/empty-match.rs:91:24\n+  --> $DIR/empty-match.rs:95:24\n    |\n LL |     match_guarded_arm!((NonEmptyUnion2 { foo: () }));\n    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ pattern `NonEmptyUnion2 { .. }` not covered\n@@ -239,7 +254,7 @@ LL +             NonEmptyUnion2 { .. } => todo!()\n    |\n \n error[E0004]: non-exhaustive patterns: `NonEmptyEnum1::Foo(_)` not covered\n-  --> $DIR/empty-match.rs:92:24\n+  --> $DIR/empty-match.rs:96:24\n    |\n LL |     match_guarded_arm!(NonEmptyEnum1::Foo(true));\n    |                        ^^^^^^^^^^^^^^^^^^^^^^^^ pattern `NonEmptyEnum1::Foo(_)` not covered\n@@ -259,7 +274,7 @@ LL +             NonEmptyEnum1::Foo(_) => todo!()\n    |\n \n error[E0004]: non-exhaustive patterns: `NonEmptyEnum2::Foo(_)` and `NonEmptyEnum2::Bar` not covered\n-  --> $DIR/empty-match.rs:93:24\n+  --> $DIR/empty-match.rs:97:24\n    |\n LL |     match_guarded_arm!(NonEmptyEnum2::Foo(true));\n    |                        ^^^^^^^^^^^^^^^^^^^^^^^^ patterns `NonEmptyEnum2::Foo(_)` and `NonEmptyEnum2::Bar` not covered\n@@ -281,7 +296,7 @@ LL +             NonEmptyEnum2::Foo(_) | NonEmptyEnum2::Bar => todo!()\n    |\n \n error[E0004]: non-exhaustive patterns: `NonEmptyEnum5::V1`, `NonEmptyEnum5::V2`, `NonEmptyEnum5::V3` and 2 more not covered\n-  --> $DIR/empty-match.rs:94:24\n+  --> $DIR/empty-match.rs:98:24\n    |\n LL |     match_guarded_arm!(NonEmptyEnum5::V1);\n    |                        ^^^^^^^^^^^^^^^^^ patterns `NonEmptyEnum5::V1`, `NonEmptyEnum5::V2`, `NonEmptyEnum5::V3` and 2 more not covered\n@@ -298,6 +313,7 @@ LL ~             _ if false => {},\n LL +             _ => todo!()\n    |\n \n-error: aborting due to 22 previous errors\n+error: aborting due to 23 previous errors\n \n-For more information about this error, try `rustc --explain E0004`.\n+Some errors have detailed explanations: E0004, E0005.\n+For more information about an error, try `rustc --explain E0004`."}, {"sha": "0f1a45d12e030e28a2fb22f1e1d4153acd9aece4", "filename": "tests/ui/pattern/usefulness/empty-match.normal.stderr", "status": "modified", "additions": 35, "deletions": 20, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/320f6f43f6f2d0a3460cf70ec23bf48665661286/tests%2Fui%2Fpattern%2Fusefulness%2Fempty-match.normal.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/320f6f43f6f2d0a3460cf70ec23bf48665661286/tests%2Fui%2Fpattern%2Fusefulness%2Fempty-match.normal.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fpattern%2Fusefulness%2Fempty-match.normal.stderr?ref=320f6f43f6f2d0a3460cf70ec23bf48665661286", "patch": "@@ -28,20 +28,34 @@ error: unreachable pattern\n LL |         _ if false => {},\n    |         ^\n \n+error[E0005]: refutable pattern in local binding\n+  --> $DIR/empty-match.rs:55:9\n+   |\n+LL |     let None = x;\n+   |         ^^^^ pattern `Some(_)` not covered\n+   |\n+   = note: `let` bindings require an \"irrefutable pattern\", like a `struct` or an `enum` with only one variant\n+   = note: for more information, visit https://doc.rust-lang.org/book/ch18-02-refutability.html\n+   = note: the matched value is of type `Option<SecretlyUninhabitedForeignStruct>`\n+help: you might want to use `if let` to ignore the variant that isn't matched\n+   |\n+LL |     if let None = x { todo!() };\n+   |     ++              +++++++++++\n+\n error: unreachable pattern\n-  --> $DIR/empty-match.rs:57:9\n+  --> $DIR/empty-match.rs:61:9\n    |\n LL |         _ => {},\n    |         ^\n \n error: unreachable pattern\n-  --> $DIR/empty-match.rs:60:9\n+  --> $DIR/empty-match.rs:64:9\n    |\n LL |         _ if false => {},\n    |         ^\n \n error[E0004]: non-exhaustive patterns: type `u8` is non-empty\n-  --> $DIR/empty-match.rs:78:20\n+  --> $DIR/empty-match.rs:82:20\n    |\n LL |     match_no_arms!(0u8);\n    |                    ^^^\n@@ -50,7 +64,7 @@ LL |     match_no_arms!(0u8);\n    = help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern\n \n error[E0004]: non-exhaustive patterns: type `NonEmptyStruct1` is non-empty\n-  --> $DIR/empty-match.rs:79:20\n+  --> $DIR/empty-match.rs:83:20\n    |\n LL |     match_no_arms!(NonEmptyStruct1);\n    |                    ^^^^^^^^^^^^^^^\n@@ -64,7 +78,7 @@ LL | struct NonEmptyStruct1;\n    = help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern\n \n error[E0004]: non-exhaustive patterns: type `NonEmptyStruct2` is non-empty\n-  --> $DIR/empty-match.rs:80:20\n+  --> $DIR/empty-match.rs:84:20\n    |\n LL |     match_no_arms!(NonEmptyStruct2(true));\n    |                    ^^^^^^^^^^^^^^^^^^^^^\n@@ -78,7 +92,7 @@ LL | struct NonEmptyStruct2(bool);\n    = help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern\n \n error[E0004]: non-exhaustive patterns: type `NonEmptyUnion1` is non-empty\n-  --> $DIR/empty-match.rs:81:20\n+  --> $DIR/empty-match.rs:85:20\n    |\n LL |     match_no_arms!((NonEmptyUnion1 { foo: () }));\n    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -92,7 +106,7 @@ LL | union NonEmptyUnion1 {\n    = help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern\n \n error[E0004]: non-exhaustive patterns: type `NonEmptyUnion2` is non-empty\n-  --> $DIR/empty-match.rs:82:20\n+  --> $DIR/empty-match.rs:86:20\n    |\n LL |     match_no_arms!((NonEmptyUnion2 { foo: () }));\n    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -106,7 +120,7 @@ LL | union NonEmptyUnion2 {\n    = help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern\n \n error[E0004]: non-exhaustive patterns: `NonEmptyEnum1::Foo(_)` not covered\n-  --> $DIR/empty-match.rs:83:20\n+  --> $DIR/empty-match.rs:87:20\n    |\n LL |     match_no_arms!(NonEmptyEnum1::Foo(true));\n    |                    ^^^^^^^^^^^^^^^^^^^^^^^^ pattern `NonEmptyEnum1::Foo(_)` not covered\n@@ -122,7 +136,7 @@ LL |     Foo(bool),\n    = help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern\n \n error[E0004]: non-exhaustive patterns: `NonEmptyEnum2::Foo(_)` and `NonEmptyEnum2::Bar` not covered\n-  --> $DIR/empty-match.rs:84:20\n+  --> $DIR/empty-match.rs:88:20\n    |\n LL |     match_no_arms!(NonEmptyEnum2::Foo(true));\n    |                    ^^^^^^^^^^^^^^^^^^^^^^^^ patterns `NonEmptyEnum2::Foo(_)` and `NonEmptyEnum2::Bar` not covered\n@@ -140,7 +154,7 @@ LL |     Bar,\n    = help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or multiple match arms\n \n error[E0004]: non-exhaustive patterns: `NonEmptyEnum5::V1`, `NonEmptyEnum5::V2`, `NonEmptyEnum5::V3` and 2 more not covered\n-  --> $DIR/empty-match.rs:85:20\n+  --> $DIR/empty-match.rs:89:20\n    |\n LL |     match_no_arms!(NonEmptyEnum5::V1);\n    |                    ^^^^^^^^^^^^^^^^^ patterns `NonEmptyEnum5::V1`, `NonEmptyEnum5::V2`, `NonEmptyEnum5::V3` and 2 more not covered\n@@ -154,7 +168,7 @@ LL | enum NonEmptyEnum5 {\n    = help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or multiple match arms\n \n error[E0004]: non-exhaustive patterns: `_` not covered\n-  --> $DIR/empty-match.rs:87:24\n+  --> $DIR/empty-match.rs:91:24\n    |\n LL |     match_guarded_arm!(0u8);\n    |                        ^^^ pattern `_` not covered\n@@ -167,7 +181,7 @@ LL +             _ => todo!()\n    |\n \n error[E0004]: non-exhaustive patterns: `NonEmptyStruct1` not covered\n-  --> $DIR/empty-match.rs:88:24\n+  --> $DIR/empty-match.rs:92:24\n    |\n LL |     match_guarded_arm!(NonEmptyStruct1);\n    |                        ^^^^^^^^^^^^^^^ pattern `NonEmptyStruct1` not covered\n@@ -185,7 +199,7 @@ LL +             NonEmptyStruct1 => todo!()\n    |\n \n error[E0004]: non-exhaustive patterns: `NonEmptyStruct2(_)` not covered\n-  --> $DIR/empty-match.rs:89:24\n+  --> $DIR/empty-match.rs:93:24\n    |\n LL |     match_guarded_arm!(NonEmptyStruct2(true));\n    |                        ^^^^^^^^^^^^^^^^^^^^^ pattern `NonEmptyStruct2(_)` not covered\n@@ -203,7 +217,7 @@ LL +             NonEmptyStruct2(_) => todo!()\n    |\n \n error[E0004]: non-exhaustive patterns: `NonEmptyUnion1 { .. }` not covered\n-  --> $DIR/empty-match.rs:90:24\n+  --> $DIR/empty-match.rs:94:24\n    |\n LL |     match_guarded_arm!((NonEmptyUnion1 { foo: () }));\n    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ pattern `NonEmptyUnion1 { .. }` not covered\n@@ -221,7 +235,7 @@ LL +             NonEmptyUnion1 { .. } => todo!()\n    |\n \n error[E0004]: non-exhaustive patterns: `NonEmptyUnion2 { .. }` not covered\n-  --> $DIR/empty-match.rs:91:24\n+  --> $DIR/empty-match.rs:95:24\n    |\n LL |     match_guarded_arm!((NonEmptyUnion2 { foo: () }));\n    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ pattern `NonEmptyUnion2 { .. }` not covered\n@@ -239,7 +253,7 @@ LL +             NonEmptyUnion2 { .. } => todo!()\n    |\n \n error[E0004]: non-exhaustive patterns: `NonEmptyEnum1::Foo(_)` not covered\n-  --> $DIR/empty-match.rs:92:24\n+  --> $DIR/empty-match.rs:96:24\n    |\n LL |     match_guarded_arm!(NonEmptyEnum1::Foo(true));\n    |                        ^^^^^^^^^^^^^^^^^^^^^^^^ pattern `NonEmptyEnum1::Foo(_)` not covered\n@@ -259,7 +273,7 @@ LL +             NonEmptyEnum1::Foo(_) => todo!()\n    |\n \n error[E0004]: non-exhaustive patterns: `NonEmptyEnum2::Foo(_)` and `NonEmptyEnum2::Bar` not covered\n-  --> $DIR/empty-match.rs:93:24\n+  --> $DIR/empty-match.rs:97:24\n    |\n LL |     match_guarded_arm!(NonEmptyEnum2::Foo(true));\n    |                        ^^^^^^^^^^^^^^^^^^^^^^^^ patterns `NonEmptyEnum2::Foo(_)` and `NonEmptyEnum2::Bar` not covered\n@@ -281,7 +295,7 @@ LL +             NonEmptyEnum2::Foo(_) | NonEmptyEnum2::Bar => todo!()\n    |\n \n error[E0004]: non-exhaustive patterns: `NonEmptyEnum5::V1`, `NonEmptyEnum5::V2`, `NonEmptyEnum5::V3` and 2 more not covered\n-  --> $DIR/empty-match.rs:94:24\n+  --> $DIR/empty-match.rs:98:24\n    |\n LL |     match_guarded_arm!(NonEmptyEnum5::V1);\n    |                        ^^^^^^^^^^^^^^^^^ patterns `NonEmptyEnum5::V1`, `NonEmptyEnum5::V2`, `NonEmptyEnum5::V3` and 2 more not covered\n@@ -298,6 +312,7 @@ LL ~             _ if false => {},\n LL +             _ => todo!()\n    |\n \n-error: aborting due to 22 previous errors\n+error: aborting due to 23 previous errors\n \n-For more information about this error, try `rustc --explain E0004`.\n+Some errors have detailed explanations: E0004, E0005.\n+For more information about an error, try `rustc --explain E0004`."}, {"sha": "1b124f968eb7f066598487f118dcf460e2fef608", "filename": "tests/ui/pattern/usefulness/empty-match.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/320f6f43f6f2d0a3460cf70ec23bf48665661286/tests%2Fui%2Fpattern%2Fusefulness%2Fempty-match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/320f6f43f6f2d0a3460cf70ec23bf48665661286/tests%2Fui%2Fpattern%2Fusefulness%2Fempty-match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fpattern%2Fusefulness%2Fempty-match.rs?ref=320f6f43f6f2d0a3460cf70ec23bf48665661286", "patch": "@@ -51,6 +51,10 @@ fn empty_foreign_enum(x: empty::EmptyForeignEnum) {\n     }\n }\n \n+fn empty_foreign_enum_private(x: Option<empty::SecretlyUninhabitedForeignStruct>) {\n+    let None = x; //~ ERROR refutable pattern in local binding\n+}\n+\n fn never(x: !) {\n     match x {} // ok\n     match x {"}]}