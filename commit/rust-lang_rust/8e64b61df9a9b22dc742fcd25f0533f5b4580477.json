{"sha": "8e64b61df9a9b22dc742fcd25f0533f5b4580477", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhlNjRiNjFkZjlhOWIyMmRjNzQyZmNkMjVmMDUzM2Y1YjQ1ODA0Nzc=", "commit": {"author": {"name": "Leah Hanson", "email": "astrieanna@gmail.com", "date": "2013-04-13T12:11:39Z"}, "committer": {"name": "Leah Hanson", "email": "astrieanna@gmail.com", "date": "2013-04-13T12:11:39Z"}, "message": "move rustdoc comments so that they attach to the functions rather than the impl blocks.", "tree": {"sha": "2e43d061c0849be80d816a2120add3db862eaf1e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2e43d061c0849be80d816a2120add3db862eaf1e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8e64b61df9a9b22dc742fcd25f0533f5b4580477", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8e64b61df9a9b22dc742fcd25f0533f5b4580477", "html_url": "https://github.com/rust-lang/rust/commit/8e64b61df9a9b22dc742fcd25f0533f5b4580477", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8e64b61df9a9b22dc742fcd25f0533f5b4580477/comments", "author": {"login": "astrieanna", "id": 1205394, "node_id": "MDQ6VXNlcjEyMDUzOTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1205394?v=4", "gravatar_id": "", "url": "https://api.github.com/users/astrieanna", "html_url": "https://github.com/astrieanna", "followers_url": "https://api.github.com/users/astrieanna/followers", "following_url": "https://api.github.com/users/astrieanna/following{/other_user}", "gists_url": "https://api.github.com/users/astrieanna/gists{/gist_id}", "starred_url": "https://api.github.com/users/astrieanna/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/astrieanna/subscriptions", "organizations_url": "https://api.github.com/users/astrieanna/orgs", "repos_url": "https://api.github.com/users/astrieanna/repos", "events_url": "https://api.github.com/users/astrieanna/events{/privacy}", "received_events_url": "https://api.github.com/users/astrieanna/received_events", "type": "User", "site_admin": false}, "committer": {"login": "astrieanna", "id": 1205394, "node_id": "MDQ6VXNlcjEyMDUzOTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1205394?v=4", "gravatar_id": "", "url": "https://api.github.com/users/astrieanna", "html_url": "https://github.com/astrieanna", "followers_url": "https://api.github.com/users/astrieanna/followers", "following_url": "https://api.github.com/users/astrieanna/following{/other_user}", "gists_url": "https://api.github.com/users/astrieanna/gists{/gist_id}", "starred_url": "https://api.github.com/users/astrieanna/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/astrieanna/subscriptions", "organizations_url": "https://api.github.com/users/astrieanna/orgs", "repos_url": "https://api.github.com/users/astrieanna/repos", "events_url": "https://api.github.com/users/astrieanna/events{/privacy}", "received_events_url": "https://api.github.com/users/astrieanna/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "27a0269501637d7fa27356caa9c13ab66fe5c8b0", "url": "https://api.github.com/repos/rust-lang/rust/commits/27a0269501637d7fa27356caa9c13ab66fe5c8b0", "html_url": "https://github.com/rust-lang/rust/commit/27a0269501637d7fa27356caa9c13ab66fe5c8b0"}], "stats": {"total": 158, "additions": 79, "deletions": 79}, "files": [{"sha": "5b1e82ce1f00e74b2e7934f44ad6208cfdf426c3", "filename": "src/libstd/base64.rs", "status": "modified", "additions": 79, "deletions": 79, "changes": 158, "blob_url": "https://github.com/rust-lang/rust/blob/8e64b61df9a9b22dc742fcd25f0533f5b4580477/src%2Flibstd%2Fbase64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e64b61df9a9b22dc742fcd25f0533f5b4580477/src%2Flibstd%2Fbase64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fbase64.rs?ref=8e64b61df9a9b22dc742fcd25f0533f5b4580477", "patch": "@@ -26,22 +26,22 @@ static CHARS: [char, ..64] = [\n     '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '+', '/'\n ];\n \n-/**\n- * Turn a vector of `u8` bytes into a string representing them in base64.\n- *\n- * *Example*:\n- *\n- * ~~~~\n- * extern mod std;\n- * use std::base64::ToBase64;\n- *\n- * fn main () {\n- *   let str = [52,32].to_base64();\n- *   println(fmt!(\"%s\", str));\n- * }\n- * ~~~~\n- */\n impl<'self> ToBase64 for &'self [u8] {\n+    /**\n+     * Turn a vector of `u8` bytes into a string representing them in base64.\n+     *\n+     * *Example*:\n+     *\n+     * ~~~~\n+     * extern mod std;\n+     * use std::base64::ToBase64;\n+     *\n+     * fn main () {\n+     *   let str = [52,32].to_base64();\n+     *   println(fmt!(\"%s\", str));\n+     * }\n+     * ~~~~\n+     */\n     fn to_base64(&self) -> ~str {\n         let mut s = ~\"\";\n         unsafe {\n@@ -90,24 +90,24 @@ impl<'self> ToBase64 for &'self [u8] {\n     }\n }\n \n-/**\n- * Convert any string (literal, `@`, `&`, `~`) to base64 encoding.\n- *\n- *\n- * *Example*:\n- *\n- * ~~~~\n- * extern mod std;\n- * use std::base64::ToBase64;\n- *\n- * fn main () {\n- *   let str = \"Hello, World\".to_base64();\n- *   println(fmt!(\"%s\",str));\n- * }\n- * ~~~~\n- *\n- */\n impl<'self> ToBase64 for &'self str {\n+    /**\n+     * Convert any string (literal, `@`, `&`, `~`) to base64 encoding.\n+     *\n+     *\n+     * *Example*:\n+     *\n+     * ~~~~\n+     * extern mod std;\n+     * use std::base64::ToBase64;\n+     *\n+     * fn main () {\n+     *   let str = \"Hello, World\".to_base64();\n+     *   println(fmt!(\"%s\",str));\n+     * }\n+     * ~~~~\n+     *\n+     */\n     fn to_base64(&self) -> ~str {\n         str::to_bytes(*self).to_base64()\n     }\n@@ -117,26 +117,26 @@ pub trait FromBase64 {\n     fn from_base64(&self) -> ~[u8];\n }\n \n-/**\n- * Turn a vector of `u8`s representing characters\n- * encoding byte values in base64 into the vector of `u8` byte values.\n- *\n- * *Example*:\n- *\n- * ~~~~\n- * extern mod std;\n- * use std::base64::ToBase64;\n- * use std::base64::FromBase64;\n- *\n- * fn main () {\n- *   let str = [52,32].to_base64();\n- *   println(fmt!(\"%s\", str));\n- *   let bytes = str.from_base64();\n- *   println(fmt!(\"%?\",bytes));\n- * }\n- * ~~~~\n- */\n impl FromBase64 for ~[u8] {\n+    /**\n+     * Turn a vector of `u8`s representing characters\n+     * encoding byte values in base64 into the vector of `u8` byte values.\n+     *\n+     * *Example*:\n+     *\n+     * ~~~~\n+     * extern mod std;\n+     * use std::base64::ToBase64;\n+     * use std::base64::FromBase64;\n+     *\n+     * fn main () {\n+     *   let str = [52,32].to_base64();\n+     *   println(fmt!(\"%s\", str));\n+     *   let bytes = str.from_base64();\n+     *   println(fmt!(\"%?\",bytes));\n+     * }\n+     * ~~~~\n+     */\n     fn from_base64(&self) -> ~[u8] {\n         if self.len() % 4u != 0u { fail!(~\"invalid base64 length\"); }\n \n@@ -198,35 +198,35 @@ impl FromBase64 for ~[u8] {\n     }\n }\n \n-/**\n- * Convert any string (literal, `@`, `&`, `~`)\n- * that contains a base64 encoded value, to the byte values it encodes.\n- *\n- * You can use the `from_bytes` function in `core::str`\n- * to turn a `[u8]` into a string with characters corresponding to those values.\n- *\n- * *Example*:\n- *\n- * This is an example of going from a string literal to the base64 encoding\n- * and back to the same string.\n- *\n- * ~~~~\n- * extern mod std;\n- * use std::base64::ToBase64;\n- * use std::base64::FromBase64;\n- * use core::str;\n- *\n- * fn main () {\n- *   let hello_str = \"Hello, World\".to_base64();\n- *   println(fmt!(\"%s\",hello_str));\n- *   let bytes = hello_str.from_base64();\n- *   println(fmt!(\"%?\",bytes));\n- *   let result_str = str::from_bytes(bytes);\n- *   println(fmt!(\"%s\",result_str));\n- * }\n- * ~~~~\n- */\n impl FromBase64 for ~str {\n+    /**\n+     * Convert any string (literal, `@`, `&`, `~`)\n+     * that contains a base64 encoded value, to the byte values it encodes.\n+     *\n+     * You can use the `from_bytes` function in `core::str`\n+     * to turn a `[u8]` into a string with characters corresponding to those values.\n+     *\n+     * *Example*:\n+     *\n+     * This is an example of going from a string literal to the base64 encoding\n+     * and back to the same string.\n+     *\n+     * ~~~~\n+     * extern mod std;\n+     * use std::base64::ToBase64;\n+     * use std::base64::FromBase64;\n+     * use core::str;\n+     *\n+     * fn main () {\n+     *   let hello_str = \"Hello, World\".to_base64();\n+     *   println(fmt!(\"%s\",hello_str));\n+     *   let bytes = hello_str.from_base64();\n+     *   println(fmt!(\"%?\",bytes));\n+     *   let result_str = str::from_bytes(bytes);\n+     *   println(fmt!(\"%s\",result_str));\n+     * }\n+     * ~~~~\n+     */\n     fn from_base64(&self) -> ~[u8] {\n         str::to_bytes(*self).from_base64()\n     }"}]}