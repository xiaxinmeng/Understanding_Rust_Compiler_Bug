{"sha": "b8141049da7507bdbf2b037847945e5bb299ccad", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI4MTQxMDQ5ZGE3NTA3YmRiZjJiMDM3ODQ3OTQ1ZTViYjI5OWNjYWQ=", "commit": {"author": {"name": "Matt Horn", "email": "mathphreak@gmail.com", "date": "2016-07-06T22:59:32Z"}, "committer": {"name": "Matt Horn", "email": "mathphreak@gmail.com", "date": "2016-07-06T22:59:32Z"}, "message": "Add IpAddr common methods", "tree": {"sha": "b8e7ad015b5e540f0b5afbb1a6fd2bb95f5b91d7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b8e7ad015b5e540f0b5afbb1a6fd2bb95f5b91d7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b8141049da7507bdbf2b037847945e5bb299ccad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b8141049da7507bdbf2b037847945e5bb299ccad", "html_url": "https://github.com/rust-lang/rust/commit/b8141049da7507bdbf2b037847945e5bb299ccad", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b8141049da7507bdbf2b037847945e5bb299ccad/comments", "author": {"login": "mathphreak", "id": 360194, "node_id": "MDQ6VXNlcjM2MDE5NA==", "avatar_url": "https://avatars.githubusercontent.com/u/360194?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mathphreak", "html_url": "https://github.com/mathphreak", "followers_url": "https://api.github.com/users/mathphreak/followers", "following_url": "https://api.github.com/users/mathphreak/following{/other_user}", "gists_url": "https://api.github.com/users/mathphreak/gists{/gist_id}", "starred_url": "https://api.github.com/users/mathphreak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mathphreak/subscriptions", "organizations_url": "https://api.github.com/users/mathphreak/orgs", "repos_url": "https://api.github.com/users/mathphreak/repos", "events_url": "https://api.github.com/users/mathphreak/events{/privacy}", "received_events_url": "https://api.github.com/users/mathphreak/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mathphreak", "id": 360194, "node_id": "MDQ6VXNlcjM2MDE5NA==", "avatar_url": "https://avatars.githubusercontent.com/u/360194?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mathphreak", "html_url": "https://github.com/mathphreak", "followers_url": "https://api.github.com/users/mathphreak/followers", "following_url": "https://api.github.com/users/mathphreak/following{/other_user}", "gists_url": "https://api.github.com/users/mathphreak/gists{/gist_id}", "starred_url": "https://api.github.com/users/mathphreak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mathphreak/subscriptions", "organizations_url": "https://api.github.com/users/mathphreak/orgs", "repos_url": "https://api.github.com/users/mathphreak/repos", "events_url": "https://api.github.com/users/mathphreak/events{/privacy}", "received_events_url": "https://api.github.com/users/mathphreak/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4114b68eba6914b46202a2108f34f7653e393851", "url": "https://api.github.com/repos/rust-lang/rust/commits/4114b68eba6914b46202a2108f34f7653e393851", "html_url": "https://github.com/rust-lang/rust/commit/4114b68eba6914b46202a2108f34f7653e393851"}], "stats": {"total": 103, "additions": 103, "deletions": 0}, "files": [{"sha": "b9a57579b5cbdd291af0f81f60e34df6db5a4c52", "filename": "src/libstd/net/ip.rs", "status": "modified", "additions": 103, "deletions": 0, "changes": 103, "blob_url": "https://github.com/rust-lang/rust/blob/b8141049da7507bdbf2b037847945e5bb299ccad/src%2Flibstd%2Fnet%2Fip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8141049da7507bdbf2b037847945e5bb299ccad/src%2Flibstd%2Fnet%2Fip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Fip.rs?ref=b8141049da7507bdbf2b037847945e5bb299ccad", "patch": "@@ -59,6 +59,48 @@ pub enum Ipv6MulticastScope {\n     Global\n }\n \n+impl IpAddr {\n+    /// Returns true for the special 'unspecified' address (0.0.0.0 in IPv4, :: in IPv6).\n+    pub fn is_unspecified(&self) -> bool {\n+        match *self {\n+            IpAddr::V4(ref a) => a.is_unspecified(),\n+            IpAddr::V6(ref a) => a.is_unspecified(),\n+        }\n+    }\n+\n+    /// Returns true if this is a loopback address (127.0.0.0/8 in IPv4, ::1 in IPv6).\n+    pub fn is_loopback(&self) -> bool {\n+        match *self {\n+            IpAddr::V4(ref a) => a.is_loopback(),\n+            IpAddr::V6(ref a) => a.is_loopback(),\n+        }\n+    }\n+\n+    /// Returns true if the address appears to be globally routable.\n+    pub fn is_global(&self) -> bool {\n+        match *self {\n+            IpAddr::V4(ref a) => a.is_global(),\n+            IpAddr::V6(ref a) => a.is_global(),\n+        }\n+    }\n+\n+    /// Returns true if this is a multicast address (224.0.0.0/4 in IPv4, ff00::/8 in IPv6)\n+    pub fn is_multicast(&self) -> bool {\n+        match *self {\n+            IpAddr::V4(ref a) => a.is_multicast(),\n+            IpAddr::V6(ref a) => a.is_multicast(),\n+        }\n+    }\n+\n+    /// Returns true if this address is in a range designated for documentation.\n+    pub fn is_documentation(&self) -> bool {\n+        match *self {\n+            IpAddr::V4(ref a) => a.is_documentation(),\n+            IpAddr::V6(ref a) => a.is_documentation(),\n+        }\n+    }\n+}\n+\n impl Ipv4Addr {\n     /// Creates a new IPv4 address from four eight-bit octets.\n     ///\n@@ -756,6 +798,67 @@ mod tests {\n                    None);\n     }\n \n+    #[test]\n+    fn ip_properties() {\n+        fn check4(octets: &[u8; 4], unspec: bool, loopback: bool,\n+                  global: bool, multicast: bool, documentation: bool) {\n+            let ip = IpAddr::V4(Ipv4Addr::new(octets[0], octets[1], octets[2], octets[3]));\n+            assert_eq!(ip.is_unspecified(), unspec);\n+            assert_eq!(ip.is_loopback(), loopback);\n+            assert_eq!(ip.is_global(), global);\n+            assert_eq!(ip.is_multicast(), multicast);\n+            assert_eq!(ip.is_documentation(), documentation);\n+        }\n+\n+        fn check6(str_addr: &str, unspec: bool, loopback: bool,\n+                  global: bool, u_doc: bool, mcast: bool) {\n+            let ip = IpAddr::V6(str_addr.parse().unwrap());\n+            assert_eq!(ip.is_unspecified(), unspec);\n+            assert_eq!(ip.is_loopback(), loopback);\n+            assert_eq!(ip.is_global(), global);\n+            assert_eq!(ip.is_documentation(), u_doc);\n+            assert_eq!(ip.is_multicast(), mcast);\n+        }\n+\n+        //     address                unspec loopbk global multicast doc\n+        check4(&[0, 0, 0, 0],         true,  false, false,  false,   false);\n+        check4(&[0, 0, 0, 1],         false, false, true,   false,   false);\n+        check4(&[0, 1, 0, 0],         false, false, true,   false,   false);\n+        check4(&[10, 9, 8, 7],        false, false, false,  false,   false);\n+        check4(&[127, 1, 2, 3],       false, true,  false,  false,   false);\n+        check4(&[172, 31, 254, 253],  false, false, false,  false,   false);\n+        check4(&[169, 254, 253, 242], false, false, false,  false,   false);\n+        check4(&[192, 0, 2, 183],     false, false, false,  false,   true);\n+        check4(&[192, 1, 2, 183],     false, false, true,   false,   false);\n+        check4(&[192, 168, 254, 253], false, false, false,  false,   false);\n+        check4(&[198, 51, 100, 0],    false, false, false,  false,   true);\n+        check4(&[203, 0, 113, 0],     false, false, false,  false,   true);\n+        check4(&[203, 2, 113, 0],     false, false, true,   false,   false);\n+        check4(&[224, 0, 0, 0],       false, false, true,   true,    false);\n+        check4(&[239, 255, 255, 255], false, false, true,   true,    false);\n+        check4(&[255, 255, 255, 255], false, false, false,  false,   false);\n+\n+        //     address                            unspec loopbk global doc    mcast\n+        check6(\"::\",                              true,  false, false, false, false);\n+        check6(\"::1\",                             false, true,  false, false, false);\n+        check6(\"::0.0.0.2\",                       false, false, true,  false, false);\n+        check6(\"1::\",                             false, false, true,  false, false);\n+        check6(\"fc00::\",                          false, false, false, false, false);\n+        check6(\"fdff:ffff::\",                     false, false, false, false, false);\n+        check6(\"fe80:ffff::\",                     false, false, false, false, false);\n+        check6(\"febf:ffff::\",                     false, false, false, false, false);\n+        check6(\"fec0::\",                          false, false, false, false, false);\n+        check6(\"ff01::\",                          false, false, false, false, true);\n+        check6(\"ff02::\",                          false, false, false, false, true);\n+        check6(\"ff03::\",                          false, false, false, false, true);\n+        check6(\"ff04::\",                          false, false, false, false, true);\n+        check6(\"ff05::\",                          false, false, false, false, true);\n+        check6(\"ff08::\",                          false, false, false, false, true);\n+        check6(\"ff0e::\",                          false, false, true,  false, true);\n+        check6(\"2001:db8:85a3::8a2e:370:7334\",    false, false, false, true,  false);\n+        check6(\"102:304:506:708:90a:b0c:d0e:f10\", false, false, true,  false, false);\n+    }\n+\n     #[test]\n     fn ipv4_properties() {\n         fn check(octets: &[u8; 4], unspec: bool, loopback: bool,"}]}