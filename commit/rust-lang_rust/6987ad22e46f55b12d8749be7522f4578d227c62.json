{"sha": "6987ad22e46f55b12d8749be7522f4578d227c62", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY5ODdhZDIyZTQ2ZjU1YjEyZDg3NDliZTc1MjJmNDU3OGQyMjdjNjI=", "commit": {"author": {"name": "Aaron Turon", "email": "aturon@mozilla.com", "date": "2014-11-15T00:30:16Z"}, "committer": {"name": "Aaron Turon", "email": "aturon@mozilla.com", "date": "2014-11-21T01:19:24Z"}, "message": "Make most of std::rt private\n\nPreviously, the entire runtime API surface was publicly exposed, but\nthat is neither necessary nor desirable. This commit hides most of the\nmodule, using librustrt directly as needed. The arrangement will need to\nbe revisited when rustrt is pulled into std.\n\n[breaking-change]", "tree": {"sha": "c2b93fc9bb8be2e8dc07c4eb9a964ba25f04ec21", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c2b93fc9bb8be2e8dc07c4eb9a964ba25f04ec21"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6987ad22e46f55b12d8749be7522f4578d227c62", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6987ad22e46f55b12d8749be7522f4578d227c62", "html_url": "https://github.com/rust-lang/rust/commit/6987ad22e46f55b12d8749be7522f4578d227c62", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6987ad22e46f55b12d8749be7522f4578d227c62/comments", "author": {"login": "aturon", "id": 709807, "node_id": "MDQ6VXNlcjcwOTgwNw==", "avatar_url": "https://avatars.githubusercontent.com/u/709807?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aturon", "html_url": "https://github.com/aturon", "followers_url": "https://api.github.com/users/aturon/followers", "following_url": "https://api.github.com/users/aturon/following{/other_user}", "gists_url": "https://api.github.com/users/aturon/gists{/gist_id}", "starred_url": "https://api.github.com/users/aturon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aturon/subscriptions", "organizations_url": "https://api.github.com/users/aturon/orgs", "repos_url": "https://api.github.com/users/aturon/repos", "events_url": "https://api.github.com/users/aturon/events{/privacy}", "received_events_url": "https://api.github.com/users/aturon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aturon", "id": 709807, "node_id": "MDQ6VXNlcjcwOTgwNw==", "avatar_url": "https://avatars.githubusercontent.com/u/709807?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aturon", "html_url": "https://github.com/aturon", "followers_url": "https://api.github.com/users/aturon/followers", "following_url": "https://api.github.com/users/aturon/following{/other_user}", "gists_url": "https://api.github.com/users/aturon/gists{/gist_id}", "starred_url": "https://api.github.com/users/aturon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aturon/subscriptions", "organizations_url": "https://api.github.com/users/aturon/orgs", "repos_url": "https://api.github.com/users/aturon/repos", "events_url": "https://api.github.com/users/aturon/events{/privacy}", "received_events_url": "https://api.github.com/users/aturon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "40c78ab037c70d61eb4f8c95c7a4fec8f098644b", "url": "https://api.github.com/repos/rust-lang/rust/commits/40c78ab037c70d61eb4f8c95c7a4fec8f098644b", "html_url": "https://github.com/rust-lang/rust/commit/40c78ab037c70d61eb4f8c95c7a4fec8f098644b"}], "stats": {"total": 145, "additions": 64, "deletions": 81}, "files": [{"sha": "c3a248ce3185b318d29a4d7c9587364f055c3fe7", "filename": "src/libcollections/slice.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6987ad22e46f55b12d8749be7522f4578d227c62/src%2Flibcollections%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6987ad22e46f55b12d8749be7522f4578d227c62/src%2Flibcollections%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fslice.rs?ref=6987ad22e46f55b12d8749be7522f4578d227c62", "patch": "@@ -666,6 +666,8 @@ pub mod raw {\n \n #[cfg(test)]\n mod tests {\n+    extern crate rustrt;\n+\n     use std::cell::Cell;\n     use std::default::Default;\n     use std::mem;\n@@ -949,9 +951,9 @@ mod tests {\n     #[test]\n     fn test_swap_remove_noncopyable() {\n         // Tests that we don't accidentally run destructors twice.\n-        let mut v = vec![rt::exclusive::Exclusive::new(()),\n-                         rt::exclusive::Exclusive::new(()),\n-                         rt::exclusive::Exclusive::new(())];\n+        let mut v = vec![rustrt::exclusive::Exclusive::new(()),\n+                         rustrt::exclusive::Exclusive::new(()),\n+                         rustrt::exclusive::Exclusive::new(())];\n         let mut _e = v.swap_remove(0);\n         assert_eq!(v.len(), 2);\n         _e = v.swap_remove(1);"}, {"sha": "93c5508e0426f4f521902367717ec71981a14645", "filename": "src/librustrt/local.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6987ad22e46f55b12d8749be7522f4578d227c62/src%2Flibrustrt%2Flocal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6987ad22e46f55b12d8749be7522f4578d227c62/src%2Flibrustrt%2Flocal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustrt%2Flocal.rs?ref=6987ad22e46f55b12d8749be7522f4578d227c62", "patch": "@@ -52,8 +52,10 @@ impl Local<local_ptr::Borrowed<Task>> for Task {\n \n #[cfg(test)]\n mod test {\n+    extern crate rustrt;\n+\n     use std::prelude::*;\n-    use std::rt::thread::Thread;\n+    use rustrt::thread::Thread;\n     use super::*;\n     use task::Task;\n "}, {"sha": "11f601593632920bb72a5e3432a6277facbb1037", "filename": "src/librustrt/mutex.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6987ad22e46f55b12d8749be7522f4578d227c62/src%2Flibrustrt%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6987ad22e46f55b12d8749be7522f4578d227c62/src%2Flibrustrt%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustrt%2Fmutex.rs?ref=6987ad22e46f55b12d8749be7522f4578d227c62", "patch": "@@ -33,7 +33,7 @@\n //! # Example\n //!\n //! ```rust\n-//! use std::rt::mutex::{NativeMutex, StaticNativeMutex, NATIVE_MUTEX_INIT};\n+//! use rustrt::mutex::{NativeMutex, StaticNativeMutex, NATIVE_MUTEX_INIT};\n //!\n //! // Use a statically initialized mutex\n //! static LOCK: StaticNativeMutex = NATIVE_MUTEX_INIT;\n@@ -108,7 +108,7 @@ impl StaticNativeMutex {\n     /// # Example\n     ///\n     /// ```rust\n-    /// use std::rt::mutex::{StaticNativeMutex, NATIVE_MUTEX_INIT};\n+    /// use rustrt::mutex::{StaticNativeMutex, NATIVE_MUTEX_INIT};\n     /// static LOCK: StaticNativeMutex = NATIVE_MUTEX_INIT;\n     /// unsafe {\n     ///     let _guard = LOCK.lock();\n@@ -225,7 +225,7 @@ impl NativeMutex {\n     /// # Example\n     ///\n     /// ```rust\n-    /// use std::rt::mutex::NativeMutex;\n+    /// use rustrt::mutex::NativeMutex;\n     /// unsafe {\n     ///     let mut lock = NativeMutex::new();\n     ///\n@@ -649,11 +649,13 @@ mod imp {\n \n #[cfg(test)]\n mod test {\n+    extern crate rustrt;\n+\n     use std::prelude::*;\n \n     use std::mem::drop;\n     use super::{StaticNativeMutex, NATIVE_MUTEX_INIT};\n-    use std::rt::thread::Thread;\n+    use rustrt::thread::Thread;\n \n     #[test]\n     fn smoke_lock() {"}, {"sha": "cec28a464f8b1e01e9df3d356215ce008d92b31f", "filename": "src/librustrt/task.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6987ad22e46f55b12d8749be7522f4578d227c62/src%2Flibrustrt%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6987ad22e46f55b12d8749be7522f4578d227c62/src%2Flibrustrt%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustrt%2Ftask.rs?ref=6987ad22e46f55b12d8749be7522f4578d227c62", "patch": "@@ -544,6 +544,8 @@ impl Death {\n \n #[cfg(test)]\n mod test {\n+    extern crate rustrt;\n+\n     use super::*;\n     use std::prelude::*;\n     use std::task;\n@@ -592,7 +594,7 @@ mod test {\n     #[test]\n     #[should_fail]\n     fn test_begin_unwind() {\n-        use std::rt::unwind::begin_unwind;\n+        use rustrt::unwind::begin_unwind;\n         begin_unwind(\"cause\", &(file!(), line!()))\n     }\n "}, {"sha": "0f119d44485324afb179db12abf4eb7e55effe44", "filename": "src/libstd/dynamic_lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6987ad22e46f55b12d8749be7522f4578d227c62/src%2Flibstd%2Fdynamic_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6987ad22e46f55b12d8749be7522f4578d227c62/src%2Flibstd%2Fdynamic_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fdynamic_lib.rs?ref=6987ad22e46f55b12d8749be7522f4578d227c62", "patch": "@@ -229,7 +229,7 @@ pub mod dl {\n     }\n \n     pub fn check_for_errors_in<T>(f: || -> T) -> Result<T, String> {\n-        use rt::mutex::{StaticNativeMutex, NATIVE_MUTEX_INIT};\n+        use rustrt::mutex::{StaticNativeMutex, NATIVE_MUTEX_INIT};\n         static LOCK: StaticNativeMutex = NATIVE_MUTEX_INIT;\n         unsafe {\n             // dlerror isn't thread safe, so we need to lock around this entire"}, {"sha": "c23e043c174091876a60189b0c7f44a229148407", "filename": "src/libstd/failure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6987ad22e46f55b12d8749be7522f4578d227c62/src%2Flibstd%2Ffailure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6987ad22e46f55b12d8749be7522f4578d227c62/src%2Flibstd%2Ffailure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffailure.rs?ref=6987ad22e46f55b12d8749be7522f4578d227c62", "patch": "@@ -18,7 +18,7 @@ use kinds::Send;\n use option::{Some, None};\n use result::Ok;\n use rt::backtrace;\n-use rt::{Stderr, Stdio};\n+use rustrt::{Stderr, Stdio};\n use rustrt::local::Local;\n use rustrt::task::Task;\n use str::Str;"}, {"sha": "7374668a69d834c1cbfa961e1a20ab2ace2c990e", "filename": "src/libstd/io/stdio.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6987ad22e46f55b12d8749be7522f4578d227c62/src%2Flibstd%2Fio%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6987ad22e46f55b12d8749be7522f4578d227c62/src%2Flibstd%2Fio%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fstdio.rs?ref=6987ad22e46f55b12d8749be7522f4578d227c62", "patch": "@@ -40,9 +40,9 @@ use option::{Option, Some, None};\n use boxed::Box;\n use sys::{fs, tty};\n use result::{Ok, Err};\n-use rt;\n-use rt::local::Local;\n-use rt::task::Task;\n+use rustrt;\n+use rustrt::local::Local;\n+use rustrt::task::Task;\n use slice::SlicePrelude;\n use str::StrPrelude;\n use uint;\n@@ -207,7 +207,7 @@ fn with_task_stdout(f: |&mut Writer| -> IoResult<()>) {\n         local_stdout.replace(Some(my_stdout));\n         result\n     } else {\n-        let mut io = rt::Stdout;\n+        let mut io = rustrt::Stdout;\n         f(&mut io as &mut Writer)\n     };\n     match result {"}, {"sha": "b35c49efdd80cfee79aea45e806dd39ed5b7390c", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6987ad22e46f55b12d8749be7522f4578d227c62/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6987ad22e46f55b12d8749be7522f4578d227c62/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=6987ad22e46f55b12d8749be7522f4578d227c62", "patch": "@@ -162,7 +162,6 @@ pub use core::result;\n pub use core::option;\n \n pub use alloc::boxed;\n-\n pub use alloc::rc;\n \n pub use core_collections::slice;\n@@ -247,7 +246,7 @@ pub mod fmt;\n \n #[path = \"sys/common/mod.rs\"] mod sys_common;\n \n-mod rt;\n+pub mod rt;\n mod failure;\n \n // A curious inner-module that's not exported that contains the binding"}, {"sha": "d7ba4877086ea2275a617c5339f5c3974083ce16", "filename": "src/libstd/os.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6987ad22e46f55b12d8749be7522f4578d227c62/src%2Flibstd%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6987ad22e46f55b12d8749be7522f4578d227c62/src%2Flibstd%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos.rs?ref=6987ad22e46f55b12d8749be7522f4578d227c62", "patch": "@@ -208,7 +208,7 @@ Accessing environment variables is not generally threadsafe.\n Serialize access through a global lock.\n */\n fn with_env_lock<T>(f: || -> T) -> T {\n-    use rt::mutex::{StaticNativeMutex, NATIVE_MUTEX_INIT};\n+    use rustrt::mutex::{StaticNativeMutex, NATIVE_MUTEX_INIT};\n \n     static LOCK: StaticNativeMutex = NATIVE_MUTEX_INIT;\n \n@@ -1039,9 +1039,9 @@ fn real_args_as_bytes() -> Vec<Vec<u8>> {\n           target_os = \"freebsd\",\n           target_os = \"dragonfly\"))]\n fn real_args_as_bytes() -> Vec<Vec<u8>> {\n-    use rt;\n+    use rustrt;\n \n-    match rt::args::clone() {\n+    match rustrt::args::clone() {\n         Some(args) => args,\n         None => panic!(\"process arguments not initialized\")\n     }"}, {"sha": "107518ef27c9d818457f6088728217a2e306b311", "filename": "src/libstd/rt/backtrace.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6987ad22e46f55b12d8749be7522f4578d227c62/src%2Flibstd%2Frt%2Fbacktrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6987ad22e46f55b12d8749be7522f4578d227c62/src%2Flibstd%2Frt%2Fbacktrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fbacktrace.rs?ref=6987ad22e46f55b12d8749be7522f4578d227c62", "patch": "@@ -238,7 +238,7 @@ mod imp {\n     use mem;\n     use option::{Some, None, Option};\n     use result::{Ok, Err};\n-    use rt::mutex::{StaticNativeMutex, NATIVE_MUTEX_INIT};\n+    use rustrt::mutex::{StaticNativeMutex, NATIVE_MUTEX_INIT};\n \n     /// As always - iOS on arm uses SjLj exceptions and\n     /// _Unwind_Backtrace is even not available there. Still,\n@@ -667,7 +667,7 @@ mod imp {\n     use option::{Some, None};\n     use path::Path;\n     use result::{Ok, Err};\n-    use rt::mutex::{StaticNativeMutex, NATIVE_MUTEX_INIT};\n+    use rustrt::mutex::{StaticNativeMutex, NATIVE_MUTEX_INIT};\n     use slice::SlicePrelude;\n     use str::StrPrelude;\n     use dynamic_lib::DynamicLibrary;"}, {"sha": "21b4edb6375812650620195b7fa6a222c9ec6987", "filename": "src/libstd/rt/mod.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/6987ad22e46f55b12d8749be7522f4578d227c62/src%2Flibstd%2Frt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6987ad22e46f55b12d8749be7522f4578d227c62/src%2Flibstd%2Frt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fmod.rs?ref=6987ad22e46f55b12d8749be7522f4578d227c62", "patch": "@@ -66,9 +66,7 @@ pub use self::util::{default_sched_threads, min_stack, running_on_valgrind};\n // Reexport functionality from librustrt and other crates underneath the\n // standard library which work together to create the entire runtime.\n pub use alloc::heap;\n-pub use rustrt::{task, local, mutex, exclusive, stack, args, thread};\n-pub use rustrt::{Stdio, Stdout, Stderr, begin_unwind, begin_unwind_fmt};\n-pub use rustrt::{at_exit, unwind, DEFAULT_ERROR_CODE};\n+pub use rustrt::{begin_unwind, begin_unwind_fmt, at_exit};\n \n // Simple backtrace functionality (to print on panic)\n pub mod backtrace;\n@@ -84,7 +82,7 @@ mod util;\n #[allow(experimental)]\n pub fn init(argc: int, argv: *const *const u8) {\n     rustrt::init(argc, argv);\n-    unsafe { unwind::register(failure::on_fail); }\n+    unsafe { rustrt::unwind::register(failure::on_fail); }\n }\n \n #[cfg(any(windows, android))]\n@@ -147,19 +145,19 @@ pub fn start(argc: int, argv: *const *const u8, main: proc()) -> int {\n     init(argc, argv);\n     let mut exit_code = None;\n     let mut main = Some(main);\n-    let mut task = Task::new(Some((my_stack_bottom, my_stack_top)),\n-                             Some(rt::thread::main_guard_page()));\n+    let mut task = box Task::new(Some((my_stack_bottom, my_stack_top)),\n+                                 Some(rustrt::thread::main_guard_page()));\n     task.name = Some(str::Slice(\"<main>\"));\n     drop(task.run(|| {\n         unsafe {\n-            rt::stack::record_os_managed_stack_bounds(my_stack_bottom, my_stack_top);\n+            rustrt::stack::record_os_managed_stack_bounds(my_stack_bottom, my_stack_top);\n         }\n         (main.take().unwrap())();\n         exit_code = Some(os::get_exit_status());\n     }).destroy());\n     unsafe { rt::cleanup(); }\n     // If the exit code wasn't set, then the task block must have panicked.\n-    return exit_code.unwrap_or(rt::DEFAULT_ERROR_CODE);\n+    return exit_code.unwrap_or(rustrt::DEFAULT_ERROR_CODE);\n }\n \n /// One-time runtime cleanup."}, {"sha": "9508d8d92325bab97d0022c4dc31a068a170552c", "filename": "src/libstd/sys/common/helper_thread.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6987ad22e46f55b12d8749be7522f4578d227c62/src%2Flibstd%2Fsys%2Fcommon%2Fhelper_thread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6987ad22e46f55b12d8749be7522f4578d227c62/src%2Flibstd%2Fsys%2Fcommon%2Fhelper_thread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcommon%2Fhelper_thread.rs?ref=6987ad22e46f55b12d8749be7522f4578d227c62", "patch": "@@ -22,8 +22,8 @@\n \n use mem;\n use rustrt::bookkeeping;\n-use rt::mutex::StaticNativeMutex;\n-use rt;\n+use rustrt::mutex::StaticNativeMutex;\n+use rustrt;\n use cell::UnsafeCell;\n use sys::helper_signal;\n use prelude::*;\n@@ -83,7 +83,7 @@ impl<M: Send> Helper<M> {\n                     self.lock.lock().signal()\n                 });\n \n-                rt::at_exit(proc() { self.shutdown() });\n+                rustrt::at_exit(proc() { self.shutdown() });\n                 *self.initialized.get() = true;\n             }\n         }"}, {"sha": "029fc8527426152cf61e6c073d240634c146c35b", "filename": "src/libstd/sys/common/net.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6987ad22e46f55b12d8749be7522f4578d227c62/src%2Flibstd%2Fsys%2Fcommon%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6987ad22e46f55b12d8749be7522f4578d227c62/src%2Flibstd%2Fsys%2Fcommon%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcommon%2Fnet.rs?ref=6987ad22e46f55b12d8749be7522f4578d227c62", "patch": "@@ -16,7 +16,7 @@ use libc::{mod, c_char, c_int};\n use mem;\n use num::Int;\n use ptr::{mod, null, null_mut};\n-use rt::mutex;\n+use rustrt::mutex;\n use io::net::ip::{SocketAddr, IpAddr, Ipv4Addr, Ipv6Addr};\n use io::net::addrinfo;\n use io::{IoResult, IoError};"}, {"sha": "664a6a1e70c767b1b3b1f17d6a4b48782642f462", "filename": "src/libstd/sys/unix/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6987ad22e46f55b12d8749be7522f4578d227c62/src%2Flibstd%2Fsys%2Funix%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6987ad22e46f55b12d8749be7522f4578d227c62/src%2Flibstd%2Fsys%2Funix%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fmod.rs?ref=6987ad22e46f55b12d8749be7522f4578d227c62", "patch": "@@ -25,7 +25,7 @@ use sys_common::mkerr_libc;\n \n macro_rules! helper_init( (static $name:ident: Helper<$m:ty>) => (\n     static $name: Helper<$m> = Helper {\n-        lock: ::rt::mutex::NATIVE_MUTEX_INIT,\n+        lock: ::rustrt::mutex::NATIVE_MUTEX_INIT,\n         chan: ::cell::UnsafeCell { value: 0 as *mut Sender<$m> },\n         signal: ::cell::UnsafeCell { value: 0 },\n         initialized: ::cell::UnsafeCell { value: false },"}, {"sha": "4d3469a9c24a80d19e55f84015f2da512519765a", "filename": "src/libstd/sys/unix/pipe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6987ad22e46f55b12d8749be7522f4578d227c62/src%2Flibstd%2Fsys%2Funix%2Fpipe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6987ad22e46f55b12d8749be7522f4578d227c62/src%2Flibstd%2Fsys%2Funix%2Fpipe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fpipe.rs?ref=6987ad22e46f55b12d8749be7522f4578d227c62", "patch": "@@ -12,7 +12,7 @@ use alloc::arc::Arc;\n use libc;\n use c_str::CString;\n use mem;\n-use rt::mutex;\n+use rustrt::mutex;\n use sync::atomic;\n use io::{mod, IoResult, IoError};\n use prelude::*;"}, {"sha": "815ace21f879d931f80bbe8e2a5f2b915b7a86b2", "filename": "src/libstd/sys/windows/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6987ad22e46f55b12d8749be7522f4578d227c62/src%2Flibstd%2Fsys%2Fwindows%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6987ad22e46f55b12d8749be7522f4578d227c62/src%2Flibstd%2Fsys%2Fwindows%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fmod.rs?ref=6987ad22e46f55b12d8749be7522f4578d227c62", "patch": "@@ -26,7 +26,7 @@ use sync::{Once, ONCE_INIT};\n \n macro_rules! helper_init( (static $name:ident: Helper<$m:ty>) => (\n     static $name: Helper<$m> = Helper {\n-        lock: ::rt::mutex::NATIVE_MUTEX_INIT,\n+        lock: ::rustrt::mutex::NATIVE_MUTEX_INIT,\n         chan: ::cell::UnsafeCell { value: 0 as *mut Sender<$m> },\n         signal: ::cell::UnsafeCell { value: 0 },\n         initialized: ::cell::UnsafeCell { value: false },"}, {"sha": "a623c2cd8e29737ba9e34a72e576f9f967404bab", "filename": "src/libstd/sys/windows/pipe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6987ad22e46f55b12d8749be7522f4578d227c62/src%2Flibstd%2Fsys%2Fwindows%2Fpipe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6987ad22e46f55b12d8749be7522f4578d227c62/src%2Flibstd%2Fsys%2Fwindows%2Fpipe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fpipe.rs?ref=6987ad22e46f55b12d8749be7522f4578d227c62", "patch": "@@ -90,7 +90,7 @@ use c_str::CString;\n use mem;\n use ptr;\n use sync::atomic;\n-use rt::mutex;\n+use rustrt::mutex;\n use io::{mod, IoError, IoResult};\n use prelude::*;\n "}, {"sha": "4f5f47e980c0dbc4bed01abe8303c3b11b447e80", "filename": "src/libstd/task.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/6987ad22e46f55b12d8749be7522f4578d227c62/src%2Flibstd%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6987ad22e46f55b12d8749be7522f4578d227c62/src%2Flibstd%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftask.rs?ref=6987ad22e46f55b12d8749be7522f4578d227c62", "patch": "@@ -50,9 +50,9 @@ use kinds::{Send, marker};\n use option::{None, Some, Option};\n use boxed::Box;\n use result::Result;\n-use rt::local::Local;\n-use rt::task;\n-use rt::task::Task;\n+use rustrt::local::Local;\n+use rustrt::task;\n+use rustrt::task::Task;\n use str::{Str, SendStr, IntoMaybeOwned};\n use string::{String, ToString};\n use sync::Future;\n@@ -142,13 +142,13 @@ impl TaskBuilder {\n             stack_size: stack_size,\n         };\n         if stdout.is_some() || stderr.is_some() {\n-            spawner.spawn(opts, proc() {\n+            Task::spawn(opts, proc() {\n                 let _ = stdout.map(stdio::set_stdout);\n                 let _ = stderr.map(stdio::set_stderr);\n                 f();\n             })\n         } else {\n-            spawner.spawn(opts, f)\n+            Task::spawn(opts, f)\n         }\n     }\n \n@@ -237,7 +237,7 @@ pub fn try_future<T:Send>(f: proc():Send -> T) -> Future<Result<T, Box<Any + Sen\n /// Read the name of the current task.\n #[stable]\n pub fn name() -> Option<String> {\n-    use rt::task::Task;\n+    use rustrt::task::Task;\n \n     let task = Local::borrow(None::<Task>);\n     match task.name {\n@@ -249,15 +249,15 @@ pub fn name() -> Option<String> {\n /// Yield control to the task scheduler.\n #[unstable = \"Name will change.\"]\n pub fn deschedule() {\n-    use rt::task::Task;\n+    use rustrt::task::Task;\n     Task::yield_now();\n }\n \n /// True if the running task is currently panicking (e.g. will return `true` inside a\n /// destructor that is run while unwinding the stack after a call to `panic!()`).\n #[unstable = \"May move to a different module.\"]\n pub fn failing() -> bool {\n-    use rt::task::Task;\n+    use rustrt::task::Task;\n     Local::borrow(None::<Task>).unwinder.unwinding()\n }\n "}, {"sha": "3c7e46036d6fbe689800ac25cf192d84c709a745", "filename": "src/libsync/comm/mod.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6987ad22e46f55b12d8749be7522f4578d227c62/src%2Flibsync%2Fcomm%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6987ad22e46f55b12d8749be7522f4578d227c62/src%2Flibsync%2Fcomm%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsync%2Fcomm%2Fmod.rs?ref=6987ad22e46f55b12d8749be7522f4578d227c62", "patch": "@@ -336,6 +336,8 @@ macro_rules! test (\n         mod $name {\n             #![allow(unused_imports)]\n \n+            extern crate rustrt;\n+\n             use std::prelude::*;\n \n             use comm::*;\n@@ -1512,7 +1514,7 @@ mod test {\n     })\n \n     test!(fn sends_off_the_runtime() {\n-        use std::rt::thread::Thread;\n+        use rustrt::thread::Thread;\n \n         let (tx, rx) = channel();\n         let t = Thread::start(proc() {\n@@ -1527,7 +1529,7 @@ mod test {\n     })\n \n     test!(fn try_recvs_off_the_runtime() {\n-        use std::rt::thread::Thread;\n+        use rustrt::thread::Thread;\n \n         let (tx, rx) = channel();\n         let (cdone, pdone) = channel();\n@@ -1977,7 +1979,7 @@ mod sync_tests {\n     })\n \n     test!(fn try_recvs_off_the_runtime() {\n-        use std::rt::thread::Thread;\n+        use rustrt::thread::Thread;\n \n         let (tx, rx) = sync_channel::<()>(0);\n         let (cdone, pdone) = channel();"}, {"sha": "1fece03b27364bb2194b1d69d8e19d4eef8d9185", "filename": "src/libsync/deque.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6987ad22e46f55b12d8749be7522f4578d227c62/src%2Flibsync%2Fdeque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6987ad22e46f55b12d8749be7522f4578d227c62/src%2Flibsync%2Fdeque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsync%2Fdeque.rs?ref=6987ad22e46f55b12d8749be7522f4578d227c62", "patch": "@@ -414,7 +414,7 @@ mod tests {\n     use super::{Data, BufferPool, Abort, Empty, Worker, Stealer};\n \n     use std::mem;\n-    use std::rt::thread::Thread;\n+    use rustrt::thread::Thread;\n     use std::rand;\n     use std::rand::Rng;\n     use atomic::{AtomicBool, INIT_ATOMIC_BOOL, SeqCst,"}, {"sha": "af36387f06c2c9fb46d32ace369c0518507529ad", "filename": "src/test/run-pass/foreign-call-no-runtime.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6987ad22e46f55b12d8749be7522f4578d227c62/src%2Ftest%2Frun-pass%2Fforeign-call-no-runtime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6987ad22e46f55b12d8749be7522f4578d227c62/src%2Ftest%2Frun-pass%2Fforeign-call-no-runtime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fforeign-call-no-runtime.rs?ref=6987ad22e46f55b12d8749be7522f4578d227c62", "patch": "@@ -9,9 +9,10 @@\n // except according to those terms.\n \n extern crate libc;\n+extern crate rustrt;\n \n use std::mem;\n-use std::rt::thread::Thread;\n+use rustrt::thread::Thread;\n \n #[link(name = \"rust_test_helpers\")]\n extern {"}, {"sha": "ac783961b508e8363d8f492a8cd6afa0edea23b2", "filename": "src/test/run-pass/match-ref-binding-in-guard-3256.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6987ad22e46f55b12d8749be7522f4578d227c62/src%2Ftest%2Frun-pass%2Fmatch-ref-binding-in-guard-3256.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6987ad22e46f55b12d8749be7522f4578d227c62/src%2Ftest%2Frun-pass%2Fmatch-ref-binding-in-guard-3256.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmatch-ref-binding-in-guard-3256.rs?ref=6987ad22e46f55b12d8749be7522f4578d227c62", "patch": "@@ -8,9 +8,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+extern crate rustrt;\n+\n pub fn main() {\n     unsafe {\n-        let x = Some(::std::rt::exclusive::Exclusive::new(true));\n+        let x = Some(::rustrt::exclusive::Exclusive::new(true));\n         match x {\n             Some(ref z) if *z.lock() => {\n                 assert!(*z.lock());"}, {"sha": "ea3eb29964883520cdfe2eefc82f84d0a9177517", "filename": "src/test/run-pass/native-always-waits.rs", "status": "removed", "additions": 0, "deletions": 28, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/40c78ab037c70d61eb4f8c95c7a4fec8f098644b/src%2Ftest%2Frun-pass%2Fnative-always-waits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40c78ab037c70d61eb4f8c95c7a4fec8f098644b/src%2Ftest%2Frun-pass%2Fnative-always-waits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnative-always-waits.rs?ref=40c78ab037c70d61eb4f8c95c7a4fec8f098644b", "patch": "@@ -1,28 +0,0 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// ignore-android (FIXME #11419)\n-\n-extern crate native;\n-\n-static mut set: bool = false;\n-\n-#[start]\n-fn start(argc: int, argv: *const *const u8) -> int {\n-    // make sure that native::start always waits for all children to finish\n-    native::start(argc, argv, proc() {\n-        spawn(proc() {\n-            unsafe { set = true; }\n-        });\n-    });\n-\n-    // if we didn't set the global, then return a nonzero code\n-    if unsafe {set} {0} else {1}\n-}"}, {"sha": "c8d281a791c90f760a1e0653b56d84768bad3894", "filename": "src/test/run-pass/writealias.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6987ad22e46f55b12d8749be7522f4578d227c62/src%2Ftest%2Frun-pass%2Fwritealias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6987ad22e46f55b12d8749be7522f4578d227c62/src%2Ftest%2Frun-pass%2Fwritealias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fwritealias.rs?ref=6987ad22e46f55b12d8749be7522f4578d227c62", "patch": "@@ -8,14 +8,15 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+extern crate rustrt;\n \n struct Point {x: int, y: int, z: int}\n \n fn f(p: &mut Point) { p.z = 13; }\n \n pub fn main() {\n     unsafe {\n-        let x = Some(::std::rt::exclusive::Exclusive::new(true));\n+        let x = Some(::rustrt::exclusive::Exclusive::new(true));\n         match x {\n             Some(ref z) if *z.lock() => {\n                 assert!(*z.lock());"}]}