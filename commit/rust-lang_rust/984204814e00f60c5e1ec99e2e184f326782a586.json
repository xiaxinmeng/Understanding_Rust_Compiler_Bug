{"sha": "984204814e00f60c5e1ec99e2e184f326782a586", "node_id": "C_kwDOAAsO6NoAKDk4NDIwNDgxNGUwMGY2MGM1ZTFlYzk5ZTJlMTg0ZjMyNjc4MmE1ODY", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-03-15T01:31:42Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-03-15T01:31:42Z"}, "message": "Auto merge of #92285 - compiler-errors:dyn-proj-bounds, r=nikomatsakis\n\ncheck ~Projection~ all supertrait bounds when confirming dyn candidate\n\nI'm pretty sure Projection is the only other PredicateKind that we care about enforcing here.\n\nFixes #80800", "tree": {"sha": "f72944522bd3f1729d345e3232868101c94a0e41", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f72944522bd3f1729d345e3232868101c94a0e41"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/984204814e00f60c5e1ec99e2e184f326782a586", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/984204814e00f60c5e1ec99e2e184f326782a586", "html_url": "https://github.com/rust-lang/rust/commit/984204814e00f60c5e1ec99e2e184f326782a586", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/984204814e00f60c5e1ec99e2e184f326782a586/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2184c7c5687a89ce58e169546c9b83448f4d0ea1", "url": "https://api.github.com/repos/rust-lang/rust/commits/2184c7c5687a89ce58e169546c9b83448f4d0ea1", "html_url": "https://github.com/rust-lang/rust/commit/2184c7c5687a89ce58e169546c9b83448f4d0ea1"}, {"sha": "67ef11dc2a64153a381c7b58475a2b65214557af", "url": "https://api.github.com/repos/rust-lang/rust/commits/67ef11dc2a64153a381c7b58475a2b65214557af", "html_url": "https://github.com/rust-lang/rust/commit/67ef11dc2a64153a381c7b58475a2b65214557af"}], "stats": {"total": 124, "additions": 98, "deletions": 26}, "files": [{"sha": "c3f3baf9d3d473047f3757501988809f9d5abf76", "filename": "compiler/rustc_trait_selection/src/traits/select/confirmation.rs", "status": "modified", "additions": 13, "deletions": 15, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/984204814e00f60c5e1ec99e2e184f326782a586/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/984204814e00f60c5e1ec99e2e184f326782a586/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs?ref=984204814e00f60c5e1ec99e2e184f326782a586", "patch": "@@ -468,21 +468,19 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             .predicates\n             .into_iter()\n         {\n-            if let ty::PredicateKind::Trait(..) = super_trait.kind().skip_binder() {\n-                let normalized_super_trait = normalize_with_depth_to(\n-                    self,\n-                    obligation.param_env,\n-                    obligation.cause.clone(),\n-                    obligation.recursion_depth + 1,\n-                    super_trait,\n-                    &mut nested,\n-                );\n-                nested.push(Obligation::new(\n-                    obligation.cause.clone(),\n-                    obligation.param_env,\n-                    normalized_super_trait,\n-                ));\n-            }\n+            let normalized_super_trait = normalize_with_depth_to(\n+                self,\n+                obligation.param_env,\n+                obligation.cause.clone(),\n+                obligation.recursion_depth + 1,\n+                super_trait,\n+                &mut nested,\n+            );\n+            nested.push(Obligation::new(\n+                obligation.cause.clone(),\n+                obligation.param_env,\n+                normalized_super_trait,\n+            ));\n         }\n \n         let assoc_types: Vec<_> = tcx"}, {"sha": "0ea944ec2df55cd16c86fd976e62c5cdc379e522", "filename": "src/test/ui/traits/object/enforce-supertrait-projection.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/984204814e00f60c5e1ec99e2e184f326782a586/src%2Ftest%2Fui%2Ftraits%2Fobject%2Fenforce-supertrait-projection.rs", "raw_url": "https://github.com/rust-lang/rust/raw/984204814e00f60c5e1ec99e2e184f326782a586/src%2Ftest%2Fui%2Ftraits%2Fobject%2Fenforce-supertrait-projection.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fobject%2Fenforce-supertrait-projection.rs?ref=984204814e00f60c5e1ec99e2e184f326782a586", "patch": "@@ -0,0 +1,24 @@\n+trait SuperTrait {\n+    type A;\n+    type B;\n+}\n+\n+trait Trait: SuperTrait<A = <Self as SuperTrait>::B> {}\n+\n+fn transmute<A, B>(x: A) -> B {\n+    foo::<A, B, dyn Trait<A = A, B = B>>(x)\n+    //~^ ERROR type mismatch resolving `<dyn Trait<A = A, B = B> as SuperTrait>::A == B`\n+}\n+\n+fn foo<A, B, T: ?Sized>(x: T::A) -> B\n+where\n+    T: Trait<B = B>,\n+{\n+    x\n+}\n+\n+static X: u8 = 0;\n+fn main() {\n+    let x = transmute::<&u8, &[u8; 1_000_000]>(&X);\n+    println!(\"{:?}\", x[100_000]);\n+}"}, {"sha": "a3d17fabbe47fadbdafecc4d24dac4ba2d40b0ad", "filename": "src/test/ui/traits/object/enforce-supertrait-projection.stderr", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/984204814e00f60c5e1ec99e2e184f326782a586/src%2Ftest%2Fui%2Ftraits%2Fobject%2Fenforce-supertrait-projection.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/984204814e00f60c5e1ec99e2e184f326782a586/src%2Ftest%2Fui%2Ftraits%2Fobject%2Fenforce-supertrait-projection.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fobject%2Fenforce-supertrait-projection.stderr?ref=984204814e00f60c5e1ec99e2e184f326782a586", "patch": "@@ -0,0 +1,26 @@\n+error[E0271]: type mismatch resolving `<dyn Trait<A = A, B = B> as SuperTrait>::A == B`\n+  --> $DIR/enforce-supertrait-projection.rs:9:5\n+   |\n+LL | fn transmute<A, B>(x: A) -> B {\n+   |              -  - expected type parameter\n+   |              |\n+   |              found type parameter\n+LL |     foo::<A, B, dyn Trait<A = A, B = B>>(x)\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected type parameter `B`, found type parameter `A`\n+   |\n+   = note: expected type parameter `B`\n+              found type parameter `A`\n+   = note: a type parameter was expected, but a different one was found; you might be missing a type parameter or trait bound\n+   = note: for more information, visit https://doc.rust-lang.org/book/ch10-02-traits.html#traits-as-parameters\n+note: required by a bound in `foo`\n+  --> $DIR/enforce-supertrait-projection.rs:15:8\n+   |\n+LL | fn foo<A, B, T: ?Sized>(x: T::A) -> B\n+   |    --- required by a bound in this\n+LL | where\n+LL |     T: Trait<B = B>,\n+   |        ^^^^^^^^^^^^ required by this bound in `foo`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0271`."}, {"sha": "ed2f8624357bbbefda281e6c496d1c3c74e4213b", "filename": "src/test/ui/traits/object/supertrait-lifetime-bound.nll.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/984204814e00f60c5e1ec99e2e184f326782a586/src%2Ftest%2Fui%2Ftraits%2Fobject%2Fsupertrait-lifetime-bound.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/984204814e00f60c5e1ec99e2e184f326782a586/src%2Ftest%2Fui%2Ftraits%2Fobject%2Fsupertrait-lifetime-bound.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fobject%2Fsupertrait-lifetime-bound.nll.stderr?ref=984204814e00f60c5e1ec99e2e184f326782a586", "patch": "@@ -0,0 +1,11 @@\n+error: lifetime may not live long enough\n+  --> $DIR/supertrait-lifetime-bound.rs:10:5\n+   |\n+LL | fn test2<'a>() {\n+   |          -- lifetime `'a` defined here\n+...\n+LL |     test1::<dyn Bar<&'a u32>, _>();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ requires that `'a` must outlive `'static`\n+\n+error: aborting due to previous error\n+"}, {"sha": "5349771693a2a6cc559b5971340769488781874c", "filename": "src/test/ui/traits/object/supertrait-lifetime-bound.rs", "status": "modified", "additions": 9, "deletions": 11, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/984204814e00f60c5e1ec99e2e184f326782a586/src%2Ftest%2Fui%2Ftraits%2Fobject%2Fsupertrait-lifetime-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/984204814e00f60c5e1ec99e2e184f326782a586/src%2Ftest%2Fui%2Ftraits%2Fobject%2Fsupertrait-lifetime-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fobject%2Fsupertrait-lifetime-bound.rs?ref=984204814e00f60c5e1ec99e2e184f326782a586", "patch": "@@ -1,16 +1,14 @@\n-// check-pass\n+trait Foo: 'static { }\n \n-use std::any::Any;\n+trait Bar<T>: Foo { }\n \n-trait A<T>: Any {\n-    fn m(&self) {}\n-}\n-\n-impl<S, T: 'static> A<S> for T {}\n+fn test1<T: ?Sized + Bar<S>, S>() { }\n \n-fn call_obj<'a>() {\n-    let obj: &dyn A<&'a ()> = &();\n-    obj.m();\n+fn test2<'a>() {\n+    // Here: the type `dyn Bar<&'a u32>` references `'a`,\n+    // and so it does not outlive `'static`.\n+    test1::<dyn Bar<&'a u32>, _>();\n+    //~^ ERROR the type `(dyn Bar<&'a u32> + 'static)` does not fulfill the required lifetime\n }\n \n-fn main() {}\n+fn main() { }"}, {"sha": "c3d7f8cd0c1cdcdd4b6aca200ff89be2c6c3e8e4", "filename": "src/test/ui/traits/object/supertrait-lifetime-bound.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/984204814e00f60c5e1ec99e2e184f326782a586/src%2Ftest%2Fui%2Ftraits%2Fobject%2Fsupertrait-lifetime-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/984204814e00f60c5e1ec99e2e184f326782a586/src%2Ftest%2Fui%2Ftraits%2Fobject%2Fsupertrait-lifetime-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fobject%2Fsupertrait-lifetime-bound.stderr?ref=984204814e00f60c5e1ec99e2e184f326782a586", "patch": "@@ -0,0 +1,15 @@\n+error[E0477]: the type `(dyn Bar<&'a u32> + 'static)` does not fulfill the required lifetime\n+  --> $DIR/supertrait-lifetime-bound.rs:10:5\n+   |\n+LL |     test1::<dyn Bar<&'a u32>, _>();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: type must satisfy the static lifetime as required by this binding\n+  --> $DIR/supertrait-lifetime-bound.rs:5:22\n+   |\n+LL | fn test1<T: ?Sized + Bar<S>, S>() { }\n+   |                      ^^^^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0477`."}]}