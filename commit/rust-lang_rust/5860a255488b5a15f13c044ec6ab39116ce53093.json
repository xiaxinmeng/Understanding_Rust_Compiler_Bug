{"sha": "5860a255488b5a15f13c044ec6ab39116ce53093", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU4NjBhMjU1NDg4YjVhMTVmMTNjMDQ0ZWM2YWIzOTExNmNlNTMwOTM=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-07-12T22:14:27Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-07-12T22:14:27Z"}, "message": "Merge branch 'contrib'", "tree": {"sha": "207c42e251530d2c90e5cd872992dc7ee9e27119", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/207c42e251530d2c90e5cd872992dc7ee9e27119"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5860a255488b5a15f13c044ec6ab39116ce53093", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5860a255488b5a15f13c044ec6ab39116ce53093", "html_url": "https://github.com/rust-lang/rust/commit/5860a255488b5a15f13c044ec6ab39116ce53093", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5860a255488b5a15f13c044ec6ab39116ce53093/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d5ba0c34101af34433a21f4bba0f4dd76aac8a87", "url": "https://api.github.com/repos/rust-lang/rust/commits/d5ba0c34101af34433a21f4bba0f4dd76aac8a87", "html_url": "https://github.com/rust-lang/rust/commit/d5ba0c34101af34433a21f4bba0f4dd76aac8a87"}, {"sha": "6f5ef5815b349ecf80da92c2109db1061a7f9d02", "url": "https://api.github.com/repos/rust-lang/rust/commits/6f5ef5815b349ecf80da92c2109db1061a7f9d02", "html_url": "https://github.com/rust-lang/rust/commit/6f5ef5815b349ecf80da92c2109db1061a7f9d02"}], "stats": {"total": 28, "additions": 14, "deletions": 14}, "files": [{"sha": "4b2689df0f05968b0933d30031031af5877bada0", "filename": "doc/rust.texi", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/5860a255488b5a15f13c044ec6ab39116ce53093/doc%2Frust.texi", "raw_url": "https://github.com/rust-lang/rust/raw/5860a255488b5a15f13c044ec6ab39116ce53093/doc%2Frust.texi", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Frust.texi?ref=5860a255488b5a15f13c044ec6ab39116ce53093", "patch": "@@ -2089,7 +2089,7 @@ Vectors can be sliced. A slice expression builds a new vector by copying a\n contiguous range -- given by a pair of indices representing a half-open\n interval -- out of the sliced vector.\n \n-And example of a @code{vec} type and its use:\n+An example of a @code{vec} type and its use:\n @example\n let vec[int] v = vec(7, 5, 3);\n let int i = v.(2);\n@@ -2698,9 +2698,9 @@ following the declaration statement.\n \n The latter (@code{auto}) form of slot declaration causes the compiler to infer\n the static type of the slot through unification with the types of values\n-assigned to the slot in the the remaining code in the block scope. Inference\n-only occurs on frame-local slots, not argument slots. Function, iterator and\n-object signatures must always declared types for all argument slots.\n+assigned to the slot in the remaining code in the block scope. Inference only\n+occurs on frame-local slots, not argument slots. Function, iterator and object\n+signatures must always declared types for all argument slots.\n @xref{Ref.Mem.Slot}.\n \n \n@@ -2718,11 +2718,11 @@ Executing a copy statement causes the value denoted by the expression --\n either a value or a primitive combination of values -- to be copied into the\n memory location denoted by the @emph{lval}.\n \n-A copy may entail the the adjustment of reference counts, execution of\n-destructors, or similar adjustments in order to respect the path through the\n-memory graph implied by the @code{lval}, as well as any existing value held in\n-the memory being written-to. All such adjustment is automatic and implied by\n-the @code{=} operator.\n+A copy may entail the adjustment of reference counts, execution of destructors,\n+or similar adjustments in order to respect the path through the memory graph\n+implied by the @code{lval}, as well as any existing value held in the memory\n+being written-to. All such adjustment is automatic and implied by the @code{=}\n+operator.\n \n An example of three different copy statements:\n @example\n@@ -2740,7 +2740,7 @@ A @code{spawn} statement consists of keyword @code{spawn}, followed by a\n normal @emph{call} statement (@pxref{Ref.Stmt.Call}).  A @code{spawn}\n statement causes the runtime to construct a new task executing the called\n function.  The called function is referred to as the @dfn{entry function} for\n-the spawned task, and its arguments are copied form the spawning task to the\n+the spawned task, and its arguments are copied from the spawning task to the\n spawned task before the spawned task begins execution.\n \n Functions taking alias-slot arguments, or returning non-nil values, cannot be\n@@ -3129,7 +3129,7 @@ variable, executing the loop body once per copy. To perform a for loop on a\n sub-range of a vector or string, form a temporary slice over the sub-range and\n run the loop over the slice.\n \n-Example of a 4 for loops, all identical:\n+Example of 4 for loops, all identical:\n @example\n let vec[foo] v = vec(a, b, c);\n "}, {"sha": "0b74da3caabe6a16d8ccb1aa4822d600ff6517ef", "filename": "src/boot/fe/ast.ml", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5860a255488b5a15f13c044ec6ab39116ce53093/src%2Fboot%2Ffe%2Fast.ml", "raw_url": "https://github.com/rust-lang/rust/raw/5860a255488b5a15f13c044ec6ab39116ce53093/src%2Fboot%2Ffe%2Fast.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Ffe%2Fast.ml?ref=5860a255488b5a15f13c044ec6ab39116ce53093", "patch": "@@ -1123,17 +1123,17 @@ and fmt_stmt_body (ff:Format.formatter) (s:stmt) : unit =\n               fmt_slot ff slot.node;\n               fmt ff \" \";\n               fmt_ident ff ident;\n-              fmt ff \" = \";\n+              fmt ff \" in \";\n               fmt_lval ff f;\n               fmt_atoms ff az;\n-              fmt ff \" \";\n+              fmt ff \") \";\n               fmt_obr ff;\n               fmt_stmts ff sf.for_each_body.node;\n               fmt_cbb ff\n             end\n \n       | STMT_put (atom) ->\n-          fmt ff \"put \";\n+          fmt ff \"put\";\n           begin\n             match atom with\n                 Some a -> (fmt ff \" \"; fmt_atom ff a)"}]}