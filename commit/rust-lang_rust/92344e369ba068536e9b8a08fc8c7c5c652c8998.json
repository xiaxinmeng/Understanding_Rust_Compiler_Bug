{"sha": "92344e369ba068536e9b8a08fc8c7c5c652c8998", "node_id": "C_kwDOAAsO6NoAKDkyMzQ0ZTM2OWJhMDY4NTM2ZTliOGEwOGZjOGM3YzVjNjUyYzg5OTg", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-08-14T11:39:13Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-08-14T11:39:13Z"}, "message": "Rollup merge of #99861 - lcnr:orphan-check-cg, r=jackh726\n\norphan check: rationalize our handling of constants\n\ncc `@rust-lang/types` `@rust-lang/project-const-generics` on whether you agree with this reasoning.\n\nr? types", "tree": {"sha": "18e3be35931169598765ce815bc287f2d1029503", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/18e3be35931169598765ce815bc287f2d1029503"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/92344e369ba068536e9b8a08fc8c7c5c652c8998", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJi+N7hCRBK7hj4Ov3rIwAAh7QIAF2nK0ixnWR4IRq6sGFycAHS\nqSMwQ0XkSgcPokn4sk8VAQlg4ZOQA9ch+QzrHwf6+0ZTXFXCeaP15fgndkfwBNYw\n6frBs13hcMEQDx2yZjpNWLz0FVOvRzcC0YZ34T8fNQyPrkp3Yzd+SwooJhFyuDPc\n0CbDWPB65jacLmeJ9U6tR8z4/XvmNtxk2TQQYuRBVOcZ3f7G/ViMYqBVKUKYStGr\nQz9xyX3WujeUFTzm41DN3IFE1I/wBSh+lps73ZcDhmfQiuH8fUKcD5Ab2ZHHCI8O\nyTUCn4pFfd8pgnvJktK413vS+4W3B4Y1mX5ogayK/8QqZHYqamZDxr62oTPjgiE=\n=MNyb\n-----END PGP SIGNATURE-----\n", "payload": "tree 18e3be35931169598765ce815bc287f2d1029503\nparent a9f3e0393a08832b8bff5664919d3626bad9b465\nparent 2634309eb39b5af7b1d26a3656079efc0b9340d1\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1660477153 +0530\ncommitter GitHub <noreply@github.com> 1660477153 +0530\n\nRollup merge of #99861 - lcnr:orphan-check-cg, r=jackh726\n\norphan check: rationalize our handling of constants\n\ncc `@rust-lang/types` `@rust-lang/project-const-generics` on whether you agree with this reasoning.\n\nr? types\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/92344e369ba068536e9b8a08fc8c7c5c652c8998", "html_url": "https://github.com/rust-lang/rust/commit/92344e369ba068536e9b8a08fc8c7c5c652c8998", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/92344e369ba068536e9b8a08fc8c7c5c652c8998/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a9f3e0393a08832b8bff5664919d3626bad9b465", "url": "https://api.github.com/repos/rust-lang/rust/commits/a9f3e0393a08832b8bff5664919d3626bad9b465", "html_url": "https://github.com/rust-lang/rust/commit/a9f3e0393a08832b8bff5664919d3626bad9b465"}, {"sha": "2634309eb39b5af7b1d26a3656079efc0b9340d1", "url": "https://api.github.com/repos/rust-lang/rust/commits/2634309eb39b5af7b1d26a3656079efc0b9340d1", "html_url": "https://github.com/rust-lang/rust/commit/2634309eb39b5af7b1d26a3656079efc0b9340d1"}], "stats": {"total": 45, "additions": 44, "deletions": 1}, "files": [{"sha": "a54b36262b2e083ee5b9e34f594979e825f2167b", "filename": "compiler/rustc_trait_selection/src/traits/coherence.rs", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/92344e369ba068536e9b8a08fc8c7c5c652c8998/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92344e369ba068536e9b8a08fc8c7c5c652c8998/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs?ref=92344e369ba068536e9b8a08fc8c7c5c652c8998", "patch": "@@ -734,7 +734,21 @@ impl<'tcx> TypeVisitor<'tcx> for OrphanChecker<'tcx> {\n         result\n     }\n \n-    // FIXME: Constants should participate in orphan checking.\n+    /// All possible values for a constant parameter already exist\n+    /// in the crate defining the trait, so they are always non-local[^1].\n+    ///\n+    /// Because there's no way to have an impl where the first local\n+    /// generic argument is a constant, we also don't have to fail\n+    /// the orphan check when encountering a parameter or a generic constant.\n+    ///\n+    /// This means that we can completely ignore constants during the orphan check.\n+    ///\n+    /// See `src/test/ui/coherence/const-generics-orphan-check-ok.rs` for examples.\n+    ///\n+    /// [^1]: This might not hold for function pointers or trait objects in the future.\n+    /// As these should be quite rare as const arguments and especially rare as impl\n+    /// parameters, allowing uncovered const parameters in impls seems more useful\n+    /// than allowing `impl<T> Trait<local_fn_ptr, T> for i32` to compile.\n     fn visit_const(&mut self, _c: ty::Const<'tcx>) -> ControlFlow<Self::BreakTy> {\n         ControlFlow::CONTINUE\n     }"}, {"sha": "a44eb14f8e4cf53dd74bb184c25a63827f9a7dc8", "filename": "src/test/ui/coherence/auxiliary/trait-with-const-param.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/92344e369ba068536e9b8a08fc8c7c5c652c8998/src%2Ftest%2Fui%2Fcoherence%2Fauxiliary%2Ftrait-with-const-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92344e369ba068536e9b8a08fc8c7c5c652c8998/src%2Ftest%2Fui%2Fcoherence%2Fauxiliary%2Ftrait-with-const-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fauxiliary%2Ftrait-with-const-param.rs?ref=92344e369ba068536e9b8a08fc8c7c5c652c8998", "patch": "@@ -0,0 +1 @@\n+pub trait Trait<const N: usize, T> {}"}, {"sha": "217e8aed234b11efee6c131ec050d16d8f42eca9", "filename": "src/test/ui/coherence/const-generics-orphan-check-ok.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/92344e369ba068536e9b8a08fc8c7c5c652c8998/src%2Ftest%2Fui%2Fcoherence%2Fconst-generics-orphan-check-ok.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92344e369ba068536e9b8a08fc8c7c5c652c8998/src%2Ftest%2Fui%2Fcoherence%2Fconst-generics-orphan-check-ok.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fconst-generics-orphan-check-ok.rs?ref=92344e369ba068536e9b8a08fc8c7c5c652c8998", "patch": "@@ -0,0 +1,28 @@\n+// check-pass\n+// aux-build:trait-with-const-param.rs\n+extern crate trait_with_const_param;\n+use trait_with_const_param::*;\n+\n+// Trivial case, const param after local type.\n+struct Local1;\n+impl<const N: usize, T> Trait<N, T> for Local1 {}\n+\n+// Concrete consts behave the same as foreign types,\n+// so this also trivially works.\n+impl Trait<3, Local1> for i32 {}\n+\n+// This case isn't as trivial as we would forbid type\n+// parameters here, we do allow const parameters though.\n+//\n+// The reason that type parameters are forbidden for\n+// `impl<T> Trait<T, LocalInA> for i32 {}` is that another\n+// downstream crate can add `impl<T> Trait<LocalInB, T> for i32`.\n+// As these two impls would overlap we forbid any impls which\n+// have a type parameter in front of a local type.\n+//\n+// With const parameters this issue does not exist as there are no\n+// constants local to another downstream crate.\n+struct Local2;\n+impl<const N: usize> Trait<N, Local2> for i32 {}\n+\n+fn main() {}"}]}