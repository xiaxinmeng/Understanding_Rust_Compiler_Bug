{"sha": "6a143add9eb6a73a23e570fd3fb42c453497b29a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZhMTQzYWRkOWViNmE3M2EyM2U1NzBmZDNmYjQyYzQ1MzQ5N2IyOWE=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-05-03T18:16:43Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-05-03T23:10:27Z"}, "message": "fix comments", "tree": {"sha": "a73bcc7ed21a23398b9b6ad2540130e331bdef8d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a73bcc7ed21a23398b9b6ad2540130e331bdef8d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6a143add9eb6a73a23e570fd3fb42c453497b29a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6a143add9eb6a73a23e570fd3fb42c453497b29a", "html_url": "https://github.com/rust-lang/rust/commit/6a143add9eb6a73a23e570fd3fb42c453497b29a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6a143add9eb6a73a23e570fd3fb42c453497b29a/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d68b0eceaaf719a4702ab13a7ca62dea5d966082", "url": "https://api.github.com/repos/rust-lang/rust/commits/d68b0eceaaf719a4702ab13a7ca62dea5d966082", "html_url": "https://github.com/rust-lang/rust/commit/d68b0eceaaf719a4702ab13a7ca62dea5d966082"}], "stats": {"total": 37, "additions": 19, "deletions": 18}, "files": [{"sha": "ee2e6b092a27603b511fc91f598ff95de35d3c8d", "filename": "src/librustc/middle/resolve_lifetime.rs", "status": "modified", "additions": 19, "deletions": 18, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/6a143add9eb6a73a23e570fd3fb42c453497b29a/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a143add9eb6a73a23e570fd3fb42c453497b29a/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs?ref=6a143add9eb6a73a23e570fd3fb42c453497b29a", "patch": "@@ -230,30 +230,31 @@ struct LifetimeContext<'a, 'tcx: 'a> {\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     map: &'a mut NamedRegionMap,\n     scope: ScopeRef<'a>,\n-    // Deep breath. Our representation for poly trait refs contains a single\n-    // binder and thus we only allow a single level of quantification. However,\n-    // the syntax of Rust permits quantification in two places, e.g., `T: for <'a> Foo<'a>`\n-    // and `for <'a, 'b> &'b T: Foo<'a>`. In order to get the de Bruijn indices\n-    // correct when representing these constraints, we should only introduce one\n-    // scope. However, we want to support both locations for the quantifier and\n-    // during lifetime resolution we want precise information (so we can't\n-    // desugar in an earlier phase).\n-\n-    // SO, if we encounter a quantifier at the outer scope, we set\n-    // trait_ref_hack to true (and introduce a scope), and then if we encounter\n-    // a quantifier at the inner scope, we error. If trait_ref_hack is false,\n-    // then we introduce the scope at the inner quantifier.\n-\n-    // I'm sorry.\n+\n+    /// Deep breath. Our representation for poly trait refs contains a single\n+    /// binder and thus we only allow a single level of quantification. However,\n+    /// the syntax of Rust permits quantification in two places, e.g., `T: for <'a> Foo<'a>`\n+    /// and `for <'a, 'b> &'b T: Foo<'a>`. In order to get the de Bruijn indices\n+    /// correct when representing these constraints, we should only introduce one\n+    /// scope. However, we want to support both locations for the quantifier and\n+    /// during lifetime resolution we want precise information (so we can't\n+    /// desugar in an earlier phase).\n+    ///\n+    /// SO, if we encounter a quantifier at the outer scope, we set\n+    /// trait_ref_hack to true (and introduce a scope), and then if we encounter\n+    /// a quantifier at the inner scope, we error. If trait_ref_hack is false,\n+    /// then we introduce the scope at the inner quantifier.\n+    ///\n+    /// I'm sorry.\n     trait_ref_hack: bool,\n \n-    // Used to disallow the use of in-band lifetimes in `fn` or `Fn` syntax.\n+    /// Used to disallow the use of in-band lifetimes in `fn` or `Fn` syntax.\n     is_in_fn_syntax: bool,\n \n-    // List of labels in the function/method currently under analysis.\n+    /// List of labels in the function/method currently under analysis.\n     labels_in_fn: Vec<(ast::Name, Span)>,\n \n-    // Cache for cross-crate per-definition object lifetime defaults.\n+    /// Cache for cross-crate per-definition object lifetime defaults.\n     xcrate_object_lifetime_defaults: DefIdMap<Vec<ObjectLifetimeDefault>>,\n \n     lifetime_uses: DefIdMap<LifetimeUseSet<'tcx>>,"}]}