{"sha": "dfbf4646f74a120fe736599faa81643a78aaf029", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRmYmY0NjQ2Zjc0YTEyMGZlNzM2NTk5ZmFhODE2NDNhNzhhYWYwMjk=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2019-07-12T08:55:29Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2019-07-15T15:41:23Z"}, "message": "rustc_target: move abi::Niche from rustc::ty::layout.", "tree": {"sha": "56c2d21a01fe7dd21453ee6fb9ef6617d8ccd187", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/56c2d21a01fe7dd21453ee6fb9ef6617d8ccd187"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dfbf4646f74a120fe736599faa81643a78aaf029", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dfbf4646f74a120fe736599faa81643a78aaf029", "html_url": "https://github.com/rust-lang/rust/commit/dfbf4646f74a120fe736599faa81643a78aaf029", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dfbf4646f74a120fe736599faa81643a78aaf029/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8c050fc805e601783765d0a58b2dbe3d948b6cd6", "url": "https://api.github.com/repos/rust-lang/rust/commits/8c050fc805e601783765d0a58b2dbe3d948b6cd6", "html_url": "https://github.com/rust-lang/rust/commit/8c050fc805e601783765d0a58b2dbe3d948b6cd6"}], "stats": {"total": 102, "additions": 51, "deletions": 51}, "files": [{"sha": "a60842f568165ac0ec667aca1fb7a97648856d20", "filename": "src/librustc/ty/layout.rs", "status": "modified", "additions": 0, "deletions": 51, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/dfbf4646f74a120fe736599faa81643a78aaf029/src%2Flibrustc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfbf4646f74a120fe736599faa81643a78aaf029/src%2Flibrustc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Flayout.rs?ref=dfbf4646f74a120fe736599faa81643a78aaf029", "patch": "@@ -2222,57 +2222,6 @@ where\n     }\n }\n \n-struct Niche {\n-    offset: Size,\n-    scalar: Scalar,\n-}\n-\n-impl Niche {\n-    fn available<C: HasDataLayout>(&self, cx: &C) -> u128 {\n-        let Scalar { value, valid_range: ref v } = self.scalar;\n-        let bits = value.size(cx).bits();\n-        assert!(bits <= 128);\n-        let max_value = !0u128 >> (128 - bits);\n-\n-        // Find out how many values are outside the valid range.\n-        let niche = v.end().wrapping_add(1)..*v.start();\n-        niche.end.wrapping_sub(niche.start) & max_value\n-    }\n-\n-    fn reserve<C: HasDataLayout>(&self, cx: &C, count: u128) -> Option<(u128, Scalar)> {\n-        assert!(count > 0);\n-\n-        let Scalar { value, valid_range: ref v } = self.scalar;\n-        let bits = value.size(cx).bits();\n-        assert!(bits <= 128);\n-        let max_value = !0u128 >> (128 - bits);\n-\n-        if count > max_value {\n-            return None;\n-        }\n-\n-        // Compute the range of invalid values being reserved.\n-        let start = v.end().wrapping_add(1) & max_value;\n-        let end = v.end().wrapping_add(count) & max_value;\n-\n-        // If the `end` of our range is inside the valid range,\n-        // then we ran out of invalid values.\n-        // FIXME(eddyb) abstract this with a wraparound range type.\n-        let valid_range_contains = |x| {\n-            if v.start() <= v.end() {\n-                *v.start() <= x && x <= *v.end()\n-            } else {\n-                *v.start() <= x || x <= *v.end()\n-            }\n-        };\n-        if valid_range_contains(end) {\n-            return None;\n-        }\n-\n-        Some((start, Scalar { value, valid_range: *v.start()..=end }))\n-    }\n-}\n-\n impl<'tcx> LayoutCx<'tcx, TyCtxt<'tcx>> {\n     /// Find the offset of a niche leaf field, starting from\n     /// the given type and recursing through aggregates."}, {"sha": "b70ea916f0ba0efed12e363cdb844df56fd36c33", "filename": "src/librustc_target/abi/mod.rs", "status": "modified", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/dfbf4646f74a120fe736599faa81643a78aaf029/src%2Flibrustc_target%2Fabi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfbf4646f74a120fe736599faa81643a78aaf029/src%2Flibrustc_target%2Fabi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fabi%2Fmod.rs?ref=dfbf4646f74a120fe736599faa81643a78aaf029", "patch": "@@ -878,6 +878,57 @@ pub enum DiscriminantKind {\n     },\n }\n \n+pub struct Niche {\n+    pub offset: Size,\n+    pub scalar: Scalar,\n+}\n+\n+impl Niche {\n+    pub fn available<C: HasDataLayout>(&self, cx: &C) -> u128 {\n+        let Scalar { value, valid_range: ref v } = self.scalar;\n+        let bits = value.size(cx).bits();\n+        assert!(bits <= 128);\n+        let max_value = !0u128 >> (128 - bits);\n+\n+        // Find out how many values are outside the valid range.\n+        let niche = v.end().wrapping_add(1)..*v.start();\n+        niche.end.wrapping_sub(niche.start) & max_value\n+    }\n+\n+    pub fn reserve<C: HasDataLayout>(&self, cx: &C, count: u128) -> Option<(u128, Scalar)> {\n+        assert!(count > 0);\n+\n+        let Scalar { value, valid_range: ref v } = self.scalar;\n+        let bits = value.size(cx).bits();\n+        assert!(bits <= 128);\n+        let max_value = !0u128 >> (128 - bits);\n+\n+        if count > max_value {\n+            return None;\n+        }\n+\n+        // Compute the range of invalid values being reserved.\n+        let start = v.end().wrapping_add(1) & max_value;\n+        let end = v.end().wrapping_add(count) & max_value;\n+\n+        // If the `end` of our range is inside the valid range,\n+        // then we ran out of invalid values.\n+        // FIXME(eddyb) abstract this with a wraparound range type.\n+        let valid_range_contains = |x| {\n+            if v.start() <= v.end() {\n+                *v.start() <= x && x <= *v.end()\n+            } else {\n+                *v.start() <= x || x <= *v.end()\n+            }\n+        };\n+        if valid_range_contains(end) {\n+            return None;\n+        }\n+\n+        Some((start, Scalar { value, valid_range: *v.start()..=end }))\n+    }\n+}\n+\n #[derive(PartialEq, Eq, Hash, Debug)]\n pub struct LayoutDetails {\n     pub variants: Variants,"}]}