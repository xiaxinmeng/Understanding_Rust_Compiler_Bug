{"sha": "1fec68277a16e39389085fba462a05cd71797423", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFmZWM2ODI3N2ExNmUzOTM4OTA4NWZiYTQ2MmEwNWNkNzE3OTc0MjM=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-02-28T08:15:04Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-02-28T08:34:35Z"}, "message": "remove check_raw after reducing it to one use only", "tree": {"sha": "95d82eb68e3da9f606b1323ed01ac49fc8aabea1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/95d82eb68e3da9f606b1323ed01ac49fc8aabea1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1fec68277a16e39389085fba462a05cd71797423", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1fec68277a16e39389085fba462a05cd71797423", "html_url": "https://github.com/rust-lang/rust/commit/1fec68277a16e39389085fba462a05cd71797423", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1fec68277a16e39389085fba462a05cd71797423/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e9ab099d6f30328b03ec2d5515bd11e4852d1eca", "url": "https://api.github.com/repos/rust-lang/rust/commits/e9ab099d6f30328b03ec2d5515bd11e4852d1eca", "html_url": "https://github.com/rust-lang/rust/commit/e9ab099d6f30328b03ec2d5515bd11e4852d1eca"}], "stats": {"total": 39, "additions": 16, "deletions": 23}, "files": [{"sha": "2eb5f7ca87823a2d9fd20081ea3edb0d695f129a", "filename": "src/librustc/mir/interpret/value.rs", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1fec68277a16e39389085fba462a05cd71797423/src%2Flibrustc%2Fmir%2Finterpret%2Fvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1fec68277a16e39389085fba462a05cd71797423/src%2Flibrustc%2Fmir%2Finterpret%2Fvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fvalue.rs?ref=1fec68277a16e39389085fba462a05cd71797423", "patch": "@@ -382,19 +382,14 @@ impl<'tcx, Tag> Scalar<Tag> {\n         }\n     }\n \n-    #[inline(always)]\n-    pub fn check_raw(data: u128, size: u8, target_size: Size) {\n-        assert_eq!(target_size.bytes(), size as u64);\n-        assert_ne!(size, 0, \"you should never look at the bits of a ZST\");\n-        Scalar::check_data(data, size);\n-    }\n-\n     /// Do not call this method!  Use either `assert_bits` or `force_bits`.\n     #[inline]\n     pub fn to_bits(self, target_size: Size) -> InterpResult<'tcx, u128> {\n         match self {\n             Scalar::Raw { data, size } => {\n-                Self::check_raw(data, size, target_size);\n+                assert_eq!(target_size.bytes(), size as u64);\n+                assert_ne!(size, 0, \"you should never look at the bits of a ZST\");\n+                Scalar::check_data(data, size);\n                 Ok(data)\n             }\n             Scalar::Ptr(_) => throw_unsup!(ReadPointerAsBytes),"}, {"sha": "a4a122a737fe071ac8f0424f2748dd482b7b932b", "filename": "src/librustc_mir_build/hair/pattern/_match.rs", "status": "modified", "additions": 13, "deletions": 15, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/1fec68277a16e39389085fba462a05cd71797423/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1fec68277a16e39389085fba462a05cd71797423/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2F_match.rs?ref=1fec68277a16e39389085fba462a05cd71797423", "patch": "@@ -1396,21 +1396,19 @@ impl<'tcx> IntRange<'tcx> {\n     ) -> Option<IntRange<'tcx>> {\n         if let Some((target_size, bias)) = Self::integral_size_and_signed_bias(tcx, value.ty) {\n             let ty = value.ty;\n-            let val = if let ty::ConstKind::Value(ConstValue::Scalar(Scalar::Raw { data, size })) =\n-                value.val\n-            {\n-                // For this specific pattern we can skip a lot of effort and go\n-                // straight to the result, after doing a bit of checking. (We\n-                // could remove this branch and just use the next branch, which\n-                // is more general but much slower.)\n-                Scalar::<()>::check_raw(data, size, target_size);\n-                data\n-            } else if let Some(val) = value.try_eval_bits(tcx, param_env, ty) {\n-                // This is a more general form of the previous branch.\n-                val\n-            } else {\n-                return None;\n-            };\n+            let val = (|| {\n+                if let ty::ConstKind::Value(ConstValue::Scalar(scalar)) = value.val {\n+                    // For this specific pattern we can skip a lot of effort and go\n+                    // straight to the result, after doing a bit of checking. (We\n+                    // could remove this branch and just fall through, which\n+                    // is more general but much slower.)\n+                    if let Ok(bits) = scalar.to_bits_or_ptr(target_size, &tcx) {\n+                        return Some(bits);\n+                    }\n+                }\n+                // This is a more general form of the previous case.\n+                value.try_eval_bits(tcx, param_env, ty)\n+            })()?;\n             let val = val ^ bias;\n             Some(IntRange { range: val..=val, ty, span })\n         } else {"}]}