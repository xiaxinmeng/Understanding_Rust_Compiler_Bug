{"sha": "383a5df58cf29e640b1b77da301825a5abc86ce7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM4M2E1ZGY1OGNmMjllNjQwYjFiNzdkYTMwMTgyNWE1YWJjODZjZTc=", "commit": {"author": {"name": "Oliver Schneider", "email": "github35764891676564198441@oli-obk.de", "date": "2018-05-20T00:19:20Z"}, "committer": {"name": "Oliver Schneider", "email": "github35764891676564198441@oli-obk.de", "date": "2018-05-24T15:22:31Z"}, "message": "Enforce stability of const fn in promoteds", "tree": {"sha": "3bfd03735629fcfa9ec5db5dea4e27fcdcf2f2cc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3bfd03735629fcfa9ec5db5dea4e27fcdcf2f2cc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/383a5df58cf29e640b1b77da301825a5abc86ce7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/383a5df58cf29e640b1b77da301825a5abc86ce7", "html_url": "https://github.com/rust-lang/rust/commit/383a5df58cf29e640b1b77da301825a5abc86ce7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/383a5df58cf29e640b1b77da301825a5abc86ce7/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d022dd48cceaceffa931f87490c7921aa3c3f8b1", "url": "https://api.github.com/repos/rust-lang/rust/commits/d022dd48cceaceffa931f87490c7921aa3c3f8b1", "html_url": "https://github.com/rust-lang/rust/commit/d022dd48cceaceffa931f87490c7921aa3c3f8b1"}], "stats": {"total": 148, "additions": 131, "deletions": 17}, "files": [{"sha": "83c0d2579991d7e48c3536b2dfd06a9005af5ce1", "filename": "src/librustc_mir/transform/qualify_consts.rs", "status": "modified", "additions": 20, "deletions": 13, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/383a5df58cf29e640b1b77da301825a5abc86ce7/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/383a5df58cf29e640b1b77da301825a5abc86ce7/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs?ref=383a5df58cf29e640b1b77da301825a5abc86ce7", "patch": "@@ -279,7 +279,7 @@ impl<'a, 'tcx> Qualifier<'a, 'tcx, 'tcx> {\n             if let Place::Local(index) = *dest {\n                 if self.mir.local_kind(index) == LocalKind::Temp\n                 && self.temp_promotion_state[index].is_promotable() {\n-                    debug!(\"store to promotable temp {:?}\", index);\n+                    debug!(\"store to promotable temp {:?} ({:?})\", index, qualif);\n                     store(&mut self.local_qualif[index]);\n                 }\n             }\n@@ -969,10 +969,7 @@ This does not pose a problem by itself because they can't be accessed directly.\"\n                         feature: ref feature_name\n                     }),\n                 .. }) = self.tcx.lookup_stability(def_id) {\n-\n-                    // We are in a const or static initializer,\n-                    if self.mode != Mode::Fn &&\n-\n+                    if\n                         // feature-gate is not enabled,\n                         !self.tcx.features()\n                             .declared_lib_features\n@@ -985,14 +982,24 @@ This does not pose a problem by itself because they can't be accessed directly.\"\n                         // this doesn't come from a macro that has #[allow_internal_unstable]\n                         !self.span.allows_unstable()\n                     {\n-                        let mut err = self.tcx.sess.struct_span_err(self.span,\n-                            &format!(\"`{}` is not yet stable as a const fn\",\n-                                     self.tcx.item_path_str(def_id)));\n-                        help!(&mut err,\n-                              \"in Nightly builds, add `#![feature({})]` \\\n-                               to the crate attributes to enable\",\n-                              feature_name);\n-                        err.emit();\n+                        if self.mode == Mode::Fn {\n+                            // We are in a normal function\n+                            // with a turned off feature gate. We can still call the function\n+                            // but we can't promote it\n+                            self.qualif = Qualif::NOT_CONST;\n+                            debug!(\"unstable const fn\");\n+                        } else {\n+                            // inside a constant environment, not having the feature gate is\n+                            // an error\n+                            let mut err = self.tcx.sess.struct_span_err(self.span,\n+                                &format!(\"`{}` is not yet stable as a const fn\",\n+                                        self.tcx.item_path_str(def_id)));\n+                            help!(&mut err,\n+                                \"in Nightly builds, add `#![feature({})]` \\\n+                                to the crate attributes to enable\",\n+                                feature_name);\n+                            err.emit();\n+                        }\n                     }\n                 }\n             } else {"}, {"sha": "52ceb3ff5951d67ba657f2e5d60809564a387d94", "filename": "src/librustc_passes/rvalue_promotion.rs", "status": "modified", "additions": 24, "deletions": 4, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/383a5df58cf29e640b1b77da301825a5abc86ce7/src%2Flibrustc_passes%2Frvalue_promotion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/383a5df58cf29e640b1b77da301825a5abc86ce7/src%2Flibrustc_passes%2Frvalue_promotion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Frvalue_promotion.rs?ref=383a5df58cf29e640b1b77da301825a5abc86ce7", "patch": "@@ -38,6 +38,7 @@ use rustc::util::nodemap::{ItemLocalSet, NodeSet};\n use rustc::hir;\n use rustc_data_structures::sync::Lrc;\n use syntax::ast;\n+use syntax::attr;\n use syntax_pos::{Span, DUMMY_SP};\n use rustc::hir::intravisit::{self, Visitor, NestedVisitorMap};\n \n@@ -119,7 +120,7 @@ impl<'a, 'gcx> CheckCrateVisitor<'a, 'gcx> {\n         !ty.needs_drop(self.tcx, self.param_env)\n     }\n \n-    fn handle_const_fn_call(&mut self, def_id: DefId, ret_ty: Ty<'gcx>) {\n+    fn handle_const_fn_call(&mut self, def_id: DefId, ret_ty: Ty<'gcx>, span: Span) {\n         self.promotable &= self.type_has_only_promotable_values(ret_ty);\n \n         self.promotable &= if let Some(fn_id) = self.tcx.hir.as_local_node_id(def_id) {\n@@ -129,6 +130,25 @@ impl<'a, 'gcx> CheckCrateVisitor<'a, 'gcx> {\n         } else {\n             self.tcx.is_const_fn(def_id)\n         };\n+\n+        if let Some(&attr::Stability {\n+            rustc_const_unstable: Some(attr::RustcConstUnstable {\n+                feature: ref feature_name\n+            }),\n+        .. }) = self.tcx.lookup_stability(def_id) {\n+            self.promotable &=\n+                // feature-gate is enabled,\n+                self.tcx.features()\n+                    .declared_lib_features\n+                    .iter()\n+                    .any(|&(ref sym, _)| sym == feature_name) ||\n+\n+                // this comes from a crate with the feature-gate enabled,\n+                !def_id.is_local() ||\n+\n+                // this comes from a macro that has #[allow_internal_unstable]\n+                span.allows_unstable();\n+        }\n     }\n }\n \n@@ -359,12 +379,12 @@ fn check_expr<'a, 'tcx>(v: &mut CheckCrateVisitor<'a, 'tcx>, e: &hir::Expr, node\n                 Def::StructCtor(_, CtorKind::Fn) |\n                 Def::VariantCtor(_, CtorKind::Fn) => {}\n                 Def::Fn(did) => {\n-                    v.handle_const_fn_call(did, node_ty)\n+                    v.handle_const_fn_call(did, node_ty, e.span)\n                 }\n                 Def::Method(did) => {\n                     match v.tcx.associated_item(did).container {\n                         ty::ImplContainer(_) => {\n-                            v.handle_const_fn_call(did, node_ty)\n+                            v.handle_const_fn_call(did, node_ty, e.span)\n                         }\n                         ty::TraitContainer(_) => v.promotable = false\n                     }\n@@ -376,7 +396,7 @@ fn check_expr<'a, 'tcx>(v: &mut CheckCrateVisitor<'a, 'tcx>, e: &hir::Expr, node\n             if let Some(def) = v.tables.type_dependent_defs().get(e.hir_id) {\n                 let def_id = def.def_id();\n                 match v.tcx.associated_item(def_id).container {\n-                    ty::ImplContainer(_) => v.handle_const_fn_call(def_id, node_ty),\n+                    ty::ImplContainer(_) => v.handle_const_fn_call(def_id, node_ty, e.span),\n                     ty::TraitContainer(_) => v.promotable = false\n                 }\n             } else {"}, {"sha": "684fa1c997bf100a57c8242fba38039a06a3c531", "filename": "src/test/ui/const-eval/dont_promote_unstable_const_fn.nll.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/383a5df58cf29e640b1b77da301825a5abc86ce7/src%2Ftest%2Fui%2Fconst-eval%2Fdont_promote_unstable_const_fn.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/383a5df58cf29e640b1b77da301825a5abc86ce7/src%2Ftest%2Fui%2Fconst-eval%2Fdont_promote_unstable_const_fn.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-eval%2Fdont_promote_unstable_const_fn.nll.stderr?ref=383a5df58cf29e640b1b77da301825a5abc86ce7", "patch": "@@ -0,0 +1,21 @@\n+error: `foo` is not yet stable as a const fn\n+  --> $DIR/dont_promote_unstable_const_fn.rs:25:25\n+   |\n+LL | const fn bar() -> u32 { foo() } //~ ERROR `foo` is not yet stable as a const fn\n+   |                         ^^^^^\n+   |\n+   = help: in Nightly builds, add `#![feature(foo)]` to the crate attributes to enable\n+\n+error[E0597]: borrowed value does not live long enough\n+  --> $DIR/dont_promote_unstable_const_fn.rs:33:26\n+   |\n+LL |     let x: &'static _ = &std::time::Duration::from_millis(42).subsec_millis();\n+   |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ temporary value does not live long enough\n+LL | }\n+   | - temporary value only lives until here\n+   |\n+   = note: borrowed value must be valid for the static lifetime...\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0597`."}, {"sha": "a590e569947f82caf0fa7c4b6599b63c4c32e996", "filename": "src/test/ui/const-eval/dont_promote_unstable_const_fn.rs", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/383a5df58cf29e640b1b77da301825a5abc86ce7/src%2Ftest%2Fui%2Fconst-eval%2Fdont_promote_unstable_const_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/383a5df58cf29e640b1b77da301825a5abc86ce7/src%2Ftest%2Fui%2Fconst-eval%2Fdont_promote_unstable_const_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-eval%2Fdont_promote_unstable_const_fn.rs?ref=383a5df58cf29e640b1b77da301825a5abc86ce7", "patch": "@@ -0,0 +1,34 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![unstable(feature = \"humans\",\n+            reason = \"who ever let humans program computers,\n+            we're apparently really bad at it\",\n+            issue = \"0\")]\n+\n+#![feature(rustc_const_unstable, const_fn)]\n+#![feature(staged_api)]\n+\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[rustc_const_unstable(feature=\"foo\")]\n+const fn foo() -> u32 { 42 }\n+\n+fn meh() -> u32 { 42 }\n+\n+const fn bar() -> u32 { foo() } //~ ERROR `foo` is not yet stable as a const fn\n+\n+fn a() {\n+    let _: &'static u32 = &foo(); //~ ERROR does not live long enough\n+}\n+\n+fn main() {\n+    let _: &'static u32 = &meh(); //~ ERROR does not live long enough\n+    let x: &'static _ = &std::time::Duration::from_millis(42).subsec_millis();\n+}"}, {"sha": "7963cbb4e45691b56db9982621b3c33a9b3b4bf6", "filename": "src/test/ui/const-eval/dont_promote_unstable_const_fn.stderr", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/383a5df58cf29e640b1b77da301825a5abc86ce7/src%2Ftest%2Fui%2Fconst-eval%2Fdont_promote_unstable_const_fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/383a5df58cf29e640b1b77da301825a5abc86ce7/src%2Ftest%2Fui%2Fconst-eval%2Fdont_promote_unstable_const_fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-eval%2Fdont_promote_unstable_const_fn.stderr?ref=383a5df58cf29e640b1b77da301825a5abc86ce7", "patch": "@@ -0,0 +1,32 @@\n+error: `foo` is not yet stable as a const fn\n+  --> $DIR/dont_promote_unstable_const_fn.rs:25:25\n+   |\n+LL | const fn bar() -> u32 { foo() } //~ ERROR `foo` is not yet stable as a const fn\n+   |                         ^^^^^\n+   |\n+   = help: in Nightly builds, add `#![feature(foo)]` to the crate attributes to enable\n+\n+error[E0597]: borrowed value does not live long enough\n+  --> $DIR/dont_promote_unstable_const_fn.rs:28:28\n+   |\n+LL |     let _: &'static u32 = &foo(); //~ ERROR does not live long enough\n+   |                            ^^^^^ temporary value does not live long enough\n+LL | }\n+   | - temporary value only lives until here\n+   |\n+   = note: borrowed value must be valid for the static lifetime...\n+\n+error[E0597]: borrowed value does not live long enough\n+  --> $DIR/dont_promote_unstable_const_fn.rs:32:28\n+   |\n+LL |     let _: &'static u32 = &meh(); //~ ERROR does not live long enough\n+   |                            ^^^^^ temporary value does not live long enough\n+LL |     let x: &'static _ = &std::time::Duration::from_millis(42).subsec_millis();\n+LL | }\n+   | - temporary value only lives until here\n+   |\n+   = note: borrowed value must be valid for the static lifetime...\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0597`."}]}