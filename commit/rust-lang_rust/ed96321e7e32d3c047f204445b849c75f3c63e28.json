{"sha": "ed96321e7e32d3c047f204445b849c75f3c63e28", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVkOTYzMjFlN2UzMmQzYzA0N2YyMDQ0NDViODQ5Yzc1ZjNjNjNlMjg=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-10-31T15:13:33Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-10-31T15:26:06Z"}, "message": "fix aliasing issues in u128 formatting code", "tree": {"sha": "72919d378ae5d461452e0b7377856b801e1421de", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/72919d378ae5d461452e0b7377856b801e1421de"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ed96321e7e32d3c047f204445b849c75f3c63e28", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ed96321e7e32d3c047f204445b849c75f3c63e28", "html_url": "https://github.com/rust-lang/rust/commit/ed96321e7e32d3c047f204445b849c75f3c63e28", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ed96321e7e32d3c047f204445b849c75f3c63e28/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3478d7c3607ffbba629af2265c01002771e48c18", "url": "https://api.github.com/repos/rust-lang/rust/commits/3478d7c3607ffbba629af2265c01002771e48c18", "html_url": "https://github.com/rust-lang/rust/commit/3478d7c3607ffbba629af2265c01002771e48c18"}], "stats": {"total": 16, "additions": 11, "deletions": 5}, "files": [{"sha": "7a98210995ec75b4272199dd934f959f0f0c7fad", "filename": "library/core/src/fmt/num.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ed96321e7e32d3c047f204445b849c75f3c63e28/library%2Fcore%2Fsrc%2Ffmt%2Fnum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed96321e7e32d3c047f204445b849c75f3c63e28/library%2Fcore%2Fsrc%2Ffmt%2Fnum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ffmt%2Fnum.rs?ref=ed96321e7e32d3c047f204445b849c75f3c63e28", "patch": "@@ -595,7 +595,6 @@ fn fmt_u128(n: u128, is_nonnegative: bool, f: &mut fmt::Formatter<'_>) -> fmt::R\n     // 2^128 is about 3*10^38, so 39 gives an extra byte of space\n     let mut buf = [MaybeUninit::<u8>::uninit(); 39];\n     let mut curr = buf.len() as isize;\n-    let buf_ptr = MaybeUninit::slice_as_mut_ptr(&mut buf);\n \n     let (n, rem) = udiv_1e19(n);\n     parse_u64_into(rem, &mut buf, &mut curr);\n@@ -606,7 +605,11 @@ fn fmt_u128(n: u128, is_nonnegative: bool, f: &mut fmt::Formatter<'_>) -> fmt::R\n         // SAFETY: Guaranteed that we wrote at most 19 bytes, and there must be space\n         // remaining since it has length 39\n         unsafe {\n-            ptr::write_bytes(buf_ptr.offset(target), b'0', (curr - target) as usize);\n+            ptr::write_bytes(\n+                MaybeUninit::slice_as_mut_ptr(&mut buf).offset(target),\n+                b'0',\n+                (curr - target) as usize,\n+            );\n         }\n         curr = target;\n \n@@ -615,6 +618,9 @@ fn fmt_u128(n: u128, is_nonnegative: bool, f: &mut fmt::Formatter<'_>) -> fmt::R\n         // Should this following branch be annotated with unlikely?\n         if n != 0 {\n             let target = (buf.len() - 38) as isize;\n+            // The raw `buf_ptr` pointer is only valid until `buf` is used the next time,\n+            // buf `buf` is not used in this scope so we are good.\n+            let buf_ptr = MaybeUninit::slice_as_mut_ptr(&mut buf);\n             // SAFETY: At this point we wrote at most 38 bytes, pad up to that point,\n             // There can only be at most 1 digit remaining.\n             unsafe {\n@@ -629,7 +635,7 @@ fn fmt_u128(n: u128, is_nonnegative: bool, f: &mut fmt::Formatter<'_>) -> fmt::R\n     // UTF-8 since `DEC_DIGITS_LUT` is\n     let buf_slice = unsafe {\n         str::from_utf8_unchecked(slice::from_raw_parts(\n-            buf_ptr.offset(curr),\n+            MaybeUninit::slice_as_mut_ptr(&mut buf).offset(curr),\n             buf.len() - curr as usize,\n         ))\n     };"}, {"sha": "660b7db70be928ebebd5fcb5a36b98cc506044f3", "filename": "library/core/src/mem/maybe_uninit.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ed96321e7e32d3c047f204445b849c75f3c63e28/library%2Fcore%2Fsrc%2Fmem%2Fmaybe_uninit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed96321e7e32d3c047f204445b849c75f3c63e28/library%2Fcore%2Fsrc%2Fmem%2Fmaybe_uninit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmem%2Fmaybe_uninit.rs?ref=ed96321e7e32d3c047f204445b849c75f3c63e28", "patch": "@@ -842,13 +842,13 @@ impl<T> MaybeUninit<T> {\n     #[unstable(feature = \"maybe_uninit_slice\", issue = \"63569\")]\n     #[inline(always)]\n     pub fn slice_as_ptr(this: &[MaybeUninit<T>]) -> *const T {\n-        this as *const [MaybeUninit<T>] as *const T\n+        this.as_ptr() as *const T\n     }\n \n     /// Gets a mutable pointer to the first element of the array.\n     #[unstable(feature = \"maybe_uninit_slice\", issue = \"63569\")]\n     #[inline(always)]\n     pub fn slice_as_mut_ptr(this: &mut [MaybeUninit<T>]) -> *mut T {\n-        this as *mut [MaybeUninit<T>] as *mut T\n+        this.as_mut_ptr() as *mut T\n     }\n }"}]}