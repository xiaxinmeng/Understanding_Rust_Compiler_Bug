{"sha": "36d6acc4eea7e305058511c3fda19d459095b7f8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM2ZDZhY2M0ZWVhN2UzMDUwNTg1MTFjM2ZkYTE5ZDQ1OTA5NWI3Zjg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-07-17T20:36:19Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-07-17T20:36:19Z"}, "message": "auto merge of #15718 : treeman/rust/integer-doc, r=alexcrichton\n\nSimple usage examples for Integer methods. Also group `div_rem` and `div_mod_floor` together at the bottom of the trait, to reflect the documentation rendering.", "tree": {"sha": "8868ebb878dc19421f436b0b4739c6ecba77e5eb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8868ebb878dc19421f436b0b4739c6ecba77e5eb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/36d6acc4eea7e305058511c3fda19d459095b7f8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/36d6acc4eea7e305058511c3fda19d459095b7f8", "html_url": "https://github.com/rust-lang/rust/commit/36d6acc4eea7e305058511c3fda19d459095b7f8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/36d6acc4eea7e305058511c3fda19d459095b7f8/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ca24abd4d2d02dd96ef323074c9a21d44b3fd202", "url": "https://api.github.com/repos/rust-lang/rust/commits/ca24abd4d2d02dd96ef323074c9a21d44b3fd202", "html_url": "https://github.com/rust-lang/rust/commit/ca24abd4d2d02dd96ef323074c9a21d44b3fd202"}, {"sha": "5f843eea223ce952bbdfbb89d3cead40f88f6dd5", "url": "https://api.github.com/repos/rust-lang/rust/commits/5f843eea223ce952bbdfbb89d3cead40f88f6dd5", "html_url": "https://github.com/rust-lang/rust/commit/5f843eea223ce952bbdfbb89d3cead40f88f6dd5"}], "stats": {"total": 108, "additions": 90, "deletions": 18}, "files": [{"sha": "bcaebbd136809e36368fc6fa95b8280b89cecf42", "filename": "src/libnum/integer.rs", "status": "modified", "additions": 90, "deletions": 18, "changes": 108, "blob_url": "https://github.com/rust-lang/rust/blob/36d6acc4eea7e305058511c3fda19d459095b7f8/src%2Flibnum%2Finteger.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36d6acc4eea7e305058511c3fda19d459095b7f8/src%2Flibnum%2Finteger.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnum%2Finteger.rs?ref=36d6acc4eea7e305058511c3fda19d459095b7f8", "patch": "@@ -8,18 +8,12 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-//! Integer trait and functions\n+//! Integer trait and functions.\n \n pub trait Integer: Num + PartialOrd\n                  + Div<Self, Self>\n                  + Rem<Self, Self> {\n-    /// Simultaneous truncated integer division and modulus\n-    #[inline]\n-    fn div_rem(&self, other: &Self) -> (Self, Self) {\n-        (*self / *other, *self % *other)\n-    }\n-\n-    /// Floored integer division\n+    /// Floored integer division.\n     ///\n     /// # Examples\n     ///\n@@ -61,25 +55,103 @@ pub trait Integer: Num + PartialOrd\n     /// ~~~\n     fn mod_floor(&self, other: &Self) -> Self;\n \n-    /// Simultaneous floored integer division and modulus\n-    fn div_mod_floor(&self, other: &Self) -> (Self, Self) {\n-        (self.div_floor(other), self.mod_floor(other))\n-    }\n-\n-    /// Greatest Common Divisor (GCD)\n+    /// Greatest Common Divisor (GCD).\n+    ///\n+    /// # Examples\n+    ///\n+    /// ~~~\n+    /// # use num::Integer;\n+    /// assert_eq!(6i.gcd(&8), 2);\n+    /// assert_eq!(7i.gcd(&3), 1);\n+    /// ~~~\n     fn gcd(&self, other: &Self) -> Self;\n \n-    /// Lowest Common Multiple (LCM)\n+    /// Lowest Common Multiple (LCM).\n+    ///\n+    /// # Examples\n+    ///\n+    /// ~~~\n+    /// # use num::Integer;\n+    /// assert_eq!(7i.lcm(&3), 21);\n+    /// assert_eq!(2i.lcm(&4), 4);\n+    /// ~~~\n     fn lcm(&self, other: &Self) -> Self;\n \n-    /// Returns `true` if `other` divides evenly into `self`\n+    /// Returns `true` if `other` divides evenly into `self`.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ~~~\n+    /// # use num::Integer;\n+    /// assert_eq!(9i.divides(&3), true);\n+    /// assert_eq!(3i.divides(&9), false);\n+    /// ~~~\n     fn divides(&self, other: &Self) -> bool;\n \n-    /// Returns `true` if the number is even\n+    /// Returns `true` if the number is even.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ~~~\n+    /// # use num::Integer;\n+    /// assert_eq!(3i.is_even(), false);\n+    /// assert_eq!(4i.is_even(), true);\n+    /// ~~~\n     fn is_even(&self) -> bool;\n \n-    /// Returns `true` if the number is odd\n+    /// Returns `true` if the number is odd.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ~~~\n+    /// # use num::Integer;\n+    /// assert_eq!(3i.is_odd(), true);\n+    /// assert_eq!(4i.is_odd(), false);\n+    /// ~~~\n     fn is_odd(&self) -> bool;\n+\n+    /// Simultaneous truncated integer division and modulus.\n+    /// Returns `(quotient, remainder)`.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ~~~\n+    /// # use num::Integer;\n+    /// assert_eq!(( 8i).div_rem( &3), ( 2,  2));\n+    /// assert_eq!(( 8i).div_rem(&-3), (-2,  2));\n+    /// assert_eq!((-8i).div_rem( &3), (-2, -2));\n+    /// assert_eq!((-8i).div_rem(&-3), ( 2, -2));\n+    ///\n+    /// assert_eq!(( 1i).div_rem( &2), ( 0,  1));\n+    /// assert_eq!(( 1i).div_rem(&-2), ( 0,  1));\n+    /// assert_eq!((-1i).div_rem( &2), ( 0, -1));\n+    /// assert_eq!((-1i).div_rem(&-2), ( 0, -1));\n+    /// ~~~\n+    #[inline]\n+    fn div_rem(&self, other: &Self) -> (Self, Self) {\n+        (*self / *other, *self % *other)\n+    }\n+\n+    /// Simultaneous floored integer division and modulus.\n+    /// Returns `(quotient, remainder)`.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ~~~\n+    /// # use num::Integer;\n+    /// assert_eq!(( 8i).div_mod_floor( &3), ( 2,  2));\n+    /// assert_eq!(( 8i).div_mod_floor(&-3), (-3, -1));\n+    /// assert_eq!((-8i).div_mod_floor( &3), (-3,  1));\n+    /// assert_eq!((-8i).div_mod_floor(&-3), ( 2, -2));\n+    ///\n+    /// assert_eq!(( 1i).div_mod_floor( &2), ( 0,  1));\n+    /// assert_eq!(( 1i).div_mod_floor(&-2), (-1, -1));\n+    /// assert_eq!((-1i).div_mod_floor( &2), (-1,  1));\n+    /// assert_eq!((-1i).div_mod_floor(&-2), ( 0, -1));\n+    /// ~~~\n+    fn div_mod_floor(&self, other: &Self) -> (Self, Self) {\n+        (self.div_floor(other), self.mod_floor(other))\n+    }\n }\n \n /// Simultaneous integer division and modulus"}]}