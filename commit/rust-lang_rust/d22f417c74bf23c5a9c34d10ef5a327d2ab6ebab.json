{"sha": "d22f417c74bf23c5a9c34d10ef5a327d2ab6ebab", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQyMmY0MTdjNzRiZjIzYzVhOWMzNGQxMGVmNWEzMjdkMmFiNmViYWI=", "commit": {"author": {"name": "gareth", "email": "gareth@gareth-N56VM.(none)", "date": "2013-06-15T16:58:38Z"}, "committer": {"name": "gareth", "email": "gareth@gareth-N56VM.(none)", "date": "2013-06-15T16:58:38Z"}, "message": "Add IterBytes impls for float/f32/f64. This allows creating\nHashMaps with floats as keys.", "tree": {"sha": "1b2de8e661eb0a95094eed7eb741a577831055d8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1b2de8e661eb0a95094eed7eb741a577831055d8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d22f417c74bf23c5a9c34d10ef5a327d2ab6ebab", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d22f417c74bf23c5a9c34d10ef5a327d2ab6ebab", "html_url": "https://github.com/rust-lang/rust/commit/d22f417c74bf23c5a9c34d10ef5a327d2ab6ebab", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d22f417c74bf23c5a9c34d10ef5a327d2ab6ebab/comments", "author": null, "committer": null, "parents": [{"sha": "eac0200f18bfe19646ae5dce56acc325629224cb", "url": "https://api.github.com/repos/rust-lang/rust/commits/eac0200f18bfe19646ae5dce56acc325629224cb", "html_url": "https://github.com/rust-lang/rust/commit/eac0200f18bfe19646ae5dce56acc325629224cb"}], "stats": {"total": 41, "additions": 41, "deletions": 0}, "files": [{"sha": "2d33be03580c6fc6ac8303c016fe30fb24723499", "filename": "src/libstd/hash.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d22f417c74bf23c5a9c34d10ef5a327d2ab6ebab/src%2Flibstd%2Fhash.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d22f417c74bf23c5a9c34d10ef5a327d2ab6ebab/src%2Flibstd%2Fhash.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fhash.rs?ref=d22f417c74bf23c5a9c34d10ef5a327d2ab6ebab", "patch": "@@ -558,4 +558,15 @@ mod tests {\n             val & !(0xff << (byte * 8))\n         }\n     }\n+\n+    #[test]\n+    fn test_float_hashes_differ() {\n+        assert!(0.0.hash() != 1.0.hash());\n+        assert!(1.0.hash() != (-1.0).hash());\n+    }\n+\n+    #[test]\n+    fn test_float_hashes_of_zero() {\n+        assert_eq!(0.0.hash(), (-0.0).hash());\n+    }\n }"}, {"sha": "6d7820ffea5f2108cd4ae4b4281d9c433fc4c3a0", "filename": "src/libstd/to_bytes.rs", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/d22f417c74bf23c5a9c34d10ef5a327d2ab6ebab/src%2Flibstd%2Fto_bytes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d22f417c74bf23c5a9c34d10ef5a327d2ab6ebab/src%2Flibstd%2Fto_bytes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fto_bytes.rs?ref=d22f417c74bf23c5a9c34d10ef5a327d2ab6ebab", "patch": "@@ -14,6 +14,7 @@ The `ToBytes` and `IterBytes` traits\n \n */\n \n+use cast;\n use io;\n use io::Writer;\n use option::{None, Option, Some};\n@@ -190,6 +191,35 @@ impl IterBytes for int {\n     }\n }\n \n+impl IterBytes for float {\n+    #[inline(always)]\n+    fn iter_bytes(&self, lsb0: bool, f: Cb) -> bool {\n+        (*self as f64).iter_bytes(lsb0, f)\n+    }\n+}\n+\n+impl IterBytes for f32 {\n+    #[inline(always)]\n+    fn iter_bytes(&self, lsb0: bool, f: Cb) -> bool {\n+        let i: u32 = unsafe {\n+            // 0.0 == -0.0 so they should also have the same hashcode\n+            cast::transmute(if *self == -0.0 { 0.0 } else { *self })\n+        };\n+        i.iter_bytes(lsb0, f)\n+    }\n+}\n+\n+impl IterBytes for f64 {\n+    #[inline(always)]\n+    fn iter_bytes(&self, lsb0: bool, f: Cb) -> bool {\n+        let i: u64 = unsafe {\n+            // 0.0 == -0.0 so they should also have the same hashcode\n+            cast::transmute(if *self == -0.0 { 0.0 } else { *self })\n+        };\n+        i.iter_bytes(lsb0, f)\n+    }\n+}\n+\n impl<'self,A:IterBytes> IterBytes for &'self [A] {\n     #[inline(always)]\n     fn iter_bytes(&self, lsb0: bool, f: Cb) -> bool {"}]}