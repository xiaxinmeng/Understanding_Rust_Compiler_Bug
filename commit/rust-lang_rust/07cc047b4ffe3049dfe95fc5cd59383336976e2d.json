{"sha": "07cc047b4ffe3049dfe95fc5cd59383336976e2d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA3Y2MwNDdiNGZmZTMwNDlkZmU5NWZjNWNkNTkzODMzMzY5NzZlMmQ=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-04-11T12:58:00Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-04-11T13:29:33Z"}, "message": "minimize the API", "tree": {"sha": "69a1df4df350890544b5e6e1fcff9da68f1af351", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/69a1df4df350890544b5e6e1fcff9da68f1af351"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/07cc047b4ffe3049dfe95fc5cd59383336976e2d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/07cc047b4ffe3049dfe95fc5cd59383336976e2d", "html_url": "https://github.com/rust-lang/rust/commit/07cc047b4ffe3049dfe95fc5cd59383336976e2d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/07cc047b4ffe3049dfe95fc5cd59383336976e2d/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b6809b6695f9c4cec82ff98d73f7ff24f96cbecf", "url": "https://api.github.com/repos/rust-lang/rust/commits/b6809b6695f9c4cec82ff98d73f7ff24f96cbecf", "html_url": "https://github.com/rust-lang/rust/commit/b6809b6695f9c4cec82ff98d73f7ff24f96cbecf"}], "stats": {"total": 34, "additions": 11, "deletions": 23}, "files": [{"sha": "ec9af035f724ac277019c1cdc3d821315674513a", "filename": "crates/ra_hir/src/source_binder.rs", "status": "modified", "additions": 9, "deletions": 19, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/07cc047b4ffe3049dfe95fc5cd59383336976e2d/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07cc047b4ffe3049dfe95fc5cd59383336976e2d/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs?ref=07cc047b4ffe3049dfe95fc5cd59383336976e2d", "patch": "@@ -261,7 +261,8 @@ fn try_get_resolver_for_node(\n     }\n }\n \n-/// `SourceAnalyzer`\n+/// `SourceAnalyzer` is a convenience wrapper which exposes HIR API in terms of\n+/// original source files. It should not be used inside the HIR itself.\n #[derive(Debug)]\n pub struct SourceAnalyzer {\n     resolver: Resolver,\n@@ -274,7 +275,7 @@ pub enum PathResolution {\n     /// An item\n     Def(crate::ModuleDef),\n     /// A local binding (only value namespace)\n-    LocalBinding(crate::expr::PatId),\n+    LocalBinding(Either<AstPtr<ast::Pat>, AstPtr<ast::SelfParam>>),\n     /// A generic parameter\n     GenericParam(u32),\n     SelfType(crate::ImplBlock),\n@@ -332,25 +333,14 @@ impl SourceAnalyzer {\n         let hir_path = crate::Path::from_ast(path)?;\n         let res = self.resolver.resolve_path(db, &hir_path);\n         let res = res.clone().take_types().or_else(|| res.take_values())?;\n-        Some(res.into())\n-    }\n-\n-    pub fn pat_syntax(\n-        &self,\n-        _db: &impl HirDatabase,\n-        pat: crate::expr::PatId,\n-    ) -> Option<Either<AstPtr<ast::Pat>, AstPtr<ast::SelfParam>>> {\n-        self.body_source_map.as_ref()?.pat_syntax(pat)\n-    }\n-}\n-\n-impl From<crate::Resolution> for PathResolution {\n-    fn from(res: crate::Resolution) -> PathResolution {\n-        match res {\n+        let res = match res {\n             crate::Resolution::Def(it) => PathResolution::Def(it),\n-            crate::Resolution::LocalBinding(it) => PathResolution::LocalBinding(it),\n+            crate::Resolution::LocalBinding(it) => {\n+                PathResolution::LocalBinding(self.body_source_map.as_ref()?.pat_syntax(it)?)\n+            }\n             crate::Resolution::GenericParam(it) => PathResolution::GenericParam(it),\n             crate::Resolution::SelfType(it) => PathResolution::SelfType(it),\n-        }\n+        };\n+        Some(res)\n     }\n }"}, {"sha": "abcc682e70feee2cb5b7442b50d6c4ea2f5c48cc", "filename": "crates/ra_ide_api/src/goto_definition.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/07cc047b4ffe3049dfe95fc5cd59383336976e2d/crates%2Fra_ide_api%2Fsrc%2Fgoto_definition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07cc047b4ffe3049dfe95fc5cd59383336976e2d/crates%2Fra_ide_api%2Fsrc%2Fgoto_definition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fgoto_definition.rs?ref=07cc047b4ffe3049dfe95fc5cd59383336976e2d", "patch": "@@ -90,10 +90,8 @@ pub(crate) fn reference_definition(\n             match resolved {\n                 hir::PathResolution::Def(def) => return Exact(NavigationTarget::from_def(db, def)),\n                 hir::PathResolution::LocalBinding(pat) => {\n-                    if let Some(pat) = analyzer.pat_syntax(db, pat) {\n-                        let nav = NavigationTarget::from_pat(db, file_id, pat);\n-                        return Exact(nav);\n-                    }\n+                    let nav = NavigationTarget::from_pat(db, file_id, pat);\n+                    return Exact(nav);\n                 }\n                 hir::PathResolution::GenericParam(..) => {\n                     // FIXME: go to the generic param def"}]}