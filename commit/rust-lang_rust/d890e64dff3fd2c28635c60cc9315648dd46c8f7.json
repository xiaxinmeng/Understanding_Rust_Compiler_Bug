{"sha": "d890e64dff3fd2c28635c60cc9315648dd46c8f7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ4OTBlNjRkZmYzZmQyYzI4NjM1YzYwY2M5MzE1NjQ4ZGQ0NmM4Zjc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-10-05T11:41:59Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-10-05T11:41:59Z"}, "message": "Auto merge of #77549 - tmiasko:simplify-branch-same-fix, r=oli-obk\n\n Fix miscompile in SimplifyBranchSame\n\nCherry-picked from #77486, but with a different test case that used to be compiled incorrectly on both master & beta branches.", "tree": {"sha": "ff5218d31163334a9bdc1178b6efeb062ad71098", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ff5218d31163334a9bdc1178b6efeb062ad71098"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d890e64dff3fd2c28635c60cc9315648dd46c8f7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d890e64dff3fd2c28635c60cc9315648dd46c8f7", "html_url": "https://github.com/rust-lang/rust/commit/d890e64dff3fd2c28635c60cc9315648dd46c8f7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d890e64dff3fd2c28635c60cc9315648dd46c8f7/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "62bfcfd8a3b1603e2b5f5e2c011aa0f35f117af1", "url": "https://api.github.com/repos/rust-lang/rust/commits/62bfcfd8a3b1603e2b5f5e2c011aa0f35f117af1", "html_url": "https://github.com/rust-lang/rust/commit/62bfcfd8a3b1603e2b5f5e2c011aa0f35f117af1"}, {"sha": "f271957d89c8d694bd6b8963e4c21278e1cc0354", "url": "https://api.github.com/repos/rust-lang/rust/commits/f271957d89c8d694bd6b8963e4c21278e1cc0354", "html_url": "https://github.com/rust-lang/rust/commit/f271957d89c8d694bd6b8963e4c21278e1cc0354"}], "stats": {"total": 24, "additions": 23, "deletions": 1}, "files": [{"sha": "a4e7a5a94533d97f903a55309959fb985aa4a4e7", "filename": "compiler/rustc_mir/src/transform/simplify_try.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d890e64dff3fd2c28635c60cc9315648dd46c8f7/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fsimplify_try.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d890e64dff3fd2c28635c60cc9315648dd46c8f7/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fsimplify_try.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fsimplify_try.rs?ref=d890e64dff3fd2c28635c60cc9315648dd46c8f7", "patch": "@@ -630,7 +630,8 @@ impl<'a, 'tcx> SimplifyBranchSameOptimizationFinder<'a, 'tcx> {\n                 // All successor basic blocks must be equal or contain statements that are pairwise considered equal.\n                 for ((target_and_value_l,bb_l), (target_and_value_r,bb_r)) in iter_bbs_reachable.tuple_windows() {\n                     let trivial_checks = bb_l.is_cleanup == bb_r.is_cleanup\n-                    && bb_l.terminator().kind == bb_r.terminator().kind;\n+                                            && bb_l.terminator().kind == bb_r.terminator().kind\n+                                            && bb_l.statements.len() == bb_r.statements.len();\n                     let statement_check = || {\n                         bb_l.statements.iter().zip(&bb_r.statements).try_fold(StatementEquality::TrivialEqual, |acc,(l,r)| {\n                             let stmt_equality = self.statement_equality(*adt_matched_on, &l, target_and_value_l, &r, target_and_value_r);"}, {"sha": "d631c33d61f8415f889681379ceecc2cac7e12ba", "filename": "src/test/ui/mir/simplify-branch-same.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/d890e64dff3fd2c28635c60cc9315648dd46c8f7/src%2Ftest%2Fui%2Fmir%2Fsimplify-branch-same.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d890e64dff3fd2c28635c60cc9315648dd46c8f7/src%2Ftest%2Fui%2Fmir%2Fsimplify-branch-same.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmir%2Fsimplify-branch-same.rs?ref=d890e64dff3fd2c28635c60cc9315648dd46c8f7", "patch": "@@ -0,0 +1,21 @@\n+// Regression test for SimplifyBranchSame miscompilation.\n+// run-pass\n+\n+macro_rules! m {\n+    ($a:expr, $b:expr, $c:block) => {\n+        match $a {\n+            Lto::Fat | Lto::Thin => { $b; (); $c }\n+            Lto::No => { $b; () }\n+        }\n+    }\n+}\n+\n+pub enum Lto { No, Thin, Fat }\n+\n+fn f(mut cookie: u32, lto: Lto) -> u32 {\n+    let mut _a = false;\n+    m!(lto, _a = true, {cookie = 0});\n+    cookie\n+}\n+\n+fn main() { assert_eq!(f(42, Lto::Thin), 0) }"}]}