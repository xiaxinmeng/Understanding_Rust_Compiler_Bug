{"sha": "bec9f091348386a38489110a26b279f752163034", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJlYzlmMDkxMzQ4Mzg2YTM4NDg5MTEwYTI2YjI3OWY3NTIxNjMwMzQ=", "commit": {"author": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2018-01-28T09:07:26Z"}, "committer": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2018-01-28T09:07:26Z"}, "message": "Merge #18\n\n18: Comments r=matklad a=matklad", "tree": {"sha": "90ea82001ee09739ffa542d2a0a1bbb985559bb7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/90ea82001ee09739ffa542d2a0a1bbb985559bb7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bec9f091348386a38489110a26b279f752163034", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bec9f091348386a38489110a26b279f752163034", "html_url": "https://github.com/rust-lang/rust/commit/bec9f091348386a38489110a26b279f752163034", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bec9f091348386a38489110a26b279f752163034/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "parents": [{"sha": "092f9a6b98a1b0b4724888f7b24bac6f6c5c1b79", "url": "https://api.github.com/repos/rust-lang/rust/commits/092f9a6b98a1b0b4724888f7b24bac6f6c5c1b79", "html_url": "https://github.com/rust-lang/rust/commit/092f9a6b98a1b0b4724888f7b24bac6f6c5c1b79"}, {"sha": "d3dedcace8a5fb1f047ecad05d23dce8745252d5", "url": "https://api.github.com/repos/rust-lang/rust/commits/d3dedcace8a5fb1f047ecad05d23dce8745252d5", "html_url": "https://github.com/rust-lang/rust/commit/d3dedcace8a5fb1f047ecad05d23dce8745252d5"}], "stats": {"total": 63, "additions": 59, "deletions": 4}, "files": [{"sha": "89609bd77e61fbd04bbeb9e2d6e78bd982128493", "filename": "src/bin/gen.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bec9f091348386a38489110a26b279f752163034/src%2Fbin%2Fgen.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bec9f091348386a38489110a26b279f752163034/src%2Fbin%2Fgen.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fgen.rs?ref=bec9f091348386a38489110a26b279f752163034", "patch": "@@ -51,8 +51,12 @@ impl Grammar {\n             write!(acc, \"    {},\\n\", scream(kind)).unwrap();\n         }\n         acc.push_str(\"\\n\");\n-        acc.push_str(\"    TOMBSTONE = !0 - 1,\\n\");\n-        acc.push_str(\"    EOF = !0,\\n\");\n+        acc.push_str(\"    // Technical SyntaxKinds: they appear temporally during parsing,\\n\");\n+        acc.push_str(\"    // but never end up in the final tree\\n\");\n+        acc.push_str(\"    #[doc(hidden)]\\n\");\n+        acc.push_str(\"    TOMBSTONE,\\n\");\n+        acc.push_str(\"    #[doc(hidden)]\\n\");\n+        acc.push_str(\"    EOF,\\n\");\n         acc.push_str(\"}\\n\");\n         acc.push_str(\"pub(crate) use self::SyntaxKind::*;\\n\");\n         acc.push_str(\"\\n\");"}, {"sha": "7823c476c200488cf38c1ff794b19a4edae7f8c2", "filename": "src/parser/event_parser/mod.rs", "status": "modified", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/bec9f091348386a38489110a26b279f752163034/src%2Fparser%2Fevent_parser%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bec9f091348386a38489110a26b279f752163034/src%2Fparser%2Fevent_parser%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fparser%2Fevent_parser%2Fmod.rs?ref=bec9f091348386a38489110a26b279f752163034", "patch": "@@ -4,17 +4,64 @@ use {SyntaxKind, Token};\n mod parser;\n mod grammar;\n \n+/// `Parser` produces a flat list of `Event`s.\n+/// They are converted to a tree-structure in\n+/// a separate pass, via `TreeBuilder`.\n #[derive(Debug)]\n pub(crate) enum Event {\n+    /// This event signifies the start of the node.\n+    /// It should be either abandoned (in which case the\n+    /// `kind` is `TOMBSTONE`, and the event is ignored),\n+    /// or completed via a `Finish` event.\n+    ///\n+    /// All tokens between a `Start` and a `Finish` would\n+    /// become the children of the respective node.\n+    ///\n+    /// For left-recursive syntactic constructs, the parser produces\n+    /// a child node before it sees a parent. `forward_parent`\n+    /// exists to allow to tweak parent-child relationships.\n+    ///\n+    /// Consider this path\n+    ///\n+    /// foo::bar\n+    ///\n+    /// The events for it would look like this:\n+    ///\n+    ///\n+    /// START(PATH) IDENT('foo') FINISH START(PATH) COLONCOLON IDENT('bar') FINISH\n+    ///       |                          /\\\n+    ///       |                          |\n+    ///       +------forward-parent------+\n+    ///\n+    /// And the tree would look like this\n+    ///\n+    ///    +--PATH---------+\n+    ///    |   |           |\n+    ///    |   |           |\n+    ///    |  '::'       'bar'\n+    ///    |\n+    ///   PATH\n+    ///    |\n+    ///   'foo'\n+    ///\n+    /// See also `CompleteMarker::precede`.\n     Start {\n         kind: SyntaxKind,\n         forward_parent: Option<u32>,\n     },\n+\n+    /// Complete the previous `Start` event\n     Finish,\n+\n+    /// Produce a single leaf-element.\n+    /// `n_raw_tokens` is used to glue complex contextual tokens.\n+    /// For example, lexer tokenizes `>>` as `>`, `>`, and\n+    /// `n_raw_tokens = 2` is used to produced a single `>>`.\n     Token {\n         kind: SyntaxKind,\n         n_raw_tokens: u8,\n     },\n+\n     Error {\n         message: String,\n     },"}, {"sha": "cc9e74f8e84bd3c7676763f51a983f0261c28996", "filename": "src/syntax_kinds.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bec9f091348386a38489110a26b279f752163034/src%2Fsyntax_kinds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bec9f091348386a38489110a26b279f752163034/src%2Fsyntax_kinds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fsyntax_kinds.rs?ref=bec9f091348386a38489110a26b279f752163034", "patch": "@@ -92,8 +92,12 @@ pub enum SyntaxKind {\n     ALIAS,\n     VISIBILITY,\n \n-    TOMBSTONE = !0 - 1,\n-    EOF = !0,\n+    // Technical SyntaxKinds: they appear temporally during parsing,\n+    // but never end up in the final tree\n+    #[doc(hidden)]\n+    TOMBSTONE,\n+    #[doc(hidden)]\n+    EOF,\n }\n pub(crate) use self::SyntaxKind::*;\n "}]}