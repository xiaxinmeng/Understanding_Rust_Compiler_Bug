{"sha": "096dbf84c7acc78283adfa46eecd41d7355f6f3e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA5NmRiZjg0YzdhY2M3ODI4M2FkZmE0NmVlY2Q0MWQ3MzU1ZjZmM2U=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-02-09T20:27:03Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-02-09T20:27:03Z"}, "message": "Auto merge of #31425 - oli-obk:mir-pass-plugin, r=nagisa\n\ndepends on #31324\n\nr? @nagisa", "tree": {"sha": "f030b6aa9ee2e4a0ad8fa1fdf43d9181c27eab19", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f030b6aa9ee2e4a0ad8fa1fdf43d9181c27eab19"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/096dbf84c7acc78283adfa46eecd41d7355f6f3e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/096dbf84c7acc78283adfa46eecd41d7355f6f3e", "html_url": "https://github.com/rust-lang/rust/commit/096dbf84c7acc78283adfa46eecd41d7355f6f3e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/096dbf84c7acc78283adfa46eecd41d7355f6f3e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fc1c1183f32810a5b61ee9ee27a5683f14737994", "url": "https://api.github.com/repos/rust-lang/rust/commits/fc1c1183f32810a5b61ee9ee27a5683f14737994", "html_url": "https://github.com/rust-lang/rust/commit/fc1c1183f32810a5b61ee9ee27a5683f14737994"}, {"sha": "4b067183baca48c0705c20d9d9570607b99f81a9", "url": "https://api.github.com/repos/rust-lang/rust/commits/4b067183baca48c0705c20d9d9570607b99f81a9", "html_url": "https://github.com/rust-lang/rust/commit/4b067183baca48c0705c20d9d9570607b99f81a9"}], "stats": {"total": 251, "additions": 196, "deletions": 55}, "files": [{"sha": "3021727cb109f7a58f3ce6bc77df13481979d02a", "filename": "mk/crates.mk", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/096dbf84c7acc78283adfa46eecd41d7355f6f3e/mk%2Fcrates.mk", "raw_url": "https://github.com/rust-lang/rust/raw/096dbf84c7acc78283adfa46eecd41d7355f6f3e/mk%2Fcrates.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcrates.mk?ref=096dbf84c7acc78283adfa46eecd41d7355f6f3e", "patch": "@@ -106,7 +106,7 @@ DEPS_rustc_passes := syntax rustc core rustc_front\n DEPS_rustc_mir := rustc rustc_front syntax\n DEPS_rustc_resolve := arena rustc rustc_front log syntax\n DEPS_rustc_platform_intrinsics := rustc rustc_llvm\n-DEPS_rustc_plugin := rustc rustc_metadata syntax\n+DEPS_rustc_plugin := rustc rustc_metadata syntax rustc_mir\n DEPS_rustc_privacy := rustc rustc_front log syntax\n DEPS_rustc_trans := arena flate getopts graphviz libc rustc rustc_back rustc_mir \\\n                     log syntax serialize rustc_llvm rustc_front rustc_platform_intrinsics"}, {"sha": "53fd867e7fd487158d6a3002a5b2ea9dab468655", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/096dbf84c7acc78283adfa46eecd41d7355f6f3e/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096dbf84c7acc78283adfa46eecd41d7355f6f3e/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=096dbf84c7acc78283adfa46eecd41d7355f6f3e", "patch": "@@ -126,6 +126,8 @@ pub mod mir {\n     pub mod repr;\n     pub mod tcx;\n     pub mod visit;\n+    pub mod transform;\n+    pub mod mir_map;\n }\n \n pub mod session;"}, {"sha": "1e21d6aabe97b74f0f13ab498b727d7672d7abdc", "filename": "src/librustc/middle/cstore.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/096dbf84c7acc78283adfa46eecd41d7355f6f3e/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096dbf84c7acc78283adfa46eecd41d7355f6f3e/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcstore.rs?ref=096dbf84c7acc78283adfa46eecd41d7355f6f3e", "patch": "@@ -29,6 +29,7 @@ use middle::lang_items;\n use middle::ty::{self, Ty, VariantKind};\n use middle::def_id::{DefId, DefIndex};\n use mir::repr::Mir;\n+use mir::mir_map::MirMap;\n use session::Session;\n use session::search_paths::PathKind;\n use util::nodemap::{FnvHashMap, NodeMap, NodeSet};\n@@ -244,7 +245,7 @@ pub trait CrateStore<'tcx> : Any {\n                        item_symbols: &RefCell<NodeMap<String>>,\n                        link_meta: &LinkMeta,\n                        reachable: &NodeSet,\n-                       mir_map: &NodeMap<Mir<'tcx>>,\n+                       mir_map: &MirMap<'tcx>,\n                        krate: &hir::Crate) -> Vec<u8>;\n     fn metadata_encoding_version(&self) -> &[u8];\n }\n@@ -428,7 +429,7 @@ impl<'tcx> CrateStore<'tcx> for DummyCrateStore {\n                        item_symbols: &RefCell<NodeMap<String>>,\n                        link_meta: &LinkMeta,\n                        reachable: &NodeSet,\n-                       mir_map: &NodeMap<Mir<'tcx>>,\n+                       mir_map: &MirMap<'tcx>,\n                        krate: &hir::Crate) -> Vec<u8> { vec![] }\n     fn metadata_encoding_version(&self) -> &[u8] { unimplemented!() }\n }"}, {"sha": "aa24f6d89796971a3350ef62dc60a23d5d0c9b6c", "filename": "src/librustc/mir/mir_map.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/096dbf84c7acc78283adfa46eecd41d7355f6f3e/src%2Flibrustc%2Fmir%2Fmir_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096dbf84c7acc78283adfa46eecd41d7355f6f3e/src%2Flibrustc%2Fmir%2Fmir_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmir_map.rs?ref=096dbf84c7acc78283adfa46eecd41d7355f6f3e", "patch": "@@ -0,0 +1,28 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use util::nodemap::NodeMap;\n+use mir::repr::Mir;\n+use mir::transform::MirPass;\n+use middle::ty;\n+\n+pub struct MirMap<'tcx> {\n+    pub map: NodeMap<Mir<'tcx>>,\n+}\n+\n+impl<'tcx> MirMap<'tcx> {\n+    pub fn run_passes(&mut self, passes: &mut [Box<MirPass>], tcx: &ty::ctxt<'tcx>) {\n+        for (_, ref mut mir) in &mut self.map {\n+            for pass in &mut *passes {\n+                pass.run_on_mir(mir, tcx)\n+            }\n+        }\n+    }\n+}"}, {"sha": "0f18d8d282144428ff91f75689fad2a6dd4cf099", "filename": "src/librustc/mir/transform.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/096dbf84c7acc78283adfa46eecd41d7355f6f3e/src%2Flibrustc%2Fmir%2Ftransform.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096dbf84c7acc78283adfa46eecd41d7355f6f3e/src%2Flibrustc%2Fmir%2Ftransform.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Ftransform.rs?ref=096dbf84c7acc78283adfa46eecd41d7355f6f3e", "patch": "@@ -0,0 +1,16 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use mir::repr::Mir;\n+use middle::ty::ctxt;\n+\n+pub trait MirPass {\n+    fn run_on_mir<'tcx>(&mut self, mir: &mut Mir<'tcx>, tcx: &ctxt<'tcx>);\n+}"}, {"sha": "d2f8d3f09fd7c9fb35e6ceb648ba01b3deb3561d", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/096dbf84c7acc78283adfa46eecd41d7355f6f3e/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096dbf84c7acc78283adfa46eecd41d7355f6f3e/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=096dbf84c7acc78283adfa46eecd41d7355f6f3e", "patch": "@@ -13,6 +13,7 @@ use middle::cstore::CrateStore;\n use middle::dependency_format;\n use session::search_paths::PathKind;\n use util::nodemap::{NodeMap, FnvHashMap};\n+use mir::transform::MirPass;\n \n use syntax::ast::{NodeId, NodeIdAssigner, Name};\n use syntax::codemap::{Span, MultiSpan};\n@@ -59,6 +60,7 @@ pub struct Session {\n     pub lint_store: RefCell<lint::LintStore>,\n     pub lints: RefCell<NodeMap<Vec<(lint::LintId, Span, String)>>>,\n     pub plugin_llvm_passes: RefCell<Vec<String>>,\n+    pub plugin_mir_passes: RefCell<Vec<Box<MirPass>>>,\n     pub plugin_attributes: RefCell<Vec<(String, AttributeType)>>,\n     pub crate_types: RefCell<Vec<config::CrateType>>,\n     pub dependency_formats: RefCell<dependency_format::Dependencies>,\n@@ -475,6 +477,7 @@ pub fn build_session_(sopts: config::Options,\n         lint_store: RefCell::new(lint::LintStore::new()),\n         lints: RefCell::new(NodeMap()),\n         plugin_llvm_passes: RefCell::new(Vec::new()),\n+        plugin_mir_passes: RefCell::new(Vec::new()),\n         plugin_attributes: RefCell::new(Vec::new()),\n         crate_types: RefCell::new(Vec::new()),\n         dependency_formats: RefCell::new(FnvHashMap()),"}, {"sha": "6c5b577e0d1a4f5dc7af579347fe5029c57c2e3d", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/096dbf84c7acc78283adfa46eecd41d7355f6f3e/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096dbf84c7acc78283adfa46eecd41d7355f6f3e/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=096dbf84c7acc78283adfa46eecd41d7355f6f3e", "patch": "@@ -12,7 +12,7 @@ use rustc::dep_graph::DepGraph;\n use rustc::front;\n use rustc::front::map as hir_map;\n use rustc_mir as mir;\n-use rustc_mir::mir_map::MirMap;\n+use rustc::mir::mir_map::MirMap;\n use rustc::session::{Session, CompileResult, compile_result_from_err_count};\n use rustc::session::config::{self, Input, OutputFilenames, OutputType};\n use rustc::session::search_paths::PathKind;\n@@ -545,7 +545,7 @@ pub fn phase_2_configure_and_expand(sess: &Session,\n     });\n \n     let Registry { syntax_exts, early_lint_passes, late_lint_passes, lint_groups,\n-                   llvm_passes, attributes, .. } = registry;\n+                   llvm_passes, attributes, mir_passes, .. } = registry;\n \n     try!(sess.track_errors(|| {\n         let mut ls = sess.lint_store.borrow_mut();\n@@ -561,6 +561,7 @@ pub fn phase_2_configure_and_expand(sess: &Session,\n         }\n \n         *sess.plugin_llvm_passes.borrow_mut() = llvm_passes;\n+        *sess.plugin_mir_passes.borrow_mut() = mir_passes;\n         *sess.plugin_attributes.borrow_mut() = attributes.clone();\n     }));\n \n@@ -843,11 +844,15 @@ pub fn phase_3_run_analysis_passes<'tcx, F, R>(sess: &'tcx Session,\n              \"match checking\",\n              || middle::check_match::check_crate(tcx));\n \n-        let mir_map =\n+        let mut mir_map =\n             time(time_passes,\n                  \"MIR dump\",\n                  || mir::mir_map::build_mir_for_crate(tcx));\n \n+        time(time_passes,\n+             \"MIR passes\",\n+             || mir_map.run_passes(&mut sess.plugin_mir_passes.borrow_mut(), tcx));\n+\n         time(time_passes,\n              \"liveness checking\",\n              || middle::liveness::check_crate(tcx));"}, {"sha": "06a2727ea28ae8c3229531995e586ab3709ceb95", "filename": "src/librustc_metadata/csearch.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/096dbf84c7acc78283adfa46eecd41d7355f6f3e/src%2Flibrustc_metadata%2Fcsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096dbf84c7acc78283adfa46eecd41d7355f6f3e/src%2Flibrustc_metadata%2Fcsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcsearch.rs?ref=096dbf84c7acc78283adfa46eecd41d7355f6f3e", "patch": "@@ -23,6 +23,7 @@ use middle::def_id::{DefId, DefIndex};\n \n use rustc::front::map as hir_map;\n use rustc::mir::repr::Mir;\n+use rustc::mir::mir_map::MirMap;\n use rustc::util::nodemap::{FnvHashMap, NodeMap, NodeSet};\n \n use std::cell::RefCell;\n@@ -502,7 +503,7 @@ impl<'tcx> CrateStore<'tcx> for cstore::CStore {\n                        item_symbols: &RefCell<NodeMap<String>>,\n                        link_meta: &LinkMeta,\n                        reachable: &NodeSet,\n-                       mir_map: &NodeMap<Mir<'tcx>>,\n+                       mir_map: &MirMap<'tcx>,\n                        krate: &hir::Crate) -> Vec<u8>\n     {\n         let encode_inlined_item: encoder::EncodeInlinedItem ="}, {"sha": "50030ced0abb5740ccc8ac42fe8e8ad788122dd3", "filename": "src/librustc_metadata/encoder.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/096dbf84c7acc78283adfa46eecd41d7355f6f3e/src%2Flibrustc_metadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096dbf84c7acc78283adfa46eecd41d7355f6f3e/src%2Flibrustc_metadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fencoder.rs?ref=096dbf84c7acc78283adfa46eecd41d7355f6f3e", "patch": "@@ -30,7 +30,7 @@ use middle::ty::{self, Ty};\n use rustc::back::svh::Svh;\n use rustc::front::map::{LinkedPath, PathElem, PathElems};\n use rustc::front::map as ast_map;\n-use rustc::mir::repr::Mir;\n+use rustc::mir::mir_map::MirMap;\n use rustc::session::config;\n use rustc::util::nodemap::{FnvHashMap, NodeMap, NodeSet};\n \n@@ -66,7 +66,7 @@ pub struct EncodeParams<'a, 'tcx: 'a> {\n     pub cstore: &'a cstore::CStore,\n     pub encode_inlined_item: EncodeInlinedItem<'a>,\n     pub reachable: &'a NodeSet,\n-    pub mir_map: &'a NodeMap<Mir<'tcx>>,\n+    pub mir_map: &'a MirMap<'tcx>,\n }\n \n pub struct EncodeContext<'a, 'tcx: 'a> {\n@@ -79,7 +79,7 @@ pub struct EncodeContext<'a, 'tcx: 'a> {\n     pub encode_inlined_item: RefCell<EncodeInlinedItem<'a>>,\n     pub type_abbrevs: tyencode::abbrev_map<'tcx>,\n     pub reachable: &'a NodeSet,\n-    pub mir_map: &'a NodeMap<Mir<'tcx>>,\n+    pub mir_map: &'a MirMap<'tcx>,\n }\n \n impl<'a, 'tcx> EncodeContext<'a,'tcx> {\n@@ -824,7 +824,7 @@ fn encode_inlined_item(ecx: &EncodeContext,\n }\n \n fn encode_mir(ecx: &EncodeContext, rbml_w: &mut Encoder, node_id: NodeId) {\n-    if let Some(mir) = ecx.mir_map.get(&node_id) {\n+    if let Some(mir) = ecx.mir_map.map.get(&node_id) {\n         rbml_w.start_tag(tag_mir as usize);\n         rbml_w.emit_opaque(|opaque_encoder| {\n             tls::enter_encoding_context(ecx, opaque_encoder, |_, opaque_encoder| {\n@@ -1447,7 +1447,7 @@ fn my_visit_expr(expr: &hir::Expr,\n \n             ecx.tcx.map.with_path(expr.id, |path| encode_path(rbml_w, path));\n \n-            assert!(ecx.mir_map.contains_key(&expr.id));\n+            assert!(ecx.mir_map.map.contains_key(&expr.id));\n             encode_mir(ecx, rbml_w, expr.id);\n \n             rbml_w.end_tag();"}, {"sha": "0e641bf679d1187c40cea7ac308cb3bb6b12b225", "filename": "src/librustc_mir/mir_map.rs", "status": "modified", "additions": 18, "deletions": 17, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/096dbf84c7acc78283adfa46eecd41d7355f6f3e/src%2Flibrustc_mir%2Fmir_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096dbf84c7acc78283adfa46eecd41d7355f6f3e/src%2Flibrustc_mir%2Fmir_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmir_map.rs?ref=096dbf84c7acc78283adfa46eecd41d7355f6f3e", "patch": "@@ -17,33 +17,34 @@\n //! - `#[rustc_mir(pretty=\"file.mir\")]`\n \n extern crate syntax;\n-extern crate rustc;\n extern crate rustc_front;\n \n use build;\n use graphviz;\n use pretty;\n-use transform::{simplify_cfg, MirPass};\n+use transform::simplify_cfg;\n use rustc::dep_graph::DepNode;\n use rustc::mir::repr::Mir;\n use hair::cx::Cx;\n use std::fs::File;\n \n-use self::rustc::middle::infer;\n-use self::rustc::middle::region::CodeExtentData;\n-use self::rustc::middle::ty::{self, Ty};\n-use self::rustc::util::common::ErrorReported;\n-use self::rustc::util::nodemap::NodeMap;\n-use self::rustc_front::hir;\n-use self::rustc_front::intravisit::{self, Visitor};\n-use self::syntax::ast;\n-use self::syntax::attr::AttrMetaMethods;\n-use self::syntax::codemap::Span;\n-\n-pub type MirMap<'tcx> = NodeMap<Mir<'tcx>>;\n+use rustc::mir::transform::MirPass;\n+use rustc::mir::mir_map::MirMap;\n+use rustc::middle::infer;\n+use rustc::middle::region::CodeExtentData;\n+use rustc::middle::ty::{self, Ty};\n+use rustc::util::common::ErrorReported;\n+use rustc::util::nodemap::NodeMap;\n+use rustc_front::hir;\n+use rustc_front::intravisit::{self, Visitor};\n+use syntax::ast;\n+use syntax::attr::AttrMetaMethods;\n+use syntax::codemap::Span;\n \n pub fn build_mir_for_crate<'tcx>(tcx: &ty::ctxt<'tcx>) -> MirMap<'tcx> {\n-    let mut map = NodeMap();\n+    let mut map = MirMap {\n+        map: NodeMap(),\n+    };\n     {\n         let mut dump = OuterDump {\n             tcx: tcx,\n@@ -147,7 +148,7 @@ impl<'a, 'm, 'tcx> Visitor<'tcx> for InnerDump<'a,'m,'tcx> {\n \n         match build_mir(Cx::new(&infcx), implicit_arg_tys, id, span, decl, body) {\n             Ok(mut mir) => {\n-                simplify_cfg::SimplifyCfg::new().run_on_mir(&mut mir);\n+                simplify_cfg::SimplifyCfg::new().run_on_mir(&mut mir, self.tcx);\n \n                 let meta_item_list = self.attr\n                                          .iter()\n@@ -182,7 +183,7 @@ impl<'a, 'm, 'tcx> Visitor<'tcx> for InnerDump<'a,'m,'tcx> {\n                     }\n                 }\n \n-                let previous = self.map.insert(id, mir);\n+                let previous = self.map.map.insert(id, mir);\n                 assert!(previous.is_none());\n             }\n             Err(ErrorReported) => {}"}, {"sha": "b927ab489f100c55aad8124089d118f55ccac317", "filename": "src/librustc_mir/transform/erase_regions.rs", "status": "modified", "additions": 15, "deletions": 13, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/096dbf84c7acc78283adfa46eecd41d7355f6f3e/src%2Flibrustc_mir%2Ftransform%2Ferase_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096dbf84c7acc78283adfa46eecd41d7355f6f3e/src%2Flibrustc_mir%2Ftransform%2Ferase_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Ferase_regions.rs?ref=096dbf84c7acc78283adfa46eecd41d7355f6f3e", "patch": "@@ -15,24 +15,26 @@\n use rustc::middle::ty;\n use rustc::mir::repr::*;\n use rustc::mir::visit::MutVisitor;\n-use mir_map::MirMap;\n-use transform::MirPass;\n+use rustc::mir::mir_map::MirMap;\n+use rustc::mir::transform::MirPass;\n \n pub fn erase_regions<'tcx>(tcx: &ty::ctxt<'tcx>, mir_map: &mut MirMap<'tcx>) {\n-    let mut eraser = EraseRegions::new(tcx);\n+    let mut eraser = EraseRegions;\n \n-    for mir in mir_map.iter_mut().map(|(_, v)| v) {\n-        eraser.run_on_mir(mir);\n+    for (_, mir) in &mut mir_map.map {\n+        eraser.run_on_mir(mir, tcx);\n     }\n }\n \n-pub struct EraseRegions<'a, 'tcx: 'a> {\n+pub struct EraseRegions;\n+\n+struct EraseRegionsVisitor<'a, 'tcx: 'a> {\n     tcx: &'a ty::ctxt<'tcx>,\n }\n \n-impl<'a, 'tcx> EraseRegions<'a, 'tcx> {\n-    pub fn new(tcx: &'a ty::ctxt<'tcx>) -> EraseRegions<'a, 'tcx> {\n-        EraseRegions {\n+impl<'a, 'tcx> EraseRegionsVisitor<'a, 'tcx> {\n+    pub fn new(tcx: &'a ty::ctxt<'tcx>) -> Self {\n+        EraseRegionsVisitor {\n             tcx: tcx\n         }\n     }\n@@ -56,13 +58,13 @@ impl<'a, 'tcx> EraseRegions<'a, 'tcx> {\n     }\n }\n \n-impl<'a, 'tcx> MirPass<'tcx> for EraseRegions<'a, 'tcx> {\n-    fn run_on_mir(&mut self, mir: &mut Mir<'tcx>) {\n-        self.visit_mir(mir);\n+impl MirPass for EraseRegions {\n+    fn run_on_mir<'tcx>(&mut self, mir: &mut Mir<'tcx>, tcx: &ty::ctxt<'tcx>) {\n+        EraseRegionsVisitor::new(tcx).visit_mir(mir);\n     }\n }\n \n-impl<'a, 'tcx> MutVisitor<'tcx> for EraseRegions<'a, 'tcx> {\n+impl<'a, 'tcx> MutVisitor<'tcx> for EraseRegionsVisitor<'a, 'tcx> {\n     fn visit_mir(&mut self, mir: &mut Mir<'tcx>) {\n         self.erase_regions_return_ty(&mut mir.return_ty);\n         self.erase_regions_tys(mir.var_decls.iter_mut().map(|d| &mut d.ty));"}, {"sha": "41ea4469734f77f7d6c9691eea3efa9cd332995b", "filename": "src/librustc_mir/transform/mod.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/096dbf84c7acc78283adfa46eecd41d7355f6f3e/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096dbf84c7acc78283adfa46eecd41d7355f6f3e/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fmod.rs?ref=096dbf84c7acc78283adfa46eecd41d7355f6f3e", "patch": "@@ -11,9 +11,3 @@\n pub mod simplify_cfg;\n pub mod erase_regions;\n mod util;\n-\n-use rustc::mir::repr::Mir;\n-\n-pub trait MirPass<'tcx> {\n-    fn run_on_mir(&mut self, mir: &mut Mir<'tcx>);\n-}"}, {"sha": "17c5b5f7c3cffec94bc4eb95889bb4f7bc7ef1c1", "filename": "src/librustc_mir/transform/simplify_cfg.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/096dbf84c7acc78283adfa46eecd41d7355f6f3e/src%2Flibrustc_mir%2Ftransform%2Fsimplify_cfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096dbf84c7acc78283adfa46eecd41d7355f6f3e/src%2Flibrustc_mir%2Ftransform%2Fsimplify_cfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fsimplify_cfg.rs?ref=096dbf84c7acc78283adfa46eecd41d7355f6f3e", "patch": "@@ -11,7 +11,7 @@\n use rustc::middle::const_eval::ConstVal;\n use rustc::mir::repr::*;\n use transform::util;\n-use transform::MirPass;\n+use rustc::mir::transform::MirPass;\n \n pub struct SimplifyCfg;\n \n@@ -118,8 +118,8 @@ impl SimplifyCfg {\n     }\n }\n \n-impl<'tcx> MirPass<'tcx> for SimplifyCfg {\n-    fn run_on_mir(&mut self, mir: &mut Mir<'tcx>) {\n+impl MirPass for SimplifyCfg {\n+    fn run_on_mir<'tcx>(&mut self, mir: &mut Mir<'tcx>, _: &::rustc::middle::ty::ctxt<'tcx>) {\n         let mut changed = true;\n         while changed {\n             changed = self.simplify_branches(mir);"}, {"sha": "464899d5d4fe390e61ebf53c8509d8dc6e801f3f", "filename": "src/librustc_plugin/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/096dbf84c7acc78283adfa46eecd41d7355f6f3e/src%2Flibrustc_plugin%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096dbf84c7acc78283adfa46eecd41d7355f6f3e/src%2Flibrustc_plugin%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_plugin%2Flib.rs?ref=096dbf84c7acc78283adfa46eecd41d7355f6f3e", "patch": "@@ -71,6 +71,7 @@\n extern crate rustc;\n extern crate rustc_front;\n extern crate rustc_metadata;\n+extern crate rustc_mir;\n \n pub use self::registry::Registry;\n "}, {"sha": "a51fd58db88dd1cda706cba1b62616d93b35a7e1", "filename": "src/librustc_plugin/registry.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/096dbf84c7acc78283adfa46eecd41d7355f6f3e/src%2Flibrustc_plugin%2Fregistry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096dbf84c7acc78283adfa46eecd41d7355f6f3e/src%2Flibrustc_plugin%2Fregistry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_plugin%2Fregistry.rs?ref=096dbf84c7acc78283adfa46eecd41d7355f6f3e", "patch": "@@ -13,6 +13,8 @@\n use rustc::lint::{EarlyLintPassObject, LateLintPassObject, LintId, Lint};\n use rustc::session::Session;\n \n+use rustc::mir::transform::MirPass;\n+\n use syntax::ext::base::{SyntaxExtension, NamedSyntaxExtension, NormalTT};\n use syntax::ext::base::{IdentTT, MultiModifier, MultiDecorator};\n use syntax::ext::base::{MacroExpanderFn, MacroRulesTT};\n@@ -53,6 +55,9 @@ pub struct Registry<'a> {\n     #[doc(hidden)]\n     pub late_lint_passes: Vec<LateLintPassObject>,\n \n+    #[doc(hidden)]\n+    pub mir_passes: Vec<Box<MirPass>>,\n+\n     #[doc(hidden)]\n     pub lint_groups: HashMap<&'static str, Vec<LintId>>,\n \n@@ -76,6 +81,7 @@ impl<'a> Registry<'a> {\n             lint_groups: HashMap::new(),\n             llvm_passes: vec!(),\n             attributes: vec!(),\n+            mir_passes: Vec::new(),\n         }\n     }\n \n@@ -134,6 +140,11 @@ impl<'a> Registry<'a> {\n         self.lint_groups.insert(name, to.into_iter().map(|x| LintId::of(x)).collect());\n     }\n \n+    /// Register a MIR pass\n+    pub fn register_mir_pass(&mut self, pass: Box<MirPass>) {\n+        self.mir_passes.push(pass);\n+    }\n+\n     /// Register an LLVM pass.\n     ///\n     /// Registration with LLVM itself is handled through static C++ objects with"}, {"sha": "720ec3f16891c252308053732461e5898746a824", "filename": "src/librustc_trans/trans/base.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/096dbf84c7acc78283adfa46eecd41d7355f6f3e/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096dbf84c7acc78283adfa46eecd41d7355f6f3e/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fbase.rs?ref=096dbf84c7acc78283adfa46eecd41d7355f6f3e", "patch": "@@ -48,7 +48,7 @@ use middle::ty::adjustment::CustomCoerceUnsized;\n use rustc::dep_graph::DepNode;\n use rustc::front::map as hir_map;\n use rustc::util::common::time;\n-use rustc_mir::mir_map::MirMap;\n+use rustc::mir::mir_map::MirMap;\n use session::config::{self, NoDebugInfo, FullDebugInfo};\n use session::Session;\n use trans::_match;\n@@ -1596,7 +1596,7 @@ pub fn new_fn_ctxt<'a, 'tcx>(ccx: &'a CrateContext<'a, 'tcx>,\n         false\n     };\n \n-    let mir = ccx.mir_map().get(&id);\n+    let mir = ccx.mir_map().map.get(&id);\n \n     let mut fcx = FunctionContext {\n         mir: mir,"}, {"sha": "df86685e236bdcdf0893b43f28165300f9e87e9e", "filename": "src/librustc_trans/trans/collector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/096dbf84c7acc78283adfa46eecd41d7355f6f3e/src%2Flibrustc_trans%2Ftrans%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096dbf84c7acc78283adfa46eecd41d7355f6f3e/src%2Flibrustc_trans%2Ftrans%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcollector.rs?ref=096dbf84c7acc78283adfa46eecd41d7355f6f3e", "patch": "@@ -400,7 +400,7 @@ fn load_mir<'a, 'tcx: 'a>(ccx: &CrateContext<'a, 'tcx>,\n \n     if def_id.is_local() {\n         let node_id = ccx.tcx().map.as_local_node_id(def_id).unwrap();\n-        let mir_opt = ccx.mir_map().get(&node_id);\n+        let mir_opt = ccx.mir_map().map.get(&node_id);\n         let mir = errors::expect(ccx.sess().diagnostic(),\n                              mir_opt,\n                              mir_not_found_error_message);"}, {"sha": "b2ebaac665be3d05b73134c73947164e0b4e6b1f", "filename": "src/librustc_trans/trans/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/096dbf84c7acc78283adfa46eecd41d7355f6f3e/src%2Flibrustc_trans%2Ftrans%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096dbf84c7acc78283adfa46eecd41d7355f6f3e/src%2Flibrustc_trans%2Ftrans%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcontext.rs?ref=096dbf84c7acc78283adfa46eecd41d7355f6f3e", "patch": "@@ -15,7 +15,7 @@ use middle::cstore::LinkMeta;\n use middle::def::ExportMap;\n use middle::def_id::DefId;\n use middle::traits;\n-use rustc_mir::mir_map::MirMap;\n+use rustc::mir::mir_map::MirMap;\n use trans::adt;\n use trans::base;\n use trans::builder::Builder;"}, {"sha": "df9ea4ab012e7dc9cabab129296cc0a4236378e4", "filename": "src/test/auxiliary/dummy_mir_pass.rs", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/096dbf84c7acc78283adfa46eecd41d7355f6f3e/src%2Ftest%2Fauxiliary%2Fdummy_mir_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096dbf84c7acc78283adfa46eecd41d7355f6f3e/src%2Ftest%2Fauxiliary%2Fdummy_mir_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fdummy_mir_pass.rs?ref=096dbf84c7acc78283adfa46eecd41d7355f6f3e", "patch": "@@ -0,0 +1,52 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// force-host\n+\n+#![feature(plugin_registrar, rustc_private)]\n+#![feature(box_syntax)]\n+\n+#[macro_use] extern crate rustc;\n+extern crate rustc_front;\n+extern crate rustc_plugin;\n+extern crate syntax;\n+\n+use rustc::mir::transform::MirPass;\n+use rustc::mir::repr::{Mir, Literal};\n+use rustc::mir::visit::MutVisitor;\n+use rustc::middle::ty;\n+use rustc::middle::const_eval::ConstVal;\n+use rustc::lint::{LateContext, LintContext, LintPass, LateLintPass, LateLintPassObject, LintArray};\n+use rustc_plugin::Registry;\n+use rustc_front::hir;\n+use syntax::attr;\n+\n+struct Pass;\n+\n+impl MirPass for Pass {\n+    fn run_on_mir<'tcx>(&mut self, mir: &mut Mir<'tcx>, tcx: &ty::ctxt<'tcx>) {\n+        Visitor.visit_mir(mir)\n+    }\n+}\n+\n+struct Visitor;\n+\n+impl<'tcx> MutVisitor<'tcx> for Visitor {\n+    fn visit_literal(&mut self, literal: &mut Literal<'tcx>) {\n+        if let Literal::Value { value: ConstVal::Int(ref mut i @ 11) } = *literal {\n+            *i = 42;\n+        }\n+    }\n+}\n+\n+#[plugin_registrar]\n+pub fn plugin_registrar(reg: &mut Registry) {\n+    reg.register_mir_pass(box Pass);\n+}"}, {"sha": "acf11e241033cccf6ab5b8e4c8053555201d9943", "filename": "src/test/run-pass-fulldeps/mir-pass.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/096dbf84c7acc78283adfa46eecd41d7355f6f3e/src%2Ftest%2Frun-pass-fulldeps%2Fmir-pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096dbf84c7acc78283adfa46eecd41d7355f6f3e/src%2Ftest%2Frun-pass-fulldeps%2Fmir-pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fmir-pass.rs?ref=096dbf84c7acc78283adfa46eecd41d7355f6f3e", "patch": "@@ -0,0 +1,24 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// aux-build:dummy_mir_pass.rs\n+// ignore-stage1\n+\n+#![feature(plugin, rustc_attrs)]\n+#![plugin(dummy_mir_pass)]\n+\n+#[rustc_mir]\n+fn math() -> i32 {\n+    11\n+}\n+\n+pub fn main() {\n+    assert_eq!(math(), 42);\n+}"}]}