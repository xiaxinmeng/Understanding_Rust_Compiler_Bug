{"sha": "192c7dbb6dbd0b2c176101ed2fe785901b2a457d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE5MmM3ZGJiNmRiZDBiMmMxNzYxMDFlZDJmZTc4NTkwMWIyYTQ1N2Q=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-11-25T18:37:55Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-11-25T18:37:55Z"}, "message": "Auto merge of #79326 - Aaron1011:fix/builtin-macro-stmt, r=petrochenkov\n\nAlways invoke statement attributes on the statement itself\n\nThis is preparation for PR #78296, which will require us to handle\nstatement items in addition to normal items.", "tree": {"sha": "ae4dd579e3ce5c0b042a1ed0aa58ef6288e5cf15", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ae4dd579e3ce5c0b042a1ed0aa58ef6288e5cf15"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/192c7dbb6dbd0b2c176101ed2fe785901b2a457d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/192c7dbb6dbd0b2c176101ed2fe785901b2a457d", "html_url": "https://github.com/rust-lang/rust/commit/192c7dbb6dbd0b2c176101ed2fe785901b2a457d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/192c7dbb6dbd0b2c176101ed2fe785901b2a457d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "db79d2f63780613e700cb58b4339c48287555ae0", "url": "https://api.github.com/repos/rust-lang/rust/commits/db79d2f63780613e700cb58b4339c48287555ae0", "html_url": "https://github.com/rust-lang/rust/commit/db79d2f63780613e700cb58b4339c48287555ae0"}, {"sha": "baefba80b733f1676f141a033424ec0d257b09d9", "url": "https://api.github.com/repos/rust-lang/rust/commits/baefba80b733f1676f141a033424ec0d257b09d9", "html_url": "https://github.com/rust-lang/rust/commit/baefba80b733f1676f141a033424ec0d257b09d9"}], "stats": {"total": 688, "additions": 658, "deletions": 30}, "files": [{"sha": "f583825fbb3c5070aa4d38d3620de70bb3eadb5f", "filename": "compiler/rustc_ast/src/token.rs", "status": "modified", "additions": 14, "deletions": 7, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/192c7dbb6dbd0b2c176101ed2fe785901b2a457d/compiler%2Frustc_ast%2Fsrc%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/192c7dbb6dbd0b2c176101ed2fe785901b2a457d/compiler%2Frustc_ast%2Fsrc%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Ftoken.rs?ref=192c7dbb6dbd0b2c176101ed2fe785901b2a457d", "patch": "@@ -785,13 +785,20 @@ impl Nonterminal {\n     /// See issue #73345 for more details.\n     /// FIXME(#73933): Remove this eventually.\n     pub fn pretty_printing_compatibility_hack(&self) -> bool {\n-        if let NtItem(item) = self {\n-            let name = item.ident.name;\n-            if name == sym::ProceduralMasqueradeDummyType || name == sym::ProcMacroHack {\n-                if let ast::ItemKind::Enum(enum_def, _) = &item.kind {\n-                    if let [variant] = &*enum_def.variants {\n-                        return variant.ident.name == sym::Input;\n-                    }\n+        let item = match self {\n+            NtItem(item) => item,\n+            NtStmt(stmt) => match &stmt.kind {\n+                ast::StmtKind::Item(item) => item,\n+                _ => return false,\n+            },\n+            _ => return false,\n+        };\n+\n+        let name = item.ident.name;\n+        if name == sym::ProceduralMasqueradeDummyType || name == sym::ProcMacroHack {\n+            if let ast::ItemKind::Enum(enum_def, _) = &item.kind {\n+                if let [variant] = &*enum_def.variants {\n+                    return variant.ident.name == sym::Input;\n                 }\n             }\n         }"}, {"sha": "8c7e85f1eeb775920a493e1974bf05294066bf49", "filename": "compiler/rustc_builtin_macros/src/deriving/mod.rs", "status": "modified", "additions": 21, "deletions": 1, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/192c7dbb6dbd0b2c176101ed2fe785901b2a457d/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/192c7dbb6dbd0b2c176101ed2fe785901b2a457d/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fmod.rs?ref=192c7dbb6dbd0b2c176101ed2fe785901b2a457d", "patch": "@@ -54,7 +54,27 @@ impl MultiItemModifier for BuiltinDerive {\n         // so we are doing it here in a centralized way.\n         let span = ecx.with_def_site_ctxt(span);\n         let mut items = Vec::new();\n-        (self.0)(ecx, span, meta_item, &item, &mut |a| items.push(a));\n+        match item {\n+            Annotatable::Stmt(stmt) => {\n+                if let ast::StmtKind::Item(item) = stmt.into_inner().kind {\n+                    (self.0)(ecx, span, meta_item, &Annotatable::Item(item), &mut |a| {\n+                        // Cannot use 'ecx.stmt_item' here, because we need to pass 'ecx'\n+                        // to the function\n+                        items.push(Annotatable::Stmt(P(ast::Stmt {\n+                            id: ast::DUMMY_NODE_ID,\n+                            kind: ast::StmtKind::Item(a.expect_item()),\n+                            span,\n+                            tokens: None,\n+                        })));\n+                    });\n+                } else {\n+                    unreachable!(\"should have already errored on non-item statement\")\n+                }\n+            }\n+            _ => {\n+                (self.0)(ecx, span, meta_item, &item, &mut |a| items.push(a));\n+            }\n+        }\n         ExpandResult::Ready(items)\n     }\n }"}, {"sha": "e976805d9dd2070b58e3a1ee6cccfb1122602219", "filename": "compiler/rustc_builtin_macros/src/global_allocator.rs", "status": "modified", "additions": 19, "deletions": 3, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/192c7dbb6dbd0b2c176101ed2fe785901b2a457d/compiler%2Frustc_builtin_macros%2Fsrc%2Fglobal_allocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/192c7dbb6dbd0b2c176101ed2fe785901b2a457d/compiler%2Frustc_builtin_macros%2Fsrc%2Fglobal_allocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fglobal_allocator.rs?ref=192c7dbb6dbd0b2c176101ed2fe785901b2a457d", "patch": "@@ -4,7 +4,7 @@ use rustc_ast::expand::allocator::{\n     AllocatorKind, AllocatorMethod, AllocatorTy, ALLOCATOR_METHODS,\n };\n use rustc_ast::ptr::P;\n-use rustc_ast::{self as ast, Attribute, Expr, FnHeader, FnSig, Generics, Param};\n+use rustc_ast::{self as ast, Attribute, Expr, FnHeader, FnSig, Generics, Param, StmtKind};\n use rustc_ast::{ItemKind, Mutability, Stmt, Ty, TyKind, Unsafe};\n use rustc_expand::base::{Annotatable, ExtCtxt};\n use rustc_span::symbol::{kw, sym, Ident, Symbol};\n@@ -14,14 +14,25 @@ pub fn expand(\n     ecx: &mut ExtCtxt<'_>,\n     _span: Span,\n     meta_item: &ast::MetaItem,\n-    item: Annotatable,\n+    mut item: Annotatable,\n ) -> Vec<Annotatable> {\n     check_builtin_macro_attribute(ecx, meta_item, sym::global_allocator);\n \n     let not_static = |item: Annotatable| {\n         ecx.sess.parse_sess.span_diagnostic.span_err(item.span(), \"allocators must be statics\");\n         vec![item]\n     };\n+    let orig_item = item.clone();\n+    let mut is_stmt = false;\n+\n+    // Allow using `#[global_allocator]` on an item statement\n+    if let Annotatable::Stmt(stmt) = &item {\n+        if let StmtKind::Item(item_) = &stmt.kind {\n+            item = Annotatable::Item(item_.clone());\n+            is_stmt = true;\n+        }\n+    }\n+\n     let item = match item {\n         Annotatable::Item(item) => match item.kind {\n             ItemKind::Static(..) => item,\n@@ -41,9 +52,14 @@ pub fn expand(\n     let const_ty = ecx.ty(span, TyKind::Tup(Vec::new()));\n     let const_body = ecx.expr_block(ecx.block(span, stmts));\n     let const_item = ecx.item_const(span, Ident::new(kw::Underscore, span), const_ty, const_body);\n+    let const_item = if is_stmt {\n+        Annotatable::Stmt(P(ecx.stmt_item(span, const_item)))\n+    } else {\n+        Annotatable::Item(const_item)\n+    };\n \n     // Return the original item and the new methods.\n-    vec![Annotatable::Item(item), Annotatable::Item(const_item)]\n+    vec![orig_item, const_item]\n }\n \n struct AllocFnFactory<'a, 'b> {"}, {"sha": "25d3f46da6cdc323f615c2476e29096c232a3a29", "filename": "compiler/rustc_builtin_macros/src/test.rs", "status": "modified", "additions": 30, "deletions": 10, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/192c7dbb6dbd0b2c176101ed2fe785901b2a457d/compiler%2Frustc_builtin_macros%2Fsrc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/192c7dbb6dbd0b2c176101ed2fe785901b2a457d/compiler%2Frustc_builtin_macros%2Fsrc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Ftest.rs?ref=192c7dbb6dbd0b2c176101ed2fe785901b2a457d", "patch": "@@ -4,6 +4,7 @@ use crate::util::check_builtin_macro_attribute;\n \n use rustc_ast as ast;\n use rustc_ast::attr;\n+use rustc_ast::ptr::P;\n use rustc_ast_pretty::pprust;\n use rustc_expand::base::*;\n use rustc_session::Session;\n@@ -78,8 +79,16 @@ pub fn expand_test_or_bench(\n         return vec![];\n     }\n \n-    let item = match item {\n-        Annotatable::Item(i) => i,\n+    let (item, is_stmt) = match item {\n+        Annotatable::Item(i) => (i, false),\n+        Annotatable::Stmt(stmt) if matches!(stmt.kind, ast::StmtKind::Item(_)) => {\n+            // FIXME: Use an 'if let' guard once they are implemented\n+            if let ast::StmtKind::Item(i) = stmt.into_inner().kind {\n+                (i, true)\n+            } else {\n+                unreachable!()\n+            }\n+        }\n         other => {\n             cx.struct_span_err(\n                 other.span(),\n@@ -304,14 +313,25 @@ pub fn expand_test_or_bench(\n \n     tracing::debug!(\"synthetic test item:\\n{}\\n\", pprust::item_to_string(&test_const));\n \n-    vec![\n-        // Access to libtest under a hygienic name\n-        Annotatable::Item(test_extern),\n-        // The generated test case\n-        Annotatable::Item(test_const),\n-        // The original item\n-        Annotatable::Item(item),\n-    ]\n+    if is_stmt {\n+        vec![\n+            // Access to libtest under a hygienic name\n+            Annotatable::Stmt(P(cx.stmt_item(sp, test_extern))),\n+            // The generated test case\n+            Annotatable::Stmt(P(cx.stmt_item(sp, test_const))),\n+            // The original item\n+            Annotatable::Stmt(P(cx.stmt_item(sp, item))),\n+        ]\n+    } else {\n+        vec![\n+            // Access to libtest under a hygienic name\n+            Annotatable::Item(test_extern),\n+            // The generated test case\n+            Annotatable::Item(test_const),\n+            // The original item\n+            Annotatable::Item(item),\n+        ]\n+    }\n }\n \n fn item_path(mod_path: &[Ident], item_ident: &Ident) -> String {"}, {"sha": "1b5c06a96bcbd863ab8b76790dd9f3392757d621", "filename": "compiler/rustc_expand/src/base.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/192c7dbb6dbd0b2c176101ed2fe785901b2a457d/compiler%2Frustc_expand%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/192c7dbb6dbd0b2c176101ed2fe785901b2a457d/compiler%2Frustc_expand%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fbase.rs?ref=192c7dbb6dbd0b2c176101ed2fe785901b2a457d", "patch": "@@ -234,6 +234,15 @@ impl Annotatable {\n \n     pub fn derive_allowed(&self) -> bool {\n         match *self {\n+            Annotatable::Stmt(ref stmt) => match stmt.kind {\n+                ast::StmtKind::Item(ref item) => match item.kind {\n+                    ast::ItemKind::Struct(..)\n+                    | ast::ItemKind::Enum(..)\n+                    | ast::ItemKind::Union(..) => true,\n+                    _ => false,\n+                },\n+                _ => false,\n+            },\n             Annotatable::Item(ref item) => match item.kind {\n                 ast::ItemKind::Struct(..) | ast::ItemKind::Enum(..) | ast::ItemKind::Union(..) => {\n                     true"}, {"sha": "ce560c6c178274aef2608e559f1b474cfe48f1e2", "filename": "compiler/rustc_expand/src/expand.rs", "status": "modified", "additions": 21, "deletions": 4, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/192c7dbb6dbd0b2c176101ed2fe785901b2a457d/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/192c7dbb6dbd0b2c176101ed2fe785901b2a457d/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs?ref=192c7dbb6dbd0b2c176101ed2fe785901b2a457d", "patch": "@@ -795,7 +795,14 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n             | Annotatable::TraitItem(_)\n             | Annotatable::ImplItem(_)\n             | Annotatable::ForeignItem(_) => return,\n-            Annotatable::Stmt(_) => \"statements\",\n+            Annotatable::Stmt(stmt) => {\n+                // Attributes are stable on item statements,\n+                // but unstable on all other kinds of statements\n+                if stmt.is_item() {\n+                    return;\n+                }\n+                \"statements\"\n+            }\n             Annotatable::Expr(_) => \"expressions\",\n             Annotatable::Arm(..)\n             | Annotatable::Field(..)\n@@ -1266,9 +1273,19 @@ impl<'a, 'b> MutVisitor for InvocationCollector<'a, 'b> {\n \n         // we'll expand attributes on expressions separately\n         if !stmt.is_expr() {\n-            // FIXME: Handle custom attributes on statements (#15701).\n-            let attr =\n-                if stmt.is_item() { None } else { self.take_first_attr_no_derive(&mut stmt) };\n+            let attr = if stmt.is_item() {\n+                // FIXME: Implement proper token collection for statements\n+                if let StmtKind::Item(item) = &mut stmt.kind {\n+                    stmt.tokens = item.tokens.take()\n+                } else {\n+                    unreachable!()\n+                };\n+                self.take_first_attr(&mut stmt)\n+            } else {\n+                // Ignore derives on non-item statements for backwards compatibility.\n+                // This will result in a unused attribute warning\n+                self.take_first_attr_no_derive(&mut stmt)\n+            };\n \n             if let Some(attr) = attr {\n                 return self"}, {"sha": "36707a1ae272da6b61bdbb3389dba5cd7302c105", "filename": "compiler/rustc_expand/src/proc_macro.rs", "status": "modified", "additions": 20, "deletions": 1, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/192c7dbb6dbd0b2c176101ed2fe785901b2a457d/compiler%2Frustc_expand%2Fsrc%2Fproc_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/192c7dbb6dbd0b2c176101ed2fe785901b2a457d/compiler%2Frustc_expand%2Fsrc%2Fproc_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fproc_macro.rs?ref=192c7dbb6dbd0b2c176101ed2fe785901b2a457d", "patch": "@@ -1,6 +1,7 @@\n use crate::base::{self, *};\n use crate::proc_macro_server;\n \n+use rustc_ast::ptr::P;\n use rustc_ast::token;\n use rustc_ast::tokenstream::{TokenStream, TokenTree};\n use rustc_ast::{self as ast, *};\n@@ -74,8 +75,20 @@ impl MultiItemModifier for ProcMacroDerive {\n         _meta_item: &ast::MetaItem,\n         item: Annotatable,\n     ) -> ExpandResult<Vec<Annotatable>, Annotatable> {\n+        // We need special handling for statement items\n+        // (e.g. `fn foo() { #[derive(Debug)] struct Bar; }`)\n+        let mut is_stmt = false;\n         let item = match item {\n             Annotatable::Item(item) => token::NtItem(item),\n+            Annotatable::Stmt(stmt) => {\n+                is_stmt = true;\n+                assert!(stmt.is_item());\n+\n+                // A proc macro can't observe the fact that we're passing\n+                // them an `NtStmt` - it can only see the underlying tokens\n+                // of the wrapped item\n+                token::NtStmt(stmt.into_inner())\n+            }\n             _ => unreachable!(),\n         };\n         let input = if item.pretty_printing_compatibility_hack() {\n@@ -106,7 +119,13 @@ impl MultiItemModifier for ProcMacroDerive {\n         loop {\n             match parser.parse_item() {\n                 Ok(None) => break,\n-                Ok(Some(item)) => items.push(Annotatable::Item(item)),\n+                Ok(Some(item)) => {\n+                    if is_stmt {\n+                        items.push(Annotatable::Stmt(P(ecx.stmt_item(span, item))));\n+                    } else {\n+                        items.push(Annotatable::Item(item));\n+                    }\n+                }\n                 Err(mut err) => {\n                     err.emit();\n                     break;"}, {"sha": "03c10a43248988b805a643f97dd0ca606fe79c99", "filename": "src/test/ui/proc-macro/allowed-attr-stmt-expr.rs", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/192c7dbb6dbd0b2c176101ed2fe785901b2a457d/src%2Ftest%2Fui%2Fproc-macro%2Fallowed-attr-stmt-expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/192c7dbb6dbd0b2c176101ed2fe785901b2a457d/src%2Ftest%2Fui%2Fproc-macro%2Fallowed-attr-stmt-expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fallowed-attr-stmt-expr.rs?ref=192c7dbb6dbd0b2c176101ed2fe785901b2a457d", "patch": "@@ -0,0 +1,59 @@\n+// aux-build:attr-stmt-expr.rs\n+// aux-build:test-macros.rs\n+// compile-flags: -Z span-debug\n+// check-pass\n+\n+#![feature(proc_macro_hygiene)]\n+#![feature(stmt_expr_attributes)]\n+#![feature(rustc_attrs)]\n+#![allow(dead_code)]\n+\n+#![no_std] // Don't load unnecessary hygiene information from std\n+extern crate std;\n+\n+extern crate attr_stmt_expr;\n+extern crate test_macros;\n+use attr_stmt_expr::{expect_let, expect_print_stmt, expect_expr, expect_print_expr};\n+use test_macros::print_attr;\n+use std::println;\n+\n+fn print_str(string: &'static str) {\n+    // macros are handled a bit differently\n+    #[expect_print_expr]\n+    println!(\"{}\", string)\n+}\n+\n+macro_rules! make_stmt {\n+    ($stmt:stmt) => {\n+        $stmt\n+    }\n+}\n+\n+macro_rules! second_make_stmt {\n+    ($stmt:stmt) => {\n+        make_stmt!($stmt);\n+    }\n+}\n+\n+\n+fn main() {\n+    make_stmt!(struct Foo {});\n+\n+    #[print_attr]\n+    #[expect_let]\n+    let string = \"Hello, world!\";\n+\n+    #[print_attr]\n+    #[expect_print_stmt]\n+    println!(\"{}\", string);\n+\n+    #[print_attr]\n+    second_make_stmt!(#[allow(dead_code)] struct Bar {});\n+\n+    #[print_attr]\n+    #[rustc_dummy]\n+    struct Other {};\n+\n+    #[expect_expr]\n+    print_str(\"string\")\n+}"}, {"sha": "0c7ac4fb682aeef3c325505345dad8533ae4b707", "filename": "src/test/ui/proc-macro/allowed-attr-stmt-expr.stdout", "status": "added", "additions": 187, "deletions": 0, "changes": 187, "blob_url": "https://github.com/rust-lang/rust/blob/192c7dbb6dbd0b2c176101ed2fe785901b2a457d/src%2Ftest%2Fui%2Fproc-macro%2Fallowed-attr-stmt-expr.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/192c7dbb6dbd0b2c176101ed2fe785901b2a457d/src%2Ftest%2Fui%2Fproc-macro%2Fallowed-attr-stmt-expr.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fallowed-attr-stmt-expr.stdout?ref=192c7dbb6dbd0b2c176101ed2fe785901b2a457d", "patch": "@@ -0,0 +1,187 @@\n+PRINT-ATTR INPUT (DISPLAY): #[expect_let] let string = \"Hello, world!\" ;\n+PRINT-ATTR INPUT (DEBUG): TokenStream [\n+    Punct {\n+        ch: '#',\n+        spacing: Alone,\n+        span: $DIR/allowed-attr-stmt-expr.rs:1:1: 1:1 (#0),\n+    },\n+    Group {\n+        delimiter: Bracket,\n+        stream: TokenStream [\n+            Ident {\n+                ident: \"expect_let\",\n+                span: $DIR/allowed-attr-stmt-expr.rs:1:1: 1:1 (#0),\n+            },\n+        ],\n+        span: $DIR/allowed-attr-stmt-expr.rs:1:1: 1:1 (#0),\n+    },\n+    Ident {\n+        ident: \"let\",\n+        span: $DIR/allowed-attr-stmt-expr.rs:1:1: 1:1 (#0),\n+    },\n+    Ident {\n+        ident: \"string\",\n+        span: $DIR/allowed-attr-stmt-expr.rs:1:1: 1:1 (#0),\n+    },\n+    Punct {\n+        ch: '=',\n+        spacing: Alone,\n+        span: $DIR/allowed-attr-stmt-expr.rs:1:1: 1:1 (#0),\n+    },\n+    Literal {\n+        kind: Str,\n+        symbol: \"Hello, world!\",\n+        suffix: None,\n+        span: $DIR/allowed-attr-stmt-expr.rs:1:1: 1:1 (#0),\n+    },\n+    Punct {\n+        ch: ';',\n+        spacing: Alone,\n+        span: $DIR/allowed-attr-stmt-expr.rs:1:1: 1:1 (#0),\n+    },\n+]\n+PRINT-ATTR INPUT (DISPLAY): #[expect_print_stmt] println ! (\"{}\", string) ;\n+PRINT-ATTR INPUT (DEBUG): TokenStream [\n+    Punct {\n+        ch: '#',\n+        spacing: Alone,\n+        span: $DIR/allowed-attr-stmt-expr.rs:1:1: 1:1 (#0),\n+    },\n+    Group {\n+        delimiter: Bracket,\n+        stream: TokenStream [\n+            Ident {\n+                ident: \"expect_print_stmt\",\n+                span: $DIR/allowed-attr-stmt-expr.rs:1:1: 1:1 (#0),\n+            },\n+        ],\n+        span: $DIR/allowed-attr-stmt-expr.rs:1:1: 1:1 (#0),\n+    },\n+    Ident {\n+        ident: \"println\",\n+        span: $DIR/allowed-attr-stmt-expr.rs:1:1: 1:1 (#0),\n+    },\n+    Punct {\n+        ch: '!',\n+        spacing: Alone,\n+        span: $DIR/allowed-attr-stmt-expr.rs:1:1: 1:1 (#0),\n+    },\n+    Group {\n+        delimiter: Parenthesis,\n+        stream: TokenStream [\n+            Literal {\n+                kind: Str,\n+                symbol: \"{}\",\n+                suffix: None,\n+                span: $DIR/allowed-attr-stmt-expr.rs:1:1: 1:1 (#0),\n+            },\n+            Punct {\n+                ch: ',',\n+                spacing: Alone,\n+                span: $DIR/allowed-attr-stmt-expr.rs:1:1: 1:1 (#0),\n+            },\n+            Ident {\n+                ident: \"string\",\n+                span: $DIR/allowed-attr-stmt-expr.rs:1:1: 1:1 (#0),\n+            },\n+        ],\n+        span: $DIR/allowed-attr-stmt-expr.rs:1:1: 1:1 (#0),\n+    },\n+    Punct {\n+        ch: ';',\n+        spacing: Alone,\n+        span: $DIR/allowed-attr-stmt-expr.rs:1:1: 1:1 (#0),\n+    },\n+]\n+PRINT-ATTR INPUT (DISPLAY): second_make_stmt ! (#[allow(dead_code)] struct Bar { }) ;\n+PRINT-ATTR INPUT (DEBUG): TokenStream [\n+    Ident {\n+        ident: \"second_make_stmt\",\n+        span: $DIR/allowed-attr-stmt-expr.rs:1:1: 1:1 (#0),\n+    },\n+    Punct {\n+        ch: '!',\n+        spacing: Alone,\n+        span: $DIR/allowed-attr-stmt-expr.rs:1:1: 1:1 (#0),\n+    },\n+    Group {\n+        delimiter: Parenthesis,\n+        stream: TokenStream [\n+            Punct {\n+                ch: '#',\n+                spacing: Alone,\n+                span: $DIR/allowed-attr-stmt-expr.rs:1:1: 1:1 (#0),\n+            },\n+            Group {\n+                delimiter: Bracket,\n+                stream: TokenStream [\n+                    Ident {\n+                        ident: \"allow\",\n+                        span: $DIR/allowed-attr-stmt-expr.rs:1:1: 1:1 (#0),\n+                    },\n+                    Group {\n+                        delimiter: Parenthesis,\n+                        stream: TokenStream [\n+                            Ident {\n+                                ident: \"dead_code\",\n+                                span: $DIR/allowed-attr-stmt-expr.rs:1:1: 1:1 (#0),\n+                            },\n+                        ],\n+                        span: $DIR/allowed-attr-stmt-expr.rs:1:1: 1:1 (#0),\n+                    },\n+                ],\n+                span: $DIR/allowed-attr-stmt-expr.rs:1:1: 1:1 (#0),\n+            },\n+            Ident {\n+                ident: \"struct\",\n+                span: $DIR/allowed-attr-stmt-expr.rs:1:1: 1:1 (#0),\n+            },\n+            Ident {\n+                ident: \"Bar\",\n+                span: $DIR/allowed-attr-stmt-expr.rs:1:1: 1:1 (#0),\n+            },\n+            Group {\n+                delimiter: Brace,\n+                stream: TokenStream [],\n+                span: $DIR/allowed-attr-stmt-expr.rs:1:1: 1:1 (#0),\n+            },\n+        ],\n+        span: $DIR/allowed-attr-stmt-expr.rs:1:1: 1:1 (#0),\n+    },\n+    Punct {\n+        ch: ';',\n+        spacing: Alone,\n+        span: $DIR/allowed-attr-stmt-expr.rs:1:1: 1:1 (#0),\n+    },\n+]\n+PRINT-ATTR INPUT (DISPLAY): #[rustc_dummy] struct Other { }\n+PRINT-ATTR INPUT (DEBUG): TokenStream [\n+    Punct {\n+        ch: '#',\n+        spacing: Alone,\n+        span: $DIR/allowed-attr-stmt-expr.rs:1:1: 1:1 (#0),\n+    },\n+    Group {\n+        delimiter: Bracket,\n+        stream: TokenStream [\n+            Ident {\n+                ident: \"rustc_dummy\",\n+                span: $DIR/allowed-attr-stmt-expr.rs:1:1: 1:1 (#0),\n+            },\n+        ],\n+        span: $DIR/allowed-attr-stmt-expr.rs:1:1: 1:1 (#0),\n+    },\n+    Ident {\n+        ident: \"struct\",\n+        span: $DIR/allowed-attr-stmt-expr.rs:1:1: 1:1 (#0),\n+    },\n+    Ident {\n+        ident: \"Other\",\n+        span: $DIR/allowed-attr-stmt-expr.rs:1:1: 1:1 (#0),\n+    },\n+    Group {\n+        delimiter: Brace,\n+        stream: TokenStream [],\n+        span: $DIR/allowed-attr-stmt-expr.rs:1:1: 1:1 (#0),\n+    },\n+]"}, {"sha": "ca1b163c986e04d7e7e5e8c74f5aa8039e29f492", "filename": "src/test/ui/proc-macro/attr-stmt-expr.rs", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/192c7dbb6dbd0b2c176101ed2fe785901b2a457d/src%2Ftest%2Fui%2Fproc-macro%2Fattr-stmt-expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/192c7dbb6dbd0b2c176101ed2fe785901b2a457d/src%2Ftest%2Fui%2Fproc-macro%2Fattr-stmt-expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fattr-stmt-expr.rs?ref=192c7dbb6dbd0b2c176101ed2fe785901b2a457d", "patch": "@@ -1,8 +1,17 @@\n // aux-build:attr-stmt-expr.rs\n+// aux-build:test-macros.rs\n+// compile-flags: -Z span-debug\n \n #![feature(proc_macro_hygiene)]\n+#![feature(rustc_attrs)]\n \n+#![no_std] // Don't load unnecessary hygiene information from std\n+extern crate std;\n+extern crate test_macros;\n extern crate attr_stmt_expr;\n+\n+use test_macros::print_attr;\n+use std::println;\n use attr_stmt_expr::{expect_let, expect_print_stmt, expect_expr, expect_print_expr};\n \n fn print_str(string: &'static str) {\n@@ -13,13 +22,36 @@ fn print_str(string: &'static str) {\n     println!(\"{}\", string)\n }\n \n+macro_rules! make_stmt {\n+    ($stmt:stmt) => {\n+        $stmt\n+    }\n+}\n+\n+macro_rules! second_make_stmt {\n+    ($stmt:stmt) => {\n+        make_stmt!($stmt);\n+    }\n+}\n+\n fn main() {\n+    make_stmt!(struct Foo {});\n+\n+    #[print_attr]\n     #[expect_let]\n     let string = \"Hello, world!\";\n \n+    #[print_attr]\n     #[expect_print_stmt]\n     println!(\"{}\", string);\n \n+    #[print_attr]\n+    second_make_stmt!(#[allow(dead_code)] struct Bar {});\n+\n+    #[print_attr]\n+    #[rustc_dummy]\n+    struct Other {}\n+\n     #[expect_expr]\n     //~^ ERROR attributes on expressions are experimental\n     //~| HELP add `#![feature(stmt_expr_attributes)]` to the crate attributes to enable"}, {"sha": "7bd60e8ee77f98dbf4ae741fe3216975dfec1c71", "filename": "src/test/ui/proc-macro/attr-stmt-expr.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/192c7dbb6dbd0b2c176101ed2fe785901b2a457d/src%2Ftest%2Fui%2Fproc-macro%2Fattr-stmt-expr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/192c7dbb6dbd0b2c176101ed2fe785901b2a457d/src%2Ftest%2Fui%2Fproc-macro%2Fattr-stmt-expr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fattr-stmt-expr.stderr?ref=192c7dbb6dbd0b2c176101ed2fe785901b2a457d", "patch": "@@ -1,5 +1,5 @@\n error[E0658]: attributes on expressions are experimental\n-  --> $DIR/attr-stmt-expr.rs:10:5\n+  --> $DIR/attr-stmt-expr.rs:19:5\n    |\n LL |     #[expect_print_expr]\n    |     ^^^^^^^^^^^^^^^^^^^^\n@@ -8,7 +8,7 @@ LL |     #[expect_print_expr]\n    = help: add `#![feature(stmt_expr_attributes)]` to the crate attributes to enable\n \n error[E0658]: attributes on expressions are experimental\n-  --> $DIR/attr-stmt-expr.rs:23:5\n+  --> $DIR/attr-stmt-expr.rs:55:5\n    |\n LL |     #[expect_expr]\n    |     ^^^^^^^^^^^^^^"}, {"sha": "5c1b586725b24f9739230710122923e8fb51d78a", "filename": "src/test/ui/proc-macro/attr-stmt-expr.stdout", "status": "added", "additions": 187, "deletions": 0, "changes": 187, "blob_url": "https://github.com/rust-lang/rust/blob/192c7dbb6dbd0b2c176101ed2fe785901b2a457d/src%2Ftest%2Fui%2Fproc-macro%2Fattr-stmt-expr.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/192c7dbb6dbd0b2c176101ed2fe785901b2a457d/src%2Ftest%2Fui%2Fproc-macro%2Fattr-stmt-expr.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fattr-stmt-expr.stdout?ref=192c7dbb6dbd0b2c176101ed2fe785901b2a457d", "patch": "@@ -0,0 +1,187 @@\n+PRINT-ATTR INPUT (DISPLAY): #[expect_let] let string = \"Hello, world!\" ;\n+PRINT-ATTR INPUT (DEBUG): TokenStream [\n+    Punct {\n+        ch: '#',\n+        spacing: Alone,\n+        span: $DIR/attr-stmt-expr.rs:1:1: 1:1 (#0),\n+    },\n+    Group {\n+        delimiter: Bracket,\n+        stream: TokenStream [\n+            Ident {\n+                ident: \"expect_let\",\n+                span: $DIR/attr-stmt-expr.rs:1:1: 1:1 (#0),\n+            },\n+        ],\n+        span: $DIR/attr-stmt-expr.rs:1:1: 1:1 (#0),\n+    },\n+    Ident {\n+        ident: \"let\",\n+        span: $DIR/attr-stmt-expr.rs:1:1: 1:1 (#0),\n+    },\n+    Ident {\n+        ident: \"string\",\n+        span: $DIR/attr-stmt-expr.rs:1:1: 1:1 (#0),\n+    },\n+    Punct {\n+        ch: '=',\n+        spacing: Alone,\n+        span: $DIR/attr-stmt-expr.rs:1:1: 1:1 (#0),\n+    },\n+    Literal {\n+        kind: Str,\n+        symbol: \"Hello, world!\",\n+        suffix: None,\n+        span: $DIR/attr-stmt-expr.rs:1:1: 1:1 (#0),\n+    },\n+    Punct {\n+        ch: ';',\n+        spacing: Alone,\n+        span: $DIR/attr-stmt-expr.rs:1:1: 1:1 (#0),\n+    },\n+]\n+PRINT-ATTR INPUT (DISPLAY): #[expect_print_stmt] println ! (\"{}\", string) ;\n+PRINT-ATTR INPUT (DEBUG): TokenStream [\n+    Punct {\n+        ch: '#',\n+        spacing: Alone,\n+        span: $DIR/attr-stmt-expr.rs:1:1: 1:1 (#0),\n+    },\n+    Group {\n+        delimiter: Bracket,\n+        stream: TokenStream [\n+            Ident {\n+                ident: \"expect_print_stmt\",\n+                span: $DIR/attr-stmt-expr.rs:1:1: 1:1 (#0),\n+            },\n+        ],\n+        span: $DIR/attr-stmt-expr.rs:1:1: 1:1 (#0),\n+    },\n+    Ident {\n+        ident: \"println\",\n+        span: $DIR/attr-stmt-expr.rs:1:1: 1:1 (#0),\n+    },\n+    Punct {\n+        ch: '!',\n+        spacing: Alone,\n+        span: $DIR/attr-stmt-expr.rs:1:1: 1:1 (#0),\n+    },\n+    Group {\n+        delimiter: Parenthesis,\n+        stream: TokenStream [\n+            Literal {\n+                kind: Str,\n+                symbol: \"{}\",\n+                suffix: None,\n+                span: $DIR/attr-stmt-expr.rs:1:1: 1:1 (#0),\n+            },\n+            Punct {\n+                ch: ',',\n+                spacing: Alone,\n+                span: $DIR/attr-stmt-expr.rs:1:1: 1:1 (#0),\n+            },\n+            Ident {\n+                ident: \"string\",\n+                span: $DIR/attr-stmt-expr.rs:1:1: 1:1 (#0),\n+            },\n+        ],\n+        span: $DIR/attr-stmt-expr.rs:1:1: 1:1 (#0),\n+    },\n+    Punct {\n+        ch: ';',\n+        spacing: Alone,\n+        span: $DIR/attr-stmt-expr.rs:1:1: 1:1 (#0),\n+    },\n+]\n+PRINT-ATTR INPUT (DISPLAY): second_make_stmt ! (#[allow(dead_code)] struct Bar { }) ;\n+PRINT-ATTR INPUT (DEBUG): TokenStream [\n+    Ident {\n+        ident: \"second_make_stmt\",\n+        span: $DIR/attr-stmt-expr.rs:1:1: 1:1 (#0),\n+    },\n+    Punct {\n+        ch: '!',\n+        spacing: Alone,\n+        span: $DIR/attr-stmt-expr.rs:1:1: 1:1 (#0),\n+    },\n+    Group {\n+        delimiter: Parenthesis,\n+        stream: TokenStream [\n+            Punct {\n+                ch: '#',\n+                spacing: Alone,\n+                span: $DIR/attr-stmt-expr.rs:1:1: 1:1 (#0),\n+            },\n+            Group {\n+                delimiter: Bracket,\n+                stream: TokenStream [\n+                    Ident {\n+                        ident: \"allow\",\n+                        span: $DIR/attr-stmt-expr.rs:1:1: 1:1 (#0),\n+                    },\n+                    Group {\n+                        delimiter: Parenthesis,\n+                        stream: TokenStream [\n+                            Ident {\n+                                ident: \"dead_code\",\n+                                span: $DIR/attr-stmt-expr.rs:1:1: 1:1 (#0),\n+                            },\n+                        ],\n+                        span: $DIR/attr-stmt-expr.rs:1:1: 1:1 (#0),\n+                    },\n+                ],\n+                span: $DIR/attr-stmt-expr.rs:1:1: 1:1 (#0),\n+            },\n+            Ident {\n+                ident: \"struct\",\n+                span: $DIR/attr-stmt-expr.rs:1:1: 1:1 (#0),\n+            },\n+            Ident {\n+                ident: \"Bar\",\n+                span: $DIR/attr-stmt-expr.rs:1:1: 1:1 (#0),\n+            },\n+            Group {\n+                delimiter: Brace,\n+                stream: TokenStream [],\n+                span: $DIR/attr-stmt-expr.rs:1:1: 1:1 (#0),\n+            },\n+        ],\n+        span: $DIR/attr-stmt-expr.rs:1:1: 1:1 (#0),\n+    },\n+    Punct {\n+        ch: ';',\n+        spacing: Alone,\n+        span: $DIR/attr-stmt-expr.rs:1:1: 1:1 (#0),\n+    },\n+]\n+PRINT-ATTR INPUT (DISPLAY): #[rustc_dummy] struct Other { }\n+PRINT-ATTR INPUT (DEBUG): TokenStream [\n+    Punct {\n+        ch: '#',\n+        spacing: Alone,\n+        span: $DIR/attr-stmt-expr.rs:1:1: 1:1 (#0),\n+    },\n+    Group {\n+        delimiter: Bracket,\n+        stream: TokenStream [\n+            Ident {\n+                ident: \"rustc_dummy\",\n+                span: $DIR/attr-stmt-expr.rs:1:1: 1:1 (#0),\n+            },\n+        ],\n+        span: $DIR/attr-stmt-expr.rs:1:1: 1:1 (#0),\n+    },\n+    Ident {\n+        ident: \"struct\",\n+        span: $DIR/attr-stmt-expr.rs:1:1: 1:1 (#0),\n+    },\n+    Ident {\n+        ident: \"Other\",\n+        span: $DIR/attr-stmt-expr.rs:1:1: 1:1 (#0),\n+    },\n+    Group {\n+        delimiter: Brace,\n+        stream: TokenStream [],\n+        span: $DIR/attr-stmt-expr.rs:1:1: 1:1 (#0),\n+    },\n+]"}, {"sha": "0bf889a855d01e15893e4b52d1e8ed24c452e79c", "filename": "src/test/ui/proc-macro/keep-expr-tokens.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/192c7dbb6dbd0b2c176101ed2fe785901b2a457d/src%2Ftest%2Fui%2Fproc-macro%2Fkeep-expr-tokens.rs", "raw_url": "https://github.com/rust-lang/rust/raw/192c7dbb6dbd0b2c176101ed2fe785901b2a457d/src%2Ftest%2Fui%2Fproc-macro%2Fkeep-expr-tokens.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fkeep-expr-tokens.rs?ref=192c7dbb6dbd0b2c176101ed2fe785901b2a457d", "patch": "@@ -1,7 +1,12 @@\n // aux-build:test-macros.rs\n+// compile-flags: -Z span-debug\n \n #![feature(stmt_expr_attributes)]\n #![feature(proc_macro_hygiene)]\n+#![feature(rustc_attrs)]\n+\n+#![no_std] // Don't load unnecessary hygiene information from std\n+extern crate std;\n \n extern crate test_macros;\n \n@@ -12,4 +17,8 @@ fn main() {\n     for item in missing_fn() {} //~ ERROR cannot find\n \n     (#[recollect_attr] #[recollect_attr] ((#[recollect_attr] bad))); //~ ERROR cannot\n+\n+    #[test_macros::print_attr]\n+    #[rustc_dummy]\n+    { 1 +1; } // Don't change the weird spacing of the '+'\n }"}, {"sha": "11052d11c25089abc373b6eec738218d8f848d84", "filename": "src/test/ui/proc-macro/keep-expr-tokens.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/192c7dbb6dbd0b2c176101ed2fe785901b2a457d/src%2Ftest%2Fui%2Fproc-macro%2Fkeep-expr-tokens.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/192c7dbb6dbd0b2c176101ed2fe785901b2a457d/src%2Ftest%2Fui%2Fproc-macro%2Fkeep-expr-tokens.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fkeep-expr-tokens.stderr?ref=192c7dbb6dbd0b2c176101ed2fe785901b2a457d", "patch": "@@ -1,11 +1,11 @@\n error[E0425]: cannot find function `missing_fn` in this scope\n-  --> $DIR/keep-expr-tokens.rs:12:17\n+  --> $DIR/keep-expr-tokens.rs:17:17\n    |\n LL |     for item in missing_fn() {}\n    |                 ^^^^^^^^^^ not found in this scope\n \n error[E0425]: cannot find value `bad` in this scope\n-  --> $DIR/keep-expr-tokens.rs:14:62\n+  --> $DIR/keep-expr-tokens.rs:19:62\n    |\n LL |     (#[recollect_attr] #[recollect_attr] ((#[recollect_attr] bad)));\n    |                                                              ^^^ not found in this scope"}, {"sha": "fcd72a0e017ea86aedfa8a2bf47538db0b378bb3", "filename": "src/test/ui/proc-macro/keep-expr-tokens.stdout", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/192c7dbb6dbd0b2c176101ed2fe785901b2a457d/src%2Ftest%2Fui%2Fproc-macro%2Fkeep-expr-tokens.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/192c7dbb6dbd0b2c176101ed2fe785901b2a457d/src%2Ftest%2Fui%2Fproc-macro%2Fkeep-expr-tokens.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fkeep-expr-tokens.stdout?ref=192c7dbb6dbd0b2c176101ed2fe785901b2a457d", "patch": "@@ -0,0 +1,46 @@\n+PRINT-ATTR INPUT (DISPLAY): #[rustc_dummy] { 1 + 1 ; }\n+PRINT-ATTR INPUT (DEBUG): TokenStream [\n+    Punct {\n+        ch: '#',\n+        spacing: Alone,\n+        span: $DIR/keep-expr-tokens.rs:22:5: 22:6 (#0),\n+    },\n+    Group {\n+        delimiter: Bracket,\n+        stream: TokenStream [\n+            Ident {\n+                ident: \"rustc_dummy\",\n+                span: $DIR/keep-expr-tokens.rs:22:7: 22:18 (#0),\n+            },\n+        ],\n+        span: $DIR/keep-expr-tokens.rs:22:6: 22:19 (#0),\n+    },\n+    Group {\n+        delimiter: Brace,\n+        stream: TokenStream [\n+            Literal {\n+                kind: Integer,\n+                symbol: \"1\",\n+                suffix: None,\n+                span: $DIR/keep-expr-tokens.rs:23:7: 23:8 (#0),\n+            },\n+            Punct {\n+                ch: '+',\n+                spacing: Alone,\n+                span: $DIR/keep-expr-tokens.rs:23:9: 23:10 (#0),\n+            },\n+            Literal {\n+                kind: Integer,\n+                symbol: \"1\",\n+                suffix: None,\n+                span: $DIR/keep-expr-tokens.rs:23:10: 23:11 (#0),\n+            },\n+            Punct {\n+                ch: ';',\n+                spacing: Alone,\n+                span: $DIR/keep-expr-tokens.rs:23:11: 23:12 (#0),\n+            },\n+        ],\n+        span: $DIR/keep-expr-tokens.rs:23:5: 23:14 (#0),\n+    },\n+]"}]}