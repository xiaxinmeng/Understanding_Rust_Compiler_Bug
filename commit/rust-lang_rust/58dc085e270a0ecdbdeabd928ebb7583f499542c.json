{"sha": "58dc085e270a0ecdbdeabd928ebb7583f499542c", "node_id": "C_kwDOAAsO6NoAKDU4ZGMwODVlMjcwYTBlY2RiZGVhYmQ5MjhlYmI3NTgzZjQ5OTU0MmM", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-08-11T05:44:55Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-08-11T05:44:55Z"}, "message": "Rollup merge of #100192 - tmiasko:rm-duplicated-locals, r=nagisa\n\n Remove duplicated temporaries creating during box derefs elaboration\n\nTemporaries created with `MirPatch::new_temp` will be declared after\npatch application. Remove manually created duplicate declarations.\n\nRemoving duplicates exposes another issue. Visitor elaborates\nterminator twice and attempts to access new, but not yet available,\nlocal declarations. Remove duplicated call to `visit_terminator`.\n\nExtracted from #99946.", "tree": {"sha": "c32218c7c38637b960663c95d6e4dba478fc066f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c32218c7c38637b960663c95d6e4dba478fc066f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/58dc085e270a0ecdbdeabd928ebb7583f499542c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJi9JdXCRBK7hj4Ov3rIwAAAnQIAKvpFWboSkiq6q0ubd/EpNW6\nhY7ly1QGdoMIj52UKcdl5ls0DGnGmOQJnfbJK8yLatCTuLBPc3X7qt8gxIfmuqgg\n7Sn7XfM0638p53slgdwF+vjg5J01jxl8hy/NfcTrTxDouWhEa03Ue8n50/9XRdfS\nC4WcL57YMQxCbMT4FzQ7csHQ8lBiPRJ9fTa/H12w7OiqZ+8A51n4hPUL8NppbVIr\nNPb21Vg2SNGXif4FO5kvxxuwOHdZp+i5o9/ncFxk659CveesE3N7y/7bPZLOzoJl\nWLAJbHDl91+9p3hJS0boxTEQd/yw7S5nRdkMW65h5dRFViBhterIiaAWpEbJNfM=\n=+aAz\n-----END PGP SIGNATURE-----\n", "payload": "tree c32218c7c38637b960663c95d6e4dba478fc066f\nparent 8bdb414348ac4b324d55e8449a452c789dc5d3dc\nparent 7d2131a2048521ee1dfc41a12b2f5007effc1f26\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1660196695 +0530\ncommitter GitHub <noreply@github.com> 1660196695 +0530\n\nRollup merge of #100192 - tmiasko:rm-duplicated-locals, r=nagisa\n\n Remove duplicated temporaries creating during box derefs elaboration\n\nTemporaries created with `MirPatch::new_temp` will be declared after\npatch application. Remove manually created duplicate declarations.\n\nRemoving duplicates exposes another issue. Visitor elaborates\nterminator twice and attempts to access new, but not yet available,\nlocal declarations. Remove duplicated call to `visit_terminator`.\n\nExtracted from #99946.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/58dc085e270a0ecdbdeabd928ebb7583f499542c", "html_url": "https://github.com/rust-lang/rust/commit/58dc085e270a0ecdbdeabd928ebb7583f499542c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/58dc085e270a0ecdbdeabd928ebb7583f499542c/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8bdb414348ac4b324d55e8449a452c789dc5d3dc", "url": "https://api.github.com/repos/rust-lang/rust/commits/8bdb414348ac4b324d55e8449a452c789dc5d3dc", "html_url": "https://github.com/rust-lang/rust/commit/8bdb414348ac4b324d55e8449a452c789dc5d3dc"}, {"sha": "7d2131a2048521ee1dfc41a12b2f5007effc1f26", "url": "https://api.github.com/repos/rust-lang/rust/commits/7d2131a2048521ee1dfc41a12b2f5007effc1f26", "html_url": "https://github.com/rust-lang/rust/commit/7d2131a2048521ee1dfc41a12b2f5007effc1f26"}], "stats": {"total": 56, "additions": 22, "deletions": 34}, "files": [{"sha": "7652223368964290d918b62377e173b57318992d", "filename": "compiler/rustc_mir_transform/src/elaborate_box_derefs.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/58dc085e270a0ecdbdeabd928ebb7583f499542c/compiler%2Frustc_mir_transform%2Fsrc%2Felaborate_box_derefs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58dc085e270a0ecdbdeabd928ebb7583f499542c/compiler%2Frustc_mir_transform%2Fsrc%2Felaborate_box_derefs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Felaborate_box_derefs.rs?ref=58dc085e270a0ecdbdeabd928ebb7583f499542c", "patch": "@@ -70,7 +70,6 @@ impl<'tcx, 'a> MutVisitor<'tcx> for ElaborateBoxDerefVisitor<'tcx, 'a> {\n                 build_ptr_tys(tcx, base_ty.boxed_ty(), self.unique_did, self.nonnull_did);\n \n             let ptr_local = self.patch.new_temp(ptr_ty, source_info.span);\n-            self.local_decls.push(LocalDecl::new(ptr_ty, source_info.span));\n \n             self.patch.add_statement(location, StatementKind::StorageLive(ptr_local));\n \n@@ -125,13 +124,6 @@ impl<'tcx> MirPass<'tcx> for ElaborateBoxDerefs {\n                     index += 1;\n                 }\n \n-                if let Some(terminator) = terminator\n-                && !matches!(terminator.kind, TerminatorKind::Yield{..})\n-                {\n-                    let location = Location { block, statement_index: index };\n-                    visitor.visit_terminator(terminator, location);\n-                }\n-\n                 let location = Location { block, statement_index: index };\n                 match terminator {\n                     // yielding into a box is handled when lowering generators"}, {"sha": "73fdf14049896a8f6d7c522b78a3c92271e4fc7f", "filename": "src/test/mir-opt/const_prop/boxes.main.ConstProp.diff", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/58dc085e270a0ecdbdeabd928ebb7583f499542c/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fboxes.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/58dc085e270a0ecdbdeabd928ebb7583f499542c/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fboxes.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fboxes.main.ConstProp.diff?ref=58dc085e270a0ecdbdeabd928ebb7583f499542c", "patch": "@@ -12,8 +12,6 @@\n       let mut _7: std::boxed::Box<i32>;    // in scope 0 at $DIR/boxes.rs:+1:14: +1:22\n       let mut _8: *const i32;              // in scope 0 at $DIR/boxes.rs:+1:14: +1:22\n       let mut _9: *const i32;              // in scope 0 at $DIR/boxes.rs:+1:14: +1:22\n-      let mut _10: *const i32;             // in scope 0 at $DIR/boxes.rs:+1:14: +1:22\n-      let mut _11: *const i32;             // in scope 0 at $DIR/boxes.rs:+1:14: +1:22\n       scope 1 {\n           debug x => _1;                   // in scope 1 at $DIR/boxes.rs:+1:9: +1:10\n       }"}, {"sha": "5dfcd2d54ca27ae63bcc29fc656485dc91e0d5f4", "filename": "src/test/mir-opt/inline/inline_into_box_place.main.Inline.32bit.diff", "status": "modified", "additions": 11, "deletions": 12, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/58dc085e270a0ecdbdeabd928ebb7583f499542c/src%2Ftest%2Fmir-opt%2Finline%2Finline_into_box_place.main.Inline.32bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/58dc085e270a0ecdbdeabd928ebb7583f499542c/src%2Ftest%2Fmir-opt%2Finline%2Finline_into_box_place.main.Inline.32bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_into_box_place.main.Inline.32bit.diff?ref=58dc085e270a0ecdbdeabd928ebb7583f499542c", "patch": "@@ -10,15 +10,14 @@\n       let mut _5: std::boxed::Box<std::vec::Vec<u32>>; // in scope 0 at $DIR/inline-into-box-place.rs:+1:29: +1:43\n       let mut _6: ();                      // in scope 0 at $DIR/inline-into-box-place.rs:+1:42: +1:43\n       let mut _7: *const std::vec::Vec<u32>; // in scope 0 at $DIR/inline-into-box-place.rs:+1:29: +1:43\n-      let mut _8: *const std::vec::Vec<u32>; // in scope 0 at $DIR/inline-into-box-place.rs:+1:29: +1:43\n-+     let mut _9: &mut std::vec::Vec<u32>; // in scope 0 at $DIR/inline-into-box-place.rs:+1:33: +1:43\n++     let mut _8: &mut std::vec::Vec<u32>; // in scope 0 at $DIR/inline-into-box-place.rs:+1:33: +1:43\n       scope 1 {\n           debug _x => _1;                  // in scope 1 at $DIR/inline-into-box-place.rs:+1:9: +1:11\n       }\n       scope 2 {\n       }\n +     scope 3 (inlined Vec::<u32>::new) {  // at $DIR/inline-into-box-place.rs:8:33: 8:43\n-+         let mut _10: alloc::raw_vec::RawVec<u32>; // in scope 3 at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n++         let mut _9: alloc::raw_vec::RawVec<u32>; // in scope 3 at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n +     }\n   \n       bb0: {\n@@ -37,10 +36,10 @@\n           StorageLive(_7);                 // scope 0 at $DIR/inline-into-box-place.rs:+1:33: +1:43\n           _7 = (((_5.0: std::ptr::Unique<std::vec::Vec<u32>>).0: std::ptr::NonNull<std::vec::Vec<u32>>).0: *const std::vec::Vec<u32>); // scope 0 at $DIR/inline-into-box-place.rs:+1:33: +1:43\n -         (*_7) = Vec::<u32>::new() -> [return: bb2, unwind: bb4]; // scope 0 at $DIR/inline-into-box-place.rs:+1:33: +1:43\n-+         StorageLive(_9);                 // scope 0 at $DIR/inline-into-box-place.rs:+1:33: +1:43\n-+         _9 = &mut (*_7);                 // scope 0 at $DIR/inline-into-box-place.rs:+1:33: +1:43\n-+         StorageLive(_10);                // scope 3 at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n-+         _10 = const alloc::raw_vec::RawVec::<u32>::NEW; // scope 3 at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n++         StorageLive(_8);                 // scope 0 at $DIR/inline-into-box-place.rs:+1:33: +1:43\n++         _8 = &mut (*_7);                 // scope 0 at $DIR/inline-into-box-place.rs:+1:33: +1:43\n++         StorageLive(_9);                 // scope 3 at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n++         _9 = const alloc::raw_vec::RawVec::<u32>::NEW; // scope 3 at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n                                            // mir::Constant\n -                                          // + span: $DIR/inline-into-box-place.rs:8:33: 8:41\n -                                          // + user_ty: UserType(1)\n@@ -51,11 +50,11 @@\n +                                          // + span: $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n +                                          // + user_ty: UserType(0)\n +                                          // + literal: Const { ty: alloc::raw_vec::RawVec<u32>, val: Unevaluated(alloc::raw_vec::RawVec::<T>::NEW, [u32], None) }\n-+         Deinit((*_9));                   // scope 3 at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n-+         ((*_9).0: alloc::raw_vec::RawVec<u32>) = move _10; // scope 3 at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n-+         ((*_9).1: usize) = const 0_usize; // scope 3 at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n-+         StorageDead(_10);                // scope 3 at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n-+         StorageDead(_9);                 // scope 0 at $DIR/inline-into-box-place.rs:+1:33: +1:43\n++         Deinit((*_8));                   // scope 3 at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n++         ((*_8).0: alloc::raw_vec::RawVec<u32>) = move _9; // scope 3 at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n++         ((*_8).1: usize) = const 0_usize; // scope 3 at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n++         StorageDead(_9);                 // scope 3 at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n++         StorageDead(_8);                 // scope 0 at $DIR/inline-into-box-place.rs:+1:33: +1:43\n           StorageDead(_7);                 // scope 0 at $DIR/inline-into-box-place.rs:+1:33: +1:43\n           _1 = move _5;                    // scope 0 at $DIR/inline-into-box-place.rs:+1:29: +1:43\n           StorageDead(_5);                 // scope 0 at $DIR/inline-into-box-place.rs:+1:42: +1:43"}, {"sha": "5dfcd2d54ca27ae63bcc29fc656485dc91e0d5f4", "filename": "src/test/mir-opt/inline/inline_into_box_place.main.Inline.64bit.diff", "status": "modified", "additions": 11, "deletions": 12, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/58dc085e270a0ecdbdeabd928ebb7583f499542c/src%2Ftest%2Fmir-opt%2Finline%2Finline_into_box_place.main.Inline.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/58dc085e270a0ecdbdeabd928ebb7583f499542c/src%2Ftest%2Fmir-opt%2Finline%2Finline_into_box_place.main.Inline.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_into_box_place.main.Inline.64bit.diff?ref=58dc085e270a0ecdbdeabd928ebb7583f499542c", "patch": "@@ -10,15 +10,14 @@\n       let mut _5: std::boxed::Box<std::vec::Vec<u32>>; // in scope 0 at $DIR/inline-into-box-place.rs:+1:29: +1:43\n       let mut _6: ();                      // in scope 0 at $DIR/inline-into-box-place.rs:+1:42: +1:43\n       let mut _7: *const std::vec::Vec<u32>; // in scope 0 at $DIR/inline-into-box-place.rs:+1:29: +1:43\n-      let mut _8: *const std::vec::Vec<u32>; // in scope 0 at $DIR/inline-into-box-place.rs:+1:29: +1:43\n-+     let mut _9: &mut std::vec::Vec<u32>; // in scope 0 at $DIR/inline-into-box-place.rs:+1:33: +1:43\n++     let mut _8: &mut std::vec::Vec<u32>; // in scope 0 at $DIR/inline-into-box-place.rs:+1:33: +1:43\n       scope 1 {\n           debug _x => _1;                  // in scope 1 at $DIR/inline-into-box-place.rs:+1:9: +1:11\n       }\n       scope 2 {\n       }\n +     scope 3 (inlined Vec::<u32>::new) {  // at $DIR/inline-into-box-place.rs:8:33: 8:43\n-+         let mut _10: alloc::raw_vec::RawVec<u32>; // in scope 3 at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n++         let mut _9: alloc::raw_vec::RawVec<u32>; // in scope 3 at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n +     }\n   \n       bb0: {\n@@ -37,10 +36,10 @@\n           StorageLive(_7);                 // scope 0 at $DIR/inline-into-box-place.rs:+1:33: +1:43\n           _7 = (((_5.0: std::ptr::Unique<std::vec::Vec<u32>>).0: std::ptr::NonNull<std::vec::Vec<u32>>).0: *const std::vec::Vec<u32>); // scope 0 at $DIR/inline-into-box-place.rs:+1:33: +1:43\n -         (*_7) = Vec::<u32>::new() -> [return: bb2, unwind: bb4]; // scope 0 at $DIR/inline-into-box-place.rs:+1:33: +1:43\n-+         StorageLive(_9);                 // scope 0 at $DIR/inline-into-box-place.rs:+1:33: +1:43\n-+         _9 = &mut (*_7);                 // scope 0 at $DIR/inline-into-box-place.rs:+1:33: +1:43\n-+         StorageLive(_10);                // scope 3 at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n-+         _10 = const alloc::raw_vec::RawVec::<u32>::NEW; // scope 3 at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n++         StorageLive(_8);                 // scope 0 at $DIR/inline-into-box-place.rs:+1:33: +1:43\n++         _8 = &mut (*_7);                 // scope 0 at $DIR/inline-into-box-place.rs:+1:33: +1:43\n++         StorageLive(_9);                 // scope 3 at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n++         _9 = const alloc::raw_vec::RawVec::<u32>::NEW; // scope 3 at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n                                            // mir::Constant\n -                                          // + span: $DIR/inline-into-box-place.rs:8:33: 8:41\n -                                          // + user_ty: UserType(1)\n@@ -51,11 +50,11 @@\n +                                          // + span: $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n +                                          // + user_ty: UserType(0)\n +                                          // + literal: Const { ty: alloc::raw_vec::RawVec<u32>, val: Unevaluated(alloc::raw_vec::RawVec::<T>::NEW, [u32], None) }\n-+         Deinit((*_9));                   // scope 3 at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n-+         ((*_9).0: alloc::raw_vec::RawVec<u32>) = move _10; // scope 3 at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n-+         ((*_9).1: usize) = const 0_usize; // scope 3 at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n-+         StorageDead(_10);                // scope 3 at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n-+         StorageDead(_9);                 // scope 0 at $DIR/inline-into-box-place.rs:+1:33: +1:43\n++         Deinit((*_8));                   // scope 3 at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n++         ((*_8).0: alloc::raw_vec::RawVec<u32>) = move _9; // scope 3 at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n++         ((*_8).1: usize) = const 0_usize; // scope 3 at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n++         StorageDead(_9);                 // scope 3 at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n++         StorageDead(_8);                 // scope 0 at $DIR/inline-into-box-place.rs:+1:33: +1:43\n           StorageDead(_7);                 // scope 0 at $DIR/inline-into-box-place.rs:+1:33: +1:43\n           _1 = move _5;                    // scope 0 at $DIR/inline-into-box-place.rs:+1:29: +1:43\n           StorageDead(_5);                 // scope 0 at $DIR/inline-into-box-place.rs:+1:42: +1:43"}]}