{"sha": "e4849d5e5dd1d016e79e7d220fdbffeb2b7f887e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU0ODQ5ZDVlNWRkMWQwMTZlNzllN2QyMjBmZGJmZmViMmI3Zjg4N2U=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-01-14T03:00:09Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-01-14T23:14:43Z"}, "message": "rustc: Allow a custom diagnostic emitter when building the handler", "tree": {"sha": "c8372197ad6da15285e465283ab6250aaf404a8b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c8372197ad6da15285e465283ab6250aaf404a8b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e4849d5e5dd1d016e79e7d220fdbffeb2b7f887e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e4849d5e5dd1d016e79e7d220fdbffeb2b7f887e", "html_url": "https://github.com/rust-lang/rust/commit/e4849d5e5dd1d016e79e7d220fdbffeb2b7f887e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e4849d5e5dd1d016e79e7d220fdbffeb2b7f887e/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7cbd90f50110699f616fd89d680dae3b0ca3a2ce", "url": "https://api.github.com/repos/rust-lang/rust/commits/7cbd90f50110699f616fd89d680dae3b0ca3a2ce", "html_url": "https://github.com/rust-lang/rust/commit/7cbd90f50110699f616fd89d680dae3b0ca3a2ce"}], "stats": {"total": 53, "additions": 36, "deletions": 17}, "files": [{"sha": "eeab4a85c825a1fd5c682c4f5f9f30ccd6d1d747", "filename": "src/cargo/cargo.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4849d5e5dd1d016e79e7d220fdbffeb2b7f887e/src%2Fcargo%2Fcargo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4849d5e5dd1d016e79e7d220fdbffeb2b7f887e/src%2Fcargo%2Fcargo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcargo%2Fcargo.rs?ref=e4849d5e5dd1d016e79e7d220fdbffeb2b7f887e", "patch": "@@ -104,7 +104,7 @@ fn load_pkg(filename: str) -> option::t<pkg> {\n     let sess = @{\n         cm: cm,\n         mutable next_id: 0,\n-        diagnostic: diagnostic::mk_codemap_handler(cm)\n+        diagnostic: diagnostic::mk_codemap_handler(cm, none)\n     };\n     let c = parser::parse_crate_from_crate_file(filename, [], sess);\n "}, {"sha": "58c357d724d26abf46c9f5528e90ead00356e22e", "filename": "src/comp/driver/diagnostic.rs", "status": "modified", "additions": 30, "deletions": 11, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/e4849d5e5dd1d016e79e7d220fdbffeb2b7f887e/src%2Fcomp%2Fdriver%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4849d5e5dd1d016e79e7d220fdbffeb2b7f887e/src%2Fcomp%2Fdriver%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fdriver%2Fdiagnostic.rs?ref=e4849d5e5dd1d016e79e7d220fdbffeb2b7f887e", "patch": "@@ -3,10 +3,14 @@ import io::writer_util;\n import syntax::codemap;\n import codemap::span;\n \n-export emit_diagnostic;\n+export emitter, emit_diagnostic;\n export diagnostictype, fatal, error, warning, note;\n export handler, mk_codemap_handler;\n \n+type emitter = fn@(cmsp: option<(codemap::codemap, span)>,\n+                   msg: str, t: diagnostictype);\n+\n+\n iface handler {\n     fn span_fatal(sp: span, msg: str) -> !;\n     fn fatal(msg: str) -> !;\n@@ -26,24 +30,25 @@ iface handler {\n \n type codemap_t = @{\n     cm: codemap::codemap,\n-    mutable err_count: uint\n+    mutable err_count: uint,\n+    emit: emitter\n };\n \n impl codemap_handler of handler for codemap_t {\n     fn span_fatal(sp: span, msg: str) -> ! {\n-        emit_diagnostic(some((self.cm, sp)), msg, fatal);\n+        self.emit(some((self.cm, sp)), msg, fatal);\n         fail;\n     }\n     fn fatal(msg: str) -> ! {\n-        emit_diagnostic(none, msg, fatal);\n+        self.emit(none, msg, fatal);\n         fail;\n     }\n     fn span_err(sp: span, msg: str) {\n-        emit_diagnostic(some((self.cm, sp)), msg, error);\n+        self.emit(some((self.cm, sp)), msg, error);\n         self.err_count += 1u;\n     }\n     fn err(msg: str) {\n-        emit_diagnostic(none, msg, error);\n+        self.emit(none, msg, error);\n         self.err_count += 1u;\n     }\n     fn has_errors() -> bool { self.err_count > 0u }\n@@ -53,16 +58,16 @@ impl codemap_handler of handler for codemap_t {\n         }\n     }\n     fn span_warn(sp: span, msg: str) {\n-        emit_diagnostic(some((self.cm, sp)), msg, warning);\n+        self.emit(some((self.cm, sp)), msg, warning);\n     }\n     fn warn(msg: str) {\n-        emit_diagnostic(none, msg, warning);\n+        self.emit(none, msg, warning);\n     }\n     fn span_note(sp: span, msg: str) {\n-        emit_diagnostic(some((self.cm, sp)), msg, note);\n+        self.emit(some((self.cm, sp)), msg, note);\n     }\n     fn note(msg: str) {\n-        emit_diagnostic(none, msg, note);\n+        self.emit(none, msg, note);\n     }\n     fn span_bug(sp: span, msg: str) -> ! {\n         self.span_fatal(sp, #fmt[\"internal compiler error %s\", msg]);\n@@ -76,10 +81,24 @@ impl codemap_handler of handler for codemap_t {\n     fn unimpl(msg: str) -> ! { self.bug(\"unimplemented \" + msg); }\n }\n \n-fn mk_codemap_handler(cm: codemap::codemap) -> handler {\n+fn mk_codemap_handler(cm: codemap::codemap,\n+                      emitter: option<emitter>) -> handler {\n+\n+    let emit = alt emitter {\n+      some(e) { e }\n+      none. {\n+        let f = fn@(cmsp: option<(codemap::codemap, span)>,\n+            msg: str, t: diagnostictype) {\n+            emit_diagnostic(cmsp, msg, t);\n+        };\n+        f\n+      }\n+    };\n+\n     @{\n         cm: cm,\n         mutable err_count: 0u,\n+        emit: emit\n     } as handler\n }\n "}, {"sha": "6a578a3f0cf9e1e526f71874e73452074842f3e7", "filename": "src/comp/driver/driver.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4849d5e5dd1d016e79e7d220fdbffeb2b7f887e/src%2Fcomp%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4849d5e5dd1d016e79e7d220fdbffeb2b7f887e/src%2Fcomp%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fdriver%2Fdriver.rs?ref=e4849d5e5dd1d016e79e7d220fdbffeb2b7f887e", "patch": "@@ -452,7 +452,7 @@ fn build_session(sopts: @session::options, input: str) -> session::session {\n         sopts.target_triple,\n         sopts.addl_lib_search_paths);\n     let codemap = codemap::new_codemap();\n-    let diagnostic_handler = diagnostic::mk_codemap_handler(codemap);\n+    let diagnostic_handler = diagnostic::mk_codemap_handler(codemap, none);\n     @{targ_cfg: target_cfg,\n       opts: sopts,\n       cstore: cstore,"}, {"sha": "343035fe68147f62a5e24eddb31c31bd20cce98c", "filename": "src/fuzzer/fuzzer.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e4849d5e5dd1d016e79e7d220fdbffeb2b7f887e/src%2Ffuzzer%2Ffuzzer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4849d5e5dd1d016e79e7d220fdbffeb2b7f887e/src%2Ffuzzer%2Ffuzzer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ffuzzer%2Ffuzzer.rs?ref=e4849d5e5dd1d016e79e7d220fdbffeb2b7f887e", "patch": "@@ -262,7 +262,7 @@ fn check_variants_T<T: copy>(\n                 let str3 =\n                     as_str(bind pprust::print_crate(\n                         codemap,\n-                        diagnostic::mk_codemap_handler(codemap),\n+                        diagnostic::mk_codemap_handler(codemap, none),\n                         crate2,\n                         filename,\n                         io::string_reader(\"\"), _,\n@@ -419,7 +419,7 @@ fn parse_and_print(code: str) -> str {\n     let sess = @{\n         cm: cm,\n         mutable next_id: 0,\n-        diagnostic: diagnostic::mk_codemap_handler(cm)\n+        diagnostic: diagnostic::mk_codemap_handler(cm, none)\n     };\n     write_file(filename, code);\n     let crate = parser::parse_crate_from_source_str(\n@@ -566,7 +566,7 @@ fn check_variants(files: [str], cx: context) {\n         let sess = @{\n             cm: cm,\n             mutable next_id: 0,\n-            diagnostic: diagnostic::mk_codemap_handler(cm)\n+            diagnostic: diagnostic::mk_codemap_handler(cm, none)\n         };\n         let crate =\n             parser::parse_crate_from_source_str("}, {"sha": "733b1fecc0e125d733adc311cf1f1fb63e98d193", "filename": "src/rustdoc/rustdoc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4849d5e5dd1d016e79e7d220fdbffeb2b7f887e/src%2Frustdoc%2Frustdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4849d5e5dd1d016e79e7d220fdbffeb2b7f887e/src%2Frustdoc%2Frustdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Frustdoc.rs?ref=e4849d5e5dd1d016e79e7d220fdbffeb2b7f887e", "patch": "@@ -194,7 +194,7 @@ fn main(argv: [str]) {\n     let sess = @{\n         cm: cm,\n         mutable next_id: 0,\n-        diagnostic: diagnostic::mk_codemap_handler(cm)\n+        diagnostic: diagnostic::mk_codemap_handler(cm, none)\n     };\n     let rd = { ps: pprust::rust_printer(w), w: w };\n     doc_header(rd, argv[1]);"}]}