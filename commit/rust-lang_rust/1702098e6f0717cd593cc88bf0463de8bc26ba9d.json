{"sha": "1702098e6f0717cd593cc88bf0463de8bc26ba9d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE3MDIwOThlNmYwNzE3Y2Q1OTNjYzg4YmYwNDYzZGU4YmMyNmJhOWQ=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2015-04-11T16:42:33Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2015-04-15T16:16:40Z"}, "message": "Dataflow changes and associated borrowck fix.\n\nRevise rustc::middle::dataflow: one must select kill-kind when calling\nadd_kill. The current kill-kinds are (1.) kills associated with\nends-of-scopes and (2.) kills associated with the actual action of the\nexpression/pattern.\n\nThen, use this to fix borrowck analysis so that it will not treat a\nbreak that pops through an assignment `x = { ... break; ... }` as a\nkill of the \"moved-out\" bit for `x`.\n\nFix #24267.\n\n(incorporated review feedback.)", "tree": {"sha": "ee1bcde309f79ed62937526ee3fdb37c58997b4a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ee1bcde309f79ed62937526ee3fdb37c58997b4a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1702098e6f0717cd593cc88bf0463de8bc26ba9d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1702098e6f0717cd593cc88bf0463de8bc26ba9d", "html_url": "https://github.com/rust-lang/rust/commit/1702098e6f0717cd593cc88bf0463de8bc26ba9d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1702098e6f0717cd593cc88bf0463de8bc26ba9d/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a9d8065633be69847e1a5b16f952467f43951b65", "url": "https://api.github.com/repos/rust-lang/rust/commits/a9d8065633be69847e1a5b16f952467f43951b65", "html_url": "https://github.com/rust-lang/rust/commit/a9d8065633be69847e1a5b16f952467f43951b65"}], "stats": {"total": 102, "additions": 79, "deletions": 23}, "files": [{"sha": "41b4495c5f08a82b40277b4666bc8ec275dc0414", "filename": "src/librustc/middle/dataflow.rs", "status": "modified", "additions": 63, "deletions": 17, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/1702098e6f0717cd593cc88bf0463de8bc26ba9d/src%2Flibrustc%2Fmiddle%2Fdataflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1702098e6f0717cd593cc88bf0463de8bc26ba9d/src%2Flibrustc%2Fmiddle%2Fdataflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdataflow.rs?ref=1702098e6f0717cd593cc88bf0463de8bc26ba9d", "patch": "@@ -64,8 +64,14 @@ pub struct DataFlowContext<'a, 'tcx: 'a, O> {\n     /// bits generated as we exit the cfg node. Updated by `add_gen()`.\n     gens: Vec<usize>,\n \n-    /// bits killed as we exit the cfg node. Updated by `add_kill()`.\n-    kills: Vec<usize>,\n+    /// bits killed as we exit the cfg node, or non-locally jump over\n+    /// it. Updated by `add_kill(KillFrom::ScopeEnd)`.\n+    scope_kills: Vec<usize>,\n+\n+    /// bits killed as we exit the cfg node directly; if it is jumped\n+    /// over, e.g. via `break`, the kills are not reflected in the\n+    /// jump's effects. Updated by `add_kill(KillFrom::Execution)`.\n+    action_kills: Vec<usize>,\n \n     /// bits that are valid on entry to the cfg node. Updated by\n     /// `propagate()`.\n@@ -130,15 +136,23 @@ impl<'a, 'tcx, O:DataFlowOperator> pprust::PpAnn for DataFlowContext<'a, 'tcx, O\n                 \"\".to_string()\n             };\n \n-            let kills = &self.kills[start .. end];\n-            let kills_str = if kills.iter().any(|&u| u != 0) {\n-                format!(\" kill: {}\", bits_to_string(kills))\n+            let action_kills = &self.action_kills[start .. end];\n+            let action_kills_str = if action_kills.iter().any(|&u| u != 0) {\n+                format!(\" action_kill: {}\", bits_to_string(action_kills))\n+            } else {\n+                \"\".to_string()\n+            };\n+\n+            let scope_kills = &self.scope_kills[start .. end];\n+            let scope_kills_str = if scope_kills.iter().any(|&u| u != 0) {\n+                format!(\" scope_kill: {}\", bits_to_string(scope_kills))\n             } else {\n                 \"\".to_string()\n             };\n \n-            try!(ps.synth_comment(format!(\"id {}: {}{}{}\", id, entry_str,\n-                                          gens_str, kills_str)));\n+            try!(ps.synth_comment(\n+                format!(\"id {}: {}{}{}{}\", id, entry_str,\n+                        gens_str, action_kills_str, scope_kills_str)));\n             try!(pp::space(&mut ps.s));\n         }\n         Ok(())\n@@ -187,6 +201,25 @@ fn build_nodeid_to_index(decl: Option<&ast::FnDecl>,\n     }\n }\n \n+/// Flag used by `add_kill` to indicate whether the provided kill\n+/// takes effect only when control flows directly through the node in\n+/// question, or if the kill's effect is associated with any\n+/// control-flow directly through or indirectly over the node.\n+#[derive(Copy, Clone, PartialEq, Debug)]\n+pub enum KillFrom {\n+    /// A `ScopeEnd` kill is one that takes effect when any control\n+    /// flow goes over the node. A kill associated with the end of the\n+    /// scope of a variable declaration `let x;` is an example of a\n+    /// `ScopeEnd` kill.\n+    ScopeEnd,\n+\n+    /// An `Execution` kill is one that takes effect only when control\n+    /// flow goes through the node to completion. A kill associated\n+    /// with an assignment statement `x = expr;` is an example of an\n+    /// `Execution` kill.\n+    Execution,\n+}\n+\n impl<'a, 'tcx, O:DataFlowOperator> DataFlowContext<'a, 'tcx, O> {\n     pub fn new(tcx: &'a ty::ctxt<'tcx>,\n                analysis_name: &'static str,\n@@ -206,8 +239,10 @@ impl<'a, 'tcx, O:DataFlowOperator> DataFlowContext<'a, 'tcx, O> {\n \n         let entry = if oper.initial_value() { usize::MAX } else {0};\n \n-        let gens: Vec<_> = repeat(0).take(num_nodes * words_per_id).collect();\n-        let kills: Vec<_> = repeat(0).take(num_nodes * words_per_id).collect();\n+        let zeroes: Vec<_> = repeat(0).take(num_nodes * words_per_id).collect();\n+        let gens: Vec<_> = zeroes.clone();\n+        let kills1: Vec<_> = zeroes.clone();\n+        let kills2: Vec<_> = zeroes;\n         let on_entry: Vec<_> = repeat(entry).take(num_nodes * words_per_id).collect();\n \n         let nodeid_to_index = build_nodeid_to_index(decl, cfg);\n@@ -220,7 +255,8 @@ impl<'a, 'tcx, O:DataFlowOperator> DataFlowContext<'a, 'tcx, O> {\n             bits_per_id: bits_per_id,\n             oper: oper,\n             gens: gens,\n-            kills: kills,\n+            action_kills: kills1,\n+            scope_kills: kills2,\n             on_entry: on_entry\n         }\n     }\n@@ -240,7 +276,7 @@ impl<'a, 'tcx, O:DataFlowOperator> DataFlowContext<'a, 'tcx, O> {\n         }\n     }\n \n-    pub fn add_kill(&mut self, id: ast::NodeId, bit: usize) {\n+    pub fn add_kill(&mut self, kind: KillFrom, id: ast::NodeId, bit: usize) {\n         //! Indicates that `id` kills `bit`\n         debug!(\"{} add_kill(id={}, bit={})\",\n                self.analysis_name, id, bit);\n@@ -250,7 +286,10 @@ impl<'a, 'tcx, O:DataFlowOperator> DataFlowContext<'a, 'tcx, O> {\n         let indices = get_cfg_indices(id, &self.nodeid_to_index);\n         for &cfgidx in indices {\n             let (start, end) = self.compute_id_range(cfgidx);\n-            let kills = &mut self.kills[start.. end];\n+            let kills = match kind {\n+                KillFrom::Execution => &mut self.action_kills[start.. end],\n+                KillFrom::ScopeEnd =>  &mut self.scope_kills[start.. end],\n+            };\n             set_bit(kills, bit);\n         }\n     }\n@@ -264,7 +303,9 @@ impl<'a, 'tcx, O:DataFlowOperator> DataFlowContext<'a, 'tcx, O> {\n         let (start, end) = self.compute_id_range(cfgidx);\n         let gens = &self.gens[start.. end];\n         bitwise(bits, gens, &Union);\n-        let kills = &self.kills[start.. end];\n+        let kills = &self.action_kills[start.. end];\n+        bitwise(bits, kills, &Subtract);\n+        let kills = &self.scope_kills[start.. end];\n         bitwise(bits, kills, &Subtract);\n \n         debug!(\"{} apply_gen_kill(cfgidx={:?}, bits={}) [after]\",\n@@ -278,7 +319,8 @@ impl<'a, 'tcx, O:DataFlowOperator> DataFlowContext<'a, 'tcx, O> {\n \n         assert!(start < self.gens.len());\n         assert!(end <= self.gens.len());\n-        assert!(self.gens.len() == self.kills.len());\n+        assert!(self.gens.len() == self.action_kills.len());\n+        assert!(self.gens.len() == self.scope_kills.len());\n         assert!(self.gens.len() == self.on_entry.len());\n \n         (start, end)\n@@ -412,7 +454,7 @@ impl<'a, 'tcx, O:DataFlowOperator> DataFlowContext<'a, 'tcx, O> {\n         cfg.graph.each_edge(|_edge_index, edge| {\n             let flow_exit = edge.source();\n             let (start, end) = self.compute_id_range(flow_exit);\n-            let mut orig_kills = self.kills[start.. end].to_vec();\n+            let mut orig_kills = self.scope_kills[start.. end].to_vec();\n \n             let mut changed = false;\n             for &node_id in &edge.data.exiting_scopes {\n@@ -421,8 +463,12 @@ impl<'a, 'tcx, O:DataFlowOperator> DataFlowContext<'a, 'tcx, O> {\n                     Some(indices) => {\n                         for &cfg_idx in indices {\n                             let (start, end) = self.compute_id_range(cfg_idx);\n-                            let kills = &self.kills[start.. end];\n+                            let kills = &self.scope_kills[start.. end];\n                             if bitwise(&mut orig_kills, kills, &Union) {\n+                                debug!(\"scope exits: scope id={} \\\n+                                        (node={:?} of {:?}) added killset: {}\",\n+                                       node_id, cfg_idx, indices,\n+                                       bits_to_string(kills));\n                                 changed = true;\n                             }\n                         }\n@@ -436,7 +482,7 @@ impl<'a, 'tcx, O:DataFlowOperator> DataFlowContext<'a, 'tcx, O> {\n             }\n \n             if changed {\n-                let bits = &mut self.kills[start.. end];\n+                let bits = &mut self.scope_kills[start.. end];\n                 debug!(\"{} add_kills_from_flow_exits flow_exit={:?} bits={} [before]\",\n                        self.analysis_name, flow_exit, mut_bits_to_string(bits));\n                 bits.clone_from_slice(&orig_kills[..]);"}, {"sha": "502321d07598cf2e058f49956a7fc529a3838048", "filename": "src/librustc_borrowck/borrowck/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1702098e6f0717cd593cc88bf0463de8bc26ba9d/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1702098e6f0717cd593cc88bf0463de8bc26ba9d/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs?ref=1702098e6f0717cd593cc88bf0463de8bc26ba9d", "patch": "@@ -24,6 +24,7 @@ use rustc::middle::cfg;\n use rustc::middle::dataflow::DataFlowContext;\n use rustc::middle::dataflow::BitwiseOperator;\n use rustc::middle::dataflow::DataFlowOperator;\n+use rustc::middle::dataflow::KillFrom;\n use rustc::middle::expr_use_visitor as euv;\n use rustc::middle::mem_categorization as mc;\n use rustc::middle::region;\n@@ -167,7 +168,7 @@ fn build_borrowck_dataflow_data<'a, 'tcx>(this: &mut BorrowckCtxt<'a, 'tcx>,\n                              all_loans.len());\n     for (loan_idx, loan) in all_loans.iter().enumerate() {\n         loan_dfcx.add_gen(loan.gen_scope.node_id(), loan_idx);\n-        loan_dfcx.add_kill(loan.kill_scope.node_id(), loan_idx);\n+        loan_dfcx.add_kill(KillFrom::ScopeEnd, loan.kill_scope.node_id(), loan_idx);\n     }\n     loan_dfcx.add_kills_from_flow_exits(cfg);\n     loan_dfcx.propagate(cfg, body);"}, {"sha": "1180717140e6d467af01ae4e4e21999f5ce62db7", "filename": "src/librustc_borrowck/borrowck/move_data.rs", "status": "modified", "additions": 14, "deletions": 5, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/1702098e6f0717cd593cc88bf0463de8bc26ba9d/src%2Flibrustc_borrowck%2Fborrowck%2Fmove_data.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1702098e6f0717cd593cc88bf0463de8bc26ba9d/src%2Flibrustc_borrowck%2Fborrowck%2Fmove_data.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmove_data.rs?ref=1702098e6f0717cd593cc88bf0463de8bc26ba9d", "patch": "@@ -18,6 +18,7 @@ use rustc::middle::cfg;\n use rustc::middle::dataflow::DataFlowContext;\n use rustc::middle::dataflow::BitwiseOperator;\n use rustc::middle::dataflow::DataFlowOperator;\n+use rustc::middle::dataflow::KillFrom;\n use rustc::middle::expr_use_visitor as euv;\n use rustc::middle::ty;\n use rustc::util::nodemap::{FnvHashMap, NodeSet};\n@@ -473,11 +474,13 @@ impl<'tcx> MoveData<'tcx> {\n \n         for (i, assignment) in self.var_assignments.borrow().iter().enumerate() {\n             dfcx_assign.add_gen(assignment.id, i);\n-            self.kill_moves(assignment.path, assignment.id, dfcx_moves);\n+            self.kill_moves(assignment.path, assignment.id,\n+                            KillFrom::Execution, dfcx_moves);\n         }\n \n         for assignment in &*self.path_assignments.borrow() {\n-            self.kill_moves(assignment.path, assignment.id, dfcx_moves);\n+            self.kill_moves(assignment.path, assignment.id,\n+                            KillFrom::Execution, dfcx_moves);\n         }\n \n         // Kill all moves related to a variable `x` when\n@@ -487,7 +490,8 @@ impl<'tcx> MoveData<'tcx> {\n                 LpVar(..) | LpUpvar(..) | LpDowncast(..) => {\n                     let kill_scope = path.loan_path.kill_scope(tcx);\n                     let path = *self.path_map.borrow().get(&path.loan_path).unwrap();\n-                    self.kill_moves(path, kill_scope.node_id(), dfcx_moves);\n+                    self.kill_moves(path, kill_scope.node_id(),\n+                                    KillFrom::ScopeEnd, dfcx_moves);\n                 }\n                 LpExtend(..) => {}\n             }\n@@ -500,7 +504,9 @@ impl<'tcx> MoveData<'tcx> {\n             match lp.kind {\n                 LpVar(..) | LpUpvar(..) | LpDowncast(..) => {\n                     let kill_scope = lp.kill_scope(tcx);\n-                    dfcx_assign.add_kill(kill_scope.node_id(), assignment_index);\n+                    dfcx_assign.add_kill(KillFrom::ScopeEnd,\n+                                         kill_scope.node_id(),\n+                                         assignment_index);\n                 }\n                 LpExtend(..) => {\n                     tcx.sess.bug(\"var assignment for non var path\");\n@@ -568,6 +574,7 @@ impl<'tcx> MoveData<'tcx> {\n     fn kill_moves(&self,\n                   path: MovePathIndex,\n                   kill_id: ast::NodeId,\n+                  kill_kind: KillFrom,\n                   dfcx_moves: &mut MoveDataFlow) {\n         // We can only perform kills for paths that refer to a unique location,\n         // since otherwise we may kill a move from one location with an\n@@ -576,7 +583,9 @@ impl<'tcx> MoveData<'tcx> {\n         let loan_path = self.path_loan_path(path);\n         if loan_path_is_precise(&*loan_path) {\n             self.each_applicable_move(path, |move_index| {\n-                dfcx_moves.add_kill(kill_id, move_index.get());\n+                debug!(\"kill_moves add_kill {:?} kill_id={} move_index={}\",\n+                       kill_kind, kill_id, move_index.get());\n+                dfcx_moves.add_kill(kill_kind, kill_id, move_index.get());\n                 true\n             });\n         }"}]}