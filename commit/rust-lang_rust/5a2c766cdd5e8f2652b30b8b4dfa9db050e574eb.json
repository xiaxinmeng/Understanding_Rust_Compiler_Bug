{"sha": "5a2c766cdd5e8f2652b30b8b4dfa9db050e574eb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVhMmM3NjZjZGQ1ZThmMjY1MmIzMGI4YjRkZmE5ZGIwNTBlNTc0ZWI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-05-27T05:24:36Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-05-27T05:24:36Z"}, "message": "Auto merge of #25749 - richo:python3, r=alexcrichton\n\nThis is enough to make `make tidy` work if you're using python3\r\n\r\nThere's definitely more stuff to do, but PR'ing now to avoid bitrot", "tree": {"sha": "3ec76539fbfb07acf28e530b283377eb07cae7aa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3ec76539fbfb07acf28e530b283377eb07cae7aa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5a2c766cdd5e8f2652b30b8b4dfa9db050e574eb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5a2c766cdd5e8f2652b30b8b4dfa9db050e574eb", "html_url": "https://github.com/rust-lang/rust/commit/5a2c766cdd5e8f2652b30b8b4dfa9db050e574eb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5a2c766cdd5e8f2652b30b8b4dfa9db050e574eb/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a97b3ff16ffb7370642b674ce154a827bf69b8d8", "url": "https://api.github.com/repos/rust-lang/rust/commits/a97b3ff16ffb7370642b674ce154a827bf69b8d8", "html_url": "https://github.com/rust-lang/rust/commit/a97b3ff16ffb7370642b674ce154a827bf69b8d8"}, {"sha": "96d7400b1a1e2e8f3ac052015684fc3946e2da19", "url": "https://api.github.com/repos/rust-lang/rust/commits/96d7400b1a1e2e8f3ac052015684fc3946e2da19", "html_url": "https://github.com/rust-lang/rust/commit/96d7400b1a1e2e8f3ac052015684fc3946e2da19"}], "stats": {"total": 219, "additions": 42, "deletions": 177}, "files": [{"sha": "73ddfcb04cb2f0bc96302e3d5e2504b1d09e15b5", "filename": "src/etc/2014-06-rewrite-bytes-macros.py", "status": "removed", "additions": 0, "deletions": 138, "changes": 138, "blob_url": "https://github.com/rust-lang/rust/blob/a97b3ff16ffb7370642b674ce154a827bf69b8d8/src%2Fetc%2F2014-06-rewrite-bytes-macros.py", "raw_url": "https://github.com/rust-lang/rust/raw/a97b3ff16ffb7370642b674ce154a827bf69b8d8/src%2Fetc%2F2014-06-rewrite-bytes-macros.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2F2014-06-rewrite-bytes-macros.py?ref=a97b3ff16ffb7370642b674ce154a827bf69b8d8", "patch": "@@ -1,138 +0,0 @@\n-#!/usr/bin/env python\n-#\n-# Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-# file at the top-level directory of this distribution and at\n-# http://rust-lang.org/COPYRIGHT.\n-#\n-# Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-# http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-# <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-# option. This file may not be copied, modified, or distributed\n-# except according to those terms.\n-\n-import sys\n-import subprocess\n-import re\n-\n-\n-def main():\n-    if len(sys.argv) <= 1:\n-        print('Usage: %s [ --apply ] filename1.rs filename2.rs ...'\n-              % sys.argv[0])\n-    elif sys.argv[1] == '--apply':\n-        for filename in sys.argv[2:]:\n-            patch(filename)\n-    else:\n-        for filename in sys.argv[1:]:\n-            diff(filename)\n-\n-\n-def patch(filename):\n-    source = read(filename)\n-    rewritten = rewrite_bytes_macros(source)\n-    if rewritten is not None and rewritten != source:\n-        write(filename, rewritten)\n-\n-\n-def diff(filename):\n-    rewritten = rewrite_bytes_macros(read(filename))\n-    if rewritten is not None:\n-        p = subprocess.Popen(['diff', '-u', filename, '-'],\n-                             stdin=subprocess.PIPE)\n-        p.stdin.write(rewritten)\n-        p.stdin.close()\n-        p.wait()\n-\n-\n-def read(filename):\n-    with open(filename, 'rb') as f:\n-        return f.read()\n-\n-\n-def write(filename, content):\n-    with open(filename, 'wb') as f:\n-        f.write(content)\n-\n-\n-def rewrite_bytes_macros(source):\n-    rewritten, num_occurrences = BYTES_MACRO_RE.subn(rewrite_one_macro, source)\n-    if num_occurrences > 0:\n-        return rewritten\n-\n-\n-BYTES_MACRO_RE = re.compile(br'bytes!\\(  (?P<args>  [^)]*  )  \\)', re.VERBOSE)\n-\n-\n-def rewrite_one_macro(match):\n-    try:\n-        bytes = parse_bytes(split_args(match.group('args')))\n-        return b'b\"' + b''.join(map(escape, bytes)) + b'\"'\n-    except SkipThisRewrite:\n-        print('Skipped: %s' % match.group(0).decode('utf8', 'replace'))\n-        return match.group(0)\n-\n-\n-class SkipThisRewrite(Exception):\n-    pass\n-\n-\n-def split_args(args):\n-    previous = b''\n-    for arg in args.split(b','):\n-        if previous:\n-            arg = previous + b',' + arg\n-        if arg.count(b'\"') % 2 == 0:\n-            yield arg\n-            previous = b''\n-        else:\n-            previous = arg\n-    if previous:\n-        yield previous\n-\n-\n-def parse_bytes(args):\n-    for arg in args:\n-        arg = arg.strip()\n-        if (arg.startswith(b'\"') and arg.endswith(b'\"')) or (\n-                arg.startswith(b\"'\") and arg.endswith(b\"'\")):\n-            # Escaped newline means something different in Rust and Python.\n-            if b'\\\\\\n' in arg:\n-                raise SkipThisRewrite\n-            for byte in eval(b'u' + arg).encode('utf8'):\n-                yield ord(byte)\n-        else:\n-            if arg.endswith(b'u8'):\n-                arg = arg[:-2]\n-            # Assume that all Rust integer literals\n-            # are valid Python integer literals\n-            value = int(eval(arg))\n-            assert value <= 0xFF\n-            yield value\n-\n-\n-def escape(byte):\n-    c = chr(byte)\n-    escaped = {\n-        b'\\0': br'\\0',\n-        b'\\t': br'\\t',\n-        b'\\n': br'\\n',\n-        b'\\r': br'\\r',\n-        b'\\'': b'\\\\\\'',\n-        b'\\\\': br'\\\\',\n-    }.get(c)\n-    if escaped is not None:\n-        return escaped\n-    elif b' ' <= c <= b'~':\n-        return chr(byte)\n-    else:\n-        return ('\\\\x%02X' % byte).encode('ascii')\n-\n-\n-if str is not bytes:\n-    # Python 3.x\n-    ord = lambda x: x\n-    chr = lambda x: bytes([x])\n-\n-\n-if __name__ == '__main__':\n-    main()"}, {"sha": "9312b685c14a2b5dc79d1aacfd31ad11e9901713", "filename": "src/etc/check-summary.py", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/5a2c766cdd5e8f2652b30b8b4dfa9db050e574eb/src%2Fetc%2Fcheck-summary.py", "raw_url": "https://github.com/rust-lang/rust/raw/5a2c766cdd5e8f2652b30b8b4dfa9db050e574eb/src%2Fetc%2Fcheck-summary.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fcheck-summary.py?ref=5a2c766cdd5e8f2652b30b8b4dfa9db050e574eb", "patch": "@@ -34,7 +34,7 @@ def summarise(fname):\n             summaries.append((fname, summary))\n \n     def count(t):\n-        return sum(map(lambda (f, s): len(s.get(t, [])), summaries))\n+        return sum(map(lambda f: len(f[1].get(t, [])), summaries))\n \n     logfiles = sys.argv[1:]\n     for files in map(glob.glob, logfiles):\n@@ -43,15 +43,15 @@ def count(t):\n     failed = count('failed')\n     ignored = count('ignored')\n     measured = count('bench')\n-    print \"summary of %d test runs: %d passed; %d failed; %d ignored; %d measured\" % \\\n-          (len(logfiles), ok, failed, ignored, measured)\n-    print \"\"\n+    print(\"summary of %d test runs: %d passed; %d failed; %d ignored; %d measured\" %\n+          (len(logfiles), ok, failed, ignored, measured))\n+    print(\"\")\n \n     if failed > 0:\n-        print \"failed tests:\"\n+        print(\"failed tests:\")\n         for f, s in summaries:\n             failures = s.get('failed', [])\n             if len(failures) > 0:\n-                print \"  %s:\" % (f)\n+                print(\"  %s:\" % (f))\n             for test in failures:\n-                print \"    %s\" % (test)\n+                print(\"    %s\" % (test))"}, {"sha": "4b1b78da9fde47e412de0cc7bb33426d90199288", "filename": "src/etc/errorck.py", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a2c766cdd5e8f2652b30b8b4dfa9db050e574eb/src%2Fetc%2Ferrorck.py", "raw_url": "https://github.com/rust-lang/rust/raw/5a2c766cdd5e8f2652b30b8b4dfa9db050e574eb/src%2Fetc%2Ferrorck.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Ferrorck.py?ref=5a2c766cdd5e8f2652b30b8b4dfa9db050e574eb", "patch": "@@ -16,7 +16,7 @@\n import re\n \n if len(sys.argv) < 2:\n-    print \"usage: errorck.py <src-dir>\"\n+    print(\"usage: errorck.py <src-dir>\")\n     sys.exit(1)\n \n src_dir = sys.argv[1]"}, {"sha": "e82f00f3e7df53b3fd222c67ac7ffa73375fc529", "filename": "src/etc/featureck.py", "status": "modified", "additions": 28, "deletions": 25, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/5a2c766cdd5e8f2652b30b8b4dfa9db050e574eb/src%2Fetc%2Ffeatureck.py", "raw_url": "https://github.com/rust-lang/rust/raw/5a2c766cdd5e8f2652b30b8b4dfa9db050e574eb/src%2Fetc%2Ffeatureck.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Ffeatureck.py?ref=5a2c766cdd5e8f2652b30b8b4dfa9db050e574eb", "patch": "@@ -18,10 +18,13 @@\n #     since the same version\n #   * Prints information about features\n \n-import sys, os, re\n+import sys\n+import os\n+import re\n+import codecs\n \n if len(sys.argv) < 2:\n-    print \"usage: featurkck.py <src-dir>\"\n+    print(\"usage: featureck.py <src-dir>\")\n     sys.exit(1)\n \n src_dir = sys.argv[1]\n@@ -47,7 +50,7 @@\n             line = line.replace(\"(\", \"\").replace(\"),\", \"\").replace(\")\", \"\")\n             parts = line.split(\",\")\n             if len(parts) != 3:\n-                print \"error: unexpected number of components in line: \" + original_line\n+                print(\"error: unexpected number of components in line: \" + original_line)\n                 sys.exit(1)\n             feature_name = parts[0].strip().replace('\"', \"\")\n             since = parts[1].strip().replace('\"', \"\")\n@@ -79,7 +82,7 @@\n             continue\n \n         path = os.path.join(dirpath, filename)\n-        with open(path, 'r') as f:\n+        with codecs.open(filename=path, mode='r', encoding=\"utf-8\") as f:\n             line_num = 0\n             for line in f:\n                 line_num += 1\n@@ -107,9 +110,9 @@\n                         if not mm is None:\n                             since = mm.group(1)\n                         else:\n-                            print \"error: misformed stability attribute\"\n-                            print \"line \" + str(line_num) + \" of \" + path + \":\"\n-                            print line\n+                            print(\"error: misformed stability attribute\")\n+                            print(\"line %d of %:\" % (line_num, path))\n+                            print(line)\n                             errors = True\n \n                     lib_features[feature_name] = feature_name\n@@ -123,24 +126,24 @@\n                         (expected_since, source_path, source_line_num, source_line) = \\\n                             lib_features_and_level.get((feature_name, level))\n                         if since != expected_since:\n-                            print \"error: mismatch in \" + level + \" feature '\" + feature_name + \"'\"\n-                            print \"line \" + str(source_line_num) + \" of \" + source_path + \":\"\n-                            print source_line\n-                            print \"line \" + str(line_num) + \" of \" + path + \":\"\n-                            print line\n+                            print(\"error: mismatch in %s feature '%s'\" % (level, feature_name))\n+                            print(\"line %d of %s:\" % (source_line_num, source_path))\n+                            print(source_line)\n+                            print(\"line %d of %s:\" % (line_num, path))\n+                            print(line)\n                             errors = True\n \n                     # Verify that this lib feature doesn't duplicate a lang feature\n                     if feature_name in language_feature_names:\n-                        print \"error: lib feature '\" + feature_name + \"' duplicates a lang feature\"\n-                        print \"line \" + str(line_num) + \" of \" + path + \":\"\n-                        print line\n+                        print(\"error: lib feature '%s' duplicates a lang feature\" % (feature_name))\n+                        print(\"line %d of %s:\" % (line_num, path))\n+                        print(line)\n                         errors = True\n \n                 else:\n-                    print \"error: misformed stability attribute\"\n-                    print \"line \" + str(line_num) + \" of \" + path + \":\"\n-                    print line\n+                    print(\"error: misformed stability attribute\")\n+                    print(\"line %d of %s:\" % (line_num, path))\n+                    print(line)\n                     errors = True\n \n # Merge data about both lists\n@@ -175,7 +178,7 @@\n     is_unstable = lib_features_and_level.get((name, \"unstable\")) is not None\n \n     if is_stable and is_unstable:\n-        print \"error: feature '\" + name + \"' is both stable and unstable\"\n+        print(\"error: feature '%s' is both stable and unstable\" % (name))\n         errors = True\n \n     if is_stable:\n@@ -192,21 +195,21 @@\n for name in lib_feature_stats:\n     if language_feature_stats.get(name) is not None:\n         if not name in joint_features:\n-            print \"error: feature '\" + name + \"' is both a lang and lib feature but not whitelisted\"\n+            print(\"error: feature '%s' is both a lang and lib feature but not whitelisted\" % (name))\n             errors = True\n         lang_status = language_feature_stats[name][3]\n         lib_status = lib_feature_stats[name][3]\n         lang_stable_since = language_feature_stats[name][4]\n         lib_stable_since = lib_feature_stats[name][4]\n \n         if lang_status != lib_status and lib_status != \"deprecated\":\n-            print \"error: feature '\" + name + \"' has lang status \" + lang_status + \\\n-                  \" but lib status \" + lib_status\n+            print(\"error: feature '%s' has lang status %s \" +\n+                  \"but lib status %s\" % (name, lang_status, lib_status))\n             errors = True\n \n         if lang_stable_since != lib_stable_since:\n-            print \"error: feature '\" + name + \"' has lang stable since \" + lang_stable_since + \\\n-                  \" but lib stable since \" + lib_stable_since\n+            print(\"error: feature '%s' has lang stable since %s \" +\n+                  \"but lib stable since %s\" % (name, lang_stable_since, lib_stable_since))\n             errors = True\n \n         merged_stats[name] = (name, True, True, lang_status, lang_stable_since)\n@@ -240,5 +243,5 @@\n \n print\n for line in lines:\n-    print \"* \" + line\n+    print(\"* \" + line)\n print"}, {"sha": "9f5f919bce8d8c1c315a17b73038cac87f58cf4f", "filename": "src/etc/tidy.py", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5a2c766cdd5e8f2652b30b8b4dfa9db050e574eb/src%2Fetc%2Ftidy.py", "raw_url": "https://github.com/rust-lang/rust/raw/5a2c766cdd5e8f2652b30b8b4dfa9db050e574eb/src%2Fetc%2Ftidy.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Ftidy.py?ref=5a2c766cdd5e8f2652b30b8b4dfa9db050e574eb", "patch": "@@ -81,7 +81,7 @@ def interesting_file(f):\n check_linelength = True\n \n if len(sys.argv) < 2:\n-    print \"usage: tidy.py <src-dir>\"\n+    print(\"usage: tidy.py <src-dir>\")\n     sys.exit(1)\n \n src_dir = sys.argv[1]\n@@ -200,10 +200,10 @@ def interesting_file(f):\n \n print\n for ext in sorted(file_counts, key=file_counts.get, reverse=True):\n-    print \"* linted {} {} files\".format(file_counts[ext], ext)\n-print \"* linted {} other files\".format(count_other_linted_files)\n-print \"* total lines of code: {}\".format(count_lines)\n-print \"* total non-blank lines of code: {}\".format(count_non_blank_lines)\n-print\n+    print(\"* linted {} {} files\".format(file_counts[ext], ext))\n+print(\"* linted {} other files\".format(count_other_linted_files))\n+print(\"* total lines of code: {}\".format(count_lines))\n+print(\"* total non-blank lines of code: {}\".format(count_non_blank_lines))\n+print()\n \n sys.exit(err)"}]}