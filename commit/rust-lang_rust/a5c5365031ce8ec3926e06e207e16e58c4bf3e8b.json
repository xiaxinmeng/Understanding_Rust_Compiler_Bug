{"sha": "a5c5365031ce8ec3926e06e207e16e58c4bf3e8b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE1YzUzNjUwMzFjZThlYzM5MjZlMDZlMjA3ZTE2ZTU4YzRiZjNlOGI=", "commit": {"author": {"name": "Simonas Kazlauskas", "email": "git@kazlauskas.me", "date": "2020-03-14T18:13:55Z"}, "committer": {"name": "Mateusz Miku\u0142a", "email": "mati865@gmail.com", "date": "2020-05-02T14:47:52Z"}, "message": "Move ensure_sufficient_stack to data_structures\n\nWe anticipate this to have uses in all sorts of crates and keeping it in\n`rustc_data_structures` enables access to it from more locations without\nnecessarily pulling in the large `librustc` crate.", "tree": {"sha": "9229db3a9b196e2e12a38bcb97eb31fdc995d179", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9229db3a9b196e2e12a38bcb97eb31fdc995d179"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a5c5365031ce8ec3926e06e207e16e58c4bf3e8b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a5c5365031ce8ec3926e06e207e16e58c4bf3e8b", "html_url": "https://github.com/rust-lang/rust/commit/a5c5365031ce8ec3926e06e207e16e58c4bf3e8b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a5c5365031ce8ec3926e06e207e16e58c4bf3e8b/comments", "author": {"login": "nagisa", "id": 679122, "node_id": "MDQ6VXNlcjY3OTEyMg==", "avatar_url": "https://avatars.githubusercontent.com/u/679122?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nagisa", "html_url": "https://github.com/nagisa", "followers_url": "https://api.github.com/users/nagisa/followers", "following_url": "https://api.github.com/users/nagisa/following{/other_user}", "gists_url": "https://api.github.com/users/nagisa/gists{/gist_id}", "starred_url": "https://api.github.com/users/nagisa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nagisa/subscriptions", "organizations_url": "https://api.github.com/users/nagisa/orgs", "repos_url": "https://api.github.com/users/nagisa/repos", "events_url": "https://api.github.com/users/nagisa/events{/privacy}", "received_events_url": "https://api.github.com/users/nagisa/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mati865", "id": 1174646, "node_id": "MDQ6VXNlcjExNzQ2NDY=", "avatar_url": "https://avatars.githubusercontent.com/u/1174646?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mati865", "html_url": "https://github.com/mati865", "followers_url": "https://api.github.com/users/mati865/followers", "following_url": "https://api.github.com/users/mati865/following{/other_user}", "gists_url": "https://api.github.com/users/mati865/gists{/gist_id}", "starred_url": "https://api.github.com/users/mati865/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mati865/subscriptions", "organizations_url": "https://api.github.com/users/mati865/orgs", "repos_url": "https://api.github.com/users/mati865/repos", "events_url": "https://api.github.com/users/mati865/events{/privacy}", "received_events_url": "https://api.github.com/users/mati865/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "968f442c7ce591e9cb03b57bb0dac30df4909b50", "url": "https://api.github.com/repos/rust-lang/rust/commits/968f442c7ce591e9cb03b57bb0dac30df4909b50", "html_url": "https://github.com/rust-lang/rust/commit/968f442c7ce591e9cb03b57bb0dac30df4909b50"}], "stats": {"total": 66, "additions": 33, "deletions": 33}, "files": [{"sha": "ba92fcc83083bc0183468b56640495ad75de8bcd", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a5c5365031ce8ec3926e06e207e16e58c4bf3e8b/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/a5c5365031ce8ec3926e06e207e16e58c4bf3e8b/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=a5c5365031ce8ec3926e06e207e16e58c4bf3e8b", "patch": "@@ -3161,7 +3161,6 @@ checksum = \"81dfcfbb0ddfd533abf8c076e3b49d1e5042d1962526a12ce2c66d514b24cca3\"\n dependencies = [\n  \"rustc-ap-rustc_data_structures\",\n  \"smallvec 1.0.0\",\n- \"stacker\",\n ]\n \n [[package]]\n@@ -3706,6 +3705,7 @@ dependencies = [\n  \"serialize\",\n  \"smallvec 1.0.0\",\n  \"stable_deref_trait\",\n+ \"stacker\",\n  \"winapi 0.3.8\",\n ]\n "}, {"sha": "251faf6af006d5593da79d0f4d88f53e537e2b89", "filename": "src/librustc_ast_lowering/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a5c5365031ce8ec3926e06e207e16e58c4bf3e8b/src%2Flibrustc_ast_lowering%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5c5365031ce8ec3926e06e207e16e58c4bf3e8b/src%2Flibrustc_ast_lowering%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_lowering%2Fexpr.rs?ref=a5c5365031ce8ec3926e06e207e16e58c4bf3e8b", "patch": "@@ -3,11 +3,11 @@ use super::{ImplTraitContext, LoweringContext, ParamMode, ParenthesizedGenericAr\n use rustc_ast::ast::*;\n use rustc_ast::attr;\n use rustc_ast::ptr::P as AstP;\n+use rustc_data_structures::stack::ensure_sufficient_stack;\n use rustc_data_structures::thin_vec::ThinVec;\n use rustc_errors::struct_span_err;\n use rustc_hir as hir;\n use rustc_hir::def::Res;\n-use rustc_middle::limits::ensure_sufficient_stack;\n use rustc_span::source_map::{respan, DesugaringKind, Span, Spanned};\n use rustc_span::symbol::{sym, Symbol};\n "}, {"sha": "d54ad2036d5c616fe82d8217a105d1fe570a15ed", "filename": "src/librustc_ast_lowering/pat.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a5c5365031ce8ec3926e06e207e16e58c4bf3e8b/src%2Flibrustc_ast_lowering%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5c5365031ce8ec3926e06e207e16e58c4bf3e8b/src%2Flibrustc_ast_lowering%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_lowering%2Fpat.rs?ref=a5c5365031ce8ec3926e06e207e16e58c4bf3e8b", "patch": "@@ -2,9 +2,9 @@ use super::{ImplTraitContext, LoweringContext, ParamMode};\n \n use rustc_ast::ast::*;\n use rustc_ast::ptr::P;\n+use rustc_data_structures::stack::ensure_sufficient_stack;\n use rustc_hir as hir;\n use rustc_hir::def::Res;\n-use rustc_middle::limits::ensure_sufficient_stack;\n use rustc_span::{source_map::Spanned, Span};\n \n impl<'a, 'hir> LoweringContext<'a, 'hir> {"}, {"sha": "fbabd1ab5419fcdc91491e81b7b7b456a06f0352", "filename": "src/librustc_data_structures/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a5c5365031ce8ec3926e06e207e16e58c4bf3e8b/src%2Flibrustc_data_structures%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/a5c5365031ce8ec3926e06e207e16e58c4bf3e8b/src%2Flibrustc_data_structures%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2FCargo.toml?ref=a5c5365031ce8ec3926e06e207e16e58c4bf3e8b", "patch": "@@ -28,6 +28,7 @@ rustc_index = { path = \"../librustc_index\", package = \"rustc_index\" }\n bitflags = \"1.2.1\"\n measureme = \"0.7.1\"\n libc = \"0.2\"\n+stacker = \"0.1.6\"\n \n [dependencies.parking_lot]\n version = \"0.10\""}, {"sha": "a23181befc1663367aaf33858c455cbe03fbb847", "filename": "src/librustc_data_structures/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a5c5365031ce8ec3926e06e207e16e58c4bf3e8b/src%2Flibrustc_data_structures%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5c5365031ce8ec3926e06e207e16e58c4bf3e8b/src%2Flibrustc_data_structures%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Flib.rs?ref=a5c5365031ce8ec3926e06e207e16e58c4bf3e8b", "patch": "@@ -80,6 +80,7 @@ pub mod stable_set;\n #[macro_use]\n pub mod stable_hasher;\n pub mod sharded;\n+pub mod stack;\n pub mod sync;\n pub mod thin_vec;\n pub mod tiny_list;"}, {"sha": "a4964b7aa0cc8c95f72f9f90807beb89da952d98", "filename": "src/librustc_data_structures/stack.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/a5c5365031ce8ec3926e06e207e16e58c4bf3e8b/src%2Flibrustc_data_structures%2Fstack.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5c5365031ce8ec3926e06e207e16e58c4bf3e8b/src%2Flibrustc_data_structures%2Fstack.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fstack.rs?ref=a5c5365031ce8ec3926e06e207e16e58c4bf3e8b", "patch": "@@ -0,0 +1,17 @@\n+// This is the amount of bytes that need to be left on the stack before increasing the size.\n+// It must be at least as large as the stack required by any code that does not call\n+// `ensure_sufficient_stack`.\n+const RED_ZONE: usize = 100 * 1024; // 100k\n+\n+// Only the first stack that is pushed, grows exponentially (2^n * STACK_PER_RECURSION) from then\n+// on. This flag has performance relevant characteristics. Don't set it too high.\n+const STACK_PER_RECURSION: usize = 1 * 1024 * 1024; // 1MB\n+\n+/// Grows the stack on demand to prevent stack overflow. Call this in strategic locations\n+/// to \"break up\" recursive calls. E.g. almost any call to `visit_expr` or equivalent can benefit\n+/// from this.\n+///\n+/// Should not be sprinkled around carelessly, as it causes a little bit of overhead.\n+pub fn ensure_sufficient_stack<R>(f: impl FnOnce() -> R) -> R {\n+    stacker::maybe_grow(RED_ZONE, STACK_PER_RECURSION, f)\n+}"}, {"sha": "398ba4d72d44901ea2213c88aa4b2b39d6053ec8", "filename": "src/librustc_middle/Cargo.toml", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a5c5365031ce8ec3926e06e207e16e58c4bf3e8b/src%2Flibrustc_middle%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/a5c5365031ce8ec3926e06e207e16e58c4bf3e8b/src%2Flibrustc_middle%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2FCargo.toml?ref=a5c5365031ce8ec3926e06e207e16e58c4bf3e8b", "patch": "@@ -34,4 +34,3 @@ byteorder = { version = \"1.3\" }\n smallvec = { version = \"1.0\", features = [\"union\", \"may_dangle\"] }\n measureme = \"0.7.1\"\n rustc_session = { path = \"../librustc_session\" }\n-stacker = \"0.1.6\""}, {"sha": "c43c22cd61ba64eb107af9e0ebbc58ef308af0e6", "filename": "src/librustc_middle/middle/limits.rs", "status": "modified", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/a5c5365031ce8ec3926e06e207e16e58c4bf3e8b/src%2Flibrustc_middle%2Fmiddle%2Flimits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5c5365031ce8ec3926e06e207e16e58c4bf3e8b/src%2Flibrustc_middle%2Fmiddle%2Flimits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fmiddle%2Flimits.rs?ref=a5c5365031ce8ec3926e06e207e16e58c4bf3e8b", "patch": "@@ -13,24 +13,6 @@ use rustc_span::symbol::{sym, Symbol};\n \n use std::num::IntErrorKind;\n \n-// This is the amount of bytes that need to be left on the stack before increasing the size.\n-// It must be at least as large as the stack required by any code that does not call\n-// `ensure_sufficient_stack`.\n-const RED_ZONE: usize = 100 * 1024; // 100k\n-\n-// Ony the first stack that is pushed, grows exponentially (2^n * STACK_PER_RECURSION) from then\n-// on. This flag has performance relevant characteristics. Don't set it too high.\n-const STACK_PER_RECURSION: usize = 1 * 1024 * 1024; // 1MB\n-\n-/// Grows the stack on demand to prevent stack overflow. Call this in strategic locations\n-/// to \"break up\" recursive calls. E.g. almost any call to `visit_expr` or equivalent can benefit\n-/// from this.\n-///\n-/// Should not be sprinkled around carelessly, as it causes a little bit of overhead.\n-pub fn ensure_sufficient_stack<R, F: FnOnce() -> R>(f: F) -> R {\n-    stacker::maybe_grow(RED_ZONE, STACK_PER_RECURSION, f)\n-}\n-\n pub fn update_limits(sess: &Session, krate: &ast::Crate) {\n     update_limit(sess, krate, &sess.recursion_limit, sym::recursion_limit, 128);\n     update_limit(sess, krate, &sess.type_length_limit, sym::type_length_limit, 1048576);"}, {"sha": "d1b5eed921bb3fa06992b5dafe3c2456110ebc52", "filename": "src/librustc_middle/ty/inhabitedness/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a5c5365031ce8ec3926e06e207e16e58c4bf3e8b/src%2Flibrustc_middle%2Fty%2Finhabitedness%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5c5365031ce8ec3926e06e207e16e58c4bf3e8b/src%2Flibrustc_middle%2Fty%2Finhabitedness%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Finhabitedness%2Fmod.rs?ref=a5c5365031ce8ec3926e06e207e16e58c4bf3e8b", "patch": "@@ -1,12 +1,12 @@\n pub use self::def_id_forest::DefIdForest;\n \n-use crate::middle::limits::ensure_sufficient_stack;\n use crate::ty;\n use crate::ty::context::TyCtxt;\n use crate::ty::TyKind::*;\n use crate::ty::{AdtDef, FieldDef, Ty, TyS, VariantDef};\n use crate::ty::{AdtKind, Visibility};\n use crate::ty::{DefId, SubstsRef};\n+use rustc_data_structures::stack::ensure_sufficient_stack;\n \n mod def_id_forest;\n "}, {"sha": "e62a9efaee3d75c58f7059ff1a8dc9cbdefe6767", "filename": "src/librustc_middle/ty/query/plumbing.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a5c5365031ce8ec3926e06e207e16e58c4bf3e8b/src%2Flibrustc_middle%2Fty%2Fquery%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5c5365031ce8ec3926e06e207e16e58c4bf3e8b/src%2Flibrustc_middle%2Fty%2Fquery%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fquery%2Fplumbing.rs?ref=a5c5365031ce8ec3926e06e207e16e58c4bf3e8b", "patch": "@@ -69,7 +69,7 @@ impl QueryContext for TyCtxt<'tcx> {\n \n             // Use the `ImplicitCtxt` while we execute the query.\n             tls::enter_context(&new_icx, |_| {\n-                crate::middle::limits::ensure_sufficient_stack(|| compute(*self))\n+                rustc_data_structures::stack::ensure_sufficient_stack(|| compute(*self))\n             })\n         })\n     }"}, {"sha": "3d79825473588170daf4504f6ebea57c3bd71e77", "filename": "src/librustc_mir/monomorphize/collector.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a5c5365031ce8ec3926e06e207e16e58c4bf3e8b/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5c5365031ce8ec3926e06e207e16e58c4bf3e8b/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs?ref=a5c5365031ce8ec3926e06e207e16e58c4bf3e8b", "patch": "@@ -369,7 +369,7 @@ fn collect_items_rec<'tcx>(\n             recursion_depth_reset = Some(check_recursion_limit(tcx, instance, recursion_depths));\n             check_type_length_limit(tcx, instance);\n \n-            rustc::middle::limits::ensure_sufficient_stack(|| {\n+            rustc_data_structures::stack::ensure_sufficient_stack(|| {\n                 collect_neighbours(tcx, instance, &mut neighbors);\n             });\n         }\n@@ -1148,7 +1148,7 @@ fn collect_miri<'tcx>(tcx: TyCtxt<'tcx>, alloc_id: AllocId, output: &mut Vec<Mon\n         Some(GlobalAlloc::Memory(alloc)) => {\n             trace!(\"collecting {:?} with {:#?}\", alloc_id, alloc);\n             for &((), inner) in alloc.relocations().values() {\n-                rustc_middle::limits::ensure_sufficient_stack(|| {\n+                rustc_data_structures::stack::ensure_sufficient_stack(|| {\n                     collect_miri(tcx, inner, output);\n                 });\n             }"}, {"sha": "d3304c71e61e8915078fd94b5b21d6897060b988", "filename": "src/librustc_mir_build/build/expr/as_temp.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a5c5365031ce8ec3926e06e207e16e58c4bf3e8b/src%2Flibrustc_mir_build%2Fbuild%2Fexpr%2Fas_temp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5c5365031ce8ec3926e06e207e16e58c4bf3e8b/src%2Flibrustc_mir_build%2Fbuild%2Fexpr%2Fas_temp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fbuild%2Fexpr%2Fas_temp.rs?ref=a5c5365031ce8ec3926e06e207e16e58c4bf3e8b", "patch": "@@ -3,8 +3,8 @@\n use crate::build::scope::DropKind;\n use crate::build::{BlockAnd, BlockAndExtension, Builder};\n use crate::hair::*;\n+use rustc_data_structures::stack::ensure_sufficient_stack;\n use rustc_hir as hir;\n-use rustc_middle::limits::ensure_sufficient_stack;\n use rustc_middle::middle::region;\n use rustc_middle::mir::*;\n "}, {"sha": "591a41f12bf776ff3adf86a0e255d1279bf43a14", "filename": "src/librustc_trait_selection/traits/project.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a5c5365031ce8ec3926e06e207e16e58c4bf3e8b/src%2Flibrustc_trait_selection%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5c5365031ce8ec3926e06e207e16e58c4bf3e8b/src%2Flibrustc_trait_selection%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Fproject.rs?ref=a5c5365031ce8ec3926e06e207e16e58c4bf3e8b", "patch": "@@ -18,9 +18,9 @@ use crate::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n use crate::infer::{InferCtxt, InferOk, LateBoundRegionConversionTime};\n use crate::traits::error_reporting::InferCtxtExt;\n use rustc_ast::ast::Ident;\n+use rustc_data_structures::stack::ensure_sufficient_stack;\n use rustc_errors::ErrorReported;\n use rustc_hir::def_id::DefId;\n-use rustc_middle::limits::ensure_sufficient_stack;\n use rustc_middle::ty::fold::{TypeFoldable, TypeFolder};\n use rustc_middle::ty::subst::{InternalSubsts, Subst};\n use rustc_middle::ty::{self, ToPolyTraitRef, ToPredicate, Ty, TyCtxt, WithConstness};"}, {"sha": "3b985a4b150faa7b447cb7b764d82b28ac805b46", "filename": "src/librustc_trait_selection/traits/query/normalize.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a5c5365031ce8ec3926e06e207e16e58c4bf3e8b/src%2Flibrustc_trait_selection%2Ftraits%2Fquery%2Fnormalize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5c5365031ce8ec3926e06e207e16e58c4bf3e8b/src%2Flibrustc_trait_selection%2Ftraits%2Fquery%2Fnormalize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Fquery%2Fnormalize.rs?ref=a5c5365031ce8ec3926e06e207e16e58c4bf3e8b", "patch": "@@ -7,8 +7,8 @@ use crate::infer::canonical::OriginalQueryValues;\n use crate::infer::{InferCtxt, InferOk};\n use crate::traits::error_reporting::InferCtxtExt;\n use crate::traits::{Obligation, ObligationCause, PredicateObligation, Reveal};\n+use rustc_data_structures::stack::ensure_sufficient_stack;\n use rustc_infer::traits::Normalized;\n-use rustc_middle::limits::ensure_sufficient_stack;\n use rustc_middle::ty::fold::{TypeFoldable, TypeFolder};\n use rustc_middle::ty::subst::Subst;\n use rustc_middle::ty::{self, Ty, TyCtxt};"}, {"sha": "6cc2efc2306042699731c6c3f9ec4b3af1a25db3", "filename": "src/librustc_trait_selection/traits/select.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a5c5365031ce8ec3926e06e207e16e58c4bf3e8b/src%2Flibrustc_trait_selection%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5c5365031ce8ec3926e06e207e16e58c4bf3e8b/src%2Flibrustc_trait_selection%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Fselect.rs?ref=a5c5365031ce8ec3926e06e207e16e58c4bf3e8b", "patch": "@@ -37,12 +37,12 @@ use crate::traits::error_reporting::InferCtxtExt;\n use crate::traits::project::ProjectionCacheKeyExt;\n use rustc_ast::attr;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n+use rustc_data_structures::stack::ensure_sufficient_stack;\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n use rustc_hir::lang_items;\n use rustc_index::bit_set::GrowableBitSet;\n use rustc_middle::dep_graph::{DepKind, DepNodeIndex};\n-use rustc_middle::limits::ensure_sufficient_stack;\n use rustc_middle::ty::fast_reject;\n use rustc_middle::ty::relate::TypeRelation;\n use rustc_middle::ty::subst::{GenericArg, GenericArgKind, Subst, SubstsRef};"}, {"sha": "76ff58d61a2574deaa44dac3e7d6d3ae5081a37a", "filename": "src/librustc_traits/dropck_outlives.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a5c5365031ce8ec3926e06e207e16e58c4bf3e8b/src%2Flibrustc_traits%2Fdropck_outlives.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5c5365031ce8ec3926e06e207e16e58c4bf3e8b/src%2Flibrustc_traits%2Fdropck_outlives.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Fdropck_outlives.rs?ref=a5c5365031ce8ec3926e06e207e16e58c4bf3e8b", "patch": "@@ -191,12 +191,12 @@ fn dtorck_constraint_for_ty<'tcx>(\n \n         ty::Array(ety, _) | ty::Slice(ety) => {\n             // single-element containers, behave like their element\n-            rustc_middle::limits::ensure_sufficient_stack(|| {\n+            rustc_data_structures::stack::ensure_sufficient_stack(|| {\n                 dtorck_constraint_for_ty(tcx, span, for_ty, depth + 1, ety, constraints)\n             })?;\n         }\n \n-        ty::Tuple(tys) => rustc_middle::limits::ensure_sufficient_stack(|| {\n+        ty::Tuple(tys) => rustc_data_structures::stack::ensure_sufficient_stack(|| {\n             for ty in tys.iter() {\n                 dtorck_constraint_for_ty(\n                     tcx,\n@@ -210,7 +210,7 @@ fn dtorck_constraint_for_ty<'tcx>(\n             Ok::<_, NoSolution>(())\n         })?,\n \n-        ty::Closure(_, substs) => rustc_middle::limits::ensure_sufficient_stack(|| {\n+        ty::Closure(_, substs) => rustc_data_structures::stack::ensure_sufficient_stack(|| {\n             for ty in substs.as_closure().upvar_tys() {\n                 dtorck_constraint_for_ty(tcx, span, for_ty, depth + 1, ty, constraints)?;\n             }"}]}