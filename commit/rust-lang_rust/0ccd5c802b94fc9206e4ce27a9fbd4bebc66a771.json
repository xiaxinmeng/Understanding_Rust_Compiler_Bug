{"sha": "0ccd5c802b94fc9206e4ce27a9fbd4bebc66a771", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBjY2Q1YzgwMmI5NGZjOTIwNmU0Y2UyN2E5ZmJkNGJlYmM2NmE3NzE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-08-25T01:42:24Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-08-25T01:42:24Z"}, "message": "Auto merge of #35971 - jonathandturner:rollup, r=jonathandturner\n\nRollup of 4 pull requests\n\n- Successful merges: #35876, #35920, #35948, #35961\n- Failed merges: #35395", "tree": {"sha": "3eebcdfc98d719b6dd7f9ce242507f75803fd8a2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3eebcdfc98d719b6dd7f9ce242507f75803fd8a2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0ccd5c802b94fc9206e4ce27a9fbd4bebc66a771", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0ccd5c802b94fc9206e4ce27a9fbd4bebc66a771", "html_url": "https://github.com/rust-lang/rust/commit/0ccd5c802b94fc9206e4ce27a9fbd4bebc66a771", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0ccd5c802b94fc9206e4ce27a9fbd4bebc66a771/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e9bc1bac8c7664fb1b487879b3fbd56221f6a721", "url": "https://api.github.com/repos/rust-lang/rust/commits/e9bc1bac8c7664fb1b487879b3fbd56221f6a721", "html_url": "https://github.com/rust-lang/rust/commit/e9bc1bac8c7664fb1b487879b3fbd56221f6a721"}, {"sha": "2932db19b535a851a42e4c20ca2d901aff2b612f", "url": "https://api.github.com/repos/rust-lang/rust/commits/2932db19b535a851a42e4c20ca2d901aff2b612f", "html_url": "https://github.com/rust-lang/rust/commit/2932db19b535a851a42e4c20ca2d901aff2b612f"}], "stats": {"total": 289, "additions": 246, "deletions": 43}, "files": [{"sha": "be3559a5880896db4aba3af51170a51013d0bc81", "filename": "src/doc/reference.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0ccd5c802b94fc9206e4ce27a9fbd4bebc66a771/src%2Fdoc%2Freference.md", "raw_url": "https://github.com/rust-lang/rust/raw/0ccd5c802b94fc9206e4ce27a9fbd4bebc66a771/src%2Fdoc%2Freference.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Freference.md?ref=0ccd5c802b94fc9206e4ce27a9fbd4bebc66a771", "patch": "@@ -2283,7 +2283,7 @@ the `PartialEq` or `Clone` constraints for the appropriate `impl`:\n #[derive(PartialEq, Clone)]\n struct Foo<T> {\n     a: i32,\n-    b: T\n+    b: T,\n }\n ```\n \n@@ -3896,7 +3896,7 @@ Coercion is allowed between the following types:\n   use std::ops::Deref;\n \n   struct CharContainer {\n-      value: char\n+      value: char,\n   }\n \n   impl Deref for CharContainer {"}, {"sha": "5d431230e9744cfeaaed9aaed96e7ee0cf1db62c", "filename": "src/libcore/ops.rs", "status": "modified", "additions": 43, "deletions": 19, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/0ccd5c802b94fc9206e4ce27a9fbd4bebc66a771/src%2Flibcore%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ccd5c802b94fc9206e4ce27a9fbd4bebc66a771/src%2Flibcore%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops.rs?ref=0ccd5c802b94fc9206e4ce27a9fbd4bebc66a771", "patch": "@@ -245,25 +245,38 @@ add_impl! { usize u8 u16 u32 u64 isize i8 i16 i32 i64 f32 f64 }\n ///\n /// # Examples\n ///\n-/// A trivial implementation of `Sub`. When `Foo - Foo` happens, it ends up\n-/// calling `sub`, and therefore, `main` prints `Subtracting!`.\n+/// This example creates a `Point` struct that implements the `Sub` trait, and\n+/// then demonstrates subtracting two `Point`s.\n ///\n /// ```\n /// use std::ops::Sub;\n ///\n-/// struct Foo;\n+/// #[derive(Debug)]\n+/// struct Point {\n+///     x: i32,\n+///     y: i32,\n+/// }\n ///\n-/// impl Sub for Foo {\n-///     type Output = Foo;\n+/// impl Sub for Point {\n+///     type Output = Point;\n ///\n-///     fn sub(self, _rhs: Foo) -> Foo {\n-///         println!(\"Subtracting!\");\n-///         self\n+///     fn sub(self, other: Point) -> Point {\n+///         Point {\n+///             x: self.x - other.x,\n+///             y: self.y - other.y,\n+///         }\n+///     }\n+/// }\n+///\n+/// impl PartialEq for Point {\n+///     fn eq(&self, other: &Self) -> bool {\n+///         self.x == other.x && self.y == other.y\n ///     }\n /// }\n ///\n /// fn main() {\n-///     Foo - Foo;\n+///     assert_eq!(Point { x: 3, y: 3 } - Point { x: 2, y: 3 },\n+///                Point { x: 1, y: 0 });\n /// }\n /// ```\n #[lang = \"sub\"]\n@@ -1156,25 +1169,36 @@ add_assign_impl! { usize u8 u16 u32 u64 isize i8 i16 i32 i64 f32 f64 }\n ///\n /// # Examples\n ///\n-/// A trivial implementation of `SubAssign`. When `Foo -= Foo` happens, it ends up\n-/// calling `sub_assign`, and therefore, `main` prints `Subtracting!`.\n+/// This example creates a `Point` struct that implements the `SubAssign`\n+/// trait, and then demonstrates sub-assigning to a mutable `Point`.\n ///\n /// ```\n /// use std::ops::SubAssign;\n ///\n-/// struct Foo;\n+/// #[derive(Debug)]\n+/// struct Point {\n+///     x: i32,\n+///     y: i32,\n+/// }\n ///\n-/// impl SubAssign for Foo {\n-///     fn sub_assign(&mut self, _rhs: Foo) {\n-///         println!(\"Subtracting!\");\n+/// impl SubAssign for Point {\n+///     fn sub_assign(&mut self, other: Point) {\n+///         *self = Point {\n+///             x: self.x - other.x,\n+///             y: self.y - other.y,\n+///         };\n ///     }\n /// }\n ///\n-/// # #[allow(unused_assignments)]\n-/// fn main() {\n-///     let mut foo = Foo;\n-///     foo -= Foo;\n+/// impl PartialEq for Point {\n+///     fn eq(&self, other: &Self) -> bool {\n+///         self.x == other.x && self.y == other.y\n+///     }\n /// }\n+///\n+/// let mut point = Point { x: 3, y: 3 };\n+/// point -= Point { x: 2, y: 3 };\n+/// assert_eq!(point, Point {x: 1, y: 0});\n /// ```\n #[lang = \"sub_assign\"]\n #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]"}, {"sha": "ba68686c551171a9be5220915ccd3defb12a88c7", "filename": "src/librustc/diagnostics.rs", "status": "modified", "additions": 31, "deletions": 1, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/0ccd5c802b94fc9206e4ce27a9fbd4bebc66a771/src%2Flibrustc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ccd5c802b94fc9206e4ce27a9fbd4bebc66a771/src%2Flibrustc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdiagnostics.rs?ref=0ccd5c802b94fc9206e4ce27a9fbd4bebc66a771", "patch": "@@ -1527,6 +1527,37 @@ fn main() {\n ```\n \"##,\n \n+E0478: r##\"\n+A lifetime bound was not satisfied.\n+\n+Erroneous code example:\n+\n+```compile_fail,E0478\n+// Check that the explicit lifetime bound (`'SnowWhite`, in this example) must\n+// outlive all the superbounds from the trait (`'kiss`, in this example).\n+\n+trait Wedding<'t>: 't { }\n+\n+struct Prince<'kiss, 'SnowWhite> {\n+    child: Box<Wedding<'kiss> + 'SnowWhite>,\n+    // error: lifetime bound not satisfied\n+}\n+```\n+\n+In this example, the `'SnowWhite` lifetime is supposed to outlive the `'kiss`\n+lifetime but the declaration of the `Prince` struct doesn't enforce it. To fix\n+this issue, you need to specify it:\n+\n+```\n+trait Wedding<'t>: 't { }\n+\n+struct Prince<'kiss, 'SnowWhite: 'kiss> { // You say here that 'kiss must live\n+                                          // longer than 'SnowWhite.\n+    child: Box<Wedding<'kiss> + 'SnowWhite>, // And now it's all good!\n+}\n+```\n+\"##,\n+\n E0496: r##\"\n A lifetime name is shadowing another lifetime name. Erroneous code example:\n \n@@ -1715,7 +1746,6 @@ register_diagnostics! {\n     E0475, // index of slice outside its lifetime\n     E0476, // lifetime of the source pointer does not outlive lifetime bound...\n     E0477, // the type `..` does not fulfill the required lifetime...\n-    E0478, // lifetime bound not satisfied\n     E0479, // the type `..` (provided as the value of a type parameter) is...\n     E0480, // lifetime of method receiver does not outlive the method call\n     E0481, // lifetime of function argument does not outlive the function call"}, {"sha": "46469efea6bc830a7a2b8ab2e34b24d8126fea2a", "filename": "src/librustc_metadata/creader.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0ccd5c802b94fc9206e4ce27a9fbd4bebc66a771/src%2Flibrustc_metadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ccd5c802b94fc9206e4ce27a9fbd4bebc66a771/src%2Flibrustc_metadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcreader.rs?ref=0ccd5c802b94fc9206e4ce27a9fbd4bebc66a771", "patch": "@@ -101,8 +101,10 @@ fn register_native_lib(sess: &Session,\n     if name.is_empty() {\n         match span {\n             Some(span) => {\n-                span_err!(sess, span, E0454,\n-                          \"#[link(name = \\\"\\\")] given with empty name\");\n+                struct_span_err!(sess, span, E0454,\n+                                 \"#[link(name = \\\"\\\")] given with empty name\")\n+                    .span_label(span, &format!(\"empty name given\"))\n+                    .emit();\n             }\n             None => {\n                 sess.err(\"empty library name given via `-l`\");"}, {"sha": "eb16812af9b0225fa5714dcca15928b114e859a1", "filename": "src/librustc_mir/diagnostics.rs", "status": "modified", "additions": 12, "deletions": 13, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/0ccd5c802b94fc9206e4ce27a9fbd4bebc66a771/src%2Flibrustc_mir%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ccd5c802b94fc9206e4ce27a9fbd4bebc66a771/src%2Flibrustc_mir%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdiagnostics.rs?ref=0ccd5c802b94fc9206e4ce27a9fbd4bebc66a771", "patch": "@@ -18,7 +18,7 @@ for the entire lifetime of a program. Creating a boxed value allocates memory on\n the heap at runtime, and therefore cannot be done at compile time. Erroneous\n code example:\n \n-```compile_fail\n+```compile_fail,E0010\n #![feature(box_syntax)]\n \n const CON : Box<i32> = box 0;\n@@ -30,7 +30,7 @@ Static and const variables can refer to other const variables. But a const\n variable cannot refer to a static variable. For example, `Y` cannot refer to\n `X` here:\n \n-```compile_fail\n+```compile_fail,E0013\n static X: i32 = 42;\n const Y: i32 = X;\n ```\n@@ -66,7 +66,7 @@ E0016: r##\"\n Blocks in constants may only contain items (such as constant, function\n definition, etc...) and a tail expression. Erroneous code example:\n \n-```compile_fail\n+```compile_fail,E0016\n const FOO: i32 = { let x = 0; x }; // 'x' isn't an item!\n ```\n \n@@ -81,7 +81,7 @@ E0017: r##\"\n References in statics and constants may only refer to immutable values.\n Erroneous code example:\n \n-```compile_fail\n+```compile_fail,E0017\n static X: i32 = 1;\n const C: i32 = 2;\n \n@@ -107,7 +107,7 @@ vary.\n \n For example, if you write:\n \n-```compile_fail\n+```compile_fail,E0018\n static MY_STATIC: u32 = 42;\n static MY_STATIC_ADDR: usize = &MY_STATIC as *const _ as usize;\n static WHAT: usize = (MY_STATIC_ADDR^17) + MY_STATIC_ADDR;\n@@ -152,7 +152,7 @@ impl Test {\n fn main() {\n     const FOO: Test = Test::V1;\n \n-    const A: i32 = FOO.test(); // You can't call Test::func() here !\n+    const A: i32 = FOO.test(); // You can't call Test::func() here!\n }\n ```\n \n@@ -214,14 +214,13 @@ static B: &'static u32 = &A; // ok!\n ```\n \"##,\n \n-\n E0395: r##\"\n The value assigned to a constant scalar must be known at compile time,\n which is not the case when comparing raw pointers.\n \n Erroneous code example:\n \n-```compile_fail\n+```compile_fail,E0395\n static FOO: i32 = 42;\n static BAR: i32 = 42;\n \n@@ -250,7 +249,7 @@ The value behind a raw pointer can't be determined at compile-time\n (or even link-time), which means it can't be used in a constant\n expression. Erroneous code example:\n \n-```compile_fail\n+```compile_fail,E0396\n const REG_ADDR: *const u8 = 0x5f3759df as *const u8;\n \n const VALUE: u8 = unsafe { *REG_ADDR };\n@@ -272,7 +271,7 @@ E0492: r##\"\n A borrow of a constant containing interior mutability was attempted. Erroneous\n code example:\n \n-```compile_fail\n+```compile_fail,E0492\n use std::sync::atomic::{AtomicUsize, ATOMIC_USIZE_INIT};\n \n const A: AtomicUsize = ATOMIC_USIZE_INIT;\n@@ -299,7 +298,7 @@ static B: &'static AtomicUsize = &A; // ok!\n \n You can also have this error while using a cell type:\n \n-```compile_fail\n+```compile_fail,E0492\n #![feature(const_fn)]\n \n use std::cell::Cell;\n@@ -351,7 +350,7 @@ E0493: r##\"\n A type with a destructor was assigned to an invalid type of variable. Erroneous\n code example:\n \n-```compile_fail\n+```compile_fail,E0493\n struct Foo {\n     a: u32\n }\n@@ -374,7 +373,7 @@ E0494: r##\"\n A reference of an interior static was assigned to another const/static.\n Erroneous code example:\n \n-```compile_fail\n+```compile_fail,E0494\n struct Foo {\n     a: u32\n }"}, {"sha": "028632ad7c006b90632cb90f681d47480019d4b6", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0ccd5c802b94fc9206e4ce27a9fbd4bebc66a771/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ccd5c802b94fc9206e4ce27a9fbd4bebc66a771/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=0ccd5c802b94fc9206e4ce27a9fbd4bebc66a771", "patch": "@@ -964,8 +964,11 @@ impl<'a, 'tcx: 'a, 'v> Visitor<'v> for SearchInterfaceForPrivateItemsVisitor<'a,\n             if !vis.is_at_least(self.required_visibility, &self.tcx.map) {\n                 if self.tcx.sess.features.borrow().pub_restricted ||\n                    self.old_error_set.contains(&trait_ref.ref_id) {\n-                    span_err!(self.tcx.sess, trait_ref.path.span, E0445,\n-                              \"private trait in public interface\");\n+                    struct_span_err!(self.tcx.sess, trait_ref.path.span, E0445,\n+                                     \"private trait in public interface\")\n+                        .span_label(trait_ref.path.span, &format!(\n+                                    \"private trait can't be public\"))\n+                        .emit();\n                 } else {\n                     self.tcx.sess.add_lint(lint::builtin::PRIVATE_IN_PUBLIC,\n                                            node_id,"}, {"sha": "7c5c862a6f812ab724520c75f9260fde6aaa5061", "filename": "src/test/compile-fail/E0445.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0ccd5c802b94fc9206e4ce27a9fbd4bebc66a771/src%2Ftest%2Fcompile-fail%2FE0445.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ccd5c802b94fc9206e4ce27a9fbd4bebc66a771/src%2Ftest%2Fcompile-fail%2FE0445.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0445.rs?ref=0ccd5c802b94fc9206e4ce27a9fbd4bebc66a771", "patch": "@@ -12,8 +12,14 @@ trait Foo {\n     fn dummy(&self) { }\n }\n \n-pub trait Bar : Foo {} //~ ERROR E0445\n-pub struct Bar2<T: Foo>(pub T); //~ ERROR E0445\n-pub fn foo<T: Foo> (t: T) {} //~ ERROR E0445\n+pub trait Bar : Foo {}\n+//~^ ERROR private trait in public interface [E0445]\n+//~| NOTE private trait can't be public\n+pub struct Bar2<T: Foo>(pub T);\n+//~^ ERROR private trait in public interface [E0445]\n+//~| NOTE private trait can't be public\n+pub fn foo<T: Foo> (t: T) {}\n+//~^ ERROR private trait in public interface [E0445]\n+//~| NOTE private trait can't be public\n \n fn main() {}"}, {"sha": "39887927c885fe79ea604300065112683b57ad6f", "filename": "src/test/compile-fail/E0454.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0ccd5c802b94fc9206e4ce27a9fbd4bebc66a771/src%2Ftest%2Fcompile-fail%2FE0454.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ccd5c802b94fc9206e4ce27a9fbd4bebc66a771/src%2Ftest%2Fcompile-fail%2FE0454.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0454.rs?ref=0ccd5c802b94fc9206e4ce27a9fbd4bebc66a771", "patch": "@@ -8,7 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[link(name = \"\")] extern {} //~ ERROR E0454\n+#[link(name = \"\")] extern {}\n+//~^ ERROR E0454\n+//~| NOTE empty name given\n \n fn main() {\n }"}, {"sha": "8eb4003fc9734fcd0010c4157508e727be4500ef", "filename": "src/test/compile-fail/E0478.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/0ccd5c802b94fc9206e4ce27a9fbd4bebc66a771/src%2Ftest%2Fcompile-fail%2FE0478.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ccd5c802b94fc9206e4ce27a9fbd4bebc66a771/src%2Ftest%2Fcompile-fail%2FE0478.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0478.rs?ref=0ccd5c802b94fc9206e4ce27a9fbd4bebc66a771", "patch": "@@ -0,0 +1,18 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+trait Wedding<'t>: 't { }\n+\n+struct Prince<'kiss, 'SnowWhite> {\n+    child: Box<Wedding<'kiss> + 'SnowWhite>, //~ ERROR E0478\n+}\n+\n+fn main() {\n+}"}, {"sha": "8e4964c97c593036fcc67ddb8576ff4595b51a73", "filename": "src/test/compile-fail/E0492.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/0ccd5c802b94fc9206e4ce27a9fbd4bebc66a771/src%2Ftest%2Fcompile-fail%2FE0492.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ccd5c802b94fc9206e4ce27a9fbd4bebc66a771/src%2Ftest%2Fcompile-fail%2FE0492.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0492.rs?ref=0ccd5c802b94fc9206e4ce27a9fbd4bebc66a771", "patch": "@@ -0,0 +1,17 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use std::sync::atomic::{AtomicUsize, ATOMIC_USIZE_INIT};\n+\n+const A: AtomicUsize = ATOMIC_USIZE_INIT;\n+static B: &'static AtomicUsize = &A; //~ ERROR E0492\n+\n+fn main() {\n+}"}, {"sha": "689f469533d969fc115efa7e025d388f5710f1dc", "filename": "src/test/compile-fail/E0493.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/0ccd5c802b94fc9206e4ce27a9fbd4bebc66a771/src%2Ftest%2Fcompile-fail%2FE0493.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ccd5c802b94fc9206e4ce27a9fbd4bebc66a771/src%2Ftest%2Fcompile-fail%2FE0493.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0493.rs?ref=0ccd5c802b94fc9206e4ce27a9fbd4bebc66a771", "patch": "@@ -0,0 +1,22 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+struct Foo {\n+    a: u32\n+}\n+\n+impl Drop for Foo {\n+    fn drop(&mut self) {}\n+}\n+\n+const F : Foo = Foo { a : 0 }; //~ ERROR E0493\n+\n+fn main() {\n+}"}, {"sha": "5f8632ac1c23d29b5e918382384938a60b1b5fa4", "filename": "src/test/compile-fail/E0494.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/0ccd5c802b94fc9206e4ce27a9fbd4bebc66a771/src%2Ftest%2Fcompile-fail%2FE0494.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ccd5c802b94fc9206e4ce27a9fbd4bebc66a771/src%2Ftest%2Fcompile-fail%2FE0494.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0494.rs?ref=0ccd5c802b94fc9206e4ce27a9fbd4bebc66a771", "patch": "@@ -0,0 +1,19 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+struct Foo {\n+    a: u32\n+}\n+\n+static S : Foo = Foo { a : 0 };\n+static A : &'static u32 = &S.a; //~ ERROR E0494\n+\n+fn main() {\n+}"}, {"sha": "4ca3cd9c13da60a26586e54da1fe11ada301b509", "filename": "src/test/compile-fail/E0496.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/0ccd5c802b94fc9206e4ce27a9fbd4bebc66a771/src%2Ftest%2Fcompile-fail%2FE0496.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ccd5c802b94fc9206e4ce27a9fbd4bebc66a771/src%2Ftest%2Fcompile-fail%2FE0496.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0496.rs?ref=0ccd5c802b94fc9206e4ce27a9fbd4bebc66a771", "patch": "@@ -0,0 +1,21 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+struct Foo<'a> {\n+    a: &'a i32,\n+}\n+\n+impl<'a> Foo<'a> {\n+    fn f<'a>(x: &'a i32) { //~ ERROR E0496\n+    }\n+}\n+\n+fn main() {\n+}"}, {"sha": "9a64bfe2ea9e7e36617ff2cb54e37165990fb3e0", "filename": "src/test/compile-fail/E0499.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/0ccd5c802b94fc9206e4ce27a9fbd4bebc66a771/src%2Ftest%2Fcompile-fail%2FE0499.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ccd5c802b94fc9206e4ce27a9fbd4bebc66a771/src%2Ftest%2Fcompile-fail%2FE0499.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0499.rs?ref=0ccd5c802b94fc9206e4ce27a9fbd4bebc66a771", "patch": "@@ -0,0 +1,15 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {\n+    let mut i = 0;\n+    let mut x = &mut i;\n+    let mut a = &mut i; //~ ERROR E0499\n+}"}, {"sha": "04678b96c8d088b10f2c09bb5b4f141f981d6359", "filename": "src/test/compile-fail/E0501.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/0ccd5c802b94fc9206e4ce27a9fbd4bebc66a771/src%2Ftest%2Fcompile-fail%2FE0501.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ccd5c802b94fc9206e4ce27a9fbd4bebc66a771/src%2Ftest%2Fcompile-fail%2FE0501.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0501.rs?ref=0ccd5c802b94fc9206e4ce27a9fbd4bebc66a771", "patch": "@@ -0,0 +1,25 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn inside_closure(x: &mut i32) {\n+}\n+\n+fn outside_closure(x: &mut i32) {\n+}\n+\n+fn foo(a: &mut i32) {\n+    let bar = || {\n+        inside_closure(a)\n+    };\n+    outside_closure(a); //~ ERROR E0501\n+}\n+\n+fn main() {\n+}"}]}