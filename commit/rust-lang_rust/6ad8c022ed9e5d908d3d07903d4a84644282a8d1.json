{"sha": "6ad8c022ed9e5d908d3d07903d4a84644282a8d1", "node_id": "C_kwDOAAsO6NoAKDZhZDhjMDIyZWQ5ZTVkOTA4ZDNkMDc5MDNkNGE4NDY0NDI4MmE4ZDE", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2022-03-18T11:13:37Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-03-18T11:13:37Z"}, "message": "Merge #11750\n\n11750: fix: Fix runnables trying to add doc tests in the crate root from #[macro_export] macros r=Veykril a=Veykril\n\nFixes https://github.com/rust-analyzer/rust-analyzer/issues/11746\r\nbors r+\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>", "tree": {"sha": "7e71248d20dac97cc7e1c2707df2f1bc129bced3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7e71248d20dac97cc7e1c2707df2f1bc129bced3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6ad8c022ed9e5d908d3d07903d4a84644282a8d1", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiNGlhCRBK7hj4Ov3rIwAATH4IAEhRG1M49KoweiOKENFvW3GO\nD61w27yq90cyELCdwR6QU3Vp2AwstlQjiPDAxUQG/+BlV6r6NmqTbhde9jUbv5TT\numumjwDj/pzPzbRujZJizaOaYga7X11o7B0rOb4VR6CddBui7vM4Wz1xhaVhUYfS\nVwMA9iUT54gJE1BT8thk03DEGEveLmOl/UpYPw6P5rt5GB+Q2GwwWRWQKQpO8H7T\nQA88V8H9O5uDTcT/HSYuMjvCZJFG7uPlxBAQj5JjyJI2Xvuu47AtAYcoCW5DlXJt\nZ/LvpK6Et4dxSOdZZT8CP/791UA+QtgqlszOPU5TkHfQh3Gmg7ZZy+ObEz7OZS0=\n=O5tx\n-----END PGP SIGNATURE-----\n", "payload": "tree 7e71248d20dac97cc7e1c2707df2f1bc129bced3\nparent 38d2a9763b4892b28091f9d11df9b0a7a8d7e333\nparent 828196be3bd92ba33e62270d24dae79bd2eb5125\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1647602017 +0000\ncommitter GitHub <noreply@github.com> 1647602017 +0000\n\nMerge #11750\n\n11750: fix: Fix runnables trying to add doc tests in the crate root from #[macro_export] macros r=Veykril a=Veykril\n\nFixes https://github.com/rust-analyzer/rust-analyzer/issues/11746\r\nbors r+\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6ad8c022ed9e5d908d3d07903d4a84644282a8d1", "html_url": "https://github.com/rust-lang/rust/commit/6ad8c022ed9e5d908d3d07903d4a84644282a8d1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6ad8c022ed9e5d908d3d07903d4a84644282a8d1/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "38d2a9763b4892b28091f9d11df9b0a7a8d7e333", "url": "https://api.github.com/repos/rust-lang/rust/commits/38d2a9763b4892b28091f9d11df9b0a7a8d7e333", "html_url": "https://github.com/rust-lang/rust/commit/38d2a9763b4892b28091f9d11df9b0a7a8d7e333"}, {"sha": "828196be3bd92ba33e62270d24dae79bd2eb5125", "url": "https://api.github.com/repos/rust-lang/rust/commits/828196be3bd92ba33e62270d24dae79bd2eb5125", "html_url": "https://github.com/rust-lang/rust/commit/828196be3bd92ba33e62270d24dae79bd2eb5125"}], "stats": {"total": 101, "additions": 98, "deletions": 3}, "files": [{"sha": "56832d6f8b3725478ad70830feb5317b594cacba", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6ad8c022ed9e5d908d3d07903d4a84644282a8d1/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ad8c022ed9e5d908d3d07903d4a84644282a8d1/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=6ad8c022ed9e5d908d3d07903d4a84644282a8d1", "patch": "@@ -570,6 +570,12 @@ impl Module {\n             .collect()\n     }\n \n+    pub fn legacy_macros(self, db: &dyn HirDatabase) -> Vec<Macro> {\n+        let def_map = self.id.def_map(db.upcast());\n+        let scope = &def_map[self.id.local_id].scope;\n+        scope.legacy_macros().map(|(_, it)| MacroId::from(it).into()).collect()\n+    }\n+\n     pub fn impl_defs(self, db: &dyn HirDatabase) -> Vec<Impl> {\n         let def_map = self.id.def_map(db.upcast());\n         def_map[self.id.local_id].scope.impls().map(Impl::from).collect()\n@@ -1785,6 +1791,10 @@ impl Macro {\n         }\n     }\n \n+    pub fn is_macro_export(self, db: &dyn HirDatabase) -> bool {\n+        matches!(self.id, MacroId::MacroRulesId(id) if db.macro_rules_data(id).macro_export)\n+    }\n+\n     pub fn kind(&self, db: &dyn HirDatabase) -> MacroKind {\n         match self.id {\n             MacroId::Macro2Id(it) => match it.lookup(db.upcast()).expander {"}, {"sha": "ffb733c2b9722064b9356742d3504b6d5c1937a2", "filename": "crates/hir_def/src/data.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6ad8c022ed9e5d908d3d07903d4a84644282a8d1/crates%2Fhir_def%2Fsrc%2Fdata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ad8c022ed9e5d908d3d07903d4a84644282a8d1/crates%2Fhir_def%2Fsrc%2Fdata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fdata.rs?ref=6ad8c022ed9e5d908d3d07903d4a84644282a8d1", "patch": "@@ -315,6 +315,7 @@ impl Macro2Data {\n #[derive(Debug, Clone, PartialEq, Eq)]\n pub struct MacroRulesData {\n     pub name: Name,\n+    pub macro_export: bool,\n }\n \n impl MacroRulesData {\n@@ -326,7 +327,12 @@ impl MacroRulesData {\n         let item_tree = loc.id.item_tree(db);\n         let makro = &item_tree[loc.id.value];\n \n-        Arc::new(MacroRulesData { name: makro.name.clone() })\n+        let macro_export = item_tree\n+            .attrs(db, loc.container.krate(), ModItem::from(loc.id.value).into())\n+            .by_key(\"macro_export\")\n+            .exists();\n+\n+        Arc::new(MacroRulesData { name: makro.name.clone(), macro_export })\n     }\n }\n #[derive(Debug, Clone, PartialEq, Eq)]"}, {"sha": "f1330b34d1fe6f7af286e89a1154135e2b34fe4c", "filename": "crates/hir_def/src/item_scope.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6ad8c022ed9e5d908d3d07903d4a84644282a8d1/crates%2Fhir_def%2Fsrc%2Fitem_scope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ad8c022ed9e5d908d3d07903d4a84644282a8d1/crates%2Fhir_def%2Fsrc%2Fitem_scope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fitem_scope.rs?ref=6ad8c022ed9e5d908d3d07903d4a84644282a8d1", "patch": "@@ -63,6 +63,7 @@ pub struct ItemScope {\n     // FIXME: Macro shadowing in one module is not properly handled. Non-item place macros will\n     // be all resolved to the last one defined if shadowing happens.\n     legacy_macros: FxHashMap<Name, MacroRulesId>,\n+    /// The derive macro invocations in this scope.\n     attr_macros: FxHashMap<AstId<ast::Item>, MacroCallId>,\n     /// The derive macro invocations in this scope, keyed by the owner item over the actual derive attributes\n     /// paired with the derive macro invocations for the specific attribute."}, {"sha": "2c8e898d72307e120f786328e0bbeb35e4477c60", "filename": "crates/ide/src/runnables.rs", "status": "modified", "additions": 71, "deletions": 1, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/6ad8c022ed9e5d908d3d07903d4a84644282a8d1/crates%2Fide%2Fsrc%2Frunnables.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ad8c022ed9e5d908d3d07903d4a84644282a8d1/crates%2Fide%2Fsrc%2Frunnables.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Frunnables.rs?ref=6ad8c022ed9e5d908d3d07903d4a84644282a8d1", "patch": "@@ -157,7 +157,13 @@ pub(crate) fn runnables(db: &RootDatabase, file_id: FileId) -> Vec<Runnable> {\n             Definition::SelfType(impl_) => runnable_impl(&sema, &impl_),\n             _ => None,\n         };\n-        add_opt(runnable.or_else(|| module_def_doctest(sema.db, def)), Some(def));\n+        add_opt(\n+            runnable\n+                .or_else(|| module_def_doctest(sema.db, def))\n+                // #[macro_export] mbe macros are declared in the root, while their definition may reside in a different module\n+                .filter(|it| it.nav.file_id == file_id),\n+            Some(def),\n+        );\n         if let Definition::SelfType(impl_) = def {\n             impl_.items(db).into_iter().for_each(|assoc| {\n                 let runnable = match assoc {\n@@ -2074,4 +2080,68 @@ impl<T, U> Foo<T, U> {\n             \"#]],\n         );\n     }\n+\n+    #[test]\n+    fn doc_test_macro_export_mbe() {\n+        check(\n+            r#\"\n+//- /lib.rs\n+$0\n+mod foo;\n+\n+//- /foo.rs\n+/// ```\n+/// fn foo() {\n+/// }\n+/// ```\n+#[macro_export]\n+macro_rules! foo {\n+    () => {\n+\n+    };\n+}\n+\"#,\n+            &[],\n+            expect![[r#\"\n+                []\n+            \"#]],\n+        );\n+        check(\n+            r#\"\n+//- /lib.rs\n+$0\n+/// ```\n+/// fn foo() {\n+/// }\n+/// ```\n+#[macro_export]\n+macro_rules! foo {\n+    () => {\n+\n+    };\n+}\n+\"#,\n+            &[DocTest],\n+            expect![[r#\"\n+                [\n+                    Runnable {\n+                        use_name_in_title: false,\n+                        nav: NavigationTarget {\n+                            file_id: FileId(\n+                                0,\n+                            ),\n+                            full_range: 1..94,\n+                            name: \"foo\",\n+                        },\n+                        kind: DocTest {\n+                            test_id: Path(\n+                                \"foo\",\n+                            ),\n+                        },\n+                        cfg: None,\n+                    },\n+                ]\n+            \"#]],\n+        );\n+    }\n }"}, {"sha": "36457a5364f5fa421d26218fbd567748acee5b4c", "filename": "crates/ide_db/src/defs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6ad8c022ed9e5d908d3d07903d4a84644282a8d1/crates%2Fide_db%2Fsrc%2Fdefs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ad8c022ed9e5d908d3d07903d4a84644282a8d1/crates%2Fide_db%2Fsrc%2Fdefs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fdefs.rs?ref=6ad8c022ed9e5d908d3d07903d4a84644282a8d1", "patch": "@@ -447,7 +447,7 @@ impl NameRefClass {\n \n impl_from!(\n     Field, Module, Function, Adt, Variant, Const, Static, Trait, TypeAlias, BuiltinType, Local,\n-    GenericParam, Label\n+    GenericParam, Label, Macro\n     for Definition\n );\n "}, {"sha": "d4fda397d6827a32993af177815e3bc2aa2fd505", "filename": "crates/ide_db/src/helpers.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6ad8c022ed9e5d908d3d07903d4a84644282a8d1/crates%2Fide_db%2Fsrc%2Fhelpers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ad8c022ed9e5d908d3d07903d4a84644282a8d1/crates%2Fide_db%2Fsrc%2Fhelpers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fhelpers.rs?ref=6ad8c022ed9e5d908d3d07903d4a84644282a8d1", "patch": "@@ -76,6 +76,14 @@ pub fn visit_file_defs(\n         cb(def.into());\n     }\n     module.impl_defs(db).into_iter().for_each(|impl_| cb(impl_.into()));\n+\n+    let is_root = module.is_crate_root(db);\n+    module\n+        .legacy_macros(db)\n+        .into_iter()\n+        // don't show legacy macros declared in the crate-root that were already covered in declarations earlier\n+        .filter(|it| !(is_root && it.is_macro_export(db)))\n+        .for_each(|mac| cb(mac.into()));\n }\n \n /// Checks if the given lint is equal or is contained by the other lint which may or may not be a group."}]}