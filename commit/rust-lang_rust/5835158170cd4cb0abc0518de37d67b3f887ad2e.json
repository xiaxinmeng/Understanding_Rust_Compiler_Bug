{"sha": "5835158170cd4cb0abc0518de37d67b3f887ad2e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU4MzUxNTgxNzBjZDRjYjBhYmMwNTE4ZGUzN2Q2N2IzZjg4N2FkMmU=", "commit": {"author": {"name": "Michael Sullivan", "email": "sully@msully.net", "date": "2013-06-11T21:47:57Z"}, "committer": {"name": "Michael Sullivan", "email": "sully@msully.net", "date": "2013-06-12T20:50:45Z"}, "message": "Drop some dead method handling code.", "tree": {"sha": "901f9e289d578d9d09f7b21e2c3fcad8e89e0b2e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/901f9e289d578d9d09f7b21e2c3fcad8e89e0b2e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5835158170cd4cb0abc0518de37d67b3f887ad2e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5835158170cd4cb0abc0518de37d67b3f887ad2e", "html_url": "https://github.com/rust-lang/rust/commit/5835158170cd4cb0abc0518de37d67b3f887ad2e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5835158170cd4cb0abc0518de37d67b3f887ad2e/comments", "author": {"login": "msullivan", "id": 340349, "node_id": "MDQ6VXNlcjM0MDM0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/340349?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msullivan", "html_url": "https://github.com/msullivan", "followers_url": "https://api.github.com/users/msullivan/followers", "following_url": "https://api.github.com/users/msullivan/following{/other_user}", "gists_url": "https://api.github.com/users/msullivan/gists{/gist_id}", "starred_url": "https://api.github.com/users/msullivan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msullivan/subscriptions", "organizations_url": "https://api.github.com/users/msullivan/orgs", "repos_url": "https://api.github.com/users/msullivan/repos", "events_url": "https://api.github.com/users/msullivan/events{/privacy}", "received_events_url": "https://api.github.com/users/msullivan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "msullivan", "id": 340349, "node_id": "MDQ6VXNlcjM0MDM0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/340349?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msullivan", "html_url": "https://github.com/msullivan", "followers_url": "https://api.github.com/users/msullivan/followers", "following_url": "https://api.github.com/users/msullivan/following{/other_user}", "gists_url": "https://api.github.com/users/msullivan/gists{/gist_id}", "starred_url": "https://api.github.com/users/msullivan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msullivan/subscriptions", "organizations_url": "https://api.github.com/users/msullivan/orgs", "repos_url": "https://api.github.com/users/msullivan/repos", "events_url": "https://api.github.com/users/msullivan/events{/privacy}", "received_events_url": "https://api.github.com/users/msullivan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a159f856d54c507052d24a026ccc8a568aa454f3", "url": "https://api.github.com/repos/rust-lang/rust/commits/a159f856d54c507052d24a026ccc8a568aa454f3", "html_url": "https://github.com/rust-lang/rust/commit/a159f856d54c507052d24a026ccc8a568aa454f3"}], "stats": {"total": 51, "additions": 2, "deletions": 49}, "files": [{"sha": "b2c9d27241d438e9d039caab2c64a7e22fcde98a", "filename": "src/librustc/middle/typeck/check/method.rs", "status": "modified", "additions": 2, "deletions": 49, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/5835158170cd4cb0abc0518de37d67b3f887ad2e/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5835158170cd4cb0abc0518de37d67b3f887ad2e/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs?ref=5835158170cd4cb0abc0518de37d67b3f887ad2e", "patch": "@@ -192,7 +192,7 @@ impl<'self> LookupContext<'self> {\n \n         // Prepare the list of candidates\n         self.push_inherent_candidates(self_ty);\n-        self.push_extension_candidates(self_ty);\n+        self.push_extension_candidates();\n \n         let mut enum_dids = ~[];\n         let mut self_ty = self_ty;\n@@ -326,7 +326,7 @@ impl<'self> LookupContext<'self> {\n         }\n     }\n \n-    pub fn push_extension_candidates(&self, self_ty: ty::t) {\n+    pub fn push_extension_candidates(&self) {\n         // If the method being called is associated with a trait, then\n         // find all the impls of that trait.  Each of those are\n         // candidates.\n@@ -343,17 +343,8 @@ impl<'self> LookupContext<'self> {\n                     for impl_infos.each |impl_info| {\n                         self.push_candidates_from_impl(\n                             self.extension_candidates, *impl_info);\n-                    }\n-                }\n \n-                // Look for default methods.\n-                match self.tcx().provided_methods.find(trait_did) {\n-                    Some(&methods) => {\n-                        self.push_candidates_from_provided_methods(\n-                            self.extension_candidates, self_ty, *trait_did,\n-                            methods);\n                     }\n-                    None => {}\n                 }\n             }\n         }\n@@ -580,44 +571,6 @@ impl<'self> LookupContext<'self> {\n         });\n     }\n \n-    pub fn push_candidates_from_provided_methods(&self,\n-                                                 candidates:\n-                                                 &mut ~[Candidate],\n-                                                 self_ty: ty::t,\n-                                                 trait_def_id: def_id,\n-                                                 methods:\n-                                                 &mut ~[@ProvidedMethodInfo])\n-                                                 {\n-        debug!(\"(pushing candidates from provided methods) considering trait \\\n-                id %d:%d\",\n-               trait_def_id.crate,\n-               trait_def_id.node);\n-\n-        for methods.each |provided_method_info| {\n-            if provided_method_info.method_info.ident != self.m_name { loop; }\n-\n-            debug!(\"(pushing candidates from provided methods) adding \\\n-                    candidate\");\n-\n-            let method = ty::method(self.tcx(),\n-                                    provided_method_info.method_info.did);\n-\n-            // FIXME #4099 (?) Needs to support generics.\n-            let dummy_substs = substs {\n-                self_r: None,\n-                self_ty: None,\n-                tps: ~[]\n-            };\n-\n-            candidates.push(Candidate {\n-                rcvr_ty: self_ty,\n-                rcvr_substs: dummy_substs,\n-                method_ty: method,\n-                origin: method_static(provided_method_info.method_info.did)\n-            });\n-        }\n-    }\n-\n     // ______________________________________________________________________\n     // Candidate selection (see comment at start of file)\n "}]}