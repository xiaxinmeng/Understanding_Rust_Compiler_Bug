{"sha": "be0d10f149579d3ed53507ff8c2f6511b56456f7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJlMGQxMGYxNDk1NzlkM2VkNTM1MDdmZjhjMmY2NTExYjU2NDU2Zjc=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2020-05-22T11:05:09Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2020-06-22T18:51:07Z"}, "message": "add new tests from MCP and the tracking issue", "tree": {"sha": "262fb36ecfdfd39117103e05adc1e5ef2c5c4d77", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/262fb36ecfdfd39117103e05adc1e5ef2c5c4d77"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/be0d10f149579d3ed53507ff8c2f6511b56456f7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/be0d10f149579d3ed53507ff8c2f6511b56456f7", "html_url": "https://github.com/rust-lang/rust/commit/be0d10f149579d3ed53507ff8c2f6511b56456f7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/be0d10f149579d3ed53507ff8c2f6511b56456f7/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3a68d56de307cae00dd0a9f6908e52889006a1ff", "url": "https://api.github.com/repos/rust-lang/rust/commits/3a68d56de307cae00dd0a9f6908e52889006a1ff", "html_url": "https://github.com/rust-lang/rust/commit/3a68d56de307cae00dd0a9f6908e52889006a1ff"}], "stats": {"total": 197, "additions": 197, "deletions": 0}, "files": [{"sha": "ba89a072f344116e3a3a8433544a2bd0a54e8a79", "filename": "src/test/ui/coherence/coherence-fn-implied-bounds.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/be0d10f149579d3ed53507ff8c2f6511b56456f7/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-fn-implied-bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be0d10f149579d3ed53507ff8c2f6511b56456f7/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-fn-implied-bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-fn-implied-bounds.rs?ref=be0d10f149579d3ed53507ff8c2f6511b56456f7", "patch": "@@ -0,0 +1,14 @@\n+// Example of coherence impls that we accept\n+\n+#![deny(coherence_leak_check)]\n+\n+trait Trait {}\n+\n+impl Trait for for<'a, 'b> fn(&'a &'b u32, &'b &'a u32) -> &'b u32 {}\n+\n+impl Trait for for<'c> fn(&'c &'c u32, &'c &'c u32) -> &'c u32 {\n+    //~^ ERROR conflicting implementations\n+    //~| WARNING this was previously accepted by the compiler\n+}\n+\n+fn main() {}"}, {"sha": "d7853a0b1ebc382c5606f8227d9f5d95c9eeb4ae", "filename": "src/test/ui/coherence/coherence-fn-implied-bounds.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/be0d10f149579d3ed53507ff8c2f6511b56456f7/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-fn-implied-bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/be0d10f149579d3ed53507ff8c2f6511b56456f7/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-fn-implied-bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-fn-implied-bounds.stderr?ref=be0d10f149579d3ed53507ff8c2f6511b56456f7", "patch": "@@ -0,0 +1,20 @@\n+error: conflicting implementations of trait `Trait` for type `for<'a, 'b> fn(&'a &'b u32, &'b &'a u32) -> &'b u32`:\n+  --> $DIR/coherence-fn-implied-bounds.rs:9:1\n+   |\n+LL | impl Trait for for<'a, 'b> fn(&'a &'b u32, &'b &'a u32) -> &'b u32 {}\n+   | ------------------------------------------------------------------ first implementation here\n+LL | \n+LL | impl Trait for for<'c> fn(&'c &'c u32, &'c &'c u32) -> &'c u32 {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `for<'a, 'b> fn(&'a &'b u32, &'b &'a u32) -> &'b u32`\n+   |\n+note: the lint level is defined here\n+  --> $DIR/coherence-fn-implied-bounds.rs:3:9\n+   |\n+LL | #![deny(coherence_leak_check)]\n+   |         ^^^^^^^^^^^^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #56105 <https://github.com/rust-lang/rust/issues/56105>\n+   = note: this behavior recently changed as a result of a bug fix; see rust-lang/rust#56105 for details\n+\n+error: aborting due to previous error\n+"}, {"sha": "8c10899304127259c1acce1160d48629d9381b6e", "filename": "src/test/ui/coherence/coherence-fn-inputs.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/be0d10f149579d3ed53507ff8c2f6511b56456f7/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-fn-inputs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be0d10f149579d3ed53507ff8c2f6511b56456f7/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-fn-inputs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-fn-inputs.rs?ref=be0d10f149579d3ed53507ff8c2f6511b56456f7", "patch": "@@ -0,0 +1,27 @@\n+// Test that we consider these two types completely equal:\n+//\n+// * `for<'a, 'b> fn(&'a u32, &'b u32)`\n+// * `for<'c> fn(&'c u32, &'c u32)`\n+//\n+// For a long time we considered these to be distinct types. But in fact they\n+// are equivalent, if you work through the implications of subtyping -- this is\n+// because:\n+//\n+// * `'c` can be the intersection of `'a` and `'b` (and there is always an intersection)\n+// * `'a` and `'b` can both be equal to `'c`\n+\n+#![deny(coherence_leak_check)]\n+\n+trait Trait {}\n+impl Trait for for<'a, 'b> fn(&'a u32, &'b u32) {}\n+impl Trait for for<'c> fn(&'c u32, &'c u32) {\n+    //~^ ERROR conflicting implementations\n+    //\n+    // Note in particular that we do NOT get a future-compatibility warning\n+    // here. This is because the new leak-check proposed in [MCP 295] does not\n+    // \"error\" when these two types are equated.\n+    //\n+    // [MCP 295]: https://github.com/rust-lang/compiler-team/issues/295\n+}\n+\n+fn main() {}"}, {"sha": "a80357526e09dd32340e871b34576a94e27c95b9", "filename": "src/test/ui/coherence/coherence-fn-inputs.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/be0d10f149579d3ed53507ff8c2f6511b56456f7/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-fn-inputs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/be0d10f149579d3ed53507ff8c2f6511b56456f7/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-fn-inputs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-fn-inputs.stderr?ref=be0d10f149579d3ed53507ff8c2f6511b56456f7", "patch": "@@ -0,0 +1,13 @@\n+error[E0119]: conflicting implementations of trait `Trait` for type `for<'a, 'b> fn(&'a u32, &'b u32)`:\n+  --> $DIR/coherence-fn-inputs.rs:17:1\n+   |\n+LL | impl Trait for for<'a, 'b> fn(&'a u32, &'b u32) {}\n+   | ----------------------------------------------- first implementation here\n+LL | impl Trait for for<'c> fn(&'c u32, &'c u32) {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `for<'a, 'b> fn(&'a u32, &'b u32)`\n+   |\n+   = note: this behavior recently changed as a result of a bug fix; see rust-lang/rust#56105 for details\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0119`."}, {"sha": "2f5c49d293d5d579ac1c3a6c71699ce5ff24ce5b", "filename": "src/test/ui/coherence/coherence-free-vs-bound-region.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/be0d10f149579d3ed53507ff8c2f6511b56456f7/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-free-vs-bound-region.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be0d10f149579d3ed53507ff8c2f6511b56456f7/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-free-vs-bound-region.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-free-vs-bound-region.rs?ref=be0d10f149579d3ed53507ff8c2f6511b56456f7", "patch": "@@ -0,0 +1,21 @@\n+// Capture a coherence pattern from wasm-bindgen that we discovered as part of\n+// future-compatibility warning #56105. This pattern currently receives a lint\n+// warning but we probably want to support it long term.\n+//\n+// Key distinction: we are implementing once for `A` (take ownership) and one\n+// for `&A` (borrow).\n+//\n+// c.f. #56105\n+\n+#![deny(coherence_leak_check)]\n+\n+trait TheTrait {}\n+\n+impl<'a> TheTrait for fn(&'a u8) {}\n+\n+impl TheTrait for fn(&u8) {\n+    //~^ ERROR conflicting implementations of trait\n+    //~| WARNING this was previously accepted by the compiler\n+}\n+\n+fn main() {}"}, {"sha": "97aa4912721434631a773a8226973c7100179aa6", "filename": "src/test/ui/coherence/coherence-free-vs-bound-region.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/be0d10f149579d3ed53507ff8c2f6511b56456f7/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-free-vs-bound-region.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/be0d10f149579d3ed53507ff8c2f6511b56456f7/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-free-vs-bound-region.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-free-vs-bound-region.stderr?ref=be0d10f149579d3ed53507ff8c2f6511b56456f7", "patch": "@@ -0,0 +1,20 @@\n+error: conflicting implementations of trait `TheTrait` for type `fn(&u8)`:\n+  --> $DIR/coherence-free-vs-bound-region.rs:16:1\n+   |\n+LL | impl<'a> TheTrait for fn(&'a u8) {}\n+   | -------------------------------- first implementation here\n+LL | \n+LL | impl TheTrait for fn(&u8) {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `fn(&u8)`\n+   |\n+note: the lint level is defined here\n+  --> $DIR/coherence-free-vs-bound-region.rs:10:9\n+   |\n+LL | #![deny(coherence_leak_check)]\n+   |         ^^^^^^^^^^^^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #56105 <https://github.com/rust-lang/rust/issues/56105>\n+   = note: this behavior recently changed as a result of a bug fix; see rust-lang/rust#56105 for details\n+\n+error: aborting due to previous error\n+"}, {"sha": "ee09a72449be13fd06c71d037af955dba2dbcb48", "filename": "src/test/ui/coherence/coherence-wasm-bindgen.rs", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/be0d10f149579d3ed53507ff8c2f6511b56456f7/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-wasm-bindgen.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be0d10f149579d3ed53507ff8c2f6511b56456f7/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-wasm-bindgen.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-wasm-bindgen.rs?ref=be0d10f149579d3ed53507ff8c2f6511b56456f7", "patch": "@@ -0,0 +1,37 @@\n+// Capture a coherence pattern from wasm-bindgen that we discovered as part of\n+// future-compatibility warning #56105. This pattern currently receives a lint\n+// warning but we probably want to support it long term.\n+//\n+// Key distinction: we are implementing once for `A` (take ownership) and one\n+// for `&A` (borrow).\n+//\n+// c.f. #56105\n+\n+#![deny(coherence_leak_check)]\n+\n+trait IntoWasmAbi {\n+    fn some_method(&self) {}\n+}\n+\n+trait FromWasmAbi {}\n+trait RefFromWasmAbi {}\n+trait ReturnWasmAbi {}\n+\n+impl<'a, 'b, A, R> IntoWasmAbi for &'a (dyn Fn(A) -> R + 'b)\n+where\n+    A: FromWasmAbi,\n+    R: ReturnWasmAbi,\n+{\n+}\n+\n+// Explicitly writing the bound lifetime.\n+impl<'a, 'b, A, R> IntoWasmAbi for &'a (dyn for<'x> Fn(&'x A) -> R + 'b)\n+where\n+    A: RefFromWasmAbi,\n+    R: ReturnWasmAbi,\n+{\n+    //~^^^^^ ERROR conflicting implementation\n+    //~| WARNING this was previously accepted\n+}\n+\n+fn main() {}"}, {"sha": "c77483bb847f5b5df4b395da95ad5574e172a2d7", "filename": "src/test/ui/coherence/coherence-wasm-bindgen.stderr", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/be0d10f149579d3ed53507ff8c2f6511b56456f7/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-wasm-bindgen.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/be0d10f149579d3ed53507ff8c2f6511b56456f7/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-wasm-bindgen.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-wasm-bindgen.stderr?ref=be0d10f149579d3ed53507ff8c2f6511b56456f7", "patch": "@@ -0,0 +1,32 @@\n+error: conflicting implementations of trait `IntoWasmAbi` for type `&dyn std::ops::Fn(&_) -> _`:\n+  --> $DIR/coherence-wasm-bindgen.rs:28:1\n+   |\n+LL | / impl<'a, 'b, A, R> IntoWasmAbi for &'a (dyn Fn(A) -> R + 'b)\n+LL | | where\n+LL | |     A: FromWasmAbi,\n+LL | |     R: ReturnWasmAbi,\n+LL | | {\n+LL | | }\n+   | |_- first implementation here\n+...\n+LL | / impl<'a, 'b, A, R> IntoWasmAbi for &'a (dyn for<'x> Fn(&'x A) -> R + 'b)\n+LL | | where\n+LL | |     A: RefFromWasmAbi,\n+LL | |     R: ReturnWasmAbi,\n+...  |\n+LL | |\n+LL | | }\n+   | |_^ conflicting implementation for `&dyn std::ops::Fn(&_) -> _`\n+   |\n+note: the lint level is defined here\n+  --> $DIR/coherence-wasm-bindgen.rs:10:9\n+   |\n+LL | #![deny(coherence_leak_check)]\n+   |         ^^^^^^^^^^^^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #56105 <https://github.com/rust-lang/rust/issues/56105>\n+   = note: downstream crates may implement trait `FromWasmAbi` for type `&_`\n+   = note: this behavior recently changed as a result of a bug fix; see rust-lang/rust#56105 for details\n+\n+error: aborting due to previous error\n+"}, {"sha": "6455854f34db89cc8a7bd0e112733a2f4bd0e3de", "filename": "src/test/ui/hr-subtype/return-static.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/be0d10f149579d3ed53507ff8c2f6511b56456f7/src%2Ftest%2Fui%2Fhr-subtype%2Freturn-static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be0d10f149579d3ed53507ff8c2f6511b56456f7/src%2Ftest%2Fui%2Fhr-subtype%2Freturn-static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhr-subtype%2Freturn-static.rs?ref=be0d10f149579d3ed53507ff8c2f6511b56456f7", "patch": "@@ -0,0 +1,13 @@\n+// check-pass\n+\n+fn make<T>() -> T {\n+    panic!()\n+}\n+\n+fn take<T>(x: T) {}\n+\n+fn main() {\n+    let x: for<'a> fn(&'a u32) -> _ = make();\n+    let y: &'static u32 = x(&22);\n+    take::<for<'b> fn(&'b u32) -> &'b u32>(x);\n+}"}]}