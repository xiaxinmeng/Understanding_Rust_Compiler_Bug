{"sha": "8e1162f07e8b7d59f6a0e0a5576352d888defa78", "node_id": "C_kwDOAAsO6NoAKDhlMTE2MmYwN2U4YjdkNTlmNmEwZTBhNTU3NjM1MmQ4ODhkZWZhNzg", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-04-11T08:11:46Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-04-11T08:11:46Z"}, "message": "Auto merge of #110168 - saethlin:miri, r=RalfJung\n\nupdate Miri\n\nMost importantly, this should ensure that the Miri test suite passes in this repo, when the issue is fixed.\n\nr? `@oli-obk`", "tree": {"sha": "2c47fc2e916f787607bfc8d7bafe86620745d6c1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2c47fc2e916f787607bfc8d7bafe86620745d6c1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8e1162f07e8b7d59f6a0e0a5576352d888defa78", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8e1162f07e8b7d59f6a0e0a5576352d888defa78", "html_url": "https://github.com/rust-lang/rust/commit/8e1162f07e8b7d59f6a0e0a5576352d888defa78", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8e1162f07e8b7d59f6a0e0a5576352d888defa78/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5072826793ac62fb8e797e598ae1284c5c1a5a36", "url": "https://api.github.com/repos/rust-lang/rust/commits/5072826793ac62fb8e797e598ae1284c5c1a5a36", "html_url": "https://github.com/rust-lang/rust/commit/5072826793ac62fb8e797e598ae1284c5c1a5a36"}, {"sha": "d50fee9fb2e66b4162fbf5496e5abb7d3f29129a", "url": "https://api.github.com/repos/rust-lang/rust/commits/d50fee9fb2e66b4162fbf5496e5abb7d3f29129a", "html_url": "https://github.com/rust-lang/rust/commit/d50fee9fb2e66b4162fbf5496e5abb7d3f29129a"}], "stats": {"total": 168, "additions": 105, "deletions": 63}, "files": [{"sha": "da1c2f770ac4fccc5550b131245a93ac36b55c68", "filename": "src/tools/miri/.github/workflows/ci.yml", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8e1162f07e8b7d59f6a0e0a5576352d888defa78/src%2Ftools%2Fmiri%2F.github%2Fworkflows%2Fci.yml", "raw_url": "https://github.com/rust-lang/rust/raw/8e1162f07e8b7d59f6a0e0a5576352d888defa78/src%2Ftools%2Fmiri%2F.github%2Fworkflows%2Fci.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2F.github%2Fworkflows%2Fci.yml?ref=8e1162f07e8b7d59f6a0e0a5576352d888defa78", "patch": "@@ -174,7 +174,12 @@ jobs:\n           ~/.local/bin/zulip-send --stream miri --subject \"Cron Job Failure (miri, $(date -u +%Y-%m))\" \\\n             --message 'Dear @*T-miri*,\n \n-          It would appear that the Miri cron job build failed. Would you mind investigating this issue?\n+          It would appear that the [Miri cron job build]('\"https://github.com/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID\"') failed.\n+          \n+          This likely means that rustc changed the miri directory and\n+          we now need to do a [`./miri rustc-pull`](https://github.com/rust-lang/miri/blob/master/CONTRIBUTING.md#importing-changes-from-the-rustc-repo).\n+\n+          Would you mind investigating this issue?\n \n           Thanks in advance!\n           Sincerely,"}, {"sha": "46deebf2cdde91017b807ee84292168018e48f58", "filename": "src/tools/miri/Cargo.lock", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8e1162f07e8b7d59f6a0e0a5576352d888defa78/src%2Ftools%2Fmiri%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/8e1162f07e8b7d59f6a0e0a5576352d888defa78/src%2Ftools%2Fmiri%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2FCargo.lock?ref=8e1162f07e8b7d59f6a0e0a5576352d888defa78", "patch": "@@ -282,19 +282,19 @@ checksum = \"201de327520df007757c1f0adce6e827fe8562fbc28bfd9c15571c66ca1f5f79\"\n \n [[package]]\n name = \"libffi\"\n-version = \"3.0.1\"\n+version = \"3.2.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"1e454b3efb16fba3b17810ae5e41df02b649e564ab3c5a34b3b93ed07ad287e6\"\n+checksum = \"ce826c243048e3d5cec441799724de52e2d42f820468431fc3fceee2341871e2\"\n dependencies = [\n  \"libc\",\n  \"libffi-sys\",\n ]\n \n [[package]]\n name = \"libffi-sys\"\n-version = \"2.0.1\"\n+version = \"2.2.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"84e78d02e5a8eae9c24c38ce6e6026f80e16dff76adcdae4bc5c6c52c2de4a60\"\n+checksum = \"dc65067b78c0fc069771e8b9a9e02df71e08858bec92c1f101377c67b9dca7c7\"\n dependencies = [\n  \"cc\",\n ]"}, {"sha": "4c7351879877e76501946f3265151688a2a694df", "filename": "src/tools/miri/README.md", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8e1162f07e8b7d59f6a0e0a5576352d888defa78/src%2Ftools%2Fmiri%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/8e1162f07e8b7d59f6a0e0a5576352d888defa78/src%2Ftools%2Fmiri%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2FREADME.md?ref=8e1162f07e8b7d59f6a0e0a5576352d888defa78", "patch": "@@ -15,7 +15,7 @@ for example:\n   or an invalid enum discriminant)\n * **Experimental**: Violations of the [Stacked Borrows] rules governing aliasing\n   for reference types\n-* **Experimental**: Violations of the Tree Borrows aliasing rules, as an optional\n+* **Experimental**: Violations of the [Tree Borrows] aliasing rules, as an optional\n   alternative to [Stacked Borrows]\n * **Experimental**: Data races\n \n@@ -79,6 +79,7 @@ behavior** in your program, and cannot run all programs:\n [`unreachable_unchecked`]: https://doc.rust-lang.org/stable/std/hint/fn.unreachable_unchecked.html\n [`copy_nonoverlapping`]: https://doc.rust-lang.org/stable/std/ptr/fn.copy_nonoverlapping.html\n [Stacked Borrows]: https://github.com/rust-lang/unsafe-code-guidelines/blob/master/wip/stacked-borrows.md\n+[Tree Borrows]: https://perso.crans.org/vanille/treebor/\n \n \n ## Using Miri\n@@ -359,7 +360,7 @@ to Miri failing to detect cases of undefined behavior in a program.\n * `-Zmiri-disable-data-race-detector` disables checking for data races.  Using\n   this flag is **unsound**. This implies `-Zmiri-disable-weak-memory-emulation`.\n * `-Zmiri-disable-stacked-borrows` disables checking the experimental\n-  aliasing rules to track borrows ([Stacked Borrows] and Tree Borrows).\n+  aliasing rules to track borrows ([Stacked Borrows] and [Tree Borrows]).\n   This can make Miri run faster, but it also means no aliasing violations will\n   be detected. Using this flag is **unsound** (but the affected soundness rules\n   are experimental). Later flags take precedence: borrow tracking can be reactivated\n@@ -425,7 +426,7 @@ to Miri failing to detect cases of undefined behavior in a program.\n * `-Zmiri-track-weak-memory-loads` shows a backtrace when weak memory emulation returns an outdated\n   value from a load. This can help diagnose problems that disappear under\n   `-Zmiri-disable-weak-memory-emulation`.\n-* `-Zmiri-tree-borrows` replaces [Stacked Borrows] with the Tree Borrows rules.\n+* `-Zmiri-tree-borrows` replaces [Stacked Borrows] with the [Tree Borrows] rules.\n   The soundness rules are already experimental without this flag, but even more\n   so with this flag.\n * `-Zmiri-force-page-size=<num>` overrides the default page size for an architecture, in multiples of 1k.\n@@ -442,7 +443,7 @@ Some native rustc `-Z` flags are also very relevant for Miri:\n   functions.  This is needed so that Miri can execute such functions, so Miri\n   sets this flag per default.\n * `-Zmir-emit-retag` controls whether `Retag` statements are emitted. Miri\n-  enables this per default because it is needed for [Stacked Borrows] and Tree Borrows.\n+  enables this per default because it is needed for [Stacked Borrows] and [Tree Borrows].\n \n Moreover, Miri recognizes some environment variables:\n "}, {"sha": "b5b3b211b05f0446a311221aa9abe0297fcb8f04", "filename": "src/tools/miri/ci.sh", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8e1162f07e8b7d59f6a0e0a5576352d888defa78/src%2Ftools%2Fmiri%2Fci.sh", "raw_url": "https://github.com/rust-lang/rust/raw/8e1162f07e8b7d59f6a0e0a5576352d888defa78/src%2Ftools%2Fmiri%2Fci.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fci.sh?ref=8e1162f07e8b7d59f6a0e0a5576352d888defa78", "patch": "@@ -43,7 +43,9 @@ function run_tests {\n     # optimizations up all the way, too).\n     # Optimizations change diagnostics (mostly backtraces), so we don't check\n     # them. Also error locations change so we don't run the failing tests.\n-    MIRIFLAGS=\"${MIRIFLAGS:-} -O -Zmir-opt-level=4\" MIRI_SKIP_UI_CHECKS=1 ./miri test -- tests/{pass,panic}\n+    # We explicitly enable debug-assertions here, they are disabled by -O but we have tests\n+    # which exist to check that we panic on debug assertion failures.\n+    MIRIFLAGS=\"${MIRIFLAGS:-} -O -Zmir-opt-level=4 -Cdebug-assertions=yes\" MIRI_SKIP_UI_CHECKS=1 ./miri test -- tests/{pass,panic}\n \n     # Also run some many-seeds tests. 64 seeds means this takes around a minute per test.\n     for FILE in tests/many-seeds/*.rs; do"}, {"sha": "f1ed3be2edd3979f3e3a14e58098b6fabe277b50", "filename": "src/tools/miri/rust-version", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8e1162f07e8b7d59f6a0e0a5576352d888defa78/src%2Ftools%2Fmiri%2Frust-version", "raw_url": "https://github.com/rust-lang/rust/raw/8e1162f07e8b7d59f6a0e0a5576352d888defa78/src%2Ftools%2Fmiri%2Frust-version", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Frust-version?ref=8e1162f07e8b7d59f6a0e0a5576352d888defa78", "patch": "@@ -1 +1 @@\n-511364e7874dba9649a264100407e4bffe7b5425\n+d4be8efc6296bace5b1e165f1b34d3c6da76aa8e"}, {"sha": "26a7ead2407cb79e7523f000deb4dca001c218e5", "filename": "src/tools/miri/src/bin/miri.rs", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/8e1162f07e8b7d59f6a0e0a5576352d888defa78/src%2Ftools%2Fmiri%2Fsrc%2Fbin%2Fmiri.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e1162f07e8b7d59f6a0e0a5576352d888defa78/src%2Ftools%2Fmiri%2Fsrc%2Fbin%2Fmiri.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fbin%2Fmiri.rs?ref=8e1162f07e8b7d59f6a0e0a5576352d888defa78", "patch": "@@ -28,9 +28,11 @@ use rustc_middle::{\n     middle::exported_symbols::{\n         ExportedSymbol, SymbolExportInfo, SymbolExportKind, SymbolExportLevel,\n     },\n-    ty::{query::ExternProviders, TyCtxt},\n     query::LocalCrate,\n+    ty::{query::ExternProviders, TyCtxt},\n };\n+use rustc_session::config::OptLevel;\n+\n use rustc_session::{config::CrateType, search_paths::PathKind, CtfeBacktrace};\n \n use miri::{BacktraceStyle, BorrowTrackerMethod, ProvenanceMode, RetagFields};\n@@ -83,6 +85,21 @@ impl rustc_driver::Callbacks for MiriCompilerCalls {\n                 env::set_current_dir(cwd).unwrap();\n             }\n \n+            if tcx.sess.opts.optimize != OptLevel::No {\n+                tcx.sess.warn(\"Miri does not support optimizations. If you have enabled optimizations \\\n+                    by selecting a Cargo profile (such as --release) which changes other profile settings \\\n+                    such as whether debug assertions and overflow checks are enabled, those settings are \\\n+                    still applied.\");\n+            }\n+            if tcx.sess.mir_opt_level() > 0 {\n+                tcx.sess.warn(\"You have explicitly enabled MIR optimizations, overriding Miri's default \\\n+                    which is to completely disable them. Any optimizations may hide UB that Miri would \\\n+                    otherwise detect, and it is not necessarily possible to predict what kind of UB will \\\n+                    be missed. If you are enabling optimizations to make Miri run faster, we advise using \\\n+                    cfg(miri) to shrink your workload instead. The performance benefit of enabling MIR \\\n+                    optimizations is usually marginal at best.\");\n+            }\n+\n             if let Some(return_code) = miri::eval_entry(tcx, entry_def_id, entry_type, config) {\n                 std::process::exit(\n                     i32::try_from(return_code).expect(\"Return value was too large!\"),"}, {"sha": "24bf90f104ffd5abc4b4b086f7ddbf83c079be2a", "filename": "src/tools/miri/src/clock.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8e1162f07e8b7d59f6a0e0a5576352d888defa78/src%2Ftools%2Fmiri%2Fsrc%2Fclock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e1162f07e8b7d59f6a0e0a5576352d888defa78/src%2Ftools%2Fmiri%2Fsrc%2Fclock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fclock.rs?ref=8e1162f07e8b7d59f6a0e0a5576352d888defa78", "patch": "@@ -3,7 +3,10 @@ use std::time::{Duration, Instant as StdInstant};\n \n /// When using a virtual clock, this defines how many nanoseconds we pretend are passing for each\n /// basic block.\n-const NANOSECONDS_PER_BASIC_BLOCK: u64 = 10;\n+/// This number is pretty random, but it has been shown to approximately cause\n+/// some sample programs to run within an order of magnitude of real time on desktop CPUs.\n+/// (See `tests/pass/shims/time-with-isolation*.rs`.)\n+const NANOSECONDS_PER_BASIC_BLOCK: u64 = 5000;\n \n #[derive(Debug)]\n pub struct Instant {"}, {"sha": "5c8aba6d441f4a444ad9d5a0147db5c72beaf20c", "filename": "src/tools/miri/src/lib.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8e1162f07e8b7d59f6a0e0a5576352d888defa78/src%2Ftools%2Fmiri%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e1162f07e8b7d59f6a0e0a5576352d888defa78/src%2Ftools%2Fmiri%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Flib.rs?ref=8e1162f07e8b7d59f6a0e0a5576352d888defa78", "patch": "@@ -124,11 +124,13 @@ pub use crate::tag_gc::{EvalContextExt as _, VisitTags};\n \n /// Insert rustc arguments at the beginning of the argument list that Miri wants to be\n /// set per default, for maximal validation power.\n+/// Also disable the MIR pass that inserts an alignment check on every pointer dereference. Miri\n+/// does that too, and with a better error message.\n pub const MIRI_DEFAULT_ARGS: &[&str] = &[\n+    \"--cfg=miri\",\n     \"-Zalways-encode-mir\",\n+    \"-Zextra-const-ub-checks\",\n     \"-Zmir-emit-retag\",\n     \"-Zmir-opt-level=0\",\n-    \"--cfg=miri\",\n-    \"-Cdebug-assertions=on\",\n-    \"-Zextra-const-ub-checks\",\n+    \"-Zmir-enable-passes=-CheckAlignment\",\n ];"}, {"sha": "18ae01a19f914e06962472aefa3c378e44095956", "filename": "src/tools/miri/src/shims/panic.rs", "status": "modified", "additions": 7, "deletions": 13, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/8e1162f07e8b7d59f6a0e0a5576352d888defa78/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fpanic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e1162f07e8b7d59f6a0e0a5576352d888defa78/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fpanic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fpanic.rs?ref=8e1162f07e8b7d59f6a0e0a5576352d888defa78", "patch": "@@ -157,7 +157,10 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n                 &[catch_unwind.data.into(), payload.into()],\n                 None,\n                 // Directly return to caller of `try`.\n-                StackPopCleanup::Goto { ret: Some(catch_unwind.ret), unwind: mir::UnwindAction::Continue },\n+                StackPopCleanup::Goto {\n+                    ret: Some(catch_unwind.ret),\n+                    unwind: mir::UnwindAction::Continue,\n+                },\n             )?;\n \n             // We pushed a new stack frame, the engine should not do any jumping now!\n@@ -211,10 +214,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n                     Abi::Rust,\n                     &[index.into(), len.into()],\n                     None,\n-                    StackPopCleanup::Goto {\n-                        ret: None,\n-                        unwind,\n-                    },\n+                    StackPopCleanup::Goto { ret: None, unwind },\n                 )?;\n             }\n             MisalignedPointerDereference { required, found } => {\n@@ -235,19 +235,13 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n                     Abi::Rust,\n                     &[required.into(), found.into()],\n                     None,\n-                    StackPopCleanup::Goto {\n-                        ret: None,\n-                        unwind,\n-                    },\n+                    StackPopCleanup::Goto { ret: None, unwind },\n                 )?;\n             }\n \n             _ => {\n                 // Forward everything else to `panic` lang item.\n-                this.start_panic(\n-                    msg.description(),\n-                    unwind,\n-                )?;\n+                this.start_panic(msg.description(), unwind)?;\n             }\n         }\n         Ok(())"}, {"sha": "de271548217afb2f3e03f760f04bc81bdb93e47e", "filename": "src/tools/miri/src/shims/unix/fs.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/8e1162f07e8b7d59f6a0e0a5576352d888defa78/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Funix%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e1162f07e8b7d59f6a0e0a5576352d888defa78/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Funix%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Funix%2Ffs.rs?ref=8e1162f07e8b7d59f6a0e0a5576352d888defa78", "patch": "@@ -628,13 +628,6 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n         let fd = this.read_scalar(&args[0])?.to_i32()?;\n         let cmd = this.read_scalar(&args[1])?.to_i32()?;\n \n-        // Reject if isolation is enabled.\n-        if let IsolatedOp::Reject(reject_with) = this.machine.isolated_op {\n-            this.reject_in_isolation(\"`fcntl`\", reject_with)?;\n-            this.set_last_error_from_io_error(ErrorKind::PermissionDenied)?;\n-            return Ok(-1);\n-        }\n-\n         // We only support getting the flags for a descriptor.\n         if cmd == this.eval_libc_i32(\"F_GETFD\") {\n             // Currently this is the only flag that `F_GETFD` returns. It is OK to just return the\n@@ -677,6 +670,13 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n                 None => this.handle_not_found(),\n             }\n         } else if this.tcx.sess.target.os == \"macos\" && cmd == this.eval_libc_i32(\"F_FULLFSYNC\") {\n+            // Reject if isolation is enabled.\n+            if let IsolatedOp::Reject(reject_with) = this.machine.isolated_op {\n+                this.reject_in_isolation(\"`fcntl`\", reject_with)?;\n+                this.set_last_error_from_io_error(ErrorKind::PermissionDenied)?;\n+                return Ok(-1);\n+            }\n+\n             if let Some(file_descriptor) = this.machine.file_handler.handles.get(&fd) {\n                 // FIXME: Support fullfsync for all FDs\n                 let FileHandle { file, writable } ="}, {"sha": "c046678f73f5b396c66edad74b7b85db475a98e3", "filename": "src/tools/miri/tests/fail/terminate-terminator.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8e1162f07e8b7d59f6a0e0a5576352d888defa78/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fterminate-terminator.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8e1162f07e8b7d59f6a0e0a5576352d888defa78/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fterminate-terminator.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fterminate-terminator.stderr?ref=8e1162f07e8b7d59f6a0e0a5576352d888defa78", "patch": "@@ -1,3 +1,5 @@\n+warning: You have explicitly enabled MIR optimizations, overriding Miri's default which is to completely disable them. Any optimizations may hide UB that Miri would otherwise detect, and it is not necessarily possible to predict what kind of UB will be missed. If you are enabling optimizations to make Miri run faster, we advise using cfg(miri) to shrink your workload instead. The performance benefit of enabling MIR optimizations is usually marginal at best.\n+\n thread 'main' panicked at 'explicit panic', $DIR/terminate-terminator.rs:LL:CC\n note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n error: abnormal termination: panic in a function that cannot unwind\n@@ -23,5 +25,5 @@ LL |     panic_abort();\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n \n-error: aborting due to previous error\n+error: aborting due to previous error; 1 warning emitted\n "}, {"sha": "68aa19a88db0997832c3d7c3a6fbd085d2a83a9a", "filename": "src/tools/miri/tests/panic/alignment-assertion.rs", "status": "removed", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5072826793ac62fb8e797e598ae1284c5c1a5a36/src%2Ftools%2Fmiri%2Ftests%2Fpanic%2Falignment-assertion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5072826793ac62fb8e797e598ae1284c5c1a5a36/src%2Ftools%2Fmiri%2Ftests%2Fpanic%2Falignment-assertion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Fpanic%2Falignment-assertion.rs?ref=5072826793ac62fb8e797e598ae1284c5c1a5a36", "patch": "@@ -1,9 +0,0 @@\n-//@compile-flags: -Zmiri-disable-alignment-check -Cdebug-assertions=yes\n-\n-fn main() {\n-    let mut x = [0u32; 2];\n-    let ptr: *mut u8 = x.as_mut_ptr().cast::<u8>();\n-    unsafe {\n-        *(ptr.add(1).cast::<u32>()) = 42;\n-    }\n-}"}, {"sha": "26cf51b0cd2e3d45a00b4b5a4b10aeb390dd32bb", "filename": "src/tools/miri/tests/panic/alignment-assertion.stderr", "status": "removed", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5072826793ac62fb8e797e598ae1284c5c1a5a36/src%2Ftools%2Fmiri%2Ftests%2Fpanic%2Falignment-assertion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5072826793ac62fb8e797e598ae1284c5c1a5a36/src%2Ftools%2Fmiri%2Ftests%2Fpanic%2Falignment-assertion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Fpanic%2Falignment-assertion.stderr?ref=5072826793ac62fb8e797e598ae1284c5c1a5a36", "patch": "@@ -1,2 +0,0 @@\n-thread 'main' panicked at 'misaligned pointer dereference: address must be a multiple of 0x4 but is $HEX', $DIR/alignment-assertion.rs:LL:CC\n-note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace"}, {"sha": "307906f2583b21ff0da26ebb8852967bc47100b8", "filename": "src/tools/miri/tests/pass-dep/shims/fcntl_f-fullfsync_apple.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8e1162f07e8b7d59f6a0e0a5576352d888defa78/src%2Ftools%2Fmiri%2Ftests%2Fpass-dep%2Fshims%2Ffcntl_f-fullfsync_apple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e1162f07e8b7d59f6a0e0a5576352d888defa78/src%2Ftools%2Fmiri%2Ftests%2Fpass-dep%2Fshims%2Ffcntl_f-fullfsync_apple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Fpass-dep%2Fshims%2Ffcntl_f-fullfsync_apple.rs?ref=8e1162f07e8b7d59f6a0e0a5576352d888defa78", "patch": "@@ -0,0 +1,12 @@\n+//@only-target-apple: F_FULLFSYNC only on apple systems\n+//@compile-flags: -Zmiri-isolation-error=warn-nobacktrace\n+\n+use std::io::Error;\n+\n+fn main() {\n+    // test `fcntl(F_FULLFSYNC)`\n+    unsafe {\n+        assert_eq!(libc::fcntl(1, libc::F_FULLFSYNC, 0), -1);\n+        assert_eq!(Error::last_os_error().raw_os_error(), Some(libc::EPERM));\n+    }\n+}"}, {"sha": "09a24e1e5d74d293be0e515bdaaa93565ef9e8fc", "filename": "src/tools/miri/tests/pass-dep/shims/fcntl_f-fullfsync_apple.stderr", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8e1162f07e8b7d59f6a0e0a5576352d888defa78/src%2Ftools%2Fmiri%2Ftests%2Fpass-dep%2Fshims%2Ffcntl_f-fullfsync_apple.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8e1162f07e8b7d59f6a0e0a5576352d888defa78/src%2Ftools%2Fmiri%2Ftests%2Fpass-dep%2Fshims%2Ffcntl_f-fullfsync_apple.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Fpass-dep%2Fshims%2Ffcntl_f-fullfsync_apple.stderr?ref=8e1162f07e8b7d59f6a0e0a5576352d888defa78", "patch": "@@ -0,0 +1,2 @@\n+warning: `fcntl` was made to return an error due to isolation\n+"}, {"sha": "5185db0b0e29fce3c96cc8d95fbf826ecf718156", "filename": "src/tools/miri/tests/pass-dep/shims/libc-fs-with-isolation.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8e1162f07e8b7d59f6a0e0a5576352d888defa78/src%2Ftools%2Fmiri%2Ftests%2Fpass-dep%2Fshims%2Flibc-fs-with-isolation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e1162f07e8b7d59f6a0e0a5576352d888defa78/src%2Ftools%2Fmiri%2Ftests%2Fpass-dep%2Fshims%2Flibc-fs-with-isolation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Fpass-dep%2Fshims%2Flibc-fs-with-isolation.rs?ref=8e1162f07e8b7d59f6a0e0a5576352d888defa78", "patch": "@@ -7,10 +7,9 @@ use std::fs;\n use std::io::{Error, ErrorKind};\n \n fn main() {\n-    // test `fcntl`\n+    // test `fcntl(F_DUPFD): should work even with isolation.`\n     unsafe {\n-        assert_eq!(libc::fcntl(1, libc::F_DUPFD, 0), -1);\n-        assert_eq!(Error::last_os_error().raw_os_error(), Some(libc::EPERM));\n+        assert!(libc::fcntl(1, libc::F_DUPFD, 0) >= 0);\n     }\n \n     // test `readlink`"}, {"sha": "b0cadfb970bf3ef29c9143dff7e7dfaa8255c9b5", "filename": "src/tools/miri/tests/pass-dep/shims/libc-fs-with-isolation.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8e1162f07e8b7d59f6a0e0a5576352d888defa78/src%2Ftools%2Fmiri%2Ftests%2Fpass-dep%2Fshims%2Flibc-fs-with-isolation.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8e1162f07e8b7d59f6a0e0a5576352d888defa78/src%2Ftools%2Fmiri%2Ftests%2Fpass-dep%2Fshims%2Flibc-fs-with-isolation.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Fpass-dep%2Fshims%2Flibc-fs-with-isolation.stderr?ref=8e1162f07e8b7d59f6a0e0a5576352d888defa78", "patch": "@@ -1,5 +1,3 @@\n-warning: `fcntl` was made to return an error due to isolation\n-\n warning: `readlink` was made to return an error due to isolation\n \n warning: `$STAT` was made to return an error due to isolation"}, {"sha": "00cc68eba3eacfb5e73c2070531ab3ada2fc5ebb", "filename": "src/tools/miri/tests/pass-dep/tokio/sleep.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8e1162f07e8b7d59f6a0e0a5576352d888defa78/src%2Ftools%2Fmiri%2Ftests%2Fpass-dep%2Ftokio%2Fsleep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e1162f07e8b7d59f6a0e0a5576352d888defa78/src%2Ftools%2Fmiri%2Ftests%2Fpass-dep%2Ftokio%2Fsleep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Fpass-dep%2Ftokio%2Fsleep.rs?ref=8e1162f07e8b7d59f6a0e0a5576352d888defa78", "patch": "@@ -1,4 +1,4 @@\n-//@compile-flags: -Zmiri-disable-isolation -Zmiri-permissive-provenance -Zmiri-backtrace=full\n+//@compile-flags: -Zmiri-permissive-provenance -Zmiri-backtrace=full\n //@only-target-x86_64-unknown-linux: support for tokio only on linux and x86\n \n use tokio::time::{sleep, Duration, Instant};\n@@ -7,8 +7,6 @@ use tokio::time::{sleep, Duration, Instant};\n async fn main() {\n     let start = Instant::now();\n     sleep(Duration::from_secs(1)).await;\n-    // It takes 96 millisecond to sleep for 1 millisecond\n-    // It takes 1025 millisecond to sleep for 1 second\n     let time_elapsed = &start.elapsed().as_millis();\n-    assert!(time_elapsed > &1000, \"{}\", time_elapsed);\n+    assert!((1000..1100).contains(time_elapsed), \"{}\", time_elapsed);\n }"}, {"sha": "0ed2a941bc493467455ad8ff849d71804f9d896f", "filename": "src/tools/miri/tests/pass-dep/tokio/tokio_mvp.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8e1162f07e8b7d59f6a0e0a5576352d888defa78/src%2Ftools%2Fmiri%2Ftests%2Fpass-dep%2Ftokio%2Ftokio_mvp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e1162f07e8b7d59f6a0e0a5576352d888defa78/src%2Ftools%2Fmiri%2Ftests%2Fpass-dep%2Ftokio%2Ftokio_mvp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Fpass-dep%2Ftokio%2Ftokio_mvp.rs?ref=8e1162f07e8b7d59f6a0e0a5576352d888defa78", "patch": "@@ -1,5 +1,5 @@\n // Need to disable preemption to stay on the supported MVP codepath in mio.\n-//@compile-flags: -Zmiri-disable-isolation -Zmiri-permissive-provenance\n+//@compile-flags: -Zmiri-permissive-provenance\n //@only-target-x86_64-unknown-linux: support for tokio exists only on linux and x86\n \n #[tokio::main]"}, {"sha": "7852d495e28facf724ca77377ce5fe224fb6ed19", "filename": "src/tools/miri/tests/pass/concurrency/thread_park_isolated.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8e1162f07e8b7d59f6a0e0a5576352d888defa78/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Fconcurrency%2Fthread_park_isolated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e1162f07e8b7d59f6a0e0a5576352d888defa78/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Fconcurrency%2Fthread_park_isolated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Fconcurrency%2Fthread_park_isolated.rs?ref=8e1162f07e8b7d59f6a0e0a5576352d888defa78", "patch": "@@ -7,6 +7,6 @@ fn main() {\n \n     thread::park_timeout(Duration::from_millis(200));\n \n-    // Thanks to deterministic execution, this will wiat *exactly* 200ms (rounded to 1ms).\n-    assert!((200..201).contains(&start.elapsed().as_millis()));\n+    // Thanks to deterministic execution, this will wait *exactly* 200ms, plus the time for the surrounding code.\n+    assert!((200..210).contains(&start.elapsed().as_millis()), \"{}\", start.elapsed().as_millis());\n }"}, {"sha": "a0c3c6bbaa92e6aa75cd609592c1af0c0ecab1bf", "filename": "src/tools/miri/tests/pass/shims/time-with-isolation.rs", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/8e1162f07e8b7d59f6a0e0a5576352d888defa78/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Fshims%2Ftime-with-isolation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e1162f07e8b7d59f6a0e0a5576352d888defa78/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Fshims%2Ftime-with-isolation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Fshims%2Ftime-with-isolation.rs?ref=8e1162f07e8b7d59f6a0e0a5576352d888defa78", "patch": "@@ -22,14 +22,23 @@ fn test_time_passes() {\n     let diff = now2.duration_since(now1);\n     assert_eq!(now1 + diff, now2);\n     assert_eq!(now2 - diff, now1);\n-    // The virtual clock is deterministic and I got 29us on a 64-bit Linux machine. However, this\n+    // The virtual clock is deterministic and I got 15ms on a 64-bit Linux machine. However, this\n     // changes according to the platform so we use an interval to be safe. This should be updated\n     // if `NANOSECONDS_PER_BASIC_BLOCK` changes.\n-    assert!(diff.as_micros() > 10);\n-    assert!(diff.as_micros() < 40);\n+    assert!(diff.as_millis() > 5);\n+    assert!(diff.as_millis() < 20);\n+}\n+\n+fn test_block_for_one_second() {\n+    let end = Instant::now() + Duration::from_secs(1);\n+    // This takes a long time, as we only increment when statements are executed.\n+    // When we sleep on all threads, we fast forward to the sleep duration, which we can't\n+    // do with busy waiting.\n+    while Instant::now() < end {}\n }\n \n fn main() {\n     test_time_passes();\n+    test_block_for_one_second();\n     test_sleep();\n }"}, {"sha": "24e72e22fd89505cc5b509cc2d132f312c0dfd8e", "filename": "src/tools/miri/tests/pass/shims/time-with-isolation2.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8e1162f07e8b7d59f6a0e0a5576352d888defa78/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Fshims%2Ftime-with-isolation2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e1162f07e8b7d59f6a0e0a5576352d888defa78/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Fshims%2Ftime-with-isolation2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Fshims%2Ftime-with-isolation2.rs?ref=8e1162f07e8b7d59f6a0e0a5576352d888defa78", "patch": "@@ -0,0 +1,8 @@\n+use std::time::Instant;\n+\n+fn main() {\n+    let begin = Instant::now();\n+    for _ in 0..100_000 {}\n+    let time = begin.elapsed();\n+    println!(\"The loop took around {}s\", time.as_secs());\n+}"}, {"sha": "641e469f50c264a1ca4ec78c413fba786c946160", "filename": "src/tools/miri/tests/pass/shims/time-with-isolation2.stdout", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8e1162f07e8b7d59f6a0e0a5576352d888defa78/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Fshims%2Ftime-with-isolation2.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/8e1162f07e8b7d59f6a0e0a5576352d888defa78/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Fshims%2Ftime-with-isolation2.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Fshims%2Ftime-with-isolation2.stdout?ref=8e1162f07e8b7d59f6a0e0a5576352d888defa78", "patch": "@@ -0,0 +1 @@\n+The loop took around 13s"}]}