{"sha": "2e4bb2b9e9e10a665e23a34ae60652a90e9a1b82", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJlNGJiMmI5ZTllMTBhNjY1ZTIzYTM0YWU2MDY1MmE5MGU5YTFiODI=", "commit": {"author": {"name": "Steven Fackler", "email": "sfackler@gmail.com", "date": "2013-11-16T05:08:31Z"}, "committer": {"name": "Steven Fackler", "email": "sfackler@gmail.com", "date": "2013-11-23T05:19:53Z"}, "message": "Cell -> Mut switch in comm", "tree": {"sha": "c630df9a2b6c1d649a19a17e257b49bd6fe7a070", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c630df9a2b6c1d649a19a17e257b49bd6fe7a070"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2e4bb2b9e9e10a665e23a34ae60652a90e9a1b82", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2e4bb2b9e9e10a665e23a34ae60652a90e9a1b82", "html_url": "https://github.com/rust-lang/rust/commit/2e4bb2b9e9e10a665e23a34ae60652a90e9a1b82", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2e4bb2b9e9e10a665e23a34ae60652a90e9a1b82/comments", "author": {"login": "sfackler", "id": 1455697, "node_id": "MDQ6VXNlcjE0NTU2OTc=", "avatar_url": "https://avatars.githubusercontent.com/u/1455697?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sfackler", "html_url": "https://github.com/sfackler", "followers_url": "https://api.github.com/users/sfackler/followers", "following_url": "https://api.github.com/users/sfackler/following{/other_user}", "gists_url": "https://api.github.com/users/sfackler/gists{/gist_id}", "starred_url": "https://api.github.com/users/sfackler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sfackler/subscriptions", "organizations_url": "https://api.github.com/users/sfackler/orgs", "repos_url": "https://api.github.com/users/sfackler/repos", "events_url": "https://api.github.com/users/sfackler/events{/privacy}", "received_events_url": "https://api.github.com/users/sfackler/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sfackler", "id": 1455697, "node_id": "MDQ6VXNlcjE0NTU2OTc=", "avatar_url": "https://avatars.githubusercontent.com/u/1455697?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sfackler", "html_url": "https://github.com/sfackler", "followers_url": "https://api.github.com/users/sfackler/followers", "following_url": "https://api.github.com/users/sfackler/following{/other_user}", "gists_url": "https://api.github.com/users/sfackler/gists{/gist_id}", "starred_url": "https://api.github.com/users/sfackler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sfackler/subscriptions", "organizations_url": "https://api.github.com/users/sfackler/orgs", "repos_url": "https://api.github.com/users/sfackler/repos", "events_url": "https://api.github.com/users/sfackler/events{/privacy}", "received_events_url": "https://api.github.com/users/sfackler/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "18119afbbefccae7d46a981ea11a7e1295fb7867", "url": "https://api.github.com/repos/rust-lang/rust/commits/18119afbbefccae7d46a981ea11a7e1295fb7867", "html_url": "https://github.com/rust-lang/rust/commit/18119afbbefccae7d46a981ea11a7e1295fb7867"}], "stats": {"total": 44, "additions": 24, "deletions": 20}, "files": [{"sha": "077e9ba195bbc004634367fddf7aa203d0f3fef2", "filename": "src/libstd/rt/comm.rs", "status": "modified", "additions": 24, "deletions": 20, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/2e4bb2b9e9e10a665e23a34ae60652a90e9a1b82/src%2Flibstd%2Frt%2Fcomm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e4bb2b9e9e10a665e23a34ae60652a90e9a1b82/src%2Flibstd%2Frt%2Fcomm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fcomm.rs?ref=2e4bb2b9e9e10a665e23a34ae60652a90e9a1b82", "patch": "@@ -22,11 +22,13 @@ use rt::select::{SelectInner, SelectPortInner};\n use select::{Select, SelectPort};\n use unstable::atomics::{AtomicUint, AtomicOption, Acquire, Relaxed, SeqCst};\n use unstable::sync::UnsafeArc;\n+use util;\n use util::Void;\n use comm::{GenericChan, GenericSmartChan, GenericPort, Peekable, SendDeferred};\n use cell::Cell;\n use clone::Clone;\n use tuple::ImmutableTuple;\n+use mutable::Mut;\n \n /// A combined refcount / BlockedTask-as-uint pointer.\n ///\n@@ -431,28 +433,28 @@ type StreamPortOne<T> = PortOne<StreamPayload<T>>;\n \n /// A channel with unbounded size.\n pub struct Chan<T> {\n-    // FIXME #5372. Using Cell because we don't take &mut self\n-    next: Cell<StreamChanOne<T>>\n+    // FIXME #5372. Using Mut because we don't take &mut self\n+    next: Mut<StreamChanOne<T>>\n }\n \n /// An port with unbounded size.\n pub struct Port<T> {\n-    // FIXME #5372. Using Cell because we don't take &mut self\n-    next: Cell<StreamPortOne<T>>\n+    // FIXME #5372. Using Mut because we don't take &mut self\n+    next: Mut<Option<StreamPortOne<T>>>\n }\n \n pub fn stream<T: Send>() -> (Port<T>, Chan<T>) {\n     let (pone, cone) = oneshot();\n-    let port = Port { next: Cell::new(pone) };\n-    let chan = Chan { next: Cell::new(cone) };\n+    let port = Port { next: Mut::new(Some(pone)) };\n+    let chan = Chan { next: Mut::new(cone) };\n     return (port, chan);\n }\n \n impl<T: Send> Chan<T> {\n     fn try_send_inner(&self, val: T, do_resched: bool) -> bool {\n-        let (next_pone, next_cone) = oneshot();\n-        let cone = self.next.take();\n-        self.next.put_back(next_cone);\n+        let (next_pone, mut cone) = oneshot();\n+        let mut b = self.next.borrow_mut();\n+        util::swap(&mut cone, b.get());\n         cone.try_send_inner(StreamPayload { val: val, next: next_pone }, do_resched)\n     }\n }\n@@ -489,10 +491,11 @@ impl<T: Send> GenericPort<T> for Port<T> {\n     }\n \n     fn try_recv(&self) -> Option<T> {\n-        do self.next.take_opt().map_default(None) |pone| {\n+        let mut b = self.next.borrow_mut();\n+        do b.get().take().map_default(None) |pone| {\n             match pone.try_recv() {\n                 Some(StreamPayload { val, next }) => {\n-                    self.next.put_back(next);\n+                    *b.get() = Some(next);\n                     Some(val)\n                 }\n                 None => None\n@@ -503,7 +506,7 @@ impl<T: Send> GenericPort<T> for Port<T> {\n \n impl<T: Send> Peekable<T> for Port<T> {\n     fn peek(&self) -> bool {\n-        self.next.with_mut_ref(|p| p.peek())\n+        self.next.map_mut(|p| p.get_mut_ref().peek())\n     }\n }\n \n@@ -514,18 +517,18 @@ impl<T: Send> Peekable<T> for Port<T> {\n impl<'self, T: Send> SelectInner for &'self Port<T> {\n     #[inline]\n     fn optimistic_check(&mut self) -> bool {\n-        do self.next.with_mut_ref |pone| { pone.optimistic_check() }\n+        do self.next.map_mut |pone| { pone.get_mut_ref().optimistic_check() }\n     }\n \n     #[inline]\n     fn block_on(&mut self, sched: &mut Scheduler, task: BlockedTask) -> bool {\n-        let task = Cell::new(task);\n-        do self.next.with_mut_ref |pone| { pone.block_on(sched, task.take()) }\n+        let mut b = self.next.borrow_mut();\n+        b.get().get_mut_ref().block_on(sched, task)\n     }\n \n     #[inline]\n     fn unblock_from(&mut self) -> bool {\n-        do self.next.with_mut_ref |pone| { pone.unblock_from() }\n+        do self.next.map_mut |pone| { pone.get_mut_ref().unblock_from() }\n     }\n }\n \n@@ -552,9 +555,10 @@ impl<T: Send> Select for Port<T> { }\n \n impl<'self, T: Send> SelectPortInner<T> for &'self Port<T> {\n     fn recv_ready(self) -> Option<T> {\n-        match self.next.take().recv_ready() {\n+        let mut b = self.next.borrow_mut();\n+        match b.get().take_unwrap().recv_ready() {\n             Some(StreamPayload { val, next }) => {\n-                self.next.put_back(next);\n+                *b.get() = Some(next);\n                 Some(val)\n             }\n             None => None\n@@ -571,7 +575,7 @@ pub struct SharedChan<T> {\n \n impl<T: Send> SharedChan<T> {\n     pub fn new(chan: Chan<T>) -> SharedChan<T> {\n-        let next = chan.next.take();\n+        let next = chan.next.unwrap();\n         let next = AtomicOption::new(~next);\n         SharedChan { next: UnsafeArc::new(next) }\n     }\n@@ -625,7 +629,7 @@ pub struct SharedPort<T> {\n impl<T: Send> SharedPort<T> {\n     pub fn new(port: Port<T>) -> SharedPort<T> {\n         // Put the data port into a new link pipe\n-        let next_data_port = port.next.take();\n+        let next_data_port = port.next.unwrap().unwrap();\n         let (next_link_port, next_link_chan) = oneshot();\n         next_link_chan.send(next_data_port);\n         let next_link = AtomicOption::new(~next_link_port);"}]}