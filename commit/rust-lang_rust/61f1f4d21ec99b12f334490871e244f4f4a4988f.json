{"sha": "61f1f4d21ec99b12f334490871e244f4f4a4988f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYxZjFmNGQyMWVjOTliMTJmMzM0NDkwODcxZTI0NGY0ZjRhNDk4OGY=", "commit": {"author": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-03-07T09:59:08Z"}, "committer": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-03-07T11:24:20Z"}, "message": "Add a field `pub_outstanding_references` to `NameResolution`.\nAdd an argument `allow_private_imports` to some methods.", "tree": {"sha": "6b29da262e0647c72aabe8eb73c90b9e4e07e880", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6b29da262e0647c72aabe8eb73c90b9e4e07e880"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/61f1f4d21ec99b12f334490871e244f4f4a4988f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/61f1f4d21ec99b12f334490871e244f4f4a4988f", "html_url": "https://github.com/rust-lang/rust/commit/61f1f4d21ec99b12f334490871e244f4f4a4988f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/61f1f4d21ec99b12f334490871e244f4f4a4988f/comments", "author": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "45f0ce71c19d8da081714dc917f11a8cc02d15be", "url": "https://api.github.com/repos/rust-lang/rust/commits/45f0ce71c19d8da081714dc917f11a8cc02d15be", "html_url": "https://github.com/rust-lang/rust/commit/45f0ce71c19d8da081714dc917f11a8cc02d15be"}], "stats": {"total": 57, "additions": 37, "deletions": 20}, "files": [{"sha": "f391597e3b1597f0f76b83224622a13bd3c9dabe", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/61f1f4d21ec99b12f334490871e244f4f4a4988f/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61f1f4d21ec99b12f334490871e244f4f4a4988f/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=61f1f4d21ec99b12f334490871e244f4f4a4988f", "patch": "@@ -681,8 +681,8 @@ impl<'a, 'b:'a, 'tcx:'b> GraphBuilder<'a, 'b, 'tcx> {\n \n         match subclass {\n             SingleImport { target, .. } => {\n-                module_.increment_outstanding_references_for(target, ValueNS);\n-                module_.increment_outstanding_references_for(target, TypeNS);\n+                module_.increment_outstanding_references_for(target, ValueNS, is_public);\n+                module_.increment_outstanding_references_for(target, TypeNS, is_public);\n             }\n             GlobImport => {\n                 // Set the glob flag. This tells us that we don't know the"}, {"sha": "a3076edef0f121a1c0e816a620416933a01380db", "filename": "src/librustc_resolve/resolve_imports.rs", "status": "modified", "additions": 35, "deletions": 18, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/61f1f4d21ec99b12f334490871e244f4f4a4988f/src%2Flibrustc_resolve%2Fresolve_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61f1f4d21ec99b12f334490871e244f4f4a4988f/src%2Flibrustc_resolve%2Fresolve_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fresolve_imports.rs?ref=61f1f4d21ec99b12f334490871e244f4f4a4988f", "patch": "@@ -125,7 +125,8 @@ impl ImportDirective {\n /// Records information about the resolution of a name in a module.\n pub struct NameResolution<'a> {\n     /// The number of unresolved single imports that could define the name.\n-    outstanding_references: usize,\n+    outstanding_references: u32,\n+    pub_outstanding_references: u32,\n     /// The least shadowable known binding for this name, or None if there are no known bindings.\n     pub binding: Option<&'a NameBinding<'a>>,\n     duplicate_globs: Vec<&'a NameBinding<'a>>,\n@@ -151,7 +152,7 @@ impl<'a> NameResolution<'a> {\n     }\n \n     // Returns the resolution of the name assuming no more globs will define it.\n-    fn result(&self) -> ResolveResult<&'a NameBinding<'a>> {\n+    fn result(&self, allow_private_imports: bool) -> ResolveResult<&'a NameBinding<'a>> {\n         match self.binding {\n             Some(binding) if !binding.defined_with(DefModifiers::GLOB_IMPORTED) => Success(binding),\n             _ if self.outstanding_references > 0 => Indeterminate,\n@@ -162,8 +163,9 @@ impl<'a> NameResolution<'a> {\n \n     // Returns Some(the resolution of the name), or None if the resolution depends\n     // on whether more globs can define the name.\n-    fn try_result(&self) -> Option<ResolveResult<&'a NameBinding<'a>>> {\n-        match self.result() {\n+    fn try_result(&self, allow_private_imports: bool)\n+                  -> Option<ResolveResult<&'a NameBinding<'a>>> {\n+        match self.result(allow_private_imports) {\n             Success(binding) if binding.defined_with(DefModifiers::PRELUDE) => None,\n             Failed(_) => None,\n             result @ _ => Some(result),\n@@ -200,7 +202,7 @@ impl<'a> ::ModuleS<'a> {\n         };\n \n         let resolution = resolutions.get(&(name, ns)).cloned().unwrap_or_default();\n-        if let Some(result) = resolution.try_result() {\n+        if let Some(result) = resolution.try_result(allow_private_imports) {\n             // If the resolution doesn't depend on glob definability, check privacy and return.\n             return result.and_then(|binding| {\n                 let allowed = allow_private_imports || !binding.is_import() || binding.is_public();\n@@ -234,7 +236,7 @@ impl<'a> ::ModuleS<'a> {\n             }\n         }\n \n-        resolution.result()\n+        resolution.result(true)\n     }\n \n     // Define the name or return the existing binding if there is a collision.\n@@ -246,15 +248,26 @@ impl<'a> ::ModuleS<'a> {\n         })\n     }\n \n-    pub fn increment_outstanding_references_for(&self, name: Name, ns: Namespace) {\n+    pub fn increment_outstanding_references_for(&self, name: Name, ns: Namespace, is_public: bool) {\n         let mut resolutions = self.resolutions.borrow_mut();\n-        resolutions.entry((name, ns)).or_insert_with(Default::default).outstanding_references += 1;\n+        let resolution = resolutions.entry((name, ns)).or_insert_with(Default::default);\n+        resolution.outstanding_references += 1;\n+        if is_public {\n+            resolution.pub_outstanding_references += 1;\n+        }\n     }\n \n-    fn decrement_outstanding_references_for(&self, name: Name, ns: Namespace) {\n-        self.update_resolution(name, ns, |resolution| match resolution.outstanding_references {\n-            0 => panic!(\"No more outstanding references!\"),\n-            ref mut outstanding_references => *outstanding_references -= 1,\n+    fn decrement_outstanding_references_for(&self, name: Name, ns: Namespace, is_public: bool) {\n+        let decrement_references = |count: &mut _| {\n+            assert!(*count > 0);\n+            *count -= 1;\n+        };\n+\n+        self.update_resolution(name, ns, |resolution| {\n+            decrement_references(&mut resolution.outstanding_references);\n+            if is_public {\n+                decrement_references(&mut resolution.pub_outstanding_references);\n+            }\n         })\n     }\n \n@@ -265,11 +278,11 @@ impl<'a> ::ModuleS<'a> {\n     {\n         let mut resolutions = self.resolutions.borrow_mut();\n         let resolution = resolutions.entry((name, ns)).or_insert_with(Default::default);\n-        let was_success = resolution.try_result().and_then(ResolveResult::success).is_some();\n+        let was_success = resolution.try_result(false).and_then(ResolveResult::success).is_some();\n \n         let t = update(resolution);\n         if !was_success {\n-            if let Some(Success(binding)) = resolution.try_result() {\n+            if let Some(Success(binding)) = resolution.try_result(false) {\n                 self.define_in_glob_importers(name, ns, binding);\n             }\n         }\n@@ -460,10 +473,14 @@ impl<'a, 'b:'a, 'tcx:'b> ImportResolver<'a, 'b, 'tcx> {\n             let mut resolve_in_ns = |ns, determined: bool| {\n                 // Temporarily count the directive as determined so that the resolution fails\n                 // (as opposed to being indeterminate) when it can only be defined by the directive.\n-                if !determined { module_.decrement_outstanding_references_for(target, ns) }\n+                if !determined {\n+                    module_.decrement_outstanding_references_for(target, ns, directive.is_public)\n+                }\n                 let result =\n                     self.resolver.resolve_name_in_module(target_module, source, ns, false, true);\n-                if !determined { module_.increment_outstanding_references_for(target, ns) }\n+                if !determined {\n+                    module_.increment_outstanding_references_for(target, ns, directive.is_public)\n+                }\n                 result\n             };\n             (resolve_in_ns(ValueNS, value_determined.get()),\n@@ -494,7 +511,7 @@ impl<'a, 'b:'a, 'tcx:'b> ImportResolver<'a, 'b, 'tcx> {\n                     self.report_conflict(target, ns, &directive.import(binding, None), old_binding);\n                 }\n             }\n-            module_.decrement_outstanding_references_for(target, ns);\n+            module_.decrement_outstanding_references_for(target, ns, directive.is_public);\n         }\n \n         match (&value_result, &type_result) {\n@@ -601,7 +618,7 @@ impl<'a, 'b:'a, 'tcx:'b> ImportResolver<'a, 'b, 'tcx> {\n         }\n \n         for (&(name, ns), resolution) in target_module.resolutions.borrow().iter() {\n-            if let Some(Success(binding)) = resolution.try_result() {\n+            if let Some(Success(binding)) = resolution.try_result(false) {\n                 if binding.defined_with(DefModifiers::IMPORTABLE | DefModifiers::PUBLIC) {\n                     let _ = module_.try_define_child(name, ns, directive.import(binding, None));\n                 }"}]}