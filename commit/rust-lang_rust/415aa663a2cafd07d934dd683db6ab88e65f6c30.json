{"sha": "415aa663a2cafd07d934dd683db6ab88e65f6c30", "node_id": "C_kwDOAAsO6NoAKDQxNWFhNjYzYTJjYWZkMDdkOTM0ZGQ2ODNkYjZhYjg4ZTY1ZjZjMzA", "commit": {"author": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2023-01-17T15:00:00Z"}, "committer": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2023-01-18T07:11:15Z"}, "message": "add note about indirect cycles", "tree": {"sha": "e20cbf5f5ad5ca7a87af1a10ce5734fba92489da", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e20cbf5f5ad5ca7a87af1a10ce5734fba92489da"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/415aa663a2cafd07d934dd683db6ab88e65f6c30", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/415aa663a2cafd07d934dd683db6ab88e65f6c30", "html_url": "https://github.com/rust-lang/rust/commit/415aa663a2cafd07d934dd683db6ab88e65f6c30", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/415aa663a2cafd07d934dd683db6ab88e65f6c30/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "31ac29d9899c063fdee7a78988990f2b037bef7b", "url": "https://api.github.com/repos/rust-lang/rust/commits/31ac29d9899c063fdee7a78988990f2b037bef7b", "html_url": "https://github.com/rust-lang/rust/commit/31ac29d9899c063fdee7a78988990f2b037bef7b"}], "stats": {"total": 4, "additions": 4, "deletions": 0}, "files": [{"sha": "730a8e6125887ae6fcdfb1e7379f38df33d2016e", "filename": "compiler/rustc_trait_selection/src/solve/search_graph/cache.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/415aa663a2cafd07d934dd683db6ab88e65f6c30/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fsearch_graph%2Fcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/415aa663a2cafd07d934dd683db6ab88e65f6c30/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fsearch_graph%2Fcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fsearch_graph%2Fcache.rs?ref=415aa663a2cafd07d934dd683db6ab88e65f6c30", "patch": "@@ -59,6 +59,10 @@ impl<'tcx> ProvisionalCache<'tcx> {\n     /// Adds a dependency from the current leaf to `target` in the cache\n     /// to prevent us from moving any goals which depend on the current leaf\n     /// to the global cache while we're still computing `target`.\n+    ///\n+    /// Its important to note that `target` may already be part of a different cycle.\n+    /// In this case we have to ensure that we also depend on all other goals\n+    /// in the existing cycle in addition to the potentially direct cycle with `target`.\n     pub(super) fn add_dependency_of_leaf_on(&mut self, target: EntryIndex) {\n         let depth = self.entries[target].depth;\n         for provisional_entry in &mut self.entries.raw[target.index()..] {"}]}