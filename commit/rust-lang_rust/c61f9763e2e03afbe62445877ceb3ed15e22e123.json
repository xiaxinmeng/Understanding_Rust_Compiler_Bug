{"sha": "c61f9763e2e03afbe62445877ceb3ed15e22e123", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM2MWY5NzYzZTJlMDNhZmJlNjI0NDU4NzdjZWIzZWQxNWUyMmUxMjM=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2014-07-21T20:48:19Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2014-07-21T20:50:12Z"}, "message": "Use fewer instructions for `fail!`\n\nAdds a special-case fail function, rustrt::unwind::begin_unwind_no_time_to_explain,\nthat encapsulates the printing of the words \"explicit failure\".\n\nThe before/after optimized assembly:\n\n```\n        leaq    \"str\\\"str\\\"(1369)\"(%rip), %rax\n        movq    %rax, 8(%rsp)\n        movq    $19, 16(%rsp)\n        leaq    8(%rsp), %rdi\n        movl    $11, %esi\n        callq   _ZN6unwind31begin_unwind_no_time_to_explain20hd1c720cdde6a116480dE@PLT\n```\n\n```\n        leaq    \"str\\\"str\\\"(1412)\"(%rip), %rax\n        movq    %rax, 24(%rsp)\n        movq    $16, 32(%rsp)\n        leaq    \"str\\\"str\\\"(1413)\"(%rip), %rax\n        movq    %rax, 8(%rsp)\n        movq    $19, 16(%rsp)\n        leaq    24(%rsp), %rdi\n        leaq    8(%rsp), %rsi\n        movl    $11, %edx\n        callq   _ZN6unwind12begin_unwind21h15836560661922107792E\n```\n\nBefore/after filesizes:\n\nrwxrwxr-x 1 brian brian 21479503 Jul 20 22:09 stage2-old/lib/librustc-4e7c5e5c.so\nrwxrwxr-x 1 brian brian 21475415 Jul 20 22:30 x86_64-unknown-linux-gnu/stage2/lib/librustc-4e7c5e5c.so", "tree": {"sha": "9cdcb715f5e00ca9b82d34ba1db9984b565d7819", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9cdcb715f5e00ca9b82d34ba1db9984b565d7819"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c61f9763e2e03afbe62445877ceb3ed15e22e123", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c61f9763e2e03afbe62445877ceb3ed15e22e123", "html_url": "https://github.com/rust-lang/rust/commit/c61f9763e2e03afbe62445877ceb3ed15e22e123", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c61f9763e2e03afbe62445877ceb3ed15e22e123/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f15d6d28396e8700b6c3f2704204a2769e710403", "url": "https://api.github.com/repos/rust-lang/rust/commits/f15d6d28396e8700b6c3f2704204a2769e710403", "html_url": "https://github.com/rust-lang/rust/commit/f15d6d28396e8700b6c3f2704204a2769e710403"}], "stats": {"total": 12, "additions": 9, "deletions": 3}, "files": [{"sha": "2fe0c32153af200ee6a97966578cd1a952a92eee", "filename": "src/librustrt/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c61f9763e2e03afbe62445877ceb3ed15e22e123/src%2Flibrustrt%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c61f9763e2e03afbe62445877ceb3ed15e22e123/src%2Flibrustrt%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustrt%2Flib.rs?ref=c61f9763e2e03afbe62445877ceb3ed15e22e123", "patch": "@@ -33,7 +33,7 @@ extern crate collections;\n #[cfg(test)] #[phase(plugin, link)] extern crate std;\n \n pub use self::util::{Stdio, Stdout, Stderr};\n-pub use self::unwind::{begin_unwind, begin_unwind_fmt};\n+pub use self::unwind::{begin_unwind, begin_unwind_fmt, begin_unwind_no_time_to_explain};\n \n use core::prelude::*;\n "}, {"sha": "cb1b6f46afe3628e3f989c61ce5fe12420afd9a0", "filename": "src/librustrt/unwind.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c61f9763e2e03afbe62445877ceb3ed15e22e123/src%2Flibrustrt%2Funwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c61f9763e2e03afbe62445877ceb3ed15e22e123/src%2Flibrustrt%2Funwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustrt%2Funwind.rs?ref=c61f9763e2e03afbe62445877ceb3ed15e22e123", "patch": "@@ -432,6 +432,11 @@ pub fn begin_unwind<M: Any + Send>(msg: M, file: &'static str, line: uint) -> !\n     begin_unwind_inner(box msg, file, line)\n }\n \n+/// Unwinding for `fail!()`. Saves passing a string.\n+#[inline(never)] #[cold] #[experimental]\n+pub fn begin_unwind_no_time_to_explain(file: &'static str, line: uint) -> ! {\n+    begin_unwind_inner(box () (\"explicit failure\"), file, line)\n+}\n \n /// The core of the unwinding.\n ///"}, {"sha": "3c6c860f516bb63c8c5cd4724a02af5285fc60a0", "filename": "src/libstd/macros.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c61f9763e2e03afbe62445877ceb3ed15e22e123/src%2Flibstd%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c61f9763e2e03afbe62445877ceb3ed15e22e123/src%2Flibstd%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmacros.rs?ref=c61f9763e2e03afbe62445877ceb3ed15e22e123", "patch": "@@ -39,7 +39,7 @@\n #[macro_export]\n macro_rules! fail(\n     () => (\n-        fail!(\"explicit failure\")\n+        ::std::rt::begin_unwind_no_time_to_explain(file!(), line!())\n     );\n     ($msg:expr) => (\n         ::std::rt::begin_unwind($msg, file!(), line!())"}, {"sha": "023a30de027a9c50628a36f6ce7d6dd25bee8f79", "filename": "src/libstd/rt/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c61f9763e2e03afbe62445877ceb3ed15e22e123/src%2Flibstd%2Frt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c61f9763e2e03afbe62445877ceb3ed15e22e123/src%2Flibstd%2Frt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fmod.rs?ref=c61f9763e2e03afbe62445877ceb3ed15e22e123", "patch": "@@ -66,7 +66,8 @@ pub use self::util::{default_sched_threads, min_stack, running_on_valgrind};\n // standard library which work together to create the entire runtime.\n pub use alloc::{heap, libc_heap};\n pub use rustrt::{task, local, mutex, exclusive, stack, args, rtio, thread};\n-pub use rustrt::{Stdio, Stdout, Stderr, begin_unwind, begin_unwind_fmt};\n+pub use rustrt::{Stdio, Stdout, Stderr};\n+pub use rustrt::{begin_unwind, begin_unwind_fmt, begin_unwind_no_time_to_explain};\n pub use rustrt::{bookkeeping, at_exit, unwind, DEFAULT_ERROR_CODE, Runtime};\n \n // Simple backtrace functionality (to print on failure)"}]}