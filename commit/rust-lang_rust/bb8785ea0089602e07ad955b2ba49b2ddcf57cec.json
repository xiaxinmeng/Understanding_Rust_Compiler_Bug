{"sha": "bb8785ea0089602e07ad955b2ba49b2ddcf57cec", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJiODc4NWVhMDA4OTYwMmUwN2FkOTU1YjJiYTQ5YjJkZGNmNTdjZWM=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-03-21T03:30:30Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-03-21T21:18:57Z"}, "message": "move CrateDisambiguator -> rustc_ast", "tree": {"sha": "fd2e6a58ba9db2e9cf7f4becf353512b26b27229", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fd2e6a58ba9db2e9cf7f4becf353512b26b27229"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bb8785ea0089602e07ad955b2ba49b2ddcf57cec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bb8785ea0089602e07ad955b2ba49b2ddcf57cec", "html_url": "https://github.com/rust-lang/rust/commit/bb8785ea0089602e07ad955b2ba49b2ddcf57cec", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bb8785ea0089602e07ad955b2ba49b2ddcf57cec/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fdf2d2d9dc4740eb9d3d18c8a1d52c520c912565", "url": "https://api.github.com/repos/rust-lang/rust/commits/fdf2d2d9dc4740eb9d3d18c8a1d52c520c912565", "html_url": "https://github.com/rust-lang/rust/commit/fdf2d2d9dc4740eb9d3d18c8a1d52c520c912565"}], "stats": {"total": 100, "additions": 48, "deletions": 52}, "files": [{"sha": "796c94ac03f0da2301c762afa9e7e9e33947b71d", "filename": "src/librustc/hir/map/definitions.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/bb8785ea0089602e07ad955b2ba49b2ddcf57cec/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb8785ea0089602e07ad955b2ba49b2ddcf57cec/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs?ref=bb8785ea0089602e07ad955b2ba49b2ddcf57cec", "patch": "@@ -5,21 +5,20 @@\n //! expressions) that are mostly just leftovers.\n \n use rustc_ast::ast;\n+use rustc_ast::crate_disambiguator::CrateDisambiguator;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::stable_hasher::StableHasher;\n use rustc_hir as hir;\n+pub use rustc_hir::def_id::DefPathHash;\n use rustc_hir::def_id::{CrateNum, DefId, DefIndex, LocalDefId, CRATE_DEF_INDEX, LOCAL_CRATE};\n use rustc_index::vec::IndexVec;\n-use rustc_session::CrateDisambiguator;\n use rustc_span::hygiene::ExpnId;\n use rustc_span::symbol::{sym, Symbol};\n use rustc_span::Span;\n \n use std::fmt::Write;\n use std::hash::Hash;\n \n-pub use rustc_hir::def_id::DefPathHash;\n-\n /// The `DefPathTable` maps `DefIndex`es to `DefKey`s and vice versa.\n /// Internally the `DefPathTable` holds a tree of `DefKey`s, where each `DefKey`\n /// stores the `DefIndex` of its parent."}, {"sha": "95d4c09dac3110e3c9ef6de7d34e1375e56d5ff2", "filename": "src/librustc_ast/crate_disambiguator.rs", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/bb8785ea0089602e07ad955b2ba49b2ddcf57cec/src%2Flibrustc_ast%2Fcrate_disambiguator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb8785ea0089602e07ad955b2ba49b2ddcf57cec/src%2Flibrustc_ast%2Fcrate_disambiguator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast%2Fcrate_disambiguator.rs?ref=bb8785ea0089602e07ad955b2ba49b2ddcf57cec", "patch": "@@ -0,0 +1,35 @@\n+// This is here because `rustc_session` wants to refer to it,\n+// and so does `rustc_hir`, but `rustc_hir` shouldn't refer to `rustc_session`.\n+\n+use rustc_data_structures::fingerprint::Fingerprint;\n+use rustc_data_structures::{base_n, impl_stable_hash_via_hash};\n+\n+use std::fmt;\n+\n+/// Hash value constructed out of all the `-C metadata` arguments passed to the\n+/// compiler. Together with the crate-name forms a unique global identifier for\n+/// the crate.\n+#[derive(Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Clone, Copy, RustcEncodable, RustcDecodable)]\n+pub struct CrateDisambiguator(Fingerprint);\n+\n+impl CrateDisambiguator {\n+    pub fn to_fingerprint(self) -> Fingerprint {\n+        self.0\n+    }\n+}\n+\n+impl fmt::Display for CrateDisambiguator {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> Result<(), fmt::Error> {\n+        let (a, b) = self.0.as_value();\n+        let as_u128 = a as u128 | ((b as u128) << 64);\n+        f.write_str(&base_n::encode(as_u128, base_n::CASE_INSENSITIVE))\n+    }\n+}\n+\n+impl From<Fingerprint> for CrateDisambiguator {\n+    fn from(fingerprint: Fingerprint) -> CrateDisambiguator {\n+        CrateDisambiguator(fingerprint)\n+    }\n+}\n+\n+impl_stable_hash_via_hash!(CrateDisambiguator);"}, {"sha": "a93e0fcbd71934bb5c51ac8f05c913d69b54e2aa", "filename": "src/librustc_ast/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bb8785ea0089602e07ad955b2ba49b2ddcf57cec/src%2Flibrustc_ast%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb8785ea0089602e07ad955b2ba49b2ddcf57cec/src%2Flibrustc_ast%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast%2Flib.rs?ref=bb8785ea0089602e07ad955b2ba49b2ddcf57cec", "patch": "@@ -40,6 +40,7 @@ pub mod util {\n pub mod ast;\n pub mod attr;\n pub use attr::{with_default_globals, with_globals, GLOBALS};\n+pub mod crate_disambiguator;\n pub mod entry;\n pub mod expand;\n pub mod mut_visit;"}, {"sha": "80f59aff69137a09d365b84d8dd8090cff769c1c", "filename": "src/librustc_session/session.rs", "status": "modified", "additions": 10, "deletions": 49, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/bb8785ea0089602e07ad955b2ba49b2ddcf57cec/src%2Flibrustc_session%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb8785ea0089602e07ad955b2ba49b2ddcf57cec/src%2Flibrustc_session%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Fsession.rs?ref=bb8785ea0089602e07ad955b2ba49b2ddcf57cec", "patch": "@@ -1,41 +1,30 @@\n+use crate::cgu_reuse_tracker::CguReuseTracker;\n use crate::code_stats::CodeStats;\n pub use crate::code_stats::{DataTypeKind, FieldInfo, SizeKind, VariantInfo};\n-\n-use crate::cgu_reuse_tracker::CguReuseTracker;\n-use rustc_data_structures::fingerprint::Fingerprint;\n-use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n-\n use crate::config::{self, OutputType, PrintRequest, Sanitizer, SwitchWithOptPath};\n use crate::filesearch;\n use crate::lint;\n+use crate::parse::ParseSess;\n use crate::search_paths::{PathKind, SearchPath};\n-use rustc_data_structures::profiling::duration_to_secs_str;\n-use rustc_errors::ErrorReported;\n \n-use rustc_data_structures::base_n;\n-use rustc_data_structures::impl_stable_hash_via_hash;\n+pub use rustc_ast::crate_disambiguator::CrateDisambiguator;\n+use rustc_data_structures::flock;\n+use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n+use rustc_data_structures::jobserver::{self, Client};\n+use rustc_data_structures::profiling::{duration_to_secs_str, SelfProfiler, SelfProfilerRef};\n use rustc_data_structures::sync::{\n     self, AtomicU64, AtomicUsize, Lock, Lrc, Once, OneThread, Ordering, Ordering::SeqCst,\n };\n-\n-use crate::parse::ParseSess;\n use rustc_errors::annotate_snippet_emitter_writer::AnnotateSnippetEmitterWriter;\n-use rustc_errors::emitter::HumanReadableErrorType;\n-use rustc_errors::emitter::{Emitter, EmitterWriter};\n+use rustc_errors::emitter::{Emitter, EmitterWriter, HumanReadableErrorType};\n use rustc_errors::json::JsonEmitter;\n-use rustc_errors::{Applicability, DiagnosticBuilder, DiagnosticId};\n+use rustc_errors::{Applicability, DiagnosticBuilder, DiagnosticId, ErrorReported};\n use rustc_span::edition::Edition;\n-use rustc_span::source_map;\n-use rustc_span::{MultiSpan, Span};\n-\n-use rustc_data_structures::flock;\n-use rustc_data_structures::jobserver::{self, Client};\n-use rustc_data_structures::profiling::{SelfProfiler, SelfProfilerRef};\n+use rustc_span::source_map::{self, MultiSpan, Span};\n use rustc_target::spec::{PanicStrategy, RelroLevel, Target, TargetTriple};\n \n use std::cell::{self, RefCell};\n use std::env;\n-use std::fmt;\n use std::io::Write;\n use std::num::NonZeroU32;\n use std::path::PathBuf;\n@@ -1193,34 +1182,6 @@ fn validate_commandline_args_with_session_available(sess: &Session) {\n     }\n }\n \n-/// Hash value constructed out of all the `-C metadata` arguments passed to the\n-/// compiler. Together with the crate-name forms a unique global identifier for\n-/// the crate.\n-#[derive(Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Clone, Copy, RustcEncodable, RustcDecodable)]\n-pub struct CrateDisambiguator(Fingerprint);\n-\n-impl CrateDisambiguator {\n-    pub fn to_fingerprint(self) -> Fingerprint {\n-        self.0\n-    }\n-}\n-\n-impl fmt::Display for CrateDisambiguator {\n-    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> Result<(), fmt::Error> {\n-        let (a, b) = self.0.as_value();\n-        let as_u128 = a as u128 | ((b as u128) << 64);\n-        f.write_str(&base_n::encode(as_u128, base_n::CASE_INSENSITIVE))\n-    }\n-}\n-\n-impl From<Fingerprint> for CrateDisambiguator {\n-    fn from(fingerprint: Fingerprint) -> CrateDisambiguator {\n-        CrateDisambiguator(fingerprint)\n-    }\n-}\n-\n-impl_stable_hash_via_hash!(CrateDisambiguator);\n-\n /// Holds data on the current incremental compilation session, if there is one.\n #[derive(Debug)]\n pub enum IncrCompSession {"}]}