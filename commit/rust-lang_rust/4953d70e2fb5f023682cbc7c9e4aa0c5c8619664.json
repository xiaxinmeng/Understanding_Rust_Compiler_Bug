{"sha": "4953d70e2fb5f023682cbc7c9e4aa0c5c8619664", "node_id": "C_kwDOAAsO6NoAKDQ5NTNkNzBlMmZiNWYwMjM2ODJjYmM3YzllNGFhMGM1Yzg2MTk2NjQ", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-12-09T22:53:31Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2023-02-20T15:28:59Z"}, "message": "Stuff a TyCtxt into the Resolver", "tree": {"sha": "f9179394bdd89d89664539a3e999e029057fd29b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f9179394bdd89d89664539a3e999e029057fd29b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4953d70e2fb5f023682cbc7c9e4aa0c5c8619664", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4953d70e2fb5f023682cbc7c9e4aa0c5c8619664", "html_url": "https://github.com/rust-lang/rust/commit/4953d70e2fb5f023682cbc7c9e4aa0c5c8619664", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4953d70e2fb5f023682cbc7c9e4aa0c5c8619664/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9fb91b8742391e74ff2fe7b6ab4f9758b88c8c6c", "url": "https://api.github.com/repos/rust-lang/rust/commits/9fb91b8742391e74ff2fe7b6ab4f9758b88c8c6c", "html_url": "https://github.com/rust-lang/rust/commit/9fb91b8742391e74ff2fe7b6ab4f9758b88c8c6c"}], "stats": {"total": 73, "additions": 32, "deletions": 41}, "files": [{"sha": "7689e3cec068452803833a0200f41f0b73bb4113", "filename": "compiler/rustc_interface/src/queries.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4953d70e2fb5f023682cbc7c9e4aa0c5c8619664/compiler%2Frustc_interface%2Fsrc%2Fqueries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4953d70e2fb5f023682cbc7c9e4aa0c5c8619664/compiler%2Frustc_interface%2Fsrc%2Fqueries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fqueries.rs?ref=4953d70e2fb5f023682cbc7c9e4aa0c5c8619664", "patch": "@@ -221,12 +221,11 @@ impl<'tcx> Queries<'tcx> {\n \n                     let arenas = Resolver::arenas();\n                     let mut resolver = Resolver::new(\n-                        sess,\n+                        tcx,\n                         &krate,\n                         crate_name,\n                         self.codegen_backend().metadata_loader(),\n                         &arenas,\n-                        tcx.untracked(),\n                     );\n                     let krate = passes::configure_and_expand(\n                         sess,"}, {"sha": "431a92ecc6996154989b7c776f0fd3c992d89dee", "filename": "compiler/rustc_resolve/src/diagnostics.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4953d70e2fb5f023682cbc7c9e4aa0c5c8619664/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4953d70e2fb5f023682cbc7c9e4aa0c5c8619664/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs?ref=4953d70e2fb5f023682cbc7c9e4aa0c5c8619664", "patch": "@@ -155,7 +155,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n             if !candidates.is_empty() {\n                 show_candidates(\n                     &self.tcx.sess,\n-                    &self.untracked.source_span.read(),\n+                    &self.tcx.untracked().source_span.read(),\n                     &mut err,\n                     span,\n                     &candidates,\n@@ -688,7 +688,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                     }\n                     show_candidates(\n                         &self.tcx.sess,\n-                        &self.untracked.source_span.read(),\n+                        &self.tcx.untracked().source_span.read(),\n                         &mut err,\n                         Some(span),\n                         &import_suggestions,\n@@ -1353,7 +1353,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n             self.lookup_import_candidates(ident, Namespace::MacroNS, parent_scope, is_expected);\n         show_candidates(\n             &self.tcx.sess,\n-            &self.untracked.source_span.read(),\n+            &self.tcx.untracked().source_span.read(),\n             err,\n             None,\n             &import_suggestions,"}, {"sha": "945758878a5b8af1927576d0ab4b56549753a2ad", "filename": "compiler/rustc_resolve/src/effective_visibilities.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4953d70e2fb5f023682cbc7c9e4aa0c5c8619664/compiler%2Frustc_resolve%2Fsrc%2Feffective_visibilities.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4953d70e2fb5f023682cbc7c9e4aa0c5c8619664/compiler%2Frustc_resolve%2Fsrc%2Feffective_visibilities.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Feffective_visibilities.rs?ref=4953d70e2fb5f023682cbc7c9e4aa0c5c8619664", "patch": "@@ -110,7 +110,7 @@ impl<'r, 'a, 'tcx> EffectiveVisibilitiesVisitor<'r, 'a, 'tcx> {\n                 r.effective_visibilities.update_eff_vis(\n                     r.local_def_id(node_id),\n                     eff_vis,\n-                    ResolverTree(&r.untracked),\n+                    ResolverTree(&r.tcx.untracked()),\n                 )\n             }\n         }"}, {"sha": "56a64dab80e41bcf95a3fcbbb5a894a7587e4f95", "filename": "compiler/rustc_resolve/src/imports.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4953d70e2fb5f023682cbc7c9e4aa0c5c8619664/compiler%2Frustc_resolve%2Fsrc%2Fimports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4953d70e2fb5f023682cbc7c9e4aa0c5c8619664/compiler%2Frustc_resolve%2Fsrc%2Fimports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fimports.rs?ref=4953d70e2fb5f023682cbc7c9e4aa0c5c8619664", "patch": "@@ -549,7 +549,7 @@ impl<'a, 'b, 'tcx> ImportResolver<'a, 'b, 'tcx> {\n                 match &import.kind {\n                     ImportKind::Single { nested: false, source, target, .. } => import_candidates(\n                         self.r.tcx.sess,\n-                        &self.r.untracked.source_span.read(),\n+                        &self.r.tcx.untracked().source_span.read(),\n                         &mut diag,\n                         Some(err.span),\n                         &candidates,\n@@ -562,7 +562,7 @@ impl<'a, 'b, 'tcx> ImportResolver<'a, 'b, 'tcx> {\n                     ImportKind::Single { nested: true, source, target, .. } => {\n                         import_candidates(\n                             self.r.tcx.sess,\n-                            &self.r.untracked.source_span.read(),\n+                            &self.r.tcx.untracked().source_span.read(),\n                             &mut diag,\n                             None,\n                             &candidates,"}, {"sha": "dc055355e160db492ddb3e379bc5188899e86fc5", "filename": "compiler/rustc_resolve/src/lib.rs", "status": "modified", "additions": 25, "deletions": 33, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/4953d70e2fb5f023682cbc7c9e4aa0c5c8619664/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4953d70e2fb5f023682cbc7c9e4aa0c5c8619664/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flib.rs?ref=4953d70e2fb5f023682cbc7c9e4aa0c5c8619664", "patch": "@@ -27,7 +27,7 @@ use rustc_ast::{self as ast, NodeId, CRATE_NODE_ID};\n use rustc_ast::{AngleBracketedArg, Crate, Expr, ExprKind, GenericArg, GenericArgs, LitKind, Path};\n use rustc_data_structures::fx::{FxHashMap, FxHashSet, FxIndexMap, FxIndexSet};\n use rustc_data_structures::intern::Interned;\n-use rustc_data_structures::sync::{Lrc, MappedReadGuard, ReadGuard};\n+use rustc_data_structures::sync::{Lrc, MappedReadGuard};\n use rustc_errors::{Applicability, DiagnosticBuilder, ErrorGuaranteed};\n use rustc_expand::base::{DeriveResolutions, SyntaxExtension, SyntaxExtensionKind};\n use rustc_hir::def::Namespace::{self, *};\n@@ -41,12 +41,11 @@ use rustc_metadata::creader::{CStore, CrateLoader};\n use rustc_middle::metadata::ModChild;\n use rustc_middle::middle::privacy::EffectiveVisibilities;\n use rustc_middle::span_bug;\n-use rustc_middle::ty::{self, DefIdTree, MainDefinition, RegisteredTools};\n+use rustc_middle::ty::{self, DefIdTree, MainDefinition, RegisteredTools, TyCtxt};\n use rustc_middle::ty::{ResolverGlobalCtxt, ResolverOutputs};\n use rustc_query_system::ich::StableHashingContext;\n use rustc_session::cstore::{CrateStore, MetadataLoaderDyn, Untracked};\n use rustc_session::lint::LintBuffer;\n-use rustc_session::Session;\n use rustc_span::hygiene::{ExpnId, LocalExpnId, MacroKind, SyntaxContext, Transparency};\n use rustc_span::source_map::Spanned;\n use rustc_span::symbol::{kw, sym, Ident, Symbol};\n@@ -861,10 +860,6 @@ struct MacroData {\n     macro_rules: bool,\n }\n \n-struct TyCtxt<'tcx> {\n-    sess: &'tcx Session,\n-}\n-\n /// The main resolver class.\n ///\n /// This is the visitor that walks the whole crate.\n@@ -962,7 +957,6 @@ pub struct Resolver<'a, 'tcx> {\n \n     local_crate_name: Symbol,\n     metadata_loader: Box<MetadataLoaderDyn>,\n-    untracked: &'tcx Untracked,\n     used_extern_options: FxHashSet<Symbol>,\n     macro_names: FxHashSet<Ident>,\n     builtin_macros: FxHashMap<Symbol, BuiltinMacroState>,\n@@ -1141,7 +1135,7 @@ impl DefIdTree for ResolverTree<'_> {\n impl<'a, 'b, 'tcx> DefIdTree for &'a Resolver<'b, 'tcx> {\n     #[inline]\n     fn opt_parent(self, id: DefId) -> Option<DefId> {\n-        ResolverTree(&self.untracked).opt_parent(id)\n+        ResolverTree(&self.tcx.untracked()).opt_parent(id)\n     }\n }\n \n@@ -1168,10 +1162,11 @@ impl<'tcx> Resolver<'_, 'tcx> {\n             \"adding a def'n for node-id {:?} and data {:?} but a previous def'n exists: {:?}\",\n             node_id,\n             data,\n-            self.untracked.definitions.read().def_key(self.node_id_to_def_id[&node_id]),\n+            self.tcx.definitions_untracked().def_key(self.node_id_to_def_id[&node_id]),\n         );\n \n-        let def_id = self.untracked.definitions.write().create_def(parent, data);\n+        // FIXME: remove `def_span` body, pass in the right spans here and call `tcx.at().create_def()`\n+        let def_id = self.tcx.untracked().definitions.write().create_def(parent, data);\n \n         // Create the definition.\n         if expn_id != ExpnId::root() {\n@@ -1180,7 +1175,7 @@ impl<'tcx> Resolver<'_, 'tcx> {\n \n         // A relative span's parent must be an absolute span.\n         debug_assert_eq!(span.data_untracked().parent, None);\n-        let _id = self.untracked.source_span.write().push(span);\n+        let _id = self.tcx.untracked().source_span.write().push(span);\n         debug_assert_eq!(_id, def_id);\n \n         // Some things for which we allocate `LocalDefId`s don't correspond to\n@@ -1206,23 +1201,20 @@ impl<'tcx> Resolver<'_, 'tcx> {\n \n impl<'a, 'tcx> Resolver<'a, 'tcx> {\n     pub fn new(\n-        session: &'tcx Session,\n+        tcx: TyCtxt<'tcx>,\n         krate: &Crate,\n         crate_name: Symbol,\n         metadata_loader: Box<MetadataLoaderDyn>,\n         arenas: &'a ResolverArenas<'a>,\n-        untracked: &'tcx Untracked,\n     ) -> Resolver<'a, 'tcx> {\n-        let tcx = TyCtxt { sess: session };\n-\n         let root_def_id = CRATE_DEF_ID.to_def_id();\n         let mut module_map = FxHashMap::default();\n         let graph_root = arenas.new_module(\n             None,\n             ModuleKind::Def(DefKind::Mod, root_def_id, kw::Empty),\n             ExpnId::root(),\n             krate.spans.inner_span,\n-            session.contains_name(&krate.attrs, sym::no_implicit_prelude),\n+            tcx.sess.contains_name(&krate.attrs, sym::no_implicit_prelude),\n             &mut module_map,\n         );\n         let empty_module = arenas.new_module(\n@@ -1245,24 +1237,25 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n         let mut invocation_parents = FxHashMap::default();\n         invocation_parents.insert(LocalExpnId::ROOT, (CRATE_DEF_ID, ImplTraitContext::Existential));\n \n-        let mut extern_prelude: FxHashMap<Ident, ExternPreludeEntry<'_>> = session\n+        let mut extern_prelude: FxHashMap<Ident, ExternPreludeEntry<'_>> = tcx\n+            .sess\n             .opts\n             .externs\n             .iter()\n             .filter(|(_, entry)| entry.add_prelude)\n             .map(|(name, _)| (Ident::from_str(name), Default::default()))\n             .collect();\n \n-        if !session.contains_name(&krate.attrs, sym::no_core) {\n+        if !tcx.sess.contains_name(&krate.attrs, sym::no_core) {\n             extern_prelude.insert(Ident::with_dummy_span(sym::core), Default::default());\n-            if !session.contains_name(&krate.attrs, sym::no_std) {\n+            if !tcx.sess.contains_name(&krate.attrs, sym::no_std) {\n                 extern_prelude.insert(Ident::with_dummy_span(sym::std), Default::default());\n             }\n         }\n \n-        let registered_tools = macros::registered_tools(session, &krate.attrs);\n+        let registered_tools = macros::registered_tools(tcx.sess, &krate.attrs);\n \n-        let features = session.features_untracked();\n+        let features = tcx.sess.features_untracked();\n \n         let mut resolver = Resolver {\n             tcx,\n@@ -1322,16 +1315,15 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n             metadata_loader,\n             local_crate_name: crate_name,\n             used_extern_options: Default::default(),\n-            untracked,\n             macro_names: FxHashSet::default(),\n             builtin_macros: Default::default(),\n             builtin_macro_kinds: Default::default(),\n             registered_tools,\n             macro_use_prelude: FxHashMap::default(),\n             macro_map: FxHashMap::default(),\n-            dummy_ext_bang: Lrc::new(SyntaxExtension::dummy_bang(session.edition())),\n-            dummy_ext_derive: Lrc::new(SyntaxExtension::dummy_derive(session.edition())),\n-            non_macro_attr: Lrc::new(SyntaxExtension::non_macro_attr(session.edition())),\n+            dummy_ext_bang: Lrc::new(SyntaxExtension::dummy_bang(tcx.sess.edition())),\n+            dummy_ext_derive: Lrc::new(SyntaxExtension::dummy_derive(tcx.sess.edition())),\n+            non_macro_attr: Lrc::new(SyntaxExtension::non_macro_attr(tcx.sess.edition())),\n             invocation_parent_scopes: Default::default(),\n             output_macro_rules_scopes: Default::default(),\n             macro_rules_scopes: Default::default(),\n@@ -1469,22 +1461,22 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n     }\n \n     fn create_stable_hashing_context(&self) -> StableHashingContext<'_> {\n-        StableHashingContext::new(self.tcx.sess, self.untracked)\n+        StableHashingContext::new(self.tcx.sess, self.tcx.untracked())\n     }\n \n     fn crate_loader<T>(&mut self, f: impl FnOnce(&mut CrateLoader<'_>) -> T) -> T {\n         f(&mut CrateLoader::new(\n             &self.tcx.sess,\n             &*self.metadata_loader,\n             self.local_crate_name,\n-            &mut *self.untracked.cstore.write().untracked_as_any().downcast_mut().unwrap(),\n-            self.untracked.definitions.read(),\n+            &mut *self.tcx.untracked().cstore.write().untracked_as_any().downcast_mut().unwrap(),\n+            self.tcx.definitions_untracked(),\n             &mut self.used_extern_options,\n         ))\n     }\n \n     fn cstore(&self) -> MappedReadGuard<'_, CStore> {\n-        ReadGuard::map(self.untracked.cstore.read(), |r| r.as_any().downcast_ref().unwrap())\n+        CStore::from_tcx(self.tcx)\n     }\n \n     fn dummy_ext(&self, macro_kind: MacroKind) -> Lrc<SyntaxExtension> {\n@@ -1535,7 +1527,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n         });\n \n         // Make sure we don't mutate the cstore from here on.\n-        self.untracked.cstore.leak();\n+        self.tcx.untracked().cstore.leak();\n     }\n \n     fn traits_in_scope(\n@@ -1925,14 +1917,14 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n     /// Retrieves the span of the given `DefId` if `DefId` is in the local crate.\n     #[inline]\n     fn opt_span(&self, def_id: DefId) -> Option<Span> {\n-        def_id.as_local().map(|def_id| self.untracked.source_span.read()[def_id])\n+        def_id.as_local().map(|def_id| self.tcx.source_span(def_id))\n     }\n \n     /// Retrieves the name of the given `DefId`.\n     #[inline]\n     fn opt_name(&self, def_id: DefId) -> Option<Symbol> {\n         let def_key = match def_id.as_local() {\n-            Some(def_id) => self.untracked.definitions.read().def_key(def_id),\n+            Some(def_id) => self.tcx.definitions_untracked().def_key(def_id),\n             None => self.cstore().def_key(def_id),\n         };\n         def_key.get_opt_name()"}]}