{"sha": "094e4260f8b0a1d1cddf235373d2588cefd167b9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA5NGU0MjYwZjhiMGExZDFjZGRmMjM1MzczZDI1ODhjZWZkMTY3Yjk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-08-09T07:17:06Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-08-09T07:17:06Z"}, "message": "auto merge of #8357 : omasanori/rust/cleanup, r=alexcrichton\n\nI feel it's time to eliminate them (and add some testcases.)", "tree": {"sha": "e82c9a44184d9d08df776832e76c9083ae3696da", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e82c9a44184d9d08df776832e76c9083ae3696da"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/094e4260f8b0a1d1cddf235373d2588cefd167b9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/094e4260f8b0a1d1cddf235373d2588cefd167b9", "html_url": "https://github.com/rust-lang/rust/commit/094e4260f8b0a1d1cddf235373d2588cefd167b9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/094e4260f8b0a1d1cddf235373d2588cefd167b9/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a931e04b757a795e3867ea98c81cee731bd54ac1", "url": "https://api.github.com/repos/rust-lang/rust/commits/a931e04b757a795e3867ea98c81cee731bd54ac1", "html_url": "https://github.com/rust-lang/rust/commit/a931e04b757a795e3867ea98c81cee731bd54ac1"}, {"sha": "b4d6ae5bb8959affdb91a6b6791e725f97787344", "url": "https://api.github.com/repos/rust-lang/rust/commits/b4d6ae5bb8959affdb91a6b6791e725f97787344", "html_url": "https://github.com/rust-lang/rust/commit/b4d6ae5bb8959affdb91a6b6791e725f97787344"}], "stats": {"total": 60, "additions": 3, "deletions": 57}, "files": [{"sha": "cf8ceb463b256cdc7782343d5640f909bcdea694", "filename": "src/libextra/time.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/094e4260f8b0a1d1cddf235373d2588cefd167b9/src%2Flibextra%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/094e4260f8b0a1d1cddf235373d2588cefd167b9/src%2Flibextra%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Ftime.rs?ref=094e4260f8b0a1d1cddf235373d2588cefd167b9", "patch": "@@ -57,9 +57,6 @@ impl Ord for Timespec {\n         self.sec < other.sec ||\n             (self.sec == other.sec && self.nsec < other.nsec)\n     }\n-    fn le(&self, other: &Timespec) -> bool { !other.lt(self) }\n-    fn ge(&self, other: &Timespec) -> bool { !self.lt(other) }\n-    fn gt(&self, other: &Timespec) -> bool { !self.le(other) }\n }\n \n /**"}, {"sha": "598e808061839f683c0fac6a3d8ec74afb54b4ac", "filename": "src/libstd/bool.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/094e4260f8b0a1d1cddf235373d2588cefd167b9/src%2Flibstd%2Fbool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/094e4260f8b0a1d1cddf235373d2588cefd167b9/src%2Flibstd%2Fbool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fbool.rs?ref=094e4260f8b0a1d1cddf235373d2588cefd167b9", "patch": "@@ -284,12 +284,6 @@ impl Not<bool> for bool {\n impl Ord for bool {\n     #[inline]\n     fn lt(&self, other: &bool) -> bool { to_bit(*self) < to_bit(*other) }\n-    #[inline]\n-    fn le(&self, other: &bool) -> bool { to_bit(*self) <= to_bit(*other) }\n-    #[inline]\n-    fn gt(&self, other: &bool) -> bool { to_bit(*self) > to_bit(*other) }\n-    #[inline]\n-    fn ge(&self, other: &bool) -> bool { to_bit(*self) >= to_bit(*other) }\n }\n \n #[cfg(not(test))]"}, {"sha": "9c55e22b1f833794a0cd70548de8140c757021d8", "filename": "src/libstd/char.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/094e4260f8b0a1d1cddf235373d2588cefd167b9/src%2Flibstd%2Fchar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/094e4260f8b0a1d1cddf235373d2588cefd167b9/src%2Flibstd%2Fchar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fchar.rs?ref=094e4260f8b0a1d1cddf235373d2588cefd167b9", "patch": "@@ -322,12 +322,6 @@ impl Eq for char {\n impl Ord for char {\n     #[inline]\n     fn lt(&self, other: &char) -> bool { *self < *other }\n-    #[inline]\n-    fn le(&self, other: &char) -> bool { *self <= *other }\n-    #[inline]\n-    fn gt(&self, other: &char) -> bool { *self > *other }\n-    #[inline]\n-    fn ge(&self, other: &char) -> bool { *self >= *other }\n }\n \n #[cfg(not(test))]"}, {"sha": "28d45abb6881f0dc8190c96f5a97865273f031f5", "filename": "src/libstd/cmp.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/094e4260f8b0a1d1cddf235373d2588cefd167b9/src%2Flibstd%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/094e4260f8b0a1d1cddf235373d2588cefd167b9/src%2Flibstd%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcmp.rs?ref=094e4260f8b0a1d1cddf235373d2588cefd167b9", "patch": "@@ -101,12 +101,6 @@ impl TotalOrd for Ordering {\n impl Ord for Ordering {\n     #[inline]\n     fn lt(&self, other: &Ordering) -> bool { (*self as int) < (*other as int) }\n-    #[inline]\n-    fn le(&self, other: &Ordering) -> bool { (*self as int) <= (*other as int) }\n-    #[inline]\n-    fn gt(&self, other: &Ordering) -> bool { (*self as int) > (*other as int) }\n-    #[inline]\n-    fn ge(&self, other: &Ordering) -> bool { (*self as int) >= (*other as int) }\n }\n \n macro_rules! totalord_impl(\n@@ -174,8 +168,11 @@ pub fn lexical_ordering(o1: Ordering, o2: Ordering) -> Ordering {\n #[lang=\"ord\"]\n pub trait Ord {\n     fn lt(&self, other: &Self) -> bool;\n+    #[inline]\n     fn le(&self, other: &Self) -> bool { !other.lt(self) }\n+    #[inline]\n     fn gt(&self, other: &Self) -> bool {  other.lt(self) }\n+    #[inline]\n     fn ge(&self, other: &Self) -> bool { !self.lt(other) }\n }\n "}, {"sha": "3507dc9d2b233543bdf76c6f2cb31f43d2cfd548", "filename": "src/libstd/nil.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/094e4260f8b0a1d1cddf235373d2588cefd167b9/src%2Flibstd%2Fnil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/094e4260f8b0a1d1cddf235373d2588cefd167b9/src%2Flibstd%2Fnil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnil.rs?ref=094e4260f8b0a1d1cddf235373d2588cefd167b9", "patch": "@@ -33,12 +33,6 @@ impl Eq for () {\n impl Ord for () {\n     #[inline]\n     fn lt(&self, _other: &()) -> bool { false }\n-    #[inline]\n-    fn le(&self, _other: &()) -> bool { true }\n-    #[inline]\n-    fn ge(&self, _other: &()) -> bool { true }\n-    #[inline]\n-    fn gt(&self, _other: &()) -> bool { false }\n }\n \n #[cfg(not(test))]"}, {"sha": "41da9a6ccbe481a3a559e588a9bc4de5d642ca55", "filename": "src/libstd/num/int_macros.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/094e4260f8b0a1d1cddf235373d2588cefd167b9/src%2Flibstd%2Fnum%2Fint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/094e4260f8b0a1d1cddf235373d2588cefd167b9/src%2Flibstd%2Fnum%2Fint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fint_macros.rs?ref=094e4260f8b0a1d1cddf235373d2588cefd167b9", "patch": "@@ -130,12 +130,6 @@ impl Num for $T {}\n impl Ord for $T {\n     #[inline]\n     fn lt(&self, other: &$T) -> bool { return (*self) < (*other); }\n-    #[inline]\n-    fn le(&self, other: &$T) -> bool { return (*self) <= (*other); }\n-    #[inline]\n-    fn ge(&self, other: &$T) -> bool { return (*self) >= (*other); }\n-    #[inline]\n-    fn gt(&self, other: &$T) -> bool { return (*self) > (*other); }\n }\n \n #[cfg(not(test))]"}, {"sha": "86b5b4ddfc09f4318f5fd94dc2f9ad859014c5ac", "filename": "src/libstd/num/uint_macros.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/094e4260f8b0a1d1cddf235373d2588cefd167b9/src%2Flibstd%2Fnum%2Fuint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/094e4260f8b0a1d1cddf235373d2588cefd167b9/src%2Flibstd%2Fnum%2Fuint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fuint_macros.rs?ref=094e4260f8b0a1d1cddf235373d2588cefd167b9", "patch": "@@ -131,12 +131,6 @@ impl Num for $T {}\n impl Ord for $T {\n     #[inline]\n     fn lt(&self, other: &$T) -> bool { (*self) < (*other) }\n-    #[inline]\n-    fn le(&self, other: &$T) -> bool { (*self) <= (*other) }\n-    #[inline]\n-    fn ge(&self, other: &$T) -> bool { (*self) >= (*other) }\n-    #[inline]\n-    fn gt(&self, other: &$T) -> bool { (*self) > (*other) }\n }\n \n #[cfg(not(test))]"}, {"sha": "430eb8544f6306f73245f885ff4110796a487f96", "filename": "src/libstd/str.rs", "status": "modified", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/094e4260f8b0a1d1cddf235373d2588cefd167b9/src%2Flibstd%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/094e4260f8b0a1d1cddf235373d2588cefd167b9/src%2Flibstd%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fstr.rs?ref=094e4260f8b0a1d1cddf235373d2588cefd167b9", "patch": "@@ -1050,34 +1050,16 @@ pub mod traits {\n     impl<'self> Ord for &'self str {\n         #[inline]\n         fn lt(&self, other: & &'self str) -> bool { self.cmp(other) == Less }\n-        #[inline]\n-        fn le(&self, other: & &'self str) -> bool { self.cmp(other) != Greater }\n-        #[inline]\n-        fn ge(&self, other: & &'self str) -> bool { self.cmp(other) != Less }\n-        #[inline]\n-        fn gt(&self, other: & &'self str) -> bool { self.cmp(other) == Greater }\n     }\n \n     impl Ord for ~str {\n         #[inline]\n         fn lt(&self, other: &~str) -> bool { self.cmp(other) == Less }\n-        #[inline]\n-        fn le(&self, other: &~str) -> bool { self.cmp(other) != Greater }\n-        #[inline]\n-        fn ge(&self, other: &~str) -> bool { self.cmp(other) != Less }\n-        #[inline]\n-        fn gt(&self, other: &~str) -> bool { self.cmp(other) == Greater }\n     }\n \n     impl Ord for @str {\n         #[inline]\n         fn lt(&self, other: &@str) -> bool { self.cmp(other) == Less }\n-        #[inline]\n-        fn le(&self, other: &@str) -> bool { self.cmp(other) != Greater }\n-        #[inline]\n-        fn ge(&self, other: &@str) -> bool { self.cmp(other) != Less }\n-        #[inline]\n-        fn gt(&self, other: &@str) -> bool { self.cmp(other) == Greater }\n     }\n \n     impl<'self, S: Str> Equiv<S> for &'self str {"}]}