{"sha": "977c44ade09450016d9c95dea245fd4464a509e9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk3N2M0NGFkZTA5NDUwMDE2ZDljOTVkZWEyNDVmZDQ0NjRhNTA5ZTk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-01-26T13:01:00Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-01-26T13:01:00Z"}, "message": "Auto merge of #21401 - kballard:optimize-shrink-to-fit, r=nikomatsakis\n\nDon't reallocate when capacity is already equal to length\r\n\r\n`Vec::shrink_to_fit()` may be called on vectors that are already the\r\ncorrect length. Calling out to `reallocate()` in this case is a bad idea\r\nbecause there is no guarantee that `reallocate()` won't allocate a new\r\nbuffer anyway, and based on performance seen in external benchmarks, it\r\nseems likely that it is in fact reallocating a new buffer.\r\n\r\nBefore:\r\n\r\n    test string::tests::bench_exact_size_shrink_to_fit         ... bench:        45 ns/iter (+/- 2)\r\n\r\nAfter:\r\n\r\n    test string::tests::bench_exact_size_shrink_to_fit         ... bench:        26 ns/iter (+/- 1)", "tree": {"sha": "adea995c7831ebae76bca46e243cbd124f53626b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/adea995c7831ebae76bca46e243cbd124f53626b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/977c44ade09450016d9c95dea245fd4464a509e9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/977c44ade09450016d9c95dea245fd4464a509e9", "html_url": "https://github.com/rust-lang/rust/commit/977c44ade09450016d9c95dea245fd4464a509e9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/977c44ade09450016d9c95dea245fd4464a509e9/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "59dcba5d14e5eada0a5e7eb0cad5efc7acd1d0e3", "url": "https://api.github.com/repos/rust-lang/rust/commits/59dcba5d14e5eada0a5e7eb0cad5efc7acd1d0e3", "html_url": "https://github.com/rust-lang/rust/commit/59dcba5d14e5eada0a5e7eb0cad5efc7acd1d0e3"}, {"sha": "c384ee18fcb55274682e8a9a24608bfc825bedce", "url": "https://api.github.com/repos/rust-lang/rust/commits/c384ee18fcb55274682e8a9a24608bfc825bedce", "html_url": "https://github.com/rust-lang/rust/commit/c384ee18fcb55274682e8a9a24608bfc825bedce"}], "stats": {"total": 18, "additions": 17, "deletions": 1}, "files": [{"sha": "562189370d677b2bdb82cbc336215a542535f98d", "filename": "src/libcollections/string.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/977c44ade09450016d9c95dea245fd4464a509e9/src%2Flibcollections%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/977c44ade09450016d9c95dea245fd4464a509e9/src%2Flibcollections%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstring.rs?ref=977c44ade09450016d9c95dea245fd4464a509e9", "patch": "@@ -1413,4 +1413,20 @@ mod tests {\n             let _ = String::from_utf8_lossy(s.as_slice());\n         });\n     }\n+\n+    #[bench]\n+    fn bench_exact_size_shrink_to_fit(b: &mut Bencher) {\n+        let s = \"Hello there, the quick brown fox jumped over the lazy dog! \\\n+                 Lorem ipsum dolor sit amet, consectetur. \";\n+        // ensure our operation produces an exact-size string before we benchmark it\n+        let mut r = String::with_capacity(s.len());\n+        r.push_str(s);\n+        assert_eq!(r.len(), r.capacity());\n+        b.iter(|| {\n+            let mut r = String::with_capacity(s.len());\n+            r.push_str(s);\n+            r.shrink_to_fit();\n+            r\n+        });\n+    }\n }"}, {"sha": "0de9b5733fb4474f41096c19f772aafc81b33e37", "filename": "src/libcollections/vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/977c44ade09450016d9c95dea245fd4464a509e9/src%2Flibcollections%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/977c44ade09450016d9c95dea245fd4464a509e9/src%2Flibcollections%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec.rs?ref=977c44ade09450016d9c95dea245fd4464a509e9", "patch": "@@ -356,7 +356,7 @@ impl<T> Vec<T> {\n                 }\n                 self.cap = 0;\n             }\n-        } else {\n+        } else if self.cap != self.len {\n             unsafe {\n                 // Overflow check is unnecessary as the vector is already at\n                 // least this large."}]}