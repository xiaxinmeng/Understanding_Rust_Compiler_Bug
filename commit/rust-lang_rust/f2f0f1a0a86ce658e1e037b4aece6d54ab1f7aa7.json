{"sha": "f2f0f1a0a86ce658e1e037b4aece6d54ab1f7aa7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYyZjBmMWEwYTg2Y2U2NThlMWUwMzdiNGFlY2U2ZDU0YWIxZjdhYTc=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-10-24T19:59:42Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-10-29T08:16:27Z"}, "message": "fix nits", "tree": {"sha": "6bceaf874ceb4bc372764acb98100ef9ff66a88f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6bceaf874ceb4bc372764acb98100ef9ff66a88f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f2f0f1a0a86ce658e1e037b4aece6d54ab1f7aa7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f2f0f1a0a86ce658e1e037b4aece6d54ab1f7aa7", "html_url": "https://github.com/rust-lang/rust/commit/f2f0f1a0a86ce658e1e037b4aece6d54ab1f7aa7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f2f0f1a0a86ce658e1e037b4aece6d54ab1f7aa7/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c5abbd4be360cb433a84d86aa6d7cc6e63258a3b", "url": "https://api.github.com/repos/rust-lang/rust/commits/c5abbd4be360cb433a84d86aa6d7cc6e63258a3b", "html_url": "https://github.com/rust-lang/rust/commit/c5abbd4be360cb433a84d86aa6d7cc6e63258a3b"}], "stats": {"total": 21, "additions": 15, "deletions": 6}, "files": [{"sha": "636fe115746fb83d36564ff7cc0cf4d5cc55a26e", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f2f0f1a0a86ce658e1e037b4aece6d54ab1f7aa7/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2f0f1a0a86ce658e1e037b4aece6d54ab1f7aa7/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=f2f0f1a0a86ce658e1e037b4aece6d54ab1f7aa7", "patch": "@@ -1755,12 +1755,16 @@ pub enum StatementKind<'tcx> {\n     },\n \n     /// Retag references in the given place, ensuring they got fresh tags.  This is\n-    /// part of the Stacked Borrows model. `fn_entry` indicates whether this\n-    /// is the initial retag that happens in the function prolog. These statements are\n-    /// currently only interpreted by miri and only generated when \"-Z mir-emit-retag\" is passed.\n+    /// part of the Stacked Borrows model. These statements are currently only interpreted\n+    /// by miri and only generated when \"-Z mir-emit-retag\" is passed.\n     /// See <https://internals.rust-lang.org/t/stacked-borrows-an-aliasing-model-for-rust/8153/>\n     /// for more details.\n-    Retag { fn_entry: bool, place: Place<'tcx> },\n+    Retag {\n+        /// `fn_entry` indicates whether this is the initial retag that happens in the\n+        /// function prolog.\n+        fn_entry: bool,\n+        place: Place<'tcx>,\n+    },\n \n     /// Mark one terminating point of a region scope (i.e. static region).\n     /// (The starting point(s) arise implicitly from borrows.)"}, {"sha": "a50011cf5a15e5c2c7a09db8de326078d9a33abe", "filename": "src/librustc_mir/transform/add_retag.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f2f0f1a0a86ce658e1e037b4aece6d54ab1f7aa7/src%2Flibrustc_mir%2Ftransform%2Fadd_retag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2f0f1a0a86ce658e1e037b4aece6d54ab1f7aa7/src%2Flibrustc_mir%2Ftransform%2Fadd_retag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fadd_retag.rs?ref=f2f0f1a0a86ce658e1e037b4aece6d54ab1f7aa7", "patch": "@@ -42,7 +42,12 @@ fn is_local<'tcx>(\n                     // (a local storing the array index, the current value of\n                     // the projection base), so we stop tracking here.\n                     false,\n-                _ => is_local(&proj.base),\n+                ProjectionElem::Field { .. } |\n+                ProjectionElem::ConstantIndex { .. } |\n+                ProjectionElem::Subslice { .. } |\n+                ProjectionElem::Downcast { .. } =>\n+                    // These just offset by a constant, entirely independent of everything else.\n+                    is_local(&proj.base),\n             }\n         }\n     }\n@@ -121,7 +126,7 @@ impl MirPass for AddRetag {\n                 Some(Terminator { kind: TerminatorKind::Call { ref destination, .. },\n                                   source_info }) => {\n                     // Remember the return destination for later\n-                    if let &Some(ref destination) = destination {\n+                    if let Some(ref destination) = destination {\n                         if needs_retag(&destination.0) {\n                             returns.push((source_info, destination.0.clone(), destination.1));\n                         }"}]}