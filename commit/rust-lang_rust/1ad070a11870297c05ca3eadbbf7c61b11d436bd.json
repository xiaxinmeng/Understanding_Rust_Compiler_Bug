{"sha": "1ad070a11870297c05ca3eadbbf7c61b11d436bd", "node_id": "C_kwDOAAsO6NoAKDFhZDA3MGExMTg3MDI5N2MwNWNhM2VhZGJiZjdjNjFiMTFkNDM2YmQ", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-12-16T13:02:19Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-12-16T13:02:19Z"}, "message": "Rollup merge of #105748 - hakoerber:master, r=Dylan-DPC\n\ndoc: Fix a few small issues\n\nHey, while reading through the (awesome) stdlib docs, I found a few minor typos.\n\n* A few typos around generic types (`;` vs `,`)\n* Use inline code formatting for code fragments\n* One instance of wrong wording", "tree": {"sha": "3f289a018d589bdd250d33cc7ccd06e9063c5402", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3f289a018d589bdd250d33cc7ccd06e9063c5402"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1ad070a11870297c05ca3eadbbf7c61b11d436bd", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjnGxbCRBK7hj4Ov3rIwAA+bcIACl+/dqeB8RYFl9Jk5Fk/bhs\nNOw9N3Ff0qq3SE8c5pbdu2qs+nVvivIvontn8IQQN4eyt8bQ6D4glEnXmctlV5BP\nMZoq4SFKvql6YQ3g/RoAEWaogtSgtoz62g1lYcTp0zgHwFBTsvNQd5h1Iem8LOGm\n3NIyzbXq8ogdWMsvs0OCla+zCLRXxJ1NFSDUqNkWkSlvV5nrYrXaYHCTGPMeQlx7\nYTcXvNnYlJepgP0+63SlCSiyqTbqzNh35H+mW2qSlAlIqgqrN2AGYZHQGRtcFLWt\nJ3m//RLmyDA5JWJWi/UfZSgqLavJOGXSB5H1bKp4HfzDKN/cpT4TMapwZSSa/c8=\n=MAKB\n-----END PGP SIGNATURE-----\n", "payload": "tree 3f289a018d589bdd250d33cc7ccd06e9063c5402\nparent cc04e97cfbc3946a5b4a28ba07f47438e34ea99a\nparent 9671dd239d37cf6001eaea1f85f9f81200b8ade6\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1671195739 +0100\ncommitter GitHub <noreply@github.com> 1671195739 +0100\n\nRollup merge of #105748 - hakoerber:master, r=Dylan-DPC\n\ndoc: Fix a few small issues\n\nHey, while reading through the (awesome) stdlib docs, I found a few minor typos.\n\n* A few typos around generic types (`;` vs `,`)\n* Use inline code formatting for code fragments\n* One instance of wrong wording\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1ad070a11870297c05ca3eadbbf7c61b11d436bd", "html_url": "https://github.com/rust-lang/rust/commit/1ad070a11870297c05ca3eadbbf7c61b11d436bd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1ad070a11870297c05ca3eadbbf7c61b11d436bd/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cc04e97cfbc3946a5b4a28ba07f47438e34ea99a", "url": "https://api.github.com/repos/rust-lang/rust/commits/cc04e97cfbc3946a5b4a28ba07f47438e34ea99a", "html_url": "https://github.com/rust-lang/rust/commit/cc04e97cfbc3946a5b4a28ba07f47438e34ea99a"}, {"sha": "9671dd239d37cf6001eaea1f85f9f81200b8ade6", "url": "https://api.github.com/repos/rust-lang/rust/commits/9671dd239d37cf6001eaea1f85f9f81200b8ade6", "html_url": "https://github.com/rust-lang/rust/commit/9671dd239d37cf6001eaea1f85f9f81200b8ade6"}], "stats": {"total": 10, "additions": 5, "deletions": 5}, "files": [{"sha": "be615b70ced9cfffd9f0ffd2c61752a61410538a", "filename": "library/alloc/src/collections/vec_deque/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1ad070a11870297c05ca3eadbbf7c61b11d436bd/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ad070a11870297c05ca3eadbbf7c61b11d436bd/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fmod.rs?ref=1ad070a11870297c05ca3eadbbf7c61b11d436bd", "patch": "@@ -2541,7 +2541,7 @@ impl<T, A: Allocator> VecDeque<T, A> {\n     /// The deque is assumed to be partitioned according to the given predicate.\n     /// This means that all elements for which the predicate returns true are at the start of the deque\n     /// and all elements for which the predicate returns false are at the end.\n-    /// For example, [7, 15, 3, 5, 4, 12, 6] is a partitioned under the predicate x % 2 != 0\n+    /// For example, `[7, 15, 3, 5, 4, 12, 6]` is partitioned under the predicate `x % 2 != 0`\n     /// (all odd numbers are at the start, all even at the end).\n     ///\n     /// If the deque is not partitioned, the returned result is unspecified and meaningless,"}, {"sha": "2825e0bbb438593a9217c8a490fd6161f5f2bcd0", "filename": "library/core/src/array/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1ad070a11870297c05ca3eadbbf7c61b11d436bd/library%2Fcore%2Fsrc%2Farray%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ad070a11870297c05ca3eadbbf7c61b11d436bd/library%2Fcore%2Fsrc%2Farray%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Farray%2Fmod.rs?ref=1ad070a11870297c05ca3eadbbf7c61b11d436bd", "patch": "@@ -69,7 +69,7 @@ where\n /// if any element creation was unsuccessful.\n ///\n /// The return type of this function depends on the return type of the closure.\n-/// If you return `Result<T, E>` from the closure, you'll get a `Result<[T; N]; E>`.\n+/// If you return `Result<T, E>` from the closure, you'll get a `Result<[T; N], E>`.\n /// If you return `Option<T>` from the closure, you'll get an `Option<[T; N]>`.\n ///\n /// # Arguments\n@@ -522,7 +522,7 @@ impl<T, const N: usize> [T; N] {\n     /// return an array the same size as `self` or the first error encountered.\n     ///\n     /// The return type of this function depends on the return type of the closure.\n-    /// If you return `Result<T, E>` from the closure, you'll get a `Result<[T; N]; E>`.\n+    /// If you return `Result<T, E>` from the closure, you'll get a `Result<[T; N], E>`.\n     /// If you return `Option<T>` from the closure, you'll get an `Option<[T; N]>`.\n     ///\n     /// # Examples"}, {"sha": "bac836292f8fa836c163823280463423b12b6700", "filename": "library/core/src/iter/traits/iterator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1ad070a11870297c05ca3eadbbf7c61b11d436bd/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ad070a11870297c05ca3eadbbf7c61b11d436bd/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs?ref=1ad070a11870297c05ca3eadbbf7c61b11d436bd", "patch": "@@ -2734,7 +2734,7 @@ pub trait Iterator {\n     /// the first true result or the first error.\n     ///\n     /// The return type of this method depends on the return type of the closure.\n-    /// If you return `Result<bool, E>` from the closure, you'll get a `Result<Option<Self::Item>; E>`.\n+    /// If you return `Result<bool, E>` from the closure, you'll get a `Result<Option<Self::Item>, E>`.\n     /// If you return `Option<bool>` from the closure, you'll get an `Option<Option<Self::Item>>`.\n     ///\n     /// # Examples"}, {"sha": "8bd2ed45c0a2aa02d19e072415e8c21a9f162f42", "filename": "library/core/src/slice/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1ad070a11870297c05ca3eadbbf7c61b11d436bd/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ad070a11870297c05ca3eadbbf7c61b11d436bd/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs?ref=1ad070a11870297c05ca3eadbbf7c61b11d436bd", "patch": "@@ -3795,7 +3795,7 @@ impl<T> [T] {\n     /// The slice is assumed to be partitioned according to the given predicate.\n     /// This means that all elements for which the predicate returns true are at the start of the slice\n     /// and all elements for which the predicate returns false are at the end.\n-    /// For example, [7, 15, 3, 5, 4, 12, 6] is a partitioned under the predicate x % 2 != 0\n+    /// For example, `[7, 15, 3, 5, 4, 12, 6]` is partitioned under the predicate `x % 2 != 0`\n     /// (all odd numbers are at the start, all even at the end).\n     ///\n     /// If this slice is not partitioned, the returned result is unspecified and meaningless,"}]}