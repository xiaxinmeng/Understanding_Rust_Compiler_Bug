{"sha": "739babc39188c93eda82ce16a24680bbf2463fa1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjczOWJhYmMzOTE4OGM5M2VkYTgyY2UxNmEyNDY4MGJiZjI0NjNmYTE=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-11-04T20:02:35Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-11-04T20:02:35Z"}, "message": "Move Namespace enum closer to usage", "tree": {"sha": "e70984d904f5ce4d6a9719060c6ee7a46fe14637", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e70984d904f5ce4d6a9719060c6ee7a46fe14637"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/739babc39188c93eda82ce16a24680bbf2463fa1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/739babc39188c93eda82ce16a24680bbf2463fa1", "html_url": "https://github.com/rust-lang/rust/commit/739babc39188c93eda82ce16a24680bbf2463fa1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/739babc39188c93eda82ce16a24680bbf2463fa1/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "50364bd47815f4f9174d46ae33f44f7f56545b2d", "url": "https://api.github.com/repos/rust-lang/rust/commits/50364bd47815f4f9174d46ae33f44f7f56545b2d", "html_url": "https://github.com/rust-lang/rust/commit/50364bd47815f4f9174d46ae33f44f7f56545b2d"}], "stats": {"total": 55, "additions": 29, "deletions": 26}, "files": [{"sha": "4e273d9e407fd822a9829638d45c1a4364930fd4", "filename": "crates/ra_hir/src/code_model.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/739babc39188c93eda82ce16a24680bbf2463fa1/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/739babc39188c93eda82ce16a24680bbf2463fa1/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model.rs?ref=739babc39188c93eda82ce16a24680bbf2463fa1", "patch": "@@ -30,8 +30,8 @@ use crate::{\n     impl_block::ImplBlock,\n     resolve::{Resolver, Scope, TypeNs},\n     traits::TraitData,\n-    ty::{InferenceResult, TraitRef},\n-    Either, HasSource, Name, ScopeDef, Ty, {ImportId, Namespace},\n+    ty::{InferenceResult, Namespace, TraitRef},\n+    Either, HasSource, ImportId, Name, ScopeDef, Ty,\n };\n \n /// hir::Crate describes a single crate. It's the main interface with which"}, {"sha": "11b3f94ae91b97acb60a79d09584a1867032407e", "filename": "crates/ra_hir/src/db.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/739babc39188c93eda82ce16a24680bbf2463fa1/crates%2Fra_hir%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/739babc39188c93eda82ce16a24680bbf2463fa1/crates%2Fra_hir%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fdb.rs?ref=739babc39188c93eda82ce16a24680bbf2463fa1", "patch": "@@ -14,10 +14,10 @@ use crate::{\n     traits::TraitData,\n     ty::{\n         method_resolution::CrateImplBlocks, traits::Impl, CallableDef, FnSig, GenericPredicate,\n-        InferenceResult, Substs, Ty, TypableDef, TypeCtor,\n+        InferenceResult, Namespace, Substs, Ty, TypableDef, TypeCtor,\n     },\n     type_alias::TypeAliasData,\n-    Const, ConstData, Crate, DefWithBody, ExprScopes, FnData, Function, Module, Namespace, Static,\n+    Const, ConstData, Crate, DefWithBody, ExprScopes, FnData, Function, Module, Static,\n     StructField, Trait, TypeAlias,\n };\n "}, {"sha": "5f2a05e76ff98ff47c1548b70118503d1088e015", "filename": "crates/ra_hir/src/lib.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/739babc39188c93eda82ce16a24680bbf2463fa1/crates%2Fra_hir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/739babc39188c93eda82ce16a24680bbf2463fa1/crates%2Fra_hir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Flib.rs?ref=739babc39188c93eda82ce16a24680bbf2463fa1", "patch": "@@ -81,10 +81,7 @@ pub use crate::{\n \n pub use hir_def::{\n     builtin_type::BuiltinType,\n-    nameres::{\n-        per_ns::{Namespace, PerNs},\n-        raw::ImportId,\n-    },\n+    nameres::{per_ns::PerNs, raw::ImportId},\n     path::{Path, PathKind},\n     type_ref::Mutability,\n };"}, {"sha": "cd2ac0e8bd388fe9013b943db7da9f87f66dbb0a", "filename": "crates/ra_hir/src/ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/739babc39188c93eda82ce16a24680bbf2463fa1/crates%2Fra_hir%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/739babc39188c93eda82ce16a24680bbf2463fa1/crates%2Fra_hir%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty.rs?ref=739babc39188c93eda82ce16a24680bbf2463fa1", "patch": "@@ -27,7 +27,7 @@ pub(crate) use infer::{infer_query, InferTy, InferenceResult};\n pub use lower::CallableDef;\n pub(crate) use lower::{\n     callable_item_sig, generic_defaults_query, generic_predicates_for_param_query,\n-    generic_predicates_query, type_for_def, type_for_field, TypableDef,\n+    generic_predicates_query, type_for_def, type_for_field, Namespace, TypableDef,\n };\n pub(crate) use traits::{InEnvironment, Obligation, ProjectionPredicate, TraitEnvironment};\n "}, {"sha": "4af1d65ee445468d9c9a0b9e6f07b23b0c774eee", "filename": "crates/ra_hir/src/ty/infer/expr.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/739babc39188c93eda82ce16a24680bbf2463fa1/crates%2Fra_hir%2Fsrc%2Fty%2Finfer%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/739babc39188c93eda82ce16a24680bbf2463fa1/crates%2Fra_hir%2Fsrc%2Fty%2Finfer%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Finfer%2Fexpr.rs?ref=739babc39188c93eda82ce16a24680bbf2463fa1", "patch": "@@ -12,10 +12,10 @@ use crate::{\n     expr::{self, Array, BinaryOp, Expr, ExprId, Literal, Statement, UnaryOp},\n     generics::{GenericParams, HasGenericParams},\n     ty::{\n-        autoderef, method_resolution, op, primitive, CallableDef, InferTy, Mutability, Obligation,\n-        ProjectionPredicate, ProjectionTy, Substs, TraitRef, Ty, TypeCtor, TypeWalk,\n+        autoderef, method_resolution, op, primitive, CallableDef, InferTy, Mutability, Namespace,\n+        Obligation, ProjectionPredicate, ProjectionTy, Substs, TraitRef, Ty, TypeCtor, TypeWalk,\n     },\n-    Adt, Name, Namespace,\n+    Adt, Name,\n };\n \n impl<'a, D: HirDatabase> InferenceContext<'a, D> {"}, {"sha": "865ced5a13326f5d768c676024dfebc02a30c834", "filename": "crates/ra_hir/src/ty/infer/path.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/739babc39188c93eda82ce16a24680bbf2463fa1/crates%2Fra_hir%2Fsrc%2Fty%2Finfer%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/739babc39188c93eda82ce16a24680bbf2463fa1/crates%2Fra_hir%2Fsrc%2Fty%2Finfer%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Finfer%2Fpath.rs?ref=739babc39188c93eda82ce16a24680bbf2463fa1", "patch": "@@ -6,8 +6,8 @@ use super::{ExprOrPatId, InferenceContext, TraitRef};\n use crate::{\n     db::HirDatabase,\n     resolve::{ResolveValueResult, Resolver, TypeNs, ValueNs},\n-    ty::{method_resolution, Substs, Ty, TypableDef, TypeWalk},\n-    AssocItem, Container, HasGenericParams, Name, Namespace, Path,\n+    ty::{method_resolution, Namespace, Substs, Ty, TypableDef, TypeWalk},\n+    AssocItem, Container, HasGenericParams, Name, Path,\n };\n \n impl<'a, D: HirDatabase> InferenceContext<'a, D> {"}, {"sha": "d26b16cb2f8cd67a90420e1fc58bf8bdb91fbb23", "filename": "crates/ra_hir/src/ty/lower.rs", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/739babc39188c93eda82ce16a24680bbf2463fa1/crates%2Fra_hir%2Fsrc%2Fty%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/739babc39188c93eda82ce16a24680bbf2463fa1/crates%2Fra_hir%2Fsrc%2Fty%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Flower.rs?ref=739babc39188c93eda82ce16a24680bbf2463fa1", "patch": "@@ -29,10 +29,21 @@ use crate::{\n         Adt,\n     },\n     util::make_mut_slice,\n-    Const, Enum, EnumVariant, Function, ModuleDef, Namespace, Path, Static, Struct, StructField,\n-    Trait, TypeAlias, Union,\n+    Const, Enum, EnumVariant, Function, ModuleDef, Path, Static, Struct, StructField, Trait,\n+    TypeAlias, Union,\n };\n \n+// FIXME: this is only really used in `type_for_def`, which contains a bunch of\n+// impossible cases. Perhaps we should recombine `TypeableDef` and `Namespace`\n+// into a `AsTypeDef`, `AsValueDef` enums?\n+#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord, Hash)]\n+pub enum Namespace {\n+    Types,\n+    Values,\n+    // Note that only type inference uses this enum, and it doesn't care about macros.\n+    // Macro,\n+}\n+\n impl Ty {\n     pub(crate) fn from_hir(db: &impl HirDatabase, resolver: &Resolver, type_ref: &TypeRef) -> Self {\n         match type_ref {"}, {"sha": "c694952f3cc1ff49cc3174a5775d31176f88cb88", "filename": "crates/ra_hir/src/ty/traits/chalk.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/739babc39188c93eda82ce16a24680bbf2463fa1/crates%2Fra_hir%2Fsrc%2Fty%2Ftraits%2Fchalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/739babc39188c93eda82ce16a24680bbf2463fa1/crates%2Fra_hir%2Fsrc%2Fty%2Ftraits%2Fchalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Ftraits%2Fchalk.rs?ref=739babc39188c93eda82ce16a24680bbf2463fa1", "patch": "@@ -18,7 +18,10 @@ use crate::{\n     db::HirDatabase,\n     generics::GenericDef,\n     ty::display::HirDisplay,\n-    ty::{ApplicationTy, GenericPredicate, ProjectionTy, Substs, TraitRef, Ty, TypeCtor, TypeWalk},\n+    ty::{\n+        ApplicationTy, GenericPredicate, Namespace, ProjectionTy, Substs, TraitRef, Ty, TypeCtor,\n+        TypeWalk,\n+    },\n     AssocItem, Crate, HasGenericParams, ImplBlock, Trait, TypeAlias,\n };\n \n@@ -652,7 +655,7 @@ fn impl_block_datum(\n         })\n         .filter_map(|t| {\n             let assoc_ty = trait_.associated_type_by_name(db, &t.name(db))?;\n-            let ty = db.type_for_def(t.into(), crate::Namespace::Types).subst(&bound_vars);\n+            let ty = db.type_for_def(t.into(), Namespace::Types).subst(&bound_vars);\n             Some(chalk_rust_ir::AssociatedTyValue {\n                 impl_id,\n                 associated_ty_id: assoc_ty.to_chalk(db),"}, {"sha": "717ed1ef905a4ebfef8d034c17a29f5ffe2c7f70", "filename": "crates/ra_hir_def/src/nameres/per_ns.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/739babc39188c93eda82ce16a24680bbf2463fa1/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fper_ns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/739babc39188c93eda82ce16a24680bbf2463fa1/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fper_ns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fper_ns.rs?ref=739babc39188c93eda82ce16a24680bbf2463fa1", "patch": "@@ -4,14 +4,6 @@ use hir_expand::MacroDefId;\n \n use crate::ModuleDefId;\n \n-#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord, Hash)]\n-pub enum Namespace {\n-    Types,\n-    Values,\n-    // Note that only type inference uses this enum, and it doesn't care about macros.\n-    // Macro,\n-}\n-\n #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]\n pub struct PerNs {\n     pub types: Option<ModuleDefId>,"}]}