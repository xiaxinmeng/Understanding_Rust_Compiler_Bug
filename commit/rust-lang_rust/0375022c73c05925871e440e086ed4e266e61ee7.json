{"sha": "0375022c73c05925871e440e086ed4e266e61ee7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAzNzUwMjJjNzNjMDU5MjU4NzFlNDQwZTA4NmVkNGUyNjZlNjFlZTc=", "commit": {"author": {"name": "Skgland", "email": "bb-github@t-online.de", "date": "2021-02-04T21:49:50Z"}, "committer": {"name": "Skgland", "email": "bb-github@t-online.de", "date": "2021-02-09T12:42:36Z"}, "message": "fix derive(RustcEncodable, RustcDecodable)", "tree": {"sha": "d64baadb2619cbaf078eb619d534f8dd5d3d9ede", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d64baadb2619cbaf078eb619d534f8dd5d3d9ede"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0375022c73c05925871e440e086ed4e266e61ee7", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCAAdFiEExK/X7hjj1qyNARZpO+Gho8vDz5kFAmAigzwACgkQO+Gho8vD\nz5n8gggAnTOfdQTD5YXcce+c3qZ+AKw6z16UcHoASCEYQ/xq/R+vneqgr+Ynj01T\nb3AhShHYAIvZ/QRir1H9LAdvCbgkdhRjIW5v8Zly5q1JGl0Y+DrAiy9Rz6a92uPH\nj7jFcVxhvfGJ6uLQ5VENLocaipNuIVvUN1C58YyflRORLjJjNaVPa2VgVInap0Zj\nefHSS14ueSzPYkIvitYl48i11Dzc3FcplfWd1ppojgxbXHu8/upXxcbDir/y1hfF\ntDah0CeMQgmM26eFCw+LTOE1e7T1K/DJHIvKYhFgLTRbHaDseZyax6o3hgMiFtem\nVddhqjYZZJm4nWzEm7XHIgp9FWkrfA==\n=FupO\n-----END PGP SIGNATURE-----", "payload": "tree d64baadb2619cbaf078eb619d534f8dd5d3d9ede\nparent 091ef95f8eaec353b8dc7934e8b43a0b5133e3c7\nauthor Skgland <bb-github@t-online.de> 1612475390 +0100\ncommitter Skgland <bb-github@t-online.de> 1612874556 +0100\n\nfix derive(RustcEncodable, RustcDecodable)\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0375022c73c05925871e440e086ed4e266e61ee7", "html_url": "https://github.com/rust-lang/rust/commit/0375022c73c05925871e440e086ed4e266e61ee7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0375022c73c05925871e440e086ed4e266e61ee7/comments", "author": {"login": "Skgland", "id": 3877590, "node_id": "MDQ6VXNlcjM4Nzc1OTA=", "avatar_url": "https://avatars.githubusercontent.com/u/3877590?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Skgland", "html_url": "https://github.com/Skgland", "followers_url": "https://api.github.com/users/Skgland/followers", "following_url": "https://api.github.com/users/Skgland/following{/other_user}", "gists_url": "https://api.github.com/users/Skgland/gists{/gist_id}", "starred_url": "https://api.github.com/users/Skgland/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Skgland/subscriptions", "organizations_url": "https://api.github.com/users/Skgland/orgs", "repos_url": "https://api.github.com/users/Skgland/repos", "events_url": "https://api.github.com/users/Skgland/events{/privacy}", "received_events_url": "https://api.github.com/users/Skgland/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Skgland", "id": 3877590, "node_id": "MDQ6VXNlcjM4Nzc1OTA=", "avatar_url": "https://avatars.githubusercontent.com/u/3877590?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Skgland", "html_url": "https://github.com/Skgland", "followers_url": "https://api.github.com/users/Skgland/followers", "following_url": "https://api.github.com/users/Skgland/following{/other_user}", "gists_url": "https://api.github.com/users/Skgland/gists{/gist_id}", "starred_url": "https://api.github.com/users/Skgland/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Skgland/subscriptions", "organizations_url": "https://api.github.com/users/Skgland/orgs", "repos_url": "https://api.github.com/users/Skgland/repos", "events_url": "https://api.github.com/users/Skgland/events{/privacy}", "received_events_url": "https://api.github.com/users/Skgland/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "091ef95f8eaec353b8dc7934e8b43a0b5133e3c7", "url": "https://api.github.com/repos/rust-lang/rust/commits/091ef95f8eaec353b8dc7934e8b43a0b5133e3c7", "html_url": "https://github.com/rust-lang/rust/commit/091ef95f8eaec353b8dc7934e8b43a0b5133e3c7"}], "stats": {"total": 30, "additions": 12, "deletions": 18}, "files": [{"sha": "1d892b20729d5d830d6730c26c3cf5b66f926616", "filename": "compiler/rustc_builtin_macros/src/deriving/decodable.rs", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/0375022c73c05925871e440e086ed4e266e61ee7/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fdecodable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0375022c73c05925871e440e086ed4e266e61ee7/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fdecodable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fdecodable.rs?ref=0375022c73c05925871e440e086ed4e266e61ee7", "patch": "@@ -92,7 +92,7 @@ fn decodable_substructure(\n                 Named(ref fields) => fields.len(),\n             };\n             let fn_read_struct_field_path: Vec<_> =\n-                cx.def_site_path(&[sym::rustc_serialize, sym::Decodable, sym::read_struct_field]);\n+                cx.def_site_path(&[sym::rustc_serialize, sym::Decoder, sym::read_struct_field]);\n \n             let path = cx.path_ident(trait_span, substr.type_ident);\n             let result =\n@@ -113,7 +113,7 @@ fn decodable_substructure(\n                 });\n             let result = cx.expr_ok(trait_span, result);\n             let fn_read_struct_path: Vec<_> =\n-                cx.def_site_path(&[sym::rustc_serialize, sym::Decodable, sym::read_struct]);\n+                cx.def_site_path(&[sym::rustc_serialize, sym::Decoder, sym::read_struct]);\n \n             cx.expr_call_global(\n                 trait_span,\n@@ -132,11 +132,8 @@ fn decodable_substructure(\n             let mut arms = Vec::with_capacity(fields.len() + 1);\n             let mut variants = Vec::with_capacity(fields.len());\n \n-            let fn_read_enum_variant_arg_path: Vec<_> = cx.def_site_path(&[\n-                sym::rustc_serialize,\n-                sym::Decodable,\n-                sym::read_enum_variant_arg,\n-            ]);\n+            let fn_read_enum_variant_arg_path: Vec<_> =\n+                cx.def_site_path(&[sym::rustc_serialize, sym::Decoder, sym::read_enum_variant_arg]);\n \n             for (i, &(ident, v_span, ref parts)) in fields.iter().enumerate() {\n                 variants.push(cx.expr_str(v_span, ident.name));\n@@ -168,14 +165,14 @@ fn decodable_substructure(\n             let variant_vec = cx.expr_vec(trait_span, variants);\n             let variant_vec = cx.expr_addr_of(trait_span, variant_vec);\n             let fn_read_enum_variant_path: Vec<_> =\n-                cx.def_site_path(&[sym::rustc_serialize, sym::Decodable, sym::read_enum_variant]);\n+                cx.def_site_path(&[sym::rustc_serialize, sym::Decoder, sym::read_enum_variant]);\n             let result = cx.expr_call_global(\n                 trait_span,\n                 fn_read_enum_variant_path,\n                 vec![blkdecoder, variant_vec, lambda],\n             );\n             let fn_read_enum_path: Vec<_> =\n-                cx.def_site_path(&[sym::rustc_serialize, sym::Decodable, sym::read_enum]);\n+                cx.def_site_path(&[sym::rustc_serialize, sym::Decoder, sym::read_enum]);\n \n             cx.expr_call_global(\n                 trait_span,"}, {"sha": "01a57bea14e3b0ae4d5af5c3f9cac6cba0cbd7cb", "filename": "compiler/rustc_builtin_macros/src/deriving/encodable.rs", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/0375022c73c05925871e440e086ed4e266e61ee7/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fencodable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0375022c73c05925871e440e086ed4e266e61ee7/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fencodable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fencodable.rs?ref=0375022c73c05925871e440e086ed4e266e61ee7", "patch": "@@ -180,7 +180,7 @@ fn encodable_substructure(\n     match *substr.fields {\n         Struct(_, ref fields) => {\n             let fn_emit_struct_field_path =\n-                cx.def_site_path(&[sym::rustc_serialize, sym::Encodable, sym::emit_struct_field]);\n+                cx.def_site_path(&[sym::rustc_serialize, sym::Encoder, sym::emit_struct_field]);\n             let mut stmts = Vec::new();\n             for (i, &FieldInfo { name, ref self_, span, .. }) in fields.iter().enumerate() {\n                 let name = match name {\n@@ -222,7 +222,7 @@ fn encodable_substructure(\n             };\n \n             let fn_emit_struct_path =\n-                cx.def_site_path(&[sym::rustc_serialize, sym::Encodable, sym::emit_struct]);\n+                cx.def_site_path(&[sym::rustc_serialize, sym::Encoder, sym::emit_struct]);\n \n             cx.expr_call_global(\n                 trait_span,\n@@ -244,11 +244,8 @@ fn encodable_substructure(\n             let me = cx.stmt_let(trait_span, false, blkarg, encoder);\n             let encoder = cx.expr_ident(trait_span, blkarg);\n \n-            let fn_emit_enum_variant_arg_path: Vec<_> = cx.def_site_path(&[\n-                sym::rustc_serialize,\n-                sym::Encodable,\n-                sym::emit_enum_variant_arg,\n-            ]);\n+            let fn_emit_enum_variant_arg_path: Vec<_> =\n+                cx.def_site_path(&[sym::rustc_serialize, sym::Encoder, sym::emit_enum_variant_arg]);\n \n             let mut stmts = Vec::new();\n             if !fields.is_empty() {\n@@ -281,7 +278,7 @@ fn encodable_substructure(\n             let name = cx.expr_str(trait_span, variant.ident.name);\n \n             let fn_emit_enum_variant_path: Vec<_> =\n-                cx.def_site_path(&[sym::rustc_serialize, sym::Encodable, sym::emit_enum_variant]);\n+                cx.def_site_path(&[sym::rustc_serialize, sym::Encoder, sym::emit_enum_variant]);\n \n             let call = cx.expr_call_global(\n                 trait_span,\n@@ -297,7 +294,7 @@ fn encodable_substructure(\n \n             let blk = cx.lambda1(trait_span, call, blkarg);\n             let fn_emit_enum_path: Vec<_> =\n-                cx.def_site_path(&[sym::rustc_serialize, sym::Encodable, sym::emit_enum]);\n+                cx.def_site_path(&[sym::rustc_serialize, sym::Encoder, sym::emit_enum]);\n             let ret = cx.expr_call_global(\n                 trait_span,\n                 fn_emit_enum_path,"}]}