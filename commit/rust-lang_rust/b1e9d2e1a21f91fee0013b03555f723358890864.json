{"sha": "b1e9d2e1a21f91fee0013b03555f723358890864", "node_id": "C_kwDOAAsO6NoAKGIxZTlkMmUxYTIxZjkxZmVlMDAxM2IwMzU1NWY3MjMzNTg4OTA4NjQ", "commit": {"author": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2022-08-23T11:10:44Z"}, "committer": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2022-08-23T11:10:44Z"}, "message": "Revert \"Avoid masking shift amounts (#1268)\"\n\nThis reverts commit 156bda8bc708cca60e9de18743d833c8d97dd7ff.\n\nThis breaks the mir_overflow_off rustc test:\nhttps://github.com/bjorn3/rustc_codegen_cranelift/runs/7971362755?check_suite_focus=true#step:7:2904", "tree": {"sha": "c69baf5cf4ff6d1abef6fbb03918992d24918dce", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c69baf5cf4ff6d1abef6fbb03918992d24918dce"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b1e9d2e1a21f91fee0013b03555f723358890864", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b1e9d2e1a21f91fee0013b03555f723358890864", "html_url": "https://github.com/rust-lang/rust/commit/b1e9d2e1a21f91fee0013b03555f723358890864", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b1e9d2e1a21f91fee0013b03555f723358890864/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "48c45c481c53e615637788e3dad1b7dcb993bdc3", "url": "https://api.github.com/repos/rust-lang/rust/commits/48c45c481c53e615637788e3dad1b7dcb993bdc3", "html_url": "https://github.com/rust-lang/rust/commit/48c45c481c53e615637788e3dad1b7dcb993bdc3"}], "stats": {"total": 25, "additions": 19, "deletions": 6}, "files": [{"sha": "4ce8adb182e0fab68756d06f3fad196f1bf5a770", "filename": "src/num.rs", "status": "modified", "additions": 19, "deletions": 6, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/b1e9d2e1a21f91fee0013b03555f723358890864/src%2Fnum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1e9d2e1a21f91fee0013b03555f723358890864/src%2Fnum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fnum.rs?ref=b1e9d2e1a21f91fee0013b03555f723358890864", "patch": "@@ -150,12 +150,18 @@ pub(crate) fn codegen_int_binop<'tcx>(\n         BinOp::BitXor => b.bxor(lhs, rhs),\n         BinOp::BitAnd => b.band(lhs, rhs),\n         BinOp::BitOr => b.bor(lhs, rhs),\n-        BinOp::Shl => b.ishl(lhs, rhs),\n+        BinOp::Shl => {\n+            let lhs_ty = fx.bcx.func.dfg.value_type(lhs);\n+            let actual_shift = fx.bcx.ins().band_imm(rhs, i64::from(lhs_ty.bits() - 1));\n+            fx.bcx.ins().ishl(lhs, actual_shift)\n+        }\n         BinOp::Shr => {\n+            let lhs_ty = fx.bcx.func.dfg.value_type(lhs);\n+            let actual_shift = fx.bcx.ins().band_imm(rhs, i64::from(lhs_ty.bits() - 1));\n             if signed {\n-                b.sshr(lhs, rhs)\n+                fx.bcx.ins().sshr(lhs, actual_shift)\n             } else {\n-                b.ushr(lhs, rhs)\n+                fx.bcx.ins().ushr(lhs, actual_shift)\n             }\n         }\n         // Compare binops handles by `codegen_binop`.\n@@ -273,15 +279,22 @@ pub(crate) fn codegen_checked_int_binop<'tcx>(\n             }\n         }\n         BinOp::Shl => {\n-            let val = fx.bcx.ins().ishl(lhs, rhs);\n+            let lhs_ty = fx.bcx.func.dfg.value_type(lhs);\n+            let masked_shift = fx.bcx.ins().band_imm(rhs, i64::from(lhs_ty.bits() - 1));\n+            let val = fx.bcx.ins().ishl(lhs, masked_shift);\n             let ty = fx.bcx.func.dfg.value_type(val);\n             let max_shift = i64::from(ty.bits()) - 1;\n             let has_overflow = fx.bcx.ins().icmp_imm(IntCC::UnsignedGreaterThan, rhs, max_shift);\n             (val, has_overflow)\n         }\n         BinOp::Shr => {\n-            let val =\n-                if !signed { fx.bcx.ins().ushr(lhs, rhs) } else { fx.bcx.ins().sshr(lhs, rhs) };\n+            let lhs_ty = fx.bcx.func.dfg.value_type(lhs);\n+            let masked_shift = fx.bcx.ins().band_imm(rhs, i64::from(lhs_ty.bits() - 1));\n+            let val = if !signed {\n+                fx.bcx.ins().ushr(lhs, masked_shift)\n+            } else {\n+                fx.bcx.ins().sshr(lhs, masked_shift)\n+            };\n             let ty = fx.bcx.func.dfg.value_type(val);\n             let max_shift = i64::from(ty.bits()) - 1;\n             let has_overflow = fx.bcx.ins().icmp_imm(IntCC::UnsignedGreaterThan, rhs, max_shift);"}]}