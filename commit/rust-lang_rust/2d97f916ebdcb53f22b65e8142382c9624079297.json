{"sha": "2d97f916ebdcb53f22b65e8142382c9624079297", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJkOTdmOTE2ZWJkY2I1M2YyMmI2NWU4MTQyMzgyYzk2MjQwNzkyOTc=", "commit": {"author": {"name": "llogiq", "email": "bogusandre@gmail.com", "date": "2016-01-25T18:46:56Z"}, "committer": {"name": "llogiq", "email": "bogusandre@gmail.com", "date": "2016-01-25T18:46:56Z"}, "message": "added more test, now works with vecs and iter", "tree": {"sha": "4839ebbcb30a52e54bacac313d2dea513462fcde", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4839ebbcb30a52e54bacac313d2dea513462fcde"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2d97f916ebdcb53f22b65e8142382c9624079297", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2d97f916ebdcb53f22b65e8142382c9624079297", "html_url": "https://github.com/rust-lang/rust/commit/2d97f916ebdcb53f22b65e8142382c9624079297", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2d97f916ebdcb53f22b65e8142382c9624079297/comments", "author": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "committer": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ed96583677a955e4dcd935e35031e434ac9ea5e5", "url": "https://api.github.com/repos/rust-lang/rust/commits/ed96583677a955e4dcd935e35031e434ac9ea5e5", "html_url": "https://github.com/rust-lang/rust/commit/ed96583677a955e4dcd935e35031e434ac9ea5e5"}], "stats": {"total": 23, "additions": 15, "deletions": 8}, "files": [{"sha": "5377dd1bc521d960b1bfed5e3c28ee9be340b375", "filename": "src/methods.rs", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/2d97f916ebdcb53f22b65e8142382c9624079297/src%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d97f916ebdcb53f22b65e8142382c9624079297/src%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmethods.rs?ref=2d97f916ebdcb53f22b65e8142382c9624079297", "patch": "@@ -448,7 +448,7 @@ fn lint_extend(cx: &LateContext, expr: &Expr, args: &MethodArgs) {\n         return; // for your Vecs only\n     }\n     \n-    if derefs_to_slice(&arg_ty) {\n+    if derefs_to_slice(cx, &args[1], &arg_ty) {\n         span_lint(cx, EXTEND_FROM_SLICE, expr.span,\n                   &format!(\"use of `extend` to extend a Vec by a slice\"))\n             .span_suggestion(expr.span, \"try this\",\n@@ -458,13 +458,17 @@ fn lint_extend(cx: &LateContext, expr: &Expr, args: &MethodArgs) {\n     }\n }\n \n-fn derefs_to_slice(ty: &ty::Ty) -> bool {\n+fn derefs_to_slice(cx: &LateContext, expr: &Expr, ty: &ty::Ty) -> bool {\n+    if let ExprMethodCall(name, _, ref args) = expr.node {\n+        return &name.node.as_str() == &\"iter\" && \n+               derefs_to_slice(cx, &args[0], &cx.tcx.expr_ty(&args[0]))\n+    }\n     match ty.sty {\n-        ty::TySlice(_) | \n-        ty::TyStr => true,\n-        ty::TyBox(ref inner) => derefs_to_slice(inner),\n+        ty::TyStruct(..) => match_type(cx, ty, &VEC_PATH),\n+        ty::TySlice(_) => true,\n         ty::TyArray(_, size) => size < 32,\n-        ty::TyRef(_, ty::TypeAndMut { ty: ref t, .. }) => derefs_to_slice(t),\n+        ty::TyRef(_, ty::TypeAndMut { ty: ref inner, .. }) |\n+        ty::TyBox(ref inner) => derefs_to_slice(cx, expr, inner),\n         _ => false\n     }\n }"}, {"sha": "752427847f31f8af20ee9c3fc718f3186c5a31e6", "filename": "tests/compile-fail/methods.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2d97f916ebdcb53f22b65e8142382c9624079297/tests%2Fcompile-fail%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d97f916ebdcb53f22b65e8142382c9624079297/tests%2Fcompile-fail%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fmethods.rs?ref=2d97f916ebdcb53f22b65e8142382c9624079297", "patch": "@@ -308,6 +308,9 @@ fn starts_with() {\n fn use_extend_from_slice() {\n     let mut v : Vec<&'static str> = vec![];\n     v.extend(&[\"Hello\", \"World\"]); //~ERROR use of `extend`\n-    \n-    \n+    v.extend(vec![\"Some\", \"more\"]); //~ERROR use of `extend`\n+    v.extend(vec![\"And\", \"even\", \"more\"].iter()); //~ERROR use of `extend`\n+    let o : Option<&'static str> = None;\n+    v.extend(o);\n+    v.extend(Some(\"Bye\"));\n }"}]}