{"sha": "8ad586a44e2214a11c4e7d27e0d3c2d73e43f39f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhhZDU4NmE0NGUyMjE0YTExYzRlN2QyN2UwZDNjMmQ3M2U0M2YzOWY=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-08-23T19:14:51Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-08-23T19:14:51Z"}, "message": "JoinLines frontend", "tree": {"sha": "70c553dd0231189acf0695b63688f21fb94867dc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/70c553dd0231189acf0695b63688f21fb94867dc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8ad586a44e2214a11c4e7d27e0d3c2d73e43f39f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8ad586a44e2214a11c4e7d27e0d3c2d73e43f39f", "html_url": "https://github.com/rust-lang/rust/commit/8ad586a44e2214a11c4e7d27e0d3c2d73e43f39f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8ad586a44e2214a11c4e7d27e0d3c2d73e43f39f/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "18918769baf49acc4067eabdc0c3a0a98224d23f", "url": "https://api.github.com/repos/rust-lang/rust/commits/18918769baf49acc4067eabdc0c3a0a98224d23f", "html_url": "https://github.com/rust-lang/rust/commit/18918769baf49acc4067eabdc0c3a0a98224d23f"}], "stats": {"total": 61, "additions": 60, "deletions": 1}, "files": [{"sha": "20a6ceee76a898bf20a5034fb9a59d3e8dc8771d", "filename": "code/package.json", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8ad586a44e2214a11c4e7d27e0d3c2d73e43f39f/code%2Fpackage.json", "raw_url": "https://github.com/rust-lang/rust/raw/8ad586a44e2214a11c4e7d27e0d3c2d73e43f39f/code%2Fpackage.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/code%2Fpackage.json?ref=8ad586a44e2214a11c4e7d27e0d3c2d73e43f39f", "patch": "@@ -44,6 +44,10 @@\n       {\n         \"command\": \"libsyntax-rust.parentModule\",\n         \"title\": \"Rust Parent Module\"\n+      },\n+      {\n+        \"command\": \"libsyntax-rust.joinLines\",\n+        \"title\": \"Rust Join Lines\"\n       }\n     ],\n     \"keybindings\": [\n@@ -61,6 +65,11 @@\n         \"command\": \"libsyntax-rust.extendSelection\",\n         \"key\": \"ctrl+w\",\n         \"when\": \"editorTextFocus && editorLangId == rust\"\n+      },\n+      {\n+        \"command\": \"libsyntax-rust.joinLines\",\n+        \"key\": \"ctrl+shift+j\",\n+        \"when\": \"editorTextFocus && editorLangId == rust\"\n       }\n     ],\n     \"problemMatchers\": ["}, {"sha": "134459f3047b7a797c6f43d03f581ec13a723b4a", "filename": "code/src/extension.ts", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/8ad586a44e2214a11c4e7d27e0d3c2d73e43f39f/code%2Fsrc%2Fextension.ts", "raw_url": "https://github.com/rust-lang/rust/raw/8ad586a44e2214a11c4e7d27e0d3c2d73e43f39f/code%2Fsrc%2Fextension.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/code%2Fsrc%2Fextension.ts?ref=8ad586a44e2214a11c4e7d27e0d3c2d73e43f39f", "patch": "@@ -51,6 +51,19 @@ export function activate(context: vscode.ExtensionContext) {\n             return new vscode.Selection(anchor, active)\n         })\n     })\n+    registerCommand('libsyntax-rust.joinLines', async () => {\n+        let editor = vscode.window.activeTextEditor\n+        if (editor == null || editor.document.languageId != \"rust\") return\n+        let request: JoinLinesParams = {\n+            textDocument: { uri: editor.document.uri.toString() },\n+            range: client.code2ProtocolConverter.asRange(editor.selection),\n+        }\n+        let response = await client.sendRequest<lc.TextEdit[]>(\"m/joinLines\", request)\n+        let edits = client.protocol2CodeConverter.asTextEdits(response)\n+        let wsEdit = new vscode.WorkspaceEdit()\n+        wsEdit.set(editor.document.uri, edits)\n+        return vscode.workspace.applyEdit(wsEdit)\n+    })\n     registerCommand('libsyntax-rust.parentModule', async () => {\n         let editor = vscode.window.activeTextEditor\n         if (editor == null || editor.document.languageId != \"rust\") return\n@@ -237,6 +250,11 @@ interface FindMatchingBraceParams {\n     offsets: lc.Position[];\n }\n \n+interface JoinLinesParams {\n+    textDocument: lc.TextDocumentIdentifier;\n+    range: lc.Range;\n+}\n+\n interface PublishDecorationsParams {\n     uri: string,\n     decorations: Decoration[],"}, {"sha": "ae362ddaa0a107f2f5c4ffd25f01804aa6e86c55", "filename": "crates/server/src/main_loop/handlers.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/8ad586a44e2214a11c4e7d27e0d3c2d73e43f39f/crates%2Fserver%2Fsrc%2Fmain_loop%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ad586a44e2214a11c4e7d27e0d3c2d73e43f39f/crates%2Fserver%2Fsrc%2Fmain_loop%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fserver%2Fsrc%2Fmain_loop%2Fhandlers.rs?ref=8ad586a44e2214a11c4e7d27e0d3c2d73e43f39f", "patch": "@@ -3,7 +3,7 @@ use std::collections::HashMap;\n use languageserver_types::{\n     Diagnostic, DiagnosticSeverity, Url, DocumentSymbol,\n     Command, TextDocumentIdentifier, WorkspaceEdit,\n-    SymbolInformation, Position, Location,\n+    SymbolInformation, Position, Location, TextEdit,\n };\n use libanalysis::{Query};\n use libeditor;\n@@ -58,6 +58,18 @@ pub fn handle_find_matching_brace(\n     Ok(res)\n }\n \n+pub fn handle_join_lines(\n+    world: ServerWorld,\n+    params: req::JoinLinesParams,\n+) -> Result<Vec<TextEdit>> {\n+    let file_id = params.text_document.try_conv_with(&world)?;\n+    let file = world.analysis().file_syntax(file_id)?;\n+    let line_index = world.analysis().file_line_index(file_id)?;\n+    let range = params.range.conv_with(&line_index);\n+    let res = libeditor::join_lines(&file, range);\n+    Ok(res.edit.conv_with(&line_index))\n+}\n+\n pub fn handle_document_symbol(\n     world: ServerWorld,\n     params: req::DocumentSymbolParams,"}, {"sha": "1e65041e2f200442ecfd7ac4ed9d217549a3e611", "filename": "crates/server/src/main_loop/mod.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8ad586a44e2214a11c4e7d27e0d3c2d73e43f39f/crates%2Fserver%2Fsrc%2Fmain_loop%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ad586a44e2214a11c4e7d27e0d3c2d73e43f39f/crates%2Fserver%2Fsrc%2Fmain_loop%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fserver%2Fsrc%2Fmain_loop%2Fmod.rs?ref=8ad586a44e2214a11c4e7d27e0d3c2d73e43f39f", "patch": "@@ -27,6 +27,7 @@ use {\n         handle_goto_definition,\n         handle_find_matching_brace,\n         handle_parent_module,\n+        handle_join_lines,\n     },\n };\n \n@@ -145,6 +146,9 @@ fn on_request(\n     handle_request_on_threadpool::<req::ParentModule>(\n         &mut req, pool, world, sender, handle_parent_module,\n     )?;\n+    handle_request_on_threadpool::<req::JoinLines>(\n+        &mut req, pool, world, sender, handle_join_lines,\n+    )?;\n     dispatch::handle_request::<req::ExecuteCommand, _>(&mut req, |params, resp| {\n         io.send(RawMsg::Response(resp.into_response(Ok(None))?));\n "}, {"sha": "c431deeb4546b4b94bfb86b8515fe293539179bb", "filename": "crates/server/src/req.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/8ad586a44e2214a11c4e7d27e0d3c2d73e43f39f/crates%2Fserver%2Fsrc%2Freq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ad586a44e2214a11c4e7d27e0d3c2d73e43f39f/crates%2Fserver%2Fsrc%2Freq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fserver%2Fsrc%2Freq.rs?ref=8ad586a44e2214a11c4e7d27e0d3c2d73e43f39f", "patch": "@@ -10,6 +10,7 @@ pub use languageserver_types::{\n     ExecuteCommandParams,\n     WorkspaceSymbolParams,\n     TextDocumentPositionParams,\n+    TextEdit,\n };\n \n \n@@ -117,3 +118,18 @@ impl Request for ParentModule {\n     type Result = Vec<Location>;\n     const METHOD: &'static str = \"m/parentModule\";\n }\n+\n+pub enum JoinLines {}\n+\n+impl Request for JoinLines {\n+    type Params = JoinLinesParams;\n+    type Result = Vec<TextEdit>;\n+    const METHOD: &'static str = \"m/joinLines\";\n+}\n+\n+#[derive(Deserialize, Debug)]\n+#[serde(rename_all = \"camelCase\")]\n+pub struct JoinLinesParams {\n+    pub text_document: TextDocumentIdentifier,\n+    pub range: Range,\n+}"}]}