{"sha": "8c431607440d454e15c456b14f0282d3487c411e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhjNDMxNjA3NDQwZDQ1NGUxNWM0NTZiMTRmMDI4MmQzNDg3YzQxMWU=", "commit": {"author": {"name": "Camelid", "email": "camelidcamel@gmail.com", "date": "2021-01-11T02:07:05Z"}, "committer": {"name": "Camelid", "email": "camelidcamel@gmail.com", "date": "2021-01-12T03:59:25Z"}, "message": "driver: Use `atty` instead of rolling our own\n\nRationale:\n\n- `atty` is widely used in the Rust ecosystem\n- We already use it (in `rustc_errors` and other places)\n- We shouldn't be rolling our own TTY detector when there's a\n  widely-used, well-tested package that we can use", "tree": {"sha": "a7e148d00b2ee564e683474c2a7aa3708a47effd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a7e148d00b2ee564e683474c2a7aa3708a47effd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8c431607440d454e15c456b14f0282d3487c411e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8c431607440d454e15c456b14f0282d3487c411e", "html_url": "https://github.com/rust-lang/rust/commit/8c431607440d454e15c456b14f0282d3487c411e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8c431607440d454e15c456b14f0282d3487c411e/comments", "author": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "04064416644eba7351b1a457c1de27d28a750c95", "url": "https://api.github.com/repos/rust-lang/rust/commits/04064416644eba7351b1a457c1de27d28a750c95", "html_url": "https://github.com/rust-lang/rust/commit/04064416644eba7351b1a457c1de27d28a750c95"}], "stats": {"total": 37, "additions": 4, "deletions": 33}, "files": [{"sha": "ab452c97e7b3763ed689a41903caba11a5be8efb", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8c431607440d454e15c456b14f0282d3487c411e/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/8c431607440d454e15c456b14f0282d3487c411e/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=8c431607440d454e15c456b14f0282d3487c411e", "patch": "@@ -3652,6 +3652,7 @@ dependencies = [\n name = \"rustc_driver\"\n version = \"0.0.0\"\n dependencies = [\n+ \"atty\",\n  \"libc\",\n  \"rustc_ast\",\n  \"rustc_ast_pretty\","}, {"sha": "b88b556d143d98a96b0c8308f26fe680e18f224e", "filename": "compiler/rustc_driver/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8c431607440d454e15c456b14f0282d3487c411e/compiler%2Frustc_driver%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/8c431607440d454e15c456b14f0282d3487c411e/compiler%2Frustc_driver%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_driver%2FCargo.toml?ref=8c431607440d454e15c456b14f0282d3487c411e", "patch": "@@ -9,6 +9,7 @@ crate-type = [\"dylib\"]\n \n [dependencies]\n libc = \"0.2\"\n+atty = \"0.2\"\n tracing = { version = \"0.1.18\" }\n tracing-subscriber = { version = \"0.2.13\", default-features = false, features = [\"fmt\", \"env-filter\", \"smallvec\", \"parking_lot\", \"ansi\"] }\n tracing-tree = \"0.1.6\""}, {"sha": "509f81e16536bbcdb252db23dfab8e2d7496cc48", "filename": "compiler/rustc_driver/src/lib.rs", "status": "modified", "additions": 2, "deletions": 33, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/8c431607440d454e15c456b14f0282d3487c411e/compiler%2Frustc_driver%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c431607440d454e15c456b14f0282d3487c411e/compiler%2Frustc_driver%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_driver%2Fsrc%2Flib.rs?ref=8c431607440d454e15c456b14f0282d3487c411e", "patch": "@@ -546,43 +546,12 @@ impl Compilation {\n #[derive(Copy, Clone)]\n pub struct RustcDefaultCalls;\n \n-// FIXME remove these and use winapi 0.3 instead\n-// Duplicates: bootstrap/compile.rs, librustc_errors/emitter.rs\n-#[cfg(unix)]\n-fn stdout_isatty() -> bool {\n-    unsafe { libc::isatty(libc::STDOUT_FILENO) != 0 }\n-}\n-\n-#[cfg(windows)]\n fn stdout_isatty() -> bool {\n-    use winapi::um::consoleapi::GetConsoleMode;\n-    use winapi::um::processenv::GetStdHandle;\n-    use winapi::um::winbase::STD_OUTPUT_HANDLE;\n-\n-    unsafe {\n-        let handle = GetStdHandle(STD_OUTPUT_HANDLE);\n-        let mut out = 0;\n-        GetConsoleMode(handle, &mut out) != 0\n-    }\n+    atty::is(atty::Stream::Stdout)\n }\n \n-// FIXME remove these and use winapi 0.3 instead\n-#[cfg(unix)]\n-fn stderr_isatty() -> bool {\n-    unsafe { libc::isatty(libc::STDERR_FILENO) != 0 }\n-}\n-\n-#[cfg(windows)]\n fn stderr_isatty() -> bool {\n-    use winapi::um::consoleapi::GetConsoleMode;\n-    use winapi::um::processenv::GetStdHandle;\n-    use winapi::um::winbase::STD_ERROR_HANDLE;\n-\n-    unsafe {\n-        let handle = GetStdHandle(STD_ERROR_HANDLE);\n-        let mut out = 0;\n-        GetConsoleMode(handle, &mut out) != 0\n-    }\n+    atty::is(atty::Stream::Stderr)\n }\n \n fn handle_explain(registry: Registry, code: &str, output: ErrorOutputType) {"}]}