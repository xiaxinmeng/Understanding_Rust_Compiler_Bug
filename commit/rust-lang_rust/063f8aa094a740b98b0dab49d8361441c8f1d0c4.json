{"sha": "063f8aa094a740b98b0dab49d8361441c8f1d0c4", "node_id": "C_kwDOAAsO6NoAKDA2M2Y4YWEwOTRhNzQwYjk4YjBkYWI0OWQ4MzYxNDQxYzhmMWQwYzQ", "commit": {"author": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2021-11-25T08:50:57Z"}, "committer": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2021-11-25T09:08:18Z"}, "message": "Ignore associated types in traits when considering type complexity", "tree": {"sha": "220be29ac9dc8daa4719b0e35eadc4ebe0e5bb34", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/220be29ac9dc8daa4719b0e35eadc4ebe0e5bb34"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/063f8aa094a740b98b0dab49d8361441c8f1d0c4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/063f8aa094a740b98b0dab49d8361441c8f1d0c4", "html_url": "https://github.com/rust-lang/rust/commit/063f8aa094a740b98b0dab49d8361441c8f1d0c4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/063f8aa094a740b98b0dab49d8361441c8f1d0c4/comments", "author": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "35b0f2438d72320a071aca1084e9c96c071c377d", "url": "https://api.github.com/repos/rust-lang/rust/commits/35b0f2438d72320a071aca1084e9c96c071c377d", "html_url": "https://github.com/rust-lang/rust/commit/35b0f2438d72320a071aca1084e9c96c071c377d"}], "stats": {"total": 31, "additions": 28, "deletions": 3}, "files": [{"sha": "69cd49d884cc00ae91674369eeae38cf86c5ac5d", "filename": "clippy_lints/src/types/mod.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/063f8aa094a740b98b0dab49d8361441c8f1d0c4/clippy_lints%2Fsrc%2Ftypes%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/063f8aa094a740b98b0dab49d8361441c8f1d0c4/clippy_lints%2Fsrc%2Ftypes%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes%2Fmod.rs?ref=063f8aa094a740b98b0dab49d8361441c8f1d0c4", "patch": "@@ -350,16 +350,18 @@ impl<'tcx> LateLintPass<'tcx> for Types {\n \n     fn check_impl_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx ImplItem<'_>) {\n         match item.kind {\n-            ImplItemKind::Const(ty, _) | ImplItemKind::TyAlias(ty) => self.check_ty(\n+            ImplItemKind::Const(ty, _) => self.check_ty(\n                 cx,\n                 ty,\n                 CheckTyContext {\n                     is_in_trait_impl: true,\n                     ..CheckTyContext::default()\n                 },\n             ),\n-            // methods are covered by check_fn\n-            ImplItemKind::Fn(..) => (),\n+            // Methods are covered by check_fn.\n+            // Type aliases are ignored because oftentimes it's impossible to\n+            // make type alias declaration in trait simpler, see #1013\n+            ImplItemKind::Fn(..) | ImplItemKind::TyAlias(..) => (),\n         }\n     }\n "}, {"sha": "c68ab3aaf942fc9b7ade566708ab0aac0f8d7060", "filename": "tests/ui/type_complexity_issue_1013.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/063f8aa094a740b98b0dab49d8361441c8f1d0c4/tests%2Fui%2Ftype_complexity_issue_1013.rs", "raw_url": "https://github.com/rust-lang/rust/raw/063f8aa094a740b98b0dab49d8361441c8f1d0c4/tests%2Fui%2Ftype_complexity_issue_1013.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftype_complexity_issue_1013.rs?ref=063f8aa094a740b98b0dab49d8361441c8f1d0c4", "patch": "@@ -0,0 +1,23 @@\n+#![warn(clippy::type_complexity)]\n+use std::iter::{Filter, Map};\n+use std::vec::IntoIter;\n+\n+struct S;\n+\n+impl IntoIterator for S {\n+    type Item = i32;\n+    // Should not warn since there is no way to simplify this\n+    type IntoIter = Filter<Map<IntoIter<i32>, fn(i32) -> i32>, fn(&i32) -> bool>;\n+\n+    fn into_iter(self) -> Self::IntoIter {\n+        fn m(a: i32) -> i32 {\n+            a\n+        }\n+        fn p(_: &i32) -> bool {\n+            true\n+        }\n+        vec![1i32, 2, 3].into_iter().map(m as fn(_) -> _).filter(p)\n+    }\n+}\n+\n+fn main() {}"}]}