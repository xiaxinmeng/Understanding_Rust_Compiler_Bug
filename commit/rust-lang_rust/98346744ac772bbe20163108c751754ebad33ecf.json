{"sha": "98346744ac772bbe20163108c751754ebad33ecf", "node_id": "C_kwDOAAsO6NoAKDk4MzQ2NzQ0YWM3NzJiYmUyMDE2MzEwOGM3NTE3NTRlYmFkMzNlY2Y", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-04-22T16:56:24Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-04-22T16:56:24Z"}, "message": "Rollup merge of #96272 - tmiasko:validate-uninhabited, r=RalfJung\n\nUpdate `validate_uninhabited_zsts.rs` test after MIR building changes\n\nto ensure that it still tests validation, instead of failing earlier on\nduring evaluation.\n\nr? `@RalfJung`", "tree": {"sha": "37ebda08774310e2f91f8b8dd5172fe092a37852", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/37ebda08774310e2f91f8b8dd5172fe092a37852"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/98346744ac772bbe20163108c751754ebad33ecf", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiYt44CRBK7hj4Ov3rIwAADHEIALLGMT7TEofBAJTV9spYJINm\nC1rj7VhPTEE/aXijvdWtjFDU7rLHceEIBSgt9bKaX5qqIJBo6OREVdcvjLUdwBjg\nzGn/sYRSE9J8PCE/xQgZ95tNI2rpK9xB9mDm0pygbTjFOTZDjT1VjN0N++BIIgQZ\npzi6G8Ok/tiYJD1s7evplCMZGMo7KTSgK9f1xzthwaut0qCDNWLRgz1ij8dyKnGk\nHzE4T+muhm7xRlrGYstx8UOZ7DTTKmOxV3GvtsC3svH3nZs0WhEuGCz9YMy3ZNFo\nSyZ+ggaPbBchYMtLQz8gAI0qjmMgnVu5geFFXS+ZBn+hwfn84UOE47N20/Rx3a8=\n=qhJV\n-----END PGP SIGNATURE-----\n", "payload": "tree 37ebda08774310e2f91f8b8dd5172fe092a37852\nparent 41ef7678061dde625bf273ab6b036aebd7153a43\nparent 9ff5b7ee41cd53737865328c7a210316078e2c17\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1650646584 +0200\ncommitter GitHub <noreply@github.com> 1650646584 +0200\n\nRollup merge of #96272 - tmiasko:validate-uninhabited, r=RalfJung\n\nUpdate `validate_uninhabited_zsts.rs` test after MIR building changes\n\nto ensure that it still tests validation, instead of failing earlier on\nduring evaluation.\n\nr? `@RalfJung`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/98346744ac772bbe20163108c751754ebad33ecf", "html_url": "https://github.com/rust-lang/rust/commit/98346744ac772bbe20163108c751754ebad33ecf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/98346744ac772bbe20163108c751754ebad33ecf/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "41ef7678061dde625bf273ab6b036aebd7153a43", "url": "https://api.github.com/repos/rust-lang/rust/commits/41ef7678061dde625bf273ab6b036aebd7153a43", "html_url": "https://github.com/rust-lang/rust/commit/41ef7678061dde625bf273ab6b036aebd7153a43"}, {"sha": "9ff5b7ee41cd53737865328c7a210316078e2c17", "url": "https://api.github.com/repos/rust-lang/rust/commits/9ff5b7ee41cd53737865328c7a210316078e2c17", "html_url": "https://github.com/rust-lang/rust/commit/9ff5b7ee41cd53737865328c7a210316078e2c17"}], "stats": {"total": 89, "additions": 55, "deletions": 34}, "files": [{"sha": "65ab1b02b3587d3cbbae56c1946f5e07c4db2f4e", "filename": "src/test/ui/consts/const-eval/validate_uninhabited_zsts.32bit.stderr", "status": "modified", "additions": 21, "deletions": 14, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/98346744ac772bbe20163108c751754ebad33ecf/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fvalidate_uninhabited_zsts.32bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98346744ac772bbe20163108c751754ebad33ecf/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fvalidate_uninhabited_zsts.32bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fvalidate_uninhabited_zsts.32bit.stderr?ref=98346744ac772bbe20163108c751754ebad33ecf", "patch": "@@ -7,14 +7,17 @@ LL |     unsafe { std::mem::transmute(()) }\n    |              transmuting to uninhabited type\n    |              inside `foo` at $DIR/validate_uninhabited_zsts.rs:4:14\n ...\n-LL | const FOO: [Empty; 3] = [foo(); 3];\n-   |                          ----- inside `FOO` at $DIR/validate_uninhabited_zsts.rs:13:26\n+LL | const FOO: [empty::Empty; 3] = [foo(); 3];\n+   |                                 ----- inside `FOO` at $DIR/validate_uninhabited_zsts.rs:20:33\n \n-error[E0080]: evaluation of constant value failed\n-  --> $DIR/validate_uninhabited_zsts.rs:16:35\n+error[E0080]: it is undefined behavior to use this value\n+  --> $DIR/validate_uninhabited_zsts.rs:23:1\n+   |\n+LL | const BAR: [empty::Empty; 3] = [unsafe { std::mem::transmute(()) }; 3];\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed at [0].0: encountered a value of uninhabited type empty::Void\n    |\n-LL | const BAR: [Empty; 3] = [unsafe { std::mem::transmute(()) }; 3];\n-   |                                   ^^^^^^^^^^^^^^^^^^^^^^^ transmuting to uninhabited type\n+   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n+   = note: the raw bytes of the constant (size: 0, align: 1) {}\n \n warning: the type `!` does not permit zero-initialization\n   --> $DIR/validate_uninhabited_zsts.rs:4:14\n@@ -28,16 +31,20 @@ LL |     unsafe { std::mem::transmute(()) }\n    = note: `#[warn(invalid_value)]` on by default\n    = note: the `!` type has no valid value\n \n-warning: the type `Empty` does not permit zero-initialization\n-  --> $DIR/validate_uninhabited_zsts.rs:16:35\n+warning: the type `empty::Empty` does not permit zero-initialization\n+  --> $DIR/validate_uninhabited_zsts.rs:23:42\n+   |\n+LL | const BAR: [empty::Empty; 3] = [unsafe { std::mem::transmute(()) }; 3];\n+   |                                          ^^^^^^^^^^^^^^^^^^^^^^^\n+   |                                          |\n+   |                                          this code causes undefined behavior when executed\n+   |                                          help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done\n    |\n-LL | const BAR: [Empty; 3] = [unsafe { std::mem::transmute(()) }; 3];\n-   |                                   ^^^^^^^^^^^^^^^^^^^^^^^\n-   |                                   |\n-   |                                   this code causes undefined behavior when executed\n-   |                                   help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done\n+note: enums with no variants have no valid value (in this struct field)\n+  --> $DIR/validate_uninhabited_zsts.rs:16:22\n    |\n-   = note: enums with no variants have no valid value\n+LL |     pub struct Empty(Void);\n+   |                      ^^^^\n \n error: aborting due to 2 previous errors; 2 warnings emitted\n "}, {"sha": "65ab1b02b3587d3cbbae56c1946f5e07c4db2f4e", "filename": "src/test/ui/consts/const-eval/validate_uninhabited_zsts.64bit.stderr", "status": "modified", "additions": 21, "deletions": 14, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/98346744ac772bbe20163108c751754ebad33ecf/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fvalidate_uninhabited_zsts.64bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98346744ac772bbe20163108c751754ebad33ecf/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fvalidate_uninhabited_zsts.64bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fvalidate_uninhabited_zsts.64bit.stderr?ref=98346744ac772bbe20163108c751754ebad33ecf", "patch": "@@ -7,14 +7,17 @@ LL |     unsafe { std::mem::transmute(()) }\n    |              transmuting to uninhabited type\n    |              inside `foo` at $DIR/validate_uninhabited_zsts.rs:4:14\n ...\n-LL | const FOO: [Empty; 3] = [foo(); 3];\n-   |                          ----- inside `FOO` at $DIR/validate_uninhabited_zsts.rs:13:26\n+LL | const FOO: [empty::Empty; 3] = [foo(); 3];\n+   |                                 ----- inside `FOO` at $DIR/validate_uninhabited_zsts.rs:20:33\n \n-error[E0080]: evaluation of constant value failed\n-  --> $DIR/validate_uninhabited_zsts.rs:16:35\n+error[E0080]: it is undefined behavior to use this value\n+  --> $DIR/validate_uninhabited_zsts.rs:23:1\n+   |\n+LL | const BAR: [empty::Empty; 3] = [unsafe { std::mem::transmute(()) }; 3];\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed at [0].0: encountered a value of uninhabited type empty::Void\n    |\n-LL | const BAR: [Empty; 3] = [unsafe { std::mem::transmute(()) }; 3];\n-   |                                   ^^^^^^^^^^^^^^^^^^^^^^^ transmuting to uninhabited type\n+   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n+   = note: the raw bytes of the constant (size: 0, align: 1) {}\n \n warning: the type `!` does not permit zero-initialization\n   --> $DIR/validate_uninhabited_zsts.rs:4:14\n@@ -28,16 +31,20 @@ LL |     unsafe { std::mem::transmute(()) }\n    = note: `#[warn(invalid_value)]` on by default\n    = note: the `!` type has no valid value\n \n-warning: the type `Empty` does not permit zero-initialization\n-  --> $DIR/validate_uninhabited_zsts.rs:16:35\n+warning: the type `empty::Empty` does not permit zero-initialization\n+  --> $DIR/validate_uninhabited_zsts.rs:23:42\n+   |\n+LL | const BAR: [empty::Empty; 3] = [unsafe { std::mem::transmute(()) }; 3];\n+   |                                          ^^^^^^^^^^^^^^^^^^^^^^^\n+   |                                          |\n+   |                                          this code causes undefined behavior when executed\n+   |                                          help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done\n    |\n-LL | const BAR: [Empty; 3] = [unsafe { std::mem::transmute(()) }; 3];\n-   |                                   ^^^^^^^^^^^^^^^^^^^^^^^\n-   |                                   |\n-   |                                   this code causes undefined behavior when executed\n-   |                                   help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done\n+note: enums with no variants have no valid value (in this struct field)\n+  --> $DIR/validate_uninhabited_zsts.rs:16:22\n    |\n-   = note: enums with no variants have no valid value\n+LL |     pub struct Empty(Void);\n+   |                      ^^^^\n \n error: aborting due to 2 previous errors; 2 warnings emitted\n "}, {"sha": "96f3312758292e34b8e9cf9a5e9f206de18c8e1e", "filename": "src/test/ui/consts/const-eval/validate_uninhabited_zsts.rs", "status": "modified", "additions": 13, "deletions": 6, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/98346744ac772bbe20163108c751754ebad33ecf/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fvalidate_uninhabited_zsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98346744ac772bbe20163108c751754ebad33ecf/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fvalidate_uninhabited_zsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fvalidate_uninhabited_zsts.rs?ref=98346744ac772bbe20163108c751754ebad33ecf", "patch": "@@ -6,16 +6,23 @@ const fn foo() -> ! {\n     //~| WARN the type `!` does not permit zero-initialization [invalid_value]\n }\n \n-#[derive(Clone, Copy)]\n-enum Empty { }\n+// Type defined in a submodule, so that it is not \"visibly\"\n+// uninhabited (which would change interpreter behavior).\n+pub mod empty {\n+    #[derive(Clone, Copy)]\n+    enum Void {}\n+\n+    #[derive(Clone, Copy)]\n+    pub struct Empty(Void);\n+}\n \n #[warn(const_err)]\n-const FOO: [Empty; 3] = [foo(); 3];\n+const FOO: [empty::Empty; 3] = [foo(); 3];\n \n #[warn(const_err)]\n-const BAR: [Empty; 3] = [unsafe { std::mem::transmute(()) }; 3];\n-//~^ ERROR evaluation of constant value failed\n-//~| WARN the type `Empty` does not permit zero-initialization\n+const BAR: [empty::Empty; 3] = [unsafe { std::mem::transmute(()) }; 3];\n+//~^ ERROR it is undefined behavior to use this value\n+//~| WARN the type `empty::Empty` does not permit zero-initialization\n \n fn main() {\n     FOO;"}]}