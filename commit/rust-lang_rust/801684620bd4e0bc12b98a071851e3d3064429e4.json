{"sha": "801684620bd4e0bc12b98a071851e3d3064429e4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgwMTY4NDYyMGJkNGUwYmMxMmI5OGEwNzE4NTFlM2QzMDY0NDI5ZTQ=", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2021-01-17T12:25:01Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-01-17T12:25:01Z"}, "message": "Rollup merge of #81107 - scottmcm:nonzero-is_power_of_two, r=kennytm\n\nAdd NonZeroUn::is_power_of_two\n\nThis saves instructions on both new and old machines <https://rust.godbolt.org/z/4fjTMz>\n- On the default x64 target (with no fancy instructions available) it saves a few instructions by not needing to also check for zero.\n- On newer targets (with BMI1) it uses `BLSR` for super-short assembly.\n\nThis can be used for things like checks against alignments stored in `NonZeroUsize`.", "tree": {"sha": "da13b95b2c674428e79620e1eaad4aec53b5e9f7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/da13b95b2c674428e79620e1eaad4aec53b5e9f7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/801684620bd4e0bc12b98a071851e3d3064429e4", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgBCyeCRBK7hj4Ov3rIwAAdHIIALLhOOgvaWxEOHt1sz06PbaZ\nHVsDVQKuLpkN/vFeXpSY4dWl3dP9749v7aCJ8VGwnMaPFXrhffhZKy/hKiHOM7tA\nK325FLcr5fKsy4Vpi3NERJkHWHgRe7CBxJ19oNjAZI1R2RP+gR+g8A8kZKreRpJg\nPQ1MHzMs/i8l6vwzjCCxbLF3QtUxL86nJ0atFMjLHiaNXz6s7rpaRNyD8c4YGyb2\nLVx8kf/TzlF799VSTX2ZcBf7PAo1Y+I3NXj4Z6i4Pvh8mfuImg/oyL1scdbf853r\nXuZALc8VaWi4xcWWvyYhkFM0HgxrBEuy58Ckv9zbfNNe5iParhKopEtjeaoc/EQ=\n=zTqw\n-----END PGP SIGNATURE-----\n", "payload": "tree da13b95b2c674428e79620e1eaad4aec53b5e9f7\nparent 7e2425ab73b40f042975a0911a976220bf62d083\nparent 3e16e9211ef7eff4d421f384140e729df1120372\nauthor Mara Bos <m-ou.se@m-ou.se> 1610886301 +0000\ncommitter GitHub <noreply@github.com> 1610886301 +0000\n\nRollup merge of #81107 - scottmcm:nonzero-is_power_of_two, r=kennytm\n\nAdd NonZeroUn::is_power_of_two\n\nThis saves instructions on both new and old machines <https://rust.godbolt.org/z/4fjTMz>\n- On the default x64 target (with no fancy instructions available) it saves a few instructions by not needing to also check for zero.\n- On newer targets (with BMI1) it uses `BLSR` for super-short assembly.\n\nThis can be used for things like checks against alignments stored in `NonZeroUsize`.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/801684620bd4e0bc12b98a071851e3d3064429e4", "html_url": "https://github.com/rust-lang/rust/commit/801684620bd4e0bc12b98a071851e3d3064429e4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/801684620bd4e0bc12b98a071851e3d3064429e4/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7e2425ab73b40f042975a0911a976220bf62d083", "url": "https://api.github.com/repos/rust-lang/rust/commits/7e2425ab73b40f042975a0911a976220bf62d083", "html_url": "https://github.com/rust-lang/rust/commit/7e2425ab73b40f042975a0911a976220bf62d083"}, {"sha": "3e16e9211ef7eff4d421f384140e729df1120372", "url": "https://api.github.com/repos/rust-lang/rust/commits/3e16e9211ef7eff4d421f384140e729df1120372", "html_url": "https://github.com/rust-lang/rust/commit/3e16e9211ef7eff4d421f384140e729df1120372"}], "stats": {"total": 40, "additions": 40, "deletions": 0}, "files": [{"sha": "111feb7dbec69c24a7295298858423bf69b0d9c6", "filename": "library/core/src/num/nonzero.rs", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/801684620bd4e0bc12b98a071851e3d3064429e4/library%2Fcore%2Fsrc%2Fnum%2Fnonzero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/801684620bd4e0bc12b98a071851e3d3064429e4/library%2Fcore%2Fsrc%2Fnum%2Fnonzero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fnonzero.rs?ref=801684620bd4e0bc12b98a071851e3d3064429e4", "patch": "@@ -286,3 +286,43 @@ nonzero_integers_div! {\n     NonZeroU128(u128);\n     NonZeroUsize(usize);\n }\n+\n+macro_rules! nonzero_unsigned_is_power_of_two {\n+    ( $( $Ty: ident )+ ) => {\n+        $(\n+            impl $Ty {\n+\n+                /// Returns `true` if and only if `self == (1 << k)` for some `k`.\n+                ///\n+                /// On many architectures, this function can perform better than `is_power_of_two()`\n+                /// on the underlying integer type, as special handling of zero can be avoided.\n+                ///\n+                /// # Examples\n+                ///\n+                /// Basic usage:\n+                ///\n+                /// ```\n+                /// #![feature(nonzero_is_power_of_two)]\n+                ///\n+                #[doc = concat!(\"let eight = std::num::\", stringify!($Ty), \"::new(8).unwrap();\")]\n+                /// assert!(eight.is_power_of_two());\n+                #[doc = concat!(\"let ten = std::num::\", stringify!($Ty), \"::new(10).unwrap();\")]\n+                /// assert!(!ten.is_power_of_two());\n+                /// ```\n+                #[unstable(feature = \"nonzero_is_power_of_two\", issue = \"81106\")]\n+                #[inline]\n+                pub const fn is_power_of_two(self) -> bool {\n+                    // LLVM 11 normalizes `unchecked_sub(x, 1) & x == 0` to the implementation seen here.\n+                    // On the basic x86-64 target, this saves 3 instructions for the zero check.\n+                    // On x86_64 with BMI1, being nonzero lets it codegen to `BLSR`, which saves an instruction\n+                    // compared to the `POPCNT` implementation on the underlying integer type.\n+\n+                    intrinsics::ctpop(self.get()) < 2\n+                }\n+\n+            }\n+        )+\n+    }\n+}\n+\n+nonzero_unsigned_is_power_of_two! { NonZeroU8 NonZeroU16 NonZeroU32 NonZeroU64 NonZeroU128 NonZeroUsize }"}]}