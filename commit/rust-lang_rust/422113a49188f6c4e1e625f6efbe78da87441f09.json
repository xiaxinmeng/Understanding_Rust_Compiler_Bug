{"sha": "422113a49188f6c4e1e625f6efbe78da87441f09", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQyMjExM2E0OTE4OGY2YzRlMWU2MjVmNmVmYmU3OGRhODc0NDFmMDk=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-08-05T11:38:15Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-08-05T11:38:15Z"}, "message": "rustup", "tree": {"sha": "c30ebd77688a4d44673231eb45828c447e2cac36", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c30ebd77688a4d44673231eb45828c447e2cac36"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/422113a49188f6c4e1e625f6efbe78da87441f09", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/422113a49188f6c4e1e625f6efbe78da87441f09", "html_url": "https://github.com/rust-lang/rust/commit/422113a49188f6c4e1e625f6efbe78da87441f09", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/422113a49188f6c4e1e625f6efbe78da87441f09/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2d2820dc77754e1793cd79c42d933957bf792923", "url": "https://api.github.com/repos/rust-lang/rust/commits/2d2820dc77754e1793cd79c42d933957bf792923", "html_url": "https://github.com/rust-lang/rust/commit/2d2820dc77754e1793cd79c42d933957bf792923"}], "stats": {"total": 21, "additions": 11, "deletions": 10}, "files": [{"sha": "4fb52f22fa0a7d030e70a6f9460bd5b883164e9d", "filename": "rust-version", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/422113a49188f6c4e1e625f6efbe78da87441f09/rust-version", "raw_url": "https://github.com/rust-lang/rust/raw/422113a49188f6c4e1e625f6efbe78da87441f09/rust-version", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rust-version?ref=422113a49188f6c4e1e625f6efbe78da87441f09", "patch": "@@ -1 +1 @@\n-dbc2ef25fb5e15445de38f19ba75547a6cf35cae\n+1d69e3b1d753951bc7df0f02d6fd4719065d98c3"}, {"sha": "557550d6f4331471c29ff04cd06a46b3a12fcb6b", "filename": "tests/run-pass/heap_allocator.rs", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/422113a49188f6c4e1e625f6efbe78da87441f09/tests%2Frun-pass%2Fheap_allocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/422113a49188f6c4e1e625f6efbe78da87441f09/tests%2Frun-pass%2Fheap_allocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fheap_allocator.rs?ref=422113a49188f6c4e1e625f6efbe78da87441f09", "patch": "@@ -1,37 +1,38 @@\n-#![feature(allocator_api)]\n+#![feature(allocator_api, slice_ptr_get)]\n \n use std::ptr::NonNull;\n-use std::alloc::{Global, AllocRef, Layout, System, AllocInit, ReallocPlacement};\n+use std::alloc::{Global, AllocRef, Layout, System};\n use std::slice;\n \n fn check_alloc<T: AllocRef>(mut allocator: T) { unsafe {\n     for &align in &[4, 8, 16, 32] {\n         let layout = Layout::from_size_align(20, align).unwrap();\n \n         for _ in 0..32 {\n-            let a = allocator.alloc(layout, AllocInit::Uninitialized).unwrap().ptr;\n+            let a = allocator.alloc(layout).unwrap().as_non_null_ptr();\n             assert_eq!(a.as_ptr() as usize % align, 0, \"pointer is incorrectly aligned\");\n             allocator.dealloc(a, layout);\n         }\n \n-        let p1 = allocator.alloc(layout, AllocInit::Zeroed).unwrap().ptr;\n+        let p1 = allocator.alloc_zeroed(layout).unwrap().as_non_null_ptr();\n         assert_eq!(p1.as_ptr() as usize % align, 0, \"pointer is incorrectly aligned\");\n+        assert_eq!(*p1.as_ptr(), 0);\n \n         // old size < new size\n-        let p2 = allocator.grow(p1, layout, 40, ReallocPlacement::MayMove, AllocInit::Uninitialized).unwrap().ptr;\n+        let p2 = allocator.grow(p1, layout, 40).unwrap().as_non_null_ptr();\n         let layout = Layout::from_size_align(40, align).unwrap();\n         assert_eq!(p2.as_ptr() as usize % align, 0, \"pointer is incorrectly aligned\");\n         let slice = slice::from_raw_parts(p2.as_ptr(), 20);\n         assert_eq!(&slice, &[0_u8; 20]);\n \n         // old size == new size\n-        let p3 = allocator.grow(p2, layout, 40, ReallocPlacement::MayMove, AllocInit::Uninitialized).unwrap().ptr;\n+        let p3 = allocator.grow(p2, layout, 40).unwrap().as_non_null_ptr();\n         assert_eq!(p3.as_ptr() as usize % align, 0, \"pointer is incorrectly aligned\");\n         let slice = slice::from_raw_parts(p3.as_ptr(), 20);\n         assert_eq!(&slice, &[0_u8; 20]);\n \n         // old size > new size\n-        let p4 = allocator.shrink(p3, layout, 10, ReallocPlacement::MayMove).unwrap().ptr;\n+        let p4 = allocator.shrink(p3, layout, 10).unwrap().as_non_null_ptr();\n         let layout = Layout::from_size_align(10, align).unwrap();\n         assert_eq!(p4.as_ptr() as usize % align, 0, \"pointer is incorrectly aligned\");\n         let slice = slice::from_raw_parts(p4.as_ptr(), 10);\n@@ -47,7 +48,7 @@ fn check_align_requests<T: AllocRef>(mut allocator: T) {\n             let iterations = 32;\n             unsafe {\n                 let pointers: Vec<_> = (0..iterations).map(|_| {\n-                    allocator.alloc(Layout::from_size_align(size, align).unwrap(), AllocInit::Uninitialized).unwrap().ptr\n+                    allocator.alloc(Layout::from_size_align(size, align).unwrap()).unwrap().as_non_null_ptr()\n                 }).collect();\n                 for &ptr in &pointers {\n                     assert_eq!((ptr.as_ptr() as usize) % align, 0,\n@@ -68,7 +69,7 @@ fn global_to_box() {\n     let l = Layout::new::<T>();\n     // allocate manually with global allocator, then turn into Box and free there\n     unsafe {\n-        let ptr = Global.alloc(l, AllocInit::Uninitialized).unwrap().ptr.as_ptr() as *mut T;\n+        let ptr = Global.alloc(l).unwrap().as_non_null_ptr().as_ptr() as *mut T;\n         let b = Box::from_raw(ptr);\n         drop(b);\n     }"}]}