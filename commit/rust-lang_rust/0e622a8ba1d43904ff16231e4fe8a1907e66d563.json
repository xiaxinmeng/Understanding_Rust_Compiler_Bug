{"sha": "0e622a8ba1d43904ff16231e4fe8a1907e66d563", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBlNjIyYThiYTFkNDM5MDRmZjE2MjMxZTRmZThhMTkwN2U2NmQ1NjM=", "commit": {"author": {"name": "Taiki Endo", "email": "te316e89@gmail.com", "date": "2019-02-08T12:06:07Z"}, "committer": {"name": "Taiki Endo", "email": "te316e89@gmail.com", "date": "2019-02-08T12:06:07Z"}, "message": "librustc_codegen_utils => 2018", "tree": {"sha": "dda144d97261cf6990157ae9e38b77938e283485", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dda144d97261cf6990157ae9e38b77938e283485"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0e622a8ba1d43904ff16231e4fe8a1907e66d563", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0e622a8ba1d43904ff16231e4fe8a1907e66d563", "html_url": "https://github.com/rust-lang/rust/commit/0e622a8ba1d43904ff16231e4fe8a1907e66d563", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0e622a8ba1d43904ff16231e4fe8a1907e66d563/comments", "author": {"login": "taiki-e", "id": 43724913, "node_id": "MDQ6VXNlcjQzNzI0OTEz", "avatar_url": "https://avatars.githubusercontent.com/u/43724913?v=4", "gravatar_id": "", "url": "https://api.github.com/users/taiki-e", "html_url": "https://github.com/taiki-e", "followers_url": "https://api.github.com/users/taiki-e/followers", "following_url": "https://api.github.com/users/taiki-e/following{/other_user}", "gists_url": "https://api.github.com/users/taiki-e/gists{/gist_id}", "starred_url": "https://api.github.com/users/taiki-e/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/taiki-e/subscriptions", "organizations_url": "https://api.github.com/users/taiki-e/orgs", "repos_url": "https://api.github.com/users/taiki-e/repos", "events_url": "https://api.github.com/users/taiki-e/events{/privacy}", "received_events_url": "https://api.github.com/users/taiki-e/received_events", "type": "User", "site_admin": false}, "committer": {"login": "taiki-e", "id": 43724913, "node_id": "MDQ6VXNlcjQzNzI0OTEz", "avatar_url": "https://avatars.githubusercontent.com/u/43724913?v=4", "gravatar_id": "", "url": "https://api.github.com/users/taiki-e", "html_url": "https://github.com/taiki-e", "followers_url": "https://api.github.com/users/taiki-e/followers", "following_url": "https://api.github.com/users/taiki-e/following{/other_user}", "gists_url": "https://api.github.com/users/taiki-e/gists{/gist_id}", "starred_url": "https://api.github.com/users/taiki-e/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/taiki-e/subscriptions", "organizations_url": "https://api.github.com/users/taiki-e/orgs", "repos_url": "https://api.github.com/users/taiki-e/repos", "events_url": "https://api.github.com/users/taiki-e/events{/privacy}", "received_events_url": "https://api.github.com/users/taiki-e/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1efdda10cdde386ea3e470ba2b482fdc73c12001", "url": "https://api.github.com/repos/rust-lang/rust/commits/1efdda10cdde386ea3e470ba2b482fdc73c12001", "html_url": "https://github.com/rust-lang/rust/commit/1efdda10cdde386ea3e470ba2b482fdc73c12001"}], "stats": {"total": 41, "additions": 18, "deletions": 23}, "files": [{"sha": "5f241eb20fb55a9373554b4bd6e3c12b6ac50fd7", "filename": "src/librustc_codegen_utils/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0e622a8ba1d43904ff16231e4fe8a1907e66d563/src%2Flibrustc_codegen_utils%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/0e622a8ba1d43904ff16231e4fe8a1907e66d563/src%2Flibrustc_codegen_utils%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_utils%2FCargo.toml?ref=0e622a8ba1d43904ff16231e4fe8a1907e66d563", "patch": "@@ -2,6 +2,7 @@\n authors = [\"The Rust Project Developers\"]\n name = \"rustc_codegen_utils\"\n version = \"0.0.0\"\n+edition = \"2018\"\n \n [lib]\n name = \"rustc_codegen_utils\""}, {"sha": "8270d2a4077cf55d89d1fe3850ea9dba9f7fa5eb", "filename": "src/librustc_codegen_utils/codegen_backend.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/0e622a8ba1d43904ff16231e4fe8a1907e66d563/src%2Flibrustc_codegen_utils%2Fcodegen_backend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e622a8ba1d43904ff16231e4fe8a1907e66d563/src%2Flibrustc_codegen_utils%2Fcodegen_backend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_utils%2Fcodegen_backend.rs?ref=0e622a8ba1d43904ff16231e4fe8a1907e66d563", "patch": "@@ -31,7 +31,7 @@ use rustc::middle::cstore::EncodedMetadata;\n use rustc::middle::cstore::MetadataLoader;\n use rustc::dep_graph::DepGraph;\n use rustc_target::spec::Target;\n-use link::out_filename;\n+use crate::link::out_filename;\n \n pub use rustc_data_structures::sync::MetadataRef;\n \n@@ -44,8 +44,8 @@ pub trait CodegenBackend {\n     fn diagnostics(&self) -> &[(&'static str, &'static str)] { &[] }\n \n     fn metadata_loader(&self) -> Box<dyn MetadataLoader + Sync>;\n-    fn provide(&self, _providers: &mut Providers);\n-    fn provide_extern(&self, _providers: &mut Providers);\n+    fn provide(&self, _providers: &mut Providers<'_>);\n+    fn provide_extern(&self, _providers: &mut Providers<'_>);\n     fn codegen_crate<'a, 'tcx>(\n         &self,\n         tcx: TyCtxt<'a, 'tcx, 'tcx>,\n@@ -111,16 +111,16 @@ impl CodegenBackend for MetadataOnlyCodegenBackend {\n         box NoLlvmMetadataLoader\n     }\n \n-    fn provide(&self, providers: &mut Providers) {\n-        ::symbol_names::provide(providers);\n+    fn provide(&self, providers: &mut Providers<'_>) {\n+        crate::symbol_names::provide(providers);\n \n         providers.target_features_whitelist = |_tcx, _cnum| {\n             Default::default() // Just a dummy\n         };\n         providers.is_reachable_non_generic = |_tcx, _defid| true;\n         providers.exported_symbols = |_tcx, _crate| Arc::new(Vec::new());\n     }\n-    fn provide_extern(&self, providers: &mut Providers) {\n+    fn provide_extern(&self, providers: &mut Providers<'_>) {\n         providers.is_reachable_non_generic = |_tcx, _defid| true;\n     }\n \n@@ -131,12 +131,12 @@ impl CodegenBackend for MetadataOnlyCodegenBackend {\n     ) -> Box<dyn Any> {\n         use rustc_mir::monomorphize::item::MonoItem;\n \n-        ::check_for_rustc_errors_attr(tcx);\n-        ::symbol_names_test::report_symbol_names(tcx);\n-        ::rustc_incremental::assert_dep_graph(tcx);\n-        ::rustc_incremental::assert_module_sources::assert_module_sources(tcx);\n+        crate::check_for_rustc_errors_attr(tcx);\n+        crate::symbol_names_test::report_symbol_names(tcx);\n+        rustc_incremental::assert_dep_graph(tcx);\n+        rustc_incremental::assert_module_sources::assert_module_sources(tcx);\n         // FIXME: Fix this\n-        // ::rustc::middle::dependency_format::calculate(tcx);\n+        // rustc::middle::dependency_format::calculate(tcx);\n         let _ = tcx.link_args(LOCAL_CRATE);\n         let _ = tcx.native_libraries(LOCAL_CRATE);\n         let (_, cgus) = tcx.collect_and_partition_mono_items(LOCAL_CRATE);"}, {"sha": "4c01681320f2b57a944969f82d0a37d16545c4e2", "filename": "src/librustc_codegen_utils/lib.rs", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0e622a8ba1d43904ff16231e4fe8a1907e66d563/src%2Flibrustc_codegen_utils%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e622a8ba1d43904ff16231e4fe8a1907e66d563/src%2Flibrustc_codegen_utils%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_utils%2Flib.rs?ref=0e622a8ba1d43904ff16231e4fe8a1907e66d563", "patch": "@@ -16,18 +16,10 @@\n \n #![recursion_limit=\"256\"]\n \n-extern crate flate2;\n-#[macro_use]\n-extern crate log;\n+#![deny(rust_2018_idioms)]\n \n #[macro_use]\n extern crate rustc;\n-extern crate rustc_target;\n-extern crate rustc_metadata;\n-extern crate rustc_mir;\n-extern crate rustc_incremental;\n-extern crate syntax;\n-extern crate syntax_pos;\n #[macro_use] extern crate rustc_data_structures;\n \n use rustc::ty::TyCtxt;\n@@ -42,7 +34,7 @@ pub mod symbol_names_test;\n /// error in codegen. This is used to write compile-fail tests\n /// that actually test that compilation succeeds without\n /// reporting an error.\n-pub fn check_for_rustc_errors_attr(tcx: TyCtxt) {\n+pub fn check_for_rustc_errors_attr(tcx: TyCtxt<'_, '_, '_>) {\n     if let Some((def_id, _)) = tcx.entry_fn(LOCAL_CRATE) {\n         if tcx.has_attr(def_id, \"rustc_error\") {\n             tcx.sess.span_fatal(tcx.def_span(def_id), \"compilation successful\");"}, {"sha": "f3a1b219f8a84d1929119f01019d0d253b4f46be", "filename": "src/librustc_codegen_utils/link.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0e622a8ba1d43904ff16231e4fe8a1907e66d563/src%2Flibrustc_codegen_utils%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e622a8ba1d43904ff16231e4fe8a1907e66d563/src%2Flibrustc_codegen_utils%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_utils%2Flink.rs?ref=0e622a8ba1d43904ff16231e4fe8a1907e66d563", "patch": "@@ -41,7 +41,7 @@ pub fn find_crate_name(sess: Option<&Session>,\n                        attrs: &[ast::Attribute],\n                        input: &Input) -> String {\n     let validate = |s: String, span: Option<Span>| {\n-        ::rustc_metadata::validate_crate_name(sess, &s, span);\n+        rustc_metadata::validate_crate_name(sess, &s, span);\n         s\n     };\n "}, {"sha": "8d105853d92f11e12f39da4273894d8738a9fb0c", "filename": "src/librustc_codegen_utils/symbol_names.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0e622a8ba1d43904ff16231e4fe8a1907e66d563/src%2Flibrustc_codegen_utils%2Fsymbol_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e622a8ba1d43904ff16231e4fe8a1907e66d563/src%2Flibrustc_codegen_utils%2Fsymbol_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_utils%2Fsymbol_names.rs?ref=0e622a8ba1d43904ff16231e4fe8a1907e66d563", "patch": "@@ -103,10 +103,12 @@ use rustc_mir::monomorphize::Instance;\n \n use syntax_pos::symbol::Symbol;\n \n+use log::debug;\n+\n use std::fmt::Write;\n use std::mem::discriminant;\n \n-pub fn provide(providers: &mut Providers) {\n+pub fn provide(providers: &mut Providers<'_>) {\n     *providers = Providers {\n         def_symbol_name,\n         symbol_name,"}]}