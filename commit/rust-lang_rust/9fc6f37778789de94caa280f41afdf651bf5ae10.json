{"sha": "9fc6f37778789de94caa280f41afdf651bf5ae10", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlmYzZmMzc3Nzg3ODlkZTk0Y2FhMjgwZjQxYWZkZjY1MWJmNWFlMTA=", "commit": {"author": {"name": "rail", "email": "12975677+rail-rain@users.noreply.github.com", "date": "2020-04-27T07:34:41Z"}, "committer": {"name": "rail", "email": "12975677+rail-rain@users.noreply.github.com", "date": "2020-04-27T07:34:41Z"}, "message": "Delay getting the snippet from slices", "tree": {"sha": "4e4031ec44c9c61e070acb582cea302c6ad9c53d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4e4031ec44c9c61e070acb582cea302c6ad9c53d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9fc6f37778789de94caa280f41afdf651bf5ae10", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9fc6f37778789de94caa280f41afdf651bf5ae10", "html_url": "https://github.com/rust-lang/rust/commit/9fc6f37778789de94caa280f41afdf651bf5ae10", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9fc6f37778789de94caa280f41afdf651bf5ae10/comments", "author": {"login": "rail-rain", "id": 12975677, "node_id": "MDQ6VXNlcjEyOTc1Njc3", "avatar_url": "https://avatars.githubusercontent.com/u/12975677?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rail-rain", "html_url": "https://github.com/rail-rain", "followers_url": "https://api.github.com/users/rail-rain/followers", "following_url": "https://api.github.com/users/rail-rain/following{/other_user}", "gists_url": "https://api.github.com/users/rail-rain/gists{/gist_id}", "starred_url": "https://api.github.com/users/rail-rain/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rail-rain/subscriptions", "organizations_url": "https://api.github.com/users/rail-rain/orgs", "repos_url": "https://api.github.com/users/rail-rain/repos", "events_url": "https://api.github.com/users/rail-rain/events{/privacy}", "received_events_url": "https://api.github.com/users/rail-rain/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rail-rain", "id": 12975677, "node_id": "MDQ6VXNlcjEyOTc1Njc3", "avatar_url": "https://avatars.githubusercontent.com/u/12975677?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rail-rain", "html_url": "https://github.com/rail-rain", "followers_url": "https://api.github.com/users/rail-rain/followers", "following_url": "https://api.github.com/users/rail-rain/following{/other_user}", "gists_url": "https://api.github.com/users/rail-rain/gists{/gist_id}", "starred_url": "https://api.github.com/users/rail-rain/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rail-rain/subscriptions", "organizations_url": "https://api.github.com/users/rail-rain/orgs", "repos_url": "https://api.github.com/users/rail-rain/repos", "events_url": "https://api.github.com/users/rail-rain/events{/privacy}", "received_events_url": "https://api.github.com/users/rail-rain/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4f2617c059f693ec72e5d31ad31fd85eba019ab1", "url": "https://api.github.com/repos/rust-lang/rust/commits/4f2617c059f693ec72e5d31ad31fd85eba019ab1", "html_url": "https://github.com/rust-lang/rust/commit/4f2617c059f693ec72e5d31ad31fd85eba019ab1"}], "stats": {"total": 30, "additions": 16, "deletions": 14}, "files": [{"sha": "8ab355566706ea03a5614c9d4949a6919283c412", "filename": "clippy_lints/src/loops.rs", "status": "modified", "additions": 16, "deletions": 14, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/9fc6f37778789de94caa280f41afdf651bf5ae10/clippy_lints%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fc6f37778789de94caa280f41afdf651bf5ae10/clippy_lints%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops.rs?ref=9fc6f37778789de94caa280f41afdf651bf5ae10", "patch": "@@ -812,8 +812,8 @@ impl Offset {\n     }\n }\n \n-struct FixedOffsetVar {\n-    var_name: String,\n+struct FixedOffsetVar<'hir> {\n+    var: &'hir Expr<'hir>,\n     offset: Offset,\n }\n \n@@ -947,13 +947,13 @@ fn detect_manual_memcpy<'a, 'tcx>(\n                 }\n             }\n \n-            let print_limit = |end: &Expr<'_>, offset: Offset, var_name: &str| {\n+            let print_limit = |end: &Expr<'_>, offset: Offset, var: &Expr<'_>| {\n                 if_chain! {\n                     if let ExprKind::MethodCall(method, _, len_args) = end.kind;\n                     if method.ident.name == sym!(len);\n                     if len_args.len() == 1;\n                     if let Some(arg) = len_args.get(0);\n-                    if snippet(cx, arg.span, \"??\") == var_name;\n+                    if var_def_id(cx, arg) == var_def_id(cx, var);\n                     then {\n                         match offset.sign {\n                             OffsetSign::Negative => format!(\"({} - {})\", snippet(cx, end.span, \"<src>.len()\"), offset.value),\n@@ -986,14 +986,12 @@ fn detect_manual_memcpy<'a, 'tcx>(\n                                 && is_slice_like(cx, cx.tables.expr_ty(seqexpr_right));\n                             if let Some(offset_left) = get_offset(cx, &idx_left, canonical_id);\n                             if let Some(offset_right) = get_offset(cx, &idx_right, canonical_id);\n-                            let var_name_left = snippet_opt(cx, seqexpr_left.span).unwrap_or_else(|| \"???\".into());\n-                            let var_name_right = snippet_opt(cx, seqexpr_right.span).unwrap_or_else(|| \"???\".into());\n \n                             // Source and destination must be different\n-                            if var_name_left != var_name_right;\n+                            if var_def_id(cx, seqexpr_left) != var_def_id(cx, seqexpr_right);\n                             then {\n-                                Some((FixedOffsetVar { var_name: var_name_left, offset: offset_left },\n-                                    FixedOffsetVar { var_name: var_name_right, offset: offset_right }))\n+                                Some((FixedOffsetVar { var: seqexpr_left, offset: offset_left },\n+                                    FixedOffsetVar { var: seqexpr_right, offset: offset_right }))\n                             } else {\n                                 None\n                             }\n@@ -1004,18 +1002,22 @@ fn detect_manual_memcpy<'a, 'tcx>(\n                     o.map(|(dst_var, src_var)| {\n                         let start_str = snippet(cx, start.span, \"\").to_string();\n                         let dst_offset = print_offset(&start_str, &dst_var.offset);\n-                        let dst_limit = print_limit(end, dst_var.offset, &dst_var.var_name);\n+                        let dst_limit = print_limit(end, dst_var.offset, dst_var.var);\n                         let src_offset = print_offset(&start_str, &src_var.offset);\n-                        let src_limit = print_limit(end, src_var.offset, &src_var.var_name);\n+                        let src_limit = print_limit(end, src_var.offset, src_var.var);\n+\n+                        let dst_var_name = snippet_opt(cx, dst_var.var.span).unwrap_or_else(|| \"???\".into());\n+                        let src_var_name = snippet_opt(cx, src_var.var.span).unwrap_or_else(|| \"???\".into());\n+\n                         let dst = if dst_offset == \"\" && dst_limit == \"\" {\n-                            dst_var.var_name\n+                            dst_var_name\n                         } else {\n-                            format!(\"{}[{}..{}]\", dst_var.var_name, dst_offset, dst_limit)\n+                            format!(\"{}[{}..{}]\", dst_var_name, dst_offset, dst_limit)\n                         };\n \n                         format!(\n                             \"{}.clone_from_slice(&{}[{}..{}])\",\n-                            dst, src_var.var_name, src_offset, src_limit\n+                            dst, src_var_name, src_offset, src_limit\n                         )\n                     })\n                 })"}]}