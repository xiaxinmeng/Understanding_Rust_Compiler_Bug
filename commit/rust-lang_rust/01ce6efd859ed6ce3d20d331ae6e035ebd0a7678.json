{"sha": "01ce6efd859ed6ce3d20d331ae6e035ebd0a7678", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAxY2U2ZWZkODU5ZWQ2Y2UzZDIwZDMzMWFlNmUwMzVlYmQwYTc2Nzg=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-01-06T02:01:03Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-01-07T08:43:49Z"}, "message": "libc: Prepare for movement to crates.io\n\nThis commit prepares the liblibc library to be moved to crates.io. Unlike the\nlog, serialize, term, etc crates, the source for this crate will *not* be\nduplicated out-of-tree. Instead a new rust-lang/libc repository will be created\nwith a submodule to this repository and it will use the source directly.\n\nIn order to compile within the stable ecosystem of Rust, this crate cannot link\nto libcore, and it also needs some tweaks for the other attributes that it has.\nAs a result this commit tweaks the source of the crate to link to libcore when\nbuilt in tree but link to libstd when built via cargo.\n\nNote that the rust-lang/libc crate isn't quite prepared just yet, there's a\nCargo bug or two that I'd like to iron out before publishing it. This is simply\npreparing the in-tree source.", "tree": {"sha": "de9b8f12a966bfd2c2b591d38be0c1b56068cca0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/de9b8f12a966bfd2c2b591d38be0c1b56068cca0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/01ce6efd859ed6ce3d20d331ae6e035ebd0a7678", "comment_count": 7, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/01ce6efd859ed6ce3d20d331ae6e035ebd0a7678", "html_url": "https://github.com/rust-lang/rust/commit/01ce6efd859ed6ce3d20d331ae6e035ebd0a7678", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/01ce6efd859ed6ce3d20d331ae6e035ebd0a7678/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9e4e524e0eb17c8f463e731f23b544003e8709c6", "url": "https://api.github.com/repos/rust-lang/rust/commits/9e4e524e0eb17c8f463e731f23b544003e8709c6", "html_url": "https://github.com/rust-lang/rust/commit/9e4e524e0eb17c8f463e731f23b544003e8709c6"}], "stats": {"total": 27, "additions": 6, "deletions": 21}, "files": [{"sha": "347a958076dff36706f82b14ddd57a45c0e74346", "filename": "src/liblibc/lib.rs", "status": "modified", "additions": 6, "deletions": 21, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/01ce6efd859ed6ce3d20d331ae6e035ebd0a7678/src%2Fliblibc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01ce6efd859ed6ce3d20d331ae6e035ebd0a7678/src%2Fliblibc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliblibc%2Flib.rs?ref=01ce6efd859ed6ce3d20d331ae6e035ebd0a7678", "patch": "@@ -9,10 +9,9 @@\n // except according to those terms.\n \n #![crate_name = \"libc\"]\n-#![experimental]\n-#![no_std] // we don't need std, and we can't have std, since it doesn't exist\n-           // yet. std depends on us.\n #![crate_type = \"rlib\"]\n+#![cfg_attr(not(feature = \"cargo-build\"), experimental)]\n+#![no_std]\n #![doc(html_logo_url = \"http://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n        html_favicon_url = \"http://www.rust-lang.org/favicon.ico\",\n        html_root_url = \"http://doc.rust-lang.org/nightly/\",\n@@ -70,20 +69,14 @@\n //! in multiple derived systems. This is the 4.4BSD r2 / 1995 release, the final\n //! one from Berkeley after the lawsuits died down and the CSRG dissolved.\n \n-#![allow(non_camel_case_types)]\n-#![allow(non_snake_case)]\n-#![allow(non_upper_case_globals)]\n-#![allow(missing_docs)]\n-#![allow(non_snake_case)]\n-#![allow(raw_pointer_derive)]\n+#![allow(bad_style, raw_pointer_derive)]\n \n-extern crate core;\n+#[cfg(feature = \"cargo-build\")] extern crate \"std\" as core;\n+#[cfg(not(feature = \"cargo-build\"))] extern crate core;\n \n #[cfg(test)] extern crate std;\n #[cfg(test)] extern crate test;\n \n-pub use self::Nullable::*;\n-\n // Explicit export lists for the intersection (provided here) mean that\n // you can write more-platform-agnostic code if you stick to just these\n // symbols.\n@@ -311,14 +304,6 @@ pub use types::os::arch::extra::{mach_timebase_info};\n #[link(name = \"m\")]\n extern {}\n \n-/// A wrapper for a nullable pointer. Don't use this except for interacting\n-/// with libc. Basically Option, but without the dependence on libstd.\n-// If/when libprim happens, this can be removed in favor of that\n-pub enum Nullable<T> {\n-    Null,\n-    NotNull(T)\n-}\n-\n pub mod types {\n \n     // Types tend to vary *per architecture* so we pull their definitions out\n@@ -4648,7 +4633,7 @@ pub mod funcs {\n             extern {\n                 pub fn glob(pattern: *const c_char,\n                             flags: c_int,\n-                            errfunc: ::Nullable<extern \"C\" fn(epath: *const c_char,\n+                            errfunc: ::core::option::Option<extern \"C\" fn(epath: *const c_char,\n                                                               errno: c_int) -> c_int>,\n                             pglob: *mut glob_t);\n                 pub fn globfree(pglob: *mut glob_t);"}]}