{"sha": "8307d38dc1c1eb8a26d4a9e1a8e40832d1fd1257", "node_id": "C_kwDOAAsO6NoAKDgzMDdkMzhkYzFjMWViOGEyNmQ0YTllMWE4ZTQwODMyZDFmZDEyNTc", "commit": {"author": {"name": "Jake Heinz", "email": "jh@discordapp.com", "date": "2021-11-28T00:42:42Z"}, "committer": {"name": "Jake Heinz", "email": "jh@discordapp.com", "date": "2021-11-28T00:42:42Z"}, "message": "cleanups", "tree": {"sha": "92b481a50131a66ff5a57525eea19b098a78ec91", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/92b481a50131a66ff5a57525eea19b098a78ec91"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8307d38dc1c1eb8a26d4a9e1a8e40832d1fd1257", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8307d38dc1c1eb8a26d4a9e1a8e40832d1fd1257", "html_url": "https://github.com/rust-lang/rust/commit/8307d38dc1c1eb8a26d4a9e1a8e40832d1fd1257", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8307d38dc1c1eb8a26d4a9e1a8e40832d1fd1257/comments", "author": {"login": "jhgg", "id": 5489149, "node_id": "MDQ6VXNlcjU0ODkxNDk=", "avatar_url": "https://avatars.githubusercontent.com/u/5489149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jhgg", "html_url": "https://github.com/jhgg", "followers_url": "https://api.github.com/users/jhgg/followers", "following_url": "https://api.github.com/users/jhgg/following{/other_user}", "gists_url": "https://api.github.com/users/jhgg/gists{/gist_id}", "starred_url": "https://api.github.com/users/jhgg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jhgg/subscriptions", "organizations_url": "https://api.github.com/users/jhgg/orgs", "repos_url": "https://api.github.com/users/jhgg/repos", "events_url": "https://api.github.com/users/jhgg/events{/privacy}", "received_events_url": "https://api.github.com/users/jhgg/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jhgg", "id": 5489149, "node_id": "MDQ6VXNlcjU0ODkxNDk=", "avatar_url": "https://avatars.githubusercontent.com/u/5489149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jhgg", "html_url": "https://github.com/jhgg", "followers_url": "https://api.github.com/users/jhgg/followers", "following_url": "https://api.github.com/users/jhgg/following{/other_user}", "gists_url": "https://api.github.com/users/jhgg/gists{/gist_id}", "starred_url": "https://api.github.com/users/jhgg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jhgg/subscriptions", "organizations_url": "https://api.github.com/users/jhgg/orgs", "repos_url": "https://api.github.com/users/jhgg/repos", "events_url": "https://api.github.com/users/jhgg/events{/privacy}", "received_events_url": "https://api.github.com/users/jhgg/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e033d8c2a24ce7670d03054e7b932e387d32dcec", "url": "https://api.github.com/repos/rust-lang/rust/commits/e033d8c2a24ce7670d03054e7b932e387d32dcec", "html_url": "https://github.com/rust-lang/rust/commit/e033d8c2a24ce7670d03054e7b932e387d32dcec"}], "stats": {"total": 247, "additions": 99, "deletions": 148}, "files": [{"sha": "970d37b9cbd90e7d38d6e00559d42e65db4dc3a8", "filename": "crates/ide/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8307d38dc1c1eb8a26d4a9e1a8e40832d1fd1257/crates%2Fide%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8307d38dc1c1eb8a26d4a9e1a8e40832d1fd1257/crates%2Fide%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Flib.rs?ref=8307d38dc1c1eb8a26d4a9e1a8e40832d1fd1257", "patch": "@@ -364,8 +364,8 @@ impl Analysis {\n     pub fn symbol_search(&self, query: Query) -> Cancellable<Vec<NavigationTarget>> {\n         self.with_db(|db| {\n             symbol_index::world_symbols(db, query)\n-                .into_iter()\n-                .map(|s| s.to_nav(db))\n+                .into_iter() // xx: should we make this a par iter?\n+                .filter_map(|s| s.try_to_nav(db))\n                 .collect::<Vec<_>>()\n         })\n     }"}, {"sha": "76ec99ce9e89bc914c6af641c3c3fe2b6ceb4d05", "filename": "crates/ide/src/navigation_target.rs", "status": "modified", "additions": 12, "deletions": 9, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/8307d38dc1c1eb8a26d4a9e1a8e40832d1fd1257/crates%2Fide%2Fsrc%2Fnavigation_target.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8307d38dc1c1eb8a26d4a9e1a8e40832d1fd1257/crates%2Fide%2Fsrc%2Fnavigation_target.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fnavigation_target.rs?ref=8307d38dc1c1eb8a26d4a9e1a8e40832d1fd1257", "patch": "@@ -167,10 +167,14 @@ impl NavigationTarget {\n     }\n }\n \n-impl ToNav for FileSymbol {\n-    fn to_nav(&self, db: &RootDatabase) -> NavigationTarget {\n-        NavigationTarget {\n-            file_id: self.original_file_id,\n+impl TryToNav for FileSymbol {\n+    fn try_to_nav(&self, db: &RootDatabase) -> Option<NavigationTarget> {\n+        let semantics = Semantics::new(db);\n+        let full_range = self.loc.original_range(&semantics)?;\n+        let name_range = self.loc.original_name_range(&semantics)?;\n+\n+        Some(NavigationTarget {\n+            file_id: full_range.file_id,\n             name: self.name.clone(),\n             kind: Some(match self.kind {\n                 FileSymbolKind::Function => SymbolKind::Function,\n@@ -184,12 +188,12 @@ impl ToNav for FileSymbol {\n                 FileSymbolKind::Macro => SymbolKind::Macro,\n                 FileSymbolKind::Union => SymbolKind::Union,\n             }),\n-            full_range: self.range,\n-            focus_range: self.name_range,\n+            full_range: full_range.range,\n+            focus_range: Some(name_range.range),\n             container_name: self.container_name.clone(),\n             description: description_from_symbol(db, self),\n             docs: None,\n-        }\n+        })\n     }\n }\n \n@@ -517,8 +521,7 @@ impl TryToNav for hir::ConstParam {\n /// e.g. `struct Name`, `enum Name`, `fn Name`\n pub(crate) fn description_from_symbol(db: &RootDatabase, symbol: &FileSymbol) -> Option<String> {\n     let sema = Semantics::new(db);\n-    let syntax = sema.parse_or_expand(symbol.hir_file_id)?;\n-    let node = symbol.ptr.to_node(&syntax);\n+    let node = symbol.loc.syntax(&sema)?;\n \n     match_ast! {\n         match node {"}, {"sha": "e0dbe6caf0af23383c62df50d6503415697fca97", "filename": "crates/ide_db/src/items_locator.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8307d38dc1c1eb8a26d4a9e1a8e40832d1fd1257/crates%2Fide_db%2Fsrc%2Fitems_locator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8307d38dc1c1eb8a26d4a9e1a8e40832d1fd1257/crates%2Fide_db%2Fsrc%2Fitems_locator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fitems_locator.rs?ref=8307d38dc1c1eb8a26d4a9e1a8e40832d1fd1257", "patch": "@@ -133,9 +133,8 @@ fn get_name_definition(\n     import_candidate: &FileSymbol,\n ) -> Option<Definition> {\n     let _p = profile::span(\"get_name_definition\");\n-    let file_id = import_candidate.hir_file_id;\n \n-    let candidate_node = import_candidate.ptr.to_node(&sema.parse_or_expand(file_id)?);\n+    let candidate_node = import_candidate.loc.syntax(sema)?;\n     let candidate_name_node = if candidate_node.kind() != NAME {\n         candidate_node.children().find(|it| it.kind() == NAME)?\n     } else {"}, {"sha": "93d00118dc8c63476209f7223d967e33afed949a", "filename": "crates/ide_db/src/symbol_index.rs", "status": "modified", "additions": 84, "deletions": 135, "changes": 219, "blob_url": "https://github.com/rust-lang/rust/blob/8307d38dc1c1eb8a26d4a9e1a8e40832d1fd1257/crates%2Fide_db%2Fsrc%2Fsymbol_index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8307d38dc1c1eb8a26d4a9e1a8e40832d1fd1257/crates%2Fide_db%2Fsrc%2Fsymbol_index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fsymbol_index.rs?ref=8307d38dc1c1eb8a26d4a9e1a8e40832d1fd1257", "patch": "@@ -30,20 +30,18 @@ use std::{\n \n use base_db::{\n     salsa::{self, ParallelDatabase},\n-    CrateId, FileId, SourceDatabaseExt, SourceRootId,\n+    CrateId, FileId, FileRange, SourceDatabaseExt, SourceRootId, Upcast,\n };\n use fst::{self, Streamer};\n use hir::{\n-    db::DefDatabase, AdtId, AssocContainerId, AssocItemLoc, DefHasSource, HirFileId, ItemLoc,\n-    ItemScope, ItemTreeNode, Lookup, ModuleData, ModuleDefId, ModuleId,\n+    db::DefDatabase, AdtId, AssocContainerId, AssocItemLoc, DefHasSource, HirFileId, InFile,\n+    ItemLoc, ItemScope, ItemTreeNode, Lookup, ModuleData, ModuleDefId, ModuleId, Semantics,\n };\n use rayon::prelude::*;\n use rustc_hash::{FxHashMap, FxHashSet};\n use syntax::{\n     ast::{self, HasName},\n-    match_ast, AstNode, Parse, SmolStr, SourceFile,\n-    SyntaxKind::*,\n-    SyntaxNode, SyntaxNodePtr, TextRange, WalkEvent,\n+    AstNode, Parse, SmolStr, SourceFile, SyntaxNode, SyntaxNodePtr,\n };\n \n use crate::RootDatabase;\n@@ -371,16 +369,52 @@ impl Query {\n /// possible.\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct FileSymbol {\n-    pub hir_file_id: HirFileId,\n-    pub original_file_id: FileId,\n     pub name: SmolStr,\n+    pub loc: DeclarationLocation,\n     pub kind: FileSymbolKind,\n-    pub range: TextRange,\n-    pub ptr: SyntaxNodePtr,\n-    pub name_range: Option<TextRange>,\n     pub container_name: Option<SmolStr>,\n }\n \n+#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n+pub struct DeclarationLocation {\n+    /// The file id for both the `ptr` and `name_ptr`.\n+    pub hir_file_id: HirFileId,\n+    /// This points to the whole syntax node of the declaration.\n+    pub ptr: SyntaxNodePtr,\n+    /// This points to the [`syntax::ast::Name`] identifier of the declaration.\n+    pub name_ptr: SyntaxNodePtr,\n+}\n+\n+impl DeclarationLocation {\n+    pub fn syntax(&self, semantics: &Semantics<'_, RootDatabase>) -> Option<SyntaxNode> {\n+        let root = semantics.parse_or_expand(self.hir_file_id)?;\n+        Some(self.ptr.to_node(&root))\n+    }\n+\n+    pub fn original_range(&self, semantics: &Semantics<'_, RootDatabase>) -> Option<FileRange> {\n+        find_original_file_range(semantics, self.hir_file_id, &self.ptr)\n+    }\n+\n+    pub fn original_name_range(\n+        &self,\n+        semantics: &Semantics<'_, RootDatabase>,\n+    ) -> Option<FileRange> {\n+        find_original_file_range(semantics, self.hir_file_id, &self.name_ptr)\n+    }\n+}\n+\n+fn find_original_file_range(\n+    semantics: &Semantics<'_, RootDatabase>,\n+    file_id: HirFileId,\n+    ptr: &SyntaxNodePtr,\n+) -> Option<FileRange> {\n+    let root = semantics.parse_or_expand(file_id)?;\n+    let node = ptr.to_node(&root);\n+    let node = InFile::new(file_id, &node);\n+\n+    Some(node.original_file_range(semantics.db.upcast()))\n+}\n+\n #[derive(PartialEq, Eq, Hash, Clone, Copy, Debug)]\n pub enum FileSymbolKind {\n     Const,\n@@ -408,82 +442,9 @@ impl FileSymbolKind {\n     }\n }\n \n-fn source_file_to_file_symbols(source_file: &SourceFile, file_id: FileId) -> Vec<FileSymbol> {\n-    let mut symbols = Vec::new();\n-    let mut stack = Vec::new();\n-\n-    for event in source_file.syntax().preorder() {\n-        match event {\n-            WalkEvent::Enter(node) => {\n-                if let Some(mut symbol) = to_file_symbol(&node, file_id) {\n-                    symbol.container_name = stack.last().cloned();\n-\n-                    stack.push(symbol.name.clone());\n-                    symbols.push(symbol);\n-                }\n-            }\n-\n-            WalkEvent::Leave(node) => {\n-                if to_symbol(&node).is_some() {\n-                    stack.pop();\n-                }\n-            }\n-        }\n-    }\n-\n-    symbols\n-}\n-\n-fn to_symbol(node: &SyntaxNode) -> Option<(SmolStr, SyntaxNodePtr, TextRange)> {\n-    fn decl<N: HasName>(node: N) -> Option<(SmolStr, SyntaxNodePtr, TextRange)> {\n-        let name = node.name()?;\n-        let name_range = name.syntax().text_range();\n-        let name = name.text().into();\n-        let ptr = SyntaxNodePtr::new(node.syntax());\n-\n-        Some((name, ptr, name_range))\n-    }\n-    match_ast! {\n-        match node {\n-            ast::Fn(it) => decl(it),\n-            ast::Struct(it) => decl(it),\n-            ast::Enum(it) => decl(it),\n-            ast::Trait(it) => decl(it),\n-            ast::Module(it) => decl(it),\n-            ast::TypeAlias(it) => decl(it),\n-            ast::Const(it) => decl(it),\n-            ast::Static(it) => decl(it),\n-            ast::Macro(it) => decl(it),\n-            ast::Union(it) => decl(it),\n-            _ => None,\n-        }\n-    }\n-}\n-\n-fn to_file_symbol(node: &SyntaxNode, file_id: FileId) -> Option<FileSymbol> {\n-    to_symbol(node).map(move |(name, ptr, name_range)| FileSymbol {\n-        name,\n-        kind: match node.kind() {\n-            FN => FileSymbolKind::Function,          // FunctionId\n-            STRUCT => FileSymbolKind::Struct,        // AdtId::StructId\n-            ENUM => FileSymbolKind::Enum,            // AdtId::EnumId\n-            TRAIT => FileSymbolKind::Trait,          // TraitId\n-            MODULE => FileSymbolKind::Module,        // ModuleId\n-            TYPE_ALIAS => FileSymbolKind::TypeAlias, // TypeAliasId\n-            CONST => FileSymbolKind::Const,          // ConstId\n-            STATIC => FileSymbolKind::Static,        // StaticId\n-            MACRO_RULES => FileSymbolKind::Macro,    // via ItemScope::macros\n-            MACRO_DEF => FileSymbolKind::Macro,      // via ItemScope::macros\n-            UNION => FileSymbolKind::Union,          // AdtId::UnionId\n-            kind => unreachable!(\"{:?}\", kind),\n-        },\n-        range: node.text_range(),\n-        ptr,\n-        hir_file_id: file_id.into(),\n-        original_file_id: file_id,\n-        name_range: Some(name_range),\n-        container_name: None,\n-    })\n+fn source_file_to_file_symbols(_source_file: &SourceFile, _file_id: FileId) -> Vec<FileSymbol> {\n+    // todo: delete this.\n+    vec![]\n }\n \n fn module_data_to_file_symbols(db: &dyn DefDatabase, module_data: &ModuleData) -> Vec<FileSymbol> {\n@@ -498,24 +459,8 @@ fn collect_symbols_from_item_scope(\n     symbols: &mut Vec<FileSymbol>,\n     scope: &ItemScope,\n ) {\n-    // todo: dedupe code.\n-    fn decl_assoc<L, T>(db: &dyn DefDatabase, id: L, kind: FileSymbolKind) -> Option<FileSymbol>\n-    where\n-        L: Lookup<Data = AssocItemLoc<T>>,\n-        T: ItemTreeNode,\n-        <T as ItemTreeNode>::Source: HasName,\n-    {\n-        let loc = id.lookup(db);\n-        let source = loc.source(db);\n-\n-        let name = source.value.name()?;\n-        let name_range = source.with_value(name.syntax()).original_file_range(db.upcast());\n-        let hir_file_id = loc.id.file_id();\n-\n-        let name = name.text().into();\n-        let ptr = SyntaxNodePtr::new(source.value.syntax());\n-\n-        let container_name = match loc.container {\n+    fn container_name(db: &dyn DefDatabase, container: AssocContainerId) -> Option<SmolStr> {\n+        match container {\n             AssocContainerId::ModuleId(module_id) => {\n                 let def_map = module_id.def_map(db);\n                 let module_data = &def_map[module_id.local_id];\n@@ -530,19 +475,32 @@ fn collect_symbols_from_item_scope(\n                 source.value.name().map(|n| n.text().into())\n             }\n             AssocContainerId::ImplId(_) => None,\n-        };\n+        }\n+    }\n+\n+    fn decl_assoc<L, T>(db: &dyn DefDatabase, id: L, kind: FileSymbolKind) -> Option<FileSymbol>\n+    where\n+        L: Lookup<Data = AssocItemLoc<T>>,\n+        T: ItemTreeNode,\n+        <T as ItemTreeNode>::Source: HasName,\n+    {\n+        let loc = id.lookup(db);\n+        let source = loc.source(db);\n+        let name_node = source.value.name()?;\n+        let container_name = container_name(db, loc.container);\n \n         Some(FileSymbol {\n-            name,\n+            name: name_node.text().into(),\n             kind,\n-            range: source.with_value(source.value.syntax()).original_file_range(db.upcast()).range,\n             container_name,\n-            hir_file_id,\n-            original_file_id: name_range.file_id,\n-            name_range: Some(name_range.range),\n-            ptr,\n+            loc: DeclarationLocation {\n+                hir_file_id: source.file_id,\n+                ptr: SyntaxNodePtr::new(source.value.syntax()),\n+                name_ptr: SyntaxNodePtr::new(name_node.syntax()),\n+            },\n         })\n     }\n+\n     fn decl<L, T>(db: &dyn DefDatabase, id: L, kind: FileSymbolKind) -> Option<FileSymbol>\n     where\n         L: Lookup<Data = ItemLoc<T>>,\n@@ -551,45 +509,36 @@ fn collect_symbols_from_item_scope(\n     {\n         let loc = id.lookup(db);\n         let source = loc.source(db);\n-        let name = source.value.name()?;\n-        let name_range = source.with_value(name.syntax()).original_file_range(db.upcast());\n-        let hir_file_id = loc.id.file_id();\n-        let name = name.text().into();\n-        let ptr = SyntaxNodePtr::new(source.value.syntax());\n+        let name_node = source.value.name()?;\n \n         Some(FileSymbol {\n-            name,\n+            name: name_node.text().into(),\n             kind,\n-            range: source.with_value(source.value.syntax()).original_file_range(db.upcast()).range,\n             container_name: None,\n-            hir_file_id,\n-            original_file_id: name_range.file_id,\n-            name_range: Some(name_range.range),\n-            ptr,\n+            loc: DeclarationLocation {\n+                hir_file_id: source.file_id,\n+                ptr: SyntaxNodePtr::new(source.value.syntax()),\n+                name_ptr: SyntaxNodePtr::new(name_node.syntax()),\n+            },\n         })\n     }\n \n     fn decl_module(db: &dyn DefDatabase, module_id: ModuleId) -> Option<FileSymbol> {\n         let def_map = module_id.def_map(db);\n         let module_data = &def_map[module_id.local_id];\n         let declaration = module_data.origin.declaration()?;\n-        let hir_file_id = declaration.file_id;\n-\n         let module = declaration.to_node(db.upcast());\n-        let name = module.name()?;\n-        let name_range = declaration.with_value(name.syntax()).original_file_range(db.upcast());\n-        let name = name.text().into();\n-        let ptr = SyntaxNodePtr::new(module.syntax());\n+        let name_node = module.name()?;\n \n         Some(FileSymbol {\n-            name,\n+            name: name_node.text().into(),\n             kind: FileSymbolKind::Module,\n-            range: declaration.with_value(module.syntax()).original_file_range(db.upcast()).range,\n             container_name: None,\n-            hir_file_id,\n-            original_file_id: name_range.file_id,\n-            name_range: Some(name_range.range),\n-            ptr,\n+            loc: DeclarationLocation {\n+                hir_file_id: declaration.file_id,\n+                ptr: SyntaxNodePtr::new(module.syntax()),\n+                name_ptr: SyntaxNodePtr::new(name_node.syntax()),\n+            },\n         })\n     }\n "}]}