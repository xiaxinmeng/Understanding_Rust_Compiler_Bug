{"sha": "3e6b1ac96469061320ae1436ee99f39ae1c5ea85", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNlNmIxYWM5NjQ2OTA2MTMyMGFlMTQzNmVlOTlmMzlhZTFjNWVhODU=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-03-21T04:33:31Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-03-21T04:33:31Z"}, "message": "Rollup merge of #70187 - matthiaskrgr:cl2ppy, r=Mark-Simulacrum\n\nmore clippy fixes\n\n    * remove redundant returns (clippy::needless_return)\n    * remove redundant import (clippy::single_component_path_imports)\n    * remove redundant format!() call (clippy::useless_format)\n    * don't use ok() before calling expect() (clippy::ok_expect)", "tree": {"sha": "4ca38f50d3eb143c2fbca709db65598ee9d48172", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4ca38f50d3eb143c2fbca709db65598ee9d48172"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3e6b1ac96469061320ae1436ee99f39ae1c5ea85", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJedZkbCRBK7hj4Ov3rIwAAdHIIADjKqWk61frpf4lm/asxow/e\nTSI6WoeJ3mLXNXbvMhfJkhkStwVewtMoSz5XX6nLq4rLCs6AOES3YwOZd/wcd7Aq\nntjHfu4LmxtPnGE9ZcOKfxki4dMx2PZqYxlZ01kRN+w0eGdFx/2U3wYuZc7jVB9F\nUMb0y97hIYREN28mV7NQjHuQAxiWjKmjJcueNTEeYey7yKHfroiItmk4BKll7rZC\n1jdEMSWPp7SirCPk8Trxy01IGXbXcrGYYHH2R6XC3vVBPbD7Z5HA1VQTmBuPa9wV\nz8GTLB0l2SnS13xM/IJ0N+j8fRvzef5ylkZQC7loAcvyDWKdq6DANR9rPkFxbDU=\n=R+F9\n-----END PGP SIGNATURE-----\n", "payload": "tree 4ca38f50d3eb143c2fbca709db65598ee9d48172\nparent 621f2b7e905644eac2770937434c42f810824631\nparent ad00e9188766b8accdce93b264ed8b13aa12a820\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1584765211 +0100\ncommitter GitHub <noreply@github.com> 1584765211 +0100\n\nRollup merge of #70187 - matthiaskrgr:cl2ppy, r=Mark-Simulacrum\n\nmore clippy fixes\n\n    * remove redundant returns (clippy::needless_return)\n    * remove redundant import (clippy::single_component_path_imports)\n    * remove redundant format!() call (clippy::useless_format)\n    * don't use ok() before calling expect() (clippy::ok_expect)\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3e6b1ac96469061320ae1436ee99f39ae1c5ea85", "html_url": "https://github.com/rust-lang/rust/commit/3e6b1ac96469061320ae1436ee99f39ae1c5ea85", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3e6b1ac96469061320ae1436ee99f39ae1c5ea85/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "621f2b7e905644eac2770937434c42f810824631", "url": "https://api.github.com/repos/rust-lang/rust/commits/621f2b7e905644eac2770937434c42f810824631", "html_url": "https://github.com/rust-lang/rust/commit/621f2b7e905644eac2770937434c42f810824631"}, {"sha": "ad00e9188766b8accdce93b264ed8b13aa12a820", "url": "https://api.github.com/repos/rust-lang/rust/commits/ad00e9188766b8accdce93b264ed8b13aa12a820", "html_url": "https://github.com/rust-lang/rust/commit/ad00e9188766b8accdce93b264ed8b13aa12a820"}], "stats": {"total": 314, "additions": 142, "deletions": 172}, "files": [{"sha": "6cbd26a78de726bed1d5ac403f56397f8f1ddd06", "filename": "src/libcore/hint.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e6b1ac96469061320ae1436ee99f39ae1c5ea85/src%2Flibcore%2Fhint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e6b1ac96469061320ae1436ee99f39ae1c5ea85/src%2Flibcore%2Fhint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fhint.rs?ref=3e6b1ac96469061320ae1436ee99f39ae1c5ea85", "patch": "@@ -114,6 +114,6 @@ pub fn black_box<T>(dummy: T) -> T {\n     // more than we want, but it's so far good enough.\n     unsafe {\n         asm!(\"\" : : \"r\"(&dummy));\n-        return dummy;\n+        dummy\n     }\n }"}, {"sha": "4dd276d2e032c9df90c1ad45864ee192349eb67b", "filename": "src/librustc/lint.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e6b1ac96469061320ae1436ee99f39ae1c5ea85/src%2Flibrustc%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e6b1ac96469061320ae1436ee99f39ae1c5ea85/src%2Flibrustc%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint.rs?ref=3e6b1ac96469061320ae1436ee99f39ae1c5ea85", "patch": "@@ -85,7 +85,7 @@ impl LintLevelSets {\n             level = cmp::min(*driver_level, level);\n         }\n \n-        return (level, src);\n+        (level, src)\n     }\n \n     pub fn get_lint_id_level("}, {"sha": "1a63dc9dcf977f0b63efae6c968827e3de52574d", "filename": "src/librustc/middle/region.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3e6b1ac96469061320ae1436ee99f39ae1c5ea85/src%2Flibrustc%2Fmiddle%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e6b1ac96469061320ae1436ee99f39ae1c5ea85/src%2Flibrustc%2Fmiddle%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fregion.rs?ref=3e6b1ac96469061320ae1436ee99f39ae1c5ea85", "patch": "@@ -467,7 +467,7 @@ impl<'tcx> ScopeTree {\n         }\n \n         debug!(\"temporary_scope({:?}) = None\", expr_id);\n-        return None;\n+        None\n     }\n \n     /// Returns the lifetime of the variable `id`.\n@@ -498,7 +498,7 @@ impl<'tcx> ScopeTree {\n \n         debug!(\"is_subscope_of({:?}, {:?})=true\", subscope, superscope);\n \n-        return true;\n+        true\n     }\n \n     /// Returns the ID of the innermost containing body."}, {"sha": "0e3776f32e0e8b7a9071afc484a09adbc6f37bf8", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3e6b1ac96469061320ae1436ee99f39ae1c5ea85/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e6b1ac96469061320ae1436ee99f39ae1c5ea85/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=3e6b1ac96469061320ae1436ee99f39ae1c5ea85", "patch": "@@ -1447,11 +1447,11 @@ impl<'tcx> TyCtxt<'tcx> {\n             _ => return None,\n         };\n \n-        return Some(FreeRegionInfo {\n+        Some(FreeRegionInfo {\n             def_id: suitable_region_binding_scope,\n             boundregion: bound_region,\n             is_impl_item,\n-        });\n+        })\n     }\n \n     pub fn return_type_impl_trait(&self, scope_def_id: DefId) -> Option<(Ty<'tcx>, Span)> {"}, {"sha": "872e06e1176dc06ba88c81bded574e186c247273", "filename": "src/librustc/ty/relate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e6b1ac96469061320ae1436ee99f39ae1c5ea85/src%2Flibrustc%2Fty%2Frelate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e6b1ac96469061320ae1436ee99f39ae1c5ea85/src%2Flibrustc%2Fty%2Frelate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Frelate.rs?ref=3e6b1ac96469061320ae1436ee99f39ae1c5ea85", "patch": "@@ -440,7 +440,7 @@ pub fn super_relate_tys<R: TypeRelation<'tcx>>(\n                         (Some(sz_a_val), Some(sz_b_val)) => Err(TypeError::FixedArraySize(\n                             expected_found(relation, &sz_a_val, &sz_b_val),\n                         )),\n-                        _ => return Err(err),\n+                        _ => Err(err),\n                     }\n                 }\n             }"}, {"sha": "42cd2f52cb3ad1d1e52d1335b81338135446257f", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3e6b1ac96469061320ae1436ee99f39ae1c5ea85/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e6b1ac96469061320ae1436ee99f39ae1c5ea85/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=3e6b1ac96469061320ae1436ee99f39ae1c5ea85", "patch": "@@ -1612,7 +1612,7 @@ impl<'tcx> PolyExistentialProjection<'tcx> {\n     }\n \n     pub fn item_def_id(&self) -> DefId {\n-        return self.skip_binder().item_def_id;\n+        self.skip_binder().item_def_id\n     }\n }\n \n@@ -2000,8 +2000,8 @@ impl<'tcx> TyS<'tcx> {\n     #[inline]\n     pub fn is_unsafe_ptr(&self) -> bool {\n         match self.kind {\n-            RawPtr(_) => return true,\n-            _ => return false,\n+            RawPtr(_) => true,\n+            _ => false,\n         }\n     }\n "}, {"sha": "a3acc14856e1febbb4b168dfe7e0877d9d4690dc", "filename": "src/librustc/ty/subst.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e6b1ac96469061320ae1436ee99f39ae1c5ea85/src%2Flibrustc%2Fty%2Fsubst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e6b1ac96469061320ae1436ee99f39ae1c5ea85/src%2Flibrustc%2Fty%2Fsubst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsubst.rs?ref=3e6b1ac96469061320ae1436ee99f39ae1c5ea85", "patch": "@@ -524,7 +524,7 @@ impl<'a, 'tcx> TypeFolder<'tcx> for SubstFolder<'a, 'tcx> {\n             self.root_ty = None;\n         }\n \n-        return t1;\n+        t1\n     }\n \n     fn fold_const(&mut self, c: &'tcx ty::Const<'tcx>) -> &'tcx ty::Const<'tcx> {"}, {"sha": "64a810bdcf687a1fe7caf09ebb6970f1c885ac01", "filename": "src/librustc_builtin_macros/deriving/decodable.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3e6b1ac96469061320ae1436ee99f39ae1c5ea85/src%2Flibrustc_builtin_macros%2Fderiving%2Fdecodable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e6b1ac96469061320ae1436ee99f39ae1c5ea85/src%2Flibrustc_builtin_macros%2Fderiving%2Fdecodable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Fderiving%2Fdecodable.rs?ref=3e6b1ac96469061320ae1436ee99f39ae1c5ea85", "patch": "@@ -87,7 +87,7 @@ fn decodable_substructure(\n     let blkarg = cx.ident_of(\"_d\", trait_span);\n     let blkdecoder = cx.expr_ident(trait_span, blkarg);\n \n-    return match *substr.fields {\n+    match *substr.fields {\n         StaticStruct(_, ref summary) => {\n             let nfields = match *summary {\n                 Unnamed(ref fields, _) => fields.len(),\n@@ -178,7 +178,7 @@ fn decodable_substructure(\n             )\n         }\n         _ => cx.bug(\"expected StaticEnum or StaticStruct in derive(Decodable)\"),\n-    };\n+    }\n }\n \n /// Creates a decoder for a single enum variant/struct:"}, {"sha": "27d5263320041221b3ac3d18c340db64b0849eac", "filename": "src/librustc_builtin_macros/deriving/default.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3e6b1ac96469061320ae1436ee99f39ae1c5ea85/src%2Flibrustc_builtin_macros%2Fderiving%2Fdefault.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e6b1ac96469061320ae1436ee99f39ae1c5ea85/src%2Flibrustc_builtin_macros%2Fderiving%2Fdefault.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Fderiving%2Fdefault.rs?ref=3e6b1ac96469061320ae1436ee99f39ae1c5ea85", "patch": "@@ -53,7 +53,7 @@ fn default_substructure(\n     let default_ident = cx.std_path(&[kw::Default, sym::Default, kw::Default]);\n     let default_call = |span| cx.expr_call_global(span, default_ident.clone(), Vec::new());\n \n-    return match *substr.fields {\n+    match *substr.fields {\n         StaticStruct(_, ref summary) => match *summary {\n             Unnamed(ref fields, is_tuple) => {\n                 if !is_tuple {\n@@ -83,5 +83,5 @@ fn default_substructure(\n             DummyResult::raw_expr(trait_span, true)\n         }\n         _ => cx.span_bug(trait_span, \"method in `derive(Default)`\"),\n-    };\n+    }\n }"}, {"sha": "54926ec3fd502aeb44cf1ebbeb2c697e5073e4aa", "filename": "src/librustc_builtin_macros/deriving/encodable.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3e6b1ac96469061320ae1436ee99f39ae1c5ea85/src%2Flibrustc_builtin_macros%2Fderiving%2Fencodable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e6b1ac96469061320ae1436ee99f39ae1c5ea85/src%2Flibrustc_builtin_macros%2Fderiving%2Fencodable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Fderiving%2Fencodable.rs?ref=3e6b1ac96469061320ae1436ee99f39ae1c5ea85", "patch": "@@ -173,7 +173,7 @@ fn encodable_substructure(\n         ],\n     ));\n \n-    return match *substr.fields {\n+    match *substr.fields {\n         Struct(_, ref fields) => {\n             let emit_struct_field = cx.ident_of(\"emit_struct_field\", trait_span);\n             let mut stmts = Vec::new();\n@@ -283,5 +283,5 @@ fn encodable_substructure(\n         }\n \n         _ => cx.bug(\"expected Struct or EnumMatching in derive(Encodable)\"),\n-    };\n+    }\n }"}, {"sha": "ee32e914acba4e3493579f08242d1d3e5e796752", "filename": "src/librustc_builtin_macros/deriving/generic/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3e6b1ac96469061320ae1436ee99f39ae1c5ea85/src%2Flibrustc_builtin_macros%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e6b1ac96469061320ae1436ee99f39ae1c5ea85/src%2Flibrustc_builtin_macros%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Fderiving%2Fgeneric%2Fmod.rs?ref=3e6b1ac96469061320ae1436ee99f39ae1c5ea85", "patch": "@@ -489,7 +489,6 @@ impl<'a> TraitDef<'a> {\n                 // set earlier; see\n                 // librustc_expand/expand.rs:MacroExpander::fully_expand_fragment()\n                 // librustc_expand/base.rs:Annotatable::derive_allowed()\n-                return;\n             }\n         }\n     }"}, {"sha": "e6a87e4d82586771c2afa796e622bec3554636a9", "filename": "src/librustc_builtin_macros/format_foreign.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3e6b1ac96469061320ae1436ee99f39ae1c5ea85/src%2Flibrustc_builtin_macros%2Fformat_foreign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e6b1ac96469061320ae1436ee99f39ae1c5ea85/src%2Flibrustc_builtin_macros%2Fformat_foreign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Fformat_foreign.rs?ref=3e6b1ac96469061320ae1436ee99f39ae1c5ea85", "patch": "@@ -359,7 +359,7 @@ pub mod printf {\n         //\n         // Note: `move` used to capture copies of the cursors as they are *now*.\n         let fallback = move || {\n-            return Some((\n+            Some((\n                 Substitution::Format(Format {\n                     span: start.slice_between(next).unwrap(),\n                     parameter: None,\n@@ -371,7 +371,7 @@ pub mod printf {\n                     position: InnerSpan::new(start.at, next.at),\n                 }),\n                 next.slice_after(),\n-            ));\n+            ))\n         };\n \n         // Next parsing state."}, {"sha": "f1fe40d919eebb36e3055657295b1512b11294f9", "filename": "src/librustc_codegen_llvm/back/archive.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e6b1ac96469061320ae1436ee99f39ae1c5ea85/src%2Flibrustc_codegen_llvm%2Fback%2Farchive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e6b1ac96469061320ae1436ee99f39ae1c5ea85/src%2Flibrustc_codegen_llvm%2Fback%2Farchive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fback%2Farchive.rs?ref=3e6b1ac96469061320ae1436ee99f39ae1c5ea85", "patch": "@@ -146,7 +146,7 @@ impl<'a> ArchiveBuilder<'a> for LlvmArchiveBuilder<'a> {\n             }\n \n             // ok, don't skip this\n-            return false;\n+            false\n         })\n     }\n "}, {"sha": "0c8ce39132abb51283b205432a01ee711b7863e5", "filename": "src/librustc_codegen_llvm/back/bytecode.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3e6b1ac96469061320ae1436ee99f39ae1c5ea85/src%2Flibrustc_codegen_llvm%2Fback%2Fbytecode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e6b1ac96469061320ae1436ee99f39ae1c5ea85/src%2Flibrustc_codegen_llvm%2Fback%2Fbytecode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fback%2Fbytecode.rs?ref=3e6b1ac96469061320ae1436ee99f39ae1c5ea85", "patch": "@@ -83,7 +83,7 @@ pub fn encode(identifier: &str, bytecode: &[u8]) -> Vec<u8> {\n         encoded.push(0);\n     }\n \n-    return encoded;\n+    encoded\n }\n \n pub struct DecodedBytecode<'a> {\n@@ -132,7 +132,7 @@ impl<'a> DecodedBytecode<'a> {\n     pub fn bytecode(&self) -> Vec<u8> {\n         let mut data = Vec::new();\n         DeflateDecoder::new(self.encoded_bytecode).read_to_end(&mut data).unwrap();\n-        return data;\n+        data\n     }\n \n     pub fn identifier(&self) -> &'a str {"}, {"sha": "f72060868128c3624b4eb402162c110fbd1e1202", "filename": "src/librustc_codegen_llvm/common.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3e6b1ac96469061320ae1436ee99f39ae1c5ea85/src%2Flibrustc_codegen_llvm%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e6b1ac96469061320ae1436ee99f39ae1c5ea85/src%2Flibrustc_codegen_llvm%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fcommon.rs?ref=3e6b1ac96469061320ae1436ee99f39ae1c5ea85", "patch": "@@ -96,15 +96,11 @@ impl BackendTypes for CodegenCx<'ll, 'tcx> {\n \n impl CodegenCx<'ll, 'tcx> {\n     pub fn const_array(&self, ty: &'ll Type, elts: &[&'ll Value]) -> &'ll Value {\n-        unsafe {\n-            return llvm::LLVMConstArray(ty, elts.as_ptr(), elts.len() as c_uint);\n-        }\n+        unsafe { llvm::LLVMConstArray(ty, elts.as_ptr(), elts.len() as c_uint) }\n     }\n \n     pub fn const_vector(&self, elts: &[&'ll Value]) -> &'ll Value {\n-        unsafe {\n-            return llvm::LLVMConstVector(elts.as_ptr(), elts.len() as c_uint);\n-        }\n+        unsafe { llvm::LLVMConstVector(elts.as_ptr(), elts.len() as c_uint) }\n     }\n \n     pub fn const_bytes(&self, bytes: &[u8]) -> &'ll Value {\n@@ -330,7 +326,7 @@ pub fn val_ty(v: &Value) -> &Type {\n pub fn bytes_in_context(llcx: &'ll llvm::Context, bytes: &[u8]) -> &'ll Value {\n     unsafe {\n         let ptr = bytes.as_ptr() as *const c_char;\n-        return llvm::LLVMConstStringInContext(llcx, ptr, bytes.len() as c_uint, True);\n+        llvm::LLVMConstStringInContext(llcx, ptr, bytes.len() as c_uint, True)\n     }\n }\n "}, {"sha": "4427997c2732d4c77064d82a1f6460e9b954e7b0", "filename": "src/librustc_codegen_llvm/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e6b1ac96469061320ae1436ee99f39ae1c5ea85/src%2Flibrustc_codegen_llvm%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e6b1ac96469061320ae1436ee99f39ae1c5ea85/src%2Flibrustc_codegen_llvm%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fcontext.rs?ref=3e6b1ac96469061320ae1436ee99f39ae1c5ea85", "patch": "@@ -800,7 +800,7 @@ impl CodegenCx<'b, 'tcx> {\n             ifn!(\"llvm.dbg.declare\", fn(self.type_metadata(), self.type_metadata()) -> void);\n             ifn!(\"llvm.dbg.value\", fn(self.type_metadata(), t_i64, self.type_metadata()) -> void);\n         }\n-        return None;\n+        None\n     }\n }\n "}, {"sha": "f35220cc6666ad059c4bb47d980f6918e5b6749f", "filename": "src/librustc_codegen_llvm/debuginfo/metadata.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/3e6b1ac96469061320ae1436ee99f39ae1c5ea85/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e6b1ac96469061320ae1436ee99f39ae1c5ea85/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs?ref=3e6b1ac96469061320ae1436ee99f39ae1c5ea85", "patch": "@@ -203,7 +203,7 @@ impl TypeMap<'ll, 'tcx> {\n         let key = self.unique_id_interner.intern(&unique_type_id);\n         self.type_to_unique_id.insert(type_, UniqueTypeId(key));\n \n-        return UniqueTypeId(key);\n+        UniqueTypeId(key)\n     }\n \n     /// Gets the `UniqueTypeId` for an enum variant. Enum variants are not really\n@@ -314,7 +314,7 @@ impl RecursiveTypeDescription<'ll, 'tcx> {\n                     member_holding_stub,\n                     member_descriptions,\n                 );\n-                return MetadataCreationResult::new(metadata_stub, true);\n+                MetadataCreationResult::new(metadata_stub, true)\n             }\n         }\n     }\n@@ -364,7 +364,7 @@ fn fixed_vec_metadata(\n         )\n     };\n \n-    return MetadataCreationResult::new(metadata, false);\n+    MetadataCreationResult::new(metadata, false)\n }\n \n fn vec_slice_metadata(\n@@ -445,7 +445,7 @@ fn subroutine_type_metadata(\n \n     return_if_metadata_created_in_meantime!(cx, unique_type_id);\n \n-    return MetadataCreationResult::new(\n+    MetadataCreationResult::new(\n         unsafe {\n             llvm::LLVMRustDIBuilderCreateSubroutineType(\n                 DIB(cx),\n@@ -454,7 +454,7 @@ fn subroutine_type_metadata(\n             )\n         },\n         false,\n-    );\n+    )\n }\n \n // FIXME(1563): This is all a bit of a hack because 'trait pointer' is an ill-\n@@ -781,7 +781,7 @@ fn file_metadata_raw(\n     let key = (file_name, directory);\n \n     match debug_context(cx).created_files.borrow_mut().entry(key) {\n-        Entry::Occupied(o) => return o.get(),\n+        Entry::Occupied(o) => o.get(),\n         Entry::Vacant(v) => {\n             let (file_name, directory) = v.key();\n             debug!(\"file_metadata: file_name: {:?}, directory: {:?}\", file_name, directory);\n@@ -831,7 +831,7 @@ fn basic_type_metadata(cx: &CodegenCx<'ll, 'tcx>, t: Ty<'tcx>) -> &'ll DIType {\n         )\n     };\n \n-    return ty_metadata;\n+    ty_metadata\n }\n \n fn foreign_type_metadata(\n@@ -1273,11 +1273,11 @@ fn prepare_union_metadata(\n fn use_enum_fallback(cx: &CodegenCx<'_, '_>) -> bool {\n     // On MSVC we have to use the fallback mode, because LLVM doesn't\n     // lower variant parts to PDB.\n-    return cx.sess().target.target.options.is_like_msvc\n+    cx.sess().target.target.options.is_like_msvc\n         // LLVM version 7 did not release with an important bug fix;\n         // but the required patch is in the LLVM 8.  Rust LLVM reports\n         // 8 as well.\n-        || llvm_util::get_major_version() < 8;\n+        || llvm_util::get_major_version() < 8\n }\n \n // FIXME(eddyb) maybe precompute this? Right now it's computed once\n@@ -2075,7 +2075,7 @@ fn prepare_enum_metadata(\n         }\n     };\n \n-    return create_and_register_recursive_type_forward_declaration(\n+    create_and_register_recursive_type_forward_declaration(\n         cx,\n         enum_type,\n         unique_type_id,\n@@ -2088,7 +2088,7 @@ fn prepare_enum_metadata(\n             containing_scope,\n             span,\n         }),\n-    );\n+    )\n }\n \n /// Creates debug information for a composite type, that is, anything that"}, {"sha": "41829d4ee42562842e4ef82eca57c7cbda23797f", "filename": "src/librustc_codegen_llvm/debuginfo/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e6b1ac96469061320ae1436ee99f39ae1c5ea85/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e6b1ac96469061320ae1436ee99f39ae1c5ea85/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmod.rs?ref=3e6b1ac96469061320ae1436ee99f39ae1c5ea85", "patch": "@@ -444,7 +444,7 @@ impl DebugInfoMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n                 vec![]\n             };\n \n-            return create_DIArray(DIB(cx), &template_params[..]);\n+            create_DIArray(DIB(cx), &template_params[..])\n         }\n \n         fn get_parameter_names(cx: &CodegenCx<'_, '_>, generics: &ty::Generics) -> Vec<Symbol> {"}, {"sha": "b42d760a773450d38c2fdef52221da624fa2144b", "filename": "src/librustc_codegen_llvm/debuginfo/utils.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3e6b1ac96469061320ae1436ee99f39ae1c5ea85/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e6b1ac96469061320ae1436ee99f39ae1c5ea85/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Futils.rs?ref=3e6b1ac96469061320ae1436ee99f39ae1c5ea85", "patch": "@@ -24,9 +24,7 @@ pub fn is_node_local_to_unit(cx: &CodegenCx<'_, '_>, def_id: DefId) -> bool {\n \n #[allow(non_snake_case)]\n pub fn create_DIArray(builder: &DIBuilder<'ll>, arr: &[Option<&'ll DIDescriptor>]) -> &'ll DIArray {\n-    return unsafe {\n-        llvm::LLVMRustDIBuilderGetOrCreateArray(builder, arr.as_ptr(), arr.len() as u32)\n-    };\n+    unsafe { llvm::LLVMRustDIBuilderGetOrCreateArray(builder, arr.as_ptr(), arr.len() as u32) }\n }\n \n #[inline]"}, {"sha": "64db4f7462df81d860c559c94550bcbaa012a688", "filename": "src/librustc_codegen_llvm/llvm/archive_ro.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3e6b1ac96469061320ae1436ee99f39ae1c5ea85/src%2Flibrustc_codegen_llvm%2Fllvm%2Farchive_ro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e6b1ac96469061320ae1436ee99f39ae1c5ea85/src%2Flibrustc_codegen_llvm%2Fllvm%2Farchive_ro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fllvm%2Farchive_ro.rs?ref=3e6b1ac96469061320ae1436ee99f39ae1c5ea85", "patch": "@@ -27,13 +27,13 @@ impl ArchiveRO {\n     /// If this archive is used with a mutable method, then an error will be\n     /// raised.\n     pub fn open(dst: &Path) -> Result<ArchiveRO, String> {\n-        return unsafe {\n+        unsafe {\n             let s = path_to_c_string(dst);\n             let ar = super::LLVMRustOpenArchive(s.as_ptr()).ok_or_else(|| {\n                 super::last_error().unwrap_or_else(|| \"failed to open archive\".to_owned())\n             })?;\n             Ok(ArchiveRO { raw: ar })\n-        };\n+        }\n     }\n \n     pub fn iter(&self) -> Iter<'_> {"}, {"sha": "0208bb73abdbe1e5d3c07e0c53ec190e73b8366e", "filename": "src/librustc_codegen_ssa/back/command.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e6b1ac96469061320ae1436ee99f39ae1c5ea85/src%2Flibrustc_codegen_ssa%2Fback%2Fcommand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e6b1ac96469061320ae1436ee99f39ae1c5ea85/src%2Flibrustc_codegen_ssa%2Fback%2Fcommand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Fcommand.rs?ref=3e6b1ac96469061320ae1436ee99f39ae1c5ea85", "patch": "@@ -119,7 +119,7 @@ impl Command {\n         for k in &self.env_remove {\n             ret.env_remove(k);\n         }\n-        return ret;\n+        ret\n     }\n \n     // extensions"}, {"sha": "5fd16cb121fdafbea5166729b7fc9d662c0ca728", "filename": "src/librustc_codegen_ssa/base.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3e6b1ac96469061320ae1436ee99f39ae1c5ea85/src%2Flibrustc_codegen_ssa%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e6b1ac96469061320ae1436ee99f39ae1c5ea85/src%2Flibrustc_codegen_ssa%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fbase.rs?ref=3e6b1ac96469061320ae1436ee99f39ae1c5ea85", "patch": "@@ -852,7 +852,7 @@ impl CrateInfo {\n             info.missing_lang_items.insert(cnum, missing);\n         }\n \n-        return info;\n+        info\n     }\n }\n \n@@ -887,7 +887,7 @@ pub fn provide_both(providers: &mut Providers<'_>) {\n                 }\n             }\n         }\n-        return tcx.sess.opts.optimize;\n+        tcx.sess.opts.optimize\n     };\n \n     providers.dllimport_foreign_items = |tcx, krate| {"}, {"sha": "a7f9340dead88589dee03485f49faf96fc3fb458", "filename": "src/librustc_data_structures/graph/dominators/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3e6b1ac96469061320ae1436ee99f39ae1c5ea85/src%2Flibrustc_data_structures%2Fgraph%2Fdominators%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e6b1ac96469061320ae1436ee99f39ae1c5ea85/src%2Flibrustc_data_structures%2Fgraph%2Fdominators%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fgraph%2Fdominators%2Fmod.rs?ref=3e6b1ac96469061320ae1436ee99f39ae1c5ea85", "patch": "@@ -125,9 +125,9 @@ impl<'dom, Node: Idx> Iterator for Iter<'dom, Node> {\n             } else {\n                 self.node = Some(dom);\n             }\n-            return Some(node);\n+            Some(node)\n         } else {\n-            return None;\n+            None\n         }\n     }\n }"}, {"sha": "e3e076e769f5d14c91c39d98a059fa3b86ddcb9e", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e6b1ac96469061320ae1436ee99f39ae1c5ea85/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e6b1ac96469061320ae1436ee99f39ae1c5ea85/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=3e6b1ac96469061320ae1436ee99f39ae1c5ea85", "patch": "@@ -752,7 +752,7 @@ impl RustcDefaultCalls {\n                 PrintRequest::NativeStaticLibs => {}\n             }\n         }\n-        return Compilation::Stop;\n+        Compilation::Stop\n     }\n }\n "}, {"sha": "c5446116f4c5093076e0938d577ec6cf74a3efec", "filename": "src/librustc_incremental/assert_module_sources.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e6b1ac96469061320ae1436ee99f39ae1c5ea85/src%2Flibrustc_incremental%2Fassert_module_sources.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e6b1ac96469061320ae1436ee99f39ae1c5ea85/src%2Flibrustc_incremental%2Fassert_module_sources.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fassert_module_sources.rs?ref=3e6b1ac96469061320ae1436ee99f39ae1c5ea85", "patch": "@@ -175,6 +175,6 @@ impl AssertModuleSource<'tcx> {\n             return true;\n         }\n         debug!(\"check_config: no match found\");\n-        return false;\n+        false\n     }\n }"}, {"sha": "ba586d0cfba04d5d6305a19205e3a691f24da727", "filename": "src/librustc_incremental/persist/save.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3e6b1ac96469061320ae1436ee99f39ae1c5ea85/src%2Flibrustc_incremental%2Fpersist%2Fsave.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e6b1ac96469061320ae1436ee99f39ae1c5ea85/src%2Flibrustc_incremental%2Fpersist%2Fsave.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fpersist%2Fsave.rs?ref=3e6b1ac96469061320ae1436ee99f39ae1c5ea85", "patch": "@@ -132,7 +132,6 @@ where\n         }\n         Err(err) => {\n             sess.err(&format!(\"failed to write dep-graph to `{}`: {}\", path_buf.display(), err));\n-            return;\n         }\n     }\n }"}, {"sha": "8f8fc4f137b7355ac22fb7206aacadfc5db601b7", "filename": "src/librustc_infer/infer/equate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e6b1ac96469061320ae1436ee99f39ae1c5ea85/src%2Flibrustc_infer%2Finfer%2Fequate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e6b1ac96469061320ae1436ee99f39ae1c5ea85/src%2Flibrustc_infer%2Finfer%2Fequate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Fequate.rs?ref=3e6b1ac96469061320ae1436ee99f39ae1c5ea85", "patch": "@@ -136,7 +136,7 @@ impl TypeRelation<'tcx> for Equate<'combine, 'infcx, 'tcx> {\n         } else {\n             // Fast path for the common case.\n             self.relate(a.skip_binder(), b.skip_binder())?;\n-            return Ok(a.clone());\n+            Ok(a.clone())\n         }\n     }\n }"}, {"sha": "689323ce4834658aa334f5a306cb66044ec557be", "filename": "src/librustc_infer/infer/error_reporting/nice_region_error/different_lifetimes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e6b1ac96469061320ae1436ee99f39ae1c5ea85/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fdifferent_lifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e6b1ac96469061320ae1436ee99f39ae1c5ea85/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fdifferent_lifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fdifferent_lifetimes.rs?ref=3e6b1ac96469061320ae1436ee99f39ae1c5ea85", "patch": "@@ -142,6 +142,6 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n             .span_label(span_2, String::new())\n             .span_label(span, span_label)\n             .emit();\n-        return Some(ErrorReported);\n+        Some(ErrorReported)\n     }\n }"}, {"sha": "6a5a1c46d4caf38c8f5be2d2c030a678bbfaea8e", "filename": "src/librustc_infer/infer/higher_ranked/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3e6b1ac96469061320ae1436ee99f39ae1c5ea85/src%2Flibrustc_infer%2Finfer%2Fhigher_ranked%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e6b1ac96469061320ae1436ee99f39ae1c5ea85/src%2Flibrustc_infer%2Finfer%2Fhigher_ranked%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Fhigher_ranked%2Fmod.rs?ref=3e6b1ac96469061320ae1436ee99f39ae1c5ea85", "patch": "@@ -30,7 +30,7 @@ impl<'a, 'tcx> CombineFields<'a, 'tcx> {\n \n         let span = self.trace.cause.span;\n \n-        return self.infcx.commit_if_ok(|snapshot| {\n+        self.infcx.commit_if_ok(|snapshot| {\n             // First, we instantiate each bound region in the supertype with a\n             // fresh placeholder region.\n             let (b_prime, placeholder_map) = self.infcx.replace_bound_vars_with_placeholders(b);\n@@ -53,7 +53,7 @@ impl<'a, 'tcx> CombineFields<'a, 'tcx> {\n             debug!(\"higher_ranked_sub: OK result={:?}\", result);\n \n             Ok(ty::Binder::bind(result))\n-        });\n+        })\n     }\n }\n "}, {"sha": "821b9f72c0b20e6c04fe584c552a21aefce0703e", "filename": "src/librustc_infer/infer/lexical_region_resolve/mod.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3e6b1ac96469061320ae1436ee99f39ae1c5ea85/src%2Flibrustc_infer%2Finfer%2Flexical_region_resolve%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e6b1ac96469061320ae1436ee99f39ae1c5ea85/src%2Flibrustc_infer%2Finfer%2Flexical_region_resolve%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Flexical_region_resolve%2Fmod.rs?ref=3e6b1ac96469061320ae1436ee99f39ae1c5ea85", "patch": "@@ -452,12 +452,10 @@ impl<'cx, 'tcx> LexicalResolver<'cx, 'tcx> {\n                 debug!(\"Expanding value of {:?} from {:?} to {:?}\", b_vid, cur_region, lub);\n \n                 *b_data = VarValue::Value(lub);\n-                return true;\n+                true\n             }\n \n-            VarValue::ErrorValue => {\n-                return false;\n-            }\n+            VarValue::ErrorValue => false,\n         }\n     }\n \n@@ -804,7 +802,7 @@ impl<'cx, 'tcx> LexicalResolver<'cx, 'tcx> {\n             }\n         }\n \n-        return graph;\n+        graph\n     }\n \n     fn collect_error_for_expanding_node("}, {"sha": "c194e968013eb0ecfeebeec4161f2e675ef0cee8", "filename": "src/librustc_infer/infer/nll_relate/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3e6b1ac96469061320ae1436ee99f39ae1c5ea85/src%2Flibrustc_infer%2Finfer%2Fnll_relate%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e6b1ac96469061320ae1436ee99f39ae1c5ea85/src%2Flibrustc_infer%2Finfer%2Fnll_relate%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Fnll_relate%2Fmod.rs?ref=3e6b1ac96469061320ae1436ee99f39ae1c5ea85", "patch": "@@ -877,7 +877,7 @@ where\n                     // If sub-roots are equal, then `for_vid` and\n                     // `vid` are related via subtyping.\n                     debug!(\"TypeGeneralizer::tys: occurs check failed\");\n-                    return Err(TypeError::Mismatch);\n+                    Err(TypeError::Mismatch)\n                 } else {\n                     match variables.probe(vid) {\n                         TypeVariableValue::Known { value: u } => {\n@@ -898,7 +898,7 @@ where\n \n                             let u = self.tcx().mk_ty_var(new_var_id);\n                             debug!(\"generalize: replacing original vid={:?} with new={:?}\", vid, u);\n-                            return Ok(u);\n+                            Ok(u)\n                         }\n                     }\n                 }"}, {"sha": "38475b02e5db84073e407333bc996bc0c9c9c26c", "filename": "src/librustc_infer/infer/region_constraints/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e6b1ac96469061320ae1436ee99f39ae1c5ea85/src%2Flibrustc_infer%2Finfer%2Fregion_constraints%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e6b1ac96469061320ae1436ee99f39ae1c5ea85/src%2Flibrustc_infer%2Finfer%2Fregion_constraints%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Fregion_constraints%2Fmod.rs?ref=3e6b1ac96469061320ae1436ee99f39ae1c5ea85", "patch": "@@ -505,7 +505,7 @@ impl<'tcx> RegionConstraintCollector<'tcx> {\n             self.undo_log.push(AddVar(vid));\n         }\n         debug!(\"created new region variable {:?} in {:?} with origin {:?}\", vid, universe, origin);\n-        return vid;\n+        vid\n     }\n \n     /// Returns the universe for the given variable."}, {"sha": "d3ac58a49c8d5faa595f826e3e8fc27902cf9a98", "filename": "src/librustc_lexer/src/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3e6b1ac96469061320ae1436ee99f39ae1c5ea85/src%2Flibrustc_lexer%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e6b1ac96469061320ae1436ee99f39ae1c5ea85/src%2Flibrustc_lexer%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lexer%2Fsrc%2Flib.rs?ref=3e6b1ac96469061320ae1436ee99f39ae1c5ea85", "patch": "@@ -527,10 +527,10 @@ impl Cursor<'_> {\n         if self.first() == '\\'' {\n             self.bump();\n             let kind = Char { terminated: true };\n-            return Literal { kind, suffix_start: self.len_consumed() };\n+            Literal { kind, suffix_start: self.len_consumed() }\n+        } else {\n+            Lifetime { starts_with_number }\n         }\n-\n-        return Lifetime { starts_with_number };\n     }\n \n     fn single_quoted_string(&mut self) -> bool {"}, {"sha": "88f2284cd6154ac4eefce533feb3f0405519adba", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e6b1ac96469061320ae1436ee99f39ae1c5ea85/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e6b1ac96469061320ae1436ee99f39ae1c5ea85/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=3e6b1ac96469061320ae1436ee99f39ae1c5ea85", "patch": "@@ -269,7 +269,7 @@ impl EarlyLintPass for UnsafeCode {\n                 })\n             }\n \n-            _ => return,\n+            _ => {}\n         }\n     }\n "}, {"sha": "fcd50001cb3a9473e180184988c1ffca4cff68cc", "filename": "src/librustc_lint/types.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e6b1ac96469061320ae1436ee99f39ae1c5ea85/src%2Flibrustc_lint%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e6b1ac96469061320ae1436ee99f39ae1c5ea85/src%2Flibrustc_lint%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Ftypes.rs?ref=3e6b1ac96469061320ae1436ee99f39ae1c5ea85", "patch": "@@ -273,7 +273,6 @@ fn lint_int_literal<'a, 'tcx>(\n                     cx.sess()\n                         .source_map()\n                         .span_to_snippet(lit.span)\n-                        .ok()\n                         .expect(\"must get snippet from literal\"),\n                     t.name_str(),\n                     min,\n@@ -338,7 +337,6 @@ fn lint_uint_literal<'a, 'tcx>(\n                     cx.sess()\n                         .source_map()\n                         .span_to_snippet(lit.span)\n-                        .ok()\n                         .expect(\"must get snippet from literal\"),\n                     t.name_str(),\n                     min,"}, {"sha": "b5826d6a5efa655035f1ab196fac88b5b0a8214f", "filename": "src/librustc_lint/unused.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e6b1ac96469061320ae1436ee99f39ae1c5ea85/src%2Flibrustc_lint%2Funused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e6b1ac96469061320ae1436ee99f39ae1c5ea85/src%2Flibrustc_lint%2Funused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Funused.rs?ref=3e6b1ac96469061320ae1436ee99f39ae1c5ea85", "patch": "@@ -543,7 +543,7 @@ impl EarlyLintPass for UnusedParens {\n             // Do not lint on `(..)` as that will result in the other arms being useless.\n             Paren(_)\n             // The other cases do not contain sub-patterns.\n-            | Wild | Rest | Lit(..) | MacCall(..) | Range(..) | Ident(.., None) | Path(..) => return,\n+            | Wild | Rest | Lit(..) | MacCall(..) | Range(..) | Ident(.., None) | Path(..) => {},\n             // These are list-like patterns; parens can always be removed.\n             TupleStruct(_, ps) | Tuple(ps) | Slice(ps) | Or(ps) => for p in ps {\n                 self.check_unused_parens_pat(cx, p, false, false);"}, {"sha": "9b6e427abc1fd96abe04a3fa0ff91a790604c8d2", "filename": "src/librustc_metadata/creader.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e6b1ac96469061320ae1436ee99f39ae1c5ea85/src%2Flibrustc_metadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e6b1ac96469061320ae1436ee99f39ae1c5ea85/src%2Flibrustc_metadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcreader.rs?ref=3e6b1ac96469061320ae1436ee99f39ae1c5ea85", "patch": "@@ -264,7 +264,7 @@ impl<'a> CrateLoader<'a> {\n                 ret = Some(cnum);\n             }\n         });\n-        return ret;\n+        ret\n     }\n \n     fn verify_no_symbol_conflicts(&self, span: Span, root: &CrateRoot<'_>) {"}, {"sha": "60b8239a82155d87d8126c16710709035d6f0d50", "filename": "src/librustc_metadata/foreign_modules.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e6b1ac96469061320ae1436ee99f39ae1c5ea85/src%2Flibrustc_metadata%2Fforeign_modules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e6b1ac96469061320ae1436ee99f39ae1c5ea85/src%2Flibrustc_metadata%2Fforeign_modules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fforeign_modules.rs?ref=3e6b1ac96469061320ae1436ee99f39ae1c5ea85", "patch": "@@ -6,7 +6,7 @@ use rustc_hir::itemlikevisit::ItemLikeVisitor;\n crate fn collect(tcx: TyCtxt<'_>) -> Vec<ForeignModule> {\n     let mut collector = Collector { tcx, modules: Vec::new() };\n     tcx.hir().krate().visit_all_item_likes(&mut collector);\n-    return collector.modules;\n+    collector.modules\n }\n \n struct Collector<'tcx> {"}, {"sha": "56b26efe5bf1e6c89949bcc37084fbc44f4d1781", "filename": "src/librustc_metadata/link_args.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e6b1ac96469061320ae1436ee99f39ae1c5ea85/src%2Flibrustc_metadata%2Flink_args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e6b1ac96469061320ae1436ee99f39ae1c5ea85/src%2Flibrustc_metadata%2Flink_args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Flink_args.rs?ref=3e6b1ac96469061320ae1436ee99f39ae1c5ea85", "patch": "@@ -16,7 +16,7 @@ crate fn collect(tcx: TyCtxt<'_>) -> Vec<String> {\n         }\n     }\n \n-    return collector.args;\n+    collector.args\n }\n \n struct Collector {"}, {"sha": "2f9be599ba94b9ffc1a8c3035b638755120dd8c7", "filename": "src/librustc_metadata/locator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e6b1ac96469061320ae1436ee99f39ae1c5ea85/src%2Flibrustc_metadata%2Flocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e6b1ac96469061320ae1436ee99f39ae1c5ea85/src%2Flibrustc_metadata%2Flocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Flocator.rs?ref=3e6b1ac96469061320ae1436ee99f39ae1c5ea85", "patch": "@@ -949,7 +949,7 @@ fn get_metadata_section(\n     let start = Instant::now();\n     let ret = get_metadata_section_imp(target, flavor, filename, loader);\n     info!(\"reading {:?} => {:?}\", filename.file_name().unwrap(), start.elapsed());\n-    return ret;\n+    ret\n }\n \n /// A trivial wrapper for `Mmap` that implements `StableDeref`."}, {"sha": "19d2d620f58a7b90ccd8da678480cf0ad45ef52b", "filename": "src/librustc_metadata/native_libs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e6b1ac96469061320ae1436ee99f39ae1c5ea85/src%2Flibrustc_metadata%2Fnative_libs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e6b1ac96469061320ae1436ee99f39ae1c5ea85/src%2Flibrustc_metadata%2Fnative_libs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fnative_libs.rs?ref=3e6b1ac96469061320ae1436ee99f39ae1c5ea85", "patch": "@@ -15,7 +15,7 @@ crate fn collect(tcx: TyCtxt<'_>) -> Vec<NativeLibrary> {\n     let mut collector = Collector { tcx, libs: Vec::new() };\n     tcx.hir().krate().visit_all_item_likes(&mut collector);\n     collector.process_command_line();\n-    return collector.libs;\n+    collector.libs\n }\n \n crate fn relevant_lib(sess: &Session, lib: &NativeLibrary) -> bool {"}, {"sha": "ca75daf1aa9b222f72bdd3a1b4a43ca05747fe2d", "filename": "src/librustc_metadata/rmeta/decoder/cstore_impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e6b1ac96469061320ae1436ee99f39ae1c5ea85/src%2Flibrustc_metadata%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e6b1ac96469061320ae1436ee99f39ae1c5ea85/src%2Flibrustc_metadata%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Frmeta%2Fdecoder%2Fcstore_impl.rs?ref=3e6b1ac96469061320ae1436ee99f39ae1c5ea85", "patch": "@@ -170,7 +170,7 @@ provide! { <'tcx> tcx, def_id, other, cdata,\n             .iter()\n             .filter_map(|&(exported_symbol, export_level)| {\n                 if let ExportedSymbol::NonGeneric(def_id) = exported_symbol {\n-                    return Some((def_id, export_level))\n+                    Some((def_id, export_level))\n                 } else {\n                     None\n                 }"}, {"sha": "9f4f0ce5620b52d8149443c7368380cc10f884ec", "filename": "src/librustc_mir/borrow_check/borrow_set.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e6b1ac96469061320ae1436ee99f39ae1c5ea85/src%2Flibrustc_mir%2Fborrow_check%2Fborrow_set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e6b1ac96469061320ae1436ee99f39ae1c5ea85/src%2Flibrustc_mir%2Fborrow_check%2Fborrow_set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fborrow_set.rs?ref=3e6b1ac96469061320ae1436ee99f39ae1c5ea85", "patch": "@@ -273,7 +273,7 @@ impl<'a, 'tcx> Visitor<'tcx> for GatherBorrows<'a, 'tcx> {\n             assert_eq!(borrow_data.borrowed_place, *place);\n         }\n \n-        return self.super_rvalue(rvalue, location);\n+        self.super_rvalue(rvalue, location)\n     }\n }\n "}, {"sha": "d1d0ba215e08e26eea9fee38a149f78ca055591d", "filename": "src/librustc_mir/borrow_check/diagnostics/region_name.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e6b1ac96469061320ae1436ee99f39ae1c5ea85/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fregion_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e6b1ac96469061320ae1436ee99f39ae1c5ea85/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fregion_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fregion_name.rs?ref=3e6b1ac96469061320ae1436ee99f39ae1c5ea85", "patch": "@@ -500,7 +500,7 @@ impl<'tcx> MirBorrowckCtxt<'_, 'tcx> {\n             }\n         }\n \n-        return None;\n+        None\n     }\n \n     /// We've found an enum/struct/union type with the substitutions"}, {"sha": "d81aae6523a45addab79a39c408720556dac7a1c", "filename": "src/librustc_mir/const_eval/machine.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e6b1ac96469061320ae1436ee99f39ae1c5ea85/src%2Flibrustc_mir%2Fconst_eval%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e6b1ac96469061320ae1436ee99f39ae1c5ea85/src%2Flibrustc_mir%2Fconst_eval%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fconst_eval%2Fmachine.rs?ref=3e6b1ac96469061320ae1436ee99f39ae1c5ea85", "patch": "@@ -56,7 +56,7 @@ impl<'mir, 'tcx> InterpCx<'mir, 'tcx, CompileTimeInterpreter<'mir, 'tcx>> {\n \n         self.return_to_block(ret.map(|r| r.1))?;\n         self.dump_place(*dest);\n-        return Ok(true);\n+        Ok(true)\n     }\n \n     /// \"Intercept\" a function call to a panic-related function"}, {"sha": "c98a5e84729ab949d8b188b77d3ff9317ad3a928", "filename": "src/librustc_mir/dataflow/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3e6b1ac96469061320ae1436ee99f39ae1c5ea85/src%2Flibrustc_mir%2Fdataflow%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e6b1ac96469061320ae1436ee99f39ae1c5ea85/src%2Flibrustc_mir%2Fdataflow%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fmod.rs?ref=3e6b1ac96469061320ae1436ee99f39ae1c5ea85", "patch": "@@ -122,7 +122,7 @@ pub(crate) fn has_rustc_mir_with(attrs: &[ast::Attribute], name: Symbol) -> Opti\n             }\n         }\n     }\n-    return None;\n+    None\n }\n \n pub struct MoveDataParamEnv<'tcx> {\n@@ -171,7 +171,7 @@ where\n                     return None;\n                 }\n             }\n-            return None;\n+            None\n         };\n \n         let print_preflow_to = name_found(tcx.sess, attributes, sym::borrowck_graphviz_preflow);"}, {"sha": "76a5aecb9db62e3bee38ed0b40533f3f2e1786ad", "filename": "src/librustc_mir/interpret/operator.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3e6b1ac96469061320ae1436ee99f39ae1c5ea85/src%2Flibrustc_mir%2Finterpret%2Foperator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e6b1ac96469061320ae1436ee99f39ae1c5ea85/src%2Flibrustc_mir%2Finterpret%2Foperator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Foperator.rs?ref=3e6b1ac96469061320ae1436ee99f39ae1c5ea85", "patch": "@@ -64,7 +64,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             Ge => l >= r,\n             _ => bug!(\"Invalid operation on char: {:?}\", bin_op),\n         };\n-        return (Scalar::from_bool(res), false, self.tcx.types.bool);\n+        (Scalar::from_bool(res), false, self.tcx.types.bool)\n     }\n \n     fn binary_bool_op(\n@@ -87,7 +87,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             BitXor => l ^ r,\n             _ => bug!(\"Invalid operation on bool: {:?}\", bin_op),\n         };\n-        return (Scalar::from_bool(res), false, self.tcx.types.bool);\n+        (Scalar::from_bool(res), false, self.tcx.types.bool)\n     }\n \n     fn binary_float_op<F: Float + Into<Scalar<M::PointerTag>>>(\n@@ -113,7 +113,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             Rem => ((l % r).value.into(), ty),\n             _ => bug!(\"invalid float op: `{:?}`\", bin_op),\n         };\n-        return (val, false, ty);\n+        (val, false, ty)\n     }\n \n     fn binary_int_op("}, {"sha": "027e33abc7bb193b19909b964eb9dea33da2c695", "filename": "src/librustc_mir/interpret/place.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3e6b1ac96469061320ae1436ee99f39ae1c5ea85/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e6b1ac96469061320ae1436ee99f39ae1c5ea85/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fplace.rs?ref=3e6b1ac96469061320ae1436ee99f39ae1c5ea85", "patch": "@@ -212,9 +212,7 @@ impl<'tcx, Tag> MPlaceTy<'tcx, Tag> {\n         if self.layout.is_unsized() {\n             // We need to consult `meta` metadata\n             match self.layout.ty.kind {\n-                ty::Slice(..) | ty::Str => {\n-                    return self.mplace.meta.unwrap_meta().to_machine_usize(cx);\n-                }\n+                ty::Slice(..) | ty::Str => self.mplace.meta.unwrap_meta().to_machine_usize(cx),\n                 _ => bug!(\"len not supported on unsized type {:?}\", self.layout.ty),\n             }\n         } else {"}, {"sha": "a9e45a032a6bee9b4b2bc2a1c4654a14cefbeefc", "filename": "src/librustc_mir/interpret/terminator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e6b1ac96469061320ae1436ee99f39ae1c5ea85/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e6b1ac96469061320ae1436ee99f39ae1c5ea85/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs?ref=3e6b1ac96469061320ae1436ee99f39ae1c5ea85", "patch": "@@ -240,7 +240,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         match instance.def {\n             ty::InstanceDef::Intrinsic(..) => {\n                 assert!(caller_abi == Abi::RustIntrinsic || caller_abi == Abi::PlatformIntrinsic);\n-                return M::call_intrinsic(self, span, instance, args, ret, unwind);\n+                M::call_intrinsic(self, span, instance, args, ret, unwind)\n             }\n             ty::InstanceDef::VtableShim(..)\n             | ty::InstanceDef::ReifyShim(..)"}, {"sha": "a592e8d9c05fe6863d89ca6659eaa66aa331c67d", "filename": "src/librustc_mir/monomorphize/collector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e6b1ac96469061320ae1436ee99f39ae1c5ea85/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e6b1ac96469061320ae1436ee99f39ae1c5ea85/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs?ref=3e6b1ac96469061320ae1436ee99f39ae1c5ea85", "patch": "@@ -751,7 +751,7 @@ fn should_monomorphize_locally<'tcx>(tcx: TyCtxt<'tcx>, instance: &Instance<'tcx\n         bug!(\"cannot create local mono-item for {:?}\", def_id)\n     }\n \n-    return true;\n+    true\n }\n \n /// For a given pair of source and target type that occur in an unsizing coercion,"}, {"sha": "43876380c840e0f1785b8e1df8607d2086c763a3", "filename": "src/librustc_mir/transform/const_prop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e6b1ac96469061320ae1436ee99f39ae1c5ea85/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e6b1ac96469061320ae1436ee99f39ae1c5ea85/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs?ref=3e6b1ac96469061320ae1436ee99f39ae1c5ea85", "patch": "@@ -483,7 +483,7 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n             err.span_label(source_info.span, format!(\"{:?}\", panic));\n             err.emit()\n         });\n-        return None;\n+        None\n     }\n \n     fn check_unary_op("}, {"sha": "c21834bfde84b744bf674f3ede722cc84c259ff0", "filename": "src/librustc_mir_build/build/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e6b1ac96469061320ae1436ee99f39ae1c5ea85/src%2Flibrustc_mir_build%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e6b1ac96469061320ae1436ee99f39ae1c5ea85/src%2Flibrustc_mir_build%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fbuild%2Fmod.rs?ref=3e6b1ac96469061320ae1436ee99f39ae1c5ea85", "patch": "@@ -377,7 +377,7 @@ impl BlockContext {\n             }\n         }\n \n-        return None;\n+        None\n     }\n \n     /// Looks at the topmost frame on the BlockContext and reports"}, {"sha": "07a9d91cd746d344a2bd5e6dbfb7db3c1d7191b6", "filename": "src/librustc_mir_build/hair/cx/block.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e6b1ac96469061320ae1436ee99f39ae1c5ea85/src%2Flibrustc_mir_build%2Fhair%2Fcx%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e6b1ac96469061320ae1436ee99f39ae1c5ea85/src%2Flibrustc_mir_build%2Fhair%2Fcx%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fhair%2Fcx%2Fblock.rs?ref=3e6b1ac96469061320ae1436ee99f39ae1c5ea85", "patch": "@@ -98,7 +98,7 @@ fn mirror_stmts<'a, 'tcx>(\n             }\n         }\n     }\n-    return result;\n+    result\n }\n \n crate fn to_expr_ref<'a, 'tcx>("}, {"sha": "58db7d286e7e65b003d71817fed6f7080d7ce677", "filename": "src/librustc_parse/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e6b1ac96469061320ae1436ee99f39ae1c5ea85/src%2Flibrustc_parse%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e6b1ac96469061320ae1436ee99f39ae1c5ea85/src%2Flibrustc_parse%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Flib.rs?ref=3e6b1ac96469061320ae1436ee99f39ae1c5ea85", "patch": "@@ -320,7 +320,7 @@ pub fn nt_to_tokenstream(nt: &Nonterminal, sess: &ParseSess, span: Span) -> Toke\n                 going with stringified version\"\n         );\n     }\n-    return tokens_for_real;\n+    tokens_for_real\n }\n \n fn prepend_attrs("}, {"sha": "b993857681a301e1456896ababc6ec03df0c17ed", "filename": "src/librustc_parse/parser/expr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3e6b1ac96469061320ae1436ee99f39ae1c5ea85/src%2Flibrustc_parse%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e6b1ac96469061320ae1436ee99f39ae1c5ea85/src%2Flibrustc_parse%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fexpr.rs?ref=3e6b1ac96469061320ae1436ee99f39ae1c5ea85", "patch": "@@ -996,7 +996,7 @@ impl<'a> Parser<'a> {\n                 let expr = self.mk_expr(lo.to(self.prev_token.span), ExprKind::Lit(literal), attrs);\n                 self.maybe_recover_from_bad_qpath(expr, true)\n             }\n-            None => return Err(self.expected_expression_found()),\n+            None => Err(self.expected_expression_found()),\n         }\n     }\n \n@@ -1714,7 +1714,7 @@ impl<'a> Parser<'a> {\n         }\n         let hi = self.token.span;\n         self.bump();\n-        return Ok(self.mk_expr(lo.to(hi), ExprKind::Match(scrutinee, arms), attrs));\n+        Ok(self.mk_expr(lo.to(hi), ExprKind::Match(scrutinee, arms), attrs))\n     }\n \n     pub(super) fn parse_arm(&mut self) -> PResult<'a, Arm> {"}, {"sha": "5f37069afbe4c9a2fcd660f621f2e99a95c03306", "filename": "src/librustc_parse/parser/item.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3e6b1ac96469061320ae1436ee99f39ae1c5ea85/src%2Flibrustc_parse%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e6b1ac96469061320ae1436ee99f39ae1c5ea85/src%2Flibrustc_parse%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fitem.rs?ref=3e6b1ac96469061320ae1436ee99f39ae1c5ea85", "patch": "@@ -314,7 +314,7 @@ impl<'a> Parser<'a> {\n                 \" struct \".into(),\n                 Applicability::MaybeIncorrect, // speculative\n             );\n-            return Err(err);\n+            Err(err)\n         } else if self.look_ahead(1, |t| *t == token::OpenDelim(token::Paren)) {\n             let ident = self.parse_ident().unwrap();\n             self.bump(); // `(`\n@@ -362,7 +362,7 @@ impl<'a> Parser<'a> {\n                     );\n                 }\n             }\n-            return Err(err);\n+            Err(err)\n         } else if self.look_ahead(1, |t| *t == token::Lt) {\n             let ident = self.parse_ident().unwrap();\n             self.eat_to_tokens(&[&token::Gt]);\n@@ -384,7 +384,7 @@ impl<'a> Parser<'a> {\n                     Applicability::MachineApplicable,\n                 );\n             }\n-            return Err(err);\n+            Err(err)\n         } else {\n             Ok(())\n         }\n@@ -910,7 +910,7 @@ impl<'a> Parser<'a> {\n         let span = self.sess.source_map().def_span(span);\n         let msg = format!(\"{} is not supported in {}\", kind.descr(), ctx);\n         self.struct_span_err(span, &msg).emit();\n-        return None;\n+        None\n     }\n \n     fn error_on_foreign_const(&self, span: Span, ident: Ident) {"}, {"sha": "f7f7ac89a1864f1db190443dc063676450eb6f14", "filename": "src/librustc_parse/parser/pat.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e6b1ac96469061320ae1436ee99f39ae1c5ea85/src%2Flibrustc_parse%2Fparser%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e6b1ac96469061320ae1436ee99f39ae1c5ea85/src%2Flibrustc_parse%2Fparser%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fpat.rs?ref=3e6b1ac96469061320ae1436ee99f39ae1c5ea85", "patch": "@@ -918,7 +918,7 @@ impl<'a> Parser<'a> {\n             }\n             err.emit();\n         }\n-        return Ok((fields, etc));\n+        Ok((fields, etc))\n     }\n \n     /// Recover on `...` as if it were `..` to avoid further errors."}, {"sha": "d43f5d67113a1e348055e6dabda92ef4757bf5a5", "filename": "src/librustc_parse/parser/stmt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e6b1ac96469061320ae1436ee99f39ae1c5ea85/src%2Flibrustc_parse%2Fparser%2Fstmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e6b1ac96469061320ae1436ee99f39ae1c5ea85/src%2Flibrustc_parse%2Fparser%2Fstmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fstmt.rs?ref=3e6b1ac96469061320ae1436ee99f39ae1c5ea85", "patch": "@@ -278,7 +278,7 @@ impl<'a> Parser<'a> {\n             _ => {}\n         }\n         e.span_label(sp, \"expected `{`\");\n-        return Err(e);\n+        Err(e)\n     }\n \n     /// Parses a block. Inner attributes are allowed."}, {"sha": "bf577d26b0fed870dcdad0bab25f400ba63c98e6", "filename": "src/librustc_passes/liveness.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e6b1ac96469061320ae1436ee99f39ae1c5ea85/src%2Flibrustc_passes%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e6b1ac96469061320ae1436ee99f39ae1c5ea85/src%2Flibrustc_passes%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fliveness.rs?ref=3e6b1ac96469061320ae1436ee99f39ae1c5ea85", "patch": "@@ -864,7 +864,7 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n             first_merge,\n             any_changed\n         );\n-        return any_changed;\n+        any_changed\n     }\n \n     // Indicates that a local variable was *defined*; we know that no"}, {"sha": "fa2afae469c045a1beb0c1f4c862bfe74891b0d9", "filename": "src/librustc_passes/loops.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e6b1ac96469061320ae1436ee99f39ae1c5ea85/src%2Flibrustc_passes%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e6b1ac96469061320ae1436ee99f39ae1c5ea85/src%2Flibrustc_passes%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Floops.rs?ref=3e6b1ac96469061320ae1436ee99f39ae1c5ea85", "patch": "@@ -222,7 +222,7 @@ impl<'a, 'hir> CheckLoopVisitor<'a, 'hir> {\n                 return true;\n             }\n         }\n-        return false;\n+        false\n     }\n     fn emit_unlabled_cf_in_while_condition(&mut self, span: Span, cf_type: &str) {\n         struct_span_err!("}, {"sha": "1e9c6c91d385f3ea432860ff12d9785930bf8e43", "filename": "src/librustc_passes/reachable.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3e6b1ac96469061320ae1436ee99f39ae1c5ea85/src%2Flibrustc_passes%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e6b1ac96469061320ae1436ee99f39ae1c5ea85/src%2Flibrustc_passes%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Freachable.rs?ref=3e6b1ac96469061320ae1436ee99f39ae1c5ea85", "patch": "@@ -30,9 +30,7 @@ fn item_might_be_inlined(tcx: TyCtxt<'tcx>, item: &hir::Item<'_>, attrs: Codegen\n     }\n \n     match item.kind {\n-        hir::ItemKind::Fn(ref sig, ..) if sig.header.is_const() => {\n-            return true;\n-        }\n+        hir::ItemKind::Fn(ref sig, ..) if sig.header.is_const() => true,\n         hir::ItemKind::Impl { .. } | hir::ItemKind::Fn(..) => {\n             let generics = tcx.generics_of(tcx.hir().local_def_id(item.hir_id));\n             generics.requires_monomorphization(tcx)"}, {"sha": "8fa5a4fbc61f46920b0ad4ee617a12da6d5bc31d", "filename": "src/librustc_passes/stability.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e6b1ac96469061320ae1436ee99f39ae1c5ea85/src%2Flibrustc_passes%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e6b1ac96469061320ae1436ee99f39ae1c5ea85/src%2Flibrustc_passes%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fstability.rs?ref=3e6b1ac96469061320ae1436ee99f39ae1c5ea85", "patch": "@@ -465,7 +465,7 @@ fn new_index(tcx: TyCtxt<'tcx>) -> Index<'tcx> {\n             |v| intravisit::walk_crate(v, krate),\n         );\n     }\n-    return index;\n+    index\n }\n \n /// Cross-references the feature names of unstable APIs with enabled"}, {"sha": "a3510737b7edc7be1088514185f8efaa0f31129f", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3e6b1ac96469061320ae1436ee99f39ae1c5ea85/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e6b1ac96469061320ae1436ee99f39ae1c5ea85/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=3e6b1ac96469061320ae1436ee99f39ae1c5ea85", "patch": "@@ -1423,7 +1423,7 @@ impl<'a, 'tcx> ObsoleteVisiblePrivateTypesVisitor<'a, 'tcx> {\n                 Some(_) | None => false,\n             }\n         } else {\n-            return false;\n+            false\n         }\n     }\n \n@@ -1837,7 +1837,7 @@ impl SearchInterfaceForPrivateItemsVisitor<'tcx> {\n             && self.tcx.is_private_dep(item_id.krate);\n \n         log::debug!(\"leaks_private_dep(item_id={:?})={}\", item_id, ret);\n-        return ret;\n+        ret\n     }\n }\n "}, {"sha": "0dee997f2ed962071d52a2e6a12409423adca400", "filename": "src/librustc_resolve/def_collector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e6b1ac96469061320ae1436ee99f39ae1c5ea85/src%2Flibrustc_resolve%2Fdef_collector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e6b1ac96469061320ae1436ee99f39ae1c5ea85/src%2Flibrustc_resolve%2Fdef_collector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fdef_collector.rs?ref=3e6b1ac96469061320ae1436ee99f39ae1c5ea85", "patch": "@@ -200,7 +200,7 @@ impl<'a> visit::Visitor<'a> for DefCollector<'a> {\n \n     fn visit_pat(&mut self, pat: &'a Pat) {\n         match pat.kind {\n-            PatKind::MacCall(..) => return self.visit_macro_invoc(pat.id),\n+            PatKind::MacCall(..) => self.visit_macro_invoc(pat.id),\n             _ => visit::walk_pat(self, pat),\n         }\n     }"}, {"sha": "95597e8ebf1e9247ced9b18f9b81b2b61b66c66c", "filename": "src/librustc_resolve/imports.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e6b1ac96469061320ae1436ee99f39ae1c5ea85/src%2Flibrustc_resolve%2Fimports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e6b1ac96469061320ae1436ee99f39ae1c5ea85/src%2Flibrustc_resolve%2Fimports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fimports.rs?ref=3e6b1ac96469061320ae1436ee99f39ae1c5ea85", "patch": "@@ -1108,7 +1108,7 @@ impl<'a, 'b> ImportResolver<'a, 'b> {\n                                     match binding.kind {\n                                         // Never suggest the name that has binding error\n                                         // i.e., the name that cannot be previously resolved\n-                                        NameBindingKind::Res(Res::Err, _) => return None,\n+                                        NameBindingKind::Res(Res::Err, _) => None,\n                                         _ => Some(&i.name),\n                                     }\n                                 }"}, {"sha": "e1256551e24da2fd62c1e9bc9f21c1fc9a5ebd57", "filename": "src/librustc_resolve/late/diagnostics.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3e6b1ac96469061320ae1436ee99f39ae1c5ea85/src%2Flibrustc_resolve%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e6b1ac96469061320ae1436ee99f39ae1c5ea85/src%2Flibrustc_resolve%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flate%2Fdiagnostics.rs?ref=3e6b1ac96469061320ae1436ee99f39ae1c5ea85", "patch": "@@ -380,7 +380,7 @@ impl<'a> LateResolutionVisitor<'a, '_, '_> {\n                 _ => (),\n             }\n         };\n-        return has_self_arg;\n+        has_self_arg\n     }\n \n     fn followed_by_brace(&self, span: Span) -> (bool, Option<(Span, String)>) {\n@@ -430,7 +430,7 @@ impl<'a> LateResolutionVisitor<'a, '_, '_> {\n                 break;\n             }\n         }\n-        return (followed_by_brace, closing_brace);\n+        (followed_by_brace, closing_brace)\n     }\n \n     /// Provides context-dependent help for errors reported by the `smart_resolve_path_fragment`"}, {"sha": "166fc48b44c4c87533a98d70638923557c56a937", "filename": "src/librustc_resolve/macros.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e6b1ac96469061320ae1436ee99f39ae1c5ea85/src%2Flibrustc_resolve%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e6b1ac96469061320ae1436ee99f39ae1c5ea85/src%2Flibrustc_resolve%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fmacros.rs?ref=3e6b1ac96469061320ae1436ee99f39ae1c5ea85", "patch": "@@ -83,7 +83,7 @@ fn sub_namespace_match(candidate: Option<MacroKind>, requirement: Option<MacroKi\n // line-breaks and is slow.\n fn fast_print_path(path: &ast::Path) -> Symbol {\n     if path.segments.len() == 1 {\n-        return path.segments[0].ident.name;\n+        path.segments[0].ident.name\n     } else {\n         let mut path_str = String::with_capacity(64);\n         for (i, segment) in path.segments.iter().enumerate() {"}, {"sha": "59084f19045454c1a3608d16a5860b483c842b23", "filename": "src/librustc_save_analysis/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3e6b1ac96469061320ae1436ee99f39ae1c5ea85/src%2Flibrustc_save_analysis%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e6b1ac96469061320ae1436ee99f39ae1c5ea85/src%2Flibrustc_save_analysis%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Flib.rs?ref=3e6b1ac96469061320ae1436ee99f39ae1c5ea85", "patch": "@@ -534,15 +534,15 @@ impl<'l, 'tcx> SaveContext<'l, 'tcx> {\n                         let variant = &def.non_enum_variant();\n                         filter!(self.span_utils, ident.span);\n                         let span = self.span_from_span(ident.span);\n-                        return Some(Data::RefData(Ref {\n+                        Some(Data::RefData(Ref {\n                             kind: RefKind::Variable,\n                             span,\n                             ref_id: self\n                                 .tcx\n                                 .find_field_index(ident, variant)\n                                 .map(|index| id_from_def_id(variant.fields[index].did))\n                                 .unwrap_or_else(|| null_id()),\n-                        }));\n+                        }))\n                     }\n                     ty::Tuple(..) => None,\n                     _ => {"}, {"sha": "f16e4ca93d80a5ca0d6a2e3b2569bf063feff42c", "filename": "src/librustc_session/config.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e6b1ac96469061320ae1436ee99f39ae1c5ea85/src%2Flibrustc_session%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e6b1ac96469061320ae1436ee99f39ae1c5ea85/src%2Flibrustc_session%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Fconfig.rs?ref=3e6b1ac96469061320ae1436ee99f39ae1c5ea85", "patch": "@@ -1140,7 +1140,7 @@ pub fn parse_error_format(\n         _ => {}\n     }\n \n-    return error_format;\n+    error_format\n }\n \n fn parse_crate_edition(matches: &getopts::Matches) -> Edition {"}, {"sha": "68b0bd1a574187d3eb0982e8a7f6985737ee60e4", "filename": "src/librustc_span/caching_source_map_view.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3e6b1ac96469061320ae1436ee99f39ae1c5ea85/src%2Flibrustc_span%2Fcaching_source_map_view.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e6b1ac96469061320ae1436ee99f39ae1c5ea85/src%2Flibrustc_span%2Fcaching_source_map_view.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_span%2Fcaching_source_map_view.rs?ref=3e6b1ac96469061320ae1436ee99f39ae1c5ea85", "patch": "@@ -99,10 +99,6 @@ impl<'sm> CachingSourceMapView<'sm> {\n         cache_entry.line_end = line_bounds.1;\n         cache_entry.time_stamp = self.time_stamp;\n \n-        return Some((\n-            cache_entry.file.clone(),\n-            cache_entry.line_number,\n-            pos - cache_entry.line_start,\n-        ));\n+        Some((cache_entry.file.clone(), cache_entry.line_number, pos - cache_entry.line_start))\n     }\n }"}, {"sha": "39eb318a785e7c69c514946ae95f6b59dd1192e7", "filename": "src/librustc_span/source_map.rs", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/3e6b1ac96469061320ae1436ee99f39ae1c5ea85/src%2Flibrustc_span%2Fsource_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e6b1ac96469061320ae1436ee99f39ae1c5ea85/src%2Flibrustc_span%2Fsource_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_span%2Fsource_map.rs?ref=3e6b1ac96469061320ae1436ee99f39ae1c5ea85", "patch": "@@ -368,7 +368,7 @@ impl SourceMap {\n \n     // If there is a doctest offset, applies it to the line.\n     pub fn doctest_offset_line(&self, file: &FileName, orig: usize) -> usize {\n-        return match file {\n+        match file {\n             FileName::DocTest(_, offset) => {\n                 return if *offset >= 0 {\n                     orig + *offset as usize\n@@ -377,7 +377,7 @@ impl SourceMap {\n                 };\n             }\n             _ => orig,\n-        };\n+        }\n     }\n \n     /// Looks up source information about a `BytePos`.\n@@ -569,10 +569,10 @@ impl SourceMap {\n         let local_end = self.lookup_byte_offset(sp.hi());\n \n         if local_begin.sf.start_pos != local_end.sf.start_pos {\n-            return Err(SpanSnippetError::DistinctSources(DistinctSources {\n+            Err(SpanSnippetError::DistinctSources(DistinctSources {\n                 begin: (local_begin.sf.name.clone(), local_begin.sf.start_pos),\n                 end: (local_end.sf.name.clone(), local_end.sf.start_pos),\n-            }));\n+            }))\n         } else {\n             self.ensure_source_file_source_present(local_begin.sf.clone());\n \n@@ -590,13 +590,11 @@ impl SourceMap {\n             }\n \n             if let Some(ref src) = local_begin.sf.src {\n-                return extract_source(src, start_index, end_index);\n+                extract_source(src, start_index, end_index)\n             } else if let Some(src) = local_begin.sf.external_src.borrow().get_source() {\n-                return extract_source(src, start_index, end_index);\n+                extract_source(src, start_index, end_index)\n             } else {\n-                return Err(SpanSnippetError::SourceNotAvailable {\n-                    filename: local_begin.sf.name.clone(),\n-                });\n+                Err(SpanSnippetError::SourceNotAvailable { filename: local_begin.sf.name.clone() })\n             }\n         }\n     }"}, {"sha": "bd980e6eb8b8a51327ab363578ac14e42a7463f7", "filename": "src/librustc_trait_selection/traits/auto_trait.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/3e6b1ac96469061320ae1436ee99f39ae1c5ea85/src%2Flibrustc_trait_selection%2Ftraits%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e6b1ac96469061320ae1436ee99f39ae1c5ea85/src%2Flibrustc_trait_selection%2Ftraits%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Fauto_trait.rs?ref=3e6b1ac96469061320ae1436ee99f39ae1c5ea85", "patch": "@@ -113,7 +113,7 @@ impl<'tcx> AutoTraitFinder<'tcx> {\n             return AutoTraitResult::ExplicitImpl;\n         }\n \n-        return tcx.infer_ctxt().enter(|infcx| {\n+        tcx.infer_ctxt().enter(|infcx| {\n             let mut fresh_preds = FxHashSet::default();\n \n             // Due to the way projections are handled by SelectionContext, we need to run\n@@ -219,8 +219,8 @@ impl<'tcx> AutoTraitFinder<'tcx> {\n \n             let info = AutoTraitInfo { full_user_env, region_data, vid_to_region };\n \n-            return AutoTraitResult::PositiveImpl(auto_trait_callback(&infcx, info));\n-        });\n+            AutoTraitResult::PositiveImpl(auto_trait_callback(&infcx, info))\n+        })\n     }\n }\n \n@@ -384,7 +384,7 @@ impl AutoTraitFinder<'tcx> {\n             ty, trait_did, new_env, final_user_env\n         );\n \n-        return Some((new_env, final_user_env));\n+        Some((new_env, final_user_env))\n     }\n \n     /// This method is designed to work around the following issue:\n@@ -492,7 +492,7 @@ impl AutoTraitFinder<'tcx> {\n                 }\n                 _ => {}\n             }\n-            return true;\n+            true\n         });\n \n         if should_add_new {\n@@ -591,15 +591,15 @@ impl AutoTraitFinder<'tcx> {\n     }\n \n     fn is_param_no_infer(&self, substs: SubstsRef<'_>) -> bool {\n-        return self.is_of_param(substs.type_at(0)) && !substs.types().any(|t| t.has_infer_types());\n+        self.is_of_param(substs.type_at(0)) && !substs.types().any(|t| t.has_infer_types())\n     }\n \n     pub fn is_of_param(&self, ty: Ty<'_>) -> bool {\n-        return match ty.kind {\n+        match ty.kind {\n             ty::Param(_) => true,\n             ty::Projection(p) => self.is_of_param(p.self_ty()),\n             _ => false,\n-        };\n+        }\n     }\n \n     fn is_self_referential_projection(&self, p: ty::PolyProjectionPredicate<'_>) -> bool {\n@@ -804,7 +804,7 @@ impl AutoTraitFinder<'tcx> {\n                 _ => panic!(\"Unexpected predicate {:?} {:?}\", ty, predicate),\n             };\n         }\n-        return true;\n+        true\n     }\n \n     pub fn clean_pred("}, {"sha": "dc13af99fec6c7d0b5aaac1759a1826400a110d8", "filename": "src/librustc_trait_selection/traits/coherence.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3e6b1ac96469061320ae1436ee99f39ae1c5ea85/src%2Flibrustc_trait_selection%2Ftraits%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e6b1ac96469061320ae1436ee99f39ae1c5ea85/src%2Flibrustc_trait_selection%2Ftraits%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Fcoherence.rs?ref=3e6b1ac96469061320ae1436ee99f39ae1c5ea85", "patch": "@@ -221,10 +221,10 @@ pub fn trait_ref_is_knowable<'tcx>(\n     // we are an owner.\n     if orphan_check_trait_ref(tcx, trait_ref, InCrate::Local).is_ok() {\n         debug!(\"trait_ref_is_knowable: orphan check passed\");\n-        return None;\n+        None\n     } else {\n         debug!(\"trait_ref_is_knowable: nonlocal, nonfundamental, unowned\");\n-        return Some(Conflict::Upstream);\n+        Some(Conflict::Upstream)\n     }\n }\n "}, {"sha": "18b2ca89837208d585c7135af5dc11fa1be6dafd", "filename": "src/librustc_trait_selection/traits/error_reporting/on_unimplemented.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3e6b1ac96469061320ae1436ee99f39ae1c5ea85/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fon_unimplemented.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e6b1ac96469061320ae1436ee99f39ae1c5ea85/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fon_unimplemented.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fon_unimplemented.rs?ref=3e6b1ac96469061320ae1436ee99f39ae1c5ea85", "patch": "@@ -111,11 +111,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n             }),\n             hir::Node::Expr(hir::Expr { .. }) => {\n                 let parent_hid = hir.get_parent_node(hir_id);\n-                if parent_hid != hir_id {\n-                    return self.describe_enclosure(parent_hid);\n-                } else {\n-                    None\n-                }\n+                if parent_hid != hir_id { self.describe_enclosure(parent_hid) } else { None }\n             }\n             _ => None,\n         }"}, {"sha": "522a8084cdc0d5555f4a84b496e4fe73103917b9", "filename": "src/librustc_trait_selection/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e6b1ac96469061320ae1436ee99f39ae1c5ea85/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e6b1ac96469061320ae1436ee99f39ae1c5ea85/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=3e6b1ac96469061320ae1436ee99f39ae1c5ea85", "patch": "@@ -351,7 +351,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n             // Different to previous arm because one is `&hir::Local` and the other\n             // is `P<hir::Local>`.\n             Some(hir::Node::Local(local)) => get_name(err, &local.pat.kind),\n-            _ => return None,\n+            _ => None,\n         }\n     }\n "}, {"sha": "99412fafcfa8d854c2b265e1c68c04e17011e9b7", "filename": "src/librustc_trait_selection/traits/query/normalize.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3e6b1ac96469061320ae1436ee99f39ae1c5ea85/src%2Flibrustc_trait_selection%2Ftraits%2Fquery%2Fnormalize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e6b1ac96469061320ae1436ee99f39ae1c5ea85/src%2Flibrustc_trait_selection%2Ftraits%2Fquery%2Fnormalize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Fquery%2Fnormalize.rs?ref=3e6b1ac96469061320ae1436ee99f39ae1c5ea85", "patch": "@@ -169,12 +169,12 @@ impl<'cx, 'tcx> TypeFolder<'tcx> for QueryNormalizer<'cx, 'tcx> {\n                                 debug!(\"QueryNormalizer: result = {:#?}\", result);\n                                 debug!(\"QueryNormalizer: obligations = {:#?}\", obligations);\n                                 self.obligations.extend(obligations);\n-                                return result.normalized_ty;\n+                                result.normalized_ty\n                             }\n \n                             Err(_) => {\n                                 self.error = true;\n-                                return ty;\n+                                ty\n                             }\n                         }\n                     }"}, {"sha": "5f40c1cefca45e88d60fc2ef48fd15c18ea84430", "filename": "src/librustc_trait_selection/traits/wf.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e6b1ac96469061320ae1436ee99f39ae1c5ea85/src%2Flibrustc_trait_selection%2Ftraits%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e6b1ac96469061320ae1436ee99f39ae1c5ea85/src%2Flibrustc_trait_selection%2Ftraits%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Fwf.rs?ref=3e6b1ac96469061320ae1436ee99f39ae1c5ea85", "patch": "@@ -595,7 +595,7 @@ impl<'a, 'tcx> WfPredicates<'a, 'tcx> {\n         }\n \n         // if we made it through that loop above, we made progress!\n-        return true;\n+        true\n     }\n \n     fn nominal_obligations("}, {"sha": "ed6259d4573610142f57c9b9712246d0ca7db546", "filename": "src/librustc_traits/lowering/environment.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e6b1ac96469061320ae1436ee99f39ae1c5ea85/src%2Flibrustc_traits%2Flowering%2Fenvironment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e6b1ac96469061320ae1436ee99f39ae1c5ea85/src%2Flibrustc_traits%2Flowering%2Fenvironment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Flowering%2Fenvironment.rs?ref=3e6b1ac96469061320ae1436ee99f39ae1c5ea85", "patch": "@@ -146,7 +146,7 @@ crate fn program_clauses_for_env<'tcx>(\n \n     debug!(\"program_clauses_for_env: closure = {:#?}\", closure);\n \n-    return tcx.mk_clauses(closure.into_iter());\n+    tcx.mk_clauses(closure.into_iter())\n }\n \n crate fn environment(tcx: TyCtxt<'_>, def_id: DefId) -> Environment<'_> {"}, {"sha": "3b72da23bafae80f8314526f801544ab6d43313a", "filename": "src/librustc_ty/needs_drop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e6b1ac96469061320ae1436ee99f39ae1c5ea85/src%2Flibrustc_ty%2Fneeds_drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e6b1ac96469061320ae1436ee99f39ae1c5ea85/src%2Flibrustc_ty%2Fneeds_drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ty%2Fneeds_drop.rs?ref=3e6b1ac96469061320ae1436ee99f39ae1c5ea85", "patch": "@@ -132,7 +132,7 @@ where\n             }\n         }\n \n-        return None;\n+        None\n     }\n }\n "}, {"sha": "3ee6d5df7356b385887ad9d24bf1fcd9e642bee0", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3e6b1ac96469061320ae1436ee99f39ae1c5ea85/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e6b1ac96469061320ae1436ee99f39ae1c5ea85/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=3e6b1ac96469061320ae1436ee99f39ae1c5ea85", "patch": "@@ -2128,7 +2128,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                 return Err(ErrorReported);\n             }\n         }\n-        return Ok(bound);\n+        Ok(bound)\n     }\n \n     fn complain_about_assoc_type_not_found<I>(\n@@ -2709,7 +2709,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n             }\n             Res::Err => {\n                 self.set_tainted_by_errors();\n-                return self.tcx().types.err;\n+                self.tcx().types.err\n             }\n             _ => span_bug!(span, \"unexpected resolution: {:?}\", path.res),\n         }\n@@ -3047,7 +3047,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n             )\n             .emit();\n         }\n-        return Some(r);\n+        Some(r)\n     }\n }\n "}, {"sha": "d19422311719590b8c26cb678222f041136ec2d6", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3e6b1ac96469061320ae1436ee99f39ae1c5ea85/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e6b1ac96469061320ae1436ee99f39ae1c5ea85/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=3e6b1ac96469061320ae1436ee99f39ae1c5ea85", "patch": "@@ -1580,7 +1580,7 @@ fn check_union_fields(tcx: TyCtxt<'_>, span: Span, item_def_id: DefId) -> bool {\n     } else {\n         span_bug!(span, \"unions must be ty::Adt, but got {:?}\", item_type.kind);\n     }\n-    return true;\n+    true\n }\n \n /// Checks that an opaque type does not contain cycles and does not use `Self` or `T::Foo`\n@@ -2313,7 +2313,7 @@ fn check_representable(tcx: TyCtxt<'_>, sp: Span, item_def_id: DefId) -> bool {\n         }\n         Representability::Representable | Representability::ContainsRecursive => (),\n     }\n-    return true;\n+    true\n }\n \n pub fn check_simd(tcx: TyCtxt<'_>, sp: Span, def_id: DefId) {"}, {"sha": "c6ee9ab60abf3b3764e619e9233f78597700027b", "filename": "src/librustc_typeck/coherence/inherent_impls.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3e6b1ac96469061320ae1436ee99f39ae1c5ea85/src%2Flibrustc_typeck%2Fcoherence%2Finherent_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e6b1ac96469061320ae1436ee99f39ae1c5ea85/src%2Flibrustc_typeck%2Fcoherence%2Finherent_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Finherent_impls.rs?ref=3e6b1ac96469061320ae1436ee99f39ae1c5ea85", "patch": "@@ -272,9 +272,7 @@ impl ItemLikeVisitor<'v> for InherentCollect<'tcx> {\n                     item.span,\n                 );\n             }\n-            ty::Error => {\n-                return;\n-            }\n+            ty::Error => {}\n             _ => {\n                 struct_span_err!(\n                     self.tcx.sess,\n@@ -288,7 +286,6 @@ impl ItemLikeVisitor<'v> for InherentCollect<'tcx> {\n                        to wrap it instead\",\n                 )\n                 .emit();\n-                return;\n             }\n         }\n     }"}, {"sha": "44ef4ebd463d7448671438ccd5cd87d9d940ac0c", "filename": "src/librustc_typeck/collect/type_of.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e6b1ac96469061320ae1436ee99f39ae1c5ea85/src%2Flibrustc_typeck%2Fcollect%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e6b1ac96469061320ae1436ee99f39ae1c5ea85/src%2Flibrustc_typeck%2Fcollect%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect%2Ftype_of.rs?ref=3e6b1ac96469061320ae1436ee99f39ae1c5ea85", "patch": "@@ -290,7 +290,7 @@ pub(super) fn type_of(tcx: TyCtxt<'_>, def_id: DefId) -> Ty<'_> {\n                             DUMMY_SP,\n                             &format!(\"unexpected const parent path {:?}\", parent_node,),\n                         );\n-                        return tcx.types.err;\n+                        tcx.types.err\n                     }\n                 }\n "}, {"sha": "ef94500f5c44436c7eafb3384ca66e5fd0361f05", "filename": "src/librustc_typeck/impl_wf_check/min_specialization.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e6b1ac96469061320ae1436ee99f39ae1c5ea85/src%2Flibrustc_typeck%2Fimpl_wf_check%2Fmin_specialization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e6b1ac96469061320ae1436ee99f39ae1c5ea85/src%2Flibrustc_typeck%2Fimpl_wf_check%2Fmin_specialization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fimpl_wf_check%2Fmin_specialization.rs?ref=3e6b1ac96469061320ae1436ee99f39ae1c5ea85", "patch": "@@ -270,7 +270,7 @@ fn check_static_lifetimes<'tcx>(\n     span: Span,\n ) {\n     if tcx.any_free_region_meets(parent_substs, |r| *r == ty::ReStatic) {\n-        tcx.sess.struct_span_err(span, &format!(\"cannot specialize on `'static` lifetime\")).emit();\n+        tcx.sess.struct_span_err(span, \"cannot specialize on `'static` lifetime\").emit();\n     }\n }\n "}, {"sha": "98300385c8fb8876fec63de84292ef5a02dc9f47", "filename": "src/librustdoc/passes/calculate_doc_coverage.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3e6b1ac96469061320ae1436ee99f39ae1c5ea85/src%2Flibrustdoc%2Fpasses%2Fcalculate_doc_coverage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e6b1ac96469061320ae1436ee99f39ae1c5ea85/src%2Flibrustdoc%2Fpasses%2Fcalculate_doc_coverage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcalculate_doc_coverage.rs?ref=3e6b1ac96469061320ae1436ee99f39ae1c5ea85", "patch": "@@ -8,7 +8,6 @@ use rustc_ast::attr;\n use rustc_span::symbol::sym;\n use rustc_span::FileName;\n use serde::Serialize;\n-use serde_json;\n \n use std::collections::BTreeMap;\n use std::ops;"}, {"sha": "e10d466030f0b1abc135e1418373c8d08fc0ea40", "filename": "src/libstd/backtrace.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e6b1ac96469061320ae1436ee99f39ae1c5ea85/src%2Flibstd%2Fbacktrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e6b1ac96469061320ae1436ee99f39ae1c5ea85/src%2Flibstd%2Fbacktrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fbacktrace.rs?ref=3e6b1ac96469061320ae1436ee99f39ae1c5ea85", "patch": "@@ -250,7 +250,7 @@ impl Backtrace {\n             },\n         };\n         ENABLED.store(enabled as usize + 1, SeqCst);\n-        return enabled;\n+        enabled\n     }\n \n     /// Capture a stack backtrace of the current thread."}, {"sha": "e9b1e86d7ae49ed8e66a6f5a995be65ceb8ef4d5", "filename": "src/libstd/sys_common/backtrace.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e6b1ac96469061320ae1436ee99f39ae1c5ea85/src%2Flibstd%2Fsys_common%2Fbacktrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e6b1ac96469061320ae1436ee99f39ae1c5ea85/src%2Flibstd%2Fsys_common%2Fbacktrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys_common%2Fbacktrace.rs?ref=3e6b1ac96469061320ae1436ee99f39ae1c5ea85", "patch": "@@ -28,7 +28,7 @@ pub fn lock() -> impl Drop {\n \n     unsafe {\n         LOCK.lock();\n-        return Guard;\n+        Guard\n     }\n }\n "}]}