{"sha": "052b31b5874a509a642a28cae0e20fe6031e766a", "node_id": "C_kwDOAAsO6NoAKDA1MmIzMWI1ODc0YTUwOWE2NDJhMjhjYWUwZTIwZmU2MDMxZTc2NmE", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2022-01-21T13:53:17Z"}, "committer": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2022-01-21T13:53:17Z"}, "message": "Move auxiliary fns out of overlap_with_probe", "tree": {"sha": "7c3869d99120028c1875c44507a01bbc3b6e95fa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7c3869d99120028c1875c44507a01bbc3b6e95fa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/052b31b5874a509a642a28cae0e20fe6031e766a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEF0ntrgrd9qf9uuThgTGiTgx5768FAmHqus0ACgkQgTGiTgx5\n769xlBAAgRQYqaiztkkcxdJt7btF3fB6Pb9LkivTApJMOELnNXcIJShmewxz27Ub\nct3cs4t+v/IfS5an8/dAMeq/+jQSho9rhQh3SNNZOUYU+d7kbiKNuW6/62fJJYx6\nDKsIaS27m1sJy/OpOCm5sVepuLKDbnmFgikrpqKANRU8nI0MkANgTa/lwo7TwNcz\nYaDJSDjxNdrFZerNtyPoB2lIQxzNewEL1Jkj6KhFiPBNdov2fll85N+raoypdxp0\npC6Sw/W7eH+Mu6E6tpwsjYjIHeoMVcBKxFF+53hFAf34L1/qRSFU/6eHgXUxDyQS\n+YqvZprWaF2hamEp4svDU/lHaUNwwhWmJoDFt1Br3nwduEfhkiFIJxVFdTVSbwoC\neU9Wo7/XnHaNjAsvR6HQNxHaOa5WItA6srynG8KVB/vep3zJ5336uB+X/Q02M3hu\nLf5sJJ+2nvst73F511u36Cr3UJ9ujdnVqCMn8V/5+G+IvbInuklraokhKl2sIUyr\nxKj9vetQa58c+/Lpo8r/sgJ2pxXUrmMhjaEbjx54FitQ72CR8CbHBaJ2iD63pEYJ\nT9uOga97gkYJPMbOLdBGkNcvfiHG0Qn1HEpRnXWsWW5si+5E2EIEddsWUewCNefP\nuny296W8+mPNRgosqRRmZUQmtCGG/rJbmtCSqgaZcT9gHRPcCnQ=\n=CBuS\n-----END PGP SIGNATURE-----", "payload": "tree 7c3869d99120028c1875c44507a01bbc3b6e95fa\nparent f518827503f8a88e3ecad9a7645d4fc7cd8cfebe\nauthor Santiago Pastorino <spastorino@gmail.com> 1642773197 -0300\ncommitter Santiago Pastorino <spastorino@gmail.com> 1642773197 -0300\n\nMove auxiliary fns out of overlap_with_probe\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/052b31b5874a509a642a28cae0e20fe6031e766a", "html_url": "https://github.com/rust-lang/rust/commit/052b31b5874a509a642a28cae0e20fe6031e766a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/052b31b5874a509a642a28cae0e20fe6031e766a/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f518827503f8a88e3ecad9a7645d4fc7cd8cfebe", "url": "https://api.github.com/repos/rust-lang/rust/commits/f518827503f8a88e3ecad9a7645d4fc7cd8cfebe", "html_url": "https://github.com/rust-lang/rust/commit/f518827503f8a88e3ecad9a7645d4fc7cd8cfebe"}], "stats": {"total": 38, "additions": 19, "deletions": 19}, "files": [{"sha": "4383836b98bb9ea53203eee8e911253cd7f542c6", "filename": "compiler/rustc_trait_selection/src/traits/coherence.rs", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/052b31b5874a509a642a28cae0e20fe6031e766a/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/052b31b5874a509a642a28cae0e20fe6031e766a/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs?ref=052b31b5874a509a642a28cae0e20fe6031e766a", "patch": "@@ -157,25 +157,6 @@ fn overlap_within_probe<'cx, 'tcx>(\n     impl2_def_id: DefId,\n     snapshot: &CombinedSnapshot<'_, 'tcx>,\n ) -> Option<OverlapResult<'tcx>> {\n-    fn loose_check<'cx, 'tcx>(\n-        selcx: &mut SelectionContext<'cx, 'tcx>,\n-        o: &PredicateObligation<'tcx>,\n-    ) -> bool {\n-        !selcx.predicate_may_hold_fatal(o)\n-    }\n-\n-    fn strict_check<'cx, 'tcx>(\n-        selcx: &SelectionContext<'cx, 'tcx>,\n-        o: &PredicateObligation<'tcx>,\n-    ) -> bool {\n-        let infcx = selcx.infcx();\n-        let tcx = infcx.tcx;\n-        o.flip_polarity(tcx)\n-            .as_ref()\n-            .map(|o| selcx.infcx().predicate_must_hold_modulo_regions(o))\n-            .unwrap_or(false)\n-    }\n-\n     // For the purposes of this check, we don't bring any placeholder\n     // types into scope; instead, we replace the generic types with\n     // fresh type variables, and hence we do our evaluations in an\n@@ -275,6 +256,25 @@ fn overlap_within_probe<'cx, 'tcx>(\n     Some(OverlapResult { impl_header, intercrate_ambiguity_causes, involves_placeholder })\n }\n \n+fn loose_check<'cx, 'tcx>(\n+    selcx: &mut SelectionContext<'cx, 'tcx>,\n+    o: &PredicateObligation<'tcx>,\n+) -> bool {\n+    !selcx.predicate_may_hold_fatal(o)\n+}\n+\n+fn strict_check<'cx, 'tcx>(\n+    selcx: &SelectionContext<'cx, 'tcx>,\n+    o: &PredicateObligation<'tcx>,\n+) -> bool {\n+    let infcx = selcx.infcx();\n+    let tcx = infcx.tcx;\n+    o.flip_polarity(tcx)\n+        .as_ref()\n+        .map(|o| selcx.infcx().predicate_must_hold_modulo_regions(o))\n+        .unwrap_or(false)\n+}\n+\n pub fn trait_ref_is_knowable<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     trait_ref: ty::TraitRef<'tcx>,"}]}