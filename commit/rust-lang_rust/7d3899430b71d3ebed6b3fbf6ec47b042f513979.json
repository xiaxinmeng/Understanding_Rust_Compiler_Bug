{"sha": "7d3899430b71d3ebed6b3fbf6ec47b042f513979", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdkMzg5OTQzMGI3MWQzZWJlZDZiM2ZiZjZlYzQ3YjA0MmY1MTM5Nzk=", "commit": {"author": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2014-07-07T16:07:49Z"}, "committer": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2014-07-07T16:16:36Z"}, "message": "collections: flesh out the Vec::clone_from benchmarks to cover reuse", "tree": {"sha": "df787548670398e6be2bdbb5216da69c25a3c109", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/df787548670398e6be2bdbb5216da69c25a3c109"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7d3899430b71d3ebed6b3fbf6ec47b042f513979", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7d3899430b71d3ebed6b3fbf6ec47b042f513979", "html_url": "https://github.com/rust-lang/rust/commit/7d3899430b71d3ebed6b3fbf6ec47b042f513979", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7d3899430b71d3ebed6b3fbf6ec47b042f513979/comments", "author": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "90fe1a632bd38633006ea53f92a1da14944fd835", "url": "https://api.github.com/repos/rust-lang/rust/commits/90fe1a632bd38633006ea53f92a1da14944fd835", "html_url": "https://github.com/rust-lang/rust/commit/90fe1a632bd38633006ea53f92a1da14944fd835"}], "stats": {"total": 123, "additions": 93, "deletions": 30}, "files": [{"sha": "ea7442b1f34557f8a518ad6606eb8bfb41e5ff1e", "filename": "src/libcollections/vec.rs", "status": "modified", "additions": 93, "deletions": 30, "changes": 123, "blob_url": "https://github.com/rust-lang/rust/blob/7d3899430b71d3ebed6b3fbf6ec47b042f513979/src%2Flibcollections%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d3899430b71d3ebed6b3fbf6ec47b042f513979/src%2Flibcollections%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec.rs?ref=7d3899430b71d3ebed6b3fbf6ec47b042f513979", "patch": "@@ -2209,78 +2209,141 @@ mod tests {\n         do_bench_clone(b, 1000)\n     }\n \n-    fn do_bench_clone_from(b: &mut Bencher, dst_len: uint, src_len: uint) {\n+    fn do_bench_clone_from(b: &mut Bencher, times: uint, dst_len: uint, src_len: uint) {\n         let dst: Vec<uint> = FromIterator::from_iter(range(0, src_len));\n         let src: Vec<uint> = FromIterator::from_iter(range(dst_len, dst_len + src_len));\n \n-        b.bytes = src_len as u64;\n+        b.bytes = (times * src_len) as u64;\n \n         b.iter(|| {\n             let mut dst = dst.clone();\n-            let src = src.clone();\n-            dst.clone_from(&src);\n-            assert_eq!(dst.len(), src_len);\n-            assert!(dst.iter().enumerate().all(|(i, x)| dst_len + i == *x));\n+\n+            for _ in range(0, times) {\n+                dst.clone_from(&src);\n+\n+                assert_eq!(dst.len(), src_len);\n+                assert!(dst.iter().enumerate().all(|(i, x)| dst_len + i == *x));\n+            }\n         });\n     }\n \n     #[bench]\n-    fn bench_clone_from_0000_0000(b: &mut Bencher) {\n-        do_bench_clone_from(b, 0, 0)\n+    fn bench_clone_from_01_0000_0000(b: &mut Bencher) {\n+        do_bench_clone_from(b, 1, 0, 0)\n+    }\n+\n+    #[bench]\n+    fn bench_clone_from_01_0000_0010(b: &mut Bencher) {\n+        do_bench_clone_from(b, 1, 0, 10)\n+    }\n+\n+    #[bench]\n+    fn bench_clone_from_01_0000_0100(b: &mut Bencher) {\n+        do_bench_clone_from(b, 1, 0, 100)\n+    }\n+\n+    #[bench]\n+    fn bench_clone_from_01_0000_1000(b: &mut Bencher) {\n+        do_bench_clone_from(b, 1, 0, 1000)\n+    }\n+\n+    #[bench]\n+    fn bench_clone_from_01_0010_0010(b: &mut Bencher) {\n+        do_bench_clone_from(b, 1, 10, 10)\n+    }\n+\n+    #[bench]\n+    fn bench_clone_from_01_0100_0100(b: &mut Bencher) {\n+        do_bench_clone_from(b, 1, 100, 100)\n+    }\n+\n+    #[bench]\n+    fn bench_clone_from_01_1000_1000(b: &mut Bencher) {\n+        do_bench_clone_from(b, 1, 1000, 1000)\n+    }\n+\n+    #[bench]\n+    fn bench_clone_from_01_0010_0100(b: &mut Bencher) {\n+        do_bench_clone_from(b, 1, 10, 100)\n+    }\n+\n+    #[bench]\n+    fn bench_clone_from_01_0100_1000(b: &mut Bencher) {\n+        do_bench_clone_from(b, 1, 100, 1000)\n+    }\n+\n+    #[bench]\n+    fn bench_clone_from_01_0010_0000(b: &mut Bencher) {\n+        do_bench_clone_from(b, 1, 10, 0)\n+    }\n+\n+    #[bench]\n+    fn bench_clone_from_01_0100_0010(b: &mut Bencher) {\n+        do_bench_clone_from(b, 1, 100, 10)\n+    }\n+\n+    #[bench]\n+    fn bench_clone_from_01_1000_0100(b: &mut Bencher) {\n+        do_bench_clone_from(b, 1, 1000, 100)\n+    }\n+\n+    #[bench]\n+    fn bench_clone_from_10_0000_0000(b: &mut Bencher) {\n+        do_bench_clone_from(b, 10, 0, 0)\n     }\n \n     #[bench]\n-    fn bench_clone_from_0000_0010(b: &mut Bencher) {\n-        do_bench_clone_from(b, 0, 10)\n+    fn bench_clone_from_10_0000_0010(b: &mut Bencher) {\n+        do_bench_clone_from(b, 10, 0, 10)\n     }\n \n     #[bench]\n-    fn bench_clone_from_0000_0100(b: &mut Bencher) {\n-        do_bench_clone_from(b, 0, 100)\n+    fn bench_clone_from_10_0000_0100(b: &mut Bencher) {\n+        do_bench_clone_from(b, 10, 0, 100)\n     }\n \n     #[bench]\n-    fn bench_clone_from_0000_1000(b: &mut Bencher) {\n-        do_bench_clone_from(b, 0, 1000)\n+    fn bench_clone_from_10_0000_1000(b: &mut Bencher) {\n+        do_bench_clone_from(b, 10, 0, 1000)\n     }\n \n     #[bench]\n-    fn bench_clone_from_0010_0010(b: &mut Bencher) {\n-        do_bench_clone_from(b, 10, 10)\n+    fn bench_clone_from_10_0010_0010(b: &mut Bencher) {\n+        do_bench_clone_from(b, 10, 10, 10)\n     }\n \n     #[bench]\n-    fn bench_clone_from_0100_0100(b: &mut Bencher) {\n-        do_bench_clone_from(b, 100, 100)\n+    fn bench_clone_from_10_0100_0100(b: &mut Bencher) {\n+        do_bench_clone_from(b, 10, 100, 100)\n     }\n \n     #[bench]\n-    fn bench_clone_from_1000_1000(b: &mut Bencher) {\n-        do_bench_clone_from(b, 1000, 1000)\n+    fn bench_clone_from_10_1000_1000(b: &mut Bencher) {\n+        do_bench_clone_from(b, 10, 1000, 1000)\n     }\n \n     #[bench]\n-    fn bench_clone_from_0010_0100(b: &mut Bencher) {\n-        do_bench_clone_from(b, 10, 100)\n+    fn bench_clone_from_10_0010_0100(b: &mut Bencher) {\n+        do_bench_clone_from(b, 10, 10, 100)\n     }\n \n     #[bench]\n-    fn bench_clone_from_0100_1000(b: &mut Bencher) {\n-        do_bench_clone_from(b, 100, 1000)\n+    fn bench_clone_from_10_0100_1000(b: &mut Bencher) {\n+        do_bench_clone_from(b, 10, 100, 1000)\n     }\n \n     #[bench]\n-    fn bench_clone_from_0010_0000(b: &mut Bencher) {\n-        do_bench_clone_from(b, 10, 0)\n+    fn bench_clone_from_10_0010_0000(b: &mut Bencher) {\n+        do_bench_clone_from(b, 10, 10, 0)\n     }\n \n     #[bench]\n-    fn bench_clone_from_0100_0010(b: &mut Bencher) {\n-        do_bench_clone_from(b, 100, 10)\n+    fn bench_clone_from_10_0100_0010(b: &mut Bencher) {\n+        do_bench_clone_from(b, 10, 100, 10)\n     }\n \n     #[bench]\n-    fn bench_clone_from_1000_0100(b: &mut Bencher) {\n-        do_bench_clone_from(b, 1000, 100)\n+    fn bench_clone_from_10_1000_0100(b: &mut Bencher) {\n+        do_bench_clone_from(b, 10, 1000, 100)\n     }\n }"}]}