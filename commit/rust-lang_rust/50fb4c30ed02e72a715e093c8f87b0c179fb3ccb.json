{"sha": "50fb4c30ed02e72a715e093c8f87b0c179fb3ccb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUwZmI0YzMwZWQwMmU3MmE3MTVlMDkzYzhmODdiMGMxNzlmYjNjY2I=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2012-02-09T10:50:54Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2012-02-09T10:58:08Z"}, "message": "Increase precedence of as operator\n\nCloses #1717", "tree": {"sha": "f94ca4759ed236f088971717c3d1cc4182002ac2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f94ca4759ed236f088971717c3d1cc4182002ac2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/50fb4c30ed02e72a715e093c8f87b0c179fb3ccb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/50fb4c30ed02e72a715e093c8f87b0c179fb3ccb", "html_url": "https://github.com/rust-lang/rust/commit/50fb4c30ed02e72a715e093c8f87b0c179fb3ccb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/50fb4c30ed02e72a715e093c8f87b0c179fb3ccb/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1dc5e1aa94d1c82d12385dfcb95c75cbaaa318a9", "url": "https://api.github.com/repos/rust-lang/rust/commits/1dc5e1aa94d1c82d12385dfcb95c75cbaaa318a9", "html_url": "https://github.com/rust-lang/rust/commit/1dc5e1aa94d1c82d12385dfcb95c75cbaaa318a9"}], "stats": {"total": 140, "additions": 71, "deletions": 69}, "files": [{"sha": "089aa8eeedbcb6ecb0f1c75a1dd764fe78fe5fd0", "filename": "src/comp/middle/shape.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/50fb4c30ed02e72a715e093c8f87b0c179fb3ccb/src%2Fcomp%2Fmiddle%2Fshape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50fb4c30ed02e72a715e093c8f87b0c179fb3ccb/src%2Fcomp%2Fmiddle%2Fshape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fshape.rs?ref=50fb4c30ed02e72a715e093c8f87b0c179fb3ccb", "patch": "@@ -308,7 +308,7 @@ fn mk_ctxt(llmod: ModuleRef) -> ctxt {\n fn add_bool(&dest: [u8], val: bool) { dest += [if val { 1u8 } else { 0u8 }]; }\n \n fn add_u16(&dest: [u8], val: u16) {\n-    dest += [val & 0xffu16 as u8, val >> 8u16 as u8];\n+    dest += [(val & 0xffu16) as u8, (val >> 8u16) as u8];\n }\n \n fn add_substr(&dest: [u8], src: [u8]) {"}, {"sha": "596671be9e7f34b0b67ca1ffe5d8f56129d2abf0", "filename": "src/comp/middle/trans/base.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/50fb4c30ed02e72a715e093c8f87b0c179fb3ccb/src%2Fcomp%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50fb4c30ed02e72a715e093c8f87b0c179fb3ccb/src%2Fcomp%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans%2Fbase.rs?ref=50fb4c30ed02e72a715e093c8f87b0c179fb3ccb", "patch": "@@ -231,9 +231,8 @@ fn sanitize(s: str) -> str {\n \n fn log_fn_time(ccx: @crate_ctxt, name: str, start: time::timeval,\n                end: time::timeval) {\n-    let elapsed =\n-        1000 * (end.sec - start.sec as int) +\n-            ((end.usec as int) - (start.usec as int)) / 1000;\n+    let elapsed = 1000 * ((end.sec - start.sec) as int) +\n+        ((end.usec as int) - (start.usec as int)) / 1000;\n     *ccx.stats.fn_times += [{ident: name, time: elapsed}];\n }\n "}, {"sha": "88148b990f8b4025489c5c5487e2aabf8bd05b37", "filename": "src/comp/syntax/ast_util.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/50fb4c30ed02e72a715e093c8f87b0c179fb3ccb/src%2Fcomp%2Fsyntax%2Fast_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50fb4c30ed02e72a715e093c8f87b0c179fb3ccb/src%2Fcomp%2Fsyntax%2Fast_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fast_util.rs?ref=50fb4c30ed02e72a715e093c8f87b0c179fb3ccb", "patch": "@@ -269,9 +269,9 @@ fn eval_const_expr(e: @expr) -> const_val {\n               mul { const_uint(a * b) } div { const_uint(a / b) }\n               rem { const_uint(a % b) } and | bitand { const_uint(a & b) }\n               or | bitor { const_uint(a | b) } bitxor { const_uint(a ^ b) }\n-              lsl { const_int(a << b as i64) }\n-              lsr { const_int(a >> b as i64) }\n-              asr { const_int(a >>> b as i64) }\n+              lsl { const_int((a << b) as i64) }\n+              lsr { const_int((a >> b) as i64) }\n+              asr { const_int((a >>> b) as i64) }\n               eq { fromb(a == b) } lt { fromb(a < b) }\n               le { fromb(a <= b) } ne { fromb(a != b) }\n               ge { fromb(a >= b) } gt { fromb(a > b) }"}, {"sha": "a988557b84da6e5c47f4f99f7a8e291925b99fab", "filename": "src/comp/syntax/parse/parser.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/50fb4c30ed02e72a715e093c8f87b0c179fb3ccb/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50fb4c30ed02e72a715e093c8f87b0c179fb3ccb/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs?ref=50fb4c30ed02e72a715e093c8f87b0c179fb3ccb", "patch": "@@ -1123,7 +1123,8 @@ type op_spec = {tok: token::token, op: ast::binop, prec: int};\n \n // FIXME make this a const, don't store it in parser state\n fn prec_table() -> @[op_spec] {\n-    ret @[{tok: token::BINOP(token::STAR), op: ast::mul, prec: 11},\n+    ret @[// 'as' sits between here with 12\n+          {tok: token::BINOP(token::STAR), op: ast::mul, prec: 11},\n           {tok: token::BINOP(token::SLASH), op: ast::div, prec: 11},\n           {tok: token::BINOP(token::PERCENT), op: ast::rem, prec: 11},\n           {tok: token::BINOP(token::PLUS), op: ast::add, prec: 10},\n@@ -1134,7 +1135,6 @@ fn prec_table() -> @[op_spec] {\n           {tok: token::BINOP(token::AND), op: ast::bitand, prec: 8},\n           {tok: token::BINOP(token::CARET), op: ast::bitxor, prec: 7},\n           {tok: token::BINOP(token::OR), op: ast::bitor, prec: 6},\n-          // 'as' sits between here with 5\n           {tok: token::LT, op: ast::lt, prec: 4},\n           {tok: token::LE, op: ast::le, prec: 4},\n           {tok: token::GE, op: ast::ge, prec: 4},\n@@ -1151,7 +1151,7 @@ fn parse_binops(p: parser) -> @ast::expr {\n \n const unop_prec: int = 100;\n \n-const as_prec: int = 5;\n+const as_prec: int = 12;\n \n fn parse_more_binops(p: parser, plhs: pexpr, min_prec: int) ->\n    @ast::expr {"}, {"sha": "0638394e29bde3b950eb74a3ed9b39c4690e692c", "filename": "src/libcore/extfmt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/50fb4c30ed02e72a715e093c8f87b0c179fb3ccb/src%2Flibcore%2Fextfmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50fb4c30ed02e72a715e093c8f87b0c179fb3ccb/src%2Flibcore%2Fextfmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fextfmt.rs?ref=50fb4c30ed02e72a715e093c8f87b0c179fb3ccb", "patch": "@@ -119,7 +119,7 @@ mod ct {\n         if i >= lim { ret none; }\n         let c = s[i];\n         if !('0' as u8 <= c && c <= '9' as u8) { ret option::none; }\n-        let n = c - ('0' as u8) as uint;\n+        let n = (c - ('0' as u8)) as uint;\n         ret alt peek_num(s, i + 1u, lim) {\n               none { some({num: n, next: i + 1u}) }\n               some(next) {"}, {"sha": "b98d96bb901a07909c47ca234b8cee8875085ad9", "filename": "src/libcore/str.rs", "status": "modified", "additions": 22, "deletions": 17, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/50fb4c30ed02e72a715e093c8f87b0c179fb3ccb/src%2Flibcore%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50fb4c30ed02e72a715e093c8f87b0c179fb3ccb/src%2Flibcore%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr.rs?ref=50fb4c30ed02e72a715e093c8f87b0c179fb3ccb", "patch": "@@ -142,25 +142,30 @@ fn push_utf8_bytes(&s: str, ch: char) {\n         if code < max_one_b {\n             [code as u8]\n         } else if code < max_two_b {\n-            [code >> 6u & 31u | tag_two_b as u8, code & 63u | tag_cont as u8]\n+            [(code >> 6u & 31u | tag_two_b) as u8,\n+             (code & 63u | tag_cont) as u8]\n         } else if code < max_three_b {\n-            [code >> 12u & 15u | tag_three_b as u8,\n-             code >> 6u & 63u | tag_cont as u8, code & 63u | tag_cont as u8]\n+            [(code >> 12u & 15u | tag_three_b) as u8,\n+             (code >> 6u & 63u | tag_cont) as u8,\n+             (code & 63u | tag_cont) as u8]\n         } else if code < max_four_b {\n-            [code >> 18u & 7u | tag_four_b as u8,\n-             code >> 12u & 63u | tag_cont as u8,\n-             code >> 6u & 63u | tag_cont as u8, code & 63u | tag_cont as u8]\n+            [(code >> 18u & 7u | tag_four_b) as u8,\n+             (code >> 12u & 63u | tag_cont) as u8,\n+             (code >> 6u & 63u | tag_cont) as u8,\n+             (code & 63u | tag_cont) as u8]\n         } else if code < max_five_b {\n-            [code >> 24u & 3u | tag_five_b as u8,\n-             code >> 18u & 63u | tag_cont as u8,\n-             code >> 12u & 63u | tag_cont as u8,\n-             code >> 6u & 63u | tag_cont as u8, code & 63u | tag_cont as u8]\n+            [(code >> 24u & 3u | tag_five_b) as u8,\n+             (code >> 18u & 63u | tag_cont) as u8,\n+             (code >> 12u & 63u | tag_cont) as u8,\n+             (code >> 6u & 63u | tag_cont) as u8,\n+             (code & 63u | tag_cont) as u8]\n         } else {\n-            [code >> 30u & 1u | tag_six_b as u8,\n-             code >> 24u & 63u | tag_cont as u8,\n-             code >> 18u & 63u | tag_cont as u8,\n-             code >> 12u & 63u | tag_cont as u8,\n-             code >> 6u & 63u | tag_cont as u8, code & 63u | tag_cont as u8]\n+            [(code >> 30u & 1u | tag_six_b) as u8,\n+             (code >> 24u & 63u | tag_cont) as u8,\n+             (code >> 18u & 63u | tag_cont) as u8,\n+             (code >> 12u & 63u | tag_cont) as u8,\n+             (code >> 6u & 63u | tag_cont) as u8,\n+             (code & 63u | tag_cont) as u8]\n         };\n     push_bytes(s, bytes);\n }\n@@ -1211,13 +1216,13 @@ fn char_range_at(s: str, i: uint) -> {ch: char, next: uint} {\n         let byte = s[i];\n         assert (byte & 192u8 == tag_cont_u8);\n         val <<= 6u;\n-        val += byte & 63u8 as uint;\n+        val += (byte & 63u8) as uint;\n         i += 1u;\n     }\n     // Clunky way to get the right bits from the first byte. Uses two shifts,\n     // the first to clip off the marker bits at the left of the byte, and then\n     // a second (as uint) to get it to the right position.\n-    val += (b0 << (w + 1u as u8) as uint) << ((w - 1u) * 6u - w - 1u);\n+    val += ((b0 << ((w + 1u) as u8)) as uint) << ((w - 1u) * 6u - w - 1u);\n     ret {ch: val as char, next: i};\n }\n "}, {"sha": "e825314e2da5679e2eb04a2086a66c22eb48364a", "filename": "src/libstd/ebml.rs", "status": "modified", "additions": 16, "deletions": 18, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/50fb4c30ed02e72a715e093c8f87b0c179fb3ccb/src%2Flibstd%2Febml.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50fb4c30ed02e72a715e093c8f87b0c179fb3ccb/src%2Flibstd%2Febml.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Febml.rs?ref=50fb4c30ed02e72a715e093c8f87b0c179fb3ccb", "patch": "@@ -19,22 +19,22 @@ type doc = {data: @[u8], start: uint, end: uint};\n \n fn vint_at(data: [u8], start: uint) -> {val: uint, next: uint} {\n     let a = data[start];\n-    if a & 0x80u8 != 0u8 { ret {val: a & 0x7fu8 as uint, next: start + 1u}; }\n+    if a & 0x80u8 != 0u8 {\n+        ret {val: (a & 0x7fu8) as uint, next: start + 1u};\n+    }\n     if a & 0x40u8 != 0u8 {\n-        ret {val: (a & 0x3fu8 as uint) << 8u | (data[start + 1u] as uint),\n+        ret {val: ((a & 0x3fu8) as uint) << 8u | (data[start + 1u] as uint),\n              next: start + 2u};\n     } else if a & 0x20u8 != 0u8 {\n-        ret {val:\n-                 (a & 0x1fu8 as uint) << 16u |\n-                     (data[start + 1u] as uint) << 8u |\n-                     (data[start + 2u] as uint),\n+        ret {val: ((a & 0x1fu8) as uint) << 16u |\n+                 (data[start + 1u] as uint) << 8u |\n+                 (data[start + 2u] as uint),\n              next: start + 3u};\n     } else if a & 0x10u8 != 0u8 {\n-        ret {val:\n-                 (a & 0x0fu8 as uint) << 24u |\n-                     (data[start + 1u] as uint) << 16u |\n-                     (data[start + 2u] as uint) << 8u |\n-                     (data[start + 3u] as uint),\n+        ret {val: ((a & 0x0fu8) as uint) << 24u |\n+                 (data[start + 1u] as uint) << 16u |\n+                 (data[start + 2u] as uint) << 8u |\n+                 (data[start + 3u] as uint),\n              next: start + 4u};\n     } else { #error(\"vint too big\"); fail; }\n }\n@@ -122,16 +122,14 @@ fn write_sized_vint(w: io::writer, n: uint, size: uint) {\n     let buf: [u8];\n     alt size {\n       1u { buf = [0x80u8 | (n as u8)]; }\n-      2u { buf = [0x40u8 | (n >> 8u as u8), n & 0xffu as u8]; }\n+      2u { buf = [0x40u8 | ((n >> 8u) as u8), (n & 0xffu) as u8]; }\n       3u {\n-        buf =\n-            [0x20u8 | (n >> 16u as u8), n >> 8u & 0xffu as u8,\n-             n & 0xffu as u8];\n+        buf = [0x20u8 | ((n >> 16u) as u8), (n >> 8u & 0xffu) as u8,\n+               (n & 0xffu) as u8];\n       }\n       4u {\n-        buf =\n-            [0x10u8 | (n >> 24u as u8), n >> 16u & 0xffu as u8,\n-             n >> 8u & 0xffu as u8, n & 0xffu as u8];\n+        buf = [0x10u8 | ((n >> 24u) as u8), (n >> 16u & 0xffu) as u8,\n+               (n >> 8u & 0xffu) as u8, (n & 0xffu) as u8];\n       }\n       _ { #error(\"vint to write too big\"); fail; }\n     }"}, {"sha": "2304445b95b18cb821109396cf3942d9471f598a", "filename": "src/libstd/fs.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/50fb4c30ed02e72a715e093c8f87b0c179fb3ccb/src%2Flibstd%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50fb4c30ed02e72a715e093c8f87b0c179fb3ccb/src%2Flibstd%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffs.rs?ref=50fb4c30ed02e72a715e093c8f87b0c179fb3ccb", "patch": "@@ -70,8 +70,8 @@ fn basename(p: path) -> path unsafe {\n         if i == -1 { ret p; }\n     }\n     let len = str::byte_len(p);\n-    if i + 1 as uint >= len { ret p; }\n-    ret str::unsafe::slice_bytes(p, i + 1 as uint, len);\n+    if (i + 1) as uint >= len { ret p; }\n+    ret str::unsafe::slice_bytes(p, (i + 1) as uint, len);\n }\n \n "}, {"sha": "95f275a9be0ae24c3b508bcf19475121e04f3ad7", "filename": "src/libstd/io.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/50fb4c30ed02e72a715e093c8f87b0c179fb3ccb/src%2Flibstd%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50fb4c30ed02e72a715e093c8f87b0c179fb3ccb/src%2Flibstd%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio.rs?ref=50fb4c30ed02e72a715e093c8f87b0c179fb3ccb", "patch": "@@ -59,10 +59,10 @@ impl reader_util for reader {\n                     assert (next > -1);\n                     assert (next & 192 == 128);\n                     val <<= 6u;\n-                    val += next & 63 as uint;\n+                    val += (next & 63) as uint;\n                 }\n                 // See str::char_at\n-                val += (b0 << (w + 1u as u8) as uint)\n+                val += ((b0 << ((w + 1u) as u8)) as uint)\n                     << (w - 1u) * 6u - w - 1u;\n                 chars += [ val as char ];\n             }\n@@ -368,14 +368,14 @@ fn mk_file_writer(path: str, flags: [fileflag])\n \n fn uint_to_le_bytes(n: uint, size: uint) -> [u8] {\n     let bytes: [u8] = [], i = size, n = n;\n-    while i > 0u { bytes += [n & 255u as u8]; n >>= 8u; i -= 1u; }\n+    while i > 0u { bytes += [(n & 255u) as u8]; n >>= 8u; i -= 1u; }\n     ret bytes;\n }\n \n fn uint_to_be_bytes(n: uint, size: uint) -> [u8] {\n     let bytes: [u8] = [];\n-    let i = size - 1u as int;\n-    while i >= 0 { bytes += [n >> (i * 8 as uint) & 255u as u8]; i -= 1; }\n+    let i = (size - 1u) as int;\n+    while i >= 0 { bytes += [(n >> ((i * 8) as uint) & 255u) as u8]; i -= 1; }\n     ret bytes;\n }\n "}, {"sha": "8d3bbac1ce478c619aff89bfbbaab0a40dc46968", "filename": "src/libstd/map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/50fb4c30ed02e72a715e093c8f87b0c179fb3ccb/src%2Flibstd%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50fb4c30ed02e72a715e093c8f87b0c179fb3ccb/src%2Flibstd%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmap.rs?ref=50fb4c30ed02e72a715e093c8f87b0c179fb3ccb", "patch": "@@ -296,7 +296,7 @@ mod chained {\n \n         fn insert(k: K, v: V) -> bool {\n             let nchains = vec::len(self.chains);\n-            let load = {num: self.size + 1u as int, den: nchains as int};\n+            let load = {num: (self.size + 1u) as int, den: nchains as int};\n             // Structural consts would be nice. This is a const 3/4\n             // load factor that we compare against.\n             if !util::rational_leq(load, {num:3, den:4}) { rehash(self); }"}, {"sha": "242bf61db135fcfdc13fd83a1058cb94cf0e9e15", "filename": "src/libstd/sha1.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/50fb4c30ed02e72a715e093c8f87b0c179fb3ccb/src%2Flibstd%2Fsha1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50fb4c30ed02e72a715e093c8f87b0c179fb3ccb/src%2Flibstd%2Fsha1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsha1.rs?ref=50fb4c30ed02e72a715e093c8f87b0c179fb3ccb", "patch": "@@ -193,10 +193,10 @@ fn mk_sha1() -> sha1 {\n         if !st.computed { pad_msg(st); st.computed = true; }\n         let rs: [u8] = [];\n         for hpart: u32 in st.h {\n-            let a = hpart >> 24u32 & 0xFFu32 as u8;\n-            let b = hpart >> 16u32 & 0xFFu32 as u8;\n-            let c = hpart >> 8u32 & 0xFFu32 as u8;\n-            let d = hpart & 0xFFu32 as u8;\n+            let a = (hpart >> 24u32 & 0xFFu32) as u8;\n+            let b = (hpart >> 16u32 & 0xFFu32) as u8;\n+            let c = (hpart >> 8u32 & 0xFFu32) as u8;\n+            let d = (hpart & 0xFFu32) as u8;\n             rs += [a, b, c, d];\n         }\n         ret rs;\n@@ -238,14 +238,14 @@ fn mk_sha1() -> sha1 {\n         }\n \n         // Store the message length as the last 8 octets\n-        st.msg_block[56] = st.len_high >> 24u32 & 0xFFu32 as u8;\n-        st.msg_block[57] = st.len_high >> 16u32 & 0xFFu32 as u8;\n-        st.msg_block[58] = st.len_high >> 8u32 & 0xFFu32 as u8;\n-        st.msg_block[59] = st.len_high & 0xFFu32 as u8;\n-        st.msg_block[60] = st.len_low >> 24u32 & 0xFFu32 as u8;\n-        st.msg_block[61] = st.len_low >> 16u32 & 0xFFu32 as u8;\n-        st.msg_block[62] = st.len_low >> 8u32 & 0xFFu32 as u8;\n-        st.msg_block[63] = st.len_low & 0xFFu32 as u8;\n+        st.msg_block[56] = (st.len_high >> 24u32 & 0xFFu32) as u8;\n+        st.msg_block[57] = (st.len_high >> 16u32 & 0xFFu32) as u8;\n+        st.msg_block[58] = (st.len_high >> 8u32 & 0xFFu32) as u8;\n+        st.msg_block[59] = (st.len_high & 0xFFu32) as u8;\n+        st.msg_block[60] = (st.len_low >> 24u32 & 0xFFu32) as u8;\n+        st.msg_block[61] = (st.len_low >> 16u32 & 0xFFu32) as u8;\n+        st.msg_block[62] = (st.len_low >> 8u32 & 0xFFu32) as u8;\n+        st.msg_block[63] = (st.len_low & 0xFFu32) as u8;\n         process_msg_block(st);\n     }\n "}, {"sha": "250a942fa68bda5f470566afd1ec652a609ca4e4", "filename": "src/test/bench/msgsend.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/50fb4c30ed02e72a715e093c8f87b0c179fb3ccb/src%2Ftest%2Fbench%2Fmsgsend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50fb4c30ed02e72a715e093c8f87b0c179fb3ccb/src%2Ftest%2Fbench%2Fmsgsend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fmsgsend.rs?ref=50fb4c30ed02e72a715e093c8f87b0c179fb3ccb", "patch": "@@ -48,7 +48,7 @@ fn run(args: [str]) {\n     let elapsed = end - start;\n     std::io::stdout().write_str(#fmt(\"Count is %?\\n\", result));\n     std::io::stdout().write_str(#fmt(\"Test took %? seconds\\n\", elapsed));\n-    let thruput = (size / workers * workers as float) / (elapsed as float);\n+    let thruput = ((size / workers * workers) as float) / (elapsed as float);\n     std::io::stdout().write_str(#fmt(\"Throughput=%f per sec\\n\", thruput));\n }\n "}, {"sha": "3f1d47d3be2cf9b3211e9c61508559f552e91d5f", "filename": "src/test/bench/shootout-binarytrees.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/50fb4c30ed02e72a715e093c8f87b0c179fb3ccb/src%2Ftest%2Fbench%2Fshootout-binarytrees.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50fb4c30ed02e72a715e093c8f87b0c179fb3ccb/src%2Ftest%2Fbench%2Fshootout-binarytrees.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-binarytrees.rs?ref=50fb4c30ed02e72a715e093c8f87b0c179fb3ccb", "patch": "@@ -38,7 +38,7 @@ fn main(args: [str]) {\n     let long_lived_tree = bottom_up_tree(0, max_depth);\n     let depth = min_depth;\n     while depth <= max_depth {\n-        let iterations = int::pow(2, max_depth - depth + min_depth as uint);\n+        let iterations = int::pow(2, (max_depth - depth + min_depth) as uint);\n         let chk = 0;\n         let i = 1;\n         while i <= iterations {"}, {"sha": "f4d52646e76d1b3a23a8ae537aad92ffc619e9ea", "filename": "src/test/run-pass/record-pat.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/50fb4c30ed02e72a715e093c8f87b0c179fb3ccb/src%2Ftest%2Frun-pass%2Frecord-pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50fb4c30ed02e72a715e093c8f87b0c179fb3ccb/src%2Ftest%2Frun-pass%2Frecord-pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frecord-pat.rs?ref=50fb4c30ed02e72a715e093c8f87b0c179fb3ccb", "patch": "@@ -5,7 +5,7 @@ enum t3 { c(t2, uint), }\n fn m(in: t3) -> int {\n     alt in {\n       c({x: a(m), _}, _) { ret m; }\n-      c({x: b(m), y: y}, z) { ret (m + z as int) + y; }\n+      c({x: b(m), y: y}, z) { ret ((m + z) as int) + y; }\n     }\n }\n "}]}