{"sha": "2537ad0d9e53933a9c5a54ec78ea89d5a025de8b", "node_id": "C_kwDOAAsO6NoAKDI1MzdhZDBkOWU1MzkzM2E5YzVhNTRlYzc4ZWE4OWQ1YTAyNWRlOGI", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-03-09T10:26:06Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-03-09T10:26:06Z"}, "message": "Simplify", "tree": {"sha": "d94398a99dca51b507540b7a3954cde2ee68cb55", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d94398a99dca51b507540b7a3954cde2ee68cb55"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2537ad0d9e53933a9c5a54ec78ea89d5a025de8b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2537ad0d9e53933a9c5a54ec78ea89d5a025de8b", "html_url": "https://github.com/rust-lang/rust/commit/2537ad0d9e53933a9c5a54ec78ea89d5a025de8b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2537ad0d9e53933a9c5a54ec78ea89d5a025de8b/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "054ab5fd9c5c373f3c22677f9455ea845eb51dc5", "url": "https://api.github.com/repos/rust-lang/rust/commits/054ab5fd9c5c373f3c22677f9455ea845eb51dc5", "html_url": "https://github.com/rust-lang/rust/commit/054ab5fd9c5c373f3c22677f9455ea845eb51dc5"}], "stats": {"total": 75, "additions": 34, "deletions": 41}, "files": [{"sha": "d38c91ac437e71a385618b065b17c5dc3ade7237", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 17, "deletions": 19, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/2537ad0d9e53933a9c5a54ec78ea89d5a025de8b/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2537ad0d9e53933a9c5a54ec78ea89d5a025de8b/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=2537ad0d9e53933a9c5a54ec78ea89d5a025de8b", "patch": "@@ -35,7 +35,7 @@ mod display;\n use std::{collections::HashMap, iter, ops::ControlFlow, sync::Arc};\n \n use arrayvec::ArrayVec;\n-use base_db::{CrateDisplayName, CrateId, CrateOrigin, Edition, FileId};\n+use base_db::{CrateDisplayName, CrateId, CrateOrigin, Edition, FileId, ProcMacroKind};\n use either::Either;\n use hir_def::{\n     adt::{ReprKind, VariantData},\n@@ -49,8 +49,8 @@ use hir_def::{\n     src::HasSource as _,\n     AdtId, AssocItemId, AssocItemLoc, AttrDefId, ConstId, ConstParamId, DefWithBodyId, EnumId,\n     FunctionId, GenericDefId, HasModule, ImplId, ItemContainerId, LifetimeParamId,\n-    LocalEnumVariantId, LocalFieldId, Lookup, MacroId, ModuleId, StaticId, StructId, TraitId,\n-    TypeAliasId, TypeOrConstParamId, TypeParamId, UnionId,\n+    LocalEnumVariantId, LocalFieldId, Lookup, MacroExpander, MacroId, ModuleId, StaticId, StructId,\n+    TraitId, TypeAliasId, TypeOrConstParamId, TypeParamId, UnionId,\n };\n use hir_expand::{name::name, MacroCallKind};\n use hir_ty::{\n@@ -1395,7 +1395,7 @@ impl Function {\n         }\n         let loc = self.id.lookup(db.upcast());\n         let def_map = db.crate_def_map(loc.krate(db).into());\n-        def_map.fn_as_proc_macro(loc.id).map(|id| Macro { id: id.into() })\n+        def_map.fn_as_proc_macro(self.id).map(|id| Macro { id: id.into() })\n     }\n \n     /// A textual representation of the HIR of this function for debugging purposes.\n@@ -1768,23 +1768,21 @@ impl Macro {\n     pub fn kind(&self, db: &dyn HirDatabase) -> MacroKind {\n         match self.id {\n             MacroId::Macro2Id(it) => match it.lookup(db.upcast()).expander {\n-                hir_def::MacroExpander::Declarative => MacroKind::Declarative,\n-                hir_def::MacroExpander::BuiltIn(_) => MacroKind::BuiltIn,\n-                hir_def::MacroExpander::BuiltInAttr(_) => MacroKind::Attr,\n-                hir_def::MacroExpander::BuiltInDerive(_) => MacroKind::Derive,\n-                hir_def::MacroExpander::BuiltInEager(_) => MacroKind::BuiltIn,\n+                MacroExpander::Declarative => MacroKind::Declarative,\n+                MacroExpander::BuiltIn(_) | MacroExpander::BuiltInEager(_) => MacroKind::BuiltIn,\n+                MacroExpander::BuiltInAttr(_) => MacroKind::Attr,\n+                MacroExpander::BuiltInDerive(_) => MacroKind::Derive,\n             },\n             MacroId::MacroRulesId(it) => match it.lookup(db.upcast()).expander {\n-                hir_def::MacroExpander::Declarative => MacroKind::Declarative,\n-                hir_def::MacroExpander::BuiltIn(_) => MacroKind::BuiltIn,\n-                hir_def::MacroExpander::BuiltInAttr(_) => MacroKind::Attr,\n-                hir_def::MacroExpander::BuiltInDerive(_) => MacroKind::Derive,\n-                hir_def::MacroExpander::BuiltInEager(_) => MacroKind::BuiltIn,\n+                MacroExpander::Declarative => MacroKind::Declarative,\n+                MacroExpander::BuiltIn(_) | MacroExpander::BuiltInEager(_) => MacroKind::BuiltIn,\n+                MacroExpander::BuiltInAttr(_) => MacroKind::Attr,\n+                MacroExpander::BuiltInDerive(_) => MacroKind::Derive,\n             },\n             MacroId::ProcMacroId(it) => match it.lookup(db.upcast()).kind {\n-                base_db::ProcMacroKind::CustomDerive => MacroKind::Derive,\n-                base_db::ProcMacroKind::FuncLike => MacroKind::ProcMacro,\n-                base_db::ProcMacroKind::Attr => MacroKind::Attr,\n+                ProcMacroKind::CustomDerive => MacroKind::Derive,\n+                ProcMacroKind::FuncLike => MacroKind::ProcMacro,\n+                ProcMacroKind::Attr => MacroKind::Attr,\n             },\n         }\n     }\n@@ -1799,11 +1797,11 @@ impl Macro {\n     pub fn is_builtin_derive(&self, db: &dyn HirDatabase) -> bool {\n         match self.id {\n             MacroId::Macro2Id(it) => match it.lookup(db.upcast()).expander {\n-                hir_def::MacroExpander::BuiltInDerive(_) => true,\n+                MacroExpander::BuiltInDerive(_) => true,\n                 _ => false,\n             },\n             MacroId::MacroRulesId(it) => match it.lookup(db.upcast()).expander {\n-                hir_def::MacroExpander::BuiltInDerive(_) => true,\n+                MacroExpander::BuiltInDerive(_) => true,\n                 _ => false,\n             },\n             MacroId::ProcMacroId(_) => false,"}, {"sha": "d7292b006379a03831dada87e7841735c4bf2ea6", "filename": "crates/hir_def/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2537ad0d9e53933a9c5a54ec78ea89d5a025de8b/crates%2Fhir_def%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2537ad0d9e53933a9c5a54ec78ea89d5a025de8b/crates%2Fhir_def%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Flib.rs?ref=2537ad0d9e53933a9c5a54ec78ea89d5a025de8b", "patch": "@@ -554,7 +554,7 @@ impl_from!(\n     FunctionId,\n     TraitId,\n     TypeAliasId,\n-    MacroId,\n+    MacroId(Macro2Id, MacroRulesId, ProcMacroId),\n     ImplId,\n     GenericParamId\n     for AttrDefId"}, {"sha": "e9d3d976f9e357e6e4df8920a1922aaf3802a00c", "filename": "crates/hir_def/src/nameres.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/2537ad0d9e53933a9c5a54ec78ea89d5a025de8b/crates%2Fhir_def%2Fsrc%2Fnameres.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2537ad0d9e53933a9c5a54ec78ea89d5a025de8b/crates%2Fhir_def%2Fsrc%2Fnameres.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fnameres.rs?ref=2537ad0d9e53933a9c5a54ec78ea89d5a025de8b", "patch": "@@ -70,12 +70,12 @@ use syntax::{ast, SmolStr};\n use crate::{\n     db::DefDatabase,\n     item_scope::{BuiltinShadowMode, ItemScope},\n-    item_tree::{self, ItemTreeId, TreeId},\n+    item_tree::TreeId,\n     nameres::{diagnostics::DefDiagnostic, path_resolution::ResolveMode},\n     path::ModPath,\n     per_ns::PerNs,\n     visibility::Visibility,\n-    AstId, BlockId, BlockLoc, LocalModuleId, ModuleDefId, ModuleId, ProcMacroId,\n+    AstId, BlockId, BlockLoc, FunctionId, LocalModuleId, ModuleDefId, ModuleId, ProcMacroId,\n };\n \n /// Contains the results of (early) name resolution.\n@@ -102,7 +102,7 @@ pub struct DefMap {\n \n     /// Side table for resolving derive helpers.\n     exported_derives: FxHashMap<MacroDefId, Box<[Name]>>,\n-    fn_proc_macro_mapping: FxHashMap<ItemTreeId<item_tree::Function>, ProcMacroId>,\n+    fn_proc_macro_mapping: FxHashMap<FunctionId, ProcMacroId>,\n \n     /// Custom attributes registered with `#![register_attr]`.\n     registered_attrs: Vec<SmolStr>,\n@@ -302,8 +302,7 @@ impl DefMap {\n         self.root\n     }\n \n-    // FIXME: This is an odd interface....\n-    pub fn fn_as_proc_macro(&self, id: ItemTreeId<item_tree::Function>) -> Option<ProcMacroId> {\n+    pub fn fn_as_proc_macro(&self, id: FunctionId) -> Option<ProcMacroId> {\n         self.fn_proc_macro_mapping.get(&id).copied()\n     }\n \n@@ -454,7 +453,7 @@ impl DefMap {\n         // Exhaustive match to require handling new fields.\n         let Self {\n             _c: _,\n-            exported_derives: exported_proc_macros,\n+            exported_derives,\n             extern_prelude,\n             diagnostics,\n             modules,\n@@ -470,7 +469,7 @@ impl DefMap {\n         } = self;\n \n         extern_prelude.shrink_to_fit();\n-        exported_proc_macros.shrink_to_fit();\n+        exported_derives.shrink_to_fit();\n         diagnostics.shrink_to_fit();\n         modules.shrink_to_fit();\n         registered_attrs.shrink_to_fit();"}, {"sha": "e1a297a3fc48292628a5220e46d07317e8b04f64", "filename": "crates/hir_def/src/nameres/collector.rs", "status": "modified", "additions": 10, "deletions": 14, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/2537ad0d9e53933a9c5a54ec78ea89d5a025de8b/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2537ad0d9e53933a9c5a54ec78ea89d5a025de8b/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs?ref=2537ad0d9e53933a9c5a54ec78ea89d5a025de8b", "patch": "@@ -46,10 +46,10 @@ use crate::{\n     path::{ImportAlias, ModPath, PathKind},\n     per_ns::PerNs,\n     visibility::{RawVisibility, Visibility},\n-    AdtId, AstId, AstIdWithPath, ConstLoc, EnumLoc, EnumVariantId, ExternBlockLoc, FunctionLoc,\n-    ImplLoc, Intern, ItemContainerId, LocalModuleId, Macro2Id, Macro2Loc, MacroExpander, MacroId,\n-    MacroRulesId, MacroRulesLoc, ModuleDefId, ModuleId, ProcMacroId, ProcMacroLoc, StaticLoc,\n-    StructLoc, TraitLoc, TypeAliasLoc, UnionLoc, UnresolvedMacro,\n+    AdtId, AstId, AstIdWithPath, ConstLoc, EnumLoc, EnumVariantId, ExternBlockLoc, FunctionId,\n+    FunctionLoc, ImplLoc, Intern, ItemContainerId, LocalModuleId, Macro2Id, Macro2Loc,\n+    MacroExpander, MacroId, MacroRulesId, MacroRulesLoc, ModuleDefId, ModuleId, ProcMacroId,\n+    ProcMacroLoc, StaticLoc, StructLoc, TraitLoc, TypeAliasLoc, UnionLoc, UnresolvedMacro,\n };\n \n static GLOB_RECURSION_LIMIT: Limit = Limit::new(100);\n@@ -552,6 +552,7 @@ impl DefCollector<'_> {\n         &mut self,\n         def: ProcMacroDef,\n         id: ItemTreeId<item_tree::Function>,\n+        fn_id: FunctionId,\n         module_id: ModuleId,\n     ) {\n         self.exports_proc_macros = true;\n@@ -570,7 +571,7 @@ impl DefCollector<'_> {\n                 .exported_derives\n                 .insert(macro_id_to_def_id(self.db, proc_macro_id.into()), helpers);\n         }\n-        self.def_map.fn_proc_macro_mapping.insert(id, proc_macro_id);\n+        self.def_map.fn_proc_macro_mapping.insert(fn_id, proc_macro_id);\n     }\n \n     /// Define a macro with `macro_rules`.\n@@ -1551,6 +1552,8 @@ impl ModCollector<'_, '_> {\n                 }\n                 ModItem::Function(id) => {\n                     let it = &self.item_tree[id];\n+                    let fn_id =\n+                        FunctionLoc { container, id: ItemTreeId::new(self.tree_id, id) }.intern(db);\n \n                     let is_proc_macro = attrs.parse_proc_macro_decl(&it.name);\n                     let vis = match is_proc_macro {\n@@ -1561,21 +1564,14 @@ impl ModCollector<'_, '_> {\n                             self.def_collector.export_proc_macro(\n                                 proc_macro,\n                                 ItemTreeId::new(self.tree_id, id),\n+                                fn_id,\n                                 module_id,\n                             );\n                             Visibility::Module(module_id)\n                         }\n                         None => resolve_vis(def_map, &self.item_tree[it.visibility]),\n                     };\n-                    update_def(\n-                        self.def_collector,\n-                        FunctionLoc { container, id: ItemTreeId::new(self.tree_id, id) }\n-                            .intern(db)\n-                            .into(),\n-                        &it.name,\n-                        vis,\n-                        false,\n-                    );\n+                    update_def(self.def_collector, fn_id.into(), &it.name, vis, false);\n                 }\n                 ModItem::Struct(id) => {\n                     let it = &self.item_tree[id];"}]}