{"sha": "788c98df5995c9fe360ba9ba5efb103ee69d05c4", "node_id": "C_kwDOAAsO6NoAKDc4OGM5OGRmNTk5NWM5ZmUzNjBiYTliYTVlZmIxMDNlZTY5ZDA1YzQ", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-06-10T12:47:51Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-06-10T12:47:51Z"}, "message": "Auto merge of #111818 - Urgau:uplift_cmp_nan, r=cjgillot\n\nUplift `clippy::cmp_nan` lint\n\nThis PR aims at uplifting the `clippy::cmp_nan` lint into rustc.\n\n## `invalid_nan_comparisons`\n\n~~(deny-by-default)~~ (warn-by-default)\n\nThe `invalid_nan_comparisons` lint checks comparison with `f32::NAN` or `f64::NAN` as one of the operand.\n\n### Example\n\n```rust,compile_fail\nlet a = 2.3f32;\nif a == f32::NAN {}\n```\n\n### Explanation\n\nNaN does not compare meaningfully to anything \u2013 not even itself \u2013 so those comparisons are always false.\n\n-----\n\nMostly followed the instructions for uplifting a clippy lint described here: https://github.com/rust-lang/rust/pull/99696#pullrequestreview-1134072751\n\n`@rustbot` label: +I-lang-nominated\nr? compiler", "tree": {"sha": "899ba7b18bc831fbfb002da17a22bd6dccf37050", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/899ba7b18bc831fbfb002da17a22bd6dccf37050"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/788c98df5995c9fe360ba9ba5efb103ee69d05c4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/788c98df5995c9fe360ba9ba5efb103ee69d05c4", "html_url": "https://github.com/rust-lang/rust/commit/788c98df5995c9fe360ba9ba5efb103ee69d05c4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/788c98df5995c9fe360ba9ba5efb103ee69d05c4/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4b71d79c972a605959b0a7c82b323fbd8562f070", "url": "https://api.github.com/repos/rust-lang/rust/commits/4b71d79c972a605959b0a7c82b323fbd8562f070", "html_url": "https://github.com/rust-lang/rust/commit/4b71d79c972a605959b0a7c82b323fbd8562f070"}, {"sha": "a8145372d70f0aeee27546219bdc9564420cc974", "url": "https://api.github.com/repos/rust-lang/rust/commits/a8145372d70f0aeee27546219bdc9564420cc974", "html_url": "https://github.com/rust-lang/rust/commit/a8145372d70f0aeee27546219bdc9564420cc974"}], "stats": {"total": 912, "additions": 604, "deletions": 308}, "files": [{"sha": "5e13ee7b8a41d4d64d057bd2f0867a9d43c5cf9a", "filename": "compiler/rustc_lint/messages.ftl", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/788c98df5995c9fe360ba9ba5efb103ee69d05c4/compiler%2Frustc_lint%2Fmessages.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/788c98df5995c9fe360ba9ba5efb103ee69d05c4/compiler%2Frustc_lint%2Fmessages.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fmessages.ftl?ref=788c98df5995c9fe360ba9ba5efb103ee69d05c4", "patch": "@@ -314,6 +314,11 @@ lint_invalid_from_utf8_checked = calls to `{$method}` with a invalid literal alw\n lint_invalid_from_utf8_unchecked = calls to `{$method}` with a invalid literal are undefined behavior\n     .label = the literal was valid UTF-8 up to the {$valid_up_to} bytes\n \n+lint_invalid_nan_comparisons_eq_ne = incorrect NaN comparison, NaN cannot be directly compared to itself\n+    .suggestion = use `f32::is_nan()` or `f64::is_nan()` instead\n+\n+lint_invalid_nan_comparisons_lt_le_gt_ge = incorrect NaN comparison, NaN is not orderable\n+\n lint_lintpass_by_hand = implementing `LintPass` by hand\n     .help = try using `declare_lint_pass!` or `impl_lint_pass!` instead\n "}, {"sha": "e990c771bdf50cd5180dd4ae0e5005f789b677f6", "filename": "compiler/rustc_lint/src/lints.rs", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/788c98df5995c9fe360ba9ba5efb103ee69d05c4/compiler%2Frustc_lint%2Fsrc%2Flints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/788c98df5995c9fe360ba9ba5efb103ee69d05c4/compiler%2Frustc_lint%2Fsrc%2Flints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flints.rs?ref=788c98df5995c9fe360ba9ba5efb103ee69d05c4", "patch": "@@ -1434,6 +1434,36 @@ pub struct OverflowingLiteral<'a> {\n #[diag(lint_unused_comparisons)]\n pub struct UnusedComparisons;\n \n+#[derive(LintDiagnostic)]\n+pub enum InvalidNanComparisons {\n+    #[diag(lint_invalid_nan_comparisons_eq_ne)]\n+    EqNe {\n+        #[subdiagnostic]\n+        suggestion: InvalidNanComparisonsSuggestion,\n+    },\n+    #[diag(lint_invalid_nan_comparisons_lt_le_gt_ge)]\n+    LtLeGtGe,\n+}\n+\n+#[derive(Subdiagnostic)]\n+pub enum InvalidNanComparisonsSuggestion {\n+    #[multipart_suggestion(\n+        lint_suggestion,\n+        style = \"verbose\",\n+        applicability = \"machine-applicable\"\n+    )]\n+    Spanful {\n+        #[suggestion_part(code = \"!\")]\n+        neg: Option<Span>,\n+        #[suggestion_part(code = \".is_nan()\")]\n+        float: Span,\n+        #[suggestion_part(code = \"\")]\n+        nan_plus_binop: Span,\n+    },\n+    #[help(lint_suggestion)]\n+    Spanless,\n+}\n+\n pub struct ImproperCTypes<'a> {\n     pub ty: Ty<'a>,\n     pub desc: &'a str,"}, {"sha": "264a59c5585a0811f89dfafdb5844e019e8bbddf", "filename": "compiler/rustc_lint/src/types.rs", "status": "modified", "additions": 95, "deletions": 7, "changes": 102, "blob_url": "https://github.com/rust-lang/rust/blob/788c98df5995c9fe360ba9ba5efb103ee69d05c4/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/788c98df5995c9fe360ba9ba5efb103ee69d05c4/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs?ref=788c98df5995c9fe360ba9ba5efb103ee69d05c4", "patch": "@@ -2,10 +2,10 @@ use crate::{\n     fluent_generated as fluent,\n     lints::{\n         AtomicOrderingFence, AtomicOrderingLoad, AtomicOrderingStore, ImproperCTypes,\n-        InvalidAtomicOrderingDiag, OnlyCastu8ToChar, OverflowingBinHex, OverflowingBinHexSign,\n-        OverflowingBinHexSub, OverflowingInt, OverflowingIntHelp, OverflowingLiteral,\n-        OverflowingUInt, RangeEndpointOutOfRange, UnusedComparisons, UseInclusiveRange,\n-        VariantSizeDifferencesDiag,\n+        InvalidAtomicOrderingDiag, InvalidNanComparisons, InvalidNanComparisonsSuggestion,\n+        OnlyCastu8ToChar, OverflowingBinHex, OverflowingBinHexSign, OverflowingBinHexSub,\n+        OverflowingInt, OverflowingIntHelp, OverflowingLiteral, OverflowingUInt,\n+        RangeEndpointOutOfRange, UnusedComparisons, UseInclusiveRange, VariantSizeDifferencesDiag,\n     },\n };\n use crate::{LateContext, LateLintPass, LintContext};\n@@ -113,13 +113,35 @@ declare_lint! {\n     \"detects enums with widely varying variant sizes\"\n }\n \n+declare_lint! {\n+    /// The `invalid_nan_comparisons` lint checks comparison with `f32::NAN` or `f64::NAN`\n+    /// as one of the operand.\n+    ///\n+    /// ### Example\n+    ///\n+    /// ```rust\n+    /// let a = 2.3f32;\n+    /// if a == f32::NAN {}\n+    /// ```\n+    ///\n+    /// {{produces}}\n+    ///\n+    /// ### Explanation\n+    ///\n+    /// NaN does not compare meaningfully to anything \u2013 not\n+    /// even itself \u2013 so those comparisons are always false.\n+    INVALID_NAN_COMPARISONS,\n+    Warn,\n+    \"detects invalid floating point NaN comparisons\"\n+}\n+\n #[derive(Copy, Clone)]\n pub struct TypeLimits {\n     /// Id of the last visited negated expression\n     negated_expr_id: Option<hir::HirId>,\n }\n \n-impl_lint_pass!(TypeLimits => [UNUSED_COMPARISONS, OVERFLOWING_LITERALS]);\n+impl_lint_pass!(TypeLimits => [UNUSED_COMPARISONS, OVERFLOWING_LITERALS, INVALID_NAN_COMPARISONS]);\n \n impl TypeLimits {\n     pub fn new() -> TypeLimits {\n@@ -486,6 +508,68 @@ fn lint_literal<'tcx>(\n     }\n }\n \n+fn lint_nan<'tcx>(\n+    cx: &LateContext<'tcx>,\n+    e: &'tcx hir::Expr<'tcx>,\n+    binop: hir::BinOp,\n+    l: &'tcx hir::Expr<'tcx>,\n+    r: &'tcx hir::Expr<'tcx>,\n+) {\n+    fn is_nan(cx: &LateContext<'_>, expr: &hir::Expr<'_>) -> bool {\n+        let expr = expr.peel_blocks().peel_borrows();\n+        match expr.kind {\n+            ExprKind::Path(qpath) => {\n+                let Some(def_id) = cx.typeck_results().qpath_res(&qpath, expr.hir_id).opt_def_id() else { return false; };\n+\n+                matches!(cx.tcx.get_diagnostic_name(def_id), Some(sym::f32_nan | sym::f64_nan))\n+            }\n+            _ => false,\n+        }\n+    }\n+\n+    fn eq_ne(\n+        e: &hir::Expr<'_>,\n+        l: &hir::Expr<'_>,\n+        r: &hir::Expr<'_>,\n+        f: impl FnOnce(Span, Span) -> InvalidNanComparisonsSuggestion,\n+    ) -> InvalidNanComparisons {\n+        let suggestion =\n+            if let Some(l_span) = l.span.find_ancestor_inside(e.span) &&\n+                let Some(r_span) = r.span.find_ancestor_inside(e.span) {\n+                f(l_span, r_span)\n+            } else {\n+                InvalidNanComparisonsSuggestion::Spanless\n+            };\n+\n+        InvalidNanComparisons::EqNe { suggestion }\n+    }\n+\n+    let lint = match binop.node {\n+        hir::BinOpKind::Eq | hir::BinOpKind::Ne if is_nan(cx, l) => {\n+            eq_ne(e, l, r, |l_span, r_span| InvalidNanComparisonsSuggestion::Spanful {\n+                nan_plus_binop: l_span.until(r_span),\n+                float: r_span.shrink_to_hi(),\n+                neg: (binop.node == hir::BinOpKind::Ne).then(|| r_span.shrink_to_lo()),\n+            })\n+        }\n+        hir::BinOpKind::Eq | hir::BinOpKind::Ne if is_nan(cx, r) => {\n+            eq_ne(e, l, r, |l_span, r_span| InvalidNanComparisonsSuggestion::Spanful {\n+                nan_plus_binop: l_span.shrink_to_hi().to(r_span),\n+                float: l_span.shrink_to_hi(),\n+                neg: (binop.node == hir::BinOpKind::Ne).then(|| l_span.shrink_to_lo()),\n+            })\n+        }\n+        hir::BinOpKind::Lt | hir::BinOpKind::Le | hir::BinOpKind::Gt | hir::BinOpKind::Ge\n+            if is_nan(cx, l) || is_nan(cx, r) =>\n+        {\n+            InvalidNanComparisons::LtLeGtGe\n+        }\n+        _ => return,\n+    };\n+\n+    cx.emit_spanned_lint(INVALID_NAN_COMPARISONS, e.span, lint);\n+}\n+\n impl<'tcx> LateLintPass<'tcx> for TypeLimits {\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, e: &'tcx hir::Expr<'tcx>) {\n         match e.kind {\n@@ -496,8 +580,12 @@ impl<'tcx> LateLintPass<'tcx> for TypeLimits {\n                 }\n             }\n             hir::ExprKind::Binary(binop, ref l, ref r) => {\n-                if is_comparison(binop) && !check_limits(cx, binop, &l, &r) {\n-                    cx.emit_spanned_lint(UNUSED_COMPARISONS, e.span, UnusedComparisons);\n+                if is_comparison(binop) {\n+                    if !check_limits(cx, binop, &l, &r) {\n+                        cx.emit_spanned_lint(UNUSED_COMPARISONS, e.span, UnusedComparisons);\n+                    } else {\n+                        lint_nan(cx, e, binop, l, r);\n+                    }\n                 }\n             }\n             hir::ExprKind::Lit(ref lit) => lint_literal(cx, self, e, lit),"}, {"sha": "c5ce2575fff06d62c3692dbb91eddc82cc19277a", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/788c98df5995c9fe360ba9ba5efb103ee69d05c4/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/788c98df5995c9fe360ba9ba5efb103ee69d05c4/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=788c98df5995c9fe360ba9ba5efb103ee69d05c4", "patch": "@@ -701,7 +701,9 @@ symbols! {\n         f,\n         f16c_target_feature,\n         f32,\n+        f32_nan,\n         f64,\n+        f64_nan,\n         fabsf32,\n         fabsf64,\n         fadd_fast,"}, {"sha": "d050d21c8c57533dd765d3aceb4dc2951e9745e9", "filename": "library/core/src/num/f32.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/788c98df5995c9fe360ba9ba5efb103ee69d05c4/library%2Fcore%2Fsrc%2Fnum%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/788c98df5995c9fe360ba9ba5efb103ee69d05c4/library%2Fcore%2Fsrc%2Fnum%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Ff32.rs?ref=788c98df5995c9fe360ba9ba5efb103ee69d05c4", "patch": "@@ -403,6 +403,7 @@ impl f32 {\n     /// and the stability of its representation over Rust versions\n     /// and target platforms isn't guaranteed.\n     #[stable(feature = \"assoc_int_consts\", since = \"1.43.0\")]\n+    #[rustc_diagnostic_item = \"f32_nan\"]\n     pub const NAN: f32 = 0.0_f32 / 0.0_f32;\n     /// Infinity (\u221e).\n     #[stable(feature = \"assoc_int_consts\", since = \"1.43.0\")]"}, {"sha": "d9a738191f7f14b9d761f33037bada8eba9036f3", "filename": "library/core/src/num/f64.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/788c98df5995c9fe360ba9ba5efb103ee69d05c4/library%2Fcore%2Fsrc%2Fnum%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/788c98df5995c9fe360ba9ba5efb103ee69d05c4/library%2Fcore%2Fsrc%2Fnum%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Ff64.rs?ref=788c98df5995c9fe360ba9ba5efb103ee69d05c4", "patch": "@@ -401,6 +401,7 @@ impl f64 {\n     /// This constant isn't guaranteed to equal to any specific NaN bitpattern,\n     /// and the stability of its representation over Rust versions\n     /// and target platforms isn't guaranteed.\n+    #[rustc_diagnostic_item = \"f64_nan\"]\n     #[stable(feature = \"assoc_int_consts\", since = \"1.43.0\")]\n     pub const NAN: f64 = 0.0_f64 / 0.0_f64;\n     /// Infinity (\u221e)."}, {"sha": "f1d1355123ab6ae7a18ae01ac28e81a1857dc65a", "filename": "src/tools/clippy/clippy_lints/src/declared_lints.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/788c98df5995c9fe360ba9ba5efb103ee69d05c4/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdeclared_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/788c98df5995c9fe360ba9ba5efb103ee69d05c4/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdeclared_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdeclared_lints.rs?ref=788c98df5995c9fe360ba9ba5efb103ee69d05c4", "patch": "@@ -476,7 +476,6 @@ pub(crate) static LINTS: &[&crate::LintInfo] = &[\n     crate::operators::ARITHMETIC_SIDE_EFFECTS_INFO,\n     crate::operators::ASSIGN_OP_PATTERN_INFO,\n     crate::operators::BAD_BIT_MASK_INFO,\n-    crate::operators::CMP_NAN_INFO,\n     crate::operators::CMP_OWNED_INFO,\n     crate::operators::DOUBLE_COMPARISONS_INFO,\n     crate::operators::DURATION_SUBSEC_INFO,"}, {"sha": "e18064b7061bf3d6344571a2a77fd7d240a3bc17", "filename": "src/tools/clippy/clippy_lints/src/operators/cmp_nan.rs", "status": "removed", "additions": 0, "deletions": 30, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/4b71d79c972a605959b0a7c82b323fbd8562f070/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Foperators%2Fcmp_nan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b71d79c972a605959b0a7c82b323fbd8562f070/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Foperators%2Fcmp_nan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Foperators%2Fcmp_nan.rs?ref=4b71d79c972a605959b0a7c82b323fbd8562f070", "patch": "@@ -1,30 +0,0 @@\n-use clippy_utils::consts::{constant, Constant};\n-use clippy_utils::diagnostics::span_lint;\n-use clippy_utils::in_constant;\n-use rustc_hir::{BinOpKind, Expr};\n-use rustc_lint::LateContext;\n-\n-use super::CMP_NAN;\n-\n-pub(super) fn check(cx: &LateContext<'_>, e: &Expr<'_>, op: BinOpKind, lhs: &Expr<'_>, rhs: &Expr<'_>) {\n-    if op.is_comparison() && !in_constant(cx, e.hir_id) && (is_nan(cx, lhs) || is_nan(cx, rhs)) {\n-        span_lint(\n-            cx,\n-            CMP_NAN,\n-            e.span,\n-            \"doomed comparison with `NAN`, use `{f32,f64}::is_nan()` instead\",\n-        );\n-    }\n-}\n-\n-fn is_nan(cx: &LateContext<'_>, e: &Expr<'_>) -> bool {\n-    if let Some(value) = constant(cx, cx.typeck_results(), e) {\n-        match value {\n-            Constant::F32(num) => num.is_nan(),\n-            Constant::F64(num) => num.is_nan(),\n-            _ => false,\n-        }\n-    } else {\n-        false\n-    }\n-}"}, {"sha": "2cf15adda01a2f86d0c92b488f46a45bf30d1ad9", "filename": "src/tools/clippy/clippy_lints/src/operators/mod.rs", "status": "modified", "additions": 0, "deletions": 28, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/788c98df5995c9fe360ba9ba5efb103ee69d05c4/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Foperators%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/788c98df5995c9fe360ba9ba5efb103ee69d05c4/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Foperators%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Foperators%2Fmod.rs?ref=788c98df5995c9fe360ba9ba5efb103ee69d05c4", "patch": "@@ -1,7 +1,6 @@\n mod absurd_extreme_comparisons;\n mod assign_op_pattern;\n mod bit_mask;\n-mod cmp_nan;\n mod cmp_owned;\n mod double_comparison;\n mod duration_subsec;\n@@ -485,31 +484,6 @@ declare_clippy_lint! {\n     \"integer division may cause loss of precision\"\n }\n \n-declare_clippy_lint! {\n-    /// ### What it does\n-    /// Checks for comparisons to NaN.\n-    ///\n-    /// ### Why is this bad?\n-    /// NaN does not compare meaningfully to anything \u2013 not\n-    /// even itself \u2013 so those comparisons are simply wrong.\n-    ///\n-    /// ### Example\n-    /// ```rust\n-    /// # let x = 1.0;\n-    /// if x == f32::NAN { }\n-    /// ```\n-    ///\n-    /// Use instead:\n-    /// ```rust\n-    /// # let x = 1.0f32;\n-    /// if x.is_nan() { }\n-    /// ```\n-    #[clippy::version = \"pre 1.29.0\"]\n-    pub CMP_NAN,\n-    correctness,\n-    \"comparisons to `NAN`, which will always return false, probably not intended\"\n-}\n-\n declare_clippy_lint! {\n     /// ### What it does\n     /// Checks for conversions to owned values just for the sake\n@@ -775,7 +749,6 @@ impl_lint_pass!(Operators => [\n     FLOAT_EQUALITY_WITHOUT_ABS,\n     IDENTITY_OP,\n     INTEGER_DIVISION,\n-    CMP_NAN,\n     CMP_OWNED,\n     FLOAT_CMP,\n     FLOAT_CMP_CONST,\n@@ -816,7 +789,6 @@ impl<'tcx> LateLintPass<'tcx> for Operators {\n                 duration_subsec::check(cx, e, op.node, lhs, rhs);\n                 float_equality_without_abs::check(cx, e, op.node, lhs, rhs);\n                 integer_division::check(cx, e, op.node, lhs, rhs);\n-                cmp_nan::check(cx, e, op.node, lhs, rhs);\n                 cmp_owned::check(cx, op.node, lhs, rhs);\n                 float_cmp::check(cx, e, op.node, lhs, rhs);\n                 modulo_one::check(cx, e, op.node, rhs);"}, {"sha": "cbcd11debfd761cc58a4786bdbaa0b3208d31966", "filename": "src/tools/clippy/clippy_lints/src/renamed_lints.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/788c98df5995c9fe360ba9ba5efb103ee69d05c4/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Frenamed_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/788c98df5995c9fe360ba9ba5efb103ee69d05c4/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Frenamed_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Frenamed_lints.rs?ref=788c98df5995c9fe360ba9ba5efb103ee69d05c4", "patch": "@@ -33,6 +33,7 @@ pub static RENAMED_LINTS: &[(&str, &str)] = &[\n     (\"clippy::zero_width_space\", \"clippy::invisible_characters\"),\n     (\"clippy::cast_ref_to_mut\", \"cast_ref_to_mut\"),\n     (\"clippy::clone_double_ref\", \"suspicious_double_ref_op\"),\n+    (\"clippy::cmp_nan\", \"invalid_nan_comparisons\"),\n     (\"clippy::drop_bounds\", \"drop_bounds\"),\n     (\"clippy::drop_copy\", \"dropping_copy_types\"),\n     (\"clippy::drop_ref\", \"dropping_references\"),"}, {"sha": "64ca52b010a7eb5c5a38db9a3d285d706b2b3656", "filename": "src/tools/clippy/tests/ui/cmp_nan.rs", "status": "removed", "additions": 0, "deletions": 34, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/4b71d79c972a605959b0a7c82b323fbd8562f070/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcmp_nan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b71d79c972a605959b0a7c82b323fbd8562f070/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcmp_nan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcmp_nan.rs?ref=4b71d79c972a605959b0a7c82b323fbd8562f070", "patch": "@@ -1,34 +0,0 @@\n-const NAN_F32: f32 = f32::NAN;\n-const NAN_F64: f64 = f64::NAN;\n-\n-#[warn(clippy::cmp_nan)]\n-#[allow(clippy::float_cmp, clippy::no_effect, clippy::unnecessary_operation)]\n-fn main() {\n-    let x = 5f32;\n-    x == f32::NAN;\n-    x != f32::NAN;\n-    x < f32::NAN;\n-    x > f32::NAN;\n-    x <= f32::NAN;\n-    x >= f32::NAN;\n-    x == NAN_F32;\n-    x != NAN_F32;\n-    x < NAN_F32;\n-    x > NAN_F32;\n-    x <= NAN_F32;\n-    x >= NAN_F32;\n-\n-    let y = 0f64;\n-    y == f64::NAN;\n-    y != f64::NAN;\n-    y < f64::NAN;\n-    y > f64::NAN;\n-    y <= f64::NAN;\n-    y >= f64::NAN;\n-    y == NAN_F64;\n-    y != NAN_F64;\n-    y < NAN_F64;\n-    y > NAN_F64;\n-    y <= NAN_F64;\n-    y >= NAN_F64;\n-}"}, {"sha": "867516661a539150125313a274e4817b13955e42", "filename": "src/tools/clippy/tests/ui/cmp_nan.stderr", "status": "removed", "additions": 0, "deletions": 148, "changes": 148, "blob_url": "https://github.com/rust-lang/rust/blob/4b71d79c972a605959b0a7c82b323fbd8562f070/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcmp_nan.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4b71d79c972a605959b0a7c82b323fbd8562f070/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcmp_nan.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcmp_nan.stderr?ref=4b71d79c972a605959b0a7c82b323fbd8562f070", "patch": "@@ -1,148 +0,0 @@\n-error: doomed comparison with `NAN`, use `{f32,f64}::is_nan()` instead\n-  --> $DIR/cmp_nan.rs:8:5\n-   |\n-LL |     x == f32::NAN;\n-   |     ^^^^^^^^^^^^^\n-   |\n-   = note: `-D clippy::cmp-nan` implied by `-D warnings`\n-\n-error: doomed comparison with `NAN`, use `{f32,f64}::is_nan()` instead\n-  --> $DIR/cmp_nan.rs:9:5\n-   |\n-LL |     x != f32::NAN;\n-   |     ^^^^^^^^^^^^^\n-\n-error: doomed comparison with `NAN`, use `{f32,f64}::is_nan()` instead\n-  --> $DIR/cmp_nan.rs:10:5\n-   |\n-LL |     x < f32::NAN;\n-   |     ^^^^^^^^^^^^\n-\n-error: doomed comparison with `NAN`, use `{f32,f64}::is_nan()` instead\n-  --> $DIR/cmp_nan.rs:11:5\n-   |\n-LL |     x > f32::NAN;\n-   |     ^^^^^^^^^^^^\n-\n-error: doomed comparison with `NAN`, use `{f32,f64}::is_nan()` instead\n-  --> $DIR/cmp_nan.rs:12:5\n-   |\n-LL |     x <= f32::NAN;\n-   |     ^^^^^^^^^^^^^\n-\n-error: doomed comparison with `NAN`, use `{f32,f64}::is_nan()` instead\n-  --> $DIR/cmp_nan.rs:13:5\n-   |\n-LL |     x >= f32::NAN;\n-   |     ^^^^^^^^^^^^^\n-\n-error: doomed comparison with `NAN`, use `{f32,f64}::is_nan()` instead\n-  --> $DIR/cmp_nan.rs:14:5\n-   |\n-LL |     x == NAN_F32;\n-   |     ^^^^^^^^^^^^\n-\n-error: doomed comparison with `NAN`, use `{f32,f64}::is_nan()` instead\n-  --> $DIR/cmp_nan.rs:15:5\n-   |\n-LL |     x != NAN_F32;\n-   |     ^^^^^^^^^^^^\n-\n-error: doomed comparison with `NAN`, use `{f32,f64}::is_nan()` instead\n-  --> $DIR/cmp_nan.rs:16:5\n-   |\n-LL |     x < NAN_F32;\n-   |     ^^^^^^^^^^^\n-\n-error: doomed comparison with `NAN`, use `{f32,f64}::is_nan()` instead\n-  --> $DIR/cmp_nan.rs:17:5\n-   |\n-LL |     x > NAN_F32;\n-   |     ^^^^^^^^^^^\n-\n-error: doomed comparison with `NAN`, use `{f32,f64}::is_nan()` instead\n-  --> $DIR/cmp_nan.rs:18:5\n-   |\n-LL |     x <= NAN_F32;\n-   |     ^^^^^^^^^^^^\n-\n-error: doomed comparison with `NAN`, use `{f32,f64}::is_nan()` instead\n-  --> $DIR/cmp_nan.rs:19:5\n-   |\n-LL |     x >= NAN_F32;\n-   |     ^^^^^^^^^^^^\n-\n-error: doomed comparison with `NAN`, use `{f32,f64}::is_nan()` instead\n-  --> $DIR/cmp_nan.rs:22:5\n-   |\n-LL |     y == f64::NAN;\n-   |     ^^^^^^^^^^^^^\n-\n-error: doomed comparison with `NAN`, use `{f32,f64}::is_nan()` instead\n-  --> $DIR/cmp_nan.rs:23:5\n-   |\n-LL |     y != f64::NAN;\n-   |     ^^^^^^^^^^^^^\n-\n-error: doomed comparison with `NAN`, use `{f32,f64}::is_nan()` instead\n-  --> $DIR/cmp_nan.rs:24:5\n-   |\n-LL |     y < f64::NAN;\n-   |     ^^^^^^^^^^^^\n-\n-error: doomed comparison with `NAN`, use `{f32,f64}::is_nan()` instead\n-  --> $DIR/cmp_nan.rs:25:5\n-   |\n-LL |     y > f64::NAN;\n-   |     ^^^^^^^^^^^^\n-\n-error: doomed comparison with `NAN`, use `{f32,f64}::is_nan()` instead\n-  --> $DIR/cmp_nan.rs:26:5\n-   |\n-LL |     y <= f64::NAN;\n-   |     ^^^^^^^^^^^^^\n-\n-error: doomed comparison with `NAN`, use `{f32,f64}::is_nan()` instead\n-  --> $DIR/cmp_nan.rs:27:5\n-   |\n-LL |     y >= f64::NAN;\n-   |     ^^^^^^^^^^^^^\n-\n-error: doomed comparison with `NAN`, use `{f32,f64}::is_nan()` instead\n-  --> $DIR/cmp_nan.rs:28:5\n-   |\n-LL |     y == NAN_F64;\n-   |     ^^^^^^^^^^^^\n-\n-error: doomed comparison with `NAN`, use `{f32,f64}::is_nan()` instead\n-  --> $DIR/cmp_nan.rs:29:5\n-   |\n-LL |     y != NAN_F64;\n-   |     ^^^^^^^^^^^^\n-\n-error: doomed comparison with `NAN`, use `{f32,f64}::is_nan()` instead\n-  --> $DIR/cmp_nan.rs:30:5\n-   |\n-LL |     y < NAN_F64;\n-   |     ^^^^^^^^^^^\n-\n-error: doomed comparison with `NAN`, use `{f32,f64}::is_nan()` instead\n-  --> $DIR/cmp_nan.rs:31:5\n-   |\n-LL |     y > NAN_F64;\n-   |     ^^^^^^^^^^^\n-\n-error: doomed comparison with `NAN`, use `{f32,f64}::is_nan()` instead\n-  --> $DIR/cmp_nan.rs:32:5\n-   |\n-LL |     y <= NAN_F64;\n-   |     ^^^^^^^^^^^^\n-\n-error: doomed comparison with `NAN`, use `{f32,f64}::is_nan()` instead\n-  --> $DIR/cmp_nan.rs:33:5\n-   |\n-LL |     y >= NAN_F64;\n-   |     ^^^^^^^^^^^^\n-\n-error: aborting due to 24 previous errors\n-"}, {"sha": "92821b6ecbbab81a796bbc258cf0cb9d56a93f2e", "filename": "src/tools/clippy/tests/ui/crashes/mut_mut_macro.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/788c98df5995c9fe360ba9ba5efb103ee69d05c4/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcrashes%2Fmut_mut_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/788c98df5995c9fe360ba9ba5efb103ee69d05c4/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcrashes%2Fmut_mut_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcrashes%2Fmut_mut_macro.rs?ref=788c98df5995c9fe360ba9ba5efb103ee69d05c4", "patch": "@@ -1,4 +1,4 @@\n-#![deny(clippy::mut_mut, clippy::zero_ptr, clippy::cmp_nan)]\n+#![deny(clippy::mut_mut, clippy::zero_ptr)]\n #![allow(dead_code)]\n \n // FIXME: compiletest + extern crates doesn't work together. To make this test work, it would need\n@@ -8,13 +8,12 @@\n //     extern crate lazy_static;\n //     use std::collections::HashMap;\n \n-/// ensure that we don't suggest `is_nan` and `is_null` inside constants\n+/// ensure that we don't suggest `is_null` inside constants\n /// FIXME: once const fn is stable, suggest these functions again in constants\n \n const BAA: *const i32 = 0 as *const i32;\n static mut BAR: *const i32 = BAA;\n static mut FOO: *const i32 = 0 as *const i32;\n-static mut BUH: bool = 42.0 < f32::NAN;\n \n #[allow(unused_variables, unused_mut)]\n fn main() {"}, {"sha": "f1b25dc094ef685e3e0fdc9628ae0b0fa9ddf555", "filename": "src/tools/clippy/tests/ui/rename.fixed", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/788c98df5995c9fe360ba9ba5efb103ee69d05c4/src%2Ftools%2Fclippy%2Ftests%2Fui%2Frename.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/788c98df5995c9fe360ba9ba5efb103ee69d05c4/src%2Ftools%2Fclippy%2Ftests%2Fui%2Frename.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Frename.fixed?ref=788c98df5995c9fe360ba9ba5efb103ee69d05c4", "patch": "@@ -41,6 +41,7 @@\n #![allow(invalid_atomic_ordering)]\n #![allow(invalid_value)]\n #![allow(invalid_from_utf8_unchecked)]\n+#![allow(invalid_nan_comparisons)]\n #![allow(let_underscore_drop)]\n #![allow(enum_intrinsics_non_enums)]\n #![allow(non_fmt_panics)]\n@@ -55,6 +56,7 @@\n #![warn(clippy::blocks_in_if_conditions)]\n #![warn(clippy::blocks_in_if_conditions)]\n #![warn(clippy::box_collection)]\n+#![warn(invalid_nan_comparisons)]\n #![warn(clippy::redundant_static_lifetimes)]\n #![warn(clippy::cognitive_complexity)]\n #![warn(clippy::derived_hash_with_manual_eq)]"}, {"sha": "4af511c344c4d41fc8b46914b5b0b10495413d37", "filename": "src/tools/clippy/tests/ui/rename.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/788c98df5995c9fe360ba9ba5efb103ee69d05c4/src%2Ftools%2Fclippy%2Ftests%2Fui%2Frename.rs", "raw_url": "https://github.com/rust-lang/rust/raw/788c98df5995c9fe360ba9ba5efb103ee69d05c4/src%2Ftools%2Fclippy%2Ftests%2Fui%2Frename.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Frename.rs?ref=788c98df5995c9fe360ba9ba5efb103ee69d05c4", "patch": "@@ -41,6 +41,7 @@\n #![allow(invalid_atomic_ordering)]\n #![allow(invalid_value)]\n #![allow(invalid_from_utf8_unchecked)]\n+#![allow(invalid_nan_comparisons)]\n #![allow(let_underscore_drop)]\n #![allow(enum_intrinsics_non_enums)]\n #![allow(non_fmt_panics)]\n@@ -55,6 +56,7 @@\n #![warn(clippy::block_in_if_condition_expr)]\n #![warn(clippy::block_in_if_condition_stmt)]\n #![warn(clippy::box_vec)]\n+#![warn(clippy::cmp_nan)]\n #![warn(clippy::const_static_lifetime)]\n #![warn(clippy::cyclomatic_complexity)]\n #![warn(clippy::derive_hash_xor_eq)]"}, {"sha": "156a8f96b502649ff99e386778ca643582f1c3fc", "filename": "src/tools/clippy/tests/ui/rename.stderr", "status": "modified", "additions": 58, "deletions": 52, "changes": 110, "blob_url": "https://github.com/rust-lang/rust/blob/788c98df5995c9fe360ba9ba5efb103ee69d05c4/src%2Ftools%2Fclippy%2Ftests%2Fui%2Frename.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/788c98df5995c9fe360ba9ba5efb103ee69d05c4/src%2Ftools%2Fclippy%2Ftests%2Fui%2Frename.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Frename.stderr?ref=788c98df5995c9fe360ba9ba5efb103ee69d05c4", "patch": "@@ -1,310 +1,316 @@\n error: lint `clippy::almost_complete_letter_range` has been renamed to `clippy::almost_complete_range`\n-  --> $DIR/rename.rs:53:9\n+  --> $DIR/rename.rs:54:9\n    |\n LL | #![warn(clippy::almost_complete_letter_range)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::almost_complete_range`\n    |\n    = note: `-D renamed-and-removed-lints` implied by `-D warnings`\n \n error: lint `clippy::blacklisted_name` has been renamed to `clippy::disallowed_names`\n-  --> $DIR/rename.rs:54:9\n+  --> $DIR/rename.rs:55:9\n    |\n LL | #![warn(clippy::blacklisted_name)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::disallowed_names`\n \n error: lint `clippy::block_in_if_condition_expr` has been renamed to `clippy::blocks_in_if_conditions`\n-  --> $DIR/rename.rs:55:9\n+  --> $DIR/rename.rs:56:9\n    |\n LL | #![warn(clippy::block_in_if_condition_expr)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::blocks_in_if_conditions`\n \n error: lint `clippy::block_in_if_condition_stmt` has been renamed to `clippy::blocks_in_if_conditions`\n-  --> $DIR/rename.rs:56:9\n+  --> $DIR/rename.rs:57:9\n    |\n LL | #![warn(clippy::block_in_if_condition_stmt)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::blocks_in_if_conditions`\n \n error: lint `clippy::box_vec` has been renamed to `clippy::box_collection`\n-  --> $DIR/rename.rs:57:9\n+  --> $DIR/rename.rs:58:9\n    |\n LL | #![warn(clippy::box_vec)]\n    |         ^^^^^^^^^^^^^^^ help: use the new name: `clippy::box_collection`\n \n+error: lint `clippy::cmp_nan` has been renamed to `invalid_nan_comparisons`\n+  --> $DIR/rename.rs:59:9\n+   |\n+LL | #![warn(clippy::cmp_nan)]\n+   |         ^^^^^^^^^^^^^^^ help: use the new name: `invalid_nan_comparisons`\n+\n error: lint `clippy::const_static_lifetime` has been renamed to `clippy::redundant_static_lifetimes`\n-  --> $DIR/rename.rs:58:9\n+  --> $DIR/rename.rs:60:9\n    |\n LL | #![warn(clippy::const_static_lifetime)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::redundant_static_lifetimes`\n \n error: lint `clippy::cyclomatic_complexity` has been renamed to `clippy::cognitive_complexity`\n-  --> $DIR/rename.rs:59:9\n+  --> $DIR/rename.rs:61:9\n    |\n LL | #![warn(clippy::cyclomatic_complexity)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::cognitive_complexity`\n \n error: lint `clippy::derive_hash_xor_eq` has been renamed to `clippy::derived_hash_with_manual_eq`\n-  --> $DIR/rename.rs:60:9\n+  --> $DIR/rename.rs:62:9\n    |\n LL | #![warn(clippy::derive_hash_xor_eq)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::derived_hash_with_manual_eq`\n \n error: lint `clippy::disallowed_method` has been renamed to `clippy::disallowed_methods`\n-  --> $DIR/rename.rs:61:9\n+  --> $DIR/rename.rs:63:9\n    |\n LL | #![warn(clippy::disallowed_method)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::disallowed_methods`\n \n error: lint `clippy::disallowed_type` has been renamed to `clippy::disallowed_types`\n-  --> $DIR/rename.rs:62:9\n+  --> $DIR/rename.rs:64:9\n    |\n LL | #![warn(clippy::disallowed_type)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::disallowed_types`\n \n error: lint `clippy::eval_order_dependence` has been renamed to `clippy::mixed_read_write_in_expression`\n-  --> $DIR/rename.rs:63:9\n+  --> $DIR/rename.rs:65:9\n    |\n LL | #![warn(clippy::eval_order_dependence)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::mixed_read_write_in_expression`\n \n error: lint `clippy::identity_conversion` has been renamed to `clippy::useless_conversion`\n-  --> $DIR/rename.rs:64:9\n+  --> $DIR/rename.rs:66:9\n    |\n LL | #![warn(clippy::identity_conversion)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::useless_conversion`\n \n error: lint `clippy::if_let_some_result` has been renamed to `clippy::match_result_ok`\n-  --> $DIR/rename.rs:65:9\n+  --> $DIR/rename.rs:67:9\n    |\n LL | #![warn(clippy::if_let_some_result)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::match_result_ok`\n \n error: lint `clippy::integer_arithmetic` has been renamed to `clippy::arithmetic_side_effects`\n-  --> $DIR/rename.rs:66:9\n+  --> $DIR/rename.rs:68:9\n    |\n LL | #![warn(clippy::integer_arithmetic)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::arithmetic_side_effects`\n \n error: lint `clippy::logic_bug` has been renamed to `clippy::overly_complex_bool_expr`\n-  --> $DIR/rename.rs:67:9\n+  --> $DIR/rename.rs:69:9\n    |\n LL | #![warn(clippy::logic_bug)]\n    |         ^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::overly_complex_bool_expr`\n \n error: lint `clippy::new_without_default_derive` has been renamed to `clippy::new_without_default`\n-  --> $DIR/rename.rs:68:9\n+  --> $DIR/rename.rs:70:9\n    |\n LL | #![warn(clippy::new_without_default_derive)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::new_without_default`\n \n error: lint `clippy::option_and_then_some` has been renamed to `clippy::bind_instead_of_map`\n-  --> $DIR/rename.rs:69:9\n+  --> $DIR/rename.rs:71:9\n    |\n LL | #![warn(clippy::option_and_then_some)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::bind_instead_of_map`\n \n error: lint `clippy::option_expect_used` has been renamed to `clippy::expect_used`\n-  --> $DIR/rename.rs:70:9\n+  --> $DIR/rename.rs:72:9\n    |\n LL | #![warn(clippy::option_expect_used)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::expect_used`\n \n error: lint `clippy::option_map_unwrap_or` has been renamed to `clippy::map_unwrap_or`\n-  --> $DIR/rename.rs:71:9\n+  --> $DIR/rename.rs:73:9\n    |\n LL | #![warn(clippy::option_map_unwrap_or)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::map_unwrap_or`\n \n error: lint `clippy::option_map_unwrap_or_else` has been renamed to `clippy::map_unwrap_or`\n-  --> $DIR/rename.rs:72:9\n+  --> $DIR/rename.rs:74:9\n    |\n LL | #![warn(clippy::option_map_unwrap_or_else)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::map_unwrap_or`\n \n error: lint `clippy::option_unwrap_used` has been renamed to `clippy::unwrap_used`\n-  --> $DIR/rename.rs:73:9\n+  --> $DIR/rename.rs:75:9\n    |\n LL | #![warn(clippy::option_unwrap_used)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::unwrap_used`\n \n error: lint `clippy::ref_in_deref` has been renamed to `clippy::needless_borrow`\n-  --> $DIR/rename.rs:74:9\n+  --> $DIR/rename.rs:76:9\n    |\n LL | #![warn(clippy::ref_in_deref)]\n    |         ^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::needless_borrow`\n \n error: lint `clippy::result_expect_used` has been renamed to `clippy::expect_used`\n-  --> $DIR/rename.rs:75:9\n+  --> $DIR/rename.rs:77:9\n    |\n LL | #![warn(clippy::result_expect_used)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::expect_used`\n \n error: lint `clippy::result_map_unwrap_or_else` has been renamed to `clippy::map_unwrap_or`\n-  --> $DIR/rename.rs:76:9\n+  --> $DIR/rename.rs:78:9\n    |\n LL | #![warn(clippy::result_map_unwrap_or_else)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::map_unwrap_or`\n \n error: lint `clippy::result_unwrap_used` has been renamed to `clippy::unwrap_used`\n-  --> $DIR/rename.rs:77:9\n+  --> $DIR/rename.rs:79:9\n    |\n LL | #![warn(clippy::result_unwrap_used)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::unwrap_used`\n \n error: lint `clippy::single_char_push_str` has been renamed to `clippy::single_char_add_str`\n-  --> $DIR/rename.rs:78:9\n+  --> $DIR/rename.rs:80:9\n    |\n LL | #![warn(clippy::single_char_push_str)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::single_char_add_str`\n \n error: lint `clippy::stutter` has been renamed to `clippy::module_name_repetitions`\n-  --> $DIR/rename.rs:79:9\n+  --> $DIR/rename.rs:81:9\n    |\n LL | #![warn(clippy::stutter)]\n    |         ^^^^^^^^^^^^^^^ help: use the new name: `clippy::module_name_repetitions`\n \n error: lint `clippy::to_string_in_display` has been renamed to `clippy::recursive_format_impl`\n-  --> $DIR/rename.rs:80:9\n+  --> $DIR/rename.rs:82:9\n    |\n LL | #![warn(clippy::to_string_in_display)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::recursive_format_impl`\n \n error: lint `clippy::zero_width_space` has been renamed to `clippy::invisible_characters`\n-  --> $DIR/rename.rs:81:9\n+  --> $DIR/rename.rs:83:9\n    |\n LL | #![warn(clippy::zero_width_space)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::invisible_characters`\n \n error: lint `clippy::cast_ref_to_mut` has been renamed to `cast_ref_to_mut`\n-  --> $DIR/rename.rs:82:9\n+  --> $DIR/rename.rs:84:9\n    |\n LL | #![warn(clippy::cast_ref_to_mut)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `cast_ref_to_mut`\n \n error: lint `clippy::clone_double_ref` has been renamed to `suspicious_double_ref_op`\n-  --> $DIR/rename.rs:83:9\n+  --> $DIR/rename.rs:85:9\n    |\n LL | #![warn(clippy::clone_double_ref)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `suspicious_double_ref_op`\n \n error: lint `clippy::drop_bounds` has been renamed to `drop_bounds`\n-  --> $DIR/rename.rs:84:9\n+  --> $DIR/rename.rs:86:9\n    |\n LL | #![warn(clippy::drop_bounds)]\n    |         ^^^^^^^^^^^^^^^^^^^ help: use the new name: `drop_bounds`\n \n error: lint `clippy::drop_copy` has been renamed to `dropping_copy_types`\n-  --> $DIR/rename.rs:85:9\n+  --> $DIR/rename.rs:87:9\n    |\n LL | #![warn(clippy::drop_copy)]\n    |         ^^^^^^^^^^^^^^^^^ help: use the new name: `dropping_copy_types`\n \n error: lint `clippy::drop_ref` has been renamed to `dropping_references`\n-  --> $DIR/rename.rs:86:9\n+  --> $DIR/rename.rs:88:9\n    |\n LL | #![warn(clippy::drop_ref)]\n    |         ^^^^^^^^^^^^^^^^ help: use the new name: `dropping_references`\n \n error: lint `clippy::for_loop_over_option` has been renamed to `for_loops_over_fallibles`\n-  --> $DIR/rename.rs:87:9\n+  --> $DIR/rename.rs:89:9\n    |\n LL | #![warn(clippy::for_loop_over_option)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `for_loops_over_fallibles`\n \n error: lint `clippy::for_loop_over_result` has been renamed to `for_loops_over_fallibles`\n-  --> $DIR/rename.rs:88:9\n+  --> $DIR/rename.rs:90:9\n    |\n LL | #![warn(clippy::for_loop_over_result)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `for_loops_over_fallibles`\n \n error: lint `clippy::for_loops_over_fallibles` has been renamed to `for_loops_over_fallibles`\n-  --> $DIR/rename.rs:89:9\n+  --> $DIR/rename.rs:91:9\n    |\n LL | #![warn(clippy::for_loops_over_fallibles)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `for_loops_over_fallibles`\n \n error: lint `clippy::forget_copy` has been renamed to `forgetting_copy_types`\n-  --> $DIR/rename.rs:90:9\n+  --> $DIR/rename.rs:92:9\n    |\n LL | #![warn(clippy::forget_copy)]\n    |         ^^^^^^^^^^^^^^^^^^^ help: use the new name: `forgetting_copy_types`\n \n error: lint `clippy::forget_ref` has been renamed to `forgetting_references`\n-  --> $DIR/rename.rs:91:9\n+  --> $DIR/rename.rs:93:9\n    |\n LL | #![warn(clippy::forget_ref)]\n    |         ^^^^^^^^^^^^^^^^^^ help: use the new name: `forgetting_references`\n \n error: lint `clippy::into_iter_on_array` has been renamed to `array_into_iter`\n-  --> $DIR/rename.rs:92:9\n+  --> $DIR/rename.rs:94:9\n    |\n LL | #![warn(clippy::into_iter_on_array)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `array_into_iter`\n \n error: lint `clippy::invalid_atomic_ordering` has been renamed to `invalid_atomic_ordering`\n-  --> $DIR/rename.rs:93:9\n+  --> $DIR/rename.rs:95:9\n    |\n LL | #![warn(clippy::invalid_atomic_ordering)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `invalid_atomic_ordering`\n \n error: lint `clippy::invalid_ref` has been renamed to `invalid_value`\n-  --> $DIR/rename.rs:94:9\n+  --> $DIR/rename.rs:96:9\n    |\n LL | #![warn(clippy::invalid_ref)]\n    |         ^^^^^^^^^^^^^^^^^^^ help: use the new name: `invalid_value`\n \n error: lint `clippy::invalid_utf8_in_unchecked` has been renamed to `invalid_from_utf8_unchecked`\n-  --> $DIR/rename.rs:95:9\n+  --> $DIR/rename.rs:97:9\n    |\n LL | #![warn(clippy::invalid_utf8_in_unchecked)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `invalid_from_utf8_unchecked`\n \n error: lint `clippy::let_underscore_drop` has been renamed to `let_underscore_drop`\n-  --> $DIR/rename.rs:96:9\n+  --> $DIR/rename.rs:98:9\n    |\n LL | #![warn(clippy::let_underscore_drop)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `let_underscore_drop`\n \n error: lint `clippy::mem_discriminant_non_enum` has been renamed to `enum_intrinsics_non_enums`\n-  --> $DIR/rename.rs:97:9\n+  --> $DIR/rename.rs:99:9\n    |\n LL | #![warn(clippy::mem_discriminant_non_enum)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `enum_intrinsics_non_enums`\n \n error: lint `clippy::panic_params` has been renamed to `non_fmt_panics`\n-  --> $DIR/rename.rs:98:9\n+  --> $DIR/rename.rs:100:9\n    |\n LL | #![warn(clippy::panic_params)]\n    |         ^^^^^^^^^^^^^^^^^^^^ help: use the new name: `non_fmt_panics`\n \n error: lint `clippy::positional_named_format_parameters` has been renamed to `named_arguments_used_positionally`\n-  --> $DIR/rename.rs:99:9\n+  --> $DIR/rename.rs:101:9\n    |\n LL | #![warn(clippy::positional_named_format_parameters)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `named_arguments_used_positionally`\n \n error: lint `clippy::temporary_cstring_as_ptr` has been renamed to `temporary_cstring_as_ptr`\n-  --> $DIR/rename.rs:100:9\n+  --> $DIR/rename.rs:102:9\n    |\n LL | #![warn(clippy::temporary_cstring_as_ptr)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `temporary_cstring_as_ptr`\n \n error: lint `clippy::undropped_manually_drops` has been renamed to `undropped_manually_drops`\n-  --> $DIR/rename.rs:101:9\n+  --> $DIR/rename.rs:103:9\n    |\n LL | #![warn(clippy::undropped_manually_drops)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `undropped_manually_drops`\n \n error: lint `clippy::unknown_clippy_lints` has been renamed to `unknown_lints`\n-  --> $DIR/rename.rs:102:9\n+  --> $DIR/rename.rs:104:9\n    |\n LL | #![warn(clippy::unknown_clippy_lints)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `unknown_lints`\n \n error: lint `clippy::unused_label` has been renamed to `unused_labels`\n-  --> $DIR/rename.rs:103:9\n+  --> $DIR/rename.rs:105:9\n    |\n LL | #![warn(clippy::unused_label)]\n    |         ^^^^^^^^^^^^^^^^^^^^ help: use the new name: `unused_labels`\n \n-error: aborting due to 51 previous errors\n+error: aborting due to 52 previous errors\n "}, {"sha": "debc7e152e73961fc91aae4ac17b783b24622c62", "filename": "src/tools/clippy/tests/ui/unknown_clippy_lints.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/788c98df5995c9fe360ba9ba5efb103ee69d05c4/src%2Ftools%2Fclippy%2Ftests%2Fui%2Funknown_clippy_lints.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/788c98df5995c9fe360ba9ba5efb103ee69d05c4/src%2Ftools%2Fclippy%2Ftests%2Fui%2Funknown_clippy_lints.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Funknown_clippy_lints.fixed?ref=788c98df5995c9fe360ba9ba5efb103ee69d05c4", "patch": "@@ -3,7 +3,7 @@\n #![warn(clippy::pedantic)]\n // Should suggest lowercase\n #![allow(clippy::all)]\n-#![warn(clippy::cmp_nan)]\n+#![warn(clippy::cmp_owned)]\n \n // Should suggest similar clippy lint name\n #[warn(clippy::if_not_else)]"}, {"sha": "16140fd107917443f6bf5505ffb07df4fb9c62d9", "filename": "src/tools/clippy/tests/ui/unknown_clippy_lints.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/788c98df5995c9fe360ba9ba5efb103ee69d05c4/src%2Ftools%2Fclippy%2Ftests%2Fui%2Funknown_clippy_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/788c98df5995c9fe360ba9ba5efb103ee69d05c4/src%2Ftools%2Fclippy%2Ftests%2Fui%2Funknown_clippy_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Funknown_clippy_lints.rs?ref=788c98df5995c9fe360ba9ba5efb103ee69d05c4", "patch": "@@ -3,7 +3,7 @@\n #![warn(clippy::pedantic)]\n // Should suggest lowercase\n #![allow(clippy::All)]\n-#![warn(clippy::CMP_NAN)]\n+#![warn(clippy::CMP_OWNED)]\n \n // Should suggest similar clippy lint name\n #[warn(clippy::if_not_els)]"}, {"sha": "880673eef3e40a33c6816c29a0c81940a08fffd5", "filename": "src/tools/clippy/tests/ui/unknown_clippy_lints.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/788c98df5995c9fe360ba9ba5efb103ee69d05c4/src%2Ftools%2Fclippy%2Ftests%2Fui%2Funknown_clippy_lints.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/788c98df5995c9fe360ba9ba5efb103ee69d05c4/src%2Ftools%2Fclippy%2Ftests%2Fui%2Funknown_clippy_lints.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Funknown_clippy_lints.stderr?ref=788c98df5995c9fe360ba9ba5efb103ee69d05c4", "patch": "@@ -6,11 +6,11 @@ LL | #![allow(clippy::All)]\n    |\n    = note: `-D unknown-lints` implied by `-D warnings`\n \n-error: unknown lint: `clippy::CMP_NAN`\n+error: unknown lint: `clippy::CMP_OWNED`\n   --> $DIR/unknown_clippy_lints.rs:6:9\n    |\n-LL | #![warn(clippy::CMP_NAN)]\n-   |         ^^^^^^^^^^^^^^^ help: did you mean: `clippy::cmp_nan`\n+LL | #![warn(clippy::CMP_OWNED)]\n+   |         ^^^^^^^^^^^^^^^^^ help: did you mean: `clippy::cmp_owned`\n \n error: unknown lint: `clippy::if_not_els`\n   --> $DIR/unknown_clippy_lints.rs:9:8"}, {"sha": "2a20e50fa45433ed6674701df1d1007a680a6a52", "filename": "tests/ui/issues/issue-50811.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/788c98df5995c9fe360ba9ba5efb103ee69d05c4/tests%2Fui%2Fissues%2Fissue-50811.rs", "raw_url": "https://github.com/rust-lang/rust/raw/788c98df5995c9fe360ba9ba5efb103ee69d05c4/tests%2Fui%2Fissues%2Fissue-50811.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-50811.rs?ref=788c98df5995c9fe360ba9ba5efb103ee69d05c4", "patch": "@@ -1,5 +1,6 @@\n // run-pass\n #![feature(test)]\n+#![allow(invalid_nan_comparisons)]\n \n extern crate test;\n "}, {"sha": "feafc6c1b8c132843faf0ab3f403d3b689924329", "filename": "tests/ui/lint/invalid-nan-comparison-suggestion.fixed", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/788c98df5995c9fe360ba9ba5efb103ee69d05c4/tests%2Fui%2Flint%2Finvalid-nan-comparison-suggestion.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/788c98df5995c9fe360ba9ba5efb103ee69d05c4/tests%2Fui%2Flint%2Finvalid-nan-comparison-suggestion.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Finvalid-nan-comparison-suggestion.fixed?ref=788c98df5995c9fe360ba9ba5efb103ee69d05c4", "patch": "@@ -0,0 +1,36 @@\n+// check-pass\n+// run-rustfix\n+\n+fn main() {\n+    let x = 5f32;\n+    let _ = x.is_nan();\n+    //~^ WARN incorrect NaN comparison\n+    let _ = !x.is_nan();\n+    //~^ WARN incorrect NaN comparison\n+\n+    let x = 5f64;\n+    let _ = x.is_nan();\n+    //~^ WARN incorrect NaN comparison\n+    let _ = !x.is_nan();\n+    //~^ WARN incorrect NaN comparison\n+\n+    let b = &2.3f32;\n+    if !b.is_nan() {}\n+    //~^ WARN incorrect NaN comparison\n+\n+    let b = &2.3f32;\n+    if !b.is_nan() {}\n+    //~^ WARN incorrect NaN comparison\n+\n+    let _ =\n+        !b.is_nan();\n+\n+    #[allow(unused_macros)]\n+    macro_rules! nan { () => { f32::NAN }; }\n+    macro_rules! number { () => { 5f32 }; }\n+\n+    let _ = number!().is_nan();\n+    //~^ WARN incorrect NaN comparison\n+    let _ = !number!().is_nan();\n+    //~^ WARN incorrect NaN comparison\n+}"}, {"sha": "ad5eb66e5f17dfa3db7162af475f81a07085f6e1", "filename": "tests/ui/lint/invalid-nan-comparison-suggestion.rs", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/788c98df5995c9fe360ba9ba5efb103ee69d05c4/tests%2Fui%2Flint%2Finvalid-nan-comparison-suggestion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/788c98df5995c9fe360ba9ba5efb103ee69d05c4/tests%2Fui%2Flint%2Finvalid-nan-comparison-suggestion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Finvalid-nan-comparison-suggestion.rs?ref=788c98df5995c9fe360ba9ba5efb103ee69d05c4", "patch": "@@ -0,0 +1,39 @@\n+// check-pass\n+// run-rustfix\n+\n+fn main() {\n+    let x = 5f32;\n+    let _ = x == f32::NAN;\n+    //~^ WARN incorrect NaN comparison\n+    let _ = x != f32::NAN;\n+    //~^ WARN incorrect NaN comparison\n+\n+    let x = 5f64;\n+    let _ = x == f64::NAN;\n+    //~^ WARN incorrect NaN comparison\n+    let _ = x != f64::NAN;\n+    //~^ WARN incorrect NaN comparison\n+\n+    let b = &2.3f32;\n+    if b != &f32::NAN {}\n+    //~^ WARN incorrect NaN comparison\n+\n+    let b = &2.3f32;\n+    if b != { &f32::NAN } {}\n+    //~^ WARN incorrect NaN comparison\n+\n+    let _ =\n+        b != {\n+    //~^ WARN incorrect NaN comparison\n+            &f32::NAN\n+        };\n+\n+    #[allow(unused_macros)]\n+    macro_rules! nan { () => { f32::NAN }; }\n+    macro_rules! number { () => { 5f32 }; }\n+\n+    let _ = nan!() == number!();\n+    //~^ WARN incorrect NaN comparison\n+    let _ = number!() != nan!();\n+    //~^ WARN incorrect NaN comparison\n+}"}, {"sha": "c310341de07b73bc14c331eab80a19faf2957c72", "filename": "tests/ui/lint/invalid-nan-comparison-suggestion.stderr", "status": "added", "additions": 114, "deletions": 0, "changes": 114, "blob_url": "https://github.com/rust-lang/rust/blob/788c98df5995c9fe360ba9ba5efb103ee69d05c4/tests%2Fui%2Flint%2Finvalid-nan-comparison-suggestion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/788c98df5995c9fe360ba9ba5efb103ee69d05c4/tests%2Fui%2Flint%2Finvalid-nan-comparison-suggestion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Finvalid-nan-comparison-suggestion.stderr?ref=788c98df5995c9fe360ba9ba5efb103ee69d05c4", "patch": "@@ -0,0 +1,114 @@\n+warning: incorrect NaN comparison, NaN cannot be directly compared to itself\n+  --> $DIR/invalid-nan-comparison-suggestion.rs:6:13\n+   |\n+LL |     let _ = x == f32::NAN;\n+   |             ^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(invalid_nan_comparisons)]` on by default\n+help: use `f32::is_nan()` or `f64::is_nan()` instead\n+   |\n+LL -     let _ = x == f32::NAN;\n+LL +     let _ = x.is_nan();\n+   |\n+\n+warning: incorrect NaN comparison, NaN cannot be directly compared to itself\n+  --> $DIR/invalid-nan-comparison-suggestion.rs:8:13\n+   |\n+LL |     let _ = x != f32::NAN;\n+   |             ^^^^^^^^^^^^^\n+   |\n+help: use `f32::is_nan()` or `f64::is_nan()` instead\n+   |\n+LL -     let _ = x != f32::NAN;\n+LL +     let _ = !x.is_nan();\n+   |\n+\n+warning: incorrect NaN comparison, NaN cannot be directly compared to itself\n+  --> $DIR/invalid-nan-comparison-suggestion.rs:12:13\n+   |\n+LL |     let _ = x == f64::NAN;\n+   |             ^^^^^^^^^^^^^\n+   |\n+help: use `f32::is_nan()` or `f64::is_nan()` instead\n+   |\n+LL -     let _ = x == f64::NAN;\n+LL +     let _ = x.is_nan();\n+   |\n+\n+warning: incorrect NaN comparison, NaN cannot be directly compared to itself\n+  --> $DIR/invalid-nan-comparison-suggestion.rs:14:13\n+   |\n+LL |     let _ = x != f64::NAN;\n+   |             ^^^^^^^^^^^^^\n+   |\n+help: use `f32::is_nan()` or `f64::is_nan()` instead\n+   |\n+LL -     let _ = x != f64::NAN;\n+LL +     let _ = !x.is_nan();\n+   |\n+\n+warning: incorrect NaN comparison, NaN cannot be directly compared to itself\n+  --> $DIR/invalid-nan-comparison-suggestion.rs:18:8\n+   |\n+LL |     if b != &f32::NAN {}\n+   |        ^^^^^^^^^^^^^^\n+   |\n+help: use `f32::is_nan()` or `f64::is_nan()` instead\n+   |\n+LL -     if b != &f32::NAN {}\n+LL +     if !b.is_nan() {}\n+   |\n+\n+warning: incorrect NaN comparison, NaN cannot be directly compared to itself\n+  --> $DIR/invalid-nan-comparison-suggestion.rs:22:8\n+   |\n+LL |     if b != { &f32::NAN } {}\n+   |        ^^^^^^^^^^^^^^^^^^\n+   |\n+help: use `f32::is_nan()` or `f64::is_nan()` instead\n+   |\n+LL -     if b != { &f32::NAN } {}\n+LL +     if !b.is_nan() {}\n+   |\n+\n+warning: incorrect NaN comparison, NaN cannot be directly compared to itself\n+  --> $DIR/invalid-nan-comparison-suggestion.rs:26:9\n+   |\n+LL | /         b != {\n+LL | |\n+LL | |             &f32::NAN\n+LL | |         };\n+   | |_________^\n+   |\n+help: use `f32::is_nan()` or `f64::is_nan()` instead\n+   |\n+LL -         b != {\n+LL +         !b.is_nan();\n+   |\n+\n+warning: incorrect NaN comparison, NaN cannot be directly compared to itself\n+  --> $DIR/invalid-nan-comparison-suggestion.rs:35:13\n+   |\n+LL |     let _ = nan!() == number!();\n+   |             ^^^^^^^^^^^^^^^^^^^\n+   |\n+help: use `f32::is_nan()` or `f64::is_nan()` instead\n+   |\n+LL -     let _ = nan!() == number!();\n+LL +     let _ = number!().is_nan();\n+   |\n+\n+warning: incorrect NaN comparison, NaN cannot be directly compared to itself\n+  --> $DIR/invalid-nan-comparison-suggestion.rs:37:13\n+   |\n+LL |     let _ = number!() != nan!();\n+   |             ^^^^^^^^^^^^^^^^^^^\n+   |\n+help: use `f32::is_nan()` or `f64::is_nan()` instead\n+   |\n+LL -     let _ = number!() != nan!();\n+LL +     let _ = !number!().is_nan();\n+   |\n+\n+warning: 9 warnings emitted\n+"}, {"sha": "d7e793ca58301335ab6fbeb12ecae6a6330ae18f", "filename": "tests/ui/lint/invalid-nan-comparison.rs", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/788c98df5995c9fe360ba9ba5efb103ee69d05c4/tests%2Fui%2Flint%2Finvalid-nan-comparison.rs", "raw_url": "https://github.com/rust-lang/rust/raw/788c98df5995c9fe360ba9ba5efb103ee69d05c4/tests%2Fui%2Flint%2Finvalid-nan-comparison.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Finvalid-nan-comparison.rs?ref=788c98df5995c9fe360ba9ba5efb103ee69d05c4", "patch": "@@ -0,0 +1,51 @@\n+// check-pass\n+\n+fn main() {\n+    f32();\n+    f64();\n+}\n+\n+const TEST: bool = 5f32 == f32::NAN;\n+//~^ WARN incorrect NaN comparison\n+\n+fn f32() {\n+    macro_rules! number { () => { 5f32 }; }\n+    let x = number!();\n+    x == f32::NAN;\n+    //~^ WARN incorrect NaN comparison\n+    x != f32::NAN;\n+    //~^ WARN incorrect NaN comparison\n+    x < f32::NAN;\n+    //~^ WARN incorrect NaN comparison\n+    x > f32::NAN;\n+    //~^ WARN incorrect NaN comparison\n+    x <= f32::NAN;\n+    //~^ WARN incorrect NaN comparison\n+    x >= f32::NAN;\n+    //~^ WARN incorrect NaN comparison\n+    number!() == f32::NAN;\n+    //~^ WARN incorrect NaN comparison\n+    f32::NAN != number!();\n+    //~^ WARN incorrect NaN comparison\n+}\n+\n+fn f64() {\n+    macro_rules! number { () => { 5f64 }; }\n+    let x = number!();\n+    x == f64::NAN;\n+    //~^ WARN incorrect NaN comparison\n+    x != f64::NAN;\n+    //~^ WARN incorrect NaN comparison\n+    x < f64::NAN;\n+    //~^ WARN incorrect NaN comparison\n+    x > f64::NAN;\n+    //~^ WARN incorrect NaN comparison\n+    x <= f64::NAN;\n+    //~^ WARN incorrect NaN comparison\n+    x >= f64::NAN;\n+    //~^ WARN incorrect NaN comparison\n+    number!() == f64::NAN;\n+    //~^ WARN incorrect NaN comparison\n+    f64::NAN != number!();\n+    //~^ WARN incorrect NaN comparison\n+}"}, {"sha": "054c06d38b30be60fa404d7d0c2626e973e7482b", "filename": "tests/ui/lint/invalid-nan-comparison.stderr", "status": "added", "additions": 159, "deletions": 0, "changes": 159, "blob_url": "https://github.com/rust-lang/rust/blob/788c98df5995c9fe360ba9ba5efb103ee69d05c4/tests%2Fui%2Flint%2Finvalid-nan-comparison.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/788c98df5995c9fe360ba9ba5efb103ee69d05c4/tests%2Fui%2Flint%2Finvalid-nan-comparison.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Finvalid-nan-comparison.stderr?ref=788c98df5995c9fe360ba9ba5efb103ee69d05c4", "patch": "@@ -0,0 +1,159 @@\n+warning: incorrect NaN comparison, NaN cannot be directly compared to itself\n+  --> $DIR/invalid-nan-comparison.rs:8:20\n+   |\n+LL | const TEST: bool = 5f32 == f32::NAN;\n+   |                    ^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(invalid_nan_comparisons)]` on by default\n+help: use `f32::is_nan()` or `f64::is_nan()` instead\n+   |\n+LL - const TEST: bool = 5f32 == f32::NAN;\n+LL + const TEST: bool = 5f32.is_nan();\n+   |\n+\n+warning: incorrect NaN comparison, NaN cannot be directly compared to itself\n+  --> $DIR/invalid-nan-comparison.rs:14:5\n+   |\n+LL |     x == f32::NAN;\n+   |     ^^^^^^^^^^^^^\n+   |\n+help: use `f32::is_nan()` or `f64::is_nan()` instead\n+   |\n+LL -     x == f32::NAN;\n+LL +     x.is_nan();\n+   |\n+\n+warning: incorrect NaN comparison, NaN cannot be directly compared to itself\n+  --> $DIR/invalid-nan-comparison.rs:16:5\n+   |\n+LL |     x != f32::NAN;\n+   |     ^^^^^^^^^^^^^\n+   |\n+help: use `f32::is_nan()` or `f64::is_nan()` instead\n+   |\n+LL -     x != f32::NAN;\n+LL +     !x.is_nan();\n+   |\n+\n+warning: incorrect NaN comparison, NaN is not orderable\n+  --> $DIR/invalid-nan-comparison.rs:18:5\n+   |\n+LL |     x < f32::NAN;\n+   |     ^^^^^^^^^^^^\n+\n+warning: incorrect NaN comparison, NaN is not orderable\n+  --> $DIR/invalid-nan-comparison.rs:20:5\n+   |\n+LL |     x > f32::NAN;\n+   |     ^^^^^^^^^^^^\n+\n+warning: incorrect NaN comparison, NaN is not orderable\n+  --> $DIR/invalid-nan-comparison.rs:22:5\n+   |\n+LL |     x <= f32::NAN;\n+   |     ^^^^^^^^^^^^^\n+\n+warning: incorrect NaN comparison, NaN is not orderable\n+  --> $DIR/invalid-nan-comparison.rs:24:5\n+   |\n+LL |     x >= f32::NAN;\n+   |     ^^^^^^^^^^^^^\n+\n+warning: incorrect NaN comparison, NaN cannot be directly compared to itself\n+  --> $DIR/invalid-nan-comparison.rs:26:5\n+   |\n+LL |     number!() == f32::NAN;\n+   |     ^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: use `f32::is_nan()` or `f64::is_nan()` instead\n+   |\n+LL -     number!() == f32::NAN;\n+LL +     number!().is_nan();\n+   |\n+\n+warning: incorrect NaN comparison, NaN cannot be directly compared to itself\n+  --> $DIR/invalid-nan-comparison.rs:28:5\n+   |\n+LL |     f32::NAN != number!();\n+   |     ^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: use `f32::is_nan()` or `f64::is_nan()` instead\n+   |\n+LL -     f32::NAN != number!();\n+LL +     !number!().is_nan();\n+   |\n+\n+warning: incorrect NaN comparison, NaN cannot be directly compared to itself\n+  --> $DIR/invalid-nan-comparison.rs:35:5\n+   |\n+LL |     x == f64::NAN;\n+   |     ^^^^^^^^^^^^^\n+   |\n+help: use `f32::is_nan()` or `f64::is_nan()` instead\n+   |\n+LL -     x == f64::NAN;\n+LL +     x.is_nan();\n+   |\n+\n+warning: incorrect NaN comparison, NaN cannot be directly compared to itself\n+  --> $DIR/invalid-nan-comparison.rs:37:5\n+   |\n+LL |     x != f64::NAN;\n+   |     ^^^^^^^^^^^^^\n+   |\n+help: use `f32::is_nan()` or `f64::is_nan()` instead\n+   |\n+LL -     x != f64::NAN;\n+LL +     !x.is_nan();\n+   |\n+\n+warning: incorrect NaN comparison, NaN is not orderable\n+  --> $DIR/invalid-nan-comparison.rs:39:5\n+   |\n+LL |     x < f64::NAN;\n+   |     ^^^^^^^^^^^^\n+\n+warning: incorrect NaN comparison, NaN is not orderable\n+  --> $DIR/invalid-nan-comparison.rs:41:5\n+   |\n+LL |     x > f64::NAN;\n+   |     ^^^^^^^^^^^^\n+\n+warning: incorrect NaN comparison, NaN is not orderable\n+  --> $DIR/invalid-nan-comparison.rs:43:5\n+   |\n+LL |     x <= f64::NAN;\n+   |     ^^^^^^^^^^^^^\n+\n+warning: incorrect NaN comparison, NaN is not orderable\n+  --> $DIR/invalid-nan-comparison.rs:45:5\n+   |\n+LL |     x >= f64::NAN;\n+   |     ^^^^^^^^^^^^^\n+\n+warning: incorrect NaN comparison, NaN cannot be directly compared to itself\n+  --> $DIR/invalid-nan-comparison.rs:47:5\n+   |\n+LL |     number!() == f64::NAN;\n+   |     ^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: use `f32::is_nan()` or `f64::is_nan()` instead\n+   |\n+LL -     number!() == f64::NAN;\n+LL +     number!().is_nan();\n+   |\n+\n+warning: incorrect NaN comparison, NaN cannot be directly compared to itself\n+  --> $DIR/invalid-nan-comparison.rs:49:5\n+   |\n+LL |     f64::NAN != number!();\n+   |     ^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: use `f32::is_nan()` or `f64::is_nan()` instead\n+   |\n+LL -     f64::NAN != number!();\n+LL +     !number!().is_nan();\n+   |\n+\n+warning: 17 warnings emitted\n+"}]}