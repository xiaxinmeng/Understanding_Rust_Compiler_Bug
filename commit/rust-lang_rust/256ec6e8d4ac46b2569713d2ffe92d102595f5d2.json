{"sha": "256ec6e8d4ac46b2569713d2ffe92d102595f5d2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI1NmVjNmU4ZDRhYzQ2YjI1Njk3MTNkMmZmZTkyZDEwMjU5NWY1ZDI=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-01-08T15:27:44Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-01-08T15:27:44Z"}, "message": "introduce CallInfo", "tree": {"sha": "d28e4a31ff14549d6495f5fa307174d3884a0a08", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d28e4a31ff14549d6495f5fa307174d3884a0a08"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/256ec6e8d4ac46b2569713d2ffe92d102595f5d2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/256ec6e8d4ac46b2569713d2ffe92d102595f5d2", "html_url": "https://github.com/rust-lang/rust/commit/256ec6e8d4ac46b2569713d2ffe92d102595f5d2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/256ec6e8d4ac46b2569713d2ffe92d102595f5d2/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e6a4383bb475b866b67df6bb83ecbdf823d73667", "url": "https://api.github.com/repos/rust-lang/rust/commits/e6a4383bb475b866b67df6bb83ecbdf823d73667", "html_url": "https://github.com/rust-lang/rust/commit/e6a4383bb475b866b67df6bb83ecbdf823d73667"}], "stats": {"total": 56, "additions": 33, "deletions": 23}, "files": [{"sha": "8da19a648adfda82bd20d6e31d4cc6c44d1c80cb", "filename": "crates/ra_analysis/src/call_info.rs", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/256ec6e8d4ac46b2569713d2ffe92d102595f5d2/crates%2Fra_analysis%2Fsrc%2Fcall_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/256ec6e8d4ac46b2569713d2ffe92d102595f5d2/crates%2Fra_analysis%2Fsrc%2Fcall_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fcall_info.rs?ref=256ec6e8d4ac46b2569713d2ffe92d102595f5d2", "patch": "@@ -7,10 +7,21 @@ use ra_syntax::{\n use ra_editor::find_node_at_offset;\n use hir::FnSignatureInfo;\n \n-use crate::{FilePosition, db::RootDatabase};\n+use crate::{FilePosition, CallInfo, db::RootDatabase};\n+\n+pub(crate) fn call_info(db: &RootDatabase, position: FilePosition) -> Cancelable<Option<CallInfo>> {\n+    let (sig_info, active_parameter) = ctry!(call_info_(db, position)?);\n+    let res = CallInfo {\n+        label: sig_info.label,\n+        doc: sig_info.doc,\n+        parameters: sig_info.params,\n+        active_parameter,\n+    };\n+    Ok(Some(res))\n+}\n \n /// Computes parameter information for the given call expression.\n-pub(crate) fn call_info(\n+fn call_info_(\n     db: &RootDatabase,\n     position: FilePosition,\n ) -> Cancelable<Option<(FnSignatureInfo, Option<usize>)>> {"}, {"sha": "4fa6750aa088ccc2566fd85ca5bb38586fd7d03e", "filename": "crates/ra_analysis/src/lib.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/256ec6e8d4ac46b2569713d2ffe92d102595f5d2/crates%2Fra_analysis%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/256ec6e8d4ac46b2569713d2ffe92d102595f5d2/crates%2Fra_analysis%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Flib.rs?ref=256ec6e8d4ac46b2569713d2ffe92d102595f5d2", "patch": "@@ -273,6 +273,14 @@ impl<T> RangeInfo<T> {\n     }\n }\n \n+#[derive(Debug)]\n+pub struct CallInfo {\n+    pub label: String,\n+    pub doc: Option<String>,\n+    pub parameters: Vec<String>,\n+    pub active_parameter: Option<usize>,\n+}\n+\n /// `AnalysisHost` stores the current state of the world.\n #[derive(Debug, Default)]\n pub struct AnalysisHost {\n@@ -393,10 +401,7 @@ impl Analysis {\n         hover::hover(&*self.db, position)\n     }\n     /// Computes parameter information for the given call expression.\n-    pub fn call_info(\n-        &self,\n-        position: FilePosition,\n-    ) -> Cancelable<Option<(FnSignatureInfo, Option<usize>)>> {\n+    pub fn call_info(&self, position: FilePosition) -> Cancelable<Option<CallInfo>> {\n         call_info::call_info(&*self.db, position)\n     }\n     /// Returns a `mod name;` declaration which created the current module."}, {"sha": "b9b42f1b3977ee4c9cace3c7852a469790628522", "filename": "crates/ra_lsp_server/src/main_loop/handlers.rs", "status": "modified", "additions": 11, "deletions": 17, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/256ec6e8d4ac46b2569713d2ffe92d102595f5d2/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/256ec6e8d4ac46b2569713d2ffe92d102595f5d2/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs?ref=256ec6e8d4ac46b2569713d2ffe92d102595f5d2", "patch": "@@ -475,36 +475,30 @@ pub fn handle_signature_help(\n     params: req::TextDocumentPositionParams,\n ) -> Result<Option<req::SignatureHelp>> {\n     let position = params.try_conv_with(&world)?;\n-\n-    if let Some((descriptor, active_param)) = world.analysis().resolve_callable(position)? {\n-        let parameters: Vec<ParameterInformation> = descriptor\n-            .params\n-            .iter()\n+    if let Some(call_info) = world.analysis().call_info(position)? {\n+        let parameters: Vec<ParameterInformation> = call_info\n+            .parameters\n+            .into_iter()\n             .map(|param| ParameterInformation {\n                 label: ParameterLabel::Simple(param.clone()),\n                 documentation: None,\n             })\n             .collect();\n-\n-        let documentation = if let Some(doc) = descriptor.doc {\n-            Some(Documentation::MarkupContent(MarkupContent {\n+        let documentation = call_info.doc.map(|value| {\n+            Documentation::MarkupContent(MarkupContent {\n                 kind: MarkupKind::Markdown,\n-                value: doc,\n-            }))\n-        } else {\n-            None\n-        };\n-\n+                value,\n+            })\n+        });\n         let sig_info = SignatureInformation {\n-            label: descriptor.label,\n+            label: call_info.label,\n             documentation,\n             parameters: Some(parameters),\n         };\n-\n         Ok(Some(req::SignatureHelp {\n             signatures: vec![sig_info],\n             active_signature: Some(0),\n-            active_parameter: active_param.map(|a| a as u64),\n+            active_parameter: call_info.active_parameter.map(|it| it as u64),\n         }))\n     } else {\n         Ok(None)"}]}