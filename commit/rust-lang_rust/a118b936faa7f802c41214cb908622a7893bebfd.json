{"sha": "a118b936faa7f802c41214cb908622a7893bebfd", "node_id": "MDY6Q29tbWl0NzI0NzEyOmExMThiOTM2ZmFhN2Y4MDJjNDEyMTRjYjkwODYyMmE3ODkzYmViZmQ=", "commit": {"author": {"name": "Mikhail Zabaluev", "email": "mikhail.zabaluev@gmail.com", "date": "2015-02-22T15:22:48Z"}, "committer": {"name": "Mikhail Zabaluev", "email": "mikhail.zabaluev@gmail.com", "date": "2015-02-22T18:42:35Z"}, "message": "Optimize Vec::from_iter and extend\n\nUse one loop, efficient for both sized and size-ignorant iterators\n(including iterators lying about their size).", "tree": {"sha": "c940f73d95f06163a9047af943f9d26cc5ec95b5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c940f73d95f06163a9047af943f9d26cc5ec95b5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a118b936faa7f802c41214cb908622a7893bebfd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a118b936faa7f802c41214cb908622a7893bebfd", "html_url": "https://github.com/rust-lang/rust/commit/a118b936faa7f802c41214cb908622a7893bebfd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a118b936faa7f802c41214cb908622a7893bebfd/comments", "author": {"login": "mzabaluev", "id": 1198919, "node_id": "MDQ6VXNlcjExOTg5MTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1198919?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mzabaluev", "html_url": "https://github.com/mzabaluev", "followers_url": "https://api.github.com/users/mzabaluev/followers", "following_url": "https://api.github.com/users/mzabaluev/following{/other_user}", "gists_url": "https://api.github.com/users/mzabaluev/gists{/gist_id}", "starred_url": "https://api.github.com/users/mzabaluev/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mzabaluev/subscriptions", "organizations_url": "https://api.github.com/users/mzabaluev/orgs", "repos_url": "https://api.github.com/users/mzabaluev/repos", "events_url": "https://api.github.com/users/mzabaluev/events{/privacy}", "received_events_url": "https://api.github.com/users/mzabaluev/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mzabaluev", "id": 1198919, "node_id": "MDQ6VXNlcjExOTg5MTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1198919?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mzabaluev", "html_url": "https://github.com/mzabaluev", "followers_url": "https://api.github.com/users/mzabaluev/followers", "following_url": "https://api.github.com/users/mzabaluev/following{/other_user}", "gists_url": "https://api.github.com/users/mzabaluev/gists{/gist_id}", "starred_url": "https://api.github.com/users/mzabaluev/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mzabaluev/subscriptions", "organizations_url": "https://api.github.com/users/mzabaluev/orgs", "repos_url": "https://api.github.com/users/mzabaluev/repos", "events_url": "https://api.github.com/users/mzabaluev/events{/privacy}", "received_events_url": "https://api.github.com/users/mzabaluev/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dcc6ce2c772cb851ac35cbc2ddafcae9bf2fa9fd", "url": "https://api.github.com/repos/rust-lang/rust/commits/dcc6ce2c772cb851ac35cbc2ddafcae9bf2fa9fd", "html_url": "https://github.com/rust-lang/rust/commit/dcc6ce2c772cb851ac35cbc2ddafcae9bf2fa9fd"}], "stats": {"total": 68, "additions": 26, "deletions": 42}, "files": [{"sha": "cb1199a59f608e4fd53c048ece3b6e167bd8a850", "filename": "src/libcollections/vec.rs", "status": "modified", "additions": 26, "deletions": 42, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/a118b936faa7f802c41214cb908622a7893bebfd/src%2Flibcollections%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a118b936faa7f802c41214cb908622a7893bebfd/src%2Flibcollections%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec.rs?ref=a118b936faa7f802c41214cb908622a7893bebfd", "patch": "@@ -1410,42 +1410,8 @@ impl<T> ops::DerefMut for Vec<T> {\n impl<T> FromIterator<T> for Vec<T> {\n     #[inline]\n     fn from_iter<I: IntoIterator<Item=T>>(iterable: I) -> Vec<T> {\n-        let mut iterator = iterable.into_iter();\n-        let (lower, _) = iterator.size_hint();\n-        let mut vector = Vec::with_capacity(lower);\n-\n-        // This function should be the moral equivalent of:\n-        //\n-        //      for item in iterator {\n-        //          vector.push(item);\n-        //      }\n-        //\n-        // This equivalent crucially runs the iterator precisely once. Below we\n-        // actually in theory run the iterator twice (one without bounds checks\n-        // and one with). To achieve the \"moral equivalent\", we use the `if`\n-        // statement below to break out early.\n-        //\n-        // If the first loop has terminated, then we have one of two conditions.\n-        //\n-        // 1. The underlying iterator returned `None`. In this case we are\n-        //    guaranteed that less than `vector.capacity()` elements have been\n-        //    returned, so we break out early.\n-        // 2. The underlying iterator yielded `vector.capacity()` elements and\n-        //    has not yielded `None` yet. In this case we run the iterator to\n-        //    its end below.\n-        for element in iterator.by_ref().take(vector.capacity()) {\n-            let len = vector.len();\n-            unsafe {\n-                ptr::write(vector.get_unchecked_mut(len), element);\n-                vector.set_len(len + 1);\n-            }\n-        }\n-\n-        if vector.len() == vector.capacity() {\n-            for element in iterator {\n-                vector.push(element);\n-            }\n-        }\n+        let mut vector = Vec::new();\n+        vector.extend(iterable);\n         vector\n     }\n }\n@@ -1482,13 +1448,31 @@ impl<'a, T> IntoIterator for &'a mut Vec<T> {\n \n #[unstable(feature = \"collections\", reason = \"waiting on Extend stability\")]\n impl<T> Extend<T> for Vec<T> {\n-    #[inline]\n     fn extend<I: IntoIterator<Item=T>>(&mut self, iterable: I) {\n-        let iterator = iterable.into_iter();\n-        let (lower, _) = iterator.size_hint();\n-        self.reserve(lower);\n-        for element in iterator {\n-            self.push(element)\n+        let mut iterator = iterable.into_iter();\n+\n+        // This function should be the moral equivalent of:\n+        //\n+        //      for item in iterator {\n+        //          self.push(item);\n+        //      }\n+        loop {\n+            match iterator.next() {\n+                None => {\n+                    break;\n+                }\n+                Some(element) => {\n+                    let len = self.len();\n+                    if len == self.capacity() {\n+                        let (lower, _) = iterator.size_hint();\n+                        self.reserve(lower + 1);\n+                    }\n+                    unsafe {\n+                        ptr::write(self.get_unchecked_mut(len), element);\n+                        self.set_len(len + 1);\n+                    }\n+                }\n+            }\n         }\n     }\n }"}]}