{"sha": "1ae3c36800e422734a12f28d4e72617f0ad805c5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFhZTNjMzY4MDBlNDIyNzM0YTEyZjI4ZDRlNzI2MTdmMGFkODA1YzU=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2019-09-26T17:29:53Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2019-09-26T17:29:53Z"}, "message": "Rename `hair::FieldPattern` to `hair::FieldPat`", "tree": {"sha": "d85d1f9c9ac8848af4ba34cd410a99ab949a8256", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d85d1f9c9ac8848af4ba34cd410a99ab949a8256"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1ae3c36800e422734a12f28d4e72617f0ad805c5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1ae3c36800e422734a12f28d4e72617f0ad805c5", "html_url": "https://github.com/rust-lang/rust/commit/1ae3c36800e422734a12f28d4e72617f0ad805c5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1ae3c36800e422734a12f28d4e72617f0ad805c5/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "38121173e27d304366c6fd422318e1e424941b7c", "url": "https://api.github.com/repos/rust-lang/rust/commits/38121173e27d304366c6fd422318e1e424941b7c", "html_url": "https://github.com/rust-lang/rust/commit/38121173e27d304366c6fd422318e1e424941b7c"}], "stats": {"total": 32, "additions": 16, "deletions": 16}, "files": [{"sha": "c6eb9a3916f3b1fff0247dda4e4a50d3f32292a7", "filename": "src/librustc_mir/build/matches/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1ae3c36800e422734a12f28d4e72617f0ad805c5/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ae3c36800e422734a12f28d4e72617f0ad805c5/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs?ref=1ae3c36800e422734a12f28d4e72617f0ad805c5", "patch": "@@ -739,7 +739,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         match_pair_index: usize,\n         adt_def: &'tcx ty::AdtDef,\n         variant_index: VariantIdx,\n-        subpatterns: &'pat [FieldPattern<'tcx>],\n+        subpatterns: &'pat [FieldPat<'tcx>],\n         candidate: &mut Candidate<'pat, 'tcx>,\n     ) {\n         let match_pair = candidate.match_pairs.remove(match_pair_index);"}, {"sha": "6457b16c71928e5a5c2c6388ca4fd10a60213f97", "filename": "src/librustc_mir/build/matches/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1ae3c36800e422734a12f28d4e72617f0ad805c5/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ae3c36800e422734a12f28d4e72617f0ad805c5/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Futil.rs?ref=1ae3c36800e422734a12f28d4e72617f0ad805c5", "patch": "@@ -8,7 +8,7 @@ use std::convert::TryInto;\n impl<'a, 'tcx> Builder<'a, 'tcx> {\n     pub fn field_match_pairs<'pat>(&mut self,\n                                    place: Place<'tcx>,\n-                                   subpatterns: &'pat [FieldPattern<'tcx>])\n+                                   subpatterns: &'pat [FieldPat<'tcx>])\n                                    -> Vec<MatchPair<'pat, 'tcx>> {\n         subpatterns.iter()\n                    .map(|fieldpat| {"}, {"sha": "de293308f4ceacd08a50833ca464636e5e3c6bf5", "filename": "src/librustc_mir/hair/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1ae3c36800e422734a12f28d4e72617f0ad805c5/src%2Flibrustc_mir%2Fhair%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ae3c36800e422734a12f28d4e72617f0ad805c5/src%2Flibrustc_mir%2Fhair%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fmod.rs?ref=1ae3c36800e422734a12f28d4e72617f0ad805c5", "patch": "@@ -20,7 +20,7 @@ pub mod cx;\n mod constant;\n \n pub mod pattern;\n-pub use self::pattern::{BindingMode, Pattern, PatternKind, PatternRange, FieldPattern};\n+pub use self::pattern::{BindingMode, Pattern, PatternKind, PatternRange, FieldPat};\n pub(crate) use self::pattern::PatternTypeProjection;\n \n mod util;"}, {"sha": "cd1515b20dabc0c9782dbe719d57221c1906ee44", "filename": "src/librustc_mir/hair/pattern/_match.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1ae3c36800e422734a12f28d4e72617f0ad805c5/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ae3c36800e422734a12f28d4e72617f0ad805c5/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs?ref=1ae3c36800e422734a12f28d4e72617f0ad805c5", "patch": "@@ -163,7 +163,7 @@ use self::WitnessPreference::*;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::indexed_vec::Idx;\n \n-use super::{FieldPattern, Pattern, PatternKind, PatternRange};\n+use super::{FieldPat, Pattern, PatternKind, PatternRange};\n use super::{PatternFoldable, PatternFolder, compare_const_vals};\n \n use rustc::hir::def_id::DefId;\n@@ -569,7 +569,7 @@ impl<'tcx> Witness<'tcx> {\n                 ty::Adt(..) |\n                 ty::Tuple(..) => {\n                     let pats = pats.enumerate().map(|(i, p)| {\n-                        FieldPattern {\n+                        FieldPat {\n                             field: Field::new(i),\n                             pattern: p\n                         }\n@@ -1714,7 +1714,7 @@ fn constructor_covered_by_range<'tcx>(\n }\n \n fn patterns_for_variant<'p, 'tcx>(\n-    subpatterns: &'p [FieldPattern<'tcx>],\n+    subpatterns: &'p [FieldPat<'tcx>],\n     wild_patterns: &[&'p Pattern<'tcx>])\n     -> SmallVec<[&'p Pattern<'tcx>; 2]>\n {"}, {"sha": "751876a90bd5c976986c64c9cb9b391a655eb522", "filename": "src/librustc_mir/hair/pattern/mod.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/1ae3c36800e422734a12f28d4e72617f0ad805c5/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ae3c36800e422734a12f28d4e72617f0ad805c5/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs?ref=1ae3c36800e422734a12f28d4e72617f0ad805c5", "patch": "@@ -48,7 +48,7 @@ pub enum BindingMode {\n }\n \n #[derive(Clone, Debug)]\n-pub struct FieldPattern<'tcx> {\n+pub struct FieldPat<'tcx> {\n     pub field: Field,\n     pub pattern: Pattern<'tcx>,\n }\n@@ -140,13 +140,13 @@ pub enum PatternKind<'tcx> {\n         adt_def: &'tcx AdtDef,\n         substs: SubstsRef<'tcx>,\n         variant_index: VariantIdx,\n-        subpatterns: Vec<FieldPattern<'tcx>>,\n+        subpatterns: Vec<FieldPat<'tcx>>,\n     },\n \n     /// `(...)`, `Foo(...)`, `Foo{...}`, or `Foo`, where `Foo` is a variant name from an ADT with\n     /// a single variant.\n     Leaf {\n-        subpatterns: Vec<FieldPattern<'tcx>>,\n+        subpatterns: Vec<FieldPat<'tcx>>,\n     },\n \n     /// `box P`, `&P`, `&mut P`, etc.\n@@ -578,7 +578,7 @@ impl<'a, 'tcx> PatternContext<'a, 'tcx> {\n                         let subpatterns =\n                             subpatterns.iter()\n                                        .enumerate_and_adjust(tys.len(), ddpos)\n-                                       .map(|(i, subpattern)| FieldPattern {\n+                                       .map(|(i, subpattern)| FieldPat {\n                                             field: Field::new(i),\n                                             pattern: self.lower_pattern(subpattern)\n                                        })\n@@ -650,7 +650,7 @@ impl<'a, 'tcx> PatternContext<'a, 'tcx> {\n                 let subpatterns =\n                         subpatterns.iter()\n                                    .enumerate_and_adjust(variant_def.fields.len(), ddpos)\n-                                   .map(|(i, field)| FieldPattern {\n+                                   .map(|(i, field)| FieldPat {\n                                        field: Field::new(i),\n                                        pattern: self.lower_pattern(field),\n                                    })\n@@ -664,7 +664,7 @@ impl<'a, 'tcx> PatternContext<'a, 'tcx> {\n                 let subpatterns =\n                     fields.iter()\n                           .map(|field| {\n-                              FieldPattern {\n+                              FieldPat {\n                                   field: Field::new(self.tcx.field_index(field.hir_id,\n                                                                          self.tables)),\n                                   pattern: self.lower_pattern(&field.pat),\n@@ -772,7 +772,7 @@ impl<'a, 'tcx> PatternContext<'a, 'tcx> {\n         hir_id: hir::HirId,\n         span: Span,\n         ty: Ty<'tcx>,\n-        subpatterns: Vec<FieldPattern<'tcx>>,\n+        subpatterns: Vec<FieldPat<'tcx>>,\n     ) -> PatternKind<'tcx> {\n         let res = match res {\n             Res::Def(DefKind::Ctor(CtorOf::Variant, ..), variant_ctor_id) => {\n@@ -1069,7 +1069,7 @@ impl<'a, 'tcx> PatternContext<'a, 'tcx> {\n         let mut adt_subpatterns = |n, variant_opt| {\n             (0..n).map(|i| {\n                 let field = Field::new(i);\n-                FieldPattern {\n+                FieldPat {\n                     field,\n                     pattern: adt_subpattern(i, variant_opt),\n                 }\n@@ -1361,9 +1361,9 @@ CloneImpls!{ <'tcx>\n     UserTypeProjection, PatternTypeProjection<'tcx>\n }\n \n-impl<'tcx> PatternFoldable<'tcx> for FieldPattern<'tcx> {\n+impl<'tcx> PatternFoldable<'tcx> for FieldPat<'tcx> {\n     fn super_fold_with<F: PatternFolder<'tcx>>(&self, folder: &mut F) -> Self {\n-        FieldPattern {\n+        FieldPat {\n             field: self.field.fold_with(folder),\n             pattern: self.pattern.fold_with(folder)\n         }"}]}