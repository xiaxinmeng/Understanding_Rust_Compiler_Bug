{"sha": "b36ade1367a2dbca69386b58d225ceafa6a90d57", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIzNmFkZTEzNjdhMmRiY2E2OTM4NmI1OGQyMjVjZWFmYTZhOTBkNTc=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-12-18T18:07:26Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-12-18T18:07:26Z"}, "message": "Improve efficienty of impl cache in resolve\n\nAnd fix a bug where importing anything from an external module would\nimport all impls in the module.\n\nIssue #1227", "tree": {"sha": "f5f9a9a04a30de721db3e30e4565aa3cbd3066c1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f5f9a9a04a30de721db3e30e4565aa3cbd3066c1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b36ade1367a2dbca69386b58d225ceafa6a90d57", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b36ade1367a2dbca69386b58d225ceafa6a90d57", "html_url": "https://github.com/rust-lang/rust/commit/b36ade1367a2dbca69386b58d225ceafa6a90d57", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b36ade1367a2dbca69386b58d225ceafa6a90d57/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3fa930f5986a47ee1fa1d25d96c3c17904d60b1f", "url": "https://api.github.com/repos/rust-lang/rust/commits/3fa930f5986a47ee1fa1d25d96c3c17904d60b1f", "html_url": "https://github.com/rust-lang/rust/commit/3fa930f5986a47ee1fa1d25d96c3c17904d60b1f"}], "stats": {"total": 25, "additions": 15, "deletions": 10}, "files": [{"sha": "c00bd711eb0e1a1e583950563dc81ead5c55209f", "filename": "src/comp/middle/resolve.rs", "status": "modified", "additions": 15, "deletions": 10, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/b36ade1367a2dbca69386b58d225ceafa6a90d57/src%2Fcomp%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b36ade1367a2dbca69386b58d225ceafa6a90d57/src%2Fcomp%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fresolve.rs?ref=b36ade1367a2dbca69386b58d225ceafa6a90d57", "patch": "@@ -1717,22 +1717,27 @@ fn find_impls_in_mod(e: env, m: def, &impls: [@_impl],\n                      name: option::t<ident>) {\n     alt m {\n       ast::def_mod(defid) {\n+        let cached;\n         alt e.impl_cache.find(defid) {\n-          some(v) { impls += *v; }\n+          some(v) { cached = v; }\n           none. {\n-            let found = [];\n-            if defid.crate == ast::local_crate {\n-                let md = option::get(e.mod_map.get(defid.node).m);\n-                for i in md.items {\n-                    find_impls_in_item(i, found, name, some(md));\n+            cached = if defid.crate == ast::local_crate {\n+                let tmp = [];\n+                for i in option::get(e.mod_map.get(defid.node).m).items {\n+                    find_impls_in_item(i, tmp, name, none);\n                 }\n+                @tmp\n             } else {\n-                found = csearch::get_impls_for_mod(e.cstore, defid, name);\n-            }\n-            impls += found;\n-            e.impl_cache.insert(defid, @found);\n+                @csearch::get_impls_for_mod(e.cstore, defid, name)\n+            };\n+            e.impl_cache.insert(defid, cached);\n           }\n         }\n+        for im in *cached {\n+            if alt name { some(n) { n == im.ident } _ { true } } {\n+                impls += [im];\n+            }\n+        }\n       }\n       _ {}\n     }"}]}