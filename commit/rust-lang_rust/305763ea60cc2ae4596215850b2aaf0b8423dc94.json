{"sha": "305763ea60cc2ae4596215850b2aaf0b8423dc94", "node_id": "C_kwDOAAsO6NoAKDMwNTc2M2VhNjBjYzJhZTQ1OTYyMTU4NTBiMmFhZjBiODQyM2RjOTQ", "commit": {"author": {"name": "fee1-dead", "email": "ent3rm4n@gmail.com", "date": "2022-04-12T12:44:42Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-04-12T12:44:42Z"}, "message": "Rollup merge of #95716 - davidtwco:translation-custom-sysroot-only-warn, r=oli-obk\n\nsess: warn w/out fluent bundle w/ user sysroot\n\nAddresses https://github.com/rust-lang/rust/pull/95512#issuecomment-1088467139.\n\nWhen a custom sysroot is requested, then don't error when translation resources are not found, only warn.\n\nr? `@bjorn3`", "tree": {"sha": "7a073ebf0991cedda76ede293ea7cad586021974", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7a073ebf0991cedda76ede293ea7cad586021974"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/305763ea60cc2ae4596215850b2aaf0b8423dc94", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiVXQ6CRBK7hj4Ov3rIwAACe8IAAudq6STgK9hrVIa4xNa89Aj\nXk4eHEIHIERPR7V3qsz+VH/DXhQQ8qBDHW4SzV++iSPRCdXMhNsdTyxJdaxc735B\nY8Ps4+Vug11DyF98BLxc1KI0/icYA4qWNWWL9xhFL7imd4whte1N/XmfkQn3V9ba\nbd/hNVpRtBHthqs2s43DT5/FgVYKcamj6CGzkO6PmBZzPtYEoDOg1gtBdDEkuE4W\n4IS4MhLDO+9/sMAXvXMLoiuNlOhPHQWPA6buyWU+uejmDzWJbVaEG27IjapHduU4\nHLi1Zew0Xv9l3mg9LhajbSw3QTaOpQFBiNMmJUtBwzDLGp8mDHaQetpVQM/AI/M=\n=T3o4\n-----END PGP SIGNATURE-----\n", "payload": "tree 7a073ebf0991cedda76ede293ea7cad586021974\nparent ae068e78c0635f4d245861ed8258435da20a733d\nparent fc3cca24f1230bb308e83168a3260abf36359f85\nauthor fee1-dead <ent3rm4n@gmail.com> 1649767482 +1000\ncommitter GitHub <noreply@github.com> 1649767482 +1000\n\nRollup merge of #95716 - davidtwco:translation-custom-sysroot-only-warn, r=oli-obk\n\nsess: warn w/out fluent bundle w/ user sysroot\n\nAddresses https://github.com/rust-lang/rust/pull/95512#issuecomment-1088467139.\n\nWhen a custom sysroot is requested, then don't error when translation resources are not found, only warn.\n\nr? `@bjorn3`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/305763ea60cc2ae4596215850b2aaf0b8423dc94", "html_url": "https://github.com/rust-lang/rust/commit/305763ea60cc2ae4596215850b2aaf0b8423dc94", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/305763ea60cc2ae4596215850b2aaf0b8423dc94/comments", "author": {"login": "fee1-dead", "id": 43851243, "node_id": "MDQ6VXNlcjQzODUxMjQz", "avatar_url": "https://avatars.githubusercontent.com/u/43851243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fee1-dead", "html_url": "https://github.com/fee1-dead", "followers_url": "https://api.github.com/users/fee1-dead/followers", "following_url": "https://api.github.com/users/fee1-dead/following{/other_user}", "gists_url": "https://api.github.com/users/fee1-dead/gists{/gist_id}", "starred_url": "https://api.github.com/users/fee1-dead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fee1-dead/subscriptions", "organizations_url": "https://api.github.com/users/fee1-dead/orgs", "repos_url": "https://api.github.com/users/fee1-dead/repos", "events_url": "https://api.github.com/users/fee1-dead/events{/privacy}", "received_events_url": "https://api.github.com/users/fee1-dead/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ae068e78c0635f4d245861ed8258435da20a733d", "url": "https://api.github.com/repos/rust-lang/rust/commits/ae068e78c0635f4d245861ed8258435da20a733d", "html_url": "https://github.com/rust-lang/rust/commit/ae068e78c0635f4d245861ed8258435da20a733d"}, {"sha": "fc3cca24f1230bb308e83168a3260abf36359f85", "url": "https://api.github.com/repos/rust-lang/rust/commits/fc3cca24f1230bb308e83168a3260abf36359f85", "html_url": "https://github.com/rust-lang/rust/commit/fc3cca24f1230bb308e83168a3260abf36359f85"}], "stats": {"total": 136, "additions": 94, "deletions": 42}, "files": [{"sha": "b33e6b661170688ef21ac68fce8d549e5d34152c", "filename": "compiler/rustc_error_messages/src/lib.rs", "status": "modified", "additions": 39, "deletions": 30, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/305763ea60cc2ae4596215850b2aaf0b8423dc94/compiler%2Frustc_error_messages%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/305763ea60cc2ae4596215850b2aaf0b8423dc94/compiler%2Frustc_error_messages%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Fsrc%2Flib.rs?ref=305763ea60cc2ae4596215850b2aaf0b8423dc94", "patch": "@@ -11,7 +11,7 @@ use std::error::Error;\n use std::fmt;\n use std::fs;\n use std::io;\n-use std::path::Path;\n+use std::path::{Path, PathBuf};\n use tracing::{instrument, trace};\n \n #[cfg(parallel_compiler)]\n@@ -45,7 +45,7 @@ pub enum TranslationBundleError {\n     /// Failed to add `FluentResource` to `FluentBundle`.\n     AddResource(FluentError),\n     /// `$sysroot/share/locale/$locale` does not exist.\n-    MissingLocale(io::Error),\n+    MissingLocale,\n     /// Cannot read directory entries of `$sysroot/share/locale/$locale`.\n     ReadLocalesDir(io::Error),\n     /// Cannot read directory entry of `$sysroot/share/locale/$locale`.\n@@ -62,9 +62,7 @@ impl fmt::Display for TranslationBundleError {\n                 write!(f, \"could not parse ftl file: {}\", e)\n             }\n             TranslationBundleError::AddResource(e) => write!(f, \"failed to add resource: {}\", e),\n-            TranslationBundleError::MissingLocale(e) => {\n-                write!(f, \"missing locale directory: {}\", e)\n-            }\n+            TranslationBundleError::MissingLocale => write!(f, \"missing locale directory\"),\n             TranslationBundleError::ReadLocalesDir(e) => {\n                 write!(f, \"could not read locales dir: {}\", e)\n             }\n@@ -84,7 +82,7 @@ impl Error for TranslationBundleError {\n             TranslationBundleError::ReadFtl(e) => Some(e),\n             TranslationBundleError::ParseFtl(e) => Some(e),\n             TranslationBundleError::AddResource(e) => Some(e),\n-            TranslationBundleError::MissingLocale(e) => Some(e),\n+            TranslationBundleError::MissingLocale => None,\n             TranslationBundleError::ReadLocalesDir(e) => Some(e),\n             TranslationBundleError::ReadLocalesDirEntry(e) => Some(e),\n             TranslationBundleError::LocaleIsNotDir => None,\n@@ -113,7 +111,8 @@ impl From<Vec<FluentError>> for TranslationBundleError {\n /// (overriding any conflicting messages).\n #[instrument(level = \"trace\")]\n pub fn fluent_bundle(\n-    sysroot: &Path,\n+    mut user_provided_sysroot: Option<PathBuf>,\n+    mut sysroot_candidates: Vec<PathBuf>,\n     requested_locale: Option<LanguageIdentifier>,\n     additional_ftl_path: Option<&Path>,\n     with_directionality_markers: bool,\n@@ -140,33 +139,43 @@ pub fn fluent_bundle(\n \n     // If the user requests the default locale then don't try to load anything.\n     if !requested_fallback_locale && let Some(requested_locale) = requested_locale {\n-        let mut sysroot = sysroot.to_path_buf();\n-        sysroot.push(\"share\");\n-        sysroot.push(\"locale\");\n-        sysroot.push(requested_locale.to_string());\n-        trace!(?sysroot);\n-\n-        let _ = sysroot.try_exists().map_err(TranslationBundleError::MissingLocale)?;\n-\n-        if !sysroot.is_dir() {\n-            return Err(TranslationBundleError::LocaleIsNotDir);\n-        }\n-\n-        for entry in sysroot.read_dir().map_err(TranslationBundleError::ReadLocalesDir)? {\n-            let entry = entry.map_err(TranslationBundleError::ReadLocalesDirEntry)?;\n-            let path = entry.path();\n-            trace!(?path);\n-            if path.extension().and_then(|s| s.to_str()) != Some(\"ftl\") {\n+        let mut found_resources = false;\n+        for sysroot in user_provided_sysroot.iter_mut().chain(sysroot_candidates.iter_mut()) {\n+            sysroot.push(\"share\");\n+            sysroot.push(\"locale\");\n+            sysroot.push(requested_locale.to_string());\n+            trace!(?sysroot);\n+\n+            if !sysroot.exists() {\n                 trace!(\"skipping\");\n                 continue;\n             }\n \n-            let resource_str =\n-                fs::read_to_string(path).map_err(TranslationBundleError::ReadFtl)?;\n-            let resource =\n-                FluentResource::try_new(resource_str).map_err(TranslationBundleError::from)?;\n-            trace!(?resource);\n-            bundle.add_resource(resource).map_err(TranslationBundleError::from)?;\n+            if !sysroot.is_dir() {\n+                return Err(TranslationBundleError::LocaleIsNotDir);\n+            }\n+\n+            for entry in sysroot.read_dir().map_err(TranslationBundleError::ReadLocalesDir)? {\n+                let entry = entry.map_err(TranslationBundleError::ReadLocalesDirEntry)?;\n+                let path = entry.path();\n+                trace!(?path);\n+                if path.extension().and_then(|s| s.to_str()) != Some(\"ftl\") {\n+                    trace!(\"skipping\");\n+                    continue;\n+                }\n+\n+                let resource_str =\n+                    fs::read_to_string(path).map_err(TranslationBundleError::ReadFtl)?;\n+                let resource =\n+                    FluentResource::try_new(resource_str).map_err(TranslationBundleError::from)?;\n+                trace!(?resource);\n+                bundle.add_resource(resource).map_err(TranslationBundleError::from)?;\n+                found_resources = true;\n+            }\n+        }\n+\n+        if !found_resources {\n+            return Err(TranslationBundleError::MissingLocale);\n         }\n     }\n "}, {"sha": "fe75ee8b37b8d06fd748bebed146d452ce4e00a9", "filename": "compiler/rustc_interface/src/tests.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/305763ea60cc2ae4596215850b2aaf0b8423dc94/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/305763ea60cc2ae4596215850b2aaf0b8423dc94/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Ftests.rs?ref=305763ea60cc2ae4596215850b2aaf0b8423dc94", "patch": "@@ -44,6 +44,7 @@ fn mk_session(matches: getopts::Matches) -> (Session, CfgSpecs) {\n     let sess = build_session(\n         sessopts,\n         None,\n+        None,\n         registry,\n         DiagnosticOutput::Default,\n         Default::default(),"}, {"sha": "3fa8017dc93c344dd972908dc64286cf158b577d", "filename": "compiler/rustc_interface/src/util.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/305763ea60cc2ae4596215850b2aaf0b8423dc94/compiler%2Frustc_interface%2Fsrc%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/305763ea60cc2ae4596215850b2aaf0b8423dc94/compiler%2Frustc_interface%2Fsrc%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Futil.rs?ref=305763ea60cc2ae4596215850b2aaf0b8423dc94", "patch": "@@ -83,9 +83,23 @@ pub fn create_session(\n     // target_override is documented to be called before init(), so this is okay\n     let target_override = codegen_backend.target_override(&sopts);\n \n+    let bundle = match rustc_errors::fluent_bundle(\n+        sopts.maybe_sysroot.clone(),\n+        sysroot_candidates(),\n+        sopts.debugging_opts.translate_lang.clone(),\n+        sopts.debugging_opts.translate_additional_ftl.as_deref(),\n+        sopts.debugging_opts.translate_directionality_markers,\n+    ) {\n+        Ok(bundle) => bundle,\n+        Err(e) => {\n+            early_error(sopts.error_format, &format!(\"failed to load fluent bundle: {e}\"));\n+        }\n+    };\n+\n     let mut sess = session::build_session(\n         sopts,\n         input_path,\n+        bundle,\n         descriptions,\n         diagnostic_output,\n         lint_caps,"}, {"sha": "d70f89760a1ff06589365f2e335a4c9d66fb69ba", "filename": "compiler/rustc_session/src/session.rs", "status": "modified", "additions": 13, "deletions": 11, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/305763ea60cc2ae4596215850b2aaf0b8423dc94/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/305763ea60cc2ae4596215850b2aaf0b8423dc94/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fsession.rs?ref=305763ea60cc2ae4596215850b2aaf0b8423dc94", "patch": "@@ -20,8 +20,8 @@ use rustc_errors::emitter::{Emitter, EmitterWriter, HumanReadableErrorType};\n use rustc_errors::json::JsonEmitter;\n use rustc_errors::registry::Registry;\n use rustc_errors::{\n-    fallback_fluent_bundle, fluent_bundle, DiagnosticBuilder, DiagnosticId, DiagnosticMessage,\n-    EmissionGuarantee, ErrorGuaranteed, FluentBundle, MultiSpan,\n+    fallback_fluent_bundle, DiagnosticBuilder, DiagnosticId, DiagnosticMessage, EmissionGuarantee,\n+    ErrorGuaranteed, FluentBundle, MultiSpan,\n };\n use rustc_macros::HashStable_Generic;\n pub use rustc_span::def_id::StableCrateId;\n@@ -1162,6 +1162,7 @@ pub enum DiagnosticOutput {\n pub fn build_session(\n     sopts: config::Options,\n     local_crate_source_file: Option<PathBuf>,\n+    bundle: Option<Lrc<rustc_errors::FluentBundle>>,\n     registry: rustc_errors::registry::Registry,\n     diagnostics_output: DiagnosticOutput,\n     driver_lint_caps: FxHashMap<lint::LintId, lint::Level>,\n@@ -1214,16 +1215,17 @@ pub fn build_session(\n         hash_kind,\n     ));\n \n-    let bundle = fluent_bundle(\n-        &sysroot,\n-        sopts.debugging_opts.translate_lang.clone(),\n-        sopts.debugging_opts.translate_additional_ftl.as_deref(),\n-        sopts.debugging_opts.translate_directionality_markers,\n-    )\n-    .expect(\"failed to load fluent bundle\");\n     let fallback_bundle =\n-        fallback_fluent_bundle(sopts.debugging_opts.translate_directionality_markers)\n-            .expect(\"failed to load fallback fluent bundle\");\n+        match fallback_fluent_bundle(sopts.debugging_opts.translate_directionality_markers) {\n+            Ok(bundle) => bundle,\n+            Err(e) => {\n+                early_error(\n+                    sopts.error_format,\n+                    &format!(\"failed to load fallback fluent bundle: {e}\"),\n+                );\n+            }\n+        };\n+\n     let emitter =\n         default_emitter(&sopts, registry, source_map.clone(), bundle, fallback_bundle, write_dest);\n "}, {"sha": "bfff75e7acb08429585ef8b65ffab131d2702cea", "filename": "src/test/run-make/translation/Makefile", "status": "modified", "additions": 27, "deletions": 1, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/305763ea60cc2ae4596215850b2aaf0b8423dc94/src%2Ftest%2Frun-make%2Ftranslation%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/305763ea60cc2ae4596215850b2aaf0b8423dc94/src%2Ftest%2Frun-make%2Ftranslation%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Ftranslation%2FMakefile?ref=305763ea60cc2ae4596215850b2aaf0b8423dc94", "patch": "@@ -15,7 +15,9 @@ normal: basic-translation.rs\n custom: basic-translation.rs basic-translation.ftl\n \t$(RUSTC) $< -Ztranslate-additional-ftl=$(CURDIR)/basic-translation.ftl 2>&1 | grep \"this is a test message\"\n \n-# Make a local copy of the sysroot and add the custom locale to it.\n+# Check that a locale can be loaded from the sysroot given a language\n+# identifier by making a local copy of the sysroot and adding the custom locale\n+# to it.\n sysroot: basic-translation.rs basic-translation.ftl\n \tmkdir $(FAKEROOT)\n \tln -s $(SYSROOT)/* $(FAKEROOT)\n@@ -31,3 +33,27 @@ sysroot: basic-translation.rs basic-translation.ftl\n \tmkdir -p $(FAKEROOT)/share/locale/zh-CN/\n \tln -s $(CURDIR)/basic-translation.ftl $(FAKEROOT)/share/locale/zh-CN/basic-translation.ftl\n \t$(RUSTC) $< --sysroot $(FAKEROOT) -Ztranslate-lang=zh-CN 2>&1 | grep \"this is a test message\"\n+\n+# Check that the compiler errors out when the sysroot requested cannot be\n+# found. This test might start failing if there actually exists a Klingon\n+# translation of rustc's error messages.\n+sysroot-missing: \n+\t$(RUSTC) $< -Ztranslate-lang=tlh 2>&1 || grep \"missing locale directory\"\n+\n+# Check that the compiler errors out when the sysroot requested cannot be\n+# found. This test might start failing if there actually exists a Klingon\n+# translation of rustc's error messages.\n+sysroot-invalid: basic-translation.rs basic-translation.ftl\n+\tmkdir $(FAKEROOT)\n+\tln -s $(SYSROOT)/* $(FAKEROOT)\n+\trm -f $(FAKEROOT)/lib\n+\tmkdir $(FAKEROOT)/lib\n+\tln -s $(SYSROOT)/lib/* $(FAKEROOT)/lib\n+\trm -f $(FAKEROOT)/lib/rustlib\n+\tmkdir $(FAKEROOT)/lib/rustlib\n+\tln -s $(SYSROOT)/lib/rustlib/* $(FAKEROOT)/lib/rustlib\n+\trm -f $(FAKEROOT)/lib/rustlib/src\n+\tmkdir $(FAKEROOT)/lib/rustlib/src\n+\tln -s $(SYSROOT)/lib/rustlib/src/* $(FAKEROOT)/lib/rustlib/src\n+\ttouch $(FAKEROOT)/share/locale/zh-CN/\n+\t$(RUSTC) $< --sysroot $(FAKEROOT) -Ztranslate-lang=zh-CN 2>&1 || grep \"`\\$sysroot/share/locales/\\$locale` is not a directory\""}]}