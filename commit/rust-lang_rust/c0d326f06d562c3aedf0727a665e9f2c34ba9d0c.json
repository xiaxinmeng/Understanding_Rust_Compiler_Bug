{"sha": "c0d326f06d562c3aedf0727a665e9f2c34ba9d0c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMwZDMyNmYwNmQ1NjJjM2FlZGYwNzI3YTY2NWU5ZjJjMzRiYTlkMGM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-11-10T09:08:15Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-11-10T09:08:15Z"}, "message": "Auto merge of #45907 - kennytm:rollup, r=kennytm\n\nRollup of 9 pull requests\n\n- Successful merges: #45783, #45856, #45863, #45869, #45878, #45882, #45887, #45895, #45901\n- Failed merges:", "tree": {"sha": "f746fee3284ccafdfe5cc190c4e46ea54fbbfda6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f746fee3284ccafdfe5cc190c4e46ea54fbbfda6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c0d326f06d562c3aedf0727a665e9f2c34ba9d0c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c0d326f06d562c3aedf0727a665e9f2c34ba9d0c", "html_url": "https://github.com/rust-lang/rust/commit/c0d326f06d562c3aedf0727a665e9f2c34ba9d0c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c0d326f06d562c3aedf0727a665e9f2c34ba9d0c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d5ff0e6422061c390a141354af8eacd540dca10b", "url": "https://api.github.com/repos/rust-lang/rust/commits/d5ff0e6422061c390a141354af8eacd540dca10b", "html_url": "https://github.com/rust-lang/rust/commit/d5ff0e6422061c390a141354af8eacd540dca10b"}, {"sha": "6a9931c3fbead83c7d605d978dd74ad6cca8c83e", "url": "https://api.github.com/repos/rust-lang/rust/commits/6a9931c3fbead83c7d605d978dd74ad6cca8c83e", "html_url": "https://github.com/rust-lang/rust/commit/6a9931c3fbead83c7d605d978dd74ad6cca8c83e"}], "stats": {"total": 627, "additions": 563, "deletions": 64}, "files": [{"sha": "33982838eae32a68ce84b1b272d099d82ad65262", "filename": ".travis.yml", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c0d326f06d562c3aedf0727a665e9f2c34ba9d0c/.travis.yml", "raw_url": "https://github.com/rust-lang/rust/raw/c0d326f06d562c3aedf0727a665e9f2c34ba9d0c/.travis.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.travis.yml?ref=c0d326f06d562c3aedf0727a665e9f2c34ba9d0c", "patch": "@@ -253,7 +253,14 @@ after_failure:\n \n   # Random attempt at debugging currently. Just poking around in here to see if\n   # anything shows up.\n-  - ls $HOME/Library/Logs/DiagnosticReports/\n+  - ls -lat $HOME/Library/Logs/DiagnosticReports/\n+  - find $HOME/Library/Logs/DiagnosticReports/ ! \\(\n+      -name '*.stage2-*.crash'\n+      -name 'com.apple.CoreSimulator.CoreSimulatorService-*.crash'\n+    \\)\n+      -exec echo -e travis_fold\":start:crashlog\\n\\033[31;1m\" {} \"\\033[0m\" \\;\n+      -exec head -750 {} \\;\n+      -exec echo travis_fold\":\"end:crashlog \\;\n \n   # attempt to debug anything killed by the oom killer on linux, just to see if\n   # it happened\n@@ -286,6 +293,7 @@ before_deploy:\n           rm -rf obj/build/dist/doc &&\n           cp -r obj/build/dist/* deploy/$TRAVIS_COMMIT;\n       fi\n+  - travis_retry gem update --system\n \n deploy:\n   - provider: s3"}, {"sha": "ff97de681a1a3ddbb541148d78cfc2ba782122f1", "filename": "src/Cargo.lock", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c0d326f06d562c3aedf0727a665e9f2c34ba9d0c/src%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/c0d326f06d562c3aedf0727a665e9f2c34ba9d0c/src%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FCargo.lock?ref=c0d326f06d562c3aedf0727a665e9f2c34ba9d0c", "patch": "@@ -348,7 +348,9 @@ dependencies = [\n  \"getopts 0.2.15 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"libc 0.2.32 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"miow 0.2.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc-serialize 0.3.24 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"winapi 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]"}, {"sha": "922deba7367e97442f491b180757caa4069dace3", "filename": "src/ci/docker/README.md", "status": "modified", "additions": 46, "deletions": 4, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/c0d326f06d562c3aedf0727a665e9f2c34ba9d0c/src%2Fci%2Fdocker%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/c0d326f06d562c3aedf0727a665e9f2c34ba9d0c/src%2Fci%2Fdocker%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2FREADME.md?ref=c0d326f06d562c3aedf0727a665e9f2c34ba9d0c", "patch": "@@ -22,6 +22,48 @@ Images will output artifacts in an `obj` dir at the root of a repository.\n - `scripts` contains files shared by docker images\n - `disabled` contains images that are not built on travis\n \n+## Docker Toolbox on Windows\n+\n+For Windows before Windows 10, the docker images can be run on Windows via\n+[Docker Toolbox]. There are several preparation needs to be made before running\n+a Docker image.\n+\n+1. Stop the virtual machine from the terminal with `docker-machine stop`\n+\n+2. If your Rust source is placed outside of `C:\\Users\\**`, e.g. if you place the\n+    repository in the `E:\\rust` folder, please add a shared folder from\n+    VirtualBox by:\n+\n+    1. Select the \"default\" virtual machine inside VirtualBox, then click\n+        \"Settings\"\n+    2. Go to \"Shared Folders\", click \"Add shared foldrer\" (the folder icon with\n+        a plus sign), fill in the following information, then click \"OK\":\n+\n+        * Folder path: `E:\\rust`\n+        * Folder name: `e/rust`\n+        * Read-only: \u2610 *unchecked*\n+        * Auto-mount: \u2611 *checked*\n+        * Make Permanant: \u2611 *checked*\n+\n+3. VirtualBox might not support creating symbolic links inside a shared folder\n+    by default. You can enable it manually by running these from `cmd.exe`:\n+\n+    ```bat\n+    cd \"C:\\Program Files\\Oracle\\VirtualBox\"\n+    VBoxManage setextradata default VBoxInternal2/SharedFoldersEnableSymlinksCreate/e/rust 1\n+    ::                                                                              ^~~~~~\n+    ::                                                                              folder name\n+    ```\n+\n+4. Restart the virtual machine from terminal with `docker-machine start`.\n+\n+To run the image,\n+\n+1. Launch the \"Docker Quickstart Terminal\".\n+2. Execute `./src/ci/docker/run.sh $image_name` as explained at the beginning.\n+\n+[Docker Toolbox]: https://www.docker.com/products/docker-toolbox\n+\n ## Cross toolchains\n \n A number of these images take quite a long time to compile as they're building\n@@ -137,7 +179,7 @@ For targets: `armv7-unknown-linux-gnueabihf`\n     libraries like jemalloc. See the mk/cfg/arm(v7)-uknown-linux-gnueabi{,hf}.mk\n     file in Rust's source code.\n \n-## `aarch64-linux-gnu.config`\n+### `aarch64-linux-gnu.config`\n \n For targets: `aarch64-unknown-linux-gnu`\n \n@@ -150,7 +192,7 @@ For targets: `aarch64-unknown-linux-gnu`\n - C compiler > gcc version = 5.2.0\n - C compiler > C++ = ENABLE -- to cross compile LLVM\n \n-## `powerpc-linux-gnu.config`\n+### `powerpc-linux-gnu.config`\n \n For targets: `powerpc-unknown-linux-gnu`\n \n@@ -165,7 +207,7 @@ For targets: `powerpc-unknown-linux-gnu`\n - C compiler > gcc version = 4.9.3\n - C compiler > C++ = ENABLE -- to cross compile LLVM\n \n-## `powerpc64-linux-gnu.config`\n+### `powerpc64-linux-gnu.config`\n \n For targets: `powerpc64-unknown-linux-gnu`\n \n@@ -184,7 +226,7 @@ For targets: `powerpc64-unknown-linux-gnu`\n \n (+) These CPU options match the configuration of the toolchains in RHEL6.\n \n-## `s390x-linux-gnu.config`\n+### `s390x-linux-gnu.config`\n \n For targets: `s390x-unknown-linux-gnu`\n "}, {"sha": "5f556b67081a310d148e0e0752df1c374b88d534", "filename": "src/ci/docker/dist-powerpc64le-linux/build-powerpc64le-toolchain.sh", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c0d326f06d562c3aedf0727a665e9f2c34ba9d0c/src%2Fci%2Fdocker%2Fdist-powerpc64le-linux%2Fbuild-powerpc64le-toolchain.sh", "raw_url": "https://github.com/rust-lang/rust/raw/c0d326f06d562c3aedf0727a665e9f2c34ba9d0c/src%2Fci%2Fdocker%2Fdist-powerpc64le-linux%2Fbuild-powerpc64le-toolchain.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-powerpc64le-linux%2Fbuild-powerpc64le-toolchain.sh?ref=c0d326f06d562c3aedf0727a665e9f2c34ba9d0c", "patch": "@@ -23,9 +23,9 @@ SYSROOT=/usr/local/$TARGET/sysroot\n mkdir -p $SYSROOT\n pushd $SYSROOT\n \n-centos_base=http://mirror.centos.org/altarch/7/os/ppc64le/Packages\n-glibc_v=2.17-196.el7\n-kernel_v=3.10.0-693.el7\n+centos_base=http://vault.centos.org/altarch/7.3.1611/os/ppc64le/Packages/\n+glibc_v=2.17-157.el7\n+kernel_v=3.10.0-514.el7\n for package in glibc{,-devel,-headers}-$glibc_v kernel-headers-$kernel_v; do\n   curl $centos_base/$package.ppc64le.rpm | \\\n     rpm2cpio - | cpio -idm"}, {"sha": "dc02310b4f21ff102ac39550ee0f89852a68e9e0", "filename": "src/ci/docker/run.sh", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c0d326f06d562c3aedf0727a665e9f2c34ba9d0c/src%2Fci%2Fdocker%2Frun.sh", "raw_url": "https://github.com/rust-lang/rust/raw/c0d326f06d562c3aedf0727a665e9f2c34ba9d0c/src%2Fci%2Fdocker%2Frun.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Frun.sh?ref=c0d326f06d562c3aedf0727a665e9f2c34ba9d0c", "patch": "@@ -11,6 +11,8 @@\n \n set -e\n \n+export MSYS_NO_PATHCONV=1\n+\n script=`cd $(dirname $0) && pwd`/`basename $0`\n image=$1\n \n@@ -25,12 +27,19 @@ travis_fold start build_docker\n travis_time_start\n \n if [ -f \"$docker_dir/$image/Dockerfile\" ]; then\n+    dockerfile=\"$docker_dir/$image/Dockerfile\"\n+    if [ -x /usr/bin/cygpath ]; then\n+        context=\"`cygpath -w $docker_dir`\"\n+        dockerfile=\"`cygpath -w $dockerfile`\"\n+    else\n+        context=\"$docker_dir\"\n+    fi\n     retry docker \\\n       build \\\n       --rm \\\n       -t rust-ci \\\n-      -f \"$docker_dir/$image/Dockerfile\" \\\n-      \"$docker_dir\"\n+      -f \"$dockerfile\" \\\n+      \"$context\"\n elif [ -f \"$docker_dir/disabled/$image/Dockerfile\" ]; then\n     if [ -n \"$TRAVIS_OS_NAME\" ]; then\n         echo Cannot run disabled images on travis!"}, {"sha": "a167b2e57c07840e33e2d872acb906f9898ab3e0", "filename": "src/liballoc/str.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c0d326f06d562c3aedf0727a665e9f2c34ba9d0c/src%2Fliballoc%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0d326f06d562c3aedf0727a665e9f2c34ba9d0c/src%2Fliballoc%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fstr.rs?ref=c0d326f06d562c3aedf0727a665e9f2c34ba9d0c", "patch": "@@ -363,16 +363,16 @@ impl str {\n     /// # Examples\n     ///\n     /// ```\n-    /// let mut v = String::from(\"\ud83d\uddfb\u2208\ud83c\udf0f\");\n+    /// let v = String::from(\"\ud83d\uddfb\u2208\ud83c\udf0f\");\n     ///\n     /// assert_eq!(Some(\"\ud83d\uddfb\"), v.get(0..4));\n     ///\n     /// // indices not on UTF-8 sequence boundaries\n-    /// assert!(v.get_mut(1..).is_none());\n-    /// assert!(v.get_mut(..8).is_none());\n+    /// assert!(v.get(1..).is_none());\n+    /// assert!(v.get(..8).is_none());\n     ///\n     /// // out of bounds\n-    /// assert!(v.get_mut(..42).is_none());\n+    /// assert!(v.get(..42).is_none());\n     /// ```\n     #[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]\n     #[inline]"}, {"sha": "e2d61890c309681ab87d29e908bb93c753d3a402", "filename": "src/libcore/fmt/mod.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/c0d326f06d562c3aedf0727a665e9f2c34ba9d0c/src%2Flibcore%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0d326f06d562c3aedf0727a665e9f2c34ba9d0c/src%2Flibcore%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fmod.rs?ref=c0d326f06d562c3aedf0727a665e9f2c34ba9d0c", "patch": "@@ -525,6 +525,26 @@ impl<'a> Display for Arguments<'a> {\n #[lang = \"debug_trait\"]\n pub trait Debug {\n     /// Formats the value using the given formatter.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::fmt;\n+    ///\n+    /// struct Position {\n+    ///     longitude: f32,\n+    ///     latitude: f32,\n+    /// }\n+    ///\n+    /// impl fmt::Debug for Position {\n+    ///     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    ///         write!(f, \"({:?}, {:?})\", self.longitude, self.latitude)\n+    ///     }\n+    /// }\n+    ///\n+    /// assert_eq!(\"(1.987, 2.983)\".to_owned(),\n+    ///            format!(\"{:?}\", Position { longitude: 1.987, latitude: 2.983, }));\n+    /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn fmt(&self, f: &mut Formatter) -> Result;\n }"}, {"sha": "c410c2d900470debf2e74a6ca9ae09048fc73627", "filename": "src/libcore/macros.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c0d326f06d562c3aedf0727a665e9f2c34ba9d0c/src%2Flibcore%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0d326f06d562c3aedf0727a665e9f2c34ba9d0c/src%2Flibcore%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmacros.rs?ref=c0d326f06d562c3aedf0727a665e9f2c34ba9d0c", "patch": "@@ -120,6 +120,9 @@ macro_rules! assert_eq {\n             }\n         }\n     });\n+    ($left:expr, $right:expr,) => ({\n+        assert_eq!($left, $right)\n+    });\n     ($left:expr, $right:expr, $($arg:tt)+) => ({\n         match (&($left), &($right)) {\n             (left_val, right_val) => {\n@@ -168,6 +171,9 @@ macro_rules! assert_ne {\n             }\n         }\n     });\n+    ($left:expr, $right:expr,) => {\n+        assert_ne!($left, $right)\n+    };\n     ($left:expr, $right:expr, $($arg:tt)+) => ({\n         match (&($left), &($right)) {\n             (left_val, right_val) => {"}, {"sha": "63c846b25eca511f005b080cbe3c331b9fa02831", "filename": "src/libcore/option.rs", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/c0d326f06d562c3aedf0727a665e9f2c34ba9d0c/src%2Flibcore%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0d326f06d562c3aedf0727a665e9f2c34ba9d0c/src%2Flibcore%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Foption.rs?ref=c0d326f06d562c3aedf0727a665e9f2c34ba9d0c", "patch": "@@ -607,6 +607,45 @@ impl<T> Option<T> {\n         }\n     }\n \n+    /// Returns `None` if the option is `None`, otherwise calls `predicate`\n+    /// with the wrapped value and returns:\n+    ///\n+    /// - `Some(t)` if `predicate` returns `true` (where `t` is the wrapped\n+    ///   value), and\n+    /// - `None` if `predicate` returns `false`.\n+    ///\n+    /// This function works similar to `Iterator::filter()`. You can imagine\n+    /// the `Option<T>` being an iterator over one or zero elements. `filter()`\n+    /// lets you decide which elements to keep.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```rust\n+    /// #![feature(option_filter)]\n+    ///\n+    /// fn is_even(n: &i32) -> bool {\n+    ///     n % 2 == 0\n+    /// }\n+    ///\n+    /// assert_eq!(None.filter(is_even), None);\n+    /// assert_eq!(Some(3).filter(is_even), None);\n+    /// assert_eq!(Some(4).filter(is_even), Some(4));\n+    /// ```\n+    #[inline]\n+    #[unstable(feature = \"option_filter\", issue = \"45860\")]\n+    pub fn filter<P: FnOnce(&T) -> bool>(self, predicate: P) -> Self {\n+        match self {\n+            Some(x) => {\n+                if predicate(&x) {\n+                    Some(x)\n+                } else {\n+                    None\n+                }\n+            }\n+            None => None,\n+        }\n+    }\n+\n     /// Returns the option if it contains a value, otherwise returns `optb`.\n     ///\n     /// # Examples"}, {"sha": "b7cf6d778a2f9d4298af22a2fe04641ff8536d98", "filename": "src/libcore/sync/atomic.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c0d326f06d562c3aedf0727a665e9f2c34ba9d0c/src%2Flibcore%2Fsync%2Fatomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0d326f06d562c3aedf0727a665e9f2c34ba9d0c/src%2Flibcore%2Fsync%2Fatomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fsync%2Fatomic.rs?ref=c0d326f06d562c3aedf0727a665e9f2c34ba9d0c", "patch": "@@ -927,6 +927,7 @@ impl<T> AtomicPtr<T> {\n     }\n }\n \n+#[cfg(target_has_atomic = \"ptr\")]\n #[stable(feature = \"atomic_from\", since = \"1.23.0\")]\n impl<T> From<*mut T> for AtomicPtr<T> {\n     #[inline]"}, {"sha": "95e9c8f6df882a5244aa3b9c192c5efb745fbbd4", "filename": "src/librustc_mir/transform/inline.rs", "status": "modified", "additions": 23, "deletions": 6, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/c0d326f06d562c3aedf0727a665e9f2c34ba9d0c/src%2Flibrustc_mir%2Ftransform%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0d326f06d562c3aedf0727a665e9f2c34ba9d0c/src%2Flibrustc_mir%2Ftransform%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Finline.rs?ref=c0d326f06d562c3aedf0727a665e9f2c34ba9d0c", "patch": "@@ -37,7 +37,7 @@ const UNKNOWN_SIZE_COST: usize = 10;\n \n pub struct Inline;\n \n-#[derive(Copy, Clone)]\n+#[derive(Copy, Clone, Debug)]\n struct CallSite<'tcx> {\n     callee: DefId,\n     substs: &'tcx Substs<'tcx>,\n@@ -113,7 +113,9 @@ impl<'a, 'tcx> Inliner<'a, 'tcx> {\n         loop {\n             local_change = false;\n             while let Some(callsite) = callsites.pop_front() {\n+                debug!(\"checking whether to inline callsite {:?}\", callsite);\n                 if !self.tcx.is_mir_available(callsite.callee) {\n+                    debug!(\"checking whether to inline callsite {:?} - MIR unavailable\", callsite);\n                     continue;\n                 }\n \n@@ -133,10 +135,12 @@ impl<'a, 'tcx> Inliner<'a, 'tcx> {\n                 };\n \n                 let start = caller_mir.basic_blocks().len();\n-\n+                debug!(\"attempting to inline callsite {:?} - mir={:?}\", callsite, callee_mir);\n                 if !self.inline_call(callsite, caller_mir, callee_mir) {\n+                    debug!(\"attempting to inline callsite {:?} - failure\", callsite);\n                     continue;\n                 }\n+                debug!(\"attempting to inline callsite {:?} - success\", callsite);\n \n                 // Add callsites from inlined function\n                 for (bb, bb_data) in caller_mir.basic_blocks().iter_enumerated().skip(start) {\n@@ -180,16 +184,19 @@ impl<'a, 'tcx> Inliner<'a, 'tcx> {\n                      callee_mir: &Mir<'tcx>)\n                      -> bool\n     {\n+        debug!(\"should_inline({:?})\", callsite);\n         let tcx = self.tcx;\n \n         // Don't inline closures that have captures\n         // FIXME: Handle closures better\n         if callee_mir.upvar_decls.len() > 0 {\n+            debug!(\"    upvar decls present - not inlining\");\n             return false;\n         }\n \n         // Cannot inline generators which haven't been transformed yet\n         if callee_mir.yield_ty.is_some() {\n+            debug!(\"    yield ty present - not inlining\");\n             return false;\n         }\n \n@@ -201,7 +208,10 @@ impl<'a, 'tcx> Inliner<'a, 'tcx> {\n             // there are cases that prevent inlining that we\n             // need to check for first.\n             attr::InlineAttr::Always => true,\n-            attr::InlineAttr::Never => return false,\n+            attr::InlineAttr::Never => {\n+                debug!(\"#[inline(never)] present - not inlining\");\n+                return false\n+            }\n             attr::InlineAttr::Hint => true,\n             attr::InlineAttr::None => false,\n         };\n@@ -211,6 +221,7 @@ impl<'a, 'tcx> Inliner<'a, 'tcx> {\n         // reference unexported symbols\n         if callsite.callee.is_local() {\n             if callsite.substs.types().count() == 0 && !hinted {\n+                debug!(\"    callee is an exported function - not inlining\");\n                 return false;\n             }\n         }\n@@ -232,6 +243,7 @@ impl<'a, 'tcx> Inliner<'a, 'tcx> {\n         if callee_mir.basic_blocks().len() <= 3 {\n             threshold += threshold / 4;\n         }\n+        debug!(\"    final inline threshold = {}\", threshold);\n \n         // FIXME: Give a bonus to functions with only a single caller\n \n@@ -327,12 +339,17 @@ impl<'a, 'tcx> Inliner<'a, 'tcx> {\n             }\n         }\n \n-        debug!(\"Inline cost for {:?} is {}\", callsite.callee, cost);\n-\n         if let attr::InlineAttr::Always = hint {\n+            debug!(\"INLINING {:?} because inline(always) [cost={}]\", callsite, cost);\n             true\n         } else {\n-            cost <= threshold\n+            if cost <= threshold {\n+                debug!(\"INLINING {:?} [cost={} <= threshold={}]\", callsite, cost, threshold);\n+                true\n+            } else {\n+                debug!(\"NOT inlining {:?} [cost={} > threshold={}]\", callsite, cost, threshold);\n+                false\n+            }\n         }\n     }\n "}, {"sha": "b30fc38fcbcdf617a92fda12cac1550c57b18ffa", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c0d326f06d562c3aedf0727a665e9f2c34ba9d0c/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0d326f06d562c3aedf0727a665e9f2c34ba9d0c/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=c0d326f06d562c3aedf0727a665e9f2c34ba9d0c", "patch": "@@ -250,7 +250,7 @@ impl<'a> Resolver<'a> {\n                 }\n             }\n \n-            ItemKind::ExternCrate(_) => {\n+            ItemKind::ExternCrate(as_name) => {\n                 self.crate_loader.process_item(item, &self.definitions);\n \n                 // n.b. we don't need to look at the path option here, because cstore already did\n@@ -265,7 +265,7 @@ impl<'a> Resolver<'a> {\n                     id: item.id,\n                     parent,\n                     imported_module: Cell::new(Some(module)),\n-                    subclass: ImportDirectiveSubclass::ExternCrate,\n+                    subclass: ImportDirectiveSubclass::ExternCrate(as_name),\n                     span: item.span,\n                     module_path: Vec::new(),\n                     vis: Cell::new(vis),"}, {"sha": "5820acf1b9006132aefa9479ceccdf750c6cfca5", "filename": "src/librustc_resolve/check_unused.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c0d326f06d562c3aedf0727a665e9f2c34ba9d0c/src%2Flibrustc_resolve%2Fcheck_unused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0d326f06d562c3aedf0727a665e9f2c34ba9d0c/src%2Flibrustc_resolve%2Fcheck_unused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fcheck_unused.rs?ref=c0d326f06d562c3aedf0727a665e9f2c34ba9d0c", "patch": "@@ -120,7 +120,7 @@ pub fn check_crate(resolver: &mut Resolver, krate: &ast::Crate) {\n             _ if directive.used.get() ||\n                  directive.vis.get() == ty::Visibility::Public ||\n                  directive.span.source_equal(&DUMMY_SP) => {}\n-            ImportDirectiveSubclass::ExternCrate => {\n+            ImportDirectiveSubclass::ExternCrate(_) => {\n                 resolver.maybe_unused_extern_crates.push((directive.id, directive.span));\n             }\n             ImportDirectiveSubclass::MacroUse => {"}, {"sha": "58bdf542fc9d4d6b02655c6585c151e3349feb1b", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c0d326f06d562c3aedf0727a665e9f2c34ba9d0c/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0d326f06d562c3aedf0727a665e9f2c34ba9d0c/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=c0d326f06d562c3aedf0727a665e9f2c34ba9d0c", "patch": "@@ -1118,7 +1118,7 @@ impl<'a> NameBinding<'a> {\n         match self.kind {\n             NameBindingKind::Import {\n                 directive: &ImportDirective {\n-                    subclass: ImportDirectiveSubclass::ExternCrate, ..\n+                    subclass: ImportDirectiveSubclass::ExternCrate(_), ..\n                 }, ..\n             } => true,\n             _ => false,\n@@ -1132,6 +1132,15 @@ impl<'a> NameBinding<'a> {\n         }\n     }\n \n+    fn is_renamed_extern_crate(&self) -> bool {\n+        if let NameBindingKind::Import { directive, ..} = self.kind {\n+            if let ImportDirectiveSubclass::ExternCrate(Some(_)) = directive.subclass {\n+                return true;\n+            }\n+        }\n+        false\n+    }\n+\n     fn is_glob_import(&self) -> bool {\n         match self.kind {\n             NameBindingKind::Import { directive, .. } => directive.is_glob(),\n@@ -3700,7 +3709,8 @@ impl<'a> Resolver<'a> {\n             let cm = self.session.codemap();\n             let rename_msg = \"You can use `as` to change the binding name of the import\";\n \n-            if let Ok(snippet) = cm.span_to_snippet(binding.span) {\n+            if let (Ok(snippet), false) = (cm.span_to_snippet(binding.span),\n+                                           binding.is_renamed_extern_crate()) {\n                 err.span_suggestion(binding.span,\n                                     rename_msg,\n                                     format!(\"{} as Other{}\", snippet, name));"}, {"sha": "bcbabd700946ad904b2ffaba39e05dd6adc17734", "filename": "src/librustc_resolve/resolve_imports.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c0d326f06d562c3aedf0727a665e9f2c34ba9d0c/src%2Flibrustc_resolve%2Fresolve_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0d326f06d562c3aedf0727a665e9f2c34ba9d0c/src%2Flibrustc_resolve%2Fresolve_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fresolve_imports.rs?ref=c0d326f06d562c3aedf0727a665e9f2c34ba9d0c", "patch": "@@ -23,7 +23,7 @@ use rustc::hir::def_id::DefId;\n use rustc::hir::def::*;\n use rustc::util::nodemap::{FxHashMap, FxHashSet};\n \n-use syntax::ast::{Ident, SpannedIdent, NodeId};\n+use syntax::ast::{Ident, Name, SpannedIdent, NodeId};\n use syntax::ext::base::Determinacy::{self, Determined, Undetermined};\n use syntax::ext::hygiene::Mark;\n use syntax::parse::token;\n@@ -48,7 +48,7 @@ pub enum ImportDirectiveSubclass<'a> {\n         max_vis: Cell<ty::Visibility>, // The visibility of the greatest reexport.\n         // n.b. `max_vis` is only used in `finalize_import` to check for reexport errors.\n     },\n-    ExternCrate,\n+    ExternCrate(Option<Name>),\n     MacroUse,\n }\n \n@@ -923,7 +923,7 @@ fn import_directive_subclass_to_string(subclass: &ImportDirectiveSubclass) -> St\n     match *subclass {\n         SingleImport { source, .. } => source.to_string(),\n         GlobImport { .. } => \"*\".to_string(),\n-        ExternCrate => \"<extern crate>\".to_string(),\n+        ExternCrate(_) => \"<extern crate>\".to_string(),\n         MacroUse => \"#[macro_use]\".to_string(),\n     }\n }"}, {"sha": "1961acf53a695232c920fe0144fa8f198fdbc645", "filename": "src/librustc_trans/back/link.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c0d326f06d562c3aedf0727a665e9f2c34ba9d0c/src%2Flibrustc_trans%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0d326f06d562c3aedf0727a665e9f2c34ba9d0c/src%2Flibrustc_trans%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Flink.rs?ref=c0d326f06d562c3aedf0727a665e9f2c34ba9d0c", "patch": "@@ -671,11 +671,12 @@ fn link_natively(sess: &Session,\n             break\n         }\n \n-        sess.struct_warn(\"looks like the linker segfaulted when we tried to \\\n-                          call it, automatically retrying again\")\n-            .note(&format!(\"{:?}\", cmd))\n-            .note(&out)\n-            .emit();\n+        warn!(\n+            \"looks like the linker segfaulted when we tried to call it, \\\n+             automatically retrying again. cmd = {:?}, out = {}.\",\n+            cmd,\n+            out,\n+        );\n     }\n \n     match prog {"}, {"sha": "76abcb83edc53665efd9706c2682a522cd823fde", "filename": "src/libtest/lib.rs", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/c0d326f06d562c3aedf0727a665e9f2c34ba9d0c/src%2Flibtest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0d326f06d562c3aedf0727a665e9f2c34ba9d0c/src%2Flibtest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Flib.rs?ref=c0d326f06d562c3aedf0727a665e9f2c34ba9d0c", "patch": "@@ -71,6 +71,7 @@ use std::thread;\n use std::time::{Instant, Duration};\n \n const TEST_WARN_TIMEOUT_S: u64 = 60;\n+const QUIET_MODE_MAX_COLUMN: usize = 100; // insert a '\\n' after 100 tests in quiet mode\n \n // to be used by rustc to compile tests in libtest\n pub mod test {\n@@ -614,7 +615,14 @@ impl<T: Write> ConsoleTestState<T> {\n     pub fn write_short_result(&mut self, verbose: &str, quiet: &str, color: term::color::Color)\n                               -> io::Result<()> {\n         if self.quiet {\n-            self.write_pretty(quiet, color)\n+            self.write_pretty(quiet, color)?;\n+            if self.current_test_count() % QUIET_MODE_MAX_COLUMN == QUIET_MODE_MAX_COLUMN - 1 {\n+                // we insert a new line every 100 dots in order to flush the\n+                // screen when dealing with line-buffered output (e.g. piping to\n+                // `stamp` in the rust CI).\n+                self.write_plain(\"\\n\")?;\n+            }\n+            Ok(())\n         } else {\n             self.write_pretty(verbose, color)?;\n             self.write_plain(\"\\n\")\n@@ -771,9 +779,12 @@ impl<T: Write> ConsoleTestState<T> {\n         Ok(())\n     }\n \n+    fn current_test_count(&self) -> usize {\n+        self.passed + self.failed + self.ignored + self.measured + self.allowed_fail\n+    }\n+\n     pub fn write_run_finish(&mut self) -> io::Result<bool> {\n-        assert!(self.passed + self.failed + self.ignored + self.measured +\n-                    self.allowed_fail == self.total);\n+        assert!(self.current_test_count() == self.total);\n \n         if self.options.display_output {\n             self.write_outputs()?;"}, {"sha": "e125cc0c19c373deedf956e4151fd1e3edb407e1", "filename": "src/test/compile-fail/E0259.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c0d326f06d562c3aedf0727a665e9f2c34ba9d0c/src%2Ftest%2Fcompile-fail%2FE0259.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0d326f06d562c3aedf0727a665e9f2c34ba9d0c/src%2Ftest%2Fcompile-fail%2FE0259.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0259.rs?ref=c0d326f06d562c3aedf0727a665e9f2c34ba9d0c", "patch": "@@ -18,5 +18,6 @@ extern crate libc as alloc;\n //~^ ERROR E0259\n //~| NOTE `alloc` reimported here\n //~| NOTE `alloc` must be defined only once in the type namespace of this module\n+//~| NOTE You can use `as` to change the binding name of the import\n \n fn main() {}"}, {"sha": "d98baf640a8c95ca71dfc3df4d2ad7041a64f374", "filename": "src/test/run-pass/assert-eq-trailing-comma.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c0d326f06d562c3aedf0727a665e9f2c34ba9d0c/src%2Ftest%2Frun-pass%2Fassert-eq-trailing-comma.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0d326f06d562c3aedf0727a665e9f2c34ba9d0c/src%2Ftest%2Frun-pass%2Fassert-eq-trailing-comma.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassert-eq-trailing-comma.rs?ref=c0d326f06d562c3aedf0727a665e9f2c34ba9d0c", "previous_filename": "src/test/ui/macros/assert_eq_trailing_comma.rs"}, {"sha": "4d3c29da8b22b8efae94293c574b5ee0368cbfc8", "filename": "src/test/run-pass/assert-ne-trailing-comma.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c0d326f06d562c3aedf0727a665e9f2c34ba9d0c/src%2Ftest%2Frun-pass%2Fassert-ne-trailing-comma.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0d326f06d562c3aedf0727a665e9f2c34ba9d0c/src%2Ftest%2Frun-pass%2Fassert-ne-trailing-comma.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassert-ne-trailing-comma.rs?ref=c0d326f06d562c3aedf0727a665e9f2c34ba9d0c", "previous_filename": "src/test/ui/macros/assert_ne_trailing_comma.rs"}, {"sha": "010ecebb1bbe3c0ab1d685a4699a98ef75f20d84", "filename": "src/test/run-pass/saturating-float-casts.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c0d326f06d562c3aedf0727a665e9f2c34ba9d0c/src%2Ftest%2Frun-pass%2Fsaturating-float-casts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0d326f06d562c3aedf0727a665e9f2c34ba9d0c/src%2Ftest%2Frun-pass%2Fsaturating-float-casts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsaturating-float-casts.rs?ref=c0d326f06d562c3aedf0727a665e9f2c34ba9d0c", "patch": "@@ -48,8 +48,8 @@ macro_rules! test_c {\n     });\n \n     ($fval:expr, f* -> $ity:ident, $ival:expr) => (\n-        test!($fval, f32 -> $ity, $ival);\n-        test!($fval, f64 -> $ity, $ival);\n+        test_c!($fval, f32 -> $ity, $ival);\n+        test_c!($fval, f64 -> $ity, $ival);\n     )\n }\n "}, {"sha": "1b46e94584e6b33d507b03b99fa0dc8734102a11", "filename": "src/test/ui/macros/assert_eq_trailing_comma.stderr", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d5ff0e6422061c390a141354af8eacd540dca10b/src%2Ftest%2Fui%2Fmacros%2Fassert_eq_trailing_comma.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d5ff0e6422061c390a141354af8eacd540dca10b/src%2Ftest%2Fui%2Fmacros%2Fassert_eq_trailing_comma.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fassert_eq_trailing_comma.stderr?ref=d5ff0e6422061c390a141354af8eacd540dca10b", "patch": "@@ -1,8 +0,0 @@\n-error: unexpected end of macro invocation\n-  --> $DIR/assert_eq_trailing_comma.rs:12:20\n-   |\n-12 |     assert_eq!(1, 1,);\n-   |                    ^\n-\n-error: aborting due to previous error\n-"}, {"sha": "33d2cb0ed82429207921e38d6e35563e82c83175", "filename": "src/test/ui/macros/assert_ne_trailing_comma.stderr", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d5ff0e6422061c390a141354af8eacd540dca10b/src%2Ftest%2Fui%2Fmacros%2Fassert_ne_trailing_comma.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d5ff0e6422061c390a141354af8eacd540dca10b/src%2Ftest%2Fui%2Fmacros%2Fassert_ne_trailing_comma.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fassert_ne_trailing_comma.stderr?ref=d5ff0e6422061c390a141354af8eacd540dca10b", "patch": "@@ -1,8 +0,0 @@\n-error: unexpected end of macro invocation\n-  --> $DIR/assert_ne_trailing_comma.rs:12:20\n-   |\n-12 |     assert_ne!(1, 2,);\n-   |                    ^\n-\n-error: aborting due to previous error\n-"}, {"sha": "b61667cfd882ce02e3a44b5141adea3352a211f1", "filename": "src/test/ui/suggestions/auxiliary/m1.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c0d326f06d562c3aedf0727a665e9f2c34ba9d0c/src%2Ftest%2Fui%2Fsuggestions%2Fauxiliary%2Fm1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0d326f06d562c3aedf0727a665e9f2c34ba9d0c/src%2Ftest%2Fui%2Fsuggestions%2Fauxiliary%2Fm1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fauxiliary%2Fm1.rs?ref=c0d326f06d562c3aedf0727a665e9f2c34ba9d0c", "patch": "@@ -0,0 +1,11 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+pub fn foo() {}"}, {"sha": "94ff5e4497fe92d7d7718371a565304903b18ac2", "filename": "src/test/ui/suggestions/auxiliary/m2.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c0d326f06d562c3aedf0727a665e9f2c34ba9d0c/src%2Ftest%2Fui%2Fsuggestions%2Fauxiliary%2Fm2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0d326f06d562c3aedf0727a665e9f2c34ba9d0c/src%2Ftest%2Fui%2Fsuggestions%2Fauxiliary%2Fm2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fauxiliary%2Fm2.rs?ref=c0d326f06d562c3aedf0727a665e9f2c34ba9d0c", "patch": "@@ -0,0 +1,11 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+pub fn bar() {}"}, {"sha": "b3fa5871a82f5c38c8eb642a838bd5570d05bb9a", "filename": "src/test/ui/suggestions/extern-crate-rename.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/c0d326f06d562c3aedf0727a665e9f2c34ba9d0c/src%2Ftest%2Fui%2Fsuggestions%2Fextern-crate-rename.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0d326f06d562c3aedf0727a665e9f2c34ba9d0c/src%2Ftest%2Fui%2Fsuggestions%2Fextern-crate-rename.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fextern-crate-rename.rs?ref=c0d326f06d562c3aedf0727a665e9f2c34ba9d0c", "patch": "@@ -0,0 +1,18 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// aux-build:m1.rs\n+// aux-build:m2.rs\n+\n+\n+extern crate m1;\n+extern crate m2 as m1;\n+\n+fn main() {}"}, {"sha": "c15e238e8b0a3c266f02fedd855ca7093d253bef", "filename": "src/test/ui/suggestions/extern-crate-rename.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/c0d326f06d562c3aedf0727a665e9f2c34ba9d0c/src%2Ftest%2Fui%2Fsuggestions%2Fextern-crate-rename.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c0d326f06d562c3aedf0727a665e9f2c34ba9d0c/src%2Ftest%2Fui%2Fsuggestions%2Fextern-crate-rename.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fextern-crate-rename.stderr?ref=c0d326f06d562c3aedf0727a665e9f2c34ba9d0c", "patch": "@@ -0,0 +1,15 @@\n+error[E0259]: the name `m1` is defined multiple times\n+  --> $DIR/extern-crate-rename.rs:16:1\n+   |\n+15 | extern crate m1;\n+   | ---------------- previous import of the extern crate `m1` here\n+16 | extern crate m2 as m1;\n+   | ^^^^^^^^^^^^^^^^^^^^^^\n+   | |\n+   | `m1` reimported here\n+   | You can use `as` to change the binding name of the import\n+   |\n+   = note: `m1` must be defined only once in the type namespace of this module\n+\n+error: aborting due to previous error\n+"}, {"sha": "d4d567e63c017748b2c606d02d50b0e2829e830a", "filename": "src/tools/compiletest/Cargo.toml", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c0d326f06d562c3aedf0727a665e9f2c34ba9d0c/src%2Ftools%2Fcompiletest%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/c0d326f06d562c3aedf0727a665e9f2c34ba9d0c/src%2Ftools%2Fcompiletest%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2FCargo.toml?ref=c0d326f06d562c3aedf0727a665e9f2c34ba9d0c", "patch": "@@ -11,3 +11,7 @@ getopts = \"0.2\"\n log = \"0.3\"\n rustc-serialize = \"0.3\"\n libc = \"0.2\"\n+\n+[target.'cfg(windows)'.dependencies]\n+miow = \"0.2\"\n+winapi = \"0.2\""}, {"sha": "9fb6a3f5e07539256d110bc58aced4641fa0578a", "filename": "src/tools/compiletest/src/main.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c0d326f06d562c3aedf0727a665e9f2c34ba9d0c/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0d326f06d562c3aedf0727a665e9f2c34ba9d0c/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs?ref=c0d326f06d562c3aedf0727a665e9f2c34ba9d0c", "patch": "@@ -11,10 +11,11 @@\n #![crate_name = \"compiletest\"]\n \n #![feature(test)]\n+#![feature(slice_rotate)]\n \n #![deny(warnings)]\n \n-#[cfg(any(target_os = \"macos\", target_os = \"ios\"))]\n+#[cfg(unix)]\n extern crate libc;\n extern crate test;\n extern crate getopts;\n@@ -47,6 +48,7 @@ pub mod runtest;\n pub mod common;\n pub mod errors;\n mod raise_fd_limit;\n+mod read2;\n \n fn main() {\n     env_logger::init().unwrap();"}, {"sha": "1d8816c7db132d95d78b728e0fdccdf536aaa14c", "filename": "src/tools/compiletest/src/read2.rs", "status": "added", "additions": 208, "deletions": 0, "changes": 208, "blob_url": "https://github.com/rust-lang/rust/blob/c0d326f06d562c3aedf0727a665e9f2c34ba9d0c/src%2Ftools%2Fcompiletest%2Fsrc%2Fread2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0d326f06d562c3aedf0727a665e9f2c34ba9d0c/src%2Ftools%2Fcompiletest%2Fsrc%2Fread2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fread2.rs?ref=c0d326f06d562c3aedf0727a665e9f2c34ba9d0c", "patch": "@@ -0,0 +1,208 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// FIXME: This is a complete copy of `cargo/src/cargo/util/read2.rs`\n+// Consider unify the read2() in libstd, cargo and this to prevent further code duplication.\n+\n+pub use self::imp::read2;\n+\n+#[cfg(not(any(unix, windows)))]\n+mod imp {\n+    use std::io::{self, Read};\n+    use std::process::{ChildStdout, ChildStderr};\n+\n+    pub fn read2(out_pipe: ChildStdout,\n+                 err_pipe: ChildStderr,\n+                 data: &mut FnMut(bool, &mut Vec<u8>, bool)) -> io::Result<()> {\n+        let mut buffer = Vec::new();\n+        out_pipe.read_to_end(&mut buffer)?;\n+        data(true, &mut buffer, true);\n+        buffer.clear();\n+        err_pipe.read_to_end(&mut buffer)?;\n+        data(false, &mut buffer, true);\n+        Ok(())\n+    }\n+}\n+\n+#[cfg(unix)]\n+mod imp {\n+    use std::io::prelude::*;\n+    use std::io;\n+    use std::mem;\n+    use std::os::unix::prelude::*;\n+    use std::process::{ChildStdout, ChildStderr};\n+    use libc;\n+\n+    pub fn read2(mut out_pipe: ChildStdout,\n+                 mut err_pipe: ChildStderr,\n+                 data: &mut FnMut(bool, &mut Vec<u8>, bool)) -> io::Result<()> {\n+        unsafe {\n+            libc::fcntl(out_pipe.as_raw_fd(), libc::F_SETFL, libc::O_NONBLOCK);\n+            libc::fcntl(err_pipe.as_raw_fd(), libc::F_SETFL, libc::O_NONBLOCK);\n+        }\n+\n+        let mut out_done = false;\n+        let mut err_done = false;\n+        let mut out = Vec::new();\n+        let mut err = Vec::new();\n+\n+        let mut fds: [libc::pollfd; 2] = unsafe { mem::zeroed() };\n+        fds[0].fd = out_pipe.as_raw_fd();\n+        fds[0].events = libc::POLLIN;\n+        fds[1].fd = err_pipe.as_raw_fd();\n+        fds[1].events = libc::POLLIN;\n+        loop {\n+            // wait for either pipe to become readable using `select`\n+            let r = unsafe { libc::poll(fds.as_mut_ptr(), 2, -1) };\n+            if r == -1 {\n+                let err = io::Error::last_os_error();\n+                if err.kind() == io::ErrorKind::Interrupted {\n+                    continue\n+                }\n+                return Err(err)\n+            }\n+\n+            // Read as much as we can from each pipe, ignoring EWOULDBLOCK or\n+            // EAGAIN. If we hit EOF, then this will happen because the underlying\n+            // reader will return Ok(0), in which case we'll see `Ok` ourselves. In\n+            // this case we flip the other fd back into blocking mode and read\n+            // whatever's leftover on that file descriptor.\n+            let handle = |res: io::Result<_>| {\n+                match res {\n+                    Ok(_) => Ok(true),\n+                    Err(e) => {\n+                        if e.kind() == io::ErrorKind::WouldBlock {\n+                            Ok(false)\n+                        } else {\n+                            Err(e)\n+                        }\n+                    }\n+                }\n+            };\n+            if !out_done && fds[0].revents != 0 && handle(out_pipe.read_to_end(&mut out))? {\n+                out_done = true;\n+            }\n+            data(true, &mut out, out_done);\n+            if !err_done && fds[1].revents != 0 && handle(err_pipe.read_to_end(&mut err))? {\n+                err_done = true;\n+            }\n+            data(false, &mut err, err_done);\n+\n+            if out_done && err_done {\n+                return Ok(())\n+            }\n+        }\n+    }\n+}\n+\n+#[cfg(windows)]\n+mod imp {\n+    extern crate miow;\n+    extern crate winapi;\n+\n+    use std::io;\n+    use std::os::windows::prelude::*;\n+    use std::process::{ChildStdout, ChildStderr};\n+    use std::slice;\n+\n+    use self::miow::iocp::{CompletionPort, CompletionStatus};\n+    use self::miow::pipe::NamedPipe;\n+    use self::miow::Overlapped;\n+    use self::winapi::ERROR_BROKEN_PIPE;\n+\n+    struct Pipe<'a> {\n+        dst: &'a mut Vec<u8>,\n+        overlapped: Overlapped,\n+        pipe: NamedPipe,\n+        done: bool,\n+    }\n+\n+    pub fn read2(out_pipe: ChildStdout,\n+                 err_pipe: ChildStderr,\n+                 data: &mut FnMut(bool, &mut Vec<u8>, bool)) -> io::Result<()> {\n+        let mut out = Vec::new();\n+        let mut err = Vec::new();\n+\n+        let port = CompletionPort::new(1)?;\n+        port.add_handle(0, &out_pipe)?;\n+        port.add_handle(1, &err_pipe)?;\n+\n+        unsafe {\n+            let mut out_pipe = Pipe::new(out_pipe, &mut out);\n+            let mut err_pipe = Pipe::new(err_pipe, &mut err);\n+\n+            out_pipe.read()?;\n+            err_pipe.read()?;\n+\n+            let mut status = [CompletionStatus::zero(), CompletionStatus::zero()];\n+\n+            while !out_pipe.done || !err_pipe.done {\n+                for status in port.get_many(&mut status, None)? {\n+                    if status.token() == 0 {\n+                        out_pipe.complete(status);\n+                        data(true, out_pipe.dst, out_pipe.done);\n+                        out_pipe.read()?;\n+                    } else {\n+                        err_pipe.complete(status);\n+                        data(false, err_pipe.dst, err_pipe.done);\n+                        err_pipe.read()?;\n+                    }\n+                }\n+            }\n+\n+            Ok(())\n+        }\n+    }\n+\n+    impl<'a> Pipe<'a> {\n+        unsafe fn new<P: IntoRawHandle>(p: P, dst: &'a mut Vec<u8>) -> Pipe<'a> {\n+            Pipe {\n+                dst: dst,\n+                pipe: NamedPipe::from_raw_handle(p.into_raw_handle()),\n+                overlapped: Overlapped::zero(),\n+                done: false,\n+            }\n+        }\n+\n+        unsafe fn read(&mut self) -> io::Result<()> {\n+            let dst = slice_to_end(self.dst);\n+            match self.pipe.read_overlapped(dst, self.overlapped.raw()) {\n+                Ok(_) => Ok(()),\n+                Err(e) => {\n+                    if e.raw_os_error() == Some(ERROR_BROKEN_PIPE as i32) {\n+                        self.done = true;\n+                        Ok(())\n+                    } else {\n+                        Err(e)\n+                    }\n+                }\n+            }\n+        }\n+\n+        unsafe fn complete(&mut self, status: &CompletionStatus) {\n+            let prev = self.dst.len();\n+            self.dst.set_len(prev + status.bytes_transferred() as usize);\n+            if status.bytes_transferred() == 0 {\n+                self.done = true;\n+            }\n+        }\n+    }\n+\n+    unsafe fn slice_to_end(v: &mut Vec<u8>) -> &mut [u8] {\n+        if v.capacity() == 0 {\n+            v.reserve(16);\n+        }\n+        if v.capacity() == v.len() {\n+            v.reserve(1);\n+        }\n+        slice::from_raw_parts_mut(v.as_mut_ptr().offset(v.len() as isize),\n+                                  v.capacity() - v.len())\n+    }\n+}"}, {"sha": "80ca0afe72b50d26c49c4f3c018de8e49dc5edb3", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 85, "deletions": 6, "changes": 91, "blob_url": "https://github.com/rust-lang/rust/blob/c0d326f06d562c3aedf0727a665e9f2c34ba9d0c/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0d326f06d562c3aedf0727a665e9f2c34ba9d0c/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=c0d326f06d562c3aedf0727a665e9f2c34ba9d0c", "patch": "@@ -29,7 +29,7 @@ use std::fmt;\n use std::io::prelude::*;\n use std::io::{self, BufReader};\n use std::path::{Path, PathBuf};\n-use std::process::{Command, Output, ExitStatus, Stdio};\n+use std::process::{Command, Output, ExitStatus, Stdio, Child};\n use std::str;\n \n use extract_gdb_version;\n@@ -1344,12 +1344,14 @@ actual:\\n\\\n         if let Some(input) = input {\n             child.stdin.as_mut().unwrap().write_all(input.as_bytes()).unwrap();\n         }\n-        let Output { status, stdout, stderr } = child.wait_with_output().unwrap();\n+\n+        let Output { status, stdout, stderr } = read2_abbreviated(child)\n+            .expect(\"failed to read output\");\n \n         let result = ProcRes {\n             status,\n-            stdout: String::from_utf8(stdout).unwrap(),\n-            stderr: String::from_utf8(stderr).unwrap(),\n+            stdout: String::from_utf8_lossy(&stdout).into_owned(),\n+            stderr: String::from_utf8_lossy(&stderr).into_owned(),\n             cmdline,\n         };\n \n@@ -1635,7 +1637,9 @@ actual:\\n\\\n         cmd.arg(\"-a\").arg(\"-u\");\n         cmd.arg(filename);\n         cmd.arg(\"-nobanner\");\n-        let output = match cmd.output() {\n+        cmd.stdout(Stdio::piped());\n+        cmd.stderr(Stdio::piped());\n+        let output = match cmd.spawn().and_then(read2_abbreviated) {\n             Ok(output) => output,\n             Err(_) => return,\n         };\n@@ -2095,6 +2099,8 @@ actual:\\n\\\n \n         let mut cmd = Command::new(make);\n         cmd.current_dir(&self.testpaths.file)\n+           .stdout(Stdio::piped())\n+           .stderr(Stdio::piped())\n            .env(\"TARGET\", &self.config.target)\n            .env(\"PYTHON\", &self.config.docck_python)\n            .env(\"S\", src_root)\n@@ -2143,7 +2149,7 @@ actual:\\n\\\n             }\n         }\n \n-        let output = cmd.output().expect(\"failed to spawn `make`\");\n+        let output = cmd.spawn().and_then(read2_abbreviated).expect(\"failed to spawn `make`\");\n         if !output.status.success() {\n             let res = ProcRes {\n                 status: output.status,\n@@ -2536,3 +2542,76 @@ fn nocomment_mir_line(line: &str) -> &str {\n         line\n     }\n }\n+\n+fn read2_abbreviated(mut child: Child) -> io::Result<Output> {\n+    use std::mem::replace;\n+    use read2::read2;\n+\n+    const HEAD_LEN: usize = 160 * 1024;\n+    const TAIL_LEN: usize = 256 * 1024;\n+\n+    enum ProcOutput {\n+        Full(Vec<u8>),\n+        Abbreviated {\n+            head: Vec<u8>,\n+            skipped: usize,\n+            tail: Box<[u8]>,\n+        }\n+    }\n+\n+    impl ProcOutput {\n+        fn extend(&mut self, data: &[u8]) {\n+            let new_self = match *self {\n+                ProcOutput::Full(ref mut bytes) => {\n+                    bytes.extend_from_slice(data);\n+                    let new_len = bytes.len();\n+                    if new_len <= HEAD_LEN + TAIL_LEN {\n+                        return;\n+                    }\n+                    let tail = bytes.split_off(new_len - TAIL_LEN).into_boxed_slice();\n+                    let head = replace(bytes, Vec::new());\n+                    let skipped = new_len - HEAD_LEN - TAIL_LEN;\n+                    ProcOutput::Abbreviated { head, skipped, tail }\n+                }\n+                ProcOutput::Abbreviated { ref mut skipped, ref mut tail, .. } => {\n+                    *skipped += data.len();\n+                    if data.len() <= TAIL_LEN {\n+                        tail[..data.len()].copy_from_slice(data);\n+                        tail.rotate(data.len());\n+                    } else {\n+                        tail.copy_from_slice(&data[(data.len() - TAIL_LEN)..]);\n+                    }\n+                    return;\n+                }\n+            };\n+            *self = new_self;\n+        }\n+\n+        fn into_bytes(self) -> Vec<u8> {\n+            match self {\n+                ProcOutput::Full(bytes) => bytes,\n+                ProcOutput::Abbreviated { mut head, skipped, tail } => {\n+                    write!(&mut head, \"\\n\\n<<<<<< SKIPPED {} BYTES >>>>>>\\n\\n\", skipped).unwrap();\n+                    head.extend_from_slice(&tail);\n+                    head\n+                }\n+            }\n+        }\n+    }\n+\n+    let mut stdout = ProcOutput::Full(Vec::new());\n+    let mut stderr = ProcOutput::Full(Vec::new());\n+\n+    drop(child.stdin.take());\n+    read2(child.stdout.take().unwrap(), child.stderr.take().unwrap(), &mut |is_stdout, data, _| {\n+        if is_stdout { &mut stdout } else { &mut stderr }.extend(data);\n+        data.clear();\n+    })?;\n+    let status = child.wait()?;\n+\n+    Ok(Output {\n+        status,\n+        stdout: stdout.into_bytes(),\n+        stderr: stderr.into_bytes(),\n+    })\n+}\n\\ No newline at end of file"}, {"sha": "f6e42c8dc17b1908a6f5787f12ce82f18baaf65c", "filename": "src/tools/tidy/src/bins.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c0d326f06d562c3aedf0727a665e9f2c34ba9d0c/src%2Ftools%2Ftidy%2Fsrc%2Fbins.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0d326f06d562c3aedf0727a665e9f2c34ba9d0c/src%2Ftools%2Ftidy%2Fsrc%2Fbins.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fbins.rs?ref=c0d326f06d562c3aedf0727a665e9f2c34ba9d0c", "patch": "@@ -31,9 +31,9 @@ pub fn check(path: &Path, bad: &mut bool) {\n     if let Ok(mut file) = fs::File::open(\"/proc/version\") {\n         let mut contents = String::new();\n         file.read_to_string(&mut contents).unwrap();\n-        // Probably on Windows Linux Subsystem, all files will be marked as\n-        // executable, so skip checking.\n-        if contents.contains(\"Microsoft\") {\n+        // Probably on Windows Linux Subsystem or Docker via VirtualBox,\n+        // all files will be marked as executable, so skip checking.\n+        if contents.contains(\"Microsoft\") || contents.contains(\"boot2docker\") {\n             return;\n         }\n     }"}]}