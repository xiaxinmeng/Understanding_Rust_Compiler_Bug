{"sha": "0b3ffcbb0beed7bc0be168dadbff2904b85d3666", "node_id": "C_kwDOAAsO6NoAKDBiM2ZmY2JiMGJlZWQ3YmMwYmUxNjhkYWRiZmYyOTA0Yjg1ZDM2NjY", "commit": {"author": {"name": "Joshua Nelson", "email": "github@jyn.dev", "date": "2022-12-22T16:34:27Z"}, "committer": {"name": "Joshua Nelson", "email": "github@jyn.dev", "date": "2022-12-22T17:50:19Z"}, "message": "Allow building std with cranelift\n\n- Don't pass llvm-specific args when using cranelift\n- Don't use `asm` in compiler_builtins when using cranelift", "tree": {"sha": "2350830f9698879dcc529bc2df67ad5f0342c187", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2350830f9698879dcc529bc2df67ad5f0342c187"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0b3ffcbb0beed7bc0be168dadbff2904b85d3666", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0b3ffcbb0beed7bc0be168dadbff2904b85d3666", "html_url": "https://github.com/rust-lang/rust/commit/0b3ffcbb0beed7bc0be168dadbff2904b85d3666", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0b3ffcbb0beed7bc0be168dadbff2904b85d3666/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2d76a9df5d040e8dfcb23e01fc3847c628d833e4", "url": "https://api.github.com/repos/rust-lang/rust/commits/2d76a9df5d040e8dfcb23e01fc3847c628d833e4", "html_url": "https://github.com/rust-lang/rust/commit/2d76a9df5d040e8dfcb23e01fc3847c628d833e4"}], "stats": {"total": 26, "additions": 20, "deletions": 6}, "files": [{"sha": "1ce48f82e1c9b739bf26fd800d132544706f72d7", "filename": "compiler/rustc_codegen_llvm/src/intrinsic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0b3ffcbb0beed7bc0be168dadbff2904b85d3666/compiler%2Frustc_codegen_llvm%2Fsrc%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b3ffcbb0beed7bc0be168dadbff2904b85d3666/compiler%2Frustc_codegen_llvm%2Fsrc%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fintrinsic.rs?ref=0b3ffcbb0beed7bc0be168dadbff2904b85d3666", "patch": "@@ -567,7 +567,7 @@ fn codegen_msvc_try<'ll>(\n         // module.\n         //\n         // When modifying, make sure that the type_name string exactly matches\n-        // the one used in src/libpanic_unwind/seh.rs.\n+        // the one used in library/panic_unwind/src/seh.rs.\n         let type_info_vtable = bx.declare_global(\"??_7type_info@@6B@\", bx.type_i8p());\n         let type_name = bx.const_bytes(b\"rust_panic\\0\");\n         let type_info ="}, {"sha": "dc02814374be683d55f831b436e95eac43b75669", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0b3ffcbb0beed7bc0be168dadbff2904b85d3666/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b3ffcbb0beed7bc0be168dadbff2904b85d3666/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=0b3ffcbb0beed7bc0be168dadbff2904b85d3666", "patch": "@@ -1853,7 +1853,10 @@ impl<'a> Builder<'a> {\n             };\n \n             if let Some(limit) = limit {\n-                rustflags.arg(&format!(\"-Cllvm-args=-import-instr-limit={}\", limit));\n+                if stage == 0 || self.config.default_codegen_backend().unwrap_or_default() == \"llvm\"\n+                {\n+                    rustflags.arg(&format!(\"-Cllvm-args=-import-instr-limit={}\", limit));\n+                }\n             }\n         }\n "}, {"sha": "79c3f84a6ae137e04c32b4e342ffe8dd1ac525e5", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/0b3ffcbb0beed7bc0be168dadbff2904b85d3666/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b3ffcbb0beed7bc0be168dadbff2904b85d3666/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=0b3ffcbb0beed7bc0be168dadbff2904b85d3666", "patch": "@@ -321,8 +321,15 @@ pub fn std_cargo(builder: &Builder<'_>, target: TargetSelection, stage: u32, car\n         \"\"\n     };\n \n+    let mut features = String::new();\n+\n+    // Cranelift doesn't support `asm`.\n+    if stage != 0 && builder.config.default_codegen_backend().unwrap_or_default() == \"cranelift\" {\n+        features += \" compiler-builtins-no-asm\";\n+    }\n+\n     if builder.no_std(target) == Some(true) {\n-        let mut features = \"compiler-builtins-mem\".to_string();\n+        features += \" compiler-builtins-mem\";\n         if !target.starts_with(\"bpf\") {\n             features.push_str(compiler_builtins_c_feature);\n         }\n@@ -335,7 +342,7 @@ pub fn std_cargo(builder: &Builder<'_>, target: TargetSelection, stage: u32, car\n             .arg(\"--features\")\n             .arg(features);\n     } else {\n-        let mut features = builder.std_features(target);\n+        features += &builder.std_features(target);\n         features.push_str(compiler_builtins_c_feature);\n \n         cargo\n@@ -754,7 +761,7 @@ pub fn rustc_cargo_env(builder: &Builder<'_>, cargo: &mut Cargo, target: TargetS\n         .env(\"CFG_RELEASE_CHANNEL\", &builder.config.channel)\n         .env(\"CFG_VERSION\", builder.rust_version());\n \n-    if let Some(backend) = builder.config.rust_codegen_backends.get(0) {\n+    if let Some(backend) = builder.config.default_codegen_backend() {\n         cargo.env(\"CFG_DEFAULT_CODEGEN_BACKEND\", backend);\n     }\n "}, {"sha": "41c8f17ee1570e85ee19af5804457e4e1d2b3e41", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0b3ffcbb0beed7bc0be168dadbff2904b85d3666/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b3ffcbb0beed7bc0be168dadbff2904b85d3666/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=0b3ffcbb0beed7bc0be168dadbff2904b85d3666", "patch": "@@ -1610,6 +1610,10 @@ impl Config {\n         self.submodules.unwrap_or(rust_info.is_managed_git_subrepository())\n     }\n \n+    pub fn default_codegen_backend(&self) -> Option<Interned<String>> {\n+        self.rust_codegen_backends.get(0).cloned()\n+    }\n+\n     /// Returns the commit to download, or `None` if we shouldn't download CI artifacts.\n     fn download_ci_rustc_commit(&self, download_rustc: Option<StringOrBool>) -> Option<String> {\n         // If `download-rustc` is not set, default to rebuilding."}, {"sha": "63b9ab46e27961bc4d8fead4abe49dcb63bbe9c6", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0b3ffcbb0beed7bc0be168dadbff2904b85d3666/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b3ffcbb0beed7bc0be168dadbff2904b85d3666/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=0b3ffcbb0beed7bc0be168dadbff2904b85d3666", "patch": "@@ -782,7 +782,7 @@ impl Build {\n     /// Gets the space-separated set of activated features for the standard\n     /// library.\n     fn std_features(&self, target: TargetSelection) -> String {\n-        let mut features = \"panic-unwind\".to_string();\n+        let mut features = \" panic-unwind\".to_string();\n \n         match self.config.llvm_libunwind(target) {\n             LlvmLibunwind::InTree => features.push_str(\" llvm-libunwind\"),"}]}