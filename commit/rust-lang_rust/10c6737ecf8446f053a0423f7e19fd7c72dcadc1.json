{"sha": "10c6737ecf8446f053a0423f7e19fd7c72dcadc1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEwYzY3MzdlY2Y4NDQ2ZjA1M2EwNDIzZjdlMTlmZDdjNzJkY2FkYzE=", "commit": {"author": {"name": "Steve Klabnik", "email": "steve@steveklabnik.com", "date": "2015-11-23T21:56:07Z"}, "committer": {"name": "Steve Klabnik", "email": "steve@steveklabnik.com", "date": "2015-11-24T18:25:55Z"}, "message": "Fix up docs for char\n\nPart of https://github.com/rust-lang/rust/issues/29333", "tree": {"sha": "1a27a1bd897a597a11fc0033cab25ee477c76596", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1a27a1bd897a597a11fc0033cab25ee477c76596"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/10c6737ecf8446f053a0423f7e19fd7c72dcadc1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/10c6737ecf8446f053a0423f7e19fd7c72dcadc1", "html_url": "https://github.com/rust-lang/rust/commit/10c6737ecf8446f053a0423f7e19fd7c72dcadc1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/10c6737ecf8446f053a0423f7e19fd7c72dcadc1/comments", "author": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "committer": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8e9a97529d9fd112f338501e68e33bac1c41d1a4", "url": "https://api.github.com/repos/rust-lang/rust/commits/8e9a97529d9fd112f338501e68e33bac1c41d1a4", "html_url": "https://github.com/rust-lang/rust/commit/8e9a97529d9fd112f338501e68e33bac1c41d1a4"}], "stats": {"total": 94, "additions": 80, "deletions": 14}, "files": [{"sha": "d5a2de69c0271c47f7285631ef0ed65cdcf883e2", "filename": "src/librustc_unicode/char.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/10c6737ecf8446f053a0423f7e19fd7c72dcadc1/src%2Flibrustc_unicode%2Fchar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10c6737ecf8446f053a0423f7e19fd7c72dcadc1/src%2Flibrustc_unicode%2Fchar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_unicode%2Fchar.rs?ref=10c6737ecf8446f053a0423f7e19fd7c72dcadc1", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-//! A Unicode scalar value\n+//! Unicode scalar values\n //!\n //! This module provides the `CharExt` trait, as well as its\n //! implementation for the primitive `char` type, in order to allow\n@@ -244,11 +244,12 @@ impl char {\n     /// character, as `char`s.\n     ///\n     /// All characters are escaped with Rust syntax of the form `\\\\u{NNNN}`\n-    /// where `NNNN` is the shortest hexadecimal representation of the code\n-    /// point.\n+    /// where `NNNN` is the shortest hexadecimal representation.\n     ///\n     /// # Examples\n     ///\n+    /// Basic usage:\n+    ///\n     /// ```\n     /// for c in '\u2764'.escape_unicode() {\n     ///     print!(\"{}\", c);\n@@ -384,6 +385,8 @@ impl char {\n     ///\n     /// # Examples\n     ///\n+    /// Basic usage:\n+    ///\n     /// ```\n     /// let n = '\u00df'.len_utf16();\n     /// assert_eq!(n, 1);\n@@ -858,6 +861,8 @@ pub struct DecodeUtf16<I>\n ///\n /// # Examples\n ///\n+/// Basic usage:\n+///\n /// ```\n /// #![feature(decode_utf16)]\n ///"}, {"sha": "aec8b6b1b222d100e324d07d654d00c53ad1f665", "filename": "src/libstd/primitive_docs.rs", "status": "modified", "additions": 72, "deletions": 11, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/10c6737ecf8446f053a0423f7e19fd7c72dcadc1/src%2Flibstd%2Fprimitive_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10c6737ecf8446f053a0423f7e19fd7c72dcadc1/src%2Flibstd%2Fprimitive_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprimitive_docs.rs?ref=10c6737ecf8446f053a0423f7e19fd7c72dcadc1", "patch": "@@ -16,21 +16,82 @@ mod prim_bool { }\n \n #[doc(primitive = \"char\")]\n //\n-/// A Unicode scalar value.\n+/// A character type.\n ///\n-/// A `char` represents a\n-/// *[Unicode scalar\n-/// value](http://www.unicode.org/glossary/#unicode_scalar_value)*, as it can\n-/// contain any Unicode code point except high-surrogate and low-surrogate code\n-/// points.\n+/// The `char` type represents a single character. More specifically, since\n+/// 'character' isn't a well-defined concept in Unicode, `char` is a '[Unicode\n+/// scalar value]', which is similar to, but not the same as, a '[Unicode code\n+/// point]'.\n ///\n-/// As such, only values in the ranges \\[0x0,0xD7FF\\] and \\[0xE000,0x10FFFF\\]\n-/// (inclusive) are allowed. A `char` can always be safely cast to a `u32`;\n-/// however the converse is not always true due to the above range limits\n-/// and, as such, should be performed via the `from_u32` function.\n+/// [Unicode scalar value]: http://www.unicode.org/glossary/#unicode_scalar_value\n+/// [Unicode code point]: http://www.unicode.org/glossary/#code_point\n ///\n-/// *[See also the `std::char` module](char/index.html).*\n+/// This documentation describes a number of methods and trait implementations on the\n+/// `char` type. For technical reasons, there is additional, separate\n+/// documentation in [the `std::char` module](char/index.html) as well.\n ///\n+/// # Representation\n+///\n+/// `char` is always four bytes in size. This is a different representation than\n+/// a given character would have as part of a [`String`], for example:\n+///\n+/// ```\n+/// let v = vec!['h', 'e', 'l', 'l', 'o'];\n+///\n+/// // five elements times four bytes for each element\n+/// assert_eq!(20, v.len() * std::mem::size_of::<char>());\n+///\n+/// let s = String::from(\"hello\");\n+///\n+/// // five elements times one byte per element\n+/// assert_eq!(5, s.len() * std::mem::size_of::<u8>());\n+/// ```\n+///\n+/// [`String`]: string/struct.String.html\n+///\n+/// As always, remember that a human intuition for 'character' may not map to\n+/// Unicode's definitions. For example, emoji symbols such as '\u2764\ufe0f' are more than\n+/// one byte; \u2764\ufe0f in particular is six:\n+///\n+/// ```\n+/// let s = String::from(\"\u2764\ufe0f\");\n+///\n+/// // six bytes times one byte for each element\n+/// assert_eq!(6, s.len() * std::mem::size_of::<u8>());\n+/// ```\n+///\n+/// This also means it won't fit into a `char`, and so trying to create a\n+/// literal with `let heart = '\u2764\ufe0f';` gives an error:\n+///\n+/// ```text\n+/// error: character literal may only contain one codepoint: '\u2764\n+/// let heart = '\u2764\ufe0f';\n+///             ^~\n+/// ```\n+///\n+/// Another implication of this is that if you want to do per-`char`acter\n+/// processing, it can end up using a lot more memory:\n+///\n+/// ```\n+/// let s = String::from(\"love: \u2764\ufe0f\");\n+/// let v: Vec<char> = s.chars().collect();\n+///\n+/// assert_eq!(12, s.len() * std::mem::size_of::<u8>());\n+/// assert_eq!(32, v.len() * std::mem::size_of::<char>());\n+/// ```\n+///\n+/// Or may give you results you may not expect:\n+///\n+/// ```\n+/// let s = String::from(\"\u2764\ufe0f\");\n+///\n+/// let mut iter = s.chars();\n+///\n+/// // we get two chars out of a single \u2764\ufe0f\n+/// assert_eq!(Some('\\u{2764}'), iter.next());\n+/// assert_eq!(Some('\\u{fe0f}'), iter.next());\n+/// assert_eq!(None, iter.next());\n+/// ```\n mod prim_char { }\n \n #[doc(primitive = \"unit\")]"}]}