{"sha": "7275750e42103b5877faeb0fcaff30c9f8a92ea1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcyNzU3NTBlNDIxMDNiNTg3N2ZhZWIwZmNhZmYzMGM5ZjhhOTJlYTE=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-03-03T22:05:38Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-03-03T22:05:38Z"}, "message": "Merge #7866\n\n7866: Complete `while let` r=Veykril a=Veykril\n\nbors r+\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>", "tree": {"sha": "a5f4e9e1b30beed2f7ce1fdb59b0b66f3ce3a189", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a5f4e9e1b30beed2f7ce1fdb59b0b66f3ce3a189"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7275750e42103b5877faeb0fcaff30c9f8a92ea1", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgQAgyCRBK7hj4Ov3rIwAAdHIIADH9mYIKIhB8OLODRqv3pqUF\nbGWeoggU/PvGBTorzcnXwz6lSOAU96mDXVGuoiLffUtWEPdKiFKvGGtGBbUkeZ3W\nWOcvN0A0A0pIzXZvpfec+ZE2jKUDE4ThNjvSrX5zxAw6umIk0ce8iuA/kvX7D1x+\n5VdRvz4WNgPKGgjUcAlc4FvlsSrRiL53OR4ipsC1sUuGU+DY17eQ47ZWSoBpziAj\nJtm6S4DGLDIBAYTQI0e9bu/Lj/uPxRyy0RlA8kvszve9dxcArHvSBPQBAaAAei3R\n3V3R4vvJPX5ZH6mYRDuvGuk9Td+Quu7euqbM+yOGjeq4X4WYOWmsSzoNa3yHAjc=\n=R1lX\n-----END PGP SIGNATURE-----\n", "payload": "tree a5f4e9e1b30beed2f7ce1fdb59b0b66f3ce3a189\nparent d0fa7abc5044471b951149aa35244620db847ff9\nparent 02e9440e2332beab2647bf61491c788ab84aa4df\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1614809138 +0000\ncommitter GitHub <noreply@github.com> 1614809138 +0000\n\nMerge #7866\n\n7866: Complete `while let` r=Veykril a=Veykril\n\nbors r+\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7275750e42103b5877faeb0fcaff30c9f8a92ea1", "html_url": "https://github.com/rust-lang/rust/commit/7275750e42103b5877faeb0fcaff30c9f8a92ea1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7275750e42103b5877faeb0fcaff30c9f8a92ea1/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d0fa7abc5044471b951149aa35244620db847ff9", "url": "https://api.github.com/repos/rust-lang/rust/commits/d0fa7abc5044471b951149aa35244620db847ff9", "html_url": "https://github.com/rust-lang/rust/commit/d0fa7abc5044471b951149aa35244620db847ff9"}, {"sha": "02e9440e2332beab2647bf61491c788ab84aa4df", "url": "https://api.github.com/repos/rust-lang/rust/commits/02e9440e2332beab2647bf61491c788ab84aa4df", "html_url": "https://github.com/rust-lang/rust/commit/02e9440e2332beab2647bf61491c788ab84aa4df"}], "stats": {"total": 77, "additions": 45, "deletions": 32}, "files": [{"sha": "cb05e85fce22dd738b24de769cf7b66de86ba3a1", "filename": "crates/ide_completion/src/completions/attribute.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7275750e42103b5877faeb0fcaff30c9f8a92ea1/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7275750e42103b5877faeb0fcaff30c9f8a92ea1/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute.rs?ref=7275750e42103b5877faeb0fcaff30c9f8a92ea1", "patch": "@@ -39,7 +39,8 @@ pub(crate) fn complete_attribute(acc: &mut Completions, ctx: &CompletionContext)\n }\n \n fn complete_attribute_start(acc: &mut Completions, ctx: &CompletionContext, attribute: &ast::Attr) {\n-    for attr_completion in ATTRIBUTES {\n+    let is_inner = attribute.kind() == ast::AttrKind::Inner;\n+    for attr_completion in ATTRIBUTES.iter().filter(|compl| is_inner || !compl.prefer_inner) {\n         let mut item = CompletionItem::new(\n             CompletionKind::Attribute,\n             ctx.source_range(),"}, {"sha": "1bcc8727fdd51e55794a5076375a9ce4d5f65ea8", "filename": "crates/ide_completion/src/completions/fn_param.rs", "status": "modified", "additions": 12, "deletions": 15, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/7275750e42103b5877faeb0fcaff30c9f8a92ea1/crates%2Fide_completion%2Fsrc%2Fcompletions%2Ffn_param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7275750e42103b5877faeb0fcaff30c9f8a92ea1/crates%2Fide_completion%2Fsrc%2Fcompletions%2Ffn_param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Ffn_param.rs?ref=7275750e42103b5877faeb0fcaff30c9f8a92ea1", "patch": "@@ -25,9 +25,12 @@ pub(crate) fn complete_fn_param(acc: &mut Completions, ctx: &CompletionContext)\n             return;\n         }\n         func.param_list().into_iter().flat_map(|it| it.params()).for_each(|param| {\n-            let text = param.syntax().text().to_string();\n-            params.entry(text).or_insert(param);\n-        })\n+            if let Some(pat) = param.pat() {\n+                let text = param.syntax().text().to_string();\n+                let lookup = pat.syntax().text().to_string();\n+                params.entry(text).or_insert(lookup);\n+            }\n+        });\n     };\n \n     for node in ctx.token.parent().ancestors() {\n@@ -50,18 +53,12 @@ pub(crate) fn complete_fn_param(acc: &mut Completions, ctx: &CompletionContext)\n         };\n     }\n \n-    params\n-        .into_iter()\n-        .filter_map(|(label, param)| {\n-            let lookup = param.pat()?.syntax().text().to_string();\n-            Some((label, lookup))\n-        })\n-        .for_each(|(label, lookup)| {\n-            CompletionItem::new(CompletionKind::Magic, ctx.source_range(), label)\n-                .kind(CompletionItemKind::Binding)\n-                .lookup_by(lookup)\n-                .add_to(acc)\n-        });\n+    params.into_iter().for_each(|(label, lookup)| {\n+        CompletionItem::new(CompletionKind::Magic, ctx.source_range(), label)\n+            .kind(CompletionItemKind::Binding)\n+            .lookup_by(lookup)\n+            .add_to(acc)\n+    });\n }\n \n #[cfg(test)]"}, {"sha": "03c6dd4547699d3c0d263f2140e871e824156c50", "filename": "crates/ide_completion/src/completions/keyword.rs", "status": "modified", "additions": 28, "deletions": 7, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/7275750e42103b5877faeb0fcaff30c9f8a92ea1/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fkeyword.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7275750e42103b5877faeb0fcaff30c9f8a92ea1/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fkeyword.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fkeyword.rs?ref=7275750e42103b5877faeb0fcaff30c9f8a92ea1", "patch": "@@ -1,5 +1,7 @@\n //! Completes keywords.\n \n+use std::iter;\n+\n use syntax::SyntaxKind;\n use test_utils::mark;\n \n@@ -19,10 +21,14 @@ pub(crate) fn complete_use_tree_keyword(acc: &mut Completions, ctx: &CompletionC\n         CompletionItem::new(CompletionKind::Keyword, source_range, \"self\")\n             .kind(CompletionItemKind::Keyword)\n             .add_to(acc);\n-        CompletionItem::new(CompletionKind::Keyword, source_range, \"super::\")\n-            .kind(CompletionItemKind::Keyword)\n-            .insert_text(\"super::\")\n-            .add_to(acc);\n+        if iter::successors(ctx.path_qual.clone(), |p| p.qualifier())\n+            .all(|p| p.segment().and_then(|s| s.super_token()).is_some())\n+        {\n+            CompletionItem::new(CompletionKind::Keyword, source_range, \"super::\")\n+                .kind(CompletionItemKind::Keyword)\n+                .insert_text(\"super::\")\n+                .add_to(acc);\n+        }\n     }\n \n     // Suggest .await syntax for types that implement Future trait\n@@ -85,6 +91,7 @@ pub(crate) fn complete_expr_keyword(acc: &mut Completions, ctx: &CompletionConte\n     if ctx.is_expr {\n         add_keyword(ctx, acc, \"match\", \"match $0 {}\");\n         add_keyword(ctx, acc, \"while\", \"while $0 {}\");\n+        add_keyword(ctx, acc, \"while let\", \"while let $1 = $0 {}\");\n         add_keyword(ctx, acc, \"loop\", \"loop {$0}\");\n         add_keyword(ctx, acc, \"if\", \"if $0 {}\");\n         add_keyword(ctx, acc, \"if let\", \"if let $1 = $0 {}\");\n@@ -204,8 +211,16 @@ mod tests {\n             \"#]],\n         );\n \n+        // FIXME: `self` shouldn't be shown here and the check below\n         check(\n             r\"use a::$0\",\n+            expect![[r#\"\n+            kw self\n+        \"#]],\n+        );\n+\n+        check(\n+            r\"use super::$0\",\n             expect![[r#\"\n                 kw self\n                 kw super::\n@@ -215,9 +230,8 @@ mod tests {\n         check(\n             r\"use a::{b, $0}\",\n             expect![[r#\"\n-                kw self\n-                kw super::\n-            \"#]],\n+            kw self\n+        \"#]],\n         );\n     }\n \n@@ -256,6 +270,7 @@ mod tests {\n                 kw trait\n                 kw match\n                 kw while\n+                kw while let\n                 kw loop\n                 kw if\n                 kw if let\n@@ -283,6 +298,7 @@ mod tests {\n                 kw trait\n                 kw match\n                 kw while\n+                kw while let\n                 kw loop\n                 kw if\n                 kw if let\n@@ -310,6 +326,7 @@ mod tests {\n                 kw trait\n                 kw match\n                 kw while\n+                kw while let\n                 kw loop\n                 kw if\n                 kw if let\n@@ -344,6 +361,7 @@ fn quux() -> i32 {\n             expect![[r#\"\n                 kw match\n                 kw while\n+                kw while let\n                 kw loop\n                 kw if\n                 kw if let\n@@ -393,6 +411,7 @@ fn quux() -> i32 {\n                 kw trait\n                 kw match\n                 kw while\n+                kw while let\n                 kw loop\n                 kw if\n                 kw if let\n@@ -552,6 +571,7 @@ pub mod future {\n             expect![[r#\"\n                 kw match\n                 kw while\n+                kw while let\n                 kw loop\n                 kw if\n                 kw if let\n@@ -611,6 +631,7 @@ fn foo() {\n             expect![[r#\"\n                 kw match\n                 kw while\n+                kw while let\n                 kw loop\n                 kw if\n                 kw if let"}, {"sha": "72fb757b1687c471e690dcc706dde63c3b4933f1", "filename": "crates/ide_completion/src/completions/qualified_path.rs", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7275750e42103b5877faeb0fcaff30c9f8a92ea1/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fqualified_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7275750e42103b5877faeb0fcaff30c9f8a92ea1/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fqualified_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fqualified_path.rs?ref=7275750e42103b5877faeb0fcaff30c9f8a92ea1", "patch": "@@ -81,9 +81,7 @@ pub(crate) fn complete_qualified_path(acc: &mut Completions, ctx: &CompletionCon\n                         return None;\n                     }\n                     match item {\n-                        hir::AssocItem::Function(func) => {\n-                            acc.add_function(ctx, func, None);\n-                        }\n+                        hir::AssocItem::Function(func) => acc.add_function(ctx, func, None),\n                         hir::AssocItem::Const(ct) => acc.add_const(ctx, ct),\n                         hir::AssocItem::TypeAlias(ty) => acc.add_type_alias(ctx, ty),\n                     }\n@@ -110,9 +108,7 @@ pub(crate) fn complete_qualified_path(acc: &mut Completions, ctx: &CompletionCon\n                     continue;\n                 }\n                 match item {\n-                    hir::AssocItem::Function(func) => {\n-                        acc.add_function(ctx, func, None);\n-                    }\n+                    hir::AssocItem::Function(func) => acc.add_function(ctx, func, None),\n                     hir::AssocItem::Const(ct) => acc.add_const(ctx, ct),\n                     hir::AssocItem::TypeAlias(ty) => acc.add_type_alias(ctx, ty),\n                 }\n@@ -143,9 +139,7 @@ pub(crate) fn complete_qualified_path(acc: &mut Completions, ctx: &CompletionCon\n                     // them.\n                     if seen.insert(item) {\n                         match item {\n-                            hir::AssocItem::Function(func) => {\n-                                acc.add_function(ctx, func, None);\n-                            }\n+                            hir::AssocItem::Function(func) => acc.add_function(ctx, func, None),\n                             hir::AssocItem::Const(ct) => acc.add_const(ctx, ct),\n                             hir::AssocItem::TypeAlias(ty) => acc.add_type_alias(ctx, ty),\n                         }"}]}