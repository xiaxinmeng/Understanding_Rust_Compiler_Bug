{"sha": "879afd5116a77baea6cdb76029e878bb24eba203", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg3OWFmZDUxMTZhNzdiYWVhNmNkYjc2MDI5ZTg3OGJiMjRlYmEyMDM=", "commit": {"author": {"name": "Lzu Tao", "email": "taolzu@gmail.com", "date": "2020-07-12T16:47:15Z"}, "committer": {"name": "Lzu Tao", "email": "taolzu@gmail.com", "date": "2020-07-12T16:47:15Z"}, "message": "process_unix: prefer i32::*_be_bytes over manually shifting bytes", "tree": {"sha": "a324c9277a831c7adc5066e73e75bd6f32357e9a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a324c9277a831c7adc5066e73e75bd6f32357e9a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/879afd5116a77baea6cdb76029e878bb24eba203", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/879afd5116a77baea6cdb76029e878bb24eba203", "html_url": "https://github.com/rust-lang/rust/commit/879afd5116a77baea6cdb76029e878bb24eba203", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/879afd5116a77baea6cdb76029e878bb24eba203/comments", "author": {"login": "tesuji", "id": 15225902, "node_id": "MDQ6VXNlcjE1MjI1OTAy", "avatar_url": "https://avatars.githubusercontent.com/u/15225902?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tesuji", "html_url": "https://github.com/tesuji", "followers_url": "https://api.github.com/users/tesuji/followers", "following_url": "https://api.github.com/users/tesuji/following{/other_user}", "gists_url": "https://api.github.com/users/tesuji/gists{/gist_id}", "starred_url": "https://api.github.com/users/tesuji/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tesuji/subscriptions", "organizations_url": "https://api.github.com/users/tesuji/orgs", "repos_url": "https://api.github.com/users/tesuji/repos", "events_url": "https://api.github.com/users/tesuji/events{/privacy}", "received_events_url": "https://api.github.com/users/tesuji/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tesuji", "id": 15225902, "node_id": "MDQ6VXNlcjE1MjI1OTAy", "avatar_url": "https://avatars.githubusercontent.com/u/15225902?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tesuji", "html_url": "https://github.com/tesuji", "followers_url": "https://api.github.com/users/tesuji/followers", "following_url": "https://api.github.com/users/tesuji/following{/other_user}", "gists_url": "https://api.github.com/users/tesuji/gists{/gist_id}", "starred_url": "https://api.github.com/users/tesuji/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tesuji/subscriptions", "organizations_url": "https://api.github.com/users/tesuji/orgs", "repos_url": "https://api.github.com/users/tesuji/repos", "events_url": "https://api.github.com/users/tesuji/events{/privacy}", "received_events_url": "https://api.github.com/users/tesuji/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9d09331e00b02f81c714b0c41ce3a38380dd36a2", "url": "https://api.github.com/repos/rust-lang/rust/commits/9d09331e00b02f81c714b0c41ce3a38380dd36a2", "html_url": "https://github.com/rust-lang/rust/commit/9d09331e00b02f81c714b0c41ce3a38380dd36a2"}], "stats": {"total": 26, "additions": 12, "deletions": 14}, "files": [{"sha": "de35fe0521d03a8a3cefc8597732868048eca5b7", "filename": "src/libstd/sys/unix/process/process_unix.rs", "status": "modified", "additions": 12, "deletions": 14, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/879afd5116a77baea6cdb76029e878bb24eba203/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fprocess_unix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/879afd5116a77baea6cdb76029e878bb24eba203/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fprocess_unix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fprocess_unix.rs?ref=879afd5116a77baea6cdb76029e878bb24eba203", "patch": "@@ -1,3 +1,4 @@\n+use crate::convert::TryInto;\n use crate::fmt;\n use crate::io::{self, Error, ErrorKind};\n use crate::ptr;\n@@ -17,7 +18,7 @@ impl Command {\n         default: Stdio,\n         needs_stdin: bool,\n     ) -> io::Result<(Process, StdioPipes)> {\n-        const CLOEXEC_MSG_FOOTER: &[u8] = b\"NOEX\";\n+        const CLOEXEC_MSG_FOOTER: [u8; 4] = *b\"NOEX\";\n \n         let envp = self.capture_env();\n \n@@ -52,11 +53,12 @@ impl Command {\n                     drop(input);\n                     let Err(err) = self.do_exec(theirs, envp.as_ref());\n                     let errno = err.raw_os_error().unwrap_or(libc::EINVAL) as u32;\n+                    let errno = errno.to_be_bytes();\n                     let bytes = [\n-                        (errno >> 24) as u8,\n-                        (errno >> 16) as u8,\n-                        (errno >> 8) as u8,\n-                        (errno >> 0) as u8,\n+                        errno[0],\n+                        errno[1],\n+                        errno[2],\n+                        errno[3],\n                         CLOEXEC_MSG_FOOTER[0],\n                         CLOEXEC_MSG_FOOTER[1],\n                         CLOEXEC_MSG_FOOTER[2],\n@@ -81,12 +83,13 @@ impl Command {\n             match input.read(&mut bytes) {\n                 Ok(0) => return Ok((p, ours)),\n                 Ok(8) => {\n+                    let (errno, footer) = bytes.split_at(4);\n                     assert!(\n-                        combine(CLOEXEC_MSG_FOOTER) == combine(&bytes[4..8]),\n+                        combine(CLOEXEC_MSG_FOOTER) == combine(footer.try_into().unwrap()),\n                         \"Validation on the CLOEXEC pipe failed: {:?}\",\n                         bytes\n                     );\n-                    let errno = combine(&bytes[0..4]);\n+                    let errno = combine(errno.try_into().unwrap());\n                     assert!(p.wait().is_ok(), \"wait() should either return Ok or panic\");\n                     return Err(Error::from_raw_os_error(errno));\n                 }\n@@ -103,13 +106,8 @@ impl Command {\n             }\n         }\n \n-        fn combine(arr: &[u8]) -> i32 {\n-            let a = arr[0] as u32;\n-            let b = arr[1] as u32;\n-            let c = arr[2] as u32;\n-            let d = arr[3] as u32;\n-\n-            ((a << 24) | (b << 16) | (c << 8) | (d << 0)) as i32\n+        fn combine(arr: [u8; 4]) -> i32 {\n+            i32::from_be_bytes(arr)\n         }\n     }\n "}]}