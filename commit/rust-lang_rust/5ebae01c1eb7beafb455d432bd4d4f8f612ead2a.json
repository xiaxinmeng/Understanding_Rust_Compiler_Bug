{"sha": "5ebae01c1eb7beafb455d432bd4d4f8f612ead2a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVlYmFlMDFjMWViN2JlYWZiNDU1ZDQzMmJkNGQ0ZjhmNjEyZWFkMmE=", "commit": {"author": {"name": "Corey Farwell", "email": "coreyf@rwell.org", "date": "2018-08-27T13:49:54Z"}, "committer": {"name": "Corey Farwell", "email": "coreyf@rwell.org", "date": "2018-08-29T04:21:29Z"}, "message": "New lint: Suggest `ptr.add([usize])` over `ptr.offset([usize] as isize)`.\n\nFirst part of #3047.", "tree": {"sha": "fb8e600d50cdaaf97893c777a32c9b35a51e2b95", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fb8e600d50cdaaf97893c777a32c9b35a51e2b95"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5ebae01c1eb7beafb455d432bd4d4f8f612ead2a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5ebae01c1eb7beafb455d432bd4d4f8f612ead2a", "html_url": "https://github.com/rust-lang/rust/commit/5ebae01c1eb7beafb455d432bd4d4f8f612ead2a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5ebae01c1eb7beafb455d432bd4d4f8f612ead2a/comments", "author": {"login": "frewsxcv", "id": 416575, "node_id": "MDQ6VXNlcjQxNjU3NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/416575?v=4", "gravatar_id": "", "url": "https://api.github.com/users/frewsxcv", "html_url": "https://github.com/frewsxcv", "followers_url": "https://api.github.com/users/frewsxcv/followers", "following_url": "https://api.github.com/users/frewsxcv/following{/other_user}", "gists_url": "https://api.github.com/users/frewsxcv/gists{/gist_id}", "starred_url": "https://api.github.com/users/frewsxcv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/frewsxcv/subscriptions", "organizations_url": "https://api.github.com/users/frewsxcv/orgs", "repos_url": "https://api.github.com/users/frewsxcv/repos", "events_url": "https://api.github.com/users/frewsxcv/events{/privacy}", "received_events_url": "https://api.github.com/users/frewsxcv/received_events", "type": "User", "site_admin": false}, "committer": {"login": "frewsxcv", "id": 416575, "node_id": "MDQ6VXNlcjQxNjU3NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/416575?v=4", "gravatar_id": "", "url": "https://api.github.com/users/frewsxcv", "html_url": "https://github.com/frewsxcv", "followers_url": "https://api.github.com/users/frewsxcv/followers", "following_url": "https://api.github.com/users/frewsxcv/following{/other_user}", "gists_url": "https://api.github.com/users/frewsxcv/gists{/gist_id}", "starred_url": "https://api.github.com/users/frewsxcv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/frewsxcv/subscriptions", "organizations_url": "https://api.github.com/users/frewsxcv/orgs", "repos_url": "https://api.github.com/users/frewsxcv/repos", "events_url": "https://api.github.com/users/frewsxcv/events{/privacy}", "received_events_url": "https://api.github.com/users/frewsxcv/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d99cea0f16633556871a59500c610782b07233b9", "url": "https://api.github.com/repos/rust-lang/rust/commits/d99cea0f16633556871a59500c610782b07233b9", "html_url": "https://github.com/rust-lang/rust/commit/d99cea0f16633556871a59500c610782b07233b9"}], "stats": {"total": 158, "additions": 158, "deletions": 0}, "files": [{"sha": "ccb849a0c06bdae9559c1bb7dab1ec8e60f7cb8a", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5ebae01c1eb7beafb455d432bd4d4f8f612ead2a/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ebae01c1eb7beafb455d432bd4d4f8f612ead2a/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=5ebae01c1eb7beafb455d432bd4d4f8f612ead2a", "patch": "@@ -142,6 +142,7 @@ pub mod panic_unimplemented;\n pub mod partialeq_ne_impl;\n pub mod precedence;\n pub mod ptr;\n+pub mod ptr_offset_with_cast;\n pub mod question_mark;\n pub mod ranges;\n pub mod redundant_field_names;\n@@ -408,6 +409,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry<'_>, conf: &Conf) {\n     reg.register_late_lint_pass(box default_trait_access::DefaultTraitAccess);\n     reg.register_late_lint_pass(box indexing_slicing::IndexingSlicing);\n     reg.register_late_lint_pass(box non_copy_const::NonCopyConst);\n+    reg.register_late_lint_pass(box ptr_offset_with_cast::Pass);\n \n     reg.register_lint_group(\"clippy_restriction\", vec![\n         arithmetic::FLOAT_ARITHMETIC,\n@@ -631,6 +633,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry<'_>, conf: &Conf) {\n         ptr::CMP_NULL,\n         ptr::MUT_FROM_REF,\n         ptr::PTR_ARG,\n+        ptr_offset_with_cast::PTR_OFFSET_WITH_CAST,\n         question_mark::QUESTION_MARK,\n         ranges::ITERATOR_STEP_BY_ZERO,\n         ranges::RANGE_MINUS_ONE,\n@@ -755,6 +758,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry<'_>, conf: &Conf) {\n         panic_unimplemented::PANIC_PARAMS,\n         ptr::CMP_NULL,\n         ptr::PTR_ARG,\n+        ptr_offset_with_cast::PTR_OFFSET_WITH_CAST,\n         question_mark::QUESTION_MARK,\n         redundant_field_names::REDUNDANT_FIELD_NAMES,\n         regex::REGEX_MACRO,"}, {"sha": "4a6bc8215ef6c0a8c6371da12e8a14cfaee63040", "filename": "clippy_lints/src/ptr_offset_with_cast.rs", "status": "added", "additions": 130, "deletions": 0, "changes": 130, "blob_url": "https://github.com/rust-lang/rust/blob/5ebae01c1eb7beafb455d432bd4d4f8f612ead2a/clippy_lints%2Fsrc%2Fptr_offset_with_cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ebae01c1eb7beafb455d432bd4d4f8f612ead2a/clippy_lints%2Fsrc%2Fptr_offset_with_cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fptr_offset_with_cast.rs?ref=5ebae01c1eb7beafb455d432bd4d4f8f612ead2a", "patch": "@@ -0,0 +1,130 @@\n+use rustc::{declare_lint, hir, lint, lint_array, ty};\n+use syntax::ast;\n+use crate::utils;\n+\n+/// **What it does:** Checks for usage of the `offset` pointer method with a `usize` casted to an\n+/// `isize`.\n+///\n+/// **Why is this bad?** If we\u2019re always increasing the pointer address, we can avoid the numeric\n+/// cast by using the `add` method instead.\n+///\n+/// **Known problems:** None\n+///\n+/// **Example:**\n+/// ```rust\n+/// let vec = vec![b'a', b'b', b'c'];\n+/// let ptr = vec.as_ptr();\n+/// let offset = 1_usize;\n+///\n+/// unsafe { ptr.offset(offset as isize); }\n+/// ```\n+///\n+/// Could be written:\n+///\n+/// ```rust\n+/// let vec = vec![b'a', b'b', b'c'];\n+/// let ptr = vec.as_ptr();\n+/// let offset = 1_usize;\n+///\n+/// unsafe { ptr.add(offset); }\n+/// ```\n+declare_clippy_lint! {\n+    pub PTR_OFFSET_WITH_CAST,\n+    style,\n+    \"uneeded pointer offset cast\"\n+}\n+\n+#[derive(Copy, Clone, Debug)]\n+pub struct Pass;\n+\n+impl lint::LintPass for Pass {\n+    fn get_lints(&self) -> lint::LintArray {\n+        lint_array!(PTR_OFFSET_WITH_CAST)\n+    }\n+}\n+\n+impl<'a, 'tcx> lint::LateLintPass<'a, 'tcx> for Pass {\n+    fn check_expr(&mut self, cx: &lint::LateContext<'a, 'tcx>, expr: &'tcx hir::Expr) {\n+        // Check if the expressions is a ptr.offset method call\n+        let [receiver_expr, arg_expr] = match expr_as_ptr_offset_call(cx, expr) {\n+            Some(call_arg) => call_arg,\n+            None => return,\n+        };\n+\n+        // Check if the parameter to ptr.offset is a cast from usize to isize\n+        let cast_lhs_expr = match expr_as_cast_from_usize(cx, arg_expr) {\n+            Some(cast_lhs_expr) => cast_lhs_expr,\n+            None => return,\n+        };\n+\n+        utils::span_lint_and_sugg(\n+            cx,\n+            PTR_OFFSET_WITH_CAST,\n+            expr.span,\n+            \"use of `offset` with a `usize` casted to an `isize`\",\n+            \"try\",\n+            build_suggestion(cx, receiver_expr, cast_lhs_expr),\n+        );\n+    }\n+}\n+\n+// If the given expression is a cast from a usize, return the lhs of the cast\n+fn expr_as_cast_from_usize<'a, 'tcx>(\n+    cx: &lint::LateContext<'a, 'tcx>,\n+    expr: &'tcx hir::Expr,\n+) -> Option<&'tcx hir::Expr> {\n+    if let hir::ExprKind::Cast(ref cast_lhs_expr, _) = expr.node {\n+        if is_expr_ty_usize(cx, &cast_lhs_expr) {\n+            return Some(cast_lhs_expr);\n+        }\n+    }\n+    None\n+}\n+\n+// If the given expression is a ptr::offset method call, return the receiver and the arg of the\n+// method call.\n+fn expr_as_ptr_offset_call<'a, 'tcx>(\n+    cx: &lint::LateContext<'a, 'tcx>,\n+    expr: &'tcx hir::Expr,\n+) -> Option<[&'tcx hir::Expr; 2]> {\n+    if let hir::ExprKind::MethodCall(ref path_segment, _, ref args) = expr.node {\n+        if path_segment.ident.name == \"offset\" && is_expr_ty_raw_ptr(cx, &args[0]) {\n+            return Some([&args[0], &args[1]]);\n+        }\n+    }\n+    None\n+}\n+\n+// Is the type of the expression a usize?\n+fn is_expr_ty_usize<'a, 'tcx>(\n+    cx: &lint::LateContext<'a, 'tcx>,\n+    expr: &hir::Expr,\n+) -> bool {\n+    cx.tables.expr_ty(expr).sty == ty::TyKind::Uint(ast::UintTy::Usize)\n+}\n+\n+// Is the type of the expression a raw pointer?\n+fn is_expr_ty_raw_ptr<'a, 'tcx>(\n+    cx: &lint::LateContext<'a, 'tcx>,\n+    expr: &hir::Expr,\n+) -> bool {\n+    if let ty::RawPtr(..) = cx.tables.expr_ty(expr).sty {\n+        true\n+    } else {\n+        false\n+    }\n+}\n+\n+fn build_suggestion<'a, 'tcx>(\n+    cx: &lint::LateContext<'a, 'tcx>,\n+    receiver_expr: &hir::Expr,\n+    cast_lhs_expr: &hir::Expr,\n+) -> String {\n+    match (\n+        utils::snippet_opt(cx, receiver_expr.span),\n+        utils::snippet_opt(cx, cast_lhs_expr.span)\n+    ) {\n+        (Some(receiver), Some(cast_lhs)) => format!(\"{}.add({})\", receiver, cast_lhs),\n+        _ => String::new(),\n+    }\n+}"}, {"sha": "947021aaf8e127c43f4068d5da102ded0dbc24d7", "filename": "tests/ui/ptr_offset_with_cast.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/5ebae01c1eb7beafb455d432bd4d4f8f612ead2a/tests%2Fui%2Fptr_offset_with_cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ebae01c1eb7beafb455d432bd4d4f8f612ead2a/tests%2Fui%2Fptr_offset_with_cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fptr_offset_with_cast.rs?ref=5ebae01c1eb7beafb455d432bd4d4f8f612ead2a", "patch": "@@ -0,0 +1,14 @@\n+fn main() {\n+    let vec = vec![b'a', b'b', b'c'];\n+    let ptr = vec.as_ptr();\n+\n+    let offset_u8 = 1_u8;\n+    let offset_usize = 1_usize;\n+    let offset_isize = 1_isize;\n+\n+    unsafe {\n+        ptr.offset(offset_usize as isize);\n+        ptr.offset(offset_isize as isize);\n+        ptr.offset(offset_u8 as isize);\n+    }\n+}"}, {"sha": "1658f5f53664c074d26171eae748f0afa79cdd0a", "filename": "tests/ui/ptr_offset_with_cast.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5ebae01c1eb7beafb455d432bd4d4f8f612ead2a/tests%2Fui%2Fptr_offset_with_cast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5ebae01c1eb7beafb455d432bd4d4f8f612ead2a/tests%2Fui%2Fptr_offset_with_cast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fptr_offset_with_cast.stderr?ref=5ebae01c1eb7beafb455d432bd4d4f8f612ead2a", "patch": "@@ -0,0 +1,10 @@\n+error: use of `offset` with a `usize` casted to an `isize`\n+  --> $DIR/ptr_offset_with_cast.rs:10:9\n+   |\n+10 |         ptr.offset(offset_usize as isize);\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `ptr.add(offset_usize)`\n+   |\n+   = note: `-D ptr-offset-with-cast` implied by `-D warnings`\n+\n+error: aborting due to previous error\n+"}]}