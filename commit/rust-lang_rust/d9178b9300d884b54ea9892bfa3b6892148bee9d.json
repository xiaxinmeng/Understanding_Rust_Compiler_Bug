{"sha": "d9178b9300d884b54ea9892bfa3b6892148bee9d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ5MTc4YjkzMDBkODg0YjU0ZWE5ODkyYmZhM2I2ODkyMTQ4YmVlOWQ=", "commit": {"author": {"name": "kenta7777", "email": "k.hasegw7@gmail.com", "date": "2019-03-27T08:58:11Z"}, "committer": {"name": "kenta7777", "email": "k.hasegw7@gmail.com", "date": "2019-03-30T01:58:28Z"}, "message": "renames EvalContext to InterpretCx", "tree": {"sha": "10cc72fd068fa06975644e5851d94ef4572ca921", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/10cc72fd068fa06975644e5851d94ef4572ca921"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d9178b9300d884b54ea9892bfa3b6892148bee9d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d9178b9300d884b54ea9892bfa3b6892148bee9d", "html_url": "https://github.com/rust-lang/rust/commit/d9178b9300d884b54ea9892bfa3b6892148bee9d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d9178b9300d884b54ea9892bfa3b6892148bee9d/comments", "author": {"login": "kenta7777", "id": 16369171, "node_id": "MDQ6VXNlcjE2MzY5MTcx", "avatar_url": "https://avatars.githubusercontent.com/u/16369171?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kenta7777", "html_url": "https://github.com/kenta7777", "followers_url": "https://api.github.com/users/kenta7777/followers", "following_url": "https://api.github.com/users/kenta7777/following{/other_user}", "gists_url": "https://api.github.com/users/kenta7777/gists{/gist_id}", "starred_url": "https://api.github.com/users/kenta7777/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kenta7777/subscriptions", "organizations_url": "https://api.github.com/users/kenta7777/orgs", "repos_url": "https://api.github.com/users/kenta7777/repos", "events_url": "https://api.github.com/users/kenta7777/events{/privacy}", "received_events_url": "https://api.github.com/users/kenta7777/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kenta7777", "id": 16369171, "node_id": "MDQ6VXNlcjE2MzY5MTcx", "avatar_url": "https://avatars.githubusercontent.com/u/16369171?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kenta7777", "html_url": "https://github.com/kenta7777", "followers_url": "https://api.github.com/users/kenta7777/followers", "following_url": "https://api.github.com/users/kenta7777/following{/other_user}", "gists_url": "https://api.github.com/users/kenta7777/gists{/gist_id}", "starred_url": "https://api.github.com/users/kenta7777/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kenta7777/subscriptions", "organizations_url": "https://api.github.com/users/kenta7777/orgs", "repos_url": "https://api.github.com/users/kenta7777/repos", "events_url": "https://api.github.com/users/kenta7777/events{/privacy}", "received_events_url": "https://api.github.com/users/kenta7777/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "95a842ba40f39edf119cd2623de80a90a2bcab39", "url": "https://api.github.com/repos/rust-lang/rust/commits/95a842ba40f39edf119cd2623de80a90a2bcab39", "html_url": "https://github.com/rust-lang/rust/commit/95a842ba40f39edf119cd2623de80a90a2bcab39"}], "stats": {"total": 30, "additions": 15, "deletions": 15}, "files": [{"sha": "3c6384e1a79efb19bbbe8e5886834e074bd179e7", "filename": "src/fn_call.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d9178b9300d884b54ea9892bfa3b6892148bee9d/src%2Ffn_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9178b9300d884b54ea9892bfa3b6892148bee9d/src%2Ffn_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ffn_call.rs?ref=d9178b9300d884b54ea9892bfa3b6892148bee9d", "patch": "@@ -255,7 +255,7 @@ pub trait EvalContextExt<'a, 'mir, 'tcx: 'a + 'mir>: crate::MiriEvalContextExt<'\n                 trace!(\"__rust_maybe_catch_panic: {:?}\", f_instance);\n \n                 // Now we make a function call.\n-                // TODO: consider making this reusable? `EvalContext::step` does something similar\n+                // TODO: consider making this reusable? `InterpretCx::step` does something similar\n                 // for the TLS destructors, and of course `eval_main`.\n                 let mir = this.load_mir(f_instance.def)?;\n                 let ret_place = MPlaceTy::dangling(this.layout_of(this.tcx.mk_unit())?, this).into();"}, {"sha": "be58c6a6a464262661532a90073af66ad5cce895", "filename": "src/lib.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/d9178b9300d884b54ea9892bfa3b6892148bee9d/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9178b9300d884b54ea9892bfa3b6892148bee9d/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=d9178b9300d884b54ea9892bfa3b6892148bee9d", "patch": "@@ -67,8 +67,8 @@ pub fn create_ecx<'a, 'mir: 'a, 'tcx: 'mir>(\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     main_id: DefId,\n     config: MiriConfig,\n-) -> EvalResult<'tcx, EvalContext<'a, 'mir, 'tcx, Evaluator<'tcx>>> {\n-    let mut ecx = EvalContext::new(\n+) -> EvalResult<'tcx, InterpretCx<'a, 'mir, 'tcx, Evaluator<'tcx>>> {\n+    let mut ecx = InterpretCx::new(\n         tcx.at(syntax::source_map::DUMMY_SP),\n         ty::ParamEnv::reveal_all(),\n         Evaluator::new(config.validate),\n@@ -345,7 +345,7 @@ impl<'tcx> Evaluator<'tcx> {\n \n // FIXME: rustc issue <https://github.com/rust-lang/rust/issues/47131>.\n #[allow(dead_code)]\n-type MiriEvalContext<'a, 'mir, 'tcx> = EvalContext<'a, 'mir, 'tcx, Evaluator<'tcx>>;\n+type MiriEvalContext<'a, 'mir, 'tcx> = InterpretCx<'a, 'mir, 'tcx, Evaluator<'tcx>>;\n \n // A little trait that's useful to be inherited by extension traits.\n pub trait MiriEvalContextExt<'a, 'mir, 'tcx> {\n@@ -376,14 +376,14 @@ impl<'a, 'mir, 'tcx> Machine<'a, 'mir, 'tcx> for Evaluator<'tcx> {\n     const STATIC_KIND: Option<MiriMemoryKind> = Some(MiriMemoryKind::MutStatic);\n \n     #[inline(always)]\n-    fn enforce_validity(ecx: &EvalContext<'a, 'mir, 'tcx, Self>) -> bool {\n+    fn enforce_validity(ecx: &InterpretCx<'a, 'mir, 'tcx, Self>) -> bool {\n         ecx.machine.validate\n     }\n \n     /// Returns `Ok()` when the function was handled; fail otherwise.\n     #[inline(always)]\n     fn find_fn(\n-        ecx: &mut EvalContext<'a, 'mir, 'tcx, Self>,\n+        ecx: &mut InterpretCx<'a, 'mir, 'tcx, Self>,\n         instance: ty::Instance<'tcx>,\n         args: &[OpTy<'tcx, Borrow>],\n         dest: Option<PlaceTy<'tcx, Borrow>>,\n@@ -394,7 +394,7 @@ impl<'a, 'mir, 'tcx> Machine<'a, 'mir, 'tcx> for Evaluator<'tcx> {\n \n     #[inline(always)]\n     fn call_intrinsic(\n-        ecx: &mut rustc_mir::interpret::EvalContext<'a, 'mir, 'tcx, Self>,\n+        ecx: &mut rustc_mir::interpret::InterpretCx<'a, 'mir, 'tcx, Self>,\n         instance: ty::Instance<'tcx>,\n         args: &[OpTy<'tcx, Borrow>],\n         dest: PlaceTy<'tcx, Borrow>,\n@@ -404,7 +404,7 @@ impl<'a, 'mir, 'tcx> Machine<'a, 'mir, 'tcx> for Evaluator<'tcx> {\n \n     #[inline(always)]\n     fn ptr_op(\n-        ecx: &rustc_mir::interpret::EvalContext<'a, 'mir, 'tcx, Self>,\n+        ecx: &rustc_mir::interpret::InterpretCx<'a, 'mir, 'tcx, Self>,\n         bin_op: mir::BinOp,\n         left: ImmTy<'tcx, Borrow>,\n         right: ImmTy<'tcx, Borrow>,\n@@ -413,7 +413,7 @@ impl<'a, 'mir, 'tcx> Machine<'a, 'mir, 'tcx> for Evaluator<'tcx> {\n     }\n \n     fn box_alloc(\n-        ecx: &mut EvalContext<'a, 'mir, 'tcx, Self>,\n+        ecx: &mut InterpretCx<'a, 'mir, 'tcx, Self>,\n         dest: PlaceTy<'tcx, Borrow>,\n     ) -> EvalResult<'tcx> {\n         trace!(\"box_alloc for {:?}\", dest.layout.ty);\n@@ -481,7 +481,7 @@ impl<'a, 'mir, 'tcx> Machine<'a, 'mir, 'tcx> for Evaluator<'tcx> {\n     }\n \n     #[inline(always)]\n-    fn before_terminator(_ecx: &mut EvalContext<'a, 'mir, 'tcx, Self>) -> EvalResult<'tcx>\n+    fn before_terminator(_ecx: &mut InterpretCx<'a, 'mir, 'tcx, Self>) -> EvalResult<'tcx>\n     {\n         // We are not interested in detecting loops.\n         Ok(())\n@@ -511,7 +511,7 @@ impl<'a, 'mir, 'tcx> Machine<'a, 'mir, 'tcx> for Evaluator<'tcx> {\n     }\n \n     fn tag_dereference(\n-        ecx: &EvalContext<'a, 'mir, 'tcx, Self>,\n+        ecx: &InterpretCx<'a, 'mir, 'tcx, Self>,\n         place: MPlaceTy<'tcx, Borrow>,\n         mutability: Option<hir::Mutability>,\n     ) -> EvalResult<'tcx, Scalar<Borrow>> {\n@@ -532,7 +532,7 @@ impl<'a, 'mir, 'tcx> Machine<'a, 'mir, 'tcx> for Evaluator<'tcx> {\n \n     #[inline(always)]\n     fn tag_new_allocation(\n-        ecx: &mut EvalContext<'a, 'mir, 'tcx, Self>,\n+        ecx: &mut InterpretCx<'a, 'mir, 'tcx, Self>,\n         ptr: Pointer,\n         kind: MemoryKind<Self::MemoryKinds>,\n     ) -> Pointer<Borrow> {\n@@ -547,7 +547,7 @@ impl<'a, 'mir, 'tcx> Machine<'a, 'mir, 'tcx> for Evaluator<'tcx> {\n \n     #[inline(always)]\n     fn retag(\n-        ecx: &mut EvalContext<'a, 'mir, 'tcx, Self>,\n+        ecx: &mut InterpretCx<'a, 'mir, 'tcx, Self>,\n         kind: mir::RetagKind,\n         place: PlaceTy<'tcx, Borrow>,\n     ) -> EvalResult<'tcx> {\n@@ -565,14 +565,14 @@ impl<'a, 'mir, 'tcx> Machine<'a, 'mir, 'tcx> for Evaluator<'tcx> {\n \n     #[inline(always)]\n     fn stack_push(\n-        ecx: &mut EvalContext<'a, 'mir, 'tcx, Self>,\n+        ecx: &mut InterpretCx<'a, 'mir, 'tcx, Self>,\n     ) -> EvalResult<'tcx, stacked_borrows::CallId> {\n         Ok(ecx.memory().extra.borrow_mut().new_call())\n     }\n \n     #[inline(always)]\n     fn stack_pop(\n-        ecx: &mut EvalContext<'a, 'mir, 'tcx, Self>,\n+        ecx: &mut InterpretCx<'a, 'mir, 'tcx, Self>,\n         extra: stacked_borrows::CallId,\n     ) -> EvalResult<'tcx> {\n         Ok(ecx.memory().extra.borrow_mut().end_call(extra))"}]}