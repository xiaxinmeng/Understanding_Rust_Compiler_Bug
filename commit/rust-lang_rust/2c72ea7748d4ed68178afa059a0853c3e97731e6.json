{"sha": "2c72ea7748d4ed68178afa059a0853c3e97731e6", "node_id": "C_kwDOAAsO6NoAKDJjNzJlYTc3NDhkNGVkNjgxNzhhZmEwNTlhMDg1M2MzZTk3NzMxZTY", "commit": {"author": {"name": "est31", "email": "MTest31@outlook.com", "date": "2022-09-12T15:09:08Z"}, "committer": {"name": "est31", "email": "MTest31@outlook.com", "date": "2022-09-30T15:00:07Z"}, "message": "Stabilize map_first_last", "tree": {"sha": "aed316b58dd4b0de02d37334ef95ad4cef3cfeb7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aed316b58dd4b0de02d37334ef95ad4cef3cfeb7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2c72ea7748d4ed68178afa059a0853c3e97731e6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2c72ea7748d4ed68178afa059a0853c3e97731e6", "html_url": "https://github.com/rust-lang/rust/commit/2c72ea7748d4ed68178afa059a0853c3e97731e6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2c72ea7748d4ed68178afa059a0853c3e97731e6/comments", "author": {"login": "est31", "id": 8872119, "node_id": "MDQ6VXNlcjg4NzIxMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/8872119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/est31", "html_url": "https://github.com/est31", "followers_url": "https://api.github.com/users/est31/followers", "following_url": "https://api.github.com/users/est31/following{/other_user}", "gists_url": "https://api.github.com/users/est31/gists{/gist_id}", "starred_url": "https://api.github.com/users/est31/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/est31/subscriptions", "organizations_url": "https://api.github.com/users/est31/orgs", "repos_url": "https://api.github.com/users/est31/repos", "events_url": "https://api.github.com/users/est31/events{/privacy}", "received_events_url": "https://api.github.com/users/est31/received_events", "type": "User", "site_admin": false}, "committer": {"login": "est31", "id": 8872119, "node_id": "MDQ6VXNlcjg4NzIxMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/8872119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/est31", "html_url": "https://github.com/est31", "followers_url": "https://api.github.com/users/est31/followers", "following_url": "https://api.github.com/users/est31/following{/other_user}", "gists_url": "https://api.github.com/users/est31/gists{/gist_id}", "starred_url": "https://api.github.com/users/est31/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/est31/subscriptions", "organizations_url": "https://api.github.com/users/est31/orgs", "repos_url": "https://api.github.com/users/est31/repos", "events_url": "https://api.github.com/users/est31/events{/privacy}", "received_events_url": "https://api.github.com/users/est31/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d45feb3ad28e141c7aba1cdff34341a4482f8bbe", "url": "https://api.github.com/repos/rust-lang/rust/commits/d45feb3ad28e141c7aba1cdff34341a4482f8bbe", "html_url": "https://github.com/rust-lang/rust/commit/d45feb3ad28e141c7aba1cdff34341a4482f8bbe"}], "stats": {"total": 33, "additions": 10, "deletions": 23}, "files": [{"sha": "9c690fc15de4f9792c8b2cb47b38b6719c15fb3c", "filename": "compiler/rustc_middle/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2c72ea7748d4ed68178afa059a0853c3e97731e6/compiler%2Frustc_middle%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c72ea7748d4ed68178afa059a0853c3e97731e6/compiler%2Frustc_middle%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Flib.rs?ref=2c72ea7748d4ed68178afa059a0853c3e97731e6", "patch": "@@ -32,7 +32,6 @@\n #![feature(exhaustive_patterns)]\n #![feature(get_mut_unchecked)]\n #![feature(if_let_guard)]\n-#![feature(map_first_last)]\n #![feature(negative_impls)]\n #![feature(never_type)]\n #![feature(extern_types)]"}, {"sha": "d418965cd2f6bcf25a49db0bd1e138c911a83766", "filename": "library/alloc/benches/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2c72ea7748d4ed68178afa059a0853c3e97731e6/library%2Falloc%2Fbenches%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c72ea7748d4ed68178afa059a0853c3e97731e6/library%2Falloc%2Fbenches%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fbenches%2Flib.rs?ref=2c72ea7748d4ed68178afa059a0853c3e97731e6", "patch": "@@ -3,7 +3,6 @@\n #![cfg(not(target_os = \"android\"))]\n #![feature(btree_drain_filter)]\n #![feature(iter_next_chunk)]\n-#![feature(map_first_last)]\n #![feature(repr_simd)]\n #![feature(slice_partition_dedup)]\n #![feature(test)]"}, {"sha": "ce803a18348bcba452c28e7408d6b02bdcc9dfd7", "filename": "library/alloc/src/collections/btree/map.rs", "status": "modified", "additions": 6, "deletions": 12, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/2c72ea7748d4ed68178afa059a0853c3e97731e6/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c72ea7748d4ed68178afa059a0853c3e97731e6/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs?ref=2c72ea7748d4ed68178afa059a0853c3e97731e6", "patch": "@@ -703,7 +703,6 @@ impl<K, V, A: Allocator + Clone> BTreeMap<K, V, A> {\n     /// Basic usage:\n     ///\n     /// ```\n-    /// #![feature(map_first_last)]\n     /// use std::collections::BTreeMap;\n     ///\n     /// let mut map = BTreeMap::new();\n@@ -712,7 +711,7 @@ impl<K, V, A: Allocator + Clone> BTreeMap<K, V, A> {\n     /// map.insert(2, \"a\");\n     /// assert_eq!(map.first_key_value(), Some((&1, &\"b\")));\n     /// ```\n-    #[unstable(feature = \"map_first_last\", issue = \"62924\")]\n+    #[stable(feature = \"map_first_last\", since = \"CURRENT_RUSTC_VERSION\")]\n     pub fn first_key_value(&self) -> Option<(&K, &V)>\n     where\n         K: Ord,\n@@ -727,7 +726,6 @@ impl<K, V, A: Allocator + Clone> BTreeMap<K, V, A> {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(map_first_last)]\n     /// use std::collections::BTreeMap;\n     ///\n     /// let mut map = BTreeMap::new();\n@@ -741,7 +739,7 @@ impl<K, V, A: Allocator + Clone> BTreeMap<K, V, A> {\n     /// assert_eq!(*map.get(&1).unwrap(), \"first\");\n     /// assert_eq!(*map.get(&2).unwrap(), \"b\");\n     /// ```\n-    #[unstable(feature = \"map_first_last\", issue = \"62924\")]\n+    #[stable(feature = \"map_first_last\", since = \"CURRENT_RUSTC_VERSION\")]\n     pub fn first_entry(&mut self) -> Option<OccupiedEntry<'_, K, V, A>>\n     where\n         K: Ord,\n@@ -765,7 +763,6 @@ impl<K, V, A: Allocator + Clone> BTreeMap<K, V, A> {\n     /// Draining elements in ascending order, while keeping a usable map each iteration.\n     ///\n     /// ```\n-    /// #![feature(map_first_last)]\n     /// use std::collections::BTreeMap;\n     ///\n     /// let mut map = BTreeMap::new();\n@@ -776,7 +773,7 @@ impl<K, V, A: Allocator + Clone> BTreeMap<K, V, A> {\n     /// }\n     /// assert!(map.is_empty());\n     /// ```\n-    #[unstable(feature = \"map_first_last\", issue = \"62924\")]\n+    #[stable(feature = \"map_first_last\", since = \"CURRENT_RUSTC_VERSION\")]\n     pub fn pop_first(&mut self) -> Option<(K, V)>\n     where\n         K: Ord,\n@@ -792,15 +789,14 @@ impl<K, V, A: Allocator + Clone> BTreeMap<K, V, A> {\n     /// Basic usage:\n     ///\n     /// ```\n-    /// #![feature(map_first_last)]\n     /// use std::collections::BTreeMap;\n     ///\n     /// let mut map = BTreeMap::new();\n     /// map.insert(1, \"b\");\n     /// map.insert(2, \"a\");\n     /// assert_eq!(map.last_key_value(), Some((&2, &\"a\")));\n     /// ```\n-    #[unstable(feature = \"map_first_last\", issue = \"62924\")]\n+    #[stable(feature = \"map_first_last\", since = \"CURRENT_RUSTC_VERSION\")]\n     pub fn last_key_value(&self) -> Option<(&K, &V)>\n     where\n         K: Ord,\n@@ -815,7 +811,6 @@ impl<K, V, A: Allocator + Clone> BTreeMap<K, V, A> {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(map_first_last)]\n     /// use std::collections::BTreeMap;\n     ///\n     /// let mut map = BTreeMap::new();\n@@ -829,7 +824,7 @@ impl<K, V, A: Allocator + Clone> BTreeMap<K, V, A> {\n     /// assert_eq!(*map.get(&1).unwrap(), \"a\");\n     /// assert_eq!(*map.get(&2).unwrap(), \"last\");\n     /// ```\n-    #[unstable(feature = \"map_first_last\", issue = \"62924\")]\n+    #[stable(feature = \"map_first_last\", since = \"CURRENT_RUSTC_VERSION\")]\n     pub fn last_entry(&mut self) -> Option<OccupiedEntry<'_, K, V, A>>\n     where\n         K: Ord,\n@@ -853,7 +848,6 @@ impl<K, V, A: Allocator + Clone> BTreeMap<K, V, A> {\n     /// Draining elements in descending order, while keeping a usable map each iteration.\n     ///\n     /// ```\n-    /// #![feature(map_first_last)]\n     /// use std::collections::BTreeMap;\n     ///\n     /// let mut map = BTreeMap::new();\n@@ -864,7 +858,7 @@ impl<K, V, A: Allocator + Clone> BTreeMap<K, V, A> {\n     /// }\n     /// assert!(map.is_empty());\n     /// ```\n-    #[unstable(feature = \"map_first_last\", issue = \"62924\")]\n+    #[stable(feature = \"map_first_last\", since = \"CURRENT_RUSTC_VERSION\")]\n     pub fn pop_last(&mut self) -> Option<(K, V)>\n     where\n         K: Ord,"}, {"sha": "09f3106dcfcdbcfb04fedeedf8af5e19a3b0a580", "filename": "library/alloc/src/collections/btree/set.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2c72ea7748d4ed68178afa059a0853c3e97731e6/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c72ea7748d4ed68178afa059a0853c3e97731e6/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset.rs?ref=2c72ea7748d4ed68178afa059a0853c3e97731e6", "patch": "@@ -786,7 +786,6 @@ impl<T, A: Allocator + Clone> BTreeSet<T, A> {\n     /// Basic usage:\n     ///\n     /// ```\n-    /// #![feature(map_first_last)]\n     /// use std::collections::BTreeSet;\n     ///\n     /// let mut set = BTreeSet::new();\n@@ -797,7 +796,7 @@ impl<T, A: Allocator + Clone> BTreeSet<T, A> {\n     /// assert_eq!(set.first(), Some(&1));\n     /// ```\n     #[must_use]\n-    #[unstable(feature = \"map_first_last\", issue = \"62924\")]\n+    #[stable(feature = \"map_first_last\", since = \"CURRENT_RUSTC_VERSION\")]\n     pub fn first(&self) -> Option<&T>\n     where\n         T: Ord,\n@@ -813,7 +812,6 @@ impl<T, A: Allocator + Clone> BTreeSet<T, A> {\n     /// Basic usage:\n     ///\n     /// ```\n-    /// #![feature(map_first_last)]\n     /// use std::collections::BTreeSet;\n     ///\n     /// let mut set = BTreeSet::new();\n@@ -824,7 +822,7 @@ impl<T, A: Allocator + Clone> BTreeSet<T, A> {\n     /// assert_eq!(set.last(), Some(&2));\n     /// ```\n     #[must_use]\n-    #[unstable(feature = \"map_first_last\", issue = \"62924\")]\n+    #[stable(feature = \"map_first_last\", since = \"CURRENT_RUSTC_VERSION\")]\n     pub fn last(&self) -> Option<&T>\n     where\n         T: Ord,\n@@ -838,7 +836,6 @@ impl<T, A: Allocator + Clone> BTreeSet<T, A> {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(map_first_last)]\n     /// use std::collections::BTreeSet;\n     ///\n     /// let mut set = BTreeSet::new();\n@@ -849,7 +846,7 @@ impl<T, A: Allocator + Clone> BTreeSet<T, A> {\n     /// }\n     /// assert!(set.is_empty());\n     /// ```\n-    #[unstable(feature = \"map_first_last\", issue = \"62924\")]\n+    #[stable(feature = \"map_first_last\", since = \"CURRENT_RUSTC_VERSION\")]\n     pub fn pop_first(&mut self) -> Option<T>\n     where\n         T: Ord,\n@@ -863,7 +860,6 @@ impl<T, A: Allocator + Clone> BTreeSet<T, A> {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(map_first_last)]\n     /// use std::collections::BTreeSet;\n     ///\n     /// let mut set = BTreeSet::new();\n@@ -874,7 +870,7 @@ impl<T, A: Allocator + Clone> BTreeSet<T, A> {\n     /// }\n     /// assert!(set.is_empty());\n     /// ```\n-    #[unstable(feature = \"map_first_last\", issue = \"62924\")]\n+    #[stable(feature = \"map_first_last\", since = \"CURRENT_RUSTC_VERSION\")]\n     pub fn pop_last(&mut self) -> Option<T>\n     where\n         T: Ord,"}, {"sha": "aced15646a2ace8c06be7e57f470ff10ade5c6ae", "filename": "src/tools/miri/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2c72ea7748d4ed68178afa059a0853c3e97731e6/src%2Ftools%2Fmiri%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c72ea7748d4ed68178afa059a0853c3e97731e6/src%2Ftools%2Fmiri%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Flib.rs?ref=2c72ea7748d4ed68178afa059a0853c3e97731e6", "patch": "@@ -1,5 +1,4 @@\n #![feature(rustc_private)]\n-#![feature(map_first_last)]\n #![feature(map_try_insert)]\n #![feature(never_type)]\n #![feature(try_blocks)]"}]}