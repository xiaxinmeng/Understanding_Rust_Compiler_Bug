{"sha": "f559cf98b5db32942ec9be050fecf58538910648", "node_id": "C_kwDOAAsO6NoAKGY1NTljZjk4YjVkYjMyOTQyZWM5YmUwNTBmZWNmNTg1Mzg5MTA2NDg", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-04-16T05:12:49Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-04-16T05:12:49Z"}, "message": "Rollup merge of #96099 - clarfonthey:maybeuninit_array_cleanup, r=dtolnay\n\nMaybeUninit array cleanup\n\n* Links `MaybeUninit::uninit_array` to meta-tracking issue\n* Links `MaybeUninit::array_assume_init` to meta-tracking issue\n* Unstably constifies `MaybeUninit::array_assume_init`\n\nAnother thing worth mentioning: this splits the const feature flag for `maybe_uninit_uninit_array` into `const_maybe_uninit_uninit_array` to avoid weird cases where only one gets stabilised.\n\nNote that it may be desired to keep the `array_assume_init` method linked to its dedicated issue, but at least for now, I decided to link to the meta-tracking issue so that all of the methods lead users to the same place. But I can revert that bit if desired.\n\nThe meta-tracking issue that I filed is #96097.", "tree": {"sha": "65d51ae94a0162e50314bda57b510c443398e50f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/65d51ae94a0162e50314bda57b510c443398e50f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f559cf98b5db32942ec9be050fecf58538910648", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiWlBRCRBK7hj4Ov3rIwAAbFAIAFM0Lmk0rWi3JV9wLruJNqCt\nUVQ8czuPvdGviTFy13/V3ARI6QKBRJq1Tfa+vkQ3Izha37Ke3QCEqBEhHrVlWSV4\n5sYLQkhR68LzEjJ4NFlwiLqVtHhyBs9DiKr6fP7TwH3s7PJfMEuzHwMndLRbvTLB\nemCv1Prh5pMOVtLhVnhud19dp7quC1J/Uj1iueEB8UVgT/BHSM26UzmI5+EDe0/3\n3zZorP+EnTacvO0MFlM4MPq0aBSrlZCE6LU+JI5RaXtdBNi4M6XLDvgNpjxJGxff\nPL+Xp1yUMM+4wnkhDZUB3ICCFigAkocfsN1FxrZEYq0g2IbUJAu+ohGypxsGOVs=\n=IyGD\n-----END PGP SIGNATURE-----\n", "payload": "tree 65d51ae94a0162e50314bda57b510c443398e50f\nparent 04ccba8728be6d8c4271034d13d17e012bf99bfa\nparent 63a865296141fb883352f30c603d46299d49e7c1\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1650085969 +0200\ncommitter GitHub <noreply@github.com> 1650085969 +0200\n\nRollup merge of #96099 - clarfonthey:maybeuninit_array_cleanup, r=dtolnay\n\nMaybeUninit array cleanup\n\n* Links `MaybeUninit::uninit_array` to meta-tracking issue\n* Links `MaybeUninit::array_assume_init` to meta-tracking issue\n* Unstably constifies `MaybeUninit::array_assume_init`\n\nAnother thing worth mentioning: this splits the const feature flag for `maybe_uninit_uninit_array` into `const_maybe_uninit_uninit_array` to avoid weird cases where only one gets stabilised.\n\nNote that it may be desired to keep the `array_assume_init` method linked to its dedicated issue, but at least for now, I decided to link to the meta-tracking issue so that all of the methods lead users to the same place. But I can revert that bit if desired.\n\nThe meta-tracking issue that I filed is #96097.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f559cf98b5db32942ec9be050fecf58538910648", "html_url": "https://github.com/rust-lang/rust/commit/f559cf98b5db32942ec9be050fecf58538910648", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f559cf98b5db32942ec9be050fecf58538910648/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "04ccba8728be6d8c4271034d13d17e012bf99bfa", "url": "https://api.github.com/repos/rust-lang/rust/commits/04ccba8728be6d8c4271034d13d17e012bf99bfa", "html_url": "https://github.com/rust-lang/rust/commit/04ccba8728be6d8c4271034d13d17e012bf99bfa"}, {"sha": "63a865296141fb883352f30c603d46299d49e7c1", "url": "https://api.github.com/repos/rust-lang/rust/commits/63a865296141fb883352f30c603d46299d49e7c1", "html_url": "https://github.com/rust-lang/rust/commit/63a865296141fb883352f30c603d46299d49e7c1"}], "stats": {"total": 22, "additions": 14, "deletions": 8}, "files": [{"sha": "dafd07b161785f87c2fff70e2b9aa6c258b8e8ba", "filename": "library/core/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f559cf98b5db32942ec9be050fecf58538910648/library%2Fcore%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f559cf98b5db32942ec9be050fecf58538910648/library%2Fcore%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Flib.rs?ref=f559cf98b5db32942ec9be050fecf58538910648", "patch": "@@ -117,6 +117,7 @@\n #![feature(const_intrinsic_copy)]\n #![feature(const_intrinsic_forget)]\n #![feature(const_likely)]\n+#![feature(const_maybe_uninit_uninit_array)]\n #![feature(const_maybe_uninit_as_mut_ptr)]\n #![feature(const_maybe_uninit_assume_init)]\n #![feature(const_num_from_num)]"}, {"sha": "cac7f435573a52500efb05f678a6fceda527ff5b", "filename": "library/core/src/mem/maybe_uninit.rs", "status": "modified", "additions": 13, "deletions": 8, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/f559cf98b5db32942ec9be050fecf58538910648/library%2Fcore%2Fsrc%2Fmem%2Fmaybe_uninit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f559cf98b5db32942ec9be050fecf58538910648/library%2Fcore%2Fsrc%2Fmem%2Fmaybe_uninit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmem%2Fmaybe_uninit.rs?ref=f559cf98b5db32942ec9be050fecf58538910648", "patch": "@@ -350,13 +350,13 @@ impl<T> MaybeUninit<T> {\n     /// let mut buf: [MaybeUninit<u8>; 32] = MaybeUninit::uninit_array();\n     /// let data = read(&mut buf);\n     /// ```\n-    #[unstable(feature = \"maybe_uninit_uninit_array\", issue = \"none\")]\n-    #[rustc_const_unstable(feature = \"maybe_uninit_uninit_array\", issue = \"none\")]\n+    #[unstable(feature = \"maybe_uninit_uninit_array\", issue = \"96097\")]\n+    #[rustc_const_unstable(feature = \"const_maybe_uninit_uninit_array\", issue = \"96097\")]\n     #[must_use]\n     #[inline(always)]\n-    pub const fn uninit_array<const LEN: usize>() -> [Self; LEN] {\n+    pub const fn uninit_array<const N: usize>() -> [Self; N] {\n         // SAFETY: An uninitialized `[MaybeUninit<_>; LEN]` is valid.\n-        unsafe { MaybeUninit::<[MaybeUninit<T>; LEN]>::uninit().assume_init() }\n+        unsafe { MaybeUninit::<[MaybeUninit<T>; N]>::uninit().assume_init() }\n     }\n \n     /// Creates a new `MaybeUninit<T>` in an uninitialized state, with the memory being\n@@ -942,19 +942,24 @@ impl<T> MaybeUninit<T> {\n     ///\n     /// assert_eq!(array, [0, 1, 2]);\n     /// ```\n-    #[unstable(feature = \"maybe_uninit_array_assume_init\", issue = \"80908\")]\n+    #[unstable(feature = \"maybe_uninit_array_assume_init\", issue = \"96097\")]\n+    #[rustc_const_unstable(feature = \"const_maybe_uninit_array_assume_init\", issue = \"96097\")]\n     #[inline(always)]\n     #[track_caller]\n-    pub unsafe fn array_assume_init<const N: usize>(array: [Self; N]) -> [T; N] {\n+    pub const unsafe fn array_assume_init<const N: usize>(array: [Self; N]) -> [T; N] {\n         // SAFETY:\n         // * The caller guarantees that all elements of the array are initialized\n         // * `MaybeUninit<T>` and T are guaranteed to have the same layout\n         // * `MaybeUninit` does not drop, so there are no double-frees\n         // And thus the conversion is safe\n-        unsafe {\n+        let ret = unsafe {\n             intrinsics::assert_inhabited::<[T; N]>();\n             (&array as *const _ as *const [T; N]).read()\n-        }\n+        };\n+\n+        // FIXME: required to avoid `~const Destruct` bound\n+        super::forget(array);\n+        ret\n     }\n \n     /// Assuming all the elements are initialized, get a slice to them."}]}