{"sha": "cd8bb50aea35f73fa4be62857dfed88f772cd07e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNkOGJiNTBhZWEzNWY3M2ZhNGJlNjI4NTdkZmVkODhmNzcyY2QwN2U=", "commit": {"author": {"name": "Kevin Stenerson", "email": "2653498+kestred@users.noreply.github.com", "date": "2018-11-07T08:49:53Z"}, "committer": {"name": "Seiichi Uchida", "email": "seuchida@gmail.com", "date": "2018-11-07T08:49:53Z"}, "message": "Trim the indentation on macros which heuristically appear to use block-style indentation (#3178)", "tree": {"sha": "6d290160cc36277d5f7ea26697812addfbdc1f52", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6d290160cc36277d5f7ea26697812addfbdc1f52"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cd8bb50aea35f73fa4be62857dfed88f772cd07e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cd8bb50aea35f73fa4be62857dfed88f772cd07e", "html_url": "https://github.com/rust-lang/rust/commit/cd8bb50aea35f73fa4be62857dfed88f772cd07e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cd8bb50aea35f73fa4be62857dfed88f772cd07e/comments", "author": {"login": "kestred", "id": 2653498, "node_id": "MDQ6VXNlcjI2NTM0OTg=", "avatar_url": "https://avatars.githubusercontent.com/u/2653498?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kestred", "html_url": "https://github.com/kestred", "followers_url": "https://api.github.com/users/kestred/followers", "following_url": "https://api.github.com/users/kestred/following{/other_user}", "gists_url": "https://api.github.com/users/kestred/gists{/gist_id}", "starred_url": "https://api.github.com/users/kestred/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kestred/subscriptions", "organizations_url": "https://api.github.com/users/kestred/orgs", "repos_url": "https://api.github.com/users/kestred/repos", "events_url": "https://api.github.com/users/kestred/events{/privacy}", "received_events_url": "https://api.github.com/users/kestred/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "16d5f507b63da32783bc920a33e39580d35e492a", "url": "https://api.github.com/repos/rust-lang/rust/commits/16d5f507b63da32783bc920a33e39580d35e492a", "html_url": "https://github.com/rust-lang/rust/commit/16d5f507b63da32783bc920a33e39580d35e492a"}], "stats": {"total": 74, "additions": 62, "deletions": 12}, "files": [{"sha": "4ba95bda053867caaacee25a799a5fd2901f7790", "filename": "src/comment.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd8bb50aea35f73fa4be62857dfed88f772cd07e/src%2Fcomment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd8bb50aea35f73fa4be62857dfed88f772cd07e/src%2Fcomment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomment.rs?ref=cd8bb50aea35f73fa4be62857dfed88f772cd07e", "patch": "@@ -332,7 +332,7 @@ fn identify_comment(\n     let (first_group, rest) = orig.split_at(first_group_ending);\n     let rewritten_first_group =\n         if !config.normalize_comments() && has_bare_lines && style.is_block_comment() {\n-            trim_left_preserve_layout(first_group, &shape.indent, config)?\n+            trim_left_preserve_layout(first_group, shape.indent, config)?\n         } else if !config.normalize_comments()\n             && !config.wrap_comments()\n             && !config.format_doc_comments()"}, {"sha": "e956ad4dbc8beca8367c98d137716f37dcc7b5c2", "filename": "src/macros.rs", "status": "modified", "additions": 33, "deletions": 8, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/cd8bb50aea35f73fa4be62857dfed88f772cd07e/src%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd8bb50aea35f73fa4be62857dfed88f772cd07e/src%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmacros.rs?ref=cd8bb50aea35f73fa4be62857dfed88f772cd07e", "patch": "@@ -144,11 +144,32 @@ fn rewrite_macro_name(\n }\n \n // Use this on failing to format the macro call.\n-fn return_original_snippet_with_failure_marked(\n+fn return_macro_parse_failure_fallback(\n     context: &RewriteContext,\n+    indent: Indent,\n     span: Span,\n ) -> Option<String> {\n+    // Mark this as a failure however we format it\n     context.macro_rewrite_failure.replace(true);\n+\n+    // Heuristically determine whether the last line of the macro uses \"Block\" style\n+    // rather than using \"Visual\" style, or another indentation style.\n+    let is_like_block_indent_style = context\n+        .snippet(span)\n+        .lines()\n+        .last()\n+        .map(|closing_line| {\n+            closing_line.trim().chars().all(|ch| match ch {\n+                '}' | ')' | ']' => true,\n+                _ => false,\n+            })\n+        })\n+        .unwrap_or(false);\n+    if is_like_block_indent_style {\n+        return trim_left_preserve_layout(context.snippet(span), indent, &context.config);\n+    }\n+\n+    // Return the snippet unmodified if the macro is not block-like\n     Some(context.snippet(span).to_owned())\n }\n \n@@ -239,7 +260,9 @@ pub fn rewrite_macro_inner(\n         loop {\n             match parse_macro_arg(&mut parser) {\n                 Some(arg) => arg_vec.push(arg),\n-                None => return return_original_snippet_with_failure_marked(context, mac.span),\n+                None => {\n+                    return return_macro_parse_failure_fallback(context, shape.indent, mac.span);\n+                }\n             }\n \n             match parser.token {\n@@ -260,17 +283,19 @@ pub fn rewrite_macro_inner(\n                                     }\n                                 }\n                                 None => {\n-                                    return return_original_snippet_with_failure_marked(\n-                                        context, mac.span,\n-                                    )\n+                                    return return_macro_parse_failure_fallback(\n+                                        context,\n+                                        shape.indent,\n+                                        mac.span,\n+                                    );\n                                 }\n                             }\n                         }\n                     }\n-                    return return_original_snippet_with_failure_marked(context, mac.span);\n+                    return return_macro_parse_failure_fallback(context, shape.indent, mac.span);\n                 }\n                 _ if arg_vec.last().map_or(false, MacroArg::is_item) => continue,\n-                _ => return return_original_snippet_with_failure_marked(context, mac.span),\n+                _ => return return_macro_parse_failure_fallback(context, shape.indent, mac.span),\n             }\n \n             parser.bump();\n@@ -376,7 +401,7 @@ pub fn rewrite_macro_inner(\n         }\n         DelimToken::Brace => {\n             // Skip macro invocations with braces, for now.\n-            trim_left_preserve_layout(context.snippet(mac.span), &shape.indent, &context.config)\n+            trim_left_preserve_layout(context.snippet(mac.span), shape.indent, &context.config)\n         }\n         _ => unreachable!(),\n     }"}, {"sha": "5999d6f71bf49eba0c8ea22652ebf136badfbb25", "filename": "src/test/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd8bb50aea35f73fa4be62857dfed88f772cd07e/src%2Ftest%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd8bb50aea35f73fa4be62857dfed88f772cd07e/src%2Ftest%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmod.rs?ref=cd8bb50aea35f73fa4be62857dfed88f772cd07e", "patch": "@@ -749,7 +749,7 @@ impl ConfigCodeBlock {\n             .code_block\n             .as_ref()\n             .unwrap()\n-            .split('\\n')\n+            .lines()\n             .nth(0)\n             .unwrap_or(\"\")\n             == \"#![rustfmt::skip]\";"}, {"sha": "c5f9a5eda5eec8250963801a449bfd14e58173c6", "filename": "src/utils.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cd8bb50aea35f73fa4be62857dfed88f772cd07e/src%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd8bb50aea35f73fa4be62857dfed88f772cd07e/src%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Futils.rs?ref=cd8bb50aea35f73fa4be62857dfed88f772cd07e", "patch": "@@ -511,7 +511,7 @@ pub fn remove_trailing_white_spaces(text: &str) -> String {\n ///     ),\n /// }\n /// ```\n-pub fn trim_left_preserve_layout(orig: &str, indent: &Indent, config: &Config) -> Option<String> {\n+pub fn trim_left_preserve_layout(orig: &str, indent: Indent, config: &Config) -> Option<String> {\n     let mut lines = LineClasses::new(orig);\n     let first_line = lines.next().map(|(_, s)| s.trim_right().to_owned())?;\n     let mut trimmed_lines = Vec::with_capacity(16);\n@@ -598,7 +598,7 @@ mod test {\n         let config = Config::default();\n         let indent = Indent::new(4, 0);\n         assert_eq!(\n-            trim_left_preserve_layout(&s, &indent, &config),\n+            trim_left_preserve_layout(&s, indent, &config),\n             Some(\"aaa\\n    bbb\\n    ccc\".to_string())\n         );\n     }"}, {"sha": "c828ffb881a7c31e9a7cef34daf1f7efc019720e", "filename": "tests/source/macros.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/cd8bb50aea35f73fa4be62857dfed88f772cd07e/tests%2Fsource%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd8bb50aea35f73fa4be62857dfed88f772cd07e/tests%2Fsource%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fmacros.rs?ref=cd8bb50aea35f73fa4be62857dfed88f772cd07e", "patch": "@@ -184,6 +184,19 @@ fn issue1577() {\n     });\n }\n \n+// #3174\n+fn issue_3174() {\n+    let data =\n+        if let Some(debug) = error.debug_info() {\n+            json!({\n+                \"errorKind\": format!(\"{:?}\", error.err_kind()),\n+                \"debugMessage\": debug.message,\n+            })\n+        } else {\n+            json!({\"errorKind\": format!(\"{:?}\", error.err_kind())})\n+        };\n+}\n+\n gfx_pipeline!(pipe {\n     vbuf: gfx::VertexBuffer<Vertex> = (),\n     out: gfx::RenderTarget<ColorFormat> = \"Target0\","}, {"sha": "e16159ced1016c46e9580c677d2cd48af99b0326", "filename": "tests/target/macros.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/cd8bb50aea35f73fa4be62857dfed88f772cd07e/tests%2Ftarget%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd8bb50aea35f73fa4be62857dfed88f772cd07e/tests%2Ftarget%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fmacros.rs?ref=cd8bb50aea35f73fa4be62857dfed88f772cd07e", "patch": "@@ -225,6 +225,18 @@ fn issue1577() {\n     });\n }\n \n+// #3174\n+fn issue_3174() {\n+    let data = if let Some(debug) = error.debug_info() {\n+        json!({\n+            \"errorKind\": format!(\"{:?}\", error.err_kind()),\n+            \"debugMessage\": debug.message,\n+        })\n+    } else {\n+        json!({ \"errorKind\": format!(\"{:?}\", error.err_kind()) })\n+    };\n+}\n+\n gfx_pipeline!(pipe {\n     vbuf: gfx::VertexBuffer<Vertex> = (),\n     out: gfx::RenderTarget<ColorFormat> = \"Target0\","}]}