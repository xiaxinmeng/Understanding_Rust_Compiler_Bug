{"sha": "75825fe1df47866e1821d8b09f4c75930b6e57c1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc1ODI1ZmUxZGY0Nzg2NmUxODIxZDhiMDlmNGM3NTkzMGI2ZTU3YzE=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2016-11-24T09:28:29Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2016-11-24T09:30:18Z"}, "message": "Tests of `-Z print-type-sizes` functionality.\n\nNote that the tests have been updated to initialize the local\nvariables; originally it was enough just to declare them.\n\nBack when I started this, the `layout_cache` contained entries even\njust for types that had been declared but not initialized. Apparently\nthings have changed in the interim so that if I want one of those\nlayouts to be computed, I need to actually initialize the value.\n\n(Incidentally, this shows a weakness in the strategy of just walking\nthe `layout_cache`; the original strategy of using a MIR visitor would\nprobably have exhibited more robustness in terms of consistent output,\nbut it had other weaknesses so I chose not to reimplement it. At\nleast, not yet.)\n\n----\n\nAlso, I have updated tests to avoid target-specific alignments.", "tree": {"sha": "8e4dfc12acf11d473cadd7718018410b61d46af1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8e4dfc12acf11d473cadd7718018410b61d46af1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/75825fe1df47866e1821d8b09f4c75930b6e57c1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/75825fe1df47866e1821d8b09f4c75930b6e57c1", "html_url": "https://github.com/rust-lang/rust/commit/75825fe1df47866e1821d8b09f4c75930b6e57c1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/75825fe1df47866e1821d8b09f4c75930b6e57c1/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "70e5ca2ab49ca31485780f6fa981c5164b2cc848", "url": "https://api.github.com/repos/rust-lang/rust/commits/70e5ca2ab49ca31485780f6fa981c5164b2cc848", "html_url": "https://github.com/rust-lang/rust/commit/70e5ca2ab49ca31485780f6fa981c5164b2cc848"}], "stats": {"total": 442, "additions": 442, "deletions": 0}, "files": [{"sha": "dc93bddbad8e2d83cfc52117f8088a1e3797cd42", "filename": "src/test/ui/print_type_sizes/anonymous.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/75825fe1df47866e1821d8b09f4c75930b6e57c1/src%2Ftest%2Fui%2Fprint_type_sizes%2Fanonymous.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75825fe1df47866e1821d8b09f4c75930b6e57c1/src%2Ftest%2Fui%2Fprint_type_sizes%2Fanonymous.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprint_type_sizes%2Fanonymous.rs?ref=75825fe1df47866e1821d8b09f4c75930b6e57c1", "patch": "@@ -0,0 +1,27 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags: -Z print-type-sizes\n+\n+// All of the types that occur in this function are uninteresting, in\n+// that one cannot control the sizes of these types with the same sort\n+// of enum-variant manipulation tricks.\n+\n+pub fn main() {\n+    let _byte: u8 = 0;\n+    let _word: usize = 0;\n+    let _tuple: (u8, usize)= (0, 0);\n+    let _array: [u8; 128] = [0; 128];\n+    let _fn: fn (u8) -> u8 = id;\n+    let _diverging: fn (u8) -> ! = bye;\n+\n+    fn id(x: u8) -> u8 { x };\n+    fn bye(_: u8) -> ! { loop { } }\n+}"}, {"sha": "93bcd1c36e5926595094d6e9501d2c4a7e4e5dfd", "filename": "src/test/ui/print_type_sizes/generics.rs", "status": "added", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/75825fe1df47866e1821d8b09f4c75930b6e57c1/src%2Ftest%2Fui%2Fprint_type_sizes%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75825fe1df47866e1821d8b09f4c75930b6e57c1/src%2Ftest%2Fui%2Fprint_type_sizes%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprint_type_sizes%2Fgenerics.rs?ref=75825fe1df47866e1821d8b09f4c75930b6e57c1", "patch": "@@ -0,0 +1,73 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags: -Z print-type-sizes\n+\n+// This file illustrates how generics are handled: types have to be\n+// monomorphized, in the MIR of the original function in which they\n+// occur, to have their size reported.\n+\n+// In an ad-hoc attempt to avoid the injection of unwinding code\n+// (which clutters the output of `-Z print-type-sizes` with types from\n+// `unwind::libunwind`):\n+//\n+//   * I am not using Default to build values because that seems to\n+//     cause the injection of unwinding code. (Instead I just make `fn new`\n+//     methods.)\n+//\n+//   * Pair derive Copy to ensure that we don't inject\n+//     unwinding code into generic uses of Pair when T itself is also\n+//     Copy.\n+//\n+//     (I suspect this reflect some naivety within the rust compiler\n+//      itself; it should be checking for drop glue, i.e. a destructor\n+//      somewhere in the monomorphized types. It should not matter whether\n+//      the type is Copy.)\n+#[derive(Copy, Clone)]\n+pub struct Pair<T> {\n+    _car: T,\n+    _cdr: T,\n+}\n+\n+impl<T> Pair<T> {\n+    fn new(a: T, d: T) -> Self {\n+        Pair {\n+            _car: a,\n+            _cdr: d,\n+        }\n+    }\n+}\n+\n+#[derive(Copy, Clone)]\n+pub struct SevenBytes([u8; 7]);\n+pub struct FiftyBytes([u8; 50]);\n+\n+pub struct ZeroSized;\n+\n+impl SevenBytes {\n+    fn new() -> Self { SevenBytes([0; 7]) }\n+}\n+\n+impl FiftyBytes {\n+    fn new() -> Self { FiftyBytes([0; 50]) }\n+}\n+\n+pub fn f1<T:Copy>(x: T) {\n+    let _v: Pair<T> = Pair::new(x, x);\n+    let _v2: Pair<FiftyBytes> =\n+        Pair::new(FiftyBytes::new(), FiftyBytes::new());\n+}\n+\n+pub fn main() {\n+    let _b: Pair<u8> = Pair::new(0, 0);\n+    let _s: Pair<SevenBytes> = Pair::new(SevenBytes::new(), SevenBytes::new());\n+    let _z: ZeroSized = ZeroSized;\n+    f1::<SevenBytes>(SevenBytes::new());\n+}"}, {"sha": "0f02f39795365d83b196311d96b4e111e3192633", "filename": "src/test/ui/print_type_sizes/generics.stdout", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/75825fe1df47866e1821d8b09f4c75930b6e57c1/src%2Ftest%2Fui%2Fprint_type_sizes%2Fgenerics.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/75825fe1df47866e1821d8b09f4c75930b6e57c1/src%2Ftest%2Fui%2Fprint_type_sizes%2Fgenerics.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprint_type_sizes%2Fgenerics.stdout?ref=75825fe1df47866e1821d8b09f4c75930b6e57c1", "patch": "@@ -0,0 +1,14 @@\n+print-type-size type: `Pair<FiftyBytes>`: 100 bytes, alignment: 1 bytes\n+print-type-size     field `._car`: 50 bytes\n+print-type-size     field `._cdr`: 50 bytes\n+print-type-size type: `FiftyBytes`: 50 bytes, alignment: 1 bytes\n+print-type-size     field `.0`: 50 bytes\n+print-type-size type: `Pair<SevenBytes>`: 14 bytes, alignment: 1 bytes\n+print-type-size     field `._car`: 7 bytes\n+print-type-size     field `._cdr`: 7 bytes\n+print-type-size type: `SevenBytes`: 7 bytes, alignment: 1 bytes\n+print-type-size     field `.0`: 7 bytes\n+print-type-size type: `Pair<u8>`: 2 bytes, alignment: 1 bytes\n+print-type-size     field `._car`: 1 bytes\n+print-type-size     field `._cdr`: 1 bytes\n+print-type-size type: `ZeroSized`: 0 bytes, alignment: 1 bytes"}, {"sha": "2b5010767fdef2923efcbf984cadff2f2188179b", "filename": "src/test/ui/print_type_sizes/multiple_types.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/75825fe1df47866e1821d8b09f4c75930b6e57c1/src%2Ftest%2Fui%2Fprint_type_sizes%2Fmultiple_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75825fe1df47866e1821d8b09f4c75930b6e57c1/src%2Ftest%2Fui%2Fprint_type_sizes%2Fmultiple_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprint_type_sizes%2Fmultiple_types.rs?ref=75825fe1df47866e1821d8b09f4c75930b6e57c1", "patch": "@@ -0,0 +1,28 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags: -Z print-type-sizes\n+\n+// This file illustrates that when multiple structural types occur in\n+// a function, every one of them is included in the output.\n+\n+pub struct SevenBytes([u8;  7]);\n+pub struct FiftyBytes([u8; 50]);\n+\n+pub enum Enum {\n+    Small(SevenBytes),\n+    Large(FiftyBytes),\n+}\n+\n+pub fn main() {\n+    let _e: Enum;\n+    let _f: FiftyBytes;\n+    let _s: SevenBytes;\n+}"}, {"sha": "eed9af26987b46f64929c5895489a8941b62213f", "filename": "src/test/ui/print_type_sizes/multiple_types.stdout", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/75825fe1df47866e1821d8b09f4c75930b6e57c1/src%2Ftest%2Fui%2Fprint_type_sizes%2Fmultiple_types.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/75825fe1df47866e1821d8b09f4c75930b6e57c1/src%2Ftest%2Fui%2Fprint_type_sizes%2Fmultiple_types.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprint_type_sizes%2Fmultiple_types.stdout?ref=75825fe1df47866e1821d8b09f4c75930b6e57c1", "patch": "@@ -0,0 +1,10 @@\n+print-type-size type: `Enum`: 51 bytes, alignment: 1 bytes\n+print-type-size     discriminant: 1 bytes\n+print-type-size     variant `Small`: 7 bytes\n+print-type-size         field `.0`: 7 bytes\n+print-type-size     variant `Large`: 50 bytes\n+print-type-size         field `.0`: 50 bytes\n+print-type-size type: `FiftyBytes`: 50 bytes, alignment: 1 bytes\n+print-type-size     field `.0`: 50 bytes\n+print-type-size type: `SevenBytes`: 7 bytes, alignment: 1 bytes\n+print-type-size     field `.0`: 7 bytes"}, {"sha": "6008a346c059f529b589b6b00967a1be672d2c54", "filename": "src/test/ui/print_type_sizes/no_duplicates.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/75825fe1df47866e1821d8b09f4c75930b6e57c1/src%2Ftest%2Fui%2Fprint_type_sizes%2Fno_duplicates.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75825fe1df47866e1821d8b09f4c75930b6e57c1/src%2Ftest%2Fui%2Fprint_type_sizes%2Fno_duplicates.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprint_type_sizes%2Fno_duplicates.rs?ref=75825fe1df47866e1821d8b09f4c75930b6e57c1", "patch": "@@ -0,0 +1,25 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags: -Z print-type-sizes\n+\n+// This file illustrates that when the same type occurs repeatedly\n+// (even if multiple functions), it is only printed once in the\n+// print-type-sizes output.\n+\n+pub struct SevenBytes([u8; 7]);\n+\n+pub fn f1() {\n+    let _s: SevenBytes = SevenBytes([0; 7]);\n+}\n+\n+pub fn main() {\n+    let _s: SevenBytes = SevenBytes([0; 7]);\n+}"}, {"sha": "50180f356ea36c4d3330fd233fd09aa0bc778385", "filename": "src/test/ui/print_type_sizes/no_duplicates.stdout", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/75825fe1df47866e1821d8b09f4c75930b6e57c1/src%2Ftest%2Fui%2Fprint_type_sizes%2Fno_duplicates.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/75825fe1df47866e1821d8b09f4c75930b6e57c1/src%2Ftest%2Fui%2Fprint_type_sizes%2Fno_duplicates.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprint_type_sizes%2Fno_duplicates.stdout?ref=75825fe1df47866e1821d8b09f4c75930b6e57c1", "patch": "@@ -0,0 +1,2 @@\n+print-type-size type: `SevenBytes`: 7 bytes, alignment: 1 bytes\n+print-type-size     field `.0`: 7 bytes"}, {"sha": "f7fdcac81daad4247e74cee79a034e56085d4c49", "filename": "src/test/ui/print_type_sizes/nullable.rs", "status": "added", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/75825fe1df47866e1821d8b09f4c75930b6e57c1/src%2Ftest%2Fui%2Fprint_type_sizes%2Fnullable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75825fe1df47866e1821d8b09f4c75930b6e57c1/src%2Ftest%2Fui%2Fprint_type_sizes%2Fnullable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprint_type_sizes%2Fnullable.rs?ref=75825fe1df47866e1821d8b09f4c75930b6e57c1", "patch": "@@ -0,0 +1,69 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags: -Z print-type-sizes\n+\n+// This file illustrates how enums with a non-null field are handled,\n+// modelled after cases like `Option<&u32>` and such.\n+//\n+// It uses NonZero directly, rather than `&_` or `Unique<_>`, because\n+// the test is not set up to deal with target-dependent pointer width.\n+//\n+// It avoids using u64/i64 because on some targets that is only 4-byte\n+// aligned (while on most it is 8-byte aligned) and so the resulting\n+// padding and overall computed sizes can be quite different.\n+\n+#![feature(nonzero)]\n+#![allow(dead_code)]\n+\n+extern crate core;\n+use core::nonzero::{NonZero, Zeroable};\n+\n+pub enum MyOption<T> { None, Some(T) }\n+\n+impl<T> Default for MyOption<T> {\n+    fn default() -> Self { MyOption::None }\n+}\n+\n+pub enum EmbeddedDiscr {\n+    None,\n+    Record { pre: u8, val: NonZero<u32>, post: u16 },\n+}\n+\n+impl Default for EmbeddedDiscr {\n+    fn default() -> Self { EmbeddedDiscr::None }\n+}\n+\n+#[derive(Default)]\n+pub struct IndirectNonZero<T: Zeroable> {\n+    pre: u8,\n+    nested: NestedNonZero<T>,\n+    post: u16,\n+}\n+\n+pub struct NestedNonZero<T: Zeroable> {\n+    pre: u8,\n+    val: NonZero<T>,\n+    post: u16,\n+}\n+\n+impl<T: Zeroable+Default> Default for NestedNonZero<T> {\n+    fn default() -> Self {\n+        unsafe {\n+            NestedNonZero { pre: 0, val: NonZero::new(Default::default()), post: 0 }\n+        }\n+    }\n+}\n+\n+pub fn main() {\n+    let _x: MyOption<NonZero<u32>> = Default::default();\n+    let _y: EmbeddedDiscr = Default::default();\n+    let _z: MyOption<IndirectNonZero<u32>> = Default::default();\n+}"}, {"sha": "dd999c4a5e4c779d1e30f105926d4a4ef4e07eda", "filename": "src/test/ui/print_type_sizes/nullable.stdout", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/75825fe1df47866e1821d8b09f4c75930b6e57c1/src%2Ftest%2Fui%2Fprint_type_sizes%2Fnullable.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/75825fe1df47866e1821d8b09f4c75930b6e57c1/src%2Ftest%2Fui%2Fprint_type_sizes%2Fnullable.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprint_type_sizes%2Fnullable.stdout?ref=75825fe1df47866e1821d8b09f4c75930b6e57c1", "patch": "@@ -0,0 +1,27 @@\n+print-type-size type: `IndirectNonZero<u32>`: 20 bytes, alignment: 4 bytes\n+print-type-size     field `.pre`: 1 bytes\n+print-type-size     padding: 3 bytes\n+print-type-size     field `.nested`: 12 bytes, alignment: 4 bytes\n+print-type-size     field `.post`: 2 bytes\n+print-type-size     end padding: 2 bytes\n+print-type-size type: `MyOption<IndirectNonZero<u32>>`: 20 bytes, alignment: 4 bytes\n+print-type-size     variant `Some`: 20 bytes\n+print-type-size         field `.0`: 20 bytes\n+print-type-size type: `EmbeddedDiscr`: 12 bytes, alignment: 4 bytes\n+print-type-size     variant `Record`: 10 bytes\n+print-type-size         field `.pre`: 1 bytes\n+print-type-size         padding: 3 bytes\n+print-type-size         field `.val`: 4 bytes, alignment: 4 bytes\n+print-type-size         field `.post`: 2 bytes\n+print-type-size     end padding: 2 bytes\n+print-type-size type: `NestedNonZero<u32>`: 12 bytes, alignment: 4 bytes\n+print-type-size     field `.pre`: 1 bytes\n+print-type-size     padding: 3 bytes\n+print-type-size     field `.val`: 4 bytes, alignment: 4 bytes\n+print-type-size     field `.post`: 2 bytes\n+print-type-size     end padding: 2 bytes\n+print-type-size type: `MyOption<core::nonzero::NonZero<u32>>`: 4 bytes, alignment: 4 bytes\n+print-type-size     variant `Some`: 4 bytes\n+print-type-size         field `.0`: 4 bytes\n+print-type-size type: `core::nonzero::NonZero<u32>`: 4 bytes, alignment: 4 bytes\n+print-type-size     field `.0`: 4 bytes"}, {"sha": "cd7ef86d70ee3f4892fb0c66181af1c09eb7f367", "filename": "src/test/ui/print_type_sizes/packed.rs", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/75825fe1df47866e1821d8b09f4c75930b6e57c1/src%2Ftest%2Fui%2Fprint_type_sizes%2Fpacked.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75825fe1df47866e1821d8b09f4c75930b6e57c1/src%2Ftest%2Fui%2Fprint_type_sizes%2Fpacked.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprint_type_sizes%2Fpacked.rs?ref=75825fe1df47866e1821d8b09f4c75930b6e57c1", "patch": "@@ -0,0 +1,49 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags: -Z print-type-sizes\n+\n+// This file illustrates how packing is handled; it should cause\n+// the elimination of padding that would normally be introduced\n+// to satisfy alignment desirata.\n+//\n+// It avoids using u64/i64 because on some targets that is only 4-byte\n+// aligned (while on most it is 8-byte aligned) and so the resulting\n+// padding and overall computed sizes can be quite different.\n+\n+#![feature(untagged_unions)]\n+\n+#![allow(dead_code)]\n+\n+#[derive(Default)]\n+#[repr(packed)]\n+struct Packed {\n+    a: u8,\n+    b: u8,\n+    g: i32,\n+    c: u8,\n+    h: i16,\n+    d: u8,\n+}\n+\n+#[derive(Default)]\n+struct Padded {\n+    a: u8,\n+    b: u8,\n+    g: i32,\n+    c: u8,\n+    h: i16,\n+    d: u8,\n+}\n+\n+pub fn main() {\n+    let _c: Packed = Default::default();\n+    let _d: Padded = Default::default();\n+}"}, {"sha": "1278a7d7c92c67836d9e74db7eefd791ef4b3b23", "filename": "src/test/ui/print_type_sizes/packed.stdout", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/75825fe1df47866e1821d8b09f4c75930b6e57c1/src%2Ftest%2Fui%2Fprint_type_sizes%2Fpacked.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/75825fe1df47866e1821d8b09f4c75930b6e57c1/src%2Ftest%2Fui%2Fprint_type_sizes%2Fpacked.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprint_type_sizes%2Fpacked.stdout?ref=75825fe1df47866e1821d8b09f4c75930b6e57c1", "patch": "@@ -0,0 +1,17 @@\n+print-type-size type: `Padded`: 16 bytes, alignment: 4 bytes\n+print-type-size     field `.a`: 1 bytes\n+print-type-size     field `.b`: 1 bytes\n+print-type-size     padding: 2 bytes\n+print-type-size     field `.g`: 4 bytes, alignment: 4 bytes\n+print-type-size     field `.c`: 1 bytes\n+print-type-size     padding: 1 bytes\n+print-type-size     field `.h`: 2 bytes, alignment: 2 bytes\n+print-type-size     field `.d`: 1 bytes\n+print-type-size     end padding: 3 bytes\n+print-type-size type: `Packed`: 10 bytes, alignment: 1 bytes\n+print-type-size     field `.a`: 1 bytes\n+print-type-size     field `.b`: 1 bytes\n+print-type-size     field `.g`: 4 bytes\n+print-type-size     field `.c`: 1 bytes\n+print-type-size     field `.h`: 2 bytes\n+print-type-size     field `.d`: 1 bytes"}, {"sha": "af34a908ce883ca258ddecd81345f9f1d7b39774", "filename": "src/test/ui/print_type_sizes/padding.rs", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/75825fe1df47866e1821d8b09f4c75930b6e57c1/src%2Ftest%2Fui%2Fprint_type_sizes%2Fpadding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75825fe1df47866e1821d8b09f4c75930b6e57c1/src%2Ftest%2Fui%2Fprint_type_sizes%2Fpadding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprint_type_sizes%2Fpadding.rs?ref=75825fe1df47866e1821d8b09f4c75930b6e57c1", "patch": "@@ -0,0 +1,39 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags: -Z print-type-sizes\n+\n+// This file illustrates how padding is handled: alignment\n+// requirements can lead to the introduction of padding, either before\n+// fields or at the end of the structure as a whole.\n+//\n+// It avoids using u64/i64 because on some targets that is only 4-byte\n+// aligned (while on most it is 8-byte aligned) and so the resulting\n+// padding and overall computed sizes can be quite different.\n+\n+#![allow(dead_code)]\n+\n+struct S {\n+    a: bool,\n+    b: bool,\n+    g: i32,\n+}\n+\n+enum E1 {\n+    A(i32, i8),\n+    B(S),\n+}\n+\n+enum E2 {\n+    A(i8, i32),\n+    B(S),\n+}\n+\n+fn main() { }"}, {"sha": "bb95f790bd9e471bdd740e5f9817faf8af8d4f54", "filename": "src/test/ui/print_type_sizes/padding.stdout", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/75825fe1df47866e1821d8b09f4c75930b6e57c1/src%2Ftest%2Fui%2Fprint_type_sizes%2Fpadding.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/75825fe1df47866e1821d8b09f4c75930b6e57c1/src%2Ftest%2Fui%2Fprint_type_sizes%2Fpadding.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprint_type_sizes%2Fpadding.stdout?ref=75825fe1df47866e1821d8b09f4c75930b6e57c1", "patch": "@@ -0,0 +1,21 @@\n+print-type-size type: `E1`: 12 bytes, alignment: 4 bytes\n+print-type-size     discriminant: 4 bytes\n+print-type-size     variant `A`: 5 bytes\n+print-type-size         field `.0`: 4 bytes\n+print-type-size         field `.1`: 1 bytes\n+print-type-size     variant `B`: 8 bytes\n+print-type-size         field `.0`: 8 bytes\n+print-type-size type: `E2`: 12 bytes, alignment: 4 bytes\n+print-type-size     discriminant: 1 bytes\n+print-type-size     variant `A`: 7 bytes\n+print-type-size         field `.0`: 1 bytes\n+print-type-size         padding: 2 bytes\n+print-type-size         field `.1`: 4 bytes, alignment: 4 bytes\n+print-type-size     variant `B`: 11 bytes\n+print-type-size         padding: 3 bytes\n+print-type-size         field `.0`: 8 bytes, alignment: 4 bytes\n+print-type-size type: `S`: 8 bytes, alignment: 4 bytes\n+print-type-size     field `.a`: 1 bytes\n+print-type-size     field `.b`: 1 bytes\n+print-type-size     padding: 2 bytes\n+print-type-size     field `.g`: 4 bytes, alignment: 4 bytes"}, {"sha": "875edb4515a1797c5fc01d14326e22fa4954d044", "filename": "src/test/ui/print_type_sizes/variants.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/75825fe1df47866e1821d8b09f4c75930b6e57c1/src%2Ftest%2Fui%2Fprint_type_sizes%2Fvariants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75825fe1df47866e1821d8b09f4c75930b6e57c1/src%2Ftest%2Fui%2Fprint_type_sizes%2Fvariants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprint_type_sizes%2Fvariants.rs?ref=75825fe1df47866e1821d8b09f4c75930b6e57c1", "patch": "@@ -0,0 +1,31 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags: -Z print-type-sizes\n+\n+// This file illustrates two things:\n+//\n+// 1. Only types that appear in a monomorphized function appear in the\n+//    print-type-sizes output, and\n+//\n+// 2. For an enum, the print-type-sizes output will also include the\n+//    size of each variant.\n+\n+pub struct SevenBytes([u8;  7]);\n+pub struct FiftyBytes([u8; 50]);\n+\n+pub enum Enum {\n+    Small(SevenBytes),\n+    Large(FiftyBytes),\n+}\n+\n+pub fn main() {\n+    let _e: Enum;\n+}"}, {"sha": "eed9af26987b46f64929c5895489a8941b62213f", "filename": "src/test/ui/print_type_sizes/variants.stdout", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/75825fe1df47866e1821d8b09f4c75930b6e57c1/src%2Ftest%2Fui%2Fprint_type_sizes%2Fvariants.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/75825fe1df47866e1821d8b09f4c75930b6e57c1/src%2Ftest%2Fui%2Fprint_type_sizes%2Fvariants.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprint_type_sizes%2Fvariants.stdout?ref=75825fe1df47866e1821d8b09f4c75930b6e57c1", "patch": "@@ -0,0 +1,10 @@\n+print-type-size type: `Enum`: 51 bytes, alignment: 1 bytes\n+print-type-size     discriminant: 1 bytes\n+print-type-size     variant `Small`: 7 bytes\n+print-type-size         field `.0`: 7 bytes\n+print-type-size     variant `Large`: 50 bytes\n+print-type-size         field `.0`: 50 bytes\n+print-type-size type: `FiftyBytes`: 50 bytes, alignment: 1 bytes\n+print-type-size     field `.0`: 50 bytes\n+print-type-size type: `SevenBytes`: 7 bytes, alignment: 1 bytes\n+print-type-size     field `.0`: 7 bytes"}]}