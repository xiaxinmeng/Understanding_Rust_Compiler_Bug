{"sha": "67e273ba0e8d0bacc98905c0e536b249f53fc011", "node_id": "C_kwDOAAsO6NoAKDY3ZTI3M2JhMGU4ZDBiYWNjOTg5MDVjMGU1MzZiMjQ5ZjUzZmMwMTE", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-04-15T07:58:57Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-04-15T07:58:57Z"}, "message": "Auto merge of #109900 - cjgillot:disable-const-prop, r=oli-obk\n\nOnly enable ConstProp at mir-opt-level >= 2.\n\nThat pass is not responsible for lints any more, so we can restrict it to optimized builds.\n\nThis reduces the amount of duplicated const-eval messages.", "tree": {"sha": "1e168ed4f19978bb495076fcca9b66065d18d5ac", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1e168ed4f19978bb495076fcca9b66065d18d5ac"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/67e273ba0e8d0bacc98905c0e536b249f53fc011", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/67e273ba0e8d0bacc98905c0e536b249f53fc011", "html_url": "https://github.com/rust-lang/rust/commit/67e273ba0e8d0bacc98905c0e536b249f53fc011", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/67e273ba0e8d0bacc98905c0e536b249f53fc011/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "825c70658e0190bccd93d477907b06e05ad9ccc3", "url": "https://api.github.com/repos/rust-lang/rust/commits/825c70658e0190bccd93d477907b06e05ad9ccc3", "html_url": "https://github.com/rust-lang/rust/commit/825c70658e0190bccd93d477907b06e05ad9ccc3"}, {"sha": "483525eed300f3615f71ee05ddeeb8e0c232aa53", "url": "https://api.github.com/repos/rust-lang/rust/commits/483525eed300f3615f71ee05ddeeb8e0c232aa53", "html_url": "https://github.com/rust-lang/rust/commit/483525eed300f3615f71ee05ddeeb8e0c232aa53"}], "stats": {"total": 116, "additions": 8, "deletions": 108}, "files": [{"sha": "c0146e3efb02e945bb434dffbdfabd8d3cc86f24", "filename": "compiler/rustc_mir_transform/src/const_prop.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/67e273ba0e8d0bacc98905c0e536b249f53fc011/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67e273ba0e8d0bacc98905c0e536b249f53fc011/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs?ref=67e273ba0e8d0bacc98905c0e536b249f53fc011", "patch": "@@ -54,7 +54,7 @@ pub struct ConstProp;\n \n impl<'tcx> MirPass<'tcx> for ConstProp {\n     fn is_enabled(&self, sess: &rustc_session::Session) -> bool {\n-        sess.mir_opt_level() >= 1\n+        sess.mir_opt_level() >= 2\n     }\n \n     #[instrument(skip(self, tcx), level = \"debug\")]\n@@ -854,12 +854,6 @@ impl<'tcx> MutVisitor<'tcx> for ConstPropagator<'_, 'tcx> {\n         }\n     }\n \n-    fn visit_constant(&mut self, constant: &mut Constant<'tcx>, location: Location) {\n-        trace!(\"visit_constant: {:?}\", constant);\n-        self.super_constant(constant, location);\n-        self.eval_constant(constant);\n-    }\n-\n     fn visit_assign(\n         &mut self,\n         place: &mut Place<'tcx>,"}, {"sha": "fc12d423cb09c618b2b97cddccd1fb97caec9fb2", "filename": "compiler/rustc_mir_transform/src/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/67e273ba0e8d0bacc98905c0e536b249f53fc011/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67e273ba0e8d0bacc98905c0e536b249f53fc011/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs?ref=67e273ba0e8d0bacc98905c0e536b249f53fc011", "patch": "@@ -566,8 +566,6 @@ fn run_optimization_passes<'tcx>(tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n             &separate_const_switch::SeparateConstSwitch,\n             &simplify::SimplifyLocals::new(\"before-const-prop\"),\n             &copy_prop::CopyProp,\n-            //\n-            // FIXME(#70073): This pass is responsible for both optimization as well as some lints.\n             &const_prop::ConstProp,\n             &dataflow_const_prop::DataflowConstProp,\n             //"}, {"sha": "1d1f0a38657f3bd14fab12b4a821f25cd9378b6c", "filename": "tests/codegen/optimize-attr-1.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/67e273ba0e8d0bacc98905c0e536b249f53fc011/tests%2Fcodegen%2Foptimize-attr-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67e273ba0e8d0bacc98905c0e536b249f53fc011/tests%2Fcodegen%2Foptimize-attr-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Foptimize-attr-1.rs?ref=67e273ba0e8d0bacc98905c0e536b249f53fc011", "patch": "@@ -8,7 +8,6 @@\n \n // CHECK-LABEL: define{{.*}}i32 @nothing\n // CHECK-SAME: [[NOTHING_ATTRS:#[0-9]+]]\n-// NO-OPT: ret i32 4\n // SIZE-OPT: ret i32 4\n // SPEEC-OPT: ret i32 4\n #[no_mangle]\n@@ -18,7 +17,6 @@ pub fn nothing() -> i32 {\n \n // CHECK-LABEL: define{{.*}}i32 @size\n // CHECK-SAME: [[SIZE_ATTRS:#[0-9]+]]\n-// NO-OPT: ret i32 6\n // SIZE-OPT: ret i32 6\n // SPEED-OPT: ret i32 6\n #[optimize(size)]\n@@ -31,7 +29,6 @@ pub fn size() -> i32 {\n // NO-OPT-SAME: [[NOTHING_ATTRS]]\n // SPEED-OPT-SAME: [[NOTHING_ATTRS]]\n // SIZE-OPT-SAME: [[SPEED_ATTRS:#[0-9]+]]\n-// NO-OPT: ret i32 8\n // SIZE-OPT: ret i32 8\n // SPEED-OPT: ret i32 8\n #[optimize(speed)]"}, {"sha": "1a7fb916e56dbaf3d8ba15a4e84b422557117c16", "filename": "tests/mir-opt/div_overflow.const_dividend.PreCodegen.after.mir", "status": "removed", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/825c70658e0190bccd93d477907b06e05ad9ccc3/tests%2Fmir-opt%2Fdiv_overflow.const_dividend.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/825c70658e0190bccd93d477907b06e05ad9ccc3/tests%2Fmir-opt%2Fdiv_overflow.const_dividend.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fdiv_overflow.const_dividend.PreCodegen.after.mir?ref=825c70658e0190bccd93d477907b06e05ad9ccc3", "patch": "@@ -1,17 +0,0 @@\n-// MIR for `const_dividend` after PreCodegen\n-\n-fn const_dividend(_1: i32) -> i32 {\n-    debug a => _1;                       // in scope 0 at $DIR/div_overflow.rs:+0:23: +0:24\n-    let mut _0: i32;                     // return place in scope 0 at $DIR/div_overflow.rs:+0:34: +0:37\n-    let mut _2: bool;                    // in scope 0 at $DIR/div_overflow.rs:+1:5: +1:12\n-\n-    bb0: {\n-        _2 = Eq(_1, const 0_i32);        // scope 0 at $DIR/div_overflow.rs:+1:5: +1:12\n-        assert(!move _2, \"attempt to divide `{}` by zero\", const 256_i32) -> bb1; // scope 0 at $DIR/div_overflow.rs:+1:5: +1:12\n-    }\n-\n-    bb1: {\n-        _0 = Div(const 256_i32, _1);     // scope 0 at $DIR/div_overflow.rs:+1:5: +1:12\n-        return;                          // scope 0 at $DIR/div_overflow.rs:+2:2: +2:2\n-    }\n-}"}, {"sha": "5526a194be563cb8ab98f4c0b4cab1669ed90ef4", "filename": "tests/mir-opt/div_overflow.const_divisor.PreCodegen.after.mir", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/825c70658e0190bccd93d477907b06e05ad9ccc3/tests%2Fmir-opt%2Fdiv_overflow.const_divisor.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/825c70658e0190bccd93d477907b06e05ad9ccc3/tests%2Fmir-opt%2Fdiv_overflow.const_divisor.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fdiv_overflow.const_divisor.PreCodegen.after.mir?ref=825c70658e0190bccd93d477907b06e05ad9ccc3", "patch": "@@ -1,11 +0,0 @@\n-// MIR for `const_divisor` after PreCodegen\n-\n-fn const_divisor(_1: i32) -> i32 {\n-    debug a => _1;                       // in scope 0 at $DIR/div_overflow.rs:+0:22: +0:23\n-    let mut _0: i32;                     // return place in scope 0 at $DIR/div_overflow.rs:+0:33: +0:36\n-\n-    bb0: {\n-        _0 = Div(_1, const 256_i32);     // scope 0 at $DIR/div_overflow.rs:+1:5: +1:12\n-        return;                          // scope 0 at $DIR/div_overflow.rs:+2:2: +2:2\n-    }\n-}"}, {"sha": "fe34a865b93f0bb41f82e19d204d37d290db1396", "filename": "tests/mir-opt/div_overflow.rs", "status": "removed", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/825c70658e0190bccd93d477907b06e05ad9ccc3/tests%2Fmir-opt%2Fdiv_overflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/825c70658e0190bccd93d477907b06e05ad9ccc3/tests%2Fmir-opt%2Fdiv_overflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fdiv_overflow.rs?ref=825c70658e0190bccd93d477907b06e05ad9ccc3", "patch": "@@ -1,19 +0,0 @@\n-// ignore-wasm32 compiled with panic=abort by default\n-// compile-flags: -Copt-level=0 -Coverflow-checks=yes\n-\n-// Tests that division with a const does not emit a panicking branch for overflow\n-\n-// EMIT_MIR div_overflow.const_divisor.PreCodegen.after.mir\n-pub fn const_divisor(a: i32) -> i32 {\n-    a / 256\n-}\n-\n-// EMIT_MIR div_overflow.const_dividend.PreCodegen.after.mir\n-pub fn const_dividend(a: i32) -> i32 {\n-    256 / a\n-}\n-\n-fn main() {\n-    const_divisor(123);\n-    const_dividend(123);\n-}"}, {"sha": "9cc70d3b0e6ba121dd674bfd82fa8a7d7411ec5a", "filename": "tests/run-make/const_fn_mir/dump.mir", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/67e273ba0e8d0bacc98905c0e536b249f53fc011/tests%2Frun-make%2Fconst_fn_mir%2Fdump.mir", "raw_url": "https://github.com/rust-lang/rust/raw/67e273ba0e8d0bacc98905c0e536b249f53fc011/tests%2Frun-make%2Fconst_fn_mir%2Fdump.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-make%2Fconst_fn_mir%2Fdump.mir?ref=67e273ba0e8d0bacc98905c0e536b249f53fc011", "patch": "@@ -2,9 +2,15 @@\n // and is subject to change without notice. Knock yourself out.\n fn foo() -> i32 {\n     let mut _0: i32;                     // return place in scope 0 at main.rs:4:19: 4:22\n+    let mut _1: (i32, bool);             // in scope 0 at main.rs:5:5: 5:10\n \n     bb0: {\n-        _0 = const 11_i32;               // scope 0 at main.rs:5:5: 5:10\n+        _1 = CheckedAdd(const 5_i32, const 6_i32); // scope 0 at main.rs:5:5: 5:10\n+        assert(!move (_1.1: bool), \"attempt to compute `{} + {}`, which would overflow\", const 5_i32, const 6_i32) -> bb1; // scope 0 at main.rs:5:5: 5:10\n+    }\n+\n+    bb1: {\n+        _0 = move (_1.0: i32);           // scope 0 at main.rs:5:5: 5:10\n         return;                          // scope 0 at main.rs:6:2: 6:2\n     }\n }"}, {"sha": "9b761b00691212db60ead88331c208fb16de4030", "filename": "tests/ui/associated-consts/defaults-not-assumed-fail.stderr", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/67e273ba0e8d0bacc98905c0e536b249f53fc011/tests%2Fui%2Fassociated-consts%2Fdefaults-not-assumed-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/67e273ba0e8d0bacc98905c0e536b249f53fc011/tests%2Fui%2Fassociated-consts%2Fdefaults-not-assumed-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassociated-consts%2Fdefaults-not-assumed-fail.stderr?ref=67e273ba0e8d0bacc98905c0e536b249f53fc011", "patch": "@@ -26,14 +26,6 @@ LL |     assert_eq!(<() as Tr>::B, 0);    // causes the error above\n    |\n    = note: this note originates in the macro `assert_eq` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-note: erroneous constant used\n-  --> $DIR/defaults-not-assumed-fail.rs:33:5\n-   |\n-LL |     assert_eq!(<() as Tr>::B, 0);    // causes the error above\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: this note originates in the macro `assert_eq` (in Nightly builds, run with -Z macro-backtrace for more info)\n-\n error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0080`."}, {"sha": "149d3b5236b2fd622055314891d844bc690bacc9", "filename": "tests/ui/consts/const-err-late.stderr", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/67e273ba0e8d0bacc98905c0e536b249f53fc011/tests%2Fui%2Fconsts%2Fconst-err-late.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/67e273ba0e8d0bacc98905c0e536b249f53fc011/tests%2Fui%2Fconsts%2Fconst-err-late.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fconst-err-late.stderr?ref=67e273ba0e8d0bacc98905c0e536b249f53fc011", "patch": "@@ -28,12 +28,6 @@ note: erroneous constant used\n LL |     black_box((S::<i32>::FOO, S::<u32>::FOO));\n    |                ^^^^^^^^^^^^^\n \n-note: erroneous constant used\n-  --> $DIR/const-err-late.rs:19:16\n-   |\n-LL |     black_box((S::<i32>::FOO, S::<u32>::FOO));\n-   |                ^^^^^^^^^^^^^\n-\n error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0080`."}, {"sha": "f3952809e4bb47b780ed7bd13ef68708e9ec146e", "filename": "tests/ui/consts/const-eval/issue-44578.stderr", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/67e273ba0e8d0bacc98905c0e536b249f53fc011/tests%2Fui%2Fconsts%2Fconst-eval%2Fissue-44578.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/67e273ba0e8d0bacc98905c0e536b249f53fc011/tests%2Fui%2Fconsts%2Fconst-eval%2Fissue-44578.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fconst-eval%2Fissue-44578.stderr?ref=67e273ba0e8d0bacc98905c0e536b249f53fc011", "patch": "@@ -26,14 +26,6 @@ LL |     println!(\"{}\", <Bar<u16, u8> as Foo>::AMT);\n    |\n    = note: this note originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-note: erroneous constant used\n-  --> $DIR/issue-44578.rs:25:20\n-   |\n-LL |     println!(\"{}\", <Bar<u16, u8> as Foo>::AMT);\n-   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: this note originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)\n-\n error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0080`."}, {"sha": "8e22cb74bf56aca7f4138f2cb24fd98e4ae3c789", "filename": "tests/ui/consts/miri_unleashed/assoc_const.stderr", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/67e273ba0e8d0bacc98905c0e536b249f53fc011/tests%2Fui%2Fconsts%2Fmiri_unleashed%2Fassoc_const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/67e273ba0e8d0bacc98905c0e536b249f53fc011/tests%2Fui%2Fconsts%2Fmiri_unleashed%2Fassoc_const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fmiri_unleashed%2Fassoc_const.stderr?ref=67e273ba0e8d0bacc98905c0e536b249f53fc011", "patch": "@@ -25,12 +25,6 @@ note: erroneous constant used\n LL |     let y = <String as Bar<Vec<u32>, String>>::F;\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-note: erroneous constant used\n-  --> $DIR/assoc_const.rs:29:13\n-   |\n-LL |     let y = <String as Bar<Vec<u32>, String>>::F;\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n warning: skipping const checks\n    |\n help: skipping check that does not even have a feature gate"}, {"sha": "ae7b03fc9dde3bef1e2b9f8b75a128da3008c795", "filename": "tests/ui/consts/miri_unleashed/assoc_const_2.stderr", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/67e273ba0e8d0bacc98905c0e536b249f53fc011/tests%2Fui%2Fconsts%2Fmiri_unleashed%2Fassoc_const_2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/67e273ba0e8d0bacc98905c0e536b249f53fc011/tests%2Fui%2Fconsts%2Fmiri_unleashed%2Fassoc_const_2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fmiri_unleashed%2Fassoc_const_2.stderr?ref=67e273ba0e8d0bacc98905c0e536b249f53fc011", "patch": "@@ -16,12 +16,6 @@ note: erroneous constant used\n LL |     let y = <String as Bar<String>>::F;\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-note: erroneous constant used\n-  --> $DIR/assoc_const_2.rs:27:13\n-   |\n-LL |     let y = <String as Bar<String>>::F;\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0080`."}, {"sha": "adefbf336c2498be605a5d34046a28583521acd2", "filename": "tests/ui/consts/uninhabited-const-issue-61744.stderr", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/67e273ba0e8d0bacc98905c0e536b249f53fc011/tests%2Fui%2Fconsts%2Funinhabited-const-issue-61744.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/67e273ba0e8d0bacc98905c0e536b249f53fc011/tests%2Fui%2Fconsts%2Funinhabited-const-issue-61744.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Funinhabited-const-issue-61744.stderr?ref=67e273ba0e8d0bacc98905c0e536b249f53fc011", "patch": "@@ -657,12 +657,6 @@ note: erroneous constant used\n LL |     dbg!(i32::CONSTANT);\n    |          ^^^^^^^^^^^^^\n \n-note: erroneous constant used\n-  --> $DIR/uninhabited-const-issue-61744.rs:18:10\n-   |\n-LL |     dbg!(i32::CONSTANT);\n-   |          ^^^^^^^^^^^^^\n-\n error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0080`."}, {"sha": "510b36edd8f478d02baef4c31e1977c6e5c9abcf", "filename": "tests/ui/limits/issue-55878.stderr", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/67e273ba0e8d0bacc98905c0e536b249f53fc011/tests%2Fui%2Flimits%2Fissue-55878.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/67e273ba0e8d0bacc98905c0e536b249f53fc011/tests%2Fui%2Flimits%2Fissue-55878.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flimits%2Fissue-55878.stderr?ref=67e273ba0e8d0bacc98905c0e536b249f53fc011", "patch": "@@ -25,14 +25,6 @@ LL |     println!(\"Size: {}\", std::mem::size_of::<[u8; u64::MAX as usize]>());\n    |\n    = note: this note originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-note: erroneous constant used\n-  --> $DIR/issue-55878.rs:7:26\n-   |\n-LL |     println!(\"Size: {}\", std::mem::size_of::<[u8; u64::MAX as usize]>());\n-   |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: this note originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)\n-\n error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0080`."}]}