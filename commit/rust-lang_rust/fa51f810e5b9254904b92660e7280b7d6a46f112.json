{"sha": "fa51f810e5b9254904b92660e7280b7d6a46f112", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZhNTFmODEwZTViOTI1NDkwNGI5MjY2MGU3MjgwYjdkNmE0NmYxMTI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-04-29T20:32:41Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-04-29T20:32:41Z"}, "message": "Auto merge of #71689 - Dylan-DPC:rollup-8nyuwm1, r=Dylan-DPC\n\nRollup of 6 pull requests\n\nSuccessful merges:\n\n - #71507 (Document unsafety in core::ptr)\n - #71572 (test iterator chain type length blowup)\n - #71617 (Suggest `into` instead of `try_into` if possible with int types)\n - #71627 (Fix wrong argument in autoderef process)\n - #71678 (Add an index page for nightly rustc docs.)\n - #71680 (Fix doc link to Eq trait from PartialEq trait)\n\nFailed merges:\n\n - #71597 (Rename Unique::empty() -> Unique::dangling())\n\nr? @ghost", "tree": {"sha": "08c2c025d744a576be411fbb260ef72ff98b60ef", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/08c2c025d744a576be411fbb260ef72ff98b60ef"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fa51f810e5b9254904b92660e7280b7d6a46f112", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fa51f810e5b9254904b92660e7280b7d6a46f112", "html_url": "https://github.com/rust-lang/rust/commit/fa51f810e5b9254904b92660e7280b7d6a46f112", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fa51f810e5b9254904b92660e7280b7d6a46f112/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c50bd7e40284839bd0a094be67c48528aeecacb0", "url": "https://api.github.com/repos/rust-lang/rust/commits/c50bd7e40284839bd0a094be67c48528aeecacb0", "html_url": "https://github.com/rust-lang/rust/commit/c50bd7e40284839bd0a094be67c48528aeecacb0"}, {"sha": "d11b5597f8decc07cfed70c0746be82a1008d57a", "url": "https://api.github.com/repos/rust-lang/rust/commits/d11b5597f8decc07cfed70c0746be82a1008d57a", "html_url": "https://github.com/rust-lang/rust/commit/d11b5597f8decc07cfed70c0746be82a1008d57a"}], "stats": {"total": 211, "additions": 137, "deletions": 74}, "files": [{"sha": "7eab92ddc92a95a9ba7b6bc639832633b82f26ee", "filename": "src/bootstrap/doc.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fa51f810e5b9254904b92660e7280b7d6a46f112/src%2Fbootstrap%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa51f810e5b9254904b92660e7280b7d6a46f112/src%2Fbootstrap%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdoc.rs?ref=fa51f810e5b9254904b92660e7280b7d6a46f112", "patch": "@@ -478,7 +478,11 @@ impl Step for Rustc {\n \n         // Build cargo command.\n         let mut cargo = builder.cargo(compiler, Mode::Rustc, target, \"doc\");\n-        cargo.env(\"RUSTDOCFLAGS\", \"--document-private-items\");\n+        cargo.env(\n+            \"RUSTDOCFLAGS\",\n+            \"--document-private-items \\\n+            --enable-index-page -Zunstable-options\",\n+        );\n         compile::rustc_cargo(builder, &mut cargo, target);\n \n         // Only include compiler crates, no dependencies of those, such as `libc`."}, {"sha": "9856efc6bd8a48c080048465d2f81b833363be65", "filename": "src/libcore/cmp.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fa51f810e5b9254904b92660e7280b7d6a46f112/src%2Flibcore%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa51f810e5b9254904b92660e7280b7d6a46f112/src%2Flibcore%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcmp.rs?ref=fa51f810e5b9254904b92660e7280b7d6a46f112", "patch": "@@ -191,6 +191,7 @@ use self::Ordering::*;\n /// assert_eq!(x.eq(&y), false);\n /// ```\n ///\n+/// [`Eq`]: Eq\n /// [`eq`]: PartialEq::eq\n /// [`ne`]: PartialEq::ne\n #[lang = \"eq\"]"}, {"sha": "58f779106f716547b1cddb43e46c4a3f82fc7bd0", "filename": "src/libcore/ptr/mod.rs", "status": "modified", "additions": 23, "deletions": 4, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/fa51f810e5b9254904b92660e7280b7d6a46f112/src%2Flibcore%2Fptr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa51f810e5b9254904b92660e7280b7d6a46f112/src%2Flibcore%2Fptr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr%2Fmod.rs?ref=fa51f810e5b9254904b92660e7280b7d6a46f112", "patch": "@@ -65,8 +65,6 @@\n //! [`write_volatile`]: ./fn.write_volatile.html\n //! [`NonNull::dangling`]: ./struct.NonNull.html#method.dangling\n \n-// ignore-tidy-undocumented-unsafe\n-\n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n use crate::cmp::Ordering;\n@@ -248,14 +246,17 @@ pub(crate) struct FatPtr<T> {\n ///\n /// // create a slice pointer when starting out with a pointer to the first element\n /// let x = [5, 6, 7];\n-/// let ptr = x.as_ptr();\n-/// let slice = ptr::slice_from_raw_parts(ptr, 3);\n+/// let raw_pointer = x.as_ptr();\n+/// let slice = ptr::slice_from_raw_parts(raw_pointer, 3);\n /// assert_eq!(unsafe { &*slice }[2], 7);\n /// ```\n #[inline]\n #[stable(feature = \"slice_from_raw_parts\", since = \"1.42.0\")]\n #[rustc_const_unstable(feature = \"const_slice_from_raw_parts\", issue = \"67456\")]\n pub const fn slice_from_raw_parts<T>(data: *const T, len: usize) -> *const [T] {\n+    // SAFETY: Accessing the value from the `Repr` union is safe since *const [T]\n+    // and FatPtr have the same memory layouts. Only std can make this\n+    // guarantee.\n     unsafe { Repr { raw: FatPtr { data, len } }.rust }\n }\n \n@@ -269,10 +270,28 @@ pub const fn slice_from_raw_parts<T>(data: *const T, len: usize) -> *const [T] {\n ///\n /// [`slice_from_raw_parts`]: fn.slice_from_raw_parts.html\n /// [`from_raw_parts_mut`]: ../../std/slice/fn.from_raw_parts_mut.html\n+///\n+/// # Examples\n+///\n+/// ```rust\n+/// use std::ptr;\n+///\n+/// let x = &mut [5, 6, 7];\n+/// let raw_pointer = x.as_mut_ptr();\n+/// let slice = ptr::slice_from_raw_parts_mut(raw_pointer, 3);\n+///\n+/// unsafe {\n+///     (*slice)[2] = 99; // assign a value at an index in the slice\n+/// };\n+///\n+/// assert_eq!(unsafe { &*slice }[2], 99);\n+/// ```\n #[inline]\n #[stable(feature = \"slice_from_raw_parts\", since = \"1.42.0\")]\n #[rustc_const_unstable(feature = \"const_slice_from_raw_parts\", issue = \"67456\")]\n pub const fn slice_from_raw_parts_mut<T>(data: *mut T, len: usize) -> *mut [T] {\n+    // SAFETY: Accessing the value from the `Repr` union is safe since *mut [T]\n+    // and FatPtr have the same memory layouts\n     unsafe { Repr { raw: FatPtr { data, len } }.rust_mut }\n }\n "}, {"sha": "7d08503215ed022bfb1920d791d9855ac1665d79", "filename": "src/libcore/ptr/non_null.rs", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/fa51f810e5b9254904b92660e7280b7d6a46f112/src%2Flibcore%2Fptr%2Fnon_null.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa51f810e5b9254904b92660e7280b7d6a46f112/src%2Flibcore%2Fptr%2Fnon_null.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr%2Fnon_null.rs?ref=fa51f810e5b9254904b92660e7280b7d6a46f112", "patch": "@@ -7,8 +7,6 @@ use crate::mem;\n use crate::ops::{CoerceUnsized, DispatchFromDyn};\n use crate::ptr::Unique;\n \n-// ignore-tidy-undocumented-unsafe\n-\n /// `*mut T` but non-zero and covariant.\n ///\n /// This is often the correct thing to use when building data structures using\n@@ -69,6 +67,9 @@ impl<T: Sized> NonNull<T> {\n     #[rustc_const_stable(feature = \"const_nonnull_dangling\", since = \"1.32.0\")]\n     #[inline]\n     pub const fn dangling() -> Self {\n+        // SAFETY: mem::align_of() returns a non-zero usize which is then casted\n+        // to a *mut T. Therefore, `ptr` is not null and the conditions for\n+        // calling new_unchecked() are respected.\n         unsafe {\n             let ptr = mem::align_of::<T>() as *mut T;\n             NonNull::new_unchecked(ptr)\n@@ -93,7 +94,12 @@ impl<T: ?Sized> NonNull<T> {\n     #[stable(feature = \"nonnull\", since = \"1.25.0\")]\n     #[inline]\n     pub fn new(ptr: *mut T) -> Option<Self> {\n-        if !ptr.is_null() { Some(unsafe { Self::new_unchecked(ptr) }) } else { None }\n+        if !ptr.is_null() {\n+            // SAFETY: The pointer is already checked and is not null\n+            Some(unsafe { Self::new_unchecked(ptr) })\n+        } else {\n+            None\n+        }\n     }\n \n     /// Acquires the underlying `*mut` pointer.\n@@ -131,6 +137,7 @@ impl<T: ?Sized> NonNull<T> {\n     #[rustc_const_stable(feature = \"const_nonnull_cast\", since = \"1.32.0\")]\n     #[inline]\n     pub const fn cast<U>(self) -> NonNull<U> {\n+        // SAFETY: `self` is a `NonNull` pointer which is necessarily non-null\n         unsafe { NonNull::new_unchecked(self.as_ptr() as *mut U) }\n     }\n }\n@@ -205,6 +212,8 @@ impl<T: ?Sized> hash::Hash for NonNull<T> {\n impl<T: ?Sized> From<Unique<T>> for NonNull<T> {\n     #[inline]\n     fn from(unique: Unique<T>) -> Self {\n+        // SAFETY: A Unique pointer cannot be null, so the conditions for\n+        // new_unchecked() are respected.\n         unsafe { NonNull::new_unchecked(unique.as_ptr()) }\n     }\n }\n@@ -213,6 +222,7 @@ impl<T: ?Sized> From<Unique<T>> for NonNull<T> {\n impl<T: ?Sized> From<&mut T> for NonNull<T> {\n     #[inline]\n     fn from(reference: &mut T) -> Self {\n+        // SAFETY: A mutable reference cannot be null.\n         unsafe { NonNull { pointer: reference as *mut T } }\n     }\n }\n@@ -221,6 +231,8 @@ impl<T: ?Sized> From<&mut T> for NonNull<T> {\n impl<T: ?Sized> From<&T> for NonNull<T> {\n     #[inline]\n     fn from(reference: &T) -> Self {\n+        // SAFETY: A reference cannot be null, so the conditions for\n+        // new_unchecked() are respected.\n         unsafe { NonNull { pointer: reference as *const T } }\n     }\n }"}, {"sha": "f5a5baceacce875ae56099629418d364888cf844", "filename": "src/libcore/ptr/unique.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/fa51f810e5b9254904b92660e7280b7d6a46f112/src%2Flibcore%2Fptr%2Funique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa51f810e5b9254904b92660e7280b7d6a46f112/src%2Flibcore%2Fptr%2Funique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr%2Funique.rs?ref=fa51f810e5b9254904b92660e7280b7d6a46f112", "patch": "@@ -73,6 +73,8 @@ impl<T: Sized> Unique<T> {\n     // FIXME: rename to dangling() to match NonNull?\n     #[inline]\n     pub const fn empty() -> Self {\n+        // SAFETY: mem::align_of() returns a valid, non-null pointer. The\n+        // conditions to call new_unchecked() are thus respected.\n         unsafe { Unique::new_unchecked(mem::align_of::<T>() as *mut T) }\n     }\n }\n@@ -93,6 +95,7 @@ impl<T: ?Sized> Unique<T> {\n     #[inline]\n     pub fn new(ptr: *mut T) -> Option<Self> {\n         if !ptr.is_null() {\n+            // SAFETY: The pointer has already been checked and is not null.\n             Some(unsafe { Unique { pointer: ptr as _, _marker: PhantomData } })\n         } else {\n             None\n@@ -128,6 +131,9 @@ impl<T: ?Sized> Unique<T> {\n     /// Casts to a pointer of another type.\n     #[inline]\n     pub const fn cast<U>(self) -> Unique<U> {\n+        // SAFETY: Unique::new_unchecked() creates a new unique and needs\n+        // the given pointer to not be null.\n+        // Since we are passing self as a pointer, it cannot be null.\n         unsafe { Unique::new_unchecked(self.as_ptr() as *mut U) }\n     }\n }\n@@ -167,6 +173,7 @@ impl<T: ?Sized> fmt::Pointer for Unique<T> {\n impl<T: ?Sized> From<&mut T> for Unique<T> {\n     #[inline]\n     fn from(reference: &mut T) -> Self {\n+        // SAFETY: A mutable reference cannot be null\n         unsafe { Unique { pointer: reference as *mut T, _marker: PhantomData } }\n     }\n }"}, {"sha": "2bb00553232ad51e763d7ac3836c6063e685e967", "filename": "src/librustc_typeck/check/autoderef.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fa51f810e5b9254904b92660e7280b7d6a46f112/src%2Flibrustc_typeck%2Fcheck%2Fautoderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa51f810e5b9254904b92660e7280b7d6a46f112/src%2Flibrustc_typeck%2Fcheck%2Fautoderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fautoderef.rs?ref=fa51f810e5b9254904b92660e7280b7d6a46f112", "patch": "@@ -114,10 +114,10 @@ impl<'a, 'tcx> Autoderef<'a, 'tcx> {\n \n         let tcx = self.infcx.tcx;\n \n-        // <cur_ty as Deref>\n+        // <ty as Deref>\n         let trait_ref = TraitRef {\n             def_id: tcx.lang_items().deref_trait()?,\n-            substs: tcx.mk_substs_trait(self.cur_ty, &[]),\n+            substs: tcx.mk_substs_trait(ty, &[]),\n         };\n \n         let cause = traits::ObligationCause::misc(self.span, self.body_id);"}, {"sha": "aa36bec6e1e8813f5d543f108f0c59d5bbfeb4ca", "filename": "src/librustc_typeck/check/demand.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/fa51f810e5b9254904b92660e7280b7d6a46f112/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa51f810e5b9254904b92660e7280b7d6a46f112/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs?ref=fa51f810e5b9254904b92660e7280b7d6a46f112", "patch": "@@ -767,7 +767,16 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     suggest_to_change_suffix_or_into(err, is_fallible);\n                     true\n                 }\n-                (&ty::Int(_), &ty::Uint(_)) | (&ty::Uint(_), &ty::Int(_)) => {\n+                (&ty::Int(exp), &ty::Uint(found)) => {\n+                    let is_fallible = match (exp.bit_width(), found.bit_width()) {\n+                        (Some(exp), Some(found)) if found < exp => false,\n+                        (None, Some(8)) => false,\n+                        _ => true,\n+                    };\n+                    suggest_to_change_suffix_or_into(err, is_fallible);\n+                    true\n+                }\n+                (&ty::Uint(_), &ty::Int(_)) => {\n                     suggest_to_change_suffix_or_into(err, true);\n                     true\n                 }"}, {"sha": "046e37840849ef94c2b60f4fe3fa3cfc51ea9b9a", "filename": "src/test/ui/iterators/issue-58952-filter-type-length.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/fa51f810e5b9254904b92660e7280b7d6a46f112/src%2Ftest%2Fui%2Fiterators%2Fissue-58952-filter-type-length.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa51f810e5b9254904b92660e7280b7d6a46f112/src%2Ftest%2Fui%2Fiterators%2Fissue-58952-filter-type-length.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fiterators%2Fissue-58952-filter-type-length.rs?ref=fa51f810e5b9254904b92660e7280b7d6a46f112", "patch": "@@ -0,0 +1,31 @@\n+// run-pass\n+//! This snippet causes the type length to blowup exponentially,\n+//! so check that we don't accidentially exceed the type length limit.\n+// FIXME: Once the size of iterator adaptors is further reduced,\n+// increase the complexity of this test.\n+\n+fn main() {\n+    let c = 2;\n+    let bv = vec![2];\n+    let b = bv\n+        .iter()\n+        .filter(|a| **a == c);\n+\n+    let _a = vec![1, 2, 3]\n+        .into_iter()\n+        .filter(|a| b.clone().any(|b| *b == *a))\n+        .filter(|a| b.clone().any(|b| *b == *a))\n+        .filter(|a| b.clone().any(|b| *b == *a))\n+        .filter(|a| b.clone().any(|b| *b == *a))\n+        .filter(|a| b.clone().any(|b| *b == *a))\n+        .filter(|a| b.clone().any(|b| *b == *a))\n+        .filter(|a| b.clone().any(|b| *b == *a))\n+        .filter(|a| b.clone().any(|b| *b == *a))\n+        .filter(|a| b.clone().any(|b| *b == *a))\n+        .filter(|a| b.clone().any(|b| *b == *a))\n+        .filter(|a| b.clone().any(|b| *b == *a))\n+        .filter(|a| b.clone().any(|b| *b == *a))\n+        .filter(|a| b.clone().any(|b| *b == *a))\n+        .filter(|a| b.clone().any(|b| *b == *a))\n+        .collect::<Vec<_>>();\n+}"}, {"sha": "3f900062cbb6e459ae73f41a98c61bd3565c4486", "filename": "src/test/ui/numeric/numeric-cast-2.stderr", "status": "modified", "additions": 8, "deletions": 14, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/fa51f810e5b9254904b92660e7280b7d6a46f112/src%2Ftest%2Fui%2Fnumeric%2Fnumeric-cast-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa51f810e5b9254904b92660e7280b7d6a46f112/src%2Ftest%2Fui%2Fnumeric%2Fnumeric-cast-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnumeric%2Fnumeric-cast-2.stderr?ref=fa51f810e5b9254904b92660e7280b7d6a46f112", "patch": "@@ -15,27 +15,21 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast-2.rs:7:18\n    |\n LL |     let y: i64 = x + x;\n-   |            ---   ^^^^^ expected `i64`, found `u16`\n-   |            |\n+   |            ---   ^^^^^\n+   |            |     |\n+   |            |     expected `i64`, found `u16`\n+   |            |     help: you can convert an `u16` to `i64`: `(x + x).into()`\n    |            expected due to this\n-   |\n-help: you can convert an `u16` to `i64` and panic if the converted value wouldn't fit\n-   |\n-LL |     let y: i64 = (x + x).try_into().unwrap();\n-   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-2.rs:9:18\n    |\n LL |     let z: i32 = x + x;\n-   |            ---   ^^^^^ expected `i32`, found `u16`\n-   |            |\n+   |            ---   ^^^^^\n+   |            |     |\n+   |            |     expected `i32`, found `u16`\n+   |            |     help: you can convert an `u16` to `i32`: `(x + x).into()`\n    |            expected due to this\n-   |\n-help: you can convert an `u16` to `i32` and panic if the converted value wouldn't fit\n-   |\n-LL |     let z: i32 = (x + x).try_into().unwrap();\n-   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 3 previous errors\n "}, {"sha": "cf0560a1077724a11a12c19b91bcd7f74e915f0b", "filename": "src/test/ui/numeric/numeric-cast.fixed", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/fa51f810e5b9254904b92660e7280b7d6a46f112/src%2Ftest%2Fui%2Fnumeric%2Fnumeric-cast.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/fa51f810e5b9254904b92660e7280b7d6a46f112/src%2Ftest%2Fui%2Fnumeric%2Fnumeric-cast.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnumeric%2Fnumeric-cast.fixed?ref=fa51f810e5b9254904b92660e7280b7d6a46f112", "patch": "@@ -49,7 +49,7 @@ fn main() {\n     //~^ ERROR mismatched types\n     foo::<isize>(x_u16.try_into().unwrap());\n     //~^ ERROR mismatched types\n-    foo::<isize>(x_u8.try_into().unwrap());\n+    foo::<isize>(x_u8.into());\n     //~^ ERROR mismatched types\n     foo::<isize>(x_isize);\n     foo::<isize>(x_i64.try_into().unwrap());\n@@ -89,11 +89,11 @@ fn main() {\n     //~^ ERROR mismatched types\n     foo::<i64>(x_u64.try_into().unwrap());\n     //~^ ERROR mismatched types\n-    foo::<i64>(x_u32.try_into().unwrap());\n+    foo::<i64>(x_u32.into());\n     //~^ ERROR mismatched types\n-    foo::<i64>(x_u16.try_into().unwrap());\n+    foo::<i64>(x_u16.into());\n     //~^ ERROR mismatched types\n-    foo::<i64>(x_u8.try_into().unwrap());\n+    foo::<i64>(x_u8.into());\n     //~^ ERROR mismatched types\n     foo::<i64>(x_isize.try_into().unwrap());\n     //~^ ERROR mismatched types\n@@ -135,9 +135,9 @@ fn main() {\n     //~^ ERROR mismatched types\n     foo::<i32>(x_u32.try_into().unwrap());\n     //~^ ERROR mismatched types\n-    foo::<i32>(x_u16.try_into().unwrap());\n+    foo::<i32>(x_u16.into());\n     //~^ ERROR mismatched types\n-    foo::<i32>(x_u8.try_into().unwrap());\n+    foo::<i32>(x_u8.into());\n     //~^ ERROR mismatched types\n     foo::<i32>(x_isize.try_into().unwrap());\n     //~^ ERROR mismatched types\n@@ -181,7 +181,7 @@ fn main() {\n     //~^ ERROR mismatched types\n     foo::<i16>(x_u16.try_into().unwrap());\n     //~^ ERROR mismatched types\n-    foo::<i16>(x_u8.try_into().unwrap());\n+    foo::<i16>(x_u8.into());\n     //~^ ERROR mismatched types\n     foo::<i16>(x_isize.try_into().unwrap());\n     //~^ ERROR mismatched types"}, {"sha": "cc1aa72d21451735aa556b404623486bd5914a6b", "filename": "src/test/ui/numeric/numeric-cast.stderr", "status": "modified", "additions": 28, "deletions": 42, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/fa51f810e5b9254904b92660e7280b7d6a46f112/src%2Ftest%2Fui%2Fnumeric%2Fnumeric-cast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa51f810e5b9254904b92660e7280b7d6a46f112/src%2Ftest%2Fui%2Fnumeric%2Fnumeric-cast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnumeric%2Fnumeric-cast.stderr?ref=fa51f810e5b9254904b92660e7280b7d6a46f112", "patch": "@@ -141,12 +141,10 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:52:18\n    |\n LL |     foo::<isize>(x_u8);\n-   |                  ^^^^ expected `isize`, found `u8`\n-   |\n-help: you can convert an `u8` to `isize` and panic if the converted value wouldn't fit\n-   |\n-LL |     foo::<isize>(x_u8.try_into().unwrap());\n-   |                  ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                  ^^^^\n+   |                  |\n+   |                  expected `isize`, found `u8`\n+   |                  help: you can convert an `u8` to `isize`: `x_u8.into()`\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:55:18\n@@ -307,34 +305,28 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:92:16\n    |\n LL |     foo::<i64>(x_u32);\n-   |                ^^^^^ expected `i64`, found `u32`\n-   |\n-help: you can convert an `u32` to `i64` and panic if the converted value wouldn't fit\n-   |\n-LL |     foo::<i64>(x_u32.try_into().unwrap());\n-   |                ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                ^^^^^\n+   |                |\n+   |                expected `i64`, found `u32`\n+   |                help: you can convert an `u32` to `i64`: `x_u32.into()`\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:94:16\n    |\n LL |     foo::<i64>(x_u16);\n-   |                ^^^^^ expected `i64`, found `u16`\n-   |\n-help: you can convert an `u16` to `i64` and panic if the converted value wouldn't fit\n-   |\n-LL |     foo::<i64>(x_u16.try_into().unwrap());\n-   |                ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                ^^^^^\n+   |                |\n+   |                expected `i64`, found `u16`\n+   |                help: you can convert an `u16` to `i64`: `x_u16.into()`\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:96:16\n    |\n LL |     foo::<i64>(x_u8);\n-   |                ^^^^ expected `i64`, found `u8`\n-   |\n-help: you can convert an `u8` to `i64` and panic if the converted value wouldn't fit\n-   |\n-LL |     foo::<i64>(x_u8.try_into().unwrap());\n-   |                ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                ^^^^\n+   |                |\n+   |                expected `i64`, found `u8`\n+   |                help: you can convert an `u8` to `i64`: `x_u8.into()`\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:98:16\n@@ -506,23 +498,19 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:138:16\n    |\n LL |     foo::<i32>(x_u16);\n-   |                ^^^^^ expected `i32`, found `u16`\n-   |\n-help: you can convert an `u16` to `i32` and panic if the converted value wouldn't fit\n-   |\n-LL |     foo::<i32>(x_u16.try_into().unwrap());\n-   |                ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                ^^^^^\n+   |                |\n+   |                expected `i32`, found `u16`\n+   |                help: you can convert an `u16` to `i32`: `x_u16.into()`\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:140:16\n    |\n LL |     foo::<i32>(x_u8);\n-   |                ^^^^ expected `i32`, found `u8`\n-   |\n-help: you can convert an `u8` to `i32` and panic if the converted value wouldn't fit\n-   |\n-LL |     foo::<i32>(x_u8.try_into().unwrap());\n-   |                ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                ^^^^\n+   |                |\n+   |                expected `i32`, found `u8`\n+   |                help: you can convert an `u8` to `i32`: `x_u8.into()`\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:142:16\n@@ -709,12 +697,10 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:184:16\n    |\n LL |     foo::<i16>(x_u8);\n-   |                ^^^^ expected `i16`, found `u8`\n-   |\n-help: you can convert an `u8` to `i16` and panic if the converted value wouldn't fit\n-   |\n-LL |     foo::<i16>(x_u8.try_into().unwrap());\n-   |                ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                ^^^^\n+   |                |\n+   |                expected `i16`, found `u8`\n+   |                help: you can convert an `u8` to `i16`: `x_u8.into()`\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:186:16"}]}