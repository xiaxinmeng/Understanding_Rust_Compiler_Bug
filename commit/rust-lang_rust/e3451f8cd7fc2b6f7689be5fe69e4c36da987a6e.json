{"sha": "e3451f8cd7fc2b6f7689be5fe69e4c36da987a6e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUzNDUxZjhjZDdmYzJiNmY3Njg5YmU1ZmU2OWU0YzM2ZGE5ODdhNmU=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-03-06T08:25:31Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-03-06T08:25:31Z"}, "message": "Rollup merge of #48546 - GuillaumeGomez:raw-string-error-note, r=estebank\n\nRaw string error note\n\nFixes #48395.\n\nI think this note should be helpful enough to solve the issue.", "tree": {"sha": "365550c047c14c303b4d08580927cd848e0fd880", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/365550c047c14c303b4d08580927cd848e0fd880"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e3451f8cd7fc2b6f7689be5fe69e4c36da987a6e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJanlB7CRBK7hj4Ov3rIwAAdHIIADwFYB5HlwydkbcJOwrfW2xI\nMNCXcf4AuOHHflMRlGwsvC103qH/2jqCvkNyjBVtXE+7qdAlEAhs4TJAENTMDCST\nr8R6cBQj2beACTCKurnkonXRhRgaXQjYcplaBfsU1tktHufx8PMiiioCTX1sxe90\nKo6pX3hSpy1CSgzjsR/Kqbc7YqqIO0yytwZcoDIYj92EQ7KfOmypZ+w7OkMNLj3K\n307pBFMOBafqSsHYUa1T4/zSfO03nvQD/USet4IicBHuwniC/+E/mNPuLgsqFbjt\nFULCuKSC9TFjlBt6mhb+YT/y/xcLHTSp7IZIyV48KogzCaBaMxK/zfy4DD2DWCQ=\n=1fc7\n-----END PGP SIGNATURE-----\n", "payload": "tree 365550c047c14c303b4d08580927cd848e0fd880\nparent 813ac2c36b9b5ed788a36418a3a192782f5fb9ef\nparent 1c191b209b3af4f23e4bb1c249e0f259f2ee0390\nauthor kennytm <kennytm@gmail.com> 1520324731 +0800\ncommitter GitHub <noreply@github.com> 1520324731 +0800\n\nRollup merge of #48546 - GuillaumeGomez:raw-string-error-note, r=estebank\n\nRaw string error note\n\nFixes #48395.\n\nI think this note should be helpful enough to solve the issue.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e3451f8cd7fc2b6f7689be5fe69e4c36da987a6e", "html_url": "https://github.com/rust-lang/rust/commit/e3451f8cd7fc2b6f7689be5fe69e4c36da987a6e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e3451f8cd7fc2b6f7689be5fe69e4c36da987a6e/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "813ac2c36b9b5ed788a36418a3a192782f5fb9ef", "url": "https://api.github.com/repos/rust-lang/rust/commits/813ac2c36b9b5ed788a36418a3a192782f5fb9ef", "html_url": "https://github.com/rust-lang/rust/commit/813ac2c36b9b5ed788a36418a3a192782f5fb9ef"}, {"sha": "1c191b209b3af4f23e4bb1c249e0f259f2ee0390", "url": "https://api.github.com/repos/rust-lang/rust/commits/1c191b209b3af4f23e4bb1c249e0f259f2ee0390", "html_url": "https://github.com/rust-lang/rust/commit/1c191b209b3af4f23e4bb1c249e0f259f2ee0390"}], "stats": {"total": 55, "additions": 47, "deletions": 8}, "files": [{"sha": "94195ccc72c49d576399c0f829ed69d38cc666d5", "filename": "src/libsyntax/parse/lexer/mod.rs", "status": "modified", "additions": 25, "deletions": 8, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/e3451f8cd7fc2b6f7689be5fe69e4c36da987a6e/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3451f8cd7fc2b6f7689be5fe69e4c36da987a6e/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs?ref=e3451f8cd7fc2b6f7689be5fe69e4c36da987a6e", "patch": "@@ -132,6 +132,18 @@ impl<'a> StringReader<'a> {\n         self.advance_token()?;\n         Ok(ret_val)\n     }\n+\n+    fn fail_unterminated_raw_string(&self, pos: BytePos, hash_count: usize) {\n+        let mut err = self.struct_span_fatal(pos, pos, \"unterminated raw string\");\n+        err.span_label(self.mk_sp(pos, pos), \"unterminated raw string\");\n+        if hash_count > 0 {\n+            err.note(&format!(\"this raw string should be terminated with `\\\"{}`\",\n+                              \"#\".repeat(hash_count)));\n+        }\n+        err.emit();\n+        FatalError.raise();\n+    }\n+\n     fn fatal(&self, m: &str) -> FatalError {\n         self.fatal_span(self.peek_span, m)\n     }\n@@ -269,6 +281,15 @@ impl<'a> StringReader<'a> {\n         Self::push_escaped_char_for_msg(&mut m, c);\n         self.fatal_span_(from_pos, to_pos, &m[..])\n     }\n+\n+    fn struct_span_fatal(&self,\n+                         from_pos: BytePos,\n+                         to_pos: BytePos,\n+                         m: &str)\n+                         -> DiagnosticBuilder<'a> {\n+        self.sess.span_diagnostic.struct_span_fatal(self.mk_sp(from_pos, to_pos), m)\n+    }\n+\n     fn struct_fatal_span_char(&self,\n                               from_pos: BytePos,\n                               to_pos: BytePos,\n@@ -1404,8 +1425,7 @@ impl<'a> StringReader<'a> {\n                 }\n \n                 if self.is_eof() {\n-                    let last_bpos = self.pos;\n-                    self.fatal_span_(start_bpos, last_bpos, \"unterminated raw string\").raise();\n+                    self.fail_unterminated_raw_string(start_bpos, hash_count);\n                 } else if !self.ch_is('\"') {\n                     let last_bpos = self.pos;\n                     let curr_char = self.ch.unwrap();\n@@ -1421,8 +1441,7 @@ impl<'a> StringReader<'a> {\n                 let mut valid = true;\n                 'outer: loop {\n                     if self.is_eof() {\n-                        let last_bpos = self.pos;\n-                        self.fatal_span_(start_bpos, last_bpos, \"unterminated raw string\").raise();\n+                        self.fail_unterminated_raw_string(start_bpos, hash_count);\n                     }\n                     // if self.ch_is('\"') {\n                     // content_end_bpos = self.pos;\n@@ -1636,8 +1655,7 @@ impl<'a> StringReader<'a> {\n         }\n \n         if self.is_eof() {\n-            let pos = self.pos;\n-            self.fatal_span_(start_bpos, pos, \"unterminated raw string\").raise();\n+            self.fail_unterminated_raw_string(start_bpos, hash_count);\n         } else if !self.ch_is('\"') {\n             let pos = self.pos;\n             let ch = self.ch.unwrap();\n@@ -1653,8 +1671,7 @@ impl<'a> StringReader<'a> {\n         'outer: loop {\n             match self.ch {\n                 None => {\n-                    let pos = self.pos;\n-                    self.fatal_span_(start_bpos, pos, \"unterminated raw string\").raise()\n+                    self.fail_unterminated_raw_string(start_bpos, hash_count);\n                 }\n                 Some('\"') => {\n                     content_end_bpos = self.pos;"}, {"sha": "f1eb91d44fda0f7ef530566e89235dc180e1e6f2", "filename": "src/test/ui/raw_string.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e3451f8cd7fc2b6f7689be5fe69e4c36da987a6e/src%2Ftest%2Fui%2Fraw_string.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3451f8cd7fc2b6f7689be5fe69e4c36da987a6e/src%2Ftest%2Fui%2Fraw_string.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fraw_string.rs?ref=e3451f8cd7fc2b6f7689be5fe69e4c36da987a6e", "patch": "@@ -0,0 +1,14 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {\n+    let x = r##\"lol\"#;\n+    //~^ ERROR unterminated raw string\n+}"}, {"sha": "b8aa596ef953a19230f426244f896517ce5c12ed", "filename": "src/test/ui/raw_string.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e3451f8cd7fc2b6f7689be5fe69e4c36da987a6e/src%2Ftest%2Fui%2Fraw_string.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e3451f8cd7fc2b6f7689be5fe69e4c36da987a6e/src%2Ftest%2Fui%2Fraw_string.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fraw_string.stderr?ref=e3451f8cd7fc2b6f7689be5fe69e4c36da987a6e", "patch": "@@ -0,0 +1,8 @@\n+error: unterminated raw string\n+  --> $DIR/raw_string.rs:12:13\n+   |\n+LL |     let x = r##\"lol\"#;\n+   |             ^ unterminated raw string\n+   |\n+   = note: this raw string should be terminated with `\"##`\n+"}]}