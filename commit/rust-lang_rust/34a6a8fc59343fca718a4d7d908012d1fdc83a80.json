{"sha": "34a6a8fc59343fca718a4d7d908012d1fdc83a80", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM0YTZhOGZjNTkzNDNmY2E3MThhNGQ3ZDkwODAxMmQxZmRjODNhODA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-07-26T03:31:22Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-07-26T03:31:22Z"}, "message": "auto merge of #15975 : dotdash/rust/unwind_lifetimes, r=pcwalton\n\nCurrently we don't emit lifetime end markers when translating the\r\nunwinding code. I omitted that when I added the support for lifetime\r\nintrinsics, because I initially made the mistake of just returning true\r\nin clean_on_unwind(). That caused almost all calls to be translated as\r\ninvokes, leading to quite awful results.\r\n\r\nTo correctly emit the lifetime end markers, we must differentiate\r\nbetween cleanup that requires unwinding and such cleanup that just wants\r\nto emit code during unwinding.", "tree": {"sha": "303b7c9087c10d21c79a1f2c8ce9093cc533fc33", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/303b7c9087c10d21c79a1f2c8ce9093cc533fc33"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/34a6a8fc59343fca718a4d7d908012d1fdc83a80", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/34a6a8fc59343fca718a4d7d908012d1fdc83a80", "html_url": "https://github.com/rust-lang/rust/commit/34a6a8fc59343fca718a4d7d908012d1fdc83a80", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/34a6a8fc59343fca718a4d7d908012d1fdc83a80/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cf1381c1d000a24f95be7d53c4318c18c2daddbb", "url": "https://api.github.com/repos/rust-lang/rust/commits/cf1381c1d000a24f95be7d53c4318c18c2daddbb", "html_url": "https://github.com/rust-lang/rust/commit/cf1381c1d000a24f95be7d53c4318c18c2daddbb"}, {"sha": "b13cad3a9cef1d1fbc97434d9f3081788548e811", "url": "https://api.github.com/repos/rust-lang/rust/commits/b13cad3a9cef1d1fbc97434d9f3081788548e811", "html_url": "https://github.com/rust-lang/rust/commit/b13cad3a9cef1d1fbc97434d9f3081788548e811"}], "stats": {"total": 29, "additions": 21, "deletions": 8}, "files": [{"sha": "cf2410f6571554d1589849e2bf7d59875617bfaa", "filename": "src/librustc/middle/trans/cleanup.rs", "status": "modified", "additions": 21, "deletions": 8, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/34a6a8fc59343fca718a4d7d908012d1fdc83a80/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcleanup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34a6a8fc59343fca718a4d7d908012d1fdc83a80/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcleanup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcleanup.rs?ref=34a6a8fc59343fca718a4d7d908012d1fdc83a80", "patch": "@@ -68,6 +68,7 @@ pub struct CachedEarlyExit {\n }\n \n pub trait Cleanup {\n+    fn must_unwind(&self) -> bool;\n     fn clean_on_unwind(&self) -> bool;\n     fn trans<'a>(&self, bcx: &'a Block<'a>) -> &'a Block<'a>;\n }\n@@ -252,7 +253,7 @@ impl<'a> CleanupMethods<'a> for FunctionContext<'a> {\n         if !ty::type_needs_drop(self.ccx.tcx(), ty) { return; }\n         let drop = box DropValue {\n             is_immediate: false,\n-            on_unwind: ty::type_needs_unwind_cleanup(self.ccx.tcx(), ty),\n+            must_unwind: ty::type_needs_unwind_cleanup(self.ccx.tcx(), ty),\n             val: val,\n             ty: ty,\n             zero: false\n@@ -278,7 +279,7 @@ impl<'a> CleanupMethods<'a> for FunctionContext<'a> {\n         if !ty::type_needs_drop(self.ccx.tcx(), ty) { return; }\n         let drop = box DropValue {\n             is_immediate: false,\n-            on_unwind: ty::type_needs_unwind_cleanup(self.ccx.tcx(), ty),\n+            must_unwind: ty::type_needs_unwind_cleanup(self.ccx.tcx(), ty),\n             val: val,\n             ty: ty,\n             zero: true\n@@ -304,7 +305,7 @@ impl<'a> CleanupMethods<'a> for FunctionContext<'a> {\n         if !ty::type_needs_drop(self.ccx.tcx(), ty) { return; }\n         let drop = box DropValue {\n             is_immediate: true,\n-            on_unwind: ty::type_needs_unwind_cleanup(self.ccx.tcx(), ty),\n+            must_unwind: ty::type_needs_unwind_cleanup(self.ccx.tcx(), ty),\n             val: val,\n             ty: ty,\n             zero: false\n@@ -793,10 +794,10 @@ impl<'a> CleanupScope<'a> {\n     }\n \n     fn needs_invoke(&self) -> bool {\n-        /*! True if this scope has cleanups for use during unwinding */\n+        /*! True if this scope has cleanups that need unwinding */\n \n         self.cached_landing_pad.is_some() ||\n-            self.cleanups.iter().any(|c| c.clean_on_unwind())\n+            self.cleanups.iter().any(|c| c.must_unwind())\n     }\n \n     fn block_name(&self, prefix: &str) -> String {\n@@ -864,15 +865,19 @@ impl EarlyExitLabel {\n \n pub struct DropValue {\n     is_immediate: bool,\n-    on_unwind: bool,\n+    must_unwind: bool,\n     val: ValueRef,\n     ty: ty::t,\n     zero: bool\n }\n \n impl Cleanup for DropValue {\n+    fn must_unwind(&self) -> bool {\n+        self.must_unwind\n+    }\n+\n     fn clean_on_unwind(&self) -> bool {\n-        self.on_unwind\n+        self.must_unwind\n     }\n \n     fn trans<'a>(&self, bcx: &'a Block<'a>) -> &'a Block<'a> {\n@@ -900,6 +905,10 @@ pub struct FreeValue {\n }\n \n impl Cleanup for FreeValue {\n+    fn must_unwind(&self) -> bool {\n+        true\n+    }\n+\n     fn clean_on_unwind(&self) -> bool {\n         true\n     }\n@@ -921,10 +930,14 @@ pub struct LifetimeEnd {\n }\n \n impl Cleanup for LifetimeEnd {\n-    fn clean_on_unwind(&self) -> bool {\n+    fn must_unwind(&self) -> bool {\n         false\n     }\n \n+    fn clean_on_unwind(&self) -> bool {\n+        true\n+    }\n+\n     fn trans<'a>(&self, bcx: &'a Block<'a>) -> &'a Block<'a> {\n         base::call_lifetime_end(bcx, self.ptr);\n         bcx"}]}