{"sha": "55357672281a5fb68106c595303e5b4e071821ff", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU1MzU3NjcyMjgxYTVmYjY4MTA2YzU5NTMwM2U1YjRlMDcxODIxZmY=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-03-25T11:42:13Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-03-25T11:42:13Z"}, "message": "Rollup merge of #23664 - bluss:std-docs, r=steveklabnik\n\nMain motivation was to update docs for the removal or \"demotion\" of certain extension traits. The update to the slice docs was larger, since the text was largely outdated.", "tree": {"sha": "05b353a8b4d755f92f2be125840f7369a1704e11", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/05b353a8b4d755f92f2be125840f7369a1704e11"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/55357672281a5fb68106c595303e5b4e071821ff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/55357672281a5fb68106c595303e5b4e071821ff", "html_url": "https://github.com/rust-lang/rust/commit/55357672281a5fb68106c595303e5b4e071821ff", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/55357672281a5fb68106c595303e5b4e071821ff/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b6783e6b46c4d306a22c18acaefad89df895111e", "url": "https://api.github.com/repos/rust-lang/rust/commits/b6783e6b46c4d306a22c18acaefad89df895111e", "html_url": "https://github.com/rust-lang/rust/commit/b6783e6b46c4d306a22c18acaefad89df895111e"}, {"sha": "547a48e1936ec7f369bf338fd7f5048f47265868", "url": "https://api.github.com/repos/rust-lang/rust/commits/547a48e1936ec7f369bf338fd7f5048f47265868", "html_url": "https://github.com/rust-lang/rust/commit/547a48e1936ec7f369bf338fd7f5048f47265868"}], "stats": {"total": 123, "additions": 57, "deletions": 66}, "files": [{"sha": "688d730e2528744c03f49903d7928a0610384a29", "filename": "src/libcollections/slice.rs", "status": "modified", "additions": 33, "deletions": 41, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/55357672281a5fb68106c595303e5b4e071821ff/src%2Flibcollections%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55357672281a5fb68106c595303e5b4e071821ff/src%2Flibcollections%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fslice.rs?ref=55357672281a5fb68106c595303e5b4e071821ff", "patch": "@@ -13,25 +13,23 @@\n //! The `slice` module contains useful code to help work with slice values.\n //! Slices are a view into a block of memory represented as a pointer and a length.\n //!\n-//! ```rust\n-//! # #![feature(core)]\n+//! ```\n //! // slicing a Vec\n-//! let vec = vec!(1, 2, 3);\n-//! let int_slice = vec.as_slice();\n+//! let vec = vec![1, 2, 3];\n+//! let int_slice = &vec[..];\n //! // coercing an array to a slice\n //! let str_slice: &[&str] = &[\"one\", \"two\", \"three\"];\n //! ```\n //!\n //! Slices are either mutable or shared. The shared slice type is `&[T]`,\n-//! while the mutable slice type is `&mut[T]`. For example, you can mutate the\n-//! block of memory that a mutable slice points to:\n+//! while the mutable slice type is `&mut [T]`, where `T` represents the element\n+//! type. For example, you can mutate the block of memory that a mutable slice\n+//! points to:\n //!\n-//! ```rust\n-//! let x: &mut[i32] = &mut [1, 2, 3];\n+//! ```\n+//! let x = &mut [1, 2, 3];\n //! x[1] = 7;\n-//! assert_eq!(x[0], 1);\n-//! assert_eq!(x[1], 7);\n-//! assert_eq!(x[2], 3);\n+//! assert_eq!(x, &[1, 7, 3]);\n //! ```\n //!\n //! Here are some of the things this module contains:\n@@ -41,49 +39,43 @@\n //! There are several structs that are useful for slices, such as `Iter`, which\n //! represents iteration over a slice.\n //!\n-//! ## Traits\n-//!\n-//! A number of traits add methods that allow you to accomplish tasks\n-//! with slices, the most important being `SliceExt`. Other traits\n-//! apply only to slices of elements satisfying certain bounds (like\n-//! `Ord`).\n-//!\n-//! An example is the `slice` method which enables slicing syntax `[a..b]` that\n-//! returns an immutable \"view\" into a `Vec` or another slice from the index\n-//! interval `[a, b)`:\n-//!\n-//! ```rust\n-//! fn main() {\n-//!     let numbers = [0, 1, 2];\n-//!     let last_numbers = &numbers[1..3];\n-//!     // last_numbers is now &[1, 2]\n-//! }\n-//! ```\n-//!\n-//! ## Implementations of other traits\n+//! ## Trait Implementations\n //!\n //! There are several implementations of common traits for slices. Some examples\n //! include:\n //!\n //! * `Clone`\n-//! * `Eq`, `Ord` - for immutable slices whose element type are `Eq` or `Ord`.\n+//! * `Eq`, `Ord` - for slices whose element type are `Eq` or `Ord`.\n //! * `Hash` - for slices whose element type is `Hash`\n //!\n //! ## Iteration\n //!\n-//! The method `iter()` returns an iteration value for a slice. The iterator\n-//! yields references to the slice's elements, so if the element\n-//! type of the slice is `isize`, the element type of the iterator is `&isize`.\n+//! The slices implement `IntoIterator`. The iterators of yield references\n+//! to the slice elements.\n //!\n-//! ```rust\n-//! let numbers = [0, 1, 2];\n-//! for &x in numbers.iter() {\n-//!     println!(\"{} is a number!\", x);\n+//! ```\n+//! let numbers = &[0, 1, 2];\n+//! for n in numbers {\n+//!     println!(\"{} is a number!\", n);\n //! }\n //! ```\n //!\n-//! * `.iter_mut()` returns an iterator that allows modifying each value.\n-//! * Further iterators exist that split, chunk or permute the slice.\n+//! The mutable slice yields mutable references to the elements:\n+//!\n+//! ```\n+//! let mut scores = [7, 8, 9];\n+//! for score in &mut scores[..] {\n+//!     *score += 1;\n+//! }\n+//! ```\n+//!\n+//! This iterator yields mutable references to the slice's elements, so while the element\n+//! type of the slice is `i32`, the element type of the iterator is `&mut i32`.\n+//!\n+//! * `.iter()` and `.iter_mut()` are the explicit methods to return the default\n+//!   iterators.\n+//! * Further methods that return iterators are `.split()`, `.splitn()`,\n+//!   `.chunks()`, `.windows()` and more.\n \n #![doc(primitive = \"slice\")]\n #![stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "aaa73badcac99a1b0c21bf7794b803a82317549f", "filename": "src/libcollections/str.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/55357672281a5fb68106c595303e5b4e071821ff/src%2Flibcollections%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55357672281a5fb68106c595303e5b4e071821ff/src%2Flibcollections%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstr.rs?ref=55357672281a5fb68106c595303e5b4e071821ff", "patch": "@@ -19,7 +19,7 @@\n //! are owned elsewhere.\n //!\n //! Basic operations are implemented directly by the compiler, but more advanced\n-//! operations are defined on the [`StrExt`](trait.StrExt.html) trait.\n+//! operations are defined as methods on the `str` type.\n //!\n //! # Examples\n //!"}, {"sha": "a629e0308e98299611940545977f165618499ac2", "filename": "src/libcore/str/mod.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/55357672281a5fb68106c595303e5b4e071821ff/src%2Flibcore%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55357672281a5fb68106c595303e5b4e071821ff/src%2Flibcore%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fmod.rs?ref=55357672281a5fb68106c595303e5b4e071821ff", "patch": "@@ -165,8 +165,7 @@ impl FromStr for bool {\n     /// assert!(<bool as FromStr>::from_str(\"not even a boolean\").is_err());\n     /// ```\n     ///\n-    /// Note, in many cases, the StrExt::parse() which is based on\n-    /// this FromStr::from_str() is more proper.\n+    /// Note, in many cases, the `.parse()` method on `str` is more proper.\n     ///\n     /// ```\n     /// assert_eq!(\"true\".parse(), Ok(true));\n@@ -531,7 +530,7 @@ impl<'a> DoubleEndedIterator for CharIndices<'a> {\n /// External iterator for a string's bytes.\n /// Use with the `std::iter` module.\n ///\n-/// Created with `StrExt::bytes`\n+/// Created with `str::bytes`\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[derive(Clone)]\n pub struct Bytes<'a>(Map<slice::Iter<'a, u8>, BytesDeref>);\n@@ -1489,27 +1488,27 @@ impl<'a, S: ?Sized> Str for &'a S where S: Str {\n     fn as_slice(&self) -> &str { Str::as_slice(*self) }\n }\n \n-/// Return type of `StrExt::split`\n+/// Return type of `str::split`\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Split<'a, P: Pattern<'a>>(CharSplits<'a, P>);\n delegate_iter!{pattern &'a str : Split<'a, P>}\n \n-/// Return type of `StrExt::split_terminator`\n+/// Return type of `str::split_terminator`\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct SplitTerminator<'a, P: Pattern<'a>>(CharSplits<'a, P>);\n delegate_iter!{pattern &'a str : SplitTerminator<'a, P>}\n \n-/// Return type of `StrExt::splitn`\n+/// Return type of `str::splitn`\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct SplitN<'a, P: Pattern<'a>>(CharSplitsN<'a, P>);\n delegate_iter!{pattern forward &'a str : SplitN<'a, P>}\n \n-/// Return type of `StrExt::rsplit`\n+/// Return type of `str::rsplit`\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct RSplit<'a, P: Pattern<'a>>(RCharSplits<'a, P>);\n delegate_iter!{pattern reverse &'a str : RSplit<'a, P>}\n \n-/// Return type of `StrExt::rsplitn`\n+/// Return type of `str::rsplitn`\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct RSplitN<'a, P: Pattern<'a>>(RCharSplitsN<'a, P>);\n delegate_iter!{pattern reverse &'a str : RSplitN<'a, P>}"}, {"sha": "0ed6d07bf79185331c6fb8a383cd99a44b96541b", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/55357672281a5fb68106c595303e5b4e071821ff/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55357672281a5fb68106c595303e5b4e071821ff/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=55357672281a5fb68106c595303e5b4e071821ff", "patch": "@@ -631,14 +631,14 @@ pub trait BufRead: Read {\n \n /// A `Write` adaptor which will write data to multiple locations.\n ///\n-/// For more information, see `WriteExt::broadcast`.\n-#[unstable(feature = \"io\", reason = \"awaiting stability of WriteExt::broadcast\")]\n+/// For more information, see `Write::broadcast`.\n+#[unstable(feature = \"io\", reason = \"awaiting stability of Write::broadcast\")]\n pub struct Broadcast<T, U> {\n     first: T,\n     second: U,\n }\n \n-#[unstable(feature = \"io\", reason = \"awaiting stability of WriteExt::broadcast\")]\n+#[unstable(feature = \"io\", reason = \"awaiting stability of Write::broadcast\")]\n impl<T: Write, U: Write> Write for Broadcast<T, U> {\n     fn write(&mut self, data: &[u8]) -> Result<usize> {\n         let n = try!(self.first.write(data));\n@@ -654,7 +654,7 @@ impl<T: Write, U: Write> Write for Broadcast<T, U> {\n \n /// Adaptor to chain together two instances of `Read`.\n ///\n-/// For more information, see `ReadExt::chain`.\n+/// For more information, see `Read::chain`.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Chain<T, U> {\n     first: T,\n@@ -677,7 +677,7 @@ impl<T: Read, U: Read> Read for Chain<T, U> {\n \n /// Reader adaptor which limits the bytes read from an underlying reader.\n ///\n-/// For more information, see `ReadExt::take`.\n+/// For more information, see `Read::take`.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Take<T> {\n     inner: T,\n@@ -730,14 +730,14 @@ impl<T: BufRead> BufRead for Take<T> {\n \n /// An adaptor which will emit all read data to a specified writer as well.\n ///\n-/// For more information see `ReadExt::tee`\n-#[unstable(feature = \"io\", reason = \"awaiting stability of ReadExt::tee\")]\n+/// For more information see `Read::tee`\n+#[unstable(feature = \"io\", reason = \"awaiting stability of Read::tee\")]\n pub struct Tee<R, W> {\n     reader: R,\n     writer: W,\n }\n \n-#[unstable(feature = \"io\", reason = \"awaiting stability of ReadExt::tee\")]\n+#[unstable(feature = \"io\", reason = \"awaiting stability of Read::tee\")]\n impl<R: Read, W: Write> Read for Tee<R, W> {\n     fn read(&mut self, buf: &mut [u8]) -> Result<usize> {\n         let n = try!(self.reader.read(buf));\n@@ -749,7 +749,7 @@ impl<R: Read, W: Write> Read for Tee<R, W> {\n \n /// A bridge from implementations of `Read` to an `Iterator` of `u8`.\n ///\n-/// See `ReadExt::bytes` for more information.\n+/// See `Read::bytes` for more information.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Bytes<R> {\n     inner: R,\n@@ -771,16 +771,16 @@ impl<R: Read> Iterator for Bytes<R> {\n \n /// A bridge from implementations of `Read` to an `Iterator` of `char`.\n ///\n-/// See `ReadExt::chars` for more information.\n-#[unstable(feature = \"io\", reason = \"awaiting stability of ReadExt::chars\")]\n+/// See `Read::chars` for more information.\n+#[unstable(feature = \"io\", reason = \"awaiting stability of Read::chars\")]\n pub struct Chars<R> {\n     inner: R,\n }\n \n /// An enumeration of possible errors that can be generated from the `Chars`\n /// adapter.\n #[derive(PartialEq, Clone, Debug)]\n-#[unstable(feature = \"io\", reason = \"awaiting stability of ReadExt::chars\")]\n+#[unstable(feature = \"io\", reason = \"awaiting stability of Read::chars\")]\n pub enum CharsError {\n     /// Variant representing that the underlying stream was read successfully\n     /// but it did not contain valid utf8 data.\n@@ -790,7 +790,7 @@ pub enum CharsError {\n     Other(Error),\n }\n \n-#[unstable(feature = \"io\", reason = \"awaiting stability of ReadExt::chars\")]\n+#[unstable(feature = \"io\", reason = \"awaiting stability of Read::chars\")]\n impl<R: Read> Iterator for Chars<R> {\n     type Item = result::Result<char, CharsError>;\n \n@@ -822,7 +822,7 @@ impl<R: Read> Iterator for Chars<R> {\n     }\n }\n \n-#[unstable(feature = \"io\", reason = \"awaiting stability of ReadExt::chars\")]\n+#[unstable(feature = \"io\", reason = \"awaiting stability of Read::chars\")]\n impl std_error::Error for CharsError {\n     fn description(&self) -> &str {\n         match *self {\n@@ -838,7 +838,7 @@ impl std_error::Error for CharsError {\n     }\n }\n \n-#[unstable(feature = \"io\", reason = \"awaiting stability of ReadExt::chars\")]\n+#[unstable(feature = \"io\", reason = \"awaiting stability of Read::chars\")]\n impl fmt::Display for CharsError {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         match *self {"}, {"sha": "333ae8f26a0d7fa028429ebedeca4218b96cb6a6", "filename": "src/libstd/io/prelude.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/55357672281a5fb68106c595303e5b4e071821ff/src%2Flibstd%2Fio%2Fprelude.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55357672281a5fb68106c595303e5b4e071821ff/src%2Flibstd%2Fio%2Fprelude.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fprelude.rs?ref=55357672281a5fb68106c595303e5b4e071821ff", "patch": "@@ -18,7 +18,7 @@\n //! ```\n //!\n //! This module contains reexports of many core I/O traits such as `Read`,\n-//! `Write`, `ReadExt`, and `WriteExt`. Structures and functions are not\n+//! `Write` and `BufRead`. Structures and functions are not\n //! contained in this module.\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]"}]}