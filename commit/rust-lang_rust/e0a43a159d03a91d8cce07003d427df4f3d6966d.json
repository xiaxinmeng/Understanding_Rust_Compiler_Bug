{"sha": "e0a43a159d03a91d8cce07003d427df4f3d6966d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUwYTQzYTE1OWQwM2E5MWQ4Y2NlMDcwMDNkNDI3ZGY0ZjNkNjk2NmQ=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-08-16T10:46:31Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-08-16T10:46:31Z"}, "message": "vscode moves cursor", "tree": {"sha": "df27d9ea58452d447ad6614134f91fad9a583e8d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/df27d9ea58452d447ad6614134f91fad9a583e8d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e0a43a159d03a91d8cce07003d427df4f3d6966d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e0a43a159d03a91d8cce07003d427df4f3d6966d", "html_url": "https://github.com/rust-lang/rust/commit/e0a43a159d03a91d8cce07003d427df4f3d6966d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e0a43a159d03a91d8cce07003d427df4f3d6966d/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eda52cbc348f37c1ae4391da901b2d605e161716", "url": "https://api.github.com/repos/rust-lang/rust/commits/eda52cbc348f37c1ae4391da901b2d605e161716", "html_url": "https://github.com/rust-lang/rust/commit/eda52cbc348f37c1ae4391da901b2d605e161716"}], "stats": {"total": 77, "additions": 52, "deletions": 25}, "files": [{"sha": "5e615ad4c334b1087691e2f5d73f3804b0869812", "filename": "code/.vscode/launch.json", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e0a43a159d03a91d8cce07003d427df4f3d6966d/code%2F.vscode%2Flaunch.json", "raw_url": "https://github.com/rust-lang/rust/raw/e0a43a159d03a91d8cce07003d427df4f3d6966d/code%2F.vscode%2Flaunch.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/code%2F.vscode%2Flaunch.json?ref=e0a43a159d03a91d8cce07003d427df4f3d6966d", "patch": "@@ -9,10 +9,10 @@\n             \"type\": \"extensionHost\",\n             \"request\": \"launch\",\n             \"runtimeExecutable\": \"${execPath}\",\n-            \"args\": [\"--extensionDevelopmentPath=${workspaceRoot}\"],\n+            \"args\": [\"--extensionDevelopmentPath='./'\"],\n             \"stopOnEntry\": false,\n             \"sourceMaps\": true,\n-            \"outFiles\": [ \"${workspaceRoot}/out/src/**/*.js\" ],\n+            \"outFiles\": [ \"./out/src/**/*.js\" ],\n             \"preLaunchTask\": \"npm\"\n         },\n     ]"}, {"sha": "95305db2de9c3b720f69519a56ef69c33e3fbefb", "filename": "code/src/extension.ts", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e0a43a159d03a91d8cce07003d427df4f3d6966d/code%2Fsrc%2Fextension.ts", "raw_url": "https://github.com/rust-lang/rust/raw/e0a43a159d03a91d8cce07003d427df4f3d6966d/code%2Fsrc%2Fextension.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/code%2Fsrc%2Fextension.ts?ref=e0a43a159d03a91d8cce07003d427df4f3d6966d", "patch": "@@ -111,6 +111,16 @@ function startServer() {\n                 )\n             }\n         )\n+        client.onRequest(\n+            new lc.RequestType<lc.Position, void, any, any>(\"m/moveCursor\"),\n+            (params: lc.Position, token: lc.CancellationToken) => {\n+                let editor = vscode.window.activeTextEditor;\n+                if (editor == null) return\n+                if (!editor.selection.isEmpty) return\n+                let position = client.protocol2CodeConverter.asPosition(params)\n+                editor.selection = new vscode.Selection(position, position);\n+            }\n+        )\n     })\n     client.start();\n }"}, {"sha": "f25c64c977ffac8139de6be342f961dda8b7aaf9", "filename": "crates/server/src/main_loop/handlers.rs", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/e0a43a159d03a91d8cce07003d427df4f3d6966d/crates%2Fserver%2Fsrc%2Fmain_loop%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0a43a159d03a91d8cce07003d427df4f3d6966d/crates%2Fserver%2Fsrc%2Fmain_loop%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fserver%2Fsrc%2Fmain_loop%2Fhandlers.rs?ref=e0a43a159d03a91d8cce07003d427df4f3d6966d", "patch": "@@ -6,7 +6,7 @@ use languageserver_types::{\n     SymbolInformation, Position,\n };\n use libanalysis::{World, Query};\n-use libeditor;\n+use libeditor::{self, CursorPosition};\n use libsyntax2::TextUnit;\n use serde_json::{to_value, from_value};\n \n@@ -195,7 +195,7 @@ pub fn handle_execute_command(\n     world: World,\n     path_map: PathMap,\n     mut params: req::ExecuteCommandParams,\n-) -> Result<req::ApplyWorkspaceEditParams> {\n+) -> Result<(req::ApplyWorkspaceEditParams, Option<Position>)> {\n     if params.command.as_str() != \"apply_code_action\" {\n         bail!(\"unknown cmd: {:?}\", params.command);\n     }\n@@ -209,23 +209,24 @@ pub fn handle_execute_command(\n     let action_result = match arg.id {\n         ActionId::FlipComma => libeditor::flip_comma(&file, arg.offset).map(|f| f()),\n         ActionId::AddDerive => libeditor::add_derive(&file, arg.offset).map(|f| f()),\n-    };\n-    let edit = match action_result {\n-        Some(action_result) => action_result.edit,\n-        None => bail!(\"command not applicable\"),\n-    };\n+    }.ok_or_else(|| format_err!(\"command not applicable\"))?;\n     let line_index = world.file_line_index(file_id)?;\n     let mut changes = HashMap::new();\n     changes.insert(\n         arg.text_document.uri,\n-        edit.conv_with(&line_index),\n+        action_result.edit.conv_with(&line_index),\n     );\n     let edit = WorkspaceEdit {\n         changes: Some(changes),\n         document_changes: None,\n     };\n+    let edit = req::ApplyWorkspaceEditParams { edit };\n+    let cursor_pos = match action_result.cursor_position {\n+        CursorPosition::Same => None,\n+        CursorPosition::Offset(offset) => Some(offset.conv_with(&line_index)),\n+    };\n \n-    Ok(req::ApplyWorkspaceEditParams { edit })\n+    Ok((edit, cursor_pos))\n }\n \n #[derive(Serialize, Deserialize)]"}, {"sha": "1fbcc7d1f854fa4e05123c5ec583d1e37a122614", "filename": "crates/server/src/main_loop/mod.rs", "status": "modified", "additions": 22, "deletions": 14, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/e0a43a159d03a91d8cce07003d427df4f3d6966d/crates%2Fserver%2Fsrc%2Fmain_loop%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0a43a159d03a91d8cce07003d427df4f3d6966d/crates%2Fserver%2Fsrc%2Fmain_loop%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fserver%2Fsrc%2Fmain_loop%2Fmod.rs?ref=e0a43a159d03a91d8cce07003d427df4f3d6966d", "patch": "@@ -171,21 +171,29 @@ fn on_request(\n         let path_map = path_map.clone();\n         let sender = sender.clone();\n         pool.execute(move || {\n-            let task = match handle_execute_command(world, path_map, params) {\n-                Ok(req) => match to_value(req) {\n-                    Err(e) => Task::Die(e.into()),\n-                    Ok(params) => {\n-                        let request = RawRequest {\n-                            id: 0,\n-                            method: <req::ApplyWorkspaceEdit as req::ClientRequest>::METHOD.to_string(),\n-                            params,\n-                        };\n-                        Task::Request(request)\n-                    }\n-                },\n-                Err(e) => Task::Die(e),\n+            let (edit, cursor) = match handle_execute_command(world, path_map, params) {\n+                Ok(res) => res,\n+                Err(e) => return sender.send(Task::Die(e)),\n             };\n-            sender.send(task)\n+            match to_value(edit) {\n+                Err(e) => return sender.send(Task::Die(e.into())),\n+                Ok(params) => {\n+                    let request = RawRequest {\n+                        id: 0,\n+                        method: <req::ApplyWorkspaceEdit as req::ClientRequest>::METHOD.to_string(),\n+                        params,\n+                    };\n+                    sender.send(Task::Request(request))\n+                }\n+            }\n+            if let Some(cursor) = cursor {\n+                let request = RawRequest {\n+                    id: 0,\n+                    method: <req::MoveCursor as req::ClientRequest>::METHOD.to_string(),\n+                    params: to_value(cursor).unwrap(),\n+                };\n+                sender.send(Task::Request(request))\n+            }\n         });\n         Ok(())\n     })?;"}, {"sha": "73e82150c7dde39b1a0ff252263d7ebf51c17383", "filename": "crates/server/src/req.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e0a43a159d03a91d8cce07003d427df4f3d6966d/crates%2Fserver%2Fsrc%2Freq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0a43a159d03a91d8cce07003d427df4f3d6966d/crates%2Fserver%2Fsrc%2Freq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fserver%2Fsrc%2Freq.rs?ref=e0a43a159d03a91d8cce07003d427df4f3d6966d", "patch": "@@ -101,3 +101,11 @@ pub struct Decoration {\n     pub range: Range,\n     pub tag: &'static str\n }\n+\n+pub enum MoveCursor {}\n+\n+impl Request for MoveCursor {\n+    type Params = Position;\n+    type Result = ();\n+    const METHOD: &'static str = \"m/moveCursor\";\n+}"}]}