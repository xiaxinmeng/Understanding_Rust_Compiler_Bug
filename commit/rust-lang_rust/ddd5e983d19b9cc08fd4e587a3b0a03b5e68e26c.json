{"sha": "ddd5e983d19b9cc08fd4e587a3b0a03b5e68e26c", "node_id": "C_kwDOAAsO6NoAKGRkZDVlOTgzZDE5YjljYzA4ZmQ0ZTU4N2EzYjBhMDNiNWU2OGUyNmM", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-10-16T08:36:13Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-10-16T08:37:51Z"}, "message": "PhantomData: inline a macro that is used only once", "tree": {"sha": "2770085da994a2a30cd3d5adad31da00b10e0f9d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2770085da994a2a30cd3d5adad31da00b10e0f9d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ddd5e983d19b9cc08fd4e587a3b0a03b5e68e26c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ddd5e983d19b9cc08fd4e587a3b0a03b5e68e26c", "html_url": "https://github.com/rust-lang/rust/commit/ddd5e983d19b9cc08fd4e587a3b0a03b5e68e26c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ddd5e983d19b9cc08fd4e587a3b0a03b5e68e26c/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "edabf59ca4646b3fc1a961c26431215001043f6a", "url": "https://api.github.com/repos/rust-lang/rust/commits/edabf59ca4646b3fc1a961c26431215001043f6a", "html_url": "https://github.com/rust-lang/rust/commit/edabf59ca4646b3fc1a961c26431215001043f6a"}], "stats": {"total": 112, "additions": 53, "deletions": 59}, "files": [{"sha": "c43c4fff6ae776228fc1f277f6e50978db2c6b9a", "filename": "library/core/src/marker.rs", "status": "modified", "additions": 53, "deletions": 59, "changes": 112, "blob_url": "https://github.com/rust-lang/rust/blob/ddd5e983d19b9cc08fd4e587a3b0a03b5e68e26c/library%2Fcore%2Fsrc%2Fmarker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddd5e983d19b9cc08fd4e587a3b0a03b5e68e26c/library%2Fcore%2Fsrc%2Fmarker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmarker.rs?ref=ddd5e983d19b9cc08fd4e587a3b0a03b5e68e26c", "patch": "@@ -483,64 +483,6 @@ impl<T: ?Sized> !Sync for *const T {}\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T: ?Sized> !Sync for *mut T {}\n \n-macro_rules! impls {\n-    ($t: ident) => {\n-        #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-        impl<T: ?Sized> Hash for $t<T> {\n-            #[inline]\n-            fn hash<H: Hasher>(&self, _: &mut H) {}\n-        }\n-\n-        #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-        impl<T: ?Sized> cmp::PartialEq for $t<T> {\n-            fn eq(&self, _other: &$t<T>) -> bool {\n-                true\n-            }\n-        }\n-\n-        #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-        impl<T: ?Sized> cmp::Eq for $t<T> {}\n-\n-        #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-        impl<T: ?Sized> cmp::PartialOrd for $t<T> {\n-            fn partial_cmp(&self, _other: &$t<T>) -> Option<cmp::Ordering> {\n-                Option::Some(cmp::Ordering::Equal)\n-            }\n-        }\n-\n-        #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-        impl<T: ?Sized> cmp::Ord for $t<T> {\n-            fn cmp(&self, _other: &$t<T>) -> cmp::Ordering {\n-                cmp::Ordering::Equal\n-            }\n-        }\n-\n-        #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-        impl<T: ?Sized> Copy for $t<T> {}\n-\n-        #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-        impl<T: ?Sized> Clone for $t<T> {\n-            fn clone(&self) -> Self {\n-                Self\n-            }\n-        }\n-\n-        #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-        #[rustc_const_unstable(feature = \"const_default_impls\", issue = \"87864\")]\n-        impl<T: ?Sized> const Default for $t<T> {\n-            fn default() -> Self {\n-                Self\n-            }\n-        }\n-\n-        #[unstable(feature = \"structural_match\", issue = \"31434\")]\n-        impl<T: ?Sized> StructuralPartialEq for $t<T> {}\n-\n-        #[unstable(feature = \"structural_match\", issue = \"31434\")]\n-        impl<T: ?Sized> StructuralEq for $t<T> {}\n-    };\n-}\n-\n /// Zero-sized type used to mark things that \"act like\" they own a `T`.\n ///\n /// Adding a `PhantomData<T>` field to your type tells the compiler that your\n@@ -678,7 +620,59 @@ macro_rules! impls {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct PhantomData<T: ?Sized>;\n \n-impls! { PhantomData }\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+impl<T: ?Sized> Hash for PhantomData<T> {\n+    #[inline]\n+    fn hash<H: Hasher>(&self, _: &mut H) {}\n+}\n+\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+impl<T: ?Sized> cmp::PartialEq for PhantomData<T> {\n+    fn eq(&self, _other: &PhantomData<T>) -> bool {\n+        true\n+    }\n+}\n+\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+impl<T: ?Sized> cmp::Eq for PhantomData<T> {}\n+\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+impl<T: ?Sized> cmp::PartialOrd for PhantomData<T> {\n+    fn partial_cmp(&self, _other: &PhantomData<T>) -> Option<cmp::Ordering> {\n+        Option::Some(cmp::Ordering::Equal)\n+    }\n+}\n+\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+impl<T: ?Sized> cmp::Ord for PhantomData<T> {\n+    fn cmp(&self, _other: &PhantomData<T>) -> cmp::Ordering {\n+        cmp::Ordering::Equal\n+    }\n+}\n+\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+impl<T: ?Sized> Copy for PhantomData<T> {}\n+\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+impl<T: ?Sized> Clone for PhantomData<T> {\n+    fn clone(&self) -> Self {\n+        Self\n+    }\n+}\n+\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[rustc_const_unstable(feature = \"const_default_impls\", issue = \"87864\")]\n+impl<T: ?Sized> const Default for PhantomData<T> {\n+    fn default() -> Self {\n+        Self\n+    }\n+}\n+\n+#[unstable(feature = \"structural_match\", issue = \"31434\")]\n+impl<T: ?Sized> StructuralPartialEq for PhantomData<T> {}\n+\n+#[unstable(feature = \"structural_match\", issue = \"31434\")]\n+impl<T: ?Sized> StructuralEq for PhantomData<T> {}\n \n mod impls {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]"}]}