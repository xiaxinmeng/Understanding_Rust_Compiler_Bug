{"sha": "60a68bed7b1da4cd9052c2610525c3c50dd344d2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYwYTY4YmVkN2IxZGE0Y2Q5MDUyYzI2MTA1MjVjM2M1MGRkMzQ0ZDI=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2019-01-14T21:54:28Z"}, "committer": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2019-01-14T21:54:28Z"}, "message": "Make UnsafeCode EarlyLintPass", "tree": {"sha": "d493897b68b25c5d5423679d73be9eac79647a0c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d493897b68b25c5d5423679d73be9eac79647a0c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/60a68bed7b1da4cd9052c2610525c3c50dd344d2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/60a68bed7b1da4cd9052c2610525c3c50dd344d2", "html_url": "https://github.com/rust-lang/rust/commit/60a68bed7b1da4cd9052c2610525c3c50dd344d2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/60a68bed7b1da4cd9052c2610525c3c50dd344d2/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f18ae26840399371ea969e70e9d1a79823f800b8", "url": "https://api.github.com/repos/rust-lang/rust/commits/f18ae26840399371ea969e70e9d1a79823f800b8", "html_url": "https://github.com/rust-lang/rust/commit/f18ae26840399371ea969e70e9d1a79823f800b8"}], "stats": {"total": 42, "additions": 20, "deletions": 22}, "files": [{"sha": "6cd632321cc1a89e774b65d2f32ca4dd4a8777dc", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 20, "deletions": 22, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/60a68bed7b1da4cd9052c2610525c3c50dd344d2/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60a68bed7b1da4cd9052c2610525c3c50dd344d2/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=60a68bed7b1da4cd9052c2610525c3c50dd344d2", "patch": "@@ -40,9 +40,9 @@ use syntax_pos::{BytePos, Span, SyntaxContext};\n use syntax::symbol::keywords;\n use syntax::errors::{Applicability, DiagnosticBuilder};\n use syntax::print::pprust::expr_to_string;\n+use syntax::visit::FnKind;\n \n use rustc::hir::{self, GenericParamKind, PatKind};\n-use rustc::hir::intravisit::FnKind;\n \n use nonstandard_style::{MethodLateContext, method_context};\n \n@@ -216,7 +216,7 @@ impl LintPass for UnsafeCode {\n }\n \n impl UnsafeCode {\n-    fn report_unsafe(&self, cx: &LateContext, span: Span, desc: &'static str) {\n+    fn report_unsafe(&self, cx: &EarlyContext, span: Span, desc: &'static str) {\n         // This comes from a macro that has #[allow_internal_unsafe].\n         if span.allows_unsafe() {\n             return;\n@@ -226,31 +226,30 @@ impl UnsafeCode {\n     }\n }\n \n-impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnsafeCode {\n-    fn check_attribute(&mut self, cx: &LateContext, attr: &ast::Attribute) {\n+impl EarlyLintPass for UnsafeCode {\n+    fn check_attribute(&mut self, cx: &EarlyContext, attr: &ast::Attribute) {\n         if attr.check_name(\"allow_internal_unsafe\") {\n-            self.report_unsafe(cx, attr.span, \"`allow_internal_unsafe` allows defining \\\n-                                               macros using unsafe without triggering \\\n-                                               the `unsafe_code` lint at their call site\");\n+            self.report_unsafe(cx, attr.span, \"cannot use `allow_internal_unsafe` \\\n+                                               with `forbid(unsafe_code)`\");\n         }\n     }\n \n-    fn check_expr(&mut self, cx: &LateContext, e: &hir::Expr) {\n-        if let hir::ExprKind::Block(ref blk, _) = e.node {\n+    fn check_expr(&mut self, cx: &EarlyContext, e: &ast::Expr) {\n+        if let ast::ExprKind::Block(ref blk, _) = e.node {\n             // Don't warn about generated blocks, that'll just pollute the output.\n-            if blk.rules == hir::UnsafeBlock(hir::UserProvided) {\n+            if blk.rules == ast::BlockCheckMode::Unsafe(ast::UserProvided) {\n                 self.report_unsafe(cx, blk.span, \"usage of an `unsafe` block\");\n             }\n         }\n     }\n \n-    fn check_item(&mut self, cx: &LateContext, it: &hir::Item) {\n+    fn check_item(&mut self, cx: &EarlyContext, it: &ast::Item) {\n         match it.node {\n-            hir::ItemKind::Trait(_, hir::Unsafety::Unsafe, ..) => {\n+            ast::ItemKind::Trait(_, ast::Unsafety::Unsafe, ..) => {\n                 self.report_unsafe(cx, it.span, \"declaration of an `unsafe` trait\")\n             }\n \n-            hir::ItemKind::Impl(hir::Unsafety::Unsafe, ..) => {\n+            ast::ItemKind::Impl(ast::Unsafety::Unsafe, ..) => {\n                 self.report_unsafe(cx, it.span, \"implementation of an `unsafe` trait\")\n             }\n \n@@ -259,19 +258,18 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnsafeCode {\n     }\n \n     fn check_fn(&mut self,\n-                cx: &LateContext,\n-                fk: FnKind<'tcx>,\n-                _: &hir::FnDecl,\n-                _: &hir::Body,\n+                cx: &EarlyContext,\n+                fk: FnKind,\n+                _: &ast::FnDecl,\n                 span: Span,\n                 _: ast::NodeId) {\n         match fk {\n-            FnKind::ItemFn(_, _, hir::FnHeader { unsafety: hir::Unsafety::Unsafe, .. }, ..) => {\n+            FnKind::ItemFn(_, ast::FnHeader { unsafety: ast::Unsafety::Unsafe, .. }, ..) => {\n                 self.report_unsafe(cx, span, \"declaration of an `unsafe` function\")\n             }\n \n             FnKind::Method(_, sig, ..) => {\n-                if sig.header.unsafety == hir::Unsafety::Unsafe {\n+                if sig.header.unsafety == ast::Unsafety::Unsafe {\n                     self.report_unsafe(cx, span, \"implementation of an `unsafe` method\")\n                 }\n             }\n@@ -280,9 +278,9 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnsafeCode {\n         }\n     }\n \n-    fn check_trait_item(&mut self, cx: &LateContext, item: &hir::TraitItem) {\n-        if let hir::TraitItemKind::Method(ref sig, hir::TraitMethod::Required(_)) = item.node {\n-            if sig.header.unsafety == hir::Unsafety::Unsafe {\n+    fn check_trait_item(&mut self, cx: &EarlyContext, item: &ast::TraitItem) {\n+        if let ast::TraitItemKind::Method(ref sig, _) = item.node {\n+            if sig.header.unsafety == ast::Unsafety::Unsafe {\n                 self.report_unsafe(cx, item.span, \"declaration of an `unsafe` method\")\n             }\n         }"}]}