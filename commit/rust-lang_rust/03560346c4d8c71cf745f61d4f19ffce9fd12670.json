{"sha": "03560346c4d8c71cf745f61d4f19ffce9fd12670", "node_id": "C_kwDOAAsO6NoAKDAzNTYwMzQ2YzRkOGM3MWNmNzQ1ZjYxZDRmMTlmZmNlOWZkMTI2NzA", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-08-12T15:09:17Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-08-12T15:09:17Z"}, "message": "Rollup merge of #100409 - jsha:highlight-lighter, r=GuillaumeGomez\n\nrustdoc: don't generate DOM element for operator\n\nIn our source page highlighting, we were generating `<span class=\"op\">` tags for all \"operators\", including e.g. `<` `>` around generic parameters, `*`, `&`. This contributed significantly to DOM size, but we don't actually style `.op` except in the ayu theme.\n\nRemove the styles for `.op` in ayu, and stop generating the `<span>`s.\n\nThis reduces DOM size of an example page[1] from 265,938 HTML elements to 242,165 elements, a 9% reduction.\n\nr? ``@GuillaumeGomez``\n\nDemo: (warning - slow!) https://rustdoc.crud.net/jsha/highlight-lighter/src/core/up/up/stdarch/crates/core_arch/src/x86/avx512f.rs.html\n\n[1]:\nhttps://doc.rust-lang.org/nightly/src/core/up/up/stdarch/crates/core_arch/src/x86/avx512f.rs.html", "tree": {"sha": "4e345cc6f08d80271f94f2108421d579ab659280", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4e345cc6f08d80271f94f2108421d579ab659280"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/03560346c4d8c71cf745f61d4f19ffce9fd12670", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJi9m0dCRBK7hj4Ov3rIwAADW0IAHJS67ipuN0UagXo0IiVI1/e\nigLbB0fxrY8GJIbDMUvW7W4L/3yk/jh3lToS37P5u+Hdk635BsSi9gaVXnmuTNrN\nvr/ofnaZ1l2+qhV1gICkNCwzUXGH+DXY4cKieovuyRCYrEYsxFkqvKA2ue+8Odcs\naMRsaO2/bXGgfS9fnjCG8LnO+8kig3u2tJ+rcjECgDm/XxqZNTtLChV/MjBeD/zq\nMMdcym3sfdX2IQR7ZE/nja1SsPHX6WWWZF71MzqIC3Ldv2gfybRgK3I7C7mJkcQm\nmwgrvBkLfoAlGzqRJ+3BBYZ/H02t+zFOHTtH8KgOgisL33gu8wwiH6ixgzb0paQ=\n=Cuqm\n-----END PGP SIGNATURE-----\n", "payload": "tree 4e345cc6f08d80271f94f2108421d579ab659280\nparent 9914c96f0676dc212e3a1e854f5ee8d477351a15\nparent dd4613cbc091860d4b56f506b195b92c87f022a1\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1660316957 +0530\ncommitter GitHub <noreply@github.com> 1660316957 +0530\n\nRollup merge of #100409 - jsha:highlight-lighter, r=GuillaumeGomez\n\nrustdoc: don't generate DOM element for operator\n\nIn our source page highlighting, we were generating `<span class=\"op\">` tags for all \"operators\", including e.g. `<` `>` around generic parameters, `*`, `&`. This contributed significantly to DOM size, but we don't actually style `.op` except in the ayu theme.\n\nRemove the styles for `.op` in ayu, and stop generating the `<span>`s.\n\nThis reduces DOM size of an example page[1] from 265,938 HTML elements to 242,165 elements, a 9% reduction.\n\nr? ``@GuillaumeGomez``\n\nDemo: (warning - slow!) https://rustdoc.crud.net/jsha/highlight-lighter/src/core/up/up/stdarch/crates/core_arch/src/x86/avx512f.rs.html\n\n[1]:\nhttps://doc.rust-lang.org/nightly/src/core/up/up/stdarch/crates/core_arch/src/x86/avx512f.rs.html\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/03560346c4d8c71cf745f61d4f19ffce9fd12670", "html_url": "https://github.com/rust-lang/rust/commit/03560346c4d8c71cf745f61d4f19ffce9fd12670", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/03560346c4d8c71cf745f61d4f19ffce9fd12670/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9914c96f0676dc212e3a1e854f5ee8d477351a15", "url": "https://api.github.com/repos/rust-lang/rust/commits/9914c96f0676dc212e3a1e854f5ee8d477351a15", "html_url": "https://github.com/rust-lang/rust/commit/9914c96f0676dc212e3a1e854f5ee8d477351a15"}, {"sha": "dd4613cbc091860d4b56f506b195b92c87f022a1", "url": "https://api.github.com/repos/rust-lang/rust/commits/dd4613cbc091860d4b56f506b195b92c87f022a1", "html_url": "https://github.com/rust-lang/rust/commit/dd4613cbc091860d4b56f506b195b92c87f022a1"}], "stats": {"total": 56, "additions": 25, "deletions": 31}, "files": [{"sha": "27ccff9a2768fe345649b08c52ea76b4d9f33a41", "filename": "src/librustdoc/html/highlight.rs", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/03560346c4d8c71cf745f61d4f19ffce9fd12670/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03560346c4d8c71cf745f61d4f19ffce9fd12670/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs?ref=03560346c4d8c71cf745f61d4f19ffce9fd12670", "patch": "@@ -163,7 +163,6 @@ enum Class {\n     // Keywords that do pointer/reference stuff.\n     RefKeyWord,\n     Self_(Span),\n-    Op,\n     Macro(Span),\n     MacroNonTerminal,\n     String,\n@@ -187,7 +186,6 @@ impl Class {\n             Class::KeyWord => \"kw\",\n             Class::RefKeyWord => \"kw-2\",\n             Class::Self_(_) => \"self\",\n-            Class::Op => \"op\",\n             Class::Macro(_) => \"macro\",\n             Class::MacroNonTerminal => \"macro-nonterminal\",\n             Class::String => \"string\",\n@@ -212,7 +210,6 @@ impl Class {\n             | Self::Attribute\n             | Self::KeyWord\n             | Self::RefKeyWord\n-            | Self::Op\n             | Self::MacroNonTerminal\n             | Self::String\n             | Self::Number\n@@ -516,7 +513,7 @@ impl<'a> Classifier<'a> {\n             // or a reference or pointer type. Unless, of course, it looks like\n             // a logical and or a multiplication operator: `&&` or `* `.\n             TokenKind::Star => match self.tokens.peek() {\n-                Some((TokenKind::Whitespace, _)) => Class::Op,\n+                Some((TokenKind::Whitespace, _)) => return no_highlight(sink),\n                 Some((TokenKind::Ident, \"mut\")) => {\n                     self.next();\n                     sink(Highlight::Token { text: \"*mut\", class: Some(Class::RefKeyWord) });\n@@ -532,15 +529,15 @@ impl<'a> Classifier<'a> {\n             TokenKind::And => match self.tokens.peek() {\n                 Some((TokenKind::And, _)) => {\n                     self.next();\n-                    sink(Highlight::Token { text: \"&&\", class: Some(Class::Op) });\n+                    sink(Highlight::Token { text: \"&&\", class: None });\n                     return;\n                 }\n                 Some((TokenKind::Eq, _)) => {\n                     self.next();\n-                    sink(Highlight::Token { text: \"&=\", class: Some(Class::Op) });\n+                    sink(Highlight::Token { text: \"&=\", class: None });\n                     return;\n                 }\n-                Some((TokenKind::Whitespace, _)) => Class::Op,\n+                Some((TokenKind::Whitespace, _)) => return no_highlight(sink),\n                 Some((TokenKind::Ident, \"mut\")) => {\n                     self.next();\n                     sink(Highlight::Token { text: \"&mut\", class: Some(Class::RefKeyWord) });\n@@ -553,15 +550,15 @@ impl<'a> Classifier<'a> {\n             TokenKind::Eq => match lookahead {\n                 Some(TokenKind::Eq) => {\n                     self.next();\n-                    sink(Highlight::Token { text: \"==\", class: Some(Class::Op) });\n+                    sink(Highlight::Token { text: \"==\", class: None });\n                     return;\n                 }\n                 Some(TokenKind::Gt) => {\n                     self.next();\n                     sink(Highlight::Token { text: \"=>\", class: None });\n                     return;\n                 }\n-                _ => Class::Op,\n+                _ => return no_highlight(sink),\n             },\n             TokenKind::Minus if lookahead == Some(TokenKind::Gt) => {\n                 self.next();\n@@ -578,7 +575,7 @@ impl<'a> Classifier<'a> {\n             | TokenKind::Percent\n             | TokenKind::Bang\n             | TokenKind::Lt\n-            | TokenKind::Gt => Class::Op,\n+            | TokenKind::Gt => return no_highlight(sink),\n \n             // Miscellaneous, no highlighting.\n             TokenKind::Dot"}, {"sha": "ae4dba116d637329226c0529ddf5e1f61c25928e", "filename": "src/librustdoc/html/highlight/fixtures/decorations.html", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/03560346c4d8c71cf745f61d4f19ffce9fd12670/src%2Flibrustdoc%2Fhtml%2Fhighlight%2Ffixtures%2Fdecorations.html", "raw_url": "https://github.com/rust-lang/rust/raw/03560346c4d8c71cf745f61d4f19ffce9fd12670/src%2Flibrustdoc%2Fhtml%2Fhighlight%2Ffixtures%2Fdecorations.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fhighlight%2Ffixtures%2Fdecorations.html?ref=03560346c4d8c71cf745f61d4f19ffce9fd12670", "patch": "@@ -1,2 +1,2 @@\n-<span class=\"example\"><span class=\"kw\">let</span> <span class=\"ident\">x</span> <span class=\"op\">=</span> <span class=\"number\">1</span>;</span>\n-<span class=\"kw\">let</span> <span class=\"ident\">y</span> <span class=\"op\">=</span> <span class=\"number\">2</span>;\n\\ No newline at end of file\n+<span class=\"example\"><span class=\"kw\">let</span> <span class=\"ident\">x</span> = <span class=\"number\">1</span>;</span>\n+<span class=\"kw\">let</span> <span class=\"ident\">y</span> = <span class=\"number\">2</span>;\n\\ No newline at end of file"}, {"sha": "17f23278ec1f2e4f5c0e7391e8cf284c673588b9", "filename": "src/librustdoc/html/highlight/fixtures/highlight.html", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/03560346c4d8c71cf745f61d4f19ffce9fd12670/src%2Flibrustdoc%2Fhtml%2Fhighlight%2Ffixtures%2Fhighlight.html", "raw_url": "https://github.com/rust-lang/rust/raw/03560346c4d8c71cf745f61d4f19ffce9fd12670/src%2Flibrustdoc%2Fhtml%2Fhighlight%2Ffixtures%2Fhighlight.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fhighlight%2Ffixtures%2Fhighlight.html?ref=03560346c4d8c71cf745f61d4f19ffce9fd12670", "patch": "@@ -1,4 +1,4 @@\n <span class=\"kw\">use</span> <span class=\"ident\"><span class=\"kw\">crate</span>::a::foo</span>;\n <span class=\"kw\">use</span> <span class=\"ident\"><span class=\"self\">self</span>::whatever</span>;\n-<span class=\"kw\">let</span> <span class=\"ident\">x</span> <span class=\"op\">=</span> <span class=\"ident\"><span class=\"kw\">super</span>::b::foo</span>;\n-<span class=\"kw\">let</span> <span class=\"ident\">y</span> <span class=\"op\">=</span> <span class=\"ident\"><span class=\"self\">Self</span>::whatever</span>;\n\\ No newline at end of file\n+<span class=\"kw\">let</span> <span class=\"ident\">x</span> = <span class=\"ident\"><span class=\"kw\">super</span>::b::foo</span>;\n+<span class=\"kw\">let</span> <span class=\"ident\">y</span> = <span class=\"ident\"><span class=\"self\">Self</span>::whatever</span>;\n\\ No newline at end of file"}, {"sha": "ea797fd99d3f45e81f76db3212755e337af60882", "filename": "src/librustdoc/html/highlight/fixtures/sample.html", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/03560346c4d8c71cf745f61d4f19ffce9fd12670/src%2Flibrustdoc%2Fhtml%2Fhighlight%2Ffixtures%2Fsample.html", "raw_url": "https://github.com/rust-lang/rust/raw/03560346c4d8c71cf745f61d4f19ffce9fd12670/src%2Flibrustdoc%2Fhtml%2Fhighlight%2Ffixtures%2Fsample.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fhighlight%2Ffixtures%2Fsample.html?ref=03560346c4d8c71cf745f61d4f19ffce9fd12670", "patch": "@@ -8,23 +8,23 @@\n .lifetime { color: #B76514; }\n .question-mark { color: #ff9011; }\n </style>\n-<pre><code><span class=\"attribute\">#![<span class=\"ident\">crate_type</span> <span class=\"op\">=</span> <span class=\"string\">&quot;lib&quot;</span>]</span>\n+<pre><code><span class=\"attribute\">#![<span class=\"ident\">crate_type</span> = <span class=\"string\">&quot;lib&quot;</span>]</span>\n \n <span class=\"kw\">use</span> <span class=\"ident\">std::path</span>::{<span class=\"ident\">Path</span>, <span class=\"ident\">PathBuf</span>};\n \n-<span class=\"attribute\">#[<span class=\"ident\">cfg</span>(<span class=\"ident\">target_os</span> <span class=\"op\">=</span> <span class=\"string\">&quot;linux&quot;</span>)]</span>\n+<span class=\"attribute\">#[<span class=\"ident\">cfg</span>(<span class=\"ident\">target_os</span> = <span class=\"string\">&quot;linux&quot;</span>)]</span>\n <span class=\"kw\">fn</span> <span class=\"ident\">main</span>() -&gt; () {\n-    <span class=\"kw\">let</span> <span class=\"ident\">foo</span> <span class=\"op\">=</span> <span class=\"bool-val\">true</span> <span class=\"op\">&amp;&amp;</span> <span class=\"bool-val\">false</span> <span class=\"op\">|</span><span class=\"op\">|</span> <span class=\"bool-val\">true</span>;\n-    <span class=\"kw\">let</span> <span class=\"kw\">_</span>: <span class=\"kw-2\">*const</span> () <span class=\"op\">=</span> <span class=\"number\">0</span>;\n-    <span class=\"kw\">let</span> <span class=\"kw\">_</span> <span class=\"op\">=</span> <span class=\"kw-2\">&amp;</span><span class=\"ident\">foo</span>;\n-    <span class=\"kw\">let</span> <span class=\"kw\">_</span> <span class=\"op\">=</span> <span class=\"op\">&amp;&amp;</span><span class=\"ident\">foo</span>;\n-    <span class=\"kw\">let</span> <span class=\"kw\">_</span> <span class=\"op\">=</span> <span class=\"kw-2\">*</span><span class=\"ident\">foo</span>;\n+    <span class=\"kw\">let</span> <span class=\"ident\">foo</span> = <span class=\"bool-val\">true</span> &amp;&amp; <span class=\"bool-val\">false</span> || <span class=\"bool-val\">true</span>;\n+    <span class=\"kw\">let</span> <span class=\"kw\">_</span>: <span class=\"kw-2\">*const</span> () = <span class=\"number\">0</span>;\n+    <span class=\"kw\">let</span> <span class=\"kw\">_</span> = <span class=\"kw-2\">&amp;</span><span class=\"ident\">foo</span>;\n+    <span class=\"kw\">let</span> <span class=\"kw\">_</span> = &amp;&amp;<span class=\"ident\">foo</span>;\n+    <span class=\"kw\">let</span> <span class=\"kw\">_</span> = <span class=\"kw-2\">*</span><span class=\"ident\">foo</span>;\n     <span class=\"macro\">mac!</span>(<span class=\"ident\">foo</span>, <span class=\"kw-2\">&amp;mut</span> <span class=\"ident\">bar</span>);\n-    <span class=\"macro\">assert!</span>(<span class=\"self\">self</span>.<span class=\"ident\">length</span> <span class=\"op\">&lt;</span> <span class=\"ident\">N</span> <span class=\"op\">&amp;&amp;</span> <span class=\"ident\">index</span> <span class=\"op\">&lt;</span><span class=\"op\">=</span> <span class=\"self\">self</span>.<span class=\"ident\">length</span>);\n+    <span class=\"macro\">assert!</span>(<span class=\"self\">self</span>.<span class=\"ident\">length</span> &lt; <span class=\"ident\">N</span> &amp;&amp; <span class=\"ident\">index</span> &lt;= <span class=\"self\">self</span>.<span class=\"ident\">length</span>);\n     <span class=\"ident\">::std::env::var</span>(<span class=\"string\">&quot;gateau&quot;</span>).<span class=\"ident\">is_ok</span>();\n     <span class=\"attribute\">#[<span class=\"ident\">rustfmt::skip</span>]</span>\n-    <span class=\"kw\">let</span> <span class=\"ident\">s</span>:<span class=\"ident\">std::path::PathBuf</span> <span class=\"op\">=</span> <span class=\"ident\">std::path::PathBuf::new</span>();\n-    <span class=\"kw\">let</span> <span class=\"kw-2\">mut</span> <span class=\"ident\">s</span> <span class=\"op\">=</span> <span class=\"ident\">String::new</span>();\n+    <span class=\"kw\">let</span> <span class=\"ident\">s</span>:<span class=\"ident\">std::path::PathBuf</span> = <span class=\"ident\">std::path::PathBuf::new</span>();\n+    <span class=\"kw\">let</span> <span class=\"kw-2\">mut</span> <span class=\"ident\">s</span> = <span class=\"ident\">String::new</span>();\n \n     <span class=\"kw\">match</span> <span class=\"kw-2\">&amp;</span><span class=\"ident\">s</span> {\n         <span class=\"kw-2\">ref</span> <span class=\"kw-2\">mut</span> <span class=\"ident\">x</span> =&gt; {}"}, {"sha": "ac8bd28f6c362e765035327cb11a814458122963", "filename": "src/librustdoc/html/highlight/fixtures/union.html", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/03560346c4d8c71cf745f61d4f19ffce9fd12670/src%2Flibrustdoc%2Fhtml%2Fhighlight%2Ffixtures%2Funion.html", "raw_url": "https://github.com/rust-lang/rust/raw/03560346c4d8c71cf745f61d4f19ffce9fd12670/src%2Flibrustdoc%2Fhtml%2Fhighlight%2Ffixtures%2Funion.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fhighlight%2Ffixtures%2Funion.html?ref=03560346c4d8c71cf745f61d4f19ffce9fd12670", "patch": "@@ -4,5 +4,5 @@\n }\n \n <span class=\"kw\">fn</span> <span class=\"ident\">main</span>() {\n-    <span class=\"kw\">let</span> <span class=\"ident\">union</span> <span class=\"op\">=</span> <span class=\"number\">0</span>;\n+    <span class=\"kw\">let</span> <span class=\"ident\">union</span> = <span class=\"number\">0</span>;\n }"}, {"sha": "b8218867a8bc8a42717568082817ced6c8371c6b", "filename": "src/librustdoc/html/static/css/themes/ayu.css", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/03560346c4d8c71cf745f61d4f19ffce9fd12670/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fayu.css", "raw_url": "https://github.com/rust-lang/rust/raw/03560346c4d8c71cf745f61d4f19ffce9fd12670/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fayu.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fayu.css?ref=03560346c4d8c71cf745f61d4f19ffce9fd12670", "patch": "@@ -238,7 +238,7 @@ details.rustdoc-toggle > summary::before {\n pre.rust .number, pre.rust .string { color: #b8cc52; }\n pre.rust .kw, pre.rust .kw-2, pre.rust .prelude-ty,\n pre.rust .bool-val, pre.rust .prelude-val,\n-pre.rust .op, pre.rust .lifetime { color: #ff7733; }\n+pre.rust .lifetime { color: #ff7733; }\n pre.rust .macro, pre.rust .macro-nonterminal { color: #a37acc; }\n pre.rust .question-mark {\n \tcolor: #ff9011;\n@@ -250,7 +250,7 @@ pre.rust .self {\n pre.rust .attribute {\n \tcolor: #e6e1cf;\n }\n-pre.rust .attribute .ident, pre.rust .attribute .op {\n+pre.rust .attribute .ident {\n \tcolor: #e6e1cf;\n }\n "}, {"sha": "131c53ec24bc46b05c799d95c7edefe4b2aaf87a", "filename": "src/test/rustdoc/macro_rules-matchers.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/03560346c4d8c71cf745f61d4f19ffce9fd12670/src%2Ftest%2Frustdoc%2Fmacro_rules-matchers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03560346c4d8c71cf745f61d4f19ffce9fd12670/src%2Ftest%2Frustdoc%2Fmacro_rules-matchers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fmacro_rules-matchers.rs?ref=03560346c4d8c71cf745f61d4f19ffce9fd12670", "patch": "@@ -6,16 +6,13 @@\n // @has 'foo/macro.todo.html'\n // @has - '//span[@class=\"macro\"]' 'macro_rules!'\n // @has - '//span[@class=\"ident\"]' 'todo'\n-// Note: the only op is the `+`\n-// @count - '//pre[@class=\"rust macro\"]//span[@class=\"op\"]' 1\n \n // @has - '{ () =&gt; { ... }; ($('\n // @has - '//span[@class=\"macro-nonterminal\"]' '$'\n // @has - '//span[@class=\"macro-nonterminal\"]' 'arg'\n // @has - ':'\n // @has - '//span[@class=\"ident\"]' 'tt'\n-// @has - '),'\n-// @has - '//span[@class=\"op\"]' '+'\n+// @has - ')+'\n // @has - ') =&gt; { ... }; }'\n pub use std::todo;\n "}]}