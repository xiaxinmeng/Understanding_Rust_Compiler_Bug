{"sha": "3ade8ae6608a9d371580e5e8d68c26a4e3e897fb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNhZGU4YWU2NjA4YTlkMzcxNTgwZTVlOGQ2OGMyNmE0ZTNlODk3ZmI=", "commit": {"author": {"name": "Tim Diekmann", "email": "tim.diekmann@3dvision.de", "date": "2020-03-29T00:47:05Z"}, "committer": {"name": "Tim Diekmann", "email": "tim.diekmann@3dvision.de", "date": "2020-03-29T00:47:05Z"}, "message": "Implement `init` and `init_offset` on `AllocInit` and mark it unsafe", "tree": {"sha": "49607964c87f5f8fe647160c42b178226e2b570a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/49607964c87f5f8fe647160c42b178226e2b570a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3ade8ae6608a9d371580e5e8d68c26a4e3e897fb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3ade8ae6608a9d371580e5e8d68c26a4e3e897fb", "html_url": "https://github.com/rust-lang/rust/commit/3ade8ae6608a9d371580e5e8d68c26a4e3e897fb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3ade8ae6608a9d371580e5e8d68c26a4e3e897fb/comments", "author": {"login": "TimDiekmann", "id": 21277928, "node_id": "MDQ6VXNlcjIxMjc3OTI4", "avatar_url": "https://avatars.githubusercontent.com/u/21277928?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TimDiekmann", "html_url": "https://github.com/TimDiekmann", "followers_url": "https://api.github.com/users/TimDiekmann/followers", "following_url": "https://api.github.com/users/TimDiekmann/following{/other_user}", "gists_url": "https://api.github.com/users/TimDiekmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/TimDiekmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TimDiekmann/subscriptions", "organizations_url": "https://api.github.com/users/TimDiekmann/orgs", "repos_url": "https://api.github.com/users/TimDiekmann/repos", "events_url": "https://api.github.com/users/TimDiekmann/events{/privacy}", "received_events_url": "https://api.github.com/users/TimDiekmann/received_events", "type": "User", "site_admin": false}, "committer": {"login": "TimDiekmann", "id": 21277928, "node_id": "MDQ6VXNlcjIxMjc3OTI4", "avatar_url": "https://avatars.githubusercontent.com/u/21277928?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TimDiekmann", "html_url": "https://github.com/TimDiekmann", "followers_url": "https://api.github.com/users/TimDiekmann/followers", "following_url": "https://api.github.com/users/TimDiekmann/following{/other_user}", "gists_url": "https://api.github.com/users/TimDiekmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/TimDiekmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TimDiekmann/subscriptions", "organizations_url": "https://api.github.com/users/TimDiekmann/orgs", "repos_url": "https://api.github.com/users/TimDiekmann/repos", "events_url": "https://api.github.com/users/TimDiekmann/events{/privacy}", "received_events_url": "https://api.github.com/users/TimDiekmann/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bf6a46db3129b0bf31dc67f06af2e52ece52701a", "url": "https://api.github.com/repos/rust-lang/rust/commits/bf6a46db3129b0bf31dc67f06af2e52ece52701a", "html_url": "https://github.com/rust-lang/rust/commit/bf6a46db3129b0bf31dc67f06af2e52ece52701a"}], "stats": {"total": 69, "additions": 39, "deletions": 30}, "files": [{"sha": "66575e3ef55170ae0e2ab5497a11287ea3f527d6", "filename": "src/liballoc/alloc.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3ade8ae6608a9d371580e5e8d68c26a4e3e897fb/src%2Fliballoc%2Falloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ade8ae6608a9d371580e5e8d68c26a4e3e897fb/src%2Fliballoc%2Falloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Falloc.rs?ref=3ade8ae6608a9d371580e5e8d68c26a4e3e897fb", "patch": "@@ -214,12 +214,12 @@ unsafe impl AllocRef for Global {\n                 self.alloc(new_layout, init)\n             }\n             ReallocPlacement::MayMove => {\n-                // `realloc` probably checks for `new_size > old_size` or something similar.\n+                // `realloc` probably checks for `new_size > size` or something similar.\n                 intrinsics::assume(new_size > size);\n                 let ptr = realloc(ptr.as_ptr(), layout, new_size);\n-                let mut memory =\n+                let memory =\n                     MemoryBlock { ptr: NonNull::new(ptr).ok_or(AllocErr)?, size: new_size };\n-                memory.init_offset(init, size);\n+                init.init_offset(memory, size);\n                 Ok(memory)\n             }\n         }\n@@ -250,7 +250,7 @@ unsafe impl AllocRef for Global {\n                 Ok(MemoryBlock { ptr: layout.dangling(), size: 0 })\n             }\n             ReallocPlacement::MayMove => {\n-                // `realloc` probably checks for `new_size < old_size` or something similar.\n+                // `realloc` probably checks for `new_size < size` or something similar.\n                 intrinsics::assume(new_size < size);\n                 let ptr = realloc(ptr.as_ptr(), layout, new_size);\n                 Ok(MemoryBlock { ptr: NonNull::new(ptr).ok_or(AllocErr)?, size: new_size })"}, {"sha": "cc8c730b63a9487c8675795d7d95f3fe5ed011f4", "filename": "src/libcore/alloc/mod.rs", "status": "modified", "additions": 31, "deletions": 22, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/3ade8ae6608a9d371580e5e8d68c26a4e3e897fb/src%2Flibcore%2Falloc%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ade8ae6608a9d371580e5e8d68c26a4e3e897fb/src%2Flibcore%2Falloc%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Falloc%2Fmod.rs?ref=3ade8ae6608a9d371580e5e8d68c26a4e3e897fb", "patch": "@@ -41,27 +41,22 @@ pub enum AllocInit {\n     Zeroed,\n }\n \n-/// Represents a block of allocated memory returned by an allocator.\n-#[derive(Debug, Copy, Clone)]\n-#[unstable(feature = \"allocator_api\", issue = \"32838\")]\n-pub struct MemoryBlock {\n-    pub ptr: NonNull<u8>,\n-    pub size: usize,\n-}\n-\n-impl MemoryBlock {\n-    /// Initialize the memory block like specified by `init`.\n+impl AllocInit {\n+    /// Initialize the specified memory block.\n+    ///\n+    /// This behaves like calling [`AllocInit::initialize_offset(ptr, layout, 0)`][off].\n+    ///\n+    /// [off]: AllocInit::init_offset\n     ///\n-    /// This behaves like calling [`MemoryBlock::initialize_offset(ptr, layout, 0)`][off].\n+    /// # Safety\n     ///\n-    /// [off]: MemoryBlock::init_offset\n+    /// * `memory.ptr` must be [valid] for writes of `memory.size` bytes.\n     ///\n-    /// [*fit*]: trait.AllocRef.html#memory-fitting\n+    /// [valid]: ../ptr/index.html#safety\n     #[inline]\n     #[unstable(feature = \"allocator_api\", issue = \"32838\")]\n-    pub fn init(&mut self, init: AllocInit) {\n-        // SAFETY: 0 is always smaller or equal to the size\n-        unsafe { self.init_offset(init, 0) }\n+    pub unsafe fn init(self, memory: MemoryBlock) {\n+        self.init_offset(memory, 0)\n     }\n \n     /// Initialize the memory block like specified by `init` at the specified `offset`.\n@@ -71,20 +66,34 @@ impl MemoryBlock {\n     ///\n     /// # Safety\n     ///\n-    /// * `offset` must be smaller than or equal to `size()`\n+    /// * `memory.ptr` must be [valid] for writes of `memory.size` bytes.\n+    /// * `offset` must be smaller than or equal to `memory.size`\n     ///\n-    /// [*fit*]: trait.AllocRef.html#memory-fitting\n+    /// [valid]: ../ptr/index.html#safety\n     #[inline]\n     #[unstable(feature = \"allocator_api\", issue = \"32838\")]\n-    pub unsafe fn init_offset(&mut self, init: AllocInit, offset: usize) {\n-        debug_assert!(offset <= self.size, \"`offset` must be smaller than or equal to `size()`\");\n-        match init {\n+    pub unsafe fn init_offset(self, memory: MemoryBlock, offset: usize) {\n+        debug_assert!(\n+            offset <= memory.size,\n+            \"`offset` must be smaller than or equal to `memory.size`\"\n+        );\n+        match self {\n             AllocInit::Uninitialized => (),\n-            AllocInit::Zeroed => self.ptr.as_ptr().add(offset).write_bytes(0, self.size - offset),\n+            AllocInit::Zeroed => {\n+                memory.ptr.as_ptr().add(offset).write_bytes(0, memory.size - offset)\n+            }\n         }\n     }\n }\n \n+/// Represents a block of allocated memory returned by an allocator.\n+#[derive(Debug, Copy, Clone)]\n+#[unstable(feature = \"allocator_api\", issue = \"32838\")]\n+pub struct MemoryBlock {\n+    pub ptr: NonNull<u8>,\n+    pub size: usize,\n+}\n+\n /// A placement constraint when growing or shrinking an existing allocation.\n #[derive(Debug, Copy, Clone, PartialEq, Eq)]\n #[unstable(feature = \"allocator_api\", issue = \"32838\")]"}, {"sha": "8df4666c53601e052ecf663a25934673092342e1", "filename": "src/libstd/alloc.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3ade8ae6608a9d371580e5e8d68c26a4e3e897fb/src%2Flibstd%2Falloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ade8ae6608a9d371580e5e8d68c26a4e3e897fb/src%2Flibstd%2Falloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Falloc.rs?ref=3ade8ae6608a9d371580e5e8d68c26a4e3e897fb", "patch": "@@ -188,12 +188,12 @@ unsafe impl AllocRef for System {\n                 self.alloc(new_layout, init)\n             }\n             ReallocPlacement::MayMove => {\n-                // `realloc` probably checks for `new_size > old_size` or something similar.\n+                // `realloc` probably checks for `new_size > size` or something similar.\n                 intrinsics::assume(new_size > size);\n                 let ptr = GlobalAlloc::realloc(self, ptr.as_ptr(), layout, new_size);\n-                let mut memory =\n+                let memory =\n                     MemoryBlock { ptr: NonNull::new(ptr).ok_or(AllocErr)?, size: new_size };\n-                memory.init_offset(init, size);\n+                init.init_offset(memory, size);\n                 Ok(memory)\n             }\n         }\n@@ -224,7 +224,7 @@ unsafe impl AllocRef for System {\n                 Ok(MemoryBlock { ptr: layout.dangling(), size: 0 })\n             }\n             ReallocPlacement::MayMove => {\n-                // `realloc` probably checks for `new_size < old_size` or something similar.\n+                // `realloc` probably checks for `new_size < size` or something similar.\n                 intrinsics::assume(new_size < size);\n                 let ptr = GlobalAlloc::realloc(self, ptr.as_ptr(), layout, new_size);\n                 Ok(MemoryBlock { ptr: NonNull::new(ptr).ok_or(AllocErr)?, size: new_size })"}]}