{"sha": "a1d73674294385b53ea4b74c041a6fe9b441b2ae", "node_id": "MDY6Q29tbWl0NzI0NzEyOmExZDczNjc0Mjk0Mzg1YjUzZWE0Yjc0YzA0MWE2ZmU5YjQ0MWIyYWU=", "commit": {"author": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2021-04-29T14:23:17Z"}, "committer": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2021-04-29T21:26:46Z"}, "message": "Move iter_results to dyn FnMut rather than a generic\n\nThis means that we're no longer generating the iteration/locking code for each\ninvocation site of iter_results, rather just once per query.\n\nThis is a 15% win in instruction counts when compiling the rustc_query_impl crate.", "tree": {"sha": "ca191ac728630a52e726bb9d3691e093ce295c71", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ca191ac728630a52e726bb9d3691e093ce295c71"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a1d73674294385b53ea4b74c041a6fe9b441b2ae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a1d73674294385b53ea4b74c041a6fe9b441b2ae", "html_url": "https://github.com/rust-lang/rust/commit/a1d73674294385b53ea4b74c041a6fe9b441b2ae", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a1d73674294385b53ea4b74c041a6fe9b441b2ae/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c488f15700f15664b3bbda742c3f53f2b7a508d9", "url": "https://api.github.com/repos/rust-lang/rust/commits/c488f15700f15664b3bbda742c3f53f2b7a508d9", "html_url": "https://github.com/rust-lang/rust/commit/c488f15700f15664b3bbda742c3f53f2b7a508d9"}], "stats": {"total": 104, "additions": 55, "deletions": 49}, "files": [{"sha": "43b775f8083929a3f8cdc9a834bcd88f4c654b61", "filename": "compiler/rustc_middle/src/ty/query/on_disk_cache.rs", "status": "modified", "additions": 21, "deletions": 14, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/a1d73674294385b53ea4b74c041a6fe9b441b2ae/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fon_disk_cache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1d73674294385b53ea4b74c041a6fe9b441b2ae/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fon_disk_cache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fon_disk_cache.rs?ref=a1d73674294385b53ea4b74c041a6fe9b441b2ae", "patch": "@@ -1185,20 +1185,27 @@ where\n \n     assert!(Q::query_state(tcx).all_inactive());\n     let cache = Q::query_cache(tcx);\n-    cache.iter_results(|results| {\n-        for (key, value, dep_node) in results {\n-            if Q::cache_on_disk(tcx, &key, Some(value)) {\n-                let dep_node = SerializedDepNodeIndex::new(dep_node.index());\n-\n-                // Record position of the cache entry.\n-                query_result_index\n-                    .push((dep_node, AbsoluteBytePos::new(encoder.encoder.position())));\n-\n-                // Encode the type check tables with the `SerializedDepNodeIndex`\n-                // as tag.\n-                encoder.encode_tagged(dep_node, value)?;\n+    let mut res = Ok(());\n+    cache.iter_results(&mut |key, value, dep_node| {\n+        if res.is_err() {\n+            return;\n+        }\n+        if Q::cache_on_disk(tcx, &key, Some(value)) {\n+            let dep_node = SerializedDepNodeIndex::new(dep_node.index());\n+\n+            // Record position of the cache entry.\n+            query_result_index.push((dep_node, AbsoluteBytePos::new(encoder.encoder.position())));\n+\n+            // Encode the type check tables with the `SerializedDepNodeIndex`\n+            // as tag.\n+            match encoder.encode_tagged(dep_node, value) {\n+                Ok(()) => {}\n+                Err(e) => {\n+                    res = Err(e);\n+                }\n             }\n         }\n-        Ok(())\n-    })\n+    });\n+\n+    res\n }"}, {"sha": "2517793ecea7059e4c7f6d05daeabcc82b4cccbe", "filename": "compiler/rustc_query_impl/src/profiling_support.rs", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/a1d73674294385b53ea4b74c041a6fe9b441b2ae/compiler%2Frustc_query_impl%2Fsrc%2Fprofiling_support.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1d73674294385b53ea4b74c041a6fe9b441b2ae/compiler%2Frustc_query_impl%2Fsrc%2Fprofiling_support.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2Fsrc%2Fprofiling_support.rs?ref=a1d73674294385b53ea4b74c041a6fe9b441b2ae", "patch": "@@ -250,8 +250,8 @@ fn alloc_self_profile_query_strings_for_query_cache<'tcx, C>(\n             // need to invoke queries itself, we cannot keep the query caches\n             // locked while doing so. Instead we copy out the\n             // `(query_key, dep_node_index)` pairs and release the lock again.\n-            let query_keys_and_indices: Vec<_> = query_cache\n-                .iter_results(|results| results.map(|(k, _, i)| (k.clone(), i)).collect());\n+            let mut query_keys_and_indices = Vec::new();\n+            query_cache.iter_results(&mut |k, _, i| query_keys_and_indices.push((k.clone(), i)));\n \n             // Now actually allocate the strings. If allocating the strings\n             // generates new entries in the query cache, we'll miss them but\n@@ -275,14 +275,15 @@ fn alloc_self_profile_query_strings_for_query_cache<'tcx, C>(\n             let query_name = profiler.get_or_alloc_cached_string(query_name);\n             let event_id = event_id_builder.from_label(query_name).to_string_id();\n \n-            query_cache.iter_results(|results| {\n-                let query_invocation_ids: Vec<_> = results.map(|v| v.2.into()).collect();\n-\n-                profiler.bulk_map_query_invocation_id_to_single_string(\n-                    query_invocation_ids.into_iter(),\n-                    event_id,\n-                );\n+            let mut query_invocation_ids = Vec::new();\n+            query_cache.iter_results(&mut |_, _, i| {\n+                query_invocation_ids.push(i.into());\n             });\n+\n+            profiler.bulk_map_query_invocation_id_to_single_string(\n+                query_invocation_ids.into_iter(),\n+                event_id,\n+            );\n         }\n     });\n }"}, {"sha": "e877034bd7b5b28d9a2ebd91900f4f6618000077", "filename": "compiler/rustc_query_impl/src/stats.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a1d73674294385b53ea4b74c041a6fe9b441b2ae/compiler%2Frustc_query_impl%2Fsrc%2Fstats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1d73674294385b53ea4b74c041a6fe9b441b2ae/compiler%2Frustc_query_impl%2Fsrc%2Fstats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2Fsrc%2Fstats.rs?ref=a1d73674294385b53ea4b74c041a6fe9b441b2ae", "patch": "@@ -50,13 +50,12 @@ where\n         key_type: type_name::<C::Key>(),\n         value_size: mem::size_of::<C::Value>(),\n         value_type: type_name::<C::Value>(),\n-        entry_count: map.iter_results(|results| results.count()),\n+        entry_count: 0,\n         local_def_id_keys: None,\n     };\n-    map.iter_results(|results| {\n-        for (key, _, _) in results {\n-            key.key_stats(&mut stats)\n-        }\n+    map.iter_results(&mut |key, _, _| {\n+        stats.entry_count += 1;\n+        key.key_stats(&mut stats)\n     });\n     stats\n }"}, {"sha": "2e4c8d0565a63b198b07e24aec565c8c5194dcfe", "filename": "compiler/rustc_query_system/src/query/caches.rs", "status": "modified", "additions": 19, "deletions": 15, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/a1d73674294385b53ea4b74c041a6fe9b441b2ae/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fcaches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1d73674294385b53ea4b74c041a6fe9b441b2ae/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fcaches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fcaches.rs?ref=a1d73674294385b53ea4b74c041a6fe9b441b2ae", "patch": "@@ -49,13 +49,11 @@ pub trait QueryCache: QueryStorage {\n         index: DepNodeIndex,\n     ) -> Self::Stored;\n \n-    fn iter<R>(\n+    fn iter(\n         &self,\n         shards: &Sharded<Self::Sharded>,\n-        f: impl for<'a> FnOnce(\n-            &'a mut dyn Iterator<Item = (&'a Self::Key, &'a Self::Value, DepNodeIndex)>,\n-        ) -> R,\n-    ) -> R;\n+        f: &mut dyn FnMut(&Self::Key, &Self::Value, DepNodeIndex),\n+    );\n }\n \n pub struct DefaultCacheSelector;\n@@ -124,14 +122,17 @@ where\n         value\n     }\n \n-    fn iter<R>(\n+    fn iter(\n         &self,\n         shards: &Sharded<Self::Sharded>,\n-        f: impl for<'a> FnOnce(&'a mut dyn Iterator<Item = (&'a K, &'a V, DepNodeIndex)>) -> R,\n-    ) -> R {\n+        f: &mut dyn FnMut(&Self::Key, &Self::Value, DepNodeIndex),\n+    ) {\n         let shards = shards.lock_shards();\n-        let mut results = shards.iter().flat_map(|shard| shard.iter()).map(|(k, v)| (k, &v.0, v.1));\n-        f(&mut results)\n+        for shard in shards.iter() {\n+            for (k, v) in shard.iter() {\n+                f(k, &v.0, v.1);\n+            }\n+        }\n     }\n }\n \n@@ -207,13 +208,16 @@ where\n         &value.0\n     }\n \n-    fn iter<R>(\n+    fn iter(\n         &self,\n         shards: &Sharded<Self::Sharded>,\n-        f: impl for<'a> FnOnce(&'a mut dyn Iterator<Item = (&'a K, &'a V, DepNodeIndex)>) -> R,\n-    ) -> R {\n+        f: &mut dyn FnMut(&Self::Key, &Self::Value, DepNodeIndex),\n+    ) {\n         let shards = shards.lock_shards();\n-        let mut results = shards.iter().flat_map(|shard| shard.iter()).map(|(k, v)| (k, &v.0, v.1));\n-        f(&mut results)\n+        for shard in shards.iter() {\n+            for (k, v) in shard.iter() {\n+                f(k, &v.0, v.1);\n+            }\n+        }\n     }\n }"}, {"sha": "f7b83812e89fb46278eff1dd737f78df44db7b98", "filename": "compiler/rustc_query_system/src/query/plumbing.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a1d73674294385b53ea4b74c041a6fe9b441b2ae/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1d73674294385b53ea4b74c041a6fe9b441b2ae/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fplumbing.rs?ref=a1d73674294385b53ea4b74c041a6fe9b441b2ae", "patch": "@@ -73,12 +73,7 @@ impl<C: QueryCache> QueryCacheStore<C> {\n         (QueryLookup { key_hash, shard }, lock)\n     }\n \n-    pub fn iter_results<R>(\n-        &self,\n-        f: impl for<'a> FnOnce(\n-            &'a mut dyn Iterator<Item = (&'a C::Key, &'a C::Value, DepNodeIndex)>,\n-        ) -> R,\n-    ) -> R {\n+    pub fn iter_results(&self, f: &mut dyn FnMut(&C::Key, &C::Value, DepNodeIndex)) {\n         self.cache.iter(&self.shards, f)\n     }\n }"}]}