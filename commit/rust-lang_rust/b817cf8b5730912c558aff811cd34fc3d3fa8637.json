{"sha": "b817cf8b5730912c558aff811cd34fc3d3fa8637", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI4MTdjZjhiNTczMDkxMmM1NThhZmY4MTFjZDM0ZmMzZDNmYTg2Mzc=", "commit": {"author": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2016-10-21T01:01:06Z"}, "committer": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2016-10-21T09:27:15Z"}, "message": "Replace the `String` in `ParseResult::Failure` with `Token`.\n\nThis lets us delay creation of failure messages until they are needed,\nwhich avoids ~1.6M allocations in html5ever.", "tree": {"sha": "7e2c92dd5380a26890c139afccad36450ee9d1a2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7e2c92dd5380a26890c139afccad36450ee9d1a2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b817cf8b5730912c558aff811cd34fc3d3fa8637", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b817cf8b5730912c558aff811cd34fc3d3fa8637", "html_url": "https://github.com/rust-lang/rust/commit/b817cf8b5730912c558aff811cd34fc3d3fa8637", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b817cf8b5730912c558aff811cd34fc3d3fa8637/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e382267cfb9133ef12d59b66a2935ee45b546a61", "url": "https://api.github.com/repos/rust-lang/rust/commits/e382267cfb9133ef12d59b66a2935ee45b546a61", "html_url": "https://github.com/rust-lang/rust/commit/e382267cfb9133ef12d59b66a2935ee45b546a61"}], "stats": {"total": 46, "additions": 31, "deletions": 15}, "files": [{"sha": "74def68b18504909a6da9d805cc600c9ca65a0e6", "filename": "src/libsyntax/ext/tt/macro_parser.rs", "status": "modified", "additions": 13, "deletions": 6, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/b817cf8b5730912c558aff811cd34fc3d3fa8637/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b817cf8b5730912c558aff811cd34fc3d3fa8637/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs?ref=b817cf8b5730912c558aff811cd34fc3d3fa8637", "patch": "@@ -251,14 +251,22 @@ pub fn nameize(p_s: &ParseSess, ms: &[TokenTree], res: &[Rc<NamedMatch>])\n \n pub enum ParseResult<T> {\n     Success(T),\n-    /// Arm failed to match\n-    Failure(syntax_pos::Span, String),\n+    /// Arm failed to match. If the second parameter is `token::Eof`, it\n+    /// indicates an unexpected end of macro invocation. Otherwise, it\n+    /// indicates that no rules expected the given token.\n+    Failure(syntax_pos::Span, Token),\n     /// Fatal error (malformed macro?). Abort compilation.\n     Error(syntax_pos::Span, String)\n }\n \n+pub fn parse_failure_msg(tok: Token) -> String {\n+    match tok {\n+        token::Eof => \"unexpected end of macro invocation\".to_string(),\n+        _ => format!(\"no rules expected the token `{}`\", pprust::token_to_string(&tok)),\n+    }\n+}\n+\n pub type NamedParseResult = ParseResult<HashMap<Ident, Rc<NamedMatch>>>;\n-pub type PositionalParseResult = ParseResult<Vec<Rc<NamedMatch>>>;\n \n /// Perform a token equality check, ignoring syntax context (that is, an\n /// unhygienic comparison)\n@@ -446,7 +454,7 @@ pub fn parse(sess: &ParseSess,\n             } else if eof_eis.len() > 1 {\n                 return Error(sp, \"ambiguity: multiple successful parses\".to_string());\n             } else {\n-                return Failure(sp, \"unexpected end of macro invocation\".to_string());\n+                return Failure(sp, token::Eof);\n             }\n         } else {\n             if (!bb_eis.is_empty() && !next_eis.is_empty())\n@@ -467,8 +475,7 @@ pub fn parse(sess: &ParseSess,\n                     }\n                 ))\n             } else if bb_eis.is_empty() && next_eis.is_empty() {\n-                return Failure(sp, format!(\"no rules expected the token `{}`\",\n-                            pprust::token_to_string(&tok)));\n+                return Failure(sp, tok);\n             } else if !next_eis.is_empty() {\n                 /* Now process the next token */\n                 while !next_eis.is_empty() {"}, {"sha": "06d8dc74788e9a5e96ac8dabb9a800ced0fe0ae6", "filename": "src/libsyntax/ext/tt/macro_rules.rs", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/b817cf8b5730912c558aff811cd34fc3d3fa8637/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b817cf8b5730912c558aff811cd34fc3d3fa8637/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs?ref=b817cf8b5730912c558aff811cd34fc3d3fa8637", "patch": "@@ -16,7 +16,7 @@ use ext::expand::{Expansion, ExpansionKind};\n use ext::placeholders;\n use ext::tt::macro_parser::{Success, Error, Failure};\n use ext::tt::macro_parser::{MatchedSeq, MatchedNonterminal};\n-use ext::tt::macro_parser::parse;\n+use ext::tt::macro_parser::{parse, parse_failure_msg};\n use parse::ParseSess;\n use parse::lexer::new_tt_reader;\n use parse::parser::{Parser, Restrictions};\n@@ -100,7 +100,7 @@ fn generic_extension<'cx>(cx: &'cx ExtCtxt,\n \n     // Which arm's failure should we report? (the one furthest along)\n     let mut best_fail_spot = DUMMY_SP;\n-    let mut best_fail_msg = \"internal error: ran no matchers\".to_string();\n+    let mut best_fail_tok = None;\n \n     for (i, lhs) in lhses.iter().enumerate() { // try each arm's matchers\n         let lhs_tt = match *lhs {\n@@ -139,17 +139,18 @@ fn generic_extension<'cx>(cx: &'cx ExtCtxt,\n                     macro_ident: name\n                 })\n             }\n-            Failure(sp, msg) => if sp.lo >= best_fail_spot.lo {\n+            Failure(sp, tok) => if sp.lo >= best_fail_spot.lo {\n                 best_fail_spot = sp;\n-                best_fail_msg = msg;\n+                best_fail_tok = Some(tok);\n             },\n             Error(err_sp, ref msg) => {\n                 cx.span_fatal(err_sp.substitute_dummy(sp), &msg[..])\n             }\n         }\n     }\n \n-     cx.span_fatal(best_fail_spot.substitute_dummy(sp), &best_fail_msg[..]);\n+    let best_fail_msg = parse_failure_msg(best_fail_tok.expect(\"ran no matchers\"));\n+    cx.span_fatal(best_fail_spot.substitute_dummy(sp), &best_fail_msg);\n }\n \n pub struct MacroRulesExpander;\n@@ -227,8 +228,12 @@ pub fn compile(sess: &ParseSess, def: &ast::MacroDef) -> SyntaxExtension {\n \n     let argument_map = match parse(sess, &Vec::new(), arg_reader, &argument_gram) {\n         Success(m) => m,\n-        Failure(sp, str) | Error(sp, str) => {\n-            panic!(sess.span_diagnostic.span_fatal(sp.substitute_dummy(def.span), &str));\n+        Failure(sp, tok) => {\n+            let s = parse_failure_msg(tok);\n+            panic!(sess.span_diagnostic.span_fatal(sp.substitute_dummy(def.span), &s));\n+        }\n+        Error(sp, s) => {\n+            panic!(sess.span_diagnostic.span_fatal(sp.substitute_dummy(def.span), &s));\n         }\n     };\n "}, {"sha": "5229d42f1fdd4100acfdcb7c782b16aff8839af1", "filename": "src/test/run-pass-fulldeps/auxiliary/procedural_mbe_matching.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b817cf8b5730912c558aff811cd34fc3d3fa8637/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Fprocedural_mbe_matching.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b817cf8b5730912c558aff811cd34fc3d3fa8637/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Fprocedural_mbe_matching.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Fprocedural_mbe_matching.rs?ref=b817cf8b5730912c558aff811cd34fc3d3fa8637", "patch": "@@ -25,6 +25,7 @@ use syntax::ext::base::{ExtCtxt, MacResult, DummyResult, MacEager};\n use syntax::ext::build::AstBuilder;\n use syntax::ext::tt::macro_parser::{MatchedSeq, MatchedNonterminal};\n use syntax::ext::tt::macro_parser::{Success, Failure, Error};\n+use syntax::ext::tt::macro_parser::parse_failure_msg;\n use syntax::ptr::P;\n use syntax_pos::Span;\n use rustc_plugin::Registry;\n@@ -58,8 +59,11 @@ fn expand_mbe_matches(cx: &mut ExtCtxt, sp: Span, args: &[TokenTree])\n                 _ => unreachable!()\n             }\n         }\n-        Failure(_, s) | Error(_, s) => {\n-            panic!(\"expected Success, but got Error/Failure: {}\", s);\n+        Failure(_, tok) => {\n+            panic!(\"expected Success, but got Failure: {}\", parse_failure_msg(tok));\n+        }\n+        Error(_, s) => {\n+            panic!(\"expected Success, but got Error: {}\", s);\n         }\n     };\n "}]}