{"sha": "5fb797ca753dfc5586ac277d5af4facab8c7c22f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVmYjc5N2NhNzUzZGZjNTU4NmFjMjc3ZDVhZjRmYWNhYjhjN2MyMmY=", "commit": {"author": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2019-04-20T17:06:10Z"}, "committer": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2019-12-18T20:09:10Z"}, "message": "Make slice drop shims use AddressOf", "tree": {"sha": "658deab8623060f7b9573f76079fe18277900155", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/658deab8623060f7b9573f76079fe18277900155"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5fb797ca753dfc5586ac277d5af4facab8c7c22f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5fb797ca753dfc5586ac277d5af4facab8c7c22f", "html_url": "https://github.com/rust-lang/rust/commit/5fb797ca753dfc5586ac277d5af4facab8c7c22f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5fb797ca753dfc5586ac277d5af4facab8c7c22f/comments", "author": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "35919ace7084e10fce15cb9bb42a9404b63b849d", "url": "https://api.github.com/repos/rust-lang/rust/commits/35919ace7084e10fce15cb9bb42a9404b63b849d", "html_url": "https://github.com/rust-lang/rust/commit/35919ace7084e10fce15cb9bb42a9404b63b849d"}], "stats": {"total": 79, "additions": 32, "deletions": 47}, "files": [{"sha": "4f482431d33231c07e45578e748dff9e73d09dac", "filename": "src/librustc_mir/util/elaborate_drops.rs", "status": "modified", "additions": 23, "deletions": 38, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/5fb797ca753dfc5586ac277d5af4facab8c7c22f/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fb797ca753dfc5586ac277d5af4facab8c7c22f/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs?ref=5fb797ca753dfc5586ac277d5af4facab8c7c22f", "patch": "@@ -557,10 +557,10 @@ where\n     ///    if can_go then succ else drop-block\n     /// drop-block:\n     ///    if ptr_based {\n-    ///        ptr = &mut *cur\n+    ///        ptr = cur\n     ///        cur = cur.offset(1)\n     ///    } else {\n-    ///        ptr = &mut P[cur]\n+    ///        ptr = &raw mut P[cur]\n     ///        cur = cur + 1\n     ///    }\n     ///    drop(ptr)\n@@ -574,34 +574,28 @@ where\n         unwind: Unwind,\n         ptr_based: bool,\n     ) -> BasicBlock {\n-        let copy = |place: &Place<'tcx>| Operand::Copy(place.clone());\n-        let move_ = |place: &Place<'tcx>| Operand::Move(place.clone());\n+        let copy = |place: Place<'tcx>| Operand::Copy(place);\n+        let move_ = |place: Place<'tcx>| Operand::Move(place);\n         let tcx = self.tcx();\n \n-        let ref_ty = tcx.mk_ref(tcx.lifetimes.re_erased, ty::TypeAndMut {\n+        let ptr_ty = tcx.mk_ptr(ty::TypeAndMut {\n             ty: ety,\n             mutbl: hir::Mutability::Mutable\n         });\n-        let ptr = &Place::from(self.new_temp(ref_ty));\n-        let can_go = &Place::from(self.new_temp(tcx.types.bool));\n+        let ptr = &Place::from(self.new_temp(ptr_ty));\n+        let can_go = Place::from(self.new_temp(tcx.types.bool));\n \n         let one = self.constant_usize(1);\n         let (ptr_next, cur_next) = if ptr_based {\n-            (Rvalue::Ref(\n-                tcx.lifetimes.re_erased,\n-                BorrowKind::Mut { allow_two_phase_borrow: false },\n-                Place {\n-                    base: PlaceBase::Local(cur),\n-                    projection: tcx.intern_place_elems(&vec![ProjectionElem::Deref]),\n-                }\n-             ),\n-             Rvalue::BinaryOp(BinOp::Offset, move_(&Place::from(cur)), one))\n+            (\n+                Rvalue::Use(copy(cur.into())),\n+                Rvalue::BinaryOp(BinOp::Offset, move_(cur.into()), one),\n+            )\n         } else {\n-            (Rvalue::Ref(\n-                 tcx.lifetimes.re_erased,\n-                 BorrowKind::Mut { allow_two_phase_borrow: false },\n-                 tcx.mk_place_index(self.place.clone(), cur)),\n-             Rvalue::BinaryOp(BinOp::Add, move_(&Place::from(cur)), one))\n+            (\n+                Rvalue::AddressOf(Mutability::Mut, tcx.mk_place_index(self.place.clone(), cur)),\n+                Rvalue::BinaryOp(BinOp::Add, move_(cur.into()), one),\n+            )\n         };\n \n         let drop_block = BasicBlockData {\n@@ -620,9 +614,9 @@ where\n \n         let loop_block = BasicBlockData {\n             statements: vec![\n-                self.assign(can_go, Rvalue::BinaryOp(BinOp::Eq,\n-                                                     copy(&Place::from(cur)),\n-                                                     copy(length_or_end)))\n+                self.assign(&can_go, Rvalue::BinaryOp(BinOp::Eq,\n+                                                     copy(Place::from(cur)),\n+                                                     copy(length_or_end.clone())))\n             ],\n             is_cleanup: unwind.is_cleanup(),\n             terminator: Some(Terminator {\n@@ -725,8 +719,6 @@ where\n \n         let cur = self.new_temp(iter_ty);\n         let length_or_end = if ptr_based {\n-            // FIXME check if we want to make it return a `Place` directly\n-            // if all use sites want a `Place::Base` anyway.\n             Place::from(self.new_temp(iter_ty))\n         } else {\n             length.clone()\n@@ -753,23 +745,16 @@ where\n         let drop_block_stmts = if ptr_based {\n             let tmp_ty = tcx.mk_mut_ptr(self.place_ty(self.place));\n             let tmp = Place::from(self.new_temp(tmp_ty));\n-            // tmp = &mut P;\n+            // tmp = &raw mut P;\n             // cur = tmp as *mut T;\n             // end = Offset(cur, len);\n             vec![\n-                self.assign(&tmp, Rvalue::Ref(\n-                    tcx.lifetimes.re_erased,\n-                    BorrowKind::Mut { allow_two_phase_borrow: false },\n-                    self.place.clone()\n-                )),\n-                self.assign(\n-                    &cur,\n-                    Rvalue::Cast(CastKind::Misc, Operand::Move(tmp), iter_ty),\n-                ),\n+                self.assign(&tmp, Rvalue::AddressOf(Mutability::Mut, self.place.clone())),\n+                self.assign(&cur, Rvalue::Cast(CastKind::Misc, Operand::Move(tmp), iter_ty)),\n                 self.assign(\n                     &length_or_end,\n-                    Rvalue::BinaryOp(BinOp::Offset, Operand::Copy(cur), Operand::Move(length)\n-                )),\n+                    Rvalue::BinaryOp(BinOp::Offset, Operand::Copy(cur), Operand::Move(length)),\n+                ),\n             ]\n         } else {\n             // cur = 0 (length already pushed)"}, {"sha": "5a37b67229c37a14b4dc4b8c0a261ca818aa6202", "filename": "src/test/mir-opt/slice-drop-shim.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/5fb797ca753dfc5586ac277d5af4facab8c7c22f/src%2Ftest%2Fmir-opt%2Fslice-drop-shim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fb797ca753dfc5586ac277d5af4facab8c7c22f/src%2Ftest%2Fmir-opt%2Fslice-drop-shim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fslice-drop-shim.rs?ref=5fb797ca753dfc5586ac277d5af4facab8c7c22f", "patch": "@@ -10,15 +10,15 @@ fn main() {\n // let mut _2: usize;\n // let mut _3: usize;\n // let mut _4: usize;\n-// let mut _5: &mut std::string::String;\n+// let mut _5: *mut std::string::String;\n // let mut _6: bool;\n-// let mut _7: &mut std::string::String;\n+// let mut _7: *mut std::string::String;\n // let mut _8: bool;\n // let mut _9: *mut std::string::String;\n // let mut _10: *mut std::string::String;\n-// let mut _11: &mut std::string::String;\n+// let mut _11: *mut std::string::String;\n // let mut _12: bool;\n-// let mut _13: &mut std::string::String;\n+// let mut _13: *mut std::string::String;\n // let mut _14: bool;\n // let mut _15: *mut [std::string::String];\n // bb0: {\n@@ -31,7 +31,7 @@ fn main() {\n //     resume;\n // }\n // bb3 (cleanup): {\n-//     _5 = &mut (*_1)[_4];\n+//     _5 = &raw mut (*_1)[_4];\n //     _4 = Add(move _4, const 1usize);\n //     drop((*_5)) -> bb4;\n // }\n@@ -40,7 +40,7 @@ fn main() {\n //     switchInt(move _6) -> [false: bb3, otherwise: bb2];\n // }\n // bb5: {\n-//     _7 = &mut (*_1)[_4];\n+//     _7 = &raw mut (*_1)[_4];\n //     _4 = Add(move _4, const 1usize);\n //     drop((*_7)) -> [return: bb6, unwind: bb4];\n // }\n@@ -56,7 +56,7 @@ fn main() {\n //     goto -> bb7;\n // }\n // bb9 (cleanup): {\n-//     _11 = &mut (*_9);\n+//     _11 = _9;\n //     _9 = Offset(move _9, const 1usize);\n //     drop((*_11)) -> bb10;\n // }\n@@ -65,7 +65,7 @@ fn main() {\n //     switchInt(move _12) -> [false: bb9, otherwise: bb2];\n // }\n // bb11: {\n-//     _13 = &mut (*_9);\n+//     _13 = _9;\n //     _9 = Offset(move _9, const 1usize);\n //     drop((*_13)) -> [return: bb12, unwind: bb10];\n // }\n@@ -74,7 +74,7 @@ fn main() {\n //     switchInt(move _14) -> [false: bb11, otherwise: bb1];\n // }\n // bb13: {\n-//     _15 = &mut (*_1);\n+//     _15 = &raw mut (*_1);\n //     _9 = move _15 as *mut std::string::String (Misc);\n //     _10 = Offset(_9, move _3);\n //     goto -> bb12;"}]}