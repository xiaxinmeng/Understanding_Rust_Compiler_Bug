{"sha": "bda05cc471f8cf4a3c45f587f87d7b01a8343c3c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJkYTA1Y2M0NzFmOGNmNGEzYzQ1ZjU4N2Y4N2Q3YjAxYTgzNDNjM2M=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-12-07T22:47:20Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-12-07T22:47:20Z"}, "message": "Auto merge of #79653 - tmiasko:naked-functions, r=Amanieu\n\nValidate naked functions definitions\n\nValidate that naked functions are defined in terms of a single inline assembly\nblock that uses only `const` and `sym` operands and has `noreturn` option.\n\nImplemented as future incompatibility lint with intention to migrate it into\nhard error. When it becomes a hard error it will ensure that naked functions are\neither unsafe or contain an unsafe block around the inline assembly. It will\nguarantee that naked functions do not reference functions parameters (obsoleting\npart of existing checks from #79411). It will limit the definitions of naked\nfunctions to what can be reliably supported. It will also reject naked functions\nimplemented using legacy LLVM style assembly since it cannot satisfy those\nconditions.\n\nhttps://github.com/rust-lang/rfcs/pull/2774\nhttps://github.com/rust-lang/rfcs/pull/2972", "tree": {"sha": "598e1d1abfd047276d82817c8d2c5e15208c87a1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/598e1d1abfd047276d82817c8d2c5e15208c87a1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bda05cc471f8cf4a3c45f587f87d7b01a8343c3c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bda05cc471f8cf4a3c45f587f87d7b01a8343c3c", "html_url": "https://github.com/rust-lang/rust/commit/bda05cc471f8cf4a3c45f587f87d7b01a8343c3c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bda05cc471f8cf4a3c45f587f87d7b01a8343c3c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3d6705aa5abffe94c83bf09af8c3ba3c599845fc", "url": "https://api.github.com/repos/rust-lang/rust/commits/3d6705aa5abffe94c83bf09af8c3ba3c599845fc", "html_url": "https://github.com/rust-lang/rust/commit/3d6705aa5abffe94c83bf09af8c3ba3c599845fc"}, {"sha": "8065dabd171f7807b47a461b17f443df47a0cad5", "url": "https://api.github.com/repos/rust-lang/rust/commits/8065dabd171f7807b47a461b17f443df47a0cad5", "html_url": "https://github.com/rust-lang/rust/commit/8065dabd171f7807b47a461b17f443df47a0cad5"}], "stats": {"total": 912, "additions": 773, "deletions": 139}, "files": [{"sha": "6ad6e664316f40421aafa2934171619e6adc7fe6", "filename": "compiler/rustc_ast_lowering/src/expr.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bda05cc471f8cf4a3c45f587f87d7b01a8343c3c/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bda05cc471f8cf4a3c45f587f87d7b01a8343c3c/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs?ref=bda05cc471f8cf4a3c45f587f87d7b01a8343c3c", "patch": "@@ -1307,7 +1307,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                         hir::InlineAsmOperand::Sym { expr: self.lower_expr_mut(expr) }\n                     }\n                 };\n-                Some(op)\n+                Some((op, *op_sp))\n             })\n             .collect();\n \n@@ -1326,7 +1326,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n             } = *p\n             {\n                 let op_sp = asm.operands[operand_idx].1;\n-                match &operands[operand_idx] {\n+                match &operands[operand_idx].0 {\n                     hir::InlineAsmOperand::In { reg, .. }\n                     | hir::InlineAsmOperand::Out { reg, .. }\n                     | hir::InlineAsmOperand::InOut { reg, .. }\n@@ -1385,8 +1385,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         let mut used_input_regs = FxHashMap::default();\n         let mut used_output_regs = FxHashMap::default();\n         let mut required_features: Vec<&str> = vec![];\n-        for (idx, op) in operands.iter().enumerate() {\n-            let op_sp = asm.operands[idx].1;\n+        for (idx, &(ref op, op_sp)) in operands.iter().enumerate() {\n             if let Some(reg) = op.reg() {\n                 // Make sure we don't accidentally carry features from the\n                 // previous iteration.\n@@ -1458,8 +1457,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                                     skip = true;\n \n                                     let idx2 = *o.get();\n-                                    let op2 = &operands[idx2];\n-                                    let op_sp2 = asm.operands[idx2].1;\n+                                    let &(ref op2, op_sp2) = &operands[idx2];\n                                     let reg2 = match op2.reg() {\n                                         Some(asm::InlineAsmRegOrRegClass::Reg(r)) => r,\n                                         _ => unreachable!(),"}, {"sha": "c7dc66b70fef1107e4451500331f14db3406f105", "filename": "compiler/rustc_hir/src/arena.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bda05cc471f8cf4a3c45f587f87d7b01a8343c3c/compiler%2Frustc_hir%2Fsrc%2Farena.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bda05cc471f8cf4a3c45f587f87d7b01a8343c3c/compiler%2Frustc_hir%2Fsrc%2Farena.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Farena.rs?ref=bda05cc471f8cf4a3c45f587f87d7b01a8343c3c", "patch": "@@ -14,7 +14,7 @@ macro_rules! arena_types {\n             // HIR types\n             [few] hir_krate: rustc_hir::Crate<$tcx>,\n             [] arm: rustc_hir::Arm<$tcx>,\n-            [] asm_operand: rustc_hir::InlineAsmOperand<$tcx>,\n+            [] asm_operand: (rustc_hir::InlineAsmOperand<$tcx>, Span),\n             [] asm_template: rustc_ast::InlineAsmTemplatePiece,\n             [] attribute: rustc_ast::Attribute,\n             [] block: rustc_hir::Block<$tcx>,"}, {"sha": "280e863d4744d02578e6d45523c04d350f3fbfc0", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bda05cc471f8cf4a3c45f587f87d7b01a8343c3c/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bda05cc471f8cf4a3c45f587f87d7b01a8343c3c/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=bda05cc471f8cf4a3c45f587f87d7b01a8343c3c", "patch": "@@ -2143,7 +2143,7 @@ impl<'hir> InlineAsmOperand<'hir> {\n #[derive(Debug, HashStable_Generic)]\n pub struct InlineAsm<'hir> {\n     pub template: &'hir [InlineAsmTemplatePiece],\n-    pub operands: &'hir [InlineAsmOperand<'hir>],\n+    pub operands: &'hir [(InlineAsmOperand<'hir>, Span)],\n     pub options: InlineAsmOptions,\n     pub line_spans: &'hir [Span],\n }"}, {"sha": "3c330c5d6c5288b2ffdc11f05c9a4cba334ef152", "filename": "compiler/rustc_hir/src/intravisit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bda05cc471f8cf4a3c45f587f87d7b01a8343c3c/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bda05cc471f8cf4a3c45f587f87d7b01a8343c3c/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs?ref=bda05cc471f8cf4a3c45f587f87d7b01a8343c3c", "patch": "@@ -1191,7 +1191,7 @@ pub fn walk_expr<'v, V: Visitor<'v>>(visitor: &mut V, expression: &'v Expr<'v>)\n             walk_list!(visitor, visit_expr, optional_expression);\n         }\n         ExprKind::InlineAsm(ref asm) => {\n-            for op in asm.operands {\n+            for (op, _op_sp) in asm.operands {\n                 match op {\n                     InlineAsmOperand::In { expr, .. }\n                     | InlineAsmOperand::InOut { expr, .. }"}, {"sha": "597c55b4bd7f3237cc4de0191773bb7e1744e692", "filename": "compiler/rustc_hir_pretty/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bda05cc471f8cf4a3c45f587f87d7b01a8343c3c/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bda05cc471f8cf4a3c45f587f87d7b01a8343c3c/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs?ref=bda05cc471f8cf4a3c45f587f87d7b01a8343c3c", "patch": "@@ -1462,7 +1462,7 @@ impl<'a> State<'a> {\n \n                 let mut args = vec![];\n                 args.push(AsmArg::Template(ast::InlineAsmTemplatePiece::to_string(&a.template)));\n-                args.extend(a.operands.iter().map(|o| AsmArg::Operand(o)));\n+                args.extend(a.operands.iter().map(|(o, _)| AsmArg::Operand(o)));\n                 if !a.options.is_empty() {\n                     args.push(AsmArg::Options(a.options));\n                 }"}, {"sha": "a9358c9610a5e6029171fface5491af493370a37", "filename": "compiler/rustc_lint_defs/src/builtin.rs", "status": "modified", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/bda05cc471f8cf4a3c45f587f87d7b01a8343c3c/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bda05cc471f8cf4a3c45f587f87d7b01a8343c3c/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs?ref=bda05cc471f8cf4a3c45f587f87d7b01a8343c3c", "patch": "@@ -2742,6 +2742,50 @@ declare_lint! {\n     \"detects deprecation attributes with no effect\",\n }\n \n+declare_lint! {\n+    /// The `unsupported_naked_functions` lint detects naked function\n+    /// definitions that are unsupported but were previously accepted.\n+    ///\n+    /// ### Example\n+    ///\n+    /// ```rust\n+    /// #![feature(naked_functions)]\n+    ///\n+    /// #[naked]\n+    /// pub fn f() -> u32 {\n+    ///     42\n+    /// }\n+    /// ```\n+    ///\n+    /// {{produces}}\n+    ///\n+    /// ### Explanation\n+    ///\n+    /// The naked functions must be defined using a single inline assembly\n+    /// block.\n+    ///\n+    /// The execution must never fall through past the end of the assembly\n+    /// code so the block must use `noreturn` option. The asm block can also\n+    /// use `att_syntax` option, but other options are not allowed.\n+    ///\n+    /// The asm block must not contain any operands other than `const` and\n+    /// `sym`. Additionally, naked function should specify a non-Rust ABI.\n+    ///\n+    /// While other definitions of naked functions were previously accepted,\n+    /// they are unsupported and might not work reliably. This is a\n+    /// [future-incompatible] lint that will transition into hard error in\n+    /// the future.\n+    ///\n+    /// [future-incompatible]: ../index.md#future-incompatible-lints\n+    pub UNSUPPORTED_NAKED_FUNCTIONS,\n+    Warn,\n+    \"unsupported naked function definitions\",\n+    @future_incompatible = FutureIncompatibleInfo {\n+        reference: \"issue #32408 <https://github.com/rust-lang/rust/issues/32408>\",\n+        edition: None,\n+    };\n+}\n+\n declare_tool_lint! {\n     pub rustc::INEFFECTIVE_UNSTABLE_TRAIT_IMPL,\n     Deny,\n@@ -2832,6 +2876,7 @@ declare_lint_pass! {\n         UNINHABITED_STATIC,\n         FUNCTION_ITEM_REFERENCES,\n         USELESS_DEPRECATED,\n+        UNSUPPORTED_NAKED_FUNCTIONS,\n     ]\n }\n "}, {"sha": "e934d8ed9da5f9a18643254a53dbd46dff156cd2", "filename": "compiler/rustc_mir_build/src/thir/cx/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bda05cc471f8cf4a3c45f587f87d7b01a8343c3c/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bda05cc471f8cf4a3c45f587f87d7b01a8343c3c/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs?ref=bda05cc471f8cf4a3c45f587f87d7b01a8343c3c", "patch": "@@ -408,7 +408,7 @@ fn make_mirror_unadjusted<'a, 'tcx>(\n             operands: asm\n                 .operands\n                 .iter()\n-                .map(|op| {\n+                .map(|(op, _op_sp)| {\n                     match *op {\n                         hir::InlineAsmOperand::In { reg, ref expr } => {\n                             InlineAsmOperand::In { reg, expr: expr.to_ref() }"}, {"sha": "711e8e87c6c6e7d70133e7b24c7a305b752ab7ab", "filename": "compiler/rustc_passes/src/intrinsicck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bda05cc471f8cf4a3c45f587f87d7b01a8343c3c/compiler%2Frustc_passes%2Fsrc%2Fintrinsicck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bda05cc471f8cf4a3c45f587f87d7b01a8343c3c/compiler%2Frustc_passes%2Fsrc%2Fintrinsicck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fintrinsicck.rs?ref=bda05cc471f8cf4a3c45f587f87d7b01a8343c3c", "patch": "@@ -347,7 +347,7 @@ impl ExprVisitor<'tcx> {\n     }\n \n     fn check_asm(&self, asm: &hir::InlineAsm<'tcx>) {\n-        for (idx, op) in asm.operands.iter().enumerate() {\n+        for (idx, (op, _op_sp)) in asm.operands.iter().enumerate() {\n             match *op {\n                 hir::InlineAsmOperand::In { reg, ref expr } => {\n                     self.check_asm_operand_type(idx, reg, expr, asm.template, None);"}, {"sha": "a64c6fa319ca98f3874d0c8afa55e8bceada7676", "filename": "compiler/rustc_passes/src/liveness.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bda05cc471f8cf4a3c45f587f87d7b01a8343c3c/compiler%2Frustc_passes%2Fsrc%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bda05cc471f8cf4a3c45f587f87d7b01a8343c3c/compiler%2Frustc_passes%2Fsrc%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fliveness.rs?ref=bda05cc471f8cf4a3c45f587f87d7b01a8343c3c", "patch": "@@ -1174,7 +1174,7 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n                 };\n \n                 // Do a first pass for writing outputs only\n-                for op in asm.operands.iter().rev() {\n+                for (op, _op_sp) in asm.operands.iter().rev() {\n                     match op {\n                         hir::InlineAsmOperand::In { .. }\n                         | hir::InlineAsmOperand::Const { .. }\n@@ -1197,7 +1197,7 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n \n                 // Then do a second pass for inputs\n                 let mut succ = succ;\n-                for op in asm.operands.iter().rev() {\n+                for (op, _op_sp) in asm.operands.iter().rev() {\n                     match op {\n                         hir::InlineAsmOperand::In { expr, .. }\n                         | hir::InlineAsmOperand::Const { expr, .. }\n@@ -1454,7 +1454,7 @@ fn check_expr<'tcx>(this: &mut Liveness<'_, 'tcx>, expr: &'tcx Expr<'tcx>) {\n         }\n \n         hir::ExprKind::InlineAsm(ref asm) => {\n-            for op in asm.operands {\n+            for (op, _op_sp) in asm.operands {\n                 match op {\n                     hir::InlineAsmOperand::Out { expr, .. } => {\n                         if let Some(expr) = expr {"}, {"sha": "5b50ef8627b25482aa8213a9f78cc1338b4f8d3a", "filename": "compiler/rustc_passes/src/naked_functions.rs", "status": "modified", "additions": 224, "deletions": 15, "changes": 239, "blob_url": "https://github.com/rust-lang/rust/blob/bda05cc471f8cf4a3c45f587f87d7b01a8343c3c/compiler%2Frustc_passes%2Fsrc%2Fnaked_functions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bda05cc471f8cf4a3c45f587f87d7b01a8343c3c/compiler%2Frustc_passes%2Fsrc%2Fnaked_functions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fnaked_functions.rs?ref=bda05cc471f8cf4a3c45f587f87d7b01a8343c3c", "patch": "@@ -1,10 +1,16 @@\n+//! Checks validity of naked functions.\n+\n+use rustc_ast::InlineAsmOptions;\n use rustc_hir as hir;\n use rustc_hir::def_id::LocalDefId;\n use rustc_hir::intravisit::{ErasedMap, FnKind, NestedVisitorMap, Visitor};\n+use rustc_hir::{ExprKind, HirId, InlineAsmOperand, StmtKind};\n use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::TyCtxt;\n+use rustc_session::lint::builtin::UNSUPPORTED_NAKED_FUNCTIONS;\n use rustc_span::symbol::sym;\n use rustc_span::Span;\n+use rustc_target::spec::abi::Abi;\n \n fn check_mod_naked_functions(tcx: TyCtxt<'_>, module_def_id: LocalDefId) {\n     tcx.hir().visit_item_likes_in_module(\n@@ -33,27 +39,52 @@ impl<'tcx> Visitor<'tcx> for CheckNakedFunctions<'tcx> {\n         fk: FnKind<'v>,\n         _fd: &'tcx hir::FnDecl<'tcx>,\n         body_id: hir::BodyId,\n-        _span: Span,\n-        _hir_id: hir::HirId,\n+        span: Span,\n+        hir_id: HirId,\n     ) {\n+        let ident_span;\n+        let fn_header;\n+\n         match fk {\n-            // Rejected during attribute check. Do not validate further.\n-            FnKind::Closure(..) => return,\n-            FnKind::ItemFn(..) | FnKind::Method(..) => {}\n+            FnKind::Closure(..) => {\n+                // Closures with a naked attribute are rejected during attribute\n+                // check. Don't validate them any further.\n+                return;\n+            }\n+            FnKind::ItemFn(ident, _, ref header, ..) => {\n+                ident_span = ident.span;\n+                fn_header = header;\n+            }\n+\n+            FnKind::Method(ident, ref sig, ..) => {\n+                ident_span = ident.span;\n+                fn_header = &sig.header;\n+            }\n         }\n \n         let naked = fk.attrs().iter().any(|attr| attr.has_name(sym::naked));\n         if naked {\n             let body = self.tcx.hir().body(body_id);\n-            check_params(self.tcx, body);\n-            check_body(self.tcx, body);\n+            check_abi(self.tcx, hir_id, fn_header.abi, ident_span);\n+            check_no_patterns(self.tcx, body.params);\n+            check_no_parameters_use(self.tcx, body);\n+            check_asm(self.tcx, hir_id, body, span);\n         }\n     }\n }\n \n+/// Checks that function uses non-Rust ABI.\n+fn check_abi(tcx: TyCtxt<'_>, hir_id: HirId, abi: Abi, fn_ident_span: Span) {\n+    if abi == Abi::Rust {\n+        tcx.struct_span_lint_hir(UNSUPPORTED_NAKED_FUNCTIONS, hir_id, fn_ident_span, |lint| {\n+            lint.build(\"Rust ABI is unsupported in naked functions\").emit();\n+        });\n+    }\n+}\n+\n /// Checks that parameters don't use patterns. Mirrors the checks for function declarations.\n-fn check_params(tcx: TyCtxt<'_>, body: &hir::Body<'_>) {\n-    for param in body.params {\n+fn check_no_patterns(tcx: TyCtxt<'_>, params: &[hir::Param<'_>]) {\n+    for param in params {\n         match param.pat.kind {\n             hir::PatKind::Wild\n             | hir::PatKind::Binding(hir::BindingAnnotation::Unannotated, _, _, None) => {}\n@@ -69,23 +100,23 @@ fn check_params(tcx: TyCtxt<'_>, body: &hir::Body<'_>) {\n     }\n }\n \n-/// Checks that function parameters aren't referenced in the function body.\n-fn check_body<'tcx>(tcx: TyCtxt<'tcx>, body: &'tcx hir::Body<'tcx>) {\n+/// Checks that function parameters aren't used in the function body.\n+fn check_no_parameters_use<'tcx>(tcx: TyCtxt<'tcx>, body: &'tcx hir::Body<'tcx>) {\n     let mut params = hir::HirIdSet::default();\n     for param in body.params {\n         param.pat.each_binding(|_binding_mode, hir_id, _span, _ident| {\n             params.insert(hir_id);\n         });\n     }\n-    CheckBody { tcx, params }.visit_body(body);\n+    CheckParameters { tcx, params }.visit_body(body);\n }\n \n-struct CheckBody<'tcx> {\n+struct CheckParameters<'tcx> {\n     tcx: TyCtxt<'tcx>,\n     params: hir::HirIdSet,\n }\n \n-impl<'tcx> Visitor<'tcx> for CheckBody<'tcx> {\n+impl<'tcx> Visitor<'tcx> for CheckParameters<'tcx> {\n     type Map = ErasedMap<'tcx>;\n \n     fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n@@ -103,11 +134,189 @@ impl<'tcx> Visitor<'tcx> for CheckBody<'tcx> {\n                     .sess\n                     .struct_span_err(\n                         expr.span,\n-                        \"use of parameters not allowed inside naked functions\",\n+                        \"referencing function parameters is not allowed in naked functions\",\n                     )\n+                    .help(\"follow the calling convention in asm block to use parameters\")\n                     .emit();\n+                return;\n             }\n         }\n         hir::intravisit::walk_expr(self, expr);\n     }\n }\n+\n+/// Checks that function body contains a single inline assembly block.\n+fn check_asm<'tcx>(tcx: TyCtxt<'tcx>, hir_id: HirId, body: &'tcx hir::Body<'tcx>, fn_span: Span) {\n+    let mut this = CheckInlineAssembly { tcx, items: Vec::new() };\n+    this.visit_body(body);\n+    if let &[(ItemKind::Asm, _)] = &this.items[..] {\n+        // Ok.\n+    } else {\n+        tcx.struct_span_lint_hir(UNSUPPORTED_NAKED_FUNCTIONS, hir_id, fn_span, |lint| {\n+            let mut diag = lint.build(\"naked functions must contain a single asm block\");\n+            let mut has_asm = false;\n+            for &(kind, span) in &this.items {\n+                match kind {\n+                    ItemKind::Asm if has_asm => {\n+                        diag.span_label(\n+                            span,\n+                            \"multiple asm blocks are unsupported in naked functions\",\n+                        );\n+                    }\n+                    ItemKind::Asm => has_asm = true,\n+                    ItemKind::NonAsm => {\n+                        diag.span_label(span, \"non-asm is unsupported in naked functions\");\n+                    }\n+                }\n+            }\n+            diag.emit();\n+        });\n+    }\n+}\n+\n+struct CheckInlineAssembly<'tcx> {\n+    tcx: TyCtxt<'tcx>,\n+    items: Vec<(ItemKind, Span)>,\n+}\n+\n+#[derive(Copy, Clone)]\n+enum ItemKind {\n+    Asm,\n+    NonAsm,\n+}\n+\n+impl<'tcx> CheckInlineAssembly<'tcx> {\n+    fn check_expr(&mut self, expr: &'tcx hir::Expr<'tcx>, span: Span) {\n+        match expr.kind {\n+            ExprKind::Box(..)\n+            | ExprKind::ConstBlock(..)\n+            | ExprKind::Array(..)\n+            | ExprKind::Call(..)\n+            | ExprKind::MethodCall(..)\n+            | ExprKind::Tup(..)\n+            | ExprKind::Binary(..)\n+            | ExprKind::Unary(..)\n+            | ExprKind::Lit(..)\n+            | ExprKind::Cast(..)\n+            | ExprKind::Type(..)\n+            | ExprKind::Loop(..)\n+            | ExprKind::Match(..)\n+            | ExprKind::Closure(..)\n+            | ExprKind::Assign(..)\n+            | ExprKind::AssignOp(..)\n+            | ExprKind::Field(..)\n+            | ExprKind::Index(..)\n+            | ExprKind::Path(..)\n+            | ExprKind::AddrOf(..)\n+            | ExprKind::Break(..)\n+            | ExprKind::Continue(..)\n+            | ExprKind::Ret(..)\n+            | ExprKind::Struct(..)\n+            | ExprKind::Repeat(..)\n+            | ExprKind::Yield(..) => {\n+                self.items.push((ItemKind::NonAsm, span));\n+            }\n+\n+            ExprKind::InlineAsm(ref asm) => {\n+                self.items.push((ItemKind::Asm, span));\n+                self.check_inline_asm(expr.hir_id, asm, span);\n+            }\n+\n+            ExprKind::LlvmInlineAsm(..) => {\n+                self.items.push((ItemKind::Asm, span));\n+                self.tcx.struct_span_lint_hir(\n+                    UNSUPPORTED_NAKED_FUNCTIONS,\n+                    expr.hir_id,\n+                    span,\n+                    |lint| {\n+                        lint.build(\n+                            \"the LLVM-style inline assembly is unsupported in naked functions\",\n+                        )\n+                        .help(\"use the new asm! syntax specified in RFC 2873\")\n+                        .emit();\n+                    },\n+                );\n+            }\n+\n+            ExprKind::DropTemps(..) | ExprKind::Block(..) | ExprKind::Err => {\n+                hir::intravisit::walk_expr(self, expr);\n+            }\n+        }\n+    }\n+\n+    fn check_inline_asm(&self, hir_id: HirId, asm: &'tcx hir::InlineAsm<'tcx>, span: Span) {\n+        let unsupported_operands: Vec<Span> = asm\n+            .operands\n+            .iter()\n+            .filter_map(|&(ref op, op_sp)| match op {\n+                InlineAsmOperand::Const { .. } | InlineAsmOperand::Sym { .. } => None,\n+                InlineAsmOperand::In { .. }\n+                | InlineAsmOperand::Out { .. }\n+                | InlineAsmOperand::InOut { .. }\n+                | InlineAsmOperand::SplitInOut { .. } => Some(op_sp),\n+            })\n+            .collect();\n+        if !unsupported_operands.is_empty() {\n+            self.tcx.struct_span_lint_hir(\n+                UNSUPPORTED_NAKED_FUNCTIONS,\n+                hir_id,\n+                unsupported_operands,\n+                |lint| {\n+                    lint.build(\"only `const` and `sym` operands are supported in naked functions\")\n+                        .emit();\n+                },\n+            );\n+        }\n+\n+        let unsupported_options: Vec<&'static str> = [\n+            (InlineAsmOptions::NOMEM, \"`nomem`\"),\n+            (InlineAsmOptions::NOSTACK, \"`nostack`\"),\n+            (InlineAsmOptions::PRESERVES_FLAGS, \"`preserves_flags`\"),\n+            (InlineAsmOptions::PURE, \"`pure`\"),\n+            (InlineAsmOptions::READONLY, \"`readonly`\"),\n+        ]\n+        .iter()\n+        .filter_map(|&(option, name)| if asm.options.contains(option) { Some(name) } else { None })\n+        .collect();\n+\n+        if !unsupported_options.is_empty() {\n+            self.tcx.struct_span_lint_hir(UNSUPPORTED_NAKED_FUNCTIONS, hir_id, span, |lint| {\n+                lint.build(&format!(\n+                    \"asm options unsupported in naked functions: {}\",\n+                    unsupported_options.join(\", \")\n+                ))\n+                .emit();\n+            });\n+        }\n+\n+        if !asm.options.contains(InlineAsmOptions::NORETURN) {\n+            self.tcx.struct_span_lint_hir(UNSUPPORTED_NAKED_FUNCTIONS, hir_id, span, |lint| {\n+                lint.build(\"asm in naked functions must use `noreturn` option\").emit();\n+            });\n+        }\n+    }\n+}\n+\n+impl<'tcx> Visitor<'tcx> for CheckInlineAssembly<'tcx> {\n+    type Map = ErasedMap<'tcx>;\n+\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n+        NestedVisitorMap::None\n+    }\n+\n+    fn visit_stmt(&mut self, stmt: &'tcx hir::Stmt<'tcx>) {\n+        match stmt.kind {\n+            StmtKind::Item(..) => {}\n+            StmtKind::Local(..) => {\n+                self.items.push((ItemKind::NonAsm, stmt.span));\n+            }\n+            StmtKind::Expr(ref expr) | StmtKind::Semi(ref expr) => {\n+                self.check_expr(expr, stmt.span);\n+            }\n+        }\n+    }\n+\n+    fn visit_expr(&mut self, expr: &'tcx hir::Expr<'tcx>) {\n+        self.check_expr(&expr, expr.span);\n+    }\n+}"}, {"sha": "b8a2a4779d9853aa357b9ed6eea2fff9b74ae69c", "filename": "compiler/rustc_typeck/src/check/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bda05cc471f8cf4a3c45f587f87d7b01a8343c3c/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bda05cc471f8cf4a3c45f587f87d7b01a8343c3c/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs?ref=bda05cc471f8cf4a3c45f587f87d7b01a8343c3c", "patch": "@@ -1929,7 +1929,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     }\n \n     fn check_expr_asm(&self, asm: &'tcx hir::InlineAsm<'tcx>) -> Ty<'tcx> {\n-        for op in asm.operands {\n+        for (op, _op_sp) in asm.operands {\n             match op {\n                 hir::InlineAsmOperand::In { expr, .. } | hir::InlineAsmOperand::Const { expr } => {\n                     self.check_expr_asm_operand(expr, true);"}, {"sha": "95848ac2c076794dcc846168765f4a3046dc1edc", "filename": "compiler/rustc_typeck/src/expr_use_visitor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bda05cc471f8cf4a3c45f587f87d7b01a8343c3c/compiler%2Frustc_typeck%2Fsrc%2Fexpr_use_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bda05cc471f8cf4a3c45f587f87d7b01a8343c3c/compiler%2Frustc_typeck%2Fsrc%2Fexpr_use_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fexpr_use_visitor.rs?ref=bda05cc471f8cf4a3c45f587f87d7b01a8343c3c", "patch": "@@ -243,7 +243,7 @@ impl<'a, 'tcx> ExprUseVisitor<'a, 'tcx> {\n             }\n \n             hir::ExprKind::InlineAsm(ref asm) => {\n-                for op in asm.operands {\n+                for (op, _op_sp) in asm.operands {\n                     match op {\n                         hir::InlineAsmOperand::In { expr, .. }\n                         | hir::InlineAsmOperand::Const { expr, .. }"}, {"sha": "a46ca4544a68fbd46d3ece6d71449fbbece4fc54", "filename": "src/test/ui/asm/naked-functions.rs", "status": "added", "additions": 169, "deletions": 0, "changes": 169, "blob_url": "https://github.com/rust-lang/rust/blob/bda05cc471f8cf4a3c45f587f87d7b01a8343c3c/src%2Ftest%2Fui%2Fasm%2Fnaked-functions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bda05cc471f8cf4a3c45f587f87d7b01a8343c3c/src%2Ftest%2Fui%2Fasm%2Fnaked-functions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fnaked-functions.rs?ref=bda05cc471f8cf4a3c45f587f87d7b01a8343c3c", "patch": "@@ -0,0 +1,169 @@\n+// only-x86_64\n+#![feature(asm)]\n+#![feature(llvm_asm)]\n+#![feature(naked_functions)]\n+#![feature(or_patterns)]\n+#![crate_type = \"lib\"]\n+\n+#[repr(C)]\n+pub struct P { x: u8, y: u16 }\n+\n+#[naked]\n+pub unsafe extern \"C\" fn patterns(\n+    mut a: u32,\n+    //~^ ERROR patterns not allowed in naked function parameters\n+    &b: &i32,\n+    //~^ ERROR patterns not allowed in naked function parameters\n+    (None | Some(_)): Option<std::ptr::NonNull<u8>>,\n+    //~^ ERROR patterns not allowed in naked function parameters\n+    P { x, y }: P,\n+    //~^ ERROR patterns not allowed in naked function parameters\n+) {\n+    asm!(\"\", options(noreturn))\n+}\n+\n+#[naked]\n+pub unsafe extern \"C\" fn inc(a: u32) -> u32 {\n+    //~^ WARN naked functions must contain a single asm block\n+    //~| WARN this was previously accepted\n+    a + 1\n+    //~^ ERROR referencing function parameters is not allowed in naked functions\n+}\n+\n+#[naked]\n+pub unsafe extern \"C\" fn inc_asm(a: u32) -> u32 {\n+    asm!(\"/* {0} */\", in(reg) a, options(noreturn));\n+    //~^ ERROR referencing function parameters is not allowed in naked functions\n+    //~| WARN only `const` and `sym` operands are supported in naked functions\n+    //~| WARN this was previously accepted\n+}\n+\n+#[naked]\n+pub unsafe extern \"C\" fn inc_closure(a: u32) -> u32 {\n+    //~^ WARN naked functions must contain a single asm block\n+    //~| WARN this was previously accepted\n+    (|| a + 1)()\n+}\n+\n+#[naked]\n+pub unsafe extern \"C\" fn unsupported_operands() {\n+    //~^ WARN naked functions must contain a single asm block\n+    //~| WARN this was previously accepted\n+    let mut a = 0usize;\n+    let mut b = 0usize;\n+    let mut c = 0usize;\n+    let mut d = 0usize;\n+    let mut e = 0usize;\n+    const F: usize = 0usize;\n+    static G: usize = 0usize;\n+    asm!(\"/* {0} {1} {2} {3} {4} {5} {6} */\",\n+         //~^ WARN asm in naked functions must use `noreturn` option\n+         //~| WARN this was previously accepted\n+         in(reg) a,\n+         //~^ WARN only `const` and `sym` operands are supported in naked functions\n+         //~| WARN this was previously accepted\n+         inlateout(reg) b,\n+         inout(reg) c,\n+         lateout(reg) d,\n+         out(reg) e,\n+         const F,\n+         sym G,\n+    );\n+}\n+\n+#[naked]\n+pub extern \"C\" fn missing_assembly() {\n+    //~^ WARN naked functions must contain a single asm block\n+    //~| WARN this was previously accepted\n+}\n+\n+#[naked]\n+pub extern \"C\" fn too_many_asm_blocks() {\n+    //~^ WARN naked functions must contain a single asm block\n+    //~| WARN this was previously accepted\n+    asm!(\"\");\n+    //~^ WARN asm in naked functions must use `noreturn` option\n+    //~| WARN this was previously accepted\n+    asm!(\"\");\n+    //~^ WARN asm in naked functions must use `noreturn` option\n+    //~| WARN this was previously accepted\n+    asm!(\"\");\n+    //~^ WARN asm in naked functions must use `noreturn` option\n+    //~| WARN this was previously accepted\n+    asm!(\"\", options(noreturn));\n+}\n+\n+pub fn outer(x: u32) -> extern \"C\" fn(usize) -> usize {\n+    #[naked]\n+    pub extern \"C\" fn inner(y: usize) -> usize {\n+        //~^ WARN naked functions must contain a single asm block\n+        //~| WARN this was previously accepted\n+        *&y\n+        //~^ ERROR referencing function parameters is not allowed in naked functions\n+    }\n+    inner\n+}\n+\n+#[naked]\n+unsafe extern \"C\" fn llvm() -> ! {\n+    //~^ WARN naked functions must contain a single asm block\n+    //~| WARN this was previously accepted\n+    llvm_asm!(\"\");\n+    //~^ WARN LLVM-style inline assembly is unsupported in naked functions\n+    //~| WARN this was previously accepted\n+    core::hint::unreachable_unchecked();\n+}\n+\n+#[naked]\n+unsafe extern \"C\" fn invalid_options() {\n+    asm!(\"\", options(nomem, preserves_flags, noreturn));\n+    //~^ WARN asm options unsupported in naked functions: `nomem`, `preserves_flags`\n+    //~| WARN this was previously accepted\n+}\n+\n+#[naked]\n+unsafe extern \"C\" fn invalid_options_continued() {\n+    asm!(\"\", options(readonly, nostack), options(pure));\n+    //~^ ERROR asm with `pure` option must have at least one output\n+    //~| WARN asm options unsupported in naked functions: `nostack`, `pure`, `readonly`\n+    //~| WARN this was previously accepted\n+    //~| WARN asm in naked functions must use `noreturn` option\n+    //~| WARN this was previously accepted\n+}\n+\n+#[naked]\n+pub unsafe fn default_abi() {\n+    //~^ WARN Rust ABI is unsupported in naked functions\n+    //~| WARN this was previously accepted\n+    asm!(\"\", options(noreturn));\n+}\n+\n+#[naked]\n+pub unsafe extern \"Rust\" fn rust_abi() {\n+    //~^ WARN Rust ABI is unsupported in naked functions\n+    //~| WARN this was previously accepted\n+    asm!(\"\", options(noreturn));\n+}\n+\n+#[naked]\n+pub extern \"C\" fn valid_a<T>() -> T {\n+    unsafe { asm!(\"\", options(noreturn)); }\n+}\n+\n+#[naked]\n+pub extern \"C\" fn valid_b() {\n+    unsafe { { {\n+        asm!(\"\", options(noreturn)); ; ; ;\n+    } ; }  ; }\n+}\n+\n+#[naked]\n+pub unsafe extern \"C\" fn valid_c() {\n+    asm!(\"\", options(noreturn));\n+}\n+\n+#[cfg(target_arch = \"x86_64\")]\n+#[naked]\n+pub unsafe extern \"C\" fn valid_att_syntax() {\n+    asm!(\"\", options(noreturn, att_syntax));\n+}"}, {"sha": "076289427b54f49fb5bfc41e06d0cbea1bba3ea9", "filename": "src/test/ui/asm/naked-functions.stderr", "status": "added", "additions": 300, "deletions": 0, "changes": 300, "blob_url": "https://github.com/rust-lang/rust/blob/bda05cc471f8cf4a3c45f587f87d7b01a8343c3c/src%2Ftest%2Fui%2Fasm%2Fnaked-functions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bda05cc471f8cf4a3c45f587f87d7b01a8343c3c/src%2Ftest%2Fui%2Fasm%2Fnaked-functions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fnaked-functions.stderr?ref=bda05cc471f8cf4a3c45f587f87d7b01a8343c3c", "patch": "@@ -0,0 +1,300 @@\n+error: asm with `pure` option must have at least one output\n+  --> $DIR/naked-functions.rs:126:14\n+   |\n+LL |     asm!(\"\", options(readonly, nostack), options(pure));\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^\n+\n+error: patterns not allowed in naked function parameters\n+  --> $DIR/naked-functions.rs:13:5\n+   |\n+LL |     mut a: u32,\n+   |     ^^^^^\n+\n+error: patterns not allowed in naked function parameters\n+  --> $DIR/naked-functions.rs:15:5\n+   |\n+LL |     &b: &i32,\n+   |     ^^\n+\n+error: patterns not allowed in naked function parameters\n+  --> $DIR/naked-functions.rs:17:6\n+   |\n+LL |     (None | Some(_)): Option<std::ptr::NonNull<u8>>,\n+   |      ^^^^^^^^^^^^^^\n+\n+error: patterns not allowed in naked function parameters\n+  --> $DIR/naked-functions.rs:19:5\n+   |\n+LL |     P { x, y }: P,\n+   |     ^^^^^^^^^^\n+\n+error: referencing function parameters is not allowed in naked functions\n+  --> $DIR/naked-functions.rs:29:5\n+   |\n+LL |     a + 1\n+   |     ^\n+   |\n+   = help: follow the calling convention in asm block to use parameters\n+\n+warning: naked functions must contain a single asm block\n+  --> $DIR/naked-functions.rs:26:1\n+   |\n+LL | / pub unsafe extern \"C\" fn inc(a: u32) -> u32 {\n+LL | |\n+LL | |\n+LL | |     a + 1\n+   | |     ----- non-asm is unsupported in naked functions\n+LL | |\n+LL | | }\n+   | |_^\n+   |\n+   = note: `#[warn(unsupported_naked_functions)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #32408 <https://github.com/rust-lang/rust/issues/32408>\n+\n+error: referencing function parameters is not allowed in naked functions\n+  --> $DIR/naked-functions.rs:35:31\n+   |\n+LL |     asm!(\"/* {0} */\", in(reg) a, options(noreturn));\n+   |                               ^\n+   |\n+   = help: follow the calling convention in asm block to use parameters\n+\n+warning: only `const` and `sym` operands are supported in naked functions\n+  --> $DIR/naked-functions.rs:35:23\n+   |\n+LL |     asm!(\"/* {0} */\", in(reg) a, options(noreturn));\n+   |                       ^^^^^^^^^\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #32408 <https://github.com/rust-lang/rust/issues/32408>\n+\n+warning: naked functions must contain a single asm block\n+  --> $DIR/naked-functions.rs:42:1\n+   |\n+LL | / pub unsafe extern \"C\" fn inc_closure(a: u32) -> u32 {\n+LL | |\n+LL | |\n+LL | |     (|| a + 1)()\n+   | |     ------------ non-asm is unsupported in naked functions\n+LL | | }\n+   | |_^\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #32408 <https://github.com/rust-lang/rust/issues/32408>\n+\n+warning: only `const` and `sym` operands are supported in naked functions\n+  --> $DIR/naked-functions.rs:62:10\n+   |\n+LL |          in(reg) a,\n+   |          ^^^^^^^^^\n+...\n+LL |          inlateout(reg) b,\n+   |          ^^^^^^^^^^^^^^^^\n+LL |          inout(reg) c,\n+   |          ^^^^^^^^^^^^\n+LL |          lateout(reg) d,\n+   |          ^^^^^^^^^^^^^^\n+LL |          out(reg) e,\n+   |          ^^^^^^^^^^\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #32408 <https://github.com/rust-lang/rust/issues/32408>\n+\n+warning: asm in naked functions must use `noreturn` option\n+  --> $DIR/naked-functions.rs:59:5\n+   |\n+LL | /     asm!(\"/* {0} {1} {2} {3} {4} {5} {6} */\",\n+LL | |\n+LL | |\n+LL | |          in(reg) a,\n+...  |\n+LL | |          sym G,\n+LL | |     );\n+   | |______^\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #32408 <https://github.com/rust-lang/rust/issues/32408>\n+\n+warning: naked functions must contain a single asm block\n+  --> $DIR/naked-functions.rs:49:1\n+   |\n+LL | / pub unsafe extern \"C\" fn unsupported_operands() {\n+LL | |\n+LL | |\n+LL | |     let mut a = 0usize;\n+   | |     ------------------- non-asm is unsupported in naked functions\n+LL | |     let mut b = 0usize;\n+   | |     ------------------- non-asm is unsupported in naked functions\n+LL | |     let mut c = 0usize;\n+   | |     ------------------- non-asm is unsupported in naked functions\n+LL | |     let mut d = 0usize;\n+   | |     ------------------- non-asm is unsupported in naked functions\n+LL | |     let mut e = 0usize;\n+   | |     ------------------- non-asm is unsupported in naked functions\n+...  |\n+LL | |     );\n+LL | | }\n+   | |_^\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #32408 <https://github.com/rust-lang/rust/issues/32408>\n+\n+warning: naked functions must contain a single asm block\n+  --> $DIR/naked-functions.rs:75:1\n+   |\n+LL | / pub extern \"C\" fn missing_assembly() {\n+LL | |\n+LL | |\n+LL | | }\n+   | |_^\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #32408 <https://github.com/rust-lang/rust/issues/32408>\n+\n+warning: asm in naked functions must use `noreturn` option\n+  --> $DIR/naked-functions.rs:84:5\n+   |\n+LL |     asm!(\"\");\n+   |     ^^^^^^^^^\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #32408 <https://github.com/rust-lang/rust/issues/32408>\n+\n+warning: asm in naked functions must use `noreturn` option\n+  --> $DIR/naked-functions.rs:87:5\n+   |\n+LL |     asm!(\"\");\n+   |     ^^^^^^^^^\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #32408 <https://github.com/rust-lang/rust/issues/32408>\n+\n+warning: asm in naked functions must use `noreturn` option\n+  --> $DIR/naked-functions.rs:90:5\n+   |\n+LL |     asm!(\"\");\n+   |     ^^^^^^^^^\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #32408 <https://github.com/rust-lang/rust/issues/32408>\n+\n+warning: naked functions must contain a single asm block\n+  --> $DIR/naked-functions.rs:81:1\n+   |\n+LL | / pub extern \"C\" fn too_many_asm_blocks() {\n+LL | |\n+LL | |\n+LL | |     asm!(\"\");\n+...  |\n+LL | |     asm!(\"\");\n+   | |     --------- multiple asm blocks are unsupported in naked functions\n+...  |\n+LL | |     asm!(\"\");\n+   | |     --------- multiple asm blocks are unsupported in naked functions\n+...  |\n+LL | |     asm!(\"\", options(noreturn));\n+   | |     ---------------------------- multiple asm blocks are unsupported in naked functions\n+LL | | }\n+   | |_^\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #32408 <https://github.com/rust-lang/rust/issues/32408>\n+\n+error: referencing function parameters is not allowed in naked functions\n+  --> $DIR/naked-functions.rs:101:11\n+   |\n+LL |         *&y\n+   |           ^\n+   |\n+   = help: follow the calling convention in asm block to use parameters\n+\n+warning: naked functions must contain a single asm block\n+  --> $DIR/naked-functions.rs:98:5\n+   |\n+LL | /     pub extern \"C\" fn inner(y: usize) -> usize {\n+LL | |\n+LL | |\n+LL | |         *&y\n+   | |         --- non-asm is unsupported in naked functions\n+LL | |\n+LL | |     }\n+   | |_____^\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #32408 <https://github.com/rust-lang/rust/issues/32408>\n+\n+warning: the LLVM-style inline assembly is unsupported in naked functions\n+  --> $DIR/naked-functions.rs:111:5\n+   |\n+LL |     llvm_asm!(\"\");\n+   |     ^^^^^^^^^^^^^^\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #32408 <https://github.com/rust-lang/rust/issues/32408>\n+   = help: use the new asm! syntax specified in RFC 2873\n+   = note: this warning originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+warning: naked functions must contain a single asm block\n+  --> $DIR/naked-functions.rs:108:1\n+   |\n+LL | / unsafe extern \"C\" fn llvm() -> ! {\n+LL | |\n+LL | |\n+LL | |     llvm_asm!(\"\");\n+...  |\n+LL | |     core::hint::unreachable_unchecked();\n+   | |     ------------------------------------ non-asm is unsupported in naked functions\n+LL | | }\n+   | |_^\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #32408 <https://github.com/rust-lang/rust/issues/32408>\n+\n+warning: asm options unsupported in naked functions: `nomem`, `preserves_flags`\n+  --> $DIR/naked-functions.rs:119:5\n+   |\n+LL |     asm!(\"\", options(nomem, preserves_flags, noreturn));\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #32408 <https://github.com/rust-lang/rust/issues/32408>\n+\n+warning: asm options unsupported in naked functions: `nostack`, `pure`, `readonly`\n+  --> $DIR/naked-functions.rs:126:5\n+   |\n+LL |     asm!(\"\", options(readonly, nostack), options(pure));\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #32408 <https://github.com/rust-lang/rust/issues/32408>\n+\n+warning: asm in naked functions must use `noreturn` option\n+  --> $DIR/naked-functions.rs:126:5\n+   |\n+LL |     asm!(\"\", options(readonly, nostack), options(pure));\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #32408 <https://github.com/rust-lang/rust/issues/32408>\n+\n+warning: Rust ABI is unsupported in naked functions\n+  --> $DIR/naked-functions.rs:135:15\n+   |\n+LL | pub unsafe fn default_abi() {\n+   |               ^^^^^^^^^^^\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #32408 <https://github.com/rust-lang/rust/issues/32408>\n+\n+warning: Rust ABI is unsupported in naked functions\n+  --> $DIR/naked-functions.rs:142:29\n+   |\n+LL | pub unsafe extern \"Rust\" fn rust_abi() {\n+   |                             ^^^^^^^^\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #32408 <https://github.com/rust-lang/rust/issues/32408>\n+\n+error: aborting due to 8 previous errors; 19 warnings emitted\n+"}, {"sha": "46a4fc11e5a7ca00cf4e943083726af45648f0cf", "filename": "src/test/ui/asm/naked-params.rs", "status": "removed", "additions": 0, "deletions": 51, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/3d6705aa5abffe94c83bf09af8c3ba3c599845fc/src%2Ftest%2Fui%2Fasm%2Fnaked-params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d6705aa5abffe94c83bf09af8c3ba3c599845fc/src%2Ftest%2Fui%2Fasm%2Fnaked-params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fnaked-params.rs?ref=3d6705aa5abffe94c83bf09af8c3ba3c599845fc", "patch": "@@ -1,51 +0,0 @@\n-// Check that use of function parameters is validate in naked functions.\n-//\n-// ignore-wasm32 asm unsupported\n-#![feature(asm)]\n-#![feature(naked_functions)]\n-#![feature(or_patterns)]\n-#![crate_type = \"lib\"]\n-\n-#[repr(C)]\n-pub struct P { x: u8, y: u16 }\n-\n-#[naked]\n-pub unsafe extern \"C\" fn f(\n-    mut a: u32,\n-    //~^ ERROR patterns not allowed in naked function parameters\n-    &b: &i32,\n-    //~^ ERROR patterns not allowed in naked function parameters\n-    (None | Some(_)): Option<std::ptr::NonNull<u8>>,\n-    //~^ ERROR patterns not allowed in naked function parameters\n-    P { x, y }: P,\n-    //~^ ERROR patterns not allowed in naked function parameters\n-) {\n-    asm!(\"\", options(noreturn))\n-}\n-\n-#[naked]\n-pub unsafe extern \"C\" fn inc(a: u32) -> u32 {\n-    a + 1\n-    //~^ ERROR use of parameters not allowed inside naked functions\n-}\n-\n-#[naked]\n-pub unsafe extern \"C\" fn inc_asm(a: u32) -> u32 {\n-    asm!(\"/* {0} */\", in(reg) a, options(noreturn));\n-    //~^ ERROR use of parameters not allowed inside naked functions\n-}\n-\n-#[naked]\n-pub unsafe extern \"C\" fn sum(x: u32, y: u32) -> u32 {\n-    // FIXME: Should be detected by asm-only check.\n-    (|| { x + y})()\n-}\n-\n-pub fn outer(x: u32) -> extern \"C\" fn(usize) -> usize {\n-    #[naked]\n-    pub extern \"C\" fn inner(y: usize) -> usize {\n-        *&y\n-        //~^ ERROR use of parameters not allowed inside naked functions\n-    }\n-    inner\n-}"}, {"sha": "1a99e5109fcdb4c2538112d5e04ac7762f2bcec3", "filename": "src/test/ui/asm/naked-params.stderr", "status": "removed", "additions": 0, "deletions": 44, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/3d6705aa5abffe94c83bf09af8c3ba3c599845fc/src%2Ftest%2Fui%2Fasm%2Fnaked-params.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3d6705aa5abffe94c83bf09af8c3ba3c599845fc/src%2Ftest%2Fui%2Fasm%2Fnaked-params.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fnaked-params.stderr?ref=3d6705aa5abffe94c83bf09af8c3ba3c599845fc", "patch": "@@ -1,44 +0,0 @@\n-error: patterns not allowed in naked function parameters\n-  --> $DIR/naked-params.rs:14:5\n-   |\n-LL |     mut a: u32,\n-   |     ^^^^^\n-\n-error: patterns not allowed in naked function parameters\n-  --> $DIR/naked-params.rs:16:5\n-   |\n-LL |     &b: &i32,\n-   |     ^^\n-\n-error: patterns not allowed in naked function parameters\n-  --> $DIR/naked-params.rs:18:6\n-   |\n-LL |     (None | Some(_)): Option<std::ptr::NonNull<u8>>,\n-   |      ^^^^^^^^^^^^^^\n-\n-error: patterns not allowed in naked function parameters\n-  --> $DIR/naked-params.rs:20:5\n-   |\n-LL |     P { x, y }: P,\n-   |     ^^^^^^^^^^\n-\n-error: use of parameters not allowed inside naked functions\n-  --> $DIR/naked-params.rs:28:5\n-   |\n-LL |     a + 1\n-   |     ^\n-\n-error: use of parameters not allowed inside naked functions\n-  --> $DIR/naked-params.rs:34:31\n-   |\n-LL |     asm!(\"/* {0} */\", in(reg) a, options(noreturn));\n-   |                               ^\n-\n-error: use of parameters not allowed inside naked functions\n-  --> $DIR/naked-params.rs:47:11\n-   |\n-LL |         *&y\n-   |           ^\n-\n-error: aborting due to 7 previous errors\n-"}, {"sha": "06bddc422cf80847318e87d4cd761af49f890172", "filename": "src/test/ui/feature-gates/feature-gate-naked_functions.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bda05cc471f8cf4a3c45f587f87d7b01a8343c3c/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-naked_functions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bda05cc471f8cf4a3c45f587f87d7b01a8343c3c/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-naked_functions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-naked_functions.rs?ref=bda05cc471f8cf4a3c45f587f87d7b01a8343c3c", "patch": "@@ -1,11 +1,15 @@\n+#![feature(asm)]\n+\n #[naked]\n //~^ the `#[naked]` attribute is an experimental feature\n-fn naked() {}\n+extern \"C\" fn naked() {\n+    asm!(\"\", options(noreturn))\n+}\n \n #[naked]\n //~^ the `#[naked]` attribute is an experimental feature\n-fn naked_2() -> isize {\n-    0\n+extern \"C\" fn naked_2() -> isize {\n+    asm!(\"\", options(noreturn))\n }\n \n fn main() {}"}, {"sha": "d95561d20133e8768f8f3c65b91c8cbd6733e410", "filename": "src/test/ui/feature-gates/feature-gate-naked_functions.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bda05cc471f8cf4a3c45f587f87d7b01a8343c3c/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-naked_functions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bda05cc471f8cf4a3c45f587f87d7b01a8343c3c/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-naked_functions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-naked_functions.stderr?ref=bda05cc471f8cf4a3c45f587f87d7b01a8343c3c", "patch": "@@ -1,5 +1,5 @@\n error[E0658]: the `#[naked]` attribute is an experimental feature\n-  --> $DIR/feature-gate-naked_functions.rs:1:1\n+  --> $DIR/feature-gate-naked_functions.rs:3:1\n    |\n LL | #[naked]\n    | ^^^^^^^^\n@@ -8,7 +8,7 @@ LL | #[naked]\n    = help: add `#![feature(naked_functions)]` to the crate attributes to enable\n \n error[E0658]: the `#[naked]` attribute is an experimental feature\n-  --> $DIR/feature-gate-naked_functions.rs:5:1\n+  --> $DIR/feature-gate-naked_functions.rs:9:1\n    |\n LL | #[naked]\n    | ^^^^^^^^"}, {"sha": "70ec0e3033c6f71b8d96eb78707027e5cf7d4fd6", "filename": "src/test/ui/rfc-2091-track-caller/error-with-naked.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bda05cc471f8cf4a3c45f587f87d7b01a8343c3c/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ferror-with-naked.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bda05cc471f8cf4a3c45f587f87d7b01a8343c3c/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ferror-with-naked.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ferror-with-naked.rs?ref=bda05cc471f8cf4a3c45f587f87d7b01a8343c3c", "patch": "@@ -1,15 +1,19 @@\n-#![feature(naked_functions)]\n+#![feature(asm, naked_functions)]\n \n #[track_caller] //~ ERROR cannot use `#[track_caller]` with `#[naked]`\n #[naked]\n-fn f() {}\n+extern \"C\" fn f() {\n+    asm!(\"\", options(noreturn));\n+}\n \n struct S;\n \n impl S {\n     #[track_caller] //~ ERROR cannot use `#[track_caller]` with `#[naked]`\n     #[naked]\n-    fn g() {}\n+    extern \"C\" fn g() {\n+        asm!(\"\", options(noreturn));\n+    }\n }\n \n fn main() {}"}, {"sha": "1b49148d629b2321f45c1eaae4ee8904eef71e82", "filename": "src/test/ui/rfc-2091-track-caller/error-with-naked.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bda05cc471f8cf4a3c45f587f87d7b01a8343c3c/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ferror-with-naked.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bda05cc471f8cf4a3c45f587f87d7b01a8343c3c/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ferror-with-naked.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ferror-with-naked.stderr?ref=bda05cc471f8cf4a3c45f587f87d7b01a8343c3c", "patch": "@@ -5,7 +5,7 @@ LL | #[track_caller]\n    | ^^^^^^^^^^^^^^^\n \n error[E0736]: cannot use `#[track_caller]` with `#[naked]`\n-  --> $DIR/error-with-naked.rs:10:5\n+  --> $DIR/error-with-naked.rs:12:5\n    |\n LL |     #[track_caller]\n    |     ^^^^^^^^^^^^^^^"}, {"sha": "1bd96b2b4c89beb3e433a3d8b416ac498cd42d6e", "filename": "src/tools/clippy/clippy_lints/src/loops.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bda05cc471f8cf4a3c45f587f87d7b01a8343c3c/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bda05cc471f8cf4a3c45f587f87d7b01a8343c3c/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops.rs?ref=bda05cc471f8cf4a3c45f587f87d7b01a8343c3c", "patch": "@@ -768,7 +768,7 @@ fn never_loop_expr(expr: &Expr<'_>, main_loop_id: HirId) -> NeverLoopResult {\n         ExprKind::InlineAsm(ref asm) => asm\n             .operands\n             .iter()\n-            .map(|o| match o {\n+            .map(|(o, _)| match o {\n                 InlineAsmOperand::In { expr, .. }\n                 | InlineAsmOperand::InOut { expr, .. }\n                 | InlineAsmOperand::Const { expr }"}, {"sha": "d942d4e12b10629518cf54d5fac19c97281e1e37", "filename": "src/tools/clippy/clippy_lints/src/utils/hir_utils.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bda05cc471f8cf4a3c45f587f87d7b01a8343c3c/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fhir_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bda05cc471f8cf4a3c45f587f87d7b01a8343c3c/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fhir_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fhir_utils.rs?ref=bda05cc471f8cf4a3c45f587f87d7b01a8343c3c", "patch": "@@ -517,7 +517,7 @@ impl<'a, 'tcx> SpanlessHash<'a, 'tcx> {\n                     }\n                 }\n                 asm.options.hash(&mut self.s);\n-                for op in asm.operands {\n+                for (op, _op_sp) in asm.operands {\n                     match op {\n                         InlineAsmOperand::In { reg, expr } => {\n                             reg.hash(&mut self.s);"}, {"sha": "323d8745538859bf7e4e106bdec3ed0151d322f3", "filename": "src/tools/clippy/clippy_lints/src/utils/inspector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bda05cc471f8cf4a3c45f587f87d7b01a8343c3c/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Finspector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bda05cc471f8cf4a3c45f587f87d7b01a8343c3c/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Finspector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Finspector.rs?ref=bda05cc471f8cf4a3c45f587f87d7b01a8343c3c", "patch": "@@ -293,7 +293,7 @@ fn print_expr(cx: &LateContext<'_>, expr: &hir::Expr<'_>, indent: usize) {\n             println!(\"{}template: {}\", ind, InlineAsmTemplatePiece::to_string(asm.template));\n             println!(\"{}options: {:?}\", ind, asm.options);\n             println!(\"{}operands:\", ind);\n-            for op in asm.operands {\n+            for (op, _op_sp) in asm.operands {\n                 match op {\n                     hir::InlineAsmOperand::In { expr, .. }\n                     | hir::InlineAsmOperand::InOut { expr, .. }"}]}