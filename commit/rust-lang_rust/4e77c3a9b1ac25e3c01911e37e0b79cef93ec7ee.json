{"sha": "4e77c3a9b1ac25e3c01911e37e0b79cef93ec7ee", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRlNzdjM2E5YjFhYzI1ZTNjMDE5MTFlMzdlMGI3OWNlZjkzZWM3ZWU=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2018-11-04T10:27:09Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2018-12-30T13:40:00Z"}, "message": "test: Add test for issues 45510 and 18952.\n\nThose tests are directly taken from the comments on the bug reports.", "tree": {"sha": "bb3e61b73c2f508e127be9b104e32b7836ee57e2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bb3e61b73c2f508e127be9b104e32b7836ee57e2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4e77c3a9b1ac25e3c01911e37e0b79cef93ec7ee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4e77c3a9b1ac25e3c01911e37e0b79cef93ec7ee", "html_url": "https://github.com/rust-lang/rust/commit/4e77c3a9b1ac25e3c01911e37e0b79cef93ec7ee", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4e77c3a9b1ac25e3c01911e37e0b79cef93ec7ee/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7155690ffcdf2ce325361bdb5b64ad69c043662f", "url": "https://api.github.com/repos/rust-lang/rust/commits/7155690ffcdf2ce325361bdb5b64ad69c043662f", "html_url": "https://github.com/rust-lang/rust/commit/7155690ffcdf2ce325361bdb5b64ad69c043662f"}], "stats": {"total": 75, "additions": 75, "deletions": 0}, "files": [{"sha": "ca2645ca9e5d90c6eac32bca8682a11147eb6780", "filename": "src/test/run-pass/issue-18952.rs", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/4e77c3a9b1ac25e3c01911e37e0b79cef93ec7ee/src%2Ftest%2Frun-pass%2Fissue-18952.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e77c3a9b1ac25e3c01911e37e0b79cef93ec7ee/src%2Ftest%2Frun-pass%2Fissue-18952.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-18952.rs?ref=4e77c3a9b1ac25e3c01911e37e0b79cef93ec7ee", "patch": "@@ -0,0 +1,48 @@\n+// This issue tests fn_traits overloading on arity.\n+\n+#![feature(fn_traits)]\n+#![feature(unboxed_closures)]\n+\n+struct Foo;\n+\n+impl Fn<(isize, isize)> for Foo {\n+    extern \"rust-call\" fn call(&self, args: (isize, isize)) -> Self::Output {\n+        println!(\"{:?}\", args);\n+    }\n+}\n+\n+impl FnMut<(isize, isize)> for Foo {\n+    extern \"rust-call\" fn call_mut(&mut self, args: (isize, isize)) -> Self::Output {\n+        println!(\"{:?}\", args);\n+    }\n+}\n+\n+impl FnOnce<(isize, isize)> for Foo {\n+    type Output = ();\n+    extern \"rust-call\" fn call_once(self, args: (isize, isize)) -> Self::Output {\n+        println!(\"{:?}\", args);\n+    }\n+}\n+\n+impl Fn<(isize, isize, isize)> for Foo {\n+    extern \"rust-call\" fn call(&self, args: (isize, isize, isize)) -> Self::Output {\n+        println!(\"{:?}\", args);\n+    }\n+}\n+\n+impl FnMut<(isize, isize, isize)> for Foo {\n+    extern \"rust-call\" fn call_mut(&mut self, args: (isize, isize, isize)) -> Self::Output {\n+        println!(\"{:?}\", args);\n+    }\n+}\n+impl FnOnce<(isize, isize, isize)> for Foo {\n+    type Output = ();\n+    extern \"rust-call\" fn call_once(self, args: (isize, isize, isize)) -> Self::Output {\n+        println!(\"{:?}\", args);\n+    }\n+}\n+\n+fn main() {\n+    let foo = Foo;\n+    foo(1, 1);\n+}"}, {"sha": "922a26b9030947330f97297acac2350c8b6076f1", "filename": "src/test/run-pass/issue-45510.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/4e77c3a9b1ac25e3c01911e37e0b79cef93ec7ee/src%2Ftest%2Frun-pass%2Fissue-45510.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e77c3a9b1ac25e3c01911e37e0b79cef93ec7ee/src%2Ftest%2Frun-pass%2Fissue-45510.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-45510.rs?ref=4e77c3a9b1ac25e3c01911e37e0b79cef93ec7ee", "patch": "@@ -0,0 +1,27 @@\n+// Test overloaded resolution of fn_traits.\n+\n+#![feature(fn_traits)]\n+#![feature(unboxed_closures)]\n+\n+struct Ishmael;\n+struct Maybe;\n+struct CallMe;\n+\n+impl FnOnce<(Ishmael,)> for CallMe {\n+    type Output = ();\n+    extern \"rust-call\" fn call_once(self, _args: (Ishmael,)) -> () {\n+        println!(\"Split your lungs with blood and thunder!\");\n+    }\n+}\n+\n+impl FnOnce<(Maybe,)> for CallMe {\n+    type Output = ();\n+    extern \"rust-call\" fn call_once(self, _args: (Maybe,)) -> () {\n+        println!(\"So we just met, and this is crazy\");\n+    }\n+}\n+\n+fn main() {\n+    CallMe(Ishmael);\n+    CallMe(Maybe);\n+}"}]}