{"sha": "682b33a1103695de3c6520d55204b3c3d45f68ec", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY4MmIzM2ExMTAzNjk1ZGUzYzY1MjBkNTUyMDRiM2MzZDQ1ZjY4ZWM=", "commit": {"author": {"name": "Masaki Hara", "email": "ackie.h.gmai@gmail.com", "date": "2018-11-18T15:15:41Z"}, "committer": {"name": "Masaki Hara", "email": "ackie.h.gmai@gmail.com", "date": "2018-11-21T13:20:22Z"}, "message": "Add require_type_is_sized_deferred.", "tree": {"sha": "3e67931e746e06aac085a79929ef8e22ce0895b6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3e67931e746e06aac085a79929ef8e22ce0895b6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/682b33a1103695de3c6520d55204b3c3d45f68ec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/682b33a1103695de3c6520d55204b3c3d45f68ec", "html_url": "https://github.com/rust-lang/rust/commit/682b33a1103695de3c6520d55204b3c3d45f68ec", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/682b33a1103695de3c6520d55204b3c3d45f68ec/comments", "author": {"login": "qnighy", "id": 41755, "node_id": "MDQ6VXNlcjQxNzU1", "avatar_url": "https://avatars.githubusercontent.com/u/41755?v=4", "gravatar_id": "", "url": "https://api.github.com/users/qnighy", "html_url": "https://github.com/qnighy", "followers_url": "https://api.github.com/users/qnighy/followers", "following_url": "https://api.github.com/users/qnighy/following{/other_user}", "gists_url": "https://api.github.com/users/qnighy/gists{/gist_id}", "starred_url": "https://api.github.com/users/qnighy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/qnighy/subscriptions", "organizations_url": "https://api.github.com/users/qnighy/orgs", "repos_url": "https://api.github.com/users/qnighy/repos", "events_url": "https://api.github.com/users/qnighy/events{/privacy}", "received_events_url": "https://api.github.com/users/qnighy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "qnighy", "id": 41755, "node_id": "MDQ6VXNlcjQxNzU1", "avatar_url": "https://avatars.githubusercontent.com/u/41755?v=4", "gravatar_id": "", "url": "https://api.github.com/users/qnighy", "html_url": "https://github.com/qnighy", "followers_url": "https://api.github.com/users/qnighy/followers", "following_url": "https://api.github.com/users/qnighy/following{/other_user}", "gists_url": "https://api.github.com/users/qnighy/gists{/gist_id}", "starred_url": "https://api.github.com/users/qnighy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/qnighy/subscriptions", "organizations_url": "https://api.github.com/users/qnighy/orgs", "repos_url": "https://api.github.com/users/qnighy/repos", "events_url": "https://api.github.com/users/qnighy/events{/privacy}", "received_events_url": "https://api.github.com/users/qnighy/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "289ad6e9922683807d455ca0020dc2a8f7bd1a7b", "url": "https://api.github.com/repos/rust-lang/rust/commits/289ad6e9922683807d455ca0020dc2a8f7bd1a7b", "html_url": "https://github.com/rust-lang/rust/commit/289ad6e9922683807d455ca0020dc2a8f7bd1a7b"}], "stats": {"total": 17, "additions": 17, "deletions": 0}, "files": [{"sha": "b882d982c1fe5f201e378349a13d993175865b7e", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/682b33a1103695de3c6520d55204b3c3d45f68ec/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/682b33a1103695de3c6520d55204b3c3d45f68ec/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=682b33a1103695de3c6520d55204b3c3d45f68ec", "patch": "@@ -208,6 +208,10 @@ pub struct Inherited<'a, 'gcx: 'a+'tcx, 'tcx: 'a> {\n \n     fulfillment_cx: RefCell<Box<dyn TraitEngine<'tcx>>>,\n \n+    // Some additional `Sized` obligations badly affect type inference.\n+    // These obligations are added in a later stage of typeck.\n+    deferred_sized_obligations: RefCell<Vec<(Ty<'tcx>, Span, traits::ObligationCauseCode<'tcx>)>>,\n+\n     // When we process a call like `c()` where `c` is a closure type,\n     // we may not have decided yet whether `c` is a `Fn`, `FnMut`, or\n     // `FnOnce` closure. In that case, we defer full resolution of the\n@@ -644,6 +648,7 @@ impl<'a, 'gcx, 'tcx> Inherited<'a, 'gcx, 'tcx> {\n             infcx,\n             fulfillment_cx: RefCell::new(TraitEngine::new(tcx)),\n             locals: RefCell::new(Default::default()),\n+            deferred_sized_obligations: RefCell::new(Vec::new()),\n             deferred_call_resolutions: RefCell::new(Default::default()),\n             deferred_cast_checks: RefCell::new(Vec::new()),\n             deferred_generator_interiors: RefCell::new(Vec::new()),\n@@ -907,6 +912,10 @@ fn typeck_tables_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         fcx.closure_analyze(body);\n         assert!(fcx.deferred_call_resolutions.borrow().is_empty());\n         fcx.resolve_generator_interiors(def_id);\n+\n+        for (ty, span, code) in fcx.deferred_sized_obligations.borrow_mut().drain(..) {\n+            fcx.require_type_is_sized(ty, span, code);\n+        }\n         fcx.select_all_obligations_or_error();\n \n         if fn_decl.is_some() {\n@@ -2345,6 +2354,14 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         self.require_type_meets(ty, span, code, lang_item);\n     }\n \n+    pub fn require_type_is_sized_deferred(&self,\n+                                          ty: Ty<'tcx>,\n+                                          span: Span,\n+                                          code: traits::ObligationCauseCode<'tcx>)\n+    {\n+        self.deferred_sized_obligations.borrow_mut().push((ty, span, code));\n+    }\n+\n     pub fn register_bound(&self,\n                           ty: Ty<'tcx>,\n                           def_id: DefId,"}]}