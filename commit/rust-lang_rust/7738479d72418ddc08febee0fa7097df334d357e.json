{"sha": "7738479d72418ddc08febee0fa7097df334d357e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc3Mzg0NzlkNzI0MThkZGMwOGZlYmVlMGZhNzA5N2RmMzM0ZDM1N2U=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-06-04T05:32:15Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-06-04T05:32:15Z"}, "message": "Auto merge of #33460 - shepmaster:16-bit-pointers, r=Aatch\n\nSupport 16-bit pointers as well as i/usize\n\nI'm opening this pull request to get some feedback from the community.\n\nAlthough Rust doesn't support any platforms with a native 16-bit pointer at the moment, the [AVR-Rust][ar] fork is working towards that goal. Keeping this forked logic up-to-date with the changes in master has been onerous so I'd like to merge these changes so that they get carried along when refactoring happens. I do not believe this should increase the maintenance burden.\n\nThis is based on the original work of Dylan McKay (@dylanmckay).\n\n[ar]: https://github.com/avr-rust/rust", "tree": {"sha": "02db04b160da2230fa0097d6fea5331237945e29", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/02db04b160da2230fa0097d6fea5331237945e29"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7738479d72418ddc08febee0fa7097df334d357e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7738479d72418ddc08febee0fa7097df334d357e", "html_url": "https://github.com/rust-lang/rust/commit/7738479d72418ddc08febee0fa7097df334d357e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7738479d72418ddc08febee0fa7097df334d357e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c81c75076c05990af6f71e56ccc12d7b196ee25c", "url": "https://api.github.com/repos/rust-lang/rust/commits/c81c75076c05990af6f71e56ccc12d7b196ee25c", "html_url": "https://github.com/rust-lang/rust/commit/c81c75076c05990af6f71e56ccc12d7b196ee25c"}, {"sha": "bc7595c8abbf4e3b737e926d61814686e0ebda77", "url": "https://api.github.com/repos/rust-lang/rust/commits/bc7595c8abbf4e3b737e926d61814686e0ebda77", "html_url": "https://github.com/rust-lang/rust/commit/bc7595c8abbf4e3b737e926d61814686e0ebda77"}], "stats": {"total": 126, "additions": 123, "deletions": 3}, "files": [{"sha": "58c841151c0f0e1b4bf0b46d0db8196c215ffdd1", "filename": "src/liballoc/raw_vec.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7738479d72418ddc08febee0fa7097df334d357e/src%2Fliballoc%2Fraw_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7738479d72418ddc08febee0fa7097df334d357e/src%2Fliballoc%2Fraw_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fraw_vec.rs?ref=7738479d72418ddc08febee0fa7097df334d357e", "patch": "@@ -578,9 +578,9 @@ impl<T> Drop for RawVec<T> {\n // * We don't overflow `usize::MAX` and actually allocate too little\n //\n // On 64-bit we just need to check for overflow since trying to allocate\n-// `> isize::MAX` bytes will surely fail. On 32-bit we need to add an extra\n-// guard for this in case we're running on a platform which can use all 4GB in\n-// user-space. e.g. PAE or x32\n+// `> isize::MAX` bytes will surely fail. On 32-bit and 16-bit we need to add\n+// an extra guard for this in case we're running on a platform which can use\n+// all 4GB in user-space. e.g. PAE or x32\n \n #[inline]\n fn alloc_guard(alloc_size: usize) {"}, {"sha": "d55e0317a949218af2cca35aebd36da2997d1dc3", "filename": "src/libcore/fmt/num.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7738479d72418ddc08febee0fa7097df334d357e/src%2Flibcore%2Ffmt%2Fnum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7738479d72418ddc08febee0fa7097df334d357e/src%2Flibcore%2Ffmt%2Fnum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fnum.rs?ref=7738479d72418ddc08febee0fa7097df334d357e", "patch": "@@ -29,6 +29,7 @@ trait Int: Zero + PartialEq + PartialOrd + Div<Output=Self> + Rem<Output=Self> +\n            Sub<Output=Self> + Copy {\n     fn from_u8(u: u8) -> Self;\n     fn to_u8(&self) -> u8;\n+    fn to_u16(&self) -> u16;\n     fn to_u32(&self) -> u32;\n     fn to_u64(&self) -> u64;\n }\n@@ -37,6 +38,7 @@ macro_rules! doit {\n     ($($t:ident)*) => ($(impl Int for $t {\n         fn from_u8(u: u8) -> $t { u as $t }\n         fn to_u8(&self) -> u8 { *self as u8 }\n+        fn to_u16(&self) -> u16 { *self as u16 }\n         fn to_u32(&self) -> u32 { *self as u32 }\n         fn to_u64(&self) -> u64 { *self as u64 }\n     })*)\n@@ -256,6 +258,8 @@ macro_rules! impl_Display {\n \n impl_Display!(i8, u8, i16, u16, i32, u32: to_u32);\n impl_Display!(i64, u64: to_u64);\n+#[cfg(target_pointer_width = \"16\")]\n+impl_Display!(isize, usize: to_u16);\n #[cfg(target_pointer_width = \"32\")]\n impl_Display!(isize, usize: to_u32);\n #[cfg(target_pointer_width = \"64\")]"}, {"sha": "5c2179ccf33a1a6404ef4db66f047c0e7b77e6e7", "filename": "src/libcore/mem.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/7738479d72418ddc08febee0fa7097df334d357e/src%2Flibcore%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7738479d72418ddc08febee0fa7097df334d357e/src%2Flibcore%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmem.rs?ref=7738479d72418ddc08febee0fa7097df334d357e", "patch": "@@ -518,6 +518,10 @@ pub fn replace<T>(dest: &mut T, mut src: T) -> T {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub fn drop<T>(_x: T) { }\n \n+macro_rules! repeat_u8_as_u16 {\n+    ($name:expr) => { (($name as u16) <<  8 |\n+                       ($name as u16)) }\n+}\n macro_rules! repeat_u8_as_u32 {\n     ($name:expr) => { (($name as u32) << 24 |\n                        ($name as u32) << 16 |\n@@ -543,11 +547,18 @@ macro_rules! repeat_u8_as_u64 {\n pub const POST_DROP_U8: u8 = 0x1d;\n #[unstable(feature = \"filling_drop\", issue = \"5016\")]\n #[allow(missing_docs)]\n+pub const POST_DROP_U16: u16 = repeat_u8_as_u16!(POST_DROP_U8);\n+#[unstable(feature = \"filling_drop\", issue = \"5016\")]\n+#[allow(missing_docs)]\n pub const POST_DROP_U32: u32 = repeat_u8_as_u32!(POST_DROP_U8);\n #[unstable(feature = \"filling_drop\", issue = \"5016\")]\n #[allow(missing_docs)]\n pub const POST_DROP_U64: u64 = repeat_u8_as_u64!(POST_DROP_U8);\n \n+#[cfg(target_pointer_width = \"16\")]\n+#[unstable(feature = \"filling_drop\", issue = \"5016\")]\n+#[allow(missing_docs)]\n+pub const POST_DROP_USIZE: usize = POST_DROP_U16 as usize;\n #[cfg(target_pointer_width = \"32\")]\n #[unstable(feature = \"filling_drop\", issue = \"5016\")]\n #[allow(missing_docs)]"}, {"sha": "86bcef4011d02177f10d8109672575c7f0b6b35e", "filename": "src/libcore/num/isize.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7738479d72418ddc08febee0fa7097df334d357e/src%2Flibcore%2Fnum%2Fisize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7738479d72418ddc08febee0fa7097df334d357e/src%2Flibcore%2Fnum%2Fisize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fisize.rs?ref=7738479d72418ddc08febee0fa7097df334d357e", "patch": "@@ -14,6 +14,8 @@\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n+#[cfg(target_pointer_width = \"16\")]\n+int_module! { isize, 16 }\n #[cfg(target_pointer_width = \"32\")]\n int_module! { isize, 32 }\n #[cfg(target_pointer_width = \"64\")]"}, {"sha": "5988a6375d44efbf08156f87f2f167e253a5c83f", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/7738479d72418ddc08febee0fa7097df334d357e/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7738479d72418ddc08febee0fa7097df334d357e/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=7738479d72418ddc08febee0fa7097df334d357e", "patch": "@@ -1176,6 +1176,15 @@ impl i64 {\n         intrinsics::mul_with_overflow }\n }\n \n+#[cfg(target_pointer_width = \"16\")]\n+#[lang = \"isize\"]\n+impl isize {\n+    int_impl! { i16, u16, 16,\n+        intrinsics::add_with_overflow,\n+        intrinsics::sub_with_overflow,\n+        intrinsics::mul_with_overflow }\n+}\n+\n #[cfg(target_pointer_width = \"32\")]\n #[lang = \"isize\"]\n impl isize {\n@@ -2188,6 +2197,18 @@ impl u64 {\n         intrinsics::mul_with_overflow }\n }\n \n+#[cfg(target_pointer_width = \"16\")]\n+#[lang = \"usize\"]\n+impl usize {\n+    uint_impl! { u16, 16,\n+        intrinsics::ctpop,\n+        intrinsics::ctlz,\n+        intrinsics::cttz,\n+        intrinsics::bswap,\n+        intrinsics::add_with_overflow,\n+        intrinsics::sub_with_overflow,\n+        intrinsics::mul_with_overflow }\n+}\n #[cfg(target_pointer_width = \"32\")]\n #[lang = \"usize\"]\n impl usize {"}, {"sha": "685c52e271ec0c924ab9ca495b45b231bd7754aa", "filename": "src/libcore/num/usize.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7738479d72418ddc08febee0fa7097df334d357e/src%2Flibcore%2Fnum%2Fusize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7738479d72418ddc08febee0fa7097df334d357e/src%2Flibcore%2Fnum%2Fusize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fusize.rs?ref=7738479d72418ddc08febee0fa7097df334d357e", "patch": "@@ -14,6 +14,8 @@\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n+#[cfg(target_pointer_width = \"16\")]\n+uint_module! { usize, 16 }\n #[cfg(target_pointer_width = \"32\")]\n uint_module! { usize, 32 }\n #[cfg(target_pointer_width = \"64\")]"}, {"sha": "4857817e84e4fcc17bdc23401643f1d5ead6e534", "filename": "src/libcore/num/wrapping.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7738479d72418ddc08febee0fa7097df334d357e/src%2Flibcore%2Fnum%2Fwrapping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7738479d72418ddc08febee0fa7097df334d357e/src%2Flibcore%2Fnum%2Fwrapping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fwrapping.rs?ref=7738479d72418ddc08febee0fa7097df334d357e", "patch": "@@ -292,6 +292,12 @@ wrapping_impl! { usize u8 u16 u32 u64 isize i8 i16 i32 i64 }\n mod shift_max {\n     #![allow(non_upper_case_globals)]\n \n+    #[cfg(target_pointer_width = \"16\")]\n+    mod platform {\n+        pub const usize: u32 = super::u16;\n+        pub const isize: u32 = super::i16;\n+    }\n+\n     #[cfg(target_pointer_width = \"32\")]\n     mod platform {\n         pub const usize: u32 = super::u32;"}, {"sha": "01bafe49a7acd4820e4ca9bc657c9308d5d36670", "filename": "src/libcoretest/mem.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7738479d72418ddc08febee0fa7097df334d357e/src%2Flibcoretest%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7738479d72418ddc08febee0fa7097df334d357e/src%2Flibcoretest%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Fmem.rs?ref=7738479d72418ddc08febee0fa7097df334d357e", "patch": "@@ -18,6 +18,13 @@ fn size_of_basic() {\n     assert_eq!(size_of::<u64>(), 8);\n }\n \n+#[test]\n+#[cfg(target_pointer_width = \"16\")]\n+fn size_of_16() {\n+    assert_eq!(size_of::<usize>(), 2);\n+    assert_eq!(size_of::<*const usize>(), 2);\n+}\n+\n #[test]\n #[cfg(target_pointer_width = \"32\")]\n fn size_of_32() {\n@@ -47,6 +54,13 @@ fn align_of_basic() {\n     assert_eq!(align_of::<u32>(), 4);\n }\n \n+#[test]\n+#[cfg(target_pointer_width = \"16\")]\n+fn align_of_16() {\n+    assert_eq!(align_of::<usize>(), 2);\n+    assert_eq!(align_of::<*const usize>(), 2);\n+}\n+\n #[test]\n #[cfg(target_pointer_width = \"32\")]\n fn align_of_32() {"}, {"sha": "d58128b1c4a887f7da53fb6ee331c7f429fcd6d0", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7738479d72418ddc08febee0fa7097df334d357e/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7738479d72418ddc08febee0fa7097df334d357e/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=7738479d72418ddc08febee0fa7097df334d357e", "patch": "@@ -796,6 +796,7 @@ pub fn build_target_config(opts: &Options, sp: &Handler) -> Config {\n     };\n \n     let (int_type, uint_type) = match &target.target_pointer_width[..] {\n+        \"16\" => (ast::IntTy::I16, ast::UintTy::U16),\n         \"32\" => (ast::IntTy::I32, ast::UintTy::U32),\n         \"64\" => (ast::IntTy::I64, ast::UintTy::U64),\n         w    => panic!(sp.fatal(&format!(\"target specification was invalid: \\"}, {"sha": "07156c67a22075231e5bba9718b1d14ace745505", "filename": "src/librustc/ty/layout.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7738479d72418ddc08febee0fa7097df334d357e/src%2Flibrustc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7738479d72418ddc08febee0fa7097df334d357e/src%2Flibrustc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Flayout.rs?ref=7738479d72418ddc08febee0fa7097df334d357e", "patch": "@@ -170,6 +170,7 @@ impl TargetDataLayout {\n     /// address space on 64-bit ARMv8 and x86_64.\n     pub fn obj_size_bound(&self) -> u64 {\n         match self.pointer_size.bits() {\n+            16 => 1 << 15,\n             32 => 1 << 31,\n             64 => 1 << 47,\n             bits => bug!(\"obj_size_bound: unknown pointer bit size {}\", bits)\n@@ -178,6 +179,7 @@ impl TargetDataLayout {\n \n     pub fn ptr_sized_integer(&self) -> Integer {\n         match self.pointer_size.bits() {\n+            16 => I16,\n             32 => I32,\n             64 => I64,\n             bits => bug!(\"ptr_sized_integer: unknown pointer bit size {}\", bits)"}, {"sha": "416347919a83fea27006caeb2c7ea9882795dbd0", "filename": "src/librustc/ty/util.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7738479d72418ddc08febee0fa7097df334d357e/src%2Flibrustc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7738479d72418ddc08febee0fa7097df334d357e/src%2Flibrustc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Futil.rs?ref=7738479d72418ddc08febee0fa7097df334d357e", "patch": "@@ -62,6 +62,7 @@ impl IntTypeExt for attr::IntType {\n             SignedInt(ast::IntTy::I32)   => ConstInt::I32(0),\n             SignedInt(ast::IntTy::I64)   => ConstInt::I64(0),\n             SignedInt(ast::IntTy::Is) => match tcx.sess.target.int_type {\n+                ast::IntTy::I16 => ConstInt::Isize(ConstIsize::Is16(0)),\n                 ast::IntTy::I32 => ConstInt::Isize(ConstIsize::Is32(0)),\n                 ast::IntTy::I64 => ConstInt::Isize(ConstIsize::Is64(0)),\n                 _ => bug!(),\n@@ -71,6 +72,7 @@ impl IntTypeExt for attr::IntType {\n             UnsignedInt(ast::UintTy::U32) => ConstInt::U32(0),\n             UnsignedInt(ast::UintTy::U64) => ConstInt::U64(0),\n             UnsignedInt(ast::UintTy::Us) => match tcx.sess.target.uint_type {\n+                ast::UintTy::U16 => ConstInt::Usize(ConstUsize::Us16(0)),\n                 ast::UintTy::U32 => ConstInt::Usize(ConstUsize::Us32(0)),\n                 ast::UintTy::U64 => ConstInt::Usize(ConstUsize::Us64(0)),\n                 _ => bug!(),"}, {"sha": "5613b1211199ab0f475f4f61f3551d755942d70d", "filename": "src/librustc_const_eval/eval.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7738479d72418ddc08febee0fa7097df334d357e/src%2Flibrustc_const_eval%2Feval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7738479d72418ddc08febee0fa7097df334d357e/src%2Flibrustc_const_eval%2Feval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_eval%2Feval.rs?ref=7738479d72418ddc08febee0fa7097df334d357e", "patch": "@@ -583,6 +583,9 @@ pub fn eval_const_expr_partial<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                     (&LitKind::Int(n, Unsuffixed), Some(&ty::TyInt(IntTy::Is))) |\n                     (&LitKind::Int(n, Signed(IntTy::Is)), _) => {\n                         match tcx.sess.target.int_type {\n+                            IntTy::I16 => if n == I16_OVERFLOW {\n+                                return Ok(Integral(Isize(Is16(::std::i16::MIN))));\n+                            },\n                             IntTy::I32 => if n == I32_OVERFLOW {\n                                 return Ok(Integral(Isize(Is32(::std::i32::MIN))));\n                             },"}, {"sha": "28a5887847252cb871f988768a0659de68c9fcda", "filename": "src/librustc_const_math/int.rs", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/7738479d72418ddc08febee0fa7097df334d357e/src%2Flibrustc_const_math%2Fint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7738479d72418ddc08febee0fa7097df334d357e/src%2Flibrustc_const_math%2Fint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_math%2Fint.rs?ref=7738479d72418ddc08febee0fa7097df334d357e", "patch": "@@ -77,12 +77,14 @@ impl ConstInt {\n             (Infer(a @ 0...as_u64::I16MAX), I16(_)) => I16(a as i64 as i16),\n             (Infer(a @ 0...as_u64::I32MAX), I32(_)) => I32(a as i64 as i32),\n             (Infer(a @ 0...as_u64::I64MAX), I64(_)) => I64(a as i64),\n+            (Infer(a @ 0...as_u64::I16MAX), Isize(Is16(_))) => Isize(Is16(a as i64 as i16)),\n             (Infer(a @ 0...as_u64::I32MAX), Isize(Is32(_))) => Isize(Is32(a as i64 as i32)),\n             (Infer(a @ 0...as_u64::I64MAX), Isize(Is64(_))) => Isize(Is64(a as i64)),\n             (Infer(a @ 0...as_u64::U8MAX), U8(_)) => U8(a as u8),\n             (Infer(a @ 0...as_u64::U16MAX), U16(_)) => U16(a as u16),\n             (Infer(a @ 0...as_u64::U32MAX), U32(_)) => U32(a as u32),\n             (Infer(a), U64(_)) => U64(a),\n+            (Infer(a @ 0...as_u64::U16MAX), Usize(Us16(_))) => Usize(Us16(a as u16)),\n             (Infer(a @ 0...as_u64::U32MAX), Usize(Us32(_))) => Usize(Us32(a as u32)),\n             (Infer(a), Usize(Us64(_))) => Usize(Us64(a)),\n \n@@ -92,6 +94,9 @@ impl ConstInt {\n             (InferSigned(a @ as_i64::I16MIN...as_i64::I16MAX), I16(_)) => I16(a as i16),\n             (InferSigned(a @ as_i64::I32MIN...as_i64::I32MAX), I32(_)) => I32(a as i32),\n             (InferSigned(a), I64(_)) => I64(a),\n+            (InferSigned(a @ as_i64::I16MIN...as_i64::I16MAX), Isize(Is16(_))) => {\n+                Isize(Is16(a as i16))\n+            },\n             (InferSigned(a @ as_i64::I32MIN...as_i64::I32MAX), Isize(Is32(_))) => {\n                 Isize(Is32(a as i32))\n             },\n@@ -100,6 +105,7 @@ impl ConstInt {\n             (InferSigned(a @ 0...as_i64::U16MAX), U16(_)) => U16(a as u16),\n             (InferSigned(a @ 0...as_i64::U32MAX), U32(_)) => U32(a as u32),\n             (InferSigned(a @ 0...as_i64::I64MAX), U64(_)) => U64(a as u64),\n+            (InferSigned(a @ 0...as_i64::U16MAX), Usize(Us16(_))) => Usize(Us16(a as u16)),\n             (InferSigned(a @ 0...as_i64::U32MAX), Usize(Us32(_))) => Usize(Us32(a as u32)),\n             (InferSigned(a @ 0...as_i64::I64MAX), Usize(Us64(_))) => Usize(Us64(a as u64)),\n             (InferSigned(_), _) => return Err(ConstMathErr::NotInRange),\n@@ -117,19 +123,22 @@ impl ConstInt {\n             I16(i) if i < 0 => InferSigned(i as i64),\n             I32(i) if i < 0 => InferSigned(i as i64),\n             I64(i) if i < 0 => InferSigned(i as i64),\n+            Isize(Is16(i)) if i < 0 => InferSigned(i as i64),\n             Isize(Is32(i)) if i < 0 => InferSigned(i as i64),\n             Isize(Is64(i)) if i < 0 => InferSigned(i as i64),\n             InferSigned(i) => Infer(i as u64),\n             I8(i) => Infer(i as u64),\n             I16(i) => Infer(i as u64),\n             I32(i) => Infer(i as u64),\n             I64(i) => Infer(i as u64),\n+            Isize(Is16(i)) => Infer(i as u64),\n             Isize(Is32(i)) => Infer(i as u64),\n             Isize(Is64(i)) => Infer(i as u64),\n             U8(i) => Infer(i as u64),\n             U16(i) => Infer(i as u64),\n             U32(i) => Infer(i as u64),\n             U64(i) => Infer(i as u64),\n+            Usize(Us16(i)) => Infer(i as u64),\n             Usize(Us32(i)) => Infer(i as u64),\n             Usize(Us64(i)) => Infer(i),\n         }\n@@ -173,13 +182,15 @@ impl ConstInt {\n             | Isize(Is64(v))\n             | I64(v) if v >= 0 && v <= ::std::u32::MAX as i64 => Some(v as u32),\n             Isize(Is32(v)) if v >= 0 => Some(v as u32),\n+            Isize(Is16(v)) if v >= 0 => Some(v as u32),\n             U8(v) => Some(v as u32),\n             U16(v) => Some(v as u32),\n             U32(v) => Some(v),\n             Infer(v)\n             | Usize(Us64(v))\n             | U64(v) if v <= ::std::u32::MAX as u64 => Some(v as u32),\n             Usize(Us32(v)) => Some(v),\n+            Usize(Us16(v)) => Some(v as u32),\n             _ => None,\n         }\n     }\n@@ -193,12 +204,14 @@ impl ConstInt {\n             I16(v) if v >= 0 => Some(v as u64),\n             I32(v) if v >= 0 => Some(v as u64),\n             I64(v) if v >= 0 => Some(v as u64),\n+            Isize(Is16(v)) if v >= 0 => Some(v as u64),\n             Isize(Is32(v)) if v >= 0 => Some(v as u64),\n             Isize(Is64(v)) if v >= 0 => Some(v as u64),\n             U8(v) => Some(v as u64),\n             U16(v) => Some(v as u64),\n             U32(v) => Some(v as u64),\n             U64(v) => Some(v),\n+            Usize(Us16(v)) => Some(v as u64),\n             Usize(Us32(v)) => Some(v as u64),\n             Usize(Us64(v)) => Some(v),\n             _ => None,\n@@ -211,6 +224,7 @@ impl ConstInt {\n             I16(v) => v < 0,\n             I32(v) => v < 0,\n             I64(v) => v < 0,\n+            Isize(Is16(v)) => v < 0,\n             Isize(Is32(v)) => v < 0,\n             Isize(Is64(v)) => v < 0,\n             InferSigned(v) => v < 0,\n@@ -225,12 +239,14 @@ impl ConstInt {\n             (I16(a), I16(b)) => Ok(a.cmp(&b)),\n             (I32(a), I32(b)) => Ok(a.cmp(&b)),\n             (I64(a), I64(b)) => Ok(a.cmp(&b)),\n+            (Isize(Is16(a)), Isize(Is16(b))) => Ok(a.cmp(&b)),\n             (Isize(Is32(a)), Isize(Is32(b))) => Ok(a.cmp(&b)),\n             (Isize(Is64(a)), Isize(Is64(b))) => Ok(a.cmp(&b)),\n             (U8(a), U8(b)) => Ok(a.cmp(&b)),\n             (U16(a), U16(b)) => Ok(a.cmp(&b)),\n             (U32(a), U32(b)) => Ok(a.cmp(&b)),\n             (U64(a), U64(b)) => Ok(a.cmp(&b)),\n+            (Usize(Us16(a)), Usize(Us16(b))) => Ok(a.cmp(&b)),\n             (Usize(Us32(a)), Usize(Us32(b))) => Ok(a.cmp(&b)),\n             (Usize(Us64(a)), Usize(Us64(b))) => Ok(a.cmp(&b)),\n             (Infer(a), Infer(b)) => Ok(a.cmp(&b)),\n@@ -249,12 +265,14 @@ impl ConstInt {\n             ConstInt::I16(i) => ConstInt::I16(add1!(i)),\n             ConstInt::I32(i) => ConstInt::I32(add1!(i)),\n             ConstInt::I64(i) => ConstInt::I64(add1!(i)),\n+            ConstInt::Isize(ConstIsize::Is16(i)) => ConstInt::Isize(ConstIsize::Is16(add1!(i))),\n             ConstInt::Isize(ConstIsize::Is32(i)) => ConstInt::Isize(ConstIsize::Is32(add1!(i))),\n             ConstInt::Isize(ConstIsize::Is64(i)) => ConstInt::Isize(ConstIsize::Is64(add1!(i))),\n             ConstInt::U8(i) => ConstInt::U8(add1!(i)),\n             ConstInt::U16(i) => ConstInt::U16(add1!(i)),\n             ConstInt::U32(i) => ConstInt::U32(add1!(i)),\n             ConstInt::U64(i) => ConstInt::U64(add1!(i)),\n+            ConstInt::Usize(ConstUsize::Us16(i)) => ConstInt::Usize(ConstUsize::Us16(add1!(i))),\n             ConstInt::Usize(ConstUsize::Us32(i)) => ConstInt::Usize(ConstUsize::Us32(add1!(i))),\n             ConstInt::Usize(ConstUsize::Us64(i)) => ConstInt::Usize(ConstUsize::Us64(add1!(i))),\n             ConstInt::Infer(_) | ConstInt::InferSigned(_) => panic!(\"no type info for const int\"),\n@@ -301,12 +319,14 @@ impl ::std::fmt::Display for ConstInt {\n             I64(i) => write!(fmt, \"{}i64\", i),\n             Isize(ConstIsize::Is64(i)) => write!(fmt, \"{}isize\", i),\n             Isize(ConstIsize::Is32(i)) => write!(fmt, \"{}isize\", i),\n+            Isize(ConstIsize::Is16(i)) => write!(fmt, \"{}isize\", i),\n             U8(i) => write!(fmt, \"{}u8\", i),\n             U16(i) => write!(fmt, \"{}u16\", i),\n             U32(i) => write!(fmt, \"{}u32\", i),\n             U64(i) => write!(fmt, \"{}u64\", i),\n             Usize(ConstUsize::Us64(i)) => write!(fmt, \"{}usize\", i),\n             Usize(ConstUsize::Us32(i)) => write!(fmt, \"{}usize\", i),\n+            Usize(ConstUsize::Us16(i)) => write!(fmt, \"{}usize\", i),\n         }\n     }\n }\n@@ -331,12 +351,14 @@ macro_rules! impl_binop {\n                     (I16(a), I16(b)) => a.$checked_func(b).map(I16),\n                     (I32(a), I32(b)) => a.$checked_func(b).map(I32),\n                     (I64(a), I64(b)) => a.$checked_func(b).map(I64),\n+                    (Isize(Is16(a)), Isize(Is16(b))) => a.$checked_func(b).map(Is16).map(Isize),\n                     (Isize(Is32(a)), Isize(Is32(b))) => a.$checked_func(b).map(Is32).map(Isize),\n                     (Isize(Is64(a)), Isize(Is64(b))) => a.$checked_func(b).map(Is64).map(Isize),\n                     (U8(a), U8(b)) => a.$checked_func(b).map(U8),\n                     (U16(a), U16(b)) => a.$checked_func(b).map(U16),\n                     (U32(a), U32(b)) => a.$checked_func(b).map(U32),\n                     (U64(a), U64(b)) => a.$checked_func(b).map(U64),\n+                    (Usize(Us16(a)), Usize(Us16(b))) => a.$checked_func(b).map(Us16).map(Usize),\n                     (Usize(Us32(a)), Usize(Us32(b))) => a.$checked_func(b).map(Us32).map(Usize),\n                     (Usize(Us64(a)), Usize(Us64(b))) => a.$checked_func(b).map(Us64).map(Usize),\n                     (Infer(a), Infer(b)) => a.$checked_func(b).map(Infer),\n@@ -358,12 +380,14 @@ macro_rules! derive_binop {\n                     (I16(a), I16(b)) => Ok(I16(a.$func(b))),\n                     (I32(a), I32(b)) => Ok(I32(a.$func(b))),\n                     (I64(a), I64(b)) => Ok(I64(a.$func(b))),\n+                    (Isize(Is16(a)), Isize(Is16(b))) => Ok(Isize(Is16(a.$func(b)))),\n                     (Isize(Is32(a)), Isize(Is32(b))) => Ok(Isize(Is32(a.$func(b)))),\n                     (Isize(Is64(a)), Isize(Is64(b))) => Ok(Isize(Is64(a.$func(b)))),\n                     (U8(a), U8(b)) => Ok(U8(a.$func(b))),\n                     (U16(a), U16(b)) => Ok(U16(a.$func(b))),\n                     (U32(a), U32(b)) => Ok(U32(a.$func(b))),\n                     (U64(a), U64(b)) => Ok(U64(a.$func(b))),\n+                    (Usize(Us16(a)), Usize(Us16(b))) => Ok(Usize(Us16(a.$func(b)))),\n                     (Usize(Us32(a)), Usize(Us32(b))) => Ok(Usize(Us32(a.$func(b)))),\n                     (Usize(Us64(a)), Usize(Us64(b))) => Ok(Usize(Us64(a.$func(b)))),\n                     (Infer(a), Infer(b)) => Ok(Infer(a.$func(b))),\n@@ -393,6 +417,7 @@ fn check_division(\n         (I16(_), I16(0)) => Err(zerr),\n         (I32(_), I32(0)) => Err(zerr),\n         (I64(_), I64(0)) => Err(zerr),\n+        (Isize(_), Isize(Is16(0))) => Err(zerr),\n         (Isize(_), Isize(Is32(0))) => Err(zerr),\n         (Isize(_), Isize(Is64(0))) => Err(zerr),\n         (InferSigned(_), InferSigned(0)) => Err(zerr),\n@@ -401,6 +426,7 @@ fn check_division(\n         (U16(_), U16(0)) => Err(zerr),\n         (U32(_), U32(0)) => Err(zerr),\n         (U64(_), U64(0)) => Err(zerr),\n+        (Usize(_), Usize(Us16(0))) => Err(zerr),\n         (Usize(_), Usize(Us32(0))) => Err(zerr),\n         (Usize(_), Usize(Us64(0))) => Err(zerr),\n         (Infer(_), Infer(0)) => Err(zerr),\n@@ -409,6 +435,7 @@ fn check_division(\n         (I16(::std::i16::MIN), I16(-1)) => Err(Overflow(op)),\n         (I32(::std::i32::MIN), I32(-1)) => Err(Overflow(op)),\n         (I64(::std::i64::MIN), I64(-1)) => Err(Overflow(op)),\n+        (Isize(Is16(::std::i16::MIN)), Isize(Is16(-1))) => Err(Overflow(op)),\n         (Isize(Is32(::std::i32::MIN)), Isize(Is32(-1))) => Err(Overflow(op)),\n         (Isize(Is64(::std::i64::MIN)), Isize(Is64(-1))) => Err(Overflow(op)),\n         (InferSigned(::std::i64::MIN), InferSigned(-1)) => Err(Overflow(op)),\n@@ -427,6 +454,7 @@ impl ::std::ops::Div for ConstInt {\n             (I16(a), I16(b)) => Ok(I16(a/b)),\n             (I32(a), I32(b)) => Ok(I32(a/b)),\n             (I64(a), I64(b)) => Ok(I64(a/b)),\n+            (Isize(Is16(a)), Isize(Is16(b))) => Ok(Isize(Is16(a/b))),\n             (Isize(Is32(a)), Isize(Is32(b))) => Ok(Isize(Is32(a/b))),\n             (Isize(Is64(a)), Isize(Is64(b))) => Ok(Isize(Is64(a/b))),\n             (InferSigned(a), InferSigned(b)) => Ok(InferSigned(a/b)),\n@@ -435,6 +463,7 @@ impl ::std::ops::Div for ConstInt {\n             (U16(a), U16(b)) => Ok(U16(a/b)),\n             (U32(a), U32(b)) => Ok(U32(a/b)),\n             (U64(a), U64(b)) => Ok(U64(a/b)),\n+            (Usize(Us16(a)), Usize(Us16(b))) => Ok(Usize(Us16(a/b))),\n             (Usize(Us32(a)), Usize(Us32(b))) => Ok(Usize(Us32(a/b))),\n             (Usize(Us64(a)), Usize(Us64(b))) => Ok(Usize(Us64(a/b))),\n             (Infer(a), Infer(b)) => Ok(Infer(a/b)),\n@@ -455,6 +484,7 @@ impl ::std::ops::Rem for ConstInt {\n             (I16(a), I16(b)) => Ok(I16(a%b)),\n             (I32(a), I32(b)) => Ok(I32(a%b)),\n             (I64(a), I64(b)) => Ok(I64(a%b)),\n+            (Isize(Is16(a)), Isize(Is16(b))) => Ok(Isize(Is16(a%b))),\n             (Isize(Is32(a)), Isize(Is32(b))) => Ok(Isize(Is32(a%b))),\n             (Isize(Is64(a)), Isize(Is64(b))) => Ok(Isize(Is64(a%b))),\n             (InferSigned(a), InferSigned(b)) => Ok(InferSigned(a%b)),\n@@ -463,6 +493,7 @@ impl ::std::ops::Rem for ConstInt {\n             (U16(a), U16(b)) => Ok(U16(a%b)),\n             (U32(a), U32(b)) => Ok(U32(a%b)),\n             (U64(a), U64(b)) => Ok(U64(a%b)),\n+            (Usize(Us16(a)), Usize(Us16(b))) => Ok(Usize(Us16(a%b))),\n             (Usize(Us32(a)), Usize(Us32(b))) => Ok(Usize(Us32(a%b))),\n             (Usize(Us64(a)), Usize(Us64(b))) => Ok(Usize(Us64(a%b))),\n             (Infer(a), Infer(b)) => Ok(Infer(a%b)),\n@@ -481,12 +512,14 @@ impl ::std::ops::Shl<ConstInt> for ConstInt {\n             I16(a) => Ok(I16(overflowing!(a.overflowing_shl(b), Op::Shl))),\n             I32(a) => Ok(I32(overflowing!(a.overflowing_shl(b), Op::Shl))),\n             I64(a) => Ok(I64(overflowing!(a.overflowing_shl(b), Op::Shl))),\n+            Isize(Is16(a)) => Ok(Isize(Is16(overflowing!(a.overflowing_shl(b), Op::Shl)))),\n             Isize(Is32(a)) => Ok(Isize(Is32(overflowing!(a.overflowing_shl(b), Op::Shl)))),\n             Isize(Is64(a)) => Ok(Isize(Is64(overflowing!(a.overflowing_shl(b), Op::Shl)))),\n             U8(a) => Ok(U8(overflowing!(a.overflowing_shl(b), Op::Shl))),\n             U16(a) => Ok(U16(overflowing!(a.overflowing_shl(b), Op::Shl))),\n             U32(a) => Ok(U32(overflowing!(a.overflowing_shl(b), Op::Shl))),\n             U64(a) => Ok(U64(overflowing!(a.overflowing_shl(b), Op::Shl))),\n+            Usize(Us16(a)) => Ok(Usize(Us16(overflowing!(a.overflowing_shl(b), Op::Shl)))),\n             Usize(Us32(a)) => Ok(Usize(Us32(overflowing!(a.overflowing_shl(b), Op::Shl)))),\n             Usize(Us64(a)) => Ok(Usize(Us64(overflowing!(a.overflowing_shl(b), Op::Shl)))),\n             Infer(a) => Ok(Infer(overflowing!(a.overflowing_shl(b), Op::Shl))),\n@@ -504,12 +537,14 @@ impl ::std::ops::Shr<ConstInt> for ConstInt {\n             I16(a) => Ok(I16(overflowing!(a.overflowing_shr(b), Op::Shr))),\n             I32(a) => Ok(I32(overflowing!(a.overflowing_shr(b), Op::Shr))),\n             I64(a) => Ok(I64(overflowing!(a.overflowing_shr(b), Op::Shr))),\n+            Isize(Is16(a)) => Ok(Isize(Is16(overflowing!(a.overflowing_shr(b), Op::Shr)))),\n             Isize(Is32(a)) => Ok(Isize(Is32(overflowing!(a.overflowing_shr(b), Op::Shr)))),\n             Isize(Is64(a)) => Ok(Isize(Is64(overflowing!(a.overflowing_shr(b), Op::Shr)))),\n             U8(a) => Ok(U8(overflowing!(a.overflowing_shr(b), Op::Shr))),\n             U16(a) => Ok(U16(overflowing!(a.overflowing_shr(b), Op::Shr))),\n             U32(a) => Ok(U32(overflowing!(a.overflowing_shr(b), Op::Shr))),\n             U64(a) => Ok(U64(overflowing!(a.overflowing_shr(b), Op::Shr))),\n+            Usize(Us16(a)) => Ok(Usize(Us16(overflowing!(a.overflowing_shr(b), Op::Shr)))),\n             Usize(Us32(a)) => Ok(Usize(Us32(overflowing!(a.overflowing_shr(b), Op::Shr)))),\n             Usize(Us64(a)) => Ok(Usize(Us64(overflowing!(a.overflowing_shr(b), Op::Shr)))),\n             Infer(a) => Ok(Infer(overflowing!(a.overflowing_shr(b), Op::Shr))),\n@@ -526,12 +561,14 @@ impl ::std::ops::Neg for ConstInt {\n             I16(a) => Ok(I16(overflowing!(a.overflowing_neg(), Op::Neg))),\n             I32(a) => Ok(I32(overflowing!(a.overflowing_neg(), Op::Neg))),\n             I64(a) => Ok(I64(overflowing!(a.overflowing_neg(), Op::Neg))),\n+            Isize(Is16(a)) => Ok(Isize(Is16(overflowing!(a.overflowing_neg(), Op::Neg)))),\n             Isize(Is32(a)) => Ok(Isize(Is32(overflowing!(a.overflowing_neg(), Op::Neg)))),\n             Isize(Is64(a)) => Ok(Isize(Is64(overflowing!(a.overflowing_neg(), Op::Neg)))),\n             U8(0) => Ok(U8(0)),\n             U16(0) => Ok(U16(0)),\n             U32(0) => Ok(U32(0)),\n             U64(0) => Ok(U64(0)),\n+            Usize(Us16(0)) => Ok(Usize(Us16(0))),\n             Usize(Us32(0)) => Ok(Usize(Us32(0))),\n             Usize(Us64(0)) => Ok(Usize(Us64(0))),\n             U8(_) => Err(UnsignedNegation),\n@@ -554,12 +591,14 @@ impl ::std::ops::Not for ConstInt {\n             I16(a) => Ok(I16(!a)),\n             I32(a) => Ok(I32(!a)),\n             I64(a) => Ok(I64(!a)),\n+            Isize(Is16(a)) => Ok(Isize(Is16(!a))),\n             Isize(Is32(a)) => Ok(Isize(Is32(!a))),\n             Isize(Is64(a)) => Ok(Isize(Is64(!a))),\n             U8(a) => Ok(U8(!a)),\n             U16(a) => Ok(U16(!a)),\n             U32(a) => Ok(U32(!a)),\n             U64(a) => Ok(U64(!a)),\n+            Usize(Us16(a)) => Ok(Usize(Us16(!a))),\n             Usize(Us32(a)) => Ok(Usize(Us32(!a))),\n             Usize(Us64(a)) => Ok(Usize(Us64(!a))),\n             Infer(a) => Ok(Infer(!a)),"}, {"sha": "4d2db355eb0258ec9b328c57a5c85afa1a4311f3", "filename": "src/librustc_const_math/is.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7738479d72418ddc08febee0fa7097df334d357e/src%2Flibrustc_const_math%2Fis.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7738479d72418ddc08febee0fa7097df334d357e/src%2Flibrustc_const_math%2Fis.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_math%2Fis.rs?ref=7738479d72418ddc08febee0fa7097df334d357e", "patch": "@@ -15,6 +15,7 @@ use super::err::*;\n /// Anything else is an error. This invariant is checked at several locations\n #[derive(Copy, Clone, Debug, RustcEncodable, RustcDecodable, Hash, Eq, PartialEq)]\n pub enum ConstIsize {\n+    Is16(i16),\n     Is32(i32),\n     Is64(i64),\n }\n@@ -23,13 +24,16 @@ pub use self::ConstIsize::*;\n impl ConstIsize {\n     pub fn as_i64(self, target_int_ty: ast::IntTy) -> i64 {\n         match (self, target_int_ty) {\n+            (Is16(i), ast::IntTy::I16) => i as i64,\n             (Is32(i), ast::IntTy::I32) => i as i64,\n             (Is64(i), ast::IntTy::I64) => i,\n             _ => panic!(\"got invalid isize size for target\"),\n         }\n     }\n     pub fn new(i: i64, target_int_ty: ast::IntTy) -> Result<Self, ConstMathErr> {\n         match target_int_ty {\n+            ast::IntTy::I16 if i as i16 as i64 == i => Ok(Is16(i as i16)),\n+            ast::IntTy::I16 => Err(LitOutOfRange(ast::IntTy::Is)),\n             ast::IntTy::I32 if i as i32 as i64 == i => Ok(Is32(i as i32)),\n             ast::IntTy::I32 => Err(LitOutOfRange(ast::IntTy::Is)),\n             ast::IntTy::I64 => Ok(Is64(i)),"}, {"sha": "2b224d0646616c0f0d6ac23db4e9c5173d3c446f", "filename": "src/librustc_const_math/us.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7738479d72418ddc08febee0fa7097df334d357e/src%2Flibrustc_const_math%2Fus.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7738479d72418ddc08febee0fa7097df334d357e/src%2Flibrustc_const_math%2Fus.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_math%2Fus.rs?ref=7738479d72418ddc08febee0fa7097df334d357e", "patch": "@@ -15,6 +15,7 @@ use super::err::*;\n /// Anything else is an error. This invariant is checked at several locations\n #[derive(Copy, Clone, Debug, RustcEncodable, RustcDecodable, Hash, Eq, PartialEq)]\n pub enum ConstUsize {\n+    Us16(u16),\n     Us32(u32),\n     Us64(u64),\n }\n@@ -23,13 +24,16 @@ pub use self::ConstUsize::*;\n impl ConstUsize {\n     pub fn as_u64(self, target_uint_ty: ast::UintTy) -> u64 {\n         match (self, target_uint_ty) {\n+            (Us16(i), ast::UintTy::U16) => i as u64,\n             (Us32(i), ast::UintTy::U32) => i as u64,\n             (Us64(i), ast::UintTy::U64) => i,\n             _ => panic!(\"got invalid usize size for target\"),\n         }\n     }\n     pub fn new(i: u64, target_uint_ty: ast::UintTy) -> Result<Self, ConstMathErr> {\n         match target_uint_ty {\n+            ast::UintTy::U16 if i as u16 as u64 == i => Ok(Us16(i as u16)),\n+            ast::UintTy::U16 => Err(ULitOutOfRange(ast::UintTy::Us)),\n             ast::UintTy::U32 if i as u32 as u64 == i => Ok(Us32(i as u32)),\n             ast::UintTy::U32 => Err(ULitOutOfRange(ast::UintTy::Us)),\n             ast::UintTy::U64 => Ok(Us64(i)),"}, {"sha": "d75516ff648372a6d8f7c64ca73f4bfeb010711b", "filename": "src/librustc_trans/expr.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7738479d72418ddc08febee0fa7097df334d357e/src%2Flibrustc_trans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7738479d72418ddc08febee0fa7097df334d357e/src%2Flibrustc_trans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fexpr.rs?ref=7738479d72418ddc08febee0fa7097df334d357e", "patch": "@@ -2155,11 +2155,13 @@ impl OverflowOpViaIntrinsic {\n \n         let new_sty = match ty.sty {\n             TyInt(Is) => match &tcx.sess.target.target.target_pointer_width[..] {\n+                \"16\" => TyInt(I16),\n                 \"32\" => TyInt(I32),\n                 \"64\" => TyInt(I64),\n                 _ => bug!(\"unsupported target word size\")\n             },\n             TyUint(Us) => match &tcx.sess.target.target.target_pointer_width[..] {\n+                \"16\" => TyUint(U16),\n                 \"32\" => TyUint(U32),\n                 \"64\" => TyUint(U64),\n                 _ => bug!(\"unsupported target word size\")"}, {"sha": "54c825fa5faceb73de37c113333640b154f50cc0", "filename": "src/librustc_trans/intrinsic.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7738479d72418ddc08febee0fa7097df334d357e/src%2Flibrustc_trans%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7738479d72418ddc08febee0fa7097df334d357e/src%2Flibrustc_trans%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fintrinsic.rs?ref=7738479d72418ddc08febee0fa7097df334d357e", "patch": "@@ -1577,6 +1577,7 @@ fn int_type_width_signed<'tcx>(sty: &ty::TypeVariants<'tcx>, ccx: &CrateContext)\n         TyInt(t) => Some((match t {\n             ast::IntTy::Is => {\n                 match &ccx.tcx().sess.target.target.target_pointer_width[..] {\n+                    \"16\" => 16,\n                     \"32\" => 32,\n                     \"64\" => 64,\n                     tws => bug!(\"Unsupported target word size for isize: {}\", tws),\n@@ -1590,6 +1591,7 @@ fn int_type_width_signed<'tcx>(sty: &ty::TypeVariants<'tcx>, ccx: &CrateContext)\n         TyUint(t) => Some((match t {\n             ast::UintTy::Us => {\n                 match &ccx.tcx().sess.target.target.target_pointer_width[..] {\n+                    \"16\" => 16,\n                     \"32\" => 32,\n                     \"64\" => 64,\n                     tws => bug!(\"Unsupported target word size for usize: {}\", tws),"}, {"sha": "001cd197e60b8a8df178068723062dc82b51c0df", "filename": "src/librustc_trans/type_.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7738479d72418ddc08febee0fa7097df334d357e/src%2Flibrustc_trans%2Ftype_.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7738479d72418ddc08febee0fa7097df334d357e/src%2Flibrustc_trans%2Ftype_.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftype_.rs?ref=7738479d72418ddc08febee0fa7097df334d357e", "patch": "@@ -122,6 +122,7 @@ impl Type {\n \n     pub fn int(ccx: &CrateContext) -> Type {\n         match &ccx.tcx().sess.target.target.target_pointer_width[..] {\n+            \"16\" => Type::i16(ccx),\n             \"32\" => Type::i32(ccx),\n             \"64\" => Type::i64(ccx),\n             tws => bug!(\"Unsupported target word size for int: {}\", tws),"}]}