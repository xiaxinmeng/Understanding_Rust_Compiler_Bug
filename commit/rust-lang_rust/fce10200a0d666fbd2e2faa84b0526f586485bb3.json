{"sha": "fce10200a0d666fbd2e2faa84b0526f586485bb3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZjZTEwMjAwYTBkNjY2ZmJkMmUyZmFhODRiMDUyNmY1ODY0ODViYjM=", "commit": {"author": {"name": "Mikhail Rakhmanov", "email": "rakhmanov.m@gmail.com", "date": "2020-05-22T23:23:40Z"}, "committer": {"name": "Mikhail Rakhmanov", "email": "rakhmanov.m@gmail.com", "date": "2020-05-22T23:23:40Z"}, "message": "Better naming and fix some review comments", "tree": {"sha": "c9d8b8e7056005bcb512146bf6e817a916952611", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c9d8b8e7056005bcb512146bf6e817a916952611"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fce10200a0d666fbd2e2faa84b0526f586485bb3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fce10200a0d666fbd2e2faa84b0526f586485bb3", "html_url": "https://github.com/rust-lang/rust/commit/fce10200a0d666fbd2e2faa84b0526f586485bb3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fce10200a0d666fbd2e2faa84b0526f586485bb3/comments", "author": {"login": "mcrakhman", "id": 16068868, "node_id": "MDQ6VXNlcjE2MDY4ODY4", "avatar_url": "https://avatars.githubusercontent.com/u/16068868?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcrakhman", "html_url": "https://github.com/mcrakhman", "followers_url": "https://api.github.com/users/mcrakhman/followers", "following_url": "https://api.github.com/users/mcrakhman/following{/other_user}", "gists_url": "https://api.github.com/users/mcrakhman/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcrakhman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcrakhman/subscriptions", "organizations_url": "https://api.github.com/users/mcrakhman/orgs", "repos_url": "https://api.github.com/users/mcrakhman/repos", "events_url": "https://api.github.com/users/mcrakhman/events{/privacy}", "received_events_url": "https://api.github.com/users/mcrakhman/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mcrakhman", "id": 16068868, "node_id": "MDQ6VXNlcjE2MDY4ODY4", "avatar_url": "https://avatars.githubusercontent.com/u/16068868?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcrakhman", "html_url": "https://github.com/mcrakhman", "followers_url": "https://api.github.com/users/mcrakhman/followers", "following_url": "https://api.github.com/users/mcrakhman/following{/other_user}", "gists_url": "https://api.github.com/users/mcrakhman/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcrakhman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcrakhman/subscriptions", "organizations_url": "https://api.github.com/users/mcrakhman/orgs", "repos_url": "https://api.github.com/users/mcrakhman/repos", "events_url": "https://api.github.com/users/mcrakhman/events{/privacy}", "received_events_url": "https://api.github.com/users/mcrakhman/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ef1aaeb59516b16f1b83eb7cdb22f1bcdcc46446", "url": "https://api.github.com/repos/rust-lang/rust/commits/ef1aaeb59516b16f1b83eb7cdb22f1bcdcc46446", "html_url": "https://github.com/rust-lang/rust/commit/ef1aaeb59516b16f1b83eb7cdb22f1bcdcc46446"}], "stats": {"total": 29, "additions": 14, "deletions": 15}, "files": [{"sha": "94286b49720ccf92e095d305ae3aa0e480b8e864", "filename": "crates/ra_assists/src/assist_context.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/fce10200a0d666fbd2e2faa84b0526f586485bb3/crates%2Fra_assists%2Fsrc%2Fassist_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fce10200a0d666fbd2e2faa84b0526f586485bb3/crates%2Fra_assists%2Fsrc%2Fassist_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassist_context.rs?ref=fce10200a0d666fbd2e2faa84b0526f586485bb3", "patch": "@@ -292,24 +292,23 @@ impl AssistBuilder {\n }\n \n pub(crate) struct AssistDirector {\n-    source_changes: Vec<SourceChange>,\n     builders: FxHashMap<FileId, AssistBuilder>,\n }\n \n impl AssistDirector {\n     fn new() -> AssistDirector {\n-        AssistDirector { source_changes: vec![], builders: FxHashMap::default() }\n+        AssistDirector { builders: FxHashMap::default() }\n     }\n \n     pub(crate) fn perform(&mut self, file_id: FileId, f: impl FnOnce(&mut AssistBuilder)) {\n         let mut builder = self.builders.entry(file_id).or_insert(AssistBuilder::new(file_id));\n         f(&mut builder);\n     }\n \n-    fn finish(mut self) -> Vec<SourceChange> {\n-        for (_, builder) in self.builders.into_iter().collect::<Vec<(FileId, AssistBuilder)>>() {\n-            self.source_changes.push(builder.finish());\n-        }\n-        self.source_changes\n+    fn finish(self) -> Vec<SourceChange> {\n+        self.builders\n+            .into_iter()\n+            .map(|(_, builder)| builder.finish())\n+            .collect::<Vec<SourceChange>>()\n     }\n }"}, {"sha": "3250eed5bd77317c89e3f7750a7e2fe3a76685b0", "filename": "crates/ra_assists/src/handlers/extract_struct_from_enum_variant.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/fce10200a0d666fbd2e2faa84b0526f586485bb3/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fextract_struct_from_enum_variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fce10200a0d666fbd2e2faa84b0526f586485bb3/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fextract_struct_from_enum_variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fextract_struct_from_enum_variant.rs?ref=fce10200a0d666fbd2e2faa84b0526f586485bb3", "patch": "@@ -59,8 +59,8 @@ pub(crate) fn extract_struct_from_enum(acc: &mut Assists, ctx: &AssistContext) -\n             let res = definition.find_usages(&ctx.db, None);\n             let module_def = mod_def_for_target_module(ctx, &enum_name);\n             let start_offset = variant.parent_enum().syntax().text_range().start();\n-            let mut seen_files_map: FxHashSet<Module> = FxHashSet::default();\n-            seen_files_map.insert(module_def.module(ctx.db).unwrap());\n+            let mut visited_modules_set: FxHashSet<Module> = FxHashSet::default();\n+            visited_modules_set.insert(module_def.module(ctx.db).unwrap());\n             for reference in res {\n                 let source_file = ctx.sema.parse(reference.file_range.file_id);\n                 update_reference(\n@@ -69,7 +69,7 @@ pub(crate) fn extract_struct_from_enum(acc: &mut Assists, ctx: &AssistContext) -\n                     reference,\n                     &source_file,\n                     &module_def,\n-                    &mut seen_files_map,\n+                    &mut visited_modules_set,\n                 );\n             }\n             extract_struct_def(\n@@ -101,7 +101,7 @@ fn mod_def_for_target_module(ctx: &AssistContext, enum_name: &str) -> ModuleDef\n     ImportsLocator::new(ctx.db).find_imports(enum_name).first().unwrap().left().unwrap()\n }\n \n-fn insert_use_import(\n+fn insert_import(\n     ctx: &AssistContext,\n     builder: &mut AssistBuilder,\n     path: &ast::PathExpr,\n@@ -179,7 +179,7 @@ fn update_reference(\n     reference: Reference,\n     source_file: &SourceFile,\n     module_def: &ModuleDef,\n-    seen_files_map: &mut FxHashSet<Module>,\n+    visited_modules_set: &mut FxHashSet<Module>,\n ) -> Option<()> {\n     let path_expr: ast::PathExpr = find_node_at_offset::<ast::PathExpr>(\n         source_file.syntax(),\n@@ -195,8 +195,8 @@ fn update_reference(\n     );\n     edit.perform(reference.file_range.file_id, |builder| {\n         let module = ctx.sema.scope(&path_expr.syntax()).module().unwrap();\n-        if !seen_files_map.contains(&module) {\n-            if insert_use_import(\n+        if !visited_modules_set.contains(&module) {\n+            if insert_import(\n                 ctx,\n                 builder,\n                 &path_expr,\n@@ -206,7 +206,7 @@ fn update_reference(\n             )\n             .is_some()\n             {\n-                seen_files_map.insert(module);\n+                visited_modules_set.insert(module);\n             }\n         }\n         builder.replace(inside_list_range, format!(\"{}{}\", segment, list));"}]}