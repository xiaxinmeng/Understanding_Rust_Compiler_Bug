{"sha": "ee69cd79255fbf98d755ff4556c4af4adda1befb", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVlNjljZDc5MjU1ZmJmOThkNzU1ZmY0NTU2YzRhZjRhZGRhMWJlZmI=", "commit": {"author": {"name": "Simonas Kazlauskas", "email": "git@kazlauskas.me", "date": "2016-12-31T02:55:29Z"}, "committer": {"name": "Simonas Kazlauskas", "email": "git@kazlauskas.me", "date": "2016-12-31T02:55:29Z"}, "message": "Calculate discriminant bounds within 64 bits\n\nSince discriminants do not support i128 yet, lets just calculate the boundaries within the 64 bits\nthat are supported. This also avoids an issue with bootstrapping on 32 bit systems due to #38727.", "tree": {"sha": "7523c467a906ac31ec24d26ba25d4c3de0f5a697", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7523c467a906ac31ec24d26ba25d4c3de0f5a697"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ee69cd79255fbf98d755ff4556c4af4adda1befb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ee69cd79255fbf98d755ff4556c4af4adda1befb", "html_url": "https://github.com/rust-lang/rust/commit/ee69cd79255fbf98d755ff4556c4af4adda1befb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ee69cd79255fbf98d755ff4556c4af4adda1befb/comments", "author": {"login": "nagisa", "id": 679122, "node_id": "MDQ6VXNlcjY3OTEyMg==", "avatar_url": "https://avatars.githubusercontent.com/u/679122?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nagisa", "html_url": "https://github.com/nagisa", "followers_url": "https://api.github.com/users/nagisa/followers", "following_url": "https://api.github.com/users/nagisa/following{/other_user}", "gists_url": "https://api.github.com/users/nagisa/gists{/gist_id}", "starred_url": "https://api.github.com/users/nagisa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nagisa/subscriptions", "organizations_url": "https://api.github.com/users/nagisa/orgs", "repos_url": "https://api.github.com/users/nagisa/repos", "events_url": "https://api.github.com/users/nagisa/events{/privacy}", "received_events_url": "https://api.github.com/users/nagisa/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nagisa", "id": 679122, "node_id": "MDQ6VXNlcjY3OTEyMg==", "avatar_url": "https://avatars.githubusercontent.com/u/679122?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nagisa", "html_url": "https://github.com/nagisa", "followers_url": "https://api.github.com/users/nagisa/followers", "following_url": "https://api.github.com/users/nagisa/following{/other_user}", "gists_url": "https://api.github.com/users/nagisa/gists{/gist_id}", "starred_url": "https://api.github.com/users/nagisa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nagisa/subscriptions", "organizations_url": "https://api.github.com/users/nagisa/orgs", "repos_url": "https://api.github.com/users/nagisa/repos", "events_url": "https://api.github.com/users/nagisa/events{/privacy}", "received_events_url": "https://api.github.com/users/nagisa/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6b359635ec56bfbf0f5a9f775443ca493b0a4919", "url": "https://api.github.com/repos/rust-lang/rust/commits/6b359635ec56bfbf0f5a9f775443ca493b0a4919", "html_url": "https://github.com/rust-lang/rust/commit/6b359635ec56bfbf0f5a9f775443ca493b0a4919"}], "stats": {"total": 27, "additions": 17, "deletions": 10}, "files": [{"sha": "ff95554dbbfcd6a36fac3b77c6c2f1ce0c590ee9", "filename": "src/librustc/ty/layout.rs", "status": "modified", "additions": 13, "deletions": 7, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/ee69cd79255fbf98d755ff4556c4af4adda1befb/src%2Flibrustc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee69cd79255fbf98d755ff4556c4af4adda1befb/src%2Flibrustc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Flayout.rs?ref=ee69cd79255fbf98d755ff4556c4af4adda1befb", "patch": "@@ -20,7 +20,8 @@ use ty::{self, Ty, TyCtxt, TypeFoldable};\n use syntax::ast::{FloatTy, IntTy, UintTy};\n use syntax::attr;\n use syntax_pos::DUMMY_SP;\n-use rustc_i128::{i128, u128};\n+use rustc_i128::u128;\n+use rustc_const_math::ConstInt;\n \n use std::cmp;\n use std::fmt;\n@@ -1198,20 +1199,25 @@ impl<'a, 'gcx, 'tcx> Layout {\n \n                 if def.is_enum() && def.variants.iter().all(|v| v.fields.is_empty()) {\n                     // All bodies empty -> intlike\n-                    let (mut min, mut max, mut non_zero) = (i128::max_value(),\n-                                                            i128::min_value(),\n+                    let (mut min, mut max, mut non_zero) = (i64::max_value(),\n+                                                            i64::min_value(),\n                                                             true);\n                     for v in &def.variants {\n-                        let x = v.disr_val.to_u128_unchecked() as i128;\n+                        let x = match v.disr_val.erase_type() {\n+                            ConstInt::InferSigned(i) => i as i64,\n+                            ConstInt::Infer(i) => i as u64 as i64,\n+                            _ => bug!()\n+                        };\n                         if x == 0 { non_zero = false; }\n                         if x < min { min = x; }\n                         if x > max { max = x; }\n                     }\n \n-                    // FIXME: should take i128?\n+                    // FIXME: should handle i128? signed-value based impl is weird and hard to\n+                    // grok.\n                     let (discr, signed) = Integer::repr_discr(tcx, ty, &hints[..],\n-                                                              min as i64,\n-                                                              max as i64);\n+                                                              min,\n+                                                              max);\n                     return success(CEnum {\n                         discr: discr,\n                         signed: signed,"}, {"sha": "6815da4cc20fdecdcd08c2240a4b9f50e485c2a8", "filename": "src/librustc_llvm/ffi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ee69cd79255fbf98d755ff4556c4af4adda1befb/src%2Flibrustc_llvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee69cd79255fbf98d755ff4556c4af4adda1befb/src%2Flibrustc_llvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Fffi.rs?ref=ee69cd79255fbf98d755ff4556c4af4adda1befb", "patch": "@@ -33,7 +33,7 @@ pub enum LLVMRustResult {\n // Consts for the LLVM CallConv type, pre-cast to usize.\n \n /// LLVM CallingConv::ID. Should we wrap this?\n-#[derive(Copy, Clone, PartialEq)]\n+#[derive(Copy, Clone, PartialEq, Debug)]\n #[repr(C)]\n pub enum CallConv {\n     CCallConv = 0,"}, {"sha": "65e752232f6adb0b607dc5915b7f658378e8bf1f", "filename": "src/librustc_trans/abi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ee69cd79255fbf98d755ff4556c4af4adda1befb/src%2Flibrustc_trans%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee69cd79255fbf98d755ff4556c4af4adda1befb/src%2Flibrustc_trans%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fabi.rs?ref=ee69cd79255fbf98d755ff4556c4af4adda1befb", "patch": "@@ -313,7 +313,7 @@ impl ArgType {\n ///\n /// I will do my best to describe this structure, but these\n /// comments are reverse-engineered and may be inaccurate. -NDM\n-#[derive(Clone)]\n+#[derive(Clone, Debug)]\n pub struct FnType {\n     /// The LLVM types of each argument.\n     pub args: Vec<ArgType>,"}, {"sha": "a1373cb9482b7b17861a5a008c2e708c700c83b5", "filename": "src/librustc_trans/mir/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ee69cd79255fbf98d755ff4556c4af4adda1befb/src%2Flibrustc_trans%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee69cd79255fbf98d755ff4556c4af4adda1befb/src%2Flibrustc_trans%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Fmod.rs?ref=ee69cd79255fbf98d755ff4556c4af4adda1befb", "patch": "@@ -205,6 +205,7 @@ pub fn trans_mir<'a, 'tcx: 'a>(\n     sig: &ty::FnSig<'tcx>,\n     abi: Abi,\n ) {\n+    debug!(\"fn_ty: {:?}\", fn_ty);\n     let debug_context =\n         debuginfo::create_function_debug_context(fcx.ccx, instance, sig, abi, fcx.llfn, mir);\n     let bcx = fcx.get_entry_block();"}, {"sha": "526155655af2778b45fd62bbed866992ae43a752", "filename": "src/librustc_trans/mir/operand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ee69cd79255fbf98d755ff4556c4af4adda1befb/src%2Flibrustc_trans%2Fmir%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee69cd79255fbf98d755ff4556c4af4adda1befb/src%2Flibrustc_trans%2Fmir%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Foperand.rs?ref=ee69cd79255fbf98d755ff4556c4af4adda1befb", "patch": "@@ -79,7 +79,7 @@ impl<'a, 'tcx> OperandRef<'tcx> {\n     pub fn immediate(self) -> ValueRef {\n         match self.val {\n             OperandValue::Immediate(s) => s,\n-            _ => bug!()\n+            _ => bug!(\"not immediate: {:?}\", self)\n         }\n     }\n "}]}