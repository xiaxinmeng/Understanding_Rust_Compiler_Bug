{"sha": "13bc8afa4b56e8d7b012f35a35a11087739abf15", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEzYmM4YWZhNGI1NmU4ZDdiMDEyZjM1YTM1YTExMDg3NzM5YWJmMTU=", "commit": {"author": {"name": "Piotr Czarnecki", "email": "pioczarn@gmail.com", "date": "2015-04-21T10:02:12Z"}, "committer": {"name": "Piotr Czarnecki", "email": "pioczarn@gmail.com", "date": "2015-04-21T10:02:12Z"}, "message": "Model lexer: Fix remaining issues", "tree": {"sha": "f8a7c36c4078df4b108ae9ad5c8e80fab8ce0255", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f8a7c36c4078df4b108ae9ad5c8e80fab8ce0255"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/13bc8afa4b56e8d7b012f35a35a11087739abf15", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/13bc8afa4b56e8d7b012f35a35a11087739abf15", "html_url": "https://github.com/rust-lang/rust/commit/13bc8afa4b56e8d7b012f35a35a11087739abf15", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/13bc8afa4b56e8d7b012f35a35a11087739abf15/comments", "author": {"login": "pczarn", "id": 3356767, "node_id": "MDQ6VXNlcjMzNTY3Njc=", "avatar_url": "https://avatars.githubusercontent.com/u/3356767?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pczarn", "html_url": "https://github.com/pczarn", "followers_url": "https://api.github.com/users/pczarn/followers", "following_url": "https://api.github.com/users/pczarn/following{/other_user}", "gists_url": "https://api.github.com/users/pczarn/gists{/gist_id}", "starred_url": "https://api.github.com/users/pczarn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pczarn/subscriptions", "organizations_url": "https://api.github.com/users/pczarn/orgs", "repos_url": "https://api.github.com/users/pczarn/repos", "events_url": "https://api.github.com/users/pczarn/events{/privacy}", "received_events_url": "https://api.github.com/users/pczarn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pczarn", "id": 3356767, "node_id": "MDQ6VXNlcjMzNTY3Njc=", "avatar_url": "https://avatars.githubusercontent.com/u/3356767?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pczarn", "html_url": "https://github.com/pczarn", "followers_url": "https://api.github.com/users/pczarn/followers", "following_url": "https://api.github.com/users/pczarn/following{/other_user}", "gists_url": "https://api.github.com/users/pczarn/gists{/gist_id}", "starred_url": "https://api.github.com/users/pczarn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pczarn/subscriptions", "organizations_url": "https://api.github.com/users/pczarn/orgs", "repos_url": "https://api.github.com/users/pczarn/repos", "events_url": "https://api.github.com/users/pczarn/events{/privacy}", "received_events_url": "https://api.github.com/users/pczarn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e5e343aeb78a8fe7fed897eae1e79019383691e8", "url": "https://api.github.com/repos/rust-lang/rust/commits/e5e343aeb78a8fe7fed897eae1e79019383691e8", "html_url": "https://github.com/rust-lang/rust/commit/e5e343aeb78a8fe7fed897eae1e79019383691e8"}], "stats": {"total": 281, "additions": 102, "deletions": 179}, "files": [{"sha": "6e0cf17a88040beac190bd0e4293442d1b3f1623", "filename": "src/grammar/README.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13bc8afa4b56e8d7b012f35a35a11087739abf15/src%2Fgrammar%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/13bc8afa4b56e8d7b012f35a35a11087739abf15/src%2Fgrammar%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fgrammar%2FREADME.md?ref=13bc8afa4b56e8d7b012f35a35a11087739abf15", "patch": "@@ -12,7 +12,7 @@ javac *.java\n rustc -O verify.rs\n for file in ../*/**.rs; do\n     echo $file;\n-    grun RustLexer tokens -tokens < $file | ./verify $file RustLexer.tokens || break\n+    grun RustLexer tokens -tokens < \"$file\" | ./verify \"$file\" RustLexer.tokens || break\n done\n ```\n "}, {"sha": "3d8f3aeb28fa7cbcf60fc1b0f515f15b6b37d245", "filename": "src/grammar/RustLexer.g4", "status": "modified", "additions": 47, "deletions": 65, "changes": 112, "blob_url": "https://github.com/rust-lang/rust/blob/13bc8afa4b56e8d7b012f35a35a11087739abf15/src%2Fgrammar%2FRustLexer.g4", "raw_url": "https://github.com/rust-lang/rust/raw/13bc8afa4b56e8d7b012f35a35a11087739abf15/src%2Fgrammar%2FRustLexer.g4", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fgrammar%2FRustLexer.g4?ref=13bc8afa4b56e8d7b012f35a35a11087739abf15", "patch": "@@ -1,5 +1,12 @@\n lexer grammar RustLexer;\n \n+@lexer::members {\n+  public boolean is_at(int pos) {\n+    return _input.index() == pos;\n+  }\n+}\n+\n+\n tokens {\n     EQ, LT, LE, EQEQ, NE, GE, GT, ANDAND, OROR, NOT, TILDE, PLUT,\n     MINUS, STAR, SLASH, PERCENT, CARET, AND, OR, SHL, SHR, BINOP,\n@@ -8,7 +15,7 @@ tokens {\n     LBRACE, RBRACE, POUND, DOLLAR, UNDERSCORE, LIT_CHAR,\n     LIT_INTEGER, LIT_FLOAT, LIT_STR, LIT_STR_RAW, LIT_BINARY,\n     LIT_BINARY_RAW, IDENT, LIFETIME, WHITESPACE, DOC_COMMENT,\n-    COMMENT\n+    COMMENT, SHEBANG\n }\n \n import xidstart , xidcontinue;\n@@ -86,94 +93,63 @@ fragment CHAR_ESCAPE\n   | [xX] HEXIT HEXIT\n   | 'u' HEXIT HEXIT HEXIT HEXIT\n   | 'U' HEXIT HEXIT HEXIT HEXIT HEXIT HEXIT HEXIT HEXIT\n+  | 'u{' HEXIT '}'\n+  | 'u{' HEXIT HEXIT '}'\n+  | 'u{' HEXIT HEXIT HEXIT '}'\n+  | 'u{' HEXIT HEXIT HEXIT HEXIT '}'\n+  | 'u{' HEXIT HEXIT HEXIT HEXIT HEXIT '}'\n+  | 'u{' HEXIT HEXIT HEXIT HEXIT HEXIT HEXIT '}'\n   ;\n \n fragment SUFFIX\n   : IDENT\n   ;\n \n+fragment INTEGER_SUFFIX\n+  : { _input.LA(1) != 'e' && _input.LA(1) != 'E' }? SUFFIX\n+  ;\n+\n LIT_CHAR\n-  : '\\'' ( '\\\\' CHAR_ESCAPE | ~[\\\\'\\n\\t\\r] | '\\ud800' .. '\\udbff' '\\udc00' .. '\\udfff' ) '\\'' SUFFIX?\n+  : '\\'' ( '\\\\' CHAR_ESCAPE\n+         | ~[\\\\'\\n\\t\\r]\n+         | '\\ud800' .. '\\udbff' '\\udc00' .. '\\udfff'\n+         )\n+    '\\'' SUFFIX?\n   ;\n \n LIT_BYTE\n-  : 'b\\'' ( '\\\\' ( [xX] HEXIT HEXIT | [nrt\\\\'\"0] ) | ~[\\\\'\\n\\t\\r] ) '\\'' SUFFIX?\n+  : 'b\\'' ( '\\\\' ( [xX] HEXIT HEXIT\n+                 | [nrt\\\\'\"0] )\n+          | ~[\\\\'\\n\\t\\r] '\\udc00'..'\\udfff'?\n+          )\n+    '\\'' SUFFIX?\n   ;\n \n LIT_INTEGER\n-  : [0-9][0-9_]* SUFFIX?\n-  | '0b' [01][01_]* SUFFIX?\n-  | '0o' [0-7][0-7_]* SUFFIX?\n-  | '0x' [0-9a-fA-F][0-9a-fA-F_]* SUFFIX?\n+\n+  : [0-9][0-9_]* INTEGER_SUFFIX?\n+  | '0b' [01_]+ INTEGER_SUFFIX?\n+  | '0o' [0-7_]+ INTEGER_SUFFIX?\n+  | '0x' [0-9a-fA-F_]+ INTEGER_SUFFIX?\n   ;\n \n LIT_FLOAT\n   : [0-9][0-9_]* ('.' {\n-        /* dot followed by another dot is a range, no float */\n+        /* dot followed by another dot is a range, not a float */\n         _input.LA(1) != '.' &&\n-        /* dot followed by an identifier is an integer with a function call, no float */\n+        /* dot followed by an identifier is an integer with a function call, not a float */\n         _input.LA(1) != '_' &&\n-        _input.LA(1) != 'a' &&\n-        _input.LA(1) != 'b' &&\n-        _input.LA(1) != 'c' &&\n-        _input.LA(1) != 'd' &&\n-        _input.LA(1) != 'e' &&\n-        _input.LA(1) != 'f' &&\n-        _input.LA(1) != 'g' &&\n-        _input.LA(1) != 'h' &&\n-        _input.LA(1) != 'i' &&\n-        _input.LA(1) != 'j' &&\n-        _input.LA(1) != 'k' &&\n-        _input.LA(1) != 'l' &&\n-        _input.LA(1) != 'm' &&\n-        _input.LA(1) != 'n' &&\n-        _input.LA(1) != 'o' &&\n-        _input.LA(1) != 'p' &&\n-        _input.LA(1) != 'q' &&\n-        _input.LA(1) != 'r' &&\n-        _input.LA(1) != 's' &&\n-        _input.LA(1) != 't' &&\n-        _input.LA(1) != 'u' &&\n-        _input.LA(1) != 'v' &&\n-        _input.LA(1) != 'w' &&\n-        _input.LA(1) != 'x' &&\n-        _input.LA(1) != 'y' &&\n-        _input.LA(1) != 'z' &&\n-        _input.LA(1) != 'A' &&\n-        _input.LA(1) != 'B' &&\n-        _input.LA(1) != 'C' &&\n-        _input.LA(1) != 'D' &&\n-        _input.LA(1) != 'E' &&\n-        _input.LA(1) != 'F' &&\n-        _input.LA(1) != 'G' &&\n-        _input.LA(1) != 'H' &&\n-        _input.LA(1) != 'I' &&\n-        _input.LA(1) != 'J' &&\n-        _input.LA(1) != 'K' &&\n-        _input.LA(1) != 'L' &&\n-        _input.LA(1) != 'M' &&\n-        _input.LA(1) != 'N' &&\n-        _input.LA(1) != 'O' &&\n-        _input.LA(1) != 'P' &&\n-        _input.LA(1) != 'Q' &&\n-        _input.LA(1) != 'R' &&\n-        _input.LA(1) != 'S' &&\n-        _input.LA(1) != 'T' &&\n-        _input.LA(1) != 'U' &&\n-        _input.LA(1) != 'V' &&\n-        _input.LA(1) != 'W' &&\n-        _input.LA(1) != 'X' &&\n-        _input.LA(1) != 'Y' &&\n-        _input.LA(1) != 'Z'\n+        !(_input.LA(1) >= 'a' && _input.LA(1) <= 'z') &&\n+        !(_input.LA(1) >= 'A' && _input.LA(1) <= 'Z')\n   }? | ('.' [0-9][0-9_]*)? ([eE] [-+]? [0-9][0-9_]*)? SUFFIX?)\n   ;\n \n LIT_STR\n   : '\"' ('\\\\\\n' | '\\\\\\r\\n' | '\\\\' CHAR_ESCAPE | .)*? '\"' SUFFIX?\n   ;\n \n-LIT_BINARY : 'b' LIT_STR SUFFIX?;\n-LIT_BINARY_RAW : 'rb' LIT_STR_RAW SUFFIX?;\n+LIT_BINARY : 'b' LIT_STR ;\n+LIT_BINARY_RAW : 'b' LIT_STR_RAW ;\n \n /* this is a bit messy */\n \n@@ -201,13 +177,19 @@ LIFETIME : '\\'' IDENT ;\n \n WHITESPACE : [ \\r\\n\\t]+ ;\n \n-UNDOC_COMMENT     : '////' ~[\\r\\n]* -> type(COMMENT) ;\n+UNDOC_COMMENT     : '////' ~[\\n]* -> type(COMMENT) ;\n YESDOC_COMMENT    : '///' ~[\\r\\n]* -> type(DOC_COMMENT) ;\n OUTER_DOC_COMMENT : '//!' ~[\\r\\n]* -> type(DOC_COMMENT) ;\n-LINE_COMMENT      : '//' ~[\\r\\n]* -> type(COMMENT) ;\n+LINE_COMMENT      : '//' ( ~[/\\n] ~[\\n]* )? -> type(COMMENT) ;\n \n DOC_BLOCK_COMMENT\n   : ('/**' ~[*] | '/*!') (DOC_BLOCK_COMMENT | .)*? '*/' -> type(DOC_COMMENT)\n   ;\n \n BLOCK_COMMENT : '/*' (BLOCK_COMMENT | .)*? '*/' -> type(COMMENT) ;\n+\n+/* these appear at the beginning of a file */\n+\n+SHEBANG : '#!' { is_at(2) && _input.LA(1) != '[' }? ~[\\r\\n]* -> type(SHEBANG) ;\n+\n+UTF8_BOM : '\\ufeff' { is_at(1) }? -> skip ;"}, {"sha": "560b6b72471e186c8f31dd421b60b95d94fd76ef", "filename": "src/grammar/check.sh", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/13bc8afa4b56e8d7b012f35a35a11087739abf15/src%2Fgrammar%2Fcheck.sh", "raw_url": "https://github.com/rust-lang/rust/raw/13bc8afa4b56e8d7b012f35a35a11087739abf15/src%2Fgrammar%2Fcheck.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fgrammar%2Fcheck.sh?ref=13bc8afa4b56e8d7b012f35a35a11087739abf15", "patch": "@@ -18,13 +18,13 @@ failed=0\n skipped=0\n \n check() {\n-    grep --silent \"// ignore-lexer-test\" $1;\n+    grep --silent \"// ignore-lexer-test\" \"$1\";\n \n     # if it's *not* found...\n     if [ $? -eq 1 ]; then\n         cd $2 # This `cd` is so java will pick up RustLexer.class. I couldn't\n-        # figure out how to wrangle the CLASSPATH, just adding build/grammr didn't\n-        # seem to have anny effect.\n+        # figure out how to wrangle the CLASSPATH, just adding build/grammar\n+        # didn't seem to have any effect.\n         if $3 RustLexer tokens -tokens < $1 | $4 $1 $5; then\n             echo \"pass: $1\"\n             passed=`expr $passed + 1`\n@@ -39,7 +39,7 @@ check() {\n }\n \n for file in $(find $1 -iname '*.rs' ! -path '*/test/compile-fail*'); do\n-    check $file $2 $3 $4 $5\n+    check \"$file\" $2 $3 $4 $5\n done\n \n printf \"\\ntest result: \""}, {"sha": "dec797747c270a67353294b1251ac5c45082b039", "filename": "src/grammar/verify.rs", "status": "modified", "additions": 50, "deletions": 34, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/13bc8afa4b56e8d7b012f35a35a11087739abf15/src%2Fgrammar%2Fverify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13bc8afa4b56e8d7b012f35a35a11087739abf15/src%2Fgrammar%2Fverify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fgrammar%2Fverify.rs?ref=13bc8afa4b56e8d7b012f35a35a11087739abf15", "patch": "@@ -8,9 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(plugin)]\n-\n-#![allow(unstable)]\n+#![feature(plugin, rustc_private, str_char, collections)]\n \n extern crate syntax;\n extern crate rustc;\n@@ -19,14 +17,18 @@ extern crate rustc;\n extern crate log;\n \n use std::collections::HashMap;\n-use std::io::File;\n+use std::env;\n+use std::fs::File;\n+use std::io::{BufRead, Read};\n+use std::path::Path;\n \n use syntax::parse;\n use syntax::parse::lexer;\n use rustc::session::{self, config};\n \n use syntax::ast;\n use syntax::ast::Name;\n+use syntax::codemap;\n use syntax::codemap::Pos;\n use syntax::parse::token;\n use syntax::parse::lexer::TokenAndSpan;\n@@ -108,6 +110,7 @@ fn parse_token_list(file: &str) -> HashMap<String, token::Token> {\n             \"LIT_BINARY\"        => token::Literal(token::Binary(Name(0)), None),\n             \"LIT_BINARY_RAW\"    => token::Literal(token::BinaryRaw(Name(0), 0), None),\n             \"QUESTION\"          => token::Question,\n+            \"SHEBANG\"           => token::Shebang(Name(0)),\n             _                   => continue,\n         };\n \n@@ -166,24 +169,26 @@ fn count(lit: &str) -> usize {\n     lit.chars().take_while(|c| *c == '#').count()\n }\n \n-fn parse_antlr_token(s: &str, tokens: &HashMap<String, token::Token>, surrogate_pairs_pos: &[usize])\n+fn parse_antlr_token(s: &str, tokens: &HashMap<String, token::Token>, surrogate_pairs_pos: &[usize],\n+                     has_bom: bool)\n                      -> TokenAndSpan {\n     // old regex:\n     // \\[@(?P<seq>\\d+),(?P<start>\\d+):(?P<end>\\d+)='(?P<content>.+?)',<(?P<toknum>-?\\d+)>,\\d+:\\d+]\n-    let start = s.find_str(\"[@\").unwrap();\n-    let comma = start + s[start..].find_str(\",\").unwrap();\n-    let colon = comma + s[comma..].find_str(\":\").unwrap();\n-    let content_start = colon + s[colon..].find_str(\"='\").unwrap();\n-    let content_end = content_start + s[content_start..].find_str(\"',<\").unwrap();\n-    let toknum_end = content_end + s[content_end..].find_str(\">,\").unwrap();\n+    let start = s.find(\"[@\").unwrap();\n+    let comma = start + s[start..].find(\",\").unwrap();\n+    let colon = comma + s[comma..].find(\":\").unwrap();\n+    let content_start = colon + s[colon..].find(\"='\").unwrap();\n+    // Use rfind instead of find, because we don't want to stop at the content\n+    let content_end = content_start + s[content_start..].rfind(\"',<\").unwrap();\n+    let toknum_end = content_end + s[content_end..].find(\">,\").unwrap();\n \n     let start = &s[comma + 1 .. colon];\n     let end = &s[colon + 1 .. content_start];\n     let content = &s[content_start + 2 .. content_end];\n     let toknum = &s[content_end + 3 .. toknum_end];\n \n-    let proto_tok = tokens.get(toknum).expect(format!(\"didn't find token {:?} in the map\",\n-                                                              toknum));\n+    let not_found = format!(\"didn't find token {:?} in the map\", toknum);\n+    let proto_tok = tokens.get(toknum).expect(&not_found[..]);\n \n     let nm = parse::token::intern(content);\n \n@@ -209,24 +214,25 @@ fn parse_antlr_token(s: &str, tokens: &HashMap<String, token::Token>, surrogate_\n         ref t => t.clone()\n     };\n \n-    let offset = if real_tok == token::Eof\n- {\n+    let start_offset = if real_tok == token::Eof {\n         1\n     } else {\n         0\n     };\n \n-    let mut lo = start.parse::<u32>().unwrap() - offset;\n-    let mut hi = end.parse::<u32>().unwrap() + 1;\n+    let offset = if has_bom { 1 } else { 0 };\n+\n+    let mut lo = start.parse::<u32>().unwrap() - start_offset - offset;\n+    let mut hi = end.parse::<u32>().unwrap() + 1 - offset;\n \n     // Adjust the span: For each surrogate pair already encountered, subtract one position.\n     lo -= surrogate_pairs_pos.binary_search(&(lo as usize)).unwrap_or_else(|x| x) as u32;\n     hi -= surrogate_pairs_pos.binary_search(&(hi as usize)).unwrap_or_else(|x| x) as u32;\n \n-    let sp = syntax::codemap::Span {\n-        lo: syntax::codemap::BytePos(lo),\n-        hi: syntax::codemap::BytePos(hi),\n-        expn_id: syntax::codemap::NO_EXPANSION\n+    let sp = codemap::Span {\n+        lo: codemap::BytePos(lo),\n+        hi: codemap::BytePos(hi),\n+        expn_id: codemap::NO_EXPANSION\n     };\n \n     TokenAndSpan {\n@@ -245,10 +251,10 @@ fn tok_cmp(a: &token::Token, b: &token::Token) -> bool {\n     }\n }\n \n-fn span_cmp(antlr_sp: syntax::codemap::Span, rust_sp: syntax::codemap::Span, cm: &syntax::codemap::CodeMap) -> bool {\n+fn span_cmp(antlr_sp: codemap::Span, rust_sp: codemap::Span, cm: &codemap::CodeMap) -> bool {\n     antlr_sp.expn_id == rust_sp.expn_id &&\n-        antlr_sp.lo.to_uint() == cm.bytepos_to_file_charpos(rust_sp.lo).to_uint() &&\n-        antlr_sp.hi.to_uint() == cm.bytepos_to_file_charpos(rust_sp.hi).to_uint()\n+        antlr_sp.lo.to_usize() == cm.bytepos_to_file_charpos(rust_sp.lo).to_usize() &&\n+        antlr_sp.hi.to_usize() == cm.bytepos_to_file_charpos(rust_sp.hi).to_usize()\n }\n \n fn main() {\n@@ -257,10 +263,15 @@ fn main() {\n         r.next_token()\n     }\n \n-    let args = std::os::args();\n+    let mut args = env::args().skip(1);\n+    let filename = args.next().unwrap();\n+    if filename.find(\"parse-fail\").is_some() {\n+        return;\n+    }\n \n     // Rust's lexer\n-    let code = File::open(&Path::new(args[1])).unwrap().read_to_string().unwrap();\n+    let mut code = String::new();\n+    File::open(&Path::new(&filename)).unwrap().read_to_string(&mut code).unwrap();\n \n     let surrogate_pairs_pos: Vec<usize> = code.chars().enumerate()\n                                                      .filter(|&(_, c)| c as usize > 0xFFFF)\n@@ -269,6 +280,8 @@ fn main() {\n                                                      .map(|(x, n)| x + n)\n                                                      .collect();\n \n+    let has_bom = code.starts_with(\"\\u{feff}\");\n+\n     debug!(\"Pairs: {:?}\", surrogate_pairs_pos);\n \n     let options = config::basic_options();\n@@ -281,15 +294,18 @@ fn main() {\n     let ref cm = lexer.span_diagnostic.cm;\n \n     // ANTLR\n-    let mut token_file = File::open(&Path::new(args[2]));\n-    let token_map = parse_token_list(token_file.read_to_string().unwrap());\n+    let mut token_file = File::open(&Path::new(&args.next().unwrap())).unwrap();\n+    let mut token_list = String::new();\n+    token_file.read_to_string(&mut token_list).unwrap();\n+    let token_map = parse_token_list(&token_list[..]);\n \n-    let mut stdin = std::io::stdin();\n-    let mut lock = stdin.lock();\n+    let stdin = std::io::stdin();\n+    let lock = stdin.lock();\n     let lines = lock.lines();\n-    let mut antlr_tokens = lines.map(|l| parse_antlr_token(l.unwrap().trim(),\n-                                                           &token_map,\n-                                                           &surrogate_pairs_pos[]));\n+    let antlr_tokens = lines.map(|l| parse_antlr_token(l.unwrap().trim(),\n+                                                       &token_map,\n+                                                       &surrogate_pairs_pos[..],\n+                                                       has_bom));\n \n     for antlr_tok in antlr_tokens {\n         let rustc_tok = next(&mut lexer);\n@@ -314,7 +330,7 @@ fn main() {\n                         }\n                         _ => panic!(\"{:?} is not {:?}\", antlr_tok, rustc_tok)\n                     },)*\n-                    ref c => assert!(c == &antlr_tok.tok, \"{:?} is not {:?}\", rustc_tok, antlr_tok)\n+                    ref c => assert!(c == &antlr_tok.tok, \"{:?} is not {:?}\", antlr_tok, rustc_tok)\n                 }\n             )\n         }"}, {"sha": "40b64b5c3b42464b4f0c0f071d2f74f30e76cc4e", "filename": "src/libcollections/fmt.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13bc8afa4b56e8d7b012f35a35a11087739abf15/src%2Flibcollections%2Ffmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13bc8afa4b56e8d7b012f35a35a11087739abf15/src%2Flibcollections%2Ffmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Ffmt.rs?ref=13bc8afa4b56e8d7b012f35a35a11087739abf15", "patch": "@@ -7,8 +7,6 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n-//\n-// ignore-lexer-test FIXME #15679\n \n //! Utilities for formatting and printing strings\n //!"}, {"sha": "266cda9a2379dae9f07162624f08bdff00d8c73d", "filename": "src/libcollections/str.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13bc8afa4b56e8d7b012f35a35a11087739abf15/src%2Flibcollections%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13bc8afa4b56e8d7b012f35a35a11087739abf15/src%2Flibcollections%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstr.rs?ref=13bc8afa4b56e8d7b012f35a35a11087739abf15", "patch": "@@ -7,8 +7,6 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n-//\n-// ignore-lexer-test FIXME #15679\n \n //! Unicode string manipulation (the `str` type).\n //!"}, {"sha": "3422bfe5423561c1d52ddc7c3b0e0c147ff06c02", "filename": "src/libcollections/string.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13bc8afa4b56e8d7b012f35a35a11087739abf15/src%2Flibcollections%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13bc8afa4b56e8d7b012f35a35a11087739abf15/src%2Flibcollections%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstring.rs?ref=13bc8afa4b56e8d7b012f35a35a11087739abf15", "patch": "@@ -7,8 +7,6 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n-//\n-// ignore-lexer-test FIXME #15679\n \n //! An owned, growable string that enforces that its contents are valid UTF-8.\n "}, {"sha": "65f790d5d432ea7a3d6efd5aa9adaa57aee1eb48", "filename": "src/libcore/hash/sip.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13bc8afa4b56e8d7b012f35a35a11087739abf15/src%2Flibcore%2Fhash%2Fsip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13bc8afa4b56e8d7b012f35a35a11087739abf15/src%2Flibcore%2Fhash%2Fsip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fhash%2Fsip.rs?ref=13bc8afa4b56e8d7b012f35a35a11087739abf15", "patch": "@@ -7,8 +7,6 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n-//\n-// ignore-lexer-test FIXME #15883\n \n //! An implementation of SipHash 2-4.\n "}, {"sha": "bcfdcfcd5e62db954c63609b0d3a8884774941aa", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13bc8afa4b56e8d7b012f35a35a11087739abf15/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13bc8afa4b56e8d7b012f35a35a11087739abf15/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=13bc8afa4b56e8d7b012f35a35a11087739abf15", "patch": "@@ -7,8 +7,6 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n-//\n-// ignore-lexer-test FIXME #15679\n \n //! Numeric traits and functions for the built-in numeric types.\n "}, {"sha": "34810b4864e03eeeab666545f04831f7b641595f", "filename": "src/libcore/str/mod.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13bc8afa4b56e8d7b012f35a35a11087739abf15/src%2Flibcore%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13bc8afa4b56e8d7b012f35a35a11087739abf15/src%2Flibcore%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fmod.rs?ref=13bc8afa4b56e8d7b012f35a35a11087739abf15", "patch": "@@ -7,8 +7,6 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n-//\n-// ignore-lexer-test FIXME #15679\n \n //! String manipulation\n //!"}, {"sha": "b73807aa317588a7500309bc87b2d8912990875a", "filename": "src/libcoretest/char.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13bc8afa4b56e8d7b012f35a35a11087739abf15/src%2Flibcoretest%2Fchar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13bc8afa4b56e8d7b012f35a35a11087739abf15/src%2Flibcoretest%2Fchar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Fchar.rs?ref=13bc8afa4b56e8d7b012f35a35a11087739abf15", "patch": "@@ -7,8 +7,6 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n-//\n-// ignore-lexer-test FIXME #15679\n \n #[test]\n fn test_is_lowercase() {"}, {"sha": "197199e743f5767603a7f73fe876937964e004d1", "filename": "src/libgetopts/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13bc8afa4b56e8d7b012f35a35a11087739abf15/src%2Flibgetopts%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13bc8afa4b56e8d7b012f35a35a11087739abf15/src%2Flibgetopts%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgetopts%2Flib.rs?ref=13bc8afa4b56e8d7b012f35a35a11087739abf15", "patch": "@@ -7,8 +7,6 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n-//\n-// ignore-lexer-test FIXME #15677\n \n //! Simple getopt alternative.\n //!"}, {"sha": "f37093c6db85bf20a19ad67f428284177f7b575d", "filename": "src/librand/distributions/gamma.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13bc8afa4b56e8d7b012f35a35a11087739abf15/src%2Flibrand%2Fdistributions%2Fgamma.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13bc8afa4b56e8d7b012f35a35a11087739abf15/src%2Flibrand%2Fdistributions%2Fgamma.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Fdistributions%2Fgamma.rs?ref=13bc8afa4b56e8d7b012f35a35a11087739abf15", "patch": "@@ -7,8 +7,6 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n-//\n-// ignore-lexer-test FIXME #15679\n \n //! The Gamma and derived distributions.\n "}, {"sha": "c63c586b6a90100ab1a8801cb3b7cce6210e8961", "filename": "src/librustc_unicode/u_str.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13bc8afa4b56e8d7b012f35a35a11087739abf15/src%2Flibrustc_unicode%2Fu_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13bc8afa4b56e8d7b012f35a35a11087739abf15/src%2Flibrustc_unicode%2Fu_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_unicode%2Fu_str.rs?ref=13bc8afa4b56e8d7b012f35a35a11087739abf15", "patch": "@@ -7,8 +7,6 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n-//\n-// ignore-lexer-test FIXME #15679\n \n //! Unicode-intensive string manipulations.\n //!"}, {"sha": "87f1dca2caed0dc2213431326320011cde866981", "filename": "src/libserialize/hex.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13bc8afa4b56e8d7b012f35a35a11087739abf15/src%2Flibserialize%2Fhex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13bc8afa4b56e8d7b012f35a35a11087739abf15/src%2Flibserialize%2Fhex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fhex.rs?ref=13bc8afa4b56e8d7b012f35a35a11087739abf15", "patch": "@@ -7,8 +7,6 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n-//\n-// ignore-lexer-test FIXME #15679\n \n //! Hex binary-to-text encoding\n "}, {"sha": "ccc56960b02ce111877e9fe6c689988770ef548b", "filename": "src/libstd/ascii.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13bc8afa4b56e8d7b012f35a35a11087739abf15/src%2Flibstd%2Fascii.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13bc8afa4b56e8d7b012f35a35a11087739abf15/src%2Flibstd%2Fascii.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fascii.rs?ref=13bc8afa4b56e8d7b012f35a35a11087739abf15", "patch": "@@ -7,8 +7,6 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n-//\n-// ignore-lexer-test FIXME #15679\n \n //! Operations on ASCII strings and characters\n "}, {"sha": "a5bbbee790a217e6aa976ab87d1369895c7763b9", "filename": "src/libstd/collections/hash/map.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13bc8afa4b56e8d7b012f35a35a11087739abf15/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13bc8afa4b56e8d7b012f35a35a11087739abf15/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs?ref=13bc8afa4b56e8d7b012f35a35a11087739abf15", "patch": "@@ -7,8 +7,6 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n-//\n-// ignore-lexer-test FIXME #15883\n \n use self::Entry::*;\n use self::SearchResult::*;"}, {"sha": "82109900bf2aff93557742a931c610b2667108eb", "filename": "src/libstd/collections/hash/set.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13bc8afa4b56e8d7b012f35a35a11087739abf15/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13bc8afa4b56e8d7b012f35a35a11087739abf15/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs?ref=13bc8afa4b56e8d7b012f35a35a11087739abf15", "patch": "@@ -7,8 +7,6 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n-//\n-// ignore-lexer-test FIXME #15883\n \n use borrow::Borrow;\n use clone::Clone;"}, {"sha": "65ebf8515e696bee56fafa19a4c9d942e10938c9", "filename": "src/libstd/collections/hash/table.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13bc8afa4b56e8d7b012f35a35a11087739abf15/src%2Flibstd%2Fcollections%2Fhash%2Ftable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13bc8afa4b56e8d7b012f35a35a11087739abf15/src%2Flibstd%2Fcollections%2Fhash%2Ftable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Ftable.rs?ref=13bc8afa4b56e8d7b012f35a35a11087739abf15", "patch": "@@ -7,8 +7,6 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n-//\n-// ignore-lexer-test FIXME #15883\n \n use self::BucketState::*;\n "}, {"sha": "67cac42c35ec2d0a5ee22cad0fbdae38b1366442", "filename": "src/libstd/io/buffered.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13bc8afa4b56e8d7b012f35a35a11087739abf15/src%2Flibstd%2Fio%2Fbuffered.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13bc8afa4b56e8d7b012f35a35a11087739abf15/src%2Flibstd%2Fio%2Fbuffered.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fbuffered.rs?ref=13bc8afa4b56e8d7b012f35a35a11087739abf15", "patch": "@@ -7,8 +7,6 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n-//\n-// ignore-lexer-test FIXME #15883\n \n //! Buffering wrappers for I/O traits\n "}, {"sha": "ce1da4742d1dffe0c5c042d6dc627f7bb8713f16", "filename": "src/libstd/num/strconv.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13bc8afa4b56e8d7b012f35a35a11087739abf15/src%2Flibstd%2Fnum%2Fstrconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13bc8afa4b56e8d7b012f35a35a11087739abf15/src%2Flibstd%2Fnum%2Fstrconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fstrconv.rs?ref=13bc8afa4b56e8d7b012f35a35a11087739abf15", "patch": "@@ -7,8 +7,6 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n-//\n-// ignore-lexer-test FIXME #15679\n \n #![allow(missing_docs)]\n #![allow(deprecated)]"}, {"sha": "31e970a9550c4316a74a3fc3f1a3aad25d0eb3e1", "filename": "src/libstd/rt/util.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13bc8afa4b56e8d7b012f35a35a11087739abf15/src%2Flibstd%2Frt%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13bc8afa4b56e8d7b012f35a35a11087739abf15/src%2Flibstd%2Frt%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Futil.rs?ref=13bc8afa4b56e8d7b012f35a35a11087739abf15", "patch": "@@ -7,8 +7,6 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n-//\n-// ignore-lexer-test FIXME #15677\n \n use io::prelude::*;\n "}, {"sha": "dfdaa47d8b925a66af0a8b3c7227d9b5242800e2", "filename": "src/libsyntax/codemap.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13bc8afa4b56e8d7b012f35a35a11087739abf15/src%2Flibsyntax%2Fcodemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13bc8afa4b56e8d7b012f35a35a11087739abf15/src%2Flibsyntax%2Fcodemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fcodemap.rs?ref=13bc8afa4b56e8d7b012f35a35a11087739abf15", "patch": "@@ -7,8 +7,6 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n-//\n-// ignore-lexer-test FIXME #15679\n \n //! The CodeMap tracks all the source code used within a single crate, mapping\n //! from integer byte positions to the original source code location. Each bit"}, {"sha": "58df4038403a69b9a118176a535ea6a4ef09c5f6", "filename": "src/libsyntax/ext/tt/macro_parser.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13bc8afa4b56e8d7b012f35a35a11087739abf15/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13bc8afa4b56e8d7b012f35a35a11087739abf15/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs?ref=13bc8afa4b56e8d7b012f35a35a11087739abf15", "patch": "@@ -7,8 +7,6 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n-//\n-// ignore-lexer-test FIXME #15679\n \n //! This is an Earley-like parser, without support for in-grammar nonterminals,\n //! only by calling out to the main rust parser for named nonterminals (which it"}, {"sha": "19f83c7817c7c384d2c3853ddfdcda82d6188d19", "filename": "src/test/bench/core-std.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/13bc8afa4b56e8d7b012f35a35a11087739abf15/src%2Ftest%2Fbench%2Fcore-std.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13bc8afa4b56e8d7b012f35a35a11087739abf15/src%2Ftest%2Fbench%2Fcore-std.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fcore-std.rs?ref=13bc8afa4b56e8d7b012f35a35a11087739abf15", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// ignore-lexer-test FIXME #15679\n // Microbenchmarks for various functions in std and extra\n \n #![feature(rand, collections, std_misc)]"}, {"sha": "8048f3dde96826bc36b9fe17b1a24b5e551336e2", "filename": "src/test/bench/msgsend-ring-mutex-arcs.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/13bc8afa4b56e8d7b012f35a35a11087739abf15/src%2Ftest%2Fbench%2Fmsgsend-ring-mutex-arcs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13bc8afa4b56e8d7b012f35a35a11087739abf15/src%2Ftest%2Fbench%2Fmsgsend-ring-mutex-arcs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fmsgsend-ring-mutex-arcs.rs?ref=13bc8afa4b56e8d7b012f35a35a11087739abf15", "patch": "@@ -16,7 +16,6 @@\n // This also serves as a pipes test, because Arcs are implemented with pipes.\n \n // no-pretty-expanded FIXME #15189\n-// ignore-lexer-test FIXME #15679\n \n #![feature(std_misc)]\n "}, {"sha": "530c499f5fdbda7f8e4ccd9e921f2a6de0ffedbc", "filename": "src/test/bench/noise.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/13bc8afa4b56e8d7b012f35a35a11087739abf15/src%2Ftest%2Fbench%2Fnoise.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13bc8afa4b56e8d7b012f35a35a11087739abf15/src%2Ftest%2Fbench%2Fnoise.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fnoise.rs?ref=13bc8afa4b56e8d7b012f35a35a11087739abf15", "patch": "@@ -10,7 +10,6 @@\n \n // Multi-language Perlin noise benchmark.\n // See https://github.com/nsf/pnoise for timings and alternative implementations.\n-// ignore-lexer-test FIXME #15679\n \n #![feature(rand, core)]\n "}, {"sha": "8594c35f8dd1b1fbdb569c7e5f26ab8d174dd527", "filename": "src/test/compile-fail/utf8_idents.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/13bc8afa4b56e8d7b012f35a35a11087739abf15/src%2Ftest%2Fcompile-fail%2Futf8_idents.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13bc8afa4b56e8d7b012f35a35a11087739abf15/src%2Ftest%2Fcompile-fail%2Futf8_idents.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Futf8_idents.rs?ref=13bc8afa4b56e8d7b012f35a35a11087739abf15", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n //\n-// ignore-lexer-test FIXME #15679\n \n fn foo<\n     '\u03b2, //~ ERROR non-ascii idents are not fully supported"}, {"sha": "2dc7e8f952549dad342370cc4bc12997134000ea", "filename": "src/test/pretty/block-comment-wchar.pp", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/13bc8afa4b56e8d7b012f35a35a11087739abf15/src%2Ftest%2Fpretty%2Fblock-comment-wchar.pp", "raw_url": "https://github.com/rust-lang/rust/raw/13bc8afa4b56e8d7b012f35a35a11087739abf15/src%2Ftest%2Fpretty%2Fblock-comment-wchar.pp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fblock-comment-wchar.pp?ref=13bc8afa4b56e8d7b012f35a35a11087739abf15", "patch": "@@ -14,7 +14,6 @@\n // ignore-tidy-cr\n // ignore-tidy-tab\n // pp-exact:block-comment-wchar.pp\n-// ignore-lexer-test FIXME #15679\n fn f() {\n     fn nested() {\n         /*"}, {"sha": "6f4a95e7c9b00443d6ae5148312cff9782e537a6", "filename": "src/test/pretty/block-comment-wchar.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/13bc8afa4b56e8d7b012f35a35a11087739abf15/src%2Ftest%2Fpretty%2Fblock-comment-wchar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13bc8afa4b56e8d7b012f35a35a11087739abf15/src%2Ftest%2Fpretty%2Fblock-comment-wchar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fblock-comment-wchar.rs?ref=13bc8afa4b56e8d7b012f35a35a11087739abf15", "patch": "@@ -14,7 +14,6 @@\n // ignore-tidy-cr\n // ignore-tidy-tab\n // pp-exact:block-comment-wchar.pp\n-// ignore-lexer-test FIXME #15679\n fn f() {\n     fn nested() {\n         /*"}, {"sha": "9f7b98a57fcec74d44ce0ad11879c3d6851af041", "filename": "src/test/run-pass/byte-literals.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/13bc8afa4b56e8d7b012f35a35a11087739abf15/src%2Ftest%2Frun-pass%2Fbyte-literals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13bc8afa4b56e8d7b012f35a35a11087739abf15/src%2Ftest%2Frun-pass%2Fbyte-literals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbyte-literals.rs?ref=13bc8afa4b56e8d7b012f35a35a11087739abf15", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n //\n-// ignore-lexer-test FIXME #15883\n \n \n static FOO: u8 = b'\\xF0';"}, {"sha": "0d45a5d52124d08694b21de408fff8083040b3e3", "filename": "src/test/run-pass/default-method-supertrait-vtable.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/13bc8afa4b56e8d7b012f35a35a11087739abf15/src%2Ftest%2Frun-pass%2Fdefault-method-supertrait-vtable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13bc8afa4b56e8d7b012f35a35a11087739abf15/src%2Ftest%2Frun-pass%2Fdefault-method-supertrait-vtable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdefault-method-supertrait-vtable.rs?ref=13bc8afa4b56e8d7b012f35a35a11087739abf15", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n //\n-// ignore-lexer-test FIXME #15877\n \n \n // Tests that we can call a function bounded over a supertrait from"}, {"sha": "7ae1347f2c7cd4d7e48d26800f7540d9d4ae27e0", "filename": "src/test/run-pass/ifmt.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/13bc8afa4b56e8d7b012f35a35a11087739abf15/src%2Ftest%2Frun-pass%2Fifmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13bc8afa4b56e8d7b012f35a35a11087739abf15/src%2Ftest%2Frun-pass%2Fifmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fifmt.rs?ref=13bc8afa4b56e8d7b012f35a35a11087739abf15", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n // no-pretty-expanded unnecessary unsafe block generated\n-// ignore-lexer-test FIXME #15679\n \n #![deny(warnings)]\n #![allow(unused_must_use)]"}, {"sha": "7bab2ddfed06bbc429c95063ed1ab68cb2d9eb8b", "filename": "src/test/run-pass/issue-12582.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/13bc8afa4b56e8d7b012f35a35a11087739abf15/src%2Ftest%2Frun-pass%2Fissue-12582.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13bc8afa4b56e8d7b012f35a35a11087739abf15/src%2Ftest%2Frun-pass%2Fissue-12582.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-12582.rs?ref=13bc8afa4b56e8d7b012f35a35a11087739abf15", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n //\n-// ignore-lexer-test FIXME #15877\n \n pub fn main() {\n     let x = 1;"}, {"sha": "14987484711792ea44275d6236af8894a8a334a2", "filename": "src/test/run-pass/issue-13027.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/13bc8afa4b56e8d7b012f35a35a11087739abf15/src%2Ftest%2Frun-pass%2Fissue-13027.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13bc8afa4b56e8d7b012f35a35a11087739abf15/src%2Ftest%2Frun-pass%2Fissue-13027.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-13027.rs?ref=13bc8afa4b56e8d7b012f35a35a11087739abf15", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n //\n-// ignore-lexer-test FIXME #15877\n \n // Tests that match expression handles overlapped literal and range\n // properly in the presence of guard function."}, {"sha": "0df89c72424b46ee484e3e0fb04772865fa12547", "filename": "src/test/run-pass/issue-2718.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/13bc8afa4b56e8d7b012f35a35a11087739abf15/src%2Ftest%2Frun-pass%2Fissue-2718.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13bc8afa4b56e8d7b012f35a35a11087739abf15/src%2Ftest%2Frun-pass%2Fissue-2718.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2718.rs?ref=13bc8afa4b56e8d7b012f35a35a11087739abf15", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n //\n-// ignore-lexer-test FIXME #15883\n \n #![feature(unsafe_destructor, std_misc)]\n "}, {"sha": "ed9b8066104f565ee7b9351520d0cebc0602bd80", "filename": "src/test/run-pass/issue-3683.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/13bc8afa4b56e8d7b012f35a35a11087739abf15/src%2Ftest%2Frun-pass%2Fissue-3683.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13bc8afa4b56e8d7b012f35a35a11087739abf15/src%2Ftest%2Frun-pass%2Fissue-3683.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3683.rs?ref=13bc8afa4b56e8d7b012f35a35a11087739abf15", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n //\n-// ignore-lexer-test FIXME #15877\n \n \n trait Foo {"}, {"sha": "a565460c42e28333fad057b931ed6d27ecc14fc0", "filename": "src/test/run-pass/issue-4759-1.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13bc8afa4b56e8d7b012f35a35a11087739abf15/src%2Ftest%2Frun-pass%2Fissue-4759-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13bc8afa4b56e8d7b012f35a35a11087739abf15/src%2Ftest%2Frun-pass%2Fissue-4759-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-4759-1.rs?ref=13bc8afa4b56e8d7b012f35a35a11087739abf15", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n-\n trait U { fn f(self); }\n impl U for isize { fn f(self) {} }\n pub fn main() { 4.f(); }"}, {"sha": "5e2e4df95b3261b0970eca1acb83baaac18bb876", "filename": "src/test/run-pass/issue-5280.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/13bc8afa4b56e8d7b012f35a35a11087739abf15/src%2Ftest%2Frun-pass%2Fissue-5280.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13bc8afa4b56e8d7b012f35a35a11087739abf15/src%2Ftest%2Frun-pass%2Fissue-5280.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-5280.rs?ref=13bc8afa4b56e8d7b012f35a35a11087739abf15", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n //\n-// ignore-lexer-test FIXME #15877\n \n type FontTableTag = u32;\n "}, {"sha": "dd00fab50203b8e94c8483d1cc3e194f1577d1e0", "filename": "src/test/run-pass/issue-5321-immediates-with-bare-self.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/13bc8afa4b56e8d7b012f35a35a11087739abf15/src%2Ftest%2Frun-pass%2Fissue-5321-immediates-with-bare-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13bc8afa4b56e8d7b012f35a35a11087739abf15/src%2Ftest%2Frun-pass%2Fissue-5321-immediates-with-bare-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-5321-immediates-with-bare-self.rs?ref=13bc8afa4b56e8d7b012f35a35a11087739abf15", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n //\n-// ignore-lexer-test FIXME #15877\n \n trait Fooable {\n     fn yes(self);"}, {"sha": "5c8db524cc2edeec729b4efb9949333bace83422", "filename": "src/test/run-pass/lexer-crlf-line-endings-string-literal-doc-comment.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/13bc8afa4b56e8d7b012f35a35a11087739abf15/src%2Ftest%2Frun-pass%2Flexer-crlf-line-endings-string-literal-doc-comment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13bc8afa4b56e8d7b012f35a35a11087739abf15/src%2Ftest%2Frun-pass%2Flexer-crlf-line-endings-string-literal-doc-comment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flexer-crlf-line-endings-string-literal-doc-comment.rs?ref=13bc8afa4b56e8d7b012f35a35a11087739abf15", "patch": "@@ -16,7 +16,6 @@\n // this directory should enforce it.\r\n \r\n // ignore-pretty\r\n-// ignore-lexer-test FIXME #15882\r\n \r\n /// Doc comment that ends in CRLF\r\n pub fn foo() {}\r"}, {"sha": "6e65cb2afd4ff38c59063c1235c9276a4589690e", "filename": "src/test/run-pass/lint-non-camel-case-types-non-uppercase-statics-unicode.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/13bc8afa4b56e8d7b012f35a35a11087739abf15/src%2Ftest%2Frun-pass%2Flint-non-camel-case-types-non-uppercase-statics-unicode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13bc8afa4b56e8d7b012f35a35a11087739abf15/src%2Ftest%2Frun-pass%2Flint-non-camel-case-types-non-uppercase-statics-unicode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flint-non-camel-case-types-non-uppercase-statics-unicode.rs?ref=13bc8afa4b56e8d7b012f35a35a11087739abf15", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n //\n-// ignore-lexer-test FIXME #15679\n \n \n #![forbid(non_camel_case_types)]"}, {"sha": "0b2e19d6c7930e0186119eae50540d328a26ae72", "filename": "src/test/run-pass/match-range.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/13bc8afa4b56e8d7b012f35a35a11087739abf15/src%2Ftest%2Frun-pass%2Fmatch-range.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13bc8afa4b56e8d7b012f35a35a11087739abf15/src%2Ftest%2Frun-pass%2Fmatch-range.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmatch-range.rs?ref=13bc8afa4b56e8d7b012f35a35a11087739abf15", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n //\n-// ignore-lexer-test FIXME #15877\n \n pub fn main() {\n     match 5_usize {"}, {"sha": "0475dd10fdef9ff6b8d8f6b75e265d795afebdf3", "filename": "src/test/run-pass/multibyte.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/13bc8afa4b56e8d7b012f35a35a11087739abf15/src%2Ftest%2Frun-pass%2Fmultibyte.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13bc8afa4b56e8d7b012f35a35a11087739abf15/src%2Ftest%2Frun-pass%2Fmultibyte.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmultibyte.rs?ref=13bc8afa4b56e8d7b012f35a35a11087739abf15", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n //\n-// ignore-lexer-test FIXME #15679\n \n // Test that multibyte characters don't crash the compiler\n pub fn main() {"}, {"sha": "9ee824d4185851b4477dadb969fae7a857ff2bb8", "filename": "src/test/run-pass/raw-str.rs", "status": "modified", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/13bc8afa4b56e8d7b012f35a35a11087739abf15/src%2Ftest%2Frun-pass%2Fraw-str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13bc8afa4b56e8d7b012f35a35a11087739abf15/src%2Ftest%2Frun-pass%2Fraw-str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fraw-str.rs?ref=13bc8afa4b56e8d7b012f35a35a11087739abf15"}, {"sha": "15ab21bbc8da7bcdbdbd14d70de513214f469294", "filename": "src/test/run-pass/shebang.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/13bc8afa4b56e8d7b012f35a35a11087739abf15/src%2Ftest%2Frun-pass%2Fshebang.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13bc8afa4b56e8d7b012f35a35a11087739abf15/src%2Ftest%2Frun-pass%2Fshebang.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fshebang.rs?ref=13bc8afa4b56e8d7b012f35a35a11087739abf15", "patch": "@@ -11,6 +11,5 @@\n \n // ignore-pretty: `expand` adds some preludes before shebang\n //\n-// ignore-lexer-test FIXME #15878\n \n pub fn main() { println!(\"Hello World\"); }"}, {"sha": "109287a83b16a88e93ced69fd83047aac5ad4188", "filename": "src/test/run-pass/struct-return.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/13bc8afa4b56e8d7b012f35a35a11087739abf15/src%2Ftest%2Frun-pass%2Fstruct-return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13bc8afa4b56e8d7b012f35a35a11087739abf15/src%2Ftest%2Frun-pass%2Fstruct-return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstruct-return.rs?ref=13bc8afa4b56e8d7b012f35a35a11087739abf15", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n //\n-// ignore-lexer-test FIXME #15883\n \n #[derive(Copy, Clone)]\n pub struct Quad { a: u64, b: u64, c: u64, d: u64 }"}, {"sha": "a29e0e932c07d329fe6969b303a0e37c389db35e", "filename": "src/test/run-pass/trait-to-str.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/13bc8afa4b56e8d7b012f35a35a11087739abf15/src%2Ftest%2Frun-pass%2Ftrait-to-str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13bc8afa4b56e8d7b012f35a35a11087739abf15/src%2Ftest%2Frun-pass%2Ftrait-to-str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-to-str.rs?ref=13bc8afa4b56e8d7b012f35a35a11087739abf15", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n //\n-// ignore-lexer-test FIXME #15883\n \n \n trait to_str {"}, {"sha": "cfd812400947e5e637b4986731c020aa81a64665", "filename": "src/test/run-pass/trait-with-bounds-default.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/13bc8afa4b56e8d7b012f35a35a11087739abf15/src%2Ftest%2Frun-pass%2Ftrait-with-bounds-default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13bc8afa4b56e8d7b012f35a35a11087739abf15/src%2Ftest%2Frun-pass%2Ftrait-with-bounds-default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-with-bounds-default.rs?ref=13bc8afa4b56e8d7b012f35a35a11087739abf15", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n //\n-// ignore-lexer-test FIXME #15877\n \n pub trait Clone2 {\n     /// Returns a copy of the value. The contents of owned pointers"}, {"sha": "36b0eb527b64251f5b8fb82bd6f95580691e3f9e", "filename": "src/test/run-pass/traits-default-method-self.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/13bc8afa4b56e8d7b012f35a35a11087739abf15/src%2Ftest%2Frun-pass%2Ftraits-default-method-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13bc8afa4b56e8d7b012f35a35a11087739abf15/src%2Ftest%2Frun-pass%2Ftraits-default-method-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftraits-default-method-self.rs?ref=13bc8afa4b56e8d7b012f35a35a11087739abf15", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n //\n-// ignore-lexer-test FIXME #15877\n \n \n trait Cat {"}, {"sha": "a2e7f54bba65203bcbc97ce9be1498f67a4862df", "filename": "src/test/run-pass/traits-default-method-trivial.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/13bc8afa4b56e8d7b012f35a35a11087739abf15/src%2Ftest%2Frun-pass%2Ftraits-default-method-trivial.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13bc8afa4b56e8d7b012f35a35a11087739abf15/src%2Ftest%2Frun-pass%2Ftraits-default-method-trivial.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftraits-default-method-trivial.rs?ref=13bc8afa4b56e8d7b012f35a35a11087739abf15", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n //\n-// ignore-lexer-test FIXME #15877\n \n \n trait Cat {"}, {"sha": "26f7b767988d240581d7bcb39cf838c352b06de7", "filename": "src/test/run-pass/unsized.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13bc8afa4b56e8d7b012f35a35a11087739abf15/src%2Ftest%2Frun-pass%2Funsized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13bc8afa4b56e8d7b012f35a35a11087739abf15/src%2Ftest%2Frun-pass%2Funsized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funsized.rs?ref=13bc8afa4b56e8d7b012f35a35a11087739abf15", "patch": "@@ -10,8 +10,6 @@\n \n // Test syntax checks for `?Sized` syntax.\n \n-// pretty-expanded FIXME #23616\n-\n use std::marker::PhantomData;\n \n trait T1  { }"}, {"sha": "1cce98ae6b7258ed3efa814a353b6ff53125dd35", "filename": "src/test/run-pass/unsized2.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13bc8afa4b56e8d7b012f35a35a11087739abf15/src%2Ftest%2Frun-pass%2Funsized2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13bc8afa4b56e8d7b012f35a35a11087739abf15/src%2Ftest%2Frun-pass%2Funsized2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funsized2.rs?ref=13bc8afa4b56e8d7b012f35a35a11087739abf15", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n-\n #![allow(unknown_features)]\n #![feature(box_syntax)]\n "}, {"sha": "c3052a928d6d6764348cf56beb3d2d5f15b41a8f", "filename": "src/test/run-pass/utf8-bom.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/13bc8afa4b56e8d7b012f35a35a11087739abf15/src%2Ftest%2Frun-pass%2Futf8-bom.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13bc8afa4b56e8d7b012f35a35a11087739abf15/src%2Ftest%2Frun-pass%2Futf8-bom.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Futf8-bom.rs?ref=13bc8afa4b56e8d7b012f35a35a11087739abf15", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n //\n-// ignore-lexer-test FIXME #15679\n \n // This file has utf-8 BOM, it should be compiled normally without error.\n "}, {"sha": "4782edf4e129aba11f829344b153207a8346a947", "filename": "src/test/run-pass/utf8.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/13bc8afa4b56e8d7b012f35a35a11087739abf15/src%2Ftest%2Frun-pass%2Futf8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13bc8afa4b56e8d7b012f35a35a11087739abf15/src%2Ftest%2Frun-pass%2Futf8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Futf8.rs?ref=13bc8afa4b56e8d7b012f35a35a11087739abf15", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n //\n-// ignore-lexer-test FIXME #15679\n // no-pretty-expanded FIXME #15189\n \n pub fn main() {"}, {"sha": "36b64551ef28f679f1144c3bfd52d7dc54c52f8d", "filename": "src/test/run-pass/utf8_chars.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/13bc8afa4b56e8d7b012f35a35a11087739abf15/src%2Ftest%2Frun-pass%2Futf8_chars.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13bc8afa4b56e8d7b012f35a35a11087739abf15/src%2Ftest%2Frun-pass%2Futf8_chars.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Futf8_chars.rs?ref=13bc8afa4b56e8d7b012f35a35a11087739abf15", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n //\n-// ignore-lexer-test FIXME #15679\n \n #![feature(collections, core, str_char)]\n "}, {"sha": "559afcd164148998bbdbd1f4ef955ef9d474c834", "filename": "src/test/run-pass/utf8_idents.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/13bc8afa4b56e8d7b012f35a35a11087739abf15/src%2Ftest%2Frun-pass%2Futf8_idents.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13bc8afa4b56e8d7b012f35a35a11087739abf15/src%2Ftest%2Frun-pass%2Futf8_idents.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Futf8_idents.rs?ref=13bc8afa4b56e8d7b012f35a35a11087739abf15", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n //\n-// ignore-lexer-test FIXME #15679\n \n #![feature(non_ascii_idents)]\n "}]}