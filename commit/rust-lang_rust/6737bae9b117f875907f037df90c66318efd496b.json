{"sha": "6737bae9b117f875907f037df90c66318efd496b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY3MzdiYWU5YjExN2Y4NzU5MDdmMDM3ZGY5MGM2NjMxOGVmZDQ5NmI=", "commit": {"author": {"name": "Michael Wright", "email": "mikerite@lavabit.com", "date": "2017-12-26T05:25:13Z"}, "committer": {"name": "Michael Wright", "email": "mikerite@lavabit.com", "date": "2017-12-26T07:24:12Z"}, "message": "Implemented option_option lint", "tree": {"sha": "99d7f238ddbf2bb6722e18df0052b9067c7764ca", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/99d7f238ddbf2bb6722e18df0052b9067c7764ca"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6737bae9b117f875907f037df90c66318efd496b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6737bae9b117f875907f037df90c66318efd496b", "html_url": "https://github.com/rust-lang/rust/commit/6737bae9b117f875907f037df90c66318efd496b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6737bae9b117f875907f037df90c66318efd496b/comments", "author": null, "committer": null, "parents": [{"sha": "f0d0fc69de8ead855a98f5a5254c801dcce4d872", "url": "https://api.github.com/repos/rust-lang/rust/commits/f0d0fc69de8ead855a98f5a5254c801dcce4d872", "html_url": "https://github.com/rust-lang/rust/commit/f0d0fc69de8ead855a98f5a5254c801dcce4d872"}], "stats": {"total": 183, "additions": 163, "deletions": 20}, "files": [{"sha": "1f81dd0b9ff51399897d78fdc79f46f0a74cd1a4", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6737bae9b117f875907f037df90c66318efd496b/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6737bae9b117f875907f037df90c66318efd496b/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=6737bae9b117f875907f037df90c66318efd496b", "patch": "@@ -599,6 +599,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry) {\n         types::IMPLICIT_HASHER,\n         types::LET_UNIT_VALUE,\n         types::LINKEDLIST,\n+        types::OPTION_OPTION,\n         types::TYPE_COMPLEXITY,\n         types::UNIT_CMP,\n         types::UNNECESSARY_CAST,"}, {"sha": "2297ccc3f02cd076733db8f7431405a2651e605e", "filename": "clippy_lints/src/types.rs", "status": "modified", "additions": 58, "deletions": 19, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/6737bae9b117f875907f037df90c66318efd496b/clippy_lints%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6737bae9b117f875907f037df90c66318efd496b/clippy_lints%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes.rs?ref=6737bae9b117f875907f037df90c66318efd496b", "patch": "@@ -42,6 +42,26 @@ declare_lint! {\n     \"usage of `Box<Vec<T>>`, vector elements are already on the heap\"\n }\n \n+/// **What it does:** Checks for use of `Option<Option<_>>` in function signatures and type\n+/// definitions\n+///\n+/// **Why is this bad?** `Option<_>` represents an optional value. `Option<Option<_>>`\n+/// represents an optional optional value which is logically the same thing as an optional\n+/// value but has an unneeded extra level of wrapping.\n+///\n+/// **Known problems:** None.\n+///\n+/// **Example**\n+/// ```rust\n+/// fn x() -> Option<Option<u32>> {\n+///     None\n+/// }\n+declare_lint! {\n+    pub OPTION_OPTION,\n+    Warn,\n+    \"usage of `Option<Option<T>>`\"\n+}\n+\n /// **What it does:** Checks for usage of any `LinkedList`, suggesting to use a\n /// `Vec` or a `VecDeque` (formerly called `RingBuf`).\n ///\n@@ -97,7 +117,7 @@ declare_lint! {\n \n impl LintPass for TypePass {\n     fn get_lints(&self) -> LintArray {\n-        lint_array!(BOX_VEC, LINKEDLIST, BORROWED_BOX)\n+        lint_array!(BOX_VEC, OPTION_OPTION, LINKEDLIST, BORROWED_BOX)\n     }\n }\n \n@@ -142,6 +162,23 @@ fn check_fn_decl(cx: &LateContext, decl: &FnDecl) {\n     }\n }\n \n+/// Check if `qpath` has last segment with type parameter matching `path`\n+fn match_type_parameter(cx: &LateContext, qpath: &QPath, path: &[&str]) -> bool {\n+    let last = last_path_segment(qpath);\n+    if_chain! {\n+        if let Some(ref params) = last.parameters;\n+        if !params.parenthesized;\n+        if let Some(vec) = params.types.get(0);\n+        if let TyPath(ref qpath) = vec.node;\n+        if let Some(did) = opt_def_id(cx.tables.qpath_def(qpath, cx.tcx.hir.node_to_hir_id(vec.id)));\n+        if match_def_path(cx.tcx, did, path);\n+        then {\n+            return true;\n+        }\n+    }\n+    false\n+}\n+\n /// Recursively check for `TypePass` lints in the given type. Stop at the first\n /// lint found.\n ///\n@@ -157,24 +194,26 @@ fn check_ty(cx: &LateContext, ast_ty: &hir::Ty, is_local: bool) {\n             let def = cx.tables.qpath_def(qpath, hir_id);\n             if let Some(def_id) = opt_def_id(def) {\n                 if Some(def_id) == cx.tcx.lang_items().owned_box() {\n-                    let last = last_path_segment(qpath);\n-                    if_chain! {\n-                        if let Some(ref params) = last.parameters;\n-                        if !params.parenthesized;\n-                        if let Some(vec) = params.types.get(0);\n-                        if let TyPath(ref qpath) = vec.node;\n-                        if let Some(did) = opt_def_id(cx.tables.qpath_def(qpath, cx.tcx.hir.node_to_hir_id(vec.id)));\n-                        if match_def_path(cx.tcx, did, &paths::VEC);\n-                        then {\n-                            span_help_and_lint(\n-                                cx,\n-                                BOX_VEC,\n-                                ast_ty.span,\n-                                \"you seem to be trying to use `Box<Vec<T>>`. Consider using just `Vec<T>`\",\n-                                \"`Vec<T>` is already on the heap, `Box<Vec<T>>` makes an extra allocation.\",\n-                            );\n-                            return; // don't recurse into the type\n-                        }\n+                    if match_type_parameter(cx, qpath, &paths::VEC) {\n+                        span_help_and_lint(\n+                            cx,\n+                            BOX_VEC,\n+                            ast_ty.span,\n+                            \"you seem to be trying to use `Box<Vec<T>>`. Consider using just `Vec<T>`\",\n+                            \"`Vec<T>` is already on the heap, `Box<Vec<T>>` makes an extra allocation.\",\n+                        );\n+                        return; // don't recurse into the type\n+                    }\n+                } else if match_def_path(cx.tcx, def_id, &paths::OPTION) {\n+                    if match_type_parameter(cx, qpath, &paths::OPTION) {\n+                        span_help_and_lint(\n+                            cx,\n+                            OPTION_OPTION,\n+                            ast_ty.span,\n+                            \"consider using `Option<T>` instead of `Option<Option<T>>`\",\n+                            \"`Option<_>` is easier to use than `Option<Option<_>`\",\n+                        );\n+                        return; // don't recurse into the type\n                     }\n                 } else if match_def_path(cx.tcx, def_id, &paths::LINKED_LIST) {\n                     span_help_and_lint("}, {"sha": "081ff0dc5964feef417a011812c69947cf082a34", "filename": "tests/ui/needless_pass_by_value.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6737bae9b117f875907f037df90c66318efd496b/tests%2Fui%2Fneedless_pass_by_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6737bae9b117f875907f037df90c66318efd496b/tests%2Fui%2Fneedless_pass_by_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_pass_by_value.rs?ref=6737bae9b117f875907f037df90c66318efd496b", "patch": "@@ -2,7 +2,7 @@\n \n \n #![warn(needless_pass_by_value)]\n-#![allow(dead_code, single_match, if_let_redundant_pattern_matching, many_single_char_names)]\n+#![allow(dead_code, single_match, if_let_redundant_pattern_matching, many_single_char_names, option_option)]\n \n use std::borrow::Borrow;\n use std::convert::AsRef;"}, {"sha": "88232c3b23fe8be1c67e82f82f000ca0db11c6ae", "filename": "tests/ui/option_option.rs", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/6737bae9b117f875907f037df90c66318efd496b/tests%2Fui%2Foption_option.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6737bae9b117f875907f037df90c66318efd496b/tests%2Fui%2Foption_option.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Foption_option.rs?ref=6737bae9b117f875907f037df90c66318efd496b", "patch": "@@ -0,0 +1,46 @@\n+fn input(_: Option<Option<u8>>) {\n+}\n+\n+fn output() -> Option<Option<u8>> {\n+    None\n+}\n+\n+fn output_nested() -> Vec<Option<Option<u8>>> {\n+    vec![None]\n+}\n+\n+// The lint only generates one warning for this\n+fn output_nested_nested() -> Option<Option<Option<u8>>> {\n+    None\n+}\n+\n+struct Struct {\n+    x: Option<Option<u8>>,\n+}\n+\n+enum Enum {\n+    Tuple(Option<Option<u8>>),\n+    Struct{x: Option<Option<u8>>},\n+}\n+\n+// The lint allows this\n+type OptionOption = Option<Option<u32>>;\n+\n+// The lint allows this\n+fn output_type_alias() -> OptionOption {\n+    None\n+}\n+\n+fn main() {\n+    input(None);\n+    output();\n+    output_nested();\n+\n+    // The lint allows this\n+    let local: Option<Option<u8>> = None;\n+\n+    // The lint allows this\n+    let expr = Some(Some(true));\n+}\n+\n+"}, {"sha": "514538be167e8322b60bea36a196b68a586343e9", "filename": "tests/ui/option_option.stderr", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/6737bae9b117f875907f037df90c66318efd496b/tests%2Fui%2Foption_option.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6737bae9b117f875907f037df90c66318efd496b/tests%2Fui%2Foption_option.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Foption_option.stderr?ref=6737bae9b117f875907f037df90c66318efd496b", "patch": "@@ -0,0 +1,57 @@\n+error: consider using `Option<T>` instead of `Option<Option<T>>`\n+ --> $DIR/option_option.rs:1:13\n+  |\n+1 | fn input(_: Option<Option<u8>>) {\n+  |             ^^^^^^^^^^^^^^^^^^\n+  |\n+  = note: `-D option-option` implied by `-D warnings`\n+  = help: `Option<_>` is easier to use than `Option<Option<_>`\n+\n+error: consider using `Option<T>` instead of `Option<Option<T>>`\n+ --> $DIR/option_option.rs:4:16\n+  |\n+4 | fn output() -> Option<Option<u8>> {\n+  |                ^^^^^^^^^^^^^^^^^^\n+  |\n+  = help: `Option<_>` is easier to use than `Option<Option<_>`\n+\n+error: consider using `Option<T>` instead of `Option<Option<T>>`\n+ --> $DIR/option_option.rs:8:27\n+  |\n+8 | fn output_nested() -> Vec<Option<Option<u8>>> {\n+  |                           ^^^^^^^^^^^^^^^^^^\n+  |\n+  = help: `Option<_>` is easier to use than `Option<Option<_>`\n+\n+error: consider using `Option<T>` instead of `Option<Option<T>>`\n+  --> $DIR/option_option.rs:13:30\n+   |\n+13 | fn output_nested_nested() -> Option<Option<Option<u8>>> {\n+   |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: `Option<_>` is easier to use than `Option<Option<_>`\n+\n+error: consider using `Option<T>` instead of `Option<Option<T>>`\n+  --> $DIR/option_option.rs:18:8\n+   |\n+18 |     x: Option<Option<u8>>,\n+   |        ^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: `Option<_>` is easier to use than `Option<Option<_>`\n+\n+error: consider using `Option<T>` instead of `Option<Option<T>>`\n+  --> $DIR/option_option.rs:22:11\n+   |\n+22 |     Tuple(Option<Option<u8>>),\n+   |           ^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: `Option<_>` is easier to use than `Option<Option<_>`\n+\n+error: consider using `Option<T>` instead of `Option<Option<T>>`\n+  --> $DIR/option_option.rs:23:15\n+   |\n+23 |     Struct{x: Option<Option<u8>>},\n+   |               ^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: `Option<_>` is easier to use than `Option<Option<_>`\n+"}]}