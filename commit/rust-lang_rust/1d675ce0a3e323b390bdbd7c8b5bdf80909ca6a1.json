{"sha": "1d675ce0a3e323b390bdbd7c8b5bdf80909ca6a1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFkNjc1Y2UwYTNlMzIzYjM5MGJkYmQ3YzhiNWJkZjgwOTA5Y2E2YTE=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-04-28T16:09:15Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-05-02T18:01:36Z"}, "message": "adjust the macro to allow for `multi` modifier", "tree": {"sha": "5075dac0ac69648f47e99bb91cb5a8128c24bbff", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5075dac0ac69648f47e99bb91cb5a8128c24bbff"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1d675ce0a3e323b390bdbd7c8b5bdf80909ca6a1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1d675ce0a3e323b390bdbd7c8b5bdf80909ca6a1", "html_url": "https://github.com/rust-lang/rust/commit/1d675ce0a3e323b390bdbd7c8b5bdf80909ca6a1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1d675ce0a3e323b390bdbd7c8b5bdf80909ca6a1/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3d1095c5bea7bbdc4b150425482ac4d526a4bb76", "url": "https://api.github.com/repos/rust-lang/rust/commits/3d1095c5bea7bbdc4b150425482ac4d526a4bb76", "html_url": "https://github.com/rust-lang/rust/commit/3d1095c5bea7bbdc4b150425482ac4d526a4bb76"}], "stats": {"total": 132, "additions": 121, "deletions": 11}, "files": [{"sha": "d3954326e7b721c28586f0c001bbc82d3e703a6c", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1d675ce0a3e323b390bdbd7c8b5bdf80909ca6a1/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d675ce0a3e323b390bdbd7c8b5bdf80909ca6a1/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=1d675ce0a3e323b390bdbd7c8b5bdf80909ca6a1", "patch": "@@ -43,6 +43,9 @@\n #![feature(unboxed_closures)]\n #![feature(discriminant_value)]\n #![feature(sort_unstable)]\n+#![feature(trace_macros)]\n+\n+#![recursion_limit=\"128\"]\n \n extern crate arena;\n extern crate core;"}, {"sha": "dff58d78f8235b1e1216c01a616c33a8bf24e7ca", "filename": "src/librustc/ty/maps.rs", "status": "modified", "additions": 118, "deletions": 11, "changes": 129, "blob_url": "https://github.com/rust-lang/rust/blob/1d675ce0a3e323b390bdbd7c8b5bdf80909ca6a1/src%2Flibrustc%2Fty%2Fmaps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d675ce0a3e323b390bdbd7c8b5bdf80909ca6a1/src%2Flibrustc%2Fty%2Fmaps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps.rs?ref=1d675ce0a3e323b390bdbd7c8b5bdf80909ca6a1", "patch": "@@ -387,8 +387,7 @@ macro_rules! define_maps {\n        [$($modifiers:tt)*] $name:ident: $node:ident($K:ty) -> $V:ty,)*) => {\n         define_map_struct! {\n             tcx: $tcx,\n-            input: ($(([$($attr)*] [$($modifiers)*] $name))*),\n-            output: ()\n+            input: ($(([$($modifiers)*] [$($attr)*] [$name]))*)\n         }\n \n         impl<$tcx> Maps<$tcx> {\n@@ -536,8 +535,10 @@ macro_rules! define_maps {\n             })*\n         }\n \n-        pub struct Providers<$tcx> {\n-            $(pub $name: for<'a> fn(TyCtxt<'a, $tcx, $tcx>, $K) -> $V),*\n+        define_provider_struct! {\n+            tcx: $tcx,\n+            input: ($(([$($modifiers)*] [$name] [$K] [$V]))*),\n+            output: ()\n         }\n \n         impl<$tcx> Copy for Providers<$tcx> {}\n@@ -558,6 +559,17 @@ macro_rules! define_maps {\n }\n \n macro_rules! define_map_struct {\n+    // Initial state\n+    (tcx: $tcx:tt,\n+     input: $input:tt) => {\n+        define_map_struct! {\n+            tcx: $tcx,\n+            input: $input,\n+            output: ()\n+        }\n+    };\n+\n+    // Final output\n     (tcx: $tcx:tt,\n      input: (),\n      output: ($($output:tt)*)) => {\n@@ -568,26 +580,121 @@ macro_rules! define_map_struct {\n         }\n     };\n \n-    // Detect things with the `pub` modifier\n+    // Field recognized and ready to shift into the output\n     (tcx: $tcx:tt,\n-     input: (([$($attr:meta)*] [pub] $name:ident) $($input:tt)*),\n+     ready: ([$($pub:tt)*] [$($attr:tt)*] [$name:ident]),\n+     input: $input:tt,\n      output: ($($output:tt)*)) => {\n         define_map_struct! {\n             tcx: $tcx,\n-            input: ($($input)*),\n+            input: $input,\n             output: ($($output)*\n-                     $(#[$attr])* pub $name: RefCell<DepTrackingMap<queries::$name<$tcx>>>,)\n+                     $(#[$attr])* $($pub)* $name: RefCell<DepTrackingMap<queries::$name<$tcx>>>,)\n         }\n     };\n \n+    // Detect things with the `pub` modifier\n     (tcx: $tcx:tt,\n-     input: (([$($attr:meta)*] [$($modifiers:tt)*] $name:ident) $($input:tt)*),\n-     output: ($($output:tt)*)) => {\n+     input: (([pub $($other_modifiers:tt)*] $attrs:tt $name:tt) $($input:tt)*),\n+     output: $output:tt) => {\n         define_map_struct! {\n             tcx: $tcx,\n+            ready: ([pub] $attrs $name),\n             input: ($($input)*),\n+            output: $output\n+        }\n+    };\n+\n+    // No modifiers left? This is a private item.\n+    (tcx: $tcx:tt,\n+     input: (([] $attrs:tt $name:tt) $($input:tt)*),\n+     output: $output:tt) => {\n+        define_map_struct! {\n+            tcx: $tcx,\n+            ready: ([pub] $attrs $name),\n+            input: ($($input)*),\n+            output: $output\n+        }\n+    };\n+\n+    // Skip other modifiers\n+    (tcx: $tcx:tt,\n+     input: (([$other_modifier:tt $($modifiers:tt)*] $($fields:tt)*) $($input:tt)*),\n+     output: $output:tt) => {\n+        define_map_struct! {\n+            tcx: $tcx,\n+            input: (([$($modifiers)*] $($fields)*) $($input)*),\n+            output: $output\n+        }\n+    };\n+}\n+\n+macro_rules! define_provider_struct {\n+    // Initial state:\n+    (tcx: $tcx:tt, input: $input:tt) => {\n+        define_provider_struct! {\n+            tcx: $tcx,\n+            input: $input,\n+            output: ()\n+        }\n+    };\n+\n+    // Final state:\n+    (tcx: $tcx:tt,\n+     input: (),\n+     output: ($($output:tt)*)) => {\n+        pub struct Providers<$tcx> {\n+            $($output)*\n+        }\n+    };\n+\n+    // Something ready to shift:\n+    (tcx: $tcx:tt,\n+     ready: ([$name:ident] [$K:ty] [$R:ty]),\n+     input: $input:tt,\n+     output: ($($output:tt)*)) => {\n+        define_provider_struct! {\n+            tcx: $tcx,\n+            input: $input,\n             output: ($($output)*\n-                     $(#[$attr])* $name: RefCell<DepTrackingMap<queries::$name<$tcx>>>,)\n+                     pub $name: for<'a> fn(TyCtxt<'a, $tcx, $tcx>, $K) -> $R,)\n+        }\n+    };\n+\n+    // The `multi` modifier indicates a **multiquery**, in which case\n+    // the function returns a `FxHashMap<K,V>` instead of just a value\n+    // `V`.\n+    (tcx: $tcx:tt,\n+     input: (([multi $($other_modifiers:tt)*] $name:tt [$K:ty] [$V:ty]) $($input:tt)*),\n+     output: $output:tt) => {\n+        define_provider_struct! {\n+            tcx: $tcx,\n+            ready: ($name [$K] [FxHashMap<$K,$V>]),\n+            input: ($($input)*),\n+            output: $output\n+        }\n+    };\n+\n+    // Regular queries produce a `V` only.\n+    (tcx: $tcx:tt,\n+     input: (([] $name:tt $K:tt $V:tt) $($input:tt)*),\n+     output: $output:tt) => {\n+        define_provider_struct! {\n+            tcx: $tcx,\n+            ready: ($name $K $V),\n+            input: ($($input)*),\n+            output: $output\n+        }\n+    };\n+\n+    // Skip modifiers other than `multi`.\n+    (tcx: $tcx:tt,\n+     input: (([$other_modifier:tt $($modifiers:tt)*] $($fields:tt)*) $($input:tt)*),\n+     output: $output:tt) => {\n+        define_provider_struct! {\n+            tcx: $tcx,\n+            input: (([$($modifiers)*] $($fields)*) $($input)*),\n+            output: $output\n         }\n     };\n }"}]}