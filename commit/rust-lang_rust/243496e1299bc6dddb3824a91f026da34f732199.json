{"sha": "243496e1299bc6dddb3824a91f026da34f732199", "node_id": "C_kwDOAAsO6NoAKDI0MzQ5NmUxMjk5YmM2ZGRkYjM4MjRhOTFmMDI2ZGEzNGY3MzIxOTk", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2022-08-16T14:56:42Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2022-11-11T02:01:03Z"}, "message": "Consider `#[must_use]` annotation on `async fn` as also affecting the `Future::Output`\n\nNo longer lint against `#[must_use] async fn foo()`.\n\nWhen encountering a statement that awaits on a `Future`, check if the\n`Future`'s parent item is annotated with `#[must_use]` and emit a lint\nif so. This effectively makes `must_use` an annotation on the\n`Future::Output` instead of only the `Future` itself.\n\nFix #78149.", "tree": {"sha": "bb0052f9b3ae5bf5a2cbafaaf548b60f163f31cb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bb0052f9b3ae5bf5a2cbafaaf548b60f163f31cb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/243496e1299bc6dddb3824a91f026da34f732199", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/243496e1299bc6dddb3824a91f026da34f732199", "html_url": "https://github.com/rust-lang/rust/commit/243496e1299bc6dddb3824a91f026da34f732199", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/243496e1299bc6dddb3824a91f026da34f732199/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "50bb7a40e11918a93e19ca44ca8893e3b56a8ec8", "url": "https://api.github.com/repos/rust-lang/rust/commits/50bb7a40e11918a93e19ca44ca8893e3b56a8ec8", "html_url": "https://github.com/rust-lang/rust/commit/50bb7a40e11918a93e19ca44ca8893e3b56a8ec8"}], "stats": {"total": 136, "additions": 93, "deletions": 43}, "files": [{"sha": "1a5515530ae9fc942c36f38688cf965a8dc7b3ab", "filename": "compiler/rustc_lint/src/unused.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/243496e1299bc6dddb3824a91f026da34f732199/compiler%2Frustc_lint%2Fsrc%2Funused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/243496e1299bc6dddb3824a91f026da34f732199/compiler%2Frustc_lint%2Fsrc%2Funused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Funused.rs?ref=243496e1299bc6dddb3824a91f026da34f732199", "patch": "@@ -9,7 +9,7 @@ use rustc_hir::def::{DefKind, Res};\n use rustc_hir::def_id::DefId;\n use rustc_infer::traits::util::elaborate_predicates_with_span;\n use rustc_middle::ty::adjustment;\n-use rustc_middle::ty::{self, Ty};\n+use rustc_middle::ty::{self, DefIdTree, Ty};\n use rustc_span::symbol::Symbol;\n use rustc_span::symbol::{kw, sym};\n use rustc_span::{BytePos, Span};\n@@ -93,6 +93,18 @@ impl<'tcx> LateLintPass<'tcx> for UnusedResults {\n             return;\n         }\n \n+        if let hir::ExprKind::Match(await_expr, _arms, hir::MatchSource::AwaitDesugar) = expr.kind\n+            && let ty = cx.typeck_results().expr_ty(&await_expr)\n+            && let ty::Opaque(def_id, _) = ty.kind()\n+            && cx.tcx.ty_is_opaque_future(ty)\n+            && let parent = cx.tcx.parent(*def_id)\n+            && check_must_use_def(cx, parent, expr.span, \"awaited future returned by \", \"\")\n+        {\n+            // We have a bare `foo().await;` on an opaque type from an async function that was\n+            // annotated with `#[must_use]`.\n+            return;\n+        }\n+\n         let ty = cx.typeck_results().expr_ty(&expr);\n         let type_permits_lack_of_use = check_must_use_ty(cx, ty, &expr, expr.span, \"\", \"\", 1);\n "}, {"sha": "e0da0096c4e1e181625f7c846671c0c3b4333ed4", "filename": "compiler/rustc_passes/src/check_attr.rs", "status": "modified", "additions": 2, "deletions": 12, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/243496e1299bc6dddb3824a91f026da34f732199/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/243496e1299bc6dddb3824a91f026da34f732199/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs?ref=243496e1299bc6dddb3824a91f026da34f732199", "patch": "@@ -139,7 +139,7 @@ impl CheckAttrVisitor<'_> {\n                 sym::collapse_debuginfo => self.check_collapse_debuginfo(attr, span, target),\n                 sym::const_trait => self.check_const_trait(attr, span, target),\n                 sym::must_not_suspend => self.check_must_not_suspend(&attr, span, target),\n-                sym::must_use => self.check_must_use(hir_id, &attr, span, target),\n+                sym::must_use => self.check_must_use(hir_id, &attr, target),\n                 sym::rustc_pass_by_value => self.check_pass_by_value(&attr, span, target),\n                 sym::rustc_allow_incoherent_impl => {\n                     self.check_allow_incoherent_impl(&attr, span, target)\n@@ -1163,17 +1163,7 @@ impl CheckAttrVisitor<'_> {\n     }\n \n     /// Warns against some misuses of `#[must_use]`\n-    fn check_must_use(&self, hir_id: HirId, attr: &Attribute, span: Span, target: Target) -> bool {\n-        let node = self.tcx.hir().get(hir_id);\n-        if let Some(kind) = node.fn_kind() && let rustc_hir::IsAsync::Async = kind.asyncness() {\n-            self.tcx.emit_spanned_lint(\n-                UNUSED_ATTRIBUTES,\n-                hir_id,\n-                attr.span,\n-                errors::MustUseAsync { span }\n-            );\n-        }\n-\n+    fn check_must_use(&self, hir_id: HirId, attr: &Attribute, target: Target) -> bool {\n         if !matches!(\n             target,\n             Target::Fn"}, {"sha": "eda28dab27facb9e9d9591bc0c22a34828120d96", "filename": "src/test/ui/lint/unused/unused-async.rs", "status": "modified", "additions": 24, "deletions": 5, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/243496e1299bc6dddb3824a91f026da34f732199/src%2Ftest%2Fui%2Flint%2Funused%2Funused-async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/243496e1299bc6dddb3824a91f026da34f732199/src%2Ftest%2Fui%2Flint%2Funused%2Funused-async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Funused%2Funused-async.rs?ref=243496e1299bc6dddb3824a91f026da34f732199", "patch": "@@ -1,24 +1,43 @@\n // edition:2018\n-// run-pass\n-#![allow(dead_code)]\n+#![deny(unused_must_use)]\n+\n \n #[must_use]\n-//~^ WARNING `must_use`\n-async fn test() -> i32 {\n+async fn foo() -> i32 {\n     1\n }\n \n+#[must_use]\n+fn bar() -> impl std::future::Future<Output=i32> {\n+    async {\n+        42\n+    }\n+}\n+\n+async fn baz() -> i32 {\n+    0\n+}\n \n struct Wowee {}\n \n impl Wowee {\n     #[must_use]\n-    //~^ WARNING `must_use`\n     async fn test_method() -> i32 {\n         1\n     }\n }\n \n+async fn test() {\n+    foo(); //~ ERROR unused return value of `foo` that must be used\n+    //~^ ERROR unused implementer of `Future` that must be used\n+    foo().await; //~ ERROR unused awaited future returned by `foo` that must be used\n+    bar(); //~ ERROR unused return value of `bar` that must be used\n+    //~^ ERROR unused implementer of `Future` that must be used\n+    bar().await; //~ ERROR unused awaited future returned by `bar` that must be used\n+    baz(); //~ ERROR unused implementer of `Future` that must be used\n+    baz().await; // ok\n+}\n+\n /* FIXME(guswynn) update this test when async-fn-in-traits works\n trait Doer {\n     #[must_use]"}, {"sha": "ae284681720af901182e9458ca71e319887843ea", "filename": "src/test/ui/lint/unused/unused-async.stderr", "status": "modified", "additions": 54, "deletions": 25, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/243496e1299bc6dddb3824a91f026da34f732199/src%2Ftest%2Fui%2Flint%2Funused%2Funused-async.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/243496e1299bc6dddb3824a91f026da34f732199/src%2Ftest%2Fui%2Flint%2Funused%2Funused-async.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Funused%2Funused-async.stderr?ref=243496e1299bc6dddb3824a91f026da34f732199", "patch": "@@ -1,26 +1,55 @@\n-warning: `must_use` attribute on `async` functions applies to the anonymous `Future` returned by the function, not the value within\n-  --> $DIR/unused-async.rs:5:1\n-   |\n-LL |   #[must_use]\n-   |   ^^^^^^^^^^^\n-LL |\n-LL | / async fn test() -> i32 {\n-LL | |     1\n-LL | | }\n-   | |_- this attribute does nothing, the `Future`s returned by async functions are already `must_use`\n-   |\n-   = note: `#[warn(unused_attributes)]` on by default\n-\n-warning: `must_use` attribute on `async` functions applies to the anonymous `Future` returned by the function, not the value within\n-  --> $DIR/unused-async.rs:15:5\n-   |\n-LL |       #[must_use]\n-   |       ^^^^^^^^^^^\n-LL |\n-LL | /     async fn test_method() -> i32 {\n-LL | |         1\n-LL | |     }\n-   | |_____- this attribute does nothing, the `Future`s returned by async functions are already `must_use`\n-\n-warning: 2 warnings emitted\n+error: unused implementer of `Future` that must be used\n+  --> $DIR/unused-async.rs:31:5\n+   |\n+LL |     foo();\n+   |     ^^^^^\n+   |\n+note: the lint level is defined here\n+  --> $DIR/unused-async.rs:2:9\n+   |\n+LL | #![deny(unused_must_use)]\n+   |         ^^^^^^^^^^^^^^^\n+   = note: futures do nothing unless you `.await` or poll them\n+\n+error: unused return value of `foo` that must be used\n+  --> $DIR/unused-async.rs:31:5\n+   |\n+LL |     foo();\n+   |     ^^^^^\n+\n+error: unused awaited future returned by `foo` that must be used\n+  --> $DIR/unused-async.rs:33:5\n+   |\n+LL |     foo().await;\n+   |     ^^^^^^^^^^^\n+\n+error: unused implementer of `Future` that must be used\n+  --> $DIR/unused-async.rs:34:5\n+   |\n+LL |     bar();\n+   |     ^^^^^\n+   |\n+   = note: futures do nothing unless you `.await` or poll them\n+\n+error: unused return value of `bar` that must be used\n+  --> $DIR/unused-async.rs:34:5\n+   |\n+LL |     bar();\n+   |     ^^^^^\n+\n+error: unused awaited future returned by `bar` that must be used\n+  --> $DIR/unused-async.rs:36:5\n+   |\n+LL |     bar().await;\n+   |     ^^^^^^^^^^^\n+\n+error: unused implementer of `Future` that must be used\n+  --> $DIR/unused-async.rs:37:5\n+   |\n+LL |     baz();\n+   |     ^^^^^\n+   |\n+   = note: futures do nothing unless you `.await` or poll them\n+\n+error: aborting due to 7 previous errors\n "}]}