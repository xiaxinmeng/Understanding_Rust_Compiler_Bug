{"sha": "b0d46efd07dd6c0aa493b966e11cdd40a04c6b30", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIwZDQ2ZWZkMDdkZDZjMGFhNDkzYjk2NmUxMWNkZDQwYTA0YzZiMzA=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-06-15T12:20:04Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-06-15T12:20:04Z"}, "message": "Stop dropping object field mutability on the floor", "tree": {"sha": "e4dc338d10abba39e29e5780a3eea89f25d1bc21", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e4dc338d10abba39e29e5780a3eea89f25d1bc21"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b0d46efd07dd6c0aa493b966e11cdd40a04c6b30", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b0d46efd07dd6c0aa493b966e11cdd40a04c6b30", "html_url": "https://github.com/rust-lang/rust/commit/b0d46efd07dd6c0aa493b966e11cdd40a04c6b30", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b0d46efd07dd6c0aa493b966e11cdd40a04c6b30/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0ddade3d7a668be0397a2a79c21f632ff6986031", "url": "https://api.github.com/repos/rust-lang/rust/commits/0ddade3d7a668be0397a2a79c21f632ff6986031", "html_url": "https://github.com/rust-lang/rust/commit/0ddade3d7a668be0397a2a79c21f632ff6986031"}], "stats": {"total": 18, "additions": 6, "deletions": 12}, "files": [{"sha": "531b1b1588d642764fbf08f560deffbcb9e1ce43", "filename": "src/comp/front/ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b0d46efd07dd6c0aa493b966e11cdd40a04c6b30/src%2Fcomp%2Ffront%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0d46efd07dd6c0aa493b966e11cdd40a04c6b30/src%2Fcomp%2Ffront%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fast.rs?ref=b0d46efd07dd6c0aa493b966e11cdd40a04c6b30", "patch": "@@ -407,7 +407,7 @@ type _fn = rec(fn_decl decl,\n type method_ = rec(ident ident, _fn meth, def_id id, ann ann);\n type method = spanned[method_];\n \n-type obj_field = rec(@ty ty, ident ident, def_id id, ann ann);\n+type obj_field = rec(mutability mut, @ty ty, ident ident, def_id id, ann ann);\n type _obj = rec(vec[obj_field] fields,\n                 vec[@method] methods,\n                 option::t[@method] dtor);"}, {"sha": "f09d67209bc0b6a192fa0b585ad83dcb5edc0986", "filename": "src/comp/front/parser.rs", "status": "modified", "additions": 5, "deletions": 11, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b0d46efd07dd6c0aa493b966e11cdd40a04c6b30/src%2Fcomp%2Ffront%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0d46efd07dd6c0aa493b966e11cdd40a04c6b30/src%2Fcomp%2Ffront%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fparser.rs?ref=b0d46efd07dd6c0aa493b966e11cdd40a04c6b30", "patch": "@@ -855,15 +855,9 @@ fn parse_bottom_expr(&parser p) -> @ast::expr {\n         // Only make people type () if they're actually adding new fields\n         let option::t[vec[ast::obj_field]] fields = none;\n         if (p.peek() == token::LPAREN) {\n-            auto pf = parse_obj_field;\n-            expect(p, token::LPAREN);\n-\n-\n-            fields = some[vec[ast::obj_field]]\n-                (parse_seq_to_end[ast::obj_field] \n-                 (token::RPAREN,\n-                  some(token::COMMA),\n-                  pf, p));\n+            p.bump();\n+            fields = some(parse_seq_to_end(token::RPAREN, some(token::COMMA),\n+                                           parse_obj_field, p));\n         }\n \n         let vec[@ast::method] meths = [];\n@@ -1815,10 +1809,10 @@ fn parse_item_fn_or_iter(&parser p, ast::purity purity, ast::proto proto)\n \n \n fn parse_obj_field(&parser p) -> ast::obj_field {\n-    auto mut = parse_mutability(p); // TODO: store this, use it in typeck\n+    auto mut = parse_mutability(p);\n     auto ty = parse_ty(p);\n     auto ident = parse_value_ident(p);\n-    ret rec(ty=ty, ident=ident, id=p.next_def_id(), ann=p.get_ann());\n+    ret rec(mut=mut, ty=ty, ident=ident, id=p.next_def_id(), ann=p.get_ann());\n }\n \n fn parse_method(&parser p) -> @ast::method {"}]}