{"sha": "87edbea9da1d7dfd7e8c68e15f846f08d5f3a8c0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg3ZWRiZWE5ZGExZDdkZmQ3ZThjNjhlMTVmODQ2ZjA4ZDVmM2E4YzA=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2014-12-02T17:57:38Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2014-12-08T20:51:38Z"}, "message": "Add ability to configure recursion limit.\n\nFixes #19318.", "tree": {"sha": "6292fe21bf40e35ba3509ce7317790a8e0934bac", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6292fe21bf40e35ba3509ce7317790a8e0934bac"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/87edbea9da1d7dfd7e8c68e15f846f08d5f3a8c0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/87edbea9da1d7dfd7e8c68e15f846f08d5f3a8c0", "html_url": "https://github.com/rust-lang/rust/commit/87edbea9da1d7dfd7e8c68e15f846f08d5f3a8c0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/87edbea9da1d7dfd7e8c68e15f846f08d5f3a8c0/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2e996ffb46d4f9e58d111d7e0de21602ac92411f", "url": "https://api.github.com/repos/rust-lang/rust/commits/2e996ffb46d4f9e58d111d7e0de21602ac92411f", "html_url": "https://github.com/rust-lang/rust/commit/2e996ffb46d4f9e58d111d7e0de21602ac92411f"}], "stats": {"total": 91, "additions": 91, "deletions": 0}, "files": [{"sha": "2af6a4876299b69ba043106133179764f06d39ad", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/87edbea9da1d7dfd7e8c68e15f846f08d5f3a8c0/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87edbea9da1d7dfd7e8c68e15f846f08d5f3a8c0/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=87edbea9da1d7dfd7e8c68e15f846f08d5f3a8c0", "patch": "@@ -88,6 +88,7 @@ pub mod middle {\n     pub mod privacy;\n     pub mod reachable;\n     pub mod region;\n+    pub mod recursion_limit;\n     pub mod resolve;\n     pub mod resolve_lifetime;\n     pub mod stability;"}, {"sha": "a6a6703353cd1ca12911f72ea3b6fb101eab43c8", "filename": "src/librustc/middle/recursion_limit.rs", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/87edbea9da1d7dfd7e8c68e15f846f08d5f3a8c0/src%2Flibrustc%2Fmiddle%2Frecursion_limit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87edbea9da1d7dfd7e8c68e15f846f08d5f3a8c0/src%2Flibrustc%2Fmiddle%2Frecursion_limit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Frecursion_limit.rs?ref=87edbea9da1d7dfd7e8c68e15f846f08d5f3a8c0", "patch": "@@ -0,0 +1,39 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Recursion limit.\n+//\n+// There are various parts of the compiler that must impose arbitrary limits\n+// on how deeply they recurse to prevent stack overflow. Users can override\n+// this via an attribute on the crate like `#![recursion_limit(22)]`. This pass\n+// just peeks and looks for that attribute.\n+\n+use session::Session;\n+use syntax::ast;\n+use syntax::attr::AttrMetaMethods;\n+use std::str::FromStr;\n+\n+pub fn update_recursion_limit(sess: &Session, krate: &ast::Crate) {\n+    for attr in krate.attrs.iter() {\n+        if !attr.check_name(\"recursion_limit\") {\n+            continue;\n+        }\n+\n+        if let Some(s) = attr.value_str() {\n+            if let Some(n) = FromStr::from_str(s.get()) {\n+                sess.recursion_limit.set(n);\n+                return;\n+            }\n+        }\n+\n+        sess.span_err(attr.span, \"malformed recursion limit attribute, \\\n+                                  expected #![recursion_limit(\\\"N\\\")]\");\n+    }\n+}"}, {"sha": "749bed15e38e05cc05a4c293d35f667327f1fed3", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/87edbea9da1d7dfd7e8c68e15f846f08d5f3a8c0/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87edbea9da1d7dfd7e8c68e15f846f08d5f3a8c0/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=87edbea9da1d7dfd7e8c68e15f846f08d5f3a8c0", "patch": "@@ -180,6 +180,10 @@ pub fn phase_2_configure_and_expand(sess: &Session,\n         *sess.features.borrow_mut() = features;\n     });\n \n+    time(time_passes, \"recursion limit\", (), |_| {\n+        middle::recursion_limit::update_recursion_limit(sess, &krate);\n+    });\n+\n     // strip before expansion to allow macros to depend on\n     // configuration variables e.g/ in\n     //"}, {"sha": "35713f7cfa2bf3788541cb11756d91816b60041f", "filename": "src/test/compile-fail/recursion_limit.rs", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/87edbea9da1d7dfd7e8c68e15f846f08d5f3a8c0/src%2Ftest%2Fcompile-fail%2Frecursion_limit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87edbea9da1d7dfd7e8c68e15f846f08d5f3a8c0/src%2Ftest%2Fcompile-fail%2Frecursion_limit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Frecursion_limit.rs?ref=87edbea9da1d7dfd7e8c68e15f846f08d5f3a8c0", "patch": "@@ -0,0 +1,47 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test that the recursion limit can be changed. In this case, we have\n+// deeply nested types that will fail the `Send` check by overflow\n+// when the recursion limit is set very low.\n+\n+#![feature(macro_rules)]\n+#![allow(dead_code)]\n+#![recursion_limit=\"10\"]\n+\n+macro_rules! link {\n+    ($id:ident, $t:ty) => {\n+        enum $id { $id($t) }\n+    }\n+}\n+\n+link!(A,B)\n+link!(B,C)\n+link!(C,D)\n+link!(D,E)\n+link!(E,F)\n+link!(F,G)\n+link!(G,H)\n+link!(H,I)\n+link!(I,J)\n+link!(J,K)\n+link!(K,L)\n+link!(L,M)\n+link!(M,N)\n+\n+enum N { N(uint) }\n+\n+fn is_send<T:Send>() { }\n+\n+fn main() {\n+    is_send::<A>();\n+    //~^ ERROR not implemented\n+    //~^^ ERROR not implemented\n+}"}]}