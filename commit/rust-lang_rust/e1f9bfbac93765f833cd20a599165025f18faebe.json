{"sha": "e1f9bfbac93765f833cd20a599165025f18faebe", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUxZjliZmJhYzkzNzY1ZjgzM2NkMjBhNTk5MTY1MDI1ZjE4ZmFlYmU=", "commit": {"author": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2011-07-12T18:26:14Z"}, "committer": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2011-07-12T18:26:14Z"}, "message": "Add missing files\n\ngit add didn't, so this actually has the changes that should\nhave been in the previous commit", "tree": {"sha": "7b40e2349396928208e0aa35e7fa4ef9c8a32952", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7b40e2349396928208e0aa35e7fa4ef9c8a32952"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e1f9bfbac93765f833cd20a599165025f18faebe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e1f9bfbac93765f833cd20a599165025f18faebe", "html_url": "https://github.com/rust-lang/rust/commit/e1f9bfbac93765f833cd20a599165025f18faebe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e1f9bfbac93765f833cd20a599165025f18faebe/comments", "author": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "committer": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "21b94d57d5319e42f5a30818c88b95c95449864e", "url": "https://api.github.com/repos/rust-lang/rust/commits/21b94d57d5319e42f5a30818c88b95c95449864e", "html_url": "https://github.com/rust-lang/rust/commit/21b94d57d5319e42f5a30818c88b95c95449864e"}], "stats": {"total": 155, "additions": 44, "deletions": 111}, "files": [{"sha": "5d46e9ce82e34675d32f13a31bdb4ea6131521ca", "filename": "src/comp/middle/tstate/auxiliary.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e1f9bfbac93765f833cd20a599165025f18faebe/src%2Fcomp%2Fmiddle%2Ftstate%2Fauxiliary.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1f9bfbac93765f833cd20a599165025f18faebe/src%2Fcomp%2Fmiddle%2Ftstate%2Fauxiliary.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftstate%2Fauxiliary.rs?ref=e1f9bfbac93765f833cd20a599165025f18faebe", "patch": "@@ -8,6 +8,7 @@ import std::int;\n import std::uint;\n import syntax::ast::*;\n import syntax::codemap::span;\n+import syntax::visit;\n import util::common;\n import util::common::log_block;\n import std::map::new_int_hash;\n@@ -527,13 +528,7 @@ fn match_args(&fn_ctxt fcx, &pred_desc[] occs, &(@constr_arg_use)[] occ) ->\n         fn eq(&tup(ident, def_id) p, &tup(ident, def_id) q) -> bool {\n             ret p._1 == q._1;\n         }\n-\n-        // FIXME: Remove this vec->ivec conversion.\n-        let (@constr_arg_use)[] cau_ivec = ~[];\n-        for (@constr_arg_use cau in pd.node.args) {\n-            cau_ivec += ~[cau];\n-        }\n-        if (ty::args_eq(eq, cau_ivec, occ)) { ret pd.node.bit_num; }\n+        if (ty::args_eq(eq, pd.node.args, occ)) { ret pd.node.bit_num; }\n     }\n     fcx.ccx.tcx.sess.bug(\"match_args: no match for occurring args\");\n }\n@@ -1038,6 +1033,11 @@ fn op_to_oper_ty(init_op io) -> oper_type {\n         case (_)         { oper_assign }\n     }\n }\n+\n+// default function visitor\n+fn do_nothing[T](&_fn f, &ty_param[] tp, &span sp, &fn_ident i,\n+              node_id iid, &T cx, &visit::vt[T] v) {\n+}\n //\n // Local Variables:\n // mode: rust"}, {"sha": "3de5b683102250a97a5a7a8f6e0d91c1bdc2d63c", "filename": "src/comp/middle/tstate/ck.rs", "status": "modified", "additions": 24, "deletions": 34, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/e1f9bfbac93765f833cd20a599165025f18faebe/src%2Fcomp%2Fmiddle%2Ftstate%2Fck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1f9bfbac93765f833cd20a599165025f18faebe/src%2Fcomp%2Fmiddle%2Ftstate%2Fck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftstate%2Fck.rs?ref=e1f9bfbac93765f833cd20a599165025f18faebe", "patch": "@@ -17,7 +17,7 @@ import ast::crate;\n import ast::return;\n import ast::noreturn;\n import ast::expr;\n-import syntax::walk;\n+import syntax::visit;\n import syntax::codemap::span;\n import middle::ty::type_is_nil;\n import middle::ty::ret_ty_of_fn;\n@@ -62,7 +62,9 @@ fn check_unused_vars(&fn_ctxt fcx) {\n     }\n }\n \n-fn check_states_expr(&fn_ctxt fcx, &@expr e) {\n+fn check_states_expr(&@expr e, &fn_ctxt fcx, &visit::vt[fn_ctxt] v) {\n+    visit::visit_expr(e, fcx, v);\n+\n     let precond prec = expr_precond(fcx.ccx, e);\n     let prestate pres = expr_prestate(fcx.ccx, e);\n \n@@ -90,7 +92,9 @@ fn check_states_expr(&fn_ctxt fcx, &@expr e) {\n     }\n }\n \n-fn check_states_stmt(&fn_ctxt fcx, &@stmt s) {\n+fn check_states_stmt(&@stmt s, &fn_ctxt fcx, &visit::vt[fn_ctxt] v) {\n+    visit::visit_stmt(s, fcx, v);\n+\n     auto a = stmt_to_ann(fcx.ccx, *s);\n     let precond prec = ann_precond(a);\n     let prestate pres = ann_prestate(a);\n@@ -126,24 +130,13 @@ fn check_states_against_conditions(&fn_ctxt fcx, &_fn f,\n        because we want the smallest possible erroneous statement\n        or expression. */\n \n-    let @mutable bool keepgoing = @mutable true;\n-    \n-    /* TODO probably should use visit instead */\n-\n-    fn quit(@mutable bool keepgoing, &@ast::item i) {\n-        *keepgoing = false;\n-    }\n-    fn kg(@mutable bool keepgoing) -> bool { \n-        ret *keepgoing;\n-    }\n+    auto visitor = visit::default_visitor[fn_ctxt]();\n \n-    auto v = rec (visit_stmt_post=bind check_states_stmt(fcx, _),\n-                  visit_expr_post=bind check_states_expr(fcx, _),\n-                  visit_item_pre=bind quit(keepgoing, _),\n-                  keep_going=bind kg(keepgoing)\n-                  with walk::default_visitor());\n-\n-    walk::walk_fn(v, f, tps, sp, i, id);\n+    visitor = @rec(visit_stmt=check_states_stmt,\n+                 visit_expr=check_states_expr,\n+                 visit_fn=do_nothing\n+                 with *visitor);\n+    visit::visit_fn(f, tps, sp, i, id, fcx, visit::mk_vt(visitor));\n \n     /* Check that the return value is initialized */\n     auto post = aux::block_poststate(fcx.ccx, f.body);\n@@ -189,10 +182,12 @@ fn check_fn_states(&fn_ctxt fcx, &_fn f, &ast::ty_param[] tps,\n     check_states_against_conditions(fcx, f, tps, id, sp, i);\n }\n \n-fn fn_states(&crate_ctxt ccx, &_fn f, &ast::ty_param[] tps,\n-             &span sp, &fn_ident i, node_id id) {\n+fn fn_states(&_fn f, &ast::ty_param[] tps,\n+             &span sp, &fn_ident i, node_id id, &crate_ctxt ccx,\n+             &visit::vt[crate_ctxt] v) {\n+    visit::visit_fn(f, tps, sp, i, id, ccx, v);\n     /* Look up the var-to-bit-num map for this function */\n-\n+    \n     assert (ccx.fm.contains_key(id));\n     auto f_info = ccx.fm.get(id);\n     auto name = option::from_maybe(\"anon\", i);\n@@ -210,19 +205,14 @@ fn check_crate(ty::ctxt cx, @crate crate) {\n     annotate_crate(ccx, *crate);\n     /* Compute the pre and postcondition for every subexpression */\n \n-    auto do_pre_post = walk::default_visitor();\n-    do_pre_post =\n-        rec(visit_fn_post=bind fn_pre_post(ccx, _, _, _, _, _)\n-            with do_pre_post);\n-    walk::walk_crate(do_pre_post, *crate);\n+    auto vtor = visit::default_visitor[crate_ctxt]();\n+    vtor = @rec(visit_fn=fn_pre_post with *vtor);\n+    visit::visit_crate(*crate, ccx, visit::mk_vt(vtor));\n+\n     /* Check the pre- and postcondition against the pre- and poststate\n        for every expression */\n-\n-    auto do_states = walk::default_visitor();\n-    do_states =\n-        rec(visit_fn_post=bind fn_states(ccx, _, _, _, _, _)\n-            with do_states);\n-    walk::walk_crate(do_states, *crate);\n+    vtor = @rec(visit_fn=fn_states with *vtor);\n+    visit::visit_crate(*crate, ccx, visit::mk_vt(vtor));\n }\n //\n // Local Variables:"}, {"sha": "8737cbdfb3bc545da3b66b138d386681e8708910", "filename": "src/comp/middle/tstate/collect_locals.rs", "status": "modified", "additions": 1, "deletions": 16, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/e1f9bfbac93765f833cd20a599165025f18faebe/src%2Fcomp%2Fmiddle%2Ftstate%2Fcollect_locals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1f9bfbac93765f833cd20a599165025f18faebe/src%2Fcomp%2Fmiddle%2Ftstate%2Fcollect_locals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftstate%2Fcollect_locals.rs?ref=e1f9bfbac93765f833cd20a599165025f18faebe", "patch": "@@ -9,18 +9,7 @@ import syntax::visit;\n import walk::walk_crate;\n import walk::walk_fn;\n import walk::ast_visitor;\n-import aux::cinit;\n-import aux::ninit;\n-import aux::npred;\n-import aux::cpred;\n-import aux::constraint;\n-import aux::fn_info;\n-import aux::crate_ctxt;\n-import aux::num_constraints;\n-import aux::constr_map;\n-import aux::expr_to_constr;\n-import aux::constraints_expr;\n-import aux::node_id_to_def_strict;\n+import aux::*;\n import std::map::new_int_hash;\n import util::common::new_def_hash;\n import syntax::codemap::span;\n@@ -63,10 +52,6 @@ fn collect_pred(&@expr e, &ctxt cx, &visit::vt[ctxt] v) {\n     // visit subexpressions\n     visit::visit_expr(e, cx, v);\n }\n-\n-fn do_nothing(&_fn f, &ty_param[] tp, &span sp, &fn_ident i,\n-              node_id iid, &ctxt cx, &visit::vt[ctxt] v) {\n-}\n  \n fn find_locals(&ty::ctxt tcx, &_fn f, &ty_param[] tps, &span sp, &fn_ident i,\n                node_id id) -> ctxt {"}, {"sha": "1444a70deaff5895803c2090956619af3e738a03", "filename": "src/comp/middle/tstate/pre_post_conditions.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e1f9bfbac93765f833cd20a599165025f18faebe/src%2Fcomp%2Fmiddle%2Ftstate%2Fpre_post_conditions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1f9bfbac93765f833cd20a599165025f18faebe/src%2Fcomp%2Fmiddle%2Ftstate%2Fpre_post_conditions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftstate%2Fpre_post_conditions.rs?ref=e1f9bfbac93765f833cd20a599165025f18faebe", "patch": "@@ -32,6 +32,7 @@ import bitvectors::relax_precond_block;\n import bitvectors::gen;\n import tritv::tritv_clone;\n import syntax::ast::*;\n+import syntax::visit;\n import std::map::new_int_hash;\n import util::common::new_def_hash;\n import util::common::log_expr;\n@@ -719,8 +720,10 @@ fn find_pre_post_fn(&fn_ctxt fcx, &_fn f) {\n     }\n }\n \n-fn fn_pre_post(crate_ctxt ccx, &_fn f, &ty_param[] tps,\n-               &span sp, &fn_ident i, node_id id) {\n+fn fn_pre_post(&_fn f, &ty_param[] tps,\n+               &span sp, &fn_ident i, node_id id, &crate_ctxt ccx,\n+               &visit::vt[crate_ctxt] v) {\n+    visit::visit_fn(f, tps, sp, i, id, ccx, v);\n     assert (ccx.fm.contains_key(id));\n     auto fcx = rec(enclosing=ccx.fm.get(id), id=id,\n                    name=fn_ident_to_string(id, i), ccx=ccx);"}, {"sha": "40521232180bdbc136b2356069acb7a617baad6b", "filename": "src/comp/middle/tstate/states.rs", "status": "modified", "additions": 7, "deletions": 52, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/e1f9bfbac93765f833cd20a599165025f18faebe/src%2Fcomp%2Fmiddle%2Ftstate%2Fstates.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1f9bfbac93765f833cd20a599165025f18faebe/src%2Fcomp%2Fmiddle%2Ftstate%2Fstates.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftstate%2Fstates.rs?ref=e1f9bfbac93765f833cd20a599165025f18faebe", "patch": "@@ -24,52 +24,6 @@ import tstate::ann::ts_ann;\n import tstate::ann::set_prestate;\n import tstate::ann::set_poststate;\n import aux::*;\n-/*\n-import aux::crate_ctxt;\n-import aux::fn_ctxt;\n-import aux::num_constraints;\n-import aux::expr_pp;\n-import aux::stmt_pp;\n-import aux::block_pp;\n-import aux::set_pre_and_post;\n-import aux::expr_prestate;\n-import aux::expr_precond;\n-import aux::expr_postcond;\n-import aux::stmt_poststate;\n-import aux::expr_poststate;\n-import aux::block_prestate;\n-import aux::block_poststate;\n-import aux::block_precond;\n-import aux::block_postcond;\n-import aux::fn_info;\n-import aux::log_pp;\n-import aux::log_pp_err;\n-import aux::extend_prestate_ann;\n-import aux::extend_poststate_ann;\n-import aux::set_prestate_ann;\n-import aux::set_poststate_ann;\n-import aux::pure_exp;\n-import aux::log_tritv;\n-import aux::log_tritv_err;\n-import aux::stmt_to_ann;\n-import aux::log_states;\n-import aux::log_states_err;\n-import aux::block_states;\n-import aux::controlflow_expr;\n-import aux::node_id_to_def;\n-import aux::expr_to_constr;\n-import aux::ninit;\n-import aux::npred;\n-import aux::path_to_ident;\n-import aux::if_ty;\n-import aux::if_check;\n-import aux::plain_if;\n-import aux::forget_in_poststate;\n-import aux::forget_in_poststate_still_init;\n-import aux::copy_in_poststate;\n-import aux::copy_in_poststate_two;\n-import aux::local_node_id_to_def;\n-*/\n import tritv::tritv_clone;\n import tritv::tritv_set;\n import tritv::ttrue;\n@@ -229,7 +183,13 @@ fn find_pre_post_state_loop(&fn_ctxt fcx, prestate pres, &@local l,\n \n     auto changed = set_prestate_ann(fcx.ccx, id, loop_pres) |\n         find_pre_post_state_expr(fcx, pres, index);\n-        find_pre_post_state_block(fcx, expr_poststate(fcx.ccx, index), body);\n+\n+    // Make sure the index var is considered initialized\n+    // in the body\n+    auto index_post = tritv_clone(expr_poststate(fcx.ccx, index));\n+    set_in_poststate_ident(fcx, l.node.id, l.node.ident, index_post);\n+\n+    changed |= find_pre_post_state_block(fcx, index_post, body);\n \n     if (has_nonlocal_exits(body)) { \n         // See [Break-unsound]\n@@ -238,11 +198,6 @@ fn find_pre_post_state_loop(&fn_ctxt fcx, prestate pres, &@local l,\n     else {\n         auto res_p = intersect_states(expr_poststate(fcx.ccx, index),\n                                       block_poststate(fcx.ccx, body));\n-    /*\n-    auto res_p =\n-        intersect_postconds([expr_poststate(fcx.ccx, index),\n-        block_poststate(fcx.ccx, body)]); */\n-\n         ret changed | set_poststate_ann(fcx.ccx, id, res_p);\n     }\n }"}]}