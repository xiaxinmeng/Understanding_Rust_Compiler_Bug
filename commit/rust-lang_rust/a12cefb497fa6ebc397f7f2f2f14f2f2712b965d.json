{"sha": "a12cefb497fa6ebc397f7f2f2f14f2f2712b965d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmExMmNlZmI0OTdmYTZlYmMzOTdmN2YyZjJmMTRmMmYyNzEyYjk2NWQ=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2017-10-03T13:34:52Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2017-10-04T10:47:40Z"}, "message": "Move E0507 diagnostic into mod borrowck_errors shared between ast- and mir-borrowck.\n\n(Had to modify signature of `report_cannot_move_out_of` slightly to\nsatisfy requirements of newly added `fn cannot_move_out_of` method.)", "tree": {"sha": "87cea05fcce216a97fa036709aab821aad923ac5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/87cea05fcce216a97fa036709aab821aad923ac5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a12cefb497fa6ebc397f7f2f2f14f2f2712b965d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a12cefb497fa6ebc397f7f2f2f14f2f2712b965d", "html_url": "https://github.com/rust-lang/rust/commit/a12cefb497fa6ebc397f7f2f2f14f2f2712b965d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a12cefb497fa6ebc397f7f2f2f14f2f2712b965d/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eabef0608b030ca8844545837967b29ca4a058b7", "url": "https://api.github.com/repos/rust-lang/rust/commits/eabef0608b030ca8844545837967b29ca4a058b7", "html_url": "https://github.com/rust-lang/rust/commit/eabef0608b030ca8844545837967b29ca4a058b7"}], "stats": {"total": 279, "additions": 143, "deletions": 136}, "files": [{"sha": "b56e7e1d72e3263248a494aff74dd1a0e03695b3", "filename": "src/librustc_borrowck/borrowck/gather_loans/move_error.rs", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a12cefb497fa6ebc397f7f2f2f14f2f2712b965d/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmove_error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a12cefb497fa6ebc397f7f2f2f14f2f2712b965d/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmove_error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmove_error.rs?ref=a12cefb497fa6ebc397f7f2f2f14f2f2712b965d", "patch": "@@ -14,6 +14,7 @@ use rustc::middle::mem_categorization::Categorization;\n use rustc::middle::mem_categorization::NoteClosureEnv;\n use rustc::middle::mem_categorization::InteriorOffsetKind as Kind;\n use rustc::ty;\n+use rustc_mir::util::borrowck_errors::{BorrowckErrors, Origin};\n use syntax::ast;\n use syntax_pos;\n use errors::DiagnosticBuilder;\n@@ -134,24 +135,17 @@ fn group_errors_with_same_origin<'tcx>(errors: &Vec<MoveError<'tcx>>)\n }\n \n // (keep in sync with gather_moves::check_and_get_illegal_move_origin )\n-fn report_cannot_move_out_of<'a, 'tcx>(bccx: &BorrowckCtxt<'a, 'tcx>,\n+fn report_cannot_move_out_of<'a, 'tcx>(bccx: &'a BorrowckCtxt<'a, 'tcx>,\n                                        move_from: mc::cmt<'tcx>)\n                                        -> DiagnosticBuilder<'a> {\n     match move_from.cat {\n         Categorization::Deref(_, mc::BorrowedPtr(..)) |\n         Categorization::Deref(_, mc::Implicit(..)) |\n         Categorization::Deref(_, mc::UnsafePtr(..)) |\n         Categorization::StaticItem => {\n-            let mut err = struct_span_err!(bccx, move_from.span, E0507,\n-                             \"cannot move out of {}\",\n-                             move_from.descriptive_string(bccx.tcx));\n-            err.span_label(\n-                move_from.span,\n-                format!(\"cannot move out of {}\", move_from.descriptive_string(bccx.tcx))\n-                );\n-            err\n+            bccx.cannot_move_out_of(\n+                move_from.span, &move_from.descriptive_string(bccx.tcx), Origin::Ast)\n         }\n-\n         Categorization::Interior(ref b, mc::InteriorElement(ik)) => {\n             let type_name = match (&b.ty.sty, ik) {\n                 (&ty::TyArray(_, _), Kind::Index) => \"array\","}, {"sha": "8fd17943c3a48a9302c5164b437043539e95b8f3", "filename": "src/librustc_borrowck/diagnostics.rs", "status": "modified", "additions": 0, "deletions": 126, "changes": 126, "blob_url": "https://github.com/rust-lang/rust/blob/a12cefb497fa6ebc397f7f2f2f14f2f2712b965d/src%2Flibrustc_borrowck%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a12cefb497fa6ebc397f7f2f2f14f2f2712b965d/src%2Flibrustc_borrowck%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fdiagnostics.rs?ref=a12cefb497fa6ebc397f7f2f2f14f2f2712b965d", "patch": "@@ -317,132 +317,6 @@ fn main() {\n ```\n \"##,\n \n-E0507: r##\"\n-You tried to move out of a value which was borrowed. Erroneous code example:\n-\n-```compile_fail,E0507\n-use std::cell::RefCell;\n-\n-struct TheDarkKnight;\n-\n-impl TheDarkKnight {\n-    fn nothing_is_true(self) {}\n-}\n-\n-fn main() {\n-    let x = RefCell::new(TheDarkKnight);\n-\n-    x.borrow().nothing_is_true(); // error: cannot move out of borrowed content\n-}\n-```\n-\n-Here, the `nothing_is_true` method takes the ownership of `self`. However,\n-`self` cannot be moved because `.borrow()` only provides an `&TheDarkKnight`,\n-which is a borrow of the content owned by the `RefCell`. To fix this error,\n-you have three choices:\n-\n-* Try to avoid moving the variable.\n-* Somehow reclaim the ownership.\n-* Implement the `Copy` trait on the type.\n-\n-Examples:\n-\n-```\n-use std::cell::RefCell;\n-\n-struct TheDarkKnight;\n-\n-impl TheDarkKnight {\n-    fn nothing_is_true(&self) {} // First case, we don't take ownership\n-}\n-\n-fn main() {\n-    let x = RefCell::new(TheDarkKnight);\n-\n-    x.borrow().nothing_is_true(); // ok!\n-}\n-```\n-\n-Or:\n-\n-```\n-use std::cell::RefCell;\n-\n-struct TheDarkKnight;\n-\n-impl TheDarkKnight {\n-    fn nothing_is_true(self) {}\n-}\n-\n-fn main() {\n-    let x = RefCell::new(TheDarkKnight);\n-    let x = x.into_inner(); // we get back ownership\n-\n-    x.nothing_is_true(); // ok!\n-}\n-```\n-\n-Or:\n-\n-```\n-use std::cell::RefCell;\n-\n-#[derive(Clone, Copy)] // we implement the Copy trait\n-struct TheDarkKnight;\n-\n-impl TheDarkKnight {\n-    fn nothing_is_true(self) {}\n-}\n-\n-fn main() {\n-    let x = RefCell::new(TheDarkKnight);\n-\n-    x.borrow().nothing_is_true(); // ok!\n-}\n-```\n-\n-Moving a member out of a mutably borrowed struct will also cause E0507 error:\n-\n-```compile_fail,E0507\n-struct TheDarkKnight;\n-\n-impl TheDarkKnight {\n-    fn nothing_is_true(self) {}\n-}\n-\n-struct Batcave {\n-    knight: TheDarkKnight\n-}\n-\n-fn main() {\n-    let mut cave = Batcave {\n-        knight: TheDarkKnight\n-    };\n-    let borrowed = &mut cave;\n-\n-    borrowed.knight.nothing_is_true(); // E0507\n-}\n-```\n-\n-It is fine only if you put something back. `mem::replace` can be used for that:\n-\n-```\n-# struct TheDarkKnight;\n-# impl TheDarkKnight { fn nothing_is_true(self) {} }\n-# struct Batcave { knight: TheDarkKnight }\n-use std::mem;\n-\n-let mut cave = Batcave {\n-    knight: TheDarkKnight\n-};\n-let borrowed = &mut cave;\n-\n-mem::replace(&mut borrowed.knight, TheDarkKnight).nothing_is_true(); // ok!\n-```\n-\n-You can find more information about borrowing in the rust-book:\n-http://doc.rust-lang.org/book/first-edition/references-and-borrowing.html\n-\"##,\n \n E0508: r##\"\n A value was moved out of a non-copy fixed-size array."}, {"sha": "69c2b27c1d7de27c7ee2a301ec7f43da59d2e0b1", "filename": "src/librustc_mir/diagnostics.rs", "status": "modified", "additions": 127, "deletions": 0, "changes": 127, "blob_url": "https://github.com/rust-lang/rust/blob/a12cefb497fa6ebc397f7f2f2f14f2f2712b965d/src%2Flibrustc_mir%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a12cefb497fa6ebc397f7f2f2f14f2f2712b965d/src%2Flibrustc_mir%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdiagnostics.rs?ref=a12cefb497fa6ebc397f7f2f2f14f2f2712b965d", "patch": "@@ -999,6 +999,133 @@ fn print_fancy_ref(fancy_ref: &FancyNum){\n ```\n \"##,\n \n+E0507: r##\"\n+You tried to move out of a value which was borrowed. Erroneous code example:\n+\n+```compile_fail,E0507\n+use std::cell::RefCell;\n+\n+struct TheDarkKnight;\n+\n+impl TheDarkKnight {\n+    fn nothing_is_true(self) {}\n+}\n+\n+fn main() {\n+    let x = RefCell::new(TheDarkKnight);\n+\n+    x.borrow().nothing_is_true(); // error: cannot move out of borrowed content\n+}\n+```\n+\n+Here, the `nothing_is_true` method takes the ownership of `self`. However,\n+`self` cannot be moved because `.borrow()` only provides an `&TheDarkKnight`,\n+which is a borrow of the content owned by the `RefCell`. To fix this error,\n+you have three choices:\n+\n+* Try to avoid moving the variable.\n+* Somehow reclaim the ownership.\n+* Implement the `Copy` trait on the type.\n+\n+Examples:\n+\n+```\n+use std::cell::RefCell;\n+\n+struct TheDarkKnight;\n+\n+impl TheDarkKnight {\n+    fn nothing_is_true(&self) {} // First case, we don't take ownership\n+}\n+\n+fn main() {\n+    let x = RefCell::new(TheDarkKnight);\n+\n+    x.borrow().nothing_is_true(); // ok!\n+}\n+```\n+\n+Or:\n+\n+```\n+use std::cell::RefCell;\n+\n+struct TheDarkKnight;\n+\n+impl TheDarkKnight {\n+    fn nothing_is_true(self) {}\n+}\n+\n+fn main() {\n+    let x = RefCell::new(TheDarkKnight);\n+    let x = x.into_inner(); // we get back ownership\n+\n+    x.nothing_is_true(); // ok!\n+}\n+```\n+\n+Or:\n+\n+```\n+use std::cell::RefCell;\n+\n+#[derive(Clone, Copy)] // we implement the Copy trait\n+struct TheDarkKnight;\n+\n+impl TheDarkKnight {\n+    fn nothing_is_true(self) {}\n+}\n+\n+fn main() {\n+    let x = RefCell::new(TheDarkKnight);\n+\n+    x.borrow().nothing_is_true(); // ok!\n+}\n+```\n+\n+Moving a member out of a mutably borrowed struct will also cause E0507 error:\n+\n+```compile_fail,E0507\n+struct TheDarkKnight;\n+\n+impl TheDarkKnight {\n+    fn nothing_is_true(self) {}\n+}\n+\n+struct Batcave {\n+    knight: TheDarkKnight\n+}\n+\n+fn main() {\n+    let mut cave = Batcave {\n+        knight: TheDarkKnight\n+    };\n+    let borrowed = &mut cave;\n+\n+    borrowed.knight.nothing_is_true(); // E0507\n+}\n+```\n+\n+It is fine only if you put something back. `mem::replace` can be used for that:\n+\n+```\n+# struct TheDarkKnight;\n+# impl TheDarkKnight { fn nothing_is_true(self) {} }\n+# struct Batcave { knight: TheDarkKnight }\n+use std::mem;\n+\n+let mut cave = Batcave {\n+    knight: TheDarkKnight\n+};\n+let borrowed = &mut cave;\n+\n+mem::replace(&mut borrowed.knight, TheDarkKnight).nothing_is_true(); // ok!\n+```\n+\n+You can find more information about borrowing in the rust-book:\n+http://doc.rust-lang.org/book/first-edition/references-and-borrowing.html\n+\"##,\n+\n }\n \n register_diagnostics! {"}, {"sha": "9330a93a41c3c5074b7fd459211d9000acb0aaec", "filename": "src/librustc_mir/util/borrowck_errors.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a12cefb497fa6ebc397f7f2f2f14f2f2712b965d/src%2Flibrustc_mir%2Futil%2Fborrowck_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a12cefb497fa6ebc397f7f2f2f14f2f2712b965d/src%2Flibrustc_mir%2Futil%2Fborrowck_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fborrowck_errors.rs?ref=a12cefb497fa6ebc397f7f2f2f14f2f2712b965d", "patch": "@@ -191,6 +191,18 @@ pub trait BorrowckErrors {\n     {\n         self.cannot_assign(span, &format!(\"immutable static item `{}`\", desc), o)\n     }\n+\n+    fn cannot_move_out_of(&self, move_from_span: Span, move_from_desc: &str, o: Origin)\n+                          -> DiagnosticBuilder\n+    {\n+        let mut err = struct_span_err!(self, move_from_span, E0507,\n+                                       \"cannot move out of {}{OGN}\",\n+                                       move_from_desc, OGN=o);\n+        err.span_label(\n+            move_from_span,\n+            format!(\"cannot move out of {}\", move_from_desc));\n+        err\n+    }\n }\n \n impl<'b, 'tcx, 'gcx> BorrowckErrors for TyCtxt<'b, 'tcx, 'gcx> {"}]}