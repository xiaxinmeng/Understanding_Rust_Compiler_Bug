{"sha": "3bd14c7bbee10aaff2466014ae1c2455010dfafe", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNiZDE0YzdiYmVlMTBhYWZmMjQ2NjAxNGFlMWMyNDU1MDEwZGZhZmU=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2020-11-18T17:45:16Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-02-19T16:51:56Z"}, "message": "Select caching strategy per query.\n\nThe per-Key choice was not used.", "tree": {"sha": "f6355d52dd7df25e88f96dea2a00b853b8b5891f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f6355d52dd7df25e88f96dea2a00b853b8b5891f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3bd14c7bbee10aaff2466014ae1c2455010dfafe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3bd14c7bbee10aaff2466014ae1c2455010dfafe", "html_url": "https://github.com/rust-lang/rust/commit/3bd14c7bbee10aaff2466014ae1c2455010dfafe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3bd14c7bbee10aaff2466014ae1c2455010dfafe/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6e4af4a2d19fe3a1e01c8acf23b6e3a4c0c6bd18", "url": "https://api.github.com/repos/rust-lang/rust/commits/6e4af4a2d19fe3a1e01c8acf23b6e3a4c0c6bd18", "html_url": "https://github.com/rust-lang/rust/commit/6e4af4a2d19fe3a1e01c8acf23b6e3a4c0c6bd18"}], "stats": {"total": 71, "additions": 1, "deletions": 70}, "files": [{"sha": "2f76237e8fb793e046db1b62fb3f61094ce64da9", "filename": "compiler/rustc_middle/src/ty/query/keys.rs", "status": "modified", "additions": 0, "deletions": 69, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/3bd14c7bbee10aaff2466014ae1c2455010dfafe/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fkeys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bd14c7bbee10aaff2466014ae1c2455010dfafe/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fkeys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fkeys.rs?ref=3bd14c7bbee10aaff2466014ae1c2455010dfafe", "patch": "@@ -6,15 +6,12 @@ use crate::ty::fast_reject::SimplifiedType;\n use crate::ty::subst::{GenericArg, SubstsRef};\n use crate::ty::{self, Ty, TyCtxt};\n use rustc_hir::def_id::{CrateNum, DefId, LocalDefId, LOCAL_CRATE};\n-use rustc_query_system::query::DefaultCacheSelector;\n use rustc_span::symbol::{Ident, Symbol};\n use rustc_span::{Span, DUMMY_SP};\n \n /// The `Key` trait controls what types can legally be used as the key\n /// for a query.\n pub trait Key {\n-    type CacheSelector;\n-\n     /// Given an instance of this key, what crate is it referring to?\n     /// This is used to find the provider.\n     fn query_crate(&self) -> CrateNum;\n@@ -25,8 +22,6 @@ pub trait Key {\n }\n \n impl<'tcx> Key for ty::InstanceDef<'tcx> {\n-    type CacheSelector = DefaultCacheSelector;\n-\n     fn query_crate(&self) -> CrateNum {\n         LOCAL_CRATE\n     }\n@@ -37,8 +32,6 @@ impl<'tcx> Key for ty::InstanceDef<'tcx> {\n }\n \n impl<'tcx> Key for ty::Instance<'tcx> {\n-    type CacheSelector = DefaultCacheSelector;\n-\n     fn query_crate(&self) -> CrateNum {\n         LOCAL_CRATE\n     }\n@@ -49,8 +42,6 @@ impl<'tcx> Key for ty::Instance<'tcx> {\n }\n \n impl<'tcx> Key for mir::interpret::GlobalId<'tcx> {\n-    type CacheSelector = DefaultCacheSelector;\n-\n     fn query_crate(&self) -> CrateNum {\n         self.instance.query_crate()\n     }\n@@ -61,8 +52,6 @@ impl<'tcx> Key for mir::interpret::GlobalId<'tcx> {\n }\n \n impl<'tcx> Key for mir::interpret::LitToConstInput<'tcx> {\n-    type CacheSelector = DefaultCacheSelector;\n-\n     fn query_crate(&self) -> CrateNum {\n         LOCAL_CRATE\n     }\n@@ -73,8 +62,6 @@ impl<'tcx> Key for mir::interpret::LitToConstInput<'tcx> {\n }\n \n impl Key for CrateNum {\n-    type CacheSelector = DefaultCacheSelector;\n-\n     fn query_crate(&self) -> CrateNum {\n         *self\n     }\n@@ -84,8 +71,6 @@ impl Key for CrateNum {\n }\n \n impl Key for LocalDefId {\n-    type CacheSelector = DefaultCacheSelector;\n-\n     fn query_crate(&self) -> CrateNum {\n         self.to_def_id().query_crate()\n     }\n@@ -95,8 +80,6 @@ impl Key for LocalDefId {\n }\n \n impl Key for DefId {\n-    type CacheSelector = DefaultCacheSelector;\n-\n     fn query_crate(&self) -> CrateNum {\n         self.krate\n     }\n@@ -106,8 +89,6 @@ impl Key for DefId {\n }\n \n impl Key for ty::WithOptConstParam<LocalDefId> {\n-    type CacheSelector = DefaultCacheSelector;\n-\n     fn query_crate(&self) -> CrateNum {\n         self.did.query_crate()\n     }\n@@ -117,8 +98,6 @@ impl Key for ty::WithOptConstParam<LocalDefId> {\n }\n \n impl Key for (DefId, DefId) {\n-    type CacheSelector = DefaultCacheSelector;\n-\n     fn query_crate(&self) -> CrateNum {\n         self.0.krate\n     }\n@@ -128,8 +107,6 @@ impl Key for (DefId, DefId) {\n }\n \n impl Key for (ty::Instance<'tcx>, LocalDefId) {\n-    type CacheSelector = DefaultCacheSelector;\n-\n     fn query_crate(&self) -> CrateNum {\n         self.0.query_crate()\n     }\n@@ -139,8 +116,6 @@ impl Key for (ty::Instance<'tcx>, LocalDefId) {\n }\n \n impl Key for (DefId, LocalDefId) {\n-    type CacheSelector = DefaultCacheSelector;\n-\n     fn query_crate(&self) -> CrateNum {\n         self.0.krate\n     }\n@@ -150,8 +125,6 @@ impl Key for (DefId, LocalDefId) {\n }\n \n impl Key for (LocalDefId, DefId) {\n-    type CacheSelector = DefaultCacheSelector;\n-\n     fn query_crate(&self) -> CrateNum {\n         LOCAL_CRATE\n     }\n@@ -161,8 +134,6 @@ impl Key for (LocalDefId, DefId) {\n }\n \n impl Key for (DefId, Option<Ident>) {\n-    type CacheSelector = DefaultCacheSelector;\n-\n     fn query_crate(&self) -> CrateNum {\n         self.0.krate\n     }\n@@ -172,8 +143,6 @@ impl Key for (DefId, Option<Ident>) {\n }\n \n impl Key for (DefId, LocalDefId, Ident) {\n-    type CacheSelector = DefaultCacheSelector;\n-\n     fn query_crate(&self) -> CrateNum {\n         self.0.krate\n     }\n@@ -183,8 +152,6 @@ impl Key for (DefId, LocalDefId, Ident) {\n }\n \n impl Key for (CrateNum, DefId) {\n-    type CacheSelector = DefaultCacheSelector;\n-\n     fn query_crate(&self) -> CrateNum {\n         self.0\n     }\n@@ -194,8 +161,6 @@ impl Key for (CrateNum, DefId) {\n }\n \n impl Key for (DefId, SimplifiedType) {\n-    type CacheSelector = DefaultCacheSelector;\n-\n     fn query_crate(&self) -> CrateNum {\n         self.0.krate\n     }\n@@ -205,8 +170,6 @@ impl Key for (DefId, SimplifiedType) {\n }\n \n impl<'tcx> Key for SubstsRef<'tcx> {\n-    type CacheSelector = DefaultCacheSelector;\n-\n     fn query_crate(&self) -> CrateNum {\n         LOCAL_CRATE\n     }\n@@ -216,8 +179,6 @@ impl<'tcx> Key for SubstsRef<'tcx> {\n }\n \n impl<'tcx> Key for (DefId, SubstsRef<'tcx>) {\n-    type CacheSelector = DefaultCacheSelector;\n-\n     fn query_crate(&self) -> CrateNum {\n         self.0.krate\n     }\n@@ -232,8 +193,6 @@ impl<'tcx> Key\n         (ty::WithOptConstParam<DefId>, SubstsRef<'tcx>),\n     )\n {\n-    type CacheSelector = DefaultCacheSelector;\n-\n     fn query_crate(&self) -> CrateNum {\n         (self.0).0.did.krate\n     }\n@@ -243,8 +202,6 @@ impl<'tcx> Key\n }\n \n impl<'tcx> Key for (LocalDefId, DefId, SubstsRef<'tcx>) {\n-    type CacheSelector = DefaultCacheSelector;\n-\n     fn query_crate(&self) -> CrateNum {\n         LOCAL_CRATE\n     }\n@@ -254,8 +211,6 @@ impl<'tcx> Key for (LocalDefId, DefId, SubstsRef<'tcx>) {\n }\n \n impl<'tcx> Key for (ty::ParamEnv<'tcx>, ty::PolyTraitRef<'tcx>) {\n-    type CacheSelector = DefaultCacheSelector;\n-\n     fn query_crate(&self) -> CrateNum {\n         self.1.def_id().krate\n     }\n@@ -265,8 +220,6 @@ impl<'tcx> Key for (ty::ParamEnv<'tcx>, ty::PolyTraitRef<'tcx>) {\n }\n \n impl<'tcx> Key for (&'tcx ty::Const<'tcx>, mir::Field) {\n-    type CacheSelector = DefaultCacheSelector;\n-\n     fn query_crate(&self) -> CrateNum {\n         LOCAL_CRATE\n     }\n@@ -276,8 +229,6 @@ impl<'tcx> Key for (&'tcx ty::Const<'tcx>, mir::Field) {\n }\n \n impl<'tcx> Key for ty::PolyTraitRef<'tcx> {\n-    type CacheSelector = DefaultCacheSelector;\n-\n     fn query_crate(&self) -> CrateNum {\n         self.def_id().krate\n     }\n@@ -287,8 +238,6 @@ impl<'tcx> Key for ty::PolyTraitRef<'tcx> {\n }\n \n impl<'tcx> Key for GenericArg<'tcx> {\n-    type CacheSelector = DefaultCacheSelector;\n-\n     fn query_crate(&self) -> CrateNum {\n         LOCAL_CRATE\n     }\n@@ -298,8 +247,6 @@ impl<'tcx> Key for GenericArg<'tcx> {\n }\n \n impl<'tcx> Key for &'tcx ty::Const<'tcx> {\n-    type CacheSelector = DefaultCacheSelector;\n-\n     fn query_crate(&self) -> CrateNum {\n         LOCAL_CRATE\n     }\n@@ -309,8 +256,6 @@ impl<'tcx> Key for &'tcx ty::Const<'tcx> {\n }\n \n impl<'tcx> Key for Ty<'tcx> {\n-    type CacheSelector = DefaultCacheSelector;\n-\n     fn query_crate(&self) -> CrateNum {\n         LOCAL_CRATE\n     }\n@@ -320,8 +265,6 @@ impl<'tcx> Key for Ty<'tcx> {\n }\n \n impl<'tcx> Key for &'tcx ty::List<ty::Predicate<'tcx>> {\n-    type CacheSelector = DefaultCacheSelector;\n-\n     fn query_crate(&self) -> CrateNum {\n         LOCAL_CRATE\n     }\n@@ -331,8 +274,6 @@ impl<'tcx> Key for &'tcx ty::List<ty::Predicate<'tcx>> {\n }\n \n impl<'tcx> Key for ty::ParamEnv<'tcx> {\n-    type CacheSelector = DefaultCacheSelector;\n-\n     fn query_crate(&self) -> CrateNum {\n         LOCAL_CRATE\n     }\n@@ -342,8 +283,6 @@ impl<'tcx> Key for ty::ParamEnv<'tcx> {\n }\n \n impl<'tcx, T: Key> Key for ty::ParamEnvAnd<'tcx, T> {\n-    type CacheSelector = DefaultCacheSelector;\n-\n     fn query_crate(&self) -> CrateNum {\n         self.value.query_crate()\n     }\n@@ -353,8 +292,6 @@ impl<'tcx, T: Key> Key for ty::ParamEnvAnd<'tcx, T> {\n }\n \n impl Key for Symbol {\n-    type CacheSelector = DefaultCacheSelector;\n-\n     fn query_crate(&self) -> CrateNum {\n         LOCAL_CRATE\n     }\n@@ -366,8 +303,6 @@ impl Key for Symbol {\n /// Canonical query goals correspond to abstract trait operations that\n /// are not tied to any crate in particular.\n impl<'tcx, T> Key for Canonical<'tcx, T> {\n-    type CacheSelector = DefaultCacheSelector;\n-\n     fn query_crate(&self) -> CrateNum {\n         LOCAL_CRATE\n     }\n@@ -378,8 +313,6 @@ impl<'tcx, T> Key for Canonical<'tcx, T> {\n }\n \n impl Key for (Symbol, u32, u32) {\n-    type CacheSelector = DefaultCacheSelector;\n-\n     fn query_crate(&self) -> CrateNum {\n         LOCAL_CRATE\n     }\n@@ -390,8 +323,6 @@ impl Key for (Symbol, u32, u32) {\n }\n \n impl<'tcx> Key for (DefId, Ty<'tcx>, SubstsRef<'tcx>, ty::ParamEnv<'tcx>) {\n-    type CacheSelector = DefaultCacheSelector;\n-\n     fn query_crate(&self) -> CrateNum {\n         LOCAL_CRATE\n     }"}, {"sha": "c1068528a1823e0ee098e5169bab894f9735f9e4", "filename": "compiler/rustc_middle/src/ty/query/plumbing.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3bd14c7bbee10aaff2466014ae1c2455010dfafe/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bd14c7bbee10aaff2466014ae1c2455010dfafe/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fplumbing.rs?ref=3bd14c7bbee10aaff2466014ae1c2455010dfafe", "patch": "@@ -263,7 +263,7 @@ macro_rules! is_eval_always {\n \n macro_rules! query_storage {\n     ([][$K:ty, $V:ty]) => {\n-        <<$K as Key>::CacheSelector as CacheSelector<$K, $V>>::Cache\n+        <DefaultCacheSelector as CacheSelector<$K, $V>>::Cache\n     };\n     ([storage($ty:ty) $($rest:tt)*][$K:ty, $V:ty]) => {\n         <$ty as CacheSelector<$K, $V>>::Cache"}]}