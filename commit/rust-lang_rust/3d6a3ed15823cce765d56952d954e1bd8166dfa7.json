{"sha": "3d6a3ed15823cce765d56952d954e1bd8166dfa7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNkNmEzZWQxNTgyM2NjZTc2NWQ1Njk1MmQ5NTRlMWJkODE2NmRmYTc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-08-25T07:36:52Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-08-25T07:36:52Z"}, "message": "Auto merge of #75364 - rylev:libpanic-abort-failfast, r=alexcrichton\n\nCall into fastfail on abort in libpanic_abort on Windows x86(_64)\n\nThis partially resolves #73215 though this is only for x86 targets. This code is directly lifted from [libstd](https://github.com/rust-lang/rust/blob/13290e83a6e20f3b408d177a9d64d8cf98fe4615/library/std/src/sys/windows/mod.rs#L315). `__fastfail` is the preferred way to abort a process on Windows as it will hook into debugger toolchains.\n\nOther platforms expose a `_rust_abort` symbol which wraps `std::sys::abort_internal`. This would also work on Windows, but is a slightly largely change as we'd need to make sure that the symbol is properly exposed to the linker. I'm inlining the call to the `__fastfail`, but the indirection through `rust_abort` might be a cleaner approach.\n\n A different instruction must be used on ARM architectures. I'd like to verify this works first before tackling ARM.", "tree": {"sha": "ef3e35a72345e28e38e2684d4d528dcc6e62956b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ef3e35a72345e28e38e2684d4d528dcc6e62956b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3d6a3ed15823cce765d56952d954e1bd8166dfa7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3d6a3ed15823cce765d56952d954e1bd8166dfa7", "html_url": "https://github.com/rust-lang/rust/commit/3d6a3ed15823cce765d56952d954e1bd8166dfa7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3d6a3ed15823cce765d56952d954e1bd8166dfa7/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c30341ddec0b99bb3bd8bb5fd8c8451778c78330", "url": "https://api.github.com/repos/rust-lang/rust/commits/c30341ddec0b99bb3bd8bb5fd8c8451778c78330", "html_url": "https://github.com/rust-lang/rust/commit/c30341ddec0b99bb3bd8bb5fd8c8451778c78330"}, {"sha": "b9b8b5c96b60789b6b7846a4036d3cbf2d393014", "url": "https://api.github.com/repos/rust-lang/rust/commits/b9b8b5c96b60789b6b7846a4036d3cbf2d393014", "html_url": "https://github.com/rust-lang/rust/commit/b9b8b5c96b60789b6b7846a4036d3cbf2d393014"}], "stats": {"total": 39, "additions": 21, "deletions": 18}, "files": [{"sha": "ccc067a3c943d2db477da89d238542d095dc08ed", "filename": "library/panic_abort/src/lib.rs", "status": "modified", "additions": 17, "deletions": 10, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/3d6a3ed15823cce765d56952d954e1bd8166dfa7/library%2Fpanic_abort%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d6a3ed15823cce765d56952d954e1bd8166dfa7/library%2Fpanic_abort%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fpanic_abort%2Fsrc%2Flib.rs?ref=3d6a3ed15823cce765d56952d954e1bd8166dfa7", "patch": "@@ -17,6 +17,7 @@\n #![feature(panic_runtime)]\n #![feature(staged_api)]\n #![feature(rustc_attrs)]\n+#![feature(llvm_asm)]\n \n use core::any::Any;\n \n@@ -26,16 +27,7 @@ pub unsafe extern \"C\" fn __rust_panic_cleanup(_: *mut u8) -> *mut (dyn Any + Sen\n     unreachable!()\n }\n \n-// \"Leak\" the payload and shim to the relevant abort on the platform in\n-// question.\n-//\n-// For Unix we just use `abort` from libc as it'll trigger debuggers, core\n-// dumps, etc, as one might expect. On Windows, however, the best option we have\n-// is the `__fastfail` intrinsics, but that's unfortunately not defined in LLVM,\n-// and the `RaiseFailFastException` function isn't available until Windows 7\n-// which would break compat with XP. For now just use `intrinsics::abort` which\n-// will kill us with an illegal instruction, which will do a good enough job for\n-// now hopefully.\n+// \"Leak\" the payload and shim to the relevant abort on the platform in question.\n #[rustc_std_internal_symbol]\n pub unsafe extern \"C\" fn __rust_start_panic(_payload: usize) -> u32 {\n     abort();\n@@ -55,6 +47,21 @@ pub unsafe extern \"C\" fn __rust_start_panic(_payload: usize) -> u32 {\n                 }\n                 __rust_abort();\n             }\n+        } else if #[cfg(all(windows, any(target_arch = \"x86\", target_arch = \"x86_64\")))] {\n+            // On Windows, use the processor-specific __fastfail mechanism. In Windows 8\n+            // and later, this will terminate the process immediately without running any\n+            // in-process exception handlers. In earlier versions of Windows, this\n+            // sequence of instructions will be treated as an access violation,\n+            // terminating the process but without necessarily bypassing all exception\n+            // handlers.\n+            //\n+            // https://docs.microsoft.com/en-us/cpp/intrinsics/fastfail\n+            //\n+            // Note: this is the same implementation as in libstd's `abort_internal`\n+            unsafe fn abort() -> ! {\n+                llvm_asm!(\"int $$0x29\" :: \"{ecx}\"(7) ::: volatile); // 7 is FAST_FAIL_FATAL_APP_EXIT\n+                core::intrinsics::unreachable();\n+            }\n         } else {\n             unsafe fn abort() -> ! {\n                 core::intrinsics::abort();"}, {"sha": "a0d5a7471d8af67a4a64c94d2a4477db249d7ac2", "filename": "library/std/src/sys/windows/mod.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3d6a3ed15823cce765d56952d954e1bd8166dfa7/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d6a3ed15823cce765d56952d954e1bd8166dfa7/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fmod.rs?ref=3d6a3ed15823cce765d56952d954e1bd8166dfa7", "patch": "@@ -300,14 +300,10 @@ pub fn dur2timeout(dur: Duration) -> c::DWORD {\n         .unwrap_or(c::INFINITE)\n }\n \n-// On Windows, use the processor-specific __fastfail mechanism.  In Windows 8\n-// and later, this will terminate the process immediately without running any\n-// in-process exception handlers.  In earlier versions of Windows, this\n-// sequence of instructions will be treated as an access violation,\n-// terminating the process but without necessarily bypassing all exception\n-// handlers.\n-//\n-// https://docs.microsoft.com/en-us/cpp/intrinsics/fastfail\n+/// Use `__fastfail` to abort the process\n+///\n+/// This is the same implementation as in libpanic_abort's `__rust_start_panic`. See\n+/// that function for more information on `__fastfail`\n #[allow(unreachable_code)]\n pub fn abort_internal() -> ! {\n     #[cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))]"}]}