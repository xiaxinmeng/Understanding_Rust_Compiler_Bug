{"sha": "f4bedded8bb810145cb084181d6cfe5b170ef8fa", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY0YmVkZGVkOGJiODEwMTQ1Y2IwODQxODFkNmNmZTViMTcwZWY4ZmE=", "commit": {"author": {"name": "Jay Anderson", "email": "jayanderson0@gmail.com", "date": "2013-11-10T06:11:39Z"}, "committer": {"name": "Jay Anderson", "email": "jayanderson0@gmail.com", "date": "2013-11-12T01:49:48Z"}, "message": "Update docs for Fractional, Algebraic, Round, and Trigonometric traits.", "tree": {"sha": "ca2a9957144581d3e9fd21d51a07982c0c278c19", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ca2a9957144581d3e9fd21d51a07982c0c278c19"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f4bedded8bb810145cb084181d6cfe5b170ef8fa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f4bedded8bb810145cb084181d6cfe5b170ef8fa", "html_url": "https://github.com/rust-lang/rust/commit/f4bedded8bb810145cb084181d6cfe5b170ef8fa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f4bedded8bb810145cb084181d6cfe5b170ef8fa/comments", "author": {"login": "jayanderson", "id": 5899006, "node_id": "MDQ6VXNlcjU4OTkwMDY=", "avatar_url": "https://avatars.githubusercontent.com/u/5899006?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jayanderson", "html_url": "https://github.com/jayanderson", "followers_url": "https://api.github.com/users/jayanderson/followers", "following_url": "https://api.github.com/users/jayanderson/following{/other_user}", "gists_url": "https://api.github.com/users/jayanderson/gists{/gist_id}", "starred_url": "https://api.github.com/users/jayanderson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jayanderson/subscriptions", "organizations_url": "https://api.github.com/users/jayanderson/orgs", "repos_url": "https://api.github.com/users/jayanderson/repos", "events_url": "https://api.github.com/users/jayanderson/events{/privacy}", "received_events_url": "https://api.github.com/users/jayanderson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jayanderson", "id": 5899006, "node_id": "MDQ6VXNlcjU4OTkwMDY=", "avatar_url": "https://avatars.githubusercontent.com/u/5899006?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jayanderson", "html_url": "https://github.com/jayanderson", "followers_url": "https://api.github.com/users/jayanderson/followers", "following_url": "https://api.github.com/users/jayanderson/following{/other_user}", "gists_url": "https://api.github.com/users/jayanderson/gists{/gist_id}", "starred_url": "https://api.github.com/users/jayanderson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jayanderson/subscriptions", "organizations_url": "https://api.github.com/users/jayanderson/orgs", "repos_url": "https://api.github.com/users/jayanderson/repos", "events_url": "https://api.github.com/users/jayanderson/events{/privacy}", "received_events_url": "https://api.github.com/users/jayanderson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c0b7972f7d63e4b55098797cb48949b00d3ffee7", "url": "https://api.github.com/repos/rust-lang/rust/commits/c0b7972f7d63e4b55098797cb48949b00d3ffee7", "html_url": "https://github.com/rust-lang/rust/commit/c0b7972f7d63e4b55098797cb48949b00d3ffee7"}], "stats": {"total": 89, "additions": 89, "deletions": 0}, "files": [{"sha": "97b3c8f615c6f508aaf4a9c269d27018a0d31bad", "filename": "src/libstd/num/mod.rs", "status": "modified", "additions": 89, "deletions": 0, "changes": 89, "blob_url": "https://github.com/rust-lang/rust/blob/f4bedded8bb810145cb084181d6cfe5b170ef8fa/src%2Flibstd%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4bedded8bb810145cb084181d6cfe5b170ef8fa/src%2Flibstd%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fmod.rs?ref=f4bedded8bb810145cb084181d6cfe5b170ef8fa", "patch": "@@ -136,26 +136,87 @@ pub trait Integer: Num\n /// Calculates the Lowest Common Multiple (LCM) of the number and `other`.\n #[inline(always)] pub fn lcm<T: Integer>(x: T, y: T) -> T { x.lcm(&y) }\n \n+/// A collection of rounding operations.\n pub trait Round {\n+    /// Return the largest integer less than or equal to a number.\n+    ///\n+    /// # Example\n+    ///\n+    /// ```rust\n+    /// assert_approx_eq!(1.3f32.floor(), 1.0);\n+    /// assert_approx_eq!((-1.3f32).floor(), -2.0);\n+    /// ```\n     fn floor(&self) -> Self;\n+\n+    /// Return the smallest integer greater than or equal to a number.\n+    ///\n+    /// # Example\n+    ///\n+    /// ```rust\n+    /// assert_approx_eq!(1.3f32.ceil(), 2.0);\n+    /// assert_approx_eq!((-1.3f32).ceil(), -1.0);\n+    /// ```\n     fn ceil(&self) -> Self;\n+\n+    /// Return the nearest integer to a number. Round half-way cases away from\n+    /// `0.0`.\n+    ///\n+    /// # Example\n+    ///\n+    /// ```rust\n+    /// assert_approx_eq!(1.3f32.round(), 1.0);\n+    /// assert_approx_eq!((-1.3f32).round(), -1.0);\n+    /// assert_approx_eq!(1.5f32.round(), 2.0);\n+    /// assert_approx_eq!((-1.5f32).round(), -2.0);\n+    /// ```\n     fn round(&self) -> Self;\n+\n+    /// Return the integer part of a number.\n+    ///\n+    /// # Example\n+    ///\n+    /// ```rust\n+    /// assert_approx_eq!(1.3f32.round(), 1.0);\n+    /// assert_approx_eq!((-1.3f32).round(), -1.0);\n+    /// assert_approx_eq!(1.5f32.round(), 1.0);\n+    /// assert_approx_eq!((-1.5f32).round(), -1.0);\n+    /// ```\n     fn trunc(&self) -> Self;\n+\n+    /// Return the fractional part of a number.\n+    ///\n+    /// # Example\n+    ///\n+    /// ```rust\n+    /// assert_approx_eq!(1.3f32.round(), 0.3);\n+    /// assert_approx_eq!((-1.3f32).round(), -0.3);\n+    /// assert_approx_eq!(1.5f32.round(), 0.5);\n+    /// assert_approx_eq!((-1.5f32).round(), -0.5);\n+    /// ```\n     fn fract(&self) -> Self;\n }\n \n+/// Trait for common fractional operations.\n pub trait Fractional: Num\n                     + Orderable\n                     + Round\n                     + Div<Self,Self> {\n+    /// Take the reciprocal (inverse) of a number, `1/x`.\n     fn recip(&self) -> Self;\n }\n \n+/// A collection of algebraic operations.\n pub trait Algebraic {\n+    /// Raise a number to a power.\n     fn pow(&self, n: &Self) -> Self;\n+    /// Take the squre root of a number.\n     fn sqrt(&self) -> Self;\n+    /// Take the reciprocal (inverse) square root of a number, `1/sqrt(x)`.\n     fn rsqrt(&self) -> Self;\n+    /// Take the cubic root of a number.\n     fn cbrt(&self) -> Self;\n+    /// Calculate the length of the hypotenuse of a right-angle triangle given\n+    /// legs of length `x` and `y`.\n     fn hypot(&self, other: &Self) -> Self;\n }\n \n@@ -178,16 +239,44 @@ pub trait Algebraic {\n /// `y`.\n #[inline(always)] pub fn hypot<T: Algebraic>(x: T, y: T) -> T { x.hypot(&y) }\n \n+/// A trait for trigonometric functions.\n pub trait Trigonometric {\n+    /// Computes the sine of a number (in radians).\n     fn sin(&self) -> Self;\n+    /// Computes the cosine of a number (in radians).\n     fn cos(&self) -> Self;\n+    /// Computes the tangent of a number (in radians).\n     fn tan(&self) -> Self;\n \n+    /// Computes the arcsine of a number. Return value is in radians in\n+    /// the range [-pi/2, pi/2] or NaN if the number is outside the range\n+    /// [-1, 1].\n     fn asin(&self) -> Self;\n+    /// Computes the arccosine of a number. Return value is in radians in\n+    /// the range [0, pi] or NaN if the number is outside the range\n+    /// [-1, 1].\n     fn acos(&self) -> Self;\n+    /// Computes the arctangent of a number. Return value is in radians in the\n+    /// range [-pi/2, pi/2];\n     fn atan(&self) -> Self;\n \n+    /// Computes the four quadrant arctangent of a number, `y`, and another\n+    /// number `x`. Return value is in radians in the range [-pi, pi];\n+    ///\n+    /// # Example\n+    ///\n+    /// ```rust\n+    /// let y = 3f32.sqrt();\n+    /// let x = 1f32;\n+    /// let pi_3 = 1.04719758f32;\n+    /// assert_approx_eq!(y.atan2(&x), pi_3);\n+    /// let neg_2_pi_3 = -2.09439516f32;\n+    /// assert_approx_eq!((-y).atan2(&(-x)), neg_2_pi_3);\n+    /// ```\n     fn atan2(&self, other: &Self) -> Self;\n+\n+    /// Simultaneously computes the sine and cosine of the number, `x`. Returns\n+    /// `(sin(x), cos(x))`.\n     fn sin_cos(&self) -> (Self, Self);\n }\n "}]}