{"sha": "0b6ec575b9d0c683b854ba4ea3da726620c209b9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBiNmVjNTc1YjlkMGM2ODNiODU0YmE0ZWEzZGE3MjY2MjBjMjA5Yjk=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-05-30T20:54:37Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-05-30T20:54:37Z"}, "message": "make mutex_unlock infallible", "tree": {"sha": "a5b2a6819c18d65ff389a8439eb142d8506a9372", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a5b2a6819c18d65ff389a8439eb142d8506a9372"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0b6ec575b9d0c683b854ba4ea3da726620c209b9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0b6ec575b9d0c683b854ba4ea3da726620c209b9", "html_url": "https://github.com/rust-lang/rust/commit/0b6ec575b9d0c683b854ba4ea3da726620c209b9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0b6ec575b9d0c683b854ba4ea3da726620c209b9/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "67ad3041409ba87187c7c72e6f19ae79e1a7715f", "url": "https://api.github.com/repos/rust-lang/rust/commits/67ad3041409ba87187c7c72e6f19ae79e1a7715f", "html_url": "https://github.com/rust-lang/rust/commit/67ad3041409ba87187c7c72e6f19ae79e1a7715f"}], "stats": {"total": 12, "additions": 6, "deletions": 6}, "files": [{"sha": "8986455a14fcdad1c487c92c35ccac44dc1c4174", "filename": "src/shims/sync.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0b6ec575b9d0c683b854ba4ea3da726620c209b9/src%2Fshims%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b6ec575b9d0c683b854ba4ea3da726620c209b9/src%2Fshims%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fsync.rs?ref=0b6ec575b9d0c683b854ba4ea3da726620c209b9", "patch": "@@ -316,7 +316,7 @@ fn release_cond_mutex_and_block<'mir, 'tcx: 'mir>(\n     active_thread: ThreadId,\n     mutex: MutexId,\n ) -> InterpResult<'tcx> {\n-    if let Some(old_locked_count) = ecx.mutex_unlock(mutex, active_thread)? {\n+    if let Some(old_locked_count) = ecx.mutex_unlock(mutex, active_thread) {\n         if old_locked_count != 1 {\n             throw_unsup_format!(\"awaiting on a lock acquired multiple times is not supported\");\n         }\n@@ -486,7 +486,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         let id = mutex_get_or_create_id(this, mutex_op)?;\n         let active_thread = this.get_active_thread();\n \n-        if let Some(_old_locked_count) = this.mutex_unlock(id, active_thread)? {\n+        if let Some(_old_locked_count) = this.mutex_unlock(id, active_thread) {\n             // The mutex was locked by the current thread.\n             Ok(0)\n         } else {"}, {"sha": "0d4b4d6b7c1cb1b57a3f364a570bb85dd6453c58", "filename": "src/sync.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0b6ec575b9d0c683b854ba4ea3da726620c209b9/src%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b6ec575b9d0c683b854ba4ea3da726620c209b9/src%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fsync.rs?ref=0b6ec575b9d0c683b854ba4ea3da726620c209b9", "patch": "@@ -153,14 +153,14 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         &mut self,\n         id: MutexId,\n         expected_owner: ThreadId,\n-    ) -> InterpResult<'tcx, Option<usize>> {\n+    ) -> Option<usize> {\n         let this = self.eval_context_mut();\n         let mutex = &mut this.machine.threads.sync.mutexes[id];\n         if let Some(current_owner) = mutex.owner {\n             // Mutex is locked.\n             if current_owner != expected_owner {\n                 // Only the owner can unlock the mutex.\n-                return Ok(None);\n+                return None;\n             }\n             let old_lock_count = mutex.lock_count;\n             mutex.lock_count = old_lock_count\n@@ -172,10 +172,10 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 // to another thread.\n                 this.mutex_dequeue_and_lock(id);\n             }\n-            Ok(Some(old_lock_count))\n+            Some(old_lock_count)\n         } else {\n             // Mutex is unlocked.\n-            Ok(None)\n+            None\n         }\n     }\n "}]}