{"sha": "d674d7185d761c643f05888fce42c31119588814", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ2NzRkNzE4NWQ3NjFjNjQzZjA1ODg4ZmNlNDJjMzExMTk1ODg4MTQ=", "commit": {"author": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2021-07-08T19:19:53Z"}, "committer": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2021-07-08T19:40:35Z"}, "message": "Represent opaque types with TyKind::OpaqueType\n\n... instead of using `AliasTy`. Chalk turns the alias type into the\nplaceholder during unification anyway, which confuses our method\nresolution logic.\n\nFixes #9530.", "tree": {"sha": "db5a3d8454ff84f4843523c40dd27143bc205b3d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/db5a3d8454ff84f4843523c40dd27143bc205b3d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d674d7185d761c643f05888fce42c31119588814", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d674d7185d761c643f05888fce42c31119588814", "html_url": "https://github.com/rust-lang/rust/commit/d674d7185d761c643f05888fce42c31119588814", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d674d7185d761c643f05888fce42c31119588814/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "552b50de9ec8ed4d2d9ced9d267c72b40474e687", "url": "https://api.github.com/repos/rust-lang/rust/commits/552b50de9ec8ed4d2d9ced9d267c72b40474e687", "html_url": "https://github.com/rust-lang/rust/commit/552b50de9ec8ed4d2d9ced9d267c72b40474e687"}], "stats": {"total": 65, "additions": 41, "deletions": 24}, "files": [{"sha": "dcf16bdb1f254dd70f2acd2fba901a748a157fb2", "filename": "crates/hir_ty/src/chalk_ext.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d674d7185d761c643f05888fce42c31119588814/crates%2Fhir_ty%2Fsrc%2Fchalk_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d674d7185d761c643f05888fce42c31119588814/crates%2Fhir_ty%2Fsrc%2Fchalk_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fchalk_ext.rs?ref=d674d7185d761c643f05888fce42c31119588814", "patch": "@@ -183,7 +183,7 @@ impl TyExt for Ty {\n \n     fn impl_trait_bounds(&self, db: &dyn HirDatabase) -> Option<Vec<QuantifiedWhereClause>> {\n         match self.kind(&Interner) {\n-            TyKind::OpaqueType(opaque_ty_id, ..) => {\n+            TyKind::OpaqueType(opaque_ty_id, subst) => {\n                 match db.lookup_intern_impl_trait_id((*opaque_ty_id).into()) {\n                     ImplTraitId::AsyncBlockTypeImplTrait(def, _expr) => {\n                         let krate = def.module(db.upcast()).krate();\n@@ -206,7 +206,14 @@ impl TyExt for Ty {\n                             None\n                         }\n                     }\n-                    ImplTraitId::ReturnTypeImplTrait(..) => None,\n+                    ImplTraitId::ReturnTypeImplTrait(func, idx) => {\n+                        db.return_type_impl_traits(func).map(|it| {\n+                            let data = (*it)\n+                                .as_ref()\n+                                .map(|rpit| rpit.impl_traits[idx as usize].bounds.clone());\n+                            data.substitute(&Interner, &subst).into_value_and_skipped_binders().0\n+                        })\n+                    }\n                 }\n             }\n             TyKind::Alias(AliasTy::Opaque(opaque_ty)) => {"}, {"sha": "55a566a33d987245a2478816561501c2f03bcc71", "filename": "crates/hir_ty/src/display.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d674d7185d761c643f05888fce42c31119588814/crates%2Fhir_ty%2Fsrc%2Fdisplay.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d674d7185d761c643f05888fce42c31119588814/crates%2Fhir_ty%2Fsrc%2Fdisplay.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fdisplay.rs?ref=d674d7185d761c643f05888fce42c31119588814", "patch": "@@ -384,7 +384,8 @@ impl HirDisplay for Ty {\n                     &TyKind::Alias(AliasTy::Opaque(OpaqueTy {\n                         opaque_ty_id,\n                         substitution: ref parameters,\n-                    })) => {\n+                    }))\n+                    | &TyKind::OpaqueType(opaque_ty_id, ref parameters) => {\n                         let impl_trait_id = f.db.lookup_intern_impl_trait_id(opaque_ty_id.into());\n                         if let ImplTraitId::ReturnTypeImplTrait(func, idx) = impl_trait_id {\n                             datas ="}, {"sha": "b8fca9a578bfdecc94c1f212bbdacdf0639fa2b6", "filename": "crates/hir_ty/src/interner.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d674d7185d761c643f05888fce42c31119588814/crates%2Fhir_ty%2Fsrc%2Finterner.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d674d7185d761c643f05888fce42c31119588814/crates%2Fhir_ty%2Fsrc%2Finterner.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finterner.rs?ref=d674d7185d761c643f05888fce42c31119588814", "patch": "@@ -93,7 +93,13 @@ impl chalk_ir::interner::Interner for Interner {\n         alias: &chalk_ir::AliasTy<Interner>,\n         fmt: &mut fmt::Formatter<'_>,\n     ) -> Option<fmt::Result> {\n-        tls::with_current_program(|prog| Some(prog?.debug_alias(alias, fmt)))\n+        use std::fmt::Debug;\n+        match alias {\n+            chalk_ir::AliasTy::Projection(projection_ty) => {\n+                Interner::debug_projection_ty(projection_ty, fmt)\n+            }\n+            chalk_ir::AliasTy::Opaque(opaque_ty) => Some(opaque_ty.fmt(fmt)),\n+        }\n     }\n \n     fn debug_projection_ty(\n@@ -114,7 +120,7 @@ impl chalk_ir::interner::Interner for Interner {\n         opaque_ty_id: chalk_ir::OpaqueTyId<Self>,\n         fmt: &mut fmt::Formatter<'_>,\n     ) -> Option<fmt::Result> {\n-        Some(fmt.debug_struct(\"OpaqueTyId\").field(\"index\", &opaque_ty_id.0).finish())\n+        Some(write!(fmt, \"OpaqueTy#{}\", opaque_ty_id.0))\n     }\n \n     fn debug_ty(ty: &chalk_ir::Ty<Interner>, fmt: &mut fmt::Formatter<'_>) -> Option<fmt::Result> {"}, {"sha": "92b376c4402effad922a205a441dc113d8b2f65f", "filename": "crates/hir_ty/src/lower.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d674d7185d761c643f05888fce42c31119588814/crates%2Fhir_ty%2Fsrc%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d674d7185d761c643f05888fce42c31119588814/crates%2Fhir_ty%2Fsrc%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Flower.rs?ref=d674d7185d761c643f05888fce42c31119588814", "patch": "@@ -38,7 +38,7 @@ use crate::{\n         all_super_trait_refs, associated_type_by_name_including_super_traits, generics, Generics,\n     },\n     AliasEq, AliasTy, Binders, BoundVar, CallableSig, DebruijnIndex, DynTy, FnPointer, FnSig,\n-    FnSubst, ImplTraitId, Interner, OpaqueTy, PolyFnSig, ProjectionTy, QuantifiedWhereClause,\n+    FnSubst, ImplTraitId, Interner, PolyFnSig, ProjectionTy, QuantifiedWhereClause,\n     QuantifiedWhereClauses, ReturnTypeImplTrait, ReturnTypeImplTraits, Substitution,\n     TraitEnvironment, TraitRef, TraitRefExt, Ty, TyBuilder, TyKind, WhereClause,\n };\n@@ -250,11 +250,7 @@ impl<'a> TyLoweringContext<'a> {\n                         let opaque_ty_id = self.db.intern_impl_trait_id(impl_trait_id).into();\n                         let generics = generics(self.db.upcast(), func.into());\n                         let parameters = generics.bound_vars_subst(self.in_binders);\n-                        TyKind::Alias(AliasTy::Opaque(OpaqueTy {\n-                            opaque_ty_id,\n-                            substitution: parameters,\n-                        }))\n-                        .intern(&Interner)\n+                        TyKind::OpaqueType(opaque_ty_id, parameters).intern(&Interner)\n                     }\n                     ImplTraitLoweringMode::Param => {\n                         let idx = self.impl_trait_counter.get();"}, {"sha": "1e40ff24e3ae5a90dc9a3c82933a36b005c567c7", "filename": "crates/hir_ty/src/tests/regression.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/d674d7185d761c643f05888fce42c31119588814/crates%2Fhir_ty%2Fsrc%2Ftests%2Fregression.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d674d7185d761c643f05888fce42c31119588814/crates%2Fhir_ty%2Fsrc%2Ftests%2Fregression.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftests%2Fregression.rs?ref=d674d7185d761c643f05888fce42c31119588814", "patch": "@@ -1058,3 +1058,22 @@ fn cfg_tail() {\n         \"#]],\n     )\n }\n+\n+#[test]\n+fn impl_trait_in_option_9530() {\n+    check_types(\n+        r#\"\n+struct Option<T>;\n+impl<T> Option<T> {\n+    fn unwrap(self) -> T { loop {} }\n+}\n+fn make() -> Option<impl Copy> { Option }\n+trait Copy {}\n+fn test() {\n+    let o = make();\n+    o.unwrap();\n+  //^^^^^^^^^^ impl Copy\n+}\n+        \"#,\n+    )\n+}"}, {"sha": "6a662dcf7bdbfde9e9526e626d92f584518f3785", "filename": "crates/hir_ty/src/tls.rs", "status": "modified", "additions": 1, "deletions": 13, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d674d7185d761c643f05888fce42c31119588814/crates%2Fhir_ty%2Fsrc%2Ftls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d674d7185d761c643f05888fce42c31119588814/crates%2Fhir_ty%2Fsrc%2Ftls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftls.rs?ref=d674d7185d761c643f05888fce42c31119588814", "patch": "@@ -1,7 +1,6 @@\n //! Implementation of Chalk debug helper functions using TLS.\n-use std::fmt::{self, Debug};\n+use std::fmt;\n \n-use chalk_ir::AliasTy;\n use itertools::Itertools;\n \n use crate::{\n@@ -53,17 +52,6 @@ impl DebugContext<'_> {\n         write!(fmt, \"{}::{}\", trait_data.name, type_alias_data.name)\n     }\n \n-    pub(crate) fn debug_alias(\n-        &self,\n-        alias_ty: &AliasTy<Interner>,\n-        fmt: &mut fmt::Formatter<'_>,\n-    ) -> Result<(), fmt::Error> {\n-        match alias_ty {\n-            AliasTy::Projection(projection_ty) => self.debug_projection_ty(projection_ty, fmt),\n-            AliasTy::Opaque(opaque_ty) => opaque_ty.fmt(fmt),\n-        }\n-    }\n-\n     pub(crate) fn debug_projection_ty(\n         &self,\n         projection_ty: &chalk_ir::ProjectionTy<Interner>,"}]}