{"sha": "ed989d39a196acc0e7b3d30976a79ccc7c78a849", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVkOTg5ZDM5YTE5NmFjYzBlN2IzZDMwOTc2YTc5Y2NjN2M3OGE4NDk=", "commit": {"author": {"name": "Mark-Simulacrum", "email": "mark.simulacrum@gmail.com", "date": "2016-12-12T16:52:33Z"}, "committer": {"name": "Mark Simulacrum", "email": "mark.simulacrum@gmail.com", "date": "2016-12-21T03:02:48Z"}, "message": "Simple cleanups/inlines in cleanup", "tree": {"sha": "fa2a13db80821180d727a2806984de0d8747ea85", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fa2a13db80821180d727a2806984de0d8747ea85"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ed989d39a196acc0e7b3d30976a79ccc7c78a849", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ed989d39a196acc0e7b3d30976a79ccc7c78a849", "html_url": "https://github.com/rust-lang/rust/commit/ed989d39a196acc0e7b3d30976a79ccc7c78a849", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ed989d39a196acc0e7b3d30976a79ccc7c78a849/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "86b2bdb4350ceb98cb0f292dfb25dc7b703c2297", "url": "https://api.github.com/repos/rust-lang/rust/commits/86b2bdb4350ceb98cb0f292dfb25dc7b703c2297", "html_url": "https://github.com/rust-lang/rust/commit/86b2bdb4350ceb98cb0f292dfb25dc7b703c2297"}], "stats": {"total": 59, "additions": 7, "deletions": 52}, "files": [{"sha": "93fe705fd6e85e3d349575d94afda54aeed79cd8", "filename": "src/librustc_trans/cleanup.rs", "status": "modified", "additions": 7, "deletions": 52, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/ed989d39a196acc0e7b3d30976a79ccc7c78a849/src%2Flibrustc_trans%2Fcleanup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed989d39a196acc0e7b3d30976a79ccc7c78a849/src%2Flibrustc_trans%2Fcleanup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcleanup.rs?ref=ed989d39a196acc0e7b3d30976a79ccc7c78a849", "patch": "@@ -177,26 +177,21 @@ impl<'blk, 'tcx> FunctionContext<'blk, 'tcx> {\n         CustomScopeIndex { index: index }\n     }\n \n-    /// Removes the top cleanup scope from the stack without executing its cleanups. The top\n-    /// cleanup scope must be the temporary scope `custom_scope`.\n-    pub fn pop_custom_cleanup_scope(&self,\n-                                    custom_scope: CustomScopeIndex) {\n-        debug!(\"pop_custom_cleanup_scope({})\", custom_scope.index);\n-        assert!(self.is_valid_to_pop_custom_scope(custom_scope));\n-        let _ = self.pop_scope();\n-    }\n-\n     /// Removes the top cleanup scope from the stack, which must be a temporary scope, and\n     /// generates the code to do its cleanups for normal exit.\n     pub fn pop_and_trans_custom_cleanup_scope(&self,\n-                                              bcx: BlockAndBuilder<'blk, 'tcx>,\n+                                              mut bcx: BlockAndBuilder<'blk, 'tcx>,\n                                               custom_scope: CustomScopeIndex)\n                                               -> BlockAndBuilder<'blk, 'tcx> {\n         debug!(\"pop_and_trans_custom_cleanup_scope({:?})\", custom_scope);\n-        assert!(self.is_valid_to_pop_custom_scope(custom_scope));\n+        assert!(self.is_valid_custom_scope(custom_scope));\n+        assert!(custom_scope.index == self.scopes.borrow().len() - 1);\n \n         let scope = self.pop_scope();\n-        self.trans_scope_cleanups(bcx, &scope)\n+        for cleanup in scope.cleanups.iter().rev() {\n+            bcx = cleanup.trans(bcx.funclet(), bcx);\n+        }\n+        bcx\n     }\n \n     /// Schedules a (deep) drop of `val`, which is a pointer to an instance of\n@@ -251,29 +246,6 @@ impl<'blk, 'tcx> FunctionContext<'blk, 'tcx> {\n         self.schedule_clean(cleanup_scope, drop);\n     }\n \n-    /// Schedules a (deep) drop of `val`, which is an instance of `ty`\n-    pub fn schedule_drop_immediate(&self,\n-                                   cleanup_scope: CustomScopeIndex,\n-                                   val: ValueRef,\n-                                   ty: Ty<'tcx>) {\n-\n-        if !self.type_needs_drop(ty) { return; }\n-        let drop = DropValue {\n-            is_immediate: true,\n-            val: val,\n-            ty: ty,\n-            skip_dtor: false,\n-        };\n-\n-        debug!(\"schedule_drop_immediate({:?}, val={:?}, ty={:?}) skip_dtor={}\",\n-               cleanup_scope,\n-               Value(val),\n-               ty,\n-               drop.skip_dtor);\n-\n-        self.schedule_clean(cleanup_scope, drop);\n-    }\n-\n     /// Schedules a cleanup to occur in the top-most scope, which must be a temporary scope.\n     fn schedule_clean(&self, custom_scope: CustomScopeIndex, cleanup: DropValue<'tcx>) {\n         debug!(\"schedule_clean_in_custom_scope(custom_scope={})\",\n@@ -326,28 +298,11 @@ impl<'blk, 'tcx> FunctionContext<'blk, 'tcx> {\n         return llbb;\n     }\n \n-    fn is_valid_to_pop_custom_scope(&self, custom_scope: CustomScopeIndex) -> bool {\n-        self.is_valid_custom_scope(custom_scope) &&\n-            custom_scope.index == self.scopes.borrow().len() - 1\n-    }\n-\n     fn is_valid_custom_scope(&self, custom_scope: CustomScopeIndex) -> bool {\n         let scopes = self.scopes.borrow();\n         custom_scope.index < scopes.len()\n     }\n \n-    /// Generates the cleanups for `scope` into `bcx`\n-    fn trans_scope_cleanups(&self, // cannot borrow self, will recurse\n-                            bcx: BlockAndBuilder<'blk, 'tcx>,\n-                            scope: &CleanupScope<'tcx>) -> BlockAndBuilder<'blk, 'tcx> {\n-\n-        let mut bcx = bcx;\n-        for cleanup in scope.cleanups.iter().rev() {\n-            bcx = cleanup.trans(bcx.funclet(), bcx);\n-        }\n-        bcx\n-    }\n-\n     fn scopes_len(&self) -> usize {\n         self.scopes.borrow().len()\n     }"}]}