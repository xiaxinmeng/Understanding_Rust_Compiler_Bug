{"sha": "8cd23a4fb8c6a1012ba3e40dd3329a5abaed06b7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhjZDIzYTRmYjhjNmExMDEyYmEzZTQwZGQzMzI5YTVhYmFlZDA2Yjc=", "commit": {"author": {"name": "uHOOCCOOHu", "email": "hooccooh1896@gmail.com", "date": "2019-09-26T16:16:55Z"}, "committer": {"name": "uHOOCCOOHu", "email": "hooccooh1896@gmail.com", "date": "2019-09-26T18:05:06Z"}, "message": "Store crate info in `MacroDefId`", "tree": {"sha": "2c98fa75784d834129f1057fa065eb39f9a1dd55", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2c98fa75784d834129f1057fa065eb39f9a1dd55"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8cd23a4fb8c6a1012ba3e40dd3329a5abaed06b7", "comment_count": 0, "verification": {"verified": false, "reason": "no_user", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEXLDp5dXVcfV/VA/qztOS3gxIPQAFAl2M/dIACgkQztOS3gxI\nPQBdCBAAvZvNRA0XuY4ezffjNppiZLvokB2mzqRd2k1McD96Z9huKew5rzIyi9zg\nxlfMyDi4rm1HtaQIbOhdL/2Azphi/z0SEgk/VCxa1GJBlmVhR1uRZ9cpo31Md4Zd\nESgL3PAxtCyNz63DGVsG+fH92t+vwfPvhKY2qlOxg/QXrd/nSXx+6UZTR8Pr8OHa\nA2xCddr2H/NgMtijNEsGJ0LC2EKc6W1xCjrGwUTl2vF35hkgmrNa/C/pmiUoyuhM\nbp7WB/2a5vz+9pALzXsrCsdLDoiepc55uhfAXK0b+MF8cDyjd9n+hqr+A3cMikhC\nph4fPGv6fK3nm9OEEoTk4ot5twwN74AW94a+ehjZiQ3Lfq8eAC7DMWDNpkDDUCt/\nv5hR3WoqeEcbMSlEEwOrYc0GrlxAZ2xmkEbkF//YCF87T8sdjJrc7ssBD+X7ZHN6\nrt6v+v7V8zebgz0+Zyc/1Isp6Jmqo+aKaRbX1UstDyqgy+1BIIkv/DeXQKdgkfxP\nTJcatMeSykr02/yk24ROsGUrwEfB9CzgFtQHaCelSKmBV/uRK4H6QqtzUti8McNv\nZ1/Skw1pSP42vVMEHqwuvORhA4oIQfgJH930QMt+xs0lKQR/cPfffPoVM+9pQ3Gr\nLW93+fq5vv/CKueNpIJffotSQuxgjE79nj38MJoYxpb/Nfvma4o=\n=kRaK\n-----END PGP SIGNATURE-----", "payload": "tree 2c98fa75784d834129f1057fa065eb39f9a1dd55\nparent 128dc5355b81b0217fede903ae79f75ba0124716\nauthor uHOOCCOOHu <hooccooh1896@gmail.com> 1569514615 +0800\ncommitter uHOOCCOOHu <hooccooh1896@gmail.com> 1569521106 +0800\n\nStore crate info in `MacroDefId`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8cd23a4fb8c6a1012ba3e40dd3329a5abaed06b7", "html_url": "https://github.com/rust-lang/rust/commit/8cd23a4fb8c6a1012ba3e40dd3329a5abaed06b7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8cd23a4fb8c6a1012ba3e40dd3329a5abaed06b7/comments", "author": null, "committer": null, "parents": [{"sha": "128dc5355b81b0217fede903ae79f75ba0124716", "url": "https://api.github.com/repos/rust-lang/rust/commits/128dc5355b81b0217fede903ae79f75ba0124716", "html_url": "https://github.com/rust-lang/rust/commit/128dc5355b81b0217fede903ae79f75ba0124716"}], "stats": {"total": 16, "additions": 11, "deletions": 5}, "files": [{"sha": "dc964e1566965d02f1ae8d641fea61151c7c14c2", "filename": "crates/ra_hir/src/code_model/src.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8cd23a4fb8c6a1012ba3e40dd3329a5abaed06b7/crates%2Fra_hir%2Fsrc%2Fcode_model%2Fsrc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8cd23a4fb8c6a1012ba3e40dd3329a5abaed06b7/crates%2Fra_hir%2Fsrc%2Fcode_model%2Fsrc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model%2Fsrc.rs?ref=8cd23a4fb8c6a1012ba3e40dd3329a5abaed06b7", "patch": "@@ -119,7 +119,7 @@ impl HasSource for TypeAlias {\n impl HasSource for MacroDef {\n     type Ast = ast::MacroCall;\n     fn source(self, db: &(impl DefDatabase + AstDatabase)) -> Source<ast::MacroCall> {\n-        Source { file_id: self.id.0.file_id(), ast: self.id.0.to_node(db) }\n+        Source { file_id: self.id.ast_id.file_id(), ast: self.id.ast_id.to_node(db) }\n     }\n }\n "}, {"sha": "24637710003404b4408b7baf8c9e5d0f4d43be68", "filename": "crates/ra_hir/src/ids.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8cd23a4fb8c6a1012ba3e40dd3329a5abaed06b7/crates%2Fra_hir%2Fsrc%2Fids.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8cd23a4fb8c6a1012ba3e40dd3329a5abaed06b7/crates%2Fra_hir%2Fsrc%2Fids.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fids.rs?ref=8cd23a4fb8c6a1012ba3e40dd3329a5abaed06b7", "patch": "@@ -10,7 +10,7 @@ use ra_syntax::{ast, AstNode, Parse, SyntaxNode};\n \n use crate::{\n     db::{AstDatabase, DefDatabase, InternDatabase},\n-    AstId, FileAstId, Module, Source,\n+    AstId, Crate, FileAstId, Module, Source,\n };\n \n /// hir makes heavy use of ids: integer (u32) handlers to various things. You\n@@ -121,10 +121,13 @@ impl From<FileId> for HirFileId {\n }\n \n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n-pub struct MacroDefId(pub(crate) AstId<ast::MacroCall>);\n+pub struct MacroDefId {\n+    pub(crate) ast_id: AstId<ast::MacroCall>,\n+    pub(crate) krate: Crate,\n+}\n \n pub(crate) fn macro_def_query(db: &impl AstDatabase, id: MacroDefId) -> Option<Arc<MacroRules>> {\n-    let macro_call = id.0.to_node(db);\n+    let macro_call = id.ast_id.to_node(db);\n     let arg = macro_call.token_tree()?;\n     let (tt, _) = mbe::ast_to_token_tree(&arg).or_else(|| {\n         log::warn!(\"fail on macro_def to token tree: {:#?}\", arg);"}, {"sha": "65929c522bb4698b9ed7db1944f027a319436984", "filename": "crates/ra_hir/src/nameres/collector.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8cd23a4fb8c6a1012ba3e40dd3329a5abaed06b7/crates%2Fra_hir%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8cd23a4fb8c6a1012ba3e40dd3329a5abaed06b7/crates%2Fra_hir%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fnameres%2Fcollector.rs?ref=8cd23a4fb8c6a1012ba3e40dd3329a5abaed06b7", "patch": "@@ -662,7 +662,10 @@ where\n         // Case 1: macro rules, define a macro in crate-global mutable scope\n         if is_macro_rules(&mac.path) {\n             if let Some(name) = &mac.name {\n-                let macro_id = MacroDefId(mac.ast_id.with_file_id(self.file_id));\n+                let macro_id = MacroDefId {\n+                    ast_id: mac.ast_id.with_file_id(self.file_id),\n+                    krate: self.def_collector.def_map.krate,\n+                };\n                 let macro_ = MacroDef { id: macro_id };\n                 self.def_collector.define_macro(self.module_id, name.clone(), macro_, mac.export);\n             }"}]}