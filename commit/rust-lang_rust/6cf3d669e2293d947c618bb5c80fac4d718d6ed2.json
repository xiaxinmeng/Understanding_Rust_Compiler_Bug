{"sha": "6cf3d669e2293d947c618bb5c80fac4d718d6ed2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZjZjNkNjY5ZTIyOTNkOTQ3YzYxOGJiNWM4MGZhYzRkNzE4ZDZlZDI=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-01-20T11:49:59Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-01-20T11:49:59Z"}, "message": "Merge #7357\n\n7357: Dont show runnables from nested mods r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "ed1e997cb8dc1537d4d2a64b3a73d4b2f78b9d3e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ed1e997cb8dc1537d4d2a64b3a73d4b2f78b9d3e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6cf3d669e2293d947c618bb5c80fac4d718d6ed2", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgCBjnCRBK7hj4Ov3rIwAAdHIIALHPZJmt+QaGhcocfJNJdT8x\nEYw+5DBBWpeRnlTuLMPn2ssF78OkisHIscgNYIbbU7GopyXjczUVEqnUJgkPu0xh\nLvA1duYD3tE/avmDhpKGm98TkSaymj/F+GCZ1MdOZ10qbYle2CitPzk41HSNj5aL\nEBo1KIWvf/gxsXkVN8rw46xazmq2F0UxppxgYju1iFmZhgEIfU3h0sxwzHzELJIi\nJ3Xx2sfrQ045z+1JYk9vExK2PKibcQxJ0l/CkQpPsKh/O8LoUkhA7tbK5moXV0LC\nxqIWAq3F/o0bNOfnGaAAt2zLFXCgagqKSaYuKPdlT/A0q6IJDBVluA/v3BumiN0=\n=6z4B\n-----END PGP SIGNATURE-----\n", "payload": "tree ed1e997cb8dc1537d4d2a64b3a73d4b2f78b9d3e\nparent b28c903b18d8bd9b2010d6e3466d4f903fa0ba67\nparent 74f8201586435a7a2e7f8fd49c7eb0750a089180\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1611143399 +0000\ncommitter GitHub <noreply@github.com> 1611143399 +0000\n\nMerge #7357\n\n7357: Dont show runnables from nested mods r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6cf3d669e2293d947c618bb5c80fac4d718d6ed2", "html_url": "https://github.com/rust-lang/rust/commit/6cf3d669e2293d947c618bb5c80fac4d718d6ed2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6cf3d669e2293d947c618bb5c80fac4d718d6ed2/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b28c903b18d8bd9b2010d6e3466d4f903fa0ba67", "url": "https://api.github.com/repos/rust-lang/rust/commits/b28c903b18d8bd9b2010d6e3466d4f903fa0ba67", "html_url": "https://github.com/rust-lang/rust/commit/b28c903b18d8bd9b2010d6e3466d4f903fa0ba67"}, {"sha": "74f8201586435a7a2e7f8fd49c7eb0750a089180", "url": "https://api.github.com/repos/rust-lang/rust/commits/74f8201586435a7a2e7f8fd49c7eb0750a089180", "html_url": "https://github.com/rust-lang/rust/commit/74f8201586435a7a2e7f8fd49c7eb0750a089180"}], "stats": {"total": 104, "additions": 81, "deletions": 23}, "files": [{"sha": "47a85dc4568f54f3713d5bf70adf42e553b2f2db", "filename": "crates/ide/src/runnables.rs", "status": "modified", "additions": 45, "deletions": 22, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/6cf3d669e2293d947c618bb5c80fac4d718d6ed2/crates%2Fide%2Fsrc%2Frunnables.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cf3d669e2293d947c618bb5c80fac4d718d6ed2/crates%2Fide%2Fsrc%2Frunnables.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Frunnables.rs?ref=6cf3d669e2293d947c618bb5c80fac4d718d6ed2", "patch": "@@ -9,6 +9,7 @@ use syntax::{\n     ast::{self, AstNode, AttrsOwner},\n     match_ast, SyntaxNode,\n };\n+use test_utils::mark;\n \n use crate::{\n     display::{ToNav, TryToNav},\n@@ -96,28 +97,26 @@ impl Runnable {\n pub(crate) fn runnables(db: &RootDatabase, file_id: FileId) -> Vec<Runnable> {\n     let sema = Semantics::new(db);\n     let module = match sema.to_module_def(file_id) {\n-        None => return vec![],\n+        None => return Vec::new(),\n         Some(it) => it,\n     };\n \n-    runnables_mod(&sema, module)\n+    let mut res = Vec::new();\n+    runnables_mod(&sema, &mut res, module);\n+    res\n }\n \n-fn runnables_mod(sema: &Semantics<RootDatabase>, module: hir::Module) -> Vec<Runnable> {\n-    let mut res: Vec<Runnable> = module\n-        .declarations(sema.db)\n-        .into_iter()\n-        .filter_map(|def| {\n-            let runnable = match def {\n-                hir::ModuleDef::Module(it) => runnable_mod(&sema, it),\n-                hir::ModuleDef::Function(it) => runnable_fn(&sema, it),\n-                _ => None,\n-            };\n-            runnable.or_else(|| module_def_doctest(&sema, def))\n-        })\n-        .collect();\n+fn runnables_mod(sema: &Semantics<RootDatabase>, acc: &mut Vec<Runnable>, module: hir::Module) {\n+    acc.extend(module.declarations(sema.db).into_iter().filter_map(|def| {\n+        let runnable = match def {\n+            hir::ModuleDef::Module(it) => runnable_mod(&sema, it),\n+            hir::ModuleDef::Function(it) => runnable_fn(&sema, it),\n+            _ => None,\n+        };\n+        runnable.or_else(|| module_def_doctest(&sema, def))\n+    }));\n \n-    res.extend(module.impl_defs(sema.db).into_iter().flat_map(|it| it.items(sema.db)).filter_map(\n+    acc.extend(module.impl_defs(sema.db).into_iter().flat_map(|it| it.items(sema.db)).filter_map(\n         |def| match def {\n             hir::AssocItem::Function(it) => {\n                 runnable_fn(&sema, it).or_else(|| module_def_doctest(&sema, it.into()))\n@@ -127,12 +126,14 @@ fn runnables_mod(sema: &Semantics<RootDatabase>, module: hir::Module) -> Vec<Run\n         },\n     ));\n \n-    res.extend(module.declarations(sema.db).into_iter().flat_map(|def| match def {\n-        hir::ModuleDef::Module(it) => runnables_mod(sema, it),\n-        _ => vec![],\n-    }));\n-\n-    res\n+    for def in module.declarations(sema.db) {\n+        if let hir::ModuleDef::Module(submodule) = def {\n+            match submodule.definition_source(sema.db).value {\n+                hir::ModuleSource::Module(_) => runnables_mod(sema, acc, submodule),\n+                hir::ModuleSource::SourceFile(_) => mark::hit!(dont_recurse_in_outline_submodules),\n+            }\n+        }\n+    }\n }\n \n pub(crate) fn runnable_fn(sema: &Semantics<RootDatabase>, def: hir::Function) -> Option<Runnable> {\n@@ -326,6 +327,7 @@ fn has_test_function_or_multiple_test_submodules(\n #[cfg(test)]\n mod tests {\n     use expect_test::{expect, Expect};\n+    use test_utils::mark;\n \n     use crate::fixture;\n \n@@ -1050,4 +1052,25 @@ mod tests {\n             \"#]],\n         );\n     }\n+\n+    #[test]\n+    fn dont_recurse_in_outline_submodules() {\n+        mark::check!(dont_recurse_in_outline_submodules);\n+        check(\n+            r#\"\n+//- /lib.rs\n+$0\n+mod m;\n+//- /m.rs\n+mod tests {\n+    #[test]\n+    fn t() {}\n+}\n+\"#,\n+            &[],\n+            expect![[r#\"\n+                []\n+            \"#]],\n+        );\n+    }\n }"}, {"sha": "3896493980b116f5eddb38723b947e423ceaef24", "filename": "docs/dev/style.md", "status": "modified", "additions": 36, "deletions": 1, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/6cf3d669e2293d947c618bb5c80fac4d718d6ed2/docs%2Fdev%2Fstyle.md", "raw_url": "https://github.com/rust-lang/rust/raw/6cf3d669e2293d947c618bb5c80fac4d718d6ed2/docs%2Fdev%2Fstyle.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fdev%2Fstyle.md?ref=6cf3d669e2293d947c618bb5c80fac4d718d6ed2", "patch": "@@ -280,6 +280,9 @@ Prefer `Default` even it has to be implemented manually.\n \n **Rationale:** less typing in the common case, uniformity.\n \n+Use `Vec::new` rather than `vec![]`. **Rationale:** uniformity, strength\n+reduction.\n+\n ## Functions Over Objects\n \n Avoid creating \"doer\" objects.\n@@ -418,12 +421,44 @@ fn frobnicate(s: &str) {\n **Rationale:** reveals the costs.\n It is also more efficient when the caller already owns the allocation.\n \n-## Collection types\n+## Collection Types\n \n Prefer `rustc_hash::FxHashMap` and `rustc_hash::FxHashSet` instead of the ones in `std::collections`.\n \n **Rationale:** they use a hasher that's significantly faster and using them consistently will reduce code size by some small amount.\n \n+## Avoid Intermediate Collections\n+\n+When writing a recursive function to compute a sets of things, use an accumulator parameter instead of returning a fresh collection.\n+Accumulator goes first in the list of arguments.\n+\n+```rust\n+// GOOD\n+pub fn reachable_nodes(node: Node) -> FxHashSet<Node> {\n+    let mut res = FxHashSet::default();\n+    go(&mut res, node);\n+    res\n+}\n+fn go(acc: &mut FxHashSet<Node>, node: Node) {\n+    acc.insert(node);\n+    for n in node.neighbors() {\n+        go(acc, n);\n+    }\n+}\n+\n+// BAD\n+pub fn reachable_nodes(node: Node) -> FxHashSet<Node> {\n+    let mut res = FxHashSet::default();\n+    res.insert(node);\n+    for n in node.neighbors() {\n+        res.extend(reachable_nodes(n));\n+    }\n+    res\n+}\n+```\n+\n+**Rational:** re-use allocations, accumulator style is more concise for complex cases.\n+\n # Style\n \n ## Order of Imports"}]}