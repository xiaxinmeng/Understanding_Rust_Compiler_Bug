{"sha": "8d5b523eb03f32e5e59e5f94d451ee0beb5c254c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhkNWI1MjNlYjAzZjMyZTVlNTllNWY5NGQ0NTFlZTBiZWI1YzI1NGM=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo.net", "date": "2016-10-13T18:55:31Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo.net", "date": "2016-10-13T18:55:31Z"}, "message": "debuginfo: Create debuginfo for re-aggregated spread_arg instead of for the individual pieces.", "tree": {"sha": "3ba825efa72a866cca6444a7887b5a6a57c82a48", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3ba825efa72a866cca6444a7887b5a6a57c82a48"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8d5b523eb03f32e5e59e5f94d451ee0beb5c254c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8d5b523eb03f32e5e59e5f94d451ee0beb5c254c", "html_url": "https://github.com/rust-lang/rust/commit/8d5b523eb03f32e5e59e5f94d451ee0beb5c254c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8d5b523eb03f32e5e59e5f94d451ee0beb5c254c/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d34318dd538bf4c9175e4138b3e4188ea8211620", "url": "https://api.github.com/repos/rust-lang/rust/commits/d34318dd538bf4c9175e4138b3e4188ea8211620", "html_url": "https://github.com/rust-lang/rust/commit/d34318dd538bf4c9175e4138b3e4188ea8211620"}], "stats": {"total": 34, "additions": 13, "deletions": 21}, "files": [{"sha": "b0c7d26c47e03e1ab6cc9a539d698a91282733a2", "filename": "src/librustc_trans/mir/mod.rs", "status": "modified", "additions": 13, "deletions": 21, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/8d5b523eb03f32e5e59e5f94d451ee0beb5c254c/src%2Flibrustc_trans%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d5b523eb03f32e5e59e5f94d451ee0beb5c254c/src%2Flibrustc_trans%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Fmod.rs?ref=8d5b523eb03f32e5e59e5f94d451ee0beb5c254c", "patch": "@@ -371,7 +371,6 @@ fn arg_local_refs<'bcx, 'tcx>(bcx: &BlockAndBuilder<'bcx, 'tcx>,\n                 _ => bug!(\"spread argument isn't a tuple?!\")\n             };\n \n-            let lltuplety = type_of::type_of(bcx.ccx(), arg_ty);\n             let lltemp = bcx.with_block(|bcx| {\n                 base::alloc_ty(bcx, arg_ty, &format!(\"arg{}\", arg_index))\n             });\n@@ -391,27 +390,20 @@ fn arg_local_refs<'bcx, 'tcx>(bcx: &BlockAndBuilder<'bcx, 'tcx>,\n                 } else {\n                     arg.store_fn_arg(bcx, &mut llarg_idx, dst);\n                 }\n-\n-                bcx.with_block(|bcx| arg_scope.map(|scope| {\n-                    let byte_offset_of_var_in_tuple =\n-                        machine::llelement_offset(bcx.ccx(), lltuplety, i);\n-\n-                    let ops = unsafe {\n-                        [llvm::LLVMRustDIBuilderCreateOpDeref(),\n-                         llvm::LLVMRustDIBuilderCreateOpPlus(),\n-                         byte_offset_of_var_in_tuple as i64]\n-                    };\n-\n-                    let variable_access = VariableAccess::IndirectVariable {\n-                        alloca: lltemp,\n-                        address_operations: &ops\n-                    };\n-                    declare_local(bcx, keywords::Invalid.name(),\n-                                  tupled_arg_ty, scope, variable_access,\n-                                  VariableKind::ArgumentVariable(arg_index + i + 1),\n-                                  bcx.fcx().span.unwrap_or(DUMMY_SP));\n-                }));\n             }\n+\n+            // Now that we have one alloca that contains the aggregate value,\n+            // we can create one debuginfo entry for the argument.\n+            bcx.with_block(|bcx| arg_scope.map(|scope| {\n+                let variable_access = VariableAccess::DirectVariable {\n+                    alloca: lltemp\n+                };\n+                declare_local(bcx, arg_decl.name.unwrap_or(keywords::Invalid.name()),\n+                              arg_ty, scope, variable_access,\n+                              VariableKind::ArgumentVariable(arg_index + 1),\n+                              bcx.fcx().span.unwrap_or(DUMMY_SP));\n+            }));\n+\n             return LocalRef::Lvalue(LvalueRef::new_sized(lltemp, LvalueTy::from_ty(arg_ty)));\n         }\n "}]}