{"sha": "b32caef1ad605c8607ad0c3ccc682f6536f0e812", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIzMmNhZWYxYWQ2MDVjODYwN2FkMGMzY2NjNjgyZjY1MzZmMGU4MTI=", "commit": {"author": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2018-07-22T20:38:31Z"}, "committer": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2018-07-26T21:06:12Z"}, "message": "Use better spans for cannot-move errors", "tree": {"sha": "1529de7a35c7002ae024a94448d815c227c2a89b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1529de7a35c7002ae024a94448d815c227c2a89b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b32caef1ad605c8607ad0c3ccc682f6536f0e812", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b32caef1ad605c8607ad0c3ccc682f6536f0e812", "html_url": "https://github.com/rust-lang/rust/commit/b32caef1ad605c8607ad0c3ccc682f6536f0e812", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b32caef1ad605c8607ad0c3ccc682f6536f0e812/comments", "author": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "71637c293768052e73940a0eb1ddb71ce9d24c40", "url": "https://api.github.com/repos/rust-lang/rust/commits/71637c293768052e73940a0eb1ddb71ce9d24c40", "html_url": "https://github.com/rust-lang/rust/commit/71637c293768052e73940a0eb1ddb71ce9d24c40"}], "stats": {"total": 238, "additions": 210, "deletions": 28}, "files": [{"sha": "215ade5bd4dffe1e53d91566d7a577d9ec756c7f", "filename": "src/librustc_mir/borrow_check/move_errors.rs", "status": "modified", "additions": 19, "deletions": 24, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/b32caef1ad605c8607ad0c3ccc682f6536f0e812/src%2Flibrustc_mir%2Fborrow_check%2Fmove_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b32caef1ad605c8607ad0c3ccc682f6536f0e812/src%2Flibrustc_mir%2Fborrow_check%2Fmove_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmove_errors.rs?ref=b32caef1ad605c8607ad0c3ccc682f6536f0e812", "patch": "@@ -87,6 +87,10 @@ impl<'a, 'gcx, 'tcx> MirBorrowckCtxt<'a, 'gcx, 'tcx> {\n                 cannot_move_out_of: IllegalMoveOrigin { location, kind },\n             } => {\n                 let stmt_source_info = self.mir.source_info(location);\n+                // Note: that the only time we assign a place isn't a temporary\n+                // to a user variable is when initializing it.\n+                // If that ever stops being the case, then the ever initialized\n+                // flow could be used.\n                 if let Some(StatementKind::Assign(\n                     Place::Local(local),\n                     Rvalue::Use(Operand::Move(move_from)),\n@@ -109,26 +113,16 @@ impl<'a, 'gcx, 'tcx> MirBorrowckCtxt<'a, 'gcx, 'tcx> {\n                         opt_ty_info: _,\n                     }))) = local_decl.is_user_variable\n                     {\n-                        // HACK use scopes to determine if this assignment is\n-                        // the initialization of a variable.\n-                        // FIXME(matthewjasper) This would probably be more\n-                        // reliable if it used the ever initialized dataflow\n-                        // but move errors are currently reported before the\n-                        // rest of borrowck has run.\n-                        if self\n-                            .mir\n-                            .is_sub_scope(local_decl.source_info.scope, stmt_source_info.scope)\n-                        {\n-                            self.append_binding_error(\n-                                grouped_errors,\n-                                kind,\n-                                move_from,\n-                                *local,\n-                                opt_match_place,\n-                                match_span,\n-                            );\n-                            return;\n-                        }\n+                        self.append_binding_error(\n+                            grouped_errors,\n+                            kind,\n+                            move_from,\n+                            *local,\n+                            opt_match_place,\n+                            match_span,\n+                            stmt_source_info.span,\n+                        );\n+                        return;\n                     }\n                 }\n                 grouped_errors.push(GroupedMoveError::OtherIllegalMove {\n@@ -147,6 +141,7 @@ impl<'a, 'gcx, 'tcx> MirBorrowckCtxt<'a, 'gcx, 'tcx> {\n         bind_to: Local,\n         match_place: &Option<Place<'tcx>>,\n         match_span: Span,\n+        statement_span: Span,\n     ) {\n         debug!(\n             \"append_to_grouped_errors(match_place={:?}, match_span={:?})\",\n@@ -173,13 +168,13 @@ impl<'a, 'gcx, 'tcx> MirBorrowckCtxt<'a, 'gcx, 'tcx> {\n                 debug!(\"found a new move error location\");\n \n                 // Don't need to point to x in let x = ... .\n-                let binds_to = if from_simple_let {\n-                    vec![]\n+                let (binds_to, span) = if from_simple_let {\n+                    (vec![], statement_span)\n                 } else {\n-                    vec![bind_to]\n+                    (vec![bind_to], match_span)\n                 };\n                 grouped_errors.push(GroupedMoveError::MovesFromMatchPlace {\n-                    span: match_span,\n+                    span,\n                     move_from: match_place.clone(),\n                     kind,\n                     binds_to,"}, {"sha": "fc94cc423c53138d3c35bcbbdfef22648835772e", "filename": "src/test/ui/issue-20801.nll.stderr", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/b32caef1ad605c8607ad0c3ccc682f6536f0e812/src%2Ftest%2Fui%2Fissue-20801.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b32caef1ad605c8607ad0c3ccc682f6536f0e812/src%2Ftest%2Fui%2Fissue-20801.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-20801.nll.stderr?ref=b32caef1ad605c8607ad0c3ccc682f6536f0e812", "patch": "@@ -2,25 +2,37 @@ error[E0507]: cannot move out of borrowed content\n   --> $DIR/issue-20801.rs:36:22\n    |\n LL |     let a = unsafe { *mut_ref() };\n-   |                      ^^^^^^^^^^ cannot move out of borrowed content\n+   |                      ^^^^^^^^^^\n+   |                      |\n+   |                      cannot move out of borrowed content\n+   |                      help: consider using a reference instead: `&*mut_ref()`\n \n error[E0507]: cannot move out of borrowed content\n   --> $DIR/issue-20801.rs:39:22\n    |\n LL |     let b = unsafe { *imm_ref() };\n-   |                      ^^^^^^^^^^ cannot move out of borrowed content\n+   |                      ^^^^^^^^^^\n+   |                      |\n+   |                      cannot move out of borrowed content\n+   |                      help: consider using a reference instead: `&*imm_ref()`\n \n error[E0507]: cannot move out of borrowed content\n   --> $DIR/issue-20801.rs:42:22\n    |\n LL |     let c = unsafe { *mut_ptr() };\n-   |                      ^^^^^^^^^^ cannot move out of borrowed content\n+   |                      ^^^^^^^^^^\n+   |                      |\n+   |                      cannot move out of borrowed content\n+   |                      help: consider using a reference instead: `&*mut_ptr()`\n \n error[E0507]: cannot move out of borrowed content\n   --> $DIR/issue-20801.rs:45:22\n    |\n LL |     let d = unsafe { *const_ptr() };\n-   |                      ^^^^^^^^^^^^ cannot move out of borrowed content\n+   |                      ^^^^^^^^^^^^\n+   |                      |\n+   |                      cannot move out of borrowed content\n+   |                      help: consider using a reference instead: `&*const_ptr()`\n \n error: aborting due to 4 previous errors\n "}, {"sha": "814e11b6f0682f5feccb0a49fce9885b48d65dbd", "filename": "src/test/ui/nll/cannot-move-block-spans.nll.stderr", "status": "added", "additions": 85, "deletions": 0, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/b32caef1ad605c8607ad0c3ccc682f6536f0e812/src%2Ftest%2Fui%2Fnll%2Fcannot-move-block-spans.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b32caef1ad605c8607ad0c3ccc682f6536f0e812/src%2Ftest%2Fui%2Fnll%2Fcannot-move-block-spans.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fcannot-move-block-spans.nll.stderr?ref=b32caef1ad605c8607ad0c3ccc682f6536f0e812", "patch": "@@ -0,0 +1,85 @@\n+error[E0507]: cannot move out of borrowed content\n+  --> $DIR/cannot-move-block-spans.rs:15:15\n+   |\n+LL |     let x = { *r }; //~ ERROR\n+   |               ^^\n+   |               |\n+   |               cannot move out of borrowed content\n+   |               help: consider removing this dereference operator: `r`\n+\n+error[E0507]: cannot move out of borrowed content\n+  --> $DIR/cannot-move-block-spans.rs:16:22\n+   |\n+LL |     let y = unsafe { *r }; //~ ERROR\n+   |                      ^^\n+   |                      |\n+   |                      cannot move out of borrowed content\n+   |                      help: consider removing this dereference operator: `r`\n+\n+error[E0507]: cannot move out of borrowed content\n+  --> $DIR/cannot-move-block-spans.rs:17:26\n+   |\n+LL |     let z = loop { break *r; }; //~ ERROR\n+   |                          ^^\n+   |                          |\n+   |                          cannot move out of borrowed content\n+   |                          help: consider removing this dereference operator: `r`\n+\n+error[E0508]: cannot move out of type `[std::string::String; 2]`, a non-copy array\n+  --> $DIR/cannot-move-block-spans.rs:21:15\n+   |\n+LL |     let x = { arr[0] }; //~ ERROR\n+   |               ^^^^^^\n+   |               |\n+   |               cannot move out of here\n+   |               help: consider using a reference instead: `&arr[0]`\n+\n+error[E0508]: cannot move out of type `[std::string::String; 2]`, a non-copy array\n+  --> $DIR/cannot-move-block-spans.rs:22:22\n+   |\n+LL |     let y = unsafe { arr[0] }; //~ ERROR\n+   |                      ^^^^^^\n+   |                      |\n+   |                      cannot move out of here\n+   |                      help: consider using a reference instead: `&arr[0]`\n+\n+error[E0508]: cannot move out of type `[std::string::String; 2]`, a non-copy array\n+  --> $DIR/cannot-move-block-spans.rs:23:26\n+   |\n+LL |     let z = loop { break arr[0]; }; //~ ERROR\n+   |                          ^^^^^^\n+   |                          |\n+   |                          cannot move out of here\n+   |                          help: consider using a reference instead: `&arr[0]`\n+\n+error[E0507]: cannot move out of borrowed content\n+  --> $DIR/cannot-move-block-spans.rs:27:38\n+   |\n+LL |     let x = { let mut u = 0; u += 1; *r }; //~ ERROR\n+   |                                      ^^\n+   |                                      |\n+   |                                      cannot move out of borrowed content\n+   |                                      help: consider removing this dereference operator: `r`\n+\n+error[E0507]: cannot move out of borrowed content\n+  --> $DIR/cannot-move-block-spans.rs:28:45\n+   |\n+LL |     let y = unsafe { let mut u = 0; u += 1; *r }; //~ ERROR\n+   |                                             ^^\n+   |                                             |\n+   |                                             cannot move out of borrowed content\n+   |                                             help: consider removing this dereference operator: `r`\n+\n+error[E0507]: cannot move out of borrowed content\n+  --> $DIR/cannot-move-block-spans.rs:29:49\n+   |\n+LL |     let z = loop { let mut u = 0; u += 1; break *r; u += 2; }; //~ ERROR\n+   |                                                 ^^\n+   |                                                 |\n+   |                                                 cannot move out of borrowed content\n+   |                                                 help: consider removing this dereference operator: `r`\n+\n+error: aborting due to 9 previous errors\n+\n+Some errors occurred: E0507, E0508.\n+For more information about an error, try `rustc --explain E0507`."}, {"sha": "5a84a4ca48e26205ad90d09ab280a67fa25c6464", "filename": "src/test/ui/nll/cannot-move-block-spans.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/b32caef1ad605c8607ad0c3ccc682f6536f0e812/src%2Ftest%2Fui%2Fnll%2Fcannot-move-block-spans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b32caef1ad605c8607ad0c3ccc682f6536f0e812/src%2Ftest%2Fui%2Fnll%2Fcannot-move-block-spans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fcannot-move-block-spans.rs?ref=b32caef1ad605c8607ad0c3ccc682f6536f0e812", "patch": "@@ -0,0 +1,32 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test that the we point to the inner expression when moving out to initialize\n+// a variable, and that we don't give a useless suggestion such as &{ *r }.\n+\n+pub fn deref(r: &String) {\n+    let x = { *r }; //~ ERROR\n+    let y = unsafe { *r }; //~ ERROR\n+    let z = loop { break *r; }; //~ ERROR\n+}\n+\n+pub fn index(arr: [String; 2]) {\n+    let x = { arr[0] }; //~ ERROR\n+    let y = unsafe { arr[0] }; //~ ERROR\n+    let z = loop { break arr[0]; }; //~ ERROR\n+}\n+\n+pub fn additional_statement_cases(r: &String) {\n+    let x = { let mut u = 0; u += 1; *r }; //~ ERROR\n+    let y = unsafe { let mut u = 0; u += 1; *r }; //~ ERROR\n+    let z = loop { let mut u = 0; u += 1; break *r; u += 2; }; //~ ERROR\n+}\n+\n+fn main() {}"}, {"sha": "d495690023959ea41f47340d8b0b5c3a11dc65d5", "filename": "src/test/ui/nll/cannot-move-block-spans.stderr", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/b32caef1ad605c8607ad0c3ccc682f6536f0e812/src%2Ftest%2Fui%2Fnll%2Fcannot-move-block-spans.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b32caef1ad605c8607ad0c3ccc682f6536f0e812/src%2Ftest%2Fui%2Fnll%2Fcannot-move-block-spans.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fcannot-move-block-spans.stderr?ref=b32caef1ad605c8607ad0c3ccc682f6536f0e812", "patch": "@@ -0,0 +1,58 @@\n+error[E0507]: cannot move out of borrowed content\n+  --> $DIR/cannot-move-block-spans.rs:15:15\n+   |\n+LL |     let x = { *r }; //~ ERROR\n+   |               ^^ cannot move out of borrowed content\n+\n+error[E0507]: cannot move out of borrowed content\n+  --> $DIR/cannot-move-block-spans.rs:16:22\n+   |\n+LL |     let y = unsafe { *r }; //~ ERROR\n+   |                      ^^ cannot move out of borrowed content\n+\n+error[E0507]: cannot move out of borrowed content\n+  --> $DIR/cannot-move-block-spans.rs:17:26\n+   |\n+LL |     let z = loop { break *r; }; //~ ERROR\n+   |                          ^^ cannot move out of borrowed content\n+\n+error[E0508]: cannot move out of type `[std::string::String; 2]`, a non-copy array\n+  --> $DIR/cannot-move-block-spans.rs:21:15\n+   |\n+LL |     let x = { arr[0] }; //~ ERROR\n+   |               ^^^^^^ cannot move out of here\n+\n+error[E0508]: cannot move out of type `[std::string::String; 2]`, a non-copy array\n+  --> $DIR/cannot-move-block-spans.rs:22:22\n+   |\n+LL |     let y = unsafe { arr[0] }; //~ ERROR\n+   |                      ^^^^^^ cannot move out of here\n+\n+error[E0508]: cannot move out of type `[std::string::String; 2]`, a non-copy array\n+  --> $DIR/cannot-move-block-spans.rs:23:26\n+   |\n+LL |     let z = loop { break arr[0]; }; //~ ERROR\n+   |                          ^^^^^^ cannot move out of here\n+\n+error[E0507]: cannot move out of borrowed content\n+  --> $DIR/cannot-move-block-spans.rs:27:38\n+   |\n+LL |     let x = { let mut u = 0; u += 1; *r }; //~ ERROR\n+   |                                      ^^ cannot move out of borrowed content\n+\n+error[E0507]: cannot move out of borrowed content\n+  --> $DIR/cannot-move-block-spans.rs:28:45\n+   |\n+LL |     let y = unsafe { let mut u = 0; u += 1; *r }; //~ ERROR\n+   |                                             ^^ cannot move out of borrowed content\n+\n+error[E0507]: cannot move out of borrowed content\n+  --> $DIR/cannot-move-block-spans.rs:29:49\n+   |\n+LL |     let z = loop { let mut u = 0; u += 1; break *r; u += 2; }; //~ ERROR\n+   |                                                 ^^ cannot move out of borrowed content\n+\n+error: aborting due to 9 previous errors\n+\n+Some errors occurred: E0507, E0508.\n+For more information about an error, try `rustc --explain E0507`."}]}