{"sha": "b70ec4d9f019c1bd886f2f3dc0cd9da4d95804cb", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI3MGVjNGQ5ZjAxOWMxYmQ4ODZmMmYzZGMwY2Q5ZGE0ZDk1ODA0Y2I=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-01-30T20:02:53Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-01-30T20:02:53Z"}, "message": "rollup merge of #21678: vojtechkral/threads-native-names\n\nFixes #10302\n\nI really am not sure I'm doing this right, so here goes nothing...\n\nAlso testing this isn't easy. I don't have any other *nix boxes besides a Linux one.\n\nTest code:\n\n```rust\nuse std::thread;\nuse std::io::timer::sleep;\nuse std::time::duration::Duration;\n\nfn make_thread<'a>(i: i64) -> thread::JoinGuard<'a, ()>\n{\n\tthread::Builder::new().name(format!(\"MyThread{}\", i).to_string()).scoped(move ||\n\t{\n\t\tprintln!(\"Start: {}\", i);\n\t\tsleep(Duration::seconds(i));\n\t\tprintln!(\"End: {}\", i);\n\t})\n}\n\nfn main()\n{\n\tlet mut guards = vec![make_thread(3)];\n\n\tfor i in 4i64..16\n\t{\n\t\tguards.push(make_thread(i));\n\t}\n}\n```\n\nGDB output on my machine:\n\n```\n(gdb) info threads\n  Id   Target Id         Frame\n  15   Thread 0x7fdfbb35f700 (LWP 23575) \"MyThread3\" 0x00007fdfbbe35a8d in nanosleep () from /usr/lib/libpthread.so.0\n  14   Thread 0x7fdfba7ff700 (LWP 23576) \"MyThread4\" 0x00007fdfbbe35a8d in nanosleep () from /usr/lib/libpthread.so.0\n  13   Thread 0x7fdfba5fe700 (LWP 23577) \"MyThread5\" 0x00007fdfbbe35a8d in nanosleep () from /usr/lib/libpthread.so.0\n  12   Thread 0x7fdfba3fd700 (LWP 23578) \"MyThread6\" 0x00007fdfbbe35a8d in nanosleep () from /usr/lib/libpthread.so.0\n  11   Thread 0x7fdfb8dfe700 (LWP 23580) \"MyThread4\" 0x00007fdfbb746193 in select () from /usr/lib/libc.so.6\n  10   Thread 0x7fdfb8fff700 (LWP 23579) \"MyThread7\" 0x00007fdfbbe35a8d in nanosleep () from /usr/lib/libpthread.so.0\n  9    Thread 0x7fdfb8bfd700 (LWP 23581) \"MyThread8\" 0x00007fdfbbe35a8d in nanosleep () from /usr/lib/libpthread.so.0\n  8    Thread 0x7fdfb3fff700 (LWP 23582) \"MyThread9\" 0x00007fdfbbe35a8d in nanosleep () from /usr/lib/libpthread.so.0\n  7    Thread 0x7fdfb3dfe700 (LWP 23583) \"MyThread10\" 0x00007fdfbbe35a8d in nanosleep () from /usr/lib/libpthread.so.0\n  6    Thread 0x7fdfb3bfd700 (LWP 23584) \"MyThread11\" 0x00007fdfbbe35a8d in nanosleep () from /usr/lib/libpthread.so.0\n  5    Thread 0x7fdfb2bff700 (LWP 23585) \"MyThread12\" 0x00007fdfbbe35a8d in nanosleep () from /usr/lib/libpthread.so.0\n  4    Thread 0x7fdfb29fe700 (LWP 23586) \"MyThread13\" 0x00007fdfbbe35a8d in nanosleep () from /usr/lib/libpthread.so.0\n  3    Thread 0x7fdfb27fd700 (LWP 23587) \"MyThread14\" 0x00007fdfbbe35a8d in nanosleep () from /usr/lib/libpthread.so.0\n  2    Thread 0x7fdfb1bff700 (LWP 23588) \"MyThread15\" 0x00007fdfbbe35a8d in nanosleep () from /usr/lib/libpthread.so.0\n* 1    Thread 0x7fdfbc411800 (LWP 23574) \"threads\" 0x00007fdfbbe2e505 in pthread_join () from /usr/lib/libpthread.so.0\n```\n(I'm not sure why one of the threads is duplicated, but it does that without my patch too...)", "tree": {"sha": "1e6a2c18864490b00edd497eb326d6e1892d6e13", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1e6a2c18864490b00edd497eb326d6e1892d6e13"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b70ec4d9f019c1bd886f2f3dc0cd9da4d95804cb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b70ec4d9f019c1bd886f2f3dc0cd9da4d95804cb", "html_url": "https://github.com/rust-lang/rust/commit/b70ec4d9f019c1bd886f2f3dc0cd9da4d95804cb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b70ec4d9f019c1bd886f2f3dc0cd9da4d95804cb/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b446c5b67994bd9822e958e3e26122543086c1bc", "url": "https://api.github.com/repos/rust-lang/rust/commits/b446c5b67994bd9822e958e3e26122543086c1bc", "html_url": "https://github.com/rust-lang/rust/commit/b446c5b67994bd9822e958e3e26122543086c1bc"}, {"sha": "9ee972ca32b1f91eb6880e1bc9c8bb5a4faf1f29", "url": "https://api.github.com/repos/rust-lang/rust/commits/9ee972ca32b1f91eb6880e1bc9c8bb5a4faf1f29", "html_url": "https://github.com/rust-lang/rust/commit/9ee972ca32b1f91eb6880e1bc9c8bb5a4faf1f29"}], "stats": {"total": 54, "additions": 52, "deletions": 2}, "files": [{"sha": "7c9758ca9242d88cd28a2685d6a3224c270c5dfe", "filename": "src/libstd/sys/common/thread_info.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b70ec4d9f019c1bd886f2f3dc0cd9da4d95804cb/src%2Flibstd%2Fsys%2Fcommon%2Fthread_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b70ec4d9f019c1bd886f2f3dc0cd9da4d95804cb/src%2Flibstd%2Fsys%2Fcommon%2Fthread_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcommon%2Fthread_info.rs?ref=b70ec4d9f019c1bd886f2f3dc0cd9da4d95804cb", "patch": "@@ -56,6 +56,10 @@ pub fn stack_guard() -> uint {\n \n pub fn set(stack_bounds: (uint, uint), stack_guard: uint, thread: Thread) {\n     THREAD_INFO.with(|c| assert!(c.borrow().is_none()));\n+    match thread.name() {\n+        Some(name) => unsafe { ::sys::thread::set_name(name.as_slice()); },\n+        None => {}\n+    }\n     THREAD_INFO.with(move |c| *c.borrow_mut() = Some(ThreadInfo{\n         stack_bounds: stack_bounds,\n         stack_guard: stack_guard,"}, {"sha": "26a450b8599dfaad964b60ccea1b1da62b9b0dff", "filename": "src/libstd/sys/unix/thread.rs", "status": "modified", "additions": 41, "deletions": 2, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/b70ec4d9f019c1bd886f2f3dc0cd9da4d95804cb/src%2Flibstd%2Fsys%2Funix%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b70ec4d9f019c1bd886f2f3dc0cd9da4d95804cb/src%2Flibstd%2Fsys%2Funix%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fthread.rs?ref=b70ec4d9f019c1bd886f2f3dc0cd9da4d95804cb", "patch": "@@ -17,6 +17,7 @@ use ptr;\n use libc::consts::os::posix01::{PTHREAD_CREATE_JOINABLE, PTHREAD_STACK_MIN};\n use libc;\n use thunk::Thunk;\n+use ffi::CString;\n \n use sys_common::stack::RED_ZONE;\n use sys_common::thread::*;\n@@ -206,6 +207,37 @@ pub unsafe fn create(stack: uint, p: Thunk) -> rust_thread {\n     native\n }\n \n+#[cfg(any(target_os = \"linux\", target_os = \"android\"))]\n+pub unsafe fn set_name(name: &str) {\n+    // pthread_setname_np() since glibc 2.12\n+    // availability autodetected via weak linkage\n+    let cname = CString::from_slice(name.as_bytes());\n+    type F = unsafe extern \"C\" fn(libc::pthread_t, *const libc::c_char) -> libc::c_int;\n+    extern {\n+        #[linkage = \"extern_weak\"]\n+        static pthread_setname_np: *const ();\n+    }\n+    if !pthread_setname_np.is_null() {\n+        unsafe {\n+            mem::transmute::<*const (), F>(pthread_setname_np)(pthread_self(), cname.as_ptr());\n+        }\n+    }\n+}\n+\n+#[cfg(any(target_os = \"freebsd\", target_os = \"dragonfly\"))]\n+pub unsafe fn set_name(name: &str) {\n+    // pthread_set_name_np() since almost forever on all BSDs\n+    let cname = CString::from_slice(name.as_bytes());\n+    pthread_set_name_np(pthread_self(), cname.as_ptr());\n+}\n+\n+#[cfg(any(target_os = \"macos\", target_os = \"ios\"))]\n+pub unsafe fn set_name(name: &str) {\n+    // pthread_setname_np() since OS X 10.6 and iOS 3.2\n+    let cname = CString::from_slice(name.as_bytes());\n+    pthread_setname_np(cname.as_ptr());\n+}\n+\n pub unsafe fn join(native: rust_thread) {\n     assert_eq!(pthread_join(native, ptr::null_mut()), 0);\n }\n@@ -246,7 +278,7 @@ fn min_stack_size(_: *const libc::pthread_attr_t) -> libc::size_t {\n     PTHREAD_STACK_MIN\n }\n \n-#[cfg(any(target_os = \"linux\"))]\n+#[cfg(any(target_os = \"linux\", target_os = \"android\"))]\n extern {\n     pub fn pthread_self() -> libc::pthread_t;\n     pub fn pthread_getattr_np(native: libc::pthread_t,\n@@ -258,11 +290,18 @@ extern {\n                                  stacksize: *mut libc::size_t) -> libc::c_int;\n }\n \n-#[cfg(target_os = \"macos\")]\n+#[cfg(any(target_os = \"freebsd\", target_os = \"dragonfly\"))]\n+extern {\n+    pub fn pthread_self() -> libc::pthread_t;\n+    fn pthread_set_name_np(tid: libc::pthread_t, name: *const libc::c_char);\n+}\n+\n+#[cfg(any(target_os = \"macos\", target_os = \"ios\"))]\n extern {\n     pub fn pthread_self() -> libc::pthread_t;\n     pub fn pthread_get_stackaddr_np(thread: libc::pthread_t) -> *mut libc::c_void;\n     pub fn pthread_get_stacksize_np(thread: libc::pthread_t) -> libc::size_t;\n+    fn pthread_setname_np(name: *const libc::c_char) -> libc::c_int;\n }\n \n extern {"}, {"sha": "a94adcb3bc7b93b80a61f5a8d621d3c1b96d6565", "filename": "src/libstd/sys/windows/thread.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b70ec4d9f019c1bd886f2f3dc0cd9da4d95804cb/src%2Flibstd%2Fsys%2Fwindows%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b70ec4d9f019c1bd886f2f3dc0cd9da4d95804cb/src%2Flibstd%2Fsys%2Fwindows%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fthread.rs?ref=b70ec4d9f019c1bd886f2f3dc0cd9da4d95804cb", "patch": "@@ -67,6 +67,13 @@ pub unsafe fn create(stack: uint, p: Thunk) -> rust_thread {\n     return ret;\n }\n \n+pub unsafe fn set_name(_name: &str) {\n+    // Windows threads are nameless\n+    // The names in MSVC debugger are obtained using a \"magic\" exception,\n+    // which requires a use of MS C++ extensions.\n+    // See https://msdn.microsoft.com/en-us/library/xcb2z8hs.aspx\n+}\n+\n pub unsafe fn join(native: rust_thread) {\n     use libc::consts::os::extra::INFINITE;\n     WaitForSingleObject(native, INFINITE);"}]}