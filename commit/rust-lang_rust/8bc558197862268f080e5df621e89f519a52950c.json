{"sha": "8bc558197862268f080e5df621e89f519a52950c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhiYzU1ODE5Nzg2MjI2OGYwODBlNWRmNjIxZTg5ZjUxOWE1Mjk1MGM=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2021-03-30T20:37:30Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2021-04-07T02:55:44Z"}, "message": "Point at `impl` and type defs introducing requirements on E0277", "tree": {"sha": "3175f741b1c1cdc51b2057ca5abcaa2133970fec", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3175f741b1c1cdc51b2057ca5abcaa2133970fec"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8bc558197862268f080e5df621e89f519a52950c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8bc558197862268f080e5df621e89f519a52950c", "html_url": "https://github.com/rust-lang/rust/commit/8bc558197862268f080e5df621e89f519a52950c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8bc558197862268f080e5df621e89f519a52950c/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d326c218efaa598e35ede0ef0607ac8e4eb9fea1", "url": "https://api.github.com/repos/rust-lang/rust/commits/d326c218efaa598e35ede0ef0607ac8e4eb9fea1", "html_url": "https://github.com/rust-lang/rust/commit/d326c218efaa598e35ede0ef0607ac8e4eb9fea1"}], "stats": {"total": 731, "additions": 621, "deletions": 110}, "files": [{"sha": "414e1979c949a96fe5d5d88da2011dd39cba142d", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8bc558197862268f080e5df621e89f519a52950c/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bc558197862268f080e5df621e89f519a52950c/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=8bc558197862268f080e5df621e89f519a52950c", "patch": "@@ -1598,7 +1598,7 @@ impl<'tcx> TyCtxt<'tcx> {\n             .filter(|item| item.kind == AssocKind::Fn && item.defaultness.has_value())\n     }\n \n-    fn item_name_from_hir(self, def_id: DefId) -> Option<Ident> {\n+    pub fn item_name_from_hir(self, def_id: DefId) -> Option<Ident> {\n         self.hir().get_if_local(def_id).and_then(|node| node.ident())\n     }\n "}, {"sha": "edbef02df45e7aa4d74a1adcec029f78a9d169d4", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 35, "deletions": 3, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/8bc558197862268f080e5df621e89f519a52950c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bc558197862268f080e5df621e89f519a52950c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=8bc558197862268f080e5df621e89f519a52950c", "patch": "@@ -2070,7 +2070,14 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n \n                 // Don't print the tuple of capture types\n                 if !is_upvar_tys_infer_tuple {\n-                    err.note(&format!(\"required because it appears within the type `{}`\", ty));\n+                    let msg = format!(\"required because it appears within the type `{}`\", ty);\n+                    match ty.kind() {\n+                        ty::Adt(def, _) => match self.tcx.item_name_from_hir(def.did) {\n+                            Some(ident) => err.span_note(ident.span, &msg),\n+                            None => err.note(&msg),\n+                        },\n+                        _ => err.note(&msg),\n+                    };\n                 }\n \n                 obligated_types.push(ty);\n@@ -2092,11 +2099,36 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n             ObligationCauseCode::ImplDerivedObligation(ref data) => {\n                 let mut parent_trait_ref = self.resolve_vars_if_possible(data.parent_trait_ref);\n                 let parent_def_id = parent_trait_ref.def_id();\n-                err.note(&format!(\n+                let msg = format!(\n                     \"required because of the requirements on the impl of `{}` for `{}`\",\n                     parent_trait_ref.print_only_trait_path(),\n                     parent_trait_ref.skip_binder().self_ty()\n-                ));\n+                );\n+                let mut candidates = vec![];\n+                self.tcx.for_each_relevant_impl(\n+                    parent_def_id,\n+                    parent_trait_ref.self_ty().skip_binder(),\n+                    |impl_def_id| {\n+                        candidates.push(impl_def_id);\n+                    },\n+                );\n+                match &candidates[..] {\n+                    [def_id] => match self.tcx.hir().get_if_local(*def_id) {\n+                        Some(Node::Item(hir::Item {\n+                            kind: hir::ItemKind::Impl(hir::Impl { of_trait, self_ty, .. }),\n+                            ..\n+                        })) => {\n+                            let mut spans = Vec::with_capacity(2);\n+                            if let Some(trait_ref) = of_trait {\n+                                spans.push(trait_ref.path.span);\n+                            }\n+                            spans.push(self_ty.span);\n+                            err.span_note(spans, &msg)\n+                        }\n+                        _ => err.note(&msg),\n+                    },\n+                    _ => err.note(&msg),\n+                };\n \n                 let mut parent_predicate = parent_trait_ref.without_const().to_predicate(tcx);\n                 let mut data = data;"}, {"sha": "1d8d2b0149d219ab29bac593532ec2665cbb0f84", "filename": "src/test/ui/associated-types/impl-wf-cycle-1.stderr", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/8bc558197862268f080e5df621e89f519a52950c/src%2Ftest%2Fui%2Fassociated-types%2Fimpl-wf-cycle-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8bc558197862268f080e5df621e89f519a52950c/src%2Ftest%2Fui%2Fassociated-types%2Fimpl-wf-cycle-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fimpl-wf-cycle-1.stderr?ref=8bc558197862268f080e5df621e89f519a52950c", "patch": "@@ -10,7 +10,11 @@ LL | |\n LL | | }\n    | |_^\n    |\n-   = note: required because of the requirements on the impl of `Grault` for `(T,)`\n+note: required because of the requirements on the impl of `Grault` for `(T,)`\n+  --> $DIR/impl-wf-cycle-1.rs:15:17\n+   |\n+LL | impl<T: Grault> Grault for (T,)\n+   |                 ^^^^^^     ^^^^\n    = note: 1 redundant requirements hidden\n    = note: required because of the requirements on the impl of `Grault` for `(T,)`\n \n@@ -20,7 +24,11 @@ error[E0275]: overflow evaluating the requirement `<(T,) as Grault>::A == _`\n LL |     type A = ();\n    |     ^^^^^^^^^^^^\n    |\n-   = note: required because of the requirements on the impl of `Grault` for `(T,)`\n+note: required because of the requirements on the impl of `Grault` for `(T,)`\n+  --> $DIR/impl-wf-cycle-1.rs:15:17\n+   |\n+LL | impl<T: Grault> Grault for (T,)\n+   |                 ^^^^^^     ^^^^\n    = note: 1 redundant requirements hidden\n    = note: required because of the requirements on the impl of `Grault` for `(T,)`\n \n@@ -30,7 +38,11 @@ error[E0275]: overflow evaluating the requirement `<(T,) as Grault>::A == _`\n LL |     type B = bool;\n    |     ^^^^^^^^^^^^^^\n    |\n-   = note: required because of the requirements on the impl of `Grault` for `(T,)`\n+note: required because of the requirements on the impl of `Grault` for `(T,)`\n+  --> $DIR/impl-wf-cycle-1.rs:15:17\n+   |\n+LL | impl<T: Grault> Grault for (T,)\n+   |                 ^^^^^^     ^^^^\n    = note: 1 redundant requirements hidden\n    = note: required because of the requirements on the impl of `Grault` for `(T,)`\n "}, {"sha": "a17e63f28fe91215baa29dd8a8cb85fe2d389278", "filename": "src/test/ui/associated-types/impl-wf-cycle-2.stderr", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8bc558197862268f080e5df621e89f519a52950c/src%2Ftest%2Fui%2Fassociated-types%2Fimpl-wf-cycle-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8bc558197862268f080e5df621e89f519a52950c/src%2Ftest%2Fui%2Fassociated-types%2Fimpl-wf-cycle-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fimpl-wf-cycle-2.stderr?ref=8bc558197862268f080e5df621e89f519a52950c", "patch": "@@ -10,15 +10,23 @@ LL | |\n LL | | }\n    | |_^\n    |\n-   = note: required because of the requirements on the impl of `Grault` for `(T,)`\n+note: required because of the requirements on the impl of `Grault` for `(T,)`\n+  --> $DIR/impl-wf-cycle-2.rs:7:17\n+   |\n+LL | impl<T: Grault> Grault for (T,)\n+   |                 ^^^^^^     ^^^^\n \n error[E0275]: overflow evaluating the requirement `<(T,) as Grault>::A == _`\n   --> $DIR/impl-wf-cycle-2.rs:11:5\n    |\n LL |     type A = ();\n    |     ^^^^^^^^^^^^\n    |\n-   = note: required because of the requirements on the impl of `Grault` for `(T,)`\n+note: required because of the requirements on the impl of `Grault` for `(T,)`\n+  --> $DIR/impl-wf-cycle-2.rs:7:17\n+   |\n+LL | impl<T: Grault> Grault for (T,)\n+   |                 ^^^^^^     ^^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "b7db5d385829cd2d1f7b5c334919da4f0f56128a", "filename": "src/test/ui/associated-types/issue-44153.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8bc558197862268f080e5df621e89f519a52950c/src%2Ftest%2Fui%2Fassociated-types%2Fissue-44153.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8bc558197862268f080e5df621e89f519a52950c/src%2Ftest%2Fui%2Fassociated-types%2Fissue-44153.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fissue-44153.stderr?ref=8bc558197862268f080e5df621e89f519a52950c", "patch": "@@ -7,7 +7,11 @@ LL |     fn visit() {}\n LL |     <() as Visit>::visit();\n    |     ^^^^^^^^^^^^^^^^^^^^ expected `&()`, found `()`\n    |\n-   = note: required because of the requirements on the impl of `Visit` for `()`\n+note: required because of the requirements on the impl of `Visit` for `()`\n+  --> $DIR/issue-44153.rs:13:10\n+   |\n+LL | impl<'a> Visit for () where\n+   |          ^^^^^     ^^\n \n error: aborting due to previous error\n "}, {"sha": "fc020e40b5ad2f55be9183e6d086e4ab3e6f14ca", "filename": "src/test/ui/associated-types/issue-65774-1.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8bc558197862268f080e5df621e89f519a52950c/src%2Ftest%2Fui%2Fassociated-types%2Fissue-65774-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8bc558197862268f080e5df621e89f519a52950c/src%2Ftest%2Fui%2Fassociated-types%2Fissue-65774-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fissue-65774-1.stderr?ref=8bc558197862268f080e5df621e89f519a52950c", "patch": "@@ -13,7 +13,11 @@ error[E0277]: the trait bound `T: MyDisplay` is not satisfied\n LL |         let closure = |config: &mut <S as MPU>::MpuConfig| writer.my_write(&config);\n    |                                                                            ^^^^^^^ the trait `MyDisplay` is not implemented for `T`\n    |\n-   = note: required because of the requirements on the impl of `MyDisplay` for `&mut T`\n+note: required because of the requirements on the impl of `MyDisplay` for `&mut T`\n+  --> $DIR/issue-65774-1.rs:5:24\n+   |\n+LL | impl<'a, T: MyDisplay> MyDisplay for &'a mut T { }\n+   |                        ^^^^^^^^^     ^^^^^^^^^\n    = note: required for the cast to the object type `dyn MyDisplay`\n \n error: aborting due to 2 previous errors"}, {"sha": "50dfeffde7cf0a19ae2a73da0dbcf5168bcbacb4", "filename": "src/test/ui/async-await/issue-72590-type-error-sized.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8bc558197862268f080e5df621e89f519a52950c/src%2Ftest%2Fui%2Fasync-await%2Fissue-72590-type-error-sized.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8bc558197862268f080e5df621e89f519a52950c/src%2Ftest%2Fui%2Fasync-await%2Fissue-72590-type-error-sized.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-72590-type-error-sized.stderr?ref=8bc558197862268f080e5df621e89f519a52950c", "patch": "@@ -17,7 +17,11 @@ LL |     async fn frob(self) {}\n    |                   ^^^^ doesn't have a size known at compile-time\n    |\n    = help: within `Foo`, the trait `Sized` is not implemented for `str`\n-   = note: required because it appears within the type `Foo`\n+note: required because it appears within the type `Foo`\n+  --> $DIR/issue-72590-type-error-sized.rs:5:8\n+   |\n+LL | struct Foo {\n+   |        ^^^\n    = help: unsized fn params are gated as an unstable feature\n help: function arguments must have a statically known size, borrowed types always have a known size\n    |"}, {"sha": "6ce70336d0c63c8ec6c6c2506dfd31acd2527980", "filename": "src/test/ui/async-await/pin-needed-to-poll-2.rs", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/8bc558197862268f080e5df621e89f519a52950c/src%2Ftest%2Fui%2Fasync-await%2Fpin-needed-to-poll-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bc558197862268f080e5df621e89f519a52950c/src%2Ftest%2Fui%2Fasync-await%2Fpin-needed-to-poll-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fpin-needed-to-poll-2.rs?ref=8bc558197862268f080e5df621e89f519a52950c", "patch": "@@ -0,0 +1,48 @@\n+use std::{\n+    future::Future,\n+    pin::Pin,\n+    marker::Unpin,\n+    task::{Context, Poll},\n+};\n+\n+struct Sleep(std::marker::PhantomPinned);\n+\n+impl Future for Sleep {\n+    type Output = ();\n+\n+    fn poll(self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<Self::Output> {\n+        Poll::Ready(())\n+    }\n+}\n+\n+impl Drop for Sleep {\n+    fn drop(&mut self) {}\n+}\n+\n+fn sleep() -> Sleep {\n+    Sleep(std::marker::PhantomPinned)\n+}\n+\n+\n+struct MyFuture {\n+    sleep: Sleep,\n+}\n+\n+impl MyFuture {\n+    fn new() -> Self {\n+        Self {\n+            sleep: sleep(),\n+        }\n+    }\n+}\n+\n+impl Future for MyFuture {\n+    type Output = ();\n+\n+    fn poll(mut self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<Self::Output> {\n+        Pin::new(&mut self.sleep).poll(cx)\n+        //~^ ERROR `PhantomPinned` cannot be unpinned\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "31007cb40285ef5bc8243cc00e6b5a6a48869a98", "filename": "src/test/ui/async-await/pin-needed-to-poll-2.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/8bc558197862268f080e5df621e89f519a52950c/src%2Ftest%2Fui%2Fasync-await%2Fpin-needed-to-poll-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8bc558197862268f080e5df621e89f519a52950c/src%2Ftest%2Fui%2Fasync-await%2Fpin-needed-to-poll-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fpin-needed-to-poll-2.stderr?ref=8bc558197862268f080e5df621e89f519a52950c", "patch": "@@ -0,0 +1,16 @@\n+error[E0277]: `PhantomPinned` cannot be unpinned\n+  --> $DIR/pin-needed-to-poll-2.rs:43:9\n+   |\n+LL |         Pin::new(&mut self.sleep).poll(cx)\n+   |         ^^^^^^^^ within `Sleep`, the trait `Unpin` is not implemented for `PhantomPinned`\n+   |\n+note: required because it appears within the type `Sleep`\n+  --> $DIR/pin-needed-to-poll-2.rs:8:8\n+   |\n+LL | struct Sleep(std::marker::PhantomPinned);\n+   |        ^^^^^\n+   = note: required by `Pin::<P>::new`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "397bdac60513e7f2d1a77e59bc5e9fa0f9c4bf1c", "filename": "src/test/ui/block-result/issue-22645.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8bc558197862268f080e5df621e89f519a52950c/src%2Ftest%2Fui%2Fblock-result%2Fissue-22645.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8bc558197862268f080e5df621e89f519a52950c/src%2Ftest%2Fui%2Fblock-result%2Fissue-22645.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fblock-result%2Fissue-22645.stderr?ref=8bc558197862268f080e5df621e89f519a52950c", "patch": "@@ -6,7 +6,11 @@ LL |   b + 3\n    |\n    = help: the following implementations were found:\n              <f64 as Scalar>\n-   = note: required because of the requirements on the impl of `Add<{integer}>` for `Bob`\n+note: required because of the requirements on the impl of `Add<{integer}>` for `Bob`\n+  --> $DIR/issue-22645.rs:8:19\n+   |\n+LL | impl<RHS: Scalar> Add <RHS> for Bob {\n+   |                   ^^^^^^^^^     ^^^\n \n error[E0308]: mismatched types\n   --> $DIR/issue-22645.rs:15:3"}, {"sha": "0d1d747272d1894412041736013c1fc330ef489c", "filename": "src/test/ui/builtin-superkinds/builtin-superkinds-in-metadata.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8bc558197862268f080e5df621e89f519a52950c/src%2Ftest%2Fui%2Fbuiltin-superkinds%2Fbuiltin-superkinds-in-metadata.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8bc558197862268f080e5df621e89f519a52950c/src%2Ftest%2Fui%2Fbuiltin-superkinds%2Fbuiltin-superkinds-in-metadata.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbuiltin-superkinds%2Fbuiltin-superkinds-in-metadata.stderr?ref=8bc558197862268f080e5df621e89f519a52950c", "patch": "@@ -9,7 +9,11 @@ LL | impl <T:Sync+'static> RequiresRequiresShareAndSend for X<T> { }\n LL | pub trait RequiresRequiresShareAndSend : RequiresShare + Send { }\n    |                                                          ---- required by this bound in `RequiresRequiresShareAndSend`\n    |\n-   = note: required because it appears within the type `X<T>`\n+note: required because it appears within the type `X<T>`\n+  --> $DIR/builtin-superkinds-in-metadata.rs:9:8\n+   |\n+LL | struct X<T>(T);\n+   |        ^\n help: consider further restricting this bound\n    |\n LL | impl <T:Sync+'static + std::marker::Send> RequiresRequiresShareAndSend for X<T> { }"}, {"sha": "2d52172a6fa532140d8e750c3cf29880f15ef34a", "filename": "src/test/ui/did_you_mean/recursion_limit.stderr", "status": "modified", "additions": 50, "deletions": 10, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/8bc558197862268f080e5df621e89f519a52950c/src%2Ftest%2Fui%2Fdid_you_mean%2Frecursion_limit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8bc558197862268f080e5df621e89f519a52950c/src%2Ftest%2Fui%2Fdid_you_mean%2Frecursion_limit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Frecursion_limit.stderr?ref=8bc558197862268f080e5df621e89f519a52950c", "patch": "@@ -8,16 +8,56 @@ LL |     is_send::<A>();\n    |     ^^^^^^^^^^^^\n    |\n    = help: consider adding a `#![recursion_limit=\"20\"]` attribute to your crate (`recursion_limit`)\n-   = note: required because it appears within the type `J`\n-   = note: required because it appears within the type `I`\n-   = note: required because it appears within the type `H`\n-   = note: required because it appears within the type `G`\n-   = note: required because it appears within the type `F`\n-   = note: required because it appears within the type `E`\n-   = note: required because it appears within the type `D`\n-   = note: required because it appears within the type `C`\n-   = note: required because it appears within the type `B`\n-   = note: required because it appears within the type `A`\n+note: required because it appears within the type `J`\n+  --> $DIR/recursion_limit.rs:24:9\n+   |\n+LL | link! { J, K }\n+   |         ^\n+note: required because it appears within the type `I`\n+  --> $DIR/recursion_limit.rs:23:9\n+   |\n+LL | link! { I, J }\n+   |         ^\n+note: required because it appears within the type `H`\n+  --> $DIR/recursion_limit.rs:22:9\n+   |\n+LL | link! { H, I }\n+   |         ^\n+note: required because it appears within the type `G`\n+  --> $DIR/recursion_limit.rs:21:9\n+   |\n+LL | link! { G, H }\n+   |         ^\n+note: required because it appears within the type `F`\n+  --> $DIR/recursion_limit.rs:20:9\n+   |\n+LL | link! { F, G }\n+   |         ^\n+note: required because it appears within the type `E`\n+  --> $DIR/recursion_limit.rs:19:9\n+   |\n+LL | link! { E, F }\n+   |         ^\n+note: required because it appears within the type `D`\n+  --> $DIR/recursion_limit.rs:18:9\n+   |\n+LL | link! { D, E }\n+   |         ^\n+note: required because it appears within the type `C`\n+  --> $DIR/recursion_limit.rs:17:9\n+   |\n+LL | link! { C, D }\n+   |         ^\n+note: required because it appears within the type `B`\n+  --> $DIR/recursion_limit.rs:16:9\n+   |\n+LL | link! { B, C }\n+   |         ^\n+note: required because it appears within the type `A`\n+  --> $DIR/recursion_limit.rs:15:9\n+   |\n+LL | link! { A, B }\n+   |         ^\n \n error: aborting due to previous error\n "}, {"sha": "71e57b3e062b4d15837f36c584d266207f86dfb6", "filename": "src/test/ui/dst/dst-bad-deep.stderr", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8bc558197862268f080e5df621e89f519a52950c/src%2Ftest%2Fui%2Fdst%2Fdst-bad-deep.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8bc558197862268f080e5df621e89f519a52950c/src%2Ftest%2Fui%2Fdst%2Fdst-bad-deep.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdst%2Fdst-bad-deep.stderr?ref=8bc558197862268f080e5df621e89f519a52950c", "patch": "@@ -5,8 +5,16 @@ LL |     let h: &Fat<Fat<[isize]>> = &Fat { ptr: *g };\n    |                                  ^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: within `Fat<Fat<[isize]>>`, the trait `Sized` is not implemented for `[isize]`\n-   = note: required because it appears within the type `Fat<[isize]>`\n-   = note: required because it appears within the type `Fat<Fat<[isize]>>`\n+note: required because it appears within the type `Fat<[isize]>`\n+  --> $DIR/dst-bad-deep.rs:6:8\n+   |\n+LL | struct Fat<T: ?Sized> {\n+   |        ^^^\n+note: required because it appears within the type `Fat<Fat<[isize]>>`\n+  --> $DIR/dst-bad-deep.rs:6:8\n+   |\n+LL | struct Fat<T: ?Sized> {\n+   |        ^^^\n    = note: structs must have a statically known size to be initialized\n \n error: aborting due to previous error"}, {"sha": "390c1e3e8ea4a9695f4ccae9240562a7597414dc", "filename": "src/test/ui/error-codes/E0275.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8bc558197862268f080e5df621e89f519a52950c/src%2Ftest%2Fui%2Ferror-codes%2FE0275.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8bc558197862268f080e5df621e89f519a52950c/src%2Ftest%2Fui%2Ferror-codes%2FE0275.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0275.stderr?ref=8bc558197862268f080e5df621e89f519a52950c", "patch": "@@ -8,7 +8,11 @@ LL | impl<T> Foo for T where Bar<T>: Foo {}\n    |                                 ^^^\n    |\n    = help: consider adding a `#![recursion_limit=\"256\"]` attribute to your crate (`E0275`)\n-   = note: required because of the requirements on the impl of `Foo` for `Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<T>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>`\n+note: required because of the requirements on the impl of `Foo` for `Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<T>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>`\n+  --> $DIR/E0275.rs:5:9\n+   |\n+LL | impl<T> Foo for T where Bar<T>: Foo {}\n+   |         ^^^     ^\n    = note: 127 redundant requirements hidden\n    = note: required because of the requirements on the impl of `Foo` for `Bar<T>`\n "}, {"sha": "afd0e032dc3b3913be058121ba39a49ca0023f88", "filename": "src/test/ui/error-codes/E0277-2.stderr", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/8bc558197862268f080e5df621e89f519a52950c/src%2Ftest%2Fui%2Ferror-codes%2FE0277-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8bc558197862268f080e5df621e89f519a52950c/src%2Ftest%2Fui%2Ferror-codes%2FE0277-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0277-2.stderr?ref=8bc558197862268f080e5df621e89f519a52950c", "patch": "@@ -8,9 +8,21 @@ LL |     is_send::<Foo>();\n    |     ^^^^^^^^^^^^^^ `*const u8` cannot be sent between threads safely\n    |\n    = help: within `Foo`, the trait `Send` is not implemented for `*const u8`\n-   = note: required because it appears within the type `Baz`\n-   = note: required because it appears within the type `Bar`\n-   = note: required because it appears within the type `Foo`\n+note: required because it appears within the type `Baz`\n+  --> $DIR/E0277-2.rs:9:8\n+   |\n+LL | struct Baz {\n+   |        ^^^\n+note: required because it appears within the type `Bar`\n+  --> $DIR/E0277-2.rs:5:8\n+   |\n+LL | struct Bar {\n+   |        ^^^\n+note: required because it appears within the type `Foo`\n+  --> $DIR/E0277-2.rs:1:8\n+   |\n+LL | struct Foo {\n+   |        ^^^\n \n error: aborting due to previous error\n "}, {"sha": "72e4be51822e20a690d59758bafddcabca1d4b70", "filename": "src/test/ui/extern/extern-types-unsized.stderr", "status": "modified", "additions": 20, "deletions": 4, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/8bc558197862268f080e5df621e89f519a52950c/src%2Ftest%2Fui%2Fextern%2Fextern-types-unsized.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8bc558197862268f080e5df621e89f519a52950c/src%2Ftest%2Fui%2Fextern%2Fextern-types-unsized.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fextern%2Fextern-types-unsized.stderr?ref=8bc558197862268f080e5df621e89f519a52950c", "patch": "@@ -23,7 +23,11 @@ LL |     assert_sized::<Foo>();\n    |     ^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: within `Foo`, the trait `Sized` is not implemented for `A`\n-   = note: required because it appears within the type `Foo`\n+note: required because it appears within the type `Foo`\n+  --> $DIR/extern-types-unsized.rs:9:8\n+   |\n+LL | struct Foo {\n+   |        ^^^\n help: consider relaxing the implicit `Sized` restriction\n    |\n LL | fn assert_sized<T: ?Sized>() {}\n@@ -39,7 +43,11 @@ LL |     assert_sized::<Bar<A>>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: within `Bar<A>`, the trait `Sized` is not implemented for `A`\n-   = note: required because it appears within the type `Bar<A>`\n+note: required because it appears within the type `Bar<A>`\n+  --> $DIR/extern-types-unsized.rs:14:8\n+   |\n+LL | struct Bar<T: ?Sized> {\n+   |        ^^^\n help: consider relaxing the implicit `Sized` restriction\n    |\n LL | fn assert_sized<T: ?Sized>() {}\n@@ -55,8 +63,16 @@ LL |     assert_sized::<Bar<Bar<A>>>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: within `Bar<Bar<A>>`, the trait `Sized` is not implemented for `A`\n-   = note: required because it appears within the type `Bar<A>`\n-   = note: required because it appears within the type `Bar<Bar<A>>`\n+note: required because it appears within the type `Bar<A>`\n+  --> $DIR/extern-types-unsized.rs:14:8\n+   |\n+LL | struct Bar<T: ?Sized> {\n+   |        ^^^\n+note: required because it appears within the type `Bar<Bar<A>>`\n+  --> $DIR/extern-types-unsized.rs:14:8\n+   |\n+LL | struct Bar<T: ?Sized> {\n+   |        ^^^\n help: consider relaxing the implicit `Sized` restriction\n    |\n LL | fn assert_sized<T: ?Sized>() {}"}, {"sha": "78904b383f49a1c03283afbd652a8e9fdff2f275", "filename": "src/test/ui/feature-gates/feature-gate-trivial_bounds.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8bc558197862268f080e5df621e89f519a52950c/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-trivial_bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8bc558197862268f080e5df621e89f519a52950c/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-trivial_bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-trivial_bounds.stderr?ref=8bc558197862268f080e5df621e89f519a52950c", "patch": "@@ -107,7 +107,11 @@ LL | | }\n    | |_^ doesn't have a size known at compile-time\n    |\n    = help: within `Dst<(dyn A + 'static)>`, the trait `Sized` is not implemented for `(dyn A + 'static)`\n-   = note: required because it appears within the type `Dst<(dyn A + 'static)>`\n+note: required because it appears within the type `Dst<(dyn A + 'static)>`\n+  --> $DIR/feature-gate-trivial_bounds.rs:48:8\n+   |\n+LL | struct Dst<X: ?Sized> {\n+   |        ^^^\n    = help: see issue #48214\n    = help: add `#![feature(trivial_bounds)]` to the crate attributes to enable\n "}, {"sha": "7b81beeed4167de4932195f63eeb64b4359c3182", "filename": "src/test/ui/hrtb/issue-62203-hrtb-ice.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8bc558197862268f080e5df621e89f519a52950c/src%2Ftest%2Fui%2Fhrtb%2Fissue-62203-hrtb-ice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8bc558197862268f080e5df621e89f519a52950c/src%2Ftest%2Fui%2Fhrtb%2Fissue-62203-hrtb-ice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fissue-62203-hrtb-ice.stderr?ref=8bc558197862268f080e5df621e89f519a52950c", "patch": "@@ -15,7 +15,11 @@ error[E0271]: type mismatch resolving `<[closure@$DIR/issue-62203-hrtb-ice.rs:42\n LL |     let v = Unit2.m(\n    |                   ^ expected struct `Unit4`, found struct `Unit3`\n    |\n-   = note: required because of the requirements on the impl of `for<'r> T0<'r, (<Unit2 as Ty<'r>>::V,)>` for `L<[closure@$DIR/issue-62203-hrtb-ice.rs:42:17: 42:39]>`\n+note: required because of the requirements on the impl of `for<'r> T0<'r, (<Unit2 as Ty<'r>>::V,)>` for `L<[closure@$DIR/issue-62203-hrtb-ice.rs:42:17: 42:39]>`\n+  --> $DIR/issue-62203-hrtb-ice.rs:17:16\n+   |\n+LL | impl<'a, A, T> T0<'a, A> for L<T>\n+   |                ^^^^^^^^^     ^^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "92d53088442e65b117c7f672fc32fd7078f4fffd", "filename": "src/test/ui/issues/issue-18400.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8bc558197862268f080e5df621e89f519a52950c/src%2Ftest%2Fui%2Fissues%2Fissue-18400.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8bc558197862268f080e5df621e89f519a52950c/src%2Ftest%2Fui%2Fissues%2Fissue-18400.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-18400.stderr?ref=8bc558197862268f080e5df621e89f519a52950c", "patch": "@@ -5,7 +5,11 @@ LL |     0.contains(bits);\n    |       ^^^^^^^^\n    |\n    = help: consider adding a `#![recursion_limit=\"256\"]` attribute to your crate (`issue_18400`)\n-   = note: required because of the requirements on the impl of `Set<&[_]>` for `{integer}`\n+note: required because of the requirements on the impl of `Set<&[_]>` for `{integer}`\n+  --> $DIR/issue-18400.rs:6:16\n+   |\n+LL | impl<'a, T, S> Set<&'a [T]> for S where\n+   |                ^^^^^^^^^^^^     ^\n    = note: 128 redundant requirements hidden\n    = note: required because of the requirements on the impl of `Set<&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[_]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]>` for `{integer}`\n "}, {"sha": "7fb1e3f2bba4f9db7f63cad177db4e371c1bc598", "filename": "src/test/ui/issues/issue-20413.stderr", "status": "modified", "additions": 50, "deletions": 10, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/8bc558197862268f080e5df621e89f519a52950c/src%2Ftest%2Fui%2Fissues%2Fissue-20413.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8bc558197862268f080e5df621e89f519a52950c/src%2Ftest%2Fui%2Fissues%2Fissue-20413.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-20413.stderr?ref=8bc558197862268f080e5df621e89f519a52950c", "patch": "@@ -16,7 +16,11 @@ LL | impl<T> Foo for T where NoData<T>: Foo {\n    |                                    ^^^\n    |\n    = help: consider adding a `#![recursion_limit=\"256\"]` attribute to your crate (`issue_20413`)\n-   = note: required because of the requirements on the impl of `Foo` for `NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<T>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>`\n+note: required because of the requirements on the impl of `Foo` for `NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<T>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>`\n+  --> $DIR/issue-20413.rs:8:9\n+   |\n+LL | impl<T> Foo for T where NoData<T>: Foo {\n+   |         ^^^     ^\n    = note: 127 redundant requirements hidden\n    = note: required because of the requirements on the impl of `Foo` for `NoData<T>`\n \n@@ -30,8 +34,16 @@ LL | impl<T> Bar for T where EvenLessData<T>: Baz {\n    |                                          ^^^\n    |\n    = help: consider adding a `#![recursion_limit=\"256\"]` attribute to your crate (`issue_20413`)\n-   = note: required because of the requirements on the impl of `Bar` for `AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<T>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>`\n-   = note: required because of the requirements on the impl of `Baz` for `EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<T>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>`\n+note: required because of the requirements on the impl of `Bar` for `AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<T>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>`\n+  --> $DIR/issue-20413.rs:28:9\n+   |\n+LL | impl<T> Bar for T where EvenLessData<T>: Baz {\n+   |         ^^^     ^\n+note: required because of the requirements on the impl of `Baz` for `EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<T>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>`\n+  --> $DIR/issue-20413.rs:36:9\n+   |\n+LL | impl<T> Baz for T where AlmostNoData<T>: Bar {\n+   |         ^^^     ^\n    = note: 126 redundant requirements hidden\n    = note: required because of the requirements on the impl of `Baz` for `EvenLessData<T>`\n \n@@ -45,8 +57,16 @@ LL | impl<T> Baz for T where AlmostNoData<T>: Bar {\n    |                                          ^^^\n    |\n    = help: consider adding a `#![recursion_limit=\"256\"]` attribute to your crate (`issue_20413`)\n-   = note: required because of the requirements on the impl of `Baz` for `EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<T>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>`\n-   = note: required because of the requirements on the impl of `Bar` for `AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<T>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>`\n+note: required because of the requirements on the impl of `Baz` for `EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<T>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>`\n+  --> $DIR/issue-20413.rs:36:9\n+   |\n+LL | impl<T> Baz for T where AlmostNoData<T>: Bar {\n+   |         ^^^     ^\n+note: required because of the requirements on the impl of `Bar` for `AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<T>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>`\n+  --> $DIR/issue-20413.rs:28:9\n+   |\n+LL | impl<T> Bar for T where EvenLessData<T>: Baz {\n+   |         ^^^     ^\n    = note: 126 redundant requirements hidden\n    = note: required because of the requirements on the impl of `Bar` for `AlmostNoData<T>`\n \n@@ -60,7 +80,11 @@ LL | impl<T> Foo for T where NoData<T>: Foo {\n    |                                    ^^^\n    |\n    = help: consider adding a `#![recursion_limit=\"256\"]` attribute to your crate (`issue_20413`)\n-   = note: required because of the requirements on the impl of `Foo` for `NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<T>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>`\n+note: required because of the requirements on the impl of `Foo` for `NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<T>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>`\n+  --> $DIR/issue-20413.rs:8:9\n+   |\n+LL | impl<T> Foo for T where NoData<T>: Foo {\n+   |         ^^^     ^\n    = note: 127 redundant requirements hidden\n    = note: required because of the requirements on the impl of `Foo` for `NoData<T>`\n \n@@ -74,8 +98,16 @@ LL | impl<T> Bar for T where EvenLessData<T>: Baz {\n    |                                          ^^^\n    |\n    = help: consider adding a `#![recursion_limit=\"256\"]` attribute to your crate (`issue_20413`)\n-   = note: required because of the requirements on the impl of `Bar` for `AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<T>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>`\n-   = note: required because of the requirements on the impl of `Baz` for `EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<T>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>`\n+note: required because of the requirements on the impl of `Bar` for `AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<T>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>`\n+  --> $DIR/issue-20413.rs:28:9\n+   |\n+LL | impl<T> Bar for T where EvenLessData<T>: Baz {\n+   |         ^^^     ^\n+note: required because of the requirements on the impl of `Baz` for `EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<T>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>`\n+  --> $DIR/issue-20413.rs:36:9\n+   |\n+LL | impl<T> Baz for T where AlmostNoData<T>: Bar {\n+   |         ^^^     ^\n    = note: 126 redundant requirements hidden\n    = note: required because of the requirements on the impl of `Baz` for `EvenLessData<T>`\n \n@@ -89,8 +121,16 @@ LL | impl<T> Baz for T where AlmostNoData<T>: Bar {\n    |                                          ^^^\n    |\n    = help: consider adding a `#![recursion_limit=\"256\"]` attribute to your crate (`issue_20413`)\n-   = note: required because of the requirements on the impl of `Baz` for `EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<T>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>`\n-   = note: required because of the requirements on the impl of `Bar` for `AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<T>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>`\n+note: required because of the requirements on the impl of `Baz` for `EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<T>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>`\n+  --> $DIR/issue-20413.rs:36:9\n+   |\n+LL | impl<T> Baz for T where AlmostNoData<T>: Bar {\n+   |         ^^^     ^\n+note: required because of the requirements on the impl of `Bar` for `AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<T>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>`\n+  --> $DIR/issue-20413.rs:28:9\n+   |\n+LL | impl<T> Bar for T where EvenLessData<T>: Baz {\n+   |         ^^^     ^\n    = note: 126 redundant requirements hidden\n    = note: required because of the requirements on the impl of `Bar` for `AlmostNoData<T>`\n "}, {"sha": "fd3db9546991c019c6263ec7d47d036577ae7141", "filename": "src/test/ui/issues/issue-22872.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8bc558197862268f080e5df621e89f519a52950c/src%2Ftest%2Fui%2Fissues%2Fissue-22872.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8bc558197862268f080e5df621e89f519a52950c/src%2Ftest%2Fui%2Fissues%2Fissue-22872.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-22872.stderr?ref=8bc558197862268f080e5df621e89f519a52950c", "patch": "@@ -5,7 +5,11 @@ LL |     let _: Box<dyn for<'b> Wrap<'b>> = Box::new(Wrapper(process));\n    |                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^ `<P as Process<'_>>::Item` is not an iterator\n    |\n    = help: the trait `Iterator` is not implemented for `<P as Process<'_>>::Item`\n-   = note: required because of the requirements on the impl of `for<'b> Wrap<'b>` for `Wrapper<P>`\n+note: required because of the requirements on the impl of `for<'b> Wrap<'b>` for `Wrapper<P>`\n+  --> $DIR/issue-22872.rs:7:13\n+   |\n+LL | impl<'b, P> Wrap<'b> for Wrapper<P>\n+   |             ^^^^^^^^     ^^^^^^^^^^\n    = note: required for the cast to the object type `dyn for<'b> Wrap<'b>`\n help: consider further restricting the associated type\n    |"}, {"sha": "5008a499986d43510a3c1ff8e11c51af82a6b31f", "filename": "src/test/ui/issues/issue-23122-2.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8bc558197862268f080e5df621e89f519a52950c/src%2Ftest%2Fui%2Fissues%2Fissue-23122-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8bc558197862268f080e5df621e89f519a52950c/src%2Ftest%2Fui%2Fissues%2Fissue-23122-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-23122-2.stderr?ref=8bc558197862268f080e5df621e89f519a52950c", "patch": "@@ -5,7 +5,11 @@ LL |     type Next = <GetNext<T::Next> as Next>::Next;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider adding a `#![recursion_limit=\"256\"]` attribute to your crate (`issue_23122_2`)\n-   = note: required because of the requirements on the impl of `Next` for `GetNext<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<T as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next>`\n+note: required because of the requirements on the impl of `Next` for `GetNext<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<T as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next>`\n+  --> $DIR/issue-23122-2.rs:8:15\n+   |\n+LL | impl<T: Next> Next for GetNext<T> {\n+   |               ^^^^     ^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "296efab7512f16709f9f2c3b01e855e5e2dd33e4", "filename": "src/test/ui/issues/issue-38821.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8bc558197862268f080e5df621e89f519a52950c/src%2Ftest%2Fui%2Fissues%2Fissue-38821.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8bc558197862268f080e5df621e89f519a52950c/src%2Ftest%2Fui%2Fissues%2Fissue-38821.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-38821.stderr?ref=8bc558197862268f080e5df621e89f519a52950c", "patch": "@@ -4,7 +4,11 @@ error[E0277]: the trait bound `<Col as Expression>::SqlType: NotNull` is not sat\n LL | #[derive(Debug, Copy, Clone)]\n    |                 ^^^^ the trait `NotNull` is not implemented for `<Col as Expression>::SqlType`\n    |\n-   = note: required because of the requirements on the impl of `IntoNullable` for `<Col as Expression>::SqlType`\n+note: required because of the requirements on the impl of `IntoNullable` for `<Col as Expression>::SqlType`\n+  --> $DIR/issue-38821.rs:9:18\n+   |\n+LL | impl<T: NotNull> IntoNullable for T {\n+   |                  ^^^^^^^^^^^^     ^\n    = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error"}, {"sha": "2a0693a581c319e9f85706e8387e66a075367c7f", "filename": "src/test/ui/issues/issue-39970.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8bc558197862268f080e5df621e89f519a52950c/src%2Ftest%2Fui%2Fissues%2Fissue-39970.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8bc558197862268f080e5df621e89f519a52950c/src%2Ftest%2Fui%2Fissues%2Fissue-39970.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-39970.stderr?ref=8bc558197862268f080e5df621e89f519a52950c", "patch": "@@ -7,7 +7,11 @@ LL |     fn visit() {}\n LL |     <() as Visit>::visit();\n    |     ^^^^^^^^^^^^^^^^^^^^ expected `()`, found `&()`\n    |\n-   = note: required because of the requirements on the impl of `Visit` for `()`\n+note: required because of the requirements on the impl of `Visit` for `()`\n+  --> $DIR/issue-39970.rs:13:6\n+   |\n+LL | impl Visit for () where\n+   |      ^^^^^     ^^\n \n error: aborting due to previous error\n "}, {"sha": "38c3af935c56455418e70338622ba1005f1820b9", "filename": "src/test/ui/issues/issue-40827.stderr", "status": "modified", "additions": 20, "deletions": 4, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/8bc558197862268f080e5df621e89f519a52950c/src%2Ftest%2Fui%2Fissues%2Fissue-40827.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8bc558197862268f080e5df621e89f519a52950c/src%2Ftest%2Fui%2Fissues%2Fissue-40827.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-40827.stderr?ref=8bc558197862268f080e5df621e89f519a52950c", "patch": "@@ -8,9 +8,17 @@ LL |     f(Foo(Arc::new(Bar::B(None))));\n    |     ^ `Rc<Foo>` cannot be shared between threads safely\n    |\n    = help: within `Bar`, the trait `Sync` is not implemented for `Rc<Foo>`\n-   = note: required because it appears within the type `Bar`\n+note: required because it appears within the type `Bar`\n+  --> $DIR/issue-40827.rs:6:6\n+   |\n+LL | enum Bar {\n+   |      ^^^\n    = note: required because of the requirements on the impl of `Send` for `Arc<Bar>`\n-   = note: required because it appears within the type `Foo`\n+note: required because it appears within the type `Foo`\n+  --> $DIR/issue-40827.rs:4:8\n+   |\n+LL | struct Foo(Arc<Bar>);\n+   |        ^^^\n \n error[E0277]: `Rc<Foo>` cannot be sent between threads safely\n   --> $DIR/issue-40827.rs:14:5\n@@ -22,9 +30,17 @@ LL |     f(Foo(Arc::new(Bar::B(None))));\n    |     ^ `Rc<Foo>` cannot be sent between threads safely\n    |\n    = help: within `Bar`, the trait `Send` is not implemented for `Rc<Foo>`\n-   = note: required because it appears within the type `Bar`\n+note: required because it appears within the type `Bar`\n+  --> $DIR/issue-40827.rs:6:6\n+   |\n+LL | enum Bar {\n+   |      ^^^\n    = note: required because of the requirements on the impl of `Send` for `Arc<Bar>`\n-   = note: required because it appears within the type `Foo`\n+note: required because it appears within the type `Foo`\n+  --> $DIR/issue-40827.rs:4:8\n+   |\n+LL | struct Foo(Arc<Bar>);\n+   |        ^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "48879eb798f0615aee569de2292ad5f3710927fe", "filename": "src/test/ui/issues/issue-5883.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8bc558197862268f080e5df621e89f519a52950c/src%2Ftest%2Fui%2Fissues%2Fissue-5883.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8bc558197862268f080e5df621e89f519a52950c/src%2Ftest%2Fui%2Fissues%2Fissue-5883.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-5883.stderr?ref=8bc558197862268f080e5df621e89f519a52950c", "patch": "@@ -21,7 +21,11 @@ LL |     Struct { r: r }\n    |     --------------- this returned value is of type `Struct`\n    |\n    = help: within `Struct`, the trait `Sized` is not implemented for `(dyn A + 'static)`\n-   = note: required because it appears within the type `Struct`\n+note: required because it appears within the type `Struct`\n+  --> $DIR/issue-5883.rs:3:8\n+   |\n+LL | struct Struct {\n+   |        ^^^^^^\n    = note: the return type of a function must have a statically known size\n \n error: aborting due to 2 previous errors"}, {"sha": "98ed67507b1d847433ce20bf2afc5239b633b71d", "filename": "src/test/ui/issues/issue-7013.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8bc558197862268f080e5df621e89f519a52950c/src%2Ftest%2Fui%2Fissues%2Fissue-7013.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8bc558197862268f080e5df621e89f519a52950c/src%2Ftest%2Fui%2Fissues%2Fissue-7013.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-7013.stderr?ref=8bc558197862268f080e5df621e89f519a52950c", "patch": "@@ -6,7 +6,11 @@ LL |     let a = A {v: box B{v: None} as Box<dyn Foo + Send>};\n    |\n    = help: within `B`, the trait `Send` is not implemented for `Rc<RefCell<A>>`\n    = note: required because it appears within the type `Option<Rc<RefCell<A>>>`\n-   = note: required because it appears within the type `B`\n+note: required because it appears within the type `B`\n+  --> $DIR/issue-7013.rs:10:8\n+   |\n+LL | struct B {\n+   |        ^\n    = note: required for the cast to the object type `dyn Foo + Send`\n \n error: aborting due to previous error"}, {"sha": "c635ebdbb7f46cd31cd9b730201a853ed2cb2501", "filename": "src/test/ui/kindck/kindck-impl-type-params-2.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8bc558197862268f080e5df621e89f519a52950c/src%2Ftest%2Fui%2Fkindck%2Fkindck-impl-type-params-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8bc558197862268f080e5df621e89f519a52950c/src%2Ftest%2Fui%2Fkindck%2Fkindck-impl-type-params-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fkindck%2Fkindck-impl-type-params-2.stderr?ref=8bc558197862268f080e5df621e89f519a52950c", "patch": "@@ -7,7 +7,11 @@ LL | fn take_param<T:Foo>(foo: &T) { }\n LL |     take_param(&x);\n    |                ^^ the trait `Copy` is not implemented for `Box<{integer}>`\n    |\n-   = note: required because of the requirements on the impl of `Foo` for `Box<{integer}>`\n+note: required because of the requirements on the impl of `Foo` for `Box<{integer}>`\n+  --> $DIR/kindck-impl-type-params-2.rs:6:14\n+   |\n+LL | impl<T:Copy> Foo for T {\n+   |              ^^^     ^\n \n error: aborting due to previous error\n "}, {"sha": "241fe367fd339cfc70bc24263df6144d74c66f9f", "filename": "src/test/ui/kindck/kindck-impl-type-params.stderr", "status": "modified", "additions": 30, "deletions": 6, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/8bc558197862268f080e5df621e89f519a52950c/src%2Ftest%2Fui%2Fkindck%2Fkindck-impl-type-params.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8bc558197862268f080e5df621e89f519a52950c/src%2Ftest%2Fui%2Fkindck%2Fkindck-impl-type-params.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fkindck%2Fkindck-impl-type-params.stderr?ref=8bc558197862268f080e5df621e89f519a52950c", "patch": "@@ -4,7 +4,11 @@ error[E0277]: `T` cannot be sent between threads safely\n LL |     let a = &t as &dyn Gettable<T>;\n    |             ^^ `T` cannot be sent between threads safely\n    |\n-   = note: required because of the requirements on the impl of `Gettable<T>` for `S<T>`\n+note: required because of the requirements on the impl of `Gettable<T>` for `S<T>`\n+  --> $DIR/kindck-impl-type-params.rs:14:32\n+   |\n+LL | impl<T: Send + Copy + 'static> Gettable<T> for S<T> {}\n+   |                                ^^^^^^^^^^^     ^^^^\n    = note: required for the cast to the object type `dyn Gettable<T>`\n help: consider restricting type parameter `T`\n    |\n@@ -17,7 +21,11 @@ error[E0277]: the trait bound `T: Copy` is not satisfied\n LL |     let a = &t as &dyn Gettable<T>;\n    |             ^^ the trait `Copy` is not implemented for `T`\n    |\n-   = note: required because of the requirements on the impl of `Gettable<T>` for `S<T>`\n+note: required because of the requirements on the impl of `Gettable<T>` for `S<T>`\n+  --> $DIR/kindck-impl-type-params.rs:14:32\n+   |\n+LL | impl<T: Send + Copy + 'static> Gettable<T> for S<T> {}\n+   |                                ^^^^^^^^^^^     ^^^^\n    = note: required for the cast to the object type `dyn Gettable<T>`\n help: consider restricting type parameter `T`\n    |\n@@ -30,7 +38,11 @@ error[E0277]: `T` cannot be sent between threads safely\n LL |     let a: &dyn Gettable<T> = &t;\n    |                               ^^ `T` cannot be sent between threads safely\n    |\n-   = note: required because of the requirements on the impl of `Gettable<T>` for `S<T>`\n+note: required because of the requirements on the impl of `Gettable<T>` for `S<T>`\n+  --> $DIR/kindck-impl-type-params.rs:14:32\n+   |\n+LL | impl<T: Send + Copy + 'static> Gettable<T> for S<T> {}\n+   |                                ^^^^^^^^^^^     ^^^^\n    = note: required for the cast to the object type `dyn Gettable<T>`\n help: consider restricting type parameter `T`\n    |\n@@ -43,7 +55,11 @@ error[E0277]: the trait bound `T: Copy` is not satisfied\n LL |     let a: &dyn Gettable<T> = &t;\n    |                               ^^ the trait `Copy` is not implemented for `T`\n    |\n-   = note: required because of the requirements on the impl of `Gettable<T>` for `S<T>`\n+note: required because of the requirements on the impl of `Gettable<T>` for `S<T>`\n+  --> $DIR/kindck-impl-type-params.rs:14:32\n+   |\n+LL | impl<T: Send + Copy + 'static> Gettable<T> for S<T> {}\n+   |                                ^^^^^^^^^^^     ^^^^\n    = note: required for the cast to the object type `dyn Gettable<T>`\n help: consider restricting type parameter `T`\n    |\n@@ -64,7 +80,11 @@ error[E0277]: the trait bound `String: Copy` is not satisfied\n LL |     let a = t as Box<dyn Gettable<String>>;\n    |             ^ the trait `Copy` is not implemented for `String`\n    |\n-   = note: required because of the requirements on the impl of `Gettable<String>` for `S<String>`\n+note: required because of the requirements on the impl of `Gettable<String>` for `S<String>`\n+  --> $DIR/kindck-impl-type-params.rs:14:32\n+   |\n+LL | impl<T: Send + Copy + 'static> Gettable<T> for S<T> {}\n+   |                                ^^^^^^^^^^^     ^^^^\n    = note: required for the cast to the object type `dyn Gettable<String>`\n \n error[E0277]: the trait bound `Foo: Copy` is not satisfied\n@@ -73,7 +93,11 @@ error[E0277]: the trait bound `Foo: Copy` is not satisfied\n LL |     let a: Box<dyn Gettable<Foo>> = t;\n    |                                     ^ the trait `Copy` is not implemented for `Foo`\n    |\n-   = note: required because of the requirements on the impl of `Gettable<Foo>` for `S<Foo>`\n+note: required because of the requirements on the impl of `Gettable<Foo>` for `S<Foo>`\n+  --> $DIR/kindck-impl-type-params.rs:14:32\n+   |\n+LL | impl<T: Send + Copy + 'static> Gettable<T> for S<T> {}\n+   |                                ^^^^^^^^^^^     ^^^^\n    = note: required for the cast to the object type `dyn Gettable<Foo>`\n \n error: aborting due to 7 previous errors"}, {"sha": "86eaca83f20400eb6abfa253a3b9df8f4c2ca638", "filename": "src/test/ui/kindck/kindck-inherited-copy-bound.curr.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8bc558197862268f080e5df621e89f519a52950c/src%2Ftest%2Fui%2Fkindck%2Fkindck-inherited-copy-bound.curr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8bc558197862268f080e5df621e89f519a52950c/src%2Ftest%2Fui%2Fkindck%2Fkindck-inherited-copy-bound.curr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fkindck%2Fkindck-inherited-copy-bound.curr.stderr?ref=8bc558197862268f080e5df621e89f519a52950c", "patch": "@@ -7,7 +7,11 @@ LL | fn take_param<T:Foo>(foo: &T) { }\n LL |     take_param(&x);\n    |                ^^ the trait `Copy` is not implemented for `Box<{integer}>`\n    |\n-   = note: required because of the requirements on the impl of `Foo` for `Box<{integer}>`\n+note: required because of the requirements on the impl of `Foo` for `Box<{integer}>`\n+  --> $DIR/kindck-inherited-copy-bound.rs:14:14\n+   |\n+LL | impl<T:Copy> Foo for T {\n+   |              ^^^     ^\n \n error[E0038]: the trait `Foo` cannot be made into an object\n   --> $DIR/kindck-inherited-copy-bound.rs:28:19"}, {"sha": "49c5cd40b589a191f761f7617f666a259048e6fb", "filename": "src/test/ui/kindck/kindck-inherited-copy-bound.object_safe_for_dispatch.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8bc558197862268f080e5df621e89f519a52950c/src%2Ftest%2Fui%2Fkindck%2Fkindck-inherited-copy-bound.object_safe_for_dispatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8bc558197862268f080e5df621e89f519a52950c/src%2Ftest%2Fui%2Fkindck%2Fkindck-inherited-copy-bound.object_safe_for_dispatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fkindck%2Fkindck-inherited-copy-bound.object_safe_for_dispatch.stderr?ref=8bc558197862268f080e5df621e89f519a52950c", "patch": "@@ -7,7 +7,11 @@ LL | fn take_param<T:Foo>(foo: &T) { }\n LL |     take_param(&x);\n    |                ^^ the trait `Copy` is not implemented for `Box<{integer}>`\n    |\n-   = note: required because of the requirements on the impl of `Foo` for `Box<{integer}>`\n+note: required because of the requirements on the impl of `Foo` for `Box<{integer}>`\n+  --> $DIR/kindck-inherited-copy-bound.rs:14:14\n+   |\n+LL | impl<T:Copy> Foo for T {\n+   |              ^^^     ^\n \n error[E0038]: the trait `Foo` cannot be made into an object\n   --> $DIR/kindck-inherited-copy-bound.rs:28:13"}, {"sha": "5b26f94115ac9ce250c508e62431be9d07636e04", "filename": "src/test/ui/mut/mutable-enum-indirect.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8bc558197862268f080e5df621e89f519a52950c/src%2Ftest%2Fui%2Fmut%2Fmutable-enum-indirect.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8bc558197862268f080e5df621e89f519a52950c/src%2Ftest%2Fui%2Fmut%2Fmutable-enum-indirect.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmut%2Fmutable-enum-indirect.stderr?ref=8bc558197862268f080e5df621e89f519a52950c", "patch": "@@ -8,7 +8,11 @@ LL |     bar(&x);\n    |     ^^^ `NoSync` cannot be shared between threads safely\n    |\n    = help: within `&Foo`, the trait `Sync` is not implemented for `NoSync`\n-   = note: required because it appears within the type `Foo`\n+note: required because it appears within the type `Foo`\n+  --> $DIR/mutable-enum-indirect.rs:11:6\n+   |\n+LL | enum Foo { A(NoSync) }\n+   |      ^^^\n    = note: required because it appears within the type `&Foo`\n \n error: aborting due to previous error"}, {"sha": "2ee32029b40dc7fba74392577eb1838c24759eb3", "filename": "src/test/ui/no-send-res-ports.stderr", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8bc558197862268f080e5df621e89f519a52950c/src%2Ftest%2Fui%2Fno-send-res-ports.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8bc558197862268f080e5df621e89f519a52950c/src%2Ftest%2Fui%2Fno-send-res-ports.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fno-send-res-ports.stderr?ref=8bc558197862268f080e5df621e89f519a52950c", "patch": "@@ -17,8 +17,16 @@ LL |       F: Send + 'static,\n    |          ---- required by this bound in `spawn`\n    |\n    = help: within `[closure@$DIR/no-send-res-ports.rs:25:19: 29:6]`, the trait `Send` is not implemented for `Rc<()>`\n-   = note: required because it appears within the type `Port<()>`\n-   = note: required because it appears within the type `Foo`\n+note: required because it appears within the type `Port<()>`\n+  --> $DIR/no-send-res-ports.rs:5:8\n+   |\n+LL | struct Port<T>(Rc<T>);\n+   |        ^^^^\n+note: required because it appears within the type `Foo`\n+  --> $DIR/no-send-res-ports.rs:9:12\n+   |\n+LL |     struct Foo {\n+   |            ^^^\n    = note: required because it appears within the type `[closure@$DIR/no-send-res-ports.rs:25:19: 29:6]`\n \n error: aborting due to previous error"}, {"sha": "9d755839d37c1adcc30d4ef129ad6dde0668cb81", "filename": "src/test/ui/no_send-enum.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8bc558197862268f080e5df621e89f519a52950c/src%2Ftest%2Fui%2Fno_send-enum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8bc558197862268f080e5df621e89f519a52950c/src%2Ftest%2Fui%2Fno_send-enum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fno_send-enum.stderr?ref=8bc558197862268f080e5df621e89f519a52950c", "patch": "@@ -8,7 +8,11 @@ LL |     bar(x);\n    |     ^^^ `NoSend` cannot be sent between threads safely\n    |\n    = help: within `Foo`, the trait `Send` is not implemented for `NoSend`\n-   = note: required because it appears within the type `Foo`\n+note: required because it appears within the type `Foo`\n+  --> $DIR/no_send-enum.rs:8:6\n+   |\n+LL | enum Foo {\n+   |      ^^^\n \n error: aborting due to previous error\n "}, {"sha": "a8ab69200ecf1dab5fe468ff0b4bc3b49f271196", "filename": "src/test/ui/no_share-enum.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8bc558197862268f080e5df621e89f519a52950c/src%2Ftest%2Fui%2Fno_share-enum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8bc558197862268f080e5df621e89f519a52950c/src%2Ftest%2Fui%2Fno_share-enum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fno_share-enum.stderr?ref=8bc558197862268f080e5df621e89f519a52950c", "patch": "@@ -8,7 +8,11 @@ LL |     bar(x);\n    |     ^^^ `NoSync` cannot be shared between threads safely\n    |\n    = help: within `Foo`, the trait `Sync` is not implemented for `NoSync`\n-   = note: required because it appears within the type `Foo`\n+note: required because it appears within the type `Foo`\n+  --> $DIR/no_share-enum.rs:8:6\n+   |\n+LL | enum Foo { A(NoSync) }\n+   |      ^^^\n \n error: aborting due to previous error\n "}, {"sha": "de13176ddc2a54d9b1f0b9b53d3833b63fc261fd", "filename": "src/test/ui/phantom-auto-trait.stderr", "status": "modified", "additions": 25, "deletions": 5, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/8bc558197862268f080e5df621e89f519a52950c/src%2Ftest%2Fui%2Fphantom-auto-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8bc558197862268f080e5df621e89f519a52950c/src%2Ftest%2Fui%2Fphantom-auto-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fphantom-auto-trait.stderr?ref=8bc558197862268f080e5df621e89f519a52950c", "patch": "@@ -7,9 +7,17 @@ LL | fn is_zen<T: Zen>(_: T) {}\n LL |     is_zen(x)\n    |            ^ `T` cannot be shared between threads safely\n    |\n-   = note: required because of the requirements on the impl of `Zen` for `&T`\n+note: required because of the requirements on the impl of `Zen` for `&T`\n+  --> $DIR/phantom-auto-trait.rs:10:24\n+   |\n+LL | unsafe impl<'a, T: 'a> Zen for &'a T where T: Sync {}\n+   |                        ^^^     ^^^^^\n    = note: required because it appears within the type `PhantomData<&T>`\n-   = note: required because it appears within the type `Guard<'_, T>`\n+note: required because it appears within the type `Guard<'_, T>`\n+  --> $DIR/phantom-auto-trait.rs:12:8\n+   |\n+LL | struct Guard<'a, T: 'a> {\n+   |        ^^^^^\n help: consider restricting type parameter `T`\n    |\n LL | fn not_sync<T: std::marker::Sync>(x: Guard<T>) {\n@@ -24,10 +32,22 @@ LL | fn is_zen<T: Zen>(_: T) {}\n LL |     is_zen(x)\n    |            ^ `T` cannot be shared between threads safely\n    |\n-   = note: required because of the requirements on the impl of `Zen` for `&T`\n+note: required because of the requirements on the impl of `Zen` for `&T`\n+  --> $DIR/phantom-auto-trait.rs:10:24\n+   |\n+LL | unsafe impl<'a, T: 'a> Zen for &'a T where T: Sync {}\n+   |                        ^^^     ^^^^^\n    = note: required because it appears within the type `PhantomData<&T>`\n-   = note: required because it appears within the type `Guard<'_, T>`\n-   = note: required because it appears within the type `Nested<Guard<'_, T>>`\n+note: required because it appears within the type `Guard<'_, T>`\n+  --> $DIR/phantom-auto-trait.rs:12:8\n+   |\n+LL | struct Guard<'a, T: 'a> {\n+   |        ^^^^^\n+note: required because it appears within the type `Nested<Guard<'_, T>>`\n+  --> $DIR/phantom-auto-trait.rs:16:8\n+   |\n+LL | struct Nested<T>(T);\n+   |        ^^^^^^\n help: consider restricting type parameter `T`\n    |\n LL | fn nested_not_sync<T: std::marker::Sync>(x: Nested<Guard<T>>) {"}, {"sha": "0518cc507b50bdbbb9931419ff7c8befbd047c92", "filename": "src/test/ui/recursion/recursive-requirements.stderr", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/8bc558197862268f080e5df621e89f519a52950c/src%2Ftest%2Fui%2Frecursion%2Frecursive-requirements.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8bc558197862268f080e5df621e89f519a52950c/src%2Ftest%2Fui%2Frecursion%2Frecursive-requirements.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frecursion%2Frecursive-requirements.stderr?ref=8bc558197862268f080e5df621e89f519a52950c", "patch": "@@ -8,7 +8,11 @@ LL |     let _: AssertSync<Foo> = unimplemented!();\n    |            ^^^^^^^^^^^^^^^ `*const Bar` cannot be shared between threads safely\n    |\n    = help: within `Foo`, the trait `Sync` is not implemented for `*const Bar`\n-   = note: required because it appears within the type `Foo`\n+note: required because it appears within the type `Foo`\n+  --> $DIR/recursive-requirements.rs:5:12\n+   |\n+LL | pub struct Foo {\n+   |            ^^^\n \n error[E0277]: `*const Foo` cannot be shared between threads safely\n   --> $DIR/recursive-requirements.rs:16:12\n@@ -20,9 +24,17 @@ LL |     let _: AssertSync<Foo> = unimplemented!();\n    |            ^^^^^^^^^^^^^^^ `*const Foo` cannot be shared between threads safely\n    |\n    = help: within `Foo`, the trait `Sync` is not implemented for `*const Foo`\n-   = note: required because it appears within the type `Bar`\n+note: required because it appears within the type `Bar`\n+  --> $DIR/recursive-requirements.rs:10:12\n+   |\n+LL | pub struct Bar {\n+   |            ^^^\n    = note: required because it appears within the type `PhantomData<Bar>`\n-   = note: required because it appears within the type `Foo`\n+note: required because it appears within the type `Foo`\n+  --> $DIR/recursive-requirements.rs:5:12\n+   |\n+LL | pub struct Foo {\n+   |            ^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "a93f27ff051fc343d5f909c2d393a799cfb2ad87", "filename": "src/test/ui/specialization/issue-38091-2.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8bc558197862268f080e5df621e89f519a52950c/src%2Ftest%2Fui%2Fspecialization%2Fissue-38091-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8bc558197862268f080e5df621e89f519a52950c/src%2Ftest%2Fui%2Fspecialization%2Fissue-38091-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fissue-38091-2.stderr?ref=8bc558197862268f080e5df621e89f519a52950c", "patch": "@@ -10,7 +10,11 @@ LL | #![feature(specialization)]\n \n error[E0275]: overflow evaluating the requirement `i32: Check`\n    |\n-   = note: required because of the requirements on the impl of `Iterate` for `i32`\n+note: required because of the requirements on the impl of `Iterate` for `i32`\n+  --> $DIR/issue-38091-2.rs:11:13\n+   |\n+LL | impl<'a, T> Iterate<'a> for T\n+   |             ^^^^^^^^^^^     ^\n \n error: aborting due to previous error; 1 warning emitted\n "}, {"sha": "c4fc44c737ec1aa8ad16a5511514b04fbc0cdcf3", "filename": "src/test/ui/specialization/issue-39448.stderr", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8bc558197862268f080e5df621e89f519a52950c/src%2Ftest%2Fui%2Fspecialization%2Fissue-39448.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8bc558197862268f080e5df621e89f519a52950c/src%2Ftest%2Fui%2Fspecialization%2Fissue-39448.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fissue-39448.stderr?ref=8bc558197862268f080e5df621e89f519a52950c", "patch": "@@ -14,8 +14,16 @@ error[E0275]: overflow evaluating the requirement `T: FromA<U>`\n LL |     x.foo(y.to()).to()\n    |             ^^\n    |\n-   = note: required because of the requirements on the impl of `FromA<U>` for `T`\n-   = note: required because of the requirements on the impl of `ToA<T>` for `U`\n+note: required because of the requirements on the impl of `FromA<U>` for `T`\n+  --> $DIR/issue-39448.rs:24:29\n+   |\n+LL | impl<T: A, U: A + FromA<T>> FromA<T> for U {\n+   |                             ^^^^^^^^     ^\n+note: required because of the requirements on the impl of `ToA<T>` for `U`\n+  --> $DIR/issue-39448.rs:34:12\n+   |\n+LL | impl<T, U> ToA<U> for T\n+   |            ^^^^^^     ^\n \n error: aborting due to previous error; 1 warning emitted\n "}, {"sha": "5bbf4225812b60f7875a3f35dd79fc083fa8f580", "filename": "src/test/ui/substs-ppaux.normal.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8bc558197862268f080e5df621e89f519a52950c/src%2Ftest%2Fui%2Fsubsts-ppaux.normal.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8bc558197862268f080e5df621e89f519a52950c/src%2Ftest%2Fui%2Fsubsts-ppaux.normal.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsubsts-ppaux.normal.stderr?ref=8bc558197862268f080e5df621e89f519a52950c", "patch": "@@ -80,7 +80,11 @@ LL |     <str as Foo<u8>>::bar;\n    |     ^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `Sized` is not implemented for `str`\n-   = note: required because of the requirements on the impl of `Foo<'_, '_, u8>` for `str`\n+note: required because of the requirements on the impl of `Foo<'_, '_, u8>` for `str`\n+  --> $DIR/substs-ppaux.rs:11:17\n+   |\n+LL | impl<'a,'b,T,S> Foo<'a, 'b, S> for T {}\n+   |                 ^^^^^^^^^^^^^^     ^\n \n error: aborting due to 5 previous errors\n "}, {"sha": "20d7655337448874dec09f6ed8c01971583c4209", "filename": "src/test/ui/substs-ppaux.verbose.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8bc558197862268f080e5df621e89f519a52950c/src%2Ftest%2Fui%2Fsubsts-ppaux.verbose.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8bc558197862268f080e5df621e89f519a52950c/src%2Ftest%2Fui%2Fsubsts-ppaux.verbose.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsubsts-ppaux.verbose.stderr?ref=8bc558197862268f080e5df621e89f519a52950c", "patch": "@@ -80,7 +80,11 @@ LL |     <str as Foo<u8>>::bar;\n    |     ^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `Sized` is not implemented for `str`\n-   = note: required because of the requirements on the impl of `Foo<'_#0r, '_#1r, u8>` for `str`\n+note: required because of the requirements on the impl of `Foo<'_#0r, '_#1r, u8>` for `str`\n+  --> $DIR/substs-ppaux.rs:11:17\n+   |\n+LL | impl<'a,'b,T,S> Foo<'a, 'b, S> for T {}\n+   |                 ^^^^^^^^^^^^^^     ^\n \n error: aborting due to 5 previous errors\n "}, {"sha": "40386f706132bb6d38c8c01f6db040df4fd3c514", "filename": "src/test/ui/traits/cycle-cache-err-60010.stderr", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/8bc558197862268f080e5df621e89f519a52950c/src%2Ftest%2Fui%2Ftraits%2Fcycle-cache-err-60010.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8bc558197862268f080e5df621e89f519a52950c/src%2Ftest%2Fui%2Ftraits%2Fcycle-cache-err-60010.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fcycle-cache-err-60010.stderr?ref=8bc558197862268f080e5df621e89f519a52950c", "patch": "@@ -10,9 +10,21 @@ LL |     SourceDatabase::parse(db);\n    = note: required because it appears within the type `*const SalsaStorage`\n    = note: required because it appears within the type `Unique<SalsaStorage>`\n    = note: required because it appears within the type `Box<SalsaStorage>`\n-   = note: required because it appears within the type `Runtime<RootDatabase>`\n-   = note: required because it appears within the type `RootDatabase`\n-   = note: required because of the requirements on the impl of `SourceDatabase` for `RootDatabase`\n+note: required because it appears within the type `Runtime<RootDatabase>`\n+  --> $DIR/cycle-cache-err-60010.rs:23:8\n+   |\n+LL | struct Runtime<DB: Database> {\n+   |        ^^^^^^^\n+note: required because it appears within the type `RootDatabase`\n+  --> $DIR/cycle-cache-err-60010.rs:20:8\n+   |\n+LL | struct RootDatabase {\n+   |        ^^^^^^^^^^^^\n+note: required because of the requirements on the impl of `SourceDatabase` for `RootDatabase`\n+  --> $DIR/cycle-cache-err-60010.rs:43:9\n+   |\n+LL | impl<T> SourceDatabase for T\n+   |         ^^^^^^^^^^^^^^     ^\n \n error: aborting due to previous error\n "}, {"sha": "e23dfa57cd0d4d0257751da5daa63807ae6e71d2", "filename": "src/test/ui/traits/inductive-overflow/lifetime.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8bc558197862268f080e5df621e89f519a52950c/src%2Ftest%2Fui%2Ftraits%2Finductive-overflow%2Flifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bc558197862268f080e5df621e89f519a52950c/src%2Ftest%2Fui%2Ftraits%2Finductive-overflow%2Flifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Finductive-overflow%2Flifetime.rs?ref=8bc558197862268f080e5df621e89f519a52950c", "patch": "@@ -16,7 +16,7 @@ struct C<'a>(&'a ());\n struct X<T: Y>(T::P);\n \n impl<T: NotAuto> NotAuto for Box<T> {}\n-impl<T: Y> NotAuto for X<T> where T::P: NotAuto {}\n+impl<T: Y> NotAuto for X<T> where T::P: NotAuto {} //~ NOTE: required\n impl<'a> NotAuto for C<'a> {}\n \n fn is_send<S: NotAuto>() {}\n@@ -26,5 +26,4 @@ fn main() {\n     // Should only be a few notes.\n     is_send::<X<C<'static>>>();\n     //~^ ERROR overflow evaluating\n-    //~| NOTE: required\n }"}, {"sha": "752154b35cabebdaecd9f7a9d826754a3a28e635", "filename": "src/test/ui/traits/inductive-overflow/lifetime.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8bc558197862268f080e5df621e89f519a52950c/src%2Ftest%2Fui%2Ftraits%2Finductive-overflow%2Flifetime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8bc558197862268f080e5df621e89f519a52950c/src%2Ftest%2Fui%2Ftraits%2Finductive-overflow%2Flifetime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Finductive-overflow%2Flifetime.stderr?ref=8bc558197862268f080e5df621e89f519a52950c", "patch": "@@ -7,7 +7,11 @@ LL | fn is_send<S: NotAuto>() {}\n LL |     is_send::<X<C<'static>>>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: required because of the requirements on the impl of `NotAuto` for `X<C<'static>>`\n+note: required because of the requirements on the impl of `NotAuto` for `X<C<'static>>`\n+  --> $DIR/lifetime.rs:19:12\n+   |\n+LL | impl<T: Y> NotAuto for X<T> where T::P: NotAuto {}\n+   |            ^^^^^^^     ^^^^\n \n error: aborting due to previous error\n "}, {"sha": "94a255fcb84de1b98444b9c8449d1433a3b926fa", "filename": "src/test/ui/traits/inductive-overflow/simultaneous.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8bc558197862268f080e5df621e89f519a52950c/src%2Ftest%2Fui%2Ftraits%2Finductive-overflow%2Fsimultaneous.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8bc558197862268f080e5df621e89f519a52950c/src%2Ftest%2Fui%2Ftraits%2Finductive-overflow%2Fsimultaneous.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Finductive-overflow%2Fsimultaneous.stderr?ref=8bc558197862268f080e5df621e89f519a52950c", "patch": "@@ -7,7 +7,11 @@ LL | fn is_ee<T: Combo>(t: T) {\n LL |     is_ee(4);\n    |     ^^^^^\n    |\n-   = note: required because of the requirements on the impl of `Combo` for `{integer}`\n+note: required because of the requirements on the impl of `Combo` for `{integer}`\n+  --> $DIR/simultaneous.rs:11:34\n+   |\n+LL | impl<T: Tweedledee + Tweedledum> Combo for T {}\n+   |                                  ^^^^^     ^\n \n error: aborting due to previous error\n "}, {"sha": "5ed1c2cc2da6f0890801c5ada95865841f1e401e", "filename": "src/test/ui/traits/inductive-overflow/supertrait.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8bc558197862268f080e5df621e89f519a52950c/src%2Ftest%2Fui%2Ftraits%2Finductive-overflow%2Fsupertrait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8bc558197862268f080e5df621e89f519a52950c/src%2Ftest%2Fui%2Ftraits%2Finductive-overflow%2Fsupertrait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Finductive-overflow%2Fsupertrait.stderr?ref=8bc558197862268f080e5df621e89f519a52950c", "patch": "@@ -7,7 +7,11 @@ LL | fn copy<T: Magic>(x: T) -> (T, T) { (x, x) }\n LL |     let (a, b) = copy(NoClone);\n    |                  ^^^^\n    |\n-   = note: required because of the requirements on the impl of `Magic` for `NoClone`\n+note: required because of the requirements on the impl of `Magic` for `NoClone`\n+  --> $DIR/supertrait.rs:5:16\n+   |\n+LL | impl<T: Magic> Magic for T {}\n+   |                ^^^^^     ^\n \n error: aborting due to previous error\n "}, {"sha": "4f7d1be793891c4526b2c292f34b0c7266c6de09", "filename": "src/test/ui/traits/negative-impls/negated-auto-traits-error.stderr", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8bc558197862268f080e5df621e89f519a52950c/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fnegated-auto-traits-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8bc558197862268f080e5df621e89f519a52950c/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fnegated-auto-traits-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fnegated-auto-traits-error.stderr?ref=8bc558197862268f080e5df621e89f519a52950c", "patch": "@@ -69,7 +69,11 @@ LL |     is_send(Box::new(Outer2(TestType)));\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^ `dummy3::TestType` cannot be sent between threads safely\n    |\n    = help: within `Outer2<dummy3::TestType>`, the trait `Send` is not implemented for `dummy3::TestType`\n-   = note: required because it appears within the type `Outer2<dummy3::TestType>`\n+note: required because it appears within the type `Outer2<dummy3::TestType>`\n+  --> $DIR/negated-auto-traits-error.rs:12:8\n+   |\n+LL | struct Outer2<T>(T);\n+   |        ^^^^^^\n    = note: required because of the requirements on the impl of `Send` for `Unique<Outer2<dummy3::TestType>>`\n    = note: required because it appears within the type `Box<Outer2<dummy3::TestType>>`\n \n@@ -86,7 +90,11 @@ LL |     is_sync(Outer2(TestType));\n    |             help: consider borrowing here: `&Outer2(TestType)`\n    |\n    = note: the trait bound `main::TestType: Sync` is not satisfied\n-   = note: required because of the requirements on the impl of `Sync` for `Outer2<main::TestType>`\n+note: required because of the requirements on the impl of `Sync` for `Outer2<main::TestType>`\n+  --> $DIR/negated-auto-traits-error.rs:14:22\n+   |\n+LL | unsafe impl<T: Send> Sync for Outer2<T> {}\n+   |                      ^^^^     ^^^^^^^^^\n \n error: aborting due to 7 previous errors\n "}, {"sha": "025706480821d29d2d23ebec267dae624bfd4941", "filename": "src/test/ui/traits/suggest-where-clause.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8bc558197862268f080e5df621e89f519a52950c/src%2Ftest%2Fui%2Ftraits%2Fsuggest-where-clause.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8bc558197862268f080e5df621e89f519a52950c/src%2Ftest%2Fui%2Ftraits%2Fsuggest-where-clause.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fsuggest-where-clause.stderr?ref=8bc558197862268f080e5df621e89f519a52950c", "patch": "@@ -26,7 +26,11 @@ LL |     mem::size_of::<Misc<U>>();\n LL | pub const fn size_of<T>() -> usize {\n    |                      - required by this bound in `std::mem::size_of`\n    |\n-   = note: required because it appears within the type `Misc<U>`\n+note: required because it appears within the type `Misc<U>`\n+  --> $DIR/suggest-where-clause.rs:3:8\n+   |\n+LL | struct Misc<T:?Sized>(T);\n+   |        ^^^^\n \n error[E0277]: the trait bound `u64: From<T>` is not satisfied\n   --> $DIR/suggest-where-clause.rs:15:5"}, {"sha": "a9b49ee32630bc48aa5edafb900bcef2b4c35e5c", "filename": "src/test/ui/typeck/typeck-default-trait-impl-negation-sync.stderr", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8bc558197862268f080e5df621e89f519a52950c/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-default-trait-impl-negation-sync.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8bc558197862268f080e5df621e89f519a52950c/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-default-trait-impl-negation-sync.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-default-trait-impl-negation-sync.stderr?ref=8bc558197862268f080e5df621e89f519a52950c", "patch": "@@ -19,7 +19,11 @@ LL |     is_sync::<MyTypeWUnsafe>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^ `UnsafeCell<u8>` cannot be shared between threads safely\n    |\n    = help: within `MyTypeWUnsafe`, the trait `Sync` is not implemented for `UnsafeCell<u8>`\n-   = note: required because it appears within the type `MyTypeWUnsafe`\n+note: required because it appears within the type `MyTypeWUnsafe`\n+  --> $DIR/typeck-default-trait-impl-negation-sync.rs:21:8\n+   |\n+LL | struct MyTypeWUnsafe {\n+   |        ^^^^^^^^^^^^^\n \n error[E0277]: `Managed` cannot be shared between threads safely\n   --> $DIR/typeck-default-trait-impl-negation-sync.rs:39:5\n@@ -31,7 +35,11 @@ LL |     is_sync::<MyTypeManaged>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^ `Managed` cannot be shared between threads safely\n    |\n    = help: within `MyTypeManaged`, the trait `Sync` is not implemented for `Managed`\n-   = note: required because it appears within the type `MyTypeManaged`\n+note: required because it appears within the type `MyTypeManaged`\n+  --> $DIR/typeck-default-trait-impl-negation-sync.rs:25:8\n+   |\n+LL | struct MyTypeManaged {\n+   |        ^^^^^^^^^^^^^\n \n error: aborting due to 3 previous errors\n "}, {"sha": "91585e78d4b93139a3bf176865f3ed5b5c134d24", "filename": "src/test/ui/typeck/typeck-unsafe-always-share.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8bc558197862268f080e5df621e89f519a52950c/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-unsafe-always-share.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8bc558197862268f080e5df621e89f519a52950c/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-unsafe-always-share.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-unsafe-always-share.stderr?ref=8bc558197862268f080e5df621e89f519a52950c", "patch": "@@ -30,7 +30,11 @@ LL |     test(ms);\n    |     ^^^^ `UnsafeCell<NoSync>` cannot be shared between threads safely\n    |\n    = help: within `MySync<NoSync>`, the trait `Sync` is not implemented for `UnsafeCell<NoSync>`\n-   = note: required because it appears within the type `MySync<NoSync>`\n+note: required because it appears within the type `MySync<NoSync>`\n+  --> $DIR/typeck-unsafe-always-share.rs:8:8\n+   |\n+LL | struct MySync<T> {\n+   |        ^^^^^^\n \n error[E0277]: `NoSync` cannot be shared between threads safely\n   --> $DIR/typeck-unsafe-always-share.rs:30:10"}, {"sha": "4523d41b60060fd70475e4db854338b4b75962f3", "filename": "src/test/ui/unsized-locals/issue-50940-with-feature.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8bc558197862268f080e5df621e89f519a52950c/src%2Ftest%2Fui%2Funsized-locals%2Fissue-50940-with-feature.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8bc558197862268f080e5df621e89f519a52950c/src%2Ftest%2Fui%2Funsized-locals%2Fissue-50940-with-feature.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized-locals%2Fissue-50940-with-feature.stderr?ref=8bc558197862268f080e5df621e89f519a52950c", "patch": "@@ -14,7 +14,11 @@ LL |     A as fn(str) -> A<str>;\n    |     ^ doesn't have a size known at compile-time\n    |\n    = help: within `A<str>`, the trait `Sized` is not implemented for `str`\n-   = note: required because it appears within the type `A<str>`\n+note: required because it appears within the type `A<str>`\n+  --> $DIR/issue-50940-with-feature.rs:5:12\n+   |\n+LL |     struct A<X: ?Sized>(X);\n+   |            ^\n    = note: the return type of a function must have a statically known size\n \n error: aborting due to previous error; 1 warning emitted"}, {"sha": "a7f57e3fd15667d81396d6c40e1293565bde5a18", "filename": "src/test/ui/unsized-locals/unsized-exprs.stderr", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8bc558197862268f080e5df621e89f519a52950c/src%2Ftest%2Fui%2Funsized-locals%2Funsized-exprs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8bc558197862268f080e5df621e89f519a52950c/src%2Ftest%2Fui%2Funsized-locals%2Funsized-exprs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized-locals%2Funsized-exprs.stderr?ref=8bc558197862268f080e5df621e89f519a52950c", "patch": "@@ -15,7 +15,11 @@ LL |     udrop::<A<[u8]>>(A { 0: *foo() });\n    |                      ^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: within `A<[u8]>`, the trait `Sized` is not implemented for `[u8]`\n-   = note: required because it appears within the type `A<[u8]>`\n+note: required because it appears within the type `A<[u8]>`\n+  --> $DIR/unsized-exprs.rs:3:8\n+   |\n+LL | struct A<X: ?Sized>(X);\n+   |        ^\n    = note: structs must have a statically known size to be initialized\n \n error[E0277]: the size for values of type `[u8]` cannot be known at compilation time\n@@ -25,7 +29,11 @@ LL |     udrop::<A<[u8]>>(A(*foo()));\n    |                      ^ doesn't have a size known at compile-time\n    |\n    = help: within `A<[u8]>`, the trait `Sized` is not implemented for `[u8]`\n-   = note: required because it appears within the type `A<[u8]>`\n+note: required because it appears within the type `A<[u8]>`\n+  --> $DIR/unsized-exprs.rs:3:8\n+   |\n+LL | struct A<X: ?Sized>(X);\n+   |        ^\n    = note: the return type of a function must have a statically known size\n \n error: aborting due to 3 previous errors"}, {"sha": "1b6c85858159d76d77b0589b3442172196ab2bc0", "filename": "src/test/ui/unsized/unsized-enum2.stderr", "status": "modified", "additions": 20, "deletions": 4, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/8bc558197862268f080e5df621e89f519a52950c/src%2Ftest%2Fui%2Funsized%2Funsized-enum2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8bc558197862268f080e5df621e89f519a52950c/src%2Ftest%2Fui%2Funsized%2Funsized-enum2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized%2Funsized-enum2.stderr?ref=8bc558197862268f080e5df621e89f519a52950c", "patch": "@@ -301,7 +301,11 @@ LL |     VI(Path1),\n    |        ^^^^^ doesn't have a size known at compile-time\n    |\n    = help: within `Path1`, the trait `Sized` is not implemented for `(dyn PathHelper1 + 'static)`\n-   = note: required because it appears within the type `Path1`\n+note: required because it appears within the type `Path1`\n+  --> $DIR/unsized-enum2.rs:16:8\n+   |\n+LL | struct Path1(dyn PathHelper1);\n+   |        ^^^^^\n    = note: no field of an enum variant may have a dynamically sized type\n    = help: change the field's type to have a statically known size\n help: borrowed types always have a statically known size\n@@ -320,7 +324,11 @@ LL |     VJ{x: Path2},\n    |           ^^^^^ doesn't have a size known at compile-time\n    |\n    = help: within `Path2`, the trait `Sized` is not implemented for `(dyn PathHelper2 + 'static)`\n-   = note: required because it appears within the type `Path2`\n+note: required because it appears within the type `Path2`\n+  --> $DIR/unsized-enum2.rs:17:8\n+   |\n+LL | struct Path2(dyn PathHelper2);\n+   |        ^^^^^\n    = note: no field of an enum variant may have a dynamically sized type\n    = help: change the field's type to have a statically known size\n help: borrowed types always have a statically known size\n@@ -339,7 +347,11 @@ LL |     VK(isize, Path3),\n    |               ^^^^^ doesn't have a size known at compile-time\n    |\n    = help: within `Path3`, the trait `Sized` is not implemented for `(dyn PathHelper3 + 'static)`\n-   = note: required because it appears within the type `Path3`\n+note: required because it appears within the type `Path3`\n+  --> $DIR/unsized-enum2.rs:18:8\n+   |\n+LL | struct Path3(dyn PathHelper3);\n+   |        ^^^^^\n    = note: no field of an enum variant may have a dynamically sized type\n    = help: change the field's type to have a statically known size\n help: borrowed types always have a statically known size\n@@ -358,7 +370,11 @@ LL |     VL{u: isize, x: Path4},\n    |                     ^^^^^ doesn't have a size known at compile-time\n    |\n    = help: within `Path4`, the trait `Sized` is not implemented for `(dyn PathHelper4 + 'static)`\n-   = note: required because it appears within the type `Path4`\n+note: required because it appears within the type `Path4`\n+  --> $DIR/unsized-enum2.rs:19:8\n+   |\n+LL | struct Path4(dyn PathHelper4);\n+   |        ^^^^^\n    = note: no field of an enum variant may have a dynamically sized type\n    = help: change the field's type to have a statically known size\n help: borrowed types always have a statically known size"}, {"sha": "e38375bff46cf4c005e754263e24615a918efda9", "filename": "src/test/ui/unsized/unsized-struct.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8bc558197862268f080e5df621e89f519a52950c/src%2Ftest%2Fui%2Funsized%2Funsized-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8bc558197862268f080e5df621e89f519a52950c/src%2Ftest%2Fui%2Funsized%2Funsized-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized%2Funsized-struct.stderr?ref=8bc558197862268f080e5df621e89f519a52950c", "patch": "@@ -28,7 +28,11 @@ LL | fn bar2<T: ?Sized>() { is_sized::<Bar<T>>() }\n    |         |\n    |         this type parameter needs to be `std::marker::Sized`\n    |\n-   = note: required because it appears within the type `Bar<T>`\n+note: required because it appears within the type `Bar<T>`\n+  --> $DIR/unsized-struct.rs:11:8\n+   |\n+LL | struct Bar<T: ?Sized> { data: T }\n+   |        ^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "bd36008aca044e67b803605cfd3a9e180f4a1ca2", "filename": "src/test/ui/unsized3.stderr", "status": "modified", "additions": 20, "deletions": 4, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/8bc558197862268f080e5df621e89f519a52950c/src%2Ftest%2Fui%2Funsized3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8bc558197862268f080e5df621e89f519a52950c/src%2Ftest%2Fui%2Funsized3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized3.stderr?ref=8bc558197862268f080e5df621e89f519a52950c", "patch": "@@ -41,7 +41,11 @@ LL | fn f8<X: ?Sized>(x1: &S<X>, x2: &S<X>) {\n LL |     f5(x1);\n    |        ^^ doesn't have a size known at compile-time\n    |\n-   = note: required because it appears within the type `S<X>`\n+note: required because it appears within the type `S<X>`\n+  --> $DIR/unsized3.rs:28:8\n+   |\n+LL | struct S<X: ?Sized> {\n+   |        ^\n help: consider relaxing the implicit `Sized` restriction\n    |\n LL | fn f5<Y: ?Sized>(x: &Y) {}\n@@ -55,7 +59,11 @@ LL | fn f9<X: ?Sized>(x1: Box<S<X>>) {\n LL |     f5(&(*x1, 34));\n    |        ^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n-   = note: required because it appears within the type `S<X>`\n+note: required because it appears within the type `S<X>`\n+  --> $DIR/unsized3.rs:28:8\n+   |\n+LL | struct S<X: ?Sized> {\n+   |        ^\n    = note: only the last element of a tuple may have a dynamically sized type\n \n error[E0277]: the size for values of type `X` cannot be known at compilation time\n@@ -66,7 +74,11 @@ LL | fn f10<X: ?Sized>(x1: Box<S<X>>) {\n LL |     f5(&(32, *x1));\n    |         ^^^^^^^^^ doesn't have a size known at compile-time\n    |\n-   = note: required because it appears within the type `S<X>`\n+note: required because it appears within the type `S<X>`\n+  --> $DIR/unsized3.rs:28:8\n+   |\n+LL | struct S<X: ?Sized> {\n+   |        ^\n    = note: required because it appears within the type `({integer}, S<X>)`\n    = note: tuples must have a statically known size to be initialized\n \n@@ -81,7 +93,11 @@ LL | fn f10<X: ?Sized>(x1: Box<S<X>>) {\n LL |     f5(&(32, *x1));\n    |        ^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n-   = note: required because it appears within the type `S<X>`\n+note: required because it appears within the type `S<X>`\n+  --> $DIR/unsized3.rs:28:8\n+   |\n+LL | struct S<X: ?Sized> {\n+   |        ^\n    = note: required because it appears within the type `({integer}, S<X>)`\n help: consider relaxing the implicit `Sized` restriction\n    |"}]}