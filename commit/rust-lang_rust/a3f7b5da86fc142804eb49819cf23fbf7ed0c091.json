{"sha": "a3f7b5da86fc142804eb49819cf23fbf7ed0c091", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEzZjdiNWRhODZmYzE0MjgwNGViNDk4MTljZjIzZmJmN2VkMGMwOTE=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-03-29T18:33:12Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-03-29T18:33:12Z"}, "message": "Rustup to rustc 1.35.0-nightly (237bf3244 2019-03-28)", "tree": {"sha": "8eed05f203fcd7d2abfe2733a818aeabe43ed3c3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8eed05f203fcd7d2abfe2733a818aeabe43ed3c3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a3f7b5da86fc142804eb49819cf23fbf7ed0c091", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a3f7b5da86fc142804eb49819cf23fbf7ed0c091", "html_url": "https://github.com/rust-lang/rust/commit/a3f7b5da86fc142804eb49819cf23fbf7ed0c091", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a3f7b5da86fc142804eb49819cf23fbf7ed0c091/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9e9e77bfb50185f4851cbdea24faf938f24b5cc9", "url": "https://api.github.com/repos/rust-lang/rust/commits/9e9e77bfb50185f4851cbdea24faf938f24b5cc9", "html_url": "https://github.com/rust-lang/rust/commit/9e9e77bfb50185f4851cbdea24faf938f24b5cc9"}], "stats": {"total": 24, "additions": 12, "deletions": 12}, "files": [{"sha": "03ab11d9e59857f88800684ef123f5ff8a8577ca", "filename": "src/constant.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/a3f7b5da86fc142804eb49819cf23fbf7ed0c091/src%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3f7b5da86fc142804eb49819cf23fbf7ed0c091/src%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconstant.rs?ref=a3f7b5da86fc142804eb49819cf23fbf7ed0c091", "patch": "@@ -5,7 +5,7 @@ use rustc::mir::interpret::{\n };\n use rustc::ty::Const;\n use rustc_mir::interpret::{\n-    EvalContext, ImmTy, MPlaceTy, Machine, Memory, MemoryKind, OpTy, PlaceTy, Pointer,\n+    InterpretCx, ImmTy, MPlaceTy, Machine, Memory, MemoryKind, OpTy, PlaceTy, Pointer,\n     StackPopCleanup,\n };\n \n@@ -135,7 +135,7 @@ fn trans_const_place<'a, 'tcx: 'a>(\n ) -> CPlace<'tcx> {\n     // Adapted from https://github.com/rust-lang/rust/pull/53671/files#diff-e0b58bb6712edaa8595ad7237542c958L551\n     let result = || -> EvalResult<'tcx, &'tcx Allocation> {\n-        let mut ecx = EvalContext::new(\n+        let mut ecx = InterpretCx::new(\n             fx.tcx.at(DUMMY_SP),\n             ty::ParamEnv::reveal_all(),\n             TransPlaceInterpreter,\n@@ -338,16 +338,16 @@ impl<'a, 'mir, 'tcx> Machine<'a, 'mir, 'tcx> for TransPlaceInterpreter {\n     type MemoryMap = FxHashMap<AllocId, (MemoryKind<!>, Allocation<()>)>;\n     const STATIC_KIND: Option<!> = None;\n \n-    fn enforce_validity(_: &EvalContext<'a, 'mir, 'tcx, Self>) -> bool {\n+    fn enforce_validity(_: &InterpretCx<'a, 'mir, 'tcx, Self>) -> bool {\n         false\n     }\n \n-    fn before_terminator(_: &mut EvalContext<'a, 'mir, 'tcx, Self>) -> EvalResult<'tcx> {\n+    fn before_terminator(_: &mut InterpretCx<'a, 'mir, 'tcx, Self>) -> EvalResult<'tcx> {\n         panic!();\n     }\n \n     fn find_fn(\n-        _: &mut EvalContext<'a, 'mir, 'tcx, Self>,\n+        _: &mut InterpretCx<'a, 'mir, 'tcx, Self>,\n         _: Instance<'tcx>,\n         _: &[OpTy<'tcx>],\n         _: Option<PlaceTy<'tcx>>,\n@@ -357,7 +357,7 @@ impl<'a, 'mir, 'tcx> Machine<'a, 'mir, 'tcx> for TransPlaceInterpreter {\n     }\n \n     fn call_intrinsic(\n-        _: &mut EvalContext<'a, 'mir, 'tcx, Self>,\n+        _: &mut InterpretCx<'a, 'mir, 'tcx, Self>,\n         _: Instance<'tcx>,\n         _: &[OpTy<'tcx>],\n         _: PlaceTy<'tcx>,\n@@ -374,20 +374,20 @@ impl<'a, 'mir, 'tcx> Machine<'a, 'mir, 'tcx> for TransPlaceInterpreter {\n     }\n \n     fn ptr_op(\n-        _: &EvalContext<'a, 'mir, 'tcx, Self>,\n+        _: &InterpretCx<'a, 'mir, 'tcx, Self>,\n         _: mir::BinOp,\n         _: ImmTy<'tcx>,\n         _: ImmTy<'tcx>,\n     ) -> EvalResult<'tcx, (Scalar, bool)> {\n         panic!();\n     }\n \n-    fn box_alloc(_: &mut EvalContext<'a, 'mir, 'tcx, Self>, _: PlaceTy<'tcx>) -> EvalResult<'tcx> {\n+    fn box_alloc(_: &mut InterpretCx<'a, 'mir, 'tcx, Self>, _: PlaceTy<'tcx>) -> EvalResult<'tcx> {\n         panic!();\n     }\n \n     fn tag_dereference(\n-        _: &EvalContext<'a, 'mir, 'tcx, Self>,\n+        _: &InterpretCx<'a, 'mir, 'tcx, Self>,\n         _: MPlaceTy<'tcx>,\n         _: Option<::rustc::hir::Mutability>,\n     ) -> EvalResult<'tcx, Scalar> {\n@@ -402,18 +402,18 @@ impl<'a, 'mir, 'tcx> Machine<'a, 'mir, 'tcx> for TransPlaceInterpreter {\n     }\n \n     fn tag_new_allocation(\n-        _: &mut EvalContext<'a, 'mir, 'tcx, Self>,\n+        _: &mut InterpretCx<'a, 'mir, 'tcx, Self>,\n         ptr: Pointer,\n         _: MemoryKind<!>,\n     ) -> Pointer {\n         ptr\n     }\n \n-    fn stack_push(_: &mut EvalContext<'a, 'mir, 'tcx, Self>) -> EvalResult<'tcx> {\n+    fn stack_push(_: &mut InterpretCx<'a, 'mir, 'tcx, Self>) -> EvalResult<'tcx> {\n         Ok(())\n     }\n \n-    fn stack_pop(_: &mut EvalContext<'a, 'mir, 'tcx, Self>, _: ()) -> EvalResult<'tcx> {\n+    fn stack_pop(_: &mut InterpretCx<'a, 'mir, 'tcx, Self>, _: ()) -> EvalResult<'tcx> {\n         Ok(())\n     }\n }"}]}