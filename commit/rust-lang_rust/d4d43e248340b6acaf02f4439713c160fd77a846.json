{"sha": "d4d43e248340b6acaf02f4439713c160fd77a846", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ0ZDQzZTI0ODM0MGI2YWNhZjAyZjQ0Mzk3MTNjMTYwZmQ3N2E4NDY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-04-15T01:26:11Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-04-15T01:26:11Z"}, "message": "Auto merge of #48173 - GuillaumeGomez:error-codes-libsyntax_ext, r=estebank\n\nAdd error codes for libsyntax_ext\n\nI intend to add error codes for `libsyntax_ext` as well. However, they cannot be used at stage 0 directly so I thought it might be possible to enable them at the stage 1 only so we can have access to the macros. However, the error code registration seems to not work this way. Currently I get the following error:\n\n```\nerror: used diagnostic code E0660 not registered\n  --> libsyntax_ext/asm.rs:93:25\n   |\n93 |                         span_err!(cx, sp, E0660, \"malformed inline assembly\");\n   |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n\nerror: used diagnostic code E0661 not registered\n   --> libsyntax_ext/asm.rs:151:33\n    |\n151 | /                                 span_err!(cx, sp, E0661,\n152 | |                                           \"output operand constraint lacks '=' or '+'\");\n    | |________________________________________________________________________________________^\n    |\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n\nerror: aborting due to 2 previous errors\n\nerror: Could not compile `syntax_ext`.\n```\n\nIf anyone has an idea, I'd gladly take it. I'm trying to figure this out on my side as well. I also opened this PR to know if it was worth it to continue (maybe we don't want this?).\n\nAnyway, any answer for both questions is very welcome!\n\ncc @rust-lang/compiler", "tree": {"sha": "2d0b1186998168cfda5e25ecb5b532449b1bdfd4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2d0b1186998168cfda5e25ecb5b532449b1bdfd4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d4d43e248340b6acaf02f4439713c160fd77a846", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d4d43e248340b6acaf02f4439713c160fd77a846", "html_url": "https://github.com/rust-lang/rust/commit/d4d43e248340b6acaf02f4439713c160fd77a846", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d4d43e248340b6acaf02f4439713c160fd77a846/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bd40cbbe1f42bfcc18a823dd46f584127f6578f2", "url": "https://api.github.com/repos/rust-lang/rust/commits/bd40cbbe1f42bfcc18a823dd46f584127f6578f2", "html_url": "https://github.com/rust-lang/rust/commit/bd40cbbe1f42bfcc18a823dd46f584127f6578f2"}, {"sha": "f367567e06b9c05938b38df44e1dc990eb12cb26", "url": "https://api.github.com/repos/rust-lang/rust/commits/f367567e06b9c05938b38df44e1dc990eb12cb26", "html_url": "https://github.com/rust-lang/rust/commit/f367567e06b9c05938b38df44e1dc990eb12cb26"}], "stats": {"total": 123, "additions": 118, "deletions": 5}, "files": [{"sha": "0c313ab14899f54b824d0181f6ff8d4244824331", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d4d43e248340b6acaf02f4439713c160fd77a846/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4d43e248340b6acaf02f4439713c160fd77a846/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=d4d43e248340b6acaf02f4439713c160fd77a846", "patch": "@@ -14,7 +14,7 @@ use ast::{self, Attribute, Name, PatKind, MetaItem};\n use attr::HasAttrs;\n use codemap::{self, CodeMap, Spanned, respan};\n use syntax_pos::{Span, MultiSpan, DUMMY_SP};\n-use errors::DiagnosticBuilder;\n+use errors::{DiagnosticBuilder, DiagnosticId};\n use ext::expand::{self, Expansion, Invocation};\n use ext::hygiene::{Mark, SyntaxContext};\n use fold::{self, Folder};\n@@ -841,6 +841,9 @@ impl<'a> ExtCtxt<'a> {\n     pub fn span_err<S: Into<MultiSpan>>(&self, sp: S, msg: &str) {\n         self.parse_sess.span_diagnostic.span_err(sp, msg);\n     }\n+    pub fn span_err_with_code<S: Into<MultiSpan>>(&self, sp: S, msg: &str, code: DiagnosticId) {\n+        self.parse_sess.span_diagnostic.span_err_with_code(sp, msg, code);\n+    }\n     pub fn mut_span_err<S: Into<MultiSpan>>(&self, sp: S, msg: &str)\n                         -> DiagnosticBuilder<'a> {\n         self.parse_sess.span_diagnostic.mut_span_err(sp, msg)"}, {"sha": "e1eabc5cb01455919db258bcefeaae0abe8cdd98", "filename": "src/libsyntax_ext/asm.rs", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d4d43e248340b6acaf02f4439713c160fd77a846/src%2Flibsyntax_ext%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4d43e248340b6acaf02f4439713c160fd77a846/src%2Flibsyntax_ext%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fasm.rs?ref=d4d43e248340b6acaf02f4439713c160fd77a846", "patch": "@@ -45,6 +45,17 @@ impl State {\n     }\n }\n \n+macro_rules! span_err_if_not_stage0 {\n+    ($cx:expr, $sp:expr, $code:ident, $text:tt) => {\n+        #[cfg(not(stage0))] {\n+            span_err!($cx, $sp, $code, $text)\n+        }\n+        #[cfg(stage0)] {\n+            $cx.span_err($sp, $text)\n+        }\n+    }\n+}\n+\n const OPTIONS: &'static [&'static str] = &[\"volatile\", \"alignstack\", \"intel\"];\n \n pub fn expand_asm<'cx>(cx: &'cx mut ExtCtxt,\n@@ -89,7 +100,7 @@ pub fn expand_asm<'cx>(cx: &'cx mut ExtCtxt,\n                 if asm_str_style.is_some() {\n                     // If we already have a string with instructions,\n                     // ending up in Asm state again is an error.\n-                    cx.span_err(sp, \"malformed inline assembly\");\n+                    span_err_if_not_stage0!(cx, sp, E0660, \"malformed inline assembly\");\n                     return DummyResult::expr(sp);\n                 }\n                 // Nested parser, stop before the first colon (see above).\n@@ -142,7 +153,8 @@ pub fn expand_asm<'cx>(cx: &'cx mut ExtCtxt,\n                             Some(Symbol::intern(&format!(\"={}\", ch.as_str())))\n                         }\n                         _ => {\n-                            cx.span_err(span, \"output operand constraint lacks '=' or '+'\");\n+                            span_err_if_not_stage0!(cx, span, E0661,\n+                                                    \"output operand constraint lacks '=' or '+'\");\n                             None\n                         }\n                     };"}, {"sha": "a840c0392e9fe7cc663fd1a9bc85814a4bb4f98d", "filename": "src/libsyntax_ext/diagnostics.rs", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/d4d43e248340b6acaf02f4439713c160fd77a846/src%2Flibsyntax_ext%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4d43e248340b6acaf02f4439713c160fd77a846/src%2Flibsyntax_ext%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fdiagnostics.rs?ref=d4d43e248340b6acaf02f4439713c160fd77a846", "patch": "@@ -0,0 +1,45 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![allow(non_snake_case)]\n+\n+// Error messages for EXXXX errors.\n+// Each message should start and end with a new line, and be wrapped to 80 characters.\n+// In vim you can `:set tw=80` and use `gq` to wrap paragraphs. Use `:set tw=0` to disable.\n+register_long_diagnostics! {\n+E0660: r##\"\n+The argument to the `asm` macro is not well-formed.\n+\n+Erroneous code example:\n+\n+```compile_fail,E0660\n+asm!(\"nop\" \"nop\");\n+```\n+\n+Considering that this would be a long explanation, we instead recommend you to\n+take a look at the unstable book:\n+https://doc.rust-lang.org/unstable-book/language-features/asm.html\n+\"##,\n+\n+E0661: r##\"\n+An invalid syntax was passed to the second argument of an `asm` macro line.\n+\n+Erroneous code example:\n+\n+```compile_fail,E0661\n+let a;\n+asm!(\"nop\" : \"r\"(a));\n+```\n+\n+Considering that this would be a long explanation, we instead recommend you to\n+take a look at the unstable book:\n+https://doc.rust-lang.org/unstable-book/language-features/asm.html\n+\"##,\n+}"}, {"sha": "39ad594e5c5770b788a9effb25356d3e38813ae0", "filename": "src/libsyntax_ext/lib.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d4d43e248340b6acaf02f4439713c160fd77a846/src%2Flibsyntax_ext%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4d43e248340b6acaf02f4439713c160fd77a846/src%2Flibsyntax_ext%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Flib.rs?ref=d4d43e248340b6acaf02f4439713c160fd77a846", "patch": "@@ -18,6 +18,8 @@\n #![feature(decl_macro)]\n #![feature(str_escape)]\n \n+#![cfg_attr(not(stage0), feature(rustc_diagnostic_macros))]\n+\n extern crate fmt_macros;\n #[macro_use]\n extern crate syntax;\n@@ -26,6 +28,9 @@ extern crate proc_macro;\n extern crate rustc_data_structures;\n extern crate rustc_errors as errors;\n \n+#[cfg(not(stage0))]\n+mod diagnostics;\n+\n mod assert;\n mod asm;\n mod cfg;"}, {"sha": "82ef38e96cdede4c62c3ceaf5c976d97b687b718", "filename": "src/test/ui/E0660.rs", "status": "renamed", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d4d43e248340b6acaf02f4439713c160fd77a846/src%2Ftest%2Fui%2FE0660.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4d43e248340b6acaf02f4439713c160fd77a846/src%2Ftest%2Fui%2FE0660.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2FE0660.rs?ref=d4d43e248340b6acaf02f4439713c160fd77a846", "patch": "@@ -7,10 +7,15 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n+\n+// ignore-stage1\n+\n #![feature(asm)]\n \n fn main() {\n     let a;\n-    asm!(\"nop\" \"nop\"); //~ ERROR malformed inline assembly\n-    asm!(\"nop\" \"nop\" : \"=r\"(a)); //~ ERROR malformed inline assembly\n+    asm!(\"nop\" \"nop\");\n+    //~^ ERROR E0660\n+    asm!(\"nop\" \"nop\" : \"=r\"(a));\n+    //~^ ERROR E0660\n }", "previous_filename": "src/test/compile-fail/issue-21045.rs"}, {"sha": "fcf3e9a255273877ecd284011070ecdb4fb89738", "filename": "src/test/ui/E0660.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/d4d43e248340b6acaf02f4439713c160fd77a846/src%2Ftest%2Fui%2FE0660.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d4d43e248340b6acaf02f4439713c160fd77a846/src%2Ftest%2Fui%2FE0660.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2FE0660.stderr?ref=d4d43e248340b6acaf02f4439713c160fd77a846", "patch": "@@ -0,0 +1,15 @@\n+error[E0660]: malformed inline assembly\n+  --> $DIR/E0660.rs:17:5\n+   |\n+LL |     asm!(\"nop\" \"nop\");\n+   |     ^^^^^^^^^^^^^^^^^^\n+\n+error[E0660]: malformed inline assembly\n+  --> $DIR/E0660.rs:19:5\n+   |\n+LL |     asm!(\"nop\" \"nop\" : \"=r\"(a));\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0660`."}, {"sha": "7f8a0d8b5742051f61a0df2be1c7c4a16ee0a6b0", "filename": "src/test/ui/E0661.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/d4d43e248340b6acaf02f4439713c160fd77a846/src%2Ftest%2Fui%2FE0661.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4d43e248340b6acaf02f4439713c160fd77a846/src%2Ftest%2Fui%2FE0661.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2FE0661.rs?ref=d4d43e248340b6acaf02f4439713c160fd77a846", "patch": "@@ -0,0 +1,19 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// ignore-stage1\n+\n+#![feature(asm)]\n+\n+fn main() {\n+    let a;\n+    asm!(\"nop\" : \"r\"(a));\n+    //~^ ERROR E0661\n+}"}, {"sha": "d8b974d4240747cdd1ee5f6608256df0bf1d268b", "filename": "src/test/ui/E0661.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d4d43e248340b6acaf02f4439713c160fd77a846/src%2Ftest%2Fui%2FE0661.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d4d43e248340b6acaf02f4439713c160fd77a846/src%2Ftest%2Fui%2FE0661.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2FE0661.stderr?ref=d4d43e248340b6acaf02f4439713c160fd77a846", "patch": "@@ -0,0 +1,9 @@\n+error[E0661]: output operand constraint lacks '=' or '+'\n+  --> $DIR/E0661.rs:17:18\n+   |\n+LL |     asm!(\"nop\" : \"r\"(a));\n+   |                  ^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0661`."}]}