{"sha": "c9d9df58300715d35a0dd5f9af0d1adbbfed8412", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM5ZDlkZjU4MzAwNzE1ZDM1YTBkZDVmOWFmMGQxYWRiYmZlZDg0MTI=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-04-02T11:47:21Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-04-02T11:47:21Z"}, "message": "Rollup merge of #59262 - timvermeulen:iterator_cmp_dedup, r=scottmcm\n\nRemove duplicated code from Iterator::{ne, lt, le, gt, ge}\n\nThis PR delegates `Iterator::ne` to `Iterator::eq` and `Iterator::{lt, le, gt, ge}` to `Iterator::partial_cmp`.\n\nOddly enough, this change actually simplifies the generated assembly [in some cases](https://rust.godbolt.org/z/riBtNe), although I don't understand assembly well enough to see if the longer assembly is doing something clever.\n\nI also added two extremely simple benchmarks:\n```\n// before\ntest iter::bench_lt               ... bench:      98,404 ns/iter (+/- 21,008)\ntest iter::bench_partial_cmp      ... bench:      62,437 ns/iter (+/- 5,009)\n\n// after\ntest iter::bench_lt               ... bench:      61,757 ns/iter (+/- 8,770)\ntest iter::bench_partial_cmp      ... bench:      62,151 ns/iter (+/- 13,753)\n```\n\nI have no idea why the current `lt`/`le`/`gt`/`ge` implementations don't seem to be compiled optimally, but simply having them call `partial_cmp` seems to be an improvement.\n\nSee #44729 for a previous discussion.", "tree": {"sha": "302b7666b7ec7123a0f44a3eba06c3b7d1736b85", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/302b7666b7ec7123a0f44a3eba06c3b7d1736b85"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c9d9df58300715d35a0dd5f9af0d1adbbfed8412", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJco0vJCRBK7hj4Ov3rIwAAdHIIAGa3+9KB34o+s1q0iwhaS/UC\nmvf6tW+0fxCVDFk6oOE1dkNjS4mA+VXdIocFpTQbF5Q0I8x5J7FSA4jtvMTnZtwW\nlTcF68j7myXCrsLJiKpX2nBoP6m8g4TKsrDUpLWYuoxbXToUTjaeZZk9XiJ28I26\nL9/2S7PEIPUHwo3+wE/xAfCJKDhIxfh14FpDLmbpswTidfAgfFIh5a8FrsEo6btU\n7dXCo9xRELgnzvDpNx8Q/eEFNFOYPOxOL8TZxOvZPfiQduNvUrn9N56RwtEDkNQR\nYsAVHqJ0zO8ARsQv694/Q0wG6TIpr+u7BZSFKBaAnPwtqEQb2+qzEAOwAT66uCU=\n=ohA1\n-----END PGP SIGNATURE-----\n", "payload": "tree 302b7666b7ec7123a0f44a3eba06c3b7d1736b85\nparent f694222887cf31f51e68927716c25736e62f037f\nparent 075b2697e47e9370dcf2d38f01469b38bd4d903e\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1554205641 +0200\ncommitter GitHub <noreply@github.com> 1554205641 +0200\n\nRollup merge of #59262 - timvermeulen:iterator_cmp_dedup, r=scottmcm\n\nRemove duplicated code from Iterator::{ne, lt, le, gt, ge}\n\nThis PR delegates `Iterator::ne` to `Iterator::eq` and `Iterator::{lt, le, gt, ge}` to `Iterator::partial_cmp`.\n\nOddly enough, this change actually simplifies the generated assembly [in some cases](https://rust.godbolt.org/z/riBtNe), although I don't understand assembly well enough to see if the longer assembly is doing something clever.\n\nI also added two extremely simple benchmarks:\n```\n// before\ntest iter::bench_lt               ... bench:      98,404 ns/iter (+/- 21,008)\ntest iter::bench_partial_cmp      ... bench:      62,437 ns/iter (+/- 5,009)\n\n// after\ntest iter::bench_lt               ... bench:      61,757 ns/iter (+/- 8,770)\ntest iter::bench_partial_cmp      ... bench:      62,151 ns/iter (+/- 13,753)\n```\n\nI have no idea why the current `lt`/`le`/`gt`/`ge` implementations don't seem to be compiled optimally, but simply having them call `partial_cmp` seems to be an improvement.\n\nSee #44729 for a previous discussion.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c9d9df58300715d35a0dd5f9af0d1adbbfed8412", "html_url": "https://github.com/rust-lang/rust/commit/c9d9df58300715d35a0dd5f9af0d1adbbfed8412", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c9d9df58300715d35a0dd5f9af0d1adbbfed8412/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f694222887cf31f51e68927716c25736e62f037f", "url": "https://api.github.com/repos/rust-lang/rust/commits/f694222887cf31f51e68927716c25736e62f037f", "html_url": "https://github.com/rust-lang/rust/commit/f694222887cf31f51e68927716c25736e62f037f"}, {"sha": "075b2697e47e9370dcf2d38f01469b38bd4d903e", "url": "https://api.github.com/repos/rust-lang/rust/commits/075b2697e47e9370dcf2d38f01469b38bd4d903e", "html_url": "https://github.com/rust-lang/rust/commit/075b2697e47e9370dcf2d38f01469b38bd4d903e"}], "stats": {"total": 122, "additions": 24, "deletions": 98}, "files": [{"sha": "7dcfad8306fceab448ae1a3899f2b946648c3603", "filename": "src/libcore/benches/iter.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9df58300715d35a0dd5f9af0d1adbbfed8412/src%2Flibcore%2Fbenches%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9df58300715d35a0dd5f9af0d1adbbfed8412/src%2Flibcore%2Fbenches%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fbenches%2Fiter.rs?ref=c9d9df58300715d35a0dd5f9af0d1adbbfed8412", "patch": "@@ -334,3 +334,13 @@ fn bench_filter_chain_ref_count(b: &mut Bencher) {\n         (0i64..1000000).chain(0..1000000).map(black_box).by_ref().filter(|x| x % 3 == 0).count()\n     })\n }\n+\n+#[bench]\n+fn bench_partial_cmp(b: &mut Bencher) {\n+    b.iter(|| (0..100000).map(black_box).partial_cmp((0..100000).map(black_box)))\n+}\n+\n+#[bench]\n+fn bench_lt(b: &mut Bencher) {\n+    b.iter(|| (0..100000).map(black_box).lt((0..100000).map(black_box)))\n+}"}, {"sha": "6df4a457655c5e3e92ad62efa6b02b294fcf5bd2", "filename": "src/libcore/iter/traits/iterator.rs", "status": "modified", "additions": 14, "deletions": 98, "changes": 112, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9df58300715d35a0dd5f9af0d1adbbfed8412/src%2Flibcore%2Fiter%2Ftraits%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9df58300715d35a0dd5f9af0d1adbbfed8412/src%2Flibcore%2Fiter%2Ftraits%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Ftraits%2Fiterator.rs?ref=c9d9df58300715d35a0dd5f9af0d1adbbfed8412", "patch": "@@ -2435,145 +2435,61 @@ pub trait Iterator {\n     /// Determines if the elements of this `Iterator` are unequal to those of\n     /// another.\n     #[stable(feature = \"iter_order\", since = \"1.5.0\")]\n-    fn ne<I>(mut self, other: I) -> bool where\n+    fn ne<I>(self, other: I) -> bool where\n         I: IntoIterator,\n         Self::Item: PartialEq<I::Item>,\n         Self: Sized,\n     {\n-        let mut other = other.into_iter();\n-\n-        loop {\n-            let x = match self.next() {\n-                None => return other.next().is_some(),\n-                Some(val) => val,\n-            };\n-\n-            let y = match other.next() {\n-                None => return true,\n-                Some(val) => val,\n-            };\n-\n-            if x != y { return true }\n-        }\n+        !self.eq(other)\n     }\n \n     /// Determines if the elements of this `Iterator` are lexicographically\n     /// less than those of another.\n     #[stable(feature = \"iter_order\", since = \"1.5.0\")]\n-    fn lt<I>(mut self, other: I) -> bool where\n+    fn lt<I>(self, other: I) -> bool where\n         I: IntoIterator,\n         Self::Item: PartialOrd<I::Item>,\n         Self: Sized,\n     {\n-        let mut other = other.into_iter();\n-\n-        loop {\n-            let x = match self.next() {\n-                None => return other.next().is_some(),\n-                Some(val) => val,\n-            };\n-\n-            let y = match other.next() {\n-                None => return false,\n-                Some(val) => val,\n-            };\n-\n-            match x.partial_cmp(&y) {\n-                Some(Ordering::Less) => return true,\n-                Some(Ordering::Equal) => (),\n-                Some(Ordering::Greater) => return false,\n-                None => return false,\n-            }\n-        }\n+        self.partial_cmp(other) == Some(Ordering::Less)\n     }\n \n     /// Determines if the elements of this `Iterator` are lexicographically\n     /// less or equal to those of another.\n     #[stable(feature = \"iter_order\", since = \"1.5.0\")]\n-    fn le<I>(mut self, other: I) -> bool where\n+    fn le<I>(self, other: I) -> bool where\n         I: IntoIterator,\n         Self::Item: PartialOrd<I::Item>,\n         Self: Sized,\n     {\n-        let mut other = other.into_iter();\n-\n-        loop {\n-            let x = match self.next() {\n-                None => { other.next(); return true; },\n-                Some(val) => val,\n-            };\n-\n-            let y = match other.next() {\n-                None => return false,\n-                Some(val) => val,\n-            };\n-\n-            match x.partial_cmp(&y) {\n-                Some(Ordering::Less) => return true,\n-                Some(Ordering::Equal) => (),\n-                Some(Ordering::Greater) => return false,\n-                None => return false,\n-            }\n+        match self.partial_cmp(other) {\n+            Some(Ordering::Less) | Some(Ordering::Equal) => true,\n+            _ => false,\n         }\n     }\n \n     /// Determines if the elements of this `Iterator` are lexicographically\n     /// greater than those of another.\n     #[stable(feature = \"iter_order\", since = \"1.5.0\")]\n-    fn gt<I>(mut self, other: I) -> bool where\n+    fn gt<I>(self, other: I) -> bool where\n         I: IntoIterator,\n         Self::Item: PartialOrd<I::Item>,\n         Self: Sized,\n     {\n-        let mut other = other.into_iter();\n-\n-        loop {\n-            let x = match self.next() {\n-                None => { other.next(); return false; },\n-                Some(val) => val,\n-            };\n-\n-            let y = match other.next() {\n-                None => return true,\n-                Some(val) => val,\n-            };\n-\n-            match x.partial_cmp(&y) {\n-                Some(Ordering::Less) => return false,\n-                Some(Ordering::Equal) => (),\n-                Some(Ordering::Greater) => return true,\n-                None => return false,\n-            }\n-        }\n+        self.partial_cmp(other) == Some(Ordering::Greater)\n     }\n \n     /// Determines if the elements of this `Iterator` are lexicographically\n     /// greater than or equal to those of another.\n     #[stable(feature = \"iter_order\", since = \"1.5.0\")]\n-    fn ge<I>(mut self, other: I) -> bool where\n+    fn ge<I>(self, other: I) -> bool where\n         I: IntoIterator,\n         Self::Item: PartialOrd<I::Item>,\n         Self: Sized,\n     {\n-        let mut other = other.into_iter();\n-\n-        loop {\n-            let x = match self.next() {\n-                None => return other.next().is_none(),\n-                Some(val) => val,\n-            };\n-\n-            let y = match other.next() {\n-                None => return true,\n-                Some(val) => val,\n-            };\n-\n-            match x.partial_cmp(&y) {\n-                Some(Ordering::Less) => return false,\n-                Some(Ordering::Equal) => (),\n-                Some(Ordering::Greater) => return true,\n-                None => return false,\n-            }\n+        match self.partial_cmp(other) {\n+            Some(Ordering::Greater) | Some(Ordering::Equal) => true,\n+            _ => false,\n         }\n     }\n "}]}