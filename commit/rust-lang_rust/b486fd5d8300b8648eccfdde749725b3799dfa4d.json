{"sha": "b486fd5d8300b8648eccfdde749725b3799dfa4d", "node_id": "C_kwDOAAsO6NoAKGI0ODZmZDVkODMwMGI4NjQ4ZWNjZmRkZTc0OTcyNWIzNzk5ZGZhNGQ", "commit": {"author": {"name": "Chris AtLee", "email": "chris@atlee.ca", "date": "2022-10-27T16:52:29Z"}, "committer": {"name": "Chris AtLee", "email": "chris@atlee.ca", "date": "2022-12-13T19:45:12Z"}, "message": "Add docs for question mark operator for Option", "tree": {"sha": "e2db5cbf18bc2c5d48eb17f0f4dc13c7c4712763", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e2db5cbf18bc2c5d48eb17f0f4dc13c7c4712763"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b486fd5d8300b8648eccfdde749725b3799dfa4d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b486fd5d8300b8648eccfdde749725b3799dfa4d", "html_url": "https://github.com/rust-lang/rust/commit/b486fd5d8300b8648eccfdde749725b3799dfa4d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b486fd5d8300b8648eccfdde749725b3799dfa4d/comments", "author": {"login": "catlee", "id": 54458, "node_id": "MDQ6VXNlcjU0NDU4", "avatar_url": "https://avatars.githubusercontent.com/u/54458?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catlee", "html_url": "https://github.com/catlee", "followers_url": "https://api.github.com/users/catlee/followers", "following_url": "https://api.github.com/users/catlee/following{/other_user}", "gists_url": "https://api.github.com/users/catlee/gists{/gist_id}", "starred_url": "https://api.github.com/users/catlee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catlee/subscriptions", "organizations_url": "https://api.github.com/users/catlee/orgs", "repos_url": "https://api.github.com/users/catlee/repos", "events_url": "https://api.github.com/users/catlee/events{/privacy}", "received_events_url": "https://api.github.com/users/catlee/received_events", "type": "User", "site_admin": false}, "committer": {"login": "catlee", "id": 54458, "node_id": "MDQ6VXNlcjU0NDU4", "avatar_url": "https://avatars.githubusercontent.com/u/54458?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catlee", "html_url": "https://github.com/catlee", "followers_url": "https://api.github.com/users/catlee/followers", "following_url": "https://api.github.com/users/catlee/following{/other_user}", "gists_url": "https://api.github.com/users/catlee/gists{/gist_id}", "starred_url": "https://api.github.com/users/catlee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catlee/subscriptions", "organizations_url": "https://api.github.com/users/catlee/orgs", "repos_url": "https://api.github.com/users/catlee/repos", "events_url": "https://api.github.com/users/catlee/events{/privacy}", "received_events_url": "https://api.github.com/users/catlee/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aa5b179599427ef233c4e47db8dac6edae22b4f8", "url": "https://api.github.com/repos/rust-lang/rust/commits/aa5b179599427ef233c4e47db8dac6edae22b4f8", "html_url": "https://github.com/rust-lang/rust/commit/aa5b179599427ef233c4e47db8dac6edae22b4f8"}], "stats": {"total": 45, "additions": 45, "deletions": 0}, "files": [{"sha": "699e04eff2b31817e1ba9b15e97b7013a088e85e", "filename": "library/core/src/option.rs", "status": "modified", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/b486fd5d8300b8648eccfdde749725b3799dfa4d/library%2Fcore%2Fsrc%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b486fd5d8300b8648eccfdde749725b3799dfa4d/library%2Fcore%2Fsrc%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Foption.rs?ref=b486fd5d8300b8648eccfdde749725b3799dfa4d", "patch": "@@ -72,6 +72,51 @@\n //! }\n //! ```\n //!\n+//! # The question mark operator, `?`\n+//!\n+//! Similar to the [`Result`] type, when writing code that calls many functions that return the\n+//! [`Option`] type, handling `Some`/`None` can be tedious. The question mark\n+//! operator, [`?`], hides some of the boilerplate of propagating values\n+//! up the call stack.\n+//!\n+//! It replaces this:\n+//!\n+//! ```\n+//! # #![allow(dead_code)]\n+//! fn add_last_numbers(stack: &mut Vec<i32>) -> Option<i32> {\n+//!     let a = stack.pop();\n+//!     let b = stack.pop();\n+//!\n+//!     match (a, b) {\n+//!         (Some(x), Some(y)) => Some(x + y),\n+//!         _ => None,\n+//!     }\n+//! }\n+//!\n+//! ```\n+//!\n+//! With this:\n+//!\n+//! ```\n+//! # #![allow(dead_code)]\n+//! fn add_last_numbers(stack: &mut Vec<i32>) -> Option<i32> {\n+//!     Some(stack.pop()? + stack.pop()?)\n+//! }\n+//! ```\n+//!\n+//! *It's much nicer!*\n+//!\n+//! Ending the expression with [`?`] will result in the unwrapped\n+//! success ([`Some`]) value, unless the result is [`None`], in which case\n+//! [`None`] is returned early from the enclosing function.\n+//!\n+//! [`?`] can only be used in functions that return [`Option`] because of the\n+//! early return of [`None`] that it provides.\n+//!\n+//! [`?`]: crate::ops::Try\n+//! [`Some`]: Some\n+//! [`None`]: None\n+//!\n //! # Representation\n //!\n //! Rust guarantees to optimize the following types `T` such that"}]}