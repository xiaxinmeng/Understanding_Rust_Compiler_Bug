{"sha": "09efd472a9ed60be6daa62d9339b0c5e6db92ee4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA5ZWZkNDcyYTllZDYwYmU2ZGFhNjJkOTMzOWIwYzVlNmRiOTJlZTQ=", "commit": {"author": {"name": "Bj\u00f6rn Steinbrink", "email": "bsteinbr@gmail.com", "date": "2013-05-20T09:51:43Z"}, "committer": {"name": "Bj\u00f6rn Steinbrink", "email": "bsteinbr@gmail.com", "date": "2013-05-20T10:10:55Z"}, "message": "Remove outdated function transmute_for_stage0\n\nThe function was a workaround for bootstrapping that isn't required\nanymore and just degrades hashmap performance, as it doesn't get inlined\ncross-crate and turns a no-op into a call.", "tree": {"sha": "86c6116c5bb82a6fdb9fbfd347f29f73af1f95c3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/86c6116c5bb82a6fdb9fbfd347f29f73af1f95c3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/09efd472a9ed60be6daa62d9339b0c5e6db92ee4", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/09efd472a9ed60be6daa62d9339b0c5e6db92ee4", "html_url": "https://github.com/rust-lang/rust/commit/09efd472a9ed60be6daa62d9339b0c5e6db92ee4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/09efd472a9ed60be6daa62d9339b0c5e6db92ee4/comments", "author": {"login": "dotdash", "id": 230962, "node_id": "MDQ6VXNlcjIzMDk2Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/230962?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dotdash", "html_url": "https://github.com/dotdash", "followers_url": "https://api.github.com/users/dotdash/followers", "following_url": "https://api.github.com/users/dotdash/following{/other_user}", "gists_url": "https://api.github.com/users/dotdash/gists{/gist_id}", "starred_url": "https://api.github.com/users/dotdash/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dotdash/subscriptions", "organizations_url": "https://api.github.com/users/dotdash/orgs", "repos_url": "https://api.github.com/users/dotdash/repos", "events_url": "https://api.github.com/users/dotdash/events{/privacy}", "received_events_url": "https://api.github.com/users/dotdash/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dotdash", "id": 230962, "node_id": "MDQ6VXNlcjIzMDk2Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/230962?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dotdash", "html_url": "https://github.com/dotdash", "followers_url": "https://api.github.com/users/dotdash/followers", "following_url": "https://api.github.com/users/dotdash/following{/other_user}", "gists_url": "https://api.github.com/users/dotdash/gists{/gist_id}", "starred_url": "https://api.github.com/users/dotdash/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dotdash/subscriptions", "organizations_url": "https://api.github.com/users/dotdash/orgs", "repos_url": "https://api.github.com/users/dotdash/repos", "events_url": "https://api.github.com/users/dotdash/events{/privacy}", "received_events_url": "https://api.github.com/users/dotdash/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2e6cda254a2acdcd60efb62a27f69c7702b8f71e", "url": "https://api.github.com/repos/rust-lang/rust/commits/2e6cda254a2acdcd60efb62a27f69c7702b8f71e", "html_url": "https://github.com/rust-lang/rust/commit/2e6cda254a2acdcd60efb62a27f69c7702b8f71e"}], "stats": {"total": 34, "additions": 15, "deletions": 19}, "files": [{"sha": "69312f3a97b8c857cf9f1d9da3a4f7a9bd57415a", "filename": "src/libcore/hash.rs", "status": "modified", "additions": 15, "deletions": 19, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/09efd472a9ed60be6daa62d9339b0c5e6db92ee4/src%2Flibcore%2Fhash.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09efd472a9ed60be6daa62d9339b0c5e6db92ee4/src%2Flibcore%2Fhash.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fhash.rs?ref=09efd472a9ed60be6daa62d9339b0c5e6db92ee4", "patch": "@@ -76,16 +76,12 @@ pub trait Streaming {\n     fn reset(&mut self);\n }\n \n-fn transmute_for_stage0<'a>(bytes: &'a [u8]) -> &'a [u8] {\n-    bytes\n-}\n-\n impl<A:IterBytes> Hash for A {\n     #[inline(always)]\n     fn hash_keyed(&self, k0: u64, k1: u64) -> u64 {\n         let mut s = State::new(k0, k1);\n         for self.iter_bytes(true) |bytes| {\n-            s.input(transmute_for_stage0(bytes));\n+            s.input(bytes);\n         }\n         s.result_u64()\n     }\n@@ -95,10 +91,10 @@ fn hash_keyed_2<A: IterBytes,\n                 B: IterBytes>(a: &A, b: &B, k0: u64, k1: u64) -> u64 {\n     let mut s = State::new(k0, k1);\n     for a.iter_bytes(true) |bytes| {\n-        s.input(transmute_for_stage0(bytes));\n+        s.input(bytes);\n     }\n     for b.iter_bytes(true) |bytes| {\n-        s.input(transmute_for_stage0(bytes));\n+        s.input(bytes);\n     }\n     s.result_u64()\n }\n@@ -108,13 +104,13 @@ fn hash_keyed_3<A: IterBytes,\n                 C: IterBytes>(a: &A, b: &B, c: &C, k0: u64, k1: u64) -> u64 {\n     let mut s = State::new(k0, k1);\n     for a.iter_bytes(true) |bytes| {\n-        s.input(transmute_for_stage0(bytes));\n+        s.input(bytes);\n     }\n     for b.iter_bytes(true) |bytes| {\n-        s.input(transmute_for_stage0(bytes));\n+        s.input(bytes);\n     }\n     for c.iter_bytes(true) |bytes| {\n-        s.input(transmute_for_stage0(bytes));\n+        s.input(bytes);\n     }\n     s.result_u64()\n }\n@@ -132,16 +128,16 @@ fn hash_keyed_4<A: IterBytes,\n                 -> u64 {\n     let mut s = State::new(k0, k1);\n     for a.iter_bytes(true) |bytes| {\n-        s.input(transmute_for_stage0(bytes));\n+        s.input(bytes);\n     }\n     for b.iter_bytes(true) |bytes| {\n-        s.input(transmute_for_stage0(bytes));\n+        s.input(bytes);\n     }\n     for c.iter_bytes(true) |bytes| {\n-        s.input(transmute_for_stage0(bytes));\n+        s.input(bytes);\n     }\n     for d.iter_bytes(true) |bytes| {\n-        s.input(transmute_for_stage0(bytes));\n+        s.input(bytes);\n     }\n     s.result_u64()\n }\n@@ -161,19 +157,19 @@ fn hash_keyed_5<A: IterBytes,\n                 -> u64 {\n     let mut s = State::new(k0, k1);\n     for a.iter_bytes(true) |bytes| {\n-        s.input(transmute_for_stage0(bytes));\n+        s.input(bytes);\n     }\n     for b.iter_bytes(true) |bytes| {\n-        s.input(transmute_for_stage0(bytes));\n+        s.input(bytes);\n     }\n     for c.iter_bytes(true) |bytes| {\n-        s.input(transmute_for_stage0(bytes));\n+        s.input(bytes);\n     }\n     for d.iter_bytes(true) |bytes| {\n-        s.input(transmute_for_stage0(bytes));\n+        s.input(bytes);\n     }\n     for e.iter_bytes(true) |bytes| {\n-        s.input(transmute_for_stage0(bytes));\n+        s.input(bytes);\n     }\n     s.result_u64()\n }"}]}