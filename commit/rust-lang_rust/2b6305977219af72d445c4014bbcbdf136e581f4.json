{"sha": "2b6305977219af72d445c4014bbcbdf136e581f4", "node_id": "C_kwDOAAsO6NoAKDJiNjMwNTk3NzIxOWFmNzJkNDQ1YzQwMTRiYmNiZGYxMzZlNTgxZjQ", "commit": {"author": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2021-05-09T23:10:17Z"}, "committer": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2021-12-06T20:05:22Z"}, "message": "Create newtype around the pre order index", "tree": {"sha": "5272816113cfa0f4d492172bbb573886812cdfb6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5272816113cfa0f4d492172bbb573886812cdfb6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2b6305977219af72d445c4014bbcbdf136e581f4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2b6305977219af72d445c4014bbcbdf136e581f4", "html_url": "https://github.com/rust-lang/rust/commit/2b6305977219af72d445c4014bbcbdf136e581f4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2b6305977219af72d445c4014bbcbdf136e581f4/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cc63ec32fb1921ce51425c90cded1f62f7971487", "url": "https://api.github.com/repos/rust-lang/rust/commits/cc63ec32fb1921ce51425c90cded1f62f7971487", "html_url": "https://github.com/rust-lang/rust/commit/cc63ec32fb1921ce51425c90cded1f62f7971487"}], "stats": {"total": 73, "additions": 41, "deletions": 32}, "files": [{"sha": "e1a32d53e92770d8cae3bad666252be0123a750a", "filename": "compiler/rustc_data_structures/src/graph/dominators/mod.rs", "status": "modified", "additions": 41, "deletions": 32, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/2b6305977219af72d445c4014bbcbdf136e581f4/compiler%2Frustc_data_structures%2Fsrc%2Fgraph%2Fdominators%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b6305977219af72d445c4014bbcbdf136e581f4/compiler%2Frustc_data_structures%2Fsrc%2Fgraph%2Fdominators%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fgraph%2Fdominators%2Fmod.rs?ref=2b6305977219af72d445c4014bbcbdf136e581f4", "patch": "@@ -11,53 +11,59 @@ use std::cmp::Ordering;\n #[cfg(test)]\n mod tests;\n \n-struct PreOrderFrame<Node, Iter> {\n-    node: Node,\n+struct PreOrderFrame<Iter> {\n+    pre_order_idx: PreorderIndex,\n     iter: Iter,\n }\n \n+rustc_index::newtype_index! {\n+    struct PreorderIndex { .. }\n+}\n+\n pub fn dominators<G: ControlFlowGraph>(graph: G) -> Dominators<G::Node> {\n     // compute the post order index (rank) for each node\n     let mut post_order_rank = IndexVec::from_elem_n(0, graph.num_nodes());\n-    let mut parent: IndexVec<usize, Option<usize>> = IndexVec::from_elem_n(None, graph.num_nodes());\n+    let mut parent: IndexVec<PreorderIndex, Option<PreorderIndex>> =\n+        IndexVec::from_elem_n(None, graph.num_nodes());\n \n-    let mut stack = vec![PreOrderFrame { node: 0, iter: graph.successors(graph.start_node()) }];\n-    let mut pre_order_to_real = Vec::with_capacity(graph.num_nodes());\n-    let mut real_to_pre_order: IndexVec<G::Node, Option<usize>> =\n+    let mut stack = vec![PreOrderFrame {\n+        pre_order_idx: PreorderIndex::new(0),\n+        iter: graph.successors(graph.start_node()),\n+    }];\n+    let mut pre_order_to_real: IndexVec<PreorderIndex, G::Node> =\n+        IndexVec::with_capacity(graph.num_nodes());\n+    let mut real_to_pre_order: IndexVec<G::Node, Option<PreorderIndex>> =\n         IndexVec::from_elem_n(None, graph.num_nodes());\n     pre_order_to_real.push(graph.start_node());\n-    real_to_pre_order[graph.start_node()] = Some(0);\n+    real_to_pre_order[graph.start_node()] = Some(PreorderIndex::new(0));\n     let mut post_order_idx = 0;\n \n     'recurse: while let Some(frame) = stack.last_mut() {\n         while let Some(successor) = frame.iter.next() {\n             if real_to_pre_order[successor].is_none() {\n-                let pre_order_idx = pre_order_to_real.len();\n-\n+                let pre_order_idx = pre_order_to_real.push(successor);\n                 real_to_pre_order[successor] = Some(pre_order_idx);\n-                parent[pre_order_idx] = Some(frame.node);\n-                pre_order_to_real.push(successor);\n-                stack\n-                    .push(PreOrderFrame { node: pre_order_idx, iter: graph.successors(successor) });\n+                parent[pre_order_idx] = Some(frame.pre_order_idx);\n+                stack.push(PreOrderFrame { pre_order_idx, iter: graph.successors(successor) });\n \n                 continue 'recurse;\n             }\n         }\n-        post_order_rank[pre_order_to_real[frame.node]] = post_order_idx;\n+        post_order_rank[pre_order_to_real[frame.pre_order_idx]] = post_order_idx;\n         post_order_idx += 1;\n \n         stack.pop();\n     }\n \n     let reachable_vertices = pre_order_to_real.len();\n \n-    let mut idom = IndexVec::from_elem_n(0, reachable_vertices);\n+    let mut idom = IndexVec::from_elem_n(PreorderIndex::new(0), reachable_vertices);\n     let mut semi = IndexVec::from_fn_n(std::convert::identity, reachable_vertices);\n     let mut label = semi.clone();\n     let mut bucket = IndexVec::from_elem_n(vec![], reachable_vertices);\n     let mut lastlinked = None;\n \n-    for w in (1..reachable_vertices).rev() {\n+    for w in (PreorderIndex::new(1)..PreorderIndex::new(reachable_vertices)).rev() {\n         // Optimization: process buckets just once, at the start of the\n         // iteration. Do not explicitly empty the bucket (even though it will\n         // not be used again), to save some instructions.\n@@ -87,27 +93,28 @@ pub fn dominators<G: ControlFlowGraph>(graph: G) -> Dominators<G::Node> {\n         // processed elements; lastlinked represents the divider.\n         lastlinked = Some(w);\n     }\n-    for w in 1..reachable_vertices {\n+    for w in PreorderIndex::new(1)..PreorderIndex::new(reachable_vertices) {\n         if idom[w] != semi[w] {\n             idom[w] = idom[idom[w]];\n         }\n     }\n \n     let mut immediate_dominators = IndexVec::from_elem_n(None, graph.num_nodes());\n-    for (idx, node) in pre_order_to_real.iter().enumerate() {\n+    for (idx, node) in pre_order_to_real.iter_enumerated() {\n         immediate_dominators[*node] = Some(pre_order_to_real[idom[idx]]);\n     }\n \n     Dominators { post_order_rank, immediate_dominators }\n }\n \n-fn eval<N: Idx>(\n-    ancestor: &mut IndexVec<N, Option<N>>,\n-    lastlinked: Option<N>,\n-    semi: &IndexVec<N, N>,\n-    label: &mut IndexVec<N, N>,\n-    node: N,\n-) -> N {\n+#[inline]\n+fn eval(\n+    ancestor: &mut IndexVec<PreorderIndex, Option<PreorderIndex>>,\n+    lastlinked: Option<PreorderIndex>,\n+    semi: &IndexVec<PreorderIndex, PreorderIndex>,\n+    label: &mut IndexVec<PreorderIndex, PreorderIndex>,\n+    node: PreorderIndex,\n+) -> PreorderIndex {\n     if is_processed(node, lastlinked) {\n         compress(ancestor, lastlinked, semi, label, node);\n         label[node]\n@@ -116,16 +123,18 @@ fn eval<N: Idx>(\n     }\n }\n \n-fn is_processed<N: Idx>(v: N, lastlinked: Option<N>) -> bool {\n+#[inline]\n+fn is_processed(v: PreorderIndex, lastlinked: Option<PreorderIndex>) -> bool {\n     if let Some(ll) = lastlinked { v >= ll } else { false }\n }\n \n-fn compress<N: Idx>(\n-    ancestor: &mut IndexVec<N, Option<N>>,\n-    lastlinked: Option<N>,\n-    semi: &IndexVec<N, N>,\n-    label: &mut IndexVec<N, N>,\n-    v: N,\n+#[inline]\n+fn compress(\n+    ancestor: &mut IndexVec<PreorderIndex, Option<PreorderIndex>>,\n+    lastlinked: Option<PreorderIndex>,\n+    semi: &IndexVec<PreorderIndex, PreorderIndex>,\n+    label: &mut IndexVec<PreorderIndex, PreorderIndex>,\n+    v: PreorderIndex,\n ) {\n     assert!(is_processed(v, lastlinked));\n     let u = ancestor[v].unwrap();"}]}