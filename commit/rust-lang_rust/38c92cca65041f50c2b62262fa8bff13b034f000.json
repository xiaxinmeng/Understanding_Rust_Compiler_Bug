{"sha": "38c92cca65041f50c2b62262fa8bff13b034f000", "node_id": "C_kwDOAAsO6NoAKDM4YzkyY2NhNjUwNDFmNTBjMmI2MjI2MmZhOGJmZjEzYjAzNGYwMDA", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-06-06T10:00:34Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-06-06T10:00:34Z"}, "message": "Rollup merge of #112325 - notriddle:notriddle/issue-111932, r=compiler-errors\n\ndiagnostics: do not suggest type name tweaks on type-inferred closure args\n\nFixes #111932", "tree": {"sha": "907604626920908554c37b6e1f7f67fd28859a7c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/907604626920908554c37b6e1f7f67fd28859a7c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/38c92cca65041f50c2b62262fa8bff13b034f000", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkfwPCCRBK7hj4Ov3rIwAACr0IADwfTWUGdsTAlo86ETWON7Sv\nQDZ/44XrPDACrQJAOt7hbagQjO8WJ4mpD4tewCYNUcYOYo7ny2dpRQdjsTPeTZmD\nXHtti9BbR8Z10Mhz/8EPEqGhXMEmMd7y5GWYXveBTGvqc3oRp9WEPvyKVH3pAS9D\nXo+OXewxiG40YNp5uilINQQzGBX0W3Rg7QzlwcYS2AeDN003qwWJqktJWX9rcHi2\nvPrSHwy2EGuKkFiWmnf8WVJWNJaaYg5pb6zMnDczYjPpKFcu6zr2FKOPu12pPtlZ\nmA9jkF9EY4PWok1Ik27kwTOP7669IOR8K4IyDFUX7j7+GlYdt43gStRZp9S5IA4=\n=+dnz\n-----END PGP SIGNATURE-----\n", "payload": "tree 907604626920908554c37b6e1f7f67fd28859a7c\nparent 7c76f3b9d8e9b0419c4cb3d7b90043531ff7be42\nparent 467bc9ffd56dc31d6db79820bd07dbdd5f653783\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1686045634 +0200\ncommitter GitHub <noreply@github.com> 1686045634 +0200\n\nRollup merge of #112325 - notriddle:notriddle/issue-111932, r=compiler-errors\n\ndiagnostics: do not suggest type name tweaks on type-inferred closure args\n\nFixes #111932\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/38c92cca65041f50c2b62262fa8bff13b034f000", "html_url": "https://github.com/rust-lang/rust/commit/38c92cca65041f50c2b62262fa8bff13b034f000", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/38c92cca65041f50c2b62262fa8bff13b034f000/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7c76f3b9d8e9b0419c4cb3d7b90043531ff7be42", "url": "https://api.github.com/repos/rust-lang/rust/commits/7c76f3b9d8e9b0419c4cb3d7b90043531ff7be42", "html_url": "https://github.com/rust-lang/rust/commit/7c76f3b9d8e9b0419c4cb3d7b90043531ff7be42"}, {"sha": "467bc9ffd56dc31d6db79820bd07dbdd5f653783", "url": "https://api.github.com/repos/rust-lang/rust/commits/467bc9ffd56dc31d6db79820bd07dbdd5f653783", "html_url": "https://github.com/rust-lang/rust/commit/467bc9ffd56dc31d6db79820bd07dbdd5f653783"}], "stats": {"total": 70, "additions": 62, "deletions": 8}, "files": [{"sha": "69ccbf0b58ff38aa066baf248e1680efe8591d24", "filename": "compiler/rustc_hir_typeck/src/check.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/38c92cca65041f50c2b62262fa8bff13b034f000/compiler%2Frustc_hir_typeck%2Fsrc%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38c92cca65041f50c2b62262fa8bff13b034f000/compiler%2Frustc_hir_typeck%2Fsrc%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fcheck.rs?ref=38c92cca65041f50c2b62262fa8bff13b034f000", "patch": "@@ -96,7 +96,19 @@ pub(super) fn check_fn<'a, 'tcx>(\n         // for simple cases like `fn foo(x: Trait)`,\n         // where we would error once on the parameter as a whole, and once on the binding `x`.\n         if param.pat.simple_ident().is_none() && !params_can_be_unsized {\n-            fcx.require_type_is_sized(param_ty, param.pat.span, traits::SizedArgumentType(ty_span));\n+            fcx.require_type_is_sized(\n+                param_ty,\n+                param.pat.span,\n+                // ty_span == binding_span iff this is a closure parameter with no type ascription,\n+                // or if it's an implicit `self` parameter\n+                traits::SizedArgumentType(\n+                    if ty_span == Some(param.span) && tcx.is_closure(fn_def_id.into()) {\n+                        None\n+                    } else {\n+                        ty_span\n+                    },\n+                ),\n+            );\n         }\n \n         fcx.write_ty(param.hir_id, param_ty);"}, {"sha": "d9b9b34ba583be3049b120b7378e604e0157ba5c", "filename": "compiler/rustc_hir_typeck/src/gather_locals.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/38c92cca65041f50c2b62262fa8bff13b034f000/compiler%2Frustc_hir_typeck%2Fsrc%2Fgather_locals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38c92cca65041f50c2b62262fa8bff13b034f000/compiler%2Frustc_hir_typeck%2Fsrc%2Fgather_locals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fgather_locals.rs?ref=38c92cca65041f50c2b62262fa8bff13b034f000", "patch": "@@ -129,7 +129,17 @@ impl<'a, 'tcx> Visitor<'tcx> for GatherLocalsVisitor<'a, 'tcx> {\n                     self.fcx.require_type_is_sized(\n                         var_ty,\n                         p.span,\n-                        traits::SizedArgumentType(Some(ty_span)),\n+                        // ty_span == ident.span iff this is a closure parameter with no type\n+                        // ascription, or if it's an implicit `self` parameter\n+                        traits::SizedArgumentType(\n+                            if ty_span == ident.span\n+                                && self.fcx.tcx.is_closure(self.fcx.body_id.into())\n+                            {\n+                                None\n+                            } else {\n+                                Some(ty_span)\n+                            },\n+                        ),\n                     );\n                 }\n             } else {"}, {"sha": "e73d917a8aed163dee1d9f89a6080ac34a5ab311", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38c92cca65041f50c2b62262fa8bff13b034f000/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38c92cca65041f50c2b62262fa8bff13b034f000/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=38c92cca65041f50c2b62262fa8bff13b034f000", "patch": "@@ -2807,8 +2807,8 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                     err.help(\"unsized locals are gated as an unstable feature\");\n                 }\n             }\n-            ObligationCauseCode::SizedArgumentType(sp) => {\n-                if let Some(span) = sp {\n+            ObligationCauseCode::SizedArgumentType(ty_span) => {\n+                if let Some(span) = ty_span {\n                     if let ty::PredicateKind::Clause(clause) = predicate.kind().skip_binder()\n                         && let ty::Clause::Trait(trait_pred) = clause\n                         && let ty::Dynamic(..) = trait_pred.self_ty().kind()"}, {"sha": "eb3fe08cbc409fe10ada6e7af771403c04e0b9c6", "filename": "tests/ui/closures/issue-111932.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/38c92cca65041f50c2b62262fa8bff13b034f000/tests%2Fui%2Fclosures%2Fissue-111932.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38c92cca65041f50c2b62262fa8bff13b034f000/tests%2Fui%2Fclosures%2Fissue-111932.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fclosures%2Fissue-111932.rs?ref=38c92cca65041f50c2b62262fa8bff13b034f000", "patch": "@@ -0,0 +1,9 @@\n+trait Foo: std::fmt::Debug {}\n+\n+fn print_foos(foos: impl Iterator<Item = dyn Foo>) {\n+    foos.for_each(|foo| { //~ ERROR [E0277]\n+        println!(\"{:?}\", foo); //~ ERROR [E0277]\n+    });\n+}\n+\n+fn main() {}"}, {"sha": "937bdf3bea255a829bd855455e9df501c2292cdb", "filename": "tests/ui/closures/issue-111932.stderr", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/38c92cca65041f50c2b62262fa8bff13b034f000/tests%2Fui%2Fclosures%2Fissue-111932.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/38c92cca65041f50c2b62262fa8bff13b034f000/tests%2Fui%2Fclosures%2Fissue-111932.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fclosures%2Fissue-111932.stderr?ref=38c92cca65041f50c2b62262fa8bff13b034f000", "patch": "@@ -0,0 +1,26 @@\n+error[E0277]: the size for values of type `(dyn Foo + 'static)` cannot be known at compilation time\n+  --> $DIR/issue-111932.rs:4:20\n+   |\n+LL |     foos.for_each(|foo| {\n+   |                    ^^^ doesn't have a size known at compile-time\n+   |\n+   = help: the trait `Sized` is not implemented for `(dyn Foo + 'static)`\n+   = note: all function arguments must have a statically known size\n+   = help: unsized fn params are gated as an unstable feature\n+\n+error[E0277]: the size for values of type `dyn Foo` cannot be known at compilation time\n+  --> $DIR/issue-111932.rs:5:26\n+   |\n+LL |         println!(\"{:?}\", foo);\n+   |                   ----   ^^^ doesn't have a size known at compile-time\n+   |                   |\n+   |                   required by a bound introduced by this call\n+   |\n+   = help: the trait `Sized` is not implemented for `dyn Foo`\n+note: required by a bound in `core::fmt::rt::Argument::<'a>::new_debug`\n+  --> $SRC_DIR/core/src/fmt/rt.rs:LL:COL\n+   = note: this error originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "13fdc037ac5697b3328e32a50e2199827605d9e1", "filename": "tests/ui/unsized-locals/issue-67981.stderr", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/38c92cca65041f50c2b62262fa8bff13b034f000/tests%2Fui%2Funsized-locals%2Fissue-67981.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/38c92cca65041f50c2b62262fa8bff13b034f000/tests%2Fui%2Funsized-locals%2Fissue-67981.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funsized-locals%2Fissue-67981.stderr?ref=38c92cca65041f50c2b62262fa8bff13b034f000", "patch": "@@ -5,10 +5,7 @@ LL |     let f: fn([u8]) = |_| {};\n    |                        ^ doesn't have a size known at compile-time\n    |\n    = help: the trait `Sized` is not implemented for `[u8]`\n-help: function arguments must have a statically known size, borrowed types always have a known size\n-   |\n-LL |     let f: fn([u8]) = |&_| {};\n-   |                        +\n+   = note: all function arguments must have a statically known size\n \n error: aborting due to previous error\n "}]}