{"sha": "36c274aa382cbec0a8914e0d64541a2fda9ac5da", "node_id": "C_kwDOAAsO6NoAKDM2YzI3NGFhMzgyY2JlYzBhODkxNGUwZDY0NTQxYTJmZGE5YWM1ZGE", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-10T07:24:07Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-10T07:24:07Z"}, "message": "Auto merge of #2084 - rust-lang:silence, r=RalfJung\n\nAdd a command line flag to avoid printing to stdout and stderr\n\nThis is practical for tests that don't actually care about the output and thus don't want it intermingled with miri's warnings, errors or ICEs\n\nfixes #2083", "tree": {"sha": "ecbfb601e002d51f6491f3b669acae1b0e9445a8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ecbfb601e002d51f6491f3b669acae1b0e9445a8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/36c274aa382cbec0a8914e0d64541a2fda9ac5da", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/36c274aa382cbec0a8914e0d64541a2fda9ac5da", "html_url": "https://github.com/rust-lang/rust/commit/36c274aa382cbec0a8914e0d64541a2fda9ac5da", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/36c274aa382cbec0a8914e0d64541a2fda9ac5da/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1abf2cf9dd7a355d220e6bb77f8f7a248f4371ef", "url": "https://api.github.com/repos/rust-lang/rust/commits/1abf2cf9dd7a355d220e6bb77f8f7a248f4371ef", "html_url": "https://github.com/rust-lang/rust/commit/1abf2cf9dd7a355d220e6bb77f8f7a248f4371ef"}, {"sha": "6dc6256413a242a3917b01ac28059024dc6bef45", "url": "https://api.github.com/repos/rust-lang/rust/commits/6dc6256413a242a3917b01ac28059024dc6bef45", "html_url": "https://github.com/rust-lang/rust/commit/6dc6256413a242a3917b01ac28059024dc6bef45"}], "stats": {"total": 88, "additions": 79, "deletions": 9}, "files": [{"sha": "5b97ca95d93f3aac651ef8d6250ee3bb9ac32c33", "filename": "README.md", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/36c274aa382cbec0a8914e0d64541a2fda9ac5da/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/36c274aa382cbec0a8914e0d64541a2fda9ac5da/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=36c274aa382cbec0a8914e0d64541a2fda9ac5da", "patch": "@@ -286,6 +286,10 @@ environment variable:\n    This can be used to find which parts of your program are executing slowly under Miri.\n    The profile is written out to a file with the prefix `<name>`, and can be processed\n    using the tools in the repository https://github.com/rust-lang/measureme.\n+* `-Zmiri-mute-stdout-stderr` silently ignores all writes to stdout and stderr,\n+  but reports to the program that it did actually write. This is useful when you\n+  are not interested in the actual program's output, but only want to see miri's\n+  errors and warnings.\n * `-Zmiri-panic-on-unsupported` will makes some forms of unsupported functionality,\n   such as FFI and unsupported syscalls, panic within the context of the emulated\n   application instead of raising an error within the context of Miri (and halting"}, {"sha": "b1c2872513e47caf00a056d53f26cd96878f09ce", "filename": "src/bin/miri.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/36c274aa382cbec0a8914e0d64541a2fda9ac5da/src%2Fbin%2Fmiri.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36c274aa382cbec0a8914e0d64541a2fda9ac5da/src%2Fbin%2Fmiri.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fmiri.rs?ref=36c274aa382cbec0a8914e0d64541a2fda9ac5da", "patch": "@@ -384,6 +384,9 @@ fn main() {\n                     miri_config.tag_raw = true;\n                     miri_config.check_number_validity = true;\n                 }\n+                \"-Zmiri-mute-stdout-stderr\" => {\n+                    miri_config.mute_stdout_stderr = true;\n+                }\n                 \"-Zmiri-track-raw-pointers\" => {\n                     eprintln!(\n                         \"WARNING: -Zmiri-track-raw-pointers has been renamed to -Zmiri-tag-raw-pointers, the old name is deprecated.\""}, {"sha": "028c9b97abb37562885db40e3e279e60ef5b3204", "filename": "src/eval.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/36c274aa382cbec0a8914e0d64541a2fda9ac5da/src%2Feval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36c274aa382cbec0a8914e0d64541a2fda9ac5da/src%2Feval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Feval.rs?ref=36c274aa382cbec0a8914e0d64541a2fda9ac5da", "patch": "@@ -116,6 +116,9 @@ pub struct MiriConfig {\n     /// Whether to enforce \"strict provenance\" rules. Enabling this means int2ptr casts return\n     /// pointers with an invalid provenance, i.e., not valid for any memory access.\n     pub strict_provenance: bool,\n+    /// Whether to ignore any output by the program. This is helpful when debugging miri\n+    /// as its messages don't get intermingled with the program messages.\n+    pub mute_stdout_stderr: bool,\n }\n \n impl Default for MiriConfig {\n@@ -142,6 +145,7 @@ impl Default for MiriConfig {\n             panic_on_unsupported: false,\n             backtrace_style: BacktraceStyle::Short,\n             strict_provenance: false,\n+            mute_stdout_stderr: false,\n         }\n     }\n }"}, {"sha": "1f1caa866118f9b3f7f0d049a7daaacdc082a5d5", "filename": "src/machine.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/36c274aa382cbec0a8914e0d64541a2fda9ac5da/src%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36c274aa382cbec0a8914e0d64541a2fda9ac5da/src%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmachine.rs?ref=36c274aa382cbec0a8914e0d64541a2fda9ac5da", "patch": "@@ -28,7 +28,7 @@ use rustc_span::symbol::{sym, Symbol};\n use rustc_target::abi::Size;\n use rustc_target::spec::abi::Abi;\n \n-use crate::*;\n+use crate::{*, shims::posix::FileHandler};\n \n // Some global facts about the emulated machine.\n pub const PAGE_SIZE: u64 = 4 * 1024; // FIXME: adjust to target architecture\n@@ -291,6 +291,9 @@ pub struct Evaluator<'mir, 'tcx> {\n \n     /// Failure rate of compare_exchange_weak, between 0.0 and 1.0\n     pub(crate) cmpxchg_weak_failure_rate: f64,\n+\n+    /// Corresponds to -Zmiri-mute-stdout-stderr and doesn't write the output but acts as if it succeeded.\n+    pub(crate) mute_stdout_stderr: bool,\n }\n \n impl<'mir, 'tcx> Evaluator<'mir, 'tcx> {\n@@ -327,7 +330,7 @@ impl<'mir, 'tcx> Evaluator<'mir, 'tcx> {\n             validate: config.validate,\n             enforce_number_validity: config.check_number_validity,\n             enforce_abi: config.check_abi,\n-            file_handler: Default::default(),\n+            file_handler: FileHandler::new(config.mute_stdout_stderr),\n             dir_handler: Default::default(),\n             time_anchor: Instant::now(),\n             layouts,\n@@ -344,6 +347,7 @@ impl<'mir, 'tcx> Evaluator<'mir, 'tcx> {\n             tracked_alloc_ids: config.tracked_alloc_ids.clone(),\n             check_alignment: config.check_alignment,\n             cmpxchg_weak_failure_rate: config.cmpxchg_weak_failure_rate,\n+            mute_stdout_stderr: config.mute_stdout_stderr,\n         }\n     }\n "}, {"sha": "dec1e97816807d3bab9dacd6a3678076c870a54a", "filename": "src/shims/posix/fs.rs", "status": "modified", "additions": 54, "deletions": 6, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/36c274aa382cbec0a8914e0d64541a2fda9ac5da/src%2Fshims%2Fposix%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36c274aa382cbec0a8914e0d64541a2fda9ac5da/src%2Fshims%2Fposix%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fposix%2Ffs.rs?ref=36c274aa382cbec0a8914e0d64541a2fda9ac5da", "patch": "@@ -251,22 +251,70 @@ impl FileDescriptor for io::Stderr {\n     }\n }\n \n+#[derive(Debug)]\n+struct DummyOutput;\n+\n+impl FileDescriptor for DummyOutput {\n+    fn as_file_handle<'tcx>(&self) -> InterpResult<'tcx, &FileHandle> {\n+        throw_unsup_format!(\"stderr and stdout cannot be used as FileHandle\");\n+    }\n+\n+    fn read<'tcx>(\n+        &mut self,\n+        _communicate_allowed: bool,\n+        _bytes: &mut [u8],\n+    ) -> InterpResult<'tcx, io::Result<usize>> {\n+        throw_unsup_format!(\"cannot read from stderr or stdout\");\n+    }\n+\n+    fn write<'tcx>(\n+        &self,\n+        _communicate_allowed: bool,\n+        bytes: &[u8],\n+    ) -> InterpResult<'tcx, io::Result<usize>> {\n+        // We just don't write anything, but report to the user that we did.\n+        Ok(Ok(bytes.len()))\n+    }\n+\n+    fn seek<'tcx>(\n+        &mut self,\n+        _communicate_allowed: bool,\n+        _offset: SeekFrom,\n+    ) -> InterpResult<'tcx, io::Result<u64>> {\n+        throw_unsup_format!(\"cannot seek on stderr or stdout\");\n+    }\n+\n+    fn close<'tcx>(\n+        self: Box<Self>,\n+        _communicate_allowed: bool,\n+    ) -> InterpResult<'tcx, io::Result<i32>> {\n+        throw_unsup_format!(\"stderr and stdout cannot be closed\");\n+    }\n+\n+    fn dup<'tcx>(&mut self) -> io::Result<Box<dyn FileDescriptor>> {\n+        Ok(Box::new(DummyOutput))\n+    }\n+}\n+\n #[derive(Debug)]\n pub struct FileHandler {\n     handles: BTreeMap<i32, Box<dyn FileDescriptor>>,\n }\n \n-impl<'tcx> Default for FileHandler {\n-    fn default() -> Self {\n+impl<'tcx> FileHandler {\n+    pub(crate) fn new(mute_stdout_stderr: bool) -> FileHandler {\n         let mut handles: BTreeMap<_, Box<dyn FileDescriptor>> = BTreeMap::new();\n-        handles.insert(0i32, Box::new(io::stdin()));\n-        handles.insert(1i32, Box::new(io::stdout()));\n+        if mute_stdout_stderr {\n+            handles.insert(0i32, Box::new(DummyOutput));\n+            handles.insert(1i32, Box::new(DummyOutput));\n+        } else {\n+            handles.insert(0i32, Box::new(io::stdin()));\n+            handles.insert(1i32, Box::new(io::stdout()));\n+        }\n         handles.insert(2i32, Box::new(io::stderr()));\n         FileHandler { handles }\n     }\n-}\n \n-impl<'tcx> FileHandler {\n     fn insert_fd(&mut self, file_handle: Box<dyn FileDescriptor>) -> i32 {\n         self.insert_fd_with_min_fd(file_handle, 0)\n     }"}, {"sha": "865c01386045bf817985ad31178781533be5a130", "filename": "src/shims/windows/dlsym.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/36c274aa382cbec0a8914e0d64541a2fda9ac5da/src%2Fshims%2Fwindows%2Fdlsym.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36c274aa382cbec0a8914e0d64541a2fda9ac5da/src%2Fshims%2Fwindows%2Fdlsym.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fwindows%2Fdlsym.rs?ref=36c274aa382cbec0a8914e0d64541a2fda9ac5da", "patch": "@@ -75,7 +75,9 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                     use std::io::{self, Write};\n \n                     let buf_cont = this.read_bytes_ptr(buf, Size::from_bytes(u64::from(n)))?;\n-                    let res = if handle == -11 {\n+                    let res = if this.machine.mute_stdout_stderr {\n+                        Ok(buf_cont.len())\n+                    } else if handle == -11 {\n                         io::stdout().write(buf_cont)\n                     } else {\n                         io::stderr().write(buf_cont)"}, {"sha": "849fce913862e4b1a03a55cd3eb7d15615a75ce8", "filename": "tests/run-pass/hide_stdout.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/36c274aa382cbec0a8914e0d64541a2fda9ac5da/tests%2Frun-pass%2Fhide_stdout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36c274aa382cbec0a8914e0d64541a2fda9ac5da/tests%2Frun-pass%2Fhide_stdout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fhide_stdout.rs?ref=36c274aa382cbec0a8914e0d64541a2fda9ac5da", "patch": "@@ -0,0 +1,5 @@\n+// compile-flags: -Zmiri-mute-stdout-stderr\n+\n+fn main() {\n+    println!(\"cake\");\n+}"}]}