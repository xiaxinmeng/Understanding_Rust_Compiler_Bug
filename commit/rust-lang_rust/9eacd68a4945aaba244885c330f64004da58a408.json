{"sha": "9eacd68a4945aaba244885c330f64004da58a408", "node_id": "MDY6Q29tbWl0NzI0NzEyOjllYWNkNjhhNDk0NWFhYmEyNDQ4ODVjMzMwZjY0MDA0ZGE1OGE0MDg=", "commit": {"author": {"name": "Franc\u0327ois Mockers", "email": "mockersf@gmail.com", "date": "2018-10-20T22:23:29Z"}, "committer": {"name": "Franc\u0327ois Mockers", "email": "mockersf@gmail.com", "date": "2018-10-20T22:23:29Z"}, "message": "manage cases with tabs or other whitespaces", "tree": {"sha": "8edcfdc561f321108a3369c827cf6dc2a353b917", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8edcfdc561f321108a3369c827cf6dc2a353b917"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9eacd68a4945aaba244885c330f64004da58a408", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9eacd68a4945aaba244885c330f64004da58a408", "html_url": "https://github.com/rust-lang/rust/commit/9eacd68a4945aaba244885c330f64004da58a408", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9eacd68a4945aaba244885c330f64004da58a408/comments", "author": {"login": "mockersf", "id": 8672791, "node_id": "MDQ6VXNlcjg2NzI3OTE=", "avatar_url": "https://avatars.githubusercontent.com/u/8672791?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mockersf", "html_url": "https://github.com/mockersf", "followers_url": "https://api.github.com/users/mockersf/followers", "following_url": "https://api.github.com/users/mockersf/following{/other_user}", "gists_url": "https://api.github.com/users/mockersf/gists{/gist_id}", "starred_url": "https://api.github.com/users/mockersf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mockersf/subscriptions", "organizations_url": "https://api.github.com/users/mockersf/orgs", "repos_url": "https://api.github.com/users/mockersf/repos", "events_url": "https://api.github.com/users/mockersf/events{/privacy}", "received_events_url": "https://api.github.com/users/mockersf/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mockersf", "id": 8672791, "node_id": "MDQ6VXNlcjg2NzI3OTE=", "avatar_url": "https://avatars.githubusercontent.com/u/8672791?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mockersf", "html_url": "https://github.com/mockersf", "followers_url": "https://api.github.com/users/mockersf/followers", "following_url": "https://api.github.com/users/mockersf/following{/other_user}", "gists_url": "https://api.github.com/users/mockersf/gists{/gist_id}", "starred_url": "https://api.github.com/users/mockersf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mockersf/subscriptions", "organizations_url": "https://api.github.com/users/mockersf/orgs", "repos_url": "https://api.github.com/users/mockersf/repos", "events_url": "https://api.github.com/users/mockersf/events{/privacy}", "received_events_url": "https://api.github.com/users/mockersf/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4520b305ec477b90629d078b20acffe6b32da58c", "url": "https://api.github.com/repos/rust-lang/rust/commits/4520b305ec477b90629d078b20acffe6b32da58c", "html_url": "https://github.com/rust-lang/rust/commit/4520b305ec477b90629d078b20acffe6b32da58c"}], "stats": {"total": 233, "additions": 204, "deletions": 29}, "files": [{"sha": "4158d20a5f86ce1f265d573c18046fe0ee3f3957", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9eacd68a4945aaba244885c330f64004da58a408/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9eacd68a4945aaba244885c330f64004da58a408/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=9eacd68a4945aaba244885c330f64004da58a408", "patch": "@@ -449,7 +449,10 @@ impl<'a, 'cl> Resolver<'a, 'cl> {\n                     id: item.id,\n                     parent,\n                     imported_module: Cell::new(Some(ModuleOrUniformRoot::Module(module))),\n-                    subclass: ImportDirectiveSubclass::ExternCrate(orig_name),\n+                    subclass: ImportDirectiveSubclass::ExternCrate {\n+                        source: orig_name,\n+                        target: ident,\n+                    },\n                     root_span: item.span,\n                     span: item.span,\n                     module_path: Vec::new(),"}, {"sha": "5fa0460a28d0fbe2822a1d508a3f487a12e78d55", "filename": "src/librustc_resolve/check_unused.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9eacd68a4945aaba244885c330f64004da58a408/src%2Flibrustc_resolve%2Fcheck_unused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9eacd68a4945aaba244885c330f64004da58a408/src%2Flibrustc_resolve%2Fcheck_unused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fcheck_unused.rs?ref=9eacd68a4945aaba244885c330f64004da58a408", "patch": "@@ -144,7 +144,7 @@ pub fn check_crate(resolver: &mut Resolver, krate: &ast::Crate) {\n                     }\n                 }\n             }\n-            ImportDirectiveSubclass::ExternCrate(_) => {\n+            ImportDirectiveSubclass::ExternCrate { .. } => {\n                 resolver.maybe_unused_extern_crates.push((directive.id, directive.span));\n             }\n             ImportDirectiveSubclass::MacroUse => {"}, {"sha": "ba367cca2451d745e87dcbc35934372dd811c19d", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 34, "deletions": 21, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/9eacd68a4945aaba244885c330f64004da58a408/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9eacd68a4945aaba244885c330f64004da58a408/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=9eacd68a4945aaba244885c330f64004da58a408", "patch": "@@ -1234,7 +1234,7 @@ impl<'a> NameBinding<'a> {\n         match self.kind {\n             NameBindingKind::Import {\n                 directive: &ImportDirective {\n-                    subclass: ImportDirectiveSubclass::ExternCrate(_), ..\n+                    subclass: ImportDirectiveSubclass::ExternCrate { .. }, ..\n                 }, ..\n             } => true,\n             _ => false,\n@@ -3794,7 +3794,7 @@ impl<'a, 'crateloader: 'a> Resolver<'a, 'crateloader> {\n             if let NameBindingKind::Import { directive: d, .. } = binding.kind {\n                 // Careful: we still want to rewrite paths from\n                 // renamed extern crates.\n-                if let ImportDirectiveSubclass::ExternCrate(None) = d.subclass {\n+                if let ImportDirectiveSubclass::ExternCrate { source: None, .. } = d.subclass {\n                     return\n                 }\n             }\n@@ -4776,7 +4776,15 @@ impl<'a, 'crateloader: 'a> Resolver<'a, 'crateloader> {\n             let cm = self.session.source_map();\n             let rename_msg = \"you can use `as` to change the binding name of the import\";\n \n-            if let Ok(snippet) = cm.span_to_snippet(binding.span) {\n+            if let (\n+                Ok(snippet),\n+                NameBindingKind::Import { directive, ..},\n+                _x @ 1 ... std::u32::MAX,\n+            ) = (\n+                cm.span_to_snippet(binding.span),\n+                binding.kind.clone(),\n+                binding.span.hi().0,\n+            ) {\n                 let suggested_name = if name.as_str().chars().next().unwrap().is_uppercase() {\n                     format!(\"Other{}\", name)\n                 } else {\n@@ -4785,24 +4793,29 @@ impl<'a, 'crateloader: 'a> Resolver<'a, 'crateloader> {\n \n                 err.span_suggestion_with_applicability(\n                     binding.span,\n-                    rename_msg,\n-                    match (\n-                        snippet.split_whitespace().find(|w| *w == \"as\"),\n-                        snippet.ends_with(\";\")\n-                    ) {\n-                        (Some(_), false) => format!(\"{} as {}\",\n-                            &snippet[..snippet.find(\" as \").unwrap()],\n-                            suggested_name,\n-                        ),\n-                        (Some(_), true) => format!(\"{} as {};\",\n-                            &snippet[..snippet.find(\" as \").unwrap()],\n-                            suggested_name,\n-                        ),\n-                        (None, false) => format!(\"{} as {}\", snippet, suggested_name),\n-                        (None, true) => format!(\"{} as {};\",\n-                            &snippet[..snippet.len() - 1],\n-                            suggested_name\n-                        ),\n+                    &rename_msg,\n+                    match (&directive.subclass, snippet.ends_with(\";\"), snippet.as_ref()) {\n+                        (ImportDirectiveSubclass::SingleImport { .. }, false, \"self\") =>\n+                            format!(\"self as {}\", suggested_name),\n+                        (ImportDirectiveSubclass::SingleImport { source, .. }, false, _) =>\n+                            format!(\n+                                \"{} as {}\",\n+                                &snippet[..((source.span.hi().0 - binding.span.lo().0) as usize)],\n+                                suggested_name,\n+                            ),\n+                        (ImportDirectiveSubclass::SingleImport { source, .. }, true, _) =>\n+                            format!(\n+                                \"{} as {};\",\n+                                &snippet[..((source.span.hi().0 - binding.span.lo().0) as usize)],\n+                                suggested_name,\n+                            ),\n+                        (ImportDirectiveSubclass::ExternCrate { source, target, .. }, _, _) =>\n+                            format!(\n+                                \"extern crate {} as {};\",\n+                                source.unwrap_or(target.name),\n+                                suggested_name,\n+                            ),\n+                        (_, _, _) => unreachable!(),\n                     },\n                     Applicability::MaybeIncorrect,\n                 );"}, {"sha": "bb51bf9505158182c323d6208556883796cf7dbe", "filename": "src/librustc_resolve/resolve_imports.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9eacd68a4945aaba244885c330f64004da58a408/src%2Flibrustc_resolve%2Fresolve_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9eacd68a4945aaba244885c330f64004da58a408/src%2Flibrustc_resolve%2Fresolve_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fresolve_imports.rs?ref=9eacd68a4945aaba244885c330f64004da58a408", "patch": "@@ -52,7 +52,10 @@ pub enum ImportDirectiveSubclass<'a> {\n         max_vis: Cell<ty::Visibility>, // The visibility of the greatest re-export.\n         // n.b. `max_vis` is only used in `finalize_import` to check for re-export errors.\n     },\n-    ExternCrate(Option<Name>),\n+    ExternCrate {\n+        source: Option<Name>,\n+        target: Ident,\n+    },\n     MacroUse,\n }\n \n@@ -1342,7 +1345,7 @@ fn import_directive_subclass_to_string(subclass: &ImportDirectiveSubclass) -> St\n     match *subclass {\n         SingleImport { source, .. } => source.to_string(),\n         GlobImport { .. } => \"*\".to_string(),\n-        ExternCrate(_) => \"<extern crate>\".to_string(),\n+        ExternCrate { .. } => \"<extern crate>\".to_string(),\n         MacroUse => \"#[macro_use]\".to_string(),\n     }\n }"}, {"sha": "8b13ffd0076d51c30e8483f6515961c58e05e9c9", "filename": "src/test/ui/issues/issue-45829/import-self.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/9eacd68a4945aaba244885c330f64004da58a408/src%2Ftest%2Fui%2Fissues%2Fissue-45829%2Fimport-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9eacd68a4945aaba244885c330f64004da58a408/src%2Ftest%2Fui%2Fissues%2Fissue-45829%2Fimport-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-45829%2Fimport-self.rs?ref=9eacd68a4945aaba244885c330f64004da58a408", "patch": "@@ -0,0 +1,22 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+mod foo {\n+    pub struct A;\n+    pub struct B;\n+}\n+\n+use foo::{self};\n+\n+use foo as self;\n+\n+use foo::self;\n+\n+fn main() {}"}, {"sha": "985dc4e7131cf8454a1b015e36921e936850bcfd", "filename": "src/test/ui/issues/issue-45829/import-self.stderr", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/9eacd68a4945aaba244885c330f64004da58a408/src%2Ftest%2Fui%2Fissues%2Fissue-45829%2Fimport-self.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9eacd68a4945aaba244885c330f64004da58a408/src%2Ftest%2Fui%2Fissues%2Fissue-45829%2Fimport-self.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-45829%2Fimport-self.stderr?ref=9eacd68a4945aaba244885c330f64004da58a408", "patch": "@@ -0,0 +1,31 @@\n+error: expected identifier, found keyword `self`\n+  --> $DIR/import-self.rs:18:12\n+   |\n+LL | use foo as self;\n+   |            ^^^^ expected identifier, found keyword\n+\n+error[E0429]: `self` imports are only allowed within a { } list\n+  --> $DIR/import-self.rs:20:5\n+   |\n+LL | use foo::self;\n+   |     ^^^^^^^^^\n+\n+error[E0255]: the name `foo` is defined multiple times\n+  --> $DIR/import-self.rs:16:11\n+   |\n+LL | mod foo {\n+   | ------- previous definition of the module `foo` here\n+...\n+LL | use foo::{self};\n+   |           ^^^^ `foo` reimported here\n+   |\n+   = note: `foo` must be defined only once in the type namespace of this module\n+help: you can use `as` to change the binding name of the import\n+   |\n+LL | use foo::{self as other_foo};\n+   |           ^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 3 previous errors\n+\n+Some errors occurred: E0255, E0429.\n+For more information about an error, try `rustc --explain E0255`."}, {"sha": "785932e5ef42a2dd8a7431aa21d89bdff39152b1", "filename": "src/test/ui/issues/issue-45829/import-twice.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/9eacd68a4945aaba244885c330f64004da58a408/src%2Ftest%2Fui%2Fissues%2Fissue-45829%2Fimport-twice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9eacd68a4945aaba244885c330f64004da58a408/src%2Ftest%2Fui%2Fissues%2Fissue-45829%2Fimport-twice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-45829%2Fimport-twice.rs?ref=9eacd68a4945aaba244885c330f64004da58a408", "patch": "@@ -0,0 +1,18 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+mod foo {\n+    pub struct A;\n+    pub struct B;\n+}\n+\n+use foo::{A, A};\n+\n+fn main() {}"}, {"sha": "566d47965f82f6d8025a1f5b2ef45b835e674ac4", "filename": "src/test/ui/issues/issue-45829/import-twice.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/9eacd68a4945aaba244885c330f64004da58a408/src%2Ftest%2Fui%2Fissues%2Fissue-45829%2Fimport-twice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9eacd68a4945aaba244885c330f64004da58a408/src%2Ftest%2Fui%2Fissues%2Fissue-45829%2Fimport-twice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-45829%2Fimport-twice.stderr?ref=9eacd68a4945aaba244885c330f64004da58a408", "patch": "@@ -0,0 +1,17 @@\n+error[E0252]: the name `A` is defined multiple times\n+  --> $DIR/import-twice.rs:16:14\n+   |\n+LL | use foo::{A, A};\n+   |           -  ^ `A` reimported here\n+   |           |\n+   |           previous import of the type `A` here\n+   |\n+   = note: `A` must be defined only once in the type namespace of this module\n+help: you can use `as` to change the binding name of the import\n+   |\n+LL | use foo::{A, A as OtherA};\n+   |              ^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0252`."}, {"sha": "7066ed65c78c30e02184670df0ed8623e35eead4", "filename": "src/test/ui/issues/issue-45829/rename-extern-with-tab.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/9eacd68a4945aaba244885c330f64004da58a408/src%2Ftest%2Fui%2Fissues%2Fissue-45829%2Frename-extern-with-tab.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9eacd68a4945aaba244885c330f64004da58a408/src%2Ftest%2Fui%2Fissues%2Fissue-45829%2Frename-extern-with-tab.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-45829%2Frename-extern-with-tab.rs?ref=9eacd68a4945aaba244885c330f64004da58a408", "patch": "@@ -0,0 +1,17 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// aux-build:issue_45829_a.rs\n+// aux-build:issue_45829_b.rs\n+\n+extern crate issue_45829_a;\n+extern  crate    issue_45829_b  as  issue_45829_a;\n+\n+fn main() {}"}, {"sha": "769be545706cbc345f088668b438ea2db090ba0a", "filename": "src/test/ui/issues/issue-45829/rename-extern-with-tab.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/9eacd68a4945aaba244885c330f64004da58a408/src%2Ftest%2Fui%2Fissues%2Fissue-45829%2Frename-extern-with-tab.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9eacd68a4945aaba244885c330f64004da58a408/src%2Ftest%2Fui%2Fissues%2Fissue-45829%2Frename-extern-with-tab.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-45829%2Frename-extern-with-tab.stderr?ref=9eacd68a4945aaba244885c330f64004da58a408", "patch": "@@ -0,0 +1,17 @@\n+error[E0259]: the name `issue_45829_a` is defined multiple times\n+  --> $DIR/rename-extern-with-tab.rs:15:1\n+   |\n+LL | extern crate issue_45829_a;\n+   | --------------------------- previous import of the extern crate `issue_45829_a` here\n+LL | extern  crate    issue_45829_b  as  issue_45829_a;\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `issue_45829_a` reimported here\n+   |\n+   = note: `issue_45829_a` must be defined only once in the type namespace of this module\n+help: you can use `as` to change the binding name of the import\n+   |\n+LL | extern crate issue_45829_b as other_issue_45829_a;\n+   |\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0259`."}, {"sha": "c1e4d9089068df8304a23e9079ea53ec1e84ad13", "filename": "src/test/ui/issues/issue-45829/rename-use-with-tabs.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/9eacd68a4945aaba244885c330f64004da58a408/src%2Ftest%2Fui%2Fissues%2Fissue-45829%2Frename-use-with-tabs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9eacd68a4945aaba244885c330f64004da58a408/src%2Ftest%2Fui%2Fissues%2Fissue-45829%2Frename-use-with-tabs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-45829%2Frename-use-with-tabs.rs?ref=9eacd68a4945aaba244885c330f64004da58a408", "patch": "@@ -0,0 +1,21 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+mod foo {\n+    pub struct A;\n+\n+    pub mod bar {\n+        pub struct B;\n+    }\n+}\n+\n+use foo::{A, bar::B    as    A};\n+\n+fn main() {}"}, {"sha": "b80a692028aa0bf007835203be0b625193bd53d0", "filename": "src/test/ui/issues/issue-45829/rename-use-with-tabs.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/9eacd68a4945aaba244885c330f64004da58a408/src%2Ftest%2Fui%2Fissues%2Fissue-45829%2Frename-use-with-tabs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9eacd68a4945aaba244885c330f64004da58a408/src%2Ftest%2Fui%2Fissues%2Fissue-45829%2Frename-use-with-tabs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-45829%2Frename-use-with-tabs.stderr?ref=9eacd68a4945aaba244885c330f64004da58a408", "patch": "@@ -0,0 +1,17 @@\n+error[E0252]: the name `A` is defined multiple times\n+  --> $DIR/rename-use-with-tabs.rs:19:14\n+   |\n+LL | use foo::{A, bar::B    as    A};\n+   |           -  ^^^^^^^^^^^^^^^^^ `A` reimported here\n+   |           |\n+   |           previous import of the type `A` here\n+   |\n+   = note: `A` must be defined only once in the type namespace of this module\n+help: you can use `as` to change the binding name of the import\n+   |\n+LL | use foo::{A, bar::B as OtherA};\n+   |              ^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0252`."}, {"sha": "0b082c1105f15874853faf16101e07c6dcdfa47d", "filename": "src/test/ui/resolve/resolve-conflict-item-vs-extern-crate.stderr", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9eacd68a4945aaba244885c330f64004da58a408/src%2Ftest%2Fui%2Fresolve%2Fresolve-conflict-item-vs-extern-crate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9eacd68a4945aaba244885c330f64004da58a408/src%2Ftest%2Fui%2Fresolve%2Fresolve-conflict-item-vs-extern-crate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fresolve-conflict-item-vs-extern-crate.stderr?ref=9eacd68a4945aaba244885c330f64004da58a408", "patch": "@@ -5,10 +5,6 @@ LL | mod std {}    //~ ERROR the name `std` is defined multiple times\n    | ^^^^^^^ `std` redefined here\n    |\n    = note: `std` must be defined only once in the type namespace of this module\n-help: you can use `as` to change the binding name of the import\n-   |\n-LL |  as other_std// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-   |  ^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}]}