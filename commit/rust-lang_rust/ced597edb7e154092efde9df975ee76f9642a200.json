{"sha": "ced597edb7e154092efde9df975ee76f9642a200", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNlZDU5N2VkYjdlMTU0MDkyZWZkZTlkZjk3NWVlNzZmOTY0MmEyMDA=", "commit": {"author": {"name": "piegames", "email": "git@piegames.de", "date": "2021-08-25T18:22:19Z"}, "committer": {"name": "piegames", "email": "git@piegames.de", "date": "2021-08-26T21:42:04Z"}, "message": "Add TcpListener::into_incoming and IntoIncoming\n\nThe `incoming` method is really useful, however for some use cases the borrow\nthis introduces is needlessly restricting. Thus, an owned variant is added.", "tree": {"sha": "3b4d98b0cd4b81686ab21089ad48a951d6193f32", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3b4d98b0cd4b81686ab21089ad48a951d6193f32"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ced597edb7e154092efde9df975ee76f9642a200", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ced597edb7e154092efde9df975ee76f9642a200", "html_url": "https://github.com/rust-lang/rust/commit/ced597edb7e154092efde9df975ee76f9642a200", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ced597edb7e154092efde9df975ee76f9642a200/comments", "author": {"login": "piegamesde", "id": 14054505, "node_id": "MDQ6VXNlcjE0MDU0NTA1", "avatar_url": "https://avatars.githubusercontent.com/u/14054505?v=4", "gravatar_id": "", "url": "https://api.github.com/users/piegamesde", "html_url": "https://github.com/piegamesde", "followers_url": "https://api.github.com/users/piegamesde/followers", "following_url": "https://api.github.com/users/piegamesde/following{/other_user}", "gists_url": "https://api.github.com/users/piegamesde/gists{/gist_id}", "starred_url": "https://api.github.com/users/piegamesde/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/piegamesde/subscriptions", "organizations_url": "https://api.github.com/users/piegamesde/orgs", "repos_url": "https://api.github.com/users/piegamesde/repos", "events_url": "https://api.github.com/users/piegamesde/events{/privacy}", "received_events_url": "https://api.github.com/users/piegamesde/received_events", "type": "User", "site_admin": false}, "committer": {"login": "piegamesde", "id": 14054505, "node_id": "MDQ6VXNlcjE0MDU0NTA1", "avatar_url": "https://avatars.githubusercontent.com/u/14054505?v=4", "gravatar_id": "", "url": "https://api.github.com/users/piegamesde", "html_url": "https://github.com/piegamesde", "followers_url": "https://api.github.com/users/piegamesde/followers", "following_url": "https://api.github.com/users/piegamesde/following{/other_user}", "gists_url": "https://api.github.com/users/piegamesde/gists{/gist_id}", "starred_url": "https://api.github.com/users/piegamesde/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/piegamesde/subscriptions", "organizations_url": "https://api.github.com/users/piegamesde/orgs", "repos_url": "https://api.github.com/users/piegamesde/repos", "events_url": "https://api.github.com/users/piegamesde/events{/privacy}", "received_events_url": "https://api.github.com/users/piegamesde/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a992a11913b39a258158646bb1e03528c5aa5060", "url": "https://api.github.com/repos/rust-lang/rust/commits/a992a11913b39a258158646bb1e03528c5aa5060", "html_url": "https://github.com/rust-lang/rust/commit/a992a11913b39a258158646bb1e03528c5aa5060"}], "stats": {"total": 51, "additions": 51, "deletions": 0}, "files": [{"sha": "45f5f3dac85a51e9cfb465e7b85b339bf03c6e3e", "filename": "library/std/src/net/tcp.rs", "status": "modified", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/ced597edb7e154092efde9df975ee76f9642a200/library%2Fstd%2Fsrc%2Fnet%2Ftcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ced597edb7e154092efde9df975ee76f9642a200/library%2Fstd%2Fsrc%2Fnet%2Ftcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fnet%2Ftcp.rs?ref=ced597edb7e154092efde9df975ee76f9642a200", "patch": "@@ -96,6 +96,18 @@ pub struct Incoming<'a> {\n     listener: &'a TcpListener,\n }\n \n+/// An iterator that infinitely [`accept`]s connections on a [`TcpListener`].\n+///\n+/// This `struct` is created by the [`TcpListener::into_incoming`] method.\n+/// See its documentation for more.\n+///\n+/// [`accept`]: TcpListener::accept\n+#[derive(Debug)]\n+#[unstable(feature = \"tcplistener_into_incoming\", issue = \"88339\")]\n+pub struct IntoIncoming {\n+    listener: TcpListener,\n+}\n+\n impl TcpStream {\n     /// Opens a TCP connection to a remote host.\n     ///\n@@ -798,6 +810,37 @@ impl TcpListener {\n         Incoming { listener: self }\n     }\n \n+    /// Turn this into an iterator over the connections being received on this\n+    /// listener.\n+    ///\n+    /// The returned iterator will never return [`None`] and will also not yield\n+    /// the peer's [`SocketAddr`] structure. Iterating over it is equivalent to\n+    /// calling [`TcpListener::accept`] in a loop.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```no_run\n+    /// #![feature(tcplistener_into_incoming)]\n+    /// use std::net::{TcpListener, TcpStream};\n+    ///\n+    /// fn listen_on(port: u16) -> impl Iterator<Item = TcpStream> {\n+    ///     let listener = TcpListener::bind(\"127.0.0.1:80\").unwrap();\n+    ///     listener.into_incoming()\n+    ///         .filter_map(Result::ok) /* Ignore failed connections */\n+    /// }\n+    ///\n+    /// fn main() -> std::io::Result<()> {\n+    ///     for stream in listen_on(80) {\n+    ///         /* handle the connection here */\n+    ///     }\n+    ///     Ok(())\n+    /// }\n+    /// ```\n+    #[unstable(feature = \"tcplistener_into_incoming\", issue = \"88339\")]\n+    pub fn into_incoming(self) -> IntoIncoming {\n+        IntoIncoming { listener: self }\n+    }\n+\n     /// Sets the value for the `IP_TTL` option on this socket.\n     ///\n     /// This value sets the time-to-live field that is used in every packet sent\n@@ -935,6 +978,14 @@ impl<'a> Iterator for Incoming<'a> {\n     }\n }\n \n+#[unstable(feature = \"tcplistener_into_incoming\", issue = \"88339\")]\n+impl Iterator for IntoIncoming {\n+    type Item = io::Result<TcpStream>;\n+    fn next(&mut self) -> Option<io::Result<TcpStream>> {\n+        Some(self.listener.accept().map(|p| p.0))\n+    }\n+}\n+\n impl AsInner<net_imp::TcpListener> for TcpListener {\n     fn as_inner(&self) -> &net_imp::TcpListener {\n         &self.0"}]}