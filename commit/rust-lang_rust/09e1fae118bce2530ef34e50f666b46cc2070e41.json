{"sha": "09e1fae118bce2530ef34e50f666b46cc2070e41", "node_id": "C_kwDOAAsO6NoAKDA5ZTFmYWUxMThiY2UyNTMwZWYzNGU1MGY2NjZiNDZjYzIwNzBlNDE", "commit": {"author": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2022-12-28T17:10:21Z"}, "committer": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2023-04-19T18:54:59Z"}, "message": "Support linking to rust dylibs from a staticlib", "tree": {"sha": "ae40291e9226e640201dd5c6992e92089e232c2f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ae40291e9226e640201dd5c6992e92089e232c2f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/09e1fae118bce2530ef34e50f666b46cc2070e41", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/09e1fae118bce2530ef34e50f666b46cc2070e41", "html_url": "https://github.com/rust-lang/rust/commit/09e1fae118bce2530ef34e50f666b46cc2070e41", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/09e1fae118bce2530ef34e50f666b46cc2070e41/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3a5c8e91f094bb1cb1346651fe3512f0b603d826", "url": "https://api.github.com/repos/rust-lang/rust/commits/3a5c8e91f094bb1cb1346651fe3512f0b603d826", "html_url": "https://github.com/rust-lang/rust/commit/3a5c8e91f094bb1cb1346651fe3512f0b603d826"}], "stats": {"total": 78, "additions": 65, "deletions": 13}, "files": [{"sha": "590a7374d116d2431d9b1be66b8c3365abbf018a", "filename": "compiler/rustc_metadata/src/dependency_format.rs", "status": "modified", "additions": 10, "deletions": 13, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/09e1fae118bce2530ef34e50f666b46cc2070e41/compiler%2Frustc_metadata%2Fsrc%2Fdependency_format.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09e1fae118bce2530ef34e50f666b46cc2070e41/compiler%2Frustc_metadata%2Fsrc%2Fdependency_format.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Fdependency_format.rs?ref=09e1fae118bce2530ef34e50f666b46cc2070e41", "patch": "@@ -89,11 +89,12 @@ fn calculate_type(tcx: TyCtxt<'_>, ty: CrateType) -> DependencyList {\n         // to try to eagerly statically link all dependencies. This is normally\n         // done for end-product dylibs, not intermediate products.\n         //\n-        // Treat cdylibs similarly. If `-C prefer-dynamic` is set, the caller may\n-        // be code-size conscious, but without it, it makes sense to statically\n-        // link a cdylib.\n-        CrateType::Dylib | CrateType::Cdylib if !sess.opts.cg.prefer_dynamic => Linkage::Static,\n-        CrateType::Dylib | CrateType::Cdylib => Linkage::Dynamic,\n+        // Treat cdylibs and staticlibs similarly. If `-C prefer-dynamic` is set,\n+        // the caller may be code-size conscious, but without it, it makes sense\n+        // to statically link a cdylib or staticlib.\n+        CrateType::Dylib | CrateType::Cdylib | CrateType::Staticlib => {\n+            if sess.opts.cg.prefer_dynamic { Linkage::Dynamic } else { Linkage::Static }\n+        }\n \n         // If the global prefer_dynamic switch is turned off, or the final\n         // executable will be statically linked, prefer static crate linkage.\n@@ -108,9 +109,6 @@ fn calculate_type(tcx: TyCtxt<'_>, ty: CrateType) -> DependencyList {\n         // No linkage happens with rlibs, we just needed the metadata (which we\n         // got long ago), so don't bother with anything.\n         CrateType::Rlib => Linkage::NotLinked,\n-\n-        // staticlibs must have all static dependencies.\n-        CrateType::Staticlib => Linkage::Static,\n     };\n \n     match preferred_linkage {\n@@ -123,12 +121,11 @@ fn calculate_type(tcx: TyCtxt<'_>, ty: CrateType) -> DependencyList {\n                 return v;\n             }\n \n-            // Staticlibs and static executables must have all static dependencies.\n+            // Static executables must have all static dependencies.\n             // If any are not found, generate some nice pretty errors.\n-            if ty == CrateType::Staticlib\n-                || (ty == CrateType::Executable\n-                    && sess.crt_static(Some(ty))\n-                    && !sess.target.crt_static_allows_dylibs)\n+            if ty == CrateType::Executable\n+                && sess.crt_static(Some(ty))\n+                && !sess.target.crt_static_allows_dylibs\n             {\n                 for &cnum in tcx.crates(()).iter() {\n                     if tcx.dep_kind(cnum).macros_only() {"}, {"sha": "bf811395981e5c8d749d4caae31a66a1841d9ce0", "filename": "tests/run-make/staticlib-dylib-linkage/Makefile", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/09e1fae118bce2530ef34e50f666b46cc2070e41/tests%2Frun-make%2Fstaticlib-dylib-linkage%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/09e1fae118bce2530ef34e50f666b46cc2070e41/tests%2Frun-make%2Fstaticlib-dylib-linkage%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-make%2Fstaticlib-dylib-linkage%2FMakefile?ref=09e1fae118bce2530ef34e50f666b46cc2070e41", "patch": "@@ -0,0 +1,27 @@\n+include ../tools.mk\n+\n+TARGET_SYSROOT := $(shell $(RUSTC) --print sysroot)/lib/rustlib/$(TARGET)/lib\n+\n+ifdef IS_MSVC\n+LIBSTD := $(wildcard $(TARGET_SYSROOT)/libstd-*.dll.lib)\n+else\n+LIBSTD := $(wildcard $(TARGET_SYSROOT)/$(call DYLIB_GLOB,std))\n+STD := $(basename $(patsubst lib%,%, $(notdir $(LIBSTD))))\n+endif\n+\n+all: $(call RUN_BINFILE,foo)\n+\t$(call RUN,foo)\n+\n+ifdef IS_MSVC\n+CLIBS := $(TMPDIR)/foo.lib $(TMPDIR)/bar.dll.lib $(LIBSTD)\n+$(call RUN_BINFILE,foo): $(call STATICLIB,foo)\n+\t$(CC) $(CFLAGS) foo.c $(CLIBS) $(call OUT_EXE,foo)\n+else\n+CLIBS := $(TMPDIR)/libfoo.a -lbar -l$(STD) -L $(TMPDIR) -L $(TARGET_SYSROOT)\n+$(call RUN_BINFILE,foo): $(call STATICLIB,foo)\n+\t$(CC) $(CFLAGS) foo.c $(CLIBS) -o $(call RUN_BINFILE,foo)\n+endif\n+\n+$(call STATICLIB,foo):\n+\t$(RUSTC) -C prefer-dynamic bar.rs\n+\t$(RUSTC) foo.rs"}, {"sha": "b3a7539abaeffe6d4ac414f79e0448a582298b6d", "filename": "tests/run-make/staticlib-dylib-linkage/bar.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/09e1fae118bce2530ef34e50f666b46cc2070e41/tests%2Frun-make%2Fstaticlib-dylib-linkage%2Fbar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09e1fae118bce2530ef34e50f666b46cc2070e41/tests%2Frun-make%2Fstaticlib-dylib-linkage%2Fbar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-make%2Fstaticlib-dylib-linkage%2Fbar.rs?ref=09e1fae118bce2530ef34e50f666b46cc2070e41", "patch": "@@ -0,0 +1,5 @@\n+#![crate_type = \"dylib\"]\n+\n+pub fn bar() {\n+    println!(\"hello!\");\n+}"}, {"sha": "154f9682ef8f1dd678cdb5a3605a11cee1cb92bf", "filename": "tests/run-make/staticlib-dylib-linkage/foo.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/09e1fae118bce2530ef34e50f666b46cc2070e41/tests%2Frun-make%2Fstaticlib-dylib-linkage%2Ffoo.c", "raw_url": "https://github.com/rust-lang/rust/raw/09e1fae118bce2530ef34e50f666b46cc2070e41/tests%2Frun-make%2Fstaticlib-dylib-linkage%2Ffoo.c", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-make%2Fstaticlib-dylib-linkage%2Ffoo.c?ref=09e1fae118bce2530ef34e50f666b46cc2070e41", "patch": "@@ -0,0 +1,10 @@\n+#include <assert.h>\n+\n+extern void foo();\n+extern unsigned bar(unsigned a, unsigned b);\n+\n+int main() {\n+  foo();\n+  assert(bar(1, 2) == 3);\n+  return 0;\n+}"}, {"sha": "af439391c757e8f6ef1ea172cd7920f184a5b8d0", "filename": "tests/run-make/staticlib-dylib-linkage/foo.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/09e1fae118bce2530ef34e50f666b46cc2070e41/tests%2Frun-make%2Fstaticlib-dylib-linkage%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09e1fae118bce2530ef34e50f666b46cc2070e41/tests%2Frun-make%2Fstaticlib-dylib-linkage%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-make%2Fstaticlib-dylib-linkage%2Ffoo.rs?ref=09e1fae118bce2530ef34e50f666b46cc2070e41", "patch": "@@ -0,0 +1,13 @@\n+#![crate_type = \"staticlib\"]\n+\n+extern crate bar;\n+\n+#[no_mangle]\n+pub extern \"C\" fn foo() {\n+    bar::bar();\n+}\n+\n+#[no_mangle]\n+pub extern \"C\" fn bar(a: u32, b: u32) -> u32 {\n+    a + b\n+}"}]}