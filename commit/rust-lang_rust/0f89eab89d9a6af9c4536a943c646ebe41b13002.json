{"sha": "0f89eab89d9a6af9c4536a943c646ebe41b13002", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBmODllYWI4OWQ5YTZhZjljNDUzNmE5NDNjNjQ2ZWJlNDFiMTMwMDI=", "commit": {"author": {"name": "ILyoan", "email": "ilyoan@gmail.com", "date": "2013-03-15T08:32:39Z"}, "committer": {"name": "ILyoan", "email": "ilyoan@gmail.com", "date": "2013-03-19T08:23:31Z"}, "message": "Use NDK for building android target objects", "tree": {"sha": "d9213e78b0f677af8d036a61d423ac18f62820a1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d9213e78b0f677af8d036a61d423ac18f62820a1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0f89eab89d9a6af9c4536a943c646ebe41b13002", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0f89eab89d9a6af9c4536a943c646ebe41b13002", "html_url": "https://github.com/rust-lang/rust/commit/0f89eab89d9a6af9c4536a943c646ebe41b13002", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0f89eab89d9a6af9c4536a943c646ebe41b13002/comments", "author": {"login": "ILyoan", "id": 2672194, "node_id": "MDQ6VXNlcjI2NzIxOTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2672194?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ILyoan", "html_url": "https://github.com/ILyoan", "followers_url": "https://api.github.com/users/ILyoan/followers", "following_url": "https://api.github.com/users/ILyoan/following{/other_user}", "gists_url": "https://api.github.com/users/ILyoan/gists{/gist_id}", "starred_url": "https://api.github.com/users/ILyoan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ILyoan/subscriptions", "organizations_url": "https://api.github.com/users/ILyoan/orgs", "repos_url": "https://api.github.com/users/ILyoan/repos", "events_url": "https://api.github.com/users/ILyoan/events{/privacy}", "received_events_url": "https://api.github.com/users/ILyoan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ILyoan", "id": 2672194, "node_id": "MDQ6VXNlcjI2NzIxOTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2672194?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ILyoan", "html_url": "https://github.com/ILyoan", "followers_url": "https://api.github.com/users/ILyoan/followers", "following_url": "https://api.github.com/users/ILyoan/following{/other_user}", "gists_url": "https://api.github.com/users/ILyoan/gists{/gist_id}", "starred_url": "https://api.github.com/users/ILyoan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ILyoan/subscriptions", "organizations_url": "https://api.github.com/users/ILyoan/orgs", "repos_url": "https://api.github.com/users/ILyoan/repos", "events_url": "https://api.github.com/users/ILyoan/events{/privacy}", "received_events_url": "https://api.github.com/users/ILyoan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1ded13885175248f958c772298e8cd585cb00a22", "url": "https://api.github.com/repos/rust-lang/rust/commits/1ded13885175248f958c772298e8cd585cb00a22", "html_url": "https://github.com/rust-lang/rust/commit/1ded13885175248f958c772298e8cd585cb00a22"}], "stats": {"total": 68, "additions": 57, "deletions": 11}, "files": [{"sha": "e7a971a98a16d9547f298cac27d372e2102623ec", "filename": "src/librustc/back/link.rs", "status": "modified", "additions": 41, "deletions": 9, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/0f89eab89d9a6af9c4536a943c646ebe41b13002/src%2Flibrustc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f89eab89d9a6af9c4536a943c646ebe41b13002/src%2Flibrustc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Flink.rs?ref=0f89eab89d9a6af9c4536a943c646ebe41b13002", "patch": "@@ -167,15 +167,18 @@ pub mod write {\n     use back::link::{output_type_assembly, output_type_bitcode};\n     use back::link::{output_type_exe, output_type_llvm_assembly};\n     use back::link::{output_type_object};\n+    use back::link::output_type;\n     use driver::session::Session;\n     use driver::session;\n     use lib::llvm::llvm;\n     use lib::llvm::{False, True, ModuleRef, mk_pass_manager, mk_target_data};\n     use lib;\n \n+    use core::prelude::*;\n     use core::libc::{c_char, c_int, c_uint};\n     use core::path::Path;\n     use core::str;\n+    use core::run;\n \n     pub fn is_object_or_assembly_or_exe(ot: output_type) -> bool {\n         if ot == output_type_assembly || ot == output_type_object ||\n@@ -185,7 +188,8 @@ pub mod write {\n         return false;\n     }\n \n-    pub fn run_passes(sess: Session, llmod: ModuleRef, output: &Path) {\n+    pub fn run_passes(sess: Session, llmod: ModuleRef,\n+            output_type: output_type, output: &Path) {\n         unsafe {\n             let opts = sess.opts;\n             if sess.time_llvm_passes() { llvm::LLVMRustEnableTimePasses(); }\n@@ -201,7 +205,7 @@ pub mod write {\n \n \n             if opts.save_temps {\n-                match opts.output_type {\n+                match output_type {\n                   output_type_bitcode => {\n                     if opts.optimize != session::No {\n                         let filename = output.with_filetype(\"no-opt.bc\");\n@@ -262,7 +266,7 @@ pub mod write {\n                 llvm::LLVMPassManagerBuilderDispose(MPMB);\n             }\n             if !sess.no_verify() { llvm::LLVMAddVerifierPass(pm.llpm); }\n-            if is_object_or_assembly_or_exe(opts.output_type) || opts.jit {\n+            if is_object_or_assembly_or_exe(output_type) || opts.jit {\n                 let LLVMOptNone       = 0 as c_int; // -O0\n                 let LLVMOptLess       = 1 as c_int; // -O1\n                 let LLVMOptDefault    = 2 as c_int; // -O2, -Os\n@@ -290,8 +294,8 @@ pub mod write {\n                 }\n \n                 let mut FileType;\n-                if opts.output_type == output_type_object ||\n-                       opts.output_type == output_type_exe {\n+                if output_type == output_type_object ||\n+                       output_type == output_type_exe {\n                    FileType = lib::llvm::ObjectFile;\n                 } else { FileType = lib::llvm::AssemblyFile; }\n                 // Write optimized bitcode if --save-temps was on.\n@@ -307,7 +311,7 @@ pub mod write {\n                     pm = mk_pass_manager();\n                     // Save the assembly file if -S is used\n \n-                    if opts.output_type == output_type_assembly {\n+                    if output_type == output_type_assembly {\n                         let _: () = str::as_c_str(\n                             sess.targ_cfg.target_strs.target_triple,\n                             |buf_t| {\n@@ -328,8 +332,8 @@ pub mod write {\n \n                     // Save the object file for -c or --save-temps alone\n                     // This .o is needed when an exe is built\n-                    if opts.output_type == output_type_object ||\n-                           opts.output_type == output_type_exe {\n+                    if output_type == output_type_object ||\n+                           output_type == output_type_exe {\n                         let _: () = str::as_c_str(\n                             sess.targ_cfg.target_strs.target_triple,\n                             |buf_t| {\n@@ -375,7 +379,7 @@ pub mod write {\n                 return;\n             }\n \n-            if opts.output_type == output_type_llvm_assembly {\n+            if output_type == output_type_llvm_assembly {\n                 // Given options \"-S --emit-llvm\": output LLVM assembly\n                 str::as_c_str(output.to_str(), |buf_o| {\n                     llvm::LLVMRustAddPrintModulePass(pm.llpm, llmod, buf_o)});\n@@ -391,6 +395,34 @@ pub mod write {\n             if sess.time_llvm_passes() { llvm::LLVMRustPrintPassTimings(); }\n         }\n     }\n+\n+    pub fn run_ndk(sess: Session, assembly: &Path, object: &Path) {\n+        let cc_prog: ~str = match &sess.opts.android_cross_path {\n+            &Some(copy path) => {\n+                fmt!(\"%s/bin/arm-linux-androideabi-gcc\", path)\n+            }\n+            &None => {\n+                sess.fatal(~\"need Android NDK path for building \\\n+                             (--android-cross-path)\")\n+            }\n+        };\n+        let mut cc_args = ~[];\n+        cc_args.push(~\"-c\");\n+        cc_args.push(~\"-o\");\n+        cc_args.push(object.to_str());\n+        cc_args.push(assembly.to_str());\n+\n+        let prog = run::program_output(cc_prog, cc_args);\n+\n+        if prog.status != 0 {\n+            sess.err(fmt!(\"building with `%s` failed with code %d\",\n+                        cc_prog, prog.status));\n+            sess.note(fmt!(\"%s arguments: %s\",\n+                        cc_prog, str::connect(cc_args, ~\" \")));\n+            sess.note(prog.err + prog.out);\n+            sess.abort_if_errors();\n+        }\n+    }\n }\n \n "}, {"sha": "d84f77cec3475c93770d1dd3e702cb50871e50fc", "filename": "src/librustc/driver/driver.rs", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/0f89eab89d9a6af9c4536a943c646ebe41b13002/src%2Flibrustc%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f89eab89d9a6af9c4536a943c646ebe41b13002/src%2Flibrustc%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fdriver.rs?ref=0f89eab89d9a6af9c4536a943c646ebe41b13002", "patch": "@@ -323,9 +323,23 @@ pub fn compile_rest(sess: Session, cfg: ast::crate_cfg,\n \n     };\n \n-    time(time_passes, ~\"LLVM passes\", ||\n-        link::write::run_passes(sess, llmod,\n+    // NOTE: Android hack\n+    if sess.targ_cfg.arch == session::arch_arm &&\n+            (sess.opts.output_type == link::output_type_object ||\n+             sess.opts.output_type == link::output_type_exe) {\n+        let output_type = link::output_type_assembly;\n+        let obj_filename = outputs.obj_filename.with_filetype(\"s\");\n+\n+        time(time_passes, ~\"LLVM passes\", ||\n+            link::write::run_passes(sess, llmod, output_type,\n+                            &obj_filename));\n+\n+        link::write::run_ndk(sess, &obj_filename, &outputs.obj_filename);\n+    } else {\n+        time(time_passes, ~\"LLVM passes\", ||\n+            link::write::run_passes(sess, llmod, sess.opts.output_type,\n                                 &outputs.obj_filename));\n+    }\n \n     let stop_after_codegen =\n         sess.opts.output_type != link::output_type_exe ||"}]}