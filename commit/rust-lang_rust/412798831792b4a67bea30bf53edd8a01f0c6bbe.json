{"sha": "412798831792b4a67bea30bf53edd8a01f0c6bbe", "node_id": "C_kwDOAAsO6NoAKDQxMjc5ODgzMTc5MmI0YTY3YmVhMzBiZjUzZWRkOGEwMWYwYzZiYmU", "commit": {"author": {"name": "est31", "email": "MTest31@outlook.com", "date": "2023-01-20T07:07:45Z"}, "committer": {"name": "est31", "email": "MTest31@outlook.com", "date": "2023-01-20T07:07:45Z"}, "message": "ThinBox: Add intra-doc-links for Metadata", "tree": {"sha": "d13077bcd83f5756878687f82cf0dc603800df83", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d13077bcd83f5756878687f82cf0dc603800df83"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/412798831792b4a67bea30bf53edd8a01f0c6bbe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/412798831792b4a67bea30bf53edd8a01f0c6bbe", "html_url": "https://github.com/rust-lang/rust/commit/412798831792b4a67bea30bf53edd8a01f0c6bbe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/412798831792b4a67bea30bf53edd8a01f0c6bbe/comments", "author": {"login": "est31", "id": 8872119, "node_id": "MDQ6VXNlcjg4NzIxMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/8872119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/est31", "html_url": "https://github.com/est31", "followers_url": "https://api.github.com/users/est31/followers", "following_url": "https://api.github.com/users/est31/following{/other_user}", "gists_url": "https://api.github.com/users/est31/gists{/gist_id}", "starred_url": "https://api.github.com/users/est31/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/est31/subscriptions", "organizations_url": "https://api.github.com/users/est31/orgs", "repos_url": "https://api.github.com/users/est31/repos", "events_url": "https://api.github.com/users/est31/events{/privacy}", "received_events_url": "https://api.github.com/users/est31/received_events", "type": "User", "site_admin": false}, "committer": {"login": "est31", "id": 8872119, "node_id": "MDQ6VXNlcjg4NzIxMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/8872119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/est31", "html_url": "https://github.com/est31", "followers_url": "https://api.github.com/users/est31/followers", "following_url": "https://api.github.com/users/est31/following{/other_user}", "gists_url": "https://api.github.com/users/est31/gists{/gist_id}", "starred_url": "https://api.github.com/users/est31/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/est31/subscriptions", "organizations_url": "https://api.github.com/users/est31/orgs", "repos_url": "https://api.github.com/users/est31/repos", "events_url": "https://api.github.com/users/est31/events{/privacy}", "received_events_url": "https://api.github.com/users/est31/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aaa9bb9e7bb4b8b565f2e1570587d6c21b13ab2d", "url": "https://api.github.com/repos/rust-lang/rust/commits/aaa9bb9e7bb4b8b565f2e1570587d6c21b13ab2d", "html_url": "https://github.com/rust-lang/rust/commit/aaa9bb9e7bb4b8b565f2e1570587d6c21b13ab2d"}], "stats": {"total": 8, "additions": 6, "deletions": 2}, "files": [{"sha": "ad48315fd70cc070bb116f9f964d4b0b55ad212a", "filename": "library/alloc/src/boxed/thin.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/412798831792b4a67bea30bf53edd8a01f0c6bbe/library%2Falloc%2Fsrc%2Fboxed%2Fthin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/412798831792b4a67bea30bf53edd8a01f0c6bbe/library%2Falloc%2Fsrc%2Fboxed%2Fthin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fboxed%2Fthin.rs?ref=412798831792b4a67bea30bf53edd8a01f0c6bbe", "patch": "@@ -48,7 +48,7 @@ unsafe impl<T: ?Sized + Sync> Sync for ThinBox<T> {}\n \n #[unstable(feature = \"thin_box\", issue = \"92791\")]\n impl<T> ThinBox<T> {\n-    /// Moves a type to the heap with its `Metadata` stored in the heap allocation instead of on\n+    /// Moves a type to the heap with its [`Metadata`] stored in the heap allocation instead of on\n     /// the stack.\n     ///\n     /// # Examples\n@@ -59,6 +59,8 @@ impl<T> ThinBox<T> {\n     ///\n     /// let five = ThinBox::new(5);\n     /// ```\n+    ///\n+    /// [`Metadata`]: core::ptr::Pointee::Metadata\n     #[cfg(not(no_global_oom_handling))]\n     pub fn new(value: T) -> Self {\n         let meta = ptr::metadata(&value);\n@@ -69,7 +71,7 @@ impl<T> ThinBox<T> {\n \n #[unstable(feature = \"thin_box\", issue = \"92791\")]\n impl<Dyn: ?Sized> ThinBox<Dyn> {\n-    /// Moves a type to the heap with its `Metadata` stored in the heap allocation instead of on\n+    /// Moves a type to the heap with its [`Metadata`] stored in the heap allocation instead of on\n     /// the stack.\n     ///\n     /// # Examples\n@@ -80,6 +82,8 @@ impl<Dyn: ?Sized> ThinBox<Dyn> {\n     ///\n     /// let thin_slice = ThinBox::<[i32]>::new_unsize([1, 2, 3, 4]);\n     /// ```\n+    ///\n+    /// [`Metadata`]: core::ptr::Pointee::Metadata\n     #[cfg(not(no_global_oom_handling))]\n     pub fn new_unsize<T>(value: T) -> Self\n     where"}]}