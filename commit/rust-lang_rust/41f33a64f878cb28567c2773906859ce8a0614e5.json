{"sha": "41f33a64f878cb28567c2773906859ce8a0614e5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQxZjMzYTY0Zjg3OGNiMjg1NjdjMjc3MzkwNjg1OWNlOGEwNjE0ZTU=", "commit": {"author": {"name": "hyd-dev", "email": "yd-huang@outlook.com", "date": "2021-04-15T21:19:23Z"}, "committer": {"name": "hyd-dev", "email": "yd-huang@outlook.com", "date": "2021-05-31T03:15:29Z"}, "message": "Implement calls to exported symbols", "tree": {"sha": "06c9cf1631239f61fa8823e21d2598eba4a39f17", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/06c9cf1631239f61fa8823e21d2598eba4a39f17"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/41f33a64f878cb28567c2773906859ce8a0614e5", "comment_count": 0, "verification": {"verified": false, "reason": "no_user", "signature": "-----BEGIN PGP SIGNATURE-----\n\niIoEABYIADMWIQRJ2jPMDdiQ+U4U42Z0+n/VuNoUuAUCYLRU0xUceWQtaHVhbmdA\nb3V0bG9vay5jb20ACgkQdPp/1bjaFLgFCAD4urT3G32ijY8gTDXezFoGB50841dk\n154/H12XMrvg4AD+KjRpUj+7vujVyvZC/klTMeKQ9+BC7P9T6EbVrpXw+ws=\n=PrbO\n-----END PGP SIGNATURE-----", "payload": "tree 06c9cf1631239f61fa8823e21d2598eba4a39f17\nparent 71f41405500cec42be22f0080bf3f83f97bfa768\nauthor hyd-dev <yd-huang@outlook.com> 1618521563 +0800\ncommitter hyd-dev <yd-huang@outlook.com> 1622430929 +0800\n\nImplement calls to exported symbols\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/41f33a64f878cb28567c2773906859ce8a0614e5", "html_url": "https://github.com/rust-lang/rust/commit/41f33a64f878cb28567c2773906859ce8a0614e5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/41f33a64f878cb28567c2773906859ce8a0614e5/comments", "author": null, "committer": null, "parents": [{"sha": "71f41405500cec42be22f0080bf3f83f97bfa768", "url": "https://api.github.com/repos/rust-lang/rust/commits/71f41405500cec42be22f0080bf3f83f97bfa768", "html_url": "https://github.com/rust-lang/rust/commit/71f41405500cec42be22f0080bf3f83f97bfa768"}], "stats": {"total": 674, "additions": 584, "deletions": 90}, "files": [{"sha": "7368d4b253bacca85157bd97571fab971e38dfa0", "filename": "src/bin/miri.rs", "status": "modified", "additions": 70, "deletions": 10, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/41f33a64f878cb28567c2773906859ce8a0614e5/src%2Fbin%2Fmiri.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41f33a64f878cb28567c2773906859ce8a0614e5/src%2Fbin%2Fmiri.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fmiri.rs?ref=41f33a64f878cb28567c2773906859ce8a0614e5", "patch": "@@ -1,29 +1,52 @@\n-#![feature(rustc_private)]\n+#![feature(rustc_private, bool_to_option, stmt_expr_attributes)]\n \n extern crate rustc_driver;\n extern crate rustc_errors;\n extern crate rustc_hir;\n extern crate rustc_interface;\n+extern crate rustc_metadata;\n extern crate rustc_middle;\n extern crate rustc_session;\n \n use std::convert::TryFrom;\n use std::env;\n+use std::path::PathBuf;\n+use std::rc::Rc;\n use std::str::FromStr;\n \n use hex::FromHexError;\n use log::debug;\n \n use rustc_driver::Compilation;\n use rustc_errors::emitter::{ColorConfig, HumanReadableErrorType};\n-use rustc_middle::ty::TyCtxt;\n-use rustc_session::{config::ErrorOutputType, CtfeBacktrace};\n+use rustc_hir::def_id::LOCAL_CRATE;\n+use rustc_interface::interface::Config;\n+use rustc_middle::{\n+    middle::exported_symbols::{ExportedSymbol, SymbolExportLevel},\n+    ty::{query::Providers, TyCtxt},\n+};\n+use rustc_session::{config::ErrorOutputType, search_paths::PathKind, CtfeBacktrace};\n \n struct MiriCompilerCalls {\n     miri_config: miri::MiriConfig,\n }\n \n impl rustc_driver::Callbacks for MiriCompilerCalls {\n+    fn config(&mut self, config: &mut Config) {\n+        config.override_queries = Some(|_, _, external_providers| {\n+            external_providers.used_crate_source = |tcx, cnum| {\n+                let mut providers = Providers::default();\n+                rustc_metadata::provide_extern(&mut providers);\n+                let mut crate_source = (providers.used_crate_source)(tcx, cnum);\n+                // HACK: rustc will emit \"crate ... required to be available in rlib format, but\n+                // was not found in this form\" errors once we use `tcx.dependency_formats()` if\n+                // there's no rlib provided, so setting a dummy path here to workaround those errors.\n+                Rc::make_mut(&mut crate_source).rlib = Some((PathBuf::new(), PathKind::All));\n+                crate_source\n+            };\n+        });\n+    }\n+\n     fn after_analysis<'tcx>(\n         &mut self,\n         compiler: &rustc_interface::interface::Compiler,\n@@ -67,6 +90,39 @@ impl rustc_driver::Callbacks for MiriCompilerCalls {\n     }\n }\n \n+struct MiriBeRustCompilerCalls {\n+    target_crate: bool,\n+}\n+\n+impl rustc_driver::Callbacks for MiriBeRustCompilerCalls {\n+    fn config(&mut self, config: &mut Config) {\n+        if config.opts.prints.is_empty() && self.target_crate {\n+            // Queries overriden here affects the data stored in `rmeta` files of dependencies,\n+            // which will be used later in non-`MIRI_BE_RUSTC` mode.\n+            config.override_queries = Some(|_, local_providers, _| {\n+                // `exported_symbols()` provided by rustc always returns empty result if\n+                // `tcx.sess.opts.output_types.should_codegen()` is false.\n+                local_providers.exported_symbols = |tcx, cnum| {\n+                    assert_eq!(cnum, LOCAL_CRATE);\n+                    tcx.arena.alloc_from_iter(\n+                        // This is based on:\n+                        // https://github.com/rust-lang/rust/blob/2962e7c0089d5c136f4e9600b7abccfbbde4973d/compiler/rustc_codegen_ssa/src/back/symbol_export.rs#L62-L63\n+                        // https://github.com/rust-lang/rust/blob/2962e7c0089d5c136f4e9600b7abccfbbde4973d/compiler/rustc_codegen_ssa/src/back/symbol_export.rs#L174\n+                        tcx.reachable_set(()).iter().filter_map(|&local_def_id| {\n+                            tcx.codegen_fn_attrs(local_def_id)\n+                                .contains_extern_indicator()\n+                                .then_some((\n+                                    ExportedSymbol::NonGeneric(local_def_id.to_def_id()),\n+                                    SymbolExportLevel::C,\n+                                ))\n+                        }),\n+                    )\n+                }\n+            });\n+        }\n+    }\n+}\n+\n fn init_early_loggers() {\n     // Note that our `extern crate log` is *not* the same as rustc's; as a result, we have to\n     // initialize them both, and we always initialize `miri`'s first.\n@@ -179,11 +235,7 @@ fn main() {\n     if let Some(crate_kind) = env::var_os(\"MIRI_BE_RUSTC\") {\n         rustc_driver::init_rustc_env_logger();\n \n-        // Don't insert `MIRI_DEFAULT_ARGS`, in particular, `--cfg=miri`, if we are building a\n-        // \"host\" crate. That may cause procedural macros (and probably build scripts) to depend\n-        // on Miri-only symbols, such as `miri_resolve_frame`:\n-        // https://github.com/rust-lang/miri/issues/1760\n-        let insert_default_args = if crate_kind == \"target\" {\n+        let target_crate = if crate_kind == \"target\" {\n             true\n         } else if crate_kind == \"host\" {\n             false\n@@ -192,8 +244,16 @@ fn main() {\n         };\n \n         // We cannot use `rustc_driver::main` as we need to adjust the CLI arguments.\n-        let mut callbacks = rustc_driver::TimePassesCallbacks::default();\n-        run_compiler(env::args().collect(), &mut callbacks, insert_default_args)\n+        run_compiler(\n+            env::args().collect(),\n+            &mut MiriBeRustCompilerCalls { target_crate },\n+            // Don't insert `MIRI_DEFAULT_ARGS`, in particular, `--cfg=miri`, if we are building\n+            // a \"host\" crate. That may cause procedural macros (and probably build scripts) to\n+            // depend on Miri-only symbols, such as `miri_resolve_frame`:\n+            // https://github.com/rust-lang/miri/issues/1760\n+            #[rustfmt::skip]\n+            /* insert_default_args: */ target_crate,\n+        )\n     }\n \n     // Init loggers the Miri way."}, {"sha": "55702fb3c96b6ff5657f8d33c2eb847fd56b7ea5", "filename": "src/diagnostics.rs", "status": "modified", "additions": 43, "deletions": 21, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/41f33a64f878cb28567c2773906859ce8a0614e5/src%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41f33a64f878cb28567c2773906859ce8a0614e5/src%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdiagnostics.rs?ref=41f33a64f878cb28567c2773906859ce8a0614e5", "patch": "@@ -5,7 +5,7 @@ use std::num::NonZeroU64;\n use log::trace;\n \n use rustc_middle::ty::{self, TyCtxt};\n-use rustc_span::{source_map::DUMMY_SP, Span};\n+use rustc_span::{source_map::DUMMY_SP, Span, SpanData, Symbol};\n \n use crate::*;\n \n@@ -14,8 +14,18 @@ pub enum TerminationInfo {\n     Exit(i64),\n     Abort(String),\n     UnsupportedInIsolation(String),\n-    ExperimentalUb { msg: String, url: String },\n+    ExperimentalUb {\n+        msg: String,\n+        url: String,\n+    },\n     Deadlock,\n+    MultipleSymbolDefinitions {\n+        link_name: Symbol,\n+        first: SpanData,\n+        first_crate: Symbol,\n+        second: SpanData,\n+        second_crate: Symbol,\n+    },\n }\n \n impl fmt::Display for TerminationInfo {\n@@ -27,6 +37,8 @@ impl fmt::Display for TerminationInfo {\n             UnsupportedInIsolation(msg) => write!(f, \"{}\", msg),\n             ExperimentalUb { msg, .. } => write!(f, \"{}\", msg),\n             Deadlock => write!(f, \"the evaluated program deadlocked\"),\n+            MultipleSymbolDefinitions { link_name, .. } =>\n+                write!(f, \"multiple definitions of symbol `{}`\", link_name),\n         }\n     }\n }\n@@ -55,19 +67,25 @@ pub fn report_error<'tcx, 'mir>(\n             use TerminationInfo::*;\n             let title = match info {\n                 Exit(code) => return Some(*code),\n-                Abort(_) => \"abnormal termination\",\n-                UnsupportedInIsolation(_) => \"unsupported operation\",\n-                ExperimentalUb { .. } => \"Undefined Behavior\",\n-                Deadlock => \"deadlock\",\n+                Abort(_) => Some(\"abnormal termination\"),\n+                UnsupportedInIsolation(_) => Some(\"unsupported operation\"),\n+                ExperimentalUb { .. } => Some(\"Undefined Behavior\"),\n+                Deadlock => Some(\"deadlock\"),\n+                MultipleSymbolDefinitions { .. } => None,\n             };\n             #[rustfmt::skip]\n             let helps = match info {\n                 UnsupportedInIsolation(_) =>\n-                    vec![format!(\"pass the flag `-Zmiri-disable-isolation` to disable isolation\")],\n+                    vec![(None, format!(\"pass the flag `-Zmiri-disable-isolation` to disable isolation\"))],\n                 ExperimentalUb { url, .. } =>\n                     vec![\n-                        format!(\"this indicates a potential bug in the program: it performed an invalid operation, but the rules it violated are still experimental\"),\n-                        format!(\"see {} for further information\", url),\n+                        (None, format!(\"this indicates a potential bug in the program: it performed an invalid operation, but the rules it violated are still experimental\")),\n+                        (None, format!(\"see {} for further information\", url)),\n+                    ],\n+                MultipleSymbolDefinitions { first, first_crate, second, second_crate, .. } =>\n+                    vec![\n+                        (Some(*first), format!(\"it's first defined here, in crate `{}`\", first_crate)),\n+                        (Some(*second), format!(\"then it's defined here again, in crate `{}`\", second_crate)),\n                     ],\n                 _ => vec![],\n             };\n@@ -90,26 +108,26 @@ pub fn report_error<'tcx, 'mir>(\n             #[rustfmt::skip]\n             let helps = match e.kind() {\n                 Unsupported(UnsupportedOpInfo::NoMirFor(..)) =>\n-                    vec![format!(\"make sure to use a Miri sysroot, which you can prepare with `cargo miri setup`\")],\n+                    vec![(None, format!(\"make sure to use a Miri sysroot, which you can prepare with `cargo miri setup`\"))],\n                 Unsupported(UnsupportedOpInfo::ReadBytesAsPointer | UnsupportedOpInfo::ThreadLocalStatic(_) | UnsupportedOpInfo::ReadExternStatic(_)) =>\n                     panic!(\"Error should never be raised by Miri: {:?}\", e.kind()),\n                 Unsupported(_) =>\n-                    vec![format!(\"this is likely not a bug in the program; it indicates that the program performed an operation that the interpreter does not support\")],\n+                    vec![(None, format!(\"this is likely not a bug in the program; it indicates that the program performed an operation that the interpreter does not support\"))],\n                 UndefinedBehavior(UndefinedBehaviorInfo::AlignmentCheckFailed { .. })\n                     if ecx.memory.extra.check_alignment == AlignmentCheck::Symbolic\n                 =>\n                     vec![\n-                        format!(\"this usually indicates that your program performed an invalid operation and caused Undefined Behavior\"),\n-                        format!(\"but due to `-Zmiri-symbolic-alignment-check`, alignment errors can also be false positives\"),\n+                        (None, format!(\"this usually indicates that your program performed an invalid operation and caused Undefined Behavior\")),\n+                        (None, format!(\"but due to `-Zmiri-symbolic-alignment-check`, alignment errors can also be false positives\")),\n                     ],\n                 UndefinedBehavior(_) =>\n                     vec![\n-                        format!(\"this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\"),\n-                        format!(\"see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\"),\n+                        (None, format!(\"this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\")),\n+                        (None, format!(\"see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\")),\n                     ],\n                 _ => vec![],\n             };\n-            (title, helps)\n+            (Some(title), helps)\n         }\n     };\n \n@@ -118,7 +136,7 @@ pub fn report_error<'tcx, 'mir>(\n     report_msg(\n         *ecx.tcx,\n         /*error*/ true,\n-        &format!(\"{}: {}\", title, msg),\n+        &if let Some(title) = title { format!(\"{}: {}\", title, msg) } else { msg.clone() },\n         msg,\n         helps,\n         &ecx.generate_stacktrace(),\n@@ -157,7 +175,7 @@ fn report_msg<'tcx>(\n     error: bool,\n     title: &str,\n     span_msg: String,\n-    mut helps: Vec<String>,\n+    mut helps: Vec<(Option<SpanData>, String)>,\n     stacktrace: &[FrameInfo<'tcx>],\n ) {\n     let span = stacktrace.first().map_or(DUMMY_SP, |fi| fi.span);\n@@ -177,9 +195,13 @@ fn report_msg<'tcx>(\n     // Show help messages.\n     if !helps.is_empty() {\n         // Add visual separator before backtrace.\n-        helps.last_mut().unwrap().push_str(\"\\n\");\n-        for help in helps {\n-            err.help(&help);\n+        helps.last_mut().unwrap().1.push_str(\"\\n\");\n+        for (span_data, help) in helps {\n+            if let Some(span_data) = span_data {\n+                err.span_help(span_data.span(), &help);\n+            } else {\n+                err.help(&help);\n+            }\n         }\n     }\n     // Add backtrace"}, {"sha": "25806b472b6034604ac008fc0f51cec34a145845", "filename": "src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41f33a64f878cb28567c2773906859ce8a0614e5/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41f33a64f878cb28567c2773906859ce8a0614e5/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=41f33a64f878cb28567c2773906859ce8a0614e5", "patch": "@@ -3,6 +3,7 @@\n #![feature(map_try_insert)]\n #![feature(never_type)]\n #![feature(try_blocks)]\n+#![feature(bool_to_option)]\n #![warn(rust_2018_idioms)]\n #![allow(clippy::cast_lossless)]\n \n@@ -14,6 +15,7 @@ extern crate rustc_data_structures;\n extern crate rustc_hir;\n extern crate rustc_index;\n extern crate rustc_mir;\n+extern crate rustc_session;\n extern crate rustc_span;\n extern crate rustc_target;\n "}, {"sha": "9c49575ded324f042c3c1d62ac47c6cababd7b63", "filename": "src/machine.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/41f33a64f878cb28567c2773906859ce8a0614e5/src%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41f33a64f878cb28567c2773906859ce8a0614e5/src%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmachine.rs?ref=41f33a64f878cb28567c2773906859ce8a0614e5", "patch": "@@ -17,7 +17,7 @@ use rustc_middle::{\n     ty::{\n         self,\n         layout::{LayoutCx, LayoutError, TyAndLayout},\n-        TyCtxt,\n+        Instance, TyCtxt,\n     },\n };\n use rustc_span::def_id::DefId;\n@@ -294,6 +294,9 @@ pub struct Evaluator<'mir, 'tcx> {\n     /// Used with `profiler` to cache the `StringId`s for event names\n     /// uesd with `measureme`.\n     string_cache: FxHashMap<String, measureme::StringId>,\n+\n+    /// Cache of `Instance` exported under the given `Symbol` name.\n+    pub(crate) exported_symbols_cache: FxHashMap<Symbol, Instance<'tcx>>,\n }\n \n impl<'mir, 'tcx> Evaluator<'mir, 'tcx> {\n@@ -322,6 +325,7 @@ impl<'mir, 'tcx> Evaluator<'mir, 'tcx> {\n             static_roots: Vec::new(),\n             profiler,\n             string_cache: Default::default(),\n+            exported_symbols_cache: FxHashMap::default(),\n         }\n     }\n }"}, {"sha": "2269b41d576f9c8e6d515e6f22f22e634ee11f47", "filename": "src/shims/foreign_items.rs", "status": "modified", "additions": 119, "deletions": 40, "changes": 159, "blob_url": "https://github.com/rust-lang/rust/blob/41f33a64f878cb28567c2773906859ce8a0614e5/src%2Fshims%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41f33a64f878cb28567c2773906859ce8a0614e5/src%2Fshims%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fforeign_items.rs?ref=41f33a64f878cb28567c2773906859ce8a0614e5", "patch": "@@ -6,19 +6,37 @@ use std::{\n use log::trace;\n \n use rustc_apfloat::Float;\n-use rustc_hir::def_id::DefId;\n+use rustc_hir::{\n+    def::DefKind,\n+    def_id::{CrateNum, DefId, LOCAL_CRATE},\n+};\n+use rustc_middle::middle::{\n+    codegen_fn_attrs::CodegenFnAttrFlags, dependency_format::Linkage,\n+    exported_symbols::ExportedSymbol,\n+};\n use rustc_middle::mir;\n use rustc_middle::ty;\n-use rustc_span::symbol::sym;\n+use rustc_session::config::CrateType;\n+use rustc_span::{symbol::sym, Symbol};\n use rustc_target::{\n     abi::{Align, Size},\n-    spec::{abi::Abi, PanicStrategy},\n+    spec::abi::Abi,\n };\n \n use super::backtrace::EvalContextExt as _;\n use crate::*;\n use helpers::{check_abi, check_arg_count};\n \n+/// Returned by `emulate_foreign_item_by_name`.\n+pub enum EmulateByNameResult {\n+    /// The caller is expected to jump to the return block.\n+    NeedsJumping,\n+    /// Jumping has already been taken care of.\n+    AlreadyJumped,\n+    /// The item is not supported.\n+    NotSupported,\n+}\n+\n impl<'mir, 'tcx: 'mir> EvalContextExt<'mir, 'tcx> for crate::MiriEvalContext<'mir, 'tcx> {}\n pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx> {\n     /// Returns the minimum alignment for the target architecture for allocations of the given size.\n@@ -108,6 +126,76 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         }\n     }\n \n+    /// Lookup the body of a function that has `link_name` as the symbol name.\n+    fn lookup_exported_symbol(\n+        &mut self,\n+        link_name: Symbol,\n+    ) -> InterpResult<'tcx, Option<&'mir mir::Body<'tcx>>> {\n+        let this = self.eval_context_mut();\n+        let tcx = this.tcx.tcx;\n+\n+        // If the result was cached, just return it.\n+        if let Some(instance) = this.machine.exported_symbols_cache.get(&link_name) {\n+            return Ok(Some(this.load_mir(instance.def, None)?));\n+        }\n+\n+        // Find it if it was not cached.\n+        let mut instance_and_crate: Option<(ty::Instance<'_>, CrateNum)> = None;\n+        // `dependency_formats` includes all the transitive informations needed to link a crate,\n+        // which is what we need here since we need to dig out `exported_symbols` from all transitive\n+        // dependencies.\n+        let dependency_formats = tcx.dependency_formats(());\n+        let dependency_format = dependency_formats\n+            .iter()\n+            .find(|(crate_type, _)| *crate_type == CrateType::Executable)\n+            .expect(\"interpreting a non-executable crate\");\n+        for cnum in\n+            iter::once(LOCAL_CRATE).chain(dependency_format.1.iter().enumerate().filter_map(\n+                |(num, &linkage)| (linkage != Linkage::NotLinked).then_some(CrateNum::new(num + 1)),\n+            ))\n+        {\n+            // FIXME: Do we need to check `SymbolExportLevel` (the `_` below)?\n+            for &(symbol, _) in tcx.exported_symbols(cnum) {\n+                if let ExportedSymbol::NonGeneric(def_id) = symbol {\n+                    let attrs = tcx.codegen_fn_attrs(def_id);\n+                    let symbol_name = if let Some(export_name) = attrs.export_name {\n+                        export_name\n+                    } else if attrs.flags.contains(CodegenFnAttrFlags::NO_MANGLE) {\n+                        tcx.item_name(def_id)\n+                    } else {\n+                        // Skip over items without an explicitly defined symbol name.\n+                        continue;\n+                    };\n+                    if symbol_name == link_name {\n+                        if let Some((instance, original_cnum)) = instance_and_crate {\n+                            throw_machine_stop!(TerminationInfo::MultipleSymbolDefinitions {\n+                                link_name,\n+                                first: tcx.def_span(instance.def_id()).data(),\n+                                first_crate: tcx.crate_name(original_cnum),\n+                                second: tcx.def_span(def_id).data(),\n+                                second_crate: tcx.crate_name(cnum),\n+                            });\n+                        }\n+                        if tcx.def_kind(def_id) != DefKind::Fn {\n+                            throw_ub_format!(\n+                                \"attempt to call an exported symbol that is not defined as a function\"\n+                            );\n+                        }\n+                        instance_and_crate = Some((ty::Instance::mono(tcx, def_id), cnum));\n+                    }\n+                }\n+            }\n+        }\n+\n+        // Cache it and load its MIR, if found.\n+        instance_and_crate\n+            .map(|(instance, _)| {\n+                this.machine.exported_symbols_cache.insert(link_name, instance);\n+                this.load_mir(instance.def, None)\n+            })\n+            .transpose()\n+    }\n+\n     /// Emulates calling a foreign item, failing if the item is not supported.\n     /// This function will handle `goto_block` if needed.\n     /// Returns Ok(None) if the foreign item was completely handled\n@@ -124,10 +212,12 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     ) -> InterpResult<'tcx, Option<&'mir mir::Body<'tcx>>> {\n         let this = self.eval_context_mut();\n         let attrs = this.tcx.get_attrs(def_id);\n-        let link_name = match this.tcx.sess.first_attr_value_str_by_name(&attrs, sym::link_name) {\n-            Some(name) => name.as_str(),\n-            None => this.tcx.item_name(def_id).as_str(),\n+        let link_name_sym = match this.tcx.sess.first_attr_value_str_by_name(&attrs, sym::link_name)\n+        {\n+            Some(name) => name,\n+            None => this.tcx.item_name(def_id),\n         };\n+        let link_name = link_name_sym.as_str();\n         // Strip linker suffixes (seen on 32-bit macOS).\n         let link_name = link_name.trim_end_matches(\"$UNIX2003\");\n         let tcx = this.tcx.tcx;\n@@ -164,56 +254,43 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                         \"the program aborted execution\".to_owned()\n                     ))\n                 }\n-                _ => throw_unsup_format!(\"can't call (diverging) foreign function: {}\", link_name),\n+                _ => {\n+                    if let Some(body) = this.lookup_exported_symbol(link_name_sym)? {\n+                        return Ok(Some(body));\n+                    }\n+                    throw_unsup_format!(\"can't call (diverging) foreign function: {}\", link_name);\n+                }\n             },\n             Some(p) => p,\n         };\n \n-        // Second: some functions that we forward to MIR implementations.\n-        match link_name {\n-            // This matches calls to the foreign item `__rust_start_panic`, that is,\n-            // calls to `extern \"Rust\" { fn __rust_start_panic(...) }`\n-            // (and `__rust_panic_cleanup`, respectively).\n-            // We forward this to the underlying *implementation* in the panic runtime crate.\n-            // Normally, this will be either `libpanic_unwind` or `libpanic_abort`, but it could\n-            // also be a custom user-provided implementation via `#![feature(panic_runtime)]`\n-            #[rustfmt::skip]\n-            \"__rust_start_panic\" |\n-            \"__rust_panic_cleanup\" => {\n-                check_abi(this, abi, Abi::C { unwind: false })?;\n-                // This replicates some of the logic in `inject_panic_runtime`.\n-                // FIXME: is there a way to reuse that logic?\n-                let panic_runtime = match this.tcx.sess.panic_strategy() {\n-                    PanicStrategy::Unwind => sym::panic_unwind,\n-                    PanicStrategy::Abort => sym::panic_abort,\n-                };\n-                let start_panic_instance =\n-                    this.resolve_path(&[&*panic_runtime.as_str(), link_name]);\n-                return Ok(Some(&*this.load_mir(start_panic_instance.def, None)?));\n+        // Second: functions that return.\n+        match this.emulate_foreign_item_by_name(link_name, abi, args, dest, ret)? {\n+            EmulateByNameResult::NeedsJumping => {\n+                trace!(\"{:?}\", this.dump_place(**dest));\n+                this.go_to_block(ret);\n+            }\n+            EmulateByNameResult::AlreadyJumped => (),\n+            EmulateByNameResult::NotSupported => {\n+                if let Some(body) = this.lookup_exported_symbol(link_name_sym)? {\n+                    return Ok(Some(body));\n+                }\n+                throw_unsup_format!(\"can't call foreign function: {}\", link_name);\n             }\n-            _ => {}\n-        }\n-\n-        // Third: functions that return.\n-        if this.emulate_foreign_item_by_name(link_name, abi, args, dest, ret)? {\n-            trace!(\"{:?}\", this.dump_place(**dest));\n-            this.go_to_block(ret);\n         }\n \n         Ok(None)\n     }\n \n-    /// Emulates calling a foreign item using its name, failing if the item is not supported.\n-    /// Returns `true` if the caller is expected to jump to the return block, and `false` if\n-    /// jumping has already been taken care of.\n+    /// Emulates calling a foreign item using its name.\n     fn emulate_foreign_item_by_name(\n         &mut self,\n         link_name: &str,\n         abi: Abi,\n         args: &[OpTy<'tcx, Tag>],\n         dest: &PlaceTy<'tcx, Tag>,\n         ret: mir::BasicBlock,\n-    ) -> InterpResult<'tcx, bool> {\n+    ) -> InterpResult<'tcx, EmulateByNameResult> {\n         let this = self.eval_context_mut();\n \n         // Here we dispatch all the shims for foreign functions. If you have a platform specific\n@@ -549,7 +626,9 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             }\n         };\n \n-        Ok(true)\n+        // We only fall through to here if we did *not* hit the `_` arm above,\n+        // i.e., if we actually emulated the function.\n+        Ok(EmulateByNameResult::NeedsJumping)\n     }\n \n     /// Check some basic requirements for this allocation request:"}, {"sha": "f153098cac85f01408ece732b12d9862213e3b38", "filename": "src/shims/posix/foreign_items.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/41f33a64f878cb28567c2773906859ce8a0614e5/src%2Fshims%2Fposix%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41f33a64f878cb28567c2773906859ce8a0614e5/src%2Fshims%2Fposix%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fposix%2Fforeign_items.rs?ref=41f33a64f878cb28567c2773906859ce8a0614e5", "patch": "@@ -6,6 +6,7 @@ use rustc_target::spec::abi::Abi;\n \n use crate::*;\n use helpers::{check_abi, check_arg_count};\n+use shims::foreign_items::EmulateByNameResult;\n use shims::posix::fs::EvalContextExt as _;\n use shims::posix::sync::EvalContextExt as _;\n use shims::posix::thread::EvalContextExt as _;\n@@ -19,7 +20,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         args: &[OpTy<'tcx, Tag>],\n         dest: &PlaceTy<'tcx, Tag>,\n         ret: mir::BasicBlock,\n-    ) -> InterpResult<'tcx, bool> {\n+    ) -> InterpResult<'tcx, EmulateByNameResult> {\n         let this = self.eval_context_mut();\n \n         match link_name {\n@@ -524,6 +525,6 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             }\n         };\n \n-        Ok(true)\n+        Ok(EmulateByNameResult::NeedsJumping)\n     }\n }"}, {"sha": "47ffad56d12223a58cbb310a597c9d40477a0bb2", "filename": "src/shims/posix/linux/foreign_items.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/41f33a64f878cb28567c2773906859ce8a0614e5/src%2Fshims%2Fposix%2Flinux%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41f33a64f878cb28567c2773906859ce8a0614e5/src%2Fshims%2Fposix%2Flinux%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fposix%2Flinux%2Fforeign_items.rs?ref=41f33a64f878cb28567c2773906859ce8a0614e5", "patch": "@@ -3,6 +3,7 @@ use rustc_target::spec::abi::Abi;\n \n use crate::helpers::{check_abi, check_arg_count};\n use crate::*;\n+use shims::foreign_items::EmulateByNameResult;\n use shims::posix::fs::EvalContextExt as _;\n use shims::posix::linux::sync::futex;\n use shims::posix::sync::EvalContextExt as _;\n@@ -17,7 +18,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         args: &[OpTy<'tcx, Tag>],\n         dest: &PlaceTy<'tcx, Tag>,\n         _ret: mir::BasicBlock,\n-    ) -> InterpResult<'tcx, bool> {\n+    ) -> InterpResult<'tcx, EmulateByNameResult> {\n         let this = self.eval_context_mut();\n \n         match link_name {\n@@ -214,10 +215,10 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 this.write_null(dest)?;\n             }\n \n-            _ => throw_unsup_format!(\"can't call foreign function: {}\", link_name),\n+            _ => return Ok(EmulateByNameResult::NotSupported),\n         };\n \n-        Ok(true)\n+        Ok(EmulateByNameResult::NeedsJumping)\n     }\n }\n "}, {"sha": "15a073dd04ef5e2497b7b710c83ba1604ee052bb", "filename": "src/shims/posix/macos/foreign_items.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/41f33a64f878cb28567c2773906859ce8a0614e5/src%2Fshims%2Fposix%2Fmacos%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41f33a64f878cb28567c2773906859ce8a0614e5/src%2Fshims%2Fposix%2Fmacos%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fposix%2Fmacos%2Fforeign_items.rs?ref=41f33a64f878cb28567c2773906859ce8a0614e5", "patch": "@@ -3,6 +3,7 @@ use rustc_target::spec::abi::Abi;\n \n use crate::*;\n use helpers::{check_abi, check_arg_count};\n+use shims::foreign_items::EmulateByNameResult;\n use shims::posix::fs::EvalContextExt as _;\n use shims::posix::thread::EvalContextExt as _;\n \n@@ -15,7 +16,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         args: &[OpTy<'tcx, Tag>],\n         dest: &PlaceTy<'tcx, Tag>,\n         _ret: mir::BasicBlock,\n-    ) -> InterpResult<'tcx, bool> {\n+    ) -> InterpResult<'tcx, EmulateByNameResult> {\n         let this = self.eval_context_mut();\n \n         match link_name {\n@@ -156,9 +157,9 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 this.write_scalar(addr, dest)?;\n             }\n \n-            _ => throw_unsup_format!(\"can't call foreign function: {}\", link_name),\n+            _ => return Ok(EmulateByNameResult::NotSupported),\n         };\n \n-        Ok(true)\n+        Ok(EmulateByNameResult::NeedsJumping)\n     }\n }"}, {"sha": "0f9e3899b85afa79aca2fe04c9c0826b24e80a27", "filename": "src/shims/windows/foreign_items.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/41f33a64f878cb28567c2773906859ce8a0614e5/src%2Fshims%2Fwindows%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41f33a64f878cb28567c2773906859ce8a0614e5/src%2Fshims%2Fwindows%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fwindows%2Fforeign_items.rs?ref=41f33a64f878cb28567c2773906859ce8a0614e5", "patch": "@@ -6,6 +6,7 @@ use rustc_target::spec::abi::Abi;\n \n use crate::*;\n use helpers::{check_abi, check_arg_count};\n+use shims::foreign_items::EmulateByNameResult;\n use shims::windows::sync::EvalContextExt as _;\n \n impl<'mir, 'tcx: 'mir> EvalContextExt<'mir, 'tcx> for crate::MiriEvalContext<'mir, 'tcx> {}\n@@ -17,7 +18,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         args: &[OpTy<'tcx, Tag>],\n         dest: &PlaceTy<'tcx, Tag>,\n         _ret: mir::BasicBlock,\n-    ) -> InterpResult<'tcx, bool> {\n+    ) -> InterpResult<'tcx, EmulateByNameResult> {\n         let this = self.eval_context_mut();\n \n         // Windows API stubs.\n@@ -415,9 +416,9 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 this.write_scalar(Scalar::from_i32(1), dest)?;\n             }\n \n-            _ => throw_unsup_format!(\"can't call foreign function: {}\", link_name),\n+            _ => return Ok(EmulateByNameResult::NotSupported),\n         }\n \n-        Ok(true)\n+        Ok(EmulateByNameResult::NeedsJumping)\n     }\n }"}, {"sha": "9a9fa4797bf2677370b47a9dc6e7dc4fee3ca18a", "filename": "test-cargo-miri/Cargo.lock", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/41f33a64f878cb28567c2773906859ce8a0614e5/test-cargo-miri%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/41f33a64f878cb28567c2773906859ce8a0614e5/test-cargo-miri%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/test-cargo-miri%2FCargo.lock?ref=41f33a64f878cb28567c2773906859ce8a0614e5", "patch": "@@ -14,6 +14,7 @@ version = \"0.1.0\"\n dependencies = [\n  \"byteorder\",\n  \"cdylib\",\n+ \"exported_symbol\",\n  \"getrandom 0.1.16\",\n  \"getrandom 0.2.2\",\n  \"issue_1567\",\n@@ -37,6 +38,17 @@ version = \"1.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"baf1de4339761588bc0619e3cbc0120ee582ebb74b53b4efbf79117bd2da40fd\"\n \n+[[package]]\n+name = \"exported_symbol\"\n+version = \"0.1.0\"\n+dependencies = [\n+ \"exported_symbol_dep\",\n+]\n+\n+[[package]]\n+name = \"exported_symbol_dep\"\n+version = \"0.1.0\"\n+\n [[package]]\n name = \"getrandom\"\n version = \"0.1.16\""}, {"sha": "cf557bd60ef39643d652d8239258f2c4a4227c5d", "filename": "test-cargo-miri/Cargo.toml", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/41f33a64f878cb28567c2773906859ce8a0614e5/test-cargo-miri%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/41f33a64f878cb28567c2773906859ce8a0614e5/test-cargo-miri%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/test-cargo-miri%2FCargo.toml?ref=41f33a64f878cb28567c2773906859ce8a0614e5", "patch": "@@ -1,5 +1,5 @@\n [workspace]\n-members = [\"subcrate\", \"issue-1567\"]\n+members = [\"subcrate\", \"issue-1567\", \"exported-symbol-dep\"]\n \n [package]\n name = \"cargo-miri-test\"\n@@ -10,6 +10,7 @@ edition = \"2018\"\n [dependencies]\n byteorder = \"1.0\"\n cdylib = { path = \"cdylib\" }\n+exported_symbol = { path = \"exported-symbol\" }\n issue_1567 = { path = \"issue-1567\" }\n issue_1691 = { path = \"issue-1691\" }\n issue_1705 = { path = \"issue-1705\" }"}, {"sha": "00c41172c3af20a4f071721d1aedbda42ef2c199", "filename": "test-cargo-miri/exported-symbol-dep/Cargo.toml", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/41f33a64f878cb28567c2773906859ce8a0614e5/test-cargo-miri%2Fexported-symbol-dep%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/41f33a64f878cb28567c2773906859ce8a0614e5/test-cargo-miri%2Fexported-symbol-dep%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/test-cargo-miri%2Fexported-symbol-dep%2FCargo.toml?ref=41f33a64f878cb28567c2773906859ce8a0614e5", "patch": "@@ -0,0 +1,5 @@\n+[package]\n+name = \"exported_symbol_dep\"\n+version = \"0.1.0\"\n+authors = [\"Miri Team\"]\n+edition = \"2018\""}, {"sha": "4cc18fb9b2fbca6a594778842d5ff0a94eeffae5", "filename": "test-cargo-miri/exported-symbol-dep/src/lib.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/41f33a64f878cb28567c2773906859ce8a0614e5/test-cargo-miri%2Fexported-symbol-dep%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41f33a64f878cb28567c2773906859ce8a0614e5/test-cargo-miri%2Fexported-symbol-dep%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/test-cargo-miri%2Fexported-symbol-dep%2Fsrc%2Flib.rs?ref=41f33a64f878cb28567c2773906859ce8a0614e5", "patch": "@@ -0,0 +1,4 @@\n+#[no_mangle]\n+fn exported_symbol() -> i32 {\n+    123456\n+}"}, {"sha": "7c01be1a85f9ce109d341f584b7d7da750f54423", "filename": "test-cargo-miri/exported-symbol/Cargo.toml", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/41f33a64f878cb28567c2773906859ce8a0614e5/test-cargo-miri%2Fexported-symbol%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/41f33a64f878cb28567c2773906859ce8a0614e5/test-cargo-miri%2Fexported-symbol%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/test-cargo-miri%2Fexported-symbol%2FCargo.toml?ref=41f33a64f878cb28567c2773906859ce8a0614e5", "patch": "@@ -0,0 +1,11 @@\n+[package]\n+name = \"exported_symbol\"\n+version = \"0.1.0\"\n+authors = [\"Miri Team\"]\n+edition = \"2018\"\n+\n+[dependencies]\n+# This will become a transitive dependency of doctests in `test-cargo-miri/src/lib.rs`,\n+# and the purpose of the test is to make sure Miri can find a `#[no_mangle]` function in a\n+# transitive dependency like `exported_symbol_dep`.\n+exported_symbol_dep = { path = \"../exported-symbol-dep\" }"}, {"sha": "de55eb2a1a5a003b0b9575d118274d26d470b3ef", "filename": "test-cargo-miri/exported-symbol/src/lib.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/41f33a64f878cb28567c2773906859ce8a0614e5/test-cargo-miri%2Fexported-symbol%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41f33a64f878cb28567c2773906859ce8a0614e5/test-cargo-miri%2Fexported-symbol%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/test-cargo-miri%2Fexported-symbol%2Fsrc%2Flib.rs?ref=41f33a64f878cb28567c2773906859ce8a0614e5", "patch": "@@ -0,0 +1 @@\n+extern crate exported_symbol_dep;"}, {"sha": "6397d072e89ef8d3df83642116f196cebd18d315", "filename": "test-cargo-miri/src/lib.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/41f33a64f878cb28567c2773906859ce8a0614e5/test-cargo-miri%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41f33a64f878cb28567c2773906859ce8a0614e5/test-cargo-miri%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/test-cargo-miri%2Fsrc%2Flib.rs?ref=41f33a64f878cb28567c2773906859ce8a0614e5", "patch": "@@ -1,13 +1,29 @@\n+extern crate exported_symbol;\n+\n /// Doc-test test\n /// ```rust\n /// assert!(cargo_miri_test::make_true());\n+/// // Repeat calls to make sure the `Instance` cache is not broken.\n+/// for _ in 0..3 {\n+///     extern \"Rust\" {\n+///         fn exported_symbol() -> i32;\n+///         fn make_true() -> bool;\n+///     }\n+///     assert_eq!(unsafe { exported_symbol() }, 123456);\n+///     assert!(unsafe { make_true() });\n+/// }\n+/// ```\n+/// ```compile_fail\n+/// // Make sure `exported_symbol_dep` is not a direct dependency for doctests.\n+/// use exported_symbol_dep;\n /// ```\n /// ```rust,no_run\n /// assert!(!cargo_miri_test::make_true());\n /// ```\n /// ```rust,compile_fail\n /// assert!(cargo_miri_test::make_true() == 5);\n /// ```\n+#[no_mangle]\n pub fn make_true() -> bool {\n     issue_1567::use_the_dependency();\n     issue_1705::use_the_dependency();"}, {"sha": "e97119f217f7abab4ef741b3feaea90983357c22", "filename": "test-cargo-miri/test.default.stdout.ref", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/41f33a64f878cb28567c2773906859ce8a0614e5/test-cargo-miri%2Ftest.default.stdout.ref", "raw_url": "https://github.com/rust-lang/rust/raw/41f33a64f878cb28567c2773906859ce8a0614e5/test-cargo-miri%2Ftest.default.stdout.ref", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/test-cargo-miri%2Ftest.default.stdout.ref?ref=41f33a64f878cb28567c2773906859ce8a0614e5", "patch": "@@ -10,10 +10,11 @@ running 7 tests\n test result: ok. 6 passed; 0 failed; 1 ignored; 0 measured; 0 filtered out\n \n \n-running 3 tests\n-test src/lib.rs - make_true (line 2) ... ok\n-test src/lib.rs - make_true (line 5) ... ok\n-test src/lib.rs - make_true (line 8) ... ok\n+running 4 tests\n+test src/lib.rs - make_true (line 16) ... ok\n+test src/lib.rs - make_true (line 20) ... ok\n+test src/lib.rs - make_true (line 23) ... ok\n+test src/lib.rs - make_true (line 4) ... ok\n \n-test result: ok. 3 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in $TIME\n+test result: ok. 4 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in $TIME\n "}, {"sha": "61565a4c1e4a3dbb75be3d2615eaa7278743c9a4", "filename": "test-cargo-miri/test.filter.stdout.ref", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41f33a64f878cb28567c2773906859ce8a0614e5/test-cargo-miri%2Ftest.filter.stdout.ref", "raw_url": "https://github.com/rust-lang/rust/raw/41f33a64f878cb28567c2773906859ce8a0614e5/test-cargo-miri%2Ftest.filter.stdout.ref", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/test-cargo-miri%2Ftest.filter.stdout.ref?ref=41f33a64f878cb28567c2773906859ce8a0614e5", "patch": "@@ -13,5 +13,5 @@ test result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 6 filtered out\n \n running 0 tests\n \n-test result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 3 filtered out; finished in $TIME\n+test result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 4 filtered out; finished in $TIME\n "}, {"sha": "5656c7a0e4cb6969f6804a9caa90d66baee543c3", "filename": "tests/compile-fail/function_calls/check_arg_abi.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/41f33a64f878cb28567c2773906859ce8a0614e5/tests%2Fcompile-fail%2Ffunction_calls%2Fcheck_arg_abi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41f33a64f878cb28567c2773906859ce8a0614e5/tests%2Fcompile-fail%2Ffunction_calls%2Fcheck_arg_abi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Ffunction_calls%2Fcheck_arg_abi.rs?ref=41f33a64f878cb28567c2773906859ce8a0614e5", "previous_filename": "tests/compile-fail/check_arg_abi.rs"}, {"sha": "e1cea99eb90b25289e498e425c8d650ece74e70d", "filename": "tests/compile-fail/function_calls/check_arg_count_too_few_args.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/41f33a64f878cb28567c2773906859ce8a0614e5/tests%2Fcompile-fail%2Ffunction_calls%2Fcheck_arg_count_too_few_args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41f33a64f878cb28567c2773906859ce8a0614e5/tests%2Fcompile-fail%2Ffunction_calls%2Fcheck_arg_count_too_few_args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Ffunction_calls%2Fcheck_arg_count_too_few_args.rs?ref=41f33a64f878cb28567c2773906859ce8a0614e5", "previous_filename": "tests/compile-fail/check_arg_count_too_few_args.rs"}, {"sha": "c4028b940ff035c4732a32ed4fdda4f9b9525648", "filename": "tests/compile-fail/function_calls/check_arg_count_too_many_args.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/41f33a64f878cb28567c2773906859ce8a0614e5/tests%2Fcompile-fail%2Ffunction_calls%2Fcheck_arg_count_too_many_args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41f33a64f878cb28567c2773906859ce8a0614e5/tests%2Fcompile-fail%2Ffunction_calls%2Fcheck_arg_count_too_many_args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Ffunction_calls%2Fcheck_arg_count_too_many_args.rs?ref=41f33a64f878cb28567c2773906859ce8a0614e5", "previous_filename": "tests/compile-fail/check_arg_count_too_many_args.rs"}, {"sha": "69dfc03598313cf823cc11f499ebd5b0444cb18e", "filename": "tests/compile-fail/function_calls/check_callback_abi.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/41f33a64f878cb28567c2773906859ce8a0614e5/tests%2Fcompile-fail%2Ffunction_calls%2Fcheck_callback_abi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41f33a64f878cb28567c2773906859ce8a0614e5/tests%2Fcompile-fail%2Ffunction_calls%2Fcheck_callback_abi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Ffunction_calls%2Fcheck_callback_abi.rs?ref=41f33a64f878cb28567c2773906859ce8a0614e5", "previous_filename": "tests/compile-fail/check_callback_abi.rs"}, {"sha": "d62cb2e8b7ad9288f4c7fd552b36fbae1e028d48", "filename": "tests/compile-fail/function_calls/exported_symbol_abi_mismatch.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/41f33a64f878cb28567c2773906859ce8a0614e5/tests%2Fcompile-fail%2Ffunction_calls%2Fexported_symbol_abi_mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41f33a64f878cb28567c2773906859ce8a0614e5/tests%2Fcompile-fail%2Ffunction_calls%2Fexported_symbol_abi_mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Ffunction_calls%2Fexported_symbol_abi_mismatch.rs?ref=41f33a64f878cb28567c2773906859ce8a0614e5", "patch": "@@ -0,0 +1,22 @@\n+// revisions: no_cache cache\n+\n+#[no_mangle]\n+fn foo() {}\n+\n+fn main() {\n+    #[cfg(cache)]\n+    {\n+        // `Instance` caching should not suppress ABI check.\n+        extern \"Rust\" {\n+            fn foo();\n+        }\n+        unsafe { foo() }\n+    }\n+    #[cfg_attr(cache, allow(clashing_extern_declarations))]\n+    extern \"C\" {\n+        fn foo();\n+    }\n+    unsafe { foo() }\n+    //[no_cache]~^ ERROR Undefined Behavior: calling a function with ABI Rust using caller ABI C\n+    //[cache]~^^ ERROR Undefined Behavior: calling a function with ABI Rust using caller ABI C\n+}"}, {"sha": "91b0e8fc03f222e38a8b8e5916c0335bda551dcd", "filename": "tests/compile-fail/function_calls/exported_symbol_bad_unwind1.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/41f33a64f878cb28567c2773906859ce8a0614e5/tests%2Fcompile-fail%2Ffunction_calls%2Fexported_symbol_bad_unwind1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41f33a64f878cb28567c2773906859ce8a0614e5/tests%2Fcompile-fail%2Ffunction_calls%2Fexported_symbol_bad_unwind1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Ffunction_calls%2Fexported_symbol_bad_unwind1.rs?ref=41f33a64f878cb28567c2773906859ce8a0614e5", "patch": "@@ -0,0 +1,15 @@\n+// compile-flags: -Zmiri-disable-abi-check\n+#![feature(c_unwind)]\n+\n+#[no_mangle]\n+extern \"C-unwind\" fn unwind() {\n+    panic!();\n+}\n+\n+fn main() {\n+    extern \"C\" {\n+        fn unwind();\n+    }\n+    unsafe { unwind() }\n+    //~^ ERROR unwinding past a stack frame that does not allow unwinding\n+}"}, {"sha": "85cca8f1a6bd3a08e3c4346f879a384f6d270cfa", "filename": "tests/compile-fail/function_calls/exported_symbol_bad_unwind2.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/41f33a64f878cb28567c2773906859ce8a0614e5/tests%2Fcompile-fail%2Ffunction_calls%2Fexported_symbol_bad_unwind2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41f33a64f878cb28567c2773906859ce8a0614e5/tests%2Fcompile-fail%2Ffunction_calls%2Fexported_symbol_bad_unwind2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Ffunction_calls%2Fexported_symbol_bad_unwind2.rs?ref=41f33a64f878cb28567c2773906859ce8a0614e5", "patch": "@@ -0,0 +1,19 @@\n+// revisions: extern_block definition both\n+#![feature(rustc_attrs, c_unwind)]\n+\n+#[cfg_attr(any(definition, both), rustc_allocator_nounwind)]\n+#[no_mangle]\n+extern \"C-unwind\" fn nounwind() {\n+    panic!();\n+}\n+\n+fn main() {\n+    extern \"C-unwind\" {\n+        #[cfg_attr(any(extern_block, both), rustc_allocator_nounwind)]\n+        fn nounwind();\n+    }\n+    unsafe { nounwind() }\n+    //[extern_block]~^ ERROR unwinding past a stack frame that does not allow unwinding\n+    //[definition]~^^ ERROR unwinding past a stack frame that does not allow unwinding\n+    //[both]~^^^ ERROR unwinding past a stack frame that does not allow unwinding\n+}"}, {"sha": "dfb378cef523472984f34b80137b2c4a39478376", "filename": "tests/compile-fail/function_calls/exported_symbol_bad_unwind3.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/41f33a64f878cb28567c2773906859ce8a0614e5/tests%2Fcompile-fail%2Ffunction_calls%2Fexported_symbol_bad_unwind3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41f33a64f878cb28567c2773906859ce8a0614e5/tests%2Fcompile-fail%2Ffunction_calls%2Fexported_symbol_bad_unwind3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Ffunction_calls%2Fexported_symbol_bad_unwind3.rs?ref=41f33a64f878cb28567c2773906859ce8a0614e5", "patch": "@@ -0,0 +1,16 @@\n+#![feature(unwind_attributes)]\n+#![feature(c_unwind)] // make sure it doesn't insert abort-on-unwind for the `#[unwind(allowed)]` function\n+\n+#[unwind(allowed)]\n+#[no_mangle]\n+extern \"C\" fn unwind() {\n+    panic!();\n+}\n+\n+fn main() {\n+    extern \"C\" {\n+        fn unwind();\n+    }\n+    unsafe { unwind() }\n+    //~^ ERROR unwinding past a stack frame that does not allow unwinding\n+}"}, {"sha": "105d98fc10a97b3e83fd0568e0b75cf481ada285", "filename": "tests/compile-fail/function_calls/exported_symbol_clashing.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/41f33a64f878cb28567c2773906859ce8a0614e5/tests%2Fcompile-fail%2Ffunction_calls%2Fexported_symbol_clashing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41f33a64f878cb28567c2773906859ce8a0614e5/tests%2Fcompile-fail%2Ffunction_calls%2Fexported_symbol_clashing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Ffunction_calls%2Fexported_symbol_clashing.rs?ref=41f33a64f878cb28567c2773906859ce8a0614e5", "patch": "@@ -0,0 +1,15 @@\n+#[no_mangle]\n+fn foo() {}\n+//~^ HELP then it's defined here again, in crate `exported_symbol_clashing`\n+\n+#[export_name = \"foo\"]\n+fn bar() {}\n+//~^ HELP it's first defined here, in crate `exported_symbol_clashing`\n+\n+fn main() {\n+    extern \"Rust\" {\n+        fn foo();\n+    }\n+    unsafe { foo() }\n+    //~^ ERROR multiple definitions of symbol `foo`\n+}"}, {"sha": "8fb364bb9bd104eb925fd98a7df1f9581297d75a", "filename": "tests/compile-fail/function_calls/exported_symbol_wrong_arguments.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/41f33a64f878cb28567c2773906859ce8a0614e5/tests%2Fcompile-fail%2Ffunction_calls%2Fexported_symbol_wrong_arguments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41f33a64f878cb28567c2773906859ce8a0614e5/tests%2Fcompile-fail%2Ffunction_calls%2Fexported_symbol_wrong_arguments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Ffunction_calls%2Fexported_symbol_wrong_arguments.rs?ref=41f33a64f878cb28567c2773906859ce8a0614e5", "patch": "@@ -0,0 +1,9 @@\n+#[no_mangle]\n+fn foo() {}\n+\n+fn main() {\n+    extern \"Rust\" {\n+        fn foo(_: i32);\n+    }\n+    unsafe { foo(1) } //~ ERROR calling a function with more arguments than it expected\n+}"}, {"sha": "3ffd506c94bb57df8b9c146ef93d3f0a2c59de4c", "filename": "tests/compile-fail/function_calls/exported_symbol_wrong_type.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/41f33a64f878cb28567c2773906859ce8a0614e5/tests%2Fcompile-fail%2Ffunction_calls%2Fexported_symbol_wrong_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41f33a64f878cb28567c2773906859ce8a0614e5/tests%2Fcompile-fail%2Ffunction_calls%2Fexported_symbol_wrong_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Ffunction_calls%2Fexported_symbol_wrong_type.rs?ref=41f33a64f878cb28567c2773906859ce8a0614e5", "patch": "@@ -0,0 +1,9 @@\n+#[no_mangle]\n+static FOO: () = ();\n+\n+fn main() {\n+    extern \"C\" {\n+        fn FOO();\n+    }\n+    unsafe { FOO() } //~ ERROR attempt to call an exported symbol that is not defined as a function\n+}"}, {"sha": "f77f892abc1c164007e4e94e852178e792135df0", "filename": "tests/compile-fail/panic/bad_miri_start_panic.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/41f33a64f878cb28567c2773906859ce8a0614e5/tests%2Fcompile-fail%2Fpanic%2Fbad_miri_start_panic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41f33a64f878cb28567c2773906859ce8a0614e5/tests%2Fcompile-fail%2Fpanic%2Fbad_miri_start_panic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fpanic%2Fbad_miri_start_panic.rs?ref=41f33a64f878cb28567c2773906859ce8a0614e5", "patch": "@@ -0,0 +1,10 @@\n+// compile-flags: -Zmiri-disable-abi-check\n+\n+extern \"C\" {\n+    fn miri_start_panic(payload: *mut u8) -> !;\n+}\n+\n+fn main() {\n+    unsafe { miri_start_panic(&mut 0) }\n+    //~^ ERROR unwinding past a stack frame that does not allow unwinding\n+}"}, {"sha": "7261b6658753a92b955827e6a12b34ab598f5bd9", "filename": "tests/compile-fail/panic/rustc_allocator_nounwind.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/41f33a64f878cb28567c2773906859ce8a0614e5/tests%2Fcompile-fail%2Fpanic%2Frustc_allocator_nounwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41f33a64f878cb28567c2773906859ce8a0614e5/tests%2Fcompile-fail%2Fpanic%2Frustc_allocator_nounwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fpanic%2Frustc_allocator_nounwind.rs?ref=41f33a64f878cb28567c2773906859ce8a0614e5", "patch": "@@ -0,0 +1,10 @@\n+#![feature(rustc_attrs, c_unwind)]\n+\n+#[rustc_allocator_nounwind]\n+extern \"C-unwind\" fn nounwind() {\n+    panic!();\n+}\n+\n+fn main() {\n+    nounwind(); //~ ERROR unwinding past a stack frame that does not allow unwinding\n+}"}, {"sha": "1f8554741376ba13e4f65f19fe24552fb0e5cb74", "filename": "tests/run-pass/function_calls/disable_abi_check.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/41f33a64f878cb28567c2773906859ce8a0614e5/tests%2Frun-pass%2Ffunction_calls%2Fdisable_abi_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41f33a64f878cb28567c2773906859ce8a0614e5/tests%2Frun-pass%2Ffunction_calls%2Fdisable_abi_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Ffunction_calls%2Fdisable_abi_check.rs?ref=41f33a64f878cb28567c2773906859ce8a0614e5", "previous_filename": "tests/run-pass/disable_abi_check.rs"}, {"sha": "7f359e80219fc75563206c90012fc6bfc6215b0d", "filename": "tests/run-pass/function_calls/exported_symbol.rs", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/41f33a64f878cb28567c2773906859ce8a0614e5/tests%2Frun-pass%2Ffunction_calls%2Fexported_symbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41f33a64f878cb28567c2773906859ce8a0614e5/tests%2Frun-pass%2Ffunction_calls%2Fexported_symbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Ffunction_calls%2Fexported_symbol.rs?ref=41f33a64f878cb28567c2773906859ce8a0614e5", "patch": "@@ -0,0 +1,44 @@\n+#![feature(rustc_attrs)]\n+\n+#[no_mangle]\n+extern \"C\" fn foo() -> i32 {\n+    -1\n+}\n+\n+#[export_name = \"bar\"]\n+fn bar() -> i32 {\n+    -2\n+}\n+\n+#[rustc_std_internal_symbol]\n+fn baz() -> i32 {\n+    -3\n+}\n+\n+// Make sure shims take precedence.\n+#[no_mangle]\n+extern \"C\" fn exit(_: i32) -> ! {\n+    unreachable!()\n+}\n+\n+#[no_mangle]\n+extern \"C\" fn ExitProcess(_: u32) -> ! {\n+    unreachable!()\n+}\n+\n+fn main() {\n+    // Repeat calls to make sure the `Instance` cache is not broken.\n+    for _ in 0..3 {\n+        extern \"C\" {\n+            fn foo() -> i32;\n+        }\n+        assert_eq!(unsafe { foo() }, -1);\n+        assert_eq!(unsafe { foo() }, -1);\n+        extern \"Rust\" {\n+            fn bar() -> i32;\n+            fn baz() -> i32;\n+        }\n+        assert_eq!(unsafe { bar() }, -2);\n+        assert_eq!(unsafe { baz() }, -3);\n+    }\n+}"}, {"sha": "73192707f1e47f434d4a3f3fb489a35c29596989", "filename": "tests/run-pass/function_calls/exported_symbol_good_unwind.rs", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/41f33a64f878cb28567c2773906859ce8a0614e5/tests%2Frun-pass%2Ffunction_calls%2Fexported_symbol_good_unwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41f33a64f878cb28567c2773906859ce8a0614e5/tests%2Frun-pass%2Ffunction_calls%2Fexported_symbol_good_unwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Ffunction_calls%2Fexported_symbol_good_unwind.rs?ref=41f33a64f878cb28567c2773906859ce8a0614e5", "patch": "@@ -0,0 +1,49 @@\n+// Make sure the workaround for \"crate ... required to be available in rlib format, but was not\n+// found in this form\" errors works without `-C prefer-dynamic` (`panic!` calls foreign function\n+// foreign function `__rust_start_panic`).\n+// no-prefer-dynamic\n+#![feature(c_unwind, unboxed_closures, unwind_attributes)]\n+\n+use std::panic;\n+\n+#[no_mangle]\n+#[unwind(allowed)]\n+extern \"C\" fn good_unwind_allowed() {\n+    panic!();\n+}\n+\n+#[no_mangle]\n+extern \"C-unwind\" fn good_unwind_c() {\n+    panic!();\n+}\n+\n+#[no_mangle]\n+fn good_unwind_rust() {\n+    panic!();\n+}\n+\n+// Diverging function calls are on a different code path.\n+#[no_mangle]\n+extern \"rust-call\" fn good_unwind_rust_call(_: ()) -> ! {\n+    panic!();\n+}\n+\n+fn main() -> ! {\n+    extern \"C\" {\n+        #[unwind(allowed)]\n+        fn good_unwind_allowed();\n+    }\n+    panic::catch_unwind(|| unsafe { good_unwind_allowed() }).unwrap_err();\n+    extern \"C-unwind\" {\n+        fn good_unwind_c();\n+    }\n+    panic::catch_unwind(|| unsafe { good_unwind_c() }).unwrap_err();\n+    extern \"Rust\" {\n+        fn good_unwind_rust();\n+    }\n+    panic::catch_unwind(|| unsafe { good_unwind_rust() }).unwrap_err();\n+    extern \"rust-call\" {\n+        fn good_unwind_rust_call(_: ()) -> !;\n+    }\n+    unsafe { good_unwind_rust_call(()) }\n+}"}, {"sha": "3347f00b65eabe3395a3175ee0ad8cca10bbac64", "filename": "tests/run-pass/function_calls/exported_symbol_good_unwind.stderr", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/41f33a64f878cb28567c2773906859ce8a0614e5/tests%2Frun-pass%2Ffunction_calls%2Fexported_symbol_good_unwind.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/41f33a64f878cb28567c2773906859ce8a0614e5/tests%2Frun-pass%2Ffunction_calls%2Fexported_symbol_good_unwind.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Ffunction_calls%2Fexported_symbol_good_unwind.stderr?ref=41f33a64f878cb28567c2773906859ce8a0614e5", "patch": "@@ -0,0 +1,5 @@\n+thread 'main' panicked at 'explicit panic', $DIR/exported_symbol_good_unwind.rs:12:5\n+note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n+thread 'main' panicked at 'explicit panic', $DIR/exported_symbol_good_unwind.rs:17:5\n+thread 'main' panicked at 'explicit panic', $DIR/exported_symbol_good_unwind.rs:22:5\n+thread 'main' panicked at 'explicit panic', $DIR/exported_symbol_good_unwind.rs:28:5"}, {"sha": "0e4ec5739a8a0765d77ba523fe8ec42fbabb687f", "filename": "tests/run-pass/function_calls/exported_symbol_unwind_allowed.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/41f33a64f878cb28567c2773906859ce8a0614e5/tests%2Frun-pass%2Ffunction_calls%2Fexported_symbol_unwind_allowed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41f33a64f878cb28567c2773906859ce8a0614e5/tests%2Frun-pass%2Ffunction_calls%2Fexported_symbol_unwind_allowed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Ffunction_calls%2Fexported_symbol_unwind_allowed.rs?ref=41f33a64f878cb28567c2773906859ce8a0614e5", "patch": "@@ -0,0 +1,15 @@\n+// compile-flags: -Zmiri-disable-abi-check\n+#![feature(unwind_attributes, c_unwind)]\n+\n+#[no_mangle]\n+extern \"C-unwind\" fn unwind() {\n+    panic!();\n+}\n+\n+fn main() {\n+    extern \"C\" {\n+        #[unwind(allowed)]\n+        fn unwind();\n+    }\n+    unsafe { unwind() }\n+}"}, {"sha": "14ee43950cec718e79e198a012cd2d0be7f173c8", "filename": "tests/run-pass/function_calls/exported_symbol_unwind_allowed.stderr", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41f33a64f878cb28567c2773906859ce8a0614e5/tests%2Frun-pass%2Ffunction_calls%2Fexported_symbol_unwind_allowed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/41f33a64f878cb28567c2773906859ce8a0614e5/tests%2Frun-pass%2Ffunction_calls%2Fexported_symbol_unwind_allowed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Ffunction_calls%2Fexported_symbol_unwind_allowed.stderr?ref=41f33a64f878cb28567c2773906859ce8a0614e5", "patch": "@@ -0,0 +1,2 @@\n+thread 'main' panicked at 'explicit panic', $DIR/exported_symbol_unwind_allowed.rs:6:5\n+note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace"}, {"sha": "dbc1c1631f13587a93f93b5ee4fc45dde1b8890f", "filename": "tests/run-pass/panic/good_unwind.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/41f33a64f878cb28567c2773906859ce8a0614e5/tests%2Frun-pass%2Fpanic%2Fgood_unwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41f33a64f878cb28567c2773906859ce8a0614e5/tests%2Frun-pass%2Fpanic%2Fgood_unwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fpanic%2Fgood_unwind.rs?ref=41f33a64f878cb28567c2773906859ce8a0614e5", "patch": "@@ -0,0 +1,27 @@\n+#![feature(c_unwind, unboxed_closures, unwind_attributes)]\n+\n+use std::panic;\n+\n+extern \"C-unwind\" fn good_unwind_c() {\n+    panic!();\n+}\n+\n+#[unwind(allowed)]\n+extern \"C\" fn good_unwind_allowed() {\n+    panic!();\n+}\n+\n+fn good_unwind_rust() {\n+    panic!();\n+}\n+\n+extern \"rust-call\" fn good_unwind_rust_call(_: ()) {\n+    panic!();\n+}\n+\n+fn main() {\n+    panic::catch_unwind(|| good_unwind_c()).unwrap_err();\n+    panic::catch_unwind(|| good_unwind_allowed()).unwrap_err();\n+    panic::catch_unwind(|| good_unwind_rust()).unwrap_err();\n+    good_unwind_rust_call(());\n+}"}, {"sha": "1cd361790b661596a609b8944c53b0cb241df0e6", "filename": "tests/run-pass/panic/good_unwind.stderr", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/41f33a64f878cb28567c2773906859ce8a0614e5/tests%2Frun-pass%2Fpanic%2Fgood_unwind.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/41f33a64f878cb28567c2773906859ce8a0614e5/tests%2Frun-pass%2Fpanic%2Fgood_unwind.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fpanic%2Fgood_unwind.stderr?ref=41f33a64f878cb28567c2773906859ce8a0614e5", "patch": "@@ -0,0 +1,5 @@\n+thread 'main' panicked at 'explicit panic', $DIR/good_unwind.rs:6:5\n+note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n+thread 'main' panicked at 'explicit panic', $DIR/good_unwind.rs:11:5\n+thread 'main' panicked at 'explicit panic', $DIR/good_unwind.rs:15:5\n+thread 'main' panicked at 'explicit panic', $DIR/good_unwind.rs:19:5"}]}