{"sha": "c1eb5828fafae326919c6999bfda075c87dcc296", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMxZWI1ODI4ZmFmYWUzMjY5MTljNjk5OWJmZGEwNzVjODdkY2MyOTY=", "commit": {"author": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-07-14T16:32:09Z"}, "committer": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-07-14T16:32:48Z"}, "message": "Fix suggestion spans for `NEEDLESS_RETURN`", "tree": {"sha": "2f2c34b853ffc352834428d251e3c9b226cb8039", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2f2c34b853ffc352834428d251e3c9b226cb8039"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c1eb5828fafae326919c6999bfda075c87dcc296", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQIcBAABCAAGBQJXh76yAAoJEF5CfHlMukXoGPsP/jwcY8l3WMO7XCagbdOyd5Fr\nQdGGBE78VZh92nx92JwxLp6HfzfByG/0LPLmZji7HOT/eXKthSQ8gsYA7e7HwJZc\n5VmXNikdGENLuGEH+0lRNaqKSVdwsJnokQKRvMB5xwZDvwVd4LkhVUmGLSjCzhQd\n5u8Y1/vc1Vc6EhA0x3ElZ8i7WwerktJX4gtU+bStIzKwrW1jedql+vW2D1/hPsbO\nZNTqsKMy39mNfp2ZYkUNhgNyQKLIaWtlA8ak52W9WkVd57VJXAXHMVaUwF2EOeyG\nn3L7nja7VGBFt/5HF92yWC/jS218VkQwMDuHIktDksbhbj87DXqTJIaxulQTIP52\nkewMenAcrTVBjjxMfxMg4U7DYhBdNnU6FgX09Bqq5a08WVrAQO3u4OF3NDj8zd9C\nCKW+4sHzAQ0HUKanJJqTETRPpjj5X+BMvn4pOzhtR8d9eoLei56IeHKv8EjvUk6A\nSKwjVQsLo4pQySnws1pwdzSiKCUh8YOPjmyi3j7VgNr2FoXv5uW1+LrT+G02CgGC\nKDzbi5xh1RP+znlJLiTEXtZq4My0URWousZ/RDf63mjtHODGAlwwInr9ztqXv59+\nsfcPpF7+9fJJEzdIHXzbDYFdjl74dZV+bTuFrjV2R9ERZVIF0MI8JezydmWl7/bs\nRifh9sQwyBSPEZ2YRR72\n=Gg6t\n-----END PGP SIGNATURE-----", "payload": "tree 2f2c34b853ffc352834428d251e3c9b226cb8039\nparent 3447bfccd98d13ff78fe04b4dbbc21fd0de20756\nauthor mcarton <cartonmartin+git@gmail.com> 1468513929 +0200\ncommitter mcarton <cartonmartin+git@gmail.com> 1468513968 +0200\n\nFix suggestion spans for `NEEDLESS_RETURN`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c1eb5828fafae326919c6999bfda075c87dcc296", "html_url": "https://github.com/rust-lang/rust/commit/c1eb5828fafae326919c6999bfda075c87dcc296", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c1eb5828fafae326919c6999bfda075c87dcc296/comments", "author": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3447bfccd98d13ff78fe04b4dbbc21fd0de20756", "url": "https://api.github.com/repos/rust-lang/rust/commits/3447bfccd98d13ff78fe04b4dbbc21fd0de20756", "html_url": "https://github.com/rust-lang/rust/commit/3447bfccd98d13ff78fe04b4dbbc21fd0de20756"}], "stats": {"total": 31, "additions": 15, "deletions": 16}, "files": [{"sha": "deea50f03039649a6fd1a2aabf6bd33fba375552", "filename": "clippy_lints/src/returns.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/c1eb5828fafae326919c6999bfda075c87dcc296/clippy_lints%2Fsrc%2Freturns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1eb5828fafae326919c6999bfda075c87dcc296/clippy_lints%2Fsrc%2Freturns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Freturns.rs?ref=c1eb5828fafae326919c6999bfda075c87dcc296", "patch": "@@ -39,19 +39,19 @@ impl ReturnPass {\n         if let Some(stmt) = block.stmts.last() {\n             match stmt.node {\n                 StmtKind::Expr(ref expr) | StmtKind::Semi(ref expr) => {\n-                    self.check_final_expr(cx, expr);\n+                    self.check_final_expr(cx, expr, Some(stmt.span));\n                 }\n                 _ => (),\n             }\n         }\n     }\n \n     // Check a the final expression in a block if it's a return.\n-    fn check_final_expr(&mut self, cx: &EarlyContext, expr: &Expr) {\n+    fn check_final_expr(&mut self, cx: &EarlyContext, expr: &Expr, span: Option<Span>) {\n         match expr.node {\n             // simple return is always \"bad\"\n             ExprKind::Ret(Some(ref inner)) => {\n-                self.emit_return_lint(cx, (expr.span, inner.span));\n+                self.emit_return_lint(cx, span.expect(\"`else return` is not possible\"), inner.span);\n             }\n             // a whole block? check it!\n             ExprKind::Block(ref block) => {\n@@ -62,25 +62,25 @@ impl ReturnPass {\n             // (except for unit type functions) so we don't match it\n             ExprKind::If(_, ref ifblock, Some(ref elsexpr)) => {\n                 self.check_block_return(cx, ifblock);\n-                self.check_final_expr(cx, elsexpr);\n+                self.check_final_expr(cx, elsexpr, None);\n             }\n             // a match expr, check all arms\n             ExprKind::Match(_, ref arms) => {\n                 for arm in arms {\n-                    self.check_final_expr(cx, &arm.body);\n+                    self.check_final_expr(cx, &arm.body, Some(arm.body.span));\n                 }\n             }\n             _ => (),\n         }\n     }\n \n-    fn emit_return_lint(&mut self, cx: &EarlyContext, spans: (Span, Span)) {\n-        if in_external_macro(cx, spans.1) {\n+    fn emit_return_lint(&mut self, cx: &EarlyContext, ret_span: Span, inner_span: Span) {\n+        if in_external_macro(cx, inner_span) {\n             return;\n         }\n-        span_lint_and_then(cx, NEEDLESS_RETURN, spans.0, \"unneeded return statement\", |db| {\n-            if let Some(snippet) = snippet_opt(cx, spans.1) {\n-                db.span_suggestion(spans.0, \"remove `return` as shown:\", snippet);\n+        span_lint_and_then(cx, NEEDLESS_RETURN, ret_span, \"unneeded return statement\", |db| {\n+            if let Some(snippet) = snippet_opt(cx, inner_span) {\n+                db.span_suggestion(ret_span, \"remove `return` as shown:\", snippet);\n             }\n         });\n     }"}, {"sha": "5a391a358b1891a15492dad6165df6119ea2ab38", "filename": "tests/compile-fail/needless_return.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c1eb5828fafae326919c6999bfda075c87dcc296/tests%2Fcompile-fail%2Fneedless_return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1eb5828fafae326919c6999bfda075c87dcc296/tests%2Fcompile-fail%2Fneedless_return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fneedless_return.rs?ref=c1eb5828fafae326919c6999bfda075c87dcc296", "patch": "@@ -37,12 +37,11 @@ fn test_if_block() -> bool {\n \n fn test_match(x: bool) -> bool {\n     match x {\n-        true => {\n-            return false;\n-            //~^ ERROR unneeded return statement\n-            //~| HELP remove `return` as shown\n-            //~| SUGGESTION false\n-        }\n+        true => return false,\n+        //~^ ERROR unneeded return statement\n+        //~| HELP remove `return` as shown\n+        //~| SUGGESTION false\n+\n         false => {\n             return true;\n             //~^ ERROR unneeded return statement"}]}