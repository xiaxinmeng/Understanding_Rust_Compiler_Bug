{"sha": "c8b088eb38128e8b0e50a550d4b89334574f1216", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM4YjA4OGViMzgxMjhlOGIwZTUwYTU1MGQ0Yjg5MzM0NTc0ZjEyMTY=", "commit": {"author": {"name": "Nick Hamann", "email": "nick@wabbo.org", "date": "2015-06-09T08:05:24Z"}, "committer": {"name": "Nick Hamann", "email": "nick@wabbo.org", "date": "2015-06-10T07:18:14Z"}, "message": "Add explanation for E0116 and update the error message.\n\nAlso updates the reference on this point.", "tree": {"sha": "90d328da78fde2be113b24ab7d31508da59e605d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/90d328da78fde2be113b24ab7d31508da59e605d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c8b088eb38128e8b0e50a550d4b89334574f1216", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c8b088eb38128e8b0e50a550d4b89334574f1216", "html_url": "https://github.com/rust-lang/rust/commit/c8b088eb38128e8b0e50a550d4b89334574f1216", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c8b088eb38128e8b0e50a550d4b89334574f1216/comments", "author": null, "committer": null, "parents": [{"sha": "172cd83490cc66065e72861aed53e3efec29b34f", "url": "https://api.github.com/repos/rust-lang/rust/commits/172cd83490cc66065e72861aed53e3efec29b34f", "html_url": "https://github.com/rust-lang/rust/commit/172cd83490cc66065e72861aed53e3efec29b34f"}], "stats": {"total": 37, "additions": 31, "deletions": 6}, "files": [{"sha": "2a0f7b659d168cfd7da5267ef4826fb6ff266a65", "filename": "src/doc/reference.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c8b088eb38128e8b0e50a550d4b89334574f1216/src%2Fdoc%2Freference.md", "raw_url": "https://github.com/rust-lang/rust/raw/c8b088eb38128e8b0e50a550d4b89334574f1216/src%2Fdoc%2Freference.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Freference.md?ref=c8b088eb38128e8b0e50a550d4b89334574f1216", "patch": "@@ -1550,7 +1550,7 @@ methods in such an implementation can only be used as direct calls on the\n values of the type that the implementation targets. In such an implementation,\n the trait type and `for` after `impl` are omitted. Such implementations are\n limited to nominal types (enums, structs), and the implementation must appear\n-in the same module or a sub-module as the `self` type:\n+in the same crate as the `self` type:\n \n ```\n struct Point {x: i32, y: i32}"}, {"sha": "cc03dffe3a02b6be7102102015e875939fff7d2e", "filename": "src/librustc_typeck/coherence/orphan.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c8b088eb38128e8b0e50a550d4b89334574f1216/src%2Flibrustc_typeck%2Fcoherence%2Forphan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8b088eb38128e8b0e50a550d4b89334574f1216/src%2Flibrustc_typeck%2Fcoherence%2Forphan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Forphan.rs?ref=c8b088eb38128e8b0e50a550d4b89334574f1216", "patch": "@@ -33,8 +33,8 @@ impl<'cx, 'tcx> OrphanChecker<'cx, 'tcx> {\n     fn check_def_id(&self, item: &ast::Item, def_id: ast::DefId) {\n         if def_id.krate != ast::LOCAL_CRATE {\n             span_err!(self.tcx.sess, item.span, E0116,\n-                      \"cannot associate methods with a type outside the \\\n-                       crate the type is defined in; define and implement \\\n+                      \"cannot define inherent `impl` for a type outside of the \\\n+                       crate where the type is defined; define and implement \\\n                        a trait or new type instead\");\n         }\n     }"}, {"sha": "c2cb55bb1f55936e07e5c9fded5caad32f478308", "filename": "src/librustc_typeck/diagnostics.rs", "status": "modified", "additions": 26, "deletions": 1, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/c8b088eb38128e8b0e50a550d4b89334574f1216/src%2Flibrustc_typeck%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8b088eb38128e8b0e50a550d4b89334574f1216/src%2Flibrustc_typeck%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fdiagnostics.rs?ref=c8b088eb38128e8b0e50a550d4b89334574f1216", "patch": "@@ -730,6 +730,32 @@ RFC. It is, however, [currently unimplemented][iss15872].\n [iss15872]: https://github.com/rust-lang/rust/issues/15872\n \"##,\n \n+E0116: r##\"\n+You can only define an inherent implementation for a type in the same crate\n+where the type was defined. For example, an `impl` block as below is not allowed\n+since `Vec` is defined in the standard library:\n+\n+```\n+impl Vec<u8> { ... } // error\n+```\n+\n+To fix this problem, you can do either of these things:\n+\n+ - define a trait that has the desired associated functions/types/constants and\n+   implement the trait for the type in question\n+ - define a new type wrapping the type and define an implementation on the new\n+   type\n+\n+Note that using the `type` keyword does not work here because `type` only\n+introduces a type alias:\n+\n+```\n+type Bytes = Vec<u8>;\n+\n+impl Bytes { ... } // error, same as above\n+```\n+\"##,\n+\n E0121: r##\"\n In order to be consistent with Rust's lack of global type inference, type\n placeholders are disallowed by design in item signatures.\n@@ -1232,7 +1258,6 @@ register_diagnostics! {\n     E0102,\n     E0103,\n     E0104,\n-    E0116,\n     E0117,\n     E0118,\n     E0119,"}, {"sha": "b1e4d06affe7d1c0d3aa14a220a80cae58b12048", "filename": "src/test/compile-fail/trait-or-new-type-instead.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c8b088eb38128e8b0e50a550d4b89334574f1216/src%2Ftest%2Fcompile-fail%2Ftrait-or-new-type-instead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8b088eb38128e8b0e50a550d4b89334574f1216/src%2Ftest%2Fcompile-fail%2Ftrait-or-new-type-instead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftrait-or-new-type-instead.rs?ref=c8b088eb38128e8b0e50a550d4b89334574f1216", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2012-2013 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2012-2015 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -9,7 +9,7 @@\n // except according to those terms.\n \n impl<T> Option<T> {\n-//~^ ERROR cannot associate methods with a type outside the crate the type is defined in\n+//~^ ERROR cannot define inherent `impl` for a type outside of the crate where the type is defined\n     pub fn foo(&self) { }\n }\n "}]}