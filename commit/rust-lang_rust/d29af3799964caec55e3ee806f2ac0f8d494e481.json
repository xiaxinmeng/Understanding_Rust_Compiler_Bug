{"sha": "d29af3799964caec55e3ee806f2ac0f8d494e481", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQyOWFmMzc5OTk2NGNhZWM1NWUzZWU4MDZmMmFjMGY4ZDQ5NGU0ODE=", "commit": {"author": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2017-08-28T00:41:16Z"}, "committer": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2017-08-28T00:41:16Z"}, "message": "Merge branch 'master' of https://github.com/rust-lang/rust into gen", "tree": {"sha": "0134ce33be6192b6e1f974fa6b7ad694067408b2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0134ce33be6192b6e1f974fa6b7ad694067408b2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d29af3799964caec55e3ee806f2ac0f8d494e481", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d29af3799964caec55e3ee806f2ac0f8d494e481", "html_url": "https://github.com/rust-lang/rust/commit/d29af3799964caec55e3ee806f2ac0f8d494e481", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d29af3799964caec55e3ee806f2ac0f8d494e481/comments", "author": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7c5780b3564d98aec130ee2f27368b116a3f1160", "url": "https://api.github.com/repos/rust-lang/rust/commits/7c5780b3564d98aec130ee2f27368b116a3f1160", "html_url": "https://github.com/rust-lang/rust/commit/7c5780b3564d98aec130ee2f27368b116a3f1160"}, {"sha": "e2668882406b68739c6ed33d420358d5d710e67b", "url": "https://api.github.com/repos/rust-lang/rust/commits/e2668882406b68739c6ed33d420358d5d710e67b", "html_url": "https://github.com/rust-lang/rust/commit/e2668882406b68739c6ed33d420358d5d710e67b"}], "stats": {"total": 2382, "additions": 1503, "deletions": 879}, "files": [{"sha": "f548d6694c80f88137e76a42b52c83ddfe27b8e2", "filename": "appveyor.yml", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d29af3799964caec55e3ee806f2ac0f8d494e481/appveyor.yml", "raw_url": "https://github.com/rust-lang/rust/raw/d29af3799964caec55e3ee806f2ac0f8d494e481/appveyor.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/appveyor.yml?ref=d29af3799964caec55e3ee806f2ac0f8d494e481", "patch": "@@ -145,7 +145,8 @@ install:\n   # - set PATH=%PATH%;%CD% -- this already happens above for sccache\n \n   # Install InnoSetup to get `iscc` used to produce installers\n-  - appveyor-retry choco install -y InnoSetup\n+  - appveyor-retry appveyor DownloadFile https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-08-22-is.exe\n+  - 2017-08-22-is.exe /VERYSILENT /SUPPRESSMSGBOXES /NORESTART /SP-\n   - set PATH=\"C:\\Program Files (x86)\\Inno Setup 5\";%PATH%\n \n   # Help debug some handle issues on AppVeyor"}, {"sha": "123c884585c19f276c7acc2d31968900eb55f6e4", "filename": "src/Cargo.lock", "status": "modified", "additions": 135, "deletions": 103, "changes": 238, "blob_url": "https://github.com/rust-lang/rust/blob/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FCargo.lock?ref=d29af3799964caec55e3ee806f2ac0f8d494e481", "patch": "@@ -94,7 +94,7 @@ dependencies = [\n  \"dbghelp-sys 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"kernel32-sys 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"libc 0.2.29 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-demangle 0.1.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-demangle 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"winapi 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n@@ -142,10 +142,10 @@ dependencies = [\n  \"lazy_static 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"libc 0.2.29 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"num_cpus 1.6.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde 1.0.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde_derive 1.0.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 1.0.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde_derive 1.0.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serde_json 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"toml 0.4.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"toml 0.4.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -161,9 +161,9 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n name = \"build-manifest\"\n version = \"0.1.0\"\n dependencies = [\n- \"serde 1.0.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde_derive 1.0.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"toml 0.4.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 1.0.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde_derive 1.0.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"toml 0.4.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -176,7 +176,7 @@ dependencies = [\n [[package]]\n name = \"cargo\"\n version = \"0.22.0\"\n-source = \"git+https://github.com/rust-lang/cargo#88aa6423a164774d09abc78a24e74e8e665f651b\"\n+source = \"git+https://github.com/rust-lang/cargo#bcf3997b1fa177afc5b6c632a6fbbf6cc75df427\"\n replace = \"cargo 0.22.0\"\n \n [[package]]\n@@ -187,6 +187,7 @@ dependencies = [\n  \"atty 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"bufstream 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"cargotest 0.1.0\",\n+ \"core-foundation 0.4.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"crates-io 0.11.0\",\n  \"crossbeam 0.2.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"curl 0.4.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -210,19 +211,20 @@ dependencies = [\n  \"log 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"miow 0.2.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"num_cpus 1.6.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"openssl 0.9.15 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"openssl 0.9.17 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"psapi-sys 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"same-file 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"scoped-tls 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"semver 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde 1.0.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde_derive 1.0.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 1.0.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde_derive 1.0.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serde_ignored 0.0.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serde_json 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"shell-escape 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"tar 0.4.13 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"tempdir 0.3.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"termcolor 0.3.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"toml 0.4.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"toml 0.4.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"url 1.5.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"winapi 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n@@ -231,22 +233,16 @@ dependencies = [\n name = \"cargotest\"\n version = \"0.1.0\"\n dependencies = [\n- \"bufstream 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"cargo 0.22.0\",\n  \"filetime 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"flate2 0.2.19 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"git2 0.6.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"hamcrest 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"hex 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"kernel32-sys 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.29 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde 1.0.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serde_json 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"tar 0.4.13 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"tempdir 0.3.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"url 1.5.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"winapi 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -260,16 +256,16 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n name = \"clap\"\n-version = \"2.25.1\"\n+version = \"2.26.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"ansi_term 0.9.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"atty 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"bitflags 0.9.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"strsim 0.6.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"term_size 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"textwrap 0.6.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"unicode-segmentation 1.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"textwrap 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"unicode-segmentation 1.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"unicode-width 0.1.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"vec_map 0.8.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"yaml-rust 0.3.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -323,14 +319,31 @@ dependencies = [\n  \"rand 0.0.0\",\n ]\n \n+[[package]]\n+name = \"core-foundation\"\n+version = \"0.4.4\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"core-foundation-sys 0.4.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.29 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"core-foundation-sys\"\n+version = \"0.4.4\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"libc 0.2.29 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n [[package]]\n name = \"crates-io\"\n version = \"0.11.0\"\n dependencies = [\n  \"curl 0.4.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"error-chain 0.11.0-rc.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde 1.0.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde_derive 1.0.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 1.0.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde_derive 1.0.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serde_json 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"url 1.5.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n@@ -348,8 +361,8 @@ dependencies = [\n  \"curl-sys 0.3.14 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"libc 0.2.29 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"openssl-probe 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"openssl-sys 0.9.15 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"socket2 0.2.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"openssl-sys 0.9.17 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"socket2 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"winapi 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n@@ -361,7 +374,7 @@ dependencies = [\n  \"gcc 0.3.51 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"libc 0.2.29 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"libz-sys 1.0.16 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"openssl-sys 0.9.15 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"openssl-sys 0.9.17 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"pkg-config 0.3.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"vcpkg 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"winapi 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -397,8 +410,8 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"lazy_static 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"regex 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde 1.0.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde_derive 1.0.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 1.0.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde_derive 1.0.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"strsim 0.6.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n@@ -472,6 +485,10 @@ version = \"0.1.0\"\n name = \"find_all_refs_no_cfg_test\"\n version = \"0.1.0\"\n \n+[[package]]\n+name = \"find_impls\"\n+version = \"0.1.0\"\n+\n [[package]]\n name = \"flate2\"\n version = \"0.2.19\"\n@@ -529,7 +546,7 @@ dependencies = [\n  \"libc 0.2.29 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"libgit2-sys 0.6.12 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"openssl-probe 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"openssl-sys 0.9.15 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"openssl-sys 0.9.17 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"url 1.5.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n@@ -588,7 +605,7 @@ dependencies = [\n  \"pest 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"quick-error 1.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"regex 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde 1.0.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 1.0.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serde_json 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n@@ -642,11 +659,23 @@ dependencies = [\n  \"walkdir 1.0.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n+[[package]]\n+name = \"infer_bin\"\n+version = \"0.1.0\"\n+\n+[[package]]\n+name = \"infer_custom_bin\"\n+version = \"0.1.0\"\n+\n+[[package]]\n+name = \"infer_lib\"\n+version = \"0.1.0\"\n+\n [[package]]\n name = \"installer\"\n version = \"0.0.0\"\n dependencies = [\n- \"clap 2.25.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"clap 2.26.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"error-chain 0.10.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"flate2 0.2.19 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"kernel32-sys 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -673,13 +702,13 @@ dependencies = [\n \n [[package]]\n name = \"jsonrpc-core\"\n-version = \"7.0.1\"\n+version = \"7.1.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"futures 0.1.14 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde 1.0.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde_derive 1.0.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 1.0.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde_derive 1.0.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serde_json 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n@@ -698,8 +727,8 @@ version = \"0.12.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"enum_primitive 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde 1.0.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde_derive 1.0.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 1.0.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde_derive 1.0.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serde_json 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"url 1.5.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"url_serde 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -733,7 +762,7 @@ dependencies = [\n  \"libc 0.2.29 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"libssh2-sys 0.2.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"libz-sys 1.0.16 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"openssl-sys 0.9.15 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"openssl-sys 0.9.17 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"pkg-config 0.3.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n@@ -745,7 +774,7 @@ dependencies = [\n  \"cmake 0.1.24 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"libc 0.2.29 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"libz-sys 1.0.16 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"openssl-sys 0.9.15 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"openssl-sys 0.9.17 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"pkg-config 0.3.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n@@ -771,7 +800,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n name = \"lzma-sys\"\n-version = \"0.1.7\"\n+version = \"0.1.8\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"filetime 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -789,16 +818,16 @@ name = \"mdbook\"\n version = \"0.0.22\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"clap 2.25.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"clap 2.26.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"env_logger 0.4.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"handlebars 0.26.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"open 1.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"pulldown-cmark 0.0.14 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"regex 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde 1.0.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 1.0.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serde_json 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"toml 0.4.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"toml 0.4.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -832,7 +861,7 @@ version = \"0.2.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"kernel32-sys 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"net2 0.2.30 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"net2 0.2.31 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"winapi 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"ws2_32-sys 0.2.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n@@ -843,7 +872,7 @@ version = \"0.1.0\"\n \n [[package]]\n name = \"net2\"\n-version = \"0.2.30\"\n+version = \"0.2.31\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"cfg-if 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -859,7 +888,7 @@ version = \"0.1.40\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"num-bigint 0.1.40 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"num-complex 0.1.39 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"num-complex 0.1.40 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"num-integer 0.1.35 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"num-iter 0.1.34 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"num-rational 0.1.39 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -879,7 +908,7 @@ dependencies = [\n \n [[package]]\n name = \"num-complex\"\n-version = \"0.1.39\"\n+version = \"0.1.40\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"num-traits 0.1.40 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -927,21 +956,25 @@ dependencies = [\n  \"libc 0.2.29 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n+[[package]]\n+name = \"omit_init_build\"\n+version = \"0.1.0\"\n+\n [[package]]\n name = \"open\"\n version = \"1.2.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n name = \"openssl\"\n-version = \"0.9.15\"\n+version = \"0.9.17\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"bitflags 0.9.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"foreign-types 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"lazy_static 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"libc 0.2.29 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"openssl-sys 0.9.15 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"openssl-sys 0.9.17 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -951,12 +984,13 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n name = \"openssl-sys\"\n-version = \"0.9.15\"\n+version = \"0.9.17\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"gcc 0.3.51 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"libc 0.2.29 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"pkg-config 0.3.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"vcpkg 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -1051,14 +1085,12 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n name = \"racer\"\n-version = \"2.0.9\"\n+version = \"2.0.10\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"clap 2.25.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"clap 2.26.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"env_logger 0.3.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"lazy_static 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"regex 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"syntex_errors 0.52.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"syntex_syntax 0.52.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"toml 0.2.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -1140,20 +1172,20 @@ version = \"0.1.0\"\n dependencies = [\n  \"cargo 0.22.0 (git+https://github.com/rust-lang/cargo)\",\n  \"env_logger 0.4.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"jsonrpc-core 7.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"jsonrpc-core 7.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"languageserver-types 0.12.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"lazy_static 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"racer 2.0.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"racer 2.0.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rls-analysis 0.6.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rls-data 0.10.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rls-span 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rls-vfs 0.4.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustfmt-nightly 0.2.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde 1.0.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde_derive 1.0.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustfmt-nightly 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 1.0.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde_derive 1.0.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serde_json 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"toml 0.4.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"toml 0.4.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"url 1.5.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"url_serde 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n@@ -1177,8 +1209,8 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"rls-span 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc-serialize 0.3.24 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde 1.0.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde_derive 1.0.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 1.0.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde_derive 1.0.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -1187,24 +1219,24 @@ version = \"0.4.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"rustc-serialize 0.3.24 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde 1.0.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde_derive 1.0.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 1.0.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde_derive 1.0.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"rls-vfs\"\n version = \"0.4.4\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"racer 2.0.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"racer 2.0.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rls-span 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"rustbook\"\n version = \"0.1.0\"\n dependencies = [\n- \"clap 2.25.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"clap 2.26.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"mdbook 0.0.22 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n@@ -1231,7 +1263,7 @@ dependencies = [\n \n [[package]]\n name = \"rustc-demangle\"\n-version = \"0.1.4\"\n+version = \"0.1.5\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n@@ -1295,7 +1327,6 @@ dependencies = [\n  \"graphviz 0.0.0\",\n  \"log 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc 0.0.0\",\n- \"rustc_data_structures 0.0.0\",\n  \"rustc_errors 0.0.0\",\n  \"rustc_mir 0.0.0\",\n  \"syntax 0.0.0\",\n@@ -1432,7 +1463,6 @@ dependencies = [\n  \"proc_macro 0.0.0\",\n  \"rustc 0.0.0\",\n  \"rustc_back 0.0.0\",\n- \"rustc_const_math 0.0.0\",\n  \"rustc_data_structures 0.0.0\",\n  \"rustc_errors 0.0.0\",\n  \"serialize 0.0.0\",\n@@ -1544,7 +1574,7 @@ dependencies = [\n  \"num_cpus 1.6.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"owning_ref 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc 0.0.0\",\n- \"rustc-demangle 0.1.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-demangle 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc_allocator 0.0.0\",\n  \"rustc_back 0.0.0\",\n  \"rustc_bitflags 0.0.0\",\n@@ -1573,6 +1603,7 @@ dependencies = [\n name = \"rustc_tsan\"\n version = \"0.0.0\"\n dependencies = [\n+ \"alloc 0.0.0\",\n  \"alloc_system 0.0.0\",\n  \"build_helper 0.1.0\",\n  \"cmake 0.1.24 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -1616,7 +1647,7 @@ dependencies = [\n \n [[package]]\n name = \"rustfmt-nightly\"\n-version = \"0.2.1\"\n+version = \"0.2.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"diff 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -1626,13 +1657,13 @@ dependencies = [\n  \"libc 0.2.29 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"regex 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde 1.0.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde_derive 1.0.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 1.0.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde_derive 1.0.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serde_json 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"strings 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"term 0.4.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"toml 0.4.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"unicode-segmentation 1.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"toml 0.4.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"unicode-segmentation 1.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"winapi 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n@@ -1661,7 +1692,7 @@ version = \"0.7.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"semver-parser 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde 1.0.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 1.0.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -1671,12 +1702,12 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n name = \"serde\"\n-version = \"1.0.10\"\n+version = \"1.0.11\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n name = \"serde_derive\"\n-version = \"1.0.10\"\n+version = \"1.0.11\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"quote 0.3.15 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -1698,7 +1729,7 @@ name = \"serde_ignored\"\n version = \"0.0.3\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"serde 1.0.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 1.0.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -1709,7 +1740,7 @@ dependencies = [\n  \"dtoa 0.4.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"itoa 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"num-traits 0.1.40 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde 1.0.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 1.0.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -1723,7 +1754,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n name = \"socket2\"\n-version = \"0.2.1\"\n+version = \"0.2.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"cfg-if 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -1827,7 +1858,6 @@ name = \"syntax_ext\"\n version = \"0.0.0\"\n dependencies = [\n  \"fmt_macros 0.0.0\",\n- \"log 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"proc_macro 0.0.0\",\n  \"rustc_errors 0.0.0\",\n  \"syntax 0.0.0\",\n@@ -1937,7 +1967,7 @@ dependencies = [\n \n [[package]]\n name = \"textwrap\"\n-version = \"0.6.0\"\n+version = \"0.7.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"term_size 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -1984,10 +2014,10 @@ dependencies = [\n \n [[package]]\n name = \"toml\"\n-version = \"0.4.2\"\n+version = \"0.4.5\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"serde 1.0.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 1.0.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -2010,7 +2040,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n name = \"unicode-segmentation\"\n-version = \"1.1.0\"\n+version = \"1.2.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n@@ -2058,7 +2088,7 @@ name = \"url_serde\"\n version = \"0.2.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"serde 1.0.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 1.0.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"url 1.5.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n@@ -2147,7 +2177,7 @@ name = \"xz2\"\n version = \"0.1.3\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"lzma-sys 0.1.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"lzma-sys 0.1.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -2170,8 +2200,10 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum bufstream 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f2f382711e76b9de6c744cc00d0497baba02fb00a787f088c879f01d09468e32\"\n \"checksum cargo 0.22.0 (git+https://github.com/rust-lang/cargo)\" = \"<none>\"\n \"checksum cfg-if 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d4c819a1287eb618df47cc647173c5c4c66ba19d888a6e50d605672aed3140de\"\n-\"checksum clap 2.25.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7f1aabf260a8f3fefa8871f16b531038c98dd9eab1cfa2c575e78c459abfa3a0\"\n+\"checksum clap 2.26.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"2267a8fdd4dce6956ba6649e130f62fb279026e5e84b92aa939ac8f85ce3f9f0\"\n \"checksum cmake 0.1.24 (registry+https://github.com/rust-lang/crates.io-index)\" = \"b8ebbb35d3dc9cd09497168f33de1acb79b265d350ab0ac34133b98f8509af1f\"\n+\"checksum core-foundation 0.4.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"5909502e547762013619f4c4e01cc7393c20fe2d52d7fa471c1210adb2320dc7\"\n+\"checksum core-foundation-sys 0.4.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"bc9fb3d6cb663e6fd7cf1c63f9b144ee2b1e4a78595a0451dd34bff85b9a3387\"\n \"checksum crossbeam 0.2.10 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0c5ea215664ca264da8a9d9c3be80d2eaf30923c259d03e870388eb927508f97\"\n \"checksum curl 0.4.8 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7034c534a1d7d22f7971d6088aa9d281d219ef724026c3428092500f41ae9c2c\"\n \"checksum curl-sys 0.3.14 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d5481162dc4f424d088581db2f979fa7d4c238fe9794595de61d8d7522e277de\"\n@@ -2205,7 +2237,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum ignore 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"b3fcaf2365eb14b28ec7603c98c06cc531f19de9eb283d89a3dff8417c8c99f5\"\n \"checksum itoa 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"eb2f404fbc66fd9aac13e998248505e7ecb2ad8e44ab6388684c5fb11c6c251c\"\n \"checksum jobserver 0.1.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"443ae8bc0af6c106e6e8b77e04684faecc1a5ce94e058f4c2b0a037b0ea1b133\"\n-\"checksum jsonrpc-core 7.0.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"da622868a84d3f4fd897f6408ba6714aabf663302802358564b384157c1a5bfa\"\n+\"checksum jsonrpc-core 7.1.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"903e5eee845f3d83c1436d12848d97b1247cf850ff06a8e1db2f1ce3543af2cf\"\n \"checksum kernel32-sys 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7507624b29483431c0ba2d82aece8ca6cdba9382bff4ddd0f7490560c056098d\"\n \"checksum languageserver-types 0.12.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d52e477b23bf52cd3ca0f9fc6c5d14be954eec97e3b9cdfbd962d911bd533caf\"\n \"checksum lazy_static 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3b37545ab726dd833ec6420aaba8231c5b320814b9029ad585555d2a03e94fbf\"\n@@ -2214,26 +2246,26 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum libssh2-sys 0.2.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0db4ec23611747ef772db1c4d650f8bd762f07b461727ec998f953c614024b75\"\n \"checksum libz-sys 1.0.16 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3fdd64ef8ee652185674455c1d450b83cbc8ad895625d543b5324d923f82e4d8\"\n \"checksum log 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\" = \"880f77541efa6e5cc74e76910c9884d9859683118839d6a1dc3b11e63512565b\"\n-\"checksum lzma-sys 0.1.7 (registry+https://github.com/rust-lang/crates.io-index)\" = \"013fa6506eb7d26040c46dab9ecb7ccb4e2896b5bf24a9d65932501ea9f67af8\"\n+\"checksum lzma-sys 0.1.8 (registry+https://github.com/rust-lang/crates.io-index)\" = \"66b2e318eb97ab84f05725471f90c52a09c964053a5899a13fd0165acc26d00b\"\n \"checksum matches 0.1.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"100aabe6b8ff4e4a7e32c1c13523379802df0772b82466207ac25b013f193376\"\n \"checksum mdbook 0.0.22 (registry+https://github.com/rust-lang/crates.io-index)\" = \"22911d86cde6f80fa9f0fb2a68bbbde85d97af4fe0ce267141c83a4187d28700\"\n \"checksum memchr 0.1.11 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d8b629fb514376c675b98c1421e80b151d3817ac42d7c667717d282761418d20\"\n \"checksum memchr 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"1dbccc0e46f1ea47b9f17e6d67c5a96bd27030519c519c9c91327e31275a47b4\"\n \"checksum miniz-sys 0.1.9 (registry+https://github.com/rust-lang/crates.io-index)\" = \"28eaee17666671fa872e567547e8428e83308ebe5808cdf6a0e28397dbe2c726\"\n \"checksum miow 0.2.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"8c1f2f3b1cf331de6896aabf6e9d55dca90356cc9960cca7eaaf408a355ae919\"\n-\"checksum net2 0.2.30 (registry+https://github.com/rust-lang/crates.io-index)\" = \"94101fd932816f97eb9a5116f6c1a11511a1fed7db21c5ccd823b2dc11abf566\"\n+\"checksum net2 0.2.31 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3a80f842784ef6c9a958b68b7516bc7e35883c614004dd94959a4dca1b716c09\"\n \"checksum num 0.1.40 (registry+https://github.com/rust-lang/crates.io-index)\" = \"a311b77ebdc5dd4cf6449d81e4135d9f0e3b153839ac90e648a8ef538f923525\"\n \"checksum num-bigint 0.1.40 (registry+https://github.com/rust-lang/crates.io-index)\" = \"8fd0f8dbb4c0960998958a796281d88c16fbe68d87b1baa6f31e2979e81fd0bd\"\n-\"checksum num-complex 0.1.39 (registry+https://github.com/rust-lang/crates.io-index)\" = \"eb24db7f1904e67a5dfe5f7f62b82f5c963e0f777b23f98cde9c5094fc4fa179\"\n+\"checksum num-complex 0.1.40 (registry+https://github.com/rust-lang/crates.io-index)\" = \"503e668405c5492d67cf662a81e05be40efe2e6bcf10f7794a07bd9865e704e6\"\n \"checksum num-integer 0.1.35 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d1452e8b06e448a07f0e6ebb0bb1d92b8890eea63288c0b627331d53514d0fba\"\n \"checksum num-iter 0.1.34 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7485fcc84f85b4ecd0ea527b14189281cf27d60e583ae65ebc9c088b13dffe01\"\n \"checksum num-rational 0.1.39 (registry+https://github.com/rust-lang/crates.io-index)\" = \"288629c76fac4b33556f4b7ab57ba21ae202da65ba8b77466e6d598e31990790\"\n \"checksum num-traits 0.1.40 (registry+https://github.com/rust-lang/crates.io-index)\" = \"99843c856d68d8b4313b03a17e33c4bb42ae8f6610ea81b28abe076ac721b9b0\"\n \"checksum num_cpus 1.6.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"aec53c34f2d0247c5ca5d32cca1478762f301740468ee9ee6dcb7a0dd7a0c584\"\n \"checksum open 1.2.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3478ed1686bd1300c8a981a940abc92b06fac9cbef747f4c668d4e032ff7b842\"\n-\"checksum openssl 0.9.15 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f776f1d8af832fd2c637ee182c801e8f7ea8895718a2be9914cca001f6e2c40a\"\n+\"checksum openssl 0.9.17 (registry+https://github.com/rust-lang/crates.io-index)\" = \"085aaedcc89a2fac1eb2bc19cd66f29d4ea99fec60f82a5f3a88a6be7dbd90b5\"\n \"checksum openssl-probe 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d98df0270d404ccd3c050a41d579c52d1db15375168bb3471e04ec0f5f378daf\"\n-\"checksum openssl-sys 0.9.15 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ad95f8160d1c150c4f44d4c4959732e048ac046c37f597fe362f8bf57561ffb4\"\n+\"checksum openssl-sys 0.9.17 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7e3a9845a4c9fdb321931868aae5549e96bb7b979bf9af7de03603d74691b5f3\"\n \"checksum owning_ref 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"cdf84f41639e037b484f93433aa3897863b561ed65c6e59c7073d7c561710f37\"\n \"checksum percent-encoding 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"de154f638187706bde41d9b4738748933d64e6b37bdbffc0b47a97d16a6ae356\"\n \"checksum pest 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0a6dda33d67c26f0aac90d324ab2eb7239c819fc7b2552fe9faa4fe88441edc8\"\n@@ -2243,7 +2275,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum quick-error 1.2.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3c36987d4978eb1be2e422b1e0423a557923a5c3e7e6f31d5699e9aafaefa469\"\n \"checksum quote 0.2.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"4c5cf478fe1006dbcc72567121d23dbdae5f1632386068c5c86ff4f645628504\"\n \"checksum quote 0.3.15 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7a6e920b65c65f10b2ae65c831a81a073a89edd28c7cce89475bff467ab4167a\"\n-\"checksum racer 2.0.9 (registry+https://github.com/rust-lang/crates.io-index)\" = \"9079a128fdb6f0c8850010e1478b215d4c00134654bf995bfda41824951ce9bd\"\n+\"checksum racer 2.0.10 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f120c7510ef7aff254aeb06067fb6fac573ec96a1660e194787cf9dced412bf0\"\n \"checksum rand 0.3.15 (registry+https://github.com/rust-lang/crates.io-index)\" = \"022e0636ec2519ddae48154b028864bdce4eaf7d35226ab8e65c611be97b189d\"\n \"checksum regex 0.1.80 (registry+https://github.com/rust-lang/crates.io-index)\" = \"4fd4ace6a8cf7860714a2c2280d6c1f7e6a413486c13298bbc86fd3da019402f\"\n \"checksum regex 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"1731164734096285ec2a5ec7fea5248ae2f5485b3feeb0115af4fda2183b2d1b\"\n@@ -2253,21 +2285,21 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum rls-data 0.10.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"11d339f1888e33e74d8032de0f83c40b2bdaaaf04a8cfc03b32186c3481fb534\"\n \"checksum rls-span 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"5d7c7046dc6a92f2ae02ed302746db4382e75131b9ce20ce967259f6b5867a6a\"\n \"checksum rls-vfs 0.4.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ffd34691a510938bb67fe0444fb363103c73ffb31c121d1e16bc92d8945ea8ff\"\n-\"checksum rustc-demangle 0.1.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3058a43ada2c2d0b92b3ae38007a2d0fa5e9db971be260e0171408a4ff471c95\"\n+\"checksum rustc-demangle 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"aee45432acc62f7b9a108cc054142dac51f979e69e71ddce7d6fc7adf29e817e\"\n \"checksum rustc-serialize 0.3.24 (registry+https://github.com/rust-lang/crates.io-index)\" = \"dcf128d1287d2ea9d80910b5f1120d0b8eede3fbf1abe91c40d39ea7d51e6fda\"\n-\"checksum rustfmt-nightly 0.2.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"aa1ffc66e1e1786355f22e8a958a57bd67fbf9564f522f87f31de9586715f8f6\"\n+\"checksum rustfmt-nightly 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"6eea0d0590ae793fc4d281df56e01dc7531575c8ed9a72fadf5fdc7305a0d32f\"\n \"checksum same-file 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d931a44fdaa43b8637009e7632a02adc4f2b2e0733c08caa4cf00e8da4a117a7\"\n \"checksum scoped-tls 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f417c22df063e9450888a7561788e9bd46d3bb3c1466435b4eccb903807f147d\"\n \"checksum scopeguard 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"59a076157c1e2dc561d8de585151ee6965d910dd4dcb5dabb7ae3e83981a6c57\"\n \"checksum semver 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3fdd61b85a0fa777f7fb7c454b9189b2941b110d1385ce84d7f76efdf1606a85\"\n \"checksum semver-parser 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"388a1df253eca08550bef6c72392cfe7c30914bf41df5269b68cbd6ff8f570a3\"\n-\"checksum serde 1.0.10 (registry+https://github.com/rust-lang/crates.io-index)\" = \"433d7d9f8530d5a939ad5e0e72a6243d2e42a24804f70bf592c679363dcacb2f\"\n-\"checksum serde_derive 1.0.10 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7b707cf0d4cab852084f573058def08879bb467fda89d99052485e7d00edd624\"\n+\"checksum serde 1.0.11 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f7726f29ddf9731b17ff113c461e362c381d9d69433f79de4f3dd572488823e9\"\n+\"checksum serde_derive 1.0.11 (registry+https://github.com/rust-lang/crates.io-index)\" = \"cf823e706be268e73e7747b147aa31c8f633ab4ba31f115efb57e5047c3a76dd\"\n \"checksum serde_derive_internals 0.15.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"37aee4e0da52d801acfbc0cc219eb1eda7142112339726e427926a6f6ee65d3a\"\n \"checksum serde_ignored 0.0.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"c10e798e4405d7dcec3658989e35ee6706f730a9ed7c1184d5ebd84317e82f46\"\n \"checksum serde_json 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"48b04779552e92037212c3615370f6bd57a40ebba7f20e554ff9f55e41a69a7b\"\n \"checksum shell-escape 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"dd5cc96481d54583947bfe88bf30c23d53f883c6cd0145368b69989d97b84ef8\"\n-\"checksum socket2 0.2.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"12cdbddbaa27bf94cc194b8e37f5811db6fe83cea96cf99cf1f8e92b65a41371\"\n+\"checksum socket2 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"4daf80fcf54186fac4fe049e0b39d36a5cfde69a11a06413e61e77f553cccf9a\"\n \"checksum stable_deref_trait 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"15132e0e364248108c5e2c02e3ab539be8d6f5d52a01ca9bbf27ed657316f02b\"\n \"checksum strings 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"da75d8bf2c4d210d63dd09581a041b036001f9f6e03d9b151dbff810fb7ba26a\"\n \"checksum strsim 0.6.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"b4d15c810519a91cf877e7e36e63fe068815c678181439f2f29e2562147c3694\"\n@@ -2282,16 +2314,16 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum term 0.4.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"fa63644f74ce96fbeb9b794f66aff2a52d601cbd5e80f4b97123e3899f4570f1\"\n \"checksum term_size 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"e2b6b55df3198cc93372e85dd2ed817f0e38ce8cc0f22eb32391bfad9c4bf209\"\n \"checksum termcolor 0.3.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"9a5193a56b8d82014662c4b933dea6bec851daf018a2b01722e007daaf5f9dca\"\n-\"checksum textwrap 0.6.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f86300c3e7416ee233abd7cda890c492007a3980f941f79185c753a701257167\"\n+\"checksum textwrap 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f728584ea33b0ad19318e20557cb0a39097751dbb07171419673502f848c7af6\"\n \"checksum thread-id 2.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"a9539db560102d1cef46b8b78ce737ff0bb64e7e18d35b2a5688f7d097d0ff03\"\n \"checksum thread_local 0.2.7 (registry+https://github.com/rust-lang/crates.io-index)\" = \"8576dbbfcaef9641452d5cf0df9b0e7eeab7694956dd33bb61515fb8f18cfdd5\"\n \"checksum thread_local 0.3.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"1697c4b57aeeb7a536b647165a2825faddffb1d3bad386d507709bd51a90bb14\"\n \"checksum toml 0.2.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"736b60249cb25337bc196faa43ee12c705e426f3d55c214d73a4e7be06f92cb4\"\n-\"checksum toml 0.4.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"b0601da6c97135c8d330c7a13a013ca6cd4143221b01de2f8d4edc50a9e551c7\"\n+\"checksum toml 0.4.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"a7540f4ffc193e0d3c94121edb19b055670d369f77d5804db11ae053a45b6e7e\"\n \"checksum typed-arena 1.3.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"5934776c3ac1bea4a9d56620d6bf2d483b20d394e49581db40f187e1118ff667\"\n \"checksum unicode-bidi 0.3.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"49f2bd0c6468a8230e1db229cff8029217cf623c767ea5d60bfbd42729ea54d5\"\n \"checksum unicode-normalization 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"51ccda9ef9efa3f7ef5d91e8f9b83bbe6955f9bf86aec89d5cce2c874625920f\"\n-\"checksum unicode-segmentation 1.1.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"18127285758f0e2c6cf325bb3f3d138a12fee27de4f23e146cd6a179f26c2cf3\"\n+\"checksum unicode-segmentation 1.2.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"a8083c594e02b8ae1654ae26f0ade5158b119bd88ad0e8227a5d8fcd72407946\"\n \"checksum unicode-width 0.1.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"bf3a113775714a22dcb774d8ea3655c53a32debae63a063acc00a91cc586245f\"\n \"checksum unicode-xid 0.0.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"36dff09cafb4ec7c8cf0023eb0b686cb6ce65499116a12201c9e11840ca01beb\"\n \"checksum unicode-xid 0.0.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"8c1f860d7d29cf02cb2f3f359fd35991af3d30bac52c57d265a3c461074cb4dc\""}, {"sha": "ffec3eb075500fb89cf19177f7fda1d6958f1b1a", "filename": "src/Cargo.toml", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FCargo.toml?ref=d29af3799964caec55e3ee806f2ac0f8d494e481", "patch": "@@ -32,6 +32,11 @@ members = [\n   \"tools/rls/test_data/multiple_bins\",\n   \"tools/rls/test_data/bin_lib\",\n   \"tools/rls/test_data/reformat_with_range\",\n+  \"tools/rls/test_data/find_impls\",\n+  \"tools/rls/test_data/infer_bin\",\n+  \"tools/rls/test_data/infer_custom_bin\",\n+  \"tools/rls/test_data/infer_lib\",\n+  \"tools/rls/test_data/omit_init_build\",\n ]\n \n # Curiously, compiletest will segfault if compiled with opt-level=3 on 64-bit"}, {"sha": "54208d8bb57a623cfada3ec171e9ed4515fb5df0", "filename": "src/bootstrap/sanity.rs", "status": "modified", "additions": 21, "deletions": 4, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Fbootstrap%2Fsanity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Fbootstrap%2Fsanity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fsanity.rs?ref=d29af3799964caec55e3ee806f2ac0f8d494e481", "patch": "@@ -93,10 +93,27 @@ pub fn check(build: &mut Build) {\n     }\n \n     // Ninja is currently only used for LLVM itself.\n-    // Some Linux distros rename `ninja` to `ninja-build`.\n-    // CMake can work with either binary name.\n-    if building_llvm && build.config.ninja && cmd_finder.maybe_have(\"ninja-build\").is_none() {\n-        cmd_finder.must_have(\"ninja\");\n+    if building_llvm {\n+        if build.config.ninja {\n+            // Some Linux distros rename `ninja` to `ninja-build`.\n+            // CMake can work with either binary name.\n+            if cmd_finder.maybe_have(\"ninja-build\").is_none() {\n+                cmd_finder.must_have(\"ninja\");\n+            }\n+        }\n+\n+        // If ninja isn't enabled but we're building for MSVC then we try\n+        // doubly hard to enable it. It was realized in #43767 that the msbuild\n+        // CMake generator for MSVC doesn't respect configuration options like\n+        // disabling LLVM assertions, which can often be quite important!\n+        //\n+        // In these cases we automatically enable Ninja if we find it in the\n+        // environment.\n+        if !build.config.ninja && build.config.build.contains(\"msvc\") {\n+            if cmd_finder.maybe_have(\"ninja\").is_some() {\n+                build.config.ninja = true;\n+            }\n+        }\n     }\n \n     build.config.python = build.config.python.take().map(|p| cmd_finder.must_have(p))"}, {"sha": "49d07d28d3c8e17431529b02271fa4d5534c0252", "filename": "src/ci/docker/arm-android/Dockerfile", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Fci%2Fdocker%2Farm-android%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Fci%2Fdocker%2Farm-android%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Farm-android%2FDockerfile?ref=d29af3799964caec55e3ee806f2ac0f8d494e481", "patch": "@@ -3,9 +3,6 @@ FROM ubuntu:16.04\n COPY scripts/android-base-apt-get.sh /scripts/\n RUN sh /scripts/android-base-apt-get.sh\n \n-COPY scripts/dumb-init.sh /scripts/\n-RUN sh /scripts/dumb-init.sh\n-\n COPY scripts/android-ndk.sh /scripts/\n RUN . /scripts/android-ndk.sh && \\\n     download_and_make_toolchain android-ndk-r13b-linux-x86_64.zip arm 9\n@@ -38,4 +35,4 @@ COPY scripts/sccache.sh /scripts/\n RUN sh /scripts/sccache.sh\n \n COPY scripts/android-start-emulator.sh /scripts/\n-ENTRYPOINT [\"/usr/bin/dumb-init\", \"--\", \"/scripts/android-start-emulator.sh\"]\n+ENTRYPOINT [\"/scripts/android-start-emulator.sh\"]"}, {"sha": "191f8e3a2895d738e3147206ae7db9173ad26cfe", "filename": "src/ci/docker/armhf-gnu/Dockerfile", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Fci%2Fdocker%2Farmhf-gnu%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Fci%2Fdocker%2Farmhf-gnu%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Farmhf-gnu%2FDockerfile?ref=d29af3799964caec55e3ee806f2ac0f8d494e481", "patch": "@@ -73,14 +73,9 @@ RUN arm-linux-gnueabihf-gcc addentropy.c -o rootfs/addentropy -static\n # TODO: What is this?!\n RUN curl -O http://ftp.nl.debian.org/debian/dists/jessie/main/installer-armhf/current/images/device-tree/vexpress-v2p-ca15-tc1.dtb\n \n-COPY scripts/dumb-init.sh /scripts/\n-RUN sh /scripts/dumb-init.sh\n-\n COPY scripts/sccache.sh /scripts/\n RUN sh /scripts/sccache.sh\n \n-ENTRYPOINT [\"/usr/bin/dumb-init\", \"--\"]\n-\n ENV RUST_CONFIGURE_ARGS \\\n       --target=arm-unknown-linux-gnueabihf \\\n       --qemu-armhf-rootfs=/tmp/rootfs"}, {"sha": "28caf1fb57a487acef872c34f999765814f31a7a", "filename": "src/ci/docker/asmjs/Dockerfile", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Fci%2Fdocker%2Fasmjs%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Fci%2Fdocker%2Fasmjs%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fasmjs%2FDockerfile?ref=d29af3799964caec55e3ee806f2ac0f8d494e481", "patch": "@@ -13,9 +13,6 @@ RUN apt-get update && apt-get install -y --no-install-recommends \\\n   gdb \\\n   xz-utils\n \n-COPY scripts/dumb-init.sh /scripts/\n-RUN sh /scripts/dumb-init.sh\n-\n COPY scripts/emscripten.sh /scripts/\n RUN bash /scripts/emscripten.sh\n \n@@ -35,5 +32,3 @@ ENV SCRIPT python2.7 ../x.py test --target $TARGETS\n \n COPY scripts/sccache.sh /scripts/\n RUN sh /scripts/sccache.sh\n-\n-ENTRYPOINT [\"/usr/bin/dumb-init\", \"--\"]"}, {"sha": "a83bbe9c60e8df278101259ac280cf76939a243c", "filename": "src/ci/docker/cross/Dockerfile", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Fci%2Fdocker%2Fcross%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Fci%2Fdocker%2Fcross%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fcross%2FDockerfile?ref=d29af3799964caec55e3ee806f2ac0f8d494e481", "patch": "@@ -21,9 +21,6 @@ RUN apt-get update && apt-get install -y --no-install-recommends \\\n   libssl-dev \\\n   pkg-config\n \n-COPY scripts/dumb-init.sh /scripts/\n-RUN sh /scripts/dumb-init.sh\n-\n WORKDIR /tmp\n \n COPY cross/build-rumprun.sh /tmp/\n@@ -71,5 +68,3 @@ ENV SCRIPT python2.7 ../x.py dist --target $TARGETS\n # sccache\n COPY scripts/sccache.sh /scripts/\n RUN sh /scripts/sccache.sh\n-\n-ENTRYPOINT [\"/usr/bin/dumb-init\", \"--\"]"}, {"sha": "9a0e45312235e6d7c737db65619acc183e6eb8ce", "filename": "src/ci/docker/disabled/aarch64-gnu/Dockerfile", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Fci%2Fdocker%2Fdisabled%2Faarch64-gnu%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Fci%2Fdocker%2Fdisabled%2Faarch64-gnu%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdisabled%2Faarch64-gnu%2FDockerfile?ref=d29af3799964caec55e3ee806f2ac0f8d494e481", "patch": "@@ -70,14 +70,9 @@ RUN chmod +x rootfs/etc/init.d/rcS\n COPY scripts/qemu-bare-bones-addentropy.c /tmp/addentropy.c\n RUN aarch64-linux-gnu-gcc addentropy.c -o rootfs/addentropy -static\n \n-COPY scripts/dumb-init.sh /scripts/\n-RUN sh /scripts/dumb-init.sh\n-\n COPY scripts/sccache.sh /scripts/\n RUN sh /scripts/sccache.sh\n \n-ENTRYPOINT [\"/usr/bin/dumb-init\", \"--\"]\n-\n ENV RUST_CONFIGURE_ARGS \\\n       --target=aarch64-unknown-linux-gnu \\\n       --qemu-aarch64-rootfs=/tmp/rootfs"}, {"sha": "20d823a3d7338d031803b4022a6e6ed25d156c39", "filename": "src/ci/docker/disabled/dist-aarch64-android/Dockerfile", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Fci%2Fdocker%2Fdisabled%2Fdist-aarch64-android%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Fci%2Fdocker%2Fdisabled%2Fdist-aarch64-android%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdisabled%2Fdist-aarch64-android%2FDockerfile?ref=d29af3799964caec55e3ee806f2ac0f8d494e481", "patch": "@@ -3,9 +3,6 @@ FROM ubuntu:16.04\n COPY scripts/android-base-apt-get.sh /scripts/\n RUN sh /scripts/android-base-apt-get.sh\n \n-COPY scripts/dumb-init.sh /scripts/\n-RUN sh /scripts/dumb-init.sh\n-\n COPY scripts/android-ndk.sh /scripts/\n RUN . /scripts/android-ndk.sh && \\\n     download_and_make_toolchain android-ndk-r13b-linux-x86_64.zip arm64 21\n@@ -28,5 +25,3 @@ ENV SCRIPT python2.7 ../x.py dist --target $HOSTS --host $HOSTS\n \n COPY scripts/sccache.sh /scripts/\n RUN sh /scripts/sccache.sh\n-\n-ENTRYPOINT [\"/usr/bin/dumb-init\", \"--\"]"}, {"sha": "3435d641a13c58d4348e8582f08795d1395391a6", "filename": "src/ci/docker/disabled/dist-armv7-android/Dockerfile", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Fci%2Fdocker%2Fdisabled%2Fdist-armv7-android%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Fci%2Fdocker%2Fdisabled%2Fdist-armv7-android%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdisabled%2Fdist-armv7-android%2FDockerfile?ref=d29af3799964caec55e3ee806f2ac0f8d494e481", "patch": "@@ -3,9 +3,6 @@ FROM ubuntu:16.04\n COPY scripts/android-base-apt-get.sh /scripts/\n RUN sh /scripts/android-base-apt-get.sh\n \n-COPY scripts/dumb-init.sh /scripts/\n-RUN sh /scripts/dumb-init.sh\n-\n COPY scripts/android-ndk.sh /scripts/\n RUN . /scripts/android-ndk.sh && \\\n     download_ndk android-ndk-r13b-linux-x86_64.zip && \\\n@@ -46,5 +43,3 @@ ENV SCRIPT \\\n \n COPY scripts/sccache.sh /scripts/\n RUN sh /scripts/sccache.sh\n-\n-ENTRYPOINT [\"/usr/bin/dumb-init\", \"--\"]"}, {"sha": "4bb7053760f9c3ec7f8f349a6a752cded0fd1cf2", "filename": "src/ci/docker/disabled/dist-i686-android/Dockerfile", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Fci%2Fdocker%2Fdisabled%2Fdist-i686-android%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Fci%2Fdocker%2Fdisabled%2Fdist-i686-android%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdisabled%2Fdist-i686-android%2FDockerfile?ref=d29af3799964caec55e3ee806f2ac0f8d494e481", "patch": "@@ -3,9 +3,6 @@ FROM ubuntu:16.04\n COPY scripts/android-base-apt-get.sh /scripts/\n RUN sh /scripts/android-base-apt-get.sh\n \n-COPY scripts/dumb-init.sh /scripts/\n-RUN sh /scripts/dumb-init.sh\n-\n COPY scripts/android-ndk.sh /scripts/\n RUN . /scripts/android-ndk.sh && \\\n     download_ndk android-ndk-r13b-linux-x86_64.zip && \\\n@@ -46,5 +43,3 @@ ENV SCRIPT \\\n \n COPY scripts/sccache.sh /scripts/\n RUN sh /scripts/sccache.sh\n-\n-ENTRYPOINT [\"/usr/bin/dumb-init\", \"--\"]"}, {"sha": "525b218417b67dcbb0559e9a2a4f63797e2b12d8", "filename": "src/ci/docker/disabled/dist-x86_64-android/Dockerfile", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Fci%2Fdocker%2Fdisabled%2Fdist-x86_64-android%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Fci%2Fdocker%2Fdisabled%2Fdist-x86_64-android%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdisabled%2Fdist-x86_64-android%2FDockerfile?ref=d29af3799964caec55e3ee806f2ac0f8d494e481", "patch": "@@ -3,9 +3,6 @@ FROM ubuntu:16.04\n COPY scripts/android-base-apt-get.sh /scripts/\n RUN sh /scripts/android-base-apt-get.sh\n \n-COPY scripts/dumb-init.sh /scripts/\n-RUN sh /scripts/dumb-init.sh\n-\n COPY scripts/android-ndk.sh /scripts/\n RUN . /scripts/android-ndk.sh && \\\n     download_and_make_toolchain android-ndk-r13b-linux-x86_64.zip x86_64 21\n@@ -28,5 +25,3 @@ ENV SCRIPT python2.7 ../x.py dist --target $HOSTS --host $HOSTS\n \n COPY scripts/sccache.sh /scripts/\n RUN sh /scripts/sccache.sh\n-\n-ENTRYPOINT [\"/usr/bin/dumb-init\", \"--\"]"}, {"sha": "ed19939545f69b6290e64844ba14cccfc9f015b9", "filename": "src/ci/docker/disabled/dist-x86_64-redox/Dockerfile", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Fci%2Fdocker%2Fdisabled%2Fdist-x86_64-redox%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Fci%2Fdocker%2Fdisabled%2Fdist-x86_64-redox%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdisabled%2Fdist-x86_64-redox%2FDockerfile?ref=d29af3799964caec55e3ee806f2ac0f8d494e481", "patch": "@@ -3,11 +3,6 @@ FROM ubuntu:16.04\n COPY scripts/cross-apt-packages.sh /scripts/\n RUN sh /scripts/cross-apt-packages.sh\n \n-COPY scripts/dumb-init.sh /scripts/\n-RUN sh /scripts/dumb-init.sh\n-\n-ENTRYPOINT [\"/usr/bin/dumb-init\", \"--\"]\n-\n COPY scripts/crosstool-ng.sh /scripts/\n RUN sh /scripts/crosstool-ng.sh\n "}, {"sha": "6323369421bb44fb2b527ec46d30efe7eb959795", "filename": "src/ci/docker/disabled/wasm32-exp/Dockerfile", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Fci%2Fdocker%2Fdisabled%2Fwasm32-exp%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Fci%2Fdocker%2Fdisabled%2Fwasm32-exp%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdisabled%2Fwasm32-exp%2FDockerfile?ref=d29af3799964caec55e3ee806f2ac0f8d494e481", "patch": "@@ -15,10 +15,6 @@ RUN apt-get update && apt-get install -y --no-install-recommends \\\n   jq \\\n   bzip2\n \n-# dumb-init\n-COPY scripts/dumb-init.sh /scripts/\n-RUN sh /scripts/dumb-init.sh\n-\n # emscripten\n COPY scripts/emscripten-wasm.sh /scripts/\n COPY disabled/wasm32-exp/node.sh /usr/local/bin/node\n@@ -37,6 +33,3 @@ ENV TARGETS=wasm32-experimental-emscripten\n ENV RUST_CONFIGURE_ARGS --target=$TARGETS --experimental-targets=WebAssembly\n \n ENV SCRIPT python2.7 ../x.py test --target $TARGETS\n-\n-# init\n-ENTRYPOINT [\"/usr/bin/dumb-init\", \"--\"]"}, {"sha": "7f6f8ae08827d8f88f80f1d087ccbedb34aa10a5", "filename": "src/ci/docker/disabled/wasm32/Dockerfile", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Fci%2Fdocker%2Fdisabled%2Fwasm32%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Fci%2Fdocker%2Fdisabled%2Fwasm32%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdisabled%2Fwasm32%2FDockerfile?ref=d29af3799964caec55e3ee806f2ac0f8d494e481", "patch": "@@ -13,9 +13,6 @@ RUN apt-get update && apt-get install -y --no-install-recommends \\\n   gdb \\\n   xz-utils\n \n-COPY scripts/dumb-init.sh /scripts/\n-RUN sh /scripts/dumb-init.sh\n-\n # emscripten\n COPY scripts/emscripten.sh /scripts/\n RUN bash /scripts/emscripten.sh\n@@ -36,5 +33,3 @@ ENV TARGETS=wasm32-unknown-emscripten\n ENV RUST_CONFIGURE_ARGS --target=$TARGETS\n \n ENV SCRIPT python2.7 ../x.py test --target $TARGETS\n-\n-ENTRYPOINT [\"/usr/bin/dumb-init\", \"--\"]"}, {"sha": "841d3012125f6895ef11aab20110599f2d989833", "filename": "src/ci/docker/dist-aarch64-linux/Dockerfile", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Fci%2Fdocker%2Fdist-aarch64-linux%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Fci%2Fdocker%2Fdist-aarch64-linux%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-aarch64-linux%2FDockerfile?ref=d29af3799964caec55e3ee806f2ac0f8d494e481", "patch": "@@ -3,11 +3,6 @@ FROM ubuntu:16.04\n COPY scripts/cross-apt-packages.sh /scripts/\n RUN sh /scripts/cross-apt-packages.sh\n \n-COPY scripts/dumb-init.sh /scripts/\n-RUN sh /scripts/dumb-init.sh\n-\n-ENTRYPOINT [\"/usr/bin/dumb-init\", \"--\"]\n-\n # Ubuntu 16.04 (this container) ships with make 4, but something in the\n # toolchains we build below chokes on that, so go back to make 3\n COPY scripts/make3.sh /scripts/"}, {"sha": "a36f7fc1ac5288b6c329af7e1fceea197ac35a98", "filename": "src/ci/docker/dist-android/Dockerfile", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Fci%2Fdocker%2Fdist-android%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Fci%2Fdocker%2Fdist-android%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-android%2FDockerfile?ref=d29af3799964caec55e3ee806f2ac0f8d494e481", "patch": "@@ -3,9 +3,6 @@ FROM ubuntu:16.04\n COPY scripts/android-base-apt-get.sh /scripts/\n RUN sh /scripts/android-base-apt-get.sh\n \n-COPY scripts/dumb-init.sh /scripts/\n-RUN sh /scripts/dumb-init.sh\n-\n # ndk\n COPY scripts/android-ndk.sh /scripts/\n RUN . /scripts/android-ndk.sh && \\\n@@ -36,5 +33,3 @@ ENV SCRIPT python2.7 ../x.py dist --target $TARGETS\n \n COPY scripts/sccache.sh /scripts/\n RUN sh /scripts/sccache.sh\n-\n-ENTRYPOINT [\"/usr/bin/dumb-init\", \"--\"]"}, {"sha": "ecd5090ea05fc96bed2c7587f03b0a4855fa9e48", "filename": "src/ci/docker/dist-arm-linux/Dockerfile", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Fci%2Fdocker%2Fdist-arm-linux%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Fci%2Fdocker%2Fdist-arm-linux%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-arm-linux%2FDockerfile?ref=d29af3799964caec55e3ee806f2ac0f8d494e481", "patch": "@@ -3,11 +3,6 @@ FROM ubuntu:16.04\n COPY scripts/cross-apt-packages.sh /scripts/\n RUN sh /scripts/cross-apt-packages.sh\n \n-COPY scripts/dumb-init.sh /scripts/\n-RUN sh /scripts/dumb-init.sh\n-\n-ENTRYPOINT [\"/usr/bin/dumb-init\", \"--\"]\n-\n # Ubuntu 16.04 (this container) ships with make 4, but something in the\n # toolchains we build below chokes on that, so go back to make 3\n COPY scripts/make3.sh /scripts/"}, {"sha": "5bbd17bd41420ff5552de135ea2a46b0764d81ae", "filename": "src/ci/docker/dist-armhf-linux/Dockerfile", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Fci%2Fdocker%2Fdist-armhf-linux%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Fci%2Fdocker%2Fdist-armhf-linux%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-armhf-linux%2FDockerfile?ref=d29af3799964caec55e3ee806f2ac0f8d494e481", "patch": "@@ -3,11 +3,6 @@ FROM ubuntu:16.04\n COPY scripts/cross-apt-packages.sh /scripts/\n RUN sh /scripts/cross-apt-packages.sh\n \n-COPY scripts/dumb-init.sh /scripts/\n-RUN sh /scripts/dumb-init.sh\n-\n-ENTRYPOINT [\"/usr/bin/dumb-init\", \"--\"]\n-\n # Ubuntu 16.04 (this container) ships with make 4, but something in the\n # toolchains we build below chokes on that, so go back to make 3\n COPY scripts/make3.sh /scripts/"}, {"sha": "ea9034d7178853509150f250ef0ed3a6560ad35a", "filename": "src/ci/docker/dist-armv7-linux/Dockerfile", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Fci%2Fdocker%2Fdist-armv7-linux%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Fci%2Fdocker%2Fdist-armv7-linux%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-armv7-linux%2FDockerfile?ref=d29af3799964caec55e3ee806f2ac0f8d494e481", "patch": "@@ -3,11 +3,6 @@ FROM ubuntu:16.04\n COPY scripts/cross-apt-packages.sh /scripts/\n RUN sh /scripts/cross-apt-packages.sh\n \n-COPY scripts/dumb-init.sh /scripts/\n-RUN sh /scripts/dumb-init.sh\n-\n-ENTRYPOINT [\"/usr/bin/dumb-init\", \"--\"]\n-\n # Ubuntu 16.04 (this container) ships with make 4, but something in the\n # toolchains we build below chokes on that, so go back to make 3\n COPY scripts/make3.sh /scripts/"}, {"sha": "e18cb453baf6f3282b54eb613b9be551fbc1a950", "filename": "src/ci/docker/dist-fuchsia/Dockerfile", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Fci%2Fdocker%2Fdist-fuchsia%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Fci%2Fdocker%2Fdist-fuchsia%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-fuchsia%2FDockerfile?ref=d29af3799964caec55e3ee806f2ac0f8d494e481", "patch": "@@ -24,11 +24,6 @@ WORKDIR /tmp\n COPY dist-fuchsia/shared.sh dist-fuchsia/build-toolchain.sh dist-fuchsia/compiler-rt-dso-handle.patch /tmp/\n RUN /tmp/build-toolchain.sh\n \n-COPY scripts/dumb-init.sh /scripts/\n-RUN sh /scripts/dumb-init.sh\n-\n-ENTRYPOINT [\"/usr/bin/dumb-init\", \"--\"]\n-\n COPY scripts/sccache.sh /scripts/\n RUN sh /scripts/sccache.sh\n "}, {"sha": "efde3ff52962c55e709c3d878e2c07b77c6f39b3", "filename": "src/ci/docker/dist-i586-gnu-i686-musl/Dockerfile", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Fci%2Fdocker%2Fdist-i586-gnu-i686-musl%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Fci%2Fdocker%2Fdist-i586-gnu-i686-musl%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-i586-gnu-i686-musl%2FDockerfile?ref=d29af3799964caec55e3ee806f2ac0f8d494e481", "patch": "@@ -20,11 +20,6 @@ WORKDIR /build/\n COPY dist-i586-gnu-i686-musl/musl-libunwind-patch.patch dist-i586-gnu-i686-musl/build-musl.sh /build/\n RUN sh /build/build-musl.sh && rm -rf /build\n \n-COPY scripts/dumb-init.sh /scripts/\n-RUN sh /scripts/dumb-init.sh\n-\n-ENTRYPOINT [\"/usr/bin/dumb-init\", \"--\"]\n-\n COPY scripts/sccache.sh /scripts/\n RUN sh /scripts/sccache.sh\n "}, {"sha": "b82d227b3ef2e8e682d02d13164240646942a11d", "filename": "src/ci/docker/dist-i686-freebsd/Dockerfile", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Fci%2Fdocker%2Fdist-i686-freebsd%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Fci%2Fdocker%2Fdist-i686-freebsd%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-i686-freebsd%2FDockerfile?ref=d29af3799964caec55e3ee806f2ac0f8d494e481", "patch": "@@ -19,11 +19,6 @@ RUN apt-get update && apt-get install -y --no-install-recommends \\\n COPY dist-i686-freebsd/build-toolchain.sh /tmp/\n RUN /tmp/build-toolchain.sh i686\n \n-COPY scripts/dumb-init.sh /scripts/\n-RUN sh /scripts/dumb-init.sh\n-\n-ENTRYPOINT [\"/usr/bin/dumb-init\", \"--\"]\n-\n COPY scripts/sccache.sh /scripts/\n RUN sh /scripts/sccache.sh\n "}, {"sha": "a5d776af19dafce1a5c48d287c209792757c0aca", "filename": "src/ci/docker/dist-i686-linux/Dockerfile", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Fci%2Fdocker%2Fdist-i686-linux%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Fci%2Fdocker%2Fdist-i686-linux%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-i686-linux%2FDockerfile?ref=d29af3799964caec55e3ee806f2ac0f8d494e481", "patch": "@@ -76,11 +76,6 @@ RUN ./build-cmake.sh\n COPY dist-i686-linux/build-headers.sh /tmp/\n RUN ./build-headers.sh\n \n-RUN curl -Lo /rustroot/dumb-init \\\n-      https://github.com/Yelp/dumb-init/releases/download/v1.2.0/dumb-init_1.2.0_amd64 && \\\n-      chmod +x /rustroot/dumb-init\n-ENTRYPOINT [\"/rustroot/dumb-init\", \"--\"]\n-\n COPY scripts/sccache.sh /scripts/\n RUN sh /scripts/sccache.sh\n "}, {"sha": "94a3cf8a38201c5d4cc70821d433ae95b65d014e", "filename": "src/ci/docker/dist-mips-linux/Dockerfile", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Fci%2Fdocker%2Fdist-mips-linux%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Fci%2Fdocker%2Fdist-mips-linux%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-mips-linux%2FDockerfile?ref=d29af3799964caec55e3ee806f2ac0f8d494e481", "patch": "@@ -17,14 +17,9 @@ RUN apt-get update && apt-get install -y --no-install-recommends \\\n   pkg-config\n \n \n-COPY scripts/dumb-init.sh /scripts/\n-RUN sh /scripts/dumb-init.sh\n-\n COPY scripts/sccache.sh /scripts/\n RUN sh /scripts/sccache.sh\n \n-ENTRYPOINT [\"/usr/bin/dumb-init\", \"--\"]\n-\n ENV HOSTS=mips-unknown-linux-gnu\n \n ENV RUST_CONFIGURE_ARGS --host=$HOSTS --enable-extended"}, {"sha": "0b0dfff1fe362092e2dc05389d74d2b458fadddb", "filename": "src/ci/docker/dist-mips64-linux/Dockerfile", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Fci%2Fdocker%2Fdist-mips64-linux%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Fci%2Fdocker%2Fdist-mips64-linux%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-mips64-linux%2FDockerfile?ref=d29af3799964caec55e3ee806f2ac0f8d494e481", "patch": "@@ -16,14 +16,9 @@ RUN apt-get update && apt-get install -y --no-install-recommends \\\n   libssl-dev \\\n   pkg-config\n \n-COPY scripts/dumb-init.sh /scripts/\n-RUN sh /scripts/dumb-init.sh\n-\n COPY scripts/sccache.sh /scripts/\n RUN sh /scripts/sccache.sh\n \n-ENTRYPOINT [\"/usr/bin/dumb-init\", \"--\"]\n-\n ENV HOSTS=mips64-unknown-linux-gnuabi64\n \n ENV RUST_CONFIGURE_ARGS --host=$HOSTS --enable-extended"}, {"sha": "1810b1cdc5ab762994c7161de94dcc2314e59bba", "filename": "src/ci/docker/dist-mips64el-linux/Dockerfile", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Fci%2Fdocker%2Fdist-mips64el-linux%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Fci%2Fdocker%2Fdist-mips64el-linux%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-mips64el-linux%2FDockerfile?ref=d29af3799964caec55e3ee806f2ac0f8d494e481", "patch": "@@ -17,14 +17,9 @@ RUN apt-get update && apt-get install -y --no-install-recommends \\\n   pkg-config\n \n \n-COPY scripts/dumb-init.sh /scripts/\n-RUN sh /scripts/dumb-init.sh\n-\n COPY scripts/sccache.sh /scripts/\n RUN sh /scripts/sccache.sh\n \n-ENTRYPOINT [\"/usr/bin/dumb-init\", \"--\"]\n-\n ENV HOSTS=mips64el-unknown-linux-gnuabi64\n \n ENV RUST_CONFIGURE_ARGS --host=$HOSTS --enable-extended"}, {"sha": "f5be074847586f6ffb9ca4ed337250f96740d6c6", "filename": "src/ci/docker/dist-mipsel-linux/Dockerfile", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Fci%2Fdocker%2Fdist-mipsel-linux%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Fci%2Fdocker%2Fdist-mipsel-linux%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-mipsel-linux%2FDockerfile?ref=d29af3799964caec55e3ee806f2ac0f8d494e481", "patch": "@@ -16,14 +16,9 @@ RUN apt-get update && apt-get install -y --no-install-recommends \\\n   libssl-dev \\\n   pkg-config\n \n-COPY scripts/dumb-init.sh /scripts/\n-RUN sh /scripts/dumb-init.sh\n-\n COPY scripts/sccache.sh /scripts/\n RUN sh /scripts/sccache.sh\n \n-ENTRYPOINT [\"/usr/bin/dumb-init\", \"--\"]\n-\n ENV HOSTS=mipsel-unknown-linux-gnu\n \n ENV RUST_CONFIGURE_ARGS --host=$HOSTS --enable-extended"}, {"sha": "14ce3654fce7fc5011f1612984e111f13d726207", "filename": "src/ci/docker/dist-powerpc-linux/Dockerfile", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Fci%2Fdocker%2Fdist-powerpc-linux%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Fci%2Fdocker%2Fdist-powerpc-linux%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-powerpc-linux%2FDockerfile?ref=d29af3799964caec55e3ee806f2ac0f8d494e481", "patch": "@@ -3,11 +3,6 @@ FROM ubuntu:16.04\n COPY scripts/cross-apt-packages.sh /scripts/\n RUN sh /scripts/cross-apt-packages.sh\n \n-COPY scripts/dumb-init.sh /scripts/\n-RUN sh /scripts/dumb-init.sh\n-\n-ENTRYPOINT [\"/usr/bin/dumb-init\", \"--\"]\n-\n # Ubuntu 16.04 (this container) ships with make 4, but something in the\n # toolchains we build below chokes on that, so go back to make 3\n COPY scripts/make3.sh /scripts/"}, {"sha": "1f6e83e2f49e59fd2746fd04dd6f39197bad00f5", "filename": "src/ci/docker/dist-powerpc64-linux/Dockerfile", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Fci%2Fdocker%2Fdist-powerpc64-linux%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Fci%2Fdocker%2Fdist-powerpc64-linux%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-powerpc64-linux%2FDockerfile?ref=d29af3799964caec55e3ee806f2ac0f8d494e481", "patch": "@@ -3,10 +3,6 @@ FROM ubuntu:16.04\n COPY scripts/cross-apt-packages.sh /scripts/\n RUN sh /scripts/cross-apt-packages.sh\n \n-COPY scripts/dumb-init.sh /scripts/\n-RUN sh /scripts/dumb-init.sh\n-\n-ENTRYPOINT [\"/usr/bin/dumb-init\", \"--\"]\n \n # Ubuntu 16.04 (this container) ships with make 4, but something in the\n # toolchains we build below chokes on that, so go back to make 3"}, {"sha": "d4677e180609cfcc3a1a71d8e6a3ffa641f2f0a0", "filename": "src/ci/docker/dist-powerpc64le-linux/Dockerfile", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Fci%2Fdocker%2Fdist-powerpc64le-linux%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Fci%2Fdocker%2Fdist-powerpc64le-linux%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-powerpc64le-linux%2FDockerfile?ref=d29af3799964caec55e3ee806f2ac0f8d494e481", "patch": "@@ -3,11 +3,6 @@ FROM ubuntu:16.04\n COPY scripts/cross-apt-packages.sh /scripts/\n RUN sh /scripts/cross-apt-packages.sh\n \n-COPY scripts/dumb-init.sh /scripts/\n-RUN sh /scripts/dumb-init.sh\n-\n-ENTRYPOINT [\"/usr/bin/dumb-init\", \"--\"]\n-\n # Ubuntu 16.04 (this container) ships with make 4, but something in the\n # toolchains we build below chokes on that, so go back to make 3\n COPY scripts/make3.sh /scripts/"}, {"sha": "39478e92f7c9ff097cffff8ee3ecfb1bef0750fa", "filename": "src/ci/docker/dist-s390x-linux/Dockerfile", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Fci%2Fdocker%2Fdist-s390x-linux%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Fci%2Fdocker%2Fdist-s390x-linux%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-s390x-linux%2FDockerfile?ref=d29af3799964caec55e3ee806f2ac0f8d494e481", "patch": "@@ -3,11 +3,6 @@ FROM ubuntu:16.04\n COPY scripts/cross-apt-packages.sh /scripts/\n RUN sh /scripts/cross-apt-packages.sh\n \n-COPY scripts/dumb-init.sh /scripts/\n-RUN sh /scripts/dumb-init.sh\n-\n-ENTRYPOINT [\"/usr/bin/dumb-init\", \"--\"]\n-\n # Ubuntu 16.04 (this container) ships with make 4, but something in the\n # toolchains we build below chokes on that, so go back to make 3\n COPY scripts/make3.sh /scripts/"}, {"sha": "b7c00df4db2420f1f1cfe7acf20ac1b89aad3b35", "filename": "src/ci/docker/dist-x86_64-freebsd/Dockerfile", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Fci%2Fdocker%2Fdist-x86_64-freebsd%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Fci%2Fdocker%2Fdist-x86_64-freebsd%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-x86_64-freebsd%2FDockerfile?ref=d29af3799964caec55e3ee806f2ac0f8d494e481", "patch": "@@ -19,11 +19,6 @@ RUN apt-get update && apt-get install -y --no-install-recommends \\\n COPY dist-x86_64-freebsd/build-toolchain.sh /tmp/\n RUN /tmp/build-toolchain.sh x86_64\n \n-COPY scripts/dumb-init.sh /scripts/\n-RUN sh /scripts/dumb-init.sh\n-\n-ENTRYPOINT [\"/usr/bin/dumb-init\", \"--\"]\n-\n COPY scripts/sccache.sh /scripts/\n RUN sh /scripts/sccache.sh\n "}, {"sha": "a954fd86a2440657b6dc24121f0f5c74acf7ba3e", "filename": "src/ci/docker/dist-x86_64-linux/Dockerfile", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Fci%2Fdocker%2Fdist-x86_64-linux%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Fci%2Fdocker%2Fdist-x86_64-linux%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-x86_64-linux%2FDockerfile?ref=d29af3799964caec55e3ee806f2ac0f8d494e481", "patch": "@@ -76,11 +76,6 @@ RUN ./build-cmake.sh\n COPY dist-x86_64-linux/build-headers.sh /tmp/\n RUN ./build-headers.sh\n \n-RUN curl -Lo /rustroot/dumb-init \\\n-      https://github.com/Yelp/dumb-init/releases/download/v1.2.0/dumb-init_1.2.0_amd64 && \\\n-      chmod +x /rustroot/dumb-init\n-ENTRYPOINT [\"/rustroot/dumb-init\", \"--\"]\n-\n COPY scripts/sccache.sh /scripts/\n RUN sh /scripts/sccache.sh\n "}, {"sha": "91ed6bfe1f63d3300392fde5bdec6e187c5d4217", "filename": "src/ci/docker/dist-x86_64-musl/Dockerfile", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Fci%2Fdocker%2Fdist-x86_64-musl%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Fci%2Fdocker%2Fdist-x86_64-musl%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-x86_64-musl%2FDockerfile?ref=d29af3799964caec55e3ee806f2ac0f8d494e481", "patch": "@@ -20,11 +20,6 @@ WORKDIR /build/\n COPY dist-x86_64-musl/build-musl.sh /build/\n RUN sh /build/build-musl.sh && rm -rf /build\n \n-COPY scripts/dumb-init.sh /scripts/\n-RUN sh /scripts/dumb-init.sh\n-\n-ENTRYPOINT [\"/usr/bin/dumb-init\", \"--\"]\n-\n COPY scripts/sccache.sh /scripts/\n RUN sh /scripts/sccache.sh\n "}, {"sha": "4fd2503c31bb6f9d07200dd379658530217de572", "filename": "src/ci/docker/dist-x86_64-netbsd/Dockerfile", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Fci%2Fdocker%2Fdist-x86_64-netbsd%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Fci%2Fdocker%2Fdist-x86_64-netbsd%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-x86_64-netbsd%2FDockerfile?ref=d29af3799964caec55e3ee806f2ac0f8d494e481", "patch": "@@ -3,11 +3,6 @@ FROM ubuntu:16.04\n COPY scripts/cross-apt-packages.sh /scripts/\n RUN sh /scripts/cross-apt-packages.sh\n \n-COPY scripts/dumb-init.sh /scripts/\n-RUN sh /scripts/dumb-init.sh\n-\n-ENTRYPOINT [\"/usr/bin/dumb-init\", \"--\"]\n-\n # Ubuntu 16.04 (this container) ships with make 4, but something in the\n # toolchains we build below chokes on that, so go back to make 3\n COPY scripts/make3.sh /scripts/"}, {"sha": "5a83bd318c4d9f1787e662fab142c62884b21770", "filename": "src/ci/docker/i686-gnu-nopt/Dockerfile", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Fci%2Fdocker%2Fi686-gnu-nopt%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Fci%2Fdocker%2Fi686-gnu-nopt%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fi686-gnu-nopt%2FDockerfile?ref=d29af3799964caec55e3ee806f2ac0f8d494e481", "patch": "@@ -14,13 +14,8 @@ RUN apt-get update && apt-get install -y --no-install-recommends \\\n   xz-utils\n \n \n-COPY scripts/dumb-init.sh /scripts/\n-RUN sh /scripts/dumb-init.sh\n-\n COPY scripts/sccache.sh /scripts/\n RUN sh /scripts/sccache.sh\n \n-ENTRYPOINT [\"/usr/bin/dumb-init\", \"--\"]\n-\n ENV RUST_CONFIGURE_ARGS --build=i686-unknown-linux-gnu --disable-optimize-tests\n ENV RUST_CHECK_TARGET check"}, {"sha": "daa24e0e8186df775cb6ec56393fb50affa2652b", "filename": "src/ci/docker/i686-gnu/Dockerfile", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Fci%2Fdocker%2Fi686-gnu%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Fci%2Fdocker%2Fi686-gnu%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fi686-gnu%2FDockerfile?ref=d29af3799964caec55e3ee806f2ac0f8d494e481", "patch": "@@ -14,13 +14,8 @@ RUN apt-get update && apt-get install -y --no-install-recommends \\\n   xz-utils\n \n \n-COPY scripts/dumb-init.sh /scripts/\n-RUN sh /scripts/dumb-init.sh\n-\n COPY scripts/sccache.sh /scripts/\n RUN sh /scripts/sccache.sh\n \n-ENTRYPOINT [\"/usr/bin/dumb-init\", \"--\"]\n-\n ENV RUST_CONFIGURE_ARGS --build=i686-unknown-linux-gnu\n ENV SCRIPT python2.7 ../x.py test"}, {"sha": "5eba81ff60a22a935777712d32d43305a69d6454", "filename": "src/ci/docker/run.sh", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Fci%2Fdocker%2Frun.sh", "raw_url": "https://github.com/rust-lang/rust/raw/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Fci%2Fdocker%2Frun.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Frun.sh?ref=d29af3799964caec55e3ee806f2ac0f8d494e481", "patch": "@@ -89,6 +89,7 @@ exec docker \\\n   --env TRAVIS_BRANCH \\\n   --volume \"$HOME/.cargo:/cargo\" \\\n   --volume \"$HOME/rustsrc:$HOME/rustsrc\" \\\n+  --init \\\n   --rm \\\n   rust-ci \\\n   /checkout/src/ci/run.sh"}, {"sha": "42ecec6ba08dc6cd83c3ceb2ed4789ccb5defe4b", "filename": "src/ci/docker/scripts/dumb-init.sh", "status": "removed", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/7c5780b3564d98aec130ee2f27368b116a3f1160/src%2Fci%2Fdocker%2Fscripts%2Fdumb-init.sh", "raw_url": "https://github.com/rust-lang/rust/raw/7c5780b3564d98aec130ee2f27368b116a3f1160/src%2Fci%2Fdocker%2Fscripts%2Fdumb-init.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fscripts%2Fdumb-init.sh?ref=7c5780b3564d98aec130ee2f27368b116a3f1160", "patch": "@@ -1,15 +0,0 @@\n-# Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n-# file at the top-level directory of this distribution and at\n-# http://rust-lang.org/COPYRIGHT.\n-#\n-# Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-# http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-# <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-# option. This file may not be copied, modified, or distributed\n-# except according to those terms.\n-\n-set -ex\n-\n-curl -fOL https://github.com/Yelp/dumb-init/releases/download/v1.2.0/dumb-init_1.2.0_amd64.deb\n-dpkg -i dumb-init_*.deb\n-rm dumb-init_*.deb"}, {"sha": "35a387221c644b3b9e6f165fa7cf7350a431ae00", "filename": "src/ci/docker/x86_64-gnu-aux/Dockerfile", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Fci%2Fdocker%2Fx86_64-gnu-aux%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Fci%2Fdocker%2Fx86_64-gnu-aux%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fx86_64-gnu-aux%2FDockerfile?ref=d29af3799964caec55e3ee806f2ac0f8d494e481", "patch": "@@ -14,13 +14,8 @@ RUN apt-get update && apt-get install -y --no-install-recommends \\\n   xz-utils \\\n   pkg-config\n \n-COPY scripts/dumb-init.sh /scripts/\n-RUN sh /scripts/dumb-init.sh\n-\n COPY scripts/sccache.sh /scripts/\n RUN sh /scripts/sccache.sh\n \n-ENTRYPOINT [\"/usr/bin/dumb-init\", \"--\"]\n-\n ENV RUST_CONFIGURE_ARGS --build=x86_64-unknown-linux-gnu\n ENV RUST_CHECK_TARGET check-aux"}, {"sha": "95d41028595f83979f5d5f5475c9241ff92a44d4", "filename": "src/ci/docker/x86_64-gnu-debug/Dockerfile", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Fci%2Fdocker%2Fx86_64-gnu-debug%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Fci%2Fdocker%2Fx86_64-gnu-debug%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fx86_64-gnu-debug%2FDockerfile?ref=d29af3799964caec55e3ee806f2ac0f8d494e481", "patch": "@@ -13,14 +13,9 @@ RUN apt-get update && apt-get install -y --no-install-recommends \\\n   gdb \\\n   xz-utils\n \n-COPY scripts/dumb-init.sh /scripts/\n-RUN sh /scripts/dumb-init.sh\n-\n COPY scripts/sccache.sh /scripts/\n RUN sh /scripts/sccache.sh\n \n-ENTRYPOINT [\"/usr/bin/dumb-init\", \"--\"]\n-\n ENV RUST_CONFIGURE_ARGS \\\n       --build=x86_64-unknown-linux-gnu \\\n       --enable-debug \\"}, {"sha": "786f59eb9f761640c92bea520a6d0c5ff547957e", "filename": "src/ci/docker/x86_64-gnu-distcheck/Dockerfile", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Fci%2Fdocker%2Fx86_64-gnu-distcheck%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Fci%2Fdocker%2Fx86_64-gnu-distcheck%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fx86_64-gnu-distcheck%2FDockerfile?ref=d29af3799964caec55e3ee806f2ac0f8d494e481", "patch": "@@ -15,14 +15,9 @@ RUN apt-get update && apt-get install -y --no-install-recommends \\\n   libssl-dev \\\n   pkg-config\n \n-COPY scripts/dumb-init.sh /scripts/\n-RUN sh /scripts/dumb-init.sh\n-\n COPY scripts/sccache.sh /scripts/\n RUN sh /scripts/sccache.sh\n \n-ENTRYPOINT [\"/usr/bin/dumb-init\", \"--\"]\n-\n ENV RUST_CONFIGURE_ARGS --build=x86_64-unknown-linux-gnu\n ENV SCRIPT python2.7 ../x.py test distcheck\n ENV DIST_SRC 1"}, {"sha": "70390c2ac1df18a52390b0196068d054a43561f3", "filename": "src/ci/docker/x86_64-gnu-full-bootstrap/Dockerfile", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Fci%2Fdocker%2Fx86_64-gnu-full-bootstrap%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Fci%2Fdocker%2Fx86_64-gnu-full-bootstrap%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fx86_64-gnu-full-bootstrap%2FDockerfile?ref=d29af3799964caec55e3ee806f2ac0f8d494e481", "patch": "@@ -13,14 +13,9 @@ RUN apt-get update && apt-get install -y --no-install-recommends \\\n   gdb \\\n   xz-utils\n \n-COPY scripts/dumb-init.sh /scripts/\n-RUN sh /scripts/dumb-init.sh\n-\n COPY scripts/sccache.sh /scripts/\n RUN sh /scripts/sccache.sh\n \n-ENTRYPOINT [\"/usr/bin/dumb-init\", \"--\"]\n-\n ENV RUST_CONFIGURE_ARGS \\\n       --build=x86_64-unknown-linux-gnu \\\n       --enable-full-bootstrap"}, {"sha": "d323677698cce0d0e5e85226a5b3611cd42b09b2", "filename": "src/ci/docker/x86_64-gnu-incremental/Dockerfile", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Fci%2Fdocker%2Fx86_64-gnu-incremental%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Fci%2Fdocker%2Fx86_64-gnu-incremental%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fx86_64-gnu-incremental%2FDockerfile?ref=d29af3799964caec55e3ee806f2ac0f8d494e481", "patch": "@@ -13,14 +13,9 @@ RUN apt-get update && apt-get install -y --no-install-recommends \\\n   gdb \\\n   xz-utils\n \n-COPY scripts/dumb-init.sh /scripts/\n-RUN sh /scripts/dumb-init.sh\n-\n COPY scripts/sccache.sh /scripts/\n RUN sh /scripts/sccache.sh\n \n-ENTRYPOINT [\"/usr/bin/dumb-init\", \"--\"]\n-\n ENV RUST_CONFIGURE_ARGS --build=x86_64-unknown-linux-gnu\n ENV RUSTFLAGS -Zincremental=/tmp/rust-incr-cache\n ENV RUST_CHECK_TARGET check"}, {"sha": "e832a2445ba146b55cc1ae7d0128f4a589a7dc31", "filename": "src/ci/docker/x86_64-gnu-llvm-3.7/Dockerfile", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Fci%2Fdocker%2Fx86_64-gnu-llvm-3.7%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Fci%2Fdocker%2Fx86_64-gnu-llvm-3.7%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fx86_64-gnu-llvm-3.7%2FDockerfile?ref=d29af3799964caec55e3ee806f2ac0f8d494e481", "patch": "@@ -16,14 +16,9 @@ RUN apt-get update && apt-get install -y --no-install-recommends \\\n   zlib1g-dev \\\n   xz-utils\n \n-COPY scripts/dumb-init.sh /scripts/\n-RUN sh /scripts/dumb-init.sh\n-\n COPY scripts/sccache.sh /scripts/\n RUN sh /scripts/sccache.sh\n \n-ENTRYPOINT [\"/usr/bin/dumb-init\", \"--\"]\n-\n ENV RUST_CONFIGURE_ARGS \\\n       --build=x86_64-unknown-linux-gnu \\\n       --llvm-root=/usr/lib/llvm-3.7"}, {"sha": "d2b0dd13dc2df985d46bd6d7c776e981f6b45aea", "filename": "src/ci/docker/x86_64-gnu-nopt/Dockerfile", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Fci%2Fdocker%2Fx86_64-gnu-nopt%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Fci%2Fdocker%2Fx86_64-gnu-nopt%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fx86_64-gnu-nopt%2FDockerfile?ref=d29af3799964caec55e3ee806f2ac0f8d494e481", "patch": "@@ -13,13 +13,8 @@ RUN apt-get update && apt-get install -y --no-install-recommends \\\n   gdb \\\n   xz-utils\n \n-COPY scripts/dumb-init.sh /scripts/\n-RUN sh /scripts/dumb-init.sh\n-\n COPY scripts/sccache.sh /scripts/\n RUN sh /scripts/sccache.sh\n \n-ENTRYPOINT [\"/usr/bin/dumb-init\", \"--\"]\n-\n ENV RUST_CONFIGURE_ARGS --build=x86_64-unknown-linux-gnu --disable-optimize-tests\n ENV RUST_CHECK_TARGET check"}, {"sha": "7570bca5906d10843e8e488de1a51487a99c7b8d", "filename": "src/ci/docker/x86_64-gnu/Dockerfile", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Fci%2Fdocker%2Fx86_64-gnu%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Fci%2Fdocker%2Fx86_64-gnu%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fx86_64-gnu%2FDockerfile?ref=d29af3799964caec55e3ee806f2ac0f8d494e481", "patch": "@@ -13,13 +13,8 @@ RUN apt-get update && apt-get install -y --no-install-recommends \\\n   gdb \\\n   xz-utils\n \n-COPY scripts/dumb-init.sh /scripts/\n-RUN sh /scripts/dumb-init.sh\n-\n COPY scripts/sccache.sh /scripts/\n RUN sh /scripts/sccache.sh\n \n-ENTRYPOINT [\"/usr/bin/dumb-init\", \"--\"]\n-\n ENV RUST_CONFIGURE_ARGS --build=x86_64-unknown-linux-gnu --enable-sanitizers --enable-profiler\n ENV SCRIPT python2.7 ../x.py test"}, {"sha": "7e8fde2034640d4b033e8746590fb9d04a3ace11", "filename": "src/etc/htmldocck.py", "status": "modified", "additions": 20, "deletions": 13, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Fetc%2Fhtmldocck.py", "raw_url": "https://github.com/rust-lang/rust/raw/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Fetc%2Fhtmldocck.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fhtmldocck.py?ref=d29af3799964caec55e3ee806f2ac0f8d494e481", "patch": "@@ -29,7 +29,7 @@\n \n In order to avoid one-off dependencies for this task, this script uses\n a reasonably working HTML parser and the existing XPath implementation\n-from Python 2's standard library. Hopefully we won't render\n+from Python's standard library. Hopefully we won't render\n non-well-formed HTML.\n \n # Commands\n@@ -110,11 +110,17 @@\n import re\n import shlex\n from collections import namedtuple\n-from HTMLParser import HTMLParser\n+try:\n+    from html.parser import HTMLParser\n+except ImportError:\n+    from HTMLParser import HTMLParser\n from xml.etree import cElementTree as ET\n \n # &larrb;/&rarrb; are not in HTML 4 but are in HTML 5\n-from htmlentitydefs import entitydefs\n+try:\n+    from html.entities import entitydefs\n+except ImportError:\n+    from htmlentitydefs import entitydefs\n entitydefs['larrb'] = u'\\u21e4'\n entitydefs['rarrb'] = u'\\u21e5'\n entitydefs['nbsp'] = ' '\n@@ -123,6 +129,11 @@\n VOID_ELEMENTS = set(['area', 'base', 'br', 'col', 'embed', 'hr', 'img', 'input', 'keygen',\n                      'link', 'menuitem', 'meta', 'param', 'source', 'track', 'wbr'])\n \n+# Python 2 -> 3 compatibility\n+try:\n+    unichr\n+except NameError:\n+    unichr = chr\n \n class CustomHTMLParser(HTMLParser):\n     \"\"\"simplified HTML parser.\n@@ -184,12 +195,8 @@ def concat_multi_lines(f):\n \n         # strip the common prefix from the current line if needed\n         if lastline is not None:\n-            maxprefix = 0\n-            for i in xrange(min(len(line), len(lastline))):\n-                if line[i] != lastline[i]:\n-                    break\n-                maxprefix += 1\n-            line = line[maxprefix:].lstrip()\n+            common_prefix = os.path.commonprefix([line, lastline])\n+            line = line[len(common_prefix):].lstrip()\n \n         firstlineno = firstlineno or lineno\n         if line.endswith('\\\\'):\n@@ -213,7 +220,7 @@ def concat_multi_lines(f):\n \n \n def get_commands(template):\n-    with open(template, 'rUb') as f:\n+    with open(template, 'rU') as f:\n         for lineno, line in concat_multi_lines(f):\n             m = LINE_PATTERN.search(line)\n             if not m:\n@@ -372,7 +379,7 @@ def check_command(c, cache):\n                     cache.get_file(c.args[0])\n                     ret = True\n                 except FailedCheck as err:\n-                    cerr = err.message\n+                    cerr = str(err)\n                     ret = False\n             elif len(c.args) == 2: # @has/matches <path> <pat> = string test\n                 cerr = \"`PATTERN` did not match\"\n@@ -413,9 +420,9 @@ def check_command(c, cache):\n \n     except FailedCheck as err:\n         message = '@{}{} check failed'.format('!' if c.negated else '', c.cmd)\n-        print_err(c.lineno, c.context, err.message, message)\n+        print_err(c.lineno, c.context, str(err), message)\n     except InvalidCheck as err:\n-        print_err(c.lineno, c.context, err.message)\n+        print_err(c.lineno, c.context, str(err))\n \n def check(target, commands):\n     cache = CachedFiles(target)"}, {"sha": "f14f27023249e3423cbba1cdab383d6b65a7a71c", "filename": "src/liballoc/allocator.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Fliballoc%2Fallocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Fliballoc%2Fallocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fallocator.rs?ref=d29af3799964caec55e3ee806f2ac0f8d494e481", "patch": "@@ -110,7 +110,7 @@ impl Layout {\n \n     /// Creates a layout, bypassing all checks.\n     ///\n-    /// # Unsafety\n+    /// # Safety\n     ///\n     /// This function is unsafe as it does not verify that `align` is\n     /// a power-of-two that is also less than or equal to 2^31, nor\n@@ -485,7 +485,7 @@ pub unsafe trait Alloc {\n     /// behavior, e.g. to ensure initialization to particular sets of\n     /// bit patterns.)\n     ///\n-    /// # Unsafety\n+    /// # Safety\n     ///\n     /// This function is unsafe because undefined behavior can result\n     /// if the caller does not ensure that `layout` has non-zero size.\n@@ -513,7 +513,7 @@ pub unsafe trait Alloc {\n \n     /// Deallocate the memory referenced by `ptr`.\n     ///\n-    /// # Unsafety\n+    /// # Safety\n     ///\n     /// This function is unsafe because undefined behavior can result\n     /// if the caller does not ensure all of the following:\n@@ -617,7 +617,7 @@ pub unsafe trait Alloc {\n     /// behavior is well-defined (though underspecified) when this\n     /// constraint is violated; further discussion below.\n     ///\n-    /// # Unsafety\n+    /// # Safety\n     ///\n     /// This function is unsafe because undefined behavior can result\n     /// if the caller does not ensure all of the following:\n@@ -688,7 +688,7 @@ pub unsafe trait Alloc {\n     /// Behaves like `alloc`, but also ensures that the contents\n     /// are set to zero before being returned.\n     ///\n-    /// # Unsafety\n+    /// # Safety\n     ///\n     /// This function is unsafe for the same reasons that `alloc` is.\n     ///\n@@ -714,7 +714,7 @@ pub unsafe trait Alloc {\n     /// the returned block. For some `layout` inputs, like arrays, this\n     /// may include extra storage usable for additional data.\n     ///\n-    /// # Unsafety\n+    /// # Safety\n     ///\n     /// This function is unsafe for the same reasons that `alloc` is.\n     ///\n@@ -736,7 +736,7 @@ pub unsafe trait Alloc {\n     /// the returned block. For some `layout` inputs, like arrays, this\n     /// may include extra storage usable for additional data.\n     ///\n-    /// # Unsafety\n+    /// # Safety\n     ///\n     /// This function is unsafe for the same reasons that `realloc` is.\n     ///\n@@ -770,7 +770,7 @@ pub unsafe trait Alloc {\n     /// memory block referenced by `ptr` has not been transferred, and\n     /// the contents of the memory block are unaltered.\n     ///\n-    /// # Unsafety\n+    /// # Safety\n     ///\n     /// This function is unsafe because undefined behavior can result\n     /// if the caller does not ensure all of the following:\n@@ -827,7 +827,7 @@ pub unsafe trait Alloc {\n     /// the memory block has not been transferred, and the contents of\n     /// the memory block are unaltered.\n     ///\n-    /// # Unsafety\n+    /// # Safety\n     ///\n     /// This function is unsafe because undefined behavior can result\n     /// if the caller does not ensure all of the following:\n@@ -920,7 +920,7 @@ pub unsafe trait Alloc {\n     ///\n     /// Captures a common usage pattern for allocators.\n     ///\n-    /// # Unsafety\n+    /// # Safety\n     ///\n     /// This function is unsafe because undefined behavior can result\n     /// if the caller does not ensure both:\n@@ -993,7 +993,7 @@ pub unsafe trait Alloc {\n     /// The returned block is suitable for passing to the\n     /// `alloc`/`realloc` methods of this allocator.\n     ///\n-    /// # Unsafety\n+    /// # Safety\n     ///\n     /// This function is unsafe because undefined behavior can result\n     /// if the caller does not ensure all of the following:\n@@ -1037,7 +1037,7 @@ pub unsafe trait Alloc {\n     ///\n     /// Captures a common usage pattern for allocators.\n     ///\n-    /// # Unsafety\n+    /// # Safety\n     ///\n     /// This function is unsafe because undefined behavior can result\n     /// if the caller does not ensure both:"}, {"sha": "d9f4a2217db4e8a5443bceb4db97f77e8d7705ea", "filename": "src/liballoc/boxed.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Fliballoc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Fliballoc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fboxed.rs?ref=d29af3799964caec55e3ee806f2ac0f8d494e481", "patch": "@@ -633,7 +633,7 @@ impl<I: FusedIterator + ?Sized> FusedIterator for Box<I> {}\n /// that `FnBox` may be deprecated in the future if `Box<FnOnce()>`\n /// closures become directly usable.)\n ///\n-/// ### Example\n+/// # Examples\n ///\n /// Here is a snippet of code which creates a hashmap full of boxed\n /// once closures and then removes them one by one, calling each"}, {"sha": "d959331eb55dbdf0ac03e71f6312909eb5a1fee5", "filename": "src/liballoc/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Fliballoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Fliballoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Flib.rs?ref=d29af3799964caec55e3ee806f2ac0f8d494e481", "patch": "@@ -60,8 +60,6 @@\n //! The [`heap`](heap/index.html) module defines the low-level interface to the\n //! default global allocator. It is not compatible with the libc allocator API.\n \n-#![crate_name = \"alloc\"]\n-#![crate_type = \"rlib\"]\n #![allow(unused_attributes)]\n #![unstable(feature = \"alloc\",\n             reason = \"this library is unlikely to be stabilized in its current \\"}, {"sha": "7787ace944119861181c671b805688ae763174be", "filename": "src/liballoc/slice.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Fliballoc%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Fliballoc%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fslice.rs?ref=d29af3799964caec55e3ee806f2ac0f8d494e481", "patch": "@@ -171,7 +171,7 @@ mod hack {\n impl<T> [T] {\n     /// Returns the number of elements in the slice.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// let a = [1, 2, 3];\n@@ -185,7 +185,7 @@ impl<T> [T] {\n \n     /// Returns `true` if the slice has a length of 0.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// let a = [1, 2, 3];\n@@ -523,7 +523,7 @@ impl<T> [T] {\n \n     /// Reverses the order of elements in the slice, in place.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// let mut v = [1, 2, 3];\n@@ -580,7 +580,7 @@ impl<T> [T] {\n     ///\n     /// Panics if `size` is 0.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// let slice = ['r', 'u', 's', 't'];\n@@ -613,7 +613,7 @@ impl<T> [T] {\n     ///\n     /// Panics if `size` is 0.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// let slice = ['l', 'o', 'r', 'e', 'm'];\n@@ -1040,7 +1040,7 @@ impl<T> [T] {\n     /// `Err` is returned, containing the index where a matching\n     /// element could be inserted while maintaining sorted order.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// Looks up a series of four elements. The first is found, with a\n     /// uniquely determined position; the second and third are not\n@@ -1074,7 +1074,7 @@ impl<T> [T] {\n     /// `Err` is returned, containing the index where a matching\n     /// element could be inserted while maintaining sorted order.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// Looks up a series of four elements. The first is found, with a\n     /// uniquely determined position; the second and third are not\n@@ -1419,7 +1419,7 @@ impl<T> [T] {\n     ///\n     /// This function will panic if the two slices have different lengths.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// let mut dst = [0, 0, 0];\n@@ -1445,7 +1445,7 @@ impl<T> [T] {\n     ///\n     /// This function will panic if the two slices have different lengths.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// let mut dst = [0, 0, 0];"}, {"sha": "79b2bbce2af7cf13e59ad095572ce3a4e6b2d54a", "filename": "src/liballoc/str.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Fliballoc%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Fliballoc%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fstr.rs?ref=d29af3799964caec55e3ee806f2ac0f8d494e481", "patch": "@@ -1714,7 +1714,7 @@ impl str {\n     ///\n     /// [`Err`]: str/trait.FromStr.html#associatedtype.Err\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// Basic usage\n     ///"}, {"sha": "b1919c7c968c9bdda239c74ce22a2c64fd69aebe", "filename": "src/liballoc/string.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Fliballoc%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Fliballoc%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fstring.rs?ref=d29af3799964caec55e3ee806f2ac0f8d494e481", "patch": "@@ -82,7 +82,7 @@ use boxed::Box;\n ///\n /// # Examples\n ///\n-/// You can create a `String` from a literal string with `String::from`:\n+/// You can create a `String` from a literal string with [`String::from`]:\n ///\n /// ```\n /// let hello = String::from(\"Hello, world!\");\n@@ -98,6 +98,7 @@ use boxed::Box;\n /// hello.push_str(\"orld!\");\n /// ```\n ///\n+/// [`String::from`]: #method.from\n /// [`char`]: ../../std/primitive.char.html\n /// [`push`]: #method.push\n /// [`push_str`]: #method.push_str"}, {"sha": "8f3e71ef794465fb8a5b3e1c23d28faf5ffaf32c", "filename": "src/liballoc/tests/lib.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Fliballoc%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Fliballoc%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Flib.rs?ref=d29af3799964caec55e3ee806f2ac0f8d494e481", "patch": "@@ -10,7 +10,6 @@\n \n #![deny(warnings)]\n \n-#![feature(alloc)]\n #![feature(attr_literals)]\n #![feature(box_syntax)]\n #![feature(inclusive_range_syntax)]\n@@ -27,14 +26,10 @@\n #![feature(splice)]\n #![feature(str_escape)]\n #![feature(string_retain)]\n-#![feature(test)]\n #![feature(unboxed_closures)]\n #![feature(unicode)]\n \n-extern crate alloc;\n-extern crate test;\n extern crate std_unicode;\n-extern crate core;\n \n use std::hash::{Hash, Hasher};\n use std::collections::hash_map::DefaultHasher;"}, {"sha": "efefabc974c7fb0c068a422e487de10318daf86d", "filename": "src/liballoc_jemalloc/lib.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Fliballoc_jemalloc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Fliballoc_jemalloc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc_jemalloc%2Flib.rs?ref=d29af3799964caec55e3ee806f2ac0f8d494e481", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![crate_name = \"alloc_jemalloc\"]\n-#![crate_type = \"rlib\"]\n #![no_std]\n #![unstable(feature = \"alloc_jemalloc\",\n             reason = \"this library is unlikely to be stabilized in its current \\\n@@ -21,7 +19,7 @@\n #![feature(libc)]\n #![feature(linkage)]\n #![feature(staged_api)]\n-#![cfg_attr(dummy_jemalloc, allow(dead_code))]\n+#![cfg_attr(dummy_jemalloc, allow(dead_code, unused_extern_crates))]\n #![cfg_attr(not(dummy_jemalloc), feature(allocator_api))]\n \n extern crate alloc;"}, {"sha": "1defe308713a7772f64aa159f7c2d12b375155e7", "filename": "src/liballoc_system/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Fliballoc_system%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Fliballoc_system%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc_system%2Flib.rs?ref=d29af3799964caec55e3ee806f2ac0f8d494e481", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![crate_name = \"alloc_system\"]\n-#![crate_type = \"rlib\"]\n #![no_std]\n #![deny(warnings)]\n #![unstable(feature = \"alloc_system\","}, {"sha": "96fcc81e8e6edfaabaa78e99e73ec23bbebd00a1", "filename": "src/libarena/lib.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Flibarena%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Flibarena%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibarena%2Flib.rs?ref=d29af3799964caec55e3ee806f2ac0f8d494e481", "patch": "@@ -18,9 +18,6 @@\n //! This crate implements `TypedArena`, a simple arena that can only hold\n //! objects of a single type.\n \n-#![crate_name = \"arena\"]\n-#![crate_type = \"rlib\"]\n-#![crate_type = \"dylib\"]\n #![doc(html_logo_url = \"https://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n        html_favicon_url = \"https://doc.rust-lang.org/favicon.ico\",\n        html_root_url = \"https://doc.rust-lang.org/nightly/\","}, {"sha": "55316db3d5a4358f6582328f9951fa489e227113", "filename": "src/libcollections/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Flibcollections%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Flibcollections%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Flib.rs?ref=d29af3799964caec55e3ee806f2ac0f8d494e481", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![crate_name = \"collections\"]\n-#![crate_type = \"rlib\"]\n #![allow(unused_attributes)]\n #![unstable(feature = \"collections\",\n             reason = \"this library is unlikely to be stabilized in its current \\"}, {"sha": "e0a3b8d52f40efb5df9180a1b741928196675fed", "filename": "src/libcore/cell.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Flibcore%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Flibcore%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcell.rs?ref=d29af3799964caec55e3ee806f2ac0f8d494e481", "patch": "@@ -998,7 +998,7 @@ impl<'b, T: ?Sized> Ref<'b, T> {\n     /// A method would interfere with methods of the same name on the contents\n     /// of a `RefCell` used through `Deref`.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// use std::cell::{RefCell, Ref};\n@@ -1040,7 +1040,7 @@ impl<'b, T: ?Sized> RefMut<'b, T> {\n     /// `RefMut::map(...)`.  A method would interfere with methods of the same\n     /// name on the contents of a `RefCell` used through `Deref`.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// use std::cell::{RefCell, RefMut};"}, {"sha": "b594c886b64f5d35a80a9ccd79b3836954d0f63e", "filename": "src/libcore/fmt/builders.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Flibcore%2Ffmt%2Fbuilders.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Flibcore%2Ffmt%2Fbuilders.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fbuilders.rs?ref=d29af3799964caec55e3ee806f2ac0f8d494e481", "patch": "@@ -58,7 +58,7 @@ impl<'a, 'b: 'a> fmt::Write for PadAdapter<'a, 'b> {\n /// [`Formatter::debug_struct`](struct.Formatter.html#method.debug_struct)\n /// method.\n ///\n-/// # Example\n+/// # Examples\n ///\n /// ```\n /// use std::fmt;\n@@ -153,7 +153,7 @@ impl<'a, 'b: 'a> DebugStruct<'a, 'b> {\n /// [`Formatter::debug_tuple`](struct.Formatter.html#method.debug_tuple)\n /// method.\n ///\n-/// # Example\n+/// # Examples\n ///\n /// ```\n /// use std::fmt;\n@@ -290,7 +290,7 @@ impl<'a, 'b: 'a> DebugInner<'a, 'b> {\n /// [`Formatter::debug_set`](struct.Formatter.html#method.debug_set)\n /// method.\n ///\n-/// # Example\n+/// # Examples\n ///\n /// ```\n /// use std::fmt;\n@@ -361,7 +361,7 @@ impl<'a, 'b: 'a> DebugSet<'a, 'b> {\n /// [`Formatter::debug_list`](struct.Formatter.html#method.debug_list)\n /// method.\n ///\n-/// # Example\n+/// # Examples\n ///\n /// ```\n /// use std::fmt;\n@@ -432,7 +432,7 @@ impl<'a, 'b: 'a> DebugList<'a, 'b> {\n /// [`Formatter::debug_map`](struct.Formatter.html#method.debug_map)\n /// method.\n ///\n-/// # Example\n+/// # Examples\n ///\n /// ```\n /// use std::fmt;"}, {"sha": "c270c6ae0dbad23944db36f3d19ff8ecc2b885e2", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=d29af3799964caec55e3ee806f2ac0f8d494e481", "patch": "@@ -51,9 +51,7 @@\n // Since libcore defines many fundamental lang items, all tests live in a\n // separate crate, libcoretest, to avoid bizarre issues.\n \n-#![crate_name = \"core\"]\n #![stable(feature = \"core\", since = \"1.6.0\")]\n-#![crate_type = \"rlib\"]\n #![doc(html_logo_url = \"https://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n        html_favicon_url = \"https://doc.rust-lang.org/favicon.ico\",\n        html_root_url = \"https://doc.rust-lang.org/nightly/\","}, {"sha": "4b866cab1eae2f00b97e5d0af34240ec4fb21904", "filename": "src/libcore/mem.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Flibcore%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Flibcore%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmem.rs?ref=d29af3799964caec55e3ee806f2ac0f8d494e481", "patch": "@@ -901,7 +901,7 @@ impl<T> ManuallyDrop<T> {\n \n     /// Manually drops the contained value.\n     ///\n-    /// # Unsafety\n+    /// # Safety\n     ///\n     /// This function runs the destructor of the contained value and thus the wrapped value\n     /// now represents uninitialized data. It is up to the user of this method to ensure the"}, {"sha": "ab2022b1824ca3a2e5f5b682731d53c52abb5a14", "filename": "src/libcore/tests/lib.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Flibcore%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Flibcore%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Flib.rs?ref=d29af3799964caec55e3ee806f2ac0f8d494e481", "patch": "@@ -26,7 +26,6 @@\n #![feature(inclusive_range)]\n #![feature(inclusive_range_syntax)]\n #![feature(iter_rfind)]\n-#![feature(libc)]\n #![feature(nonzero)]\n #![feature(ord_max_min)]\n #![feature(rand)]\n@@ -41,13 +40,10 @@\n #![feature(test)]\n #![feature(trusted_len)]\n #![feature(try_from)]\n-#![feature(unicode)]\n #![feature(unique)]\n \n extern crate core;\n extern crate test;\n-extern crate libc;\n-extern crate std_unicode;\n extern crate rand;\n \n mod any;"}, {"sha": "24430b2e377f599529c02afdc1371349a73abf2d", "filename": "src/libfmt_macros/lib.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Flibfmt_macros%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Flibfmt_macros%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibfmt_macros%2Flib.rs?ref=d29af3799964caec55e3ee806f2ac0f8d494e481", "patch": "@@ -14,9 +14,6 @@\n //! Parsing does not happen at runtime: structures of `std::fmt::rt` are\n //! generated instead.\n \n-#![crate_name = \"fmt_macros\"]\n-#![crate_type = \"rlib\"]\n-#![crate_type = \"dylib\"]\n #![doc(html_logo_url = \"https://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n        html_favicon_url = \"https://doc.rust-lang.org/favicon.ico\",\n        html_root_url = \"https://doc.rust-lang.org/nightly/\","}, {"sha": "a0eacc817ca817b516f578dd98bc69d2ce6668ac", "filename": "src/libgetopts/lib.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Flibgetopts%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Flibgetopts%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgetopts%2Flib.rs?ref=d29af3799964caec55e3ee806f2ac0f8d494e481", "patch": "@@ -77,9 +77,6 @@\n //! }\n //! ```\n \n-#![crate_name = \"getopts\"]\n-#![crate_type = \"rlib\"]\n-#![crate_type = \"dylib\"]\n #![doc(html_logo_url = \"https://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n        html_favicon_url = \"https://doc.rust-lang.org/favicon.ico\",\n        html_root_url = \"https://doc.rust-lang.org/nightly/\","}, {"sha": "5b1cf2dee9a83db9abfe1ccabc6679754d9472e6", "filename": "src/libgraphviz/lib.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Flibgraphviz%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Flibgraphviz%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgraphviz%2Flib.rs?ref=d29af3799964caec55e3ee806f2ac0f8d494e481", "patch": "@@ -283,9 +283,6 @@\n //!\n //! * [DOT language](http://www.graphviz.org/doc/info/lang.html)\n \n-#![crate_name = \"graphviz\"]\n-#![crate_type = \"rlib\"]\n-#![crate_type = \"dylib\"]\n #![doc(html_logo_url = \"https://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n        html_favicon_url = \"https://doc.rust-lang.org/favicon.ico\",\n        html_root_url = \"https://doc.rust-lang.org/nightly/\","}, {"sha": "8be6f6470231dcb8e30f0cd68ea7d8923efb7cbb", "filename": "src/libpanic_abort/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Flibpanic_abort%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Flibpanic_abort%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibpanic_abort%2Flib.rs?ref=d29af3799964caec55e3ee806f2ac0f8d494e481", "patch": "@@ -14,8 +14,6 @@\n //! simpler! That being said, it's not quite as versatile, but here goes!\n \n #![no_std]\n-#![crate_name = \"panic_abort\"]\n-#![crate_type = \"rlib\"]\n #![unstable(feature = \"panic_abort\", issue = \"32837\")]\n #![doc(html_logo_url = \"https://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n        html_favicon_url = \"https://doc.rust-lang.org/favicon.ico\","}, {"sha": "558286f4ec0707c1fb740cf499f65222afe6243c", "filename": "src/libpanic_unwind/lib.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Flibpanic_unwind%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Flibpanic_unwind%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibpanic_unwind%2Flib.rs?ref=d29af3799964caec55e3ee806f2ac0f8d494e481", "patch": "@@ -23,8 +23,6 @@\n //! module.\n \n #![no_std]\n-#![crate_name = \"panic_unwind\"]\n-#![crate_type = \"rlib\"]\n #![unstable(feature = \"panic_unwind\", issue = \"32837\")]\n #![doc(html_logo_url = \"https://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n        html_favicon_url = \"https://doc.rust-lang.org/favicon.ico\",\n@@ -36,7 +34,9 @@\n #![feature(core_intrinsics)]\n #![feature(lang_items)]\n #![feature(libc)]\n-#![feature(panic_unwind)]\n+#![cfg_attr(not(any(target_env = \"msvc\",\n+                    all(windows, target_arch = \"x86_64\", target_env = \"gnu\"))),\n+            feature(panic_unwind))]\n #![feature(raw)]\n #![feature(staged_api)]\n #![feature(unwind_attributes)]\n@@ -47,6 +47,7 @@\n \n extern crate alloc;\n extern crate libc;\n+#[cfg(not(any(target_env = \"msvc\", all(windows, target_arch = \"x86_64\", target_env = \"gnu\"))))]\n extern crate unwind;\n \n use core::intrinsics;"}, {"sha": "3f425c24a9143479b72c3ed62ec4adb80f917a75", "filename": "src/libproc_macro/lib.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Flibproc_macro%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Flibproc_macro%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibproc_macro%2Flib.rs?ref=d29af3799964caec55e3ee806f2ac0f8d494e481", "patch": "@@ -23,10 +23,7 @@\n //!\n //! See [the book](../book/first-edition/procedural-macros.html) for more.\n \n-#![crate_name = \"proc_macro\"]\n #![stable(feature = \"proc_macro_lib\", since = \"1.15.0\")]\n-#![crate_type = \"rlib\"]\n-#![crate_type = \"dylib\"]\n #![deny(warnings)]\n #![deny(missing_docs)]\n #![doc(html_logo_url = \"https://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\","}, {"sha": "6d0d6d115b7163528e3e0a54737ce114124ffe32", "filename": "src/libprofiler_builtins/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Flibprofiler_builtins%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Flibprofiler_builtins%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibprofiler_builtins%2Flib.rs?ref=d29af3799964caec55e3ee806f2ac0f8d494e481", "patch": "@@ -14,7 +14,5 @@\n #![unstable(feature = \"profiler_runtime_lib\",\n             reason = \"internal implementation detail of rustc right now\",\n             issue = \"0\")]\n-#![crate_name = \"profiler_builtins\"]\n-#![crate_type = \"rlib\"]\n #![allow(unused_features)]\n #![feature(staged_api)]"}, {"sha": "90b3020fff9d1ebfa6a9bb2c1baef5220fd2db45", "filename": "src/librand/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Flibrand%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Flibrand%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Flib.rs?ref=d29af3799964caec55e3ee806f2ac0f8d494e481", "patch": "@@ -16,8 +16,6 @@\n //! is not recommended to use this library directly, but rather the official\n //! interface through `std::rand`.\n \n-#![crate_name = \"rand\"]\n-#![crate_type = \"rlib\"]\n #![doc(html_logo_url = \"https://www.rust-lang.org/logos/rust-logo-128x128-blk.png\",\n        html_favicon_url = \"https://doc.rust-lang.org/favicon.ico\",\n        html_root_url = \"https://doc.rust-lang.org/nightly/\","}, {"sha": "9a80db472dbd7cfab812fd7a7a7151cee03d0eb8", "filename": "src/librustc/dep_graph/dep_node.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs?ref=d29af3799964caec55e3ee806f2ac0f8d494e481", "patch": "@@ -523,6 +523,8 @@ define_dep_nodes!( <'tcx>\n     [] DylibDepFormats(DefId),\n     [] IsAllocator(DefId),\n     [] IsPanicRuntime(DefId),\n+    [] IsCompilerBuiltins(DefId),\n+    [] HasGlobalAllocator(DefId),\n     [] ExternCrate(DefId),\n     [] LintLevels,\n );"}, {"sha": "c80ce3c96f1a98a3d44870719fd5edffcd028f4e", "filename": "src/librustc/infer/error_reporting/anon_anon_conflict.rs", "status": "modified", "additions": 171, "deletions": 69, "changes": 240, "blob_url": "https://github.com/rust-lang/rust/blob/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fanon_anon_conflict.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fanon_anon_conflict.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fanon_anon_conflict.rs?ref=d29af3799964caec55e3ee806f2ac0f8d494e481", "patch": "@@ -27,65 +27,84 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n     //    { x.push(y); }.\n     // The example gives\n     // fn foo(x: &mut Vec<&u8>, y: &u8) {\n-    //                    ---      --- these references must have the same lifetime\n+    //                    ---      --- these references are declared with different lifetimes...\n     //            x.push(y);\n-    //            ^ data from `y` flows into `x` here\n-    // It will later be extended to trait objects and structs.\n+    //            ^ ...but data from `y` flows into `x` here\n+    // It has been extended for the case of structs too.\n+    // Consider the example\n+    // struct Ref<'a> { x: &'a u32 }\n+    // fn foo(mut x: Vec<Ref>, y: Ref) {\n+    //                   ---      --- these structs are declared with different lifetimes...\n+    //               x.push(y);\n+    //               ^ ...but data from `y` flows into `x` here\n+    // }\n+    // It will later be extended to trait objects.\n     pub fn try_report_anon_anon_conflict(&self, error: &RegionResolutionError<'tcx>) -> bool {\n-\n         let (span, sub, sup) = match *error {\n             ConcreteFailure(ref origin, sub, sup) => (origin.span(), sub, sup),\n             _ => return false, // inapplicable\n         };\n \n         // Determine whether the sub and sup consist of both anonymous (elided) regions.\n-        let (ty1, ty2) = if self.is_suitable_anonymous_region(sup).is_some() &&\n-                            self.is_suitable_anonymous_region(sub).is_some() {\n-            if let (Some(anon_reg1), Some(anon_reg2)) =\n-                (self.is_suitable_anonymous_region(sup), self.is_suitable_anonymous_region(sub)) {\n-                let ((_, br1), (_, br2)) = (anon_reg1, anon_reg2);\n-                if self.find_anon_type(sup, &br1).is_some() &&\n-                   self.find_anon_type(sub, &br2).is_some() {\n-                    (self.find_anon_type(sup, &br1).unwrap(),\n-                     self.find_anon_type(sub, &br2).unwrap())\n-                } else {\n-                    return false;\n-                }\n-            } else {\n-                return false;\n-            }\n-        } else {\n-            return false; // inapplicable\n-        };\n+        let anon_reg_sup = or_false!(self.is_suitable_anonymous_region(sup));\n \n-        if let (Some(sup_arg), Some(sub_arg)) =\n+        let anon_reg_sub = or_false!(self.is_suitable_anonymous_region(sub));\n+        let scope_def_id_sup = anon_reg_sup.def_id;\n+        let bregion_sup = anon_reg_sup.boundregion;\n+        let scope_def_id_sub = anon_reg_sub.def_id;\n+        let bregion_sub = anon_reg_sub.boundregion;\n+\n+        let ty_sup = or_false!(self.find_anon_type(sup, &bregion_sup));\n+\n+        let ty_sub = or_false!(self.find_anon_type(sub, &bregion_sub));\n+\n+        let (main_label, label1, label2) = if let (Some(sup_arg), Some(sub_arg)) =\n             (self.find_arg_with_anonymous_region(sup, sup),\n              self.find_arg_with_anonymous_region(sub, sub)) {\n-            let ((anon_arg1, _, _, _), (anon_arg2, _, _, _)) = (sup_arg, sub_arg);\n \n-            let span_label_var1 = if let Some(simple_name) = anon_arg1.pat.simple_name() {\n-                format!(\" from `{}` \", simple_name)\n-            } else {\n-                format!(\" \")\n-            };\n+            let (anon_arg_sup, is_first_sup, anon_arg_sub, is_first_sub) =\n+                (sup_arg.arg, sup_arg.is_first, sub_arg.arg, sub_arg.is_first);\n+            if self.is_self_anon(is_first_sup, scope_def_id_sup) ||\n+               self.is_self_anon(is_first_sub, scope_def_id_sub) {\n+                return false;\n+            }\n \n-            let span_label_var2 = if let Some(simple_name) = anon_arg2.pat.simple_name() {\n-                format!(\" into `{}` \", simple_name)\n+            if self.is_return_type_anon(scope_def_id_sup, bregion_sup) ||\n+               self.is_return_type_anon(scope_def_id_sub, bregion_sub) {\n+                return false;\n+            }\n+\n+            if anon_arg_sup == anon_arg_sub {\n+                (format!(\"this type was declared with multiple lifetimes...\"),\n+                 format!(\" with one lifetime\"),\n+                 format!(\" into the other\"))\n             } else {\n-                format!(\" \")\n-            };\n-\n-            struct_span_err!(self.tcx.sess, span, E0623, \"lifetime mismatch\")\n-                .span_label(ty1.span,\n-                            format!(\"these references are not declared with the same lifetime...\"))\n-                .span_label(ty2.span, format!(\"\"))\n-                .span_label(span,\n-                            format!(\"...but data{}flows{}here\", span_label_var1, span_label_var2))\n-                .emit();\n+                let span_label_var1 = if let Some(simple_name) = anon_arg_sup.pat.simple_name() {\n+                    format!(\" from `{}`\", simple_name)\n+                } else {\n+                    format!(\"\")\n+                };\n+\n+                let span_label_var2 = if let Some(simple_name) = anon_arg_sub.pat.simple_name() {\n+                    format!(\" into `{}`\", simple_name)\n+                } else {\n+                    format!(\"\")\n+                };\n+\n+                let span_label =\n+                    format!(\"these two types are declared with different lifetimes...\",);\n+\n+                (span_label, span_label_var1, span_label_var2)\n+            }\n         } else {\n             return false;\n-        }\n+        };\n \n+        struct_span_err!(self.tcx.sess, span, E0623, \"lifetime mismatch\")\n+            .span_label(ty_sup.span, main_label)\n+            .span_label(ty_sub.span, format!(\"\"))\n+            .span_label(span, format!(\"...but data{} flows{} here\", label1, label2))\n+            .emit();\n         return true;\n     }\n \n@@ -94,7 +113,6 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n     /// contains the anonymous type.\n     ///\n     /// # Arguments\n-    ///\n     /// region - the anonymous region corresponding to the anon_anon conflict\n     /// br - the bound region corresponding to the above region which is of type `BrAnon(_)`\n     ///\n@@ -105,39 +123,56 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n     /// ```\n     /// The function returns the nested type corresponding to the anonymous region\n     /// for e.g. `&u8` and Vec<`&u8`.\n-    fn find_anon_type(&self, region: Region<'tcx>, br: &ty::BoundRegion) -> Option<&hir::Ty> {\n+    pub fn find_anon_type(&self, region: Region<'tcx>, br: &ty::BoundRegion) -> Option<&hir::Ty> {\n         if let Some(anon_reg) = self.is_suitable_anonymous_region(region) {\n-            let (def_id, _) = anon_reg;\n+            let def_id = anon_reg.def_id;\n             if let Some(node_id) = self.tcx.hir.as_local_node_id(def_id) {\n                 let ret_ty = self.tcx.type_of(def_id);\n                 if let ty::TyFnDef(_, _) = ret_ty.sty {\n-                    if let hir_map::NodeItem(it) = self.tcx.hir.get(node_id) {\n-                        if let hir::ItemFn(ref fndecl, _, _, _, _, _) = it.node {\n-                            return fndecl\n-                                       .inputs\n-                                       .iter()\n-                                       .filter_map(|arg| {\n-                                let mut nested_visitor = FindNestedTypeVisitor {\n-                                    infcx: &self,\n-                                    hir_map: &self.tcx.hir,\n-                                    bound_region: *br,\n-                                    found_type: None,\n-                                };\n-                                nested_visitor.visit_ty(&**arg);\n-                                if nested_visitor.found_type.is_some() {\n-                                    nested_visitor.found_type\n-                                } else {\n-                                    None\n-                                }\n-                            })\n-                                       .next();\n-                        }\n-                    }\n+                    let inputs: &[_] =\n+                        match self.tcx.hir.get(node_id) {\n+                            hir_map::NodeItem(&hir::Item {\n+                                                  node: hir::ItemFn(ref fndecl, ..), ..\n+                                              }) => &fndecl.inputs,\n+                            hir_map::NodeTraitItem(&hir::TraitItem {\n+                                                   node: hir::TraitItemKind::Method(ref fndecl, ..),\n+                                                   ..\n+                                               }) => &fndecl.decl.inputs,\n+                            hir_map::NodeImplItem(&hir::ImplItem {\n+                                                  node: hir::ImplItemKind::Method(ref fndecl, ..),\n+                                                  ..\n+                                              }) => &fndecl.decl.inputs,\n+\n+                            _ => &[],\n+                        };\n+\n+                    return inputs\n+                               .iter()\n+                               .filter_map(|arg| {\n+                                               self.find_component_for_bound_region(&**arg, br)\n+                                           })\n+                               .next();\n                 }\n             }\n         }\n         None\n     }\n+\n+    // This method creates a FindNestedTypeVisitor which returns the type corresponding\n+    // to the anonymous region.\n+    fn find_component_for_bound_region(&self,\n+                                       arg: &'gcx hir::Ty,\n+                                       br: &ty::BoundRegion)\n+                                       -> Option<(&'gcx hir::Ty)> {\n+        let mut nested_visitor = FindNestedTypeVisitor {\n+            infcx: &self,\n+            hir_map: &self.tcx.hir,\n+            bound_region: *br,\n+            found_type: None,\n+        };\n+        nested_visitor.visit_ty(arg);\n+        nested_visitor.found_type\n+    }\n }\n \n // The FindNestedTypeVisitor captures the corresponding `hir::Ty` of the\n@@ -176,8 +211,8 @@ impl<'a, 'gcx, 'tcx> Visitor<'gcx> for FindNestedTypeVisitor<'a, 'gcx, 'tcx> {\n             hir::TyRptr(ref lifetime, _) => {\n                 match self.infcx.tcx.named_region_map.defs.get(&lifetime.id) {\n                     // the lifetime of the TyRptr\n-                    Some(&rl::Region::LateBoundAnon(debuijn_index, anon_index)) => {\n-                        if debuijn_index.depth == 1 && anon_index == br_index {\n+                    Some(&rl::Region::LateBoundAnon(debruijn_index, anon_index)) => {\n+                        if debruijn_index.depth == 1 && anon_index == br_index {\n                             self.found_type = Some(arg);\n                             return; // we can stop visiting now\n                         }\n@@ -191,10 +226,77 @@ impl<'a, 'gcx, 'tcx> Visitor<'gcx> for FindNestedTypeVisitor<'a, 'gcx, 'tcx> {\n                     }\n                 }\n             }\n+            // Checks if it is of type `hir::TyPath` which corresponds to a struct.\n+            hir::TyPath(_) => {\n+                let subvisitor = &mut TyPathVisitor {\n+                                          infcx: self.infcx,\n+                                          found_it: false,\n+                                          bound_region: self.bound_region,\n+                                          hir_map: self.hir_map,\n+                                      };\n+                intravisit::walk_ty(subvisitor, arg); // call walk_ty; as visit_ty is empty,\n+                // this will visit only outermost type\n+                if subvisitor.found_it {\n+                    self.found_type = Some(arg);\n+                }\n+            }\n             _ => {}\n         }\n         // walk the embedded contents: e.g., if we are visiting `Vec<&Foo>`,\n         // go on to visit `&Foo`\n         intravisit::walk_ty(self, arg);\n     }\n }\n+\n+// The visitor captures the corresponding `hir::Ty` of the anonymous region\n+// in the case of structs ie. `hir::TyPath`.\n+// This visitor would be invoked for each lifetime corresponding to a struct,\n+// and would walk the types like Vec<Ref> in the above example and Ref looking for the HIR\n+// where that lifetime appears. This allows us to highlight the\n+// specific part of the type in the error message.\n+struct TyPathVisitor<'a, 'gcx: 'a + 'tcx, 'tcx: 'a> {\n+    infcx: &'a InferCtxt<'a, 'gcx, 'tcx>,\n+    hir_map: &'a hir::map::Map<'gcx>,\n+    found_it: bool,\n+    bound_region: ty::BoundRegion,\n+}\n+\n+impl<'a, 'gcx, 'tcx> Visitor<'gcx> for TyPathVisitor<'a, 'gcx, 'tcx> {\n+    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'gcx> {\n+        NestedVisitorMap::OnlyBodies(&self.hir_map)\n+    }\n+\n+    fn visit_lifetime(&mut self, lifetime: &hir::Lifetime) {\n+        let br_index = match self.bound_region {\n+            ty::BrAnon(index) => index,\n+            _ => return,\n+        };\n+\n+        match self.infcx.tcx.named_region_map.defs.get(&lifetime.id) {\n+            // the lifetime of the TyPath!\n+            Some(&rl::Region::LateBoundAnon(debruijn_index, anon_index)) => {\n+                if debruijn_index.depth == 1 && anon_index == br_index {\n+                    self.found_it = true;\n+                }\n+            }\n+            Some(&rl::Region::Static) |\n+            Some(&rl::Region::EarlyBound(_, _)) |\n+            Some(&rl::Region::LateBound(_, _)) |\n+            Some(&rl::Region::Free(_, _)) |\n+            None => {\n+                debug!(\"no arg found\");\n+            }\n+        }\n+    }\n+\n+    fn visit_ty(&mut self, arg: &'gcx hir::Ty) {\n+        // ignore nested types\n+        //\n+        // If you have a type like `Foo<'a, &Ty>` we\n+        // are only interested in the immediate lifetimes ('a).\n+        //\n+        // Making `visit_ty` empty will ignore the `&Ty` embedded\n+        // inside, it will get reached by the outer visitor.\n+        debug!(\"`Ty` corresponding to a struct is {:?}\", arg);\n+    }\n+}"}, {"sha": "edf9ca89b3394e7bc11ffd2d1758d5c8ab69ee08", "filename": "src/librustc/infer/error_reporting/mod.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=d29af3799964caec55e3ee806f2ac0f8d494e481", "patch": "@@ -75,8 +75,10 @@ use errors::{DiagnosticBuilder, DiagnosticStyledString};\n mod note;\n \n mod need_type_info;\n-mod util;\n+\n mod named_anon_conflict;\n+#[macro_use]\n+mod util;\n mod anon_anon_conflict;\n \n impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {"}, {"sha": "0aae008396a00615b09cd7386ac0baec47506c90", "filename": "src/librustc/infer/error_reporting/named_anon_conflict.rs", "status": "modified", "additions": 28, "deletions": 41, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnamed_anon_conflict.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnamed_anon_conflict.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnamed_anon_conflict.rs?ref=d29af3799964caec55e3ee806f2ac0f8d494e481", "patch": "@@ -11,7 +11,6 @@\n //! Error Reporting for Anonymous Region Lifetime Errors\n //! where one region is named and the other is anonymous.\n use infer::InferCtxt;\n-use ty;\n use infer::region_inference::RegionResolutionError::*;\n use infer::region_inference::RegionResolutionError;\n \n@@ -30,8 +29,8 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n         // where the anonymous region appears (there must always be one; we\n         // only introduced anonymous regions in parameters) as well as a\n         // version new_ty of its type where the anonymous region is replaced\n-        // with the named one.\n-        let (named, (arg, new_ty, br, is_first), (scope_def_id, _)) =\n+        // with the named one.//scope_def_id\n+        let (named, anon_arg_info, region_info) =\n             if sub.is_named_region() && self.is_suitable_anonymous_region(sup).is_some() {\n                 (sub,\n                  self.find_arg_with_anonymous_region(sup, sub).unwrap(),\n@@ -44,50 +43,38 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                 return false; // inapplicable\n             };\n \n-        // Here, we check for the case where the anonymous region\n-        // is in the return type.\n-        // FIXME(#42703) - Need to handle certain cases here.\n-        let ret_ty = self.tcx.type_of(scope_def_id);\n-        match ret_ty.sty {\n-            ty::TyFnDef(_, _) => {\n-                let sig = ret_ty.fn_sig(self.tcx);\n-                let late_bound_regions = self.tcx\n-                    .collect_referenced_late_bound_regions(&sig.output());\n-                if late_bound_regions.iter().any(|r| *r == br) {\n-                    return false;\n-                }\n-            }\n-            _ => {}\n-        }\n-\n-        // Here we check for the case where anonymous region\n-        // corresponds to self and if yes, we display E0312.\n-        // FIXME(#42700) - Need to format self properly to\n-        // enable E0621 for it.\n-        if is_first &&\n-           self.tcx\n-               .opt_associated_item(scope_def_id)\n-               .map(|i| i.method_has_self_argument)\n-               .unwrap_or(false) {\n+        let (arg, new_ty, br, is_first, scope_def_id, is_impl_item) = (anon_arg_info.arg,\n+                                                                       anon_arg_info.arg_ty,\n+                                                                       anon_arg_info.bound_region,\n+                                                                       anon_arg_info.is_first,\n+                                                                       region_info.def_id,\n+                                                                       region_info.is_impl_item);\n+        if is_impl_item {\n             return false;\n         }\n \n-        let (error_var, span_label_var) = if let Some(simple_name) = arg.pat.simple_name() {\n-            (format!(\"the type of `{}`\", simple_name), format!(\"the type of `{}`\", simple_name))\n+        if self.is_return_type_anon(scope_def_id, br) || self.is_self_anon(is_first, scope_def_id) {\n+            return false;\n         } else {\n-            (\"parameter type\".to_owned(), \"type\".to_owned())\n-        };\n \n-        struct_span_err!(self.tcx.sess,\n-                         span,\n-                         E0621,\n-                         \"explicit lifetime required in {}\",\n-                         error_var)\n-                .span_label(arg.pat.span,\n-                            format!(\"consider changing {} to `{}`\", span_label_var, new_ty))\n-                .span_label(span, format!(\"lifetime `{}` required\", named))\n-                .emit();\n+            let (error_var, span_label_var) = if let Some(simple_name) = arg.pat.simple_name() {\n+                (format!(\"the type of `{}`\", simple_name), format!(\"the type of `{}`\", simple_name))\n+            } else {\n+                (\"parameter type\".to_owned(), \"type\".to_owned())\n+            };\n+\n+            struct_span_err!(self.tcx.sess,\n+                             span,\n+                             E0621,\n+                             \"explicit lifetime required in {}\",\n+                             error_var)\n+                    .span_label(arg.pat.span,\n+                                format!(\"consider changing {} to `{}`\", span_label_var, new_ty))\n+                    .span_label(span, format!(\"lifetime `{}` required\", named))\n+                    .emit();\n \n+\n+        }\n         return true;\n     }\n }"}, {"sha": "04153038da89faaede49e3cfdc849454a4337f67", "filename": "src/librustc/infer/error_reporting/util.rs", "status": "modified", "additions": 116, "deletions": 40, "changes": 156, "blob_url": "https://github.com/rust-lang/rust/blob/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Flibrustc%2Finfer%2Ferror_reporting%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Flibrustc%2Finfer%2Ferror_reporting%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Futil.rs?ref=d29af3799964caec55e3ee806f2ac0f8d494e481", "patch": "@@ -16,6 +16,40 @@ use ty::{self, Region};\n use hir::def_id::DefId;\n use hir::map as hir_map;\n \n+macro_rules! or_false {\n+     ($v:expr) => {\n+          match $v {\n+               Some(v) => v,\n+               None => return false,\n+          }\n+     }\n+}\n+\n+// The struct contains the information about the anonymous region\n+// we are searching for.\n+pub struct AnonymousArgInfo<'tcx> {\n+    // the argument corresponding to the anonymous region\n+    pub arg: &'tcx hir::Arg,\n+    // the type corresponding to the anonymopus region argument\n+    pub arg_ty: ty::Ty<'tcx>,\n+    // the ty::BoundRegion corresponding to the anonymous region\n+    pub bound_region: ty::BoundRegion,\n+    // corresponds to id the argument is the first parameter\n+    // in the declaration\n+    pub is_first: bool,\n+}\n+\n+// This struct contains information regarding the\n+// Refree((FreeRegion) corresponding to lifetime conflict\n+pub struct FreeRegionInfo {\n+    // def id corresponding to FreeRegion\n+    pub def_id: DefId,\n+    // the bound region corresponding to FreeRegion\n+    pub boundregion: ty::BoundRegion,\n+    // checks if bound region is in Impl Item\n+    pub is_impl_item: bool,\n+}\n+\n impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n     // This method walks the Type of the function body arguments using\n     // `fold_regions()` function and returns the\n@@ -28,14 +62,12 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n     // i32, which is the type of y but with the anonymous region replaced\n     // with 'a, the corresponding bound region and is_first which is true if\n     // the hir::Arg is the first argument in the function declaration.\n-    pub fn find_arg_with_anonymous_region\n-        (&self,\n-         anon_region: Region<'tcx>,\n-         replace_region: Region<'tcx>)\n-         -> Option<(&hir::Arg, ty::Ty<'tcx>, ty::BoundRegion, bool)> {\n+    pub fn find_arg_with_anonymous_region(&self,\n+                                          anon_region: Region<'tcx>,\n+                                          replace_region: Region<'tcx>)\n+                                          -> Option<AnonymousArgInfo> {\n \n         if let ty::ReFree(ref free_region) = *anon_region {\n-\n             let id = free_region.scope;\n             let hir = &self.tcx.hir;\n             if let Some(node_id) = hir.as_local_node_id(id) {\n@@ -57,7 +89,12 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                                     });\n                                 if found_anon_region {\n                                     let is_first = index == 0;\n-                                    Some((arg, new_arg_ty, free_region.bound_region, is_first))\n+                                    Some(AnonymousArgInfo {\n+                                             arg: arg,\n+                                             arg_ty: new_arg_ty,\n+                                             bound_region: free_region.bound_region,\n+                                             is_first: is_first,\n+                                         })\n                                 } else {\n                                     None\n                                 }\n@@ -79,42 +116,81 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n \n     // This method returns whether the given Region is Anonymous\n     // and returns the DefId and the BoundRegion corresponding to the given region.\n-    pub fn is_suitable_anonymous_region(&self,\n-                                        region: Region<'tcx>)\n-                                        -> Option<(DefId, ty::BoundRegion)> {\n+    pub fn is_suitable_anonymous_region(&self, region: Region<'tcx>) -> Option<FreeRegionInfo> {\n         if let ty::ReFree(ref free_region) = *region {\n-            if let ty::BrAnon(..) = free_region.bound_region{\n-                    let anonymous_region_binding_scope = free_region.scope;\n-                    let node_id = self.tcx\n-                        .hir\n-                        .as_local_node_id(anonymous_region_binding_scope)\n-                        .unwrap();\n-                    match self.tcx.hir.find(node_id) {\n-                        Some(hir_map::NodeItem(..)) |\n-                        Some(hir_map::NodeTraitItem(..)) => {\n-                            // Success -- proceed to return Some below\n-                        }\n-                        Some(hir_map::NodeImplItem(..)) => {\n-                            let container_id = self.tcx\n-                                .associated_item(anonymous_region_binding_scope)\n-                                .container\n-                                .id();\n-                            if self.tcx.impl_trait_ref(container_id).is_some() {\n-                                // For now, we do not try to target impls of traits. This is\n-                                // because this message is going to suggest that the user\n-                                // change the fn signature, but they may not be free to do so,\n-                                // since the signature must match the trait.\n-                                //\n-                                // FIXME(#42706) -- in some cases, we could do better here.\n-                                return None;\n-                            }\n-                        }\n-                        _ => return None, // inapplicable\n-                        // we target only top-level functions\n+            if let ty::BrAnon(..) = free_region.bound_region {\n+                let anonymous_region_binding_scope = free_region.scope;\n+                let node_id = self.tcx\n+                    .hir\n+                    .as_local_node_id(anonymous_region_binding_scope)\n+                    .unwrap();\n+                let mut is_impl_item = false;\n+                match self.tcx.hir.find(node_id) {\n+\n+                    Some(hir_map::NodeItem(..)) |\n+                    Some(hir_map::NodeTraitItem(..)) => {\n+                        // Success -- proceed to return Some below\n                     }\n-                    return Some((anonymous_region_binding_scope, free_region.bound_region));\n+                    Some(hir_map::NodeImplItem(..)) => {\n+                        is_impl_item =\n+                            self.is_bound_region_in_impl_item(anonymous_region_binding_scope);\n+                    }\n+                    _ => return None,\n                 }\n+                return Some(FreeRegionInfo {\n+                                def_id: anonymous_region_binding_scope,\n+                                boundregion: free_region.bound_region,\n+                                is_impl_item: is_impl_item,\n+                            });\n             }\n-            None\n         }\n+        None\n+    }\n+\n+    // Here, we check for the case where the anonymous region\n+    // is in the return type.\n+    // FIXME(#42703) - Need to handle certain cases here.\n+    pub fn is_return_type_anon(&self, scope_def_id: DefId, br: ty::BoundRegion) -> bool {\n+        let ret_ty = self.tcx.type_of(scope_def_id);\n+        match ret_ty.sty {\n+            ty::TyFnDef(_, _) => {\n+                let sig = ret_ty.fn_sig(self.tcx);\n+                let late_bound_regions = self.tcx\n+                    .collect_referenced_late_bound_regions(&sig.output());\n+                if late_bound_regions.iter().any(|r| *r == br) {\n+                    return true;\n+                }\n+            }\n+            _ => {}\n+        }\n+        false\n+    }\n+    // Here we check for the case where anonymous region\n+    // corresponds to self and if yes, we display E0312.\n+    // FIXME(#42700) - Need to format self properly to\n+    // enable E0621 for it.\n+    pub fn is_self_anon(&self, is_first: bool, scope_def_id: DefId) -> bool {\n+        is_first &&\n+        self.tcx\n+            .opt_associated_item(scope_def_id)\n+            .map(|i| i.method_has_self_argument) == Some(true)\n+    }\n+\n+    // Here we check if the bound region is in Impl Item.\n+    pub fn is_bound_region_in_impl_item(&self, anonymous_region_binding_scope: DefId) -> bool {\n+        let container_id = self.tcx\n+            .associated_item(anonymous_region_binding_scope)\n+            .container\n+            .id();\n+        if self.tcx.impl_trait_ref(container_id).is_some() {\n+            // For now, we do not try to target impls of traits. This is\n+            // because this message is going to suggest that the user\n+            // change the fn signature, but they may not be free to do so,\n+            // since the signature must match the trait.\n+            //\n+            // FIXME(#42706) -- in some cases, we could do better here.\n+            return true;\n+        }\n+        false\n+    }\n }"}, {"sha": "152b2e2aa5ebc104d80936b458b66de4db488cb8", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=d29af3799964caec55e3ee806f2ac0f8d494e481", "patch": "@@ -14,9 +14,6 @@\n //!\n //! This API is completely unstable and subject to change.\n \n-#![crate_name = \"rustc\"]\n-#![crate_type = \"dylib\"]\n-#![crate_type = \"rlib\"]\n #![doc(html_logo_url = \"https://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n        html_favicon_url = \"https://doc.rust-lang.org/favicon.ico\",\n        html_root_url = \"https://doc.rust-lang.org/nightly/\")]\n@@ -29,7 +26,7 @@\n #![feature(core_intrinsics)]\n #![feature(discriminant_value)]\n #![feature(i128_type)]\n-#![feature(libc)]\n+#![cfg_attr(windows, feature(libc))]\n #![feature(never_type)]\n #![feature(nonzero)]\n #![feature(quote)]\n@@ -48,6 +45,7 @@ extern crate core;\n extern crate fmt_macros;\n extern crate getopts;\n extern crate graphviz;\n+#[cfg(windows)]\n extern crate libc;\n extern crate owning_ref;\n extern crate rustc_back;\n@@ -65,7 +63,9 @@ extern crate serialize as rustc_serialize; // used by deriving\n \n // Note that librustc doesn't actually depend on these crates, see the note in\n // `Cargo.toml` for this crate about why these are here.\n+#[allow(unused_extern_crates)]\n extern crate flate2;\n+#[allow(unused_extern_crates)]\n extern crate test;\n \n #[macro_use]"}, {"sha": "811bf9776101d4d5e0fd453d5e68c97a5e6e98b7", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=d29af3799964caec55e3ee806f2ac0f8d494e481", "patch": "@@ -30,7 +30,7 @@ declare_lint! {\n \n declare_lint! {\n     pub UNUSED_EXTERN_CRATES,\n-    Allow,\n+    Warn,\n     \"extern crates that are never used\"\n }\n "}, {"sha": "1fe53882c70d339ad15d1c7659b71b9c5d742458", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=d29af3799964caec55e3ee806f2ac0f8d494e481", "patch": "@@ -843,6 +843,8 @@ pub struct GlobalCtxt<'tcx> {\n \n     pub maybe_unused_trait_imports: NodeSet,\n \n+    pub maybe_unused_extern_crates: Vec<(NodeId, Span)>,\n+\n     // Internal cache for metadata decoding. No need to track deps on this.\n     pub rcache: RefCell<FxHashMap<ty::CReaderCacheKey, Ty<'tcx>>>,\n \n@@ -1084,6 +1086,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n             mir_passes,\n             freevars: RefCell::new(resolutions.freevars),\n             maybe_unused_trait_imports: resolutions.maybe_unused_trait_imports,\n+            maybe_unused_extern_crates: resolutions.maybe_unused_extern_crates,\n             rcache: RefCell::new(FxHashMap()),\n             normalized_cache: RefCell::new(FxHashMap()),\n             inhabitedness_cache: RefCell::new(FxHashMap()),"}, {"sha": "eadf80871fc95e3ee2742c5971f575235b7347de", "filename": "src/librustc/ty/item_path.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Flibrustc%2Fty%2Fitem_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Flibrustc%2Fty%2Fitem_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fitem_path.rs?ref=d29af3799964caec55e3ee806f2ac0f8d494e481", "patch": "@@ -13,7 +13,6 @@ use hir::def_id::{CrateNum, DefId, CRATE_DEF_INDEX, LOCAL_CRATE};\n use ty::{self, Ty, TyCtxt};\n use syntax::ast;\n use syntax::symbol::Symbol;\n-use syntax_pos::DUMMY_SP;\n \n use std::cell::Cell;\n \n@@ -222,11 +221,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         let use_types = !self.is_default_impl(impl_def_id) && (!impl_def_id.is_local() || {\n             // Otherwise, use filename/line-number if forced.\n             let force_no_types = FORCE_IMPL_FILENAME_LINE.with(|f| f.get());\n-            !force_no_types && {\n-                // Otherwise, use types if we can query them without inducing a cycle.\n-                ty::queries::impl_trait_ref::try_get(self, DUMMY_SP, impl_def_id).is_ok() &&\n-                    ty::queries::type_of::try_get(self, DUMMY_SP, impl_def_id).is_ok()\n-            }\n+            !force_no_types\n         });\n \n         if !use_types {"}, {"sha": "03e093c5a50ef5b2d05d54450d4b0570b101bef7", "filename": "src/librustc/ty/maps.rs", "status": "modified", "additions": 88, "deletions": 31, "changes": 119, "blob_url": "https://github.com/rust-lang/rust/blob/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Flibrustc%2Fty%2Fmaps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Flibrustc%2Fty%2Fmaps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps.rs?ref=d29af3799964caec55e3ee806f2ac0f8d494e481", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n use dep_graph::{DepConstructor, DepNode, DepNodeIndex};\n+use errors::{Diagnostic, DiagnosticBuilder};\n use hir::def_id::{CrateNum, DefId, LOCAL_CRATE};\n use hir::def::Def;\n use hir;\n@@ -32,7 +33,7 @@ use util::common::{profq_msg, ProfileQueriesMsg};\n \n use rustc_data_structures::indexed_vec::IndexVec;\n use rustc_data_structures::fx::FxHashMap;\n-use std::cell::{RefCell, RefMut};\n+use std::cell::{RefCell, RefMut, Cell};\n use std::fmt::Debug;\n use std::hash::Hash;\n use std::marker::PhantomData;\n@@ -188,7 +189,18 @@ impl<'tcx> Value<'tcx> for ty::SymbolName {\n \n struct QueryMap<D: QueryDescription> {\n     phantom: PhantomData<D>,\n-    map: FxHashMap<D::Key, (D::Value, DepNodeIndex)>,\n+    map: FxHashMap<D::Key, QueryValue<D::Value>>,\n+}\n+\n+struct QueryValue<T> {\n+    value: T,\n+    index: DepNodeIndex,\n+    diagnostics: Option<Box<QueryDiagnostics>>,\n+}\n+\n+struct QueryDiagnostics {\n+    diagnostics: Vec<Diagnostic>,\n+    emitted_diagnostics: Cell<bool>,\n }\n \n impl<M: QueryDescription> QueryMap<M> {\n@@ -200,13 +212,15 @@ impl<M: QueryDescription> QueryMap<M> {\n     }\n }\n \n-pub struct CycleError<'a, 'tcx: 'a> {\n+struct CycleError<'a, 'tcx: 'a> {\n     span: Span,\n     cycle: RefMut<'a, [(Span, Query<'tcx>)]>,\n }\n \n impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n-    pub fn report_cycle(self, CycleError { span, cycle }: CycleError) {\n+    fn report_cycle(self, CycleError { span, cycle }: CycleError)\n+        -> DiagnosticBuilder<'a>\n+    {\n         // Subtle: release the refcell lock before invoking `describe()`\n         // below by dropping `cycle`.\n         let stack = cycle.to_vec();\n@@ -235,8 +249,8 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n             err.note(&format!(\"...which then again requires {}, completing the cycle.\",\n                               stack[0].1.describe(self)));\n \n-            err.emit();\n-        });\n+            return err\n+        })\n     }\n \n     fn cycle_check<F, R>(self, span: Span, query: Query<'gcx>, compute: F)\n@@ -502,6 +516,18 @@ impl<'tcx> QueryDescription for queries::is_panic_runtime<'tcx> {\n     }\n }\n \n+impl<'tcx> QueryDescription for queries::is_compiler_builtins<'tcx> {\n+    fn describe(_: TyCtxt, _: DefId) -> String {\n+        \"checking if the crate is_compiler_builtins\".to_string()\n+    }\n+}\n+\n+impl<'tcx> QueryDescription for queries::has_global_allocator<'tcx> {\n+    fn describe(_: TyCtxt, _: DefId) -> String {\n+        \"checking if the crate has_global_allocator\".to_string()\n+    }\n+}\n+\n impl<'tcx> QueryDescription for queries::extern_crate<'tcx> {\n     fn describe(_: TyCtxt, _: DefId) -> String {\n         \"getting crate's ExternCrateData\".to_string()\n@@ -625,10 +651,20 @@ macro_rules! define_maps {\n                     )\n                 );\n \n-                if let Some(&(ref result, dep_node_index)) = tcx.maps.$name.borrow().map.get(&key) {\n-                    tcx.dep_graph.read_index(dep_node_index);\n+                if let Some(value) = tcx.maps.$name.borrow().map.get(&key) {\n+                    if let Some(ref d) = value.diagnostics {\n+                        if !d.emitted_diagnostics.get() {\n+                            d.emitted_diagnostics.set(true);\n+                            let handle = tcx.sess.diagnostic();\n+                            for diagnostic in d.diagnostics.iter() {\n+                                DiagnosticBuilder::new_diagnostic(handle, diagnostic.clone())\n+                                    .emit();\n+                            }\n+                        }\n+                    }\n                     profq_msg!(tcx, ProfileQueriesMsg::CacheHit);\n-                    return Ok(f(result));\n+                    tcx.dep_graph.read_index(value.index);\n+                    return Ok(f(&value.value));\n                 }\n                 // else, we are going to run the provider:\n                 profq_msg!(tcx, ProfileQueriesMsg::ProviderBegin);\n@@ -640,41 +676,60 @@ macro_rules! define_maps {\n                     span = key.default_span(tcx)\n                 }\n \n-                let (result, dep_node_index) = tcx.cycle_check(span, Query::$name(key), || {\n+                let res = tcx.cycle_check(span, Query::$name(key), || {\n                     let dep_node = Self::to_dep_node(tcx, &key);\n \n-                    if dep_node.kind.is_anon() {\n-                        tcx.dep_graph.with_anon_task(dep_node.kind, || {\n-                            let provider = tcx.maps.providers[key.map_crate()].$name;\n-                            provider(tcx.global_tcx(), key)\n-                        })\n-                    } else {\n-                        fn run_provider<'a, 'tcx, 'lcx>(tcx: TyCtxt<'a, 'tcx, 'lcx>,\n-                                                        key: $K)\n-                                                        -> $V {\n-                            let provider = tcx.maps.providers[key.map_crate()].$name;\n-                            provider(tcx.global_tcx(), key)\n+                    tcx.sess.diagnostic().track_diagnostics(|| {\n+                        if dep_node.kind.is_anon() {\n+                            tcx.dep_graph.with_anon_task(dep_node.kind, || {\n+                                let provider = tcx.maps.providers[key.map_crate()].$name;\n+                                provider(tcx.global_tcx(), key)\n+                            })\n+                        } else {\n+                            fn run_provider<'a, 'tcx, 'lcx>(tcx: TyCtxt<'a, 'tcx, 'lcx>,\n+                                                            key: $K)\n+                                                            -> $V {\n+                                let provider = tcx.maps.providers[key.map_crate()].$name;\n+                                provider(tcx.global_tcx(), key)\n+                            }\n+\n+                            tcx.dep_graph.with_task(dep_node, tcx, key, run_provider)\n                         }\n-\n-                        tcx.dep_graph.with_task(dep_node, tcx, key, run_provider)\n-                    }\n+                    })\n                 })?;\n                 profq_msg!(tcx, ProfileQueriesMsg::ProviderEnd);\n+                let ((result, dep_node_index), diagnostics) = res;\n \n                 tcx.dep_graph.read_index(dep_node_index);\n \n+                let value = QueryValue {\n+                    value: result,\n+                    index: dep_node_index,\n+                    diagnostics: if diagnostics.len() == 0 {\n+                        None\n+                    } else {\n+                        Some(Box::new(QueryDiagnostics {\n+                            diagnostics,\n+                            emitted_diagnostics: Cell::new(true),\n+                        }))\n+                    },\n+                };\n+\n                 Ok(f(&tcx.maps\n                          .$name\n                          .borrow_mut()\n                          .map\n                          .entry(key)\n-                         .or_insert((result, dep_node_index))\n-                         .0))\n+                         .or_insert(value)\n+                         .value))\n             }\n \n             pub fn try_get(tcx: TyCtxt<'a, $tcx, 'lcx>, span: Span, key: $K)\n-                           -> Result<$V, CycleError<'a, $tcx>> {\n-                Self::try_get_with(tcx, span, key, Clone::clone)\n+                           -> Result<$V, DiagnosticBuilder<'a>> {\n+                match Self::try_get_with(tcx, span, key, Clone::clone) {\n+                    Ok(e) => Ok(e),\n+                    Err(e) => Err(tcx.report_cycle(e)),\n+                }\n             }\n \n             pub fn force(tcx: TyCtxt<'a, $tcx, 'lcx>, span: Span, key: $K) {\n@@ -683,7 +738,7 @@ macro_rules! define_maps {\n \n                 match Self::try_get_with(tcx, span, key, |_| ()) {\n                     Ok(()) => {}\n-                    Err(e) => tcx.report_cycle(e)\n+                    Err(e) => tcx.report_cycle(e).emit(),\n                 }\n             }\n         })*\n@@ -720,8 +775,8 @@ macro_rules! define_maps {\n         impl<'a, $tcx, 'lcx> TyCtxtAt<'a, $tcx, 'lcx> {\n             $($(#[$attr])*\n             pub fn $name(self, key: $K) -> $V {\n-                queries::$name::try_get(self.tcx, self.span, key).unwrap_or_else(|e| {\n-                    self.report_cycle(e);\n+                queries::$name::try_get(self.tcx, self.span, key).unwrap_or_else(|mut e| {\n+                    e.emit();\n                     Value::from_cycle_error(self.global_tcx())\n                 })\n             })*\n@@ -1047,6 +1102,8 @@ define_maps! { <'tcx>\n \n     [] is_allocator: IsAllocator(DefId) -> bool,\n     [] is_panic_runtime: IsPanicRuntime(DefId) -> bool,\n+    [] is_compiler_builtins: IsCompilerBuiltins(DefId) -> bool,\n+    [] has_global_allocator: HasGlobalAllocator(DefId) -> bool,\n \n     [] extern_crate: ExternCrate(DefId) -> Rc<Option<ExternCrate>>,\n "}, {"sha": "8cabb88ee988d531f28517dca3e3e877d611b64c", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=d29af3799964caec55e3ee806f2ac0f8d494e481", "patch": "@@ -132,6 +132,7 @@ pub struct Resolutions {\n     pub freevars: FreevarMap,\n     pub trait_map: TraitMap,\n     pub maybe_unused_trait_imports: NodeSet,\n+    pub maybe_unused_extern_crates: Vec<(NodeId, Span)>,\n     pub export_map: ExportMap,\n }\n \n@@ -1687,12 +1688,15 @@ impl<'a, 'gcx, 'tcx> AdtDef {\n     pub fn sized_constraint(&self, tcx: TyCtxt<'a, 'gcx, 'tcx>) -> &'tcx [Ty<'tcx>] {\n         match queries::adt_sized_constraint::try_get(tcx, DUMMY_SP, self.did) {\n             Ok(tys) => tys,\n-            Err(_) => {\n+            Err(mut bug) => {\n                 debug!(\"adt_sized_constraint: {:?} is recursive\", self);\n                 // This should be reported as an error by `check_representable`.\n                 //\n                 // Consider the type as Sized in the meanwhile to avoid\n-                // further errors.\n+                // further errors. Delay our `bug` diagnostic here to get\n+                // emitted later as well in case we accidentally otherwise don't\n+                // emit an error.\n+                bug.delay_as_bug();\n                 tcx.intern_type_list(&[tcx.types.err])\n             }\n         }"}, {"sha": "4e4c7b107c4292132378bfb6e4f025295a4da809", "filename": "src/librustc/ty/util.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Flibrustc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Flibrustc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Futil.rs?ref=d29af3799964caec55e3ee806f2ac0f8d494e481", "patch": "@@ -1077,11 +1077,15 @@ fn needs_drop_raw<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     let needs_drop = |ty: Ty<'tcx>| -> bool {\n         match ty::queries::needs_drop_raw::try_get(tcx, DUMMY_SP, param_env.and(ty)) {\n             Ok(v) => v,\n-            Err(_) => {\n+            Err(mut bug) => {\n                 // Cycles should be reported as an error by `check_representable`.\n                 //\n-                // Consider the type as not needing drop in the meanwhile to avoid\n-                // further errors.\n+                // Consider the type as not needing drop in the meanwhile to\n+                // avoid further errors.\n+                //\n+                // In case we forgot to emit a bug elsewhere, delay our\n+                // diagnostic to get emitted as a compiler bug.\n+                bug.delay_as_bug();\n                 false\n             }\n         }"}, {"sha": "d4a020657616a05c93cd023cc9a2708e3a0811f8", "filename": "src/librustc_apfloat/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Flibrustc_apfloat%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Flibrustc_apfloat%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_apfloat%2Flib.rs?ref=d29af3799964caec55e3ee806f2ac0f8d494e481", "patch": "@@ -39,7 +39,6 @@\n //!\n //! This API is completely unstable and subject to change.\n \n-#![crate_name = \"rustc_apfloat\"]\n #![doc(html_logo_url = \"https://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n       html_favicon_url = \"https://doc.rust-lang.org/favicon.ico\",\n       html_root_url = \"https://doc.rust-lang.org/nightly/\")]"}, {"sha": "6a9833d3784a487c637661e9f98312b179aec187", "filename": "src/librustc_back/lib.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Flibrustc_back%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Flibrustc_back%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Flib.rs?ref=d29af3799964caec55e3ee806f2ac0f8d494e481", "patch": "@@ -21,9 +21,6 @@\n //! one that doesn't; the one that doesn't might get decent parallel\n //! build speedups.\n \n-#![crate_name = \"rustc_back\"]\n-#![crate_type = \"dylib\"]\n-#![crate_type = \"rlib\"]\n #![doc(html_logo_url = \"https://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n       html_favicon_url = \"https://doc.rust-lang.org/favicon.ico\",\n       html_root_url = \"https://doc.rust-lang.org/nightly/\")]"}, {"sha": "112f424f7a8bb46b64f56984bc2f9d108fae44f4", "filename": "src/librustc_back/target/haiku_base.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Flibrustc_back%2Ftarget%2Fhaiku_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Flibrustc_back%2Ftarget%2Fhaiku_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fhaiku_base.rs?ref=d29af3799964caec55e3ee806f2ac0f8d494e481", "patch": "@@ -20,7 +20,6 @@ pub fn opts() -> TargetOptions {\n         target_family: Some(\"unix\".to_string()),\n         relro_level: RelroLevel::Full,\n         linker_is_gnu: true,\n-        no_integrated_as: true,\n         .. Default::default()\n     }\n }"}, {"sha": "eb47144d1f995f5431ad9d366776afdcd4767175", "filename": "src/librustc_bitflags/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Flibrustc_bitflags%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Flibrustc_bitflags%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_bitflags%2Flib.rs?ref=d29af3799964caec55e3ee806f2ac0f8d494e481", "patch": "@@ -9,8 +9,6 @@\n // except according to those terms.\n \n \n-#![crate_name = \"rustc_bitflags\"]\n-#![crate_type = \"rlib\"]\n #![no_std]\n #![deny(warnings)]\n "}, {"sha": "25f02537490fa8d694a52ff0a366692622c54d45", "filename": "src/librustc_borrowck/Cargo.toml", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Flibrustc_borrowck%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Flibrustc_borrowck%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2FCargo.toml?ref=d29af3799964caec55e3ee806f2ac0f8d494e481", "patch": "@@ -15,6 +15,5 @@ syntax = { path = \"../libsyntax\" }\n syntax_pos = { path = \"../libsyntax_pos\" }\n graphviz = { path = \"../libgraphviz\" }\n rustc = { path = \"../librustc\" }\n-rustc_data_structures = { path = \"../librustc_data_structures\" }\n rustc_mir = { path = \"../librustc_mir\" }\n rustc_errors = { path = \"../librustc_errors\" }"}, {"sha": "9bedbfed5db6d3039b3e3a61dfe926042cb28521", "filename": "src/librustc_borrowck/lib.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Flibrustc_borrowck%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Flibrustc_borrowck%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Flib.rs?ref=d29af3799964caec55e3ee806f2ac0f8d494e481", "patch": "@@ -8,9 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![crate_name = \"rustc_borrowck\"]\n-#![crate_type = \"dylib\"]\n-#![crate_type = \"rlib\"]\n #![doc(html_logo_url = \"https://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n       html_favicon_url = \"https://doc.rust-lang.org/favicon.ico\",\n       html_root_url = \"https://doc.rust-lang.org/nightly/\")]\n@@ -31,9 +28,7 @@ extern crate rustc_errors as errors;\n extern crate graphviz as dot;\n #[macro_use]\n extern crate rustc;\n-extern crate rustc_data_structures;\n extern crate rustc_mir;\n-extern crate core; // for NonZero\n \n pub use borrowck::check_crate;\n pub use borrowck::build_borrowck_dataflow_data_for_fn;"}, {"sha": "9fedee80d46a8e748804199cc2b621075ed8b787", "filename": "src/librustc_const_eval/lib.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Flibrustc_const_eval%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Flibrustc_const_eval%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_eval%2Flib.rs?ref=d29af3799964caec55e3ee806f2ac0f8d494e481", "patch": "@@ -14,9 +14,6 @@\n //!\n //! This API is completely unstable and subject to change.\n \n-#![crate_name = \"rustc_const_eval\"]\n-#![crate_type = \"dylib\"]\n-#![crate_type = \"rlib\"]\n #![doc(html_logo_url = \"https://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n       html_favicon_url = \"https://doc.rust-lang.org/favicon.ico\",\n       html_root_url = \"https://doc.rust-lang.org/nightly/\")]"}, {"sha": "93b70ef8e4a5856a1e13a3f1529bd003373bae56", "filename": "src/librustc_const_math/lib.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Flibrustc_const_math%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Flibrustc_const_math%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_math%2Flib.rs?ref=d29af3799964caec55e3ee806f2ac0f8d494e481", "patch": "@@ -14,9 +14,6 @@\n //!\n //! This API is completely unstable and subject to change.\n \n-#![crate_name = \"rustc_const_math\"]\n-#![crate_type = \"dylib\"]\n-#![crate_type = \"rlib\"]\n #![doc(html_logo_url = \"https://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n       html_favicon_url = \"https://doc.rust-lang.org/favicon.ico\",\n       html_root_url = \"https://doc.rust-lang.org/nightly/\")]"}, {"sha": "da00ebc4b9ee90a21b4dd3050a2907ceef226cfd", "filename": "src/librustc_data_structures/lib.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Flibrustc_data_structures%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Flibrustc_data_structures%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Flib.rs?ref=d29af3799964caec55e3ee806f2ac0f8d494e481", "patch": "@@ -16,9 +16,6 @@\n //!\n //! This API is completely unstable and subject to change.\n \n-#![crate_name = \"rustc_data_structures\"]\n-#![crate_type = \"dylib\"]\n-#![crate_type = \"rlib\"]\n #![doc(html_logo_url = \"https://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n       html_favicon_url = \"https://www.rust-lang.org/favicon.ico\",\n       html_root_url = \"https://doc.rust-lang.org/nightly/\")]"}, {"sha": "000d89241a427b756ba8b578d7c0b6ea94b3d9c9", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=d29af3799964caec55e3ee806f2ac0f8d494e481", "patch": "@@ -877,6 +877,7 @@ pub fn phase_2_configure_and_expand<F>(sess: &Session,\n             export_map: resolver.export_map,\n             trait_map: resolver.trait_map,\n             maybe_unused_trait_imports: resolver.maybe_unused_trait_imports,\n+            maybe_unused_extern_crates: resolver.maybe_unused_extern_crates,\n         },\n         hir_forest,\n     })"}, {"sha": "1915a1c86484a6148239c3714882c42fe49a9ce8", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=d29af3799964caec55e3ee806f2ac0f8d494e481", "patch": "@@ -14,16 +14,13 @@\n //!\n //! This API is completely unstable and subject to change.\n \n-#![crate_name = \"rustc_driver\"]\n-#![crate_type = \"dylib\"]\n-#![crate_type = \"rlib\"]\n #![doc(html_logo_url = \"https://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n       html_favicon_url = \"https://doc.rust-lang.org/favicon.ico\",\n       html_root_url = \"https://doc.rust-lang.org/nightly/\")]\n #![deny(warnings)]\n \n #![feature(box_syntax)]\n-#![feature(libc)]\n+#![cfg_attr(unix, feature(libc))]\n #![feature(quote)]\n #![feature(rustc_diagnostic_macros)]\n #![feature(set_stdio)]\n@@ -32,6 +29,7 @@ extern crate arena;\n extern crate getopts;\n extern crate graphviz;\n extern crate env_logger;\n+#[cfg(unix)]\n extern crate libc;\n extern crate rustc;\n extern crate rustc_allocator;"}, {"sha": "2c8d8b4691f0a10356be35771859713d382eb267", "filename": "src/librustc_errors/diagnostic_builder.rs", "status": "modified", "additions": 26, "deletions": 5, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Flibrustc_errors%2Fdiagnostic_builder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Flibrustc_errors%2Fdiagnostic_builder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Fdiagnostic_builder.rs?ref=d29af3799964caec55e3ee806f2ac0f8d494e481", "patch": "@@ -98,7 +98,7 @@ impl<'a> DiagnosticBuilder<'a> {\n             }\n         };\n \n-        self.handler.emitter.borrow_mut().emit(&self);\n+        self.handler.emit_db(&self);\n         self.cancel();\n \n         if is_error {\n@@ -110,6 +110,22 @@ impl<'a> DiagnosticBuilder<'a> {\n         // }\n     }\n \n+    /// Delay emission of this diagnostic as a bug.\n+    ///\n+    /// This can be useful in contexts where an error indicates a bug but\n+    /// typically this only happens when other compilation errors have already\n+    /// happened. In those cases this can be used to defer emission of this\n+    /// diagnostic as a bug in the compiler only if no other errors have been\n+    /// emitted.\n+    ///\n+    /// In the meantime, though, callsites are required to deal with the \"bug\"\n+    /// locally in whichever way makes the most sense.\n+    pub fn delay_as_bug(&mut self) {\n+        self.level = Level::Bug;\n+        *self.handler.delayed_span_bug.borrow_mut() = Some(self.diagnostic.clone());\n+        self.cancel();\n+    }\n+\n     /// Add a span/label to be included in the resulting snippet.\n     /// This is pushed onto the `MultiSpan` that was created when the\n     /// diagnostic was first built. If you don't call this function at\n@@ -178,10 +194,15 @@ impl<'a> DiagnosticBuilder<'a> {\n                          code: Option<String>,\n                          message: &str)\n                          -> DiagnosticBuilder<'a> {\n-        DiagnosticBuilder {\n-            handler,\n-            diagnostic: Diagnostic::new_with_code(level, code, message)\n-        }\n+        let diagnostic = Diagnostic::new_with_code(level, code, message);\n+        DiagnosticBuilder::new_diagnostic(handler, diagnostic)\n+    }\n+\n+    /// Creates a new `DiagnosticBuilder` with an already constructed\n+    /// diagnostic.\n+    pub fn new_diagnostic(handler: &'a Handler, diagnostic: Diagnostic)\n+                         -> DiagnosticBuilder<'a> {\n+        DiagnosticBuilder { handler, diagnostic }\n     }\n }\n "}, {"sha": "53d90531cc946a4c043d7c7983200f0f6ffc1228", "filename": "src/librustc_errors/emitter.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Flibrustc_errors%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Flibrustc_errors%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Femitter.rs?ref=d29af3799964caec55e3ee806f2ac0f8d494e481", "patch": "@@ -311,7 +311,9 @@ impl EmitterWriter {\n         if line.annotations.len() == 1 {\n             if let Some(ref ann) = line.annotations.get(0) {\n                 if let AnnotationType::MultilineStart(depth) = ann.annotation_type {\n-                    if source_string[0..ann.start_col].trim() == \"\" {\n+                    if source_string.chars()\n+                                    .take(ann.start_col)\n+                                    .all(|c| c.is_whitespace()) {\n                         let style = if ann.is_primary {\n                             Style::UnderlinePrimary\n                         } else {"}, {"sha": "870bb01bb9ffb7963ff6a6b6057721a690e28c31", "filename": "src/librustc_errors/lib.rs", "status": "modified", "additions": 30, "deletions": 15, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Flibrustc_errors%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Flibrustc_errors%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Flib.rs?ref=d29af3799964caec55e3ee806f2ac0f8d494e481", "patch": "@@ -8,9 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![crate_name = \"rustc_errors\"]\n-#![crate_type = \"dylib\"]\n-#![crate_type = \"rlib\"]\n #![doc(html_logo_url = \"https://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n       html_favicon_url = \"https://doc.rust-lang.org/favicon.ico\",\n       html_root_url = \"https://doc.rust-lang.org/nightly/\")]\n@@ -19,10 +16,11 @@\n #![feature(custom_attribute)]\n #![allow(unused_attributes)]\n #![feature(range_contains)]\n-#![feature(libc)]\n+#![cfg_attr(unix, feature(libc))]\n #![feature(conservative_impl_trait)]\n \n extern crate term;\n+#[cfg(unix)]\n extern crate libc;\n extern crate serialize as rustc_serialize;\n extern crate syntax_pos;\n@@ -35,8 +33,9 @@ use emitter::{Emitter, EmitterWriter};\n \n use std::borrow::Cow;\n use std::cell::{RefCell, Cell};\n-use std::{error, fmt};\n+use std::mem;\n use std::rc::Rc;\n+use std::{error, fmt};\n \n mod diagnostic;\n mod diagnostic_builder;\n@@ -274,7 +273,8 @@ pub struct Handler {\n     pub can_emit_warnings: bool,\n     treat_err_as_bug: bool,\n     continue_after_error: Cell<bool>,\n-    delayed_span_bug: RefCell<Option<(MultiSpan, String)>>,\n+    delayed_span_bug: RefCell<Option<Diagnostic>>,\n+    tracked_diagnostics: RefCell<Option<Vec<Diagnostic>>>,\n }\n \n impl Handler {\n@@ -298,6 +298,7 @@ impl Handler {\n             treat_err_as_bug,\n             continue_after_error: Cell::new(true),\n             delayed_span_bug: RefCell::new(None),\n+            tracked_diagnostics: RefCell::new(None),\n         }\n     }\n \n@@ -439,8 +440,9 @@ impl Handler {\n         if self.treat_err_as_bug {\n             self.span_bug(sp, msg);\n         }\n-        let mut delayed = self.delayed_span_bug.borrow_mut();\n-        *delayed = Some((sp.into(), msg.to_string()));\n+        let mut diagnostic = Diagnostic::new(Level::Bug, msg);\n+        diagnostic.set_span(sp.into());\n+        *self.delayed_span_bug.borrow_mut() = Some(diagnostic);\n     }\n     pub fn span_bug_no_panic<S: Into<MultiSpan>>(&self, sp: S, msg: &str) {\n         self.emit(&sp.into(), msg, Bug);\n@@ -507,14 +509,9 @@ impl Handler {\n         let s;\n         match self.err_count.get() {\n             0 => {\n-                let delayed_bug = self.delayed_span_bug.borrow();\n-                match *delayed_bug {\n-                    Some((ref span, ref errmsg)) => {\n-                        self.span_bug(span.clone(), errmsg);\n-                    }\n-                    _ => {}\n+                if let Some(bug) = self.delayed_span_bug.borrow_mut().take() {\n+                    DiagnosticBuilder::new_diagnostic(self, bug).emit();\n                 }\n-\n                 return;\n             }\n             1 => s = \"aborting due to previous error\".to_string(),\n@@ -547,6 +544,24 @@ impl Handler {\n             self.abort_if_errors();\n         }\n     }\n+\n+    pub fn track_diagnostics<F, R>(&self, f: F) -> (R, Vec<Diagnostic>)\n+        where F: FnOnce() -> R\n+    {\n+        let prev = mem::replace(&mut *self.tracked_diagnostics.borrow_mut(),\n+                                Some(Vec::new()));\n+        let ret = f();\n+        let diagnostics = mem::replace(&mut *self.tracked_diagnostics.borrow_mut(), prev)\n+            .unwrap();\n+        (ret, diagnostics)\n+    }\n+\n+    fn emit_db(&self, db: &DiagnosticBuilder) {\n+        if let Some(ref mut list) = *self.tracked_diagnostics.borrow_mut() {\n+            list.push((**db).clone());\n+        }\n+        self.emitter.borrow_mut().emit(db);\n+    }\n }\n \n "}, {"sha": "8870033095c9c2a1106ddd91d3d88ca049367cb3", "filename": "src/librustc_incremental/lib.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Flibrustc_incremental%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Flibrustc_incremental%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Flib.rs?ref=d29af3799964caec55e3ee806f2ac0f8d494e481", "patch": "@@ -10,9 +10,6 @@\n \n //! Support for serializing the dep-graph and reloading it.\n \n-#![crate_name = \"rustc_incremental\"]\n-#![crate_type = \"dylib\"]\n-#![crate_type = \"rlib\"]\n #![doc(html_logo_url = \"https://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n       html_favicon_url = \"https://doc.rust-lang.org/favicon.ico\",\n       html_root_url = \"https://doc.rust-lang.org/nightly/\")]"}, {"sha": "5ef277f02ace6b6cb59f4ec0855720c4b0e8aac2", "filename": "src/librustc_lint/lib.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Flibrustc_lint%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Flibrustc_lint%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flib.rs?ref=d29af3799964caec55e3ee806f2ac0f8d494e481", "patch": "@@ -19,9 +19,6 @@\n //!\n //! This API is completely unstable and subject to change.\n \n-#![crate_name = \"rustc_lint\"]\n-#![crate_type = \"dylib\"]\n-#![crate_type = \"rlib\"]\n #![doc(html_logo_url = \"https://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n       html_favicon_url = \"https://doc.rust-lang.org/favicon.ico\",\n       html_root_url = \"https://doc.rust-lang.org/nightly/\")]"}, {"sha": "cbc4ebe90fd091070c9ec648f8b049d8905254df", "filename": "src/librustc_lint/unused.rs", "status": "modified", "additions": 19, "deletions": 15, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Flibrustc_lint%2Funused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Flibrustc_lint%2Funused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Funused.rs?ref=d29af3799964caec55e3ee806f2ac0f8d494e481", "patch": "@@ -160,21 +160,25 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnusedResults {\n         };\n \n         let mut fn_warned = false;\n-        let maybe_def = match expr.node {\n-            hir::ExprCall(ref callee, _) => {\n-                match callee.node {\n-                    hir::ExprPath(ref qpath) => Some(cx.tables.qpath_def(qpath, callee.hir_id)),\n-                    _ => None\n-                }\n-            },\n-            hir::ExprMethodCall(..) => {\n-                cx.tables.type_dependent_defs().get(expr.hir_id).cloned()\n-            },\n-            _ => { None }\n-        };\n-        if let Some(def) = maybe_def {\n-            let def_id = def.def_id();\n-            fn_warned = check_must_use(cx, def_id, s.span, \"return value of \");\n+        if cx.tcx.sess.features.borrow().fn_must_use {\n+            let maybe_def = match expr.node {\n+                hir::ExprCall(ref callee, _) => {\n+                    match callee.node {\n+                        hir::ExprPath(ref qpath) => {\n+                            Some(cx.tables.qpath_def(qpath, callee.hir_id))\n+                        },\n+                        _ => None\n+                    }\n+                },\n+                hir::ExprMethodCall(..) => {\n+                    cx.tables.type_dependent_defs().get(expr.hir_id).cloned()\n+                },\n+                _ => None\n+            };\n+            if let Some(def) = maybe_def {\n+                let def_id = def.def_id();\n+                fn_warned = check_must_use(cx, def_id, s.span, \"return value of \");\n+            }\n         }\n \n         if !(ty_warned || fn_warned) {"}, {"sha": "3c3e627ee4b36e71e5912ab5d1d1388bc699de6a", "filename": "src/librustc_llvm/lib.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Flibrustc_llvm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Flibrustc_llvm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Flib.rs?ref=d29af3799964caec55e3ee806f2ac0f8d494e481", "patch": "@@ -13,9 +13,6 @@\n #![allow(non_snake_case)]\n #![allow(dead_code)]\n \n-#![crate_name = \"rustc_llvm\"]\n-#![crate_type = \"dylib\"]\n-#![crate_type = \"rlib\"]\n #![doc(html_logo_url = \"https://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n        html_favicon_url = \"https://doc.rust-lang.org/favicon.ico\",\n        html_root_url = \"https://doc.rust-lang.org/nightly/\")]"}, {"sha": "40b75be36fefb061c7fcabb5a71f02853b0d2874", "filename": "src/librustc_metadata/Cargo.toml", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Flibrustc_metadata%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Flibrustc_metadata%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2FCargo.toml?ref=d29af3799964caec55e3ee806f2ac0f8d494e481", "patch": "@@ -15,7 +15,6 @@ owning_ref = \"0.3.3\"\n proc_macro = { path = \"../libproc_macro\" }\n rustc = { path = \"../librustc\" }\n rustc_back = { path = \"../librustc_back\" }\n-rustc_const_math = { path = \"../librustc_const_math\" }\n rustc_data_structures = { path = \"../librustc_data_structures\" }\n rustc_errors = { path = \"../librustc_errors\" }\n serialize = { path = \"../libserialize\" }"}, {"sha": "56138955e8e66e6c50cdeb8b8a3e25d9d05eafc6", "filename": "src/librustc_metadata/cstore_impl.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Flibrustc_metadata%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Flibrustc_metadata%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore_impl.rs?ref=d29af3799964caec55e3ee806f2ac0f8d494e481", "patch": "@@ -138,6 +138,8 @@ provide! { <'tcx> tcx, def_id, cdata,\n \n     dylib_dependency_formats => { Rc::new(cdata.get_dylib_dependency_formats(&tcx.dep_graph)) }\n     is_panic_runtime => { cdata.is_panic_runtime(&tcx.dep_graph) }\n+    is_compiler_builtins => { cdata.is_compiler_builtins(&tcx.dep_graph) }\n+    has_global_allocator => { cdata.has_global_allocator(&tcx.dep_graph) }\n     extern_crate => { Rc::new(cdata.extern_crate.get()) }\n }\n "}, {"sha": "f79abecf9da4b3ea2154783762dd7e7cdbeaa0a2", "filename": "src/librustc_metadata/lib.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Flibrustc_metadata%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Flibrustc_metadata%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Flib.rs?ref=d29af3799964caec55e3ee806f2ac0f8d494e481", "patch": "@@ -8,9 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![crate_name = \"rustc_metadata\"]\n-#![crate_type = \"dylib\"]\n-#![crate_type = \"rlib\"]\n #![doc(html_logo_url = \"https://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n        html_favicon_url = \"https://doc.rust-lang.org/favicon.ico\",\n        html_root_url = \"https://doc.rust-lang.org/nightly/\")]\n@@ -42,7 +39,6 @@ extern crate proc_macro;\n #[macro_use]\n extern crate rustc;\n extern crate rustc_back;\n-extern crate rustc_const_math;\n extern crate rustc_data_structures;\n \n mod diagnostics;"}, {"sha": "61d128fc847827d2a3adcb7c6dd38d86d46aa614", "filename": "src/librustc_mir/hair/cx/block.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Flibrustc_mir%2Fhair%2Fcx%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Flibrustc_mir%2Fhair%2Fcx%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fblock.rs?ref=d29af3799964caec55e3ee806f2ac0f8d494e481", "patch": "@@ -22,10 +22,7 @@ impl<'tcx> Mirror<'tcx> for &'tcx hir::Block {\n         // We have to eagerly translate the \"spine\" of the statements\n         // in order to get the lexical scoping correctly.\n         let stmts = mirror_stmts(cx, self.id, &*self.stmts);\n-        let opt_def_id = cx.tcx.hir.opt_local_def_id(self.id);\n-        let opt_destruction_extent = opt_def_id.and_then(|def_id| {\n-            cx.tcx.region_maps(def_id).opt_destruction_extent(self.id)\n-        });\n+        let opt_destruction_extent = cx.region_maps.opt_destruction_extent(self.id);\n         Block {\n             targeted_by_break: self.targeted_by_break,\n             extent: CodeExtent::Misc(self.id),\n@@ -42,11 +39,8 @@ fn mirror_stmts<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n                                 stmts: &'tcx [hir::Stmt])\n                                 -> Vec<StmtRef<'tcx>> {\n     let mut result = vec![];\n-    let opt_def_id = cx.tcx.hir.opt_local_def_id(block_id);\n     for (index, stmt) in stmts.iter().enumerate() {\n-        let opt_dxn_ext = opt_def_id.and_then(|def_id| {\n-            cx.tcx.region_maps(def_id).opt_destruction_extent(stmt.node.id())\n-        });\n+        let opt_dxn_ext = cx.region_maps.opt_destruction_extent(stmt.node.id());\n         match stmt.node {\n             hir::StmtExpr(ref expr, id) |\n             hir::StmtSemi(ref expr, id) => {"}, {"sha": "dba625e98fd81db81c4512ea54244cce621b3e29", "filename": "src/librustc_mir/lib.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Flibrustc_mir%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Flibrustc_mir%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Flib.rs?ref=d29af3799964caec55e3ee806f2ac0f8d494e481", "patch": "@@ -14,9 +14,6 @@ Rust MIR: a lowered representation of Rust. Also: an experiment!\n \n */\n \n-#![crate_name = \"rustc_mir\"]\n-#![crate_type = \"rlib\"]\n-#![crate_type = \"dylib\"]\n #![deny(warnings)]\n \n #![feature(box_patterns)]"}, {"sha": "124a1ef946e2bf85f9b876f9831ea7deb0718b01", "filename": "src/librustc_mir/transform/inline.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Flibrustc_mir%2Ftransform%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Flibrustc_mir%2Ftransform%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Finline.rs?ref=d29af3799964caec55e3ee806f2ac0f8d494e481", "patch": "@@ -115,8 +115,13 @@ impl<'a, 'tcx> Inliner<'a, 'tcx> {\n                     Ok(ref callee_mir) if self.should_inline(callsite, callee_mir) => {\n                         callee_mir.subst(self.tcx, callsite.substs)\n                     }\n+                    Ok(_) => continue,\n \n-                    _ => continue,\n+                    Err(mut bug) => {\n+                        // FIXME(#43542) shouldn't have to cancel an error\n+                        bug.cancel();\n+                        continue\n+                    }\n                 };\n \n                 let start = caller_mir.basic_blocks().len();"}, {"sha": "28b99e1185bd2d3738191b98cd317aa188370d64", "filename": "src/librustc_passes/lib.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Flibrustc_passes%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Flibrustc_passes%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Flib.rs?ref=d29af3799964caec55e3ee806f2ac0f8d494e481", "patch": "@@ -14,9 +14,6 @@\n //!\n //! This API is completely unstable and subject to change.\n \n-#![crate_name = \"rustc_passes\"]\n-#![crate_type = \"dylib\"]\n-#![crate_type = \"rlib\"]\n #![doc(html_logo_url = \"https://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n        html_favicon_url = \"https://doc.rust-lang.org/favicon.ico\",\n        html_root_url = \"https://doc.rust-lang.org/nightly/\")]"}, {"sha": "4cc65ee28e89f703d3ebd261907471b7e0e1fe00", "filename": "src/librustc_platform_intrinsics/lib.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Flibrustc_platform_intrinsics%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Flibrustc_platform_intrinsics%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_platform_intrinsics%2Flib.rs?ref=d29af3799964caec55e3ee806f2ac0f8d494e481", "patch": "@@ -8,9 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![crate_name = \"rustc_platform_intrinsics\"]\n-#![crate_type = \"dylib\"]\n-#![crate_type = \"rlib\"]\n #![deny(warnings)]\n #![allow(bad_style)]\n "}, {"sha": "a2a6d183e9ccc3d795980792c8bdc872ded6f31c", "filename": "src/librustc_plugin/lib.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Flibrustc_plugin%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Flibrustc_plugin%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_plugin%2Flib.rs?ref=d29af3799964caec55e3ee806f2ac0f8d494e481", "patch": "@@ -60,9 +60,6 @@\n //! See the [`plugin` feature](../../unstable-book/language-features/plugin.html) of\n //! the Unstable Book for more examples.\n \n-#![crate_name = \"rustc_plugin\"]\n-#![crate_type = \"dylib\"]\n-#![crate_type = \"rlib\"]\n #![doc(html_logo_url = \"https://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n        html_favicon_url = \"https://doc.rust-lang.org/favicon.ico\",\n        html_root_url = \"https://doc.rust-lang.org/nightly/\")]"}, {"sha": "772b16bbecfbaa72a17f7e40674aa13e9bbf0d84", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=d29af3799964caec55e3ee806f2ac0f8d494e481", "patch": "@@ -8,9 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![crate_name = \"rustc_privacy\"]\n-#![crate_type = \"dylib\"]\n-#![crate_type = \"rlib\"]\n #![doc(html_logo_url = \"https://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n        html_favicon_url = \"https://doc.rust-lang.org/favicon.ico\",\n        html_root_url = \"https://doc.rust-lang.org/nightly/\")]"}, {"sha": "a66d1ce0859b7efe179eda60087d3c5c7ddf4a7e", "filename": "src/librustc_resolve/check_unused.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Flibrustc_resolve%2Fcheck_unused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Flibrustc_resolve%2Fcheck_unused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fcheck_unused.rs?ref=d29af3799964caec55e3ee806f2ac0f8d494e481", "patch": "@@ -121,9 +121,7 @@ pub fn check_crate(resolver: &mut Resolver, krate: &ast::Crate) {\n                  directive.vis.get() == ty::Visibility::Public ||\n                  directive.span.source_equal(&DUMMY_SP) => {}\n             ImportDirectiveSubclass::ExternCrate => {\n-                let lint = lint::builtin::UNUSED_EXTERN_CRATES;\n-                let msg = \"unused extern crate\";\n-             ;   resolver.session.buffer_lint(lint, directive.id, directive.span, msg)\n+                resolver.maybe_unused_extern_crates.push((directive.id, directive.span));\n             }\n             ImportDirectiveSubclass::MacroUse => {\n                 let lint = lint::builtin::UNUSED_IMPORTS;"}, {"sha": "a83ac9bb6336958e4d5e6d644f73c30b8fc72743", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=d29af3799964caec55e3ee806f2ac0f8d494e481", "patch": "@@ -8,9 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![crate_name = \"rustc_resolve\"]\n-#![crate_type = \"dylib\"]\n-#![crate_type = \"rlib\"]\n #![doc(html_logo_url = \"https://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n       html_favicon_url = \"https://doc.rust-lang.org/favicon.ico\",\n       html_root_url = \"https://doc.rust-lang.org/nightly/\")]\n@@ -1253,6 +1250,7 @@ pub struct Resolver<'a> {\n \n     used_imports: FxHashSet<(NodeId, Namespace)>,\n     pub maybe_unused_trait_imports: NodeSet,\n+    pub maybe_unused_extern_crates: Vec<(NodeId, Span)>,\n \n     /// privacy errors are delayed until the end in order to deduplicate them\n     privacy_errors: Vec<PrivacyError<'a>>,\n@@ -1460,6 +1458,7 @@ impl<'a> Resolver<'a> {\n \n             used_imports: FxHashSet(),\n             maybe_unused_trait_imports: NodeSet(),\n+            maybe_unused_extern_crates: Vec::new(),\n \n             privacy_errors: Vec::new(),\n             ambiguity_errors: Vec::new(),"}, {"sha": "9b74df865d74756059db8a89d272f6a17a2675d9", "filename": "src/librustc_save_analysis/lib.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Flibrustc_save_analysis%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Flibrustc_save_analysis%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Flib.rs?ref=d29af3799964caec55e3ee806f2ac0f8d494e481", "patch": "@@ -8,9 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![crate_name = \"rustc_save_analysis\"]\n-#![crate_type = \"dylib\"]\n-#![crate_type = \"rlib\"]\n #![doc(html_logo_url = \"https://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n       html_favicon_url = \"https://doc.rust-lang.org/favicon.ico\",\n       html_root_url = \"https://doc.rust-lang.org/nightly/\")]"}, {"sha": "1758e331129d52a54d4fc3fb75f9467193e7e6e2", "filename": "src/librustc_trans/lib.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Flibrustc_trans%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Flibrustc_trans%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Flib.rs?ref=d29af3799964caec55e3ee806f2ac0f8d494e481", "patch": "@@ -14,9 +14,6 @@\n //!\n //! This API is completely unstable and subject to change.\n \n-#![crate_name = \"rustc_trans\"]\n-#![crate_type = \"dylib\"]\n-#![crate_type = \"rlib\"]\n #![doc(html_logo_url = \"https://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n       html_favicon_url = \"https://doc.rust-lang.org/favicon.ico\",\n       html_root_url = \"https://doc.rust-lang.org/nightly/\")]"}, {"sha": "096f43e44ab0f5496b24b973bbb1c9393bcdd05f", "filename": "src/librustc_trans/mir/rvalue.rs", "status": "modified", "additions": 23, "deletions": 3, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Flibrustc_trans%2Fmir%2Frvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Flibrustc_trans%2Fmir%2Frvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Frvalue.rs?ref=d29af3799964caec55e3ee806f2ac0f8d494e481", "patch": "@@ -29,7 +29,7 @@ use type_of;\n use tvec;\n use value::Value;\n \n-use super::MirContext;\n+use super::{MirContext, LocalRef};\n use super::constant::const_scalar_checked_binop;\n use super::operand::{OperandRef, OperandValue};\n use super::lvalue::LvalueRef;\n@@ -381,9 +381,9 @@ impl<'a, 'tcx> MirContext<'a, 'tcx> {\n             }\n \n             mir::Rvalue::Len(ref lvalue) => {\n-                let tr_lvalue = self.trans_lvalue(&bcx, lvalue);\n+                let size = self.evaluate_array_len(&bcx, lvalue);\n                 let operand = OperandRef {\n-                    val: OperandValue::Immediate(tr_lvalue.len(bcx.ccx)),\n+                    val: OperandValue::Immediate(size),\n                     ty: bcx.tcx().types.usize,\n                 };\n                 (bcx, operand)\n@@ -512,6 +512,26 @@ impl<'a, 'tcx> MirContext<'a, 'tcx> {\n         }\n     }\n \n+    fn evaluate_array_len(&mut self,\n+                          bcx: &Builder<'a, 'tcx>,\n+                          lvalue: &mir::Lvalue<'tcx>) -> ValueRef\n+    {\n+        // ZST are passed as operands and require special handling\n+        // because trans_lvalue() panics if Local is operand.\n+        if let mir::Lvalue::Local(index) = *lvalue {\n+            if let LocalRef::Operand(Some(op)) = self.locals[index] {\n+                if common::type_is_zero_size(bcx.ccx, op.ty) {\n+                    if let ty::TyArray(_, n) = op.ty.sty {\n+                        return common::C_uint(bcx.ccx, n);\n+                    }\n+                }\n+            }\n+        }\n+        // use common size calculation for non zero-sized types\n+        let tr_value = self.trans_lvalue(&bcx, lvalue);\n+        return tr_value.len(bcx.ccx);\n+    }\n+\n     pub fn trans_scalar_binop(&mut self,\n                               bcx: &Builder<'a, 'tcx>,\n                               op: mir::BinOp,"}, {"sha": "90e17906328fbabaa80b047598e614bfef825cca", "filename": "src/librustc_trans_utils/lib.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Flibrustc_trans_utils%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Flibrustc_trans_utils%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans_utils%2Flib.rs?ref=d29af3799964caec55e3ee806f2ac0f8d494e481", "patch": "@@ -12,9 +12,6 @@\n //!\n //! This API is completely unstable and subject to change.\n \n-#![crate_name = \"rustc_trans_utils\"]\n-#![crate_type = \"dylib\"]\n-#![crate_type = \"rlib\"]\n #![doc(html_logo_url = \"https://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n       html_favicon_url = \"https://doc.rust-lang.org/favicon.ico\",\n       html_root_url = \"https://doc.rust-lang.org/nightly/\")]"}, {"sha": "7b83985ba673167370da3e40d6fb8dd6d9ba5e2f", "filename": "src/librustc_tsan/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Flibrustc_tsan%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Flibrustc_tsan%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_tsan%2FCargo.toml?ref=d29af3799964caec55e3ee806f2ac0f8d494e481", "patch": "@@ -14,5 +14,6 @@ build_helper = { path = \"../build_helper\" }\n cmake = \"0.1.18\"\n \n [dependencies]\n+alloc = { path = \"../liballoc\" }\n alloc_system = { path = \"../liballoc_system\" }\n core = { path = \"../libcore\" }"}, {"sha": "3429e3bda0f6770bfcb49f84be94a35bc0e23312", "filename": "src/librustc_tsan/lib.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Flibrustc_tsan%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Flibrustc_tsan%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_tsan%2Flib.rs?ref=d29af3799964caec55e3ee806f2ac0f8d494e481", "patch": "@@ -9,12 +9,19 @@\n // except according to those terms.\n \n #![sanitizer_runtime]\n-#![feature(sanitizer_runtime)]\n #![feature(alloc_system)]\n+#![feature(allocator_api)]\n+#![feature(global_allocator)]\n+#![feature(sanitizer_runtime)]\n #![feature(staged_api)]\n #![no_std]\n #![unstable(feature = \"sanitizer_runtime_lib\",\n             reason = \"internal implementation detail of sanitizers\",\n             issue = \"0\")]\n \n extern crate alloc_system;\n+\n+use alloc_system::System;\n+\n+#[global_allocator]\n+static ALLOC: System = System;"}, {"sha": "3da154e0689addb8a26ed863906e0fe3f4576646", "filename": "src/librustc_typeck/check_unused.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Flibrustc_typeck%2Fcheck_unused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Flibrustc_typeck%2Fcheck_unused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck_unused.rs?ref=d29af3799964caec55e3ee806f2ac0f8d494e481", "patch": "@@ -72,4 +72,15 @@ pub fn check_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n \n     let mut visitor = CheckVisitor { tcx, used_trait_imports };\n     tcx.hir.krate().visit_all_item_likes(&mut visitor);\n+\n+    for &(id, span) in &tcx.maybe_unused_extern_crates {\n+        let cnum = tcx.sess.cstore.extern_mod_stmt_cnum(id).unwrap().as_def_id();\n+        if !tcx.is_compiler_builtins(cnum)\n+            && !tcx.is_panic_runtime(cnum)\n+            && !tcx.has_global_allocator(cnum) {\n+                let lint = lint::builtin::UNUSED_EXTERN_CRATES;\n+                let msg = \"unused extern crate\";\n+                tcx.lint_node(lint, id, span, msg);\n+            }\n+    }\n }"}, {"sha": "86feea13b17232cee655239370670b3d93e1dcde", "filename": "src/librustc_typeck/lib.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Flibrustc_typeck%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Flibrustc_typeck%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Flib.rs?ref=d29af3799964caec55e3ee806f2ac0f8d494e481", "patch": "@@ -63,9 +63,6 @@ This API is completely unstable and subject to change.\n \n */\n \n-#![crate_name = \"rustc_typeck\"]\n-#![crate_type = \"dylib\"]\n-#![crate_type = \"rlib\"]\n #![doc(html_logo_url = \"https://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n       html_favicon_url = \"https://doc.rust-lang.org/favicon.ico\",\n       html_root_url = \"https://doc.rust-lang.org/nightly/\")]"}, {"sha": "662064fd37e17bf6be88097b6ac1e89b6603b51e", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=d29af3799964caec55e3ee806f2ac0f8d494e481", "patch": "@@ -323,6 +323,10 @@ impl Item {\n     pub fn is_union(&self) -> bool {\n         self.type_() == ItemType::Union\n     }\n+    pub fn is_import(&self) -> bool {\n+        self.type_() == ItemType::Import\n+    }\n+\n     pub fn is_stripped(&self) -> bool {\n         match self.inner { StrippedItem(..) => true, _ => false }\n     }"}, {"sha": "5457f69cb6dab02bf9c3d420a83f94533909e4c7", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 38, "deletions": 1, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=d29af3799964caec55e3ee806f2ac0f8d494e481", "patch": "@@ -1764,6 +1764,37 @@ fn item_module(w: &mut fmt::Formatter, cx: &Context,\n     }\n \n     indices.sort_by(|&i1, &i2| cmp(&items[i1], &items[i2], i1, i2));\n+    // This call is to remove reexport duplicates in cases such as:\n+    //\n+    // ```\n+    // pub mod foo {\n+    //     pub mod bar {\n+    //         pub trait Double { fn foo(); }\n+    //     }\n+    // }\n+    //\n+    // pub use foo::bar::*;\n+    // pub use foo::*;\n+    // ```\n+    //\n+    // `Double` will appear twice in the generated docs.\n+    //\n+    // FIXME: This code is quite ugly and could be improved. Small issue: DefId\n+    // can be identical even if the elements are different (mostly in imports).\n+    // So in case this is an import, we keep everything by adding a \"unique id\"\n+    // (which is the position in the vector).\n+    indices.dedup_by_key(|i| (items[*i].def_id,\n+                              if items[*i].name.as_ref().is_some() {\n+                                  Some(full_path(cx, &items[*i]).clone())\n+                              } else {\n+                                  None\n+                              },\n+                              items[*i].type_(),\n+                              if items[*i].is_import() {\n+                                  *i\n+                              } else {\n+                                  0\n+                              }));\n \n     debug!(\"{:?}\", indices);\n     let mut curty = None;\n@@ -2925,7 +2956,13 @@ fn render_deref_methods(w: &mut fmt::Formatter, cx: &Context, impl_: &Impl,\n fn render_impl(w: &mut fmt::Formatter, cx: &Context, i: &Impl, link: AssocItemLink,\n                render_mode: RenderMode, outer_version: Option<&str>) -> fmt::Result {\n     if render_mode == RenderMode::Normal {\n-        write!(w, \"<h3 class='impl'><span class='in-band'><code>{}</code>\", i.inner_impl())?;\n+        let id = derive_id(match i.inner_impl().trait_ {\n+            Some(ref t) => format!(\"impl-{}\", Escape(&format!(\"{:#}\", t))),\n+            None => \"impl\".to_string(),\n+        });\n+        write!(w, \"<h3 id='{}' class='impl'><span class='in-band'><code>{}</code>\",\n+               id, i.inner_impl())?;\n+        write!(w, \"<a href='#{}' class='anchor'></a>\", id)?;\n         write!(w, \"</span><span class='out-of-band'>\")?;\n         let since = i.impl_item.stability.as_ref().map(|s| &s.since[..]);\n         if let Some(l) = (Item { item: &i.impl_item, cx: cx }).src_href() {"}, {"sha": "4a3286b421ae9e40f87be7297b217da86639ee2c", "filename": "src/librustdoc/html/static/rustdoc.css", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css?ref=d29af3799964caec55e3ee806f2ac0f8d494e481", "patch": "@@ -445,6 +445,10 @@ a {\n .small-section-header:hover > .anchor {\n \tdisplay: initial;\n }\n+\n+.in-band:hover > .anchor {\n+\tdisplay: initial;\n+}\n .anchor {\n \tdisplay: none;\n }"}, {"sha": "c5f4272b932fca74a3cd985a710aa09c7f3fd2f6", "filename": "src/librustdoc/html/static/styles/main.css", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fstyles%2Fmain.css", "raw_url": "https://github.com/rust-lang/rust/raw/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fstyles%2Fmain.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fstyles%2Fmain.css?ref=d29af3799964caec55e3ee806f2ac0f8d494e481", "patch": "@@ -26,6 +26,7 @@ h1.fqn {\n h2, h3:not(.impl):not(.method):not(.type):not(.tymethod), h4:not(.method):not(.type):not(.tymethod) {\n \tborder-bottom-color: #DDDDDD;\n }\n+\n .in-band {\n \tbackground-color: white;\n }\n@@ -83,6 +84,11 @@ pre {\n }\n \n :target { background: #FDFFD3; }\n+\n+:target > .in-band {\n+\tbackground: #FDFFD3;\n+}\n+\n .content .highlighted {\n \tcolor: #000 !important;\n \tbackground-color: #ccc;"}, {"sha": "61a8165d26af16283b3cc49f85f538d47b71f791", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=d29af3799964caec55e3ee806f2ac0f8d494e481", "patch": "@@ -8,9 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![crate_name = \"rustdoc\"]\n-#![crate_type = \"dylib\"]\n-#![crate_type = \"rlib\"]\n #![doc(html_logo_url = \"https://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n        html_favicon_url = \"https://doc.rust-lang.org/favicon.ico\",\n        html_root_url = \"https://doc.rust-lang.org/nightly/\","}, {"sha": "2e354252c1573813770a50ccf0c7af29d85c1362", "filename": "src/libserialize/lib.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Flibserialize%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Flibserialize%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Flib.rs?ref=d29af3799964caec55e3ee806f2ac0f8d494e481", "patch": "@@ -14,9 +14,6 @@\n Core encoding and decoding interfaces.\n */\n \n-#![crate_name = \"serialize\"]\n-#![crate_type = \"rlib\"]\n-#![crate_type = \"dylib\"]\n #![doc(html_logo_url = \"https://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n        html_favicon_url = \"https://doc.rust-lang.org/favicon.ico\",\n        html_root_url = \"https://doc.rust-lang.org/nightly/\","}, {"sha": "074ab3ebd8fdca9b045f86672f04f093abf2704b", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=d29af3799964caec55e3ee806f2ac0f8d494e481", "patch": "@@ -522,7 +522,7 @@ pub trait Read {\n     /// `Read`er - the method only takes `&self` so that it can be used through\n     /// trait objects.\n     ///\n-    /// # Unsafety\n+    /// # Safety\n     ///\n     /// This method is unsafe because a `Read`er could otherwise return a\n     /// non-zeroing `Initializer` from another `Read` type without an `unsafe`\n@@ -903,7 +903,7 @@ impl Initializer {\n \n     /// Returns a new `Initializer` which will not zero out buffers.\n     ///\n-    /// # Unsafety\n+    /// # Safety\n     ///\n     /// This may only be called by `Read`ers which guarantee that they will not\n     /// read from buffers passed to `Read` methods, and that the return value of"}, {"sha": "b57067e35e9d95db0180cd983a5881eaeabb4cde", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=d29af3799964caec55e3ee806f2ac0f8d494e481", "patch": "@@ -209,10 +209,7 @@\n //! [other]: #what-is-in-the-standard-library-documentation\n //! [primitive types]: ../book/first-edition/primitive-types.html\n \n-#![crate_name = \"std\"]\n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n-#![crate_type = \"rlib\"]\n-#![crate_type = \"dylib\"]\n #![doc(html_logo_url = \"https://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n        html_favicon_url = \"https://doc.rust-lang.org/favicon.ico\",\n        html_root_url = \"https://doc.rust-lang.org/nightly/\",\n@@ -361,6 +358,7 @@ extern crate std_unicode;\n extern crate libc;\n \n // We always need an unwinder currently for backtraces\n+#[allow(unused_extern_crates)]\n extern crate unwind;\n \n // compiler-rt intrinsics"}, {"sha": "240e82069ff4d64fbb0c72a33eb7a2fdd49d7672", "filename": "src/libstd/memchr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Flibstd%2Fmemchr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Flibstd%2Fmemchr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmemchr.rs?ref=d29af3799964caec55e3ee806f2ac0f8d494e481", "patch": "@@ -20,7 +20,7 @@\n /// magnitude faster than `haystack.iter().position(|&b| b == needle)`.\n /// (See benchmarks.)\n ///\n-/// # Example\n+/// # Examples\n ///\n /// This shows how to find the first position of a byte in a byte string.\n ///\n@@ -40,7 +40,7 @@ pub fn memchr(needle: u8, haystack: &[u8]) -> Option<usize> {\n /// Returns the index corresponding to the last occurrence of `needle` in\n /// `haystack`, or `None` if one is not found.\n ///\n-/// # Example\n+/// # Examples\n ///\n /// This shows how to find the last position of a byte in a byte string.\n ///"}, {"sha": "538753d86923eebcbd2e2e9871f696cb5e1d7394", "filename": "src/libstd/prelude/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Flibstd%2Fprelude%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Flibstd%2Fprelude%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprelude%2Fmod.rs?ref=d29af3799964caec55e3ee806f2ac0f8d494e481", "patch": "@@ -23,6 +23,7 @@\n //! On a technical level, Rust inserts\n //!\n //! ```\n+//! # #[allow(unused_extern_crates)]\n //! extern crate std;\n //! ```\n //!"}, {"sha": "9fd8d6c91869c07422eedf0c7f10deb008ed985c", "filename": "src/libstd/sys/redox/ext/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Flibstd%2Fsys%2Fredox%2Fext%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Flibstd%2Fsys%2Fredox%2Fext%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fredox%2Fext%2Fmod.rs?ref=d29af3799964caec55e3ee806f2ac0f8d494e481", "patch": "@@ -13,7 +13,7 @@\n //! For now, this module is limited to extracting file descriptors,\n //! but its functionality will grow over time.\n //!\n-//! # Example\n+//! # Examples\n //!\n //! ```no_run\n //! use std::fs::File;"}, {"sha": "f44b9aa9615683f7e3b87c6e7e92efacdbbd9cff", "filename": "src/libstd/sys/unix/ext/fs.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Flibstd%2Fsys%2Funix%2Fext%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Flibstd%2Fsys%2Funix%2Fext%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fext%2Ffs.rs?ref=d29af3799964caec55e3ee806f2ac0f8d494e481", "patch": "@@ -154,8 +154,6 @@ pub trait OpenOptionsExt {\n     /// # Examples\n     ///\n     /// ```no_run\n-    /// # #![feature(libc)]\n-    /// extern crate libc;\n     /// use std::fs::OpenOptions;\n     /// use std::os::unix::fs::OpenOptionsExt;\n     ///"}, {"sha": "98bc90dd4e13246694c14531affe2fd53cd47012", "filename": "src/libstd/sys/unix/ext/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Flibstd%2Fsys%2Funix%2Fext%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Flibstd%2Fsys%2Funix%2Fext%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fext%2Fmod.rs?ref=d29af3799964caec55e3ee806f2ac0f8d494e481", "patch": "@@ -13,7 +13,7 @@\n //! For now, this module is limited to extracting file descriptors,\n //! but its functionality will grow over time.\n //!\n-//! # Example\n+//! # Examples\n //!\n //! ```no_run\n //! use std::fs::File;"}, {"sha": "40f1d6a6db15be67ed1664978fa0df604a46591a", "filename": "src/libstd/sys/unix/thread.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Flibstd%2Fsys%2Funix%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Flibstd%2Fsys%2Funix%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fthread.rs?ref=d29af3799964caec55e3ee806f2ac0f8d494e481", "patch": "@@ -168,7 +168,8 @@ impl Thread {\n         unsafe {\n             let ret = libc::pthread_join(self.id, ptr::null_mut());\n             mem::forget(self);\n-            debug_assert_eq!(ret, 0);\n+            assert!(ret == 0,\n+                    \"failed to join thread: {}\", io::Error::from_raw_os_error(ret));\n         }\n     }\n "}, {"sha": "7dfcc996e18e2e8202b7f6c061800ea005356204", "filename": "src/libstd/sys/windows/c.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Flibstd%2Fsys%2Fwindows%2Fc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Flibstd%2Fsys%2Fwindows%2Fc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fc.rs?ref=d29af3799964caec55e3ee806f2ac0f8d494e481", "patch": "@@ -273,6 +273,7 @@ pub const FILE_END: DWORD = 2;\n \n pub const WAIT_OBJECT_0: DWORD = 0x00000000;\n pub const WAIT_TIMEOUT: DWORD = 258;\n+pub const WAIT_FAILED: DWORD = 0xFFFFFFFF;\n \n #[cfg(target_env = \"msvc\")]\n pub const MAX_SYM_NAME: usize = 2000;"}, {"sha": "2cdd86e88b0a074eb87125792b9f888aeb9eaaa3", "filename": "src/libstd/sys/windows/thread.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Flibstd%2Fsys%2Fwindows%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Flibstd%2Fsys%2Fwindows%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fthread.rs?ref=d29af3799964caec55e3ee806f2ac0f8d494e481", "patch": "@@ -61,7 +61,11 @@ impl Thread {\n     }\n \n     pub fn join(self) {\n-        unsafe { c::WaitForSingleObject(self.handle.raw(), c::INFINITE); }\n+        let rc = unsafe { c::WaitForSingleObject(self.handle.raw(), c::INFINITE) };\n+        if rc == c::WAIT_FAILED {\n+            panic!(\"failed to join on thread: {}\",\n+                   io::Error::last_os_error());\n+        }\n     }\n \n     pub fn yield_now() {"}, {"sha": "4912ff93abdb389c19fc458398234220fd0c4b35", "filename": "src/libstd/thread/mod.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Flibstd%2Fthread%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Flibstd%2Fthread%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread%2Fmod.rs?ref=d29af3799964caec55e3ee806f2ac0f8d494e481", "patch": "@@ -807,7 +807,7 @@ pub fn park_timeout_ms(ms: u32) {\n /// Platforms which do not support nanosecond precision for sleeping will have\n /// `dur` rounded up to the nearest granularity of time they can sleep for.\n ///\n-/// # Example\n+/// # Examples\n ///\n /// Waiting for the complete expiration of the timeout:\n ///\n@@ -1230,6 +1230,11 @@ impl<T> JoinHandle<T> {\n     /// [`Err`]: ../../std/result/enum.Result.html#variant.Err\n     /// [`panic`]: ../../std/macro.panic.html\n     ///\n+    /// # Panics\n+    ///\n+    /// This function may panic on some platforms if a thread attempts to join\n+    /// itself or otherwise may create a deadlock with joining threads.\n+    ///\n     /// # Examples\n     ///\n     /// ```"}, {"sha": "e5a114caed0f4e90378751d7e736f1667cd62fb9", "filename": "src/libstd_unicode/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Flibstd_unicode%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Flibstd_unicode%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd_unicode%2Flib.rs?ref=d29af3799964caec55e3ee806f2ac0f8d494e481", "patch": "@@ -20,9 +20,7 @@\n //! provide for basic string-related manipulations. This crate does not\n //! (yet) aim to provide a full set of Unicode tables.\n \n-#![crate_name = \"std_unicode\"]\n #![unstable(feature = \"unicode\", issue = \"27783\")]\n-#![crate_type = \"rlib\"]\n #![doc(html_logo_url = \"https://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n        html_favicon_url = \"https://doc.rust-lang.org/favicon.ico\",\n        html_root_url = \"https://doc.rust-lang.org/nightly/\","}, {"sha": "40e210d02ca7f94f5afd088483b8dec4d6778abd", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 70, "deletions": 13, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=d29af3799964caec55e3ee806f2ac0f8d494e481", "patch": "@@ -112,8 +112,8 @@ macro_rules! declare_features {\n // was set. This is most important for knowing when a particular feature became\n // stable (active).\n //\n-// NB: The featureck.py script parses this information directly out of the source\n-// so take care when modifying it.\n+// NB: tools/tidy/src/features.rs parses this information directly out of the\n+// source, so take care when modifying it.\n \n declare_features! (\n     (active, asm, \"1.0.0\", Some(29722)),\n@@ -376,6 +376,9 @@ declare_features! (\n \n     // #[doc(cfg(...))]\n     (active, doc_cfg, \"1.21.0\", Some(43781)),\n+\n+    // allow `#[must_use]` on functions (RFC 1940)\n+    (active, fn_must_use, \"1.21.0\", Some(43302)),\n );\n \n declare_features! (\n@@ -919,20 +922,27 @@ struct Context<'a> {\n }\n \n macro_rules! gate_feature_fn {\n-    ($cx: expr, $has_feature: expr, $span: expr, $name: expr, $explain: expr) => {{\n-        let (cx, has_feature, span, name, explain) = ($cx, $has_feature, $span, $name, $explain);\n+    ($cx: expr, $has_feature: expr, $span: expr, $name: expr, $explain: expr, $level: expr) => {{\n+        let (cx, has_feature, span,\n+             name, explain, level) = ($cx, $has_feature, $span, $name, $explain, $level);\n         let has_feature: bool = has_feature(&$cx.features);\n         debug!(\"gate_feature(feature = {:?}, span = {:?}); has? {}\", name, span, has_feature);\n         if !has_feature && !span.allows_unstable() {\n-            emit_feature_err(cx.parse_sess, name, span, GateIssue::Language, explain);\n+            leveled_feature_err(cx.parse_sess, name, span, GateIssue::Language, explain, level)\n+                .emit();\n         }\n     }}\n }\n \n macro_rules! gate_feature {\n     ($cx: expr, $feature: ident, $span: expr, $explain: expr) => {\n-        gate_feature_fn!($cx, |x:&Features| x.$feature, $span, stringify!($feature), $explain)\n-    }\n+        gate_feature_fn!($cx, |x:&Features| x.$feature, $span,\n+                         stringify!($feature), $explain, GateStrength::Hard)\n+    };\n+    ($cx: expr, $feature: ident, $span: expr, $explain: expr, $level: expr) => {\n+        gate_feature_fn!($cx, |x:&Features| x.$feature, $span,\n+                         stringify!($feature), $explain, $level)\n+    };\n }\n \n impl<'a> Context<'a> {\n@@ -942,7 +952,7 @@ impl<'a> Context<'a> {\n         for &(n, ty, ref gateage) in BUILTIN_ATTRIBUTES {\n             if name == n {\n                 if let Gated(_, name, desc, ref has_feature) = *gateage {\n-                    gate_feature_fn!(self, has_feature, attr.span, name, desc);\n+                    gate_feature_fn!(self, has_feature, attr.span, name, desc, GateStrength::Hard);\n                 }\n                 debug!(\"check_attribute: {:?} is builtin, {:?}, {:?}\", attr.path, ty, gateage);\n                 return;\n@@ -1012,24 +1022,42 @@ pub enum GateIssue {\n     Library(Option<u32>)\n }\n \n+#[derive(Debug, Copy, Clone, PartialEq, Eq)]\n+pub enum GateStrength {\n+    /// A hard error. (Most feature gates should use this.)\n+    Hard,\n+    /// Only a warning. (Use this only as backwards-compatibility demands.)\n+    Soft,\n+}\n+\n pub fn emit_feature_err(sess: &ParseSess, feature: &str, span: Span, issue: GateIssue,\n                         explain: &str) {\n     feature_err(sess, feature, span, issue, explain).emit();\n }\n \n pub fn feature_err<'a>(sess: &'a ParseSess, feature: &str, span: Span, issue: GateIssue,\n-                   explain: &str) -> DiagnosticBuilder<'a> {\n+                       explain: &str) -> DiagnosticBuilder<'a> {\n+    leveled_feature_err(sess, feature, span, issue, explain, GateStrength::Hard)\n+}\n+\n+fn leveled_feature_err<'a>(sess: &'a ParseSess, feature: &str, span: Span, issue: GateIssue,\n+                           explain: &str, level: GateStrength) -> DiagnosticBuilder<'a> {\n     let diag = &sess.span_diagnostic;\n \n     let issue = match issue {\n         GateIssue::Language => find_lang_feature_issue(feature),\n         GateIssue::Library(lib) => lib,\n     };\n \n-    let mut err = if let Some(n) = issue {\n-        diag.struct_span_err(span, &format!(\"{} (see issue #{})\", explain, n))\n+    let explanation = if let Some(n) = issue {\n+        format!(\"{} (see issue #{})\", explain, n)\n     } else {\n-        diag.struct_span_err(span, explain)\n+        explain.to_owned()\n+    };\n+\n+    let mut err = match level {\n+        GateStrength::Hard => diag.struct_span_err(span, &explanation),\n+        GateStrength::Soft => diag.struct_span_warn(span, &explanation),\n     };\n \n     // #23973: do not suggest `#![feature(...)]` if we are in beta/stable\n@@ -1039,7 +1067,15 @@ pub fn feature_err<'a>(sess: &'a ParseSess, feature: &str, span: Span, issue: Ga\n                           feature));\n     }\n \n+    // If we're on stable and only emitting a \"soft\" warning, add a note to\n+    // clarify that the feature isn't \"on\" (rather than being on but\n+    // warning-worthy).\n+    if !sess.unstable_features.is_nightly_build() && level == GateStrength::Soft {\n+        err.help(\"a nightly build of the compiler is required to enable this feature\");\n+    }\n+\n     err\n+\n }\n \n const EXPLAIN_BOX_SYNTAX: &'static str =\n@@ -1096,6 +1132,12 @@ macro_rules! gate_feature_post {\n         if !span.allows_unstable() {\n             gate_feature!(cx.context, $feature, span, $explain)\n         }\n+    }};\n+    ($cx: expr, $feature: ident, $span: expr, $explain: expr, $level: expr) => {{\n+        let (cx, span) = ($cx, $span);\n+        if !span.allows_unstable() {\n+            gate_feature!(cx.context, $feature, span, $explain, $level)\n+        }\n     }}\n }\n \n@@ -1238,6 +1280,11 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n                                         function may change over time, for now \\\n                                         a top-level `fn main()` is required\");\n                 }\n+                if attr::contains_name(&i.attrs[..], \"must_use\") {\n+                    gate_feature_post!(&self, fn_must_use, i.span,\n+                                       \"`#[must_use]` on functions is experimental\",\n+                                       GateStrength::Soft);\n+                }\n             }\n \n             ast::ItemKind::Struct(..) => {\n@@ -1275,7 +1322,7 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n                                     and possibly buggy\");\n             }\n \n-            ast::ItemKind::Impl(_, polarity, defaultness, _, _, _, _) => {\n+            ast::ItemKind::Impl(_, polarity, defaultness, _, _, _, ref impl_items) => {\n                 if polarity == ast::ImplPolarity::Negative {\n                     gate_feature_post!(&self, optin_builtin_traits,\n                                        i.span,\n@@ -1288,6 +1335,16 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n                                        i.span,\n                                        \"specialization is unstable\");\n                 }\n+\n+                for impl_item in impl_items {\n+                    if let ast::ImplItemKind::Method(..) = impl_item.node {\n+                        if attr::contains_name(&impl_item.attrs[..], \"must_use\") {\n+                            gate_feature_post!(&self, fn_must_use, impl_item.span,\n+                                               \"`#[must_use]` on methods is experimental\",\n+                                               GateStrength::Soft);\n+                        }\n+                    }\n+                }\n             }\n \n             ast::ItemKind::MacroDef(ast::MacroDef { legacy: false, .. }) => {"}, {"sha": "e3c9f0a9345eacbe4c122c5e56137a1ab880fa38", "filename": "src/libsyntax/lib.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Flibsyntax%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Flibsyntax%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Flib.rs?ref=d29af3799964caec55e3ee806f2ac0f8d494e481", "patch": "@@ -14,9 +14,6 @@\n //!\n //! This API is completely unstable and subject to change.\n \n-#![crate_name = \"syntax\"]\n-#![crate_type = \"dylib\"]\n-#![crate_type = \"rlib\"]\n #![doc(html_logo_url = \"https://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n        html_favicon_url = \"https://doc.rust-lang.org/favicon.ico\",\n        html_root_url = \"https://doc.rust-lang.org/nightly/\","}, {"sha": "35dc98195290800cb1a9ab6f1fa6b738653b990d", "filename": "src/libsyntax/test.rs", "status": "modified", "additions": 5, "deletions": 12, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Flibsyntax%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Flibsyntax%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ftest.rs?ref=d29af3799964caec55e3ee806f2ac0f8d494e481", "patch": "@@ -56,13 +56,12 @@ struct Test {\n }\n \n struct TestCtxt<'a> {\n-    sess: &'a ParseSess,\n     span_diagnostic: &'a errors::Handler,\n     path: Vec<Ident>,\n     ext_cx: ExtCtxt<'a>,\n     testfns: Vec<Test>,\n     reexport_test_harness_main: Option<Symbol>,\n-    is_test_crate: bool,\n+    is_libtest: bool,\n     ctxt: SyntaxContext,\n \n     // top-level re-export submodule, filled out after folding is finished\n@@ -272,14 +271,15 @@ fn generate_test_harness(sess: &ParseSess,\n     let krate = cleaner.fold_crate(krate);\n \n     let mark = Mark::fresh(Mark::root());\n+\n     let mut cx: TestCtxt = TestCtxt {\n-        sess,\n         span_diagnostic: sd,\n         ext_cx: ExtCtxt::new(sess, ExpansionConfig::default(\"test\".to_string()), resolver),\n         path: Vec::new(),\n         testfns: Vec::new(),\n         reexport_test_harness_main,\n-        is_test_crate: is_test_crate(&krate),\n+        // NB: doesn't consider the value of `--crate-name` passed on the command line.\n+        is_libtest: attr::find_crate_name(&krate.attrs).map(|s| s == \"test\").unwrap_or(false),\n         toplevel_reexport: None,\n         ctxt: SyntaxContext::empty().apply_mark(mark),\n     };\n@@ -454,7 +454,7 @@ mod __test {\n fn mk_std(cx: &TestCtxt) -> P<ast::Item> {\n     let id_test = Ident::from_str(\"test\");\n     let sp = ignored_span(cx, DUMMY_SP);\n-    let (vi, vis, ident) = if cx.is_test_crate {\n+    let (vi, vis, ident) = if cx.is_libtest {\n         (ast::ItemKind::Use(\n             P(nospan(ast::ViewPathSimple(id_test,\n                                          path_node(vec![id_test]))))),\n@@ -608,13 +608,6 @@ fn mk_tests(cx: &TestCtxt) -> P<ast::Item> {\n                    test_descs)\n }\n \n-fn is_test_crate(krate: &ast::Crate) -> bool {\n-    match attr::find_crate_name(&krate.attrs) {\n-        Some(s) if \"test\" == s.as_str() => true,\n-        _ => false\n-    }\n-}\n-\n fn mk_test_descs(cx: &TestCtxt) -> P<ast::Expr> {\n     debug!(\"building test vector from {} tests\", cx.testfns.len());\n "}, {"sha": "1c4702402886d59b9553ebdf3beba6c0839e429f", "filename": "src/libsyntax_ext/Cargo.toml", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Flibsyntax_ext%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Flibsyntax_ext%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2FCargo.toml?ref=d29af3799964caec55e3ee806f2ac0f8d494e481", "patch": "@@ -10,7 +10,6 @@ crate-type = [\"dylib\"]\n \n [dependencies]\n fmt_macros = { path = \"../libfmt_macros\" }\n-log = \"0.3\"\n proc_macro = { path = \"../libproc_macro\" }\n rustc_errors = { path = \"../librustc_errors\" }\n syntax = { path = \"../libsyntax\" }"}, {"sha": "42bbb4ae0cbee35a18aaa513d4655ea9e7751db5", "filename": "src/libsyntax_ext/lib.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Flibsyntax_ext%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Flibsyntax_ext%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Flib.rs?ref=d29af3799964caec55e3ee806f2ac0f8d494e481", "patch": "@@ -10,9 +10,6 @@\n \n //! Syntax extensions in the Rust compiler.\n \n-#![crate_name = \"syntax_ext\"]\n-#![crate_type = \"dylib\"]\n-#![crate_type = \"rlib\"]\n #![doc(html_logo_url = \"https://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n        html_favicon_url = \"https://doc.rust-lang.org/favicon.ico\",\n        html_root_url = \"https://doc.rust-lang.org/nightly/\")]\n@@ -21,7 +18,6 @@\n #![feature(proc_macro_internals)]\n \n extern crate fmt_macros;\n-extern crate log;\n #[macro_use]\n extern crate syntax;\n extern crate syntax_pos;"}, {"sha": "d34dcfa3ed3246d363d87ee2791648093949c4bc", "filename": "src/libsyntax_pos/lib.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Flibsyntax_pos%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Flibsyntax_pos%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Flib.rs?ref=d29af3799964caec55e3ee806f2ac0f8d494e481", "patch": "@@ -14,9 +14,6 @@\n //!\n //! This API is completely unstable and subject to change.\n \n-#![crate_name = \"syntax_pos\"]\n-#![crate_type = \"dylib\"]\n-#![crate_type = \"rlib\"]\n #![doc(html_logo_url = \"https://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n       html_favicon_url = \"https://doc.rust-lang.org/favicon.ico\",\n       html_root_url = \"https://doc.rust-lang.org/nightly/\")]"}, {"sha": "ad0e582b1c324e4ef38ab460476c2b19e7696037", "filename": "src/libterm/lib.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Flibterm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Flibterm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibterm%2Flib.rs?ref=d29af3799964caec55e3ee806f2ac0f8d494e481", "patch": "@@ -40,9 +40,6 @@\n //! [win]: http://msdn.microsoft.com/en-us/library/windows/desktop/ms682010%28v=vs.85%29.aspx\n //! [ti]: https://en.wikipedia.org/wiki/Terminfo\n \n-#![crate_name = \"term\"]\n-#![crate_type = \"rlib\"]\n-#![crate_type = \"dylib\"]\n #![doc(html_logo_url = \"https://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n        html_favicon_url = \"https://doc.rust-lang.org/favicon.ico\",\n        html_root_url = \"https://doc.rust-lang.org/nightly/\","}, {"sha": "642eb28556408339c78e39f4b9ca107eaa04f13d", "filename": "src/libtest/lib.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Flibtest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Flibtest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Flib.rs?ref=d29af3799964caec55e3ee806f2ac0f8d494e481", "patch": "@@ -23,24 +23,26 @@\n // running tests while providing a base that other test frameworks may\n // build off of.\n \n+// NB: this is also specified in this crate's Cargo.toml, but libsyntax contains logic specific to\n+// this crate, which relies on this attribute (rather than the value of `--crate-name` passed by\n+// cargo) to detect this crate.\n #![crate_name = \"test\"]\n #![unstable(feature = \"test\", issue = \"27812\")]\n-#![crate_type = \"rlib\"]\n-#![crate_type = \"dylib\"]\n #![doc(html_logo_url = \"https://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n        html_favicon_url = \"https://doc.rust-lang.org/favicon.ico\",\n        html_root_url = \"https://doc.rust-lang.org/nightly/\",\n        test(attr(deny(warnings))))]\n #![deny(warnings)]\n \n #![feature(asm)]\n-#![feature(libc)]\n+#![cfg_attr(unix, feature(libc))]\n #![feature(set_stdio)]\n #![feature(panic_unwind)]\n #![feature(staged_api)]\n \n extern crate getopts;\n extern crate term;\n+#[cfg(unix)]\n extern crate libc;\n extern crate panic_unwind;\n "}, {"sha": "461b49aa363b4406716d1f2af76bb3e2a98abf4a", "filename": "src/libunwind/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Flibunwind%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Flibunwind%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibunwind%2Flib.rs?ref=d29af3799964caec55e3ee806f2ac0f8d494e481", "patch": "@@ -9,8 +9,6 @@\n // except according to those terms.\n \n #![no_std]\n-#![crate_name = \"unwind\"]\n-#![crate_type = \"rlib\"]\n #![unstable(feature = \"panic_unwind\", issue = \"32837\")]\n #![deny(warnings)]\n "}, {"sha": "bb292e2e52a95418cf89881184473170d62aa8f1", "filename": "src/test/compile-fail-fulldeps/plugin-as-extern-crate.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Ftest%2Fcompile-fail-fulldeps%2Fplugin-as-extern-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Ftest%2Fcompile-fail-fulldeps%2Fplugin-as-extern-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail-fulldeps%2Fplugin-as-extern-crate.rs?ref=d29af3799964caec55e3ee806f2ac0f8d494e481", "patch": "@@ -15,6 +15,7 @@\n // libsyntax is not compiled for it.\n \n #![deny(plugin_as_library)]\n+#![allow(unused_extern_crates)]\n \n extern crate macro_crate_test; //~ ERROR compiler plugin used as an ordinary library\n "}, {"sha": "996a6b97cd9989c9a25cb654fe59fc3571d6225e", "filename": "src/test/compile-fail/E0254.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Ftest%2Fcompile-fail%2FE0254.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Ftest%2Fcompile-fail%2FE0254.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0254.rs?ref=d29af3799964caec55e3ee806f2ac0f8d494e481", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n #![feature(alloc)]\n+#![allow(unused_extern_crates)]\n \n extern crate alloc;\n //~^ NOTE previous import of the extern crate `alloc` here"}, {"sha": "c285c4d9e00c1b342d806e03a107cab1e9f5e5ea", "filename": "src/test/compile-fail/E0259.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Ftest%2Fcompile-fail%2FE0259.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Ftest%2Fcompile-fail%2FE0259.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0259.rs?ref=d29af3799964caec55e3ee806f2ac0f8d494e481", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n #![feature(alloc, libc)]\n+#![allow(unused_extern_crates)]\n \n extern crate alloc;\n //~^ NOTE previous import of the extern crate `alloc` here"}, {"sha": "ad8888e58f79ad4176b537850c836d2933d77b77", "filename": "src/test/compile-fail/E0260.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Ftest%2Fcompile-fail%2FE0260.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Ftest%2Fcompile-fail%2FE0260.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0260.rs?ref=d29af3799964caec55e3ee806f2ac0f8d494e481", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n #![feature(alloc)]\n+#![allow(unused_extern_crates)]\n \n extern crate alloc;\n //~^ NOTE previous import of the extern crate `alloc` here"}, {"sha": "fc4bca865c932e390fd8898f1ad3d3d1b93391d4", "filename": "src/test/compile-fail/auxiliary/lint_unused_extern_crate5.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Ftest%2Fcompile-fail%2Fauxiliary%2Flint_unused_extern_crate5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Ftest%2Fcompile-fail%2Fauxiliary%2Flint_unused_extern_crate5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fauxiliary%2Flint_unused_extern_crate5.rs?ref=d29af3799964caec55e3ee806f2ac0f8d494e481", "patch": "@@ -0,0 +1,9 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms."}, {"sha": "bc9e2345f0ebb57a098ea525585f98da4d8ecd1b", "filename": "src/test/compile-fail/enable-unstable-lib-feature.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Ftest%2Fcompile-fail%2Fenable-unstable-lib-feature.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Ftest%2Fcompile-fail%2Fenable-unstable-lib-feature.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fenable-unstable-lib-feature.rs?ref=d29af3799964caec55e3ee806f2ac0f8d494e481", "patch": "@@ -16,6 +16,7 @@\n #![deny(non_snake_case)] // To trigger a hard error\n \n // Shouldn't generate a warning about unstable features\n+#[allow(unused_extern_crates)]\n extern crate stability_cfg2;\n \n pub fn BOGUS() { } //~ ERROR"}, {"sha": "2dd6b904072676243b72b9ef882460c0b00b6633", "filename": "src/test/compile-fail/feature-gate-fn_must_use.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Ftest%2Fcompile-fail%2Ffeature-gate-fn_must_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Ftest%2Fcompile-fail%2Ffeature-gate-fn_must_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffeature-gate-fn_must_use.rs?ref=d29af3799964caec55e3ee806f2ac0f8d494e481", "patch": "@@ -0,0 +1,31 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(rustc_attrs)]\n+\n+struct MyStruct;\n+\n+impl MyStruct {\n+    #[must_use]\n+    fn need_to_use_method() -> bool { true } //~ WARN `#[must_use]` on methods is experimental\n+}\n+\n+#[must_use]\n+fn need_to_use_it() -> bool { true } //~ WARN `#[must_use]` on functions is experimental\n+\n+\n+// Feature gates are tidy-required to have a specially named (or\n+// comment-annotated) compile-fail test (which MUST fail), but for\n+// backwards-compatibility reasons, we want `#[must_use]` on functions to be\n+// compilable even if the `fn_must_use` feature is absent, thus necessitating\n+// the usage of `#[rustc_error]` here, pragmatically if awkwardly solving this\n+// dilemma until a superior solution can be devised.\n+#[rustc_error]\n+fn main() {} //~ ERROR compilation successful"}, {"sha": "204190d64acc1f61a33a02b7e02a510c52ce464d", "filename": "src/test/compile-fail/feature-gate/issue-43106-gating-of-builtin-attrs.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Ftest%2Fcompile-fail%2Ffeature-gate%2Fissue-43106-gating-of-builtin-attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Ftest%2Fcompile-fail%2Ffeature-gate%2Fissue-43106-gating-of-builtin-attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffeature-gate%2Fissue-43106-gating-of-builtin-attrs.rs?ref=d29af3799964caec55e3ee806f2ac0f8d494e481", "patch": "@@ -680,6 +680,7 @@ mod must_use {\n     mod inner { #![must_use=\"1400\"] }\n \n     #[must_use = \"1400\"] fn f() { }\n+    //~^ WARN `#[must_use]` on functions is experimental\n \n     #[must_use = \"1400\"] struct S;\n "}, {"sha": "0f5aa24926beb9d3d24026f5a68ab9904458f85d", "filename": "src/test/compile-fail/issue-36881.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Ftest%2Fcompile-fail%2Fissue-36881.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Ftest%2Fcompile-fail%2Fissue-36881.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-36881.rs?ref=d29af3799964caec55e3ee806f2ac0f8d494e481", "patch": "@@ -11,6 +11,7 @@\n // aux-build:issue-36881-aux.rs\n \n fn main() {\n+    #[allow(unused_extern_crates)]\n     extern crate issue_36881_aux;\n     use issue_36881_aux::Foo; //~ ERROR unresolved import\n }"}, {"sha": "9bc2c021904aad24dee2886f8a9cf2b8db797e5a", "filename": "src/test/compile-fail/lint-stability-deprecated.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Ftest%2Fcompile-fail%2Flint-stability-deprecated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Ftest%2Fcompile-fail%2Flint-stability-deprecated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-stability-deprecated.rs?ref=d29af3799964caec55e3ee806f2ac0f8d494e481", "patch": "@@ -14,7 +14,7 @@\n // aux-build:stability_cfg2.rs\n \n #![warn(deprecated)]\n-#![allow(dead_code)]\n+#![allow(dead_code, unused_extern_crates)]\n #![feature(staged_api, test_feature, rustc_attrs)]\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "a3cfa1349831d6f477967879059369bd8556b44a", "filename": "src/test/compile-fail/lint-unused-extern-crate.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Ftest%2Fcompile-fail%2Flint-unused-extern-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Ftest%2Fcompile-fail%2Flint-unused-extern-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-unused-extern-crate.rs?ref=d29af3799964caec55e3ee806f2ac0f8d494e481", "patch": "@@ -12,12 +12,15 @@\n // aux-build:lint_unused_extern_crate2.rs\n // aux-build:lint_unused_extern_crate3.rs\n // aux-build:lint_unused_extern_crate4.rs\n+// aux-build:lint_unused_extern_crate5.rs\n \n #![deny(unused_extern_crates)]\n #![allow(unused_variables)]\n #![allow(deprecated)]\n \n-extern crate lint_unused_extern_crate4; //~ ERROR: unused extern crate\n+extern crate lint_unused_extern_crate5; //~ ERROR: unused extern crate\n+\n+pub extern crate lint_unused_extern_crate4; // no error, it is reexported\n \n extern crate lint_unused_extern_crate3; // no error, it is used\n "}, {"sha": "a2778a831306bbb7a5ec6c54c588788f0a7ee391", "filename": "src/test/compile-fail/macro-reexport-malformed-1.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Ftest%2Fcompile-fail%2Fmacro-reexport-malformed-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Ftest%2Fcompile-fail%2Fmacro-reexport-malformed-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmacro-reexport-malformed-1.rs?ref=d29af3799964caec55e3ee806f2ac0f8d494e481", "patch": "@@ -11,5 +11,6 @@\n #![no_std]\n #![feature(macro_reexport)]\n \n+#[allow(unused_extern_crates)]\n #[macro_reexport]  //~ ERROR bad macro reexport\n extern crate std;"}, {"sha": "c5af9e3799de77bc3d1e0b379dd85e344d394dc8", "filename": "src/test/compile-fail/macro-reexport-malformed-2.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Ftest%2Fcompile-fail%2Fmacro-reexport-malformed-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Ftest%2Fcompile-fail%2Fmacro-reexport-malformed-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmacro-reexport-malformed-2.rs?ref=d29af3799964caec55e3ee806f2ac0f8d494e481", "patch": "@@ -11,5 +11,6 @@\n #![no_std]\n #![feature(macro_reexport)]\n \n+#[allow(unused_extern_crates)]\n #[macro_reexport=\"foo\"]  //~ ERROR bad macro reexport\n extern crate std;"}, {"sha": "d72d1ee004ef77ce09923c960fa8fc0f1c0713d8", "filename": "src/test/compile-fail/macro-reexport-malformed-3.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Ftest%2Fcompile-fail%2Fmacro-reexport-malformed-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Ftest%2Fcompile-fail%2Fmacro-reexport-malformed-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmacro-reexport-malformed-3.rs?ref=d29af3799964caec55e3ee806f2ac0f8d494e481", "patch": "@@ -11,5 +11,6 @@\n #![no_std]\n #![feature(macro_reexport)]\n \n+#[allow(unused_extern_crates)]\n #[macro_reexport(foo=\"bar\")]  //~ ERROR bad macro reexport\n extern crate std;"}, {"sha": "a07cc834411732da96fd7dc9e87df1bc72ce64e2", "filename": "src/test/compile-fail/macro-use-bad-args-1.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Ftest%2Fcompile-fail%2Fmacro-use-bad-args-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Ftest%2Fcompile-fail%2Fmacro-use-bad-args-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmacro-use-bad-args-1.rs?ref=d29af3799964caec55e3ee806f2ac0f8d494e481", "patch": "@@ -10,5 +10,6 @@\n \n #![no_std]\n \n+#[allow(unused_extern_crates)]\n #[macro_use(foo(bar))]  //~ ERROR bad macro import\n extern crate std;"}, {"sha": "89004f16897742944693a75edb034c449fab82bb", "filename": "src/test/compile-fail/macro-use-bad-args-2.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Ftest%2Fcompile-fail%2Fmacro-use-bad-args-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Ftest%2Fcompile-fail%2Fmacro-use-bad-args-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmacro-use-bad-args-2.rs?ref=d29af3799964caec55e3ee806f2ac0f8d494e481", "patch": "@@ -10,5 +10,6 @@\n \n #![no_std]\n \n+#[allow(unused_extern_crates)]\n #[macro_use(foo=\"bar\")]  //~ ERROR bad macro import\n extern crate std;"}, {"sha": "49064853d21d6830190f7a46d4ffd8f000e31118", "filename": "src/test/compile-fail/no-std-inject.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Ftest%2Fcompile-fail%2Fno-std-inject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Ftest%2Fcompile-fail%2Fno-std-inject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fno-std-inject.rs?ref=d29af3799964caec55e3ee806f2ac0f8d494e481", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n #![no_std]\n+#![allow(unused_extern_crates)]\n \n extern crate core; //~ ERROR: the name `core` is defined multiple times\n extern crate std;"}, {"sha": "35695efe1a9b2293fd3d1e3aeed16a8edad06801", "filename": "src/test/compile-fail/placement-expr-unstable.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Ftest%2Fcompile-fail%2Fplacement-expr-unstable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Ftest%2Fcompile-fail%2Fplacement-expr-unstable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fplacement-expr-unstable.rs?ref=d29af3799964caec55e3ee806f2ac0f8d494e481", "patch": "@@ -12,8 +12,6 @@\n \n #![feature(placement_in_syntax)]\n \n-extern crate core;\n-\n fn main() {\n     use std::boxed::HEAP; //~ ERROR use of unstable library feature\n "}, {"sha": "6a04a2c370430c47fdbf2f7c1ff3cca906a45da7", "filename": "src/test/compile-fail/resolve-conflict-extern-crate-vs-extern-crate.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Ftest%2Fcompile-fail%2Fresolve-conflict-extern-crate-vs-extern-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Ftest%2Fcompile-fail%2Fresolve-conflict-extern-crate-vs-extern-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fresolve-conflict-extern-crate-vs-extern-crate.rs?ref=d29af3799964caec55e3ee806f2ac0f8d494e481", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#[allow(unused_extern_crates)]\n extern crate std;\n //~^ ERROR the name `std` is defined multiple times\n "}, {"sha": "a89fd802baf0c11f936c9672da05c4be557ad6b3", "filename": "src/test/compile-fail/resolve_self_super_hint.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Ftest%2Fcompile-fail%2Fresolve_self_super_hint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Ftest%2Fcompile-fail%2Fresolve_self_super_hint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fresolve_self_super_hint.rs?ref=d29af3799964caec55e3ee806f2ac0f8d494e481", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n #![feature(alloc)]\n+#![allow(unused_extern_crates)]\n \n mod a {\n     extern crate alloc;"}, {"sha": "e20d03478ec188ed66208e08ea95b4f69f17f9d0", "filename": "src/test/compile-fail/unused-attr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Ftest%2Fcompile-fail%2Funused-attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Ftest%2Fcompile-fail%2Funused-attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funused-attr.rs?ref=d29af3799964caec55e3ee806f2ac0f8d494e481", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n #![deny(unused_attributes)]\n-#![allow(dead_code, unused_imports)]\n+#![allow(dead_code, unused_imports, unused_extern_crates)]\n #![feature(custom_attribute)]\n \n #![foo] //~ ERROR unused attribute"}, {"sha": "708784df317a6842800ce3d735752843dda0bbcc", "filename": "src/test/mir-opt/issue-43457.rs", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Ftest%2Fmir-opt%2Fissue-43457.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Ftest%2Fmir-opt%2Fissue-43457.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue-43457.rs?ref=d29af3799964caec55e3ee806f2ac0f8d494e481", "patch": "@@ -0,0 +1,55 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags: -Z identify_regions -Z span_free_formats\n+// ignore-tidy-linelength\n+\n+// Regression test for #43457: an `EndRegion` was missing from output\n+// because compiler was using a faulty means for region map lookup.\n+\n+use std::cell::RefCell;\n+\n+fn rc_refcell_test(r: RefCell<i32>) {\n+    r.borrow_mut();\n+}\n+\n+fn main() { }\n+\n+// END RUST SOURCE\n+// START rustc.node5.SimplifyCfg-qualify-consts.after.mir\n+//\n+// fn rc_refcell_test(_1: std::cell::RefCell<i32>) -> () {\n+//     let mut _0: ();\n+//     scope 1 {\n+//         let _2: std::cell::RefCell<i32>;\n+//     }\n+//     let mut _3: std::cell::RefMut<'17dce, i32>;\n+//     let mut _4: &'17dce std::cell::RefCell<i32>;\n+//\n+//     bb0: {\n+//         StorageLive(_2);\n+//         _2 = _1;\n+//         StorageLive(_4);\n+//         _4 = &'17dce _2;\n+//         _3 = const <std::cell::RefCell<T>>::borrow_mut(_4) -> bb1;\n+//     }\n+//\n+//     bb1: {\n+//         drop(_3) -> bb2;\n+//     }\n+//\n+//     bb2: {\n+//         StorageDead(_4);\n+//         EndRegion('17dce);\n+//         _0 = ();\n+//         StorageDead(_2);\n+//         return;\n+//     }\n+// }"}, {"sha": "7197f4e17e3cc89750dc5aa9f125150533c48049", "filename": "src/test/run-make/alloc-extern-crates/Makefile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Ftest%2Frun-make%2Falloc-extern-crates%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Ftest%2Frun-make%2Falloc-extern-crates%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Falloc-extern-crates%2FMakefile?ref=d29af3799964caec55e3ee806f2ac0f8d494e481", "patch": "@@ -2,4 +2,4 @@\n \n all:\n \t$(RUSTC) fakealloc.rs\n-\t$(RUSTC) ../../../liballoc/lib.rs --cfg feature=\\\"external_crate\\\" --extern external=$(TMPDIR)/$(shell $(RUSTC) --print file-names fakealloc.rs)\n+\t$(RUSTC) --crate-type=rlib ../../../liballoc/lib.rs --cfg feature=\\\"external_crate\\\" --extern external=$(TMPDIR)/$(shell $(RUSTC) --print file-names fakealloc.rs)"}, {"sha": "0e613ac0727a6ee146001d4ae6f775f336162efc", "filename": "src/test/run-pass/issue-43205.rs", "status": "renamed", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Ftest%2Frun-pass%2Fissue-43205.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Ftest%2Frun-pass%2Fissue-43205.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-43205.rs?ref=d29af3799964caec55e3ee806f2ac0f8d494e481", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn foo(z: &mut Vec<(&u8,&u8)>, (x, y): (&u8, &u8)) {\n-    z.push((x,y));\n+fn main() {\n+   &&[()][0];\n+   println!(\"{:?}\", &[(),()][1]);\n }", "previous_filename": "src/test/ui/lifetime-errors/ex3-both-anon-regions-4.rs"}, {"sha": "5a23adeceb5c01e4258cf9e7ac3c95a033f5b83d", "filename": "src/test/run-pass/wrong-hashset-issue-42918.rs", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Ftest%2Frun-pass%2Fwrong-hashset-issue-42918.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Ftest%2Frun-pass%2Fwrong-hashset-issue-42918.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fwrong-hashset-issue-42918.rs?ref=d29af3799964caec55e3ee806f2ac0f8d494e481", "patch": "@@ -0,0 +1,38 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+//\n+// compile-flags: -O\n+\n+use std::collections::HashSet;\n+\n+#[derive(PartialEq, Debug, Hash, Eq, Clone, PartialOrd, Ord)]\n+enum MyEnum {\n+    E0,\n+\n+    E1,\n+\n+    E2,\n+    E3,\n+    E4,\n+\n+    E5,\n+    E6,\n+    E7,\n+}\n+\n+\n+fn main() {\n+    use MyEnum::*;\n+    let s: HashSet<_> = [E4, E1].iter().cloned().collect();\n+    let mut v: Vec<_> = s.into_iter().collect();\n+    v.sort();\n+\n+    assert_eq!([E1, E4], &v[..]);\n+}"}, {"sha": "6c4f6d0700a53b62fa44d4094d22a820264dc405", "filename": "src/test/rustdoc/remove-duplicates.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Ftest%2Frustdoc%2Fremove-duplicates.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Ftest%2Frustdoc%2Fremove-duplicates.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fremove-duplicates.rs?ref=d29af3799964caec55e3ee806f2ac0f8d494e481", "patch": "@@ -0,0 +1,24 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![crate_name = \"foo\"]\n+\n+mod foo {\n+    pub use bar::*;\n+    pub mod bar {\n+        pub trait Foo {\n+            fn foo();\n+        }\n+    }\n+}\n+\n+// @count foo/index.html '//*[@class=\"trait\"]' 1\n+pub use foo::bar::*;\n+pub use foo::*;"}, {"sha": "295d480828930ba7bf47da9534538a65bdb3b06d", "filename": "src/test/ui/issue-44023.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Ftest%2Fui%2Fissue-44023.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Ftest%2Fui%2Fissue-44023.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-44023.rs?ref=d29af3799964caec55e3ee806f2ac0f8d494e481", "patch": "@@ -0,0 +1,16 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(non_ascii_idents)]\n+\n+pub fn main () {}\n+\n+fn \u10e1\u10d0\u10ed\u10db\u10d4\u10da\u10d0\u10d3_\u10d2\u10d4\u10db\u10e0\u10d8\u10d4\u10da\u10d8_\u10e1\u10d0\u10d3\u10d8\u10da\u10d8 ( ) -> isize {\n+}"}, {"sha": "a17512ba4abc4824e0af7ccf9a4b7e1b63ecd90f", "filename": "src/test/ui/issue-44023.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Ftest%2Fui%2Fissue-44023.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Ftest%2Fui%2Fissue-44023.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-44023.stderr?ref=d29af3799964caec55e3ee806f2ac0f8d494e481", "patch": "@@ -0,0 +1,13 @@\n+error[E0308]: mismatched types\n+  --> $DIR/issue-44023.rs:15:42\n+   |\n+15 |   fn \u10e1\u10d0\u10ed\u10db\u10d4\u10da\u10d0\u10d3_\u10d2\u10d4\u10db\u10e0\u10d8\u10d4\u10da\u10d8_\u10e1\u10d0\u10d3\u10d8\u10da\u10d8 ( ) -> isize {\n+   |  __________________________________________^\n+16 | | }\n+   | |_^ expected isize, found ()\n+   |\n+   = note: expected type `isize`\n+              found type `()`\n+\n+error: aborting due to previous error\n+"}, {"sha": "ef47214f2b393fb8d6c7ecd341847f67d7dbc4f4", "filename": "src/test/ui/issue-44078.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Ftest%2Fui%2Fissue-44078.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Ftest%2Fui%2Fissue-44078.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-44078.rs?ref=d29af3799964caec55e3ee806f2ac0f8d494e481", "patch": "@@ -0,0 +1,13 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {\n+    \"\ud83d\ude0a\"\";\n+}"}, {"sha": "389f3b2479aa45c3f6669934be61380275c0013d", "filename": "src/test/ui/issue-44078.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Ftest%2Fui%2Fissue-44078.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Ftest%2Fui%2Fissue-44078.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-44078.stderr?ref=d29af3799964caec55e3ee806f2ac0f8d494e481", "patch": "@@ -0,0 +1,10 @@\n+error: unterminated double quote string\n+  --> $DIR/issue-44078.rs:12:8\n+   |\n+12 |       \"\ud83d\ude0a\"\";\n+   |  ________^\n+13 | | }\n+   | |__^\n+\n+error: aborting due to previous error\n+"}, {"sha": "1ee0099799760d392a7bc037b3cd74c447678d36", "filename": "src/test/ui/lifetime-errors/ex2b-push-no-existing-names.stderr", "status": "modified", "additions": 4, "deletions": 19, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Ftest%2Fui%2Flifetime-errors%2Fex2b-push-no-existing-names.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Ftest%2Fui%2Flifetime-errors%2Fex2b-push-no-existing-names.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex2b-push-no-existing-names.stderr?ref=d29af3799964caec55e3ee806f2ac0f8d494e481", "patch": "@@ -1,25 +1,10 @@\n-error[E0308]: mismatched types\n+error[E0623]: lifetime mismatch\n   --> $DIR/ex2b-push-no-existing-names.rs:16:12\n    |\n+15 | fn foo(x: &mut Vec<Ref<i32>>, y: Ref<i32>) {\n+   |                    --------      -------- these two types are declared with different lifetimes...\n 16 |     x.push(y);\n-   |            ^ lifetime mismatch\n-   |\n-   = note: expected type `Ref<'_, _>`\n-              found type `Ref<'_, _>`\n-note: the anonymous lifetime #3 defined on the function body at 15:1...\n-  --> $DIR/ex2b-push-no-existing-names.rs:15:1\n-   |\n-15 | / fn foo(x: &mut Vec<Ref<i32>>, y: Ref<i32>) {\n-16 | |     x.push(y);\n-17 | | }\n-   | |_^\n-note: ...does not necessarily outlive the anonymous lifetime #2 defined on the function body at 15:1\n-  --> $DIR/ex2b-push-no-existing-names.rs:15:1\n-   |\n-15 | / fn foo(x: &mut Vec<Ref<i32>>, y: Ref<i32>) {\n-16 | |     x.push(y);\n-17 | | }\n-   | |_^\n+   |            ^ ...but data from `y` flows into `x` here\n \n error: aborting due to previous error\n "}, {"sha": "74a40c87c2fb1841b7a64acaa36cf7cb2c95b746", "filename": "src/test/ui/lifetime-errors/ex3-both-anon-regions-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-2.stderr?ref=d29af3799964caec55e3ee806f2ac0f8d494e481", "patch": "@@ -2,7 +2,7 @@ error[E0623]: lifetime mismatch\n   --> $DIR/ex3-both-anon-regions-2.rs:12:9\n    |\n 11 | fn foo((v, w): (&u8, &u8), x: &u8) {\n-   |                 ---           --- these references are not declared with the same lifetime...\n+   |                 ---           --- these two types are declared with different lifetimes...\n 12 |     v = x;\n    |         ^ ...but data from `x` flows here\n "}, {"sha": "51271243bdfdcc2399ca1d0f6b251cb7c0f1e540", "filename": "src/test/ui/lifetime-errors/ex3-both-anon-regions-3.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-3.rs?ref=d29af3799964caec55e3ee806f2ac0f8d494e481", "patch": "@@ -8,8 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn foo((v, w): (&u8, &u8), (x, y): (&u8, &u8)) {\n-    v = x;\n+fn foo(z: &mut Vec<(&u8,&u8)>, (x, y): (&u8, &u8)) {\n+    z.push((x,y));\n }\n \n fn main() { }\n+"}, {"sha": "898866c75f2140fccba2edc7a040a13816eec910", "filename": "src/test/ui/lifetime-errors/ex3-both-anon-regions-3.stderr", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-3.stderr?ref=d29af3799964caec55e3ee806f2ac0f8d494e481", "patch": "@@ -1,10 +1,18 @@\n error[E0623]: lifetime mismatch\n-  --> $DIR/ex3-both-anon-regions-3.rs:12:9\n+  --> $DIR/ex3-both-anon-regions-3.rs:12:13\n    |\n-11 | fn foo((v, w): (&u8, &u8), (x, y): (&u8, &u8)) {\n-   |                 ---                 --- these references are not declared with the same lifetime...\n-12 |     v = x;\n-   |         ^ ...but data flows here\n+11 | fn foo(z: &mut Vec<(&u8,&u8)>, (x, y): (&u8, &u8)) {\n+   |                     ---                 --- these two types are declared with different lifetimes...\n+12 |     z.push((x,y));\n+   |             ^ ...but data flows into `z` here\n \n-error: aborting due to previous error\n+error[E0623]: lifetime mismatch\n+  --> $DIR/ex3-both-anon-regions-3.rs:12:15\n+   |\n+11 | fn foo(z: &mut Vec<(&u8,&u8)>, (x, y): (&u8, &u8)) {\n+   |                         ---                  --- these two types are declared with different lifetimes...\n+12 |     z.push((x,y));\n+   |               ^ ...but data flows into `z` here\n+\n+error: aborting due to 2 previous errors\n "}, {"sha": "9c2630fc811439ea0a07cea2933b54703bd5de0a", "filename": "src/test/ui/lifetime-errors/ex3-both-anon-regions-4.stderr", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/7c5780b3564d98aec130ee2f27368b116a3f1160/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7c5780b3564d98aec130ee2f27368b116a3f1160/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-4.stderr?ref=7c5780b3564d98aec130ee2f27368b116a3f1160", "patch": "@@ -1,20 +0,0 @@\n-error[E0601]: main function not found\n-\n-error[E0623]: lifetime mismatch\n-  --> $DIR/ex3-both-anon-regions-4.rs:12:13\n-   |\n-11 | fn foo(z: &mut Vec<(&u8,&u8)>, (x, y): (&u8, &u8)) {\n-   |                     ---                 --- these references are not declared with the same lifetime...\n-12 |     z.push((x,y));\n-   |             ^ ...but data flows into `z` here\n-\n-error[E0623]: lifetime mismatch\n-  --> $DIR/ex3-both-anon-regions-4.rs:12:15\n-   |\n-11 | fn foo(z: &mut Vec<(&u8,&u8)>, (x, y): (&u8, &u8)) {\n-   |                         ---                  --- these references are not declared with the same lifetime...\n-12 |     z.push((x,y));\n-   |               ^ ...but data flows into `z` here\n-\n-error: aborting due to 3 previous errors\n-"}, {"sha": "2fbf31aead5edea147c45a99fbcfc85ed250e521", "filename": "src/test/ui/lifetime-errors/ex3-both-anon-regions-both-are-structs-2.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs-2.rs?ref=d29af3799964caec55e3ee806f2ac0f8d494e481", "patch": "@@ -0,0 +1,19 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+struct Ref<'a, 'b> {\n+    a: &'a u32,\n+    b: &'b u32,\n+}\n+\n+fn foo(mut x: Ref, y: Ref) {\n+    x.b = y.b;\n+}\n+\n+fn main() {}"}, {"sha": "26f31defc9eb1ff8eeabccd3553357509b870c69", "filename": "src/test/ui/lifetime-errors/ex3-both-anon-regions-both-are-structs-2.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs-2.stderr?ref=d29af3799964caec55e3ee806f2ac0f8d494e481", "patch": "@@ -0,0 +1,10 @@\n+error[E0623]: lifetime mismatch\n+  --> $DIR/ex3-both-anon-regions-both-are-structs-2.rs:16:11\n+   |\n+15 | fn foo(mut x: Ref, y: Ref) {\n+   |               ---     --- these two types are declared with different lifetimes...\n+16 |     x.b = y.b;\n+   |           ^^^ ...but data from `y` flows into `x` here\n+\n+error: aborting due to previous error\n+"}, {"sha": "120a7ca74aeeed81d5c28af32933d5d562e52935", "filename": "src/test/ui/lifetime-errors/ex3-both-anon-regions-both-are-structs-3.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs-3.rs?ref=d29af3799964caec55e3ee806f2ac0f8d494e481", "patch": "@@ -0,0 +1,19 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+struct Ref<'a, 'b> {\n+    a: &'a u32,\n+    b: &'b u32,\n+}\n+\n+fn foo(mut x: Ref) {\n+    x.a = x.b;\n+}\n+\n+fn main() {}\n\\ No newline at end of file"}, {"sha": "1b5ac7c7b57eef542646526fd9a4e4bf07c663d7", "filename": "src/test/ui/lifetime-errors/ex3-both-anon-regions-both-are-structs-3.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs-3.stderr?ref=d29af3799964caec55e3ee806f2ac0f8d494e481", "patch": "@@ -0,0 +1,12 @@\n+error[E0623]: lifetime mismatch\n+  --> $DIR/ex3-both-anon-regions-both-are-structs-3.rs:16:11\n+   |\n+15 | fn foo(mut x: Ref) {\n+   |               ---\n+   |               |\n+   |               this type was declared with multiple lifetimes...\n+16 |     x.a = x.b;\n+   |           ^^^ ...but data with one lifetime flows into the other here\n+\n+error: aborting due to previous error\n+"}, {"sha": "67ba8ee532ad0fc75148102766eaa157c40f7012", "filename": "src/test/ui/lifetime-errors/ex3-both-anon-regions-both-are-structs.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs.rs?ref=d29af3799964caec55e3ee806f2ac0f8d494e481", "patch": "@@ -0,0 +1,18 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+struct Ref<'a> {\n+    x: &'a u32,\n+}\n+\n+fn foo(mut x: Vec<Ref>, y: Ref) {\n+    x.push(y);\n+}\n+\n+fn main() {}"}, {"sha": "6ad795400b334e040cb0d5c5e4e22e6959170ca2", "filename": "src/test/ui/lifetime-errors/ex3-both-anon-regions-both-are-structs.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs.stderr?ref=d29af3799964caec55e3ee806f2ac0f8d494e481", "patch": "@@ -0,0 +1,10 @@\n+error[E0623]: lifetime mismatch\n+  --> $DIR/ex3-both-anon-regions-both-are-structs.rs:15:12\n+   |\n+14 | fn foo(mut x: Vec<Ref>, y: Ref) {\n+   |                   ---      --- these two types are declared with different lifetimes...\n+15 |     x.push(y);\n+   |            ^ ...but data from `y` flows into `x` here\n+\n+error: aborting due to previous error\n+"}, {"sha": "a8b1f53fc98d67f7469c6d722bdbe2ca45bc92a0", "filename": "src/test/ui/lifetime-errors/ex3-both-anon-regions-one-is-struct-2.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-one-is-struct-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-one-is-struct-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-one-is-struct-2.rs?ref=d29af3799964caec55e3ee806f2ac0f8d494e481", "patch": "@@ -0,0 +1,17 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+struct Ref<'a, 'b> { a: &'a u32, b: &'b u32 }\n+\n+fn foo(mut x: Ref, y: &u32) {\n+    y = x.b;\n+}\n+\n+fn main() { }"}, {"sha": "31c7ebf6504cc0bd9ebf76960aa3c11ec62421e4", "filename": "src/test/ui/lifetime-errors/ex3-both-anon-regions-one-is-struct-2.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-one-is-struct-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-one-is-struct-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-one-is-struct-2.stderr?ref=d29af3799964caec55e3ee806f2ac0f8d494e481", "patch": "@@ -0,0 +1,12 @@\n+error[E0623]: lifetime mismatch\n+  --> $DIR/ex3-both-anon-regions-one-is-struct-2.rs:14:9\n+   |\n+13 | fn foo(mut x: Ref, y: &u32) {\n+   |               ---     ----\n+   |               |\n+   |               these two types are declared with different lifetimes...\n+14 |     y = x.b;\n+   |         ^^^ ...but data from `x` flows into `y` here\n+\n+error: aborting due to previous error\n+"}, {"sha": "4933dbb7e7a7a2c3ec95ffb312fa34dcd9875ee4", "filename": "src/test/ui/lifetime-errors/ex3-both-anon-regions-one-is-struct-3.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-one-is-struct-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-one-is-struct-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-one-is-struct-3.rs?ref=d29af3799964caec55e3ee806f2ac0f8d494e481", "patch": "@@ -0,0 +1,17 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+struct Ref<'a, 'b> { a: &'a u32, b: &'b u32 }\n+\n+fn foo(mut y: Ref, x: &u32) {\n+    y.b = x;\n+}\n+\n+fn main() { }"}, {"sha": "d54b526aef97fc760866238c87078b8286db6f9f", "filename": "src/test/ui/lifetime-errors/ex3-both-anon-regions-one-is-struct-3.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-one-is-struct-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-one-is-struct-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-one-is-struct-3.stderr?ref=d29af3799964caec55e3ee806f2ac0f8d494e481", "patch": "@@ -0,0 +1,10 @@\n+error[E0623]: lifetime mismatch\n+  --> $DIR/ex3-both-anon-regions-one-is-struct-3.rs:14:11\n+   |\n+13 | fn foo(mut y: Ref, x: &u32) {\n+   |               ---     ---- these two types are declared with different lifetimes...\n+14 |     y.b = x;\n+   |           ^ ...but data from `x` flows into `y` here\n+\n+error: aborting due to previous error\n+"}, {"sha": "e1594b1a277cdea01b4f1899eb8a4abe5455fda0", "filename": "src/test/ui/lifetime-errors/ex3-both-anon-regions-one-is-struct.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-one-is-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-one-is-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-one-is-struct.rs?ref=d29af3799964caec55e3ee806f2ac0f8d494e481", "patch": "@@ -0,0 +1,20 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+struct Ref<'a, 'b> {\n+    a: &'a u32,\n+    b: &'b u32,\n+}\n+\n+fn foo(mut x: Ref, y: &u32) {\n+    x.b = y;\n+}\n+\n+fn main() {}"}, {"sha": "bb7b9ea68436c6f75168fb1c9edecbd846ea0af2", "filename": "src/test/ui/lifetime-errors/ex3-both-anon-regions-one-is-struct.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-one-is-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-one-is-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-one-is-struct.stderr?ref=d29af3799964caec55e3ee806f2ac0f8d494e481", "patch": "@@ -0,0 +1,10 @@\n+error[E0623]: lifetime mismatch\n+  --> $DIR/ex3-both-anon-regions-one-is-struct.rs:17:11\n+   |\n+16 | fn foo(mut x: Ref, y: &u32) {\n+   |               ---     ---- these two types are declared with different lifetimes...\n+17 |     x.b = y;\n+   |           ^ ...but data from `y` flows into `x` here\n+\n+error: aborting due to previous error\n+"}, {"sha": "0dc257ac0921ef8b12fa5d557fbd4708a04d4ca3", "filename": "src/test/ui/lifetime-errors/ex3-both-anon-regions-return-type-is-anon.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-return-type-is-anon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-return-type-is-anon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-return-type-is-anon.rs?ref=d29af3799964caec55e3ee806f2ac0f8d494e481", "patch": "@@ -0,0 +1,22 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+struct Foo {\n+  field: i32\n+}\n+\n+impl Foo {\n+  fn foo<'a>(&self, x: &i32) -> &i32 {\n+    x\n+  }\n+}\n+\n+fn main() { }\n+"}, {"sha": "890f9b311e7d20c9f428217e2e13f18199ebe38f", "filename": "src/test/ui/lifetime-errors/ex3-both-anon-regions-return-type-is-anon.stderr", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-return-type-is-anon.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-return-type-is-anon.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-return-type-is-anon.stderr?ref=d29af3799964caec55e3ee806f2ac0f8d494e481", "patch": "@@ -0,0 +1,23 @@\n+error[E0312]: lifetime of reference outlives lifetime of borrowed content...\n+  --> $DIR/ex3-both-anon-regions-return-type-is-anon.rs:17:5\n+   |\n+17 |     x\n+   |     ^\n+   |\n+note: ...the reference is valid for the anonymous lifetime #1 defined on the method body at 16:3...\n+  --> $DIR/ex3-both-anon-regions-return-type-is-anon.rs:16:3\n+   |\n+16 | /   fn foo<'a>(&self, x: &i32) -> &i32 {\n+17 | |     x\n+18 | |   }\n+   | |___^\n+note: ...but the borrowed content is only valid for the anonymous lifetime #2 defined on the method body at 16:3\n+  --> $DIR/ex3-both-anon-regions-return-type-is-anon.rs:16:3\n+   |\n+16 | /   fn foo<'a>(&self, x: &i32) -> &i32 {\n+17 | |     x\n+18 | |   }\n+   | |___^\n+\n+error: aborting due to previous error\n+"}, {"sha": "0940ce15d1e7679d13fcc9c71c031e2b1f4c4c48", "filename": "src/test/ui/lifetime-errors/ex3-both-anon-regions-self-is-anon.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-self-is-anon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-self-is-anon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-self-is-anon.rs?ref=d29af3799964caec55e3ee806f2ac0f8d494e481", "patch": "@@ -0,0 +1,22 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+struct Foo {\n+    field: i32,\n+}\n+\n+impl Foo {\n+    fn foo<'a>(&self, x: &Foo) -> &Foo {\n+        if true { x } else { self }\n+    }\n+}\n+\n+fn main() {}\n+"}, {"sha": "43f00c32c62856bed949c846ba8a3b21d34ba19a", "filename": "src/test/ui/lifetime-errors/ex3-both-anon-regions-self-is-anon.stderr", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-self-is-anon.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-self-is-anon.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-self-is-anon.stderr?ref=d29af3799964caec55e3ee806f2ac0f8d494e481", "patch": "@@ -0,0 +1,23 @@\n+error[E0312]: lifetime of reference outlives lifetime of borrowed content...\n+  --> $DIR/ex3-both-anon-regions-self-is-anon.rs:17:19\n+   |\n+17 |         if true { x } else { self }\n+   |                   ^\n+   |\n+note: ...the reference is valid for the anonymous lifetime #1 defined on the method body at 16:5...\n+  --> $DIR/ex3-both-anon-regions-self-is-anon.rs:16:5\n+   |\n+16 | /     fn foo<'a>(&self, x: &Foo) -> &Foo {\n+17 | |         if true { x } else { self }\n+18 | |     }\n+   | |_____^\n+note: ...but the borrowed content is only valid for the anonymous lifetime #2 defined on the method body at 16:5\n+  --> $DIR/ex3-both-anon-regions-self-is-anon.rs:16:5\n+   |\n+16 | /     fn foo<'a>(&self, x: &Foo) -> &Foo {\n+17 | |         if true { x } else { self }\n+18 | |     }\n+   | |_____^\n+\n+error: aborting due to previous error\n+"}, {"sha": "3a7ba415c0ded363e73827879d3bc36882fa34cb", "filename": "src/test/ui/lifetime-errors/ex3-both-anon-regions-using-impl-items.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-using-impl-items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-using-impl-items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-using-impl-items.rs?ref=d29af3799964caec55e3ee806f2ac0f8d494e481", "patch": "@@ -0,0 +1,18 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+trait Foo {\n+    fn foo<'a>(x: &mut Vec<&u8>, y: &u8);\n+}\n+impl Foo for () {\n+    fn foo(x: &mut Vec<&u8>, y: &u8) {\n+        x.push(y);\n+    }\n+}\n+fn main() {}"}, {"sha": "9591df8e8aad249277330641674ee3891653b147", "filename": "src/test/ui/lifetime-errors/ex3-both-anon-regions-using-impl-items.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-using-impl-items.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-using-impl-items.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-using-impl-items.stderr?ref=d29af3799964caec55e3ee806f2ac0f8d494e481", "patch": "@@ -0,0 +1,10 @@\n+error[E0623]: lifetime mismatch\n+  --> $DIR/ex3-both-anon-regions-using-impl-items.rs:15:16\n+   |\n+14 |     fn foo(x: &mut Vec<&u8>, y: &u8) {\n+   |                        ---      --- these two types are declared with different lifetimes...\n+15 |         x.push(y);\n+   |                ^ ...but data from `y` flows into `x` here\n+\n+error: aborting due to previous error\n+"}, {"sha": "be48d07b94e06098e811eb97395cef030c37f159", "filename": "src/test/ui/lifetime-errors/ex3-both-anon-regions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions.rs?ref=d29af3799964caec55e3ee806f2ac0f8d494e481", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //"}, {"sha": "d3291063859cac81ee35beaa3f6048d878864ac7", "filename": "src/test/ui/lifetime-errors/ex3-both-anon-regions.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions.stderr?ref=d29af3799964caec55e3ee806f2ac0f8d494e481", "patch": "@@ -2,7 +2,7 @@ error[E0623]: lifetime mismatch\n   --> $DIR/ex3-both-anon-regions.rs:12:12\n    |\n 11 | fn foo(x: &mut Vec<&u8>, y: &u8) {\n-   |                    ---      --- these references are not declared with the same lifetime...\n+   |                    ---      --- these two types are declared with different lifetimes...\n 12 |     x.push(y);\n    |            ^ ...but data from `y` flows into `x` here\n "}, {"sha": "c549ded4db2188ea4d06d4cd42e16c9812a95f22", "filename": "src/test/ui/lint/fn_must_use.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Ftest%2Fui%2Flint%2Ffn_must_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Ftest%2Fui%2Flint%2Ffn_must_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Ffn_must_use.rs?ref=d29af3799964caec55e3ee806f2ac0f8d494e481", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(fn_must_use)]\n #![warn(unused_must_use)]\n \n struct MyStruct {"}, {"sha": "242837793a0bf2f4acd1d92d6248189eeee9b443", "filename": "src/test/ui/lint/fn_must_use.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Ftest%2Fui%2Flint%2Ffn_must_use.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Ftest%2Fui%2Flint%2Ffn_must_use.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Ffn_must_use.stderr?ref=d29af3799964caec55e3ee806f2ac0f8d494e481", "patch": "@@ -1,18 +1,18 @@\n warning: unused return value of `need_to_use_this_value` which must be used: it's important\n-  --> $DIR/fn_must_use.rs:30:5\n+  --> $DIR/fn_must_use.rs:31:5\n    |\n-30 |     need_to_use_this_value();\n+31 |     need_to_use_this_value();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: lint level defined here\n-  --> $DIR/fn_must_use.rs:11:9\n+  --> $DIR/fn_must_use.rs:12:9\n    |\n-11 | #![warn(unused_must_use)]\n+12 | #![warn(unused_must_use)]\n    |         ^^^^^^^^^^^^^^^\n \n warning: unused return value of `MyStruct::need_to_use_this_method_value` which must be used\n-  --> $DIR/fn_must_use.rs:33:5\n+  --> $DIR/fn_must_use.rs:34:5\n    |\n-33 |     m.need_to_use_this_method_value();\n+34 |     m.need_to_use_this_method_value();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n "}, {"sha": "3d3f2c05d742e5f907e951aa8849b03f0bc1a895", "filename": "src/tools/cargo", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcargo?ref=d29af3799964caec55e3ee806f2ac0f8d494e481", "patch": "@@ -1 +1 @@\n-Subproject commit 7704f7b1fd52607104cc7fdc435d636c9de1fe90\n+Subproject commit 3d3f2c05d742e5f907e951aa8849b03f0bc1a895"}, {"sha": "15216f52d91fd1bdfda89a9691472f6298454cac", "filename": "src/tools/compiletest/src/main.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d29af3799964caec55e3ee806f2ac0f8d494e481/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs?ref=d29af3799964caec55e3ee806f2ac0f8d494e481", "patch": "@@ -14,6 +14,7 @@\n \n #![deny(warnings)]\n \n+#[cfg(any(target_os = \"macos\", target_os = \"ios\"))]\n extern crate libc;\n extern crate test;\n extern crate getopts;"}]}