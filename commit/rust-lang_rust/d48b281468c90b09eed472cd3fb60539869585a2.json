{"sha": "d48b281468c90b09eed472cd3fb60539869585a2", "node_id": "C_kwDOAAsO6NoAKGQ0OGIyODE0NjhjOTBiMDllZWQ0NzJjZDNmYjYwNTM5ODY5NTg1YTI", "commit": {"author": {"name": "yanchith", "email": "yanchi.toth@gmail.com", "date": "2022-07-16T16:51:15Z"}, "committer": {"name": "yanchith", "email": "yanchi.toth@gmail.com", "date": "2022-07-16T16:51:15Z"}, "message": "Mark lifetimes explicitly", "tree": {"sha": "44f42507c2eb53fe20721558b3d1b93ddf1b063e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/44f42507c2eb53fe20721558b3d1b93ddf1b063e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d48b281468c90b09eed472cd3fb60539869585a2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d48b281468c90b09eed472cd3fb60539869585a2", "html_url": "https://github.com/rust-lang/rust/commit/d48b281468c90b09eed472cd3fb60539869585a2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d48b281468c90b09eed472cd3fb60539869585a2/comments", "author": {"login": "yanchith", "id": 1099245, "node_id": "MDQ6VXNlcjEwOTkyNDU=", "avatar_url": "https://avatars.githubusercontent.com/u/1099245?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yanchith", "html_url": "https://github.com/yanchith", "followers_url": "https://api.github.com/users/yanchith/followers", "following_url": "https://api.github.com/users/yanchith/following{/other_user}", "gists_url": "https://api.github.com/users/yanchith/gists{/gist_id}", "starred_url": "https://api.github.com/users/yanchith/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yanchith/subscriptions", "organizations_url": "https://api.github.com/users/yanchith/orgs", "repos_url": "https://api.github.com/users/yanchith/repos", "events_url": "https://api.github.com/users/yanchith/events{/privacy}", "received_events_url": "https://api.github.com/users/yanchith/received_events", "type": "User", "site_admin": false}, "committer": {"login": "yanchith", "id": 1099245, "node_id": "MDQ6VXNlcjEwOTkyNDU=", "avatar_url": "https://avatars.githubusercontent.com/u/1099245?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yanchith", "html_url": "https://github.com/yanchith", "followers_url": "https://api.github.com/users/yanchith/followers", "following_url": "https://api.github.com/users/yanchith/following{/other_user}", "gists_url": "https://api.github.com/users/yanchith/gists{/gist_id}", "starred_url": "https://api.github.com/users/yanchith/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yanchith/subscriptions", "organizations_url": "https://api.github.com/users/yanchith/orgs", "repos_url": "https://api.github.com/users/yanchith/repos", "events_url": "https://api.github.com/users/yanchith/events{/privacy}", "received_events_url": "https://api.github.com/users/yanchith/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a3122b8138e9c972cb3ef84fb90744be48fe2add", "url": "https://api.github.com/repos/rust-lang/rust/commits/a3122b8138e9c972cb3ef84fb90744be48fe2add", "html_url": "https://github.com/rust-lang/rust/commit/a3122b8138e9c972cb3ef84fb90744be48fe2add"}], "stats": {"total": 20, "additions": 10, "deletions": 10}, "files": [{"sha": "b166c526c0d62ac1d405d149a83939e900b7154e", "filename": "library/alloc/src/collections/binary_heap.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/d48b281468c90b09eed472cd3fb60539869585a2/library%2Falloc%2Fsrc%2Fcollections%2Fbinary_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d48b281468c90b09eed472cd3fb60539869585a2/library%2Falloc%2Fsrc%2Fcollections%2Fbinary_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbinary_heap.rs?ref=d48b281468c90b09eed472cd3fb60539869585a2", "patch": "@@ -292,14 +292,14 @@ pub struct PeekMut<\n }\n \n #[stable(feature = \"collection_debug\", since = \"1.17.0\")]\n-impl<T: Ord + fmt::Debug, A: Allocator> fmt::Debug for PeekMut<'_, T, A> {\n+impl<'a, T: Ord + fmt::Debug, A: Allocator + 'a> fmt::Debug for PeekMut<'a, T, A> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.debug_tuple(\"PeekMut\").field(&self.heap.data[0]).finish()\n     }\n }\n \n #[stable(feature = \"binary_heap_peek_mut\", since = \"1.12.0\")]\n-impl<T: Ord, A: Allocator> Drop for PeekMut<'_, T, A> {\n+impl<'a, T: Ord, A: Allocator + 'a> Drop for PeekMut<'a, T, A> {\n     fn drop(&mut self) {\n         if self.sift {\n             // SAFETY: PeekMut is only instantiated for non-empty heaps.\n@@ -309,7 +309,7 @@ impl<T: Ord, A: Allocator> Drop for PeekMut<'_, T, A> {\n }\n \n #[stable(feature = \"binary_heap_peek_mut\", since = \"1.12.0\")]\n-impl<T: Ord, A: Allocator> Deref for PeekMut<'_, T, A> {\n+impl<'a, T: Ord, A: Allocator + 'a> Deref for PeekMut<'a, T, A> {\n     type Target = T;\n     fn deref(&self) -> &T {\n         debug_assert!(!self.heap.is_empty());\n@@ -319,7 +319,7 @@ impl<T: Ord, A: Allocator> Deref for PeekMut<'_, T, A> {\n }\n \n #[stable(feature = \"binary_heap_peek_mut\", since = \"1.12.0\")]\n-impl<T: Ord, A: Allocator> DerefMut for PeekMut<'_, T, A> {\n+impl<'a, T: Ord, A: Allocator + 'a> DerefMut for PeekMut<'a, T, A> {\n     fn deref_mut(&mut self) -> &mut T {\n         debug_assert!(!self.heap.is_empty());\n         self.sift = true;\n@@ -328,10 +328,10 @@ impl<T: Ord, A: Allocator> DerefMut for PeekMut<'_, T, A> {\n     }\n }\n \n-impl<'a, T: Ord> PeekMut<'a, T> {\n+impl<'a, T: Ord, A: Allocator + 'a> PeekMut<'a, T, A> {\n     /// Removes the peeked value from the heap and returns it.\n     #[stable(feature = \"binary_heap_peek_mut_pop\", since = \"1.18.0\")]\n-    pub fn pop(mut this: PeekMut<'a, T>) -> T {\n+    pub fn pop(mut this: PeekMut<'a, T, A>) -> T {\n         let value = this.heap.pop().unwrap();\n         this.sift = false;\n         value\n@@ -1611,7 +1611,7 @@ impl<'a, T: Ord, A: Allocator + 'a> Drop for DrainSorted<'a, T, A> {\n }\n \n #[unstable(feature = \"binary_heap_drain_sorted\", issue = \"59278\")]\n-impl<T: Ord, A: Allocator> Iterator for DrainSorted<'_, T, A> {\n+impl<'a, T: Ord, A: Allocator + 'a> Iterator for DrainSorted<'a, T, A> {\n     type Item = T;\n \n     #[inline]\n@@ -1627,13 +1627,13 @@ impl<T: Ord, A: Allocator> Iterator for DrainSorted<'_, T, A> {\n }\n \n #[unstable(feature = \"binary_heap_drain_sorted\", issue = \"59278\")]\n-impl<T: Ord, A: Allocator> ExactSizeIterator for DrainSorted<'_, T, A> {}\n+impl<'a, T: Ord, A: Allocator + 'a> ExactSizeIterator for DrainSorted<'a, T, A> {}\n \n #[unstable(feature = \"binary_heap_drain_sorted\", issue = \"59278\")]\n-impl<T: Ord, A: Allocator> FusedIterator for DrainSorted<'_, T, A> {}\n+impl<'a, T: Ord, A: Allocator + 'a> FusedIterator for DrainSorted<'a, T, A> {}\n \n #[unstable(feature = \"trusted_len\", issue = \"37572\")]\n-unsafe impl<T: Ord, A: Allocator> TrustedLen for DrainSorted<'_, T, A> {}\n+unsafe impl<'a, T: Ord, A: Allocator + 'a> TrustedLen for DrainSorted<'a, T, A> {}\n \n #[stable(feature = \"binary_heap_extras_15\", since = \"1.5.0\")]\n impl<T: Ord, A: Allocator> From<Vec<T, A>> for BinaryHeap<T, A> {"}]}