{"sha": "e3cfb61ece273d59b62fb959ed17c99c04941d82", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUzY2ZiNjFlY2UyNzNkNTliNjJmYjk1OWVkMTdjOTljMDQ5NDFkODI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-02-07T13:21:15Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-02-07T13:21:15Z"}, "message": "Auto merge of #1169 - RalfJung:rustup, r=RalfJung\n\nrustup; fix generator test", "tree": {"sha": "fa3943c4ba14e64bee4e4a6f4c5168f551de9c45", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fa3943c4ba14e64bee4e4a6f4c5168f551de9c45"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e3cfb61ece273d59b62fb959ed17c99c04941d82", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e3cfb61ece273d59b62fb959ed17c99c04941d82", "html_url": "https://github.com/rust-lang/rust/commit/e3cfb61ece273d59b62fb959ed17c99c04941d82", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e3cfb61ece273d59b62fb959ed17c99c04941d82/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "602e1a03fcd00f9a4dfc97ac51ce561fdbafb1a7", "url": "https://api.github.com/repos/rust-lang/rust/commits/602e1a03fcd00f9a4dfc97ac51ce561fdbafb1a7", "html_url": "https://github.com/rust-lang/rust/commit/602e1a03fcd00f9a4dfc97ac51ce561fdbafb1a7"}, {"sha": "45f6744fdac14196378c0d2f28c48d27024d9589", "url": "https://api.github.com/repos/rust-lang/rust/commits/45f6744fdac14196378c0d2f28c48d27024d9589", "html_url": "https://github.com/rust-lang/rust/commit/45f6744fdac14196378c0d2f28c48d27024d9589"}], "stats": {"total": 132, "additions": 112, "deletions": 20}, "files": [{"sha": "edb99d8eb0d5b65b01feafaeddf0e2bf72e5d503", "filename": "rust-version", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3cfb61ece273d59b62fb959ed17c99c04941d82/rust-version", "raw_url": "https://github.com/rust-lang/rust/raw/e3cfb61ece273d59b62fb959ed17c99c04941d82/rust-version", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rust-version?ref=e3cfb61ece273d59b62fb959ed17c99c04941d82", "patch": "@@ -1 +1 @@\n-333c32a5a4a51cae562c47e0669bc5aeaf741c45\n+b5e21dbb5cabdaaadc47a4d8e3f59979dcad2871"}, {"sha": "70ceacd8ca6facbaf788a6888c2b657d22b6b7b4", "filename": "tests/compile-fail/generator-pinned-moved.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3cfb61ece273d59b62fb959ed17c99c04941d82/tests%2Fcompile-fail%2Fgenerator-pinned-moved.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3cfb61ece273d59b62fb959ed17c99c04941d82/tests%2Fcompile-fail%2Fgenerator-pinned-moved.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fgenerator-pinned-moved.rs?ref=e3cfb61ece273d59b62fb959ed17c99c04941d82", "patch": "@@ -25,7 +25,7 @@ where\n \n     fn next(&mut self) -> Option<Self::Item> {\n         let me = unsafe { Pin::new_unchecked(&mut self.0) };\n-        match me.resume() {\n+        match me.resume(()) {\n             GeneratorState::Yielded(x) => Some(x),\n             GeneratorState::Complete(_) => None,\n         }"}, {"sha": "e85d2cf8f29a8006a5ea23185f1784ed26ec85bb", "filename": "tests/run-pass/generator.rs", "status": "modified", "additions": 110, "deletions": 18, "changes": 128, "blob_url": "https://github.com/rust-lang/rust/blob/e3cfb61ece273d59b62fb959ed17c99c04941d82/tests%2Frun-pass%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3cfb61ece273d59b62fb959ed17c99c04941d82/tests%2Frun-pass%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fgenerator.rs?ref=e3cfb61ece273d59b62fb959ed17c99c04941d82", "patch": "@@ -1,30 +1,32 @@\n #![feature(generators, generator_trait, never_type)]\n \n-use std::ops::{GeneratorState, Generator};\n+use std::ops::{GeneratorState::{self, *}, Generator};\n use std::pin::Pin;\n+use std::sync::atomic::{AtomicUsize, Ordering};\n+use std::fmt::Debug;\n \n-fn finish<T>(mut amt: usize, mut t: T) -> T::Return\n-    where T: Generator<Yield = usize>\n-{\n-    // We are not moving the `t` around until it gets dropped, so this is okay.\n-    let mut t = unsafe { Pin::new_unchecked(&mut t) };\n-    loop {\n-        match t.as_mut().resume() {\n-            GeneratorState::Yielded(y) => amt -= y,\n-            GeneratorState::Complete(ret) => {\n-                assert_eq!(amt, 0);\n-                return ret\n+fn basic() {\n+    fn finish<T>(mut amt: usize, mut t: T) -> T::Return\n+        where T: Generator<Yield = usize>\n+    {\n+        // We are not moving the `t` around until it gets dropped, so this is okay.\n+        let mut t = unsafe { Pin::new_unchecked(&mut t) };\n+        loop {\n+            match t.as_mut().resume(()) {\n+                GeneratorState::Yielded(y) => amt -= y,\n+                GeneratorState::Complete(ret) => {\n+                    assert_eq!(amt, 0);\n+                    return ret\n+                }\n             }\n         }\n     }\n-}\n \n-enum Never {}\n-fn never() -> Never {\n-    panic!()\n-}\n+    enum Never {}\n+    fn never() -> Never {\n+        panic!()\n+    }\n \n-fn main() {\n     finish(1, || yield 1);\n \n     finish(3, || {\n@@ -94,3 +96,93 @@ fn main() {\n         let _x: (String, !) = (String::new(), { yield 2; return });\n     });\n }\n+\n+fn smoke_resume_arg() {\n+    fn drain<G: Generator<R, Yield = Y> + Unpin, R, Y>(\n+        gen: &mut G,\n+        inout: Vec<(R, GeneratorState<Y, G::Return>)>,\n+    ) where\n+        Y: Debug + PartialEq,\n+        G::Return: Debug + PartialEq,\n+    {\n+        let mut gen = Pin::new(gen);\n+\n+        for (input, out) in inout {\n+            assert_eq!(gen.as_mut().resume(input), out);\n+        }\n+    }\n+\n+    static DROPS: AtomicUsize = AtomicUsize::new(0);\n+\n+    #[derive(Debug, PartialEq)]\n+    struct DropMe;\n+\n+    impl Drop for DropMe {\n+        fn drop(&mut self) {\n+            DROPS.fetch_add(1, Ordering::SeqCst);\n+        }\n+    }\n+\n+    fn expect_drops<T>(expected_drops: usize, f: impl FnOnce() -> T) -> T {\n+        DROPS.store(0, Ordering::SeqCst);\n+\n+        let res = f();\n+\n+        let actual_drops = DROPS.load(Ordering::SeqCst);\n+        assert_eq!(actual_drops, expected_drops);\n+        res\n+    }\n+\n+    drain(\n+        &mut |mut b| {\n+            while b != 0 {\n+                b = yield (b + 1);\n+            }\n+            -1\n+        },\n+        vec![(1, Yielded(2)), (-45, Yielded(-44)), (500, Yielded(501)), (0, Complete(-1))],\n+    );\n+\n+    expect_drops(2, || drain(&mut |a| yield a, vec![(DropMe, Yielded(DropMe))]));\n+\n+    expect_drops(6, || {\n+        drain(\n+            &mut |a| yield yield a,\n+            vec![(DropMe, Yielded(DropMe)), (DropMe, Yielded(DropMe)), (DropMe, Complete(DropMe))],\n+        )\n+    });\n+\n+    #[allow(unreachable_code)]\n+    expect_drops(2, || drain(&mut |a| yield return a, vec![(DropMe, Complete(DropMe))]));\n+\n+    expect_drops(2, || {\n+        drain(\n+            &mut |a: DropMe| {\n+                if false { yield () } else { a }\n+            },\n+            vec![(DropMe, Complete(DropMe))],\n+        )\n+    });\n+\n+    expect_drops(4, || {\n+        drain(\n+            #[allow(unused_assignments, unused_variables)]\n+            &mut |mut a: DropMe| {\n+                a = yield;\n+                a = yield;\n+                a = yield;\n+            },\n+            vec![\n+                (DropMe, Yielded(())),\n+                (DropMe, Yielded(())),\n+                (DropMe, Yielded(())),\n+                (DropMe, Complete(())),\n+            ],\n+        )\n+    });\n+}\n+\n+fn main() {\n+    basic();\n+    smoke_resume_arg();\n+}"}]}