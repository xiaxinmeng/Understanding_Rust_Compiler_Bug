{"sha": "8dd06ece20fb815be5e3b0f0586334d6ecb273c8", "node_id": "C_kwDOAAsO6NoAKDhkZDA2ZWNlMjBmYjgxNWJlNWUzYjBmMDU4NjMzNGQ2ZWNiMjczYzg", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-12-03T10:42:39Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-12-03T10:42:39Z"}, "message": "Merge #10906\n\n10906: [first contributation] fix: `add return type` assit works when there's missing whitespace r=Veykril a=izik1\n\nI feel like the way I handled whitespace here isn't... Right? Maybe it should be folded into `InsertOrReplace::Insert`\r\n\r\nAlso, sorry about the commit name, I am _not_ good at writing user facing commit messages\r\n\r\nAlso sorry about the test names, could be clearer I feel\n\nCo-authored-by: Skyler Rain Ross <orangesnowfox@gmail.com>", "tree": {"sha": "fed4d30686851241a630cf5032831b59de982e64", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fed4d30686851241a630cf5032831b59de982e64"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8dd06ece20fb815be5e3b0f0586334d6ecb273c8", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhqfSgCRBK7hj4Ov3rIwAA7R0IAEFTIJwQO0MCkn9cs6Ql4n4s\nobtsUtm6Q9BFB2x043lW7/iGsomJrsZKOiTWVZUVZNEEz8vXkVLSU/nazeNic61B\no6aSsF6femzUTGLnhLzVgCFruJGCJV0G+NWPZ5/S/CHWx5FPMJiWhqewnn9m/zbd\noc1heyBvJzJH19Nmrr+WL0O6FurypxljyK7w3HZLfwVKeR4FcwyQWJt9A85hdJOm\nhYP022qvESS4Q7tJE78xFls1R43fKkWU79P6J3UdIj9Uy6DSQf3HmZvIwimn7/YL\nr8+pK20CAbaKDx7OB4dxrZ1E/TOiV1/rF7OWAoC7In3EEOz5uYFID5E/tJmkyEQ=\n=iy7z\n-----END PGP SIGNATURE-----\n", "payload": "tree fed4d30686851241a630cf5032831b59de982e64\nparent 3b02aec0cce563e21c3545d434c14df17b1d392a\nparent 5b59a5eca8867ba72b6b8838930c75a65d00f13c\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1638528159 +0000\ncommitter GitHub <noreply@github.com> 1638528159 +0000\n\nMerge #10906\n\n10906: [first contributation] fix: `add return type` assit works when there's missing whitespace r=Veykril a=izik1\n\nI feel like the way I handled whitespace here isn't... Right? Maybe it should be folded into `InsertOrReplace::Insert`\r\n\r\nAlso, sorry about the commit name, I am _not_ good at writing user facing commit messages\r\n\r\nAlso sorry about the test names, could be clearer I feel\n\nCo-authored-by: Skyler Rain Ross <orangesnowfox@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8dd06ece20fb815be5e3b0f0586334d6ecb273c8", "html_url": "https://github.com/rust-lang/rust/commit/8dd06ece20fb815be5e3b0f0586334d6ecb273c8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8dd06ece20fb815be5e3b0f0586334d6ecb273c8/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3b02aec0cce563e21c3545d434c14df17b1d392a", "url": "https://api.github.com/repos/rust-lang/rust/commits/3b02aec0cce563e21c3545d434c14df17b1d392a", "html_url": "https://github.com/rust-lang/rust/commit/3b02aec0cce563e21c3545d434c14df17b1d392a"}, {"sha": "5b59a5eca8867ba72b6b8838930c75a65d00f13c", "url": "https://api.github.com/repos/rust-lang/rust/commits/5b59a5eca8867ba72b6b8838930c75a65d00f13c", "html_url": "https://github.com/rust-lang/rust/commit/5b59a5eca8867ba72b6b8838930c75a65d00f13c"}], "stats": {"total": 64, "additions": 54, "deletions": 10}, "files": [{"sha": "2c5b61eddb769c06ddfa3c2eb4ff9ad477723433", "filename": "crates/ide_assists/src/handlers/add_return_type.rs", "status": "modified", "additions": 54, "deletions": 10, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/8dd06ece20fb815be5e3b0f0586334d6ecb273c8/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fadd_return_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8dd06ece20fb815be5e3b0f0586334d6ecb273c8/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fadd_return_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fadd_return_type.rs?ref=8dd06ece20fb815be5e3b0f0586334d6ecb273c8", "patch": "@@ -1,5 +1,5 @@\n use hir::HirDisplay;\n-use syntax::{ast, AstNode, TextRange, TextSize};\n+use syntax::{ast, AstNode, SyntaxKind, SyntaxToken, TextRange, TextSize};\n \n use crate::{AssistContext, AssistId, AssistKind, Assists};\n \n@@ -33,8 +33,9 @@ pub(crate) fn add_return_type(acc: &mut Assists, ctx: &AssistContext) -> Option<\n         tail_expr.syntax().text_range(),\n         |builder| {\n             match builder_edit_pos {\n-                InsertOrReplace::Insert(insert_pos) => {\n-                    builder.insert(insert_pos, &format!(\"-> {} \", ty))\n+                InsertOrReplace::Insert(insert_pos, needs_whitespace) => {\n+                    let preceeding_whitespace = if needs_whitespace { \" \" } else { \"\" };\n+                    builder.insert(insert_pos, &format!(\"{}-> {} \", preceeding_whitespace, ty))\n                 }\n                 InsertOrReplace::Replace(text_range) => {\n                     builder.replace(text_range, &format!(\"-> {}\", ty))\n@@ -50,13 +51,16 @@ pub(crate) fn add_return_type(acc: &mut Assists, ctx: &AssistContext) -> Option<\n }\n \n enum InsertOrReplace {\n-    Insert(TextSize),\n+    Insert(TextSize, bool),\n     Replace(TextRange),\n }\n \n /// Check the potentially already specified return type and reject it or turn it into a builder command\n /// if allowed.\n-fn ret_ty_to_action(ret_ty: Option<ast::RetType>, insert_pos: TextSize) -> Option<InsertOrReplace> {\n+fn ret_ty_to_action(\n+    ret_ty: Option<ast::RetType>,\n+    insert_after: SyntaxToken,\n+) -> Option<InsertOrReplace> {\n     match ret_ty {\n         Some(ret_ty) => match ret_ty.ty() {\n             Some(ast::Type::InferType(_)) | None => {\n@@ -70,7 +74,17 @@ fn ret_ty_to_action(ret_ty: Option<ast::RetType>, insert_pos: TextSize) -> Optio\n                 None\n             }\n         },\n-        None => Some(InsertOrReplace::Insert(insert_pos + TextSize::from(1))),\n+        None => {\n+            let insert_after_pos = insert_after.text_range().end();\n+            let (insert_pos, needs_whitespace) = match insert_after.next_token() {\n+                Some(it) if it.kind() == SyntaxKind::WHITESPACE => {\n+                    (insert_after_pos + TextSize::from(1), false)\n+                }\n+                _ => (insert_after_pos, true),\n+            };\n+\n+            Some(InsertOrReplace::Insert(insert_pos, needs_whitespace))\n+        }\n     }\n }\n \n@@ -82,8 +96,10 @@ enum FnType {\n fn extract_tail(ctx: &AssistContext) -> Option<(FnType, ast::Expr, InsertOrReplace)> {\n     let (fn_type, tail_expr, return_type_range, action) =\n         if let Some(closure) = ctx.find_node_at_offset::<ast::ClosureExpr>() {\n-            let rpipe_pos = closure.param_list()?.syntax().last_token()?.text_range().end();\n-            let action = ret_ty_to_action(closure.ret_type(), rpipe_pos)?;\n+            let rpipe = closure.param_list()?.syntax().last_token()?;\n+            let rpipe_pos = rpipe.text_range().end();\n+\n+            let action = ret_ty_to_action(closure.ret_type(), rpipe)?;\n \n             let body = closure.body()?;\n             let body_start = body.syntax().first_token()?.text_range().start();\n@@ -96,8 +112,10 @@ fn extract_tail(ctx: &AssistContext) -> Option<(FnType, ast::Expr, InsertOrRepla\n             (FnType::Closure { wrap_expr }, tail_expr, ret_range, action)\n         } else {\n             let func = ctx.find_node_at_offset::<ast::Fn>()?;\n-            let rparen_pos = func.param_list()?.r_paren_token()?.text_range().end();\n-            let action = ret_ty_to_action(func.ret_type(), rparen_pos)?;\n+\n+            let rparen = func.param_list()?.r_paren_token()?;\n+            let rparen_pos = rparen.text_range().end();\n+            let action = ret_ty_to_action(func.ret_type(), rparen)?;\n \n             let body = func.body()?;\n             let stmt_list = body.stmt_list()?;\n@@ -196,6 +214,19 @@ mod tests {\n         );\n     }\n \n+    #[test]\n+    fn infer_return_type_no_whitespace() {\n+        check_assist(\n+            add_return_type,\n+            r#\"fn foo(){\n+    45$0\n+}\"#,\n+            r#\"fn foo() -> i32 {\n+    45\n+}\"#,\n+        );\n+    }\n+\n     #[test]\n     fn infer_return_type_nested() {\n         check_assist(\n@@ -280,6 +311,19 @@ mod tests {\n         );\n     }\n \n+    #[test]\n+    fn infer_return_type_closure_no_whitespace() {\n+        check_assist(\n+            add_return_type,\n+            r#\"fn foo() {\n+    |x: i32|{ x$0 };\n+}\"#,\n+            r#\"fn foo() {\n+    |x: i32| -> i32 { x };\n+}\"#,\n+        );\n+    }\n+\n     #[test]\n     fn infer_return_type_closure_wrap() {\n         cov_mark::check!(wrap_closure_non_block_expr);"}]}