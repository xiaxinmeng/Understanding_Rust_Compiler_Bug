{"sha": "427736931bb1cd34c97e4e1f79a5a84430415207", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQyNzczNjkzMWJiMWNkMzRjOTdlNGUxZjc5YTVhODQ0MzA0MTUyMDc=", "commit": {"author": {"name": "Leif Arne Storset", "email": "leifarne@storset.net", "date": "2015-07-25T11:52:14Z"}, "committer": {"name": "Leif Arne Storset", "email": "leifarne@storset.net", "date": "2015-07-30T19:49:14Z"}, "message": "Copyedit generics.md and traits.md\n\nSquashed at reviewer's request:\n\nAdd heading at the end of the introductory material\nSpice up introductory paragraphs a bit\nUse quotes instead of <code> for phrase\nRemove \"other\" in \"other restrictions\" (it's not obvious that any other\nrestrictions have been mentioned)\n\"Default methods\" is a second-level heading, but is not a subsection of\n\"Where clause\"\nReword \"Default methods\" introduction: it's not the \"last feature\" on\nthis page", "tree": {"sha": "c0709c5923f99c022986576d30fd7ae0efb1e97c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c0709c5923f99c022986576d30fd7ae0efb1e97c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/427736931bb1cd34c97e4e1f79a5a84430415207", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/427736931bb1cd34c97e4e1f79a5a84430415207", "html_url": "https://github.com/rust-lang/rust/commit/427736931bb1cd34c97e4e1f79a5a84430415207", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/427736931bb1cd34c97e4e1f79a5a84430415207/comments", "author": {"login": "lastorset", "id": 464989, "node_id": "MDQ6VXNlcjQ2NDk4OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/464989?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lastorset", "html_url": "https://github.com/lastorset", "followers_url": "https://api.github.com/users/lastorset/followers", "following_url": "https://api.github.com/users/lastorset/following{/other_user}", "gists_url": "https://api.github.com/users/lastorset/gists{/gist_id}", "starred_url": "https://api.github.com/users/lastorset/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lastorset/subscriptions", "organizations_url": "https://api.github.com/users/lastorset/orgs", "repos_url": "https://api.github.com/users/lastorset/repos", "events_url": "https://api.github.com/users/lastorset/events{/privacy}", "received_events_url": "https://api.github.com/users/lastorset/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lastorset", "id": 464989, "node_id": "MDQ6VXNlcjQ2NDk4OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/464989?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lastorset", "html_url": "https://github.com/lastorset", "followers_url": "https://api.github.com/users/lastorset/followers", "following_url": "https://api.github.com/users/lastorset/following{/other_user}", "gists_url": "https://api.github.com/users/lastorset/gists{/gist_id}", "starred_url": "https://api.github.com/users/lastorset/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lastorset/subscriptions", "organizations_url": "https://api.github.com/users/lastorset/orgs", "repos_url": "https://api.github.com/users/lastorset/repos", "events_url": "https://api.github.com/users/lastorset/events{/privacy}", "received_events_url": "https://api.github.com/users/lastorset/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "556b0815d779a50a151c44032febf3ce253e621e", "url": "https://api.github.com/repos/rust-lang/rust/commits/556b0815d779a50a151c44032febf3ce253e621e", "html_url": "https://github.com/rust-lang/rust/commit/556b0815d779a50a151c44032febf3ce253e621e"}], "stats": {"total": 25, "additions": 14, "deletions": 11}, "files": [{"sha": "59dc8e9ed942e515b274eb8d59bcdd8f67ee8369", "filename": "src/doc/trpl/generics.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/427736931bb1cd34c97e4e1f79a5a84430415207/src%2Fdoc%2Ftrpl%2Fgenerics.md", "raw_url": "https://github.com/rust-lang/rust/raw/427736931bb1cd34c97e4e1f79a5a84430415207/src%2Fdoc%2Ftrpl%2Fgenerics.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fgenerics.md?ref=427736931bb1cd34c97e4e1f79a5a84430415207", "patch": "@@ -6,7 +6,7 @@ Generics are called \u2018parametric polymorphism\u2019 in type theory,\n which means that they are types or functions that have multiple forms (\u2018poly\u2019\n is multiple, \u2018morph\u2019 is form) over a given parameter (\u2018parametric\u2019).\n \n-Anyway, enough with type theory, let\u2019s check out some generic code. Rust\u2019s\n+Anyway, enough type theory, let\u2019s check out some generic code. Rust\u2019s\n standard library provides a type, `Option<T>`, that\u2019s generic:\n \n ```rust\n@@ -27,7 +27,7 @@ let x: Option<i32> = Some(5);\n \n In the type declaration, we say `Option<i32>`. Note how similar this looks to\n `Option<T>`. So, in this particular `Option`, `T` has the value of `i32`. On\n-the right-hand side of the binding, we do make a `Some(T)`, where `T` is `5`.\n+the right-hand side of the binding, we make a `Some(T)`, where `T` is `5`.\n Since that\u2019s an `i32`, the two sides match, and Rust is happy. If they didn\u2019t\n match, we\u2019d get an error:\n "}, {"sha": "88062bc08a671444230fc2adb26aead26001e8b1", "filename": "src/doc/trpl/traits.md", "status": "modified", "additions": 12, "deletions": 9, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/427736931bb1cd34c97e4e1f79a5a84430415207/src%2Fdoc%2Ftrpl%2Ftraits.md", "raw_url": "https://github.com/rust-lang/rust/raw/427736931bb1cd34c97e4e1f79a5a84430415207/src%2Fdoc%2Ftrpl%2Ftraits.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Ftraits.md?ref=427736931bb1cd34c97e4e1f79a5a84430415207", "patch": "@@ -47,8 +47,11 @@ As you can see, the `trait` block looks very similar to the `impl` block,\n but we don\u2019t define a body, just a type signature. When we `impl` a trait,\n we use `impl Trait for Item`, rather than just `impl Item`.\n \n-We can use traits to constrain our generics. Consider this function, which\n-does not compile:\n+## Traits bounds for generic functions\n+\n+Traits are useful because they allow a type to make certain promises about its\n+behavior. Generic functions can exploit this to constrain the types they\n+accept. Consider this function, which does not compile:\n \n ```rust,ignore\n fn print_area<T>(shape: T) {\n@@ -75,7 +78,7 @@ fn print_area<T: HasArea>(shape: T) {\n }\n ```\n \n-The syntax `<T: HasArea>` means `any type that implements the HasArea trait`.\n+The syntax `<T: HasArea>` means \u201cany type that implements the `HasArea` trait.\u201d\n Because traits define function type signatures, we can be sure that any type\n which implements `HasArea` will have an `.area()` method.\n \n@@ -154,8 +157,8 @@ error: the trait `HasArea` is not implemented for the type `_` [E0277]\n \n ## Traits bounds for generic structs\n \n-Trait constraints also can apply to implementations for generic structs.  Just\n-append the constraint when you declare type parameters. Here is a new type\n+Your generic structs can also benefit from trait constraints. All you need to\n+do is append the constraint when you declare type parameters. Here is a new\n type `Rectangle<T>` and its operation `is_square()`:\n \n ```rust\n@@ -232,7 +235,7 @@ impl HasArea for i32 {\n It is considered poor style to implement methods on such primitive types, even\n though it is possible.\n \n-This may seem like the Wild West, but there are two other restrictions around\n+This may seem like the Wild West, but there are two restrictions around\n implementing traits that prevent this from getting out of hand. The first is\n that if the trait isn\u2019t defined in your scope, it doesn\u2019t apply. Here\u2019s an\n example: the standard library provides a [`Write`][write] trait which adds\n@@ -397,10 +400,10 @@ This shows off the additional feature of `where` clauses: they allow bounds\n where the left-hand side is an arbitrary type (`i32` in this case), not just a\n plain type parameter (like `T`).\n \n-## Default methods\n+# Default methods\n \n-There\u2019s one last feature of traits we should cover: default methods. It\u2019s\n-easiest just to show an example:\n+If you already know how a typical implementor will define a method, you can\n+let your trait supply a default:\n \n ```rust\n trait Foo {"}]}