{"sha": "94c11dfe78c9c2e81ababe51b04231db4c90d07f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk0YzExZGZlNzhjOWMyZTgxYWJhYmU1MWIwNDIzMWRiNGM5MGQwN2Y=", "commit": {"author": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2021-02-09T22:59:32Z"}, "committer": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2021-02-09T22:59:32Z"}, "message": "Report \"nice\" placeholder errors more often\n\nIf we have a cause containing `ValuePairs::PolyTraitRefs` but neither\nTraitRef has any escaping bound regions then we report the same error as\nfor `ValuePairs::TraitRefs`.", "tree": {"sha": "40c18db2ffd3f930109e7219e5965730736cf5cf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/40c18db2ffd3f930109e7219e5965730736cf5cf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/94c11dfe78c9c2e81ababe51b04231db4c90d07f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/94c11dfe78c9c2e81ababe51b04231db4c90d07f", "html_url": "https://github.com/rust-lang/rust/commit/94c11dfe78c9c2e81ababe51b04231db4c90d07f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/94c11dfe78c9c2e81ababe51b04231db4c90d07f/comments", "author": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "daab6db1a02b680a71976fcbeed577ff102b31e4", "url": "https://api.github.com/repos/rust-lang/rust/commits/daab6db1a02b680a71976fcbeed577ff102b31e4", "html_url": "https://github.com/rust-lang/rust/commit/daab6db1a02b680a71976fcbeed577ff102b31e4"}], "stats": {"total": 444, "additions": 181, "deletions": 263}, "files": [{"sha": "285666b7acb9902728bf6da87ad9852d3ee72b71", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/placeholder_error.rs", "status": "modified", "additions": 69, "deletions": 73, "changes": 142, "blob_url": "https://github.com/rust-lang/rust/blob/94c11dfe78c9c2e81ababe51b04231db4c90d07f/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fplaceholder_error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94c11dfe78c9c2e81ababe51b04231db4c90d07f/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fplaceholder_error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fplaceholder_error.rs?ref=94c11dfe78c9c2e81ababe51b04231db4c90d07f", "patch": "@@ -30,157 +30,153 @@ impl NiceRegionError<'me, 'tcx> {\n             Some(RegionResolutionError::SubSupConflict(\n                 vid,\n                 _,\n-                SubregionOrigin::Subtype(box TypeTrace {\n-                    cause,\n-                    values: ValuePairs::TraitRefs(ExpectedFound { expected, found }),\n-                }),\n+                SubregionOrigin::Subtype(box TypeTrace { cause, values }),\n                 sub_placeholder @ ty::RePlaceholder(_),\n                 _,\n                 sup_placeholder @ ty::RePlaceholder(_),\n-            )) if expected.def_id == found.def_id => Some(self.try_report_placeholders_trait(\n+            )) => self.try_report_trait_placeholder_mismatch(\n                 Some(self.tcx().mk_region(ty::ReVar(*vid))),\n                 cause,\n                 Some(sub_placeholder),\n                 Some(sup_placeholder),\n-                expected.def_id,\n-                expected.substs,\n-                found.substs,\n-            )),\n+                values,\n+            ),\n \n             Some(RegionResolutionError::SubSupConflict(\n                 vid,\n                 _,\n-                SubregionOrigin::Subtype(box TypeTrace {\n-                    cause,\n-                    values: ValuePairs::TraitRefs(ExpectedFound { expected, found }),\n-                }),\n+                SubregionOrigin::Subtype(box TypeTrace { cause, values }),\n                 sub_placeholder @ ty::RePlaceholder(_),\n                 _,\n                 _,\n-            )) if expected.def_id == found.def_id => Some(self.try_report_placeholders_trait(\n+            )) => self.try_report_trait_placeholder_mismatch(\n                 Some(self.tcx().mk_region(ty::ReVar(*vid))),\n                 cause,\n                 Some(sub_placeholder),\n                 None,\n-                expected.def_id,\n-                expected.substs,\n-                found.substs,\n-            )),\n+                values,\n+            ),\n \n             Some(RegionResolutionError::SubSupConflict(\n                 vid,\n                 _,\n-                SubregionOrigin::Subtype(box TypeTrace {\n-                    cause,\n-                    values: ValuePairs::TraitRefs(ExpectedFound { expected, found }),\n-                }),\n+                SubregionOrigin::Subtype(box TypeTrace { cause, values }),\n                 _,\n                 _,\n                 sup_placeholder @ ty::RePlaceholder(_),\n-            )) if expected.def_id == found.def_id => Some(self.try_report_placeholders_trait(\n+            )) => self.try_report_trait_placeholder_mismatch(\n                 Some(self.tcx().mk_region(ty::ReVar(*vid))),\n                 cause,\n                 None,\n                 Some(*sup_placeholder),\n-                expected.def_id,\n-                expected.substs,\n-                found.substs,\n-            )),\n+                values,\n+            ),\n \n             Some(RegionResolutionError::SubSupConflict(\n                 vid,\n                 _,\n                 _,\n                 _,\n-                SubregionOrigin::Subtype(box TypeTrace {\n-                    cause,\n-                    values: ValuePairs::TraitRefs(ExpectedFound { expected, found }),\n-                }),\n+                SubregionOrigin::Subtype(box TypeTrace { cause, values }),\n                 sup_placeholder @ ty::RePlaceholder(_),\n-            )) if expected.def_id == found.def_id => Some(self.try_report_placeholders_trait(\n+            )) => self.try_report_trait_placeholder_mismatch(\n                 Some(self.tcx().mk_region(ty::ReVar(*vid))),\n                 cause,\n                 None,\n                 Some(*sup_placeholder),\n-                expected.def_id,\n-                expected.substs,\n-                found.substs,\n-            )),\n+                values,\n+            ),\n \n             Some(RegionResolutionError::UpperBoundUniverseConflict(\n                 vid,\n                 _,\n                 _,\n-                SubregionOrigin::Subtype(box TypeTrace {\n-                    cause,\n-                    values: ValuePairs::TraitRefs(ExpectedFound { expected, found }),\n-                }),\n+                SubregionOrigin::Subtype(box TypeTrace { cause, values }),\n                 sup_placeholder @ ty::RePlaceholder(_),\n-            )) if expected.def_id == found.def_id => Some(self.try_report_placeholders_trait(\n+            )) => self.try_report_trait_placeholder_mismatch(\n                 Some(self.tcx().mk_region(ty::ReVar(*vid))),\n                 cause,\n                 None,\n                 Some(*sup_placeholder),\n-                expected.def_id,\n-                expected.substs,\n-                found.substs,\n-            )),\n+                values,\n+            ),\n \n             Some(RegionResolutionError::ConcreteFailure(\n-                SubregionOrigin::Subtype(box TypeTrace {\n-                    cause,\n-                    values: ValuePairs::TraitRefs(ExpectedFound { expected, found }),\n-                }),\n+                SubregionOrigin::Subtype(box TypeTrace { cause, values }),\n                 sub_region @ ty::RePlaceholder(_),\n                 sup_region @ ty::RePlaceholder(_),\n-            )) if expected.def_id == found.def_id => Some(self.try_report_placeholders_trait(\n+            )) => self.try_report_trait_placeholder_mismatch(\n                 None,\n                 cause,\n                 Some(*sub_region),\n                 Some(*sup_region),\n-                expected.def_id,\n-                expected.substs,\n-                found.substs,\n-            )),\n+                values,\n+            ),\n \n             Some(RegionResolutionError::ConcreteFailure(\n-                SubregionOrigin::Subtype(box TypeTrace {\n-                    cause,\n-                    values: ValuePairs::TraitRefs(ExpectedFound { expected, found }),\n-                }),\n+                SubregionOrigin::Subtype(box TypeTrace { cause, values }),\n                 sub_region @ ty::RePlaceholder(_),\n                 sup_region,\n-            )) if expected.def_id == found.def_id => Some(self.try_report_placeholders_trait(\n+            )) => self.try_report_trait_placeholder_mismatch(\n                 Some(sup_region),\n                 cause,\n                 Some(*sub_region),\n                 None,\n-                expected.def_id,\n-                expected.substs,\n-                found.substs,\n-            )),\n+                values,\n+            ),\n \n             Some(RegionResolutionError::ConcreteFailure(\n-                SubregionOrigin::Subtype(box TypeTrace {\n-                    cause,\n-                    values: ValuePairs::TraitRefs(ExpectedFound { expected, found }),\n-                }),\n+                SubregionOrigin::Subtype(box TypeTrace { cause, values }),\n                 sub_region,\n                 sup_region @ ty::RePlaceholder(_),\n-            )) if expected.def_id == found.def_id => Some(self.try_report_placeholders_trait(\n+            )) => self.try_report_trait_placeholder_mismatch(\n                 Some(sub_region),\n                 cause,\n                 None,\n                 Some(*sup_region),\n-                expected.def_id,\n-                expected.substs,\n-                found.substs,\n-            )),\n+                values,\n+            ),\n \n             _ => None,\n         }\n     }\n \n+    fn try_report_trait_placeholder_mismatch(\n+        &self,\n+        vid: Option<ty::Region<'tcx>>,\n+        cause: &ObligationCause<'tcx>,\n+        sub_placeholder: Option<ty::Region<'tcx>>,\n+        sup_placeholder: Option<ty::Region<'tcx>>,\n+        value_pairs: &ValuePairs<'tcx>,\n+    ) -> Option<DiagnosticBuilder<'tcx>> {\n+        let (expected_substs, found_substs, trait_def_id) = match value_pairs {\n+            ValuePairs::TraitRefs(ExpectedFound { expected, found })\n+                if expected.def_id == found.def_id =>\n+            {\n+                (expected.substs, found.substs, expected.def_id)\n+            }\n+            ValuePairs::PolyTraitRefs(ExpectedFound { expected, found })\n+                if expected.def_id() == found.def_id() =>\n+            {\n+                // It's possible that the placeholders come from a binder\n+                // outside of this value pair. Use `no_bound_vars` as a\n+                // simple heuristic for that.\n+                (expected.no_bound_vars()?.substs, found.no_bound_vars()?.substs, expected.def_id())\n+            }\n+            _ => return None,\n+        };\n+\n+        Some(self.report_trait_placeholder_mismatch(\n+            vid,\n+            cause,\n+            sub_placeholder,\n+            sup_placeholder,\n+            trait_def_id,\n+            expected_substs,\n+            found_substs,\n+        ))\n+    }\n+\n     // error[E0308]: implementation of `Foo` does not apply to enough lifetimes\n     //   --> /home/nmatsakis/tmp/foo.rs:12:5\n     //    |\n@@ -191,7 +187,7 @@ impl NiceRegionError<'me, 'tcx> {\n     //    = note: `T` must implement `...` for any two lifetimes `'1` and `'2`.\n     //    = note: However, the type `T` only implements `...` for some specific lifetime `'2`.\n     #[instrument(level = \"debug\", skip(self))]\n-    fn try_report_placeholders_trait(\n+    fn report_trait_placeholder_mismatch(\n         &self,\n         vid: Option<ty::Region<'tcx>>,\n         cause: &ObligationCause<'tcx>,"}, {"sha": "c3dd794957540ccfd50f1d5228f23b63d1e12014", "filename": "src/test/ui/hrtb/hrtb-perfect-forwarding.nll.stderr", "status": "modified", "additions": 20, "deletions": 18, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/94c11dfe78c9c2e81ababe51b04231db4c90d07f/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-perfect-forwarding.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94c11dfe78c9c2e81ababe51b04231db4c90d07f/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-perfect-forwarding.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-perfect-forwarding.nll.stderr?ref=94c11dfe78c9c2e81ababe51b04231db4c90d07f", "patch": "@@ -1,11 +1,11 @@\n warning: function cannot return without recursing\n-  --> $DIR/hrtb-perfect-forwarding.rs:22:1\n+  --> $DIR/hrtb-perfect-forwarding.rs:16:1\n    |\n-LL | / fn no_hrtb<'b,T>(mut t: T)\n-LL | |     where T : Bar<&'b isize>\n+LL | / fn no_hrtb<'b, T>(mut t: T)\n+LL | | where\n+LL | |     T: Bar<&'b isize>,\n LL | | {\n-LL | |     // OK -- `T : Bar<&'b isize>`, and thus the impl above ensures that\n-LL | |     // `&mut T : Bar<&'b isize>`.\n+...  |\n LL | |     no_hrtb(&mut t);\n    | |     --------------- recursive call site\n LL | | }\n@@ -15,12 +15,12 @@ LL | | }\n    = help: a `loop` may express intention better if this is on purpose\n \n warning: function cannot return without recursing\n-  --> $DIR/hrtb-perfect-forwarding.rs:30:1\n+  --> $DIR/hrtb-perfect-forwarding.rs:25:1\n    |\n LL | / fn bar_hrtb<T>(mut t: T)\n-LL | |     where T : for<'b> Bar<&'b isize>\n+LL | | where\n+LL | |     T: for<'b> Bar<&'b isize>,\n LL | | {\n-LL | |     // OK -- `T : for<'b> Bar<&'b isize>`, and thus the impl above\n ...  |\n LL | |     bar_hrtb(&mut t);\n    | |     ---------------- recursive call site\n@@ -30,25 +30,26 @@ LL | | }\n    = help: a `loop` may express intention better if this is on purpose\n \n warning: function cannot return without recursing\n-  --> $DIR/hrtb-perfect-forwarding.rs:39:1\n+  --> $DIR/hrtb-perfect-forwarding.rs:35:1\n    |\n-LL | / fn foo_hrtb_bar_not<'b,T>(mut t: T)\n-LL | |     where T : for<'a> Foo<&'a isize> + Bar<&'b isize>\n+LL | / fn foo_hrtb_bar_not<'b, T>(mut t: T)\n+LL | | where\n+LL | |     T: for<'a> Foo<&'a isize> + Bar<&'b isize>,\n LL | | {\n-LL | |     // Not OK -- The forwarding impl for `Foo` requires that `Bar` also\n ...  |\n LL | |     foo_hrtb_bar_not(&mut t);\n    | |     ------------------------ recursive call site\n LL | |\n+LL | |\n LL | | }\n    | |_^ cannot return without recursing\n    |\n    = help: a `loop` may express intention better if this is on purpose\n \n error: lifetime may not live long enough\n-  --> $DIR/hrtb-perfect-forwarding.rs:46:5\n+  --> $DIR/hrtb-perfect-forwarding.rs:43:5\n    |\n-LL | fn foo_hrtb_bar_not<'b,T>(mut t: T)\n+LL | fn foo_hrtb_bar_not<'b, T>(mut t: T)\n    |                     -- lifetime `'b` defined here\n ...\n LL |     foo_hrtb_bar_not(&mut t);\n@@ -57,18 +58,19 @@ LL |     foo_hrtb_bar_not(&mut t);\n    = help: consider replacing `'b` with `'static`\n \n error: higher-ranked subtype error\n-  --> $DIR/hrtb-perfect-forwarding.rs:46:5\n+  --> $DIR/hrtb-perfect-forwarding.rs:43:5\n    |\n LL |     foo_hrtb_bar_not(&mut t);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: function cannot return without recursing\n-  --> $DIR/hrtb-perfect-forwarding.rs:50:1\n+  --> $DIR/hrtb-perfect-forwarding.rs:48:1\n    |\n LL | / fn foo_hrtb_bar_hrtb<T>(mut t: T)\n-LL | |     where T : for<'a> Foo<&'a isize> + for<'b> Bar<&'b isize>\n+LL | | where\n+LL | |     T: for<'a> Foo<&'a isize> + for<'b> Bar<&'b isize>,\n LL | | {\n-LL | |     // OK -- now we have `T : for<'b> Bar&'b isize>`.\n+LL | |     // OK -- now we have `T : for<'b> Bar<&'b isize>`.\n LL | |     foo_hrtb_bar_hrtb(&mut t);\n    | |     ------------------------- recursive call site\n LL | | }"}, {"sha": "441a788359e0345a0ce8f41d667fe24f5ff38b07", "filename": "src/test/ui/hrtb/hrtb-perfect-forwarding.rs", "status": "modified", "additions": 19, "deletions": 20, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/94c11dfe78c9c2e81ababe51b04231db4c90d07f/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-perfect-forwarding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94c11dfe78c9c2e81ababe51b04231db4c90d07f/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-perfect-forwarding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-perfect-forwarding.rs?ref=94c11dfe78c9c2e81ababe51b04231db4c90d07f", "patch": "@@ -2,56 +2,55 @@\n // is being applied to `for<'a> Foo<&'a mut X>`. Issue #19730.\n \n trait Foo<X> {\n-    fn foo(&mut self, x: X) { }\n+    fn foo(&mut self, x: X) {}\n }\n \n trait Bar<X> {\n-    fn bar(&mut self, x: X) { }\n+    fn bar(&mut self, x: X) {}\n }\n \n-impl<'a,X,F> Foo<X> for &'a mut F\n-    where F : Foo<X> + Bar<X>\n-{\n-}\n+impl<'a, X, F> Foo<X> for &'a mut F where F: Foo<X> + Bar<X> {}\n \n-impl<'a,X,F> Bar<X> for &'a mut F\n-    where F : Bar<X>\n-{\n-}\n+impl<'a, X, F> Bar<X> for &'a mut F where F: Bar<X> {}\n \n-fn no_hrtb<'b,T>(mut t: T)\n-    where T : Bar<&'b isize>\n+fn no_hrtb<'b, T>(mut t: T)\n+where\n+    T: Bar<&'b isize>,\n {\n     // OK -- `T : Bar<&'b isize>`, and thus the impl above ensures that\n     // `&mut T : Bar<&'b isize>`.\n     no_hrtb(&mut t);\n }\n \n fn bar_hrtb<T>(mut t: T)\n-    where T : for<'b> Bar<&'b isize>\n+where\n+    T: for<'b> Bar<&'b isize>,\n {\n     // OK -- `T : for<'b> Bar<&'b isize>`, and thus the impl above\n     // ensures that `&mut T : for<'b> Bar<&'b isize>`.  This is an\n     // example of a \"perfect forwarding\" impl.\n     bar_hrtb(&mut t);\n }\n \n-fn foo_hrtb_bar_not<'b,T>(mut t: T)\n-    where T : for<'a> Foo<&'a isize> + Bar<&'b isize>\n+fn foo_hrtb_bar_not<'b, T>(mut t: T)\n+where\n+    T: for<'a> Foo<&'a isize> + Bar<&'b isize>,\n {\n     // Not OK -- The forwarding impl for `Foo` requires that `Bar` also\n     // be implemented. Thus to satisfy `&mut T : for<'a> Foo<&'a\n     // isize>`, we require `T : for<'a> Bar<&'a isize>`, but the where\n     // clause only specifies `T : Bar<&'b isize>`.\n-    foo_hrtb_bar_not(&mut t); //~ ERROR mismatched types\n-                              //~| ERROR mismatched types\n+    foo_hrtb_bar_not(&mut t);\n+    //~^ ERROR implementation of `Bar` is not general enough\n+    //~| ERROR implementation of `Bar` is not general enough\n }\n \n fn foo_hrtb_bar_hrtb<T>(mut t: T)\n-    where T : for<'a> Foo<&'a isize> + for<'b> Bar<&'b isize>\n+where\n+    T: for<'a> Foo<&'a isize> + for<'b> Bar<&'b isize>,\n {\n-    // OK -- now we have `T : for<'b> Bar&'b isize>`.\n+    // OK -- now we have `T : for<'b> Bar<&'b isize>`.\n     foo_hrtb_bar_hrtb(&mut t);\n }\n \n-fn main() { }\n+fn main() {}"}, {"sha": "e265f53cd2a7fb2fdedc7d7f9d0de9473fa9a23d", "filename": "src/test/ui/hrtb/hrtb-perfect-forwarding.stderr", "status": "modified", "additions": 10, "deletions": 31, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/94c11dfe78c9c2e81ababe51b04231db4c90d07f/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-perfect-forwarding.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94c11dfe78c9c2e81ababe51b04231db4c90d07f/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-perfect-forwarding.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-perfect-forwarding.stderr?ref=94c11dfe78c9c2e81ababe51b04231db4c90d07f", "patch": "@@ -1,41 +1,20 @@\n-error[E0308]: mismatched types\n-  --> $DIR/hrtb-perfect-forwarding.rs:46:5\n+error: implementation of `Bar` is not general enough\n+  --> $DIR/hrtb-perfect-forwarding.rs:43:5\n    |\n LL |     foo_hrtb_bar_not(&mut t);\n-   |     ^^^^^^^^^^^^^^^^ lifetime mismatch\n+   |     ^^^^^^^^^^^^^^^^ implementation of `Bar` is not general enough\n    |\n-   = note: expected type `Bar<&'a isize>`\n-              found type `Bar<&'b isize>`\n-note: the required lifetime does not necessarily outlive the lifetime `'b` as defined on the function body at 39:21\n-  --> $DIR/hrtb-perfect-forwarding.rs:39:21\n-   |\n-LL | fn foo_hrtb_bar_not<'b,T>(mut t: T)\n-   |                     ^^\n-note: the lifetime requirement is introduced here\n-  --> $DIR/hrtb-perfect-forwarding.rs:40:15\n-   |\n-LL |     where T : for<'a> Foo<&'a isize> + Bar<&'b isize>\n-   |               ^^^^^^^^^^^^^^^^^^^^^^\n+   = note: `T` must implement `Bar<&'0 isize>`, for any lifetime `'0`...\n+   = note: ...but it actually implements `Bar<&'1 isize>`, for some specific lifetime `'1`\n \n-error[E0308]: mismatched types\n-  --> $DIR/hrtb-perfect-forwarding.rs:46:5\n+error: implementation of `Bar` is not general enough\n+  --> $DIR/hrtb-perfect-forwarding.rs:43:5\n    |\n LL |     foo_hrtb_bar_not(&mut t);\n-   |     ^^^^^^^^^^^^^^^^ lifetime mismatch\n-   |\n-   = note: expected type `Bar<&'a isize>`\n-              found type `Bar<&'b isize>`\n-note: the lifetime `'b` as defined on the function body at 39:21 doesn't meet the lifetime requirements\n-  --> $DIR/hrtb-perfect-forwarding.rs:39:21\n-   |\n-LL | fn foo_hrtb_bar_not<'b,T>(mut t: T)\n-   |                     ^^\n-note: the lifetime requirement is introduced here\n-  --> $DIR/hrtb-perfect-forwarding.rs:40:15\n+   |     ^^^^^^^^^^^^^^^^ implementation of `Bar` is not general enough\n    |\n-LL |     where T : for<'a> Foo<&'a isize> + Bar<&'b isize>\n-   |               ^^^^^^^^^^^^^^^^^^^^^^\n+   = note: `T` must implement `Bar<&'0 isize>`, for any lifetime `'0`...\n+   = note: ...but it actually implements `Bar<&'1 isize>`, for some specific lifetime `'1`\n \n error: aborting due to 2 previous errors\n \n-For more information about this error, try `rustc --explain E0308`."}, {"sha": "70d16cc9a1da66c97e16292faa5647d4b5bf5f98", "filename": "src/test/ui/issues/issue-57843.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94c11dfe78c9c2e81ababe51b04231db4c90d07f/src%2Ftest%2Fui%2Fissues%2Fissue-57843.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94c11dfe78c9c2e81ababe51b04231db4c90d07f/src%2Ftest%2Fui%2Fissues%2Fissue-57843.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-57843.nll.stderr?ref=94c11dfe78c9c2e81ababe51b04231db4c90d07f", "patch": "@@ -1,5 +1,5 @@\n error: higher-ranked subtype error\n-  --> $DIR/issue-57843.rs:23:9\n+  --> $DIR/issue-57843.rs:25:9\n    |\n LL |     Foo(Box::new(|_| ()));\n    |         ^^^^^^^^^^^^^^^^"}, {"sha": "11629690ecc5e27ac51880a80e699b529ab2a68e", "filename": "src/test/ui/issues/issue-57843.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/94c11dfe78c9c2e81ababe51b04231db4c90d07f/src%2Ftest%2Fui%2Fissues%2Fissue-57843.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94c11dfe78c9c2e81ababe51b04231db4c90d07f/src%2Ftest%2Fui%2Fissues%2Fissue-57843.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-57843.rs?ref=94c11dfe78c9c2e81ababe51b04231db4c90d07f", "patch": "@@ -11,7 +11,9 @@ trait ClonableFn<T> {\n }\n \n impl<T, F: 'static> ClonableFn<T> for F\n-where F: Fn(T) + Clone {\n+where\n+    F: Fn(T) + Clone,\n+{\n     fn clone(&self) -> Box<dyn Fn(T)> {\n         Box::new(self.clone())\n     }\n@@ -20,5 +22,5 @@ where F: Fn(T) + Clone {\n struct Foo(Box<dyn for<'a> ClonableFn<&'a bool>>);\n \n fn main() {\n-    Foo(Box::new(|_| ())); //~ ERROR mismatched types\n+    Foo(Box::new(|_| ())); //~ ERROR implementation of `FnOnce` is not general enough\n }"}, {"sha": "acd48b6c7e5baa0a2b40d808e76f06896de55434", "filename": "src/test/ui/issues/issue-57843.stderr", "status": "modified", "additions": 5, "deletions": 11, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/94c11dfe78c9c2e81ababe51b04231db4c90d07f/src%2Ftest%2Fui%2Fissues%2Fissue-57843.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94c11dfe78c9c2e81ababe51b04231db4c90d07f/src%2Ftest%2Fui%2Fissues%2Fissue-57843.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-57843.stderr?ref=94c11dfe78c9c2e81ababe51b04231db4c90d07f", "patch": "@@ -1,17 +1,11 @@\n-error[E0308]: mismatched types\n-  --> $DIR/issue-57843.rs:23:9\n+error: implementation of `FnOnce` is not general enough\n+  --> $DIR/issue-57843.rs:25:9\n    |\n LL |     Foo(Box::new(|_| ()));\n-   |         ^^^^^^^^^^^^^^^^ one type is more general than the other\n+   |         ^^^^^^^^^^^^^^^^ implementation of `FnOnce` is not general enough\n    |\n-   = note: expected type `FnOnce<(&'a bool,)>`\n-              found type `FnOnce<(&bool,)>`\n-note: this closure does not fulfill the lifetime requirements\n-  --> $DIR/issue-57843.rs:23:18\n-   |\n-LL |     Foo(Box::new(|_| ()));\n-   |                  ^^^^^^\n+   = note: `[closure@$DIR/issue-57843.rs:25:18: 25:24]` must implement `FnOnce<(&'1 bool,)>`, for any lifetime `'1`...\n+   = note: ...but it actually implements `FnOnce<(&'2 bool,)>`, for some specific lifetime `'2`\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0308`."}, {"sha": "2ee69ee2234eefbe9bc9b3bec3b4834061dc424c", "filename": "src/test/ui/lifetimes/issue-79187.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94c11dfe78c9c2e81ababe51b04231db4c90d07f/src%2Ftest%2Fui%2Flifetimes%2Fissue-79187.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94c11dfe78c9c2e81ababe51b04231db4c90d07f/src%2Ftest%2Fui%2Flifetimes%2Fissue-79187.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Fissue-79187.rs?ref=94c11dfe78c9c2e81ababe51b04231db4c90d07f", "patch": "@@ -2,5 +2,5 @@ fn thing(x: impl FnOnce(&u32)) {}\n \n fn main() {\n     let f = |_| ();\n-    thing(f); //~ERROR mismatched types\n+    thing(f); //~ERROR implementation of `FnOnce` is not general enough\n }"}, {"sha": "3627ab5ed1e97a8f0606e20caea6ae8508b0daaf", "filename": "src/test/ui/lifetimes/issue-79187.stderr", "status": "modified", "additions": 4, "deletions": 15, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/94c11dfe78c9c2e81ababe51b04231db4c90d07f/src%2Ftest%2Fui%2Flifetimes%2Fissue-79187.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94c11dfe78c9c2e81ababe51b04231db4c90d07f/src%2Ftest%2Fui%2Flifetimes%2Fissue-79187.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Fissue-79187.stderr?ref=94c11dfe78c9c2e81ababe51b04231db4c90d07f", "patch": "@@ -1,22 +1,11 @@\n-error[E0308]: mismatched types\n+error: implementation of `FnOnce` is not general enough\n   --> $DIR/issue-79187.rs:5:5\n    |\n LL |     thing(f);\n-   |     ^^^^^ lifetime mismatch\n+   |     ^^^^^ implementation of `FnOnce` is not general enough\n    |\n-   = note: expected type `FnOnce<(&u32,)>`\n-              found type `FnOnce<(&u32,)>`\n-note: this closure does not fulfill the lifetime requirements\n-  --> $DIR/issue-79187.rs:4:13\n-   |\n-LL |     let f = |_| ();\n-   |             ^^^^^^\n-note: the lifetime requirement is introduced here\n-  --> $DIR/issue-79187.rs:1:18\n-   |\n-LL | fn thing(x: impl FnOnce(&u32)) {}\n-   |                  ^^^^^^^^^^^^\n+   = note: `[closure@$DIR/issue-79187.rs:4:13: 4:19]` must implement `FnOnce<(&'1 u32,)>`, for any lifetime `'1`...\n+   = note: ...but it actually implements `FnOnce<(&'2 u32,)>`, for some specific lifetime `'2`\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0308`."}, {"sha": "2d485d14a8d6b8fd963213f100da8727257c96a2", "filename": "src/test/ui/mismatched_types/closure-arg-type-mismatch.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/94c11dfe78c9c2e81ababe51b04231db4c90d07f/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-type-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94c11dfe78c9c2e81ababe51b04231db4c90d07f/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-type-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-type-mismatch.rs?ref=94c11dfe78c9c2e81ababe51b04231db4c90d07f", "patch": "@@ -8,8 +8,8 @@ fn main() {\n fn baz<F: Fn(*mut &u32)>(_: F) {}\n fn _test<'a>(f: fn(*mut &'a u32)) {\n     baz(f);\n-    //~^ ERROR mismatched types\n-    //~| ERROR mismatched types\n+    //~^ ERROR implementation of `FnOnce` is not general enough\n+    //~| ERROR implementation of `FnOnce` is not general enough\n     //~| ERROR mismatched types\n     //~| ERROR mismatched types\n }"}, {"sha": "67c5a68ed83c68850c3716c42e9c3d91852347a9", "filename": "src/test/ui/mismatched_types/closure-arg-type-mismatch.stderr", "status": "modified", "additions": 8, "deletions": 28, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/94c11dfe78c9c2e81ababe51b04231db4c90d07f/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-type-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94c11dfe78c9c2e81ababe51b04231db4c90d07f/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-type-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-type-mismatch.stderr?ref=94c11dfe78c9c2e81ababe51b04231db4c90d07f", "patch": "@@ -41,24 +41,14 @@ note: the lifetime requirement is introduced here\n LL | fn baz<F: Fn(*mut &u32)>(_: F) {}\n    |           ^^^^^^^^^^^^^\n \n-error[E0308]: mismatched types\n+error: implementation of `FnOnce` is not general enough\n   --> $DIR/closure-arg-type-mismatch.rs:10:5\n    |\n LL |     baz(f);\n-   |     ^^^ lifetime mismatch\n-   |\n-   = note: expected type `FnOnce<(*mut &u32,)>`\n-              found type `FnOnce<(*mut &'a u32,)>`\n-note: the required lifetime does not necessarily outlive the lifetime `'a` as defined on the function body at 9:10\n-  --> $DIR/closure-arg-type-mismatch.rs:9:10\n-   |\n-LL | fn _test<'a>(f: fn(*mut &'a u32)) {\n-   |          ^^\n-note: the lifetime requirement is introduced here\n-  --> $DIR/closure-arg-type-mismatch.rs:8:11\n+   |     ^^^ implementation of `FnOnce` is not general enough\n    |\n-LL | fn baz<F: Fn(*mut &u32)>(_: F) {}\n-   |           ^^^^^^^^^^^^^\n+   = note: `fn(*mut &'2 u32)` must implement `FnOnce<(*mut &'1 u32,)>`, for any lifetime `'1`...\n+   = note: ...but it actually implements `FnOnce<(*mut &'2 u32,)>`, for some specific lifetime `'2`\n \n error[E0308]: mismatched types\n   --> $DIR/closure-arg-type-mismatch.rs:10:5\n@@ -79,24 +69,14 @@ note: the lifetime requirement is introduced here\n LL | fn baz<F: Fn(*mut &u32)>(_: F) {}\n    |           ^^^^^^^^^^^^^\n \n-error[E0308]: mismatched types\n+error: implementation of `FnOnce` is not general enough\n   --> $DIR/closure-arg-type-mismatch.rs:10:5\n    |\n LL |     baz(f);\n-   |     ^^^ lifetime mismatch\n-   |\n-   = note: expected type `FnOnce<(*mut &u32,)>`\n-              found type `FnOnce<(*mut &'a u32,)>`\n-note: the lifetime `'a` as defined on the function body at 9:10 doesn't meet the lifetime requirements\n-  --> $DIR/closure-arg-type-mismatch.rs:9:10\n-   |\n-LL | fn _test<'a>(f: fn(*mut &'a u32)) {\n-   |          ^^\n-note: the lifetime requirement is introduced here\n-  --> $DIR/closure-arg-type-mismatch.rs:8:11\n+   |     ^^^ implementation of `FnOnce` is not general enough\n    |\n-LL | fn baz<F: Fn(*mut &u32)>(_: F) {}\n-   |           ^^^^^^^^^^^^^\n+   = note: `fn(*mut &'2 u32)` must implement `FnOnce<(*mut &'1 u32,)>`, for any lifetime `'1`...\n+   = note: ...but it actually implements `FnOnce<(*mut &'2 u32,)>`, for some specific lifetime `'2`\n \n error: aborting due to 7 previous errors\n "}, {"sha": "9ff4813d11286e860c0daf2a9f35dcd2c6c78789", "filename": "src/test/ui/rfc1623.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94c11dfe78c9c2e81ababe51b04231db4c90d07f/src%2Ftest%2Fui%2Frfc1623.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94c11dfe78c9c2e81ababe51b04231db4c90d07f/src%2Ftest%2Fui%2Frfc1623.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1623.rs?ref=94c11dfe78c9c2e81ababe51b04231db4c90d07f", "patch": "@@ -22,7 +22,7 @@ static SOME_STRUCT: &SomeStruct = &SomeStruct {\n     foo: &Foo { bools: &[false, true] },\n     bar: &Bar { bools: &[true, true] },\n     f: &id,\n-    //~^ ERROR mismatched types\n+    //~^ ERROR implementation of `FnOnce` is not general enough\n };\n \n // very simple test for a 'static static with default lifetime"}, {"sha": "e95e68c8e6d26c92669d517b9e78f9d6d95ae2eb", "filename": "src/test/ui/rfc1623.stderr", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/94c11dfe78c9c2e81ababe51b04231db4c90d07f/src%2Ftest%2Fui%2Frfc1623.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94c11dfe78c9c2e81ababe51b04231db4c90d07f/src%2Ftest%2Fui%2Frfc1623.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1623.stderr?ref=94c11dfe78c9c2e81ababe51b04231db4c90d07f", "patch": "@@ -1,12 +1,11 @@\n-error[E0308]: mismatched types\n+error: implementation of `FnOnce` is not general enough\n   --> $DIR/rfc1623.rs:24:8\n    |\n LL |     f: &id,\n-   |        ^^^ one type is more general than the other\n+   |        ^^^ implementation of `FnOnce` is not general enough\n    |\n-   = note: expected type `FnOnce<(&'a Foo<'b>,)>`\n-              found type `FnOnce<(&Foo<'_>,)>`\n+   = note: `fn(&'2 Foo<'_>) -> &'2 Foo<'_> {id::<&'2 Foo<'_>>}` must implement `FnOnce<(&'1 Foo<'b>,)>`, for any lifetime `'1`...\n+   = note: ...but it actually implements `FnOnce<(&'2 Foo<'_>,)>`, for some specific lifetime `'2`\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0308`."}, {"sha": "59b14eedc24bacac06f009a01c07520fc3ba7a17", "filename": "src/test/ui/type-alias-impl-trait/issue-57611-trait-alias.nll.stderr", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/94c11dfe78c9c2e81ababe51b04231db4c90d07f/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57611-trait-alias.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94c11dfe78c9c2e81ababe51b04231db4c90d07f/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57611-trait-alias.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57611-trait-alias.nll.stderr?ref=94c11dfe78c9c2e81ababe51b04231db4c90d07f", "patch": "@@ -24,19 +24,14 @@ note: this closure does not fulfill the lifetime requirements\n LL |         |x| x\n    |         ^^^^^\n \n-error[E0308]: mismatched types\n+error: implementation of `FnOnce` is not general enough\n   --> $DIR/issue-57611-trait-alias.rs:17:16\n    |\n LL |     type Bar = impl Baz<Self, Self>;\n-   |                ^^^^^^^^^^^^^^^^^^^^ one type is more general than the other\n+   |                ^^^^^^^^^^^^^^^^^^^^ implementation of `FnOnce` is not general enough\n    |\n-   = note: expected type `FnOnce<(&X,)>`\n-              found type `FnOnce<(&'static X,)>`\n-note: this closure does not fulfill the lifetime requirements\n-  --> $DIR/issue-57611-trait-alias.rs:25:9\n-   |\n-LL |         |x| x\n-   |         ^^^^^\n+   = note: `[closure@$DIR/issue-57611-trait-alias.rs:25:9: 25:14]` must implement `FnOnce<(&'1 X,)>`, for any lifetime `'1`...\n+   = note: ...but it actually implements `FnOnce<(&'2 X,)>`, for some specific lifetime `'2`\n \n error: aborting due to 4 previous errors\n "}, {"sha": "561528c2abbd5fe2691f63c778ce06d846463abd", "filename": "src/test/ui/type-alias-impl-trait/issue-57611-trait-alias.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/94c11dfe78c9c2e81ababe51b04231db4c90d07f/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57611-trait-alias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94c11dfe78c9c2e81ababe51b04231db4c90d07f/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57611-trait-alias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57611-trait-alias.rs?ref=94c11dfe78c9c2e81ababe51b04231db4c90d07f", "patch": "@@ -15,9 +15,9 @@ struct X;\n \n impl Foo for X {\n     type Bar = impl Baz<Self, Self>;\n-    //~^ ERROR mismatched types\n-    //~| ERROR mismatched types\n-    //~| ERROR mismatched types\n+    //~^ ERROR implementation of `FnOnce` is not general enough\n+    //~| ERROR implementation of `FnOnce` is not general enough\n+    //~| ERROR implementation of `FnOnce` is not general enough\n     //~| ERROR mismatched types\n     //~| ERROR mismatched types\n "}, {"sha": "59c91d52cca988671086a72815cd4168bdade8b5", "filename": "src/test/ui/type-alias-impl-trait/issue-57611-trait-alias.stderr", "status": "modified", "additions": 12, "deletions": 27, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/94c11dfe78c9c2e81ababe51b04231db4c90d07f/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57611-trait-alias.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94c11dfe78c9c2e81ababe51b04231db4c90d07f/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57611-trait-alias.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57611-trait-alias.stderr?ref=94c11dfe78c9c2e81ababe51b04231db4c90d07f", "patch": "@@ -1,16 +1,11 @@\n-error[E0308]: mismatched types\n+error: implementation of `FnOnce` is not general enough\n   --> $DIR/issue-57611-trait-alias.rs:17:16\n    |\n LL |     type Bar = impl Baz<Self, Self>;\n-   |                ^^^^^^^^^^^^^^^^^^^^ one type is more general than the other\n-   |\n-   = note: expected type `FnOnce<(&X,)>`\n-              found type `FnOnce<(&X,)>`\n-note: this closure does not fulfill the lifetime requirements\n-  --> $DIR/issue-57611-trait-alias.rs:25:9\n+   |                ^^^^^^^^^^^^^^^^^^^^ implementation of `FnOnce` is not general enough\n    |\n-LL |         |x| x\n-   |         ^^^^^\n+   = note: `[closure@$DIR/issue-57611-trait-alias.rs:25:9: 25:14]` must implement `FnOnce<(&'1 X,)>`, for any lifetime `'1`...\n+   = note: ...but it actually implements `FnOnce<(&'2 X,)>`, for some specific lifetime `'2`\n \n error[E0308]: mismatched types\n   --> $DIR/issue-57611-trait-alias.rs:17:16\n@@ -26,19 +21,14 @@ note: this closure does not fulfill the lifetime requirements\n LL |         |x| x\n    |         ^^^^^\n \n-error[E0308]: mismatched types\n+error: implementation of `FnOnce` is not general enough\n   --> $DIR/issue-57611-trait-alias.rs:17:16\n    |\n LL |     type Bar = impl Baz<Self, Self>;\n-   |                ^^^^^^^^^^^^^^^^^^^^ one type is more general than the other\n+   |                ^^^^^^^^^^^^^^^^^^^^ implementation of `FnOnce` is not general enough\n    |\n-   = note: expected type `FnOnce<(&X,)>`\n-              found type `FnOnce<(&'<empty> X,)>`\n-note: this closure does not fulfill the lifetime requirements\n-  --> $DIR/issue-57611-trait-alias.rs:25:9\n-   |\n-LL |         |x| x\n-   |         ^^^^^\n+   = note: `[closure@$DIR/issue-57611-trait-alias.rs:25:9: 25:14]` must implement `FnOnce<(&'1 X,)>`, for any lifetime `'1`...\n+   = note: ...but it actually implements `FnOnce<(&'2 X,)>`, for some specific lifetime `'2`\n \n error[E0308]: mismatched types\n   --> $DIR/issue-57611-trait-alias.rs:17:16\n@@ -54,19 +44,14 @@ note: this closure does not fulfill the lifetime requirements\n LL |         |x| x\n    |         ^^^^^\n \n-error[E0308]: mismatched types\n+error: implementation of `FnOnce` is not general enough\n   --> $DIR/issue-57611-trait-alias.rs:17:16\n    |\n LL |     type Bar = impl Baz<Self, Self>;\n-   |                ^^^^^^^^^^^^^^^^^^^^ one type is more general than the other\n+   |                ^^^^^^^^^^^^^^^^^^^^ implementation of `FnOnce` is not general enough\n    |\n-   = note: expected type `FnOnce<(&X,)>`\n-              found type `FnOnce<(&'<empty> X,)>`\n-note: this closure does not fulfill the lifetime requirements\n-  --> $DIR/issue-57611-trait-alias.rs:25:9\n-   |\n-LL |         |x| x\n-   |         ^^^^^\n+   = note: `[closure@$DIR/issue-57611-trait-alias.rs:25:9: 25:14]` must implement `FnOnce<(&'1 X,)>`, for any lifetime `'1`...\n+   = note: ...but it actually implements `FnOnce<(&'2 X,)>`, for some specific lifetime `'2`\n \n error: aborting due to 5 previous errors\n "}, {"sha": "2db392e8b8b9f8b7f25a8a0ce2eaaa97f299597b", "filename": "src/test/ui/unboxed-closures/issue-30906.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94c11dfe78c9c2e81ababe51b04231db4c90d07f/src%2Ftest%2Fui%2Funboxed-closures%2Fissue-30906.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94c11dfe78c9c2e81ababe51b04231db4c90d07f/src%2Ftest%2Fui%2Funboxed-closures%2Fissue-30906.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Fissue-30906.nll.stderr?ref=94c11dfe78c9c2e81ababe51b04231db4c90d07f", "patch": "@@ -1,5 +1,5 @@\n error: higher-ranked subtype error\n-  --> $DIR/issue-30906.rs:15:5\n+  --> $DIR/issue-30906.rs:18:5\n    |\n LL |     test(Compose(f, |_| {}));\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "e2d219e470384700bdf2e95eb2c3f6a681ee5626", "filename": "src/test/ui/unboxed-closures/issue-30906.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/94c11dfe78c9c2e81ababe51b04231db4c90d07f/src%2Ftest%2Fui%2Funboxed-closures%2Fissue-30906.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94c11dfe78c9c2e81ababe51b04231db4c90d07f/src%2Ftest%2Fui%2Funboxed-closures%2Fissue-30906.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Fissue-30906.rs?ref=94c11dfe78c9c2e81ababe51b04231db4c90d07f", "patch": "@@ -2,17 +2,21 @@\n \n fn test<F: for<'x> FnOnce<(&'x str,)>>(_: F) {}\n \n-struct Compose<F,G>(F,G);\n-impl<T,F,G> FnOnce<(T,)> for Compose<F,G>\n-where F: FnOnce<(T,)>, G: FnOnce<(F::Output,)> {\n+struct Compose<F, G>(F, G);\n+impl<T, F, G> FnOnce<(T,)> for Compose<F, G>\n+where\n+    F: FnOnce<(T,)>,\n+    G: FnOnce<(F::Output,)>,\n+{\n     type Output = G::Output;\n     extern \"rust-call\" fn call_once(self, (x,): (T,)) -> G::Output {\n         (self.1)((self.0)(x))\n     }\n }\n \n fn bad<T>(f: fn(&'static str) -> T) {\n-    test(Compose(f, |_| {})); //~ ERROR: mismatched types\n+    test(Compose(f, |_| {}));\n+    //~^ ERROR: implementation of `FnOnce` is not general enough\n }\n \n fn main() {}"}, {"sha": "35b1e454c02b4caf219ff4719994c9f4672beca7", "filename": "src/test/ui/unboxed-closures/issue-30906.stderr", "status": "modified", "additions": 5, "deletions": 11, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/94c11dfe78c9c2e81ababe51b04231db4c90d07f/src%2Ftest%2Fui%2Funboxed-closures%2Fissue-30906.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94c11dfe78c9c2e81ababe51b04231db4c90d07f/src%2Ftest%2Fui%2Funboxed-closures%2Fissue-30906.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Fissue-30906.stderr?ref=94c11dfe78c9c2e81ababe51b04231db4c90d07f", "patch": "@@ -1,17 +1,11 @@\n-error[E0308]: mismatched types\n-  --> $DIR/issue-30906.rs:15:5\n+error: implementation of `FnOnce` is not general enough\n+  --> $DIR/issue-30906.rs:18:5\n    |\n LL |     test(Compose(f, |_| {}));\n-   |     ^^^^ lifetime mismatch\n+   |     ^^^^ implementation of `FnOnce` is not general enough\n    |\n-   = note: expected type `FnOnce<(&'x str,)>`\n-              found type `FnOnce<(&str,)>`\n-note: the lifetime requirement is introduced here\n-  --> $DIR/issue-30906.rs:3:12\n-   |\n-LL | fn test<F: for<'x> FnOnce<(&'x str,)>>(_: F) {}\n-   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: `fn(&'2 str) -> T` must implement `FnOnce<(&'1 str,)>`, for any lifetime `'1`...\n+   = note: ...but it actually implements `FnOnce<(&'2 str,)>`, for some specific lifetime `'2`\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0308`."}]}