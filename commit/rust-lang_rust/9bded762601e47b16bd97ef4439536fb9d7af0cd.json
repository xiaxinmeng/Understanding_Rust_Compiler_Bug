{"sha": "9bded762601e47b16bd97ef4439536fb9d7af0cd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjliZGVkNzYyNjAxZTQ3YjE2YmQ5N2VmNDQzOTUzNmZiOWQ3YWYwY2Q=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2013-05-03T01:15:36Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2013-05-03T01:15:36Z"}, "message": "move @mut into scope_info", "tree": {"sha": "5fa29e5aa408fb7742ddfc4c2106ba1ece1cefe0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5fa29e5aa408fb7742ddfc4c2106ba1ece1cefe0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9bded762601e47b16bd97ef4439536fb9d7af0cd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9bded762601e47b16bd97ef4439536fb9d7af0cd", "html_url": "https://github.com/rust-lang/rust/commit/9bded762601e47b16bd97ef4439536fb9d7af0cd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9bded762601e47b16bd97ef4439536fb9d7af0cd/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cc62680cc95d2ea733dbdc03c30e5c4c48fdad04", "url": "https://api.github.com/repos/rust-lang/rust/commits/cc62680cc95d2ea733dbdc03c30e5c4c48fdad04", "html_url": "https://github.com/rust-lang/rust/commit/cc62680cc95d2ea733dbdc03c30e5c4c48fdad04"}], "stats": {"total": 109, "additions": 55, "deletions": 54}, "files": [{"sha": "8a21d9116f5e6837b07de8116a0bb0dca0550a5f", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 33, "deletions": 34, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/9bded762601e47b16bd97ef4439536fb9d7af0cd/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bded762601e47b16bd97ef4439536fb9d7af0cd/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=9bded762601e47b16bd97ef4439536fb9d7af0cd", "patch": "@@ -34,7 +34,6 @@ use lib;\n use metadata::common::LinkMeta;\n use metadata::{csearch, cstore, encoder};\n use middle::astencode;\n-use middle::borrowck::RootInfo;\n use middle::resolve;\n use middle::trans::_match;\n use middle::trans::adt;\n@@ -62,7 +61,6 @@ use middle::trans::type_of::*;\n use middle::ty;\n use util::common::indenter;\n use util::ppaux::{Repr, ty_to_str};\n-use util::ppaux;\n \n use core::hash;\n use core::hashmap::{HashMap, HashSet};\n@@ -887,11 +885,10 @@ pub fn need_invoke(bcx: block) -> bool {\n     // Walk the scopes to look for cleanups\n     let mut cur = bcx;\n     loop {\n-        let current = &mut *cur;\n-        let kind = &mut *current.kind;\n-        match *kind {\n-            block_scope(ref mut inf) => {\n-                for vec::each((*inf).cleanups) |cleanup| {\n+        match cur.kind {\n+            block_scope(inf) => {\n+                let inf = &mut *inf; // FIXME(#5074) workaround old borrowck\n+                for vec::each(inf.cleanups) |cleanup| {\n                     match *cleanup {\n                         clean(_, cleanup_type) | clean_temp(_, _, cleanup_type) => {\n                             if cleanup_type == normal_exit_and_unwind {\n@@ -903,7 +900,7 @@ pub fn need_invoke(bcx: block) -> bool {\n             }\n             _ => ()\n         }\n-        cur = match current.parent {\n+        cur = match cur.parent {\n           Some(next) => next,\n           None => return false\n         }\n@@ -925,11 +922,13 @@ pub fn in_lpad_scope_cx(bcx: block, f: &fn(si: &mut scope_info)) {\n     let mut bcx = bcx;\n     loop {\n         {\n-            // FIXME #4280: Borrow check bug workaround.\n-            let kind: &mut block_kind = &mut *bcx.kind;\n-            match *kind {\n-                block_scope(ref mut inf) => {\n-                    if inf.cleanups.len() > 0u || bcx.parent.is_none() {\n+            match bcx.kind {\n+                block_scope(inf) => {\n+                    let len = { // FIXME(#5074) workaround old borrowck\n+                        let inf = &mut *inf;\n+                        inf.cleanups.len()\n+                    };\n+                    if len > 0u || bcx.parent.is_none() {\n                         f(inf);\n                         return;\n                     }\n@@ -1194,7 +1193,7 @@ pub fn new_block(cx: fn_ctxt, parent: Option<block>, kind: block_kind,\n }\n \n pub fn simple_block_scope() -> block_kind {\n-    block_scope(scope_info {\n+    block_scope(@mut scope_info {\n         loop_break: None,\n         loop_label: None,\n         cleanups: ~[],\n@@ -1222,7 +1221,7 @@ pub fn loop_scope_block(bcx: block,\n                         loop_label: Option<ident>,\n                         n: ~str,\n                         opt_node_info: Option<NodeInfo>) -> block {\n-    return new_block(bcx.fcx, Some(bcx), block_scope(scope_info {\n+    return new_block(bcx.fcx, Some(bcx), block_scope(@mut scope_info {\n         loop_break: Some(loop_break),\n         loop_label: loop_label,\n         cleanups: ~[],\n@@ -1300,28 +1299,28 @@ pub fn cleanup_and_leave(bcx: block,\n                 @fmt!(\"cleanup_and_leave(%s)\", cur.to_str()));\n         }\n \n-        {\n-            // FIXME #4280: Borrow check bug workaround.\n-            let kind: &mut block_kind = &mut *cur.kind;\n-            match *kind {\n-              block_scope(ref mut inf) if !inf.cleanups.is_empty() => {\n-                for vec::find((*inf).cleanup_paths,\n-                              |cp| cp.target == leave).each |cp| {\n-                    Br(bcx, cp.dest);\n-                    return;\n-                }\n-                let sub_cx = sub_block(bcx, ~\"cleanup\");\n-                Br(bcx, sub_cx.llbb);\n-                inf.cleanup_paths.push(cleanup_path {\n-                    target: leave,\n-                    dest: sub_cx.llbb\n-                });\n+        match cur.kind {\n+            block_scope(inf) if !inf.empty_cleanups() => {\n+                let (sub_cx, inf_cleanups) = {\n+                    let inf = &mut *inf; // FIXME(#5074) workaround stage0\n+                    for vec::find((*inf).cleanup_paths,\n+                                  |cp| cp.target == leave).each |cp| {\n+                        Br(bcx, cp.dest);\n+                        return;\n+                    }\n+                    let sub_cx = sub_block(bcx, ~\"cleanup\");\n+                    Br(bcx, sub_cx.llbb);\n+                    inf.cleanup_paths.push(cleanup_path {\n+                        target: leave,\n+                        dest: sub_cx.llbb\n+                    });\n+                    (sub_cx, copy inf.cleanups)\n+                };\n                 bcx = trans_block_cleanups_(sub_cx,\n-                                            inf.cleanups,\n+                                            inf_cleanups,\n                                             is_lpad);\n-              }\n-              _ => ()\n             }\n+            _ => ()\n         }\n \n         match upto {"}, {"sha": "705a89381dfa59c3ec6ecc267357ea73ebe54545", "filename": "src/librustc/middle/trans/common.rs", "status": "modified", "additions": 20, "deletions": 17, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/9bded762601e47b16bd97ef4439536fb9d7af0cd/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bded762601e47b16bd97ef4439536fb9d7af0cd/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs?ref=9bded762601e47b16bd97ef4439536fb9d7af0cd", "patch": "@@ -532,6 +532,7 @@ pub fn add_clean_free(cx: block, ptr: ValueRef, heap: heap) {\n // drop glue checks whether it is zero.\n pub fn revoke_clean(cx: block, val: ValueRef) {\n     do in_scope_cx(cx) |scope_info| {\n+        let scope_info = &mut *scope_info; // FIXME(#5074) workaround borrowck\n         let cleanup_pos = vec::position(\n             scope_info.cleanups,\n             |cu| match *cu {\n@@ -550,9 +551,9 @@ pub fn revoke_clean(cx: block, val: ValueRef) {\n }\n \n pub fn block_cleanups(bcx: block) -> ~[cleanup] {\n-    match *bcx.kind {\n+    match bcx.kind {\n        block_non_scope  => ~[],\n-       block_scope(ref mut inf) => /*bad*/copy inf.cleanups\n+       block_scope(inf) => /*bad*/copy inf.cleanups\n     }\n }\n \n@@ -561,7 +562,7 @@ pub enum block_kind {\n     // cleaned up. May correspond to an actual block in the language, but also\n     // to an implicit scope, for example, calls introduce an implicit scope in\n     // which the arguments are evaluated and cleaned up.\n-    block_scope(scope_info),\n+    block_scope(@mut scope_info),\n \n     // A non-scope block is a basic block created as a translation artifact\n     // from translating code that expresses conditional logic rather than by\n@@ -584,6 +585,12 @@ pub struct scope_info {\n     landing_pad: Option<BasicBlockRef>,\n }\n \n+pub impl scope_info {\n+    fn empty_cleanups(&mut self) -> bool {\n+        self.cleanups.is_empty()\n+    }\n+}\n+\n pub trait get_node_info {\n     fn info(&self) -> Option<NodeInfo>;\n }\n@@ -632,7 +639,7 @@ pub struct block_ {\n     unreachable: bool,\n     parent: Option<block>,\n     // The 'kind' of basic block this is.\n-    kind: @mut block_kind,\n+    kind: block_kind,\n     // Is this block part of a landing pad?\n     is_lpad: bool,\n     // info about the AST node this block originated from, if any\n@@ -651,7 +658,7 @@ pub fn block_(llbb: BasicBlockRef, parent: Option<block>, kind: block_kind,\n         terminated: false,\n         unreachable: false,\n         parent: parent,\n-        kind: @mut kind,\n+        kind: kind,\n         is_lpad: is_lpad,\n         node_info: node_info,\n         fcx: fcx\n@@ -699,21 +706,17 @@ pub fn val_str(tn: @TypeNames, v: ValueRef) -> @str {\n     return ty_str(tn, val_ty(v));\n }\n \n-pub fn in_scope_cx(cx: block, f: &fn(si: &mut scope_info)) {\n+pub fn in_scope_cx(cx: block, f: &fn(si: @mut scope_info)) {\n     let mut cur = cx;\n     loop {\n-        {\n-            // XXX: Borrow check bug workaround.\n-            let kind: &mut block_kind = &mut *cur.kind;\n-            match *kind {\n-              block_scope(ref mut inf) => {\n-                  debug!(\"in_scope_cx: selected cur=%s (cx=%s)\",\n-                         cur.to_str(), cx.to_str());\n-                  f(inf);\n-                  return;\n-              }\n-              _ => ()\n+        match cur.kind {\n+            block_scope(inf) => {\n+                debug!(\"in_scope_cx: selected cur=%s (cx=%s)\",\n+                       cur.to_str(), cx.to_str());\n+                f(inf);\n+                return;\n             }\n+            _ => ()\n         }\n         cur = block_parent(cur);\n     }"}, {"sha": "60b6cf9e23f79763d6f6f4e18714123551bbf734", "filename": "src/librustc/middle/trans/controlflow.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9bded762601e47b16bd97ef4439536fb9d7af0cd/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontrolflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bded762601e47b16bd97ef4439536fb9d7af0cd/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontrolflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontrolflow.rs?ref=9bded762601e47b16bd97ef4439536fb9d7af0cd", "patch": "@@ -243,8 +243,8 @@ pub fn trans_break_cont(bcx: block,\n     let mut unwind = bcx;\n     let mut target;\n     loop {\n-        match *unwind.kind {\n-          block_scope(scope_info {\n+        match unwind.kind {\n+          block_scope(@scope_info {\n             loop_break: Some(brk),\n             loop_label: l,\n             _"}, {"sha": "ff493c46a176ade6dc4d0f558f9414de18d02a02", "filename": "src/librustc/middle/trans/expr.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9bded762601e47b16bd97ef4439536fb9d7af0cd/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bded762601e47b16bd97ef4439536fb9d7af0cd/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs?ref=9bded762601e47b16bd97ef4439536fb9d7af0cd", "patch": "@@ -123,7 +123,6 @@ use back::abi;\n use lib;\n use lib::llvm::{ValueRef, TypeRef, llvm};\n use metadata::csearch;\n-use middle::borrowck::root_map_key;\n use middle::trans::_match;\n use middle::trans::adt;\n use middle::trans::asm;"}]}