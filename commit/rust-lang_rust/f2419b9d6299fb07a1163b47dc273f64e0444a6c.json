{"sha": "f2419b9d6299fb07a1163b47dc273f64e0444a6c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYyNDE5YjlkNjI5OWZiMDdhMTE2M2I0N2RjMjczZjY0ZTA0NDRhNmM=", "commit": {"author": {"name": "Takayuki Nakata", "email": "f.seasons017@gmail.com", "date": "2020-07-13T15:11:10Z"}, "committer": {"name": "Takayuki Nakata", "email": "f.seasons017@gmail.com", "date": "2020-07-13T15:23:20Z"}, "message": "Refactoring to use `constant_context\n\nUse `constant_context`, `.is_str()` and `builtin_index()` to simplify.", "tree": {"sha": "c1e858e39fdaa4660e8f584a7ac77526d1cd487f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c1e858e39fdaa4660e8f584a7ac77526d1cd487f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f2419b9d6299fb07a1163b47dc273f64e0444a6c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f2419b9d6299fb07a1163b47dc273f64e0444a6c", "html_url": "https://github.com/rust-lang/rust/commit/f2419b9d6299fb07a1163b47dc273f64e0444a6c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f2419b9d6299fb07a1163b47dc273f64e0444a6c/comments", "author": {"login": "giraffate", "id": 17407489, "node_id": "MDQ6VXNlcjE3NDA3NDg5", "avatar_url": "https://avatars.githubusercontent.com/u/17407489?v=4", "gravatar_id": "", "url": "https://api.github.com/users/giraffate", "html_url": "https://github.com/giraffate", "followers_url": "https://api.github.com/users/giraffate/followers", "following_url": "https://api.github.com/users/giraffate/following{/other_user}", "gists_url": "https://api.github.com/users/giraffate/gists{/gist_id}", "starred_url": "https://api.github.com/users/giraffate/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/giraffate/subscriptions", "organizations_url": "https://api.github.com/users/giraffate/orgs", "repos_url": "https://api.github.com/users/giraffate/repos", "events_url": "https://api.github.com/users/giraffate/events{/privacy}", "received_events_url": "https://api.github.com/users/giraffate/received_events", "type": "User", "site_admin": false}, "committer": {"login": "giraffate", "id": 17407489, "node_id": "MDQ6VXNlcjE3NDA3NDg5", "avatar_url": "https://avatars.githubusercontent.com/u/17407489?v=4", "gravatar_id": "", "url": "https://api.github.com/users/giraffate", "html_url": "https://github.com/giraffate", "followers_url": "https://api.github.com/users/giraffate/followers", "following_url": "https://api.github.com/users/giraffate/following{/other_user}", "gists_url": "https://api.github.com/users/giraffate/gists{/gist_id}", "starred_url": "https://api.github.com/users/giraffate/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/giraffate/subscriptions", "organizations_url": "https://api.github.com/users/giraffate/orgs", "repos_url": "https://api.github.com/users/giraffate/repos", "events_url": "https://api.github.com/users/giraffate/events{/privacy}", "received_events_url": "https://api.github.com/users/giraffate/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "780a4c87de88d7f747c7847b71c90c8268fe4b66", "url": "https://api.github.com/repos/rust-lang/rust/commits/780a4c87de88d7f747c7847b71c90c8268fe4b66", "html_url": "https://github.com/rust-lang/rust/commit/780a4c87de88d7f747c7847b71c90c8268fe4b66"}], "stats": {"total": 54, "additions": 5, "deletions": 49}, "files": [{"sha": "3a0b3b1c2571bd36f62a907b667b3d14d3759f39", "filename": "clippy_lints/src/repeat_once.rs", "status": "modified", "additions": 5, "deletions": 49, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/f2419b9d6299fb07a1163b47dc273f64e0444a6c/clippy_lints%2Fsrc%2Frepeat_once.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2419b9d6299fb07a1163b47dc273f64e0444a6c/clippy_lints%2Fsrc%2Frepeat_once.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Frepeat_once.rs?ref=f2419b9d6299fb07a1163b47dc273f64e0444a6c", "patch": "@@ -1,12 +1,9 @@\n-use crate::consts::{miri_to_const, Constant};\n+use crate::consts::{constant_context, Constant};\n use crate::utils::{in_macro, is_type_diagnostic_item, snippet, span_lint_and_sugg, walk_ptrs_ty};\n use if_chain::if_chain;\n-use rustc_ast::ast::LitKind;\n use rustc_errors::Applicability;\n-use rustc_hir::def::{DefKind, Res};\n use rustc_hir::{Expr, ExprKind};\n use rustc_lint::{LateContext, LateLintPass};\n-use rustc_middle::ty::{self, Ty};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n \n declare_clippy_lint! {\n@@ -44,10 +41,11 @@ impl<'tcx> LateLintPass<'tcx> for RepeatOnce {\n         if_chain! {\n             if let ExprKind::MethodCall(ref path, _, ref args, _) = expr.kind;\n             if path.ident.name == sym!(repeat);\n-            if is_once(cx, &args[1]) && !in_macro(args[0].span);\n+            if let Some(Constant::Int(1)) = constant_context(cx, cx.tables()).expr(&args[1]);\n+            if !in_macro(args[0].span);\n             then {\n                 let ty = walk_ptrs_ty(cx.tables().expr_ty(&args[0]));\n-                if is_str(ty){\n+                if ty.is_str() {\n                     span_lint_and_sugg(\n                         cx,\n                         REPEAT_ONCE,\n@@ -57,7 +55,7 @@ impl<'tcx> LateLintPass<'tcx> for RepeatOnce {\n                         format!(\"{}.to_string()\", snippet(cx, args[0].span, r#\"\"...\"\"#)),\n                         Applicability::MachineApplicable,\n                     );\n-                } else if is_slice(ty) {\n+                } else if let Some(_) = ty.builtin_index() {\n                     span_lint_and_sugg(\n                         cx,\n                         REPEAT_ONCE,\n@@ -82,45 +80,3 @@ impl<'tcx> LateLintPass<'tcx> for RepeatOnce {\n         }\n     }\n }\n-\n-fn is_once<'tcx>(cx: &LateContext<'_>, expr: &'tcx Expr<'_>) -> bool {\n-    match expr.kind {\n-        ExprKind::Lit(ref lit) => {\n-            if let LitKind::Int(ref lit_content, _) = lit.node {\n-                *lit_content == 1\n-            } else {\n-                false\n-            }\n-        },\n-        ExprKind::Path(rustc_hir::QPath::Resolved(None, path)) => {\n-            if let Res::Def(DefKind::Const, def_id) = path.res {\n-                let ty = cx.tcx.type_of(def_id);\n-                let con = cx\n-                    .tcx\n-                    .const_eval_poly(def_id)\n-                    .ok()\n-                    .map(|val| rustc_middle::ty::Const::from_value(cx.tcx, val, ty))\n-                    .unwrap();\n-                let con = miri_to_const(con);\n-                con == Some(Constant::Int(1))\n-            } else {\n-                false\n-            }\n-        },\n-        _ => false,\n-    }\n-}\n-\n-fn is_str(ty: Ty<'_>) -> bool {\n-    match ty.kind {\n-        ty::Str => true,\n-        _ => false,\n-    }\n-}\n-\n-fn is_slice(ty: Ty<'_>) -> bool {\n-    match ty.kind {\n-        ty::Slice(..) | ty::Array(..) => true,\n-        _ => false,\n-    }\n-}"}]}