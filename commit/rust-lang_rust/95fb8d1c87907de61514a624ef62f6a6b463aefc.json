{"sha": "95fb8d1c87907de61514a624ef62f6a6b463aefc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk1ZmI4ZDFjODc5MDdkZTYxNTE0YTYyNGVmNjJmNmE2YjQ2M2FlZmM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-10-27T01:04:14Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-10-27T01:04:14Z"}, "message": "Auto merge of #29325 - alexcrichton:revert-trait-accessibility, r=nrc\n\nThese commits revert https://github.com/rust-lang/rust/pull/28504 and add a regression test pointed out by @petrochenkov, it's not immediately clear with the regression that the accessibility check should be removed, so for now preserve the behavior on stable by default.\r\n\r\nr? @nrc", "tree": {"sha": "6b4cd2289bbccf96721d8a7a5186e72e1da39358", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6b4cd2289bbccf96721d8a7a5186e72e1da39358"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/95fb8d1c87907de61514a624ef62f6a6b463aefc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/95fb8d1c87907de61514a624ef62f6a6b463aefc", "html_url": "https://github.com/rust-lang/rust/commit/95fb8d1c87907de61514a624ef62f6a6b463aefc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/95fb8d1c87907de61514a624ef62f6a6b463aefc/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "05eb81ae11929438f2386d34113e45a5a2c3552b", "url": "https://api.github.com/repos/rust-lang/rust/commits/05eb81ae11929438f2386d34113e45a5a2c3552b", "html_url": "https://github.com/rust-lang/rust/commit/05eb81ae11929438f2386d34113e45a5a2c3552b"}, {"sha": "31fa9167c0046b3f225864d3e7317120694bfb8f", "url": "https://api.github.com/repos/rust-lang/rust/commits/31fa9167c0046b3f225864d3e7317120694bfb8f", "html_url": "https://github.com/rust-lang/rust/commit/31fa9167c0046b3f225864d3e7317120694bfb8f"}], "stats": {"total": 31, "additions": 18, "deletions": 13}, "files": [{"sha": "ed8ec27705af739af853cf3530fdd49ab4c7d690", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/95fb8d1c87907de61514a624ef62f6a6b463aefc/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95fb8d1c87907de61514a624ef62f6a6b463aefc/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=95fb8d1c87907de61514a624ef62f6a6b463aefc", "patch": "@@ -852,8 +852,12 @@ impl<'a, 'tcx> PrivacyVisitor<'a, 'tcx> {\n             ty::ImplContainer(_) => {\n                 self.check_static_method(span, method_def_id, name)\n             }\n-            // Trait methods are always accessible if the trait is in scope.\n-            ty::TraitContainer(_) => {}\n+            // Trait methods are always all public. The only controlling factor\n+            // is whether the trait itself is accessible or not.\n+            ty::TraitContainer(trait_def_id) => {\n+                self.report_error(self.ensure_public(span, trait_def_id,\n+                                                     None, \"source trait\"));\n+            }\n         }\n     }\n }"}, {"sha": "21668fcfeae7139b4be7281dfa6a5cb90885f5be", "filename": "src/test/compile-fail/trait-not-accessible.rs", "status": "renamed", "additions": 12, "deletions": 11, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/95fb8d1c87907de61514a624ef62f6a6b463aefc/src%2Ftest%2Fcompile-fail%2Ftrait-not-accessible.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95fb8d1c87907de61514a624ef62f6a6b463aefc/src%2Ftest%2Fcompile-fail%2Ftrait-not-accessible.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftrait-not-accessible.rs?ref=95fb8d1c87907de61514a624ef62f6a6b463aefc", "patch": "@@ -8,20 +8,21 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use outer::Foo;\n+mod m {\n+    trait Priv {\n+        fn f(&self) {}\n+    }\n+    impl Priv for super::S {}\n+    pub trait Pub: Priv {}\n+}\n \n-mod outer {\n-    pub use self::inner::Foo;\n+struct S;\n+impl m::Pub for S {}\n \n-    mod inner {\n-        pub trait Foo {\n-            fn bar(&self) {}\n-        }\n-        impl Foo for i32 {}\n-    }\n+fn g<T: m::Pub>(arg: T) {\n+    arg.f(); //~ ERROR: source trait is private\n }\n \n fn main() {\n-    let x: i32 = 0;\n-    x.bar();\n+    g(S);\n }", "previous_filename": "src/test/run-pass/issue-16264.rs"}]}