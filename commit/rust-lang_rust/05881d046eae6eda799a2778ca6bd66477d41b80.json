{"sha": "05881d046eae6eda799a2778ca6bd66477d41b80", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA1ODgxZDA0NmVhZTZlZGE3OTlhMjc3OGNhNmJkNjY0NzdkNDFiODA=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-09-28T20:12:01Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-09-28T20:12:01Z"}, "message": "Rollup merge of #64678 - tomtau:fix/no-std-error, r=matthewjasper\n\nadded more context for duplicate lang item errors (fixes #60561)\n\nSome more information about #60561 -- these errors are pretty common when one works in restrictive environments with `no_std` or customized `std`, but they don't provide much context for debugging, as any transitive dependency could have brought in `std` crate. With that, currently, one needs to use something like `cargo tree` and investigate transitive dependencies one by one.\n\nIt'll be more helpful to know at least the crate that uses `std` (which `cargo tree` doesn't show) to pin down this investigation when debugging.\n\nI'm not sure what the best way to get this context is inside rustc internals (I'm new to them). I found that `all_crate_nums` query returns the crates in some dependency order, so printing out the name of the preceding crate seems to do the trick. But I welcome suggestions if this can be done in a better way.", "tree": {"sha": "475abff76f301d15ae0681e2ad325c958d815ab9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/475abff76f301d15ae0681e2ad325c958d815ab9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/05881d046eae6eda799a2778ca6bd66477d41b80", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdj76RCRBK7hj4Ov3rIwAAdHIIAAeRItnfiyLqm9f6G6DCaOGd\nR7+pTzcb2c7ROmFRwAxFACUp6P+PoD6ITttwf9o7zk24P9TuvcfIYoUm8HLhEMxf\n7VfezlwEyfVrrlUCaMIRTkNUZ2uNFQesCW/9FKYFXjkvOxXOlmDTV/GpHyirECRM\nPwJSQxRqpERsp42r/3sxblhX1jrQfrOLajdsUF+Nwl0oBFapbFMPwa/a3XuzFxVI\nT5wsK4Y4LunkJy+QVnznBoaVPCmxz801htEk5eKN6LH2Au0D4YvXvhQyN7WyMF9N\nTTc0dD/HbdaFGe+powRQRVPQ2KFwWSqi5QOKf1rsTnUimClnw8eVXb6/iz0ROiM=\n=ByjK\n-----END PGP SIGNATURE-----\n", "payload": "tree 475abff76f301d15ae0681e2ad325c958d815ab9\nparent 55a3eada4dddefce8d28ab0435ce5e2f219946b4\nparent ac9aed56e4dc62c4959ae0c14cec585994302c93\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1569701521 +0200\ncommitter GitHub <noreply@github.com> 1569701521 +0200\n\nRollup merge of #64678 - tomtau:fix/no-std-error, r=matthewjasper\n\nadded more context for duplicate lang item errors (fixes #60561)\n\nSome more information about #60561 -- these errors are pretty common when one works in restrictive environments with `no_std` or customized `std`, but they don't provide much context for debugging, as any transitive dependency could have brought in `std` crate. With that, currently, one needs to use something like `cargo tree` and investigate transitive dependencies one by one.\n\nIt'll be more helpful to know at least the crate that uses `std` (which `cargo tree` doesn't show) to pin down this investigation when debugging.\n\nI'm not sure what the best way to get this context is inside rustc internals (I'm new to them). I found that `all_crate_nums` query returns the crates in some dependency order, so printing out the name of the preceding crate seems to do the trick. But I welcome suggestions if this can be done in a better way.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/05881d046eae6eda799a2778ca6bd66477d41b80", "html_url": "https://github.com/rust-lang/rust/commit/05881d046eae6eda799a2778ca6bd66477d41b80", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/05881d046eae6eda799a2778ca6bd66477d41b80/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "55a3eada4dddefce8d28ab0435ce5e2f219946b4", "url": "https://api.github.com/repos/rust-lang/rust/commits/55a3eada4dddefce8d28ab0435ce5e2f219946b4", "html_url": "https://github.com/rust-lang/rust/commit/55a3eada4dddefce8d28ab0435ce5e2f219946b4"}, {"sha": "ac9aed56e4dc62c4959ae0c14cec585994302c93", "url": "https://api.github.com/repos/rust-lang/rust/commits/ac9aed56e4dc62c4959ae0c14cec585994302c93", "html_url": "https://github.com/rust-lang/rust/commit/ac9aed56e4dc62c4959ae0c14cec585994302c93"}], "stats": {"total": 68, "additions": 50, "deletions": 18}, "files": [{"sha": "ddf6262b7382e372144ea931f01c42333e869c1b", "filename": "src/librustc/middle/cstore.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/05881d046eae6eda799a2778ca6bd66477d41b80/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05881d046eae6eda799a2778ca6bd66477d41b80/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcstore.rs?ref=05881d046eae6eda799a2778ca6bd66477d41b80", "patch": "@@ -126,10 +126,17 @@ pub struct ExternCrate {\n     /// used to select the extern with the shortest path\n     pub path_len: usize,\n \n+    /// Crate that depends on this crate\n+    pub dependency_of: CrateNum,\n+}\n+\n+impl ExternCrate {\n     /// If true, then this crate is the crate named by the extern\n     /// crate referenced above. If false, then this crate is a dep\n     /// of the crate.\n-    pub direct: bool,\n+    pub fn is_direct(&self) -> bool {\n+        self.dependency_of == LOCAL_CRATE\n+    }\n }\n \n #[derive(Copy, Clone, Debug, HashStable)]"}, {"sha": "cab929389d6a4c4b0e1b4fe458f8dc946e6395ca", "filename": "src/librustc/middle/lang_items.rs", "status": "modified", "additions": 29, "deletions": 5, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/05881d046eae6eda799a2778ca6bd66477d41b80/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05881d046eae6eda799a2778ca6bd66477d41b80/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flang_items.rs?ref=05881d046eae6eda799a2778ca6bd66477d41b80", "patch": "@@ -13,6 +13,7 @@ use crate::hir::def_id::DefId;\n use crate::hir::check_attr::Target;\n use crate::ty::{self, TyCtxt};\n use crate::middle::weak_lang_items;\n+use crate::middle::cstore::ExternCrate;\n use crate::util::nodemap::FxHashMap;\n \n use syntax::ast;\n@@ -182,16 +183,39 @@ impl LanguageItemCollector<'tcx> {\n                         E0152,\n                         \"duplicate lang item found: `{}`.\",\n                         name),\n-                    None => self.tcx.sess.struct_err(&format!(\n-                            \"duplicate lang item in crate `{}`: `{}`.\",\n-                            self.tcx.crate_name(item_def_id.krate),\n-                            name)),\n+                    None => {\n+                        match self.tcx.extern_crate(item_def_id) {\n+                            Some(ExternCrate {dependency_of, ..}) => {\n+                                self.tcx.sess.struct_err(&format!(\n+                                \"duplicate lang item in crate `{}` (which `{}` depends on): `{}`.\",\n+                                self.tcx.crate_name(item_def_id.krate),\n+                                self.tcx.crate_name(*dependency_of),\n+                                name))\n+                            },\n+                            _ => {\n+                                self.tcx.sess.struct_err(&format!(\n+                                \"duplicate lang item in crate `{}`: `{}`.\",\n+                                self.tcx.crate_name(item_def_id.krate),\n+                                name))\n+                            }\n+                        }\n+                    },\n                 };\n                 if let Some(span) = self.tcx.hir().span_if_local(original_def_id) {\n                     span_note!(&mut err, span, \"first defined here.\");\n                 } else {\n-                    err.note(&format!(\"first defined in crate `{}`.\",\n+                    match self.tcx.extern_crate(original_def_id) {\n+                        Some(ExternCrate {dependency_of, ..}) => {\n+                            err.note(&format!(\n+                            \"first defined in crate `{}` (which `{}` depends on).\",\n+                                      self.tcx.crate_name(original_def_id.krate),\n+                                      self.tcx.crate_name(*dependency_of)));\n+                        },\n+                        _ => {\n+                            err.note(&format!(\"first defined in crate `{}`.\",\n                                       self.tcx.crate_name(original_def_id.krate)));\n+                        }\n+                    }\n                 }\n                 err.emit();\n             }"}, {"sha": "0adb75626975f13b10b6160b18cee1f4ee6cd13e", "filename": "src/librustc/ty/print/pretty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05881d046eae6eda799a2778ca6bd66477d41b80/src%2Flibrustc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05881d046eae6eda799a2778ca6bd66477d41b80/src%2Flibrustc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fprint%2Fpretty.rs?ref=05881d046eae6eda799a2778ca6bd66477d41b80", "patch": "@@ -278,7 +278,7 @@ pub trait PrettyPrinter<'tcx>:\n             match self.tcx().extern_crate(def_id) {\n                 Some(&ExternCrate {\n                     src: ExternCrateSource::Extern(def_id),\n-                    direct: true,\n+                    dependency_of: LOCAL_CRATE,\n                     span,\n                     ..\n                 }) => {"}, {"sha": "682835d81a62b9b7ea973cdb2809b0c65350879f", "filename": "src/librustc_metadata/creader.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/05881d046eae6eda799a2778ca6bd66477d41b80/src%2Flibrustc_metadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05881d046eae6eda799a2778ca6bd66477d41b80/src%2Flibrustc_metadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcreader.rs?ref=05881d046eae6eda799a2778ca6bd66477d41b80", "patch": "@@ -17,6 +17,7 @@ use rustc::middle::cstore::{ExternCrate, ExternCrateSource};\n use rustc::util::common::record_time;\n use rustc::util::nodemap::FxHashSet;\n use rustc::hir::map::Definitions;\n+use rustc::hir::def_id::LOCAL_CRATE;\n \n use std::ops::Deref;\n use std::path::PathBuf;\n@@ -430,7 +431,7 @@ impl<'a> CrateLoader<'a> {\n                            mut extern_crate: ExternCrate,\n                            visited: &mut FxHashSet<(CrateNum, bool)>)\n     {\n-        if !visited.insert((cnum, extern_crate.direct)) { return }\n+        if !visited.insert((cnum, extern_crate.is_direct())) { return }\n \n         let cmeta = self.cstore.get_crate_data(cnum);\n         let mut old_extern_crate = cmeta.extern_crate.borrow_mut();\n@@ -441,14 +442,14 @@ impl<'a> CrateLoader<'a> {\n         // - shorter paths to longer (tuple.2).\n         let new_rank = (\n             true,\n-            extern_crate.direct,\n+            extern_crate.is_direct(),\n             cmp::Reverse(extern_crate.path_len),\n         );\n         let old_rank = match *old_extern_crate {\n             None => (false, false, cmp::Reverse(usize::max_value())),\n             Some(ref c) => (\n                 true,\n-                c.direct,\n+                c.is_direct(),\n                 cmp::Reverse(c.path_len),\n             ),\n         };\n@@ -460,7 +461,7 @@ impl<'a> CrateLoader<'a> {\n         drop(old_extern_crate);\n \n         // Propagate the extern crate info to dependencies.\n-        extern_crate.direct = false;\n+        extern_crate.dependency_of = cnum;\n         for &dep_cnum in cmeta.dependencies.borrow().iter() {\n             self.update_extern_crate(dep_cnum, extern_crate, visited);\n         }\n@@ -1030,7 +1031,7 @@ impl<'a> CrateLoader<'a> {\n                         src: ExternCrateSource::Extern(def_id),\n                         span: item.span,\n                         path_len,\n-                        direct: true,\n+                        dependency_of: LOCAL_CRATE,\n                     },\n                     &mut FxHashSet::default(),\n                 );\n@@ -1057,7 +1058,7 @@ impl<'a> CrateLoader<'a> {\n                 span,\n                 // to have the least priority in `update_extern_crate`\n                 path_len: usize::max_value(),\n-                direct: true,\n+                dependency_of: LOCAL_CRATE,\n             },\n             &mut FxHashSet::default(),\n         );\n@@ -1081,7 +1082,7 @@ impl<'a> CrateLoader<'a> {\n                 span,\n                 // to have the least priority in `update_extern_crate`\n                 path_len: usize::max_value(),\n-                direct: true,\n+                dependency_of: LOCAL_CRATE,\n             },\n             &mut FxHashSet::default(),\n         );"}, {"sha": "83182df31cf528bb2a4758eecd56357fe743365e", "filename": "src/librustc_metadata/cstore_impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05881d046eae6eda799a2778ca6bd66477d41b80/src%2Flibrustc_metadata%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05881d046eae6eda799a2778ca6bd66477d41b80/src%2Flibrustc_metadata%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore_impl.rs?ref=05881d046eae6eda799a2778ca6bd66477d41b80", "patch": "@@ -233,7 +233,7 @@ provide! { <'tcx> tcx, def_id, other, cdata,\n \n     missing_extern_crate_item => {\n         let r = match *cdata.extern_crate.borrow() {\n-            Some(extern_crate) if !extern_crate.direct => true,\n+            Some(extern_crate) if !extern_crate.is_direct() => true,\n             _ => false,\n         };\n         r"}, {"sha": "02be11d1fd0e542237e050d57a3e8cf7179a84f0", "filename": "src/test/ui/duplicate_entry_error.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05881d046eae6eda799a2778ca6bd66477d41b80/src%2Ftest%2Fui%2Fduplicate_entry_error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/05881d046eae6eda799a2778ca6bd66477d41b80/src%2Ftest%2Fui%2Fduplicate_entry_error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fduplicate_entry_error.stderr?ref=05881d046eae6eda799a2778ca6bd66477d41b80", "patch": "@@ -7,7 +7,7 @@ LL | |     loop {}\n LL | | }\n    | |_^\n    |\n-   = note: first defined in crate `std`.\n+   = note: first defined in crate `std` (which `duplicate_entry_error` depends on).\n \n error: aborting due to previous error\n "}, {"sha": "d4b59a1148e60b5c66fcdee0163b0cf7ebfc12a1", "filename": "src/test/ui/error-codes/E0152.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05881d046eae6eda799a2778ca6bd66477d41b80/src%2Ftest%2Fui%2Ferror-codes%2FE0152.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/05881d046eae6eda799a2778ca6bd66477d41b80/src%2Ftest%2Fui%2Ferror-codes%2FE0152.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0152.stderr?ref=05881d046eae6eda799a2778ca6bd66477d41b80", "patch": "@@ -4,7 +4,7 @@ error[E0152]: duplicate lang item found: `arc`.\n LL | struct Foo;\n    | ^^^^^^^^^^^\n    |\n-   = note: first defined in crate `alloc`.\n+   = note: first defined in crate `alloc` (which `std` depends on).\n \n error: aborting due to previous error\n "}, {"sha": "e6d24348ca8250de54e94990b48137372bb06013", "filename": "src/test/ui/panic-handler/panic-handler-std.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05881d046eae6eda799a2778ca6bd66477d41b80/src%2Ftest%2Fui%2Fpanic-handler%2Fpanic-handler-std.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/05881d046eae6eda799a2778ca6bd66477d41b80/src%2Ftest%2Fui%2Fpanic-handler%2Fpanic-handler-std.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpanic-handler%2Fpanic-handler-std.stderr?ref=05881d046eae6eda799a2778ca6bd66477d41b80", "patch": "@@ -6,7 +6,7 @@ LL | |     loop {}\n LL | | }\n    | |_^\n    |\n-   = note: first defined in crate `std`.\n+   = note: first defined in crate `std` (which `panic_handler_std` depends on).\n \n error: argument should be `&PanicInfo`\n   --> $DIR/panic-handler-std.rs:7:16"}]}