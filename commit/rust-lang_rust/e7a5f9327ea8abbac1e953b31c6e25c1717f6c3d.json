{"sha": "e7a5f9327ea8abbac1e953b31c6e25c1717f6c3d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU3YTVmOTMyN2VhOGFiYmFjMWU5NTNiMzFjNmUyNWMxNzE3ZjZjM2Q=", "commit": {"author": {"name": "Sinh Pham", "email": "phamansinh@gmail.com", "date": "2015-09-10T22:27:22Z"}, "committer": {"name": "Sinh Pham", "email": "phamansinh@gmail.com", "date": "2015-09-10T22:30:07Z"}, "message": "Add diff write mode https://github.com/nrc/rustfmt/issues/261", "tree": {"sha": "243e065ea8cef70ac2b9db14add993ba2d0e11b0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/243e065ea8cef70ac2b9db14add993ba2d0e11b0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e7a5f9327ea8abbac1e953b31c6e25c1717f6c3d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e7a5f9327ea8abbac1e953b31c6e25c1717f6c3d", "html_url": "https://github.com/rust-lang/rust/commit/e7a5f9327ea8abbac1e953b31c6e25c1717f6c3d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e7a5f9327ea8abbac1e953b31c6e25c1717f6c3d/comments", "author": {"login": "sinhpham", "id": 633331, "node_id": "MDQ6VXNlcjYzMzMzMQ==", "avatar_url": "https://avatars.githubusercontent.com/u/633331?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sinhpham", "html_url": "https://github.com/sinhpham", "followers_url": "https://api.github.com/users/sinhpham/followers", "following_url": "https://api.github.com/users/sinhpham/following{/other_user}", "gists_url": "https://api.github.com/users/sinhpham/gists{/gist_id}", "starred_url": "https://api.github.com/users/sinhpham/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sinhpham/subscriptions", "organizations_url": "https://api.github.com/users/sinhpham/orgs", "repos_url": "https://api.github.com/users/sinhpham/repos", "events_url": "https://api.github.com/users/sinhpham/events{/privacy}", "received_events_url": "https://api.github.com/users/sinhpham/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sinhpham", "id": 633331, "node_id": "MDQ6VXNlcjYzMzMzMQ==", "avatar_url": "https://avatars.githubusercontent.com/u/633331?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sinhpham", "html_url": "https://github.com/sinhpham", "followers_url": "https://api.github.com/users/sinhpham/followers", "following_url": "https://api.github.com/users/sinhpham/following{/other_user}", "gists_url": "https://api.github.com/users/sinhpham/gists{/gist_id}", "starred_url": "https://api.github.com/users/sinhpham/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sinhpham/subscriptions", "organizations_url": "https://api.github.com/users/sinhpham/orgs", "repos_url": "https://api.github.com/users/sinhpham/repos", "events_url": "https://api.github.com/users/sinhpham/events{/privacy}", "received_events_url": "https://api.github.com/users/sinhpham/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6e4ea7842b2e42099953fcba8f7b76c8626bdf4a", "url": "https://api.github.com/repos/rust-lang/rust/commits/6e4ea7842b2e42099953fcba8f7b76c8626bdf4a", "html_url": "https://github.com/rust-lang/rust/commit/6e4ea7842b2e42099953fcba8f7b76c8626bdf4a"}], "stats": {"total": 243, "additions": 137, "deletions": 106}, "files": [{"sha": "30f07fd4f985c4778a7627b1c3079db34cb931ad", "filename": "Cargo.lock", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e7a5f9327ea8abbac1e953b31c6e25c1717f6c3d/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/e7a5f9327ea8abbac1e953b31c6e25c1717f6c3d/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=e7a5f9327ea8abbac1e953b31c6e25c1717f6c3d", "patch": "@@ -2,7 +2,7 @@\n name = \"rustfmt\"\n version = \"0.0.1\"\n dependencies = [\n- \"diff 0.1.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"diff 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"regex 0.1.41 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc-serialize 0.3.15 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"strings 0.0.1 (git+https://github.com/nrc/strings.rs.git)\",\n@@ -21,7 +21,7 @@ dependencies = [\n \n [[package]]\n name = \"diff\"\n-version = \"0.1.4\"\n+version = \"0.1.5\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]"}, {"sha": "9cb4f9293447f81f94c1a028ad993e197adc1311", "filename": "Cargo.toml", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e7a5f9327ea8abbac1e953b31c6e25c1717f6c3d/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/e7a5f9327ea8abbac1e953b31c6e25c1717f6c3d/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=e7a5f9327ea8abbac1e953b31c6e25c1717f6c3d", "patch": "@@ -17,7 +17,7 @@ toml = \"0.1.20\"\n rustc-serialize = \"0.3.14\"\n unicode-segmentation = \"0.1.2\"\n regex = \"0.1.41\"\n+diff = \"0.1.5\"\n+term = \"0.2.11\"\n \n [dev-dependencies]\n-diff = \"0.1.0\"\n-term = \"0.2\""}, {"sha": "9f2387f5c2c59d1bc824ea370cea6b2dcbf2412b", "filename": "src/bin/rustfmt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e7a5f9327ea8abbac1e953b31c6e25c1717f6c3d/src%2Fbin%2Frustfmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7a5f9327ea8abbac1e953b31c6e25c1717f6c3d/src%2Fbin%2Frustfmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Frustfmt.rs?ref=e7a5f9327ea8abbac1e953b31c6e25c1717f6c3d", "patch": "@@ -82,7 +82,7 @@ fn main() {\n }\n \n fn print_usage<S: Into<String>>(reason: S) {\n-    println!(\"{}\\n\\r usage: rustfmt [-h Help] [--write-mode=[replace|overwrite|display]] <file_name>\", reason.into());\n+    println!(\"{}\\n\\r usage: rustfmt [-h Help] [--write-mode=[replace|overwrite|display|diff]] <file_name>\", reason.into());\n }\n \n fn determine_params<I>(args: I) -> Option<(Vec<String>, WriteMode)>"}, {"sha": "91aaece6558f75e2d9d610fa940591b5421ccdea", "filename": "src/filemap.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e7a5f9327ea8abbac1e953b31c6e25c1717f6c3d/src%2Ffilemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7a5f9327ea8abbac1e953b31c6e25c1717f6c3d/src%2Ffilemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ffilemap.rs?ref=e7a5f9327ea8abbac1e953b31c6e25c1717f6c3d", "patch": "@@ -14,10 +14,11 @@\n use strings::string_buffer::StringBuffer;\n use std::collections::HashMap;\n use std::fs::{self, File};\n-use std::io::{self, Write, stdout};\n+use std::io::{self, Write, Read, stdout};\n use WriteMode;\n use NewlineStyle;\n use config::Config;\n+use rustfmt_diff::{make_diff, print_diff};\n \n // A map of the files of a crate, with their new content\n pub type FileMap = HashMap<String, StringBuffer>;\n@@ -104,6 +105,17 @@ fn write_file(text: &StringBuffer,\n             let stdout_lock = stdout.lock();\n             try!(write_system_newlines(stdout_lock, text, config));\n         }\n+        WriteMode::Diff => {\n+            println!(\"Diff of {}:\\n\", filename);\n+            let mut f = try!(File::open(filename));\n+            let mut ori_text = String::new();\n+            try!(f.read_to_string(&mut ori_text));\n+            let mut v = Vec::new();\n+            try!(write_system_newlines(&mut v, text, config));\n+            let fmt_text = String::from_utf8(v).unwrap();\n+            let diff = make_diff(&ori_text, &fmt_text, 3);\n+            print_diff(diff, |line_num| format!(\"\\nDiff at line {}:\", line_num));\n+        }\n         WriteMode::Return(_) => {\n             // io::Write is not implemented for String, working around with\n             // Vec<u8>"}, {"sha": "7975c77e06da621deba4c92af4f12264b0a67ea4", "filename": "src/lib.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e7a5f9327ea8abbac1e953b31c6e25c1717f6c3d/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7a5f9327ea8abbac1e953b31c6e25c1717f6c3d/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=e7a5f9327ea8abbac1e953b31c6e25c1717f6c3d", "patch": "@@ -30,6 +30,8 @@ extern crate strings;\n \n extern crate unicode_segmentation;\n extern crate regex;\n+extern crate diff;\n+extern crate term;\n \n use rustc::session::Session;\n use rustc::session::config as rustc_config;\n@@ -67,6 +69,7 @@ mod rewrite;\n mod string;\n mod comment;\n mod modules;\n+pub mod rustfmt_diff;\n \n const MIN_STRING: usize = 10;\n // When we get scoped annotations, we should have rustfmt::skip.\n@@ -82,6 +85,8 @@ pub enum WriteMode {\n     NewFile(&'static str),\n     // Write the output to stdout.\n     Display,\n+    // Write the diff to stdout.\n+    Diff,\n     // Return the result as a mapping from filenames to Strings.\n     Return(&'static Fn(HashMap<String, String>)),\n }\n@@ -94,6 +99,7 @@ impl FromStr for WriteMode {\n             \"replace\" => Ok(WriteMode::Replace),\n             \"display\" => Ok(WriteMode::Display),\n             \"overwrite\" => Ok(WriteMode::Overwrite),\n+            \"diff\" => Ok(WriteMode::Diff),\n             _ => Err(()),\n         }\n     }"}, {"sha": "375cfd661fa37a9a3e1eaddc1a8596287f393f14", "filename": "src/rustfmt_diff.rs", "status": "added", "additions": 109, "deletions": 0, "changes": 109, "blob_url": "https://github.com/rust-lang/rust/blob/e7a5f9327ea8abbac1e953b31c6e25c1717f6c3d/src%2Frustfmt_diff.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7a5f9327ea8abbac1e953b31c6e25c1717f6c3d/src%2Frustfmt_diff.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustfmt_diff.rs?ref=e7a5f9327ea8abbac1e953b31c6e25c1717f6c3d", "patch": "@@ -0,0 +1,109 @@\n+use std::collections::VecDeque;\n+use diff;\n+use term;\n+\n+pub enum DiffLine {\n+    Context(String),\n+    Expected(String),\n+    Resulting(String),\n+}\n+\n+pub struct Mismatch {\n+    pub line_number: u32,\n+    pub lines: Vec<DiffLine>,\n+}\n+\n+impl Mismatch {\n+    fn new(line_number: u32) -> Mismatch {\n+        Mismatch { line_number: line_number, lines: Vec::new() }\n+    }\n+}\n+\n+// Produces a diff between the expected output and actual output of rustfmt.\n+pub fn make_diff(expected: &str, actual: &str, context_size: usize) -> Vec<Mismatch> {\n+    let mut line_number = 1;\n+    let mut context_queue: VecDeque<&str> = VecDeque::with_capacity(context_size);\n+    let mut lines_since_mismatch = context_size + 1;\n+    let mut results = Vec::new();\n+    let mut mismatch = Mismatch::new(0);\n+\n+    for result in diff::lines(expected, actual) {\n+        match result {\n+            diff::Result::Left(str) => {\n+                if lines_since_mismatch >= context_size {\n+                    results.push(mismatch);\n+                    mismatch = Mismatch::new(line_number - context_queue.len() as u32);\n+                }\n+\n+                while let Some(line) = context_queue.pop_front() {\n+                    mismatch.lines.push(DiffLine::Context(line.to_owned()));\n+                }\n+\n+                mismatch.lines.push(DiffLine::Resulting(str.to_owned()));\n+                lines_since_mismatch = 0;\n+            }\n+            diff::Result::Right(str) => {\n+                if lines_since_mismatch >= context_size {\n+                    results.push(mismatch);\n+                    mismatch = Mismatch::new(line_number - context_queue.len() as u32);\n+                }\n+\n+                while let Some(line) = context_queue.pop_front() {\n+                    mismatch.lines.push(DiffLine::Context(line.to_owned()));\n+                }\n+\n+                mismatch.lines.push(DiffLine::Expected(str.to_owned()));\n+                line_number += 1;\n+                lines_since_mismatch = 0;\n+            }\n+            diff::Result::Both(str, _) => {\n+                if context_queue.len() >= context_size {\n+                    let _ = context_queue.pop_front();\n+                }\n+\n+                if lines_since_mismatch < context_size {\n+                    mismatch.lines.push(DiffLine::Context(str.to_owned()));\n+                } else {\n+                    context_queue.push_back(str);\n+                }\n+\n+                line_number += 1;\n+                lines_since_mismatch += 1;\n+            }\n+        }\n+    }\n+\n+    results.push(mismatch);\n+    results.remove(0);\n+\n+    results\n+}\n+\n+pub fn print_diff<F>(diff: Vec<Mismatch>, get_section_title: F)\n+    where F: Fn(u32) -> String\n+{\n+    let mut t = term::stdout().unwrap();\n+    for mismatch in diff {\n+        t.fg(term::color::BRIGHT_WHITE).unwrap();\n+        let title = get_section_title(mismatch.line_number);\n+        writeln!(t, \"{}\", title).unwrap();\n+\n+        for line in mismatch.lines {\n+            match line {\n+                DiffLine::Context(ref str) => {\n+                    t.fg(term::color::WHITE).unwrap();\n+                    writeln!(t, \" {}\u23ce\", str).unwrap();\n+                }\n+                DiffLine::Expected(ref str) => {\n+                    t.fg(term::color::GREEN).unwrap();\n+                    writeln!(t, \"+{}\u23ce\", str).unwrap();\n+                }\n+                DiffLine::Resulting(ref str) => {\n+                    t.fg(term::color::RED).unwrap();\n+                    writeln!(t, \"-{}\u23ce\", str).unwrap();\n+                }\n+            }\n+        }\n+    }\n+    t.reset().unwrap();\n+}"}, {"sha": "b0d96468eca4aaa9db4b7051e01635feefcad75d", "filename": "tests/system.rs", "status": "modified", "additions": 4, "deletions": 100, "changes": 104, "blob_url": "https://github.com/rust-lang/rust/blob/e7a5f9327ea8abbac1e953b31c6e25c1717f6c3d/tests%2Fsystem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7a5f9327ea8abbac1e953b31c6e25c1717f6c3d/tests%2Fsystem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsystem.rs?ref=e7a5f9327ea8abbac1e953b31c6e25c1717f6c3d", "patch": "@@ -15,12 +15,13 @@ extern crate diff;\n extern crate regex;\n extern crate term;\n \n-use std::collections::{VecDeque, HashMap};\n+use std::collections::HashMap;\n use std::fs;\n use std::io::{self, Read, BufRead, BufReader};\n use std::thread;\n use rustfmt::*;\n use rustfmt::config::Config;\n+use rustfmt::rustfmt_diff::*;\n \n static DIFF_CONTEXT_SIZE: usize = 3;\n \n@@ -94,27 +95,7 @@ fn print_mismatches(result: HashMap<String, Vec<Mismatch>>) {\n     let mut t = term::stdout().unwrap();\n \n     for (file_name, diff) in result {\n-        for mismatch in diff {\n-            t.fg(term::color::BRIGHT_WHITE).unwrap();\n-            writeln!(t, \"\\nMismatch at {}:{}:\", file_name, mismatch.line_number).unwrap();\n-\n-            for line in mismatch.lines {\n-                match line {\n-                    DiffLine::Context(ref str) => {\n-                        t.fg(term::color::WHITE).unwrap();\n-                        writeln!(t, \" {}\u23ce\", str).unwrap();\n-                    }\n-                    DiffLine::Expected(ref str) => {\n-                        t.fg(term::color::GREEN).unwrap();\n-                        writeln!(t, \"+{}\u23ce\", str).unwrap();\n-                    }\n-                    DiffLine::Resulting(ref str) => {\n-                        t.fg(term::color::RED).unwrap();\n-                        writeln!(t, \"-{}\u23ce\", str).unwrap();\n-                    }\n-                }\n-            }\n-        }\n+        print_diff(diff, |line_num| format!(\"\\nMismatch at {}:{}:\", file_name, line_num));\n     }\n \n     assert!(t.reset().unwrap());\n@@ -206,7 +187,7 @@ fn handle_result(result: HashMap<String, String>) {\n         // TODO: speedup by running through bytes iterator\n         f.read_to_string(&mut text).ok().expect(\"Failed reading target.\");\n         if fmt_text != text {\n-            let diff = make_diff(&fmt_text, &text, DIFF_CONTEXT_SIZE);\n+            let diff = make_diff(&text, &fmt_text, DIFF_CONTEXT_SIZE);\n             failures.insert(file_name, diff);\n         }\n     }\n@@ -226,80 +207,3 @@ fn get_target(file_name: &str, target: Option<&str>) -> String {\n         file_name.to_owned()\n     }\n }\n-\n-pub enum DiffLine {\n-    Context(String),\n-    Expected(String),\n-    Resulting(String),\n-}\n-\n-pub struct Mismatch {\n-    line_number: u32,\n-    pub lines: Vec<DiffLine>,\n-}\n-\n-impl Mismatch {\n-    fn new(line_number: u32) -> Mismatch {\n-        Mismatch { line_number: line_number, lines: Vec::new() }\n-    }\n-}\n-\n-// Produces a diff between the expected output and actual output of rustfmt.\n-fn make_diff(expected: &str, actual: &str, context_size: usize) -> Vec<Mismatch> {\n-    let mut line_number = 1;\n-    let mut context_queue: VecDeque<&str> = VecDeque::with_capacity(context_size);\n-    let mut lines_since_mismatch = context_size + 1;\n-    let mut results = Vec::new();\n-    let mut mismatch = Mismatch::new(0);\n-\n-    for result in diff::lines(expected, actual) {\n-        match result {\n-            diff::Result::Left(str) => {\n-                if lines_since_mismatch >= context_size {\n-                    results.push(mismatch);\n-                    mismatch = Mismatch::new(line_number - context_queue.len() as u32);\n-                }\n-\n-                while let Some(line) = context_queue.pop_front() {\n-                    mismatch.lines.push(DiffLine::Context(line.to_owned()));\n-                }\n-\n-                mismatch.lines.push(DiffLine::Resulting(str.to_owned()));\n-                lines_since_mismatch = 0;\n-            }\n-            diff::Result::Right(str) => {\n-                if lines_since_mismatch >= context_size {\n-                    results.push(mismatch);\n-                    mismatch = Mismatch::new(line_number - context_queue.len() as u32);\n-                }\n-\n-                while let Some(line) = context_queue.pop_front() {\n-                    mismatch.lines.push(DiffLine::Context(line.to_owned()));\n-                }\n-\n-                mismatch.lines.push(DiffLine::Expected(str.to_owned()));\n-                line_number += 1;\n-                lines_since_mismatch = 0;\n-            }\n-            diff::Result::Both(str, _) => {\n-                if context_queue.len() >= context_size {\n-                    let _ = context_queue.pop_front();\n-                }\n-\n-                if lines_since_mismatch < context_size {\n-                    mismatch.lines.push(DiffLine::Context(str.to_owned()));\n-                } else {\n-                    context_queue.push_back(str);\n-                }\n-\n-                line_number += 1;\n-                lines_since_mismatch += 1;\n-            }\n-        }\n-    }\n-\n-    results.push(mismatch);\n-    results.remove(0);\n-\n-    results\n-}"}]}