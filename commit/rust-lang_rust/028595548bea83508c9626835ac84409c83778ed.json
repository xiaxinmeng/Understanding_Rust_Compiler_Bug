{"sha": "028595548bea83508c9626835ac84409c83778ed", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAyODU5NTU0OGJlYTgzNTA4Yzk2MjY4MzVhYzg0NDA5YzgzNzc4ZWQ=", "commit": {"author": {"name": "Edwin Cheng", "email": "edwin0cheng@gmail.com", "date": "2020-03-04T14:29:55Z"}, "committer": {"name": "Edwin Cheng", "email": "edwin0cheng@gmail.com", "date": "2020-03-04T15:41:14Z"}, "message": "Fix #3436", "tree": {"sha": "09a94c9b8d4b96c960033df710b80b8b667a7098", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/09a94c9b8d4b96c960033df710b80b8b667a7098"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/028595548bea83508c9626835ac84409c83778ed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/028595548bea83508c9626835ac84409c83778ed", "html_url": "https://github.com/rust-lang/rust/commit/028595548bea83508c9626835ac84409c83778ed", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/028595548bea83508c9626835ac84409c83778ed/comments", "author": {"login": "edwin0cheng", "id": 11014119, "node_id": "MDQ6VXNlcjExMDE0MTE5", "avatar_url": "https://avatars.githubusercontent.com/u/11014119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edwin0cheng", "html_url": "https://github.com/edwin0cheng", "followers_url": "https://api.github.com/users/edwin0cheng/followers", "following_url": "https://api.github.com/users/edwin0cheng/following{/other_user}", "gists_url": "https://api.github.com/users/edwin0cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/edwin0cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edwin0cheng/subscriptions", "organizations_url": "https://api.github.com/users/edwin0cheng/orgs", "repos_url": "https://api.github.com/users/edwin0cheng/repos", "events_url": "https://api.github.com/users/edwin0cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/edwin0cheng/received_events", "type": "User", "site_admin": false}, "committer": {"login": "edwin0cheng", "id": 11014119, "node_id": "MDQ6VXNlcjExMDE0MTE5", "avatar_url": "https://avatars.githubusercontent.com/u/11014119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edwin0cheng", "html_url": "https://github.com/edwin0cheng", "followers_url": "https://api.github.com/users/edwin0cheng/followers", "following_url": "https://api.github.com/users/edwin0cheng/following{/other_user}", "gists_url": "https://api.github.com/users/edwin0cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/edwin0cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edwin0cheng/subscriptions", "organizations_url": "https://api.github.com/users/edwin0cheng/orgs", "repos_url": "https://api.github.com/users/edwin0cheng/repos", "events_url": "https://api.github.com/users/edwin0cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/edwin0cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e76dddd61078e1636ad8dc2ed02d53d37ae987e1", "url": "https://api.github.com/repos/rust-lang/rust/commits/e76dddd61078e1636ad8dc2ed02d53d37ae987e1", "html_url": "https://github.com/rust-lang/rust/commit/e76dddd61078e1636ad8dc2ed02d53d37ae987e1"}], "stats": {"total": 81, "additions": 74, "deletions": 7}, "files": [{"sha": "73137f33b8d002ba0b59dacd2af06a00a9eca5ac", "filename": "crates/ra_hir_expand/src/db.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/028595548bea83508c9626835ac84409c83778ed/crates%2Fra_hir_expand%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/028595548bea83508c9626835ac84409c83778ed/crates%2Fra_hir_expand%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_expand%2Fsrc%2Fdb.rs?ref=028595548bea83508c9626835ac84409c83778ed", "patch": "@@ -181,13 +181,9 @@ pub(crate) fn parse_macro(\n                         err,\n                         node.value\n                     );\n-                    \n-                    let mut parent = loc.kind.file_id().call_node(db);                    \n+                    let mut parent = loc.kind.file_id().call_node(db);\n                     while let Some(node) = parent.clone() {\n-                        log::warn!(\n-                            \"parent: macro_call: {:#})\",\n-                            node.value\n-                        );\n+                        log::warn!(\"parent: macro_call: {:#})\", node.value);\n                         parent = node.file_id.call_node(db);\n                     }\n                 }"}, {"sha": "ffba03898a8537f72f32d1cb1367a4f9051f1821", "filename": "crates/ra_mbe/src/mbe_expander/matcher.rs", "status": "modified", "additions": 55, "deletions": 1, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/028595548bea83508c9626835ac84409c83778ed/crates%2Fra_mbe%2Fsrc%2Fmbe_expander%2Fmatcher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/028595548bea83508c9626835ac84409c83778ed/crates%2Fra_mbe%2Fsrc%2Fmbe_expander%2Fmatcher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_mbe%2Fsrc%2Fmbe_expander%2Fmatcher.rs?ref=028595548bea83508c9626835ac84409c83778ed", "patch": "@@ -155,6 +155,60 @@ impl<'a> TtIter<'a> {\n         ok\n     }\n \n+    pub(crate) fn expect_tt(&mut self) -> Result<tt::TokenTree, ()> {\n+        let tt = self.next().ok_or_else(|| ())?.clone();\n+        let punct = match tt {\n+            tt::TokenTree::Leaf(tt::Leaf::Punct(punct)) if punct.spacing == tt::Spacing::Joint => {\n+                punct\n+            }\n+            _ => return Ok(tt),\n+        };\n+\n+        let (second, third) = match (self.peek_n(0), self.peek_n(1)) {\n+            (\n+                Some(tt::TokenTree::Leaf(tt::Leaf::Punct(p2))),\n+                Some(tt::TokenTree::Leaf(tt::Leaf::Punct(p3))),\n+            ) if p2.spacing == tt::Spacing::Joint => (p2.char, Some(p3.char)),\n+            (Some(tt::TokenTree::Leaf(tt::Leaf::Punct(p2))), _) => (p2.char, None),\n+            _ => return Ok(tt),\n+        };\n+\n+        match (punct.char, second, third) {\n+            ('.', '.', Some('.'))\n+            | ('.', '.', Some('='))\n+            | ('<', '<', Some('='))\n+            | ('>', '>', Some('=')) => {\n+                let tt2 = self.next().unwrap().clone();\n+                let tt3 = self.next().unwrap().clone();\n+                Ok(tt::Subtree { delimiter: None, token_trees: vec![tt, tt2, tt3] }.into())\n+            }\n+            ('-', '=', None)\n+            | ('-', '>', None)\n+            | (':', ':', None)\n+            | ('!', '=', None)\n+            | ('.', '.', None)\n+            | ('*', '=', None)\n+            | ('/', '=', None)\n+            | ('&', '&', None)\n+            | ('&', '=', None)\n+            | ('%', '=', None)\n+            | ('^', '=', None)\n+            | ('+', '=', None)\n+            | ('<', '<', None)\n+            | ('<', '=', None)\n+            | ('=', '=', None)\n+            | ('=', '>', None)\n+            | ('>', '=', None)\n+            | ('>', '>', None)\n+            | ('|', '=', None)\n+            | ('|', '|', None) => {\n+                let tt2 = self.next().unwrap().clone();\n+                Ok(tt::Subtree { delimiter: None, token_trees: vec![tt.clone(), tt2] }.into())\n+            }\n+            _ => Ok(tt),\n+        }\n+    }\n+\n     pub(crate) fn expect_lifetime(&mut self) -> Result<&tt::Ident, ()> {\n         let ident = self.expect_ident()?;\n         // check if it start from \"`\"\n@@ -302,7 +356,7 @@ fn match_meta_var(kind: &str, input: &mut TtIter) -> Result<Option<Fragment>, Ex\n                     let ident = input.expect_ident().map_err(|()| err!(\"expected ident\"))?.clone();\n                     tt::Leaf::from(ident).into()\n                 }\n-                \"tt\" => input.next().ok_or_else(|| err!())?.clone(),\n+                \"tt\" => input.expect_tt().map_err(|()| err!())?.clone(),\n                 \"lifetime\" => {\n                     let ident = input.expect_lifetime().map_err(|()| err!())?;\n                     tt::Leaf::Ident(ident.clone()).into()"}, {"sha": "5e6a090aaa6795debb630c7936c1ec0ce6eecd6e", "filename": "crates/ra_mbe/src/tests.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/028595548bea83508c9626835ac84409c83778ed/crates%2Fra_mbe%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/028595548bea83508c9626835ac84409c83778ed/crates%2Fra_mbe%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_mbe%2Fsrc%2Ftests.rs?ref=028595548bea83508c9626835ac84409c83778ed", "patch": "@@ -825,6 +825,19 @@ fn test_tt_group() {\n     )\n     .assert_expand_items(r#\"foo! { fn foo() {} }\"#, r#\"fn foo () {}\"#);\n }\n+\n+#[test]\n+fn test_tt_composite() {\n+    parse_macro(\n+        r#\"\n+            macro_rules! foo {\n+                 ($i:tt) => { 0 }\n+            }\n+    \"#,\n+    )\n+    .assert_expand_items(r#\"foo! { => }\"#, r#\"0\"#);\n+}\n+\n #[test]\n fn test_lifetime() {\n     parse_macro("}, {"sha": "100184e66af69072127f393f4468302d3c071d15", "filename": "crates/ra_mbe/src/tt_iter.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/028595548bea83508c9626835ac84409c83778ed/crates%2Fra_mbe%2Fsrc%2Ftt_iter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/028595548bea83508c9626835ac84409c83778ed/crates%2Fra_mbe%2Fsrc%2Ftt_iter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_mbe%2Fsrc%2Ftt_iter.rs?ref=028595548bea83508c9626835ac84409c83778ed", "patch": "@@ -53,6 +53,10 @@ impl<'a> TtIter<'a> {\n             _ => Err(()),\n         }\n     }\n+\n+    pub(crate) fn peek_n(&self, n: usize) -> Option<&tt::TokenTree> {\n+        self.inner.as_slice().get(n)\n+    }\n }\n \n impl<'a> Iterator for TtIter<'a> {"}]}