{"sha": "66bb7263b50f47878784902b5a208b7b26b74bc1", "node_id": "C_kwDOAAsO6NoAKDY2YmI3MjYzYjUwZjQ3ODc4Nzg0OTAyYjVhMjA4YjdiMjZiNzRiYzE", "commit": {"author": {"name": "Jason Newcomb", "email": "jsnewcomb@pm.me", "date": "2022-01-29T14:45:47Z"}, "committer": {"name": "Jason Newcomb", "email": "jsnewcomb@pm.me", "date": "2022-01-29T17:03:54Z"}, "message": "Don't lint `ptr_arg` for `&mut _` types in trait items", "tree": {"sha": "e27106fb88eea96fdeaa40ff946579be8aec7bc8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e27106fb88eea96fdeaa40ff946579be8aec7bc8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/66bb7263b50f47878784902b5a208b7b26b74bc1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/66bb7263b50f47878784902b5a208b7b26b74bc1", "html_url": "https://github.com/rust-lang/rust/commit/66bb7263b50f47878784902b5a208b7b26b74bc1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/66bb7263b50f47878784902b5a208b7b26b74bc1/comments", "author": {"login": "Jarcho", "id": 7761774, "node_id": "MDQ6VXNlcjc3NjE3NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7761774?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jarcho", "html_url": "https://github.com/Jarcho", "followers_url": "https://api.github.com/users/Jarcho/followers", "following_url": "https://api.github.com/users/Jarcho/following{/other_user}", "gists_url": "https://api.github.com/users/Jarcho/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jarcho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jarcho/subscriptions", "organizations_url": "https://api.github.com/users/Jarcho/orgs", "repos_url": "https://api.github.com/users/Jarcho/repos", "events_url": "https://api.github.com/users/Jarcho/events{/privacy}", "received_events_url": "https://api.github.com/users/Jarcho/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Jarcho", "id": 7761774, "node_id": "MDQ6VXNlcjc3NjE3NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7761774?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jarcho", "html_url": "https://github.com/Jarcho", "followers_url": "https://api.github.com/users/Jarcho/followers", "following_url": "https://api.github.com/users/Jarcho/following{/other_user}", "gists_url": "https://api.github.com/users/Jarcho/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jarcho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jarcho/subscriptions", "organizations_url": "https://api.github.com/users/Jarcho/orgs", "repos_url": "https://api.github.com/users/Jarcho/repos", "events_url": "https://api.github.com/users/Jarcho/events{/privacy}", "received_events_url": "https://api.github.com/users/Jarcho/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7ceffdee9bc8dc7b645cb1b91bec5df8a6716087", "url": "https://api.github.com/repos/rust-lang/rust/commits/7ceffdee9bc8dc7b645cb1b91bec5df8a6716087", "html_url": "https://github.com/rust-lang/rust/commit/7ceffdee9bc8dc7b645cb1b91bec5df8a6716087"}], "stats": {"total": 26, "additions": 20, "deletions": 6}, "files": [{"sha": "77bf5f002f7c90e596fe84e562037405d2b3c2da", "filename": "clippy_lints/src/ptr.rs", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/66bb7263b50f47878784902b5a208b7b26b74bc1/clippy_lints%2Fsrc%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66bb7263b50f47878784902b5a208b7b26b74bc1/clippy_lints%2Fsrc%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fptr.rs?ref=66bb7263b50f47878784902b5a208b7b26b74bc1", "patch": "@@ -153,7 +153,9 @@ impl<'tcx> LateLintPass<'tcx> for Ptr {\n                 cx.tcx.fn_sig(item.def_id).skip_binder().inputs(),\n                 sig.decl.inputs,\n                 &[],\n-            ) {\n+            )\n+            .filter(|arg| arg.mutability() == Mutability::Not)\n+            {\n                 span_lint_and_sugg(\n                     cx,\n                     PTR_ARG,\n@@ -170,10 +172,10 @@ impl<'tcx> LateLintPass<'tcx> for Ptr {\n     fn check_body(&mut self, cx: &LateContext<'tcx>, body: &'tcx Body<'_>) {\n         let hir = cx.tcx.hir();\n         let mut parents = hir.parent_iter(body.value.hir_id);\n-        let (item_id, decl) = match parents.next() {\n+        let (item_id, decl, is_trait_item) = match parents.next() {\n             Some((_, Node::Item(i))) => {\n                 if let ItemKind::Fn(sig, ..) = &i.kind {\n-                    (i.def_id, sig.decl)\n+                    (i.def_id, sig.decl, false)\n                 } else {\n                     return;\n                 }\n@@ -185,14 +187,14 @@ impl<'tcx> LateLintPass<'tcx> for Ptr {\n                     return;\n                 }\n                 if let ImplItemKind::Fn(sig, _) = &i.kind {\n-                    (i.def_id, sig.decl)\n+                    (i.def_id, sig.decl, false)\n                 } else {\n                     return;\n                 }\n             },\n             Some((_, Node::TraitItem(i))) => {\n                 if let TraitItemKind::Fn(sig, _) = &i.kind {\n-                    (i.def_id, sig.decl)\n+                    (i.def_id, sig.decl, true)\n                 } else {\n                     return;\n                 }\n@@ -202,7 +204,9 @@ impl<'tcx> LateLintPass<'tcx> for Ptr {\n \n         check_mut_from_ref(cx, decl);\n         let sig = cx.tcx.fn_sig(item_id).skip_binder();\n-        let lint_args: Vec<_> = check_fn_args(cx, sig.inputs(), decl.inputs, body.params).collect();\n+        let lint_args: Vec<_> = check_fn_args(cx, sig.inputs(), decl.inputs, body.params)\n+            .filter(|arg| !is_trait_item || arg.mutability() == Mutability::Not)\n+            .collect();\n         let results = check_ptr_arg_usage(cx, body, &lint_args);\n \n         for (result, args) in results.iter().zip(lint_args.iter()).filter(|(r, _)| !r.skip) {\n@@ -318,6 +322,10 @@ impl PtrArg<'_> {\n             self.deref_ty.argless_str(),\n         )\n     }\n+\n+    fn mutability(&self) -> Mutability {\n+        self.ref_prefix.mutability\n+    }\n }\n \n struct RefPrefix {"}, {"sha": "00b99da2631c630aa1ef6e227e50c4c7f678f027", "filename": "tests/ui/ptr_arg.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/66bb7263b50f47878784902b5a208b7b26b74bc1/tests%2Fui%2Fptr_arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66bb7263b50f47878784902b5a208b7b26b74bc1/tests%2Fui%2Fptr_arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fptr_arg.rs?ref=66bb7263b50f47878784902b5a208b7b26b74bc1", "patch": "@@ -180,3 +180,9 @@ fn dyn_fn_requires_vec(v: &Vec<u32>, f: &dyn Fn(&Vec<u32>)) {\n // No error for types behind an alias (#7699)\n type A = Vec<u8>;\n fn aliased(a: &A) {}\n+\n+// Issue #8366\n+pub trait Trait {\n+    fn f(v: &mut Vec<i32>);\n+    fn f2(v: &mut Vec<i32>) {}\n+}"}]}