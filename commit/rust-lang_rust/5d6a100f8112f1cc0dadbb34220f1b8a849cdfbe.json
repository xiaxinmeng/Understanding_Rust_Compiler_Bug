{"sha": "5d6a100f8112f1cc0dadbb34220f1b8a849cdfbe", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVkNmExMDBmODExMmYxY2MwZGFkYmIzNDIyMGYxYjhhODQ5Y2RmYmU=", "commit": {"author": {"name": "airt", "email": "airtial@gmail.com", "date": "2019-04-30T20:03:51Z"}, "committer": {"name": "airt", "email": "airtial@gmail.com", "date": "2019-04-30T20:03:51Z"}, "message": "format code", "tree": {"sha": "3ed575dc2d08ce50afb8bf4d46760d155f0115b8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3ed575dc2d08ce50afb8bf4d46760d155f0115b8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5d6a100f8112f1cc0dadbb34220f1b8a849cdfbe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5d6a100f8112f1cc0dadbb34220f1b8a849cdfbe", "html_url": "https://github.com/rust-lang/rust/commit/5d6a100f8112f1cc0dadbb34220f1b8a849cdfbe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5d6a100f8112f1cc0dadbb34220f1b8a849cdfbe/comments", "author": {"login": "airt", "id": 5058439, "node_id": "MDQ6VXNlcjUwNTg0Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/5058439?v=4", "gravatar_id": "", "url": "https://api.github.com/users/airt", "html_url": "https://github.com/airt", "followers_url": "https://api.github.com/users/airt/followers", "following_url": "https://api.github.com/users/airt/following{/other_user}", "gists_url": "https://api.github.com/users/airt/gists{/gist_id}", "starred_url": "https://api.github.com/users/airt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/airt/subscriptions", "organizations_url": "https://api.github.com/users/airt/orgs", "repos_url": "https://api.github.com/users/airt/repos", "events_url": "https://api.github.com/users/airt/events{/privacy}", "received_events_url": "https://api.github.com/users/airt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "airt", "id": 5058439, "node_id": "MDQ6VXNlcjUwNTg0Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/5058439?v=4", "gravatar_id": "", "url": "https://api.github.com/users/airt", "html_url": "https://github.com/airt", "followers_url": "https://api.github.com/users/airt/followers", "following_url": "https://api.github.com/users/airt/following{/other_user}", "gists_url": "https://api.github.com/users/airt/gists{/gist_id}", "starred_url": "https://api.github.com/users/airt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/airt/subscriptions", "organizations_url": "https://api.github.com/users/airt/orgs", "repos_url": "https://api.github.com/users/airt/repos", "events_url": "https://api.github.com/users/airt/events{/privacy}", "received_events_url": "https://api.github.com/users/airt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c3fde34fd53a6eed89dd30064b1985acf39f7f07", "url": "https://api.github.com/repos/rust-lang/rust/commits/c3fde34fd53a6eed89dd30064b1985acf39f7f07", "html_url": "https://github.com/rust-lang/rust/commit/c3fde34fd53a6eed89dd30064b1985acf39f7f07"}], "stats": {"total": 26, "additions": 13, "deletions": 13}, "files": [{"sha": "07a207545a0d76d0dd9cc22c5c85a6831cf97b9c", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/5d6a100f8112f1cc0dadbb34220f1b8a849cdfbe/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d6a100f8112f1cc0dadbb34220f1b8a849cdfbe/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=5d6a100f8112f1cc0dadbb34220f1b8a849cdfbe", "patch": "@@ -1976,18 +1976,17 @@ fn lint_search_is_some<'a, 'tcx>(\n         let search_snippet = snippet(cx, search_args[1].span, \"..\");\n         if search_snippet.lines().count() <= 1 {\n             // suggest `any(|x| ..)` instead of `any(|&x| ..)` for `find(|&x| ..).is_some()`\n-            let any_search_snippet =\n-                if_chain! {\n-                    if search_method == \"find\";\n-                    if let hir::ExprKind::Closure(_, _, body_id, ..) = search_args[1].node;\n-                    let closure_body = cx.tcx.hir().body(body_id);\n-                    if let hir::PatKind::Ref(..) = closure_body.arguments[0].pat.node;\n-                    then {\n-                        Some(search_snippet.replacen('&', \"\", 1))\n-                    } else {\n-                        None\n-                    }\n-                };\n+            let any_search_snippet = if_chain! {\n+                if search_method == \"find\";\n+                if let hir::ExprKind::Closure(_, _, body_id, ..) = search_args[1].node;\n+                let closure_body = cx.tcx.hir().body(body_id);\n+                if let hir::PatKind::Ref(..) = closure_body.arguments[0].pat.node;\n+                then {\n+                    Some(search_snippet.replacen('&', \"\", 1))\n+                } else {\n+                    None\n+                }\n+            };\n             // add note if not multi-line\n             span_note_and_lint(\n                 cx,\n@@ -1997,7 +1996,8 @@ fn lint_search_is_some<'a, 'tcx>(\n                 expr.span,\n                 &format!(\n                     \"replace `{0}({1}).is_some()` with `any({2})`\",\n-                    search_method, search_snippet,\n+                    search_method,\n+                    search_snippet,\n                     any_search_snippet.as_ref().map_or(&*search_snippet, String::as_str)\n                 ),\n             );"}]}