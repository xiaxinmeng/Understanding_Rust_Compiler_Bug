{"sha": "84b14c5dc9bceeadb24beaa5ae1b126701b7d932", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg0YjE0YzVkYzliY2VlYWRiMjRiZWFhNWFlMWIxMjY3MDFiN2Q5MzI=", "commit": {"author": {"name": "Barosl Lee", "email": "vcs@barosl.com", "date": "2015-03-21T05:38:23Z"}, "committer": {"name": "Barosl Lee", "email": "vcs@barosl.com", "date": "2015-03-21T05:38:23Z"}, "message": "Fix documentation for std::sync::mutex: into_guard -> into_inner", "tree": {"sha": "752c2cf189c8ef86d984178f8c8765d104fe7004", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/752c2cf189c8ef86d984178f8c8765d104fe7004"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/84b14c5dc9bceeadb24beaa5ae1b126701b7d932", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/84b14c5dc9bceeadb24beaa5ae1b126701b7d932", "html_url": "https://github.com/rust-lang/rust/commit/84b14c5dc9bceeadb24beaa5ae1b126701b7d932", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/84b14c5dc9bceeadb24beaa5ae1b126701b7d932/comments", "author": {"login": "barosl", "id": 573768, "node_id": "MDQ6VXNlcjU3Mzc2OA==", "avatar_url": "https://avatars.githubusercontent.com/u/573768?v=4", "gravatar_id": "", "url": "https://api.github.com/users/barosl", "html_url": "https://github.com/barosl", "followers_url": "https://api.github.com/users/barosl/followers", "following_url": "https://api.github.com/users/barosl/following{/other_user}", "gists_url": "https://api.github.com/users/barosl/gists{/gist_id}", "starred_url": "https://api.github.com/users/barosl/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/barosl/subscriptions", "organizations_url": "https://api.github.com/users/barosl/orgs", "repos_url": "https://api.github.com/users/barosl/repos", "events_url": "https://api.github.com/users/barosl/events{/privacy}", "received_events_url": "https://api.github.com/users/barosl/received_events", "type": "User", "site_admin": false}, "committer": {"login": "barosl", "id": 573768, "node_id": "MDQ6VXNlcjU3Mzc2OA==", "avatar_url": "https://avatars.githubusercontent.com/u/573768?v=4", "gravatar_id": "", "url": "https://api.github.com/users/barosl", "html_url": "https://github.com/barosl", "followers_url": "https://api.github.com/users/barosl/followers", "following_url": "https://api.github.com/users/barosl/following{/other_user}", "gists_url": "https://api.github.com/users/barosl/gists{/gist_id}", "starred_url": "https://api.github.com/users/barosl/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/barosl/subscriptions", "organizations_url": "https://api.github.com/users/barosl/orgs", "repos_url": "https://api.github.com/users/barosl/repos", "events_url": "https://api.github.com/users/barosl/events{/privacy}", "received_events_url": "https://api.github.com/users/barosl/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e2fa53e593a854a609ae9efe5a1bbe15265f0a6f", "url": "https://api.github.com/repos/rust-lang/rust/commits/e2fa53e593a854a609ae9efe5a1bbe15265f0a6f", "html_url": "https://github.com/rust-lang/rust/commit/e2fa53e593a854a609ae9efe5a1bbe15265f0a6f"}], "stats": {"total": 4, "additions": 2, "deletions": 2}, "files": [{"sha": "130fd1d7dc83b36841ee5ca4afbf89ec575188f5", "filename": "src/libstd/sync/mutex.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/84b14c5dc9bceeadb24beaa5ae1b126701b7d932/src%2Flibstd%2Fsync%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84b14c5dc9bceeadb24beaa5ae1b126701b7d932/src%2Flibstd%2Fsync%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmutex.rs?ref=84b14c5dc9bceeadb24beaa5ae1b126701b7d932", "patch": "@@ -40,7 +40,7 @@ use fmt;\n /// among threads to ensure that a possibly invalid invariant is not witnessed.\n ///\n /// A poisoned mutex, however, does not prevent all access to the underlying\n-/// data. The `PoisonError` type has an `into_guard` method which will return\n+/// data. The `PoisonError` type has an `into_inner` method which will return\n /// the guard that would have otherwise been returned on a successful lock. This\n /// allows access to the data, despite the lock being poisoned.\n ///\n@@ -105,7 +105,7 @@ use fmt;\n /// // pattern matched on to return the underlying guard on both branches.\n /// let mut guard = match lock.lock() {\n ///     Ok(guard) => guard,\n-///     Err(poisoned) => poisoned.into_guard(),\n+///     Err(poisoned) => poisoned.into_inner(),\n /// };\n ///\n /// *guard += 1;"}]}