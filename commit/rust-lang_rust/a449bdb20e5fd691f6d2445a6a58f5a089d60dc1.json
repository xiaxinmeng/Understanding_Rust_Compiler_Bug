{"sha": "a449bdb20e5fd691f6d2445a6a58f5a089d60dc1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE0NDliZGIyMGU1ZmQ2OTFmNmQyNDQ1YTZhNThmNWEwODlkNjBkYzE=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2016-09-13T05:11:05Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2016-10-22T18:37:22Z"}, "message": "Reword error when data-less enum variant called as function\n\nGiven a file like:\n\n```rust\nenum Test {\n    Variant,\n    Variant2 {a: u32},\n}\n\nfn main(){\n    let x = Test::Variant(\"Hello\");\n    let y = Test::Variant2(\"World\");\n}\n```\n\nThe errors now look this way:\n\n```bash\nerror[E0423]: `Test::Variant2` is the name of a struct or struct variant, but this expression uses it like a function name\n  --> file3.rs:10:13\n   |\n10 |     let y = Test::Variant2(\"Hello\");\n   |             ^^^^^^^^^^^^^^ struct called like a function\n   |\n   = help: did you mean to write: `Test::Variant2 { /* fields */ }`?\n\nerror: `Test::Variant` is being called, but it is not a function\n --> file3.rs:9:13\n  |\n9 |     let x = Test::Variant(\"World\");\n  |             ^^^^^^^^^^^^^^^^^^^^^^\n  |\n  = help: did you mean to write: `Test::Variant`?\nnote: defined here\n --> file3.rs:2:5\n  |\n2 |     Variant,\n  |     ^^^^^^^\n\nerror: aborting due to previous error\n```", "tree": {"sha": "39e023afe955138473b3882b5ff4143f52c6dbd1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/39e023afe955138473b3882b5ff4143f52c6dbd1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a449bdb20e5fd691f6d2445a6a58f5a089d60dc1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a449bdb20e5fd691f6d2445a6a58f5a089d60dc1", "html_url": "https://github.com/rust-lang/rust/commit/a449bdb20e5fd691f6d2445a6a58f5a089d60dc1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a449bdb20e5fd691f6d2445a6a58f5a089d60dc1/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b5f6d7ec2d4e231b9ef0c8a9e8e7ec8a7f67d2ae", "url": "https://api.github.com/repos/rust-lang/rust/commits/b5f6d7ec2d4e231b9ef0c8a9e8e7ec8a7f67d2ae", "html_url": "https://github.com/rust-lang/rust/commit/b5f6d7ec2d4e231b9ef0c8a9e8e7ec8a7f67d2ae"}], "stats": {"total": 40, "additions": 29, "deletions": 11}, "files": [{"sha": "ac67f75743e84b6e685ee0bae70977ffe0b60f40", "filename": "src/librustc_typeck/check/callee.rs", "status": "modified", "additions": 23, "deletions": 9, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/a449bdb20e5fd691f6d2445a6a58f5a089d60dc1/src%2Flibrustc_typeck%2Fcheck%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a449bdb20e5fd691f6d2445a6a58f5a089d60dc1/src%2Flibrustc_typeck%2Fcheck%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcallee.rs?ref=a449bdb20e5fd691f6d2445a6a58f5a089d60dc1", "patch": "@@ -13,6 +13,7 @@ use super::{DeferredCallResolution, Expectation, FnCtxt, TupleArgumentsFlag};\n use CrateCtxt;\n use hir::def::Def;\n use hir::def_id::{DefId, LOCAL_CRATE};\n+use hir::print;\n use rustc::{infer, traits};\n use rustc::ty::{self, LvaluePreference, Ty};\n use syntax::parse::token;\n@@ -194,15 +195,28 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         let error_fn_sig;\n \n         let fn_sig = match callee_ty.sty {\n-            ty::TyFnDef(.., &ty::BareFnTy { ref sig, .. }) |\n-            ty::TyFnPtr(&ty::BareFnTy { ref sig, .. }) => sig,\n-            _ => {\n-                let mut err = self.type_error_struct(call_expr.span,\n-                                                     |actual| {\n-                                                         format!(\"expected function, found `{}`\",\n-                                                                 actual)\n-                                                     },\n-                                                     callee_ty);\n+            ty::TyFnDef(.., &ty::BareFnTy {ref sig, ..}) |\n+            ty::TyFnPtr(&ty::BareFnTy {ref sig, ..}) => sig,\n+            ref t => {\n+                let mut unit_variant = None;\n+                if let &ty::TyAdt(adt_def, ..) = t {\n+                    if adt_def.is_enum() {\n+                        if let hir::ExprCall(ref expr, _) = call_expr.node {\n+                            unit_variant = Some(print::expr_to_string(expr))\n+                        }\n+                    }\n+                }\n+                let mut err = if let Some(path) = unit_variant {\n+                    let mut err = self.type_error_struct(call_expr.span, |_| {\n+                        format!(\"`{}` is being called, but it is not a function\", path)\n+                    }, callee_ty);\n+                    err.help(&format!(\"did you mean to write `{}`?\", path));\n+                    err\n+                } else {\n+                    self.type_error_struct(call_expr.span, |actual| {\n+                        format!(\"expected function, found `{}`\", actual)\n+                    }, callee_ty)\n+                };\n \n                 if let hir::ExprCall(ref expr, _) = call_expr.node {\n                     let tcx = self.tcx;"}, {"sha": "273ce91a7c5b8a0d1b03442486c0a9f89a232a4e", "filename": "src/test/compile-fail/empty-struct-unit-expr.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a449bdb20e5fd691f6d2445a6a58f5a089d60dc1/src%2Ftest%2Fcompile-fail%2Fempty-struct-unit-expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a449bdb20e5fd691f6d2445a6a58f5a089d60dc1/src%2Ftest%2Fcompile-fail%2Fempty-struct-unit-expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fempty-struct-unit-expr.rs?ref=a449bdb20e5fd691f6d2445a6a58f5a089d60dc1", "patch": "@@ -23,7 +23,11 @@ enum E {\n \n fn main() {\n     let e2 = Empty2(); //~ ERROR expected function, found `Empty2`\n-    let e4 = E::Empty4(); //~ ERROR expected function, found `E`\n+    let e4 = E::Empty4();\n+    //~^ ERROR `E::Empty4` is being called, but it is not a function\n+    //~| HELP did you mean to write `E::Empty4`?\n     let xe2 = XEmpty2(); //~ ERROR expected function, found `empty_struct::XEmpty2`\n-    let xe4 = XE::XEmpty4(); //~ ERROR  expected function, found `empty_struct::XE`\n+    let xe4 = XE::XEmpty4();\n+    //~^ ERROR `XE::XEmpty4` is being called, but it is not a function\n+    //~| HELP did you mean to write `XE::XEmpty4`?\n }"}]}