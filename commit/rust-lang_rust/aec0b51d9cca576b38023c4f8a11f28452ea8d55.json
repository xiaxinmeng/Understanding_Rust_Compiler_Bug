{"sha": "aec0b51d9cca576b38023c4f8a11f28452ea8d55", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFlYzBiNTFkOWNjYTU3NmIzODAyM2M0ZjhhMTFmMjg0NTJlYThkNTU=", "commit": {"author": {"name": "Eric Holk", "email": "eric.holk@gmail.com", "date": "2012-05-15T21:51:33Z"}, "committer": {"name": "Eric Holk", "email": "eric.holk@gmail.com", "date": "2012-05-17T19:00:24Z"}, "message": "Added a few more extension methods on vectors, and fixed a pretty printer bug.", "tree": {"sha": "357d27b5623c3f0899681c3c840542d0f02f3be9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/357d27b5623c3f0899681c3c840542d0f02f3be9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aec0b51d9cca576b38023c4f8a11f28452ea8d55", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aec0b51d9cca576b38023c4f8a11f28452ea8d55", "html_url": "https://github.com/rust-lang/rust/commit/aec0b51d9cca576b38023c4f8a11f28452ea8d55", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aec0b51d9cca576b38023c4f8a11f28452ea8d55/comments", "author": {"login": "eholk", "id": 105766, "node_id": "MDQ6VXNlcjEwNTc2Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/105766?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eholk", "html_url": "https://github.com/eholk", "followers_url": "https://api.github.com/users/eholk/followers", "following_url": "https://api.github.com/users/eholk/following{/other_user}", "gists_url": "https://api.github.com/users/eholk/gists{/gist_id}", "starred_url": "https://api.github.com/users/eholk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eholk/subscriptions", "organizations_url": "https://api.github.com/users/eholk/orgs", "repos_url": "https://api.github.com/users/eholk/repos", "events_url": "https://api.github.com/users/eholk/events{/privacy}", "received_events_url": "https://api.github.com/users/eholk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eholk", "id": 105766, "node_id": "MDQ6VXNlcjEwNTc2Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/105766?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eholk", "html_url": "https://github.com/eholk", "followers_url": "https://api.github.com/users/eholk/followers", "following_url": "https://api.github.com/users/eholk/following{/other_user}", "gists_url": "https://api.github.com/users/eholk/gists{/gist_id}", "starred_url": "https://api.github.com/users/eholk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eholk/subscriptions", "organizations_url": "https://api.github.com/users/eholk/orgs", "repos_url": "https://api.github.com/users/eholk/repos", "events_url": "https://api.github.com/users/eholk/events{/privacy}", "received_events_url": "https://api.github.com/users/eholk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9fa4763604b8d9bd342d5ead58442ef1b3643b5a", "url": "https://api.github.com/repos/rust-lang/rust/commits/9fa4763604b8d9bd342d5ead58442ef1b3643b5a", "html_url": "https://github.com/rust-lang/rust/commit/9fa4763604b8d9bd342d5ead58442ef1b3643b5a"}], "stats": {"total": 24, "additions": 22, "deletions": 2}, "files": [{"sha": "3c6a3d9f7b2155bc65497a4279f1d094493f973d", "filename": "src/libcore/vec.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/aec0b51d9cca576b38023c4f8a11f28452ea8d55/src%2Flibcore%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aec0b51d9cca576b38023c4f8a11f28452ea8d55/src%2Flibcore%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fvec.rs?ref=aec0b51d9cca576b38023c4f8a11f28452ea8d55", "patch": "@@ -580,6 +580,16 @@ fn all<T>(v: [T], f: fn(T) -> bool) -> bool {\n     ret true;\n }\n \n+#[doc = \"\n+Return true if a predicate matches all elements\n+\n+If the vector contains no elements then true is returned.\n+\"]\n+fn alli<T>(v: [T], f: fn(uint, T) -> bool) -> bool {\n+    for eachi(v) {|i, elem| if !f(i, elem) { ret false; } }\n+    ret true;\n+}\n+\n #[doc = \"\n Return true if a predicate matches all elements in both vectors.\n \n@@ -1107,6 +1117,12 @@ impl extensions<T> for [T] {\n         let mut i = 0u;\n         self.map { |e| i += 1u; f(i - 1u, e) }\n     }\n+    #[doc = \"Returns true if the function returns true for all elements.\n+\n+    If the vector is empty, true is returned.\"]\n+    fn alli(f: fn(uint, T) -> bool) -> bool {\n+        alli(self, f)\n+    }\n     #[doc = \"\n     Apply a function to each element of a vector and return a concatenation\n     of each result vector"}, {"sha": "cc541cc4f4d39849e1fac56983902f0c4c6650ab", "filename": "src/librustsyntax/print/pprust.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/aec0b51d9cca576b38023c4f8a11f28452ea8d55/src%2Flibrustsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aec0b51d9cca576b38023c4f8a11f28452ea8d55/src%2Flibrustsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustsyntax%2Fprint%2Fpprust.rs?ref=aec0b51d9cca576b38023c4f8a11f28452ea8d55", "patch": "@@ -337,6 +337,10 @@ fn print_region(s: ps, region: @ast::region) {\n }\n \n fn print_type(s: ps, &&ty: @ast::ty) {\n+    print_type_ex(s, ty, false);\n+}\n+\n+fn print_type_ex(s: ps, &&ty: @ast::ty, print_colons: bool) {\n     maybe_print_comment(s, ty.span.lo);\n     ibox(s, 0u);\n     alt ty.node {\n@@ -384,7 +388,7 @@ fn print_type(s: ps, &&ty: @ast::ty) {\n       ast::ty_fn(proto, d) {\n         print_ty_fn(s, some(proto), d, none, none);\n       }\n-      ast::ty_path(path, _) { print_path(s, path, false); }\n+      ast::ty_path(path, _) { print_path(s, path, print_colons); }\n       ast::ty_constr(t, cs) {\n         print_type(s, t);\n         space(s.s);\n@@ -961,7 +965,7 @@ fn print_expr(s: ps, &&expr: @ast::expr) {\n         print_op_maybe_parens(s, expr, parse::prec::as_prec);\n         space(s.s);\n         word_space(s, \"as\");\n-        print_type(s, ty);\n+        print_type_ex(s, ty, true);\n       }\n       ast::expr_if(test, blk, elseopt) {\n         print_if(s, test, blk, elseopt, false);"}]}