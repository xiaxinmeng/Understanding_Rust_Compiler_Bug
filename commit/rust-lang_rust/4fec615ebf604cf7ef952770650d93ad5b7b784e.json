{"sha": "4fec615ebf604cf7ef952770650d93ad5b7b784e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRmZWM2MTVlYmY2MDRjZjdlZjk1Mjc3MDY1MGQ5M2FkNWI3Yjc4NGU=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-08-22T10:02:09Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-08-22T11:08:40Z"}, "message": "fix error reporting in validation", "tree": {"sha": "aaff5c3f29f4d161fb65f0c3c878ad522a7beb16", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aaff5c3f29f4d161fb65f0c3c878ad522a7beb16"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4fec615ebf604cf7ef952770650d93ad5b7b784e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4fec615ebf604cf7ef952770650d93ad5b7b784e", "html_url": "https://github.com/rust-lang/rust/commit/4fec615ebf604cf7ef952770650d93ad5b7b784e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4fec615ebf604cf7ef952770650d93ad5b7b784e/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "899bc14cc08777bd6c5738c5697082b1cfbc7755", "url": "https://api.github.com/repos/rust-lang/rust/commits/899bc14cc08777bd6c5738c5697082b1cfbc7755", "html_url": "https://github.com/rust-lang/rust/commit/899bc14cc08777bd6c5738c5697082b1cfbc7755"}], "stats": {"total": 21, "additions": 14, "deletions": 7}, "files": [{"sha": "8f0e8196605412446a01b4bd3bbb9f92de2e3fa9", "filename": "src/librustc_mir/interpret/validity.rs", "status": "modified", "additions": 13, "deletions": 6, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/4fec615ebf604cf7ef952770650d93ad5b7b784e/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fec615ebf604cf7ef952770650d93ad5b7b784e/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs?ref=4fec615ebf604cf7ef952770650d93ad5b7b784e", "patch": "@@ -5,7 +5,7 @@ use rustc::ty::layout::{self, Size, Primitive};\n use rustc::ty::{self, Ty};\n use rustc_data_structures::fx::FxHashSet;\n use rustc::mir::interpret::{\n-    Scalar, AllocType, EvalResult, ScalarMaybeUndef,\n+    Scalar, AllocType, EvalResult, ScalarMaybeUndef, EvalErrorKind\n };\n \n use super::{\n@@ -285,15 +285,22 @@ impl<'a, 'mir, 'tcx, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M> {\n                     // This is a fat pointer.\n                     let ptr = match self.ref_to_mplace(self.read_value(dest.into())?) {\n                         Ok(ptr) => ptr,\n-                        Err(ReadPointerAsBytes) =>\n-                            return validation_failure!(\"fat pointer length is not a valid integer\", path),\n-                        Err(ReadBytesAsPointer) =>\n-                            return validation_failure!(\"fat pointer vtable is not a valid pointer\", path),\n-                        Err(err) => return Err(err),\n+                        Err(err) => match err.kind {\n+                            EvalErrorKind::ReadPointerAsBytes =>\n+                                return validation_failure!(\n+                                    \"fat pointer length is not a valid integer\", path\n+                                ),\n+                            EvalErrorKind::ReadBytesAsPointer =>\n+                                return validation_failure!(\n+                                    \"fat pointer vtable is not a valid pointer\", path\n+                                ),\n+                            _ => return Err(err),\n+                        }\n                     };\n                     let unpacked_ptr = self.unpack_unsized_mplace(ptr)?;\n                     // for safe ptrs, recursively check it\n                     if !dest.layout.ty.is_unsafe_ptr() {\n+                        trace!(\"Recursing below fat ptr {:?} (unpacked: {:?})\", ptr, unpacked_ptr);\n                         if seen.insert(unpacked_ptr) {\n                             todo.push((unpacked_ptr, path_clone_and_deref(path)));\n                         }"}, {"sha": "cc22422304d68ca92d5bd0e5d86fef9a336e8a4a", "filename": "src/test/ui/union-ub-fat-ptr.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4fec615ebf604cf7ef952770650d93ad5b7b784e/src%2Ftest%2Fui%2Funion-ub-fat-ptr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4fec615ebf604cf7ef952770650d93ad5b7b784e/src%2Ftest%2Fui%2Funion-ub-fat-ptr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion-ub-fat-ptr.stderr?ref=4fec615ebf604cf7ef952770650d93ad5b7b784e", "patch": "@@ -58,7 +58,7 @@ error[E0080]: this constant likely exhibits undefined behavior\n   --> $DIR/union-ub-fat-ptr.rs:104:1\n    |\n LL | const F: &Trait = unsafe { DynTransmute { bad: BadDynRepr { ptr: &92, vtable: 3 } }.rust};\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered fat pointer length is not a valid integer\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered fat pointer vtable is not a valid pointer\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n "}]}