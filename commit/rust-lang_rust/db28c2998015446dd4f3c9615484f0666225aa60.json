{"sha": "db28c2998015446dd4f3c9615484f0666225aa60", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRiMjhjMjk5ODAxNTQ0NmRkNGYzYzk2MTU0ODRmMDY2NjIyNWFhNjA=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-09-23T23:55:48Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-09-25T21:27:42Z"}, "message": "rustdoc: Use sundown for markdown highlighting\n\nThis takes rendering times of documentation down from 30s to 0.5s. Kinda sad\nthat none of the parallelism is needed, but oh well!\n\nCloses #7380\ncc #3546", "tree": {"sha": "661d33d0ec2f6c57a54498d5c1e1afacffc307e1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/661d33d0ec2f6c57a54498d5c1e1afacffc307e1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/db28c2998015446dd4f3c9615484f0666225aa60", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/db28c2998015446dd4f3c9615484f0666225aa60", "html_url": "https://github.com/rust-lang/rust/commit/db28c2998015446dd4f3c9615484f0666225aa60", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/db28c2998015446dd4f3c9615484f0666225aa60/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6aba140fa738acea9d06e29e95abbfcc9d1cba5d", "url": "https://api.github.com/repos/rust-lang/rust/commits/6aba140fa738acea9d06e29e95abbfcc9d1cba5d", "html_url": "https://github.com/rust-lang/rust/commit/6aba140fa738acea9d06e29e95abbfcc9d1cba5d"}], "stats": {"total": 155, "additions": 103, "deletions": 52}, "files": [{"sha": "923eb90664c05bb11724a49216e43bcab444dd88", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 84, "deletions": 33, "changes": 117, "blob_url": "https://github.com/rust-lang/rust/blob/db28c2998015446dd4f3c9615484f0666225aa60/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db28c2998015446dd4f3c9615484f0666225aa60/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=db28c2998015446dd4f3c9615484f0666225aa60", "patch": "@@ -8,47 +8,98 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#[allow(cstack)]; // each rendering task runs on a fixed stack segment.\n+\n use std::fmt;\n-use std::rt::io::Reader;\n-use std::rt::io::pipe::PipeStream;\n-use std::rt::io::process::{ProcessConfig, Process, CreatePipe};\n+use std::libc;\n use std::rt::io;\n+use std::vec;\n \n pub struct Markdown<'self>(&'self str);\n \n+static OUTPUT_UNIT: libc::size_t = 64;\n+\n+type sd_markdown = libc::c_void;  // this is opaque to us\n+\n+// this is a large struct of callbacks we don't use\n+type sd_callbacks = [libc::size_t, ..26];\n+\n+struct html_toc_data {\n+    header_count: libc::c_int,\n+    current_level: libc::c_int,\n+    level_offset: libc::c_int,\n+}\n+\n+struct html_renderopt {\n+    toc_data: html_toc_data,\n+    flags: libc::c_uint,\n+    link_attributes: Option<extern \"C\" fn(*buf, *buf, *libc::c_void)>,\n+}\n+\n+struct buf {\n+    data: *u8,\n+    size: libc::size_t,\n+    asize: libc::size_t,\n+    unit: libc::size_t,\n+}\n+\n+// sundown FFI\n+extern {\n+    fn sdhtml_renderer(callbacks: *sd_callbacks,\n+                       options_ptr: *html_renderopt,\n+                       render_flags: libc::c_uint);\n+    fn sd_markdown_new(extensions: libc::c_uint,\n+                       max_nesting: libc::size_t,\n+                       callbacks: *sd_callbacks,\n+                       opaque: *libc::c_void) -> *sd_markdown;\n+    fn sd_markdown_render(ob: *buf,\n+                          document: *u8,\n+                          doc_size: libc::size_t,\n+                          md: *sd_markdown);\n+    fn sd_markdown_free(md: *sd_markdown);\n+\n+    fn bufnew(unit: libc::size_t) -> *buf;\n+    fn bufrelease(b: *buf);\n+\n+}\n+\n+fn render(w: &mut io::Writer, s: &str) {\n+    // This code is all lifted from examples/sundown.c in the sundown repo\n+    unsafe {\n+        let ob = bufnew(OUTPUT_UNIT);\n+        let options = html_renderopt {\n+            toc_data: html_toc_data {\n+                header_count: 0,\n+                current_level: 0,\n+                level_offset: 0,\n+            },\n+            flags: 0,\n+            link_attributes: None,\n+        };\n+        let callbacks: sd_callbacks = [0, ..26];\n+\n+        sdhtml_renderer(&callbacks, &options, 0);\n+        let markdown = sd_markdown_new(0, 16, &callbacks,\n+                                       &options as *html_renderopt as *libc::c_void);\n+\n+        do s.as_imm_buf |data, len| {\n+            sd_markdown_render(ob, data, len as libc::size_t, markdown);\n+        }\n+        sd_markdown_free(markdown);\n+\n+        do vec::raw::buf_as_slice((*ob).data, (*ob).size as uint) |buf| {\n+            w.write(buf);\n+        }\n+\n+        bufrelease(ob);\n+    }\n+}\n+\n impl<'self> fmt::Default for Markdown<'self> {\n     fn fmt(md: &Markdown<'self>, fmt: &mut fmt::Formatter) {\n+        // This is actually common enough to special-case\n         if md.len() == 0 { return; }\n \n-        // Create the pandoc process\n-        do io::io_error::cond.trap(|err| {\n-            fail2!(\"Error executing `pandoc`: {}\", err.desc);\n-        }).inside {\n-            let io = ~[CreatePipe(PipeStream::new().unwrap(), true, false),\n-                       CreatePipe(PipeStream::new().unwrap(), false, true)];\n-            let args = ProcessConfig {\n-                program: \"pandoc\",\n-                args: [],\n-                env: None,\n-                cwd: None,\n-                io: io,\n-            };\n-            let mut p = Process::new(args).expect(\"couldn't fork for pandoc\");\n-\n-            // Write the markdown to stdin and close it.\n-            p.io[0].get_mut_ref().write(md.as_bytes());\n-            p.io[0] = None;\n-\n-            // Ferry the output from pandoc over to the destination buffer.\n-            let mut buf = [0, ..1024];\n-            loop {\n-                match p.io[1].get_mut_ref().read(buf) {\n-                    None | Some(0) => { break }\n-                    Some(n) => {\n-                        fmt.buf.write(buf.slice_to(n));\n-                    }\n-                }\n-            }\n-        }\n+        render(fmt.buf, md.as_slice());\n     }\n }"}, {"sha": "96b118051df6404170893cc0ac7b979cdc2108f0", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/db28c2998015446dd4f3c9615484f0666225aa60/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db28c2998015446dd4f3c9615484f0666225aa60/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=db28c2998015446dd4f3c9615484f0666225aa60", "patch": "@@ -401,8 +401,16 @@ impl Context {\n             let mut task = task::task();\n             task.unlinked(); // we kill things manually\n             task.name(format!(\"worker{}\", i));\n-            do task.spawn_with(cache.clone()) |cache| {\n+            task.spawn_with(cache.clone(),\n+                            |cache| worker(cache, &port, &chan, &prog_chan));\n+\n+            fn worker(cache: RWArc<Cache>,\n+                      port: &SharedPort<Work>,\n+                      chan: &SharedChan<Work>,\n+                      prog_chan: &SharedChan<Progress>) {\n+                #[fixed_stack_segment]; // we hit markdown FFI *a lot*\n                 local_data::set(cache_key, cache);\n+\n                 loop {\n                     match port.recv() {\n                         Process(cx, item) => {\n@@ -425,28 +433,20 @@ impl Context {\n             }\n         }\n \n-        let watcher_chan = chan.clone();\n-        let (done_port, done_chan) = comm::stream();\n-        do task::spawn {\n-            let mut jobs = 0;\n-            loop {\n-                match prog_port.recv() {\n-                    JobNew => jobs += 1,\n-                    JobDone => jobs -= 1,\n-                }\n-\n-                if jobs == 0 { break }\n+        chan.send(Process(self, item));\n+        let mut jobs = 1;\n+        loop {\n+            match prog_port.recv() {\n+                JobNew => jobs += 1,\n+                JobDone => jobs -= 1,\n             }\n \n-            for _ in range(0, WORKERS) {\n-                watcher_chan.send(Die);\n-            }\n-            done_chan.send(());\n+            if jobs == 0 { break }\n         }\n \n-        prog_chan.send(JobNew);\n-        chan.send(Process(self, item));\n-        done_port.recv();\n+        for _ in range(0, WORKERS) {\n+            chan.send(Die);\n+        }\n     }\n \n     fn item(&mut self, item: clean::Item, f: &fn(&mut Context, clean::Item)) {"}]}