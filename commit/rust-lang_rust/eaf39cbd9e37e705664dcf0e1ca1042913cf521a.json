{"sha": "eaf39cbd9e37e705664dcf0e1ca1042913cf521a", "node_id": "C_kwDOAAsO6NoAKGVhZjM5Y2JkOWUzN2U3MDU2NjRkY2YwZTFjYTEwNDI5MTNjZjUyMWE", "commit": {"author": {"name": "LegionMammal978", "email": "mattlloydhouse@gmail.com", "date": "2021-12-14T02:52:35Z"}, "committer": {"name": "LegionMammal978", "email": "mattlloydhouse@gmail.com", "date": "2021-12-15T05:41:41Z"}, "message": "Remove `in_band_lifetimes` from `rustc_codegen_ssa`\n\nSee #91867 for more information.", "tree": {"sha": "b938c594b63c0ff4444968c81c590bc9b637c4c9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b938c594b63c0ff4444968c81c590bc9b637c4c9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eaf39cbd9e37e705664dcf0e1ca1042913cf521a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eaf39cbd9e37e705664dcf0e1ca1042913cf521a", "html_url": "https://github.com/rust-lang/rust/commit/eaf39cbd9e37e705664dcf0e1ca1042913cf521a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eaf39cbd9e37e705664dcf0e1ca1042913cf521a/comments", "author": {"login": "LegionMammal978", "id": 7880963, "node_id": "MDQ6VXNlcjc4ODA5NjM=", "avatar_url": "https://avatars.githubusercontent.com/u/7880963?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LegionMammal978", "html_url": "https://github.com/LegionMammal978", "followers_url": "https://api.github.com/users/LegionMammal978/followers", "following_url": "https://api.github.com/users/LegionMammal978/following{/other_user}", "gists_url": "https://api.github.com/users/LegionMammal978/gists{/gist_id}", "starred_url": "https://api.github.com/users/LegionMammal978/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LegionMammal978/subscriptions", "organizations_url": "https://api.github.com/users/LegionMammal978/orgs", "repos_url": "https://api.github.com/users/LegionMammal978/repos", "events_url": "https://api.github.com/users/LegionMammal978/events{/privacy}", "received_events_url": "https://api.github.com/users/LegionMammal978/received_events", "type": "User", "site_admin": false}, "committer": {"login": "LegionMammal978", "id": 7880963, "node_id": "MDQ6VXNlcjc4ODA5NjM=", "avatar_url": "https://avatars.githubusercontent.com/u/7880963?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LegionMammal978", "html_url": "https://github.com/LegionMammal978", "followers_url": "https://api.github.com/users/LegionMammal978/followers", "following_url": "https://api.github.com/users/LegionMammal978/following{/other_user}", "gists_url": "https://api.github.com/users/LegionMammal978/gists{/gist_id}", "starred_url": "https://api.github.com/users/LegionMammal978/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LegionMammal978/subscriptions", "organizations_url": "https://api.github.com/users/LegionMammal978/orgs", "repos_url": "https://api.github.com/users/LegionMammal978/repos", "events_url": "https://api.github.com/users/LegionMammal978/events{/privacy}", "received_events_url": "https://api.github.com/users/LegionMammal978/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d594910a2da12f158477b4c7281716f535cfa3de", "url": "https://api.github.com/repos/rust-lang/rust/commits/d594910a2da12f158477b4c7281716f535cfa3de", "html_url": "https://github.com/rust-lang/rust/commit/d594910a2da12f158477b4c7281716f535cfa3de"}], "stats": {"total": 33, "additions": 16, "deletions": 17}, "files": [{"sha": "baafa74b13146b9e5c9254791112df97ac6575d9", "filename": "compiler/rustc_codegen_ssa/src/back/symbol_export.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eaf39cbd9e37e705664dcf0e1ca1042913cf521a/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fsymbol_export.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaf39cbd9e37e705664dcf0e1ca1042913cf521a/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fsymbol_export.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fsymbol_export.rs?ref=eaf39cbd9e37e705664dcf0e1ca1042913cf521a", "patch": "@@ -154,7 +154,7 @@ fn is_reachable_non_generic_provider_extern(tcx: TyCtxt<'_>, def_id: DefId) -> b\n     tcx.reachable_non_generics(def_id.krate).contains_key(&def_id)\n }\n \n-fn exported_symbols_provider_local(\n+fn exported_symbols_provider_local<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     cnum: CrateNum,\n ) -> &'tcx [(ExportedSymbol<'tcx>, SymbolExportLevel)] {"}, {"sha": "1dac528481d8c25690ec96d447295c99c9879b04", "filename": "compiler/rustc_codegen_ssa/src/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eaf39cbd9e37e705664dcf0e1ca1042913cf521a/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaf39cbd9e37e705664dcf0e1ca1042913cf521a/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs?ref=eaf39cbd9e37e705664dcf0e1ca1042913cf521a", "patch": "@@ -486,7 +486,7 @@ fn get_argc_argv<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>>(\n \n pub fn codegen_crate<B: ExtraBackendMethods>(\n     backend: B,\n-    tcx: TyCtxt<'tcx>,\n+    tcx: TyCtxt<'_>,\n     target_cpu: String,\n     metadata: EncodedMetadata,\n     need_metadata_module: bool,"}, {"sha": "1a6495cb15cf28fe6df5e080f4266a25973a6f5a", "filename": "compiler/rustc_codegen_ssa/src/coverageinfo/map.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/eaf39cbd9e37e705664dcf0e1ca1042913cf521a/compiler%2Frustc_codegen_ssa%2Fsrc%2Fcoverageinfo%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaf39cbd9e37e705664dcf0e1ca1042913cf521a/compiler%2Frustc_codegen_ssa%2Fsrc%2Fcoverageinfo%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fcoverageinfo%2Fmap.rs?ref=eaf39cbd9e37e705664dcf0e1ca1042913cf521a", "patch": "@@ -150,9 +150,9 @@ impl<'tcx> FunctionCoverage<'tcx> {\n     /// Generate an array of CounterExpressions, and an iterator over all `Counter`s and their\n     /// associated `Regions` (from which the LLVM-specific `CoverageMapGenerator` will create\n     /// `CounterMappingRegion`s.\n-    pub fn get_expressions_and_counter_regions<'a>(\n-        &'a self,\n-    ) -> (Vec<CounterExpression>, impl Iterator<Item = (Counter, &'a CodeRegion)>) {\n+    pub fn get_expressions_and_counter_regions(\n+        &self,\n+    ) -> (Vec<CounterExpression>, impl Iterator<Item = (Counter, &CodeRegion)>) {\n         assert!(\n             self.source_hash != 0 || !self.is_used,\n             \"No counters provided the source_hash for used function: {:?}\",\n@@ -168,7 +168,7 @@ impl<'tcx> FunctionCoverage<'tcx> {\n         (counter_expressions, counter_regions)\n     }\n \n-    fn counter_regions<'a>(&'a self) -> impl Iterator<Item = (Counter, &'a CodeRegion)> {\n+    fn counter_regions(&self) -> impl Iterator<Item = (Counter, &CodeRegion)> {\n         self.counters.iter_enumerated().filter_map(|(index, entry)| {\n             // Option::map() will return None to filter out missing counters. This may happen\n             // if, for example, a MIR-instrumented counter is removed during an optimization.\n@@ -177,8 +177,8 @@ impl<'tcx> FunctionCoverage<'tcx> {\n     }\n \n     fn expressions_with_regions(\n-        &'a self,\n-    ) -> (Vec<CounterExpression>, impl Iterator<Item = (Counter, &'a CodeRegion)>) {\n+        &self,\n+    ) -> (Vec<CounterExpression>, impl Iterator<Item = (Counter, &CodeRegion)>) {\n         let mut counter_expressions = Vec::with_capacity(self.expressions.len());\n         let mut expression_regions = Vec::with_capacity(self.expressions.len());\n         let mut new_indexes = IndexVec::from_elem_n(None, self.expressions.len());\n@@ -336,7 +336,7 @@ impl<'tcx> FunctionCoverage<'tcx> {\n         (counter_expressions, expression_regions.into_iter())\n     }\n \n-    fn unreachable_regions<'a>(&'a self) -> impl Iterator<Item = (Counter, &'a CodeRegion)> {\n+    fn unreachable_regions(&self) -> impl Iterator<Item = (Counter, &CodeRegion)> {\n         self.unreachable_regions.iter().map(|region| (Counter::zero(), region))\n     }\n "}, {"sha": "b03124769a06febbd7631316eb208093c266a819", "filename": "compiler/rustc_codegen_ssa/src/debuginfo/type_names.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/eaf39cbd9e37e705664dcf0e1ca1042913cf521a/compiler%2Frustc_codegen_ssa%2Fsrc%2Fdebuginfo%2Ftype_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaf39cbd9e37e705664dcf0e1ca1042913cf521a/compiler%2Frustc_codegen_ssa%2Fsrc%2Fdebuginfo%2Ftype_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fdebuginfo%2Ftype_names.rs?ref=eaf39cbd9e37e705664dcf0e1ca1042913cf521a", "patch": "@@ -376,7 +376,7 @@ fn push_debuginfo_type_name<'tcx>(\n     // format (natvis) is able to understand enums and render the active variant correctly in the\n     // debugger. For more information, look in `src/etc/natvis/intrinsic.natvis` and\n     // `EnumMemberDescriptionFactor::create_member_descriptions`.\n-    fn msvc_enum_fallback(\n+    fn msvc_enum_fallback<'tcx>(\n         tcx: TyCtxt<'tcx>,\n         ty: Ty<'tcx>,\n         def: &AdtDef,\n@@ -496,7 +496,7 @@ pub fn compute_debuginfo_vtable_name<'tcx>(\n     vtable_name\n }\n \n-pub fn push_item_name(tcx: TyCtxt<'tcx>, def_id: DefId, qualified: bool, output: &mut String) {\n+pub fn push_item_name(tcx: TyCtxt<'_>, def_id: DefId, qualified: bool, output: &mut String) {\n     let def_key = tcx.def_key(def_id);\n     if qualified {\n         if let Some(parent) = def_key.parent {\n@@ -509,7 +509,7 @@ pub fn push_item_name(tcx: TyCtxt<'tcx>, def_id: DefId, qualified: bool, output:\n }\n \n fn push_unqualified_item_name(\n-    tcx: TyCtxt<'tcx>,\n+    tcx: TyCtxt<'_>,\n     def_id: DefId,\n     disambiguated_data: DisambiguatedDefPathData,\n     output: &mut String,"}, {"sha": "350199f4e98c29ec99701a85e0aa856ee6643074", "filename": "compiler/rustc_codegen_ssa/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/eaf39cbd9e37e705664dcf0e1ca1042913cf521a/compiler%2Frustc_codegen_ssa%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaf39cbd9e37e705664dcf0e1ca1042913cf521a/compiler%2Frustc_codegen_ssa%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Flib.rs?ref=eaf39cbd9e37e705664dcf0e1ca1042913cf521a", "patch": "@@ -2,7 +2,6 @@\n #![feature(bool_to_option)]\n #![feature(box_patterns)]\n #![feature(try_blocks)]\n-#![feature(in_band_lifetimes)]\n #![feature(let_else)]\n #![feature(once_cell)]\n #![feature(nll)]"}, {"sha": "b1b3f1d6d81b97d3689da5da1ea21f03ed848af8", "filename": "compiler/rustc_codegen_ssa/src/mir/analyze.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eaf39cbd9e37e705664dcf0e1ca1042913cf521a/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fanalyze.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaf39cbd9e37e705664dcf0e1ca1042913cf521a/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fanalyze.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fanalyze.rs?ref=eaf39cbd9e37e705664dcf0e1ca1042913cf521a", "patch": "@@ -73,7 +73,7 @@ struct LocalAnalyzer<'mir, 'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> {\n     locals: IndexVec<mir::Local, LocalKind>,\n }\n \n-impl<Bx: BuilderMethods<'a, 'tcx>> LocalAnalyzer<'mir, 'a, 'tcx, Bx> {\n+impl<'mir, 'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> LocalAnalyzer<'mir, 'a, 'tcx, Bx> {\n     fn assign(&mut self, local: mir::Local, location: Location) {\n         let kind = &mut self.locals[local];\n         match *kind {"}, {"sha": "0c526ff13f2bae88cdf9df75230f47fc3c60ec4a", "filename": "compiler/rustc_codegen_ssa/src/mir/operand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eaf39cbd9e37e705664dcf0e1ca1042913cf521a/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaf39cbd9e37e705664dcf0e1ca1042913cf521a/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Foperand.rs?ref=eaf39cbd9e37e705664dcf0e1ca1042913cf521a", "patch": "@@ -47,7 +47,7 @@ pub struct OperandRef<'tcx, V> {\n     pub layout: TyAndLayout<'tcx>,\n }\n \n-impl<V: CodegenObject> fmt::Debug for OperandRef<'tcx, V> {\n+impl<V: CodegenObject> fmt::Debug for OperandRef<'_, V> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         write!(f, \"OperandRef({:?} @ {:?})\", self.val, self.layout)\n     }"}, {"sha": "5d3f07317a37b0ad36dd40be80e578e7985ab644", "filename": "compiler/rustc_codegen_ssa/src/traits/type_.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eaf39cbd9e37e705664dcf0e1ca1042913cf521a/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Ftype_.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaf39cbd9e37e705664dcf0e1ca1042913cf521a/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Ftype_.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Ftype_.rs?ref=eaf39cbd9e37e705664dcf0e1ca1042913cf521a", "patch": "@@ -97,7 +97,7 @@ pub trait DerivedTypeMethods<'tcx>: BaseTypeMethods<'tcx> + MiscMethods<'tcx> {\n     }\n }\n \n-impl<T> DerivedTypeMethods<'tcx> for T where Self: BaseTypeMethods<'tcx> + MiscMethods<'tcx> {}\n+impl<'tcx, T> DerivedTypeMethods<'tcx> for T where Self: BaseTypeMethods<'tcx> + MiscMethods<'tcx> {}\n \n pub trait LayoutTypeMethods<'tcx>: Backend<'tcx> {\n     fn backend_type(&self, layout: TyAndLayout<'tcx>) -> Self::Type;\n@@ -135,4 +135,4 @@ pub trait ArgAbiMethods<'tcx>: HasCodegen<'tcx> {\n \n pub trait TypeMethods<'tcx>: DerivedTypeMethods<'tcx> + LayoutTypeMethods<'tcx> {}\n \n-impl<T> TypeMethods<'tcx> for T where Self: DerivedTypeMethods<'tcx> + LayoutTypeMethods<'tcx> {}\n+impl<'tcx, T> TypeMethods<'tcx> for T where Self: DerivedTypeMethods<'tcx> + LayoutTypeMethods<'tcx> {}"}]}