{"sha": "c372b1470109547e37dcc29ffd4723ac9f66f15d", "node_id": "C_kwDOAAsO6NoAKGMzNzJiMTQ3MDEwOTU0N2UzN2RjYzI5ZmZkNDcyM2FjOWY2NmYxNWQ", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-11-29T10:34:19Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-11-29T10:34:19Z"}, "message": "Auto merge of #104947 - cjgillot:verify-hir-nest, r=oli-obk\n\nVerify that HIR parenting and Def parenting match.\n\nThis relationship is relied upon for `tcx.hir_owner_parent` query to return an accurate result.", "tree": {"sha": "b83048b46c106ca7a6a6db07f9d59db1ae5f7e60", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b83048b46c106ca7a6a6db07f9d59db1ae5f7e60"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c372b1470109547e37dcc29ffd4723ac9f66f15d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c372b1470109547e37dcc29ffd4723ac9f66f15d", "html_url": "https://github.com/rust-lang/rust/commit/c372b1470109547e37dcc29ffd4723ac9f66f15d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c372b1470109547e37dcc29ffd4723ac9f66f15d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0c6b88dbbaaf0e1a1240110ad95179417603dba3", "url": "https://api.github.com/repos/rust-lang/rust/commits/0c6b88dbbaaf0e1a1240110ad95179417603dba3", "html_url": "https://github.com/rust-lang/rust/commit/0c6b88dbbaaf0e1a1240110ad95179417603dba3"}, {"sha": "b22418eac3be6a163d876c8bdb0d13663d592a22", "url": "https://api.github.com/repos/rust-lang/rust/commits/b22418eac3be6a163d876c8bdb0d13663d592a22", "html_url": "https://github.com/rust-lang/rust/commit/b22418eac3be6a163d876c8bdb0d13663d592a22"}], "stats": {"total": 86, "additions": 54, "deletions": 32}, "files": [{"sha": "fe0bd43815d7f4393d71c2ec91c033f19557964b", "filename": "compiler/rustc_ast_lowering/src/index.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c372b1470109547e37dcc29ffd4723ac9f66f15d/compiler%2Frustc_ast_lowering%2Fsrc%2Findex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c372b1470109547e37dcc29ffd4723ac9f66f15d/compiler%2Frustc_ast_lowering%2Fsrc%2Findex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Findex.rs?ref=c372b1470109547e37dcc29ffd4723ac9f66f15d", "patch": "@@ -77,7 +77,7 @@ impl<'a, 'hir> NodeCollector<'a, 'hir> {\n             if hir_id.owner != self.owner {\n                 span_bug!(\n                     span,\n-                    \"inconsistent DepNode at `{:?}` for `{:?}`: \\\n+                    \"inconsistent HirId at `{:?}` for `{:?}`: \\\n                      current_dep_node_owner={} ({:?}), hir_id.owner={} ({:?})\",\n                     self.source_map.span_to_diagnostic_string(span),\n                     node,"}, {"sha": "02fd03c02839a69f7eb6e847d14248ebc06470c4", "filename": "compiler/rustc_middle/src/hir/mod.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c372b1470109547e37dcc29ffd4723ac9f66f15d/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c372b1470109547e37dcc29ffd4723ac9f66f15d/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmod.rs?ref=c372b1470109547e37dcc29ffd4723ac9f66f15d", "patch": "@@ -133,13 +133,8 @@ pub fn provide(providers: &mut Providers) {\n         // Accessing the local_parent is ok since its value is hashed as part of `id`'s DefPathHash.\n         tcx.opt_local_parent(id.def_id).map_or(CRATE_HIR_ID, |parent| {\n             let mut parent_hir_id = tcx.hir().local_def_id_to_hir_id(parent);\n-            if let Some(local_id) = tcx.hir_crate(()).owners[parent_hir_id.owner.def_id]\n-                .unwrap()\n-                .parenting\n-                .get(&id.def_id)\n-            {\n-                parent_hir_id.local_id = *local_id;\n-            }\n+            parent_hir_id.local_id =\n+                tcx.hir_crate(()).owners[parent_hir_id.owner.def_id].unwrap().parenting[&id.def_id];\n             parent_hir_id\n         })\n     };"}, {"sha": "d143adb2eb9417c50e879e693296dedf428fba94", "filename": "compiler/rustc_passes/src/hir_id_validator.rs", "status": "modified", "additions": 51, "deletions": 24, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/c372b1470109547e37dcc29ffd4723ac9f66f15d/compiler%2Frustc_passes%2Fsrc%2Fhir_id_validator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c372b1470109547e37dcc29ffd4723ac9f66f15d/compiler%2Frustc_passes%2Fsrc%2Fhir_id_validator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fhir_id_validator.rs?ref=c372b1470109547e37dcc29ffd4723ac9f66f15d", "patch": "@@ -1,11 +1,11 @@\n use rustc_data_structures::sync::Lock;\n use rustc_hir as hir;\n+use rustc_hir::def_id::LocalDefId;\n use rustc_hir::intravisit;\n use rustc_hir::{HirId, ItemLocalId};\n use rustc_index::bit_set::GrowableBitSet;\n-use rustc_middle::hir::map::Map;\n use rustc_middle::hir::nested_filter;\n-use rustc_middle::ty::TyCtxt;\n+use rustc_middle::ty::{DefIdTree, TyCtxt};\n \n pub fn check_crate(tcx: TyCtxt<'_>) {\n     tcx.dep_graph.assert_ignored();\n@@ -17,11 +17,10 @@ pub fn check_crate(tcx: TyCtxt<'_>) {\n     #[cfg(debug_assertions)]\n     {\n         let errors = Lock::new(Vec::new());\n-        let hir_map = tcx.hir();\n \n-        hir_map.par_for_each_module(|module_id| {\n+        tcx.hir().par_for_each_module(|module_id| {\n             let mut v = HirIdValidator {\n-                hir_map,\n+                tcx,\n                 owner: None,\n                 hir_ids_seen: Default::default(),\n                 errors: &errors,\n@@ -40,20 +39,15 @@ pub fn check_crate(tcx: TyCtxt<'_>) {\n }\n \n struct HirIdValidator<'a, 'hir> {\n-    hir_map: Map<'hir>,\n+    tcx: TyCtxt<'hir>,\n     owner: Option<hir::OwnerId>,\n     hir_ids_seen: GrowableBitSet<ItemLocalId>,\n     errors: &'a Lock<Vec<String>>,\n }\n \n impl<'a, 'hir> HirIdValidator<'a, 'hir> {\n-    fn new_visitor(&self, hir_map: Map<'hir>) -> HirIdValidator<'a, 'hir> {\n-        HirIdValidator {\n-            hir_map,\n-            owner: None,\n-            hir_ids_seen: Default::default(),\n-            errors: self.errors,\n-        }\n+    fn new_visitor(&self, tcx: TyCtxt<'hir>) -> HirIdValidator<'a, 'hir> {\n+        HirIdValidator { tcx, owner: None, hir_ids_seen: Default::default(), errors: self.errors }\n     }\n \n     #[cold]\n@@ -96,36 +90,69 @@ impl<'a, 'hir> HirIdValidator<'a, 'hir> {\n                 missing_items.push(format!(\n                     \"[local_id: {}, owner: {}]\",\n                     local_id,\n-                    self.hir_map.def_path(owner.def_id).to_string_no_crate_verbose()\n+                    self.tcx.hir().def_path(owner.def_id).to_string_no_crate_verbose()\n                 ));\n             }\n             self.error(|| {\n                 format!(\n                     \"ItemLocalIds not assigned densely in {}. \\\n                 Max ItemLocalId = {}, missing IDs = {:#?}; seens IDs = {:#?}\",\n-                    self.hir_map.def_path(owner.def_id).to_string_no_crate_verbose(),\n+                    self.tcx.hir().def_path(owner.def_id).to_string_no_crate_verbose(),\n                     max,\n                     missing_items,\n                     self.hir_ids_seen\n                         .iter()\n                         .map(|local_id| HirId { owner, local_id })\n-                        .map(|h| format!(\"({:?} {})\", h, self.hir_map.node_to_string(h)))\n+                        .map(|h| format!(\"({:?} {})\", h, self.tcx.hir().node_to_string(h)))\n                         .collect::<Vec<_>>()\n                 )\n             });\n         }\n     }\n+\n+    fn check_nested_id(&mut self, id: LocalDefId) {\n+        let Some(owner) = self.owner else { return };\n+        let def_parent = self.tcx.local_parent(id);\n+        let def_parent_hir_id = self.tcx.local_def_id_to_hir_id(def_parent);\n+        if def_parent_hir_id.owner != owner {\n+            self.error(|| {\n+                format!(\n+                    \"inconsistent Def parent at `{:?}` for `{:?}`:\\nexpected={:?}\\nfound={:?}\",\n+                    self.tcx.def_span(id),\n+                    id,\n+                    owner,\n+                    def_parent_hir_id\n+                )\n+            });\n+        }\n+    }\n }\n \n impl<'a, 'hir> intravisit::Visitor<'hir> for HirIdValidator<'a, 'hir> {\n     type NestedFilter = nested_filter::OnlyBodies;\n \n     fn nested_visit_map(&mut self) -> Self::Map {\n-        self.hir_map\n+        self.tcx.hir()\n+    }\n+\n+    fn visit_nested_item(&mut self, id: hir::ItemId) {\n+        self.check_nested_id(id.owner_id.def_id);\n+    }\n+\n+    fn visit_nested_trait_item(&mut self, id: hir::TraitItemId) {\n+        self.check_nested_id(id.owner_id.def_id);\n+    }\n+\n+    fn visit_nested_impl_item(&mut self, id: hir::ImplItemId) {\n+        self.check_nested_id(id.owner_id.def_id);\n+    }\n+\n+    fn visit_nested_foreign_item(&mut self, id: hir::ForeignItemId) {\n+        self.check_nested_id(id.owner_id.def_id);\n     }\n \n     fn visit_item(&mut self, i: &'hir hir::Item<'hir>) {\n-        let mut inner_visitor = self.new_visitor(self.hir_map);\n+        let mut inner_visitor = self.new_visitor(self.tcx);\n         inner_visitor.check(i.owner_id, |this| intravisit::walk_item(this, i));\n     }\n \n@@ -136,9 +163,9 @@ impl<'a, 'hir> intravisit::Visitor<'hir> for HirIdValidator<'a, 'hir> {\n             self.error(|| {\n                 format!(\n                     \"HirIdValidator: The recorded owner of {} is {} instead of {}\",\n-                    self.hir_map.node_to_string(hir_id),\n-                    self.hir_map.def_path(hir_id.owner.def_id).to_string_no_crate_verbose(),\n-                    self.hir_map.def_path(owner.def_id).to_string_no_crate_verbose()\n+                    self.tcx.hir().node_to_string(hir_id),\n+                    self.tcx.hir().def_path(hir_id.owner.def_id).to_string_no_crate_verbose(),\n+                    self.tcx.hir().def_path(owner.def_id).to_string_no_crate_verbose()\n                 )\n             });\n         }\n@@ -147,17 +174,17 @@ impl<'a, 'hir> intravisit::Visitor<'hir> for HirIdValidator<'a, 'hir> {\n     }\n \n     fn visit_foreign_item(&mut self, i: &'hir hir::ForeignItem<'hir>) {\n-        let mut inner_visitor = self.new_visitor(self.hir_map);\n+        let mut inner_visitor = self.new_visitor(self.tcx);\n         inner_visitor.check(i.owner_id, |this| intravisit::walk_foreign_item(this, i));\n     }\n \n     fn visit_trait_item(&mut self, i: &'hir hir::TraitItem<'hir>) {\n-        let mut inner_visitor = self.new_visitor(self.hir_map);\n+        let mut inner_visitor = self.new_visitor(self.tcx);\n         inner_visitor.check(i.owner_id, |this| intravisit::walk_trait_item(this, i));\n     }\n \n     fn visit_impl_item(&mut self, i: &'hir hir::ImplItem<'hir>) {\n-        let mut inner_visitor = self.new_visitor(self.hir_map);\n+        let mut inner_visitor = self.new_visitor(self.tcx);\n         inner_visitor.check(i.owner_id, |this| intravisit::walk_impl_item(this, i));\n     }\n }"}]}