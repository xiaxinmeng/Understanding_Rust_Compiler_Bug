{"sha": "f60e58e57580d47e82a374bad73214b6bfec085a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY2MGU1OGU1NzU4MGQ0N2U4MmEzNzRiYWQ3MzIxNGI2YmZlYzA4NWE=", "commit": {"author": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2019-09-26T22:28:02Z"}, "committer": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2019-09-28T15:47:15Z"}, "message": "StableHasher does not need to be generic over the Result type", "tree": {"sha": "9e363de86f76a56490f2b4c30ca4d88c3b3c1620", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9e363de86f76a56490f2b4c30ca4d88c3b3c1620"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f60e58e57580d47e82a374bad73214b6bfec085a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f60e58e57580d47e82a374bad73214b6bfec085a", "html_url": "https://github.com/rust-lang/rust/commit/f60e58e57580d47e82a374bad73214b6bfec085a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f60e58e57580d47e82a374bad73214b6bfec085a/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f3c8eba643a815d720e7f20699b3dca144c845c4", "url": "https://api.github.com/repos/rust-lang/rust/commits/f3c8eba643a815d720e7f20699b3dca144c845c4", "html_url": "https://github.com/rust-lang/rust/commit/f3c8eba643a815d720e7f20699b3dca144c845c4"}], "stats": {"total": 18, "additions": 7, "deletions": 11}, "files": [{"sha": "7c54a092af04c19d5f84c41fdc0a095aaae38a59", "filename": "src/librustc_data_structures/stable_hasher.rs", "status": "modified", "additions": 7, "deletions": 11, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/f60e58e57580d47e82a374bad73214b6bfec085a/src%2Flibrustc_data_structures%2Fstable_hasher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f60e58e57580d47e82a374bad73214b6bfec085a/src%2Flibrustc_data_structures%2Fstable_hasher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fstable_hasher.rs?ref=f60e58e57580d47e82a374bad73214b6bfec085a", "patch": "@@ -13,12 +13,11 @@ use crate::bit_set;\n /// To that end we always convert integers to little-endian format before\n /// hashing and the architecture dependent `isize` and `usize` types are\n /// extended to 64 bits if needed.\n-pub struct StableHasher<W> {\n+pub struct StableHasher {\n     state: SipHasher128,\n-    width: PhantomData<W>,\n }\n \n-impl<W: StableHasherResult> ::std::fmt::Debug for StableHasher<W> {\n+impl ::std::fmt::Debug for StableHasher {\n     fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {\n         write!(f, \"{:?}\", self.state)\n     }\n@@ -28,15 +27,14 @@ pub trait StableHasherResult: Sized {\n     fn finish(hasher: StableHasher<Self>) -> Self;\n }\n \n-impl<W: StableHasherResult> StableHasher<W> {\n+impl StableHasher {\n     pub fn new() -> Self {\n         StableHasher {\n             state: SipHasher128::new_with_keys(0, 0),\n-            width: PhantomData,\n         }\n     }\n \n-    pub fn finish(self) -> W {\n+    pub fn finish<W: StableHasherResult>(self) -> W {\n         W::finish(self)\n     }\n }\n@@ -54,14 +52,14 @@ impl StableHasherResult for u64 {\n     }\n }\n \n-impl<W> StableHasher<W> {\n+impl StableHasher {\n     #[inline]\n     pub fn finalize(self) -> (u64, u64) {\n         self.state.finish128()\n     }\n }\n \n-impl<W> Hasher for StableHasher<W> {\n+impl Hasher for StableHasher {\n     fn finish(&self) -> u64 {\n         panic!(\"use StableHasher::finalize instead\");\n     }\n@@ -165,9 +163,7 @@ impl<W> Hasher for StableHasher<W> {\n ///   `StableHasher` takes care of endianness and `isize`/`usize` platform\n ///   differences.\n pub trait HashStable<CTX> {\n-    fn hash_stable<W: StableHasherResult>(&self,\n-                                          hcx: &mut CTX,\n-                                          hasher: &mut StableHasher<W>);\n+    fn hash_stable(&self, hcx: &mut CTX, hasher: &mut StableHasher);\n }\n \n /// Implement this for types that can be turned into stable keys like, for"}]}