{"sha": "57c568a9186197622bdd24aea522519ad647d5ff", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU3YzU2OGE5MTg2MTk3NjIyYmRkMjRhZWE1MjI1MTlhZDY0N2Q1ZmY=", "commit": {"author": {"name": "Joshua Nelson", "email": "joshua@yottadb.com", "date": "2021-03-01T16:24:58Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-03-01T16:24:58Z"}, "message": "Rollup merge of #81210 - ssomers:btree_fix_node_size_test, r=Mark-Simulacrum\n\nBTreeMap: correct node size test case for choices of B\n\nr? `@Mark-Simulacrum`", "tree": {"sha": "57685b338b033dbcf2a0a9a0b80c88da529cf92f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/57685b338b033dbcf2a0a9a0b80c88da529cf92f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/57c568a9186197622bdd24aea522519ad647d5ff", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgPRVaCRBK7hj4Ov3rIwAAdHIIAKg/rNK10JCFUdSs9jd6fKWE\nZbFjildcZGLrrx3kaoiKpWismP98poyHtwe1r60ZnzwlepYGneRpRBwi/CnFJ7WQ\nkcoj2RrHB1eKzextWp8t7TTL5/85NlQN7aG/tAsw23ICERS8WGsOZQh1jbKbboNy\nHfRBb2e/OJ27+zl8mhQKJqiXX9+1pPNRP5zxjHJRBbJSh+Og/iaXt2F28oRJYOcM\nG2I1tPtzGpr1Mx6Rueos61yGfyIqNxnRRNmq+84adSHQfhPZ9CFFwnTP57thdzvl\nDbBU3QVKJUtINZsGNa4uHOB0cvkIaiTbZq92c0pXjVR3kcZhW6wPQoLwSIeLaEY=\n=XzHc\n-----END PGP SIGNATURE-----\n", "payload": "tree 57685b338b033dbcf2a0a9a0b80c88da529cf92f\nparent 09db05762b283bed62d4f92729cfee4646519833\nparent d9daedd433c7e58e21f9edb693142af6d605d040\nauthor Joshua Nelson <joshua@yottadb.com> 1614615898 -0500\ncommitter GitHub <noreply@github.com> 1614615898 -0500\n\nRollup merge of #81210 - ssomers:btree_fix_node_size_test, r=Mark-Simulacrum\n\nBTreeMap: correct node size test case for choices of B\n\nr? `@Mark-Simulacrum`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/57c568a9186197622bdd24aea522519ad647d5ff", "html_url": "https://github.com/rust-lang/rust/commit/57c568a9186197622bdd24aea522519ad647d5ff", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/57c568a9186197622bdd24aea522519ad647d5ff/comments", "author": null, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "09db05762b283bed62d4f92729cfee4646519833", "url": "https://api.github.com/repos/rust-lang/rust/commits/09db05762b283bed62d4f92729cfee4646519833", "html_url": "https://github.com/rust-lang/rust/commit/09db05762b283bed62d4f92729cfee4646519833"}, {"sha": "d9daedd433c7e58e21f9edb693142af6d605d040", "url": "https://api.github.com/repos/rust-lang/rust/commits/d9daedd433c7e58e21f9edb693142af6d605d040", "html_url": "https://github.com/rust-lang/rust/commit/d9daedd433c7e58e21f9edb693142af6d605d040"}], "stats": {"total": 87, "additions": 6, "deletions": 81}, "files": [{"sha": "21a0fb844e8c4ebff14a42ccc8351d28487b99dc", "filename": "library/alloc/benches/btree/map.rs", "status": "modified", "additions": 0, "deletions": 76, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/57c568a9186197622bdd24aea522519ad647d5ff/library%2Falloc%2Fbenches%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c568a9186197622bdd24aea522519ad647d5ff/library%2Falloc%2Fbenches%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fbenches%2Fbtree%2Fmap.rs?ref=57c568a9186197622bdd24aea522519ad647d5ff", "patch": "@@ -296,11 +296,6 @@ fn fat_val_map(n: usize) -> BTreeMap<usize, [usize; FAT]> {\n     (0..n).map(|i| (i, [i; FAT])).collect::<BTreeMap<_, _>>()\n }\n \n-// The returned map has large keys and values.\n-fn fat_map(n: usize) -> BTreeMap<[usize; FAT], [usize; FAT]> {\n-    (0..n).map(|i| ([i; FAT], [i; FAT])).collect::<BTreeMap<_, _>>()\n-}\n-\n #[bench]\n pub fn clone_slim_100(b: &mut Bencher) {\n     let src = slim_map(100);\n@@ -513,74 +508,3 @@ pub fn clone_fat_val_100_and_remove_half(b: &mut Bencher) {\n         map\n     })\n }\n-\n-#[bench]\n-pub fn clone_fat_100(b: &mut Bencher) {\n-    let src = fat_map(100);\n-    b.iter(|| src.clone())\n-}\n-\n-#[bench]\n-pub fn clone_fat_100_and_clear(b: &mut Bencher) {\n-    let src = fat_map(100);\n-    b.iter(|| src.clone().clear())\n-}\n-\n-#[bench]\n-pub fn clone_fat_100_and_drain_all(b: &mut Bencher) {\n-    let src = fat_map(100);\n-    b.iter(|| src.clone().drain_filter(|_, _| true).count())\n-}\n-\n-#[bench]\n-pub fn clone_fat_100_and_drain_half(b: &mut Bencher) {\n-    let src = fat_map(100);\n-    b.iter(|| {\n-        let mut map = src.clone();\n-        assert_eq!(map.drain_filter(|i, _| i[0] % 2 == 0).count(), 100 / 2);\n-        assert_eq!(map.len(), 100 / 2);\n-    })\n-}\n-\n-#[bench]\n-pub fn clone_fat_100_and_into_iter(b: &mut Bencher) {\n-    let src = fat_map(100);\n-    b.iter(|| src.clone().into_iter().count())\n-}\n-\n-#[bench]\n-pub fn clone_fat_100_and_pop_all(b: &mut Bencher) {\n-    let src = fat_map(100);\n-    b.iter(|| {\n-        let mut map = src.clone();\n-        while map.pop_first().is_some() {}\n-        map\n-    });\n-}\n-\n-#[bench]\n-pub fn clone_fat_100_and_remove_all(b: &mut Bencher) {\n-    let src = fat_map(100);\n-    b.iter(|| {\n-        let mut map = src.clone();\n-        while let Some(elt) = map.iter().map(|(&i, _)| i).next() {\n-            let v = map.remove(&elt);\n-            debug_assert!(v.is_some());\n-        }\n-        map\n-    });\n-}\n-\n-#[bench]\n-pub fn clone_fat_100_and_remove_half(b: &mut Bencher) {\n-    let src = fat_map(100);\n-    b.iter(|| {\n-        let mut map = src.clone();\n-        for i in (0..100).step_by(2) {\n-            let v = map.remove(&[i; FAT]);\n-            debug_assert!(v.is_some());\n-        }\n-        assert_eq!(map.len(), 100 / 2);\n-        map\n-    })\n-}"}, {"sha": "4e48db7f49305edba67cdd34d7823fa05ea5601a", "filename": "library/alloc/src/collections/btree/map/tests.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/57c568a9186197622bdd24aea522519ad647d5ff/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c568a9186197622bdd24aea522519ad647d5ff/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap%2Ftests.rs?ref=57c568a9186197622bdd24aea522519ad647d5ff", "patch": "@@ -136,8 +136,9 @@ impl<'a, K: 'a, V: 'a> NodeRef<marker::Immut<'a>, K, V, marker::LeafOrInternal>\n     }\n }\n \n-// Tests our value of MIN_INSERTS_HEIGHT_2. It may change according to the\n-// implementation of insertion, but it's best to be aware of when it does.\n+// Tests our value of MIN_INSERTS_HEIGHT_2. Failure may mean you just need to\n+// adapt that value to match a change in node::CAPACITY or the choices made\n+// during insertion, otherwise other test cases may fail or be less useful.\n #[test]\n fn test_levels() {\n     let mut map = BTreeMap::new();"}, {"sha": "5e4473546228270ebf23cff1b0cde245ee4ebea5", "filename": "library/alloc/src/collections/btree/node/tests.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/57c568a9186197622bdd24aea522519ad647d5ff/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnode%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c568a9186197622bdd24aea522519ad647d5ff/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnode%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnode%2Ftests.rs?ref=57c568a9186197622bdd24aea522519ad647d5ff", "patch": "@@ -95,7 +95,7 @@ fn test_partial_eq() {\n #[cfg(target_arch = \"x86_64\")]\n fn test_sizes() {\n     assert_eq!(core::mem::size_of::<LeafNode<(), ()>>(), 16);\n-    assert_eq!(core::mem::size_of::<LeafNode<i64, i64>>(), 16 + CAPACITY * 8 * 2);\n-    assert_eq!(core::mem::size_of::<InternalNode<(), ()>>(), 112);\n-    assert_eq!(core::mem::size_of::<InternalNode<i64, i64>>(), 112 + CAPACITY * 8 * 2);\n+    assert_eq!(core::mem::size_of::<LeafNode<i64, i64>>(), 16 + CAPACITY * 2 * 8);\n+    assert_eq!(core::mem::size_of::<InternalNode<(), ()>>(), 16 + (CAPACITY + 1) * 8);\n+    assert_eq!(core::mem::size_of::<InternalNode<i64, i64>>(), 16 + (CAPACITY * 3 + 1) * 8);\n }"}]}