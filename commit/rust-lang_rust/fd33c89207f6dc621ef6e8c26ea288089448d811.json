{"sha": "fd33c89207f6dc621ef6e8c26ea288089448d811", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZkMzNjODkyMDdmNmRjNjIxZWY2ZThjMjZlYTI4ODA4OTQ0OGQ4MTE=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-12-28T15:15:19Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-12-28T15:17:43Z"}, "message": "switch to FileRange", "tree": {"sha": "7933988832041d364a0bab6a82061d5e33cc65e6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7933988832041d364a0bab6a82061d5e33cc65e6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fd33c89207f6dc621ef6e8c26ea288089448d811", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fd33c89207f6dc621ef6e8c26ea288089448d811", "html_url": "https://github.com/rust-lang/rust/commit/fd33c89207f6dc621ef6e8c26ea288089448d811", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fd33c89207f6dc621ef6e8c26ea288089448d811/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "02924174bb084d73cab67af6665ddf00e91983f6", "url": "https://api.github.com/repos/rust-lang/rust/commits/02924174bb084d73cab67af6665ddf00e91983f6", "html_url": "https://github.com/rust-lang/rust/commit/02924174bb084d73cab67af6665ddf00e91983f6"}], "stats": {"total": 52, "additions": 37, "deletions": 15}, "files": [{"sha": "5e1fbee18f041626f71db162a248109199a6dd26", "filename": "crates/ra_analysis/src/extend_selection.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/fd33c89207f6dc621ef6e8c26ea288089448d811/crates%2Fra_analysis%2Fsrc%2Fextend_selection.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd33c89207f6dc621ef6e8c26ea288089448d811/crates%2Fra_analysis%2Fsrc%2Fextend_selection.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fextend_selection.rs?ref=fd33c89207f6dc621ef6e8c26ea288089448d811", "patch": "@@ -0,0 +1,11 @@\n+use ra_db::SyntaxDatabase;\n+\n+use crate::{\n+    TextRange, FileRange,\n+    db::RootDatabase,\n+};\n+\n+pub(crate) fn extend_selection(db: &RootDatabase, frange: FileRange) -> TextRange {\n+    let file = db.source_file(frange.file_id);\n+    ra_editor::extend_selection(&file, frange.range).unwrap_or(frange.range)\n+}"}, {"sha": "98abe85233f5621aed6d14aa9fd45697799271bf", "filename": "crates/ra_analysis/src/lib.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fd33c89207f6dc621ef6e8c26ea288089448d811/crates%2Fra_analysis%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd33c89207f6dc621ef6e8c26ea288089448d811/crates%2Fra_analysis%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Flib.rs?ref=fd33c89207f6dc621ef6e8c26ea288089448d811", "patch": "@@ -14,9 +14,11 @@ mod db;\n mod imp;\n mod completion;\n mod symbol_index;\n-mod syntax_highlighting;\n pub mod mock_analysis;\n \n+mod extend_selection;\n+mod syntax_highlighting;\n+\n use std::{fmt, sync::Arc};\n \n use rustc_hash::FxHashMap;\n@@ -277,8 +279,8 @@ impl Analysis {\n     pub fn file_line_index(&self, file_id: FileId) -> Arc<LineIndex> {\n         self.imp.file_line_index(file_id)\n     }\n-    pub fn extend_selection(&self, file: &SourceFileNode, range: TextRange) -> TextRange {\n-        ra_editor::extend_selection(file, range).unwrap_or(range)\n+    pub fn extend_selection(&self, frange: FileRange) -> TextRange {\n+        extend_selection::extend_selection(&self.imp.db, frange)\n     }\n     pub fn matching_brace(&self, file: &SourceFileNode, offset: TextUnit) -> Option<TextUnit> {\n         ra_editor::matching_brace(file, offset)"}, {"sha": "3d56ccd9717a52f067469ab3caa6062dfa8a4c2f", "filename": "crates/ra_lsp_server/src/conv.rs", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/fd33c89207f6dc621ef6e8c26ea288089448d811/crates%2Fra_lsp_server%2Fsrc%2Fconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd33c89207f6dc621ef6e8c26ea288089448d811/crates%2Fra_lsp_server%2Fsrc%2Fconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fconv.rs?ref=fd33c89207f6dc621ef6e8c26ea288089448d811", "patch": "@@ -2,7 +2,7 @@ use languageserver_types::{\n     self, Location, Position, Range, SymbolKind, TextDocumentEdit, TextDocumentIdentifier,\n     TextDocumentItem, TextDocumentPositionParams, Url, VersionedTextDocumentIdentifier, InsertTextFormat,\n };\n-use ra_analysis::{FileId, FileSystemEdit, SourceChange, SourceFileEdit, FilePosition, CompletionItem, CompletionItemKind, InsertText};\n+use ra_analysis::{FileId, FileSystemEdit, SourceChange, SourceFileEdit, FilePosition,FileRange,  CompletionItem, CompletionItemKind, InsertText};\n use ra_editor::{LineCol, LineIndex, translate_offset_with_edit};\n use ra_text_edit::{AtomTextEdit, TextEdit};\n use ra_syntax::{SyntaxKind, TextRange, TextUnit};\n@@ -218,6 +218,17 @@ impl<'a> TryConvWith for &'a TextDocumentPositionParams {\n     }\n }\n \n+impl<'a> TryConvWith for (&'a TextDocumentIdentifier, Range) {\n+    type Ctx = ServerWorld;\n+    type Output = FileRange;\n+    fn try_conv_with(self, world: &ServerWorld) -> Result<FileRange> {\n+        let file_id = self.0.try_conv_with(world)?;\n+        let line_index = world.analysis().file_line_index(file_id);\n+        let range = self.1.conv_with(&line_index);\n+        Ok(FileRange { file_id, range })\n+    }\n+}\n+\n impl<T: TryConvWith> TryConvWith for Vec<T> {\n     type Ctx = <T as TryConvWith>::Ctx;\n     type Output = Vec<<T as TryConvWith>::Output>;"}, {"sha": "d6f3dbe28da2e5e41ea1604eb22a1d8fd598cdae", "filename": "crates/ra_lsp_server/src/main_loop/handlers.rs", "status": "modified", "additions": 9, "deletions": 11, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/fd33c89207f6dc621ef6e8c26ea288089448d811/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd33c89207f6dc621ef6e8c26ea288089448d811/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs?ref=fd33c89207f6dc621ef6e8c26ea288089448d811", "patch": "@@ -8,7 +8,7 @@ use languageserver_types::{\n     PrepareRenameResponse, RenameParams, SymbolInformation, TextDocumentIdentifier, TextEdit,\n     WorkspaceEdit, ParameterInformation, ParameterLabel, SignatureInformation, Hover, HoverContents,\n };\n-use ra_analysis::{FileId, FoldKind, Query, RunnableKind, FilePosition, Severity};\n+use ra_analysis::{FileId, FoldKind, Query, RunnableKind, FileRange, FilePosition, Severity};\n use ra_syntax::{TextUnit, text_utils::intersect};\n use ra_text_edit::text_utils::contains_offset_nonstrict;\n use rustc_hash::FxHashMap;\n@@ -33,13 +33,13 @@ pub fn handle_extend_selection(\n     params: req::ExtendSelectionParams,\n ) -> Result<req::ExtendSelectionResult> {\n     let file_id = params.text_document.try_conv_with(&world)?;\n-    let file = world.analysis().file_syntax(file_id);\n     let line_index = world.analysis().file_line_index(file_id);\n     let selections = params\n         .selections\n         .into_iter()\n         .map_conv_with(&line_index)\n-        .map(|r| world.analysis().extend_selection(&file, r))\n+        .map(|range| FileRange { file_id, range })\n+        .map(|frange| world.analysis().extend_selection(frange))\n         .map_conv_with(&line_index)\n         .collect();\n     Ok(req::ExtendSelectionResult { selections })\n@@ -71,13 +71,8 @@ pub fn handle_join_lines(\n     world: ServerWorld,\n     params: req::JoinLinesParams,\n ) -> Result<req::SourceChange> {\n-    let file_id = params.text_document.try_conv_with(&world)?;\n-    let line_index = world.analysis().file_line_index(file_id);\n-    let range = params.range.conv_with(&line_index);\n-    world\n-        .analysis()\n-        .join_lines(file_id, range)\n-        .try_conv_with(&world)\n+    let frange = (&params.text_document, params.range).try_conv_with(&world)?;\n+    world.analysis().join_lines(frange).try_conv_with(&world)\n }\n \n pub fn handle_on_enter(\n@@ -614,7 +609,10 @@ pub fn handle_code_action(\n     let line_index = world.analysis().file_line_index(file_id);\n     let range = params.range.conv_with(&line_index);\n \n-    let assists = world.analysis().assists(file_id, range)?.into_iter();\n+    let assists = world\n+        .analysis()\n+        .assists(FileRange { file_id, range })?\n+        .into_iter();\n     let fixes = world\n         .analysis()\n         .diagnostics(file_id)?"}]}