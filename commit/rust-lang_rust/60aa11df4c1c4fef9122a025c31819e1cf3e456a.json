{"sha": "60aa11df4c1c4fef9122a025c31819e1cf3e456a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYwYWExMWRmNGMxYzRmZWY5MTIyYTAyNWMzMTgxOWUxY2YzZTQ1NmE=", "commit": {"author": {"name": "Josef Reinhard Brandl", "email": "mail@josefbrandl.de", "date": "2018-08-06T08:22:13Z"}, "committer": {"name": "Josef Reinhard Brandl", "email": "mail@josefbrandl.de", "date": "2018-08-06T10:18:47Z"}, "message": "Rename Executor trait to Spawn", "tree": {"sha": "8d88b328f034177a73945ea0897e9efc56e6c181", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8d88b328f034177a73945ea0897e9efc56e6c181"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/60aa11df4c1c4fef9122a025c31819e1cf3e456a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/60aa11df4c1c4fef9122a025c31819e1cf3e456a", "html_url": "https://github.com/rust-lang/rust/commit/60aa11df4c1c4fef9122a025c31819e1cf3e456a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/60aa11df4c1c4fef9122a025c31819e1cf3e456a/comments", "author": {"login": "MajorBreakfast", "id": 340142, "node_id": "MDQ6VXNlcjM0MDE0Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/340142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MajorBreakfast", "html_url": "https://github.com/MajorBreakfast", "followers_url": "https://api.github.com/users/MajorBreakfast/followers", "following_url": "https://api.github.com/users/MajorBreakfast/following{/other_user}", "gists_url": "https://api.github.com/users/MajorBreakfast/gists{/gist_id}", "starred_url": "https://api.github.com/users/MajorBreakfast/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MajorBreakfast/subscriptions", "organizations_url": "https://api.github.com/users/MajorBreakfast/orgs", "repos_url": "https://api.github.com/users/MajorBreakfast/repos", "events_url": "https://api.github.com/users/MajorBreakfast/events{/privacy}", "received_events_url": "https://api.github.com/users/MajorBreakfast/received_events", "type": "User", "site_admin": false}, "committer": {"login": "MajorBreakfast", "id": 340142, "node_id": "MDQ6VXNlcjM0MDE0Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/340142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MajorBreakfast", "html_url": "https://github.com/MajorBreakfast", "followers_url": "https://api.github.com/users/MajorBreakfast/followers", "following_url": "https://api.github.com/users/MajorBreakfast/following{/other_user}", "gists_url": "https://api.github.com/users/MajorBreakfast/gists{/gist_id}", "starred_url": "https://api.github.com/users/MajorBreakfast/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MajorBreakfast/subscriptions", "organizations_url": "https://api.github.com/users/MajorBreakfast/orgs", "repos_url": "https://api.github.com/users/MajorBreakfast/repos", "events_url": "https://api.github.com/users/MajorBreakfast/events{/privacy}", "received_events_url": "https://api.github.com/users/MajorBreakfast/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aa1e6db70900cf5d11a843bc4234de0548677aba", "url": "https://api.github.com/repos/rust-lang/rust/commits/aa1e6db70900cf5d11a843bc4234de0548677aba", "html_url": "https://github.com/rust-lang/rust/commit/aa1e6db70900cf5d11a843bc4234de0548677aba"}], "stats": {"total": 104, "additions": 54, "deletions": 50}, "files": [{"sha": "08db5136d040450c0164841ed8fed83d0be2ad1f", "filename": "src/liballoc/boxed.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/60aa11df4c1c4fef9122a025c31819e1cf3e456a/src%2Fliballoc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60aa11df4c1c4fef9122a025c31819e1cf3e456a/src%2Fliballoc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fboxed.rs?ref=60aa11df4c1c4fef9122a025c31819e1cf3e456a", "patch": "@@ -67,7 +67,7 @@ use core::marker::{Unpin, Unsize};\n use core::mem::{self, PinMut};\n use core::ops::{CoerceUnsized, Deref, DerefMut, Generator, GeneratorState};\n use core::ptr::{self, NonNull, Unique};\n-use core::task::{Context, Poll, Executor, SpawnErrorKind, SpawnObjError};\n+use core::task::{Context, Poll, Spawn, SpawnErrorKind, SpawnObjError};\n \n use raw_vec::RawVec;\n use str::from_boxed_utf8_unchecked;\n@@ -973,11 +973,14 @@ unsafe impl<'a, T, F> UnsafeFutureObj<'a, T> for PinBox<F>\n }\n \n #[unstable(feature = \"futures_api\", issue = \"50547\")]\n-impl<E> Executor for Box<E>\n-    where E: Executor + ?Sized\n+impl<Sp> Spawn for Box<Sp>\n+    where Sp: Spawn + ?Sized\n {\n-    fn spawn_obj(&mut self, task: FutureObj<'static, ()>) -> Result<(), SpawnObjError> {\n-        (**self).spawn_obj(task)\n+    fn spawn_obj(\n+        &mut self,\n+        future: FutureObj<'static, ()>,\n+    ) -> Result<(), SpawnObjError> {\n+        (**self).spawn_obj(future)\n     }\n \n     fn status(&self) -> Result<(), SpawnErrorKind> {"}, {"sha": "5a29c8528ef3a0801c9a467a4f1ec21d5abd267c", "filename": "src/libcore/task/context.rs", "status": "modified", "additions": 25, "deletions": 19, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/60aa11df4c1c4fef9122a025c31819e1cf3e456a/src%2Flibcore%2Ftask%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60aa11df4c1c4fef9122a025c31819e1cf3e456a/src%2Flibcore%2Ftask%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftask%2Fcontext.rs?ref=60aa11df4c1c4fef9122a025c31819e1cf3e456a", "patch": "@@ -13,15 +13,15 @@\n             issue = \"50547\")]\n \n use fmt;\n-use super::{Executor, Waker, LocalWaker};\n+use super::{Spawn, Waker, LocalWaker};\n \n /// Information about the currently-running task.\n ///\n /// Contexts are always tied to the stack, since they are set up specifically\n /// when performing a single `poll` step on a task.\n pub struct Context<'a> {\n     local_waker: &'a LocalWaker,\n-    executor: &'a mut dyn Executor,\n+    spawner: &'a mut dyn Spawn,\n }\n \n impl<'a> fmt::Debug for Context<'a> {\n@@ -32,13 +32,14 @@ impl<'a> fmt::Debug for Context<'a> {\n }\n \n impl<'a> Context<'a> {\n-    /// Create a new task `Context` with the provided `local_waker`, `waker`, and `executor`.\n+    /// Create a new task `Context` with the provided `local_waker`, `waker`,\n+    /// and `spawner`.\n     #[inline]\n-    pub fn new(local_waker: &'a LocalWaker, executor: &'a mut dyn Executor) -> Context<'a> {\n-        Context {\n-            local_waker,\n-            executor,\n-        }\n+    pub fn new(\n+        local_waker: &'a LocalWaker,\n+        spawner: &'a mut dyn Spawn,\n+    ) -> Context<'a> {\n+        Context { local_waker, spawner }\n     }\n \n     /// Get the `LocalWaker` associated with the current task.\n@@ -53,40 +54,45 @@ impl<'a> Context<'a> {\n         unsafe { &*(self.local_waker as *const LocalWaker as *const Waker) }\n     }\n \n-    /// Get the default executor associated with this task.\n+    /// Get the spawner associated with this task.\n     ///\n     /// This method is useful primarily if you want to explicitly handle\n     /// spawn failures.\n     #[inline]\n-    pub fn executor(&mut self) -> &mut dyn Executor {\n-        self.executor\n+    pub fn spawner(&mut self) -> &mut dyn Spawn {\n+        self.spawner\n     }\n \n-    /// Produce a context like the current one, but using the given waker instead.\n+    /// Produce a context like the current one, but using the given waker\n+    /// instead.\n     ///\n     /// This advanced method is primarily used when building \"internal\n     /// schedulers\" within a task, where you want to provide some customized\n     /// wakeup logic.\n     #[inline]\n-    pub fn with_waker<'b>(&'b mut self, local_waker: &'b LocalWaker) -> Context<'b> {\n+    pub fn with_waker<'b>(\n+        &'b mut self,\n+        local_waker: &'b LocalWaker,\n+    ) -> Context<'b> {\n         Context {\n             local_waker,\n-            executor: self.executor,\n+            spawner: self.spawner,\n         }\n     }\n \n-    /// Produce a context like the current one, but using the given executor\n+    /// Produce a context like the current one, but using the given spawner\n     /// instead.\n     ///\n     /// This advanced method is primarily used when building \"internal\n     /// schedulers\" within a task.\n     #[inline]\n-    pub fn with_executor<'b, E>(&'b mut self, executor: &'b mut E) -> Context<'b>\n-        where E: Executor\n-    {\n+    pub fn with_spawner<'b, Sp: Spawn>(\n+        &'b mut self,\n+        spawner: &'b mut Sp,\n+    ) -> Context<'b> {\n         Context {\n             local_waker: self.local_waker,\n-            executor,\n+            spawner,\n         }\n     }\n }"}, {"sha": "f51e5f7ce0e311d3a37e07589e2f1cd984cd59fd", "filename": "src/libcore/task/mod.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/60aa11df4c1c4fef9122a025c31819e1cf3e456a/src%2Flibcore%2Ftask%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60aa11df4c1c4fef9122a025c31819e1cf3e456a/src%2Flibcore%2Ftask%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftask%2Fmod.rs?ref=60aa11df4c1c4fef9122a025c31819e1cf3e456a", "patch": "@@ -17,10 +17,8 @@\n mod context;\n pub use self::context::Context;\n \n-mod executor;\n-pub use self::executor::{\n-  Executor, SpawnErrorKind, SpawnObjError, SpawnLocalObjError\n-};\n+mod spawn;\n+pub use self::spawn::{Spawn, SpawnErrorKind, SpawnObjError, SpawnLocalObjError};\n \n mod poll;\n pub use self::poll::Poll;"}, {"sha": "58ee85d232bc48a0f8a179baf00eef75d50f172b", "filename": "src/libcore/task/spawn.rs", "status": "renamed", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/60aa11df4c1c4fef9122a025c31819e1cf3e456a/src%2Flibcore%2Ftask%2Fspawn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60aa11df4c1c4fef9122a025c31819e1cf3e456a/src%2Flibcore%2Ftask%2Fspawn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftask%2Fspawn.rs?ref=60aa11df4c1c4fef9122a025c31819e1cf3e456a", "patch": "@@ -15,16 +15,13 @@\n use fmt;\n use future::{FutureObj, LocalFutureObj};\n \n-/// A task executor.\n+/// Spawns tasks that poll futures to completion onto its associated task\n+/// executor.\n ///\n-/// Futures are polled until completion by tasks, a kind of lightweight\n-/// \"thread\". A *task executor* is responsible for the creation of these tasks\n-/// and the coordination of their execution on real operating system threads. In\n-/// particular, whenever a task signals that it can make further progress via a\n-/// wake-up notification, it is the responsibility of the task executor to put\n-/// the task into a queue to continue executing it, i.e. polling the future in\n-/// it, later.\n-pub trait Executor {\n+/// The term \"task\" refers to a kind of lightweight \"thread\". Task executors\n+/// are responsible for scheduling the execution of tasks on operating system\n+/// threads.\n+pub trait Spawn {\n     /// Spawns a new task with the given future. The future will be polled until\n     /// completion.\n     ///", "previous_filename": "src/libcore/task/executor.rs"}, {"sha": "99b8ad83bf6ccfe44c76d2f25274cbf4da569b6a", "filename": "src/test/run-pass/async-await.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/60aa11df4c1c4fef9122a025c31819e1cf3e456a/src%2Ftest%2Frun-pass%2Fasync-await.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60aa11df4c1c4fef9122a025c31819e1cf3e456a/src%2Ftest%2Frun-pass%2Fasync-await.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fasync-await.rs?ref=60aa11df4c1c4fef9122a025c31819e1cf3e456a", "patch": "@@ -22,7 +22,7 @@ use std::sync::{\n use std::future::FutureObj;\n use std::task::{\n     Context, Poll, Wake,\n-    Executor, SpawnObjError,\n+    Spawn, SpawnObjError,\n     local_waker_from_nonlocal,\n };\n \n@@ -36,8 +36,8 @@ impl Wake for Counter {\n     }\n }\n \n-struct NoopExecutor;\n-impl Executor for NoopExecutor {\n+struct NoopSpawner;\n+impl Spawn for NoopSpawner {\n     fn spawn_obj(&mut self, _: FutureObj<'static, ()>) -> Result<(), SpawnObjError> {\n         Ok(())\n     }\n@@ -127,8 +127,8 @@ where\n     let mut fut = PinBox::new(f(9));\n     let counter = Arc::new(Counter { wakes: AtomicUsize::new(0) });\n     let waker = local_waker_from_nonlocal(counter.clone());\n-    let executor = &mut NoopExecutor;\n-    let cx = &mut Context::new(&waker, executor);\n+    let spawner = &mut NoopSpawner;\n+    let cx = &mut Context::new(&waker, spawner);\n \n     assert_eq!(0, counter.wakes.load(atomic::Ordering::SeqCst));\n     assert_eq!(Poll::Pending, fut.as_pin_mut().poll(cx));"}, {"sha": "476cb48c0d2ee7af5169b9616a3b425bb83f5f12", "filename": "src/test/run-pass/futures-api.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/60aa11df4c1c4fef9122a025c31819e1cf3e456a/src%2Ftest%2Frun-pass%2Ffutures-api.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60aa11df4c1c4fef9122a025c31819e1cf3e456a/src%2Ftest%2Frun-pass%2Ffutures-api.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffutures-api.rs?ref=60aa11df4c1c4fef9122a025c31819e1cf3e456a", "patch": "@@ -23,7 +23,7 @@ use std::future::FutureObj;\n use std::task::{\n     Context, Poll,\n     Wake, Waker, LocalWaker,\n-    Executor, SpawnObjError,\n+    Spawn, SpawnObjError,\n     local_waker, local_waker_from_nonlocal,\n };\n \n@@ -42,9 +42,9 @@ impl Wake for Counter {\n     }\n }\n \n-struct NoopExecutor;\n+struct NoopSpawner;\n \n-impl Executor for NoopExecutor {\n+impl Spawn for NoopSpawner {\n     fn spawn_obj(&mut self, _: FutureObj<'static, ()>) -> Result<(), SpawnObjError> {\n         Ok(())\n     }\n@@ -59,7 +59,7 @@ impl Future for MyFuture {\n         cx.waker().wake();\n         cx.waker().wake();\n         cx.local_waker().wake();\n-        cx.executor().spawn_obj(PinBox::new(MyFuture).into()).unwrap();\n+        cx.spawner().spawn_obj(PinBox::new(MyFuture).into()).unwrap();\n         Poll::Ready(())\n     }\n }\n@@ -70,8 +70,8 @@ fn test_local_waker() {\n         nonlocal_wakes: AtomicUsize::new(0),\n     });\n     let waker = unsafe { local_waker(counter.clone()) };\n-    let executor = &mut NoopExecutor;\n-    let cx = &mut Context::new(&waker, executor);\n+    let spawner = &mut NoopSpawner;\n+    let cx = &mut Context::new(&waker, spawner);\n     assert_eq!(Poll::Ready(()), PinMut::new(&mut MyFuture).poll(cx));\n     assert_eq!(1, counter.local_wakes.load(atomic::Ordering::SeqCst));\n     assert_eq!(2, counter.nonlocal_wakes.load(atomic::Ordering::SeqCst));\n@@ -83,8 +83,8 @@ fn test_local_as_nonlocal_waker() {\n         nonlocal_wakes: AtomicUsize::new(0),\n     });\n     let waker: LocalWaker = local_waker_from_nonlocal(counter.clone());\n-    let executor = &mut NoopExecutor;\n-    let cx = &mut Context::new(&waker, executor);\n+    let spawner = &mut NoopSpawner;\n+    let cx = &mut Context::new(&waker, spawner);\n     assert_eq!(Poll::Ready(()), PinMut::new(&mut MyFuture).poll(cx));\n     assert_eq!(0, counter.local_wakes.load(atomic::Ordering::SeqCst));\n     assert_eq!(3, counter.nonlocal_wakes.load(atomic::Ordering::SeqCst));"}]}