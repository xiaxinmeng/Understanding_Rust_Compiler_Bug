{"sha": "3af14f994d7d5f0cef7d1f15bcfe6cab40685244", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNhZjE0Zjk5NGQ3ZDVmMGNlZjdkMWYxNWJjZmU2Y2FiNDA2ODUyNDQ=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-11-30T15:56:45Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-11-30T15:56:45Z"}, "message": "Rollup merge of #66612 - Nadrieril:or-patterns-initial, r=varkor\n\nInitial implementation of or-pattern usefulness checking\n\nThe title says it all.\nI'd like to request a perf run on that, hopefully this doesn't kill performance too much.\n\ncc https://github.com/rust-lang/rust/issues/54883", "tree": {"sha": "d1e24bea8f996aba4d447ecfdf809279196c31ad", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d1e24bea8f996aba4d447ecfdf809279196c31ad"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3af14f994d7d5f0cef7d1f15bcfe6cab40685244", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJd4pE9CRBK7hj4Ov3rIwAAdHIIAEw/E6Ej+FD5FkKx+xli+Sai\n1UZu1CiFEQFn/bY9NpbONXQG/0SKV49Vl91gU47y4M0dPYY4dpUxmNrCySIdVoI8\n+mYT538vNrF1ukAlmOsXnSVDrlRb5gpEqP1s+M+L9iKLVcKKam/iwkbbZXnuQ6tN\nJuFauGWtlVCy9h/mTTGg6ENHOBbwXDBLkxms88EKDOPOngOvfVnOr7exHr/cyP7R\nTMJbQJOERKL6/GHWzu6oPKiD9AV8i2m6tnaEb0zbPDugiSMCF2S+zL8B+ut0t8fK\npz8E9JGx++EE3JcBctrLCWZEu8XUxaTVbkjzFiWydjpwEEpAwwlfjI+L7UqHkvU=\n=K8f9\n-----END PGP SIGNATURE-----\n", "payload": "tree d1e24bea8f996aba4d447ecfdf809279196c31ad\nparent d8bdb3fdcbd88eb16e1a6669236122c41ed2aed3\nparent 0f4c5fb20cf5d499bc3d6426b1909863f1c86a5b\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1575129405 +0100\ncommitter GitHub <noreply@github.com> 1575129405 +0100\n\nRollup merge of #66612 - Nadrieril:or-patterns-initial, r=varkor\n\nInitial implementation of or-pattern usefulness checking\n\nThe title says it all.\nI'd like to request a perf run on that, hopefully this doesn't kill performance too much.\n\ncc https://github.com/rust-lang/rust/issues/54883\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3af14f994d7d5f0cef7d1f15bcfe6cab40685244", "html_url": "https://github.com/rust-lang/rust/commit/3af14f994d7d5f0cef7d1f15bcfe6cab40685244", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3af14f994d7d5f0cef7d1f15bcfe6cab40685244/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d8bdb3fdcbd88eb16e1a6669236122c41ed2aed3", "url": "https://api.github.com/repos/rust-lang/rust/commits/d8bdb3fdcbd88eb16e1a6669236122c41ed2aed3", "html_url": "https://github.com/rust-lang/rust/commit/d8bdb3fdcbd88eb16e1a6669236122c41ed2aed3"}, {"sha": "0f4c5fb20cf5d499bc3d6426b1909863f1c86a5b", "url": "https://api.github.com/repos/rust-lang/rust/commits/0f4c5fb20cf5d499bc3d6426b1909863f1c86a5b", "html_url": "https://github.com/rust-lang/rust/commit/0f4c5fb20cf5d499bc3d6426b1909863f1c86a5b"}], "stats": {"total": 306, "additions": 291, "deletions": 15}, "files": [{"sha": "c893d6f485630da75b81915f7f78c26781f27836", "filename": "src/librustc_mir/build/matches/test.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3af14f994d7d5f0cef7d1f15bcfe6cab40685244/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3af14f994d7d5f0cef7d1f15bcfe6cab40685244/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs?ref=3af14f994d7d5f0cef7d1f15bcfe6cab40685244", "patch": "@@ -84,10 +84,16 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 }\n             }\n \n+            PatKind::Or { .. } => {\n+                self.hir.tcx().sess.span_fatal(\n+                    match_pair.pattern.span,\n+                    \"or-patterns are not fully implemented yet\"\n+                )\n+            }\n+\n             PatKind::AscribeUserType { .. } |\n             PatKind::Array { .. } |\n             PatKind::Wild |\n-            PatKind::Or { .. } |\n             PatKind::Binding { .. } |\n             PatKind::Leaf { .. } |\n             PatKind::Deref { .. } => {"}, {"sha": "f2c5bf1bf6d55157d420461c79d648814023de92", "filename": "src/librustc_mir/hair/pattern/_match.rs", "status": "modified", "additions": 46, "deletions": 14, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/3af14f994d7d5f0cef7d1f15bcfe6cab40685244/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3af14f994d7d5f0cef7d1f15bcfe6cab40685244/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs?ref=3af14f994d7d5f0cef7d1f15bcfe6cab40685244", "patch": "@@ -400,6 +400,25 @@ impl<'p, 'tcx> PatStack<'p, 'tcx> {\n         self.0.iter().map(|p| *p)\n     }\n \n+    // If the first pattern is an or-pattern, expand this pattern. Otherwise, return `None`.\n+    fn expand_or_pat(&self) -> Option<Vec<Self>> {\n+        if self.is_empty() {\n+            None\n+        } else if let PatKind::Or { pats } = &*self.head().kind {\n+            Some(\n+                pats.iter()\n+                    .map(|pat| {\n+                        let mut new_patstack = PatStack::from_pattern(pat);\n+                        new_patstack.0.extend_from_slice(&self.0[1..]);\n+                        new_patstack\n+                    })\n+                    .collect(),\n+            )\n+        } else {\n+            None\n+        }\n+    }\n+\n     /// This computes `D(self)`. See top of the file for explanations.\n     fn specialize_wildcard(&self) -> Option<Self> {\n         if self.head().is_wildcard() { Some(self.to_tail()) } else { None }\n@@ -447,8 +466,13 @@ impl<'p, 'tcx> Matrix<'p, 'tcx> {\n         Matrix(vec![])\n     }\n \n+    /// Pushes a new row to the matrix. If the row starts with an or-pattern, this expands it.\n     pub fn push(&mut self, row: PatStack<'p, 'tcx>) {\n-        self.0.push(row)\n+        if let Some(rows) = row.expand_or_pat() {\n+            self.0.extend(rows);\n+        } else {\n+            self.0.push(row);\n+        }\n     }\n \n     /// Iterate over the first component of each row\n@@ -472,12 +496,10 @@ impl<'p, 'tcx> Matrix<'p, 'tcx> {\n         'a: 'q,\n         'p: 'q,\n     {\n-        Matrix(\n-            self.0\n-                .iter()\n-                .filter_map(|r| r.specialize_constructor(cx, constructor, ctor_wild_subpatterns))\n-                .collect(),\n-        )\n+        self.0\n+            .iter()\n+            .filter_map(|r| r.specialize_constructor(cx, constructor, ctor_wild_subpatterns))\n+            .collect()\n     }\n }\n \n@@ -529,7 +551,12 @@ impl<'p, 'tcx> FromIterator<PatStack<'p, 'tcx>> for Matrix<'p, 'tcx> {\n     where\n         T: IntoIterator<Item = PatStack<'p, 'tcx>>,\n     {\n-        Matrix(iter.into_iter().collect())\n+        let mut matrix = Matrix::empty();\n+        for x in iter {\n+            // Using `push` ensures we correctly expand or-patterns.\n+            matrix.push(x);\n+        }\n+        matrix\n     }\n }\n \n@@ -1602,6 +1629,15 @@ pub fn is_useful<'p, 'a, 'tcx>(\n \n     assert!(rows.iter().all(|r| r.len() == v.len()));\n \n+    // If the first pattern is an or-pattern, expand it.\n+    if let Some(vs) = v.expand_or_pat() {\n+        return vs\n+            .into_iter()\n+            .map(|v| is_useful(cx, matrix, &v, witness_preference, hir_id))\n+            .find(|result| result.is_useful())\n+            .unwrap_or(NotUseful);\n+    }\n+\n     let (ty, span) = matrix\n         .heads()\n         .map(|r| (r.ty, r.span))\n@@ -1813,9 +1849,7 @@ fn pat_constructor<'tcx>(\n                 if slice.is_some() { VarLen(prefix, suffix) } else { FixedLen(prefix + suffix) };\n             Some(Slice(Slice { array_len, kind }))\n         }\n-        PatKind::Or { .. } => {\n-            bug!(\"support for or-patterns has not been fully implemented yet.\");\n-        }\n+        PatKind::Or { .. } => bug!(\"Or-pattern should have been expanded earlier on.\"),\n     }\n }\n \n@@ -2404,9 +2438,7 @@ fn specialize_one_pattern<'p, 'a: 'p, 'q: 'p, 'tcx>(\n             _ => span_bug!(pat.span, \"unexpected ctor {:?} for slice pat\", constructor),\n         },\n \n-        PatKind::Or { .. } => {\n-            bug!(\"support for or-patterns has not been fully implemented yet.\");\n-        }\n+        PatKind::Or { .. } => bug!(\"Or-pattern should have been expanded earlier on.\"),\n     };\n     debug!(\"specialize({:#?}, {:#?}) = {:#?}\", pat, ctor_wild_subpatterns, result);\n "}, {"sha": "d7c191bb5a28d38b1d8159b3c53139239e75e446", "filename": "src/test/ui/or-patterns/exhaustiveness-non-exhaustive.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/3af14f994d7d5f0cef7d1f15bcfe6cab40685244/src%2Ftest%2Fui%2For-patterns%2Fexhaustiveness-non-exhaustive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3af14f994d7d5f0cef7d1f15bcfe6cab40685244/src%2Ftest%2Fui%2For-patterns%2Fexhaustiveness-non-exhaustive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2Fexhaustiveness-non-exhaustive.rs?ref=3af14f994d7d5f0cef7d1f15bcfe6cab40685244", "patch": "@@ -0,0 +1,26 @@\n+#![feature(or_patterns)]\n+#![feature(slice_patterns)]\n+#![allow(incomplete_features)]\n+#![deny(unreachable_patterns)]\n+\n+// We wrap patterns in a tuple because top-level or-patterns are special-cased for now.\n+fn main() {\n+    // Get the fatal error out of the way\n+    match (0u8,) {\n+        (0 | _,) => {}\n+        //~^ ERROR or-patterns are not fully implemented yet\n+    }\n+\n+    match (0u8, 0u8) {\n+        //~^ ERROR non-exhaustive patterns: `(2u8..=std::u8::MAX, _)`\n+        (0 | 1, 2 | 3) => {}\n+    }\n+    match ((0u8,),) {\n+        //~^ ERROR non-exhaustive patterns: `((4u8..=std::u8::MAX))`\n+        ((0 | 1,) | (2 | 3,),) => {},\n+    }\n+    match (Some(0u8),) {\n+        //~^ ERROR non-exhaustive patterns: `(Some(2u8..=std::u8::MAX))`\n+        (None | Some(0 | 1),) => {}\n+    }\n+}"}, {"sha": "e6aa157d278c824279745efd2bf103af8003f506", "filename": "src/test/ui/or-patterns/exhaustiveness-non-exhaustive.stderr", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/3af14f994d7d5f0cef7d1f15bcfe6cab40685244/src%2Ftest%2Fui%2For-patterns%2Fexhaustiveness-non-exhaustive.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3af14f994d7d5f0cef7d1f15bcfe6cab40685244/src%2Ftest%2Fui%2For-patterns%2Fexhaustiveness-non-exhaustive.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2Fexhaustiveness-non-exhaustive.stderr?ref=3af14f994d7d5f0cef7d1f15bcfe6cab40685244", "patch": "@@ -0,0 +1,33 @@\n+error[E0004]: non-exhaustive patterns: `(2u8..=std::u8::MAX, _)` not covered\n+  --> $DIR/exhaustiveness-non-exhaustive.rs:14:11\n+   |\n+LL |     match (0u8, 0u8) {\n+   |           ^^^^^^^^^^ pattern `(2u8..=std::u8::MAX, _)` not covered\n+   |\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+\n+error[E0004]: non-exhaustive patterns: `((4u8..=std::u8::MAX))` not covered\n+  --> $DIR/exhaustiveness-non-exhaustive.rs:18:11\n+   |\n+LL |     match ((0u8,),) {\n+   |           ^^^^^^^^^ pattern `((4u8..=std::u8::MAX))` not covered\n+   |\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+\n+error[E0004]: non-exhaustive patterns: `(Some(2u8..=std::u8::MAX))` not covered\n+  --> $DIR/exhaustiveness-non-exhaustive.rs:22:11\n+   |\n+LL |     match (Some(0u8),) {\n+   |           ^^^^^^^^^^^^ pattern `(Some(2u8..=std::u8::MAX))` not covered\n+   |\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+\n+error: or-patterns are not fully implemented yet\n+  --> $DIR/exhaustiveness-non-exhaustive.rs:10:10\n+   |\n+LL |         (0 | _,) => {}\n+   |          ^^^^^\n+\n+error: aborting due to 4 previous errors\n+\n+For more information about this error, try `rustc --explain E0004`."}, {"sha": "62a851719f96d363442806d4546c4730a88c1a27", "filename": "src/test/ui/or-patterns/exhaustiveness-pass.rs", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/3af14f994d7d5f0cef7d1f15bcfe6cab40685244/src%2Ftest%2Fui%2For-patterns%2Fexhaustiveness-pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3af14f994d7d5f0cef7d1f15bcfe6cab40685244/src%2Ftest%2Fui%2For-patterns%2Fexhaustiveness-pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2Fexhaustiveness-pass.rs?ref=3af14f994d7d5f0cef7d1f15bcfe6cab40685244", "patch": "@@ -0,0 +1,40 @@\n+#![feature(or_patterns)]\n+#![feature(slice_patterns)]\n+#![allow(incomplete_features)]\n+#![deny(unreachable_patterns)]\n+\n+// We wrap patterns in a tuple because top-level or-patterns are special-cased for now.\n+fn main() {\n+    // Get the fatal error out of the way\n+    match (0u8,) {\n+        (0 | _,) => {}\n+        //~^ ERROR or-patterns are not fully implemented yet\n+    }\n+\n+    match (0u8,) {\n+        (1 | 2,) => {}\n+        _ => {}\n+    }\n+\n+    match (0u8,) {\n+        (1 | 1,) => {} // FIXME(or_patterns): redundancy not detected for now.\n+        _ => {}\n+    }\n+    match (0u8, 0u8) {\n+        (1 | 2, 3 | 4) => {}\n+        (1, 2) => {}\n+        (2, 1) => {}\n+        _ => {}\n+    }\n+    match (Some(0u8),) {\n+        (None | Some(0 | 1),) => {}\n+        (Some(2..=255),) => {}\n+    }\n+    match ((0u8,),) {\n+        ((0 | 1,) | (2 | 3,),) => {},\n+        ((_,),) => {},\n+    }\n+    match (&[0u8][..],) {\n+        ([] | [0 | 1..=255] | [_, ..],) => {},\n+    }\n+}"}, {"sha": "1f4278c4b8098c2070287ff91ba86f1d05341659", "filename": "src/test/ui/or-patterns/exhaustiveness-pass.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3af14f994d7d5f0cef7d1f15bcfe6cab40685244/src%2Ftest%2Fui%2For-patterns%2Fexhaustiveness-pass.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3af14f994d7d5f0cef7d1f15bcfe6cab40685244/src%2Ftest%2Fui%2For-patterns%2Fexhaustiveness-pass.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2Fexhaustiveness-pass.stderr?ref=3af14f994d7d5f0cef7d1f15bcfe6cab40685244", "patch": "@@ -0,0 +1,8 @@\n+error: or-patterns are not fully implemented yet\n+  --> $DIR/exhaustiveness-pass.rs:10:10\n+   |\n+LL |         (0 | _,) => {}\n+   |          ^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "2cd8ca2dbac626449fc60db47dadb431cbb6c5e2", "filename": "src/test/ui/or-patterns/exhaustiveness-unreachable-pattern.rs", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/3af14f994d7d5f0cef7d1f15bcfe6cab40685244/src%2Ftest%2Fui%2For-patterns%2Fexhaustiveness-unreachable-pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3af14f994d7d5f0cef7d1f15bcfe6cab40685244/src%2Ftest%2Fui%2For-patterns%2Fexhaustiveness-unreachable-pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2Fexhaustiveness-unreachable-pattern.rs?ref=3af14f994d7d5f0cef7d1f15bcfe6cab40685244", "patch": "@@ -0,0 +1,51 @@\n+#![feature(or_patterns)]\n+#![feature(slice_patterns)]\n+#![allow(incomplete_features)]\n+#![deny(unreachable_patterns)]\n+\n+// We wrap patterns in a tuple because top-level or-patterns are special-cased for now.\n+fn main() {\n+    // Get the fatal error out of the way\n+    match (0u8,) {\n+        (0 | _,) => {}\n+        //~^ ERROR or-patterns are not fully implemented yet\n+    }\n+\n+    match (0u8,) {\n+        (1 | 2,) => {}\n+        (1,) => {} //~ ERROR unreachable pattern\n+        _ => {}\n+    }\n+    match (0u8,) {\n+        (1 | 2,) => {}\n+        (2,) => {} //~ ERROR unreachable pattern\n+        _ => {}\n+    }\n+    match (0u8,) {\n+        (1,) => {}\n+        (2,) => {}\n+        (1 | 2,) => {} //~ ERROR unreachable pattern\n+        _ => {}\n+    }\n+    match (0u8, 0u8) {\n+        (1 | 2, 3 | 4) => {}\n+        (1, 3) => {} //~ ERROR unreachable pattern\n+        (1, 4) => {} //~ ERROR unreachable pattern\n+        (2, 4) => {} //~ ERROR unreachable pattern\n+        (2 | 1, 4) => {} //~ ERROR unreachable pattern\n+        (1, 5 | 6) => {}\n+        (1, 4 | 5) => {} //~ ERROR unreachable pattern\n+        _ => {}\n+    }\n+    match (Some(0u8),) {\n+        (None | Some(1 | 2),) => {}\n+        (Some(1),) => {} //~ ERROR unreachable pattern\n+        (None,) => {} //~ ERROR unreachable pattern\n+        _ => {}\n+    }\n+    match ((0u8,),) {\n+        ((1 | 2,) | (3 | 4,),) => {},\n+        ((1..=4,),) => {}, //~ ERROR unreachable pattern\n+        _ => {},\n+    }\n+}"}, {"sha": "a4d55d805c3c621ed8c22167380ad1babe99ab3a", "filename": "src/test/ui/or-patterns/exhaustiveness-unreachable-pattern.stderr", "status": "added", "additions": 80, "deletions": 0, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/3af14f994d7d5f0cef7d1f15bcfe6cab40685244/src%2Ftest%2Fui%2For-patterns%2Fexhaustiveness-unreachable-pattern.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3af14f994d7d5f0cef7d1f15bcfe6cab40685244/src%2Ftest%2Fui%2For-patterns%2Fexhaustiveness-unreachable-pattern.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2Fexhaustiveness-unreachable-pattern.stderr?ref=3af14f994d7d5f0cef7d1f15bcfe6cab40685244", "patch": "@@ -0,0 +1,80 @@\n+error: unreachable pattern\n+  --> $DIR/exhaustiveness-unreachable-pattern.rs:16:9\n+   |\n+LL |         (1,) => {}\n+   |         ^^^^\n+   |\n+note: lint level defined here\n+  --> $DIR/exhaustiveness-unreachable-pattern.rs:4:9\n+   |\n+LL | #![deny(unreachable_patterns)]\n+   |         ^^^^^^^^^^^^^^^^^^^^\n+\n+error: unreachable pattern\n+  --> $DIR/exhaustiveness-unreachable-pattern.rs:21:9\n+   |\n+LL |         (2,) => {}\n+   |         ^^^^\n+\n+error: unreachable pattern\n+  --> $DIR/exhaustiveness-unreachable-pattern.rs:27:9\n+   |\n+LL |         (1 | 2,) => {}\n+   |         ^^^^^^^^\n+\n+error: unreachable pattern\n+  --> $DIR/exhaustiveness-unreachable-pattern.rs:32:9\n+   |\n+LL |         (1, 3) => {}\n+   |         ^^^^^^\n+\n+error: unreachable pattern\n+  --> $DIR/exhaustiveness-unreachable-pattern.rs:33:9\n+   |\n+LL |         (1, 4) => {}\n+   |         ^^^^^^\n+\n+error: unreachable pattern\n+  --> $DIR/exhaustiveness-unreachable-pattern.rs:34:9\n+   |\n+LL |         (2, 4) => {}\n+   |         ^^^^^^\n+\n+error: unreachable pattern\n+  --> $DIR/exhaustiveness-unreachable-pattern.rs:35:9\n+   |\n+LL |         (2 | 1, 4) => {}\n+   |         ^^^^^^^^^^\n+\n+error: unreachable pattern\n+  --> $DIR/exhaustiveness-unreachable-pattern.rs:37:9\n+   |\n+LL |         (1, 4 | 5) => {}\n+   |         ^^^^^^^^^^\n+\n+error: unreachable pattern\n+  --> $DIR/exhaustiveness-unreachable-pattern.rs:42:9\n+   |\n+LL |         (Some(1),) => {}\n+   |         ^^^^^^^^^^\n+\n+error: unreachable pattern\n+  --> $DIR/exhaustiveness-unreachable-pattern.rs:43:9\n+   |\n+LL |         (None,) => {}\n+   |         ^^^^^^^\n+\n+error: unreachable pattern\n+  --> $DIR/exhaustiveness-unreachable-pattern.rs:48:9\n+   |\n+LL |         ((1..=4,),) => {},\n+   |         ^^^^^^^^^^^\n+\n+error: or-patterns are not fully implemented yet\n+  --> $DIR/exhaustiveness-unreachable-pattern.rs:10:10\n+   |\n+LL |         (0 | _,) => {}\n+   |          ^^^^^\n+\n+error: aborting due to 12 previous errors\n+"}]}