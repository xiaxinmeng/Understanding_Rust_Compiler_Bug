{"sha": "9290399ec438c8ba6f3819bbd16212dfabbcb610", "node_id": "C_kwDOAAsO6NoAKDkyOTAzOTllYzQzOGM4YmE2ZjM4MTliYmQxNjIxMmRmYWJiY2I2MTA", "commit": {"author": {"name": "unvalley", "email": "kirohi.code@gmail.com", "date": "2022-11-26T14:00:03Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2023-01-09T11:21:37Z"}, "message": "fix: rename to extract_expressions_from_format_string", "tree": {"sha": "253205a2b0ad5508c7e1f3d3a61c423002cc8f59", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/253205a2b0ad5508c7e1f3d3a61c423002cc8f59"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9290399ec438c8ba6f3819bbd16212dfabbcb610", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9290399ec438c8ba6f3819bbd16212dfabbcb610", "html_url": "https://github.com/rust-lang/rust/commit/9290399ec438c8ba6f3819bbd16212dfabbcb610", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9290399ec438c8ba6f3819bbd16212dfabbcb610/comments", "author": {"login": "unvalley", "id": 38400669, "node_id": "MDQ6VXNlcjM4NDAwNjY5", "avatar_url": "https://avatars.githubusercontent.com/u/38400669?v=4", "gravatar_id": "", "url": "https://api.github.com/users/unvalley", "html_url": "https://github.com/unvalley", "followers_url": "https://api.github.com/users/unvalley/followers", "following_url": "https://api.github.com/users/unvalley/following{/other_user}", "gists_url": "https://api.github.com/users/unvalley/gists{/gist_id}", "starred_url": "https://api.github.com/users/unvalley/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/unvalley/subscriptions", "organizations_url": "https://api.github.com/users/unvalley/orgs", "repos_url": "https://api.github.com/users/unvalley/repos", "events_url": "https://api.github.com/users/unvalley/events{/privacy}", "received_events_url": "https://api.github.com/users/unvalley/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "25717af4aa82da8ef9c93ff3428bd929e4b3dfe8", "url": "https://api.github.com/repos/rust-lang/rust/commits/25717af4aa82da8ef9c93ff3428bd929e4b3dfe8", "html_url": "https://github.com/rust-lang/rust/commit/25717af4aa82da8ef9c93ff3428bd929e4b3dfe8"}], "stats": {"total": 87, "additions": 45, "deletions": 42}, "files": [{"sha": "b1bc2a9e6dbdc1e1d071838442285941bad327b0", "filename": "crates/ide-assists/src/handlers/extract_expressions_from_format_string.rs", "status": "renamed", "additions": 12, "deletions": 9, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/9290399ec438c8ba6f3819bbd16212dfabbcb610/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fextract_expressions_from_format_string.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9290399ec438c8ba6f3819bbd16212dfabbcb610/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fextract_expressions_from_format_string.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fextract_expressions_from_format_string.rs?ref=9290399ec438c8ba6f3819bbd16212dfabbcb610", "patch": "@@ -10,7 +10,7 @@ use itertools::Itertools;\n use stdx::format_to;\n use syntax::{ast, AstNode, AstToken, NodeOrToken, SyntaxKind::COMMA, TextRange};\n \n-// Assist: move_format_string_arg\n+// Assist: extract_expressions_from_format_string\n //\n // Move an expression out of a format string.\n //\n@@ -40,7 +40,10 @@ use syntax::{ast, AstNode, AstToken, NodeOrToken, SyntaxKind::COMMA, TextRange};\n // }\n // ```\n \n-pub(crate) fn move_format_string_arg(acc: &mut Assists, ctx: &AssistContext<'_>) -> Option<()> {\n+pub(crate) fn extract_expressions_from_format_string(\n+    acc: &mut Assists,\n+    ctx: &AssistContext<'_>,\n+) -> Option<()> {\n     let fmt_string = ctx.find_token_at_offset::<ast::String>()?;\n     let tt = fmt_string.syntax().parent().and_then(ast::TokenTree::cast)?;\n \n@@ -58,7 +61,7 @@ pub(crate) fn move_format_string_arg(acc: &mut Assists, ctx: &AssistContext<'_>)\n \n     acc.add(\n         AssistId(\n-            \"move_format_string_arg\",\n+            \"extract_expressions_from_format_string\",\n             // if there aren't any expressions, then make the assist a RefactorExtract\n             if extracted_args.iter().filter(|f| matches!(f, Arg::Expr(_))).count() == 0 {\n                 AssistKind::RefactorExtract\n@@ -171,7 +174,7 @@ macro_rules! print {\n     #[test]\n     fn multiple_middle_arg() {\n         check_assist(\n-            move_format_string_arg,\n+            extract_expressions_from_format_string,\n             &add_macro_decl(\n                 r#\"\n fn main() {\n@@ -192,7 +195,7 @@ fn main() {\n     #[test]\n     fn single_arg() {\n         check_assist(\n-            move_format_string_arg,\n+            extract_expressions_from_format_string,\n             &add_macro_decl(\n                 r#\"\n fn main() {\n@@ -213,7 +216,7 @@ fn main() {\n     #[test]\n     fn multiple_middle_placeholders_arg() {\n         check_assist(\n-            move_format_string_arg,\n+            extract_expressions_from_format_string,\n             &add_macro_decl(\n                 r#\"\n fn main() {\n@@ -234,7 +237,7 @@ fn main() {\n     #[test]\n     fn multiple_trailing_args() {\n         check_assist(\n-            move_format_string_arg,\n+            extract_expressions_from_format_string,\n             &add_macro_decl(\n                 r#\"\n fn main() {\n@@ -255,7 +258,7 @@ fn main() {\n     #[test]\n     fn improper_commas() {\n         check_assist(\n-            move_format_string_arg,\n+            extract_expressions_from_format_string,\n             &add_macro_decl(\n                 r#\"\n fn main() {\n@@ -276,7 +279,7 @@ fn main() {\n     #[test]\n     fn nested_tt() {\n         check_assist(\n-            move_format_string_arg,\n+            extract_expressions_from_format_string,\n             &add_macro_decl(\n                 r#\"\n fn main() {", "previous_filename": "crates/ide-assists/src/handlers/move_format_string_arg.rs"}, {"sha": "0bf502fdbcd9ee969f691b7b993eeb99367ff2a1", "filename": "crates/ide-assists/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9290399ec438c8ba6f3819bbd16212dfabbcb610/crates%2Fide-assists%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9290399ec438c8ba6f3819bbd16212dfabbcb610/crates%2Fide-assists%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Flib.rs?ref=9290399ec438c8ba6f3819bbd16212dfabbcb610", "patch": "@@ -138,7 +138,7 @@ mod handlers {\n     mod flip_binexpr;\n     mod flip_comma;\n     mod flip_trait_bound;\n-    mod move_format_string_arg;\n+    mod extract_expressions_from_format_string;\n     mod generate_constant;\n     mod generate_default_from_enum_variant;\n     mod generate_default_from_new;\n@@ -230,6 +230,7 @@ mod handlers {\n             convert_while_to_loop::convert_while_to_loop,\n             destructure_tuple_binding::destructure_tuple_binding,\n             expand_glob_import::expand_glob_import,\n+            extract_expressions_from_format_string::extract_expressions_from_format_string,\n             extract_struct_from_enum_variant::extract_struct_from_enum_variant,\n             extract_type_alias::extract_type_alias,\n             fix_visibility::fix_visibility,\n@@ -264,7 +265,6 @@ mod handlers {\n             merge_match_arms::merge_match_arms,\n             move_bounds::move_bounds_to_where_clause,\n             move_const_to_impl::move_const_to_impl,\n-            move_format_string_arg::move_format_string_arg,\n             move_guard::move_arm_cond_to_match_guard,\n             move_guard::move_guard_to_arm_body,\n             move_module_to_file::move_module_to_file,"}, {"sha": "5e24de620777c4f1d0d17d92f39f805e47768abd", "filename": "crates/ide-assists/src/tests/generated.rs", "status": "modified", "additions": 31, "deletions": 31, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/9290399ec438c8ba6f3819bbd16212dfabbcb610/crates%2Fide-assists%2Fsrc%2Ftests%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9290399ec438c8ba6f3819bbd16212dfabbcb610/crates%2Fide-assists%2Fsrc%2Ftests%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Ftests%2Fgenerated.rs?ref=9290399ec438c8ba6f3819bbd16212dfabbcb610", "patch": "@@ -624,6 +624,37 @@ fn qux(bar: Bar, baz: Baz) {}\n     )\n }\n \n+#[test]\n+fn doctest_extract_expressions_from_format_string() {\n+    check_doc_test(\n+        \"extract_expressions_from_format_string\",\n+        r#####\"\n+macro_rules! format_args {\n+    ($lit:literal $(tt:tt)*) => { 0 },\n+}\n+macro_rules! print {\n+    ($($arg:tt)*) => (std::io::_print(format_args!($($arg)*)));\n+}\n+\n+fn main() {\n+    print!(\"{x + 1}$0\");\n+}\n+\"#####,\n+        r#####\"\n+macro_rules! format_args {\n+    ($lit:literal $(tt:tt)*) => { 0 },\n+}\n+macro_rules! print {\n+    ($($arg:tt)*) => (std::io::_print(format_args!($($arg)*)));\n+}\n+\n+fn main() {\n+    print!(\"{}\"$0, x + 1);\n+}\n+\"#####,\n+    )\n+}\n+\n #[test]\n fn doctest_extract_function() {\n     check_doc_test(\n@@ -1703,37 +1734,6 @@ impl S {\n     )\n }\n \n-#[test]\n-fn doctest_move_format_string_arg() {\n-    check_doc_test(\n-        \"move_format_string_arg\",\n-        r#####\"\n-macro_rules! format_args {\n-    ($lit:literal $(tt:tt)*) => { 0 },\n-}\n-macro_rules! print {\n-    ($($arg:tt)*) => (std::io::_print(format_args!($($arg)*)));\n-}\n-\n-fn main() {\n-    print!(\"{x + 1}$0\");\n-}\n-\"#####,\n-        r#####\"\n-macro_rules! format_args {\n-    ($lit:literal $(tt:tt)*) => { 0 },\n-}\n-macro_rules! print {\n-    ($($arg:tt)*) => (std::io::_print(format_args!($($arg)*)));\n-}\n-\n-fn main() {\n-    print!(\"{}\"$0, x + 1);\n-}\n-\"#####,\n-    )\n-}\n-\n #[test]\n fn doctest_move_from_mod_rs() {\n     check_doc_test("}]}