{"sha": "f7202e40f49d2b29635f095a3270a7214e25ce8b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY3MjAyZTQwZjQ5ZDJiMjk2MzVmMDk1YTMyNzBhNzIxNGUyNWNlOGI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-08-27T19:51:01Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-08-27T19:51:01Z"}, "message": "Auto merge of #51456 - qmx:crate-in-path, r=nikomatsakis\n\nresolve suggestions should use `crate::` when enabled\n\nI couldn't find a way to add a specific assertion for the ui test, so the expected output is living under the `crates-in-path.stderr` ui test.\n\n- is this the right place for the test?\n\nfixes #51212", "tree": {"sha": "79eef6bdbc14871b37b4fb46e20103ba0ef751b6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/79eef6bdbc14871b37b4fb46e20103ba0ef751b6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f7202e40f49d2b29635f095a3270a7214e25ce8b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f7202e40f49d2b29635f095a3270a7214e25ce8b", "html_url": "https://github.com/rust-lang/rust/commit/f7202e40f49d2b29635f095a3270a7214e25ce8b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f7202e40f49d2b29635f095a3270a7214e25ce8b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "70a21e89f136c91f676959c126666d13a2deeadf", "url": "https://api.github.com/repos/rust-lang/rust/commits/70a21e89f136c91f676959c126666d13a2deeadf", "html_url": "https://github.com/rust-lang/rust/commit/70a21e89f136c91f676959c126666d13a2deeadf"}, {"sha": "d9791d6538929938d9f3691e84264ae527f36422", "url": "https://api.github.com/repos/rust-lang/rust/commits/d9791d6538929938d9f3691e84264ae527f36422", "html_url": "https://github.com/rust-lang/rust/commit/d9791d6538929938d9f3691e84264ae527f36422"}], "stats": {"total": 160, "additions": 138, "deletions": 22}, "files": [{"sha": "78c518aea961da2b419c07ca4370c5aa7bbff5f7", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 66, "deletions": 22, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/f7202e40f49d2b29635f095a3270a7214e25ce8b/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7202e40f49d2b29635f095a3270a7214e25ce8b/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=f7202e40f49d2b29635f095a3270a7214e25ce8b", "patch": "@@ -1952,9 +1952,7 @@ impl<'a, 'crateloader: 'a> Resolver<'a, 'crateloader> {\n                                 \"access to extern crates through prelude is experimental\").emit();\n                 }\n \n-                let crate_id = self.crate_loader.process_path_extern(ident.name, ident.span);\n-                let crate_root = self.get_module(DefId { krate: crate_id, index: CRATE_DEF_INDEX });\n-                self.populate_module_if_necessary(crate_root);\n+                let crate_root = self.load_extern_prelude_crate_if_needed(ident);\n \n                 let binding = (crate_root, ty::Visibility::Public,\n                                ident.span, Mark::root()).to_name_binding(self.arenas);\n@@ -1982,6 +1980,13 @@ impl<'a, 'crateloader: 'a> Resolver<'a, 'crateloader> {\n         None\n     }\n \n+    fn load_extern_prelude_crate_if_needed(&mut self, ident: Ident) -> Module<'a> {\n+        let crate_id = self.crate_loader.process_path_extern(ident.name, ident.span);\n+        let crate_root = self.get_module(DefId { krate: crate_id, index: CRATE_DEF_INDEX });\n+        self.populate_module_if_necessary(&crate_root);\n+        crate_root\n+    }\n+\n     fn hygienic_lexical_parent(&mut self, module: Module<'a>, span: &mut Span)\n                                -> Option<Module<'a>> {\n         if !module.expansion.is_descendant_of(span.ctxt().outer()) {\n@@ -4228,24 +4233,20 @@ impl<'a, 'crateloader: 'a> Resolver<'a, 'crateloader> {\n         }\n     }\n \n-    /// When name resolution fails, this method can be used to look up candidate\n-    /// entities with the expected name. It allows filtering them using the\n-    /// supplied predicate (which should be used to only accept the types of\n-    /// definitions expected e.g. traits). The lookup spans across all crates.\n-    ///\n-    /// NOTE: The method does not look into imports, but this is not a problem,\n-    /// since we report the definitions (thus, the de-aliased imports).\n-    fn lookup_import_candidates<FilterFn>(&mut self,\n+    fn lookup_import_candidates_from_module<FilterFn>(&mut self,\n                                           lookup_name: Name,\n                                           namespace: Namespace,\n+                                          start_module: &'a ModuleData<'a>,\n+                                          crate_name: Ident,\n                                           filter_fn: FilterFn)\n                                           -> Vec<ImportSuggestion>\n         where FilterFn: Fn(Def) -> bool\n     {\n         let mut candidates = Vec::new();\n         let mut worklist = Vec::new();\n         let mut seen_modules = FxHashSet();\n-        worklist.push((self.graph_root, Vec::new(), false));\n+        let not_local_module = crate_name != keywords::Crate.ident();\n+        worklist.push((start_module, Vec::<ast::PathSegment>::new(), not_local_module));\n \n         while let Some((in_module,\n                         path_segments,\n@@ -4264,17 +4265,14 @@ impl<'a, 'crateloader: 'a> Resolver<'a, 'crateloader> {\n                 if ident.name == lookup_name && ns == namespace {\n                     if filter_fn(name_binding.def()) {\n                         // create the path\n-                        let mut segms = if self.session.rust_2018() && !in_module_is_extern {\n+                        let mut segms = path_segments.clone();\n+                        if self.session.rust_2018() {\n                             // crate-local absolute paths start with `crate::` in edition 2018\n                             // FIXME: may also be stabilized for Rust 2015 (Issues #45477, #44660)\n-                            let mut full_segms = vec![\n-                                ast::PathSegment::from_ident(keywords::Crate.ident())\n-                            ];\n-                            full_segms.extend(path_segments.clone());\n-                            full_segms\n-                        } else {\n-                            path_segments.clone()\n-                        };\n+                            segms.insert(\n+                                0, ast::PathSegment::from_ident(crate_name)\n+                            );\n+                        }\n \n                         segms.push(ast::PathSegment::from_ident(ident));\n                         let path = Path {\n@@ -4300,7 +4298,14 @@ impl<'a, 'crateloader: 'a> Resolver<'a, 'crateloader> {\n                     let mut path_segments = path_segments.clone();\n                     path_segments.push(ast::PathSegment::from_ident(ident));\n \n-                    if !in_module_is_extern || name_binding.vis == ty::Visibility::Public {\n+                    let is_extern_crate_that_also_appears_in_prelude =\n+                        name_binding.is_extern_crate() &&\n+                        self.session.rust_2018();\n+\n+                    let is_visible_to_user =\n+                        !in_module_is_extern || name_binding.vis == ty::Visibility::Public;\n+\n+                    if !is_extern_crate_that_also_appears_in_prelude && is_visible_to_user {\n                         // add the module to the lookup\n                         let is_extern = in_module_is_extern || name_binding.is_extern_crate();\n                         if seen_modules.insert(module.def_id().unwrap()) {\n@@ -4314,6 +4319,45 @@ impl<'a, 'crateloader: 'a> Resolver<'a, 'crateloader> {\n         candidates\n     }\n \n+    /// When name resolution fails, this method can be used to look up candidate\n+    /// entities with the expected name. It allows filtering them using the\n+    /// supplied predicate (which should be used to only accept the types of\n+    /// definitions expected e.g. traits). The lookup spans across all crates.\n+    ///\n+    /// NOTE: The method does not look into imports, but this is not a problem,\n+    /// since we report the definitions (thus, the de-aliased imports).\n+    fn lookup_import_candidates<FilterFn>(&mut self,\n+                                          lookup_name: Name,\n+                                          namespace: Namespace,\n+                                          filter_fn: FilterFn)\n+                                          -> Vec<ImportSuggestion>\n+        where FilterFn: Fn(Def) -> bool\n+    {\n+        let mut suggestions = vec![];\n+\n+        suggestions.extend(\n+            self.lookup_import_candidates_from_module(\n+                lookup_name, namespace, self.graph_root, keywords::Crate.ident(), &filter_fn\n+            )\n+        );\n+\n+        if self.session.features_untracked().extern_prelude {\n+            let extern_prelude_names = self.extern_prelude.clone();\n+            for &krate_name in extern_prelude_names.iter() {\n+                let krate_ident = Ident::with_empty_ctxt(krate_name);\n+                let external_prelude_module = self.load_extern_prelude_crate_if_needed(krate_ident);\n+\n+                suggestions.extend(\n+                    self.lookup_import_candidates_from_module(\n+                        lookup_name, namespace, external_prelude_module, krate_ident, &filter_fn\n+                    )\n+                );\n+            }\n+        }\n+\n+        suggestions\n+    }\n+\n     fn find_module(&mut self,\n                    module_def: Def)\n                    -> Option<(Module<'a>, ImportSuggestion)>"}, {"sha": "fc39691c507e01067e4e101876046d17877eae90", "filename": "src/test/run-make-fulldeps/use-suggestions-rust-2018/Makefile", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f7202e40f49d2b29635f095a3270a7214e25ce8b/src%2Ftest%2Frun-make-fulldeps%2Fuse-suggestions-rust-2018%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/f7202e40f49d2b29635f095a3270a7214e25ce8b/src%2Ftest%2Frun-make-fulldeps%2Fuse-suggestions-rust-2018%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fuse-suggestions-rust-2018%2FMakefile?ref=f7202e40f49d2b29635f095a3270a7214e25ce8b", "patch": "@@ -0,0 +1,7 @@\n+-include ../tools.mk\n+\n+all:\n+\t$(RUSTC) ep-nested-lib.rs\n+\n+\t$(RUSTC) use-suggestions.rs --edition=2018 --extern ep_nested_lib=$(TMPDIR)/libep_nested_lib.rlib 2>&1 | $(CGREP) \"use ep_nested_lib::foo::bar::Baz\"\n+"}, {"sha": "c0bce6e3371d07f843dcab27d8ef824b2fc40bfb", "filename": "src/test/run-make-fulldeps/use-suggestions-rust-2018/ep-nested-lib.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/f7202e40f49d2b29635f095a3270a7214e25ce8b/src%2Ftest%2Frun-make-fulldeps%2Fuse-suggestions-rust-2018%2Fep-nested-lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7202e40f49d2b29635f095a3270a7214e25ce8b/src%2Ftest%2Frun-make-fulldeps%2Fuse-suggestions-rust-2018%2Fep-nested-lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fuse-suggestions-rust-2018%2Fep-nested-lib.rs?ref=f7202e40f49d2b29635f095a3270a7214e25ce8b", "patch": "@@ -0,0 +1,17 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![crate_type = \"rlib\"]\n+\n+pub mod foo {\n+    pub mod bar {\n+        pub struct Baz;\n+    }\n+}"}, {"sha": "62730a5653f32be709d16332fa0262f01f16ba72", "filename": "src/test/run-make-fulldeps/use-suggestions-rust-2018/use-suggestions.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/f7202e40f49d2b29635f095a3270a7214e25ce8b/src%2Ftest%2Frun-make-fulldeps%2Fuse-suggestions-rust-2018%2Fuse-suggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7202e40f49d2b29635f095a3270a7214e25ce8b/src%2Ftest%2Frun-make-fulldeps%2Fuse-suggestions-rust-2018%2Fuse-suggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fuse-suggestions-rust-2018%2Fuse-suggestions.rs?ref=f7202e40f49d2b29635f095a3270a7214e25ce8b", "patch": "@@ -0,0 +1,13 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {\n+    let x = Baz{};\n+}"}, {"sha": "ef01294f941aa01d25ccf4aacd4dc854a9931be0", "filename": "src/test/ui/crate-in-paths.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/f7202e40f49d2b29635f095a3270a7214e25ce8b/src%2Ftest%2Fui%2Fcrate-in-paths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7202e40f49d2b29635f095a3270a7214e25ce8b/src%2Ftest%2Fui%2Fcrate-in-paths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcrate-in-paths.rs?ref=f7202e40f49d2b29635f095a3270a7214e25ce8b", "patch": "@@ -0,0 +1,22 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// edition:2018\n+\n+#![feature(edition_2018_preview)]\n+\n+mod bar {\n+    crate struct Foo;\n+}\n+\n+fn main() {\n+    Foo;\n+    //~^ ERROR cannot find value `Foo` in this scope [E0425]\n+}"}, {"sha": "5bb1a28ebb860facd1daa16e3efa6a9eb965c371", "filename": "src/test/ui/crate-in-paths.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/f7202e40f49d2b29635f095a3270a7214e25ce8b/src%2Ftest%2Fui%2Fcrate-in-paths.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f7202e40f49d2b29635f095a3270a7214e25ce8b/src%2Ftest%2Fui%2Fcrate-in-paths.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcrate-in-paths.stderr?ref=f7202e40f49d2b29635f095a3270a7214e25ce8b", "patch": "@@ -0,0 +1,13 @@\n+error[E0425]: cannot find value `Foo` in this scope\n+  --> $DIR/crate-in-paths.rs:20:5\n+   |\n+LL |     Foo;\n+   |     ^^^ not found in this scope\n+help: possible candidate is found in another module, you can import it into scope\n+   |\n+LL | use crate::bar::Foo;\n+   |\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0425`."}]}