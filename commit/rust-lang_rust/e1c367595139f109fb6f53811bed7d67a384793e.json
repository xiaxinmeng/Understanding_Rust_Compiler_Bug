{"sha": "e1c367595139f109fb6f53811bed7d67a384793e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUxYzM2NzU5NTEzOWYxMDlmYjZmNTM4MTFiZWQ3ZDY3YTM4NDc5M2U=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2019-10-02T18:57:20Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-10-02T18:57:20Z"}, "message": "Merge #1945\n\n1945: Handle divergence in type inference for blocks r=flodiebold a=lnicola\n\nFixes #1944.\r\n\r\nThe `infer_basics` test is failing, not sure what to do about it.\n\nCo-authored-by: Lauren\u021biu Nicola <lnicola@dend.ro>", "tree": {"sha": "afcdff55850259d9253af48ec63c236afcda1d7f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/afcdff55850259d9253af48ec63c236afcda1d7f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e1c367595139f109fb6f53811bed7d67a384793e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdlPMQCRBK7hj4Ov3rIwAAdHIIAE57UfuTlQwboWMnPYUxLEdE\nQXWTyQy5+f3qC07tzH6VesHuxnxpOTSHXuunUyyYQdnt1X97hhE+lbzNrA1R3t+F\nQOKMMCZPLwKL/3BOBrxUICcxSakKFZVbdSt3HyxOzce4Tir6Fu5GmKk68qEUEy+4\nbX2Rzrr0nzoEl68hfiOPu2MbjOVqVQWT7DjlPc3p4ayYn1CK/Xcd6pCJtwP1AzkH\nXEbUalr0cWK7nm4X7pF02zEnaAh82JDWFHV2wJ1WZxfntpE+K1v4QhCy2hdxzQrB\nen88gXNOQlxak5HOnkyvVVOISg5elsWPi3CJXZpJv128wkRqkBi2O4l3l8oaowM=\n=tTV5\n-----END PGP SIGNATURE-----\n", "payload": "tree afcdff55850259d9253af48ec63c236afcda1d7f\nparent ba3ec8b1508e6f07159fd78ed569bbf47e9936ba\nparent f491567fb30b0956b3a0a90ed43099953a3e732a\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1570042640 +0000\ncommitter GitHub <noreply@github.com> 1570042640 +0000\n\nMerge #1945\n\n1945: Handle divergence in type inference for blocks r=flodiebold a=lnicola\n\nFixes #1944.\r\n\r\nThe `infer_basics` test is failing, not sure what to do about it.\n\nCo-authored-by: Lauren\u021biu Nicola <lnicola@dend.ro>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e1c367595139f109fb6f53811bed7d67a384793e", "html_url": "https://github.com/rust-lang/rust/commit/e1c367595139f109fb6f53811bed7d67a384793e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e1c367595139f109fb6f53811bed7d67a384793e/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ba3ec8b1508e6f07159fd78ed569bbf47e9936ba", "url": "https://api.github.com/repos/rust-lang/rust/commits/ba3ec8b1508e6f07159fd78ed569bbf47e9936ba", "html_url": "https://github.com/rust-lang/rust/commit/ba3ec8b1508e6f07159fd78ed569bbf47e9936ba"}, {"sha": "f491567fb30b0956b3a0a90ed43099953a3e732a", "url": "https://api.github.com/repos/rust-lang/rust/commits/f491567fb30b0956b3a0a90ed43099953a3e732a", "html_url": "https://github.com/rust-lang/rust/commit/f491567fb30b0956b3a0a90ed43099953a3e732a"}], "stats": {"total": 75, "additions": 72, "deletions": 3}, "files": [{"sha": "ca9aefc42f7b4f646a70d6636216af15bf24430e", "filename": "crates/ra_hir/src/ty/infer.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e1c367595139f109fb6f53811bed7d67a384793e/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1c367595139f109fb6f53811bed7d67a384793e/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs?ref=e1c367595139f109fb6f53811bed7d67a384793e", "patch": "@@ -1602,6 +1602,7 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n         tail: Option<ExprId>,\n         expected: &Expectation,\n     ) -> Ty {\n+        let mut diverges = false;\n         for stmt in statements {\n             match stmt {\n                 Statement::Let { pat, type_ref, initializer } => {\n@@ -1623,16 +1624,23 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n                     self.infer_pat(*pat, &ty, BindingMode::default());\n                 }\n                 Statement::Expr(expr) => {\n-                    self.infer_expr(*expr, &Expectation::none());\n+                    if let ty_app!(TypeCtor::Never) = self.infer_expr(*expr, &Expectation::none()) {\n+                        diverges = true;\n+                    }\n                 }\n             }\n         }\n \n-        if let Some(expr) = tail {\n+        let ty = if let Some(expr) = tail {\n             self.infer_expr_coerce(expr, expected)\n         } else {\n             self.coerce(&Ty::unit(), &expected.ty);\n             Ty::unit()\n+        };\n+        if diverges {\n+            Ty::simple(TypeCtor::Never)\n+        } else {\n+            ty\n         }\n     }\n "}, {"sha": "66f63ca24011b8a071ed6e5ba3ff273bf471ba37", "filename": "crates/ra_hir/src/ty/tests.rs", "status": "modified", "additions": 62, "deletions": 1, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/e1c367595139f109fb6f53811bed7d67a384793e/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1c367595139f109fb6f53811bed7d67a384793e/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs?ref=e1c367595139f109fb6f53811bed7d67a384793e", "patch": "@@ -218,7 +218,7 @@ fn test(a: u32, b: isize, c: !, d: &str) {\n     [17; 18) 'b': isize\n     [27; 28) 'c': !\n     [33; 34) 'd': &str\n-    [42; 121) '{     ...f32; }': ()\n+    [42; 121) '{     ...f32; }': !\n     [48; 49) 'a': u32\n     [55; 56) 'b': isize\n     [62; 63) 'c': !\n@@ -980,6 +980,67 @@ fn main(foo: Foo) {\n     )\n }\n \n+#[test]\n+fn infer_if_match_with_return() {\n+    assert_snapshot!(\n+        infer(r#\"\n+fn foo() {\n+    let _x1 = if true {\n+        1\n+    } else {\n+        return;\n+    };\n+    let _x2 = if true {\n+        2\n+    } else {\n+        return\n+    };\n+    let _x3 = match true {\n+        true => 3,\n+        _ => {\n+            return;\n+        }\n+    };\n+    let _x4 = match true {\n+        true => 4,\n+        _ => return\n+    };\n+}\"#),\n+        @r###\"\n+    [10; 323) '{     ...  }; }': ()\n+    [20; 23) '_x1': i32\n+    [26; 80) 'if tru...     }': i32\n+    [29; 33) 'true': bool\n+    [34; 51) '{     ...     }': i32\n+    [44; 45) '1': i32\n+    [57; 80) '{     ...     }': !\n+    [67; 73) 'return': !\n+    [90; 93) '_x2': i32\n+    [96; 149) 'if tru...     }': i32\n+    [99; 103) 'true': bool\n+    [104; 121) '{     ...     }': i32\n+    [114; 115) '2': i32\n+    [127; 149) '{     ...     }': !\n+    [137; 143) 'return': !\n+    [159; 162) '_x3': i32\n+    [165; 247) 'match ...     }': i32\n+    [171; 175) 'true': bool\n+    [186; 190) 'true': bool\n+    [194; 195) '3': i32\n+    [205; 206) '_': bool\n+    [210; 241) '{     ...     }': !\n+    [224; 230) 'return': !\n+    [257; 260) '_x4': i32\n+    [263; 320) 'match ...     }': i32\n+    [269; 273) 'true': bool\n+    [284; 288) 'true': bool\n+    [292; 293) '4': i32\n+    [303; 304) '_': bool\n+    [308; 314) 'return': !\n+    \"###\n+    )\n+}\n+\n #[test]\n fn infer_inherent_method() {\n     assert_snapshot!("}]}