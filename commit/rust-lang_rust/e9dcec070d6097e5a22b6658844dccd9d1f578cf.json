{"sha": "e9dcec070d6097e5a22b6658844dccd9d1f578cf", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU5ZGNlYzA3MGQ2MDk3ZTVhMjJiNjY1ODg0NGRjY2Q5ZDFmNTc4Y2Y=", "commit": {"author": {"name": "Corey Farwell", "email": "coreyf@rwell.org", "date": "2018-03-25T02:56:07Z"}, "committer": {"name": "Corey Farwell", "email": "coreyf@rwell.org", "date": "2018-03-28T11:15:05Z"}, "message": "Remove hidden `foo` functions from doc examples; use `Termination` trait.\n\nFixes https://github.com/rust-lang/rust/issues/49233.", "tree": {"sha": "55e8b941869356e739f8e4b7cc2d8da14641bbcb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/55e8b941869356e739f8e4b7cc2d8da14641bbcb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e9dcec070d6097e5a22b6658844dccd9d1f578cf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e9dcec070d6097e5a22b6658844dccd9d1f578cf", "html_url": "https://github.com/rust-lang/rust/commit/e9dcec070d6097e5a22b6658844dccd9d1f578cf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e9dcec070d6097e5a22b6658844dccd9d1f578cf/comments", "author": {"login": "frewsxcv", "id": 416575, "node_id": "MDQ6VXNlcjQxNjU3NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/416575?v=4", "gravatar_id": "", "url": "https://api.github.com/users/frewsxcv", "html_url": "https://github.com/frewsxcv", "followers_url": "https://api.github.com/users/frewsxcv/followers", "following_url": "https://api.github.com/users/frewsxcv/following{/other_user}", "gists_url": "https://api.github.com/users/frewsxcv/gists{/gist_id}", "starred_url": "https://api.github.com/users/frewsxcv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/frewsxcv/subscriptions", "organizations_url": "https://api.github.com/users/frewsxcv/orgs", "repos_url": "https://api.github.com/users/frewsxcv/repos", "events_url": "https://api.github.com/users/frewsxcv/events{/privacy}", "received_events_url": "https://api.github.com/users/frewsxcv/received_events", "type": "User", "site_admin": false}, "committer": {"login": "frewsxcv", "id": 416575, "node_id": "MDQ6VXNlcjQxNjU3NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/416575?v=4", "gravatar_id": "", "url": "https://api.github.com/users/frewsxcv", "html_url": "https://github.com/frewsxcv", "followers_url": "https://api.github.com/users/frewsxcv/followers", "following_url": "https://api.github.com/users/frewsxcv/following{/other_user}", "gists_url": "https://api.github.com/users/frewsxcv/gists{/gist_id}", "starred_url": "https://api.github.com/users/frewsxcv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/frewsxcv/subscriptions", "organizations_url": "https://api.github.com/users/frewsxcv/orgs", "repos_url": "https://api.github.com/users/frewsxcv/repos", "events_url": "https://api.github.com/users/frewsxcv/events{/privacy}", "received_events_url": "https://api.github.com/users/frewsxcv/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c19264fa835a1eca86de4fd2e86a87b3919e57cf", "url": "https://api.github.com/repos/rust-lang/rust/commits/c19264fa835a1eca86de4fd2e86a87b3919e57cf", "html_url": "https://github.com/rust-lang/rust/commit/c19264fa835a1eca86de4fd2e86a87b3919e57cf"}], "stats": {"total": 2257, "additions": 1130, "deletions": 1127}, "files": [{"sha": "320a9f935d45336a8c9f6b90f0ee07428452da54", "filename": "src/libstd/env.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e9dcec070d6097e5a22b6658844dccd9d1f578cf/src%2Flibstd%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9dcec070d6097e5a22b6658844dccd9d1f578cf/src%2Flibstd%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fenv.rs?ref=e9dcec070d6097e5a22b6658844dccd9d1f578cf", "patch": "@@ -552,17 +552,17 @@ pub fn home_dir() -> Option<PathBuf> {\n ///\n /// [msdn]: https://msdn.microsoft.com/en-us/library/windows/desktop/aa364992(v=vs.85).aspx\n ///\n-/// ```\n+/// ```no_run\n /// use std::env;\n /// use std::fs::File;\n ///\n-/// # fn foo() -> std::io::Result<()> {\n-/// let mut dir = env::temp_dir();\n-/// dir.push(\"foo.txt\");\n+/// fn main() -> std::io::Result<()> {\n+///     let mut dir = env::temp_dir();\n+///     dir.push(\"foo.txt\");\n ///\n-/// let f = File::create(dir)?;\n-/// # Ok(())\n-/// # }\n+///     let f = File::create(dir)?;\n+///     Ok(())\n+/// }\n /// ```\n #[stable(feature = \"env\", since = \"1.0.0\")]\n pub fn temp_dir() -> PathBuf {"}, {"sha": "46d164e31ba450d2f54b5e36be3f496e316b17a5", "filename": "src/libstd/fs.rs", "status": "modified", "additions": 265, "deletions": 263, "changes": 528, "blob_url": "https://github.com/rust-lang/rust/blob/e9dcec070d6097e5a22b6658844dccd9d1f578cf/src%2Flibstd%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9dcec070d6097e5a22b6658844dccd9d1f578cf/src%2Flibstd%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffs.rs?ref=e9dcec070d6097e5a22b6658844dccd9d1f578cf", "patch": "@@ -41,11 +41,11 @@ use time::SystemTime;\n /// use std::fs::File;\n /// use std::io::prelude::*;\n ///\n-/// # fn foo() -> std::io::Result<()> {\n-/// let mut file = File::create(\"foo.txt\")?;\n-/// file.write_all(b\"Hello, world!\")?;\n-/// # Ok(())\n-/// # }\n+/// fn main() -> std::io::Result<()> {\n+///     let mut file = File::create(\"foo.txt\")?;\n+///     file.write_all(b\"Hello, world!\")?;\n+///     Ok(())\n+/// }\n /// ```\n ///\n /// Read the contents of a file into a [`String`]:\n@@ -54,13 +54,13 @@ use time::SystemTime;\n /// use std::fs::File;\n /// use std::io::prelude::*;\n ///\n-/// # fn foo() -> std::io::Result<()> {\n-/// let mut file = File::open(\"foo.txt\")?;\n-/// let mut contents = String::new();\n-/// file.read_to_string(&mut contents)?;\n-/// assert_eq!(contents, \"Hello, world!\");\n-/// # Ok(())\n-/// # }\n+/// fn main() -> std::io::Result<()> {\n+///     let mut file = File::open(\"foo.txt\")?;\n+///     let mut contents = String::new();\n+///     file.read_to_string(&mut contents)?;\n+///     assert_eq!(contents, \"Hello, world!\");\n+///     Ok(())\n+/// }\n /// ```\n ///\n /// It can be more efficient to read the contents of a file with a buffered\n@@ -71,14 +71,14 @@ use time::SystemTime;\n /// use std::io::BufReader;\n /// use std::io::prelude::*;\n ///\n-/// # fn foo() -> std::io::Result<()> {\n-/// let file = File::open(\"foo.txt\")?;\n-/// let mut buf_reader = BufReader::new(file);\n-/// let mut contents = String::new();\n-/// buf_reader.read_to_string(&mut contents)?;\n-/// assert_eq!(contents, \"Hello, world!\");\n-/// # Ok(())\n-/// # }\n+/// fn main() -> std::io::Result<()> {\n+///     let file = File::open(\"foo.txt\")?;\n+///     let mut buf_reader = BufReader::new(file);\n+///     let mut contents = String::new();\n+///     buf_reader.read_to_string(&mut contents)?;\n+///     assert_eq!(contents, \"Hello, world!\");\n+///     Ok(())\n+/// }\n /// ```\n ///\n /// Note that, although read and write methods require a `&mut File`, because\n@@ -256,10 +256,10 @@ fn initial_buffer_size(file: &File) -> usize {\n /// use std::fs;\n /// use std::net::SocketAddr;\n ///\n-/// # fn foo() -> Result<(), Box<std::error::Error + 'static>> {\n-/// let foo: SocketAddr = String::from_utf8_lossy(&fs::read(\"address.txt\")?).parse()?;\n-/// # Ok(())\n-/// # }\n+/// fn main() -> Result<(), Box<std::error::Error + 'static>> {\n+///     let foo: SocketAddr = String::from_utf8_lossy(&fs::read(\"address.txt\")?).parse()?;\n+///     Ok(())\n+/// }\n /// ```\n #[unstable(feature = \"fs_read_write\", issue = \"46588\")]\n pub fn read<P: AsRef<Path>>(path: P) -> io::Result<Vec<u8>> {\n@@ -298,10 +298,10 @@ pub fn read<P: AsRef<Path>>(path: P) -> io::Result<Vec<u8>> {\n /// use std::fs;\n /// use std::net::SocketAddr;\n ///\n-/// # fn foo() -> Result<(), Box<std::error::Error + 'static>> {\n-/// let foo: SocketAddr = fs::read_string(\"address.txt\")?.parse()?;\n-/// # Ok(())\n-/// # }\n+/// fn main() -> Result<(), Box<std::error::Error + 'static>> {\n+///     let foo: SocketAddr = fs::read_string(\"address.txt\")?.parse()?;\n+///     Ok(())\n+/// }\n /// ```\n #[unstable(feature = \"fs_read_write\", issue = \"46588\")]\n pub fn read_string<P: AsRef<Path>>(path: P) -> io::Result<String> {\n@@ -329,10 +329,10 @@ pub fn read_string<P: AsRef<Path>>(path: P) -> io::Result<String> {\n ///\n /// use std::fs;\n ///\n-/// # fn foo() -> std::io::Result<()> {\n-/// fs::write(\"foo.txt\", b\"Lorem ipsum\")?;\n-/// # Ok(())\n-/// # }\n+/// fn main() -> std::io::Result<()> {\n+///     fs::write(\"foo.txt\", b\"Lorem ipsum\")?;\n+///     Ok(())\n+/// }\n /// ```\n #[unstable(feature = \"fs_read_write\", issue = \"46588\")]\n pub fn write<P: AsRef<Path>, C: AsRef<[u8]>>(path: P, contents: C) -> io::Result<()> {\n@@ -356,7 +356,7 @@ impl File {\n     /// ```no_run\n     /// use std::fs::File;\n     ///\n-    /// # fn foo() -> std::io::Result<()> {\n+    /// fn main() -> std::io::Result<()> {\n     /// let mut f = File::open(\"foo.txt\")?;\n     /// # Ok(())\n     /// # }\n@@ -380,10 +380,10 @@ impl File {\n     /// ```no_run\n     /// use std::fs::File;\n     ///\n-    /// # fn foo() -> std::io::Result<()> {\n-    /// let mut f = File::create(\"foo.txt\")?;\n-    /// # Ok(())\n-    /// # }\n+    /// fn main() -> std::io::Result<()> {\n+    ///     let mut f = File::create(\"foo.txt\")?;\n+    ///     Ok(())\n+    /// }\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn create<P: AsRef<Path>>(path: P) -> io::Result<File> {\n@@ -401,13 +401,13 @@ impl File {\n     /// use std::fs::File;\n     /// use std::io::prelude::*;\n     ///\n-    /// # fn foo() -> std::io::Result<()> {\n-    /// let mut f = File::create(\"foo.txt\")?;\n-    /// f.write_all(b\"Hello, world!\")?;\n+    /// fn main() -> std::io::Result<()> {\n+    ///     let mut f = File::create(\"foo.txt\")?;\n+    ///     f.write_all(b\"Hello, world!\")?;\n     ///\n-    /// f.sync_all()?;\n-    /// # Ok(())\n-    /// # }\n+    ///     f.sync_all()?;\n+    ///     Ok(())\n+    /// }\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn sync_all(&self) -> io::Result<()> {\n@@ -432,13 +432,13 @@ impl File {\n     /// use std::fs::File;\n     /// use std::io::prelude::*;\n     ///\n-    /// # fn foo() -> std::io::Result<()> {\n-    /// let mut f = File::create(\"foo.txt\")?;\n-    /// f.write_all(b\"Hello, world!\")?;\n+    /// fn main() -> std::io::Result<()> {\n+    ///     let mut f = File::create(\"foo.txt\")?;\n+    ///     f.write_all(b\"Hello, world!\")?;\n     ///\n-    /// f.sync_data()?;\n-    /// # Ok(())\n-    /// # }\n+    ///     f.sync_data()?;\n+    ///     Ok(())\n+    /// }\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn sync_data(&self) -> io::Result<()> {\n@@ -466,11 +466,11 @@ impl File {\n     /// ```no_run\n     /// use std::fs::File;\n     ///\n-    /// # fn foo() -> std::io::Result<()> {\n-    /// let mut f = File::create(\"foo.txt\")?;\n-    /// f.set_len(10)?;\n-    /// # Ok(())\n-    /// # }\n+    /// fn main() -> std::io::Result<()> {\n+    ///     let mut f = File::create(\"foo.txt\")?;\n+    ///     f.set_len(10)?;\n+    ///     Ok(())\n+    /// }\n     /// ```\n     ///\n     /// Note that this method alters the content of the underlying file, even\n@@ -487,11 +487,11 @@ impl File {\n     /// ```no_run\n     /// use std::fs::File;\n     ///\n-    /// # fn foo() -> std::io::Result<()> {\n-    /// let mut f = File::open(\"foo.txt\")?;\n-    /// let metadata = f.metadata()?;\n-    /// # Ok(())\n-    /// # }\n+    /// fn main() -> std::io::Result<()> {\n+    ///     let mut f = File::open(\"foo.txt\")?;\n+    ///     let metadata = f.metadata()?;\n+    ///     Ok(())\n+    /// }\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn metadata(&self) -> io::Result<Metadata> {\n@@ -509,11 +509,11 @@ impl File {\n     /// ```no_run\n     /// use std::fs::File;\n     ///\n-    /// # fn foo() -> std::io::Result<()> {\n-    /// let mut file = File::open(\"foo.txt\")?;\n-    /// let file_copy = file.try_clone()?;\n-    /// # Ok(())\n-    /// # }\n+    /// fn main() -> std::io::Result<()> {\n+    ///     let mut file = File::open(\"foo.txt\")?;\n+    ///     let file_copy = file.try_clone()?;\n+    ///     Ok(())\n+    /// }\n     /// ```\n     ///\n     /// Assuming there\u2019s a file named `foo.txt` with contents `abcdef\\n`, create\n@@ -525,17 +525,17 @@ impl File {\n     /// use std::io::SeekFrom;\n     /// use std::io::prelude::*;\n     ///\n-    /// # fn foo() -> std::io::Result<()> {\n-    /// let mut file = File::open(\"foo.txt\")?;\n-    /// let mut file_copy = file.try_clone()?;\n+    /// fn main() -> std::io::Result<()> {\n+    ///     let mut file = File::open(\"foo.txt\")?;\n+    ///     let mut file_copy = file.try_clone()?;\n     ///\n-    /// file.seek(SeekFrom::Start(3))?;\n+    ///     file.seek(SeekFrom::Start(3))?;\n     ///\n-    /// let mut contents = vec![];\n-    /// file_copy.read_to_end(&mut contents)?;\n-    /// assert_eq!(contents, b\"def\\n\");\n-    /// # Ok(())\n-    /// # }\n+    ///     let mut contents = vec![];\n+    ///     file_copy.read_to_end(&mut contents)?;\n+    ///     assert_eq!(contents, b\"def\\n\");\n+    ///     Ok(())\n+    /// }\n     /// ```\n     #[stable(feature = \"file_try_clone\", since = \"1.9.0\")]\n     pub fn try_clone(&self) -> io::Result<File> {\n@@ -562,16 +562,16 @@ impl File {\n     ///\n     /// # Examples\n     ///\n-    /// ```\n-    /// # fn foo() -> std::io::Result<()> {\n-    /// use std::fs::File;\n-    ///\n-    /// let file = File::open(\"foo.txt\")?;\n-    /// let mut perms = file.metadata()?.permissions();\n-    /// perms.set_readonly(true);\n-    /// file.set_permissions(perms)?;\n-    /// # Ok(())\n-    /// # }\n+    /// ```no_run\n+    /// fn main() -> std::io::Result<()> {\n+    ///     use std::fs::File;\n+    ///\n+    ///     let file = File::open(\"foo.txt\")?;\n+    ///     let mut perms = file.metadata()?.permissions();\n+    ///     perms.set_readonly(true);\n+    ///     file.set_permissions(perms)?;\n+    ///     Ok(())\n+    /// }\n     /// ```\n     ///\n     /// Note that this method alters the permissions of the underlying file,\n@@ -891,15 +891,15 @@ impl Metadata {\n     ///\n     /// # Examples\n     ///\n-    /// ```\n-    /// # fn foo() -> std::io::Result<()> {\n-    /// use std::fs;\n+    /// ```no_run\n+    /// fn main() -> std::io::Result<()> {\n+    ///     use std::fs;\n     ///\n-    /// let metadata = fs::metadata(\"foo.txt\")?;\n+    ///     let metadata = fs::metadata(\"foo.txt\")?;\n     ///\n-    /// println!(\"{:?}\", metadata.file_type());\n-    /// # Ok(())\n-    /// # }\n+    ///     println!(\"{:?}\", metadata.file_type());\n+    ///     Ok(())\n+    /// }\n     /// ```\n     #[stable(feature = \"file_type\", since = \"1.1.0\")]\n     pub fn file_type(&self) -> FileType {\n@@ -910,15 +910,15 @@ impl Metadata {\n     ///\n     /// # Examples\n     ///\n-    /// ```\n-    /// # fn foo() -> std::io::Result<()> {\n-    /// use std::fs;\n+    /// ```no_run\n+    /// fn main() -> std::io::Result<()> {\n+    ///     use std::fs;\n     ///\n-    /// let metadata = fs::metadata(\"foo.txt\")?;\n+    ///     let metadata = fs::metadata(\"foo.txt\")?;\n     ///\n-    /// assert!(!metadata.is_dir());\n-    /// # Ok(())\n-    /// # }\n+    ///     assert!(!metadata.is_dir());\n+    ///     Ok(())\n+    /// }\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn is_dir(&self) -> bool { self.file_type().is_dir() }\n@@ -927,15 +927,15 @@ impl Metadata {\n     ///\n     /// # Examples\n     ///\n-    /// ```\n-    /// # fn foo() -> std::io::Result<()> {\n+    /// ```no_run\n     /// use std::fs;\n     ///\n-    /// let metadata = fs::metadata(\"foo.txt\")?;\n+    /// fn main() -> std::io::Result<()> {\n+    ///     let metadata = fs::metadata(\"foo.txt\")?;\n     ///\n-    /// assert!(metadata.is_file());\n-    /// # Ok(())\n-    /// # }\n+    ///     assert!(metadata.is_file());\n+    ///     Ok(())\n+    /// }\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn is_file(&self) -> bool { self.file_type().is_file() }\n@@ -944,15 +944,15 @@ impl Metadata {\n     ///\n     /// # Examples\n     ///\n-    /// ```\n-    /// # fn foo() -> std::io::Result<()> {\n+    /// ```no_run\n     /// use std::fs;\n     ///\n-    /// let metadata = fs::metadata(\"foo.txt\")?;\n+    /// fn main() -> std::io::Result<()> {\n+    ///     let metadata = fs::metadata(\"foo.txt\")?;\n     ///\n-    /// assert_eq!(0, metadata.len());\n-    /// # Ok(())\n-    /// # }\n+    ///     assert_eq!(0, metadata.len());\n+    ///     Ok(())\n+    /// }\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn len(&self) -> u64 { self.0.size() }\n@@ -961,15 +961,15 @@ impl Metadata {\n     ///\n     /// # Examples\n     ///\n-    /// ```\n-    /// # fn foo() -> std::io::Result<()> {\n+    /// ```no_run\n     /// use std::fs;\n     ///\n-    /// let metadata = fs::metadata(\"foo.txt\")?;\n+    /// fn main() -> std::io::Result<()> {\n+    ///     let metadata = fs::metadata(\"foo.txt\")?;\n     ///\n-    /// assert!(!metadata.permissions().readonly());\n-    /// # Ok(())\n-    /// # }\n+    ///     assert!(!metadata.permissions().readonly());\n+    ///     Ok(())\n+    /// }\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn permissions(&self) -> Permissions {\n@@ -988,19 +988,19 @@ impl Metadata {\n     ///\n     /// # Examples\n     ///\n-    /// ```\n-    /// # fn foo() -> std::io::Result<()> {\n+    /// ```no_run\n     /// use std::fs;\n     ///\n-    /// let metadata = fs::metadata(\"foo.txt\")?;\n+    /// fn main() -> std::io::Result<()> {\n+    ///     let metadata = fs::metadata(\"foo.txt\")?;\n     ///\n-    /// if let Ok(time) = metadata.modified() {\n-    ///     println!(\"{:?}\", time);\n-    /// } else {\n-    ///     println!(\"Not supported on this platform\");\n+    ///     if let Ok(time) = metadata.modified() {\n+    ///         println!(\"{:?}\", time);\n+    ///     } else {\n+    ///         println!(\"Not supported on this platform\");\n+    ///     }\n+    ///     Ok(())\n     /// }\n-    /// # Ok(())\n-    /// # }\n     /// ```\n     #[stable(feature = \"fs_time\", since = \"1.10.0\")]\n     pub fn modified(&self) -> io::Result<SystemTime> {\n@@ -1023,19 +1023,19 @@ impl Metadata {\n     ///\n     /// # Examples\n     ///\n-    /// ```\n-    /// # fn foo() -> std::io::Result<()> {\n+    /// ```no_run\n     /// use std::fs;\n     ///\n-    /// let metadata = fs::metadata(\"foo.txt\")?;\n+    /// fn main() -> std::io::Result<()> {\n+    ///     let metadata = fs::metadata(\"foo.txt\")?;\n     ///\n-    /// if let Ok(time) = metadata.accessed() {\n-    ///     println!(\"{:?}\", time);\n-    /// } else {\n-    ///     println!(\"Not supported on this platform\");\n+    ///     if let Ok(time) = metadata.accessed() {\n+    ///         println!(\"{:?}\", time);\n+    ///     } else {\n+    ///         println!(\"Not supported on this platform\");\n+    ///     }\n+    ///     Ok(())\n     /// }\n-    /// # Ok(())\n-    /// # }\n     /// ```\n     #[stable(feature = \"fs_time\", since = \"1.10.0\")]\n     pub fn accessed(&self) -> io::Result<SystemTime> {\n@@ -1054,19 +1054,19 @@ impl Metadata {\n     ///\n     /// # Examples\n     ///\n-    /// ```\n-    /// # fn foo() -> std::io::Result<()> {\n+    /// ```no_run\n     /// use std::fs;\n     ///\n-    /// let metadata = fs::metadata(\"foo.txt\")?;\n+    /// fn main() -> std::io::Result<()> {\n+    ///     let metadata = fs::metadata(\"foo.txt\")?;\n     ///\n-    /// if let Ok(time) = metadata.created() {\n-    ///     println!(\"{:?}\", time);\n-    /// } else {\n-    ///     println!(\"Not supported on this platform\");\n+    ///     if let Ok(time) = metadata.created() {\n+    ///         println!(\"{:?}\", time);\n+    ///     } else {\n+    ///         println!(\"Not supported on this platform\");\n+    ///     }\n+    ///     Ok(())\n     /// }\n-    /// # Ok(())\n-    /// # }\n     /// ```\n     #[stable(feature = \"fs_time\", since = \"1.10.0\")]\n     pub fn created(&self) -> io::Result<SystemTime> {\n@@ -1098,16 +1098,16 @@ impl Permissions {\n     ///\n     /// # Examples\n     ///\n-    /// ```\n+    /// ```no_run\n     /// use std::fs::File;\n     ///\n-    /// # fn foo() -> std::io::Result<()> {\n-    /// let mut f = File::create(\"foo.txt\")?;\n-    /// let metadata = f.metadata()?;\n+    /// fn main() -> std::io::Result<()> {\n+    ///     let mut f = File::create(\"foo.txt\")?;\n+    ///     let metadata = f.metadata()?;\n     ///\n-    /// assert_eq!(false, metadata.permissions().readonly());\n-    /// # Ok(())\n-    /// # }\n+    ///     assert_eq!(false, metadata.permissions().readonly());\n+    ///     Ok(())\n+    /// }\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn readonly(&self) -> bool { self.0.readonly() }\n@@ -1123,23 +1123,23 @@ impl Permissions {\n     ///\n     /// # Examples\n     ///\n-    /// ```\n+    /// ```no_run\n     /// use std::fs::File;\n     ///\n-    /// # fn foo() -> std::io::Result<()> {\n-    /// let f = File::create(\"foo.txt\")?;\n-    /// let metadata = f.metadata()?;\n-    /// let mut permissions = metadata.permissions();\n+    /// fn main() -> std::io::Result<()> {\n+    ///     let f = File::create(\"foo.txt\")?;\n+    ///     let metadata = f.metadata()?;\n+    ///     let mut permissions = metadata.permissions();\n     ///\n-    /// permissions.set_readonly(true);\n+    ///     permissions.set_readonly(true);\n     ///\n-    /// // filesystem doesn't change\n-    /// assert_eq!(false, metadata.permissions().readonly());\n+    ///     // filesystem doesn't change\n+    ///     assert_eq!(false, metadata.permissions().readonly());\n     ///\n-    /// // just this particular `permissions`.\n-    /// assert_eq!(true, permissions.readonly());\n-    /// # Ok(())\n-    /// # }\n+    ///     // just this particular `permissions`.\n+    ///     assert_eq!(true, permissions.readonly());\n+    ///     Ok(())\n+    /// }\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn set_readonly(&mut self, readonly: bool) {\n@@ -1152,16 +1152,16 @@ impl FileType {\n     ///\n     /// # Examples\n     ///\n-    /// ```\n-    /// # fn foo() -> std::io::Result<()> {\n-    /// use std::fs;\n+    /// ```no_run\n+    /// fn main() -> std::io::Result<()> {\n+    ///     use std::fs;\n     ///\n-    /// let metadata = fs::metadata(\"foo.txt\")?;\n-    /// let file_type = metadata.file_type();\n+    ///     let metadata = fs::metadata(\"foo.txt\")?;\n+    ///     let file_type = metadata.file_type();\n     ///\n-    /// assert_eq!(file_type.is_dir(), false);\n-    /// # Ok(())\n-    /// # }\n+    ///     assert_eq!(file_type.is_dir(), false);\n+    ///     Ok(())\n+    /// }\n     /// ```\n     #[stable(feature = \"file_type\", since = \"1.1.0\")]\n     pub fn is_dir(&self) -> bool { self.0.is_dir() }\n@@ -1170,16 +1170,16 @@ impl FileType {\n     ///\n     /// # Examples\n     ///\n-    /// ```\n-    /// # fn foo() -> std::io::Result<()> {\n-    /// use std::fs;\n+    /// ```no_run\n+    /// fn main() -> std::io::Result<()> {\n+    ///     use std::fs;\n     ///\n-    /// let metadata = fs::metadata(\"foo.txt\")?;\n-    /// let file_type = metadata.file_type();\n+    ///     let metadata = fs::metadata(\"foo.txt\")?;\n+    ///     let file_type = metadata.file_type();\n     ///\n-    /// assert_eq!(file_type.is_file(), true);\n-    /// # Ok(())\n-    /// # }\n+    ///     assert_eq!(file_type.is_file(), true);\n+    ///     Ok(())\n+    /// }\n     /// ```\n     #[stable(feature = \"file_type\", since = \"1.1.0\")]\n     pub fn is_file(&self) -> bool { self.0.is_file() }\n@@ -1199,16 +1199,16 @@ impl FileType {\n     ///\n     /// # Examples\n     ///\n-    /// ```\n-    /// # fn foo() -> std::io::Result<()> {\n+    /// ```no_run\n     /// use std::fs;\n     ///\n-    /// let metadata = fs::symlink_metadata(\"foo.txt\")?;\n-    /// let file_type = metadata.file_type();\n+    /// fn main() -> std::io::Result<()> {\n+    ///     let metadata = fs::symlink_metadata(\"foo.txt\")?;\n+    ///     let file_type = metadata.file_type();\n     ///\n-    /// assert_eq!(file_type.is_symlink(), false);\n-    /// # Ok(())\n-    /// # }\n+    ///     assert_eq!(file_type.is_symlink(), false);\n+    ///     Ok(())\n+    /// }\n     /// ```\n     #[stable(feature = \"file_type\", since = \"1.1.0\")]\n     pub fn is_symlink(&self) -> bool { self.0.is_symlink() }\n@@ -1245,15 +1245,16 @@ impl DirEntry {\n     ///\n     /// # Examples\n     ///\n-    /// ```\n+    /// ```no_run\n     /// use std::fs;\n-    /// # fn foo() -> std::io::Result<()> {\n-    /// for entry in fs::read_dir(\".\")? {\n-    ///     let dir = entry?;\n-    ///     println!(\"{:?}\", dir.path());\n+    ///\n+    /// fn main() -> std::io::Result<()> {\n+    ///     for entry in fs::read_dir(\".\")? {\n+    ///         let dir = entry?;\n+    ///         println!(\"{:?}\", dir.path());\n+    ///     }\n+    ///     Ok(())\n     /// }\n-    /// # Ok(())\n-    /// # }\n     /// ```\n     ///\n     /// This prints output like:\n@@ -1398,13 +1399,13 @@ impl AsInner<fs_imp::DirEntry> for DirEntry {\n ///\n /// # Examples\n ///\n-/// ```\n+/// ```no_run\n /// use std::fs;\n ///\n-/// # fn foo() -> std::io::Result<()> {\n-/// fs::remove_file(\"a.txt\")?;\n-/// # Ok(())\n-/// # }\n+/// fn main() -> std::io::Result<()> {\n+///     fs::remove_file(\"a.txt\")?;\n+///     Ok(())\n+/// }\n /// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub fn remove_file<P: AsRef<Path>>(path: P) -> io::Result<()> {\n@@ -1435,14 +1436,14 @@ pub fn remove_file<P: AsRef<Path>>(path: P) -> io::Result<()> {\n ///\n /// # Examples\n ///\n-/// ```rust\n-/// # fn foo() -> std::io::Result<()> {\n+/// ```rust,no_run\n /// use std::fs;\n ///\n-/// let attr = fs::metadata(\"/some/file/path.txt\")?;\n-/// // inspect attr ...\n-/// # Ok(())\n-/// # }\n+/// fn main() -> std::io::Result<()> {\n+///     let attr = fs::metadata(\"/some/file/path.txt\")?;\n+///     // inspect attr ...\n+///     Ok(())\n+/// }\n /// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub fn metadata<P: AsRef<Path>>(path: P) -> io::Result<Metadata> {\n@@ -1469,14 +1470,14 @@ pub fn metadata<P: AsRef<Path>>(path: P) -> io::Result<Metadata> {\n ///\n /// # Examples\n ///\n-/// ```rust\n-/// # fn foo() -> std::io::Result<()> {\n+/// ```rust,no_run\n /// use std::fs;\n ///\n-/// let attr = fs::symlink_metadata(\"/some/file/path.txt\")?;\n-/// // inspect attr ...\n-/// # Ok(())\n-/// # }\n+/// fn main() -> std::io::Result<()> {\n+///     let attr = fs::symlink_metadata(\"/some/file/path.txt\")?;\n+///     // inspect attr ...\n+///     Ok(())\n+/// }\n /// ```\n #[stable(feature = \"symlink_metadata\", since = \"1.1.0\")]\n pub fn symlink_metadata<P: AsRef<Path>>(path: P) -> io::Result<Metadata> {\n@@ -1513,13 +1514,13 @@ pub fn symlink_metadata<P: AsRef<Path>>(path: P) -> io::Result<Metadata> {\n ///\n /// # Examples\n ///\n-/// ```\n+/// ```no_run\n /// use std::fs;\n ///\n-/// # fn foo() -> std::io::Result<()> {\n-/// fs::rename(\"a.txt\", \"b.txt\")?; // Rename a.txt to b.txt\n-/// # Ok(())\n-/// # }\n+/// fn main() -> std::io::Result<()> {\n+///     fs::rename(\"a.txt\", \"b.txt\")?; // Rename a.txt to b.txt\n+///     Ok(())\n+/// }\n /// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub fn rename<P: AsRef<Path>, Q: AsRef<Path>>(from: P, to: Q) -> io::Result<()> {\n@@ -1564,9 +1565,10 @@ pub fn rename<P: AsRef<Path>, Q: AsRef<Path>>(from: P, to: Q) -> io::Result<()>\n /// ```no_run\n /// use std::fs;\n ///\n-/// # fn foo() -> std::io::Result<()> {\n-/// fs::copy(\"foo.txt\", \"bar.txt\")?;  // Copy foo.txt to bar.txt\n-/// # Ok(()) }\n+/// fn main() -> std::io::Result<()> {\n+///     fs::copy(\"foo.txt\", \"bar.txt\")?;  // Copy foo.txt to bar.txt\n+///     Ok(())\n+/// }\n /// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub fn copy<P: AsRef<Path>, Q: AsRef<Path>>(from: P, to: Q) -> io::Result<u64> {\n@@ -1595,13 +1597,13 @@ pub fn copy<P: AsRef<Path>, Q: AsRef<Path>>(from: P, to: Q) -> io::Result<u64> {\n ///\n /// # Examples\n ///\n-/// ```\n+/// ```no_run\n /// use std::fs;\n ///\n-/// # fn foo() -> std::io::Result<()> {\n-/// fs::hard_link(\"a.txt\", \"b.txt\")?; // Hard link a.txt to b.txt\n-/// # Ok(())\n-/// # }\n+/// fn main() -> std::io::Result<()> {\n+///     fs::hard_link(\"a.txt\", \"b.txt\")?; // Hard link a.txt to b.txt\n+///     Ok(())\n+/// }\n /// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub fn hard_link<P: AsRef<Path>, Q: AsRef<Path>>(src: P, dst: Q) -> io::Result<()> {\n@@ -1618,13 +1620,13 @@ pub fn hard_link<P: AsRef<Path>, Q: AsRef<Path>>(src: P, dst: Q) -> io::Result<(\n ///\n /// # Examples\n ///\n-/// ```\n+/// ```no_run\n /// use std::fs;\n ///\n-/// # fn foo() -> std::io::Result<()> {\n-/// fs::soft_link(\"a.txt\", \"b.txt\")?;\n-/// # Ok(())\n-/// # }\n+/// fn main() -> std::io::Result<()> {\n+///     fs::soft_link(\"a.txt\", \"b.txt\")?;\n+///     Ok(())\n+/// }\n /// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[rustc_deprecated(since = \"1.1.0\",\n@@ -1655,13 +1657,13 @@ pub fn soft_link<P: AsRef<Path>, Q: AsRef<Path>>(src: P, dst: Q) -> io::Result<(\n ///\n /// # Examples\n ///\n-/// ```\n+/// ```no_run\n /// use std::fs;\n ///\n-/// # fn foo() -> std::io::Result<()> {\n-/// let path = fs::read_link(\"a.txt\")?;\n-/// # Ok(())\n-/// # }\n+/// fn main() -> std::io::Result<()> {\n+///     let path = fs::read_link(\"a.txt\")?;\n+///     Ok(())\n+/// }\n /// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub fn read_link<P: AsRef<Path>>(path: P) -> io::Result<PathBuf> {\n@@ -1689,13 +1691,13 @@ pub fn read_link<P: AsRef<Path>>(path: P) -> io::Result<PathBuf> {\n ///\n /// # Examples\n ///\n-/// ```\n+/// ```no_run\n /// use std::fs;\n ///\n-/// # fn foo() -> std::io::Result<()> {\n-/// let path = fs::canonicalize(\"../a/../foo.txt\")?;\n-/// # Ok(())\n-/// # }\n+/// fn main() -> std::io::Result<()> {\n+///     let path = fs::canonicalize(\"../a/../foo.txt\")?;\n+///     Ok(())\n+/// }\n /// ```\n #[stable(feature = \"fs_canonicalize\", since = \"1.5.0\")]\n pub fn canonicalize<P: AsRef<Path>>(path: P) -> io::Result<PathBuf> {\n@@ -1722,13 +1724,13 @@ pub fn canonicalize<P: AsRef<Path>>(path: P) -> io::Result<PathBuf> {\n ///\n /// # Examples\n ///\n-/// ```\n+/// ```no_run\n /// use std::fs;\n ///\n-/// # fn foo() -> std::io::Result<()> {\n-/// fs::create_dir(\"/some/dir\")?;\n-/// # Ok(())\n-/// # }\n+/// fn main() -> std::io::Result<()> {\n+///     fs::create_dir(\"/some/dir\")?;\n+///     Ok(())\n+/// }\n /// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub fn create_dir<P: AsRef<Path>>(path: P) -> io::Result<()> {\n@@ -1764,13 +1766,13 @@ pub fn create_dir<P: AsRef<Path>>(path: P) -> io::Result<()> {\n ///\n /// # Examples\n ///\n-/// ```\n+/// ```no_run\n /// use std::fs;\n ///\n-/// # fn foo() -> std::io::Result<()> {\n-/// fs::create_dir_all(\"/some/dir\")?;\n-/// # Ok(())\n-/// # }\n+/// fn main() -> std::io::Result<()> {\n+///     fs::create_dir_all(\"/some/dir\")?;\n+///     Ok(())\n+/// }\n /// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub fn create_dir_all<P: AsRef<Path>>(path: P) -> io::Result<()> {\n@@ -1797,13 +1799,13 @@ pub fn create_dir_all<P: AsRef<Path>>(path: P) -> io::Result<()> {\n ///\n /// # Examples\n ///\n-/// ```\n+/// ```no_run\n /// use std::fs;\n ///\n-/// # fn foo() -> std::io::Result<()> {\n-/// fs::remove_dir(\"/some/dir\")?;\n-/// # Ok(())\n-/// # }\n+/// fn main() -> std::io::Result<()> {\n+///     fs::remove_dir(\"/some/dir\")?;\n+///     Ok(())\n+/// }\n /// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub fn remove_dir<P: AsRef<Path>>(path: P) -> io::Result<()> {\n@@ -1831,13 +1833,13 @@ pub fn remove_dir<P: AsRef<Path>>(path: P) -> io::Result<()> {\n ///\n /// # Examples\n ///\n-/// ```\n+/// ```no_run\n /// use std::fs;\n ///\n-/// # fn foo() -> std::io::Result<()> {\n-/// fs::remove_dir_all(\"/some/dir\")?;\n-/// # Ok(())\n-/// # }\n+/// fn main() -> std::io::Result<()> {\n+///     fs::remove_dir_all(\"/some/dir\")?;\n+///     Ok(())\n+/// }\n /// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub fn remove_dir_all<P: AsRef<Path>>(path: P) -> io::Result<()> {\n@@ -1917,15 +1919,15 @@ pub fn read_dir<P: AsRef<Path>>(path: P) -> io::Result<ReadDir> {\n ///\n /// # Examples\n ///\n-/// ```\n-/// # fn foo() -> std::io::Result<()> {\n+/// ```no_run\n /// use std::fs;\n ///\n-/// let mut perms = fs::metadata(\"foo.txt\")?.permissions();\n-/// perms.set_readonly(true);\n-/// fs::set_permissions(\"foo.txt\", perms)?;\n-/// # Ok(())\n-/// # }\n+/// fn main() -> std::io::Result<()> {\n+///     let mut perms = fs::metadata(\"foo.txt\")?.permissions();\n+///     perms.set_readonly(true);\n+///     fs::set_permissions(\"foo.txt\", perms)?;\n+///     Ok(())\n+/// }\n /// ```\n #[stable(feature = \"set_permissions\", since = \"1.1.0\")]\n pub fn set_permissions<P: AsRef<Path>>(path: P, perm: Permissions)"}, {"sha": "cefff2f143ce70f52a398f381ba2ab1e1286d349", "filename": "src/libstd/io/buffered.rs", "status": "modified", "additions": 110, "deletions": 109, "changes": 219, "blob_url": "https://github.com/rust-lang/rust/blob/e9dcec070d6097e5a22b6658844dccd9d1f578cf/src%2Flibstd%2Fio%2Fbuffered.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9dcec070d6097e5a22b6658844dccd9d1f578cf/src%2Flibstd%2Fio%2Fbuffered.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fbuffered.rs?ref=e9dcec070d6097e5a22b6658844dccd9d1f578cf", "patch": "@@ -31,20 +31,20 @@ use memchr;\n ///\n /// # Examples\n ///\n-/// ```\n+/// ```no_run\n /// use std::io::prelude::*;\n /// use std::io::BufReader;\n /// use std::fs::File;\n ///\n-/// # fn foo() -> std::io::Result<()> {\n-/// let f = File::open(\"log.txt\")?;\n-/// let mut reader = BufReader::new(f);\n+/// fn main() -> std::io::Result<()> {\n+///     let f = File::open(\"log.txt\")?;\n+///     let mut reader = BufReader::new(f);\n ///\n-/// let mut line = String::new();\n-/// let len = reader.read_line(&mut line)?;\n-/// println!(\"First line is {} bytes long\", len);\n-/// # Ok(())\n-/// # }\n+///     let mut line = String::new();\n+///     let len = reader.read_line(&mut line)?;\n+///     println!(\"First line is {} bytes long\", len);\n+///     Ok(())\n+/// }\n /// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct BufReader<R> {\n@@ -59,15 +59,15 @@ impl<R: Read> BufReader<R> {\n     ///\n     /// # Examples\n     ///\n-    /// ```\n+    /// ```no_run\n     /// use std::io::BufReader;\n     /// use std::fs::File;\n     ///\n-    /// # fn foo() -> std::io::Result<()> {\n-    /// let f = File::open(\"log.txt\")?;\n-    /// let reader = BufReader::new(f);\n-    /// # Ok(())\n-    /// # }\n+    /// fn main() -> std::io::Result<()> {\n+    ///     let f = File::open(\"log.txt\")?;\n+    ///     let reader = BufReader::new(f);\n+    ///     Ok(())\n+    /// }\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn new(inner: R) -> BufReader<R> {\n@@ -80,15 +80,15 @@ impl<R: Read> BufReader<R> {\n     ///\n     /// Creating a buffer with ten bytes of capacity:\n     ///\n-    /// ```\n+    /// ```no_run\n     /// use std::io::BufReader;\n     /// use std::fs::File;\n     ///\n-    /// # fn foo() -> std::io::Result<()> {\n-    /// let f = File::open(\"log.txt\")?;\n-    /// let reader = BufReader::with_capacity(10, f);\n-    /// # Ok(())\n-    /// # }\n+    /// fn main() -> std::io::Result<()> {\n+    ///     let f = File::open(\"log.txt\")?;\n+    ///     let reader = BufReader::with_capacity(10, f);\n+    ///     Ok(())\n+    /// }\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn with_capacity(cap: usize, inner: R) -> BufReader<R> {\n@@ -111,17 +111,17 @@ impl<R: Read> BufReader<R> {\n     ///\n     /// # Examples\n     ///\n-    /// ```\n+    /// ```no_run\n     /// use std::io::BufReader;\n     /// use std::fs::File;\n     ///\n-    /// # fn foo() -> std::io::Result<()> {\n-    /// let f1 = File::open(\"log.txt\")?;\n-    /// let reader = BufReader::new(f1);\n+    /// fn main() -> std::io::Result<()> {\n+    ///     let f1 = File::open(\"log.txt\")?;\n+    ///     let reader = BufReader::new(f1);\n     ///\n-    /// let f2 = reader.get_ref();\n-    /// # Ok(())\n-    /// # }\n+    ///     let f2 = reader.get_ref();\n+    ///     Ok(())\n+    /// }\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn get_ref(&self) -> &R { &self.inner }\n@@ -132,40 +132,41 @@ impl<R: Read> BufReader<R> {\n     ///\n     /// # Examples\n     ///\n-    /// ```\n+    /// ```no_run\n     /// use std::io::BufReader;\n     /// use std::fs::File;\n     ///\n-    /// # fn foo() -> std::io::Result<()> {\n-    /// let f1 = File::open(\"log.txt\")?;\n-    /// let mut reader = BufReader::new(f1);\n+    /// fn main() -> std::io::Result<()> {\n+    ///     let f1 = File::open(\"log.txt\")?;\n+    ///     let mut reader = BufReader::new(f1);\n     ///\n-    /// let f2 = reader.get_mut();\n-    /// # Ok(())\n-    /// # }\n+    ///     let f2 = reader.get_mut();\n+    ///     Ok(())\n+    /// }\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn get_mut(&mut self) -> &mut R { &mut self.inner }\n \n     /// Returns `true` if there are no bytes in the internal buffer.\n     ///\n     /// # Examples\n-    /// ```\n+    //\n+    /// ```no_run\n     /// # #![feature(bufreader_is_empty)]\n     /// use std::io::BufReader;\n     /// use std::io::BufRead;\n     /// use std::fs::File;\n     ///\n-    /// # fn foo() -> std::io::Result<()> {\n-    /// let f1 = File::open(\"log.txt\")?;\n-    /// let mut reader = BufReader::new(f1);\n-    /// assert!(reader.is_empty());\n+    /// fn main() -> std::io::Result<()> {\n+    ///     let f1 = File::open(\"log.txt\")?;\n+    ///     let mut reader = BufReader::new(f1);\n+    ///     assert!(reader.is_empty());\n     ///\n-    /// if reader.fill_buf()?.len() > 0 {\n-    ///     assert!(!reader.is_empty());\n+    ///     if reader.fill_buf()?.len() > 0 {\n+    ///         assert!(!reader.is_empty());\n+    ///     }\n+    ///     Ok(())\n     /// }\n-    /// # Ok(())\n-    /// # }\n     /// ```\n     #[unstable(feature = \"bufreader_is_empty\", issue = \"45323\", reason = \"recently added\")]\n     #[rustc_deprecated(since = \"1.26.0\", reason = \"use .buffer().is_empty() instead\")]\n@@ -179,21 +180,21 @@ impl<R: Read> BufReader<R> {\n     ///\n     /// # Examples\n     ///\n-    /// ```\n+    /// ```no_ru\n     /// # #![feature(bufreader_buffer)]\n     /// use std::io::{BufReader, BufRead};\n     /// use std::fs::File;\n     ///\n-    /// # fn foo() -> std::io::Result<()> {\n-    /// let f = File::open(\"log.txt\")?;\n-    /// let mut reader = BufReader::new(f);\n-    /// assert!(reader.buffer().is_empty());\n+    /// fn main() -> std::io::Result<()> {\n+    ///     let f = File::open(\"log.txt\")?;\n+    ///     let mut reader = BufReader::new(f);\n+    ///     assert!(reader.buffer().is_empty());\n     ///\n-    /// if reader.fill_buf()?.len() > 0 {\n-    ///     assert!(!reader.buffer().is_empty());\n+    ///     if reader.fill_buf()?.len() > 0 {\n+    ///         assert!(!reader.buffer().is_empty());\n+    ///     }\n+    ///     Ok(())\n     /// }\n-    /// # Ok(())\n-    /// # }\n     /// ```\n     #[unstable(feature = \"bufreader_buffer\", issue = \"45323\")]\n     pub fn buffer(&self) -> &[u8] {\n@@ -206,17 +207,17 @@ impl<R: Read> BufReader<R> {\n     ///\n     /// # Examples\n     ///\n-    /// ```\n+    /// ```no_run\n     /// use std::io::BufReader;\n     /// use std::fs::File;\n     ///\n-    /// # fn foo() -> std::io::Result<()> {\n-    /// let f1 = File::open(\"log.txt\")?;\n-    /// let reader = BufReader::new(f1);\n+    /// fn main() -> std::io::Result<()> {\n+    ///     let f1 = File::open(\"log.txt\")?;\n+    ///     let reader = BufReader::new(f1);\n     ///\n-    /// let f2 = reader.into_inner();\n-    /// # Ok(())\n-    /// # }\n+    ///     let f2 = reader.into_inner();\n+    ///     Ok(())\n+    /// }\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn into_inner(self) -> R { self.inner }\n@@ -724,34 +725,34 @@ impl<W> fmt::Display for IntoInnerError<W> {\n /// We can use `LineWriter` to write one line at a time, significantly\n /// reducing the number of actual writes to the file.\n ///\n-/// ```\n+/// ```no_run\n /// use std::fs::File;\n /// use std::io::prelude::*;\n /// use std::io::LineWriter;\n ///\n-/// # fn foo() -> std::io::Result<()> {\n-/// let road_not_taken = b\"I shall be telling this with a sigh\n+/// fn main() -> std::io::Result<()> {\n+///     let road_not_taken = b\"I shall be telling this with a sigh\n /// Somewhere ages and ages hence:\n /// Two roads diverged in a wood, and I -\n /// I took the one less traveled by,\n /// And that has made all the difference.\";\n ///\n-/// let file = File::create(\"poem.txt\")?;\n-/// let mut file = LineWriter::new(file);\n+///     let file = File::create(\"poem.txt\")?;\n+///     let mut file = LineWriter::new(file);\n ///\n-/// for &byte in road_not_taken.iter() {\n-///    file.write(&[byte]).unwrap();\n-/// }\n+///     for &byte in road_not_taken.iter() {\n+///        file.write(&[byte]).unwrap();\n+///     }\n ///\n-/// // let's check we did the right thing.\n-/// let mut file = File::open(\"poem.txt\")?;\n-/// let mut contents = String::new();\n+///     // let's check we did the right thing.\n+///     let mut file = File::open(\"poem.txt\")?;\n+///     let mut contents = String::new();\n ///\n-/// file.read_to_string(&mut contents)?;\n+///     file.read_to_string(&mut contents)?;\n ///\n-/// assert_eq!(contents.as_bytes(), &road_not_taken[..]);\n-/// # Ok(())\n-/// # }\n+///     assert_eq!(contents.as_bytes(), &road_not_taken[..]);\n+///     Ok(())\n+/// }\n /// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct LineWriter<W: Write> {\n@@ -764,15 +765,15 @@ impl<W: Write> LineWriter<W> {\n     ///\n     /// # Examples\n     ///\n-    /// ```\n+    /// ```no_run\n     /// use std::fs::File;\n     /// use std::io::LineWriter;\n     ///\n-    /// # fn foo() -> std::io::Result<()> {\n-    /// let file = File::create(\"poem.txt\")?;\n-    /// let file = LineWriter::new(file);\n-    /// # Ok(())\n-    /// # }\n+    /// fn main() -> std::io::Result<()> {\n+    ///     let file = File::create(\"poem.txt\")?;\n+    ///     let file = LineWriter::new(file);\n+    ///     Ok(())\n+    /// }\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn new(inner: W) -> LineWriter<W> {\n@@ -785,15 +786,15 @@ impl<W: Write> LineWriter<W> {\n     ///\n     /// # Examples\n     ///\n-    /// ```\n+    /// ```no_run\n     /// use std::fs::File;\n     /// use std::io::LineWriter;\n     ///\n-    /// # fn foo() -> std::io::Result<()> {\n-    /// let file = File::create(\"poem.txt\")?;\n-    /// let file = LineWriter::with_capacity(100, file);\n-    /// # Ok(())\n-    /// # }\n+    /// fn main() -> std::io::Result<()> {\n+    ///     let file = File::create(\"poem.txt\")?;\n+    ///     let file = LineWriter::with_capacity(100, file);\n+    ///     Ok(())\n+    /// }\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn with_capacity(cap: usize, inner: W) -> LineWriter<W> {\n@@ -807,17 +808,17 @@ impl<W: Write> LineWriter<W> {\n     ///\n     /// # Examples\n     ///\n-    /// ```\n+    /// ```no_run\n     /// use std::fs::File;\n     /// use std::io::LineWriter;\n     ///\n-    /// # fn foo() -> std::io::Result<()> {\n-    /// let file = File::create(\"poem.txt\")?;\n-    /// let file = LineWriter::new(file);\n+    /// fn main() -> std::io::Result<()> {\n+    ///     let file = File::create(\"poem.txt\")?;\n+    ///     let file = LineWriter::new(file);\n     ///\n-    /// let reference = file.get_ref();\n-    /// # Ok(())\n-    /// # }\n+    ///     let reference = file.get_ref();\n+    ///     Ok(())\n+    /// }\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn get_ref(&self) -> &W { self.inner.get_ref() }\n@@ -829,18 +830,18 @@ impl<W: Write> LineWriter<W> {\n     ///\n     /// # Examples\n     ///\n-    /// ```\n+    /// ```no_run\n     /// use std::fs::File;\n     /// use std::io::LineWriter;\n     ///\n-    /// # fn foo() -> std::io::Result<()> {\n-    /// let file = File::create(\"poem.txt\")?;\n-    /// let mut file = LineWriter::new(file);\n+    /// fn main() -> std::io::Result<()> {\n+    ///     let file = File::create(\"poem.txt\")?;\n+    ///     let mut file = LineWriter::new(file);\n     ///\n-    /// // we can use reference just like file\n-    /// let reference = file.get_mut();\n-    /// # Ok(())\n-    /// # }\n+    ///     // we can use reference just like file\n+    ///     let reference = file.get_mut();\n+    ///     Ok(())\n+    /// }\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn get_mut(&mut self) -> &mut W { self.inner.get_mut() }\n@@ -855,18 +856,18 @@ impl<W: Write> LineWriter<W> {\n     ///\n     /// # Examples\n     ///\n-    /// ```\n+    /// ```no_run\n     /// use std::fs::File;\n     /// use std::io::LineWriter;\n     ///\n-    /// # fn foo() -> std::io::Result<()> {\n-    /// let file = File::create(\"poem.txt\")?;\n+    /// fn main() -> std::io::Result<()> {\n+    ///     let file = File::create(\"poem.txt\")?;\n     ///\n-    /// let writer: LineWriter<File> = LineWriter::new(file);\n+    ///     let writer: LineWriter<File> = LineWriter::new(file);\n     ///\n-    /// let file: File = writer.into_inner()?;\n-    /// # Ok(())\n-    /// # }\n+    ///     let file: File = writer.into_inner()?;\n+    ///     Ok(())\n+    /// }\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn into_inner(self) -> Result<W, IntoInnerError<LineWriter<W>>> {"}, {"sha": "63b631ace9693e56d49c38c0757a1acffd887c8f", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 302, "deletions": 303, "changes": 605, "blob_url": "https://github.com/rust-lang/rust/blob/e9dcec070d6097e5a22b6658844dccd9d1f578cf/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9dcec070d6097e5a22b6658844dccd9d1f578cf/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=e9dcec070d6097e5a22b6658844dccd9d1f578cf", "patch": "@@ -24,21 +24,21 @@\n //! example, [`Read`] adds a [`read`][`Read::read`] method, which we can use on\n //! [`File`]s:\n //!\n-//! ```\n+//! ```no_run\n //! use std::io;\n //! use std::io::prelude::*;\n //! use std::fs::File;\n //!\n-//! # fn foo() -> io::Result<()> {\n-//! let mut f = File::open(\"foo.txt\")?;\n-//! let mut buffer = [0; 10];\n+//! fn main() -> io::Result<()> {\n+//!     let mut f = File::open(\"foo.txt\")?;\n+//!     let mut buffer = [0; 10];\n //!\n-//! // read up to 10 bytes\n-//! f.read(&mut buffer)?;\n+//!     // read up to 10 bytes\n+//!     f.read(&mut buffer)?;\n //!\n-//! println!(\"The bytes: {:?}\", buffer);\n-//! # Ok(())\n-//! # }\n+//!     println!(\"The bytes: {:?}\", buffer);\n+//!     Ok(())\n+//! }\n //! ```\n //!\n //! [`Read`] and [`Write`] are so important, implementors of the two traits have a\n@@ -52,25 +52,25 @@\n //! how the reading happens. [`Seek`] lets you control where the next byte is\n //! coming from:\n //!\n-//! ```\n+//! ```no_run\n //! use std::io;\n //! use std::io::prelude::*;\n //! use std::io::SeekFrom;\n //! use std::fs::File;\n //!\n-//! # fn foo() -> io::Result<()> {\n-//! let mut f = File::open(\"foo.txt\")?;\n-//! let mut buffer = [0; 10];\n+//! fn main() -> io::Result<()> {\n+//!     let mut f = File::open(\"foo.txt\")?;\n+//!     let mut buffer = [0; 10];\n //!\n-//! // skip to the last 10 bytes of the file\n-//! f.seek(SeekFrom::End(-10))?;\n+//!     // skip to the last 10 bytes of the file\n+//!     f.seek(SeekFrom::End(-10))?;\n //!\n-//! // read up to 10 bytes\n-//! f.read(&mut buffer)?;\n+//!     // read up to 10 bytes\n+//!     f.read(&mut buffer)?;\n //!\n-//! println!(\"The bytes: {:?}\", buffer);\n-//! # Ok(())\n-//! # }\n+//!     println!(\"The bytes: {:?}\", buffer);\n+//!     Ok(())\n+//! }\n //! ```\n //!\n //! [`BufRead`] uses an internal buffer to provide a number of other ways to read, but\n@@ -87,70 +87,70 @@\n //! For example, [`BufReader`] works with the [`BufRead`] trait to add extra\n //! methods to any reader:\n //!\n-//! ```\n+//! ```no_run\n //! use std::io;\n //! use std::io::prelude::*;\n //! use std::io::BufReader;\n //! use std::fs::File;\n //!\n-//! # fn foo() -> io::Result<()> {\n-//! let f = File::open(\"foo.txt\")?;\n-//! let mut reader = BufReader::new(f);\n-//! let mut buffer = String::new();\n+//! fn main() -> io::Result<()> {\n+//!     let f = File::open(\"foo.txt\")?;\n+//!     let mut reader = BufReader::new(f);\n+//!     let mut buffer = String::new();\n //!\n-//! // read a line into buffer\n-//! reader.read_line(&mut buffer)?;\n+//!     // read a line into buffer\n+//!     reader.read_line(&mut buffer)?;\n //!\n-//! println!(\"{}\", buffer);\n-//! # Ok(())\n-//! # }\n+//!     println!(\"{}\", buffer);\n+//!     Ok(())\n+//! }\n //! ```\n //!\n //! [`BufWriter`] doesn't add any new ways of writing; it just buffers every call\n //! to [`write`][`Write::write`]:\n //!\n-//! ```\n+//! ```no_run\n //! use std::io;\n //! use std::io::prelude::*;\n //! use std::io::BufWriter;\n //! use std::fs::File;\n //!\n-//! # fn foo() -> io::Result<()> {\n-//! let f = File::create(\"foo.txt\")?;\n-//! {\n-//!     let mut writer = BufWriter::new(f);\n+//! fn main() -> io::Result<()> {\n+//!     let f = File::create(\"foo.txt\")?;\n+//!     {\n+//!         let mut writer = BufWriter::new(f);\n //!\n-//!     // write a byte to the buffer\n-//!     writer.write(&[42])?;\n+//!         // write a byte to the buffer\n+//!         writer.write(&[42])?;\n //!\n-//! } // the buffer is flushed once writer goes out of scope\n+//!     } // the buffer is flushed once writer goes out of scope\n //!\n-//! # Ok(())\n-//! # }\n+//!     Ok(())\n+//! }\n //! ```\n //!\n //! ## Standard input and output\n //!\n //! A very common source of input is standard input:\n //!\n-//! ```\n+//! ```no_run\n //! use std::io;\n //!\n-//! # fn foo() -> io::Result<()> {\n-//! let mut input = String::new();\n+//! fn main() -> io::Result<()> {\n+//!     let mut input = String::new();\n //!\n-//! io::stdin().read_line(&mut input)?;\n+//!     io::stdin().read_line(&mut input)?;\n //!\n-//! println!(\"You typed: {}\", input.trim());\n-//! # Ok(())\n-//! # }\n+//!     println!(\"You typed: {}\", input.trim());\n+//!     Ok(())\n+//! }\n //! ```\n //!\n //! Note that you cannot use the [`?` operator] in functions that do not return\n //! a [`Result<T, E>`][`Result`] (e.g. `main`). Instead, you can call [`.unwrap()`]\n //! or `match` on the return value to catch any possible errors:\n //!\n-//! ```\n+//! ```no_run\n //! use std::io;\n //!\n //! let mut input = String::new();\n@@ -160,14 +160,14 @@\n //!\n //! And a very common source of output is standard output:\n //!\n-//! ```\n+//! ```no_run\n //! use std::io;\n //! use std::io::prelude::*;\n //!\n-//! # fn foo() -> io::Result<()> {\n-//! io::stdout().write(&[42])?;\n-//! # Ok(())\n-//! # }\n+//! fn main() -> io::Result<()> {\n+//!     io::stdout().write(&[42])?;\n+//!     Ok(())\n+//! }\n //! ```\n //!\n //! Of course, using [`io::stdout`] directly is less common than something like\n@@ -179,22 +179,21 @@\n //! ways of iterating over I/O. For example, [`Lines`] is used to split over\n //! lines:\n //!\n-//! ```\n+//! ```no_run\n //! use std::io;\n //! use std::io::prelude::*;\n //! use std::io::BufReader;\n //! use std::fs::File;\n //!\n-//! # fn foo() -> io::Result<()> {\n-//! let f = File::open(\"foo.txt\")?;\n-//! let reader = BufReader::new(f);\n+//! fn main() -> io::Result<()> {\n+//!     let f = File::open(\"foo.txt\")?;\n+//!     let reader = BufReader::new(f);\n //!\n-//! for line in reader.lines() {\n-//!     println!(\"{}\", line?);\n+//!     for line in reader.lines() {\n+//!         println!(\"{}\", line?);\n+//!     }\n+//!     Ok(())\n //! }\n-//!\n-//! # Ok(())\n-//! # }\n //! ```\n //!\n //! ## Functions\n@@ -203,13 +202,13 @@\n //! features. For example, we can use three of these functions to copy everything\n //! from standard input to standard output:\n //!\n-//! ```\n+//! ```no_run\n //! use std::io;\n //!\n-//! # fn foo() -> io::Result<()> {\n-//! io::copy(&mut io::stdin(), &mut io::stdout())?;\n-//! # Ok(())\n-//! # }\n+//! fn main() -> io::Result<()> {\n+//!     io::copy(&mut io::stdin(), &mut io::stdout())?;\n+//!     Ok(())\n+//! }\n //! ```\n //!\n //! [functions-list]: #functions-1\n@@ -416,47 +415,47 @@ fn read_to_end<R: Read + ?Sized>(r: &mut R, buf: &mut Vec<u8>) -> Result<usize>\n ///\n /// [`File`]s implement `Read`:\n ///\n-/// ```\n-/// # use std::io;\n+/// ```no_run\n+/// use std::io;\n /// use std::io::prelude::*;\n /// use std::fs::File;\n ///\n-/// # fn foo() -> io::Result<()> {\n-/// let mut f = File::open(\"foo.txt\")?;\n-/// let mut buffer = [0; 10];\n+/// fn main() -> io::Result<()> {\n+///     let mut f = File::open(\"foo.txt\")?;\n+///     let mut buffer = [0; 10];\n ///\n-/// // read up to 10 bytes\n-/// f.read(&mut buffer)?;\n+///     // read up to 10 bytes\n+///     f.read(&mut buffer)?;\n ///\n-/// let mut buffer = vec![0; 10];\n-/// // read the whole file\n-/// f.read_to_end(&mut buffer)?;\n+///     let mut buffer = vec![0; 10];\n+///     // read the whole file\n+///     f.read_to_end(&mut buffer)?;\n ///\n-/// // read into a String, so that you don't need to do the conversion.\n-/// let mut buffer = String::new();\n-/// f.read_to_string(&mut buffer)?;\n+///     // read into a String, so that you don't need to do the conversion.\n+///     let mut buffer = String::new();\n+///     f.read_to_string(&mut buffer)?;\n ///\n-/// // and more! See the other methods for more details.\n-/// # Ok(())\n-/// # }\n+///     // and more! See the other methods for more details.\n+///     Ok(())\n+/// }\n /// ```\n ///\n /// Read from [`&str`] because [`&[u8]`][slice] implements `Read`:\n ///\n-/// ```\n+/// ```no_run\n /// # use std::io;\n /// use std::io::prelude::*;\n ///\n-/// # fn foo() -> io::Result<()> {\n-/// let mut b = \"This string will be read\".as_bytes();\n-/// let mut buffer = [0; 10];\n+/// fn main() -> io::Result<()> {\n+///     let mut b = \"This string will be read\".as_bytes();\n+///     let mut buffer = [0; 10];\n ///\n-/// // read up to 10 bytes\n-/// b.read(&mut buffer)?;\n+///     // read up to 10 bytes\n+///     b.read(&mut buffer)?;\n ///\n-/// // etc... it works exactly as a File does!\n-/// # Ok(())\n-/// # }\n+///     // etc... it works exactly as a File does!\n+///     Ok(())\n+/// }\n /// ```\n ///\n /// [`read()`]: trait.Read.html#tymethod.read\n@@ -509,19 +508,19 @@ pub trait Read {\n     /// [`ErrorKind::Interrupted`]: ../../std/io/enum.ErrorKind.html#variant.Interrupted\n     /// [`File`]: ../fs/struct.File.html\n     ///\n-    /// ```\n+    /// ```no_run\n     /// use std::io;\n     /// use std::io::prelude::*;\n     /// use std::fs::File;\n     ///\n-    /// # fn foo() -> io::Result<()> {\n-    /// let mut f = File::open(\"foo.txt\")?;\n-    /// let mut buffer = [0; 10];\n+    /// fn main() -> io::Result<()> {\n+    ///     let mut f = File::open(\"foo.txt\")?;\n+    ///     let mut buffer = [0; 10];\n     ///\n-    /// // read up to 10 bytes\n-    /// f.read(&mut buffer[..])?;\n-    /// # Ok(())\n-    /// # }\n+    ///     // read up to 10 bytes\n+    ///     f.read(&mut buffer[..])?;\n+    ///     Ok(())\n+    /// }\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn read(&mut self, buf: &mut [u8]) -> Result<usize>;\n@@ -582,19 +581,19 @@ pub trait Read {\n     /// [`ErrorKind::Interrupted`]: ../../std/io/enum.ErrorKind.html#variant.Interrupted\n     /// [`File`]: ../fs/struct.File.html\n     ///\n-    /// ```\n+    /// ```no_run\n     /// use std::io;\n     /// use std::io::prelude::*;\n     /// use std::fs::File;\n     ///\n-    /// # fn foo() -> io::Result<()> {\n-    /// let mut f = File::open(\"foo.txt\")?;\n-    /// let mut buffer = Vec::new();\n+    /// fn main() -> io::Result<()> {\n+    ///     let mut f = File::open(\"foo.txt\")?;\n+    ///     let mut buffer = Vec::new();\n     ///\n-    /// // read the whole file\n-    /// f.read_to_end(&mut buffer)?;\n-    /// # Ok(())\n-    /// # }\n+    ///     // read the whole file\n+    ///     f.read_to_end(&mut buffer)?;\n+    ///     Ok(())\n+    /// }\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn read_to_end(&mut self, buf: &mut Vec<u8>) -> Result<usize> {\n@@ -621,18 +620,18 @@ pub trait Read {\n     ///\n     /// [file]: ../fs/struct.File.html\n     ///\n-    /// ```\n+    /// ```no_run\n     /// use std::io;\n     /// use std::io::prelude::*;\n     /// use std::fs::File;\n     ///\n-    /// # fn foo() -> io::Result<()> {\n-    /// let mut f = File::open(\"foo.txt\")?;\n-    /// let mut buffer = String::new();\n+    /// fn main() -> io::Result<()> {\n+    ///     let mut f = File::open(\"foo.txt\")?;\n+    ///     let mut buffer = String::new();\n     ///\n-    /// f.read_to_string(&mut buffer)?;\n-    /// # Ok(())\n-    /// # }\n+    ///     f.read_to_string(&mut buffer)?;\n+    ///     Ok(())\n+    /// }\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn read_to_string(&mut self, buf: &mut String) -> Result<usize> {\n@@ -683,19 +682,19 @@ pub trait Read {\n     /// [`ErrorKind::Interrupted`]: ../../std/io/enum.ErrorKind.html#variant.Interrupted\n     /// [`ErrorKind::UnexpectedEof`]: ../../std/io/enum.ErrorKind.html#variant.UnexpectedEof\n     ///\n-    /// ```\n+    /// ```no_run\n     /// use std::io;\n     /// use std::io::prelude::*;\n     /// use std::fs::File;\n     ///\n-    /// # fn foo() -> io::Result<()> {\n-    /// let mut f = File::open(\"foo.txt\")?;\n-    /// let mut buffer = [0; 10];\n+    /// fn main() -> io::Result<()> {\n+    ///     let mut f = File::open(\"foo.txt\")?;\n+    ///     let mut buffer = [0; 10];\n     ///\n-    /// // read exactly 10 bytes\n-    /// f.read_exact(&mut buffer)?;\n-    /// # Ok(())\n-    /// # }\n+    ///     // read exactly 10 bytes\n+    ///     f.read_exact(&mut buffer)?;\n+    ///     Ok(())\n+    /// }\n     /// ```\n     #[stable(feature = \"read_exact\", since = \"1.6.0\")]\n     fn read_exact(&mut self, mut buf: &mut [u8]) -> Result<()> {\n@@ -726,28 +725,28 @@ pub trait Read {\n     ///\n     /// [file]: ../fs/struct.File.html\n     ///\n-    /// ```\n+    /// ```no_run\n     /// use std::io;\n     /// use std::io::Read;\n     /// use std::fs::File;\n     ///\n-    /// # fn foo() -> io::Result<()> {\n-    /// let mut f = File::open(\"foo.txt\")?;\n-    /// let mut buffer = Vec::new();\n-    /// let mut other_buffer = Vec::new();\n+    /// fn main() -> io::Result<()> {\n+    ///     let mut f = File::open(\"foo.txt\")?;\n+    ///     let mut buffer = Vec::new();\n+    ///     let mut other_buffer = Vec::new();\n     ///\n-    /// {\n-    ///     let reference = f.by_ref();\n+    ///     {\n+    ///         let reference = f.by_ref();\n     ///\n-    ///     // read at most 5 bytes\n-    ///     reference.take(5).read_to_end(&mut buffer)?;\n+    ///         // read at most 5 bytes\n+    ///         reference.take(5).read_to_end(&mut buffer)?;\n     ///\n-    /// } // drop our &mut reference so we can use f again\n+    ///     } // drop our &mut reference so we can use f again\n     ///\n-    /// // original file still usable, read the rest\n-    /// f.read_to_end(&mut other_buffer)?;\n-    /// # Ok(())\n-    /// # }\n+    ///     // original file still usable, read the rest\n+    ///     f.read_to_end(&mut other_buffer)?;\n+    ///     Ok(())\n+    /// }\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn by_ref(&mut self) -> &mut Self where Self: Sized { self }\n@@ -772,19 +771,19 @@ pub trait Read {\n     /// [`Err`]: ../../std/result/enum.Result.html#variant.Err\n     /// [`None`]: ../../std/option/enum.Option.html#variant.None\n     ///\n-    /// ```\n+    /// ```no_run\n     /// use std::io;\n     /// use std::io::prelude::*;\n     /// use std::fs::File;\n     ///\n-    /// # fn foo() -> io::Result<()> {\n-    /// let mut f = File::open(\"foo.txt\")?;\n+    /// fn main() -> io::Result<()> {\n+    ///     let mut f = File::open(\"foo.txt\")?;\n     ///\n-    /// for byte in f.bytes() {\n-    ///     println!(\"{}\", byte.unwrap());\n+    ///     for byte in f.bytes() {\n+    ///         println!(\"{}\", byte.unwrap());\n+    ///     }\n+    ///     Ok(())\n     /// }\n-    /// # Ok(())\n-    /// # }\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn bytes(self) -> Bytes<Self> where Self: Sized {\n@@ -812,20 +811,20 @@ pub trait Read {\n     /// [`char`]: ../../std/primitive.char.html\n     /// [`None`]: ../../std/option/enum.Option.html#variant.None\n     ///\n-    /// ```\n+    /// ```no_run\n     /// #![feature(io)]\n     /// use std::io;\n     /// use std::io::prelude::*;\n     /// use std::fs::File;\n     ///\n-    /// # fn foo() -> io::Result<()> {\n-    /// let mut f = File::open(\"foo.txt\")?;\n+    /// fn main() -> io::Result<()> {\n+    ///     let mut f = File::open(\"foo.txt\")?;\n     ///\n-    /// for c in f.chars() {\n-    ///     println!(\"{}\", c.unwrap());\n+    ///     for c in f.chars() {\n+    ///         println!(\"{}\", c.unwrap());\n+    ///     }\n+    ///     Ok(())\n     /// }\n-    /// # Ok(())\n-    /// # }\n     /// ```\n     #[unstable(feature = \"io\", reason = \"the semantics of a partial read/write \\\n                                          of where errors happen is currently \\\n@@ -847,23 +846,23 @@ pub trait Read {\n     ///\n     /// [file]: ../fs/struct.File.html\n     ///\n-    /// ```\n+    /// ```no_run\n     /// use std::io;\n     /// use std::io::prelude::*;\n     /// use std::fs::File;\n     ///\n-    /// # fn foo() -> io::Result<()> {\n-    /// let mut f1 = File::open(\"foo.txt\")?;\n-    /// let mut f2 = File::open(\"bar.txt\")?;\n+    /// fn main() -> io::Result<()> {\n+    ///     let mut f1 = File::open(\"foo.txt\")?;\n+    ///     let mut f2 = File::open(\"bar.txt\")?;\n     ///\n-    /// let mut handle = f1.chain(f2);\n-    /// let mut buffer = String::new();\n+    ///     let mut handle = f1.chain(f2);\n+    ///     let mut buffer = String::new();\n     ///\n-    /// // read the value into a String. We could use any Read method here,\n-    /// // this is just one example.\n-    /// handle.read_to_string(&mut buffer)?;\n-    /// # Ok(())\n-    /// # }\n+    ///     // read the value into a String. We could use any Read method here,\n+    ///     // this is just one example.\n+    ///     handle.read_to_string(&mut buffer)?;\n+    ///     Ok(())\n+    /// }\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn chain<R: Read>(self, next: R) -> Chain<Self, R> where Self: Sized {\n@@ -885,21 +884,21 @@ pub trait Read {\n     /// [`Ok(0)`]: ../../std/result/enum.Result.html#variant.Ok\n     /// [`read()`]: trait.Read.html#tymethod.read\n     ///\n-    /// ```\n+    /// ```no_run\n     /// use std::io;\n     /// use std::io::prelude::*;\n     /// use std::fs::File;\n     ///\n-    /// # fn foo() -> io::Result<()> {\n-    /// let mut f = File::open(\"foo.txt\")?;\n-    /// let mut buffer = [0; 5];\n+    /// fn main() -> io::Result<()> {\n+    ///     let mut f = File::open(\"foo.txt\")?;\n+    ///     let mut buffer = [0; 5];\n     ///\n-    /// // read at most five bytes\n-    /// let mut handle = f.take(5);\n+    ///     // read at most five bytes\n+    ///     let mut handle = f.take(5);\n     ///\n-    /// handle.read(&mut buffer)?;\n-    /// # Ok(())\n-    /// # }\n+    ///     handle.read(&mut buffer)?;\n+    ///     Ok(())\n+    /// }\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn take(self, limit: u64) -> Take<Self> where Self: Sized {\n@@ -974,16 +973,16 @@ impl Initializer {\n ///\n /// # Examples\n ///\n-/// ```\n+/// ```no_run\n /// use std::io::prelude::*;\n /// use std::fs::File;\n ///\n-/// # fn foo() -> std::io::Result<()> {\n-/// let mut buffer = File::create(\"foo.txt\")?;\n+/// fn main() -> std::io::Result<()> {\n+///     let mut buffer = File::create(\"foo.txt\")?;\n ///\n-/// buffer.write(b\"some bytes\")?;\n-/// # Ok(())\n-/// # }\n+///     buffer.write(b\"some bytes\")?;\n+///     Ok(())\n+/// }\n /// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[doc(spotlight)]\n@@ -1022,17 +1021,17 @@ pub trait Write {\n     ///\n     /// # Examples\n     ///\n-    /// ```\n+    /// ```no_run\n     /// use std::io::prelude::*;\n     /// use std::fs::File;\n     ///\n-    /// # fn foo() -> std::io::Result<()> {\n-    /// let mut buffer = File::create(\"foo.txt\")?;\n+    /// fn main() -> std::io::Result<()> {\n+    ///     let mut buffer = File::create(\"foo.txt\")?;\n     ///\n-    /// // Writes some prefix of the byte string, not necessarily all of it.\n-    /// buffer.write(b\"some bytes\")?;\n-    /// # Ok(())\n-    /// # }\n+    ///     // Writes some prefix of the byte string, not necessarily all of it.\n+    ///     buffer.write(b\"some bytes\")?;\n+    ///     Ok(())\n+    /// }\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn write(&mut self, buf: &[u8]) -> Result<usize>;\n@@ -1047,18 +1046,18 @@ pub trait Write {\n     ///\n     /// # Examples\n     ///\n-    /// ```\n+    /// ```no_run\n     /// use std::io::prelude::*;\n     /// use std::io::BufWriter;\n     /// use std::fs::File;\n     ///\n-    /// # fn foo() -> std::io::Result<()> {\n-    /// let mut buffer = BufWriter::new(File::create(\"foo.txt\")?);\n+    /// fn main() -> std::io::Result<()> {\n+    ///     let mut buffer = BufWriter::new(File::create(\"foo.txt\")?);\n     ///\n-    /// buffer.write(b\"some bytes\")?;\n-    /// buffer.flush()?;\n-    /// # Ok(())\n-    /// # }\n+    ///     buffer.write(b\"some bytes\")?;\n+    ///     buffer.flush()?;\n+    ///     Ok(())\n+    /// }\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn flush(&mut self) -> Result<()>;\n@@ -1082,16 +1081,16 @@ pub trait Write {\n     ///\n     /// # Examples\n     ///\n-    /// ```\n+    /// ```no_run\n     /// use std::io::prelude::*;\n     /// use std::fs::File;\n     ///\n-    /// # fn foo() -> std::io::Result<()> {\n-    /// let mut buffer = File::create(\"foo.txt\")?;\n+    /// fn main() -> std::io::Result<()> {\n+    ///     let mut buffer = File::create(\"foo.txt\")?;\n     ///\n-    /// buffer.write_all(b\"some bytes\")?;\n-    /// # Ok(())\n-    /// # }\n+    ///     buffer.write_all(b\"some bytes\")?;\n+    ///     Ok(())\n+    /// }\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn write_all(&mut self, mut buf: &[u8]) -> Result<()> {\n@@ -1131,19 +1130,19 @@ pub trait Write {\n     ///\n     /// # Examples\n     ///\n-    /// ```\n+    /// ```no_run\n     /// use std::io::prelude::*;\n     /// use std::fs::File;\n     ///\n-    /// # fn foo() -> std::io::Result<()> {\n-    /// let mut buffer = File::create(\"foo.txt\")?;\n+    /// fn main() -> std::io::Result<()> {\n+    ///     let mut buffer = File::create(\"foo.txt\")?;\n     ///\n-    /// // this call\n-    /// write!(buffer, \"{:.*}\", 2, 1.234567)?;\n-    /// // turns into this:\n-    /// buffer.write_fmt(format_args!(\"{:.*}\", 2, 1.234567))?;\n-    /// # Ok(())\n-    /// # }\n+    ///     // this call\n+    ///     write!(buffer, \"{:.*}\", 2, 1.234567)?;\n+    ///     // turns into this:\n+    ///     buffer.write_fmt(format_args!(\"{:.*}\", 2, 1.234567))?;\n+    ///     Ok(())\n+    /// }\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn write_fmt(&mut self, fmt: fmt::Arguments) -> Result<()> {\n@@ -1187,19 +1186,19 @@ pub trait Write {\n     ///\n     /// # Examples\n     ///\n-    /// ```\n+    /// ```no_run\n     /// use std::io::Write;\n     /// use std::fs::File;\n     ///\n-    /// # fn foo() -> std::io::Result<()> {\n-    /// let mut buffer = File::create(\"foo.txt\")?;\n+    /// fn main() -> std::io::Result<()> {\n+    ///     let mut buffer = File::create(\"foo.txt\")?;\n     ///\n-    /// let reference = buffer.by_ref();\n+    ///     let reference = buffer.by_ref();\n     ///\n-    /// // we can use reference just like our original buffer\n-    /// reference.write_all(b\"some bytes\")?;\n-    /// # Ok(())\n-    /// # }\n+    ///     // we can use reference just like our original buffer\n+    ///     reference.write_all(b\"some bytes\")?;\n+    ///     Ok(())\n+    /// }\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn by_ref(&mut self) -> &mut Self where Self: Sized { self }\n@@ -1217,19 +1216,19 @@ pub trait Write {\n ///\n /// [file]: ../fs/struct.File.html\n ///\n-/// ```\n+/// ```no_run\n /// use std::io;\n /// use std::io::prelude::*;\n /// use std::fs::File;\n /// use std::io::SeekFrom;\n ///\n-/// # fn foo() -> io::Result<()> {\n-/// let mut f = File::open(\"foo.txt\")?;\n+/// fn main() -> io::Result<()> {\n+///     let mut f = File::open(\"foo.txt\")?;\n ///\n-/// // move the cursor 42 bytes from the start of the file\n-/// f.seek(SeekFrom::Start(42))?;\n-/// # Ok(())\n-/// # }\n+///     // move the cursor 42 bytes from the start of the file\n+///     f.seek(SeekFrom::Start(42))?;\n+///     Ok(())\n+/// }\n /// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait Seek {\n@@ -1320,7 +1319,7 @@ fn read_until<R: BufRead + ?Sized>(r: &mut R, delim: u8, buf: &mut Vec<u8>)\n ///\n /// A locked standard input implements `BufRead`:\n ///\n-/// ```\n+/// ```no_run\n /// use std::io;\n /// use std::io::prelude::*;\n ///\n@@ -1342,21 +1341,21 @@ fn read_until<R: BufRead + ?Sized>(r: &mut R, delim: u8, buf: &mut Vec<u8>)\n /// [`lines`]: #method.lines\n /// [`Read`]: trait.Read.html\n ///\n-/// ```\n+/// ```no_run\n /// use std::io::{self, BufReader};\n /// use std::io::prelude::*;\n /// use std::fs::File;\n ///\n-/// # fn foo() -> io::Result<()> {\n-/// let f = File::open(\"foo.txt\")?;\n-/// let f = BufReader::new(f);\n+/// fn main() -> io::Result<()> {\n+///     let f = File::open(\"foo.txt\")?;\n+///     let f = BufReader::new(f);\n ///\n-/// for line in f.lines() {\n-///     println!(\"{}\", line.unwrap());\n-/// }\n+///     for line in f.lines() {\n+///         println!(\"{}\", line.unwrap());\n+///     }\n ///\n-/// # Ok(())\n-/// # }\n+///     Ok(())\n+/// }\n /// ```\n ///\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -1383,7 +1382,7 @@ pub trait BufRead: Read {\n     ///\n     /// A locked standard input implements `BufRead`:\n     ///\n-    /// ```\n+    /// ```no_run\n     /// use std::io;\n     /// use std::io::prelude::*;\n     ///\n@@ -1645,19 +1644,19 @@ impl<T, U> Chain<T, U> {\n     ///\n     /// # Examples\n     ///\n-    /// ```\n-    /// # use std::io;\n+    /// ```no_run\n+    /// use std::io;\n     /// use std::io::prelude::*;\n     /// use std::fs::File;\n     ///\n-    /// # fn foo() -> io::Result<()> {\n-    /// let mut foo_file = File::open(\"foo.txt\")?;\n-    /// let mut bar_file = File::open(\"bar.txt\")?;\n+    /// fn main() -> io::Result<()> {\n+    ///     let mut foo_file = File::open(\"foo.txt\")?;\n+    ///     let mut bar_file = File::open(\"bar.txt\")?;\n     ///\n-    /// let chain = foo_file.chain(bar_file);\n-    /// let (foo_file, bar_file) = chain.into_inner();\n-    /// # Ok(())\n-    /// # }\n+    ///     let chain = foo_file.chain(bar_file);\n+    ///     let (foo_file, bar_file) = chain.into_inner();\n+    ///     Ok(())\n+    /// }\n     /// ```\n     #[stable(feature = \"more_io_inner_methods\", since = \"1.20.0\")]\n     pub fn into_inner(self) -> (T, U) {\n@@ -1668,19 +1667,19 @@ impl<T, U> Chain<T, U> {\n     ///\n     /// # Examples\n     ///\n-    /// ```\n-    /// # use std::io;\n+    /// ```no_run\n+    /// use std::io;\n     /// use std::io::prelude::*;\n     /// use std::fs::File;\n     ///\n-    /// # fn foo() -> io::Result<()> {\n-    /// let mut foo_file = File::open(\"foo.txt\")?;\n-    /// let mut bar_file = File::open(\"bar.txt\")?;\n+    /// fn main() -> io::Result<()> {\n+    ///     let mut foo_file = File::open(\"foo.txt\")?;\n+    ///     let mut bar_file = File::open(\"bar.txt\")?;\n     ///\n-    /// let chain = foo_file.chain(bar_file);\n-    /// let (foo_file, bar_file) = chain.get_ref();\n-    /// # Ok(())\n-    /// # }\n+    ///     let chain = foo_file.chain(bar_file);\n+    ///     let (foo_file, bar_file) = chain.get_ref();\n+    ///     Ok(())\n+    /// }\n     /// ```\n     #[stable(feature = \"more_io_inner_methods\", since = \"1.20.0\")]\n     pub fn get_ref(&self) -> (&T, &U) {\n@@ -1695,19 +1694,19 @@ impl<T, U> Chain<T, U> {\n     ///\n     /// # Examples\n     ///\n-    /// ```\n-    /// # use std::io;\n+    /// ```no_run\n+    /// use std::io;\n     /// use std::io::prelude::*;\n     /// use std::fs::File;\n     ///\n-    /// # fn foo() -> io::Result<()> {\n-    /// let mut foo_file = File::open(\"foo.txt\")?;\n-    /// let mut bar_file = File::open(\"bar.txt\")?;\n+    /// fn main() -> io::Result<()> {\n+    ///     let mut foo_file = File::open(\"foo.txt\")?;\n+    ///     let mut bar_file = File::open(\"bar.txt\")?;\n     ///\n-    /// let mut chain = foo_file.chain(bar_file);\n-    /// let (foo_file, bar_file) = chain.get_mut();\n-    /// # Ok(())\n-    /// # }\n+    ///     let mut chain = foo_file.chain(bar_file);\n+    ///     let (foo_file, bar_file) = chain.get_mut();\n+    ///     Ok(())\n+    /// }\n     /// ```\n     #[stable(feature = \"more_io_inner_methods\", since = \"1.20.0\")]\n     pub fn get_mut(&mut self) -> (&mut T, &mut U) {\n@@ -1794,20 +1793,20 @@ impl<T> Take<T> {\n     ///\n     /// # Examples\n     ///\n-    /// ```\n+    /// ```no_run\n     /// use std::io;\n     /// use std::io::prelude::*;\n     /// use std::fs::File;\n     ///\n-    /// # fn foo() -> io::Result<()> {\n-    /// let f = File::open(\"foo.txt\")?;\n+    /// fn main() -> io::Result<()> {\n+    ///     let f = File::open(\"foo.txt\")?;\n     ///\n-    /// // read at most five bytes\n-    /// let handle = f.take(5);\n+    ///     // read at most five bytes\n+    ///     let handle = f.take(5);\n     ///\n-    /// println!(\"limit: {}\", handle.limit());\n-    /// # Ok(())\n-    /// # }\n+    ///     println!(\"limit: {}\", handle.limit());\n+    ///     Ok(())\n+    /// }\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn limit(&self) -> u64 { self.limit }\n@@ -1819,22 +1818,22 @@ impl<T> Take<T> {\n     ///\n     /// # Examples\n     ///\n-    /// ```\n+    /// ```no_run\n     /// #![feature(take_set_limit)]\n     /// use std::io;\n     /// use std::io::prelude::*;\n     /// use std::fs::File;\n     ///\n-    /// # fn foo() -> io::Result<()> {\n-    /// let f = File::open(\"foo.txt\")?;\n+    /// fn main() -> io::Result<()> {\n+    ///     let f = File::open(\"foo.txt\")?;\n     ///\n-    /// // read at most five bytes\n-    /// let mut handle = f.take(5);\n-    /// handle.set_limit(10);\n+    ///     // read at most five bytes\n+    ///     let mut handle = f.take(5);\n+    ///     handle.set_limit(10);\n     ///\n-    /// assert_eq!(handle.limit(), 10);\n-    /// # Ok(())\n-    /// # }\n+    ///     assert_eq!(handle.limit(), 10);\n+    ///     Ok(())\n+    /// }\n     /// ```\n     #[unstable(feature = \"take_set_limit\", issue = \"42781\")]\n     pub fn set_limit(&mut self, limit: u64) {\n@@ -1845,21 +1844,21 @@ impl<T> Take<T> {\n     ///\n     /// # Examples\n     ///\n-    /// ```\n+    /// ```no_run\n     /// use std::io;\n     /// use std::io::prelude::*;\n     /// use std::fs::File;\n     ///\n-    /// # fn foo() -> io::Result<()> {\n-    /// let mut file = File::open(\"foo.txt\")?;\n+    /// fn main() -> io::Result<()> {\n+    ///     let mut file = File::open(\"foo.txt\")?;\n     ///\n-    /// let mut buffer = [0; 5];\n-    /// let mut handle = file.take(5);\n-    /// handle.read(&mut buffer)?;\n+    ///     let mut buffer = [0; 5];\n+    ///     let mut handle = file.take(5);\n+    ///     handle.read(&mut buffer)?;\n     ///\n-    /// let file = handle.into_inner();\n-    /// # Ok(())\n-    /// # }\n+    ///     let file = handle.into_inner();\n+    ///     Ok(())\n+    /// }\n     /// ```\n     #[stable(feature = \"io_take_into_inner\", since = \"1.15.0\")]\n     pub fn into_inner(self) -> T {\n@@ -1870,21 +1869,21 @@ impl<T> Take<T> {\n     ///\n     /// # Examples\n     ///\n-    /// ```\n+    /// ```no_run\n     /// use std::io;\n     /// use std::io::prelude::*;\n     /// use std::fs::File;\n     ///\n-    /// # fn foo() -> io::Result<()> {\n-    /// let mut file = File::open(\"foo.txt\")?;\n+    /// fn main() -> io::Result<()> {\n+    ///     let mut file = File::open(\"foo.txt\")?;\n     ///\n-    /// let mut buffer = [0; 5];\n-    /// let mut handle = file.take(5);\n-    /// handle.read(&mut buffer)?;\n+    ///     let mut buffer = [0; 5];\n+    ///     let mut handle = file.take(5);\n+    ///     handle.read(&mut buffer)?;\n     ///\n-    /// let file = handle.get_ref();\n-    /// # Ok(())\n-    /// # }\n+    ///     let file = handle.get_ref();\n+    ///     Ok(())\n+    /// }\n     /// ```\n     #[stable(feature = \"more_io_inner_methods\", since = \"1.20.0\")]\n     pub fn get_ref(&self) -> &T {\n@@ -1899,21 +1898,21 @@ impl<T> Take<T> {\n     ///\n     /// # Examples\n     ///\n-    /// ```\n+    /// ```no_run\n     /// use std::io;\n     /// use std::io::prelude::*;\n     /// use std::fs::File;\n     ///\n-    /// # fn foo() -> io::Result<()> {\n-    /// let mut file = File::open(\"foo.txt\")?;\n+    /// fn main() -> io::Result<()> {\n+    ///     let mut file = File::open(\"foo.txt\")?;\n     ///\n-    /// let mut buffer = [0; 5];\n-    /// let mut handle = file.take(5);\n-    /// handle.read(&mut buffer)?;\n+    ///     let mut buffer = [0; 5];\n+    ///     let mut handle = file.take(5);\n+    ///     handle.read(&mut buffer)?;\n     ///\n-    /// let file = handle.get_mut();\n-    /// # Ok(())\n-    /// # }\n+    ///     let file = handle.get_mut();\n+    ///     Ok(())\n+    /// }\n     /// ```\n     #[stable(feature = \"more_io_inner_methods\", since = \"1.20.0\")]\n     pub fn get_mut(&mut self) -> &mut T {"}, {"sha": "2472bed5ba43570b3b0c3e2c6f9bb2e2216827f9", "filename": "src/libstd/io/stdio.rs", "status": "modified", "additions": 53, "deletions": 53, "changes": 106, "blob_url": "https://github.com/rust-lang/rust/blob/e9dcec070d6097e5a22b6658844dccd9d1f578cf/src%2Flibstd%2Fio%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9dcec070d6097e5a22b6658844dccd9d1f578cf/src%2Flibstd%2Fio%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fstdio.rs?ref=e9dcec070d6097e5a22b6658844dccd9d1f578cf", "patch": "@@ -171,29 +171,29 @@ pub struct StdinLock<'a> {\n ///\n /// Using implicit synchronization:\n ///\n-/// ```\n+/// ```no_run\n /// use std::io::{self, Read};\n ///\n-/// # fn foo() -> io::Result<String> {\n-/// let mut buffer = String::new();\n-/// io::stdin().read_to_string(&mut buffer)?;\n-/// # Ok(buffer)\n-/// # }\n+/// fn main() -> io::Result<()> {\n+///     let mut buffer = String::new();\n+///     io::stdin().read_to_string(&mut buffer)?;\n+///     Ok(())\n+/// }\n /// ```\n ///\n /// Using explicit synchronization:\n ///\n-/// ```\n+/// ```no_run\n /// use std::io::{self, Read};\n ///\n-/// # fn foo() -> io::Result<String> {\n-/// let mut buffer = String::new();\n-/// let stdin = io::stdin();\n-/// let mut handle = stdin.lock();\n+/// fn main() -> io::Result<()> {\n+///     let mut buffer = String::new();\n+///     let stdin = io::stdin();\n+///     let mut handle = stdin.lock();\n ///\n-/// handle.read_to_string(&mut buffer)?;\n-/// # Ok(buffer)\n-/// # }\n+///     handle.read_to_string(&mut buffer)?;\n+///     Ok(())\n+/// }\n /// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub fn stdin() -> Stdin {\n@@ -225,17 +225,17 @@ impl Stdin {\n     ///\n     /// # Examples\n     ///\n-    /// ```\n+    /// ```no_run\n     /// use std::io::{self, Read};\n     ///\n-    /// # fn foo() -> io::Result<String> {\n-    /// let mut buffer = String::new();\n-    /// let stdin = io::stdin();\n-    /// let mut handle = stdin.lock();\n+    /// fn main() -> io::Result<()> {\n+    ///     let mut buffer = String::new();\n+    ///     let stdin = io::stdin();\n+    ///     let mut handle = stdin.lock();\n     ///\n-    /// handle.read_to_string(&mut buffer)?;\n-    /// # Ok(buffer)\n-    /// # }\n+    ///     handle.read_to_string(&mut buffer)?;\n+    ///     Ok(())\n+    /// }\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn lock(&self) -> StdinLock {\n@@ -369,29 +369,29 @@ pub struct StdoutLock<'a> {\n ///\n /// Using implicit synchronization:\n ///\n-/// ```\n+/// ```no_run\n /// use std::io::{self, Write};\n ///\n-/// # fn foo() -> io::Result<()> {\n-/// io::stdout().write(b\"hello world\")?;\n+/// fn main() -> io::Result<()> {\n+///     io::stdout().write(b\"hello world\")?;\n ///\n-/// # Ok(())\n-/// # }\n+///     Ok(())\n+/// }\n /// ```\n ///\n /// Using explicit synchronization:\n ///\n-/// ```\n+/// ```no_run\n /// use std::io::{self, Write};\n ///\n-/// # fn foo() -> io::Result<()> {\n-/// let stdout = io::stdout();\n-/// let mut handle = stdout.lock();\n+/// fn main() -> io::Result<()> {\n+///     let stdout = io::stdout();\n+///     let mut handle = stdout.lock();\n ///\n-/// handle.write(b\"hello world\")?;\n+///     handle.write(b\"hello world\")?;\n ///\n-/// # Ok(())\n-/// # }\n+///     Ok(())\n+/// }\n /// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub fn stdout() -> Stdout {\n@@ -419,17 +419,17 @@ impl Stdout {\n     ///\n     /// # Examples\n     ///\n-    /// ```\n+    /// ```no_run\n     /// use std::io::{self, Write};\n     ///\n-    /// # fn foo() -> io::Result<()> {\n-    /// let stdout = io::stdout();\n-    /// let mut handle = stdout.lock();\n+    /// fn main() -> io::Result<()> {\n+    ///     let stdout = io::stdout();\n+    ///     let mut handle = stdout.lock();\n     ///\n-    /// handle.write(b\"hello world\")?;\n+    ///     handle.write(b\"hello world\")?;\n     ///\n-    /// # Ok(())\n-    /// # }\n+    ///     Ok(())\n+    /// }\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn lock(&self) -> StdoutLock {\n@@ -505,29 +505,29 @@ pub struct StderrLock<'a> {\n ///\n /// Using implicit synchronization:\n ///\n-/// ```\n+/// ```no_run\n /// use std::io::{self, Write};\n ///\n-/// # fn foo() -> io::Result<()> {\n-/// io::stderr().write(b\"hello world\")?;\n+/// fn main() -> io::Result<()> {\n+///     io::stderr().write(b\"hello world\")?;\n ///\n-/// # Ok(())\n-/// # }\n+///     Ok(())\n+/// }\n /// ```\n ///\n /// Using explicit synchronization:\n ///\n-/// ```\n+/// ```no_run\n /// use std::io::{self, Write};\n ///\n-/// # fn foo() -> io::Result<()> {\n-/// let stderr = io::stderr();\n-/// let mut handle = stderr.lock();\n+/// fn main() -> io::Result<()> {\n+///     let stderr = io::stderr();\n+///     let mut handle = stderr.lock();\n ///\n-/// handle.write(b\"hello world\")?;\n+///     handle.write(b\"hello world\")?;\n ///\n-/// # Ok(())\n-/// # }\n+///     Ok(())\n+/// }\n /// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub fn stderr() -> Stderr {"}, {"sha": "195310a26fed643f05ec6e9abd5eb370cf90261d", "filename": "src/libstd/io/util.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/e9dcec070d6097e5a22b6658844dccd9d1f578cf/src%2Flibstd%2Fio%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9dcec070d6097e5a22b6658844dccd9d1f578cf/src%2Flibstd%2Fio%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Futil.rs?ref=e9dcec070d6097e5a22b6658844dccd9d1f578cf", "patch": "@@ -34,16 +34,15 @@ use mem;\n /// ```\n /// use std::io;\n ///\n-/// # fn foo() -> io::Result<()> {\n-/// let mut reader: &[u8] = b\"hello\";\n-/// let mut writer: Vec<u8> = vec![];\n+/// fn main() -> io::Result<()> {\n+///     let mut reader: &[u8] = b\"hello\";\n+///     let mut writer: Vec<u8> = vec![];\n ///\n-/// io::copy(&mut reader, &mut writer)?;\n+///     io::copy(&mut reader, &mut writer)?;\n ///\n-/// assert_eq!(&b\"hello\"[..], &writer[..]);\n-/// # Ok(())\n-/// # }\n-/// # foo().unwrap();\n+///     assert_eq!(&b\"hello\"[..], &writer[..]);\n+///     Ok(())\n+/// }\n /// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub fn copy<R: ?Sized, W: ?Sized>(reader: &mut R, writer: &mut W) -> io::Result<u64>"}, {"sha": "b0d5e563cb9e17d3bc2782630616cd8011e81f14", "filename": "src/libstd/net/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e9dcec070d6097e5a22b6658844dccd9d1f578cf/src%2Flibstd%2Fnet%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9dcec070d6097e5a22b6658844dccd9d1f578cf/src%2Flibstd%2Fnet%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Fmod.rs?ref=e9dcec070d6097e5a22b6658844dccd9d1f578cf", "patch": "@@ -175,12 +175,12 @@ impl fmt::Debug for LookupHost {\n ///\n /// use std::net;\n ///\n-/// # fn foo() -> std::io::Result<()> {\n-/// for host in net::lookup_host(\"rust-lang.org\")? {\n-///     println!(\"found address: {}\", host);\n+/// fn main() -> std::io::Result<()> {\n+///     for host in net::lookup_host(\"rust-lang.org\")? {\n+///         println!(\"found address: {}\", host);\n+///     }\n+///     Ok(())\n /// }\n-/// # Ok(())\n-/// # }\n /// ```\n #[unstable(feature = \"lookup_host\", reason = \"unsure about the returned \\\n                                               iterator and returning socket \\"}, {"sha": "0f60b5b3ee4b4ffbf4ff3387f3f0ed24e7cf6933", "filename": "src/libstd/net/tcp.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/e9dcec070d6097e5a22b6658844dccd9d1f578cf/src%2Flibstd%2Fnet%2Ftcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9dcec070d6097e5a22b6658844dccd9d1f578cf/src%2Flibstd%2Fnet%2Ftcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Ftcp.rs?ref=e9dcec070d6097e5a22b6658844dccd9d1f578cf", "patch": "@@ -72,23 +72,23 @@ pub struct TcpStream(net_imp::TcpStream);\n ///\n /// # Examples\n ///\n-/// ```\n+/// ```no_run\n /// # use std::io;\n /// use std::net::{TcpListener, TcpStream};\n ///\n /// fn handle_client(stream: TcpStream) {\n ///     // ...\n /// }\n ///\n-/// # fn process() -> io::Result<()> {\n-/// let listener = TcpListener::bind(\"127.0.0.1:80\").unwrap();\n+/// fn main() -> io::Result<()> {\n+///     let listener = TcpListener::bind(\"127.0.0.1:80\").unwrap();\n ///\n-/// // accept connections and process them serially\n-/// for stream in listener.incoming() {\n-///     handle_client(stream?);\n+///     // accept connections and process them serially\n+///     for stream in listener.incoming() {\n+///         handle_client(stream?);\n+///     }\n+///     Ok(())\n /// }\n-/// # Ok(())\n-/// # }\n /// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct TcpListener(net_imp::TcpListener);"}, {"sha": "d25e29999cb68c2457e51ffbdc51173f3c4247cf", "filename": "src/libstd/net/udp.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/e9dcec070d6097e5a22b6658844dccd9d1f578cf/src%2Flibstd%2Fnet%2Fudp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9dcec070d6097e5a22b6658844dccd9d1f578cf/src%2Flibstd%2Fnet%2Fudp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Fudp.rs?ref=e9dcec070d6097e5a22b6658844dccd9d1f578cf", "patch": "@@ -44,22 +44,22 @@ use time::Duration;\n /// ```no_run\n /// use std::net::UdpSocket;\n ///\n-/// # fn foo() -> std::io::Result<()> {\n-/// {\n-///     let mut socket = UdpSocket::bind(\"127.0.0.1:34254\")?;\n+/// fn main() -> std::io::Result<()> {\n+///     {\n+///         let mut socket = UdpSocket::bind(\"127.0.0.1:34254\")?;\n ///\n-///     // Receives a single datagram message on the socket. If `buf` is too small to hold\n-///     // the message, it will be cut off.\n-///     let mut buf = [0; 10];\n-///     let (amt, src) = socket.recv_from(&mut buf)?;\n+///         // Receives a single datagram message on the socket. If `buf` is too small to hold\n+///         // the message, it will be cut off.\n+///         let mut buf = [0; 10];\n+///         let (amt, src) = socket.recv_from(&mut buf)?;\n ///\n-///     // Redeclare `buf` as slice of the received data and send reverse data back to origin.\n-///     let buf = &mut buf[..amt];\n-///     buf.reverse();\n-///     socket.send_to(buf, &src)?;\n-///     # Ok(())\n-/// } // the socket is closed here\n-/// # }\n+///         // Redeclare `buf` as slice of the received data and send reverse data back to origin.\n+///         let buf = &mut buf[..amt];\n+///         buf.reverse();\n+///         socket.send_to(buf, &src)?;\n+///     } // the socket is closed here\n+///     Ok(())\n+/// }\n /// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct UdpSocket(net_imp::UdpSocket);"}, {"sha": "2be2fbcb2dbf75900627347081d556cb9754f538", "filename": "src/libstd/os/linux/fs.rs", "status": "modified", "additions": 119, "deletions": 119, "changes": 238, "blob_url": "https://github.com/rust-lang/rust/blob/e9dcec070d6097e5a22b6658844dccd9d1f578cf/src%2Flibstd%2Fos%2Flinux%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9dcec070d6097e5a22b6658844dccd9d1f578cf/src%2Flibstd%2Fos%2Flinux%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Flinux%2Ffs.rs?ref=e9dcec070d6097e5a22b6658844dccd9d1f578cf", "patch": "@@ -32,16 +32,16 @@ pub trait MetadataExt {\n     ///\n     /// # Examples\n     ///\n-    /// ```\n+    /// ```no_run\n     /// use std::fs;\n+    /// use std::io;\n     /// use std::os::linux::fs::MetadataExt;\n     ///\n-    /// # use std::io;\n-    /// # fn f() -> io::Result<()> {\n-    /// let meta = fs::metadata(\"some_file\")?;\n-    /// let stat = meta.as_raw_stat();\n-    /// # Ok(())\n-    /// # }\n+    /// fn main() -> io::Result<()> {\n+    ///     let meta = fs::metadata(\"some_file\")?;\n+    ///     let stat = meta.as_raw_stat();\n+    ///     Ok(())\n+    /// }\n     /// ```\n     #[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n     #[rustc_deprecated(since = \"1.8.0\",\n@@ -54,118 +54,118 @@ pub trait MetadataExt {\n     ///\n     /// # Examples\n     ///\n-    /// ```\n+    /// ```no_run\n     /// use std::fs;\n+    /// use std::io;\n     /// use std::os::linux::fs::MetadataExt;\n     ///\n-    /// # use std::io;\n-    /// # fn f() -> io::Result<()> {\n-    /// let meta = fs::metadata(\"some_file\")?;\n-    /// println!(\"{}\", meta.st_dev());\n-    /// # Ok(())\n-    /// # }\n+    /// fn main() -> io::Result<()> {\n+    ///     let meta = fs::metadata(\"some_file\")?;\n+    ///     println!(\"{}\", meta.st_dev());\n+    ///     Ok(())\n+    /// }\n     /// ```\n     #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n     fn st_dev(&self) -> u64;\n     /// Returns the inode number.\n     ///\n     /// # Examples\n     ///\n-    /// ```\n+    /// ```no_run\n     /// use std::fs;\n+    /// use std::io;\n     /// use std::os::linux::fs::MetadataExt;\n     ///\n-    /// # use std::io;\n-    /// # fn f() -> io::Result<()> {\n-    /// let meta = fs::metadata(\"some_file\")?;\n-    /// println!(\"{}\", meta.st_ino());\n-    /// # Ok(())\n-    /// # }\n+    /// fn main() -> io::Result<()> {\n+    ///     let meta = fs::metadata(\"some_file\")?;\n+    ///     println!(\"{}\", meta.st_ino());\n+    ///     Ok(())\n+    /// }\n     /// ```\n     #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n     fn st_ino(&self) -> u64;\n     /// Returns the file type and mode.\n     ///\n     /// # Examples\n     ///\n-    /// ```\n+    /// ```no_run\n     /// use std::fs;\n+    /// use std::io;\n     /// use std::os::linux::fs::MetadataExt;\n     ///\n-    /// # use std::io;\n-    /// # fn f() -> io::Result<()> {\n-    /// let meta = fs::metadata(\"some_file\")?;\n-    /// println!(\"{}\", meta.st_mode());\n-    /// # Ok(())\n-    /// # }\n+    /// fn main() -> io::Result<()> {\n+    ///     let meta = fs::metadata(\"some_file\")?;\n+    ///     println!(\"{}\", meta.st_mode());\n+    ///     Ok(())\n+    /// }\n     /// ```\n     #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n     fn st_mode(&self) -> u32;\n     /// Returns the number of hard links to file.\n     ///\n     /// # Examples\n     ///\n-    /// ```\n+    /// ```no_run\n     /// use std::fs;\n+    /// use std::io;\n     /// use std::os::linux::fs::MetadataExt;\n     ///\n-    /// # use std::io;\n-    /// # fn f() -> io::Result<()> {\n-    /// let meta = fs::metadata(\"some_file\")?;\n-    /// println!(\"{}\", meta.st_nlink());\n-    /// # Ok(())\n-    /// # }\n+    /// fn main() -> io::Result<()> {\n+    ///     let meta = fs::metadata(\"some_file\")?;\n+    ///     println!(\"{}\", meta.st_nlink());\n+    ///     Ok(())\n+    /// }\n     /// ```\n     #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n     fn st_nlink(&self) -> u64;\n     /// Returns the user ID of the file owner.\n     ///\n     /// # Examples\n     ///\n-    /// ```\n+    /// ```no_run\n     /// use std::fs;\n+    /// use std::io;\n     /// use std::os::linux::fs::MetadataExt;\n     ///\n-    /// # use std::io;\n-    /// # fn f() -> io::Result<()> {\n-    /// let meta = fs::metadata(\"some_file\")?;\n-    /// println!(\"{}\", meta.st_uid());\n-    /// # Ok(())\n-    /// # }\n+    /// fn main() -> io::Result<()> {\n+    ///     let meta = fs::metadata(\"some_file\")?;\n+    ///     println!(\"{}\", meta.st_uid());\n+    ///     Ok(())\n+    /// }\n     /// ```\n     #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n     fn st_uid(&self) -> u32;\n     /// Returns the group ID of the file owner.\n     ///\n     /// # Examples\n     ///\n-    /// ```\n+    /// ```no_run\n     /// use std::fs;\n+    /// use std::io;\n     /// use std::os::linux::fs::MetadataExt;\n     ///\n-    /// # use std::io;\n-    /// # fn f() -> io::Result<()> {\n-    /// let meta = fs::metadata(\"some_file\")?;\n-    /// println!(\"{}\", meta.st_gid());\n-    /// # Ok(())\n-    /// # }\n+    /// fn main() -> io::Result<()> {\n+    ///     let meta = fs::metadata(\"some_file\")?;\n+    ///     println!(\"{}\", meta.st_gid());\n+    ///     Ok(())\n+    /// }\n     /// ```\n     #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n     fn st_gid(&self) -> u32;\n     /// Returns the device ID that this file represents. Only relevant for special file.\n     ///\n     /// # Examples\n     ///\n-    /// ```\n+    /// ```no_run\n     /// use std::fs;\n+    /// use std::io;\n     /// use std::os::linux::fs::MetadataExt;\n     ///\n-    /// # use std::io;\n-    /// # fn f() -> io::Result<()> {\n-    /// let meta = fs::metadata(\"some_file\")?;\n-    /// println!(\"{}\", meta.st_rdev());\n-    /// # Ok(())\n-    /// # }\n+    /// fn main() -> io::Result<()> {\n+    ///     let meta = fs::metadata(\"some_file\")?;\n+    ///     println!(\"{}\", meta.st_rdev());\n+    ///     Ok(())\n+    /// }\n     /// ```\n     #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n     fn st_rdev(&self) -> u64;\n@@ -176,152 +176,152 @@ pub trait MetadataExt {\n     ///\n     /// # Examples\n     ///\n-    /// ```\n+    /// ```no_run\n     /// use std::fs;\n+    /// use std::io;\n     /// use std::os::linux::fs::MetadataExt;\n     ///\n-    /// # use std::io;\n-    /// # fn f() -> io::Result<()> {\n-    /// let meta = fs::metadata(\"some_file\")?;\n-    /// println!(\"{}\", meta.st_size());\n-    /// # Ok(())\n-    /// # }\n+    /// fn main() -> io::Result<()> {\n+    ///     let meta = fs::metadata(\"some_file\")?;\n+    ///     println!(\"{}\", meta.st_size());\n+    ///     Ok(())\n+    /// }\n     /// ```\n     #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n     fn st_size(&self) -> u64;\n     /// Returns the last access time.\n     ///\n     /// # Examples\n     ///\n-    /// ```\n+    /// ```no_run\n     /// use std::fs;\n+    /// use std::io;\n     /// use std::os::linux::fs::MetadataExt;\n     ///\n-    /// # use std::io;\n-    /// # fn f() -> io::Result<()> {\n-    /// let meta = fs::metadata(\"some_file\")?;\n-    /// println!(\"{}\", meta.st_atime());\n-    /// # Ok(())\n-    /// # }\n+    /// fn main() -> io::Result<()> {\n+    ///     let meta = fs::metadata(\"some_file\")?;\n+    ///     println!(\"{}\", meta.st_atime());\n+    ///     Ok(())\n+    /// }\n     /// ```\n     #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n     fn st_atime(&self) -> i64;\n     /// Returns the last access time, nano seconds part.\n     ///\n     /// # Examples\n     ///\n-    /// ```\n+    /// ```no_run\n     /// use std::fs;\n+    /// use std::io;\n     /// use std::os::linux::fs::MetadataExt;\n     ///\n-    /// # use std::io;\n-    /// # fn f() -> io::Result<()> {\n-    /// let meta = fs::metadata(\"some_file\")?;\n-    /// println!(\"{}\", meta.st_atime_nsec());\n-    /// # Ok(())\n-    /// # }\n+    /// fn main() -> io::Result<()> {\n+    ///     let meta = fs::metadata(\"some_file\")?;\n+    ///     println!(\"{}\", meta.st_atime_nsec());\n+    ///     Ok(())\n+    /// }\n     /// ```\n     #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n     fn st_atime_nsec(&self) -> i64;\n     /// Returns the last modification time.\n     ///\n     /// # Examples\n     ///\n-    /// ```\n+    /// ```no_run\n     /// use std::fs;\n+    /// use std::io;\n     /// use std::os::linux::fs::MetadataExt;\n     ///\n-    /// # use std::io;\n-    /// # fn f() -> io::Result<()> {\n-    /// let meta = fs::metadata(\"some_file\")?;\n-    /// println!(\"{}\", meta.st_mtime());\n-    /// # Ok(())\n-    /// # }\n+    /// fn main() -> io::Result<()> {\n+    ///     let meta = fs::metadata(\"some_file\")?;\n+    ///     println!(\"{}\", meta.st_mtime());\n+    ///     Ok(())\n+    /// }\n     /// ```\n     #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n     fn st_mtime(&self) -> i64;\n     /// Returns the last modification time, nano seconds part.\n     ///\n     /// # Examples\n     ///\n-    /// ```\n+    /// ```no_run\n     /// use std::fs;\n+    /// use std::io;\n     /// use std::os::linux::fs::MetadataExt;\n     ///\n-    /// # use std::io;\n-    /// # fn f() -> io::Result<()> {\n-    /// let meta = fs::metadata(\"some_file\")?;\n-    /// println!(\"{}\", meta.st_mtime_nsec());\n-    /// # Ok(())\n-    /// # }\n+    /// fn main() -> io::Result<()> {\n+    ///     let meta = fs::metadata(\"some_file\")?;\n+    ///     println!(\"{}\", meta.st_mtime_nsec());\n+    ///     Ok(())\n+    /// }\n     /// ```\n     #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n     fn st_mtime_nsec(&self) -> i64;\n     /// Returns the last status change time.\n     ///\n     /// # Examples\n     ///\n-    /// ```\n+    /// ```no_run\n     /// use std::fs;\n+    /// use std::io;\n     /// use std::os::linux::fs::MetadataExt;\n     ///\n-    /// # use std::io;\n-    /// # fn f() -> io::Result<()> {\n-    /// let meta = fs::metadata(\"some_file\")?;\n-    /// println!(\"{}\", meta.st_ctime());\n-    /// # Ok(())\n-    /// # }\n+    /// fn main() -> io::Result<()> {\n+    ///     let meta = fs::metadata(\"some_file\")?;\n+    ///     println!(\"{}\", meta.st_ctime());\n+    ///     Ok(())\n+    /// }\n     /// ```\n     #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n     fn st_ctime(&self) -> i64;\n     /// Returns the last status change time, nano seconds part.\n     ///\n     /// # Examples\n     ///\n-    /// ```\n+    /// ```no_run\n     /// use std::fs;\n+    /// use std::io;\n     /// use std::os::linux::fs::MetadataExt;\n     ///\n-    /// # use std::io;\n-    /// # fn f() -> io::Result<()> {\n-    /// let meta = fs::metadata(\"some_file\")?;\n-    /// println!(\"{}\", meta.st_ctime_nsec());\n-    /// # Ok(())\n-    /// # }\n+    /// fn main() -> io::Result<()> {\n+    ///     let meta = fs::metadata(\"some_file\")?;\n+    ///     println!(\"{}\", meta.st_ctime_nsec());\n+    ///     Ok(())\n+    /// }\n     /// ```\n     #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n     fn st_ctime_nsec(&self) -> i64;\n     /// Returns the \"preferred\" blocksize for efficient filesystem I/O.\n     ///\n     /// # Examples\n     ///\n-    /// ```\n+    /// ```no_run\n     /// use std::fs;\n+    /// use std::io;\n     /// use std::os::linux::fs::MetadataExt;\n     ///\n-    /// # use std::io;\n-    /// # fn f() -> io::Result<()> {\n-    /// let meta = fs::metadata(\"some_file\")?;\n-    /// println!(\"{}\", meta.st_blksize());\n-    /// # Ok(())\n-    /// # }\n+    /// fn main() -> io::Result<()> {\n+    ///     let meta = fs::metadata(\"some_file\")?;\n+    ///     println!(\"{}\", meta.st_blksize());\n+    ///     Ok(())\n+    /// }\n     /// ```\n     #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n     fn st_blksize(&self) -> u64;\n     /// Returns the number of blocks allocated to the file, 512-byte units.\n     ///\n     /// # Examples\n     ///\n-    /// ```\n+    /// ```no_run\n     /// use std::fs;\n+    /// use std::io;\n     /// use std::os::linux::fs::MetadataExt;\n     ///\n-    /// # use std::io;\n-    /// # fn f() -> io::Result<()> {\n-    /// let meta = fs::metadata(\"some_file\")?;\n-    /// println!(\"{}\", meta.st_blocks());\n-    /// # Ok(())\n-    /// # }\n+    /// fn main() -> io::Result<()> {\n+    ///     let meta = fs::metadata(\"some_file\")?;\n+    ///     println!(\"{}\", meta.st_blocks());\n+    ///     Ok(())\n+    /// }\n     /// ```\n     #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n     fn st_blocks(&self) -> u64;"}, {"sha": "0f4762aa8810a901490f828bb4975a51e470ec91", "filename": "src/libstd/sys/redox/ext/fs.rs", "status": "modified", "additions": 20, "deletions": 18, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/e9dcec070d6097e5a22b6658844dccd9d1f578cf/src%2Flibstd%2Fsys%2Fredox%2Fext%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9dcec070d6097e5a22b6658844dccd9d1f578cf/src%2Flibstd%2Fsys%2Fredox%2Fext%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fredox%2Fext%2Ffs.rs?ref=e9dcec070d6097e5a22b6658844dccd9d1f578cf", "patch": "@@ -30,13 +30,14 @@ pub trait PermissionsExt {\n     /// use std::fs::File;\n     /// use std::os::redox::fs::PermissionsExt;\n     ///\n-    /// # fn run() -> std::io::Result<()> {\n-    /// let f = File::create(\"foo.txt\")?;\n-    /// let metadata = f.metadata()?;\n-    /// let permissions = metadata.permissions();\n+    /// fn main() -> std::io::Result<()> {\n+    ///     let f = File::create(\"foo.txt\")?;\n+    ///     let metadata = f.metadata()?;\n+    ///     let permissions = metadata.permissions();\n     ///\n-    /// println!(\"permissions: {}\", permissions.mode());\n-    /// # Ok(()) }\n+    ///     println!(\"permissions: {}\", permissions.mode());\n+    ///     Ok(())\n+    /// }\n     /// ```\n     #[stable(feature = \"fs_ext\", since = \"1.1.0\")]\n     fn mode(&self) -> u32;\n@@ -49,14 +50,15 @@ pub trait PermissionsExt {\n     /// use std::fs::File;\n     /// use std::os::redox::fs::PermissionsExt;\n     ///\n-    /// # fn run() -> std::io::Result<()> {\n-    /// let f = File::create(\"foo.txt\")?;\n-    /// let metadata = f.metadata()?;\n-    /// let mut permissions = metadata.permissions();\n+    /// fn main() -> std::io::Result<()> {\n+    ///     let f = File::create(\"foo.txt\")?;\n+    ///     let metadata = f.metadata()?;\n+    ///     let mut permissions = metadata.permissions();\n     ///\n-    /// permissions.set_mode(0o644); // Read/write for owner and read for others.\n-    /// assert_eq!(permissions.mode(), 0o644);\n-    /// # Ok(()) }\n+    ///     permissions.set_mode(0o644); // Read/write for owner and read for others.\n+    ///     assert_eq!(permissions.mode(), 0o644);\n+    ///     Ok(())\n+    /// }\n     /// ```\n     #[stable(feature = \"fs_ext\", since = \"1.1.0\")]\n     fn set_mode(&mut self, mode: u32);\n@@ -291,13 +293,13 @@ impl FileTypeExt for fs::FileType {\n ///\n /// # Examples\n ///\n-/// ```\n+/// ```no_run\n /// use std::os::redox::fs;\n ///\n-/// # fn foo() -> std::io::Result<()> {\n-/// fs::symlink(\"a.txt\", \"b.txt\")?;\n-/// # Ok(())\n-/// # }\n+/// fn main() -> std::io::Result<()> {\n+///     fs::symlink(\"a.txt\", \"b.txt\")?;\n+///     Ok(())\n+/// }\n /// ```\n #[stable(feature = \"symlink\", since = \"1.1.0\")]\n pub fn symlink<P: AsRef<Path>, Q: AsRef<Path>>(src: P, dst: Q) -> io::Result<()>"}, {"sha": "3c5b9424fb06ea1688409166891d0356e686d406", "filename": "src/libstd/sys/unix/ext/fs.rs", "status": "modified", "additions": 171, "deletions": 171, "changes": 342, "blob_url": "https://github.com/rust-lang/rust/blob/e9dcec070d6097e5a22b6658844dccd9d1f578cf/src%2Flibstd%2Fsys%2Funix%2Fext%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9dcec070d6097e5a22b6658844dccd9d1f578cf/src%2Flibstd%2Fsys%2Funix%2Fext%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fext%2Ffs.rs?ref=e9dcec070d6097e5a22b6658844dccd9d1f578cf", "patch": "@@ -41,20 +41,20 @@ pub trait FileExt {\n     ///\n     /// # Examples\n     ///\n-    /// ```\n-    /// use std::os::unix::prelude::FileExt;\n+    /// ```no_run\n+    /// use std::io;\n     /// use std::fs::File;\n+    /// use std::os::unix::prelude::FileExt;\n     ///\n-    /// # use std::io;\n-    /// # fn f() -> io::Result<()> {\n-    /// let mut buf = [0u8; 8];\n-    /// let file = File::open(\"foo.txt\")?;\n+    /// fn main() -> io::Result<()> {\n+    ///     let mut buf = [0u8; 8];\n+    ///     let file = File::open(\"foo.txt\")?;\n     ///\n-    /// // We now read 8 bytes from the offset 10.\n-    /// let num_bytes_read = file.read_at(&mut buf, 10)?;\n-    /// println!(\"read {} bytes: {:?}\", num_bytes_read, buf);\n-    /// # Ok(())\n-    /// # }\n+    ///     // We now read 8 bytes from the offset 10.\n+    ///     let num_bytes_read = file.read_at(&mut buf, 10)?;\n+    ///     println!(\"read {} bytes: {:?}\", num_bytes_read, buf);\n+    ///     Ok(())\n+    /// }\n     /// ```\n     #[stable(feature = \"file_offset\", since = \"1.15.0\")]\n     fn read_at(&self, buf: &mut [u8], offset: u64) -> io::Result<usize>;\n@@ -78,18 +78,18 @@ pub trait FileExt {\n     ///\n     /// # Examples\n     ///\n-    /// ```\n-    /// use std::os::unix::prelude::FileExt;\n+    /// ```no_run\n     /// use std::fs::File;\n+    /// use std::io;\n+    /// use std::os::unix::prelude::FileExt;\n     ///\n-    /// # use std::io;\n-    /// # fn f() -> io::Result<()> {\n-    /// let file = File::open(\"foo.txt\")?;\n+    /// fn main() -> io::Result<()> {\n+    ///     let file = File::open(\"foo.txt\")?;\n     ///\n-    /// // We now write at the offset 10.\n-    /// file.write_at(b\"sushi\", 10)?;\n-    /// # Ok(())\n-    /// # }\n+    ///     // We now write at the offset 10.\n+    ///     file.write_at(b\"sushi\", 10)?;\n+    ///     Ok(())\n+    /// }\n     /// ```\n     #[stable(feature = \"file_offset\", since = \"1.15.0\")]\n     fn write_at(&self, buf: &[u8], offset: u64) -> io::Result<usize>;\n@@ -117,13 +117,13 @@ pub trait PermissionsExt {\n     /// use std::fs::File;\n     /// use std::os::unix::fs::PermissionsExt;\n     ///\n-    /// # fn run() -> std::io::Result<()> {\n-    /// let f = File::create(\"foo.txt\")?;\n-    /// let metadata = f.metadata()?;\n-    /// let permissions = metadata.permissions();\n+    /// fn main() -> std::io::Result<()> {\n+    ///     let f = File::create(\"foo.txt\")?;\n+    ///     let metadata = f.metadata()?;\n+    ///     let permissions = metadata.permissions();\n     ///\n-    /// println!(\"permissions: {}\", permissions.mode());\n-    /// # Ok(()) }\n+    ///     println!(\"permissions: {}\", permissions.mode());\n+    ///     Ok(()) }\n     /// ```\n     #[stable(feature = \"fs_ext\", since = \"1.1.0\")]\n     fn mode(&self) -> u32;\n@@ -136,14 +136,14 @@ pub trait PermissionsExt {\n     /// use std::fs::File;\n     /// use std::os::unix::fs::PermissionsExt;\n     ///\n-    /// # fn run() -> std::io::Result<()> {\n-    /// let f = File::create(\"foo.txt\")?;\n-    /// let metadata = f.metadata()?;\n-    /// let mut permissions = metadata.permissions();\n+    /// fn main() -> std::io::Result<()> {\n+    ///     let f = File::create(\"foo.txt\")?;\n+    ///     let metadata = f.metadata()?;\n+    ///     let mut permissions = metadata.permissions();\n     ///\n-    /// permissions.set_mode(0o644); // Read/write for owner and read for others.\n-    /// assert_eq!(permissions.mode(), 0o644);\n-    /// # Ok(()) }\n+    ///     permissions.set_mode(0o644); // Read/write for owner and read for others.\n+    ///     assert_eq!(permissions.mode(), 0o644);\n+    ///     Ok(()) }\n     /// ```\n     #[stable(feature = \"fs_ext\", since = \"1.1.0\")]\n     fn set_mode(&mut self, mode: u32);\n@@ -260,15 +260,15 @@ pub trait MetadataExt {\n     /// # Examples\n     ///\n     /// ```no_run\n+    /// use std::io;\n     /// use std::fs;\n     /// use std::os::unix::fs::MetadataExt;\n     ///\n-    /// # use std::io;\n-    /// # fn f() -> io::Result<()> {\n-    /// let meta = fs::metadata(\"some_file\")?;\n-    /// let dev_id = meta.dev();\n-    /// # Ok(())\n-    /// # }\n+    /// fn main() -> io::Result<()> {\n+    ///     let meta = fs::metadata(\"some_file\")?;\n+    ///     let dev_id = meta.dev();\n+    ///     Ok(())\n+    /// }\n     /// ```\n     #[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n     fn dev(&self) -> u64;\n@@ -279,13 +279,13 @@ pub trait MetadataExt {\n     /// ```no_run\n     /// use std::fs;\n     /// use std::os::unix::fs::MetadataExt;\n+    /// use std::io;\n     ///\n-    /// # use std::io;\n-    /// # fn f() -> io::Result<()> {\n-    /// let meta = fs::metadata(\"some_file\")?;\n-    /// let inode = meta.ino();\n-    /// # Ok(())\n-    /// # }\n+    /// fn main() -> io::Result<()> {\n+    ///     let meta = fs::metadata(\"some_file\")?;\n+    ///     let inode = meta.ino();\n+    ///     Ok(())\n+    /// }\n     /// ```\n     #[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n     fn ino(&self) -> u64;\n@@ -296,17 +296,17 @@ pub trait MetadataExt {\n     /// ```no_run\n     /// use std::fs;\n     /// use std::os::unix::fs::MetadataExt;\n-    ///\n-    /// # use std::io;\n-    /// # fn f() -> io::Result<()> {\n-    /// let meta = fs::metadata(\"some_file\")?;\n-    /// let mode = meta.mode();\n-    /// let user_has_write_access      = mode & 0o200;\n-    /// let user_has_read_write_access = mode & 0o600;\n-    /// let group_has_read_access      = mode & 0o040;\n-    /// let others_have_exec_access    = mode & 0o001;\n-    /// # Ok(())\n-    /// # }\n+    /// use std::io;\n+    ///\n+    /// fn main() -> io::Result<()> {\n+    ///     let meta = fs::metadata(\"some_file\")?;\n+    ///     let mode = meta.mode();\n+    ///     let user_has_write_access      = mode & 0o200;\n+    ///     let user_has_read_write_access = mode & 0o600;\n+    ///     let group_has_read_access      = mode & 0o040;\n+    ///     let others_have_exec_access    = mode & 0o001;\n+    ///     Ok(())\n+    /// }\n     /// ```\n     #[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n     fn mode(&self) -> u32;\n@@ -317,13 +317,13 @@ pub trait MetadataExt {\n     /// ```no_run\n     /// use std::fs;\n     /// use std::os::unix::fs::MetadataExt;\n+    ///  use std::io;\n     ///\n-    /// # use std::io;\n-    /// # fn f() -> io::Result<()> {\n-    /// let meta = fs::metadata(\"some_file\")?;\n-    /// let nb_hard_links = meta.nlink();\n-    /// # Ok(())\n-    /// # }\n+    /// fn main() -> io::Result<()> {\n+    ///     let meta = fs::metadata(\"some_file\")?;\n+    ///     let nb_hard_links = meta.nlink();\n+    ///     Ok(())\n+    /// }\n     /// ```\n     #[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n     fn nlink(&self) -> u64;\n@@ -334,13 +334,13 @@ pub trait MetadataExt {\n     /// ```no_run\n     /// use std::fs;\n     /// use std::os::unix::fs::MetadataExt;\n+    /// use std::io;\n     ///\n-    /// # use std::io;\n-    /// # fn f() -> io::Result<()> {\n-    /// let meta = fs::metadata(\"some_file\")?;\n-    /// let user_id = meta.uid();\n-    /// # Ok(())\n-    /// # }\n+    /// fn main() -> io::Result<()> {\n+    ///     let meta = fs::metadata(\"some_file\")?;\n+    ///     let user_id = meta.uid();\n+    ///     Ok(())\n+    /// }\n     /// ```\n     #[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n     fn uid(&self) -> u32;\n@@ -351,13 +351,13 @@ pub trait MetadataExt {\n     /// ```no_run\n     /// use std::fs;\n     /// use std::os::unix::fs::MetadataExt;\n+    /// use std::io;\n     ///\n-    /// # use std::io;\n-    /// # fn f() -> io::Result<()> {\n-    /// let meta = fs::metadata(\"some_file\")?;\n-    /// let group_id = meta.gid();\n-    /// # Ok(())\n-    /// # }\n+    /// fn main() -> io::Result<()> {\n+    ///     let meta = fs::metadata(\"some_file\")?;\n+    ///     let group_id = meta.gid();\n+    ///     Ok(())\n+    /// }\n     /// ```\n     #[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n     fn gid(&self) -> u32;\n@@ -368,13 +368,13 @@ pub trait MetadataExt {\n     /// ```no_run\n     /// use std::fs;\n     /// use std::os::unix::fs::MetadataExt;\n+    /// use std::io;\n     ///\n-    /// # use std::io;\n-    /// # fn f() -> io::Result<()> {\n-    /// let meta = fs::metadata(\"some_file\")?;\n-    /// let device_id = meta.rdev();\n-    /// # Ok(())\n-    /// # }\n+    /// fn main() -> io::Result<()> {\n+    ///     let meta = fs::metadata(\"some_file\")?;\n+    ///     let device_id = meta.rdev();\n+    ///     Ok(())\n+    /// }\n     /// ```\n     #[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n     fn rdev(&self) -> u64;\n@@ -385,13 +385,13 @@ pub trait MetadataExt {\n     /// ```no_run\n     /// use std::fs;\n     /// use std::os::unix::fs::MetadataExt;\n+    /// use std::io;\n     ///\n-    /// # use std::io;\n-    /// # fn f() -> io::Result<()> {\n-    /// let meta = fs::metadata(\"some_file\")?;\n-    /// let file_size = meta.size();\n-    /// # Ok(())\n-    /// # }\n+    /// fn main() -> io::Result<()> {\n+    ///     let meta = fs::metadata(\"some_file\")?;\n+    ///     let file_size = meta.size();\n+    ///     Ok(())\n+    /// }\n     /// ```\n     #[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n     fn size(&self) -> u64;\n@@ -402,13 +402,13 @@ pub trait MetadataExt {\n     /// ```no_run\n     /// use std::fs;\n     /// use std::os::unix::fs::MetadataExt;\n+    /// use std::io;\n     ///\n-    /// # use std::io;\n-    /// # fn f() -> io::Result<()> {\n-    /// let meta = fs::metadata(\"some_file\")?;\n-    /// let last_access_time = meta.atime();\n-    /// # Ok(())\n-    /// # }\n+    /// fn main() -> io::Result<()> {\n+    ///     let meta = fs::metadata(\"some_file\")?;\n+    ///     let last_access_time = meta.atime();\n+    ///     Ok(())\n+    /// }\n     /// ```\n     #[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n     fn atime(&self) -> i64;\n@@ -419,13 +419,13 @@ pub trait MetadataExt {\n     /// ```no_run\n     /// use std::fs;\n     /// use std::os::unix::fs::MetadataExt;\n+    /// use std::io;\n     ///\n-    /// # use std::io;\n-    /// # fn f() -> io::Result<()> {\n-    /// let meta = fs::metadata(\"some_file\")?;\n-    /// let nano_last_access_time = meta.atime_nsec();\n-    /// # Ok(())\n-    /// # }\n+    /// fn main() -> io::Result<()> {\n+    ///     let meta = fs::metadata(\"some_file\")?;\n+    ///     let nano_last_access_time = meta.atime_nsec();\n+    ///     Ok(())\n+    /// }\n     /// ```\n     #[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n     fn atime_nsec(&self) -> i64;\n@@ -436,13 +436,13 @@ pub trait MetadataExt {\n     /// ```no_run\n     /// use std::fs;\n     /// use std::os::unix::fs::MetadataExt;\n+    /// use std::io;\n     ///\n-    /// # use std::io;\n-    /// # fn f() -> io::Result<()> {\n-    /// let meta = fs::metadata(\"some_file\")?;\n-    /// let last_modification_time = meta.mtime();\n-    /// # Ok(())\n-    /// # }\n+    /// fn main() -> io::Result<()> {\n+    ///     let meta = fs::metadata(\"some_file\")?;\n+    ///     let last_modification_time = meta.mtime();\n+    ///     Ok(())\n+    /// }\n     /// ```\n     #[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n     fn mtime(&self) -> i64;\n@@ -453,13 +453,13 @@ pub trait MetadataExt {\n     /// ```no_run\n     /// use std::fs;\n     /// use std::os::unix::fs::MetadataExt;\n+    /// use std::io;\n     ///\n-    /// # use std::io;\n-    /// # fn f() -> io::Result<()> {\n-    /// let meta = fs::metadata(\"some_file\")?;\n-    /// let nano_last_modification_time = meta.mtime_nsec();\n-    /// # Ok(())\n-    /// # }\n+    /// fn main() -> io::Result<()> {\n+    ///     let meta = fs::metadata(\"some_file\")?;\n+    ///     let nano_last_modification_time = meta.mtime_nsec();\n+    ///     Ok(())\n+    /// }\n     /// ```\n     #[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n     fn mtime_nsec(&self) -> i64;\n@@ -470,13 +470,13 @@ pub trait MetadataExt {\n     /// ```no_run\n     /// use std::fs;\n     /// use std::os::unix::fs::MetadataExt;\n+    /// use std::io;\n     ///\n-    /// # use std::io;\n-    /// # fn f() -> io::Result<()> {\n-    /// let meta = fs::metadata(\"some_file\")?;\n-    /// let last_status_change_time = meta.ctime();\n-    /// # Ok(())\n-    /// # }\n+    /// fn main() -> io::Result<()> {\n+    ///     let meta = fs::metadata(\"some_file\")?;\n+    ///     let last_status_change_time = meta.ctime();\n+    ///     Ok(())\n+    /// }\n     /// ```\n     #[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n     fn ctime(&self) -> i64;\n@@ -487,13 +487,13 @@ pub trait MetadataExt {\n     /// ```no_run\n     /// use std::fs;\n     /// use std::os::unix::fs::MetadataExt;\n+    /// use std::io;\n     ///\n-    /// # use std::io;\n-    /// # fn f() -> io::Result<()> {\n-    /// let meta = fs::metadata(\"some_file\")?;\n-    /// let nano_last_status_change_time = meta.ctime_nsec();\n-    /// # Ok(())\n-    /// # }\n+    /// fn main() -> io::Result<()> {\n+    ///     let meta = fs::metadata(\"some_file\")?;\n+    ///     let nano_last_status_change_time = meta.ctime_nsec();\n+    ///     Ok(())\n+    /// }\n     /// ```\n     #[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n     fn ctime_nsec(&self) -> i64;\n@@ -504,13 +504,13 @@ pub trait MetadataExt {\n     /// ```no_run\n     /// use std::fs;\n     /// use std::os::unix::fs::MetadataExt;\n+    /// use std::io;\n     ///\n-    /// # use std::io;\n-    /// # fn f() -> io::Result<()> {\n-    /// let meta = fs::metadata(\"some_file\")?;\n-    /// let blocksize = meta.blksize();\n-    /// # Ok(())\n-    /// # }\n+    /// fn main() -> io::Result<()> {\n+    ///     let meta = fs::metadata(\"some_file\")?;\n+    ///     let blocksize = meta.blksize();\n+    ///     Ok(())\n+    /// }\n     /// ```\n     #[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n     fn blksize(&self) -> u64;\n@@ -523,13 +523,13 @@ pub trait MetadataExt {\n     /// ```no_run\n     /// use std::fs;\n     /// use std::os::unix::fs::MetadataExt;\n+    /// use std::io;\n     ///\n-    /// # use std::io;\n-    /// # fn f() -> io::Result<()> {\n-    /// let meta = fs::metadata(\"some_file\")?;\n-    /// let blocks = meta.blocks();\n-    /// # Ok(())\n-    /// # }\n+    /// fn main() -> io::Result<()> {\n+    ///     let meta = fs::metadata(\"some_file\")?;\n+    ///     let blocks = meta.blocks();\n+    ///     Ok(())\n+    /// }\n     /// ```\n     #[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n     fn blocks(&self) -> u64;\n@@ -562,71 +562,71 @@ pub trait FileTypeExt {\n     ///\n     /// # Examples\n     ///\n-    /// ```\n+    /// ```no_run\n     /// use std::fs;\n     /// use std::os::unix::fs::FileTypeExt;\n+    /// use std::io;\n     ///\n-    /// # use std::io;\n-    /// # fn f() -> io::Result<()> {\n-    /// let meta = fs::metadata(\"block_device_file\")?;\n-    /// let file_type = meta.file_type();\n-    /// assert!(file_type.is_block_device());\n-    /// # Ok(())\n-    /// # }\n+    /// fn main() -> io::Result<()> {\n+    ///     let meta = fs::metadata(\"block_device_file\")?;\n+    ///     let file_type = meta.file_type();\n+    ///     assert!(file_type.is_block_device());\n+    ///     Ok(())\n+    /// }\n     /// ```\n     #[stable(feature = \"file_type_ext\", since = \"1.5.0\")]\n     fn is_block_device(&self) -> bool;\n     /// Returns whether this file type is a char device.\n     ///\n     /// # Examples\n     ///\n-    /// ```\n+    /// ```no_run\n     /// use std::fs;\n     /// use std::os::unix::fs::FileTypeExt;\n+    /// use std::io;\n     ///\n-    /// # use std::io;\n-    /// # fn f() -> io::Result<()> {\n-    /// let meta = fs::metadata(\"char_device_file\")?;\n-    /// let file_type = meta.file_type();\n-    /// assert!(file_type.is_char_device());\n-    /// # Ok(())\n-    /// # }\n+    /// fn main() -> io::Result<()> {\n+    ///     let meta = fs::metadata(\"char_device_file\")?;\n+    ///     let file_type = meta.file_type();\n+    ///     assert!(file_type.is_char_device());\n+    ///     Ok(())\n+    /// }\n     /// ```\n     #[stable(feature = \"file_type_ext\", since = \"1.5.0\")]\n     fn is_char_device(&self) -> bool;\n     /// Returns whether this file type is a fifo.\n     ///\n     /// # Examples\n     ///\n-    /// ```\n+    /// ```no_run\n     /// use std::fs;\n     /// use std::os::unix::fs::FileTypeExt;\n+    /// use std::io;\n     ///\n-    /// # use std::io;\n-    /// # fn f() -> io::Result<()> {\n-    /// let meta = fs::metadata(\"fifo_file\")?;\n-    /// let file_type = meta.file_type();\n-    /// assert!(file_type.is_fifo());\n-    /// # Ok(())\n-    /// # }\n+    /// fn main() -> io::Result<()> {\n+    ///     let meta = fs::metadata(\"fifo_file\")?;\n+    ///     let file_type = meta.file_type();\n+    ///     assert!(file_type.is_fifo());\n+    ///     Ok(())\n+    /// }\n     /// ```\n     #[stable(feature = \"file_type_ext\", since = \"1.5.0\")]\n     fn is_fifo(&self) -> bool;\n     /// Returns whether this file type is a socket.\n     ///\n     /// # Examples\n     ///\n-    /// ```\n+    /// ```no_run\n     /// use std::fs;\n     /// use std::os::unix::fs::FileTypeExt;\n+    /// use std::io;\n     ///\n-    /// # use std::io;\n-    /// # fn f() -> io::Result<()> {\n-    /// let meta = fs::metadata(\"unix.socket\")?;\n-    /// let file_type = meta.file_type();\n-    /// assert!(file_type.is_socket());\n-    /// # Ok(())\n-    /// # }\n+    /// fn main() -> io::Result<()> {\n+    ///     let meta = fs::metadata(\"unix.socket\")?;\n+    ///     let file_type = meta.file_type();\n+    ///     assert!(file_type.is_socket());\n+    ///     Ok(())\n+    /// }\n     /// ```\n     #[stable(feature = \"file_type_ext\", since = \"1.5.0\")]\n     fn is_socket(&self) -> bool;\n@@ -687,13 +687,13 @@ impl DirEntryExt for fs::DirEntry {\n ///\n /// # Examples\n ///\n-/// ```\n+/// ```no_run\n /// use std::os::unix::fs;\n ///\n-/// # fn foo() -> std::io::Result<()> {\n-/// fs::symlink(\"a.txt\", \"b.txt\")?;\n-/// # Ok(())\n-/// # }\n+/// fn main() -> std::io::Result<()> {\n+///     fs::symlink(\"a.txt\", \"b.txt\")?;\n+///     Ok(())\n+/// }\n /// ```\n #[stable(feature = \"symlink\", since = \"1.1.0\")]\n pub fn symlink<P: AsRef<Path>, Q: AsRef<Path>>(src: P, dst: Q) -> io::Result<()>"}, {"sha": "e5cd51b6550b161a78902784aac8dc043debc39d", "filename": "src/libstd/sys/windows/ext/fs.rs", "status": "modified", "additions": 49, "deletions": 49, "changes": 98, "blob_url": "https://github.com/rust-lang/rust/blob/e9dcec070d6097e5a22b6658844dccd9d1f578cf/src%2Flibstd%2Fsys%2Fwindows%2Fext%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9dcec070d6097e5a22b6658844dccd9d1f578cf/src%2Flibstd%2Fsys%2Fwindows%2Fext%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fext%2Ffs.rs?ref=e9dcec070d6097e5a22b6658844dccd9d1f578cf", "patch": "@@ -45,15 +45,15 @@ pub trait FileExt {\n     /// use std::fs::File;\n     /// use std::os::windows::prelude::*;\n     ///\n-    /// # fn foo() -> io::Result<()> {\n-    /// let mut file = File::open(\"foo.txt\")?;\n-    /// let mut buffer = [0; 10];\n-    ///\n-    /// // Read 10 bytes, starting 72 bytes from the\n-    /// // start of the file.\n-    /// file.seek_read(&mut buffer[..], 72)?;\n-    /// # Ok(())\n-    /// # }\n+    /// fn main() -> io::Result<()> {\n+    ///     let mut file = File::open(\"foo.txt\")?;\n+    ///     let mut buffer = [0; 10];\n+    ///\n+    ///     // Read 10 bytes, starting 72 bytes from the\n+    ///     // start of the file.\n+    ///     file.seek_read(&mut buffer[..], 72)?;\n+    ///     Ok(())\n+    /// }\n     /// ```\n     #[stable(feature = \"file_offset\", since = \"1.15.0\")]\n     fn seek_read(&self, buf: &mut [u8], offset: u64) -> io::Result<usize>;\n@@ -79,14 +79,14 @@ pub trait FileExt {\n     /// use std::fs::File;\n     /// use std::os::windows::prelude::*;\n     ///\n-    /// # fn foo() -> std::io::Result<()> {\n-    /// let mut buffer = File::create(\"foo.txt\")?;\n+    /// fn main() -> std::io::Result<()> {\n+    ///     let mut buffer = File::create(\"foo.txt\")?;\n     ///\n-    /// // Write a byte string starting 72 bytes from\n-    /// // the start of the file.\n-    /// buffer.seek_write(b\"some bytes\", 72)?;\n-    /// # Ok(())\n-    /// # }\n+    ///     // Write a byte string starting 72 bytes from\n+    ///     // the start of the file.\n+    ///     buffer.seek_write(b\"some bytes\", 72)?;\n+    ///     Ok(())\n+    /// }\n     /// ```\n     #[stable(feature = \"file_offset\", since = \"1.15.0\")]\n     fn seek_write(&self, buf: &[u8], offset: u64) -> io::Result<usize>;\n@@ -305,11 +305,11 @@ pub trait MetadataExt {\n     /// use std::fs;\n     /// use std::os::windows::prelude::*;\n     ///\n-    /// # fn foo() -> io::Result<()> {\n-    /// let metadata = fs::metadata(\"foo.txt\")?;\n-    /// let attributes = metadata.file_attributes();\n-    /// # Ok(())\n-    /// # }\n+    /// fn main() -> io::Result<()> {\n+    ///     let metadata = fs::metadata(\"foo.txt\")?;\n+    ///     let attributes = metadata.file_attributes();\n+    ///     Ok(())\n+    /// }\n     /// ```\n     ///\n     /// [File Attribute Constants]:\n@@ -335,11 +335,11 @@ pub trait MetadataExt {\n     /// use std::fs;\n     /// use std::os::windows::prelude::*;\n     ///\n-    /// # fn foo() -> io::Result<()> {\n-    /// let metadata = fs::metadata(\"foo.txt\")?;\n-    /// let creation_time = metadata.creation_time();\n-    /// # Ok(())\n-    /// # }\n+    /// fn main() -> io::Result<()> {\n+    ///     let metadata = fs::metadata(\"foo.txt\")?;\n+    ///     let creation_time = metadata.creation_time();\n+    ///     Ok(())\n+    /// }\n     /// ```\n     ///\n     /// [`FILETIME`]: https://msdn.microsoft.com/en-us/library/windows/desktop/ms724284.aspx\n@@ -370,11 +370,11 @@ pub trait MetadataExt {\n     /// use std::fs;\n     /// use std::os::windows::prelude::*;\n     ///\n-    /// # fn foo() -> io::Result<()> {\n-    /// let metadata = fs::metadata(\"foo.txt\")?;\n-    /// let last_access_time = metadata.last_access_time();\n-    /// # Ok(())\n-    /// # }\n+    /// fn main() -> io::Result<()> {\n+    ///     let metadata = fs::metadata(\"foo.txt\")?;\n+    ///     let last_access_time = metadata.last_access_time();\n+    ///     Ok(())\n+    /// }\n     /// ```\n     ///\n     /// [`FILETIME`]: https://msdn.microsoft.com/en-us/library/windows/desktop/ms724284.aspx\n@@ -403,11 +403,11 @@ pub trait MetadataExt {\n     /// use std::fs;\n     /// use std::os::windows::prelude::*;\n     ///\n-    /// # fn foo() -> io::Result<()> {\n-    /// let metadata = fs::metadata(\"foo.txt\")?;\n-    /// let last_write_time = metadata.last_write_time();\n-    /// # Ok(())\n-    /// # }\n+    /// fn main() -> io::Result<()> {\n+    ///     let metadata = fs::metadata(\"foo.txt\")?;\n+    ///     let last_write_time = metadata.last_write_time();\n+    ///     Ok(())\n+    /// }\n     /// ```\n     ///\n     /// [`FILETIME`]: https://msdn.microsoft.com/en-us/library/windows/desktop/ms724284.aspx\n@@ -426,11 +426,11 @@ pub trait MetadataExt {\n     /// use std::fs;\n     /// use std::os::windows::prelude::*;\n     ///\n-    /// # fn foo() -> io::Result<()> {\n-    /// let metadata = fs::metadata(\"foo.txt\")?;\n-    /// let file_size = metadata.file_size();\n-    /// # Ok(())\n-    /// # }\n+    /// fn main() -> io::Result<()> {\n+    ///     let metadata = fs::metadata(\"foo.txt\")?;\n+    ///     let file_size = metadata.file_size();\n+    ///     Ok(())\n+    /// }\n     /// ```\n     #[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n     fn file_size(&self) -> u64;\n@@ -473,10 +473,10 @@ impl FileTypeExt for fs::FileType {\n /// ```no_run\n /// use std::os::windows::fs;\n ///\n-/// # fn foo() -> std::io::Result<()> {\n-/// fs::symlink_file(\"a.txt\", \"b.txt\")?;\n-/// # Ok(())\n-/// # }\n+/// fn main() -> std::io::Result<()> {\n+///     fs::symlink_file(\"a.txt\", \"b.txt\")?;\n+///     Ok(())\n+/// }\n /// ```\n #[stable(feature = \"symlink\", since = \"1.1.0\")]\n pub fn symlink_file<P: AsRef<Path>, Q: AsRef<Path>>(src: P, dst: Q)\n@@ -494,10 +494,10 @@ pub fn symlink_file<P: AsRef<Path>, Q: AsRef<Path>>(src: P, dst: Q)\n /// ```no_run\n /// use std::os::windows::fs;\n ///\n-/// # fn foo() -> std::io::Result<()> {\n-/// fs::symlink_dir(\"a\", \"b\")?;\n-/// # Ok(())\n-/// # }\n+/// fn main() -> std::io::Result<()> {\n+///     fs::symlink_dir(\"a\", \"b\")?;\n+///     Ok(())\n+/// }\n /// ```\n #[stable(feature = \"symlink\", since = \"1.1.0\")]\n pub fn symlink_dir<P: AsRef<Path>, Q: AsRef<Path>>(src: P, dst: Q)"}]}