{"sha": "de6bc12868569e32beecfe6ded4142aaf6a7434f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRlNmJjMTI4Njg1NjllMzJiZWVjZmU2ZGVkNDE0MmFhZjZhNzQzNGY=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-06-07T14:48:03Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-06-07T14:48:03Z"}, "message": "Rollup merge of #61532 - wesleywiser:const_prop_more, r=oli-obk\n\n[const-prop] Support Rvalue::{Ref,Len} and Deref\n\nAlso fixes an ICE I found in testing.\n\nr? @oli-obk\n\n~~The final commit is just for a perf run. I'll remove it after that is completed.~~", "tree": {"sha": "c7cf97847b3ef628bfd0804ced08683070e4128a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c7cf97847b3ef628bfd0804ced08683070e4128a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/de6bc12868569e32beecfe6ded4142aaf6a7434f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJc+nkjCRBK7hj4Ov3rIwAAdHIIAHcWOWtqpxThn+JMzFqc7odX\nkm0F434R8IDEo12H+m0qEmWDDveGcZ8lJnS3lPxNXXfjzy7K5ER/zCL+k300oRMl\nnFGmnsD92nmlJ6R8gu+6dRJPEJ0GQeXXAV8WArOp13IuK4fSLZui9eJlxLGNC7IT\ndDf/dh+rh1MYmN6zij+2mv+uIbZXYCiQLdYOL+Re5rpVlPdHVbsy212NCjDj2+mN\nM9MtlhBo09nMD8TJ919CQyVnHskX4WJqj894We9c1rrNAEiXYiLB/5fX7+nIa+hE\nnTmt72asycelRm6u1SXJA0OBn1pCh1K5oIOFcRyF9aKhomQRJriBtPOG2ohLAIs=\n=1xsT\n-----END PGP SIGNATURE-----\n", "payload": "tree c7cf97847b3ef628bfd0804ced08683070e4128a\nparent 9ab654c53e17c5d7a2efe25cf859472fd5b9e03c\nparent 459e37b304f62659b59215eed57da991873b3445\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1559918883 +0200\ncommitter GitHub <noreply@github.com> 1559918883 +0200\n\nRollup merge of #61532 - wesleywiser:const_prop_more, r=oli-obk\n\n[const-prop] Support Rvalue::{Ref,Len} and Deref\n\nAlso fixes an ICE I found in testing.\n\nr? @oli-obk\n\n~~The final commit is just for a perf run. I'll remove it after that is completed.~~\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/de6bc12868569e32beecfe6ded4142aaf6a7434f", "html_url": "https://github.com/rust-lang/rust/commit/de6bc12868569e32beecfe6ded4142aaf6a7434f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/de6bc12868569e32beecfe6ded4142aaf6a7434f/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9ab654c53e17c5d7a2efe25cf859472fd5b9e03c", "url": "https://api.github.com/repos/rust-lang/rust/commits/9ab654c53e17c5d7a2efe25cf859472fd5b9e03c", "html_url": "https://github.com/rust-lang/rust/commit/9ab654c53e17c5d7a2efe25cf859472fd5b9e03c"}, {"sha": "459e37b304f62659b59215eed57da991873b3445", "url": "https://api.github.com/repos/rust-lang/rust/commits/459e37b304f62659b59215eed57da991873b3445", "html_url": "https://github.com/rust-lang/rust/commit/459e37b304f62659b59215eed57da991873b3445"}], "stats": {"total": 166, "additions": 136, "deletions": 30}, "files": [{"sha": "a3297666113d4aabd4245b130e63f63c452a4f80", "filename": "src/librustc_mir/interpret/place.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/de6bc12868569e32beecfe6ded4142aaf6a7434f/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de6bc12868569e32beecfe6ded4142aaf6a7434f/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fplace.rs?ref=de6bc12868569e32beecfe6ded4142aaf6a7434f", "patch": "@@ -663,6 +663,23 @@ where\n         Ok(())\n     }\n \n+    /// Write an `Immediate` to memory.\n+    #[inline(always)]\n+    pub fn write_immediate_to_mplace(\n+        &mut self,\n+        src: Immediate<M::PointerTag>,\n+        dest: MPlaceTy<'tcx, M::PointerTag>,\n+    ) -> EvalResult<'tcx> {\n+        self.write_immediate_to_mplace_no_validate(src, dest)?;\n+\n+        if M::enforce_validity(self) {\n+            // Data got changed, better make sure it matches the type!\n+            self.validate_operand(dest.into(), vec![], None, /*const_mode*/ false)?;\n+        }\n+\n+        Ok(())\n+    }\n+\n     /// Write an immediate to a place.\n     /// If you use this you are responsible for validating that things got copied at the\n     /// right type."}, {"sha": "0d389b31f907536878eea4f3cfe09c393871ce4a", "filename": "src/librustc_mir/transform/const_prop.rs", "status": "modified", "additions": 39, "deletions": 12, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/de6bc12868569e32beecfe6ded4142aaf6a7434f/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de6bc12868569e32beecfe6ded4142aaf6a7434f/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs?ref=de6bc12868569e32beecfe6ded4142aaf6a7434f", "patch": "@@ -17,8 +17,7 @@ use syntax_pos::{Span, DUMMY_SP};\n use rustc::ty::subst::InternalSubsts;\n use rustc_data_structures::indexed_vec::IndexVec;\n use rustc::ty::layout::{\n-    LayoutOf, TyLayout, LayoutError,\n-    HasTyCtxt, TargetDataLayout, HasDataLayout,\n+    LayoutOf, TyLayout, LayoutError, HasTyCtxt, TargetDataLayout, HasDataLayout, Size,\n };\n \n use crate::interpret::{\n@@ -333,6 +332,12 @@ impl<'a, 'mir, 'tcx> ConstPropagator<'a, 'mir, 'tcx> {\n                             this.ecx.operand_field(eval, field.index() as u64)\n                         })?;\n                     },\n+                    ProjectionElem::Deref => {\n+                        trace!(\"processing deref\");\n+                        eval = self.use_ecx(source_info, |this| {\n+                            this.ecx.deref_operand(eval)\n+                        })?.into();\n+                    }\n                     // We could get more projections by using e.g., `operand_projection`,\n                     // but we do not even have the stack frame set up properly so\n                     // an `Index` projection would throw us off-track.\n@@ -363,8 +368,12 @@ impl<'a, 'mir, 'tcx> ConstPropagator<'a, 'mir, 'tcx> {\n             Rvalue::Use(ref op) => {\n                 self.eval_operand(op, source_info)\n             },\n+            Rvalue::Ref(_, _, ref place) => {\n+                let src = self.eval_place(place, source_info)?;\n+                let mplace = src.try_as_mplace().ok()?;\n+                Some(ImmTy::from_scalar(mplace.ptr.into(), place_layout).into())\n+            },\n             Rvalue::Repeat(..) |\n-            Rvalue::Ref(..) |\n             Rvalue::Aggregate(..) |\n             Rvalue::NullaryOp(NullOp::Box, _) |\n             Rvalue::Discriminant(..) => None,\n@@ -376,10 +385,30 @@ impl<'a, 'mir, 'tcx> ConstPropagator<'a, 'mir, 'tcx> {\n                     this.ecx.cast(op, kind, dest.into())?;\n                     Ok(dest.into())\n                 })\n-            }\n+            },\n+            Rvalue::Len(ref place) => {\n+                let place = self.eval_place(&place, source_info)?;\n+                let mplace = place.try_as_mplace().ok()?;\n+\n+                if let ty::Slice(_) = mplace.layout.ty.sty {\n+                    let len = mplace.meta.unwrap().to_usize(&self.ecx).unwrap();\n \n-            // FIXME(oli-obk): evaluate static/constant slice lengths\n-            Rvalue::Len(_) => None,\n+                    Some(ImmTy {\n+                        imm: Immediate::Scalar(\n+                            Scalar::from_uint(\n+                                len,\n+                                Size::from_bits(\n+                                    self.tcx.sess.target.usize_ty.bit_width().unwrap() as u64\n+                                )\n+                            ).into(),\n+                        ),\n+                        layout: self.tcx.layout_of(self.param_env.and(self.tcx.types.usize)).ok()?,\n+                    }.into())\n+                } else {\n+                    trace!(\"not slice: {:?}\", mplace.layout.ty.sty);\n+                    None\n+                }\n+            },\n             Rvalue::NullaryOp(NullOp::SizeOf, ty) => {\n                 type_size_of(self.tcx, self.param_env, ty).and_then(|n| Some(\n                     ImmTy {\n@@ -525,12 +554,10 @@ impl<'a, 'mir, 'tcx> ConstPropagator<'a, 'mir, 'tcx> {\n         source_info: SourceInfo,\n     ) {\n         trace!(\"attepting to replace {:?} with {:?}\", rval, value);\n-        self.ecx.validate_operand(\n-            value,\n-            vec![],\n-            None,\n-            true,\n-        ).expect(\"value should already be a valid const\");\n+        if let Err(e) = self.ecx.validate_operand(value, vec![], None, true) {\n+            trace!(\"validation error, attempt failed: {:?}\", e);\n+            return;\n+        }\n \n         // FIXME> figure out what tho do when try_read_immediate fails\n         let imm = self.use_ecx(source_info, |this| {"}, {"sha": "2d04822c0e7898a453652aa21e8204bad75ee464", "filename": "src/test/mir-opt/const_prop/ref_deref.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/de6bc12868569e32beecfe6ded4142aaf6a7434f/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fref_deref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de6bc12868569e32beecfe6ded4142aaf6a7434f/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fref_deref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fref_deref.rs?ref=de6bc12868569e32beecfe6ded4142aaf6a7434f", "patch": "@@ -0,0 +1,21 @@\n+fn main() {\n+    *(&4);\n+}\n+\n+// END RUST SOURCE\n+// START rustc.main.ConstProp.before.mir\n+// bb0: {\n+//     ...\n+//     _2 = &(promoted[0]: i32);\n+//     _1 = (*_2);\n+//     ...\n+//}\n+// END rustc.main.ConstProp.before.mir\n+// START rustc.main.ConstProp.after.mir\n+// bb0: {\n+//     ...\n+//     _2 = const Scalar(AllocId(0).0x0) : &i32;\n+//     _1 = const 4i32;\n+//     ...\n+// }\n+// END rustc.main.ConstProp.after.mir"}, {"sha": "809eb19ade899194aedce53275369e2a770715ec", "filename": "src/test/mir-opt/const_prop/reify_fn_ptr.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/de6bc12868569e32beecfe6ded4142aaf6a7434f/src%2Ftest%2Fmir-opt%2Fconst_prop%2Freify_fn_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de6bc12868569e32beecfe6ded4142aaf6a7434f/src%2Ftest%2Fmir-opt%2Fconst_prop%2Freify_fn_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Freify_fn_ptr.rs?ref=de6bc12868569e32beecfe6ded4142aaf6a7434f", "patch": "@@ -0,0 +1,25 @@\n+fn main() {\n+    let _ = main as usize as *const fn();\n+}\n+\n+// END RUST SOURCE\n+// START rustc.main.ConstProp.before.mir\n+//  bb0: {\n+//      ...\n+//      _3 = const main as fn() (Pointer(ReifyFnPointer));\n+//      _2 = move _3 as usize (Misc);\n+//      ...\n+//      _1 = move _2 as *const fn() (Misc);\n+//      ...\n+//  }\n+// END rustc.main.ConstProp.before.mir\n+// START rustc.main.ConstProp.after.mir\n+//  bb0: {\n+//      ...\n+//      _3 = const Scalar(AllocId(1).0x0) : fn();\n+//      _2 = move _3 as usize (Misc);\n+//      ...\n+//      _1 = const Scalar(AllocId(1).0x0) : *const fn();\n+//      ...\n+//  }\n+// END rustc.main.ConstProp.after.mir"}, {"sha": "5babeb195a826f0fbf7e2b5ebfb36a4a58d77d60", "filename": "src/test/mir-opt/const_prop/slice_len.rs", "status": "modified", "additions": 22, "deletions": 18, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/de6bc12868569e32beecfe6ded4142aaf6a7434f/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fslice_len.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de6bc12868569e32beecfe6ded4142aaf6a7434f/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fslice_len.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fslice_len.rs?ref=de6bc12868569e32beecfe6ded4142aaf6a7434f", "patch": "@@ -1,36 +1,40 @@\n-fn test() -> &'static [u32] {\n-    &[1, 2]\n-}\n-\n fn main() {\n-    let x = test()[0];\n+    (&[1u32, 2, 3] as &[u32])[1];\n }\n \n // END RUST SOURCE\n // START rustc.main.ConstProp.before.mir\n-//  bb1: {\n+//  bb0: {\n //      ...\n-//      _3 = const 0usize;\n-//      _4 = Len((*_2));\n-//      _5 = Lt(_3, _4);\n-//      assert(move _5, \"index out of bounds: the len is move _4 but the index is _3\") -> bb2;\n+//      _4 = &(promoted[0]: [u32; 3]);\n+//      _3 = _4;\n+//      _2 = move _3 as &[u32] (Pointer(Unsize));\n+//      ...\n+//      _6 = const 1usize;\n+//      _7 = Len((*_2));\n+//      _8 = Lt(_6, _7);\n+//      assert(move _8, \"index out of bounds: the len is move _7 but the index is _6\") -> bb1;\n //  }\n-//  bb2: {\n-//      _1 = (*_2)[_3];\n+//  bb1: {\n+//      _1 = (*_2)[_6];\n //      ...\n //      return;\n //  }\n // END rustc.main.ConstProp.before.mir\n // START rustc.main.ConstProp.after.mir\n //  bb0: {\n //      ...\n-//      _3 = const 0usize;\n-//      _4 = Len((*_2));\n-//      _5 = Lt(_3, _4);\n-//      assert(move _5, \"index out of bounds: the len is move _4 but the index is _3\") -> bb2;\n+//      _4 = const Scalar(AllocId(0).0x0) : &[u32; 3];\n+//      _3 = const Scalar(AllocId(0).0x0) : &[u32; 3];\n+//      _2 = move _3 as &[u32] (Pointer(Unsize));\n+//      ...\n+//      _6 = const 1usize;\n+//      _7 = const 3usize;\n+//      _8 = const true;\n+//      assert(const true, \"index out of bounds: the len is move _7 but the index is _6\") -> bb1;\n //  }\n-//  bb2: {\n-//      _1 = (*_2)[_3];\n+//  bb1: {\n+//      _1 = (*_2)[_6];\n //      ...\n //      return;\n //  }"}, {"sha": "c9f3a7659f9cd216615164ca711aef5c1a8c83bc", "filename": "src/test/ui/consts/const-eval/promoted_errors.stderr", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/de6bc12868569e32beecfe6ded4142aaf6a7434f/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/de6bc12868569e32beecfe6ded4142aaf6a7434f/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.stderr?ref=de6bc12868569e32beecfe6ded4142aaf6a7434f", "patch": "@@ -16,6 +16,12 @@ warning: attempt to divide by zero\n LL |     println!(\"{}\", 1/(1-1));\n    |                    ^^^^^^^\n \n+warning: this expression will panic at runtime\n+  --> $DIR/promoted_errors.rs:9:20\n+   |\n+LL |     println!(\"{}\", 1/(1-1));\n+   |                    ^^^^^^^ attempt to divide by zero\n+\n warning: attempt to divide by zero\n   --> $DIR/promoted_errors.rs:11:14\n    |\n@@ -34,6 +40,12 @@ warning: attempt to divide by zero\n LL |     println!(\"{}\", 1/(false as u32));\n    |                    ^^^^^^^^^^^^^^^^\n \n+warning: this expression will panic at runtime\n+  --> $DIR/promoted_errors.rs:14:20\n+   |\n+LL |     println!(\"{}\", 1/(false as u32));\n+   |                    ^^^^^^^^^^^^^^^^ attempt to divide by zero\n+\n warning: attempt to divide by zero\n   --> $DIR/promoted_errors.rs:16:14\n    |"}]}