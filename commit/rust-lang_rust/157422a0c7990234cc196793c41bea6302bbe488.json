{"sha": "157422a0c7990234cc196793c41bea6302bbe488", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE1NzQyMmEwYzc5OTAyMzRjYzE5Njc5M2M0MWJlYTYzMDJiYmU0ODg=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-08-11T18:20:27Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-08-12T21:58:58Z"}, "message": "Update test error messages based on changes to wfcheck; also, break\napart the tests that tested many things at once.", "tree": {"sha": "7575ddfb11bb2ed2aa48abb06de1659971654e52", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7575ddfb11bb2ed2aa48abb06de1659971654e52"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/157422a0c7990234cc196793c41bea6302bbe488", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/157422a0c7990234cc196793c41bea6302bbe488", "html_url": "https://github.com/rust-lang/rust/commit/157422a0c7990234cc196793c41bea6302bbe488", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/157422a0c7990234cc196793c41bea6302bbe488/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2b2a11363819176a37e70b996405ce226f533c7b", "url": "https://api.github.com/repos/rust-lang/rust/commits/2b2a11363819176a37e70b996405ce226f533c7b", "html_url": "https://github.com/rust-lang/rust/commit/2b2a11363819176a37e70b996405ce226f533c7b"}], "stats": {"total": 321, "additions": 231, "deletions": 90}, "files": [{"sha": "dd7e8a869eca9c3c9d0119f70a03cf281aed76e4", "filename": "src/test/compile-fail/issue-16747.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/157422a0c7990234cc196793c41bea6302bbe488/src%2Ftest%2Fcompile-fail%2Fissue-16747.rs", "raw_url": "https://github.com/rust-lang/rust/raw/157422a0c7990234cc196793c41bea6302bbe488/src%2Ftest%2Fcompile-fail%2Fissue-16747.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-16747.rs?ref=157422a0c7990234cc196793c41bea6302bbe488", "patch": "@@ -15,10 +15,10 @@ trait ListItem<'a> {\n trait Collection { fn len(&self) -> usize; }\n \n struct List<'a, T: ListItem<'a>> {\n+    slice: &'a [T]\n //~^ ERROR the parameter type `T` may not live long enough\n //~| HELP consider adding an explicit lifetime bound\n //~| NOTE ...so that the reference type `&'a [T]` does not outlive the data it points at\n-    slice: &'a [T]\n }\n impl<'a, T: ListItem<'a>> Collection for List<'a, T> {\n     fn len(&self) -> usize {"}, {"sha": "aae77c90b6bf2980e9820ae9fe0d9e363d3c59c1", "filename": "src/test/compile-fail/issue-19380.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/157422a0c7990234cc196793c41bea6302bbe488/src%2Ftest%2Fcompile-fail%2Fissue-19380.rs", "raw_url": "https://github.com/rust-lang/rust/raw/157422a0c7990234cc196793c41bea6302bbe488/src%2Ftest%2Fcompile-fail%2Fissue-19380.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-19380.rs?ref=157422a0c7990234cc196793c41bea6302bbe488", "patch": "@@ -18,11 +18,11 @@ impl Qiz for Foo {\n }\n \n struct Bar {\n-//~^ ERROR E0038\n   foos: &'static [&'static (Qiz + 'static)]\n }\n \n const FOO : Foo = Foo;\n const BAR : Bar = Bar { foos: &[&FOO]};\n+//~^ ERROR E0038\n \n fn main() { }"}, {"sha": "de419a259a24cf4fc0efb6d21eb37bdc2af8c746", "filename": "src/test/compile-fail/object-safety-issue-22040.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/157422a0c7990234cc196793c41bea6302bbe488/src%2Ftest%2Fcompile-fail%2Fobject-safety-issue-22040.rs", "raw_url": "https://github.com/rust-lang/rust/raw/157422a0c7990234cc196793c41bea6302bbe488/src%2Ftest%2Fcompile-fail%2Fobject-safety-issue-22040.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fobject-safety-issue-22040.rs?ref=157422a0c7990234cc196793c41bea6302bbe488", "patch": "@@ -18,13 +18,14 @@ trait Expr: Debug + PartialEq {\n \n //#[derive(PartialEq)]\n #[derive(Debug)]\n-struct SExpr<'x> { //~ ERROR E0038\n+struct SExpr<'x> {\n     elements: Vec<Box<Expr+ 'x>>,\n }\n \n impl<'x> PartialEq for SExpr<'x> {\n     fn eq(&self, other:&SExpr<'x>) -> bool {\n         println!(\"L1: {} L2: {}\", self.elements.len(), other.elements.len());\n+        //~^ ERROR E0038\n         let result = self.elements.len() == other.elements.len();\n \n         println!(\"Got compare {}\", result);\n@@ -43,8 +44,8 @@ impl <'x> Expr for SExpr<'x> {\n }\n \n fn main() {\n-    let a: Box<Expr> = Box::new(SExpr::new());\n-    let b: Box<Expr> = Box::new(SExpr::new());\n+    let a: Box<Expr> = Box::new(SExpr::new()); //~ ERROR E0038\n+    let b: Box<Expr> = Box::new(SExpr::new()); //~ ERROR E0038\n \n-    assert_eq!(a , b);\n+    // assert_eq!(a , b);\n }"}, {"sha": "e21f92bc9b885947d84bc603015edeb5c1175413", "filename": "src/test/compile-fail/regions-enum-not-wf.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/157422a0c7990234cc196793c41bea6302bbe488/src%2Ftest%2Fcompile-fail%2Fregions-enum-not-wf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/157422a0c7990234cc196793c41bea6302bbe488/src%2Ftest%2Fcompile-fail%2Fregions-enum-not-wf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-enum-not-wf.rs?ref=157422a0c7990234cc196793c41bea6302bbe488", "patch": "@@ -12,27 +12,27 @@\n \n #![allow(dead_code)]\n \n-enum Ref1<'a, T> { //~ ERROR the parameter type `T` may not live long enough\n-    Ref1Variant1(&'a T)\n+enum Ref1<'a, T> {\n+    Ref1Variant1(&'a T) //~ ERROR the parameter type `T` may not live long enough\n }\n \n-enum Ref2<'a, T> { //~ ERROR the parameter type `T` may not live long enough\n+enum Ref2<'a, T> {\n     Ref2Variant1,\n-    Ref2Variant2(isize, &'a T),\n+    Ref2Variant2(isize, &'a T), //~ ERROR the parameter type `T` may not live long enough\n }\n \n enum RefOk<'a, T:'a> {\n     RefOkVariant1(&'a T)\n }\n \n enum RefIndirect<'a, T> {\n-        //~^ ERROR the parameter type `T` may not live long enough\n     RefIndirectVariant1(isize, RefOk<'a,T>)\n+        //~^ ERROR the parameter type `T` may not live long enough\n }\n \n enum RefDouble<'a, 'b, T> {\n-        //~^ ERROR reference has a longer lifetime than the data\n     RefDoubleVariant1(&'a &'b T)\n+        //~^ ERROR reference has a longer lifetime than the data\n }\n \n fn main() { }"}, {"sha": "db25a0698fed4333e21c74f76b87a1407d06d431", "filename": "src/test/compile-fail/regions-outlives-nominal-type-enum-region-rev.rs", "status": "renamed", "additions": 2, "deletions": 29, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/157422a0c7990234cc196793c41bea6302bbe488/src%2Ftest%2Fcompile-fail%2Fregions-outlives-nominal-type-enum-region-rev.rs", "raw_url": "https://github.com/rust-lang/rust/raw/157422a0c7990234cc196793c41bea6302bbe488/src%2Ftest%2Fcompile-fail%2Fregions-outlives-nominal-type-enum-region-rev.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-outlives-nominal-type-enum-region-rev.rs?ref=157422a0c7990234cc196793c41bea6302bbe488", "patch": "@@ -16,39 +16,12 @@\n #![feature(rustc_attrs)]\n #![allow(dead_code)]\n \n-mod variant_struct_region {\n-    struct Foo<'a> {\n-        x: &'a i32,\n-    }\n-    struct Bar<'a,'b> { //~ ERROR reference has a longer lifetime\n-        f: &'a Foo<'b>\n-    }\n-}\n-\n mod rev_variant_struct_region {\n     struct Foo<'a> {\n         x: fn(&'a i32),\n     }\n-    struct Bar<'a,'b> { //~ ERROR reference has a longer lifetime\n-        f: &'a Foo<'b>\n-    }\n-}\n-\n-mod variant_struct_type {\n-    struct Foo<T> {\n-        x: T\n-    }\n-    struct Bar<'a,'b> { //~ ERROR reference has a longer lifetime\n-        f: &'a Foo<&'b i32>\n-    }\n-}\n-\n-mod rev_variant_struct_type {\n-    struct Foo<T> {\n-        x: fn(T)\n-    }\n-    struct Bar<'a,'b> { //~ ERROR reference has a longer lifetime\n-        f: &'a Foo<&'b i32>\n+    enum Bar<'a,'b> {\n+        V(&'a Foo<'b>) //~ ERROR reference has a longer lifetime\n     }\n }\n ", "previous_filename": "src/test/compile-fail/regions-outlives-nominal-type-struct.rs"}, {"sha": "403757042d2f3521783564870700ef2323abd7a9", "filename": "src/test/compile-fail/regions-outlives-nominal-type-enum-region.rs", "status": "renamed", "additions": 5, "deletions": 32, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/157422a0c7990234cc196793c41bea6302bbe488/src%2Ftest%2Fcompile-fail%2Fregions-outlives-nominal-type-enum-region.rs", "raw_url": "https://github.com/rust-lang/rust/raw/157422a0c7990234cc196793c41bea6302bbe488/src%2Ftest%2Fcompile-fail%2Fregions-outlives-nominal-type-enum-region.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-outlives-nominal-type-enum-region.rs?ref=157422a0c7990234cc196793c41bea6302bbe488", "patch": "@@ -16,39 +16,12 @@\n #![feature(rustc_attrs)]\n #![allow(dead_code)]\n \n-mod variant_enum_region {\n-    enum Foo<'a> {\n-        V { x: &'a i32 }\n+mod variant_struct_region {\n+    struct Foo<'a> {\n+        x: &'a i32,\n     }\n-    struct Bar<'a,'b> { //~ ERROR reference has a longer lifetime\n-        f: &'a Foo<'b>\n-    }\n-}\n-\n-mod rev_variant_enum_region {\n-    enum Foo<'a> {\n-        V { x: fn(&'a i32) }\n-    }\n-    struct Bar<'a,'b> { //~ ERROR reference has a longer lifetime\n-        f: &'a Foo<'b>\n-    }\n-}\n-\n-mod variant_enum_type {\n-    enum Foo<T> {\n-        V { x: T }\n-    }\n-    struct Bar<'a,'b> { //~ ERROR reference has a longer lifetime\n-        f: &'a Foo<&'b i32>\n-    }\n-}\n-\n-mod rev_variant_enum_type {\n-    enum Foo<T> {\n-        V { x: fn(T) }\n-    }\n-    struct Bar<'a,'b> { //~ ERROR reference has a longer lifetime\n-        f: &'a Foo<&'b i32>\n+    enum Bar<'a,'b> {\n+        V(&'a Foo<'b>) //~ ERROR reference has a longer lifetime\n     }\n }\n ", "previous_filename": "src/test/compile-fail/regions-outlives-nominal-type-enum.rs"}, {"sha": "cc294651db773cc91b5c44abfe268f89526f2a73", "filename": "src/test/compile-fail/regions-outlives-nominal-type-enum-type-rev.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/157422a0c7990234cc196793c41bea6302bbe488/src%2Ftest%2Fcompile-fail%2Fregions-outlives-nominal-type-enum-type-rev.rs", "raw_url": "https://github.com/rust-lang/rust/raw/157422a0c7990234cc196793c41bea6302bbe488/src%2Ftest%2Fcompile-fail%2Fregions-outlives-nominal-type-enum-type-rev.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-outlives-nominal-type-enum-type-rev.rs?ref=157422a0c7990234cc196793c41bea6302bbe488", "patch": "@@ -0,0 +1,29 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test that a nominal type (like `Foo<'a>`) outlives `'b` if its\n+// arguments (like `'a`) outlive `'b`.\n+//\n+// Rule OutlivesNominalType from RFC 1214.\n+\n+#![feature(rustc_attrs)]\n+#![allow(dead_code)]\n+\n+mod rev_variant_struct_type {\n+    struct Foo<T> {\n+        x: fn(T)\n+    }\n+    enum Bar<'a,'b> {\n+        V(&'a Foo<&'b i32>) //~ ERROR reference has a longer lifetime\n+    }\n+}\n+\n+#[rustc_error]\n+fn main() { }"}, {"sha": "e269767cc1683a817feb16692387077aa5fcf532", "filename": "src/test/compile-fail/regions-outlives-nominal-type-enum-type.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/157422a0c7990234cc196793c41bea6302bbe488/src%2Ftest%2Fcompile-fail%2Fregions-outlives-nominal-type-enum-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/157422a0c7990234cc196793c41bea6302bbe488/src%2Ftest%2Fcompile-fail%2Fregions-outlives-nominal-type-enum-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-outlives-nominal-type-enum-type.rs?ref=157422a0c7990234cc196793c41bea6302bbe488", "patch": "@@ -0,0 +1,29 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test that a nominal type (like `Foo<'a>`) outlives `'b` if its\n+// arguments (like `'a`) outlive `'b`.\n+//\n+// Rule OutlivesNominalType from RFC 1214.\n+\n+#![feature(rustc_attrs)]\n+#![allow(dead_code)]\n+\n+mod variant_struct_type {\n+    struct Foo<T> {\n+        x: T\n+    }\n+    enum Bar<'a,'b> {\n+        F(&'a Foo<&'b i32>) //~ ERROR reference has a longer lifetime\n+    }\n+}\n+\n+#[rustc_error]\n+fn main() { }"}, {"sha": "c7e6ace8b9224165050e505bbb6c603ebe2e02e4", "filename": "src/test/compile-fail/regions-outlives-nominal-type-struct-region-rev.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/157422a0c7990234cc196793c41bea6302bbe488/src%2Ftest%2Fcompile-fail%2Fregions-outlives-nominal-type-struct-region-rev.rs", "raw_url": "https://github.com/rust-lang/rust/raw/157422a0c7990234cc196793c41bea6302bbe488/src%2Ftest%2Fcompile-fail%2Fregions-outlives-nominal-type-struct-region-rev.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-outlives-nominal-type-struct-region-rev.rs?ref=157422a0c7990234cc196793c41bea6302bbe488", "patch": "@@ -0,0 +1,29 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test that a nominal type (like `Foo<'a>`) outlives `'b` if its\n+// arguments (like `'a`) outlive `'b`.\n+//\n+// Rule OutlivesNominalType from RFC 1214.\n+\n+#![feature(rustc_attrs)]\n+#![allow(dead_code)]\n+\n+mod rev_variant_struct_region {\n+    struct Foo<'a> {\n+        x: fn(&'a i32),\n+    }\n+    struct Bar<'a,'b> {\n+        f: &'a Foo<'b> //~ ERROR reference has a longer lifetime\n+    }\n+}\n+\n+#[rustc_error]\n+fn main() { }"}, {"sha": "2fe6444c33aecd1d060c68c22b280fd99f63f54e", "filename": "src/test/compile-fail/regions-outlives-nominal-type-struct-region.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/157422a0c7990234cc196793c41bea6302bbe488/src%2Ftest%2Fcompile-fail%2Fregions-outlives-nominal-type-struct-region.rs", "raw_url": "https://github.com/rust-lang/rust/raw/157422a0c7990234cc196793c41bea6302bbe488/src%2Ftest%2Fcompile-fail%2Fregions-outlives-nominal-type-struct-region.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-outlives-nominal-type-struct-region.rs?ref=157422a0c7990234cc196793c41bea6302bbe488", "patch": "@@ -0,0 +1,29 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test that a nominal type (like `Foo<'a>`) outlives `'b` if its\n+// arguments (like `'a`) outlive `'b`.\n+//\n+// Rule OutlivesNominalType from RFC 1214.\n+\n+#![feature(rustc_attrs)]\n+#![allow(dead_code)]\n+\n+mod variant_struct_region {\n+    struct Foo<'a> {\n+        x: &'a i32,\n+    }\n+    struct Bar<'a,'b> {\n+        f: &'a Foo<'b> //~ ERROR reference has a longer lifetime\n+    }\n+}\n+\n+#[rustc_error]\n+fn main() { }"}, {"sha": "c4b631bce98740d191b6ec3411c516075cd910b3", "filename": "src/test/compile-fail/regions-outlives-nominal-type-struct-type-rev.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/157422a0c7990234cc196793c41bea6302bbe488/src%2Ftest%2Fcompile-fail%2Fregions-outlives-nominal-type-struct-type-rev.rs", "raw_url": "https://github.com/rust-lang/rust/raw/157422a0c7990234cc196793c41bea6302bbe488/src%2Ftest%2Fcompile-fail%2Fregions-outlives-nominal-type-struct-type-rev.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-outlives-nominal-type-struct-type-rev.rs?ref=157422a0c7990234cc196793c41bea6302bbe488", "patch": "@@ -0,0 +1,29 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test that a nominal type (like `Foo<'a>`) outlives `'b` if its\n+// arguments (like `'a`) outlive `'b`.\n+//\n+// Rule OutlivesNominalType from RFC 1214.\n+\n+#![feature(rustc_attrs)]\n+#![allow(dead_code)]\n+\n+mod rev_variant_struct_type {\n+    struct Foo<T> {\n+        x: fn(T)\n+    }\n+    struct Bar<'a,'b> {\n+        f: &'a Foo<&'b i32> //~ ERROR reference has a longer lifetime\n+    }\n+}\n+\n+#[rustc_error]\n+fn main() { }"}, {"sha": "1c9489444a6a3a70bdc8a78ed0d6f3dfaba702ee", "filename": "src/test/compile-fail/regions-outlives-nominal-type-struct-type.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/157422a0c7990234cc196793c41bea6302bbe488/src%2Ftest%2Fcompile-fail%2Fregions-outlives-nominal-type-struct-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/157422a0c7990234cc196793c41bea6302bbe488/src%2Ftest%2Fcompile-fail%2Fregions-outlives-nominal-type-struct-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-outlives-nominal-type-struct-type.rs?ref=157422a0c7990234cc196793c41bea6302bbe488", "patch": "@@ -0,0 +1,29 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test that a nominal type (like `Foo<'a>`) outlives `'b` if its\n+// arguments (like `'a`) outlive `'b`.\n+//\n+// Rule OutlivesNominalType from RFC 1214.\n+\n+#![feature(rustc_attrs)]\n+#![allow(dead_code)]\n+\n+mod variant_struct_type {\n+    struct Foo<T> {\n+        x: T\n+    }\n+    struct Bar<'a,'b> {\n+        f: &'a Foo<&'b i32> //~ ERROR reference has a longer lifetime\n+    }\n+}\n+\n+#[rustc_error]\n+fn main() { }"}, {"sha": "a7f1828970324868631255e73dceb297df9575bb", "filename": "src/test/compile-fail/regions-struct-not-wf.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/157422a0c7990234cc196793c41bea6302bbe488/src%2Ftest%2Fcompile-fail%2Fregions-struct-not-wf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/157422a0c7990234cc196793c41bea6302bbe488/src%2Ftest%2Fcompile-fail%2Fregions-struct-not-wf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-struct-not-wf.rs?ref=157422a0c7990234cc196793c41bea6302bbe488", "patch": "@@ -13,22 +13,22 @@\n #![allow(dead_code)]\n \n struct Ref<'a, T> {\n-        //~^ ERROR the parameter type `T` may not live long enough\n     field: &'a T\n+        //~^ ERROR the parameter type `T` may not live long enough\n }\n \n struct RefOk<'a, T:'a> {\n     field: &'a T\n }\n \n struct RefIndirect<'a, T> {\n-        //~^ ERROR the parameter type `T` may not live long enough\n     field: RefOk<'a, T>\n+        //~^ ERROR the parameter type `T` may not live long enough\n }\n \n struct DoubleRef<'a, 'b, T> {\n-        //~^ ERROR reference has a longer lifetime than the data it references\n     field: &'a &'b T\n+        //~^ ERROR reference has a longer lifetime than the data it references\n }\n \n fn main() { }"}, {"sha": "e1f1fdaeb341d5bbcb10469de482e124e9d9ebf0", "filename": "src/test/compile-fail/regions-wf-trait-object.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/157422a0c7990234cc196793c41bea6302bbe488/src%2Ftest%2Fcompile-fail%2Fregions-wf-trait-object.rs", "raw_url": "https://github.com/rust-lang/rust/raw/157422a0c7990234cc196793c41bea6302bbe488/src%2Ftest%2Fcompile-fail%2Fregions-wf-trait-object.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-wf-trait-object.rs?ref=157422a0c7990234cc196793c41bea6302bbe488", "patch": "@@ -14,8 +14,8 @@\n trait TheTrait<'t>: 't { }\n \n struct Foo<'a,'b> {\n-        //~^ ERROR lifetime bound not satisfied\n     x: Box<TheTrait<'a>+'b>\n+        //~^ ERROR reference has a longer lifetime\n }\n \n fn main() { }"}, {"sha": "c8b7f35b3aa58355940f5201b3f79a2fab0c7f20", "filename": "src/test/compile-fail/wf-array-elem-sized.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/157422a0c7990234cc196793c41bea6302bbe488/src%2Ftest%2Fcompile-fail%2Fwf-array-elem-sized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/157422a0c7990234cc196793c41bea6302bbe488/src%2Ftest%2Fcompile-fail%2Fwf-array-elem-sized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fwf-array-elem-sized.rs?ref=157422a0c7990234cc196793c41bea6302bbe488", "patch": "@@ -13,8 +13,8 @@\n #![feature(rustc_attrs)]\n #![allow(dead_code)]\n \n-struct Foo { //~ WARN E0277\n-    foo: [[u8]],\n+struct Foo {\n+    foo: [[u8]], //~ WARN E0277\n }\n \n #[rustc_error]"}, {"sha": "5eb53e7edde6b8634bdb2f993da98fba90ae8cf1", "filename": "src/test/compile-fail/wf-enum-fields-struct-variant.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/157422a0c7990234cc196793c41bea6302bbe488/src%2Ftest%2Fcompile-fail%2Fwf-enum-fields-struct-variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/157422a0c7990234cc196793c41bea6302bbe488/src%2Ftest%2Fcompile-fail%2Fwf-enum-fields-struct-variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fwf-enum-fields-struct-variant.rs?ref=157422a0c7990234cc196793c41bea6302bbe488", "patch": "@@ -0,0 +1,28 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test that we check struct fields for WFedness.\n+\n+#![feature(associated_type_defaults)]\n+#![feature(rustc_attrs)]\n+#![allow(dead_code)]\n+\n+struct IsCopy<T:Copy> {\n+    value: T\n+}\n+\n+enum AnotherEnum<A> {\n+    AnotherVariant {\n+        f: IsCopy<A> //~ ERROR E0277\n+    }\n+}\n+\n+#[rustc_error]\n+fn main() { }"}, {"sha": "76ad40f845768280ca2b39a22d1d43aa8efcdea0", "filename": "src/test/compile-fail/wf-enum-fields.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/157422a0c7990234cc196793c41bea6302bbe488/src%2Ftest%2Fcompile-fail%2Fwf-enum-fields.rs", "raw_url": "https://github.com/rust-lang/rust/raw/157422a0c7990234cc196793c41bea6302bbe488/src%2Ftest%2Fcompile-fail%2Fwf-enum-fields.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fwf-enum-fields.rs?ref=157422a0c7990234cc196793c41bea6302bbe488", "patch": "@@ -22,11 +22,5 @@ enum SomeEnum<A> {\n     SomeVariant(IsCopy<A>) //~ ERROR E0277\n }\n \n-enum AnotherEnum<A> { //~ ERROR E0277\n-    AnotherVariant {\n-        f: IsCopy<A>\n-    }\n-}\n-\n #[rustc_error]\n fn main() { }"}, {"sha": "593c9435f6c751dc607575a58e2018a826507442", "filename": "src/test/compile-fail/wf-in-fn-type-static.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/157422a0c7990234cc196793c41bea6302bbe488/src%2Ftest%2Fcompile-fail%2Fwf-in-fn-type-static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/157422a0c7990234cc196793c41bea6302bbe488/src%2Ftest%2Fcompile-fail%2Fwf-in-fn-type-static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fwf-in-fn-type-static.rs?ref=157422a0c7990234cc196793c41bea6302bbe488", "patch": "@@ -18,12 +18,12 @@ struct MustBeCopy<T:Copy> {\n     t: T\n }\n \n-struct Foo<T> { //~ WARN E0310\n+struct Foo<T> {\n     // needs T: 'static\n     x: fn() -> &'static T //~ WARN E0310\n }\n \n-struct Bar<T> { //~ WARN E0310\n+struct Bar<T> {\n     // needs T: Copy\n     x: fn(&'static T) //~ WARN E0310\n }"}, {"sha": "c697dfd50ad471c3b9add3da74dfd81b82e08878", "filename": "src/test/compile-fail/wf-in-obj-type-static.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/157422a0c7990234cc196793c41bea6302bbe488/src%2Ftest%2Fcompile-fail%2Fwf-in-obj-type-static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/157422a0c7990234cc196793c41bea6302bbe488/src%2Ftest%2Fcompile-fail%2Fwf-in-obj-type-static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fwf-in-obj-type-static.rs?ref=157422a0c7990234cc196793c41bea6302bbe488", "patch": "@@ -19,7 +19,7 @@ struct MustBeCopy<T:Copy> {\n     t: T\n }\n \n-struct Foo<T> { //~ WARN E0310\n+struct Foo<T> {\n     // needs T: 'static\n     x: Object<&'static T> //~ WARN E0310\n }"}, {"sha": "dc0cbeff153a96c66447e498e5c566b7801918ff", "filename": "src/test/compile-fail/wf-outlives-ty-in-fn-or-trait.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/157422a0c7990234cc196793c41bea6302bbe488/src%2Ftest%2Fcompile-fail%2Fwf-outlives-ty-in-fn-or-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/157422a0c7990234cc196793c41bea6302bbe488/src%2Ftest%2Fcompile-fail%2Fwf-outlives-ty-in-fn-or-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fwf-outlives-ty-in-fn-or-trait.rs?ref=157422a0c7990234cc196793c41bea6302bbe488", "patch": "@@ -18,13 +18,11 @@\n trait Trait<T> { }\n \n struct Foo<'a,T> {\n-    //~^ WARN E0309\n     f: &'a fn(T),\n     //~^ WARN E0309\n }\n \n struct Bar<'a,T> {\n-    //~^ WARN E0309\n     f: &'a Trait<T>,\n     //~^ WARN E0309\n }"}]}